{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f73d39dd4042312f7c05c5c3dfbc508f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10339d9a8e3ce331598c1e0118ec449f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "3f665dc08ffa02e27b74efb0940c16f2120a11f8", "commitAfterChange": "307e2de84d078daed3099015a7ac89d980746b6b", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 36, "signatureBeforeChange": " public boolean isTypeArgumentIntersecting(TypeBinding otherArgument)", "signatureAfterChange": " private boolean isProvablyDistinctTypeArgument(TypeBinding otherArgument, final ParameterizedTypeBinding paramType, final int rank)", "diff": ["+ */", "+private boolean isProvablyDistinctTypeArgument(TypeBinding otherArgument, final ParameterizedTypeBinding paramType, final int rank) {", "+\tif (this == otherArgument)", "+\t\treturn false;", "+\t", "+\tTypeBinding upperBound1 = null;", "+\tTypeBinding lowerBound1 = null;", "+\tswitch (kind()) {", "+\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\tWildcardBinding wildcard = (WildcardBinding) this;", "+\t\t\tswitch (wildcard.boundKind) {", "+\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\tupperBound1 = wildcard.bound;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\tlowerBound1 = wildcard.bound;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase Binding.INTERSECTION_TYPE :", "+\t\t\tbreak;", "+\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\tfinal TypeVariableBinding variable = (TypeVariableBinding) this;", "+\t\t\tif (variable.firstBound == null) // unbound variable", "+\t\t\t\treturn false;", "+\t\t\tif (variable.isCapture()) {", "+\t\t\t\tupperBound1 = variable.upperBound();", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tTypeBinding eliminatedType = (paramType.environment.convertEliminatingTypeVariables(variable, paramType.genericType(), rank, null));", "+\t\t\tswitch (eliminatedType.kind()) {", "+\t\t\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\t\tcase Binding.INTERSECTION_TYPE :", "+\t\t\t\t\twildcard = (WildcardBinding) eliminatedType;", "+\t\t\t\t\tswitch (wildcard.boundKind) {", "+\t\t\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\t\t\tupperBound1 = wildcard.bound;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\t\t\tlowerBound1 = wildcard.bound;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tbreak;", "+\t}", "+\tTypeBinding upperBound2 = null;", "+\tTypeBinding lowerBound2 = null;", "+\tswitch (otherArgument.kind()) {", "+\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherArgument;", "+\t\t\tswitch (otherWildcard.boundKind) {", "+\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\tupperBound2 = otherWildcard.bound;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\tlowerBound2 = otherWildcard.bound;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase Binding.INTERSECTION_TYPE :", "+\t\t\tbreak;", "+\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\tTypeVariableBinding otherVariable = (TypeVariableBinding) otherArgument;", "+\t\t\tif (otherVariable.firstBound == null) // unbound variable", "+\t\t\t\treturn false;", "+\t\t\tif (otherVariable.isCapture()) {", "+\t\t\t\tupperBound2 = otherVariable.upperBound(); // TODO need to improve for otherBounds", "+\t\t\t\tbreak;", "+\t\t\t} ", "+\t\t\tTypeBinding otherEliminatedType = (paramType.environment.convertEliminatingTypeVariables(otherVariable, paramType.genericType(), rank, null));", "+\t\t\tswitch (otherEliminatedType.kind()) {", "+\t\t\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\t\tcase Binding.INTERSECTION_TYPE :", "+\t\t\t\t\totherWildcard = (WildcardBinding) otherEliminatedType;", "+\t\t\t\t\tswitch (otherWildcard.boundKind) {", "+\t\t\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\t\t\tupperBound2 = otherWildcard.bound;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\t\t\tlowerBound2 = otherWildcard.bound;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t}\t\t\tbreak;", "+\t}", "+\tif (lowerBound1 != null) {", "+\t\tif (lowerBound2 != null) {", "+\t\t\treturn false; // Object could always be a candidate", "+", "+\t\t} else if (upperBound2 != null) {", "+\t\t\treturn !lowerBound1.isCompatibleWith(upperBound2);", "+//\t\t\treturn lowerBound1.isProvableDistinctSubType(upperBound2);", "+\t\t} else {", "+\t\t\treturn !lowerBound1.isCompatibleWith(otherArgument);", "+//\t\t\treturn lowerBound1.isProvableDistinctSubType(otherArgument);", "+\t\t}", "+\t} else if (upperBound1 != null) {", "+\t\tif (lowerBound2 != null) {", "+\t\t\treturn !lowerBound2.isCompatibleWith(upperBound1);", "+\t\t\t//return lowerBound2.isProvableDistinctSubType(upperBound1);", "+\t\t} else if (upperBound2 != null) {", "+\t\t\treturn upperBound1.isProvableDistinctSubType(upperBound2) ", "+\t\t\t\t\t\t\t&& upperBound2.isProvableDistinctSubType(upperBound1);", "+\t\t} else {", "+\t\t\treturn otherArgument.isProvableDistinctSubType(upperBound1);", "+\t\t}", "+\t} else {", "+\t\tif (lowerBound2 != null) {", "+\t\t\treturn !lowerBound2.isCompatibleWith(this);", "+//\t\t\treturn lowerBound2.isProvableDistinctSubType(this);", "+\t\t} else if (upperBound2 != null) {", "+\t\t\treturn this.isProvableDistinctSubType(upperBound2);", "+\t\t} else {", "+\t\t\treturn true; // ground types should have been the same", "+\t\t}", "+\t}", "+}", "- */", "-public boolean isTypeArgumentIntersecting(TypeBinding otherArgument) {", "-\tif (this == otherArgument)", "-\t\treturn true;", "-\tswitch (kind()) {", "-", "-\t// TYPE_PARAM & ANY TYPE", "-\tcase Binding.TYPE_PARAMETER:", "-\t\treturn true;", "-", "-\tcase Binding.WILDCARD_TYPE:", "-\tcase Binding.INTERSECTION_TYPE:", "-\t\tswitch (otherArgument.kind()) {", "-", "-\t\t// WILDCARD & TYPE_PARAM", "-\t\tcase Binding.TYPE_PARAMETER:", "-\t\t\treturn true;", "-", "-\t\t\t// WILDCARD & WILDCARD", "-\t\tcase Binding.WILDCARD_TYPE:", "-\t\tcase Binding.INTERSECTION_TYPE:", "-\t\t\tTypeBinding lowerBound1 = null;", "-\t\t\tTypeBinding upperBound1 = null;", "-\t\t\tWildcardBinding wildcard = (WildcardBinding) this;", "-\t\t\tswitch (wildcard.boundKind) {", "-\t\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\t\tupperBound1 = wildcard.bound;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Wildcard.SUPER:", "-\t\t\t\t\tlowerBound1 = wildcard.bound;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Wildcard.UNBOUND:", "-\t\t\t\t}", "-\t", "-\t\t\t\tTypeBinding lowerBound2 = null;", "-\t\t\t\tTypeBinding upperBound2 = null;", "-\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherArgument;", "-\t\t\t\tswitch (otherWildcard.boundKind) {", "-\t\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\t\tupperBound2 = otherWildcard.bound;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Wildcard.SUPER:", "-\t\t\t\t\tlowerBound2 = otherWildcard.bound;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Wildcard.UNBOUND:", "-\t\t\t\t}", "-\t\t\t\tif (lowerBound1 != null) {", "-\t\t\t\t\tif (lowerBound2 != null) {", "-\t\t\t\t\t\treturn true; // Object could always be a candidate", "-\t", "-\t\t\t\t\t} else if (upperBound2 != null) {", "-\t\t\t\t\t\treturn lowerBound1.isCompatibleWith(upperBound2);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t} else if (upperBound1 != null) {", "-\t\t\t\t\tif (upperBound1.isTypeVariable())", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\tif (lowerBound2 != null) {", "-\t\t\t\t\t\treturn lowerBound2.isCompatibleWith(upperBound1);", "-\t", "-\t\t\t\t\t} else if (upperBound2 != null) {", "-\t\t\t\t\t\tif (upperBound1.isInterface()) {", "-\t\t\t\t\t\t\tif (upperBound2.isInterface())", "-\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\tif (upperBound2.isArrayType()", "-\t\t\t\t\t\t\t\t\t|| ((upperBound2 instanceof ReferenceBinding) && ((ReferenceBinding) upperBound2)", "-\t\t\t\t\t\t\t\t\t\t\t.isFinal())) {", "-\t\t\t\t\t\t\t\treturn upperBound2", "-\t\t\t\t\t\t\t\t\t\t.isCompatibleWith(upperBound1);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tif (upperBound2.isInterface()) {", "-\t\t\t\t\t\t\t\tif (upperBound1.isArrayType()", "-\t\t\t\t\t\t\t\t\t\t|| ((upperBound1 instanceof ReferenceBinding) && ((ReferenceBinding) upperBound1)", "-\t\t\t\t\t\t\t\t\t\t\t\t.isFinal())) {", "-\t\t\t\t\t\t\t\t\treturn upperBound1", "-\t\t\t\t\t\t\t\t\t\t\t.isCompatibleWith(upperBound2);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\treturn upperBound1", "-\t\t\t\t\t\t\t\t\t\t.isCompatibleWith(upperBound2);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t", "-\t\t\t\t// WILDCARD & OTHER TYPE", "-\t\t\tdefault:", "-\t\t\t\twildcard = (WildcardBinding) this;", "-\t\t\t\tswitch (wildcard.boundKind) {", "-\t\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\t\treturn otherArgument.isCompatibleWith(wildcard.bound);", "-\t\t\t\tcase Wildcard.SUPER:", "-\t\t\t\t\treturn wildcard.bound.isCompatibleWith(otherArgument);", "-\t\t\t\tcase Wildcard.UNBOUND:", "-\t\t\t\tdefault:", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t}", "-", "-\tdefault:", "-\t\tswitch (otherArgument.kind()) {", "-", "-\t\t// OTHER TYPE & TYPE_PARAM", "-\t\tcase Binding.TYPE_PARAMETER:", "-\t\t\treturn true;", "-", "-\t\t\t// OTHER TYPE & WILDCARD", "-\t\tcase Binding.WILDCARD_TYPE:", "-\t\tcase Binding.INTERSECTION_TYPE:", "-\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherArgument;", "-\t\t\tswitch (otherWildcard.boundKind) {", "-\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\treturn this.isCompatibleWith(otherWildcard.bound);", "-\t\t\tcase Wildcard.SUPER:", "-\t\t\t\treturn otherWildcard.bound.isCompatibleWith(this);", "-\t\t\tcase Wildcard.UNBOUND:", "-\t\t\tdefault:", "-\t\t\t\treturn true;", "-\t\t\t}", "-", "-\t\t\t// OTHER TYPE & OTHER TYPE", "-\t\tdefault:", "-\t\t\treturn false;", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f57806ec5296ab34dc96e0e6a0dee41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "83dc88df7a1508be17b764df4120ac8a34178f58", "commitAfterChange": "f428b70bc80bfdae47260a00a8636113b21b698c", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public boolean isTypeArgumentIntersecting(TypeBinding otherArgument)", "signatureAfterChange": " public boolean isTypeArgumentIntersecting(TypeBinding otherArgument)", "diff": ["+\tcase Binding.INTERSECTION_TYPE:", "+\t\tcase Binding.INTERSECTION_TYPE:", "-\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\tupperBound1 = wildcard.bound;", "-\t\t\t\tbreak;", "-\t\t\tcase Wildcard.SUPER:", "-\t\t\t\tlowerBound1 = wildcard.bound;", "-\t\t\t\tbreak;", "-\t\t\tcase Wildcard.UNBOUND:", "-\t\t\t}", "-", "-\t\t\tTypeBinding lowerBound2 = null;", "-\t\t\tTypeBinding upperBound2 = null;", "-\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherArgument;", "-\t\t\tswitch (otherWildcard.boundKind) {", "-\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\tupperBound2 = otherWildcard.bound;", "-\t\t\t\tbreak;", "-\t\t\tcase Wildcard.SUPER:", "-\t\t\t\tlowerBound2 = otherWildcard.bound;", "-\t\t\t\tbreak;", "-\t\t\tcase Wildcard.UNBOUND:", "-\t\t\t}", "-\t\t\tif (lowerBound1 != null) {", "-\t\t\t\tif (lowerBound2 != null) {", "-\t\t\t\t\treturn true; // Object could always be a candidate", "-", "-\t\t\t\t} else if (upperBound2 != null) {", "-\t\t\t\t\treturn lowerBound1.isCompatibleWith(upperBound2);", "-\t\t\t\t} else {", "-\t\t\t\t\treturn true;", "+\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\tupperBound1 = wildcard.bound;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\tlowerBound1 = wildcard.bound;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Wildcard.UNBOUND:", "-\t\t\t} else if (upperBound1 != null) {", "-\t\t\t\tif (upperBound1.isTypeVariable())", "-\t\t\t\t\treturn true;", "-\t\t\t\tif (lowerBound2 != null) {", "-\t\t\t\t\treturn lowerBound2.isCompatibleWith(upperBound1);", "-", "-\t\t\t\t} else if (upperBound2 != null) {", "-\t\t\t\t\tif (upperBound1.isInterface()) {", "-\t\t\t\t\t\tif (upperBound2.isInterface())", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\tif (upperBound2.isArrayType()", "-\t\t\t\t\t\t\t\t|| ((upperBound2 instanceof ReferenceBinding) && ((ReferenceBinding) upperBound2)", "-\t\t\t\t\t\t\t\t\t\t.isFinal())) {", "-\t\t\t\t\t\t\treturn upperBound2", "-\t\t\t\t\t\t\t\t\t.isCompatibleWith(upperBound1);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn true;", "+\t", "+\t\t\t\tTypeBinding lowerBound2 = null;", "+\t\t\t\tTypeBinding upperBound2 = null;", "+\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherArgument;", "+\t\t\t\tswitch (otherWildcard.boundKind) {", "+\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\tupperBound2 = otherWildcard.bound;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\tlowerBound2 = otherWildcard.bound;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\t}", "+\t\t\t\tif (lowerBound1 != null) {", "+\t\t\t\t\tif (lowerBound2 != null) {", "+\t\t\t\t\t\treturn true; // Object could always be a candidate", "+\t", "+\t\t\t\t\t} else if (upperBound2 != null) {", "+\t\t\t\t\t\treturn lowerBound1.isCompatibleWith(upperBound2);", "-\t\t\t\t\t\tif (upperBound2.isInterface()) {", "-\t\t\t\t\t\t\tif (upperBound1.isArrayType()", "-\t\t\t\t\t\t\t\t\t|| ((upperBound1 instanceof ReferenceBinding) && ((ReferenceBinding) upperBound1)", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (upperBound1 != null) {", "+\t\t\t\t\tif (upperBound1.isTypeVariable())", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\tif (lowerBound2 != null) {", "+\t\t\t\t\t\treturn lowerBound2.isCompatibleWith(upperBound1);", "+\t", "+\t\t\t\t\t} else if (upperBound2 != null) {", "+\t\t\t\t\t\tif (upperBound1.isInterface()) {", "+\t\t\t\t\t\t\tif (upperBound2.isInterface())", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\tif (upperBound2.isArrayType()", "+\t\t\t\t\t\t\t\t\t|| ((upperBound2 instanceof ReferenceBinding) && ((ReferenceBinding) upperBound2)", "+\t\t\t\t\t\t\t\treturn upperBound2", "+\t\t\t\t\t\t\t\t\t\t.isCompatibleWith(upperBound1);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (upperBound2.isInterface()) {", "+\t\t\t\t\t\t\t\tif (upperBound1.isArrayType()", "+\t\t\t\t\t\t\t\t\t\t|| ((upperBound1 instanceof ReferenceBinding) && ((ReferenceBinding) upperBound1)", "+\t\t\t\t\t\t\t\t\t\t\t\t.isFinal())) {", "+\t\t\t\t\t\t\t\t\treturn upperBound1", "+\t\t\t\t\t\t\t\t\t\t\t.isCompatibleWith(upperBound2);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\treturn upperBound1", "-\t\t\t\t\t\t\t\t\t.isCompatibleWith(upperBound2);", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturn true;", "-\t\t\t\t\treturn true;", "-\t\t\t} else {", "-\t\t\t\treturn true;", "-\t\t\t}", "-", "-\t\t\t// WILDCARD & OTHER TYPE", "-\t\tdefault:", "-\t\t\twildcard = (WildcardBinding) this;", "-\t\t\tswitch (wildcard.boundKind) {", "-\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\treturn otherArgument.isCompatibleWith(wildcard.bound);", "-\t\t\tcase Wildcard.SUPER:", "-\t\t\t\treturn wildcard.bound.isCompatibleWith(otherArgument);", "-\t\t\tcase Wildcard.UNBOUND:", "+\t", "+\t\t\t\t// WILDCARD & OTHER TYPE", "-\t\t\t\treturn true;", "-\t\t\t}", "+\t\t\t\twildcard = (WildcardBinding) this;", "+\t\t\t\tswitch (wildcard.boundKind) {", "+\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\treturn otherArgument.isCompatibleWith(wildcard.bound);", "+\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\treturn wildcard.bound.isCompatibleWith(otherArgument);", "+\t\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\tdefault:", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\tcase Binding.INTERSECTION_TYPE:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "866a96d7113fec092ce0b82e46c3f687", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "d1adb49c37ffedded033367d49226373a027a74a", "commitAfterChange": "bb78eb5668b505d8cc58cdf0f1742d5d5430764d", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public boolean isTypeArgumentIntersecting(TypeBinding otherArgument)", "signatureAfterChange": " public boolean isTypeArgumentIntersecting(TypeBinding otherArgument)", "diff": ["-\tif (this.isTypeVariable() || otherArgument.isTypeVariable())", "-\t\treturn true;", "-\tif (this.isWildcard()) {", "-\t\tif (!otherArgument.isWildcard()) {", "-\t\t\tWildcardBinding wildcard = (WildcardBinding) this;", "-\t\t\tswitch(wildcard.boundKind) {", "-\t\t\t\tcase Wildcard.EXTENDS :", "-\t\t\t\t\treturn otherArgument.isCompatibleWith(wildcard.bound);", "-\t\t\t\tcase Wildcard. SUPER :", "-\t\t\t\t\treturn wildcard.bound.isCompatibleWith(otherArgument);", "-\t\t\t\tcase Wildcard.UNBOUND :", "-\t\t\t\tdefault:", "-\t\t\t\t\treturn true;", "-\t\t\t}", "-\t\t}", "-\t} else if (otherArgument.isWildcard()) {", "-\t\tWildcardBinding otherWildcard = (WildcardBinding) otherArgument;", "-\t\tswitch(otherWildcard.boundKind) {", "-\t\t\tcase Wildcard.EXTENDS :", "-\t\t\t\treturn this.isCompatibleWith(otherWildcard.bound);", "-\t\t\tcase Wildcard. SUPER :", "-\t\t\t\treturn otherWildcard.bound.isCompatibleWith(this);", "-\t\t\tcase Wildcard.UNBOUND :", "-\t\t\tdefault:", "-\t\t\t\treturn true;", "-\t\t}", "-\t}", "-\tTypeBinding lowerBound1 = null;", "-\tTypeBinding upperBound1 = null;", "-\tWildcardBinding wildcard = (WildcardBinding) this;", "-\tswitch(wildcard.boundKind) {", "-\t\tcase Wildcard.EXTENDS :", "-\t\t\tupperBound1 = wildcard.bound;", "-\t\t\tbreak;", "-\t\tcase Wildcard. SUPER :", "-\t\t\tlowerBound1 = wildcard.bound;", "-\t\t\tbreak;", "-\t\tcase Wildcard.UNBOUND :", "-\t}", "-", "-\tTypeBinding lowerBound2 = null;", "-\tTypeBinding upperBound2 = null;", "-\tWildcardBinding otherWildcard = (WildcardBinding) otherArgument;", "-\tswitch(otherWildcard.boundKind) {", "-\t\tcase Wildcard.EXTENDS :", "-\t\t\tupperBound2 = otherWildcard.bound;", "-\t\t\tbreak;", "-\t\tcase Wildcard. SUPER :", "-\t\t\tlowerBound2 = otherWildcard.bound;", "-\t\t\tbreak;", "-\t\tcase Wildcard.UNBOUND :", "-\t}", "-\tif (lowerBound1 != null) {", "-\t\tif (lowerBound2 != null) {", "-\t\t\treturn true; // Object could always be a candidate", "+\tswitch (kind()) {", "+\t\t", "+\t\t// TYPE_PARAM & ANY TYPE", "+\t\tcase Binding.TYPE_PARAMETER :   ", "+\t\t\treturn true;", "-\t\t} else if (upperBound2 != null) {", "-\t\t\treturn lowerBound1.isCompatibleWith(upperBound2);", "-\t\t} else {", "-\t\t\treturn true;", "-\t\t}", "-\t} else if (upperBound1 != null) {", "-\t\tif (lowerBound2 != null) {", "-\t\t\treturn lowerBound2.isCompatibleWith(upperBound1);", "-", "-\t\t} else if (upperBound2 != null) {", "-\t\t\tif (upperBound1.isInterface()) {", "-\t\t\t\tif (upperBound2.isInterface())", "+\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\tswitch (otherArgument.kind()) {", "+\t\t\t\t", "+\t\t\t\t// WILDCARD & TYPE_PARAM", "+\t\t\t\tcase Binding.TYPE_PARAMETER :", "-\t\t\t\tif (upperBound2.isArrayType() || ((upperBound2 instanceof ReferenceBinding) && ((ReferenceBinding)upperBound2).isFinal())) {", "-\t\t\t\t\treturn upperBound2.isCompatibleWith(upperBound1);", "-\t\t\t\t}", "-\t\t\t\treturn true;", "-\t\t\t} else if (upperBound2.isInterface()) {", "-\t\t\t\tif (upperBound1.isArrayType() || ((upperBound1 instanceof ReferenceBinding) && ((ReferenceBinding)upperBound1).isFinal())) {", "-\t\t\t\t\treturn upperBound1.isCompatibleWith(upperBound2);", "-\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t// WILDCARD & WILDCARD", "+\t\t\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\t\t\tTypeBinding lowerBound1 = null;", "+\t\t\t\t\tTypeBinding upperBound1 = null;", "+\t\t\t\t\tWildcardBinding wildcard = (WildcardBinding) this;", "+\t\t\t\t\tswitch(wildcard.boundKind) {", "+\t\t\t\t\t\tcase Wildcard.EXTENDS :", "+\t\t\t\t\t\t\tupperBound1 = wildcard.bound;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard. SUPER :", "+\t\t\t\t\t\t\tlowerBound1 = wildcard.bound;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard.UNBOUND :", "+\t\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t\tTypeBinding lowerBound2 = null;", "+\t\t\t\t\tTypeBinding upperBound2 = null;", "+\t\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherArgument;", "+\t\t\t\t\tswitch(otherWildcard.boundKind) {", "+\t\t\t\t\t\tcase Wildcard.EXTENDS :", "+\t\t\t\t\t\t\tupperBound2 = otherWildcard.bound;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard. SUPER :", "+\t\t\t\t\t\t\tlowerBound2 = otherWildcard.bound;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard.UNBOUND :", "+\t\t\t\t\t}", "+\t\t\t\t\tif (lowerBound1 != null) {", "+\t\t\t\t\t\tif (lowerBound2 != null) {", "+\t\t\t\t\t\t\treturn true; // Object could always be a candidate", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t} else if (upperBound2 != null) {", "+\t\t\t\t\t\t\treturn lowerBound1.isCompatibleWith(upperBound2);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (upperBound1 != null) {", "+\t\t\t\t\t\tif (lowerBound2 != null) {", "+\t\t\t\t\t\t\treturn lowerBound2.isCompatibleWith(upperBound1);", "+\t\t\t\t", "+\t\t\t\t\t\t} else if (upperBound2 != null) {", "+\t\t\t\t\t\t\tif (upperBound1.isInterface()) {", "+\t\t\t\t\t\t\t\tif (upperBound2.isInterface())", "+\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\tif (upperBound2.isArrayType() || ((upperBound2 instanceof ReferenceBinding) && ((ReferenceBinding)upperBound2).isFinal())) {", "+\t\t\t\t\t\t\t\t\treturn upperBound2.isCompatibleWith(upperBound1);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t} else if (upperBound2.isInterface()) {", "+\t\t\t\t\t\t\t\tif (upperBound1.isArrayType() || ((upperBound1 instanceof ReferenceBinding) && ((ReferenceBinding)upperBound1).isFinal())) {", "+\t\t\t\t\t\t\t\t\treturn upperBound1.isCompatibleWith(upperBound2);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t// WILDCARD & OTHER TYPE", "+\t\t\t\tdefault :", "+\t\t\t\t\t wildcard = (WildcardBinding) this;", "+\t\t\t\t\tswitch(wildcard.boundKind) {", "+\t\t\t\t\t\tcase Wildcard.EXTENDS :", "+\t\t\t\t\t\t\treturn otherArgument.isCompatibleWith(wildcard.bound);", "+\t\t\t\t\t\tcase Wildcard. SUPER :", "+\t\t\t\t\t\t\treturn wildcard.bound.isCompatibleWith(otherArgument);", "+\t\t\t\t\t\tcase Wildcard.UNBOUND :", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "-\t\t\treturn true;", "-\t\t} else {", "-\t\t\treturn true;", "-\t\t}", "-\t} else {", "-\t\treturn true;", "+\t\t\t", "+\t\tdefault:", "+\t\t\tswitch (otherArgument.kind()) {", "+", "+\t\t\t\t// OTHER TYPE & TYPE_PARAM", "+\t\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\treturn true;", "+", "+\t\t\t\t// OTHER TYPE & WILDCARD", "+\t\t\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherArgument;", "+\t\t\t\t\tswitch(otherWildcard.boundKind) {", "+\t\t\t\t\t\tcase Wildcard.EXTENDS :", "+\t\t\t\t\t\t\treturn this.isCompatibleWith(otherWildcard.bound);", "+\t\t\t\t\t\tcase Wildcard. SUPER :", "+\t\t\t\t\t\t\treturn otherWildcard.bound.isCompatibleWith(this);", "+\t\t\t\t\t\tcase Wildcard.UNBOUND :", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}\t\t\t\t\t", "+", "+\t\t\t\t// OTHER TYPE & OTHER TYPE", "+\t\t\t\tdefault :", "+\t\t\t\t\treturn false;", "+\t\t\t}"]}], "num": 5249}
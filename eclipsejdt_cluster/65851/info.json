{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0441c9bc768d5fa7c5edb906e06eaf1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d6a482b15bc0c6e700c91403323a13d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "commitAfterChange": "7dfdcc33c89bb2a137f9c84963dd6ab9ff74a661", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tIPath projectOutputLocation, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError, \t\tMap reverseMap) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tIPath projectOutputLocation, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError, \t\tMap reverseMap) \t\tthrows JavaModelException", "diff": ["-\t\t\t\t\tIClasspathEntry resolvedEntry = JavaCore.getResolvedClasspathEntry(rawEntry);", "+\t\t\t\t\tIClasspathEntry resolvedEntry = null;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tresolvedEntry = JavaCore.getResolvedClasspathEntry(rawEntry);", "+\t\t\t\t\t} catch (Assert.AssertionFailedException e) {", "+\t\t\t\t\t\t// Catch the assertion failure and throw java model exception instead", "+\t\t\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=55992", "+\t\t\t\t\t\t// if ignoredUnresolvedEntry is false, status is set by by ClasspathEntry.validateClasspathEntry", "+\t\t\t\t\t\t// called above as validation was needed", "+\t\t\t\t\t\tif (!ignoreUnresolvedEntry) throw new JavaModelException(status);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2ad08e5111ef1d6a06a16591d5f727c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "36f7c1e916ce794f19c8c7bfc5e63afd70aa3df0", "commitAfterChange": "43c55ec0fd64bd306ef21c4d7e4780f0acc5640d", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tsynchronized ITypeBinding resolveExpressionType(Expression expression)", "signatureAfterChange": " \tsynchronized ITypeBinding resolveExpressionType(Expression expression)", "diff": ["-\t\tswitch(expression.getNodeType()) {", "-\t\t\tcase ASTNode.CLASS_INSTANCE_CREATION : ", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode astNode = (org.eclipse.jdt.internal.compiler.ast.ASTNode) this.newAstToOldAst.get(expression);", "-\t\t\t\tif (astNode instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {", "-\t\t\t\t\t// anonymous type case", "-\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) astNode;", "-\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding(typeDeclaration.binding);", "-\t\t\t\t\tif (typeBinding == null) {", "-\t\t\t\t\t\treturn null;", "+\t\ttry {", "+\t\t\tswitch(expression.getNodeType()) {", "+\t\t\t\tcase ASTNode.CLASS_INSTANCE_CREATION : ", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode astNode = (org.eclipse.jdt.internal.compiler.ast.ASTNode) this.newAstToOldAst.get(expression);", "+\t\t\t\t\tif (astNode instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {", "+\t\t\t\t\t\t// anonymous type case", "+\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) astNode;", "+\t\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding(typeDeclaration.binding);", "+\t\t\t\t\t\tif (typeBinding != null) {", "+\t\t\t\t\t\t\treturn typeBinding;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// should be an AllocationExpression", "+\t\t\t\t\t\tAllocationExpression allocationExpression = (AllocationExpression) astNode;", "+\t\t\t\t\t\treturn this.getTypeBinding(allocationExpression.resolvedType);", "-\t\t\t\t\treturn typeBinding;", "-\t\t\t\t} else {", "-\t\t\t\t\t// should be an AllocationExpression", "-\t\t\t\t\tAllocationExpression allocationExpression = (AllocationExpression) astNode;", "-\t\t\t\t\treturn this.getTypeBinding(allocationExpression.resolvedType);", "-\t\t\t\t}", "-\t\t\tcase ASTNode.SIMPLE_NAME :", "-\t\t\tcase ASTNode.QUALIFIED_NAME :", "-\t\t\t\treturn this.resolveTypeBindingForName((Name) expression);", "-\t\t\tcase ASTNode.ARRAY_INITIALIZER :", "-\t\t\tcase ASTNode.ARRAY_CREATION :", "-\t\t\tcase ASTNode.ASSIGNMENT :\t\t\t\t", "-\t\t\tcase ASTNode.POSTFIX_EXPRESSION : ", "-\t\t\tcase ASTNode.PREFIX_EXPRESSION :", "-\t\t\tcase ASTNode.CAST_EXPRESSION :", "-\t\t\tcase ASTNode.TYPE_LITERAL :", "-\t\t\tcase ASTNode.INFIX_EXPRESSION :", "-\t\t\tcase ASTNode.INSTANCEOF_EXPRESSION :", "-\t\t\tcase ASTNode.FIELD_ACCESS :", "-\t\t\tcase ASTNode.SUPER_FIELD_ACCESS :", "-\t\t\tcase ASTNode.ARRAY_ACCESS :", "-\t\t\tcase ASTNode.METHOD_INVOCATION :", "-\t\t\tcase ASTNode.SUPER_METHOD_INVOCATION :", "-\t\t\tcase ASTNode.CONDITIONAL_EXPRESSION : ", "-\t\t\tcase ASTNode.MARKER_ANNOTATION : ", "-\t\t\tcase ASTNode.NORMAL_ANNOTATION :", "-\t\t\tcase ASTNode.SINGLE_MEMBER_ANNOTATION :", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression compilerExpression = (org.eclipse.jdt.internal.compiler.ast.Expression) this.newAstToOldAst.get(expression);", "-\t\t\t\tif (compilerExpression == null) {", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\treturn this.getTypeBinding(compilerExpression.resolvedType);", "-\t\t\tcase ASTNode.STRING_LITERAL :", "-\t\t\t\tif (this.scope == null) return null;", "-\t\t\t\treturn this.getTypeBinding(this.scope.getJavaLangString());", "-\t\t\tcase ASTNode.BOOLEAN_LITERAL :", "-\t\t\tcase ASTNode.NULL_LITERAL : ", "-\t\t\tcase ASTNode.CHARACTER_LITERAL :", "-\t\t\tcase ASTNode.NUMBER_LITERAL :", "-\t\t\t\tLiteral literal = (Literal) this.newAstToOldAst.get(expression);", "-\t\t\t\treturn this.getTypeBinding(literal.literalType(null));", "-\t\t\tcase ASTNode.THIS_EXPRESSION :", "-\t\t\t\tThisReference thisReference = (ThisReference) this.newAstToOldAst.get(expression);", "-\t\t\t\tBlockScope blockScope = (BlockScope) this.astNodesToBlockScope.get(expression);", "-\t\t\t\tif (blockScope == null) {", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\treturn this.getTypeBinding(thisReference.resolveType(blockScope));", "-\t\t\tcase ASTNode.PARENTHESIZED_EXPRESSION :", "-\t\t\t\tParenthesizedExpression parenthesizedExpression = (ParenthesizedExpression) expression;", "-\t\t\t\treturn this.resolveExpressionType(parenthesizedExpression.getExpression());", "-\t\t\tcase ASTNode.VARIABLE_DECLARATION_EXPRESSION :", "-\t\t\t\tVariableDeclarationExpression variableDeclarationExpression = (VariableDeclarationExpression) expression;", "-\t\t\t\tType type = variableDeclarationExpression.getType();", "-\t\t\t\tif (type != null) {", "-\t\t\t\t\treturn type.resolveBinding();", "-\t\t\t\t}", "-\t\t\t\treturn null;", "-\t\t\tdefault: ", "-\t\t\t\treturn null;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ASTNode.SIMPLE_NAME :", "+\t\t\t\tcase ASTNode.QUALIFIED_NAME :", "+\t\t\t\t\treturn this.resolveTypeBindingForName((Name) expression);", "+\t\t\t\tcase ASTNode.ARRAY_INITIALIZER :", "+\t\t\t\tcase ASTNode.ARRAY_CREATION :", "+\t\t\t\tcase ASTNode.ASSIGNMENT :\t\t\t\t", "+\t\t\t\tcase ASTNode.POSTFIX_EXPRESSION : ", "+\t\t\t\tcase ASTNode.PREFIX_EXPRESSION :", "+\t\t\t\tcase ASTNode.CAST_EXPRESSION :", "+\t\t\t\tcase ASTNode.TYPE_LITERAL :", "+\t\t\t\tcase ASTNode.INFIX_EXPRESSION :", "+\t\t\t\tcase ASTNode.INSTANCEOF_EXPRESSION :", "+\t\t\t\tcase ASTNode.FIELD_ACCESS :", "+\t\t\t\tcase ASTNode.SUPER_FIELD_ACCESS :", "+\t\t\t\tcase ASTNode.ARRAY_ACCESS :", "+\t\t\t\tcase ASTNode.METHOD_INVOCATION :", "+\t\t\t\tcase ASTNode.SUPER_METHOD_INVOCATION :", "+\t\t\t\tcase ASTNode.CONDITIONAL_EXPRESSION : ", "+\t\t\t\tcase ASTNode.MARKER_ANNOTATION : ", "+\t\t\t\tcase ASTNode.NORMAL_ANNOTATION :", "+\t\t\t\tcase ASTNode.SINGLE_MEMBER_ANNOTATION :", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression compilerExpression = (org.eclipse.jdt.internal.compiler.ast.Expression) this.newAstToOldAst.get(expression);", "+\t\t\t\t\tif (compilerExpression != null) {", "+\t\t\t\t\t\treturn this.getTypeBinding(compilerExpression.resolvedType);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ASTNode.STRING_LITERAL :", "+\t\t\t\t\tif (this.scope != null) {", "+\t\t\t\t\t\treturn this.getTypeBinding(this.scope.getJavaLangString());", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ASTNode.BOOLEAN_LITERAL :", "+\t\t\t\tcase ASTNode.NULL_LITERAL : ", "+\t\t\t\tcase ASTNode.CHARACTER_LITERAL :", "+\t\t\t\tcase ASTNode.NUMBER_LITERAL :", "+\t\t\t\t\tLiteral literal = (Literal) this.newAstToOldAst.get(expression);", "+\t\t\t\t\treturn this.getTypeBinding(literal.literalType(null));", "+\t\t\t\tcase ASTNode.THIS_EXPRESSION :", "+\t\t\t\t\tThisReference thisReference = (ThisReference) this.newAstToOldAst.get(expression);", "+\t\t\t\t\tBlockScope blockScope = (BlockScope) this.astNodesToBlockScope.get(expression);", "+\t\t\t\t\tif (blockScope != null) {", "+\t\t\t\t\t\treturn this.getTypeBinding(thisReference.resolveType(blockScope));", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ASTNode.PARENTHESIZED_EXPRESSION :", "+\t\t\t\t\tParenthesizedExpression parenthesizedExpression = (ParenthesizedExpression) expression;", "+\t\t\t\t\treturn this.resolveExpressionType(parenthesizedExpression.getExpression());", "+\t\t\t\tcase ASTNode.VARIABLE_DECLARATION_EXPRESSION :", "+\t\t\t\t\tVariableDeclarationExpression variableDeclarationExpression = (VariableDeclarationExpression) expression;", "+\t\t\t\t\tType type = variableDeclarationExpression.getType();", "+\t\t\t\t\tif (type != null) {", "+\t\t\t\t\t\treturn type.resolveBinding();", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t} catch (AbortCompilation e) {", "+\t\t\t// handle missing types", "+\t\treturn null;"]}], "num": 65851}
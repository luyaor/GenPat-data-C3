{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f9ed3aab196e6d42d2e6095274420a3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "298a4fd311c738a3dff65b23c5deb932", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "409f0d1ccf0133d5fcf6863869c728111e50135d", "commitAfterChange": "84e2da9db5b8e3d6a6df97b0f7ad6795dd65a9ad", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprotected void traverseDelta(IResourceDelta delta, Openable parentElement)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, IClasspathEntry[] classpath)", "diff": ["-\tprotected void traverseDelta(IResourceDelta delta, Openable parentElement) {\r", "+\tprotected boolean traverseDelta(IResourceDelta delta, IClasspathEntry[] classpath) {\r", "-\t\tOpenable[] elements = this.createElements(delta.getResource());\r", "+\t\tIResource res = delta.getResource();\r", "+\t\tboolean isOnClasspath = this.isOnClasspath(classpath, res);\r", "+\t\t\r", "-\t\tint flags = delta.getFlags();\r", "-\t\tif (elements != null) {\r", "-\t\t\tfor (int i = 0, length = elements.length; i < length; i++) {\r", "-\t\t\t\telement = elements[i];\r", "-\t\t\t\tIResource res = delta.getResource();\r", "-\r", "-\t\t\t\tupdateIndex(element, delta);\r", "-\t\t\t\tswitch (delta.getKind()) {\r", "-\t\t\t\t\tcase IResourceDelta.ADDED :\r", "-\t\t\t\t\t\tPackageFragmentRoot pkgRoot;\r", "-\t\t\t\t\t\tif (res.getType() == IResource.FILE\r", "-\t\t\t\t\t\t\t&& parentElement != null\r", "-\t\t\t\t\t\t\t&& !parentElement.equals(element.getParent())\r", "-\t\t\t\t\t\t\t&& ((pkgRoot = element.getPackageFragmentRoot()) == null\r", "-\t\t\t\t\t\t\t\t|| !isOnClasspath(pkgRoot))) {\r", "-\t\t\t\t\t\t\ttry { // fake compilation/class file scenario (see JavaCore.createCompilationUnitFrom & createClassFileFrom\r", "-\t\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "-\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\telementAdded(element, delta);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IResourceDelta.REMOVED :\r", "-\t\t\t\t\t\tif (res.getType() == IResource.FILE\r", "-\t\t\t\t\t\t\t&& parentElement != null\r", "-\t\t\t\t\t\t\t&& !parentElement.equals(element.getParent())\r", "-\t\t\t\t\t\t\t&& ((pkgRoot = element.getPackageFragmentRoot()) == null\r", "-\t\t\t\t\t\t\t\t|| !isOnClasspath(pkgRoot))) {\r", "-\t\t\t\t\t\t\ttry { // fake compilation/class file scenario (see JavaCore.createCompilationUnitFrom & createClassFileFrom\r", "-\t\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "-\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\telementRemoved(element, delta);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IResourceDelta.CHANGED :\r", "-\t\t\t\t\t\tif ((flags & IResourceDelta.CONTENT) != 0) {\r", "-\t\t\t\t\t\t\tcontentChanged(element, delta);\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tif ((flags & IResourceDelta.OPEN) != 0) {\r", "-\t\t\t\t\t\t\tres = delta.getResource();\r", "-\t\t\t\t\t\t\tif (isOpen(res)) {\r", "-\t\t\t\t\t\t\t\telementOpened(element, delta);\r", "-\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\telementClosed(element, delta);\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "+\t\tJavaProject project = null;\r", "+\t\tif (isOnClasspath) {\r", "+\t\t\tOpenable[] elements = this.createElements(res);\r", "+\t\t\tif (elements != null) {\r", "+\t\t\t\tfor (int i = 0, length = elements.length; i < length; i++) {\r", "+\t\t\t\t\telement = elements[i];\r", "+\t\t\t\t\tthis.updateCurrentDeltaAndIndex(element, delta);\r", "+\t\t\t} else {\r", "+\t\t\t\treturn false;\r", "-\t\t\ttry {\r", "-\t\t\t\tif (parentElement != null && delta.getResource() != null) {\r", "-\t\t\t\t\tswitch (delta.getResource().getType()) {\r", "-\t\t\t\t\t\tcase IResource.FILE :\r", "-\t\t\t\t\t\tcase IResource.FOLDER :\r", "-\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "-\t\t\t\t\t}\r", "+\t\t\tif (res instanceof IProject) {\r", "+\t\t\t\tproject = (JavaProject)JavaCore.getJavaCore().create((IProject)res);\r", "+\t\t\t\tif (project == null) return false; // not a Java project\r", "+\t\t\t\tthis.updateCurrentDeltaAndIndex(project, delta);\r", "+\t\t\t\tif (delta.getKind() != IResourceDelta.CHANGED \r", "+\t\t\t\t\t\t|| (delta.getFlags() & IResourceDelta.OPEN) != 0) {\r", "+\t\t\t\t\treturn false; // don't go deeper for added, removed, opened or closed projects\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t// do nothing\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tclasspath = project.getExpandedClasspath(true);\r", "+\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\t// if classpath is known, we are for sure out of classpath: stop processing children\r", "+\t\t\t\tfProcessChildren = classpath != null;\r", "-\t\t\tfor (int i = 0; i < children.length; i++) {\r", "-\t\t\t\ttraverseDelta(children[i], element);\r", "+\t\t\tboolean oneChildOnClasspath = false;\r", "+\t\t\tint length = children.length;\r", "+\t\t\tIResourceDelta[] orphanChildren = new IResourceDelta[length];\r", "+\t\t\tfor (int i = 0; i < length; i++) {\r", "+\t\t\t\tIResourceDelta child = children[i];\r", "+\t\t\t\tif (!traverseDelta(child, isOnClasspath ? null : classpath)) {\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\tif (isOnClasspath) { \r", "+\t\t\t\t\t\t\t// add child as non java resource if current element on classpath\r", "+\t\t\t\t\t\t\tnonJavaResourcesChanged(element, child);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\torphanChildren[i] = child;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\toneChildOnClasspath = true;\r", "+\t\t\t\t}\r", "+\t\t\tif (oneChildOnClasspath || project != null) {\r", "+\t\t\t\t// add orphan children (case of non java resources under project)\r", "+\t\t\t\tif (project == null) {\r", "+\t\t\t\t\tproject = (JavaProject)JavaCore.getJavaCore().create(res.getProject());\r", "+\t\t\t\t}\r", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tif (orphanChildren[i] != null) {\r", "+\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\tnonJavaResourcesChanged(project, orphanChildren[i]);\r", "+\t\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}", "+\t\t\t\t}\r", "+\t\t\t} // else resource delta will be added by parent\r", "+\t\t\treturn isOnClasspath || oneChildOnClasspath;\r", "+\t\t} else {\r", "+\t\t\treturn isOnClasspath && element != null; // element is null if non-java resource in package\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ccb0b951bbfc86d1a178473cdbed65c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 290, "methodNumberAfterChange": 100, "signatureBeforeChange": " public final void store(TypeBinding type, int localPosition)", "signatureAfterChange": " public void generateEmulationForConstructor(Scope scope, MethodBinding methodBinding)", "diff": ["+}", "+public void generateEmulationForConstructor(Scope scope, MethodBinding methodBinding) {", "+\t// leave a java.lang.reflect.Field object on the stack", "+\tthis.ldc(String.valueOf(methodBinding.declaringClass.constantPoolName()).replace('/', '.'));", "+\tthis.invokeClassForName();", "+\tint paramLength = methodBinding.parameters.length;", "+\tthis.generateInlinedValue(paramLength);", "+\tthis.newArray(scope.createArrayType(scope.getType(TypeConstants.JAVA_LANG_CLASS, 3), 1));", "+\tif (paramLength > 0) {", "+\t\tthis.dup();", "+\t\tfor (int i = 0; i < paramLength; i++) {", "+\t\t\tthis.generateInlinedValue(i);\t", "+\t\t\tTypeBinding parameter = methodBinding.parameters[i];", "+\t\t\tif (parameter.isBaseType()) {", "+\t\t\t\tthis.getTYPE(parameter.id);", "+\t\t\t} else if (parameter.isArrayType()) {", "+\t\t\t\tArrayBinding array = (ArrayBinding)parameter;", "+\t\t\t\tif (array.leafComponentType.isBaseType()) {", "+\t\t\t\t\tthis.getTYPE(array.leafComponentType.id);", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.ldc(String.valueOf(array.leafComponentType.constantPoolName()).replace('/', '.'));", "+\t\t\t\t\tthis.invokeClassForName();", "+\t\t\t\t}", "+\t\t\t\tint dimensions = array.dimensions;", "+\t\t\t\tthis.generateInlinedValue(dimensions);", "+\t\t\t\tthis.newarray(TypeIds.T_int);\t", "+\t\t\t\tthis.invokeArrayNewInstance();", "+\t\t\t\tthis.invokeObjectGetClass();", "+\t\t\t} else {", "+\t\t\t\t// parameter is a reference binding", "+\t\t\t\tthis.ldc(String.valueOf(methodBinding.declaringClass.constantPoolName()).replace('/', '.'));", "+\t\t\t\tthis.invokeClassForName();", "+\t\t\t}", "+\t\t\tthis.aastore();", "+\t\t\tif (i < paramLength - 1) {", "+\t\t\t\tthis.dup();", "+\t\t\t}", "+\t\t}", "+\t}", "+\tthis.invokeClassGetDeclaredConstructor();", "+\tthis.dup();", "+\tthis.iconst_1();", "+\tthis.invokeAccessibleObjectSetAccessible();", "+}", "-public final void store(TypeBinding type, int localPosition) {", "-\t// Using dedicated int bytecode", "-\tif ((type == TypeBinding.INT) || (type == TypeBinding.CHAR) || (type == TypeBinding.BYTE) || (type == TypeBinding.SHORT) || (type == TypeBinding.BOOLEAN)) {", "-\t\tswitch (localPosition) {", "-\t\t\tcase 0 :", "-\t\t\t\tthis.istore_0();", "-\t\t\t\tbreak;", "-\t\t\tcase 1 :", "-\t\t\t\tthis.istore_1();", "-\t\t\t\tbreak;", "-\t\t\tcase 2 :", "-\t\t\t\tthis.istore_2();", "-\t\t\t\tbreak;", "-\t\t\tcase 3 :", "-\t\t\t\tthis.istore_3();", "-\t\t\t\tbreak;", "-\t\t\tdefault :", "-\t\t\t\tthis.istore(localPosition);", "-\t\t}", "-\t\treturn;", "-\t}", "-\t// Using dedicated float bytecode", "-\tif (type == TypeBinding.FLOAT) {", "-\t\tswitch (localPosition) {", "-\t\t\tcase 0 :", "-\t\t\t\tthis.fstore_0();", "-\t\t\t\tbreak;", "-\t\t\tcase 1 :", "-\t\t\t\tthis.fstore_1();", "-\t\t\t\tbreak;", "-\t\t\tcase 2 :", "-\t\t\t\tthis.fstore_2();", "-\t\t\t\tbreak;", "-\t\t\tcase 3 :", "-\t\t\t\tthis.fstore_3();", "-\t\t\t\tbreak;", "-\t\t\tdefault :", "-\t\t\t\tthis.fstore(localPosition);", "-\t\t}", "-\t\treturn;", "-\t}", "-\t// Using dedicated long bytecode", "-\tif (type == TypeBinding.LONG) {", "-\t\tswitch (localPosition) {", "-\t\t\tcase 0 :", "-\t\t\t\tthis.lstore_0();", "-\t\t\t\tbreak;", "-\t\t\tcase 1 :", "-\t\t\t\tthis.lstore_1();", "-\t\t\t\tbreak;", "-\t\t\tcase 2 :", "-\t\t\t\tthis.lstore_2();", "-\t\t\t\tbreak;", "-\t\t\tcase 3 :", "-\t\t\t\tthis.lstore_3();", "-\t\t\t\tbreak;", "-\t\t\tdefault :", "-\t\t\t\tthis.lstore(localPosition);", "-\t\t}", "-\t\treturn;", "-\t}", "-\t// Using dedicated double bytecode", "-\tif (type == TypeBinding.DOUBLE) {", "-\t\tswitch (localPosition) {", "-\t\t\tcase 0 :", "-\t\t\t\tthis.dstore_0();", "-\t\t\t\tbreak;", "-\t\t\tcase 1 :", "-\t\t\t\tthis.dstore_1();", "-\t\t\t\tbreak;", "-\t\t\tcase 2 :", "-\t\t\t\tthis.dstore_2();", "-\t\t\t\tbreak;", "-\t\t\tcase 3 :", "-\t\t\t\tthis.dstore_3();", "-\t\t\t\tbreak;", "-\t\t\tdefault :", "-\t\t\t\tthis.dstore(localPosition);", "-\t\t}", "-\t\treturn;", "-\t}", "-\t// Reference object", "-\tswitch (localPosition) {", "-\t\tcase 0 :", "-\t\t\tthis.astore_0();", "-\t\t\tbreak;", "-\t\tcase 1 :", "-\t\t\tthis.astore_1();", "-\t\t\tbreak;", "-\t\tcase 2 :", "-\t\t\tthis.astore_2();", "-\t\t\tbreak;", "-\t\tcase 3 :", "-\t\t\tthis.astore_3();", "-\t\t\tbreak;", "-\t\tdefault :", "-\t\t\tthis.astore(localPosition);", "-\t}", "-}"]}], "num": 25339}
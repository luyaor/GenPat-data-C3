{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af684cb48b913073584e31140d3adb30", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "472c50832f357d6eff126e4cd7e995d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "09f42f58bcdf2fa84ccd2b8b65f28ab3036222ca", "commitAfterChange": "57e8dd41219d846363c918d62edb5007994c5c79", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public TypeBinding resolveTentatively(BlockScope scope, TypeBinding targetType)", "signatureAfterChange": " public TypeBinding checkAgainstFinalTargetType(TypeBinding targetType)", "diff": ["- */", "-public TypeBinding resolveTentatively(BlockScope scope, TypeBinding targetType) {", "-\treturn resolveType(scope); // default is to do full resolution in just this one step", "-}", "+public TypeBinding checkAgainstFinalTargetType(TypeBinding targetType) {", "+\treturn targetType; // subclasses may choose to do real stuff here"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6f55131d235546438a18702fea4e8ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "9f63437bec67bc6f1450b706ffa6a59a67485b74", "commitAfterChange": "2b5868a69a1295fe1d99f9e80995ceed273132ed", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void tagAsUnnecessaryCast(Scope scope, TypeBinding castType)", "signatureAfterChange": " public void tagAsUnnecessaryCast(Scope scope, TypeBinding castType)", "diff": ["-\t */", "-\tpublic void tagAsUnnecessaryCast(Scope scope, TypeBinding castType) {", "-\t\tif (this.expression.resolvedType == null) return; // cannot do better if expression is not bound", "-\t\tthis.bits |= UnnecessaryCast;", "-\t}", "+ */", "+public void tagAsUnnecessaryCast(Scope scope, TypeBinding castType) {", "+\tthis.bits |= ASTNode.UnnecessaryCast;", "+}"]}], "num": 69049}
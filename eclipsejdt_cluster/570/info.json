{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "397951f74b8bca177e99ed6c401d5da4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18ad5472c043dc9eed8e2cb6867c5b7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "0106f28c24dc45effaea6c15d2fd93b3b22539d8", "commitAfterChange": "b7cb1f5ede11fb6e27dd568ceeb96e4eba267c2f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic  FileGenerationResult generateFileDuringReconcile( \t\t\tICompilationUnit parentCompilationUnit, String typeName, \t\t\tString contents, WorkingCopyOwner workingCopyOwner, \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor )", "signatureAfterChange": " \tpublic  FileGenerationResult generateFileDuringReconcile( \t\t\tICompilationUnit parentCompilationUnit, String typeName, \t\t\tString contents, WorkingCopyOwner workingCopyOwner, \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor )  \t \tthrows CoreException", "diff": ["+\t", "+\tthrows CoreException", "-\t\t// type-generation during reconcile only works if the generated source", "-\t\t// folder is created and added to the project's source path. ", "-\t\tif ( ! isGeneratedSourceFolderConfigured() )", "-\t\t\treturn null;", "+\t\tfinal boolean sourcepathUpdated = ensureGeneratedSourceFolder(progressMonitor);", "-\t\t\t\tresult = new FileGenerationResult((IFile)workingCopy.getResource(), true);", "+\t\t\t\tresult = new FileGenerationResult((IFile)workingCopy.getResource(), true, sourcepathUpdated);", "-\t\t\t\tresult = new FileGenerationResult((IFile)workingCopy.getResource(), modified);", "+\t\t\t\tresult = new FileGenerationResult((IFile)workingCopy.getResource(), modified, sourcepathUpdated);", "-\t\treturn new FileGenerationResult((IFile)workingCopy.getResource(), true);", "+\t\treturn new FileGenerationResult((IFile)workingCopy.getResource(), true, sourcepathUpdated);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a0029b1633e95a8bf4bf834b65866b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "4ce91958103bed0391aa763e032ff18d6e80eeff", "commitAfterChange": "35ce3cd769971f5dca3aae3c48f3088e32084ea9", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["+\t\tboolean genericSignatureNeeded = this.requiresGenericSignature || blockScope.compilerOptions().generateGenericSignatureForLambdaExpressions;", "-\t\t\t\tif (this.requiresGenericSignature) {", "+\t\t\t\tif (genericSignatureNeeded) {", "-\t\t\tif (this.requiresGenericSignature)", "+\t\t\tif (genericSignatureNeeded)", "-\t\t\tif (this.requiresGenericSignature) {", "+\t\t\tif (genericSignatureNeeded) {"]}], "num": 570}
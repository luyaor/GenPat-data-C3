{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22c0044cf23ac0312d39315cbc20bae9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10bc5af0df82c8b31150198542df45f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "0f7f9d63e5fbc5d41771bd4e2e39b628130add76", "commitAfterChange": "ed4cdf5cf5dec0284dce12a661248f2f9a27a709", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 12, "signatureBeforeChange": "  private String counterString(int count)", "signatureAfterChange": " private String filterFormattingInComments(String input)", "diff": ["+}", "+private String filterFormattingInComments(String input) {", "+\tStringTokenizer tokenizer = new StringTokenizer(input, \"\\r\\n\\f\");", "+\tStringBuffer buffer = new StringBuffer();", "+\tboolean skipToken = false;", "+\tString line =  null;", "+\tlineLoop: while (tokenizer.hasMoreTokens()) {", "+\t\tif (!skipToken) {", "+\t\t\tline = tokenizer.nextToken();", "+\t\t}", "+\t\tskipToken = false;", "+\t\tint length = line.length();", "+\t\tint lineStart = 0;", "+\t\tif (length > 0) {", "+\t\t\t// Trim leading whitespaces", "+\t\t\tif (IGNORE_SPACES > 0) {", "+\t\t\t\twhile (lineStart < length && ScannerHelper.isWhitespace(line.charAt(lineStart))) {", "+\t\t\t\t\tlineStart++;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// Search if a comment starts", "+\t\t\tint commentKind = 0;", "+\t\t\tint idx = line.indexOf('/', lineStart);", "+\t\t\tif (idx >= 0 && (idx+1) < length) {", "+\t\t\t\tidx++;", "+\t\t\t\tchar ch = line.charAt(idx++);", "+\t\t\t\tswitch (ch) {", "+\t\t\t\t\tcase '/':", "+\t\t\t\t\t\tcommentKind = 1; // line comment", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase '*':", "+\t\t\t\t\t\tcommentKind = 2; // block comment", "+\t\t\t\t\t\tif (idx < length && line.charAt(idx) == '*') {", "+\t\t\t\t\t\t\tcommentKind = 3; // javadoc comment", "+\t\t\t\t\t\t\tidx++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tif (commentKind != 0) {", "+\t\t\t\t\t// Enter a comment", "+\t\t\t\t\tswitch (IGNORE_SPACES) {", "+\t\t\t\t\t\tcase ALL_COMMENTS_SPACES:", "+\t\t\t\t\t\t\tswitch (commentKind) {", "+\t\t\t\t\t\t\t\tcase 1:", "+\t\t\t\t\t\t\t\t\tint start = idx;", "+\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, start).trim());", "+\t\t\t\t\t\t\t\t\twhile (true) {", "+\t\t\t\t\t\t\t\t\t\tif (start < length) {", "+\t\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "+\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tbuffer.append(ModelTestsUtil.removeWhiteSpace(line.substring(start)));", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tline = tokenizer.nextToken();", "+\t\t\t\t\t\t\t\t\t\tlength = line.length();", "+\t\t\t\t\t\t\t\t\t\tstart = 0;", "+\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "+\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (start > length+1 || line.charAt(start) != '/' || line.charAt(start+1) != '/') {", "+\t\t\t\t\t\t\t\t\t\t\tbuffer.append('\\n');", "+\t\t\t\t\t\t\t\t\t\t\tskipToken = true;", "+\t\t\t\t\t\t\t\t\t\t\t// only gate to break the loop", "+\t\t\t\t\t\t\t\t\t\t\tcontinue lineLoop;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tstart += 2;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcase 2:", "+\t\t\t\t\t\t\t\tcase 3:", "+\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, idx).trim());", "+\t\t\t\t\t\t\t\t\tint endComment = line.indexOf(\"*/\");", "+\t\t\t\t\t\t\t\t\tif (endComment > 0) {", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(ModelTestsUtil.removeWhiteSpace(line.substring(0, endComment + 2)));", "+\t\t\t\t\t\t\t\t\t\tline = line.substring(endComment+2);", "+\t\t\t\t\t\t\t\t\t\tskipToken = true;", "+\t\t\t\t\t\t\t\t\t\tcontinue lineLoop;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\twhile (endComment < 0) {", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(ModelTestsUtil.removeWhiteSpace(line));", "+\t\t\t\t\t\t\t\t\t\tline = tokenizer.nextToken();", "+\t\t\t\t\t\t\t\t\t\tendComment = line.indexOf(\"*/\");", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbuffer.append(ModelTestsUtil.removeWhiteSpace(line.substring(0, endComment + 2)));", "+\t\t\t\t\t\t\t\t\tbuffer.append('\\n');", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase ALL_COMMENTS_LINES_LEADING_SPACES:", "+\t\t\t\t\t\t\tswitch (commentKind) {", "+\t\t\t\t\t\t\t\tcase 1:", "+\t\t\t\t\t\t\t\t\tint start = idx;", "+\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, start).trim());", "+\t\t\t\t\t\t\t\t\twhile (true) {", "+\t\t\t\t\t\t\t\t\t\tif (start < length) {", "+\t\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "+\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tif (start < length) {", "+\t\t\t\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(start));", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tline = tokenizer.nextToken();", "+\t\t\t\t\t\t\t\t\t\tlength = line.length();", "+\t\t\t\t\t\t\t\t\t\tstart = 0;", "+\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "+\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (start < length && (line.charAt(start) != '/' || line.charAt(start+1) != '/')) {", "+\t\t\t\t\t\t\t\t\t\t\tbuffer.append('\\n');", "+\t\t\t\t\t\t\t\t\t\t\tskipToken = true;", "+\t\t\t\t\t\t\t\t\t\t\t// only gate to break the loop", "+\t\t\t\t\t\t\t\t\t\t\tcontinue lineLoop;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\t\t\tstart += 2; // skip next line starting comment", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcase 3:", "+\t\t\t\t\t\t\t\tcase 2:", "+\t\t\t\t\t\t\t\t\tstart = idx;", "+\t\t\t\t\t\t\t\t\tint endComment = line.indexOf(\"*/\");", "+\t\t\t\t\t\t\t\t\tif (endComment > 0) {", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, endComment + 2));", "+\t\t\t\t\t\t\t\t\t\tline = line.substring(endComment+2);", "+\t\t\t\t\t\t\t\t\t\tskipToken = true;", "+\t\t\t\t\t\t\t\t\t\tcontinue lineLoop;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, start).trim());", "+\t\t\t\t\t\t\t\t\twhile (endComment < 0) {", "+\t\t\t\t\t\t\t\t\t\tif (start < length) {", "+\t\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "+\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tif (start < length && ch == '*') {", "+\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tif (start < length) {", "+\t\t\t\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(start));", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tline = tokenizer.nextToken();", "+\t\t\t\t\t\t\t\t\t\tlength = line.length();", "+\t\t\t\t\t\t\t\t\t\tendComment = line.indexOf(\"*/\");", "+\t\t\t\t\t\t\t\t\t\tstart = 0;", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, endComment + 2));", "+\t\t\t\t\t\t\t\t\tbuffer.append('\\n');", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (length > 0 && lineStart > 0 && lineStart < length) {", "+\t\t\tbuffer.append(line.substring(lineStart).trim());", "+\t\t} else {", "+\t\t\tbuffer.append(line);", "+\t\t}", "+\t\tbuffer.append('\\n');", "+\t}", "+    return buffer.toString();", "-", "-private String counterString(int count) {", "-\tint reminder = count%10;", "-\tStringBuffer buffer = new StringBuffer();", "-\tbuffer.append(count);", "-\tswitch (reminder) {", "-\t\tcase 1:", "-\t\t\tbuffer.append(\"st\");", "-\t\t\tbreak;", "-\t\tcase 2:", "-\t\t\tbuffer.append(\"nd\");", "-\t\t\tbreak;", "-\t\tcase 3:", "-\t\t\tbuffer.append(\"rd\");", "-\t\t\tbreak;", "-\t\tdefault:", "-\t\t\tbuffer.append(\"th\");", "-\t\t\tbreak;", "-\t}", "-\treturn buffer.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44c22f0a43350379d2e40e17c50d1d00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "6defd2b79520062f5150164ded77c2d030acc168", "commitAfterChange": "d351702f3561d64a024c15ffbed0faad48ce2838", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected boolean parseParam()", "signatureAfterChange": " \tprotected boolean parseParam() throws InvalidInputException", "diff": ["-\tprotected boolean parseParam() {", "+\tprotected boolean parseParam() throws InvalidInputException {", "-\t\t// Store current token state", "+\t\t// Store current state", "-", "-\t\ttry {", "-\t\t\t// Push identifier next", "-\t\t\tint token = readToken();", "-\t\t\tswitch (token) {", "+\t\tboolean tokenWhiteSpace = this.scanner.tokenizeWhiteSpace;", "+\t\tthis.scanner.tokenizeWhiteSpace = true;", "+//\t\tthis.scanner.tokenizeLineSeparator = true;", "+\t\t", "+\t\t// Verify that there are whitespaces after tag", "+\t\tint token = readToken();", "+\t\tif (token != TerminalTokens.TokenNameWHITESPACE) {", "+\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidTag(start, this.scanner.getCurrentTokenEndPosition());", "+\t\t\tthis.scanner.currentPosition = start;", "+\t\t\tthis.index = start;", "+\t\t\tthis.currentTokenType = -1;", "+\t\t\tthis.scanner.tokenizeWhiteSpace = tokenWhiteSpace;", "+\t\t\treturn false;", "+\t\t}", "+\t\t", "+\t\t// Get first non whitespace token", "+\t\tboolean hasMultiLines = this.scanner.currentPosition > (this.lineEnd+1);", "+\t\tboolean isTypeParam = false;", "+\t\tboolean valid = true, empty = true;", "+\t\tnextToken: while (true) {", "+\t\t\tthis.currentTokenType = -1;", "+\t\t\tswitch (token = readToken()) {", "-\t\t\t\t\tconsumeToken();", "-\t\t\t\t\treturn pushParamName();", "-\t\t\t\tcase TerminalTokens.TokenNameEOF :", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault :", "-\t\t\t\t\tstart = this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\tend = getTokenEndPosition();", "-\t\t\t\t\tif (end < start) start = this.tagSourceStart;", "-\t\t\t\t\tbreak;", "+\t\t\t\t\tif (valid) { ", "+\t\t\t\t\t\t// store param name id", "+\t\t\t\t\t\tthis.identifierPtr = -1;", "+\t\t\t\t\t\tthis.identifierLengthPtr = -1;", "+\t\t\t\t\t\tpushIdentifier(true);", "+\t\t\t\t\t\tstart = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\t\tend = hasMultiLines ? this.lineEnd: this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\t\tbreak nextToken;", "+\t\t\t\t\t}", "+\t\t\t\t\t// fall through next case to report error", "+\t\t\t\tcase TerminalTokens.TokenNameLESS:", "+\t\t\t\t\tif (valid && this.jdk15) {", "+\t\t\t\t\t\tstart = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\t\tend = hasMultiLines ? this.lineEnd: this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\t\tisTypeParam = true;", "+\t\t\t\t\t\tbreak nextToken;", "+\t\t\t\t\t}", "+\t\t\t\t\t// fall through next case to report error", "+\t\t\t\tdefault:", "+\t\t\t\t\tif (token == TerminalTokens.TokenNameLEFT_SHIFT) isTypeParam = true;", "+\t\t\t\t\tif (valid && !hasMultiLines) start = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\tvalid = false;", "+\t\t\t\t\tif (!hasMultiLines) {", "+\t\t\t\t\t\tempty = false;", "+\t\t\t\t\t\tend = hasMultiLines ? this.lineEnd: this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tend = this.lineEnd;", "+\t\t\t\t\t// when several lines, fall through next case to report problem immediately", "+\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE:", "+\t\t\t\t\tif (this.scanner.currentPosition > (this.lineEnd+1)) hasMultiLines = true;", "+\t\t\t\t\tif (valid) break;", "+\t\t\t\t\t// if not valid fall through next case to report error", "+\t\t\t\tcase TerminalTokens.TokenNameEOF:", "+\t\t\t\t\tif (this.reportProblems)", "+\t\t\t\t\t\tif (empty)", "+\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocMissingParamName(start, end, this.sourceParser.modifiers);", "+\t\t\t\t\t\telse if (this.jdk15 && isTypeParam)", "+\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidParamTypeParameter(start, end);", "+\t\t\t\t\t\telse", "+\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidParamTagName(start, end);", "+\t\t\t\t\tthis.scanner.currentPosition = start;", "+\t\t\t\t\tthis.index = start;", "+\t\t\t\t\tthis.currentTokenType = -1;", "+\t\t\t\t\tthis.scanner.tokenizeWhiteSpace = tokenWhiteSpace;", "+\t\t\t\t\treturn false;", "-\t\t} catch (InvalidInputException e) {", "-\t\t\tend = getTokenEndPosition();", "-", "-\t\t// Reset position to avoid missing tokens when new line was encountered", "-\t\tthis.index = this.tokenPreviousPosition;", "-\t\tthis.scanner.currentPosition = this.tokenPreviousPosition;", "-\t\tthis.currentTokenType = -1;", "-", "+\t\t", "+\t\t// Scan more tokens for type parameter declaration", "+\t\tif (isTypeParam && this.jdk15) {", "+\t\t\t// Get type parameter name", "+\t\t\tnextToken: while (true) {", "+\t\t\t\tthis.currentTokenType = -1;", "+\t\t\t\tswitch (token = readToken()) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE:", "+\t\t\t\t\t\tif (valid && this.scanner.currentPosition <= (this.lineEnd+1)) break;", "+\t\t\t\t\t\t// if not valid fall through next case to report error", "+\t\t\t\t\tcase TerminalTokens.TokenNameEOF:", "+\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidParamTypeParameter(start, end);", "+\t\t\t\t\t\tthis.scanner.currentPosition = start;", "+\t\t\t\t\t\tthis.index = start;", "+\t\t\t\t\t\tthis.currentTokenType = -1;", "+\t\t\t\t\t\tthis.scanner.tokenizeWhiteSpace = tokenWhiteSpace;", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "+\t\t\t\t\t\tend = hasMultiLines ? this.lineEnd: this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\t\tif (valid) {", "+\t\t\t\t\t\t\t// store param name id", "+\t\t\t\t\t\t\tthis.identifierPtr = -1;", "+\t\t\t\t\t\t\tthis.identifierLengthPtr = -1;", "+\t\t\t\t\t\t\tpushIdentifier(true);", "+\t\t\t\t\t\t\tbreak nextToken;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tend = hasMultiLines ? this.lineEnd: this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\t// Get last character of type parameter declaration", "+\t\t\tboolean spaces = false;", "+\t\t\tnextToken: while (true) {", "+\t\t\t\tthis.currentTokenType = -1;", "+\t\t\t\tswitch (token = readToken()) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE:", "+\t\t\t\t\t\tif (this.scanner.currentPosition > (this.lineEnd+1)) {", "+\t\t\t\t\t\t\t// do not accept type parameter declaration on several lines", "+\t\t\t\t\t\t\thasMultiLines = true;", "+\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tspaces = true;", "+\t\t\t\t\t\tif (valid) break;", "+\t\t\t\t\t\t// if not valid fall through next case to report error", "+\t\t\t\t\tcase TerminalTokens.TokenNameEOF:", "+\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidParamTypeParameter(start, end);", "+\t\t\t\t\t\tthis.scanner.currentPosition = start;", "+\t\t\t\t\t\tthis.index = start;", "+\t\t\t\t\t\tthis.currentTokenType = -1;", "+\t\t\t\t\t\tthis.scanner.tokenizeWhiteSpace = tokenWhiteSpace;", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\tcase TerminalTokens.TokenNameGREATER:", "+\t\t\t\t\t\tend = hasMultiLines ? this.lineEnd: this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\t\tif (valid) {", "+\t\t\t\t\t\t\tbreak nextToken;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tif (!spaces) end = hasMultiLines ? this.lineEnd: this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\t// Verify that tag name is well followed by white spaces", "+\t\tif (valid) {", "+\t\t\tthis.currentTokenType = -1;", "+\t\t\tint restart = this.scanner.currentPosition;", "+\t\t\tif (readToken() == TerminalTokens.TokenNameWHITESPACE) {", "+\t\t\t\tthis.scanner.currentPosition = restart;", "+\t\t\t\tthis.index = restart;", "+\t\t\t\tthis.scanner.tokenizeWhiteSpace = tokenWhiteSpace;", "+\t\t\t\treturn pushParamName(isTypeParam);", "+\t\t\t}", "+\t\t}", "+\t\t", "-\t\tif (this.sourceParser != null) {", "-\t\t\tthis.sourceParser.problemReporter().javadocMissingParamName(start, end, this.sourceParser.modifiers);", "+\t\tthis.currentTokenType = -1;", "+\t\tend = hasMultiLines ? this.lineEnd: this.scanner.getCurrentTokenEndPosition();", "+\t\twhile (readToken() != TerminalTokens.TokenNameWHITESPACE) {", "+\t\t\tthis.currentTokenType = -1;", "+\t\t\tend = hasMultiLines ? this.lineEnd: this.scanner.getCurrentTokenEndPosition();", "+\t\tif (this.reportProblems)", "+\t\t\tif (this.jdk15 && isTypeParam)", "+\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidParamTypeParameter(start, end);", "+\t\t\telse", "+\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidParamTagName(start, end);", "+\t\tthis.scanner.currentPosition = start;", "+\t\tthis.index = start;", "+\t\tthis.currentTokenType = -1;", "+\t\tthis.scanner.tokenizeWhiteSpace = tokenWhiteSpace;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5eb0677715a2165d31e0505f0e79c438", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatterCommentParser.java", "commitBeforeChange": "acbc84bdd187bdb6c7f4afd96c97bfaa149e3ef9", "commitAfterChange": "145cdc80e51d24de5d028aaae697a72b8bec0900", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": " protected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": " protected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["-\tboolean valid = super.parseTag(previousPosition);", "-\tthis.textStart = -1;", "+\t", "+\t// Read tag name", "+\tthis.tagSourceStart = previousPosition;", "+\tthis.scanner.startPosition = this.index;", "+\tthis.scanner.currentCharacter = readChar();", "+\tswitch (this.scanner.currentCharacter) {", "+\t\tcase ' ':", "+\t\tcase '*':", "+\t\tcase '}':", "+\t\t\t// tag name is empty", "+\t\t\tthis.tagSourceEnd = previousPosition;", "+\t\t\tif (textStart == -1) this.textStart = previousPosition;", "+\t\t\treturn true;", "+\t\tdefault: ", "+\t\t\tif (ScannerHelper.isWhitespace(this.scanner.currentCharacter)) {", "+\t\t\t\t// tag name is empty", "+\t\t\t\tthis.tagSourceEnd = previousPosition;", "+\t\t\t\tif (textStart == -1) this.textStart = previousPosition;", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tbreak;", "+\t}", "+\tint currentPosition = this.index;", "+\tchar currentChar = this.scanner.currentCharacter;", "+\twhile (currentChar != ' ' && currentChar != '*' && currentChar != '}' && !ScannerHelper.isWhitespace(currentChar)) {", "+\t\tcurrentPosition = this.index;", "+\t\tcurrentChar = readChar();", "+\t}", "+\tthis.tagSourceEnd = currentPosition - 1;", "+\tthis.scanner.currentCharacter = currentChar;", "+\tthis.scanner.currentPosition = currentPosition;", "+\tchar[] tagName = this.scanner.getCurrentIdentifierSource();", "+\tint length = tagName.length;", "+\tthis.index = this.tagSourceEnd+1;", "+", "+\t// Decide which parse to perform depending on tag name", "+\tthis.tagValue = TAG_OTHERS_VALUE;", "+\tboolean valid = false;", "+\tswitch (tagName[0]) {", "+\t\tcase 'a':", "+\t\t\tif (length == TAG_AUTHOR_LENGTH && CharOperation.equals(TAG_AUTHOR, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_AUTHOR_VALUE;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 'c':", "+\t\t\tif (length == TAG_CATEGORY_LENGTH && CharOperation.equals(TAG_CATEGORY, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_CATEGORY_VALUE;", "+\t\t\t\tvalid = parseIdentifierTag(false); // TODO (frederic) reconsider parameter value when @category will be significant in spec", "+\t\t\t} else if (length == TAG_CODE_LENGTH && this.inlineTagStarted && CharOperation.equals(TAG_CODE, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_CODE_VALUE;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 'd':", "+\t\t\tif (length == TAG_DEPRECATED_LENGTH && CharOperation.equals(TAG_DEPRECATED, tagName)) {", "+\t\t\t\tthis.deprecated = true;", "+\t\t\t\tvalid = true;", "+\t\t\t\tthis.tagValue = TAG_DEPRECATED_VALUE;", "+\t\t\t} else if (length == TAG_DOC_ROOT_LENGTH && CharOperation.equals(TAG_DOC_ROOT, tagName)) {", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=227730", "+\t\t\t\t// identify @docRoot tag as a base tag that does not expect any argument", "+\t\t\t\tvalid = true;", "+\t\t\t\tthis.tagValue = TAG_DOC_ROOT_VALUE;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 'e':", "+\t\t\tif (length == TAG_EXCEPTION_LENGTH && CharOperation.equals(TAG_EXCEPTION, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_EXCEPTION_VALUE;", "+\t\t\t\tvalid = parseThrows();", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 'i':", "+\t\t\tif (length == TAG_INHERITDOC_LENGTH && CharOperation.equals(TAG_INHERITDOC, tagName)) {", "+\t\t\t\t// inhibits inherited flag when tags have been already stored", "+\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51606", "+\t\t\t\t// Note that for DOM_PARSER, nodes stack may be not empty even no '@' tag", "+\t\t\t\t// was encountered in comment. But it cannot be the case for COMPILER_PARSER", "+\t\t\t\t// and so is enough as it is only this parser which signals the missing tag warnings...", "+\t\t\t\tif (this.astPtr==-1) {", "+\t\t\t\t\tthis.inheritedPositions = (((long) this.tagSourceStart) << 32) + this.tagSourceEnd;", "+\t\t\t\t}", "+\t\t\t\tvalid = true;", "+\t\t\t\tthis.tagValue = TAG_INHERITDOC_VALUE;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 'l':", "+\t\t\tif (length == TAG_LINK_LENGTH && CharOperation.equals(TAG_LINK, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_LINK_VALUE;", "+\t\t\t\tif (this.inlineTagStarted || (this.kind & COMPLETION_PARSER) != 0) {", "+\t\t\t\t\tvalid= parseReference();", "+\t\t\t\t} else {", "+\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "+\t\t\t\t\t// Cannot have @link outside inline comment", "+\t\t\t\t\tvalid = false;", "+\t\t\t\t\tif (this.reportProblems) {", "+\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (length == TAG_LINKPLAIN_LENGTH && CharOperation.equals(TAG_LINKPLAIN, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_LINKPLAIN_VALUE;", "+\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t} else {", "+\t\t\t\t\tvalid = false;", "+\t\t\t\t\tif (this.reportProblems) {", "+\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (length == TAG_LITERAL_LENGTH && this.inlineTagStarted && CharOperation.equals(TAG_LITERAL, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_LITERAL_VALUE;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 'p':", "+\t\t\tif (length == TAG_PARAM_LENGTH && CharOperation.equals(TAG_PARAM, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_PARAM_VALUE;", "+\t\t\t\tvalid = parseParam();", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 's':", "+\t\t\tif (length == TAG_SEE_LENGTH && CharOperation.equals(TAG_SEE, tagName)) {", "+\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "+\t\t\t\t\t// Cannot have @see inside inline comment", "+\t\t\t\t\tvalid = false;", "+\t\t\t\t\tif (this.reportProblems) {", "+\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.tagValue = TAG_SEE_VALUE;", "+\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t}", "+\t\t\t} else if (length == TAG_SERIAL_LENGTH && CharOperation.equals(TAG_SERIAL, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_SERIAL_VALUE;", "+\t\t\t} else if (length == TAG_SERIAL_DATA_LENGTH && CharOperation.equals(TAG_SERIAL_DATA, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_SERIAL_DATA_VALUE;", "+\t\t\t} else if (length == TAG_SERIAL_FIELD_LENGTH && CharOperation.equals(TAG_SERIAL_FIELD, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_SERIAL_FIELD_VALUE;", "+\t\t\t} else if (length == TAG_SINCE_LENGTH && CharOperation.equals(TAG_SINCE, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_SINCE_VALUE;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 'v':", "+\t\t\tif (length == TAG_VALUE_LENGTH && CharOperation.equals(TAG_VALUE, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_VALUE_VALUE;", "+\t\t\t\tif (this.sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (length == TAG_VERSION_LENGTH && CharOperation.equals(TAG_VERSION, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_VERSION_VALUE;", "+\t\t\t} else {", "+\t\t\t\tcreateTag();", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 'r':", "+\t\t\tif (length == TAG_RETURN_LENGTH && CharOperation.equals(TAG_RETURN, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_RETURN_VALUE;", "+\t\t\t\tvalid = parseReturn();", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 't':", "+\t\t\tif (length == TAG_THROWS_LENGTH && CharOperation.equals(TAG_THROWS, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_THROWS_VALUE;", "+\t\t\t\tvalid = parseThrows();", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tdefault:", "+\t\t\tcreateTag();", "+\t\t\tbreak;", "+\t}", "+\tthis.textStart = -1;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aaac63b5aff066e1074aeb72c88bb8f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DocCommentParser.java", "commitBeforeChange": "da3abb814c31b6e1c2d43312de494af316e19273", "commitAfterChange": "8af0e3d96f10bb27360a77bbd330487cf3fdc8dd", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprotected boolean parseTag()", "signatureAfterChange": " \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["-\tprotected boolean parseTag() {", "-\t\tTagElement tag = this.ast.newTagElement();", "-\t\tint start = this.tagSourceStart;", "-\t\ttag.setTagName(new String(this.source, start, this.tagSourceEnd-start+1));", "-\t\tif (this.inlineTagStarted) {", "-\t\t\tstart = this.inlineTagStart;", "-\t\t\tTagElement previousTag = null;", "-\t\t\tif (this.astPtr == -1) {", "-\t\t\t\tpreviousTag = this.ast.newTagElement();", "-\t\t\t\tpreviousTag.setSourceRange(start, this.tagSourceEnd-start+1);", "-\t\t\t\tpushOnAstStack(previousTag, true);", "-\t\t\t} else {", "-\t\t\t\tpreviousTag = (TagElement) this.astStack[this.astPtr];", "+\tprotected boolean parseTag(int previousPosition) throws InvalidInputException {", "+\t\t", "+\t\t// Read tag name", "+\t\tint token = readTokenAndConsume();", "+\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "+\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\tchar[] tag = this.scanner.getCurrentIdentifierSource(); // first token is either an identifier or a keyword", "+", "+\t\t// Try to get tag name other than java identifier", "+\t\t// (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51660)", "+\t\tint tk = token;", "+\t\tint le = this.lineEnd;", "+\t\tchar pc = peekChar();", "+\t\ttagNameToken: while (tk != TerminalTokens.TokenNameEOF) {", "+\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\ttoken = tk;", "+\t\t\t// !, \", #, %, &, ', -, :, <, >, * chars and spaces are not allowed in tag names", "+\t\t\tswitch (pc) {", "+\t\t\t\tcase '}':", "+\t\t\t\tcase '!':", "+\t\t\t\tcase '#':", "+\t\t\t\tcase '%':", "+\t\t\t\tcase '&':", "+\t\t\t\tcase '\\'':", "+\t\t\t\tcase '\"':", "+\t\t\t\tcase ':':", "+\t\t\t\t// case '-': allowed in tag names as this character is often used in doclets (bug 68087)", "+\t\t\t\tcase '<':", "+\t\t\t\tcase '>':", "+\t\t\t\tcase '*': // break for '*' as this is perhaps the end of comment (bug 65288)", "+\t\t\t\t\tbreak tagNameToken;", "+\t\t\t\tdefault:", "+\t\t\t\t\tif (pc == ' ' || Character.isWhitespace(pc)) break tagNameToken;", "-\t\t\tint previousStart = previousTag.getStartPosition();", "-\t\t\tpreviousTag.fragments().add(tag);", "-\t\t\tpreviousTag.setSourceRange(previousStart, this.tagSourceEnd-previousStart+1);", "-\t\t} else {", "-\t\t\tpushOnAstStack(tag, true);", "+\t\t\ttk = readTokenAndConsume();", "+\t\t\tpc = peekChar();", "-\t\ttag.setSourceRange(start, this.tagSourceEnd-start+1);", "-\t\treturn true;", "+\t\tint length = this.tagSourceEnd-this.tagSourceStart+1;", "+\t\ttag = new char[length];", "+\t\tSystem.arraycopy(this.source, this.tagSourceStart, tag, 0, length);", "+\t\tthis.index = this.tagSourceEnd+1;", "+\t\tthis.scanner.currentPosition = this.tagSourceEnd+1;", "+\t\tthis.tagSourceStart = previousPosition;", "+\t\tthis.lineEnd = le;", "+", "+\t\t// Decide which parse to perform depending on tag name", "+\t\tthis.tagValue = NO_TAG_VALUE;", "+\t\tboolean valid = true;", "+\t\tswitch (token) {", "+\t\t\tcase TerminalTokens.TokenNameIdentifier :", "+\t\t\t\tswitch (tag[0]) {", "+\t\t\t\t\tcase 'd':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "+\t\t\t\t\t\t\tthis.deprecated = true;", "+\t\t\t\t\t\t\tthis.tagValue = TAG_DEPRECATED_VALUE;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcreateTag();", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'i':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_INHERITDOC)) {", "+\t\t\t\t\t\t\t// inhibits inherited flag when tags have been already stored", "+\t\t\t\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51606", "+\t\t\t\t\t\t\t// Note that for DOM_PARSER, nodes stack may be not empty even no '@' tag", "+\t\t\t\t\t\t\t// was encountered in comment. But it cannot be the case for COMPILER_PARSER", "+\t\t\t\t\t\t\t// and so is enough as it is only this parser which signals the missing tag warnings...", "+\t\t\t\t\t\t\tthis.inherited = this.astPtr==-1;", "+\t\t\t\t\t\t\tthis.tagValue = TAG_INHERITDOC_VALUE;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcreateTag();", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'p':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_PARAM)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_PARAM_VALUE;", "+\t\t\t\t\t\t\tvalid = parseParam();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\t\t\t\tcreateTag();", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'e':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_EXCEPTION)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_EXCEPTION_VALUE;", "+\t\t\t\t\t\t\tvalid = parseThrows();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\t\t\t\tcreateTag();", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 's':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_SEE)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_SEE_VALUE;", "+\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "+\t\t\t\t\t\t\t\t// Cannot have @see inside inline comment", "+\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\t\t\t\tcreateTag();", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'l':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_LINK)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_LINK_VALUE;", "+\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_LINKPLAIN)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_LINKPLAIN_VALUE;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.tagValue != NO_TAG_VALUE)  {", "+\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "+\t\t\t\t\t\t\t\t// Cannot have @link outside inline comment", "+\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\t\t\t\tcreateTag();", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'v':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_VALUE) && this.ast.apiLevel() >= AST.JLS3) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_VALUE_VALUE;", "+\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\t\t\t\tcreateTag();", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\t\t\tcreateTag();", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase TerminalTokens.TokenNamereturn :", "+\t\t\t\tthis.tagValue = TAG_RETURN_VALUE;", "+\t\t\t\tvalid = parseReturn();", "+\t\t\t\tbreak;", "+\t\t\tcase TerminalTokens.TokenNamethrows :", "+\t\t\t\tthis.tagValue = TAG_THROWS_VALUE;", "+\t\t\t\tvalid = parseThrows();", "+\t\t\t\tbreak;", "+\t\t\tcase TerminalTokens.TokenNameabstract:", "+\t\t\tcase TerminalTokens.TokenNameassert:", "+\t\t\tcase TerminalTokens.TokenNameboolean:", "+\t\t\tcase TerminalTokens.TokenNamebreak:", "+\t\t\tcase TerminalTokens.TokenNamebyte:", "+\t\t\tcase TerminalTokens.TokenNamecase:", "+\t\t\tcase TerminalTokens.TokenNamecatch:", "+\t\t\tcase TerminalTokens.TokenNamechar:", "+\t\t\tcase TerminalTokens.TokenNameclass:", "+\t\t\tcase TerminalTokens.TokenNamecontinue:", "+\t\t\tcase TerminalTokens.TokenNamedefault:", "+\t\t\tcase TerminalTokens.TokenNamedo:", "+\t\t\tcase TerminalTokens.TokenNamedouble:", "+\t\t\tcase TerminalTokens.TokenNameelse:", "+\t\t\tcase TerminalTokens.TokenNameextends:", "+\t\t\tcase TerminalTokens.TokenNamefalse:", "+\t\t\tcase TerminalTokens.TokenNamefinal:", "+\t\t\tcase TerminalTokens.TokenNamefinally:", "+\t\t\tcase TerminalTokens.TokenNamefloat:", "+\t\t\tcase TerminalTokens.TokenNamefor:", "+\t\t\tcase TerminalTokens.TokenNameif:", "+\t\t\tcase TerminalTokens.TokenNameimplements:", "+\t\t\tcase TerminalTokens.TokenNameimport:", "+\t\t\tcase TerminalTokens.TokenNameinstanceof:", "+\t\t\tcase TerminalTokens.TokenNameint:", "+\t\t\tcase TerminalTokens.TokenNameinterface:", "+\t\t\tcase TerminalTokens.TokenNamelong:", "+\t\t\tcase TerminalTokens.TokenNamenative:", "+\t\t\tcase TerminalTokens.TokenNamenew:", "+\t\t\tcase TerminalTokens.TokenNamenull:", "+\t\t\tcase TerminalTokens.TokenNamepackage:", "+\t\t\tcase TerminalTokens.TokenNameprivate:", "+\t\t\tcase TerminalTokens.TokenNameprotected:", "+\t\t\tcase TerminalTokens.TokenNamepublic:", "+\t\t\tcase TerminalTokens.TokenNameshort:", "+\t\t\tcase TerminalTokens.TokenNamestatic:", "+\t\t\tcase TerminalTokens.TokenNamestrictfp:", "+\t\t\tcase TerminalTokens.TokenNamesuper:", "+\t\t\tcase TerminalTokens.TokenNameswitch:", "+\t\t\tcase TerminalTokens.TokenNamesynchronized:", "+\t\t\tcase TerminalTokens.TokenNamethis:", "+\t\t\tcase TerminalTokens.TokenNamethrow:", "+\t\t\tcase TerminalTokens.TokenNametransient:", "+\t\t\tcase TerminalTokens.TokenNametrue:", "+\t\t\tcase TerminalTokens.TokenNametry:", "+\t\t\tcase TerminalTokens.TokenNamevoid:", "+\t\t\tcase TerminalTokens.TokenNamevolatile:", "+\t\t\tcase TerminalTokens.TokenNamewhile:", "+\t\t\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\tcreateTag();", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tthis.textStart = this.index;", "+\t\treturn valid;"]}], "num": 6191}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a091b46bb64a47cd4cf68f0f683d167", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c504c8b44e3fb3896839796a4e9d3d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "86284f2db6c7ac41b63c1766c9b7b3a016d95a9a", "commitAfterChange": "c8d8bdad35a9dc8d924116cabb6dd00986cff218", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["+\tif (castType.isIntersectionCastType()) {", "+\t\tReferenceBinding [] intersectingTypes = castType.getIntersectingTypes();", "+\t\tfor (int i = 0, length = intersectingTypes.length; i < length; i++) {", "+\t\t\tif (!checkCastTypesCompatibility(scope, intersectingTypes[i], expressionType, expression))", "+\t\t\t\treturn false;", "+\t\t}", "+\t\treturn true;", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edbf69ca8cb4d490cb84ac8e79cab6a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "146009e38675deb85b2aa23f66e92f2f13172cf7", "commitAfterChange": "08b9d40dde0b005b87b207f8d02b5899cde7b397", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["-", "+\t\tcase Binding.INTERSECTION_CAST_TYPE:", "+\t\t\tReferenceBinding [] intersectingTypes = expressionType.getIntersectingTypes();", "+\t\t\tfor (int i = 0, length = intersectingTypes.length; i < length; i++) {", "+\t\t\t\tif (checkCastTypesCompatibility(scope, castType, intersectingTypes[i], expression))", "+\t\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\treturn false;"]}], "num": 58445}
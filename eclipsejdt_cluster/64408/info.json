{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "773a2c59acb9bad66a0892f6c286c518", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d2e1ece5cd2b87484d4bc833825dbaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " \tprivate void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tpublic void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo) {", "+\tprivate void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo) {", "-\t\tFlowInfo nonStaticFieldInfo = flowInfo.copy().unconditionalInits().discardFieldInitializations();", "-\t\tFlowInfo staticFieldInfo = flowInfo.copy().unconditionalInits().discardFieldInitializations();", "+\t\tFlowInfo nonStaticFieldInfo = flowInfo.unconditionalFieldLessCopy();", "+\t\tFlowInfo staticFieldInfo = flowInfo.unconditionalFieldLessCopy();", "-\t\t\t\t\tif (!staticFieldInfo.isReachable())", "+\t\t\t\t\tif ((staticFieldInfo.tagBits & FlowInfo.UNREACHABLE) != 0)", "-\t\t\t\t\tif (!nonStaticFieldInfo.isReachable())", "+\t\t\t\t\tif ((nonStaticFieldInfo.tagBits & FlowInfo.UNREACHABLE) != 0)", "-\t\t\tUnconditionalFlowInfo outerInfo = flowInfo.copy().unconditionalInits().discardFieldInitializations();", "+\t\t\tUnconditionalFlowInfo outerInfo = flowInfo.unconditionalFieldLessCopy();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf04b89a179c914677ec9a14ec2d21ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\tpublic FlowInfo analyseCode(", "-\t\tBlockScope currentScope,", "-\t\tFlowContext flowContext,", "+public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext,", "-", "-\t\t\tUnconditionalFlowInfo trueInfoWhenTrue = trueFlowInfo.initsWhenTrue().copy().unconditionalInits();", "+\t\t\tUnconditionalFlowInfo trueInfoWhenTrue = trueFlowInfo.initsWhenTrue().unconditionalCopy();", "+\t\t\tUnconditionalFlowInfo falseInfoWhenTrue = falseFlowInfo.initsWhenTrue().unconditionalCopy();", "+\t\t\tUnconditionalFlowInfo trueInfoWhenFalse = trueFlowInfo.initsWhenFalse().unconditionalInits();", "+\t\t\tUnconditionalFlowInfo falseInfoWhenFalse = falseFlowInfo.initsWhenFalse().unconditionalInits();", "-", "-\t\t\tUnconditionalFlowInfo falseInfoWhenTrue = falseFlowInfo.initsWhenTrue().copy().unconditionalInits();", "-\t\t\t", "-\t\t\tUnconditionalFlowInfo trueInfoWhenFalse = trueFlowInfo.initsWhenFalse().copy().unconditionalInits();", "-", "-\t\t\tUnconditionalFlowInfo falseInfoWhenFalse = falseFlowInfo.initsWhenFalse().copy().unconditionalInits();"]}], "num": 64408}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f49dd7fd0cbd25c780295127760ca385", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f45551d2342896a22ef1a0872d14f6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "cedc325f2a935c759cba1f1e5e6c7415bee87a4f", "commitAfterChange": "874cd7abbf7920fe3082baf91be06fbb27247657", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods)", "diff": ["-\t\t\t\tcurrentMethod.modifiers |= ExtraCompilerModifiers.AccOverriding;", "+\t\t\t\tif (currentMethod.isDefaultMethod()", "+\t\t\t\t\t\t&& !inheritedMethod.isFinal() // overriding final is already reported, that's enough", "+\t\t\t\t\t\t&& inheritedMethod.declaringClass.id == TypeIds.T_JavaLangObject)", "+\t\t\t\t{", "+\t\t\t\t\t// JLS 9.4.3 (Java8): default method cannot override method from j.l.Object", "+\t\t\t\t\tproblemReporter(currentMethod).defaultMethodOverridesObjectMethod(currentMethod);", "+\t\t\t\t} else {", "+\t\t\t\t\tcurrentMethod.modifiers |= ExtraCompilerModifiers.AccOverriding;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "866ed3a58189d56ede160a6b7553f663", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "a6181d6802b5a324cb95e89162694a938fb478d8", "commitAfterChange": "8abd75076e932cee4c42294e09e5c3451d79df9f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "signatureAfterChange": " private void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "diff": ["-\tcurrentMethod.modifiers |= CompilerModifiers.AccOverriding;", "-\t\tif (!currentMethod.isAbstract() && inheritedMethod.isAbstract())", "-\t\t\tcurrentMethod.modifiers |= CompilerModifiers.AccImplementing;", "+\t\tif (!currentMethod.isAbstract() && inheritedMethod.isAbstract()) {", "+\t\t\tif ((currentMethod.modifiers & CompilerModifiers.AccOverriding) == 0)", "+\t\t\t\tcurrentMethod.modifiers |= CompilerModifiers.AccImplementing;", "+\t\t} else {", "+\t\t\tcurrentMethod.modifiers |= CompilerModifiers.AccOverriding;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3bd9693b884c1db4e813c086e457db8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "8a3b59860042c242d4e16ee3f50746d591d948f0", "commitAfterChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods)", "diff": ["-\t\t\t\t\tcurrentMethod.modifiers |= ExtraCompilerModifiers.AccOverriding;", "+\t\t\t\t\t// TODO (stephan) using AccImplementing for overrides of a default method works well", "+\t\t\t\t\t// for OPTION_ReportMissingOverrideAnnotationForInterfaceMethodImplementation", "+\t\t\t\t\t// but we should check if it has bad side effects elsewhere.", "+\t\t\t\t\tif (inheritedMethod.isDefaultMethod())", "+\t\t\t\t\t\tcurrentMethod.modifiers |= ExtraCompilerModifiers.AccImplementing;", "+\t\t\t\t\telse", "+\t\t\t\t\t\tcurrentMethod.modifiers |= ExtraCompilerModifiers.AccOverriding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f791c678c660a0b7e7d7df37acd12206", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "5116c37c1a55bc03c601991b9cbf7617decb862a", "commitAfterChange": "f4141d82201e149c7bc1789fc2bd0ee16ea4db28", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "diff": ["-\t\tif (!currentMethod.isAbstract() && inheritedMethod.isAbstract()) {", "-\t\t\tif ((currentMethod.modifiers & CompilerModifiers.AccOverriding) == 0)", "+\t\tif (inheritedMethod.isAbstract()) {", "+\t\t\tif (inheritedMethod.declaringClass.isInterface()) {", "+\t\t\t} else {", "+\t\t\t\tcurrentMethod.modifiers |= CompilerModifiers.AccImplementing | CompilerModifiers.AccOverriding;", "+\t\t\t}"]}], "num": 62970}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a79edb46018e38f518e7e8875b17ffec", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2332d32456571bd8aa558703a14edb84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "babe82af3726a6979eb5da4c747f51906154b2bc", "commitAfterChange": "fab4ac0c2a45db58d02407ad5972d843c8dba1e6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "signatureAfterChange": "  public void traverse(ASTVisitor visitor, BlockScope scope)", "diff": ["+", "+public void traverse(ASTVisitor visitor, BlockScope scope) {", "+\tif (visitor.visit(this, scope)) {", "+\t\tif (this.action != null) {", "+\t\t\tthis.action.traverse(visitor, scope);", "+\t\tthis.condition.traverse(visitor, scope);", "-", "-\tpublic void traverse(ASTVisitor visitor, BlockScope scope) {", "-", "-\t\tif (visitor.visit(this, scope)) {", "-\t\t\tif (action != null) {", "-\t\t\t\taction.traverse(visitor, scope);", "-\t\t\t}", "-\t\t\tcondition.traverse(visitor, scope);", "-\t\t}", "-\t\tvisitor.endVisit(this, scope);", "-\t}", "+\tvisitor.endVisit(this, scope);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79a97798858203b5f7a18a1daa1d22f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "babe82af3726a6979eb5da4c747f51906154b2bc", "commitAfterChange": "fab4ac0c2a45db58d02407ad5972d843c8dba1e6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic StringBuffer printStatement(int indent, StringBuffer output)", "signatureAfterChange": "  public StringBuffer printStatement(int indent, StringBuffer output)", "diff": ["-\tpublic StringBuffer printStatement(int indent, StringBuffer output) {", "-\t\tprintIndent(indent, output).append(\"do\"); //$NON-NLS-1$", "-\t\tif (action == null)", "-\t\t\toutput.append(\" ;\\n\"); //$NON-NLS-1$", "-\t\telse {", "-\t\t\toutput.append('\\n');", "-\t\t\taction.printStatement(indent + 1, output).append('\\n');", "+", "+public StringBuffer printStatement(int indent, StringBuffer output) {", "+\tprintIndent(indent, output).append(\"do\"); //$NON-NLS-1$", "+\tif (this.action == null)", "+\t\toutput.append(\" ;\\n\"); //$NON-NLS-1$", "+\telse {", "+\t\toutput.append('\\n');", "+\t\tthis.action.printStatement(indent + 1, output).append('\\n');", "+\t}", "+\toutput.append(\"while (\"); //$NON-NLS-1$", "+\treturn this.condition.printExpression(0, output).append(\");\"); //$NON-NLS-1$", "+}", "-\t\toutput.append(\"while (\"); //$NON-NLS-1$", "-\t\treturn condition.printExpression(0, output).append(\");\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e63c9d581066a9dd8f2b0088c0b1fa15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/CompilationResult.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate int computePriority(CategorizedProblem problem)", "signatureAfterChange": "  private int computePriority(CategorizedProblem problem)", "diff": ["-\tprivate int computePriority(CategorizedProblem problem){", "+", "+private int computePriority(CategorizedProblem problem){", "+\tfinal int P_STATIC = 10000;", "+\tfinal int P_OUTSIDE_METHOD = 40000;", "+\tfinal int P_FIRST_ERROR = 20000;", "+\tfinal int P_ERROR = 100000;", "-\t\tfinal int P_STATIC = 10000;", "-\t\tfinal int P_OUTSIDE_METHOD = 40000;", "-\t\tfinal int P_FIRST_ERROR = 20000;", "-\t\tfinal int P_ERROR = 100000;", "-\t\t", "-\t\tint priority = 10000 - problem.getSourceLineNumber(); // early problems first", "-\t\tif (priority < 0) priority = 0;", "-\t\tif (problem.isError()){", "-\t\t\tpriority += P_ERROR;", "-\t\t}", "-\t\tReferenceContext context = problemsMap == null ? null : (ReferenceContext) problemsMap.get(problem);", "-\t\tif (context != null){", "-\t\t\tif (context instanceof AbstractMethodDeclaration){", "-\t\t\t\tAbstractMethodDeclaration method = (AbstractMethodDeclaration) context;", "-\t\t\t\tif (method.isStatic()) {", "-\t\t\t\t\tpriority += P_STATIC;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tpriority += P_OUTSIDE_METHOD;", "+\tint priority = 10000 - problem.getSourceLineNumber(); // early problems first", "+\tif (priority < 0) priority = 0;", "+\tif (problem.isError()){", "+\t\tpriority += P_ERROR;", "+\t}", "+\tReferenceContext context = this.problemsMap == null ? null : (ReferenceContext) this.problemsMap.get(problem);", "+\tif (context != null){", "+\t\tif (context instanceof AbstractMethodDeclaration){", "+\t\t\tAbstractMethodDeclaration method = (AbstractMethodDeclaration) context;", "+\t\t\tif (method.isStatic()) {", "+\t\t\t\tpriority += P_STATIC;", "-\t\t\tif (firstErrors.contains(problem)){ // if context is null, firstErrors is null too", "-\t\t\t  priority += P_FIRST_ERROR;", "-\t\t    }", "-\t\treturn priority;", "+\t\tif (this.firstErrors.contains(problem)){ // if context is null, firstErrors is null too", "+\t\t  priority += P_FIRST_ERROR;", "+\t    }", "+\t} else {", "+\t\tpriority += P_OUTSIDE_METHOD;", "+\treturn priority;", "+}"]}], "num": 1767}
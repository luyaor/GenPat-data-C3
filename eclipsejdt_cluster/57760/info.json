{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad2e757ba9f367920123c57b3a629a52", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c86f4218a23963a1bb6a46b7d3ed9a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AnnotationParser.java", "commitBeforeChange": "d5b9ab15bb3f769b7e2ac485fe6da55027818828", "commitAfterChange": "e98478cd38caef5e23457b8b0fdc364bf2846afc", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate Expression parseMember(TypeReference receiver) throws InvalidInputException", "signatureAfterChange": "  \tprivate Expression parseMember(TypeReference receiver) throws InvalidInputException", "diff": ["+", "+\tprivate Expression parseMember(TypeReference receiver) throws InvalidInputException {", "+\t\tthis.identifierPtr = -1;", "+\t\tthis.identifierLengthPtr = -1;", "+\t\tint start = this.scanner.getCurrentTokenStartPosition();", "+\t\tif (readTokenAndConsume() == TerminalTokens.TokenNameIdentifier) {", "+\t\t\tpushIdentifier(true);", "+\t\t\tif (readTokenAndConsume() == TerminalTokens.TokenNameLPAREN) {", "+\t\t\t\tstart = this.scanner.currentPosition;", "+\t\t\t\tAnnotationMessageSend msg = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tmsg = parseArguments(receiver);", "+\t\t\t\t\tmsg.tagSourceStart = this.tagSourceStart;", "+\t\t\t\t\tmsg.tagSourceEnd = this.tagSourceEnd;", "+\t\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t\tint end = this.scanner.getCurrentTokenEndPosition() < this.lineEnd ?", "+\t\t\t\t\t\t\tthis.scanner.getCurrentTokenEndPosition() :", "+\t\t\t\t\t\t\tthis.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\tend = end < this.lineEnd ? end : (this.lineEnd - 1);", "+\t\t\t\t\tthis.sourceParser.problemReporter()\t.annotationInvalidSeeReferenceArgs(start, end);", "+\t\t\t\t}", "+\t\t\t\treturn msg;", "+\t\t\t}", "+\t\t\tAnnotationFieldReference field = new AnnotationFieldReference(identifierStack[0], identifierPositionStack[0]);", "+\t\t\tfield.receiver = receiver;", "+\t\t\tfield.tagSourceStart = this.tagSourceStart;", "+\t\t\tfield.tagSourceEnd = this.tagSourceEnd;", "+\t\t\treturn field;", "+\t\t}", "+\t\tthis.sourceParser.problemReporter().annotationInvalidSeeReference(start, getEndPosition());", "+\t\treturn null;", "+\t}", "-\tprivate Expression parseMember(TypeReference receiver) throws InvalidInputException {", "-\t\tthis.identifierPtr = -1;", "-\t\tthis.identifierLengthPtr = -1;", "-\t\tint start = this.scanner.getCurrentTokenStartPosition();", "-\t\tif (readConsumeToken() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\tpushIdentifier(true);", "-\t\t\tif (readConsumeToken() == TerminalTokens.TokenNameLPAREN) {", "-\t\t\t\tstart = this.scanner.currentPosition;", "-\t\t\t\tAnnotationMessageSend msg = null;", "-\t\t\t\ttry {", "-\t\t\t\t\tmsg = parseArguments(receiver);", "-\t\t\t\t\tmsg.tagSourceStart = this.tagSourceStart;", "-\t\t\t\t\tmsg.tagSourceEnd = this.tagSourceEnd;", "-\t\t\t\t}", "-\t\t\t\tcatch (InvalidInputException e) {", "-\t\t\t\t\tint end = this.scanner.getCurrentTokenEndPosition() < this.lineEnd ? this.scanner.getCurrentTokenEndPosition() : this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\tthis.sourceParser.problemReporter().annotationInvalidSeeReferenceArgs(start, (end<this.lineEnd?end:(this.lineEnd-1)));", "-\t\t\t\t}", "-\t\t\t\treturn msg;", "-\t\t\t}", "-\t\t\tAnnotationFieldReference field = new AnnotationFieldReference(identifierStack[0], identifierPositionStack[0]);", "-\t\t\tfield.receiver = receiver;", "-\t\t\tfield.tagSourceStart = this.tagSourceStart;", "-\t\t\tfield.tagSourceEnd = this.tagSourceEnd;", "-\t\t\treturn field;", "-\t\tthis.sourceParser.problemReporter().annotationInvalidSeeReference(start, getEndPosition());", "-\t\treturn null;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb4470bda495b1ef5792a15c99ec824a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatch.java", "commitBeforeChange": "2a24da854cab81b3e14f5a439f9a6b762b3ebc0a", "commitAfterChange": "60e097c0e5cf4a2c998f74536cf889c93554ea9d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t\t \tprivate static APTResult runAPT(final List<AnnotationProcessorFactory> factories, \t\t\tIJavaProject javaProj, IFile file,  \t\t\tICompilationUnit compilationUnit )", "signatureAfterChange": " \t\t \tprivate static APTResult runAPT(final List<AnnotationProcessorFactory> factories, \t\t\tIJavaProject javaProj, IFile file,  \t\t\tICompilationUnit compilationUnit )", "diff": ["-\t\t{\t\t\t", "-\t\t\tw.run(runnable, w.getRoot(), IWorkspace.AVOID_UPDATE, null);", "+\t\t{\t", "+\t\t\t// need to do something here to avoid the \"Invalid Begin Rule...\" errors.  Not sure what is correct.", "+\t\t\tIResource r;", "+\t\t\tr = w.getRoot();", "+\t\t\t", "+\t\t\tw.run( runnable, r, IWorkspace.AVOID_UPDATE, null );"]}], "num": 57760}
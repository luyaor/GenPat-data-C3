{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f9becf95cdde50d774aee25a50e58ed", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e5d86042f42c1098b7ba1d030af45eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "210b89134044d06a70fa2c472f5e9a859c41ba00", "commitAfterChange": "b268992d45d00cd5439bb032a6e5a5226c715e7e", "methodNumberBeforeChange": 331, "methodNumberAfterChange": 331, "signatureBeforeChange": " public void test181()", "signatureAfterChange": " public void test181()", "diff": ["-\t\t\"The type A2 must be an abstract class to define abstract methods: m(), n(), o(), p()\\n\" + ", "+\t\t\"The type A2 must be an abstract class to define abstract methods\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in I.java (at line 14)\\n\" + ", "+\t\t\"\tpublic abstract Object m();\\n\" + ", "+\t\t\"\t                       ^^^\\n\" + ", "+\t\t\"The abstract method m in type A2 can only be defined by an abstract class\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in I.java (at line 15)\\n\" + ", "+\t\t\"\tpublic abstract String n();\\n\" + ", "+\t\t\"\t                       ^^^\\n\" + ", "+\t\t\"The abstract method n in type A2 can only be defined by an abstract class\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in I.java (at line 16)\\n\" + ", "+\t\t\"\tabstract Object o();\\n\" + ", "+\t\t\"\t                ^^^\\n\" + ", "+\t\t\"The abstract method o in type A2 can only be defined by an abstract class\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in I.java (at line 17)\\n\" + ", "+\t\t\"\tabstract String p();\\n\" + ", "+\t\t\"\t                ^^^\\n\" + ", "+\t\t\"The abstract method p in type A2 can only be defined by an abstract class\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "878e4a6650b90b288be1edf608388529", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JSR308SpecSnippetTests.java", "commitBeforeChange": "3e3b51c55228cb418d3e20ad2161182869812a5e", "commitAfterChange": "2f99f11ed182db13b52f83c7f61547c34d00226d", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void test033() throws Exception", "signatureAfterChange": " \tpublic void test033() throws Exception", "diff": ["-\tpublic void test033() throws Exception { // WILL NEED TO BE ADJUSTED ONCE https://bugs.eclipse.org/bugs/show_bug.cgi?id=415541 IS FIXED.", "+\tpublic void test033() throws Exception {", "+\t\t// javac b100", "+\t\t// For the annotations in the static {...} the clinit has:", "+\t\t//\t\tRuntimeInvisibleTypeAnnotations:", "+\t\t//\t        0: #11(): CAST, offset=0, type_index=0", "+\t\t//\t        1: #11(): NEW, offset=0", "+\t\t// javac is skipping production of the cast so offset is 0. JDT is currently always producing the", "+\t\t// checkcast for an annotated cast so the offset is 7.", "+\t\t", "+\t\t// For the annotations in the initializer {...} the constructors both have:", "+\t\t//\t      RuntimeInvisibleTypeAnnotations:", "+\t\t//\t          0: #11(): NEW, offset=4", "+", "-\t\t\t\t\"    constant #13 utf8: \\\"this\\\"\\n\" + ", "-\t\t\t\t\"    constant #14 utf8: \\\"LX;\\\"\\n\" + ", "-\t\t\t\t\"    constant #15 utf8: \\\"RuntimeInvisibleTypeAnnotations\\\"\\n\" + ", "-\t\t\t\t\"    constant #16 utf8: \\\"LNonNull;\\\"\\n\" + ", "+\t\t\t\t\"    constant #13 utf8: \\\"RuntimeInvisibleTypeAnnotations\\\"\\n\" + ", "+\t\t\t\t\"    constant #14 utf8: \\\"LNonNull;\\\"\\n\" + ", "+\t\t\t\t\"    constant #15 utf8: \\\"this\\\"\\n\" + ", "+\t\t\t\t\"    constant #16 utf8: \\\"LX;\\\"\\n\" + ", "-\t\t\t\t\"    0  new java.lang.Object [3]\\n\" + ", "-\t\t\t\t\"    3  dup\\n\" + ", "-\t\t\t\t\"    4  invokespecial java.lang.Object() [8]\\n\" + ", "-\t\t\t\t\"    7  astore_0\\n\" + ", "-\t\t\t\t\"    8  return\\n\" + ", "+\t\t\t\t\"     0  new java.lang.Object [3]\\n\" + ", "+\t\t\t\t\"     3  dup\\n\" + ", "+\t\t\t\t\"     4  invokespecial java.lang.Object() [8]\\n\" + ", "+\t\t\t\t\"     7  checkcast java.lang.Object [3]\\n\" + ", "+\t\t\t\t\"    10  astore_0\\n\" + ", "+\t\t\t\t\"    11  return\\n\" + ", "-\t\t\t\t\"        [pc: 8, line: 7]\\n\" + ", "+\t\t\t\t\"        [pc: 11, line: 7]\\n\" + ", "+\t\t\t\t\"    RuntimeInvisibleTypeAnnotations: \\n\" + ", "+\t\t\t\t\"      #14 @NonNull(\\n\" + ", "+\t\t\t\t\"        target type = 0x44 NEW\\n\" + ", "+\t\t\t\t\"        offset = 0\\n\" + ", "+\t\t\t\t\"      )\\n\" + ", "+\t\t\t\t\"      #14 @NonNull(\\n\" + ", "+\t\t\t\t\"        target type = 0x47 CAST\\n\" + ", "+\t\t\t\t\"        offset = 7\\n\" + ", "+\t\t\t\t\"        type argument index = 0\\n\" + ", "+\t\t\t\t\"      )\\n\" + ", "-\t\t\t\t\"      #16 @NonNull(\\n\" + ", "+\t\t\t\t\"      #14 @NonNull(\\n\" + ", "-\t\t\t\t\"      #16 @NonNull(\\n\" + ", "+\t\t\t\t\"      #14 @NonNull(\\n\" + "]}], "num": 28893}
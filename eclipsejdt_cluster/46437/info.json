{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7be9918bfde9540aa9520fd8b6037b1a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01db2ecc02ab9402b6ffb9746404f8c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "42a5591e6405d9d5a9661e1fdb211c39440692e6", "commitAfterChange": "90b5d0d22a673acac5fa922f69ac563d54cf8a91", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": " boolean reportIncompatibleReturnTypeError(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " boolean reportIncompatibleReturnTypeError(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-boolean reportIncompatibleReturnTypeError(MethodBinding currentMethod, MethodBinding inheritedMethod) {", "-\t\tfor (int i = 0, l = currentParams.length; i < l; i++) {", "-\t\t\tif (!areTypesEqual(currentParams[i], inheritedParams[i])) {", "-\t\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, inheritedMethod, this.type);", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t}", "-\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, inheritedMethod, this.type);", "-\t\t\treturn false;", "+}", "+boolean reportIncompatibleReturnTypeError(MethodBinding currentMethod, MethodBinding inheritedMethod) {", "+\tif (isUnsafeReturnTypeOverride(currentMethod, inheritedMethod)) {", "+\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, inheritedMethod, this.type);", "+\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0490ada45d49173eb8b15a6dff9f2dca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "c7db82ee2035e10eb1589d55c7e6bfbc58c468c6", "commitAfterChange": "1e8b2938724cc683c4116dd457826556b875a42f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "signatureAfterChange": " private void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "diff": ["-\t\t\tthis.problemReporter(currentMethod).incompatibleReturnType(currentMethod, inheritedMethod);", "-\t\t\tcontinue nextMethod;", "+\t\t\t// can be [] of Class#RAW vs. Class<T>", "+\t\t\tif (!areReturnTypeErasuresEqual(currentMethod, inheritedMethod)) {", "+\t\t\t\tthis.problemReporter(currentMethod).incompatibleReturnType(currentMethod, inheritedMethod);", "+\t\t\t\tcontinue nextMethod;", "+\t\t\t} else if (inheritedMethod.typeVariables.length > currentMethod.typeVariables.length) {", "+\t\t\t\t// TODO (kent) work to do on this case", "+\t\t\t\tthis.problemReporter(currentMethod).incompatibleReturnType(currentMethod, inheritedMethod);", "+//\t\t\t\tthis.problemReporter(currentMethod).nameClash(currentMethod, inheritedMethod);", "+\t\t\t\tcontinue nextMethod;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cc88592d121edf0f3ba7b382f216819", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "42a8e7b7f9382c59bb1ff340f0838c566aaa3094", "commitAfterChange": "eaac4cd91d3c13197436495a330942a49816eb54", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "diff": ["-\t\t\t\tif (!returnType.isParameterizedType())", "-\t\t\t\t\tthis.problemReporter(currentMethod).returnTypeUncheckedConversion(currentMethod, inheritedMethod);", "+\t\t\t\tif (!returnType.isParameterizedType()) ", "+\t\t\t\t\tthis.problemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, inheritedMethod, ((MethodDeclaration)currentMethod.sourceMethod()).returnType);", "-\t\t\t\tthis.problemReporter(currentMethod).returnTypeUncheckedConversion(currentMethod, inheritedMethod);", "+\t\t\t\tthis.problemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, inheritedMethod,  ((MethodDeclaration)currentMethod.sourceMethod()).returnType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77be6d635422cdff64455c14d5ccac53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "faf7022339bfa34110b04d77b13d3b7d7c4de43f", "commitAfterChange": "da80cfa9ed625bab885e849d64ff277d071e3e84", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "diff": ["-\t\tif (inheritedMethod.returnType.leafComponentType().isParameterizedType()) {", "-\t\t\tif (currentMethod.returnType.leafComponentType().isRawType())", "-\t\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, this.type);", "+\t\tif (inheritedMethod.returnType.leafComponentType().isParameterizedType() && currentMethod.returnType.leafComponentType().isRawType()) {", "+\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, this.type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "813e9c2c6fe40bd6885c376a451be1be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "6eb00f6ee457a8f73a0eac0bfee00e20c1d881ff", "commitAfterChange": "449de2c1528005d5b9ace39ea1e9eeb2aed5b875", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "signatureAfterChange": " private void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "diff": ["-\t\t\t} else if (inheritedMethod.typeVariables.length > currentMethod.typeVariables.length) {", "+\t\t\t} else if (inheritedMethod.typeVariables.length != currentMethod.typeVariables.length) {", "-\t\t\t\tthis.problemReporter(currentMethod).incompatibleReturnType(currentMethod, inheritedMethod);", "-//\t\t\t\tthis.problemReporter(currentMethod).nameClash(currentMethod, inheritedMethod);", "-\t\t\t\tcontinue nextMethod;", "+\t\t\t\tif (currentMethod.typeVariables.length == 0 && inheritedMethod.declaringClass.isRawType()) {", "+\t\t\t\t\t// bug 69626", "+\t\t\t\t\t// no error since the inheritedMethod's type variables are ignored in raw types... why does a raw type binding not remove the type variables?", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.problemReporter(currentMethod).incompatibleReturnType(currentMethod, inheritedMethod);", "+//\t\t\t\t\tthis.problemReporter(currentMethod).nameClash(currentMethod, inheritedMethod);", "+\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t}"]}], "num": 46437}
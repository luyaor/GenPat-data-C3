{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7fba360fe7c58689f3bf78470a1d25fb", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1827cd83da96e3c23ecf1ba837e1d4af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "575e550c3da950f3c54755e34320456663152397", "commitAfterChange": "f263f2ef7943b444a7df1ecbae4d4e44696c99a8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public char[] computeGenericTypeSignature(TypeVariableBinding[] typeVariables)", "signatureAfterChange": " public char[] computeGenericTypeSignature(TypeVariableBinding[] typeVariables)", "diff": ["-    if (typeVariables == NoTypeVariables) {", "-        return signature();", "-    } else {", "-\t    char[] typeSig = signature();", "-\t    StringBuffer sig = new StringBuffer(10);", "+", "+\tboolean isMemberOfGeneric = isMemberType() && (enclosingType().modifiers & AccGenericSignature) != 0;", "+\tif (typeVariables == NoTypeVariables && !isMemberOfGeneric) {", "+\t\treturn signature();", "+\t}", "+\tStringBuffer sig = new StringBuffer(10);", "+\tif (isMemberOfGeneric) {", "+\t    char[] typeSig = enclosingType().genericTypeSignature();", "+\t    sig.append('.'); // NOTE: cannot override trailing ';' with '.' in enclosing signature, since shared char[]", "+\t    sig.append(this.sourceName);", "+\t}\telse {", "+\t    char[] typeSig = signature();", "+\t    for (int i = 0; i < typeSig.length-1; i++) { // copy all but trailing semicolon", "+\t    \tsig.append(typeSig[i]);", "+\t    }", "+\t}", "+\tif (typeVariables == NoTypeVariables) {", "+\t    sig.append(';');", "+\t} else {", "-\t\tint sigLength = sig.length();", "-\t\tchar[] result = new char[sigLength];", "-\t\tsig.getChars(0, sigLength, result, 0);", "-\t\treturn result;", "-    }", "+\t}", "+\tint sigLength = sig.length();", "+\tchar[] result = new char[sigLength];", "+\tsig.getChars(0, sigLength, result, 0);", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43e72a8322509d7caa1764c2b6ea38e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "a82f005c3f6667f7d776fc1acd5a8f1ad4427b1c", "commitAfterChange": "b46f2262356d5a409fc4ad506ea6e420190ab04d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public char[] genericTypeSignature()", "signatureAfterChange": " public char[] genericTypeSignature()", "diff": ["-        if (this.typeVariables == NoTypeVariables) {", "-\t        this.genericReferenceTypeSignature = this.signature();", "-        } else {", "-\t\t    char[] typeSig = this.signature();", "-\t\t    StringBuffer sig = new StringBuffer(10);", "-\t\t    for (int i = 0; i < typeSig.length-1; i++) { // copy all but trailing semicolon", "-\t\t    \tsig.append(typeSig[i]);", "-\t\t    }", "-\t\t    sig.append('<');", "-\t\t    for (int i = 0, length = this.typeVariables.length; i < length; i++) {", "-\t\t        sig.append(this.typeVariables[i].genericTypeSignature());", "-\t\t    }", "-\t\t    sig.append(\">;\"); //$NON-NLS-1$", "-\t\t\tint sigLength = sig.length();", "-\t\t\tthis.genericReferenceTypeSignature = new char[sigLength];", "-\t\t\tsig.getChars(0, sigLength, this.genericReferenceTypeSignature, 0);\t\t    ", "-\t    }", "+    \tthis.genericReferenceTypeSignature = computeGenericTypeSignature(this.typeVariables);"]}], "num": 71151}
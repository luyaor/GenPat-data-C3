{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a2d56ae1596f2a5f909ea9df0fc044b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00f226d588d7be71ef68311b963aa3a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "f1b24eaca7583818fb45648b70a2b62fb1ff278d", "commitAfterChange": "6e672fa380adbad36b144e25ff2cf54f61070e85", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic void resourceChanged(IResourceChangeEvent event)", "signatureAfterChange": " \tpublic void resourceChanged(IResourceChangeEvent event)", "diff": ["-\t\t\t\tJavaModelManager.getExternalManager().refreshReferences((IProject) resource, null);", "+\t\t\t\tIProject [] projects = null;", "+\t\t\t\tObject o = event.getSource();", "+\t\t\t\tif (o instanceof IProject) {", "+\t\t\t\t\tprojects = new IProject[] { (IProject) o };", "+\t\t\t\t} else if (o instanceof IWorkspace) {", "+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=261594. The single workspace refresh", "+\t\t\t\t\t// notification we see, implies that all projects are about to be refreshed.", "+\t\t\t\t\t projects = ((IWorkspace) o).getRoot().getProjects(IContainer.INCLUDE_HIDDEN);", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0; projects != null && i < projects.length; i++) {", "+\t\t\t\t\tJavaModelManager.getExternalManager().refreshReferences(projects[i], null);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f794e62b2e5ea7eabdfcce0564fb5df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedHierarchyBuilder.java", "commitBeforeChange": "8f40b18693d984d1b3346925dd24dfb773855585", "commitAfterChange": "98a24097737828240f1d21a0b23b90c66df1d2e5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate void injectAllTypesForPackageFragment( \t\tIPackageFragment packFrag, \t\tArrayList types)", "signatureAfterChange": " \tprivate void injectAllOpenablesForPackageFragment( \t\tIPackageFragment packFrag, \t\tArrayList openables)", "diff": ["-\tprivate void injectAllTypesForPackageFragment(", "+\tprivate void injectAllOpenablesForPackageFragment(", "-\t\tArrayList types) {", "+\t\tArrayList openables) {", "-\t\t\t\t\tICompilationUnit[] typeContainers = packFrag.getCompilationUnits();", "-\t\t\t\t\tinjectAllTypesForTypeContainers(typeContainers, types);", "+\t\t\t\t\tICompilationUnit[] cus = packFrag.getCompilationUnits();", "+\t\t\t\t\tfor (int i = 0, length = cus.length; i < length; i++) {", "+\t\t\t\t\t\topenables.add(cus[i]);", "+\t\t\t\t\t}", "-\t\t\t\t\tIClassFile[] typeContainers = packFrag.getClassFiles();", "-\t\t\t\t\tinjectAllTypesForTypeContainers(typeContainers, types);", "+\t\t\t\t\tIClassFile[] classFiles = packFrag.getClassFiles();", "+\t\t\t\t\tfor (int i = 0, length = classFiles.length; i < length; i++) {", "+\t\t\t\t\t\topenables.add(classFiles[i]);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ba4003774d2098022935d115d0f9a6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "d38fc1042ea41405e872886fade2fc483e8bcf01", "commitAfterChange": "8bea847412c36874664a80a329bfe627deff5fa9", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tprotected void findMethodInSuperInterfaces(ReferenceBinding currentType, char[] selector, ObjectVector found)", "signatureAfterChange": "  \tprotected void findMethodInSuperInterfaces(ReferenceBinding currentType, char[] selector, ObjectVector found)", "diff": ["-\t\t\t\tif (currentMethods.length > 0)", "-\t\t\t\t\tfound.addAll(currentMethods);", "+\t\t\t\tif (currentMethods.length > 0) {", "+\t\t\t\t\tint foundSize = found.size;", "+\t\t\t\t\tif (foundSize > 0) {", "+\t\t\t\t\t\t// its possible to walk the same superinterface from different classes in the hierarchy", "+\t\t\t\t\t\tnext : for (int c = 0, l = currentMethods.length; c < l; c++) {", "+\t\t\t\t\t\t\tMethodBinding current = currentMethods[c];", "+\t\t\t\t\t\t\tfor (int f = 0; f < foundSize; f++)", "+\t\t\t\t\t\t\t\tif (current == found.elementAt(f)) continue next;", "+\t\t\t\t\t\t\tfound.add(current);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfound.addAll(currentMethods);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 10458}
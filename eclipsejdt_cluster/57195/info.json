{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50563a160169d85b49c87be93dacf7fb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e18f90848bb5d0ab705d132beda1ad34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocAllocationExpression.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tTypeBinding internalResolveType(Scope scope)", "signatureAfterChange": "  \tTypeBinding internalResolveType(Scope scope)", "diff": ["-\t\t} else if (this.resolvedType.isMemberType()) { // inner class constructor reference must be qualified", "+\t\t} else if (this.resolvedType.isMemberType()) {", "-\t\t\tReferenceBinding enclosingTypeBinding = allocationType;", "-\t\t\tif (type instanceof JavadocQualifiedTypeReference && (((JavadocQualifiedTypeReference)type).tokens.length != length)) {", "-\t\t\t\tscope.problemReporter().javadocInvalidMemberTypeQualification(this.memberStart+1, this.sourceEnd, scope.getDeclarationModifiers());", "-\t\t\t} else {", "-\t\t\t\tint idx = length;", "-\t\t\t\twhile (idx > 0 && CharOperation.equals(qualification[--idx], enclosingTypeBinding.sourceName) && (enclosingTypeBinding = enclosingTypeBinding.enclosingType()) != null) {", "-\t\t\t\t\t// verify that each qualification token matches enclosing types", "-\t\t\t\t}", "-\t\t\t\tif (idx > 0 || enclosingTypeBinding != null) {", "+\t\t\tif (length > 1) { // accept qualified member class constructor reference => see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=103304", "+\t\t\t\tReferenceBinding enclosingTypeBinding = allocationType;", "+\t\t\t\tif (type instanceof JavadocQualifiedTypeReference && ((JavadocQualifiedTypeReference)type).tokens.length != length) {", "+\t\t\t\t} else {", "+\t\t\t\t\tint idx = length;", "+\t\t\t\t\twhile (idx > 0 && CharOperation.equals(qualification[--idx], enclosingTypeBinding.sourceName) && (enclosingTypeBinding = enclosingTypeBinding.enclosingType()) != null) {", "+\t\t\t\t\t\t// verify that each qualification token matches enclosing types", "+\t\t\t\t\t}", "+\t\t\t\t\tif (idx > 0 || enclosingTypeBinding != null) {", "+\t\t\t\t\t\tscope.problemReporter().javadocInvalidMemberTypeQualification(this.memberStart+1, this.sourceEnd, scope.getDeclarationModifiers());", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcf9da7ce9eb32f7f3745469f436b079", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocAllocationExpression.java", "commitBeforeChange": "ab74babcdf0f89ee66e36b91189c0d301a4da95d", "commitAfterChange": "66a4221dd418603b7f2bc6722d99e4e300585ef1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": "  \tTypeBinding internalResolveType(Scope scope)", "diff": ["-\tprivate TypeBinding internalResolveType(Scope scope) {", "+\tTypeBinding internalResolveType(Scope scope) {", "+\t\t} else if (this.resolvedType.isMemberType()) { // inner class constructor reference must be qualified", "+\t\t\tint length = qualification.length;", "+\t\t\tReferenceBinding enclosingTypeBinding = allocationType;", "+\t\t\tif (type instanceof JavadocQualifiedTypeReference && (((JavadocQualifiedTypeReference)type).tokens.length != length)) {", "+\t\t\t\tscope.problemReporter().javadocInvalidConstructorQualification(this.memberStart+1, this.sourceEnd); //, scope.getDeclarationModifiers());", "+\t\t\t} else {", "+\t\t\t\tint idx = length;", "+\t\t\t\twhile (idx > 0 && CharOperation.equals(qualification[--idx], enclosingTypeBinding.sourceName) && (enclosingTypeBinding = enclosingTypeBinding.enclosingType()) != null) {", "+\t\t\t\t\t// verify that each qualification token matches enclosing types", "+\t\t\t\t}", "+\t\t\t\tif (idx > 0 || enclosingTypeBinding != null) {", "+\t\t\t\t\tscope.problemReporter().javadocInvalidConstructorQualification(this.memberStart+1, this.sourceEnd); //, scope.getDeclarationModifiers());", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 57195}
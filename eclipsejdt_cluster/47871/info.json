{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "edf2866cd6232047c783becb70ae263e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70649d403ab491db8123045c4414434b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "c614621106519ff8481a1054577c7b362708dd68", "commitAfterChange": "283007dac99c2184e8a3866c05be98ceb42f71c9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void buildMoreCompletionContext(Expression expression)", "signatureAfterChange": " private void buildMoreCompletionContext(Expression expression)", "diff": ["+\t\t\t\t}", "+\t\t\t\tbreak nextElement;", "+\t\t\tcase K_CONDITIONAL_OPERATOR :", "+\t\t\t\tif(info == QUESTION) {", "+\t\t\t\t\tif(expressionPtr > 0) {", "+\t\t\t\t\t\texpressionPtr--;", "+\t\t\t\t\t\texpressionLengthPtr--;", "+\t\t\t\t\t\texpressionStack[expressionPtr] = expressionStack[expressionPtr+1];", "+\t\t\t\t\t\tpopElement(K_CONDITIONAL_OPERATOR);", "+\t\t\t\t\t\tbuildMoreCompletionContext(expression);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif(expressionPtr > 1) {", "+\t\t\t\t\t\texpressionPtr = expressionPtr - 2;", "+\t\t\t\t\t\texpressionLengthPtr = expressionLengthPtr - 2;", "+\t\t\t\t\t\texpressionStack[expressionPtr] = expressionStack[expressionPtr+2];", "+\t\t\t\t\t\tpopElement(K_CONDITIONAL_OPERATOR);", "+\t\t\t\t\t\tbuildMoreCompletionContext(expression);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f403699eac39957601c2ad7fd9fbd69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r \r protected void consumeAssignment()", "signatureAfterChange": "\r \r protected void consumeAssignment()", "diff": ["+\tExpression expr = expressionStack[expressionPtr + 1];\r", "+\tif (expr instanceof QualifiedAllocationExpression) {\r", "+\t\tif (((QualifiedAllocationExpression) expr).anonymousType != null) {\r", "+\t\t\texpressionStack[expressionPtr] =\r", "+\t\t\t\t(op != EQUAL ) ?\r", "+\t\t\t\t\tnew CompoundAssignment(\r", "+\t\t\t\t\t\texpressionStack[expressionPtr] ,\r", "+\t\t\t\t\t\texpressionStack[expressionPtr+1], \r", "+\t\t\t\t\t\top,\r", "+\t\t\t\t\t\tendStatementPosition)\t:\r", "+\t\t\t\t\tnew Assignment(\r", "+\t\t\t\t\t\texpressionStack[expressionPtr] ,\r", "+\t\t\t\t\t\texpressionStack[expressionPtr+1],\r", "+\t\t\t\t\t\tendStatementPosition);\r", "+\t\t\treturn;\r", "+\t\t}\r", "+\t}\r", "-\t\t\t\top)\t:\r", "+\t\t\t\top,\r", "+\t\t\t\tendPosition)\t:\r", "-\t\t\t\texpressionStack[expressionPtr+1]);\r", "+\t\t\t\texpressionStack[expressionPtr+1],\r", "+\t\t\t\tendPosition);\r"]}], "num": 47871}
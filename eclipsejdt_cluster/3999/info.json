{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "457e484758a72e3203a091113b79bb61", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b35b6e6b85584c26296c7a6884059c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 23, "signatureBeforeChange": " public boolean innersNeedUpdate()", "signatureAfterChange": "  public boolean isCompatibleWith(TypeBinding targetType, final Scope scope)", "diff": ["+", "+public boolean isCompatibleWith(TypeBinding targetType, final Scope scope) {", "+\tif (this.argumentsHaveErrors || this.binding == null || !this.binding.isValidBinding() || targetType == null || scope == null)", "+\t\treturn false;", "+\tTypeBinding originalExpectedType = this.expectedType;", "+\ttry {", "+\t\tthis.expectedType = targetType;", "+\t\t// No need to tunnel through overload resolution. this.binding is the MSMB.", "+\t\tMethodBinding method = isPolyExpression() ? ParameterizedGenericMethodBinding.computeCompatibleMethod18(this.binding.shallowOriginal(), this.argumentTypes, scope, this) : this.binding;", "+\t\tTypeBinding returnType;", "+\t\tif (method == null || !method.isValidBinding() || (returnType = method.returnType) == null || !returnType.isValidBinding())", "+\t\t\treturn false;", "+\t\tif (method == scope.environment().arrayClone)", "+\t\t\treturnType = this.actualReceiverType;", "+\t\treturn returnType != null && returnType.capture(scope, this.sourceEnd).isCompatibleWith(targetType, scope);", "+\t} finally {", "+\t\tthis.expectedType = originalExpectedType;", "+\t}", "+}", "-}", "-public boolean innersNeedUpdate() {", "-\treturn this.innerInferenceHelper != null;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a28e046a5ed23064d5d908512e1946a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "e2d31ef7ac94c5bb6285f9813df43a1164c5ca8d", "commitAfterChange": "11132934987e84219ca80fa47f5c2b4b4040e5de", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic MethodBinding findCompileTimeMethodTargeting(TypeBinding targetType, Scope scope)", "signatureAfterChange": " \tpublic MethodBinding findCompileTimeMethodTargeting(TypeBinding targetType, Scope scope)", "diff": ["-\t\tif (this.exactMethodBinding != null) {", "-\t\t\t// TODO: shouldn't extactMethodBinding already be parameterized?", "-\t\t\tif (this.exactMethodBinding.typeVariables != Binding.NO_TYPE_VARIABLES && this.resolvedTypeArguments != null) {", "-\t\t\t\treturn scope.environment().createParameterizedGenericMethod(this.exactMethodBinding, this.resolvedTypeArguments);", "-\t\t\t}", "-\t\t\treturn this.exactMethodBinding;", "-\t\t}", "-\t\treturn internalResolveTentatively(targetType, scope);", "+\t\tMethodBinding targetMethod = internalResolveTentatively(targetType, scope);", "+\t\tif (targetMethod == null || !targetMethod.isValidBinding())", "+\t\t\treturn null;", "+\t\treturn targetMethod;"]}], "num": 3999}
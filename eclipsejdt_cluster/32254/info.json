{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47d8c18bec18253efdb731e01394d5da", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a7cd7c730c4acc04b77e135b7a8ec48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceImplTests.java", "commitBeforeChange": "a892813e8b7a5d041e5d0d3d868b173ea1f47ce5", "commitAfterChange": "b077f1ec27f6f9c95317db4e5e225319a96f87d5", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 77, "signatureBeforeChange": "  private static void reinitializeFromComputedValues(String source, String target)", "signatureAfterChange": "  private static void reinitializeFromComputedValues(String source, String target)", "diff": ["-\tNullReferenceImplTests.State[] transitiveClosure = computeTransitiveClosure();", "+\tNullReferenceImplTests.State[] transitiveClosure = computeTransitiveClosure(); // need for initialization?", "+\ttransitiveClosure = addSymbolicStates(transitiveClosure); // don't rely on reachibility alone, since we don't cover all operations in these tests.", "+\tArrays.sort(transitiveClosure, new Comparator() {", "+\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\treturn new Integer(((State)o1).value).compareTo(new Integer(((State)o2).value));", "+\t\t}", "+\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bb224abb667b251c7731bcec9d5d22d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/EvaluationContext.java", "commitBeforeChange": "523f72b860e1c5f7334e13e5c75a18826c7ae1a0", "commitAfterChange": "d5627341503c684b35efd505dd3662e10e508037", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void evaluateVariables(INameEnvironment environment, Map options, IRequestor requestor, IProblemFactory problemFactory) throws InstallException", "signatureAfterChange": " public void evaluateVariables(INameEnvironment environment, Map options, IRequestor requestor, IProblemFactory problemFactory) throws InstallException", "diff": ["+\t\t\t// Sort classes so that enclosing types are cached before nested types", "+\t\t\t// otherwise an AbortCompilation is thrown in 1.5 mode since the enclosing type", "+\t\t\t// is needed to resolve a nested type", "+\t\t\tUtil.sort(classes, new Util.Comparer() {", "+\t\t\t\tpublic int compare(Object a, Object b) {", "+\t\t\t\t\tif (a == b) return 0;", "+\t\t\t\t\tClassFile enclosing = ((ClassFile) a).enclosingClassFile;", "+\t\t\t\t\twhile (enclosing != null) {", "+\t\t\t\t\t\tif (enclosing == b)", "+\t\t\t\t\t\t\treturn 1;", "+\t\t\t\t\t\tenclosing = enclosing.enclosingClassFile;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn -1;", "+\t\t\t\t}", "+\t\t\t});", "+\t\t\t"]}], "num": 32254}
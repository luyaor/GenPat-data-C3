{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a24c41e7583c556adb3f2ebf6e3b031", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23505eb5d4bf6bb5e20c92c57317a917", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "5292e21f94372deace5f16b5dfc6aac2c22faf52", "commitAfterChange": "2215b5c020d05490fe1ddb8fe56785e7c3280d1b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void computeLocalVariablePositions(int initOffset, CodeStream codeStream)", "signatureAfterChange": " \tpublic void computeLocalVariablePositions(int initOffset, CodeStream codeStream)", "diff": ["+\t\tboolean isReportingUnusedArgument = false;", "+", "+\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "+\t\t\tAbstractMethodDeclaration methodDecl = (AbstractMethodDeclaration)referenceContext;", "+\t\t\tMethodBinding method = methodDecl.binding;", "+\t\t\tCompilerOptions options = compilationUnitScope().environment.options;", "+\t\t\tif (!(method.isAbstract()", "+\t\t\t\t\t|| (method.isImplementing() && !options.reportUnusedParameterWhenImplementingAbstract) ", "+\t\t\t\t\t|| (method.isOverriding() && !method.isImplementing() && !options.reportUnusedParameterWhenOverridingConcrete)", "+\t\t\t\t\t|| method.isMain())) {", "+\t\t\t\tisReportingUnusedArgument = true;", "+\t\t\t}", "+\t\t}", "-\t\t\tif (local.useFlag == LocalVariableBinding.UNUSED", "-\t\t\t\t&& ((local.declaration.bits & AstNode.IsLocalDeclarationReachableMASK) != 0)) { // declaration is reachable", "+\t\t\tif (isReportingUnusedArgument", "+\t\t\t\t\t&& local.useFlag == LocalVariableBinding.UNUSED", "+\t\t\t\t\t&& ((local.declaration.bits & AstNode.IsLocalDeclarationReachableMASK) != 0)) { // declaration is reachable"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "757e2bfdfa45e2c60d19b3703361d4e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean isCompound)", "signatureAfterChange": " \t \tpublic FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean isCompound)", "diff": ["-\t\t\t\t}\t\t\t\t// check if final blank field", "+\t\t\t\t}", "+\t\t\t\tif (this.indexOfFirstFieldBinding == 1) { // was an implicit reference to the first field binding", "+\t\t\t\t\tReferenceBinding declaringClass = lastFieldBinding.declaringClass;", "+\t\t\t\t\t// check if accessing enum static field in initializer\t\t\t\t\t", "+\t\t\t\t\tif (declaringClass.isEnum()) {", "+\t\t\t\t\t\tMethodScope methodScope = currentScope.methodScope();", "+\t\t\t\t\t\tSourceTypeBinding sourceType = methodScope.enclosingSourceType();", "+\t\t\t\t\t\tif (lastFieldBinding.isStatic()", "+\t\t\t\t\t\t\t\t&& (sourceType == declaringClass || sourceType.superclass == declaringClass) // enum constant body", "+\t\t\t\t\t\t\t\t&& lastFieldBinding.constant() == NotAConstant", "+\t\t\t\t\t\t\t\t&& !methodScope.isStatic", "+\t\t\t\t\t\t\t\t&& methodScope.isInsideInitializerOrConstructor()) {", "+\t\t\t\t\t\t\tcurrentScope.problemReporter().enumStaticFieldUsedDuringInitialization(lastFieldBinding, this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\t// check if final blank field"]}], "num": 49482}
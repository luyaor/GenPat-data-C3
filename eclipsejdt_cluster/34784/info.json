{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0718bfe4b6c15fcb4d04d9691b4f23c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "870bad28e5a9cf0c312b87fa2f493bc9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "569ea51c58561efd4d8aa7df4dbd08c4ce6f4fbf", "commitAfterChange": "af652d9d40e3e30a14ccbd2056144782592afc53", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "diff": ["-\tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite) {", "-\t\treturn findMethod(receiverType, selector, argumentTypes, invocationSite, false);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daba0fa19e1cf6873c00bf49f6ae6918", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "f174c5e3ec66ea2a46810b190cc3e9d57c0432d4", "commitAfterChange": "8bbacffbe712e7ac5a5d22a44809b44ff8a5e616", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tvoid setSourceComment(char[] source)", "signatureAfterChange": " \tprotected void setSourceComment(char[] source)", "diff": ["-\tvoid setSourceComment(char[] source) {", "+\tprotected void setSourceComment(char[] source) {", "+\t\tchar previousChar=0, currentChar=0;", "-\t\t\tif (comment == 0) {", "-\t\t\t\tswitch (source[i]) {", "-\t\t\t\t\tcase '/':", "-\t\t\t\t\t\tswitch (source[++i]) {", "-\t\t\t\t\t\t\tcase '/':", "-\t\t\t\t\t\t\t\tcomment = 1; // line comment", "-\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"//\");", "-\t\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase '*':", "-\t\t\t\t\t\t\t\tif (source[++i] == '*') {", "-\t\t\t\t\t\t\t\t\tif (source[++i] == '/') { // empty block comment", "-\t\t\t\t\t\t\t\t\t\tthis.comments.add(\"/**/\");", "-\t\t\t\t\t\t\t\t\t\tthis.allTags.add(new ArrayList());", "+\t\t\tpreviousChar = currentChar;", "+\t\t\t// get next char", "+\t\t\tcurrentChar = source[i];", "+\t\t\tint charLength = 1;", "+\t\t\tif (currentChar == '\\\\' && source[i+1] == 'u') {", "+\t\t\t\t//-------------unicode traitement ------------", "+\t\t\t\tint c1, c2, c3, c4;", "+\t\t\t\tcharLength++;", "+\t\t\t\twhile (source[i+charLength] == 'u') charLength++;", "+\t\t\t\tif (((c1 = Character.getNumericValue(source[i+charLength++])) > 15", "+\t\t\t\t\t|| c1 < 0)", "+\t\t\t\t\t|| ((c2 = Character.getNumericValue(source[i+charLength++])) > 15 || c2 < 0)", "+\t\t\t\t\t|| ((c3 = Character.getNumericValue(source[i+charLength++])) > 15 || c3 < 0)", "+\t\t\t\t\t|| ((c4 = Character.getNumericValue(source[i+charLength])) > 15 || c4 < 0)) {", "+\t\t\t\t\tthrow new RuntimeException(\"Invalid unicode in source at \"+i);", "+\t\t\t\t}", "+\t\t\t\tcurrentChar = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "+\t\t\t\ti+=charLength;", "+\t\t\t}", "+", "+\t\t\t// ", "+\t\t\tswitch (comment) {", "+\t\t\t\tcase 0: ", "+\t\t\t\t\tswitch (currentChar) {", "+\t\t\t\t\t\tcase '/':", "+\t\t\t\t\t\t\tcomment = 1; // first char for comments...", "+\t\t\t\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\t\t\t\tif (charLength == 1) {", "+\t\t\t\t\t\t\t\tbuffer.append(currentChar);", "+\t\t\t\t\t\t\t} else  {", "+\t\t\t\t\t\t\t\tfor (int k=i-charLength; k<=i; k++) buffer.append(source[k]);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase '\\'':", "+\t\t\t\t\t\t\twhile (i<length) {", "+\t\t\t\t\t\t\t\t// get next char", "+\t\t\t\t\t\t\t\tcurrentChar = source[i];", "+\t\t\t\t\t\t\t\tif (currentChar == '\\\\' && source[i+1] == 'u') {", "+\t\t\t\t\t\t\t\t\t//-------------unicode traitement ------------", "+\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\tint c1, c2, c3, c4;", "+\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\twhile (source[i] == 'u') i++;", "+\t\t\t\t\t\t\t\t\tif (((c1 = Character.getNumericValue(source[i++])) > 15", "+\t\t\t\t\t\t\t\t\t\t|| c1 < 0)", "+\t\t\t\t\t\t\t\t\t\t|| ((c2 = Character.getNumericValue(source[i++])) > 15 || c2 < 0)", "+\t\t\t\t\t\t\t\t\t\t|| ((c3 = Character.getNumericValue(source[i++])) > 15 || c3 < 0)", "+\t\t\t\t\t\t\t\t\t\t|| ((c4 = Character.getNumericValue(source[i++])) > 15 || c4 < 0)) {", "+\t\t\t\t\t\t\t\t\t\tthrow new RuntimeException(\"Invalid unicode in source at \"+i);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tcurrentChar = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (currentChar == '\\\\') {", "+\t\t\t\t\t\t\t\t\t// get next char", "+\t\t\t\t\t\t\t\t\tcurrentChar = source[i];", "+\t\t\t\t\t\t\t\t\tif (currentChar == '\\\\' && source[i+1] == 'u') {", "+\t\t\t\t\t\t\t\t\t\t//-------------unicode traitement ------------", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tcomment = 3; // javadoc", "-\t\t\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"/**\");", "+\t\t\t\t\t\t\t\t\t\tint c1, c2, c3, c4;", "+\t\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\t\twhile (source[i] == 'u') i++;", "+\t\t\t\t\t\t\t\t\t\tif (((c1 = Character.getNumericValue(source[i++])) > 15", "+\t\t\t\t\t\t\t\t\t\t\t|| c1 < 0)", "+\t\t\t\t\t\t\t\t\t\t\t|| ((c2 = Character.getNumericValue(source[i++])) > 15 || c2 < 0)", "+\t\t\t\t\t\t\t\t\t\t\t|| ((c3 = Character.getNumericValue(source[i++])) > 15 || c3 < 0)", "+\t\t\t\t\t\t\t\t\t\t\t|| ((c4 = Character.getNumericValue(source[i++])) > 15 || c4 < 0)) {", "+\t\t\t\t\t\t\t\t\t\t\tthrow new RuntimeException(\"Invalid unicode in source at \"+i);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tcurrentChar = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "-\t\t\t\t\t\t\t\t\tcomment = 2; // block comment", "-\t\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"/*\");", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase '\\'':", "-\t\t\t\t\t\twhile (i<length) {", "-\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\tif (i==length) break;", "-\t\t\t\t\t\t\tif (source[i] == '\\\\') {", "-\t\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tif (source[i] == '\\'') {", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase '\"':", "-\t\t\t\t\t\twhile (i<length) {", "-\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\tif (i==length) break;", "-\t\t\t\t\t\t\tif (source[i] == '\\\\') {", "-\t\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tif (source[i] == '\"') {", "-\t\t\t\t\t\t\t\t\tif ((i+1)==length) break;", "-\t\t\t\t\t\t\t\t\tif (source[i+1] == '\"') {", "-\t\t\t\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tif (currentChar == '\\'') {", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tswitch (comment) {", "-\t\t\t\tcase 1: // line comment", "-\t\t\t\t\tif (source[i] == '\\r' || source[i] == '\\n') {", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase '\"':", "+\t\t\t\t\t\t\twhile (i<length) {", "+\t\t\t\t\t\t\t\t// get next char", "+\t\t\t\t\t\t\t\tcurrentChar = source[i];", "+\t\t\t\t\t\t\t\tif (currentChar == '\\\\' && source[i+1] == 'u') {", "+\t\t\t\t\t\t\t\t\t//-------------unicode traitement ------------", "+\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\tint c1, c2, c3, c4;", "+\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\twhile (source[i] == 'u') i++;", "+\t\t\t\t\t\t\t\t\tif (((c1 = Character.getNumericValue(source[i++])) > 15", "+\t\t\t\t\t\t\t\t\t\t|| c1 < 0)", "+\t\t\t\t\t\t\t\t\t\t|| ((c2 = Character.getNumericValue(source[i++])) > 15 || c2 < 0)", "+\t\t\t\t\t\t\t\t\t\t|| ((c3 = Character.getNumericValue(source[i++])) > 15 || c3 < 0)", "+\t\t\t\t\t\t\t\t\t\t|| ((c4 = Character.getNumericValue(source[i++])) > 15 || c4 < 0)) {", "+\t\t\t\t\t\t\t\t\t\tthrow new RuntimeException(\"Invalid unicode in source at \"+i);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tcurrentChar = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (currentChar == '\\\\') {", "+\t\t\t\t\t\t\t\t\t// get next char", "+\t\t\t\t\t\t\t\t\tcurrentChar = source[i];", "+\t\t\t\t\t\t\t\t\tif (currentChar == '\\\\' && source[i+1] == 'u') {", "+\t\t\t\t\t\t\t\t\t\t//-------------unicode traitement ------------", "+\t\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\t\tint c1, c2, c3, c4;", "+\t\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\t\twhile (source[i] == 'u') i++;", "+\t\t\t\t\t\t\t\t\t\tif (((c1 = Character.getNumericValue(source[i++])) > 15", "+\t\t\t\t\t\t\t\t\t\t\t|| c1 < 0)", "+\t\t\t\t\t\t\t\t\t\t\t|| ((c2 = Character.getNumericValue(source[i++])) > 15 || c2 < 0)", "+\t\t\t\t\t\t\t\t\t\t\t|| ((c3 = Character.getNumericValue(source[i++])) > 15 || c3 < 0)", "+\t\t\t\t\t\t\t\t\t\t\t|| ((c4 = Character.getNumericValue(source[i++])) > 15 || c4 < 0)) {", "+\t\t\t\t\t\t\t\t\t\t\tthrow new RuntimeException(\"Invalid unicode in source at \"+i);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tcurrentChar = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tif (currentChar == '\"') {", "+\t\t\t\t\t\t\t\t\t\tint currentPos=i;", "+\t\t\t\t\t\t\t\t\t\t// get next char", "+\t\t\t\t\t\t\t\t\t\tcurrentChar = source[i];", "+\t\t\t\t\t\t\t\t\t\tif (currentChar == '\\\\' && source[i+1] == 'u') {", "+\t\t\t\t\t\t\t\t\t\t\t//-------------unicode traitement ------------", "+\t\t\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\t\t\tint c1, c2, c3, c4;", "+\t\t\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\t\t\twhile (source[i] == 'u') i++;", "+\t\t\t\t\t\t\t\t\t\t\tif (((c1 = Character.getNumericValue(source[i++])) > 15", "+\t\t\t\t\t\t\t\t\t\t\t\t|| c1 < 0)", "+\t\t\t\t\t\t\t\t\t\t\t\t|| ((c2 = Character.getNumericValue(source[i++])) > 15 || c2 < 0)", "+\t\t\t\t\t\t\t\t\t\t\t\t|| ((c3 = Character.getNumericValue(source[i++])) > 15 || c3 < 0)", "+\t\t\t\t\t\t\t\t\t\t\t\t|| ((c4 = Character.getNumericValue(source[i++])) > 15 || c4 < 0)) {", "+\t\t\t\t\t\t\t\t\t\t\t\tthrow new RuntimeException(\"Invalid unicode in source at \"+i);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tcurrentChar = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (source[i+1] != '\"') {", "+\t\t\t\t\t\t\t\t\t\t\ti=currentPos;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 1: // first '/' has been found...", "+\t\t\t\t\tswitch (currentChar) {", "+\t\t\t\t\t\tcase '/':", "+\t\t\t\t\t\t\tif (charLength == 1) {", "+\t\t\t\t\t\t\t\tbuffer.append(currentChar);", "+\t\t\t\t\t\t\t} else  {", "+\t\t\t\t\t\t\t\tfor (int k=i-charLength; k<=i; k++) buffer.append(source[k]);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tcomment = LINE_COMMENT;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase '*':", "+\t\t\t\t\t\t\tif (charLength == 1) {", "+\t\t\t\t\t\t\t\tbuffer.append(currentChar);", "+\t\t\t\t\t\t\t} else  {", "+\t\t\t\t\t\t\t\tfor (int k=i-charLength; k<=i; k++) buffer.append(source[k]);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tcomment = 2; // next step", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tcomment = 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 2: // '/*' has been found...", "+\t\t\t\t\tif (currentChar == '*') {", "+\t\t\t\t\t\tcomment = 3; // next step...", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcomment = BLOCK_COMMENT;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (charLength == 1) {", "+\t\t\t\t\t\tbuffer.append(currentChar);", "+\t\t\t\t\t} else  {", "+\t\t\t\t\t\t\tfor (int k=i-charLength; k<=i; k++) buffer.append(source[k]);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 3: // '/**' has bee found, verify that's not an empty block comment", "+\t\t\t\t\tif (charLength == 1) {", "+\t\t\t\t\t\tbuffer.append(currentChar);", "+\t\t\t\t\t} else  {", "+\t\t\t\t\t\tfor (int k=i-charLength; k<=i; k++) buffer.append(source[k]);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (currentChar == '/') { // empty block comment", "+\t\t\t\t\t\tthis.comments.add(buffer.toString());", "+\t\t\t\t\t\tthis.allTags.add(new ArrayList());", "+\t\t\t\t\t\tcomment = 0;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcomment = DOC_COMMENT;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase LINE_COMMENT:", "+\t\t\t\t\tif (currentChar == '\\r' || currentChar == '\\n') {", "-\t\t\t\t\t\tif (source[i] == '\\r' && source[i+1] == '\\n') {", "+\t\t\t\t\t\tif (currentChar == '\\r' && source[i+1] == '\\n') {", "-\t\t\t\t\t\tbuffer.append(source[i]);", "+\t\t\t\t\t\tif (charLength == 1) {", "+\t\t\t\t\t\t\tbuffer.append(currentChar);", "+\t\t\t\t\t\t} else  {", "+\t\t\t\t\t\t\tfor (int k=i-charLength; k<=i; k++) buffer.append(source[k]);", "+\t\t\t\t\t\t}", "-\t\t\t\tcase 3: // javadoc comment", "+\t\t\t\tcase DOC_COMMENT:", "-\t\t\t\t\t\tif (source[i] >= 'a' && source[i] <= 'z') {", "-\t\t\t\t\t\t\ttag += source[i];", "+\t\t\t\t\t\tif (currentChar >= 'a' && currentChar <= 'z') {", "+\t\t\t\t\t\t\ttag += currentChar;", "-\t\t\t\t\tswitch (source[i]) {", "+\t\t\t\t\tswitch (currentChar) {", "-\t\t\t\t\t\t\tif (!lineStarted || source[i-1] == '{') {", "+\t\t\t\t\t\t\tif (!lineStarted || previousChar == '{') {", "-\t\t\t\t\t\t\tif (!Character.isWhitespace(source[i])) {", "+\t\t\t\t\t\t\tif (!Character.isWhitespace(currentChar)) {", "-\t\t\t\tcase 2: // block comment", "-\t\t\t\t\tbuffer.append(source[i]);", "-\t\t\t\t\tif (end && source[i] == '/') {", "+\t\t\t\tcase BLOCK_COMMENT:", "+\t\t\t\t\tif (charLength == 1) {", "+\t\t\t\t\t\tbuffer.append(currentChar);", "+\t\t\t\t\t} else  {", "+\t\t\t\t\t\tfor (int k=i-charLength; k<=i; k++) buffer.append(source[k]);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (end && currentChar == '/') {", "-\t\t\t\t\tend = source[i] == '*';", "+\t\t\t\t\tend = currentChar == '*';", "+\t\t}", "+\t}"]}], "num": 34784}
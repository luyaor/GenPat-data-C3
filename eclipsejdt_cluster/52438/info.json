{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ba85dcdc6a5af1dc6817e163472a123", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7dc6217d3c9b29d0858c4fb0355ffffd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "7a57dee588cd632418aaf1f630bac2c2a5d6439a", "commitAfterChange": "5da68acd208879ef019bd0e515f8fb58463b35fb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void computeId()", "signatureAfterChange": " public void computeId()", "diff": ["-\t\tif (compoundName.length == 4 && CharOperation.equals(JAVA_LANG_REFLECT_CONSTRUCTOR, compoundName)) {", "+\t\tif (compoundName.length == 4 && CharOperation.equals(JAVA_LANG_REFLECT_CONSTRUCTOR, compoundName))", "-\t\t\treturn;", "-\t\t}", "-\t\treturn;\t\t// all other types are in java.*.*", "+\t\treturn;", "-\t\treturn;\t\t// assumes we only look up types in java", "+\t\treturn;", "+\t// remaining types MUST be in java.*.*", "-\t\tif (CharOperation.equals(JAVA_IO_PRINTSTREAM, compoundName)) {", "+\t\tif (CharOperation.equals(JAVA_IO_PRINTSTREAM, compoundName))", "+\t\treturn;", "+\t}", "+", "+\t// remaining types MUST be in java.lang.*", "+\tchar[] typeName = compoundName[2];", "+\tif (typeName.length == 0) return; // just to be safe", "+\tswitch (typeName[0]) {", "+\t\tcase 'A' :", "+\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_ASSERTIONERROR[2]))", "+\t\t\t\tid = T_JavaLangAssertionError;", "-\t\t}", "-\t\treturn;\t\t// all other types are in java.lang", "-\t}", "-", "-\tif (CharOperation.equals(JAVA_LANG_OBJECT, compoundName)) {", "-\t\tid = T_JavaLangObject;", "-\t\treturn;", "-\t}", "-\tif (CharOperation.equals(JAVA_LANG_STRING, compoundName)) {", "-\t\tid = T_JavaLangString;", "-\t\treturn;", "-\t}", "-", "-\t// well-known exception types", "-\tif (CharOperation.equals(JAVA_LANG_THROWABLE, compoundName)) {", "-\t\tid = T_JavaLangThrowable;", "-\t\treturn;", "-\t}", "-\tif (CharOperation.equals(JAVA_LANG_ERROR, compoundName)) {", "-\t\tid = T_JavaLangError;", "-\t\treturn;", "-\t}", "-\tif (CharOperation.equals(JAVA_LANG_EXCEPTION, compoundName)) {", "-\t\tid = T_JavaLangException;", "-\t\treturn;", "-\t}", "-\tif (CharOperation.equals(JAVA_LANG_CLASSNOTFOUNDEXCEPTION, compoundName)) {", "-\t\tid = T_JavaLangClassNotFoundException;", "-\t\treturn;", "-\t}", "-\tif (CharOperation.equals(JAVA_LANG_NOCLASSDEFERROR, compoundName)) {", "-\t\tid = T_JavaLangNoClassDefError;", "-\t\treturn;", "-\t}", "-", "-\t// other well-known types", "-\tif (CharOperation.equals(JAVA_LANG_CLASS, compoundName)) {", "-\t\tid = T_JavaLangClass;", "-\t\treturn;", "-\t}", "-\tif (CharOperation.equals(JAVA_LANG_STRINGBUFFER, compoundName)) {", "-\t\tid = T_JavaLangStringBuffer;", "-\t\treturn;", "-\t}", "-\tif (CharOperation.equals(JAVA_LANG_SYSTEM, compoundName)) {", "-\t\tid = T_JavaLangSystem;", "-\t\treturn;", "-\t}", "-", "-\tif (CharOperation.equals(JAVA_LANG_INTEGER, compoundName)) {", "-\t\tid = T_JavaLangInteger;", "-\t\treturn;", "-\t}", "-", "-\tif (CharOperation.equals(JAVA_LANG_BYTE, compoundName)) {", "-\t\tid = T_JavaLangByte;", "-\t\treturn;", "-\t}\t", "-", "-\tif (CharOperation.equals(JAVA_LANG_CHARACTER, compoundName)) {", "-\t\tid = T_JavaLangCharacter;", "-\t\treturn;", "-\t}", "-", "-\tif (CharOperation.equals(JAVA_LANG_FLOAT, compoundName)) {", "-\t\tid = T_JavaLangFloat;", "-\t\treturn;", "-\t}", "-", "-\tif (CharOperation.equals(JAVA_LANG_DOUBLE, compoundName)) {", "-\t\tid = T_JavaLangDouble;", "-\t\treturn;", "-\t}", "-", "-\tif (CharOperation.equals(JAVA_LANG_BOOLEAN, compoundName)) {", "-\t\tid = T_JavaLangBoolean;", "-\t\treturn;", "-\t}", "-", "-\tif (CharOperation.equals(JAVA_LANG_SHORT, compoundName)) {", "-\t\tid = T_JavaLangShort;", "-\t\treturn;", "-\t}", "-", "-\tif (CharOperation.equals(JAVA_LANG_LONG, compoundName)) {", "-\t\tid = T_JavaLangLong;", "-\t\treturn;", "-\t}", "-", "-\tif (CharOperation.equals(JAVA_LANG_VOID, compoundName)) {", "-\t\tid = T_JavaLangVoid;", "-\t\treturn;", "-\t}", "-\t", "-\tif (CharOperation.equals(JAVA_LANG_ASSERTIONERROR, compoundName)) {", "-\t\tid = T_JavaLangAssertionError;", "-\t\treturn;", "+\t\tcase 'B' :", "+\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_BYTE[2]))", "+\t\t\t\tid = T_JavaLangByte;", "+\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_BOOLEAN[2]))", "+\t\t\t\tid = T_JavaLangBoolean;", "+\t\t\treturn;", "+\t\tcase 'C' :", "+\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_CLASSNOTFOUNDEXCEPTION[2]))", "+\t\t\t\tid = T_JavaLangClassNotFoundException;", "+\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_CLASS[2]))", "+\t\t\t\tid = T_JavaLangClass;", "+\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_CHARACTER[2]))", "+\t\t\t\tid = T_JavaLangCharacter;", "+\t\t\treturn;", "+\t\tcase 'D' :", "+\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_DOUBLE[2]))", "+\t\t\t\tid = T_JavaLangDouble;", "+\t\t\treturn;", "+\t\tcase 'E' :", "+\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_ERROR[2]))", "+\t\t\t\tid = T_JavaLangError;", "+\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_EXCEPTION[2]))", "+\t\t\t\tid = T_JavaLangException;", "+\t\t\treturn;", "+\t\tcase 'F' :", "+\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_FLOAT[2]))", "+\t\t\t\tid = T_JavaLangFloat;", "+\t\t\treturn;", "+\t\tcase 'I' :", "+\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_INTEGER[2]))", "+\t\t\t\tid = T_JavaLangInteger;", "+\t\t\treturn;", "+\t\tcase 'L' :", "+\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_LONG[2]))", "+\t\t\t\tid = T_JavaLangLong;", "+\t\t\treturn;", "+\t\tcase 'N' :", "+\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_NOCLASSDEFERROR[2]))", "+\t\t\t\tid = T_JavaLangNoClassDefError;", "+\t\t\treturn;", "+\t\tcase 'O' :", "+\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_OBJECT[2]))", "+\t\t\t\tid = T_JavaLangObject;", "+\t\t\treturn;", "+\t\tcase 'S' :", "+\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_STRING[2]))", "+\t\t\t\tid = T_JavaLangString;", "+\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_STRINGBUFFER[2]))", "+\t\t\t\tid = T_JavaLangStringBuffer;", "+\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_SYSTEM[2]))", "+\t\t\t\tid = T_JavaLangSystem;", "+\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_SHORT[2]))", "+\t\t\t\tid = T_JavaLangShort;", "+\t\t\treturn;", "+\t\tcase 'T' :", "+\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_THROWABLE[2]))", "+\t\t\t\tid = T_JavaLangThrowable;", "+\t\t\treturn;", "+\t\tcase 'V' :", "+\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_VOID[2]))", "+\t\t\t\tid = T_JavaLangVoid;", "+\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abb0538534d830da4579e1c9c9ea4706", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "7aac6f03ecf70666410b0e689c91dafd6d67757a", "commitAfterChange": "465d091146b1d6997709777ea444048487da1d8d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void computeId()", "signatureAfterChange": " public void computeId()", "diff": ["-\tif (compoundName.length != 3) {", "-\t\tif (compoundName.length == 4 && CharOperation.equals(JAVA_LANG_REFLECT_CONSTRUCTOR, compoundName))", "-\t\t\tid = T_JavaLangReflectConstructor;", "-\t\treturn;", "-\t}", "+\t", "+\tswitch (compoundName.length) {", "-\tif (!CharOperation.equals(JAVA, compoundName[0]))", "-\t\treturn;", "-", "-\t// remaining types MUST be in java.*.*", "-\tif (!CharOperation.equals(LANG, compoundName[1])) {", "-\t\tif (CharOperation.equals(JAVA_IO_PRINTSTREAM, compoundName))", "-\t\t\tid = T_JavaIoPrintStream;", "-\t\telse if (CharOperation.equals(JAVA_UTIL_ITERATOR, compoundName))", "-\t\t\tid = T_JavaUtilIterator;", "-\t\telse if (CharOperation.equals(JAVA_IO_SERIALIZABLE, compoundName))", "-\t\t    id = T_JavaIoSerializable;", "-\t\treturn;", "-\t}", "-", "-\t// remaining types MUST be in java.lang.*", "-\tchar[] typeName = compoundName[2];", "-\tif (typeName.length == 0) return; // just to be safe", "-\tswitch (typeName[0]) {", "-\t\tcase 'A' :", "-\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_ASSERTIONERROR[2]))", "-\t\t\t\tid = T_JavaLangAssertionError;", "-\t\t\treturn;", "-\t\tcase 'B' :", "-\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_BOOLEAN[2]))", "-\t\t\t\tid = T_JavaLangBoolean;", "-\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_BYTE[2]))", "-\t\t\t\tid = T_JavaLangByte;", "-\t\t\treturn;", "-\t\tcase 'C' :", "-\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_CHARACTER[2]))", "-\t\t\t\tid = T_JavaLangCharacter;", "-\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_CLASS[2]))", "-\t\t\t\tid = T_JavaLangClass;", "-\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_CLASSNOTFOUNDEXCEPTION[2]))", "-\t\t\t\tid = T_JavaLangClassNotFoundException;", "-\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_CLONEABLE[2]))", "-\t\t\t    id = T_JavaLangCloneable;", "-\t\t\treturn;", "-\t\tcase 'D' :", "-\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_DOUBLE[2]))", "-\t\t\t\tid = T_JavaLangDouble;", "-\t\t\treturn;", "-\t\tcase 'E' :", "-\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_ERROR[2]))", "-\t\t\t\tid = T_JavaLangError;", "-\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_EXCEPTION[2]))", "-\t\t\t\tid = T_JavaLangException;", "-\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_ENUM[2]))", "-\t\t\t\tid = T_JavaLangEnum;", "-\t\t\treturn;", "-\t\tcase 'F' :", "-\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_FLOAT[2]))", "-\t\t\t\tid = T_JavaLangFloat;", "-\t\t\treturn;", "-\t\tcase 'I' :", "-\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_INTEGER[2]))", "-\t\t\t\tid = T_JavaLangInteger;", "-\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_ITERABLE[2]))", "-\t\t\t\tid = T_JavaLangIterable;", "-\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_ILLEGALARGUMENTEXCEPTION[2]))", "-\t\t\t\tid = T_JavaLangIllegalArgumentException;", "-\t\t\treturn;", "-\t\tcase 'L' :", "-\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_LONG[2]))", "-\t\t\t\tid = T_JavaLangLong;", "-\t\t\treturn;", "-\t\tcase 'N' :", "-\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_NOCLASSDEFERROR[2]))", "-\t\t\t\tid = T_JavaLangNoClassDefError;", "-\t\t\treturn;", "-\t\tcase 'O' :", "-\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_OBJECT[2]))", "-\t\t\t\tid = T_JavaLangObject;", "-\t\t\treturn;", "-\t\tcase 'S' :", "-\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_STRING[2]))", "-\t\t\t\tid = T_JavaLangString;", "-\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_STRINGBUFFER[2]))", "-\t\t\t\tid = T_JavaLangStringBuffer;", "-\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_STRINGBUILDER[2])) ", "-\t\t\t\tid = T_JavaLangStringBuilder;", "-\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_SYSTEM[2]))", "-\t\t\t\tid = T_JavaLangSystem;", "-\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_SHORT[2]))", "-\t\t\t\tid = T_JavaLangShort;", "-\t\t\treturn;", "-\t\tcase 'T' :", "-\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_THROWABLE[2]))", "-\t\t\t\tid = T_JavaLangThrowable;", "-\t\t\treturn;", "-\t\tcase 'V' :", "-\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_VOID[2]))", "-\t\t\t\tid = T_JavaLangVoid;", "-\t\t\treturn;", "+\t\tcase 3 :", "+\t\t\tif (!CharOperation.equals(JAVA, compoundName[0]))", "+\t\t\t\treturn;", "+\t\t", "+\t\t\t// remaining types MUST be in java.*.*", "+\t\t\tif (!CharOperation.equals(LANG, compoundName[1])) {", "+\t\t\t\tif (CharOperation.equals(JAVA_IO_PRINTSTREAM, compoundName))", "+\t\t\t\t\tid = T_JavaIoPrintStream;", "+\t\t\t\telse if (CharOperation.equals(JAVA_UTIL_ITERATOR, compoundName))", "+\t\t\t\t\tid = T_JavaUtilIterator;", "+\t\t\t\telse if (CharOperation.equals(JAVA_IO_SERIALIZABLE, compoundName))", "+\t\t\t\t    id = T_JavaIoSerializable;", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t", "+\t\t\t// remaining types MUST be in java.lang.*", "+\t\t\tchar[] typeName = compoundName[2];", "+\t\t\tif (typeName.length == 0) return; // just to be safe", "+\t\t\tswitch (typeName[0]) {", "+\t\t\t\tcase 'A' :", "+\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_ASSERTIONERROR[2]))", "+\t\t\t\t\t\tid = T_JavaLangAssertionError;", "+\t\t\t\t\treturn;", "+\t\t\t\tcase 'B' :", "+\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_BOOLEAN[2]))", "+\t\t\t\t\t\tid = T_JavaLangBoolean;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_BYTE[2]))", "+\t\t\t\t\t\tid = T_JavaLangByte;", "+\t\t\t\t\treturn;", "+\t\t\t\tcase 'C' :", "+\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_CHARACTER[2]))", "+\t\t\t\t\t\tid = T_JavaLangCharacter;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_CLASS[2]))", "+\t\t\t\t\t\tid = T_JavaLangClass;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_CLASSNOTFOUNDEXCEPTION[2]))", "+\t\t\t\t\t\tid = T_JavaLangClassNotFoundException;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_CLONEABLE[2]))", "+\t\t\t\t\t    id = T_JavaLangCloneable;", "+\t\t\t\t\treturn;", "+\t\t\t\tcase 'D' :", "+\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_DOUBLE[2]))", "+\t\t\t\t\t\tid = T_JavaLangDouble;", "+\t\t\t\t\treturn;", "+\t\t\t\tcase 'E' :", "+\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_ERROR[2]))", "+\t\t\t\t\t\tid = T_JavaLangError;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_EXCEPTION[2]))", "+\t\t\t\t\t\tid = T_JavaLangException;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_ENUM[2]))", "+\t\t\t\t\t\tid = T_JavaLangEnum;", "+\t\t\t\t\treturn;", "+\t\t\t\tcase 'F' :", "+\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_FLOAT[2]))", "+\t\t\t\t\t\tid = T_JavaLangFloat;", "+\t\t\t\t\treturn;", "+\t\t\t\tcase 'I' :", "+\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_INTEGER[2]))", "+\t\t\t\t\t\tid = T_JavaLangInteger;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_ITERABLE[2]))", "+\t\t\t\t\t\tid = T_JavaLangIterable;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_ILLEGALARGUMENTEXCEPTION[2]))", "+\t\t\t\t\t\tid = T_JavaLangIllegalArgumentException;", "+\t\t\t\t\treturn;", "+\t\t\t\tcase 'L' :", "+\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_LONG[2]))", "+\t\t\t\t\t\tid = T_JavaLangLong;", "+\t\t\t\t\treturn;", "+\t\t\t\tcase 'N' :", "+\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_NOCLASSDEFERROR[2]))", "+\t\t\t\t\t\tid = T_JavaLangNoClassDefError;", "+\t\t\t\t\treturn;", "+\t\t\t\tcase 'O' :", "+\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_OBJECT[2]))", "+\t\t\t\t\t\tid = T_JavaLangObject;", "+\t\t\t\t\treturn;", "+\t\t\t\tcase 'S' :", "+\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_STRING[2]))", "+\t\t\t\t\t\tid = T_JavaLangString;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_STRINGBUFFER[2]))", "+\t\t\t\t\t\tid = T_JavaLangStringBuffer;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_STRINGBUILDER[2])) ", "+\t\t\t\t\t\tid = T_JavaLangStringBuilder;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_SYSTEM[2]))", "+\t\t\t\t\t\tid = T_JavaLangSystem;", "+\t\t\t\t\telse if (CharOperation.equals(typeName, JAVA_LANG_SHORT[2]))", "+\t\t\t\t\t\tid = T_JavaLangShort;", "+\t\t\t\t\treturn;", "+\t\t\t\tcase 'T' :", "+\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_THROWABLE[2]))", "+\t\t\t\t\t\tid = T_JavaLangThrowable;", "+\t\t\t\t\treturn;", "+\t\t\t\tcase 'V' :", "+\t\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_VOID[2]))", "+\t\t\t\t\t\tid = T_JavaLangVoid;", "+\t\t\t\t\treturn;", "+\t\t\t}", "+\t\tbreak;", "+\t\t\t", "+\t\tcase 4:", "+\t\t\tif (!CharOperation.equals(JAVA, compoundName[0]))", "+\t\t\t\treturn;", "+\t\t\tif (!CharOperation.equals(LANG, compoundName[1]))", "+\t\t\t\treturn;", "+\t\t\tchar[] packageName = compoundName[2];", "+\t\t\tif (packageName.length == 0) return; // just to be safe\t\t\t", "+\t\t\ttypeName = compoundName[3];", "+\t\t\tif (typeName.length == 0) return; // just to be safe\t\t\t", "+\t\t\tif (CharOperation.equals(packageName, REFLECT)) {", "+\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_REFLECT_CONSTRUCTOR[3]))", "+\t\t\t\t\tid = T_JavaLangReflectConstructor;", "+\t\t\t\treturn;", "+\t\t\t} else if (CharOperation.equals(packageName, ANNOTATION)) {", "+\t\t\t\tif (CharOperation.equals(typeName, JAVA_LANG_ANNOTATION_ANNOTATION[3]))", "+\t\t\t\t\tid = T_JavaLangAnnotationAnnotation;", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tbreak;"]}], "num": 52438}
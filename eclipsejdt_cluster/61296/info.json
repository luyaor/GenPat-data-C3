{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d4ca3bf049fbefd6d1dbfbdfcaa07f56", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7423fd1d545ad68eb39eb95a268a9d38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 604, "methodNumberAfterChange": 604, "signatureBeforeChange": " \tpublic void test600()", "signatureAfterChange": " \tpublic void test600()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\tZork z;\\n\" + ", "-\t\t\t\"\t^^^^\\n\" + ", "-\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"\tsort6(le);\\n\" + ", "-\t\t\t\"\t^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation sort6(List<MyEnum>) of the generic method sort6(List<T>) of type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\t\"\tsort7(le);\\n\" + ", "-\t\t\t\"\t^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation sort7(List<MyEnum>) of the generic method sort7(List<T>) of type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tsort9(le);\\n\" + ", "-\t\t\t\"\t^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation sort9(List<MyEnum>) of the generic method sort9(List<T>) of type X\\n\" + ", "-\t\t\t\"----------\\n\");", "+            \"----------\\n\" + ", "+    \t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+    \t\t\"\tpublic class X implements Comparable {\\n\" + ", "+    \t\t\"\t                          ^^^^^^^^^^\\n\" + ", "+    \t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+    \t\t\"\tZork z;\\n\" + ", "+    \t\t\"\t^^^^\\n\" + ", "+    \t\t\"Zork cannot be resolved to a type\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+    \t\t\"\tList<MyEnum> le = null;\\n\" + ", "+    \t\t\"\t     ^^^^^^\\n\" + ", "+    \t\t\"Type safety: MyEnum is a raw type. References to generic type MyEnum<E> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"4. WARNING in X.java (at line 8)\\n\" + ", "+    \t\t\"\tsort6(le);\\n\" + ", "+    \t\t\"\t^^^^^^^^^\\n\" + ", "+    \t\t\"Type safety: Unchecked invocation sort6(List<MyEnum>) of the generic method sort6(List<T>) of type X\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"5. WARNING in X.java (at line 9)\\n\" + ", "+    \t\t\"\tsort7(le);\\n\" + ", "+    \t\t\"\t^^^^^^^^^\\n\" + ", "+    \t\t\"Type safety: Unchecked invocation sort7(List<MyEnum>) of the generic method sort7(List<T>) of type X\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"6. WARNING in X.java (at line 11)\\n\" + ", "+    \t\t\"\tsort9(le);\\n\" + ", "+    \t\t\"\t^^^^^^^^^\\n\" + ", "+    \t\t\"Type safety: Unchecked invocation sort9(List<MyEnum>) of the generic method sort9(List<T>) of type X\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"7. WARNING in X.java (at line 21)\\n\" + ", "+    \t\t\"\tstatic <T extends MyEnum> void sort10(List<T> list) {}\\n\" + ", "+    \t\t\"\t                  ^^^^^^\\n\" + ", "+    \t\t\"Type safety: MyEnum is a raw type. References to generic type MyEnum<E> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba7280f4e255a229683711e76cf66a31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 887, "methodNumberAfterChange": 887, "signatureBeforeChange": " public void test0867()", "signatureAfterChange": " public void test0867()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 20)\\n\" +", "-\t\t\"\tList<List> o = Foo.foo1();\\n\" +", "-\t\t\"\t     ^^^^\\n\" +", "-\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in X.java (at line 20)\\n\" +", "-\t\t\"\tList<List> o = Foo.foo1();\\n\" +", "-\t\t\"\t                   ^^^^\\n\" +", "-\t\t\"The method foo1() in the type Foo is not applicable for the arguments ()\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 21)\\n\" +", "-\t\t\"\tFoo.bar1(o);\\n\" +", "-\t\t\"\t    ^^^^\\n\" +", "-\t\t\"The method bar1(List<List<T>>) in the type Foo is not applicable for the arguments (List<List>)\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 24)\\n\" +", "-\t\t\"\tList o = Foo.foo2();\\n\" +", "-\t\t\"\t^^^^\\n\" +", "-\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. WARNING in X.java (at line 25)\\n\" +", "-\t\t\"\tFoo.bar2(o);\\n\" +", "-\t\t\"\t^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation bar2(List) of the generic method bar2(List<T>) of type Foo\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"6. WARNING in X.java (at line 25)\\n\" +", "-\t\t\"\tFoo.bar2(o);\\n\" +", "-\t\t\"\t         ^\\n\" +", "-\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<T>\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\"\tList<List> o = Foo.foo1();\\n\" + ", "+\t\t\"\t     ^^^^\\n\" + ", "+\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 20)\\n\" + ", "+\t\t\"\tList<List> o = Foo.foo1();\\n\" + ", "+\t\t\"\t                   ^^^^\\n\" + ", "+\t\t\"The method foo1() in the type Foo is not applicable for the arguments ()\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 21)\\n\" + ", "+\t\t\"\tFoo.bar1(o);\\n\" + ", "+\t\t\"\t    ^^^^\\n\" + ", "+\t\t\"The method bar1(List<List<T>>) in the type Foo is not applicable for the arguments (List<List>)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 24)\\n\" + ", "+\t\t\"\tList o = Foo.foo2();\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 25)\\n\" + ", "+\t\t\"\tFoo.bar2(o);\\n\" + ", "+\t\t\"\t^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation bar2(List) of the generic method bar2(List<T>) of type Foo\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in X.java (at line 25)\\n\" + ", "+\t\t\"\tFoo.bar2(o);\\n\" + ", "+\t\t\"\t         ^\\n\" + ", "+\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Runnable>\\n\" + "]}], "num": 61296}
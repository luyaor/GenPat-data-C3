{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "294b8e230d93055f02fbfdb25efb3d66", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "619e60139c5a96ac052c6d39d570e9a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "67da1da15e9afbcd33679f07597c706e7915cf4a", "commitAfterChange": "027fccb2c17e0f0d2b28705c6704af10fc8ce0aa", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding expressionTb = expression.resolveType(scope);", "-\t\tif (expressionTb == null)", "-\t\t\treturn null;", "-", "-\t\t\tif ((castTb = type.resolveType(scope)) == null)", "+\t\t\tTypeBinding castTypeBinding = type.resolveType(scope);", "+\t\t\tif(castTypeBinding == null)", "-\t\t\tareTypesCastCompatible(scope, castTb, expressionTb);", "-\t\t\treturn castTb;", "-\t\t} else { // expression as a cast !!!!!!!! ", "+\t\t\tTypeBinding expressionTb = expression.resolveType(scope);", "+\t\t\tif (expressionTb == null)", "+\t\t\t\treturn null;", "+\t\t\tareTypesCastCompatible(scope, castTypeBinding, expressionTb);", "+\t\t\treturn this.expressionType = castTb = castTypeBinding;", "+\t\t} else { // expression as a cast !!!!!!!!", "+\t\t\tTypeBinding expressionTb = expression.resolveType(scope);", "+\t\t\tif (expressionTb == null)", "+\t\t\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d98a847544aabe396cee79ae55522c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java", "commitBeforeChange": "5464f8b56e2b620bf0f37dc5a7c218f835be9cef", "commitAfterChange": "57e05ac5c8db0c06028159bb169607bae2e0ec84", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding arrayTb = receiver.resolveType(scope);", "-\t\tif (arrayTb == null)", "-\t\t\treturn null;", "-\t\tif (!arrayTb.isArrayType()) {", "-\t\t\tscope.problemReporter().referenceMustBeArrayTypeAt(arrayTb, this);", "-\t\t\treturn null;", "+\t\tTypeBinding arrayType = receiver.resolveType(scope);", "+\t\tif (arrayType != null) {", "+\t\t\tif (arrayType.isArrayType()) {", "+\t\t\t\tthis.resolvedType = ((ArrayBinding) arrayType).elementsType(scope);", "+\t\t\t} else {", "+\t\t\t\tscope.problemReporter().referenceMustBeArrayTypeAt(arrayType, this);", "+\t\t\t}", "-\t\tTypeBinding positionTb = position.resolveTypeExpecting(scope, IntBinding);", "-\t\tif (positionTb == null)", "-\t\t\treturn null;", "-\t\tposition.implicitWidening(IntBinding, positionTb);", "-\t\treturn this.expressionType = arrayElementBinding = ((ArrayBinding) arrayTb).elementsType(scope);", "+\t\tTypeBinding positionType = position.resolveTypeExpecting(scope, IntBinding);", "+\t\tif (positionType != null) {", "+\t\t\tposition.implicitWidening(IntBinding, positionType);", "+\t\t}", "+\t\treturn this.resolvedType;"]}], "num": 4798}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1264945fb16f7436f0babce190495c3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa0c496a4213a8d7cb9816eeb43af41c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 46, "signatureBeforeChange": " \t \tprivate static void rootNodeToCompilationUnit(AST ast, ASTConverter converter, CompilationUnit compilationUnit, ASTNode node, RecordedParsingInformation recordedParsingInformation)", "signatureAfterChange": " \tpublic AnnotationTypeDeclaration newAnnotationTypeDeclaration()", "diff": ["-\tprivate static void rootNodeToCompilationUnit(AST ast, ASTConverter converter, CompilationUnit compilationUnit, ASTNode node, RecordedParsingInformation recordedParsingInformation) {", "-\t\tfinal int problemsCount = recordedParsingInformation.problemsCount;", "-\t\tswitch(node.getNodeType()) {", "-\t\t\tcase ASTNode.BLOCK :", "-\t\t\t\t{", "-\t\t\t\t\tBlock block = (Block) node;", "-\t\t\t\t\tif (problemsCount != 0) {", "-\t\t\t\t\t\t// propagate and record problems", "-\t\t\t\t\t\tfinal IProblem[] problems = recordedParsingInformation.problems;", "-\t\t\t\t\t\tfor (int i = 0, max = block.statements().size(); i < max; i++) {", "-\t\t\t\t\t\t\tconverter.propagateErrors((ASTNode) block.statements().get(i), problems);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\t\t\t\t}", "-\t\t\t\t\tTypeDeclaration typeDeclaration = ast.newTypeDeclaration();", "-\t\t\t\t\tInitializer initializer = ast.newInitializer();", "-\t\t\t\t\tinitializer.setBody(block);", "-\t\t\t\t\ttypeDeclaration.bodyDeclarations().add(initializer);", "-\t\t\t\t\tcompilationUnit.types().add(typeDeclaration);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase ASTNode.TYPE_DECLARATION :", "-\t\t\t\t{", "-\t\t\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "-\t\t\t\t\tif (problemsCount != 0) {", "-\t\t\t\t\t\t// propagate and record problems", "-\t\t\t\t\t\tfinal IProblem[] problems = recordedParsingInformation.problems;", "-\t\t\t\t\t\tfor (int i = 0, max = typeDeclaration.bodyDeclarations().size(); i < max; i++) {", "-\t\t\t\t\t\t\tconverter.propagateErrors((ASTNode) typeDeclaration.bodyDeclarations().get(i), problems);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\t\t\t\t}", "-\t\t\t\t\tcompilationUnit.types().add(typeDeclaration);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tdefault :", "-\t\t\t\tif (node instanceof Expression) {", "-\t\t\t\t\tExpression expression = (Expression) node;", "-\t\t\t\t\tif (problemsCount != 0) {", "-\t\t\t\t\t\t// propagate and record problems", "-\t\t\t\t\t\tfinal IProblem[] problems = recordedParsingInformation.problems;", "-\t\t\t\t\t\tconverter.propagateErrors(expression, problems);", "-\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\t\t\t\t}", "-\t\t\t\t\tExpressionStatement expressionStatement = ast.newExpressionStatement(expression);", "-\t\t\t\t\tBlock block = ast.newBlock();", "-\t\t\t\t\tblock.statements().add(expressionStatement);", "-\t\t\t\t\tInitializer initializer = ast.newInitializer();", "-\t\t\t\t\tinitializer.setBody(block);", "-\t\t\t\t\tTypeDeclaration typeDeclaration = ast.newTypeDeclaration();", "-\t\t\t\t\ttypeDeclaration.bodyDeclarations().add(initializer);", "-\t\t\t\t\tcompilationUnit.types().add(typeDeclaration);", "-\t\t\t\t}", "-\t\t}", "-\t}", "+\t */", "+\tpublic AnnotationTypeDeclaration newAnnotationTypeDeclaration() {", "+\t    unsupportedIn2();", "+\t\tAnnotationTypeDeclaration result = new AnnotationTypeDeclaration(this);", "+\t\treturn result;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e79b073234d59421faf6795d50f1361c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "0af096b2d34684a162b7a195205699b7a15a3c32", "commitAfterChange": "55eb63b50ad4a934502bfb435a017ff21ebaf8d8", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tprivate static void rootNodeToCompilationUnit(AST ast, ASTConverter converter, ASTNode node)", "signatureAfterChange": " \t \tprivate static void rootNodeToCompilationUnit(AST ast, ASTConverter converter, ASTNode node, CodeSnippetParsingUtil codeSnippetParsingUtil)", "diff": ["-\tprivate static void rootNodeToCompilationUnit(AST ast, ASTConverter converter, ASTNode node) {", "+\tprivate static void rootNodeToCompilationUnit(AST ast, ASTConverter converter, ASTNode node, CodeSnippetParsingUtil codeSnippetParsingUtil) {", "-\t\tCompilationResult compilationResult = CodeSnippetParsingUtil.RecordedCompilationResult;", "-\t\tfinal int problemsCount = compilationResult.problemCount;", "+\t\tRecordedParsingInformation recordedParsingInformation = codeSnippetParsingUtil.recordedParsingInformation;", "+\t\tfinal int problemsCount = recordedParsingInformation.problemsCount;", "-\t\t\t\t\t\tIProblem[] resizedProblems = null;", "-\t\t\t\t\t\tfinal IProblem[] problems = compilationResult.problems;", "-\t\t\t\t\t\tif (problems.length == problemsCount) {", "-\t\t\t\t\t\t\tresizedProblems = problems;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tSystem.arraycopy(problems, 0, (resizedProblems = new IProblem[problemsCount]), 0, problemsCount);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tfinal IProblem[] problems = recordedParsingInformation.problems;", "-\t\t\t\t\t\t\tconverter.propagateErrors((ASTNode) block.statements().get(i), resizedProblems);", "+\t\t\t\t\t\t\tconverter.propagateErrors((ASTNode) block.statements().get(i), problems);", "-\t\t\t\t\t\tcompilationUnit.setProblems(resizedProblems);", "+\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\t\t\t\t\tIProblem[] resizedProblems = null;", "-\t\t\t\t\t\tfinal IProblem[] problems = compilationResult.problems;", "-\t\t\t\t\t\tif (problems.length == problemsCount) {", "-\t\t\t\t\t\t\tresizedProblems = problems;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tSystem.arraycopy(problems, 0, (resizedProblems = new IProblem[problemsCount]), 0, problemsCount);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tfinal IProblem[] problems = recordedParsingInformation.problems;", "-\t\t\t\t\t\t\tconverter.propagateErrors((ASTNode) typeDeclaration.bodyDeclarations().get(i), resizedProblems);", "+\t\t\t\t\t\t\tconverter.propagateErrors((ASTNode) typeDeclaration.bodyDeclarations().get(i), problems);", "-\t\t\t\t\t\tcompilationUnit.setProblems(resizedProblems);", "+\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\t\t\t\t\tIProblem[] resizedProblems = null;", "-\t\t\t\t\t\tfinal IProblem[] problems = compilationResult.problems;", "-\t\t\t\t\t\tif (problems.length == problemsCount) {", "-\t\t\t\t\t\t\tresizedProblems = problems;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tSystem.arraycopy(problems, 0, (resizedProblems = new IProblem[problemsCount]), 0, problemsCount);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tconverter.propagateErrors(expression, resizedProblems);", "-\t\t\t\t\t\tcompilationUnit.setProblems(resizedProblems);", "+\t\t\t\t\t\tfinal IProblem[] problems = recordedParsingInformation.problems;", "+\t\t\t\t\t\tconverter.propagateErrors(expression, problems);", "+\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\tcompilationUnit.setLineEndTable(compilationResult.lineSeparatorPositions);", "-\t\tCodeSnippetParsingUtil.reset();", "+\t\tcompilationUnit.setLineEndTable(recordedParsingInformation.lineEnds);"]}], "num": 35426}
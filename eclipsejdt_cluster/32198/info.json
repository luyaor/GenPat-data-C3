{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ddd1e0ac2b7c98c17ad6660a7f223f5c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e5a6eedb4ed8100e8389e2d92592cb8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-\t\t\tFieldBinding fieldBinding = (FieldBinding) this.codegenBinding;", "-\t\t\tif (fieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "+\t\t\tFieldBinding codegenField = ((FieldBinding) this.binding).original();", "+\t\t\tif (codegenField.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "-\t\t\t\tif (fieldBinding.isStatic()) {", "+\t\t\t\tif (codegenField.isStatic()) {", "-\t\t\t\tcodeStream.generateEmulatedReadAccessForField(fieldBinding);", "+\t\t\t\tcodeStream.generateEmulatedReadAccessForField(codegenField);", "-\t\t\t\t\tif ((fieldBinding.type == TypeBinding.LONG) || (fieldBinding.type == TypeBinding.DOUBLE)) {", "-\t\t\t\t\t\tcodeStream.dup2();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.dup();", "+\t\t\t\t\tswitch (codegenField.type.id) {", "+\t\t\t\t\t\tcase TypeIds.T_long :", "+\t\t\t\t\t\tcase TypeIds.T_double :", "+\t\t\t\t\t\t\tcodeStream.dup2();", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tcodeStream.dup();", "+\t\t\t\t\t\t\tbreak;", "-\t\t\t\tcodeStream.generateEmulationForField(fieldBinding);", "-\t\t\t\tif ((fieldBinding.type == TypeBinding.LONG) || (fieldBinding.type == TypeBinding.DOUBLE)) {", "-\t\t\t\t\tcodeStream.dup_x2();", "+\t\t\t\tcodeStream.generateEmulationForField(codegenField);", "+\t\t\t\tswitch (codegenField.type.id) {", "+\t\t\t\t\tcase TypeIds.T_long :", "+\t\t\t\t\tcase TypeIds.T_double :", "+\t\t\t\t\t\tcodeStream.dup_x2();", "+\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\tif (codegenField.isStatic()) {", "+\t\t\t\t\t\t\tcodeStream.aconst_null();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tgenerateReceiver(codeStream);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcodeStream.dup_x2();", "+\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tcodeStream.dup_x1();", "-\t\t\t\t\tif (fieldBinding.isStatic()) {", "-\t\t\t\t\t\tcodeStream.aconst_null();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tgenerateReceiver(codeStream);", "-\t\t\t\t\t}", "-\t\t\t\t\tcodeStream.dup_x2();", "-\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t} else {", "-\t\t\t\t\tcodeStream.dup_x1();", "-\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\tif (fieldBinding.isStatic()) {", "+\t\t\t\t\tif (codegenField.isStatic()) {", "+\t\t\t\t\t\tbreak;", "-\t\t\t\tcodeStream.sendOperator(postIncrement.operator, fieldBinding.type.id);", "+\t\t\t\tcodeStream.sendOperator(postIncrement.operator, codegenField.type.id);", "-\t\t\t\tcodeStream.generateEmulatedWriteAccessForField(fieldBinding);", "+\t\t\t\tcodeStream.generateEmulatedWriteAccessForField(codegenField);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9c5d3ddb2a1f325b537b2fcdef40b5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-\tif (this.codegenBinding.canBeSeenBy(this.receiverType, this, currentScope)) {", "+\tFieldBinding codegenBinding = this.binding.original();", "+\tif (codegenBinding.canBeSeenBy(this.actualReceiverType, this, currentScope)) {", "-\t\tthis.receiver.generateCode(currentScope, codeStream, !(isStatic = this.codegenBinding.isStatic()));", "+\t\tthis.receiver.generateCode(currentScope, codeStream, !(isStatic = codegenBinding.isStatic()));", "-\t\tcodeStream.generateEmulatedReadAccessForField(this.codegenBinding);", "+\t\tcodeStream.generateEmulatedReadAccessForField(codegenBinding);", "-\t\t// value value receiver value\t\t\t\t\t\tdup_x1 or dup2_x1", "-\t\t// value value receiver\t\t\t\t\t\t\t\tpop or pop2", "+\t\t// value value receiver value\t\t\t\t\tdup_x1 or dup2_x1", "+\t\t// value value receiver\t\t\t\t\t\t\tpop or pop2", "-\t\t// value value field receiver \t\t\t\t\t\tswap", "-\t\t// value field receiver value field receiver \t\tdup2_x1 or dup2_x2", "-\t\t// value field receiver value \t\t\t\t \t\tpop2", "-\t\t// value field receiver newvalue \t\t\t\t \tgenerate constant + op", "-\t\t// value \t\t\t\t\t\t\t\t\t\t\tstore", "-\t\tif (valueRequired) {", "-\t\t\tif ((this.codegenBinding.type == TypeBinding.LONG) || (this.codegenBinding.type == TypeBinding.DOUBLE)) {", "+\t\t// value value field receiver \t\t\t\t\tswap", "+\t\t// value field receiver value field receiver \tdup2_x1 or dup2_x2", "+\t\t// value field receiver value \t\t\t\t \tpop2", "+\t\t// value field receiver newvalue \t\t\t\tgenerate constant + op", "+\t\t// value \t\t\t\t\t\t\t\t\t\t\t\tstore", "+\t\tint typeID;", "+\t\tswitch (typeID = codegenBinding.type.id) {", "+\t\t\tcase TypeIds.T_long :", "+\t\t\tcase TypeIds.T_double :", "+\t\t\t\tif (valueRequired) {", "+\t\t\t\t\tcodeStream.dup2_x1();", "+\t\t\t\t}", "-\t\t\t} else {", "+\t\t\t\tcodeStream.pop2();", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\tif (valueRequired) {", "+\t\t\t\t\tcodeStream.dup_x1();", "+\t\t\t\t}", "-\t\t\t}", "+\t\t\t\tcodeStream.pop();", "+\t\t\t\tbreak;", "-\t\tif ((this.codegenBinding.type == TypeBinding.LONG) || (this.codegenBinding.type == TypeBinding.DOUBLE)) {", "-\t\t\tcodeStream.dup2_x1();", "-\t\t\tcodeStream.pop2();", "-\t\t} else {", "-\t\t\tcodeStream.dup_x1();", "-\t\t\tcodeStream.pop();", "-\t\t}", "-\t\tcodeStream.generateEmulationForField(this.codegenBinding);", "+\t\tcodeStream.generateEmulationForField(codegenBinding);", "-", "-\t\tif ((this.codegenBinding.type == TypeBinding.LONG) || (this.codegenBinding.type == TypeBinding.DOUBLE)) {", "-\t\t\tcodeStream.dup2_x2();", "-\t\t} else {", "-\t\t\tcodeStream.dup2_x1();", "+\t\tswitch (typeID) {", "+\t\t\tcase TypeIds.T_long :", "+\t\t\tcase TypeIds.T_double :", "+\t\t\t\tcodeStream.dup2_x2();", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\tcodeStream.dup2_x1();", "+\t\t\t\tbreak;", "-\t\tcodeStream.sendOperator(postIncrement.operator, this.codegenBinding.type.id);", "+\t\tcodeStream.sendOperator(postIncrement.operator, codegenBinding.type.id);", "-\t\tcodeStream.generateEmulatedWriteAccessForField(this.codegenBinding);", "+\t\tcodeStream.generateEmulatedWriteAccessForField(codegenBinding);"]}], "num": 32198}
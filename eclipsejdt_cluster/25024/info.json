{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "878c7d27b9d4bc3c4ad737a0b292e99d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "669ea27afc5e31be327b04ebddd950a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tprivate void formatArrayInitializer(ArrayInitializer arrayInitializer, BlockScope scope, boolean insertSpaceBeforeOpeningBrace)", "signatureAfterChange": "  \tprivate void formatArrayInitializer(ArrayInitializer arrayInitializer, BlockScope scope, boolean insertSpaceBeforeOpeningBrace)", "diff": ["-\t\tString array_initializer_brace_position = this.preferences.array_initializer_brace_position;", "+\t\tString array_initializer_brace_position = this.preferences.brace_position_for_array_initializer;", "-\t\t\tif (this.preferences.insert_new_line_after_opening_brace_in_array_initializer) {", "-\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t}", "+\t\t\tfinal boolean insert_new_line_after_opening_brace = this.preferences.insert_new_line_after_opening_brace_in_array_initializer;", "+\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t}", "-\t\t\t\t\t\tthis.preferences.array_initializer_expressions_alignment,", "+\t\t\t\t\t\tthis.preferences.alignment_for_expressions_in_array_initializer,", "-\t\t\t\t\t\tthis.preferences.array_initializer_continuation_indentation,", "+\t\t\t\t\t\tthis.preferences.continuation_indentation_for_array_initializer,", "-\t\t\t\tif (this.preferences.insert_new_line_after_opening_brace_in_array_initializer) {", "+\t\t\t\tif (insert_new_line_after_opening_brace) {", "-\t\t\t\t\t\tif (this.preferences.insert_space_before_first_initializer) {", "+\t\t\t\t\t\tif (this.preferences.insert_space_after_opening_brace_in_array_initializer) {", "+\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\tthis.scribe.indent();", "+\t\t\t\t}", "-\t\t\t\tif (this.preferences.insert_space_before_first_initializer) {", "+\t\t\t\tif (this.preferences.insert_space_after_opening_brace_in_array_initializer) {", "-\t\t\t\tif (expressionsLength == 1) {", "-\t\t\t\t\tif (isComma()) {", "-\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tfor (int i = 1; i < expressionsLength; i++) {", "-\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_array_initializer) {", "-\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\texpressions[i].traverse(this, scope);", "-\t\t\t\t\t\tif (i == expressionsLength - 1) {", "-\t\t\t\t\t\t\tif (isComma()) {", "-\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\t\tif (isComma()) {", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "+\t\t\t\t}", "+\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t\tthis.scribe.unIndent();", "-\t\t} else if (this.preferences.insert_space_between_empty_array_initializer) {", "+\t\t} else if (this.preferences.insert_space_between_empty_braces_in_array_initializer) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79249b37fdb3f90225c23762f2cdceb8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "49c7e567a30e3d9cc1c4880ba35031661d2a5415", "commitAfterChange": "c9d2c7d4276b8b0f65a3b8bbfa4009e8632940f9", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tprivate void printJavadocBlock(FormatJavadocBlock block)", "signatureAfterChange": "  \tprivate void printJavadocBlock(FormatJavadocBlock block)", "diff": ["+\t\tint maxColumn = this.formatter.preferences.comment_line_length;", "+\t\tboolean clearBlankLines = this.formatter.preferences.comment_clear_blank_lines_in_javadoc_comment;", "-\t\t\tFormatJavadocNode reference= block.reference;", "+\t\t\tFormatJavadocReference reference= block.reference;", "-\t\t\t\t// format between tag name and reference", "-\t\t\t\taddReplaceEdit(previousEnd+1, reference.sourceStart - 1, \" \"); //$NON-NLS-1$", "-\t\t\t\tthis.column++;", "+\t\t\t\t// format reference", "+\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\tprintJavadocBlockReference(buffer, reference, block);", "+\t\t\t    addReplaceEdit(previousEnd+1, reference.sourceEnd, buffer.toString());", "-\t\t\t\tthis.column += previousEnd - reference.sourceStart + 1;", "-\t\tint maxColumn = this.formatter.preferences.comment_line_length;", "+\t\t\tint newLines;", "-\t\t\t\tint newLines = this.formatter.preferences.comment_insert_new_line_for_parameter && block.isParamTag() ? 1 : 0;", "+\t\t\t\tnewLines = this.formatter.preferences.comment_insert_new_line_for_parameter && !block.isInlined() && block.isParamTag() ? 1 : 0;", "-\t\t\t   \t\tprintJavadocGapLines(previousEnd+1, nodeStart-1, newLines, this.formatter.preferences.comment_clear_blank_lines_in_javadoc_comment, false, null);", "+\t\t\t   \t\tprintJavadocGapLines(previousEnd+1, nodeStart-1, newLines, clearBlankLines, false, null);", "-\t\t\t\tint newLines = this.column > this.formatter.preferences.comment_line_length ? 1 : 0;", "+\t\t\t\tnewLines = this.column > this.formatter.preferences.comment_line_length ? 1 : 0;", "-\t\t\t\t   \t\t\tprintJavadocGapLines(previousEnd+1, nodeStart-1, newLines, this.formatter.preferences.comment_clear_blank_lines_in_javadoc_comment, false, null);", "+\t\t\t\t   \t\t\tprintJavadocGapLines(previousEnd+1, nodeStart-1, newLines, clearBlankLines, false, null);", "-\t\t\t   \t\t\tprintJavadocGapLines(previousEnd+1, nodeStart-1, newLines, this.formatter.preferences.comment_clear_blank_lines_in_javadoc_comment, false, null);", "+\t\t\t   \t\t\tprintJavadocGapLines(previousEnd+1, nodeStart-1, newLines, clearBlankLines, false, null);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// Indent if new line was added", "+\t\t\t\t\t\tif (newLines > 0) {", "+\t\t\t\t\t\t\tint col = this.column;", "+\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\t\t\tint textEnd = text.separatorsPtr == -1 ? text.sourceEnd : (int) (text.separators[0] >>> 32);", "+\t\t\t\t\t\t\tprintJavadocTextLine(buffer, text.sourceStart, textEnd, block, true, true, true);", "+\t\t\t\t\t\t\taddReplaceEdit(text.sourceStart, textEnd, buffer.toString());", "+\t\t\t\t\t\t\ttextLength -= this.column - col;"]}], "num": 25024}
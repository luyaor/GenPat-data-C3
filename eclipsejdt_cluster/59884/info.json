{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24b013465e2192658a37a49045834250", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "156a0098391cf3a9b55a8ea80f9aa37e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "9d8b73554095c311a209be1a1d5aa92bb30583eb", "commitAfterChange": "990424c900c7463d4257bff26a1ccc6812106204", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static void suggestLocalVariableNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, char[][] excludedNames, INamingRequestor requestor)", "signatureAfterChange": " \tpublic static void suggestLocalVariableNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, char[] internalPrefix, char[][] excludedNames, INamingRequestor requestor)", "diff": ["-\tpublic static void suggestLocalVariableNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, char[][] excludedNames, INamingRequestor requestor) {", "+\tpublic static void suggestLocalVariableNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, char[] internalPrefix, char[][] excludedNames, INamingRequestor requestor) {", "+\t\t\tinternalPrefix,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16d7debef1d2be320bb4b823806d539b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompletionRequestorWrapper.java", "commitBeforeChange": "d90d9bd95abe34cc0cfe3b06356eb1c26ea7d5bf", "commitAfterChange": "a1fcf7304168cfe820abddf9b4c29fb602e9a7cd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, char[] returnTypePackageName, char[] returnTypeName, char[] completionName, int modifiers, int completionStart, int completionEnd)", "signatureAfterChange": "\r public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, char[][] parameterNames, char[] returnTypePackageName, char[] returnTypeName, char[] completionName, int modifiers, int completionStart, int completionEnd)", "diff": ["-public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, char[] returnTypePackageName, char[] returnTypeName, char[] completionName, int modifiers, int completionStart, int completionEnd) {\r", "-\tthis.clientRequestor.acceptMethod(declaringTypePackageName, declaringTypeName, selector, parameterPackageNames, parameterTypeNames, returnTypePackageName, returnTypeName, completionName, modifiers, completionStart, completionEnd);\r", "+public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, char[][] parameterNames, char[] returnTypePackageName, char[] returnTypeName, char[] completionName, int modifiers, int completionStart, int completionEnd) {\r", "+\tthis.clientRequestor.acceptMethod(declaringTypePackageName, declaringTypeName, selector, parameterPackageNames, parameterTypeNames, parameterNames, returnTypePackageName, returnTypeName, completionName, modifiers, completionStart, completionEnd);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "276fb1fd793b1e5305179bd743345470", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/UnresolvedReferenceNameFinder.java", "commitBeforeChange": "1fe69d52230e67687b32b072c6843ac0b930c0b8", "commitAfterChange": "6b2eaccbd1d9579997548e9877abcafa55f36650", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic void find(char[] startWith, AbstractMethodDeclaration methodDeclaration, int from, UnresolvedReferenceNameRequestor nameRequestor)", "signatureAfterChange": " \t \tpublic void find( \t\t\tchar[] startWith, \t\t\tAbstractMethodDeclaration methodDeclaration, \t\t\tint from, \t\t\tchar[][] discouragedNames, \t\t\tUnresolvedReferenceNameRequestor nameRequestor)", "diff": ["-\tpublic void find(char[] startWith, AbstractMethodDeclaration methodDeclaration, int from, UnresolvedReferenceNameRequestor nameRequestor) {", "-\t\tMethodDeclaration fakeMethod = this.findAfter(startWith, methodDeclaration.scope, from, methodDeclaration.bodyEnd, MAX_LINE_COUNT, false, nameRequestor);", "+\tpublic void find(", "+\t\t\tchar[] startWith,", "+\t\t\tAbstractMethodDeclaration methodDeclaration,", "+\t\t\tint from,", "+\t\t\tchar[][] discouragedNames,", "+\t\t\tUnresolvedReferenceNameRequestor nameRequestor) {", "+\t\tMethodDeclaration fakeMethod = ", "+\t\t\tthis.findAfter(startWith, methodDeclaration.scope, from, methodDeclaration.bodyEnd, MAX_LINE_COUNT, false, discouragedNames, nameRequestor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38d8f1e5e7c2dfd0e17ab3c577adf579", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType)", "signatureAfterChange": " TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType, char[][][] missingTypeNames)", "diff": ["-", "-TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType) {", "+TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType, char[][][] missingTypeNames) {", "-\t\tbinding = getTypeFromConstantPoolName(signature, start + 1, end, isParameterized); // skip leading 'L' or 'T'", "+\t\tbinding = getTypeFromConstantPoolName(signature, start + 1, end, isParameterized, missingTypeNames); // skip leading 'L' or 'T'"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d8e2d60f28bc8f79b8f07f398d81ce7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " private TypeVariableBinding[] createTypeVariables(SignatureWrapper wrapper, boolean assignVariables)", "signatureAfterChange": " private TypeVariableBinding[] createTypeVariables(SignatureWrapper wrapper, boolean assignVariables, char[][][] missingTypeNames)", "diff": ["-private TypeVariableBinding[] createTypeVariables(SignatureWrapper wrapper, boolean assignVariables) {", "+private TypeVariableBinding[] createTypeVariables(SignatureWrapper wrapper, boolean assignVariables, char[][][] missingTypeNames) {", "-\t\tinitializeTypeVariable(result[i], result, wrapper);", "+\t\tinitializeTypeVariable(result[i], result, wrapper, missingTypeNames);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6163fec80c5bf6e4fec79fcbc76f84b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " private TypeBinding[] getTypeArgumentsFromSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType, ReferenceBinding genericType)", "signatureAfterChange": "  private TypeBinding[] getTypeArgumentsFromSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType, ReferenceBinding genericType, char[][][] missingTypeNames)", "diff": ["-private TypeBinding[] getTypeArgumentsFromSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType, ReferenceBinding genericType) {", "+", "+private TypeBinding[] getTypeArgumentsFromSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType, ReferenceBinding genericType, char[][][] missingTypeNames) {", "-\t\targs.add(getTypeFromVariantTypeSignature(wrapper, staticVariables, enclosingType, genericType, rank++));", "+\t\targs.add(getTypeFromVariantTypeSignature(wrapper, staticVariables, enclosingType, genericType, rank++, missingTypeNames));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a1c3e22c4e39b734281f27384a0bbb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static AnnotationBinding[] createAnnotations(IBinaryAnnotation[] annotationInfos, LookupEnvironment env)", "signatureAfterChange": " public static AnnotationBinding[] createAnnotations(IBinaryAnnotation[] annotationInfos, LookupEnvironment env, char[][][] missingTypeNames)", "diff": ["-public static AnnotationBinding[] createAnnotations(IBinaryAnnotation[] annotationInfos, LookupEnvironment env) {", "+public static AnnotationBinding[] createAnnotations(IBinaryAnnotation[] annotationInfos, LookupEnvironment env, char[][][] missingTypeNames) {", "-\t\tresult[i] = createAnnotation(annotationInfos[i], env);", "+\t\tresult[i] = createAnnotation(annotationInfos[i], env, missingTypeNames);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78408e09463ec612b03515ea92beab47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/UnresolvedReferenceNameFinder.java", "commitBeforeChange": "1fe69d52230e67687b32b072c6843ac0b930c0b8", "commitAfterChange": "6b2eaccbd1d9579997548e9877abcafa55f36650", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void findAfter(char[] startWith, Scope scope, ClassScope classScope, int from, int to, UnresolvedReferenceNameRequestor nameRequestor)", "signatureAfterChange": " \t \tpublic void findAfter( \t\t\tchar[] startWith, \t\t\tScope scope, \t\t\tClassScope classScope, \t\t\tint from, \t\t\tint to, \t\t\tchar[][] discouragedNames, \t\t\tUnresolvedReferenceNameRequestor nameRequestor)", "diff": ["-\tpublic void findAfter(char[] startWith, Scope scope, ClassScope classScope, int from, int to, UnresolvedReferenceNameRequestor nameRequestor) {", "-\t\tMethodDeclaration fakeMethod = this.findAfter(startWith, scope, from, to, MAX_LINE_COUNT / 2, true, nameRequestor);", "+\tpublic void findAfter(", "+\t\t\tchar[] startWith,", "+\t\t\tScope scope,", "+\t\t\tClassScope classScope,", "+\t\t\tint from,", "+\t\t\tint to,", "+\t\t\tchar[][] discouragedNames,", "+\t\t\tUnresolvedReferenceNameRequestor nameRequestor) {", "+\t\tMethodDeclaration fakeMethod =", "+\t\t\tthis.findAfter(startWith, scope, from, to, MAX_LINE_COUNT / 2, true, discouragedNames, nameRequestor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d83187744c1d1c77e7a468d239849ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/UnresolvedReferenceNameFinder.java", "commitBeforeChange": "1fe69d52230e67687b32b072c6843ac0b930c0b8", "commitAfterChange": "6b2eaccbd1d9579997548e9877abcafa55f36650", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic void find(char[] startWith, Initializer initializer, ClassScope scope, int from, UnresolvedReferenceNameRequestor nameRequestor)", "signatureAfterChange": " \t \tpublic void find( \t\t\tchar[] startWith, \t\t\tInitializer initializer, \t\t\tClassScope scope, \t\t\tint from, \t\t\tchar[][] discouragedNames, \t\t\tUnresolvedReferenceNameRequestor nameRequestor)", "diff": ["-\tpublic void find(char[] startWith, Initializer initializer, ClassScope scope, int from, UnresolvedReferenceNameRequestor nameRequestor) {", "-\t\tMethodDeclaration fakeMethod = this.findAfter(startWith, scope, from, initializer.bodyEnd, MAX_LINE_COUNT, false, nameRequestor);", "+\tpublic void find(", "+\t\t\tchar[] startWith,", "+\t\t\tInitializer initializer,", "+\t\t\tClassScope scope,", "+\t\t\tint from,", "+\t\t\tchar[][] discouragedNames,", "+\t\t\tUnresolvedReferenceNameRequestor nameRequestor) {", "+\t\tMethodDeclaration fakeMethod = ", "+\t\t\tthis.findAfter(startWith, scope, from, initializer.bodyEnd, MAX_LINE_COUNT, false, discouragedNames, nameRequestor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e7f842d53f9b36f5acfa57fde2dd315", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AdditionalTypeCollection.java", "commitBeforeChange": "c4112ab397da10b85cbb2a3f081c4c91ed7c7975", "commitAfterChange": "2077df1da6fa132fd5beb7d042b102e760cf8cbf", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  protected AdditionalTypeCollection(char[][] definedTypeNames, char[][][] qualifiedReferences, char[][] simpleNameReferences)", "signatureAfterChange": "  protected AdditionalTypeCollection(char[][] definedTypeNames, char[][][] qualifiedReferences, char[][] simpleNameReferences, char[][] rootReferences)", "diff": ["-protected AdditionalTypeCollection(char[][] definedTypeNames, char[][][] qualifiedReferences, char[][] simpleNameReferences) {", "-\tsuper(qualifiedReferences, simpleNameReferences);", "+protected AdditionalTypeCollection(char[][] definedTypeNames, char[][][] qualifiedReferences, char[][] simpleNameReferences, char[][] rootReferences) {", "+\tsuper(qualifiedReferences, simpleNameReferences, rootReferences);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b25d9400c4c25376a7f7689f6176a3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "9d8b73554095c311a209be1a1d5aa92bb30583eb", "commitAfterChange": "990424c900c7463d4257bff26a1ccc6812106204", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void suggestFieldNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, int modifiers, char[][] excludedNames, INamingRequestor requestor)", "signatureAfterChange": " \tpublic static void suggestFieldNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, int modifiers, char[] internalPrefix, char[][] excludedNames, INamingRequestor requestor)", "diff": ["-\tpublic static void suggestFieldNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, int modifiers, char[][] excludedNames, INamingRequestor requestor) {", "+\tpublic static void suggestFieldNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, int modifiers, char[] internalPrefix, char[][] excludedNames, INamingRequestor requestor) {", "+\t\t\tinternalPrefix,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6203a802be623776792cf40aa414424", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "9d8b73554095c311a209be1a1d5aa92bb30583eb", "commitAfterChange": "990424c900c7463d4257bff26a1ccc6812106204", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static void suggestArgumentNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, char[][] excludedNames, INamingRequestor requestor)", "signatureAfterChange": " \tpublic static void suggestArgumentNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, char[] internalPrefix, char[][] excludedNames, INamingRequestor requestor)", "diff": ["-\tpublic static void suggestArgumentNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, char[][] excludedNames, INamingRequestor requestor) {", "+\tpublic static void suggestArgumentNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, char[] internalPrefix, char[][] excludedNames, INamingRequestor requestor) {", "+\t\t\tinternalPrefix,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e87f1a6bed9c1921eda0839b08893494", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "3fea0bd3d01827a0628763911bb538bc75a5f8bd", "commitAfterChange": "267a82506dfcd2b4938ade544a2160c1561cce40", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  \tprivate void disassembleTypeMembers(IClassFileReader classFileReader, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": "  \tprivate void disassembleTypeMembers(IClassFileReader classFileReader, char[] className, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["-\tprivate void disassembleTypeMembers(IClassFileReader classFileReader, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {", "+\tprivate void disassembleTypeMembers(IClassFileReader classFileReader, char[] className, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {", "-\t\t\tdisassemble(classFileReader, methods[i], buffer, lineSeparator, tabNumber, mode);", "+\t\t\tdisassemble(classFileReader, className, methods[i], buffer, lineSeparator, tabNumber, mode);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f172809b131db0ae1a91f2704986cb51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "db331d5badcb0b35069c87387ccad89f9c226a52", "commitAfterChange": "30b862416cba759ca39b029e0f535018291e11dc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private static boolean canSeeFocus(IJavaElement[] focuses, JavaProject javaProject)", "signatureAfterChange": " private static boolean canSeeFocus(IJavaElement[] focuses, JavaProject javaProject, char[][] focusQualifiedName)", "diff": ["-private static boolean canSeeFocus(IJavaElement[] focuses, JavaProject javaProject) {", "+private static boolean canSeeFocus(IJavaElement[] focuses, JavaProject javaProject, char[][] focusQualifiedName) {", "-\t\tif (canSeeFocus(focuses[i], javaProject)) return true;", "+\t\tif (canSeeFocus(focuses[i], javaProject, focusQualifiedName)) return true;"]}], "num": 59884}
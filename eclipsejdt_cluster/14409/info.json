{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2357c107ae581de0be11aed7cbe8970b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e1d513a428083a1576429c58ad4a08a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTypeHierarchyTests.java", "commitBeforeChange": "4119a65befb0f1b826133c8b40790cea36510774", "commitAfterChange": "199c84f2cae998bf19dec5ba0cb5f860d990b3fa", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void testPerfClassWithPotentialSubinterfaces() throws CoreException", "signatureAfterChange": " \tpublic void testPerfClassWithPotentialSubinterfaces() throws CoreException", "diff": ["-\t\tIType type = \tunit.getType(\"TemplateVariableResolver\");", "-\t\ttype.newTypeHierarchy(null);", "+\t\tIType type = unit.getType(\"TemplateVariableResolver\");", "+\t\tfor (int i=0; i<WARMUP_COUNT; i++) {", "+\t\t\ttype.newTypeHierarchy(null);", "+\t\t}", "+\t\t\trunGc();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d286e8e854d762e38e782b85fbfbbc84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java", "commitBeforeChange": "f15f3a4daa4f7cbf363475bdb20d4707912f834f", "commitAfterChange": "1e2211eded7d5ae87dfcf507bb00676a5a81d8e9", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void testPerfParserOneFile() throws InvalidInputException, IOException", "signatureAfterChange": " \tpublic void testPerfParserOneFile() throws InvalidInputException, IOException", "diff": ["-", "-\t\t// Note this test is not a finger print test, so we don't want to use tagAsGlobalSummary(...)", "-\t\ttagAsSummary(\"Parser\", Dimension.CPU_TIME);", "+\t\t// Do no longer print result in performance fingerprint", "+\t\ttagAsSummary(\"Compile>Parse>Src:parser>Options:Default\", Dimension.CPU_TIME, true); // put in fingerprint", "-\t\tparseFile(targetWorkspacePath+\"/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java\", PARSE_REPEAT);", "+\t\tfor (int i=0; i<MEASURES_COUNT; i++) {", "+\t\t\tparseFile(targetWorkspacePath+\"/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java\", ITERATIONS_COUNT*6);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebad303ba5a7dd27780a2591a7126d58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceModelTests.java", "commitBeforeChange": "4119a65befb0f1b826133c8b40790cea36510774", "commitAfterChange": "199c84f2cae998bf19dec5ba0cb5f860d990b3fa", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void testSeekPackageFragments() throws CoreException", "signatureAfterChange": " public void testSeekPackageFragments() throws CoreException", "diff": ["-\tgetNameLookup(BIG_PROJECT).seekPackageFragments(\"org.eclipse.jdt.core.tests78.performance5\", false/*not partial match*/, requestor);", "+\tfor (int i=0; i<WARMUP_COUNT; i++) {", "+\t\tgetNameLookup(BIG_PROJECT).seekPackageFragments(\"org.eclipse.jdt.core.tests78.performance5\", false/*not partial match*/, requestor);", "+\t}", "-\t\t\tgetNameLookup(BIG_PROJECT).seekPackageFragments(\"org.eclipse.jdt.core.tests\" + j + \"0.performance\" + j, false/*not partial match*/, requestor);", "+\t\t\tgetNameLookup(BIG_PROJECT).seekPackageFragments(\"org.eclipse.jdt.core.tests\" + i + \"0.performance\" + i, false/*not partial match*/, requestor);"]}], "num": 14409}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0dc803a438d3aad4a2fafd4c5fd48509", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12b0a3f4eec2e1df8e851764a5f7f2d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "43f3a189f4f6b7c529ad1da65b2b4f283b06b3dc", "commitAfterChange": "191f90d8b8e3d032d6a88890167c13d9311990d0", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " private TypeBinding findDefaultNullness(MethodBinding methodBinding, LookupEnvironment environment)", "signatureAfterChange": " private TypeBinding findDefaultNullness(Scope currentScope, LookupEnvironment environment)", "diff": ["-private TypeBinding findDefaultNullness(MethodBinding methodBinding, LookupEnvironment environment) {", "+private TypeBinding findDefaultNullness(Scope currentScope, LookupEnvironment environment) {", "-\t// method", "-\tTypeBinding annotationBinding = environment.getNullAnnotationBindingFromDefault(methodBinding.tagBits, true/*resolve*/);", "-\tif (annotationBinding != null)", "-\t\treturn annotationBinding;", "-", "-\t// type", "-\tReferenceBinding type = methodBinding.declaringClass;", "-\tReferenceBinding currentType = type;", "-\twhile (currentType instanceof SourceTypeBinding) {", "-\t\tannotationBinding = ((SourceTypeBinding) currentType).getNullnessDefaultAnnotation();", "-\t\tif (annotationBinding != null)", "-\t\t\treturn annotationBinding;", "-\t\tif (currentType.isLocalType()) {", "-\t\t\t// if direct enclosing is a method travel that way:", "-\t\t\tMethodBinding enclosingMethod = ((LocalTypeBinding)currentType).enclosingMethod;", "-\t\t\tif (enclosingMethod != null)", "-\t\t\t\treturn findDefaultNullness(enclosingMethod, environment);", "+\tSourceTypeBinding currentType = null;", "+\tTypeBinding annotationBinding;", "+\twhile (currentScope != null) {", "+\t\tswitch (currentScope.kind) {", "+\t\t\tcase Scope.METHOD_SCOPE:", "+\t\t\t\tAbstractMethodDeclaration referenceMethod = ((MethodScope)currentScope).referenceMethod();", "+\t\t\t\tif (referenceMethod != null && referenceMethod.binding != null) {", "+\t\t\t\t\tannotationBinding = environment.getNullAnnotationBindingFromDefault(referenceMethod.binding.tagBits, true/*resolve*/);", "+\t\t\t\t\tif (annotationBinding != null)", "+\t\t\t\t\t\treturn annotationBinding;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Scope.CLASS_SCOPE:", "+\t\t\t\tcurrentType = ((ClassScope)currentScope).referenceContext.binding;", "+\t\t\t\tif (currentType != null) {", "+\t\t\t\t\tannotationBinding = currentType.getNullnessDefaultAnnotation();", "+\t\t\t\t\tif (annotationBinding != null)", "+\t\t\t\t\t\treturn annotationBinding;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "-\t\tcurrentType = currentType.enclosingType();", "+\t\tcurrentScope = currentScope.parent;", "-\tannotationBinding = type.getPackage().getNullnessDefaultAnnotation(this.scope);", "-\tif (annotationBinding != null)", "-\t\treturn annotationBinding;", "+\tif (currentType != null) {", "+\t\tannotationBinding = currentType.getPackage().getNullnessDefaultAnnotation(this.scope);", "+\t\tif (annotationBinding != null)", "+\t\t\treturn annotationBinding;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88c1fc5bdbb54594efcf7df66077a184", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "e0e6245d2f5b446cd8eba278aee2ec57c56c32e6", "commitAfterChange": "b42787861f816a2d5e1ca0d96a18df1cf4233d07", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic static CompilationUnitDeclaration resolve( \t\tchar[] source, \t\tchar[][] packageName, \t\tString unitName, \t\tIJavaProject javaProject, \t\tIAbstractSyntaxTreeVisitor visitor) \t\tthrows JavaModelException", "signatureAfterChange": "  \tpublic static CompilationUnitDeclaration resolve( \t\tICompilationUnit unitElement, \t\tNodeSearcher nodeSearcher) \t\tthrows JavaModelException", "diff": ["+", "+\tpublic static CompilationUnitDeclaration resolve(", "+\t\tICompilationUnit unitElement,", "+\t\tNodeSearcher nodeSearcher)", "+\t\tthrows JavaModelException {", "+", "+\t\tCompilationUnitDeclaration unit = null;", "+\t\ttry {", "+\t\t\tchar[] fileName = unitElement.getElementName().toCharArray();", "+\t\t\tIJavaProject project = unitElement.getJavaProject();", "+\t\t\tCompilationUnitResolver compilationUnitVisitor =", "+\t\t\t\tnew CompilationUnitResolver(", "+\t\t\t\t\tgetNameEnvironment(unitElement),", "+\t\t\t\t\tgetHandlingPolicy(),", "+\t\t\t\t\tproject.getOptions(true),", "+\t\t\t\t\tgetRequestor(),", "+\t\t\t\t\tnew DefaultProblemFactory());", "+\t", "+\t\t\tString encoding = project.getOption(JavaCore.CORE_ENCODING, true);", "+\t", "+\t\t\tIPackageFragment packageFragment = (IPackageFragment)unitElement.getAncestor(IJavaElement.PACKAGE_FRAGMENT);", "+\t\t\tchar[][] expectedPackageName = null;", "+\t\t\tif (packageFragment != null){", "+\t\t\t\texpectedPackageName = CharOperation.splitOn('.', packageFragment.getElementName().toCharArray());", "+\t\t\t}", "+\t\t", "+\t\t\tunit = compilationUnitVisitor.resolve(", "+\t\t\t\tnew BasicCompilationUnit(", "+\t\t\t\t\tunitElement.getSource().toCharArray(),", "+\t\t\t\t\texpectedPackageName,", "+\t\t\t\t\tnew String(fileName),", "+\t\t\t\t\tencoding),", "+\t\t\t\tnodeSearcher,", "+\t\t\t\ttrue, // method verification", "+\t\t\t\ttrue, // analyze code", "+\t\t\t\ttrue); // generate code", "-\t\tIJavaProject javaProject,", "-\t\tIAbstractSyntaxTreeVisitor visitor)", "-\t\t\t\t\ttrue); // generate code", "-\t\t\treportProblems(unit, visitor);\t\t\t\t\t"]}], "num": 36318}
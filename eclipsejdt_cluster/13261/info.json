{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e5efb314da4f4236aa581f44ac6358a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "583d5d54a4bb96d96c200aabcdcd0e19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "c9df47e6bc4127d80d1e16ea8353f464e792fda3", "commitAfterChange": "514d8e9afb885d3be64fa67a03a4dd281867840f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tsynchronized IMethodBinding getMethodBinding(org.eclipse.jdt.internal.compiler.lookup.MethodBinding methodBinding)", "signatureAfterChange": " \tsynchronized IMethodBinding getMethodBinding(org.eclipse.jdt.internal.compiler.lookup.MethodBinding methodBinding)", "diff": ["+ \t\tif (methodBinding != null && !methodBinding.isValidBinding()) {", "+\t\t\torg.eclipse.jdt.internal.compiler.lookup.ProblemMethodBinding problemMethodBinding =", "+\t\t\t\t(org.eclipse.jdt.internal.compiler.lookup.ProblemMethodBinding) methodBinding;", "+\t\t\tmethodBinding = problemMethodBinding.closestMatch;", "+ \t\t}", "+", "-\t\t\tif (methodBinding.isValidBinding()) {", "-\t\t\t\tIMethodBinding binding = (IMethodBinding) this.bindingTables.compilerBindingsToASTBindings.get(methodBinding);", "-\t\t\t\tif (binding != null) {", "-\t\t\t\t\treturn binding;", "-\t\t\t\t}", "-\t\t\t\tbinding = new MethodBinding(this, methodBinding);", "-\t\t\t\tthis.bindingTables.compilerBindingsToASTBindings.put(methodBinding, binding);", "+\t\t\tIMethodBinding binding = (IMethodBinding) this.bindingTables.compilerBindingsToASTBindings.get(methodBinding);", "+\t\t\tif (binding != null) {", "-\t\t\t} else {", "-\t\t\t\t/*", "-\t\t\t\t * http://dev.eclipse.org/bugs/show_bug.cgi?id=23597", "-\t\t\t\t */", "-\t\t\t\tswitch(methodBinding.problemId()) {", "-\t\t\t\t\tcase ProblemReasons.NotVisible : ", "-\t\t\t\t\tcase ProblemReasons.NonStaticReferenceInStaticContext :", "-\t\t\t\t\tcase ProblemReasons.NonStaticReferenceInConstructorInvocation :", "-\t\t\t\t\t\tReferenceBinding declaringClass = methodBinding.declaringClass;", "-\t\t\t\t\t\tif (declaringClass != null) {", "-\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding exactBinding = declaringClass.getExactMethod(methodBinding.selector, methodBinding.parameters, null);", "-\t\t\t\t\t\t\tif (exactBinding != null) {", "-\t\t\t\t\t\t\t\tIMethodBinding binding = (IMethodBinding) this.bindingTables.compilerBindingsToASTBindings.get(exactBinding);", "-\t\t\t\t\t\t\t\tif (binding != null) {", "-\t\t\t\t\t\t\t\t\treturn binding;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbinding = new MethodBinding(this, exactBinding);", "-\t\t\t\t\t\t\t\tthis.bindingTables.compilerBindingsToASTBindings.put(exactBinding, binding);", "-\t\t\t\t\t\t\t\treturn binding;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "+\t\t\tbinding = new MethodBinding(this, methodBinding);", "+\t\t\tthis.bindingTables.compilerBindingsToASTBindings.put(methodBinding, binding);", "+\t\t\treturn binding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b66f26628a79273853101a2406cd29f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "6e6f51aebf98352a0ce0c363fefcb4659f1b5e8a", "commitAfterChange": "2a6dae5f036d3d2969c0b8ba36abf75c33e3e841", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": " public void generateSyntheticBodyForMethodAccess(SyntheticMethodBinding accessBinding)", "signatureAfterChange": " public void generateSyntheticBodyForMethodAccess(SyntheticMethodBinding accessMethod)", "diff": ["-public void generateSyntheticBodyForMethodAccess(SyntheticMethodBinding accessBinding) {", "+public void generateSyntheticBodyForMethodAccess(SyntheticMethodBinding accessMethod) {", "-\tinitializeMaxLocals(accessBinding);", "-\tMethodBinding methodBinding = accessBinding.targetMethod;", "-\tTypeBinding[] parameters = methodBinding.parameters;", "+\tinitializeMaxLocals(accessMethod);", "+\tMethodBinding targetMethod = accessMethod.targetMethod;", "+\tTypeBinding[] parameters = targetMethod.parameters;", "-\tTypeBinding[] arguments = accessBinding.kind == SyntheticMethodBinding.BridgeMethod ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t? accessBinding.parameters", "+\tTypeBinding[] arguments = accessMethod.kind == SyntheticMethodBinding.BridgeMethod ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t? accessMethod.parameters", "-\tif (methodBinding.isStatic())", "+\tif (targetMethod.isStatic())", "-\tTypeBinding type;", "-\tif (methodBinding.isStatic())", "-\t\tthis.invokestatic(methodBinding);", "+\tif (targetMethod.isStatic())", "+\t\tthis.invokestatic(targetMethod);", "-\t\tif (methodBinding.isConstructor()", "-\t\t\t|| methodBinding.isPrivate()", "+\t\tif (targetMethod.isConstructor()", "+\t\t\t|| targetMethod.isPrivate()", "-\t\t\t|| accessBinding.kind == SyntheticMethodBinding.SuperMethodAccess){", "-\t\t\tthis.invokespecial(methodBinding);", "+\t\t\t|| accessMethod.kind == SyntheticMethodBinding.SuperMethodAccess){", "+\t\t\tthis.invokespecial(targetMethod);", "-\t\t\tif (methodBinding.declaringClass.isInterface()) { // interface or annotation type", "-\t\t\t\tthis.invokeinterface(methodBinding);", "+\t\t\tif (targetMethod.declaringClass.isInterface()) { // interface or annotation type", "+\t\t\t\tthis.invokeinterface(targetMethod);", "-\t\t\t\tthis.invokevirtual(methodBinding);", "+\t\t\t\tthis.invokevirtual(targetMethod);", "-\tif ((type = methodBinding.returnType).isBaseType())", "-\t\tif (type == VoidBinding)", "+\tswitch (targetMethod.returnType.id) {", "+\t\tcase T_void :", "-\t\telse", "-\t\t\tif (type == IntBinding)", "-\t\t\t\tthis.ireturn();", "-\t\t\telse", "-\t\t\t\tif (type == FloatBinding)", "-\t\t\t\t\tthis.freturn();", "-\t\t\t\telse", "-\t\t\t\t\tif (type == LongBinding)", "-\t\t\t\t\t\tthis.lreturn();", "-\t\t\t\t\telse", "-\t\t\t\t\t\tif (type == DoubleBinding)", "-\t\t\t\t\t\t\tthis.dreturn();", "-\t\t\t\t\t\telse", "-\t\t\t\t\t\t\tthis.ireturn();", "-\telse", "-\t\tthis.areturn();", "+\t\t\tbreak;", "+\t\tcase T_boolean :", "+\t\tcase T_byte :", "+\t\tcase T_char :", "+\t\tcase T_short :", "+\t\tcase T_int :", "+\t\t\tthis.ireturn();", "+\t\t\tbreak;", "+\t\tcase T_long :", "+\t\t\tthis.lreturn();", "+\t\t\tbreak;", "+\t\tcase T_float :", "+\t\t\tthis.freturn();", "+\t\t\tbreak;", "+\t\tcase T_double :", "+\t\t\tthis.dreturn();", "+\t\t\tbreak;", "+\t\tdefault :", "+\t\t\tif (targetMethod.returnType != accessMethod.returnType)", "+\t\t\t\tthis.checkcast(accessMethod.returnType); // for bridge methods", "+\t\t\tthis.areturn();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccc36d6557b3127e87b1a1251b80eeec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "420aa82752ec3e926a634ee4daaacddae8a8ab80", "commitAfterChange": "f68c3205ee145ec7c1c029e73701ee13aaf91bec", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected IMethodBinding getMethodBinding(org.eclipse.jdt.internal.compiler.lookup.MethodBinding methodBinding)", "signatureAfterChange": " \tprotected IMethodBinding getMethodBinding(org.eclipse.jdt.internal.compiler.lookup.MethodBinding methodBinding)", "diff": ["-\t\tif (methodBinding != null && !methodBinding.isValidBinding()) {", "-\t\t\t/*", "-\t\t\t * http://dev.eclipse.org/bugs/show_bug.cgi?id=23597\r\t\t\t */", "-\t\t\tswitch(methodBinding.problemId()) {", "-\t\t\t\tcase ProblemReasons.NotVisible : ", "-\t\t\t\tcase ProblemReasons.NonStaticReferenceInStaticContext :", "-\t\t\t\t\tReferenceBinding declaringClass = methodBinding.declaringClass;", "-\t\t\t\t\tif (declaringClass != null) {", "-\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding exactBinding = declaringClass.getExactMethod(methodBinding.selector, methodBinding.parameters);", "-\t\t\t\t\t\tif (exactBinding != null) {", "-\t\t\t\t\t\t\tIMethodBinding binding = (IMethodBinding) this.compilerBindingsToASTBindings.get(methodBinding);", "-\t\t\t\t\t\t\tif (binding != null) {", "+\t\tif (methodBinding != null) {", "+\t\t\tif (methodBinding.isValidBinding()) {", "+\t\t\t\tIMethodBinding binding = (IMethodBinding) this.compilerBindingsToASTBindings.get(methodBinding);", "+\t\t\t\tif (binding != null) {", "+\t\t\t\t\treturn binding;", "+\t\t\t\t}", "+\t\t\t\tbinding = new MethodBinding(this, methodBinding);", "+\t\t\t\tthis.compilerBindingsToASTBindings.put(methodBinding, binding);", "+\t\t\t\treturn binding;", "+\t\t\t} else {", "+\t\t\t\t/*", "+\t\t\t\t * http://dev.eclipse.org/bugs/show_bug.cgi?id=23597\r\t\t\t\t */", "+\t\t\t\tswitch(methodBinding.problemId()) {", "+\t\t\t\t\tcase ProblemReasons.NotVisible : ", "+\t\t\t\t\tcase ProblemReasons.NonStaticReferenceInStaticContext :", "+\t\t\t\t\t\tReferenceBinding declaringClass = methodBinding.declaringClass;", "+\t\t\t\t\t\tif (declaringClass != null) {", "+\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding exactBinding = declaringClass.getExactMethod(methodBinding.selector, methodBinding.parameters);", "+\t\t\t\t\t\t\tif (exactBinding != null) {", "+\t\t\t\t\t\t\t\tIMethodBinding binding = (IMethodBinding) this.compilerBindingsToASTBindings.get(exactBinding);", "+\t\t\t\t\t\t\t\tif (binding != null) {", "+\t\t\t\t\t\t\t\t\treturn binding;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbinding = new MethodBinding(this, exactBinding);", "+\t\t\t\t\t\t\t\tthis.compilerBindingsToASTBindings.put(exactBinding, binding);", "-\t\t\t\t\t\t\tbinding = new MethodBinding(this, exactBinding);", "-\t\t\t\t\t\t\tthis.compilerBindingsToASTBindings.put(methodBinding, binding);", "-\t\t\t\t\t\t\treturn binding;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t\tif (methodBinding == null || !methodBinding.isValidBinding()) {", "-\t\t\treturn null;", "-\t\t}", "-\t\tIMethodBinding binding = (IMethodBinding) this.compilerBindingsToASTBindings.get(methodBinding);", "-\t\tif (binding != null) {", "-\t\t\treturn binding;", "-\t\t}", "-\t\tbinding = new MethodBinding(this, methodBinding);", "-\t\tthis.compilerBindingsToASTBindings.put(methodBinding, binding);", "-\t\treturn binding;", "+\t\treturn null;"]}], "num": 13261}
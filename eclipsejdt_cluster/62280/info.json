{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47ad7faa0c6664cf1f295061265cad39", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16ce01c0b4154df84b6f2c7bae5da968", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "6ee69a27bb90b4501869adce2a7020b0fadb9402", "commitAfterChange": "886d0f0c1c856616883aceae38186164d207f2a8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate boolean parseHref() throws InvalidInputException", "signatureAfterChange": " \tprivate boolean parseHref() throws InvalidInputException", "diff": ["-\t\t\t\tthis.currentTokenType = -1; // do not update line end", "+\t\t\t\tconsumeToken();", "-\t\t\t\t\t\tthis.currentTokenType = -1; // do not update line end", "+\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\tthis.currentTokenType = -1; // do not update line end", "+\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\twhile (this.index <= this.lineEnd && readToken() != TerminalTokens.TokenNameGREATER) {", "+\t\t\t\t\t\t\twhile (readToken() != TerminalTokens.TokenNameGREATER) {", "+\t\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.scanner.eofPosition || this.scanner.currentCharacter == '@' ||", "+\t\t\t\t\t\t\t\t\t(this.inlineTagStarted && this.scanner.currentCharacter == '}')) {", "+\t\t\t\t\t\t\t\t\t// Reset position: we want to rescan last token", "+\t\t\t\t\t\t\t\t\tthis.index = this.tokenPreviousPosition;", "+\t\t\t\t\t\t\t\t\tthis.scanner.currentPosition = this.tokenPreviousPosition;", "+\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1;", "+\t\t\t\t\t\t\t\t\t// Signal syntax error", "+\t\t\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "+\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.scanner.eofPosition || this.scanner.currentCharacter == '@') {", "+\t\t\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.scanner.eofPosition || this.scanner.currentCharacter == '@' ||", "+\t\t\t\t\t\t\t\t\t\t(this.inlineTagStarted && this.scanner.currentCharacter == '}')) {", "-\t\t\t\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE && this.sourceParser != null)", "-\t\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "+\t\t\t\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "+\t\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tthis.currentTokenType = -1; // do not update line end", "+\t\t\t\t\t\t\t\tconsumeToken();", "-\t\tif (this.tagValue != TAG_VALUE_VALUE && this.sourceParser != null)", "-\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "+\t\tif (this.tagValue != TAG_VALUE_VALUE) { // do not report error for @value tag, this will be done after...", "+\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72069da6f53f263cb3fbea00bb8f4d85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "1784048e951cac8e5c6590cc5827817757e6384e", "commitAfterChange": "4a48abb3b4027036bdeac61104059b6c83710144", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate boolean parseHref() throws InvalidInputException", "signatureAfterChange": " \tprivate boolean parseHref() throws InvalidInputException", "diff": ["-\t\t//int end = this.scanner.getCurrentTokenEndPosition();", "-\t\tif (readTokenAndConsume() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\t//end = this.index-1;", "+\t\tif (readToken() == TerminalTokens.TokenNameIdentifier) {", "+\t\t\tconsumeToken();", "-\t\t\t\t\t&& readTokenAndConsume() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\t\t//end = this.index - 1;", "+\t\t\t\t\t&& readToken() == TerminalTokens.TokenNameIdentifier) {", "+\t\t\t\tconsumeToken();", "-\t\t\t\t\t\treadTokenAndConsume() == TerminalTokens.TokenNameEQUAL &&", "-\t\t\t\t\t\treadTokenAndConsume() == TerminalTokens.TokenNameStringLiteral &&", "-\t\t\t\t\t\treadTokenAndConsume() == TerminalTokens.TokenNameGREATER) {", "-\t\t\t\t\t\twhile (readTokenAndConsume() != TerminalTokens.TokenNameLESS) {", "-\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.lineEnd) {", "-\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd - 1);", "-\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (readTokenAndConsume() == TerminalTokens.TokenNameDIVIDE\t&&", "-\t\t\t\t\t\t\treadTokenAndConsume() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\t\t\t\t\t//end = this.index - 1;", "-\t\t\t\t\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), new char[]{'a'}, false)\t&&", "-\t\t\t\t\t\t\t\treadTokenAndConsume() == TerminalTokens.TokenNameGREATER) {", "-\t\t\t\t\t\t\t\t// Valid href", "-\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\treadToken() == TerminalTokens.TokenNameEQUAL) {", "+\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameStringLiteral) {", "+\t\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameGREATER) {", "+\t\t\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\t\t\twhile (readToken() != TerminalTokens.TokenNameLESS) {", "+\t\t\t\t\t\t\t\t\tif (this.source[this.index] == '\\r' || this.source[this.index] == '\\n' || this.scanner.getCurrentTokenStartPosition() > this.lineEnd) {", "+\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "+\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameDIVIDE) {", "+\t\t\t\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameIdentifier) {", "+\t\t\t\t\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\t\t\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), new char[]{'a'}, false)\t&&", "+\t\t\t\t\t\t\t\t\t\t\treadToken() == TerminalTokens.TokenNameGREATER) {", "+\t\t\t\t\t\t\t\t\t\t\tconsumeToken();", "+\t\t\t\t\t\t\t\t\t\t\t// Valid href", "+\t\t\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t// Place to change end position for error report", "-\t\t\t\t\t//end = getEndPosition();", "+\t\t\t\t\t// Do nothing as we want to keep positions for error message", "-\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd - 1);", "+\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);"]}], "num": 62280}
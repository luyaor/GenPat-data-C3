{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "793442323542a2ac2aa6cb17d0e11084", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fa7aa1b6b59986fe5df36d2b1ecb1c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "5d2ad0b940570868aeb3a33317182334e9423c29", "commitAfterChange": "0f27abdc440c19d22cca8de897116ef5e59c08c4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\tReferenceBinding qualifiedType = null;", "-\t\tfor (int i = packageBinding == null ? 0 : packageBinding.compoundName.length, max = this.tokens.length; i < max; i++) {", "+\t    for (int i = packageBinding == null ? 0 : packageBinding.compoundName.length, max = this.tokens.length; i < max; i++) {", "+\t    \tReferenceBinding enclosingType = (ReferenceBinding) this.resolvedType;", "+\t\t\tif (currentType.isStatic() && enclosingType != null && (enclosingType.isParameterizedType() || enclosingType.isGenericType())) {", "+\t\t\t\tscope.problemReporter().staticMemberOfParameterizedType(this, scope.createParameterizedType(currentType, null, enclosingType));", "+\t\t\t\treturn null;", "+\t\t\t}\t\t\t", "-\t\t\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType(currentType, argTypes, qualifiedType);", "+\t\t\t\t// check parameterizing non-static member type of raw type", "+\t\t\t\tif (!currentType.isStatic() && enclosingType != null && enclosingType.isRawType()) {", "+\t\t\t\t\tscope.problemReporter().rawMemberTypeCannotBeParameterized(", "+\t\t\t\t\t\t\tthis, scope.environment().createRawType(currentType, enclosingType), argTypes);", "+\t\t\t\t\treturn null;\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType(currentType, argTypes, enclosingType);", "-\t\t\t\tqualifiedType = parameterizedType;", "+\t\t\t\tthis.resolvedType = parameterizedType;", "-", "-\t\t\t\tif (currentType.isGenericType()) { // check raw type", "-   \t\t\t    \tqualifiedType = scope.environment().createRawType(currentType, qualifiedType); // raw type", "-   \t\t\t    } else if (qualifiedType != null && (qualifiedType.isParameterizedType() || qualifiedType.isRawType())) {", "-   \t\t\t    \tqualifiedType = scope.createParameterizedType(currentType, null, qualifiedType);", "-   \t\t\t    }", "+\t\t\t\t\t", "+   \t\t\t    if (enclosingType != null && enclosingType.isParameterizedType()) {", "+\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.createParameterizedType(currentType, null, enclosingType));", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+   \t\t\t    this.resolvedType = scope.environment().createRawType(currentType, enclosingType); // raw type", "-\t\tthis.resolvedType = qualifiedType;", "-\t\t\tthis.resolvedType = scope.createArrayType(qualifiedType, dimensions);", "+\t\t\tthis.resolvedType = scope.createArrayType(this.resolvedType, dimensions);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fe86975f1604f66746d4a7c51e16c7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "9043b6a8e4132c7e53a6fb980711e9a0982fef9b", "commitAfterChange": "416292d2f4be39d514e933551cdaebb7c7ebd8a7", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic MethodBinding findCompileTimeMethodTargeting(TypeBinding targetType, Scope scope)", "signatureAfterChange": "  \tpublic ReferenceExpression resolveExpressionExpecting(TypeBinding targetType, Scope scope)", "diff": ["-\t/** During inference: Try to find an applicable method binding without causing undesired side-effects. */", "-\tpublic MethodBinding findCompileTimeMethodTargeting(TypeBinding targetType, Scope scope) {", "-\t\tif (this.exactMethodBinding != null) {", "+\tpublic ReferenceExpression resolveExpressionExpecting(TypeBinding targetType, Scope scope) {", "+\t", "+\t\tif (this.exactMethodBinding != null) { // We may see inference variables in target type.", "-\t\t\treturn (n == k || n == k + 1) ? this.exactMethodBinding : null;", "+\t\t\treturn (n == k || n == k + 1) ? this : null;", "-\t\tMethodBinding targetMethod = this.declarationPerTargetType != null ? this.declarationPerTargetType.get(targetType) : null;", "-\t\tif (targetMethod == null) {", "-\t\t\ttargetMethod = internalResolveTentatively(targetType, scope);", "-\t\t\tregisterResult(targetType, targetMethod);", "-\t\t}", "-\t\tif (targetMethod == null || !targetMethod.isValidBinding())", "-\t\t\treturn null;", "-\t\treturn targetMethod;", "-\t}", "+\t\t", "+\t\t// We are guaranteed here that we will not see inference variables in descriptor parameters.", "+\t\tReferenceExpression copy = this.copiesPerTargetType != null ? this.copiesPerTargetType.get(targetType) : null;", "+\t\tif (copy != null)", "+\t\t\treturn copy;", "+\t\t", "+\t\t\tcopy = copy();", "+\t\t\tif (copy == null) { // should never happen even for code assist.", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tcopy.setExpressionContext(this.expressionContext);", "+\t\t\tcopy.setExpectedType(targetType);", "+\t\t\tcopy.resolveType(this.enclosingScope);", "+\t\t\tregisterCopy(targetType, copy);", "+\t\t\treturn copy.resolvedType != null && copy.resolvedType.isValidBinding() && copy.binding != null && copy.binding.isValidBinding() ? copy : null;", "+\t}"]}], "num": 18137}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4e76f31fdd7add3e3d83560a4c1e0ae5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fa9d88da894701b541d268db83b5aec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetOutputLocationOperation.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public IJavaModelStatus verify()", "signatureAfterChange": "\r public IJavaModelStatus verify()", "diff": ["-\tif (fOutputLocation == null) {\r", "-\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.NULL_PATH);\r", "-\t}\r", "-\t\r", "-\tif (fOutputLocation.isAbsolute()) {\r", "-\t\tIProject project = ((IJavaProject) fElementsToProcess[0]).getProject();\r", "-\r", "-\t\tif (project.getFullPath().isPrefixOf(fOutputLocation)) {\r", "-\t\t\t//project relative path\r", "-\t\t\tString projectName = fOutputLocation.segment(0);\r", "-\t\t\tif (!projectName.equals(fElementsToProcess[0].getElementName())) {\r", "-\t\t\t\t//a workspace relative path outside of this project\r", "-\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.PATH_OUTSIDE_PROJECT, fOutputLocation);\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DEVICE_PATH, fOutputLocation);\r", "-\t\t}\r", "-\t} else {\r", "-\t\treturn new JavaModelStatus(IJavaModelStatusConstants.RELATIVE_PATH, fOutputLocation);\r", "-\t}\r", "-\r", "-\r", "-\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "-\tboolean allowNestingInOutput = false;\r", "-\tboolean hasSource = false;\r", "-\tfor (int i = 0 ; i < classpath.length; i++) {\r", "-\t\tif (classpath[i].getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "-\t\tif (classpath[i].getPath().equals(fOutputLocation)){\r", "-\t\t\tallowNestingInOutput = true;\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t}\r", "-\tif (!hasSource) allowNestingInOutput = true; // if no source, then allowed\r", "-\r", "-\t// check all entries\r", "-\tfor (int i = 0 ; i < classpath.length; i++) {\r", "-\t\tIClasspathEntry entry = classpath[i];\r", "-\t\tIPath entryPath = entry.getPath();\r", "-\r", "-\t\t// no further check if entry coincidates with project or output location\r", "-\t\tif (entryPath.equals(projectPath)) continue;\r", "-\t\tif (entryPath.equals(fOutputLocation)) continue;\r", "-\t\t\r", "-\t\t// prevent nesting output location inside entry\r", "-\t\tif (entryPath.isPrefixOf(fOutputLocation)) {\r", "-\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, fOutputLocation);\r", "-\t\t}\r", "-\r", "-\t\t// prevent nesting entry inside output location - when distinct from project or a source folder\r", "-\t\tif (!allowNestingInOutput && fOutputLocation.isPrefixOf(entryPath)) {\r", "-\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, fOutputLocation);\r", "-\t\t}\r", "-\t}\r", "-\treturn JavaModelStatus.VERIFIED_OK;\r", "+\treturn JavaConventions.validateClasspath((IJavaProject) fElementsToProcess[0], classpath, fOutputLocation);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60be995dca3c8d5dc5901fc228a39587", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetOutputLocationOperation.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public IJavaModelStatus verify()", "signatureAfterChange": "\r public IJavaModelStatus verify()", "diff": ["-\tif (fOutputLocation == null) {\r", "-\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.NULL_PATH);\r", "-\t}\r", "-\t\r", "-\tif (fOutputLocation.isAbsolute()) {\r", "-\t\tIProject project = ((IJavaProject) fElementsToProcess[0]).getProject();\r", "-\r", "-\t\tif (project.getFullPath().isPrefixOf(fOutputLocation)) {\r", "-\t\t\t//project relative path\r", "-\t\t\tString projectName = fOutputLocation.segment(0);\r", "-\t\t\tif (!projectName.equals(fElementsToProcess[0].getElementName())) {\r", "-\t\t\t\t//a workspace relative path outside of this project\r", "-\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.PATH_OUTSIDE_PROJECT, fOutputLocation);\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DEVICE_PATH, fOutputLocation);\r", "-\t\t}\r", "-\t} else {\r", "-\t\treturn new JavaModelStatus(IJavaModelStatusConstants.RELATIVE_PATH, fOutputLocation);\r", "-\t}\r", "-\r", "-\r", "-\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "-\tboolean allowNestingInOutput = false;\r", "-\tboolean hasSource = false;\r", "-\tfor (int i = 0 ; i < classpath.length; i++) {\r", "-\t\tif (classpath[i].getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "-\t\tif (classpath[i].getPath().equals(fOutputLocation)){\r", "-\t\t\tallowNestingInOutput = true;\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t}\r", "-\tif (!hasSource) allowNestingInOutput = true; // if no source, then allowed\r", "-\r", "-\t// check all entries\r", "-\tfor (int i = 0 ; i < classpath.length; i++) {\r", "-\t\tIClasspathEntry entry = classpath[i];\r", "-\t\tIPath entryPath = entry.getPath();\r", "-\r", "-\t\t// no further check if entry coincidates with project or output location\r", "-\t\tif (entryPath.equals(projectPath)) continue;\r", "-\t\tif (entryPath.equals(fOutputLocation)) continue;\r", "-\t\t\r", "-\t\t// prevent nesting output location inside entry\r", "-\t\tif (entryPath.isPrefixOf(fOutputLocation)) {\r", "-\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, fOutputLocation);\r", "-\t\t}\r", "-\r", "-\t\t// prevent nesting entry inside output location - when distinct from project or a source folder\r", "-\t\tif (!allowNestingInOutput && fOutputLocation.isPrefixOf(entryPath)) {\r", "-\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, fOutputLocation);\r", "-\t\t}\r", "-\t}\r", "-\treturn JavaModelStatus.VERIFIED_OK;\r", "+\treturn JavaConventions.validateClasspath((IJavaProject) fElementsToProcess[0], classpath, fOutputLocation);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc6bbcdfd34736372402e8568485984f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetOutputLocationOperation.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public IJavaModelStatus verify()", "signatureAfterChange": "\r public IJavaModelStatus verify()", "diff": ["-\tif (fOutputLocation == null) {\r", "-\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.NULL_PATH);\r", "-\t}\r", "-\t\r", "-\tif (fOutputLocation.isAbsolute()) {\r", "-\t\tIProject project = ((IJavaProject) fElementsToProcess[0]).getProject();\r", "-\r", "-\t\tif (project.getFullPath().isPrefixOf(fOutputLocation)) {\r", "-\t\t\t//project relative path\r", "-\t\t\tString projectName = fOutputLocation.segment(0);\r", "-\t\t\tif (!projectName.equals(fElementsToProcess[0].getElementName())) {\r", "-\t\t\t\t//a workspace relative path outside of this project\r", "-\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.PATH_OUTSIDE_PROJECT, fOutputLocation);\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DEVICE_PATH, fOutputLocation);\r", "-\t\t}\r", "-\t} else {\r", "-\t\treturn new JavaModelStatus(IJavaModelStatusConstants.RELATIVE_PATH, fOutputLocation);\r", "-\t}\r", "-\r", "-\r", "-\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "-\tboolean allowNestingInOutput = false;\r", "-\tboolean hasSource = false;\r", "-\tfor (int i = 0 ; i < classpath.length; i++) {\r", "-\t\tif (classpath[i].getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "-\t\tif (classpath[i].getPath().equals(fOutputLocation)){\r", "-\t\t\tallowNestingInOutput = true;\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t}\r", "-\tif (!hasSource) allowNestingInOutput = true; // if no source, then allowed\r", "-\r", "-\t// check all entries\r", "-\tfor (int i = 0 ; i < classpath.length; i++) {\r", "-\t\tIClasspathEntry entry = classpath[i];\r", "-\t\tIPath entryPath = entry.getPath();\r", "-\r", "-\t\t// no further check if entry coincidates with project or output location\r", "-\t\tif (entryPath.equals(projectPath)) continue;\r", "-\t\tif (entryPath.equals(fOutputLocation)) continue;\r", "-\t\t\r", "-\t\t// prevent nesting output location inside entry\r", "-\t\tif (entryPath.isPrefixOf(fOutputLocation)) {\r", "-\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, fOutputLocation);\r", "-\t\t}\r", "-\r", "-\t\t// prevent nesting entry inside output location - when distinct from project or a source folder\r", "-\t\tif (!allowNestingInOutput && fOutputLocation.isPrefixOf(entryPath)) {\r", "-\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, fOutputLocation);\r", "-\t\t}\r", "-\t}\r", "-\treturn JavaModelStatus.VERIFIED_OK;\r", "+\treturn JavaConventions.validateClasspath((IJavaProject) fElementsToProcess[0], classpath, fOutputLocation);\r"]}], "num": 47879}
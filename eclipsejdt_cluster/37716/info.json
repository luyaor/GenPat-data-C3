{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "568ff6a583f250fa3ae2b1195c06df76", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "450ba1b116cd016ca25de76ac6ff25b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "6a44e0777af1a4632e0d20c0e9b92d35d2ad59f3", "commitAfterChange": "2ca339c139c0fe73a5bd2705f66592731098d347", "methodNumberBeforeChange": 215, "methodNumberAfterChange": 240, "signatureBeforeChange": " public void wrongSequenceOfExceptionTypesError(TryStatement statement, int under, int upper)", "signatureAfterChange": " public void wrongSequenceOfExceptionTypesError(TryStatement statement, TypeBinding exceptionType, int under, TypeBinding hidingExceptionType)", "diff": ["-public void wrongSequenceOfExceptionTypesError(TryStatement statement, int under, int upper) {", "-\t//the two catch block under and upper are in an incorrect order.", "-\t//under should be define BEFORE upper in the source", "-", "-\tTypeReference typeRef = statement.catchArguments[under].type;", "-\tthis.handle(", "-\t\tIProblem.UnreachableCatch,", "-\t\tNoArgument,", "-\t\tNoArgument,", "-\t\ttypeRef.sourceStart,", "-\t\ttypeRef.sourceEnd);", "-}", "+public void wrongSequenceOfExceptionTypesError(TryStatement statement, TypeBinding exceptionType, int under, TypeBinding hidingExceptionType) {", "+\t//the two catch block under and upper are in an incorrect order.", "+\t//under should be define BEFORE upper in the source", "+", "+\tTypeReference typeRef = statement.catchArguments[under].type;", "+\tthis.handle(", "+\t\tIProblem.InvalidCatchBlockSequence,", "+\t\tnew String[] {", "+\t\t\tnew String(exceptionType.readableName()),", "+\t\t\tnew String(hidingExceptionType.readableName()),", "+\t\t }, ", "+\t\tnew String[] {", "+\t\t\tnew String(exceptionType.shortReadableName()),", "+\t\t\tnew String(hidingExceptionType.shortReadableName()),", "+\t\t }, ", "+\t\ttypeRef.sourceStart,", "+\t\ttypeRef.sourceEnd);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd20b5e060532f509a0be88d10b8ec3a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "7aac6f03ecf70666410b0e689c91dafd6d67757a", "commitAfterChange": "465d091146b1d6997709777ea444048487da1d8d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 107, "signatureBeforeChange": " public void annotationTypeMemberDeclarationWithConstructorName(AnnotationTypeMemberDeclaration annotationTypeMemberDeclaration)", "signatureAfterChange": " public void illegalModifierForAnnotationMethod(AbstractMethodDeclaration methodDecl)", "diff": ["-public void annotationTypeMemberDeclarationWithConstructorName(AnnotationTypeMemberDeclaration annotationTypeMemberDeclaration) {", "-\tthis.handle(", "-\t\tIProblem.AnnotationButConstructorName,", "-\t\tNoArgument,", "-\t\tNoArgument,", "-\t\tannotationTypeMemberDeclaration.sourceStart,", "-\t\tannotationTypeMemberDeclaration.sourceEnd);", "-}", "+public void illegalModifierForAnnotationMethod(AbstractMethodDeclaration methodDecl) {", "+\tthis.handle(", "+\t\tIProblem.IllegalModifierForAnnotationMethod,", "+\t\tnew String[] {", "+\t\t\tnew String(methodDecl.selector),", "+\t\t\ttypesAsString(methodDecl.binding.isVarargs(), methodDecl.binding.parameters, false),", "+\t\t\tnew String(methodDecl.binding.declaringClass.readableName()),", "+\t\t},\t\t", "+\t\tnew String[] {", "+\t\t\tnew String(methodDecl.selector),", "+\t\t\ttypesAsString(methodDecl.binding.isVarargs(), methodDecl.binding.parameters, true),", "+\t\t\tnew String(methodDecl.binding.declaringClass.shortReadableName()),", "+\t\t},\t\t", "+\t\tmethodDecl.sourceStart,", "+\t\tmethodDecl.sourceEnd);", "+}"]}], "num": 37716}
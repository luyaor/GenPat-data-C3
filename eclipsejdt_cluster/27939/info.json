{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca1681c03ce5b19278a734378cfda00f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ff17ba4774de1f03d846b0cd63f9985", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "0ee327f784f1f4e34e68a84648fe26304fce751c", "commitAfterChange": "5b5d83d3544b223e577e7fddd59f42874f12eb50", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic synchronized void updateRoots(IPath containerPath, IResourceDelta containerDelta, DeltaProcessor deltaProcessor)", "signatureAfterChange": " \tpublic synchronized void updateRoots(IPath containerPath, IResourceDelta containerDelta, DeltaProcessor deltaProcessor)", "diff": ["-\t\tIterator iterator = updatedRoots.keySet().iterator();", "+\t\tIterator iterator = updatedRoots.entrySet().iterator();", "-\t\t\tIPath path = (IPath)iterator.next();", "+\t\t\tMap.Entry entry = (Map.Entry) iterator.next();", "+\t\t\tIPath path = (IPath) entry.getKey();", "-\t\t\t\tDeltaProcessor.RootInfo rootInfo = (DeltaProcessor.RootInfo)updatedRoots.get(path);", "+\t\t\t\tDeltaProcessor.RootInfo rootInfo = (DeltaProcessor.RootInfo) entry.getValue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cdd83db8fc3ce7ba8864ae991cc15c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedHierarchyBuilder.java", "commitBeforeChange": "0ee327f784f1f4e34e68a84648fe26304fce751c", "commitAfterChange": "5b5d83d3544b223e577e7fddd59f42874f12eb50", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void createTypeHierarchyBasedOnRegion(HashMap allOpenablesInRegion, IProgressMonitor monitor)", "signatureAfterChange": " private void createTypeHierarchyBasedOnRegion(HashMap allOpenablesInRegion, IProgressMonitor monitor)", "diff": ["-\tIterator javaProjects = allOpenablesInRegion.keySet().iterator();", "+\tIterator javaProjects = allOpenablesInRegion.entrySet().iterator();", "-\t\tJavaProject project = (JavaProject) javaProjects.next();", "-\t\tArrayList allOpenables = (ArrayList) allOpenablesInRegion.get(project);", "+\t\tMap.Entry entry = (Map.Entry) javaProjects.next();  ", "+\t\tJavaProject project = (JavaProject) entry.getKey();", "+\t\tArrayList allOpenables = (ArrayList) entry.getValue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba01c91b743677fab702fc4d8f972f4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ExternalFoldersManager.java", "commitBeforeChange": "9849620a7123c06f94ccff8d0f49de548184ec10", "commitAfterChange": "325363c88e9e1fa9aed89107622404d526f34581", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate synchronized ArrayList getFoldersToCleanUp(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": "  \tprivate synchronized ArrayList getFoldersToCleanUp(IProgressMonitor monitor) throws CoreException", "diff": ["-\t\tIterator iterator = knownFolders.keySet().iterator();", "+\t\tIterator iterator = knownFolders.entrySet().iterator();", "-\t\t\tIPath path = (IPath) iterator.next();", "+\t\t\tMap.Entry entry = (Map.Entry) iterator.next();", "+\t\t\tIPath path = (IPath) entry.getKey();", "-\t\t\t\tIFolder folder = (IFolder) knownFolders.get(path);", "+\t\t\t\tIFolder folder = (IFolder) entry.getValue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3231fbf2c988f05d4e86ec79cb8a65a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "0ee327f784f1f4e34e68a84648fe26304fce751c", "commitAfterChange": "5b5d83d3544b223e577e7fddd59f42874f12eb50", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "signatureAfterChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "diff": ["-\t\t\tIterator propertyNames = projectOptions.keySet().iterator();", "+\t\t\tIterator propertyNames = projectOptions.entrySet().iterator();", "-\t\t\t\tString propertyName = (String) propertyNames.next();", "-\t\t\t\tString propertyValue = (String) projectOptions.get(propertyName);", "+\t\t\t\tMap.Entry entry = (Map.Entry) propertyNames.next();", "+\t\t\t\tString propertyName = (String) entry.getKey();", "+\t\t\t\tString propertyValue = (String) entry.getValue();"]}], "num": 27939}
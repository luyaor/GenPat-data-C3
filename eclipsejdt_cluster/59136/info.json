{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1800485546882507abe356a9e1a151d8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10c74dc706d3039ea4ce37a5e406074b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "3413778e1bd5154fc1bb3b2fe41a2f5c159f06ae", "commitAfterChange": "b6700c6040587d6a407e0aa87172122e678ac070", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tprivate void disassemble(ICodeAttribute codeAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": "  \tprivate void disassemble(IAnnotationComponentValue annotationComponentValue, IConstantPool constantPool, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["+", "+\tprivate void disassemble(IAnnotationComponentValue annotationComponentValue, IConstantPool constantPool, StringBuffer buffer, String lineSeparator, int tabNumber) {", "+\t\tswitch(annotationComponentValue.getTag()) {", "+\t\t\tcase IAnnotationComponentValue.BYTE_TAG:", "+\t\t\tcase IAnnotationComponentValue.CHAR_TAG:", "+\t\t\tcase IAnnotationComponentValue.DOUBLE_TAG:", "+\t\t\tcase IAnnotationComponentValue.FLOAT_TAG:", "+\t\t\tcase IAnnotationComponentValue.INTEGER_TAG:", "+\t\t\tcase IAnnotationComponentValue.LONG_TAG:", "+\t\t\tcase IAnnotationComponentValue.SHORT_TAG:", "+\t\t\tcase IAnnotationComponentValue.BOOLEAN_TAG:", "+\t\t\tcase IAnnotationComponentValue.STRING_TAG:", "+\t\t\t\tIConstantPoolEntry constantPoolEntry = annotationComponentValue.getConstantValue();", "+\t\t\t\tString value = null;", "+\t\t\t\tswitch(constantPoolEntry.getKind()) {", "+\t\t\t\t\tcase IConstantPoolConstant.CONSTANT_Long :", "+\t\t\t\t\t\tvalue = constantPoolEntry.getLongValue() + \"L\"; //$NON-NLS-1$", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IConstantPoolConstant.CONSTANT_Float :", "+\t\t\t\t\t\tvalue = constantPoolEntry.getFloatValue() + \"f\"; //$NON-NLS-1$", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IConstantPoolConstant.CONSTANT_Double :", "+\t\t\t\t\t\tvalue = Double.toString(constantPoolEntry.getDoubleValue());", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IConstantPoolConstant.CONSTANT_Integer:", "+\t\t\t\t\t\tswitch(annotationComponentValue.getTag()) {", "+\t\t\t\t\t\t\tcase IAnnotationComponentValue.CHAR_TAG :", "+\t\t\t\t\t\t\t\tvalue = \"'\" + (char) constantPoolEntry.getIntegerValue() + \"'\"; //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase IAnnotationComponentValue.BOOLEAN_TAG :", "+\t\t\t\t\t\t\t\tvalue = constantPoolEntry.getIntegerValue() == 1 ? \"true\" : \"false\";//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase IAnnotationComponentValue.BYTE_TAG :", "+\t\t\t\t\t\t\t\tvalue = \"(byte) \" + constantPoolEntry.getIntegerValue(); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase IAnnotationComponentValue.SHORT_TAG :", "+\t\t\t\t\t\t\t\tvalue =  \"(short) \" + constantPoolEntry.getIntegerValue(); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase IAnnotationComponentValue.INTEGER_TAG :", "+\t\t\t\t\t\t\t\tvalue =  \"(int) \" + constantPoolEntry.getIntegerValue(); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IConstantPoolConstant.CONSTANT_String:", "+\t\t\t\t\t\tvalue = \"\\\"\" + decodeStringValue(constantPoolEntry.getStringValue()) + \"\\\"\";//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t}", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.annotationdefaultvalue\", value)); //$NON-NLS-1$", "+\t\t\t\tbreak;", "+\t\t\tcase IAnnotationComponentValue.ENUM_TAG:", "+\t\t\t\tfinal int enumConstantTypeNameIndex = annotationComponentValue.getEnumConstantTypeNameIndex();", "+\t\t\t\tconstantPoolEntry = annotationComponentValue.getEnumConstantTypeName();", "+\t\t\t\tfinal char[] typeName = CharOperation.replaceOnCopy(constantPoolEntry.getUtf8Value(), '/', '.');", "+\t\t\t\tfinal int enumConstantNameIndex = annotationComponentValue.getEnumConstantNameIndex();", "+\t\t\t\tconstantPoolEntry = annotationComponentValue.getEnumConstantName();", "+\t\t\t\tfinal char[] constantName = constantPoolEntry.getUtf8Value();", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.annotationenumvalue\", //$NON-NLS-1$", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\tInteger.toString(enumConstantTypeNameIndex),", "+\t\t\t\t\t\tInteger.toString(enumConstantNameIndex),", "+\t\t\t\t\t\tnew String(Signature.toCharArray(typeName)),", "+\t\t\t\t\t\tnew String(constantName)", "+\t\t\t\t})); //$NON-NLS-1$", "+\t\t\t\tbreak;", "+\t\t\tcase IAnnotationComponentValue.CLASS_TAG:", "+\t\t\t\tfinal int classIndex = annotationComponentValue.getClassInfoIndex();", "+\t\t\t\tconstantPoolEntry = annotationComponentValue.getClassInfo();", "+\t\t\t\tfinal char[] className = CharOperation.replaceOnCopy(constantPoolEntry.getUtf8Value(), '/', '.');", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.annotationclassvalue\", //$NON-NLS-1$", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\tInteger.toString(classIndex),", "+\t\t\t\t\t\tnew String(Signature.toCharArray(className))", "+\t\t\t\t})); //$NON-NLS-1$", "+\t\t\t\tbreak;", "+\t\t\tcase IAnnotationComponentValue.ANNOTATION_TAG:", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.annotationannotationvalue\")); //$NON-NLS-1$", "+\t\t\t\tIAnnotation annotation = annotationComponentValue.getAttributeValue();", "+\t\t\t\tdisassemble(annotation, constantPool, buffer, lineSeparator, tabNumber + 1);", "+\t\t\t\tbreak;", "+\t\t\tcase IAnnotationComponentValue.ARRAY_TAG:", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.annotationarrayvaluestart\")); //$NON-NLS-1$", "+\t\t\t\tfinal IAnnotationComponentValue[] annotationComponentValues = annotationComponentValue.getAnnotationComponentValues();", "+\t\t\t\tfor (int i = 0, max = annotationComponentValues.length; i < max; i++) {", "+\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\t\t\t\tdisassemble(annotationComponentValues[i], constantPool, buffer, lineSeparator, tabNumber + 1);", "+\t\t\t\t}", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.annotationarrayvalueend\")); //$NON-NLS-1$", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae8d1c20105aedd09e114ccf40bade2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "4d9c1fa73a71510f6ccbe0552cae60ba8899d67d", "commitAfterChange": "62d3eaa4b27479370ad7de8268c38e813fccfa43", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic DefaultCodeFormatterOptions(Map settings)", "signatureAfterChange": "  \tpublic DefaultCodeFormatterOptions(Map settings)", "diff": ["+\tpublic DefaultCodeFormatterOptions(Map settings) {", "+\t\tthis();", "+\t\tfinal Object lineDelimiterOptions = settings.get(DefaultCodeFormatterConstants.FORMATTER_LINE_SEPARATOR);", "+\t\tif (lineDelimiterOptions != null) {", "+\t\t\tthis.line_delimiter = (String) lineDelimiterOptions;", "+\t\t}", "+\t\tfinal Object tabChar = settings.get(DefaultCodeFormatterConstants.FORMATTER_TAB_CHAR);", "+\t\tif (tabChar != null) {", "+\t\t\tthis.use_tab = JavaCore.TAB.equals(tabChar);", "+\t\t}", "+\t\tfinal Object tabSizeOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_TAB_SIZE);", "+\t\tif (tabSizeOption != null) { ", "+\t\t\tthis.tab_size = Integer.parseInt((String)tabSizeOption);", "+\t\t}", "+\t\tfinal Object lineSplitOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_LINE_SPLIT);", "+\t\tif (lineSplitOption != null) { ", "+\t\t\tthis.page_width = Integer.parseInt((String)lineSplitOption);", "+\t\t}", "+\t\tfinal Object blankLinesBeforePackageOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_PACKAGE);", "+\t\tif (blankLinesBeforePackageOption != null) { ", "+\t\t\tthis.blank_lines_before_package = Integer.parseInt((String)blankLinesBeforePackageOption);", "+\t\t}", "+\t\tfinal Object blankLinesAfterPackageOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_AFTER_PACKAGE);", "+\t\tif (blankLinesAfterPackageOption != null) { ", "+\t\t\tthis.blank_lines_after_package = Integer.parseInt((String)blankLinesAfterPackageOption);", "+\t\t}", "+\t\tfinal Object blankLinesBeforeImportsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_IMPORTS);", "+\t\tif (blankLinesBeforeImportsOption != null) { ", "+\t\t\tthis.blank_lines_before_imports = Integer.parseInt((String)blankLinesBeforeImportsOption);", "+\t\t}", "+\t\tfinal Object blankLinesAfterImportsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_AFTER_IMPORTS);", "+\t\tif (blankLinesAfterImportsOption != null) { ", "+\t\t\tthis.blank_lines_after_imports = Integer.parseInt((String)blankLinesAfterImportsOption);", "+\t\t}", "+\t\tfinal Object initialIndentationLevelOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INITIAL_INDENTATION_LEVEL);", "+\t\tif (initialIndentationLevelOption != null) { ", "+\t\t\tthis.initial_indentation_level = Integer.parseInt((String)initialIndentationLevelOption);", "+\t\t}", "+\t\tfinal Object continuationIndentationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_CONTINUATION_INDENTATION);", "+\t\tif (continuationIndentationOption != null) { ", "+\t\t\tthis.continuation_indentation = Integer.parseInt((String)continuationIndentationOption);", "+\t\t}", "+\t\tfinal Object typeDeclarationBracePositionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_DECLARATION_BRACE_POSITION);", "+\t\tif (typeDeclarationBracePositionOption != null) { ", "+\t\t\tthis.type_declaration_brace_position = (String) typeDeclarationBracePositionOption;", "+\t\t}", "+\t\tfinal Object methodDeclarationBracePositionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_METHOD_DECLARATION_BRACE_POSITION);", "+\t\tif (methodDeclarationBracePositionOption != null) { ", "+\t\t\tthis.method_declaration_brace_position = (String) methodDeclarationBracePositionOption;", "+\t\t}\t\t", "+\t\tfinal Object insertSpaceBeforeMethodDeclarationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_METHOD_DECLARATION_OPEN_PAREN);", "+\t\tif (insertSpaceBeforeMethodDeclarationOption != null) { ", "+\t\t\tthis.insert_space_before_method_declaration_open_paren = insertSpaceBeforeMethodDeclarationOption.equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_TYPE_OPEN_BRACE) != null) { ", "+\t\t\tthis.insert_space_before_type_open_brace = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_TYPE_OPEN_BRACE).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_METHOD_OPEN_BRACE) != null) { ", "+\t\t\tthis.insert_space_before_method_open_brace = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_METHOD_OPEN_BRACE).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_ARGUMENTS) != null) { ", "+\t\t\tthis.insert_space_between_empty_arguments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_ARGUMENTS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FIRST_ARGUMENT) != null) { ", "+\t\t\tthis.insert_space_before_first_argument = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FIRST_ARGUMENT).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN) != null) { ", "+\t\t\tthis.insert_space_before_closing_paren = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ASSIGNMENT_OPERATORS) != null) { ", "+\t\t\tthis.insert_space_after_assignment_operators = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ASSIGNMENT_OPERATORS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ASSIGNMENT_OPERATORS) != null) { ", "+\t\t\tthis.insert_space_before_assignment_operators = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ASSIGNMENT_OPERATORS).equals(JavaCore.INSERT);", "+\t\t}\t\t\t\t\t\t\t\t", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_PUT_EMPTY_STATEMENT_ON_NEW_LINE) != null) { ", "+\t\t\tthis.put_empty_statement_on_new_line = settings.get(DefaultCodeFormatterConstants.FORMATTER_PUT_EMPTY_STATEMENT_ON_NEW_LINE).equals(JavaCore.INSERT);", "+\t\t}\t\t\t\t\t\t\t\t", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON) != null) { ", "+\t\t\tthis.insert_space_before_semicolon = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_WITHIN_MESSAGE_SEND) != null) { ", "+\t\t\tthis.insert_space_within_message_send = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_WITHIN_MESSAGE_SEND).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_MESSAGE_SEND) != null) { ", "+\t\t\tthis.insert_space_before_message_send = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_MESSAGE_SEND).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FIRST_INITIALIZER) != null) { ", "+\t\t\tthis.insert_space_before_first_initializer = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FIRST_INITIALIZER).equals(JavaCore.INSERT);", "+\t\t}\t\t", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACE_IN_ARRAY_INITIALIZER) != null) { ", "+\t\t\tthis.insert_space_before_closing_brace_in_array_initializer = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACE_IN_ARRAY_INITIALIZER).equals(JavaCore.INSERT);", "+\t\t}\t\t", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BLOCK_BRACE_POSITION) != null) { ", "+\t\t\tthis.block_brace_position = (String) settings.get(DefaultCodeFormatterConstants.FORMATTER_BLOCK_BRACE_POSITION);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BLOCK_OPEN_BRACE) != null) { ", "+\t\t\tthis.insert_space_before_block_open_brace = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BLOCK_OPEN_BRACE).equals(JavaCore.INSERT);", "+\t\t}\t\t", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CASE) != null) { ", "+\t\t\tthis.insert_space_before_colon_in_case = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CASE).equals(JavaCore.INSERT);", "+\t\t}\t\t", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CAST) != null) { ", "+\t\t\tthis.insert_space_after_opening_paren_in_cast = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CAST).equals(JavaCore.INSERT);", "+\t\t}\t\t", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CAST) != null) { ", "+\t\t\tthis.insert_space_before_closing_paren_in_cast = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CAST).equals(JavaCore.INSERT);", "+\t\t}\t\t", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_DEFAULT) != null) { ", "+\t\t\tthis.insert_space_before_colon_in_default = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_DEFAULT).equals(JavaCore.INSERT);", "+\t\t}\t\t", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_WHILE_CONDITION) != null) { ", "+\t\t\tthis.insert_space_in_while_condition = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_WHILE_CONDITION).equals(JavaCore.INSERT);", "+\t\t}\t\t", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_IF_CONDITION) != null) { ", "+\t\t\tthis.insert_space_in_if_condition = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_IF_CONDITION).equals(JavaCore.INSERT);", "+\t\t}\t\t", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_COMPACT_ELSE_IF) != null) { ", "+\t\t\tthis.compact_else_if = settings.get(DefaultCodeFormatterConstants.FORMATTER_COMPACT_ELSE_IF).equals(JavaCore.INSERT);", "+\t\t}\t\t", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_IF_CONDITION) != null) { ", "+\t\t\tthis.insert_space_before_if_condition = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_IF_CONDITION).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FOR_PAREN) != null) { ", "+\t\t\tthis.insert_space_before_for_paren = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FOR_PAREN).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_FOR_PARENS) != null) { ", "+\t\t\tthis.insert_space_in_for_parens = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_FOR_PARENS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_SWITCH_BRACE_POSITION) != null) { ", "+\t\t\tthis.switch_brace_position = (String) settings.get(DefaultCodeFormatterConstants.FORMATTER_SWITCH_BRACE_POSITION);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SWITCH_OPEN_BRACE) != null) { ", "+\t\t\tthis.insert_space_before_switch_open_brace = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SWITCH_OPEN_BRACE).equals(JavaCore.INSERT);", "+\t\t}\t\t", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_SWITCH_CONDITION) != null) { ", "+\t\t\tthis.insert_space_in_switch_condition = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_SWITCH_CONDITION).equals(JavaCore.INSERT);", "+\t\t}\t\t", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SWITCH_CONDITION) != null) { ", "+\t\t\tthis.insert_space_before_switch_condition = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SWITCH_CONDITION).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_SYNCHRONIZED_CONDITION) != null) { ", "+\t\t\tthis.insert_space_in_synchronized_condition = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_SYNCHRONIZED_CONDITION).equals(JavaCore.INSERT);", "+\t\t}\t", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SYNCHRONIZED_CONDITION) != null) { ", "+\t\t\tthis.insert_space_before_synchronized_condition = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SYNCHRONIZED_CONDITION).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_CATCH_EXPRESSION) != null) { ", "+\t\t\tthis.insert_space_in_catch_expression = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_CATCH_EXPRESSION).equals(JavaCore.INSERT);", "+\t\t}\t\t", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CATCH_EXPRESSION) != null) { ", "+\t\t\tthis.insert_space_before_catch_expression = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CATCH_EXPRESSION).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_WHILE_CONDITION) != null) { ", "+\t\t\tthis.insert_space_before_while_condition = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_WHILE_CONDITION).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_CONTROL_STATEMENTS) != null) { ", "+\t\t\tthis.insert_new_line_in_control_statements = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_CONTROL_STATEMENTS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BINARY_OPERATOR) != null) { ", "+\t\t\tthis.insert_space_before_binary_operator = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BINARY_OPERATOR).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_BINARY_OPERATOR) != null) { ", "+\t\t\tthis.insert_space_after_binary_operator = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_BINARY_OPERATOR).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_UNARY_OPERATOR) != null) { ", "+\t\t\tthis.insert_space_before_unary_operator = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_UNARY_OPERATOR).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_UNARY_OPERATOR) != null) { ", "+\t\t\tthis.insert_space_after_unary_operator = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_UNARY_OPERATOR).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS) != null) { ", "+\t\t\tthis.insert_space_before_comma_in_multiple_field_declarations = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS) != null) { ", "+\t\t\tthis.insert_space_after_comma_in_multiple_field_declarations = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_SUPERINTERFACES) != null) { ", "+\t\t\tthis.insert_space_before_comma_in_superinterfaces = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_SUPERINTERFACES).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_SUPERINTERFACES) != null) { ", "+\t\t\tthis.insert_space_after_comma_in_superinterfaces = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_SUPERINTERFACES).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ALLOCATION_EXPRESSION) != null) { ", "+\t\t\tthis.insert_space_before_comma_in_allocation_expression = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ALLOCATION_EXPRESSION).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ALLOCATION_EXPRESSION) != null) { ", "+\t\t\tthis.insert_space_after_comma_in_allocation_expression = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ALLOCATION_EXPRESSION).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ARRAY_INITIALIZER) != null) { ", "+\t\t\tthis.insert_space_before_comma_in_array_initializer = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ARRAY_INITIALIZER).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ARRAY_INITIALIZER) != null) { ", "+\t\t\tthis.insert_space_after_comma_in_array_initializer = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ARRAY_INITIALIZER).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_ASSERT) != null) { ", "+\t\t\tthis.insert_space_before_colon_in_assert = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_ASSERT).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_ASSERT) != null) { ", "+\t\t\tthis.insert_space_after_colon_in_assert = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_ASSERT).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_QUESTION_IN_CONDITIONAL) != null) { ", "+\t\t\tthis.insert_space_before_question_in_conditional = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_QUESTION_IN_CONDITIONAL).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_QUESTION_IN_CONDITIONAL) != null) { ", "+\t\t\tthis.insert_space_after_question_in_conditional = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_QUESTION_IN_CONDITIONAL).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CONDITIONAL) != null) { ", "+\t\t\tthis.insert_space_before_colon_in_conditional = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CONDITIONAL).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CONDITIONAL) != null) { ", "+\t\t\tthis.insert_space_after_colon_in_conditional = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CONDITIONAL).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_CONSTRUCTOR_ARGUMENTS) != null) { ", "+\t\t\tthis.insert_space_before_comma_in_constructor_arguments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_CONSTRUCTOR_ARGUMENTS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_CONSTRUCTOR_ARGUMENTS) != null) { ", "+\t\t\tthis.insert_space_after_comma_in_constructor_arguments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_CONSTRUCTOR_ARGUMENTS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_CONSTRUCTOR_THROWS) != null) { ", "+\t\t\tthis.insert_space_before_comma_in_constructor_throws = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_CONSTRUCTOR_THROWS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_CONSTRUCTOR_THROWS) != null) { ", "+\t\t\tthis.insert_space_after_comma_in_constructor_throws = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_CONSTRUCTOR_THROWS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOR_INCREMENTS) != null) { ", "+\t\t\tthis.insert_space_before_comma_in_for_increments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOR_INCREMENTS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOR_INCREMENTS) != null) { ", "+\t\t\tthis.insert_space_after_comma_in_for_increments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOR_INCREMENTS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_EXPLICITCONSTRUCTORCALL_ARGUMENTS) != null) { ", "+\t\t\tthis.insert_space_before_comma_in_explicitconstructorcall_arguments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_EXPLICITCONSTRUCTORCALL_ARGUMENTS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_EXPLICITCONSTRUCTORCALL_ARGUMENTS) != null) { ", "+\t\t\tthis.insert_space_after_comma_in_explicitconstructorcall_arguments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_EXPLICITCONSTRUCTORCALL_ARGUMENTS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_LABELED_STATEMENT) != null) { ", "+\t\t\tthis.insert_space_before_colon_in_labeled_statement = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_LABELED_STATEMENT).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_LABELED_STATEMENT) != null) { ", "+\t\t\tthis.insert_space_after_colon_in_labeled_statement = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_LABELED_STATEMENT).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MESSAGESEND_ARGUMENTS) != null) { ", "+\t\t\tthis.insert_space_before_comma_in_messagesend_arguments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MESSAGESEND_ARGUMENTS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MESSAGESEND_ARGUMENTS) != null) { ", "+\t\t\tthis.insert_space_after_comma_in_messagesend_arguments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MESSAGESEND_ARGUMENTS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_ARGUMENTS) != null) { ", "+\t\t\tthis.insert_space_before_comma_in_method_arguments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_ARGUMENTS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_METHOD_ARGUMENTS) != null) { ", "+\t\t\tthis.insert_space_after_comma_in_method_arguments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_METHOD_ARGUMENTS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_THROWS) != null) { ", "+\t\t\tthis.insert_space_before_comma_in_method_throws = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_THROWS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_METHOD_THROWS) != null) { ", "+\t\t\tthis.insert_space_after_comma_in_method_throws = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_METHOD_THROWS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_LOCAL_DECLARATIONS) != null) { ", "+\t\t\tthis.insert_space_before_comma_in_multiple_local_declarations = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_LOCAL_DECLARATIONS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_LOCAL_DECLARATIONS) != null) { ", "+\t\t\tthis.insert_space_after_comma_in_multiple_local_declarations = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_LOCAL_DECLARATIONS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOR_INITS) != null) { ", "+\t\t\tthis.insert_space_before_comma_in_for_inits = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOR_INITS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOR_INITS) != null) { ", "+\t\t\tthis.insert_space_after_comma_in_for_inits = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOR_INITS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SEMICOLON_IN_FOR) != null) { ", "+\t\t\tthis.insert_space_after_semicolon_in_for = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SEMICOLON_IN_FOR).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_POSTFIX_OPERATOR) != null) { ", "+\t\t\tthis.insert_space_before_postfix_operator = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_POSTFIX_OPERATOR).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_POSTFIX_OPERATOR) != null) { ", "+\t\t\tthis.insert_space_after_postfix_operator = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_POSTFIX_OPERATOR).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PREFIX_OPERATOR) != null) { ", "+\t\t\tthis.insert_space_before_prefix_operator = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PREFIX_OPERATOR).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_PREFIX_OPERATOR) != null) { ", "+\t\t\tthis.insert_space_after_prefix_operator = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_PREFIX_OPERATOR).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_SWITCH) != null) { ", "+\t\t\tthis.indent_switchstatements_compare_to_switch = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_SWITCH).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_CASES) != null) { ", "+\t\t\tthis.indent_switchstatements_compare_to_cases = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_CASES).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BREAKS_COMPARE_TO_CASES) != null) { ", "+\t\t\tthis.indent_breaks_compare_to_cases = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BREAKS_COMPARE_TO_CASES).equals(JavaCore.INSERT);", "+\t\t}\t\t", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_ANONYMOUS_TYPE_DECLARATION_BRACE_POSITION) != null) { ", "+\t\t\tthis.anonymous_type_declaration_brace_position = (String) settings.get(DefaultCodeFormatterConstants.FORMATTER_ANONYMOUS_TYPE_DECLARATION_BRACE_POSITION);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ANONYMOUS_TYPE_OPEN_BRACE) != null) { ", "+\t\t\tthis.insert_space_before_anonymous_type_open_brace = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ANONYMOUS_TYPE_OPEN_BRACE).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_TYPE_HEADER) != null) { ", "+\t\t\tthis.indent_body_declarations_compare_to_type_header = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_TYPE_HEADER).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_FILLING_SPACE) != null) { ", "+\t\t\tthis.filling_space = ((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_FILLING_SPACE)).charAt(0);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_CLOSING_PAREN_IN_CAST) != null) { ", "+\t\t\tthis.insert_space_after_closing_paren_in_cast = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_CLOSING_PAREN_IN_CAST).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_BLANK_LINES_TO_INSERT_AT_BEGINNING_OF_METHOD_BODY) != null) { ", "+\t\t\tthis.number_of_blank_lines_to_insert_at_beginning_of_method_body = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_BLANK_LINES_TO_INSERT_AT_BEGINNING_OF_METHOD_BODY));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_IF_ON_ONE_LINE) != null) { ", "+\t\t\tthis.keep_simple_if_on_one_line = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_IF_ON_ONE_LINE).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_FORMAT_GUARDIAN_CLAUSE_ON_ONE_LINE) != null) { ", "+\t\t\tthis.format_guardian_clause_on_one_line = settings.get(DefaultCodeFormatterConstants.FORMATTER_FORMAT_GUARDIAN_CLAUSE_ON_ONE_LINE).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPEN_PAREN_IN_PARENTHIZED_EXPRESSION) != null) { ", "+\t\t\tthis.insert_space_before_open_paren_in_parenthesized_expression = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPEN_PAREN_IN_PARENTHIZED_EXPRESSION).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPEN_PAREN_IN_PARENTHIZED_EXPRESSION) != null) { ", "+\t\t\tthis.insert_space_after_open_paren_in_parenthesized_expression = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPEN_PAREN_IN_PARENTHIZED_EXPRESSION).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_PARENTHIZED_EXPRESSION) != null) { ", "+\t\t\tthis.insert_space_before_closing_paren_in_parenthesized_expression = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_PARENTHIZED_EXPRESSION).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_THEN_STATEMENT_ON_SAME_LINE) != null) { ", "+\t\t\tthis.keep_then_statement_on_same_line = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_THEN_STATEMENT_ON_SAME_LINE).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_NEW_CHUNK) != null) { ", "+\t\t\tthis.blank_lines_before_new_chunk = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_NEW_CHUNK));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_FIELD) != null) { ", "+\t\t\tthis.blank_lines_before_field = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_FIELD));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_METHOD) != null) { ", "+\t\t\tthis.blank_lines_before_method = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_METHOD));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_MEMBER_TYPE) != null) { ", "+\t\t\tthis.blank_lines_before_member_type = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_MEMBER_TYPE));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_BLOCK_CLOSE_BRACE) != null) {", "+\t\t\tthis.insert_space_after_block_close_brace = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_BLOCK_CLOSE_BRACE).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_ELSE_STATEMENT_ON_SAME_LINE) != null) {", "+\t\t\tthis.keep_else_statement_on_same_line = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_ELSE_STATEMENT_ON_SAME_LINE).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BRACKET_IN_ARRAY_TYPE_REFERENCE) != null) {", "+\t\t\tthis.insert_space_before_bracket_in_array_type_reference = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BRACKET_IN_ARRAY_TYPE_REFERENCE).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_BRACKETS_IN_ARRAY_TYPE_REFERENCE) != null) {", "+\t\t\tthis.insert_space_between_brackets_in_array_type_reference = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_BRACKETS_IN_ARRAY_TYPE_REFERENCE).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_COMPACT_IF_ALIGNMENT) != null) { ", "+\t\t\tthis.compact_if_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_COMPACT_IF_ALIGNMENT));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_DECLARATION_SUPERCLASS_ALIGNMENT) != null) { ", "+\t\t\tthis.type_declaration_superclass_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_DECLARATION_SUPERCLASS_ALIGNMENT));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_DECLARATION_SUPERINTERFACES_ALIGNMENT) != null) { ", "+\t\t\tthis.type_declaration_superinterfaces_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_DECLARATION_SUPERINTERFACES_ALIGNMENT));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_METHOD_DECLARATION_ARGUMENTS_ALIGNMENT) != null) { ", "+\t\t\tthis.method_declaration_arguments_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_METHOD_DECLARATION_ARGUMENTS_ALIGNMENT));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_MESSAGE_SEND_ARGUMENTS_ALIGNMENT) != null) { ", "+\t\t\tthis.message_send_arguments_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_MESSAGE_SEND_ARGUMENTS_ALIGNMENT));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_MESSAGE_SEND_SELECTOR_ALIGNMENT) != null) { ", "+\t\t\tthis.message_send_selector_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_MESSAGE_SEND_SELECTOR_ALIGNMENT));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_METHOD_THROWS_CLAUSE_ALIGNMENT) != null) { ", "+\t\t\tthis.method_throws_clause_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_METHOD_THROWS_CLAUSE_ALIGNMENT));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_MEMBER_ALIGNMENT) != null) { ", "+\t\t\tthis.type_member_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_MEMBER_ALIGNMENT));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_ALLOCATION_EXPRESSION_ARGUMENTS_ALIGNMENT) != null) { ", "+\t\t\tthis.allocation_expression_arguments_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_ALLOCATION_EXPRESSION_ARGUMENTS_ALIGNMENT));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_QUALIFIED_ALLOCATION_EXPRESSION_ARGUMENTS_ALIGNMENT) != null) { ", "+\t\t\tthis.qualified_allocation_expression_arguments_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_QUALIFIED_ALLOCATION_EXPRESSION_ARGUMENTS_ALIGNMENT));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_ARRAY_INITIALIZER_EXPRESSIONS_ALIGNMENT) != null) { ", "+\t\t\tthis.array_initializer_expressions_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_ARRAY_INITIALIZER_EXPRESSIONS_ALIGNMENT));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_EXPLICIT_CONSTRUCTOR_ARGUMENTS_ALIGNMENT) != null) { ", "+\t\t\tthis.explicit_constructor_arguments_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_EXPLICIT_CONSTRUCTOR_ARGUMENTS_ALIGNMENT));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_CONDITIONAL_EXPRESSION_ALIGNMENT) != null) { ", "+\t\t\tthis.conditional_expression_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_CONDITIONAL_EXPRESSION_ALIGNMENT));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BINARY_EXPRESSION_ALIGNMENT) != null) { ", "+\t\t\tthis.binary_expression_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_BINARY_EXPRESSION_ALIGNMENT));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_METHOD_BODY) != null) {", "+\t\t\tthis.insert_new_line_in_empty_method_body = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_METHOD_BODY).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_TYPE_DECLARATION) != null) {", "+\t\t\tthis.insert_new_line_in_empty_type_declaration = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_TYPE_DECLARATION).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ANONYMOUS_TYPE_DECLARATION) != null) {", "+\t\t\tthis.insert_new_line_in_empty_anonymous_type_declaration = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ANONYMOUS_TYPE_DECLARATION).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_BLOCK) != null) {", "+\t\t\tthis.insert_new_line_in_empty_block = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_BLOCK).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_EMPTY_LINES_TO_PRESERVE) != null) { ", "+\t\t\tthis.number_of_empty_lines_to_preserve = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_EMPTY_LINES_TO_PRESERVE));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_CLOSING_BRACE_IN_ARRAY_INITIALIZER) != null) {", "+\t\t\tthis.insert_new_line_before_closing_brace_in_array_initializer = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_CLOSING_BRACE_IN_ARRAY_INITIALIZER).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_MULTIPLE_FIELDS_ALIGNMENT) != null) { ", "+\t\t\tthis.multiple_fields_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_MULTIPLE_FIELDS_ALIGNMENT));", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BRACKET_IN_ARRAY_REFERENCE) != null) {", "+\t\t\tthis.insert_space_before_bracket_in_array_reference = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BRACKET_IN_ARRAY_REFERENCE).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_BRACKETS_IN_ARRAY_REFERENCE) != null) {", "+\t\t\tthis.insert_space_between_brackets_in_array_reference = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_BRACKETS_IN_ARRAY_REFERENCE).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BLOCK_STATEMENTS) != null) {", "+\t\t\tthis.indent_block_statements = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BLOCK_STATEMENTS).equals(JavaCore.INSERT);", "+\t\t}", "+\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ARRAY_INITIALIZER) != null) {", "+\t\t\tthis.insert_space_before_opening_brace_in_array_initializer = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ARRAY_INITIALIZER).equals(JavaCore.INSERT);", "+\t\t}", "+\t}", "-", "-\tpublic DefaultCodeFormatterOptions(Map settings) {", "-\t\tthis();", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_LINE_SEPARATOR) != null) {", "-\t\t\tthis.line_delimiter = (String) settings.get(DefaultCodeFormatterConstants.FORMATTER_LINE_SEPARATOR);", "-\t\t}", "-\t\tfinal Object tabChar = settings.get(DefaultCodeFormatterConstants.FORMATTER_TAB_CHAR);", "-\t\tif (tabChar != null) {", "-\t\t\tthis.use_tab = JavaCore.TAB.equals(tabChar);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_TAB_SIZE) != null) { ", "-\t\t\tthis.tab_size = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_TAB_SIZE));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_LINE_SPLIT) != null) { ", "-\t\t\tthis.page_width = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_LINE_SPLIT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_PACKAGE) != null) { ", "-\t\t\tthis.blank_lines_before_package = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_PACKAGE));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_AFTER_PACKAGE) != null) { ", "-\t\t\tthis.blank_lines_after_package = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_AFTER_PACKAGE));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_IMPORTS) != null) { ", "-\t\t\tthis.blank_lines_before_imports = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_IMPORTS));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_AFTER_IMPORTS) != null) { ", "-\t\t\tthis.blank_lines_after_imports = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_AFTER_IMPORTS));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INITIAL_INDENTATION_LEVEL) != null) { ", "-\t\t\tthis.initial_indentation_level = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INITIAL_INDENTATION_LEVEL));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_CONTINUATION_INDENTATION) != null) { ", "-\t\t\tthis.continuation_indentation = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_CONTINUATION_INDENTATION));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_DECLARATION_BRACE_POSITION) != null) { ", "-\t\t\tthis.type_declaration_brace_position = (String) settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_DECLARATION_BRACE_POSITION);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_METHOD_DECLARATION_BRACE_POSITION) != null) { ", "-\t\t\tthis.method_declaration_brace_position = (String) settings.get(DefaultCodeFormatterConstants.FORMATTER_METHOD_DECLARATION_BRACE_POSITION);", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_METHOD_DECLARATION_OPEN_PAREN) != null) { ", "-\t\t\tthis.insert_space_before_method_declaration_open_paren = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_METHOD_DECLARATION_OPEN_PAREN)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_TYPE_OPEN_BRACE) != null) { ", "-\t\t\tthis.insert_space_before_type_open_brace = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_TYPE_OPEN_BRACE)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_METHOD_OPEN_BRACE) != null) { ", "-\t\t\tthis.insert_space_before_method_open_brace = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_METHOD_OPEN_BRACE)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_ARGUMENTS) != null) { ", "-\t\t\tthis.insert_space_between_empty_arguments = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_ARGUMENTS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FIRST_ARGUMENT) != null) { ", "-\t\t\tthis.insert_space_before_first_argument = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FIRST_ARGUMENT)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN) != null) { ", "-\t\t\tthis.insert_space_before_closing_paren = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ASSIGNMENT_OPERATORS) != null) { ", "-\t\t\tthis.insert_space_after_assignment_operators = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ASSIGNMENT_OPERATORS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ASSIGNMENT_OPERATORS) != null) { ", "-\t\t\tthis.insert_space_before_assignment_operators = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ASSIGNMENT_OPERATORS)).booleanValue();", "-\t\t}\t\t\t\t\t\t\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_PUT_EMPTY_STATEMENT_ON_NEW_LINE) != null) { ", "-\t\t\tthis.put_empty_statement_on_new_line = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_PUT_EMPTY_STATEMENT_ON_NEW_LINE)).booleanValue();", "-\t\t}\t\t\t\t\t\t\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON) != null) { ", "-\t\t\tthis.insert_space_before_semicolon = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_WITHIN_MESSAGE_SEND) != null) { ", "-\t\t\tthis.insert_space_within_message_send = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_WITHIN_MESSAGE_SEND)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_MESSAGE_SEND) != null) { ", "-\t\t\tthis.insert_space_before_message_send = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_MESSAGE_SEND)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FIRST_INITIALIZER) != null) { ", "-\t\t\tthis.insert_space_before_first_initializer = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FIRST_INITIALIZER)).booleanValue();", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACE_IN_ARRAY_INITIALIZER) != null) { ", "-\t\t\tthis.insert_space_before_closing_brace_in_array_initializer = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACE_IN_ARRAY_INITIALIZER)).booleanValue();", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BLOCK_BRACE_POSITION) != null) { ", "-\t\t\tthis.block_brace_position = (String) settings.get(DefaultCodeFormatterConstants.FORMATTER_BLOCK_BRACE_POSITION);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BLOCK_OPEN_BRACE) != null) { ", "-\t\t\tthis.insert_space_before_block_open_brace = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BLOCK_OPEN_BRACE)).booleanValue();", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CASE) != null) { ", "-\t\t\tthis.insert_space_before_colon_in_case = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CASE)).booleanValue();", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CAST) != null) { ", "-\t\t\tthis.insert_space_after_opening_paren_in_cast = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CAST)).booleanValue();", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CAST) != null) { ", "-\t\t\tthis.insert_space_before_closing_paren_in_cast = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CAST)).booleanValue();", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_DEFAULT) != null) { ", "-\t\t\tthis.insert_space_before_colon_in_default = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_DEFAULT)).booleanValue();", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_WHILE_CONDITION) != null) { ", "-\t\t\tthis.insert_space_in_while_condition = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_WHILE_CONDITION)).booleanValue();", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_IF_CONDITION) != null) { ", "-\t\t\tthis.insert_space_in_if_condition = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_IF_CONDITION)).booleanValue();", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_COMPACT_ELSE_IF) != null) { ", "-\t\t\tthis.compact_else_if = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_COMPACT_ELSE_IF)).booleanValue();", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_IF_CONDITION) != null) { ", "-\t\t\tthis.insert_space_before_if_condition = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_IF_CONDITION)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FOR_PAREN) != null) { ", "-\t\t\tthis.insert_space_before_for_paren = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FOR_PAREN)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_FOR_PARENS) != null) { ", "-\t\t\tthis.insert_space_in_for_parens = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_FOR_PARENS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_SWITCH_BRACE_POSITION) != null) { ", "-\t\t\tthis.switch_brace_position = (String) settings.get(DefaultCodeFormatterConstants.FORMATTER_SWITCH_BRACE_POSITION);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SWITCH_OPEN_BRACE) != null) { ", "-\t\t\tthis.insert_space_before_switch_open_brace = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SWITCH_OPEN_BRACE)).booleanValue();", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_SWITCH_CONDITION) != null) { ", "-\t\t\tthis.insert_space_in_switch_condition = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_SWITCH_CONDITION)).booleanValue();", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SWITCH_CONDITION) != null) { ", "-\t\t\tthis.insert_space_before_switch_condition = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SWITCH_CONDITION)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_SYNCHRONIZED_CONDITION) != null) { ", "-\t\t\tthis.insert_space_in_synchronized_condition = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_SYNCHRONIZED_CONDITION)).booleanValue();", "-\t\t}\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SYNCHRONIZED_CONDITION) != null) { ", "-\t\t\tthis.insert_space_before_synchronized_condition = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SYNCHRONIZED_CONDITION)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_CATCH_EXPRESSION) != null) { ", "-\t\t\tthis.insert_space_in_catch_expression = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_CATCH_EXPRESSION)).booleanValue();", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CATCH_EXPRESSION) != null) { ", "-\t\t\tthis.insert_space_before_catch_expression = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CATCH_EXPRESSION)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_WHILE_CONDITION) != null) { ", "-\t\t\tthis.insert_space_before_while_condition = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_WHILE_CONDITION)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_CONTROL_STATEMENTS) != null) { ", "-\t\t\tthis.insert_new_line_in_control_statements = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_CONTROL_STATEMENTS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BINARY_OPERATOR) != null) { ", "-\t\t\tthis.insert_space_before_binary_operator = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BINARY_OPERATOR)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_BINARY_OPERATOR) != null) { ", "-\t\t\tthis.insert_space_after_binary_operator = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_BINARY_OPERATOR)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_UNARY_OPERATOR) != null) { ", "-\t\t\tthis.insert_space_before_unary_operator = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_UNARY_OPERATOR)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_UNARY_OPERATOR) != null) { ", "-\t\t\tthis.insert_space_after_unary_operator = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_UNARY_OPERATOR)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_multiple_field_declarations = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_multiple_field_declarations = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_SUPERINTERFACES) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_superinterfaces = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_SUPERINTERFACES)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_SUPERINTERFACES) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_superinterfaces = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_SUPERINTERFACES)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ALLOCATION_EXPRESSION) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_allocation_expression = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ALLOCATION_EXPRESSION)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ALLOCATION_EXPRESSION) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_allocation_expression = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ALLOCATION_EXPRESSION)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ARRAY_INITIALIZER) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_array_initializer = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ARRAY_INITIALIZER)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ARRAY_INITIALIZER) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_array_initializer = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ARRAY_INITIALIZER)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_ASSERT) != null) { ", "-\t\t\tthis.insert_space_before_colon_in_assert = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_ASSERT)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_ASSERT) != null) { ", "-\t\t\tthis.insert_space_after_colon_in_assert = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_ASSERT)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_QUESTION_IN_CONDITIONAL) != null) { ", "-\t\t\tthis.insert_space_before_question_in_conditional = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_QUESTION_IN_CONDITIONAL)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_QUESTION_IN_CONDITIONAL) != null) { ", "-\t\t\tthis.insert_space_after_question_in_conditional = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_QUESTION_IN_CONDITIONAL)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CONDITIONAL) != null) { ", "-\t\t\tthis.insert_space_before_colon_in_conditional = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CONDITIONAL)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CONDITIONAL) != null) { ", "-\t\t\tthis.insert_space_after_colon_in_conditional = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CONDITIONAL)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_CONSTRUCTOR_ARGUMENTS) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_constructor_arguments = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_CONSTRUCTOR_ARGUMENTS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_CONSTRUCTOR_ARGUMENTS) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_constructor_arguments = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_CONSTRUCTOR_ARGUMENTS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_CONSTRUCTOR_THROWS) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_constructor_throws = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_CONSTRUCTOR_THROWS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_CONSTRUCTOR_THROWS) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_constructor_throws = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_CONSTRUCTOR_THROWS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOR_INCREMENTS) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_for_increments = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOR_INCREMENTS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOR_INCREMENTS) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_for_increments = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOR_INCREMENTS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_EXPLICITCONSTRUCTORCALL_ARGUMENTS) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_explicitconstructorcall_arguments = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_EXPLICITCONSTRUCTORCALL_ARGUMENTS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_EXPLICITCONSTRUCTORCALL_ARGUMENTS) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_explicitconstructorcall_arguments = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_EXPLICITCONSTRUCTORCALL_ARGUMENTS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_LABELED_STATEMENT) != null) { ", "-\t\t\tthis.insert_space_before_colon_in_labeled_statement = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_LABELED_STATEMENT)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_LABELED_STATEMENT) != null) { ", "-\t\t\tthis.insert_space_after_colon_in_labeled_statement = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_LABELED_STATEMENT)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MESSAGESEND_ARGUMENTS) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_messagesend_arguments = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MESSAGESEND_ARGUMENTS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MESSAGESEND_ARGUMENTS) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_messagesend_arguments = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MESSAGESEND_ARGUMENTS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_ARGUMENTS) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_method_arguments = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_ARGUMENTS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_METHOD_ARGUMENTS) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_method_arguments = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_METHOD_ARGUMENTS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_THROWS) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_method_throws = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_THROWS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_METHOD_THROWS) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_method_throws = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_METHOD_THROWS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_LOCAL_DECLARATIONS) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_multiple_local_declarations = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_LOCAL_DECLARATIONS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_LOCAL_DECLARATIONS) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_multiple_local_declarations = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_LOCAL_DECLARATIONS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOR_INITS) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_for_inits = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOR_INITS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOR_INITS) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_for_inits = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOR_INITS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SEMICOLON_IN_FOR) != null) { ", "-\t\t\tthis.insert_space_after_semicolon_in_for = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SEMICOLON_IN_FOR)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_POSTFIX_OPERATOR) != null) { ", "-\t\t\tthis.insert_space_before_postfix_operator = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_POSTFIX_OPERATOR)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_POSTFIX_OPERATOR) != null) { ", "-\t\t\tthis.insert_space_after_postfix_operator = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_POSTFIX_OPERATOR)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PREFIX_OPERATOR) != null) { ", "-\t\t\tthis.insert_space_before_prefix_operator = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PREFIX_OPERATOR)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_PREFIX_OPERATOR) != null) { ", "-\t\t\tthis.insert_space_after_prefix_operator = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_PREFIX_OPERATOR)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_SWITCH) != null) { ", "-\t\t\tthis.indent_switchstatements_compare_to_switch = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_SWITCH)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_CASES) != null) { ", "-\t\t\tthis.indent_switchstatements_compare_to_cases = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_CASES)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BREAKS_COMPARE_TO_CASES) != null) { ", "-\t\t\tthis.indent_breaks_compare_to_cases = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BREAKS_COMPARE_TO_CASES)).booleanValue();", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_ANONYMOUS_TYPE_DECLARATION_BRACE_POSITION) != null) { ", "-\t\t\tthis.anonymous_type_declaration_brace_position = (String) settings.get(DefaultCodeFormatterConstants.FORMATTER_ANONYMOUS_TYPE_DECLARATION_BRACE_POSITION);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ANONYMOUS_TYPE_OPEN_BRACE) != null) { ", "-\t\t\tthis.insert_space_before_anonymous_type_open_brace = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ANONYMOUS_TYPE_OPEN_BRACE)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_TYPE_HEADER) != null) { ", "-\t\t\tthis.indent_body_declarations_compare_to_type_header = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_TYPE_HEADER)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_FILLING_SPACE) != null) { ", "-\t\t\tthis.filling_space = ((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_FILLING_SPACE)).charAt(0);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_CLOSING_PAREN_IN_CAST) != null) { ", "-\t\t\tthis.insert_space_after_closing_paren_in_cast = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_CLOSING_PAREN_IN_CAST)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_BLANK_LINES_TO_INSERT_AT_BEGINNING_OF_METHOD_BODY) != null) { ", "-\t\t\tthis.number_of_blank_lines_to_insert_at_beginning_of_method_body = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_BLANK_LINES_TO_INSERT_AT_BEGINNING_OF_METHOD_BODY));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_IF_ON_ONE_LINE) != null) { ", "-\t\t\tthis.keep_simple_if_on_one_line = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_IF_ON_ONE_LINE)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_FORMAT_GUARDIAN_CLAUSE_ON_ONE_LINE) != null) { ", "-\t\t\tthis.format_guardian_clause_on_one_line = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_FORMAT_GUARDIAN_CLAUSE_ON_ONE_LINE)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPEN_PAREN_IN_PARENTHIZED_EXPRESSION) != null) { ", "-\t\t\tthis.insert_space_before_open_paren_in_parenthesized_expression = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPEN_PAREN_IN_PARENTHIZED_EXPRESSION)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPEN_PAREN_IN_PARENTHIZED_EXPRESSION) != null) { ", "-\t\t\tthis.insert_space_after_open_paren_in_parenthesized_expression = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPEN_PAREN_IN_PARENTHIZED_EXPRESSION)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_PARENTHIZED_EXPRESSION) != null) { ", "-\t\t\tthis.insert_space_before_closing_paren_in_parenthesized_expression = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_PARENTHIZED_EXPRESSION)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_THEN_STATEMENT_ON_SAME_LINE) != null) { ", "-\t\t\tthis.keep_then_statement_on_same_line = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_THEN_STATEMENT_ON_SAME_LINE)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_NEW_CHUNK) != null) { ", "-\t\t\tthis.blank_lines_before_new_chunk = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_NEW_CHUNK));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_FIELD) != null) { ", "-\t\t\tthis.blank_lines_before_field = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_FIELD));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_METHOD) != null) { ", "-\t\t\tthis.blank_lines_before_method = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_METHOD));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_MEMBER_TYPE) != null) { ", "-\t\t\tthis.blank_lines_before_member_type = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_MEMBER_TYPE));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_BLOCK_CLOSE_BRACE) != null) {", "-\t\t\tthis.insert_space_after_block_close_brace = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_BLOCK_CLOSE_BRACE)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_ELSE_STATEMENT_ON_SAME_LINE) != null) {", "-\t\t\tthis.keep_else_statement_on_same_line = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_ELSE_STATEMENT_ON_SAME_LINE)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BRACKET_IN_ARRAY_TYPE_REFERENCE) != null) {", "-\t\t\tthis.insert_space_before_bracket_in_array_type_reference = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BRACKET_IN_ARRAY_TYPE_REFERENCE)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_BRACKETS_IN_ARRAY_TYPE_REFERENCE) != null) {", "-\t\t\tthis.insert_space_between_brackets_in_array_type_reference = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_BRACKETS_IN_ARRAY_TYPE_REFERENCE)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_COMPACT_IF_ALIGNMENT) != null) { ", "-\t\t\tthis.compact_if_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_COMPACT_IF_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_DECLARATION_SUPERCLASS_ALIGNMENT) != null) { ", "-\t\t\tthis.type_declaration_superclass_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_DECLARATION_SUPERCLASS_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_DECLARATION_SUPERINTERFACES_ALIGNMENT) != null) { ", "-\t\t\tthis.type_declaration_superinterfaces_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_DECLARATION_SUPERINTERFACES_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_METHOD_DECLARATION_ARGUMENTS_ALIGNMENT) != null) { ", "-\t\t\tthis.method_declaration_arguments_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_METHOD_DECLARATION_ARGUMENTS_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_MESSAGE_SEND_ARGUMENTS_ALIGNMENT) != null) { ", "-\t\t\tthis.message_send_arguments_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_MESSAGE_SEND_ARGUMENTS_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_MESSAGE_SEND_SELECTOR_ALIGNMENT) != null) { ", "-\t\t\tthis.message_send_selector_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_MESSAGE_SEND_SELECTOR_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_METHOD_THROWS_CLAUSE_ALIGNMENT) != null) { ", "-\t\t\tthis.method_throws_clause_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_METHOD_THROWS_CLAUSE_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_MEMBER_ALIGNMENT) != null) { ", "-\t\t\tthis.type_member_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_MEMBER_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_ALLOCATION_EXPRESSION_ARGUMENTS_ALIGNMENT) != null) { ", "-\t\t\tthis.allocation_expression_arguments_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_ALLOCATION_EXPRESSION_ARGUMENTS_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_QUALIFIED_ALLOCATION_EXPRESSION_ARGUMENTS_ALIGNMENT) != null) { ", "-\t\t\tthis.qualified_allocation_expression_arguments_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_QUALIFIED_ALLOCATION_EXPRESSION_ARGUMENTS_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_ARRAY_INITIALIZER_EXPRESSIONS_ALIGNMENT) != null) { ", "-\t\t\tthis.array_initializer_expressions_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_ARRAY_INITIALIZER_EXPRESSIONS_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_EXPLICIT_CONSTRUCTOR_ARGUMENTS_ALIGNMENT) != null) { ", "-\t\t\tthis.explicit_constructor_arguments_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_EXPLICIT_CONSTRUCTOR_ARGUMENTS_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_CONDITIONAL_EXPRESSION_ALIGNMENT) != null) { ", "-\t\t\tthis.conditional_expression_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_CONDITIONAL_EXPRESSION_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BINARY_EXPRESSION_ALIGNMENT) != null) { ", "-\t\t\tthis.binary_expression_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_BINARY_EXPRESSION_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_METHOD_BODY) != null) {", "-\t\t\tthis.insert_new_line_in_empty_method_body = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_METHOD_BODY)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_TYPE_DECLARATION) != null) {", "-\t\t\tthis.insert_new_line_in_empty_type_declaration = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_TYPE_DECLARATION)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ANONYMOUS_TYPE_DECLARATION) != null) {", "-\t\t\tthis.insert_new_line_in_empty_anonymous_type_declaration = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ANONYMOUS_TYPE_DECLARATION)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_BLOCK) != null) {", "-\t\t\tthis.insert_new_line_in_empty_block = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_BLOCK)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_EMPTY_LINES_TO_PRESERVE) != null) { ", "-\t\t\tthis.number_of_empty_lines_to_preserve = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_EMPTY_LINES_TO_PRESERVE));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_CLOSING_BRACE_IN_ARRAY_INITIALIZER) != null) {", "-\t\t\tthis.insert_new_line_before_closing_brace_in_array_initializer = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_CLOSING_BRACE_IN_ARRAY_INITIALIZER)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_MULTIPLE_FIELDS_ALIGNMENT) != null) { ", "-\t\t\tthis.multiple_fields_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_MULTIPLE_FIELDS_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BRACKET_IN_ARRAY_REFERENCE) != null) {", "-\t\t\tthis.insert_space_before_bracket_in_array_reference = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BRACKET_IN_ARRAY_REFERENCE)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_BRACKETS_IN_ARRAY_REFERENCE) != null) {", "-\t\t\tthis.insert_space_between_brackets_in_array_reference = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_BRACKETS_IN_ARRAY_REFERENCE)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BLOCK_STATEMENTS) != null) {", "-\t\t\tthis.indent_block_statements = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BLOCK_STATEMENTS)).booleanValue();", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ARRAY_INITIALIZER) != null) {", "-\t\t\tthis.insert_space_before_opening_brace_in_array_initializer = Boolean.valueOf((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ARRAY_INITIALIZER)).booleanValue();", "-\t\t}"]}], "num": 59136}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09149de05630599f749d3b43972f71f3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99e18bb5bf7006cfc26f176a744d434a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "59ccdbf9540bdb894570a3ebe1e5cfa637624073", "commitAfterChange": "29911619e9eb038f230f09e2190cd9ca1e9cfd72", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "diff": ["-\t\tif (this.didResolve) { // is a shared type reference which was already resolved", "+\t\tif ((this.bits & ASTNode.DidResolve) != 0) { // is a shared type reference which was already resolved", "-\t    this.didResolve = true;", "+\t\tthis.bits |= ASTNode.DidResolve;", "-\t\t\t    boolean isClassScope = scope.kind == Scope.CLASS_SCOPE;", "+\t\t\t\tboolean isClassScope = scope.kind == Scope.CLASS_SCOPE;", "-\t\t\t\t    TypeReference typeArgument = this.typeArguments[i];", "-\t\t\t\t    if (isClassScope) {", "-\t\t\t\t    \ttypeArgument.resolveType((ClassScope) scope);", "-\t\t\t\t    } else {", "-\t\t\t\t    \ttypeArgument.resolveType((BlockScope) scope, checkBounds);", "-\t\t\t\t    }", "-\t\t\t\t}\t\t\t\t", "+\t\t\t\t\tTypeReference typeArgument = this.typeArguments[i];", "+\t\t\t\t\tif (isClassScope) {", "+\t\t\t\t\t\ttypeArgument.resolveType((ClassScope) scope);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\ttypeArgument.resolveType((BlockScope) scope, checkBounds);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tthis.resolvedType = scope.getMemberType(token, enclosingType);\t\t    ", "+\t\t\tthis.resolvedType = scope.getMemberType(token, enclosingType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1546fd8b0e725d7c43d56e0b3076818", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "f4a4e733ec9a6ee8e5480938f7f746aa2704ad0d", "commitAfterChange": "f775b73fdbd5c38023656e438f9ccb262941721f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["+\t    boolean isClassScope = scope.kind == Scope.CLASS_SCOPE;", "+\t\t\t// be resilient, still attempt resolving arguments", "+\t\t\tif (binding instanceof ProblemReferenceBinding) {", "+\t\t\t    TypeReference[] args = this.typeArguments[((ProblemReferenceBinding) binding).compoundName.length - 1];", "+\t\t\t    if (args != null) {", "+\t\t\t\t\tint argLength = args.length;", "+\t\t\t\t\tfor (int j = 0; j < argLength; j++) {", "+\t\t\t\t\t    TypeReference typeArgument = args[j];", "+\t\t\t\t\t    if (isClassScope) {", "+\t\t\t\t\t    \ttypeArgument.resolveType((ClassScope) scope);", "+\t\t\t\t\t    } else {", "+\t\t\t\t\t    \ttypeArgument.resolveType((BlockScope) scope, checkBounds);", "+\t\t\t\t\t    }", "+\t\t\t\t\t}", "+\t\t\t    }\t\t\t\t", "+\t\t\t}", "-\t    boolean isClassScope = scope.kind == Scope.CLASS_SCOPE;", "+\t\t\t\t// be resilient, still attempt resolving arguments", "+\t\t\t    TypeReference[] args = this.typeArguments[i];", "+\t\t\t    if (args != null) {", "+\t\t\t\t\tint argLength = args.length;", "+\t\t\t\t\tfor (int j = 0; j < argLength; j++) {", "+\t\t\t\t\t    TypeReference typeArgument = args[j];", "+\t\t\t\t\t    if (isClassScope) {", "+\t\t\t\t\t    \ttypeArgument.resolveType((ClassScope) scope);", "+\t\t\t\t\t    } else {", "+\t\t\t\t\t    \ttypeArgument.resolveType((BlockScope) scope);", "+\t\t\t\t\t    }", "+\t\t\t\t\t}", "+\t\t\t    }\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4f4b98ddc390537f77ac6aa7ceda9ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "f775b73fdbd5c38023656e438f9ccb262941721f", "commitAfterChange": "17c3ff29c758ba3af32e32b7cf74f8bc1004af3b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["-\t\t\tif (binding instanceof ProblemReferenceBinding) {", "-\t\t\t    TypeReference[] args = this.typeArguments[((ProblemReferenceBinding) binding).compoundName.length - 1];", "+\t\t\tfor (int i = 0, max = this.tokens.length; i < max; i++) {", "+\t\t\t    TypeReference[] args = this.typeArguments[i];", "-\t\t\t    TypeReference[] args = this.typeArguments[i];", "-\t\t\t    if (args != null) {", "-\t\t\t\t\tint argLength = args.length;", "-\t\t\t\t\tfor (int j = 0; j < argLength; j++) {", "-\t\t\t\t\t    TypeReference typeArgument = args[j];", "-\t\t\t\t\t    if (isClassScope) {", "-\t\t\t\t\t    \ttypeArgument.resolveType((ClassScope) scope);", "-\t\t\t\t\t    } else {", "-\t\t\t\t\t    \ttypeArgument.resolveType((BlockScope) scope);", "-\t\t\t\t\t    }", "-\t\t\t\t\t}", "-\t\t\t    }\t\t\t\t", "+\t\t\t\tfor (int j = i; j < max; j++) {", "+\t\t\t\t    TypeReference[] args = this.typeArguments[j];", "+\t\t\t\t    if (args != null) {", "+\t\t\t\t\t\tint argLength = args.length;", "+\t\t\t\t\t\tfor (int k = 0; k < argLength; k++) {", "+\t\t\t\t\t\t    TypeReference typeArgument = args[k];", "+\t\t\t\t\t\t    if (isClassScope) {", "+\t\t\t\t\t\t    \ttypeArgument.resolveType((ClassScope) scope);", "+\t\t\t\t\t\t    } else {", "+\t\t\t\t\t\t    \ttypeArgument.resolveType((BlockScope) scope);", "+\t\t\t\t\t\t    }", "+\t\t\t\t\t\t}", "+\t\t\t\t    }\t\t\t\t", "+\t\t\t\t}"]}], "num": 1465}
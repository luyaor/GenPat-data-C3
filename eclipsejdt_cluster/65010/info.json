{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b20cdaec497183df9d68a78b0acefe22", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "594821c0dda8a56af649ef0bfe99caad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/BinaryExpressionFragmentBuilder.java", "commitBeforeChange": "9e5742b61aded25431e479f58d12ba05749a0cfe", "commitAfterChange": "375d61cac6e6ceaf21de776dc7872fd0618a786e", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic boolean visit(BinaryExpression binaryExpression, BlockScope scope)", "signatureAfterChange": "  \tpublic boolean visit(BinaryExpression binaryExpression, BlockScope scope)", "diff": ["+\t\tif (binaryExpression instanceof CombinedBinaryExpression) {", "+\t\t\tCombinedBinaryExpression expression = (CombinedBinaryExpression) binaryExpression;", "+\t\t\tif (expression.referencesTable != null) {", "+\t\t\t\treturn this.visit(expression, scope);", "+\t\t\t}", "+\t\t}", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4cdc20ad7e58dbaddc10c25953e5e6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "8477130b01f048bfc1fd1f484a88902aeefb2f38", "commitAfterChange": "ecd385ce2c6acd660d8fd4527c963683ed4e3124", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tboolean addConstraintsFromTypeParameters(TypeBinding subCandidate, ParameterizedTypeBinding ca, List<ConstraintFormula> constraints)", "signatureAfterChange": "  \tboolean addConstraintsFromTypeParameters(TypeBinding subCandidate, ParameterizedTypeBinding ca, List<ConstraintFormula> constraints)", "diff": ["+\t\tif (!(cb instanceof ParameterizedTypeBinding)) {", "+\t\t\t// if C is parameterized with its own type variables, there're no more constraints to be created here, otherwise let's fail", "+\t\t\treturn isInsignificantParameterized(ca);", "+\t\t}"]}], "num": 65010}
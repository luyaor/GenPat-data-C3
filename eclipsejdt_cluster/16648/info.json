{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f74fd4e95d587c94e878cfe53521d8a7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c559ddf077df1659a6c195e4939eacd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "0692ba5ff15b98317f2a4290688c2b50bed5ba7f", "commitAfterChange": "c1e0d163b88855506518c675888a22f1264cd248", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t}\t\t\t", "+\t\t\t}", "+\t\t\tif (currentArg.equals(\"-1.6\") || currentArg.equals(\"-6\") || currentArg.equals(\"-6.0\")) { //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tdidSpecifyCompliance = true;", "+\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);", "+\t\t\t\tmode = Default;", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\t\t} else if (currentArg.equals(\"1.6\") || currentArg.equals(\"6\") || currentArg.equals(\"6.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "+\t\t\t\t\tif (didSpecifyCompliance && CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_6) {", "+\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);", "+\t\t\t\t} else if (currentArg.equals(\"1.6\") || currentArg.equals(\"6\") || currentArg.equals(\"6.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_6);", "+\t\t\t} else if (CompilerOptions.VERSION_1_6.equals(version)) {", "+\t\t\t\tif (!didSpecifySource) this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_6);", "+\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "+\t\t\t} else if (CompilerOptions.VERSION_1_6.equals(version)) {", "+\t\t\t\tif (!didSpecifyCompliance) this.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);", "+\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "+\t\t\t// target must be 1.6 if source is 1.6", "+\t\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Source)) >= ClassFileConstants.JDK1_6", "+\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_TargetPlatform)) < ClassFileConstants.JDK1_6){ ", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource\", (String)this.options.get(CompilerOptions.OPTION_TargetPlatform), CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "+\t\t\t}", "-\t\t// compliance must be 1.5 if source is 1.5", "-\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_5)", "+\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_6)", "+\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_6) {", "+\t\t\t// compliance must be 1.6 if source is 1.6", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "+\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_5)", "+\t\t\t// compliance must be 1.5 if source is 1.5", "-\t\t} else ", "+\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)", "+\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_4) {", "-\t\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)", "-\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_4) { ", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "+\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_6)) {", "+\t\t\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "+\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)) {", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_5)) {", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "+\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_6)) {", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d79a63f6093f31440700ec912b06e34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "50007b788c71b6aca4f5dbd4507152d8d8e0ca96", "commitAfterChange": "0d7bf900fea9cd1a54f008e97901ffa79f4d92cb", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t if (CompilerOptions.VERSION_1_4.equals(version)) {", "+\t\t\t// default is source 1.3 target 1.2 and compliance 1.4", "+\t\t\tif (CompilerOptions.VERSION_1_4.equals(version)) {", "+\t\tfinal Object sourceVersion = this.options.get(CompilerOptions.OPTION_Source);", "+\t\tfinal Object compliance = this.options.get(CompilerOptions.OPTION_Compliance);", "-\t\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Source)) >= ClassFileConstants.JDK1_6", "-\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_TargetPlatform)) < ClassFileConstants.JDK1_6){ ", "+\t\t\tfinal Object targetVersion = this.options.get(CompilerOptions.OPTION_TargetPlatform); ", "+\t\t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) >= ClassFileConstants.JDK1_6", "+\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(targetVersion) < ClassFileConstants.JDK1_6){ ", "-\t\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Source)) >= ClassFileConstants.JDK1_5", "-\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_TargetPlatform)) < ClassFileConstants.JDK1_5){ ", "+\t\t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) >= ClassFileConstants.JDK1_5", "+\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(targetVersion) < ClassFileConstants.JDK1_5){ ", "-\t   \t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Source)) >= ClassFileConstants.JDK1_4", "-\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_TargetPlatform)) < ClassFileConstants.JDK1_4){ ", "+\t   \t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) >= ClassFileConstants.JDK1_4", "+\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(targetVersion) < ClassFileConstants.JDK1_4){ ", "-\t\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_TargetPlatform))){ ", "+\t\t\tif (CompilerOptions.versionToJdkLevel(compliance) < CompilerOptions.versionToJdkLevel(targetVersion)){ ", "-\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_6)", "-\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_6) {", "+\t\tif (sourceVersion.equals(CompilerOptions.VERSION_1_6)", "+\t\t\t\t&& CompilerOptions.versionToJdkLevel(compliance) < ClassFileConstants.JDK1_6) {", "-\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_5)", "-\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_5) {", "+\t\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_5)", "+\t\t\t\t&& CompilerOptions.versionToJdkLevel(compliance) < ClassFileConstants.JDK1_5) {", "-\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)", "-\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_4) {", "+\t\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_4)", "+\t\t\t\t&& CompilerOptions.versionToJdkLevel(compliance) < ClassFileConstants.JDK1_4) {", "-\t\t\tif (this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\tif (compliance.equals(CompilerOptions.VERSION_1_3)) {", "-\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)) {", "-\t\t\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t} else if (compliance.equals(CompilerOptions.VERSION_1_4)) {", "+\t\t\t\tif (sourceVersion.equals(CompilerOptions.VERSION_1_3)) {", "-\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)) {", "+\t\t\t\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_4)) {", "-\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_5)) {", "-\t\t\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t} else if (compliance.equals(CompilerOptions.VERSION_1_5)) {", "+\t\t\t\tif (sourceVersion.equals(CompilerOptions.VERSION_1_3)) {", "-\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)) {", "+\t\t\t\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_4)) {", "-\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_5)) {", "+\t\t\t\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_5)) {", "-\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_6)) {", "-\t\t\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t} else if (compliance.equals(CompilerOptions.VERSION_1_6)) {", "+\t\t\t\tif (sourceVersion.equals(CompilerOptions.VERSION_1_3)) {", "-\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)) {", "+\t\t\t\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_4)) {", "-\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_5)) {", "+\t\t\t\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_5)) {", "-\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_6)) {", "+\t\t\t\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_6)) {"]}], "num": 16648}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34f4b31c6c383e1aa421c7860cbe9061", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31091dfca2a91f749fa353b0149598ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "83dc88df7a1508be17b764df4120ac8a34178f58", "commitAfterChange": "f428b70bc80bfdae47260a00a8636113b21b698c", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " \t \tprivate void createType(TypeBinding type, Scope scope, StringBuffer completion)", "signatureAfterChange": " \t \tprivate void createType(TypeBinding type, Scope scope, StringBuffer completion)", "diff": ["-\t\tif (type.isBaseType()) {", "-\t\t\tcompletion.append(type.sourceName());", "-\t\t} else if (type.isTypeVariable()) {", "-\t\t\tcompletion.append(type.sourceName());", "-\t\t} else if (type.isWildcard()) {", "-\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) type;", "-\t\t\tcompletion.append('?');", "-\t\t\tswitch (wildcardBinding.boundKind) {", "-\t\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\t\tcompletion.append(' ');", "-\t\t\t\t\tcompletion.append(EXTENDS);", "-\t\t\t\t\tcompletion.append(' ');", "-\t\t\t\t\tcreateType(wildcardBinding.bound, scope, completion);", "-\t\t\t\t\tif(wildcardBinding.otherBounds != null) {", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tint length = wildcardBinding.otherBounds.length;", "-\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\tcompletion.append(' ');", "-\t\t\t\t\t\t\tcompletion.append('&');", "-\t\t\t\t\t\t\tcompletion.append(' ');", "-\t\t\t\t\t\t\tcreateType(wildcardBinding.otherBounds[i], scope, completion);", "+\t\tswitch (type.kind()) {", "+\t\t\tcase Binding.BASE_TYPE :", "+\t\t\t\tcompletion.append(type.sourceName());", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\tcase Binding.INTERSECTION_TYPE : // TODO (david) need to handle intersection type specifically", "+\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) type;", "+\t\t\t\tcompletion.append('?');", "+\t\t\t\tswitch (wildcardBinding.boundKind) {", "+\t\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\t\tcompletion.append(' ');", "+\t\t\t\t\t\tcompletion.append(EXTENDS);", "+\t\t\t\t\t\tcompletion.append(' ');", "+\t\t\t\t\t\tcreateType(wildcardBinding.bound, scope, completion);", "+\t\t\t\t\t\tif(wildcardBinding.otherBounds != null) {", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tint length = wildcardBinding.otherBounds.length;", "+\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\t\tcompletion.append(' ');", "+\t\t\t\t\t\t\t\tcompletion.append('&');", "+\t\t\t\t\t\t\t\tcompletion.append(' ');", "+\t\t\t\t\t\t\t\tcreateType(wildcardBinding.otherBounds[i], scope, completion);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Wildcard.SUPER:", "-\t\t\t\t\tcompletion.append(' ');", "-\t\t\t\t\tcompletion.append(SUPER);", "-\t\t\t\t\tcompletion.append(' ');", "-\t\t\t\t\tcreateType(wildcardBinding.bound, scope, completion);", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t} else if (type.isArrayType()) {", "-\t\t\tcreateType(type.leafComponentType(), scope, completion);", "-\t\t\tint dim = type.dimensions();", "-\t\t\tfor (int i = 0; i < dim; i++) {", "-\t\t\t\tcompletion.append('[');", "-\t\t\t\tcompletion.append(']');", "-\t\t\t}", "-\t\t} else if (type.isParameterizedType()) {", "-\t\t\tParameterizedTypeBinding parameterizedType = (ParameterizedTypeBinding) type;", "-\t\t\tif (type.isMemberType()) {", "-\t\t\t\tcreateType(parameterizedType.enclosingType(), scope, completion);", "-\t\t\t\tcompletion.append('.');", "-\t\t\t\tcompletion.append(parameterizedType.sourceName);", "-\t\t\t} else {", "-\t\t\t\tcompletion.append(CharOperation.concatWith(parameterizedType.genericType().compoundName, '.'));", "-\t\t\t}\t    ", "-\t\t\tif (parameterizedType.arguments != null) {", "-\t\t\t\tcompletion.append('<');", "-\t\t\t    for (int i = 0, length = parameterizedType.arguments.length; i < length; i++) {", "-\t\t\t        if (i != 0) completion.append(',');", "-\t\t\t        createType(parameterizedType.arguments[i], scope, completion);", "-\t\t\t    }", "-\t\t\t    completion.append('>');", "-\t\t\t}", "-\t\t} else {", "-\t\t\tchar[] packageName = type.qualifiedPackageName();", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\t\tcompletion.append(' ');", "+\t\t\t\t\t\tcompletion.append(SUPER);", "+\t\t\t\t\t\tcompletion.append(' ');", "+\t\t\t\t\t\tcreateType(wildcardBinding.bound, scope, completion);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.ARRAY_TYPE :", "+\t\t\t\tcreateType(type.leafComponentType(), scope, completion);", "+\t\t\t\tint dim = type.dimensions();", "+\t\t\t\tfor (int i = 0; i < dim; i++) {", "+\t\t\t\t\tcompletion.append('[');", "+\t\t\t\t\tcompletion.append(']');", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\tParameterizedTypeBinding parameterizedType = (ParameterizedTypeBinding) type;", "+\t\t\t\tif (type.isMemberType()) {", "+\t\t\t\t\tcreateType(parameterizedType.enclosingType(), scope, completion);", "+\t\t\t\t\tcompletion.append('.');", "+\t\t\t\t\tcompletion.append(parameterizedType.sourceName);", "+\t\t\t\t} else {", "+\t\t\t\t\tcompletion.append(CharOperation.concatWith(parameterizedType.genericType().compoundName, '.'));", "+\t\t\t\t}\t    ", "+\t\t\t\tif (parameterizedType.arguments != null) {", "+\t\t\t\t\tcompletion.append('<');", "+\t\t\t\t    for (int i = 0, length = parameterizedType.arguments.length; i < length; i++) {", "+\t\t\t\t        if (i != 0) completion.append(',');", "+\t\t\t\t        createType(parameterizedType.arguments[i], scope, completion);", "+\t\t\t\t    }", "+\t\t\t\t    completion.append('>');", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\tchar[] packageName = type.qualifiedPackageName();", "+\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "629f5db0d1fb55324dc41a4c14e0d416", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tpublic String getName()", "signatureAfterChange": "  \tpublic String getName()", "diff": ["-\t\tif (isWildcardType()) {", "-\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) this.binding;", "-\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\tbuffer.append(TypeConstants.WILDCARD_NAME);", "-\t\t\tif (wildcardBinding.bound != null) {", "-\t\t\t\tswitch(wildcardBinding.kind) {", "-\t\t\t        case Wildcard.SUPER :", "-\t\t\t        \tbuffer.append(TypeConstants.WILDCARD_SUPER);", "-\t\t\t            break;", "-\t\t\t        case Wildcard.EXTENDS :", "-\t\t\t        \tbuffer.append(TypeConstants.WILDCARD_EXTENDS);", "-\t\t\t\t}", "-\t\t\t\tbuffer.append(getBound().getName());", "-\t\t\t}", "-\t\t\treturn String.valueOf(buffer);", "-\t\t}", "-\t\tif (isParameterizedType()) {", "-\t\t\tParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) this.binding;", "-\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\tbuffer.append(parameterizedTypeBinding.sourceName());", "-\t\t\tITypeBinding[] typeArguments = getTypeArguments();", "-\t\t\tfinal int typeArgumentsLength = typeArguments.length;", "-\t\t\tif (typeArgumentsLength != 0) {", "-\t\t\t\tbuffer.append('<');", "-\t\t\t\tfor (int i = 0, max = typeArguments.length; i < max; i++) {", "-\t\t\t\t\tif (i > 0) {", "-\t\t\t\t\t\tbuffer.append(',');", "+\t\tStringBuffer buffer;", "+\t\tswitch (this.binding.kind()) {", "+", "+\t\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) this.binding;", "+\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\tbuffer.append(TypeConstants.WILDCARD_NAME);", "+\t\t\t\tif (wildcardBinding.bound != null) {", "+\t\t\t\t\tswitch(wildcardBinding.boundKind) {", "+\t\t\t\t        case Wildcard.SUPER :", "+\t\t\t\t        \tbuffer.append(TypeConstants.WILDCARD_SUPER);", "+\t\t\t\t            break;", "+\t\t\t\t        case Wildcard.EXTENDS :", "+\t\t\t\t        \tbuffer.append(TypeConstants.WILDCARD_EXTENDS);", "-\t\t\t\t\tbuffer.append(typeArguments[i].getName());", "+\t\t\t\t\tbuffer.append(getBound().getName());", "-\t\t\t\tbuffer.append('>');\t", "-\t\t\t}", "-\t\t\treturn String.valueOf(buffer);", "+\t\t\t\treturn String.valueOf(buffer);", "+\t\t\t\t", "+\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\tif (isCapture()) {", "+\t\t\t\t\treturn NO_NAME;", "+\t\t\t\t}", "+\t\t\t\tTypeVariableBinding typeVariableBinding = (TypeVariableBinding) this.binding;", "+\t\t\t\treturn new String(typeVariableBinding.sourceName);", "+\t\t\t\t", "+\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) this.binding;", "+\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\tbuffer.append(parameterizedTypeBinding.sourceName());", "+\t\t\t\tITypeBinding[] typeArguments = getTypeArguments();", "+\t\t\t\tfinal int typeArgumentsLength = typeArguments.length;", "+\t\t\t\tif (typeArgumentsLength != 0) {", "+\t\t\t\t\tbuffer.append('<');", "+\t\t\t\t\tfor (int i = 0, max = typeArguments.length; i < max; i++) {", "+\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\tbuffer.append(',');", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbuffer.append(typeArguments[i].getName());", "+\t\t\t\t\t}", "+\t\t\t\t\tbuffer.append('>');\t", "+\t\t\t\t}", "+\t\t\t\treturn String.valueOf(buffer);", "+\t\t\t\t", "+\t\t\tcase Binding.RAW_TYPE :\t\t\t\t", "+\t\t\t\treturn getTypeDeclaration().getName();", "+", "+\t\t\tcase Binding.ARRAY_TYPE :", "+\t\t\t\tITypeBinding elementType = getElementType();", "+\t\t\t\tif (elementType.isLocal() || elementType.isAnonymous() || elementType.isCapture()) {", "+\t\t\t\t\treturn NO_NAME;", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tint dimensions = getDimensions();", "+\t\t\t\tchar[] brackets = new char[dimensions * 2];", "+\t\t\t\tfor (int i = dimensions * 2 - 1; i >= 0; i -= 2) {", "+\t\t\t\t\tbrackets[i] = ']';", "+\t\t\t\t\tbrackets[i - 1] = '[';", "+\t\t\t\t}", "+\t\t\t\tbuffer = new StringBuffer(elementType.getName());", "+\t\t\t\tbuffer.append(brackets);", "+\t\t\t\treturn String.valueOf(buffer);", "+", "+\t\t\tdefault :", "+\t\t\t\tif (isPrimitive() || isNullType()) {", "+\t\t\t\t\tBaseTypeBinding baseTypeBinding = (BaseTypeBinding) this.binding;", "+\t\t\t\t\treturn new String(baseTypeBinding.simpleName);", "+\t\t\t\t}", "+\t\t\t\tif (isAnonymous()) {", "+\t\t\t\t\treturn NO_NAME;", "+\t\t\t\t}", "+\t\t\t\treturn new String(this.binding.sourceName());", "-\t\tif (isRawType()) {", "-\t\t\treturn getTypeDeclaration().getName();", "-\t\t}", "-\t\tif (isPrimitive() || isNullType()) {", "-\t\t\tBaseTypeBinding baseTypeBinding = (BaseTypeBinding) this.binding;", "-\t\t\treturn new String(baseTypeBinding.simpleName);", "-\t\t}", "-\t\tif (isArray()) {", "-\t\t\tint dimensions = getDimensions();", "-\t\t\tchar[] brackets = new char[dimensions * 2];", "-\t\t\tfor (int i = dimensions * 2 - 1; i >= 0; i -= 2) {", "-\t\t\t\tbrackets[i] = ']';", "-\t\t\t\tbrackets[i - 1] = '[';", "-\t\t\t}", "-\t\t\tStringBuffer buffer = new StringBuffer(getElementType().getName());", "-\t\t\tbuffer.append(brackets);", "-\t\t\treturn String.valueOf(buffer);", "-\t\t}", "-\t\tif (isAnonymous()) {", "-\t\t\treturn NO_NAME;", "-\t\t}", "-\t\tif (isTypeVariable()) {", "-\t\t\tTypeVariableBinding typeVariableBinding = (TypeVariableBinding) this.binding;", "-\t\t\treturn new String(typeVariableBinding.sourceName);", "-\t\t}", "-\t\treturn new String(this.binding.sourceName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5341719ece51db009e218387019965d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "4374063ffc07d9e5a6e12269e991cbcb89c32543", "commitAfterChange": "996ea5997dae4e7ec05722a233804ef32ae29f15", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic String getName()", "signatureAfterChange": "  \tpublic String getName()", "diff": ["-\t\tif (isClass() || isInterface() || isEnum()) {", "-\t\t\tReferenceBinding referenceBinding = (ReferenceBinding) this.binding;", "-\t\t\tif (referenceBinding.isAnonymousType()) {", "-\t\t\t\treturn NO_NAME;", "-\t\t\t} else {", "-\t\t\t\tchar[] shortName = referenceBinding.shortReadableName();", "-\t\t\t\tif (referenceBinding.isMemberType() || referenceBinding.isLocalType()) {", "-\t\t\t\t\treturn new String(CharOperation.subarray(shortName, CharOperation.lastIndexOf('.', shortName) + 1, shortName.length));", "-\t\t\t\t} else {", "-\t\t\t\t\treturn new String(shortName);", "+\t\tif (isWildcardType()) {", "+\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) this.binding;", "+\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\tbuffer.append(TypeConstants.WILDCARD_NAME);", "+\t\t\tif (wildcardBinding.bound != null) {", "+\t\t\t\tswitch(wildcardBinding.kind) {", "+\t\t\t        case Wildcard.SUPER :", "+\t\t\t        \tbuffer.append(TypeConstants.WILDCARD_SUPER);", "+\t\t\t            break;", "+\t\t\t        case Wildcard.EXTENDS :", "+\t\t\t        \tbuffer.append(TypeConstants.WILDCARD_EXTENDS);", "+\t\t\t\tbuffer.append(getBound().getName());", "-\t\t} else if (this.binding.isArrayType()) {", "-\t\t\tArrayBinding arrayBinding = (ArrayBinding) this.binding;", "-\t\t\tint dimensions = arrayBinding.dimensions;", "+\t\t\treturn String.valueOf(buffer);", "+\t\t}", "+\t\tif (isParameterizedType()) {", "+\t\t\tParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) this.binding;", "+\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\tbuffer.append(parameterizedTypeBinding.sourceName());", "+\t\t\tITypeBinding[] typeArguments = getTypeArguments();", "+\t\t\tfinal int typeArgumentsLength = typeArguments.length;", "+\t\t\tif (typeArgumentsLength != 0) {", "+\t\t\t\tbuffer.append('<');", "+\t\t\t\tfor (int i = 0, max = typeArguments.length; i < max; i++) {", "+\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\tbuffer.append(',');", "+\t\t\t\t\t}", "+\t\t\t\t\tbuffer.append(typeArguments[i].getName());", "+\t\t\t\t}", "+\t\t\t\tbuffer.append('>');\t", "+\t\t\t}", "+\t\t\treturn String.valueOf(buffer);", "+\t\t}", "+\t\tif (isRawType()) {", "+\t\t\treturn getErasure().getName();", "+\t\t}", "+\t\tif (isPrimitive() || isNullType()) {", "+\t\t\tBaseTypeBinding baseTypeBinding = (BaseTypeBinding) this.binding;", "+\t\t\treturn new String(baseTypeBinding.simpleName);", "+\t\t}", "+\t\tif (isArray()) {", "+\t\t\tint dimensions = getDimensions();", "-\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding leafComponentTypeBinding = arrayBinding.leafComponentType;", "-\t\t\tif ((leafComponentTypeBinding.isClass() || leafComponentTypeBinding.isInterface() || leafComponentTypeBinding.isEnum())", "-\t\t\t\t\t&& !leafComponentTypeBinding.isTypeVariable()) {", "-\t\t\t\tReferenceBinding referenceBinding2 = (ReferenceBinding) leafComponentTypeBinding;", "-\t\t\t\tchar[] shortName = referenceBinding2.shortReadableName();", "-\t\t\t\tif (referenceBinding2.isMemberType() || referenceBinding2.isLocalType()) {", "-\t\t\t\t\tbuffer.append(CharOperation.subarray(shortName, CharOperation.lastIndexOf('.', shortName) + 1, shortName.length));", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(shortName);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tbuffer.append(leafComponentTypeBinding.readableName());", "-\t\t\t}", "+\t\t\tStringBuffer buffer = new StringBuffer(getElementType().getName());", "-\t\t\treturn buffer.toString();", "-\t\t} else {", "-\t\t\treturn new String(this.binding.readableName());", "+\t\t\treturn String.valueOf(buffer);", "+\t\tif (isAnonymous()) {", "+\t\t\treturn NO_NAME;", "+\t\t}", "+\t\tif (isTypeVariable()) {", "+\t\t\tTypeVariableBinding typeVariableBinding = (TypeVariableBinding) this.binding;", "+\t\t\treturn new String(typeVariableBinding.sourceName);", "+\t\t}", "+\t\treturn new String(this.binding.sourceName());"]}], "num": 43575}
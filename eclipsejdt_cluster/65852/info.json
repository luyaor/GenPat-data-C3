{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9bd93acd8249f2130066d2151603f6c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b692cf33c81cbabbc0e2af299481dd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "6dc0991802c8a76a225272c60d27e3132dfbe9b2", "commitAfterChange": "9a8dbf2c325d5ae6a7dd8f3876b878a799f4a5c2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void acceptMethodTypeParameter(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor, char[] typeParameterName, boolean isDeclaration, int start, int end)", "signatureAfterChange": " public void acceptMethodTypeParameter(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector,int selectorStart, int selectorEnd, char[] typeParameterName, boolean isDeclaration, int start, int end)", "diff": ["-public void acceptMethodTypeParameter(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor, char[] typeParameterName, boolean isDeclaration, int start, int end) {", "-\t// TODO missing implementation", "+public void acceptMethodTypeParameter(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector,int selectorStart, int selectorEnd, char[] typeParameterName, boolean isDeclaration, int start, int end) {", "+\tIType type = resolveTypeByLocation(declaringTypePackageName, declaringTypeName,", "+\t\t\tNameLookup.ACCEPT_CLASSES | NameLookup.ACCEPT_INTERFACES,", "+\t\t\tselectorStart, selectorEnd);", "-\tif(SelectionEngine.DEBUG){", "-\t\tSystem.out.print(\"SELECTION - acceptTypeParameter(\"); //$NON-NLS-1$", "-\t\tSystem.out.print(declaringTypePackageName);", "-\t\tSystem.out.print('.');", "-\t\tSystem.out.print(declaringTypeName);", "-\t\tSystem.out.print('.');", "-\t\tSystem.out.print('<');", "-\t\tSystem.out.print(typeParameterName);", "-\t\tSystem.out.print('>');", "-\t\tSystem.out.print(selector);", "-\t\tSystem.out.println(\"(...))\"); //$NON-NLS-1$", "+\tif(type != null) {", "+\t\tIMethod method = null;", "+\t\t", "+\t\tString name = new String(selector);", "+\t\tIMethod[] methods = null;", "+\t\t", "+\t\ttry {", "+\t\t\tmethods = type.getMethods();", "+\t\t\tdone : for (int i = 0; i < methods.length; i++) {", "+\t\t\t\tISourceRange range = methods[i].getNameRange();", "+\t\t\t\tif(range.getOffset() >= selectorStart", "+\t\t\t\t\t\t&& range.getOffset() + range.getLength() <= selectorEnd", "+\t\t\t\t\t\t&& methods[i].getElementName().equals(name)) {", "+\t\t\t\t\tmethod = methods[i];", "+\t\t\t\t\tbreak done;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (JavaModelException e) {", "+\t\t\t//nothing to do", "+\t\t}", "+", "+\t\tif(method == null) {", "+//\t\t\taddElement(type);", "+\t\t} else {", "+//\t\t\t TODO missing implementation", "+//\t\t\tif(???) {", "+//\t\t\t\taddElement(method);", "+//\t\t\t} else {", "+\t\t\t\tif(SelectionEngine.DEBUG){", "+\t\t\t\t\tSystem.out.print(\"SELECTION - acceptTypeParameter(\"); //$NON-NLS-1$", "+\t\t\t\t\tSystem.out.print(declaringTypePackageName);", "+\t\t\t\t\tSystem.out.print('.');", "+\t\t\t\t\tSystem.out.print(declaringTypeName);", "+\t\t\t\t\tSystem.out.print('.');", "+\t\t\t\t\tSystem.out.print('<');", "+\t\t\t\t\tSystem.out.print(typeParameterName);", "+\t\t\t\t\tSystem.out.print('>');", "+\t\t\t\t\tSystem.out.print(selector);", "+\t\t\t\t\tSystem.out.println(\"(...))\"); //$NON-NLS-1$", "+\t\t\t\t}", "+//\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6367e6e6e76c12a1a8b42424a5c2471c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprotected NameLookup getNameLookup()", "signatureAfterChange": " \t \tHashMap getAllPackageFragments(JavaProject project)", "diff": ["-\t */", "-\tprotected NameLookup getNameLookup() {", "-", "-\t\treturn fNameLookup;", "+\tHashMap getAllPackageFragments(JavaProject project) {", "+\t\tif (this.allPkgFragmentsCache == null) {", "+\t\t\tHashMap cache = new HashMap();", "+\t\t\tIPackageFragmentRoot[] roots = getAllPackageFragmentRoots(project);", "+\t\t\tIPackageFragment[] frags = this.getPackageFragmentsInRoots(roots, project);", "+\t\t\tfor (int i= 0; i < frags.length; i++) {", "+\t\t\t\tIPackageFragment fragment= frags[i];", "+\t\t\t\tIPackageFragment[] entry= (IPackageFragment[]) cache.get(fragment.getElementName());", "+\t\t\t\tif (entry == null) {", "+\t\t\t\t\tentry= new IPackageFragment[1];", "+\t\t\t\t\tentry[0]= fragment;", "+\t\t\t\t\tcache.put(fragment.getElementName(), entry);", "+\t\t\t\t} else {", "+\t\t\t\t\tIPackageFragment[] copy= new IPackageFragment[entry.length + 1];", "+\t\t\t\t\tSystem.arraycopy(entry, 0, copy, 0, entry.length);", "+\t\t\t\t\tcopy[entry.length]= fragment;", "+\t\t\t\t\tcache.put(fragment.getElementName(), copy);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.allPkgFragmentsCache = cache;", "+\t\t}", "+\t\treturn this.allPkgFragmentsCache;"]}], "num": 65852}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08beb6304ad4333bae28d6c9c08a6d63", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4605e5541730ca3240458071edd96527", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "51ef1f3e636c416c08f983016f64f795f2b9cc74", "commitAfterChange": "9d3908e6916e224f861c3acffb456d39563ef22b", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " \tpublic void test102()", "signatureAfterChange": " \tpublic void test102()", "diff": ["-\t        \"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tSet<SomeEnum> set1 = EnumSet.of(SomeEnum.A);\\n\" + ", "-\t\t\t\"\t                     ^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: EnumSet is a raw type. References to generic type EnumSet<E> should be parameterized\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "-\t\t\t\"\tSet<SomeEnum> set2 = EnumSet.of(SomeEnum.foo());\\n\" + ", "-\t\t\t\"\t                     ^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: EnumSet is a raw type. References to generic type EnumSet<E> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 15)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 19)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 19)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e04fd32c63ea03a8ed927aab97cef0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5147f5a5f17d6e4dce9e06801af75e51b27b5773", "commitAfterChange": "a86b349626dbe62e03a6d150d88d335126baba70", "methodNumberBeforeChange": 818, "methodNumberAfterChange": 818, "signatureBeforeChange": " public void test812()", "signatureAfterChange": " public void test812()", "diff": ["-\t\t\"1. WARNING in X.java (at line 2)\\r\\n\" + ", "-\t\t\"\tprivate T t;\\r\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\"\tprivate T t;\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 3)\\r\\n\" + ", "-\t\t\"\tprivate X<?>.Inner inner;\\r\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\"\tprivate X<?>.Inner inner;\\n\" + ", "-\t\t\"3. WARNING in X.java (at line 4)\\r\\n\" + ", "-\t\t\"\tprivate X<?>.Inner[] inners;\\r\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tprivate X<?>.Inner[] inners;\\n\" + ", "-\t\t\"4. WARNING in X.java (at line 7)\\r\\n\" + ", "-\t\t\"\tthis.inner = new X.Inner();\\r\\n\" + ", "-\t\t\"\t             ^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type safety: The expression of type X.Inner needs unchecked conversion to conform to X<?>.Inner\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"5. WARNING in X.java (at line 8)\\r\\n\" + ", "-\t\t\"\tthis.inners = new X.Inner[10];\\r\\n\" + ", "-\t\t\"\t              ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type safety: The expression of type X.Inner[] needs unchecked conversion to conform to X<?>.Inner[]\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"6. ERROR in X.java (at line 9)\\r\\n\" + ", "-\t\t\"\tZork z;\\r\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\"\tZork z;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf080832a1b9f95ff0623a3bbe62cc54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 158, "signatureBeforeChange": " \tpublic void test0154_try_finally()", "signatureAfterChange": " public void test0504_try_finally()", "diff": ["-\t// null analysis -- try/finally", "-\tpublic void test0154_try_finally() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t void foo(X x) {\\n\" + ", "-\t\t\t\t\"\t\t x = null;\\n\" + ", "-\t\t\t\t\"\t\t try {\\n\" + ", "-\t\t\t\t\"\t\t\t x = null;\\n\" +           ", "-\t\t\t\t\"\t\t } finally {\\n\" + ", "-\t\t\t\t\"\t\t\t if (x != null) { /* */ }\\n\" + // complain, null in both paths ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t},", "-\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\"\tx = null;\\n\" + ", "-\t\t\"The variable x can only be null; it was either set to null or checked for null when last used\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "-\t\t\"\tif (x != null) { /* */ }\\n\" + ", "-\t\t\"The variable x can only be null; it was either set to null or checked for null when last used\\n\" + ", "-\t}", "+// null analysis -- try/finally", "+public void test0504_try_finally() {", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  void foo(X x) {\\n\" + ", "+\t\t\t\"    x = null;\\n\" + ", "+\t\t\t\"    try {\\n\" + ", "+\t\t\t\"    } finally {\\n\" + ", "+\t\t\t\"      if (x != null) { /* */ }\\n\" + // complain null ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tif (x != null) { /* */ }\\n\" + ", "+\t\t\"\t    ^\\n\" + ", "+\t\t\"The variable x can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"----------\\n\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c55e2ba583dbd46d566ccc97d2016c12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "commitAfterChange": "c3fe3a5d67fbf0c540d6fc63f233f6806516af9c", "methodNumberBeforeChange": 386, "methodNumberAfterChange": 386, "signatureBeforeChange": " \tpublic void test384()", "signatureAfterChange": " \tpublic void test384()", "diff": ["-\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "-\t\t\t\"\tClass<? extends String> foo() { return null; }\\n\" + ", "-\t\t\t\"\t                        ^^^^^\\n\" + ", "-\t\t\t\"The method foo() of type X should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tClass<? extends String>[] foo2() { return null; }\\n\" + ", "-\t\t\t\"\t                          ^^^^^^\\n\" + ", "-\t\t\t\"The method foo2() of type X should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f174c4307043cf07179c5a802350ec9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " public void test0026()", "signatureAfterChange": " public void test0026()", "diff": ["-// NOTE: THIS TEST MOST LIKELY CAPTURES THE WRONG OUTPUT FOR JAVA 8. AS WE FIX TYPE INFERENCE ISSUES, THIS MAY FAIL.", "+// FIXME(stephan): javac8 does not report the ambiguity, re-check after integrating inference with overload resolution", "-\t\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\t\"\tX<Number> x = new X<>(1);\\n\" + ", "-\t\t\t\"\t              ^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from X<Integer> to X<Number>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\t\"\tX<Object> x5 = new X<>(1);\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from X<Integer> to X<Object>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 15)\\n\" + "]}], "num": 5865}
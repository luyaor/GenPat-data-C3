{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a03965ace43cad123effec0f90c7451", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75c9c91af24b5a220ef552330fb6bb7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "f427d3141850bb05b4f61e7a5e8cfb86bf8a4b90", "commitAfterChange": "bdac2d6f93f2862f6a2ad385b856d2f81a163437", "methodNumberBeforeChange": 144, "methodNumberAfterChange": 145, "signatureBeforeChange": " public void test124_unusual_classpath()", "signatureAfterChange": " public void test124_classpath ()", "diff": ["-public void test124_unusual_classpath(){", "-\tthis.runNegativeTest(", "+public void test124_classpath (){", "+\trunClasspathTest(", "+\t\tOUTPUT_DIR + \"[+OK2\" + File.pathSeparator +\t\"-d ~Warn\" + ", "+\t\t\t\tFile.pathSeparator + \"-KO]\", ", "-\t\t\t\"X.java\",", "-\t\t\t\"/** */\\n\" + ", "-\t\t\t\"public class X extends Zork {\\n\" + ", "-\t\t\t\"}\",", "+\t\t\tOUTPUT_DIR, ", "+\t\t\t\t\"{pattern=OK2 (ACCESSIBLE), pattern=d ~Warn (NON ACCESSIBLE), pattern=KO (NON ACCESSIBLE)}\",", "+\t\t\t\tnull,", "-        \"\\\"\" + OUTPUT_DIR +  File.separator + \"X.java\\\"\"", "-        + \" -1.5 -g -preserveAllLocals\"", "-        + \" -cp \\\"\" + OUTPUT_DIR + \"[+OK2\" + File.pathSeparator +  ", "-        \t\"-d ~Warn\" + File.pathSeparator + \"-KO]\\\"\"", "-        + \" -warn:+deprecation,syntheticAccess,uselessTypeCheck,unsafe,finalBound,unusedLocal\" ", "-        + \" -proceedOnError -referenceInfo\"", "-        + \" -d \\\"\" + OUTPUT_DIR + \"\\\"\", ", "-        \"\", ", "-        \"----------\\n\" + ", "-        \"1. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 2)\\n\" + ", "-        \"\tpublic class X extends Zork {\\n\" + ", "-        \"\t                       ^^^^\\n\" + ", "-        \"Zork cannot be resolved to a type\\n\" + ", "-        \"----------\\n\" + ", "-        \"1 problem (1 error)\",", "-        true);", "+\t\tnull);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e390a7ddc502eb46f6d98abe18706a48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test025() throws Exception", "signatureAfterChange": " \t \tpublic void test039_field() throws Exception", "diff": ["-\t// type argument method call", "-\tpublic void test025() throws Exception {", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"\tstatic <T, U> T foo(T t, U u) {\\n\" +", "-\t\t\t\t\"\t\treturn t;\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\tSystem.out.println(X.<@A @B(1) String[], @C('-') X>foo(new String[]{\\\"SUCCESS\\\"}, null)[0]);\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "+\t", "+\tpublic void test039_field() throws Exception {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "-\t\t\t\t\"C.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "-\t\t\t\t\"@interface C {\\n\" + ", "-\t\t\t\t\"\tchar value() default '-';\\n\" + ", "-\t\t\t\t\"}\\n\",", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\t@A int [] @B(3) [] field;\\n\" +", "+\t\t\t\t\"}\",", "-\t\t\"SUCCESS\");", "+\t\t\"\");", "-\t\t\t\"      #52 @A(\\n\" + ", "-\t\t\t\"        target type = 0x1a TYPE_ARGUMENT_METHOD_CALL\\n\" + ", "-\t\t\t\"        offset = 13\\n\" + ", "-\t\t\t\"        type argument index = 0\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"      #53 @C(\\n\" + ", "-\t\t\t\"        #49 value=\\'-\\' (constant type)\\n\" + ", "-\t\t\t\"        target type = 0x1a TYPE_ARGUMENT_METHOD_CALL\\n\" + ", "-\t\t\t\"        offset = 13\\n\" + ", "-\t\t\t\"        type argument index = 1\\n\" + ", "+\t\t\t\"      #12 @A(\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\"        location = [ARRAY, ARRAY]\\n\" + ", "-\t\t\t\"      #48 @B(\\n\" + ", "-\t\t\t\"        #49 value=(int) 1 (constant type)\\n\" + ", "-\t\t\t\"        target type = 0x1a TYPE_ARGUMENT_METHOD_CALL\\n\" + ", "-\t\t\t\"        offset = 13\\n\" + ", "-\t\t\t\"        type argument index = 0\\n\" + ", "+\t\t\t\"      #8 @B(\\n\" + ", "+\t\t\t\"        #9 value=(int) 3 (constant type)\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\"        location = [ARRAY]\\n\" + "]}], "num": 53317}
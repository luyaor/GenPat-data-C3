{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3bfd29d66728d70b683e83403acb7a29", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1b24065a12bddf8844b5bb012002de1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "e5bb4bddaa8ae27dfddec859067bcb3df83df4dc", "commitAfterChange": "65877d9109defab8c1c7191e1a9530b8bc8f9b43", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tif (this.binding != null && this.type.resolvedType instanceof TypeVariableBinding) {", "+\t\tMethodScope methodScope= this.binding.declaringScope.methodScope();", "+\t\tAbstractMethodDeclaration methodDeclaration = methodScope.referenceMethod();", "+\t\tif (methodDeclaration != null && ((methodDeclaration.bits & ASTNode.CanBeStatic) != 0) && methodDeclaration.binding != null) {", "+\t\t\tTypeVariableBinding[] typeVariables = methodDeclaration.binding.typeVariables();", "+\t\t\tif (typeVariables == Binding.NO_TYPE_VARIABLES) {", "+\t\t\t\t// Method declares no type variables.", "+\t\t\t\tcurrentScope.resetEnclosingMethodStaticFlag();", "+\t\t\t} else {", "+\t\t\t\t// to check whether the resolved type for this is declared by enclosing method as a type variable", "+\t\t\t\tboolean usesEnclosingTypeVar = false; ", "+\t\t\t\tfor (int i = 0; i < typeVariables.length ; i ++) {", "+\t\t\t\t\tif (typeVariables[i] == this.type.resolvedType){", "+\t\t\t\t\t\tusesEnclosingTypeVar = true;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (!usesEnclosingTypeVar) {", "+\t\t\t\t\t// uses a type variable not declared by enclosing method", "+\t\t\t\t\tcurrentScope.resetEnclosingMethodStaticFlag();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec68037da6bede1c4a082981359800d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorLocator.java", "commitBeforeChange": "5e6cea593f4be5a13a34ce02970d8b34d029a673", "commitAfterChange": "0473b4fed0787a43089ff37104916db5b418eb5b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public int match(TypeDeclaration node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(FieldDeclaration field, MatchingNodeSet nodeSet)", "diff": ["+public int match(FieldDeclaration field, MatchingNodeSet nodeSet) {", "+\tif (!this.pattern.findReferences) return IMPOSSIBLE_MATCH;", "+\t// look only for enum constant", "+\tif (field.type != null || !(field.initialization instanceof AllocationExpression)) return IMPOSSIBLE_MATCH;", "+", "+\tAllocationExpression allocation = (AllocationExpression) field.initialization;", "+\tif (field.binding != null && field.binding.declaringClass != null) {", "+\t\tif (this.pattern.declaringSimpleName != null && !matchesName(this.pattern.declaringSimpleName, field.binding.declaringClass.sourceName()))", "+\t\t\treturn IMPOSSIBLE_MATCH;", "+\t}", "+", "+\tif (this.pattern.parameterSimpleNames != null) {", "+\t\tint length = this.pattern.parameterSimpleNames.length;", "+\t\tExpression[] args = allocation.arguments;", "+\t\tint argsLength = args == null ? 0 : args.length;", "+\t\tif (length != argsLength) return IMPOSSIBLE_MATCH;", "+\t}", "+", "+\treturn nodeSet.addMatch(field, ((InternalSearchPattern)this.pattern).mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "+}"]}], "num": 29171}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d2292543ec4f466b99b8cc67a13793c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62e8eb079b27c3ea97fcaf1bb1ac0e63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/mirrortest/MirrorUtilTestAnnotationProcessor.java", "commitBeforeChange": "39ba98be39d071668a6de3e8fa86c213405fcffe", "commitAfterChange": "fa5043035008baa87658a861702929b4e6cc6033", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@SuppressWarnings(\"unused\") \tprivate void testHidesOverrides()", "signatureAfterChange": " \t  \t@SuppressWarnings(\"unused\") \tprivate void testHidesOverrides()", "diff": ["-\t\tfor(TypeDeclaration type : env.getTypeDeclarations())", "+\t\tfor(TypeDeclaration type : _env.getTypeDeclarations())", "-\t\tassertTrue(\"Expect B.method() to override A.method()\", env.getDeclarationUtils().overrides(method_B, method_A));", "-\t\tassertTrue(\"Expect K.method() to override I.method()\", env.getDeclarationUtils().overrides(method_K, method_I));", "+\t\tProcessorTestStatus.assertTrue(\"Expect B.method() to override A.method()\", _env.getDeclarationUtils().overrides(method_B, method_A));", "+\t\tProcessorTestStatus.assertTrue(\"Expect K.method() to override I.method()\", _env.getDeclarationUtils().overrides(method_K, method_I));", "-\t\tassertTrue(\"Expect B.method() to not override C.method()\", !env.getDeclarationUtils().overrides(method_B, method_C));", "-    \tassertTrue(\"Expect D.method(String s) to not override A.method()\", !env.getDeclarationUtils().overrides(method_D, method_A));", "+\t\tProcessorTestStatus.assertTrue(\"Expect B.method() to not override C.method()\", !_env.getDeclarationUtils().overrides(method_B, method_C));", "+    \tProcessorTestStatus.assertTrue(\"Expect D.method(String s) to not override A.method()\", !_env.getDeclarationUtils().overrides(method_D, method_A));", "-\t\tassertTrue(\"Expect B.field to hide A.field\", env.getDeclarationUtils().hides(field_B, field_A));", "-\t\tassertTrue(\"Expect D.field to hide A.field\", env.getDeclarationUtils().hides(field_D, field_A));", "-\t\tassertTrue(\"Expect K.field to hide I.field\", env.getDeclarationUtils().hides(field_K, field_I));", "+\t\tProcessorTestStatus.assertTrue(\"Expect B.field to hide A.field\", _env.getDeclarationUtils().hides(field_B, field_A));", "+\t\tProcessorTestStatus.assertTrue(\"Expect D.field to hide A.field\", _env.getDeclarationUtils().hides(field_D, field_A));", "+\t\tProcessorTestStatus.assertTrue(\"Expect K.field to hide I.field\", _env.getDeclarationUtils().hides(field_K, field_I));", "-\t\tassertTrue(\"Expect B.field to not hide C.field\", !env.getDeclarationUtils().hides(field_B, field_C));", "+\t\tProcessorTestStatus.assertTrue(\"Expect B.field to not hide C.field\", !_env.getDeclarationUtils().hides(field_B, field_C));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2320bbe730b61dbce4b0cfbe2e61a74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/mirrortest/MirrorDeclarationTestAnnotationProcessor.java", "commitBeforeChange": "39ba98be39d071668a6de3e8fa86c213405fcffe", "commitAfterChange": "fa5043035008baa87658a861702929b4e6cc6033", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate void testMethodDeclaration(ClassDeclaration testClassDec)", "signatureAfterChange": " \tprivate void testMethodDeclaration(ClassDeclaration testClassDec)", "diff": ["-\t\tassertTrue(\"Method methodDec exists\", methodDec != null);", "+\t\tProcessorTestStatus.assertTrue(\"Method methodDec exists\", methodDec != null);", "-\t\tassertEquals(\"Number of types thrown\", 1, thrownTypes.size());", "+\t\tProcessorTestStatus.assertEquals(\"Number of types thrown\", 1, thrownTypes.size());", "-\t\tassertEquals(\"methodDec throws Exception\", \"java.lang.Exception\", thrownType.toString());", "-\t\tassertTrue(\"methodDec is varargs\", methodDec.isVarArgs());", "-\t\tassertTrue(\"Method methodDecNoArg exists\", methodDecNoArg != null);", "-\t\tassertEquals(\"Number of types thrown\", 0, methodDecNoArg.getThrownTypes().size());", "-\t\tassertTrue(\"methodDecNoArg is not varargs\", !methodDecNoArg.isVarArgs());", "+\t\tProcessorTestStatus.assertEquals(\"methodDec throws Exception\", \"java.lang.Exception\", thrownType.toString());", "+\t\tProcessorTestStatus.assertTrue(\"methodDec is varargs\", methodDec.isVarArgs());", "+\t\tProcessorTestStatus.assertTrue(\"Method methodDecNoArg exists\", methodDecNoArg != null);", "+\t\tProcessorTestStatus.assertEquals(\"Number of types thrown\", 0, methodDecNoArg.getThrownTypes().size());", "+\t\tProcessorTestStatus.assertTrue(\"methodDecNoArg is not varargs\", !methodDecNoArg.isVarArgs());", "-\t\tassertTrue(\"int parameter exists\", paramDeclInt != null);", "-\t\tassertEquals(\"Parameter type is int\", \"int\", paramDeclInt.getType().toString());", "-\t\tassertTrue(\"String[] parameter exists\", paramDeclString != null);", "-\t\tassertEquals(\"Parameter type is String[]\", \"java.lang.String[]\", paramDeclString.getType().toString());", "-\t\tassertEquals(\"Number of parameters in methodDecNoArg\", 0, methodDecNoArg.getParameters().size());", "+\t\tProcessorTestStatus.assertTrue(\"int parameter exists\", paramDeclInt != null);", "+\t\tProcessorTestStatus.assertEquals(\"Parameter type is int\", \"int\", paramDeclInt.getType().toString());", "+\t\tProcessorTestStatus.assertTrue(\"String[] parameter exists\", paramDeclString != null);", "+\t\tProcessorTestStatus.assertEquals(\"Parameter type is String[]\", \"java.lang.String[]\", paramDeclString.getType().toString());", "+\t\tProcessorTestStatus.assertEquals(\"Number of parameters in methodDecNoArg\", 0, methodDecNoArg.getParameters().size());"]}], "num": 47163}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4ec81003d2d133762a713743a76c65a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40ab791292f7ac1d10fd4676093dce8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/EncodingTests.java", "commitBeforeChange": "83c47ad58d0e74e38827d2d1f073a35312f6f8d5", "commitAfterChange": "1d0bf2fd1ae02cf0a5ebd8dc2dd268afda57373a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void _test013() throws JavaModelException, CoreException", "signatureAfterChange": " \tpublic void test013() throws JavaModelException, CoreException", "diff": ["-\tpublic void _test013() throws JavaModelException, CoreException {", "+\tpublic void test013() throws JavaModelException, CoreException {", "-\t\tString independentEncodedContents = org.eclipse.jdt.core.tests.util.Util.convertToIndependantLineDelimiter(encodedContents);", "-\t\tString independentSource = org.eclipse.jdt.core.tests.util.Util.convertToIndependantLineDelimiter(source);", "-\t\tassertEquals(\"Encoded UTF-8 source should have been decoded the same way!\", independentEncodedContents, independentSource);", "+//\t\tString independentEncodedContents = org.eclipse.jdt.core.tests.util.Util.convertToIndependantLineDelimiter(encodedContents);", "+//\t\tString independentSource = org.eclipse.jdt.core.tests.util.Util.convertToIndependantLineDelimiter(source);", "+//\t\tassertEquals(\"Encoded UTF-8 source should have been decoded the same way!\", independentEncodedContents, independentSource);", "+\t\tassertSourceEquals(\"Encoded UTF-8 source should have been decoded the same way!\", source, encodedContents);", "-\t\t// Now compare bytes array", "-\t\tbyte[] sourceBytes =source.getBytes();", "-\t\tbyte[] encodedBytes = Util.getResourceContentsAsByteArray(this.utf8File);", "-\t\tassertEquals(\"Wrong size of encoded string\", encodedBytes.length, sourceBytes.length);", "-\t\tfor (int i = 0, max = sourceBytes.length; i < max; i++) {", "-\t\t\tassertTrue(\"Wrong size of encoded character at \" + i, sourceBytes[i] == encodedBytes[i]);", "-\t\t}", "+\t\t// Cannot compare bytes array without encoding as we're dependent of linux/windows os for new lines delimiter"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61035cd909692e1822c3dbbb81727c9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/EncodingTests.java", "commitBeforeChange": "42f61a276ba7d1e6da8e4e7be639a302682158f7", "commitAfterChange": "51ef1f3e636c416c08f983016f64f795f2b9cc74", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tvoid compareContents(ICompilationUnit cu, String encoding) throws JavaModelException", "signatureAfterChange": "  \tvoid compareContents(ICompilationUnit cu, String encoding) throws JavaModelException", "diff": ["+\t\tcompareContents(cu, encoding, false);", "+\t}", "-\t\tassertEquals(\"Wrong size of encoded string\", renamedEncodedBytes.length, renamedSourceBytes.length);", "-\t\t\tassertTrue(\"Wrong size of encoded character at \" + i, renamedSourceBytes[i] == renamedEncodedBytes[i]);"]}], "num": 8230}
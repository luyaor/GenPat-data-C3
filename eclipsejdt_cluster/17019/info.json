{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41ab780ccdbae97e3af2f25ec957a5c5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "226e161dca5b54caf8d5128504bf9a5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic String toString()", "signatureAfterChange": " \tpublic String toString()", "diff": ["-\t\t\tif (superInterfaces != NoSuperInterfaces) {", "+\t\t\tif (superInterfaces != Binding.NO_SUPERINTERFACES) {", "-\t\t\tif (fields != NoFields) {", "+\t\t\tif (fields != Binding.NO_FIELDS) {", "-\t\t\tif (methods != NoMethods) {", "+\t\t\tif (methods != Binding.NO_METHODS) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28cbc942f76e3f3ffebb24057f045046", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " private FieldBinding resolveTypeFor(FieldBinding field)", "signatureAfterChange": " private FieldBinding resolveTypeFor(FieldBinding field)", "diff": ["-\t\tif ((field.getAnnotationTagBits() & AnnotationDeprecated) != 0)", "+\t\tif ((field.getAnnotationTagBits() & TagBits.AnnotationDeprecated) != 0)", "-\t\t\t\tif (fieldType == VoidBinding) {", "+\t\t\t\tif (fieldType == TypeBinding.VOID) {", "-\t\t\t\tif (fieldType.isArrayType() && ((ArrayBinding) fieldType).leafComponentType == VoidBinding) {", "+\t\t\t\tif (fieldType.isArrayType() && ((ArrayBinding) fieldType).leafComponentType == TypeBinding.VOID) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2caebf9a10de1c009e436d0c2f0dfd2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (referenceType == VoidBinding) {", "+\t\tif (referenceType == TypeBinding.VOID) {", "-\t\t\t\tTypeBinding dimensionType = dimensions[i].resolveTypeExpecting(scope, IntBinding);", "+\t\t\t\tTypeBinding dimensionType = dimensions[i].resolveTypeExpecting(scope, TypeBinding.INT);", "-\t\t\t\t\tdimensions[i].computeConversion(scope, IntBinding, dimensionType);", "+\t\t\t\t\tdimensions[i].computeConversion(scope, TypeBinding.INT, dimensionType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37c6d59eaed217a755cb418db29b08e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \t \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\t\t: VoidBinding;", "+\t\t\t\t: TypeBinding.VOID;", "-\t\tif (methodType == VoidBinding) {", "+\t\tif (methodType == TypeBinding.VOID) {", "-\t\tif (expressionType == VoidBinding) {", "+\t\tif (expressionType == TypeBinding.VOID) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50eca6e838b4202ad0073116b3c6a3bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SyntheticMethodBinding.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic SyntheticMethodBinding(FieldBinding targetField, boolean isReadAccess, ReferenceBinding declaringClass)", "signatureAfterChange": " \t \tpublic SyntheticMethodBinding(FieldBinding targetField, boolean isReadAccess, ReferenceBinding declaringClass)", "diff": ["-\t\t\t\tthis.parameters = NoParameters;", "+\t\t\t\tthis.parameters = Binding.NO_PARAMETERS;", "-\t\t\tthis.returnType = VoidBinding;", "+\t\t\tthis.returnType = TypeBinding.VOID;", "-\t\tthis.thrownExceptions = NoExceptions;", "+\t\tthis.thrownExceptions = Binding.NO_EXCEPTIONS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78f0428f03b6cef0ce0175aacf7c9e95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " void checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-\t\tif ((itsInterfaces = superType.superInterfaces()) != NoSuperInterfaces) {", "+\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "-\t\t\tif ((itsInterfaces = superType.superInterfaces()) != NoSuperInterfaces) {", "+\t\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "-\t\t\t\t\tif ((itsInterfaces = superType.superInterfaces()) != NoSuperInterfaces) {", "+\t\t\t\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "814e2e16db9c58f752f930046101dfec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "signatureAfterChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "diff": ["-\tif (itsInterfaces != NoSuperInterfaces)", "+\tif (itsInterfaces != Binding.NO_SUPERINTERFACES)", "-\t\t\t\tif ((itsInterfaces = superType.superInterfaces()) != NoSuperInterfaces) {", "+\t\t\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "-\t\t\t\t\tif ((itsInterfaces = superType.superInterfaces()) != NoSuperInterfaces) {", "+\t\t\t\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4c3ed5fae64cfec53287e4eb8017afb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private MethodBinding createMethod(IBinaryMethod method, long sourceLevel)", "signatureAfterChange": " private MethodBinding createMethod(IBinaryMethod method, long sourceLevel)", "diff": ["-\tReferenceBinding[] exceptions = NoExceptions;", "-\tTypeBinding[] parameters = NoParameters;", "-\tTypeVariableBinding[] typeVars = NoTypeVariables;", "+\tReferenceBinding[] exceptions = Binding.NO_EXCEPTIONS;", "+\tTypeBinding[] parameters = Binding.NO_PARAMETERS;", "+\tTypeVariableBinding[] typeVars = Binding.NO_TYPE_VARIABLES;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab3c7be4bf34452890ef4a8a53e71c81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprivate void buildFields()", "signatureAfterChange": " \t \tprivate void buildFields()", "diff": ["-\t\t\t\t\tnew FieldBinding(IncompleteHierarchy, IntBinding, ClassFileConstants.AccPrivate, referenceContext.binding, null);", "+\t\t\t\t\tnew FieldBinding(IncompleteHierarchy, TypeBinding.INT, ClassFileConstants.AccPrivate, referenceContext.binding, null);", "-\t\t\t\treferenceContext.binding.fields = NoFields;", "+\t\t\t\treferenceContext.binding.fields = Binding.NO_FIELDS;", "-\t\t\tfieldBindings[count++] = new FieldBinding(IncompleteHierarchy, IntBinding, ClassFileConstants.AccPrivate, referenceContext.binding, null);", "+\t\t\tfieldBindings[count++] = new FieldBinding(IncompleteHierarchy, TypeBinding.INT, ClassFileConstants.AccPrivate, referenceContext.binding, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0123d085bf67583c0db9da2e864b6af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "68fbbc2b696126776a21b18e5e10fb30f89536f0", "commitAfterChange": "dd411ec32d2c716eadc1e7d9bf20b5ee5b59371a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " void buildTypeBindings()", "signatureAfterChange": " void buildTypeBindings()", "diff": ["-\t\t\tcurrentPackageName = expectedPackageName.length == 0 ? NoCharChar : expectedPackageName;", "+\t\t\tcurrentPackageName = expectedPackageName.length == 0 ? CharOperation.NO_CHAR_CHAR : expectedPackageName;", "-\tif (currentPackageName == NoCharChar) {", "+\tif (currentPackageName == CharOperation.NO_CHAR_CHAR) {", "-\t\tboolean packageExists = currentPackageName == NoCharChar", "+\t\tboolean packageExists = currentPackageName == CharOperation.NO_CHAR_CHAR"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e277e30205f88187a33cd7c8210ca3ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetReturnStatement.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void generateStoreSaveValueIfNecessary(CodeStream codeStream)", "signatureAfterChange": " public void generateStoreSaveValueIfNecessary(CodeStream codeStream)", "diff": ["-\tif (this.expression == null || this.expression.resolvedType == VoidBinding) { // expressionType == VoidBinding if code snippet is the expression \"System.out.println()\"", "+\tif (this.expression == null || this.expression.resolvedType == TypeBinding.VOID) { // expressionType == VoidBinding if code snippet is the expression \"System.out.println()\"", "-\t\tcodeStream.generateClassLiteralAccessForType(VoidBinding, null);", "+\t\tcodeStream.generateClassLiteralAccessForType(TypeBinding.VOID, null);", "-\t\tif (this.expression.resolvedType.isBaseType() && this.expression.resolvedType != NullBinding) { ", "+\t\tif (this.expression.resolvedType.isBaseType() && this.expression.resolvedType != TypeBinding.NULL) { "]}], "num": 17019}
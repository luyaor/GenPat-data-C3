{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37ec8e0405602e66f6991cc8e1fa4214", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e95aea434b91cc03e44a4a0a44bf0ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "987b84492820c5eeff2230233c35db158228c8e3", "commitAfterChange": "882e850a9e00f22aac1934fd17ac4c0522b9b030", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void commitWorkingCopy(boolean force, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public void commitWorkingCopy(boolean force, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\tif (!isWorkingCopy()) {", "-\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_ELEMENT_TYPES, this));", "-\t}", "-\tICompilationUnit primary = getPrimary(); ", "-\tif (primary.exists()) { ", "-\t\t// primary cu on the classpath", "-\t\tCommitWorkingCopyOperation op= new CommitWorkingCopyOperation(this, force);", "-\t\trunOperation(op, monitor);", "-\t} else { ", "-\t\t// primary resource doesn't exist OR primary not on classpath", "-\t\tString encoding = this.getJavaProject().getOption(JavaCore.CORE_ENCODING, true);", "-\t\tString contents = this.getSource();", "-\t\tif (contents == null) return;", "-\t\ttry {", "-\t\t\tbyte[] bytes = encoding == null ", "-\t\t\t\t? contents.getBytes() ", "-\t\t\t\t: contents.getBytes(encoding);", "-\t\t\tByteArrayInputStream stream = new ByteArrayInputStream(bytes);", "-\t\t\tIFile originalRes = (IFile)primary.getResource();", "-\t\t\tif (originalRes.exists()) {", "-\t\t\t\toriginalRes.setContents(", "-\t\t\t\t\tstream, ", "-\t\t\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY, ", "-\t\t\t\t\tnull);", "-\t\t\t} else {", "-\t\t\t\toriginalRes.create(", "-\t\t\t\t\tstream,", "-\t\t\t\t\tforce,", "-\t\t\t\t\tmonitor);", "-\t\t\t}", "-\t\t} catch (CoreException e) {", "-\t\t\tthrow new JavaModelException(e);", "-\t\t} catch (UnsupportedEncodingException e) {", "-\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "-\t\t}", "-\t}", "+\tCommitWorkingCopyOperation op= new CommitWorkingCopyOperation(this, force);", "+\trunOperation(op, monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e87e6ac49165d8da867916e08b484042", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "99e07d53808f4ab46236fb1590bb1242ac8c2a03", "commitAfterChange": "08e53f04ea3f08ae64f9c886944b4a8be7e4b3d7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void commit(boolean force, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public void commit(boolean force, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\tIFile originalRes = (IFile)original.getResource();", "+\t\tString encoding = this.getJavaProject().getOption(JavaCore.CORE_ENCODING, true);", "+\t\tString contents = this.getSource();", "+\t\tif (contents == null) return;", "-\t\t\toriginalRes.create(", "-\t\t\t\tnew InputStream() {", "-\t\t\t\t\tpublic int read() throws IOException {", "-\t\t\t\t\t\treturn -1;", "-\t\t\t\t\t}", "-\t\t\t\t},", "-\t\t\t\tforce,", "-\t\t\t\tmonitor);", "+\t\t\tbyte[] bytes = encoding == null ", "+\t\t\t\t? contents.getBytes() ", "+\t\t\t\t: contents.getBytes(encoding);", "+\t\t\tByteArrayInputStream stream = new ByteArrayInputStream(bytes);", "+\t\t\tIFile originalRes = (IFile)original.getResource();", "+\t\t\tif (originalRes.exists()) {", "+\t\t\t\toriginalRes.setContents(", "+\t\t\t\t\tstream, ", "+\t\t\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY, ", "+\t\t\t\t\tnull);", "+\t\t\t} else {", "+\t\t\t\toriginalRes.create(", "+\t\t\t\t\tstream,", "+\t\t\t\t\tforce,", "+\t\t\t\t\tmonitor);", "+\t\t\t}", "+\t\t} catch (UnsupportedEncodingException e) {", "+\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "-\t\toriginal.getBuffer().setContents(this.getContents());", "-\t\toriginal.save(monitor, force);"]}], "num": 10603}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d6c9762b6703d5160b1b584fc2d638c4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4df9a3ed6e27c1e9c28a6deaeeee40c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "85347e368b14c5176f4730552f6a19854120569d", "commitAfterChange": "04236443ccc286f293c5d09b3a540f768ce12f8d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " boolean detectNameClash(MethodBinding current, MethodBinding inherited)", "signatureAfterChange": " boolean detectNameClash(MethodBinding current, MethodBinding inherited, boolean treatAsSynthetic)", "diff": ["-boolean detectNameClash(MethodBinding current, MethodBinding inherited) {", "-\tMethodBinding original = inherited.original(); // can be the same as inherited", "+boolean detectNameClash(MethodBinding current, MethodBinding inherited, boolean treatAsSynthetic) {", "+\tMethodBinding methodToCheck = inherited;", "+\tif (!treatAsSynthetic) {", "+\t\t// For a user method, see if current class overrides the inherited method. If it does,", "+\t\t// then any grievance we may have ought to be against the current class's method and", "+\t\t// NOT against any super implementations. https://bugs.eclipse.org/bugs/show_bug.cgi?id=293615", "+\t\tMethodBinding[] currentNamesakes = (MethodBinding[]) this.currentMethods.get(inherited.selector);", "+\t\tif (currentNamesakes.length > 1) { // we know it ought to at least one and that current is NOT the override", "+\t\t\tfor (int i = 0, length = currentNamesakes.length; i < length; i++) {", "+\t\t\t\tMethodBinding currentMethod = currentNamesakes[i];", "+\t\t\t\tif (currentMethod != current && doesMethodOverride(currentMethod, inherited)) {", "+\t\t\t\t\tmethodToCheck = currentMethod;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tMethodBinding original = methodToCheck.original(); // can be the same as inherited", "-", "+\toriginal = inherited.original();  // For error reporting use, inherited.original()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af1ea5952737d5ba9831f2732f20a3fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "85347e368b14c5176f4730552f6a19854120569d", "commitAfterChange": "04236443ccc286f293c5d09b3a540f768ce12f8d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "diff": ["-\tif (this.type.addSyntheticBridgeMethod(originalInherited, currentMethod.original()) != null) {", "+\tMethodBinding bridge = this.type.addSyntheticBridgeMethod(originalInherited, currentMethod.original());", "+\tif (bridge != null) {", "+\t\t}", "+\t\t// See if the new bridge clashes with any of the user methods of the class. For this check", "+\t\t// we should check for \"method descriptor clash\" and not just \"method signature clash\". Really", "+\t\t// what we are checking is whether there is a contention for the method dispatch table slot.", "+\t\t// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=293615.", "+\t\tMethodBinding[] current = (MethodBinding[]) this.currentMethods.get(bridge.selector);", "+\t\tfor (int i = current.length - 1; i >= 0; --i) {", "+\t\t\tfinal MethodBinding thisMethod = current[i];", "+\t\t\tif (thisMethod.areParameterErasuresEqual(bridge) && thisMethod.returnType.erasure() == bridge.returnType.erasure()) {", "+\t\t\t\t// use inherited method for problem reporting.", "+\t\t\t\tproblemReporter(thisMethod).methodNameClash(thisMethod, inheritedMethod.declaringClass.isRawType() ? inheritedMethod : inheritedMethod.original());", "+\t\t\t\treturn;\t", "+\t\t\t}"]}], "num": 52703}
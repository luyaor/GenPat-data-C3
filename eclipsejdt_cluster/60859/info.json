{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6051aa85d5134387d9d9df7fdb5b47e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5db7e63aa504a94a515d6e9fca552288", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "8308cfd802c8b60b3cfe136b716c3a270c031128", "commitAfterChange": "5f4b17a62cffd1579d0f5c93e6dae75091d296b0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\t \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "signatureAfterChange": "\t \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "diff": ["-\t\t\tint argLength = arguments.length;", "-\t\t\tfor (int i = 0; i < argLength; i++)", "-\t\t\t\tparameters[i].collectSubstitutes(arguments[i], collectedSubstitutes);", "+\t\t\t", "+\t\t\t// collect argument type mapping, handling varargs", "+\t\t\tif (originalMethod.isVarargs()) {", "+\t\t\t\tint paramLength = parameters.length;", "+\t\t\t\tint minArgLength = paramLength - 1;", "+\t\t\t\tint argLength = arguments.length;", "+\t\t\t\t// process mandatory arguments", "+\t\t\t\tfor (int i = 0; i < minArgLength; i++)", "+\t\t\t\t\tparameters[i].collectSubstitutes(arguments[i], collectedSubstitutes);", "+\t\t\t\t// process optional arguments", "+\t\t\t\tif (minArgLength < argLength) {", "+\t\t\t\t\tTypeBinding varargType = parameters[minArgLength]; // last arg type - as is ?", "+\t\t\t\t\tif (paramLength != argLength // argument is passed as is ?", "+\t\t\t\t\t\t\t||  (arguments[minArgLength] != NullBinding", "+\t\t\t\t\t\t\t\t\t&& (arguments[minArgLength].dimensions() != varargType.dimensions()))) { ", "+\t\t\t\t\t\tvarargType = ((ArrayBinding)varargType).elementsType(); // eliminate one array dimension", "+\t\t\t\t\t}", "+\t\t\t\t\tfor (int i = minArgLength; i < argLength; i++)", "+\t\t\t\t\t\tvarargType.collectSubstitutes(arguments[i], collectedSubstitutes);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tint paramLength = parameters.length;", "+\t\t\t\tfor (int i = 0; i < paramLength; i++)", "+\t\t\t\t\tparameters[i].collectSubstitutes(arguments[i], collectedSubstitutes);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6269001540ee2a1d385c963988ecbcd0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredMethod.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void updateFromParserState()", "signatureAfterChange": " public void updateFromParserState()", "diff": ["-", "-\tif(this.bodyStartsAtHeaderEnd()){", "+\t// if parent is null then recovery already occured in diet parser.", "+\tif(this.bodyStartsAtHeaderEnd() && this.parent != null){", "-\t\t\t\t\tArgument argument = (Argument)parser.astStack[argStart+count];", "-\t\t\t\t\t/* cannot be an argument if non final */", "-\t\t\t\t\tchar[][] argTypeName = argument.type.getTypeName();", "-\t\t\t\t\tif ((argument.modifiers & ~AccFinal) != 0", "-\t\t\t\t\t\t|| (argTypeName.length == 1", "-\t\t\t\t\t\t\t&& CharOperation.equals(argTypeName[0], VoidBinding.sourceName()))){", "+\t\t\t\t\tASTNode aNode = parser.astStack[argStart+count];", "+\t\t\t\t\tif(aNode instanceof Argument) {", "+\t\t\t\t\t\tArgument argument = (Argument)aNode;", "+\t\t\t\t\t\t/* cannot be an argument if non final */", "+\t\t\t\t\t\tchar[][] argTypeName = argument.type.getTypeName();", "+\t\t\t\t\t\tif ((argument.modifiers & ~AccFinal) != 0", "+\t\t\t\t\t\t\t|| (argTypeName.length == 1", "+\t\t\t\t\t\t\t\t&& CharOperation.equals(argTypeName[0], VoidBinding.sourceName()))){", "+\t\t\t\t\t\t\tparser.astLengthStack[parser.astLengthPtr] = count; ", "+\t\t\t\t\t\t\tparser.astPtr = argStart+count-1; ", "+\t\t\t\t\t\t\tparser.listLength = count;", "+\t\t\t\t\t\t\tparser.currentToken = 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (needUpdateRParenPos) parser.rParenPos = argument.sourceEnd + 1;", "+\t\t\t\t\t} else {", "-\t\t\t\t\tif (needUpdateRParenPos) parser.rParenPos = argument.sourceEnd + 1;"]}], "num": 60859}
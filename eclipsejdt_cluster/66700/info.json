{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "89237d25fafd70934b4c433b025250ec", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9febb591ec5323492d85c26090532c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "b9151e9319708f3d004c77f114c4f35584a87c41", "commitAfterChange": "ee4aaa82998d38e6753ee8cc828566dd18d4910f", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 129, "signatureBeforeChange": "\t\t  \tpublic void testParameterizedType()", "signatureAfterChange": "\t\t  \tpublic void testParameterizedType()", "diff": ["-\t\tassertTrue(x.getName().getParent() == x);", "-\t\tgenericPropertyTest(x, new Property(\"Name\", true, Name.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tSimpleName result = targetAst.newSimpleName(\"a\"); //$NON-NLS-1$", "-\t\t\t\tif (parented) {", "-\t\t\t\t\ttargetAst.newExpressionStatement(result);", "-\t\t\t\t}", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t\tpublic ASTNode get() {", "-\t\t\t\treturn x.getName();", "-\t\t\t}", "-\t\t\tpublic void set(ASTNode value) {", "-\t\t\t\tx.setName((Name) value);", "-\t\t\t}", "-\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e448d5d2aacbde40ec95da10dd496fb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "ca9dbce3d563d28e984f1680d988cb68608c75f8", "commitAfterChange": "aec4b3fea7801d56d112291851d497436c0f9c81", "methodNumberBeforeChange": 547, "methodNumberAfterChange": 546, "signatureBeforeChange": " \tpublic void testEnhancedForStatement()", "signatureAfterChange": " \tpublic void testEnhancedForStatement()", "diff": ["-\t\tassertTrue(x.getType() != null);", "-\t\tassertTrue(x.getType().getParent() == x);", "-\t\tassertTrue(x.getName() != null);", "-\t\tassertTrue(x.getName().getParent() == x);", "-\t\tassertTrue(x.getName().isDeclaration() == true);", "+\t\tassertTrue(x.getParameter() != null);", "+\t\tassertTrue(x.getParameter().getParent() == x);", "-\t\tgenericPropertyTest(x, new Property(\"Type\", true, Type.class) { //$NON-NLS-1$", "+\t\tgenericPropertyTest(x, new Property(\"Parameter\", true, SingleVariableDeclaration.class) { //$NON-NLS-1$", "-\t\t\t\tSimpleType result = targetAst.newSimpleType(", "-\t\t\t\t\ttargetAst.newSimpleName(\"a\")); //$NON-NLS-1$", "+\t\t\t\tSingleVariableDeclaration result = targetAst.newSingleVariableDeclaration();", "-\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\t\t\t\tCatchClause parent = targetAst.newCatchClause();", "+\t\t\t\t\tparent.setException(result);", "-\t\t\t\treturn x.getType();", "+\t\t\t\treturn x.getParameter();", "-\t\t\t\tx.setType((Type) value);", "-\t\t\t}", "-\t\t});", "-\t\t", "-\t\tgenericPropertyTest(x, new Property(\"Name\", true, SimpleName.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tSimpleName result = targetAst.newSimpleName(\"foo\"); //$NON-NLS-1$", "-\t\t\t\tif (parented) {", "-\t\t\t\t\ttargetAst.newExpressionStatement(result);", "-\t\t\t\t}", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t\tpublic ASTNode get() {", "-\t\t\t\treturn x.getName();", "-\t\t\t}", "-\t\t\tpublic void set(ASTNode value) {", "-\t\t\t\tx.setName((SimpleName) value);", "+\t\t\t\tx.setParameter((SingleVariableDeclaration) value);"]}], "num": 66700}
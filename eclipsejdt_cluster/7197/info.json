{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28eb3451020cde8061ae0d549d355117", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99d2ac226b59b286d63fdf360fc60a08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "8e499c7ba695862747987f5930cb4781e109836a", "commitAfterChange": "8816a21753c2d607b8868597ac43f18ef7dd2d50", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\t\t// answers closest approximation, may not check argumentTypes or visibility", "-\t\t\t\t\t\t\tpossible = findMethod(staticMethod.declaringClass, staticMethod.selector, argumentTypes, invocationSite);", "+\t\t\t\t\t\t\tif (CharOperation.equals(staticMethod.selector, selector))", "+\t\t\t\t\t\t\t\t// answers closest approximation, may not check argumentTypes or visibility", "+\t\t\t\t\t\t\t\tpossible = findMethod(staticMethod.declaringClass, staticMethod.selector, argumentTypes, invocationSite);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c79a70e138ec1b4ac81ac3e66a38ccb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "59f906dde0386689cf221a0077edc4ded4fac940", "commitAfterChange": "53a88facba099a7ef05d98b75f25800af60438f8", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\t\tint importLevel = -1; // -1 = not found, 0 = on demand match, 1 = single import match", "-\t\t\t\t\t\tif (!importBinding.onDemand && importBinding.isStatic()) {", "+\t\t\t\t\t\tif (importBinding.onDemand) {", "+\t\t\t\t\t\t\tif (resolvedImport instanceof ReferenceBinding)", "+\t\t\t\t\t\t\t\t// answers closest approximation, may not check argumentTypes or visibility", "+\t\t\t\t\t\t\t\tpossible = findMethod((ReferenceBinding) resolvedImport, selector, argumentTypes, invocationSite);", "+\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t} else if (importBinding.onDemand && importLevel < 1 && resolvedImport instanceof ReferenceBinding) {", "-\t\t\t\t\t\t\t// answers closest approximation, may not check argumentTypes or visibility", "-\t\t\t\t\t\t\tpossible = findMethod((ReferenceBinding) resolvedImport, selector, argumentTypes, invocationSite);", "-\t\t\t\t\t\t\t\t\t\t\timportLevel = importBinding.onDemand ? 0 : 1;"]}], "num": 7197}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8119636c6c296037fd8fab8ae04d723a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90273bcfdcbaab43c25561fd3cf45a13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/TypeConverter.java", "commitBeforeChange": "1e77fadf417c78089a8bce12d01b049277ef0c41", "commitAfterChange": "caf3736c8c3269393f7e0bedb9e633769506e2e8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static TypeDeclaration buildTypeDeclaration(IType type, CompilationUnitDeclaration compilationUnit, CompilationResult compilationResult)  throws JavaModelException", "signatureAfterChange": " \tpublic static TypeDeclaration buildTypeDeclaration(IType type, CompilationUnitDeclaration compilationUnit, CompilationResult compilationResult)  throws JavaModelException", "diff": ["-\t\tchar[] packageName = type.getPackageFragment().getElementName().toCharArray();", "+\t\tPackageFragment pkg = (PackageFragment) type.getPackageFragment();", "+\t\tchar[][] packageName = Util.toCharArrays(pkg.names);", "-\t\tif (packageName != null && packageName.length > 0) { ", "-\t\t\tcompilationUnit.currentPackage = new ImportReference(CharOperation.splitOn('.', packageName), new long[]{0}, false, CompilerModifiers.AccDefault);", "+\t\tif (packageName.length > 0) { ", "+\t\t\tcompilationUnit.currentPackage = new ImportReference(packageName, new long[]{0}, false, CompilerModifiers.AccDefault);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e91ea96164386393c39db55c996f5f01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 58, "signatureBeforeChange": "  \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.Statement statement)", "signatureAfterChange": "  \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.Statement statement)", "diff": ["-\t\tif (statement instanceof LocalDeclaration) {", "-\t\t\treturn convertToVariableDeclarationStatement((LocalDeclaration)statement);", "+\t\tif (statement instanceof org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) {", "+\t\t\treturn convertToVariableDeclarationStatement((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)statement);", "-\t\tif (statement instanceof ExplicitConstructorCall) {", "-\t\t\treturn convert((ExplicitConstructorCall) statement);", "+\t\tif (statement instanceof org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall) statement);", "-\t\tif (statement instanceof LocalTypeDeclaration) {", "-\t\t\tTypeDeclarationStatement typeDeclarationStatement = this.ast.newTypeDeclarationStatement(convert((LocalTypeDeclaration) statement));", "+\t\tif (statement instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration ", "+\t\t\t\t&& (statement.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.IsLocalTypeMASK) != 0) {", "+\t\t\tTypeDeclarationStatement typeDeclarationStatement = this.ast.newTypeDeclarationStatement(convert((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) statement));", "-\t\t\t\t\t", "-\t\t}", "-\t\tif (statement instanceof AnonymousLocalTypeDeclaration) {", "-\t\t\tExpression expr = convert((AnonymousLocalTypeDeclaration) statement);", "-\t\t\tStatement stmt = this.ast.newExpressionStatement(expr);", "-\t\t\tstmt.setSourceRange(expr.getStartPosition(), expr.getLength());", "-\t\t\treturn stmt;"]}], "num": 24685}
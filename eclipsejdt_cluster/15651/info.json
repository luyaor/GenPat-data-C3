{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "03578921f516eef64d1ed36d1d5c435d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35730bc36a39d42396a4794715ea44e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \t \tpublic LabeledStatement convert(org.eclipse.jdt.internal.compiler.ast.LabeledStatement statement)", "signatureAfterChange": "  \tpublic void convert(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, PackageDeclaration packageDeclaration)", "diff": ["+", "+\tpublic void convert(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, PackageDeclaration packageDeclaration) {", "+\t\tif (ast.apiLevel == AST.JLS3 && packageDeclaration.getJavadoc() == null) {", "+\t\t\tif (javadoc != null) {", "+\t\t\t\tif (this.commentMapper == null || !this.commentMapper.hasSameTable(this.commentsTable)) {", "+\t\t\t\t\tthis.commentMapper = new DefaultCommentMapper(this.commentsTable);", "+\t\t\t\t}", "+\t\t\t\tComment comment = this.commentMapper.getComment(javadoc.sourceStart);", "+\t\t\t\tif (comment != null && comment.isDocComment() && comment.getParent() == null) {", "+\t\t\t\t\tJavadoc docComment = (Javadoc) comment;", "+\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\trecordNodes(docComment, javadoc);", "+\t\t\t\t\t\t// resolve member and method references binding", "+\t\t\t\t\t\tIterator tags = docComment.tags().listIterator();", "+\t\t\t\t\t\twhile (tags.hasNext()) {", "+\t\t\t\t\t\t\trecordNodes(javadoc, (TagElement) tags.next());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tpackageDeclaration.setJavadoc(docComment);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "683558d79b188d97ce8f303824b9efc9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "7b4fdf4780132144ccc7c2e7370ef3841befc3d9", "commitAfterChange": "6a5ede81dc60cc482d4fde0564e95e20c9055fee", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": "  \tpublic Javadoc convert(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc)", "signatureAfterChange": "  \tpublic void convert(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, BodyDeclaration bodyDeclaration)", "diff": ["-\tpublic Javadoc convert(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc) {", "-\t\tif (javadoc != null) {", "-\t\t\tDefaultCommentMapper mapper = new DefaultCommentMapper(this.commentsTable);", "-\t\t\tComment comment = mapper.getComment(javadoc.sourceStart);", "-\t\t\tif (comment != null && comment.isDocComment()) {", "-\t\t\t\tJavadoc docComment = (Javadoc) comment;", "-\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\trecordNodes(docComment, javadoc);", "-\t\t\t\t\t// resolve member and method references binding", "-\t\t\t\t\tIterator tags = docComment.tags().listIterator();", "-\t\t\t\t\twhile (tags.hasNext()) {", "-\t\t\t\t\t\trecordNodes(javadoc, (TagElement) tags.next());", "+\tpublic void convert(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, BodyDeclaration bodyDeclaration) {", "+\t\tif (bodyDeclaration.getJavadoc() == null) {", "+\t\t\tif (javadoc != null) {", "+\t\t\t\tDefaultCommentMapper mapper = new DefaultCommentMapper(this.commentsTable);", "+\t\t\t\tComment comment = mapper.getComment(javadoc.sourceStart);", "+\t\t\t\tif (comment != null && comment.isDocComment() && comment.getParent() == null) {", "+\t\t\t\t\tJavadoc docComment = (Javadoc) comment;", "+\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\trecordNodes(docComment, javadoc);", "+\t\t\t\t\t\t// resolve member and method references binding", "+\t\t\t\t\t\tIterator tags = docComment.tags().listIterator();", "+\t\t\t\t\t\twhile (tags.hasNext()) {", "+\t\t\t\t\t\t\trecordNodes(javadoc, (TagElement) tags.next());", "+\t\t\t\t\t\t}", "+//\t\t\t\t\treturn docComment;", "+\t\t\t\t\tbodyDeclaration.setJavadoc(docComment);", "-\t\t\t\treturn docComment;", "-\t\treturn null;", "+//\t\treturn null;"]}], "num": 15651}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0b6a763383995b3ad16d585e0792188", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0788cbaf261f1443746ac2990f5ab94f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "3388256fa80bf40daffa9f485d2674986c875b82", "commitAfterChange": "7a73f29da5ea73cce41fc54b0fc3ad302149f476", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic boolean visit(MethodDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(MethodDeclaration node)", "diff": ["-\t\tif (!node.thrownExceptions().isEmpty()) {", "-\t\t\tthis.buffer.append(\" throws \");//$NON-NLS-1$", "-\t\t\tfor (Iterator it = node.thrownExceptions().iterator(); it.hasNext(); ) {", "-\t\t\t\tName n = (Name) it.next();", "-\t\t\t\tn.accept(this);", "-\t\t\t\tif (it.hasNext()) {", "-\t\t\t\t\tthis.buffer.append(\", \");//$NON-NLS-1$", "-\t\t\t\t}", "+\t\tif (node.getAST().apiLevel() < AST.JLS8) {", "+\t\t\tif (!node.thrownExceptions().isEmpty()) {", "+\t\t\t\tthis.buffer.append(\" throws \");//$NON-NLS-1$", "+\t\t\t\tfor (Iterator it = node.thrownExceptions().iterator(); it.hasNext(); ) {", "+\t\t\t\t\tName n = (Name) it.next();", "+\t\t\t\t\tn.accept(this);", "+\t\t\t\t\tif (it.hasNext()) {", "+\t\t\t\t\t\tthis.buffer.append(\", \");//$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tthis.buffer.append(\" \");//$NON-NLS-1$", "+\t\t\t} ", "+\t\t} else {", "+\t\t\tif (!node.thrownExceptionTypes().isEmpty()) {\t\t\t\t", "+\t\t\t\tthis.buffer.append(\" throws \");//$NON-NLS-1$", "+\t\t\t\tfor (Iterator it = node.thrownExceptionTypes().iterator(); it.hasNext(); ) {", "+\t\t\t\t\tType n = (Type) it.next();", "+\t\t\t\t\tn.accept(this);", "+\t\t\t\t\tif (it.hasNext()) {", "+\t\t\t\t\t\tthis.buffer.append(\", \");//$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t}\t", "+\t\t\t\tthis.buffer.append(\" \");//$NON-NLS-1$\t\t\t\t", "-\t\t\tthis.buffer.append(\" \");//$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fc284a4f6502130b7e7b9cb01178f58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic boolean visit(IfStatement node)", "signatureAfterChange": " \tpublic boolean visit(EnumConstantDeclaration node)", "diff": ["+\t */", "+\tpublic boolean visit(EnumConstantDeclaration node) {", "+\t\tif (node.getJavadoc() != null) {", "+\t\t\tnode.getJavadoc().accept(this);", "+\t\t}", "+\t\tprintModifiers(node.modifiers());", "+\t\tnode.getName().accept(this);", "+\t\tif (!node.arguments().isEmpty()) {", "+\t\t\tthis.buffer.append(\"(\");//$NON-NLS-1$", "+\t\t\tfor (Iterator it = node.arguments().iterator(); it.hasNext(); ) {", "+\t\t\t\tExpression e = (Expression) it.next();", "+\t\t\t\te.accept(this);", "+\t\t\t\tif (it.hasNext()) {", "+\t\t\t\t\tthis.buffer.append(\",\");//$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.buffer.append(\")\");//$NON-NLS-1$", "+\t\t}", "+\t\tif (!node.bodyDeclarations().isEmpty()) {", "+\t\t\tthis.buffer.append(\"{\");//$NON-NLS-1$", "+\t\t\tfor (Iterator it = node.bodyDeclarations().iterator(); it.hasNext(); ) {", "+\t\t\t\tBodyDeclaration d = (BodyDeclaration) it.next();", "+\t\t\t\td.accept(this);", "+\t\t\t}", "+\t\t\tthis.buffer.append(\"}\");//$NON-NLS-1$", "+\t\t}", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b480c768def6b2fd37711eb507e8ff77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic boolean visit(MethodDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(MethodDeclaration node)", "diff": ["-\t\tprintModifiers(node.getModifiers());", "+\t\tif (node.getAST().API_LEVEL == AST.LEVEL_2_0) {", "+\t\t\tprintModifiers(node.getModifiers());", "+\t\t}", "+\t\tif (node.getAST().API_LEVEL >= AST.LEVEL_3_0) {", "+\t\t\tprintModifiers(node.modifiers());", "+\t\t\tif (!node.typeParameters().isEmpty()) {", "+\t\t\t\tthis.buffer.append(\"<\");//$NON-NLS-1$", "+\t\t\t\tfor (Iterator it = node.typeParameters().iterator(); it.hasNext(); ) {", "+\t\t\t\t\tTypeParameter t = (TypeParameter) it.next();", "+\t\t\t\t\tt.accept(this);", "+\t\t\t\t\tif (it.hasNext()) {", "+\t\t\t\t\t\tthis.buffer.append(\",\");//$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tthis.buffer.append(\">\");//$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "-\t\t\tnode.getReturnType().accept(this);", "+\t\t\tif (node.getAST().API_LEVEL == AST.LEVEL_2_0) {", "+\t\t\t\tnode.getReturnType().accept(this);", "+\t\t\t} else {", "+\t\t\t\tif (node.getReturnType2() != null) {", "+\t\t\t\t\tnode.getReturnType2().accept(this);", "+\t\t\t\t} else {", "+\t\t\t\t\t// methods really ought to have a return type", "+\t\t\t\t\tthis.buffer.append(\"void\");//$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 55122}
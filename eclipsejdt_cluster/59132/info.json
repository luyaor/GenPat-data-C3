{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f4275b4e1dd1beff14bd301b8e436680", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fd985c4c1329a8a322088657207937f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "5158f4f499166dbc52302f8195c73110e357532f", "commitAfterChange": "d656b5c8e5701277aa9c2918799a60289bc10084", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public IJavaProject getJavaProject(IResource resource)", "signatureAfterChange": " public IJavaProject getJavaProject(IResource resource)", "diff": ["-\tif (resource.getType() == IResource.FOLDER) {", "-\t\treturn new JavaProject(((IFolder)resource).getProject(), this);", "-\t} else if (resource.getType() == IResource.FILE) {", "-\t\treturn new JavaProject(((IFile)resource).getProject(), this);", "-\t} else if (resource.getType() == IResource.PROJECT) {", "-\t\treturn new JavaProject((IProject)resource, this);", "-\t} else {", "-\t\tthrow new IllegalArgumentException(Util.bind(\"element.invalidResourceForProject\")); //$NON-NLS-1$", "+\tswitch(resource.getType()){", "+\t\tcase IResource.FOLDER:", "+\t\t\treturn new JavaProject(((IFolder)resource).getProject(), this);", "+\t\tcase IResource.FILE:", "+\t\t\treturn new JavaProject(((IFile)resource).getProject(), this);", "+\t\tcase IResource.PROJECT:", "+\t\t\treturn new JavaProject((IProject)resource, this);", "+\t\tdefault:", "+\t\t\tthrow new IllegalArgumentException(Util.bind(\"element.invalidResourceForProject\")); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f99554d8c8cbe288d1a54bf8bd570b0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "4f833be4365ac5abb1ac0cf3973cd75cbb0d7487", "commitAfterChange": "227e3d5fec0001fbc06115e3f3e6f09f357952e2", "methodNumberBeforeChange": 426, "methodNumberAfterChange": 427, "signatureBeforeChange": " protected void parse()", "signatureAfterChange": " protected void parse()", "diff": ["-\t\tif (act == ERROR_ACTION || (this.restartRecovery && !this.shouldDeferRecovery)) {", "-\t\t\tthis.shouldDeferRecovery = false;", "+\t\tif (act == ERROR_ACTION || this.restartRecovery) {", "-\t\t\t\tthis.hasError = true;", "+\t\t\t\tthis.hasError = true;  // looks incorrect for recovery case ?", "-\t\t\tif (resumeOnSyntaxError()) {", "-\t\t\t\tif (act == ERROR_ACTION && previousToken != 0) this.lastErrorEndPosition = errorPos;", "-\t\t\t\tact = START_STATE;", "-\t\t\t\tthis.stateStackTop = -1;", "-\t\t\t\tthis.currentToken = getFirstToken();", "-\t\t\t\tcontinue ProcessTerminals;", "+\t\t\tswitch (resumeOnSyntaxError()) {", "+\t\t\t\tcase HALT:", "+\t\t\t\t\tact = ERROR_ACTION;", "+\t\t\t\t\tbreak ProcessTerminals;", "+\t\t\t\tcase RESTART:", "+\t\t\t\t\tif (act == ERROR_ACTION && previousToken != 0) this.lastErrorEndPosition = errorPos;", "+\t\t\t\t\tact = START_STATE;", "+\t\t\t\t\tthis.stateStackTop = -1;", "+\t\t\t\t\tthis.currentToken = getFirstToken();", "+\t\t\t\t\tcontinue ProcessTerminals;", "+\t\t\t\tcase RESUME:", "+\t\t\t\t\tbreak; // We presume the world is virgin so we can continue exactly from where we left off.", "+\t\t\t\tdefault:", "+\t\t\t\t\tthrow new IllegalStateException();", "-\t\t\tact = ERROR_ACTION;", "-\t\t\tbreak ProcessTerminals;"]}], "num": 59132}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2748530c3d1952ba850d402e65708ea9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5b0c26944c89e25a046098b785552ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "76b281521e0c88d7bc9fbeb2c963d7e6c8914ee3", "commitAfterChange": "e4873234bb7d47f3f866e994a2466da3b0ee585f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic MethodBinding inferInvocationType(Invocation invocation, TypeBinding[] argumentTypes, ParameterizedGenericMethodBinding method)", "signatureAfterChange": " MethodBinding inferInvocationType(Invocation invocation, TypeBinding[] argumentTypes, ParameterizedGenericMethodBinding method)", "diff": ["-\tpublic /*@NonNull*/ MethodBinding inferInvocationType(Invocation invocation, TypeBinding[] argumentTypes, ParameterizedGenericMethodBinding method) {", "+\t/*@NonNull*/ MethodBinding inferInvocationType(Invocation invocation, TypeBinding[] argumentTypes, ParameterizedGenericMethodBinding method) {", "-\t\tParameterizedGenericMethodBinding finalMethod = method;", "+\t\tParameterizedGenericMethodBinding finalMethod = null;", "-\t\t\tfinalMethod = getInvocationTypeInferenceSolution(method.originalMethod, invocation, targetType);", "+\t\t\tMethodBinding original = method.originalMethod;", "+\t\t\t// start over from a previous candidate but discard its type variable instantiations", "+\t\t\t// TODO: should we retain any instantiations of type variables not owned by the method? ", "+\t\t\tBoundSet result = null;", "+\t\t\ttry {", "+\t\t\t\tresult = inferInvocationType(this.currentBounds, targetType, invocation, original);", "+\t\t\t} catch (InferenceFailureException e) {", "+\t\t\t\t// no solution, but do more checks below", "+\t\t\t}", "+\t\t\tif (result != null) {", "+\t\t\t\tTypeBinding[] solutions = getSolutions(original.typeVariables(), invocation, result);", "+\t\t\t\tif (solutions != null) {", "+\t\t\t\t\tfinalMethod = this.environment.createParameterizedGenericMethod(original, solutions);", "+\t\t\t\t\tinvocation.registerInferenceContext(finalMethod, this);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tfinalMethod = method;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d74e19c6412946a1bba5f2e874cd7ab2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "76b281521e0c88d7bc9fbeb2c963d7e6c8914ee3", "commitAfterChange": "e4873234bb7d47f3f866e994a2466da3b0ee585f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic ParameterizedGenericMethodBinding getInvocationTypeInferenceSolution(MethodBinding method, Invocation site, TypeBinding targetType)", "signatureAfterChange": " \tpublic MethodBinding inferInvocationType(Invocation invocation, ParameterizedGenericMethodBinding method)", "diff": ["-\tpublic ParameterizedGenericMethodBinding getInvocationTypeInferenceSolution(MethodBinding method, Invocation site, TypeBinding targetType) {", "-\t\t// start over from a previous candidate but discard its type variable instantiations", "-\t\t// TODO: should we retain any instantiations of type variables not owned by the method? ", "-\t\tBoundSet result = null;", "-\t\ttry {", "-\t\t\tresult = inferInvocationType(this.currentBounds, targetType, site, method);", "-\t\t} catch (InferenceFailureException e) {", "-\t\t\treturn null;", "+\tpublic /*@NonNull*/ MethodBinding inferInvocationType(Invocation invocation, ParameterizedGenericMethodBinding method) {", "+\t\tTypeBinding[] argumentTypes = null;", "+\t\tExpression[] arguments = invocation.arguments();", "+\t\tif (arguments != null) {", "+\t\t\targumentTypes = new TypeBinding[arguments.length];", "+\t\t\tfor (int i = 0; i < arguments.length; i++)", "+\t\t\t\targumentTypes[i] = arguments[i].resolvedType;", "-\t\tif (result != null) {", "-\t\t\tTypeBinding[] solutions = getSolutions(method.typeVariables(), site, result);", "-\t\t\tif (solutions != null) {", "-\t\t\t\tParameterizedGenericMethodBinding substituteMethod = this.environment.createParameterizedGenericMethod(method, solutions);", "-\t\t\t\tsite.registerInferenceContext(substituteMethod, this);", "-\t\t\t\treturn substituteMethod;", "-\t\t\t}", "-\t\t}", "-\t\treturn null;", "+\t\treturn inferInvocationType(invocation, argumentTypes, method);"]}], "num": 70559}
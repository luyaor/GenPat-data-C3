{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78c2c9643a8d451573ff5d3994ffcd8d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03d7034ed0b32d0480b0d09711e9ccce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "48b439005b4e27b9edf7ac75008df6663dca3609", "commitAfterChange": "db94ada762c25cbafb7604978ccc4fc3df281550", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  String runFormatter(CodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length, String lineSeparator, boolean repeat)", "signatureAfterChange": "  String runFormatter(CodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length, String lineSeparator, boolean repeat)", "diff": ["+\tlong timeStart = System.currentTimeMillis();", "+\tif (FAILURES != null) { // Comparison has started", "+\t\tTIME_MEASURES.formatting[0] += System.currentTimeMillis() - timeStart;", "+\t\tTIME_MEASURES.occurences[0]++;", "+\t\tif (edit == null) TIME_MEASURES.null_output[0]++;", "+\t}", "-\tint count = 1;", "+\tint count = 0;", "-\twhile (count++ < FORMAT_REPEAT) {", "+\twhile (++count < FORMAT_REPEAT) {", "+\t\ttimeStart = System.currentTimeMillis();", "+\t\tif (FAILURES != null) { // Comparison has started", "+\t\t\tTIME_MEASURES.formatting[count] += System.currentTimeMillis() - timeStart;", "+\t\t\tTIME_MEASURES.occurences[count]++;", "+\t\t\tif (edit == null) TIME_MEASURES.null_output[count]++;", "+\t\t}", "-\t\t\tString counterString = counterToString(count-1);", "+\t\t\tString counterString = counterToString(count);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50b90ff50845134f518680dde6d867f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 144, "methodNumberAfterChange": 149, "signatureBeforeChange": " protected void consumeEnterVariable()", "signatureAfterChange": " protected void consumeEnterVariable()", "diff": ["+\t// pop any annotations on extended dimensions now, so they don't pollute the base dimensions.", "+\tAnnotation [][] annotationsOnExtendedDimensions = extendedDimension == 0 ? null : getAnnotationsOnDimensions(extendedDimension);", "+\t\t\t\tdeclaration.bits |= ASTNode.HasTypeAnnotations;", "+\t\t\t\tdeclaration.bits |= ASTNode.HasTypeAnnotations;", "+\t\t\tdeclaration.bits |= ASTNode.HasTypeAnnotations;", "+\t\tdeclaration.bits |= (type.bits & ASTNode.HasTypeAnnotations);", "-\t\tdeclaration.type = copyDims(type, dimension);", "+\t\tAnnotation [][] annotationsOnAllDimensions = null;", "+\t\tAnnotation[][] annotationsOnDimensions = type.getAnnotationsOnDimensions();", "+\t\tif (annotationsOnDimensions != null || annotationsOnExtendedDimensions != null) {", "+\t\t\tannotationsOnAllDimensions = getMergedAnnotationsOnDimensions(typeDim, annotationsOnDimensions, extendedDimension, annotationsOnExtendedDimensions); ", "+\t\t\tdeclaration.bits |= (type.bits & ASTNode.HasTypeAnnotations);", "+\t\t}", "+\t\tdeclaration.type = copyDims(type, dimension, annotationsOnAllDimensions);", "+}"]}], "num": 22118}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e8b04d11c53496e31267eb5f9456481", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6813bad26a98cc682081360192a228b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "e781f8e7f01bf193d5dc75f48e7e40aa2b3a1ff8", "commitAfterChange": "253b6e86274d6a434f078cf2295ba672e6b070f0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate String computeRootPath()", "signatureAfterChange": " \tprivate String computeRootPath(final String fullName)", "diff": ["-\tprivate String computeRootPath() {", "+\tprivate String computeRootPath(final String fullName) {", "+\t\t\t\tint index = Integer.MAX_VALUE;", "+\t\t\t\tString foundEntry = null;", "-\t\t\t\t\t\tchar[] contents = this.readSource(entry, zip);", "-\t\t\t\t\t\tString rootPath = computeRootPath(name, contents);", "-\t\t\t\t\t\tif (rootPath != null) {", "-\t\t\t\t\t\t\treturn rootPath;", "+\t\t\t\t\t\tif (name.endsWith(fullName)) {", "+\t\t\t\t\t\t\tindex = Math.min(index, name.indexOf(fullName));", "+\t\t\t\t\t\t\tfoundEntry = name;", "+\t\t\t\t}", "+\t\t\t\tif (foundEntry != null) {", "+\t\t\t\t\treturn foundEntry.substring(0, index);", "+\t\t\t\tfinal int[] index = new int[] { Integer.MAX_VALUE };", "-\t\t\t\t\t\t\t\t\t\tchar[] contents = org.eclipse.jdt.internal.core.Util.getResourceContentsAsCharArray((IFile)resource, encoding);", "-\t\t\t\t\t\t\t\t\t\tIPath fullPath = resource.getFullPath();", "+\t\t\t\t\t\t\t\t\t\tIPath resourceFullPath = resource.getFullPath();", "-\t\t\t\t\t\t\t\t\t\tIPath javaFilePath = fullPath.removeFirstSegments(sourcePathSegmentCount);", "-\t\t\t\t\t\t\t\t\t\tString rootPath = computeRootPath(javaFilePath.toString(), contents);", "-\t\t\t\t\t\t\t\t\t\tif (rootPath != null) {", "-\t\t\t\t\t\t\t\t\t\t\trootPathHolder[0] = rootPath;", "-\t\t\t\t\t\t\t\t\t\t\tthrow new CoreException(new JavaModelStatus()); // abort visit", "+\t\t\t\t\t\t\t\t\t\tIPath javaFilePath = resourceFullPath.removeFirstSegments(sourcePathSegmentCount);", "+\t\t\t\t\t\t\t\t\t\tString javaFilePathString = javaFilePath.toString();", "+\t\t\t\t\t\t\t\t\t\tif (javaFilePathString.endsWith(fullName)) {", "+\t\t\t\t\t\t\t\t\t\t\tindex[0] = Math.min(index[0], javaFilePathString.indexOf(javaFilePathString));", "+\t\t\t\t\t\t\t\t\t\t\trootPathHolder[0] = javaFilePathString;", "-\t\t\t\t\treturn rootPathHolder[0];", "+\t\t\t\t\tif (index[0] == 0) {", "+\t\t\t\t\t\treturn \"\"; //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\treturn rootPathHolder[0].substring(0, index[0]);", "-\t\t\t\t\treturn computeRootPath(file);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\treturn null;", "-\t}", "+\t\t\t\t\tfinal String[] rootPathHolder = new String[1];", "+\t\t\t\t\tfinal int[] index = new int[] { Integer.MAX_VALUE };", "+\t\t\t\t\tcomputeRootPath(file, fullName, rootPathHolder, index);", "+\t\t\t\t\tif (rootPathHolder[0] != null) {", "+\t\t\t\t\t\tif (index[0] == 0) {", "+\t\t\t\t\t\t\treturn \"\"; //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn rootPathHolder[0].substring(0, index[0]);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e44315c5830cffc674b256361b882edf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "9d422f535f1cf1a8b8f8401815db736b124961e4", "commitAfterChange": "13ebf03f7d31f9fda8d23c3fe70da0f01fcad14a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void indexSourceFolder(JavaProject javaProject, IPath sourceFolder, final char[][] exclusionPattern)", "signatureAfterChange": " public void indexSourceFolder(JavaProject javaProject, IPath sourceFolder, final char[][] exclusionPattern)", "diff": ["-public void indexSourceFolder(JavaProject javaProject, IPath sourceFolder, final char[][] exclusionPattern) {", "-\tIProject project = javaProject.getProject();", "-\tfinal IPath container = project.getFullPath();", "-\tIContainer folder;", "-\tif (container.equals(sourceFolder)) {", "-\t\tfolder = project;", "-\t} else {", "-\t\tfolder = ResourcesPlugin.getWorkspace().getRoot().getFolder(sourceFolder);", "-\ttry {", "-\t\tfolder.accept(new IResourceVisitor() {", "-\t\t\t/*", "-\t\t\t * @see IResourceVisitor#visit(IResource)", "-\t\t\t */", "-\t\t\tpublic boolean visit(IResource resource) throws CoreException {", "-\t\t\t\tif (resource instanceof IFile) {", "-\t\t\t\t\tif (org.eclipse.jdt.internal.core.Util.isJavaFileName(resource.getName()) ", "-\t\t\t\t\t\t\t&& !org.eclipse.jdt.internal.core.Util.isExcluded(resource, exclusionPattern)) {", "-\t\t\t\t\t\taddSource((IFile)resource, container);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn false;", "-\t\t\t\t} else {", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t});", "-\t} catch (CoreException e) {", "-\t\t// Folder does not exist.", "-\t\t// It will be indexed only when DeltaProcessor detects its addition", "+ */", "+public void indexSourceFolder(JavaProject javaProject, IPath sourceFolder, final char[][] exclusionPattern) {", "+\tIProject project = javaProject.getProject();", "+\tfinal IPath container = project.getFullPath();", "+\tIContainer folder = container.equals(sourceFolder)", "+\t\t? (IContainer) project", "+\t\t : (IContainer) ResourcesPlugin.getWorkspace().getRoot().getFolder(sourceFolder);", "+\ttry {", "+\t\tfolder.accept(new IResourceVisitor() {", "+\t\t\t/*", "+\t\t\t * @see IResourceVisitor#visit(IResource)", "+\t\t\t */", "+\t\t\tpublic boolean visit(IResource resource) throws CoreException {", "+\t\t\t\tif (resource instanceof IFile) {", "+\t\t\t\t\tif (org.eclipse.jdt.internal.core.Util.isJavaFileName(resource.getName()) ", "+\t\t\t\t\t\t\t&& !org.eclipse.jdt.internal.core.Util.isExcluded(resource, exclusionPattern)) {", "+\t\t\t\t\t\taddSource((IFile)resource, container);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t});", "+\t} catch (CoreException e) {", "+\t\t// Folder does not exist.", "+\t\t// It will be indexed only when DeltaProcessor detects its addition", "+\t}", "+}"]}], "num": 41564}
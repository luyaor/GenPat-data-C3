{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "efb86853e7a392899dd32c032d6ce7a4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8a965a434acb7c51c6ea0830485681c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/NullInfoRegistry.java", "commitBeforeChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "commitAfterChange": "8f130374b1740d04a2a1a32967cf4d9130b4bd12", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void markAsDefinitelyNonNull(VariableBinding local)", "signatureAfterChange": "  public void markAsDefinitelyNonNull(LocalVariableBinding local)", "diff": ["-public void markAsDefinitelyNonNull(VariableBinding local) {", "+public void markAsDefinitelyNonNull(LocalVariableBinding local) {", "-    \tif (local instanceof FieldBinding && ((local.modifiers & AccConstant) == AccConstant)) {", "-\t    \t// non-final fields may be modified in separate threads and we cannot be sure about their", "-\t    \t// definite nullness. Hence, marking as definitely unknown to avoid deferring null check for these fields.", "-\t    \tthis.markAsDefinitelyUnknown(local);", "-\t    \treturn;", "-    \t} else {", "-    \t\tposition = local.getAnalysisId(this.maxFieldCount);", "-    \t}", "-    \tif (position < BitCacheSize) { // use bits", "+    \t// position is zero-based", "+    \tif ((position = local.id + this.maxFieldCount) < BitCacheSize) { // use bits"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6a10b22d5a41ad9e3decdb43a5f4baf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/NullInfoRegistry.java", "commitBeforeChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "commitAfterChange": "8f130374b1740d04a2a1a32967cf4d9130b4bd12", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void markAsComparedEqualToNonNull(VariableBinding local)", "signatureAfterChange": "  public void markAsComparedEqualToNonNull(LocalVariableBinding local)", "diff": ["-public void markAsComparedEqualToNonNull(VariableBinding local) {", "+public void markAsComparedEqualToNonNull(LocalVariableBinding local) {", "-    \tif (local instanceof FieldBinding && ((local.modifiers & AccConstant) == AccConstant)) {", "-\t    \t// non-final fields may be modified in separate threads and we cannot be sure about their", "-\t    \t// definite nullness. Hence, marking as definitely unknown to avoid deferring null check for these fields.", "-\t    \tthis.markAsDefinitelyUnknown(local);", "-\t    \treturn;", "-    \t} else {", "-    \t\tposition = local.getAnalysisId(this.maxFieldCount);", "-    \t}", "-    \tif (position < BitCacheSize) { // use bits", "+    \tif ((position = local.id + this.maxFieldCount) < BitCacheSize) { // use bits"]}], "num": 34928}
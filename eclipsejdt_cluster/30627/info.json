{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b1bdf94d9ef037048bfdbad7f82cfca", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "118ecd4cf05efb57463ee0a2157ff89f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "06cedbd8bd184e3f34c939385e2cbddd9e3aedca", "commitAfterChange": "0d09a2966f3cebfb8d6601000e2b64259fed7dd8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["+\t\tif (this.expectedType != null && this.original == this) {  // final resolution.", "+\t\t\tthis.ordinal = blockScope.referenceCompilationUnit().record(this);", "+\t\t}", "+\t\t", "-\t\t\t\t\t\t\tTypeConstants.ANONYMOUS_METHOD, // will be fixed up later.", "+\t\t\t\t\t\t\tCharOperation.concat(TypeConstants.ANONYMOUS_METHOD, Integer.toString(this.ordinal).toCharArray()), // will be fixed up later."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83a37038cd3db5c1fbcad88a3c96d2d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "3aabc067e22084d59ef0ea59b0d58e1085dede4c", "commitAfterChange": "b7295bb19a68269f09e5fdceeecf4f4c701e7063", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+    \t\tif (isConstructorReference()) {", "+    \t\t\tthis.exactMethodBinding = scope.getExactConstructor(lhsType, this);", "+    \t\t}", "-        \tif (!lhsType.isCompatibleWith(this.descriptor.returnType)) {", "+        \tif (!lhsType.isCompatibleWith(this.descriptor.returnType) && this.descriptor.returnType.id != TypeIds.T_void) {", "-        \treturn this.resolvedType; // No binding construction possible right now. Code generator will have to conjure up a rabbit.", "+        \tthis.binding = this.exactMethodBinding = scope.getExactConstructor(lhsType, this);", "+        \treturn this.resolvedType;"]}], "num": 30627}
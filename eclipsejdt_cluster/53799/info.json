{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f27c050134a021b6f6d2f8f74c51be35", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "279a08275c259193e28de53575f417b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "signatureAfterChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "diff": ["-\tif (this.scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5) {", "+\tlong sourceLevel = this.scope.compilerOptions().sourceLevel;", "+\tif (sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\t\t// TODO(SH): different strategy for 1.8, or is \"repair\" below enough?", "+\t\t\t\t}", "+\t\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8 && field.type instanceof ReferenceBinding) {", "+\t\t\t\t\tlong nullTagBits = field.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\tif (nullTagBits != 0 && nullTagBits != (field.type.tagBits & TagBits.AnnotationNullMASK))", "+\t\t\t\t\t\tfield.type = environment.pushAnnotationIntoType(fieldType, fieldDecl.type, nullTagBits);", "+\t\t\t\t\t// do not reset field.tagBits, since more fields may need to share this information (\"@NonNull Object o1, o2;\")"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb3e257fc3df4de9622780d0a1f1d3b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "7ba9ff29fe6b05ec0a2f58eaa1f5d3e68bb11101", "commitAfterChange": "427a01e331e57852efc472cca3a8360bd121fda9", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tReferenceBinding resolve()", "signatureAfterChange": " \tReferenceBinding resolve()", "diff": ["+\t\tlong nullTagBits = this.tagBits & TagBits.AnnotationNullMASK;", "+\t\t", "+\t\t\tlong superNullTagBits = resolveType.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\tif (superNullTagBits != 0L) {", "+\t\t\t\tif (nullTagBits == 0L) {", "+\t\t\t\t\tthis.tagBits |= superNullTagBits;", "+\t\t\t\t} else {", "+//\t\t\t\t\tSystem.err.println(\"TODO(stephan): report proper error: conflict binary TypeVariable vs. first bound\");", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t\tlong superNullTagBits = resolveType.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\tif (superNullTagBits != 0L) {", "+\t\t\t\t\tif (nullTagBits == 0L) {", "+\t\t\t\t\t\tthis.tagBits |= superNullTagBits;", "+\t\t\t\t\t} else {", "+//\t\t\t\t\t\tSystem.err.println(\"TODO(stephan): report proper error: conflict binary TypeVariable vs. bound \"+i);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 53799}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4aeb95e603c13969af2e1b9c5e3510f0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58a618dd892a6442c57635da205fa973", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8845e4c8987116cc9c0aea93f48c3f458c73e5bf", "commitAfterChange": "5c85878a62876932bc62b0767f0e4b075cea01c0", "methodNumberBeforeChange": 300, "methodNumberAfterChange": 300, "signatureBeforeChange": " \tpublic void test298()", "signatureAfterChange": " \tpublic void _test298()", "diff": ["-\t// X is not abstract and does not override abstract method putAll(java.util.Map<? extends java.lang.String,? extends V>) in java.util.Map", "-\tpublic void test298() {", "-\t\tthis.runConformTest(", "+\tpublic void _test298() {", "+\t\tthis.runNegativeTest(", "-\t\t\t\t\"   \\n\" + ", "-\t\t\t\t\"   public static void main(String [] args) {\\n\" + ", "-\t\t\t\t\"        System.out.println(\\\"SUCCESS\\\");\\n\" + ", "-\t\t\t\t\"   }\\n\" + ", "-\t\t\t\"SUCCESS\");", "-/* Also", "-name clash: putAll(java.util.Map<? extends java.lang.String,? extends V>) in GenericMap<S,V> and putAll(java.util.Map<? extends K,? extends V>)", "-in java.util.Map<S,V> have the same erasure, yet neither overrides the other", "-", "-abstract class GenericMap<S, V> implements java.util.Map<S, V> {", "-   public void putAll(java.util.Map<? extends String, ? extends V> t) { }", "-}", "- */", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tpublic class X<V> implements Map<String, V> {\\n\" + ", "+\t\t\t\"\t             ^\\n\" + ", "+\t\t\t\"Class must implement the inherited abstract method Map<String,V>.putAll(Map<? extends String,? extends V>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 17)\\n\" + ", "+\t\t\t\"\tpublic void putAll(Map<String, ? extends V> t) { }\\n\" + ", "+\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash : The method putAll(Map<String,? extends V>) of type X<V> has the same erasure as putAll(Map<? extends K,? extends V>) of type Map<String,V> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\", //---------------------------", "+\t\t\t\t\"public abstract class X<S, V> implements java.util.Map<Object, Object> {\\n\" + ", "+\t\t\t\t\"   public void putAll(java.util.Map<?, ?> t) { }\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"\");", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\", //---------------------------", "+\t\t\t\t\"public abstract class X<S, V> implements java.util.Map<S, V> {\\n\" + ", "+\t\t\t\t\"   public void putAll(java.util.Map<? extends String, ? extends V> t) { }\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic void putAll(java.util.Map<? extends String, ? extends V> t) { }\\n\" + ", "+\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash : The method putAll(Map<? extends String,? extends V>) of type X<S,V> has the same erasure as putAll(Map<? extends K,? extends V>) of type Map<S,V> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eb50f106a37de29d3775077c56ea681", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tpublic void test063()", "signatureAfterChange": " \tpublic void test063() throws Exception", "diff": ["+\t//safe varargs support", "+\tpublic void test063() throws Exception {", "+\t\tif (this.complianceLevel < ClassFileConstants.JDK1_7) return;", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"java/lang/SafeVarargs.java\",", "+\t\t\t\t\"package java.lang;\\n\" +", "+\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "+\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.RUNTIME;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.ElementType.CONSTRUCTOR;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.ElementType.METHOD;\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"@Retention(value=RUNTIME)\\n\" + ", "+\t\t\t\t\"@Target(value={CONSTRUCTOR,METHOD})\\n\" + ", "+\t\t\t\t\"public @interface SafeVarargs {}\",", "+\t\t\t\t\"Y.java\",", "+\t\t\t\t\"import java.util.ArrayList;\\n\" +", "+\t\t\t\t\"import java.util.List;\\n\" +", "+\t\t\t\t\"public class Y {\\r\\n\" +", "+\t\t\t\t\"\t@SafeVarargs\\n\" +", "+\t\t\t\t\"\tpublic static <T> List<T> asList(T... a) {\\n\" + ", "+\t\t\t\t\"\t\treturn null;\\n\" + ", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\",", "+\t\t\t},", "+\t\t\t\"\");", "+\t\tMap options = getCompilerOptions();", "+\t\toptions.put(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION, JavaCore.ERROR);", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"import java.util.ArrayList;\\n\" +", "+\t\t\t\t\"import java.util.List;\\n\" +", "+\t\t\t\t\"public class X {\\r\\n\" +", "+\t\t\t\t\"\tpublic void bar() {\\n\" +", "+\t\t\t\t\"\t\tList<? extends Class<?>> classes = Y.asList(String.class, Boolean.class);\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\",", "+\t\t\t},", "+\t\t\t\"\",", "+\t\t\tnull,", "+\t\t\tfalse,", "+\t\t\tnull,", "+\t\t\toptions,", "+\t\t\tnull);", "+\t}", "-\tpublic void test063() {", "-\t\t\t\t\"Type safety : A generic array of Collection<? extends Number> is created for a varargs parameter\\n\" + "]}], "num": 19399}
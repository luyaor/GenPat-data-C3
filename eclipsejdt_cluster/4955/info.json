{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dfe7762099caf4528433b0d3e98cac88", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30e1ea2e59d61dbc6e0f30de54a1846e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "8a64589617f7b80b7f12bb3f773ab58c605663c7", "commitAfterChange": "6585c7471e2cc73387fb0d652a600f2678de9051", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic String format( \t\tString string, \t\tint start, \t\tint end, \t\tint indentationLevel, \t\tint[] positions, \t\tString lineSeparator, \t\tMap options)", "signatureAfterChange": "  \tpublic DefaultCodeFormatter(Map options)", "diff": ["+", "+\tpublic DefaultCodeFormatter(Map options) {", "+\t\tthis(FormattingPreferences.getDefault(), options == null ? JavaCore.getOptions() : options);", "-\t", "-\tpublic String format(", "-\t\tString string,", "-\t\tint start,", "-\t\tint end,", "-\t\tint indentationLevel,", "-\t\tint[] positions,", "-\t\tString lineSeparator,", "-\t\tMap options) {", "-\t\t", "-\t\tint[] newPositions = null;\t", "-\t\tfinal int length = positions == null ? 0 : positions.length;", "-\t\tif (positions == null) {", "-\t\t\tnewPositions = new int[] { start, end };", "-\t\t} else {", "-\t\t\tnewPositions = new int[length + 2];", "-\t\t\tSystem.arraycopy(positions, 0, newPositions, 1, length);", "-\t\t\tnewPositions[0] = start;", "-\t\t\tnewPositions[length] = end;", "-\t\t}", "-\t\tString formattedString = formatCompilationUnit(string, indentationLevel, newPositions, lineSeparator, options);", "-\t\tif (positions != null) {", "-\t\t\tthis.positionsMapping = positions;", "-\t\t\tSystem.arraycopy(newPositions, 1, this.positionsMapping, 0, length);", "-\t\t}", "-\t\t", "-\t\treturn formattedString.substring(newPositions[0], newPositions[newPositions.length - 1] + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2f005b1e5f18b8b622d5117e0f7eaaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "8257947b843e715f21b92a87dc4b423cbc1eed03", "commitAfterChange": "00cae100ff4808e2019f6a4d94df4143c8fabbd0", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 31, "signatureBeforeChange": " \t \tpublic void removeElementChangedListener(IElementChangedListener listener)", "signatureAfterChange": " \t \tpublic DeltaProcessor getDeltaProcessor()", "diff": ["+\tpublic DeltaProcessor getDeltaProcessor() {", "+\t\treturn this.deltaState.getDeltaProcessor();", "+\t}", "-\tpublic void removeElementChangedListener(IElementChangedListener listener) {", "-\t\t", "-\t\tfor (int i = 0; i < this.elementChangedListenerCount; i++){", "-\t\t\t", "-\t\t\tif (this.elementChangedListeners[i].equals(listener)){", "-\t\t\t\t", "-\t\t\t\t// need to clone defensively since we might be in the middle of listener notifications (#fire)", "-\t\t\t\tint length = this.elementChangedListeners.length;", "-\t\t\t\tIElementChangedListener[] newListeners = new IElementChangedListener[length];", "-\t\t\t\tSystem.arraycopy(this.elementChangedListeners, 0, newListeners, 0, i);", "-\t\t\t\tint[] newMasks = new int[length];", "-\t\t\t\tSystem.arraycopy(this.elementChangedListenerMasks, 0, newMasks, 0, i);", "-\t\t\t\t", "-\t\t\t\t// copy trailing listeners", "-\t\t\t\tint trailingLength = this.elementChangedListenerCount - i - 1;", "-\t\t\t\tif (trailingLength > 0){", "-\t\t\t\t\tSystem.arraycopy(this.elementChangedListeners, i+1, newListeners, i, trailingLength);", "-\t\t\t\t\tSystem.arraycopy(this.elementChangedListenerMasks, i+1, newMasks, i, trailingLength);", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t// update manager listener state (#fire need to iterate over original listeners through a local variable to hold onto", "-\t\t\t\t// the original ones)", "-\t\t\t\tthis.elementChangedListeners = newListeners;", "-\t\t\t\tthis.elementChangedListenerMasks = newMasks;", "-\t\t\t\tthis.elementChangedListenerCount--;", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e79b073234d59421faf6795d50f1361c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "0af096b2d34684a162b7a195205699b7a15a3c32", "commitAfterChange": "55eb63b50ad4a934502bfb435a017ff21ebaf8d8", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tprivate static void rootNodeToCompilationUnit(AST ast, ASTConverter converter, ASTNode node)", "signatureAfterChange": " \t \tprivate static void rootNodeToCompilationUnit(AST ast, ASTConverter converter, ASTNode node, CodeSnippetParsingUtil codeSnippetParsingUtil)", "diff": ["-\tprivate static void rootNodeToCompilationUnit(AST ast, ASTConverter converter, ASTNode node) {", "+\tprivate static void rootNodeToCompilationUnit(AST ast, ASTConverter converter, ASTNode node, CodeSnippetParsingUtil codeSnippetParsingUtil) {", "-\t\tCompilationResult compilationResult = CodeSnippetParsingUtil.RecordedCompilationResult;", "-\t\tfinal int problemsCount = compilationResult.problemCount;", "+\t\tRecordedParsingInformation recordedParsingInformation = codeSnippetParsingUtil.recordedParsingInformation;", "+\t\tfinal int problemsCount = recordedParsingInformation.problemsCount;", "-\t\t\t\t\t\tIProblem[] resizedProblems = null;", "-\t\t\t\t\t\tfinal IProblem[] problems = compilationResult.problems;", "-\t\t\t\t\t\tif (problems.length == problemsCount) {", "-\t\t\t\t\t\t\tresizedProblems = problems;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tSystem.arraycopy(problems, 0, (resizedProblems = new IProblem[problemsCount]), 0, problemsCount);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tfinal IProblem[] problems = recordedParsingInformation.problems;", "-\t\t\t\t\t\t\tconverter.propagateErrors((ASTNode) block.statements().get(i), resizedProblems);", "+\t\t\t\t\t\t\tconverter.propagateErrors((ASTNode) block.statements().get(i), problems);", "-\t\t\t\t\t\tcompilationUnit.setProblems(resizedProblems);", "+\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\t\t\t\t\tIProblem[] resizedProblems = null;", "-\t\t\t\t\t\tfinal IProblem[] problems = compilationResult.problems;", "-\t\t\t\t\t\tif (problems.length == problemsCount) {", "-\t\t\t\t\t\t\tresizedProblems = problems;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tSystem.arraycopy(problems, 0, (resizedProblems = new IProblem[problemsCount]), 0, problemsCount);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tfinal IProblem[] problems = recordedParsingInformation.problems;", "-\t\t\t\t\t\t\tconverter.propagateErrors((ASTNode) typeDeclaration.bodyDeclarations().get(i), resizedProblems);", "+\t\t\t\t\t\t\tconverter.propagateErrors((ASTNode) typeDeclaration.bodyDeclarations().get(i), problems);", "-\t\t\t\t\t\tcompilationUnit.setProblems(resizedProblems);", "+\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\t\t\t\t\tIProblem[] resizedProblems = null;", "-\t\t\t\t\t\tfinal IProblem[] problems = compilationResult.problems;", "-\t\t\t\t\t\tif (problems.length == problemsCount) {", "-\t\t\t\t\t\t\tresizedProblems = problems;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tSystem.arraycopy(problems, 0, (resizedProblems = new IProblem[problemsCount]), 0, problemsCount);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tconverter.propagateErrors(expression, resizedProblems);", "-\t\t\t\t\t\tcompilationUnit.setProblems(resizedProblems);", "+\t\t\t\t\t\tfinal IProblem[] problems = recordedParsingInformation.problems;", "+\t\t\t\t\t\tconverter.propagateErrors(expression, problems);", "+\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\tcompilationUnit.setLineEndTable(compilationResult.lineSeparatorPositions);", "-\t\tCodeSnippetParsingUtil.reset();", "+\t\tcompilationUnit.setLineEndTable(recordedParsingInformation.lineEnds);"]}], "num": 4955}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c884aff73907a1944ff3864e3fdec34", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "530f110a3294ba376a617db3c90cff27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Util.java", "commitBeforeChange": "dec2dac6f78a5ffa915ffd3b73cb386c60b72cae", "commitAfterChange": "eead3352ceb339c6e7d1c285e537cdff0d79d4a6", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tpublic final static boolean isExcluded(IResource resource, char[][] exclusionPatterns)", "signatureAfterChange": " \tpublic static final boolean isExcluded(IJavaElement element)", "diff": ["+\t * Returns whether the given java element is exluded from its classpath.\r\t */", "+\tpublic static final boolean isExcluded(IJavaElement element) {", "+\t\tswitch (element.getElementType()) {", "+\t\t\tcase IJavaElement.JAVA_PROJECT:", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:", "+\t\t\tcase IJavaElement.CLASS_FILE:", "+\t\t\t\t// projects, pkg fragment root and class files are never excluded", "+\t\t\t\treturn false;", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:", "+\t\t\tcase IJavaElement.COMPILATION_UNIT:", "+\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)element.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);", "+\t\t\t\tchar[][] exclusionPatterns = root.getExclusionPatterns();", "+\t\t\t\tIResource resource = element.getResource();", "+\t\t\t\treturn resource != null && Util.isExcluded(resource, exclusionPatterns);", "+\t\t\tdefault:", "+\t\t\t\t// everything in a compilation unit", "+\t\t\t\tIJavaElement cu = element.getAncestor(IJavaElement.COMPILATION_UNIT);", "+\t\t\t\tif (cu == null) return false;", "+\t\t\t\treturn isExcluded(cu);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a734b439f8effce0ad38f9da32163d0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "  \tpublic NumberLiteral convert(org.eclipse.jdt.internal.compiler.ast.IntLiteral expression)", "signatureAfterChange": " \t \tpublic Statement convert(ForeachStatement statement)", "diff": ["-", "-\tpublic NumberLiteral convert(org.eclipse.jdt.internal.compiler.ast.IntLiteral expression) {", "-\t\tint length = expression.sourceEnd - expression.sourceStart + 1;\t", "-\t\tint sourceStart = expression.sourceStart;", "-\t\tchar[] tokens = new char[length];", "-\t\tSystem.arraycopy(this.compilationUnitSource, sourceStart, tokens, 0, length);", "-\t\tNumberLiteral literal = this.ast.newNumberLiteral(new String(tokens));", "-\t\tif (this.resolveBindings) {", "-\t\t\tthis.recordNodes(literal, expression);", "-\t\t}", "-\t\tliteral.setSourceRange(sourceStart, length);", "-\t\tremoveLeadingAndTrailingCommentsFromLiteral(literal);", "-\t\treturn literal;", "-\t}", "+\t", "+\tpublic Statement convert(ForeachStatement statement) {", "+\t\tswitch(this.ast.apiLevel) {", "+\t\t\tcase AST.JLS2 :", "+\t\t\t\treturn createFakeEmptyStatement(statement);", "+\t\t\tcase AST.JLS3 :", "+\t\t\t\tEnhancedForStatement enhancedForStatement = this.ast.newEnhancedForStatement();", "+\t\t\t\tenhancedForStatement.setParameter(convertToSingleVariableDeclaration(statement.elementVariable));", "+\t\t\t\tenhancedForStatement.setExpression(convert(statement.collection));", "+\t\t\t\tenhancedForStatement.setBody(convert(statement.action));", "+\t\t\t\tint start = statement.sourceStart;", "+\t\t\t\tint end = statement.sourceEnd;", "+\t\t\t\tenhancedForStatement.setSourceRange(start, end - start + 1);", "+\t\t\t\treturn enhancedForStatement;", "+\t\t\tdefault:", "+\t\t\t\treturn createFakeEmptyStatement(statement);", "+\t\t}", "+\t}"]}], "num": 6839}
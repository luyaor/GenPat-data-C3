{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7949eaa8a467ea17f7065c01cea3e035", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ae6d10d1a679f430cdc8db7f61f1b05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "e87380489c19c89a272ebf5e59d9953a6bf9556a", "commitAfterChange": "2280fea0c7ffa905aa9d4633b1f02fa1aa3159f9", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic EnumConstantDeclaration convert(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration enumConstant)", "signatureAfterChange": " \tpublic EnumConstantDeclaration convert(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration enumConstant)", "diff": ["-\t\tif (enumConstant.initialization instanceof QualifiedAllocationExpression) {", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration anonymousType = ((QualifiedAllocationExpression) enumConstant.initialization).anonymousType;", "-\t\t\tif (anonymousType != null) {", "-\t\t\t\tAnonymousClassDeclaration anonymousClassDeclaration = this.ast.newAnonymousClassDeclaration();", "-\t\t\t\tint start = retrieveStartBlockPosition(anonymousType.sourceEnd, anonymousType.bodyEnd);", "-\t\t\t\tint end = retrieveRightBrace(anonymousType.bodyEnd, declarationSourceEnd);", "-\t\t\t\tanonymousClassDeclaration.setSourceRange(start, end - start + 1);", "-\t\t\t\tenumConstantDeclaration.setAnonymousClassDeclaration(anonymousClassDeclaration);", "-\t\t\t\tbuildBodyDeclarations(anonymousType, anonymousClassDeclaration);", "-\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\trecordNodes(anonymousClassDeclaration, anonymousType);", "-\t\t\t\t\tanonymousClassDeclaration.resolveBinding();", "+\t\tfinal org.eclipse.jdt.internal.compiler.ast.Expression initialization = enumConstant.initialization;", "+\t\tif (initialization != null) {", "+\t\t\tif (initialization instanceof QualifiedAllocationExpression) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration anonymousType = ((QualifiedAllocationExpression) initialization).anonymousType;", "+\t\t\t\tif (anonymousType != null) {", "+\t\t\t\t\tAnonymousClassDeclaration anonymousClassDeclaration = this.ast.newAnonymousClassDeclaration();", "+\t\t\t\t\tint start = retrieveStartBlockPosition(anonymousType.sourceEnd, anonymousType.bodyEnd);", "+\t\t\t\t\tint end = retrieveRightBrace(anonymousType.bodyEnd, declarationSourceEnd);", "+\t\t\t\t\tanonymousClassDeclaration.setSourceRange(start, end - start + 1);", "+\t\t\t\t\tenumConstantDeclaration.setAnonymousClassDeclaration(anonymousClassDeclaration);", "+\t\t\t\t\tbuildBodyDeclarations(anonymousType, anonymousClassDeclaration);", "+\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\trecordNodes(anonymousClassDeclaration, anonymousType);", "+\t\t\t\t\t\tanonymousClassDeclaration.resolveBinding();", "+\t\t\t\t\t}", "+\t\t\t\t\tenumConstantDeclaration.setSourceRange(declarationSourceStart, end - declarationSourceStart + 1);", "-\t\t\t\tenumConstantDeclaration.setSourceRange(declarationSourceStart, end - declarationSourceStart + 1);", "+\t\t\t} else {", "+\t\t\t\tenumConstantDeclaration.setSourceRange(declarationSourceStart, declarationSourceEnd - declarationSourceStart + 1);", "+\t\t\t}", "+\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.Expression[] arguments = ((org.eclipse.jdt.internal.compiler.ast.AllocationExpression) initialization).arguments;", "+\t\t\tif (arguments != null) {", "+\t\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "+\t\t\t\t\tenumConstantDeclaration.arguments().add(convert(arguments[i]));", "+\t\t\t\t}", "-\t\t}", "-\t\tfinal org.eclipse.jdt.internal.compiler.ast.Expression[] arguments = ((org.eclipse.jdt.internal.compiler.ast.AllocationExpression) enumConstant.initialization).arguments;", "-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "-\t\t\t\tenumConstantDeclaration.arguments().add(convert(arguments[i]));", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95a31d139355f9f74f9253379522558f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingMethodDeclTest.java", "commitBeforeChange": "a875873381b5c93516e927c7a0f03c3097fc26b5", "commitAfterChange": "05ecd79653c57bf231b3199c70ed57222451b62a", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  \tpublic void testEnumConstantDeclaration2() throws Exception", "signatureAfterChange": "  \tpublic void testEnumConstantDeclaration2() throws Exception", "diff": ["-\t\tif (BUG_76181) {", "+\t\tif (BUG_79752) {", "-\t\tbuf.append(\"    E4Add(1) {\\n\");", "-\t\tbuf.append(\"    },\\n\");\t", "+\t\tbuf.append(\"    E4Add(1),\\n\");\t", "-\t\tbuf.append(\"        public void foo2() {\\n\");", "-\t\tbuf.append(\"        }\\n\");", "-\t\t", "-\t\t\tListRewrite bodyRewrite= rewrite.getListRewrite(enumConst, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\t\tassertNull(enumConst.getAnonymousClassDeclaration());", "+\t\t\t", "+\t\t\tAnonymousClassDeclaration classDecl= ast.newAnonymousClassDeclaration();", "+\t\t\tListRewrite bodyRewrite= rewrite.getListRewrite(classDecl, AnonymousClassDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\t\t", "+\t\t\trewrite.set(enumConst, EnumConstantDeclaration.ANONYMOUS_CLASS_DECLARATION_PROPERTY, classDecl, null);", "-\t\t", "+\t\t\tassertNull(enumConst.getAnonymousClassDeclaration());", "+\t\t\t", "-\t\t\tListRewrite bodyRewrite= rewrite.getListRewrite(enumConst, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\t\tAnonymousClassDeclaration classDecl= ast.newAnonymousClassDeclaration();", "+\t\t\tListRewrite bodyRewrite= rewrite.getListRewrite(classDecl, AnonymousClassDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\t\t", "+\t\t\trewrite.set(enumConst, EnumConstantDeclaration.ANONYMOUS_CLASS_DECLARATION_PROPERTY, classDecl, null);", "+", "+\t\t\tassertNull(enumConst.getAnonymousClassDeclaration());", "-\t\t\tListRewrite bodyRewrite= rewrite.getListRewrite(enumConst, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\t\tAnonymousClassDeclaration classDecl= ast.newAnonymousClassDeclaration();", "+\t\t\tListRewrite bodyRewrite= rewrite.getListRewrite(classDecl, AnonymousClassDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\t\t", "+\t\t\trewrite.set(enumConst, EnumConstantDeclaration.ANONYMOUS_CLASS_DECLARATION_PROPERTY, classDecl, null);", "+\t\t\tassertNull(enumConst.getAnonymousClassDeclaration());", "-\t\t\tListRewrite bodyRewrite= rewrite.getListRewrite(enumConst, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY);", "-\t\t\tbodyRewrite.insertFirst(createNewMethod(ast, \"test\", false), null);", "+\t\t\tAnonymousClassDeclaration classDecl= ast.newAnonymousClassDeclaration();", "+\t\t\trewrite.set(enumConst, EnumConstantDeclaration.ANONYMOUS_CLASS_DECLARATION_PROPERTY, classDecl, null);", "-\t\t\tListRewrite bodyRewrite= rewrite.getListRewrite(enumConst, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\t\tAnonymousClassDeclaration classDecl= enumConst.getAnonymousClassDeclaration();", "+\t\t\tassertNotNull(classDecl);", "+\t\t\t", "+\t\t\tListRewrite bodyRewrite= rewrite.getListRewrite(classDecl, AnonymousClassDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\t\t", "+\t\t\tAnonymousClassDeclaration classDecl= enumConst.getAnonymousClassDeclaration();", "+\t\t\tassertNotNull(classDecl);", "-\t\t\trewrite.remove((ASTNode) enumConst.bodyDeclarations().get(0), null);", "+\t\t\trewrite.remove(classDecl, null);", "+\t\t\tAnonymousClassDeclaration classDecl= enumConst.getAnonymousClassDeclaration();", "+\t\t\tassertNotNull(classDecl);", "+\t\t\t", "-\t\t\trewrite.remove((ASTNode) enumConst.bodyDeclarations().get(0), null);", "+\t\t\trewrite.remove(classDecl, null);", "+\t\t\t", "+\t\t\tAnonymousClassDeclaration classDecl= enumConst.getAnonymousClassDeclaration();", "+\t\t\tassertNotNull(classDecl);", "-\t\t\trewrite.remove((ASTNode) enumConst.bodyDeclarations().get(0), null);", "+\t\t\trewrite.remove(classDecl, null);", "-\t\t\trewrite.remove((ASTNode) enumConst.bodyDeclarations().get(1), null);", "+\t\t\tAnonymousClassDeclaration classDecl= enumConst.getAnonymousClassDeclaration();", "+\t\t\tassertNotNull(classDecl);", "+\t\t\t", "+\t\t\trewrite.remove((ASTNode) classDecl.bodyDeclarations().get(0), null);", "-\t\tbuf.append(\"        private void test(String str) {\\n\");", "-\t\tbuf.append(\"        }\\n\");", "-\t\tbuf.append(\"        public void foo() {\\n\");", "-\t\tbuf.append(\"        }\\n\");"]}], "num": 22661}
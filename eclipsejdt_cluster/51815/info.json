{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "efdd67cbbd558a3cf44fab983360eea2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ff6f2867eae781121f652f614702a89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java", "commitBeforeChange": "674abcbfdf2c43bf14e65ea6f159909a170aba7f", "commitAfterChange": "cc7978cf3a57be1b542037d3f952d1a752c687f8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  protected void cleanOutputFolders() throws CoreException", "signatureAfterChange": "  protected void cleanOutputFolders(boolean copyBack) throws CoreException", "diff": ["-protected void cleanOutputFolders() throws CoreException {", "+protected void cleanOutputFolders(boolean copyBack) throws CoreException {", "-\t\t\t\tcopyExtraResourcesBack(sourceLocation, true);", "+\t\t\t\tif (copyBack)", "+\t\t\t\t\tcopyExtraResourcesBack(sourceLocation, true);", "-\t\t\t\tif (!isOutputFolder) {", "+\t\t\t\tif (!isOutputFolder && copyBack) {", "-\t} else {", "+\t} else if (copyBack) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e03f5f2685cedca276ecc799cde4e26f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CopyMoveTests.java", "commitBeforeChange": "fda975d98b069f678ae89a663957463bb7bd4088", "commitAfterChange": "2e99c72cc03690dcb30e61cdafeb829a4f1ada2f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, boolean checkDelta, IProgressMonitor monitor) throws JavaModelException", "diff": ["-public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, IProgressMonitor monitor) throws JavaModelException {", "+public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, boolean checkDelta, IProgressMonitor monitor) throws JavaModelException {", "-\t\tstartDeltas();", "+\t\tif(checkDelta)\tstartDeltas();", "-\t\t\tIJavaElementDelta destDelta = null;", "-\t\t\tif (isMainType(element, destinations[i]) && names != null && names[i] != null) { //moved/renamed main type to same cu", "-\t\t\t\tdestDelta = this.deltaListener.getDeltaFor(moved.getParent());", "-\t\t\t\tassertTrue(\"Renamed compilation unit as result of main type not added\", destDelta != null && destDelta.getKind() == IJavaElementDelta.ADDED);", "-\t\t\t\tassertTrue(\"flag should be F_MOVED_FROM\", (destDelta.getFlags() & IJavaElementDelta.F_MOVED_FROM) > 0);", "-\t\t\t\tassertTrue(\"moved from handle should be original\", destDelta.getMovedFromElement().equals(element.getParent()));", "-\t\t\t} else {", "-\t\t\t\tdestDelta = this.deltaListener.getDeltaFor(destinations[i], true);", "-\t\t\t\tassertTrue(\"Destination container not changed\", destDelta != null && destDelta.getKind() == IJavaElementDelta.CHANGED);", "-\t\t\t\tIJavaElementDelta[] deltas = destDelta.getAddedChildren();", "-\t\t\t\tassertTrue(\"Added children not correct for element copy\", deltas[i].getElement().equals(moved));", "-\t\t\t\tassertTrue(\"should be K_ADDED\", deltas[i].getKind() == IJavaElementDelta.ADDED);", "-\t\t\t\tIJavaElementDelta sourceDelta= this.deltaListener.getDeltaFor(element, false);", "-\t\t\t\tassertTrue(\"should be K_REMOVED\", sourceDelta.getKind() == IJavaElementDelta.REMOVED);", "+\t\t\tif(checkDelta) {", "+\t\t\t\tIJavaElementDelta destDelta = null;", "+\t\t\t\tif (isMainType(element, destinations[i]) && names != null && names[i] != null) { //moved/renamed main type to same cu", "+\t\t\t\t\tdestDelta = this.deltaListener.getDeltaFor(moved.getParent());", "+\t\t\t\t\tassertTrue(\"Renamed compilation unit as result of main type not added\", destDelta != null && destDelta.getKind() == IJavaElementDelta.ADDED);", "+\t\t\t\t\tassertTrue(\"flag should be F_MOVED_FROM\", (destDelta.getFlags() & IJavaElementDelta.F_MOVED_FROM) > 0);", "+\t\t\t\t\tassertTrue(\"moved from handle should be original\", destDelta.getMovedFromElement().equals(element.getParent()));", "+\t\t\t\t} else {", "+\t\t\t\t\tdestDelta = this.deltaListener.getDeltaFor(destinations[i], true);", "+\t\t\t\t\tassertTrue(\"Destination container not changed\", destDelta != null && destDelta.getKind() == IJavaElementDelta.CHANGED);", "+\t\t\t\t\tIJavaElementDelta[] deltas = destDelta.getAddedChildren();", "+\t\t\t\t\tassertTrue(\"Added children not correct for element copy\", deltas[i].getElement().equals(moved));", "+\t\t\t\t\tassertTrue(\"should be K_ADDED\", deltas[i].getKind() == IJavaElementDelta.ADDED);", "+\t\t\t\t\tIJavaElementDelta sourceDelta= this.deltaListener.getDeltaFor(element, false);", "+\t\t\t\t\tassertTrue(\"should be K_REMOVED\", sourceDelta.getKind() == IJavaElementDelta.REMOVED);", "+\t\t\t\t}", "-\t\tstopDeltas();", "+\t\tif(checkDelta)\tstopDeltas();"]}], "num": 51815}
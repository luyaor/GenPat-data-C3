{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "019af9a165f2f6927fbc28b4ce2e2c8d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46767423e9823a44229dbc77529a70bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "b66bc0ca466232b8b3006ed38a5137923b03416c", "commitAfterChange": "d81f79f00816b88315f5cebda6e215147f9e97f8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic TypeBinding clone(TypeBinding outerType, TypeBinding[] typeArguments)", "signatureAfterChange": " \t \tpublic TypeBinding clone(TypeBinding outerType)", "diff": ["-\tpublic TypeBinding clone(TypeBinding outerType, TypeBinding[] typeArguments) {", "-\t\tParameterizedTypeBinding copy = new ParameterizedTypeBinding(this.type, typeArguments, (ReferenceBinding) outerType, this.environment);", "+\tpublic TypeBinding clone(TypeBinding outerType) {", "+\t\tParameterizedTypeBinding copy = new ParameterizedTypeBinding(this.type, this.arguments, (ReferenceBinding) outerType, this.environment);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "650927004c8c86036ced88bfd00b3697", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void bind(MethodScope scope, TypeBinding typeBinding, boolean used)", "signatureAfterChange": "  \tpublic TypeBinding bind(MethodScope scope, TypeBinding typeBinding, boolean used)", "diff": ["-\tpublic void bind(MethodScope scope, TypeBinding typeBinding, boolean used) {", "-\t\tcreateBinding(scope, typeBinding); // basically a no-op if createBinding() was called before", "+\tpublic TypeBinding bind(MethodScope scope, TypeBinding typeBinding, boolean used) {", "+\t\tTypeBinding newTypeBinding = createBinding(scope, typeBinding); // basically a no-op if createBinding() was called before", "+\t\treturn newTypeBinding;"]}], "num": 55755}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57f360844c8bcea52a506e571c42d415", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "040a69b536934ce97edeb42e3a0bac33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\t \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "signatureAfterChange": "\t \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "diff": ["-\t\t\t\t// if message invocation has expected type", "-\t\t\t\tif (invocationSite instanceof MessageSend) {", "-\t\t\t\t\tMessageSend message = (MessageSend) invocationSite;", "-\t\t\t\t\texpectedType = message.expectedType;", "-\t\t\t\t}", "-\t\t\t\tTypeBinding upperBound;", "-\t\t\t\tTypeBinding substitutedReturnType = methodSubstitute.returnType;", "-\t\t\t\tswitch (substitutedReturnType.kind()) {", "-\t\t\t\t\tcase Binding.TYPE_PARAMETER :", "-\t\t\t\t\t\t// should be: if no expected type, then assume Object", "-\t\t\t\t\t\t// actually it rather seems to handle the returned variable case by expecting its erasure instead", "-\t\t\t\t\t\tupperBound = Scope.substitute(methodSubstitute, ((TypeVariableBinding)substitutedReturnType).upperBound());", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.BASE_TYPE :", "-\t\t\t\t\t\tif (substitutedReturnType == VoidBinding) {", "-\t\t\t\t\t\t\tupperBound = null;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// fallthrough", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tupperBound = scope.getJavaLangObject(); ", "-\t\t\t\t}", "-\t\t\t\t// Object o = foo(); // where <T extends Serializable> T foo();", "-\t\t\t\tif (expectedType == null || (upperBound != null && upperBound.isCompatibleWith(expectedType))) {", "-\t\t\t\t\texpectedType = upperBound;", "+\t\t\t\tif (methodSubstitute.returnType != VoidBinding) {", "+\t\t\t\t\t// if message invocation has expected type", "+\t\t\t\t\tif (invocationSite instanceof MessageSend) {", "+\t\t\t\t\t\tMessageSend message = (MessageSend) invocationSite;", "+\t\t\t\t\t\texpectedType = message.expectedType;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (expectedType == null) expectedType = scope.getJavaLangObject(); // assume Object by default"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fdbfca4874f24dbd21373e8b325bb5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "2a2935d5ba546500d563cc08921b53e5b286cdf8", "commitAfterChange": "2d9dc5098273e0e95832d81d735d2d77249738ef", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic IType findType(String fullyQualifiedName, WorkingCopyOwner owner) throws JavaModelException", "signatureAfterChange": " \tpublic IType findType(String fullyQualifiedName, WorkingCopyOwner owner) throws JavaModelException", "diff": ["+\t\treturn findType(fullyQualifiedName, lookup);", "+\t}", "-\t\t\ttype = this.findType(fullyQualifiedName.substring(0, lastDot));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c8bac5daf27a678e582f7dd6760892e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "b2f2db5aca4b5592810cb876316dc430449c50f8", "commitAfterChange": "423363127bfe75baf23fa282b4893f61b836a936", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t// check raw type", "-\t\t\t\t\tif (type.isArrayType()) {", "-\t\t\t\t\t    TypeBinding leafComponentType = type.leafComponentType();", "-\t\t\t\t\t    if (leafComponentType.isGenericType()) { // raw type", "-\t\t\t\t\t        return this.resolvedType = scope.createArrayType(scope.environment().createRawType((ReferenceBinding)leafComponentType, null), type.dimensions());", "-\t\t\t\t\t    }", "-\t\t\t\t\t} else if (type.isGenericType()) {", "-\t\t\t\t        return this.resolvedType = scope.environment().createRawType((ReferenceBinding)type, null); // raw type", "-\t\t\t\t\t}\t\t", "-\t\t\t\t\treturn this.resolvedType = type;", "+\t\t\t\t\treturn this.resolvedType = convertToRawType(type, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3210cce8e9229adeb550ea0712ef7f97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "44324f9ccc0ea7eca946937ed07112f93f643481", "commitAfterChange": "af88586441719c8f285b3d037981c91da39f99e2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " void checkAndSetImports()", "signatureAfterChange": " void checkAndSetImports()", "diff": ["-\t// initialize the default imports if necessary... share the default java.lang.* import", "-\tif (environment.defaultImports == null) {", "-\t\tBinding importBinding = environment.getTopLevelPackage(JAVA);", "-\t\tif (importBinding != null)", "-\t\t\timportBinding = ((PackageBinding) importBinding).getTypeOrPackage(JAVA_LANG[1]);", "-", "-\t\t// abort if java.lang cannot be found...", "-\t\tif (importBinding == null || !importBinding.isValidBinding())", "-\t\t\tproblemReporter().isClassPathCorrect(JAVA_LANG_OBJECT, referenceCompilationUnit());", "-", "-\t\tenvironment.defaultImports = new ImportBinding[] {new ImportBinding(JAVA_LANG, true, importBinding, null)};", "-\t}", "-\t\timports = environment.defaultImports;", "+\t\timports = getDefaultImports();", "-\tresolvedImports[0] = environment.defaultImports[0];", "+\tresolvedImports[0] = getDefaultImports()[0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32bc499ee6e26ab0914c30e0c36cbfdd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "b2f2db5aca4b5592810cb876316dc430449c50f8", "commitAfterChange": "423363127bfe75baf23fa282b4893f61b836a936", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t// check raw type", "-\t\t\t\t\tif (type.isArrayType()) {", "-\t\t\t\t\t    TypeBinding leafComponentType = type.leafComponentType();", "-\t\t\t\t\t    if (leafComponentType.isGenericType()) { // raw type", "-\t\t\t\t\t        return this.resolvedType = scope.createArrayType(scope.environment().createRawType((ReferenceBinding)leafComponentType, null), type.dimensions());", "-\t\t\t\t\t    }", "-\t\t\t\t\t} else if (type.isGenericType()) {", "-\t\t\t\t        return this.resolvedType = scope.environment().createRawType((ReferenceBinding)type, null); // raw type", "-\t\t\t\t\t}\t\t", "-\t\t\t\t\treturn this.resolvedType = type;", "+\t\t\t\t\treturn this.resolvedType = convertToRawType(type, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c59633bf27a9cc34569c5b31aafbd4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocSingleNameReference.java", "commitBeforeChange": "04969acd296957373e2c11d1fa6749ece6b3b165", "commitAfterChange": "a6b612a10e662a9a3068db57f25ae43c85426c25", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope scope)", "diff": ["+\t\tresolve(scope, true);", "+\t}", "-\t\ttry {", "-\t\t\tMethodScope methScope = (MethodScope) scope;", "-\t\t\tscope.problemReporter().javadocInvalidParamName(this, methScope.referenceMethod().modifiers);", "-\t\t}", "-\t\tcatch (Exception e) {", "-\t\t\tscope.problemReporter().javadocInvalidParamName(this, -1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0fe1ef7bb5bc6ddacd7341e85564e76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleTypeReference.java", "commitBeforeChange": "b2f2db5aca4b5592810cb876316dc430449c50f8", "commitAfterChange": "423363127bfe75baf23fa282b4893f61b836a936", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeEnclosing(BlockScope scope, ReferenceBinding enclosingType)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeEnclosing(BlockScope scope, ReferenceBinding enclosingType)", "diff": ["-\t\tif (isTypeUseDeprecated(memberType, scope)) {", "+\t\tif (isTypeUseDeprecated(memberType, scope))", "-\t\t}", "-\t\t// check raw type", "-\t\tif (memberType.isArrayType()) {", "-\t\t    TypeBinding leafComponentType = memberType.leafComponentType();", "-\t\t    if (leafComponentType.isGenericType()) { // raw type", "-\t\t        return this.resolvedType = scope.createArrayType(scope.environment().createRawType((ReferenceBinding)leafComponentType, null), memberType.dimensions());", "-\t\t    }", "-\t\t} else if (memberType.isGenericType()) {", "-\t        return this.resolvedType = scope.environment().createRawType(memberType, null); // raw type", "-\t\t}\t\t\t", "-\t\treturn this.resolvedType = memberType;", "+\t\treturn this.resolvedType = convertToRawType(memberType, scope);"]}], "num": 51688}
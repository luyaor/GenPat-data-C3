{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d80f19cdc21e64db533360f5a5dc54a9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "376f5912d3c40db19a1c6dcef6c229ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "26ecbd70f644b3e526f4a51dee0b94e84d57cade", "commitAfterChange": "63af609b0c4ca15a76568f63423f1cb23d7be92e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void createArgumentBindings()", "signatureAfterChange": " \tpublic void createArgumentBindings()", "diff": ["-\t\t\t\tif ((argument.binding.tagBits & (TagBits.AnnotationNonNull|TagBits.AnnotationNullable)) != 0) {", "+\t\t\t\t// prefer type annotation:", "+\t\t\t\tlong argTypeTagBits = (argument.type.resolvedType.tagBits & TagBits.AnnotationNullMASK);", "+\t\t\t\t// if none found try SE7 annotation:", "+\t\t\t\tif (argTypeTagBits == 0) {", "+\t\t\t\t\targTypeTagBits = (argument.binding.tagBits & TagBits.AnnotationNullMASK);", "+\t\t\t\t}", "+\t\t\t\tif (argTypeTagBits != 0) {", "-\t\t\t\t\tthis.binding.parameterNonNullness[i] = Boolean.valueOf((argument.binding.tagBits & TagBits.AnnotationNonNull) != 0);", "+\t\t\t\t\tthis.binding.parameterNonNullness[i] = Boolean.valueOf(argTypeTagBits == TagBits.AnnotationNonNull);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0d45118f9cd5839821a1a7878b0cb50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tstatic void createArgumentBindings(Argument[] arguments, MethodBinding binding, MethodScope scope)", "signatureAfterChange": " \tstatic void createArgumentBindings(Argument[] arguments, MethodBinding binding, MethodScope scope)", "diff": ["+\t\tboolean useTypeAnnotations = scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8;", "-\t\t\t\targument.createBinding(scope, binding.parameters[i]);", "+\t\t\t\tbinding.parameters[i] = argument.createBinding(scope, binding.parameters[i]);", "+\t\t\t\tif (useTypeAnnotations)", "+\t\t\t\t\tcontinue; // no business with SE7 null annotations in the 1.8 case.", "-\t\t\t\t// prefer type annotation:", "-\t\t\t\tlong argTypeTagBits = (argument.type.resolvedType.tagBits & TagBits.AnnotationNullMASK);", "-\t\t\t\t// if none found try SE7 annotation:", "-\t\t\t\tif (argTypeTagBits == 0) {", "-\t\t\t\t\targTypeTagBits = (argument.binding.tagBits & TagBits.AnnotationNullMASK);", "-\t\t\t\t}", "+\t\t\t\tlong argTypeTagBits = (argument.binding.tagBits & TagBits.AnnotationNullMASK);"]}], "num": 11885}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cffc144af94d60f4f1ee0ab9f843a633", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ddc24f1f3ab49913a899f3d81b8e86f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "f8065ae134834f9481154dc34f90c12640c5c175", "commitAfterChange": "77c3ce15baae65ce09e64063026465c9791f8dea", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "\r \t\t\t\r \tprivate void computeExpandedClasspath(\r \t\tboolean restrainToExportedEntries, \r \t\tboolean ignoreUnresolvedVariable,\r \t\tboolean generateMarkerOnError,\r \t\tVector visitedProjects, \r \t\tVector accumulatedEntries) throws JavaModelException", "signatureAfterChange": "\t\t\t\r \tprivate void computeExpandedClasspath(\r \t\tJavaProject initialProject, \r \t\tboolean ignoreUnresolvedVariable,\r \t\tboolean generateMarkerOnError,\r \t\tObjectVector visitedProjects, \r \t\tObjectVector accumulatedEntries) throws JavaModelException", "diff": ["-\t\t\t\r", "+\t */\t\t\t\r", "-\t\tboolean restrainToExportedEntries, \r", "+\t\tJavaProject initialProject, \r", "-\t\tVector visitedProjects, \r", "-\t\tVector accumulatedEntries) throws JavaModelException {\r", "+\t\tObjectVector visitedProjects, \r", "+\t\tObjectVector accumulatedEntries) throws JavaModelException {\r", "-\t\t\tif (!restrainToExportedEntries || entry.isExported()){\r", "+\t\t\tboolean isInitialProject = this.equals(initialProject);\r", "+\t\t\tif (isInitialProject || entry.isExported()){\r", "+\t\t\t\t\r", "-\t\t\t\t\t\t\t\ttrue, \r", "+\t\t\t\t\t\t\t\tinitialProject, \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9829f9d924f782d0e19b36cd89109f17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "eedafe9176d5ca60193623550822839844fd4aae", "commitAfterChange": "16a0328cb89c7e4d508e8edfc85e1af4879c13c7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tJavaProject initialProject,  \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet rootIDs, \t\tObjectVector accumulatedEntries, \t\tMap preferredClasspaths, \t\tMap preferredOutputs) throws JavaModelException", "signatureAfterChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tClasspathEntry referringEntry, \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet rootIDs, \t\tObjectVector accumulatedEntries, \t\tMap preferredClasspaths, \t\tMap preferredOutputs) throws JavaModelException", "diff": ["-\t\tJavaProject initialProject, ", "+\t\tClasspathEntry referringEntry,", "-\t\t\t\t? getResolvedClasspath(preferredClasspath, preferredOutput, ignoreUnresolvedVariable, generateMarkerOnError, null)", "+\t\t\t\t? getResolvedClasspath(preferredClasspath, preferredOutput, ignoreUnresolvedVariable, generateMarkerOnError, null /*no reverse map*/)", "-\t\tboolean isInitialProject = this.equals(initialProject);", "+\t\tboolean isInitialProject = referringEntry == null;", "-\t\t\t\t", "-\t\t\t\taccumulatedEntries.add(entry);", "+\t\t\t\t// combine restrictions along the project chain", "+\t\t\t\tClasspathEntry combinedEntry = entry.combineWith(referringEntry);", "+\t\t\t\taccumulatedEntries.add(combinedEntry);", "-\t\t\t\t\t\tif (JavaProject.hasJavaNature(projRsc)) {\t\t\t\t", "+\t\t\t\t\t\tif (JavaProject.hasJavaNature(projRsc)) {", "-\t\t\t\t\t\t\t\tinitialProject, ", "+\t\t\t\t\t\t\t\tcombinedEntry, "]}], "num": 37162}
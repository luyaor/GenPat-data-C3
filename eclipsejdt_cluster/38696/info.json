{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c6ef66202f3119a224e4f2f49ccb026d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01fa726e261511fc21682da8b3e22443", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "5ecdad70bb6e2e1bbd5c5ec539acc885a5698c4e", "commitAfterChange": "7f8c41fdd4e487762406a2cb6aaa3aa1d260201c", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "  private TypeBinding getTypeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, TypeAnnotationWalker walker, char [][][] missingTypeNames)", "signatureAfterChange": "  private TypeBinding getTypeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, AnnotationBinding [][] annotationsOnDimensions, TypeAnnotationWalker walker, char [][][] missingTypeNames)", "diff": ["-private TypeBinding getTypeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, TypeAnnotationWalker walker, char [][][] missingTypeNames) {", "-\tAnnotationBinding [] annotations;", "-\tAnnotationBinding [][] annotationsOnDimensions = null;", "-\tif (walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "-\t\tfor (int i = 0; i < dimension; i++) {", "-\t\t\tannotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "-\t\t\tif (annotations != Binding.NO_ANNOTATIONS) { ", "-\t\t\t\tif (annotationsOnDimensions == null)", "-\t\t\t\t\tannotationsOnDimensions = new AnnotationBinding[dimension][];", "-\t\t\t\tannotationsOnDimensions[i] = annotations;", "-\t\t\t}", "-\t\t\twalker = walker.toNextArrayDimension();", "-\t\t}", "-\t}", "-\t", "-\tannotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+private TypeBinding getTypeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, AnnotationBinding [][] annotationsOnDimensions, TypeAnnotationWalker walker, char [][][] missingTypeNames) {", "+\tAnnotationBinding [] annotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "-\t", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25e448c73574e724c9fdd632a8412d70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathInitializerTests.java", "commitBeforeChange": "f595c3df6cbb40a33fa3de2980da6860a9a3730f", "commitAfterChange": "665fa70c145e3460af8c3efab89c50489feb17d0", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void testContainerInitializer6() throws CoreException", "signatureAfterChange": " public void testContainerInitializer6() throws CoreException", "diff": ["-\t\tIJavaProject p2 = createJavaProject(", "+\t\tcreateJavaProject(", "-\t\tworkingCopy = getCompilationUnit(\"/P2/src/X.java\");", "-\t\t// simulate state on startup (flush containers, and preserve their previous values)", "-\t\tsetContainerStartupState(p2);", "-\t\t", "-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\tResourcesPlugin.getWorkspace().removeResourceChangeListener(manager.deltaState);", "-\t\tmanager.deltaState = new DeltaProcessingState();", "-\t\tResourcesPlugin.getWorkspace().addResourceChangeListener(", "-\t\t\tmanager.deltaState,", "-\t\t\tIResourceChangeEvent.PRE_BUILD", "-\t\t\t\t\t| IResourceChangeEvent.POST_BUILD", "-\t\t\t\t\t| IResourceChangeEvent.POST_CHANGE", "-\t\t\t\t\t| IResourceChangeEvent.PRE_DELETE", "-\t\t\t\t\t| IResourceChangeEvent.PRE_CLOSE);", "+\t\t// simulate state on startup", "+\t\tsimulateExitRestart();", "+\t\tworkingCopy = getCompilationUnit(\"/P2/src/X.java\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de385e5d87171e2972a2f4fa3c6b6402", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "210b89134044d06a70fa2c472f5e9a859c41ba00", "commitAfterChange": "b268992d45d00cd5439bb032a6e5a5226c715e7e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void abstractMethodInAbstractClass(SourceTypeBinding type, MethodBinding[] abstractMethods)", "signatureAfterChange": " public void abstractMethodInConcreteClass(SourceTypeBinding type)", "diff": ["-public void abstractMethodInAbstractClass(SourceTypeBinding type, MethodBinding[] abstractMethods) {", "+}", "+public void abstractMethodInConcreteClass(SourceTypeBinding type) {", "-\t\tStringBuffer selectorsString = new StringBuffer();", "-\t\tfor (int i = 0, l = abstractMethods.length; i < l;) {", "-\t\t\tMethodBinding abstractMethod = abstractMethods[i++];", "-\t\t\tselectorsString.append(abstractMethod.selector);", "-\t\t\tselectorsString.append(\"()\"); //$NON-NLS-1$", "-\t\t\tif (i < l)", "-\t\t\t\tselectorsString.append(\", \"); //$NON-NLS-1$", "-\t\t}", "-\t\tString[] arguments = new String[] {new String(type.sourceName()), selectorsString.toString()};", "+\t\tString[] arguments = new String[] {new String(type.sourceName())};", "-\t\t\tIProblem.AbstractMethodInAbstractClass,", "+\t\t\tIProblem.AbstractMethodsInConcreteClass,"]}], "num": 38696}
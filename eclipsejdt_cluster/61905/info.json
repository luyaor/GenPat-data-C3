{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb3231fb354074c5db4c99f731b8064b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d1a1c1d646fcbf46a9b16a44c298108", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ReadManager.java", "commitBeforeChange": "48628a48bc30e9f74feb6b693bbfe398c063e4b8", "commitAfterChange": "fea4095ba208aac8a9915b5d68b0792beec39b62", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void run()", "signatureAfterChange": "  public void run()", "diff": ["-\twhile (this.readingThreads != null && this.nextFileToRead < this.units.length) {", "-\t\tICompilationUnit unit = null;", "-\t\tint position = -1;", "-\t\tsynchronized (this) {", "-\t\t\tif (this.readingThreads == null) return;", "-", "-\t\t\twhile (this.filesRead[this.nextAvailablePosition] != null) {", "-\t\t\t\tthis.sleepingThreadCount++;", "-\t\t\t\ttry {", "-\t\t\t\t\twait(250); // wait until a spot in contents is available", "-\t\t\t\t} catch (InterruptedException e) { // ignore", "-\t\t\t\t}", "-\t\t\t\tthis.sleepingThreadCount--;", "+\ttry {", "+\t\twhile (this.readingThreads != null && this.nextFileToRead < this.units.length) {", "+\t\t\tICompilationUnit unit = null;", "+\t\t\tint position = -1;", "+\t\t\tsynchronized (this) {", "+\t", "+\t\t\t\twhile (this.filesRead[this.nextAvailablePosition] != null) {", "+\t\t\t\t\tthis.sleepingThreadCount++;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\twait(250); // wait until a spot in contents is available", "+\t\t\t\t\t} catch (InterruptedException e) { // ignore", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.sleepingThreadCount--;", "+\t\t\t\t\tif (this.readingThreads == null) return;", "+\t\t\t\t}", "+\t", "+\t\t\t\tif (this.nextFileToRead >= this.units.length) return;", "+\t\t\t\tunit = this.units[this.nextFileToRead++];", "+\t\t\t\tposition = this.nextAvailablePosition;", "+\t\t\t\tif (++this.nextAvailablePosition >= this.contentsRead.length)", "+\t\t\t\t\tthis.nextAvailablePosition = 0;", "+\t\t\t\tthis.filesRead[position] = unit;", "+\t\t\t\tthis.contentsRead[position] = readInProcessMarker; // mark the spot so we know its being read", "-", "-\t\t\tif (this.nextFileToRead >= this.units.length) return;", "-\t\t\tunit = this.units[this.nextFileToRead++];", "-\t\t\tposition = this.nextAvailablePosition;", "-\t\t\tif (++this.nextAvailablePosition >= this.contentsRead.length)", "-\t\t\t\tthis.nextAvailablePosition = 0;", "-\t\t\tthis.filesRead[position] = unit;", "-\t\t\tthis.contentsRead[position] = readInProcessMarker; // mark the spot so we know its being read", "+\t\t\tchar[] result = unit.getContents();", "+\t\t\tsynchronized (this) {", "+\t\t\t\tif (this.filesRead[position] == unit) {", "+\t\t\t\t\tif (this.contentsRead[position] == null) // wake up main thread which is waiting for this file", "+\t\t\t\t\t\tnotifyAll();", "+\t\t\t\t\tthis.contentsRead[position] = result;", "+\t\t\t\t}", "+\t\t\t}", "-\t\tchar[] result = unit.getContents();", "+\t} catch (Error e) {", "-\t\t\tif (this.filesRead[position] == unit) {", "-\t\t\t\tif (this.contentsRead[position] == null) // wake up main thread which is waiting for this file", "-\t\t\t\t\tnotifyAll();", "-\t\t\t\tthis.contentsRead[position] = result;", "-\t\t\t}", "+\t\t\tthis.caughtException = e;", "+\t\t\tshutdown();", "+\t\treturn;", "+\t} catch (RuntimeException e) {", "+\t\tsynchronized (this) {", "+\t\t\tthis.caughtException = e;", "+\t\t\tshutdown();", "+\t\t}", "+\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93acf6f2affe7ce592b25c9be26a67dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "3cbc5a17035fd93e630a5ce3a447371924b2eaec", "commitAfterChange": "2fbac062d3f933d7974166e3d20ea9843fdd9750", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tprivate void printLineComment()", "signatureAfterChange": "  \tprivate void printLineComment()", "diff": ["-    \tif (this.indentationLevel != 0) {", "-    \t\tif (!this.formatter.preferences.never_indent_line_comments_on_first_column", "-    \t\t\t\t|| !isOnFirstColumn(start)) {", "-    \t\t\tprintIndentationIfNecessary();", "+    \t// Print comment line indentation", "+    \tint commentIndentationLevel;", "+    \tif (this.indentationLevel == 0) {", "+    \t\tcommentIndentationLevel = this.column - 1;", "+    \t} else {", "+    \t\tif (this.formatter.preferences.never_indent_line_comments_on_first_column &&", "+    \t\t\tisOnFirstColumn(start)) {", "+\t   \t\t\tcommentIndentationLevel = this.column - 1;", "+    \t\t} else {", "+    \t\t\t// Indentation may be specific for contiguous comment", "+    \t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=293300", "+\t\t\t\tif (this.lastLineComment.contiguous) {", "+\t\t\t\t\t// The leading spaces have been set while looping in the printComment(int) method", "+\t\t\t\t\tint currentCommentIndentation = getCurrentColumn(this.lastLineComment.leadingSpaces);", "+\t\t\t\t\t// Keep the current comment indentation when over the previous contiguous line comment", "+\t\t\t\t\t// and the previous comment has not been reindented", "+\t\t\t\t\tint lastCommentColumn = this.lastLineComment.currentColumn;", "+\t\t\t\t\tif (this.tabLength > 0) {", "+\t\t\t\t\t\tif ((currentCommentIndentation % this.tabLength) == 0) {", "+\t\t\t\t\t\t\tlastCommentColumn = (lastCommentColumn / this.tabLength) * this.tabLength;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcurrentCommentIndentation = ((currentCommentIndentation / this.tabLength) + 1) * this.tabLength;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (currentCommentIndentation >= lastCommentColumn && this.lastLineComment.indentation != this.indentationLevel) {", "+\t\t\t\t\t\tint currentIndentationLevel = this.indentationLevel;", "+\t\t\t\t\t\tthis.indentationLevel = this.lastLineComment.indentation ;", "+\t\t\t\t\t\tprintIndentationIfNecessary();", "+\t\t\t\t\t\tthis.indentationLevel = currentIndentationLevel;", "+\t\t\t   \t\t\tcommentIndentationLevel = this.lastLineComment.indentation ;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tprintIndentationIfNecessary();", "+\t\t\t   \t\t\tcommentIndentationLevel = this.column - 1;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (this.currentAlignment != null && this.currentAlignment.name.equals(\"array_initializer\") && //$NON-NLS-1$", "+\t\t\t\t\t\tthis.indentationLevel < this.currentAlignment.breakIndentationLevel &&", "+\t\t\t\t\t\tthis.lastLineComment.lines > 0)", "+\t\t\t\t\t{", "+\t\t\t\t\t\tint currentIndentationLevel = this.indentationLevel;", "+\t\t\t\t\t\tthis.indentationLevel = this.currentAlignment.breakIndentationLevel;", "+\t\t    \t\t\tprintIndentationIfNecessary();", "+\t\t\t\t\t\tthis.indentationLevel = currentIndentationLevel;", "+\t\t\t   \t\t\tcommentIndentationLevel = this.currentAlignment.breakIndentationLevel;", "+\t\t\t\t\t} else {", "+\t\t    \t\t\tprintIndentationIfNecessary();", "+\t\t\t   \t\t\tcommentIndentationLevel = this.column - 1;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+    \t", "+    \t// Store line comment information", "+   \t\tthis.lastLineComment.contiguous = true;", "+\t\tthis.lastLineComment.currentColumn = getCurrentCommentColumn(currentTokenStartPosition);", "+\t\tthis.lastLineComment.indentation = commentIndentationLevel;", "+\t\t", "+\t\t// Add pending space if necessary"]}], "num": 61905}
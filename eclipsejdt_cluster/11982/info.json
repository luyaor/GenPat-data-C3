{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed86d6fc450211590e2ce8c5cb7b19d9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57e34a27caf8c6e87e6dbb0f09b45748", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorLocator.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": " public int resolveLevel(Binding binding)", "signatureAfterChange": " public int resolveLevel(Binding binding)", "diff": ["-\tMethodBinding method = ((MethodBinding) binding).original();", "-\tif (!method.isConstructor()) return IMPOSSIBLE_MATCH;", "-", "-\t// declaring type, simple name has already been matched by matchIndexEntry()", "-\tint level = resolveLevelForType(this.pattern.declaringSimpleName, this.pattern.declaringQualification, method.declaringClass);", "-\tif (level == IMPOSSIBLE_MATCH) return IMPOSSIBLE_MATCH;", "-", "-\t// parameter types", "-\tint parameterCount = this.pattern.parameterSimpleNames == null ? -1 : this.pattern.parameterSimpleNames.length;", "-\tif (parameterCount > -1) {", "-\t\tif (method.parameters == null) return INACCURATE_MATCH;", "-\t\tif (parameterCount != method.parameters.length) return IMPOSSIBLE_MATCH;", "-\t\tfor (int i = 0; i < parameterCount; i++) {", "-\t\t\tint newLevel = resolveLevelForType(this.pattern.parameterSimpleNames[i], this.pattern.parameterQualifications[i], method.parameters[i]);", "-\t\t\tif (level > newLevel) {", "-\t\t\t\tif (newLevel == IMPOSSIBLE_MATCH) return IMPOSSIBLE_MATCH;", "-\t\t\t\tlevel = newLevel; // can only be downgraded", "-\t\t\t}", "+\tMethodBinding constructor = (MethodBinding) binding;", "+\tint level= matchConstructor(constructor);", "+\tif (level== IMPOSSIBLE_MATCH) {", "+\t\tif (constructor != constructor.original()) {", "+\t\t\tlevel= matchConstructor(constructor.original());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6659525cb320c1a93cd5993b14fd6e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "a43f548b3a1c3d62722de2ff38ea24d34c2786a0", "commitAfterChange": "256997f0d353a7983d1c934f35d500006d3d2e1a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected int matchMethod(MethodBinding method)", "signatureAfterChange": " protected int matchMethod(MethodBinding method)", "diff": ["-\t\t\tint newLevel = resolveLevelForType(this.pattern.parameterSimpleNames[i], this.pattern.parameterQualifications[i], method.parameters[i]);", "+\t\t\tTypeBinding argType = method.parameters[i];", "+\t\t\tint newLevel = IMPOSSIBLE_MATCH;", "+\t\t\tif (argType.isMemberType()) {", "+\t\t\t\t// only compare source name for member type (bug 41018)", "+\t\t\t\tnewLevel = CharOperation.match(this.pattern.parameterSimpleNames[i], argType.sourceName(), this.isCaseSensitive)", "+\t\t\t\t\t? ACCURATE_MATCH", "+\t\t\t\t\t: IMPOSSIBLE_MATCH;", "+\t\t\t} else {", "+\t\t\t\tnewLevel = resolveLevelForType(this.pattern.parameterSimpleNames[i], this.pattern.parameterQualifications[i], method.parameters[i]);", "+\t\t\t}"]}], "num": 11982}
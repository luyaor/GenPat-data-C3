{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f8f7c7ad9d6cc9adcf1f26cb3fcc5f6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c1aa358e2dbfe330bb8a4e558546080", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 560, "methodNumberAfterChange": 560, "signatureBeforeChange": " public void testBug209996b() throws CoreException", "signatureAfterChange": " public void testBug209996b() throws CoreException", "diff": ["-\t\t\"src/test/Test.java @Deprecated() [        @\ufffd|Deprecated|\ufffd foo() {}]\",", "+\t\t\"src/test/Test.java @Deprecated() [        @\ufffd|Deprecated|\ufffd foo() {}]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "588d9ed83683e3e6baafbac32ea80103", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 313, "methodNumberAfterChange": 313, "signatureBeforeChange": " public void test164()", "signatureAfterChange": " public void test164()", "diff": ["-\t\t\"The return type is incompatible with I<Object,String>.foo(String), HalfGenericSuper.foo(String)\\n\" +", "+\t\t\"The type Concrete must implement the inherited abstract method I<Object,String>.foo(String) to override HalfGenericSuper.foo(String)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "980ed0f46fb26dad320d280ebb0a670a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 556, "methodNumberAfterChange": 556, "signatureBeforeChange": " \tpublic void test0538()", "signatureAfterChange": " \tpublic void test0538()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 9)\\n\" +", "-\t\t\t\"\tClass c = Foo.class;\\n\" +", "-\t\t\t\"\t^^^^^\\n\" +", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 10)\\n\" +", "-\t\t\t\"\tEnumSet<Enum<?>> eSet = EnumSet.allOf(c);\\n\" +", "-\t\t\t\"\t        ^^^^\\n\" +", "-\t\t\t\"Bound mismatch: The type Enum<?> is not a valid substitute for the bounded parameter <E extends Enum<E>> of the type EnumSet<E>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. WARNING in X.java (at line 10)\\n\" +", "-\t\t\t\"\tEnumSet<Enum<?>> eSet = EnumSet.allOf(c);\\n\" +", "-\t\t\t\"\t                        ^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: Unchecked invocation allOf(Class) of the generic method allOf(Class<E>) of type EnumSet\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. WARNING in X.java (at line 10)\\n\" +", "-\t\t\t\"\tEnumSet<Enum<?>> eSet = EnumSet.allOf(c);\\n\" +", "-\t\t\t\"\t                        ^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type EnumSet needs unchecked conversion to conform to EnumSet<Enum<?>>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. WARNING in X.java (at line 10)\\n\" +", "-\t\t\t\"\tEnumSet<Enum<?>> eSet = EnumSet.allOf(c);\\n\" +", "-\t\t\t\"\t                                      ^\\n\" +", "-\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<E>\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tClass c = Foo.class;\\n\" + ", "+\t\t\t\"\t^^^^^\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tEnumSet<Enum<?>> eSet = EnumSet.allOf(c);\\n\" + ", "+\t\t\t\"\t        ^^^^\\n\" + ", "+\t\t\t\"Bound mismatch: The type Enum<?> is not a valid substitute for the bounded parameter <E extends Enum<E>> of the type EnumSet<E>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tEnumSet<Enum<?>> eSet = EnumSet.allOf(c);\\n\" + ", "+\t\t\t\"\t                        ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation allOf(Class) of the generic method allOf(Class<E>) of type EnumSet\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tEnumSet<Enum<?>> eSet = EnumSet.allOf(c);\\n\" + ", "+\t\t\t\"\t                        ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type EnumSet needs unchecked conversion to conform to EnumSet<Enum<?>>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tEnumSet<Enum<?>> eSet = EnumSet.allOf(c);\\n\" + ", "+\t\t\t\"\t                                      ^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<Enum<?>>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac19d0e104559c4ca450ac6401a82290", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "8afc6c2545b5de051c1a37845dcbdbb43865eacc", "commitAfterChange": "02f0314baf345f99ed9121a26e25ddbfb9c11d17", "methodNumberBeforeChange": 155, "methodNumberAfterChange": 155, "signatureBeforeChange": "     public void test148()", "signatureAfterChange": "     public void test148()", "diff": ["-    \t\t\"The member annotation Bar can only be defined inside a top-level class or interface\\n\" +", "+    \t\t\"The member annotation Bar can only be defined inside a static context\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6a12be1646d25dd62661bf33c4a0618", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java", "commitBeforeChange": "b41120aee6f499b9a774d71aea9151d984f245c5", "commitAfterChange": "8f82ae69faed631567ec19572153cde0cce3876b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void test017()", "signatureAfterChange": " public void test017()", "diff": ["-\t\"Switch case may be entered by falling through previous case. If intended, it should be documented with //$FALL-THROUGH$\\n\" + ", "+\t\"Switch case may be entered by falling through previous case. If intended, add a new comment //$FALL-THROUGH$ on the above line\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecf31972efebaf54364450e4e5aaf27b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "e1f4500cdcedb12d8ea42095384e7cf0b5f1f610", "commitAfterChange": "c667b1be3df25dc6f40cd54dd6432b3d8f205d9e", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test012b()", "signatureAfterChange": " public void test012b()", "diff": ["-        \"      syncOverride         missing synchronized in synchr. method override\\n\" +", "+        \"      syncOverride       + missing synchronized in synchr. method override\\n\" +"]}], "num": 18268}
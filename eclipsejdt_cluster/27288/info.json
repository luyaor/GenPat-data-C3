{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c1afad831c4454e209a11f62d9312dd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e2ea4368064e7aa43456861b2daa62c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 270, "methodNumberAfterChange": 270, "signatureBeforeChange": " public void test120a()", "signatureAfterChange": " public void test120a()", "diff": ["-\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\"\"", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in Bar.java (at line 2)\\n\" + ", "+\t\t\"\tint getThing(V v) { return 1; }\\n\" + ", "+\t\t\"\t    ^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method getThing(V) has the same erasure getThing(Object) as another method in type Foo<V,E>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in Bar.java (at line 3)\\n\" + ", "+\t\t\"\tboolean getThing(E e) { return true; }\\n\" + ", "+\t\t\"\t        ^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method getThing(E) has the same erasure getThing(Object) as another method in type Foo<V,E>\\n\" + ", "+\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "174360a8473ab22f96e958f30d650306", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 149, "signatureBeforeChange": " \tpublic void test048()", "signatureAfterChange": " \tpublic void test048()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X1.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic class X1 extends LinkedHashMap<String, String> {\\n\" + ", "+\t\t\t\"\t             ^^\\n\" + ", "+\t\t\t\"The serializable class X1 does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X1.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic Object putAll(Map<String,String> a) { return null; }\\n\" + ", "+\t\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method putAll(Map<String,String>) of type X1 has the same erasure as putAll(Map<? extends K,? extends V>) of type HashMap<K,V> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+/* javac 7", "+X.java:4: name clash: putAll(Map<String,String>) in X1 and putAll(Map<? extends K,? extends V>) in HashMap have the same erasure, yet neither overrides the other", "+        public Object putAll(Map<String,String> a) { return null; }", "+                      ^", "+  where K,V are type-variables:", "+    K extends Object declared in class HashMap", "+    V extends Object declared in class HashMap", "+1 error", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2612b1ac33760eccef382d6c9260c23c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void test011a()", "signatureAfterChange": " \tpublic void test011a()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return;", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in Combined.java (at line 2)\\n\" + ", "+\t\t\t\"\t<T extends Comparable<T>> void pickOne(T value) throws ExOne {}\\n\" + ", "+\t\t\t\"\t                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method pickOne(T) has the same erasure pickOne(Comparable<T>) as another method in type Combined<A,B>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in Combined.java (at line 3)\\n\" + ", "+\t\t\t\"\t<T> T pickOne(Comparable<T> value) throws ExTwo { return null;}\\n\" + ", "+\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method pickOne(Comparable<T>) has the same erasure pickOne(Comparable<T>) as another method in type Combined<A,B>\\n\" + ", "+\t\t\t\"----------\\n\"", "+/* javac 7", "+X.java:3: name clash: <T#1>pickOne(Comparable<T#1>) and <T#2>pickOne(T#2) have the same erasure", "+        <T> T pickOne(Comparable<T> value) throws ExTwo { return null;}", "+              ^", "+  where T#1,T#2 are type-variables:", "+    T#1 extends Object declared in method <T#1>pickOne(Comparable<T#1>)", "+    T#2 extends Comparable<T#2> declared in method <T#2>pickOne(T#2)", "+1 error", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3600c780664a0fe674ee0f9ba528ce68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 180, "methodNumberAfterChange": 180, "signatureBeforeChange": " \tpublic void test054b()", "signatureAfterChange": " \tpublic void test054b()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tObject foo(X<T> t) { return null; }\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo(X<T>) in type X<T>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\t<S> String foo(X<T> s) { return null; }\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo(X<T>) in type X<T>\\n\" + ", "+\t\t\t\"----------\\n\"", "+/* javac 7", "+X.java:3: name clash: <S>foo(X<T>) and foo(X<T>) have the same erasure", "+        <S> String foo(X<T> s) { return null; }", "+                   ^", "+  where S,T are type-variables:", "+    S extends Object declared in method <S>foo(X<T>)", "+    T extends Object declared in class X", "+1 error", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a66646e17e86c0a8fd80e81367c73fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 174, "methodNumberAfterChange": 174, "signatureBeforeChange": " \tpublic void test051b()", "signatureAfterChange": " \tpublic void test051b()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tvoid foo(A<String> a) {}\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tObject foo(A<Integer> a) { return null; }\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\"", "+/* javac 7", "+X.java:3: name clash: foo(A<Integer>) and foo(A<String>) have the same erasure", "+        Object foo(A<Integer> a) { return null; }", "+               ^", "+1 error", "+ */"]}], "num": 27288}
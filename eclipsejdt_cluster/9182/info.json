{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24f4b34d2de372e7ec18c003b2a68e8a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8622b37acba389babb01889a36c2114f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/OverflowingLRUCache.java", "commitBeforeChange": "ca1557fedc40b4830cee4a8ab2e4e25aa2f10f0a", "commitAfterChange": "71cf21d1f82b6e6d4f06e9ca9787ac93cc80bb37", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r protected void privateRemoveEntry(LRUCacheEntry entry, boolean shuffle, boolean external)", "signatureAfterChange": "\r protected void privateRemoveEntry(LRUCacheEntry entry, boolean shuffle, boolean external)", "diff": ["-\t\t\t// close will return here with external==true when\r", "-\t\t\t// notifying buffer close() if able to do so.\r", "-\t\t\tclose(entry);\r", "-\t\t\treturn;\r", "+\t\t\tif (!close(entry)) return;\r", "+\t\t\t// buffer close will recursively call #privateRemoveEntry with external==true\r", "+\t\t\t// thus entry will already be removed if reaching this point.\r", "+\t\t\tif (fEntryTable.get(entry) == null) return;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de0c61a9c774c50380b211d16ab22768", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "8bcfa6844adee5e13c9b3da57f9a1e015de3ef98", "commitAfterChange": "610108f4e624d64f54e0d88631148888da90ec97", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "diff": ["-\t\tif (this.arguments == null) return;", "+\t\t// collect through enclosing type", "+\t\tReferenceBinding formalEnclosingType = formalEquivalent.enclosingType();", "+\t\tif (formalEnclosingType != null) {", "+\t\t\tformalEnclosingType.collectSubstitutes(scope, actualEquivalent.enclosingType(), substitutes, constraint);", "+\t\t}", "+\t\t// collect through type arguments", "+\t\tif (this.arguments == null) return;"]}], "num": 9182}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9666c0aee2b5b19175cdf2802785d6e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e7993f3dd0774df85b0407d3c255e76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "490cc39003ba5daaddf4fdf25c1c4ad52d071fa8", "commitAfterChange": "63cc2b02a5dc2c73f3b525966213744b7c2edcf0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public final boolean areTypesCastCompatible(BlockScope scope, TypeBinding castTb, TypeBinding expressionTb)", "signatureAfterChange": " public final boolean areTypesCastCompatible(BlockScope scope, TypeBinding castTb, TypeBinding expressionTb)", "diff": ["-\t\t\tif (scope.areTypesCompatible(expressionTb, castTb))", "+\t\t\tif (Scope.areTypesCompatible(expressionTb, castTb))", "-\t\t\t\tif (scope.areTypesCompatible(castTb, expressionTb)) {", "+\t\t\t\tif (Scope.areTypesCompatible(castTb, expressionTb)) {", "-\t\t\t\tif (scope.areTypesCompatible(expressionTb, castTb))", "+\t\t\t\tif (Scope.areTypesCompatible(expressionTb, castTb))", "-\t\t\t\tif (scope.areTypesCompatible(castTb, expressionTb)) {", "+\t\t\t\tif (Scope.areTypesCompatible(castTb, expressionTb)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45f2d1bc395e785a639be09bf5ed186f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "490cc39003ba5daaddf4fdf25c1c4ad52d071fa8", "commitAfterChange": "63cc2b02a5dc2c73f3b525966213744b7c2edcf0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic final void areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castTb, \t\tTypeBinding expressionTb)", "signatureAfterChange": "  \tpublic final void areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castTb, \t\tTypeBinding expressionTb)", "diff": ["-\t\t\t\tif (scope.areTypesCompatible(expressionTb, castTb)", "+\t\t\t\tif (Scope.areTypesCompatible(expressionTb, castTb)", "-\t\t\t\tif (scope.areTypesCompatible(expressionTb, castTb)) // no runtime error", "+\t\t\t\tif (Scope.areTypesCompatible(expressionTb, castTb)) // no runtime error", "-\t\t\t\tif (scope.areTypesCompatible(castTb, expressionTb)) {", "+\t\t\t\tif (Scope.areTypesCompatible(castTb, expressionTb)) {", "-\t\t\t\t\tif (scope.areTypesCompatible(expressionTb, castTb))", "+\t\t\t\t\tif (Scope.areTypesCompatible(expressionTb, castTb))", "-\t\t\t\tif (!scope.areTypesCompatible(castTb, expressionTb)) {", "+\t\t\t\tif (!Scope.areTypesCompatible(castTb, expressionTb)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c044aaee45170839164e81421eb39f07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "490cc39003ba5daaddf4fdf25c1c4ad52d071fa8", "commitAfterChange": "63cc2b02a5dc2c73f3b525966213744b7c2edcf0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic final boolean areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castTb, \t\tTypeBinding expressionTb)", "signatureAfterChange": "  \tpublic final boolean areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castTb, \t\tTypeBinding expressionTb)", "diff": ["-\t\t\t\t\tif (scope.areTypesCompatible(expressionTb, castTb))", "+\t\t\t\t\tif (Scope.areTypesCompatible(expressionTb, castTb))", "-\t\t\t\t\t\tif (scope.areTypesCompatible(castTb, expressionTb)) {", "+\t\t\t\t\t\tif (Scope.areTypesCompatible(castTb, expressionTb)) {", "-\t\t\t\t\t\tif (scope.areTypesCompatible(expressionTb, castTb))", "+\t\t\t\t\t\tif (Scope.areTypesCompatible(expressionTb, castTb))", "-\t\t\t\t\t\tif (scope.areTypesCompatible(castTb, expressionTb)) {", "+\t\t\t\t\t\tif (Scope.areTypesCompatible(castTb, expressionTb)) {"]}], "num": 66948}
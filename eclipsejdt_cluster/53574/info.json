{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "386c8bded7cd347421ed7fb2768f4a0b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04419321fb85231fd3a3910687886726", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tprivate void traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "signatureAfterChange": " \tprivate void traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "diff": ["-\t\t\t\tIPath childPath = childRes.getFullPath();", "+\t\t\t\tIPath childPath = externalPath(childRes);", "+\t\t\t\tRootInfo originalChildRootInfo = childRootInfo;", "-\t\t\t\t\t\t|| (childRootInfo == null && (childRootInfo = this.rootInfo(childPath, childKind)) != null)) {", "-\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, childRootInfo, null); // binary output of childRootInfo.project cannot be this root", "+\t\t\t\t\t\t|| (childRootInfo == null && originalChildRootInfo != null)) {", "+\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, originalChildRootInfo, null); // binary output of childRootInfo.project cannot be this root", "-\t\t\t\t\t\tchildRootInfo = (RootInfo) iterator.next();", "+\t\t\t\t\t\toriginalChildRootInfo = (RootInfo) iterator.next();", "-\t\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, childRootInfo, null); // binary output of childRootInfo.project cannot be this root", "+\t\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, originalChildRootInfo, null); // binary output of childRootInfo.project cannot be this root"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0476a597afc15372646e9fad293dac87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/mirrortest/MirrorUtilTestAnnotationProcessor.java", "commitBeforeChange": "a6fb7155fd890e70fc93ff099a2bfa78beffa3e9", "commitAfterChange": "dade23c0ca1cb5b996dfae1d1cfc189d06d41a6f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tprivate void testEnvOptions()", "signatureAfterChange": " \t \tprivate void testEnvOptions()", "diff": ["+\t\t", "+\t\tname = options.get(ENV_KEYS[EC_PROJDIRFILE]);", "+\t\tif (name == null) {", "+\t\t\tProcessorTestStatus.fail(ENV_KEYS[EC_PROJDIRFILE] + \" was not in options map\");", "+\t\t} else {", "+\t\t\tfile = new File(name);", "+\t\t\tProcessorTestStatus.assertTrue(ENV_KEYS[EC_PROJDIRFILE] + \" was not found\", file != null && file.exists());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05d8844e5d9b560836b5088955ce77bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "074f76ed30b280be335de3f9fa68939f9241cbe0", "commitAfterChange": "451a4290b08482db72c12f90b576f09a8da8fda2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, final ISearchRequestor storage)", "signatureAfterChange": " \tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, int searchFor, final ISearchRequestor storage)", "diff": ["-\tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, final ISearchRequestor storage) {", "+\tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, int searchFor, final ISearchRequestor storage) {", "-\t\t\t\t\t\tNameLookup.ACCEPT_ALL);", "+\t\t\t\t\t\tconvertSearchFilterToModelFilter(searchFor));", "-\t\t\t\t\tsimpleName,", "+\t\t\t\t\tsimpleName.length == 0 ? null : simpleName, //TODO(david) remove once bug 156340 will be fixed", "-\t\t\t\t\tIJavaSearchConstants.TYPE,", "+\t\t\t\t\tsearchFor,", "-\t\t\t\t\tNameLookup.ACCEPT_ALL);", "+\t\t\t\t\tconvertSearchFilterToModelFilter(searchFor));", "-\t\t\t\tNameLookup.ACCEPT_ALL);", "+\t\t\t\tconvertSearchFilterToModelFilter(searchFor));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "076ae01067f8deebe337090ed7fc08a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "70e7dc8284deadd5b37cb25d1eb08df1105ac893", "commitAfterChange": "e08761f63c783c669290a9af1a8a518a8fe34113", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "signatureAfterChange": " public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "diff": ["-\t\tif (originalBinding != this.binding && originalBinding.type != this.binding.type) {", "-\t\t    // extra cast needed if method return type has type variable", "-\t\t    if ((originalBinding.type.tagBits & TagBits.HasTypeVariable) != 0 && runtimeTimeType.id != T_JavaLangObject) {", "-\t\t    \tTypeBinding targetType = (!compileTimeType.isBaseType() && runtimeTimeType.isBaseType()) ", "-\t\t    \t\t? compileTimeType  // unboxing: checkcast before conversion", "-\t\t    \t\t: runtimeTimeType;", "-\t\t        this.genericCast = originalBinding.type.genericCast(targetType);", "-\t\t    }", "+\t\tTypeBinding originalType = originalBinding.type;", "+\t    // extra cast needed if method return type is type variable", "+\t\tif (originalBinding != this.binding ", "+\t\t\t\t&& originalType != this.binding.type", "+\t\t\t\t&& runtimeTimeType.id != T_JavaLangObject", "+\t\t\t\t&& (originalType.tagBits & TagBits.HasTypeVariable) != 0) {", "+\t    \tTypeBinding targetType = (!compileTimeType.isBaseType() && runtimeTimeType.isBaseType()) ", "+\t    \t\t? compileTimeType  // unboxing: checkcast before conversion", "+\t    \t\t: runtimeTimeType;", "+\t        this.genericCast = originalBinding.type.genericCast(targetType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0839231ffc372afcf05e1cb0325efcc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "740d8a3bbf7d827a9782a8704551b5892c828d42", "commitAfterChange": "37fa53fe1bcd1db81d377f564f101511c07818f5", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public ReferenceBinding findSuperTypeErasingTo(ReferenceBinding erasure)", "signatureAfterChange": " public ReferenceBinding findSuperTypeWithSameErasure(TypeBinding otherType)", "diff": ["-public ReferenceBinding findSuperTypeErasingTo(ReferenceBinding erasure) {", "+public ReferenceBinding findSuperTypeWithSameErasure(TypeBinding otherType) {", "-    if (this == erasure || erasure() == erasure) return this;", "+    if (this == otherType) return this;", "+    ", "+    // do not allow type variables to match with erasures for free", "+    if (!otherType.isTypeVariable()) {", "+    \totherType = otherType.erasure();", "+   \t    if (!isTypeVariable() && erasure() == otherType) return this;", "+    }", "+", "+    ", "-    if (!erasure.isInterface()) {", "+    if (!otherType.isInterface()) {", "-\t\t\tif (currentType == erasure || currentType.erasure() == erasure) return currentType;", "+\t\t\tif (currentType == otherType || currentType.erasure() == otherType) return currentType;", "-\t\t\tif ((currentType = interfaces[j]) == erasure || currentType.erasure() == erasure)", "+\t\t\tif ((currentType = interfaces[j]) == otherType || currentType.erasure() == otherType)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "085f4c5dbc3c3ad34fd759bb04949606", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "dcbe7362896a7068a9850a5235942cff3d96bf67", "commitAfterChange": "2eaa2672aef2e6efe5a714d6aa5b68a12987fb3d", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\tunitScope.recordReference(unitScope.fPackage.compoundName, name);", "-\t\t\tBinding binding = unitScope.fPackage.getTypeOrPackage(name);", "+\t\t\tPackageBinding currentPackage = unitScope.fPackage;", "+\t\t\tunitScope.recordReference(currentPackage.compoundName, name);", "+\t\t\tBinding binding = currentPackage.getTypeOrPackage(name);", "-\t\t\t\t\t\t\t\t? findType(name, (PackageBinding) resolvedImport, unitScope.fPackage)", "+\t\t\t\t\t\t\t\t? findType(name, (PackageBinding) resolvedImport, currentPackage)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0afc90ea3ae935b72268785f498d2ce1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 33, "signatureBeforeChange": " \t public boolean isCompatibleWith(TypeBinding right)", "signatureAfterChange": " public boolean isCompatibleWith(TypeBinding otherType)", "diff": ["-\t", "-public boolean isCompatibleWith(TypeBinding right) {", "-\tif (right == this)", "+public boolean isCompatibleWith(TypeBinding otherType) {", "+    ", "+\tif (otherType == this)", "-\tif (right.id == T_Object)", "+\tif (otherType.id == T_Object)", "-\tif (!(right instanceof ReferenceBinding))", "+\tif (!(otherType instanceof ReferenceBinding))", "-", "-\tReferenceBinding referenceBinding = (ReferenceBinding) right;", "-\tif (referenceBinding.isInterface())", "-\t\treturn implementsInterface(referenceBinding, true);", "+\tReferenceBinding otherReferenceType = (ReferenceBinding) otherType;", "+\tif (this.isEquivalentTo(otherReferenceType)) return true;", "+\tif (otherReferenceType.isWildcard()) {", "+\t    return ((WildcardBinding) otherReferenceType).boundCheck(this);", "+\t}", "+\tif (otherReferenceType.isInterface())", "+\t\treturn implementsInterface(otherReferenceType, true);", "-\treturn referenceBinding.isSuperclassOf(this);", "+\treturn otherReferenceType.isSuperclassOf(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bbae385a68d4978967036fb6a36902d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "ed928ec2813761092753aa6a4742b90cbcc4f27d", "commitAfterChange": "e06a7df4ed09416d5b89c022acf08bb2cb167af8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void addTypeHierarchyChangedListener(ITypeHierarchyChangedListener listener)", "signatureAfterChange": " public synchronized void addTypeHierarchyChangedListener(ITypeHierarchyChangedListener listener)", "diff": ["-public void addTypeHierarchyChangedListener(ITypeHierarchyChangedListener listener) {", "-\tif (this.changeListeners == null) {", "-\t\tthis.changeListeners = new ArrayList();", "-\t\t// fix for 1FW67PA", "-\t\tif (this.exists) {", "-\t\t\tactivate();", "-\t\t}", "+public synchronized void addTypeHierarchyChangedListener(ITypeHierarchyChangedListener listener) {", "+\tArrayList listeners = this.changeListeners;", "+\tif (listeners == null) {", "+\t\tthis.changeListeners = listeners = new ArrayList();", "+\t", "+\t// register with JavaCore to get Java element delta on first listener added", "+\tif (listeners.size() == 0) {", "+\t\tJavaCore.addElementChangedListener(this);", "+\t}", "+\t", "-\tif (this.changeListeners.indexOf(listener) == -1) {", "-\t\tthis.changeListeners.add(listener);", "+\tif (listeners.indexOf(listener) == -1) {", "+\t\tlisteners.add(listener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dbfa1541b93a7dfb730795c363b9d4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotationBinding.java", "commitBeforeChange": "aba5db418de65ea21899bfdf893833cd0fc3f586", "commitAfterChange": "7aba284c4ea53048ed9ad4ccc85fef0f7294903a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  private AnnotationBinding setMethodBindings()", "signatureAfterChange": "  public static void setMethodBindings(ReferenceBinding type, ElementValuePair[] pairs)", "diff": ["-private AnnotationBinding setMethodBindings() {", "+public static void setMethodBindings(ReferenceBinding type, ElementValuePair[] pairs) {", "-\tfor (int i = this.pairs.length; --i >= 0;) {", "-\t\tElementValuePair pair = this.pairs[i];", "-\t\tMethodBinding[] methods = this.type.getMethods(pair.getName());", "+\tfor (int i = pairs.length; --i >= 0;) {", "+\t\tElementValuePair pair = pairs[i];", "+\t\tMethodBinding[] methods = type.getMethods(pair.getName());", "-\treturn this;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "159dae473f0db17995d32887d7268328", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "21f559feffbf2460bdd3a9d1e827cbd3c01012af", "commitAfterChange": "686f3b257f4d32050f06213668cbddf17fedbfcf", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\tlong complianceLevel = compilerOptions().complianceLevel;", "-\t\tboolean isCompliant14 = compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4;", "+\t\tlong complianceLevel = compilerOptions().complianceLevel;", "+\t\tboolean isCompliant14 = complianceLevel >= ClassFileConstants.JDK1_4;", "+\t\tboolean isCompliant15 = complianceLevel >= ClassFileConstants.JDK1_5;", "-\t\t\t\t\t\t\t\tif (complianceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\t\t\tif (isCompliant15) {", "-\t\tif (complianceLevel >= ClassFileConstants.JDK1_5", "+\t\tif (isCompliant15"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "185745d70a7ebf1bbdd06341f2ce4f87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AbstractIndexer.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void addInterfaceDeclaration(int modifiers, char[] packageName, char[] name, char[][] enclosingTypeNames, char[][] superinterfaces)", "signatureAfterChange": " \tpublic void addInterfaceDeclaration(int modifiers, char[] packageName, char[] name, char[][] enclosingTypeNames, char[][] superinterfaces)", "diff": ["-}", "-public void addInterfaceDeclaration(int modifiers, char[] packageName, char[] name, char[][] enclosingTypeNames, char[][] superinterfaces) {", "-\tthis.output.addRef(TypeDeclarationPattern.createInterfaceDeclaration(packageName, enclosingTypeNames, name));", "-", "-\tif (superinterfaces != null)", "-\t\tfor (int i = 0, max = superinterfaces.length; i < max; i++)", "-\t\t\tthis.output.addRef(", "-\t\t\t\tSuperTypeReferencePattern.createReference(", "-\t\t\t\t\tmodifiers, packageName, name, enclosingTypeNames, INTERFACE_SUFFIX, superinterfaces[i], INTERFACE_SUFFIX));", "-}", "+\t}", "+\tpublic void addInterfaceDeclaration(int modifiers, char[] packageName, char[] name, char[][] enclosingTypeNames, char[][] superinterfaces) {", "+\t\taddIndexEntry(TYPE_DECL, TypeDeclarationPattern.createIndexKey(packageName, enclosingTypeNames, name, false));", "+\t", "+\t\tif (superinterfaces != null)", "+\t\t\tfor (int i = 0, max = superinterfaces.length; i < max; i++)", "+\t\t\t\taddIndexEntry(", "+\t\t\t\t\tSUPER_REF,", "+\t\t\t\t\tSuperTypeReferencePattern.createIndexKey(", "+\t\t\t\t\t\tmodifiers, packageName, name, enclosingTypeNames, INTERFACE_SUFFIX, superinterfaces[i], INTERFACE_SUFFIX));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19705463f8fada437f619b13d2919020", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "ed928ec2813761092753aa6a4742b90cbcc4f27d", "commitAfterChange": "e06a7df4ed09416d5b89c022acf08bb2cb167af8", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 68, "signatureBeforeChange": " public void removeTypeHierarchyChangedListener(ITypeHierarchyChangedListener listener)", "signatureAfterChange": " public synchronized void removeTypeHierarchyChangedListener(ITypeHierarchyChangedListener listener)", "diff": ["-public void removeTypeHierarchyChangedListener(ITypeHierarchyChangedListener listener) {", "-\tif (this.changeListeners == null) {", "+public synchronized void removeTypeHierarchyChangedListener(ITypeHierarchyChangedListener listener) {", "+\tArrayList listeners = this.changeListeners;", "+\tif (listeners == null) {", "-\tthis.changeListeners.remove(listener);", "-\tif (this.changeListeners.isEmpty()) {", "-\t\tdeactivate();", "+\tlisteners.remove(listener);", "+", "+\t// deregister from JavaCore on last listener removed", "+\tif (listeners.isEmpty()) {", "+\t\tJavaCore.removeElementChangedListener(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f19f9e27f3dc7926706beead0ca54b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocQualifiedTypeReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["+\t */", "+\tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds) {", "+\t\t// handle the error here", "+\t\tthis.constant = Constant.NotAConstant;", "+\t\tif (this.resolvedType != null) // is a shared type reference which was already resolved", "+\t\t\treturn this.resolvedType.isValidBinding() ? this.resolvedType : this.resolvedType.closestMatch(); // already reported error", "+", "+\t\tTypeBinding type = this.resolvedType = getTypeBinding(scope);", "+\t\t// End resolution when getTypeBinding(scope) returns null. This may happen in", "+\t\t// certain circumstances, typically when an illegal access is done on a type ", "+\t\t// variable (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=204749)", "+\t\tif (type == null) return null;\t\t", "+\t\tif (!type.isValidBinding()) {", "+\t\t\tBinding binding = scope.getTypeOrPackage(this.tokens);", "+\t\t\tif (binding instanceof PackageBinding) {", "+\t\t\t\tthis.packageBinding = (PackageBinding) binding;", "+\t\t\t} else {", "+\t\t\t\treportInvalidType(scope);", "+\t\t\t}", "+\t\t\treturn null;", "+\t\t}", "+\t\tif (isTypeUseDeprecated(type, scope))", "+\t\t\treportDeprecatedType(type, scope);", "+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=209936", "+\t\t// raw convert all enclosing types when dealing with Javadoc references", "+\t\tif (type.isGenericType() || type.isParameterizedType()) {", "+\t\t\tthis.resolvedType = scope.environment().convertToRawType(type, true /*force the conversion of enclosing types*/);", "+\t\t}\t\t", "+\t\treturn this.resolvedType;", "-\t */", "-\tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds) {", "-\t\t// handle the error here", "-\t\tthis.constant = Constant.NotAConstant;", "-\t\tif (this.resolvedType != null) // is a shared type reference which was already resolved", "-\t\t\treturn this.resolvedType.isValidBinding() ? this.resolvedType : null; // already reported error", "-", "-\t\tthis.resolvedType = getTypeBinding(scope);", "-\t\t// End resolution when getTypeBinding(scope) returns null. This may happen in", "-\t\t// certain circumstances, typically when an illegal access is done on a type ", "-\t\t// variable (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=204749)", "-\t\tif (this.resolvedType == null) return null;", "-\t\t", "-\t\tif (!this.resolvedType.isValidBinding()) {", "-\t\t\tBinding binding = scope.getTypeOrPackage(this.tokens);", "-\t\t\tif (binding instanceof PackageBinding) {", "-\t\t\t\tthis.packageBinding = (PackageBinding) binding;", "-\t\t\t} else {", "-\t\t\t\treportInvalidType(scope);", "-\t\t\t}", "-\t\t\treturn null;", "-\t\t}", "-\t\tif (isTypeUseDeprecated(this.resolvedType, scope))", "-\t\t\treportDeprecatedType(this.resolvedType, scope);", "-\t\t", "-\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=209936", "-\t\t// raw convert all enclosing types when dealing with Javadoc references", "-\t\tif (this.resolvedType.isGenericType() || this.resolvedType.isParameterizedType()) {", "-\t\t\treturn this.resolvedType = scope.environment().convertToRawType(this.resolvedType, true /*force the conversion of enclosing types*/);", "-\t\t}", "-\t\treturn this.resolvedType;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24e83b881de3dd04c086b6b5dd110734", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatch.java", "commitBeforeChange": "07500b3aefa58aecd5e846627b7c70382793f29f", "commitAfterChange": "641c18a6fa8d154329ae2bcdac1ab25ff8b18f71", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate static APTResult runAPT( \t\t\tMap<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tSet<AnnotationProcessorFactory> previousRoundsFactories, \t\t\tIJavaProject javaProj, \t\t\tIFile[] files, \t\t\tICompilationUnit compilationUnit, \t\t\tboolean isFullBuild)", "signatureAfterChange": " \tprivate static APTResult runAPT( \t\t\tMap<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tSet<AnnotationProcessorFactory> previousRoundsFactories, \t\t\tIJavaProject javaProj, \t\t\tIFile[] files, \t\t\tICompilationUnit compilationUnit, \t\t\tboolean isFullBuild)", "diff": ["-\t\tISchedulingRule schedulingRule;", "+\t\tAptProject aptProject = AptPlugin.getAptProject(javaProj);", "-\t\t\t runnable = new APTDispatchRunnable( files, javaProj, factories, previousRoundsFactories, isFullBuild );", "-\t\t\t schedulingRule = javaProj.getResource();", "+\t\t\t runnable = new APTDispatchRunnable( files, aptProject, factories, previousRoundsFactories, isFullBuild );", "-\t\t\t\t workspace.run(runnable, schedulingRule, IWorkspace.AVOID_UPDATE, null);", "+\t\t\t\t workspace.run(runnable, javaProj.getResource(), IWorkspace.AVOID_UPDATE, null);", "-\t\t\trunnable = new APTDispatchRunnable( compilationUnit, javaProj, factories );", "+\t\t\trunnable = new APTDispatchRunnable( compilationUnit, aptProject, factories );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "256556c871ab40f8b1a6c361e71580b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void bytecodeExceeds64KLimit(AbstractMethodDeclaration location)", "signatureAfterChange": " public void bytecodeExceeds64KLimit(AbstractMethodDeclaration location)", "diff": ["+\tMethodBinding method = location.binding;", "-\t\t\tnew String[] {new String(location.selector), parametersAsString(location.binding.parameters, false)},", "-\t\t\tnew String[] {new String(location.selector), parametersAsString(location.binding.parameters, true)},", "+\t\t\tnew String[] {new String(location.selector), typesAsString(method.isVarargs(), method.parameters, false)},", "+\t\t\tnew String[] {new String(location.selector), typesAsString(method.isVarargs(), method.parameters, true)},", "-\t\t\tnew String[] {new String(location.selector), parametersAsString(location.binding.parameters, false)},", "-\t\t\tnew String[] {new String(location.selector), parametersAsString(location.binding.parameters, true)},", "+\t\t\tnew String[] {new String(location.selector), typesAsString(method.isVarargs(), method.parameters, false)},", "+\t\t\tnew String[] {new String(location.selector), typesAsString(method.isVarargs(), method.parameters, true)},"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2597dc771849d7e2527db1952c68fb27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "c9dd851a757195fe684b1a5b7f8f16cc8d3ff375", "commitAfterChange": "b79c29d7f1a4a20398432bd28f19825acd39464f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tvoid findMatches(SearchPattern pattern, SearchParticipant[] participants, IJavaSearchScope scope, SearchRequestor requestor, IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tvoid findMatches(SearchPattern pattern, SearchParticipant[] participants, IJavaSearchScope scope, SearchRequestor requestor, IProgressMonitor monitor) throws CoreException", "diff": ["-\t\t\t/* initialize progress monitor */", "-\t\t\tif (monitor != null)", "-\t\t\t\tmonitor.beginTask(Messages.engine_searching, 100); ", "+\t\t\t/* initialize progress monitor */", "+\t\t\tint length = participants.length;", "+\t\t\tif (monitor != null)", "+\t\t\t\tmonitor.beginTask(Messages.engine_searching, 100 * length); ", "-\t\t\tfor (int i = 0, l = participants.length; i < l; i++) {", "+\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tSubProgressMonitor subMonitor= monitor==null ? null : new SubProgressMonitor(monitor, 1000);", "-\t\t\t\tif (subMonitor != null) subMonitor.beginTask(\"\", 1000); //$NON-NLS-1$", "-\t\t\t\t\tif (subMonitor != null) subMonitor.subTask(Messages.bind(Messages.engine_searching_indexing, new String[] {participant.getDescription()})); ", "+\t\t\t\t\tif (monitor != null) monitor.subTask(Messages.bind(Messages.engine_searching_indexing, new String[] {participant.getDescription()})); ", "-\t\t\t\t\t\tsubMonitor);", "+\t\t\t\t\t\tmonitor==null ? null : new SubProgressMonitor(monitor, 50));", "-\t\t\t\t\tif (subMonitor != null) subMonitor.subTask(Messages.bind(Messages.engine_searching_matching, new String[] {participant.getDescription()})); ", "+\t\t\t\t\tif (monitor != null) monitor.subTask(Messages.bind(Messages.engine_searching_matching, new String[] {participant.getDescription()})); ", "-\t\t\t\t\t\tparticipant.locateMatches(matches, pattern, scope, requestor, subMonitor);", "+\t\t\t\t\t\tparticipant.locateMatches(matches, pattern, scope, requestor, monitor==null ? null : new SubProgressMonitor(monitor, 50));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26f9a25cd478d4b2072f3c6c2d9e57a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibrary.java", "commitBeforeChange": "2fdac50d0a994a41e3b73d3202a0de983b014e1d", "commitAfterChange": "5291cd66203d5d42725b1c4b5cba50a5232bc244", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  String serialize() throws IOException", "signatureAfterChange": " \t \tpublic static String serialize(IClasspathEntry[] entries, boolean isSystemLibrary) throws IOException", "diff": ["-\t/* package */  String serialize() throws IOException {", "+\tpublic static String serialize(IClasspathEntry[] entries, boolean isSystemLibrary) throws IOException {", "-\t\tlibrary.put(TAG_SYSTEMLIBRARY, String.valueOf(this.isSystemLibrary));", "+\t\tlibrary.put(TAG_SYSTEMLIBRARY, String.valueOf(isSystemLibrary));", "-\t\tfor (int i = 0; i < this.entries.length; ++i) {", "-\t\t\tClasspathEntry cpEntry = (ClasspathEntry) this.entries[i];", "+\t\tfor (int i = 0, length = entries.length; i < length; ++i) {", "+\t\t\tClasspathEntry cpEntry = (ClasspathEntry) entries[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2773d101c78eabf13b6a9b8c4ad97016", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "1b94558fa757b767854d14340a754f8fb18540c3", "commitAfterChange": "c0f8220101d45cc95e0339b31adfd53c34571071", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public String[] getParameterNames() throws JavaModelException", "signatureAfterChange": " public String[] getParameterNames() throws JavaModelException", "diff": ["-\t\t\tthis.parameterNames = new String[paramNames.length];", "+\t\t\tString[] names = new String[paramNames.length];", "-\t\t\t\tthis.parameterNames[i] = new String(paramNames[i]);", "+\t\t\t\tnames[i] = new String(paramNames[i]);", "-\t\t\treturn this.parameterNames;", "+\t\t\treturn this.parameterNames = names;", "-\t\t\t\t\tthis.parameterNames = new String[paramsLength];", "+\t\t\t\t\tString[] names = new String[paramsLength];", "-\t\t\t\t\t\t\tthis.parameterNames[i] = String.valueOf(param, indexOfSpace + 1, param.length - indexOfSpace -1);", "+\t\t\t\t\t\t\tnames[i] = String.valueOf(param, indexOfSpace + 1, param.length - indexOfSpace -1);", "-\t\t\t\t\t\t\tthis.parameterNames[i] = \"arg\" + i; //$NON-NLS-1$", "+\t\t\t\t\t\t\tnames[i] = \"arg\" + i; //$NON-NLS-1$", "-\t\t\t\t\treturn this.parameterNames;", "+\t\t\t\t\treturn this.parameterNames = names;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2803c5650c1dcc133878976002ae6fe6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "836fef68856b7e7f6b208deb388901eeda69de4b", "commitAfterChange": "79e5d72bba2066424baa4a0d68a49d71cc4f75a5", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": " public boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-    return this == otherType;", "+    if (this == otherType) return true;", "+    if (otherType == null) return false;", "+    if (otherType.isWildcard()) // wildcard", "+\t\treturn ((WildcardBinding) otherType).boundCheck(this);", "+\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "295076bd7cacbfb5a1914afa49526a6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "38deed784ce291d43d3c53414da1ee3c4ed08415", "commitAfterChange": "644852dd87f43f0af4108905e62d50729f9b044b", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " public void fieldHiding(FieldDeclaration fieldDecl, Binding hiddenVariable)", "signatureAfterChange": " public void fieldHiding(FieldDeclaration fieldDecl, Binding hiddenVariable)", "diff": ["-\t\t\tfieldDecl.sourceStart,", "-\t\t\tfieldDecl.sourceEnd);", "+\t\t\tlocalSourceStart((LocalVariableBinding) hiddenVariable, fieldDecl),", "+\t\t\tlocalSourceEnd((LocalVariableBinding) hiddenVariable, fieldDecl));", "-\t\t\tfieldDecl.sourceStart,", "-\t\t\tfieldDecl.sourceEnd);", "+\t\t\tfieldSourceStart(hiddenField, fieldDecl),", "+\t\t\tfieldSourceEnd(hiddenField, fieldDecl));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cb60ffaca87e67f5aca4c7aad79c466", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "b267dc5fd07e62c802290616c0cbe7abef453463", "commitAfterChange": "aa0984d79780a8b5715722d33a45cdb0c134a6fb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "signatureAfterChange": " \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["+\t\t\tFieldBinding codegenField = (FieldBinding) this.codegenBinding;", "-\t\t\t\t&& (fieldBinding.isPrivate() // private access", "-\t\t\t\t\t|| (fieldBinding.isProtected() // implicit protected access", "-\t\t\t\t\t\t\t&& fieldBinding.declaringClass.getPackage() != currentScope.enclosingSourceType().getPackage()))) {", "+\t\t\t\t&& (codegenField.isPrivate() // private access", "+\t\t\t\t\t|| (codegenField.isProtected() // implicit protected access", "+\t\t\t\t\t\t\t&& codegenField.declaringClass.getPackage() != currentScope.enclosingSourceType().getPackage()))) {", "-\t\t\t\t\t\tenclosingTypeAt((bits & DepthMASK) >> DepthSHIFT)).addSyntheticMethod((FieldBinding) this.codegenBinding, isReadAccess);", "-\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess((FieldBinding)this.codegenBinding, this, isReadAccess);", "+\t\t\t\t\t\tenclosingTypeAt((bits & DepthMASK) >> DepthSHIFT)).addSyntheticMethod(codegenField, isReadAccess);", "+\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(codegenField, this, isReadAccess);", "-\t\t\t\t\t|| !fieldBinding.declaringClass.canBeSeenBy(currentScope))){", "+\t\t\t\t\t|| !codegenField.declaringClass.canBeSeenBy(currentScope))){", "-\t\t\t\t\t        (FieldBinding) this.codegenBinding, ", "+\t\t\t\t\t       codegenField, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30d5d454e86e6e2287cfc24c72d5e092", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "59ccfc02e85b3cb54d1260f0f13d4e77dbe5b35a", "commitAfterChange": "1f936417a416d90917cba09bee390af7aeeb85e8", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void completeMethodInfo( \t\t\tMethodBinding binding, \t\t\tint methodAttributeOffset, \t\t\tint attributesNumber)", "signatureAfterChange": " \tpublic void completeMethodInfo( \t\t\tMethodBinding binding, \t\t\tint methodAttributeOffset, \t\t\tint attributesNumber)", "diff": ["-\t\t\t\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "-\t\t\t\t\t\t\tArgument argument = arguments[i];", "-\t\t\t\t\t\t\tif ((argument.bits & ASTNode.HasTypeAnnotations) != 0) {", "-\t\t\t\t\t\t\t\targument.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_FORMAL_PARAMETER, i, allTypeAnnotationContexts);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tcompleteArgumentAnnotationInfo(arguments, allTypeAnnotationContexts);", "+\t\t\t\t}", "+\t\t\t} else if (binding.sourceLambda() != null) { // SyntheticMethodBinding, purpose : LambdaMethod.", "+\t\t\t\tLambdaExpression lambda = binding.sourceLambda();", "+\t\t\t\tif ((lambda.bits & ASTNode.HasTypeAnnotations) != 0) {", "+\t\t\t\t\tif (lambda.arguments != null)", "+\t\t\t\t\t\tcompleteArgumentAnnotationInfo(lambda.arguments, allTypeAnnotationContexts);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31e96b56a749525fc3af932a0bf3d528", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "06b4da04864008da88066d5a5e945f628c432313", "commitAfterChange": "6cb1a46319677820636b0fbe76d096b92fe1835a", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "   \tprivate int rewriteModifiers2(ASTNode node, ChildListPropertyDescriptor property, int pos)", "signatureAfterChange": "   \tprivate int rewriteModifiers2(ASTNode node, ChildListPropertyDescriptor property, int pos)", "diff": ["-\t\tif (isAllInsert || isAllRemove) {", "+\t\tString keyword= Util.EMPTY_STRING;", "+\t\tif (property == SingleVariableDeclaration.VARARGS_ANNOTATIONS_PROPERTY) {", "+\t\t\tkeyword= \" \"; //$NON-NLS-1$", "+\t\t} else if (isAllInsert || isAllRemove) {", "-\t\tif (property == SingleVariableDeclaration.MODIFIERS2_PROPERTY)", "+\t\tif (property == SingleVariableDeclaration.MODIFIERS2_PROPERTY || property == SingleVariableDeclaration.VARARGS_ANNOTATIONS_PROPERTY)", "-\t\tint endPos= new ModifierRewriter(formatterPrefix).rewriteList(node, property, pos, Util.EMPTY_STRING, \" \"); //$NON-NLS-1$ ", "+\t\tint endPos= new ModifierRewriter(formatterPrefix).rewriteList(node, property, pos, keyword, \" \"); //$NON-NLS-1$ ", "-", "-\t\t\tboolean lastUnchanged= children[children.length - 1].getChangeKind() != RewriteEvent.UNCHANGED;", "+\t\t\tRewriteEvent lastChild = children[children.length - 1];", "+\t\t\tboolean lastUnchanged= lastChild.getChangeKind() != RewriteEvent.UNCHANGED;", "-\t\t\t\tdoTextRemove(endPos, nextPos - endPos, getEditGroup(children[children.length - 1]));", "+\t\t\t\tdoTextRemove(endPos, nextPos - endPos, getEditGroup(lastChild));", "-\t\t\t} else if (isAllInsert || (nextPos == endPos && lastUnchanged)) { // see bug 165654", "-\t\t\t\tRewriteEvent lastChild= children[children.length - 1];", "+\t\t\t} else if ((isAllInsert || (nextPos == endPos && lastUnchanged)) // see bug 165654", "+\t\t\t\t\t&& property != SingleVariableDeclaration.VARARGS_ANNOTATIONS_PROPERTY) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3564c61eca30832b277dac3585d2668c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "fe25f265c04b05b78a3922c802443d0f290eb28d", "commitAfterChange": "24d226ada8d61f965d94976697c07601e6dce9f7", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic static ClasspathVariableInitializer getClasspathVariableInitializer(String variable)", "signatureAfterChange": " \tpublic static ClasspathVariableInitializer getClasspathVariableInitializer(String variable)", "diff": ["-\t\t\t\t\t\t\t\tSystem.out.println(\"CPVariable INIT - found initializer: \"+variable+\" --> \" + configElements[j].getAttribute(\"class\"));//$NON-NLS-3$//$NON-NLS-2$//$NON-NLS-1$", "+\t\t\t\t\t\t\t\tUtil.verbose(\"CPVariable INIT - found initializer\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tUtil.verbose(\"\tvariable: \" + variable); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tUtil.verbose(\"\tclass: \" + configElements[j].getAttribute(\"class\")); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\t\tSystem.out.println(\"CPContainer INIT - failed to instanciate initializer: \"+variable +\" --> \" + configElements[j].getAttribute(\"class\"));//$NON-NLS-3$//$NON-NLS-2$//$NON-NLS-1$", "+\t\t\t\t\t\t\tUtil.verbose(\"CPContainer INIT - failed to instanciate initializer\", System.err); //$NON-NLS-1$", "+\t\t\t\t\t\t\tUtil.verbose(\"\tvariable: \" + variable, System.err); //$NON-NLS-1$", "+\t\t\t\t\t\t\tUtil.verbose(\"\tclass: \" + configElements[j].getAttribute(\"class\"), System.err); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38d14cac9f91730d563fcccb665fed59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/RewriteEventStore.java", "commitBeforeChange": "7183d81a2458b7a9ecc9004f74bf12b52ac2eafc", "commitAfterChange": "54eb6fa8730358fcf98285db139cf9edbd02f92a", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 59, "signatureBeforeChange": " \t \tprivate void doMarkMovedAsRemoved(CopySourceInfo curr)", "signatureAfterChange": " \t \tprivate void doMarkMovedAsRemoved(CopySourceInfo curr, ASTNode parent, StructuralPropertyDescriptor childProperty)", "diff": ["-\tprivate void doMarkMovedAsRemoved(CopySourceInfo curr) {", "-\t\tif (curr.childProperty.isChildListProperty()) {", "-\t\t\tListRewriteEvent event= getListEvent(curr.parent, curr.childProperty, true);", "-\t\t\tint index= event.getIndex(curr.getStartNode(), ListRewriteEvent.OLD);", "+\tprivate void doMarkMovedAsRemoved(CopySourceInfo curr, ASTNode parent, StructuralPropertyDescriptor childProperty) {", "+\t\tif (childProperty.isChildListProperty()) {", "+\t\t\tListRewriteEvent event= getListEvent(parent, childProperty, true);", "+\t\t\tint index= event.getIndex(curr.getNode(), ListRewriteEvent.OLD);", "-\t\t\tNodeRewriteEvent event= getNodeEvent(curr.parent, curr.childProperty, true);", "+\t\t\tNodeRewriteEvent event= getNodeEvent(parent, childProperty, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d33c140e4a927cabbbf9e012bf49a53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnresolvedReferenceBinding.java", "commitBeforeChange": "a96eb1003c8f030ad3ac54b72eb69895f0a3e0dd", "commitAfterChange": "905dec82e916c38704735fea38fad8cba693cc45", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  ReferenceBinding resolve(LookupEnvironment environment, boolean convertGenericToRawType)", "signatureAfterChange": "  ReferenceBinding resolve(LookupEnvironment environment, boolean convertGenericToRawType)", "diff": ["+\tReferenceBinding targetType;", "-\t\tthis.prototype.resolve(environment, convertGenericToRawType);", "-\t\treturn this.resolvedType;", "+\t\ttargetType = this.prototype.resolve(environment, convertGenericToRawType);", "+\t\tif (convertGenericToRawType && targetType != null && targetType.isRawType()) {", "+\t\t\ttargetType = (ReferenceBinding) environment.createAnnotatedType(targetType, this.typeAnnotations);", "+\t\t} else {", "+\t\t\ttargetType = this.resolvedType;", "+\t\t}", "+\t\treturn targetType;", "-    ReferenceBinding targetType = this.resolvedType;", "+\ttargetType = this.resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f8b9396c093dc8174ac9be2758e0a1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "6d7da1254151724e22f25d1be0ba01cba8049f5e", "commitAfterChange": "31f5d8c3352dfd40743cbafcdc19d9f5e7640d54", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambda)", "signatureAfterChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambda)", "diff": ["-\t\torg.eclipse.jdt.internal.compiler.ast.Argument[] arguments = lambda.arguments;", "+\t\torg.eclipse.jdt.internal.compiler.ast.Argument[] arguments = lambda.arguments();", "-\t\tif (lambda.body instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {", "-\t\t\tlambdaExpression.setBody(convert((org.eclipse.jdt.internal.compiler.ast.Expression) lambda.body));", "+\t\tfinal org.eclipse.jdt.internal.compiler.ast.Statement body = lambda.body();", "+\t\tif (body instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {", "+\t\t\tlambdaExpression.setBody(convert((org.eclipse.jdt.internal.compiler.ast.Expression) body));", "-\t\t\tlambdaExpression.setBody(convert((org.eclipse.jdt.internal.compiler.ast.Block) lambda.body));", "+\t\t\tlambdaExpression.setBody(convert((org.eclipse.jdt.internal.compiler.ast.Block) body));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4080e1d80afe27588d9fe71d0bff223f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "b2a1a7d064fd5695fce4ad30f84d3e52d57db8d6", "commitAfterChange": "58d495f741112fe1313f49af60925198c18bb8e1", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 73, "signatureBeforeChange": " public void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " public void configure(String[] argv) throws InvalidInputException", "diff": ["+ */", "+public void configure(String[] argv) throws InvalidInputException {", "+", "+\tif ((argv == null) || (argv.length == 0)) {", "+\t\tprintUsage();", "+\t\treturn;", "+\t}", "+", "+\tfinal int INSIDE_CLASSPATH_start = 1;", "+\tfinal int INSIDE_DESTINATION_PATH = 3;", "+\tfinal int INSIDE_TARGET = 4;", "+\tfinal int INSIDE_LOG = 5;", "+\tfinal int INSIDE_REPETITION = 6;", "+\tfinal int INSIDE_SOURCE = 7;", "+\tfinal int INSIDE_DEFAULT_ENCODING = 8;", "+\tfinal int INSIDE_BOOTCLASSPATH_start = 9;", "+\tfinal int INSIDE_MAX_PROBLEMS = 11;", "+\tfinal int INSIDE_EXT_DIRS = 12;", "+\tfinal int INSIDE_SOURCE_PATH_start = 13;", "+\tfinal int INSIDE_ENDORSED_DIRS = 15;", "+\tfinal int INSIDE_SOURCE_DIRECTORY_DESTINATION_PATH = 16;", "+\tfinal int INSIDE_PROCESSOR_PATH_start = 17;", "+\tfinal int INSIDE_PROCESSOR_start = 18;", "+\tfinal int INSIDE_S_start = 19;", "+\tfinal int INSIDE_CLASS_NAMES = 20;", "+", "+\tfinal int DEFAULT = 0;", "+\tArrayList bootclasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\tString sourcepathClasspathArg = null;", "+\tArrayList sourcepathClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\tArrayList classpaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\tArrayList extdirsClasspaths = null;", "+\tArrayList endorsedDirClasspaths = null;", "+", "+\tint index = -1;", "+\tint filesCount = 0;", "+\tint classCount = 0;", "+\tint argCount = argv.length;", "+\tint mode = DEFAULT;", "+\tthis.maxRepetition = 0;", "+\tboolean printUsageRequired = false;", "+\tString usageSection = null;", "+\tboolean printVersionRequired = false;", "+", "+\tboolean didSpecifyDefaultEncoding = false;", "+\tboolean didSpecifyDeprecation = false;", "+\tboolean didSpecifyCompliance = false;", "+\tboolean didSpecifyDisabledAnnotationProcessing = false;", "+", "+\tString customEncoding = null;", "+\tString customDestinationPath = null;", "+\tString currentSourceDirectory = null;", "+\tString currentArg = Util.EMPTY_STRING;", "+", "+\t// expand the command line if necessary", "+\tboolean needExpansion = false;", "+\tloop: for (int i = 0; i < argCount; i++) {", "+\t\t\tif (argv[i].startsWith(\"@\")) { //$NON-NLS-1$", "+\t\t\t\tneedExpansion = true;", "+\t\t\t\tbreak loop;", "+\t\t\t}", "+\t}", "+", "+\tString[] newCommandLineArgs = null;", "+\tif (needExpansion) {", "+\t\tnewCommandLineArgs = new String[argCount];", "+\t\tindex = 0;", "+\t\tfor (int i = 0; i < argCount; i++) {", "+\t\t\tString[] newArgs = null;", "+\t\t\tString arg = argv[i].trim();", "+\t\t\tif (arg.startsWith(\"@\")) { //$NON-NLS-1$", "+\t\t\t\ttry {", "+\t\t\t\t\tLineNumberReader reader = new LineNumberReader(new StringReader(new String(Util.getFileCharContent(new File(arg.substring(1)), null))));", "+\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\tString line;", "+\t\t\t\t\twhile((line = reader.readLine()) != null) {", "+\t\t\t\t\t\tline = line.trim();", "+\t\t\t\t\t\tif (!line.startsWith(\"#\")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\tbuffer.append(line).append(\" \"); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tnewArgs = tokenize(buffer.toString());", "+\t\t\t\t} catch(IOException e) {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tthis.bind(\"configure.invalidexpansionargumentname\", arg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (newArgs != null) {", "+\t\t\t\tint newCommandLineArgsLength = newCommandLineArgs.length;", "+\t\t\t\tint newArgsLength = newArgs.length;", "+\t\t\t\tSystem.arraycopy(newCommandLineArgs, 0, (newCommandLineArgs = new String[newCommandLineArgsLength + newArgsLength - 1]), 0, index);", "+\t\t\t\tSystem.arraycopy(newArgs, 0, newCommandLineArgs, index, newArgsLength);", "+\t\t\t\tindex += newArgsLength;", "+\t\t\t} else {", "+\t\t\t\tnewCommandLineArgs[index++] = arg;", "+\t\t\t}", "+\t\t}", "+\t\tindex = -1;", "+\t} else {", "+\t\tnewCommandLineArgs = argv;", "+\t\tfor (int i = 0; i < argCount; i++) {", "+\t\t\tnewCommandLineArgs[i] = newCommandLineArgs[i].trim();", "+\t\t}", "+\t}", "+\targCount = newCommandLineArgs.length;", "+\tthis.expandedCommandLine = newCommandLineArgs;", "+\twhile (++index < argCount) {", "+", "+\t\tif (customEncoding != null) {", "+\t\t\tthrow new InvalidInputException(", "+\t\t\t\tthis.bind(\"configure.unexpectedCustomEncoding\", currentArg, customEncoding)); //$NON-NLS-1$", "+\t\t}", "+", "+\t\tcurrentArg = newCommandLineArgs[index];", "+", "+\t\tswitch(mode) {", "+\t\t\tcase DEFAULT :", "+\t\t\t\tif (currentArg.startsWith(\"[\")) { //$NON-NLS-1$", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tthis.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\tcurrentArg));", "+\t\t\t\t}", "+", "+\t\t\t\tif (currentArg.endsWith(\"]\")) { //$NON-NLS-1$", "+\t\t\t\t\t// look for encoding specification", "+\t\t\t\t\tint encodingStart = currentArg.indexOf('[') + 1;", "+\t\t\t\t\tif (encodingStart <= 1) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\t\tthis.bind(\"configure.unexpectedBracket\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tint encodingEnd = currentArg.length() - 1;", "+\t\t\t\t\tif (encodingStart >= 1) {", "+\t\t\t\t\t\tif (encodingStart < encodingEnd) {", "+\t\t\t\t\t\t\tcustomEncoding = currentArg.substring(encodingStart, encodingEnd);", "+\t\t\t\t\t\t\ttry { // ensure encoding is supported", "+\t\t\t\t\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), customEncoding);", "+\t\t\t\t\t\t\t} catch (UnsupportedEncodingException e) {", "+\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\t\t\tthis.bind(\"configure.unsupportedEncoding\", customEncoding)); //$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcurrentArg = currentArg.substring(0, encodingStart - 1);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\tif (currentArg.endsWith(SuffixConstants.SUFFIX_STRING_java)) {", "+\t\t\t\t\tif (this.filenames == null) {", "+\t\t\t\t\t\tthis.filenames = new String[argCount - index];", "+\t\t\t\t\t\tthis.encodings = new String[argCount - index];", "+\t\t\t\t\t\tthis.destinationPaths = new String[argCount - index];", "+\t\t\t\t\t} else if (filesCount == this.filenames.length) {", "+\t\t\t\t\t\tint length = this.filenames.length;", "+\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\tthis.filenames,", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t(this.filenames = new String[length + argCount - index]),", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\tlength);", "+\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\tthis.encodings,", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t(this.encodings = new String[length + argCount - index]),", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\tlength);", "+\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\tthis.destinationPaths,", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t(this.destinationPaths = new String[length + argCount - index]),", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\tlength);", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.filenames[filesCount] = currentArg;", "+\t\t\t\t\tthis.encodings[filesCount++] = customEncoding;", "+\t\t\t\t\t// destination path cannot be specified upon an individual file", "+\t\t\t\t\tcustomEncoding = null;", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-log\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (this.log != null)", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateLog\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_LOG;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-repeat\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (this.maxRepetition > 0)", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateRepeat\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_REPETITION;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-maxProblems\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (this.maxProblems > 0)", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateMaxProblems\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_MAX_PROBLEMS;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-source\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_SOURCE;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-encoding\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_DEFAULT_ENCODING;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-1.3\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg));//$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tdidSpecifyCompliance = true;", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-1.4\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tdidSpecifyCompliance = true;", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-1.5\") || currentArg.equals(\"-5\") || currentArg.equals(\"-5.0\")) { //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tdidSpecifyCompliance = true;", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-1.6\") || currentArg.equals(\"-6\") || currentArg.equals(\"-6.0\")) { //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tdidSpecifyCompliance = true;", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-1.7\") || currentArg.equals(\"-7\") || currentArg.equals(\"-7.0\")) { //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tdidSpecifyCompliance = true;", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_7);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-d\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (this.destinationPath != null) {", "+\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "+\t\t\t\t\t\terrorMessage.append(currentArg);", "+\t\t\t\t\t\tif ((index + 1) < argCount) {", "+\t\t\t\t\t\t\terrorMessage.append(' ');", "+\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateOutputPath\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tmode = INSIDE_DESTINATION_PATH;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-classpath\") //$NON-NLS-1$", "+\t\t\t\t\t|| currentArg.equals(\"-cp\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_CLASSPATH_start;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-bootclasspath\")) {//$NON-NLS-1$", "+\t\t\t\t\tif (bootclasspaths.size() > 0) {", "+\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "+\t\t\t\t\t\terrorMessage.append(currentArg);", "+\t\t\t\t\t\tif ((index + 1) < argCount) {", "+\t\t\t\t\t\t\terrorMessage.append(' ');", "+\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateBootClasspath\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tmode = INSIDE_BOOTCLASSPATH_start;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-sourcepath\")) {//$NON-NLS-1$", "+\t\t\t\t\tif (sourcepathClasspathArg != null) {", "+\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "+\t\t\t\t\t\terrorMessage.append(currentArg);", "+\t\t\t\t\t\tif ((index + 1) < argCount) {", "+\t\t\t\t\t\t\terrorMessage.append(' ');", "+\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateSourcepath\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tmode = INSIDE_SOURCE_PATH_start;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-extdirs\")) {//$NON-NLS-1$", "+\t\t\t\t\tif (extdirsClasspaths != null) {", "+\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "+\t\t\t\t\t\terrorMessage.append(currentArg);", "+\t\t\t\t\t\tif ((index + 1) < argCount) {", "+\t\t\t\t\t\t\terrorMessage.append(' ');", "+\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateExtDirs\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tmode = INSIDE_EXT_DIRS;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-endorseddirs\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (endorsedDirClasspaths != null) {", "+\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "+\t\t\t\t\t\terrorMessage.append(currentArg);", "+\t\t\t\t\t\tif ((index + 1) < argCount) {", "+\t\t\t\t\t\t\terrorMessage.append(' ');", "+\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateEndorsedDirs\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tmode = INSIDE_ENDORSED_DIRS;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-progress\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tthis.showProgress = true;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-proceedOnError\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tthis.proceedOnError = true;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-time\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tthis.timing = TIMING_ENABLED;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-time:detail\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tthis.timing = TIMING_ENABLED|TIMING_DETAILED;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-version\") //$NON-NLS-1$", "+\t\t\t\t\t\t|| currentArg.equals(\"-v\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.logger.logVersion(true);", "+\t\t\t\t\tthis.proceed = false;", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-showversion\")) { //$NON-NLS-1$", "+\t\t\t\t\tprintVersionRequired = true;", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (\"-deprecation\".equals(currentArg)) { //$NON-NLS-1$", "+\t\t\t\t\tdidSpecifyDeprecation = true;", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-help\") || currentArg.equals(\"-?\")) { //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\tprintUsageRequired = true;", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-help:warn\") || //$NON-NLS-1$", "+\t\t\t\t\t\tcurrentArg.equals(\"-?:warn\")) { //$NON-NLS-1$", "+\t\t\t\t\tprintUsageRequired = true;", "+\t\t\t\t\tusageSection = \"misc.usage.warn\"; //$NON-NLS-1$", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-noExit\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.systemExitWhenFinished = false;", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-verbose\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.verbose = true;", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-referenceInfo\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.produceRefInfo = true;", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-inlineJSR\")) { //$NON-NLS-1$", "+\t\t\t\t    mode = DEFAULT;", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_InlineJsr,", "+\t\t\t\t\t\t\tCompilerOptions.ENABLED);", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.startsWith(\"-g\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tString debugOption = currentArg;", "+\t\t\t\t\tint length = currentArg.length();", "+\t\t\t\t\tif (length == 2) {", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_LocalVariableAttribute,", "+\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_LineNumberAttribute,", "+\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_SourceFileAttribute,", "+\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (length > 3) {", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_LocalVariableAttribute,", "+\t\t\t\t\t\t\tCompilerOptions.DO_NOT_GENERATE);", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_LineNumberAttribute,", "+\t\t\t\t\t\t\tCompilerOptions.DO_NOT_GENERATE);", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_SourceFileAttribute,", "+\t\t\t\t\t\t\tCompilerOptions.DO_NOT_GENERATE);", "+\t\t\t\t\t\tif (length == 7 && debugOption.equals(\"-g:\" + NONE)) //$NON-NLS-1$", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tStringTokenizer tokenizer =", "+\t\t\t\t\t\t\tnew StringTokenizer(debugOption.substring(3, debugOption.length()), \",\"); //$NON-NLS-1$", "+\t\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\t\t\tString token = tokenizer.nextToken();", "+\t\t\t\t\t\t\tif (token.equals(\"vars\")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\t\t\tCompilerOptions.OPTION_LocalVariableAttribute,", "+\t\t\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "+\t\t\t\t\t\t\t} else if (token.equals(\"lines\")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\t\t\tCompilerOptions.OPTION_LineNumberAttribute,", "+\t\t\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "+\t\t\t\t\t\t\t} else if (token.equals(\"source\")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\t\t\tCompilerOptions.OPTION_SourceFileAttribute,", "+\t\t\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\t\t\tthis.bind(\"configure.invalidDebugOption\", debugOption)); //$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tthis.bind(\"configure.invalidDebugOption\", debugOption)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.startsWith(\"-nowarn\")) { //$NON-NLS-1$", "+\t\t\t\t\tdisableWarnings();", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.startsWith(\"-warn\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tString warningOption = currentArg;", "+\t\t\t\t\tint length = currentArg.length();", "+\t\t\t\t\tif (length == 10 && warningOption.equals(\"-warn:\" + NONE)) { //$NON-NLS-1$", "+\t\t\t\t\t\tdisableWarnings();", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (length <= 6) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.invalidWarningConfiguration\", warningOption)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tint warnTokenStart;", "+\t\t\t\t\tboolean isEnabling, allowPlusOrMinus;", "+\t\t\t\t\tswitch (warningOption.charAt(6)) {", "+\t\t\t\t\t\tcase '+' :", "+\t\t\t\t\t\t\twarnTokenStart = 7;", "+\t\t\t\t\t\t\tisEnabling = true;", "+\t\t\t\t\t\t\tallowPlusOrMinus = true;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase '-' :", "+\t\t\t\t\t\t\twarnTokenStart = 7;", "+\t\t\t\t\t\t\tisEnabling = false; // mentionned warnings are disabled", "+\t\t\t\t\t\t\tallowPlusOrMinus = true;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tdisableWarnings();", "+\t\t\t\t\t\t\twarnTokenStart = 6;", "+\t\t\t\t\t\t\tisEnabling = true;", "+\t\t\t\t\t\t\tallowPlusOrMinus = false;", "+\t\t\t\t\t}", "+", "+\t\t\t\t\tStringTokenizer tokenizer =", "+\t\t\t\t\t\tnew StringTokenizer(warningOption.substring(warnTokenStart, warningOption.length()), \",\"); //$NON-NLS-1$", "+\t\t\t\t\tint tokenCounter = 0;", "+", "+\t\t\t\t\tif (didSpecifyDeprecation) {  // deprecation could have also been set through -deprecation option", "+\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);", "+\t\t\t\t\t}", "+", "+\t\t\t\t\tnextToken: while (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\t\tString token = tokenizer.nextToken();", "+\t\t\t\t\t\ttokenCounter++;", "+\t\t\t\t\t\tswitch(token.charAt(0)) {", "+\t\t\t\t\t\t\tcase '+' :", "+\t\t\t\t\t\t\t\tif (allowPlusOrMinus) {", "+\t\t\t\t\t\t\t\t\tisEnabling = true;", "+\t\t\t\t\t\t\t\t\ttoken = token.substring(1);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\ttokenCounter = 0;", "+\t\t\t\t\t\t\t\t\tbreak nextToken;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase '-' :", "+\t\t\t\t\t\t\t\tif (allowPlusOrMinus) {", "+\t\t\t\t\t\t\t\t\tisEnabling = false;", "+\t\t\t\t\t\t\t\t\ttoken = token.substring(1);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\ttokenCounter = 0;", "+\t\t\t\t\t\t\t\t\tbreak nextToken;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\thandleWarningToken(token, isEnabling);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (tokenCounter == 0) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.invalidWarningOption\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-target\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_TARGET;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-preserveAllLocals\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_PreserveUnusedLocal,", "+\t\t\t\t\t\tCompilerOptions.PRESERVE);", "+\t\t\t\t    mode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-enableJavadoc\")) {//$NON-NLS-1$", "+\t\t\t\t    mode = DEFAULT;", "+\t\t\t\t\tthis.enableJavadocOn = true;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-Xemacs\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tthis.logger.setEmacs();", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\t// annotation processing", "+\t\t\t\tif (currentArg.startsWith(\"-A\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-processorpath\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_PROCESSOR_PATH_start;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-processor\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_PROCESSOR_start;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-proc:only\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_GenerateClassFiles,", "+\t\t\t\t\t\tCompilerOptions.DISABLED);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-proc:none\")) { //$NON-NLS-1$", "+\t\t\t\t\tdidSpecifyDisabledAnnotationProcessing = true;", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_Process_Annotations,", "+\t\t\t\t\t\tCompilerOptions.DISABLED);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-s\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_S_start;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-XprintProcessorInfo\") //$NON-NLS-1$", "+\t\t\t\t\t\t|| currentArg.equals(\"-XprintRounds\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\t// tolerated javac options - quietly filtered out", "+\t\t\t\tif (currentArg.startsWith(\"-X\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.startsWith(\"-J\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-O\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-classNames\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_CLASS_NAMES;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase INSIDE_TARGET :", "+\t\t\t\tif (this.didSpecifyTarget) {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tthis.bind(\"configure.duplicateTarget\", currentArg));//$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tthis.didSpecifyTarget = true;", "+\t\t\t\tif (currentArg.equals(\"1.1\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);", "+\t\t\t\t} else if (currentArg.equals(\"1.2\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "+\t\t\t\t} else if (currentArg.equals(\"1.3\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_3);", "+\t\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\t\t\t} else if (currentArg.equals(\"1.5\") || currentArg.equals(\"5\") || currentArg.equals(\"5.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "+\t\t\t\t} else if (currentArg.equals(\"1.6\") || currentArg.equals(\"6\") || currentArg.equals(\"6.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "+\t\t\t\t} else if (currentArg.equals(\"1.7\") || currentArg.equals(\"7\") || currentArg.equals(\"7.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_7);", "+\t\t\t\t} else if (currentArg.equals(\"jsr14\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_JSR14);", "+\t\t\t\t} else if (currentArg.equals(\"cldc1.1\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_CLDC1_1);", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_InlineJsr, CompilerOptions.ENABLED);", "+\t\t\t\t}else {", "+\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.targetJDK\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_LOG :", "+\t\t\t\tthis.log = currentArg;", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_REPETITION :", "+\t\t\t\ttry {", "+\t\t\t\t\tthis.maxRepetition = Integer.parseInt(currentArg);", "+\t\t\t\t\tif (this.maxRepetition <= 0) {", "+\t\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.repetition\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.repetition\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_MAX_PROBLEMS :", "+\t\t\t\ttry {", "+\t\t\t\t\tthis.maxProblems = Integer.parseInt(currentArg);", "+\t\t\t\t\tif (this.maxProblems <= 0) {", "+\t\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.maxProblems\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_MaxProblemPerUnit, currentArg);", "+\t\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.maxProblems\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_SOURCE :", "+\t\t\t\tif (this.didSpecifySource) {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tthis.bind(\"configure.duplicateSource\", currentArg));//$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tthis.didSpecifySource = true;", "+\t\t\t\tif (currentArg.equals(\"1.3\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);", "+\t\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);", "+\t\t\t\t} else if (currentArg.equals(\"1.5\") || currentArg.equals(\"5\") || currentArg.equals(\"5.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_5);", "+\t\t\t\t} else if (currentArg.equals(\"1.6\") || currentArg.equals(\"6\") || currentArg.equals(\"6.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_6);", "+\t\t\t\t} else if (currentArg.equals(\"1.7\") || currentArg.equals(\"7\") || currentArg.equals(\"7.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_7);", "+\t\t\t\t} else {", "+\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.source\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_DEFAULT_ENCODING :", "+\t\t\t\tif (didSpecifyDefaultEncoding) {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tthis.bind(\"configure.duplicateDefaultEncoding\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\ttry { // ensure encoding is supported", "+\t\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), currentArg);", "+\t\t\t\t} catch (UnsupportedEncodingException e) {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tthis.bind(\"configure.unsupportedEncoding\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tthis.options.put(CompilerOptions.OPTION_Encoding, currentArg);", "+\t\t\t\tdidSpecifyDefaultEncoding = true;", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_DESTINATION_PATH :", "+\t\t\t\tthis.setDestinationPath(currentArg.equals(NONE) ? NONE : currentArg);", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_CLASSPATH_start:", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tindex += processPaths(newCommandLineArgs, index, currentArg, classpaths);", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_BOOTCLASSPATH_start:", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tindex += processPaths(newCommandLineArgs, index, currentArg, bootclasspaths);", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_SOURCE_PATH_start:", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tString[] sourcePaths = new String[1];", "+\t\t\t\tindex += processPaths(newCommandLineArgs, index, currentArg, sourcePaths);", "+\t\t\t\tsourcepathClasspathArg = sourcePaths[0];", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_EXT_DIRS:", "+\t\t\t\tif (currentArg.indexOf(\"[-d\") != -1) { //$NON-NLS-1$", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tthis.bind(\"configure.unexpectedDestinationPathEntry\", //$NON-NLS-1$", "+\t\t\t\t\t\t\t\"-extdir\")); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(currentArg,\tFile.pathSeparator, false);", "+\t\t\t\textdirsClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\t\t\t\twhile (tokenizer.hasMoreTokens())", "+\t\t\t\t\textdirsClasspaths.add(tokenizer.nextToken());", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_ENDORSED_DIRS:", "+\t\t\t\tif (currentArg.indexOf(\"[-d\") != -1) { //$NON-NLS-1$", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tthis.bind(\"configure.unexpectedDestinationPathEntry\", //$NON-NLS-1$", "+\t\t\t\t\t\t\t\"-endorseddirs\")); //$NON-NLS-1$", "+\t\t\t\t}\t\t\t\ttokenizer = new StringTokenizer(currentArg,\tFile.pathSeparator, false);", "+\t\t\t\tendorsedDirClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\t\t\t\twhile (tokenizer.hasMoreTokens())", "+\t\t\t\t\tendorsedDirClasspaths.add(tokenizer.nextToken());", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_SOURCE_DIRECTORY_DESTINATION_PATH:", "+\t\t\t\tif (currentArg.endsWith(\"]\")) { //$NON-NLS-1$", "+\t\t\t\t\tcustomDestinationPath = currentArg.substring(0,", "+\t\t\t\t\t\tcurrentArg.length() - 1);", "+\t\t\t\t} else {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tthis.bind(\"configure.incorrectDestinationPathEntry\", //$NON-NLS-1$", "+\t\t\t\t\t\t\t\"[-d \" + currentArg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase INSIDE_PROCESSOR_PATH_start :", "+\t\t\t\t// nothing to do here. This is consumed again by the AnnotationProcessorManager", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_PROCESSOR_start :", "+\t\t\t\t// nothing to do here. This is consumed again by the AnnotationProcessorManager", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_S_start :", "+\t\t\t\t// nothing to do here. This is consumed again by the AnnotationProcessorManager", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_CLASS_NAMES :", "+\t\t\t\ttokenizer = new StringTokenizer(currentArg, \",\"); //$NON-NLS-1$", "+\t\t\t\tif (this.classNames == null) {", "+\t\t\t\t\tthis.classNames = new String[DEFAULT_SIZE_CLASSPATH];", "+\t\t\t\t}", "+\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\tif (this.classNames.length == classCount) {", "+\t\t\t\t\t\t// resize", "+\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\tthis.classNames,", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t(this.classNames = new String[classCount * 2]),", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\tclassCount);", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.classNames[classCount++] = tokenizer.nextToken();", "+\t\t\t\t}", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t}", "+", "+\t\t// default is input directory, if no custom destination path exists", "+\t\tif (customDestinationPath == null) {", "+\t\t\tif (File.separatorChar != '/') {", "+\t\t\t\tcurrentArg = currentArg.replace('/', File.separatorChar);", "+\t\t\t}", "+\t\t\tif (currentArg.endsWith(\"[-d\")) { //$NON-NLS-1$", "+\t\t\t\tcurrentSourceDirectory = currentArg.substring(0,", "+\t\t\t\t\tcurrentArg.length() - 3);", "+\t\t\t\tmode = INSIDE_SOURCE_DIRECTORY_DESTINATION_PATH;", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\tcurrentSourceDirectory = currentArg;", "+\t\t}", "+\t\tFile dir = new File(currentSourceDirectory);", "+\t\tif (!dir.isDirectory()) {", "+\t\t\tthrow new InvalidInputException(", "+\t\t\t\tthis.bind(\"configure.unrecognizedOption\", currentSourceDirectory)); //$NON-NLS-1$", "+\t\t}", "+\t\tString[] result = FileFinder.find(dir, SuffixConstants.SUFFIX_STRING_JAVA);", "+\t\tif (NONE.equals(customDestinationPath)) {", "+\t\t\tcustomDestinationPath = NONE; // ensure == comparison", "+\t\t}", "+\t\tif (this.filenames != null) {", "+\t\t\t// some source files were specified explicitly", "+\t\t\tint length = result.length;", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tthis.filenames,", "+\t\t\t\t0,", "+\t\t\t\t(this.filenames = new String[length + filesCount]),", "+\t\t\t\t0,", "+\t\t\t\tfilesCount);", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tthis.encodings,", "+\t\t\t\t0,", "+\t\t\t\t(this.encodings = new String[length + filesCount]),", "+\t\t\t\t0,", "+\t\t\t\tfilesCount);", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tthis.destinationPaths,", "+\t\t\t\t0,", "+\t\t\t\t(this.destinationPaths = new String[length + filesCount]),", "+\t\t\t\t0,", "+\t\t\t\tfilesCount);", "+\t\t\tSystem.arraycopy(result, 0, this.filenames, filesCount, length);", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tthis.encodings[filesCount + i] = customEncoding;", "+\t\t\t\tthis.destinationPaths[filesCount + i] = customDestinationPath;", "+\t\t\t}", "+\t\t\tfilesCount += length;", "+\t\t\tcustomEncoding = null;", "+\t\t\tcustomDestinationPath = null;", "+\t\t\tcurrentSourceDirectory = null;", "+\t\t} else {", "+\t\t\tthis.filenames = result;", "+\t\t\tfilesCount = this.filenames.length;", "+\t\t\tthis.encodings = new String[filesCount];", "+\t\t\tthis.destinationPaths = new String[filesCount];", "+\t\t\tfor (int i = 0; i < filesCount; i++) {", "+\t\t\t\tthis.encodings[i] = customEncoding;", "+\t\t\t\tthis.destinationPaths[i] = customDestinationPath;", "+\t\t\t}", "+\t\t\tcustomEncoding = null;", "+\t\t\tcustomDestinationPath = null;", "+\t\t\tcurrentSourceDirectory = null;", "+\t\t}", "+\t\tmode = DEFAULT;", "+\t\tcontinue;", "+\t}", "+\t", "+\t// set DocCommentSupport, with appropriate side effects on defaults if ", "+\t// javadoc is not enabled", "+\tif (this.enableJavadocOn) {", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_DocCommentSupport,", "+\t\t\tCompilerOptions.ENABLED);", "+\t} else if (this.warnJavadocOn || this.warnAllJavadocOn) {", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_DocCommentSupport,", "+\t\t\tCompilerOptions.ENABLED);", "+\t\t// override defaults: references that are embedded in javadoc are ignored", "+\t\t// from the perspective of parameters and thrown exceptions usage", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportUnusedParameterIncludeDocCommentReference,", "+\t\t\tCompilerOptions.DISABLED);", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionIncludeDocCommentReference,", "+\t\t\tCompilerOptions.DISABLED);", "+\t}", "+\t// configure warnings for javadoc contents", "+\tif (this.warnJavadocOn) {", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportInvalidJavadoc,", "+\t\t\tCompilerOptions.WARNING);", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTags,", "+\t\t\tCompilerOptions.ENABLED);", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsDeprecatedRef,", "+\t\t\tCompilerOptions.ENABLED);", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsNotVisibleRef,", "+\t\t\tCompilerOptions.ENABLED);", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTags,", "+\t\t\tCompilerOptions.WARNING);", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTagsVisibility,", "+\t\t\tCompilerOptions.PRIVATE);", "+\t}", "+\tif (this.warnAllJavadocOn) {", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportMissingJavadocComments,", "+\t\t\tCompilerOptions.WARNING);", "+\t}", "+", "+\tif (printUsageRequired || (filesCount == 0 && classCount == 0)) {", "+\t\tif (usageSection ==  null) {", "+\t\t\tprintUsage(); // default", "+\t\t} else {", "+\t\t\tprintUsage(usageSection);", "+\t\t}", "+\t\tthis.proceed = false;", "+\t\treturn;", "+\t}", "+", "+\tif (this.log != null) {", "+\t\tthis.logger.setLog(this.log);", "+\t} else {", "+\t\tthis.showProgress = false;", "+\t}", "+\tthis.logger.logVersion(printVersionRequired);", "+", "+\tvalidateOptions(didSpecifyCompliance);", "+\t", "+\t// Enable annotation processing by default in batch mode when compliance is at least 1.6", "+\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=185768", "+\tif (!didSpecifyDisabledAnnotationProcessing", "+\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) >= ClassFileConstants.JDK1_6) {", "+\t\tthis.options.put(CompilerOptions.OPTION_Process_Annotations, CompilerOptions.ENABLED);", "+\t}", "+", "+\tthis.logger.logCommandLineArguments(newCommandLineArgs);", "+\tthis.logger.logOptions(this.options);", "+", "+\tif (this.maxRepetition == 0) {", "+\t\tthis.maxRepetition = 1;", "+\t}", "+\tif (this.maxRepetition >= 3 && (this.timing & TIMING_ENABLED) != 0) {", "+\t\tthis.compilerStats = new CompilerStats[this.maxRepetition];", "+\t}", "+", "+\tif (filesCount != 0) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.filenames,", "+\t\t\t0,", "+\t\t\t(this.filenames = new String[filesCount]),", "+\t\t\t0,", "+\t\t\tfilesCount);", "+\t}", "+", "+\tif (classCount != 0) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.classNames,", "+\t\t\t0,", "+\t\t\t(this.classNames = new String[classCount]),", "+\t\t\t0,", "+\t\t\tclassCount);", "+\t}", "+\t", "+\tsetPaths(bootclasspaths,", "+\t\t\tsourcepathClasspathArg,", "+\t\t\tsourcepathClasspaths,", "+\t\t\tclasspaths,", "+\t\t\textdirsClasspaths,", "+\t\t\tendorsedDirClasspaths,", "+\t\t\tcustomEncoding);", "+\t", "+\tif (this.pendingErrors != null) {", "+\t\tfor (Iterator iterator = this.pendingErrors.iterator(); iterator.hasNext(); ) {", "+\t\t\tString message = (String) iterator.next();", "+\t\t\tthis.logger.logPendingError(message);", "+\t\t}", "+\t\tthis.pendingErrors = null;", "+\t}", "+}", "- */", "-public void configure(String[] argv) throws InvalidInputException {", "-", "-\tif ((argv == null) || (argv.length == 0)) {", "-\t\tprintUsage();", "-\t\treturn;", "-\t}", "-", "-\tfinal int INSIDE_CLASSPATH_start = 1;", "-\tfinal int INSIDE_DESTINATION_PATH = 3;", "-\tfinal int INSIDE_TARGET = 4;", "-\tfinal int INSIDE_LOG = 5;", "-\tfinal int INSIDE_REPETITION = 6;", "-\tfinal int INSIDE_SOURCE = 7;", "-\tfinal int INSIDE_DEFAULT_ENCODING = 8;", "-\tfinal int INSIDE_BOOTCLASSPATH_start = 9;", "-\tfinal int INSIDE_MAX_PROBLEMS = 11;", "-\tfinal int INSIDE_EXT_DIRS = 12;", "-\tfinal int INSIDE_SOURCE_PATH_start = 13;", "-\tfinal int INSIDE_ENDORSED_DIRS = 15;", "-\tfinal int INSIDE_SOURCE_DIRECTORY_DESTINATION_PATH = 16;", "-\tfinal int INSIDE_PROCESSOR_PATH_start = 17;", "-\tfinal int INSIDE_PROCESSOR_start = 18;", "-\tfinal int INSIDE_S_start = 19;", "-\tfinal int INSIDE_CLASS_NAMES = 20;", "-", "-\tfinal int DEFAULT = 0;", "-\tArrayList bootclasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\tString sourcepathClasspathArg = null;", "-\tArrayList sourcepathClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\tArrayList classpaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\tArrayList extdirsClasspaths = null;", "-\tArrayList endorsedDirClasspaths = null;", "-", "-\tint index = -1;", "-\tint filesCount = 0;", "-\tint classCount = 0;", "-\tint argCount = argv.length;", "-\tint mode = DEFAULT;", "-\tthis.repetitions = 0;", "-\tboolean printUsageRequired = false;", "-\tString usageSection = null;", "-\tboolean printVersionRequired = false;", "-", "-\tboolean didSpecifyDefaultEncoding = false;", "-\tboolean didSpecifyDeprecation = false;", "-\tboolean didSpecifyCompliance = false;", "-\tboolean didSpecifyDisabledAnnotationProcessing = false;", "-", "-\tString customEncoding = null;", "-\tString customDestinationPath = null;", "-\tString currentSourceDirectory = null;", "-\tString currentArg = Util.EMPTY_STRING;", "-", "-\t// expand the command line if necessary", "-\tboolean needExpansion = false;", "-\tloop: for (int i = 0; i < argCount; i++) {", "-\t\t\tif (argv[i].startsWith(\"@\")) { //$NON-NLS-1$", "-\t\t\t\tneedExpansion = true;", "-\t\t\t\tbreak loop;", "-\t\t\t}", "-\t}", "-", "-\tString[] newCommandLineArgs = null;", "-\tif (needExpansion) {", "-\t\tnewCommandLineArgs = new String[argCount];", "-\t\tindex = 0;", "-\t\tfor (int i = 0; i < argCount; i++) {", "-\t\t\tString[] newArgs = null;", "-\t\t\tString arg = argv[i].trim();", "-\t\t\tif (arg.startsWith(\"@\")) { //$NON-NLS-1$", "-\t\t\t\ttry {", "-\t\t\t\t\tLineNumberReader reader = new LineNumberReader(new StringReader(new String(Util.getFileCharContent(new File(arg.substring(1)), null))));", "-\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\tString line;", "-\t\t\t\t\twhile((line = reader.readLine()) != null) {", "-\t\t\t\t\t\tline = line.trim();", "-\t\t\t\t\t\tif (!line.startsWith(\"#\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tbuffer.append(line).append(\" \"); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tnewArgs = tokenize(buffer.toString());", "-\t\t\t\t} catch(IOException e) {", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tthis.bind(\"configure.invalidexpansionargumentname\", arg)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (newArgs != null) {", "-\t\t\t\tint newCommandLineArgsLength = newCommandLineArgs.length;", "-\t\t\t\tint newArgsLength = newArgs.length;", "-\t\t\t\tSystem.arraycopy(newCommandLineArgs, 0, (newCommandLineArgs = new String[newCommandLineArgsLength + newArgsLength - 1]), 0, index);", "-\t\t\t\tSystem.arraycopy(newArgs, 0, newCommandLineArgs, index, newArgsLength);", "-\t\t\t\tindex += newArgsLength;", "-\t\t\t} else {", "-\t\t\t\tnewCommandLineArgs[index++] = arg;", "-\t\t\t}", "-\t\t}", "-\t\tindex = -1;", "-\t} else {", "-\t\tnewCommandLineArgs = argv;", "-\t\tfor (int i = 0; i < argCount; i++) {", "-\t\t\tnewCommandLineArgs[i] = newCommandLineArgs[i].trim();", "-\t\t}", "-\t}", "-\targCount = newCommandLineArgs.length;", "-\tthis.expandedCommandLine = newCommandLineArgs;", "-\twhile (++index < argCount) {", "-", "-\t\tif (customEncoding != null) {", "-\t\t\tthrow new InvalidInputException(", "-\t\t\t\tthis.bind(\"configure.unexpectedCustomEncoding\", currentArg, customEncoding)); //$NON-NLS-1$", "-\t\t}", "-", "-\t\tcurrentArg = newCommandLineArgs[index];", "-", "-\t\tswitch(mode) {", "-\t\t\tcase DEFAULT :", "-\t\t\t\tif (currentArg.startsWith(\"[\")) { //$NON-NLS-1$", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tthis.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\tcurrentArg));", "-\t\t\t\t}", "-", "-\t\t\t\tif (currentArg.endsWith(\"]\")) { //$NON-NLS-1$", "-\t\t\t\t\t// look for encoding specification", "-\t\t\t\t\tint encodingStart = currentArg.indexOf('[') + 1;", "-\t\t\t\t\tif (encodingStart <= 1) {", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\t\tthis.bind(\"configure.unexpectedBracket\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tint encodingEnd = currentArg.length() - 1;", "-\t\t\t\t\tif (encodingStart >= 1) {", "-\t\t\t\t\t\tif (encodingStart < encodingEnd) {", "-\t\t\t\t\t\t\tcustomEncoding = currentArg.substring(encodingStart, encodingEnd);", "-\t\t\t\t\t\t\ttry { // ensure encoding is supported", "-\t\t\t\t\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), customEncoding);", "-\t\t\t\t\t\t\t} catch (UnsupportedEncodingException e) {", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\t\t\tthis.bind(\"configure.unsupportedEncoding\", customEncoding)); //$NON-NLS-1$", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcurrentArg = currentArg.substring(0, encodingStart - 1);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-", "-\t\t\t\tif (currentArg.endsWith(SuffixConstants.SUFFIX_STRING_java)) {", "-\t\t\t\t\tif (this.filenames == null) {", "-\t\t\t\t\t\tthis.filenames = new String[argCount - index];", "-\t\t\t\t\t\tthis.encodings = new String[argCount - index];", "-\t\t\t\t\t\tthis.destinationPaths = new String[argCount - index];", "-\t\t\t\t\t} else if (filesCount == this.filenames.length) {", "-\t\t\t\t\t\tint length = this.filenames.length;", "-\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\tthis.filenames,", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t(this.filenames = new String[length + argCount - index]),", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\tlength);", "-\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\tthis.encodings,", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t(this.encodings = new String[length + argCount - index]),", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\tlength);", "-\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\tthis.destinationPaths,", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t(this.destinationPaths = new String[length + argCount - index]),", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\tlength);", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.filenames[filesCount] = currentArg;", "-\t\t\t\t\tthis.encodings[filesCount++] = customEncoding;", "-\t\t\t\t\t// destination path cannot be specified upon an individual file", "-\t\t\t\t\tcustomEncoding = null;", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-log\")) { //$NON-NLS-1$", "-\t\t\t\t\tif (this.log != null)", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateLog\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_LOG;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-repeat\")) { //$NON-NLS-1$", "-\t\t\t\t\tif (this.repetitions > 0)", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateRepeat\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_REPETITION;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-maxProblems\")) { //$NON-NLS-1$", "-\t\t\t\t\tif (this.maxProblems > 0)", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateMaxProblems\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_MAX_PROBLEMS;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-source\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_SOURCE;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-encoding\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_DEFAULT_ENCODING;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-1.3\")) { //$NON-NLS-1$", "-\t\t\t\t\tif (didSpecifyCompliance) {", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg));//$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tdidSpecifyCompliance = true;", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-1.4\")) { //$NON-NLS-1$", "-\t\t\t\t\tif (didSpecifyCompliance) {", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tdidSpecifyCompliance = true;", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-1.5\") || currentArg.equals(\"-5\") || currentArg.equals(\"-5.0\")) { //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\t\t\t\tif (didSpecifyCompliance) {", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tdidSpecifyCompliance = true;", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-1.6\") || currentArg.equals(\"-6\") || currentArg.equals(\"-6.0\")) { //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\t\t\t\tif (didSpecifyCompliance) {", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tdidSpecifyCompliance = true;", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-1.7\") || currentArg.equals(\"-7\") || currentArg.equals(\"-7.0\")) { //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\t\t\t\tif (didSpecifyCompliance) {", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tdidSpecifyCompliance = true;", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_7);", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-d\")) { //$NON-NLS-1$", "-\t\t\t\t\tif (this.destinationPath != null) {", "-\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "-\t\t\t\t\t\terrorMessage.append(currentArg);", "-\t\t\t\t\t\tif ((index + 1) < argCount) {", "-\t\t\t\t\t\t\terrorMessage.append(' ');", "-\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateOutputPath\", errorMessage.toString())); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tmode = INSIDE_DESTINATION_PATH;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-classpath\") //$NON-NLS-1$", "-\t\t\t\t\t|| currentArg.equals(\"-cp\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_CLASSPATH_start;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-bootclasspath\")) {//$NON-NLS-1$", "-\t\t\t\t\tif (bootclasspaths.size() > 0) {", "-\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "-\t\t\t\t\t\terrorMessage.append(currentArg);", "-\t\t\t\t\t\tif ((index + 1) < argCount) {", "-\t\t\t\t\t\t\terrorMessage.append(' ');", "-\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateBootClasspath\", errorMessage.toString())); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tmode = INSIDE_BOOTCLASSPATH_start;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-sourcepath\")) {//$NON-NLS-1$", "-\t\t\t\t\tif (sourcepathClasspathArg != null) {", "-\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "-\t\t\t\t\t\terrorMessage.append(currentArg);", "-\t\t\t\t\t\tif ((index + 1) < argCount) {", "-\t\t\t\t\t\t\terrorMessage.append(' ');", "-\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateSourcepath\", errorMessage.toString())); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tmode = INSIDE_SOURCE_PATH_start;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-extdirs\")) {//$NON-NLS-1$", "-\t\t\t\t\tif (extdirsClasspaths != null) {", "-\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "-\t\t\t\t\t\terrorMessage.append(currentArg);", "-\t\t\t\t\t\tif ((index + 1) < argCount) {", "-\t\t\t\t\t\t\terrorMessage.append(' ');", "-\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateExtDirs\", errorMessage.toString())); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tmode = INSIDE_EXT_DIRS;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-endorseddirs\")) { //$NON-NLS-1$", "-\t\t\t\t\tif (endorsedDirClasspaths != null) {", "-\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "-\t\t\t\t\t\terrorMessage.append(currentArg);", "-\t\t\t\t\t\tif ((index + 1) < argCount) {", "-\t\t\t\t\t\t\terrorMessage.append(' ');", "-\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateEndorsedDirs\", errorMessage.toString())); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tmode = INSIDE_ENDORSED_DIRS;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-progress\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tthis.showProgress = true;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-proceedOnError\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tthis.proceedOnError = true;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-time\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tthis.timing = true;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-version\") //$NON-NLS-1$", "-\t\t\t\t\t\t|| currentArg.equals(\"-v\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.logger.logVersion(true);", "-\t\t\t\t\tthis.proceed = false;", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-showversion\")) { //$NON-NLS-1$", "-\t\t\t\t\tprintVersionRequired = true;", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (\"-deprecation\".equals(currentArg)) { //$NON-NLS-1$", "-\t\t\t\t\tdidSpecifyDeprecation = true;", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-help\") || currentArg.equals(\"-?\")) { //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\tprintUsageRequired = true;", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-help:warn\") || //$NON-NLS-1$", "-\t\t\t\t\t\tcurrentArg.equals(\"-?:warn\")) { //$NON-NLS-1$", "-\t\t\t\t\tprintUsageRequired = true;", "-\t\t\t\t\tusageSection = \"misc.usage.warn\"; //$NON-NLS-1$", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-noExit\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.systemExitWhenFinished = false;", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-verbose\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.verbose = true;", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-referenceInfo\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.produceRefInfo = true;", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-inlineJSR\")) { //$NON-NLS-1$", "-\t\t\t\t    mode = DEFAULT;", "-\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_InlineJsr,", "-\t\t\t\t\t\t\tCompilerOptions.ENABLED);", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.startsWith(\"-g\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tString debugOption = currentArg;", "-\t\t\t\t\tint length = currentArg.length();", "-\t\t\t\t\tif (length == 2) {", "-\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_LocalVariableAttribute,", "-\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "-\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_LineNumberAttribute,", "-\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "-\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_SourceFileAttribute,", "-\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (length > 3) {", "-\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_LocalVariableAttribute,", "-\t\t\t\t\t\t\tCompilerOptions.DO_NOT_GENERATE);", "-\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_LineNumberAttribute,", "-\t\t\t\t\t\t\tCompilerOptions.DO_NOT_GENERATE);", "-\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_SourceFileAttribute,", "-\t\t\t\t\t\t\tCompilerOptions.DO_NOT_GENERATE);", "-\t\t\t\t\t\tif (length == 7 && debugOption.equals(\"-g:\" + NONE)) //$NON-NLS-1$", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\tStringTokenizer tokenizer =", "-\t\t\t\t\t\t\tnew StringTokenizer(debugOption.substring(3, debugOption.length()), \",\"); //$NON-NLS-1$", "-\t\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\t\t\tString token = tokenizer.nextToken();", "-\t\t\t\t\t\t\tif (token.equals(\"vars\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\t\t\tCompilerOptions.OPTION_LocalVariableAttribute,", "-\t\t\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "-\t\t\t\t\t\t\t} else if (token.equals(\"lines\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\t\t\tCompilerOptions.OPTION_LineNumberAttribute,", "-\t\t\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "-\t\t\t\t\t\t\t} else if (token.equals(\"source\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\t\t\tCompilerOptions.OPTION_SourceFileAttribute,", "-\t\t\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\t\t\tthis.bind(\"configure.invalidDebugOption\", debugOption)); //$NON-NLS-1$", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t}", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tthis.bind(\"configure.invalidDebugOption\", debugOption)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.startsWith(\"-nowarn\")) { //$NON-NLS-1$", "-\t\t\t\t\tdisableWarnings();", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.startsWith(\"-warn\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tString warningOption = currentArg;", "-\t\t\t\t\tint length = currentArg.length();", "-\t\t\t\t\tif (length == 10 && warningOption.equals(\"-warn:\" + NONE)) { //$NON-NLS-1$", "-\t\t\t\t\t\tdisableWarnings();", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (length <= 6) {", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.invalidWarningConfiguration\", warningOption)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tint warnTokenStart;", "-\t\t\t\t\tboolean isEnabling, allowPlusOrMinus;", "-\t\t\t\t\tswitch (warningOption.charAt(6)) {", "-\t\t\t\t\t\tcase '+' :", "-\t\t\t\t\t\t\twarnTokenStart = 7;", "-\t\t\t\t\t\t\tisEnabling = true;", "-\t\t\t\t\t\t\tallowPlusOrMinus = true;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '-' :", "-\t\t\t\t\t\t\twarnTokenStart = 7;", "-\t\t\t\t\t\t\tisEnabling = false; // mentionned warnings are disabled", "-\t\t\t\t\t\t\tallowPlusOrMinus = true;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\tdisableWarnings();", "-\t\t\t\t\t\t\twarnTokenStart = 6;", "-\t\t\t\t\t\t\tisEnabling = true;", "-\t\t\t\t\t\t\tallowPlusOrMinus = false;", "-\t\t\t\t\t}", "-", "-\t\t\t\t\tStringTokenizer tokenizer =", "-\t\t\t\t\t\tnew StringTokenizer(warningOption.substring(warnTokenStart, warningOption.length()), \",\"); //$NON-NLS-1$", "-\t\t\t\t\tint tokenCounter = 0;", "-", "-\t\t\t\t\tif (didSpecifyDeprecation) {  // deprecation could have also been set through -deprecation option", "-\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);", "-\t\t\t\t\t}", "-", "-\t\t\t\t\tnextToken: while (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\t\tString token = tokenizer.nextToken();", "-\t\t\t\t\t\ttokenCounter++;", "-\t\t\t\t\t\tswitch(token.charAt(0)) {", "-\t\t\t\t\t\t\tcase '+' :", "-\t\t\t\t\t\t\t\tif (allowPlusOrMinus) {", "-\t\t\t\t\t\t\t\t\tisEnabling = true;", "-\t\t\t\t\t\t\t\t\ttoken = token.substring(1);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\ttokenCounter = 0;", "-\t\t\t\t\t\t\t\t\tbreak nextToken;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase '-' :", "-\t\t\t\t\t\t\t\tif (allowPlusOrMinus) {", "-\t\t\t\t\t\t\t\t\tisEnabling = false;", "-\t\t\t\t\t\t\t\t\ttoken = token.substring(1);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\ttokenCounter = 0;", "-\t\t\t\t\t\t\t\t\tbreak nextToken;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\thandleWarningToken(token, isEnabling);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (tokenCounter == 0) {", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.invalidWarningOption\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-target\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_TARGET;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-preserveAllLocals\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\tCompilerOptions.OPTION_PreserveUnusedLocal,", "-\t\t\t\t\t\tCompilerOptions.PRESERVE);", "-\t\t\t\t    mode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-enableJavadoc\")) {//$NON-NLS-1$", "-\t\t\t\t    mode = DEFAULT;", "-\t\t\t\t\tthis.enableJavadocOn = true;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-Xemacs\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tthis.logger.setEmacs();", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\t// annotation processing", "-\t\t\t\tif (currentArg.startsWith(\"-A\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-processorpath\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_PROCESSOR_PATH_start;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-processor\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_PROCESSOR_start;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-proc:only\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\tCompilerOptions.OPTION_GenerateClassFiles,", "-\t\t\t\t\t\tCompilerOptions.DISABLED);", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-proc:none\")) { //$NON-NLS-1$", "-\t\t\t\t\tdidSpecifyDisabledAnnotationProcessing = true;", "-\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\tCompilerOptions.OPTION_Process_Annotations,", "-\t\t\t\t\t\tCompilerOptions.DISABLED);", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-s\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_S_start;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-XprintProcessorInfo\") //$NON-NLS-1$", "-\t\t\t\t\t\t|| currentArg.equals(\"-XprintRounds\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\t// tolerated javac options - quietly filtered out", "-\t\t\t\tif (currentArg.startsWith(\"-X\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.startsWith(\"-J\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-O\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-classNames\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_CLASS_NAMES;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase INSIDE_TARGET :", "-\t\t\t\tif (this.didSpecifyTarget) {", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tthis.bind(\"configure.duplicateTarget\", currentArg));//$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tthis.didSpecifyTarget = true;", "-\t\t\t\tif (currentArg.equals(\"1.1\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);", "-\t\t\t\t} else if (currentArg.equals(\"1.2\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "-\t\t\t\t} else if (currentArg.equals(\"1.3\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_3);", "-\t\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "-\t\t\t\t} else if (currentArg.equals(\"1.5\") || currentArg.equals(\"5\") || currentArg.equals(\"5.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "-\t\t\t\t} else if (currentArg.equals(\"1.6\") || currentArg.equals(\"6\") || currentArg.equals(\"6.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "-\t\t\t\t} else if (currentArg.equals(\"1.7\") || currentArg.equals(\"7\") || currentArg.equals(\"7.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_7);", "-\t\t\t\t} else if (currentArg.equals(\"jsr14\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_JSR14);", "-\t\t\t\t} else if (currentArg.equals(\"cldc1.1\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_CLDC1_1);", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_InlineJsr, CompilerOptions.ENABLED);", "-\t\t\t\t}else {", "-\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.targetJDK\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_LOG :", "-\t\t\t\tthis.log = currentArg;", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_REPETITION :", "-\t\t\t\ttry {", "-\t\t\t\t\tthis.repetitions = Integer.parseInt(currentArg);", "-\t\t\t\t\tif (this.repetitions <= 0) {", "-\t\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.repetition\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t} catch (NumberFormatException e) {", "-\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.repetition\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_MAX_PROBLEMS :", "-\t\t\t\ttry {", "-\t\t\t\t\tthis.maxProblems = Integer.parseInt(currentArg);", "-\t\t\t\t\tif (this.maxProblems <= 0) {", "-\t\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.maxProblems\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_MaxProblemPerUnit, currentArg);", "-\t\t\t\t} catch (NumberFormatException e) {", "-\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.maxProblems\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_SOURCE :", "-\t\t\t\tif (this.didSpecifySource) {", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tthis.bind(\"configure.duplicateSource\", currentArg));//$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tthis.didSpecifySource = true;", "-\t\t\t\tif (currentArg.equals(\"1.3\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);", "-\t\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);", "-\t\t\t\t} else if (currentArg.equals(\"1.5\") || currentArg.equals(\"5\") || currentArg.equals(\"5.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_5);", "-\t\t\t\t} else if (currentArg.equals(\"1.6\") || currentArg.equals(\"6\") || currentArg.equals(\"6.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_6);", "-\t\t\t\t} else if (currentArg.equals(\"1.7\") || currentArg.equals(\"7\") || currentArg.equals(\"7.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_7);", "-\t\t\t\t} else {", "-\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.source\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_DEFAULT_ENCODING :", "-\t\t\t\tif (didSpecifyDefaultEncoding) {", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tthis.bind(\"configure.duplicateDefaultEncoding\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\ttry { // ensure encoding is supported", "-\t\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), currentArg);", "-\t\t\t\t} catch (UnsupportedEncodingException e) {", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tthis.bind(\"configure.unsupportedEncoding\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tthis.options.put(CompilerOptions.OPTION_Encoding, currentArg);", "-\t\t\t\tdidSpecifyDefaultEncoding = true;", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_DESTINATION_PATH :", "-\t\t\t\tthis.setDestinationPath(currentArg.equals(NONE) ? NONE : currentArg);", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_CLASSPATH_start:", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tindex += processPaths(newCommandLineArgs, index, currentArg, classpaths);", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_BOOTCLASSPATH_start:", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tindex += processPaths(newCommandLineArgs, index, currentArg, bootclasspaths);", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_SOURCE_PATH_start:", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tString[] sourcePaths = new String[1];", "-\t\t\t\tindex += processPaths(newCommandLineArgs, index, currentArg, sourcePaths);", "-\t\t\t\tsourcepathClasspathArg = sourcePaths[0];", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_EXT_DIRS:", "-\t\t\t\tif (currentArg.indexOf(\"[-d\") != -1) { //$NON-NLS-1$", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tthis.bind(\"configure.unexpectedDestinationPathEntry\", //$NON-NLS-1$", "-\t\t\t\t\t\t\t\"-extdir\")); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(currentArg,\tFile.pathSeparator, false);", "-\t\t\t\textdirsClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\t\t\t\twhile (tokenizer.hasMoreTokens())", "-\t\t\t\t\textdirsClasspaths.add(tokenizer.nextToken());", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_ENDORSED_DIRS:", "-\t\t\t\tif (currentArg.indexOf(\"[-d\") != -1) { //$NON-NLS-1$", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tthis.bind(\"configure.unexpectedDestinationPathEntry\", //$NON-NLS-1$", "-\t\t\t\t\t\t\t\"-endorseddirs\")); //$NON-NLS-1$", "-\t\t\t\t}\t\t\t\ttokenizer = new StringTokenizer(currentArg,\tFile.pathSeparator, false);", "-\t\t\t\tendorsedDirClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\t\t\t\twhile (tokenizer.hasMoreTokens())", "-\t\t\t\t\tendorsedDirClasspaths.add(tokenizer.nextToken());", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_SOURCE_DIRECTORY_DESTINATION_PATH:", "-\t\t\t\tif (currentArg.endsWith(\"]\")) { //$NON-NLS-1$", "-\t\t\t\t\tcustomDestinationPath = currentArg.substring(0,", "-\t\t\t\t\t\tcurrentArg.length() - 1);", "-\t\t\t\t} else {", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tthis.bind(\"configure.incorrectDestinationPathEntry\", //$NON-NLS-1$", "-\t\t\t\t\t\t\t\"[-d \" + currentArg)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase INSIDE_PROCESSOR_PATH_start :", "-\t\t\t\t// nothing to do here. This is consumed again by the AnnotationProcessorManager", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_PROCESSOR_start :", "-\t\t\t\t// nothing to do here. This is consumed again by the AnnotationProcessorManager", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_S_start :", "-\t\t\t\t// nothing to do here. This is consumed again by the AnnotationProcessorManager", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_CLASS_NAMES :", "-\t\t\t\ttokenizer = new StringTokenizer(currentArg, \",\"); //$NON-NLS-1$", "-\t\t\t\tif (this.classNames == null) {", "-\t\t\t\t\tthis.classNames = new String[DEFAULT_SIZE_CLASSPATH];", "-\t\t\t\t}", "-\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\tif (this.classNames.length == classCount) {", "-\t\t\t\t\t\t// resize", "-\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\tthis.classNames,", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t(this.classNames = new String[classCount * 2]),", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\tclassCount);", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.classNames[classCount++] = tokenizer.nextToken();", "-\t\t\t\t}", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t}", "-", "-\t\t// default is input directory, if no custom destination path exists", "-\t\tif (customDestinationPath == null) {", "-\t\t\tif (File.separatorChar != '/') {", "-\t\t\t\tcurrentArg = currentArg.replace('/', File.separatorChar);", "-\t\t\t}", "-\t\t\tif (currentArg.endsWith(\"[-d\")) { //$NON-NLS-1$", "-\t\t\t\tcurrentSourceDirectory = currentArg.substring(0,", "-\t\t\t\t\tcurrentArg.length() - 3);", "-\t\t\t\tmode = INSIDE_SOURCE_DIRECTORY_DESTINATION_PATH;", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\tcurrentSourceDirectory = currentArg;", "-\t\t}", "-\t\tFile dir = new File(currentSourceDirectory);", "-\t\tif (!dir.isDirectory()) {", "-\t\t\tthrow new InvalidInputException(", "-\t\t\t\tthis.bind(\"configure.unrecognizedOption\", currentSourceDirectory)); //$NON-NLS-1$", "-\t\t}", "-\t\tString[] result = FileFinder.find(dir, SuffixConstants.SUFFIX_STRING_JAVA);", "-\t\tif (NONE.equals(customDestinationPath)) {", "-\t\t\tcustomDestinationPath = NONE; // ensure == comparison", "-\t\t}", "-\t\tif (this.filenames != null) {", "-\t\t\t// some source files were specified explicitly", "-\t\t\tint length = result.length;", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.filenames,", "-\t\t\t\t0,", "-\t\t\t\t(this.filenames = new String[length + filesCount]),", "-\t\t\t\t0,", "-\t\t\t\tfilesCount);", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.encodings,", "-\t\t\t\t0,", "-\t\t\t\t(this.encodings = new String[length + filesCount]),", "-\t\t\t\t0,", "-\t\t\t\tfilesCount);", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.destinationPaths,", "-\t\t\t\t0,", "-\t\t\t\t(this.destinationPaths = new String[length + filesCount]),", "-\t\t\t\t0,", "-\t\t\t\tfilesCount);", "-\t\t\tSystem.arraycopy(result, 0, this.filenames, filesCount, length);", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tthis.encodings[filesCount + i] = customEncoding;", "-\t\t\t\tthis.destinationPaths[filesCount + i] = customDestinationPath;", "-\t\t\t}", "-\t\t\tfilesCount += length;", "-\t\t\tcustomEncoding = null;", "-\t\t\tcustomDestinationPath = null;", "-\t\t\tcurrentSourceDirectory = null;", "-\t\t} else {", "-\t\t\tthis.filenames = result;", "-\t\t\tfilesCount = this.filenames.length;", "-\t\t\tthis.encodings = new String[filesCount];", "-\t\t\tthis.destinationPaths = new String[filesCount];", "-\t\t\tfor (int i = 0; i < filesCount; i++) {", "-\t\t\t\tthis.encodings[i] = customEncoding;", "-\t\t\t\tthis.destinationPaths[i] = customDestinationPath;", "-\t\t\t}", "-\t\t\tcustomEncoding = null;", "-\t\t\tcustomDestinationPath = null;", "-\t\t\tcurrentSourceDirectory = null;", "-\t\t}", "-\t\tmode = DEFAULT;", "-\t\tcontinue;", "-\t}", "-\t", "-\t// set DocCommentSupport, with appropriate side effects on defaults if ", "-\t// javadoc is not enabled", "-\tif (this.enableJavadocOn) {", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_DocCommentSupport,", "-\t\t\tCompilerOptions.ENABLED);", "-\t} else if (this.warnJavadocOn || this.warnAllJavadocOn) {", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_DocCommentSupport,", "-\t\t\tCompilerOptions.ENABLED);", "-\t\t// override defaults: references that are embedded in javadoc are ignored", "-\t\t// from the perspective of parameters and thrown exceptions usage", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportUnusedParameterIncludeDocCommentReference,", "-\t\t\tCompilerOptions.DISABLED);", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionIncludeDocCommentReference,", "-\t\t\tCompilerOptions.DISABLED);", "-\t}", "-\t// configure warnings for javadoc contents", "-\tif (this.warnJavadocOn) {", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportInvalidJavadoc,", "-\t\t\tCompilerOptions.WARNING);", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTags,", "-\t\t\tCompilerOptions.ENABLED);", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsDeprecatedRef,", "-\t\t\tCompilerOptions.ENABLED);", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsNotVisibleRef,", "-\t\t\tCompilerOptions.ENABLED);", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTags,", "-\t\t\tCompilerOptions.WARNING);", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTagsVisibility,", "-\t\t\tCompilerOptions.PRIVATE);", "-\t}", "-\tif (this.warnAllJavadocOn) {", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportMissingJavadocComments,", "-\t\t\tCompilerOptions.WARNING);", "-\t}", "-", "-\tif (printUsageRequired || (filesCount == 0 && classCount == 0)) {", "-\t\tif (usageSection ==  null) {", "-\t\t\tprintUsage(); // default", "-\t\t} else {", "-\t\t\tprintUsage(usageSection);", "-\t\t}", "-\t\tthis.proceed = false;", "-\t\treturn;", "-\t}", "-", "-\tif (this.log != null) {", "-\t\tthis.logger.setLog(this.log);", "-\t} else {", "-\t\tthis.showProgress = false;", "-\t}", "-\tthis.logger.logVersion(printVersionRequired);", "-", "-\tvalidateOptions(didSpecifyCompliance);", "-\t", "-\t// Enable annotation processing by default in batch mode when compliance is at least 1.6", "-\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=185768", "-\tif (!didSpecifyDisabledAnnotationProcessing", "-\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) >= ClassFileConstants.JDK1_6) {", "-\t\tthis.options.put(CompilerOptions.OPTION_Process_Annotations, CompilerOptions.ENABLED);", "-\t}", "-", "-\tthis.logger.logCommandLineArguments(newCommandLineArgs);", "-\tthis.logger.logOptions(this.options);", "-", "-\tif (this.repetitions == 0) {", "-\t\tthis.repetitions = 1;", "-\t}", "-\tif (this.repetitions >= 3 && this.timing) {", "-\t\tthis.times = new long[this.repetitions];", "-\t\tthis.timesCounter = 0;", "-\t}", "-", "-\tif (filesCount != 0) {", "-\t\tSystem.arraycopy(", "-\t\t\tthis.filenames,", "-\t\t\t0,", "-\t\t\t(this.filenames = new String[filesCount]),", "-\t\t\t0,", "-\t\t\tfilesCount);", "-\t}", "-", "-\tif (classCount != 0) {", "-\t\tSystem.arraycopy(", "-\t\t\tthis.classNames,", "-\t\t\t0,", "-\t\t\t(this.classNames = new String[classCount]),", "-\t\t\t0,", "-\t\t\tclassCount);", "-\t}", "-\t", "-\tsetPaths(bootclasspaths,", "-\t\t\tsourcepathClasspathArg,", "-\t\t\tsourcepathClasspaths,", "-\t\t\tclasspaths,", "-\t\t\textdirsClasspaths,", "-\t\t\tendorsedDirClasspaths,", "-\t\t\tcustomEncoding);", "-\t", "-\tif (this.pendingErrors != null) {", "-\t\tfor (Iterator iterator = this.pendingErrors.iterator(); iterator.hasNext(); ) {", "-\t\t\tString message = (String) iterator.next();", "-\t\t\tthis.logger.logPendingError(message);", "-\t\t}", "-\t\tthis.pendingErrors = null;", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "431917036d9993144f74b898fa39d150", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AbstractIndexer.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void addClassDeclaration(int modifiers, char[] packageName,char[] name,  char[][] enclosingTypeNames, char[] superclass, char[][] superinterfaces)", "signatureAfterChange": " \tpublic void addClassDeclaration(int modifiers, char[] packageName,char[] name,  char[][] enclosingTypeNames, char[] superclass, char[][] superinterfaces)", "diff": ["-}", "-public void addClassDeclaration(int modifiers, char[] packageName,char[] name,  char[][] enclosingTypeNames, char[] superclass, char[][] superinterfaces) {", "-\tthis.output.addRef(TypeDeclarationPattern.createClassDeclaration(packageName, enclosingTypeNames, name));", "-", "-\tthis.output.addRef(", "-\t\tSuperTypeReferencePattern.createReference(", "-\t\t\tmodifiers, packageName, name, enclosingTypeNames, CLASS_SUFFIX, superclass, CLASS_SUFFIX));", "-\tif (superinterfaces != null)", "-\t\tfor (int i = 0, max = superinterfaces.length; i < max; i++)", "-\t\t\tthis.output.addRef(", "-\t\t\t\tSuperTypeReferencePattern.createReference(", "-\t\t\t\t\tmodifiers, packageName, name, enclosingTypeNames, CLASS_SUFFIX, superinterfaces[i], INTERFACE_SUFFIX));", "-}", "+\t}", "+\tpublic void addClassDeclaration(int modifiers, char[] packageName,char[] name,  char[][] enclosingTypeNames, char[] superclass, char[][] superinterfaces) {", "+\t\taddIndexEntry(TYPE_DECL, TypeDeclarationPattern.createIndexKey(packageName, enclosingTypeNames, name, true));", "+\t", "+\t\taddIndexEntry(", "+\t\t\tSUPER_REF, ", "+\t\t\tSuperTypeReferencePattern.createIndexKey(", "+\t\t\t\tmodifiers, packageName, name, enclosingTypeNames, CLASS_SUFFIX, superclass, CLASS_SUFFIX));", "+\t\tif (superinterfaces != null)", "+\t\t\tfor (int i = 0, max = superinterfaces.length; i < max; i++)", "+\t\t\t\taddIndexEntry(", "+\t\t\t\t\tSUPER_REF,", "+\t\t\t\t\tSuperTypeReferencePattern.createIndexKey(", "+\t\t\t\t\t\tmodifiers, packageName, name, enclosingTypeNames, CLASS_SUFFIX, superinterfaces[i], INTERFACE_SUFFIX));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "432a1e78244a59b3f6f5a9c3fb0c9e7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "6d7da1254151724e22f25d1be0ba01cba8049f5e", "commitAfterChange": "31f5d8c3352dfd40743cbafcdc19d9f5e7640d54", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": " \tpublic boolean visit(LambdaExpression lambdaExpression, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(LambdaExpression lambdaExpression, BlockScope scope)", "diff": ["-\t\t\t\tlambdaExpression.arguments,", "+\t\t\t\tlambdaExpression.arguments(),", "-\t\tif (lambdaExpression.body instanceof Block) {", "-\t\t\tformatBlock((Block) lambdaExpression.body, scope, this.preferences.brace_position_for_lambda_body, this.preferences.insert_space_before_opening_brace_in_block);", "+\t\tfinal Statement body = lambdaExpression.body();", "+\t\tif (body instanceof Block) {", "+\t\t\tformatBlock((Block) body, scope, this.preferences.brace_position_for_lambda_body, this.preferences.insert_space_before_opening_brace_in_block);", "-\t\t\tlambdaExpression.body.traverse(this, scope);", "+\t\t\tbody.traverse(this, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44bbe9558e42c8a4b72f12d40582da47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "f6d62cf5509e336368d118f27513759c555039cb", "commitAfterChange": "89f7cc9d4d0d48b1e9133696ddad31d6d3751273", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public MethodBinding createDefaultConstructorWithBinding(MethodBinding inheritedConstructorBinding)", "signatureAfterChange": " public MethodBinding createDefaultConstructorWithBinding(MethodBinding inheritedConstructorBinding)", "diff": ["-// anonymous type constructor creation", "+// anonymous type constructor creation: rank is important since bindings already got sorted", "-\t\tSystem.arraycopy(", "-\t\t\tthis.methods,", "-\t\t\t0,", "-\t\t\tnewMethods = new AbstractMethodDeclaration[this.methods.length + 1],", "-\t\t\t1,", "-\t\t\tthis.methods.length);", "+\t\tSystem.arraycopy(this.methods, 0, newMethods = new AbstractMethodDeclaration[this.methods.length + 1], 1, this.methods.length);", "+\tSourceTypeBinding sourceType = this.binding;", "-\t\t\tthis.binding); //declaringClass", "+\t\t\tsourceType); //declaringClass", "-\tMethodBinding[] oldMethods = this.binding.methods(); // trigger sorting", "+\tMethodBinding[] oldMethods = sourceType.methods(); // trigger sorting", "-\tSystem.arraycopy(", "-\t\tthis.binding.methods(),", "-\t\t0,", "-\t\tnewMethods = new MethodBinding[oldMethods.length + 1],", "-\t\t1,", "-\t\toldMethods.length);", "-\tnewMethods[0] = constructor.binding; // position 0 is important, since if sorted, constructor will still be ahead", "-\tthis.binding.setMethods(newMethods);", "+\tSystem.arraycopy(oldMethods, 0, newMethods = new MethodBinding[oldMethods.length + 1], 1, oldMethods.length);", "+\tnewMethods[0] = constructor.binding; ", "+\tsourceType.tagBits &= ~(TagBits.AreMethodsComplete|TagBits.AreMethodsSorted); // still need to resort, since could be valid methods ahead (140643)", "+\tsourceType.setMethods(newMethods);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4510dcc0db57c16db95ff3ebcee38fb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java", "commitBeforeChange": "1e77fadf417c78089a8bce12d01b049277ef0c41", "commitAfterChange": "caf3736c8c3269393f7e0bedb9e633769506e2e8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tHashMap getAllPackageFragments(JavaProject project)", "signatureAfterChange": " \t \tHashMap getAllPackageFragments(JavaProject project)", "diff": ["-\t\t\t\tIPackageFragment[] entry= (IPackageFragment[]) cache.get(fragment.getElementName());", "+\t\t\t\tString pkgName = fragment.getElementName();", "+\t\t\t\tIPackageFragment[] entry= (IPackageFragment[]) cache.get(pkgName);", "-\t\t\t\t\tcache.put(fragment.getElementName(), entry);", "+\t\t\t\t\tcache.put(pkgName, entry);", "-\t\t\t\t\tcache.put(fragment.getElementName(), copy);", "+\t\t\t\t\tcache.put(pkgName, copy);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4665076bc9795ad5fcdb56b97fbce904", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java", "commitBeforeChange": "1ce53ca49608d62967854b92a874a5596d91464e", "commitAfterChange": "bb72ae085a9c803f32e5ba9cfc8183ec6217c40b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprotected TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": "  \tprotected TypeBinding getTypeBinding(Scope scope)", "diff": ["+\t    ReferenceBinding qualifiedType = null;", "-", "+\t\t\t", "+\t\t\tqualifiedType = this.resolvedType.isGenericType()", "+\t\t\t\t? scope.environment().createRawType((ReferenceBinding)this.resolvedType, qualifiedType)", "+\t\t\t\t: (ReferenceBinding) this.resolvedType;", "+\t\tthis.resolvedType = qualifiedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46ec11f20a884807af3b1c703cdf4d7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "ddf48a7e21056eecd0111cd750a59c8617c397eb", "commitAfterChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t\tpublic void setInstantiation(TypeBinding type, InferenceVariable variable, LookupEnvironment environment)", "signatureAfterChange": " \t\tpublic void setInstantiation(TypeBinding type, InferenceVariable variable, LookupEnvironment environment)", "diff": ["-\t\t\t\tlong oldBits = ((this.instantiation != null) ? this.instantiation.tagBits : variable.tagBits)", "-\t\t\t\t\t\t\t\t& TagBits.AnnotationNullMASK;", "-\t\t\t\tlong requestedBits = type.tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\tlong newBits = (oldBits == TagBits.AnnotationNonNull) ? oldBits : requestedBits; // need to preserve @NonNull", "-\t\t\t\tif (this.instantiation != null && oldBits == newBits) {", "-\t\t\t\t\treturn; // no update needed", "+\t\t\t\tlong variableBits = variable.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\tlong allBits = type.tagBits | variableBits;", "+\t\t\t\tif (this.instantiation != null)", "+\t\t\t\t\tallBits |= this.instantiation.tagBits;", "+\t\t\t\tallBits &= TagBits.AnnotationNullMASK;", "+\t\t\t\tif (allBits == TagBits.AnnotationNullMASK) { // contradiction", "+\t\t\t\t\tallBits = variableBits;", "-\t\t\t\tif (requestedBits != newBits) {", "-\t\t\t\t\t// adjust 'type' to fit the newBits", "-\t\t\t\t\tAnnotationBinding[] annot = environment.nullAnnotationsFromTagBits(newBits);", "+\t\t\t\tif (allBits != (type.tagBits & TagBits.AnnotationNullMASK)) {", "+\t\t\t\t\tAnnotationBinding[] annot = environment.nullAnnotationsFromTagBits(allBits);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4be262e093a581c946ca19ada1e32e08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "05627620b184183fc02b56312924105cb28bd674", "commitAfterChange": "aa38a36de4c6b2f4de0eeda6a3207117a301f29d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tprivate JavaElement getUnresolvedJavaElement()", "signatureAfterChange": " \t \tprivate JavaElement getUnresolvedJavaElement()", "diff": ["-\t\tif (this.binding == null) ", "+\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding = this.binding;", "+\t\tif (typeBinding == null) ", "-\t\tswitch (this.binding.kind()) {", "+\t\tswitch (typeBinding.kind()) {", "+\t\t\t\ttypeBinding = ((ArrayBinding) typeBinding).leafComponentType();", "+\t\t\t\tbreak;", "-\t\t\t\tif (this.binding.isCapture()) ", "+\t\t\t\tif (typeBinding.isCapture()) ", "-\t\tif (this.binding.isParameterizedType() || this.binding.isRawType())", "-\t\t\treferenceBinding = (ReferenceBinding) this.binding.erasure();", "+\t\tif (typeBinding.isParameterizedType() || typeBinding.isRawType())", "+\t\t\treferenceBinding = (ReferenceBinding) typeBinding.erasure();", "-\t\t\treferenceBinding = (ReferenceBinding) this.binding;", "+\t\t\treferenceBinding = (ReferenceBinding) typeBinding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4beaa98a9d450efb541d6180c040a527", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "c1a2c41698e30a77b284ee7e3c91995f0213f1c0", "commitAfterChange": "18e7addfd31efa565dcf3200d77e3cbdb7faf7bc", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  \tpublic void resolve()", "signatureAfterChange": "  \tpublic void resolve()", "diff": ["-\t\tif (this.binding == null) {", "+\t\tSourceTypeBinding sourceType = this.binding;", "+\t\tif (sourceType == null) {", "-\t\t\tboolean needSerialVersion = this.binding.isClass() && this.binding.implementsInterface(scope.getJavaIoSerializable(), true);", "+\t\t\tboolean needSerialVersion = sourceType.isClass() && !sourceType.isAbstract() ", "+\t\t\t\t\t\t\t\t&& sourceType.implementsInterface(scope.getJavaIoSerializable(), true);", "-\t\t\t} else if (this.binding != null && !this.binding.isLocalType()) {", "-\t\t\t\tthis.scope.problemReporter().javadocMissing(this.sourceStart, this.sourceEnd, this.binding.modifiers);", "+\t\t\t} else if (sourceType != null && !sourceType.isLocalType()) {", "+\t\t\t\tthis.scope.problemReporter().javadocMissing(this.sourceStart, this.sourceEnd, sourceType.modifiers);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e18e51700d8f2c89d734d74d7075bc9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "commitAfterChange": "8d68e00ba785472efc36cd0f68660beb95ca71eb", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "signatureAfterChange": "  \tprivate void selectFrom(ASTNode node, Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "diff": ["-\tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration) {", "+\tprivate void selectFrom(ASTNode node, Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration) {", "-\t\t\tif (this.qualifiedSelection != null", "-\t\t\t\t&& !CharOperation.equals(this.qualifiedSelection, typeBinding.readableName())) {", "+\t\t\tif(!checkQualification(", "+\t\t\t\t\tnode,", "+\t\t\t\t\ttypeBinding.qualifiedPackageName(),", "+\t\t\t\t\ttypeBinding.qualifiedSourceName())) {", "-\t\t\t\t\t\t\tselectFrom(((LocalVariableBinding) binding).type, parsedUnit, false);", "+\t\t\t\t\t\t\tselectFrom(null, ((LocalVariableBinding) binding).type, parsedUnit, false);", "-\t\t\t\t\t\t\tselectFrom(((ArrayBinding) binding).leafComponentType, parsedUnit, false);", "+\t\t\t\t\t\t\tselectFrom(node, ((ArrayBinding) binding).leafComponentType, parsedUnit, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51676a2c124fa40a85a4814584864d62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "007f2027ff425d194812a64dbd50790ef7383015", "commitAfterChange": "f7f17008db6ff3c3f5e70873efcd612c1034949b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t    ", "-\t    boolean isClassScope = scope.kind == Scope.CLASS_SCOPE;", "-\t\t\tif (this.resolvedType != null && !this.resolvedType.isValidBinding()) {", "+\t\t\tif (this.resolvedType != null && !this.resolvedType.isValidBinding())", "-\t\t\t}", "+\t    boolean isClassScope = scope.kind == Scope.CLASS_SCOPE;", "-\t\t\tif (isClassScope)", "-\t\t\t\tif (((ClassScope) scope).detectCycle(currentType, this))", "-\t\t\t\t\treturn null;", "-\t\t\tTypeVariableBinding[] typeVariables = currentType.typeVariables();", "+\t\t\t\t// TODO (kent) - if ((this.bits & ASTNode.IsSuperType) != 0)", "+\t\t\t\tif (isClassScope)", "+\t\t\t\t\tif (((ClassScope) scope).detectCycle(currentType, this, argTypes))", "+\t\t\t\t\t\treturn null;", "+", "+\t\t\t    TypeVariableBinding[] typeVariables = currentType.typeVariables();", "-\t\t    } else if (currentType.isGenericType()) { // check raw type", "-\t\t\t        qualifiedType = scope.environment().createRawType(currentType, qualifiedType); // raw type", "-\t\t\t} else if (qualifiedType != null && (qualifiedType.isParameterizedType() || qualifiedType.isRawType())) {", "-\t\t\t\t    qualifiedType = scope.createParameterizedType(currentType, null, qualifiedType);", "+\t\t    } else {", "+   \t\t\t    if ((this.bits & ASTNode.IsSuperType) != 0)", "+   \t\t\t    \tif (((ClassScope) scope).detectCycle(currentType, this, null))", "+   \t\t\t    \t\treturn null;", "+   \t\t\t    if (currentType.isGenericType()) { // check raw type", "+   \t\t\t    \tqualifiedType = scope.environment().createRawType(currentType, qualifiedType); // raw type", "+   \t\t\t    } else if (qualifiedType != null && (qualifiedType.isParameterizedType() || qualifiedType.isRawType())) {", "+   \t\t\t    \tqualifiedType = scope.createParameterizedType(currentType, null, qualifiedType);", "+   \t\t\t    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "540a3ccadb46508c3dec8c3ed3dbc0d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "594cd83ff88684fe048c67afeebfbae2953dc7be", "commitAfterChange": "253974b8e0badc35a364b079060f4bef219ede16", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tprivate void performPreBuildCheck(IResourceDelta delta, Map preferredClasspaths, Map preferredOutputs)", "signatureAfterChange": " \tprivate void updateClasspathMarkers(IResourceDelta delta, HashSet affectedProjects, Map preferredClasspaths, Map preferredOutputs)", "diff": ["-\t */", "-\tprivate void performPreBuildCheck(IResourceDelta delta, Map preferredClasspaths, Map preferredOutputs) {", "-\t\tIResource resource = delta.getResource();", "-\t\tboolean processChildren = false;", "-\t\t", "-\t\tswitch (resource.getType()) {", "-\t", "-\t\t\tcase IResource.ROOT :", "-\t\t\t\tif (delta.getKind() == IResourceDelta.CHANGED) {", "-\t\t\t\t\tprocessChildren = true;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IResource.PROJECT :", "-\t\t\t\tIProject project = (IProject)resource;", "-\t\t\t\tint kind = delta.getKind();", "-\t\t\t\tboolean isJavaProject = JavaProject.hasJavaNature(project);", "-\t\t\t\tswitch (kind) {", "-\t\t\t\t\tcase IResourceDelta.ADDED:", "-\t\t\t\t\t\tprocessChildren = isJavaProject;", "-\t\t\t\t\t\tthis.rootsToRefresh.add(project.getFullPath());", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase IResourceDelta.CHANGED:", "-\t\t\t\t\t\tprocessChildren = isJavaProject;", "-\t\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.OPEN) != 0) {", "-\t\t\t\t\t\t\t// project opened or closed: remember  project and its dependents", "-\t\t\t\t\t\t\tthis.rootsToRefresh.add(project.getFullPath());", "-\t\t\t\t\t\t\tif (isJavaProject) {", "-\t\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "-\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(preferredClasspaths, preferredOutputs); // in case .classpath got modified while closed", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else if ((delta.getFlags() & IResourceDelta.DESCRIPTION) != 0) {", "-\t\t\t\t\t\t\tif (!JavaProject.hasJavaNature(project)) {", "-\t\t\t\t\t\t\t\t// project no longer has Java nature, discard Java related obsolete markers", "-\t\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "-\t\t\t\t\t\t\t\tthis.rootsToRefresh.add(project.getFullPath());", "-\t\t\t\t\t\t\t\t// flush classpath markers", "-\t\t\t\t\t\t\t\tjavaProject.", "-\t\t\t\t\t\t\t\t\tflushClasspathProblemMarkers(", "-\t\t\t\t\t\t\t\t\t\ttrue, // flush cycle markers", "-\t\t\t\t\t\t\t\t\t\ttrue  //flush classpath format markers", "-\t\t\t\t\t\t\t\t\t);", "-\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t// remove problems and tasks created  by the builder", "-\t\t\t\t\t\t\t\tJavaBuilder.removeProblemsAndTasksFor(project);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase IResourceDelta.REMOVED:", "-\t\t\t\t\t\tthis.rootsToRefresh.add(project.getFullPath());", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IResource.FILE :", "-\t\t\t\t/* check classpath file change */", "-\t\t\t\tIFile file = (IFile) resource;", "-\t\t\t\tif (file.getName().equals(JavaProject.CLASSPATH_FILENAME)) {", "-\t\t\t\t\tthis.rootsToRefresh.add(file.getProject().getFullPath());", "-\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(file.getProject());", "-\t\t\t\t\tjavaProject.updateClasspathMarkers(preferredClasspaths, preferredOutputs);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-//\t\t\t\t/* check custom preference file change */", "-//\t\t\t\tif (file.getName().equals(JavaProject.PREF_FILENAME)) {", "-//\t\t\t\t\treconcilePreferenceFileUpdate(delta, file, project);", "-//\t\t\t\t\tbreak;", "-//\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t}", "-\t\tif (processChildren) {", "-\t\t\tIResourceDelta[] children = delta.getAffectedChildren();", "-\t\t\tfor (int i = 0; i < children.length; i++) {", "-\t\t\t\tperformPreBuildCheck(children[i], preferredClasspaths, preferredOutputs);", "-\t\t\t}", "-\t\t}", "-\t}", "+\t */", "+\tprivate void updateClasspathMarkers(IResourceDelta delta, HashSet affectedProjects, Map preferredClasspaths, Map preferredOutputs) {", "+\t\tIResource resource = delta.getResource();", "+\t\tboolean processChildren = false;", "+\t\t", "+\t\tswitch (resource.getType()) {", "+\t", "+\t\t\tcase IResource.ROOT :", "+\t\t\t\tif (delta.getKind() == IResourceDelta.CHANGED) {", "+\t\t\t\t\tprocessChildren = true;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase IResource.PROJECT :", "+\t\t\t\tIProject project = (IProject)resource;", "+\t\t\t\tint kind = delta.getKind();", "+\t\t\t\tboolean isJavaProject = JavaProject.hasJavaNature(project);", "+\t\t\t\tswitch (kind) {", "+\t\t\t\t\tcase IResourceDelta.ADDED:", "+\t\t\t\t\t\tprocessChildren = isJavaProject;", "+\t\t\t\t\t\taffectedProjects.add(project.getFullPath());", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IResourceDelta.CHANGED:", "+\t\t\t\t\t\tprocessChildren = isJavaProject;", "+\t\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.OPEN) != 0) {", "+\t\t\t\t\t\t\t// project opened or closed: remember  project and its dependents", "+\t\t\t\t\t\t\taffectedProjects.add(project.getFullPath());", "+\t\t\t\t\t\t\tif (isJavaProject) {", "+\t\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(preferredClasspaths, preferredOutputs); // in case .classpath got modified while closed", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if ((delta.getFlags() & IResourceDelta.DESCRIPTION) != 0) {", "+\t\t\t\t\t\t\tif (!JavaProject.hasJavaNature(project)) {", "+\t\t\t\t\t\t\t\t// project no longer has Java nature, discard Java related obsolete markers", "+\t\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\t\t\t\taffectedProjects.add(project.getFullPath());", "+\t\t\t\t\t\t\t\t// flush classpath markers", "+\t\t\t\t\t\t\t\tjavaProject.", "+\t\t\t\t\t\t\t\t\tflushClasspathProblemMarkers(", "+\t\t\t\t\t\t\t\t\t\ttrue, // flush cycle markers", "+\t\t\t\t\t\t\t\t\t\ttrue  //flush classpath format markers", "+\t\t\t\t\t\t\t\t\t);", "+\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t// remove problems and tasks created  by the builder", "+\t\t\t\t\t\t\t\tJavaBuilder.removeProblemsAndTasksFor(project);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IResourceDelta.REMOVED:", "+\t\t\t\t\t\taffectedProjects.add(project.getFullPath());", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase IResource.FILE :", "+\t\t\t\t/* check classpath file change */", "+\t\t\t\tIFile file = (IFile) resource;", "+\t\t\t\tif (file.getName().equals(JavaProject.CLASSPATH_FILENAME)) {", "+\t\t\t\t\taffectedProjects.add(file.getProject().getFullPath());", "+\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(file.getProject());", "+\t\t\t\t\tjavaProject.updateClasspathMarkers(preferredClasspaths, preferredOutputs);", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+//\t\t\t\t/* check custom preference file change */", "+//\t\t\t\tif (file.getName().equals(JavaProject.PREF_FILENAME)) {", "+//\t\t\t\t\treconcilePreferenceFileUpdate(delta, file, project);", "+//\t\t\t\t\tbreak;", "+//\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tif (processChildren) {", "+\t\t\tIResourceDelta[] children = delta.getAffectedChildren();", "+\t\t\tfor (int i = 0; i < children.length; i++) {", "+\t\t\t\tupdateClasspathMarkers(children[i], affectedProjects, preferredClasspaths, preferredOutputs);", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57ebc9312d0686b412597f03233aff1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["+\t\t\tif (qualifiedType == null) {", "+\t\t\t\tqualifiedType = currentType.enclosingType(); // if member type", "+\t\t\t\tif (qualifiedType != null && currentType.isStatic() && qualifiedType.isGenericType()) {", "+\t\t\t\t\tqualifiedType = scope.environment().createRawType(qualifiedType, qualifiedType.enclosingType());", "+\t\t\t\t}", "+\t\t\t}\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "589247c8f3cd9aeeabfb96a39dd38541", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "80ce338cef4ec1df54f1a30ce29ab099e3941f07", "commitAfterChange": "1f9df748d4bc9871ec3d99f4082748f0affb3af0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprivate void buildFields()", "signatureAfterChange": " \t \tprivate void buildFields()", "diff": ["+\t\tSourceTypeBinding sourceType = referenceContext.binding;\t\t", "-\t\t\treferenceContext.binding.setFields(Binding.NO_FIELDS);", "+\t\t\tsourceType.setFields(Binding.NO_FIELDS);", "-\t\t\t\tif (referenceContext.binding.isInterface())", "-\t\t\t\t\tproblemReporter().interfaceCannotHaveInitializers(referenceContext.binding, field);", "+\t\t\t\tif (sourceType.isInterface())", "+\t\t\t\t\tproblemReporter().interfaceCannotHaveInitializers(sourceType, field);", "-\t\t\t\tFieldBinding fieldBinding = new FieldBinding(field, null, field.modifiers | ExtraCompilerModifiers.AccUnresolved, referenceContext.binding);", "+\t\t\t\tFieldBinding fieldBinding = new FieldBinding(field, null, field.modifiers | ExtraCompilerModifiers.AccUnresolved, sourceType);", "-\t\t\t\t\t\t\t\tproblemReporter().duplicateFieldInType(referenceContext.binding, previousField);", "+\t\t\t\t\t\t\t\tproblemReporter().duplicateFieldInType(sourceType, previousField);", "-\t\t\t\t\tproblemReporter().duplicateFieldInType(referenceContext.binding, field);", "+\t\t\t\t\tproblemReporter().duplicateFieldInType(sourceType, field);", "-\t\treferenceContext.binding.setFields(fieldBindings);", "+\t\tsourceType.tagBits &= ~(TagBits.AreFieldsSorted|TagBits.AreFieldsComplete); // in case some static imports reached already into this type\t\t", "+\t\tsourceType.setFields(fieldBindings);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a3daca7e11cea8f7f33e44a997ccc65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "146009e38675deb85b2aa23f66e92f2f13172cf7", "commitAfterChange": "08b9d40dde0b005b87b207f8d02b5899cde7b397", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope)", "signatureAfterChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope)", "diff": ["-\t\tMethodBinding theAbstractMethod = genericType().getSingleAbstractMethod(scope);", "+\t\tfinal ReferenceBinding genericType = genericType();", "+\t\tMethodBinding theAbstractMethod = genericType.getSingleAbstractMethod(scope);", "-\t\tTypeVariableBinding [] typeParameters = genericType().typeVariables(); // P1 ... Pn", "+\t\tTypeVariableBinding [] typeParameters = genericType.typeVariables(); // P1 ... Pn", "-\t\tParameterizedTypeBinding parameterizedType = scope.environment().createParameterizedType(genericType(), types, this.enclosingType);", "+\t\tParameterizedTypeBinding parameterizedType = scope.environment().createParameterizedType(genericType, types, genericType.enclosingType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d94c68a05674a503d08ef38bca35487", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "d91fdd3d02823d77126441b4694268b13580cbbc", "commitAfterChange": "1fec50ec33cfd1cb9586525de5179c821b973f57", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \t\tprivate void logXmlProblem(CategorizedProblem problem, char[] unitSource)", "signatureAfterChange": " \t\tprivate void logXmlProblem(CategorizedProblem problem, char[] unitSource)", "diff": ["-\t\t\tint severity = problem.isError() ? ProblemSeverities.Error : ProblemSeverities.Warning;", "-\t\t\tthis.parameters.put(Logger.PROBLEM_SEVERITY, severity == ProblemSeverities.Error ? Logger.ERROR : Logger.WARNING);", "+\t\t\tboolean isError = problem.isError();", "+\t\t\tint severity = isError ? ProblemSeverities.Error : ProblemSeverities.Warning;", "+\t\t\tthis.parameters.put(Logger.PROBLEM_SEVERITY, isError ? Logger.ERROR : Logger.WARNING);", "-\t\t\tthis.parameters.put(Logger.CATEGORY_ID, new Integer(categoryID));", "+\t\t\tthis.parameters.put(Logger.PROBLEM_CATEGORY_ID, new Integer(categoryID));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fb7fa263860174bbc1c3de1801b0a2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SynchronizedStatement.java", "commitBeforeChange": "f6209e22cd3c6ef55e09617e84e4b61166bfdc34", "commitAfterChange": "e3b61331087882f47093048d6298d97548b68615", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic String toString(int tab)", "signatureAfterChange": "  \tpublic StringBuffer printStatement(int indent, StringBuffer output)", "diff": ["-\tpublic String toString(int tab) {", "+\tpublic StringBuffer printStatement(int indent, StringBuffer output) {", "-\t\tString s = tabString(tab);", "-\t\ts = s + \"synchronized (\" + expression.toStringExpression() + \")\";  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\ts = s + \"\\n\" + block.toString(tab + 1); //$NON-NLS-1$", "-\t\treturn s;", "+\t\tprintIndent(indent, output);", "+\t\toutput.append(\"synchronized (\"); //$NON-NLS-1$", "+\t\texpression.printExpression(0, output).append(')');", "+\t\toutput.append('\\n');", "+\t\treturn block.printStatement(indent + 1, output); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "606d914d680351bc0b515ee29cd62990", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "8ee2ac7660ae66b462bce9e2aa37e3d88411c42d", "commitAfterChange": "56ce2602231bb9198b41629265c6b22188fa800c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public void resolve(BlockScope upperScope)", "signatureAfterChange": "\r public void resolve(BlockScope upperScope)", "diff": ["-\t\tthis.secretReturnValue = new LocalVariableBinding(\r", "-\t\t\tSecretLocalDeclarationName, \r", "-\t\t\t((AbstractMethodDeclaration)methodScope.referenceContext).binding.returnType, \r", "-\t\t\tAccDefault);\r", "-\t\tfinallyScope.addLocalVariable(this.secretReturnValue);\r", "-\t\tthis.secretReturnValue.constant = NotAConstant; // not inlinable\r", "-\r", "+\t\tTypeBinding methodReturnType = ((AbstractMethodDeclaration)methodScope.referenceContext).binding.returnType;\r", "+\t\tif (methodReturnType.id != T_void){\r", "+\t\t\tthis.secretReturnValue = new LocalVariableBinding(SecretLocalDeclarationName, methodReturnType, AccDefault);\r", "+\t\t\tfinallyScope.addLocalVariable(this.secretReturnValue);\r", "+\t\t\tthis.secretReturnValue.constant = NotAConstant; // not inlinable\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "618bcd87b3b72df314a8fd8e00570d78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "60105dfcc44d74dc319b1919727afc1b3907fff9", "commitAfterChange": "0747d5e7c6159c917fde8175fc9c67a8bade55fc", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void checkUnclosedCloseables(FlowInfo flowInfo, FlowContext flowContext, ASTNode location, BlockScope locationScope)", "signatureAfterChange": " public void checkUnclosedCloseables(FlowInfo flowInfo, FlowContext flowContext, ASTNode location, BlockScope locationScope)", "diff": ["-\tSet varSet = new HashSet(this.trackingVariables);", "-\tFakedTrackingVariable trackingVar;", "-\t// pick one outer-most variable from the set at a time", "-\twhile ((trackingVar = FakedTrackingVariable.pickVarForReporting(varSet, this, location != null)) != null) {", "+\t// iterate variables according to the priorities defined in FakedTrackingVariable.IteratorForReporting.Stage", "+\tIterator<FakedTrackingVariable> iterator = new FakedTrackingVariable.IteratorForReporting(this.trackingVariables, this, location != null);", "+\twhile (iterator.hasNext()) {", "+\t\tFakedTrackingVariable trackingVar = iterator.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "619513ea36f24dde65d995bf6aa032dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "1181734000bc58166717f28b96a50ec09d7eb3ed", "commitAfterChange": "c51e77393b67f111789d948569acd2e5924511c0", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "\r \tpublic ZipFile getZipFile(IPath path) throws CoreException", "signatureAfterChange": "\r \tpublic synchronized ZipFile getZipFile(IPath path) throws CoreException", "diff": ["-\tpublic ZipFile getZipFile(IPath path) throws CoreException {\r", "+\tpublic synchronized ZipFile getZipFile(IPath path) throws CoreException {\r", "+\t\tThread currentThread = Thread.currentThread();\r", "+\t\tHashMap map = null;\r", "-\t\tif (this.zipFiles != null && (zipFile = (ZipFile)this.zipFiles.get(path)) != null) {\r", "+\t\tif ((map = (HashMap)this.zipFiles.get(currentThread)) != null \r", "+\t\t\t\t&& (zipFile = (ZipFile)map.get(path)) != null) {\r", "+\t\t\t\t\r", "-\t\t\t\tSystem.out.println(\"[JavaModelManager.getZipFile(IPath)] Creating ZipFile on \" + fileSystemPath ); //$NON-NLS-1$\r", "+\t\t\t\tSystem.out.println(\"(\" + currentThread + \") [JavaModelManager.getZipFile(IPath)] Creating ZipFile on \" + fileSystemPath ); //$NON-NLS-1$ //$NON-NLS-2$\r", "-\t\t\tif (this.zipFiles != null) {\r", "-\t\t\t\tthis.zipFiles.put(path, zipFile);\r", "+\t\t\tif (map != null) {\r", "+\t\t\t\tmap.put(path, zipFile);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6488e1d954598c9371f112a6320d7f3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "bbf01bd45c20dcf892a1672b9d9c504b05790a01", "commitAfterChange": "64f2a5b8a78095fa170a97cceb8e661d31b0ae71", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "\r \tpublic boolean saveClasspath(boolean force) throws JavaModelException", "signatureAfterChange": "\r \tpublic boolean saveClasspath(IClasspathEntry[] newClasspath, IPath newOutputLocation) throws JavaModelException", "diff": ["-\tpublic boolean saveClasspath(boolean force) throws JavaModelException {\r", "+\tpublic boolean saveClasspath(IClasspathEntry[] newClasspath, IPath newOutputLocation) throws JavaModelException {\r", "-\t\tif (!getProject().exists())\r", "-\t\t\treturn false;\r", "-\r", "-\t\tif (!isOpen())\r", "-\t\t\treturn false; // no update for closed projects\r", "+\t\tif (!getProject().exists()) return false;\r", "-\t\t\t\tif (!force && isClasspathEqualsTo(fileEntries)) {\r", "+\t\t\t\tif (isClasspathEqualsTo(newClasspath, newOutputLocation, fileEntries)) {\r", "-\t\t\t\tgetClasspathAsXMLString(getRawClasspath(), getOutputLocation()));\r", "+\t\t\t\tgetClasspathAsXMLString(newClasspath, newOutputLocation));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "668fd94c687a91707fd125af84878dde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJarFileToIndex.java", "commitBeforeChange": "6180586710a957df9f07a8a5503c93267544711b", "commitAfterChange": "2bf8d876e4d66bd0fa9172a177289e82abf5e2a4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\t\r \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": "\t\r \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t\t\t\t\tSystem.out.println(\"INDEX (\"+ Thread.currentThread()+\"): \" + zip.getName()); //$NON-NLS-1$//$NON-NLS-2$\r", "+\t\t\t\t\tJobManager.log(\"-> indexing \" + zip.getName()); //$NON-NLS-1$\r", "+\t\t\t\t\t\tif (JobManager.VERBOSE)\r", "+\t\t\t\t\t\t\tJobManager.log(\r", "+\t\t\t\t\t\t\t\t\"-> no indexing required for \" //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t\t+ zip.getName() + \" (\" //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t\t+ (System.currentTimeMillis() - initialTime) + \"ms)\"); //$NON-NLS-1$\r", "-\t\t\t\t\t\t\tSystem.out.println(\"INDEX : \" //$NON-NLS-1$\r", "-\t\t\t\t\t\t\t+zip.getName() + \" CANCELLED\"); //$NON-NLS-1$\r", "+\t\t\t\t\t\t\tJobManager.log(\r", "+\t\t\t\t\t\t\t\t\"-> indexing of \" //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t\t+ zip.getName() \r", "+\t\t\t\t\t\t\t\t+ \" has been cancelled\"); //$NON-NLS-1$\r", "-\t\t\t\t\tSystem.out.println(\"INDEX : \" //$NON-NLS-1$\r", "-\t\t\t\t\t+zip.getName() + \" COMPLETE in \" //$NON-NLS-1$\r", "-\t\t\t\t\t+ (System.currentTimeMillis() - initialTime) + \" ms\"); //$NON-NLS-1$\r", "+\t\t\t\t\tJobManager.log(\r", "+\t\t\t\t\t\t\"-> done indexing of \" //$NON-NLS-1$\r", "+\t\t\t\t\t\t+ zip.getName() + \" (\" //$NON-NLS-1$\r", "+\t\t\t\t\t\t+ (System.currentTimeMillis() - initialTime) + \"ms)\"); //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67898602be9b61b064444644bf6bc0f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "99f0734d8a1b71a7d7c72970a0e6d86dd16a74bf", "commitAfterChange": "0660a80b4f83507ec084149491c197acba246b67", "methodNumberBeforeChange": 248, "methodNumberAfterChange": 271, "signatureBeforeChange": " private int localSourceEnd(LocalVariableBinding binding, ASTNode node)", "signatureAfterChange": " private int nodeSourceEnd(Binding field, ASTNode node)", "diff": ["-private int localSourceEnd(LocalVariableBinding binding, ASTNode node) {", "-\tif (node instanceof QualifiedNameReference) {", "-\t\tQualifiedNameReference ref = (QualifiedNameReference) node;", "-\t\tif (ref.binding == binding) {", "-\t\t\treturn (int) (ref.sourcePositions[ref.indexOfFirstFieldBinding-1]);", "-\t\t}", "-\t}", "-\treturn node.sourceEnd;", "-}", "+private int nodeSourceEnd(Binding field, ASTNode node) {", "+\treturn nodeSourceEnd(field, node, 0);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67b246fa2af74c365f884fbfc94257d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "0be54bcd07d7e9a734200ac55807f54a7fc49b71", "commitAfterChange": "d1b26e65b6c143c400fb90a9f9fead6e4ed62e62", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 36, "signatureBeforeChange": " \t \tpublic void printStats()", "signatureAfterChange": " \t \tpublic void printStats()", "diff": ["-\t\t\t\tthis.out.println(", "+\t\t\t\tthis.logger.printlnOut(", "-\t\t\t\tthis.out.println(Main.bind(\"compile.totalTime\", String.valueOf(time))); //$NON-NLS-1$", "+\t\t\t\tthis.logger.printlnOut(Main.bind(\"compile.totalTime\", String.valueOf(time))); //$NON-NLS-1$", "-\t\t\t\tthis.err.print(Main.bind(\"compile.oneProblem\")); //$NON-NLS-1$", "+\t\t\t\tthis.logger.printErr(Main.bind(\"compile.oneProblem\")); //$NON-NLS-1$", "-\t\t\t\tthis.err.print(", "+\t\t\t\tthis.logger.printErr(", "-\t\t\tthis.err.print(\" (\"); //$NON-NLS-1$", "+\t\t\tthis.logger.printErr(\" (\"); //$NON-NLS-1$", "-\t\t\t\t\tthis.err.print(Main.bind(\"compile.oneError\")); //$NON-NLS-1$", "+\t\t\t\t\tthis.logger.printErr(Main.bind(\"compile.oneError\")); //$NON-NLS-1$", "-\t\t\t\t\tthis.err.print(", "+\t\t\t\t\tthis.logger.printErr(", "-\t\t\t\t\tthis.err.print(\", \"); //$NON-NLS-1$", "+\t\t\t\t\tthis.logger.printErr(\", \"); //$NON-NLS-1$", "-\t\t\t\t\tthis.err.print(Main.bind(\"compile.oneWarning\")); //$NON-NLS-1$", "+\t\t\t\t\tthis.logger.printErr(Main.bind(\"compile.oneWarning\")); //$NON-NLS-1$", "-\t\t\t\t\tthis.err.print(", "+\t\t\t\t\tthis.logger.printErr(", "-\t\t\tthis.err.println(\")\"); //$NON-NLS-1$", "+\t\t\tthis.logger.printlnErr(\")\"); //$NON-NLS-1$", "-\t\t\t\tthis.out.println(Main.bind(\"compile.oneClassFileGenerated\")); //$NON-NLS-1$", "+\t\t\t\tthis.logger.printlnOut(Main.bind(\"compile.oneClassFileGenerated\")); //$NON-NLS-1$", "-\t\t\t\tthis.out.println(", "+\t\t\t\tthis.logger.printlnOut("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68a70a22fbcd709ab8cfe9c995716c36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "5464f8b56e2b620bf0f37dc5a7c218f835be9cef", "commitAfterChange": "57e05ac5c8db0c06028159bb169607bae2e0ec84", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tthis.lhsType = lhs.resolveType(scope);", "-\t\tTypeBinding expressionTb = expression.resolveType(scope);", "-\t\tif (this.lhsType == null || expressionTb == null)", "+\t\tthis.resolvedType = lhs.resolveType(scope); // expressionType contains the assignment type (lhs Type)", "+\t\tTypeBinding rhsType = expression.resolveType(scope);", "+\t\tif (this.resolvedType == null || rhsType == null)", "-\t\tif ((expression.isConstantValueOfTypeAssignableToType(expressionTb, this.lhsType)", "-\t\t\t|| (this.lhsType.isBaseType() && BaseTypeBinding.isWidening(this.lhsType.id, expressionTb.id)))", "-\t\t\t|| (Scope.areTypesCompatible(expressionTb, this.lhsType))) {", "-\t\t\texpression.implicitWidening(this.lhsType, expressionTb);", "-\t\t\tthis.expressionType = this.lhsType;", "-\t\t\treturn this.lhsType;", "+\t\tif ((expression.isConstantValueOfTypeAssignableToType(rhsType, this.resolvedType)", "+\t\t\t|| (this.resolvedType.isBaseType() && BaseTypeBinding.isWidening(this.resolvedType.id, rhsType.id)))", "+\t\t\t|| (Scope.areTypesCompatible(rhsType, this.resolvedType))) {", "+\t\t\texpression.implicitWidening(this.resolvedType, rhsType);", "+\t\t\treturn this.resolvedType;", "-\t\t\texpressionTb,", "-\t\t\tthis.lhsType);", "+\t\t\trhsType,", "+\t\t\tthis.resolvedType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a0b85dcecbde8bc5b6f853b06c79f00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java", "commitBeforeChange": "07500b3aefa58aecd5e846627b7c70382793f29f", "commitAfterChange": "641c18a6fa8d154329ae2bcdac1ab25ff8b18f71", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate CompilationParticipantResult cleanNotify( CompilationParticipantEvent cpe )", "signatureAfterChange": "  \tprivate CompilationParticipantResult cleanNotify( CompilationParticipantEvent cpe )", "diff": ["-\t\tIProject p = cpe.getJavaProject().getProject();", "+\t\tIJavaProject javaProject = cpe.getJavaProject();", "+\t\tIProject p = javaProject.getProject();", "-\t\tGeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager( p );", "+\t\tGeneratedFileManager gfm = AptPlugin.getAptProject(javaProject).getGeneratedFileManager();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72052da235c04f95a634682b94c4bee2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodPattern.java", "commitBeforeChange": "1203ec285e9510454e7eee6b9217d8d694a24e95", "commitAfterChange": "fe9d56739c7ee5a42ad73e908441932d571ee55b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public MethodPattern( \tchar[] selector,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] returnQualification,  \tchar[] returnSimpleName, \tString returnSignature, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tIMethod method, \tint limitTo, \tint matchRule)", "signatureAfterChange": " public MethodPattern( \tchar[] selector,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] returnQualification,  \tchar[] returnSimpleName, \tString returnSignature, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tIMethod method, \tint limitTo, \tint matchRule)", "diff": ["-//\tString genericSignature = null;", "-\tString key;", "-\tif (method.isResolved() && (new BindingKey(key = method.getKey())).isParameterizedMethod()) {", "-\t\tgenericDeclaringTypeSignature = Util.getDeclaringTypeSignature(key);", "+\tif (method.isResolved()) {", "+\t\tString key = method.getKey();", "+\t\tBindingKey bindingKey = new BindingKey(key);", "+\t\tif (bindingKey.isParameterizedType()) {", "+\t\t\tgenericDeclaringTypeSignature = Util.getDeclaringTypeSignature(key);", "+\t\t\t// Store type signature and arguments for declaring type", "+\t\t\tif (genericDeclaringTypeSignature != null) {", "+\t\t\t\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(genericDeclaringTypeSignature);", "+\t\t\t\t\tsetTypeArguments(Util.getAllTypeArguments(this.typeSignatures));", "+\t\t\t}", "+\t\t}", "-\t}", "-", "-\t// Store type signature and arguments for declaring type", "-\tif (genericDeclaringTypeSignature != null) {", "-\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(genericDeclaringTypeSignature);", "-\t\tsetTypeArguments(Util.getAllTypeArguments(this.typeSignatures));", "-\t} else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "723a74356d8b3f6b7daa9881e74aa823", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorPattern.java", "commitBeforeChange": "1203ec285e9510454e7eee6b9217d8d694a24e95", "commitAfterChange": "fe9d56739c7ee5a42ad73e908441932d571ee55b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public ConstructorPattern( \tchar[] declaringSimpleName,\t \tchar[] declaringQualification, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tIMethod method, \tint limitTo, \tint matchRule)", "signatureAfterChange": " public ConstructorPattern( \tchar[] declaringSimpleName,\t \tchar[] declaringQualification, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tIMethod method, \tint limitTo, \tint matchRule)", "diff": ["-\tString key;", "-\tBindingKey bindingKey;", "-\tif (method.isResolved() && ((bindingKey = new BindingKey(key = method.getKey())).isParameterizedType() || bindingKey.isParameterizedMethod())) {", "-\t\tgenericDeclaringTypeSignature = Util.getDeclaringTypeSignature(key);", "+\tif (method.isResolved()) {", "+\t\tString key = method.getKey();", "+\t\tBindingKey bindingKey = new BindingKey(key);", "+\t\tif (bindingKey.isParameterizedType()) {", "+\t\t\tgenericDeclaringTypeSignature = Util.getDeclaringTypeSignature(key);", "+\t\t\t// Store type signature and arguments for declaring type", "+\t\t\tif (genericDeclaringTypeSignature != null) {", "+\t\t\t\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(genericDeclaringTypeSignature);", "+\t\t\t\t\tsetTypeArguments(Util.getAllTypeArguments(this.typeSignatures));", "+\t\t\t}", "+\t\t}", "-\t\tconstructorParameters = true;", "-\t}", "-", "-\t// Store type signature and arguments for declaring type", "-\tif (genericDeclaringTypeSignature != null) {", "-\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(genericDeclaringTypeSignature);", "-\t\tsetTypeArguments(Util.getAllTypeArguments(this.typeSignatures));", "-\t} else {", "+\t\tthis.constructorParameters = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "739c67c5ad32819e02fd0f71e42c3c3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "a6d9bda80e868cca3f3164e68cf46fd5fb2642ae", "commitAfterChange": "b91ada4688442ba390f3bab334c211412d8a03f2", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "\t \t  \tprivate void rewriteModifiers(ASTNode parent, StructuralPropertyDescriptor property, int offset)", "signatureAfterChange": "\t \t  \tprivate void rewriteModifiers(ASTNode parent, StructuralPropertyDescriptor property, int offset)", "diff": ["-\t\t", "-\t\t", "-\t\tint oldModifiers= ((Integer) event.getOriginalValue()).intValue();", "-\t\tint newModifiers= ((Integer) event.getNewValue()).intValue();", "-\t\tTextEditGroup editGroup= getEditGroup(event);", "-\t\t", "-\t\t\tint tok= getScanner().readNext(offset, true);", "-\t\t\tint startPos= getScanner().getCurrentStartOffset();", "-\t\t\tint endPos= startPos;", "+\t\t\tint oldModifiers= ((Integer) event.getOriginalValue()).intValue();", "+\t\t\tint newModifiers= ((Integer) event.getNewValue()).intValue();", "+\t\t\tTextEditGroup editGroup= getEditGroup(event);", "+\t\t", "+\t\t\tTokenScanner scanner= getScanner();", "+", "+\t\t\tint tok= scanner.readNext(offset, false);", "+\t\t\tint startPos= scanner.getCurrentStartOffset();", "+\t\t\tint nextStart= startPos;", "+\t\t\t\tif (TokenScanner.isComment(tok)) {", "+\t\t\t\t\ttok= scanner.readNext(true); // next non-comment token", "+\t\t\t\t}", "-\t\t\t\ttok= getScanner().readNext(true);", "-\t\t\t\tint currPos= endPos;", "-\t\t\t\tendPos= getScanner().getCurrentStartOffset();", "+\t\t\t\ttok= getScanner().readNext(false); // include comments", "+\t\t\t\tint currPos= nextStart;", "+\t\t\t\tnextStart= getScanner().getCurrentStartOffset();", "-\t\t\t\t\tdoTextRemove(currPos, endPos - currPos, editGroup);", "+\t\t\t\t\tdoTextRemove(currPos, nextStart - currPos, editGroup);", "-\t\t\t\tif (startPos != endPos) {", "+\t\t\t\tif (startPos != nextStart) {", "-\t\t\t\tdoTextInsert(endPos, buf.toString(), editGroup);", "+\t\t\t\tdoTextInsert(nextStart, buf.toString(), editGroup);", "-\t\t\t// ignore", "-\t\t}\t\t", "+\t\t\thandleException(e);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "747eb6d1c954e454360ef10603a804d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/OpenableElementInfo.java", "commitBeforeChange": "09617092d586fc57d56d7255b395176bf3d6b1e7", "commitAfterChange": "a9567e58ade978b67e4f2db4ee5fe35bc3c0d3fe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic void addChild(IJavaElement child)", "signatureAfterChange": "  \tpublic void addChild(IJavaElement child)", "diff": ["-\t\tint length = this.children.length;", "+\t\tIJavaElement[] oldChildren = this.children;", "+\t\tint length = oldChildren.length;", "-\t\t\t\tif (this.children[i].equals(child))", "+\t\t\t\tif (oldChildren[i].equals(child))", "-\t\t\tSystem.arraycopy(this.children, 0, this.children = new IJavaElement[length+1], 0, length);", "-\t\t\tthis.children[length] = child;", "+\t\t\tIJavaElement[] newChildren = new IJavaElement[length+1];", "+\t\t\tSystem.arraycopy(oldChildren, 0, newChildren, 0, length);", "+\t\t\tnewChildren[length] = child;", "+\t\t\tthis.children = newChildren;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a6a63740ec9a9b989287ce872534aa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "7abbfdc499cc9c4b6791b295cc3b57aae4dbf4a2", "commitAfterChange": "94189fcbc9a4b8322e4e3df8ed4401273c0e4e4d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " protected void notifyChanged(final BufferChangedEvent event)", "signatureAfterChange": " protected void notifyChanged(final BufferChangedEvent event)", "diff": ["-\tif (this.changeListeners != null) {", "-\t\tfor (int i = 0, size = this.changeListeners.size(); i < size; ++i) {", "-\t\t\tfinal IBufferChangedListener listener = (IBufferChangedListener) this.changeListeners.get(i);", "+\tArrayList listeners = this.changeListeners;", "+\tif (listeners != null) {", "+\t\tfor (int i = 0, size = listeners.size(); i < size; ++i) {", "+\t\t\tfinal IBufferChangedListener listener = (IBufferChangedListener) listeners.get(i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7db92647ce40c4d5d1e46e13caaf6120", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldLocator.java", "commitBeforeChange": "c99d716fa975f313809c9a758c093b0027fd52fe", "commitAfterChange": "cb63167d7ae8e51f68c8f4ae8680682adf1ffd54", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected int matchField(FieldBinding field, boolean matchName)", "signatureAfterChange": " protected int matchField(FieldBinding field, boolean matchName)", "diff": ["+\tFieldPattern fieldPattern = (FieldPattern)this.pattern;", "-\t\t\treturn this.pattern.declaringQualification == null && this.pattern.declaringSimpleName == null", "+\t\t\treturn fieldPattern.declaringQualification == null && fieldPattern.declaringSimpleName == null", "-\tint declaringLevel = resolveLevelForType(this.pattern.declaringSimpleName, this.pattern.declaringQualification, receiverBinding);", "+\tint declaringLevel = resolveLevelForType(fieldPattern.declaringSimpleName, fieldPattern.declaringQualification, receiverBinding);", "-\tif (this.pattern.declaringSimpleName == null) return declaringLevel;", "+\tif (fieldPattern.declaringSimpleName == null) return declaringLevel;", "-\tint typeLevel = resolveLevelForType(this.pattern.typeSimpleName, this.pattern.typeQualification, field.type);", "+\tint typeLevel = resolveLevelForType(fieldPattern.typeSimpleName, fieldPattern.typeQualification, field.type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "822c12df6cea47830f90c774197559b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "d48c3936eb7643859e6c2cea0aecbe0fd30a502d", "commitAfterChange": "45a50f132d1a94817dc9fe333d375cdfb8483391", "methodNumberBeforeChange": 405, "methodNumberAfterChange": 405, "signatureBeforeChange": " protected void recoverStatements()", "signatureAfterChange": " protected void recoverStatements()", "diff": ["+\t\t\tif (initializer.block == null) return false;", "+\t\t\tif (initializer.block == null) return;", "+\t\t\tif (initializer.block == null) return false;", "+\t\t\t\t\tInitializer initializer = (Initializer) fieldDeclaration;", "+\t\t\t\t\tif (initializer.block == null) break;", "-\t\t\t\t\t((Initializer) fieldDeclaration).traverse(methodVisitor, (MethodScope)null);", "+\t\t\t\t\tinitializer.traverse(methodVisitor, (MethodScope)null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8436badae268a3b7c3fe8b1b558d56d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedResourceChangeListener.java", "commitBeforeChange": "07500b3aefa58aecd5e846627b7c70382793f29f", "commitAfterChange": "641c18a6fa8d154329ae2bcdac1ab25ff8b18f71", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic void resourceChanged(IResourceChangeEvent event)", "signatureAfterChange": " \t \tpublic void resourceChanged(IResourceChangeEvent event)", "diff": ["-\t\t\t\taddGeneratedSrcFolderTo(visitor.getProjectsThatNeedGenSrcFolder());", "-\t\t\tGeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager( p );", "+\t\t\tIJavaProject jp = JavaCore.create(p);", "+\t\t\tGeneratedFileManager gfm = AptPlugin.getAptProject(jp).getGeneratedFileManager();", "-\t\t\tGeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager( p );", "+\t\t\tIJavaProject jp = JavaCore.create(p);", "+\t\t\tGeneratedFileManager gfm = AptPlugin.getAptProject(jp).getGeneratedFileManager();", "+\t\t\tAptPlugin.deleteAptProject(jp);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85263b5c99040b024726c9848b301af0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "e4380347a32522b42fc20d0a13b9f152b3de5ec5", "commitAfterChange": "a08e8dc8e9230a115f0cfdb4f78a05f8533a21b8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid analyseArguments(FlowInfo flowInfo)", "signatureAfterChange": " \tstatic void analyseArguments(FlowInfo flowInfo, Argument[] methodArguments, MethodBinding methodBinding)", "diff": ["-\tvoid analyseArguments(FlowInfo flowInfo) {", "-\t\tif (this.arguments != null) {", "-\t\t\tfor (int i = 0, count = this.arguments.length; i < count; i++) {", "-\t\t\t\tif (this.binding.parameterNonNullness != null) {", "+\tstatic void analyseArguments(FlowInfo flowInfo, Argument[] methodArguments, MethodBinding methodBinding) {", "+\t\tif (methodArguments != null) {", "+\t\t\tfor (int i = 0, count = methodArguments.length; i < count; i++) {", "+\t\t\t\tif (methodBinding.parameterNonNullness != null) {", "-\t\t\t\t\tBoolean nonNullNess = this.binding.parameterNonNullness[i];", "+\t\t\t\t\tBoolean nonNullNess = methodBinding.parameterNonNullness[i];", "-\t\t\t\t\t\t\tflowInfo.markAsDefinitelyNonNull(this.arguments[i].binding);", "+\t\t\t\t\t\t\tflowInfo.markAsDefinitelyNonNull(methodArguments[i].binding);", "-\t\t\t\t\t\t\tflowInfo.markPotentiallyNullBit(this.arguments[i].binding);", "+\t\t\t\t\t\t\tflowInfo.markPotentiallyNullBit(methodArguments[i].binding);", "-\t\t\t\tflowInfo.markAsDefinitelyAssigned(this.arguments[i].binding);", "+\t\t\t\tflowInfo.markAsDefinitelyAssigned(methodArguments[i].binding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "890781d617289c5d4a475038f32b8cc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "96e946e432239988b54746ee7b5f10cbfedc599c", "commitAfterChange": "aff5c12cbb27baf6a5a4fcffc519f600863197f9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "signatureAfterChange": " \tprotected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "diff": ["-\t\t\t\t\t\tname = ((TypeDeclaration)node).name;", "-\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tTypeDeclaration typeDecl = (TypeDeclaration) node;", "+\t\t\t\t\t\tif (typeDecl.bodyEnd == 0) { // type declaration currenly parsed", "+\t\t\t\t\t\t\tname = typeDecl.name;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a01c628e00613ff0c3d159787496089", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java", "commitBeforeChange": "17fcd420e0756889bcaffeff4cf983b2cff84a3e", "commitAfterChange": "e02893535f42359d54aa8b408faa8e8269b32442", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void recordInitializationStartPC(int pc)", "signatureAfterChange": "  \tpublic void recordInitializationStartPC(int pc)", "diff": ["-\t\t// optimize cases where reopening a contiguous interval", "-\t\tif ((initializationCount > 0) && (initializationPCs[ ((initializationCount - 1) << 1) + 1] == pc)) {", "-\t\t\tinitializationPCs[ ((initializationCount - 1) << 1) + 1] = -1; // reuse previous interval (its range will be augmented)", "-\t\t} else {", "-\t\t\tint index = initializationCount << 1;", "-\t\t\tif (index == initializationPCs.length) {", "-\t\t\t\tSystem.arraycopy(initializationPCs, 0, (initializationPCs = new int[initializationCount << 2]), 0, index);", "+\t\tif (initializationCount > 0) {", "+\t\t\tint previousEndPC = initializationPCs[ ((initializationCount - 1) << 1) + 1];", "+\t\t\t // interval still open, keep using it (108180)", "+\t\t\tif (previousEndPC == -1) {", "+\t\t\t\treturn;", "-\t\t\tinitializationPCs[index] = pc;", "-\t\t\tinitializationPCs[index + 1] = -1;", "-\t\t\tinitializationCount++;", "+\t\t\t// optimize cases where reopening a contiguous interval", "+\t\t\tif (previousEndPC == pc) {", "+\t\t\t\tinitializationPCs[ ((initializationCount - 1) << 1) + 1] = -1; // reuse previous interval (its range will be augmented)", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\tint index = initializationCount << 1;", "+\t\tif (index == initializationPCs.length) {", "+\t\t\tSystem.arraycopy(initializationPCs, 0, (initializationPCs = new int[initializationCount << 2]), 0, index);", "+\t\t}", "+\t\tinitializationPCs[index] = pc;", "+\t\tinitializationPCs[index + 1] = -1;", "+\t\tinitializationCount++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c39a1c13ef81d8b3859746de25966ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "25d70eac1f59d17fd35f15454804710ecb835662", "commitAfterChange": "e7e2695fe5657cf6f05f673f7f1f6646805752fe", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": " \tpublic boolean visit(Javadoc node)", "signatureAfterChange": " \tpublic boolean visit(IntersectionType node)", "diff": ["+\t */", "+\tpublic boolean visit(IntersectionType node) {", "+\t\tif (!hasChildrenChanges(node)) {", "+\t\t\treturn doVisitUnchangedChildren(node);", "+\t\t}", "+\t\tint pos= node.getStartPosition();", "+\t\tif (isChanged(node, IntersectionType.TYPES_PROPERTY)) {", "+\t\t\tpos= rewriteNodeList(node, IntersectionType.TYPES_PROPERTY, pos, Util.EMPTY_STRING, \" & \"); //$NON-NLS-1$", "+\t\t} else {", "+\t\t\tpos= doVisit(node, IntersectionType.TYPES_PROPERTY, pos);", "+\t\t}", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ce5d3cbc875621b270e6439277d3c39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "38deed784ce291d43d3c53414da1ee3c4ed08415", "commitAfterChange": "644852dd87f43f0af4108905e62d50729f9b044b", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 155, "signatureBeforeChange": " public void importProblem(ImportReference importRef, Binding expectedImport)", "signatureAfterChange": " public void importProblem(ImportReference importRef, Binding expectedImport)", "diff": ["-\t\t\t\t\timportRef.sourceStart,", "-\t\t\t\t\timportRef.sourceEnd);\t\t\t", "+\t\t\t\t\tfieldSourceStart(field, importRef),", "+\t\t\t\t\tfieldSourceEnd(field, importRef));\t\t\t", "-\t\t\timportRef.sourceStart,", "-\t\t\timportRef.sourceEnd);", "+\t\t\tfieldSourceStart(field, importRef),", "+\t\t\tfieldSourceEnd(field, importRef));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d84684e0487d2d36b15c5a4c90593de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "022ce6ecab85a3599efe170c0e6cdb8fac0b535f", "commitAfterChange": "931f9abc01ffde10b8deb0208d22a402929fa505", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \t \tpublic void clearAllMaps()", "signatureAfterChange": " \t \tpublic void clearAllMaps()", "diff": ["+\t\t\t", "+\t\t\t// Delete any saved build state", "+\t\t\tFile state = getSerializationFile(_jProject.getProject());", "+\t\t\tif (state != null) {", "+\t\t\t\tboolean successfullyDeleted = state.delete();", "+\t\t\t\tif (!successfullyDeleted && state.exists()) {", "+\t\t\t\t\tAptPlugin.log(new IOException(\"Could not delete apt dependency state file\"), //$NON-NLS-1$", "+\t\t\t\t\t\t\tstate.getPath());", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e1f2dc68c1710baf2f5b5d825da3ca7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CaseStatement.java", "commitBeforeChange": "f6209e22cd3c6ef55e09617e84e4b61166bfdc34", "commitAfterChange": "e3b61331087882f47093048d6298d97548b68615", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic String toString(int tab)", "signatureAfterChange": "  \tpublic StringBuffer printStatement(int tab, StringBuffer output)", "diff": ["+\tpublic StringBuffer printStatement(int tab, StringBuffer output) {", "+", "+\t\tprintIndent(tab, output);", "+\t\tif (constantExpression == null) {", "+\t\t\toutput.append(\"default : \"); //$NON-NLS-1$", "+\t\t} else {", "+\t\t\toutput.append(\"case \"); //$NON-NLS-1$", "+\t\t\tconstantExpression.printExpression(0, output).append(\" : \"); //$NON-NLS-1$", "+\t\t}", "+\t\treturn output.append(';');", "+\t}", "-\tpublic String toString(int tab) {", "-", "-\t\tString s = tabString(tab);", "-\t\tif (constantExpression == null) {", "-\t\t\ts = s + \"default : \"; //$NON-NLS-1$", "-\t\t} else {", "-\t\ts = s + \"case \" + constantExpression.toStringExpression() + \" : \"; //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t}", "-\t\treturn s;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f800a19e35f6d9d8f7240ef9c2a904b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/FactoryPathUtil.java", "commitBeforeChange": "6a39aeee024a65d73e9084e99bead655e3ded072", "commitAfterChange": "30a0d8b166ac2fa2854a231544dfecb8e382982a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic static Map<FactoryContainer, Boolean> decodeFactoryPath(final String xmlFactoryPath)  \t\tthrows CoreException", "signatureAfterChange": "  \tpublic static Map<FactoryContainer, FactoryPath.Attributes> decodeFactoryPath(final String xmlFactoryPath)  \tthrows CoreException", "diff": ["-\tpublic static Map<FactoryContainer, Boolean> decodeFactoryPath(final String xmlFactoryPath) ", "-\t\tthrows CoreException", "-\t{", "-\t\tMap<FactoryContainer, Boolean> result = new LinkedHashMap<FactoryContainer, Boolean>();", "-\t\tStringReader reader = new StringReader(xmlFactoryPath);", "-\t\tElement fpElement = null;", "-\t\t", "-\t\ttry {", "-\t\t\tDocumentBuilder parser = ", "-\t\t\t\tDocumentBuilderFactory.newInstance().newDocumentBuilder();", "-\t\t\tfpElement = parser.parse(new InputSource(reader)).getDocumentElement();", "-\t\t\t", "-\t\t}", "-\t\tcatch (IOException e) {", "-\t\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_ioException, e));", "-\t\t}", "-\t\tcatch (SAXException e) {", "-\t\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_couldNotParse, e));", "-\t\t}", "-\t\tcatch (ParserConfigurationException e) {", "-\t\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_parserConfigError, e));", "-\t\t}", "-\t\tfinally {", "-\t\t\treader.close();", "-\t\t}", "-\t\t", "-\t\tif (!fpElement.getNodeName().equalsIgnoreCase(FACTORYPATH_TAG)) {", "-\t\t\tIOException e = new IOException(\"Incorrect file format. File must begin with \" + FACTORYPATH_TAG); //$NON-NLS-1$", "-\t\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_ioException, e));", "-\t\t}", "-\t\tNodeList nodes = fpElement.getElementsByTagName(FACTORYPATH_ENTRY_TAG);", "-\t\tfor (int i=0; i < nodes.getLength(); i++) {", "-\t\t\tNode node = nodes.item(i);", "-\t\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {", "-\t\t\t\tElement element = (Element)node;", "-\t\t\t\tString kindString = element.getAttribute(KIND);", "-\t\t\t\t// deprecated container type \"JAR\" is now \"EXTJAR\"", "-\t\t\t\tif (\"JAR\".equals(kindString)) { //$NON-NLS-1$", "-\t\t\t\t\tkindString = \"EXTJAR\"; //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tString idString = element.getAttribute(ID);", "-\t\t\t\tString enabledString = element.getAttribute(ENABLED);", "-\t\t\t\tFactoryType kind = FactoryType.valueOf(kindString);", "-\t\t\t\tFactoryContainer container = null;", "-\t\t\t\tswitch (kind) {", "-\t\t\t\t", "-\t\t\t\tcase WKSPJAR :", "-\t\t\t\t\tcontainer = FactoryPath.newWkspJarFactoryContainer(new Path(idString));", "-\t\t\t\t\tbreak;", "-\t\t\t\t\t", "-\t\t\t\tcase EXTJAR :", "-\t\t\t\t\tcontainer = FactoryPath.newExtJarFactoryContainer(new File(idString));", "-\t\t\t\t\tbreak;", "-\t\t\t\t\t", "-\t\t\t\tcase VARJAR :", "-\t\t\t\t\tcontainer = FactoryPath.newVarJarFactoryContainer(new Path(idString));", "-\t\t\t\t\tbreak;", "-\t\t\t\t", "-\t\t\t\tcase PLUGIN :", "-\t\t\t\t\tcontainer = FactoryPath.getPluginFactoryContainer(idString);", "-\t\t\t\t\tbreak;", "-\t\t\t\t\t", "-\t\t\t\tdefault :", "-\t\t\t\t\tthrow new IllegalStateException(\"Unrecognized kind: \" + kind + \". Original string: \" + kindString); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tif (null != container) {", "-\t\t\t\t\tresult.put(container, new Boolean(enabledString));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\treturn result;", "+", "+\tpublic static Map<FactoryContainer, FactoryPath.Attributes> decodeFactoryPath(final String xmlFactoryPath) ", "+\tthrows CoreException", "+{", "+\tMap<FactoryContainer, FactoryPath.Attributes> result = new LinkedHashMap<FactoryContainer, FactoryPath.Attributes>();", "+\tStringReader reader = new StringReader(xmlFactoryPath);", "+\tElement fpElement = null;", "+\t", "+\ttry {", "+\t\tDocumentBuilder parser = ", "+\t\t\tDocumentBuilderFactory.newInstance().newDocumentBuilder();", "+\t\tfpElement = parser.parse(new InputSource(reader)).getDocumentElement();", "+\t\t", "+\t}", "+\tcatch (IOException e) {", "+\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_ioException, e));", "+\t}", "+\tcatch (SAXException e) {", "+\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_couldNotParse, e));", "+\t}", "+\tcatch (ParserConfigurationException e) {", "+\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_parserConfigError, e));", "+\t}", "+\tfinally {", "+\t\treader.close();", "+\t}", "+\t", "+\tif (!fpElement.getNodeName().equalsIgnoreCase(FACTORYPATH_TAG)) {", "+\t\tIOException e = new IOException(\"Incorrect file format. File must begin with \" + FACTORYPATH_TAG); //$NON-NLS-1$", "+\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_ioException, e));", "+\t}", "+\tNodeList nodes = fpElement.getElementsByTagName(FACTORYPATH_ENTRY_TAG);", "+\tfor (int i=0; i < nodes.getLength(); i++) {", "+\t\tNode node = nodes.item(i);", "+\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {", "+\t\t\tElement element = (Element)node;", "+\t\t\tString kindString = element.getAttribute(KIND);", "+\t\t\t// deprecated container type \"JAR\" is now \"EXTJAR\"", "+\t\t\tif (\"JAR\".equals(kindString)) { //$NON-NLS-1$", "+\t\t\t\tkindString = \"EXTJAR\"; //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tString idString = element.getAttribute(ID);", "+\t\t\tString enabledString = element.getAttribute(ENABLED);", "+\t\t\tString runInAptModeString = element.getAttribute(RUN_IN_BATCH_MODE); ", "+\t\t\tFactoryType kind = FactoryType.valueOf(kindString);", "+\t\t\tFactoryContainer container = null;", "+\t\t\tswitch (kind) {", "+\t\t\t", "+\t\t\tcase WKSPJAR :", "+\t\t\t\tcontainer = newWkspJarFactoryContainer(new Path(idString));", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase EXTJAR :", "+\t\t\t\tcontainer = newExtJarFactoryContainer(new File(idString));", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase VARJAR :", "+\t\t\t\tcontainer = newVarJarFactoryContainer(new Path(idString));", "+\t\t\t\tbreak;", "+\t\t\t", "+\t\t\tcase PLUGIN :", "+\t\t\t\tcontainer = getPluginFactoryContainer(idString);", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tdefault :", "+\t\t\t\tthrow new IllegalStateException(\"Unrecognized kind: \" + kind + \". Original string: \" + kindString); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (null != container) {", "+\t\t\t\tFactoryPath.Attributes a = new FactoryPath.Attributes( ", "+\t\t\t\t\t\tBoolean.parseBoolean(enabledString), Boolean.parseBoolean(runInAptModeString));", "+\t\t\t\tresult.put(container, a);", "+\t\t\t}", "+\t\t}", "+\t}", "+\t", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "915b3662b7cc45f958887b601333f33c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "38deed784ce291d43d3c53414da1ee3c4ed08415", "commitAfterChange": "644852dd87f43f0af4108905e62d50729f9b044b", "methodNumberBeforeChange": 246, "methodNumberAfterChange": 247, "signatureBeforeChange": " public void localVariableHiding(LocalDeclaration local, Binding hiddenVariable, boolean  isSpecialArgHidingField)", "signatureAfterChange": " public void localVariableHiding(LocalDeclaration local, Binding hiddenVariable, boolean  isSpecialArgHidingField)", "diff": ["-\t\t\tlocal.sourceStart,", "-\t\t\tlocal.sourceEnd);", "+\t\t\tlocalSourceStart((LocalVariableBinding) hiddenVariable, local),", "+\t\t\tlocalSourceEnd((LocalVariableBinding) hiddenVariable, local));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91e9004afac9dd7bcf379b0fb84133f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 47, "signatureBeforeChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "signatureAfterChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "diff": ["+\t", "+\tif (this != this.prototype)", "+\t\treturn this.prototype.resolveTypeFor(field);", "+", "+\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\t\t\tAnnotationBinding [] annotations = field.getAnnotations();", "+\t\t\t\tif (annotations != null && annotations != Binding.NO_ANNOTATIONS) {", "+\t\t\t\t\tASTNode.copySE8AnnotationsToType(initializationScope, field, annotations);", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8 && !fieldType.isBaseType()) {", "-\t\t\t\t\tlong nullTagBits = field.tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\tif (nullTagBits != 0 && nullTagBits != (fieldType.tagBits & TagBits.AnnotationNullMASK))", "-\t\t\t\t\t\tfield.type = environment.createAnnotatedType(fieldType, nullTagBits);", "-\t\t\t\t\t// do not reset field.tagBits, since more fields may need to share this information (\"@NonNull Object o1, o2;\")", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96a7c6ba41970c9016902c8f36dc15aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/CompilationUnitSorter.java", "commitBeforeChange": "fbea54ab8ab673e1042c88c7a7b4fa601ca3cb60", "commitAfterChange": "f48f4fa6384edec836b004bb617f932b11cd773c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic static void sort(ICompilationUnit[] compilationUnits, int[][] positions, Comparator comparator, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic static void sort(ICompilationUnit compilationUnit, int[] positions, Comparator comparator, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t */", "-\tpublic static void sort(ICompilationUnit[] compilationUnits, int[][] positions, Comparator comparator, IProgressMonitor monitor) throws JavaModelException {", "-\t\tif (comparator == null || compilationUnits == null || (positions != null && positions.length != compilationUnits.length)) {", "+\t\tif (compilationUnit == null || comparator == null) {", "-\t\tSortElementsOperation operation = new SortElementsOperation(compilationUnits , positions, comparator);", "+\t\t// TODO: (olivier) Remove extra level of array", "+\t\tICompilationUnit[] compilationUnits = new ICompilationUnit[] { compilationUnit };", "+\t\tint[][] positionsList = new int[][] {positions};", "+\t\tSortElementsOperation operation = new SortElementsOperation(compilationUnits, positionsList, comparator);", "-\t}\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97174424df82d9550f21cefb634f113e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tthis.resolvedType = this.qualification.resolveType(scope);", "-\t\tif (this.resolvedType == null) return null;", "-", "+\t\tTypeBinding type = this.resolvedType = this.qualification.resolveType(scope);", "+\t\tif (type == null) return null;", "+\t\t// X.this is not a raw type as denoting enclosing instance", "+\t\tif (type.isRawType()) {", "+\t\t    RawTypeBinding rawType = (RawTypeBinding) type;", "+\t\t    type = this.resolvedType = rawType.type; // unwrap", "+\t\t}", "-\t\t\t&& this.currentCompatibleType != this.resolvedType) {", "+\t\t\t&& this.currentCompatibleType != type) {", "-\t\t\tscope.problemReporter().noSuchEnclosingInstance(this.resolvedType, this, false);", "-\t\t\treturn this.resolvedType;", "+\t\t\tscope.problemReporter().noSuchEnclosingInstance(type, this, false);", "+\t\t\treturn type;", "-\t\treturn this.resolvedType;", "+\t\treturn type;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bd4d90b8e741f99c04c994a08d45113", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "7457bea53db55dfd5dcff532a14a048723e8aca7", "commitAfterChange": "dd725abebfec1a7ab4e43e5b15844f0dfffaa8da", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tthis.resolvedType = type.resolveType(scope);", "+\t\t\tTypeBinding castType = this.resolvedType = type.resolveType(scope);", "-\t\t\tif (this.resolvedType != null && expressionType != null) {", "-\t\t\t\tboolean isLegal = checkCastTypesCompatibility(scope, this.resolvedType, expressionType, this.expression);", "-\t\t\t\tif (isLegal) {", "-\t\t\t\t\tthis.expression.computeConversion(scope, this.resolvedType, expressionType);", "-\t\t\t\t\tif ((this.bits & UnsafeCastMask) != 0) { // unsafe cast", "-\t\t\t\t\t\tscope.problemReporter().unsafeCast(this, scope);", "-\t\t\t\t\t} else if ((this.bits & (UnnecessaryCastMASK|IgnoreNeedForCastCheckMASK)) == UnnecessaryCastMASK) { // unnecessary cast ", "-\t\t\t\t\t\tif (!isIndirectlyUsed()) // used for generic type inference or boxing ?", "-\t\t\t\t\t\t\tscope.problemReporter().unnecessaryCast(this);", "+\t\t\tif (castType != null) {", "+\t\t\t\tif (expressionType != null) {", "+\t\t\t\t\tboolean isLegal = checkCastTypesCompatibility(scope, castType, expressionType, this.expression);", "+\t\t\t\t\tif (isLegal) {", "+\t\t\t\t\t\tthis.expression.computeConversion(scope, castType, expressionType);", "+\t\t\t\t\t\tif ((this.bits & UnsafeCastMask) != 0) { // unsafe cast", "+\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this, scope);", "+\t\t\t\t\t\t} else {", "+//\t\t\t\t\t\t\tif (castType.isRawType() && scope.compilerOptions().reportRawTypeReference){", "+//\t\t\t\t\t\t\t\tscope.problemReporter().rawTypeReference(this.type, castType);\t\t\t", "+//\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif ((this.bits & (UnnecessaryCastMASK|IgnoreNeedForCastCheckMASK)) == UnnecessaryCastMASK) { // unnecessary cast ", "+\t\t\t\t\t\t\t\tif (!isIndirectlyUsed()) // used for generic type inference or boxing ?", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().unnecessaryCast(this);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else { // illegal cast", "+\t\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\t\t\tthis.resolvedType = this.resolvedType.capture(scope, this.sourceEnd);", "-\t\t\t\t} else { // illegal cast", "-\t\t\t\t\tscope.problemReporter().typeCastError(this,  this.resolvedType, expressionType);", "+\t\t\t\tthis.resolvedType = castType.capture(scope, this.sourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9be09308c037154c6ea231f6e80be376", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "bd2b202132c8d4bb0e104bd05827a1b9231c9dc5", "commitAfterChange": "4aad3541005b227c1c4489d6142b68e14885b9dc", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprivate boolean createExternalArchiveDelta(IProgressMonitor monitor)", "signatureAfterChange": " \tprivate boolean createExternalArchiveDelta(HashSet refreshedElements, IProgressMonitor monitor)", "diff": ["-\tprivate boolean createExternalArchiveDelta(IProgressMonitor monitor) {", "+\t */", "+\tprivate boolean createExternalArchiveDelta(HashSet refreshedElements, IProgressMonitor monitor) {", "-\t\tif (this.refreshedElements == null) return false;", "-\t\t\t", "-\t\tIterator iterator = this.refreshedElements.iterator();", "-\t\tthis.refreshedElements = null; // null out early to avoid concurrent modification exception (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=63534)", "+\t\tIterator iterator = refreshedElements.iterator();", "+\t\t}", "+\t\tif (hasDelta){", "+\t\t\t// force classpath marker refresh of affected projects", "+\t\t\tJavaModel.flushExternalFileCache();", "+\t\t\t", "+\t\t\t// flush jar type cache", "+\t\t\tJavaModelManager.getJavaModelManager().resetJarTypeCache();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9be436f226e642ab8a3f4236d4591cff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "0f7512564895fa2a39321eca7c3187047e2e8a80", "commitAfterChange": "a0ec748bf5f6b9a543116c5e57b9f6a98949d743", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate void initOptions(IJavaProject jproj)", "signatureAfterChange": " \tprivate void initOptions(IJavaProject jproj)", "diff": ["-\t\t\t_options.put(entry.getKey(), entry.getValue());", "+\t\t\tString value = resolveVarPath(entry.getValue());", "+\t\t\t_options.put(entry.getKey(), value);", "-\t\t\tif (entry.getValue() != null) {", "-\t\t\t\tsunStyle = \"-A\" + entry.getKey() + \"=\" + entry.getValue(); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tif (value != null) {", "+\t\t\t\tsunStyle = \"-A\" + entry.getKey() + \"=\" + value; //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dafe2610a84e514147e4b8acbc46044", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "8861b8acfd87086e544117143aef10af0195095f", "commitAfterChange": "e6a8418fa053d90159e93cddfdeaf1bb437e9155", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean compile(String[] argv)", "signatureAfterChange": " \tpublic boolean compile(String[] argv)", "diff": ["-\t\t\t\t\tout.print(Main.bind(\"progress.compiling\")); //$NON-NLS-1$", "+\t\t\t\t\tout.println(Main.bind(\"progress.compiling\")); //$NON-NLS-1$", "-\t\t\t\t\t\t\tout.print(Main.bind(\"compile.oneProblem\")); //$NON-NLS-1$", "+\t\t\t\t\t\t\terr.print(Main.bind(\"compile.oneProblem\")); //$NON-NLS-1$", "-\t\t\t\t\t\t\tout.print(", "+\t\t\t\t\t\t\terr.print(", "-\t\t\t\t\t\tout.print(\" (\"); //$NON-NLS-1$", "+\t\t\t\t\t\terr.print(\" (\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tout.print(Main.bind(\"compile.oneError\")); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\terr.print(Main.bind(\"compile.oneError\")); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tout.print(", "+\t\t\t\t\t\t\t\terr.print(", "-\t\t\t\t\t\t\t\tout.print(\", \"); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\terr.print(\", \"); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tout.print(Main.bind(\"compile.oneWarning\")); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\terr.print(Main.bind(\"compile.oneWarning\")); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tout.print(", "+\t\t\t\t\t\t\t\terr.print(", "-\t\t\t\t\t\tout.println(\")\"); //$NON-NLS-1$", "+\t\t\t\t\t\terr.println(\")\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\tout.print(Main.bind(\"compile.oneClassFileGenerated\")); //$NON-NLS-1$", "+\t\t\t\t\t\t\tout.println(Main.bind(\"compile.oneClassFileGenerated\")); //$NON-NLS-1$", "-\t\t\t\t\t\t\tout.print(", "+\t\t\t\t\t\t\tout.println(", "-\t\t\t\t\tSystem.out.println();", "+\t\t\t\t\tout.println();", "+\t\t\t\terr.flush();", "-\t\t\tout.println(e.getMessage());", "-\t\t\tout.println(\"------------------------\"); //$NON-NLS-1$", "+\t\t\terr.println(e.getMessage());", "+\t\t\terr.println(\"------------------------\"); //$NON-NLS-1$", "+\t\t\t\terr.flush();", "-\t\t\t\t\tout.close();", "+\t\t\t\t\terr.close();", "+\t\t\terr.flush();", "-\t\t\t\tout.close();", "+\t\t\t\terr.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a645ff2c07fc340438b5e7f9e2cb4a53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "78c62e3a4157070f714848f4de312a55f14f5144", "commitAfterChange": "fb48e11da0ebe84c63fab7b3cb5afd39c0ba6101", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate static boolean checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType)", "signatureAfterChange": " \tprivate static boolean checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType)", "diff": ["-\t\tif (argumentType != NullBinding && parameterType.isWildcard() && ((WildcardBinding) parameterType).kind != Wildcard.SUPER)", "-\t\t    return true; // unsafeWildcardInvocation", "+\t\tif (argumentType != NullBinding && parameterType.isWildcard()) {", "+\t\t\tWildcardBinding wildcard = (WildcardBinding) parameterType;", "+\t\t\tif (wildcard.kind != Wildcard.SUPER && wildcard.otherBounds == null) // lub wildcards are tolerated", "+\t\t    \treturn true; // unsafeWildcardInvocation", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a85fb90640fff95db60ef171c98d8f57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "b7b27ff488733ad97566caef0cb2bdd99a3b7b63", "commitAfterChange": "d2bf5e6bc7d5c8ce5696375ed384baae09128c52", "methodNumberBeforeChange": 401, "methodNumberAfterChange": 400, "signatureBeforeChange": " protected void resetStacks()", "signatureAfterChange": " protected void resetStacks()", "diff": ["-\tif (this.scanner != null && this.scanner.currentLine != null) {", "-\t\tthis.scanner.currentLine.clear();", "+\tif (this.scanner != null) {", "+\t\tfinal NLSLine line = this.scanner.currentLine;", "+\t\tif (line != null) {", "+\t\t\tline.clear();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "accdeefad49bd553682b2f1d55805c3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "4addbf3fcf740f0ae7bd5f62f816a19ffc370ba8", "commitAfterChange": "0d32c20ed2cca4af752cdfe8890dae5f9b83ecc6", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 118, "signatureBeforeChange": "  \tprivate void findVariableNames(char[] name, TypeReference type , char[][] discouragedNames, char[][] forbiddenNames, int kind, int modifiers)", "signatureAfterChange": "  \tprivate void findVariableNames(char[] name, TypeReference type , char[][] discouragedNames, char[][] forbiddenNames, int kind, int modifiers)", "diff": ["-", "-\t\t\ttype.resolvedType != null &&", "-\t\t\ttype.resolvedType.problemId() == ProblemReasons.NoError){", "+\t\t\ttype.resolvedType != null) {", "-\t\t\tfindVariableName(", "-\t\t\t\tname,", "-\t\t\t\ttb.leafComponentType().qualifiedPackageName(),", "-\t\t\t\ttb.leafComponentType().qualifiedSourceName(),", "-\t\t\t\ttb.leafComponentType().sourceName(),", "-\t\t\t\ttb,", "-\t\t\t\tdiscouragedNames,", "-\t\t\t\tforbiddenNames,", "-\t\t\t\ttype.dimensions(),", "-\t\t\t\tkind,", "-\t\t\t\tmodifiers);", "-\t\t}/*\telse {", "-\t\t\tchar[][] typeName = type.getTypeName();", "-\t\t\tfindVariableName(", "-\t\t\t\tname,", "-\t\t\t\tNoChar,", "-\t\t\t\tCharOperation.concatWith(typeName, '.'),", "-\t\t\t\ttypeName[typeName.length - 1],", "-\t\t\t\texcludeNames,", "-\t\t\t\ttype.dimensions());", "-\t\t}*/", "+\t\t\t", "+\t\t\tif (tb.problemId() == ProblemReasons.NoError &&", "+\t\t\t\t\ttb != Scope.getBaseType(VOID)) {", "+\t\t\t\tfindVariableName(", "+\t\t\t\t\tname,", "+\t\t\t\t\ttb.leafComponentType().qualifiedPackageName(),", "+\t\t\t\t\ttb.leafComponentType().qualifiedSourceName(),", "+\t\t\t\t\ttb.leafComponentType().sourceName(),", "+\t\t\t\t\ttb,", "+\t\t\t\t\tdiscouragedNames,", "+\t\t\t\t\tforbiddenNames,", "+\t\t\t\t\ttype.dimensions(),", "+\t\t\t\t\tkind,", "+\t\t\t\t\tmodifiers);", "+\t\t\t}", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae3fb912b85c785665b659b55028fe70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 347, "methodNumberAfterChange": 347, "signatureBeforeChange": " public void unqualifiedFieldAccess(NameReference reference, FieldBinding field)", "signatureAfterChange": " public void unqualifiedFieldAccess(NameReference reference, FieldBinding field)", "diff": ["-\tint end = reference.sourceEnd;", "-\tif (reference instanceof QualifiedNameReference) {", "-\t\tQualifiedNameReference qref = (QualifiedNameReference) reference;", "-\t\tend = (int) qref.sourcePositions[0];", "-\t}", "-\t\treference.sourceStart,", "-\t\tend);", "+\t\tfieldSourceStart(field, reference),", "+\t\tfieldSourceEnd(field, reference)); ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0835fdb2811447fdb487a83dbd0caef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "fe25f265c04b05b78a3922c802443d0f290eb28d", "commitAfterChange": "24d226ada8d61f965d94976697c07601e6dce9f7", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static IClasspathContainer getClasspathContainer(final IPath containerPath, final IJavaProject project) throws JavaModelException", "signatureAfterChange": " \tpublic static IClasspathContainer getClasspathContainer(final IPath containerPath, final IJavaProject project) throws JavaModelException", "diff": ["-\t\t\t\t\tSystem.out.println(\"CPContainer INIT - triggering initialization of: [\"+project.getElementName()+\"] \" + containerPath + \" using initializer: \"+ initializer); //$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$", "-\t\t\t\t\tnew Exception(\"FAKE exception for dumping current CPContainer ([\"+project.getElementName()+\"] \"+ containerPath+ \")INIT invocation stack trace\").printStackTrace(); //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$", "+\t\t\t\t\tUtil.verbose(\"CPContainer INIT - triggering initialization\"); //$NON-NLS-1$", "+\t\t\t\t\tUtil.verbose(\"\tproject: \" + project.getElementName()); //$NON-NLS-1$", "+\t\t\t\t\tUtil.verbose(\"\tcontainer path: \" + containerPath); //$NON-NLS-1$", "+\t\t\t\t\tUtil.verbose(\"\tinitializer: \" + initializer); //$NON-NLS-1$", "+\t\t\t\t\tUtil.verbose(\"\tinvocation stack trace:\"); //$NON-NLS-1$", "+\t\t\t\t\tnew Exception(\"<Fake exception>\").printStackTrace(System.out); //$NON-NLS-1$", "-\t\t\t\t\tSystem.out.print(\"CPContainer INIT - after resolution: [\"+project.getElementName()+\"] \" + containerPath + \" --> \"); //$NON-NLS-2$//$NON-NLS-1$//$NON-NLS-3$", "+\t\t\t\t\tUtil.verbose(\"CPContainer INIT - after resolution\"); //$NON-NLS-1$", "+\t\t\t\t\tUtil.verbose(\"\tproject: \" + project.getElementName()); //$NON-NLS-1$", "+\t\t\t\t\tUtil.verbose(\"\tcontainer path: \" + containerPath); //$NON-NLS-1$", "-\t\t\t\t\t\tSystem.out.print(\"container: \"+container.getDescription()+\" {\"); //$NON-NLS-2$//$NON-NLS-1$", "+\t\t\t\t\t\tUtil.verbose(\"\tcontainer: \"+container.getDescription()+\" {\"); //$NON-NLS-2$//$NON-NLS-1$", "-\t\t\t\t\t\t\t\tif (i > 0) System.out.println(\", \");//$NON-NLS-1$", "-\t\t\t\t\t\t\t\tSystem.out.println(entries[i]);", "+\t\t\t\t\t\t\t\tUtil.verbose(\"\t\t\" + entries[i]); //$NON-NLS-1$", "-\t\t\t\t\t\tSystem.out.println(\"}\");//$NON-NLS-1$", "+\t\t\t\t\t\tUtil.verbose(\"\t}\");//$NON-NLS-1$", "-\t\t\t\t\t\tSystem.out.println(\"{unbound}\");//$NON-NLS-1$", "+\t\t\t\t\t\tUtil.verbose(\"\tcontainer: {unbound}\");//$NON-NLS-1$", "-\t\t\t\t\tSystem.out.println(\"CPContainer INIT - no initializer found for: \"+project.getElementName()+\"] \" + containerPath); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\tUtil.verbose(\"CPContainer INIT - no initializer found\"); //$NON-NLS-1$", "+\t\t\t\t\tUtil.verbose(\"\tproject: \" + project.getElementName()); //$NON-NLS-1$", "+\t\t\t\t\tUtil.verbose(\"\tcontainer path: \" + containerPath); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2106b1c2589e635545571eeab0e437e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "a6c016e4b9174d429d2989715c74cf56e42ef6bb", "commitAfterChange": "c9f804b2e84f02e4cfe425f0463c67be2149642c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic boolean detectCycle(ReferenceBinding superType, TypeReference reference, TypeBinding[] argTypes)", "signatureAfterChange": "  \tpublic boolean detectCycle(TypeBinding superType, TypeReference reference, TypeBinding[] argTypes)", "diff": ["-\tpublic boolean detectCycle(ReferenceBinding superType, TypeReference reference, TypeBinding[] argTypes) {", "+\tpublic boolean detectCycle(TypeBinding superType, TypeReference reference, TypeBinding[] argTypes) {", "+\t\tif (!(superType instanceof ReferenceBinding)) return false;", "+", "+\t\t\tif (superType.isTypeVariable())", "+\t\t\t\treturn false; // error case caught in resolveSuperType()", "-\t\t\treturn detectCycle(referenceContext.binding, superType, reference);", "+\t\t\tcompilationUnitScope().recordSuperTypeReference(superType); // to record supertypes", "+\t\t\treturn detectCycle(referenceContext.binding, (ReferenceBinding) superType, reference);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b457908dc6e08abaf7d303cdebfa0e0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "fe25f265c04b05b78a3922c802443d0f290eb28d", "commitAfterChange": "24d226ada8d61f965d94976697c07601e6dce9f7", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic static IPath getClasspathVariable(final String variableName)", "signatureAfterChange": " \tpublic static IPath getClasspathVariable(final String variableName)", "diff": ["-\t\t\t\tSystem.out.println(\"CPVariable INIT - triggering initialization of: \" + variableName+ \" using initializer: \"+ initializer); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tnew Exception(\"FAKE exception for dumping current CPVariable (\"+variableName+ \")INIT invocation stack trace\").printStackTrace(); //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\tUtil.verbose(\"CPVariable INIT - triggering initialization\"); //$NON-NLS-1$", "+\t\t\t\tUtil.verbose(\"\tvariable: \" + variableName); //$NON-NLS-1$", "+\t\t\t\tUtil.verbose(\"\tinitializer: \" + initializer); //$NON-NLS-1$", "+\t\t\t\tnew Exception(\"<Fake exception>\").printStackTrace(System.out); //$NON-NLS-1$", "-\t\t\t\t\tSystem.out.println(\"CPVariable INIT - after initialization: \" + variableName + \" --> \" + variablePath); //$NON-NLS-2$//$NON-NLS-1$", "+\t\t\t\t\tUtil.verbose(\"CPVariable INIT - after initialization\"); //$NON-NLS-1$", "+\t\t\t\t\tUtil.verbose(\"\tvariable: \" + variableName); //$NON-NLS-1$", "+\t\t\t\t\tUtil.verbose(\"\tvariable path: \" + variablePath); //$NON-NLS-1$", "-\t\t\t\tSystem.out.println(\"CPVariable INIT - no initializer found for: \" + variableName); //$NON-NLS-1$", "+\t\t\t\tUtil.verbose(\"CPVariable INIT - no initializer found\"); //$NON-NLS-1$", "+\t\t\t\tUtil.verbose(\"\tvariable: \" + variableName); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b51ad4368ac93b0e4394cce81d29d0df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/HierarchyScope.java", "commitBeforeChange": "f6032ce41550edd5e2f17b10399bfc4567c2ccb1", "commitAfterChange": "efaa136352e48f75f848f433f0b9f3fa6e28519d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tprivate void buildResourceVector() throws JavaModelException", "signatureAfterChange": "\r \tprivate void buildResourceVector() throws JavaModelException", "diff": ["-\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, jar.getPath(), true);\r", "+\t\t\t\tIPath jarPath = jar.getPath();\r", "+\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, jarPath, true);\r", "-\t\t\t\t\tzipFileName = ((IFile)target).getLocation().toOSString();\r", "+\t\t\t\t\t// internal jar\r", "+\t\t\t\t\tzipFileName = jarPath.toString();\r", "+\t\t\t\t\t// external jar\r", "-\t\t\t\tpaths.put(jar.getPath(), type);\r", "+\t\t\t\tpaths.put(jarPath, type);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b53df3eca80d843109e3d61979a160eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6e8c555a7d6f504d4ea246c591d5bb3f080d438", "commitAfterChange": "3316f207e855c46fb5e805791239fa37620ca8c4", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void jobWasCancelled(IPath containerPath)", "signatureAfterChange": " public synchronized void jobWasCancelled(IPath containerPath)", "diff": ["-public void jobWasCancelled(IPath containerPath) {", "-\tString indexLocation = computeIndexLocation(containerPath);", "-\tObject o = this.indexes.get(indexLocation);", "-\tif (o instanceof Index) {", "-\t\t((Index) o).monitor = null;", "-\t\tthis.indexes.remove(indexLocation);", "+public synchronized void jobWasCancelled(IPath containerPath) {", "+\tIPath indexLocation = computeIndexLocation(containerPath);", "+\tIndex index = getIndex(indexLocation);", "+\tif (index != null) {", "+\t\tindex.monitor = null;", "+\t\tthis.indexes.removeKey(indexLocation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5ea2243d6eaff7a2591f7078db2571a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "4582114353aa3904268b70cdd42dc3781becfb01", "commitAfterChange": "7b316625d96d66e552d608c4488c77581168d213", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\t\tSystem.out.println(\"BasicSearchEngine.searchAllTypeNames(char[], char[], int, int, IJavaSearchScope, IRestrictedAccessTypeRequestor, int, IProgressMonitor)\"); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"\t- package name: \"+(packageName==null?\"null\":new String(packageName))); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tSystem.out.println(\"\t- type name: \"+(typeName==null?\"null\":new String(typeName))); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tSystem.out.println(\"\t- match rule: \"+getMatchRuleString(matchRule)); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"\t- search for: \"+searchFor); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"\t- scope: \"+scope); //$NON-NLS-1$", "+\t\t\tUtil.verbose(\"BasicSearchEngine.searchAllTypeNames(char[], char[], int, int, IJavaSearchScope, IRestrictedAccessTypeRequestor, int, IProgressMonitor)\"); //$NON-NLS-1$", "+\t\t\tUtil.verbose(\"\t- package name: \"+(packageName==null?\"null\":new String(packageName))); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tUtil.verbose(\"\t- type name: \"+(typeName==null?\"null\":new String(typeName))); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tUtil.verbose(\"\t- match rule: \"+getMatchRuleString(matchRule)); //$NON-NLS-1$", "+\t\t\tUtil.verbose(\"\t- search for: \"+searchFor); //$NON-NLS-1$", "+\t\t\tUtil.verbose(\"\t- scope: \"+scope); //$NON-NLS-1$", "+\t\t}", "+", "+\t\t// Return on invalid combination of package and type names", "+\t\tif (packageName == null || packageName.length == 0) {", "+\t\t\tif (typeName != null && typeName.length == 0) {", "+\t\t\t\tif (VERBOSE) {", "+\t\t\t\t\tUtil.verbose(\"\t=> return no result due to invalid empty values for package and type names!\"); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\treturn;", "+\t\t\t}", "-\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b84fb43401c495ccce2fee5ce63a0594", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "eccb993803d20608813b0f1e371bd918580421ea", "commitAfterChange": "ec5b9e8d70d4efa711371d5d9c1275c026c8842e", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " public void locateMatches(SearchDocument[] searchDocuments) throws CoreException", "signatureAfterChange": " public void locateMatches(SearchDocument[] searchDocuments) throws CoreException", "diff": ["+\t\tString previousPath = null;", "+\t\t\tsearchDocuments[i] = null; // free current document", "-\t\t\tif (i > 0 && pathString.equals(searchDocuments[i - 1].getPath())) {", "+\t\t\tif (i > 0 && pathString.equals(previousPath)) {", "+\t\t\tpreviousPath = pathString;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "beee1c6ff60f69dd5edbeaa14f50ca72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "fe25f265c04b05b78a3922c802443d0f290eb28d", "commitAfterChange": "24d226ada8d61f965d94976697c07601e6dce9f7", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic static ClasspathContainerInitializer getClasspathContainerInitializer(String containerID)", "signatureAfterChange": " \tpublic static ClasspathContainerInitializer getClasspathContainerInitializer(String containerID)", "diff": ["-\t\t\t\t\t\t\tSystem.out.println(\"CPContainer INIT - found initializer: \"+containerID +\" --> \" + configElements[j].getAttribute(\"class\"));//$NON-NLS-3$//$NON-NLS-2$//$NON-NLS-1$", "+\t\t\t\t\t\t\tUtil.verbose(\"CPContainer INIT - found initializer\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\tUtil.verbose(\"\tcontainer ID: \" + containerID); //$NON-NLS-1$", "+\t\t\t\t\t\t\tUtil.verbose(\"\tclass: \" + configElements[j].getAttribute(\"class\")); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\t\t\tSystem.out.println(\"CPContainer INIT - failed to instanciate initializer: \"+containerID +\" --> \" + configElements[j].getAttribute(\"class\"));//$NON-NLS-3$//$NON-NLS-2$//$NON-NLS-1$", "+\t\t\t\t\t\t\t\tUtil.verbose(\"CPContainer INIT - failed to instanciate initializer\", System.err); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tUtil.verbose(\"\tcontainer ID: \" + containerID, System.err); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tUtil.verbose(\"\tclass: \" + configElements[j].getAttribute(\"class\"), System.err); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0255c0b56459c2e0a44152f96003d39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType)", "diff": ["+\t\t\tenclosingType = this.resolvedType.enclosingType(); // if member type", "+\t\t\tif (enclosingType != null) {", "+\t\t\t\tReferenceBinding currentType = (ReferenceBinding) this.resolvedType;", "+\t\t\t\tif (currentType.isStatic() && enclosingType.isGenericType()) {", "+\t\t\t\t\tenclosingType = scope.environment().createRawType(enclosingType, enclosingType.enclosingType());", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1db9001b8d5c2ad14f448792b0e864a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "14e234724f203a6fef415e43d34432d323b84ca1", "commitAfterChange": "66e076adb0340dce3dd9bba5c2d65608184b470b", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " protected void consumeClassDeclaration()", "signatureAfterChange": " protected void consumeClassDeclaration()", "diff": ["-\tif (this.astPtr >= 0 && this.astStack[this.astPtr] instanceof TypeDeclaration) {", "-\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) this.astStack[this.astPtr];", "+\tif (this.astPtr >= 0) {", "+\t\tint length = this.astLengthStack[this.astLengthPtr];", "+\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) this.astStack[this.astPtr-length];", "+\t\tCompletionJavadocParser completionJavadocParser = (CompletionJavadocParser)this.javadocParser;", "+\t\tcompletionJavadocParser.allPossibleTags = true;", "-\t\t\t// completion is in an orphan javadoc comment => replace type declaration one with it to allow completion resolution", "+\t\t\t// completion is in an orphan javadoc comment => replace in last read declaration to allow completion resolution", "+\t\tcompletionJavadocParser.allPossibleTags = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3d14bef51b68fac0ae7a0765e567380", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "f81258aa1478d9f4440e20c76048066521e3d2ff", "commitAfterChange": "1f42dc70df8119fc362176e82c50500ff650c804", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int parentType, IJavaProject currentProject)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int parentType, IJavaProject parentProject)", "diff": ["-\tprotected boolean traverseDelta(IResourceDelta delta, int parentType, IJavaProject currentProject) {\r", "+\tprotected boolean traverseDelta(IResourceDelta delta, int parentType, IJavaProject parentProject) {\r", "+\t\tIJavaProject currentProject = parentProject;\r", "-\t\t\t\t\t\t\t\telement = this.createElement(res, elementType);\r", "+\t\t\t\t\t\t\t\tif (fullPath.equals(currentProject.getProject().getFullPath())) {\r", "+\t\t\t\t\t\t\t\t\telement = (Openable)currentProject;\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\telement = this.createElement(res, elementType);\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t// if we changed the current project or if the element type is -1, \r", "+\t\t\t// it's a non-java resource\r", "-\t\t\t\t\t&& (elementType == IJavaElement.COMPILATION_UNIT \r", "-\t\t\t\t\t\t|| elementType == IJavaElement.CLASS_FILE);\r", "+\t\t\t\t&& currentProject.equals(parentProject)\r", "+\t\t\t\t&& elementType != -1;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8f27cc1ab24b37fcb254b26ddc18f8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "fadf1abae52c545aab219b8e3a9b23913222e6c2", "commitAfterChange": "302f1877ad74fd63c3cd5c56aacc5cc510a8d88b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic ParameterizedTypeBinding(ReferenceBinding type, TypeBinding[] arguments,  ReferenceBinding enclosingType, LookupEnvironment environment)", "signatureAfterChange": " \t \tpublic ParameterizedTypeBinding(ReferenceBinding type, TypeBinding[] arguments,  ReferenceBinding enclosingType, LookupEnvironment environment)", "diff": ["+\t\tif (type.isParameterizedType() && type.isMemberType()) { // fixup instance of parameterized member type, e.g. Map<K,V>.Entry + <A,B>", "+\t\t\tenclosingType = type.enclosingType(); // use enclosing from previously parameterized", "+\t\t\ttype = (ReferenceBinding)type.erasure(); // connect to erasure of member type", "+\t\t}", "-\t\tfor (int i = 0, l = arguments == null ? 0 : arguments.length; i < l; i++)", "-\t\t\tif (arguments[i] instanceof UnresolvedReferenceBinding)", "-\t\t\t\t((UnresolvedReferenceBinding) arguments[i]).addWrapper(this);", "+\t\tif (arguments != null) {", "+\t\t\tfor (int i = 0, l = arguments.length; i < l; i++)", "+\t\t\t\tif (arguments[i] instanceof UnresolvedReferenceBinding)", "+\t\t\t\t\t((UnresolvedReferenceBinding) arguments[i]).addWrapper(this);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c911a30964ac5e3cc1c4f11252553ea0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "4e531061884dccd1317763ffc9726f3df4271477", "commitAfterChange": "9ef8b12cba5570f10f17494ebfb2357d74261c0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r protected void computeFolderChildren(IContainer folder, String prefix, ArrayList vChildren) throws JavaModelException", "signatureAfterChange": "\r protected void computeFolderChildren(IContainer folder, String prefix, ArrayList vChildren) throws JavaModelException", "diff": ["-\t\t\tif (member.getType() == IResource.FOLDER && member.getName().indexOf('.') < 0) {\r", "+\t\t\tString memberName = member.getName();\r", "+\t\t\tif (member.getType() == IResource.FOLDER \r", "+\t\t\t\t&& Util.isValidFolderNameForPackage(memberName)) {\r", "+\t\t\t\t\t\r", "-\t\t\t\t\tnewPrefix = member.getName();\r", "+\t\t\t\t\tnewPrefix = memberName;\r", "-\t\t\t\t\tnewPrefix = prefix + \".\" + member.getName(); //$NON-NLS-1$\r", "+\t\t\t\t\tnewPrefix = prefix + \".\" + memberName; //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce89ee7550c9e23ba3f3c61b2be66437", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/workspace/Converter/junit/swingui/DefaultFailureDetailView.java", "commitBeforeChange": "5f14954289dcfe3aa64cd723a9ea9807dea33e05", "commitAfterChange": "4b4449dde49cdcaed9ae00d1ac057ecfeb8d8c23", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic Component getComponent()", "signatureAfterChange": " \tpublic Component getComponent()", "diff": ["-\t\tif (fTextArea == null) {", "-\t\t\tfTextArea= new JTextArea();", "-\t\t\tfTextArea.setRows(5);", "-\t\t\tfTextArea.setTabSize(0);", "-\t\t\tfTextArea.setEditable(false);", "+\t\tif (fList == null) {", "+\t\t\tfList= new JList(new StackTraceListModel());", "+\t\t\tfList.setFont(new Font(\"Dialog\", Font.PLAIN, 12));", "+\t\t\tfList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);", "+\t\t\tfList.setVisibleRowCount(5);", "+\t\t\tfList.setCellRenderer(new StackEntryRenderer());", "-\t\treturn fTextArea;", "+\t\treturn fList;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d508f5c33aa53e7a8c9afaf64c525060", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tthis.resolvedType = lhs.resolveType(scope); // expressionType contains the assignment type (lhs Type)", "+\t\tTypeBinding lhsType = this.resolvedType = lhs.resolveType(scope);", "+\t\texpression.setExpectedType(lhsType); // needed in case of generic method invocation", "-\t\tif (this.resolvedType == null || rhsType == null) {", "+\t\tif (lhsType == null || rhsType == null) {", "-\t\t\t\t", "+", "-\t\tif ((expression.isConstantValueOfTypeAssignableToType(rhsType, this.resolvedType)", "-\t\t\t\t|| (this.resolvedType.isBaseType() && BaseTypeBinding.isWidening(this.resolvedType.id, rhsType.id)))", "-\t\t\t\t|| rhsType.isCompatibleWith(this.resolvedType)) {", "-\t\t\texpression.implicitWidening(this.resolvedType, rhsType);", "+\t\tif ((expression.isConstantValueOfTypeAssignableToType(rhsType, lhsType)", "+\t\t\t\t|| (lhsType.isBaseType() && BaseTypeBinding.isWidening(lhsType.id, rhsType.id)))", "+\t\t\t\t|| rhsType.isCompatibleWith(lhsType)) {", "+\t\t\texpression.computeConversion(scope, lhsType, rhsType);", "+\t\t\tcheckAssignment(scope, lhsType, rhsType);", "-\t\tscope.problemReporter().typeMismatchErrorActualTypeExpectedType(", "-\t\t\texpression,", "-\t\t\trhsType,", "-\t\t\tthis.resolvedType);", "-\t\treturn this.resolvedType;", "+\t\tscope.problemReporter().typeMismatchError(rhsType, lhsType, expression);", "+\t\treturn lhsType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db517a1279e36c54755a555e47dc20ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "3ed934203361f92bc6723885a6bcbaf0d8220354", "commitAfterChange": "d91e1f720567f8c9f4c6f41313738e9df1d21a2c", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \t \tpublic int generateTypeAnnotationsOnCodeAttribute()", "signatureAfterChange": " \t \tpublic int generateTypeAnnotationsOnCodeAttribute()", "diff": ["-\t\tint tableIndex = 0;", "-\t\t\tif (exceptionLabel instanceof MultiCatchExceptionLabel) {", "-\t\t\t\tMultiCatchExceptionLabel multiCatchExceptionLabel = (MultiCatchExceptionLabel)exceptionLabel;", "-\t\t\t\ttableIndex += multiCatchExceptionLabel.getAllAnnotationContexts(tableIndex, allTypeAnnotationContexts);", "-\t\t\t} else {", "-\t\t\t\tif (exceptionLabel.exceptionTypeReference != null) { // ignore those which cannot be annotated", "-\t\t\t\t\texceptionLabel.exceptionTypeReference.getAllAnnotationContexts(AnnotationTargetTypeConstants.EXCEPTION_PARAMETER, tableIndex, allTypeAnnotationContexts);", "-\t\t\t\t}", "-\t\t\t\ttableIndex++;", "+\t\t\tif (exceptionLabel.exceptionTypeReference != null && (exceptionLabel.exceptionTypeReference.bits & ASTNode.HasTypeAnnotations) != 0) {", "+\t\t\t\texceptionLabel.exceptionTypeReference.getAllAnnotationContexts(AnnotationTargetTypeConstants.EXCEPTION_PARAMETER, i, allTypeAnnotationContexts);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd5d83203596942d3db49608bbc36f9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "76151cbb6d5be9d202d132a0aebac08650654b55", "commitAfterChange": "4905ae3917d4332c423e065348e4c2372d3de33d", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " public void generateSyntheticArgumentValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "signatureAfterChange": " public void generateSyntheticArgumentValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "diff": ["-\t// generate the enclosing instance first", "+\t\tboolean hasExtraEnclosingInstance = enclosingInstance != null;", "+\t\t", "-\t\t\tif (enclosingInstance != null && i == 0) {", "-\t\t\t\tif (syntheticArgType != targetEnclosingType) {", "-\t\t\t\t\tcurrentScope.problemReporter().unnecessaryEnclosingInstanceSpecification(enclosingInstance, targetType);", "-\t\t\t\t}", "-\t\t\t\t//if (currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4){", "+\t\t\tif (hasExtraEnclosingInstance && syntheticArgType == targetEnclosingType) {", "+\t\t\t\thasExtraEnclosingInstance = false;", "-\t\t\t\tif (syntheticArgType == targetEnclosingType){", "-\t\t\t\t\tthis.dup();", "-\t\t\t\t} ", "+\t\t\t\tthis.dup();", "-\t\t\t\t//} else {", "-\t\t\t\t//\tenclosingInstance.generateCode(currentScope, this, syntheticArgType == targetEnclosingType);", "-\t\t\t\t//}\t\t\t", "+\t\tif (hasExtraEnclosingInstance){", "+\t\t\tcurrentScope.problemReporter().unnecessaryEnclosingInstanceSpecification(enclosingInstance, targetType);", "+\t\t}", "-\t\t\t//if (currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4){", "-\t\t\t//} else {", "-\t\t\t//\tenclosingInstance.generateCode(currentScope, this, false); // do not want the value", "-\t\t\t//}\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de1d400c7740fe044714b0ae6cca1b0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/CompilationResult.java", "commitBeforeChange": "88fda3edbb235ca07ba1c50b6885e3cd0955511a", "commitAfterChange": "7a0eeabd4ef65d663065e6e9858078d5d965a31e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  public void record(CategorizedProblem newProblem, ReferenceContext referenceContext)", "signatureAfterChange": " public void record(char[] typeName, ClassFile classFile)", "diff": ["-\trecord(newProblem, referenceContext, true);", "-\treturn;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df64fca50a8d927c99dbf3b49cd70de1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "c6083a2d48fa11ffa1e9554a2f00be6af36feafe", "commitAfterChange": "6dbe2813dd7277bd2252f3441ba09237b6b43790", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " private void scanTypeForNullDefaultAnnotation(IBinaryType binaryType, PackageBinding packageBinding)", "signatureAfterChange": " private void scanTypeForNullDefaultAnnotation(IBinaryType binaryType, PackageBinding packageBinding)", "diff": ["-\t\t\tchar[][] typeName = signature2qualifiedTypeName(annotationTypeName);", "-\t\t\tif (CharOperation.equals(typeName, nonNullByDefaultAnnotationName)) {", "+\t\t\tint typeBit = this.environment.getNullAnnotationBit(signature2qualifiedTypeName(annotationTypeName));", "+\t\t\tif (typeBit == TypeIds.BitNonNullByDefaultAnnotation) {", "+\t\t\t\t\tif (nullness == Binding.NONNULL_BY_DEFAULT && this.environment.usesNullTypeAnnotations()) {", "+\t\t\t\t\t\t// reading a decl-nnbd in a project using type annotations, mimic corresponding semantics by enumerating:", "+\t\t\t\t\t\tnullness |= Binding.DefaultLocationParameter | Binding.DefaultLocationReturnType | Binding.DefaultLocationField;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e39a3c1829b14bea0af87d60b212306d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/SpacePreparator.java", "commitBeforeChange": "bb7b9521196186c5be108c1f350a453c12233137", "commitAfterChange": "871cac4ba4cecfc6322ce0af5777177652a514a9", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "\r \r \t@Override\r \tpublic boolean visit(Block node)", "signatureAfterChange": "\r \r \t@Override\r \tpublic boolean visit(Block node)", "diff": ["-\t\t\tif (closeBraceIndex + 1 < this.tm.size()\r", "-\t\t\t\t\t&& this.tm.get(closeBraceIndex + 1).tokenType != TokenNameSEMICOLON)\r", "-\t\t\t\tthis.tm.get(closeBraceIndex).spaceAfter();\r", "+\t\t\tif (closeBraceIndex + 1 < this.tm.size()) {\r", "+\t\t\t\tint nextToken = this.tm.get(closeBraceIndex + 1).tokenType;\r", "+\t\t\t\tif (nextToken != TokenNameSEMICOLON && nextToken != TokenNameRPAREN)\r", "+\t\t\t\t\tthis.tm.get(closeBraceIndex).spaceAfter();\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e58d47b52ae94c2805e7904af447ca12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "22e4a3a51dab58eac41eb2aeee987914d9aa2e95", "commitAfterChange": "f1d71cfca3ffb7ac112e114ead9ea1434be4f21e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public JavaElementInfo getElementInfo() throws JavaModelException", "signatureAfterChange": "\r public JavaElementInfo getElementInfo() throws JavaModelException", "diff": ["-\tsynchronized(JavaModelManager.getJavaModelManager()){\r", "-\t\tObject info = JavaModelManager.getJavaModelManager().getInfo(this);\r", "+\tJavaModelManager manager;\r", "+\tsynchronized(manager = JavaModelManager.getJavaModelManager()){\r", "+\t\tObject info = manager.getInfo(this);\r", "-\t\t\tinfo= JavaModelManager.getJavaModelManager().getInfo(this);\r", "+\t\t\tinfo= manager.getInfo(this);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e66bc44f6e1bbeb11996b752b17161ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 86, "signatureBeforeChange": " public void boundHasConflictingArguments(ASTNode location, TypeBinding type)", "signatureAfterChange": " public void enumStaticFieldUsedDuringInitialization(FieldBinding field, ASTNode location)", "diff": ["-public void boundHasConflictingArguments(ASTNode location, TypeBinding type) {", "-\tthis.handle(", "-\t\tIProblem.BoundHasConflictingArguments,", "-\t\tnew String[] {new String(type.readableName())},", "-\t\tnew String[] {new String(type.shortReadableName())},", "-\t\tlocation.sourceStart,", "-\t\tlocation.sourceEnd);", "-}", "+public void enumStaticFieldUsedDuringInitialization(FieldBinding field, ASTNode location) {", "+\tthis.handle(", "+\t\tIProblem.EnumStaticFieldInInInitializerContext,", "+\t\tnew String[] {new String(field.declaringClass.readableName()), new String(field.name)},", "+\t\tnew String[] {new String(field.declaringClass.shortReadableName()), new String(field.name)},", "+\t\tfieldSourceStart(field, location),", "+\t\tfieldSourceEnd(field, location));", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8b272b2ab8df0033b2f2629d3ef0c55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "74958747d6dfa7074d7be26e7090f615c8b5cb63", "commitAfterChange": "2d759a713e644c7b941823a3d4e9e44e73ef6b04", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": " private void computeInheritedMethods()", "signatureAfterChange": " private void computeInheritedMethods()", "diff": ["-\t\t\tMethodBinding[] methods = superType.methods();", "+\t\t\tMethodBinding[] methods = superType.unResolvedMethods();", "-\t\t\t\t\t\t\tif (method.returnType == existingMethods[i].returnType && method.areParametersEqual(existingMethods[i])) {", "+\t\t\t\t\t\t\tif (areTypesEqual(method.returnType, existingMethods[i].returnType) && areParametersEqual(method, existingMethods[i])) {", "-\t\t\t\t\t\t\tif (method.returnType == nonVisibleDefaultMethods[i].returnType", "+\t\t\t\t\t\t\tif (areTypesEqual(method.returnType, nonVisibleDefaultMethods[i].returnType)", "-\t\t\t\t\t\t\t\t&& method.areParametersEqual(nonVisibleDefaultMethods[i])) ", "+\t\t\t\t\t\t\t\t&& areParametersEqual(method, nonVisibleDefaultMethods[i])) ", "-\t\t\t\t\t\t\t\tif (method.returnType == current[i].returnType && method.areParametersEqual(current[i])) {", "+\t\t\t\t\t\t\t\tif (areTypesEqual(method.returnType, current[i].returnType) && areParametersEqual(method, current[i])) {", "-\t\t\t\t\tMethodBinding[] methods = superType.methods();", "+\t\t\t\t\tMethodBinding[] methods = superType.unResolvedMethods();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaf0c0a1221dc8858a6764edd94acbec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "fe25f265c04b05b78a3922c802443d0f290eb28d", "commitAfterChange": "24d226ada8d61f965d94976697c07601e6dce9f7", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tpublic static void setClasspathContainer(final IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic static void setClasspathContainer(final IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\tSystem.out.println(\"CPContainer SET  - setting container: [\"+containerPath+\"] for projects: {\" //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t+ (org.eclipse.jdt.internal.compiler.util.Util.toString(affectedProjects, ", "-\t\t\t\t\t\tnew org.eclipse.jdt.internal.compiler.util.Util.Displayable(){ ", "-\t\t\t\t\t\t\tpublic String displayString(Object o) { return ((IJavaProject) o).getElementName(); }", "-\t\t\t\t\t\t}))", "-\t\t\t\t+ \"} with values: \" //$NON-NLS-1$", "-\t\t\t\t+ (org.eclipse.jdt.internal.compiler.util.Util.toString(respectiveContainers, ", "+\t\t\tUtil.verbose(\"CPContainer SET  - setting container\"); //$NON-NLS-1$", "+\t\t\tUtil.verbose(\"\tcontainer path: \" + containerPath); //$NON-NLS-1$", "+\t\t\tUtil.verbose(", "+\t\t\t\t\"\tprojects: {\" //$NON-NLS-1$", "+\t\t\t\t+ org.eclipse.jdt.internal.compiler.util.Util.toString( ", "+\t\t\t\t\taffectedProjects, ", "+\t\t\t\t\tnew org.eclipse.jdt.internal.compiler.util.Util.Displayable(){ ", "+\t\t\t\t\t\tpublic String displayString(Object o) { return ((IJavaProject) o).getElementName(); }", "+\t\t\t\t\t})", "+\t\t\t\t+ \"}\"); //$NON-NLS-1$", "+\t\t\tUtil.verbose(", "+\t\t\t\t\"\tvalues: {\" //$NON-NLS-1$", "+\t\t\t\t+ org.eclipse.jdt.internal.compiler.util.Util.toString(", "+\t\t\t\t\t\trespectiveContainers, ", "-\t\t\t\t\t\t}))", "-\t\t\t\t\t);", "+\t\t\t\t\t\t})", "+\t\t\t\t+ \"}\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\tSystem.out.println(\"CPContainer INIT - reentering access to project container: [\"+affectedProject.getElementName()+\"] \" + containerPath + \" during its initialization, will see previous value: \"+ previousContainer.getDescription()); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\t\t\tUtil.verbose(\"CPContainer INIT - reentering access to project container during its initialization, will see previous value\"); //$NON-NLS-1$ ", "+\t\t\t\t\t\t\tUtil.verbose(\"\tproject: \" + affectedProject.getElementName()); //$NON-NLS-1$", "+\t\t\t\t\t\t\tUtil.verbose(\"\tcontainer path: \" + containerPath); //$NON-NLS-1$", "+\t\t\t\t\t\t\tUtil.verbose(\"\tprevious value: \" + previousContainer.getDescription()); //$NON-NLS-1$", "-\t\t\t\t\t\t\tSystem.out.println(\"CPContainer SET  - updating affected project: [\"+affectedProject.getElementName()+\"] due to setting container: \" + containerPath); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t\tUtil.verbose(\"CPContainer SET  - updating affected project due to setting container\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\tUtil.verbose(\"\tproject: \" + affectedProject.getElementName()); //$NON-NLS-1$", "+\t\t\t\t\t\t\tUtil.verbose(\"\tcontainer path: \" + containerPath); //$NON-NLS-1$", "-\t\t\t\tSystem.out.println(\"CPContainer SET  - FAILED DUE TO EXCEPTION: \"+containerPath); //$NON-NLS-1$", "+\t\t\t\tUtil.verbose(\"CPContainer SET  - FAILED DUE TO EXCEPTION\", System.err); //$NON-NLS-1$", "+\t\t\t\tUtil.verbose(\"\tcontainer path: \" + containerPath, System.err); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee4dd75e9a91af53665e7487f59eeb19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DiscardWorkingCopyOperation.java", "commitBeforeChange": "ec455405a83bfb36b65a1594dcc37928d4b0bc3b", "commitAfterChange": "79b8d8f9507454c772f9092ea04ba032447d4b59", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\tint useCount = JavaModelManager.getJavaModelManager().discardPerWorkingCopyInfo(workingCopy);", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tint useCount = manager.discardPerWorkingCopyInfo(workingCopy);", "+\t\t\tIJavaProject javaProject = workingCopy.getJavaProject();", "+\t\t\tif (ExternalJavaProject.EXTERNAL_PROJECT_NAME.equals(javaProject.getElementName()))", "+\t\t\t\tmanager.removePerProjectInfo((JavaProject) javaProject);", "-\t\t\t\tJavaElementDelta delta = new JavaElementDelta(this.getJavaModel());", "+\t\t\t\tJavaElementDelta delta = new JavaElementDelta(getJavaModel());", "-\t\t\t\t\tJavaElementDelta delta = new JavaElementDelta(this.getJavaModel());", "+\t\t\t\t\tJavaElementDelta delta = new JavaElementDelta(getJavaModel());", "-\t\t\t\t\tJavaElementDelta delta = new JavaElementDelta(this.getJavaModel());", "+\t\t\t\t\tJavaElementDelta delta = new JavaElementDelta(getJavaModel());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1c27eb07de17306a31c7d97ab77da8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "a97d6cfe4321b5c45bce6a9e682825ee765b8f5b", "commitAfterChange": "a51f0328f1978f4c547fe994573879b0bcceba88", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, int nullStatus)", "signatureAfterChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, int nullStatus)", "diff": ["-\t\t\t\t\tNullAnnotationMatching status = analyse(((WildcardBinding) requiredType).bound, providedType, nullStatus);", "-\t\t\t\t\tseverity = Math.max(severity, status.severity);", "+\t\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) requiredType;", "+\t\t\t\t\tif (wildcardBinding.bound != null) {", "+\t\t\t\t\t\tNullAnnotationMatching status = analyse(wildcardBinding.bound, providedType, nullStatus);", "+\t\t\t\t\t\tseverity = Math.max(severity, status.severity);", "+\t\t\t\t\t}", "+\t\t\t\t\t// TODO(stephan): what about otherBounds? Do we accept \"? extends @NonNull I1 & @Nullable I2\" in the first place??"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2d04412ba06e0fba701ecd642690759", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 23, "signatureBeforeChange": "  TypeBinding getTypeFromSignature(char[] signature, int start, int end)", "signatureAfterChange": "  TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType)", "diff": ["-TypeBinding getTypeFromSignature(char[] signature, int start, int end) {", "+TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType) {", "-\t\t\t\tthrow new Error(Util.bind(\"error.undefinedBaseType\",String.valueOf(signature[start]))); //$NON-NLS-1$", "+\t\t\t\tproblemReporter.corruptedSignature(enclosingType, signature, start);", "+\t\t\t\t// will never reach here, since error will cause abort", "-\t\tbinding = getTypeFromConstantPoolName(signature, start + 1, end);", "+\t\tbinding = getTypeFromConstantPoolName(signature, start + 1, end, isParameterized);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4165247a5310a9a042a5d56a3430b55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "8d011b03381d3efb22f096963964840a728e892c", "commitAfterChange": "637d66e0d1e2e285ddeeaf1de62c4418b17f95fd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void resolve(MethodScope initializationScope)", "signatureAfterChange": " \t \tpublic void resolve(MethodScope initializationScope)", "diff": ["-\t\t\t\tif (checkLocal && declaringType.enclosingType() != null) {", "+\t\t\t\tif (checkLocal) {", "-\t\t\t\t\tBinding existingVariable = outerScope.getBinding(this.name, Binding.VARIABLE, this, false /*do not resolve hidden field*/);", "-\t\t\t\t\tif (existingVariable != null && this.binding != existingVariable && existingVariable.isValidBinding()", "-\t\t\t\t\t\t\t&& (!(existingVariable instanceof FieldBinding)", "-\t\t\t\t\t\t\t\t\t|| ((FieldBinding) existingVariable).isStatic() ", "-\t\t\t\t\t\t\t\t\t|| !declaringType.isStatic())) {", "-\t\t\t\t\t\tinitializationScope.problemReporter().fieldHiding(this, existingVariable);", "+\t\t\t\t\tif (outerScope.kind != Scope.COMPILATION_UNIT_SCOPE) {", "+\t\t\t\t\t\tBinding existingVariable = outerScope.getBinding(this.name, Binding.VARIABLE, this, false /*do not resolve hidden field*/);", "+\t\t\t\t\t\tif (existingVariable != null && this.binding != existingVariable && existingVariable.isValidBinding()", "+\t\t\t\t\t\t\t\t&& (!(existingVariable instanceof FieldBinding)", "+\t\t\t\t\t\t\t\t\t\t|| ((FieldBinding) existingVariable).isStatic() ", "+\t\t\t\t\t\t\t\t\t\t|| !declaringType.isStatic())) {", "+\t\t\t\t\t\t\tinitializationScope.problemReporter().fieldHiding(this, existingVariable);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f42a06aab7592f3c8990c13dc7543177", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "5d09030a4eea6e88d96c48a37fd08714b86feb1d", "commitAfterChange": "77d3927a953fc7e4ba6e187e964dd7fecc4afe1d", "methodNumberBeforeChange": 513, "methodNumberAfterChange": 513, "signatureBeforeChange": " public void testBug181488a() throws CoreException", "signatureAfterChange": " public void testBug181488a() throws CoreException", "diff": ["-\tlong lastModified = index.getIndexFile().lastModified();", "-\tsimulateExitRestart();", "+\tFile indexFile = index.getIndexFile();", "+\tsimulateExit();", "+\tlong lastModified = indexFile.lastModified();", "+\tsimulateRestart();", "-\t// TODO (frederic) Verify this test result on releng build to know whether it continues to fail or not", "-\tthis.abortOnFailure = false;", "-\tassumeEquals(\"Index file should be unchanged!!!\", lastModified, newIndex.getIndexFile().lastModified());", "+\tassertEquals(\"Index file should be unchanged!!!\", lastModified, newIndex.getIndexFile().lastModified());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6c202930c996f58fda9cb0c28ae71c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6e8c555a7d6f504d4ea246c591d5bb3f080d438", "commitAfterChange": "3316f207e855c46fb5e805791239fa37620ca8c4", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 26, "signatureBeforeChange": " public synchronized void removeIndex(IPath containerPath)", "signatureAfterChange": " public synchronized void removeIndex(IPath containerPath)", "diff": ["-\tString indexLocation = computeIndexLocation(containerPath);", "-\tFile indexFile = new File(indexLocation);", "+\tIPath indexLocation = computeIndexLocation(containerPath);", "+\tIndex index = getIndex(indexLocation);", "+\tFile indexFile = null;", "+\tif (index != null) {", "+\t\tindex.monitor = null;", "+\t\tindexFile = index.getIndexFile();", "+\t}", "+\tif (indexFile == null)", "+\t\tindexFile = new File(indexLocation.toOSString()); // index is not cached yet, but still want to delete the file", "-\tObject o = this.indexes.get(indexLocation);", "-\tif (o instanceof Index)", "-\t\t((Index) o).monitor = null;", "-\tthis.indexes.remove(indexLocation);", "+\tthis.indexes.removeKey(indexLocation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8e1e8c1eef46a1bf10a584a5eaabba7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java", "commitBeforeChange": "a553ab0efc253750fd6fd20126423a55431b0462", "commitAfterChange": "c37a92566081779e57ec58244a049f41ef8eac6b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\t \t \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": "\t \t \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope)", "diff": ["-\t\t// need assertion flag: $assertionsDisabled on outer most source type", "-\t\tClassScope outerMostClassScope = currentScope.outerMostClassScope();", "-\t\tSourceTypeBinding sourceTypeBinding = outerMostClassScope.enclosingSourceType();", "-\t\tthis.assertionSyntheticFieldBinding = sourceTypeBinding.addSyntheticField(this, currentScope);", "+\t\t// need assertion flag: $assertionsDisabled on outer most source clas", "+\t\t// (in case of static member of interface, will use the outermost static member - bug 22334)", "+\t\tSourceTypeBinding outerMostClass = currentScope.enclosingSourceType();", "+\t\twhile (outerMostClass.isNestedType()){", "+\t\t\tReferenceBinding enclosing = outerMostClass.enclosingType();", "+\t\t\tif (enclosing == null || enclosing.isInterface()) break;", "+\t\t\touterMostClass = (SourceTypeBinding) enclosing;", "+\t\t}", "+", "+\t\tthis.assertionSyntheticFieldBinding = outerMostClass.addSyntheticField(this, currentScope);", "-\t\tTypeDeclaration typeDeclaration = outerMostClassScope.referenceType();", "+\t\tTypeDeclaration typeDeclaration = outerMostClass.scope.referenceType();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f99e86b38adb6706e6ab1797de65134e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "f04f8b342c7b71da1a56858ab790d24d761e7d9c", "commitAfterChange": "cb9adfe2a810fff7861c89a641a842e760d0d109", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate IFile getIFileForTypeName( String typeName ) \t    throws CoreException", "signatureAfterChange": " \tprivate IFile getIFileForTypeName( String typeName, IJavaProject javaProject, IProgressMonitor progressMonitor ) \t    throws CoreException", "diff": ["-\tprivate IFile getIFileForTypeName( String typeName )", "+\tprivate IFile getIFileForTypeName( String typeName, IJavaProject javaProject, IProgressMonitor progressMonitor )", "-", "-\t\tIFolder folder = _project.getFolder( GENERATED_SOURCE_FOLDER_NAME );", "-\t\tif (!folder.exists())", "-\t\t\tfolder.create(true, false, null);", "+\t\t", "+\t\tIFolder folder = ensureGeneratedSourceFolder( javaProject, progressMonitor );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd760a7232ffeff8a987b3a1fc7907df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "6c16279776a9d4d3bb77771278cb12f54d9affa3", "commitAfterChange": "bc7a22c71b140b80201d8c50a10c85725952881d", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError, \t\tboolean returnResolutionInProgress) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError, \t\tboolean returnResolutionInProgress) \t\tthrows JavaModelException", "diff": ["+\t    JavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t\t\tif (infoPath != null && (returnResolutionInProgress || infoPath != RESOLUTION_IN_PROGRESS)) {", "-\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE) {", "-\t\t\t\t\t\tif (infoPath == RESOLUTION_IN_PROGRESS) {", "-\t\t\t\t\t\t    Util.verbose(\"CPResolution: Reentering Raw Classpath Resolution for project: \"+ this.getElementName() + \"\\n  will use empty classpath instead\");  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\t    new Exception(\"TRACE OF REENTERING CALL\").printStackTrace(System.out);  //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\tif (infoPath != null) {", "+\t\t\t\t} else if  (returnResolutionInProgress && manager.isClasspathBeingResolved(this)) {", "+\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE) {", "+\t\t\t\t\t\tUtil.verbose(", "+\t\t\t\t\t\t\t\"CPResolution: reentering raw classpath resolution, will use empty classpath instead\" + //$NON-NLS-1$", "+\t\t\t\t\t\t\t\"\tproject: \" + getElementName() + '\\n' + //$NON-NLS-1$", "+\t\t\t\t\t\t\t\"\tinvocation stack trace:\"); //$NON-NLS-1$", "+\t\t\t\t\t\tnew Exception(\"<Fake exception>\").printStackTrace(System.out); //$NON-NLS-1$", "+\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t    return RESOLUTION_IN_PROGRESS;", "-\t\t\tif (nullOldResolvedCP) perProjectInfo.resolvedClasspath = RESOLUTION_IN_PROGRESS;", "+\t\t\tif (nullOldResolvedCP) manager.setClasspathBeingResolved(this, true);", "+\t\t\tmanager.setClasspathBeingResolved(this, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fef4dc362fe0c2f28b81ee898a4a063b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "38deed784ce291d43d3c53414da1ee3c4ed08415", "commitAfterChange": "644852dd87f43f0af4108905e62d50729f9b044b", "methodNumberBeforeChange": 177, "methodNumberAfterChange": 178, "signatureBeforeChange": " public void invalidField(FieldReference fieldRef, TypeBinding searchedType)", "signatureAfterChange": " public void invalidField(FieldReference fieldRef, TypeBinding searchedType)", "diff": ["-\tfinal int sourceStart= (int) (fieldRef.nameSourcePosition >> 32);", "-\t\t\t\tsourceStart,", "-\t\t\t\tfieldRef.sourceEnd);\t\t\t", "+\t\t\t\tfieldSourceStart(field, fieldRef),", "+\t\t\t\tfieldSourceEnd(field, fieldRef));\t\t\t", "-\t\tsourceStart,", "-\t\tfieldRef.sourceEnd);", "+\t\tfieldSourceStart(field, fieldRef),", "+\t\tfieldSourceEnd(field, fieldRef));"]}], "num": 53574}
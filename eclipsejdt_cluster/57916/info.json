{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b7cae1ff6352305c65e812573bb2340", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "842ba49870993eab9cbba84a487539e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "c93b7fc02953335388042ab5bd4ec34f70464821", "commitAfterChange": "c9213ae595dd32af0d2b3bd7c31b733e8b1d0dd1", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal int packageMatchRule,  \t\tfinal char[] typeName, \t\tfinal int typeMatchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal int packageMatchRule,  \t\tfinal char[] typeName, \t\tfinal int typeMatchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\t\t\t\tICompilationUnit workingCopy = copies[i];", "+\t\t\t\t\tfinal ICompilationUnit workingCopy = copies[i];", "-\t\t\t\t\t\t\t\tnameRequestor.acceptType(type.getFlags(), packageDeclaration, simpleName, enclosingTypeNames, path, null);", "+\t\t\t\t\t\t\t\tif (nameRequestor instanceof TypeNameMatchRequestorWrapper) {", "+\t\t\t\t\t\t\t\t\t((TypeNameMatchRequestorWrapper)nameRequestor).requestor.acceptTypeNameMatch(new TypeNameMatch(type));", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tnameRequestor.acceptType(type.getFlags(), packageDeclaration, simpleName, enclosingTypeNames, path, null);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptType(typeDeclaration.modifiers, packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path, null);", "+\t\t\t\t\t\t\t\t\t\tif (nameRequestor instanceof TypeNameMatchRequestorWrapper) {", "+\t\t\t\t\t\t\t\t\t\t\tIType type = workingCopy.getType(new String(typeName));", "+\t\t\t\t\t\t\t\t\t\t\t((TypeNameMatchRequestorWrapper)nameRequestor).requestor.acceptTypeNameMatch(new TypeNameMatch(type, typeDeclaration.modifiers));", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptType(typeDeclaration.modifiers, packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path, null);", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptType(memberTypeDeclaration.modifiers, packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path, null);", "+\t\t\t\t\t\t\t\t\t\tif (nameRequestor instanceof TypeNameMatchRequestorWrapper) {", "+\t\t\t\t\t\t\t\t\t\t\tIType type = workingCopy.getType(new String(enclosingTypeNames[0]));", "+\t\t\t\t\t\t\t\t\t\t\tfor (int j=1, l=enclosingTypeNames.length; j<l; j++) {", "+\t\t\t\t\t\t\t\t\t\t\t\ttype = type.getType(new String(enclosingTypeNames[j]));", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t((TypeNameMatchRequestorWrapper)nameRequestor).requestor.acceptTypeNameMatch(new TypeNameMatch(type, 0));", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptType(memberTypeDeclaration.modifiers, packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path, null);", "+\t\t\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f21cc518e7ef20a14bbe643a3f78a8ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "287a8246425dec3b8e6cdd428f661326776e45cd", "commitAfterChange": "058b7e49b52c7b18f15a01083d7620b3d5aa8490", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "signatureAfterChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "diff": ["-\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalType(", "-\t\t\t\t\t\t(SourceTypeBinding)typeBinding,", "-\t\t\t\t\t\tparsedUnit);", "+\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalType((SourceTypeBinding)typeBinding);", "-\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalType(", "-\t\t\t\t\t\t(SourceTypeBinding)original,", "-\t\t\t\t\t\tparsedUnit);", "+\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalType((SourceTypeBinding)original);", "-\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalType(", "-\t\t\t\t\t\t(SourceTypeBinding)typeBinding,", "-\t\t\t\t\t\tparsedUnit);", "+\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalType((SourceTypeBinding)typeBinding);", "-\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalMethod(", "-\t\t\t\t\t\t(SourceTypeBinding)declaringClass,", "-\t\t\t\t\t\tmethodBinding.isConstructor()", "-\t\t\t\t\t\t\t? declaringClass.sourceName()", "-\t\t\t\t\t\t\t: methodBinding.selector,", "-\t\t\t\t\t\tparameterPackageNames,", "-\t\t\t\t\t\tparameterTypeNames,", "-\t\t\t\t\t\tparameterSignatures,", "-\t\t\t\t\t\tmethodBinding.isConstructor(),", "-\t\t\t\t\t\tparsedUnit,", "-\t\t\t\t\t\tisDeclaration,", "-\t\t\t\t\t\tthis.actualSelectionStart,", "-\t\t\t\t\t\tthis.actualSelectionEnd);", "+\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalMethod(methodBinding);", "-\t\t\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalField(", "-\t\t\t\t\t\t\t\t(SourceTypeBinding)declaringClass,", "-\t\t\t\t\t\t\t\tfieldBinding.name,", "-\t\t\t\t\t\t\t\tparsedUnit);", "+\t\t\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalField(fieldBinding);", "-\t\t\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalVariable(", "-\t\t\t\t\t\t\t\t(LocalVariableBinding)binding,", "-\t\t\t\t\t\t\t\tparsedUnit);", "+\t\t\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalVariable((LocalVariableBinding)binding);"]}], "num": 57916}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "211e686bdc9db33b9307dd55149341e6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78f8858a8aa7747a9476c1796c368216", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 8, "signatureBeforeChange": " private final static void buildFileOfByteFor(String filename, String tag, String[] tokens) throws java.io.IOException", "signatureAfterChange": " private final static byte[] buildFileOfByteFor(String filename, String tag, String[] tokens) throws java.io.IOException", "diff": ["-private final static void buildFileOfByteFor(String filename, String tag, String[] tokens) throws java.io.IOException {", "-", "-\t//transform the String tokens into chars before dumping then into file", "-", "-\tint i = 0;", "-\t//read upto the tag", "-\twhile (!tokens[i++].equals(tag)){/*empty*/}", "-\t//read upto the }", "-\t", "-\tbyte[] bytes = new byte[tokens.length]; //can't be bigger", "-\tint ic = 0;", "-\tString token;", "-\twhile (!(token = tokens[i++]).equals(\"}\")) { //$NON-NLS-1$", "-\t\tint c = Integer.parseInt(token);", "-\t\tbytes[ic++] = (byte) c;", "-", "-\t//resize", "-\tSystem.arraycopy(bytes, 0, bytes = new byte[ic], 0, ic);", "-", "-\tbuildFileForTable(filename, bytes);", "-}", "+private final static byte[] buildFileOfByteFor(String filename, String tag, String[] tokens) throws java.io.IOException {", "+", "+\t//transform the String tokens into chars before dumping then into file", "+", "+\tint i = 0;", "+\t//read upto the tag", "+\twhile (!tokens[i++].equals(tag)){/*empty*/}", "+\t//read upto the }", "+\t", "+\tbyte[] bytes = new byte[tokens.length]; //can't be bigger", "+\tint ic = 0;", "+\tString token;", "+\twhile (!(token = tokens[i++]).equals(\"}\")) { //$NON-NLS-1$", "+\t\tint c = Integer.parseInt(token);", "+\t\tbytes[ic++] = (byte) c;", "+\t}", "+", "+\t//resize", "+\tSystem.arraycopy(bytes, 0, bytes = new byte[ic], 0, ic);", "+", "+\tbuildFileForTable(filename, bytes);", "+\treturn bytes;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2f9d36348ff83dc347e2afa68066f98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/AccessRuleSet.java", "commitBeforeChange": "62c9620b63ae6fa2c48ceb42b29f470694792f4c", "commitAfterChange": "01d1946f12389d8b4d0ba023c73ac45a21c8741a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic AccessRestriction getViolatedRestriction(char[] targetTypeFilePath)", "signatureAfterChange": " public AccessRestriction getViolatedRestriction(char[] targetTypeFilePath)", "diff": ["-\t */", "-\tpublic AccessRestriction getViolatedRestriction(char[] targetTypeFilePath) {", "-\t\t", "-\t\tfor (int i = 0, length = this.accessRules.length; i < length; i++) {", "-\t\t\tAccessRule accessRule = this.accessRules[i];", "-\t\t\tif (CharOperation.pathMatch(accessRule.pattern, targetTypeFilePath, true/*case sensitive*/, '/')) {", "-\t\t\t\tswitch (accessRule.problemId) {", "-\t\t\t\t\tcase IProblem.ForbiddenReference:", "-\t\t\t\t\tcase IProblem.DiscouragedReference:", "-\t\t\t\t\t\treturn new AccessRestriction(accessRule, this.messageTemplate);", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t}", "+ */", "+public AccessRestriction getViolatedRestriction(char[] targetTypeFilePath) {", "+\tif (File.separatorChar == '\\\\') {", "+\t\ttargetTypeFilePath = CharOperation.replaceOnCopy(targetTypeFilePath,", "+\t\t\t\tFile.separatorChar, '/');", "+\t}", "+\tfor (int i = 0, length = this.accessRules.length; i < length; i++) {", "+\t\tAccessRule accessRule = this.accessRules[i];", "+\t\tif (CharOperation.pathMatch(accessRule.pattern, targetTypeFilePath, ", "+\t\t\t\ttrue/*case sensitive*/, '/')) {", "+\t\t\tswitch (accessRule.problemId) {", "+\t\t\t\tcase IProblem.ForbiddenReference:", "+\t\t\t\tcase IProblem.DiscouragedReference:", "+\t\t\t\t\treturn new AccessRestriction(accessRule, this.messageTemplate);", "+\t\t\t\tdefault:", "+\t\t\t\t\treturn null;", "-\t\treturn null;", "+\treturn null;", "+}"]}], "num": 58108}
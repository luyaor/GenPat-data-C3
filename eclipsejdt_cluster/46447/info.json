{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52c3989cdb7167d2c44eb5bee1b04960", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0de051081e452815ab7f01f1549391fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "a725c7050ef02b8e240004926fb73e6f29767ffe", "commitAfterChange": "a8e18c32dc806d659bf5d8f2444be6f4268510d4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic char[] computeUniqueKey()", "signatureAfterChange": " \t \tpublic char[] computeUniqueKey()", "diff": ["+\t\t} else if(this.type.isLocalType()){", "+\t\t\tLocalTypeBinding localTypeBinding = (LocalTypeBinding) this.type;", "+\t\t\tReferenceBinding enclosing = localTypeBinding.enclosingType();", "+\t\t\tReferenceBinding temp;", "+\t\t\twhile ((temp = enclosing.enclosingType()) != null)", "+\t\t\t\tenclosing = temp;", "+\t\t\tchar[] typeSig = enclosing.signature();", "+\t\t    for (int i = 0; i < typeSig.length-1; i++) sig.append(typeSig[i]); // copy all but trailing semicolon", "+\t\t\tsig.append('$');", "+\t\t\tsig.append(localTypeBinding.sourceStart);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1827cd83da96e3c23ecf1ba837e1d4af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "575e550c3da950f3c54755e34320456663152397", "commitAfterChange": "f263f2ef7943b444a7df1ecbae4d4e44696c99a8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public char[] computeGenericTypeSignature(TypeVariableBinding[] typeVariables)", "signatureAfterChange": " public char[] computeGenericTypeSignature(TypeVariableBinding[] typeVariables)", "diff": ["-    if (typeVariables == NoTypeVariables) {", "-        return signature();", "-    } else {", "-\t    char[] typeSig = signature();", "-\t    StringBuffer sig = new StringBuffer(10);", "+", "+\tboolean isMemberOfGeneric = isMemberType() && (enclosingType().modifiers & AccGenericSignature) != 0;", "+\tif (typeVariables == NoTypeVariables && !isMemberOfGeneric) {", "+\t\treturn signature();", "+\t}", "+\tStringBuffer sig = new StringBuffer(10);", "+\tif (isMemberOfGeneric) {", "+\t    char[] typeSig = enclosingType().genericTypeSignature();", "+\t    sig.append('.'); // NOTE: cannot override trailing ';' with '.' in enclosing signature, since shared char[]", "+\t    sig.append(this.sourceName);", "+\t}\telse {", "+\t    char[] typeSig = signature();", "+\t    for (int i = 0; i < typeSig.length-1; i++) { // copy all but trailing semicolon", "+\t    \tsig.append(typeSig[i]);", "+\t    }", "+\t}", "+\tif (typeVariables == NoTypeVariables) {", "+\t    sig.append(';');", "+\t} else {", "-\t\tint sigLength = sig.length();", "-\t\tchar[] result = new char[sigLength];", "-\t\tsig.getChars(0, sigLength, result, 0);", "-\t\treturn result;", "-    }", "+\t}", "+\tint sigLength = sig.length();", "+\tchar[] result = new char[sigLength];", "+\tsig.getChars(0, sigLength, result, 0);", "+\treturn result;"]}], "num": 46447}
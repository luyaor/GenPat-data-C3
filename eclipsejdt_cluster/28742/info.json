{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cfccee8b629226432eb7141c8f0e4fd0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f8b9396c093dc8174ac9be2758e0a1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "6d7da1254151724e22f25d1be0ba01cba8049f5e", "commitAfterChange": "31f5d8c3352dfd40743cbafcdc19d9f5e7640d54", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambda)", "signatureAfterChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambda)", "diff": ["-\t\torg.eclipse.jdt.internal.compiler.ast.Argument[] arguments = lambda.arguments;", "+\t\torg.eclipse.jdt.internal.compiler.ast.Argument[] arguments = lambda.arguments();", "-\t\tif (lambda.body instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {", "-\t\t\tlambdaExpression.setBody(convert((org.eclipse.jdt.internal.compiler.ast.Expression) lambda.body));", "+\t\tfinal org.eclipse.jdt.internal.compiler.ast.Statement body = lambda.body();", "+\t\tif (body instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {", "+\t\t\tlambdaExpression.setBody(convert((org.eclipse.jdt.internal.compiler.ast.Expression) body));", "-\t\t\tlambdaExpression.setBody(convert((org.eclipse.jdt.internal.compiler.ast.Block) lambda.body));", "+\t\t\tlambdaExpression.setBody(convert((org.eclipse.jdt.internal.compiler.ast.Block) body));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "432a1e78244a59b3f6f5a9c3fb0c9e7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "6d7da1254151724e22f25d1be0ba01cba8049f5e", "commitAfterChange": "31f5d8c3352dfd40743cbafcdc19d9f5e7640d54", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": " \tpublic boolean visit(LambdaExpression lambdaExpression, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(LambdaExpression lambdaExpression, BlockScope scope)", "diff": ["-\t\t\t\tlambdaExpression.arguments,", "+\t\t\t\tlambdaExpression.arguments(),", "-\t\tif (lambdaExpression.body instanceof Block) {", "-\t\t\tformatBlock((Block) lambdaExpression.body, scope, this.preferences.brace_position_for_lambda_body, this.preferences.insert_space_before_opening_brace_in_block);", "+\t\tfinal Statement body = lambdaExpression.body();", "+\t\tif (body instanceof Block) {", "+\t\t\tformatBlock((Block) body, scope, this.preferences.brace_position_for_lambda_body, this.preferences.insert_space_before_opening_brace_in_block);", "-\t\t\tlambdaExpression.body.traverse(this, scope);", "+\t\t\tbody.traverse(this, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d94c68a05674a503d08ef38bca35487", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "d91fdd3d02823d77126441b4694268b13580cbbc", "commitAfterChange": "1fec50ec33cfd1cb9586525de5179c821b973f57", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \t\tprivate void logXmlProblem(CategorizedProblem problem, char[] unitSource)", "signatureAfterChange": " \t\tprivate void logXmlProblem(CategorizedProblem problem, char[] unitSource)", "diff": ["-\t\t\tint severity = problem.isError() ? ProblemSeverities.Error : ProblemSeverities.Warning;", "-\t\t\tthis.parameters.put(Logger.PROBLEM_SEVERITY, severity == ProblemSeverities.Error ? Logger.ERROR : Logger.WARNING);", "+\t\t\tboolean isError = problem.isError();", "+\t\t\tint severity = isError ? ProblemSeverities.Error : ProblemSeverities.Warning;", "+\t\t\tthis.parameters.put(Logger.PROBLEM_SEVERITY, isError ? Logger.ERROR : Logger.WARNING);", "-\t\t\tthis.parameters.put(Logger.CATEGORY_ID, new Integer(categoryID));", "+\t\t\tthis.parameters.put(Logger.PROBLEM_CATEGORY_ID, new Integer(categoryID));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd5d83203596942d3db49608bbc36f9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "76151cbb6d5be9d202d132a0aebac08650654b55", "commitAfterChange": "4905ae3917d4332c423e065348e4c2372d3de33d", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " public void generateSyntheticArgumentValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "signatureAfterChange": " public void generateSyntheticArgumentValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "diff": ["-\t// generate the enclosing instance first", "+\t\tboolean hasExtraEnclosingInstance = enclosingInstance != null;", "+\t\t", "-\t\t\tif (enclosingInstance != null && i == 0) {", "-\t\t\t\tif (syntheticArgType != targetEnclosingType) {", "-\t\t\t\t\tcurrentScope.problemReporter().unnecessaryEnclosingInstanceSpecification(enclosingInstance, targetType);", "-\t\t\t\t}", "-\t\t\t\t//if (currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4){", "+\t\t\tif (hasExtraEnclosingInstance && syntheticArgType == targetEnclosingType) {", "+\t\t\t\thasExtraEnclosingInstance = false;", "-\t\t\t\tif (syntheticArgType == targetEnclosingType){", "-\t\t\t\t\tthis.dup();", "-\t\t\t\t} ", "+\t\t\t\tthis.dup();", "-\t\t\t\t//} else {", "-\t\t\t\t//\tenclosingInstance.generateCode(currentScope, this, syntheticArgType == targetEnclosingType);", "-\t\t\t\t//}\t\t\t", "+\t\tif (hasExtraEnclosingInstance){", "+\t\t\tcurrentScope.problemReporter().unnecessaryEnclosingInstanceSpecification(enclosingInstance, targetType);", "+\t\t}", "-\t\t\t//if (currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4){", "-\t\t\t//} else {", "-\t\t\t//\tenclosingInstance.generateCode(currentScope, this, false); // do not want the value", "-\t\t\t//}\t\t\t"]}], "num": 28742}
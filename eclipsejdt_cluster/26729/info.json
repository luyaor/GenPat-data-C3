{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d610b2af38027a767e8ac496ed31841", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fb7ec6279928142d8996fd628fffab5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "65b4e15798189e35310112aac16988bcdf7eef0b", "commitAfterChange": "78b182da9e370f6f00f239fd2a2de8309bdf9aac", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": " \t \tprivate void disassemble(IInnerClassesAttribute innerClassesAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": " \t \tprivate void disassemble(IInnerClassesAttribute innerClassesAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["-\t\tfor (int i = 0; i < length - 1; i++) {", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tif (i != 0) {", "+\t\t\t\tbuffer.append(Messages.disassembler_comma);", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);\t\t\t\t", "+\t\t\t}", "-\t\t\tdecodeModifiersForInnerClasses(buffer, accessFlags);", "+\t\t\tdecodeModifiersForInnerClasses(buffer, accessFlags, true);", "-\t\t\t\t.append(Messages.disassembler_closeinnerclassentry) ", "-\t\t\t\t.append(Messages.disassembler_comma); ", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\t\t\t.append(Messages.disassembler_closeinnerclassentry);", "-\t\t// last entry", "-\t\tinnerClassesAttributeEntry = innerClassesAttributeEntries[length - 1];", "-\t\tinnerClassNameIndex = innerClassesAttributeEntry.getInnerClassNameIndex();", "-\t\touterClassNameIndex = innerClassesAttributeEntry.getOuterClassNameIndex();", "-\t\tinnerNameIndex = innerClassesAttributeEntry.getInnerNameIndex();", "-\t\taccessFlags = innerClassesAttributeEntry.getAccessFlags();", "-\t\tbuffer", "-\t\t\t.append(Messages.disassembler_openinnerclassentry) ", "-\t\t\t.append(Messages.disassembler_inner_class_info_name) ", "-\t\t\t.append(Messages.disassembler_constantpoolindex) ", "-\t\t\t.append(innerClassNameIndex);", "-\t\tif (innerClassNameIndex != 0) {", "-\t\t\tbuffer", "-\t\t\t\t.append(Messages.disassembler_space) ", "-\t\t\t\t.append(innerClassesAttributeEntry.getInnerClassName());", "-\t\t}", "-\t\tbuffer", "-\t\t\t.append(Messages.disassembler_comma) ", "-\t\t\t.append(Messages.disassembler_space) ", "-\t\t\t.append(Messages.disassembler_outer_class_info_name) ", "-\t\t\t.append(Messages.disassembler_constantpoolindex) ", "-\t\t\t.append(outerClassNameIndex);", "-\t\tif (outerClassNameIndex != 0) {", "-\t\t\tbuffer\t", "-\t\t\t\t.append(Messages.disassembler_space) ", "-\t\t\t\t.append(innerClassesAttributeEntry.getOuterClassName());", "-\t\t}", "-\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\tdumpTab(tabNumber, buffer);", "-\t\tbuffer.append(Messages.disassembler_space); ", "-\t\tbuffer", "-\t\t\t.append(Messages.disassembler_inner_name) ", "-\t\t\t.append(Messages.disassembler_constantpoolindex) ", "-\t\t\t.append(innerNameIndex);", "-\t\tif (innerNameIndex != 0) {", "-\t\t\tbuffer", "-\t\t\t\t.append(Messages.disassembler_space) ", "-\t\t\t\t.append(innerClassesAttributeEntry.getInnerName());", "-\t\t}", "-\t\tbuffer", "-\t\t\t.append(Messages.disassembler_comma) ", "-\t\t\t.append(Messages.disassembler_space) ", "-\t\t\t.append(Messages.disassembler_inner_accessflags) ", "-\t\t\t.append(accessFlags)", "-\t\t\t.append(Messages.disassembler_space); ", "-\t\tdecodeModifiersForInnerClasses(buffer, accessFlags);", "-\t\tbuffer.append(Messages.disassembler_closeinnerclassentry); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f79213505eda583d4c266b90fbcbdc69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " public int literalIndex(MethodBinding aMethodBinding)", "signatureAfterChange": " public int literalIndex(MethodBinding aMethodBinding)", "diff": ["-\tint nameAndTypeIndex;", "-\tint classIndex;", "-\tint indexWellKnownMethod;", "-\tif ((indexWellKnownMethod = indexOfWellKnownMethods(aMethodBinding)) == -1) {", "-\t\tif (aMethodBinding.constantPoolDeclaringClass().isInterface()) {", "-\t\t\t// Lookinf into the interface method ref table", "-\t\t\tif ((index = interfaceMethodCache.get(aMethodBinding)) < 0) {", "-\t\t\t\tclassIndex = literalIndex(aMethodBinding.constantPoolDeclaringClass());", "-\t\t\t\tnameAndTypeIndex = literalIndexForMethods(literalIndex(aMethodBinding.constantPoolName()), literalIndex(aMethodBinding.signature()), aMethodBinding);", "-\t\t\t\tindex = interfaceMethodCache.put(aMethodBinding, currentIndex++);", "-\t\t\t\tif (index > 0xFFFF){", "-\t\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t\t\t}", "-\t\t\t\t// Write the interface method ref constant into the constant pool", "-\t\t\t\t// First add the tag", "-\t\t\t\twriteU1(InterfaceMethodRefTag);", "-\t\t\t\t// Then write the class index", "-\t\t\t\twriteU2(classIndex);", "-\t\t\t\t// The write the nameAndType index", "-\t\t\t\twriteU2(nameAndTypeIndex);", "-\t\t\t}", "-\t\t} else {", "-\t\t\t// Lookinf into the method ref table", "-\t\t\tif ((index = methodCache.get(aMethodBinding)) < 0) {", "-\t\t\t\tclassIndex = literalIndex(aMethodBinding.constantPoolDeclaringClass());", "-\t\t\t\tnameAndTypeIndex = literalIndexForMethods(literalIndex(aMethodBinding.constantPoolName()), literalIndex(aMethodBinding.signature()), aMethodBinding);", "-\t\t\t\tindex = methodCache.put(aMethodBinding, currentIndex++);", "-\t\t\t\tif (index > 0xFFFF){", "-\t\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t\t\t}", "-\t\t\t\t// Write the method ref constant into the constant pool", "-\t\t\t\t// First add the tag", "-\t\t\t\twriteU1(MethodRefTag);", "-\t\t\t\t// Then write the class index", "-\t\t\t\twriteU2(classIndex);", "-\t\t\t\t// The write the nameAndType index", "-\t\t\t\twriteU2(nameAndTypeIndex);", "-\t\t\t}", "+\tif ((index = getFromCache(aMethodBinding)) < 0) {", "+\t\tint classIndex = literalIndexForType(aMethodBinding.constantPoolDeclaringClass().constantPoolName());", "+\t\tint nameAndTypeIndex = literalIndexForMethods(literalIndex(aMethodBinding.constantPoolName()), literalIndex(aMethodBinding.signature()), aMethodBinding);", "+\t\tindex = putInCache(aMethodBinding, currentIndex++);", "+\t\tif (index > 0xFFFF){", "+\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t} else {", "-\t\t// This is a well known method", "-\t\tif ((index = wellKnownMethods[indexWellKnownMethod]) == 0) {", "-\t\t\t// this methods was not inserted yet", "-\t\t\tif (aMethodBinding.constantPoolDeclaringClass().isInterface()) {", "-\t\t\t\t// Lookinf into the interface method ref table", "-\t\t\t\tclassIndex = literalIndex(aMethodBinding.constantPoolDeclaringClass());", "-\t\t\t\tnameAndTypeIndex = literalIndexForMethods(literalIndex(aMethodBinding.constantPoolName()), literalIndex(aMethodBinding.signature()), aMethodBinding);", "-\t\t\t\tindex = wellKnownMethods[indexWellKnownMethod] = currentIndex++;", "-\t\t\t\tif (index > 0xFFFF){", "-\t\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t\t\t}", "-\t\t\t\t// Write the interface method ref constant into the constant pool", "-\t\t\t\t// First add the tag", "-\t\t\t\twriteU1(InterfaceMethodRefTag);", "-\t\t\t\t// Then write the class index", "-\t\t\t\twriteU2(classIndex);", "-\t\t\t\t// The write the nameAndType index", "-\t\t\t\twriteU2(nameAndTypeIndex);", "-\t\t\t} else {", "-\t\t\t\t// Lookinf into the method ref table", "-\t\t\t\tclassIndex = literalIndex(aMethodBinding.constantPoolDeclaringClass());", "-\t\t\t\tnameAndTypeIndex = literalIndexForMethods(literalIndex(aMethodBinding.constantPoolName()), literalIndex(aMethodBinding.signature()), aMethodBinding);", "-\t\t\t\tindex = wellKnownMethods[indexWellKnownMethod] = currentIndex++;", "-\t\t\t\tif (index > 0xFFFF){", "-\t\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t\t\t}", "-\t\t\t\t// Write the method ref constant into the constant pool", "-\t\t\t\t// First add the tag", "-\t\t\t\twriteU1(MethodRefTag);", "-\t\t\t\t// Then write the class index", "-\t\t\t\twriteU2(classIndex);", "-\t\t\t\t// The write the nameAndType index", "-\t\t\t\twriteU2(nameAndTypeIndex);", "-\t\t\t}", "-\t\t}", "+\t\t// Write the interface method ref constant into the constant pool", "+\t\t// First add the tag", "+\t\twriteU1(aMethodBinding.constantPoolDeclaringClass().isInterface() ? InterfaceMethodRefTag : MethodRefTag);", "+\t\t// Then write the class index", "+\t\twriteU2(classIndex);", "+\t\t// The write the nameAndType index", "+\t\twriteU2(nameAndTypeIndex);"]}], "num": 26729}
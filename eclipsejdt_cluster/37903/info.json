{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c101b67504ab1b11f255af328fb72e35", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f86eab3ee139916b139a56c2046e151", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "dff921f9753af71f3b0ef787d0390dd7cd591b56", "commitAfterChange": "a899cd29a75883646450816539797817299ec777", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (enclosingInstanceType.isCompatibleWith(expectedType)) {", "-\t\t\t\tenclosingInstance.computeConversion(scope, expectedType, enclosingInstanceType);", "-\t\t\t\treturn receiverType;", "-\t\t\t} else if (scope.isBoxingCompatibleWith(enclosingInstanceType, expectedType)) {", "+\t\t\tif (enclosingInstanceType.isCompatibleWith(expectedType) || scope.isBoxingCompatibleWith(enclosingInstanceType, expectedType)) {", "-\t\t\t} else \tif (!enclosingInstanceType.isCompatibleWith(targetEnclosing)) {", "+\t\t\t} else if (!enclosingInstanceType.isCompatibleWith(targetEnclosing) && !scope.isBoxingCompatibleWith(enclosingInstanceType, targetEnclosing)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1fcb1cd6625a2ed6e99a64ac2178ab2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchSet.java", "commitBeforeChange": "15070dfb720141f260eff9f86b3742c51648d5f0", "commitAfterChange": "f850238096d0e6e37fbf42c72e3eea2d357ec53f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void reportMatching(TypeDeclaration type, IJavaElement parent) throws CoreException", "signatureAfterChange": " public void reportMatching(TypeDeclaration type, IJavaElement parent) throws CoreException", "diff": ["-\t\t\tif ((level = (Integer)this.matchingNodes.remove(field)) != null) {", "-\t\t\t\tif ((this.matchContainer & SearchPattern.CLASS) != 0) {", "+\t\t\tif ((level = (Integer)this.matchingNodes.remove(field)) != null", "+\t\t\t\t&& typeInHierarchy", "+\t\t\t\t&& (this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\t}", "-\t\t\tthis.reportMatching(field, enclosingElement, type);", "+\t\t\tthis.reportMatching(field, enclosingElement, type, typeInHierarchy);", "-\t\t\tif ((level = (Integer)this.matchingNodes.remove(method)) != null) {", "-\t\t\t\tif ((this.matchContainer & SearchPattern.CLASS) != 0) {", "+\t\t\tif ((level = (Integer)this.matchingNodes.remove(method)) != null", "+\t\t\t\t&& typeInHierarchy", "+\t\t\t\t&& (this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\t}", "-\t\t\tthis.reportMatching(method, enclosingElement);", "+\t\t\tthis.reportMatching(method, enclosingElement, typeInHierarchy);"]}], "num": 37903}
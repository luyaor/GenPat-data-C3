{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70cf8e16a335ef084a881b5adac6339b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19056a8b600fa9cf58f1a4b98ee9dc45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "75005dc0c3aa6109c4292d3d78ff1f819b20b258", "commitAfterChange": "55e6b53466e54b78b8082d22f00b34afe7b42622", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_TaskTags,", "+\t\t\t\t\t\"\"); //$NON-NLS-1$", "+\t\t\t\t// reset all warnings", "+\t\t\t\tObject[] entries = options.entrySet().toArray();", "+\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "+\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "+\t\t\t\t\tif (!(entry.getKey() instanceof String))", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tif (!(entry.getValue() instanceof String))", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "+\t\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_TaskTags,", "+\t\t\t\t\t\"\"); //$NON-NLS-1$", "-\t\t\t\t\tObject[] entries = options.entrySet().toArray();", "-\t\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "-\t\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "-\t\t\t\t\t\tif (!(entry.getKey() instanceof String))", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\tif (!(entry.getValue() instanceof String))", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "-\t\t\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportOverridingPackageDefaultMethod,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportMethodWithConstructorName,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportDeprecation, ", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportHiddenCatchBlock,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedLocal, ", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedParameter,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportSyntheticAccessEmulation,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportNonExternalizedStringLiteral,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportAssertIdentifier,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedImport,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportStaticAccessReceiver,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportNoEffectAssignment,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportNoImplicitStringConversion,", "-\t\t\t\t\tCompilerOptions.IGNORE);\t\t\t\t", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportIncompatibleNonInheritedInterfaceMethod,", "-\t\t\t\t\tCompilerOptions.IGNORE);\t\t\t\t", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedPrivateMember,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportLocalVariableHiding,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportFieldHiding,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportSpecialParameterHidingField,", "-\t\t\t\t\tCompilerOptions.DISABLED);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_TaskTags,", "-\t\t\t\t\t\"\"); //$NON-NLS-1$", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92cedd50a9a7547498894090f85b61ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "00dc28bfbd5543ecda292c71af53f42c5ae58dee", "commitAfterChange": "d3244b9b1f07dec23fc8a11bdb05cd710c7b96c6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_TaskTags,", "-\t\t\t\t\t\"\"); //$NON-NLS-1$", "-\t\t\t\t// reset all warnings", "-\t\t\t\tObject[] entries = options.entrySet().toArray();", "-\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "-\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "-\t\t\t\t\tif (!(entry.getKey() instanceof String))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tif (!(entry.getValue() instanceof String))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "-\t\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_TaskTags,", "-\t\t\t\t\t\"\"); //$NON-NLS-1$", "+\t\t\t\t\tObject[] entries = options.entrySet().toArray();", "+\t\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "+\t\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "+\t\t\t\t\t\tif (!(entry.getKey() instanceof String))", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tif (!(entry.getValue() instanceof String))", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "+\t\t\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportOverridingPackageDefaultMethod,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportMethodWithConstructorName,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportDeprecation, ", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportHiddenCatchBlock,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedLocal, ", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedParameter,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put( ", "+\t\t\t\t\tCompilerOptions.OPTION_ReportSyntheticAccessEmulation,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportNonExternalizedStringLiteral,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportAssertIdentifier,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedImport,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportStaticAccessReceiver,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportNoEffectAssignment,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportNoImplicitStringConversion,", "+\t\t\t\t\tCompilerOptions.IGNORE);\t\t\t\t", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportIncompatibleNonInheritedInterfaceMethod,", "+\t\t\t\t\tCompilerOptions.IGNORE);\t\t\t\t", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedPrivateMember,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportLocalVariableHiding,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportFieldHiding,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportSpecialParameterHidingField,", "+\t\t\t\t\tCompilerOptions.DISABLED);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_TaskTags,", "+\t\t\t\t\t\"\"); //$NON-NLS-1$", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9398fcdcae86b2e1e0bbd3fc1d92aa3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "64c79aaade93cc6bf9061f58a0917e55ce5f44d7", "commitAfterChange": "0f30dd165e42ed7c89f5ae15972d54606f639fe9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t\tObject[] entries = options.entrySet().toArray();", "-\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "-\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "-\t\t\t\t\tif (!(entry.getKey() instanceof String))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tif (!(entry.getValue() instanceof String))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "-\t\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tdisableWarnings();", "-\t\t\t\t\tObject[] entries = options.entrySet().toArray();", "-\t\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "-\t\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "-\t\t\t\t\t\tif (!(entry.getKey() instanceof String))", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\tif (!(entry.getValue() instanceof String))", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "-\t\t\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\t\t\tdisableWarnings();", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportOverridingPackageDefaultMethod,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportMethodWithConstructorName,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportDeprecation, ", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportHiddenCatchBlock,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedLocal, ", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedParameter,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put( ", "-\t\t\t\t\tCompilerOptions.OPTION_ReportSyntheticAccessEmulation,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportNonExternalizedStringLiteral,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportAssertIdentifier,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedImport,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportStaticAccessReceiver,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportNoEffectAssignment,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportNoImplicitStringConversion,", "-\t\t\t\t\tCompilerOptions.IGNORE);\t\t\t\t", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportIncompatibleNonInheritedInterfaceMethod,", "-\t\t\t\t\tCompilerOptions.IGNORE);\t\t\t\t", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedPrivateMember,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportLocalVariableHiding,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportFieldHiding,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportSpecialParameterHidingField,", "-\t\t\t\t\tCompilerOptions.DISABLED);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportSuperfluousSemicolon,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_TaskTags,", "-\t\t\t\t\t\"\"); //$NON-NLS-1$", "+\t\t\t\tdisableWarnings();", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportStaticAccessReceiver,", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportNonStaticAccessToStatic,", "+\t\t\t\t\t\t\tCompilerOptions.WARNING);", "+\t\t\t\t\t} else if (token.equals(\"indirectStatic\")) { //$NON-NLS-1$", "+\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportIndirectStaticAccess,"]}], "num": 24419}
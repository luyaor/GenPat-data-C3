{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d116e5f64983ab9346815500793771a6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5daeb6c310ec159011ded4d85c3f11d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/BranchLabel.java", "commitBeforeChange": "b722a746f46217b7440d73c5e0dfc83844a8012d", "commitAfterChange": "9cc5bde0cff147bf990090541b8a0cede8969f68", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void appendForwardReferencesFrom(BranchLabel otherLabel)", "signatureAfterChange": " public int[] forwardReferences()", "diff": ["-public void appendForwardReferencesFrom(BranchLabel otherLabel) {", "+}", "+public int[] forwardReferences() {", "+\tif (this.delegate != null) this.delegate.forwardReferences();", "+\treturn forwardReferences;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be444c1770d7e473407b518f065dc03d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryTypeConverter.java", "commitBeforeChange": "08c130b51e222d1dc818f74430195d7cc0d9ba9c", "commitAfterChange": "f44833f9e9c6c61508713666b8c272384401715c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tprivate static TypeReference createTypeReference(char[] type, HashSetOfCharArrayArray typeNames)", "signatureAfterChange": " \t \tprivate TypeReference createTypeReference(String typeSignature)", "diff": ["-\tprivate static TypeReference createTypeReference(char[] type, HashSetOfCharArrayArray typeNames) {", "-\t\t/* count identifiers and dimensions */", "-\t\tint max = type.length;", "-\t\tint dimStart = max;", "-\t\tint dim = 0;", "-\t\tint identCount = 1;", "-\t\tfor (int i = 0; i < max; i++) {", "-\t\t\tswitch (type[i]) {", "-\t\t\t\tcase '<' :", "-\t\t\t\t\treturn null;", "-\t\t\t\tcase '[' :", "-\t\t\t\t\tif (dim == 0)", "-\t\t\t\t\t\tdimStart = i;", "-\t\t\t\t\tdim++;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase '.' :", "-\t\t\t\t\tidentCount++;", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t/* rebuild identifiers and dimensions */", "-\t\tif (identCount == 1) { // simple type reference", "-\t\t\tif (dim == 0) {", "-\t\t\t\treturn new SingleTypeReference(type, 0);", "-\t\t\t} else {", "-\t\t\t\tchar[] identifier = new char[dimStart];", "-\t\t\t\tSystem.arraycopy(type, 0, identifier, 0, dimStart);", "-\t\t\t\treturn new ArrayTypeReference(identifier, dim, 0);", "-\t\t\t}", "-\t\t} else { // qualified type reference", "-\t\t\tchar[][] identifiers =\tCharOperation.splitOn('.', type, 0, dimStart);", "-\t\t\tif (typeNames != null)", "-\t\t\t\ttypeNames.add(identifiers);", "-\t\t\tif (dim == 0) {", "-\t\t\t\treturn new QualifiedTypeReference(identifiers, new long[identifiers.length]);", "-\t\t\t} else {", "-\t\t\t\treturn new ArrayQualifiedTypeReference(identifiers, dim, new long[identifiers.length]);", "-\t\t\t}", "+\t", "+\tprivate TypeReference createTypeReference(String typeSignature) {", "+\t\tTypeReference result = createTypeReference(typeSignature, 0, 0);", "+\t\tif (typeNames != null && result instanceof QualifiedTypeReference) {", "+\t\t\ttypeNames.add(((QualifiedTypeReference)result).tokens);", "+\t\treturn result;"]}], "num": 27845}
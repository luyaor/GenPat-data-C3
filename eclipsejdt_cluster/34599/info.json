{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3765222b7074de1cd93336ca6a7e7d1d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4499f01b1d6bea5c1313c3cebd35b1c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "bfac42801201b7609826716b3d7b2a4e81ff2e05", "commitAfterChange": "4c2900096a422605a0884d5ca39839064ce0c89a", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  public int getNextToken() throws InvalidInputException", "signatureAfterChange": "  public int getNextToken() throws InvalidInputException", "diff": ["-\tint token;", "-\tif (this.nextToken != TokenNameNotAToken) {", "-\t\ttoken = this.nextToken;", "-\t\tthis.nextToken = TokenNameNotAToken;", "-\t} else {", "-\t\ttoken = getNextToken0();", "-\t}", "-\tif (token == TokenNameCOLON_COLON) {", "-\t\tthis.scanningHeadOfReferenceExpression = false;", "-\t}", "-\tif (this.disambiguatedAlready) {", "-\t\tthis.disambiguatedAlready = false;", "+\t", "+\tint token = this.nextToken != TokenNameNotAToken ? this.nextToken : getNextToken0();", "+\tthis.nextToken = TokenNameNotAToken;", "+\t", "+\tif (!this.scanningJava8Plus) {", "-\tif (this.scanningJava8Plus && this.shouldDisambiguate) {", "-\t\tif (token == TokenNameLPAREN) {", "-\t\t\tif(atLambdaParameterList()) {", "-\t\t\t\tthis.nextToken = token;", "-\t\t\t\tthis.disambiguatedAlready = true;", "-\t\t\t\treturn TokenNameBeginLambda;", "-\t\t\t}", "-\t\t} else if (token == TokenNameLESS && !this.scanningHeadOfReferenceExpression) {", "-\t\t\tif (atReferenceExpression()) {", "-\t\t\t\tthis.nextToken = token;", "-\t\t\t\tthis.disambiguatedAlready = true;", "-\t\t\t\tthis.scanningHeadOfReferenceExpression = true;", "-\t\t\t\treturn TokenNameBeginTypeArguments;", "-\t\t\t}", "+", "+\tif (token == TokenNameLPAREN && this.lookAheadState == POST_LAMBDA_PREFIX) {", "+\t\tif (atLambdaParameterList()) {", "+\t\t\tthis.nextToken = token;", "+\t\t\ttoken = TokenNameBeginLambda;", "+\t} else if (token == TokenNameLESS && this.lookAheadState == POST_IDENTIFIER) {", "+\t\tif (atReferenceExpression()) {", "+\t\t\tthis.nextToken = token;", "+\t\t\ttoken = TokenNameBeginTypeArguments;", "+\t\t}", "+\t}", "+\tif (token < ParserBasicInformation.NUM_TERMINALS) {", "+\t\tthis.lookAheadState = lookAheadTable[this.lookAheadState][token];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "829067c782eb6fd34069e05942a502a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "4c2900096a422605a0884d5ca39839064ce0c89a", "commitAfterChange": "e0956e75ff6cb3066016adc9dae90f9c1534dda4", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  public int getNextToken() throws InvalidInputException", "signatureAfterChange": "  public int getNextToken() throws InvalidInputException", "diff": ["-\tint token = this.nextToken != TokenNameNotAToken ? this.nextToken : getNextToken0();", "-\tthis.nextToken = TokenNameNotAToken;", "+\tint token;", "+\tif (this.nextToken != TokenNameNotAToken) {", "+\t\ttoken = this.nextToken;", "+\t\tthis.nextToken = TokenNameNotAToken;", "+\t\treturn token; // presumed to be unambiguous.", "+\t}", "-\tif (!this.scanningJava8Plus) {", "-\t\treturn token;", "+\ttoken = getNextToken0();", "+\tif (!this.scanningJava8Plus || this.activeParser == null) {", "+\t\treturn token;  // no audience, no magic.", "-\tif (token == TokenNameLPAREN && this.lookAheadState == POST_LAMBDA_PREFIX) {", "+\tif (token == TokenNameLPAREN && this.activeParser.atConflictScenario(token)) {", "-\t} else if (token == TokenNameLESS && this.lookAheadState == POST_IDENTIFIER) {", "+\t} else if (token == TokenNameLESS && this.activeParser.atConflictScenario(token)) {", "-\t}", "-\tif (token < ParserBasicInformation.NUM_TERMINALS) {", "-\t\tthis.lookAheadState = lookAheadTable[this.lookAheadState][token];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83b27fb8a789c4e2af4149a1dcb1740d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "1639bd6af95429f315066bc991f1a39635a7a06b", "commitAfterChange": "39fac05fa8b77fcaf96c0cb04f6cdf322c685cfd", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  public int getNextToken() throws InvalidInputException", "signatureAfterChange": "  public int getNextToken() throws InvalidInputException", "diff": ["-\tif (!this.scanningJava8Plus || this.activeParser == null) {", "-\t\treturn token;  // no audience, no magic.", "+\tif (this.activeParser == null) { // anybody interested in the grammatical structure of the program should have registered.", "+\t\treturn token;", "-\tif (token == TokenNameLPAREN && this.activeParser.atConflictScenario(token)) {", "-\t\tif (atLambdaParameterList()) {", "-\t\t\tthis.nextToken = token;", "-\t\t\ttoken = TokenNameBeginLambda;", "-\t\t}", "-\t} else if (token == TokenNameLESS && this.activeParser.atConflictScenario(token)) {", "-\t\tif (atReferenceExpression()) {", "-\t\t\tthis.nextToken = token;", "-\t\t\ttoken = TokenNameBeginTypeArguments;", "-\t\t}", "+\tif (token == TokenNameLPAREN && atLambdaParameterList()) {", "+\t\tthis.nextToken = token;", "+\t\ttoken = TokenNameBeginLambda;", "+\t} else if (token == TokenNameLESS && atReferenceExpression()) {", "+\t\tthis.nextToken = token;", "+\t\ttoken = TokenNameBeginTypeArguments;", "+", "+\tthis.lookBack[0] = this.lookBack[1];", "+\tthis.lookBack[1] = token;"]}], "num": 34599}
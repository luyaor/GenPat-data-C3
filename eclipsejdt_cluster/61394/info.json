{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "605a429342a5676ae8271cd4aece97c8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "004ee49dcd4eb49a05855f2fb36b800d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 253, "methodNumberAfterChange": 253, "signatureBeforeChange": " \tpublic void test0235() throws JavaModelException", "signatureAfterChange": " \tpublic void test0235() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Wrong size\", 0, interfaces.length);", "+\t\tassertEquals(\"Wrong size\", 1, interfaces.length);", "+\t\tassertNotNull(\"No binding\", interfaces[0]);", "+\t\tassertEquals(\"Ltest0235/Zork;\", interfaces[0].getKey());", "+\t\tassertFalse(\"I should not be flagged as recovered\", typeBinding2.isRecovered());", "+\t\tassertTrue(\"Zork should be flagged as recovered\", interfaces[0].isRecovered());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64e9af36c9a409b9ddd7a3268ff4f667", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 239, "methodNumberAfterChange": 239, "signatureBeforeChange": " \tpublic void test0225() throws JavaModelException", "signatureAfterChange": " \tpublic void test0225() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Wrong size\", 0, bindings.length);", "+\t\tassertEquals(\"Wrong size\", 1, bindings.length);", "+\t\tassertNotNull(\"No binding\", bindings[0]);", "+\t\tassertEquals(\"@LZork;\", bindings[0].getKey());", "+\t\tassertFalse(\"Annotation should not be flagged as recovered\", bindings[0].isRecovered());", "+\t\tassertTrue(\"Annotation type should be flagged as recovered\", bindings[0].getAnnotationType().isRecovered());\t\t\t\t"]}], "num": 61394}
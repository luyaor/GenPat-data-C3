{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3425d2bf875066d3ab11435f2a98b665", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7579cc101da4523e48e87fa7823b9259", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/BinaryExpressionFragmentBuilder.java", "commitBeforeChange": "c068497bdb6cb42c26358cbd7f1548d3c744570a", "commitAfterChange": "2de930f59d9b83efe9ad335cd375bf8acd9f09ab", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic boolean visit(BinaryExpression binaryExpression, BlockScope scope)", "signatureAfterChange": "  \tpublic boolean visit(BinaryExpression binaryExpression, BlockScope scope)", "diff": ["+\t\t\t\tcase OperatorIds.MULTIPLY :", "+\t\t\t\t\tif (buildFragments(binaryExpression)) {", "+\t\t\t\t\t\tthis.operatorsList.add(new Integer(TerminalTokens.TokenNameMULTIPLY));", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\tcase OperatorIds.REMAINDER :", "+\t\t\t\t\tif (buildFragments(binaryExpression)) {", "+\t\t\t\t\t\tthis.operatorsList.add(new Integer(TerminalTokens.TokenNameREMAINDER));", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\tcase OperatorIds.XOR :", "+\t\t\t\t\tif (buildFragments(binaryExpression)) {", "+\t\t\t\t\t\tthis.operatorsList.add(new Integer(TerminalTokens.TokenNameXOR));", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\tcase OperatorIds.DIVIDE :", "+\t\t\t\t\tif (buildFragments(binaryExpression)) {", "+\t\t\t\t\t\tthis.operatorsList.add(new Integer(TerminalTokens.TokenNameDIVIDE));", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a64d8dc93de3a0cdc5db70d5dab20e11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/BinaryExpressionFragmentBuilder.java", "commitBeforeChange": "e8e7647f559ab2b52cb4227f76e40c3c50450acc", "commitAfterChange": "4af2b490b50346e709828d4908ef9969ee6a54dc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic boolean visit(BinaryExpression binaryExpression, BlockScope scope)", "signatureAfterChange": "  \tpublic boolean visit(BinaryExpression binaryExpression, BlockScope scope)", "diff": ["-\t\tthis.fragmentsList.add(binaryExpression);", "+\t\tfinal int numberOfParens = (binaryExpression.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tif (numberOfParens > 0) {", "+\t\t\tthis.fragmentsList.add(binaryExpression);", "+\t\t} else {", "+\t\t\tswitch((binaryExpression.bits & AstNode.OperatorMASK) >> AstNode.OperatorSHIFT) {", "+\t\t\t\tcase OperatorIds.PLUS :", "+\t\t\t\t\tif (buildFragments(binaryExpression)) {", "+\t\t\t\t\t\tthis.operatorsList.add(new Integer(TerminalTokens.TokenNamePLUS));", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\tcase OperatorIds.MINUS :", "+\t\t\t\t\tif (buildFragments(binaryExpression)) {", "+\t\t\t\t\t\tthis.operatorsList.add(new Integer(TerminalTokens.TokenNameMINUS));", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\tcase OperatorIds.OR :", "+\t\t\t\t\tif (buildFragments(binaryExpression)) {", "+\t\t\t\t\t\tthis.operatorsList.add(new Integer(TerminalTokens.TokenNameOR));", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\tcase OperatorIds.AND :", "+\t\t\t\t\tif (buildFragments(binaryExpression)) {", "+\t\t\t\t\t\tthis.operatorsList.add(new Integer(TerminalTokens.TokenNameAND));", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\tdefault:", "+\t\t\t\t\tthis.fragmentsList.add(binaryExpression);", "+\t\t\t}", "+\t\t}"]}], "num": 70525}
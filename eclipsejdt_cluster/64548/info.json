{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f062e9916e96034ff06023004eaadbd8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0bf8e54b73c54e45b1b74636e7d9039", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsTests.java", "commitBeforeChange": "3bdad1c2bee46cfc01e1c4253b1e77d41c06aec6", "commitAfterChange": "3c0e62d6a8d065878cb88244f456ac588504233b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void formatSource(String source, String formattedOutput, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator)", "signatureAfterChange": "  void formatSource(String source, String formattedOutput, int kind, int indentationLevel)", "diff": ["+", "+void formatSource(String source, String formattedOutput, int kind, int indentationLevel) {", "+\t\tString result;", "+\t\tif (idx == 1) {", "+\t\t\t// Use offset and length until bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=233967 is fixed", "+\t\t\tresult = runFormatter(codeFormatter(), newSource, kind, indentationLevel, regions[0].getOffset(), regions[0].getLength(), Util.LINE_SEPARATOR);", "+\t\t} else {", "+\t\t\tSystem.arraycopy(regions, 0, regions = new Region[idx], 0, idx);", "+\t\t\tresult = runFormatter(codeFormatter(), newSource, kind, indentationLevel, regions, Util.LINE_SEPARATOR);", "+\t\t}", "+\t\tformatSource(source, formattedOutput, kind, indentationLevel, false, 0, -1, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d824c2f220b35b649987b323bf3457c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsTests.java", "commitBeforeChange": "e944f831810e143e8894d05428eb208a2cd78cce", "commitAfterChange": "45b2548f21c6553964603037785b1fef0bb3e0d3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  void formatSource(String source, String formattedOutput)", "signatureAfterChange": "  void formatSource(String source, String formattedOutput)", "diff": ["-\tformatSource(source, formattedOutput, CodeFormatter.K_COMPILATION_UNIT | CodeFormatter.F_INCLUDE_COMMENTS, 0, false, 0, -1, null);", "+\tint regionStart = source.indexOf(\"[#\");", "+\tif (regionStart != -1) {", "+\t\tIRegion[] regions =  new Region[10];", "+\t\tint idx = 0;", "+\t\tint start = 0;", "+\t\tint delta = 0;", "+\t\tStringBuffer buffer = new StringBuffer();", "+\t\twhile (regionStart != -1) {", "+\t\t\tbuffer.append(source.substring(start, regionStart));", "+\t\t\tint regionEnd = source.indexOf(\"#]\", regionStart+2);", "+\t\t\tbuffer.append(source.substring(regionStart+2, regionEnd));", "+\t\t\tregions[idx++] = new Region(regionStart-delta, regionEnd-(regionStart+2));", "+\t\t\tdelta += 4;", "+\t\t\tstart = regionEnd + 2;", "+\t\t\tregionStart = source.indexOf(\"[#\", start);", "+\t\t}", "+\t\tSystem.arraycopy(regions, 0, regions = new Region[idx], 0, idx);", "+\t\tbuffer.append(source.substring(start, source.length()));", "+\t\tString newSource = buffer.toString();", "+\t\tString result = runFormatter(codeFormatter(), newSource, CodeFormatter.K_COMPILATION_UNIT | CodeFormatter.F_INCLUDE_COMMENTS, 0, regions, Util.LINE_SEPARATOR);", "+\t\tassertLineEquals(result, newSource, formattedOutput, false);", "+\t} else {", "+\t\tformatSource(source, formattedOutput, CodeFormatter.K_COMPILATION_UNIT | CodeFormatter.F_INCLUDE_COMMENTS, 0, false, 0, -1, null);", "+\t}"]}], "num": 64548}
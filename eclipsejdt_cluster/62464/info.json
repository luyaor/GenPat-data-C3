{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7833ee4f3b4e6a3b5a1d1b8533c80743", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "588eab04246c241884d0ac35972a584a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompilationUnitTests.java", "commitBeforeChange": "938b1c8a022540a594cc122eea928c242180e400", "commitAfterChange": "3883b7541738126367cb07b1070bef67542d7472", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void testDeprecatedFlag() throws JavaModelException", "signatureAfterChange": " public void testDeprecatedFlag01() throws JavaModelException", "diff": ["-public void testDeprecatedFlag() throws JavaModelException {", "+public void testDeprecatedFlag01() throws JavaModelException {", "-\tassertTrue(\"Type I should be deprecated\", Flags.isDeprecated(this.cu.getType(\"I\").getFlags()));", "-\t", "-\tassertTrue(\"Field f1 should not be deprecated\", !Flags.isDeprecated(type.getField(\"f1\").getFlags()));", "-\tassertTrue(\"Field f2 should be deprecated\", Flags.isDeprecated(type.getField(\"f2\").getFlags()));", "-\t", "-\tassertTrue(\"Method bar should not be deprecated\", !Flags.isDeprecated(type.getMethod(\"bar\", new String[]{}).getFlags()));", "-\tassertTrue(\"Method fred should be deprecated\", Flags.isDeprecated(type.getMethod(\"fred\", new String[]{}).getFlags()));", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5df9c8c02ed9b60f65f49a4db210a257", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/DebugEvaluationTest.java", "commitBeforeChange": "e23f18beb293b9f633eadc8205d385cd71d7248b", "commitAfterChange": "30fe2dd29af752fe29ad5a32fd4c449e763ab3c9", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void _test019() throws Exception", "signatureAfterChange": " public void test019() throws Exception", "diff": ["-public void _test019() throws Exception {", "+public void test019() throws Exception {", "-\t\tassertTrue(\"Code snippet should not have problems\", !result.hasProblems());", "-\t\tassertTrue(\"Result should have a value\", result.hasValue());", "-\t\tassertEquals(\"Value\", \"true\".toCharArray(), result.getValueDisplayString());", "-\t\tassertEquals(\"Type\", \"boolean\".toCharArray(), result.getValueTypeName());", "+\t\tassertTrue(\"Code snippet should have problems\", result.hasProblems());", "+\t\tassertTrue(\"Code snippet should have problems\", result.hasProblems());", "+\t\tassertEquals(\"Wrong size\", 1, result.getProblems().length);", "+\t\tassertEquals(\"Wrong pb\", 422, result.getProblems()[0].getID() & IProblem.IgnoreCategoriesMask);"]}], "num": 62464}
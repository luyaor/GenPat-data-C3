{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d59f19040320a2eba3a48d741c46335d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7dcc9d32bc7c79d466bc91950fd94432", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "875cc8d42787c90738d8dc077a25eb401e9e38f9", "commitAfterChange": "adfd584faf146517cb3e86f9f2b585f2851a3630", "methodNumberBeforeChange": 385, "methodNumberAfterChange": 385, "signatureBeforeChange": " \tpublic void _test383()", "signatureAfterChange": " \tpublic void test383()", "diff": ["-\tpublic void _test383() {", "+\tpublic void test383() {", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X extends Y implements I { public <T> void foo(Class<T> s) {} }\\n\" + ", "+\t\t\t\t\"interface I { <T, S> void foo(Class<T> s); }\\n\" + ", "+\t\t\t\t\"class Y { public <T> void foo(Class<T> s) {} }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X extends Y implements I { public <T> void foo(Class<T> s) {} }\\n\" + ", "+\t\t\t\"\t             ^\\n\" + ", "+\t\t\t\"Class must implement the inherited abstract method I.foo(Class<T>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X extends Y implements I { public <T> void foo(Class<T> s) {} }\\n\" + ", "+\t\t\t\"\t                                                        ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash : The method foo(Class<T>) of type X has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t\t\t/*", "+\t\t\tX.java:1: X is not abstract and does not override abstract method <T,S>foo(java.lang.Class<T>) in I", "+\t\t\tpublic class X extends Y implements I { public <T> void foo(Class<T> s) {} }", "+\t\t\t       ^", "+       \t\t*/", "-\t\t\t\t\"class Y { <T> void foo(Class<T> s) {} }\\n\"", "+\t\t\t\t\"class Y { public <T> void foo(Class<T> s) {} }\\n\"", "-\t\t\t\"Class must implement the inherited abstract method I.foo(Class<T>)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tclass Y { <T> void foo(Class<T> s) {} }\\n\" + ", "-\t\t\t\"\t                   ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X extends Y implements I {}\\n\" + ", "+\t\t\t\"\t             ^\\n\" + ", "+\t\t\t\"Class must implement the inherited abstract method I.foo(Class<T>)\\n\" + ", "+\t\t\t/*", "+\t\t\tX.java:1: X is not abstract and does not override abstract method <T,S>foo(java.lang.Class<T>) in I", "+\t\t\tpublic class X extends Y implements I {}", "+\t\t\t       ^", "+\t\t\t*/", "-\t\t\t\t\"public abstract class X extends Y implements I {}\\n\" + ", "+\t\t\t\t\"public abstract class X extends Y implements I {}\\n\" + // NOTE: X is abstract", "-\t\t\t\t\"class Y { <T, S> void foo(Class<T> s) {} }\\n\"", "+\t\t\t\t\"class Y { public <T, S> void foo(Class<T> s) {} }\\n\"", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tclass Y { <T, S> void foo(Class<T> s) {} }\\n\" + ", "-\t\t\t\"\t                      ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic abstract class X extends Y implements I {}\\n\" + ", "+\t\t\t\"\t                      ^\\n\" + ", "+\t\t\t/*", "+\t\t\tX.java:1: name clash: <T,S>foo(java.lang.Class<T>) in Y and <T>foo(java.lang.Class<T>) in I have the same erasure, yet neither overrides the other", "+\t\t\tpublic abstract class X extends Y implements I {}", "+\t\t\t                ^", "+\t\t\t */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b370975b8e460f656b6b0eb143ebd457", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "32f757dfe8da946b3f43d9a2940c80a3241b7487", "commitAfterChange": "362a367dfb78f3dcbcec97d2d2301a9c64da2876", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void test001()", "signatureAfterChange": "  \tpublic void test001()", "diff": ["+\t}", "-\t\t\tnew String[] {", "-\t\t\t\t\"J.java\",", "-\t\t\t\t\"public class J<T> implements I<A> { public void foo(T t) {} }\\n\" +", "-\t\t\t\t\"interface I<U> { public void foo(U u); }\\n\" +", "-\t\t\t\t\"class A {}\\n\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in J.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic class J<T> implements I<A> { public void foo(T t) {} }\\r\\n\" + ", "-\t\t\t\"\t             ^\\n\" + ", "-\t\t\t\"The type J<T> must implement the inherited abstract method I<A>.foo(A)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in J.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic class J<T> implements I<A> { public void foo(T t) {} }\\r\\n\" + ", "-\t\t\t\"\t                                                ^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method foo(T) of type J<T> has the same erasure as foo(U) of type I<U> but does not override it\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t\t// J is not abstract and does not override abstract method foo(A) in I", "-\t\t);", "-\t\t\tnew String[] {", "-\t\t\t\t\"JJ.java\",", "-\t\t\t\t\"public class JJ<T> implements I { public void foo(T t) {} }\\n\" +", "-\t\t\t\t\"interface I<U> { public void foo(U u); }\\n\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in JJ.java (at line 1)\\n\" + ", "-\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\n\" + ", "-\t\t\t\"\t             ^^\\n\" + ", "-\t\t\t\"The type JJ<T> must implement the inherited abstract method I.foo(Object)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in JJ.java (at line 1)\\n\" + ", "-\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\n\" + ", "-\t\t\t\"\t                              ^\\n\" + ", "-\t\t\t\"I is a raw type. References to generic type I<U> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in JJ.java (at line 1)\\n\" + ", "-\t\t\t\"\tpublic class JJ<T> implements I { public void foo(T t) {} }\\n\" + ", "-\t\t\t\"\t                                              ^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method foo(T) of type JJ<T> has the same erasure as foo(U) of type I<U> but does not override it\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t\t// JJ is not abstract and does not override abstract method foo(java.lang.Object) in I", "-\t\t\tnew String[] {", "-\t\t\t\t\"YYY.java\",", "-\t\t\t\t\"public class YYY<T> extends X<T> { public void foo(T t) {} }\\n\" +", "-\t\t\t\t\"class X<U> { public void foo(U u) {} }\\n\"", "-\t\t\t},", "-\t\t\t\"\"", "-\t\t\tnew String[] {", "-\t\t\t\t\"JJJ.java\",", "-\t\t\t\t\"public class JJJ<T> implements I<T> { public void foo(T t) {} }\\n\" +", "-\t\t\t\t\"interface I<U> { public void foo(U u); }\\n\"", "-\t\t\t},", "-\t\t\t\"\""]}], "num": 12398}
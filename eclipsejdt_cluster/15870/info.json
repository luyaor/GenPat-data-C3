{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb49bd601400b9ace4f27049a19866f4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1930cd103d508957497cbe4c44ea6251", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f19dccfb26d0801a06f240e4b9b04b5b7937f46a", "commitAfterChange": "722bf8fd99ba9d0d2f6030465e392d9a8469edf2", "methodNumberBeforeChange": 547, "methodNumberAfterChange": 547, "signatureBeforeChange": " \tpublic void _test545()", "signatureAfterChange": " \tpublic void test545()", "diff": ["-\tpublic void _test545() {", "+\tpublic void test545() {", "-\t\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tb.add(new Object());\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method add(Object) belongs to the raw type Vector. References to generic type Vector<E> should be parameterized\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tm3((X2) m());  // A<Object>.m() --> X<? extends Object> - cannot cast to X2\\n\" + ", "+\t\t\t\"\t   ^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The cast from X<? extends Object> to X2 is actually checking against the erased type X2\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"\ta = b;\\n\" + ", "-\t\t\t\"\t    ^\\n\" + ", "-\t\t\t\"Type safety: The expression of type Vector needs unchecked conversion to conform to Vector<Integer>\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 18)\\n\" + ", "+\t\t\t\"\tlhs = rhs; // cannot convert\\n\" + ", "+\t\t\t\"\t      ^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X<? extends Object> to X<String>\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 21)\\n\" + ", "+\t\t\t\"\tlhs = rhs; // cannot convert\\n\" + ", "+\t\t\t\"\t      ^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X<? extends Object> to X2\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 29)\\n\" + ", "+\t\t\t\"\tvoid foo(X<String> xs) {}\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(X<String>) of type D has the same erasure as foo(X<? extends Object>) of type C but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 30)\\n\" + ", "+\t\t\t\"\tvoid bar(X<? extends Object> xo) {}\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method bar(X<? extends Object>) of type D has the same erasure as bar(X<String>) of type C but does not override it\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t}\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52e1fd565efbc3f42b6a08a0e0d19a06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "be13fad329d6d2e465d322326f6ef6df7d9942a2", "commitAfterChange": "e144a75ffba7db74ee583e06f85056d8de86880c", "methodNumberBeforeChange": 409, "methodNumberAfterChange": 409, "signatureBeforeChange": "\t\t \t \tpublic void test407()", "signatureAfterChange": " \tpublic void test407()", "diff": ["+\t// 78008", "+\t\t\t\t\"import java.util.*;\\n\" + ", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"    public Integer[] getTypes() {\\n\" + ", "+\t\t\t\t\"        List<Integer> list = new ArrayList<Integer>();\\n\" + ", "+\t\t\t\t\"        return list == null \\n\" + ", "+\t\t\t\t\"            ? new Integer[0] \\n\" + ", "+\t\t\t\t\"            : list.toArray(new Integer[list.size()]);\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"    public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"        Class clazz = null;\\n\" + ", "+\t\t\t\t\"        try {\\n\" + ", "+\t\t\t\t\"            clazz = Class.forName(\\\"X\\\");\\n\" + ", "+\t\t\t\t\"\t\t\t System.out.println(\\\"SUCCESS\\\");\\n\" +", "+\t\t\t\t\"        } catch (Throwable e) {\\n\" + ", "+\t\t\t\t\"            e.printStackTrace();\\n\" + ", "+\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t\t},", "+\t\t\t\"SUCCESS\");\t", "+\t}\t\t\t"]}], "num": 15870}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5915e1f9a87212d13b32a7665019bba0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a26b31660cadc1d9e905aa69fed6c1ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "2c262bb049c7c4afe17af25384f399520f404e78", "commitAfterChange": "ae43a440915bd6d7962491f9c0ab4d02295e6d83", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "diff": ["-\t\t\t\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\t\t\t\tif ((this.implicitConversion & BOXING) != 0) {", "+\t\t\t\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t\t\t\t\tcodeStream.areturn();", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\t\t\t\tif ((this.implicitConversion & BOXING) != 0) {", "+\t\t\t\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t\t\t\t\tcodeStream.areturn();", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\t\t\t\tif ((this.implicitConversion & BOXING) != 0) {", "+\t\t\t\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t\t\t\t\tcodeStream.areturn();", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\tif ((this.implicitConversion & BOXING) != 0) {", "+\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t\tcodeStream.areturn();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\tif ((this.implicitConversion & BOXING) != 0) {", "+\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t\tcodeStream.areturn();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\tif ((this.implicitConversion & BOXING) != 0) {", "+\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t\tcodeStream.areturn();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\tif ((this.implicitConversion & BOXING) != 0) {", "+\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t\tcodeStream.areturn();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.ireturn();", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c478f38613fe527afce7815f2dd5e85b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "39787fb323b3f06bf37a085118b28347f6a17b39", "commitAfterChange": "0cc61e9905c3f603dab789f6a44abfa63094212c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public boolean generateSubRoutineInvocation(BlockScope currentScope, CodeStream codeStream, Object targetLocation)", "signatureAfterChange": " public boolean generateSubRoutineInvocation(BlockScope currentScope, CodeStream codeStream, Object targetLocation, int stateIndex, LocalVariableBinding secretLocal)", "diff": ["-public boolean generateSubRoutineInvocation(BlockScope currentScope, CodeStream codeStream, Object targetLocation) {", "+public boolean generateSubRoutineInvocation(BlockScope currentScope, CodeStream codeStream, Object targetLocation, int stateIndex, LocalVariableBinding secretLocal) {", "+\tboolean isStackMapFrameCodeStream = codeStream instanceof StackMapFrameCodeStream;", "+\t\tboolean reuseTargetLocation = true;", "-\t\t\t\tcodeStream.goto_(this.reusableJSRSequenceStartLabels[i]);", "-\t\t\t\treturn true;", "+\t\t\t\tif ((this.reusableJSRStateIndexes[i] != stateIndex) && finallyMode == FINALLY_INLINE && isStackMapFrameCodeStream) {", "+\t\t\t\t\treuseTargetLocation = false;", "+\t\t\t\t\tbreak nextReusableTarget;", "+\t\t\t\t} else {", "+\t\t\t\t\tcodeStream.goto_(this.reusableJSRSequenceStartLabels[i]);", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\tthis.reusableJSRStateIndexes = new int[3];", "-\t\tif (this.reusableJSRTargetsCount == this.reusableJSRTargets.length) {", "-\t\t\tSystem.arraycopy(this.reusableJSRTargets, 0, this.reusableJSRTargets = new Object[2*this.reusableJSRTargetsCount], 0, this.reusableJSRTargetsCount);", "-\t\t\tSystem.arraycopy(this.reusableJSRSequenceStartLabels, 0, this.reusableJSRSequenceStartLabels = new BranchLabel[2*this.reusableJSRTargetsCount], 0, this.reusableJSRTargetsCount);", "+\t\tif (reuseTargetLocation) {", "+\t\t\tif (this.reusableJSRTargetsCount == this.reusableJSRTargets.length) {", "+\t\t\t\tSystem.arraycopy(this.reusableJSRTargets, 0, this.reusableJSRTargets = new Object[2*this.reusableJSRTargetsCount], 0, this.reusableJSRTargetsCount);", "+\t\t\t\tSystem.arraycopy(this.reusableJSRSequenceStartLabels, 0, this.reusableJSRSequenceStartLabels = new BranchLabel[2*this.reusableJSRTargetsCount], 0, this.reusableJSRTargetsCount);", "+\t\t\t\tSystem.arraycopy(this.reusableJSRStateIndexes, 0, this.reusableJSRStateIndexes = new int[2*this.reusableJSRTargetsCount], 0, this.reusableJSRTargetsCount);", "+\t\t\t}", "+\t\t\tthis.reusableJSRTargets[this.reusableJSRTargetsCount] = targetLocation;", "+\t\t\tBranchLabel reusableJSRSequenceStartLabel = new BranchLabel(codeStream);", "+\t\t\treusableJSRSequenceStartLabel.place();", "+\t\t\tthis.reusableJSRStateIndexes[this.reusableJSRTargetsCount] = stateIndex;", "+\t\t\tthis.reusableJSRSequenceStartLabels[this.reusableJSRTargetsCount++] = reusableJSRSequenceStartLabel;", "-\t\tthis.reusableJSRTargets[this.reusableJSRTargetsCount] = targetLocation;", "-\t\tBranchLabel reusableJSRSequenceStartLabel = new BranchLabel(codeStream);", "-\t\treusableJSRSequenceStartLabel.place();", "-\t\tthis.reusableJSRSequenceStartLabels[this.reusableJSRTargetsCount++] = reusableJSRSequenceStartLabel;", "-\t}\t\t\t", "+\t}", "-\t\tif (this.preTryInitStateIndex != -1) {", "-\t\t\t// reset initialization state, as for a normal catch block", "-\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.preTryInitStateIndex);", "+\t\tif (isStackMapFrameCodeStream) {", "+\t\t\t((StackMapFrameCodeStream) codeStream).pushStateIndex(stateIndex);", "+\t\t\tif (this.naturalExitMergeInitStateIndex != -1 || stateIndex != -1) {", "+\t\t\t\t// reset initialization state, as for a normal catch block", "+\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.naturalExitMergeInitStateIndex);", "+\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.naturalExitMergeInitStateIndex);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (this.naturalExitMergeInitStateIndex != -1) {", "+\t\t\t\t// reset initialization state, as for a normal catch block", "+\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.naturalExitMergeInitStateIndex);", "+\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.naturalExitMergeInitStateIndex);", "+\t\t\t}", "+\t\t}", "+\t\tif (secretLocal != null) {", "+\t\t\tcodeStream.addVariable(secretLocal);", "+\t\tif (isStackMapFrameCodeStream) {", "+\t\t\t((StackMapFrameCodeStream) codeStream).popStateIndex();", "+\t\t}"]}], "num": 42153}
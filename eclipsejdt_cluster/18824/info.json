{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c28b31172ed227db40f7cb3efd70f87b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16344c4f6357e819326edbe8329bcf50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/FilerImpl.java", "commitBeforeChange": "9b9b413c1fc3e1733988a3ceecffb87b92306bbd", "commitAfterChange": "afdd923f425377ac0a0c68fd300457070eaabf3e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public OutputStream createBinaryFile(Filer.Location loc, String pkg, File relPath)         throws IOException", "signatureAfterChange": "     public OutputStream createBinaryFile(Filer.Location loc, String pkg, File relPath)         throws IOException", "diff": ["+    \t", "+    \t// We do not want to write to disk during reconcile", "+\t\tif (_env.getPhase() == Phase.RECONCILE) {", "+\t\t\treturn new NoOpOutputStream();", "+\t\t}", "+    \t", "-    \treturn new RefreshingFileOutputStream( path, _env.getProject() );", "+    \tIFile file = _env.getProject().getFile(path);", "+    \treturn new BinaryFileOutputStream(file);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b8e7636cd644f3913eb7aca4600d9dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/FilerImpl.java", "commitBeforeChange": "9b9b413c1fc3e1733988a3ceecffb87b92306bbd", "commitAfterChange": "afdd923f425377ac0a0c68fd300457070eaabf3e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public OutputStream createClassFile(String name) throws IOException", "signatureAfterChange": "     public OutputStream createClassFile(String name) throws IOException", "diff": ["+\t\t", "+\t\t// We do not want to write to disk during reconcile", "+\t\tif (_env.getPhase() == Phase.RECONCILE) {", "+\t\t\treturn new NoOpOutputStream();", "+\t\t}", "+\t\t", "-        // It is sometimes necessary to create the", "-        // parent dir, else an IOException occurs creating f..", "-        File parentFile = path.toFile().getParentFile();", "-        FileSystemUtil.mkdirs( parentFile );", "-    \t", "-        return new RefreshingFileOutputStream( path, _env.getProject() );", "+        IFile file = _env.getProject().getFile(path);", "+        return new BinaryFileOutputStream(file);"]}], "num": 18824}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4dca5e8ed418d7a1e8468871964fd520", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ea40cf7053a3670472a0786851418e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "464f6cfbc4d7c79e3b0be7d1378b5d3f2b61c7f8", "commitAfterChange": "70954c7e4ef90552afbd3c4b7199bb0a07ca0943", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public int scanNumber(boolean dotPrefix) throws InvalidInputException", "signatureAfterChange": " public int scanNumber(boolean dotPrefix) throws InvalidInputException", "diff": ["-\t\t\t//force the first char of the hexa number do exist...", "-\t\t\t// consume next character", "-\t\t\tthis.unicodeAsBackSlash = false;", "-\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "-\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\tgetNextUnicodeChar();", "-\t\t\t} else {", "-\t\t\t\tif (this.withoutUnicodePtr != 0) {", "-\t\t\t\t\tunicodeStoreAt(++this.withoutUnicodePtr);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (Character.digit(this.currentCharacter, 16) == -1)", "-\t\t\t\tthrow new InvalidInputException(INVALID_HEXA);", "-\t\t\t//---end forcing--", "+\t\t\tint start = this.currentPosition;", "-\t\t\tif (getNextChar('l', 'L') >= 0)", "+\t\t\tint end = this.currentPosition;", "+\t\t\tif (getNextChar('l', 'L') >= 0) {", "+\t\t\t\tif (end == start) {", "+\t\t\t\t\tthrow new InvalidInputException(INVALID_HEXA);", "+\t\t\t\t}", "-\t\t\telse", "+\t\t\t} else if (getNextChar('.')) {", "+\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t// if we are in source level < 1.5, we report an integer literal", "+\t\t\t\t\tthis.currentPosition = end;", "+\t\t\t\t\treturn TokenNameIntegerLiteral;", "+\t\t\t\t}", "+\t\t\t\t// hexadeciman floating point literal", "+\t\t\t\t// read decimal part", "+\t\t\t\twhile (getNextCharAsDigit(16)){/*empty*/}", "+\t\t\t\t", "+\t\t\t\tif (getNextChar('p', 'P') >= 0) { // consume next character", "+\t\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\tunicodeStoreAt(++this.withoutUnicodePtr);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+", "+\t\t\t\t\tif ((this.currentCharacter == '-')", "+\t\t\t\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "+\t\t\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\t\tunicodeStoreAt(++this.withoutUnicodePtr);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (!isDigit(this.currentCharacter)) {", "+\t\t\t\t\t\tthrow new InvalidInputException(INVALID_HEXA);", "+\t\t\t\t\t}", "+\t\t\t\t\twhile (getNextCharAsDigit()){/*empty*/}", "+\t\t\t\t\tif (getNextChar('f', 'F') >= 0) {", "+\t\t\t\t\t\treturn TokenNameFloatingPointLiteral;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (getNextChar('d', 'D') >= 0) {", "+\t\t\t\t\t\treturn TokenNameDoubleLiteral;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (getNextChar('l', 'L') >= 0) {", "+\t\t\t\t\t\tthrow new InvalidInputException(INVALID_HEXA);", "+\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t\treturn TokenNameDoubleLiteral;", "+\t\t\t\t} else {", "+\t\t\t\t\tthrow new InvalidInputException(INVALID_HEXA);", "+\t\t\t\t}", "+\t\t\t} else if (getNextChar('p', 'P') >= 0) { // consume next character", "+\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t// if we are in source level < 1.5 we report an integer literal", "+\t\t\t\t\tthis.currentPosition = end;", "+\t\t\t\t\treturn TokenNameIntegerLiteral;", "+\t\t\t\t}", "+\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t} else {", "+\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\tunicodeStoreAt(++this.withoutUnicodePtr);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\tif ((this.currentCharacter == '-')", "+\t\t\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "+\t\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\tunicodeStoreAt(++this.withoutUnicodePtr);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (!isDigit(this.currentCharacter))", "+\t\t\t\t\tthrow new InvalidInputException(INVALID_FLOAT);", "+\t\t\t\twhile (getNextCharAsDigit()){/*empty*/}", "+\t\t\t\tif (getNextChar('f', 'F') >= 0)", "+\t\t\t\t\treturn TokenNameFloatingPointLiteral;", "+\t\t\t\tif (getNextChar('d', 'D') >= 0)", "+\t\t\t\t\treturn TokenNameDoubleLiteral;", "+\t\t\t\tif (getNextChar('l', 'L') >= 0) {", "+\t\t\t\t\tthrow new InvalidInputException(INVALID_HEXA);", "+\t\t\t\t}", "+\t\t\t\treturn TokenNameDoubleLiteral;", "+\t\t\t} else {", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7065b9dd63d90801ddc790aed5c03d32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "464f6cfbc4d7c79e3b0be7d1378b5d3f2b61c7f8", "commitAfterChange": "70954c7e4ef90552afbd3c4b7199bb0a07ca0943", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public int scanNumber(boolean dotPrefix) throws InvalidInputException", "signatureAfterChange": " public int scanNumber(boolean dotPrefix) throws InvalidInputException", "diff": ["-\t\t\t//force the first char of the hexa number do exist...", "-\t\t\t// consume next character", "-\t\t\tthis.unicodeAsBackSlash = false;", "-\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "-\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\tgetNextUnicodeChar();", "-\t\t\t} else {", "-\t\t\t\tif (this.withoutUnicodePtr != 0) {", "-\t\t\t\t\tunicodeStoreAt(++this.withoutUnicodePtr);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (Character.digit(this.currentCharacter, 16) == -1)", "-\t\t\t\tthrow new InvalidInputException(INVALID_HEXA);", "-\t\t\t//---end forcing--", "+\t\t\tint start = this.currentPosition;", "-\t\t\tif (getNextChar('l', 'L') >= 0)", "+\t\t\tint end = this.currentPosition;", "+\t\t\tif (getNextChar('l', 'L') >= 0) {", "+\t\t\t\tif (end == start) {", "+\t\t\t\t\tthrow new InvalidInputException(INVALID_HEXA);", "+\t\t\t\t}", "-\t\t\telse", "+\t\t\t} else if (getNextChar('.')) {", "+\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t// if we are in source level < 1.5, we report an integer literal", "+\t\t\t\t\tthis.currentPosition = end;", "+\t\t\t\t\treturn TokenNameIntegerLiteral;", "+\t\t\t\t}", "+\t\t\t\t// hexadeciman floating point literal", "+\t\t\t\t// read decimal part", "+\t\t\t\twhile (getNextCharAsDigit(16)){/*empty*/}", "+\t\t\t\t", "+\t\t\t\tif (getNextChar('p', 'P') >= 0) { // consume next character", "+\t\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\tunicodeStoreAt(++this.withoutUnicodePtr);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+", "+\t\t\t\t\tif ((this.currentCharacter == '-')", "+\t\t\t\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "+\t\t\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\t\tunicodeStoreAt(++this.withoutUnicodePtr);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (!isDigit(this.currentCharacter)) {", "+\t\t\t\t\t\tthrow new InvalidInputException(INVALID_HEXA);", "+\t\t\t\t\t}", "+\t\t\t\t\twhile (getNextCharAsDigit()){/*empty*/}", "+\t\t\t\t\tif (getNextChar('f', 'F') >= 0) {", "+\t\t\t\t\t\treturn TokenNameFloatingPointLiteral;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (getNextChar('d', 'D') >= 0) {", "+\t\t\t\t\t\treturn TokenNameDoubleLiteral;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (getNextChar('l', 'L') >= 0) {", "+\t\t\t\t\t\tthrow new InvalidInputException(INVALID_HEXA);", "+\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t\treturn TokenNameDoubleLiteral;", "+\t\t\t\t} else {", "+\t\t\t\t\tthrow new InvalidInputException(INVALID_HEXA);", "+\t\t\t\t}", "+\t\t\t} else if (getNextChar('p', 'P') >= 0) { // consume next character", "+\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t// if we are in source level < 1.5 we report an integer literal", "+\t\t\t\t\tthis.currentPosition = end;", "+\t\t\t\t\treturn TokenNameIntegerLiteral;", "+\t\t\t\t}", "+\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t} else {", "+\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\tunicodeStoreAt(++this.withoutUnicodePtr);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\tif ((this.currentCharacter == '-')", "+\t\t\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "+\t\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\tunicodeStoreAt(++this.withoutUnicodePtr);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (!isDigit(this.currentCharacter))", "+\t\t\t\t\tthrow new InvalidInputException(INVALID_FLOAT);", "+\t\t\t\twhile (getNextCharAsDigit()){/*empty*/}", "+\t\t\t\tif (getNextChar('f', 'F') >= 0)", "+\t\t\t\t\treturn TokenNameFloatingPointLiteral;", "+\t\t\t\tif (getNextChar('d', 'D') >= 0)", "+\t\t\t\t\treturn TokenNameDoubleLiteral;", "+\t\t\t\tif (getNextChar('l', 'L') >= 0) {", "+\t\t\t\t\tthrow new InvalidInputException(INVALID_HEXA);", "+\t\t\t\t}", "+\t\t\t\treturn TokenNameDoubleLiteral;", "+\t\t\t} else {", "+\t\t\t}"]}], "num": 67275}
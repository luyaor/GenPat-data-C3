{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f97439616f0aacb1aa27cd29c0f87bb3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "206185dc911dd8d334794f356f434c00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic static IClasspathEntry elementDecode(Element element, IJavaProject project)", "signatureAfterChange": " \t \tpublic static IClasspathEntry elementDecode(Element element, IJavaProject project)", "diff": ["-\t\t\t\t} else { // another project", "-\t\t\t\t\treturn JavaCore.newProjectEntry(path, isExported);", "+\t\t\t\t} else { ", "+\t\t\t\t\tif (path.segmentCount() == 1) {", "+\t\t\t\t\t\t// another project", "+\t\t\t\t\t\treturn JavaCore.newProjectEntry(path, isExported);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// an invalid source folder", "+\t\t\t\t\t\treturn JavaCore.newSourceEntry(path, inclusionPatterns, exclusionPatterns, outputLocation);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "427417bc509a7477bfea103317f07963", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_3.java", "commitBeforeChange": "c6dd888810ce095c3bc434db7331c97672df2471", "commitAfterChange": "4963d42a9c10fe171a2a05a916f22ef07396123f", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void test21()", "signatureAfterChange": " public void test21()", "diff": ["-\t\tboolean check = computedReferences.indexOf(\"typeRef/AbstractB\\nref/p1\\nref/AbstractB\\nmethodRef/init/0\") >= 0;", "+\t\tboolean check = ", "+\t\t\tcomputedReferences.indexOf(\"typeRef/AbstractB\") >= 0", "+\t\t\t&& computedReferences.indexOf(\"ref/p1\") >= 0", "+\t\t\t&& computedReferences.indexOf(\"ref/AbstractB\") >= 0", "+\t\t\t&& computedReferences.indexOf(\"methodRef/init/0\") >= 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49e614cc1711467847e16a78b042cc3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AnnotationMethodDeclaration.java", "commitBeforeChange": "56a590253c3f035c3be73a22341723982f779ff3", "commitAfterChange": "dce900a45b8c86c66d3ad818e72b3b646d54f5bd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["+\t\t\t\t\t", "-\t\t\t\t\t\tbreak checkAnnotationMethodType;", "+\t\t\t\t\t\tif (returnTypeBinding.dimensions() <= 1) // only 1-dimensional array permitted", "+\t\t\t\t\t\t\tbreak checkAnnotationMethodType;", "-\t\t\t\t\tbreak checkAnnotationMethodType;", "+\t\t\t\t\tif (returnTypeBinding.dimensions() <= 1) // only 1-dimensional array permitted", "+\t\t\t\t\t\tbreak checkAnnotationMethodType;", "-\t\t\t\t\tbreak checkAnnotationMethodType;", "+\t\t\t\t\tif (returnTypeBinding.dimensions() <= 1) // only 1-dimensional array permitted", "+\t\t\t\t\t\tbreak checkAnnotationMethodType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba60801973d0f7717c065fdf2ead8ef0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "4253c3857fdc6ac2b7d8f2fab949e195fec88f49", "commitAfterChange": "72ac6cbecbda631e09e5ff29bcd95cc93135ab26", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "  private String cleanPreTags(String comment)", "signatureAfterChange": "  private String cleanPreTags(String comment)", "diff": ["+\t\t\t}", "+\t\t} else if (line.indexOf(\"<code>\") >= 0) {", "+\t\t\twhile (line.indexOf(\"</code>\") < 0) {", "+\t\t\t\tline = tokenizer.nextToken();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee779a4a6fc82739f2472723df11997f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "7b0f09fd73b49ba4dc507ba4a634d425ab3e92c2", "commitAfterChange": "90ccf89195ab29ecb5a569cf526f683aefa3263d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r public IResource getResource()", "signatureAfterChange": "\r public IResource getResource()", "diff": ["-\t\treturn ((IContainer)root.getResource()).getFolder(new Path(this.getElementName().replace('.', '/')));\r", "+\t\tString elementName = this.getElementName();\r", "+\t\tif (elementName.length() == 0) {\r", "+\t\t\treturn root.getResource();\r", "+\t\t} else {\r", "+\t\t\treturn ((IContainer)root.getResource()).getFolder(new Path(this.getElementName().replace('.', '/')));\r", "+\t\t}\r"]}], "num": 44233}
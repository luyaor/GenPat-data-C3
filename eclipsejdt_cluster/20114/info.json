{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7240e3258b23c06285335d4d39d4f81", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b4e79b4ab4aa76fc1f7318bdf6ceee4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "2b810e9ce6e62d5b8f5d0b01de3fab00973de806", "commitAfterChange": "e07ac4343b59e78d96b40c4bf7bf797b84cb728a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static ClasspathLocation[] computeLocations( \tIWorkspaceRoot workspaceRoot, \tIJavaProject javaProject, \tString outputFolderLocation, \tArrayList sourceFolders, \tSimpleLookupTable binaryResources) throws JavaModelException", "signatureAfterChange": " public static ClasspathLocation[] computeLocations( \tIWorkspaceRoot workspaceRoot, \tIJavaProject javaProject, \tString outputFolderLocation, \tArrayList sourceFolders, \tSimpleLookupTable binaryResources) throws JavaModelException", "diff": ["-\tIClasspathEntry[] classpathEntries = ((JavaProject) javaProject).getExpandedClasspath(true, true);", "+\t/* Update incomplete classpath marker (generateMarkerOnError */", "+\tIClasspathEntry[] classpathEntries = ((JavaProject) javaProject).getExpandedClasspath(true /*ignoreUnresolvedVariable*/, true /*generateMarkerOnError*/);", "+\t", "+\t/* Update cycle marker */", "+\tIMarker cycleMarker = ((JavaProject) javaProject).getCycleMarker();", "+\tif (cycleMarker != null) {", "+\t\tString circularCPOption = JavaCore.getOption(JavaCore.CORE_CIRCULAR_CLASSPATH);", "+\t\tint circularCPSeverity = JavaCore.ERROR.equals(circularCPOption) ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING;", "+\t\ttry {", "+\t\t\tint existingSeverity = ((Integer)cycleMarker.getAttribute(IMarker.SEVERITY)).intValue();", "+\t\t\tif (existingSeverity != circularCPSeverity) {", "+\t\t\t\tcycleMarker.setAttribute(IMarker.SEVERITY, circularCPSeverity);", "+\t\t\t}", "+\t\t} catch (CoreException e) {", "+\t\t\tthrow new JavaModelException(e);", "+\t\t}", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d20009d2da8c6f70d6d3163c13a9c68f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "2b810e9ce6e62d5b8f5d0b01de3fab00973de806", "commitAfterChange": "e07ac4343b59e78d96b40c4bf7bf797b84cb728a", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 90, "signatureBeforeChange": " \tpublic static void updateAllCycleMarkers() throws JavaModelException", "signatureAfterChange": " \tpublic static void updateAllCycleMarkers() throws JavaModelException", "diff": ["-\t\t\t\tif (!project.hasCycleMarker()){", "+\t\t\t\tIMarker cycleMarker = project.getCycleMarker();", "+\t\t\t\tString circularCPOption = JavaCore.getOption(JavaCore.CORE_CIRCULAR_CLASSPATH);", "+\t\t\t\tint circularCPSeverity = JavaCore.ERROR.equals(circularCPOption) ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING;", "+\t\t\t\tif (cycleMarker != null) {", "+\t\t\t\t\t// update existing cycle marker if needed", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tint existingSeverity = ((Integer)cycleMarker.getAttribute(IMarker.SEVERITY)).intValue();", "+\t\t\t\t\t\tif (existingSeverity != circularCPSeverity) {", "+\t\t\t\t\t\t\tcycleMarker.setAttribute(IMarker.SEVERITY, circularCPSeverity);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\tthrow new JavaModelException(e);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// create new marker", "-\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\t\tcircularCPSeverity,"]}], "num": 20114}
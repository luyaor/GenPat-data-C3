{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e4d66ee8755f2ef2d4fadbdc12f0844", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "585849844e6ffa710fe4728765f631e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKey.java", "commitBeforeChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "commitAfterChange": "8c76b4014ea5428c07ebba6a1cc324074d6e35bd", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit, CompilationUnitResolver resolver)", "signatureAfterChange": " \t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit, CompilationUnitResolver resolver)", "diff": ["+ \t\t\t\tTypeBinding typeBinding = null;", "+ \t\t\t\tif (this.scanner.isAtParametersStart()) {", "+\t\t\t\t\tif (this.scanner.isAtTypeParameterStart())\t \t\t\t\t\t", "+\t \t\t\t\t\t// generic type binding", "+\t \t\t\t\t\ttypeBinding = getGenericTypeBinding((SourceTypeBinding) binding, resolver);", "+\t \t\t\t\telse if (this.scanner.isAtTypeStart())", "+ \t\t\t\t\t\t// parameterized type binding", "+\t \t\t\t\t\ttypeBinding = getParameterizedTypeBinding((ReferenceBinding) binding, null/*no enclosing type*/, resolver); ", "+ \t\t\t\t} else if (binding.typeVariables().length > 0)", "+ \t\t\t\t\t// raw type binding", "+ \t\t\t\t\ttypeBinding = resolver.lookupEnvironment.createRawType((ReferenceBinding) binding, null/*no enclosing type*/);", "+ \t\t\t\telse", "+\t\t\t\t\t// non-generic type binding", "+\t\t\t\t\ttypeBinding = binding;", "-\t\t \t\t\t\t\treturn getFieldBinding(((SourceTypeBinding) binding).fields);", "+\t\t \t\t\t\t\treturn getFieldBinding(((ReferenceBinding) typeBinding).fields());", "-\t\t \t\t\t\t\tMethodBinding methodBinding = getMethodBinding(((SourceTypeBinding) binding).methods, resolver);", "+\t\t \t\t\t\t\tMethodBinding methodBinding = getMethodBinding(((ReferenceBinding) typeBinding).methods(), resolver);", "+\t\t \t\t\t\t\tif (this.scanner.isAtParametersStart())", "+\t\t \t\t\t\t\t\t// parameterized generic method binding", "+\t\t \t\t\t\t\t\tmethodBinding = getParameterizedGenericMethodBinding(methodBinding, resolver);", "-\t \t\t\t\tTypeBinding typeBinding = null;", "-\t \t\t\t\tif (this.scanner.isAtParametersStart()) {", "-\t\t\t\t\t\tif (this.scanner.isAtTypeParameterStart())\t \t\t\t\t\t", "-\t\t \t\t\t\t\t// generic type binding", "-\t\t \t\t\t\t\ttypeBinding = getGenericTypeBinding((SourceTypeBinding) binding, resolver);", "-\t\t \t\t\t\telse if (this.scanner.isAtTypeStart())", "-\t \t\t\t\t\t\t// parameterized type binding", "-\t\t \t\t\t\t\ttypeBinding = getParameterizedTypeBinding((ReferenceBinding) binding, null/*no enclosing type*/, resolver); ", "-\t \t\t\t\t} else if (binding.typeVariables().length > 0)", "-\t \t\t\t\t\t// raw type binding", "-\t \t\t\t\t\ttypeBinding = resolver.lookupEnvironment.createRawType((ReferenceBinding) binding, null/*no enclosing type*/);", "-\t \t\t\t\telse", "- \t\t\t\t\t\t// non-generic type binding", "- \t\t\t\t\t\ttypeBinding = binding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ec0b7ed649655e1adff2243efde7859", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKey.java", "commitBeforeChange": "65bc58d731b2b7495611004f31fbf68869bf0c34", "commitAfterChange": "a618dea008dd005a2062d94159d61d7900b021b7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit, CompilationUnitResolver resolver)", "signatureAfterChange": " \t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit)", "diff": ["-\t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit, CompilationUnitResolver resolver) {", "+\t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit) {", "-\t \t\t\treturn new PackageBinding(this.compoundName, null, resolver.lookupEnvironment);", "+\t \t\t\treturn new PackageBinding(this.compoundName, null, this.environment);", "-\t \t\t\t\t\treturn getArrayBinding(this.dimension, baseTypeBinding, resolver);", "+\t \t\t\t\t\treturn getArrayBinding(this.dimension, baseTypeBinding);", "-\t \t\t\t\treturn getBinaryBinding(resolver);", "+\t \t\t\t\treturn getBinaryBinding();", "-\t \t\t\tTypeBinding binding = getTypeBinding(parsedUnit, parsedUnit.types, typeName, resolver);", "+\t \t\t\tTypeBinding binding = getTypeBinding(parsedUnit, parsedUnit.types, typeName);", "-\t \t\t\t\t\ttypeBinding = getGenericTypeBinding((SourceTypeBinding) binding, resolver);", "+\t \t\t\t\t\ttypeBinding = getGenericTypeBinding((SourceTypeBinding) binding);", "-\t \t\t\t\t\ttypeBinding = getParameterizedTypeBinding((ReferenceBinding) binding, null/*no enclosing type*/, resolver); ", "+\t \t\t\t\t\ttypeBinding = getParameterizedTypeBinding((ReferenceBinding) binding, null/*no enclosing type*/); ", "- \t\t\t\t\ttypeBinding = resolver.lookupEnvironment.createRawType((ReferenceBinding) binding, null/*no enclosing type*/);", "+ \t\t\t\t\ttypeBinding = this.environment.createRawType((ReferenceBinding) binding, null/*no enclosing type*/);", "-\t\t \t\t\t\t\tMethodBinding methodBinding = getMethodBinding(((ReferenceBinding) typeBinding).methods(), resolver);", "+\t\t \t\t\t\t\tMethodBinding methodBinding = getMethodBinding(((ReferenceBinding) typeBinding).methods());", "-\t\t \t\t\t\t\t\tmethodBinding = getParameterizedGenericMethodBinding(methodBinding, resolver);", "+\t\t \t\t\t\t\t\tmethodBinding = getParameterizedGenericMethodBinding(methodBinding);", "-\t \t\t\t\treturn getArrayBinding(dim, typeBinding, resolver);", "+\t \t\t\t\treturn getArrayBinding(dim, typeBinding);"]}], "num": 66831}
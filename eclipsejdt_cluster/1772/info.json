{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dbcd6869bf888c5dff4a9971ba9271c1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09b7048b0797c22eb1310b6f54f483e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode( \tBlockScope currentScope,  \tCodeStream codeStream,  \tboolean valueRequired)", "signatureAfterChange": " public void generateCode( \tBlockScope currentScope,  \tCodeStream codeStream,  \tboolean valueRequired)", "diff": ["-\tReferenceBinding allocatedType = this.binding.declaringClass;", "+\tReferenceBinding allocatedType = this.codegenBinding.declaringClass;", "-\tif (this.binding.canBeSeenBy(allocatedType, this, currentScope)) {", "+\tif (this.codegenBinding.canBeSeenBy(allocatedType, this, currentScope)) {", "-\t\tcodeStream.invokespecial(this.binding);", "+\t\tcodeStream.invokespecial(this.codegenBinding);", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForConstructor(currentScope, this.binding);", "+\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForConstructor(currentScope, this.codegenBinding);", "-\t\t\tcodeStream.newArray(currentScope, new ArrayBinding(currentScope.getType(TypeConstants.JAVA_LANG_OBJECT), 1));", "+\t\t\tcodeStream.newArray(currentScope, currentScope.createArrayType(currentScope.getType(TypeConstants.JAVA_LANG_OBJECT, 3), 1));", "-\t\t\t\tTypeBinding parameterBinding = this.binding.parameters[i];", "+\t\t\t\tTypeBinding parameterBinding = this.codegenBinding.parameters[i];", "-\t\t\t\t\t((CodeSnippetCodeStream)codeStream).generateObjectWrapperForType(this.binding.parameters[i]);", "+\t\t\t\t\t((CodeSnippetCodeStream)codeStream).generateObjectWrapperForType(this.codegenBinding.parameters[i]);", "-\t\t\tcodeStream.newArray(currentScope, new ArrayBinding(currentScope.getType(TypeConstants.JAVA_LANG_OBJECT), 1));\t\t\t", "+\t\t\tcodeStream.newArray(currentScope, currentScope.createArrayType(currentScope.getType(TypeConstants.JAVA_LANG_OBJECT, 3), 1));\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47ac836ab0070aeae5b6d4c8b60c3c39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode( \tBlockScope currentScope,  \tCodeStream codeStream,  \tboolean valueRequired)", "signatureAfterChange": " public void generateCode( \tBlockScope currentScope,  \tCodeStream codeStream,  \tboolean valueRequired)", "diff": ["-\tReferenceBinding allocatedType = binding.declaringClass;", "+\tReferenceBinding allocatedType = this.binding.declaringClass;", "-\tif (binding.canBeSeenBy(allocatedType, this, currentScope)) {", "+\tif (this.binding.canBeSeenBy(allocatedType, this, currentScope)) {", "-\t\tcodeStream.recordPositionsFrom(pc, type.sourceStart);", "+\t\tcodeStream.recordPositionsFrom(pc, this.type.sourceStart);", "-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0, count = arguments.length; i < count; i++) {", "-\t\t\t\targuments[i].generateCode(currentScope, codeStream, true);", "+\t\tif (this.arguments != null) {", "+\t\t\tfor (int i = 0, count = this.arguments.length; i < count; i++) {", "+\t\t\t\tthis.arguments[i].generateCode(currentScope, codeStream, true);", "-\t\tcodeStream.invokespecial(binding);", "+\t\tcodeStream.invokespecial(this.binding);", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForConstructor(currentScope, binding);", "+\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForConstructor(currentScope, this.binding);", "-\t\tif (arguments != null) {", "-\t\t\tint argsLength = arguments.length;", "+\t\tif (this.arguments != null) {", "+\t\t\tint argsLength = this.arguments.length;", "-\t\t\t\targuments[i].generateCode(currentScope, codeStream, true);", "-\t\t\t\tTypeBinding parameterBinding = binding.parameters[i];", "+\t\t\t\tthis.arguments[i].generateCode(currentScope, codeStream, true);", "+\t\t\t\tTypeBinding parameterBinding = this.binding.parameters[i];", "-\t\t\t\t\t((CodeSnippetCodeStream)codeStream).generateObjectWrapperForType(binding.parameters[i]);", "+\t\t\t\t\t((CodeSnippetCodeStream)codeStream).generateObjectWrapperForType(this.binding.parameters[i]);"]}], "num": 1772}
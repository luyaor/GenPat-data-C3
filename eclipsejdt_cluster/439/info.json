{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c8cac688a1b684c73d549d1a5d75235a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "904df8b6f3b0c58fa2a0157044c02dd2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "commitAfterChange": "8f130374b1740d04a2a1a32967cf4d9130b4bd12", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void complainOnDeferredNullChecks(BlockScope scope, FlowInfo callerFlowInfo)", "signatureAfterChange": " public void complainOnDeferredNullChecks(BlockScope scope, FlowInfo callerFlowInfo)", "diff": ["-\t\t\tVariableBinding local = this.nullVariables[i];", "+\t\t\tLocalVariableBinding local = this.nullLocals[i];", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, location);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, location);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, location);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, location);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, location);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, location);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, location);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, expression);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantNullAssignment(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantNullAssignment(local, expression);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNullInstanceof(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullInstanceof(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, expression);", "-\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, location);", "+\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, location);", "-\t\t\t\t\tif (local instanceof LocalVariableBinding) {", "-\t\t\t\t\t\tFakedTrackingVariable trackingVar = ((LocalVariableBinding) local).closeTracker;", "+\t\t\t\t\t\tFakedTrackingVariable trackingVar = local.closeTracker;", "-\t\t\t\t\t}", "-\t\t\tVariableBinding local = this.nullVariables[i];", "+\t\t\tLocalVariableBinding local = this.nullLocals[i];", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, location);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, location);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, expression);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantNullAssignment(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantNullAssignment(local, expression);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNullInstanceof(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullInstanceof(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, expression);", "-\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, location);", "+\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, location);", "-\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, location);", "+\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, location);", "-\t\t\t\t\tif (nullStatus != FlowInfo.NON_NULL && local instanceof LocalVariableBinding) {", "-\t\t\t\t\t\tFakedTrackingVariable closeTracker = ((LocalVariableBinding)local).closeTracker;", "+\t\t\t\t\tif (nullStatus != FlowInfo.NON_NULL) {", "+\t\t\t\t\t\tFakedTrackingVariable closeTracker = local.closeTracker;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0defd134dffb6030c703442f93040ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "99e06cdf0656ed0f6c3eb604300a8baae7ee3beb", "commitAfterChange": "d6c2a90130be430285c5f6a000090d250c310afd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void complainOnDeferredNullChecks(BlockScope scope, FlowInfo callerFlowInfo)", "signatureAfterChange": " public void complainOnDeferredNullChecks(BlockScope scope, FlowInfo callerFlowInfo)", "diff": ["-\t\t\tLocalVariableBinding local = this.nullLocals[i];", "+\t\t\tVariableBinding local = this.nullVariables[i];", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, expression);", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, expression);", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, expression);", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, expression);", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, expression);", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, expression);", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantNullAssignment(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantNullAssignment(local, expression);", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullInstanceof(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableNullInstanceof(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, expression);", "-\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, expression);", "+\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, expression);", "-\t\t\tLocalVariableBinding local = this.nullLocals[i];", "+\t\t\tVariableBinding local = this.nullVariables[i];", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, expression);", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, expression);", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantNullAssignment(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantNullAssignment(local, expression);", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullInstanceof(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableNullInstanceof(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, expression);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, expression);", "-\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, expression);", "+\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, expression);", "-\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, expression);", "+\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, expression);"]}], "num": 439}
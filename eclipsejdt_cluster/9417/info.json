{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e79e0cf57020cfa00d03756dfb3ec607", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27a662ab0bf1c5f1dd1cffd2e78cdb64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "e6099120ee9021152f84e60105066d4964c2db21", "commitAfterChange": "82631a98caad8b28e9cefb217339d51e64ef47f9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public CompilationUnitDeclaration buildBindings(org.eclipse.jdt.core.ICompilationUnit compilationUnit) throws JavaModelException", "signatureAfterChange": "\r public CompilationUnitDeclaration buildBindings(org.eclipse.jdt.core.ICompilationUnit compilationUnit) throws JavaModelException", "diff": ["-\tMatchSet originalMatchSet = this.parser.matchSet;\r", "-\ttry {\r", "-\t\tthis.parser.matchSet = new MatchSet(this);\r", "-\t\tCompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0);\r", "-\t\tunit = this.parser.dietParse(sourceUnit, compilationResult);\r", "-\t} finally {\r", "-\t\tif (originalMatchSet == null) {\r", "-\t\t\tif (!this.parser.matchSet.isEmpty() \r", "-\t\t\t\t\t&& unit != null) {\r", "-\t\t\t\t// potential matches were found while initializing the search pattern\r", "-\t\t\t\t// from the lookup environment: add the corresponding openable in the list\r", "-\t\t\t\tMatchingOpenable matchingOpenable = \r", "-\t\t\t\t\tnew MatchingOpenable(\r", "-\t\t\t\t\t\tthis,\r", "-\t\t\t\t\t\tfile, \r", "-\t\t\t\t\t\t(CompilationUnit)compilationUnit, \r", "-\t\t\t\t\t\tunit,\r", "-\t\t\t\t\t\tthis.parser.matchSet);\r", "-\t\t\t\tthis.matchingOpenables.add(matchingOpenable);\r", "-\t\t\t}\r", "-\t\t\tthis.parser.matchSet = null;\r", "-\t\t} else {\r", "-\t\t\tthis.parser.matchSet = originalMatchSet;\r", "-\t\t}\r", "-\t}\r", "+\tunit = this.parser.dietParse(sourceUnit, this, file, (CompilationUnit)compilationUnit);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d63f9562f28c1e4312a8fc331d978d57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ExternalFoldersManager.java", "commitBeforeChange": "52bcd11b027159dafabbf3cf6f9d177a13351775", "commitAfterChange": "ee8099c3ec35bd16fde9c1edf1cbb0dd9d874457", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic synchronized void cleanUp(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": "  \tpublic void cleanUp(IProgressMonitor monitor) throws CoreException", "diff": ["-\tpublic synchronized void cleanUp(IProgressMonitor monitor) throws CoreException {", "+\tpublic void cleanUp(IProgressMonitor monitor) throws CoreException {", "+\t\tArrayList toDelete = getFoldersToCleanUp(monitor);", "+\t\tif (toDelete == null)", "+\t\t\treturn;", "+\t\tfor (Iterator iterator = toDelete.iterator(); iterator.hasNext();) {", "+\t\t\tIFolder folder = (IFolder) iterator.next();", "+\t\t\tfolder.delete(true, monitor);", "+\t\t}", "+\t\tIProject project = getExternalFoldersProject();", "+\t\tif (project.isAccessible() && project.members().length == 1/*remaining member is .project*/)", "+\t\t\tproject.delete(true, monitor);", "+\t}", "-\t\t\treturn;", "-\t\t\t\tif (folder != null)", "-\t\t\t\t\tfolder.delete(true, monitor);", "-\t\tIProject project = getExternalFoldersProject();", "-\t\tif (project.isAccessible() && project.members().length == 1/*remaining member is .project*/)", "-\t\t\tproject.delete(true, monitor);"]}], "num": 9417}
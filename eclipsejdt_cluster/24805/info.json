{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a9ce4cbebab219658f93fde0548e452", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "326e2e6a8fb7b89d53538a9ec620afae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/diagnose/DiagnoseParser.java", "commitBeforeChange": "5fa6afe954089094ae8cca4de90fd35757e48b64", "commitAfterChange": "ae67359ba1af0f32a3cb74678feaffc1673aa2c9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate RepairCandidate errorRecovery(int error_token)", "signatureAfterChange": " \tprivate RepairCandidate errorRecovery(int error_token, boolean forcedError)", "diff": ["-\tprivate RepairCandidate errorRecovery(int error_token) {", "+\tprivate RepairCandidate errorRecovery(int error_token, boolean forcedError) {", "+\t\t", "+\t\tif(forcedError) {", "+\t\t\tint name_index = Parser.terminal_index[TokenNameLBRACE];", "+", "+\t\t\treportError(INSERTION_CODE, name_index, prevtok, prevtok);", "+\t\t\t", "+\t\t\tRepairCandidate candidate = new RepairCandidate();", "+\t\t\tcandidate.symbol = TokenNameLBRACE;", "+\t\t\tcandidate.location = error_token;", "+\t\t\tlexStream.reset(error_token);", "+\t\t\t", "+\t\t\tstateStackTop = nextStackTop;", "+\t\t\tfor (int j = 0; j <= stateStackTop; j++) {", "+\t\t\t\tstack[j] = nextStack[j];", "+\t\t\t}", "+\t\t\tlocationStack[stateStackTop] = error_token;", "+\t\t\tlocationStartStack[stateStackTop] = lexStream.start(error_token);", "+\t\t\t", "+\t\t\treturn candidate;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74f43e1b7769dd4549c1e20e6452a609", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java", "commitBeforeChange": "5bd6b9d7331a9e7fe82d427994d62e0af1821389", "commitAfterChange": "a49b0379fae683770f815e7e32d76b4ebea892ec", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["+\tint nextToken = this.getNextToken0();", "+\tif (this.record) {", "+\t\tswitch (nextToken) {", "+\t\t\tcase TokenNameIdentifier:", "+\t\t\t\tif (this.currentToken != TokenNameDOT) {", "+\t\t\t\t\tchar[] identifier = this.getCurrentIdentifierSource();", "+\t\t\t\t\tif (!Character.isUpperCase(identifier[0]) && ", "+\t\t\t\t\t\t\tCharOperation.prefixEquals(this.prefix, identifier, true)) {", "+\t\t\t\t\t\tthis.addPotentialName(identifier, this.startPosition);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameLPAREN :", "+\t\t\tcase TokenNameLBRACE :", "+\t\t\t\tif (this.currentToken == TokenNameIdentifier) {", "+\t\t\t\t\tthis.removePotentialNamesAt(this.currentTokenStart);", "+\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t}", "+\t}", "+\tthis.currentToken = nextToken;", "+\tthis.currentTokenStart = this.startPosition;", "+\treturn nextToken;", "+}"]}], "num": 24805}
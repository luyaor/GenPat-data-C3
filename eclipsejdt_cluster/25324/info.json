{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b48c3ec99573a5296958b513a7e7eddb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7613306f3e07cd493fec3404f25e5ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "9f6007a11f2d0f4bad899b1cbfaf9d942b43a451", "commitAfterChange": "b6ef8906908f58bf234a11b3c3bc9c9b1d585dcc", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["+\t\t\t\t\t\tif (levelj == VARARGS_COMPATIBLE && levelk == VARARGS_COMPATIBLE) {", "+\t\t\t\t\t\t\tTypeBinding s = InferenceContext18.getParameter(mbjParameters, argumentTypes.length, true);", "+\t\t\t\t\t\t\tTypeBinding t = InferenceContext18.getParameter(mbkParameters, argumentTypes.length, true);", "+\t\t\t\t\t\t\tif (TypeBinding.notEquals(s, t) && t.isSubtypeOf(s))", "+\t\t\t\t\t\t\t\tcontinue nextJ;", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f50314c4f71b3e85dc3f3f57704c4470", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "7ff9b5e7960c9af4d2ba07d3470483b51a02c825", "commitAfterChange": "712b704995b043e4a4d99ad30227e5434cb6503c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "signatureAfterChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "diff": ["-\t\t\t\tTypeBinding parameterType = InferenceContext18.getParameter(parameters, i, variableArity); ", "+\t\t\t\tTypeBinding parameterType = InferenceContext18.getParameter(parameters, i, variableArity);", "+\t\t\t\tif (parameterType == null && problemReason != ProblemReasons.NoError)", "+\t\t\t\t\tcontinue; // not much we can do without a target type, assume it only happens after some resolve error"]}], "num": 25324}
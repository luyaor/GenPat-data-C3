{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cdfa78ba18aabdf7f6b6a53f049a0e51", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "239d3c2eb24c75fd5bb1315a04f990f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "7c822c57ef10d00c0850376434095c09c62bf945", "commitAfterChange": "97d56944c70dcb61876e816b166a34995344938d", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 37, "signatureBeforeChange": "  \tprivate void generateElementValue( \t\t\tExpression defaultValue, \t\t\tTypeBinding memberValuePairReturnType, \t\t\tint attributeOffset)", "signatureAfterChange": "  \tprivate void generateElementValue( \t\t\tExpression defaultValue, \t\t\tTypeBinding memberValuePairReturnType, \t\t\tint attributeOffset)", "diff": ["-\tprivate void generateElementValue(", "-\t\t\tExpression defaultValue,", "-\t\t\tTypeBinding memberValuePairReturnType,", "-\t\t\tint attributeOffset) {", "-\t\tConstant constant = defaultValue.constant;", "-\t\tTypeBinding defaultValueBinding = defaultValue.resolvedType;", "-\t\tif (constant != null && constant != Constant.NotAConstant) {", "-\t\t\tif (memberValuePairReturnType.isArrayType() && !defaultValueBinding.isArrayType()) {", "-\t\t\t\t// automatic wrapping", "-\t\t\t\tif (contentsOffset + 1 >= this.contents.length) {", "-\t\t\t\t\tresizeContents(1);", "-\t\t\t\t}", "-\t\t\t\tcontents[contentsOffset++] = (byte) '[';", "-\t\t\t\tcontents[contentsOffset++] = (byte) 0;", "-\t\t\t\tcontents[contentsOffset++] = (byte) 1;", "-\t\t\t}", "-\t\t\tgenerateElementValue(attributeOffset, defaultValue, constant);", "-\t\t} else {", "-\t\t\tif (defaultValueBinding != null) {", "-\t\t\t\tif (defaultValueBinding.isEnum()) {", "-\t\t\t\t\tif (contentsOffset + 5 >= this.contents.length) {", "-\t\t\t\t\t\tresizeContents(5);", "-\t\t\t\t\t}", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) 'e';", "-\t\t\t\t\tFieldBinding fieldBinding = null;", "-\t\t\t\t\tif (defaultValue instanceof QualifiedNameReference) {", "-\t\t\t\t\t\tQualifiedNameReference nameReference = (QualifiedNameReference) defaultValue;", "-\t\t\t\t\t\tfieldBinding = (FieldBinding) nameReference.binding;", "-\t\t\t\t\t} else if (defaultValue instanceof SingleNameReference) {", "-\t\t\t\t\t\tSingleNameReference nameReference = (SingleNameReference) defaultValue;", "-\t\t\t\t\t\tfieldBinding = (FieldBinding) nameReference.binding;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcontentsOffset = attributeOffset;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (fieldBinding != null) {", "-\t\t\t\t\t\tfinal int enumConstantTypeNameIndex = constantPool.literalIndex(fieldBinding.type.signature());", "-\t\t\t\t\t\tfinal int enumConstantNameIndex = constantPool.literalIndex(fieldBinding.name);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (enumConstantTypeNameIndex >> 8);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) enumConstantTypeNameIndex;", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (enumConstantNameIndex >> 8);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) enumConstantNameIndex;", "-\t\t\t\t\t}", "-\t\t\t\t} else if (defaultValueBinding.isAnnotationType()) {", "-\t\t\t\t\tif (contentsOffset + 1 >= this.contents.length) {", "-\t\t\t\t\t\tresizeContents(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) '@';", "-\t\t\t\t\tgenerateAnnotation((Annotation) defaultValue, attributeOffset);", "-\t\t\t\t} else if (defaultValueBinding.isArrayType()) {", "-\t\t\t\t\t// array type", "-\t\t\t\t\tif (contentsOffset + 1 >= this.contents.length) {", "-\t\t\t\t\t\tresizeContents(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) '[';", "-\t\t\t\t\tif (defaultValue instanceof ArrayInitializer) {", "-\t\t\t\t\t\tArrayInitializer arrayInitializer = (ArrayInitializer) defaultValue;", "-\t\t\t\t\t\tint arrayLength = arrayInitializer.expressions != null ? arrayInitializer.expressions.length : 0;", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (arrayLength >> 8);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) arrayLength;", "-\t\t\t\t\t\tfor (int i = 0; i < arrayLength; i++) {", "-\t\t\t\t\t\t\tgenerateElementValue(arrayInitializer.expressions[i], attributeOffset);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcontentsOffset = attributeOffset;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// class type", "-\t\t\t\t\tif (contentsOffset + 3 >= this.contents.length) {", "-\t\t\t\t\t\tresizeContents(3);", "-\t\t\t\t\t}", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) 'c';", "-\t\t\t\t\tif (defaultValue instanceof ClassLiteralAccess) {", "-\t\t\t\t\t\tClassLiteralAccess classLiteralAccess = (ClassLiteralAccess) defaultValue;", "-\t\t\t\t\t\tfinal int classInfoIndex = constantPool.literalIndex(classLiteralAccess.targetType.signature());", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (classInfoIndex >> 8);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) classInfoIndex;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcontentsOffset = attributeOffset;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tcontentsOffset = attributeOffset;", "-\t\t\t}", "-\t\t}", "-\t}", "+", "+\tprivate void generateElementValue(", "+\t\t\tExpression defaultValue,", "+\t\t\tTypeBinding memberValuePairReturnType,", "+\t\t\tint attributeOffset) {", "+\t\tConstant constant = defaultValue.constant;", "+\t\tTypeBinding defaultValueBinding = defaultValue.resolvedType;", "+\t\tif (memberValuePairReturnType.isArrayType() && !defaultValueBinding.isArrayType()) {", "+\t\t\t// automatic wrapping", "+\t\t\tif (contentsOffset + 3 >= this.contents.length) {", "+\t\t\t\tresizeContents(3);", "+\t\t\tcontents[contentsOffset++] = (byte) '[';", "+\t\t\tcontents[contentsOffset++] = (byte) 0;", "+\t\t\tcontents[contentsOffset++] = (byte) 1;", "+\t\t}", "+\t\tif (constant != null && constant != Constant.NotAConstant) {", "+\t\t\tgenerateElementValue(attributeOffset, defaultValue, constant);", "+\t\t} else {", "+\t\t\tgenerateElementValueForNonConstantExpression(defaultValue, attributeOffset, defaultValueBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9da0f98d3f76cef804d24f9c4d0259ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "7c822c57ef10d00c0850376434095c09c62bf945", "commitAfterChange": "97d56944c70dcb61876e816b166a34995344938d", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tprivate void generateElementValue(Expression defaultValue, int attributeOffset)", "signatureAfterChange": " \tprivate void generateElementValue(Expression defaultValue, int attributeOffset)", "diff": ["-\t\t\tif (defaultValueBinding != null) {", "-\t\t\t\tif (defaultValueBinding.isEnum()) {", "-\t\t\t\t\tif (contentsOffset + 5 >= this.contents.length) {", "-\t\t\t\t\t\tresizeContents(5);", "-\t\t\t\t\t}", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) 'e';", "-\t\t\t\t\tFieldBinding fieldBinding = null;", "-\t\t\t\t\tif (defaultValue instanceof QualifiedNameReference) {", "-\t\t\t\t\t\tQualifiedNameReference nameReference = (QualifiedNameReference) defaultValue;", "-\t\t\t\t\t\tfieldBinding = (FieldBinding) nameReference.binding;", "-\t\t\t\t\t} else if (defaultValue instanceof SingleNameReference) {", "-\t\t\t\t\t\tSingleNameReference nameReference = (SingleNameReference) defaultValue;", "-\t\t\t\t\t\tfieldBinding = (FieldBinding) nameReference.binding;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcontentsOffset = attributeOffset;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (fieldBinding != null) {", "-\t\t\t\t\t\tfinal int enumConstantTypeNameIndex = constantPool.literalIndex(fieldBinding.type.signature());", "-\t\t\t\t\t\tfinal int enumConstantNameIndex = constantPool.literalIndex(fieldBinding.name);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (enumConstantTypeNameIndex >> 8);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) enumConstantTypeNameIndex;", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (enumConstantNameIndex >> 8);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) enumConstantNameIndex;", "-\t\t\t\t\t}", "-\t\t\t\t} else if (defaultValueBinding.isAnnotationType()) {", "-\t\t\t\t\tif (contentsOffset + 1 >= this.contents.length) {", "-\t\t\t\t\t\tresizeContents(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) '@';", "-\t\t\t\t\tgenerateAnnotation((Annotation) defaultValue, attributeOffset);", "-\t\t\t\t} else if (defaultValueBinding.isArrayType()) {", "-\t\t\t\t\t// array type", "-\t\t\t\t\tif (contentsOffset + 1 >= this.contents.length) {", "-\t\t\t\t\t\tresizeContents(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) '[';", "-\t\t\t\t\tif (defaultValue instanceof ArrayInitializer) {", "-\t\t\t\t\t\tArrayInitializer arrayInitializer = (ArrayInitializer) defaultValue;", "-\t\t\t\t\t\tint arrayLength = arrayInitializer.expressions != null ? arrayInitializer.expressions.length : 0;", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (arrayLength >> 8);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) arrayLength;", "-\t\t\t\t\t\tfor (int i = 0; i < arrayLength; i++) {", "-\t\t\t\t\t\t\tgenerateElementValue(arrayInitializer.expressions[i], attributeOffset);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcontentsOffset = attributeOffset;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// class type", "-\t\t\t\t\tif (contentsOffset + 3 >= this.contents.length) {", "-\t\t\t\t\t\tresizeContents(3);", "-\t\t\t\t\t}", "-\t\t\t\t\tcontents[contentsOffset++] = (byte) 'c';", "-\t\t\t\t\tif (defaultValue instanceof ClassLiteralAccess) {", "-\t\t\t\t\t\tClassLiteralAccess classLiteralAccess = (ClassLiteralAccess) defaultValue;", "-\t\t\t\t\t\tfinal int classInfoIndex = constantPool.literalIndex(classLiteralAccess.targetType.signature());", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) (classInfoIndex >> 8);", "-\t\t\t\t\t\tcontents[contentsOffset++] = (byte) classInfoIndex;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcontentsOffset = attributeOffset;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tcontentsOffset = attributeOffset;", "+\t\t\tgenerateElementValueForNonConstantExpression(defaultValue, attributeOffset, defaultValueBinding);", "+\t\t}", "+\t}"]}], "num": 3318}
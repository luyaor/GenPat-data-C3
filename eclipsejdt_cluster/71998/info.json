{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d21e58a91e4c7b2f84a73b7910717137", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ed638f16f21b579a9391a36120b48c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java", "commitBeforeChange": "bbf8bed45f301e3c1311bf7420412781e2f72822", "commitAfterChange": "4b38f12e0fbe8666ccacbe87e7c3a7747f09c440", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " private IBuffer mapSource(SourceMapper mapper, IBinaryType info)", "signatureAfterChange": " private IBuffer mapSource(SourceMapper mapper, IBinaryType info, IClassFile bufferOwner)", "diff": ["-private IBuffer mapSource(SourceMapper mapper, IBinaryType info) {", "+/** Loads the buffer via SourceMapper, and maps it in SourceMapper */", "+private IBuffer mapSource(SourceMapper mapper, IBinaryType info, IClassFile bufferOwner) {", "-\t\tIBuffer buffer = BufferManager.createBuffer(this);", "+\t\tIBuffer buffer = BufferManager.createBuffer(bufferOwner);", "-\t\tmapper.mapSource(getType(), contents, info);", "+\t\tmapper.mapSource(getOuterMostEnclosingType(), contents, info);", "-\t\tIBuffer buffer = BufferManager.createNullBuffer(this);", "+\t\tIBuffer buffer = BufferManager.createNullBuffer(bufferOwner);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f70d2f7de0da91b79e0d439e5e1debc5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AnnotationParser.java", "commitBeforeChange": "b63ee5a669593061b975bc2def28757d777c16ca", "commitAfterChange": "09bf35df2168c2ab3f5a24971ca9aae42bfc8d5b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate AnnotationMessageSend parseArguments(TypeReference receiver) throws InvalidInputException", "signatureAfterChange": " \tprivate AnnotationMessageSend parseArguments(TypeReference receiver) throws InvalidInputException", "diff": ["+\t */", "-\t\tint modulo = 0; // should be 2 for (Type,Type,...) and 3 for (Type arg,Type arg,...)", "+\t\tint modulo = 0; // should be 2 for (Type,Type,...) or 3 for (Type arg,Type arg,...)", "-\t\t\t\tpushOnAstStack(expr, (iToken == (modulo - 1)));", "+\t\t\t\tpushOnAstStack(expr, firstArg);"]}], "num": 71998}
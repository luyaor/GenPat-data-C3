{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0d7cbfbb456d0039e8e869ef741173b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "032b42923dcaf7eb7b2aef13f6501bfb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4ee57f1aa920ef9dfc0c8991087575befcec8304", "commitAfterChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "methodNumberBeforeChange": 1037, "methodNumberAfterChange": 1037, "signatureBeforeChange": " public void test1012()", "signatureAfterChange": " public void test1012()", "diff": ["-\t\t\"3. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\"\tX x = bar1(l, c);\\n\" + ", "-\t\t\"\t      ^^^^^^^^^^\\n\" + ", "-\t\t\"Type mismatch: cannot convert from Object to X\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 3)\\n\" + ", "-\t\t\"5. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\"6. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\"7. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"6. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\"8. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"7. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\"9. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"8. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\"10. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"9. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\"11. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\"10. ERROR in X.java (at line 14)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08cee028082bc012894a5396aab16ac7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "5d2e6e466ee272d62f273fff98dd2423f77bd2f3", "commitAfterChange": "e702e6a53e23b4f475e9578e987e56b628fcf8d7", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["-\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.rawTypeReference\\\" value=\\\"warning\\\"/>\\n\" +", "+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.potentialNullReference\\\" value=\\\"ignore\\\"/>\\n\" +", "+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.rawTypeReference\\\" value=\\\"warning\\\"/>\\n\" + ", "+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.redundantNullCheck\\\" value=\\\"ignore\\\"/>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e1a1dd1d1ad318c27b90279d16a24b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "009f20126c1d3488d55fd03939439082cc2b8500", "commitAfterChange": "221d108d3944a4b3be482e01878be27efb774a39", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["-\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.maxProblemPerUnit\\\" value=\\\"100\\\"/>\\n\" + ", "+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.maxProblemPerUnit\\\" value=\\\"100\\\"/>\\n\" +", "+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems\\\" value=\\\"enabled\\\"/>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e224fa105299c2d79819b7854e9f087", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "dbfe97bed3f7feb8408fadbcb58741aa04540553", "commitAfterChange": "3d86d8fdd283e92da8b2fd4ec59e7d2f2b4add9f", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.overridingMethodWithoutSuperInvocation\\\" value=\\\"ignore\\\"/>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31d40bc505ef6cca054da1a28bc01e15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "f4d9227034dceb3a18e4968f330b3dba7db068fc", "commitAfterChange": "6ac6c1a4d630061893b41bc323b0736a71add3ff", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-        \"    -processorpath <directories and zip/jar files separated by ;>\\n\" + ", "+        \"    -processorpath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31dce03a050fe2713e0efde9b860e351", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest18.java", "commitBeforeChange": "784f86ce6732cf119976248cf85d648b31a1b3eb", "commitAfterChange": "04ca8b8834b8d337f24654f163a38f7df436213a", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void test438952()", "signatureAfterChange": " public void test438952()", "diff": ["-\t\t\t\t\t\"        {\\n\" + ", "-\t\t\t\t\t\"          {\\n\" + ", "-\t\t\t\t\t\"            <CompleteOnName:>;\\n\" + ", "-\t\t\t\t\t\"          }\\n\" + ", "-\t\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\t\"        <CompleteOnName:>;\\n\" + ", "-\t\t\t\t\t\"        {\\n\" + ", "-\t\t\t\t\t\"          {\\n\" + ", "-\t\t\t\t\t\"            <CompleteOnName:>;\\n\" + ", "-\t\t\t\t\t\"          }\\n\" + ", "-\t\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\t\"        <CompleteOnName:>;\\n\" + ", "-\t\t\t\t\t\"    {\\n\" + ", "-\t\t\t\t\t\"      {\\n\" + ", "-\t\t\t\t\t\"        <CompleteOnName:>;\\n\" + ", "-\t\t\t\t\t\"      }\\n\" + ", "-\t\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\t\"    <CompleteOnName:>;\\n\" + ", "-\t\t\t\t\t\"    {\\n\" + ", "-\t\t\t\t\t\"      {\\n\" + ", "-\t\t\t\t\t\"        <CompleteOnName:>;\\n\" + ", "-\t\t\t\t\t\"      }\\n\" + ", "-\t\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\t\"    <CompleteOnName:>;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33093c5c67494e580db4b558a69091da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "b94498a9448a5b9c5f679d9455940fca0f271602", "commitAfterChange": "485d2265d4a657582a8bc0f8521212137d5dd5af", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["-\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.unnecessaryOperator\\\" value=\\\"ignore\\\"/>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f3566591d3d5d54c38e56c29c91bc2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SortCompilationUnitElementsTests.java", "commitBeforeChange": "e060e0428f7f92647e77ad8da2c7818eb4c4e3a7", "commitAfterChange": "ddf48a7e21056eecd0111cd750a59c8617c397eb", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void test022() throws CoreException", "signatureAfterChange": " public void test022() throws CoreException", "diff": ["-\t\t\t\"\t * Returns whether a build command with the given trigger should\\n\" +", "-\t\t\t\"\t * be enabled for the given selection.\\n\" +", "-\t\t\t\"\t * @param projects The projects to use to determine enablement\\n\" +", "-\t\t\t\"\t * @param trigger The build trigger (<code>IncrementalProjectBuilder.*_BUILD</code> constants).\\n\" +", "-\t\t\t\"\t * @return <code>true</code> if the action should be enabled, and\\n\" +", "-\t\t\t\"\t * <code>false</code> otherwise.\\n\" +", "-\t\t\t\"\t */\\n\" +", "-\t\t\t\"\tpublic static boolean isEnabled(IProject[] projects, int trigger) {\\n\" +", "-\t\t\t\"\t\treturn true;\\n\" +", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"\\n\" +", "-\t\t\t\"\t/**\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"\t/**\\n\" +", "+\t\t\t\"\t * Returns whether a build command with the given trigger should\\n\" +", "+\t\t\t\"\t * be enabled for the given selection.\\n\" +", "+\t\t\t\"\t * @param projects The projects to use to determine enablement\\n\" +", "+\t\t\t\"\t * @param trigger The build trigger (<code>IncrementalProjectBuilder.*_BUILD</code> constants).\\n\" +", "+\t\t\t\"\t * @return <code>true</code> if the action should be enabled, and\\n\" +", "+\t\t\t\"\t * <code>false</code> otherwise.\\n\" +", "+\t\t\t\"\t */\\n\" +", "+\t\t\t\"\tpublic static boolean isEnabled(IProject[] projects, int trigger) {\\n\" +", "+\t\t\t\"\t\treturn true;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42148bbfc330316f9ede9c0c0469da4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "eb727711bfbefbe06ad25a796b42d61ffab45eca", "commitAfterChange": "c4ce580cb0d1d41b788a7611bd30d4cf0eba4f86", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " \tpublic void test084()", "signatureAfterChange": " \tpublic void test084()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "-\t\t\"\tX x = new X((AX)null, (AX)null);\\n\" + ", "-\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Unsafe type operation: The constructor X(AX<String>, AX<String>) should not be applied for the arguments (AX, AX). References to generic types should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\"\tAX a = new AX((AX)null);\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Unsafe type operation: Should not invoke the constructor AX(AX<P>) of raw type AX. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\"\tAX a2 = new AX(null);\\n\" + ", "-\t\t\"\t        ^^^^^^^^^^^^\\n\" + ", "-\t\t\"Unsafe type operation: Should not invoke the constructor AX(AX<P>) of raw type AX. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\"\tx.foo(a);\\n\" + ", "-\t\t\"\t^^^^^^^^\\n\" + ", "-\t\t\"Unsafe type operation: The method foo(AX<String>) in the type X should not be applied for the arguments (AX). References to generic types should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"5. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\"\ta.bar(a);\\n\" + ", "-\t\t\"\t^^^^^^^^\\n\" + ", "-\t\t\"Unsafe type operation: Should not invoke the method bar(AX<P>) of raw type AX. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"6. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\"\tAX<String> as = new AX<String>(null);\\n\" + ", "-\t\t\"\t                ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The constructor AX<String>(AX<String>) is ambiguous\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"7. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\"\tas.print(a);\\n\" + ", "-\t\t\"\t   ^^^^^\\n\" + ", "-\t\t\"The method print(String) in the type AX<String> is not applicable for the arguments (AX)\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"8. WARNING in X.java (at line 15)\\n\" + ", "-\t\t\"\tas.bar(a);\\n\" + ", "-\t\t\"\t^^^^^^^^^\\n\" + ", "-\t\t\"Unsafe type operation: The method bar(AX<P>) in the type AX<String> should not be applied for the arguments (AX). References to generic types should be parameterized\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX x = new X((AX)null, (AX)null);\\n\" + ", "+\t\t\t\"\t            ^^^^^^^^\\n\" + ", "+\t\t\t\"Unsafe type operation: Should not convert expression of raw type AX to type AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX x = new X((AX)null, (AX)null);\\n\" + ", "+\t\t\t\"\t                      ^^^^^^^^\\n\" + ", "+\t\t\t\"Unsafe type operation: Should not convert expression of raw type AX to type AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tAX a = new AX((AX)null);\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unsafe type operation: Should not invoke the constructor AX(AX<P>) of raw type AX. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tAX a2 = new AX(null);\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unsafe type operation: Should not invoke the constructor AX(AX<P>) of raw type AX. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tx.foo(a);\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"Unsafe type operation: Should not convert expression of raw type AX to type AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\ta.bar(a);\\n\" + ", "+\t\t\t\"\t^^^^^^^^\\n\" + ", "+\t\t\t\"Unsafe type operation: Should not invoke the method bar(AX<P>) of raw type AX. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tAX<String> as = new AX<String>(null);\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The constructor AX<String>(AX<String>) is ambiguous\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tas.print(a);\\n\" + ", "+\t\t\t\"\t   ^^^^^\\n\" + ", "+\t\t\t\"The method print(String) in the type AX<String> is not applicable for the arguments (AX)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\t\"\tas.bar(a);\\n\" + ", "+\t\t\t\"\t       ^\\n\" + ", "+\t\t\t\"Unsafe type operation: Should not convert expression of raw type AX to type AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c906fadfda49d189cb9cff485ec4523", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "4e993a8d5cbdc7815c7050ad8787e1c566312d6a", "commitAfterChange": "7d431a6663c03691d383a66bc16841bb87e3308d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void test006()", "signatureAfterChange": " public void test006()", "diff": ["+\t\t\t\t\"interface One{}\\n\" +", "+\t\t\t\t\"interface Two{}\\n\" +", "+\t\t\t\t\"interface Three{}\\n\" +", "+\t\t\t\t\"interface Four{}\\n\" +", "+\t\t\t\t\"interface Five{}\\n\" +", "+\t\t\t\t\"interface Blah{}\\n\" +", "+\t\t\t\t\"interface Outer<T1,T2>{interface Inner<T3,T4>{interface Leaf{ <T> void method(); } } }\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\t\"\t       ^^^^^\\n\" + ", "-\t\t\t\"Outer cannot be resolved to a type\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The member type Outer<One,Two>.Inner cannot be qualified with a parameterized type, since it is static. Remove arguments from qualifying type Outer<One,Two>\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\t\"\t             ^^^\\n\" + ", "-\t\t\t\"One cannot be resolved to a type\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Outer.Inner.Deeper cannot be resolved to a type\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\tIX i = Outer<One, Two>.Inner<Three, Four>.Deeper<Five, Six<String>>.Leaf::<Blah, Blah>method;\\n\" + ", "-\t\t\t\"\t                  ^^^\\n\" + ", "-\t\t\t\"Two cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\tIX i = Outer<One, Two>.Inner<Three, Four>.Deeper<Five, Six<String>>.Leaf::<Blah, Blah>method;\\n\" + ", "-\t\t\t\"\t                             ^^^^^\\n\" + ", "-\t\t\t\"Three cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\tIX i = Outer<One, Two>.Inner<Three, Four>.Deeper<Five, Six<String>>.Leaf::<Blah, Blah>method;\\n\" + ", "-\t\t\t\"\t                                    ^^^^\\n\" + ", "-\t\t\t\"Four cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"6. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\tIX i = Outer<One, Two>.Inner<Three, Four>.Deeper<Five, Six<String>>.Leaf::<Blah, Blah>method;\\n\" + ", "-\t\t\t\"\t                                                 ^^^^\\n\" + ", "-\t\t\t\"Five cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"7. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\t\"8. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 13)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e4c5a881def6eb5799e91dee3ce86df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "a331916366d31b2eac24fa72c43e85436f424bb2", "commitAfterChange": "92833c2313d3c570c2dffa40d03aa84d01695a1a", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  \tpublic void test104()", "signatureAfterChange": "  \tpublic void test104()", "diff": ["-\t\t\t\"----------\\n\"", "-\t\t\t\t+ \"1. WARNING in test\\\\X.java (at line 2)\\n\"", "-\t\t\t\t+ \"\timport test.copy.*;\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^\\n\"", "-\t\t\t\t+ \"The import test.copy is never used\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"2. ERROR in test\\\\X.java (at line 7)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage#unknown Invalid ref: non visible class (non existent field)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"3. ERROR in test\\\\X.java (at line 8)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage#vf_private Invalid ref: non visible class (non existent field)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"4. ERROR in test\\\\X.java (at line 9)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage#vf_public Invalid ref: non visible class (visible field)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"5. ERROR in test\\\\X.java (at line 10)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPrivate#unknown Invalid ref: non visible class and non visible inner class (non existent field)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"6. ERROR in test\\\\X.java (at line 11)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPrivate#vf_private Invalid ref: non visible class and non visible inner class (non visible field)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"7. ERROR in test\\\\X.java (at line 12)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPrivate#vf_public Invalid ref: non visible class and non visible inner class (visible field)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"8. ERROR in test\\\\X.java (at line 13)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPublic#unknown Invalid ref: non visible class and visible inner class (non existent field)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"9. ERROR in test\\\\X.java (at line 14)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPublic#vf_private Invalid ref: non visible class and visible inner class (non visible field)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"10. ERROR in test\\\\X.java (at line 15)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPublic#vf_public Invalid ref: non visible class and visible inner class (visible field)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in test\\\\X.java (at line 7)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage#unknown Invalid ref: non visible class (non existent field)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage#vf_private Invalid ref: non visible class (non existent field)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in test\\\\X.java (at line 9)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage#vf_public Invalid ref: non visible class (visible field)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in test\\\\X.java (at line 10)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPrivate#unknown Invalid ref: non visible class and non visible inner class (non existent field)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in test\\\\X.java (at line 11)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPrivate#vf_private Invalid ref: non visible class and non visible inner class (non visible field)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in test\\\\X.java (at line 12)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPrivate#vf_public Invalid ref: non visible class and non visible inner class (visible field)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in test\\\\X.java (at line 13)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPublic#unknown Invalid ref: non visible class and visible inner class (non existent field)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in test\\\\X.java (at line 14)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPublic#vf_private Invalid ref: non visible class and visible inner class (non visible field)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. ERROR in test\\\\X.java (at line 15)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPublic#vf_public Invalid ref: non visible class and visible inner class (visible field)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84f90929f6a8629d730d2d9298dc9b1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InnerEmulationTest.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 80, "signatureBeforeChange": " public void test078()", "signatureAfterChange": " public void test078()", "diff": ["-\t\t\t\"1. WARNING in X.java (at line 7)\\n\" +", "-\t\t\t\"\tclass B extends X {\t\\n\" +", "-\t\t\t\"\t      ^\\n\" +", "-\t\t\t\"The type B is never used locally\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 9)\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 9)\\n\" +", "-\t\t\t\"3. WARNING in X.java (at line 9)\\n\" +", "+\t\t\t\"2. WARNING in X.java (at line 9)\\n\" +", "-\t\t\t\"4. WARNING in X.java (at line 10)\\n\" +", "-\t\t\t\"\tvoid foo() { System.out.println(X.this);\t} \\n\" +", "-\t\t\t\"\t     ^^^^^\\n\" +", "-\t\t\t\"The method foo() from the type new A(){} is never used locally\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in X.java (at line 10)\\n\" +", "+\t\t\t\"3. ERROR in X.java (at line 10)\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 7)\\n\" +", "-\t\t\t\"\tclass B extends X {\t\\n\" +", "-\t\t\t\"\t      ^\\n\" +", "-\t\t\t\"The type B is never used locally\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 9)\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 9)\\n\" +", "-\t\t\t\"3. WARNING in X.java (at line 10)\\n\" +", "-\t\t\t\"\tvoid foo() { System.out.println(X.this);\t} \\n\" +", "-\t\t\t\"\t     ^^^^^\\n\" +", "-\t\t\t\"The method foo() from the type new A(){} is never used locally\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 10)\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 10)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "988f4a153b5f7448d7be54947cbb4c22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "ad12ac6d83e11b0dba5a9dea2f498c1b91db4e9b", "commitAfterChange": "725e72e518724c7d2e0f34521be4e0d027908df8", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 122, "signatureBeforeChange": " public void testCompletionEmptyTypeName3() throws JavaModelException", "signatureAfterChange": " public void testCompletionEmptyTypeName3() throws JavaModelException", "diff": ["-\t\t\t\"element:CompletionEmptyTypeName3.CompletionEmptyTypeName3_1    completion:CompletionEmptyTypeName3_1    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+\"\\n\" +", "+\t\t\t\"element:CompletionEmptyTypeName3.CompletionEmptyTypeName3_1    completion:CompletionEmptyTypeName3_1    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+\"\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8adcbf6f9282547e5e5d0ad9e03b579", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java", "commitBeforeChange": "7b3309da9229750686e478a0bba24cf03c887fb9", "commitAfterChange": "e72851f7c02ccfbc91816922dcb863357cca4426", "methodNumberBeforeChange": 169, "methodNumberAfterChange": 169, "signatureBeforeChange": " public void test436542() throws Exception", "signatureAfterChange": " public void test436542() throws Exception", "diff": ["-\tString jreDirectory = Util.getJREDirectory();", "-\tString jfxJar = Util.toNativePath(jreDirectory + \"/lib/ext/jfxrt.jar\");", "-\t\t\t\"import javafx.collections.ListChangeListener;\\n\" + ", "-\t\t\t\"import javafx.collections.ObservableList;\\n\" + ", "-\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\t\"\t\tSystem.out.println(\\\"Success\\\");\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "+\t\t\t\"    public static void main(String[] args) {\\n\" + ", "+\t\t\t\"        System.out.println(\\\"Success\\\");\\n\" + ", "+\t\t\t\"    }\\n\" + ", "-\t\t\t\"    /**\\n\" + ", "-\t\t\t\"     * \\\"Binds\\\" the destination list to the observable source list with a transformation function applied.\\n\" + ", "-\t\t\t\"     * Whenever the source list changes, the destination list is altered to match by applying\\n\" + ", "-\t\t\t\"     * the given function to each element in the source list.\\n\" + ", "-\t\t\t\"     */\\n\" + ", "-\t\t\t\"        dest.clear();\\n\" + ", "-\t\t\t\"            while (changes.next()) {\\n\" + ", "-\t\t\t\"                if (changes.wasPermutated() || changes.wasUpdated()) {\\n\" + ", "-\t\t\t\"                    // Same code for updated, replaced and permutation, just recalc the range:\\n\" + ", "-\t\t\t\"                    for (int i = changes.getFrom(); i < changes.getTo(); i++)\\n\" + ", "-\t\t\t\"                        dest.set(i, func.apply(src.get(i)));\\n\" + ", "-\t\t\t\"                } else {\\n\" + ", "-\t\t\t\"                    for (int i = 0; i < changes.getRemovedSize(); i++)\\n\" + ", "-\t\t\t\"                        dest.remove(changes.getFrom());\\n\" + ", "-\t\t\t\"                    for (int i = 0; i < changes.getAddedSubList().size();i++)\\n\" + ", "-\t\t\t\"                        dest.add(i + changes.getFrom(), func.apply(changes.getAddedSubList().get(i)));\\n\" + ", "-\t\t\t\"                }\\n\" + ", "-\t\t\t\"            }\\n\" + ", "+\t\t\t\"            for (int i = changes.getFrom(); i < changes.getTo(); i++)\\n\" + ", "+\t\t\t\"                dest.set(i, func.apply(src.get(i)));\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    public interface ObservableList<E> extends List<E> {\\n\" + ", "+\t\t\t\"        public void addListener(ListChangeListener<? super E> listener);\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    @FunctionalInterface\\n\" + ", "+\t\t\t\"    public interface ListChangeListener<E> {\\n\" + ", "+\t\t\t\"        public abstract static class Change<E> {\\n\" + ", "+\t\t\t\"            public abstract int getFrom();\\n\" + ", "+\t\t\t\"            public abstract int getTo();\\n\" + ", "+\t\t\t\"        }\\n\" + ", "+\t\t\t\"        public void onChanged(Change<? extends E> c);\\n\" + ", "-\t\tUtil.concatWithClassLibs(new String[]{jfxJar,OUTPUT_DIR}, false),", "+\t\tUtil.concatWithClassLibs(new String[]{OUTPUT_DIR}, false),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adfb0802ba3b38f4303f36078342882f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "72a68c016a698ff6410dc3bc7e6c9d812a69aea4", "commitAfterChange": "ceb9e880c1b5f4a965f8c0bb64e2584c9ba904dc", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.uninternedIdentityComparison\\\" value=\\\"disabled\\\"/>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b35f55969f963d096b6909259620b0e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 491, "methodNumberAfterChange": 491, "signatureBeforeChange": " \tpublic void test0472()", "signatureAfterChange": " \tpublic void test0472()", "diff": ["-\t\t\t\"1. WARNING in test\\\\Foo.java (at line 4)\\n\" + ", "-\t\t\t\"\tprivate R dosomething(){ return s; } \\n\" + ", "-\t\t\t\"\t          ^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method dosomething() from the type Foo<R> is never used locally\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in test\\\\Foo.java (at line 5)\\n\" + ", "-\t\t\t\"\tprivate class Bar {} \\n\" + ", "-\t\t\t\"\t              ^^^\\n\" + ", "-\t\t\t\"The type Foo<R>.Bar is never used locally\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"----------\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7efa416a4834702716697e397d846c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 838, "methodNumberAfterChange": 838, "signatureBeforeChange": " public void test0817()", "signatureAfterChange": " public void test0817()", "diff": ["-\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tprivate T t;\\n\" + ", "-\t\t\t\"\t          ^\\n\" + ", "-\t\t\t\"The field X<T>.t is never read locally\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 14)\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 15)\\n\" + ", "-\t\t\t\"6. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 16)\\n\" + ", "-\t\t\t\"7. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 18)\\n\" + ", "-\t\t\t\"8. WARNING in X.java (at line 19)\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 19)\\n\" + ", "-\t\t\t\"9. ERROR in X.java (at line 20)\\n\" + ", "+\t\t\t\"8. ERROR in X.java (at line 20)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba04b745412de236e7961f513b9a2277", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "189f7ceb3f6249774ccdb459fb188cbd17dc60ea", "commitAfterChange": "baa69111fb2692bf947d05d6cb872fa36c864ddc", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test012b()", "signatureAfterChange": " public void test012b()", "diff": ["+        \"      hashCode              missing hashCode() method when overriding equals()\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c836da6740bc4139efdfa97423d1765f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "b1aca9b4105c9a7f1aa8e5460992860c474db551", "commitAfterChange": "e7dd2375779ab49b47ee68f59ed9e6849f2130e6", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["+// width)", "-        \"    -target <version>  set classfile target level: 1.1 to 1.6 (or 5, 5.0, 6 or 6.0)\\n\" + ", "+        \"    -target <version>  set classfile target level: 1.1 to 1.6 (or 5, 5.0, 6 or\\n\" +", "+        \"                       6.0)\\n\" + ", "-", "-\tthis.runConformTest(", "-\t\tnew String[0],", "-        \" -help -referenceInfo\",", "+\tString expandedExpectedOutput = ", "-\t\t}),", "+\t\t\t});", "+\t\tthis.runConformTest(", "+\t\tnew String[0],", "+        \" -help -referenceInfo\",", "+        expandedExpectedOutput,", "+\tcheckWidth(expandedExpectedOutput, 80);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbc15455eb28c03c43b420484aa49adb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1438, "methodNumberAfterChange": 1438, "signatureBeforeChange": " public void test1407()", "signatureAfterChange": " public void test1407()", "diff": ["-\t\t\t\t\"\tpublic static <I> I m2(Class<I> c) { return null; }\t\\n\" + ", "-\t\t\t\t\"\t\tFoo l1 = m1((Class)Foo.class); //ok - unchecked conversion from Class to Class<Foo> - I inferred to be Foo\\n\" + ", "-\t\t\t\t\"\t\tFoo l2 = m2((Class)Foo.class); //unchecked call, erased return type and error because Object != Foo\t\t\\n\" + ", "+\t\t\t\t\"\t\tFoo l1 = m1((Class)Foo.class);\\n\" + ", "-\t\t\t\"1. WARNING in Foo.java (at line 5)\\n\" + ", "-\t\t\t\"\tFoo l1 = m1((Class)Foo.class); //ok - unchecked conversion from Class to Class<Foo> - I inferred to be Foo\\n\" + ", "-\t\t\t\"\t            ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<Foo>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in Foo.java (at line 5)\\n\" + ", "-\t\t\t\"\tFoo l1 = m1((Class)Foo.class); //ok - unchecked conversion from Class to Class<Foo> - I inferred to be Foo\\n\" + ", "-\t\t\t\"\t             ^^^^^\\n\" + ", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in Foo.java (at line 6)\\n\" + ", "-\t\t\t\"\tFoo l2 = m2((Class)Foo.class); //unchecked call, erased return type and error because Object != Foo\t\t\\n\" + ", "+\t\t\t\"1. WARNING in Foo.java (at line 4)\\n\" + ", "+\t\t\t\"\tFoo l1 = m1((Class)Foo.class);\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation m2(Class) of the generic method m2(Class<I>) of type Foo\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation m1(Class) of the generic method m1(Class<Foo>) of type Foo\\n\" + ", "-\t\t\t\"4. ERROR in Foo.java (at line 6)\\n\" + ", "-\t\t\t\"\tFoo l2 = m2((Class)Foo.class); //unchecked call, erased return type and error because Object != Foo\t\t\\n\" + ", "+\t\t\t\"2. ERROR in Foo.java (at line 4)\\n\" + ", "+\t\t\t\"\tFoo l1 = m1((Class)Foo.class);\\n\" + ", "-\t\t\t\"5. WARNING in Foo.java (at line 6)\\n\" + ", "-\t\t\t\"\tFoo l2 = m2((Class)Foo.class); //unchecked call, erased return type and error because Object != Foo\t\t\\n\" + ", "+\t\t\t\"3. WARNING in Foo.java (at line 4)\\n\" + ", "+\t\t\t\"\tFoo l1 = m1((Class)Foo.class);\\n\" + ", "-\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<I>\\n\" + ", "+\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<Foo>\\n\" + ", "-\t\t\t\"6. WARNING in Foo.java (at line 6)\\n\" + ", "-\t\t\t\"\tFoo l2 = m2((Class)Foo.class); //unchecked call, erased return type and error because Object != Foo\t\t\\n\" + ", "+\t\t\t\"4. WARNING in Foo.java (at line 4)\\n\" + ", "+\t\t\t\"\tFoo l1 = m1((Class)Foo.class);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc8f86750d632c9f3b79aba295f52b5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "19b4c669e6d8313d03dbcc8b595622002fe408a5", "commitAfterChange": "7b084156620c5c922d11b27bd8e1266a04bb9736", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-        \" Null annotation options:\\n\" +", "-\t\t\"    -nullAnnotations:<suboptions>\\n\" +", "-\t\t\"                      enable use of annotations for specifying null contracts;\\n\" +", "-\t\t\"                      <suboptions> is a non-empty, comma-separated list of:\\n\" +", "-\t\t\"        nullable=<typename>\\n\" +", "-\t\t\"                      specifies the fully qualified name of an annotation type\\n\" +", "-\t\t\"                      to be used for marking types whose values include null\\n\" +", "-\t\t\"        nonnull=<typename>\\n\" +", "-\t\t\"                      specifies the fully qualified name of an annotation type\\n\" +", "-\t\t\"                      to be used for marking types whose values cannot be null\\n\" +", "-\t\t\"        emulate       tells the compiler to emulate the above annotation types\\n\" +", "-\t\t\"                      although they do not exist on the classpath\\n\" +", "-\t\t\"        import        tells the compiler to import the above annotation types\\n\" +", "-\t\t\"                      without specific mention in the sources such that their\\n\" +", "-\t\t\"                      simple names can be used without explicit imports\\n\" +", "-\t\t\" \\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf3fb85f4ec4f819dbe7521ca2db347d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "06c5cc5d76301192931dd7d79fa73fba87dfcc22", "commitAfterChange": "7b78243b59a21f4401b3ec3e9d2215dc9a75a7b5", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.uninternedIdentityComparison\\\" value=\\\"disabled\\\"/>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1f11bc06eb2503f77b07e014dd3b10d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "2a23c62d5a3b74783613a638cca640e487db040a", "commitAfterChange": "79c4ba61903262b42e2a1f500afb283891f6e429", "methodNumberBeforeChange": 328, "methodNumberAfterChange": 328, "signatureBeforeChange": " public void test177()", "signatureAfterChange": " public void test177()", "diff": ["+// JDK7 (7b100) behavior. (earlier we would issue an extra name clash)", "-\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\tclass X extends A implements I {\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"Name clash: The method foo(Collection<?>) of type I has the same erasure as foo(Collection) of type A but does not override it\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 6)\\n\" + ", "-\t\t\t\"6. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\tclass X extends A implements I {\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"Name clash: The method foo(Collection<?>) of type I has the same erasure as foo(Collection) of type A but does not override it\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 6)\\n\" + ", "-\t\t\t\"6. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"7. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 7)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfd7d5c40869cdb666debdf9e189e5eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "067d4c602423adaae99e87247cc8cdbc112437d7", "commitAfterChange": "57396a418c2c0c112a60b670e887da389156bc9b", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.overridingMethodWithoutSuperInvocation\\\" value=\\\"ignore\\\"/>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0079731defcc53fd7749f98364e3fe0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "53a1646d9e191b8b912f757450cb4b809c88a6c3", "commitAfterChange": "1981bf8ffea2219e8159438f3f203edffff2e187", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.unnecessaryOperator\\\" value=\\\"ignore\\\"/>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eecdf99de86495bd4675305930596843", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "2d9b05bb71b127652760933dafce873a5ec0cb28", "commitAfterChange": "0e036eabfb3d0e92b314882ef7004877396ca0ce", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " public void test039()", "signatureAfterChange": " public void test039()", "diff": ["-\t\t\"1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---\" +", "-\t\tFile.separator + \"src2\" +", "-\t\tFile.separator + \"Y.java\\n\" + ", "+\t\t\"1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java\\n\" + ", "-\t\t\"2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---\" +", "-\t\tFile.separator + \"src2\" +", "-\t\tFile.separator + \"Y.java\\n\" + ", "+\t\t\"2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java\\n\" + ", "-\t\t\"3. WARNING in ---OUTPUT_DIR_PLACEHOLDER---\" +", "-\t\tFile.separator + \"src2\" +", "-\t\tFile.separator + \"Y.java\\n\" + ", "+\t\t\"3. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java\\n\" + ", "-\t\t\"4. WARNING in ---OUTPUT_DIR_PLACEHOLDER---\" +", "-\t\tFile.separator + \"src2\" +", "-\t\tFile.separator + \"Y.java\\n\" + ", "+\t\t\"4. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f39dae94d8f614ba3f235c0fb1768c7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "3d86d8fdd283e92da8b2fd4ec59e7d2f2b4add9f", "commitAfterChange": "fa2250802984cea8cb5424fd54457f3c16db0f4e", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["-\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.overridingMethodWithoutSuperInvocation\\\" value=\\\"ignore\\\"/>\\n\" + "]}], "num": 11559}
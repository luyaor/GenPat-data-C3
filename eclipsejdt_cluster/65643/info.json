{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc4af4054e7af940bfe60dc277522d5e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "171d3ee58546c493bb219b9003397c35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "01e509448d7e8ce35b916b42d2b7e86284f0209d", "commitAfterChange": "22a834a98ee15054e5c5a6c83029376faf3ab633", "methodNumberBeforeChange": 1233, "methodNumberAfterChange": 1233, "signatureBeforeChange": " public void test1203a()", "signatureAfterChange": " public void test1203a()", "diff": ["-\tString expectedOutput = this.complianceLevel < ClassFileConstants.JDK1_7", "-\t\t? \t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\treturn X.<String>foo(one, two);\\n\" + ", "-\t\t\t\"\t                 ^^^\\n\" + ", "-\t\t\t\"The method foo(String, String) of type X is not generic; it cannot be parameterized with arguments <String>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\treturn this.<String>bar(one, two);\\n\" + ", "-\t\t\t\"\t                    ^^^\\n\" + ", "-\t\t\t\"The method bar(String, String) of type X is not generic; it cannot be parameterized with arguments <String>\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t: \t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "-\t\t\t\"\treturn X.<String>foo(one, two);\\n\" + ", "-\t\t\t\"\t          ^^^^^^\\n\" + ", "-\t\t\t\"Unused type arguments for the non generic method foo(String, String) of type X; it should not be parameterized with arguments <String>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "-\t\t\t\"\treturn this.<String>bar(one, two);\\n\" + ", "-\t\t\t\"\t             ^^^^^^\\n\" + ", "-\t\t\t\"Unused type arguments for the non generic method bar(String, String) of type X; it should not be parameterized with arguments <String>\\n\" + ", "-\t\t\t\"----------\\n\";", "-\t", "-\tthis.runNegativeTest(", "+\tString[] sources =", "-\t\t},", "-\t\texpectedOutput);", "+\t\t};", "+\tif (this.complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\trunNegativeTest(", "+\t\t\tsources,", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\treturn X.<String>foo(one, two);\\n\" + ", "+\t\t\t\"\t                 ^^^\\n\" + ", "+\t\t\t\"The method foo(String, String) of type X is not generic; it cannot be parameterized with arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\treturn this.<String>bar(one, two);\\n\" + ", "+\t\t\t\"\t                    ^^^\\n\" + ", "+\t\t\t\"The method bar(String, String) of type X is not generic; it cannot be parameterized with arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t} else {", "+\t\trunConformTest(", "+\t\t\ttrue,", "+\t\t\tsources,", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\treturn X.<String>foo(one, two);\\n\" + ", "+\t\t\t\"\t          ^^^^^^\\n\" + ", "+\t\t\t\"Unused type arguments for the non generic method foo(String, String) of type X; it should not be parameterized with arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\treturn this.<String>bar(one, two);\\n\" + ", "+\t\t\t\"\t             ^^^^^^\\n\" + ", "+\t\t\t\"Unused type arguments for the non generic method bar(String, String) of type X; it should not be parameterized with arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\",", "+\t\t\tnull, null,", "+\t\t\tJavacTestOptions.Excuse.EclipseHasSomeMoreWarnings);\t\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9142b921177e40b2d7f88e8eeaa88f09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 338, "methodNumberAfterChange": 338, "signatureBeforeChange": " public void test187()", "signatureAfterChange": " public void test187()", "diff": ["+\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6 )?", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tdouble f(List<Integer> l) {return 0;}\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method f(List<Integer>) of type Y has the same erasure as f(List<String>) of type X but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tint f(List<String> l) {return 0;}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method f(List<String>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tdouble f(List<Integer> l) {return 0;}\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method f(List<Integer>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "+\t\t\t\"----------\\n\":", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tdouble f(List<Integer> l) {return 0;}\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Name clash: The method f(List<Integer>) of type Y has the same erasure as f(List<String>) of type X but does not override it\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\t\"\tint f(List<String> l) {return 0;}\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method f(List<String>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\t\"\tdouble f(List<Integer> l) {return 0;}\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method f(List<Integer>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "+\t\t\t\t\"----------\\n\";", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\"\tdouble f(List<Integer> l) {return 0;}\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Name clash: The method f(List<Integer>) of type Y has the same erasure as f(List<String>) of type X but does not override it\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\"\tint f(List<String> l) {return 0;}\\n\" + ", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Method f(List<String>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\"\tdouble f(List<Integer> l) {return 0;}\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Method f(List<Integer>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "-\t\t\"----------\\n\"", "+\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e0dc94ee25a91ac047582c4ef674442", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 351, "methodNumberAfterChange": 351, "signatureBeforeChange": " public void test200()", "signatureAfterChange": " public void test200()", "diff": ["+\tMap options = getCompilerOptions();", "+\tString compliance = (String) options.get(JavaCore.COMPILER_COMPLIANCE);", "+\tString errorMessage = compliance == JavaCore.VERSION_1_6 ?", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tint foo(Collection bar) { return 0; }\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method foo(Collection) has the same erasure foo(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tint foo(Collection bar) { return 0; }\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tdouble foo(Collection<String> bar) {return 0; }\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method foo(Collection<String>) has the same erasure foo(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" :", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tint foo(Collection bar) { return 0; }\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo(Collection) has the same erasure foo(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tint foo(Collection bar) { return 0; }\\n\" + ", "+\t\t\t\t\"\t        ^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tdouble foo(Collection<String> bar) {return 0; }\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo(Collection<String>) has the same erasure foo(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\";", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\"\tint foo(Collection bar) { return 0; }\\n\" + ", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Method foo(Collection) has the same erasure foo(Collection<E>) as another method in type X\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "-\t\t\"\tint foo(Collection bar) { return 0; }\\n\" + ", "-\t\t\"\t        ^^^^^^^^^^\\n\" + ", "-\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\"\tdouble foo(Collection<String> bar) {return 0; }\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Method foo(Collection<String>) has the same erasure foo(Collection<E>) as another method in type X\\n\" + ", "-\t\t\"----------\\n\"", "+\t\terrorMessage"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e38a81913e3f26cd3f7cc7f8766bbb06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 337, "methodNumberAfterChange": 337, "signatureBeforeChange": " public void test187()", "signatureAfterChange": " public void test187()", "diff": ["-\t\t\t\"    double f(List<Integer> l) {return 0;}\\n\" +", "+\t\t\t\"    double f(List<Integer> l) {return 0;}\\n\" +// name clash in 7", "-    \t\t\t\"double f(List<Integer> l) {return 0;}\\n\" +", "+    \t\t\t\"double f(List<Integer> l) {return 0;}\\n\" +// name clash in 1.5 & 7", "-\t\tnew CompilerOptions(getCompilerOptions()).complianceLevel < ClassFileConstants.JDK1_7", "-\t\t\t? \"\"", "-\t\t\t: \"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\tdouble f(List<Integer> l) {return 0;}\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method f(List<Integer>) of type Y has the same erasure as f(List<String>) of type X but does not override it\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tabstract class Z extends X implements I {}\\n\" + ", "-\t\t\t\"\t               ^\\n\" + ", "-\t\t\t\"Name clash: The method f(List<String>) of type X has the same erasure as f(List<Integer>) of type I but does not override it\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\t\"\tint f(List<String> l) {return 0;}\\n\" + ", "-\t\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method f(List<String>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\t\"\tdouble f(List<Integer> l) {return 0;}\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method f(List<Integer>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tdouble f(List<Integer> l) {return 0;}\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Name clash: The method f(List<Integer>) of type Y has the same erasure as f(List<String>) of type X but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"\tabstract class Z extends X implements I {}\\n\" + ", "+\t\t\"\t               ^\\n\" + ", "+\t\t\"Name clash: The method f(List<String>) of type X has the same erasure as f(List<Integer>) of type I but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\"\tint f(List<String> l) {return 0;}\\n\" + ", "+\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method f(List<String>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\"\tdouble f(List<Integer> l) {return 0;}\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method f(List<Integer>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "+\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eff1c815143062cbd2a344b2ca115c90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "4e700a9e3cdab5cede60d95c3f4cde7257971ca3", "commitAfterChange": "d752b26e3a6a22a0d2aea83eca1f4ca2bd2e36dd", "methodNumberBeforeChange": 203, "methodNumberAfterChange": 204, "signatureBeforeChange": " \tpublic void test071()", "signatureAfterChange": " \tpublic void test071()", "diff": ["-\t\tString expectedOutput = new CompilerOptions(getCompilerOptions()).sourceLevel < ClassFileConstants.JDK1_6", "-\t\t?\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in D.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\t@Override void m(Number t) {}\\r\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method m(Number) of type D has the same erasure as m(T) of type A<T> but does not override it\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in D.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\t@Override void m(Number t) {}\\r\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method m(Number) of type D must override a superclass method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in D.java (at line 6)\\r\\n\" + ", "-\t\t\t\"\tclass B<S extends Integer> extends A<S> { @Override void m(S t) {} }\\r\\n\" + ", "-\t\t\t\"\t                  ^^^^^^^\\n\" + ", "-\t\t\t\"The type parameter S should not be bounded by the final type Integer. Final types cannot be further extended\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t:\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in D.java (at line 2)\\n\" + ", "-\t\t\t\"\t@Override void m(Number t) {}\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method m(Number) of type D has the same erasure as m(T) of type A<T> but does not override it\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in D.java (at line 2)\\n\" + ", "-\t\t\t\"\t@Override void m(Number t) {}\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method m(Number) of type D must override or implement a supertype method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in D.java (at line 6)\\n\" + ", "-\t\t\t\"\tclass B<S extends Integer> extends A<S> { @Override void m(S t) {} }\\n\" + ", "-\t\t\t\"\t                  ^^^^^^^\\n\" + ", "-\t\t\t\"The type parameter S should not be bounded by the final type Integer. Final types cannot be further extended\\n\" + ", "-\t\t\t\"----------\\n\";", "-\t\t\texpectedOutput);", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in D.java (at line 2)\\r\\n\" + ", "+\t\t\t\"\t@Override void m(Number t) {}\\r\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method m(Number) of type D has the same erasure as m(T) of type A<T> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in D.java (at line 2)\\r\\n\" + ", "+\t\t\t\"\t@Override void m(Number t) {}\\r\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^\\n\" + ", "+\t\t\tmustOverrideMessage(\"m(Number)\", \"D\") + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in D.java (at line 6)\\r\\n\" + ", "+\t\t\t\"\tclass B<S extends Integer> extends A<S> { @Override void m(S t) {} }\\r\\n\" + ", "+\t\t\t\"\t                  ^^^^^^^\\n\" + ", "+\t\t\t\"The type parameter S should not be bounded by the final type Integer. Final types cannot be further extended\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);"]}], "num": 65643}
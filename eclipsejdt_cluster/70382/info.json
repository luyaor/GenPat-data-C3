{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "597a370149b617cd3d0d7c3e7de5014e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25605b02c59235fe62b5b697d4870ce1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "7c3080ba45bd79ddd7d628abfc7780ee747e39e8", "commitAfterChange": "5658c822d90e268f3a7dca76bdc6b8fd41b3f9c3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void removeSourceFolderFromIndex(JavaProject javaProject, IPath sourceFolder)", "signatureAfterChange": " public void removeSourceFolderFromIndex(JavaProject javaProject, IPath sourceFolder)", "diff": ["-\t\ttry {", "-\t\t\t/* ensure no concurrent write access to index */", "-\t\t\tIPath indexPath = javaProject.getPath();", "-\t\t\tIIndex index = this.getIndex(indexPath, true, /*reuse index file*/ false /*create if none*/);", "-\t\t\tif (index == null) return;", "-\t\t\tReadWriteMonitor monitor = this.getMonitorFor(index);", "-\t\t\tif (monitor == null) return; // index got deleted since acquired", "+\tIProject project = javaProject.getProject();", "+\tif (this.jobEnd >= this.jobStart) {", "+\t\t// check if a job to index the project is not already in the queue", "+\t\tIndexRequest request = new IndexAllProject(project, this);", "+\t\tfor (int i = this.jobEnd; i >= this.jobStart; i--)", "+\t\t\tif (request.equals(this.awaitingJobs[i])) return;", "+\t}", "-\t\t\ttry {", "-\t\t\t\tmonitor.enterRead(); // ask permission to read", "-\t\t\t\tIQueryResult[] results = index.queryInDocumentNames(sourceFolder.toString());", "-\t\t\t\t// all file names belonging to the folder or its subfolders", "-\t\t\t\tfor (int i = 0, max = results == null ? 0 : results.length; i < max; i++)", "-\t\t\t\t\t// TODO: Should not remove excluded resources", "-\t\t\t\t\tthis.remove(results[i].getPath(), indexPath); // write lock will be acquired by the remove operation", "-\t\t\t} finally {", "-\t\t\t\tmonitor.exitRead(); // free read lock", "-\t\t\t}", "-\t\t} catch (IOException e) {", "-\t\t\tif (JobManager.VERBOSE) {", "-\t\t\t\tJobManager.verbose(\"-> failed to remove \" + sourceFolder.toString() + \" from index because of the following exception:\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\te.printStackTrace();", "-\t\t\t}", "-\t\t}", "+\tthis.request(new RemoveFolderFromIndex(sourceFolder, project, this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83a2f6a83a0db8cbfe0b1ee951d7d8d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "101210a46f852f04e96181a230ef482b37a8c3d9", "commitAfterChange": "ac0d9cdc25a9d5f3107efd53c6caa6764f8731c8", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void removeSourceFolderFromIndex(JavaProject javaProject, IPath sourceFolder)", "signatureAfterChange": " public void removeSourceFolderFromIndex(JavaProject javaProject, IPath sourceFolder)", "diff": ["-\tthis.request(new RemoveFolderFromIndex(sourceFolder.toString(), javaProject.getProject().getFullPath(), this));", "+\t\ttry {", "+\t\t\t/* ensure no concurrent write access to index */", "+\t\t\tIPath indexPath = javaProject.getPath();", "+\t\t\tIIndex index = this.getIndex(indexPath, true, /*reuse index file*/ false /*create if none*/);", "+\t\t\tif (index == null) return;", "+\t\t\tReadWriteMonitor monitor = this.getMonitorFor(index);", "+\t\t\tif (monitor == null) return; // index got deleted since acquired", "+", "+\t\t\ttry {", "+\t\t\t\tmonitor.enterRead(); // ask permission to read", "+\t\t\t\tIQueryResult[] results = index.queryInDocumentNames(sourceFolder.toString());", "+\t\t\t\t// all file names belonging to the folder or its subfolders", "+\t\t\t\tfor (int i = 0, max = results == null ? 0 : results.length; i < max; i++)", "+\t\t\t\t\t// TODO: Should not remove excluded resources", "+\t\t\t\t\tthis.remove(results[i].getPath(), indexPath); // write lock will be acquired by the remove operation", "+\t\t\t} finally {", "+\t\t\t\tmonitor.exitRead(); // free read lock", "+\t\t\t}", "+\t\t} catch (IOException e) {", "+\t\t\tif (JobManager.VERBOSE) {", "+\t\t\t\tJobManager.verbose(\"-> failed to remove \" + sourceFolder.toString() + \" from index because of the following exception:\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\te.printStackTrace();", "+\t\t\t}", "+\t\t}"]}], "num": 70382}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c11b266601832714d8f799989ac9b636", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb6a95c79e93367e76ec8adf2483c107", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "fb551e71f8331e7335b6496578d819b690109f3c", "commitAfterChange": "02112ae5d67523cea52b946942bd13130a946a0e", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  public void resolve(IGenericType suppliedType)", "signatureAfterChange": "  public void resolve(IGenericType suppliedType)", "diff": ["+\t\t\tthis.superTypesOnly = true;", "-\t\t\t// must start with the top level type", "-\t\t\tISourceType topLevelType = (ISourceType) suppliedType;", "-\t\t\twhile (topLevelType.getEnclosingType() != null)", "-\t\t\t\ttopLevelType = topLevelType.getEnclosingType();", "-\t\t\tCompilationResult result = new CompilationResult(topLevelType.getFileName(), 1, 1, this.options.maxProblemsPerUnit);", "-\t\t\tCompilationUnitDeclaration unit =", "-\t\t\t\tSourceTypeConverter.buildCompilationUnit(", "-\t\t\t\t\tnew ISourceType[]{topLevelType}, ", "-\t\t\t\t\t// no need for field and methods", "-\t\t\t\t\tSourceTypeConverter.MEMBER_TYPE, // need member types", "-\t\t\t\t\t// no need for field initialization", "-\t\t\t\t\tthis.lookupEnvironment.problemReporter, ", "-\t\t\t\t\tresult);", "-", "-\t\t\tif (unit != null) {", "-\t\t\t\tthis.lookupEnvironment.buildTypeBindings(unit);", "-", "-\t\t\t\torg.eclipse.jdt.core.ICompilationUnit cu = ((SourceTypeElementInfo)topLevelType).getHandle().getCompilationUnit();", "-\t\t\t\trememberAllTypes(unit, cu, false);", "-", "-\t\t\t\tthis.lookupEnvironment.completeTypeBindings(unit, false);", "-", "-\t\t\t\treportHierarchy(this.requestor.getType(), unit, null);", "-\t\t\t}", "+\t\t\torg.eclipse.jdt.core.ICompilationUnit cu = ((SourceTypeElementInfo)suppliedType).getHandle().getCompilationUnit();", "+\t\t\tHashSet localTypes = new HashSet();", "+\t\t\tlocalTypes.add(cu.getPath().toString());", "+\t\t\tthis.superTypesOnly = true;", "+\t\t\tresolve(new Openable[] {(Openable)cu}, localTypes, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec6559bd5b700a0e6d23e585e459871e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "ec8e689e69ce65d5a3f127f9c7126c4bebdd7b60", "commitAfterChange": "c922c60b9bc5fcda7fb9f2a477eba6f8f95a6cf9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding, AccessRestriction accessRestriction)", "signatureAfterChange": " \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding, AccessRestriction accessRestriction)", "diff": ["-\t\tCompilationResult result =", "-\t\t\tnew CompilationResult(sourceTypes[0].getFileName(), 1, 1, this.options.maxProblemsPerUnit);", "-\t\t// need to hold onto this", "-\t\tCompilationUnitDeclaration unit =", "-\t\t\tSourceTypeConverter.buildCompilationUnit(", "-\t\t\t\tsourceTypes,//sourceTypes[0] is always toplevel here", "-\t\t\t\tSourceTypeConverter.FIELD_AND_METHOD // need field and methods", "-\t\t\t\t| SourceTypeConverter.MEMBER_TYPE // need member types", "-\t\t\t\t| SourceTypeConverter.FIELD_INITIALIZATION, // need field initialization: see bug 40476", "-\t\t\t\tthis.lookupEnvironment.problemReporter,", "-\t\t\t\tresult);", "-", "-\t\tif (unit != null) {", "-\t\t\tthis.lookupEnvironment.buildTypeBindings(unit, accessRestriction);", "-\t\t\tthis.lookupEnvironment.completeTypeBindings(unit, true);", "-\t\t}", "+\t\t// Need to reparse the entire source of the compilation unit so as to get source positions", "+\t\t// (case of processing a source that was not known by beginToCompile (e.g. when asking to createBinding))", "+\t\tSourceTypeElementInfo sourceType = (SourceTypeElementInfo) sourceTypes[0];", "+\t\taccept((org.eclipse.jdt.internal.compiler.env.ICompilationUnit) sourceType.getHandle().getCompilationUnit(), accessRestriction);"]}], "num": 59716}
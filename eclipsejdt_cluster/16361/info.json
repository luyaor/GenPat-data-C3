{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4141e4186218d6a13e1d622b552b3d2e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "159dae473f0db17995d32887d7268328", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "21f559feffbf2460bdd3a9d1e827cbd3c01012af", "commitAfterChange": "686f3b257f4d32050f06213668cbddf17fedbfcf", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\tlong complianceLevel = compilerOptions().complianceLevel;", "-\t\tboolean isCompliant14 = compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4;", "+\t\tlong complianceLevel = compilerOptions().complianceLevel;", "+\t\tboolean isCompliant14 = complianceLevel >= ClassFileConstants.JDK1_4;", "+\t\tboolean isCompliant15 = complianceLevel >= ClassFileConstants.JDK1_5;", "-\t\t\t\t\t\t\t\tif (complianceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\t\t\tif (isCompliant15) {", "-\t\tif (complianceLevel >= ClassFileConstants.JDK1_5", "+\t\tif (isCompliant15"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1c27eb07de17306a31c7d97ab77da8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "a97d6cfe4321b5c45bce6a9e682825ee765b8f5b", "commitAfterChange": "a51f0328f1978f4c547fe994573879b0bcceba88", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, int nullStatus)", "signatureAfterChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, int nullStatus)", "diff": ["-\t\t\t\t\tNullAnnotationMatching status = analyse(((WildcardBinding) requiredType).bound, providedType, nullStatus);", "-\t\t\t\t\tseverity = Math.max(severity, status.severity);", "+\t\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) requiredType;", "+\t\t\t\t\tif (wildcardBinding.bound != null) {", "+\t\t\t\t\t\tNullAnnotationMatching status = analyse(wildcardBinding.bound, providedType, nullStatus);", "+\t\t\t\t\t\tseverity = Math.max(severity, status.severity);", "+\t\t\t\t\t}", "+\t\t\t\t\t// TODO(stephan): what about otherBounds? Do we accept \"? extends @NonNull I1 & @Nullable I2\" in the first place??"]}], "num": 16361}
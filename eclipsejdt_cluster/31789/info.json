{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e4a321de82274b4e7c6743cdd52d11f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52e356ff8801a927d941ce08f0238135", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ExceptionLabel.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic boolean isStandardLabel()", "signatureAfterChange": " public String toString()", "diff": ["-\tpublic boolean isStandardLabel(){", "-", "-\t\treturn false;", "+}", "+public String toString() {", "+\tString basic = getClass().getName();", "+\tbasic = basic.substring(basic.lastIndexOf('.')+1);", "+\tStringBuffer buffer = new StringBuffer(basic); ", "+\tbuffer.append('@').append(Integer.toHexString(hashCode()));", "+\tbuffer.append(\"(type=\").append(this.exceptionType == null ? null : this.exceptionType.readableName()); //$NON-NLS-1$", "+\tbuffer.append(\", position=\").append(position); //$NON-NLS-1$", "+\tbuffer.append(\", ranges = \"); //$NON-NLS-1$", "+\tif (this.count == 0) {", "+\t\tbuffer.append(\"[]\"); //$NON-NLS-1$", "+\t} else {", "+\t\tfor (int i = 0; i < this.count; i++) {", "+\t\t\tif (i % 2 == 0) {", "+\t\t\t\tbuffer.append(\"[\").append(ranges[i]); //$NON-NLS-1$", "+\t\t\t} else { ", "+\t\t\t\tbuffer.append(\",\").append(ranges[i]).append(\"]\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t}", "+\t\t}", "+\t\tif (this.count % 2 == 1) {", "+\t\t\tbuffer.append(\",?]\"); //$NON-NLS-1$", "+\t\t}", "+\tbuffer.append(')'); //$NON-NLS-1$", "+\treturn buffer.toString();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc175dd09c85d288d19420277f9a2aa7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFlattener.java", "commitBeforeChange": "ac894da9b0ea3c039ce6982330527517abe54897", "commitAfterChange": "e3d1a6cf758d351b80734729b068cc97373e684d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic boolean visit(ArrayCreation node)", "signatureAfterChange": " \tpublic boolean visit(ArrayCreation node)", "diff": ["+", "+\t\telementType.accept(this);", "+", "+\t\t// add \"<annotations> [ <dimension> ]\" for each dimension expression", "+\t\tType type= arrayType;", "-\t\tvisitArrayTypeWithExpression(arrayType, list, --dimensions);", "+\t\tfor (int i= 0; i < list.size(); i++) {", "+\t\t\tif (node.getAST().apiLevel() >= AST.JLS8 && type instanceof ArrayType) {", "+\t\t\t\tvisitList(type, ArrayType.ANNOTATIONS_PROPERTY, String.valueOf(' '), Util.EMPTY_STRING, String.valueOf(' '));", "+\t\t\t\ttype = (Type) getChildNode(type, ArrayType.COMPONENT_TYPE_PROPERTY);", "+\t\t\t}", "+\t\t\tthis.result.append('[');", "+\t\t\t((ASTNode) list.get(i)).accept(this);", "+\t\t\tthis.result.append(']');", "+\t\t\tdimensions--;", "+\t\t}", "+", "+\t\t// add \"<annotations> []\" for each extra array dimension", "+\t\tfor (int i= 0; i < dimensions; i++) {", "+\t\t\tif (node.getAST().apiLevel() >= AST.JLS8 && type instanceof ArrayType) {", "+\t\t\t\tvisitList(type, ArrayType.ANNOTATIONS_PROPERTY, String.valueOf(' '), Util.EMPTY_STRING, String.valueOf(' '));", "+\t\t\t\ttype = (Type) getChildNode(type, ArrayType.COMPONENT_TYPE_PROPERTY);", "+\t\t\t}", "+\t\t\tthis.result.append(\"[]\"); //$NON-NLS-1$", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9006c2c87f90ea2bacd23038fe176a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingStatementsTest.java", "commitBeforeChange": "bebbc656cd8c0b5b2b17917b50736d005533495d", "commitAfterChange": "53b5fe3415daa91888a4dcef6f73ef37da327c9d", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \t \tpublic void testAssertStatement() throws Exception", "signatureAfterChange": " \t \tpublic void testAssertStatement() throws Exception", "diff": ["+\t\tbuf.append(\"        assert/* comment*/true;\\n\");", "+\t\tbuf.append(\"        assert(true);\\n\");", "+\t\tbuf.append(\"        assert(true) : \\\"Hello\\\";\\n\");", "+\t\tbuf.append(\"        assert(true) : \\\"Hello\\\";\\n\");", "-\t\tassertTrue(\"Number of statements not 1\", statements.size() == 1);", "-\t\t{ // insert expression", "+\t\tassertTrue(\"Number of statements not 5\", statements.size() == 5);", "+\t\t{ // replace expression", "-\t\t}\t\t", "+\t\t}", "+\t\t{ // replace expression", "+\t\t\tAssertStatement statement= (AssertStatement) statements.get(1);", "+\t\t\t", "+\t\t\tSimpleName newExpression= ast.newSimpleName(\"x\");\t", "+\t\t\trewrite.set(statement, AssertStatement.EXPRESSION_PROPERTY, newExpression, null);", "+\t\t}", "+\t\t{ // insert message", "+\t\t\tAssertStatement statement= (AssertStatement) statements.get(2);", "+\t\t\t", "+\t\t\tSimpleName newExpression= ast.newSimpleName(\"x\");\t", "+\t\t\trewrite.set(statement, AssertStatement.MESSAGE_PROPERTY, newExpression, null);", "+\t\t}", "+\t\t{ // replace message", "+\t\t\tAssertStatement statement= (AssertStatement) statements.get(3);", "+\t\t\t", "+\t\t\tSimpleName newExpression= ast.newSimpleName(\"x\");\t", "+\t\t\trewrite.set(statement, AssertStatement.MESSAGE_PROPERTY, newExpression, null);", "+\t\t}", "+\t\t{ // remove message", "+\t\t\tAssertStatement statement= (AssertStatement) statements.get(4);", "+\t\t\t", "+\t\t\trewrite.set(statement, AssertStatement.MESSAGE_PROPERTY, null, null);", "+\t\t}\t", "+\t\tbuf.append(\"        assert x;\\n\");", "+\t\tbuf.append(\"        assert(true) : x;\\n\");", "+\t\tbuf.append(\"        assert(true) : x;\\n\");", "+\t\tbuf.append(\"        assert(true);\\n\");"]}], "num": 31789}
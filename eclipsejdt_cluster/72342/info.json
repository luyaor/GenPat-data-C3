{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e11d8bdd6d753a5bdb0199253f12cb0e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5eab571dacbb031391d1b64780f7d965", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "4b34ac952495406305286be091754126c6d25593", "commitAfterChange": "a3337f44ed6348a5f4f65ab1b2584cb8125066c6", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tprivate String getPreserveEmptyLines(int count)", "signatureAfterChange": " \tprivate String getPreserveEmptyLines(int count)", "diff": ["-\t\t\t\t\tboolean canUseAlignmentIndentation = (nextToken != TerminalTokens.TokenNameLBRACE || !this.currentAlignment.name.equals(\"localDeclarationAssignmentAlignment\")); //$NON-NLS-1$", "+\t\t\t\t\tboolean canUseAlignmentIndentation = (nextToken != TerminalTokens.TokenNameLBRACE || this.currentAlignment.kind != Alignment.LOCAL_DECLARATION_ASSIGNMENT);", "-\t\t\t\t\t\t\t\t\tthis.currentAlignment.name.equals(\"array_initializer\") || //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\tthis.currentAlignment.name.equals(\"binaryExpressionAlignment\")) && //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\tthis.currentAlignment.kind == Alignment.ARRAY_INITIALIZER ||", "+\t\t\t\t\t\t\t\t\tthis.currentAlignment.kind == Alignment.BINARY_EXPRESSION) &&"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e51752d040decd8708e9657d27765aac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "abc22cd9c6a13221e7ed40a7fd0208b4721bde4c", "commitAfterChange": "6b46a00f76e5998d35cce628430cd3b4128c504d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t\t&& !this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_5)){", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "+\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_5) {", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "-\t\t\t\t&& !this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)){ ", "+\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_4) { "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1c5431b23ed92fc6476fa3239e23cd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "69cf42e8bc4eba88935c2a54eaa23de2e6259a9b", "commitAfterChange": "46618cf13188500eaee539b8e46fcf26be42ca02", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprotected void compileAndDeploy(String source, String directoryName, String className)", "signatureAfterChange": "  \tprotected void compileAndDeploy(String source, String directoryName, String className)", "diff": ["-\t\tif (this.complianceLevel.compareTo(COMPLIANCE_1_5) < 0) {", "+\t\tif (this.complianceLevel < ClassFileConstants.JDK1_5) {", "-\t\t} else if (this.complianceLevel.compareTo(COMPLIANCE_1_5) == 0) {", "+\t\t} else if (this.complianceLevel == ClassFileConstants.JDK1_5) {", "-\t\t} else if (this.complianceLevel.compareTo(COMPLIANCE_1_6) == 0) {", "+\t\t} else if (this.complianceLevel == ClassFileConstants.JDK1_6) {", "-\t\t} else if (this.complianceLevel.compareTo(COMPLIANCE_1_7) == 0) {", "+\t\t} else if (this.complianceLevel == ClassFileConstants.JDK1_7) {"]}], "num": 72342}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9fc88b0db35732cb82d94e224c3e28e7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b0bef7da13efc798974f8ea220e0446", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "d3120b46bb4300cffeb8a57774ffc0473ab3baac", "commitAfterChange": "f255b33684824171cf2bcf3894d3b5e52fa919b0", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate ICompilationUnit[] getWorkingCopies(IJavaElement element)", "signatureAfterChange": " \tprivate ICompilationUnit[] getWorkingCopies(IJavaElement element)", "diff": ["-\t\t\t\tICompilationUnit[] copies = getWorkingCopies();", "-\t\t\t\tint length = copies == null ? 0 : copies.length;", "-\t\t\t\tif (length > 0) {", "-\t\t\t\t\tICompilationUnit[] newWorkingCopies = new ICompilationUnit[length+1];", "-\t\t\t\t\tSystem.arraycopy(copies, 0, newWorkingCopies, 0, length);", "-\t\t\t\t\tnewWorkingCopies[length] = cu;", "-\t\t\t\t\treturn newWorkingCopies;", "-\t\t\t\t} ", "-\t\t\t\treturn new ICompilationUnit[] {cu};", "+\t\t\t\treturn new ICompilationUnit[] { cu };", "+\t\t} else if (element instanceof ICompilationUnit) {", "+\t\t\treturn new ICompilationUnit[] { (ICompilationUnit) element };", "-\t\treturn getWorkingCopies();", "+\t\t", "+\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f90a9aaadcb660176905e9f479b9606", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "c8700a3b71cbd4c7c842ba4b21536d25ce7aceed", "commitAfterChange": "843eb33de3eeb0d3402922c95bccf061ee86bb41", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprotected void addLibraryEntry(IJavaProject project, IPath path, IPath srcAttachmentPath, IPath srcAttachmentPathRoot, IPath[] accessibleFiles, IPath[] nonAccessibleFiles, boolean exported) throws JavaModelException", "signatureAfterChange": " \tprotected void addLibraryEntry(IJavaProject project, IPath path, IPath srcAttachmentPath, IPath srcAttachmentPathRoot, IPath[] accessibleFiles, IPath[] nonAccessibleFiles, boolean exported) throws JavaModelException", "diff": ["+\t\taddLibraryEntry(", "+\t\t\tproject,", "+\t\t\tpath,", "+\t\t\tsrcAttachmentPath,", "+\t\t\tsrcAttachmentPathRoot,", "+\t\t\taccessibleFiles,", "+\t\t\tnonAccessibleFiles,", "+\t\t\tnew IClasspathAttribute[0],", "+\t\t\texported", "+\t\t);", "+\t}", "-\t\t\tnew IClasspathAttribute[0], "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fa980ef253b0816908b07299722f6e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest.java", "commitBeforeChange": "7d7797539ceb0e305089090de2ead51ebf92aa21", "commitAfterChange": "bf1b15113f19bebe8799f253fba2c98750e6b32c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected void runNegativeReferenceTest(String[] testFiles, String expected)", "signatureAfterChange": " \tprotected void runNegativeReferenceTest(String[] testFiles, String expected)", "diff": ["+\t\trunNegativeReferenceTest(testFiles, expected, JavacTestOptions.Excuse.EclipseWarningConfiguredAsError);", "+\t}", "-\t\trunNegativeTest(completedFiles, expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a8bb9f369e0f22efb9cbaa79bc09a7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "210b89134044d06a70fa2c472f5e9a859c41ba00", "commitAfterChange": "b268992d45d00cd5439bb032a6e5a5226c715e7e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tvoid buildMethods()", "signatureAfterChange": "  \tvoid buildMethods()", "diff": ["-\t\t\tMethodBinding[] abstractMethods = null;", "+\t\t\tboolean hasAbstractMethods = false;", "-\t\t\t\t\t\tif (methodBinding.isAbstract()) {", "-\t\t\t\t\t\t\tif (abstractMethods == null) {", "-\t\t\t\t\t\t\t\tabstractMethods = new MethodBinding[] {methodBinding};", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tint length = abstractMethods.length;", "-\t\t\t\t\t\t\t\tSystem.arraycopy(abstractMethods, 0, abstractMethods = new MethodBinding[length + 1], 0, length);", "-\t\t\t\t\t\t\t\tabstractMethods[length] = methodBinding;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\thasAbstractMethods = hasAbstractMethods || methodBinding.isAbstract();", "-\t\t\tif (abstractMethods != null)", "-\t\t\t\tproblemReporter().abstractMethodInAbstractClass(sourceType, abstractMethods);", "+\t\t\tif (hasAbstractMethods)", "+\t\t\t\tproblemReporter().abstractMethodInConcreteClass(sourceType);"]}], "num": 69713}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8150013e2228fb33213690f5e8284e80", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51e04fc2f602180725d264f95481f2a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/TypeVector.java", "commitBeforeChange": "5ca17c5326a26b6eee24f188fb8aac58b28e7a38", "commitAfterChange": "caad60d9b7772e3fe7e4cc9da5c6ace1a71de6dd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public boolean contains(IType element)", "signatureAfterChange": " public boolean contains(IType element)", "diff": ["-\tfor (int i = this.size; --i >= 0;) {", "-\t\t/* Note: When creating new subtypes of RST, need to check whether this code", "-\t\t * which gives special treatment to lambda needs modification or not - refer to bug 436139", "-\t\t * An alternate could have been the following:", "-\t\t * if (element.equals(this.elements[i) && this.elements[i].equals(element)) return true;", "-\t\t * but the above has the issue of repeating the steps in most of the cases.", "-\t\t */", "-\t\tIType firstElement = null;", "-\t\tIType secondElement = null;", "-\t\tif (element.isLambda()) {", "-\t\t\tfirstElement = element;", "-\t\t\tsecondElement = this.elements[i];", "-\t\t} else {", "-\t\t\tfirstElement = this.elements[i];", "-\t\t\tsecondElement = element;", "-\t\t}", "-\t\tif (firstElement.equals(secondElement))", "+\tfor (int i = this.size; --i >= 0;) ", "+\t\tif (element.equals(this.elements[i]))", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d77d8fbec51c5f05776825610ad1d64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExistenceTests.java", "commitBeforeChange": "cae7f8c61c51ef4d85d837657b5392af988fbdde", "commitAfterChange": "578d821fa14706debbd7277feb7d8a3dc6683433", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void testPkgFragmentRootNotInClasspath() throws CoreException", "signatureAfterChange": " public void testPkgFragmentRootNotInClasspath() throws CoreException", "diff": ["-\t\tIJavaProject project = this.createJavaProject(\"P\", new String[] {\"src\"}, \"bin\");", "-\t\tIFolder folder = this.createFolder(\"/P/otherRoot\");", "+\t\tIJavaProject project = createJavaProject(\"P\", new String[] {\"src\"}, \"bin\");", "+\t\tIFolder folder = createFolder(\"/P/otherRoot\");", "-\t\tboolean gotException = false;", "-\t\ttry {", "-\t\t\troot.open(null);", "-\t\t} catch (JavaModelException e) {", "-\t\t\tif (e.isDoesNotExist()) {", "-\t\t\t\tgotException = true;", "-\t\t\t}", "-\t\t}", "-\t\tassertTrue(\"Should not be able to open root\", gotException);", "+\t\tassertOpenFails(", "+\t\t\t\"otherRoot [in P] is not on its project\\'s build path\",", "+\t\t\troot);", "-\t\tthis.deleteProject(\"P\");", "+\t\tdeleteProject(\"P\");"]}], "num": 49588}
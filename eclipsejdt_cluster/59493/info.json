{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f2b1f18d6767e99a4e4e3400150b647", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b852d1bd734300415abbf55e3f8e31e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "20be6646800f3125c106d8286602e4c341b0c9f2", "commitAfterChange": "9edf0a990e69fc752ead21c476a00fb874aa8f40", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public FlowInfo analyseCode(MethodScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "\r public FlowInfo analyseCode(MethodScope initializationScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-public FlowInfo analyseCode(MethodScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {\r", "+public FlowInfo analyseCode(MethodScope initializationScope, FlowContext flowContext, FlowInfo flowInfo) {\r", "+\r", "+\t// cannot define static non-constant field inside nested class\r", "+\tif (binding != null \r", "+\t\t\t&& binding.isValidBinding() \r", "+\t\t\t&& binding.isStatic() \r", "+\t\t\t&& binding.constant == NotAConstant\t\r", "+\t\t\t&& binding.declaringClass.isNestedType() \r", "+\t\t\t&& binding.declaringClass.isClass() && !binding.declaringClass.isStatic()) {\r", "+\t\tinitializationScope.problemReporter()\r", "+\t\t\t.unexpectedStaticModifierForField((SourceTypeBinding)binding.declaringClass, this);\t\t\r", "+\t}\r", "+\r", "-\t\tflowInfo = initialization.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();\r", "+\t\tflowInfo = initialization.analyseCode(initializationScope, flowContext, flowInfo).unconditionalInits();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33b63a0b2c442318e8c19cc52d250b6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\t  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "signatureAfterChange": "\t  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "diff": ["-\t\tTypeBinding tb = type.resolveTypeExpecting(scope, scope.getJavaLangThrowable());", "-\t\tif (tb == null)", "+\t\tTypeBinding exceptionType = this.type.resolveType(scope);", "+\t\tif (exceptionType == null) return null;", "+\t\tif (exceptionType.isGenericType() || exceptionType.isParameterizedType()) {", "+\t\t\tscope.problemReporter().invalidParameterizedExceptionType(exceptionType, this);", "-", "+\t\t}", "+\t\tTypeBinding throwable = scope.getJavaLangThrowable();", "+\t\tif (!exceptionType.isCompatibleWith(throwable)) {", "+\t\t\tscope.problemReporter().typeMismatchError(exceptionType, throwable, this);", "+\t\t\treturn null;", "+\t\t}", "+\t\t", "-\t\tbinding = new LocalVariableBinding(this, tb, modifiers, false); // argument decl, but local var  (where isArgument = false)", "+\t\tbinding = new LocalVariableBinding(this, exceptionType, modifiers, false); // argument decl, but local var  (where isArgument = false)", "-\t\treturn tb;", "+\t\treturn exceptionType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e25293056337994bcb0d8d9cd5d99cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MemberValuePair.java", "commitBeforeChange": "2461d94ce88e31c3e5ed882c9bd4ad46830d0640", "commitAfterChange": "5942159e64440d96335e6c48f06300dca168c47d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "signatureAfterChange": " \t \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "diff": ["-\t\t\t\tscope.problemReporter().typeMismatchError(valueType, requiredType, this.value);", "+\t\t\t\tif (leafType.isAnnotationType() && !valueType.isAnnotationType()) {", "+\t\t\t\t\tscope.problemReporter().annotationValueMustBeAnnotation(this.binding.declaringClass, this.name, this.value, leafType);\t\t\t\t", "+\t\t\t\t} else {", "+\t\t\t\t\tscope.problemReporter().typeMismatchError(valueType, requiredType, this.value);", "+\t\t\t\t}", "+\t\t\t\tif (!valueType.leafComponentType().isAnnotationType()) { // null literal", "+\t\t\t\t\tscope.problemReporter().annotationValueMustBeAnnotation(this.binding.declaringClass, this.name, this.value, leafType);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "653fd4966d2b44c3cb74865d417a0a33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "diff": ["-\t\t\t\tif (currentType.isStatic() && (enclosingType.isGenericType() || enclosingType.isParameterizedType())) {", "-\t\t\t\t\tenclosingType = scope.environment().createRawType((ReferenceBinding)enclosingType.erasure(), enclosingType.enclosingType());", "+\t\t\t\tif (currentType.isStatic() ", "+\t\t\t\t\t\t|| (enclosingType.isGenericType() ", "+\t\t\t\t\t\t\t\t&& enclosingType.outermostEnclosingType() != scope.outerMostClassScope().referenceContext.binding)) {", "+\t\t\t\t\tenclosingType = (ReferenceBinding) scope.convertToRawType(enclosingType);", "+\t\t} else if (!currentType.isStatic() && enclosingType != null && enclosingType.isRawType()){", "+\t\t\tscope.problemReporter().rawMemberTypeCannotBeParameterized(", "+\t\t\t\t\tthis, scope.environment().createRawType((ReferenceBinding)currentType.erasure(), enclosingType), argTypes);", "+\t\t\treturn null;", "-\t\t\t\t    if (!typeVariables[i].boundCheck(parameterizedType, argTypes[i]))", "+\t\t\t\t    if (typeVariables[i].boundCheck(parameterizedType, argTypes[i]) != TypeConstants.OK)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "973b17ce3fd597f1cbde0cb1f203acad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "729d195ede25ca6ee5a445494cda26bf5f4b94a7", "commitAfterChange": "9e025388268143d227b16d19d468b4e4bff0d580", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void createASTs(ASTRequestor requestor, IProgressMonitor monitor)", "signatureAfterChange": " \tpublic void createASTs(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor requestor, IProgressMonitor monitor)", "diff": ["-\t// TODO (jerome) - remove method after 3.1 M3", "-\tpublic void createASTs(ASTRequestor requestor, IProgressMonitor monitor) {", "-\t\tcreateASTs(requestor.getSources(), new String[] {}, requestor, monitor);", "-\t}"]}], "num": 59493}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9621bcea898073f37e09884e17a7216", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0644cbc0984a237399ebce9ca947537b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "4043b8a88c35a2c1612858cff67743727f25247b", "commitAfterChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 86, "signatureBeforeChange": " \tpublic void testMultipleWildcardUnboundStringPattern02() throws CoreException", "signatureAfterChange": " \tpublic void testMultipleWildcardUnboundStringPattern02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [g1.t.m.def.Generic<Object, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [g1.t.m.def.Generic<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [g1.t.m.def.Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [g1.t.m.def.Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Generic<Object, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Generic<Exception, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Generic<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic.Member] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic.Member] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f34717780c3a522a994113d72b99bed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic void test033()", "signatureAfterChange": " \tpublic void test033()", "diff": ["-\t\t\t\"     1  istore_1\\n\" + ", "+\t\t\t\"     1  istore_1 [b]\\n\" + ", "-\t\t\t\"     4  istore_2\\n\" + ", "-\t\t\t\"     5  iload_2\\n\" + ", "+\t\t\t\"     4  istore_2 [i]\\n\" + ", "+\t\t\t\"     5  iload_2 [i]\\n\" + ", "-\t\t\t\"    16  iload_1\\n\" + ", "+\t\t\t\"    16  iload_1 [b]\\n\" + ", "-\t\t\t\"    29  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    32  iload_2\\n\" + ", "-\t\t\t\"    33  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"    29  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    32  iload_2 [i]\\n\" + ", "+\t\t\t\"    33  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1144044649c48af2f018db2bf6b3e9a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AnnotationValueConversionTests.java", "commitBeforeChange": "7109b1b8695adc90efc89b381fbef11f66adc5d7", "commitAfterChange": "737754e9e10e391c87e1274f991c2e257be4069b", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \t@SuppressWarnings(\"nls\") \tpublic void testDoubleConversion_Reflection() throws Exception", "signatureAfterChange": " \t@SuppressWarnings(\"nls\") \tpublic void testDoubleConversion_Reflection() throws Exception", "diff": ["-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber z expected true but got false\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber s expected 49 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber i expected 49 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber c expected 1 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber b expected 49 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber l expected 49 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber f expected 49.0 but got 0.0\", testPath)", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member z expected true but got false\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member s expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member i expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member c expected 1 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member b expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member l expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member f expected 49.0 but got 0.0\", testPath)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1624d2bfccff1c93e90d663c4ee73b81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "4043b8a88c35a2c1612858cff67743727f25247b", "commitAfterChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic void testSingleWildcardUnboundStringPattern02() throws CoreException", "signatureAfterChange": " \tpublic void testSingleWildcardUnboundStringPattern02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [g1.t.s.def.Generic<Object>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [g1.t.s.def.Generic<Exception>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [g1.t.s.def.Generic<?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [g1.t.s.def.Generic<? extends Throwable>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [g1.t.s.def.Generic<? super RuntimeException>.Member] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Generic<Object>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Generic<Exception>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Generic<?>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Generic<? extends Throwable>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic<? super RuntimeException>.Member] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ef5c9bf56dbf2f3352bc0b79fb4de17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic void testBug95521()", "signatureAfterChange": " \tpublic void testBug95521()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28b55f79db79a1edfc15d21056274520", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  \tpublic void test109636_4()", "signatureAfterChange": "  \tpublic void test109636_4()", "diff": ["-\t\t\t\t\" * setLeadingComment(\\\"/&#42; traditional comment &#42;/\\\"); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(\\\"missing comment delimiters\\\"); // wrong\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(\\\"/&#42; unterminated traditional comment \\\"); // wrong\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(\\\"/&#42; broken\\\\n traditional comment &#42;/\\\"); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(\\\"// end-of-line comment\\\\n\\\"); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(\\\"// end-of-line comment without line terminator\\\"); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(\\\"// broken\\\\n end-of-line comment\\\\n\\\"); // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;/* traditional comment &#42;/&quot;); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;missing comment delimiters&quot;); // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;/* unterminated traditional comment &quot;); // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;/* broken\\\\n traditional comment &#42;/&quot;); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;// end-of-line comment\\\\n&quot;); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;// end-of-line comment without line terminator&quot;); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(&quot;// broken\\\\n end-of-line comment\\\\n&quot;); // wrong\" + DELIMITER +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2981e205e0670baefd30458f03b50617", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 524, "methodNumberAfterChange": 524, "signatureBeforeChange": " \tpublic void test0506()", "signatureAfterChange": " \tpublic void test0506()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 6)\\n\" +", "-\t\t\t\"\tpublic void test(List list,final Comparator comparator, X x) {\\n\" +", "-\t\t\t\"\t                 ^^^^\\n\" +", "-\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 6)\\n\" +", "-\t\t\t\"\tpublic void test(List list,final Comparator comparator, X x) {\\n\" +", "-\t\t\t\"\t                                 ^^^^^^^^^^\\n\" +", "-\t\t\t\"Comparator is a raw type. References to generic type Comparator<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. WARNING in X.java (at line 6)\\n\" +", "-\t\t\t\"\tpublic void test(List list,final Comparator comparator, X x) {\\n\" +", "-\t\t\t\"\t                                                        ^\\n\" +", "-\t\t\t\"X is a raw type. References to generic type X<E> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. WARNING in X.java (at line 7)\\n\" +", "-\t\t\t\"\tfoo(list, comparator);\\n\" +", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: Unchecked invocation foo(List, Comparator) of the generic method foo(List<T>, Comparator<? super T>) of type X<E>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. WARNING in X.java (at line 7)\\n\" +", "-\t\t\t\"\tfoo(list, comparator);\\n\" +", "-\t\t\t\"\t    ^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<T>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. WARNING in X.java (at line 7)\\n\" +", "-\t\t\t\"\tfoo(list, comparator);\\n\" +", "-\t\t\t\"\t          ^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type Comparator needs unchecked conversion to conform to Comparator<? super T>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"7. WARNING in X.java (at line 8)\\n\" +", "-\t\t\t\"\tbar(list, comparator);\\n\" +", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: Unchecked invocation bar(List, Comparator) of the generic method bar(List<T>, Comparator<? super T>) of type X<E>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"8. WARNING in X.java (at line 8)\\n\" +", "-\t\t\t\"\tbar(list, comparator);\\n\" +", "-\t\t\t\"\t    ^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<T>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"9. WARNING in X.java (at line 8)\\n\" +", "-\t\t\t\"\tbar(list, comparator);\\n\" +", "-\t\t\t\"\t          ^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type Comparator needs unchecked conversion to conform to Comparator<? super T>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"10. WARNING in X.java (at line 10)\\n\" +", "-\t\t\t\"\tx.foo(list, comparator);\\n\" +", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: The method foo(List, Comparator) belongs to the raw type X. References to generic type X<E> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"11. WARNING in X.java (at line 11)\\n\" +", "-\t\t\t\"\tx.bar(list, comparator);\\n\" +", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"The static method bar(List, Comparator) from the type X should be accessed in a static way\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"12. WARNING in X.java (at line 11)\\n\" +", "-\t\t\t\"\tx.bar(list, comparator);\\n\" +", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: Unchecked invocation bar(List, Comparator) of the generic method bar(List<T>, Comparator<? super T>) of type X\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"13. WARNING in X.java (at line 11)\\n\" +", "-\t\t\t\"\tx.bar(list, comparator);\\n\" +", "-\t\t\t\"\t      ^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<T>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"14. WARNING in X.java (at line 11)\\n\" +", "-\t\t\t\"\tx.bar(list, comparator);\\n\" +", "-\t\t\t\"\t            ^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type Comparator needs unchecked conversion to conform to Comparator<? super T>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"15. ERROR in X.java (at line 18)\\n\" +", "-\t\t\t\"\tZork z;\\n\" +", "-\t\t\t\"\t^^^^\\n\" +", "-\t\t\t\"Zork cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tpublic void test(List list,final Comparator comparator, X x) {\\n\" + ", "+\t\t\t\"\t                 ^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tpublic void test(List list,final Comparator comparator, X x) {\\n\" + ", "+\t\t\t\"\t                                 ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Comparator is a raw type. References to generic type Comparator<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tpublic void test(List list,final Comparator comparator, X x) {\\n\" + ", "+\t\t\t\"\t                                                        ^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tfoo(list, comparator);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation foo(List, Comparator) of the generic method foo(List<T>, Comparator<? super T>) of type X<E>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tfoo(list, comparator);\\n\" + ", "+\t\t\t\"\t    ^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tfoo(list, comparator);\\n\" + ", "+\t\t\t\"\t          ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Comparator needs unchecked conversion to conform to Comparator<? super Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tbar(list, comparator);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation bar(List, Comparator) of the generic method bar(List<T>, Comparator<? super T>) of type X<E>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tbar(list, comparator);\\n\" + ", "+\t\t\t\"\t    ^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tbar(list, comparator);\\n\" + ", "+\t\t\t\"\t          ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Comparator needs unchecked conversion to conform to Comparator<? super Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tx.foo(list, comparator);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The method foo(List, Comparator) belongs to the raw type X. References to generic type X<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"11. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tx.bar(list, comparator);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The static method bar(List<Object>, Comparator<? super Object>) from the type X should be accessed in a static way\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"12. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tx.bar(list, comparator);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation bar(List, Comparator) of the generic method bar(List<T>, Comparator<? super T>) of type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"13. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tx.bar(list, comparator);\\n\" + ", "+\t\t\t\"\t      ^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"14. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tx.bar(list, comparator);\\n\" + ", "+\t\t\t\"\t            ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Comparator needs unchecked conversion to conform to Comparator<? super Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"15. ERROR in X.java (at line 18)\\n\" + ", "+\t\t\t\"\tZork z;\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cf4e7fdad9a4836d145c91f58a2620b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void test08() throws JavaModelException", "signatureAfterChange": "  \tpublic void test08() throws JavaModelException", "diff": ["-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"field {key=LTest;.field} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest;.foo(ILjava/lang/String;)V} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"String {key=Ljava/lang/String;} [in String.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\\n\" + ", "-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest;.foo(ILjava/lang/String;)V} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"String {key=Ljava/lang/String;} [in String.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\",", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo(int, String) [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"String [in String.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\\n\" + ", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo(int, String) [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"String [in String.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36089b04278179936e6043f5e4c1c381", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " public void testTypeRefQualifiedAll_Allocation() throws CoreException", "signatureAfterChange": " public void testTypeRefQualifiedAll_Allocation() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.field [\ttype.def.Types field = new \ufffd|type.def.Types|\ufffd(), local, other = new type.def.Types();@158] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.other [\ttype.def.Types field = new type.def.Types(), local, other = new \ufffd|type.def.Types|\ufffd();@195] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\t\tt = new \ufffd|TestTypes|\ufffd();@297] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\t\tt = new \ufffd|type.def.Types|\ufffd();@356] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java type.def.Types all.types.ref.TestTypes.method(type.def.Types) [\t\tObject obj = new \ufffd|type.def.Types|\ufffd();@591] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\t\t\tthis.str = new \ufffd|String|\ufffd();@1032] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\t\t\tthis.object = new \ufffd|Object|\ufffd();@1063] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.field [\ttype.def.Types field = new !|type.def.Types|!(), local, other = new type.def.Types();@158] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.other [\ttype.def.Types field = new type.def.Types(), local, other = new !|type.def.Types|!();@195] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\t\tt = new !|TestTypes|!();@297] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\t\tt = new !|type.def.Types|!();@356] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java type.def.Types all.types.ref.TestTypes.method(type.def.Types) [\t\tObject obj = new !|type.def.Types|!();@591] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\t\t\tthis.str = new !|String|!();@1032] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\t\t\tthis.object = new !|Object|!();@1063] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ba8f55b811cb3e55022171e00d5a7d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void test004()", "signatureAfterChange": " \tpublic void test004()", "diff": ["-\t\t\t\"     1  istore_1\\n\" + ", "+\t\t\t\"     1  istore_1 [b]\\n\" + ", "-\t\t\t\"     4  istore_2\\n\" + ", "-\t\t\t\"     5  iload_2\\n\" + ", "+\t\t\t\"     4  istore_2 [i]\\n\" + ", "+\t\t\t\"     5  iload_2 [i]\\n\" + ", "-\t\t\t\"    11  iload_1\\n\" + ", "+\t\t\t\"    11  iload_1 [b]\\n\" + ", "-\t\t\t\"    15  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    18  iload_2\\n\" + ", "-\t\t\t\"    19  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"    15  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    18  iload_2 [i]\\n\" + ", "+\t\t\t\"    19  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "484a66283250dbfe496ad07122f815d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void test014()", "signatureAfterChange": " \tpublic void test014()", "diff": ["-\t\t\t\"     1  istore_1\\n\" + ", "+\t\t\t\"     1  istore_1 [b]\\n\" + ", "-\t\t\t\"     4  istore_2\\n\" + ", "-\t\t\t\"     5  iload_2\\n\" + ", "+\t\t\t\"     4  istore_2 [i]\\n\" + ", "+\t\t\t\"     5  iload_2 [i]\\n\" + ", "-\t\t\t\"    16  iload_1\\n\" + ", "+\t\t\t\"    16  iload_1 [b]\\n\" + ", "-\t\t\t\"    28  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    31  iload_2\\n\" + ", "-\t\t\t\"    32  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"    28  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    31  iload_2 [i]\\n\" + ", "+\t\t\t\"    32  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48d459958e1245e2c8c0b89fe9a213df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void test038()", "signatureAfterChange": " \tpublic void test038()", "diff": ["-\t\t\t\"     1  istore_1\\n\" + ", "+\t\t\t\"     1  istore_1 [b]\\n\" + ", "-\t\t\t\"     4  istore_2\\n\" + ", "-\t\t\t\"     5  iload_2\\n\" + ", "+\t\t\t\"     4  istore_2 [i]\\n\" + ", "+\t\t\t\"     5  iload_2 [i]\\n\" + ", "-\t\t\t\"    16  iload_1\\n\" + ", "+\t\t\t\"    16  iload_1 [b]\\n\" + ", "-\t\t\t\"    29  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    32  iload_2\\n\" + ", "-\t\t\t\"    33  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"    29  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    32  iload_2 [i]\\n\" + ", "+\t\t\t\"    33  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e24edce958f0b51384abca69a62c3cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": " \tpublic void testBug95521()", "signatureAfterChange": " \tpublic void testBug95521()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f962719fffc24a57225bbf0b4471d84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  \tpublic void test109636_4()", "signatureAfterChange": "  \tpublic void test109636_4()", "diff": ["-\t\t\t\t\" * setLeadingComment(&quot;/* traditional comment &#42;/&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;missing comment delimiters&quot;); // wrong\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;/* unterminated traditional comment &quot;); // wrong\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;/* broken\\\\n traditional comment &#42;/&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;// end-of-line comment\\\\n&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;// end-of-line comment without line terminator&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;// broken\\\\n end-of-line comment\\\\n&quot;); // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"/&#42; traditional comment &#42;/\\\"); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"missing comment delimiters\\\"); // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"/&#42; unterminated traditional comment \\\"); // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"/&#42; broken\\\\n traditional comment &#42;/\\\"); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"// end-of-line comment\\\\n\\\"); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"// end-of-line comment without line terminator\\\"); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"// broken\\\\n end-of-line comment\\\\n\\\"); // wrong\" + DELIMITER +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dfa1512e744d0e5a235180cf095b2c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": "\r public void test0079() throws IOException", "signatureAfterChange": "\r public void test0079() throws IOException", "diff": ["-\tassertEquals(\"Wrong location\", \"{0}\", locations.get(\"@B\"));\r", "-\tassertEquals(\"Wrong location\", \"{0,0,2}\", locations.get(\"@C\"));\r", "-\tassertEquals(\"Wrong location\", \"{0,0}\", locations.get(\"@D\"));\r", "-\tassertEquals(\"Wrong location\", \"{0,0,0}\", locations.get(\"@E\"));\r", "-\tassertEquals(\"Wrong location\", \"{0,0,1}\", locations.get(\"@F\"));\r", "-\tassertEquals(\"Wrong location\", \"{1}\", locations.get(\"@G\"));\r", "-\tassertEquals(\"Wrong location\", \"{1,0}\", locations.get(\"@H\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0)]\", locations.get(\"@B\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0), TYPE_ARGUMENT(0), ARRAY, ARRAY, ARRAY]\", locations.get(\"@C\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0), TYPE_ARGUMENT(0)]\", locations.get(\"@D\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0), TYPE_ARGUMENT(0), ARRAY]\", locations.get(\"@E\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0), TYPE_ARGUMENT(0), ARRAY, ARRAY]\", locations.get(\"@F\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1)]\", locations.get(\"@G\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1), TYPE_ARGUMENT(0)]\", locations.get(\"@H\"));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e15edae6661f1b900bf8578fbc97d34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic void testBug95521()", "signatureAfterChange": " \tpublic void testBug95521()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cff1190f4b6ff3ab9ed16853c2839e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": "  \tpublic void test048()", "signatureAfterChange": "  \tpublic void test048()", "diff": ["-\t\t\t\"     0  iload_0\\n\" + ", "+\t\t\t\"     0  iload_0 [bool]\\n\" + ", "-\t\t\t\"    10  istore_1\\n\" + ", "+\t\t\t\"    10  istore_1 [j]\\n\" + ", "-\t\t\t\"    14  astore_3\\n\" + ", "+\t\t\t\"    14  astore_3 [local_3]\\n\" + ", "-\t\t\t\"    18  aload_3\\n\" + ", "+\t\t\t\"    18  aload_3 [local_3]\\n\" + ", "-\t\t\t\"    20  astore_2\\n\" + ", "+\t\t\t\"    20  astore_2 [j]\\n\" + ", "-\t\t\t\"    22  istore_1\\n\" + ", "+\t\t\t\"    22  istore_1 [j]\\n\" + ", "-\t\t\t\"    28  iload_1\\n\" + ", "+\t\t\t\"    28  iload_1 [j]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "740ae60a7b76a95c8e14c152077b86f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "\r public void test0073() throws IOException", "signatureAfterChange": "\r public void test0073() throws IOException", "diff": ["-\tassertEquals(\"Wrong location\", \"{1}\", locations.get(\"@J\"));\r", "-\tassertEquals(\"Wrong location\", \"{2}\", locations.get(\"@A\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,0}\", locations.get(\"@B\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,1}\", locations.get(\"@C\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,1,0,2}\", locations.get(\"@H\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,1,0}\", locations.get(\"@E\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,1,0,1}\", locations.get(\"@G\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY]\", locations.get(\"@J\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY]\", locations.get(\"@A\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(0)]\", locations.get(\"@B\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1)]\", locations.get(\"@C\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1), TYPE_ARGUMENT(0), ARRAY, ARRAY, ARRAY]\", locations.get(\"@H\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1), TYPE_ARGUMENT(0)]\", locations.get(\"@E\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1), TYPE_ARGUMENT(0), ARRAY, ARRAY]\", locations.get(\"@G\"));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79505a67a32bc49a1ed7cb6b15760e22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "448d62b2ff66cd7ed3c1bda65bd5259a6d0971b0", "commitAfterChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "methodNumberBeforeChange": 574, "methodNumberAfterChange": 575, "signatureBeforeChange": " public void testBug247564h_2()", "signatureAfterChange": " public void testBug247564h_2()", "diff": ["-// to make sure that id's of local variables in inner classes don't conflict with those of fields.", "+// to make sure that id's of local variables in inner classes dotn conflict with those of fields.", "-\t\t\t\"\t    void goo(Object var) {\\n\" +", "-\t\t\t\"    \t   if (var == null && field4.toString() == \\\"\\\"){}\\n\" +", "-\t\t\t\"    \t   if (var == null && field5.toString() == \\\"\\\"){}\\n\" +", "-\t\t\t\"    \t   if (field3 == null && field3.toString() == \\\"\\\"){}\\n\" +", "-\t\t\t\"    \t   if (field3 == null && field1.toString() == \\\"\\\"){}\\n\" +", "-\t\t\t\"       }\\n\" +", "+\t\t\t\"\t void goo(Object var) {\\n\" +", "+\t\t\t\"    \tif (var == null && field4.toString() == \\\"\\\"){}\\n\" +", "+\t\t\t\"    \tif (var == null && field5.toString() == \\\"\\\"){}\\n\" +", "+\t\t\t\"    \tif (field3 == null && field3.toString() == \\\"\\\"){}\\n\" +", "+\t\t\t\"    \tif (field3 == null && field1.toString() == \\\"\\\"){}\\n\" +", "-\t\t\t\"    Object field22;\\n\" +", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"  Object field22;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79f15347b02f880432ac74417e21bb98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "e92324cecc3fbf731a68d99288f72318b17cf1ea", "commitAfterChange": "9832689930749c0e863f1bb11ec756d41ad5c5d4", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 113, "signatureBeforeChange": " public void testSimplePackageReference() throws CoreException", "signatureAfterChange": " public void testSimplePackageReference() throws CoreException", "diff": ["-\t\t\"src/InterfaceImplementors.java InterfaceImplementors [p]\\n\" +", "-\t\t\"src/Test.java Test.main(String[]) -> void [p]\\n\" +", "-\t\t\"src/Test.java Test.main(String[]) -> void [p]\\n\" +", "-\t\t\"src/Test.java Test.main(String[]) -> void [p]\\n\" +", "-\t\t\"src/Test.java Test.main(String[]) -> void [p]\\n\" +", "-\t\t\"src/Test.java Test.main(String[]) -> void [p]\\n\" +", "-\t\t\"src/Test.java Test.main(String[]) -> void [p]\\n\" +", "-\t\t\"src/Test.java Test.main(String[]) -> void [p]\\n\" +", "-\t\t\"src/TypeReferenceInImport/X.java [p]\", ", "+\t\t\"src/InterfaceImplementors.java InterfaceImplementors [p]\\n\" + ", "+\t\t\"src/Test.java void Test.main(String[]) [p]\\n\" + ", "+\t\t\"src/Test.java void Test.main(String[]) [p]\\n\" + ", "+\t\t\"src/Test.java void Test.main(String[]) [p]\\n\" + ", "+\t\t\"src/Test.java void Test.main(String[]) [p]\\n\" + ", "+\t\t\"src/Test.java void Test.main(String[]) [p]\\n\" + ", "+\t\t\"src/Test.java void Test.main(String[]) [p]\\n\" + ", "+\t\t\"src/Test.java void Test.main(String[]) [p]\\n\" + ", "+\t\t\"src/TypeReferenceInImport/X.java [p]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b461eef4b993d7cf879008a1ad77a78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 432, "methodNumberAfterChange": 433, "signatureBeforeChange": " \tpublic void test429()", "signatureAfterChange": " \tpublic void test429()", "diff": ["-\t\t\t\"Bound conflict: Comparable<X5> is inherited with conflicting arguments\\n\" + ", "+\t\t\t\"The interface Comparable cannot be implemented more than once with different arguments: Comparable<X5> and Comparable<Y>\\n\" + ", "-\t\t\t\"1. ERROR in X6.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tclass X6 <T extends Y & Comparable<X6>> {}\\r\\n\" + ", "+\t\t\t\"1. ERROR in X6.java (at line 1)\\n\" + ", "+\t\t\t\"\tclass X6 <T extends Y & Comparable<X6>> {}\\n\" + ", "-\t\t\t\"Bound conflict: Comparable<X6> is inherited with conflicting arguments\\n\" + ", "+\t\t\t\"The interface Comparable cannot be implemented more than once with different arguments: Comparable<X6> and Comparable<Z>\\n\" + ", "-\t\t\t\"1. ERROR in X7.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tclass X7 <T extends Comparable<Z> & Comparable<X7>> {}\\r\\n\" + ", "+\t\t\t\"1. ERROR in X7.java (at line 1)\\n\" + ", "+\t\t\t\"\tclass X7 <T extends Comparable<Z> & Comparable<X7>> {}\\n\" + ", "-\t\t\t\"Bound conflict: Comparable<X7> is inherited with conflicting arguments\\n\" + ", "+\t\t\t\"The interface Comparable cannot be implemented more than once with different arguments: Comparable<X7> and Comparable<Z>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e7b5b72b2a3f01bfabf97cb7c5a1791", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void testTypeRef_Annotation() throws CoreException", "signatureAfterChange": " public void testTypeRef_Annotation() throws CoreException", "diff": ["-\t\t\"src/type/def/Types.java type.def.Types [@\ufffd|Bug|\ufffd@19] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ITest1 [@\ufffd|Bug|\ufffd@128] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ETest [@\ufffd|Bug|\ufffd@195] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ATest [@\ufffd|Bug|\ufffd@221] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes [@\ufffd|Bug|\ufffd(num=155013)@64] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes.field [\t@\ufffd|Bug|\ufffd(comment=\\\"field\\\")@121] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t@\ufffd|Bug|\ufffd(comment=\\\"method\\\", num=155013)@158] EXACT_MATCH\"", "+\t\t\"src/type/def/Types.java type.def.Types [@!|Bug|!@19] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ITest1 [@!|Bug|!@128] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ETest [@!|Bug|!@195] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ATest [@!|Bug|!@221] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes [@!|Bug|!(num=155013)@64] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes.field [\t@!|Bug|!(comment=\\\"field\\\")@121] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t@!|Bug|!(comment=\\\"method\\\", num=155013)@158] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84921bc3f160eb7fc609462d85c48c56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "d6c2a90130be430285c5f6a000090d250c310afd", "commitAfterChange": "51e1f00f8d474f0b209b47afa85e44328a517f92", "methodNumberBeforeChange": 575, "methodNumberAfterChange": 574, "signatureBeforeChange": " public void testBug247564h_2()", "signatureAfterChange": " public void testBug247564h_2()", "diff": ["-// to make sure that id's of local variables in inner classes dotn conflict with those of fields.", "+// to make sure that id's of local variables in inner classes don't conflict with those of fields.", "-\t\t\t\"\t void goo(Object var) {\\n\" +", "-\t\t\t\"    \tif (var == null && field4.toString() == \\\"\\\"){}\\n\" +", "-\t\t\t\"    \tif (var == null && field5.toString() == \\\"\\\"){}\\n\" +", "-\t\t\t\"    \tif (field3 == null && field3.toString() == \\\"\\\"){}\\n\" +", "-\t\t\t\"    \tif (field3 == null && field1.toString() == \\\"\\\"){}\\n\" +", "+\t\t\t\"\t    void goo(Object var) {\\n\" +", "+\t\t\t\"    \t   if (var == null && field4.toString() == \\\"\\\"){}\\n\" +", "+\t\t\t\"    \t   if (var == null && field5.toString() == \\\"\\\"){}\\n\" +", "+\t\t\t\"    \t   if (field3 == null && field3.toString() == \\\"\\\"){}\\n\" +", "+\t\t\t\"    \t   if (field3 == null && field1.toString() == \\\"\\\"){}\\n\" +", "+\t\t\t\"       }\\n\" +", "-\t\t\t\"    }\\n\" +", "-\t\t\t\"  Object field22;\\n\" +", "+\t\t\t\"    Object field22;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88c9d6eb86440ee645457a49810f5628", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void testGetWorkingCopies() throws CoreException", "signatureAfterChange": " \tpublic void testGetWorkingCopies() throws CoreException", "diff": ["-\t\t\t\t\"[Working copy] X.java [in [default] [in [project root] [in P]]]\",", "+\t\t\t\t\"[Working copy] X.java [in <default> [in <project root> [in P]]]\",", "-\t\t\t\t\"[Working copy] X.java [in [default] [in [project root] [in P]]]\\n\" +", "-\t\t\t\t\"[Working copy] Y.java [in [default] [in [project root] [in P]]]\",", "+\t\t\t\t\"[Working copy] X.java [in <default> [in <project root> [in P]]]\\n\" +", "+\t\t\t\t\"[Working copy] Y.java [in <default> [in <project root> [in P]]]\",", "-\t\t\t\t\"[Working copy] X.java [in [default] [in [project root] [in P]]]\",", "+\t\t\t\t\"[Working copy] X.java [in <default> [in <project root> [in P]]]\",", "-\t\t\t\t\"[Working copy] X.java [in [default] [in [project root] [in P]]]\\n\" +", "-\t\t\t\t\"[Working copy] Y.java [in [default] [in [project root] [in P]]]\",", "+\t\t\t\t\"[Working copy] X.java [in <default> [in <project root> [in P]]]\\n\" +", "+\t\t\t\t\"[Working copy] Y.java [in <default> [in <project root> [in P]]]\",", "-\t\t\t\t\"[Working copy] Y.java [in [default] [in [project root] [in P]]]\",", "+\t\t\t\t\"[Working copy] Y.java [in <default> [in <project root> [in P]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90fc8db2ad2f21d3edb565deec8382ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void test028()", "signatureAfterChange": " public void test028()", "diff": ["-\t\t\"    129  invokevirtual #39 <Method java/util/ArrayList.iterator()Ljava/util/Iterator;>\\n\" + ", "+\t\t\"    129  invokevirtual #38 <Method java/util/ArrayList.iterator()Ljava/util/Iterator;>\\n\" + ", "-\t\t\"    139  invokeinterface [nargs : 1] #45 <Interface method java/util/Iterator.next()Ljava/lang/Object;>\\n\" + ", "-\t\t\"    144  checkcast #47 java/lang/String\\n\" + ", "+\t\t\"    139  invokeinterface [nargs : 1] #44 <Interface method java/util/Iterator.next()Ljava/lang/Object;>\\n\" + ", "+\t\t\"    144  checkcast #46 java/lang/String\\n\" + ", "-\t\t\"    148  getstatic #53 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "+\t\t\"    148  getstatic #52 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    152  invokevirtual #59 <Method java/io/PrintStream.print(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    152  invokevirtual #58 <Method java/io/PrintStream.print(Ljava/lang/String;)V>\\n\" + ", "-\t\t\"    157  invokeinterface [nargs : 1] #63 <Interface method java/util/Iterator.hasNext()Z>\\n\" + ", "+\t\t\"    157  invokeinterface [nargs : 1] #62 <Interface method java/util/Iterator.hasNext()Z>\\n\" + ", "-\t\t\"    170  invokevirtual #67 <Method java/util/ArrayList.size()I>\\n\" + ", "+\t\t\"    170  invokevirtual #66 <Method java/util/ArrayList.size()I>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a23d1a0a6425a056162c07db4eff915b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AnnotationValueConversionTests.java", "commitBeforeChange": "7109b1b8695adc90efc89b381fbef11f66adc5d7", "commitAfterChange": "737754e9e10e391c87e1274f991c2e257be4069b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t@SuppressWarnings(\"nls\") \tpublic void testDoubleConversion() throws Exception", "signatureAfterChange": " \t@SuppressWarnings(\"nls\") \tpublic void testDoubleConversion() throws Exception", "diff": ["-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber z expected java.lang.Boolean but got java.lang.Double\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber s expected java.lang.Short but got java.lang.Double\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber i expected java.lang.Integer but got java.lang.Double\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber c expected java.lang.Character but got java.lang.Double\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber b expected java.lang.Byte but got java.lang.Double\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber l expected java.lang.Long but got java.lang.Double\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber f expected java.lang.Float but got java.lang.Double\", testPath)", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member z expected java.lang.Boolean but got java.lang.Double\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member s expected java.lang.Short but got java.lang.Double\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member i expected java.lang.Integer but got java.lang.Double\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member c expected java.lang.Character but got java.lang.Double\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member b expected java.lang.Byte but got java.lang.Double\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member l expected java.lang.Long but got java.lang.Double\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member f expected java.lang.Float but got java.lang.Double\", testPath)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a48449d8d08ca588212d8654e004aa68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void test0061()", "signatureAfterChange": " \tpublic void test0061()", "diff": ["-\t\t\t\t\"1. ERROR in test\\\\X.java (at line 7)\\n\" +", "-\t\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "-\t\t\t\t\"\t  ^^^\\n\" +", "-\t\t\t\t\"Syntax error on token \\\"int\\\", Dimensions expected after this token\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"2. ERROR in test\\\\X.java (at line 7)\\n\" +", "-\t\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "-\t\t\t\t\"\t       ^^^^^\\n\" +", "-\t\t\t\t\"Syntax error on token \\\"short\\\", Dimensions expected after this token\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"3. ERROR in test\\\\X.java (at line 7)\\n\" +", "-\t\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "-\t\t\t\t\"\t              ^^^^\\n\" +", "-\t\t\t\t\"Syntax error on token \\\"long\\\", Dimensions expected after this token\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"4. ERROR in test\\\\X.java (at line 7)\\n\" +", "-\t\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "-\t\t\t\t\"\t                    ^^^^^\\n\" +", "-\t\t\t\t\"Syntax error on token \\\"float\\\", Dimensions expected after this token\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"5. ERROR in test\\\\X.java (at line 7)\\n\" +", "-\t\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "-\t\t\t\t\"\t                           ^^^^^^\\n\" +", "-\t\t\t\t\"Syntax error on token \\\"double\\\", Dimensions expected after this token\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"6. ERROR in test\\\\X.java (at line 7)\\n\" +", "-\t\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "-\t\t\t\t\"\t                                   ^^^^^^^\\n\" +", "-\t\t\t\t\"Syntax error on token \\\"boolean\\\", Dimensions expected after this token\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"7. ERROR in test\\\\X.java (at line 7)\\n\" +", "-\t\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "-\t\t\t\t\"\t                                            ^^^^\\n\" +", "-\t\t\t\t\"Syntax error on token \\\"char\\\", Dimensions expected after this token\\n\" +", "-\t\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\"1. ERROR in test\\\\X.java (at line 7)\\n\" +", "+\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "+\t\t\t\"\t  ^^^\\n\" +", "+\t\t\t\"Syntax error, insert \\\"Dimensions\\\" to complete TypeArgument\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. ERROR in test\\\\X.java (at line 7)\\n\" +", "+\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "+\t\t\t\"\t       ^^^^^\\n\" +", "+\t\t\t\"Syntax error, insert \\\"Dimensions\\\" to complete TypeArgument\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"3. ERROR in test\\\\X.java (at line 7)\\n\" +", "+\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "+\t\t\t\"\t              ^^^^\\n\" +", "+\t\t\t\"Syntax error, insert \\\"Dimensions\\\" to complete TypeArgument\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"4. ERROR in test\\\\X.java (at line 7)\\n\" +", "+\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "+\t\t\t\"\t                    ^^^^^\\n\" +", "+\t\t\t\"Syntax error, insert \\\"Dimensions\\\" to complete TypeArgument\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"5. ERROR in test\\\\X.java (at line 7)\\n\" +", "+\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "+\t\t\t\"\t                           ^^^^^^\\n\" +", "+\t\t\t\"Syntax error, insert \\\"Dimensions\\\" to complete TypeArgument\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"6. ERROR in test\\\\X.java (at line 7)\\n\" +", "+\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "+\t\t\t\"\t                                   ^^^^^^^\\n\" +", "+\t\t\t\"Syntax error, insert \\\"Dimensions\\\" to complete TypeArgument\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"7. ERROR in test\\\\X.java (at line 7)\\n\" +", "+\t\t\t\"\tX<int, short, long, float, double, boolean, char> x;\\n\" +", "+\t\t\t\"\t                                            ^^^^\\n\" +", "+\t\t\t\"Syntax error, insert \\\"Dimensions\\\" to complete ReferenceType\\n\" +", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5fe7ae184a6d3be16d60aaa1aae7f14", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " public void testTypeRefAll_Allocation() throws CoreException", "signatureAfterChange": " public void testTypeRefAll_Allocation() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.field [\tTypes field = new \ufffd|Types|\ufffd(), local, other = new Types();@167] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.other [\tTypes field = new Types(), local, other = new \ufffd|Types|\ufffd();@195] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\t\tt = new \ufffd|TestTypes|\ufffd();@279] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\t\tt = new \ufffd|Types|\ufffd();@338] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java Types all.types.ref.TestTypes.method(Types) [\t\tObject obj = new \ufffd|Types|\ufffd();@519] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\t\t\tthis.str = new \ufffd|String|\ufffd();@897] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\t\t\tthis.object = new \ufffd|Object|\ufffd();@928] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.field [\tTypes field = new !|Types|!(), local, other = new Types();@167] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.other [\tTypes field = new Types(), local, other = new !|Types|!();@195] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\t\tt = new !|TestTypes|!();@279] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\t\tt = new !|Types|!();@338] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java Types all.types.ref.TestTypes.method(Types) [\t\tObject obj = new !|Types|!();@519] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\t\t\tthis.str = new !|String|!();@897] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\t\t\tthis.object = new !|Object|!();@928] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0e15ea454141fbe4a237158e5fbd4f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "14ba43da4ca84e6aa2e4b0e2b6c660335b90691e", "commitAfterChange": "b7f39314c9eefd05e7002c31c87dcdb0333c0655", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-        \"    -cp -classpath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" +", "+        \"    -cp -classpath <directories and ZIP archives separated by \" + File.pathSeparator + \">\\n\" +", "-        \"    -bootclasspath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" +", "+        \"    -bootclasspath <directories and ZIP archives separated by \" + File.pathSeparator + \">\\n\" +", "-        \"    -sourcepath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" +", "+        \"    -sourcepath <directories and ZIP archives separated by \" + File.pathSeparator + \">\\n\" +", "-        \"                       general ''-d'' option is specified. zip/jar files cannot\\n\" +", "+        \"                       general ''-d'' option is specified. ZIP archives cannot\\n\" +", "-        \"                       specify location for extension zip/jar files\\n\" +", "+        \"                       specify location for extension ZIP archives\\n\" +", "-        \"                       specify location for endorsed zip/jar files\\n\" +", "+        \"                       specify location for endorsed ZIP archives\\n\" +", "-        \"    -processorpath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" + ", "+        \"    -processorpath <directories and ZIP archives separated by \" + File.pathSeparator + \">\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2cbb28a3ccf190b32f18e1a005d7a77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic void test07() throws JavaModelException", "signatureAfterChange": "  \tpublic void test07() throws JavaModelException", "diff": ["-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"field {key=LTest;.field} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest;.foo(ILjava/lang/String;)V} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"String {key=Ljava/lang/String;} [in String.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\\n\" + ", "-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest;.foo(ILjava/lang/String;)V} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"String {key=Ljava/lang/String;} [in String.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\",", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo(int, String) [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"String [in String.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\\n\" + ", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo(int, String) [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"String [in String.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5b8a414f39dc8990fbbe11d8706eb0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void test009()", "signatureAfterChange": " \tpublic void test009()", "diff": ["-\t\t\t\"     1  istore_1\\n\" + ", "+\t\t\t\"     1  istore_1 [b]\\n\" + ", "-\t\t\t\"     4  istore_2\\n\" + ", "-\t\t\t\"     5  iload_2\\n\" + ", "+\t\t\t\"     4  istore_2 [i]\\n\" + ", "+\t\t\t\"     5  iload_2 [i]\\n\" + ", "-\t\t\t\"    11  iload_1\\n\" + ", "+\t\t\t\"    11  iload_1 [b]\\n\" + ", "-\t\t\t\"    15  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    18  iload_2\\n\" + ", "-\t\t\t\"    19  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"    15  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    18  iload_2 [i]\\n\" + ", "+\t\t\t\"    19  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd978312c97b8707475dfd13afd12f9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 332, "methodNumberAfterChange": 333, "signatureBeforeChange": " public void testBug330313_wksp2_01 ()", "signatureAfterChange": " public void testBug330313_wksp2_01 ()", "diff": ["-\t\t\"\t// comment\\n\" + ", "-\t\t\"\t{ \\\"STR1\\\",\\n\" + ", "-\t\t\"\t\t\tnew String[] { \\\"STR\\\", // comment\\n\" + ", "-\t\t\"\t\t\t\t\t\\\"STR\\\", // comment\\n\" + ", "-\t\t\"\t\t\t\t\t\\\"STR\\\" } // comment\\n\" + ", "-\t\t\"\t}\\n\" + ", "+\t\t\"\t\t\t{ \\\"STR1\\\",\\n\" + ", "+\t\t\"\t\t\t\t\t// comment\\n\" + ", "+\t\t\"\t\t\t\t\tnew String[] { \\\"STR\\\", // comment\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\\\"STR\\\", // comment\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\\\"STR\\\" } // comment\\n\" + ", "+\t\t\"\t\t\t}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcd7e05d4d91cb3f66aa96f7153228fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "33070dd65248032bf868ef46597e20a0b147cc6d", "commitAfterChange": "82daf6d6a8a37bf14ad5d6b147f58afbb27df25a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic boolean performConcurrentJob( \t\tIJob searchJob, \t\tint waitingPolicy, \t\tIProgressMonitor progress)", "signatureAfterChange": " \tpublic boolean performConcurrentJob( \t\tIJob searchJob, \t\tint waitingPolicy, \t\tIProgressMonitor progress)", "diff": ["-\t\t\tJobManager.verbose(\"STARTING concurrent job - \" + searchJob); //$NON-NLS-1$", "+\t\t\tJobManager.verbose(\"STARTING  concurrent job - \" + searchJob); //$NON-NLS-1$", "-\t\t\t\tJobManager.verbose(\"ABORTED concurrent job - \" + searchJob); //$NON-NLS-1$", "+\t\t\t\tJobManager.verbose(\"ABORTED   concurrent job - \" + searchJob); //$NON-NLS-1$", "-\t\t\t\t\t\tJobManager.verbose(\"-> NOT READY - Forcing immediate - \" + searchJob);//$NON-NLS-1$", "+\t\t\t\t\t\tJobManager.verbose(\"-> NOT READY - forcing immediate - \" + searchJob);//$NON-NLS-1$", "-\t\t\t\t\t\tJobManager.verbose(\"DONE concurrent job - \" + searchJob); //$NON-NLS-1$", "+\t\t\t\t\t\tJobManager.verbose(\"FINISHED  concurrent job - \" + searchJob); //$NON-NLS-1$", "-\t\t\t\t\t\tJobManager.verbose(\"-> NOT READY - Cancelling - \" + searchJob); //$NON-NLS-1$", "+\t\t\t\t\t\tJobManager.verbose(\"-> NOT READY - cancelling - \" + searchJob); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\tJobManager.verbose(\"-> NOT READY - Waiting until ready - \" + searchJob);//$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\tJobManager.verbose(\"-> NOT READY - waiting until ready - \" + searchJob);//$NON-NLS-1$", "-\t\t\tJobManager.verbose(\"DONE concurrent job - \" + searchJob); //$NON-NLS-1$", "+\t\t\tJobManager.verbose(\"FINISHED  concurrent job - \" + searchJob); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd68862c6bff157966007f5109f7ac83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  \tpublic void test109636_4()", "signatureAfterChange": "  \tpublic void test109636_4()", "diff": ["-\t\t\t\t\" * setLeadingComment(&quot;/* traditional comment &#42;/&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;missing comment delimiters&quot;); // wrong\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;/* unterminated traditional comment &quot;); // wrong\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;/* broken\\\\n traditional comment &#42;/&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;// end-of-line comment\\\\n&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;// end-of-line comment without line terminator&quot;); // correct\" + DELIMITER +", "-\t\t\t\t\" * setLeadingComment(&quot;// broken\\\\n end-of-line comment\\\\n&quot;); // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"/&#42; traditional comment &#42;/\\\"); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"missing comment delimiters\\\"); // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"/&#42; unterminated traditional comment \\\"); // wrong\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"/&#42; broken\\\\n traditional comment &#42;/\\\"); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"// end-of-line comment\\\\n\\\"); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"// end-of-line comment without line terminator\\\"); // correct\" + DELIMITER +", "+\t\t\t\t\" * setLeadingComment(\\\"// broken\\\\n end-of-line comment\\\\n\\\"); // wrong\" + DELIMITER +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df115e26c50498f6a29b2fce90067de3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic void test025()", "signatureAfterChange": "  \tpublic void test025()", "diff": ["-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2a28124c24cb3a10b669cd7121cfb7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " \tpublic void test084()", "signatureAfterChange": " \tpublic void test084()", "diff": ["-\t\t\t\"Unsafe type operation: Should not convert expression of raw type AX to type AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of raw type AX is converted to AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Unsafe type operation: Should not convert expression of raw type AX to type AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of raw type AX is converted to AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Unsafe type operation: Should not invoke the constructor AX(AX<P>) of raw type AX. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The constructor AX(AX) belongs to the raw type AX. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Unsafe type operation: Should not invoke the constructor AX(AX<P>) of raw type AX. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The constructor AX(AX) belongs to the raw type AX. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Unsafe type operation: Should not convert expression of raw type AX to type AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of raw type AX is converted to AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Unsafe type operation: Should not invoke the method bar(AX<P>) of raw type AX. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The method bar(AX) belongs to the raw type AX. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Unsafe type operation: Should not convert expression of raw type AX to type AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of raw type AX is converted to AX<String>. References to generic type AX<P> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e586c043f1ca01658c733c22c9cdb230", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2cfaf33b626413a70eea1530c77695e81ac081f", "commitAfterChange": "89847a0c1a06590b3bbeee9528d77f57e2f8453c", "methodNumberBeforeChange": 1090, "methodNumberAfterChange": 1090, "signatureBeforeChange": " public void test1078()", "signatureAfterChange": " public void test1078()", "diff": ["-\t\t\"Type safety: The cast from Object to List<Object> is actually checking against the erased type List\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to List<Object>\\n\" + ", "-\t\t\"Type safety: The cast from Object to List<? extends Object> is actually checking against the erased type List\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to List<? extends Object>\\n\" + ", "-\t\t\"Type safety: The cast from Object to Map<Object,?> is actually checking against the erased type Map\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to Map<Object,?>\\n\" + ", "-\t\t\"Type safety: The cast from Object to Map<?,Object> is actually checking against the erased type Map\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to Map<?,Object>\\n\" + ", "-\t\t\"Type safety: The cast from Object to Map<Object,Object> is actually checking against the erased type Map\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to Map<Object,Object>\\n\" + ", "-\t\t\"Type safety: The cast from Object to Map<? extends Object,Object> is actually checking against the erased type Map\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to Map<? extends Object,Object>\\n\" + ", "-\t\t\"Type safety: The cast from Object to Map<? extends Object,? extends Object> is actually checking against the erased type Map\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to Map<? extends Object,? extends Object>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e75a46f7e78be6041b32b1d21b181b65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": "\r public void test0078() throws IOException", "signatureAfterChange": "\r public void test0078() throws IOException", "diff": ["-\tassertEquals(\"Wrong location\", \"{0}\", locations.get(\"@B\"));\r", "-\tassertEquals(\"Wrong location\", \"{0,0,2}\", locations.get(\"@C\"));\r", "-\tassertEquals(\"Wrong location\", \"{0,0}\", locations.get(\"@D\"));\r", "-\tassertEquals(\"Wrong location\", \"{0,0,0}\", locations.get(\"@E\"));\r", "-\tassertEquals(\"Wrong location\", \"{0,0,1}\", locations.get(\"@F\"));\r", "-\tassertEquals(\"Wrong location\", \"{1}\", locations.get(\"@G\"));\r", "-\tassertEquals(\"Wrong location\", \"{1,0}\", locations.get(\"@H\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0)]\", locations.get(\"@B\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0), TYPE_ARGUMENT(0), ARRAY, ARRAY, ARRAY]\", locations.get(\"@C\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0), TYPE_ARGUMENT(0)]\", locations.get(\"@D\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0), TYPE_ARGUMENT(0), ARRAY]\", locations.get(\"@E\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0), TYPE_ARGUMENT(0), ARRAY, ARRAY]\", locations.get(\"@F\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1)]\", locations.get(\"@G\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1), TYPE_ARGUMENT(0)]\", locations.get(\"@H\"));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e78510b7ffa6cb6f5babdff276b3bead", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic void test043()", "signatureAfterChange": " \tpublic void test043()", "diff": ["-\t\t\t\"     1  istore_1\\n\" + ", "+\t\t\t\"     1  istore_1 [b]\\n\" + ", "-\t\t\t\"     4  istore_2\\n\" + ", "-\t\t\t\"     5  iload_2\\n\" + ", "+\t\t\t\"     4  istore_2 [i]\\n\" + ", "+\t\t\t\"     5  iload_2 [i]\\n\" + ", "-\t\t\t\"    16  iload_1\\n\" + ", "+\t\t\t\"    16  iload_1 [b]\\n\" + ", "-\t\t\t\"    29  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    32  iload_2\\n\" + ", "-\t\t\t\"    33  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"    29  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    32  iload_2 [i]\\n\" + ", "+\t\t\t\"    33  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8b15dfb52ec828edcb0a0dabfb10929", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " public void testTypeRefGeneric01_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGeneric01_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<\ufffd|Types|\ufffd> & Serializable, V extends A<? super Types>> {@135] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<\ufffd|Types|\ufffd, UClass, VClass> {@112] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric.test [\tTestGeneric<\ufffd|Types|\ufffd> test;@150] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<\ufffd|Types|\ufffd> param1, Comparable<String> param2) {@200] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<TestGeneric<\ufffd|Types|\ufffd>> bar() {@287] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements Comparable<\ufffd|Types|\ufffd>, Serializable {@373] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.VClass [class VClass extends A<\ufffd|Types|\ufffd> {}@519] EXACT_MATCH\"", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<!|Types|!> & Serializable, V extends A<? super Types>> {@135] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<!|Types|!, UClass, VClass> {@112] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric.test [\tTestGeneric<!|Types|!> test;@150] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<!|Types|!> param1, Comparable<String> param2) {@200] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<TestGeneric<!|Types|!>> bar() {@287] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements Comparable<!|Types|!>, Serializable {@373] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.VClass [class VClass extends A<!|Types|!> {}@519] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb027c698991fd5382b266c6ed69a5be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public void test007() throws JavaModelException", "signatureAfterChange": "  public void test007() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot }, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"inheritDoc[JAVADOC_INLINE_TAG]{{@inheritDoc }, null, null, inheritDoc, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain }, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"value[JAVADOC_INLINE_TAG]{{@value }, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"code[JAVADOC_INLINE_TAG]{{@code }, null, null, code, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"literal[JAVADOC_INLINE_TAG]{{@literal }, null, null, literal, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot}, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"inheritDoc[JAVADOC_INLINE_TAG]{{@inheritDoc}, null, null, inheritDoc, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain}, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"value[JAVADOC_INLINE_TAG]{{@value}, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"code[JAVADOC_INLINE_TAG]{{@code}, null, null, code, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"literal[JAVADOC_INLINE_TAG]{{@literal}, null, null, literal, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbdfb049e11650947467683d68d408ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 332, "methodNumberAfterChange": 333, "signatureBeforeChange": " public void testBug330313_wksp2_01 ()", "signatureAfterChange": " public void testBug330313_wksp2_01 ()", "diff": ["-\t\t\"\t// comment\\n\" + ", "-\t\t\"\t{ \\\"STR1\\\",\\n\" + ", "-\t\t\"\t\t\tnew String[] { \\\"STR\\\", // comment\\n\" + ", "-\t\t\"\t\t\t\t\t\\\"STR\\\", // comment\\n\" + ", "-\t\t\"\t\t\t\t\t\\\"STR\\\" } // comment\\n\" + ", "-\t\t\"\t}\\n\" + ", "+\t\t\"\t\t\t{ \\\"STR1\\\",\\n\" + ", "+\t\t\"\t\t\t\t\t// comment\\n\" + ", "+\t\t\"\t\t\t\t\tnew String[] { \\\"STR\\\", // comment\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\\\"STR\\\", // comment\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\\\"STR\\\" } // comment\\n\" + ", "+\t\t\"\t\t\t}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe21dad9834b98b587000bd296654d39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": " \tpublic void testBug95521()", "signatureAfterChange": " \tpublic void testBug95521()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + "]}], "num": 43434}
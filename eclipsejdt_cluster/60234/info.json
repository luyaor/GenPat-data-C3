{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da5bb51bd057c1071d0469e038399620", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fbce5259721262d9fbab062bf63e2c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "a601b6b1bd0055831cf914eda4a394af5ff40421", "commitAfterChange": "aae3a2ae7793bc4970c4033658428e24ab5d11f5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected boolean buildStructure(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["+\tWorkingCopyElementInfo workingCopyElementInfo = computeProblems ? (WorkingCopyElementInfo)unitInfo : null;", "-\t\t\t?  CompilationUnitProblemFinder.getProblemFactory(getElementName().toCharArray(), (WorkingCopyElementInfo)unitInfo, pm) ", "+\t\t\t?  CompilationUnitProblemFinder.getProblemFactory(getElementName().toCharArray(), workingCopyElementInfo, pm) ", "-\t\t((WorkingCopyElementInfo)unitInfo).problems = new ArrayList();", "+\t\tworkingCopyElementInfo.beginReporting();", "-\t\tCompilationUnit original = new CompilationUnit((IPackageFragment)getParent(), getElementName(), DefaultCompilationUnitOwner.PRIMARY);", "+\t\tCompilationUnit original = new CompilationUnit((IPackageFragment)getParent(), getElementName(), DefaultWorkingCopyOwner.PRIMARY);", "-\t\tCompilationUnitProblemFinder.process(unit, this, (WorkingCopyElementInfo)unitInfo, pm); ", "-\t", "-\t\t// TODO: can now report problems as they are computed", "-\t\treportProblemsIfNeeded((WorkingCopyElementInfo)info);", "+\t\tCompilationUnitProblemFinder.process(unit, this, workingCopyElementInfo, pm);", "+\t\tworkingCopyElementInfo.endReporting();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5618f3f754cc9f16c2817d3720567ab1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "b90ae111ff29246e99448511171a44d6aca74c50", "commitAfterChange": "c746ac6ae60dd73c0e681419d361cf16b338a627", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic boolean performConcurrentJob(IJob searchJob, int waitingPolicy, IProgressMonitor progress)", "signatureAfterChange": " \tpublic boolean performConcurrentJob(IJob searchJob, int waitingPolicy, IProgressMonitor progress)", "diff": ["-\t\t\t\t\t\t\tstatus = searchJob.execute(progress == null ? null : new SubProgressMonitor(progress, concurrentJobWork));", "+\t\t\t\t\t\t\tstatus = searchJob.execute(progress == null ? null : SubMonitor.convert(progress, concurrentJobWork));", "-\t\t\t\t\t\t\t\tsubProgress = new SubProgressMonitor(progress, concurrentJobWork * 8 / 10);", "+\t\t\t\t\t\t\t\tsubProgress = SubMonitor.convert(progress, concurrentJobWork * 8 / 10);", "-\t\t\tstatus = searchJob.execute(progress == null ? null : new SubProgressMonitor(progress, concurrentJobWork));", "+\t\t\tstatus = searchJob.execute(progress == null ? null : SubMonitor.convert(progress, concurrentJobWork));"]}], "num": 60234}
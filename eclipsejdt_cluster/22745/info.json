{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6336feee22aca524e98cf67ff6499357", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22d63fedf7c282ef158a11127d16c066", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java", "commitBeforeChange": "29901dd2faebfaef1b4d98d076ffc43db80ce6e9", "commitAfterChange": "df89682acad9efe382ca87d8dc961bb3d9c795fc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tfor (int i = dimensions.length; --i >= 0;) {", "+\t\tloop: for (int i = dimensions.length; --i >= 0;) {", "-\t\t\t} else if (explicitDimIndex> 0) {", "+\t\t\t} else if (explicitDimIndex > 0) {", "-\t\t\t\tscope.problemReporter().incorrectLocationForEmptyDimension(this, i);", "+\t\t\t\tscope.problemReporter().incorrectLocationForNonEmptyDimension(this, explicitDimIndex);", "+\t\t\t\tbreak loop;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbea424e2544378dc36143bab05c4cc6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "1f65e2f1d1142c8be683dea8425f1840c9121137", "commitAfterChange": "2005580e3a87de753a5cb3dcf29b780f4e6277a6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate boolean checkSelection( \t\tchar[] source, \t\tint selectionStart, \t\tint selectionEnd)", "signatureAfterChange": " \tprivate boolean checkSelection( \t\tchar[] source, \t\tint selectionStart, \t\tint selectionEnd)", "diff": ["-\t\t\tdo {", "+\t\t\tisolateLastName: do {", "+\t\t\t\t\t\t\tbreak isolateLastName;", "-\t\t\ttry {", "-\t\t\t\tdo {", "+\t\t\tdo {", "+\t\t\t\ttry {", "-", "-\t\t\t\t\tswitch (token) {", "-\t\t\t\t\t\tcase TerminalTokens.TokenNamethis :", "-\t\t\t\t\t\tcase TerminalTokens.TokenNamesuper :", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "-\t\t\t\t\t\t\tif (!expectingIdentifier)", "-\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\tlastIdentifier = scanner.getCurrentTokenSource();", "-\t\t\t\t\t\t\tlastIdentifierStart = scanner.startPosition;", "-\t\t\t\t\t\t\tlastIdentifierEnd = scanner.currentPosition - 1;", "-\t\t\t\t\t\t\tif(lastIdentifierEnd > selectionEnd) {", "-\t\t\t\t\t\t\t\tlastIdentifierEnd = selectionEnd;", "-\t\t\t\t\t\t\t\tlastIdentifier = CharOperation.subarray(lastIdentifier, 0,lastIdentifierEnd - lastIdentifierStart + 1);", "-\t\t\t\t\t\t\t}", "-\t", "-\t\t\t\t\t\t\texpectingIdentifier = false;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameDOT :", "-\t\t\t\t\t\t\tif (expectingIdentifier)", "-\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\texpectingIdentifier = true;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameEOF :", "-\t\t\t\t\t\t\tif (expectingIdentifier)", "-\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameLESS :", "-\t\t\t\t\t\t\tif(!checkTypeArgument(scanner))", "-\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameAT:", "-\t\t\t\t\t\t\tif(scanner.startPosition != scanner.initialPosition)", "-\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault :", "+\t\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tswitch (token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNamethis :", "+\t\t\t\t\tcase TerminalTokens.TokenNamesuper :", "+\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "+\t\t\t\t\t\tif (!expectingIdentifier)", "-\t\t\t\t\t}", "-\t\t\t\t} while (token != TerminalTokens.TokenNameEOF);", "-\t\t\t} catch (InvalidInputException e) {", "-\t\t\t\treturn false;", "-\t\t\t}", "+\t\t\t\t\t\tlastIdentifier = scanner.getCurrentTokenSource();", "+\t\t\t\t\t\tlastIdentifierStart = scanner.startPosition;", "+\t\t\t\t\t\tlastIdentifierEnd = scanner.currentPosition - 1;", "+\t\t\t\t\t\tif(lastIdentifierEnd > selectionEnd) {", "+\t\t\t\t\t\t\tlastIdentifierEnd = selectionEnd;", "+\t\t\t\t\t\t\tlastIdentifier = CharOperation.subarray(lastIdentifier, 0,lastIdentifierEnd - lastIdentifierStart + 1);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\texpectingIdentifier = false;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameDOT :", "+\t\t\t\t\t\tif (expectingIdentifier)", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\texpectingIdentifier = true;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameEOF :", "+\t\t\t\t\t\tif (expectingIdentifier)", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameLESS :", "+\t\t\t\t\t\tif(!checkTypeArgument(scanner))", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameAT:", "+\t\t\t\t\t\tif(scanner.startPosition != scanner.initialPosition)", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault :", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t} while (token != TerminalTokens.TokenNameEOF);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffa8b7bf88c8d6d05d37b47be526aa2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "2b899d5709db9c6865f7da76d74928892a056b7b", "commitAfterChange": "1cce623392dc2abad468b342ade5233f38d20f6c", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic void resolve()", "signatureAfterChange": "  \tpublic void resolve()", "diff": ["-\t\t\tif (memberTypes != null)", "-\t\t\t\tfor (int i = 0, count = memberTypes.length; i < count; i++)", "+\t\t\tif (memberTypes != null) {", "+\t\t\t\tfor (int i = 0, count = memberTypes.length; i < count; i++) {", "-\t\t\tif (methods != null)", "-\t\t\t\tfor (int i = 0, count = methods.length; i < count; i++)", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (methods != null) {", "+\t\t\t\tfor (int i = 0, count = methods.length; i < count; i++) {", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 22745}
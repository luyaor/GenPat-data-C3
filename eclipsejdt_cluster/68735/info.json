{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b2de85257f8795c4d4d1b5e1b8cc922", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f37fea9f0c63a2c7299df19632d3464", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "85a51230859ba76a62ce4d566f4cbd47aac06488", "commitAfterChange": "3885d0327ef37626bb68aa8a0a9e1a4a5bb4ba7a", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " public static char[] toCharArray(char[] methodSignature, char[] methodName, char[][] parameterNames, boolean fullyQualifyTypeNames, boolean includeReturnType)", "signatureAfterChange": " public static char[] toCharArray(char[] methodSignature, char[] methodName, char[][] parameterNames, boolean fullyQualifyTypeNames, boolean includeReturnType)", "diff": ["+\treturn toCharArray(methodSignature, methodName, parameterNames, fullyQualifyTypeNames, includeReturnType, false);", "+}", "-\tfor (int i = 0; i < pts.length; i++) {", "-\t\tappendTypeSignature(pts[i], 0 , fullyQualifyTypeNames, buffer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14fc898502a55f7495df800891116aff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "a0ae0d671d55223c651ec20787427be728e57c82", "commitAfterChange": "9fdf60099af5bd70d810793e82261fbcf589311b", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \t\tpublic void printTag(String name, HashMap params, boolean insertNewLine, boolean closeTag)", "signatureAfterChange": " \t\t \t\tprivate void printTag(String name, HashMap params, boolean insertNewLine, boolean closeTag)", "diff": ["+\t\t", "+\t\tprivate void printTag(String name, HashMap params, boolean insertNewLine, boolean closeTag) {", "+\t\t\t((GenericXMLWriter) this.log).printTag(name, parameters, true, insertNewLine, closeTag);", "+\t\t\tthis.parameters.clear();", "+\t\t}", "-\t\tpublic void printTag(String name, HashMap params, boolean insertNewLine, boolean closeTag) {", "-\t\t\tfor (int i= this.tab; i > 0; i--) this.log.print('\\t');", "-\t\t\tStringBuffer buffer= new StringBuffer();", "-\t\t\tbuffer.append(\"<\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(name);", "-\t\t\tif (params != null) {", "-\t\t\t\tint length = parameters.size();", "-\t\t\t\tString[] keys = new String[length];", "-\t\t\t\tparameters.keySet().toArray(keys);", "-\t\t\t\tArrays.sort(keys);", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tbuffer.append(\" \"); //$NON-NLS-1$", "-\t\t\t\t\tbuffer.append(keys[i]);", "-\t\t\t\t\tbuffer.append(\"=\\\"\"); //$NON-NLS-1$", "-\t\t\t\t\tbuffer.append(getEscaped(String.valueOf(params.get(keys[i]))));", "-\t\t\t\t\tbuffer.append(\"\\\"\"); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (closeTag) {", "-\t\t\t\tbuffer.append(\"/>\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tbuffer.append(\">\"); //$NON-NLS-1$", "-\t\t\t\tthis.tab++;", "-\t\t\t}", "-\t\t\tif (insertNewLine) {", "-\t\t\t\tthis.log.println(String.valueOf(buffer));", "-\t\t\t} else {", "-\t\t\t\tthis.log.print(String.valueOf(buffer));", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c485f15ec07b32dfdec4d061f595a03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tvoid printModifiers(int modifiers)", "signatureAfterChange": " \tvoid printModifiers(List ext)", "diff": ["+\t */", "+\tvoid printModifiers(List ext) {", "+\t\tfor (Iterator it = ext.iterator(); it.hasNext(); ) {", "+\t\t\tExtendedModifier p = (ExtendedModifier) it.next();", "+\t\t\tp.accept(this);", "+\t\t\tthis.buffer.append(\" \");//$NON-NLS-1$", "+\t\t}", "+\t}\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e832832715b720785193bb68bf65089", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "82743b33822fbb1e8747641a56800f2dd66cbc54", "commitAfterChange": "ab734870d680bdde73d51371df0336cce36fb2b0", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " \t \tpublic IfStatement convert(org.eclipse.jdt.internal.compiler.ast.IfStatement statement)", "signatureAfterChange": " \t \tpublic IfStatement convert(org.eclipse.jdt.internal.compiler.ast.IfStatement statement)", "diff": ["-\t\torg.eclipse.jdt.internal.compiler.ast.Statement thenStatement = statement.thenStatement;", "-\t\torg.eclipse.jdt.internal.compiler.ast.Statement elseStatement = statement.elseStatement;", "-\t\tif (thenStatement != null) {", "-\t\t\tif (thenStatement == org.eclipse.jdt.internal.compiler.ast.Block.None) {", "-\t\t\t\tEmptyStatement emptyStatement = this.ast.newEmptyStatement();", "-\t\t\t\tint start = retrieveStartingSemiColonPosition(statement.sourceStart, statement.sourceEnd);", "-\t\t\t\tint end = retrieveEndingSemiColonPosition(start, statement.sourceEnd);", "-\t\t\t\temptyStatement.setSourceRange(start, end - start + 1);", "-\t\t\t\tifStatement.setThenStatement(emptyStatement);", "-\t\t\t} else {", "-\t\t\t\tifStatement.setThenStatement(convert(statement.thenStatement));", "-\t\t\t}", "-\t\t}", "-\t\tif (elseStatement != null) {", "-\t\t\tif (elseStatement == org.eclipse.jdt.internal.compiler.ast.Block.None) {", "-\t\t\t\t// retrieve the else position", "-\t\t\t\tEmptyStatement emptyStatement = this.ast.newEmptyStatement();", "-\t\t\t\tint start = retrieveElseEndingPosition(statement.sourceStart, statement.sourceEnd);", "-\t\t\t\tstart = retrieveStartingSemiColonPosition(statement.sourceStart, statement.sourceEnd);", "-\t\t\t\tint end = retrieveEndingSemiColonPosition(start, statement.sourceEnd);", "-\t\t\t\temptyStatement.setSourceRange(start, end - start + 1);", "-\t\t\t\tifStatement.setElseStatement(emptyStatement);", "-\t\t\t} else {", "-\t\t\t\tifStatement.setElseStatement(convert(elseStatement));", "-\t\t\t}", "+\t\tifStatement.setThenStatement(convert(statement.thenStatement));", "+\t\tif (statement.elseStatement != null) {", "+\t\t\tifStatement.setElseStatement(convert(statement.elseStatement));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ae2a9227388dad4c04081c658f87161", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/CompletionProposal.java", "commitBeforeChange": "aebd50d4e7ed3a3654e44abaa502f380b7af3ace", "commitAfterChange": "7d7e44bec5cc73af8a58c1959acd433a7f2c6ded", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic char[] getCompletion()", "signatureAfterChange": " \tpublic char[] getCompletion()", "diff": ["-\t\tif(this.completionKind == METHOD_DECLARATION) {", "-\t\t\tfindParameterNames(null);", "-\t\t\tif(this.updateCompletion) {", "-\t\t\t\tthis.updateCompletion = false;", "-", "-\t\t\t\tif(this.parameterNames != null) {", "-\t\t\t\t\tint length = this.parameterNames.length;", "-\t\t\t\t\tStringBuffer completionBuffer = new StringBuffer(this.completion.length);", "-", "-\t\t\t\t\tint start = 0;", "-\t\t\t\t\tint end = CharOperation.indexOf('%', this.completion);", "-", "-\t\t\t\t\tcompletionBuffer.append(this.completion, start, end - start);", "-", "-\t\t\t\t\tfor(int i = 0 ; i < length ; i++){", "-\t\t\t\t\t\tcompletionBuffer.append(this.parameterNames[i]);", "-\t\t\t\t\t\tstart = end + 1;", "-\t\t\t\t\t\tend = CharOperation.indexOf('%', this.completion, start);", "-\t\t\t\t\t\tif(end > -1){", "-\t\t\t\t\t\t\tcompletionBuffer.append(this.completion, start, end - start);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcompletionBuffer.append(this.completion, start, this.completion.length - start);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tint nameLength = completionBuffer.length();", "-\t\t\t\t\tthis.completion = new char[nameLength];", "-\t\t\t\t\tcompletionBuffer.getChars(0, nameLength, this.completion, 0);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\treturn this.completion;", "+\t\treturn null; // default overridden by concrete implementation"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2a87fd6fa628118936a062dce7e2cde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Tests.java", "commitBeforeChange": "9384d44d51fc135ab261a46a0c5c6cf06b8a4075", "commitAfterChange": "641e4134a5f663294c87ac80c963d690a90319bc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems)", "signatureAfterChange": " \tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems)", "diff": ["-\tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems){", "+\tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems) {", "+\t\tif (DEBUG)", "+\t\t\tprintProblemsFor(root);", "-\t\tStringBuffer expectation = new StringBuffer(20);", "-\t\tfor (int k = 0; k < expectedProblems.length; k++){", "-\t\t\texpectation.append(\"\\tnew Problem(\\\"\"); //$NON-NLS-1$", "-\t\t\texpectation.append(expectedProblems[k].getLocation());", "-\t\t\texpectation.append(\"\\\", \\\"\"); //$NON-NLS-1$", "-\t\t\texpectation.append(expectedProblems[k].getMessage());", "-\t\t\texpectation.append(\"\\\", new Path(\\\"\"); //$NON-NLS-1$", "-\t\t\texpectation.append(expectedProblems[k].getResourcePath());", "-\t\t\texpectation.append(\"\\\"))\\n\");\t\t\t\t //$NON-NLS-1$", "-\t\t}", "-\t\tString expectationString = expectation.toString();", "-\t\t", "-\t\tStringBuffer actual = new StringBuffer(20);", "-\t\tfor (int k = 0; k < rootProblems.length; k++){", "-\t\t\tactual.append(\"\\tnew Problem(\\\"\"); //$NON-NLS-1$", "-\t\t\tactual.append(rootProblems[k].getLocation());", "-\t\t\tactual.append(\"\\\", \\\"\"); //$NON-NLS-1$", "-\t\t\tactual.append(rootProblems[k].getMessage());", "-\t\t\tactual.append(\"\\\", new Path(\\\"\"); //$NON-NLS-1$", "-\t\t\tactual.append(rootProblems[k].getResourcePath());", "-\t\t\tactual.append(\"\\\"))\\n\");\t\t\t\t //$NON-NLS-1$", "-\t\t}", "-\t\tString actualString = actual.toString();", "-\t\t", "-\t\tif (!actualString.equals(expectationString)) {", "-\t\t\tSystem.out.println(actualString);", "-\t\t}\t\t", "-\t\tassertEquals(\"unexpected problems\", expectationString, actualString); //$NON-NLS-1$", "+\t\tfor (int i = 0; i < expectedProblems.length; i++)", "+\t\t\tassertEquals(\"unexpected problem\", expectedProblems[i].toString(), rootProblems[i].toString()); //$NON-NLS-1$"]}], "num": 68735}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1365a199c1d05d359629c16883a960de", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10b8c9c3b43b16d19b13dafc4a69886b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/junit/extension/TestCase.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public static List buildTestsList(Class evaluationTestClass)", "signatureAfterChange": "  public static List buildTestsList(Class evaluationTestClass, int inheritedDepth)", "diff": ["+", "+public static List buildTestsList(Class evaluationTestClass, int inheritedDepth) {", "+\tClass evaluationTestSuperclass = evaluationTestClass.getSuperclass();", "+\tfor (int i=0; i<inheritedDepth && !Flags.isAbstract(evaluationTestSuperclass.getModifiers()); i++) {", "+\t\tMethod[] superMethods = evaluationTestSuperclass.getDeclaredMethods();", "+\t\tMethod[] mergedMethods = new Method[methods.length+superMethods.length];", "+\t\tSystem.arraycopy(superMethods, 0, mergedMethods, 0, superMethods.length);", "+\t\tSystem.arraycopy(methods, 0, mergedMethods, superMethods.length, methods.length);", "+\t\tmethods = mergedMethods;", "+\t\tevaluationTestSuperclass = evaluationTestSuperclass.getSuperclass();", "+\t}", "-\t\t\t\t\ttests.add(constructor.newInstance(params));", "+\t\t\t\t\tif (testNames.add(methName))", "+\t\t\t\t\t\ttests.add(constructor.newInstance(params));", "-\t\t\t\t\t\t\t\ttestNames.add(methName);", "-\t\t\t\t\t\t\t\ttests.add(constructor.newInstance(params));", "+\t\t\t\t\t\t\t\tif (testNames.add(methName))", "+\t\t\t\t\t\t\t\t\ttests.add(constructor.newInstance(params));", "-\t\t\t\t\t\ttests.add(constructor.newInstance(params));", "+\t\t\t\t\t\tif (testNames.add(methName))", "+\t\t\t\t\t\t\ttests.add(constructor.newInstance(params));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afe2d7e8fc28dd33bd91dacd63f2bdde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "fa25da4e2a88a4307aa1acc49888cdff9fb32a52", "commitAfterChange": "d35828dbe6c72fc68c5ab7d479b15a3b31394d26", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate void updateTypeName(ICompilationUnit cu, CompilationUnit astCU, String oldName, String newName, IDocument document) throws JavaModelException", "signatureAfterChange": " \tprivate void updateTypeName(ICompilationUnit cu, CompilationUnit astCU, String oldName, String newName, IDocument document) throws JavaModelException", "diff": ["-\t\t\t\t\tTypeDeclaration typeNode = (TypeDeclaration) ((JavaElement) currentType).findNode(astCU);", "+\t\t\t\t\tAbstractTypeDeclaration typeNode = (AbstractTypeDeclaration) ((JavaElement) currentType).findNode(astCU);", "-\t\t\t\t\t\tMethodDeclaration[] methods = typeNode.getMethods();", "-\t\t\t\t\t\tfor (int j = 0, length = methods.length; j < length; j++) {", "-\t\t\t\t\t\t\tMethodDeclaration methodDeclaration = methods[j];", "-\t\t\t\t\t\t\tSimpleName methodName = methodDeclaration.getName();", "-\t\t\t\t\t\t\tif (methodName.getIdentifier().equals(oldTypeName)) {", "-\t\t\t\t\t\t\t\t// rename constructor", "-\t\t\t\t\t\t\t\trewriter.replace(methodName, ast.newSimpleName(newTypeName), null);", "+\t\t\t\t\t\tif (typeNode instanceof TypeDeclaration) {", "+\t\t\t\t\t\t\t// rename constructors", "+\t\t\t\t\t\t\tMethodDeclaration[] methods = ((TypeDeclaration) typeNode).getMethods();", "+\t\t\t\t\t\t\tfor (int j = 0, length = methods.length; j < length; j++) {", "+\t\t\t\t\t\t\t\tMethodDeclaration methodDeclaration = methods[j];", "+\t\t\t\t\t\t\t\tSimpleName methodName = methodDeclaration.getName();", "+\t\t\t\t\t\t\t\tif (methodName.getIdentifier().equals(oldTypeName)) {", "+\t\t\t\t\t\t\t\t\trewriter.replace(methodName, ast.newSimpleName(newTypeName), null);", "+\t\t\t\t\t\t\t\t}"]}], "num": 72234}
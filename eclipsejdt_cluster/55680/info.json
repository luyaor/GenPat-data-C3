{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "77b5b33e0a1d18db95bc20b9ca046d74", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "061149f8e96faecaecff2c0f138fc12a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void testConstructorDeclarationBug77093() throws CoreException", "signatureAfterChange": " \tpublic void testBug77093constructor() throws CoreException", "diff": ["-\tpublic void testConstructorDeclarationBug77093() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs/src/b77093/X.java\").getType(\"X\");", "-\t\tIMethod method = type.getMethod(\"X\", new String[] {\"[[QZ;\"});", "-\t\tsearch(method, DECLARATIONS, getJavaSearchScopeBugs(), resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b77093/X.java b77093.X(Z[][]) [X] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}", "+\t */", "+\tpublic void testBug77093constructor() throws CoreException {", "+\t\tICompilationUnit workingCopy = null;", "+\t\ttry {", "+\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b77093/X.java\",", "+\t\t\t\t\"package b77093;\\n\" + ", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tclass Z {\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tZ[][] z_arrays;\\n\" + ", "+\t\t\t\t\"\tX() {\\n\" + ", "+\t\t\t\t\"\t\tthis(new Z[10][]);\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tX(Z[][] arrays) {\\n\" + ", "+\t\t\t\t\"\t\tz_arrays = arrays;\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tprivate void foo(Z[] args) {\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tvoid bar() {\\n\" + ", "+\t\t\t\t\"\t\tfor (int i=0; i<z_arrays.length; i++)\\n\" + ", "+\t\t\t\t\"\t\t\tfoo(z_arrays[i]);\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\");", "+\t\t\tIType type = workingCopy.getType(\"X\");", "+\t\t\tIMethod method = type.getMethod(\"X\", new String[] {\"[[QZ;\"});", "+\t\t\t// Search for constructor declarations and references", "+\t\t\tsearch(method, ALL_OCCURRENCES);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b77093/X.java b77093.X() [this(new Z[10][])] EXACT_MATCH\\n\"+", "+\t\t\t\t\"src/b77093/X.java b77093.X(Z[][]) [X] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (workingCopy != null)", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbd82fc0c9265b01563072e8cbff471b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void testConstructorReferenceBug77388() throws CoreException", "signatureAfterChange": " \tpublic void testBug77388() throws CoreException", "diff": ["-\t */", "-\tpublic void testConstructorReferenceBug77388() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs/src/b77388/Test.java\").getType(\"Test\");", "-\t\tIMethod method = type.getMethod(\"Test\", new String[] {\"I\", \"I\"});", "-\t\tsearch(method, REFERENCES, getJavaSearchScopeBugs(), resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b77388/Test.java void b77388.Test.run() [new Test(1, 2)] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}", "+\t */", "+\tpublic void testBug77388() throws CoreException {", "+\t\tICompilationUnit workingCopy = null;", "+\t\ttry {", "+\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b77388/Test.java\",", "+\t\t\t\t\"package b77388;\\n\" + ", "+\t\t\t\t\"class Test {\\n\" + ", "+\t\t\t\t\"\tTest(int a, int b) {\t}\\n\" + ", "+\t\t\t\t\"\tvoid take(Test mc) { }\\n\" + ", "+\t\t\t\t\"\tvoid run() {\\n\" + ", "+\t\t\t\t\"\t\ttake( new Test(1, 2) ); // space in \\\") )\\\" is in match\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\");", "+\t\t\tIType type = workingCopy.getType(\"Test\");", "+\t\t\tIMethod method = type.getMethod(\"Test\", new String[] {\"I\", \"I\"});", "+\t\t\t// Search for constructor references", "+\t\t\tsearch(method, REFERENCES);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b77388/Test.java void b77388.Test.run() [new Test(1, 2)] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (workingCopy != null)", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t}", "+\t}"]}], "num": 55680}
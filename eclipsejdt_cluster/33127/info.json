{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9f9f3026dd5737bb5a8bf1730c28b42b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "251302e48274e041689dc3e244aa96a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public FieldBinding[] fields()", "signatureAfterChange": " public FieldBinding[] fields()", "diff": ["-\tif ((tagBits & TagBits.AreFieldsComplete) != 0)", "-\t\treturn fields;\t", "+\tif ((this.tagBits & TagBits.AreFieldsComplete) != 0)", "+\t\treturn this.fields;\t", "-\t\tfor (int i = 0, length = fields.length; i < length; i++) {", "-\t\t\tif (resolveTypeFor(fields[i]) == null) {", "-\t\t\t\tfields[i] = null;", "+\t\t// lazily sort fields", "+\t\tif ((this.tagBits & TagBits.AreFieldsSorted) == 0) {", "+\t\t\tint length = this.fields.length;", "+\t\t\tif (length > 1) \tReferenceBinding.sortFields(this.fields, 0, length - 1);", "+\t\t\tthis.tagBits |= TagBits.AreFieldsSorted;", "+\t\t}\t\t\t", "+\t\tfor (int i = 0, length = this.fields.length; i < length; i++) {", "+\t\t\tif (resolveTypeFor(this.fields[i]) == null) {", "+\t\t\t\tthis.fields[i] = null;", "-\t\t\tint newSize = fields.length - failed;", "+\t\t\tint newSize = this.fields.length - failed;", "-\t\t\t\treturn fields = Binding.NO_FIELDS;", "+\t\t\t\treturn this.fields = Binding.NO_FIELDS;", "-\t\t\tfor (int i = 0, j = 0, length = fields.length; i < length; i++)", "-\t\t\t\tif (fields[i] != null)", "-\t\t\t\t\tnewFields[j++] = fields[i];", "-\t\t\tfields = newFields;", "+\t\t\tfor (int i = 0, j = 0, length = this.fields.length; i < length; i++) {", "+\t\t\t\tif (this.fields[i] != null) {", "+\t\t\t\t\tnewFields[j++] = this.fields[i];", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.fields = newFields;", "-\ttagBits |= TagBits.AreFieldsComplete;", "-\treturn fields;", "+\tthis.tagBits |= TagBits.AreFieldsComplete;", "+\treturn this.fields;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fbe306ca9feaaef12443f8497e0aba9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public FieldBinding getField(char[] fieldName, boolean needResolve)", "signatureAfterChange": " public FieldBinding getField(char[] fieldName, boolean needResolve)", "diff": ["-// NOTE: the type of a field of a source type is resolved when needed", "+//NOTE: the type of a field of a source type is resolved when needed", "+\t", "+\tif ((this.tagBits & TagBits.AreFieldsComplete) != 0) {", "+\t\treturn ReferenceBinding.binarySearch(fieldName, this.fields);", "+\t}", "+\t// lazily sort fields", "+\tif ((this.tagBits & TagBits.AreFieldsSorted) == 0) {", "+\t\tint length = this.fields.length;", "+\t\tif (length > 1) \tReferenceBinding.sortFields(this.fields, 0, length - 1);", "+\t\tthis.tagBits |= TagBits.AreFieldsSorted;", "+\t}\t\t", "-\tint fieldLength = fieldName.length;", "-\tfor (int i = 0, length = fields.length; i < length; i++) {", "-\t\tFieldBinding field = fields[i];", "-\t\tif (field.name.length == fieldLength && CharOperation.equals(field.name, fieldName)) {", "-\t\t\tFieldBinding result = null;", "-\t\t\ttry {", "-\t\t\t\tresult = resolveTypeFor(field);", "-\t\t\t\treturn result;", "-\t\t\t} finally {", "-\t\t\t\tif (result == null) {", "-\t\t\t\t\t// ensure fields are consistent reqardless of the error", "-\t\t\t\t\tint newSize = fields.length - 1;", "-\t\t\t\t\tif (newSize == 0) {", "-\t\t\t\t\t\tfields = Binding.NO_FIELDS;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tFieldBinding[] newFields = new FieldBinding[newSize];", "-\t\t\t\t\t\tSystem.arraycopy(fields, 0, newFields, 0, i);", "-\t\t\t\t\t\tSystem.arraycopy(fields, i + 1, newFields, i, newSize - i);", "-\t\t\t\t\t\tfields = newFields;", "+\tFieldBinding field = ReferenceBinding.binarySearch(fieldName, this.fields);", "+\tif (field != null) {", "+\t\tFieldBinding result = null;", "+\t\ttry {", "+\t\t\tresult = resolveTypeFor(field);", "+\t\t\treturn result;", "+\t\t} finally {", "+\t\t\tif (result == null) {", "+\t\t\t\t// ensure fields are consistent reqardless of the error", "+\t\t\t\tint newSize = this.fields.length - 1;", "+\t\t\t\tif (newSize == 0) {", "+\t\t\t\t\tthis.fields = Binding.NO_FIELDS;", "+\t\t\t\t} else {", "+\t\t\t\t\tFieldBinding[] newFields = new FieldBinding[newSize];", "+\t\t\t\t\tint index = 0;", "+\t\t\t\t\tfor (int i = 0, length = this.fields.length; i < length; i++) {", "+\t\t\t\t\t\tFieldBinding f = this.fields[i];", "+\t\t\t\t\t\tif (f == field) continue;", "+\t\t\t\t\t\tnewFields[index++] = f;", "+\t\t\t\t\tthis.fields = newFields;"]}], "num": 33127}
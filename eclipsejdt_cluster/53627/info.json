{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7ef3141a4d1d058ae1f48745be2798b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48103515f7000a262d53564d2cfaf548", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "82ebc709013252385fce65c14aa676e8e0d39c6f", "commitAfterChange": "e2360e075300bd271e5e3fd90537b7dce7bdaa00", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r \r \tpublic IClasspathEntry[] getResolvedClasspathContainer(IPath containerPath)", "signatureAfterChange": "\r \r \tpublic IClasspathEntry[] getResolvedClasspathContainer(IPath containerPath) throws JavaModelException", "diff": ["-\tpublic IClasspathEntry[] getResolvedClasspathContainer(IPath containerPath){\r", "+\tpublic IClasspathEntry[] getResolvedClasspathContainer(IPath containerPath) throws JavaModelException {\r", "-\t\t\t\tentries = resolver.resolve(containerPath, this);\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tentries = resolver.resolve(containerPath, this);\r", "+\t\t\t\t} catch(CoreException e){\r", "+\t\t\t\t\tthrow new JavaModelException(e);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71ca19883c2816f77a8671a75b6966e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "6d5fd8a1cc43d975e713b47772f49dbda9f3f90c", "commitAfterChange": "6e47268ed79fd7b89fd58e0a5c1b77470c0792ef", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "\r \tpublic static IClasspathEntry newContainerEntry(\r \t\tIPath containerID,\r \t\tboolean isExported)", "signatureAfterChange": "\r \tpublic static IClasspathEntry newContainerEntry(IPath containerPath, boolean isExported)", "diff": ["-\tpublic static IClasspathEntry newContainerEntry(\r", "-\t\tIPath containerID,\r", "-\t\tboolean isExported) {\r", "+\t */\r", "+\tpublic static IClasspathEntry newContainerEntry(IPath containerPath, boolean isExported) {\r", "-\t\t\tcontainerID != null && containerID.segmentCount() >= 1,\r", "+\t\t\tcontainerPath != null && containerPath.segmentCount() >= 1,\r", "-\t\t\tcontainerID,\r", "+\t\t\tcontainerPath,\r"]}], "num": 53627}
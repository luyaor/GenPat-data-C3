{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56465ed2897b70192935d00860fce411", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77f2a66dfb25620d56dc0e940713d87b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "bb035342af3e77c43a12431c380fb2a6fe6ec67e", "commitAfterChange": "d9aabee2fc6180b2ed4f4131332dc5a46cc37a0d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["+\t\tthis.resetAnyExceptionHandlers(); // could reenter if redoing codegen in wide-mode", "+", "-\t\tExceptionLabel anyExceptionLabel = null;", "-\t\t\tanyExceptionLabel = new ExceptionLabel(codeStream, null);", "+\t\t\tthis.enterAnyExceptionHandler(codeStream);", "-\t\tboolean nonReturningSubRoutine =subRoutineStartLabel != null && subRoutineCannotReturn;", "+\t\tboolean nonReturningSubRoutine = subRoutineStartLabel != null && isSubRoutineEscaping; // TODO: (philippe) simplify", "-\t\t\t\tif (anyExceptionLabel != null) {", "-\t\t\t\t\tanyExceptionLabel.placeEnd();", "-\t\t\t\t}", "+\t\t\t\tthis.exitAnyExceptionHandler();", "-\t\t\t\t\t\tif (anyExceptionLabel != null) {", "-\t\t\t\t\t\t\tanyExceptionLabel.placeEnd();", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.exitAnyExceptionHandler();", "-\t\t\t\t\t\t\t\trequiresNaturalJsr = true;", "+\t\t\t\t\t\t\t\trequiresNaturalJsr = !nonReturningSubRoutine;", "+\t\t\t// extra handler for trailing natural exit (will be fixed up later on when natural exit is generated below)", "+\t\t\tExceptionLabel naturalExitExceptionHandler = null;", "+\t\t\tif (requiresNaturalJsr) {", "+\t\t\t\tnaturalExitExceptionHandler = this.enterAnyExceptionHandler(codeStream);", "+\t\t\t}", "+\t\t\t\t\t\t", "-\t\t\t\tanyExceptionLabel.place();", "+\t\t\t\tthis.placeAllAnyExceptionHandlers();", "-\t\t\t\t// end of catch sequence, place label that will correspond to the finally block beginning, or end of statement", "-\t\t\t\tif (nonReturningSubRoutine) {//TODO: should not be necessary", "-\t\t\t\t\trequiresNaturalJsr = false;", "-\t\t\t\t}", "+\t\t\t\t// end of catch sequence, place label that will correspond to the finally block beginning, or end of statement\t", "-\t\t\t\tcodeStream.recordPositionsFrom(", "-\t\t\t\t\tfinallySequenceStartPC,", "-\t\t\t\t\tfinallyBlock.sourceStart);", "+\t\t\t\tcodeStream.recordPositionsFrom(finallySequenceStartPC, finallyBlock.sourceStart);", "-\t\t\t\tif (requiresNaturalJsr) {", "-\t\t\t\t\tint position = codeStream.position;", "+\t\t\t\tif (naturalExitExceptionHandler != null) {", "+\t\t\t\t\tint position = codeStream.position;\t\t\t\t\t", "+\t\t\t\t\t// fix up natural exit handler", "+\t\t\t\t\tnaturalExitExceptionHandler.placeStart();", "+\t\t\t\t\tnaturalExitExceptionHandler.placeEnd();", "-\t\t\t\t\t\tfinallyBlock.sourceStart);", "+\t\t\t\t\t\tfinallyBlock.sourceStart);\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfc5222fd9040a93506b0a7b43f60d42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "779c0a269200bd2b753397ef48cdc2e22f6789e2", "commitAfterChange": "96046880955891c15e8d80e97d7a875daf5fddc3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tboolean nonReturningSubRoutine =", "-\t\t\t(subRoutineStartLabel != null) && subRoutineCannotReturn;", "+\t\tboolean nonReturningSubRoutine =subRoutineStartLabel != null && subRoutineCannotReturn;", "-\t\t\t\t\t(preserveExceptionHandler[i\t/ ExceptionHandlingFlowContext.BitCacheSize]", "-\t\t\t\t\t\t\t& (1 << (i % ExceptionHandlingFlowContext.BitCacheSize)))", "-\t\t\t\t\t\t!= 0;", "+\t\t\t\t\t(preserveExceptionHandler[i / ExceptionHandlingFlowContext.BitCacheSize]", "+\t\t\t\t\t\t\t& (1 << (i % ExceptionHandlingFlowContext.BitCacheSize))) != 0;", "-\t\t\t\t\t\t\t\t& (1 << (i % ExceptionHandlingFlowContext.BitCacheSize)))", "-\t\t\t\t\t\t\t!= 0;", "+\t\t\t\t\t\t\t\t& (1 << (i % ExceptionHandlingFlowContext.BitCacheSize))) != 0;", "-\t\t\t}", "-\t\t\t// end of catch sequence, place label that will correspond to the finally block beginning, or end of statement", "-\t\t\tendLabel.place();", "-\t\t\tif (subRoutineStartLabel != null) {", "-\t\t\t\tif (nonReturningSubRoutine) {", "+\t\t\t\t// end of catch sequence, place label that will correspond to the finally block beginning, or end of statement", "+\t\t\t\tif (nonReturningSubRoutine) {//TODO: should not be necessary", "-\t\t\t\t}", "-\t\t\t\tLabel veryEndLabel = new Label(codeStream);", "-\t\t\t\tif (requiresNaturalJsr) {", "-\t\t\t\t\tcodeStream.jsr(subRoutineStartLabel);", "-\t\t\t\t\tcodeStream.goto_(veryEndLabel);", "+\t\t\t\t// will naturally fall into subsequent code after subroutine invocation", "+\t\t\t\tendLabel.place();", "-\t\t\t\t\tveryEndLabel.place();", "+\t\t\t\t\tcodeStream.jsr(subRoutineStartLabel);", "+\t\t\t} else {", "+\t\t\t\t// no subroutine, simply position end label", "+\t\t\t\tendLabel.place();", "+\t\t\tendLabel.place();"]}], "num": 50531}
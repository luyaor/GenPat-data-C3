{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a36b82e5e8a7a01e4e3d2fd365a93054", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6265d394be4ee4bd0539411bd746a1ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "c93b7fc02953335388042ab5bd4ec34f70464821", "commitAfterChange": "c9213ae595dd32af0d2b3bd7c31b733e8b1d0dd1", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public String projectPathFor(String resourcePathString)", "signatureAfterChange": " public IPackageFragmentRoot packageFragmentRoot(String resourcePathString)", "diff": ["-public String projectPathFor(String resourcePathString) {", "+public IPackageFragmentRoot packageFragmentRoot(String resourcePathString) {", "-\tif (separatorIndex != -1) {", "+\tboolean isJarFile = separatorIndex != -1;", "+\tif (isJarFile) {", "-\t\tif (idx != -1) {", "-\t\t\treturn (String) this.projectPaths.get(idx);", "+\t\tString projectPath = idx == -1 ? null : (String) this.projectPaths.get(idx);", "+\t\tif (projectPath != null) {", "+\t\t\tIJavaProject project =JavaCore.create(ResourcesPlugin.getWorkspace().getRoot().getProject(projectPath));", "+\t\t\tif (isJarFile) {", "+\t\t\t\treturn project.getPackageFragmentRoot(this.containerPaths[index]);", "+\t\t\t}", "+\t\t\tObject target = JavaModel.getTarget(ResourcesPlugin.getWorkspace().getRoot(), new Path(this.containerPaths[index]+'/'+this.relativePaths[index]), false);", "+\t\t\tif (target instanceof IResource) {", "+\t\t\t\treturn project.getPackageFragmentRoot((IResource)target);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb6cf0a92030c89eb71b19e2d1730458", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "ab74babcdf0f89ee66e36b91189c0d301a4da95d", "commitAfterChange": "66a4221dd418603b7f2bc6722d99e4e300585ef1", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "signatureAfterChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "diff": ["-\t\t\t\t\ttext = new String(source, start, name.getLength());", "-\t\t\t\t\tassumeEquals(prefix+\"Misplaced method ref name at <\"+start+\">: \", text, name.toString());", "+\t\t\t\t\tint nameLength = name.getLength();", "+\t\t\t\t\ttext = new String(source, start, nameLength);", "+\t\t\t\t\tif (!text.equals(name.toString())) { // may have qualified constructor reference for inner classes", "+\t\t\t\t\t\tif (methodRef.getQualifier().isQualifiedName()) {", "+\t\t\t\t\t\t\ttext = new String(source, start, methodRef.getQualifier().getLength());", "+\t\t\t\t\t\t\tassumeEquals(prefix+\"Misplaced method ref name at <\"+start+\">: \", text, methodRef.getQualifier().toString());", "+\t\t\t\t\t\t\twhile (source[start] != '.' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\t\t\tstart++; // purge non-stored characters", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\twhile (source[start] != '.' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\t\t\tstart++; // purge non-stored characters", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\ttext = new String(source, start, nameLength);", "+\t\t\t\t\t\t\tassumeEquals(prefix+\"Misplaced method ref name at <\"+start+\">: \", text, name.toString());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\tstart += name.getLength();", "+\t\t\t\t\tstart += nameLength;"]}], "num": 43227}
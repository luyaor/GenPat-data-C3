{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5aeba61701fdb4fe3fa3b64d63f90f4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "828645b176af1ccd8cc3e0770eb32c5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 29, "signatureBeforeChange": " void updateArrayCache(UnresolvedReferenceBinding unresolvedType, ReferenceBinding resolvedType)", "signatureAfterChange": " void updateCaches(UnresolvedReferenceBinding unresolvedType, ReferenceBinding resolvedType)", "diff": ["-void updateArrayCache(UnresolvedReferenceBinding unresolvedType, ReferenceBinding resolvedType) {", "-\tnextDimension : for (int i = 0, length = uniqueArrayBindings.length; i < length; i++) {", "-\t\tArrayBinding[] arrayBindings = uniqueArrayBindings[i];", "-\t\tif (arrayBindings != null) {", "-\t\t\tfor (int j = 0, max = arrayBindings.length; j < max; j++) {", "-\t\t\t\tArrayBinding currentBinding = arrayBindings[j];", "-\t\t\t\tif (currentBinding == null)", "-\t\t\t\t\tcontinue nextDimension;", "-\t\t\t\tif (currentBinding.leafComponentType == unresolvedType) {", "-\t\t\t\t\tcurrentBinding.leafComponentType = resolvedType;", "-\t\t\t\t\tcontinue nextDimension;", "-\t\t\t\t}", "+void updateCaches(UnresolvedReferenceBinding unresolvedType, ReferenceBinding resolvedType) {", "+\t// walk all the unique collections & replace the unresolvedType with the resolvedType", "+\t// must prevent 2 entries so == still works (1 containing the unresolvedType and the other containing the resolvedType)", "+\tif (uniqueParameterizedTypeBindings.get(unresolvedType) != null) { // update the key", "+\t\tObject[] keys = uniqueParameterizedTypeBindings.keyTable;", "+\t\tfor (int i = 0, l = keys.length; i < l; i++) {", "+\t\t\tif (keys[i] == unresolvedType) {", "+\t\t\t\tkeys[i] = resolvedType; // hashCode is based on compoundName so this works - cannot be raw since type of parameterized type", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t}", "+", "+\tif (uniqueWildcardBindings.get(unresolvedType) != null) { // update the key", "+\t\tObject[] keys = uniqueWildcardBindings.keyTable;", "+\t\tfor (int i = 0, l = keys.length; i < l; i++) {", "+\t\t\tif (keys[i] == unresolvedType) {", "+\t\t\t\tkeys[i] = resolvedType.isGenericType() ? createRawType(resolvedType, null) : resolvedType; // hashCode is based on compoundName so this works", "+\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2781718628a3be43d086c8bc3b3c65d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "42a8e7b7f9382c59bb1ff340f0838c566aaa3094", "commitAfterChange": "eaac4cd91d3c13197436495a330942a49816eb54", "methodNumberBeforeChange": 191, "methodNumberAfterChange": 192, "signatureBeforeChange": " public void methodNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " public void methodNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-\tStringBuffer methodSignature = new StringBuffer();", "-\tmethodSignature", "-\t\t.append(inheritedMethod.declaringClass.readableName())", "-\t\t.append('.')", "-\t\t.append(inheritedMethod.readableName());", "-\tStringBuffer shortSignature = new StringBuffer();", "-\tshortSignature", "-\t\t.append(inheritedMethod.declaringClass.shortReadableName())", "-\t\t.append('.')", "-\t\t.append(inheritedMethod.shortReadableName());", "-", "-\tint id = IProblem.MethodNameClash;", "-\t\tid,", "-\t\tnew String[] {methodSignature.toString()},", "-\t\tnew String[] {shortSignature.toString()},", "-\t\tcurrentMethod.sourceStart(),", "-\t\tcurrentMethod.sourceEnd());", "-}", "+\t\t\tIProblem.MethodNameClash,", "+\t\t\tnew String[] {", "+\t\t\t\tnew String(currentMethod.selector),", "+\t\t\t\tparametersAsString(currentMethod.original().parameters, false),", "+\t\t\t\tnew String(currentMethod.declaringClass.readableName()),", "+\t\t\t\tparametersAsString(inheritedMethod.original().parameters, false),", "+\t\t\t\tnew String(inheritedMethod.declaringClass.readableName()),", "+\t\t\t }, ", "+\t\t\tnew String[] {", "+\t\t\t\tnew String(currentMethod.selector),", "+\t\t\t\tparametersAsString(currentMethod.original().parameters, true),", "+\t\t\t\tnew String(currentMethod.declaringClass.shortReadableName()),", "+\t\t\t\tparametersAsString(inheritedMethod.original().parameters, true),", "+\t\t\t\tnew String(inheritedMethod.declaringClass.shortReadableName()),", "+\t\t\t }, ", "+\t\t\tcurrentMethod.sourceStart(),", "+\t\t\tcurrentMethod.sourceEnd());", "+}\t"]}], "num": 37078}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5821eebc7818aafafef5cb377ca945b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a0cd08a24d08d8f79f22ba8aa046887", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MemberValuePair.java", "commitBeforeChange": "e7fead4adac4e5d682bbdf8cb7aaa3f524aab927", "commitAfterChange": "3f60ba6c4328b89dbfaef12feb628451b43d7879", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "signatureAfterChange": "  \tpublic void resolveTypeExpecting(final BlockScope scope, final TypeBinding requiredType)", "diff": ["-\tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType) {", "+\tpublic void resolveTypeExpecting(final BlockScope scope, final TypeBinding requiredType) {", "-\t\tTypeBinding valueType;", "+\t\tfinal TypeBinding valueType;", "-\t\tTypeBinding leafType = requiredType.leafComponentType();", "-\t\tif (!(this.value.isConstantValueOfTypeAssignableToType(valueType, requiredType)", "-\t\t\t\t|| valueType.isCompatibleWith(requiredType))) {", "-", "-\t\t\tif (!(requiredType.isArrayType()", "-\t\t\t\t\t&& requiredType.dimensions() == 1", "-\t\t\t\t\t&& (this.value.isConstantValueOfTypeAssignableToType(valueType, leafType)", "-\t\t\t\t\t\t\t|| valueType.isCompatibleWith(leafType)))) {", "-", "-\t\t\t\tif (leafType.isAnnotationType() && !valueType.isAnnotationType()) {", "-\t\t\t\t\tscope.problemReporter().annotationValueMustBeAnnotation(this.binding.declaringClass, this.name, this.value, leafType);", "+\t\tfinal TypeBinding leafType = requiredType.leafComponentType();", "+\t\t// the next check may need deferring:", "+\t\tfinal boolean[] shouldExit = new boolean[1];", "+\t\tRunnable check = new Runnable() {", "+\t\t\t@Override", "+\t\t\tpublic void run() {", "+\t\t\t\tif (!(MemberValuePair.this.value.isConstantValueOfTypeAssignableToType(valueType, requiredType)", "+\t\t\t\t\t\t|| valueType.isCompatibleWith(requiredType))) {", "+\t\t\t\t\tif (!(requiredType.isArrayType()", "+\t\t\t\t\t\t\t&& requiredType.dimensions() == 1", "+\t\t\t\t\t\t\t&& (MemberValuePair.this.value.isConstantValueOfTypeAssignableToType(valueType, leafType)", "+\t\t\t\t\t\t\t\t\t|| valueType.isCompatibleWith(leafType)))) {", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tif (leafType.isAnnotationType() && !valueType.isAnnotationType()) {", "+\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeAnnotation(MemberValuePair.this.binding.declaringClass,", "+\t\t\t\t\t\t\t\t\tMemberValuePair.this.name, MemberValuePair.this.value, leafType);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tscope.problemReporter().typeMismatchError(valueType, requiredType, MemberValuePair.this.value, null);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tshouldExit[0] = true; // TODO may allow to proceed to find more errors at once", "+\t\t\t\t\t}", "-\t\t\t\t\tscope.problemReporter().typeMismatchError(valueType, requiredType, this.value, null);", "+\t\t\t\t\tscope.compilationUnitScope().recordTypeConversion(requiredType.leafComponentType(), valueType.leafComponentType());", "+\t\t\t\t\tMemberValuePair.this.value.computeConversion(scope, requiredType, valueType);", "-\t\t\t\treturn; // may allow to proceed to find more errors at once", "-\t\t} else {", "-\t\t\tscope.compilationUnitScope().recordTypeConversion(requiredType.leafComponentType(), valueType.leafComponentType());", "-\t\t\tthis.value.computeConversion(scope, requiredType, valueType);", "+\t\t};", "+\t\t// ... now or later?", "+\t\tif (!scope.deferCheck(check)) {", "+\t\t\tcheck.run();", "+\t\t\tif (shouldExit[0])", "+\t\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b3307406069fc261e50940235601ad8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "38437076b7a492cbe65acea37c6da2899990885f", "commitAfterChange": "a85dd3772bf40e01ede4717af426d44844307345", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void checkComment()", "signatureAfterChange": " public void checkComment()", "diff": ["-\t\t\tpatternLocator.match(typeRef, nodeSet);", "+\t\t\tthis.patternLocator.match(typeRef, this.nodeSet);", "-\t\t\t\tpatternLocator.match(typeRef, nodeSet);", "+\t\t\t\tthis.patternLocator.match(typeRef, this.nodeSet);", "-\t\t\t\tpatternLocator.match(fieldRef, nodeSet);", "-\t\t\t\tif (fieldRef.receiver instanceof TypeReference) {", "+\t\t\t\tthis.patternLocator.match(fieldRef, this.nodeSet);", "+\t\t\t\tif (fieldRef.receiver instanceof TypeReference && !fieldRef.receiver.isThis()) {", "-\t\t\t\t\tpatternLocator.match(typeRef, nodeSet);", "+\t\t\t\t\tthis.patternLocator.match(typeRef, this.nodeSet);", "-\t\t\t\tpatternLocator.match(messageSend, nodeSet);", "-\t\t\t\tif (messageSend.receiver instanceof TypeReference) {", "+\t\t\t\tthis.patternLocator.match(messageSend, this.nodeSet);", "+\t\t\t\tif (messageSend.receiver instanceof TypeReference && !messageSend.receiver.isThis()) {", "-\t\t\t\t\tpatternLocator.match(typeRef, nodeSet);", "+\t\t\t\t\tthis.patternLocator.match(typeRef, this.nodeSet);", "-\t\t\t\tpatternLocator.match(constructor, nodeSet);", "-\t\t\t\tif (constructor.type != null) {", "-\t\t\t\t\tpatternLocator.match(constructor.type, nodeSet);", "+\t\t\t\tthis.patternLocator.match(constructor, this.nodeSet);", "+\t\t\t\tif (constructor.type != null && !constructor.type.isThis()) {", "+\t\t\t\t\tthis.patternLocator.match(constructor.type, this.nodeSet);"]}], "num": 29447}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c6d23a0c779adf3e3165f9a2a4d44b8", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72ffc28f80688ef423fed793e294315f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "1f258635fb49ca32f9def120a3d2f7561eca1435", "commitAfterChange": "f3cbbf9c2974017737d02d4ae4c1412f1a96ce0d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void attachOrphanCompletionNode()", "signatureAfterChange": " protected void attachOrphanCompletionNode()", "diff": ["+\t\tif(orphan instanceof MemberValuePair) {", "+\t\t\tbuildMoreAnnotationCompletionContext((MemberValuePair) orphan);", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t", "+\tif (this.isInsideAnnotation()) {", "+\t\t// push top expression on ast stack if it contains the completion node", "+\t\tExpression expression;", "+\t\tif (this.expressionPtr > -1) {", "+\t\t\texpression = this.expressionStack[this.expressionPtr];", "+\t\t\tif(expression == assistNode) {", "+\t\t\t\tif(this.topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_BETWEEN_ANNOTATION_NAME_AND_RPAREN) {", "+\t\t\t\t\tif (expression instanceof SingleNameReference) {", "+\t\t\t\t\t\tSingleNameReference nameReference = (SingleNameReference) expression;", "+\t\t\t\t\t\tCompletionOnMemberValueName memberValueName = new CompletionOnMemberValueName(nameReference.token, nameReference.sourceStart, nameReference.sourceEnd);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tbuildMoreAnnotationCompletionContext(memberValueName);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\t", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eba17cf3bf33128bd99ad48f38ee7b6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java", "commitBeforeChange": "bd3806cc9cec8e9a14826ff23d7065c6143ced5e", "commitAfterChange": "9c3c9a68123a2dba6c0a481afee1d6f36fcdd02a", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " protected void consumeMethodInvocationName()", "signatureAfterChange": " protected void consumeMethodInvocationName()", "diff": ["+\t\tif (requireExtendedRecovery()) {", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=430572, compensate for the hacks elsewhere where super/this gets treated as identifier. See getUnspecifiedReference", "+\t\t\tif (this.astPtr >= 0 && this.astStack[this.astPtr] == this.assistNode && this.assistNode instanceof ThisReference) {", "+\t\t\t\tMessageSend messageSend = (MessageSend) this.expressionStack[this.expressionPtr];", "+\t\t\t\tif (messageSend.receiver instanceof SingleNameReference) {", "+\t\t\t\t\tSingleNameReference snr = (SingleNameReference) messageSend.receiver;", "+\t\t\t\t\tif (snr.token == CharOperation.NO_CHAR) { // dummy reference created by getUnspecifiedReference ???", "+\t\t\t\t\t\tmessageSend.receiver = (Expression) this.astStack[this.astPtr--];", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 4671}
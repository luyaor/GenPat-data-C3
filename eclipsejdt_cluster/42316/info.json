{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68291a0d2068552274ac988af04231fa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "724b247079576a6e921f8b32fb2cd5d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic synchronized IMethodBinding[] getDeclaredMethods()", "signatureAfterChange": " \tpublic synchronized IMethodBinding[] getDeclaredMethods()", "diff": ["-\t\t\t\t\tint removeSyntheticsCounter = 0;", "+\t\t\t\t\tint convertedMethodCount = 0;", "-\t\t\t\t\t\tif (!shouldBeRemoved(methodBinding)) {", "-\t\t\t\t\t\t\tIMethodBinding methodBinding2 = this.resolver.getMethodBinding(methodBinding);", "-\t\t\t\t\t\t\tif (methodBinding2 != null) {", "-\t\t\t\t\t\t\t\tnewMethods[removeSyntheticsCounter++] = methodBinding2;", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (methodBinding.isDefaultAbstract() || methodBinding.isSynthetic() || (methodBinding.isConstructor() && isInterface())) {", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tIMethodBinding methodBinding2 = this.resolver.getMethodBinding(methodBinding);", "+\t\t\t\t\t\tif (methodBinding2 != null) {", "+\t\t\t\t\t\t\tnewMethods[convertedMethodCount++] = methodBinding2;", "-\t\t\t\t\tif (removeSyntheticsCounter != length) {", "-\t\t\t\t\t\tSystem.arraycopy(newMethods, 0, (newMethods = new IMethodBinding[removeSyntheticsCounter]), 0, removeSyntheticsCounter);", "+\t\t\t\t\tif (convertedMethodCount != length) {", "+\t\t\t\t\t\tif (convertedMethodCount == 0) {", "+\t\t\t\t\t\t\treturn this.methods = NO_METHOD_BINDINGS;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tSystem.arraycopy(newMethods, 0, (newMethods = new IMethodBinding[convertedMethodCount]), 0, convertedMethodCount);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3760fc740fb217df1e4e8a05e4b75f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorLocator.java", "commitBeforeChange": "ec12553ca5ec05e5d29ae2df78ae2ebf9cac1065", "commitAfterChange": "165d2ee0a4a374ec3dbb0f3df780db24664ac692", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public int match(TypeDeclaration node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(MessageSend msgSend, MatchingNodeSet nodeSet)", "diff": ["+ */", "+public int match(MessageSend msgSend, MatchingNodeSet nodeSet)  {", "+\tif ((msgSend.bits & ASTNode.InsideJavadoc) == 0) return IMPOSSIBLE_MATCH;", "+\tif (this.pattern.declaringSimpleName == null || CharOperation.equals(msgSend.selector, this.pattern.declaringSimpleName)) {", "+\t\treturn nodeSet.addMatch(msgSend, ((InternalSearchPattern)this.pattern).mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "+\t}", "+\treturn IMPOSSIBLE_MATCH;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0d7f5ab14d6287bb56d2e46ad5cd279", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t\t\t} else if (token.equals(\"unsafe\")) {//$NON-NLS-1$ ", "+\t\t\t\t\t} else if (token.equals(\"unchecked\") || token.equals(\"unsafe\")) {//$NON-NLS-1$ //$NON-NLS-2$ ", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportUnsafeTypeOperation,", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportUncheckedTypeOperation,", "-\t\t\t\t\t} else if (token.equals(\"nullCheck\")) { //$NON-NLS-1$", "+\t\t\t\t\t} else if (token.equals(\"null\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportInconsistentNullCheck,", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportNullReference,", "+\t\t\t\t\t\t\tisEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);\t\t\t\t\t\t", "+\t\t\t\t\t} else if (token.equals(\"boxing\")) { //$NON-NLS-1$", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportAutoboxing,"]}], "num": 42316}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00cb3df44b16475866d99351c9c67e6e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da07e6673f23d07bcfb795455c58d8d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredAnnotation.java", "commitBeforeChange": "bae98ccb647b46a2d5cfccf36593de0c5db401c9", "commitAfterChange": "230a5cd410205aeead21b12e1ec93eae10a08fda", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic void updateFromParserState()", "signatureAfterChange": " \t \tpublic void updateFromParserState()", "diff": ["+\t\t\tMemberValuePair pendingMemberValueName = null;", "+\t\t\tif (this.hasPendingMemberValueName && this.identifierPtr < parser.identifierPtr) {", "+\t\t\t\tchar[] memberValueName = parser.identifierStack[this.identifierPtr + 1];", "+\t\t\t\t", "+\t\t\t\tlong pos = parser.identifierPositionStack[this.identifierPtr + 1];", "+\t\t\t\tint start = (int) (pos >>> 32);", "+\t\t\t\tint end = (int)pos;", "+\t\t\t\tint valueEnd = this.memberValuPairEqualEnd > -1 ? this.memberValuPairEqualEnd : end;", "+\t\t\t\t", "+\t\t\t\tSingleNameReference fakeExpression = new SingleNameReference(RecoveryScanner.FAKE_IDENTIFIER, (((long) valueEnd + 1) << 32) + (valueEnd));", "+\t\t\t\tpendingMemberValueName = new MemberValuePair(memberValueName, start, end, fakeExpression);", "+\t\t\t}", "-\t\t\t\t\tMemberValuePair[] memberValuePairs = null;", "+\t\t\t\t\t\tMemberValuePair[] memberValuePairs = null;", "+\t\t\t\t\t\t", "-\t\t\t\t\t\t\tSystem.arraycopy(parser.astStack, argStart, memberValuePairs = new MemberValuePair[argLength], 0, argLength);", "-\t\t\t\t\t\t\tparser.astLengthPtr--;", "-\t\t\t\t\t\t\tparser.astPtr -= argLength;", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tMemberValuePair lastMemberValuePair = memberValuePairs[memberValuePairs.length - 1];", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tNormalAnnotation normalAnnotation = new NormalAnnotation(typeReference, this.sourceStart);", "-\t\t\t\t\t\t\tnormalAnnotation.memberValuePairs = memberValuePairs;", "-\t\t\t\t\t\t\tnormalAnnotation.declarationSourceEnd =", "-\t\t\t\t\t\t\t\tlastMemberValuePair.value != null", "+\t\t\t\t\t\t\tint annotationEnd;", "+\t\t\t\t\t\t\tif (pendingMemberValueName != null) {", "+\t\t\t\t\t\t\t\tmemberValuePairs = new MemberValuePair[argLength + 1];", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tSystem.arraycopy(parser.astStack, argStart, memberValuePairs, 0, argLength);", "+\t\t\t\t\t\t\t\tparser.astLengthPtr--;", "+\t\t\t\t\t\t\t\tparser.astPtr -= argLength;", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tmemberValuePairs[argLength] = pendingMemberValueName;", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tannotationEnd = pendingMemberValueName.sourceEnd;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tmemberValuePairs = new MemberValuePair[argLength];", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tSystem.arraycopy(parser.astStack, argStart, memberValuePairs, 0, argLength);", "+\t\t\t\t\t\t\t\tparser.astLengthPtr--;", "+\t\t\t\t\t\t\t\tparser.astPtr -= argLength;", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tMemberValuePair lastMemberValuePair = memberValuePairs[memberValuePairs.length - 1];", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tannotationEnd = ", "+\t\t\t\t\t\t\t\t\tlastMemberValuePair.value != null", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tNormalAnnotation normalAnnotation = new NormalAnnotation(typeReference, this.sourceStart);", "+\t\t\t\t\t\t\tnormalAnnotation.memberValuePairs = memberValuePairs;", "+\t\t\t\t\t\t\tnormalAnnotation.declarationSourceEnd = annotationEnd;", "-\t\t\t\tMarkerAnnotation markerAnnotation = new MarkerAnnotation(typeReference, this.sourceStart);", "-\t\t\t\tmarkerAnnotation.declarationSourceEnd = markerAnnotation.sourceEnd;", "-\t\t\t\tmarkerAnnotation.bits |= ASTNode.IsRecovered;", "-\t\t\t\t", "-\t\t\t\tannot = markerAnnotation;", "+\t\t\t\tif (pendingMemberValueName != null) {", "+\t\t\t\t\tNormalAnnotation normalAnnotation = new NormalAnnotation(typeReference, this.sourceStart);", "+\t\t\t\t\tnormalAnnotation.memberValuePairs = new MemberValuePair[]{pendingMemberValueName};", "+\t\t\t\t\tnormalAnnotation.declarationSourceEnd = pendingMemberValueName.value.sourceEnd;", "+\t\t\t\t\tnormalAnnotation.bits |= ASTNode.IsRecovered;", "+\t\t\t\t\t", "+\t\t\t\t\tannot = normalAnnotation;", "+\t\t\t\t} else {", "+\t\t\t\t\tMarkerAnnotation markerAnnotation = new MarkerAnnotation(typeReference, this.sourceStart);", "+\t\t\t\t\tmarkerAnnotation.declarationSourceEnd = markerAnnotation.sourceEnd;", "+\t\t\t\t\tmarkerAnnotation.bits |= ASTNode.IsRecovered;", "+\t\t\t\t\t", "+\t\t\t\t\tannot = markerAnnotation;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f071638417c380e2f9eb88e5a8dabf87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "c170f8179cacaa96bd5e7ced1e8d03ed5ea31d41", "commitAfterChange": "e2cf787950c6d582e25b73b2371c68f3fffed436", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "\r protected void consumeMethodHeaderName()", "signatureAfterChange": "\r protected void consumeMethodHeaderName()", "diff": ["-\tif (this.indexOfAssistIdentifier() < 0) {\r", "-\t\tsuper.consumeMethodHeaderName();\r", "+\tif(this.indexOfAssistIdentifier() < 0) {\r", "+\t\tidentifierPtr--;\r", "+\t\tidentifierLengthPtr--;\r", "+\t\tif(this.indexOfAssistIdentifier() != 0) {\r", "+\t\t\tidentifierPtr++;\r", "+\t\t\tidentifierLengthPtr++;\r", "+\t\t\tsuper.consumeMethodHeaderName();\r", "+\t\t} else {\r", "+\t\t\trestartRecovery = true;\r", "+\t\t\t\r", "+\t\t\t// recovery\r", "+\t\t\tif (currentElement != null) {\r", "+\t\t\t\t//name\r", "+\t\t\t\tchar[] selector = identifierStack[identifierPtr + 1];\r", "+\t\t\t\tlong selectorSource = identifierPositionStack[identifierPtr + 1];\r", "+\t\t\t\t\r", "+\t\t\t\t//type\r", "+\t\t\t\tTypeReference type = getTypeReference(intStack[intPtr--]);\r", "+\t\t\t\t((CompletionOnSingleTypeReference)type).isCompletionNode = false;\r", "+\t\t\t\t//modifiers\r", "+\t\t\t\tint declarationSourceStart = intStack[intPtr--];\r", "+\t\t\t\tint modifiers = intStack[intPtr--];\r", "+\t\t\t\t\r", "+\t\t\t\tif(scanner.getLineNumber(type.sourceStart) != scanner.getLineNumber((int) (selectorSource >>> 32))) {\r", "+\t\t\t\t\tFieldDeclaration completionFieldDecl = new CompletionOnFieldType(type, false);\r", "+\t\t\t\t\tcompletionFieldDecl.modifiers = modifiers;\r", "+\t\t\t\t\tassistNode = completionFieldDecl;\r", "+\t\t\t\t\tlastCheckPoint = type.sourceEnd + 1;\r", "+\t\t\t\t\tcurrentElement = currentElement.add(completionFieldDecl, 0);\r", "+\t\t\t\t\tlastIgnoredToken = -1;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tCompletionOnMethodReturnType md = new CompletionOnMethodReturnType(type, this.compilationUnit.compilationResult);\r", "+\t\t\t\t\tmd.selector = selector;\r", "+\t\t\t\t\tmd.declarationSourceStart = declarationSourceStart;\r", "+\t\t\t\t\tmd.modifiers = modifiers;\r", "+\t\t\t\t\tmd.bodyStart = lParenPos+1;\r", "+\t\t\t\t\tlistLength = 0; // initialize listLength before reading parameters/throws\r", "+\t\t\t\t\tassistNode = md;\r", "+\t\t\t\t\tthis.lastCheckPoint = md.bodyStart;\r", "+\t\t\t\t\tcurrentElement = currentElement.add(md, 0);\r", "+\t\t\t\t\tlastIgnoredToken = -1;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "-\t\tidentifierLengthPtr--;\r", "-\t\t}\t\t\r", "+\t\t}\r"]}], "num": 15859}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "306f9a387fa2d1d1196842af66e4f6a1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d4c8e2835034acb51ffe8e8ba78b81f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 229, "methodNumberAfterChange": 229, "signatureBeforeChange": " \tpublic void test227()", "signatureAfterChange": " \tpublic void test227()", "diff": ["-\t\t\t\"Unsafe type operation: The cast from List to parameterized type List<X> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from List to List<X> will not check conformance of type arguments at runtime\\n\" + ", "-\t\t\t\"Unsafe type operation: Should not convert expression of raw type List to type List<X>. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of raw type List is converted to List<X>. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Unsafe type operation: Should not convert expression of raw type Iterator to type Iterator<X>. References to generic type Iterator<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of raw type Iterator is converted to Iterator<X>. References to generic type Iterator<E> should be parameterized\\n\" + ", "-\t\t\t\"Unsafe type operation: The cast from Collection to parameterized type List<X> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from Collection to List<X> will not check conformance of type arguments at runtime\\n\" + ", "-\t\t\t\"Unsafe type operation: The cast from List to parameterized type Collection<X> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from List to Collection<X> will not check conformance of type arguments at runtime\\n\" + ", "-\t\t\t\"Unnecessary cast to type Collection<?> for expression of type List\\n\" + ", "+\t\t\t\"Unnecessary cast from List to Collection<?>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dff2a14470e01eca3cd81ab17a266742", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "9b5849b276b557fc60d6c04ed0f5505fe74ef589", "commitAfterChange": "a170a70f9fd89b9996c94f318397ff4dca1db782", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void testCompatibility4a()", "signatureAfterChange": " \tpublic void testCompatibility4a()", "diff": ["-\t// should mention the annotation on the leaf type.", "-\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'@Nullable String []\\' but this expression has type \\'@NonNull String []\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'@NonNull String []\\' but this expression has type \\'@Nullable String []\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'@NonNull String []\\' but this expression has type \\'@Nullable String []\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'@Nullable String []\\' but this expression has type \\'@NonNull String []\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'@NonNull String []\\' but this expression has type \\'@Nullable String []\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'@Nullable String []\\' but this expression has type \\'@NonNull String []\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e880a0f7bbda87f7c7e8c4ecd47a68a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/HierarchyOnWorkingCopiesTests.java", "commitBeforeChange": "bf2199048d434ee8a7461950468d3a2335a30990", "commitAfterChange": "99697e231d7abf709bf21ed4dc6a92bbb307b9f9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void test429435() throws CoreException, IOException", "signatureAfterChange": " public void test429435() throws CoreException, IOException", "diff": ["-\t\t\t\t\t\t\t\"  Lambda(I) [in doit() [in <anonymous #1> [in doit() [in Lambda(I) [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]]]]]\\n\" + ", "-\t\t\t\t\t\t\t\"  Lambda(I) [in doit() [in Lambda(I) [in doit() [in Lambda(I) [in doit() [in Lambda(I) [in doit() [in Lambda(I) [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]]]]]]]]]\\n\" + ", "-\t\t\t\t\t\t\t\"  Lambda(I) [in doit() [in Lambda(I) [in doit() [in Lambda(I) [in doit() [in Lambda(I) [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]]]]]]]\\n\" + ", "-\t\t\t\t\t\t\t\"  Lambda(I) [in doit() [in Lambda(I) [in doit() [in Lambda(I) [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]]]]]\\n\" + ", "-\t\t\t\t\t\t\t\"  Lambda(I) [in doit() [in Lambda(I) [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]]]\\n\" + ", "-\t\t\t\t\t\t\t\"  Lambda(I) [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\" + ", "+\t\t\t\t\t\t\t\"  <lambda #1> [in doit() [in <anonymous #1> [in doit() [in <lambda #1> [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]]]]]\\n\" + ", "+\t\t\t\t\t\t\t\"  <lambda #1> [in doit() [in <lambda #1> [in doit() [in <lambda #1> [in doit() [in <lambda #1> [in doit() [in <lambda #1> [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]]]]]]]]]\\n\" + ", "+\t\t\t\t\t\t\t\"  <lambda #1> [in doit() [in <lambda #1> [in doit() [in <lambda #1> [in doit() [in <lambda #1> [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]]]]]]]\\n\" + ", "+\t\t\t\t\t\t\t\"  <lambda #1> [in doit() [in <lambda #1> [in doit() [in <lambda #1> [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]]]]]\\n\" + ", "+\t\t\t\t\t\t\t\"  <lambda #1> [in doit() [in <lambda #1> [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]]]\\n\" + ", "+\t\t\t\t\t\t\t\"  <lambda #1> [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\" + "]}], "num": 6173}
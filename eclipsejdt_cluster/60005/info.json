{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de4d52fbe4929764dcc65d442153cbf3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9850dcef5180d8fb70c01018cc315051", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "346d5595b49b8e1d584c75a71d769acf07f794ed", "commitAfterChange": "2ec4d89bb7b096bd721c92f6e7b067648efc1200", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\tint problemId = NotFound;", "+\t\tReferenceBinding foundType = null;", "-\t\t\tReferenceBinding foundType = null;", "-\t\t\tif (foundType != null) {", "-\t\t\t\tif (foundType.problemId() != NotVisible) return foundType;", "-\t\t\t\tproblemId = NotVisible;", "-\t\t\t}", "+\t\t\tif (foundType != null && foundType.problemId() != NotVisible)", "+\t\t\t\treturn foundType;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tproblemId = temp.problemId();", "+\t\t\t\t\t\t\t} else if (foundType == null) {", "+\t\t\t\t\t\t\t\tfoundType = temp;", "-\t\treturn new ProblemReferenceBinding(name, problemId);", "+\t\tif (foundType != null) return foundType; // problem type from above", "+\t\treturn new ProblemReferenceBinding(name, NotFound);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b09e319808b0587afd2f2f9be1f4acae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathAccessRule.java", "commitBeforeChange": "de8634c6596eba9d498f21b3f06a4d952c468878", "commitAfterChange": "ed3ff9a36eb2db48659e462eacb164d15ad7a872", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprivate static int toProblemId(int kind)", "signatureAfterChange": " \t \tprivate static int toProblemId(int kind)", "diff": ["-\t\tswitch (kind) {", "+\t\tboolean ignoreIfBetter = (kind & IAccessRule.IGNORE_IF_BETTER) != 0;", "+\t\tswitch (kind & ~IAccessRule.IGNORE_IF_BETTER) {", "-\t\t\t\treturn IProblem.ForbiddenReference;", "+\t\t\t\treturn ignoreIfBetter ? IProblem.ForbiddenReference | AccessRule.IgnoreIfBetter : IProblem.ForbiddenReference;", "-\t\t\t\treturn IProblem.DiscouragedReference;", "+\t\t\t\treturn ignoreIfBetter ? IProblem.DiscouragedReference | AccessRule.IgnoreIfBetter : IProblem.DiscouragedReference;", "-\t\t\t\treturn -1;", "+\t\t\t\treturn ignoreIfBetter ? AccessRule.IgnoreIfBetter : 0;"]}], "num": 60005}
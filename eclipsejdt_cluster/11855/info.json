{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "736d2d3cac37b3c48340e2159d967799", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3595b36a8ae8a05fc69768977b84e730", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "b2ee2f0e0ad1c5d61d4417df1a17fc01d93cc41f", "commitAfterChange": "f276b1aed4d951175bd2d8ffa389a5d714685e87", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void run()", "signatureAfterChange": " \tpublic void run()", "diff": ["-\t\t\t\t\tIJob job = currentJob();", "-\t\t\t\t\tif (job != null) {", "-\t\t\t\t\t\tidlingStart = -1;", "-\t\t\t\t\t\tif (VERBOSE) {", "-\t\t\t\t\t\t\tJobManager.verbose(awaitingJobsCount() + \" awaiting jobs\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\tJobManager.verbose(\"STARTING background job - \" + job); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\texecuting = true;", "-\t\t\t\t\t\t\t/*boolean status = */job.execute(null);", "-\t\t\t\t\t\t\t//if (status == FAILED) request(job);", "-\t\t\t\t\t\t} finally {", "-\t\t\t\t\t\t\texecuting = false;", "-\t\t\t\t\t\t\tif (VERBOSE)", "-\t\t\t\t\t\t\t\tJobManager.verbose(\"FINISHED background job - \" + job); //$NON-NLS-1$", "-\t\t\t\t\t\t\tmoveToNextJob();", "-\t\t\t\t\t\t\tif (this.awaitingClients == 0)", "-\t\t\t\t\t\t\t\tThread.sleep(50);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (idlingStart < 0)", "-\t\t\t\t\t\t\tidlingStart = System.currentTimeMillis();", "-\t\t\t\t\t\tnotifyIdle(System.currentTimeMillis() - idlingStart);", "+\t\t\t\t\tIJob job;", "+\t\t\t\t\tsynchronized (this) {", "+\t\t\t\t\t\t// handle shutdown case when notifyAll came before the wait but after the while loop was entered", "+\t\t\t\t\t\tif (this.processingThread == null) continue;", "-\t\t\t\t\t\tsynchronized (this) {", "-\t\t\t\t\t\t\t// handle shutdown case when notifyAll was sent between the while loop condition and here", "-\t\t\t\t\t\t\tif (this.processingThread == null) continue;", "+\t\t\t\t\t\t// must check for new job inside this loop to avoid timing hole", "+\t\t\t\t\t\tif ((job = currentJob()) == null) {", "+\t\t\t\t\t\t\tif (idlingStart < 0)", "+\t\t\t\t\t\t\t\tidlingStart = System.currentTimeMillis();", "+\t\t\t\t\t\t\tnotifyIdle(System.currentTimeMillis() - idlingStart);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tidlingStart = -1;", "-\t\t\t\t\t\tThread.sleep(500); // delay before processing the new job, allow some time for the active thread to finish", "-\t\t\t\t} catch (InterruptedException ignored) {} // background indexing was interrupted", "+\t\t\t\t\tif (job == null) {", "+\t\t\t\t\t\t// just woke up, delay before processing any new jobs, allow some time for the active thread to finish", "+\t\t\t\t\t\tThread.sleep(500);", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (VERBOSE) {", "+\t\t\t\t\t\tJobManager.verbose(awaitingJobsCount() + \" awaiting jobs\"); //$NON-NLS-1$", "+\t\t\t\t\t\tJobManager.verbose(\"STARTING background job - \" + job); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\texecuting = true;", "+\t\t\t\t\t\t/*boolean status = */job.execute(null);", "+\t\t\t\t\t\t//if (status == FAILED) request(job);", "+\t\t\t\t\t} finally {", "+\t\t\t\t\t\texecuting = false;", "+\t\t\t\t\t\tif (VERBOSE)", "+\t\t\t\t\t\t\tJobManager.verbose(\"FINISHED background job - \" + job); //$NON-NLS-1$", "+\t\t\t\t\t\tmoveToNextJob();", "+\t\t\t\t\t\tif (this.awaitingClients == 0)", "+\t\t\t\t\t\t\tThread.sleep(50);", "+\t\t\t\t\t}", "+\t\t\t\t} catch (InterruptedException e) { // background indexing was interrupted", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98334b59b3b76654b13892acc6bbd86e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "888ff915accf0f7dc08ba845bca467c94f1e290b", "commitAfterChange": "f69c200469412ca3b93e80844c6c1f4e077169ac", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprotected boolean generateInfos( \t\tOpenableElementInfo info, \t\tIProgressMonitor pm, \t\tMap newElements, \t\tIResource underlyingResource) throws JavaModelException", "signatureAfterChange": " \tprotected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["+\t */", "+\tprotected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException {", "+\t", "+\t\t// check whether the java project can be opened", "+\t\tif (!underlyingResource.isAccessible()) {", "+\t\t\tthrow newNotPresentException();", "+\t\t}", "+\t\t", "+\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "+\t\tIWorkspaceRoot wRoot = workspace.getRoot();", "+\t\t// cannot refresh cp markers on opening (emulate cp check on startup) since can create deadlocks (see bug 37274)", "+\t\tIClasspathEntry[] resolvedClasspath = getResolvedClasspath(true/*ignore unresolved variable*/);", "+", "+\t\t// compute the pkg fragment roots", "+\t\tcomputeChildren((JavaProjectElementInfo)info);\t\t\t\t", "+", "+\t\t// remember the timestamps of external libraries the first time they are looked up", "+\t\tfor (int i = 0, length = resolvedClasspath.length; i < length; i++) {", "+\t\t\tIClasspathEntry entry = resolvedClasspath[i];", "+\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "+\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\tObject target = JavaModel.getTarget(wRoot, path, true);", "+\t\t\t\tif (target instanceof java.io.File) {", "+\t\t\t\t\tMap externalTimeStamps = JavaModelManager.getJavaModelManager().deltaProcessor.externalTimeStamps;", "+\t\t\t\t\tif (externalTimeStamps.get(path) == null) {", "+\t\t\t\t\t\tlong timestamp = DeltaProcessor.getTimeStamp((java.io.File)target);", "+\t\t\t\t\t\texternalTimeStamps.put(path, new Long(timestamp));\t\t\t\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}\t\t\t", "+", "+\t\treturn true;", "+\t}", "-\t */", "-\tprotected boolean generateInfos(", "-\t\tOpenableElementInfo info,", "-\t\tIProgressMonitor pm,", "-\t\tMap newElements,", "-\t\tIResource underlyingResource) throws JavaModelException {", "-\t", "-\t\tif (getProject().isOpen()) {", "-\t\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\t\t\tIWorkspaceRoot wRoot = workspace.getRoot();", "-\t\t\t// cannot refresh cp markers on opening (emulate cp check on startup) since can create deadlocks (see bug 37274)", "-\t\t\tIClasspathEntry[] resolvedClasspath = getResolvedClasspath(true/*ignore unresolved variable*/);", "-\t", "-\t\t\t// compute the pkg fragment roots", "-\t\t\tcomputeChildren((JavaProjectElementInfo)info);\t\t\t\t", "-\t", "-\t\t\t// remember the timestamps of external libraries the first time they are looked up", "-\t\t\tfor (int i = 0, length = resolvedClasspath.length; i < length; i++) {", "-\t\t\t\tIClasspathEntry entry = resolvedClasspath[i];", "-\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "-\t\t\t\t\tIPath path = entry.getPath();", "-\t\t\t\t\tObject target = JavaModel.getTarget(wRoot, path, true);", "-\t\t\t\t\tif (target instanceof java.io.File) {", "-\t\t\t\t\t\tMap externalTimeStamps = JavaModelManager.getJavaModelManager().deltaProcessor.externalTimeStamps;", "-\t\t\t\t\t\tif (externalTimeStamps.get(path) == null) {", "-\t\t\t\t\t\t\tlong timestamp = DeltaProcessor.getTimeStamp((java.io.File)target);", "-\t\t\t\t\t\t\texternalTimeStamps.put(path, new Long(timestamp));\t\t\t\t\t\t\t", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}\t\t\t", "-\t\t}", "-\t\treturn true;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0c1fe68d526b7c78076ba6f2e5203bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "44aa8100cf1acafb668d09083fbe900feba372d4", "commitAfterChange": "502ac8abc8910137c8c48c0b99f02c92a8a1a0bb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tpublic static IPath canonicalizedPath(IPath externalPath)", "signatureAfterChange": "\r \tpublic static IPath canonicalizedPath(IPath externalPath)", "diff": ["-\t\tif (externalPath.isAbsolute()) {\r", "+\t\tint canonicalLength = canonicalPath.segmentCount();\r", "+\t\tif (canonicalLength == 0) {\r", "+\t\t\t// the java.io.File canonicalization failed\r", "+\t\t\treturn externalPath;\r", "+\t\t} else if (externalPath.isAbsolute()) {\r", "-\t\t\tint canonicalLength = canonicalPath.segmentCount();\r", "-\t\t\tif (canonicalLength > externalLength) {\r", "+\t\t\tif (canonicalLength >= externalLength) {\r", "-\t\t\t\tresult = canonicalPath;\r", "+\t\t\t\treturn externalPath;\r"]}], "num": 11855}
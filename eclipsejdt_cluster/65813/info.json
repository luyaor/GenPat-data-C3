{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "61a5c397271d137a8340da15bfea75af", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37a2ca95ae0796b59c763b0bc58d7fea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "8879b56fd07da9d038783d336704cc8af2052901", "commitAfterChange": "5daf90a164d16969119f51284ec69f74248f815c", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic int generateMethodInfoAttribute(MethodBinding methodBinding, boolean createProblemMethod)", "signatureAfterChange": " \tpublic int generateMethodInfoAttribute(MethodBinding methodBinding, boolean createProblemMethod)", "diff": ["-\t\tif (this.targetJDK < ClassFileConstants.JDK1_5 && methodBinding.isSynthetic()) {", "-\t\t\t// Synthetic attribute", "-\t\t\t// Check that there is enough space to write the deprecated attribute", "-\t\t\tif (contentsOffset + 6 >= this.contents.length) {", "-\t\t\t\tresizeContents(6);", "+\t\tif (this.targetJDK < ClassFileConstants.JDK1_5) {", "+\t\t\tif (methodBinding.isSynthetic()) {", "+\t\t\t\t// Synthetic attribute", "+\t\t\t\t// Check that there is enough space to write the deprecated attribute", "+\t\t\t\tif (contentsOffset + 6 >= this.contents.length) {", "+\t\t\t\t\tresizeContents(6);", "+\t\t\t\t}", "+\t\t\t\tint syntheticAttributeNameIndex =", "+\t\t\t\t\tconstantPool.literalIndex(AttributeNamesConstants.SyntheticName);", "+\t\t\t\tcontents[contentsOffset++] = (byte) (syntheticAttributeNameIndex >> 8);", "+\t\t\t\tcontents[contentsOffset++] = (byte) syntheticAttributeNameIndex;", "+\t\t\t\t// the length of a synthetic attribute is equals to 0", "+\t\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\t\tcontents[contentsOffset++] = 0;", "+\t", "+\t\t\t\tattributeNumber++;", "-\t\t\tint syntheticAttributeNameIndex =", "-\t\t\t\tconstantPool.literalIndex(AttributeNamesConstants.SyntheticName);", "-\t\t\tcontents[contentsOffset++] = (byte) (syntheticAttributeNameIndex >> 8);", "-\t\t\tcontents[contentsOffset++] = (byte) syntheticAttributeNameIndex;", "-\t\t\t// the length of a synthetic attribute is equals to 0", "-\t\t\tcontents[contentsOffset++] = 0;", "-\t\t\tcontents[contentsOffset++] = 0;", "-\t\t\tcontents[contentsOffset++] = 0;", "-\t\t\tcontents[contentsOffset++] = 0;", "-", "-\t\t\tattributeNumber++;", "+\t\t\tif (methodBinding.isVarargs()) {", "+\t\t\t\t/*", "+\t\t\t\t * handle of the target jsr14 for varargs in the source", "+\t\t\t\t * Varargs attribute", "+\t\t\t\t * Check that there is enough space to write the deprecated attribute", "+\t\t\t\t */", "+\t\t\t\tif (contentsOffset + 6 >= this.contents.length) {", "+\t\t\t\t\tresizeContents(6);", "+\t\t\t\t}", "+\t\t\t\tint varargsAttributeNameIndex =", "+\t\t\t\t\tconstantPool.literalIndex(AttributeNamesConstants.VarargsName);", "+\t\t\t\tcontents[contentsOffset++] = (byte) (varargsAttributeNameIndex >> 8);", "+\t\t\t\tcontents[contentsOffset++] = (byte) varargsAttributeNameIndex;", "+\t\t\t\t// the length of a varargs attribute is equals to 0", "+\t\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\t\tcontents[contentsOffset++] = 0;", "+\t\t\t\tcontents[contentsOffset++] = 0;", "+\t", "+\t\t\t\tattributeNumber++;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "732e91dc88a684f4196cac8f07eb04a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "a3376443e7433851c1c9a2be37ee8e7113265608", "commitAfterChange": "de1a896ae0cf9cc7fdee8ce3aebee48242ef244b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \tpublic void addProblemMethod(\r \t\tAbstractMethodDeclaration method,\r \t\tMethodBinding methodBinding,\r \t\tIProblem[] problems)", "signatureAfterChange": "\r \tpublic void addProblemMethod(\r \t\tAbstractMethodDeclaration method,\r \t\tMethodBinding methodBinding,\r \t\tIProblem[] problems)", "diff": ["-\t\t// leave two spaces for the number of attributes\r", "-\t\tint attributeOffset = contentsOffset;\r", "-\t\tcontentsOffset += 2;\r", "-\t\tReferenceBinding[] thrownsExceptions;\r", "-\t\tint attributeNumber = 0;\r", "-\t\tint contentsLength;\r", "-\r", "-\t\tif ((thrownsExceptions = methodBinding.thrownExceptions) != NoExceptions) {\r", "-\t\t\t// The method has a throw clause. So we need to add an exception attribute\r", "-\t\t\t// check that there is enough space to write all the bytes for the exception attribute\r", "-\t\t\tint length = thrownsExceptions.length;\r", "-\t\t\tif (contentsOffset + (8 + length * 2) >= (contentsLength = contents.length)) {\r", "-\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\tcontents,\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\t(contents =\r", "-\t\t\t\t\t\tnew byte[contentsLength + Math.max(INCREMENT_SIZE, (8 + length * 2))]),\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\tcontentsLength);\r", "-\t\t\t}\r", "-\t\t\tint exceptionNameIndex =\r", "-\t\t\t\tconstantPool.literalIndex(AttributeNamesConstants.ExceptionsName);\r", "-\t\t\tcontents[contentsOffset++] = (byte) (exceptionNameIndex >> 8);\r", "-\t\t\tcontents[contentsOffset++] = (byte) exceptionNameIndex;\r", "-\t\t\t// The attribute length = length * 2 + 2 in case of a exception attribute\r", "-\t\t\tint attributeLength = length * 2 + 2;\r", "-\t\t\tcontents[contentsOffset++] = (byte) (attributeLength >> 24);\r", "-\t\t\tcontents[contentsOffset++] = (byte) (attributeLength >> 16);\r", "-\t\t\tcontents[contentsOffset++] = (byte) (attributeLength >> 8);\r", "-\t\t\tcontents[contentsOffset++] = (byte) attributeLength;\r", "-\t\t\tcontents[contentsOffset++] = (byte) (length >> 8);\r", "-\t\t\tcontents[contentsOffset++] = (byte) length;\r", "-\t\t\tfor (int i = 0; i < length; i++) {\r", "-\t\t\t\tint exceptionIndex = constantPool.literalIndex(thrownsExceptions[i]);\r", "-\t\t\t\tcontents[contentsOffset++] = (byte) (exceptionIndex >> 8);\r", "-\t\t\t\tcontents[contentsOffset++] = (byte) exceptionIndex;\r", "-\t\t\t}\r", "-\t\t\tattributeNumber++;\r", "-\t\t}\r", "-\r", "-\t\t// Deprecated attribute\r", "-\t\t// Check that there is enough space to write the deprecated attribute\r", "-\t\tif (contentsOffset + 6 >= (contentsLength = contents.length)) {\r", "-\t\t\tSystem.arraycopy(\r", "-\t\t\t\tcontents,\r", "-\t\t\t\t0,\r", "-\t\t\t\t(contents = new byte[contentsLength + INCREMENT_SIZE]),\r", "-\t\t\t\t0,\r", "-\t\t\t\tcontentsLength);\r", "-\t\t}\r", "-\t\tif (methodBinding.isDeprecated()) {\r", "-\t\t\tint deprecatedAttributeNameIndex =\r", "-\t\t\t\tconstantPool.literalIndex(AttributeNamesConstants.DeprecatedName);\r", "-\t\t\tcontents[contentsOffset++] = (byte) (deprecatedAttributeNameIndex >> 8);\r", "-\t\t\tcontents[contentsOffset++] = (byte) deprecatedAttributeNameIndex;\r", "-\t\t\t// the length of a deprecated attribute is equals to 0\r", "-\t\t\tcontents[contentsOffset++] = 0;\r", "-\t\t\tcontents[contentsOffset++] = 0;\r", "-\t\t\tcontents[contentsOffset++] = 0;\r", "-\t\t\tcontents[contentsOffset++] = 0;\r", "-\r", "-\t\t\tattributeNumber++;\r", "-\t\t}\r", "-\r", "+\t\tint methodAttributeOffset = contentsOffset;\r", "+\t\tint attributeNumber = generateMethodInfoAttribute(methodBinding);\r", "+\t\t\r", "+\t\t// Code attribute\r", "+\t\tattributeNumber++;\r", "+\t\t\r", "-\t\tattributeNumber++; // code attribute\r", "-\t\tcontents[attributeOffset++] = (byte) (attributeNumber >> 8);\r", "-\t\tcontents[attributeOffset] = (byte) attributeNumber;\r", "+\t\tcompleteMethodInfo(methodAttributeOffset, attributeNumber);\r"]}], "num": 65813}
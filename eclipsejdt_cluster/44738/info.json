{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc9d0c9cf71a9b30cef40159182b64bd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18d13275262be5b331cdede6ab23a64c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "702c62fec0923d7526ca23efea5c1bb4f5a2ef27", "commitAfterChange": "48a78bfcb529886e24e5f62b1bc56f7d3678e46a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope, boolean isExceptionOnAutoClose)", "signatureAfterChange": " public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope, boolean isExceptionOnAutoClose)", "diff": ["+\t\t\t\tboolean shouldMergeUnhandledExceptions = exceptionContext instanceof ExceptionInferenceFlowContext;", "-\t\t\t\tif (exceptionContext.associatedNode instanceof AbstractMethodDeclaration){", "+\t\t\t\tif (exceptionContext.associatedNode instanceof AbstractMethodDeclaration) {", "-\t\t\t\t\tif (method.isConstructor() && method.binding.declaringClass.isAnonymousType()){", "-", "-\t\t\t\t\t\texceptionContext.mergeUnhandledException(raisedException);", "-\t\t\t\t\t\treturn; // no need to complain, will fix up constructor exceptions", "-\t\t\t\t\t}", "+\t\t\t\t\tif (method.isConstructor() && method.binding.declaringClass.isAnonymousType())", "+\t\t\t\t\t\tshouldMergeUnhandledExceptions = true;", "+\t\t\t\t}", "+\t\t\t\tif (shouldMergeUnhandledExceptions) {", "+\t\t\t\t\texceptionContext.mergeUnhandledException(raisedException);", "+\t\t\t\t\treturn; // no need to complain, will fix up constructor/lambda exceptions"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea0cc6bb8501572e47d9fe2f7eb9ec61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "702c62fec0923d7526ca23efea5c1bb4f5a2ef27", "commitAfterChange": "48a78bfcb529886e24e5f62b1bc56f7d3678e46a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void checkExceptionHandlers(TypeBinding[] raisedExceptions, ASTNode location, FlowInfo flowInfo, BlockScope scope)", "signatureAfterChange": "  public void checkExceptionHandlers(TypeBinding[] raisedExceptions, ASTNode location, FlowInfo flowInfo, BlockScope scope)", "diff": ["+\t\t\t\tboolean shouldMergeUnhandledException = exceptionContext instanceof ExceptionInferenceFlowContext;", "-\t\t\t\tif (exceptionContext.associatedNode instanceof AbstractMethodDeclaration){", "+\t\t\t\tif (exceptionContext.associatedNode instanceof AbstractMethodDeclaration) {", "-\t\t\t\t\tif (method.isConstructor() && method.binding.declaringClass.isAnonymousType()){", "-", "-\t\t\t\t\t\tfor (int i = 0; i < raisedCount; i++) {", "-\t\t\t\t\t\t\tTypeBinding raisedException;", "-\t\t\t\t\t\t\tif ((raisedException = raisedExceptions[i]) != null) {", "-\t\t\t\t\t\t\t\texceptionContext.mergeUnhandledException(raisedException);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\tif (method.isConstructor() && method.binding.declaringClass.isAnonymousType())", "+\t\t\t\t\t\tshouldMergeUnhandledException = true;", "+\t\t\t\t}", "+\t\t\t\tif (shouldMergeUnhandledException) {", "+\t\t\t\t\tfor (int i = 0; i < raisedCount; i++) {", "+\t\t\t\t\t\tTypeBinding raisedException;", "+\t\t\t\t\t\tif ((raisedException = raisedExceptions[i]) != null) {", "+\t\t\t\t\t\t\texceptionContext.mergeUnhandledException(raisedException);", "-\t\t\t\t\t\treturn; // no need to complain, will fix up constructor exceptions", "+\t\t\t\t\treturn; // no need to complain, will fix up constructor/lambda exceptions"]}], "num": 44738}
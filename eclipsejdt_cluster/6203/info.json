{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee1c4deb72dad69a4e8a4e4ba9c5f503", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12ec83edd8404cf9100a05c7912fefe8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "7a9c0666eb2e26d6f63c1d37d496287d2df152d0", "commitAfterChange": "0c3f540ce1fe9929593a8b5509ca781a32c3ede2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate static void decodeUnknownNode(Node node, XMLWriter xmlWriter, boolean insertNewLine)", "signatureAfterChange": "  \tprivate static void decodeUnknownNode(Node node, XMLWriter xmlWriter, boolean insertNewLine)", "diff": ["-\t\t\tNamedNodeMap attributes = node.getAttributes();", "-\t\t\tHashMap parameters = new HashMap();", "-\t\t\tfor (int i = 0, length = attributes == null ? 0 : attributes.getLength(); i < length; i++) {", "-\t\t\t\tNode attribute = attributes.item(i);", "-\t\t\t\tparameters.put(attribute.getNodeName(), attribute.getNodeValue());", "+\t\t\tNamedNodeMap attributes;", "+\t\t\tHashMap parameters = null;", "+\t\t\tif ((attributes = node.getAttributes()) != null) {", "+\t\t\t\tint length = attributes.getLength();", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tparameters = new HashMap();", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tNode attribute = attributes.item(i);", "+\t\t\t\t\t\tparameters.put(attribute.getNodeName(), attribute.getNodeValue());", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55d3b5d0391853228f14f8a66d79061e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "7a9c0666eb2e26d6f63c1d37d496287d2df152d0", "commitAfterChange": "0c3f540ce1fe9929593a8b5509ca781a32c3ede2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " static AnnotationBinding createAnnotation(IBinaryAnnotation annotationInfo, LookupEnvironment env)", "signatureAfterChange": " static AnnotationBinding createAnnotation(IBinaryAnnotation annotationInfo, LookupEnvironment env)", "diff": ["-\tint length = binaryPairs == null ? 0 : binaryPairs.length;", "-\tElementValuePair[] pairs = length == 0 ? Binding.NO_ELEMENT_VALUE_PAIRS : new ElementValuePair[length];", "-\tfor (int i = 0; i < length; i++)", "-\t\tpairs[i] = new ElementValuePair(binaryPairs[i].getName(), convertMemberValue(binaryPairs[i].getValue(), env), null);", "-", "+\tint length;", "+\tElementValuePair[] pairs;", "+\tif (binaryPairs == null || (length = binaryPairs.length) == 0) {", "+\t\tpairs = Binding.NO_ELEMENT_VALUE_PAIRS;", "+\t} else {", "+\t\tpairs = new ElementValuePair[length];", "+\t\tfor (int i = 0; i < length; i++)", "+\t\t\tpairs[i] = new ElementValuePair(binaryPairs[i].getName(), convertMemberValue(binaryPairs[i].getValue(), env), null);", "+\t}"]}], "num": 6203}
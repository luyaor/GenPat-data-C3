{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b1f8092ae5528325284844f8807439a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1715d1c9ca80bd43004b464c99ad3d96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "75e2dec6c40beb99004df5e9b441c0ff490527b5", "commitAfterChange": "6072925ab1af00c7091afbac8257e69ef61e2818", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " public ReferenceBinding[] superInterfaces()", "signatureAfterChange": " public ReferenceBinding[] superInterfaces()", "diff": ["+\t\t\t\tif (this.superInterfaces[i].isParameterizedType()) {", "+\t\t\t\t\tReferenceBinding superType = this.superInterfaces[i].actualType();", "+\t\t\t\t\tif (TypeBinding.equalsEquals(superType, this)) {", "+\t\t\t\t\t\tthis.tagBits |= TagBits.HierarchyHasProblems;", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "636e74e560f91697117ee59c0e7b79b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "d9396647e280a0cdb636c94fae9233a7a2475f6f", "commitAfterChange": "09617092d586fc57d56d7255b395176bf3d6b1e7", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "signatureAfterChange": "  \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "diff": ["+\t\t\t\t\tif (this.typeRoot instanceof ClassFileWorkingCopy) {", "+\t\t\t\t\t\t// special case: class file mimics as compilation unit, but that would use a wrong file name below, so better unwrap now:", "+\t\t\t\t\t\tthis.typeRoot = ((ClassFileWorkingCopy) this.typeRoot).classFile;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95fee47f0db6a64df406193d8e4a78b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "349c3b5a850fbdbf23ec6c6153a095f70d61338c", "commitAfterChange": "00a3f3c32948c64188954cac2f1e0a1305db911b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate boolean addConstraintsToC_OneExpr(Expression expri, Set<ConstraintFormula> c, TypeBinding fsi, TypeBinding substF, MethodBinding method, boolean interleaved) \t\t\tthrows InferenceFailureException", "signatureAfterChange": "  \tprivate boolean addConstraintsToC_OneExpr(Expression expri, Set<ConstraintFormula> c, TypeBinding fsi, TypeBinding substF, MethodBinding method, boolean interleaved) \t\t\tthrows InferenceFailureException", "diff": ["+\t\t\t\t\tif (!t.isProperType(true) && t.isParameterizedType()) {", "+\t\t\t\t\t\t// prevent already resolved inference variables from leaking into the lambda", "+\t\t\t\t\t\tt = (ReferenceBinding) Scope.substitute(getResultSubstitution(this.currentBounds, false), t);", "+\t\t\t\t\t}"]}], "num": 657}
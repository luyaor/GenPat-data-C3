{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "290771fe6380cd2c5c4e893fe2199bf1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a05fa6f6ab265328075dac26c74eff2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["+\t\t\t}", "+\t\t}", "+\t\tfinal Object alignmentForArgumentsInEnumConstantOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_ALIGNMENT_FOR_ARGUMENTS_IN_ENUM_CONSTANT);", "+\t\tif (alignmentForArgumentsInEnumConstantOption != null) {", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_arguments_in_enum_constant = Integer.parseInt((String) alignmentForArgumentsInEnumConstantOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_arguments_in_enum_constant = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_arguments_in_enum_constant = Alignment.M_COMPACT_SPLIT;", "+\t\tfinal Object alignmentForSuperinterfacesInEnumDeclarationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_ALIGNMENT_FOR_SUPERINTERFACES_IN_ENUM_DECLARATION);", "+\t\tif (alignmentForSuperinterfacesInEnumDeclarationOption != null) {", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_superinterfaces_in_enum_declaration = Integer.parseInt((String) alignmentForSuperinterfacesInEnumDeclarationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_superinterfaces_in_enum_declaration = Alignment.M_NEXT_SHIFTED_SPLIT;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.alignment_for_superinterfaces_in_enum_declaration = Alignment.M_NEXT_SHIFTED_SPLIT;", "+\t\t\t}", "+\t\t}", "+\t\t}", "+\t\tfinal Object bracePositionForAnnotationTypeDeclarationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ANNOTATION_TYPE_DECLARATION);", "+\t\tif (bracePositionForAnnotationTypeDeclarationOption != null) {", "+\t\t\ttry {", "+\t\t\t\tthis.brace_position_for_annotation_type_declaration = (String) bracePositionForAnnotationTypeDeclarationOption;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.brace_position_for_annotation_type_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tfinal Object bracePositionForEnumConstantOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ENUM_CONSTANT);", "+\t\tif (bracePositionForEnumConstantOption != null) {", "+\t\t\ttry {", "+\t\t\t\tthis.brace_position_for_enum_constant = (String) bracePositionForEnumConstantOption;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.brace_position_for_enum_constant = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t}", "+\t\t}", "+\t\tfinal Object bracePositionForEnumDeclarationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ENUM_DECLARATION);", "+\t\tif (bracePositionForEnumDeclarationOption != null) {", "+\t\t\ttry {", "+\t\t\t\tthis.brace_position_for_enum_declaration = (String) bracePositionForEnumDeclarationOption;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.brace_position_for_enum_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\tfinal Object indentBodyDeclarationsCompareToEnumConstantHeaderOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_ENUM_CONSTANT_HEADER);", "+\t\tif (indentBodyDeclarationsCompareToEnumConstantHeaderOption != null) {", "+\t\t\tthis.indent_body_declarations_compare_to_enum_constant_header = DefaultCodeFormatterConstants.TRUE.equals(indentBodyDeclarationsCompareToEnumConstantHeaderOption);", "+\t\t}", "+\t\tfinal Object indentBodyDeclarationsCompareToEnumDeclarationHeaderOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_ENUM_DECLARATION_HEADER);", "+\t\tif (indentBodyDeclarationsCompareToEnumDeclarationHeaderOption != null) {", "+\t\t\tthis.indent_body_declarations_compare_to_enum_declaration_header = DefaultCodeFormatterConstants.TRUE.equals(indentBodyDeclarationsCompareToEnumDeclarationHeaderOption);", "+\t\t}", "+\t\tfinal Object insertNewLineInEmptyEnumConstantOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ENUM_CONSTANT);", "+\t\tif (insertNewLineInEmptyEnumConstantOption != null) {", "+\t\t\tthis.insert_new_line_in_empty_enum_constant = JavaCore.INSERT.equals(insertNewLineInEmptyEnumConstantOption);", "+\t\t}", "+\t\tfinal Object insertNewLineInEmptyEnumDeclarationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ENUM_DECLARATION);", "+\t\tif (insertNewLineInEmptyEnumDeclarationOption != null) {", "+\t\t\tthis.insert_new_line_in_empty_enum_declaration = JavaCore.INSERT.equals(insertNewLineInEmptyEnumDeclarationOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterAndInWildcardOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_AND_IN_WILDCARD);", "+\t\tif (insertSpaceAfterAndInWildcardOption != null) {", "+\t\t\tthis.insert_space_after_and_in_wilcard = JavaCore.INSERT.equals(insertSpaceAfterAndInWildcardOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterAtInAnnotationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_AT_IN_ANNOTATION);", "+\t\tif (insertSpaceAfterAtInAnnotationOption != null) {", "+\t\t\tthis.insert_space_after_at_in_annotation = JavaCore.INSERT.equals(insertSpaceAfterAtInAnnotationOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterAtInAnnotationTypeDeclarationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_AT_IN_ANNOTATION_TYPE_DECLARATION);", "+\t\tif (insertSpaceAfterAtInAnnotationTypeDeclarationOption != null) {", "+\t\t\tthis.insert_space_after_at_in_annotation_type_declaration = JavaCore.INSERT.equals(insertSpaceAfterAtInAnnotationTypeDeclarationOption);", "+\t\t}", "+\t\t}", "+\t\tfinal Object insertSpaceAfterClosingAngleBracketInTypeArgumentsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_CLOSING_ANGLE_BRACKET_IN_TYPE_ARGUMENTS);", "+\t\tif (insertSpaceAfterClosingAngleBracketInTypeArgumentsOption != null) {", "+\t\t\tthis.insert_space_after_closing_angle_bracket_in_type_arguments = JavaCore.INSERT.equals(insertSpaceAfterClosingAngleBracketInTypeArgumentsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterClosingAngleBracketInTypeParametersOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_CLOSING_ANGLE_BRACKET_IN_TYPE_PARAMETERS);", "+\t\tif (insertSpaceAfterClosingAngleBracketInTypeParametersOption != null) {", "+\t\t\tthis.insert_space_after_closing_angle_bracket_in_type_parameters = JavaCore.INSERT.equals(insertSpaceAfterClosingAngleBracketInTypeParametersOption);", "+\t\tfinal Object insertSpaceAfterColonInForOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_FOR);", "+\t\tif (insertSpaceAfterColonInForOption != null) {", "+\t\t\tthis.insert_space_after_colon_in_for = JavaCore.INSERT.equals(insertSpaceAfterColonInForOption);", "+\t\t}", "+\t\t}", "+\t\tfinal Object insertSpaceAfterCommaInAnnotationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ANNOTATION);", "+\t\tif (insertSpaceAfterCommaInAnnotationOption != null) {", "+\t\t\tthis.insert_space_after_comma_in_annotation = JavaCore.INSERT.equals(insertSpaceAfterCommaInAnnotationOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterCommaInEnumConstantArgumentsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ENUM_CONSTANT_ARGUMENTS);", "+\t\tif (insertSpaceAfterCommaInEnumConstantArgumentsOption != null) {", "+\t\t\tthis.insert_space_after_comma_in_enum_constant_arguments = JavaCore.INSERT.equals(insertSpaceAfterCommaInEnumConstantArgumentsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterCommaInEnumDeclarationsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ENUM_DECLARATIONS);", "+\t\tif (insertSpaceAfterCommaInEnumDeclarationsOption != null) {", "+\t\t\tthis.insert_space_after_comma_in_enum_declarations = JavaCore.INSERT.equals(insertSpaceAfterCommaInEnumDeclarationsOption);", "+\t\tfinal Object insertSpaceAfterCommaInParameterizedTypeReferenceOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_PARAMETERIZED_TYPE_REFERENCE);", "+\t\tif (insertSpaceAfterCommaInParameterizedTypeReferenceOption != null) {", "+\t\t\tthis.insert_space_after_comma_in_parameterized_type_reference = JavaCore.INSERT.equals(insertSpaceAfterCommaInParameterizedTypeReferenceOption);", "+\t\t}", "+\t\t}", "+\t\tfinal Object insertSpaceAfterCommaInTypeArgumentsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_TYPE_ARGUMENTS);", "+\t\tif (insertSpaceAfterCommaInTypeArgumentsOption != null) {", "+\t\t\tthis.insert_space_after_comma_in_type_arguments = JavaCore.INSERT.equals(insertSpaceAfterCommaInTypeArgumentsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterCommaInTypeParametersOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_TYPE_PARAMETERS);", "+\t\tif (insertSpaceAfterCommaInTypeParametersOption != null) {", "+\t\t\tthis.insert_space_after_comma_in_type_parameters = JavaCore.INSERT.equals(insertSpaceAfterCommaInTypeParametersOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterOpeningAngleBracketInParameterizedTypeReferenceOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_ANGLE_BRACKET_IN_PARAMETERIZED_TYPE_REFERENCE);", "+\t\tif (insertSpaceAfterOpeningAngleBracketInParameterizedTypeReferenceOption != null) {", "+\t\t\tthis.insert_space_after_opening_angle_bracket_in_parameterized_type_reference = JavaCore.INSERT.equals(insertSpaceAfterOpeningAngleBracketInParameterizedTypeReferenceOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterOpeningAngleBracketInTypeArgumentsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_ANGLE_BRACKET_IN_TYPE_ARGUMENTS);", "+\t\tif (insertSpaceAfterOpeningAngleBracketInTypeArgumentsOption != null) {", "+\t\t\tthis.insert_space_after_opening_angle_bracket_in_type_arguments = JavaCore.INSERT.equals(insertSpaceAfterOpeningAngleBracketInTypeArgumentsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterOpeningAngleBracketInTypeParametersOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_ANGLE_BRACKET_IN_TYPE_PARAMETERS);", "+\t\tif (insertSpaceAfterOpeningAngleBracketInTypeParametersOption != null) {", "+\t\t\tthis.insert_space_after_opening_angle_bracket_in_type_parameters = JavaCore.INSERT.equals(insertSpaceAfterOpeningAngleBracketInTypeParametersOption);", "+\t\tfinal Object insertSpaceAfterOpeningParenInAnnotationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_ANNOTATION);", "+\t\tif (insertSpaceAfterOpeningParenInAnnotationOption != null) {", "+\t\t\tthis.insert_space_after_opening_paren_in_annotation = JavaCore.INSERT.equals(insertSpaceAfterOpeningParenInAnnotationOption);", "+\t\t}", "+\t\t}", "+\t\tfinal Object insertSpaceAfterOpeningParenInEnumConstantOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_ENUM_CONSTANT);", "+\t\tif (insertSpaceAfterOpeningParenInEnumConstantOption != null) {", "+\t\t\tthis.insert_space_after_opening_paren_in_enum_constant = JavaCore.INSERT.equals(insertSpaceAfterOpeningParenInEnumConstantOption);", "+\t\tfinal Object insertSpaceAfterQuestionInWildcardOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_QUESTION_IN_WILDCARD);", "+\t\tif (insertSpaceAfterQuestionInWildcardOption != null) {", "+\t\t\tthis.insert_space_after_question_in_wilcard = JavaCore.INSERT.equals(insertSpaceAfterQuestionInWildcardOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeAndInWildcardOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_AND_IN_WILDCARD);", "+\t\tif (insertSpaceBeforeAndInWildcardOption != null) {", "+\t\t\tthis.insert_space_before_and_in_wilcard = JavaCore.INSERT.equals(insertSpaceBeforeAndInWildcardOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeAtInAnnotationTypeDeclarationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_AT_IN_ANNOTATION_TYPE_DECLARATION);", "+\t\tif (insertSpaceBeforeAtInAnnotationTypeDeclarationOption != null) {", "+\t\t\tthis.insert_space_before_at_in_annotation_type_declaration = JavaCore.INSERT.equals(insertSpaceBeforeAtInAnnotationTypeDeclarationOption);", "+\t\t}", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeClosingAngleBracketInParameterizedTypeReferenceOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_ANGLE_BRACKET_IN_PARAMETERIZED_TYPE_REFERENCE);", "+\t\tif (insertSpaceBeforeClosingAngleBracketInParameterizedTypeReferenceOption != null) {", "+\t\t\tthis.insert_space_before_closing_angle_bracket_in_parameterized_type_reference = JavaCore.INSERT.equals(insertSpaceBeforeClosingAngleBracketInParameterizedTypeReferenceOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeClosingAngleBracketInTypeArgumentsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_ANGLE_BRACKET_IN_TYPE_ARGUMENTS);", "+\t\tif (insertSpaceBeforeClosingAngleBracketInTypeArgumentsOption != null) {", "+\t\t\tthis.insert_space_before_closing_angle_bracket_in_type_arguments = JavaCore.INSERT.equals(insertSpaceBeforeClosingAngleBracketInTypeArgumentsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeClosingAngleBracketInTypeParametersOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_ANGLE_BRACKET_IN_TYPE_PARAMETERS);", "+\t\tif (insertSpaceBeforeClosingAngleBracketInTypeParametersOption != null) {", "+\t\t\tthis.insert_space_before_closing_angle_bracket_in_type_parameters = JavaCore.INSERT.equals(insertSpaceBeforeClosingAngleBracketInTypeParametersOption);", "+\t\tfinal Object insertSpaceBeforeClosingParenInAnnotationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_ANNOTATION);", "+\t\tif (insertSpaceBeforeClosingParenInAnnotationOption != null) {", "+\t\t\tthis.insert_space_before_closing_paren_in_annotation = JavaCore.INSERT.equals(insertSpaceBeforeClosingParenInAnnotationOption);", "+\t\t}", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeClosingParenInEnumConstantOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_ENUM_CONSTANT);", "+\t\tif (insertSpaceBeforeClosingParenInEnumConstantOption != null) {", "+\t\t\tthis.insert_space_before_closing_paren_in_enum_constant = JavaCore.INSERT.equals(insertSpaceBeforeClosingParenInEnumConstantOption);", "+\t\tfinal Object insertSpaceBeforeColonInForOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_FOR);", "+\t\tif (insertSpaceBeforeColonInForOption != null) {", "+\t\t\tthis.insert_space_before_colon_in_for = JavaCore.INSERT.equals(insertSpaceBeforeColonInForOption);", "+\t\t}", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeCommaInAnnotationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ANNOTATION);", "+\t\tif (insertSpaceBeforeCommaInAnnotationOption != null) {", "+\t\t\tthis.insert_space_before_comma_in_annotation = JavaCore.INSERT.equals(insertSpaceBeforeCommaInAnnotationOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeCommaInEnumConstantArgumentsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ENUM_CONSTANT_ARGUMENTS);", "+\t\tif (insertSpaceBeforeCommaInEnumConstantArgumentsOption != null) {", "+\t\t\tthis.insert_space_before_comma_in_enum_constant_arguments = JavaCore.INSERT.equals(insertSpaceBeforeCommaInEnumConstantArgumentsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeCommaInEnumDeclarationsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ENUM_DECLARATIONS);", "+\t\tif (insertSpaceBeforeCommaInEnumDeclarationsOption != null) {", "+\t\t\tthis.insert_space_before_comma_in_enum_declarations = JavaCore.INSERT.equals(insertSpaceBeforeCommaInEnumDeclarationsOption);", "+\t\tfinal Object insertSpaceBeforeCommaInParameterizedTypeReferenceOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_PARAMETERIZED_TYPE_REFERENCE);", "+\t\tif (insertSpaceBeforeCommaInParameterizedTypeReferenceOption != null) {", "+\t\t\tthis.insert_space_before_comma_in_parameterized_type_reference = JavaCore.INSERT.equals(insertSpaceBeforeCommaInParameterizedTypeReferenceOption);", "+\t\t}", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeCommaInTypeArgumentsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_TYPE_ARGUMENTS);", "+\t\tif (insertSpaceBeforeCommaInTypeArgumentsOption != null) {", "+\t\t\tthis.insert_space_before_comma_in_type_arguments = JavaCore.INSERT.equals(insertSpaceBeforeCommaInTypeArgumentsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeCommaInTypeParametersOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_TYPE_PARAMETERS);", "+\t\tif (insertSpaceBeforeCommaInTypeParametersOption != null) {", "+\t\t\tthis.insert_space_before_comma_in_type_parameters = JavaCore.INSERT.equals(insertSpaceBeforeCommaInTypeParametersOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeOpeningAngleBrackerInParameterizedTypeReferenceOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_ANGLE_BRACKET_IN_PARAMETERIZED_TYPE_REFERENCE);", "+\t\tif (insertSpaceBeforeOpeningAngleBrackerInParameterizedTypeReferenceOption != null) {", "+\t\t\tthis.insert_space_before_opening_angle_bracket_in_parameterized_type_reference = JavaCore.INSERT.equals(insertSpaceBeforeOpeningAngleBrackerInParameterizedTypeReferenceOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeOpeningAngleBrackerInTypeArgumentsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_ANGLE_BRACKET_IN_TYPE_ARGUMENTS);", "+\t\tif (insertSpaceBeforeOpeningAngleBrackerInTypeArgumentsOption != null) {", "+\t\t\tthis.insert_space_before_opening_angle_bracket_in_type_arguments = JavaCore.INSERT.equals(insertSpaceBeforeOpeningAngleBrackerInTypeArgumentsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeOpeningAngleBrackerInTypeParametersOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_ANGLE_BRACKET_IN_TYPE_PARAMETERS);", "+\t\tif (insertSpaceBeforeOpeningAngleBrackerInTypeParametersOption != null) {", "+\t\t\tthis.insert_space_before_opening_angle_bracket_in_type_parameters = JavaCore.INSERT.equals(insertSpaceBeforeOpeningAngleBrackerInTypeParametersOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeOpeningBraceInAnnotationTypeDeclarationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ANNOTATION_TYPE_DECLARATION);", "+\t\tif (insertSpaceBeforeOpeningBraceInAnnotationTypeDeclarationOption != null) {", "+\t\t\tthis.insert_space_before_opening_brace_in_annotation_type_declaration = JavaCore.INSERT.equals(insertSpaceBeforeOpeningBraceInAnnotationTypeDeclarationOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeOpeningBraceInEnumDeclarationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ENUM_DECLARATION);", "+\t\tif (insertSpaceBeforeOpeningBraceInEnumDeclarationOption != null) {", "+\t\t\tthis.insert_space_before_opening_brace_in_enum_declaration = JavaCore.INSERT.equals(insertSpaceBeforeOpeningBraceInEnumDeclarationOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeOpeningBraceInEnumConstantOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ENUM_CONSTANT);", "+\t\tif (insertSpaceBeforeOpeningBraceInEnumConstantOption != null) {", "+\t\t\tthis.insert_space_before_opening_brace_in_enum_constant = JavaCore.INSERT.equals(insertSpaceBeforeOpeningBraceInEnumConstantOption);", "+\t\tfinal Object insertSpaceBeforeOpeningParenInAnnotationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_ANNOTATION);", "+\t\tif (insertSpaceBeforeOpeningParenInAnnotationOption != null) {", "+\t\t\tthis.insert_space_before_opening_paren_in_annotation = JavaCore.INSERT.equals(insertSpaceBeforeOpeningParenInAnnotationOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeOpeningParenInAnnotationTypeMemberDeclarationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_ANNOTATION_TYPE_MEMBER_DECLARATION);", "+\t\tif (insertSpaceBeforeOpeningParenInAnnotationTypeMemberDeclarationOption != null) {", "+\t\t\tthis.insert_space_before_opening_paren_in_annotation_type_member_declaration = JavaCore.INSERT.equals(insertSpaceBeforeOpeningParenInAnnotationTypeMemberDeclarationOption);", "+\t\t}", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeOpeningParenInEnumConstantOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_ENUM_CONSTANT);", "+\t\tif (insertSpaceBeforeOpeningParenInEnumConstantOption != null) {", "+\t\t\tthis.insert_space_before_opening_paren_in_enum_constant = JavaCore.INSERT.equals(insertSpaceBeforeOpeningParenInEnumConstantOption);", "+\t\tfinal Object insertSpaceBeforeQuestionInWildcardOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_QUESTION_IN_WILDCARD);", "+\t\tif (insertSpaceBeforeQuestionInWildcardOption != null) {", "+\t\t\tthis.insert_space_before_question_in_wilcard = JavaCore.INSERT.equals(insertSpaceBeforeQuestionInWildcardOption);", "+\t\t}", "+\t\t}", "+\t\tfinal Object insertSpaceBetweenEmptyParensInAnnotationTypeMemberDeclarationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_ANNOTATION_TYPE_MEMBER_DECLARATION);", "+\t\tif (insertSpaceBetweenEmptyParensInAnnotationTypeMemberDeclarationOption != null) {", "+\t\t\tthis.insert_space_between_empty_parens_in_annotation_type_member_declaration = JavaCore.INSERT.equals(insertSpaceBetweenEmptyParensInAnnotationTypeMemberDeclarationOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBetweenEmptyParensInEnumConstantOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_ENUM_CONSTANT);", "+\t\tif (insertSpaceBetweenEmptyParensInEnumConstantOption != null) {", "+\t\t\tthis.insert_space_between_empty_parens_in_enum_constant = JavaCore.INSERT.equals(insertSpaceBetweenEmptyParensInEnumConstantOption);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7663e3324ea7799af1ed0ee9c613311", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "4a64f2fcadd24cb17347438e74b1d8c3d7a392ab", "commitAfterChange": "9c860c5f11e6f2202ddf677d9857a86101049060", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["-\t\t\tthis.alignment_for_arguments_in_allocation_expression = Integer.parseInt((String) alignmentForArgumentsInAllocationExpressionOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_arguments_in_allocation_expression = Integer.parseInt((String) alignmentForArgumentsInAllocationExpressionOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_arguments_in_allocation_expression = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_arguments_in_allocation_expression = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_arguments_in_explicit_constructor_call = Integer.parseInt((String) alignmentForArgumentsInExplicitConstructorCallOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_arguments_in_explicit_constructor_call = Integer.parseInt((String) alignmentForArgumentsInExplicitConstructorCallOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_arguments_in_explicit_constructor_call = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_arguments_in_explicit_constructor_call = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_arguments_in_method_invocation = Integer.parseInt((String) alignmentForArgumentsInMethodInvocationOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_arguments_in_method_invocation = Integer.parseInt((String) alignmentForArgumentsInMethodInvocationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_arguments_in_method_invocation = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_arguments_in_method_invocation = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_arguments_in_qualified_allocation_expression = Integer.parseInt((String) alignmentForArgumentsInQualifiedAllocationExpressionOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_arguments_in_qualified_allocation_expression = Integer.parseInt((String) alignmentForArgumentsInQualifiedAllocationExpressionOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_arguments_in_qualified_allocation_expression = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_arguments_in_qualified_allocation_expression = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_binary_expression = Integer.parseInt((String) alignmentForBinaryExpressionOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_binary_expression = Integer.parseInt((String) alignmentForBinaryExpressionOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_binary_expression =  Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_binary_expression =  Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_compact_if = Integer.parseInt((String) alignmentForCompactIfOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_compact_if = Integer.parseInt((String) alignmentForCompactIfOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_compact_if = Alignment.M_ONE_PER_LINE_SPLIT | Alignment.M_INDENT_BY_ONE;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_compact_if = Alignment.M_ONE_PER_LINE_SPLIT | Alignment.M_INDENT_BY_ONE;", "+\t\t\t}", "-\t\t\tthis.alignment_for_conditional_expression = Integer.parseInt((String) alignmentForConditionalExpressionOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_conditional_expression = Integer.parseInt((String) alignmentForConditionalExpressionOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_conditional_expression = Alignment.M_ONE_PER_LINE_SPLIT;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_conditional_expression = Alignment.M_ONE_PER_LINE_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_expressions_in_array_initializer = Integer.parseInt((String) alignmentForExpressionsInArrayInitializerOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_expressions_in_array_initializer = Integer.parseInt((String) alignmentForExpressionsInArrayInitializerOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_expressions_in_array_initializer = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_expressions_in_array_initializer = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_multiple_fields = Integer.parseInt((String) alignmentForMultipleFieldsOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_multiple_fields = Integer.parseInt((String) alignmentForMultipleFieldsOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_multiple_fields = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_multiple_fields = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_parameters_in_constructor_declaration = Integer.parseInt((String) alignmentForParametersInConstructorDeclarationOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_parameters_in_constructor_declaration = Integer.parseInt((String) alignmentForParametersInConstructorDeclarationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_parameters_in_constructor_declaration = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_parameters_in_constructor_declaration = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_parameters_in_method_declaration = Integer.parseInt((String) alignmentForParametersInMethodDeclarationOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_parameters_in_method_declaration = Integer.parseInt((String) alignmentForParametersInMethodDeclarationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_parameters_in_method_declaration = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.alignment_for_parameters_in_method_declaration = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_selector_in_method_invocation = Integer.parseInt((String) alignmentForSelectorInMethodInvocationOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_selector_in_method_invocation = Integer.parseInt((String) alignmentForSelectorInMethodInvocationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_selector_in_method_invocation = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.alignment_for_selector_in_method_invocation = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_superclass_in_type_declaration = Integer.parseInt((String) alignmentForSuperclassInTypeDeclarationOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_superclass_in_type_declaration = Integer.parseInt((String) alignmentForSuperclassInTypeDeclarationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_superclass_in_type_declaration = Alignment.M_NEXT_SHIFTED_SPLIT;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.alignment_for_superclass_in_type_declaration = Alignment.M_NEXT_SHIFTED_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_superinterfaces_in_type_declaration = Integer.parseInt((String) alignmentForSuperinterfacesInTypeDeclarationOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_superinterfaces_in_type_declaration = Integer.parseInt((String) alignmentForSuperinterfacesInTypeDeclarationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_superinterfaces_in_type_declaration = Alignment.M_NEXT_SHIFTED_SPLIT;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.alignment_for_superinterfaces_in_type_declaration = Alignment.M_NEXT_SHIFTED_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_throws_clause_in_constructor_declaration = Integer.parseInt((String) alignmentForThrowsClauseInConstructorDeclarationOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_throws_clause_in_constructor_declaration = Integer.parseInt((String) alignmentForThrowsClauseInConstructorDeclarationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_throws_clause_in_constructor_declaration = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.alignment_for_throws_clause_in_constructor_declaration = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_throws_clause_in_method_declaration = Integer.parseInt((String) alignmentForThrowsClauseInMethodDeclarationOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_throws_clause_in_method_declaration = Integer.parseInt((String) alignmentForThrowsClauseInMethodDeclarationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_throws_clause_in_method_declaration = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.alignment_for_throws_clause_in_method_declaration = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.brace_position_for_anonymous_type_declaration = (String) bracePositionForAnonymousTypeDeclarationOption;", "+\t\t\ttry {", "+\t\t\t\tthis.brace_position_for_anonymous_type_declaration = (String) bracePositionForAnonymousTypeDeclarationOption;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.brace_position_for_anonymous_type_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t}", "-\t\t\tthis.brace_position_for_array_initializer = (String) bracePositionForArrayInitializerOption;", "+\t\t\ttry {", "+\t\t\t\tthis.brace_position_for_array_initializer = (String) bracePositionForArrayInitializerOption;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.brace_position_for_array_initializer = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t}", "-\t\t\tthis.brace_position_for_block = (String) bracePositionForBlockOption;", "+\t\t\ttry {", "+\t\t\t\tthis.brace_position_for_block = (String) bracePositionForBlockOption;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.brace_position_for_block = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t}", "-\t\t\tthis.brace_position_for_constructor_declaration = (String) bracePositionForConstructorDeclarationOption;", "+\t\t\ttry {", "+\t\t\t\tthis.brace_position_for_constructor_declaration = (String) bracePositionForConstructorDeclarationOption;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.brace_position_for_constructor_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t}", "-\t\t\tthis.brace_position_for_method_declaration = (String) bracePositionForMethodDeclarationOption;", "-\t\t}", "-\t\tfinal Object bracePositionForTypeDeclarationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_TYPE_DECLARATION);", "-\t\tif (bracePositionForTypeDeclarationOption != null) {", "-\t\t\tthis.brace_position_for_type_declaration = (String) bracePositionForTypeDeclarationOption;", "+\t\t\ttry {", "+\t\t\t\tthis.brace_position_for_method_declaration = (String) bracePositionForMethodDeclarationOption;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.brace_position_for_method_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t}", "-\t\t\tthis.brace_position_for_switch = (String) bracePositionForSwitchOption;", "+\t\t\ttry {", "+\t\t\t\tthis.brace_position_for_switch = (String) bracePositionForSwitchOption;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.brace_position_for_switch = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t}", "+\t\t}", "+\t\tfinal Object bracePositionForTypeDeclarationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_TYPE_DECLARATION);", "+\t\tif (bracePositionForTypeDeclarationOption != null) {", "+\t\t\ttry {", "+\t\t\t\tthis.brace_position_for_type_declaration = (String) bracePositionForTypeDeclarationOption;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.brace_position_for_type_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t}", "-\t\t\tthis.continuation_indentation = Integer.parseInt((String) continuationIndentationOption);", "+\t\t\ttry {", "+\t\t\t\tthis.continuation_indentation = Integer.parseInt((String) continuationIndentationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.continuation_indentation = 2;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.continuation_indentation = 2;", "+\t\t\t}", "-\t\t\tthis.continuation_indentation_for_array_initializer = Integer.parseInt((String) continuationIndentationForArrayInitializerOption);", "+\t\t\ttry {", "+\t\t\t\tthis.continuation_indentation_for_array_initializer = Integer.parseInt((String) continuationIndentationForArrayInitializerOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.continuation_indentation_for_array_initializer = 2;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.continuation_indentation_for_array_initializer = 2;", "+\t\t\t}", "-\t\t\tthis.blank_lines_after_imports = Integer.parseInt((String) blankLinesAfterImportsOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_after_imports = Integer.parseInt((String) blankLinesAfterImportsOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_after_imports = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_after_imports = 0;", "+\t\t\t}", "-\t\t\tthis.blank_lines_after_package = Integer.parseInt((String) blankLinesAfterPackageOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_after_package = Integer.parseInt((String) blankLinesAfterPackageOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_after_package = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_after_package = 0;", "+\t\t\t}", "-\t\t\tthis.blank_lines_before_field = Integer.parseInt((String) blankLinesBeforeFieldOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_before_field = Integer.parseInt((String) blankLinesBeforeFieldOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_before_field = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_before_field = 0;", "+\t\t\t}", "-\t\t\tthis.blank_lines_before_first_class_body_declaration = Integer.parseInt((String) blankLinesBeforeFirstClassBodyDeclarationOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_before_first_class_body_declaration = Integer.parseInt((String) blankLinesBeforeFirstClassBodyDeclarationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_before_first_class_body_declaration = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_before_first_class_body_declaration = 0;", "+\t\t\t}", "-\t\t\tthis.blank_lines_before_imports = Integer.parseInt((String) blankLinesBeforeImportsOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_before_imports = Integer.parseInt((String) blankLinesBeforeImportsOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_before_imports = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_before_imports = 0;", "+\t\t\t}", "-\t\t\tthis.blank_lines_before_member_type = Integer.parseInt((String) blankLinesBeforeMemberTypeOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_before_member_type = Integer.parseInt((String) blankLinesBeforeMemberTypeOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_before_member_type = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_before_member_type = 0;", "+\t\t\t}", "-\t\t\tthis.blank_lines_before_method = Integer.parseInt((String) blankLinesBeforeMethodOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_before_method = Integer.parseInt((String) blankLinesBeforeMethodOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_before_method = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_before_method = 0;", "+\t\t\t}", "-\t\t\tthis.blank_lines_before_new_chunk = Integer.parseInt((String) blankLinesBeforeNewChunkOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_before_new_chunk = Integer.parseInt((String) blankLinesBeforeNewChunkOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_before_new_chunk = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_before_new_chunk = 0;", "+\t\t\t}", "-\t\t\tthis.blank_lines_before_package = Integer.parseInt((String) blankLinesBeforePackageOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_before_package = Integer.parseInt((String) blankLinesBeforePackageOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_before_package = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_before_package = 0;", "+\t\t\t}", "-\t\t\tthis.blank_lines_between_type_declarations = Integer.parseInt((String) blankLinesBetweenTypeDeclarationsOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_between_type_declarations = Integer.parseInt((String) blankLinesBetweenTypeDeclarationsOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_between_type_declarations = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_between_type_declarations = 0;", "+\t\t\t}", "-\t\t\tthis.blank_lines_at_beginning_of_method_body = Integer.parseInt((String) blankLinesAtBeginningOfMethodBodyOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_at_beginning_of_method_body = Integer.parseInt((String) blankLinesAtBeginningOfMethodBodyOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_at_beginning_of_method_body = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_at_beginning_of_method_body = 0;", "+\t\t\t}", "-\t\t\tthis.number_of_empty_lines_to_preserve = Integer.parseInt((String) numberOfEmptyLinesToPreserveOption);", "+\t\t\ttry {", "+\t\t\t\tthis.number_of_empty_lines_to_preserve = Integer.parseInt((String) numberOfEmptyLinesToPreserveOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.number_of_empty_lines_to_preserve = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.number_of_empty_lines_to_preserve = 0;", "+\t\t\t}", "-\t\t\tthis.tab_size = Integer.parseInt((String) tabSizeOption);", "+\t\t\ttry {", "+\t\t\t\tthis.tab_size = Integer.parseInt((String) tabSizeOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.tab_size = 4;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.tab_size = 4;", "+\t\t\t}", "-\t\t\tthis.filling_space = ((String) fillingSpaceOption).charAt(0);", "+\t\t\ttry {", "+\t\t\t\tthis.filling_space = ((String) fillingSpaceOption).charAt(0);", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.filling_space = ' ';", "+\t\t\t}", "-\t\t\tthis.page_width = Integer.parseInt((String) pageWidthOption);", "+\t\t\ttry {", "+\t\t\t\tthis.page_width = Integer.parseInt((String) pageWidthOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.page_width = 80;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.page_width = 80;", "+\t\t\t}"]}], "num": 12735}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5cac2b27bc3aa804e7a387d71126c1b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ec4558f962d9e88fa4dbd29ccf6d588", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 474, "methodNumberAfterChange": 474, "signatureBeforeChange": " \tpublic void test470()", "signatureAfterChange": " \tpublic void test470()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tComparable s1 = choose(true, \\\"string\\\", new Integer(1));\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tComparable s3 = choose(true, new Integer(1), new Float(2));\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 13)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "588bb64da1fac8900bfeb01a80e79891", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic void test063()", "signatureAfterChange": " \tpublic void test063()", "diff": ["+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX x = new X(args);\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX x = new X(args);\\n\" + ", "+\t\t\t\"\t          ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 8)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "812328697986c719fe77ac38f1c74e98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 667, "methodNumberAfterChange": 667, "signatureBeforeChange": " public void test663()", "signatureAfterChange": " public void test663()", "diff": ["+\t\t\"\t^^^^\\n\" + ", "+\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\"\tList l = (List<U>) lv;\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\"\tList l = (List<List<U>>) lv;\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 11)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a414bb554267a77dab7b269606acca19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "bea7b508525f70d680963772996546f2bcf8018f", "commitAfterChange": "6612336f81825afdf894aa053e2e886c83842e87", "methodNumberBeforeChange": 166, "methodNumberAfterChange": 166, "signatureBeforeChange": " public void test401845a()", "signatureAfterChange": " public void test401845a()", "diff": ["+\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\"The method foo(I[]...) in the type X is not applicable for the arguments (X::goo)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tfoo(X::goo);\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tfoo((x)-> {return 10;});\\n\" + ", "+\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\"The method foo(I[]...) in the type X is not applicable for the arguments ((<no type> x) -> {\\n\" + ", "+\t\t\t\"  return 10;\\n\" + ", "+\t\t\t\"})\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be8600e13c51f3ca8a3377382064df82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1380, "methodNumberAfterChange": 1380, "signatureBeforeChange": " public void test1349()", "signatureAfterChange": " public void test1349()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in Scratch.java (at line 2)\\n\" +", "-\t\t\t\"\tprivate Y rawObject = new Y();\\n\" +", "-\t\t\t\"\t        ^\\n\" +", "-\t\t\t\"Y is a raw type. References to generic type Y<S> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in Scratch.java (at line 2)\\n\" +", "-\t\t\t\"\tprivate Y rawObject = new Y();\\n\" +", "-\t\t\t\"\t                          ^\\n\" +", "-\t\t\t\"Y is a raw type. References to generic type Y<S> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. WARNING in Scratch.java (at line 4)\\n\" +", "-\t\t\t\"\tmethod(new X<Y<Z>>(), rawObject); // compile error in javac, unchecked conversion in Eclipse\\n\" +", "-\t\t\t\"\t                      ^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<Z>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. WARNING in Scratch.java (at line 5)\\n\" +", "-\t\t\t\"\tthis.<Y<Z>>method(new X<Y<Z>>(), rawObject); // unchecked warning in both\\n\" +", "-\t\t\t\"\t                                 ^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<Z>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in Scratch.java (at line 11)\\n\" +", "-\t\t\t\"\tclass Z { Zork z; }\\n\" +", "-\t\t\t\"\t          ^^^^\\n\" +", "-\t\t\t\"Zork cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in Scratch.java (at line 2)\\n\" + ", "+\t\t\t\"\tprivate Y rawObject = new Y();\\n\" + ", "+\t\t\t\"\t        ^\\n\" + ", "+\t\t\t\"Y is a raw type. References to generic type Y<S> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in Scratch.java (at line 2)\\n\" + ", "+\t\t\t\"\tprivate Y rawObject = new Y();\\n\" + ", "+\t\t\t\"\t                          ^\\n\" + ", "+\t\t\t\"Y is a raw type. References to generic type Y<S> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in Scratch.java (at line 4)\\n\" + ", "+\t\t\t\"\tmethod(new X<Y<Z>>(), rawObject); // compile error in javac, unchecked conversion in Eclipse\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation method(X<Y<Z>>, Y) of the generic method method(X<T>, T) of type Scratch\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in Scratch.java (at line 4)\\n\" + ", "+\t\t\t\"\tmethod(new X<Y<Z>>(), rawObject); // compile error in javac, unchecked conversion in Eclipse\\n\" + ", "+\t\t\t\"\t                      ^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<Z>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in Scratch.java (at line 5)\\n\" + ", "+\t\t\t\"\tthis.<Y<Z>>method(new X<Y<Z>>(), rawObject); // unchecked warning in both\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation method(X<Y<Z>>, Y) of the generic method method(X<T>, T) of type Scratch\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in Scratch.java (at line 5)\\n\" + ", "+\t\t\t\"\tthis.<Y<Z>>method(new X<Y<Z>>(), rawObject); // unchecked warning in both\\n\" + ", "+\t\t\t\"\t                                 ^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<Z>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in Scratch.java (at line 11)\\n\" + ", "+\t\t\t\"\tclass Z { Zork z; }\\n\" + ", "+\t\t\t\"\t          ^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + "]}], "num": 27651}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d99e0dbc2a70288e05fa4db7a9b0224b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42ebe8277550cce32b97869ccee3ba6f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "8a64589617f7b80b7f12bb3f773ab58c605663c7", "commitAfterChange": "6585c7471e2cc73387fb0d652a600f2678de9051", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate String probeFormatting(String source, int indentationLevel, int[] positions, String lineSeparator, Map options)", "signatureAfterChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "diff": ["-\tprivate String probeFormatting(String source, int indentationLevel, int[] positions, String lineSeparator, Map options) {", "-\t\tExpression expression = parseExpression(source.toCharArray(), options);", "+\tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length) {", "+\t\tExpression expression = parseExpression(source.toCharArray(), this.options);", "-\t\t\treturn internalFormatExpression(source, indentationLevel, positions, lineSeparator, options, expression);", "+\t\t\treturn internalFormatExpression(source, indentationLevel, lineSeparator, expression, offset, length);", "-\t\tConstructorDeclaration constructorDeclaration = parseStatements(source.toCharArray(), options);", "+\t\tConstructorDeclaration constructorDeclaration = parseStatements(source.toCharArray(), this.options);", "-\t\t\treturn internalFormatStatements(source, indentationLevel, positions, lineSeparator, options, constructorDeclaration);", "+\t\t\treturn internalFormatStatements(source, indentationLevel, lineSeparator, constructorDeclaration, offset, length);", "-\t\tAstNode[] bodyDeclarations = parseClassBodyDeclarations(source.toCharArray(), options);", "+\t\tAstNode[] bodyDeclarations = parseClassBodyDeclarations(source.toCharArray(), this.options);", "-\t\t\treturn internalFormatClassBodyDeclarations(source, indentationLevel, positions, lineSeparator, options, bodyDeclarations);", "+\t\t\treturn internalFormatClassBodyDeclarations(source, indentationLevel, lineSeparator, bodyDeclarations, offset, length);", "-\t\treturn formatCompilationUnit(source, indentationLevel, positions, lineSeparator, options);", "+\t\treturn formatCompilationUnit(source, indentationLevel, lineSeparator, offset, length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e3a8fb97e027e34fd2965f0cc199e82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "605463bb98397b59c78b7fc56ee33e7e22fd8367", "commitAfterChange": "7428bd3b18a16b1860e6a1a28fbc6cd63967fdc6", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean formatJavadoc)", "signatureAfterChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments)", "diff": ["-\tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean formatJavadoc) {", "+\tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments) {", "-\t\t\t\t\t\treturn formatComment(K_MULTI_LINE_COMMENT, source, indentationLevel, lineSeparator, regions);", "+\t\t\t\t\t\treturn formatComment(K_MULTI_LINE_COMMENT, source, indentationLevel, lineSeparator, regions, includeComments);", "-\t\t\t\t\t\treturn formatComment(K_SINGLE_LINE_COMMENT, source, indentationLevel, lineSeparator, regions);", "+\t\t\t\t\t\treturn formatComment(K_SINGLE_LINE_COMMENT, source, indentationLevel, lineSeparator, regions, includeComments);", "-\t\t\t\t\t\t// bug 102780 - javadoc is formatted in a different manner", "-\t\t\t\t\t\treturn formatJavadoc(source, indentationLevel, lineSeparator, regions);", "+\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=102780", "+\t\t\t\t\t\t// use the integrated comment formatter to format comment", "+\t\t\t\t\t\tif (ENABLE_NEW_JAVADOC_FORMAT || FORCE_NEW_COMMENT_FORMAT) {", "+\t\t\t\t\t\t\treturn formatJavadoc(source, indentationLevel, lineSeparator, regions);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// In all other cases, use the old way to format javadoc comments", "+\t\t\t\t\t\tif (!PRINTED_OLD_JAVA_DOC_WARNING) {", "+\t\t\t\t\t\t\torg.eclipse.jdt.internal.core.util.Util.log(IStatus.WARNING, WARNING_JAVADOC_COMMENTS);", "+\t\t\t\t\t\t\tSystem.out.println(WARNING_JAVADOC_COMMENTS);", "+\t\t\t\t\t\t\tPRINTED_OLD_JAVA_DOC_WARNING = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn formatComment(K_JAVA_DOC, source, indentationLevel, lineSeparator, regions, includeComments);", "-\t\treturn formatCompilationUnit(source, indentationLevel, lineSeparator, regions, formatJavadoc);", "+\t\treturn formatCompilationUnit(source, indentationLevel, lineSeparator, regions, includeComments);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c10ff05ff164fbb563b8ed8c1b711f15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "54636126e97a957a9925b609910f59ea39210fc8", "commitAfterChange": "917603919e9d38772fd63709feb3bbda7696f523", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments)", "signatureAfterChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments)", "diff": ["+\t\t\tint kind = -1;", "-\t\t\t\t\t\treturn formatComment(K_MULTI_LINE_COMMENT, source, indentationLevel, lineSeparator, regions, includeComments);", "+\t\t\t\t\t\tkind = K_MULTI_LINE_COMMENT;", "-\t\t\t\t\t\treturn formatComment(K_SINGLE_LINE_COMMENT, source, indentationLevel, lineSeparator, regions, includeComments);", "+\t\t\t\t\t\tkind = K_SINGLE_LINE_COMMENT;", "-\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=102780", "-\t\t\t\t\t\t// use the integrated comment formatter to format comment", "-\t\t\t\t\t\tif (ENABLE_NEW_JAVADOC_FORMAT || FORCE_NEW_COMMENT_FORMAT) {", "-\t\t\t\t\t\t\treturn formatJavadoc(source, indentationLevel, lineSeparator, regions);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// In all other cases, use the old way to format javadoc comments", "-\t\t\t\t\t\tif (!PRINTED_OLD_JAVA_DOC_WARNING) {", "-\t\t\t\t\t\t\torg.eclipse.jdt.internal.core.util.Util.log(IStatus.WARNING, WARNING_JAVADOC_COMMENTS);", "-\t\t\t\t\t\t\tSystem.out.println(WARNING_JAVADOC_COMMENTS);", "-\t\t\t\t\t\t\tPRINTED_OLD_JAVA_DOC_WARNING = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn formatComment(K_JAVA_DOC, source, indentationLevel, lineSeparator, regions, includeComments);", "+\t\t\t\t\t\tkind = K_JAVA_DOC;", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (kind != -1) {", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=227043", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=102780", "+\t\t\t\t// use the integrated comment formatter to format comment", "+\t\t\t\tif (ENABLE_NEW_COMMENTS_FORMAT || FORCE_NEW_COMMENTS_FORMAT) {", "+\t\t\t\t\treturn formatComment(kind, source, indentationLevel, lineSeparator, regions);", "+\t\t\t\t}", "+\t\t\t\t// In all other cases, use the old way to format javadoc comments", "+\t\t\t\tif (!PRINTED_FORMAT_COMMENTS_WARNING) {", "+\t\t\t\t\tif (DEBUG) System.out.println(WARNING_FORMAT_COMMENTS);", "+\t\t\t\t\tPRINTED_FORMAT_COMMENTS_WARNING = true;", "+\t\t\t\t}", "+\t\t\t\treturn formatComment(kind, source, indentationLevel, lineSeparator, regions, includeComments);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8fbb7e455c136d835d6860f2517b191", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "9a8c0b7f51c1a0b9d37b7d38acb4d0261e31390a", "commitAfterChange": "278bd24e5aaae65022c9b0e7c10b22e5ffa034b6", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "signatureAfterChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions)", "diff": ["-\tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length) {", "+\tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions) {", "+\t\t", "+\t\tIRegion coveredRegion = getCoveredRegion(regions);", "+\t\tint offset = coveredRegion.getOffset();", "+\t\tint length = coveredRegion.getLength();", "+\t\t", "-\t\t\t\t\t\treturn formatComment(K_MULTI_LINE_COMMENT, source, indentationLevel, lineSeparator, offset, length);", "+\t\t\t\t\t\treturn formatComment(K_MULTI_LINE_COMMENT, source, indentationLevel, lineSeparator, regions);", "-\t\t\t\t\t\treturn formatComment(K_SINGLE_LINE_COMMENT, source, indentationLevel, lineSeparator, offset, length);", "+\t\t\t\t\t\treturn formatComment(K_SINGLE_LINE_COMMENT, source, indentationLevel, lineSeparator, regions);", "-\t\t\t\t\t\treturn formatComment(K_JAVA_DOC, source, indentationLevel, lineSeparator, offset, length);", "+\t\t\t\t\t\treturn formatComment(K_JAVA_DOC, source, indentationLevel, lineSeparator, regions);", "-\t\t\treturn internalFormatExpression(source, indentationLevel, lineSeparator, expression, offset, length);", "+\t\t\treturn internalFormatExpression(source, indentationLevel, lineSeparator, expression, regions);", "-\t\t\treturn internalFormatClassBodyDeclarations(source, indentationLevel, lineSeparator, bodyDeclarations, offset, length);", "+\t\t\treturn internalFormatClassBodyDeclarations(source, indentationLevel, lineSeparator, bodyDeclarations, regions);", "-\t\t\treturn internalFormatStatements(source, indentationLevel, lineSeparator, constructorDeclaration, offset, length);", "+\t\t\treturn internalFormatStatements(source, indentationLevel, lineSeparator, constructorDeclaration, regions);", "-\t\treturn formatCompilationUnit(source, indentationLevel, lineSeparator, offset, length);", "+\t\treturn formatCompilationUnit(source, indentationLevel, lineSeparator, regions);", "+\t}"]}], "num": 24629}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23401ed47e1a94897a6588c1595d6bca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "420582a5e3427e75cd161002f77ffadb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "330aeaad59d1633d10c0cd3a9ee9ac57073b385f", "commitAfterChange": "960ce528d76bd309a28ce655fc14cff77629ffa5", "methodNumberBeforeChange": 332, "methodNumberAfterChange": 332, "signatureBeforeChange": "   public int flushCommentsDefinedPriorTo(int position)", "signatureAfterChange": "   public int flushCommentsDefinedPriorTo(int position)", "diff": ["-\tif (validCount > 0){ // move valid comment infos, overriding obsolete comment infos", "-\t\tSystem.arraycopy(this.scanner.commentStarts, index + 1, this.scanner.commentStarts, 0, validCount);", "-\t\tSystem.arraycopy(this.scanner.commentStops, index + 1, this.scanner.commentStops, 0, validCount);\t\t", "+\tswitch (validCount) {", "+\t\tcase 0:", "+\t\t\t// do nothing", "+\t\t\tbreak;", "+\t\t// move valid comment infos, overriding obsolete comment infos", "+\t\tcase 2:", "+\t\t\tthis.scanner.commentStarts[0] = this.scanner.commentStarts[index+1];", "+\t\t\tthis.scanner.commentStops[0] = this.scanner.commentStops[index+1];", "+\t\t\tthis.scanner.commentTagStarts[0] = this.scanner.commentTagStarts[index+1];", "+\t\t\tthis.scanner.commentStarts[1] = this.scanner.commentStarts[index+2];", "+\t\t\tthis.scanner.commentStops[1] = this.scanner.commentStops[index+2];", "+\t\t\tthis.scanner.commentTagStarts[1] = this.scanner.commentTagStarts[index+2];", "+\t\t\tbreak;", "+\t\tcase 1:", "+\t\t\tthis.scanner.commentStarts[0] = this.scanner.commentStarts[index+1];", "+\t\t\tthis.scanner.commentStops[0] = this.scanner.commentStops[index+1];", "+\t\t\tthis.scanner.commentTagStarts[0] = this.scanner.commentTagStarts[index+1];", "+\t\t\tbreak;", "+\t\tdefault:", "+\t\t\tSystem.arraycopy(this.scanner.commentStarts, index + 1, this.scanner.commentStarts, 0, validCount);", "+\t\t\tSystem.arraycopy(this.scanner.commentStops, index + 1, this.scanner.commentStops, 0, validCount);\t\t", "+\t\t\tSystem.arraycopy(this.scanner.commentTagStarts, index + 1, this.scanner.commentTagStarts, 0, validCount);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "536a26a8580d4a288f444580daeb7345", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatterCommentParser.java", "commitBeforeChange": "e57e9e9b74a0efc06fcbf1fbb40dac7e7fed4c94", "commitAfterChange": "fed29f876dbd67e4d7770f5efdfd5f6894bd8a61", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " protected boolean parseHtmlTag(int previousPosition, int endTextPosition) throws InvalidInputException", "signatureAfterChange": " protected boolean parseHtmlTag(int previousPosition, int endTextPosition) throws InvalidInputException", "diff": ["+    int currentPosition = start;", "+    char firstChar = peekChar();", "+    boolean hasWhitespaces = firstChar == ' ' || ScannerHelper.isWhitespace(firstChar);", "+\t\t\t\tcurrentPosition = this.scanner.currentPosition;", "+\t\t\t\tcurrentPosition = this.scanner.currentPosition;", "-\t    if ((token = readTokenAndConsume()) != TerminalTokens.TokenNameGREATER) {", "-\t    \tif ((htmlIndex & JAVADOC_SPECIAL_TAGS_ID) == JAVADOC_SPECIAL_TAGS_ID) {", "-\t    \t\t// Special tags may have attributes, so consume tokens until the greater token is encountered", "-\t    \t\twhile (token != TerminalTokens.TokenNameGREATER) {", "-\t    \t\t\ttoken = readTokenAndConsume();", "-\t    \t\t\tif (token == TerminalTokens.TokenNameEOF) {", "-\t    \t\t\t\treturn false;", "-\t    \t\t\t}", "+\t    ", "+\t    // Looking for tag closing", "+\t    switch (token = readTokenAndConsume()) {", "+\t    \tcase TerminalTokens.TokenNameLESS:", "+\t    \tcase TerminalTokens.TokenNameLESS_EQUAL:", "+\t    \t\t// consider that the closing '>' is missing", "+\t    \t\treturn false;", "+\t    \tcase TerminalTokens.TokenNameGREATER:", "+\t    \t\t// simple tag without attributes", "+\t    \t\tbreak;", "+\t    \tcase TerminalTokens.TokenNameGREATER_EQUAL:", "+\t    \tcase TerminalTokens.TokenNameRIGHT_SHIFT:", "+\t    \tcase TerminalTokens.TokenNameRIGHT_SHIFT_EQUAL:", "+\t    \t\t// simple tag without attributes, but the closing '>' is followed by an '=' or '>'", "+\t    \t\tbreak;", "+\t    \tdefault:", "+\t    \t\tthis.index = currentPosition;", "+\t    \t\tloop: while (true) {", "+//\t    \t\t\tcurrentPosition = this.index;", "+\t\t\t\t    switch (readChar()) {", "+\t\t\t\t    \tcase '<':", "+\t\t\t\t    \t\tif (hasWhitespaces) {", "+\t\t\t\t    \t\t\t// not 100% sure this is a tag definition => give up", "+\t\t\t\t    \t\t\treturn false;", "+\t\t\t\t    \t\t}", "+\t\t\t\t    \t\t// opening tag => consider the current one as closed", "+\t\t\t\t    \t\tthis.index = currentPosition;", "+\t\t\t\t    \t\tthis.scanner.startPosition = currentPosition;", "+\t\t\t\t    \t\tthis.scanner.currentPosition = currentPosition;", "+\t\t\t\t    \t\tthis.scanner.currentCharacter = '<';", "+\t\t\t\t    \t\tbreak loop;", "+\t\t\t\t    \tcase '>':", "+\t\t\t\t    \t\t// simple tag without attributes", "+\t\t\t\t    \t\tthis.scanner.startPosition = this.index;", "+\t\t\t\t    \t\tthis.scanner.currentPosition = this.index;", "+\t\t\t\t    \t\tthis.scanner.currentCharacter = peekChar();", "+\t\t\t\t    \t\tbreak loop;", "+\t\t\t    \t\tdefault:", "+\t\t\t    \t\t\tbreak;", "+\t\t\t\t    }", "+\t\t\t\t    if (this.index >= this.javadocTextEnd) {", "+\t\t    \t\t\t// the end of the comment is reached => consider current tag as closed", "+\t\t\t    \t\tthis.index = currentPosition;", "+\t\t\t    \t\tthis.scanner.startPosition = currentPosition;", "+\t\t\t    \t\tthis.scanner.currentPosition = currentPosition;", "+\t\t\t    \t\tbreak;", "+\t\t\t\t    }", "-\t    \t} else {", "-\t\t    \t// invalid syntax", "-\t\t\t\treturn false;", "-\t    \t}", "-\t    }", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db22de450096ff0d5afcf0a2938d489a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/CommentRecorderParser.java", "commitBeforeChange": "330aeaad59d1633d10c0cd3a9ee9ac57073b385f", "commitAfterChange": "960ce528d76bd309a28ce655fc14cff77629ffa5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic int flushCommentsDefinedPriorTo(int position)", "signatureAfterChange": " \tpublic int flushCommentsDefinedPriorTo(int position)", "diff": ["-\t\tif (validCount > 0){ // move valid comment infos, overriding obsolete comment infos", "-\t\t\tSystem.arraycopy(this.scanner.commentStarts, index + 1, this.scanner.commentStarts, 0, validCount);", "-\t\t\tSystem.arraycopy(this.scanner.commentStops, index + 1, this.scanner.commentStops, 0, validCount);\t\t", "+\t\tswitch (validCount) {", "+\t\t\tcase 0:", "+\t\t\t\t// do nothing", "+\t\t\t\tbreak;", "+\t\t\t// move valid comment infos, overriding obsolete comment infos", "+\t\t\tcase 2:", "+\t\t\t\tthis.scanner.commentStarts[0] = this.scanner.commentStarts[index+1];", "+\t\t\t\tthis.scanner.commentStops[0] = this.scanner.commentStops[index+1];", "+\t\t\t\tthis.scanner.commentTagStarts[0] = this.scanner.commentTagStarts[index+1];", "+\t\t\t\tthis.scanner.commentStarts[1] = this.scanner.commentStarts[index+2];", "+\t\t\t\tthis.scanner.commentStops[1] = this.scanner.commentStops[index+2];", "+\t\t\t\tthis.scanner.commentTagStarts[1] = this.scanner.commentTagStarts[index+2];", "+\t\t\t\tbreak;", "+\t\t\tcase 1:", "+\t\t\t\tthis.scanner.commentStarts[0] = this.scanner.commentStarts[index+1];", "+\t\t\t\tthis.scanner.commentStops[0] = this.scanner.commentStops[index+1];", "+\t\t\t\tthis.scanner.commentTagStarts[0] = this.scanner.commentTagStarts[index+1];", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tSystem.arraycopy(this.scanner.commentStarts, index + 1, this.scanner.commentStarts, 0, validCount);", "+\t\t\t\tSystem.arraycopy(this.scanner.commentStops, index + 1, this.scanner.commentStops, 0, validCount);\t\t", "+\t\t\t\tSystem.arraycopy(this.scanner.commentTagStarts, index + 1, this.scanner.commentTagStarts, 0, validCount);"]}], "num": 47748}
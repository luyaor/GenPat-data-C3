{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d010d80ae5b0c7a174035f9764ba7b65", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1888154b84f21177b10143c1504953ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "7b4fdf4780132144ccc7c2e7370ef3841befc3d9", "commitAfterChange": "6a5ede81dc60cc482d4fde0564e95e20c9055fee", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "signatureAfterChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "diff": ["-\t\t\tlong dimPos = -1;", "+\t\t\tlong[] dimPositions = new long[20]; // assume that there won't be more than 20 dimensions...", "-\t\t\t\t\tdim++;", "-\t\t\t\t\tdimPos = (((long) dimStart) << 32) + this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\tdimPositions[dim++] = (((long) dimStart) << 32) + this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\tObject argument = createArgumentReference(name, dim, typeRef, dimPos, argNamePos);", "+\t\t\t\tObject argument = createArgumentReference(name, dim, typeRef, dimPositions, argNamePos);", "-\t\t\t\tObject argument = createArgumentReference(name, dim, typeRef, dimPos, argNamePos);", "+\t\t\t\tObject argument = createArgumentReference(name, dim, typeRef, dimPositions, argNamePos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e15ab25f946f56f9e05519ac607ab509", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "ac2c3539b72e65a4a4e0b168769da151e63c5ff1", "commitAfterChange": "014710437062a15282800b8efb747a8973068ba8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "signatureAfterChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "diff": ["-\t\t\tint argEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\tlong dimPos = -1;", "+\t\t\t\tint dimStart = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\tdimPos = (((long) dimStart) << 32) + this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\targEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\tlong argNamePos = -1;", "-\t\t\t\targEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\targNamePos = (((long)this.scanner.getCurrentTokenStartPosition())<<32)+this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\tObject argument = createArgumentReference(name, dim, typeRef, argEnd);", "+\t\t\t\tObject argument = createArgumentReference(name, dim, typeRef, dimPos, argNamePos);", "-\t\t\t\tObject argument = createArgumentReference(name, dim, typeRef, argEnd);", "+\t\t\t\tObject argument = createArgumentReference(name, dim, typeRef, dimPos, argNamePos);"]}], "num": 26369}
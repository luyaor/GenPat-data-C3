{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b5fd9b50a95485e186937b58c66225e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c385367dc9ef8be0ccb2a6ccfcbbbde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "828585e7463daa7907691134b9be6a40907a40c0", "commitAfterChange": "d22f2534ad71e981b8a20b49f3277de91c1c0a0c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " protected void acceptSourceMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames)", "signatureAfterChange": " protected void acceptSourceMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isDeclaration, int start, int end)", "diff": ["-protected void acceptSourceMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames) {", "+protected void acceptSourceMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isDeclaration, int start, int end) {", "-\t\t\t\taddElement(methods[i]);", "+\t\t\t\tif(isDeclaration) {", "+\t\t\t\t\tISourceRange range = methods[i].getNameRange();", "+\t\t\t\t\tif(range.getOffset() <= start && range.getOffset() + range.getLength() >= end) {", "+\t\t\t\t\t\taddElement(methods[i]);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\taddElement(methods[i]);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5f8bf4519f33ed05bf9b0b67463a6ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "46f0bf33fc17707f84a4651387bf3026d6bae545", "commitAfterChange": "4d6296b6ebb5111ab8825f79519da9de471cce30", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate void append(IMethod method) throws JavaModelException", "signatureAfterChange": " \tprivate void append(IMethod method) throws JavaModelException", "diff": ["-\t\tString[] parameters = method.getParameterTypes();\t\t\t", "-\t\tfor (int i = 0; i < parameters.length; i++) {", "-\t\t\tresults.append(Signature.toString(parameters[i]));", "-\t\t\tif (i < parameters.length-1) {", "-\t\t\t\tresults.append(\", \");", "+\t\tString[] parameters = method.getParameterTypes();", "+\t\tboolean varargs = Flags.isVarargs(method.getFlags());", "+\t\tfor (int i = 0, length=parameters.length; i<length; i++) {", "+\t\t\tif (i < length - 1) {", "+\t\t\t\tresults.append(Signature.toString(parameters[i]));", "+\t\t\t\tresults.append(\", \"); //$NON-NLS-1$", "+\t\t\t} else if (varargs) {", "+\t\t\t\t// remove array from signature", "+\t\t\t\tString parameter = parameters[i].substring(1);", "+\t\t\t\tresults.append(Signature.toString(parameter));", "+\t\t\t\tresults.append(\" ...\"); //$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tresults.append(Signature.toString(parameters[i]));"]}], "num": 7241}
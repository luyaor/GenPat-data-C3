{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5100ad3c4595c074c4d81ef81aace0f1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afea2c909553d86741b39bd6cb78610e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AnnotationValueConversionTests.java", "commitBeforeChange": "a6fb7155fd890e70fc93ff099a2bfa78beffa3e9", "commitAfterChange": "dade23c0ca1cb5b996dfae1d1cfc189d06d41a6f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t@SuppressWarnings(\"nls\") \tpublic void testCharConversion() throws Exception", "signatureAfterChange": " \t@SuppressWarnings(\"nls\") \tpublic void testCharConversion() throws Exception", "diff": ["-\t\t\t\"@Test.Annotation(b=(char)0,\\n\" +", "-\t\t\t\"\t\t\t\t  s=(char)0,\\n\" + ", "-\t\t\t\"\t\t\t\t  i=(char)0,\\n\" +", "-\t\t\t\"                 l=(char)0,\\n\" +", "-\t\t\t\"\t \t \t      f=(char)0,\\n\" +", "-\t\t\t\"\t\t\t      d=(char)0,\\n\" +", "-\t\t\t\"\t\t\t\t  c=(char)0)\\n\\n\" + ", "-\t\t\t\"public class Test {\\n\" +", "-\t\t\t\"\tpublic @interface Annotation\\n\" +", "-\t\t\t\"\t{\\n\" +", "-\t\t\t\"\t\tchar c();  \\n\" +", "-\t\t\t\"       byte b();  \\n\" +", "-\t\t\t\"\t\tshort s(); \\n\" +", "-\t\t\t\"\t\tint i();   \\n\" +", "-\t\t\t\"       long l();  \\n\" +", "-\t\t\t\"\t\tfloat f(); \\n\" +", "-\t\t\t\"\t\tdouble d();\\n\" +", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"}\\n\";", "+\t\t\t\"import org.eclipse.jdt.apt.tests.annotations.valueconversion.Annotation;\\n\" +", "+\t\t\t\"@Annotation(z='1',\\n\" +", "+\t\t\t\"                 b='1',\\n\" +", "+\t\t\t\"\t\t\t\t  s='1',\\n\" + ", "+\t\t\t\"\t\t\t\t  i='1',\\n\" +", "+\t\t\t\"                 l='1',\\n\" +", "+\t\t\t\"\t \t \t      f='1',\\n\" +", "+\t\t\t\"\t\t\t      d='1',\\n\" +", "+\t\t\t\"\t\t\t\t  c='1')\\n\\n\" + ", "+\t\t\t\"public class Test {}\\n\";", "-\t\tenv.addClass( ", "-\t\t\t\tsrcRoot, ", "-\t\t\t\t\"sample\", ", "-\t\t\t\t\"Test\",", "-\t\t\t\tcontent );", "+\t\tIPath testPath = env.addClass( srcRoot, \"sample\", \"Test\", content );", "-\t\texpectingNoProblems();", "+\t\texpectingSpecificProblemsFor(testPath, new Problem[]{", "+\t\t\t\tnew Problem(\"\", \"Type mismatch: cannot convert from char to boolean\", testPath),", "+\t\t\t\tnew Problem(\"\", \"type mismatch for memeber z expected java.lang.Boolean but got java.lang.Character\", testPath)", "+\t\t});", "+\t\t", "+\t\tassertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6e31d5547a3a40a6a7ce419a6acb639", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AnnotationValueConversionTests.java", "commitBeforeChange": "a6fb7155fd890e70fc93ff099a2bfa78beffa3e9", "commitAfterChange": "dade23c0ca1cb5b996dfae1d1cfc189d06d41a6f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t@SuppressWarnings(\"nls\") \tpublic void testIntConversion() throws Exception", "signatureAfterChange": " \t@SuppressWarnings(\"nls\") \tpublic void testIntConversion() throws Exception", "diff": ["-\t\t\t\"@Test.Annotation(b=(int)0,\\n\" +", "-\t\t\t\"\t\t\t\t  s=(int)0,\\n\" + ", "-\t\t\t\"\t\t\t\t  i=(int)0,\\n\" +", "-\t\t\t\"                 l=(int)0,\\n\" +", "-\t\t\t\"\t \t \t      f=(int)0,\\n\" +", "-\t\t\t\"\t\t\t      d=(int)0,\\n\" +", "-\t\t\t\"\t\t\t\t  c=(int)0)\\n\\n\" + ", "-\t\t\t\"public class Test {\\n\" +", "-\t\t\t\"\tpublic @interface Annotation\\n\" +", "-\t\t\t\"\t{\\n\" +", "-\t\t\t\"\t\tchar c();  \\n\" +", "-\t\t\t\"       byte b();  \\n\" +", "-\t\t\t\"\t\tshort s(); \\n\" +", "-\t\t\t\"\t\tint i();   \\n\" +", "-\t\t\t\"       long l();  \\n\" +", "-\t\t\t\"\t\tfloat f(); \\n\" +", "-\t\t\t\"\t\tdouble d();\\n\" +", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"}\\n\";", "+\t\t\t\"import org.eclipse.jdt.apt.tests.annotations.valueconversion.Annotation;\\n\" +", "+\t\t\t\"@Annotation(z=49,\\n\" +", "+\t\t\t\"\t\t\t\t  b=49,\\n\" +", "+\t\t\t\"\t\t\t\t  s=49,\\n\" + ", "+\t\t\t\"\t\t\t\t  i=49,\\n\" +", "+\t\t\t\"                 l=49,\\n\" +", "+\t\t\t\"\t \t \t      f=49,\\n\" +", "+\t\t\t\"\t\t\t      d=49,\\n\" +", "+\t\t\t\"\t\t\t\t  c=49)\\n\\n\" + ", "+\t\t\t\"public class Test {}\\n\";", "-\t\tenv.addClass( ", "-\t\t\t\tsrcRoot, ", "-\t\t\t\t\"sample\", ", "-\t\t\t\t\"Test\",", "-\t\t\t\tcontent );", "+\t\tIPath testPath = env.addClass( srcRoot, \"sample\", \"Test\", content );", "-\t\texpectingNoProblems();", "+\t\texpectingSpecificProblemsFor(testPath, new Problem[]{", "+\t\t\t\tnew Problem(\"\", \"Type mismatch: cannot convert from int to boolean\", testPath),", "+\t\t\t\tnew Problem(\"\", \"type mismatch for memeber z expected java.lang.Boolean but got java.lang.Integer\", testPath)", "+\t\t});", "+\t\t", "+\t\tassertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());", "+\t}"]}], "num": 65207}
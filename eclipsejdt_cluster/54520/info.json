{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "229b0e846ae7dae1c46410e04bba5d61", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "256970d8e24d6728afec16fd7c23ee43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "166df64b1dde30fc61b2e4fda13d5a0d769a3aef", "commitAfterChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "methodNumberBeforeChange": 1231, "methodNumberAfterChange": 1231, "signatureBeforeChange": " public void test1200()", "signatureAfterChange": " public void test1200()", "diff": ["-\t\t\"1. ERROR in X.java (at line 12)\\r\\n\" +", "-\t\t\"\treturn make(type, value);//1\\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 12)\\n\" +", "+\t\t\"\treturn make(type, value);//1\\n\" +", "-\t\t\"2. ERROR in X.java (at line 17)\\r\\n\" +", "-\t\t\"\treturn (Map<Class<?>, X>) make(type, value);//2\\r\\n\" +", "+\t\t\"2. ERROR in X.java (at line 17)\\n\" +", "+\t\t\"\treturn (Map<Class<?>, X>) make(type, value);//2\\n\" +", "-\t\t\"3. ERROR in X.java (at line 21)\\r\\n\" +", "-\t\t\"\treturn make(X.class, value);//3\\r\\n\" +", "+\t\t\"3. ERROR in X.java (at line 21)\\n\" +", "+\t\t\"\treturn make(X.class, value);//3\\n\" +", "-\t\t\"4. ERROR in X.java (at line 25)\\r\\n\" +", "-\t\t\"\treturn (Map<Class<?>, X>) make(X.class, value);//4\\r\\n\" +", "+\t\t\"4. ERROR in X.java (at line 25)\\n\" +", "+\t\t\"\treturn (Map<Class<?>, X>) make(X.class, value);//4\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab1cc0d06e10a5b05a72c0e2481db746", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AnnotationValueConversionTests.java", "commitBeforeChange": "7109b1b8695adc90efc89b381fbef11f66adc5d7", "commitAfterChange": "737754e9e10e391c87e1274f991c2e257be4069b", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \t \t@SuppressWarnings(\"nls\") \tpublic void testMissingPrimitiveTypeValues_Reflection() throws Exception", "signatureAfterChange": " \t \t@SuppressWarnings(\"nls\") \tpublic void testMissingPrimitiveTypeValues_Reflection() throws Exception", "diff": ["-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber z expected true but got false\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber s expected 49 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber i expected 49 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber c expected 1 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber b expected 49 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber l expected 49 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber f expected 49.0 but got 0.0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber d expected 49.0 but got 0.0\", testPath)", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member z expected true but got false\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member s expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member i expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member c expected 1 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member b expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member l expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member f expected 49.0 but got 0.0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member d expected 49.0 but got 0.0\", testPath)"]}], "num": 54520}
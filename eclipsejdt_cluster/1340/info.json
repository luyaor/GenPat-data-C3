{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bed7c0f0b9b6a05412f28a7d864bf6ed", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15ddf91b7cde93e4b346cfb70ca014ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ImportRewriteAnalyzer.java", "commitBeforeChange": "6654820265cfe7764e384e0eaabd31ce71d5edd3", "commitAfterChange": "4eaab794bf6dc1418675f45525d0cd74715d55ef", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate void addExistingImports(CompilationUnit root)", "signatureAfterChange": "  \tprivate void addExistingImports(CompilationUnit root)", "diff": ["-\t\t\tint extendedStart = root.getExtendedStartPosition(next);", "-\t\t\tint extendedLength = root.getExtendedLength(next);", "+\t\t\tint extendedStart = root.getExtendedStartPosition(curr);", "+\t\t\tif (extendedStart < this.replaceRange.getOffset()) {", "+\t\t\t\t// don't touch the first comments before the start of import declarations", "+\t\t\t\textendedStart = currOffset;", "+\t\t\t}", "+\t\t\tint extendedLength = root.getExtendedLength(curr);", "+\t\t\tint nextLineOffset = nextOffset; // offset at the start of next line. Next import may not start here", "-\t\t\t\tnextOffset= root.getPosition(currEndLine, 0);", "+\t\t\t\tnextLineOffset = root.getPosition(currEndLine, 0); ", "+\t\t\t\t// There may be some leading comments (or line delimiters) before the next import. The start of those comments", "+\t\t\t\t// is not the real start offset of the next import. So don't change nextOffset", "-\t\t\tif (nextOffset != extendedStart) {", "-\t\t\t\trangeBefore = new Region(extendedStart, extendedStart - nextOffset + 1);", "+\t\t\t", "+\t\t\tif (currOffset > extendedStart) {", "+\t\t\t\trangeBefore = new Region(extendedStart, currOffset - extendedStart);", "-\t\t\tif (nextLength != extendedLength) {", "-\t\t\t\trangeAfter = new Region(nextOffset + nextLength, extendedLength - nextLength + 1);", "+\t\t\tint currLen = curr.getLength();", "+\t\t\tif (currLen < extendedLength - (currOffset - extendedStart)) {", "+\t\t\t\tint currEndOffset = currOffset + currLen;", "+\t\t\t\tint rangeBeforeLen = rangeBefore != null? rangeBefore.getLength() : 0;", "+\t\t\t\trangeAfter = new Region(currEndOffset, extendedLength - rangeBeforeLen - currLen);", "-\t\t\t\t\t\t\tnew Region(currOffset, nextOffset - currOffset),", "+\t\t\t\t\t\t\tnew Region(currOffset, nextLineOffset - currOffset), // should not include leading comments of next import, line delimiters, etc.", "-\t\t\t\tcurrPackage.add(new ImportDeclEntry(packName.length(), null, false, new Region(currOffset, nextOffset - currOffset)));", "+\t\t\t\tcurrPackage.add(new ImportDeclEntry(packName.length(), null, false, new Region(nextLineOffset, nextOffset - nextLineOffset)));", "-\t\tint length= this.replaceRange.getOffset() + this.replaceRange.getLength() - curr.getStartPosition();", "-\t\tcurrPackage.add(new ImportDeclEntry(packName.length(), name, isStatic, new Region(curr.getStartPosition(), length)));", "+\t\tint currStartOffset = curr.getStartPosition();", "+\t\tint currLen = curr.getLength();", "+\t\tint extendedStartOffset = root.getExtendedStartPosition(curr);", "+\t\tIRegion leadingComments = null;", "+\t\tIRegion allTrailingComments = null;", "+\t\t", "+\t\tif (currStartOffset > extendedStartOffset) {", "+\t\t\tleadingComments = new Region(extendedStartOffset, currOffset - extendedStartOffset);", "+\t\t}", "+\t\tint length= this.replaceRange.getOffset() + this.replaceRange.getLength() - currStartOffset;", "+\t\tint extendedLength = root.getExtendedLength(curr);", "+\t\tif (currLen < extendedLength - (currOffset - extendedStartOffset)) {", "+\t\t\tint currEndOffset = currOffset + currLen;", "+\t\t\tint leadingCommentsLen = leadingComments != null? leadingComments.getLength() : 0;", "+\t\t\tallTrailingComments = new Region(currEndOffset, extendedLength - leadingCommentsLen - currLen);", "+\t\t}", "+\t\tcurrPackage.add(new ImportDeclEntry(packName.length(), name, isStatic, new Region(curr.getStartPosition(), length), leadingComments, allTrailingComments));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23b287a07ea6a1946aa3b91201c09195", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "5292c15945b50fef548808f853ce39423b5670f2", "commitAfterChange": "e32dbbc9904e1f7eb4c6e79a7595e742217638b3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void tearDownSuite() throws Exception", "signatureAfterChange": " public void tearDownSuite() throws Exception", "diff": ["-\tint wFailures = this.whitespacesFailures.size();", "-\tint lwFailures = this.leadingWhitespacesFailures.size();", "+\tint sFailures = this.failures.size();", "+\tint seFailures = this.expectedFailures.size();", "+\tint swFailures = this.whitespacesFailures.size();", "+\tint slwFailures = this.leadingWhitespacesFailures.size();", "-\tif (this.failures > 0) {", "-\t\tSystem.out.println(this.failures+\" files has still different output while reformatting!\");", "+\tSystem.out.println();", "+\tif (sFailures > 0) {", "+\t\tSystem.out.println(sFailures+\" files has still different output while reformatting!\");", "-\tif (lwFailures == 0) {", "+\tif (seFailures > 0) {", "+\t\tSystem.out.println(seFailures+\" files has still different output while reformatting due to old formatter bugs!\");", "+\t}", "+\tif (slwFailures == 0) {", "-\t\tSystem.out.println(lwFailures+\" files have different line leading spaces \"+failuresType+\"!\");", "+\t\tSystem.out.println(slwFailures+\" files have different line leading spaces \"+failuresType+\"!\");", "-\tif (wFailures > 0) {", "-\t\tSystem.out.println(wFailures+\" files have different spaces \"+failuresType+\"!\");", "+\tif (swFailures > 0) {", "+\t\tSystem.out.println(swFailures+\" files have different spaces \"+failuresType+\"!\");", "-\tif (lwFailures > 0) {", "+\tSystem.out.println();", "+\tif (sFailures > 0) {", "+\t\tSystem.out.println(\"List of files with different output \"+failuresType+\":\");", "+\t\tfor (int i=0; i<sFailures; i++) {", "+\t\t\tSystem.out.println(\"\t- \"+this.failures.get(i));", "+\t\t}", "+\t}", "+\tif (seFailures > 0) {", "+\t\tSystem.out.println(\"List of files with different output \"+failuresType+\" (due to old formatter bugs):\");", "+\t\tfor (int i=0; i<sFailures; i++) {", "+\t\t\tSystem.out.println(\"\t- \"+this.failures.get(i));", "+\t\t}", "+\t}", "+\tif (slwFailures > 0) {", "-\t\tfor (int i=0; i<lwFailures; i++) {", "+\t\tfor (int i=0; i<slwFailures; i++) {", "-\tif (wFailures > 0) {", "+\tif (swFailures > 0) {", "-\t\tfor (int i=0; i<wFailures; i++) {", "+\t\tfor (int i=0; i<swFailures; i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad85da7d8596d1fc3e79db7070c87236", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "471b30fcd9175fdd69611c88984722b9e0b5e4ee", "commitAfterChange": "1a356ccfb3b5b00256393a405276ebc654766b8b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void tearDownSuite() throws Exception", "signatureAfterChange": " public void tearDownSuite() throws Exception", "diff": ["+\tint wFailures = this.whitespacesFailures.size();", "+\tint lwFailures = this.leadingWhitespacesFailures.size();", "+\tString failuresType = COMPARE ? \"than old formatter\" : \"when reformatting\";", "+\tif (this.failures > 0) {", "+\t\tSystem.out.println(this.failures+\" files has still different output while reformatting!\");", "+\t}", "+\tif (lwFailures == 0) {", "+\t\tSystem.out.println(\"No file has different line leading spaces \"+failuresType+\" :-)\");", "+\t} else {", "+\t\tSystem.out.println(lwFailures+\" files have different line leading spaces \"+failuresType+\"!\");", "+\t}", "+\tif (wFailures > 0) {", "+\t\tSystem.out.println(wFailures+\" files have different spaces \"+failuresType+\"!\");", "+\t}", "+\tif (lwFailures > 0) {", "+\t\tSystem.out.println(\"List of files with different line leading spaces \"+failuresType+\":\");", "+\t\tfor (int i=0; i<lwFailures; i++) {", "+\t\t\tSystem.out.println(\"\t- \"+this.leadingWhitespacesFailures.get(i));", "+\t\t}", "+\t}", "+\tif (wFailures > 0) {", "+\t\tSystem.out.println(\"List of files with different spaces \"+failuresType+\":\");", "+\t\tfor (int i=0; i<wFailures; i++) {", "+\t\t\tSystem.out.println(\"\t- \"+this.whitespacesFailures.get(i));", "+\t\t}", "+\t}"]}], "num": 1340}
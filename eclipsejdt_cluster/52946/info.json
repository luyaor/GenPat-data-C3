{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d5e24457350022002b34e857834f1b0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b420d5d628257996584efee27c9b362", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "9318beb1001c9d1a97d62cd25a1df5140d1d4221", "commitAfterChange": "fbb5cd8172f148996d50fb2879a48666d0d58444", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \t \tprivate void updateProjectClasspath( IJavaProject jp, IFolder folder, IProgressMonitor progressMonitor ) \t\tthrows JavaModelException", "signatureAfterChange": " \t \tprivate void updateProjectClasspath( IJavaProject jp, IFolder folder, IProgressMonitor progressMonitor ) \t\tthrows JavaModelException", "diff": ["-\t\tIClasspathEntry generatedSourceClasspathEntry = ", "-\t\t\tJavaCore.newSourceEntry(folder.getFullPath());", "+\t\tIPath path = folder.getFullPath();", "-\t\t\tif (cp[i].getPath().equals(generatedSourceClasspathEntry.getPath())) ", "+\t\t\tif (cp[i].getPath().equals( path )) ", "+\t\t", "+\t\t\t// update exclusion patterns", "+\t\t\tArrayList<IPath> exclusions = new ArrayList<IPath>();", "+\t\t\tfor ( int i = 0; i< cp.length; i++ )", "+\t\t\t{", "+\t\t\t\tif ( cp[i].getPath().isPrefixOf( path ) )", "+\t\t\t\t{", "+\t\t\t\t\t// exclusion patterns must be project-relative paths, and must end with a \"/\"", "+\t\t\t\t\tIPath projectRelativePath = folder.getProjectRelativePath().addTrailingSeparator();", "+\t\t\t\t\t", "+\t\t\t\t\t// path is contained in an existing source path, so update existing paths's exclusion patterns\t\t\t\t", "+\t\t\t\t\tIPath[] oldExclusions = cp[i].getExclusionPatterns();", "+", "+\t\t\t\t\t// don't add if exclusion pattern already contains src dir", "+\t\t\t\t\tboolean add = true;", "+\t\t\t\t\tfor ( int j = 0; j < oldExclusions.length; j++ )", "+\t\t\t\t\t\tif ( oldExclusions[j].equals( projectRelativePath ) )", "+\t\t\t\t\t\t\tadd = false;", "+\t\t\t\t\t", "+\t\t\t\t\tif ( add )", "+\t\t\t\t\t{", "+\t\t\t\t\t\tIPath[] newExclusions;", "+\t\t\t\t\t\tif ( cp[i].getExclusionPatterns() == null )", "+\t\t\t\t\t\t\tnewExclusions = new IPath[1];", "+\t\t\t\t\t\telse", "+\t\t\t\t\t\t{", "+\t\t\t\t\t\t\tnewExclusions = new IPath[ oldExclusions.length + 1 ];", "+\t\t\t\t\t\t\tSystem.arraycopy( oldExclusions, 0, newExclusions, 0, oldExclusions.length );", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tnewExclusions[ newExclusions.length - 1 ] = projectRelativePath;", "+\t\t\t\t\t\tcp[i] = JavaCore.newSourceEntry(cp[i].getPath(), cp[i].getInclusionPatterns(), newExclusions, cp[i].getOutputLocation(), cp[i].getExtraAttributes());", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\telse if ( path.isPrefixOf( cp[i].getPath() ))", "+\t\t\t\t{", "+\t\t\t\t\t// new source path contains an existing source path, so add an exclusion pattern for it", "+\t\t\t\t\texclusions.add( cp[i].getPath().addTrailingSeparator() );", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\tIPath[] exclusionPatterns = exclusions.toArray( new IPath[exclusions.size()] );", "+\t\t\tIClasspathEntry generatedSourceClasspathEntry = ", "+\t\t\t\tJavaCore.newSourceEntry(folder.getFullPath(), exclusionPatterns );", "+\t\t\t", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bf5f55f754d7e35e4c6305b2d5d6e13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "9318beb1001c9d1a97d62cd25a1df5140d1d4221", "commitAfterChange": "fbb5cd8172f148996d50fb2879a48666d0d58444", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \t \tprivate void removeFromProjectClasspath( IJavaProject jp, IFolder folder, IProgressMonitor progressMonitor ) \t\tthrows JavaModelException", "signatureAfterChange": " \t \tprivate void removeFromProjectClasspath( IJavaProject jp, IFolder folder, IProgressMonitor progressMonitor ) \t\tthrows JavaModelException", "diff": ["-\t\tIClasspathEntry folderClasspathEntry = ", "-\t\t\tJavaCore.newSourceEntry(folder.getFullPath());\t\t", "+", "+\t\tIPath workspaceRelativePath = folder.getFullPath();", "+\t\tIPath projectRelativePath = folder.getProjectRelativePath().addTrailingSeparator();", "+", "-\t\t// remove entries that are for the specified folder.  Account for ", "-\t\t// multiple entries.", "+\t\t// remove entries that are for the specified folder, account for ", "+\t\t// multiple entries, and clean up any exclusion entries to the ", "+\t\t// folder being removed.", "-\t\t\tif (! cp[i].getPath().equals(folderClasspathEntry.getPath()) )", "+\t\t\tif (! cp[i].getPath().equals( workspaceRelativePath ) )", "-\t\t\t\tcp[j] = cp[i];", "+\t\t\t", "+\t\t\t\t// see if we added the generated source dir as an exclusion pattern to some other entry", "+\t\t\t\tIPath[] oldExclusions = cp[i].getExclusionPatterns();", "+\t\t\t\tint m = 0;", "+\t\t\t\tfor ( int k = 0; k < oldExclusions.length; k++ )", "+\t\t\t\t{", "+\t\t\t\t\tif ( !oldExclusions[k].equals( projectRelativePath ) )", "+\t\t\t\t\t{", "+\t\t\t\t\t\toldExclusions[m] = oldExclusions[k];", "+\t\t\t\t\t\tm++;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif ( oldExclusions.length == m )", "+\t\t\t\t{", "+\t\t\t\t\t// no exclusions changed, so we do't need to create a new entry", "+\t\t\t\t\tcp[j] = cp[i];", "+\t\t\t\t}", "+\t\t\t\telse", "+\t\t\t\t{", "+\t\t\t\t\t// we've removed some exclusion, so create a new entry", "+\t\t\t\t\tIPath[] newExclusions = new IPath[ m ];", "+\t\t\t\t\tSystem.arraycopy( oldExclusions, 0, newExclusions, 0, m );", "+\t\t\t\t\tcp[j] = JavaCore.newSourceEntry( cp[i].getPath(), cp[i].getInclusionPatterns(), newExclusions, cp[i].getOutputLocation(), cp[i].getExtraAttributes() );", "+\t\t\t\t}", "+\t\t\t\t", "-\t\t// now copy into new array", "+\t\t// now copy updated classpath entries into new array"]}], "num": 52946}
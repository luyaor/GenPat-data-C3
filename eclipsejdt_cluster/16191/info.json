{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0becea7920c0370fe6bdf31dbdb2750b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e5dee67fc15180afa90115f539bf9a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "4e300efc6879ebefc1e17424cda019b7c5ca9ad1", "commitAfterChange": "d836cbee8ecc949f19e7decf6adae6126ae2b267", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public void add(IResource element, boolean withSubFolders)", "signatureAfterChange": "\r private IPath fullPath(IJavaElement element)", "diff": ["- */\r", "-public void add(IResource element, boolean withSubFolders) {\r", "-\t// clear indexer cache\r", "-\tfLastCheckedResource = null;\r", "-\t\r", "-\tif (!element.isAccessible()) return;\r", "-\t\r", "-\tsuper.add(element);\r", "-\tthis.add(element.getFullPath(), withSubFolders);\t\r", "-}\r", "+private IPath fullPath(IJavaElement element) {\r", "+\tif (element instanceof IPackageFragmentRoot) {\r", "+\t\treturn ((IPackageFragmentRoot)element).getPath();\r", "+\t} else \t{\r", "+\t\tIJavaElement parent = element.getParent();\r", "+\t\tIPath parentPath = parent == null ? null : this.fullPath(parent);\r", "+\t\tIPath childPath;\r", "+\t\tif (element instanceof IPackageFragment) {\r", "+\t\t\tchildPath = new Path(element.getElementName().replace('.', '/'));\r", "+\t\t} else if (element instanceof IOpenable) {\r", "+\t\t\tchildPath = new Path(element.getElementName());\r", "+\t\t} else {\r", "+\t\t\treturn parentPath;\r", "+\t\t}\r", "+\t\treturn parentPath == null ? childPath : parentPath.append(childPath);\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0a2eafea6bccf221f063e920c2ede90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "f5dedbad023ed535da8140c4ada528c2bf574f20", "commitAfterChange": "b7dcee8ec99a66c7cd3b7ec7ac6ac22c9994d5db", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " protected boolean isAffectedByType(IJavaElementDelta delta, IType type, boolean hasImportChange)", "signatureAfterChange": " protected boolean isAffectedByOpenable(IJavaElementDelta delta, IJavaElement element)", "diff": ["+\tif (element instanceof CompilationUnit) {", "+\t\tCompilationUnit cu = (CompilationUnit)element;", "+\t\tChangeCollector collector = this.changeCollector == null ? new ChangeCollector(this) : this.changeCollector;", "+\t\ttry {", "+\t\t\tcollector.addChange(cu, delta);", "+\t\t} catch (JavaModelException e) {", "+\t\t\te.printStackTrace();", "+\t\t}", "+\t\tif (cu.isWorkingCopy()) {", "+\t\t\t// changes to working copies are batched", "+\t\t\tthis.changeCollector = collector;", "+\t\t\treturn false;", "+\t\t} else {", "+\t\t\treturn collector.needsRefresh();", "+\t\t}", "+\t} else if (element instanceof ClassFile) {", "+\t\tswitch (delta.getKind()) {", "+\t\t\tcase IJavaElementDelta.REMOVED:", "+\t\t\t\treturn this.files.get(element) != null;", "+\t\t\tcase IJavaElementDelta.ADDED:", "+\t\t\t\tIType type = ((ClassFile)element).getType();", "+\t\t\t\tbreak;", "+\t\t\tcase IJavaElementDelta.CHANGED:", "+\t\t\t\tIJavaElementDelta[] children = delta.getAffectedChildren();", "+\t\t\t\tfor (int i = 0, length = children.length; i < length; i++) {", "+\t\t\t\t\tIJavaElementDelta child = children[i];", "+\t\t\t\t\tIJavaElement childElement = child.getElement();", "+\t\t\t\t\tif (childElement instanceof IType) {", "+\t\t\t\t\t\ttype = (IType)childElement;", "+\t\t\t\t\t\tboolean hasVisibilityChange = (delta.getFlags() & IJavaElementDelta.F_MODIFIERS) > 0;", "+\t\t\t\t\t\tboolean hasSupertypeChange = (delta.getFlags() & IJavaElementDelta.F_SUPER_TYPES) > 0;", "+\t\t\t\t\t\tif ((hasVisibilityChange && hasSupertype(type.getElementName()))", "+\t\t\t\t\t\t\t\t|| (hasSupertypeChange && includesTypeOrSupertype(type))) {", "+\t\t\t\t\t\t\treturn true;", "- */", "-protected boolean isAffectedByType(IJavaElementDelta delta, IType type, boolean hasImportChange) {", "-\tswitch (delta.getKind()) {", "-\t\tcase IJavaElementDelta.ADDED:", "-\t\t\tString typeName = type.getElementName();", "-\t\t\tif (hasSupertype(typeName) ", "-\t\t\t\t|| subtypesIncludeSupertypeOf(type) ", "-\t\t\t\t|| this.missingTypes.contains(typeName)) {", "-\t\t\t\t", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase IJavaElementDelta.CHANGED:", "-\t\t\tboolean hasVisibilityChange = (delta.getFlags() & IJavaElementDelta.F_MODIFIERS) > 0;", "-\t\t\tboolean hasSupertypeChange = (delta.getFlags() & IJavaElementDelta.F_SUPER_TYPES) > 0;", "-\t\t\tif ((hasVisibilityChange && hasSupertype(type.getElementName()))", "-\t\t\t\t\t|| ((hasImportChange || hasSupertypeChange) ", "-\t\t\t\t\t\t&& includesTypeOrSupertype(type))) {", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase IJavaElementDelta.REMOVED:", "-\t\t\tif (this.contains(type)) {", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tbreak;", "-\t}", "-\tIJavaElementDelta[] children = delta.getAffectedChildren();", "-\tfor (int i = 0, length = children.length; i < length; i++) {", "-\t\tIJavaElementDelta child = children[i];", "-\t\tIJavaElement childElement = child.getElement();", "-\t\tif (childElement instanceof IType) {", "-\t\t\tif (this.isAffectedByType(child, (IType)childElement, hasImportChange)) {", "-\t\t\t\treturn true;", "-\t\t\t}", "+\t\t\t\tbreak;", "-} ", "+}"]}], "num": 16191}
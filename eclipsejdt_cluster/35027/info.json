{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef0aa324fabe3bc227da5a6e017b9bc8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb16bce5843dda7ed3f7f080c2f37bc0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/CodeByteStream.java", "commitBeforeChange": "669b9af0f5a06f4381a84a633c0be85e376c6f3e", "commitAfterChange": "cf266a5a150479cb6fad7bdee0518adaf976404e", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void writeSmallUTF(char[] str, int start, int end)", "signatureAfterChange": " \tpublic void writeUTF(char[] str, int start, int end)", "diff": ["-\t}", "-\tpublic void writeSmallUTF(char[] str, int start, int end) {", "+\tpublic void writeUTF(char[] str, int start, int end) {", "-\t\tif (utflen > 255)", "+\t\tif (utflen < 255) {", "+\t\t\twriteByte(utflen & 0xFF);", "+\t\t} else if (utflen > 65535) {", "-\t\twriteByte(utflen & 0xFF);", "+\t\t} else {", "+\t\t\twriteByte(255); // marker for long UTF", "+\t\t\twriteByte((utflen >>> 8) & 0xFF); // high byte", "+\t\t\twriteByte((utflen >>> 0) & 0xFF); // low byte", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd3080d482b1aacb650d1c47bd6b4a2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "2070676b1e20c45846e614809eff55257373d539", "commitAfterChange": "3e7114db66d7154ea4072c5af4dcd065de055bb8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic static TypeBinding moreDangerousType(TypeBinding one, TypeBinding two)", "signatureAfterChange": " \tpublic static TypeBinding moreDangerousType(TypeBinding one, TypeBinding two)", "diff": ["-\t\tif (oneNullBits == twoNullBits)", "-\t\t\treturn one;\t\t\t// same difference", "-\t\tif (oneNullBits == TagBits.AnnotationNullable)", "-\t\t\treturn one;\t\t\t// nullable is dangerous", "-\t\tif (twoNullBits == TagBits.AnnotationNullable)", "-\t\t\treturn two;\t\t\t// nullable is dangerous", "-\t\t// below this point we have unknown vs. nonnull, which is which?", "-\t\tif (oneNullBits == 0)", "-\t\t\treturn one;\t\t\t// unknown is more dangerous than nonnull", "-\t\treturn two;\t\t\t\t// unknown is more dangerous than nonnull", "+\t\tif (oneNullBits != twoNullBits) {", "+\t\t\tif (oneNullBits == TagBits.AnnotationNullable)", "+\t\t\t\treturn one;\t\t\t// nullable is dangerous", "+\t\t\tif (twoNullBits == TagBits.AnnotationNullable)", "+\t\t\t\treturn two;\t\t\t// nullable is dangerous", "+\t\t\t// below this point we have unknown vs. nonnull, which is which?", "+\t\t\tif (oneNullBits == 0)", "+\t\t\t\treturn one;\t\t\t// unknown is more dangerous than nonnull", "+\t\t\treturn two;\t\t\t\t// unknown is more dangerous than nonnull", "+\t\t} else if (one != two) {", "+\t\t\tif (analyse(one, two, -1).isAnyMismatch())", "+\t\t\t\treturn two;\t\t\t// two doesn't snugly fit into one, so it must be more dangerous", "+\t\t}", "+\t\treturn one;"]}], "num": 35027}
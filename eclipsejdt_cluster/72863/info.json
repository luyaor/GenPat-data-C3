{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2131b65127619b4fbb6cd680e3e666b1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43ca8a8cd1c9e41fd45e1cc52ba2e181", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "d6e67d4c8518637d8a6205904d99263fcf72b512", "commitAfterChange": "25c3603d7bf5d103d47b791d11767b16968f4a1d", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-        \" Ignored options:\\n\" + ", "-        \"    -J<option>         pass option to virtual machine (ignored)\\n\" + ", "-        \"    -X<option>         specify non-standard option (ignored\\n\" + ", "-        \"                       except for -Xemacs)\\n\" + ", "-        \"    -X                 print non-standard options and exit (ignored)\\n\" + ", "-        \"    -O                 optimize for execution time (ignored)\\n\" + ", "+        \" Annotation processing options:\\n\" + ", "+        \"   These options are meaningful only in a 1.6 environment.\\n\" + ", "+        \"    -Akey[=value]        annotation processors options that are made to\\n\" + ", "+        \"                         annotation processors. key are identifiers separated\\n\" + ", "+        \"                         by ..\\n\" + ", "+        \"    -processorpath <directories and zip/jar files separated by ;>\\n\" + ", "+        \"                         specify locations where to find annotation processors\\n\" + ", "+        \"                         If this option is not used, the classpath will be\\n\" + ", "+        \"                         searched for processors.\\n\" + ", "+        \"    -processor <class1[,class2,...]>\\n\" + ", "+        \"                         Qualified names of the annotation processors to run.\\n\" + ", "+        \"                         This bypasses the default annotation discovery process\\n\" + ", "+        \"    -proc:only           run annotation processors, but do not compile\\n\" + ", "+        \"    -proc:none           perform compilation but do not run annotation\\n\" + ", "+        \"                         processors\\n\" + ", "+        \"    -s <dir>             specify a directory where to put the generated source\\n\" + ", "+        \"                         files\\n\" + ", "+        \"    -XprintProcessorInfo print information about which annotations and which\\n\" + ", "+        \"                         elements a processor is asked to process\\n\" + ", "+        \"    -XprintRounds        print information about annotation processing rounds.\\n\" + ", "+        \" \\n\" + ", "+        \" Ignored options:\\n\" + ", "+        \"    -J<option>         pass option to virtual machine (ignored)\\n\" + ", "+        \"    -X<option>         specify non-standard option (ignored\\n\" + ", "+        \"                       except for listed -X options)\\n\" + ", "+        \"    -X                 print non-standard options and exit (ignored)\\n\" + ", "+        \"    -O                 optimize for execution time (ignored)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ccd89ad71d07d9ac74f7e6f737aa49e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "commitAfterChange": "dcf93fb34d4ce9325841c9302bc217b02f49501a", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["+                            int startingIndex = 0;", "+                            int endingIndex = 0;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tint startingIndex = 0;", "-\t\t\t\t\t\t\tint endingIndex = 0;", "-\t\t\t\t\t\t\twhile (typeArguments[endingIndex] == null) {", "-\t\t\t\t\t\t\t\tendingIndex++;", "+\t\t\t\t\t\t\t\t} else if (numberOfEnclosingType == 0) {", "+                                    endingIndex++;", "+                                }", "+\t\t\t\t\t\t\t\tname.index = 1;", "-\t\t\t\t\t\t\t\tname = this.setQualifiedNameNameAndSourceRanges(tokens, positions, startingIndex, endingIndex, typeReference);", "+\t\t\t\t\t\t\t\tname = this.setQualifiedNameNameAndSourceRanges(tokens, positions, endingIndex, typeReference);", "+\t\t\t\t\t\t\trecordNodes(name, typeReference);", "+                            if (this.resolveBindings) {", "+                                recordNodes(simpleType, typeReference);", "+                                recordNodes(parameterizedType, typeReference);", "+                            }", "+\t\t\t\t\t\t\tint indexOfEnclosingType = 1;", "+\t\t\t\t\t\t\tparameterizedType.index = indexOfEnclosingType;", "+\t\t\t\t\t\t\t\tsimpleName.index = startingIndex + 1;", "-\t\t\t\t\t\t\t\tQualifiedType qualifiedType = this.ast.newQualifiedType(currentType, simpleName);\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tQualifiedType qualifiedType = this.ast.newQualifiedType(currentType, simpleName);", "+                                if (this.resolveBindings) {", "+                                    recordNodes(simpleName, typeReference);", "+                                    recordNodes(qualifiedType, typeReference);", "+                                }", "+\t\t\t\t\t\t\t\tindexOfEnclosingType++;", "+\t                               \tqualifiedType.index = indexOfEnclosingType;", "+ \t\t\t\t\t\t\t\t\tparameterizedType2.index = indexOfEnclosingType;", "+                                   if (this.resolveBindings) {", "+                                        recordNodes(parameterizedType2, typeReference);", "+                                    }", "+                               \t\tqualifiedType.index = indexOfEnclosingType;"]}], "num": 72863}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db645bcb168d82335bc02ebfd391e5ba", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15709a9a2db4cbc2addfec64ff4571cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/Java8ElementProcessor.java", "commitBeforeChange": "91f3edc5382142e13f8351418b65563536c6670f", "commitAfterChange": "8beb6c014c6d79a132720a5abe8725a7bc30bf83", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic void testTypeAnnotations7()", "signatureAfterChange": "  \tpublic void testTypeAnnotations7()", "diff": ["+", "+\t\t// public <T> Z(@Type T t){}", "+\t\tList<? extends Element> members = _elementUtils.getAllMembers(typeZ);", "+\t\tfor (ExecutableElement method : ElementFilter.constructorsIn(members)) {", "+\t\t\tExecutableType executabletype = (ExecutableType) method.asType();", "+\t\t\tList<? extends TypeMirror> list = executabletype.getParameterTypes();", "+\t\t\tList<? extends VariableElement> list1 = method.getParameters();", "+\t\t\tfor(int i = 0; i < list1.size(); i++) {", "+\t\t\t\tVariableElement variableelement = list1.get(i);", "+\t\t\t\tif (method.getSimpleName().toString().equals(\"<init>\")) {", "+\t\t\t\t\tassertEquals(\"Trouble!\", list.get(i), variableelement.asType());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17013c42d95bb03acd76d3a8c2d0331b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "bbb750998e75511ba75783c9f2d763f2e32279d9", "commitAfterChange": "02bf4272774dd4f6faf4897c054614bdc809ab9e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate boolean examineAMethodsAndFields()", "signatureAfterChange": " \tprivate boolean examineAMethodsAndFields()", "diff": ["+\t\tList<ExecutableElement> methodsD = ElementFilter.methodsIn(_elementString.getEnclosedElements());", "+\t\tfor (ExecutableElement method : methodsD) {", "+\t\t\tList<? extends VariableElement> params = method.getParameters();", "+\t\t\tfor (VariableElement param : params) {", "+\t\t\t\tElement enclosingElement = param.getEnclosingElement();", "+\t\t\t\tif (enclosingElement == null) {", "+\t\t\t\t\treportError(\"Enclosing element of a parameter in one of the java.lang.String methods is null\");", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tif (!enclosingElement.equals(method)) {", "+\t\t\t\t\treportError(\"Enclosing element of a parameter in one of the java.lang.String methods is not the method itself\");", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 65795}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00490ca2c77da048a008b114a2618ee1", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36f99f67e31cd62230e4752483e6a0e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "acf58dbcfbfa39ff3904f43d31343218ded91a71", "commitAfterChange": "27d95cfb6022c24feca5946c5f35f2eff59fa35f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic final boolean isTypeUseDeprecated(TypeBinding type, Scope scope)", "signatureAfterChange": " \tpublic final boolean isTypeUseDeprecated(TypeBinding type, Scope scope)", "diff": ["-\t\t// if context is deprecated, may avoid reporting", "-\t\tif (!scope.compilerOptions().reportDeprecationInsideDeprecatedCode && scope.isInsideDeprecatedCode()) return false;", "-\t\treturn true;", "+\t\t// check against scope code deprecation", "+\t\tif (scope.isInsideDeprecatedCode()) {", "+\t\t\treturn scope.compilerOptions().reportDeprecationInsideDeprecatedCode;", "+\t\t} else {", "+\t\t\treturn scope.compilerOptions().reportDeprecationInNonDeprecatedCode;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfeb302c60451bff52557f63eead73b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "acf58dbcfbfa39ff3904f43d31343218ded91a71", "commitAfterChange": "27d95cfb6022c24feca5946c5f35f2eff59fa35f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic final boolean isMethodUseDeprecated(MethodBinding method, Scope scope, \t\t\tboolean isExplicitUse)", "signatureAfterChange": " \tpublic final boolean isMethodUseDeprecated(MethodBinding method, Scope scope, \t\t\tboolean isExplicitUse)", "diff": ["-\t\t// if context is deprecated, may avoid reporting", "-\t\tif (!scope.compilerOptions().reportDeprecationInsideDeprecatedCode && scope.isInsideDeprecatedCode()) return false;", "-\t\treturn true;", "+\t\t// check against scope code deprecation", "+\t\tif (scope.isInsideDeprecatedCode()) {", "+\t\t\treturn scope.compilerOptions().reportDeprecationInsideDeprecatedCode;", "+\t\t} else {", "+\t\t\treturn scope.compilerOptions().reportDeprecationInNonDeprecatedCode;", "+\t\t}"]}], "num": 14964}
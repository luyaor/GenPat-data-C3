{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8062c19ce5a4c63f7350de6cefc8f070", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58219903c916a7b72350196c5d50e282", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 251, "signatureBeforeChange": " protected void pushOnExpressionStack(Expression expr)", "signatureAfterChange": " protected void pushOnExpressionStack(Expression expr)", "diff": ["-\t\texpressionStack[++expressionPtr] = expr;", "+\t\tthis.expressionStack[++this.expressionPtr] = expr;", "-\t\t//expressionPtr is correct ", "-\t\tint oldStackLength = expressionStack.length;", "-\t\tExpression[] oldStack = expressionStack;", "-\t\texpressionStack = new Expression[oldStackLength + ExpressionStackIncrement];", "-\t\tSystem.arraycopy(oldStack, 0, expressionStack, 0, oldStackLength);", "-\t\texpressionStack[expressionPtr] = expr;", "+\t\t//this.expressionPtr is correct ", "+\t\tint oldStackLength = this.expressionStack.length;", "+\t\tExpression[] oldStack = this.expressionStack;", "+\t\tthis.expressionStack = new Expression[oldStackLength + ExpressionStackIncrement];", "+\t\tSystem.arraycopy(oldStack, 0, this.expressionStack, 0, oldStackLength);", "+\t\tthis.expressionStack[this.expressionPtr] = expr;", "-\t\texpressionLengthStack[++expressionLengthPtr] = 1;", "+\t\tthis.expressionLengthStack[++this.expressionLengthPtr] = 1;", "-\t\tint oldStackLength = expressionLengthStack.length;", "-\t\tint[] oldPos = expressionLengthStack;", "-\t\texpressionLengthStack = new int[oldStackLength + ExpressionStackIncrement];", "-\t\tSystem.arraycopy(oldPos, 0, expressionLengthStack, 0, oldStackLength);", "-\t\texpressionLengthStack[expressionLengthPtr] = 1;", "+\t\tint oldStackLength = this.expressionLengthStack.length;", "+\t\tint[] oldPos = this.expressionLengthStack;", "+\t\tthis.expressionLengthStack = new int[oldStackLength + ExpressionStackIncrement];", "+\t\tSystem.arraycopy(oldPos, 0, this.expressionLengthStack, 0, oldStackLength);", "+\t\tthis.expressionLengthStack[this.expressionLengthPtr] = 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b405449945f91269f8a1a142418f694", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "db260d93667acab111e64138469df12a566a7b90", "commitAfterChange": "41616c6495c935b90356748e848cc3a6ffe7665e", "methodNumberBeforeChange": 252, "methodNumberAfterChange": 252, "signatureBeforeChange": " protected void pushOnExpressionStack(Expression expr)", "signatureAfterChange": " protected void pushOnExpressionStack(Expression expr)", "diff": ["-\ttry {", "-\t\tthis.expressionStack[++this.expressionPtr] = expr;", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\t//this.expressionPtr is correct ", "-\t\tint oldStackLength = this.expressionStack.length;", "-\t\tExpression[] oldStack = this.expressionStack;", "-\t\tthis.expressionStack = new Expression[oldStackLength + ExpressionStackIncrement];", "-\t\tSystem.arraycopy(oldStack, 0, this.expressionStack, 0, oldStackLength);", "-\t\tthis.expressionStack[this.expressionPtr] = expr;", "+\tint stackLength = this.expressionStack.length;", "+\tif (++this.expressionPtr >= stackLength) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.expressionStack, 0,", "+\t\t\tthis.expressionStack = new Expression[stackLength + ExpressionStackIncrement], 0,", "+\t\t\tstackLength);", "+\tthis.expressionStack[this.expressionPtr] = expr;", "-\ttry {", "-\t\tthis.expressionLengthStack[++this.expressionLengthPtr] = 1;", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\tint oldStackLength = this.expressionLengthStack.length;", "-\t\tint[] oldPos = this.expressionLengthStack;", "-\t\tthis.expressionLengthStack = new int[oldStackLength + ExpressionStackIncrement];", "-\t\tSystem.arraycopy(oldPos, 0, this.expressionLengthStack, 0, oldStackLength);", "-\t\tthis.expressionLengthStack[this.expressionLengthPtr] = 1;", "+\tstackLength = this.expressionLengthStack.length;", "+\tif (++this.expressionLengthPtr >= stackLength) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.expressionLengthStack, 0,", "+\t\t\tthis.expressionLengthStack = new int[stackLength + ExpressionStackIncrement], 0,", "+\t\t\tstackLength);", "+\tthis.expressionLengthStack[this.expressionLengthPtr] = 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e1df0cd2ba321b1f4d540814c4990c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 164, "methodNumberAfterChange": 164, "signatureBeforeChange": " protected void consumeStatementFor()", "signatureAfterChange": " protected void consumeStatementFor()", "diff": ["-\tastLengthPtr--;", "-\tStatement statement = (Statement) astStack[astPtr--];", "+\tthis.astLengthPtr--;", "+\tStatement statement = (Statement) this.astStack[this.astPtr--];", "-\tif ((length = expressionLengthStack[expressionLengthPtr--]) == 0) {", "+\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) == 0) {", "-\t\texpressionPtr -= length;", "+\t\tthis.expressionPtr -= length;", "-\t\t\texpressionStack, ", "-\t\t\texpressionPtr + 1, ", "+\t\t\tthis.expressionStack, ", "+\t\t\tthis.expressionPtr + 1, ", "-\tif (expressionLengthStack[expressionLengthPtr--] != 0)", "-\t\tcond = expressionStack[expressionPtr--];", "+\tif (this.expressionLengthStack[this.expressionLengthPtr--] != 0)", "+\t\tcond = this.expressionStack[this.expressionPtr--];", "-\tif ((length = astLengthStack[astLengthPtr--]) == 0) {", "+\tif ((length = this.astLengthStack[this.astLengthPtr--]) == 0) {", "-\t\t\tlength = expressionLengthStack[expressionLengthPtr--];", "-\t\t\texpressionPtr -= length;", "+\t\t\tlength = this.expressionLengthStack[this.expressionLengthPtr--];", "+\t\t\tthis.expressionPtr -= length;", "-\t\t\t\texpressionStack, ", "-\t\t\t\texpressionPtr + 1, ", "+\t\t\t\tthis.expressionStack, ", "+\t\t\t\tthis.expressionPtr + 1, ", "-\t\t\tastPtr -= length;", "+\t\t\tthis.astPtr -= length;", "-\t\t\t\tastStack, ", "-\t\t\t\tastPtr + 1, ", "+\t\t\t\tthis.astStack, ", "+\t\t\t\tthis.astPtr + 1, ", "-\t\t\tintStack[intPtr--], ", "-\t\t\tendStatementPosition)); ", "+\t\t\tthis.intStack[this.intPtr--], ", "+\t\t\tthis.endStatementPosition)); "]}], "num": 45592}
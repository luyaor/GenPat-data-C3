{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a86a030d613bbc075cc2ed6e1e94bf26", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b04a07f4873a1486b23a27d9ed35b60", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r private void extractReferenceFromConstantPool(byte[] contents, ClassFileReader reader) throws ClassFormatException", "signatureAfterChange": "\r private void extractReferenceFromConstantPool(byte[] contents, ClassFileReader reader) throws ClassFormatException", "diff": ["-\t\tchar[] className = null;\r", "-\t\t\t\taddMethodReference(name, extractArgCount(type));\r", "+\t\t\t\tif (CharOperation.equals(INIT, name)) {\r", "+\t\t\t\t\t// add a constructor reference\r", "+\t\t\t\t\tchar[] className = replace('/', '.', extractClassName(constantPoolOffsets, reader, i)); // so that it looks like java.lang.String\r", "+\t\t\t\t\taddConstructorReference(className, extractArgCount(type));\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// add a method reference\r", "+\t\t\t\t\taddMethodReference(name, extractArgCount(type));\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "176ef84ac2ceb9775a4724153d680bef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "240396375bcd308bc801defacd8d000d9826bf17", "commitAfterChange": "d24d28f1cf95d80c381c825283113e7b36dcb836", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \t \tprivate void completionOnQualifiedAllocationExpression(ASTNode astNode, Binding qualifiedBinding, Scope scope)", "signatureAfterChange": " \t \tprivate void completionOnQualifiedAllocationExpression(ASTNode astNode, Binding qualifiedBinding, Scope scope)", "diff": ["-\t\tif (!this.requestor.isIgnored(CompletionProposal.METHOD_REF)", "-\t\t\t\t&& ref.isClass()", "-\t\t\t\t&& !ref.isAbstract()) {", "-\t\t\t\tfindConstructors(", "+\t\t", "+\t\tif (ref.problemId() == ProblemReasons.NotFound) {", "+\t\t\tfindConstructorsFromMissingType(", "+\t\t\t\t\tallocExpression.type,", "+\t\t\t\t\targTypes,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tallocExpression);", "+\t\t} else {", "+\t\t\tif (!this.requestor.isIgnored(CompletionProposal.METHOD_REF)", "+\t\t\t\t\t&& ref.isClass()", "+\t\t\t\t\t&& !ref.isAbstract()) {", "+\t\t\t\t\tfindConstructors(", "+\t\t\t\t\t\tref,", "+\t\t\t\t\t\targTypes,", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tallocExpression,", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tfalse);", "+\t\t\t}", "+\t\t\t", "+\t\t\tcheckCancel();", "+\t\t\t", "+\t\t\tif (!this.requestor.isIgnored(CompletionProposal.ANONYMOUS_CLASS_DECLARATION)", "+\t\t\t\t\t&& !ref.isFinal()", "+\t\t\t\t\t&& !ref.isEnum()){", "+\t\t\t\tfindAnonymousType(", "+\t\t\t\t\tnull,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tnull,", "-\t\t}", "-\t\t", "-\t\tcheckCancel();", "-\t\t", "-\t\tif (!this.requestor.isIgnored(CompletionProposal.ANONYMOUS_CLASS_DECLARATION)", "-\t\t\t\t&& !ref.isFinal()", "-\t\t\t\t&& !ref.isEnum()){", "-\t\t\tfindAnonymousType(", "-\t\t\t\tref,", "-\t\t\t\targTypes,", "-\t\t\t\tscope,", "-\t\t\t\tallocExpression);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59f26aa0cf84d0058d7ec2fb311df1ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java", "commitBeforeChange": "3388256fa80bf40daffa9f485d2674986c875b82", "commitAfterChange": "7a73f29da5ea73cce41fc54b0fc3ad302149f476", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 139, "signatureBeforeChange": " \tpublic void testMethodDeclaration()", "signatureAfterChange": " \tpublic void testMethodDeclaration()", "diff": ["-\t\tx1.thrownExceptions().add(this.N2);", "-\t\tx1.thrownExceptions().add(this.N3);", "+\t\tif (this.ast.apiLevel() < AST.JLS8) {", "+\t\t\tx1.thrownExceptions().add(this.N2);", "+\t\t\tx1.thrownExceptions().add(this.N3);\t\t\t", "+\t\t} else {", "+\t\t\tx1.thrownExceptionTypes().add(this.T3);", "+\t\t\tx1.thrownExceptionTypes().add(this.T4);\t\t\t", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abf8d7ea0ae2c97bc8ce87e867390b9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "904e81d11d3fc634ae2d9d861dc6c73c9ea81e03", "commitAfterChange": "2fce9fdec7d24fd4985bfaa8a4da9bdc5aff2660", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic boolean visit(NullLiteral node)", "signatureAfterChange": " \tpublic boolean visit(MemberRef node)", "diff": ["+\t */", "+\tpublic boolean visit(MemberRef node) {", "+\t\tif (node.getQualifier() != null) {", "+\t\t\tnode.getQualifier().accept(this);", "+\t\t}", "+\t\tthis.buffer.append(\"#\");//$NON-NLS-1$", "+\t\tnode.getName().accept(this);", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2e1369952dc74f53a5f18a06bbad7f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 142, "signatureBeforeChange": " \tpublic void testPackageDeclaration()", "signatureAfterChange": " \tpublic void testPackageDeclaration()", "diff": ["+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tx1.annotations().add(ANO1);", "+\t\t\tx1.annotations().add(ANO2);", "+\t\t}"]}], "num": 51869}
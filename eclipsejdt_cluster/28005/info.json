{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e498e83d11599e5827da1b8a18b3ee43", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6679fe3d87929b76ca69ebc30e52b046", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "1046ecba3bf1092ff6936f62a14ab5c9b25878ed", "commitAfterChange": "6136184df5d87b2fe6ebeec9fd9dcf39b1b92cb1", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\tfinal int InsideMaxProblems = 256;", "+\t\t\tif (currentArg.equals(\"-maxProblems\")) { //$NON-NLS-1$", "+\t\t\t\tif (this.maxProblems > 0)", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateMaxProblems\", currentArg)); //$NON-NLS-1$", "+\t\t\t\tmode = InsideMaxProblems;", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\t}", "+\t\t\tif (currentArg.equals(\"-noJSR\")) { //$NON-NLS-1$", "+\t\t\t    mode = Default;", "+\t\t\t    this.useJsrBytecode = false;", "+\t\t\t    continue;", "+\t\t\t\t}", "+\t\t\t\tmode = Default;", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\tif (mode == InsideMaxProblems) {", "+\t\t\t\ttry {", "+\t\t\t\t\tthis.maxProblems = Integer.parseInt(currentArg);", "+\t\t\t\t\tif (this.maxProblems <= 0) {", "+\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.maxProblems\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_MaxProblemPerUnit, currentArg);", "+\t\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.maxProblems\", currentArg)); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93d3d69c0349a1486a68583cb3a39e52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeFilerImpl.java", "commitBeforeChange": "4aad3541005b227c1c4489d6142b68e14885b9dc", "commitAfterChange": "c69c700b22ba98a95d56e16f7365ecaf28392cdd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t@Override \tpublic FileObject createResource(Location location, CharSequence pkg, \t\t\tCharSequence relativeName, Element... originatingElements) throws IOException", "signatureAfterChange": " \t@Override \tpublic FileObject createResource(Location location, CharSequence pkg, \t\t\tCharSequence relativeName, Element... originatingElements) throws IOException", "diff": ["-\t\t\tCharSequence relativeName, Element... originatingElements) throws IOException {", "-\t\t//TODO", "-\t\tthrow new UnsupportedOperationException(\"Creating resource files is not yet implemented\"); //$NON-NLS-1$", "+\t\t\tCharSequence relativeName, Element... originatingElements) throws IOException ", "+\t{", "+\t\t// Pre-emptively check parameters here, rather than later on when the resource is written and closed.", "+\t\tif (null == location) {", "+\t\t\tthrow new IllegalArgumentException(\"Location is null\");", "+\t\t}", "+\t\tif (!location.isOutputLocation()) {", "+\t\t\tthrow new IllegalArgumentException(\"Location \" + location.getName() + \" is not an output location\");", "+\t\t}", "+\t\t", "+\t\tif (null == pkg) {", "+\t\t\tthrow new IllegalArgumentException(\"Package is null\");", "+\t\t}", "+\t\tif (null == relativeName) {", "+\t\t\tthrow new IllegalArgumentException(\"Relative name is null\");", "+\t\t}", "+\t\tif ( relativeName.length() == 0) {", "+\t\t\tthrow new IllegalArgumentException(\"Relative name is zero length\");", "+\t\t}", "+\t\tIFile file = getOutputFileForLocation(location, pkg, relativeName);", "+\t\t", "+\t\t//TODO: check whether file has already been generated in this run", "+\t\tSet<IFile> parentFiles = new HashSet<IFile>(originatingElements.length);", "+\t\tfor (Element elem : originatingElements) {", "+\t\t\tIFile enclosing = _env.getEnclosingIFile(elem);", "+\t\t\tif (null != enclosing) {", "+\t\t\t\tparentFiles.add(enclosing);", "+\t\t\t}", "+\t\t}", "+\t\treturn new IdeOutputFileObject(_env, file, parentFiles);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efdb18144494c196e9df69d5c0eb15a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "378f419edc5509790bbfa3083244109f6abafbe2", "commitAfterChange": "ec60c6997892bec30aa4ae01a8f63027630c4cdf", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tpublic CompilationUnit convert(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, char[] source)", "signatureAfterChange": "  \tpublic CompilationUnit convert(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, char[] source)", "diff": ["-\t\tif(unit.compilationResult.recoveryScannerData != null) {", "-\t\t\tRecoveryScanner recoveryScanner = new RecoveryScanner(this.scanner, unit.compilationResult.recoveryScannerData.removeUnused());", "-\t\t\tthis.scanner = recoveryScanner;", "-\t\t\tthis.docParser.scanner = this.scanner;", "-\t\t}", "-\t\tthis.compilationUnitSource = source;", "-\t\tthis.compilationUnitSourceLength = source.length;", "-\t\tthis.scanner.setSource(source, unit.compilationResult);", "-\t\tCompilationUnit compilationUnit = new CompilationUnit(this.ast);", "-\t\tcompilationUnit.setStatementsRecoveryData(unit.compilationResult.recoveryScannerData);", "-", "-\t\t// Parse comments", "-\t\tint[][] comments = unit.comments;", "-\t\tif (comments != null) {", "-\t\t\tbuildCommentsTable(compilationUnit, comments);", "-\t\t}", "-", "-\t\t// handle the package declaration immediately", "-\t\t// There is no node corresponding to the package declaration", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(compilationUnit, unit);", "-\t\t}", "-\t\tif (unit.currentPackage != null) {", "-\t\t\tPackageDeclaration packageDeclaration = convertPackage(unit);", "-\t\t\tcompilationUnit.setPackage(packageDeclaration);", "-\t\t}", "-\t\torg.eclipse.jdt.internal.compiler.ast.ImportReference[] imports = unit.imports;", "-\t\tif (imports != null) {", "-\t\t\tint importLength = imports.length;", "-\t\t\tfor (int i = 0; i < importLength; i++) {", "-\t\t\t\tcompilationUnit.imports().add(convertImport(imports[i]));", "+\t\ttry {", "+\t\t\tif(unit.compilationResult.recoveryScannerData != null) {", "+\t\t\t\tRecoveryScanner recoveryScanner = new RecoveryScanner(this.scanner, unit.compilationResult.recoveryScannerData.removeUnused());", "+\t\t\t\tthis.scanner = recoveryScanner;", "+\t\t\t\tthis.docParser.scanner = this.scanner;", "-\t\t}", "-", "-\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types = unit.types;", "-\t\tif (types != null) {", "-\t\t\tint typesLength = types.length;", "-\t\t\tfor (int i = 0; i < typesLength; i++) {", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration declaration = types[i];", "-\t\t\t\tif (CharOperation.equals(declaration.name, TypeConstants.PACKAGE_INFO_NAME)) {", "-\t\t\t\t\tcontinue;", "+\t\t\tthis.compilationUnitSource = source;", "+\t\t\tthis.compilationUnitSourceLength = source.length;", "+\t\t\tthis.scanner.setSource(source, unit.compilationResult);", "+\t\t\tCompilationUnit compilationUnit = new CompilationUnit(this.ast);", "+\t\t\tcompilationUnit.setStatementsRecoveryData(unit.compilationResult.recoveryScannerData);", "+\t", "+\t\t\t// Parse comments", "+\t\t\tint[][] comments = unit.comments;", "+\t\t\tif (comments != null) {", "+\t\t\t\tbuildCommentsTable(compilationUnit, comments);", "+\t\t\t}", "+\t", "+\t\t\t// handle the package declaration immediately", "+\t\t\t// There is no node corresponding to the package declaration", "+\t\t\tif (this.resolveBindings) {", "+\t\t\t\trecordNodes(compilationUnit, unit);", "+\t\t\t}", "+\t\t\tif (unit.currentPackage != null) {", "+\t\t\t\tPackageDeclaration packageDeclaration = convertPackage(unit);", "+\t\t\t\tcompilationUnit.setPackage(packageDeclaration);", "+\t\t\t}", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.ImportReference[] imports = unit.imports;", "+\t\t\tif (imports != null) {", "+\t\t\t\tint importLength = imports.length;", "+\t\t\t\tfor (int i = 0; i < importLength; i++) {", "+\t\t\t\t\tcompilationUnit.imports().add(convertImport(imports[i]));", "-\t\t\t\tASTNode type = convert(declaration);", "-\t\t\t\tif (type == null) {", "-\t\t\t\t\tcompilationUnit.setFlags(compilationUnit.getFlags() | ASTNode.MALFORMED);", "+\t\t\t}", "+\t", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types = unit.types;", "+\t\t\tif (types != null) {", "+\t\t\t\tint typesLength = types.length;", "+\t\t\t\tfor (int i = 0; i < typesLength; i++) {", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration declaration = types[i];", "+\t\t\t\t\tif (CharOperation.equals(declaration.name, TypeConstants.PACKAGE_INFO_NAME)) {", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tASTNode type = convert(declaration);", "+\t\t\t\t\tif (type == null) {", "+\t\t\t\t\t\tcompilationUnit.setFlags(compilationUnit.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcompilationUnit.types().add(type);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcompilationUnit.setSourceRange(unit.sourceStart, unit.sourceEnd - unit.sourceStart  + 1);", "+\t", "+\t\t\tint problemLength = unit.compilationResult.problemCount;", "+\t\t\tif (problemLength != 0) {", "+\t\t\t\tCategorizedProblem[] resizedProblems = null;", "+\t\t\t\tfinal CategorizedProblem[] problems = unit.compilationResult.getProblems();", "+\t\t\t\tfinal int realProblemLength=problems.length;", "+\t\t\t\tif (realProblemLength == problemLength) {", "+\t\t\t\t\tresizedProblems = problems;", "-\t\t\t\t\tcompilationUnit.types().add(type);", "+\t\t\t\t\tSystem.arraycopy(problems, 0, (resizedProblems = new CategorizedProblem[realProblemLength]), 0, realProblemLength);", "+\t\t\t\tASTSyntaxErrorPropagator syntaxErrorPropagator = new ASTSyntaxErrorPropagator(resizedProblems);", "+\t\t\t\tcompilationUnit.accept(syntaxErrorPropagator);", "+\t\t\t\tASTRecoveryPropagator recoveryPropagator =", "+\t\t\t\t\tnew ASTRecoveryPropagator(resizedProblems, unit.compilationResult.recoveryScannerData);", "+\t\t\t\tcompilationUnit.accept(recoveryPropagator);", "+\t\t\t\tcompilationUnit.setProblems(resizedProblems);", "-\t\t}", "-\t\tcompilationUnit.setSourceRange(unit.sourceStart, unit.sourceEnd - unit.sourceStart  + 1);", "-", "-\t\tint problemLength = unit.compilationResult.problemCount;", "-\t\tif (problemLength != 0) {", "-\t\t\tCategorizedProblem[] resizedProblems = null;", "-\t\t\tfinal CategorizedProblem[] problems = unit.compilationResult.getProblems();", "-\t\t\tfinal int realProblemLength=problems.length;", "-\t\t\tif (realProblemLength == problemLength) {", "-\t\t\t\tresizedProblems = problems;", "-\t\t\t} else {", "-\t\t\t\tSystem.arraycopy(problems, 0, (resizedProblems = new CategorizedProblem[realProblemLength]), 0, realProblemLength);", "+\t\t\tif (this.resolveBindings) {", "+\t\t\t\tlookupForScopes();", "-\t\t\tASTSyntaxErrorPropagator syntaxErrorPropagator = new ASTSyntaxErrorPropagator(resizedProblems);", "-\t\t\tcompilationUnit.accept(syntaxErrorPropagator);", "-\t\t\tASTRecoveryPropagator recoveryPropagator =", "-\t\t\t\tnew ASTRecoveryPropagator(resizedProblems, unit.compilationResult.recoveryScannerData);", "-\t\t\tcompilationUnit.accept(recoveryPropagator);", "-\t\t\tcompilationUnit.setProblems(resizedProblems);", "+\t\t\tcompilationUnit.initCommentMapper(this.scanner);", "+\t\t\treturn compilationUnit;", "+\t\t} catch(RuntimeException e) {", "+\t\t\tStringBuffer message = new StringBuffer(\"Exception occurred during compilation unit conversion:\");  //$NON-NLS-1$", "+\t\t\tString lineDelimiter = Util.findLineSeparator(source);", "+\t\t\tif (lineDelimiter == null) lineDelimiter = System.getProperty(\"line.separator\");//$NON-NLS-1$", "+\t\t\tmessage.append(lineDelimiter);", "+\t\t\tmessage.append(\"----------------------------------- SOURCE BEGIN -------------------------------------\"); //$NON-NLS-1$", "+\t\t\tmessage.append(lineDelimiter);", "+\t\t\tmessage.append(source);", "+\t\t\tmessage.append(lineDelimiter);", "+\t\t\tmessage.append(\"----------------------------------- SOURCE END -------------------------------------\"); //$NON-NLS-1$", "+\t\t\tUtil.log(e, message.toString());", "+\t\t\tthrow e;", "-\t\tif (this.resolveBindings) {", "-\t\t\tlookupForScopes();", "-\t\t}", "-\t\tcompilationUnit.initCommentMapper(this.scanner);", "-\t\treturn compilationUnit;"]}], "num": 28005}
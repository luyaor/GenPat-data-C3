{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "835ef700e7e4975cf519be7fec44d753", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ff3588e562ed77049b0ff1b3b607ae7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, IWorkspace workspace) throws JavaModelException", "signatureAfterChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws JavaModelException", "diff": ["-protected void locatePackageDeclarations(SearchPattern searchPattern, IWorkspace workspace) throws JavaModelException {", "+protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws JavaModelException {", "-\t\t\tlocatePackageDeclarations(patterns[i], workspace);", "+\t\t\tlocatePackageDeclarations(patterns[i], participant);", "-\t\t\tthis.currentPossibleMatch = new PossibleMatch(this, searchPattern.focus.getResource(), null);", "+\t\t\tIResource resource = searchPattern.focus.getResource();", "+\t\t\tSearchDocument document = participant.getDocument(resource.getFullPath().toString());", "+\t\t\tthis.currentPossibleMatch = new PossibleMatch(this, resource, null, document);", "-\t\t\t\t\t\tthis.currentPossibleMatch = new PossibleMatch(this, resource, null);", "+\t\t\t\t\t\tSearchDocument document = participant.getDocument(resource.getFullPath().toString());", "+\t\t\t\t\t\tthis.currentPossibleMatch = new PossibleMatch(this, resource, null, document);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9137314cbbb23b5be69363eadae2182c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "747530d930cbddbea16198538d3164321f1be0b2", "commitAfterChange": "70000ab48e563f19622aff0c653f3b2bb65b1ad9", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws CoreException", "signatureAfterChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws CoreException", "diff": ["-\t\t\tSearchDocument document = participant.getDocument(focus.getPath().toString());", "-\t\t\tthis.currentPossibleMatch = new PossibleMatch(this, focus.getResource(), null, document, ((InternalSearchPattern) searchPattern).mustResolve);", "-\t\t\t\tSearchMatch match = newDeclarationMatch(focus.getAncestor(IJavaElement.PACKAGE_FRAGMENT), null/*no binding*/, SearchMatch.A_ACCURATE, -1, -1);", "+\t\t\t\tSearchMatch match = new PackageDeclarationMatch(focus.getAncestor(IJavaElement.PACKAGE_FRAGMENT), SearchMatch.A_ACCURATE, -1, -1, participant, focus.getResource());", "-\t\t\t\t\t\tSearchDocument document = participant.getDocument(resource.getFullPath().toString());", "-\t\t\t\t\t\tthis.currentPossibleMatch = new PossibleMatch(this, resource, null, document, ((InternalSearchPattern) searchPattern).mustResolve);", "-\t\t\t\t\t\t\t\tSearchMatch match = newDeclarationMatch(pkg, null/*no binding*/, SearchMatch.A_ACCURATE, -1, -1);", "+\t\t\t\t\t\t\t\tSearchMatch match = new PackageDeclarationMatch(pkg, SearchMatch.A_ACCURATE, -1, -1, participant, resource);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eac8d3d0b4e2aad3bfed1b895fc73393", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "55fc1d09be22c3edd63ee3458e199979c3f77613", "commitAfterChange": "84e7ccc666453bf6300ee2ec41ee2751e7c7737b", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws CoreException", "signatureAfterChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant, IJavaProject[] projects) throws CoreException", "diff": ["-protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws CoreException {", "+protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant, IJavaProject[] projects) throws CoreException {", "+\tif (this.progressMonitor != null && this.progressMonitor.isCanceled()) {", "+\t\tthrow new OperationCanceledException();", "+\t}", "-\t\tfor (int i = 0, length = patterns.length; i < length; i++)", "-\t\t\tlocatePackageDeclarations(patterns[i], participant);", "+\t\tfor (int i = 0, length = patterns.length; i < length; i++) {", "+\t\t\tlocatePackageDeclarations(patterns[i], participant, projects);", "+\t\t}", "-\t\tIJavaProject[] projects = JavaModelManager.getJavaModelManager().getJavaModel().getJavaProjects();", "+\t\t\tif (this.progressMonitor != null) {", "+\t\t\t\tif (this.progressMonitor.isCanceled()) throw new OperationCanceledException();", "+\t\t\t\tthis.progressWorked++;", "+\t\t\t\tif ((this.progressWorked%this.progressStep)==0) this.progressMonitor.worked(this.progressStep);", "+\t\t\t}"]}], "num": 55734}
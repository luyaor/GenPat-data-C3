{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc14dee2876cde85910e98d0b5928478", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e7993f3dd0774df85b0407d3c255e76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "490cc39003ba5daaddf4fdf25c1c4ad52d071fa8", "commitAfterChange": "63cc2b02a5dc2c73f3b525966213744b7c2edcf0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public final boolean areTypesCastCompatible(BlockScope scope, TypeBinding castTb, TypeBinding expressionTb)", "signatureAfterChange": " public final boolean areTypesCastCompatible(BlockScope scope, TypeBinding castTb, TypeBinding expressionTb)", "diff": ["-\t\t\tif (scope.areTypesCompatible(expressionTb, castTb))", "+\t\t\tif (Scope.areTypesCompatible(expressionTb, castTb))", "-\t\t\t\tif (scope.areTypesCompatible(castTb, expressionTb)) {", "+\t\t\t\tif (Scope.areTypesCompatible(castTb, expressionTb)) {", "-\t\t\t\tif (scope.areTypesCompatible(expressionTb, castTb))", "+\t\t\t\tif (Scope.areTypesCompatible(expressionTb, castTb))", "-\t\t\t\tif (scope.areTypesCompatible(castTb, expressionTb)) {", "+\t\t\t\tif (Scope.areTypesCompatible(castTb, expressionTb)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6cb2fc86993da7a9de778e7817b7fa0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "67da1da15e9afbcd33679f07597c706e7915cf4a", "commitAfterChange": "027fccb2c17e0f0d2b28705c6704af10fc8ce0aa", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tprivate int computeRelevanceForExpectingType(TypeBinding proposalType)", "signatureAfterChange": " \tprivate int computeRelevanceForExpectingType(TypeBinding proposalType)", "diff": ["-\t\t\tfor (int i = 0; i < expectedTypes.length; i++) {", "-\t\t\t\tif(Scope.areTypesCompatible(proposalType, expectedTypes[i])) {", "+\t\t\tfor (int i = 0; i <= expectedTypesCount; i++) {", "+\t\t\t\tif((expectedTypesFilter & SUBTYPE) != 0", "+\t\t\t\t\t&& Scope.areTypesCompatible(proposalType, expectedTypes[i])) {", "+\t\t\t\t\t\treturn R_EXPECTED_TYPE;", "+\t\t\t\t}", "+\t\t\t\tif((expectedTypesFilter & SUPERTYPE) != 0", "+\t\t\t\t\t&& Scope.areTypesCompatible(expectedTypes[i], proposalType)) {"]}], "num": 37661}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f53a739e33d69d54deeb3f995599ebf", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b41e35f2c4f78cb1c96458adef87cb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "6ca2c17de7d2cf75286045cf5fe4db47b5ffe702", "commitAfterChange": "ec09b25a18c19092cc9fe16e9fc3af2be1689d02", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected boolean generateInfos( \tOpenableElementInfo info, \tIProgressMonitor pm, \tMap newElements, \tIResource underlyingResource)\tthrows JavaModelException", "signatureAfterChange": " protected boolean generateInfos( \tOpenableElementInfo info, \tIProgressMonitor pm, \tMap newElements, \tIResource underlyingResource)\tthrows JavaModelException", "diff": ["-\ttry {", "-\t\tIProject[] projects = this.getWorkspace().getRoot().getProjects();", "-\t\tfor (int i = 0, max = projects.length; i < max; i++) {", "-\t\t\tIProject project = projects[i];", "-\t\t\tif (project.isOpen() && project.hasNature(JavaCore.NATURE_ID)) {", "-\t\t\t\tinfo.addChild(getJavaProject(project));", "-\t\t\t}", "+\tIProject[] projects = this.getWorkspace().getRoot().getProjects();", "+\tfor (int i = 0, max = projects.length; i < max; i++) {", "+\t\tIProject project = projects[i];", "+\t\tif (JavaProject.hasJavaNature(project)) {", "+\t\t\tinfo.addChild(getJavaProject(project));", "-\t} catch (CoreException e) {", "-\t\tthrow new JavaModelException(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f38f08992e13fa08a52016987d528f9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "b4ed0b65fa7e4dab7f64c48a1e0994235fd71c07", "commitAfterChange": "704815efdb421b1509fbc4df9cf53393bfae994b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r \tpublic void locateMatches(\r \t\tString[] filePaths, \r \t\tIWorkspace workspace,\r \t\tIWorkingCopy[] workingCopies, \r \t\tIProgressMonitor progressMonitor)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic void locateMatches(\r \t\tString[] filePaths, \r \t\tIWorkspace workspace,\r \t\tIWorkingCopy[] workingCopies, \r \t\tIProgressMonitor progressMonitor)\r \t\tthrows JavaModelException", "diff": ["-\t\t\t\t\ttry {\r", "-\t\t\t\t\t\tIResource res = workingCopy.getOriginalElement().getUnderlyingResource();\r", "-\t\t\t\t\t\tString path = res.getFullPath().toString();\r", "-\t\t\t\t\t\twcPaths.put(path, workingCopy);\r", "-\t\t\t\t\t\tnewPaths[i] = path;\r", "-\t\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\t\t// continue with next working copy\r", "-\t\t\t\t\t}\r", "+\t\t\t\t\tString path = workingCopy.getOriginalElement().getPath().toString();\r", "+\t\t\t\t\twcPaths.put(path, workingCopy);\r", "+\t\t\t\t\tnewPaths[i] = path;\r"]}], "num": 37601}
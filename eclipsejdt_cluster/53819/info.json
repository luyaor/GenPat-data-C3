{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1062d0c51da7e86a0363b76431d0cb76", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1052f977c7162fa962f4fc9138a75c86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/InternalASTRewrite.java", "commitBeforeChange": "030294305389e5486e7f63658830617d44acd9c2", "commitAfterChange": "3f4495ecc3a42cb049fa3e01aeaf49a7722af380", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic TextEdit rewriteAST(IDocument document, Map options)", "signatureAfterChange": " \tpublic TextEdit rewriteAST(IDocument document, Map options)", "diff": ["-\t\t\tASTRewriteAnalyzer visitor = new ASTRewriteAnalyzer(document, result, this.eventStore, this.nodeStore, options, xsrComputer);", "+\t\t\tchar[] content= document.get().toCharArray();", "+\t\t\tLineInformation lineInfo= LineInformation.create(document);", "+\t\t\tString lineDelim= TextUtilities.getDefaultLineDelimiter(document);", "+\t\t\t", "+\t\t\tASTRewriteAnalyzer visitor = new ASTRewriteAnalyzer(content, lineInfo, lineDelim, result, this.eventStore, this.nodeStore, options, xsrComputer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1067469b47fea4f2867b698574592f19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/EncodingTests.java", "commitBeforeChange": "65a63579ebc9b37573db7995b64988407cf25ede", "commitAfterChange": "06e8c1940b7fce6b86315eb81900d27eb1279bce", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void test009() throws JavaModelException, CoreException", "signatureAfterChange": " \tpublic void test009() throws JavaModelException, CoreException, UnsupportedEncodingException", "diff": ["-\tpublic void test009() throws JavaModelException, CoreException {", "+\tpublic void test009() throws JavaModelException, CoreException, UnsupportedEncodingException {", "-\t\t// Cannot compare bytes array as read UTF-8 using ASCII encoding destroy meaningful bytes...", "+\t\t// Now compare bytes array", "+\t\tbyte[] sourceBytes = source.getBytes(systemEncoding);", "+\t\tbyte[] encodedBytes = Util.getResourceContentsAsByteArray(this.utf8File);", "+\t\tassertEquals(\"Wrong size of encoded string\", encodedBytes.length, sourceBytes.length);", "+\t\t// Cannot compare arrays contents as read UTF-8 using ASCII encoding destroy meaningful bytes..."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "120237b88bb1699b248e1092b89715d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "03090ea9c81bd8fe8a7eb236f589d1db6d474ff2", "commitAfterChange": "5ba78bc4855fd33b2ec856976b96ed49b0b12113", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \r \tprivate void findImports(CompletionOnImportReference importReference)", "signatureAfterChange": "\r \r \tprivate void findImports(CompletionOnImportReference importReference)", "diff": ["-\r", "-\t\tchar[] importName = CharOperation.concatWith(importReference.tokens, '.');\r", "-\r", "+\t\tchar[][] tokens = importReference.tokens;\r", "+\t\t\t\r", "+\t\tchar[] importName = CharOperation.concatWith(tokens, '.');\r", "+\t\t\r", "+\t\t\t\r", "+\t\tchar[] token = tokens[tokens.length - 1];\r", "+\t\tif(token != null && token.length == 0)\r", "+\t\t\timportName = CharOperation.concat(importName, new char[]{'.'});\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20067d5530c2208928670f934a5c28e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected void generateClasspathChangeDeltas()", "signatureAfterChange": " \tprotected void generateClasspathChangeDeltas()", "diff": ["+\t\t\t\t\t\t\tfinal char[][] inclusionPatterns = ((ClasspathEntry)oldEntry).fullInclusionPatternChars();", "-\t\t\t\t\t\t\t\t\tindexManager.removeSourceFolderFromIndex(project, path, exclusionPatterns);", "+\t\t\t\t\t\t\t\t\tindexManager.removeSourceFolderFromIndex(project, path, inclusionPatterns, exclusionPatterns);", "+\t\t\t\t\t\t\tfinal char[][] inclusionPatterns = ((ClasspathEntry)entry).fullInclusionPatternChars();", "-\t\t\t\t\t\t\t\t\tindexManager.indexSourceFolder(project, path, exclusionPatterns);", "+\t\t\t\t\t\t\t\t\tindexManager.indexSourceFolder(project, path, inclusionPatterns, exclusionPatterns);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39342d943fecd345aa7658fa9e0967ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreatePackageFragmentOperation.java", "commitBeforeChange": "dec2dac6f78a5ffa915ffd3b73cb386c60b72cae", "commitAfterChange": "eead3352ceb339c6e7d1c285e537cdff0d79d4a6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void executeOperation() throws JavaModelException", "signatureAfterChange": " protected void executeOperation() throws JavaModelException", "diff": ["-\tJavaElementDelta delta = newJavaElementDelta();", "+\tJavaElementDelta delta = null;", "+\tchar[][] exclusionPatterns = ((PackageFragmentRoot)root).getExclusionPatterns();", "-\t\t\tdelta.added(addedFrag);", "+\t\t\tif (!Util.isExcluded(subFolder, exclusionPatterns)) {", "+\t\t\t\tif (delta == null) {", "+\t\t\t\t\tdelta = newJavaElementDelta();", "+\t\t\t\t}", "+\t\t\t\tdelta.added(addedFrag);", "+\t\t\t}", "-\t\taddDelta(delta);", "+\t\tif (delta != null) {", "+\t\t\taddDelta(delta);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4780186c3c0484a527a61c2d95870572", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "9bceec187ba43787caa324b9fb83da7b577289a5", "commitAfterChange": "3509a5d95b52b3a35da5e8a351527548e546ccbb", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic String getBinaryName()", "signatureAfterChange": " \tpublic String getBinaryName()", "diff": ["-\t\treturn new String(constantPoolName);", "+\t\tint length = constantPoolName.length;", "+\t\tchar[] dotSeparated = new char[length];", "+\t\tSystem.arraycopy(constantPoolName, 0, dotSeparated, 0, length);", "+\t\tCharOperation.replace(dotSeparated, '/', '.');", "+\t\treturn new String(dotSeparated);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79425f4fea42add9dd1c166e41a53b14", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java", "commitBeforeChange": "a3da1013b6fe549ad5c2ee5b7dc726eba38ff59e", "commitAfterChange": "30692448718de71df165cc52c018bee7df31a8fb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void indexDocument()", "signatureAfterChange": " \tpublic void indexDocument()", "diff": ["+\t\t\t// type parameters", "+\t\t\tchar[][] typeParameterSignatures = null;", "+\t\t\tchar[] genericSignature = reader.getGenericSignature();", "+\t\t\tif (genericSignature != null) {", "+\t\t\t\tCharOperation.replace(genericSignature, '/', '.');", "+\t\t\t\ttypeParameterSignatures = Signature.getTypeParameters(genericSignature);", "+\t\t\t}", "+\t\t\t", "-\t\t\t\t\taddClassDeclaration(reader.getModifiers(), packageName, name, enclosingTypeNames, superclass, superinterfaces);", "+\t\t\t\t\taddClassDeclaration(reader.getModifiers(), packageName, name, enclosingTypeNames, superclass, superinterfaces, typeParameterSignatures);", "-\t\t\t\t\taddInterfaceDeclaration(reader.getModifiers(), packageName, name, enclosingTypeNames, superinterfaces);", "+\t\t\t\t\taddInterfaceDeclaration(reader.getModifiers(), packageName, name, enclosingTypeNames, superinterfaces, typeParameterSignatures);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8dfae657e5033913ed17b150b20ae0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public String getReturnType() throws JavaModelException", "signatureAfterChange": " public String getReturnType() throws JavaModelException", "diff": ["-\t\tString returnTypeName= Signature.getReturnType(new String(info.getMethodDescriptor()));", "+\t\tchar[] genericSignature = info.getGenericSignature();", "+\t\tchar[] signature = genericSignature == null ? info.getMethodDescriptor() : genericSignature;", "+\t\tchar[] dotBasedSignature = CharOperation.replaceOnCopy(signature, '/', '.');", "+\t\tString returnTypeName= Signature.getReturnType(new String(dotBasedSignature));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c714777b7d2b28ccad3d8aba07ec8179", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "989e5b7fcc987dd61335186ef5fa92a50d252afe", "commitAfterChange": "432de3d1eaf6fa0fd133ac0d8c6493d078f78071", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate void processPackageFragmentResource(IPackageFragment source, IPackageFragmentRoot root, String newName) throws JavaModelException", "signatureAfterChange": " \tprivate void processPackageFragmentResource(IPackageFragment source, IPackageFragmentRoot root, String newName) throws JavaModelException", "diff": ["+\t\t\t\tchar[][] inclusionPatterns = ((PackageFragmentRoot)root).fullInclusionPatternChars();", "+\t\t\t\tchar[][] exclusionPatterns = ((PackageFragmentRoot)root).fullExclusionPatternChars();", "+\t\t\t\t\t\tif (Util.isExcluded(cu.getPath(), inclusionPatterns, exclusionPatterns, false/*not a folder*/)) continue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8eeeef08a1d7f6ff79e96337782e1c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "582314aebaa81c30307377892044ded507af1f74", "commitAfterChange": "c0ecc47cac9e40a73cc3ed5a5be93bbace7cb891", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic char[] computeUniqueKey(boolean withAccessFlags)", "signatureAfterChange": " \tpublic char[] computeUniqueKey(boolean withAccessFlags)", "diff": ["+\t */", "+\t\tchar[] genericTypeKey = this.genericType.computeUniqueKey(false/*without access flags*/);", "+\t\tchar[] wildCardKey;", "-                return WILDCARD_STAR;", "+                wildCardKey = WILDCARD_STAR;", "+                break;", "-                return CharOperation.concat(WILDCARD_PLUS, this.bound.computeUniqueKey(false/*without access flags*/));", "+                wildCardKey = CharOperation.concat(WILDCARD_PLUS, this.bound.computeUniqueKey(false/*without access flags*/));", "+                break;", "-\t\t\t    return CharOperation.concat(WILDCARD_MINUS, this.bound.computeUniqueKey(false/*without access flags*/));", "+\t\t\t    wildCardKey = CharOperation.concat(WILDCARD_MINUS, this.bound.computeUniqueKey(false/*without access flags*/));", "+\t\t\t\tbreak;", "+        return CharOperation.concat(genericTypeKey, wildCardKey);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db5adf094d7522fa5da6c5856fe812c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "9f8931bf92b7966fbd8c101a448f79f7965fbbf9", "commitAfterChange": "3bf5bab95449ec256a601c2551910573083178b4", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprivate void selectDeclaration(CompilationUnitDeclaration compilationUnit)", "signatureAfterChange": " \tprivate boolean selectDeclaration(CompilationUnitDeclaration compilationUnit)", "diff": ["-\tprivate void selectDeclaration(CompilationUnitDeclaration compilationUnit){", "+\tprivate boolean selectDeclaration(CompilationUnitDeclaration compilationUnit){", "-\t\tif (assistIdentifier == null) return;", "+\t\tif (assistIdentifier == null) return false;", "+\t\tImportReference currentPackage = compilationUnit.currentPackage;", "+\t\tchar[] packageName = currentPackage == null ? new char[0] : CharOperation.concatWith(currentPackage.tokens, '.');", "-\t\t\tselectDeclaration(types[i], assistIdentifier);", "+\t\t\tif(selectDeclaration(types[i], assistIdentifier, packageName))", "+\t\t\t\treturn true;", "+\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8a5405697fee953dae610eee3af3eeb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "4c370db17fcad0e528d16b2fecef0952e714ead1", "commitAfterChange": "73b4b882573d866af4a2886a5430207907acc99e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic void test0016() throws JavaModelException", "signatureAfterChange": "  \tpublic void test0016() throws JavaModelException", "diff": ["-//\t\tchar[] source = sourceUnit.getSource().toCharArray();", "+\t\tchar[] source = sourceUnit.getSource().toCharArray();", "+\t\tASTNode node = getASTNode(compilationUnit, 0, 5);", "+\t\tassertEquals(\"Wrong first character\", '<', source[node.getStartPosition()]);"]}], "num": 53819}
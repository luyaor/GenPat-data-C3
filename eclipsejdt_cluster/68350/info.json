{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af551bb2a4ae61dc554a4f9c8788cef8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51d2e80481970c7de525e962af217bd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/BinaryFileOutputStream.java", "commitBeforeChange": "0b996c62d78a14d0f0ee5313e3a85270bb3aeb0f", "commitAfterChange": "58aaea35ae4c64a4ecebe06d6b1ab1679e04698a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t@Override \tpublic void close() throws IOException", "signatureAfterChange": " \t \t@Override \tpublic void close() throws IOException", "diff": ["-\t\tInputStream contents = null;", "+\t\t", "+\t\tInputStream contents = new ByteArrayInputStream(toByteArray());", "-\t\t\tcontents = new ByteArrayInputStream(toByteArray());", "+\t\t\t", "+\t\t\tboolean contentsChanged = true;", "-\t\t\t\treturn;", "-\t\t\tboolean needToWriteData = true;", "-\t\t\tInputStream in = null;", "-\t\t\tInputStream oldData = null;", "-\t\t\ttry {", "-\t\t\t\t// Only write the contents if the data is different", "-\t\t\t\tin = new ByteArrayInputStream(toByteArray());", "-\t\t\t\toldData = new BufferedInputStream(_file.getContents());", "-\t\t\t\tif (FileSystemUtil.compareStreams(in, oldData)) {", "-\t\t\t\t\tneedToWriteData = false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcatch (CoreException ce) {", "-\t\t\t\t// Ignore -- couldn't read the old data, so assume it's different", "-\t\t\t}", "-\t\t\tfinally {", "+\t\t\telse {", "+\t\t\t\tInputStream in = null;", "+\t\t\t\tInputStream oldData = null;", "-\t\t\t\t\tif (in != null) in.close(); ", "-\t\t\t\t} ", "-\t\t\t\tcatch (IOException ioe) {", "+\t\t\t\t\t// Only write the contents if the data is different", "+\t\t\t\t\tin = new ByteArrayInputStream(toByteArray());", "+\t\t\t\t\toldData = new BufferedInputStream(_file.getContents());", "+\t\t\t\t\tif (FileSystemUtil.compareStreams(in, oldData)) {", "+\t\t\t\t\t\tcontentsChanged = false;", "+\t\t\t\t\t}", "-\t\t\t\ttry {", "-\t\t\t\t\tif (oldData != null) oldData.close(); ", "-\t\t\t\t} ", "-\t\t\t\tcatch (IOException ioe) {", "+\t\t\t\tcatch (CoreException ce) {", "+\t\t\t\t\t// Ignore -- couldn't read the old data, so assume it's different", "+\t\t\t\t\tcontentsChanged = true;", "-\t\t\t}", "-\t\t\tif (needToWriteData) {", "-\t\t\t\tcontents.reset();", "-\t\t\t\tsaveToDisk(contents, false);", "+\t\t\t\tfinally {", "+\t\t\t\t\tcloseInputStream(in);", "+\t\t\t\t\tcloseInputStream(oldData);", "+\t\t\t\t}", "+\t\t\t\tif (contentsChanged) {", "+\t\t\t\t\tcontents.reset();", "+\t\t\t\t\tsaveToDisk(contents, false);", "+\t\t\t\t}", "+\t\t\tcloseInputStream(contents);", "+\t\t}", "+\t\t\t", "+\t\tIFile parentFile = _env.getFile();", "+\t\tif (parentFile != null) {", "+\t\t\t_env.getAptProject().getGeneratedFileManager().addEntryToFileMaps(parentFile, _file);", "+\t\t}", "+\t}", "-\t\t\t\tif (contents != null) contents.close(); ", "-\t\t\t} ", "-\t\t\tcatch (IOException ioe) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2ff744b2717be296d26bd092c787f94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/BinaryFileOutputStream.java", "commitBeforeChange": "7500727de4fcd9463cbf3fa6897680f7408a210c", "commitAfterChange": "b857987e664cb278638647fdea307afe81b34f28", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t@Override \tpublic void close() throws IOException", "signatureAfterChange": " \t \t@Override \tpublic void close() throws IOException", "diff": ["-\t\tInputStream contents = new ByteArrayInputStream(toByteArray());", "-\t\tif (!_file.exists()) {", "-\t\t\tsaveToDisk(contents, true);", "-\t\t\treturn;", "-\t\t}", "-\t\tboolean needToWriteData = true;", "+\t\tInputStream contents = null;", "-\t\t\t// Only write the contents if the data is different", "-\t\t\tInputStream in = new ByteArrayInputStream(toByteArray());", "-\t\t\tInputStream oldData = new BufferedInputStream(_file.getContents());", "-\t\t\tif (FileSystemUtil.compareStreams(in, oldData)) {", "-\t\t\t\tneedToWriteData = false;", "+\t\t\tcontents = new ByteArrayInputStream(toByteArray());", "+\t\t\tif (!_file.exists()) {", "+\t\t\t\tsaveToDisk(contents, true);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tboolean needToWriteData = true;", "+\t\t\tInputStream in = null;", "+\t\t\tInputStream oldData = null;", "+\t\t\ttry {", "+\t\t\t\t// Only write the contents if the data is different", "+\t\t\t\tin = new ByteArrayInputStream(toByteArray());", "+\t\t\t\toldData = new BufferedInputStream(_file.getContents());", "+\t\t\t\tif (FileSystemUtil.compareStreams(in, oldData)) {", "+\t\t\t\t\tneedToWriteData = false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcatch (CoreException ce) {", "+\t\t\t\t// Ignore -- couldn't read the old data, so assume it's different", "+\t\t\t}", "+\t\t\tfinally {", "+\t\t\t\ttry {", "+\t\t\t\t\tif (in != null) in.close(); ", "+\t\t\t\t} ", "+\t\t\t\tcatch (IOException ioe) {", "+\t\t\t\t}", "+\t\t\t\ttry {", "+\t\t\t\t\tif (oldData != null) oldData.close(); ", "+\t\t\t\t} ", "+\t\t\t\tcatch (IOException ioe) {", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (needToWriteData) {", "+\t\t\t\tcontents.reset();", "+\t\t\t\tsaveToDisk(contents, false);", "-\t\tcatch (CoreException ce) {", "-\t\t\t// Ignore -- couldn't read the old data, so assume it's different", "-\t\t}", "-\t\tif (needToWriteData) {", "-\t\t\tcontents.reset();", "-\t\t\tsaveToDisk(contents, false);", "+\t\tfinally {", "+\t\t\ttry {", "+\t\t\t\tif (contents != null) contents.close(); ", "+\t\t\t} ", "+\t\t\tcatch (IOException ioe) {", "+\t\t\t}"]}], "num": 68350}
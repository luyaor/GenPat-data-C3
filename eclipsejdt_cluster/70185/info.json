{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd58da8d4b252c211a49297945050a69", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0192c5730e48301210216bd33238280e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "06e2337ca747c930ab0dfce473967ff17b176d61", "commitAfterChange": "994b7e2201a6044f122169d1a8922423e74571c5", "methodNumberBeforeChange": 254, "methodNumberAfterChange": 254, "signatureBeforeChange": "  public void testBug252341a() throws Exception", "signatureAfterChange": "  public void testBug252341a() throws Exception", "diff": ["-\t\tIClasspathEntry[] chains = JavaCore.getReferencedClasspathEntries(rawClasspath[2], p);", "+\t\tIClasspathEntry[] chains = JavaCore.getReferencedClasspathEntries(rawClasspath[2], null);", "+\t\tassertClasspathEquals(chains, ", "+\t\t\t\t\"/P/lib2.jar[CPE_LIBRARY][K_BINARY][isExported:true]\\n\" + ", "+\t\t\t\t\"/P/lib3.jar[CPE_LIBRARY][K_BINARY][isExported:true]\");", "+", "+\t\tchains = JavaCore.getReferencedClasspathEntries(rawClasspath[2], p);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9dbed8b78216d41716e6fcd23cbe54e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "e4262ef08c6f8e26e57ca0c6211e0fdea3f40578", "commitAfterChange": "6a7a52c96b7229ab86908d69ec0e914d08a5352f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tvoid checkMemberValues(MemberValuePair[] valuePairs, Scope scope)", "signatureAfterChange": " \t \t \tvoid checkMemberValues(MemberValuePair[] valuePairs, Scope scope)", "diff": ["+\t", "-\t\t\t\t\tmemberValue.setExpectedType(method.returnType); // needed in case of generic method invocation", "+\t\t\t\t\texpectedValueType = method.returnType;", "+\t\t\t\t\tmemberValue.setExpectedType(expectedValueType); // needed in case of generic method invocation", "+\t\t\t\t\tcheckAnnotationValue(expectedValueType, method.declaringClass, method.selector, memberValue, scope);", "+\t\t\t\t\t"]}], "num": 70185}
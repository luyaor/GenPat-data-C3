{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eefec39d82b58740a9a17dfee0461d88", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bf4be1bb22c7ed28cab6fec2007e10f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemHandler.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void handle( \tint problemId,  \tString[] problemArguments,  \tString[] messageArguments, \tint severity,  \tint problemStartPosition,  \tint problemEndPosition,  \tReferenceContext referenceContext,  \tCompilationResult unitResult)", "signatureAfterChange": " public void handle( \tint problemId,  \tString[] problemArguments,  \tString[] messageArguments, \tint severity,  \tint problemStartPosition,  \tint problemEndPosition,  \tReferenceContext referenceContext,  \tCompilationResult unitResult)", "diff": ["-\tif (severity == Ignore)", "+\tif (severity == ProblemSeverities.Ignore)", "-\t\tif ((severity & Error) != 0) { // non reportable error is fatal", "+\t\tif ((severity & ProblemSeverities.Error) != 0) { // non reportable error is fatal", "-\t\t\tproblemEndPosition, ", "+\t\t\tproblemEndPosition,", "-\tswitch (severity & Error) {", "-\t\tcase Error :", "+\tswitch (severity & ProblemSeverities.Error) {", "+\t\tcase ProblemSeverities.Error :", "-\t\t\treferenceContext.tagAsHavingErrors();", "-", "-\t\t\t// should abort ?", "-\t\t\tint abortLevel;", "-\t\t\tif ((abortLevel = ", "-\t\t\t\t(this.policy.stopOnFirstError() ? AbortCompilation : severity & Abort)) != 0) {", "-", "-\t\t\t\treferenceContext.abort(abortLevel, problem);", "+\t\t\tif ((severity & ProblemSeverities.Optional) == 0 || options.treatOptionalErrorAsFatal) {", "+\t\t\t\treferenceContext.tagAsHavingErrors();", "+\t\t\t\t// should abort ?", "+\t\t\t\tint abortLevel;", "+\t\t\t\tif ((abortLevel = \tthis.policy.stopOnFirstError() ? ProblemSeverities.AbortCompilation : severity & ProblemSeverities.Abort) != 0) {", "+\t\t\t\t\treferenceContext.abort(abortLevel, problem);", "+\t\t\t\t}", "-\t\tcase Warning :", "+\t\tcase ProblemSeverities.Warning :"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9907c40f8e052c6366f4fff697c91dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["-\t\t\tif (this.scope.compilerOptions().sourceLevel < JDK1_5) break checkOverride;", "+\t\t\tif (this.scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_5) break checkOverride;", "-\t\t\t\tif ((bindingModifiers & AccOverriding) == 0 || isInterfaceMethod)", "+\t\t\t\tif ((bindingModifiers & ExtraCompilerModifiers.AccOverriding) == 0 || isInterfaceMethod)", "-\t\t\t} else if (!isInterfaceMethod \t&& (bindingModifiers & (AccStatic|AccOverriding)) == AccOverriding) {", "+\t\t\t} else if (!isInterfaceMethod \t&& (bindingModifiers & (ClassFileConstants.AccStatic|ExtraCompilerModifiers.AccOverriding)) == ExtraCompilerModifiers.AccOverriding) {", "-\t\t\t\tif ((this.modifiers & AccSemicolonBody) != 0) {", "-\t\t\t\t\tif ((this.modifiers & AccNative) == 0)", "-\t\t\t\t\t\tif ((this.modifiers & AccAbstract) == 0)", "+\t\t\t\tif ((this.modifiers & ExtraCompilerModifiers.AccSemicolonBody) != 0) {", "+\t\t\t\t\tif ((this.modifiers & ClassFileConstants.AccNative) == 0)", "+\t\t\t\t\t\tif ((this.modifiers & ClassFileConstants.AccAbstract) == 0)", "-\t\t\t\t\tif (((this.modifiers & AccNative) != 0) || ((this.modifiers & AccAbstract) != 0))", "+\t\t\t\t\tif (((this.modifiers & ClassFileConstants.AccNative) != 0) || ((this.modifiers & ClassFileConstants.AccAbstract) != 0))"]}], "num": 69816}
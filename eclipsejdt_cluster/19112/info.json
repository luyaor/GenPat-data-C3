{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d870810936b176fd86ae287be6694f8e", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f52845fdc3142009e56663258ae1821", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocFieldReference.java", "commitBeforeChange": "14ae0f182797d2ba7f6b9ecff74cd13258c4bc42", "commitAfterChange": "f5efa602aeef0210ebcb4409f8495bb2f1c527b4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprotected TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\t\t\tMethodBinding possibleMethod = this.receiver.isThis()", "-\t\t\t\t\t? scope.getImplicitMethod(this.token, Binding.NO_TYPES, this)", "-\t\t\t\t\t: scope.getMethod(refBinding, this.token, Binding.NO_TYPES, this);", "+\t\t\t\tchar[] selector = this.token;", "+\t\t\t\tMethodBinding possibleMethod = null;", "+\t\t\t\tif (CharOperation.equals(this.actualReceiverType.sourceName(), selector)) {", "+\t\t\t\t\tpossibleMethod = scope.getConstructor(refBinding, Binding.NO_TYPES, this);", "+\t\t\t\t} else {", "+\t\t\t\t\tpossibleMethod = this.receiver.isThis()", "+\t\t\t\t\t\t? scope.getImplicitMethod(selector, Binding.NO_TYPES, this)", "+\t\t\t\t\t\t: scope.getMethod(refBinding, selector, Binding.NO_TYPES, this);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fc785b855699f83d2a70fa377cf3d17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "14ae0f182797d2ba7f6b9ecff74cd13258c4bc42", "commitAfterChange": "f5efa602aeef0210ebcb4409f8495bb2f1c527b4", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate void resolveReference(Expression reference, Scope scope)", "signatureAfterChange": "  \tprivate void resolveReference(Expression reference, Scope scope)", "diff": ["-\t\t\t\t\tfieldRef.methodBinding = scope.findMethod((ReferenceBinding)fieldRef.actualReceiverType, fieldRef.token, new TypeBinding[0], fieldRef);", "+\t\t\t\t\tReferenceBinding resolvedType = (ReferenceBinding) fieldRef.actualReceiverType;", "+\t\t\t\t\tif (CharOperation.equals(resolvedType.sourceName(), fieldRef.token)) {", "+\t\t\t\t\t\tfieldRef.methodBinding = scope.getConstructor(resolvedType, Binding.NO_TYPES, fieldRef);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfieldRef.methodBinding = scope.findMethod(resolvedType, fieldRef.token, Binding.NO_TYPES, fieldRef);", "+\t\t\t\t\t}"]}], "num": 19112}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8af9483ee6b3aebbc6a1d2841bd7dd6d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e8b168e6fa4d894f3d533d5384bee00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "25be1dbaf8fb1fd662379be5af2493a9cf321ce6", "commitAfterChange": "e044b611f0f1c6c6d210b119e4ddf6a868a2b664", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\t// check for deprecated receiver type", "-\t\t\t\t\t\t// deprecation check for receiver type if not first token", "-\t\t\t\t\t\tif (indexOfFirstFieldBinding > 1) {", "-\t\t\t\t\t\t\tif (isTypeUseDeprecated(this.actualReceiverType, scope))", "-\t\t\t\t\t\t\t\tscope.problemReporter().deprecatedType(this.actualReceiverType, this);", "-\t\t\t\t\t\t}", "+//\t\t\t\t\t\t// check for deprecated receiver type", "+//\t\t\t\t\t\t// deprecation check for receiver type if not first token", "+//\t\t\t\t\t\tif (indexOfFirstFieldBinding > 1) {", "+//\t\t\t\t\t\t\tif (isTypeUseDeprecated(this.actualReceiverType, scope))", "+//\t\t\t\t\t\t\t\tscope.problemReporter().deprecatedType(this.actualReceiverType, this);", "+//\t\t\t\t\t\t}", "-\t\t\t\t\tif (isTypeUseDeprecated(type, scope))", "-\t\t\t\t\t\tscope.problemReporter().deprecatedType(type, this);", "+//\t\t\t\t\tif (isTypeUseDeprecated(type, scope))", "+//\t\t\t\t\t\tscope.problemReporter().deprecatedType(type, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd837762a617364ec5f21fa8af91fcb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "5464f8b56e2b620bf0f37dc5a7c218f835be9cef", "commitAfterChange": "57e05ac5c8db0c06028159bb169607bae2e0ec84", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tif (binding != null) { // is a shared type reference which was already resolved", "-\t\tif (!binding.isValidBinding())", "+\tif (this.resolvedType != null) { // is a shared type reference which was already resolved", "+\t\tif (!this.resolvedType.isValidBinding())", "-\t\tbinding = getTypeBinding(scope);", "-\t\tif (!binding.isValidBinding()) {", "-\t\t\tscope.problemReporter().invalidType(this, binding);", "+\t\tthis.resolvedType = getTypeBinding(scope);", "+\t\tif (!this.resolvedType.isValidBinding()) {", "+\t\t\tscope.problemReporter().invalidType(this, this.resolvedType);", "-\t\tif (isTypeUseDeprecated(binding, scope))", "-\t\t\tscope.problemReporter().deprecatedType(binding, this);", "+\t\tif (isTypeUseDeprecated(this.resolvedType, scope))", "+\t\t\tscope.problemReporter().deprecatedType(this.resolvedType, this);", "-\treturn this.expressionType = binding;", "+\treturn this.resolvedType = this.resolvedType;"]}], "num": 229}
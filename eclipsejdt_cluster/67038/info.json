{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c0b7762c37300d8a8bde9d936a5fbb8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45b3c78f4c6d10d1552f71a5e94a07b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "28746d11ccbd26f27de3e6f37e37aa3059c91ec1", "commitAfterChange": "cbaf16ad0859cb1637417b40466837eb3e833f00", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "\r public String toString()", "signatureAfterChange": "\r public String toString()", "diff": ["-\tbuffer.append(\"\\nFlags: \");\r", "-\tboolean previous = false;\r", "-\tif ((this.flags & F_HAS_UNSAVED_CHANGES) != 0) {\r", "-\t\tbuffer.append(\"UNSAVED CHANGES\");\r", "-\t\tprevious = true;\r", "-\t}\r", "-\tif ((this.flags & F_IS_CLOSED) != 0) {\r", "-\t\tif (previous) buffer.append(\" & \");\r", "-\t\tbuffer.append(\"CLOSED\");\r", "-\t\tprevious = true;\r", "-\t}\r", "-\tif ((this.flags & F_IS_READ_ONLY) != 0) {\r", "-\t\tif (previous) buffer.append(\" & \");\r", "-\t\tbuffer.append(\"READONLY\");\r", "-\t\tprevious = true;\r", "-\t}\r", "+\tbuffer.append(\"\\nHas unsaved changes: \" + this.hasUnsavedChanges()); //$NON-NLS-1$\r", "+\tbuffer.append(\"\\nIs readonly: \" + this.isReadOnly()); //$NON-NLS-1$\r", "+\tbuffer.append(\"\\nIs closed: \" + this.isClosed()); //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7995fa9a21878215824e9f230a1b990", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "2dddead53fae51c0e7e8d687f7c1cde75a662d37", "commitAfterChange": "a25072f2f70a7d1a2734766b336bcde1a84f9c27", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprivate void checkForInheritedMemberTypes(SourceTypeBinding sourceType)", "signatureAfterChange": "  \tprivate void checkForInheritedMemberTypes(SourceTypeBinding sourceType)", "diff": ["+\t\t// assumes super types have already been checked & tagged", "-\t\t\tif ((currentType.tagBits & HasNoMemberTypes) != 0)", "-\t\t\t\tbreak; // already know it has no inherited member types, can stop looking up", "-\t\t\t\t// TODO (kent) why not simply return ? to avoid re-tagging at bottom", "-\t\t\t\treturn; // has member types", "+\t\t\t\treturn;", "+", "-\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\tinterfacesToVisit,", "-\t\t\t\t\t\t0,", "-\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],", "-\t\t\t\t\t\t0,", "-\t\t\t\t\t\tlastPosition);", "+\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t} while ((currentType = currentType.superclass()) != null);", "+\t\t} while ((currentType = currentType.superclass()) != null && (currentType.tagBits & HasNoMemberTypes) == 0);", "-\t\tboolean hasMembers = false;", "-\t\t\tdone : for (int i = 0; i <= lastPosition; i++) {", "+\t\t\t// contains the interfaces between the sourceType and any superclass, which was tagged as having no member types", "+\t\t\tboolean needToTag = false;", "+\t\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\t\t\tif ((anInterface.tagBits & InterfaceVisited) == 0) { // if interface as not already been visited", "-\t\t\t\t\t\tanInterface.tagBits |= InterfaceVisited;", "-\t\t\t\t\t\tif ((anInterface.tagBits & HasNoMemberTypes) != 0)", "-\t\t\t\t\t\t\tcontinue; // already know it has no inherited member types", "-\t\t\t\t\t\tif (anInterface.memberTypes() != NoMemberTypes) {", "-\t\t\t\t\t\t\thasMembers = true;", "-\t\t\t\t\t\t\tbreak done;", "-\t\t\t\t\t\t}", "+\t\t\t\t\tif ((anInterface.tagBits & HasNoMemberTypes) == 0) { // skip interface if it already knows it has no member types", "+\t\t\t\t\t\tif (anInterface.hasMemberTypes()) // avoid resolving member types eagerly", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\tneedToTag = true;", "-\t\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\t\tinterfacesToVisit,", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tlastPosition);", "+\t\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {", "-\t\t\t\t\tinterfaces[j].tagBits &= ~InterfaceVisited;", "-\t\t\t\t\tif (!hasMembers)", "+\t\t\tif (needToTag) {", "+\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {", "+\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "+\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)", "-\t\tif (!hasMembers) {", "-\t\t\tcurrentType = sourceType;", "-\t\t\tdo {", "-\t\t\t\tcurrentType.tagBits |= HasNoMemberTypes;", "-\t\t\t} while ((currentType = currentType.superclass()) != null);", "-\t\t}", "+\t\t// tag the sourceType and all of its superclasses, unless they have already been tagged", "+\t\tcurrentType = sourceType;", "+\t\tdo {", "+\t\t\tcurrentType.tagBits |= HasNoMemberTypes;", "+\t\t} while ((currentType = currentType.superclass()) != null && (currentType.tagBits & HasNoMemberTypes) == 0);"]}], "num": 67038}
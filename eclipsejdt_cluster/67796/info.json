{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15eefece24062d4c0feecab559c7eab8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0905326782ee9cc201e901290b120d04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "3307a3b21f8472cc998512e9e4cd5afdd4f17b52", "commitAfterChange": "b155f47580a90f694a899aae6d06a1ff29f450b8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic boolean complainIfUnreachable(FlowInfo flowInfo, BlockScope scope, boolean didAlreadyComplain)", "signatureAfterChange": " public int complainIfUnreachable(FlowInfo flowInfo, BlockScope scope, int previousComplaintLevel)", "diff": ["-\t// Report an error if necessary", "-\tpublic boolean complainIfUnreachable(FlowInfo flowInfo, BlockScope scope, boolean didAlreadyComplain) {", "-", "-\t\tif ((flowInfo.reachMode() & FlowInfo.UNREACHABLE) != 0) {", "-\t\t\tthis.bits &= ~ASTNode.IsReachable;", "-\t\t\tboolean reported = flowInfo == FlowInfo.DEAD_END;", "-\t\t\tif (!didAlreadyComplain && reported) {", "+// complaintLevel = 0 if was reachable up until now, 1 if fake reachable (deadcode), 2 if fatal unreachable (error)", "+public int complainIfUnreachable(FlowInfo flowInfo, BlockScope scope, int previousComplaintLevel) {", "+\tif ((flowInfo.reachMode() & FlowInfo.UNREACHABLE) != 0) {", "+\t\tthis.bits &= ~ASTNode.IsReachable;", "+\t\tif (flowInfo == FlowInfo.DEAD_END) {", "+\t\t\tif (previousComplaintLevel < COMPLAINED_UNREACHABLE) {", "-\t\t\treturn reported; // keep going for fake reachable", "-\t\t}", "-\t\treturn false;", "-\t}", "+\t\t\treturn COMPLAINED_UNREACHABLE;", "+\t\t} else {", "+\t\t\tif (previousComplaintLevel < COMPLAINED_FAKE_REACHABLE) {", "+\t\t\t\tscope.problemReporter().fakeReachable(this);", "+\t\t\treturn COMPLAINED_FAKE_REACHABLE;", "+\t\t}", "+\t}", "+\treturn previousComplaintLevel;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75dc56b8faa2bce044a9db00776b4a02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Block.java", "commitBeforeChange": "3307a3b21f8472cc998512e9e4cd5afdd4f17b52", "commitAfterChange": "b155f47580a90f694a899aae6d06a1ff29f450b8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+", "+public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {", "+\t// empty block", "+\tif (this.statements == null)\treturn flowInfo;", "+\tint complaintLevel = (flowInfo.reachMode() & FlowInfo.UNREACHABLE) != 0 ? Statement.COMPLAINED_FAKE_REACHABLE : Statement.NOT_COMPLAINED;", "+\tfor (int i = 0, max = this.statements.length; i < max; i++) {", "+\t\tStatement stat = this.statements[i];", "+\t\tif ((complaintLevel = stat.complainIfUnreachable(flowInfo, this.scope, complaintLevel)) < Statement.COMPLAINED_UNREACHABLE) {", "+\t\t\tflowInfo = stat.analyseCode(this.scope, flowContext, flowInfo);", "+\t\t}", "-", "-\tpublic FlowInfo analyseCode(", "-\t\tBlockScope currentScope,", "-\t\tFlowContext flowContext,", "-\t\tFlowInfo flowInfo) {", "-", "-\t\t// empty block", "-\t\tif (this.statements == null)\treturn flowInfo;", "-\t\tboolean didAlreadyComplain = false;", "+\treturn flowInfo;", "+}", "-\t\t\tStatement stat = this.statements[i];", "-\t\t\tif (!stat.complainIfUnreachable(flowInfo, this.scope, didAlreadyComplain)) {", "-\t\t\t\tflowInfo = stat.analyseCode(this.scope, flowContext, flowInfo);", "-\t\t\t} else {", "-\t\t\t\tdidAlreadyComplain = true;", "-\t\t\t}", "-\t\treturn flowInfo;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2d0a462a2edb88b848d5e950135576a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java", "commitBeforeChange": "3307a3b21f8472cc998512e9e4cd5afdd4f17b52", "commitAfterChange": "b155f47580a90f694a899aae6d06a1ff29f450b8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tpublic FlowInfo analyseCode(", "-\t\tBlockScope currentScope,", "-\t\tFlowContext flowContext,", "-\t\tFlowInfo flowInfo) {", "-", "+\tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {", "+\t\tint initialComplaintLevel = (flowInfo.reachMode() & FlowInfo.UNREACHABLE) != 0 ? Statement.COMPLAINED_FAKE_REACHABLE : Statement.NOT_COMPLAINED;", "-", "+\t\t", "-\t\t\tif (!this.action.complainIfUnreachable(actionInfo, this.scope, false)) {", "-\t\t\t\tactionInfo = this.action.analyseCode(this.scope, loopingContext, actionInfo).", "-\t\t\t\t\tunconditionalInits();", "+\t\t\tif (this.action.complainIfUnreachable(actionInfo, this.scope, initialComplaintLevel) < Statement.COMPLAINED_UNREACHABLE) {", "+\t\t\t\tactionInfo = this.action.analyseCode(this.scope, loopingContext, actionInfo).unconditionalInits();", "-\t\t}", "-\t\telse {", "+\t\t} else {", "+\t\t\tif (this.increments != null) {", "+\t\t\t\tif (initialComplaintLevel == Statement.NOT_COMPLAINED) {", "+\t\t\t\t\tcurrentScope.problemReporter().fakeReachable(this.increments[0]);", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 67796}
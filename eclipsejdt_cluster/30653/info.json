{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0986baea63998bf81d9aa45792ff80f1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e30eead0c8c18d7284c3d4686c5e992", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6e8c555a7d6f504d4ea246c591d5bb3f080d438", "commitAfterChange": "3316f207e855c46fb5e805791239fa37620ca8c4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " public synchronized Index getIndex(IPath containerPath, String indexLocation, boolean reuseExistingFile, boolean createIfMissing)", "signatureAfterChange": " public synchronized Index getIndex(IPath containerPath, IPath indexLocation, boolean reuseExistingFile, boolean createIfMissing)", "diff": ["-public synchronized Index getIndex(IPath containerPath, String indexLocation, boolean reuseExistingFile, boolean createIfMissing) {", "+public synchronized Index getIndex(IPath containerPath, IPath indexLocation, boolean reuseExistingFile, boolean createIfMissing) {", "-\tIndex index = (Index) indexes.get(indexLocation);", "+\tIndex index = getIndex(indexLocation);", "+\t\tString indexLocationString = indexLocation.toOSString();", "-\t\t\tFile indexFile = new File(indexLocation);", "+\t\t\tFile indexFile = new File(indexLocationString);", "-\t\t\t\t\tindex = new Index(indexLocation, containerPathString, true /*reuse index file*/);", "-\t\t\t\t\tindexes.put(indexLocation, index);", "+\t\t\t\t\tindex = new Index(indexLocationString, containerPathString, true /*reuse index file*/);", "+\t\t\t\t\tthis.indexes.put(indexLocation, index);", "-\t\t\t\t\t\t\tUtil.verbose(\"-> cannot reuse existing index: \"+indexLocation+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t\tUtil.verbose(\"-> cannot reuse existing index: \"+indexLocationString+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\tUtil.verbose(\"-> create empty index: \"+indexLocation+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tindex = new Index(indexLocation, containerPathString, false /*do not reuse index file*/);", "-\t\t\t\tindexes.put(indexLocation, index);", "+\t\t\t\t\tUtil.verbose(\"-> create empty index: \"+indexLocationString+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tindex = new Index(indexLocationString, containerPathString, false /*do not reuse index file*/);", "+\t\t\t\tthis.indexes.put(indexLocation, index);", "-\t\t\t\t\tUtil.verbose(\"-> unable to create empty index: \"+indexLocation+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\tUtil.verbose(\"-> unable to create empty index: \"+indexLocationString+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3af6cfee1ac869f2feac50f340729f6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "07a7e8072bdec094e9ef52b674b1aac8f1f20d15", "commitAfterChange": "6b047504a49d2679fa08264f4459dab0ba213ade", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public synchronized Index getIndex(IPath containerPath, String indexLocation, boolean reuseExistingFile, boolean createIfMissing)", "signatureAfterChange": " public synchronized Index getIndex(IPath containerPath, String indexLocation, boolean reuseExistingFile, boolean createIfMissing)", "diff": ["+\t\tString containerPathString = containerPath.getDevice() == null ? containerPath.toString() : containerPath.toOSString();", "-\t\t\t\t\tindex = new Index(indexLocation, containerPath.toString(), true /*reuse index file*/); //$NON-NLS-1$", "+\t\t\t\t\tindex = new Index(indexLocation, containerPathString, true /*reuse index file*/); //$NON-NLS-1$", "-\t\t\t\t\t\t\tUtil.verbose(\"-> cannot reuse existing index: \"+indexLocation+\" path: \"+containerPath.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t\tUtil.verbose(\"-> cannot reuse existing index: \"+indexLocation+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\tUtil.verbose(\"-> create empty index: \"+indexLocation+\" path: \"+containerPath.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tindex = new Index(indexLocation, containerPath.toString(), false /*do not reuse index file*/); //$NON-NLS-1$", "+\t\t\t\t\tUtil.verbose(\"-> create empty index: \"+indexLocation+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tindex = new Index(indexLocation, containerPathString, false /*do not reuse index file*/); //$NON-NLS-1$", "-\t\t\t\t\tUtil.verbose(\"-> unable to create empty index: \"+indexLocation+\" path: \"+containerPath.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\tUtil.verbose(\"-> unable to create empty index: \"+indexLocation+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae906c2a0534ba30c10e456793e92581", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e0e148cd6b9c732819785b1a6035a4b2d3b71b69", "commitAfterChange": "e8d8994ddc9e43f92485e51c19ef36ea93b3771d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public synchronized Index getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing)", "signatureAfterChange": " public synchronized Index getIndex(IPath containerPath, String indexLocation, boolean reuseExistingFile, boolean createIfMissing)", "diff": ["-public synchronized Index getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing) {", "+public synchronized Index getIndex(IPath containerPath, String indexLocation, boolean reuseExistingFile, boolean createIfMissing) {", "-\tIndex index = (Index) indexes.get(path);", "+\tIndex index = (Index) indexes.get(indexLocation);", "-\t\tString indexName = computeIndexName(path);", "-\t\tObject state = getIndexStates().get(indexName);", "+\t\tObject state = getIndexStates().get(indexLocation);", "-\t\t\trebuildIndex(indexName, path);", "+\t\t\trebuildIndex(indexLocation, containerPath);", "-\t\t\tFile indexFile = new File(indexName);", "+\t\t\tFile indexFile = new File(indexLocation);", "-\t\t\t\t\tindex = new Index(indexName, \"Index for \" + path.toOSString(), true /*reuse index file*/); //$NON-NLS-1$", "-\t\t\t\t\tindexes.put(path, index);", "+\t\t\t\t\tindex = new Index(indexLocation, \"Index for \" + containerPath.toOSString(), true /*reuse index file*/); //$NON-NLS-1$", "+\t\t\t\t\tindexes.put(indexLocation, index);", "-\t\t\t\t\t\t\tUtil.verbose(\"-> cannot reuse existing index: \"+indexName+\" path: \"+path.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\trebuildIndex(indexName, path);", "+\t\t\t\t\t\t\tUtil.verbose(\"-> cannot reuse existing index: \"+indexLocation+\" path: \"+containerPath.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\trebuildIndex(indexLocation, containerPath);", "-\t\t\t\trebuildIndex(indexName, path);", "+\t\t\t\trebuildIndex(indexLocation, containerPath);", "-\t\t\t\t\tUtil.verbose(\"-> create empty index: \"+indexName+\" path: \"+path.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tindex = new Index(indexName, \"Index for \" + path.toOSString(), false /*do not reuse index file*/); //$NON-NLS-1$", "-\t\t\t\tindexes.put(path, index);", "+\t\t\t\t\tUtil.verbose(\"-> create empty index: \"+indexLocation+\" path: \"+containerPath.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tindex = new Index(indexLocation, \"Index for \" + containerPath.toOSString(), false /*do not reuse index file*/); //$NON-NLS-1$", "+\t\t\t\tindexes.put(indexLocation, index);", "-\t\t\t\t\tUtil.verbose(\"-> unable to create empty index: \"+indexName+\" path: \"+path.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\tUtil.verbose(\"-> unable to create empty index: \"+indexLocation+\" path: \"+containerPath.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7644c93638e7032a4d651b4970e2c30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6021d67f030c85737aa105da719e9a09cfc30ed", "commitAfterChange": "47da1e1f50b1360a7b560d74dfe1c60303fec552", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public synchronized Index getIndex(IPath containerPath, IPath indexLocation, boolean reuseExistingFile, boolean createIfMissing)", "signatureAfterChange": " public synchronized Index getIndex(IPath containerPath, IndexLocation indexLocation, boolean reuseExistingFile, boolean createIfMissing)", "diff": ["-public synchronized Index getIndex(IPath containerPath, IPath indexLocation, boolean reuseExistingFile, boolean createIfMissing) {", "+public synchronized Index getIndex(IPath containerPath, IndexLocation indexLocation, boolean reuseExistingFile, boolean createIfMissing) {", "-\t\tString indexLocationString = indexLocation.toOSString();", "-\t\t\tFile indexFile = new File(indexLocationString);", "-\t\t\tif (indexFile.exists()) { // check before creating index so as to avoid creating a new empty index if file is missing", "+\t\t\tif (indexLocation.exists()) { // check before creating index so as to avoid creating a new empty index if file is missing", "-\t\t\t\t\tindex = new Index(indexLocationString, containerPathString, true /*reuse index file*/);", "+\t\t\t\t\tindex = new Index(indexLocation, containerPathString, true /*reuse index file*/);", "-\t\t\t\t\tif (currentIndexState != REBUILDING_STATE) { // rebuild index if existing file is corrupt, unless the index is already being rebuilt", "+\t\t\t\t\tif (currentIndexState != REBUILDING_STATE && currentIndexState != REUSE_STATE) { // rebuild index if existing file is corrupt, unless the index is already being rebuilt", "-\t\t\t\t\t\t\tUtil.verbose(\"-> cannot reuse existing index: \"+indexLocationString+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t\tUtil.verbose(\"-> cannot reuse existing index: \"+indexLocation+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tif (currentIndexState == REUSE_STATE) {", "+\t\t\t\t// supposed to be in reuse state but error in the index file, so reindex.", "+\t\t\t\tif (VERBOSE)", "+\t\t\t\t\tUtil.verbose(\"-> cannot reuse given index: \"+indexLocation+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tthis.indexLocations.put(containerPath, null);", "+\t\t\t\tindexLocation = computeIndexLocation(containerPath);", "+\t\t\t\trebuildIndex(indexLocation, containerPath);", "+\t\t\t\treturn null;", "+\t\t\t}", "-\t\t\t\t\tUtil.verbose(\"-> create empty index: \"+indexLocationString+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tindex = new Index(indexLocationString, containerPathString, false /*do not reuse index file*/);", "+\t\t\t\t\tUtil.verbose(\"-> create empty index: \"+indexLocation+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tindex = new Index(indexLocation, containerPathString, false /*do not reuse index file*/);", "-\t\t\t\t\tUtil.verbose(\"-> unable to create empty index: \"+indexLocationString+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\tUtil.verbose(\"-> unable to create empty index: \"+indexLocation+\" path: \"+containerPathString); //$NON-NLS-1$ //$NON-NLS-2$"]}], "num": 30653}
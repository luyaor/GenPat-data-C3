{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3ce7234a7c7792b181314b64365146c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e836c5db2371335d6c9a0e0a92ab9e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "66a68a77c79dc8161adf91226d8f791e46bc037a", "commitAfterChange": "7bdcf3d951d8bd1150c90600a140b9efc498e23b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate static char[] removePrefix(char[] name, char[][] prefixes)", "signatureAfterChange": " \t \tprivate static char[] removePrefix(char[] name, char[][] prefixes)", "diff": ["+\t\t\tint nameLength = name.length;", "-\t\t\t\tint max = prefix.length < name.length ? prefix.length : name.length;", "-\t\t\t\tint currLen = 0;", "-\t\t\t\tfor (; currLen < max; currLen++) {", "-\t\t\t\t\tif(Character.toLowerCase(prefix[currLen]) != Character.toLowerCase(name[currLen])) {", "-\t\t\t\t\t\tif (currLen > bestLength) {", "-\t\t\t\t\t\t\tbestLength = currLen;", "+\t\t\t\t", "+\t\t\t\tint prefixLength = prefix.length;", "+\t\t\t\tif(prefixLength <= nameLength) {", "+\t\t\t\t\tif(CharOperation.prefixEquals(prefix, name, false)) {", "+\t\t\t\t\t\tif (prefixLength > bestLength) {", "+\t\t\t\t\t\t\tbestLength = prefixLength;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tif(currLen == max && currLen > bestLength) {", "-\t\t\t\t\tbestLength = max;", "+\t\t\t\t} else {", "+\t\t\t\t\tint currLen = 0;", "+\t\t\t\t\tfor (; currLen < nameLength; currLen++) {", "+\t\t\t\t\t\tif(Character.toLowerCase(prefix[currLen]) != Character.toLowerCase(name[currLen])) {", "+\t\t\t\t\t\t\tif (currLen > bestLength) {", "+\t\t\t\t\t\t\t\tbestLength = currLen;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif(currLen == nameLength && currLen > bestLength) {", "+\t\t\t\t\t\tbestLength = currLen;", "+\t\t\t\t\t}", "-\t\t\t\tif(bestLength == name.length) {", "+\t\t\t\tif(bestLength == nameLength) {", "-\t\t\t\t\twithoutPrefixName = CharOperation.subarray(name, bestLength, name.length);", "+\t\t\t\t\twithoutPrefixName = CharOperation.subarray(name, bestLength, nameLength);", "+//\t\t", "+//\t\t", "+//\t\t// remove longer prefix", "+//\t\tchar[] withoutPrefixName = name;", "+//\t\tif (prefixes != null) {", "+//\t\t\tint bestLength = 0;", "+//\t\t\tfor (int i= 0; i < prefixes.length; i++) {", "+//\t\t\t\tchar[] prefix = prefixes[i];", "+//\t\t\t\tint max = prefix.length < name.length ? prefix.length : name.length;", "+//\t\t\t\tint currLen = 0;", "+//\t\t\t\tfor (; currLen < max; currLen++) {", "+//\t\t\t\t\tif(Character.toLowerCase(prefix[currLen]) != Character.toLowerCase(name[currLen])) {", "+//\t\t\t\t\t\tif (currLen > bestLength) {", "+//\t\t\t\t\t\t\tbestLength = currLen;", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t\tbreak;", "+//\t\t\t\t\t}", "+//\t\t\t\t}", "+//\t\t\t\tif(currLen == max && currLen > bestLength) {", "+//\t\t\t\t\tbestLength = max;", "+//\t\t\t\t}", "+//\t\t\t}", "+//\t\t\tif(bestLength > 0) {", "+//\t\t\t\tif(bestLength == name.length) {", "+//\t\t\t\t\twithoutPrefixName = CharOperation.NO_CHAR;", "+//\t\t\t\t} else {", "+//\t\t\t\t\twithoutPrefixName = CharOperation.subarray(name, bestLength, name.length);", "+//\t\t\t\t}", "+//\t\t\t}", "+//\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bbc0fb67427bacb82bb012ec8755531", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "302f1877ad74fd63c3cd5c56aacc5cc510a8d88b", "commitAfterChange": "240c118718aa210b0d9c1362ebe7843e41fba8b4", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void locateMatches(SearchDocument[] searchDocuments) throws CoreException", "signatureAfterChange": " public void locateMatches(SearchDocument[] searchDocuments) throws CoreException", "diff": ["+\tlong start = System.currentTimeMillis(); // debug", "+\tint docsLength = searchDocuments.length;", "-\t\tfor (int i = 0, length = searchDocuments.length; i < length; i++)", "+\t\tfor (int i = 0; i < docsLength; i++)", "-\t", "+", "+\t// init infos for progress increasing", "+\tint n = docsLength<1000 ? Math.min(Math.max(docsLength/100, 2),4) : 5 *(docsLength/1000);", "+\tthis.progressStep = docsLength < n ? 1 : docsLength / n; // step should not be 0", "+\tthis.progressWorked = 0;", "+", "-\tfor (int i = 0, length = searchDocuments.length; i < length; i++) {", "+\tfor (int i = 0; i < docsLength; i++) {", "-\t\tint skipped = 0;", "-\t\tfor (int i = 0, l = searchDocuments.length; i < l; i++) {", "-\t\t\tif (this.progressMonitor != null && this.progressMonitor.isCanceled())", "+\t\tint displayed = 0; // progress worked displayed", "+\t\tfor (int i = 0; i < docsLength; i++) {", "+\t\t\tif (this.progressMonitor != null && this.progressMonitor.isCanceled()) {", "+\t\t\t}", "-\t\t\t\tskipped++;", "+\t\t\t\tif (this.progressMonitor != null) {", "+\t\t\t\t\tthis.progressWorked++;", "+\t\t\t\t\tif ((this.progressWorked%this.progressStep)==0) this.progressMonitor.worked(this.progressStep);", "+\t\t\t\t}", "+\t\t\t\tdisplayed++;", "-\t\t\t\tif (openable == null) continue; // match is outside classpath", "+\t\t\t\tif (openable == null) {", "+\t\t\t\t\tif (this.progressMonitor != null) {", "+\t\t\t\t\t\tthis.progressWorked++;", "+\t\t\t\t\t\tif ((this.progressWorked%this.progressStep)==0) this.progressMonitor.worked(this.progressStep);", "+\t\t\t\t\t}", "+\t\t\t\t\tdisplayed++;", "+\t\t\t\t\tcontinue; // match is outside classpath", "+\t\t\t\t}", "-\t\t\t\t\t\tlocateMatches(previousJavaProject, matchSet);", "+\t\t\t\t\t\tlocateMatches(previousJavaProject, matchSet, i-displayed);", "+\t\t\t\t\t\tdisplayed = i;", "-\t\t\t\t\tif (this.progressMonitor != null)", "-\t\t\t\t\t\tthis.progressMonitor.worked(skipped);", "-\t\t\t\tskipped = 0;", "-\t\t\tskipped++;", "-\t\t\t\tlocateMatches(previousJavaProject, matchSet);", "+\t\t\t\tlocateMatches(previousJavaProject, matchSet, docsLength-displayed);", "-\t\t\tif (this.progressMonitor != null)", "-\t\t\t\tthis.progressMonitor.worked(skipped);", "-\t}\t", "+\t}", "+\t// debug", "+\tSystem.out.println(\"Time to locate \" + //$NON-NLS-1$", "+\t\t\tthis.progressWorked+", "+\t\t\t\" matches: \" + //$NON-NLS-1$", "+\t\t\t(System.currentTimeMillis() - start) +", "+\t\t\t\" ms\"); //$NON-NLS-1$", "+\t// end debug"]}], "num": 24104}
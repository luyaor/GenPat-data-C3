{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6165f8eb3af0f086eb62460ea8a14e81", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43f238a9a287b832ed51d3a6f0f85ce1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "bd576a9c793017db2f7eae213c14590a7efc1565", "commitAfterChange": "6e6c13b31e68010feb85ecdb058f8741f0b58a41", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \r \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "\r \r \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding lhsTb = lhs.resolveType(scope);\r", "+\t\tthis.lhsType = lhs.resolveType(scope);\r", "-\t\tif (lhsTb == null || expressionTb == null)\r", "+\t\tif (this.lhsType == null || expressionTb == null)\r", "-\t\tif ((expression.isConstantValueOfTypeAssignableToType(expressionTb, lhsTb)\r", "-\t\t\t|| (lhsTb.isBaseType() && BaseTypeBinding.isWidening(lhsTb.id, expressionTb.id)))\r", "-\t\t\t|| (scope.areTypesCompatible(expressionTb, lhsTb))) {\r", "-\t\t\texpression.implicitWidening(lhsTb, expressionTb);\r", "-\t\t\treturn lhsTb;\r", "+\t\tif ((expression.isConstantValueOfTypeAssignableToType(expressionTb, this.lhsType)\r", "+\t\t\t|| (this.lhsType.isBaseType() && BaseTypeBinding.isWidening(this.lhsType.id, expressionTb.id)))\r", "+\t\t\t|| (scope.areTypesCompatible(expressionTb, this.lhsType))) {\r", "+\t\t\texpression.implicitWidening(this.lhsType, expressionTb);\r", "+\t\t\treturn this.lhsType;\r", "-\t\t\tlhsTb);\r", "+\t\t\tthis.lhsType);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68a70a22fbcd709ab8cfe9c995716c36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "5464f8b56e2b620bf0f37dc5a7c218f835be9cef", "commitAfterChange": "57e05ac5c8db0c06028159bb169607bae2e0ec84", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tthis.lhsType = lhs.resolveType(scope);", "-\t\tTypeBinding expressionTb = expression.resolveType(scope);", "-\t\tif (this.lhsType == null || expressionTb == null)", "+\t\tthis.resolvedType = lhs.resolveType(scope); // expressionType contains the assignment type (lhs Type)", "+\t\tTypeBinding rhsType = expression.resolveType(scope);", "+\t\tif (this.resolvedType == null || rhsType == null)", "-\t\tif ((expression.isConstantValueOfTypeAssignableToType(expressionTb, this.lhsType)", "-\t\t\t|| (this.lhsType.isBaseType() && BaseTypeBinding.isWidening(this.lhsType.id, expressionTb.id)))", "-\t\t\t|| (Scope.areTypesCompatible(expressionTb, this.lhsType))) {", "-\t\t\texpression.implicitWidening(this.lhsType, expressionTb);", "-\t\t\tthis.expressionType = this.lhsType;", "-\t\t\treturn this.lhsType;", "+\t\tif ((expression.isConstantValueOfTypeAssignableToType(rhsType, this.resolvedType)", "+\t\t\t|| (this.resolvedType.isBaseType() && BaseTypeBinding.isWidening(this.resolvedType.id, rhsType.id)))", "+\t\t\t|| (Scope.areTypesCompatible(rhsType, this.resolvedType))) {", "+\t\t\texpression.implicitWidening(this.resolvedType, rhsType);", "+\t\t\treturn this.resolvedType;", "-\t\t\texpressionTb,", "-\t\t\tthis.lhsType);", "+\t\t\trhsType,", "+\t\t\tthis.resolvedType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d508f5c33aa53e7a8c9afaf64c525060", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tthis.resolvedType = lhs.resolveType(scope); // expressionType contains the assignment type (lhs Type)", "+\t\tTypeBinding lhsType = this.resolvedType = lhs.resolveType(scope);", "+\t\texpression.setExpectedType(lhsType); // needed in case of generic method invocation", "-\t\tif (this.resolvedType == null || rhsType == null) {", "+\t\tif (lhsType == null || rhsType == null) {", "-\t\t\t\t", "+", "-\t\tif ((expression.isConstantValueOfTypeAssignableToType(rhsType, this.resolvedType)", "-\t\t\t\t|| (this.resolvedType.isBaseType() && BaseTypeBinding.isWidening(this.resolvedType.id, rhsType.id)))", "-\t\t\t\t|| rhsType.isCompatibleWith(this.resolvedType)) {", "-\t\t\texpression.implicitWidening(this.resolvedType, rhsType);", "+\t\tif ((expression.isConstantValueOfTypeAssignableToType(rhsType, lhsType)", "+\t\t\t\t|| (lhsType.isBaseType() && BaseTypeBinding.isWidening(lhsType.id, rhsType.id)))", "+\t\t\t\t|| rhsType.isCompatibleWith(lhsType)) {", "+\t\t\texpression.computeConversion(scope, lhsType, rhsType);", "+\t\t\tcheckAssignment(scope, lhsType, rhsType);", "-\t\tscope.problemReporter().typeMismatchErrorActualTypeExpectedType(", "-\t\t\texpression,", "-\t\t\trhsType,", "-\t\t\tthis.resolvedType);", "-\t\treturn this.resolvedType;", "+\t\tscope.problemReporter().typeMismatchError(rhsType, lhsType, expression);", "+\t\treturn lhsType;"]}], "num": 72656}
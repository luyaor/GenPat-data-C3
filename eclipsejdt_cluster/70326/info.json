{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d385558dc06008a2599a3ab92c63e79f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "319154b284f67531c4201356d7057736", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PotentialMatch.java", "commitBeforeChange": "681a5bade45a4fbc7e91de35fbcc82af340ee68f", "commitAfterChange": "604e4e53d0f6d2071361616f30ebe463c893bb44", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public PotentialMatch(MatchLocator locator, IResource resource, Openable openable)", "signatureAfterChange": "\r public PotentialMatch(MatchLocator locator, IResource resource, Openable openable)", "diff": ["+\t\t\t\t\r", "+\t\t\t\t// try to use the main type's class file as the openable\r", "+\t\t\t\tTypeDeclaration[] types = this.parsedUnit.types;\r", "+\t\t\t\tif (types != null && types.length > 0) {\r", "+\t\t\t\t\tString simpleTypeName = new String(types[0].name);\r", "+\t\t\t\t\tIPackageFragment parent = (IPackageFragment)openable.getParent();\r", "+\t\t\t\t\torg.eclipse.jdt.core.IClassFile classFile = \r", "+\t\t\t\t\t\tparent.getClassFile(simpleTypeName + \".class\");\r", "+\t\t\t\t\tif (classFile.exists()) {\r", "+\t\t\t\t\t\tthis.openable = (Openable)classFile;\r", "+\t\t\t\t\t} \r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c089c7db67328b387ef2516c9657c5f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "ea035aff9493ec8381c8d6bd9548845ad9f81e22", "commitAfterChange": "3c8b95412c50bb73a8372fbf9db9df68231cc311", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t \tpublic void checkRepeatableAnnotation(ASTNode valueAttribute, Scope scope, Object containingBinding)", "signatureAfterChange": "  \tpublic void checkRepeatableMetaAnnotation(BlockScope scope)", "diff": ["-\t", "-\tpublic void checkRepeatableAnnotation(ASTNode valueAttribute, Scope scope, Object containingBinding) {", "-\t\tif (! (this.recipient instanceof ReferenceBinding && containingBinding instanceof ReferenceBinding)) return; // Has deeper problems...", "-\t\tReferenceBinding containing = (ReferenceBinding)containingBinding;", "-\t\tReferenceBinding repeatableAnnotation = (ReferenceBinding) this.recipient;", "-\t\trepeatableAnnotation.setContainingAnnotation(containing);", "-\t\tcheckContainingAnnotation(valueAttribute, scope, containing, repeatableAnnotation);", "+\tpublic void checkRepeatableMetaAnnotation(BlockScope scope) {", "+\t\t", "+\t\t// `this' is the @Repeatable meta annotation, its recipient is the *repeatable* annotation type - we are at the declaration site, not the repeating use site.", "+\t\t", "+\t\tReferenceBinding repeatableAnnotationType = (ReferenceBinding) this.recipient; // know it to be an annotation type. On target miss we don't get here", "+\t\t", "+\t\tMemberValuePair[] valuePairs = this.memberValuePairs();", "+\t\tif (valuePairs == null || valuePairs.length != 1)", "+\t\t\treturn;", "+\t\t", "+\t\tObject value = valuePairs[0].compilerElementPair.value;", "+\t\tif (!(value instanceof ReferenceBinding))", "+\t\t\treturn; // Has deeper problems, will bark elsewhere.", "+\t\tReferenceBinding containerAnnotationType = (ReferenceBinding) value;", "+\t\tif (!containerAnnotationType.isAnnotationType())", "+\t\t\treturn; // Has deeper problems, will bark elsewhere.", "+\t\t", "+\t\trepeatableAnnotationType.setContainerAnnotationType(containerAnnotationType); // For now. May be reset later to PRB in case of problems.", "+\t\tcheckContainerAnnotationType(valuePairs[0], scope, containerAnnotationType, repeatableAnnotationType, false); // false => not use site, i.e declaration site error reporting requested."]}], "num": 70326}
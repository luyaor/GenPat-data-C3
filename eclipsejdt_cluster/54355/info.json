{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c37583fe3c4145b187fdabddb44a40c3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10a65d8eceaf2436f6dec024532c1ced", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "26e96a017b590b444a246c8fba814dc78fd85b77", "commitAfterChange": "80351fb8a54757084b1b27c49cb8b0584bf78834", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic boolean match(SynchronizedStatement node, Object other)", "signatureAfterChange": " \tpublic boolean match(SuperMethodReference node, Object other)", "diff": ["+\t */", "+\tpublic boolean match(SuperMethodReference node, Object other) {", "+\t\tif (!(other instanceof SuperMethodReference)) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tSuperMethodReference o = (SuperMethodReference) other;", "+\t\treturn (safeSubtreeMatch(node.getQualifier(), o.getQualifier())", "+\t\t\t\t&& safeSubtreeListMatch(node.typeArguments(), o.typeArguments())", "+\t\t\t\t&& safeSubtreeMatch(node.getName(), o.getName()));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33e562d7f6b8d92f1e8c5b6d55f80b2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 16, "signatureBeforeChange": "   private boolean hasBinaryDelta()", "signatureAfterChange": "  private boolean hasStructuralDelta()", "diff": ["-", "-private boolean hasBinaryDelta() {", "+private boolean hasStructuralDelta() {", "+\t// handle case when currentProject has only .class file folders and/or jar files... no source/output folders", "-\t\tIResource[] classFoldersAndJars = (IResource[]) binaryResources.get(currentProject);", "+\t\tClasspathLocation[] classFoldersAndJars = (ClasspathLocation[]) binaryLocationsPerProject.get(currentProject);", "-\t\t\t\tIResource binaryResource = classFoldersAndJars[i]; // either a .class file folder or a zip/jar file", "-\t\t\t\tif (binaryResource != null) {", "-\t\t\t\t\tIResourceDelta binaryDelta = delta.findMember(binaryResource.getProjectRelativePath());", "-\t\t\t\t\tif (binaryDelta != null) return true;", "+\t\t\t\tClasspathLocation classFolderOrJar = classFoldersAndJars[i]; // either a .class file folder or a zip/jar file", "+\t\t\t\tif (classFolderOrJar != null) {", "+\t\t\t\t\tIResourceDelta binaryDelta = delta.findMember(classFolderOrJar.getRelativePath());", "+\t\t\t\t\tif (binaryDelta != null && binaryDelta.getKind() != IResourceDelta.NO_CHANGE)", "+\t\t\t\t\t\treturn true;"]}], "num": 54355}
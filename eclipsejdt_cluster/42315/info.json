{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9980cf59decee73b024923bfe3cbef0d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55dfc04a5e8b78a9aa821d323d1b423c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void report( \t\tint sourceStart, \t\tint sourceEnd, \t\tIJavaElement element, \t\tint accuracy) \t\tthrows CoreException", "signatureAfterChange": " public void report(int sourceStart, int sourceEnd, IJavaElement element, int accuracy) throws CoreException", "diff": ["-\t}", "-\tpublic void report(", "-\t\tint sourceStart,", "-\t\tint sourceEnd,", "-\t\tIJavaElement element,", "-\t\tint accuracy)", "-\t\tthrows CoreException {", "-\t\tif (this.scope.encloses(element)) {", "-\t\t\tif (SearchEngine.VERBOSE) {", "-\t\t\t\tIResource res = this.getCurrentResource();", "-\t\t\t\tSystem.out.println(\"Reporting match\"); //$NON-NLS-1$", "-\t\t\t\tSystem.out.println(\"\\tResource: \" + (res == null ? \" <unknown> \" : res.getFullPath().toString())); //$NON-NLS-2$//$NON-NLS-1$", "-\t\t\t\tSystem.out.println(\"\\tPositions: [\" + sourceStart + \", \" + sourceEnd + \"]\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\t\t\tSystem.out.println(\"\\tJava element: \" + ((JavaElement)element).toStringWithAncestors()); //$NON-NLS-1$", "-\t\t\t\tif (accuracy == IJavaSearchResultCollector.EXACT_MATCH) {", "-\t\t\t\t\tSystem.out.println(\"\\tAccuracy: EXACT_MATCH\"); //$NON-NLS-1$", "-\t\t\t\t} else {", "-\t\t\t\t\tSystem.out.println(\"\\tAccuracy: POTENTIAL_MATCH\"); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tthis.report(", "-\t\t\t\tthis.getCurrentResource(),", "-\t\t\t\tsourceStart,", "-\t\t\t\tsourceEnd,", "-\t\t\t\telement,", "-\t\t\t\taccuracy);", "+}", "+public void report(int sourceStart, int sourceEnd, IJavaElement element, int accuracy) throws CoreException {", "+\tif (this.scope.encloses(element)) {", "+\t\t\tIResource res = this.currentPotentialMatch.resource;", "+\t\t\tSystem.out.println(\"Reporting match\"); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"\\tResource: \" + (res == null ? \" <unknown> \" : res.getFullPath().toString())); //$NON-NLS-2$//$NON-NLS-1$", "+\t\t\tSystem.out.println(\"\\tPositions: [\" + sourceStart + \", \" + sourceEnd + \"]\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\tSystem.out.println(\"\\tJava element: \" + ((JavaElement)element).toStringWithAncestors()); //$NON-NLS-1$", "+\t\t\tSystem.out.println(accuracy == IJavaSearchResultCollector.EXACT_MATCH", "+\t\t\t\t? \"\\tAccuracy: EXACT_MATCH\" //$NON-NLS-1$", "+\t\t\t\t: \"\\tAccuracy: POTENTIAL_MATCH\"); //$NON-NLS-1$", "+\t\treport(this.currentPotentialMatch.resource, sourceStart, sourceEnd, element, accuracy);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecaf046424acbe3b2c3b8ba227fb740c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/Util.java", "commitBeforeChange": "ae7797d27bfed7c3f6e7630a551ffec98598a05e", "commitAfterChange": "b5a62e48da3d2bb054c313f16e0e1c0a1279b4a4", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \tprivate static void quickSort(IndexedFile[] list, int left, int right)", "signatureAfterChange": "\r \tprivate static void quickSort(IndexedFile[] list, int left, int right)", "diff": ["-\r", "-\r", "-\t\tIndexedFile mid= list[(left + right) / 2];\r", "+\t\tString mid= list[(left + right) / 2].path;\r", "-\t\t\twhile (list[left].getPath().compareTo(mid.getPath()) < 0) {\r", "+\t\t\twhile (list[left].path.compareTo(mid) < 0) {\r", "-\t\t\twhile (mid.getPath().compareTo(list[right].getPath()) < 0) {\r", "+\t\t\twhile (mid.compareTo(list[right].path) < 0) {\r", "+\t\t} while (left <= right);\r", "+\t\tif (original_left < right) {\r", "+\t\t\tquickSort(list, original_left, right);\r", "-\t\twhile (left <= right);\r", "-\r", "+\t\tif (left < original_right) {\r", "+\t\t\tquickSort(list, left, original_right);\r", "+\t\t}\r", "+\t}\r"]}], "num": 42315}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0388fa0f7ac9ee2c722875e544fdcdcb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37fe9e7879ec457dbc1b88c9cd9b3e9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \t \tpublic void resolve(BlockScope scope)", "diff": ["+\t", "+\t\t", "+\t\tTypeBinding expressionType;", "+\t\texpression.setExpectedType(methodType); // needed in case of generic method invocation", "+\t\tif (expressionType.isRawType() && (methodType.isParameterizedType() || methodType.isGenericType())) {", "+\t\t    scope.problemReporter().unsafeRawReturnValue(this.expression, expressionType, methodType);", "+\t\t}", "+\t\t", "-\t\t\texpression.implicitWidening(methodType, expressionType);", "+\t\t\texpression.computeConversion(scope, methodType, expressionType);", "-\t\t\texpression.implicitWidening(methodType, expressionType);", "+\t\t\texpression.computeConversion(scope, methodType, expressionType);", "-\t\t\tscope.problemReporter().typeMismatchErrorActualTypeExpectedType(expression, expressionType, methodType);", "+\t\t\tscope.problemReporter().typeMismatchError(expressionType, methodType, expression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8d67fbd4bfa3b265162db8814fc4f66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "ec9cd97b0c459c5dc4d2f0ad5e983ded0fc0d5bb", "commitAfterChange": "bfebdf0198219cf180a3f6b7b859385d784ebd28", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \t \tpublic void resolve(BlockScope scope)", "diff": ["-\t\tif (expressionType.needsUncheckedConversion(methodType)) {", "-\t\t    scope.problemReporter().unsafeRawConversion(this.expression, expressionType, methodType);", "-\t\t}", "-\t\t", "-\t\tif (expression.isConstantValueOfTypeAssignableToType(expressionType, methodType)) {", "-\t\t\t// dealing with constant", "+\t\tif (expression.isConstantValueOfTypeAssignableToType(expressionType, methodType)", "+\t\t\t\t|| expressionType.isCompatibleWith(methodType)) {", "+", "-\t\t\treturn;", "-\t\t}", "-\t\tif (expressionType.isCompatibleWith(methodType)) {", "-\t\t\texpression.computeConversion(scope, methodType, expressionType);", "+\t\t\tif (expressionType.needsUncheckedConversion(methodType)) {", "+\t\t\t    scope.problemReporter().unsafeRawConversion(this.expression, expressionType, methodType);", "+\t\t\t}"]}], "num": 39867}
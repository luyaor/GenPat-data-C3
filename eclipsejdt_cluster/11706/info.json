{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "53fe9c75207b6dd84e4eaaea60985496", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35bd176347809e21c0c0f9b3f7fa001a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/AbstractCompilerToolTest.java", "commitBeforeChange": "24886323fed59fa7df90089efb8e6a1735628edf", "commitAfterChange": "2a6ccc4326c5f51715033b769f3fad2752538c59", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t@Override \tprotected boolean invokeCompiler( \t\t\tPrintWriter out,  \t\t\tPrintWriter err, \t\t\tObject extraArguments, \t\t\tTestCompilationProgress compilationProgress)", "signatureAfterChange": " \t@Override \tprotected boolean invokeCompiler( \t\t\tPrintWriter out,  \t\t\tPrintWriter err, \t\t\tObject extraArguments, \t\t\tTestCompilationProgress compilationProgress)", "diff": ["-\t\tList<File> files = new ArrayList<File>();", "-\t\tString[] fileNames = arguments.fileNames;", "-\t\tfor (int i = 0, l = fileNames.length; i < l; i++) {", "-\t\t\tif (fileNames[i].startsWith(OUTPUT_DIR)) {", "-\t\t\t\tfiles.add(new File(fileNames[i]));", "-\t\t\t} else {", "-\t\t\t\tfiles.add(new File(OUTPUT_DIR + File.separator + fileNames[i]));", "+\t\ttry {", "+\t\t\tList<File> files = new ArrayList<File>();", "+\t\t\tString[] fileNames = arguments.fileNames;", "+\t\t\tfor (int i = 0, l = fileNames.length; i < l; i++) {", "+\t\t\t\tif (fileNames[i].startsWith(OUTPUT_DIR)) {", "+\t\t\t\t\tfiles.add(new File(fileNames[i]));", "+\t\t\t\t} else {", "+\t\t\t\t\tfiles.add(new File(OUTPUT_DIR + File.separator + fileNames[i]));", "+\t\t\t\t}", "-\t\t}", "-\t\tCompilationTask task = COMPILER.getTask(out, arguments.standardJavaFileManager /* carry the null over */, new CompilerInvocationDiagnosticListener(err), arguments.options, null, manager.getJavaFileObjectsFromFiles(files));", "-\t\treturn task.call();", "+\t\t\tCompilationTask task = COMPILER.getTask(out, arguments.standardJavaFileManager /* carry the null over */, new CompilerInvocationDiagnosticListener(err), arguments.options, null, manager.getJavaFileObjectsFromFiles(files));", "+\t\t\treturn task.call();", "+\t\t} finally {", "+\t\t\ttry {", "+\t\t\t\tmanager.close();", "+\t\t\t} catch (IOException e) {", "+\t\t\t\t// nop", "+\t\t\t}", "+\t\t}\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d296bc5368a1a50e9cf39f162c50f136", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/CompilerInvocationTests.java", "commitBeforeChange": "358c2d9eead1a2ad620bfd0dec02e0a53d937fcb", "commitAfterChange": "b7259e61ad84f1dda95b63bf74b4b4f38727c3a6", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " public void _test022_output_streams() throws IOException", "signatureAfterChange": " public void test022_output_streams() throws IOException", "diff": ["-public void _test022_output_streams() throws IOException {", "+public void test022_output_streams() throws IOException {", "-\t\t\toutBuffer = new ByteArrayOutputStream(),", "-\t\t\terrBuffer = new ByteArrayOutputStream();", "+\toutBuffer = new ByteArrayOutputStream(),", "+\terrBuffer = new ByteArrayOutputStream();", "-\t\tsystemOut = System.out,", "-\t\tsystemErr = System.err;", "+\tsystemOut = System.out,", "+\tsystemErr = System.err;", "-\t\tnull, ", "-\t\tJAVAC_COMPILER.getStandardFileManager(null /* diagnosticListener */, null /* locale */, null /* charset */), ", "-\t\tnew CompilerInvocationDiagnosticListener(new PrintWriter(errBuffer)), ", "-\t\tArrays.asList(\"-v\"), null, null);", "+\t\t\tnull, ", "+\t\t\tJAVAC_COMPILER.getStandardFileManager(null /* diagnosticListener */, null /* locale */, null /* charset */), ", "+\t\t\tnew CompilerInvocationDiagnosticListener(new PrintWriter(errBuffer)), ", "+\t\t\tArrays.asList(\"-v\"), null, null);", "-\tassertTrue(task.call());", "-\tassertTrue(outBuffer.toString().isEmpty());", "-\tassertTrue(errBuffer.toString().startsWith(\"Eclipse Java Compiler\"));", "+\t\tassertTrue(task.call());", "+\t\tassertTrue(outBuffer.toString().isEmpty());", "+\t\tassertTrue(errBuffer.toString().startsWith(\"Eclipse Compiler for Java\"));"]}], "num": 11706}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "887fc78756cc562fcff89d70a9a15fa8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09289faf7d6d6e957511e81c699866db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "11d9bc69677fa9c8e3ad183264b865451dc15a16", "commitAfterChange": "0aef5635cdda5f8b487e6520930c462feef51cd5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void match(Reference node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(Reference node, MatchingNodeSet nodeSet)", "diff": ["-//public void match(MessageSend node, MatchingNodeSet nodeSet) - SKIP IT", "-public void match(Reference node, MatchingNodeSet nodeSet) { // interested in NameReference & its subtypes", "-\tif (!(node instanceof NameReference)) return;", "+//public int match(MessageSend node, MatchingNodeSet nodeSet) - SKIP IT", "+public int match(Reference node, MatchingNodeSet nodeSet) { // interested in NameReference & its subtypes", "+\tif (!(node instanceof NameReference)) return IMPOSSIBLE_MATCH;", "-\tif (this.pattern.simpleName == null) {", "-\t\tnodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "-\t} else if (node instanceof SingleNameReference) {", "+\tif (this.pattern.simpleName == null)", "+\t\treturn nodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "+", "+\tif (node instanceof SingleNameReference) {", "-\t\t\tnodeSet.addMatch(node, POSSIBLE_MATCH); // resolution is needed to find out if it is a type ref ", "+\t\t\treturn nodeSet.addMatch(node, POSSIBLE_MATCH); // resolution is needed to find out if it is a type ref ", "-\t\tfor (int i = 0, max = tokens.length; i < max; i++) {", "-\t\t\tif (matchesName(this.pattern.simpleName, tokens[i])) {", "-\t\t\t\tnodeSet.addMatch(node, POSSIBLE_MATCH); // resolution is needed to find out if it is a type ref", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t}", "+\t\tfor (int i = 0, max = tokens.length; i < max; i++)", "+\t\t\tif (matchesName(this.pattern.simpleName, tokens[i]))", "+\t\t\t\treturn nodeSet.addMatch(node, POSSIBLE_MATCH); // resolution is needed to find out if it is a type ref", "+", "+\treturn IMPOSSIBLE_MATCH;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83c015f197f869737a47059424231a31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "11d9bc69677fa9c8e3ad183264b865451dc15a16", "commitAfterChange": "0aef5635cdda5f8b487e6520930c462feef51cd5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void match(TypeReference node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(TypeReference node, MatchingNodeSet nodeSet)", "diff": ["-//public void match(TypeDeclaration node, MatchingNodeSet nodeSet) - SKIP IT", "-public void match(TypeReference node, MatchingNodeSet nodeSet) {", "+//public int match(TypeDeclaration node, MatchingNodeSet nodeSet) - SKIP IT", "+public int match(TypeReference node, MatchingNodeSet nodeSet) {", "-\t\tnodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "+\t\treturn nodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "-\t\t\tnodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "+\t\t\treturn nodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "-\t\tfor (int i = 0, max = tokens.length; i < max; i++) {", "-\t\t\tif (matchesName(this.pattern.simpleName, tokens[i])) {", "-\t\t\t\tnodeSet.addMatch(node, POSSIBLE_MATCH); // resolution is needed to find out if it is a type ref", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t}", "+\t\tfor (int i = 0, max = tokens.length; i < max; i++)", "+\t\t\tif (matchesName(this.pattern.simpleName, tokens[i]))", "+\t\t\t\treturn nodeSet.addMatch(node, POSSIBLE_MATCH); // resolution is needed to find out if it is a type ref", "+", "+\treturn IMPOSSIBLE_MATCH;"]}], "num": 14391}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "797c996937a64a3a9bc44d0ba35bd61f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0683f4c1f1bafffb34cdd530db91d602", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "3e190b68d238643d825e1ad9aa87d6bbe9e82edc", "commitAfterChange": "2b27dcb10e8425a7a2b60cafac84f86873aa3258", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " private TypeVariableBinding createTypeVariable(SignatureWrapper wrapper, int rank)", "signatureAfterChange": " private TypeVariableBinding createTypeVariable(SignatureWrapper wrapper, int rank)", "diff": ["-\twrapper.start = colon + 1; // skip name + ':'", "-\tReferenceBinding type, firstBound = null;", "-\tif (wrapper.signature[wrapper.start] == ':') {", "-\t\ttype = environment.getType(JAVA_LANG_OBJECT);", "-\t} else {", "-\t\ttype = (ReferenceBinding) environment.getTypeFromTypeSignature(wrapper, NoTypeVariables, this);", "-\t\tfirstBound = type;", "-\t}", "-", "-\t// variable is visible to its bounds", "-\tvariable.modifiers |= AccUnresolved;", "-\tvariable.superclass = type;", "-", "-\tReferenceBinding[] bounds = null;", "-\tif (wrapper.signature[wrapper.start] == ':') {", "-\t\tjava.util.ArrayList types = new java.util.ArrayList(2);", "-\t\tdo {", "-\t\t\twrapper.start++; // skip ':'", "-\t\t\ttypes.add(environment.getTypeFromTypeSignature(wrapper, new TypeVariableBinding[] {variable}, this));", "-\t\t} while (wrapper.signature[wrapper.start] == ':');", "-\t\tbounds = new ReferenceBinding[types.size()];", "-\t\ttypes.toArray(bounds);", "-\t}", "-", "-\tvariable.superInterfaces = bounds == null ? NoSuperInterfaces : bounds;", "-\tif (firstBound == null) {", "-\t\tfirstBound = variable.superInterfaces.length == 0 ? null : variable.superInterfaces[0];", "-\t\tvariable.modifiers |= AccInterface;", "-//\t\tvariable.superclass = null;", "-\t}", "-\tvariable.firstBound = firstBound;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "123a97293da4059f92c37c9783e8fa2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "271be052e104f1beefee4cd78039eca6ee6adb4f", "commitAfterChange": "f21888ae6d4ceca17a4c2f2fe7153b358e68695f", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "  TypeBinding getTypeFromTypeSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType, char[][][] missingTypeNames)", "signatureAfterChange": "  public TypeBinding getTypeFromTypeSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType, char[][][] missingTypeNames)", "diff": ["-TypeBinding getTypeFromTypeSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType, char[][][] missingTypeNames) {", "+public TypeBinding getTypeFromTypeSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType, char[][][] missingTypeNames) {", "-\t\t    if (enclosingType instanceof BinaryTypeBinding) { // per construction can only be binary type binding", "-\t\t\t\tTypeVariableBinding[] enclosingVariables = ((BinaryTypeBinding)enclosingType).typeVariables; // do not trigger resolution of variables", "-\t\t\t\tfor (int i = enclosingVariables.length; --i >= 0;)", "-\t\t\t\t\tif (CharOperation.equals(enclosingVariables[i].sourceName, wrapper.signature, varStart, varEnd))", "-\t\t\t\t\t\treturn dimension == 0 ? (TypeBinding) enclosingVariables[i] : createArrayType(enclosingVariables[i], dimension);", "-\t\t    }", "+\t\t\tTypeVariableBinding[] enclosingTypeVariables;", "+\t\t\tif (enclosingType instanceof BinaryTypeBinding) { // compiler normal case, no eager resolution of binary variables", "+\t\t\t\tenclosingTypeVariables = ((BinaryTypeBinding)enclosingType).typeVariables; // do not trigger resolution of variables", "+\t\t\t} else { // codepath only use by codeassist for decoding signatures", "+\t\t\t\tenclosingTypeVariables = enclosingType.typeVariables();", "+\t\t\t}", "+\t\t\tfor (int i = enclosingTypeVariables.length; --i >= 0;)", "+\t\t\t\tif (CharOperation.equals(enclosingTypeVariables[i].sourceName, wrapper.signature, varStart, varEnd))", "+\t\t\t\t\treturn dimension == 0 ? (TypeBinding) enclosingTypeVariables[i] : createArrayType(enclosingTypeVariables[i], dimension);"]}], "num": 39998}
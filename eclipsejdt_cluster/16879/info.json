{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48d7cb5b03e106e9e4974e20c391decf", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1296ab43f8ff45c7a2563ee71e4360bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "808ee1989aa546fef406f77c37a96f979df5219f", "commitAfterChange": "2528937997399f978f8c04c6800f46f957dbd27f", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": " public boolean matchesName(char[] pattern, char[] name)", "signatureAfterChange": " public boolean matchesName(char[] pattern, char[] name)", "diff": ["-\t\tboolean isCamelCase = (this.matchRule & R_CAMELCASE_MATCH) != 0;", "+\t\tboolean isCamelCase = (this.matchRule & R_CAMEL_CASE_MATCH) != 0;", "-\t\tif (matchMode == R_PREFIX_MATCH && emptyPattern) return true;", "+\t\tboolean isPrefix = (this.matchRule & R_PREFIX_MATCH) != 0;", "+\t\tif (isPrefix && emptyPattern) return true;", "-\t\tif (isCamelCase && matchFirstChar && CharOperation.camelCaseMatch(pattern, name)) {", "-\t\t\treturn true;", "+\t\tif (isCamelCase) {", "+\t\t\tif (matchFirstChar && CharOperation.camelCaseMatch(pattern, name, isPrefix)) {", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tif (isCaseSensitive) return false;", "-\t\t\tcase R_FULL_MATCH :", "-\t\t\t\tif (!isCamelCase) {", "-\t\t\t\t\tif (sameLength && matchFirstChar) {", "-\t\t\t\t\t\treturn CharOperation.equals(pattern, name, isCaseSensitive);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "+\t\t\t\tif (sameLength && matchFirstChar) {", "+\t\t\t\t\treturn CharOperation.equals(pattern, name, isCaseSensitive);", "-\t\t\t\t// fall through next case to match as prefix if camel case failed", "+\t\t\t\tbreak;", "+\t\t\t\t// TODO_PERFS (frederic) not sure this lowercase was necessary..."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24cfdc18193acb6bfca0b9996b139438", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java", "commitBeforeChange": "808ee1989aa546fef406f77c37a96f979df5219f", "commitAfterChange": "2528937997399f978f8c04c6800f46f957dbd27f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static boolean isMatch(char[] pattern, char[] word, int matchRule)", "signatureAfterChange": "  public static boolean isMatch(char[] pattern, char[] word, int matchRule)", "diff": ["-\tboolean isCamelCase = (matchRule & SearchPattern.R_CAMELCASE_MATCH) != 0;", "-\tif (isCamelCase &&  pattern[0] == word[0] && CharOperation.camelCaseMatch(pattern, word)) {", "-\t\treturn true;", "+\tboolean isCamelCase = (matchRule & SearchPattern.R_CAMEL_CASE_MATCH) != 0;", "+\tif (isCamelCase) {", "+\t\tif (pattern[0] == word[0] && CharOperation.camelCaseMatch(pattern, word, (matchRule & SearchPattern.R_PREFIX_MATCH) != 0)) {", "+\t\t\treturn true;", "+\t\t}", "+\t\tif ((matchRule & SearchPattern.R_CASE_SENSITIVE) != 0) return false;", "-\tmatchRule &= ~SearchPattern.R_CAMELCASE_MATCH;", "+\tmatchRule &= ~SearchPattern.R_CAMEL_CASE_MATCH;", "-\t\t\tif (!isCamelCase) {", "-\t\t\t\treturn patternLength == wordLength && CharOperation.equals(pattern, word, false);", "-\t\t\t}", "-\t\t\t// fall through prefix match if camel case failed", "+\t\t\treturn patternLength == wordLength && CharOperation.equals(pattern, word, false);", "-\t\t\tif (!isCamelCase) {", "-\t\t\t\treturn pattern[0] == word[0] && patternLength == wordLength && CharOperation.equals(pattern, word);", "-\t\t\t}", "-\t\t\t// fall through prefix match if camel case failed", "+\t\t\treturn pattern[0] == word[0] && patternLength == wordLength && CharOperation.equals(pattern, word);"]}], "num": 16879}
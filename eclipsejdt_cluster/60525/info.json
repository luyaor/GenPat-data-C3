{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb6b8c25257b642d5ba87b467b9cb7df", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04e400d1933503d2d767533a7dc988cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "a283419708f25fe1336a00a0cfc8b4d7ffdb4ea6", "commitAfterChange": "78df60c293834e15ab5138d21694328394cc129c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void resolve(MethodScope methScope)", "signatureAfterChange": " \tpublic void resolve(MethodScope methScope)", "diff": ["+\t\t", "+\t\t// get method declaration", "+\t\tAbstractMethodDeclaration methDecl = methScope.referenceMethod();", "+", "+\t\t// @see tags", "+\t\tint seeTagsNbre = references == null ? 0 : references.length;", "+\t\tboolean superRef = false;", "+\t\tfor (int i = 0; i < seeTagsNbre; i++) {", "+\t\t\tTypeBinding binding = references[i].resolveType(methScope);", "+\t\t\tif (!superRef && binding != null && binding.isValidBinding()) {", "+\t\t\t\t// if binding is valid then look if we have a reference to an overriden method/constructor", "+\t\t\t\tif (references[i] instanceof JavadocMessageSend) {", "+\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) references[i];", "+\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(messageSend.qualifyingType) &&", "+\t\t\t\t\t\tCharOperation.equals(messageSend.selector, methDecl.selector) &&", "+\t\t\t\t\t\t(messageSend.binding.returnType == methDecl.binding.returnType)) {", "+\t\t\t\t\t\tif (messageSend.arguments == null && methDecl.arguments == null) {", "+\t\t\t\t\t\t\tsuperRef = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\telse if (messageSend.arguments != null && methDecl.arguments != null) {", "+\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersEqual(messageSend.binding);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\telse if (references[i] instanceof JavadocAllocationExpression) {", "+\t\t\t\t\tJavadocAllocationExpression allocationExpr = (JavadocAllocationExpression) references[i];", "+\t\t\t\t\tTypeBinding constructorBinding = allocationExpr.type.resolvedType;", "+\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(constructorBinding)) {", "+\t\t\t\t\t\tif (allocationExpr.arguments == null && methDecl.arguments == null) {", "+\t\t\t\t\t\t\tsuperRef = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\telse if (allocationExpr.arguments != null && methDecl.arguments != null) {", "+\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersEqual(allocationExpr.binding);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\t// Store if a reference exists to an overriden method/constructor or the method is in a local type,", "+\t\tboolean reportMissing = !(superRef || (methDecl.binding.declaringClass != null && methDecl.binding.declaringClass.isLocalType()));", "-\t\tresolveParamTags(methScope);", "+\t\tresolveParamTags(methScope, reportMissing);", "-\t\t\tAbstractMethodDeclaration md = methScope.referenceMethod();", "-\t\t\tif (!md.isConstructor() && !md.isClinit()) {", "-\t\t\t\tMethodDeclaration meth = (MethodDeclaration) md;", "-\t\t\t\tif (meth.binding.returnType != VoidBinding) {", "-\t\t\t\t\t// method with return should have @return tag", "-\t\t\t\t\t//int end = md.sourceStart + md.selector.length - 1;", "-\t\t\t\t\tmethScope.problemReporter().javadocInvalidReturnTag(meth.returnType.sourceStart, meth.returnType.sourceEnd, true);", "+\t\t\tif (reportMissing) {", "+\t\t\t\tif (!methDecl.isConstructor() && !methDecl.isClinit()) {", "+\t\t\t\t\tMethodDeclaration meth = (MethodDeclaration) methDecl;", "+\t\t\t\t\tif (meth.binding.returnType != VoidBinding) {", "+\t\t\t\t\t\t// method with return should have @return tag", "+\t\t\t\t\t\tmethScope.problemReporter().javadocMissingReturnTag(meth.returnType.sourceStart, meth.returnType.sourceEnd);", "+\t\t\t\t\t}", "-\t\tresolveThrowsTags(methScope);", "-", "-\t\t// @see tags", "-\t\tint seeTagsNbre = references == null ? 0 : references.length;", "-\t\tfor (int i = 0; i < seeTagsNbre; i++) {", "-\t\t\treferences[i].resolveType(methScope);", "-\t\t}", "+\t\tresolveThrowsTags(methScope, reportMissing);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df5a0fba4f29f3beea3bb75d532c04bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "2820b43f038a3bcfacbc2797064d7e5f6a2cb56e", "commitAfterChange": "a570286b736c470e3a8d4706cda3b67517e91cfc", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " protected void findMethodBinding(BlockScope scope, TypeBinding[] argumentTypes)", "signatureAfterChange": " protected void findMethodBinding(BlockScope scope, TypeBinding[] argumentTypes)", "diff": ["+\t", "+\t/* There are embedded assumptions in the JLS8 type inference scheme that a successful solution of the type equations results in an", "+\t   applicable method. This appears to be a tenuous assumption, at least one not made by the JLS7 engine or the reference compiler and ", "+\t   there are cases where this assumption would appear invalid: See https://bugs.eclipse.org/bugs/show_bug.cgi?id=426537, where we allow ", "+\t   certain compatibility constrains around raw types to be violated. ", "+       ", "+       Here, we filter out such inapplicable methods with raw type usage that may have sneaked past overload resolution and type inference, ", "+       playing the devils advocate, blaming the invocations with raw arguments that should not go blameless. At this time this is in the ", "+       nature of a point fix and is not a general solution which needs to come later (that also includes AE, QAE and ECC)", "+    */", "+\tfinal CompilerOptions compilerOptions = scope.compilerOptions();", "+\tif (compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8 && this.binding instanceof ParameterizedGenericMethodBinding && this.binding.isValidBinding()) {", "+\t\tif (!compilerOptions.postResolutionRawTypeCompatibilityCheck)", "+\t\t\treturn;", "+\t\tParameterizedGenericMethodBinding pgmb = (ParameterizedGenericMethodBinding) this.binding;", "+\t\tInferenceContext18 ctx = getInferenceContext(pgmb);", "+\t\tif (ctx == null || ctx.stepCompleted < InferenceContext18.BINDINGS_UPDATED)", "+\t\t\treturn;", "+\t\tint length = pgmb.typeArguments == null ? 0 : pgmb.typeArguments.length;", "+\t\tboolean sawRawType = false;", "+\t\tfor (int i = 0;  i < length; i++) {", "+\t\t\t/* Must check compatibility against capture free method. Formal parameters cannot have captures, but our machinery is not up to snuff to", "+\t\t\t   construct a PGMB without captures at the moment - for one thing ITCB does not support uncapture() yet, for another, INTERSECTION_CAST_TYPE", "+\t\t\t   does not appear fully hooked up into isCompatibleWith and isEquivalent to everywhere. At the moment, bail out if we see capture.", "+\t\t\t*/   ", "+\t\t\tif (pgmb.typeArguments[i].isCapture())", "+\t\t\t\treturn;", "+\t\t\tif (pgmb.typeArguments[i].isRawType())", "+\t\t\t\tsawRawType = true;", "+\t\t}", "+\t\tif (!sawRawType)", "+\t\t\treturn;", "+\t\tlength = this.arguments == null ? 0 : this.arguments.length;", "+\t\tif (length == 0)", "+\t\t\treturn;", "+\t\tTypeBinding [] finalArgumentTypes = new TypeBinding[length];", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tTypeBinding finalArgumentType = this.arguments[i].resolvedType;", "+\t\t\tif (finalArgumentType == null || !finalArgumentType.isValidBinding())  // already sided with the devil.", "+\t\t\t\treturn;", "+\t\t\tfinalArgumentTypes[i] = finalArgumentType; ", "+\t\t}", "+\t\tif (scope.parameterCompatibilityLevel(this.binding, finalArgumentTypes, false) == Scope.NOT_COMPATIBLE)", "+\t\t\tthis.binding = new ProblemMethodBinding(this.binding.original(), this.binding.selector, finalArgumentTypes, ProblemReasons.NotFound);", "+\t}"]}], "num": 60525}
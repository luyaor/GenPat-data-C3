{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1cf31ab5caa671775d063e0f2783bea", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9692fa57dc75c7558e73c6bb7c80feda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "aa717ce56e721f6ed4fc92594ba56da9f08c982e", "commitAfterChange": "5e93996c6b4562ee73fa5730afbd832d1574cd08", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void printComment()", "signatureAfterChange": " \tpublic void printComment()", "diff": ["+\t\t\tint count = 0;", "-\t\t\t\t\t\taddDeleteEdit(this.scanner.getCurrentTokenStartPosition(), this.scanner.getCurrentTokenEndPosition());", "-\t\t\t\t\t\tint count = 0;", "+\t\t\t\t\t\tcount = 0;", "-\t\t\t\t\t\tif (count > 1) {", "-\t\t\t\t\t\t\tpreserveEmptyLines(count - 1);", "-\t\t\t\t\t\t} else if (count == 1) {", "-\t\t\t\t\t\t\tif (hasLineComment) {", "-\t\t\t\t\t\t\t\tpreserveEmptyLines(1);", "-\t\t\t\t\t\t\t} else if (hasComment || this.formatter.preferences.preserve_user_linebreaks) {", "-\t\t\t\t\t\t\t\tprintNewLine();", "+\t\t\t\t\t\tif (count == 0) {", "+\t\t\t\t\t\t\thasWhitespace = true;", "+\t\t\t\t\t\t\taddDeleteEdit(this.scanner.getCurrentTokenStartPosition(), this.scanner.getCurrentTokenEndPosition());", "+\t\t\t\t\t\t} else if (hasComment) {", "+\t\t\t\t\t\t\tif (count == 1) {", "+\t\t\t\t\t\t\t\tthis.printNewLine(this.scanner.getCurrentTokenStartPosition());", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tpreserveEmptyLines(count - 1, this.scanner.getCurrentTokenStartPosition());", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\taddDeleteEdit(this.scanner.getCurrentTokenStartPosition(), this.scanner.getCurrentTokenEndPosition());", "+\t\t\t\t\t\t} else if (this.formatter.preferences.preserve_user_linebreaks) {", "+\t\t\t\t\t\t\taddDeleteEdit(this.scanner.getCurrentTokenStartPosition(), this.scanner.getCurrentTokenEndPosition());", "+\t\t\t\t\t\t\tif (count == 1) {", "+\t\t\t\t\t\t\t\tthis.printNewLine(this.scanner.getCurrentTokenEndPosition() + 1);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tpreserveEmptyLines(count - 1, this.scanner.getCurrentTokenEndPosition() + 1);", "-\t\t\t\t\t\t\thasWhitespace = true;", "+\t\t\t\t\t\t\taddDeleteEdit(this.scanner.getCurrentTokenStartPosition(), this.scanner.getCurrentTokenEndPosition());", "-\t\t\t\t\t\tif (hasWhitespace) {", "+\t\t\t\t\t\tif (count >= 1) {", "+\t\t\t\t\t\t\tif (count > 1) {", "+\t\t\t\t\t\t\t\tpreserveEmptyLines(count - 1, this.scanner.getCurrentTokenStartPosition());", "+\t\t\t\t\t\t\t} else if (count == 1 || hasLineComment || hasComment || this.formatter.preferences.preserve_user_linebreaks) {", "+\t\t\t\t\t\t\t\tprintNewLine(this.scanner.getCurrentTokenStartPosition());", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (hasWhitespace) {", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t} ", "-\t\t\t\t\t\tif (hasWhitespace) {", "+\t\t\t\t\t\tif (count >= 1) {", "+\t\t\t\t\t\t\tif (count > 1) {", "+\t\t\t\t\t\t\t\tpreserveEmptyLines(count - 1, this.scanner.getCurrentTokenStartPosition());", "+\t\t\t\t\t\t\t} else if (count == 1 && ((hasLineComment || hasComment || this.formatter.preferences.preserve_user_linebreaks))) {", "+\t\t\t\t\t\t\t\tprintNewLine(this.scanner.getCurrentTokenStartPosition());", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (hasWhitespace) {", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t} ", "-\t\t\t\t\t\tif (hasWhitespace) {", "+\t\t\t\t\t\tif (count >= 1) {", "+\t\t\t\t\t\t\tif (count > 1) {", "+\t\t\t\t\t\t\t\tpreserveEmptyLines(count - 1, this.scanner.getCurrentTokenStartPosition());", "+\t\t\t\t\t\t\t} else if (count == 1 && ((hasLineComment || hasComment || this.formatter.preferences.preserve_user_linebreaks))) {", "+\t\t\t\t\t\t\t\tprintNewLine(this.scanner.getCurrentTokenStartPosition());", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (hasWhitespace) {", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t} "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c602a8815252bc3437ea6ae930b337c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "c98abd1679793c741445024ae2ee115b37f6fe95", "commitAfterChange": "b2ee2f0e0ad1c5d61d4417df1a17fc01d93cc41f", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tpublic void printTrailingComment()", "signatureAfterChange": "  \tpublic void printTrailingComment()", "diff": ["-\t\t\tboolean hasCommentLine = false;", "-\t\t\twhile (!hasCommentLine && (this.currentToken = this.scanner.getNextToken()) != ITerminalSymbols.TokenNameEOF) {", "-\t\t\t\tswitch(this.currentToken) {", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameWHITESPACE :", "-\t\t\t\t\t\tint count = 0;", "-\t\t\t\t\t\tchar[] whiteSpaces = this.scanner.getCurrentTokenSource();", "-\t\t\t\t\t\tfor (int i = 0, max = whiteSpaces.length; i < max; i++) {", "-\t\t\t\t\t\t\tswitch(whiteSpaces[i]) {", "-\t\t\t\t\t\t\t\tcase '\\r' :", "-\t\t\t\t\t\t\t\t\tif ((i + 1) < max) {", "-\t\t\t\t\t\t\t\t\t\tif (whiteSpaces[i + 1] == '\\n') {", "-\t\t\t\t\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\tcase '\\n' :", "-\t\t\t\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\t\tif (count > 0) {", "-\t\t\t\t\t\t\tif (!hasCommentLine) {", "-\t\t\t\t\t\t\t\tpreserveEmptyLines(count);", "-\t\t\t\t\t\t\t\tthis.printNewLine();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_LINE :", "-\t\t\t\t\t\tthis.printCommentLine(this.scanner.getCurrentTokenSource(), this.scanner.getCurrentTokenStartPosition());", "-\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\t\thasCommentLine = true;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_BLOCK :", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_JAVADOC :", "-\t\t\t\t\t\tthis.printBlockComment(this.scanner.getRawTokenSource(), this.scanner.getCurrentTokenStartPosition());", "-\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault :", "-\t\t\t\t\t\tif (!hasCommentLine) {", "-\t\t\t\t\t\t\tthis.printNewLine();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition);", "-\t\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (InvalidInputException e) {", "-\t\t\tthrow new AbortFormatting(e);", "-\t\t}", "-\t}", "+\t\t\tboolean hasComment = false;", "+\t\t\tboolean hasLineComment = false;", "+\t\t\t\t\t\t\t\t\t\tcount++; ", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;\t\t\t\t\t\t", "+\t\t\t\t\t\tif (count > 1) {", "+\t\t\t\t\t\t\tif (hasLineComment) {", "+\t\t\t\t\t\t\t\tpreserveEmptyLines(count + 1);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tpreserveEmptyLines(count);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t} else if (count == 1) {", "+\t\t\t\t\t\t\tif (hasLineComment) {", "+\t\t\t\t\t\t\t\tpreserveEmptyLines(1);", "+\t\t\t\t\t\t\t} else if (hasComment) {", "+\t\t\t\t\t\t\t\tprintNewLine();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\thasLineComment = true;\t\t\t\t\t", "+\t\t\t\t\t\thasLineComment = false;", "+\t\t\t\t\t\thasComment = true;", "+\t\t\t\t\t\t// step back one token", "+\t\t\t\t\t\tprintNewLine();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eafdd43332b00735d299dcea001902ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "5103cbbe93dc06e237ba05a89fd826d834ad4e54", "commitAfterChange": "36f7c1e916ce794f19c8c7bfc5e63afd70aa3df0", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "  \tpublic void printTrailingComment()", "signatureAfterChange": "  \tpublic void printTrailingComment(int numberOfNewLinesToInsert)", "diff": ["+\tpublic void printTrailingComment(int numberOfNewLinesToInsert) {", "+\t\ttry {", "+\t\t\t// if we have a space between two tokens we ensure it will be dumped in the formatted string", "+\t\t\tint currentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\tboolean hasWhitespaces = false;", "+\t\t\tboolean hasLineComment = false;", "+\t\t\twhile ((this.currentToken = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\tswitch(this.currentToken) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE :", "+\t\t\t\t\t\tint count = 0;", "+\t\t\t\t\t\tchar[] whiteSpaces = this.scanner.getCurrentTokenSource();", "+\t\t\t\t\t\tfor (int i = 0, max = whiteSpaces.length; i < max; i++) {", "+\t\t\t\t\t\t\tswitch(whiteSpaces[i]) {", "+\t\t\t\t\t\t\t\tcase '\\r' :", "+\t\t\t\t\t\t\t\t\tif ((i + 1) < max) {", "+\t\t\t\t\t\t\t\t\t\tif (whiteSpaces[i + 1] == '\\n') {", "+\t\t\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase '\\n' :", "+\t\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (hasLineComment) {", "+\t\t\t\t\t\t\tif (count >= 1) {", "+\t\t\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\t\t\t\tthis.preserveEmptyLines(numberOfNewLinesToInsert, currentTokenStartPosition);", "+\t\t\t\t\t\t\t\taddDeleteEdit(currentTokenStartPosition, this.scanner.getCurrentTokenEndPosition());", "+\t\t\t\t\t\t\t\tthis.scanner.resetTo(this.scanner.currentPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (count > 1) {", "+\t\t\t\t\t\t\tthis.printEmptyLines(numberOfNewLinesToInsert, this.scanner.getCurrentTokenStartPosition());", "+\t\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\thasWhitespaces = true;", "+\t\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;\t\t\t\t\t\t", "+\t\t\t\t\t\t\taddDeleteEdit(this.scanner.getCurrentTokenStartPosition(), this.scanner.getCurrentTokenEndPosition());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_LINE :", "+\t\t\t\t\t\tif (hasWhitespaces) {", "+\t\t\t\t\t\t\tspace();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.printCommentLine(this.scanner.getRawTokenSource());", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\thasLineComment = true;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_BLOCK :", "+\t\t\t\t\t\tif (hasWhitespaces) {", "+\t\t\t\t\t\t\tspace();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.printBlockComment(this.scanner.getRawTokenSource(), false);", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault :", "+\t\t\t\t\t\t// step back one token", "+\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (InvalidInputException e) {", "+\t\t\tthrow new AbortFormatting(e);", "+\t\t}", "+\t}"]}], "num": 10970}
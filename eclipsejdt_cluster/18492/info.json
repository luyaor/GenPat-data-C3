{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0dc9d5ce260fde92538808acc318f802", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbc15455eb28c03c43b420484aa49adb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1438, "methodNumberAfterChange": 1438, "signatureBeforeChange": " public void test1407()", "signatureAfterChange": " public void test1407()", "diff": ["-\t\t\t\t\"\tpublic static <I> I m2(Class<I> c) { return null; }\t\\n\" + ", "-\t\t\t\t\"\t\tFoo l1 = m1((Class)Foo.class); //ok - unchecked conversion from Class to Class<Foo> - I inferred to be Foo\\n\" + ", "-\t\t\t\t\"\t\tFoo l2 = m2((Class)Foo.class); //unchecked call, erased return type and error because Object != Foo\t\t\\n\" + ", "+\t\t\t\t\"\t\tFoo l1 = m1((Class)Foo.class);\\n\" + ", "-\t\t\t\"1. WARNING in Foo.java (at line 5)\\n\" + ", "-\t\t\t\"\tFoo l1 = m1((Class)Foo.class); //ok - unchecked conversion from Class to Class<Foo> - I inferred to be Foo\\n\" + ", "-\t\t\t\"\t            ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<Foo>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in Foo.java (at line 5)\\n\" + ", "-\t\t\t\"\tFoo l1 = m1((Class)Foo.class); //ok - unchecked conversion from Class to Class<Foo> - I inferred to be Foo\\n\" + ", "-\t\t\t\"\t             ^^^^^\\n\" + ", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in Foo.java (at line 6)\\n\" + ", "-\t\t\t\"\tFoo l2 = m2((Class)Foo.class); //unchecked call, erased return type and error because Object != Foo\t\t\\n\" + ", "+\t\t\t\"1. WARNING in Foo.java (at line 4)\\n\" + ", "+\t\t\t\"\tFoo l1 = m1((Class)Foo.class);\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation m2(Class) of the generic method m2(Class<I>) of type Foo\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation m1(Class) of the generic method m1(Class<Foo>) of type Foo\\n\" + ", "-\t\t\t\"4. ERROR in Foo.java (at line 6)\\n\" + ", "-\t\t\t\"\tFoo l2 = m2((Class)Foo.class); //unchecked call, erased return type and error because Object != Foo\t\t\\n\" + ", "+\t\t\t\"2. ERROR in Foo.java (at line 4)\\n\" + ", "+\t\t\t\"\tFoo l1 = m1((Class)Foo.class);\\n\" + ", "-\t\t\t\"5. WARNING in Foo.java (at line 6)\\n\" + ", "-\t\t\t\"\tFoo l2 = m2((Class)Foo.class); //unchecked call, erased return type and error because Object != Foo\t\t\\n\" + ", "+\t\t\t\"3. WARNING in Foo.java (at line 4)\\n\" + ", "+\t\t\t\"\tFoo l1 = m1((Class)Foo.class);\\n\" + ", "-\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<I>\\n\" + ", "+\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<Foo>\\n\" + ", "-\t\t\t\"6. WARNING in Foo.java (at line 6)\\n\" + ", "-\t\t\t\"\tFoo l2 = m2((Class)Foo.class); //unchecked call, erased return type and error because Object != Foo\t\t\\n\" + ", "+\t\t\t\"4. WARNING in Foo.java (at line 4)\\n\" + ", "+\t\t\t\"\tFoo l1 = m1((Class)Foo.class);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1f11bc06eb2503f77b07e014dd3b10d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "2a23c62d5a3b74783613a638cca640e487db040a", "commitAfterChange": "79c4ba61903262b42e2a1f500afb283891f6e429", "methodNumberBeforeChange": 328, "methodNumberAfterChange": 328, "signatureBeforeChange": " public void test177()", "signatureAfterChange": " public void test177()", "diff": ["+// JDK7 (7b100) behavior. (earlier we would issue an extra name clash)", "-\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\tclass X extends A implements I {\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"Name clash: The method foo(Collection<?>) of type I has the same erasure as foo(Collection) of type A but does not override it\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 6)\\n\" + ", "-\t\t\t\"6. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\tclass X extends A implements I {\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"Name clash: The method foo(Collection<?>) of type I has the same erasure as foo(Collection) of type A but does not override it\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 6)\\n\" + ", "-\t\t\t\"6. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"7. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 7)\\n\" + "]}], "num": 18492}
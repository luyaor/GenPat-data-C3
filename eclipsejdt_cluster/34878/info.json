{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9200492e017a0c40d33b9111f302f63a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee057a119ec19d3e85c391c535861b40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "df511f7d8700bc6fecb763badf839262e3c7877a", "commitAfterChange": "130a1e4b6b320c4a0532080013eb40f472b69080", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 39, "signatureBeforeChange": "\r public void makeConsistent(IProblemRequestor problemRequestor, IProgressMonitor pm) throws JavaModelException", "signatureAfterChange": "\r public IJavaElement getWorkingCopy(IProgressMonitor pm, IBufferFactory factory) throws JavaModelException", "diff": ["+\treturn getWorkingCopy(pm, factory, null);\r", "+}\r", "-\tthis.makeConsistent(problemRequestor, false, pm);\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa280be9a3bd78b7c83dacc78ab9a35b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "9043b6a8e4132c7e53a6fb980711e9a0982fef9b", "commitAfterChange": "416292d2f4be39d514e933551cdaebb7c7ebd8a7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate void registerResult(TypeBinding targetType, MethodBinding declaration)", "signatureAfterChange": " \tprivate ReferenceExpression registerCopy(TypeBinding targetType, ReferenceExpression copy)", "diff": ["-\t// Cache compile time declaration against various target types, so repeat overload resolution and possibly type inference could be avoided.", "-\tprivate void registerResult(TypeBinding targetType, MethodBinding declaration) {", "-\t\tif (this.declarationPerTargetType == null)", "-\t\t\tthis.declarationPerTargetType = new HashMap<TypeBinding, MethodBinding>();", "-\t\tthis.declarationPerTargetType.put(targetType, declaration);", "-\t}", "+\t// Cache resolved copies against various target types, so repeat overload resolution and possibly type inference could be avoided.", "+\tprivate ReferenceExpression registerCopy(TypeBinding targetType, ReferenceExpression copy) {", "+\t\tif (this.copiesPerTargetType == null)", "+\t\t\tthis.copiesPerTargetType = new HashMap<TypeBinding, ReferenceExpression>();", "+\t\tthis.copiesPerTargetType.put(targetType, copy);", "+\t\treturn copy;"]}], "num": 34878}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "87436afeff929a056da5abe071c47b89", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33ed02a07ea314741a4cae52a3cd5b09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public ExceptionHandlingFlowContext( \t\tFlowContext parent, \t\tASTNode associatedNode, \t\tReferenceBinding[] handledExceptions, \t\tFlowContext initializationParent, \t\tBlockScope scope, \t\tUnconditionalFlowInfo flowInfo)", "signatureAfterChange": "  public ExceptionHandlingFlowContext( \t\t\tFlowContext parent, \t\t\tASTNode associatedNode, \t\t\tReferenceBinding[] handledExceptions, \t\t\tFlowContext initializationParent, \t\t\tBlockScope scope, \t\t\tUnconditionalFlowInfo flowInfo)", "diff": ["+", "+public ExceptionHandlingFlowContext(", "+\t\t\tFlowContext parent,", "+\t\t\tASTNode associatedNode,", "+\t\t\tReferenceBinding[] handledExceptions,", "+\t\t\tFlowContext initializationParent,", "+\t\t\tBlockScope scope,", "+\t\t\tUnconditionalFlowInfo flowInfo) {", "+\tthis(parent, associatedNode, handledExceptions, null, NO_ARGUMENTS, initializationParent, scope, flowInfo);", "+}", "-\t\t\tthis.initsOnExceptions[i] = flowInfo.unconditionalCopy();", "-\t\t\tthis.initsOnExceptions[i] = FlowInfo.DEAD_END;", "-\tthis.\tinitializationParent = initializationParent;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b035870564548e773772f974dc7502f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "418d08685e8bc0508d05dda65dd277f56261854f", "commitAfterChange": "2d42c7f71ce65658f51f1f08922e1c6e3b9d54f4", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 73, "signatureBeforeChange": " private final boolean atLambdaParameterList()", "signatureAfterChange": " private final boolean atLambdaParameterList()", "diff": ["-}", "-private final boolean atLambdaParameterList() {", "-", "-\t/* The cursor is just past '(' and the parser is parsing a primary expression. Look ahead and answer true", "-\t   if we are at the head of a lambda parameter list and false otherwise.", "-\t*/ ", "-", "-\tint savedCurrentPosition = this.currentPosition;", "-\tint savedStartPosition = this.startPosition;", "-\tchar savedCurrentCharacter = this.currentCharacter;", "-\tchar[] savedWithoutUnicodeBuffer = null;", "-\tint savedWithoutUnicodePtr = this.withoutUnicodePtr;", "-\tif (savedWithoutUnicodePtr != 0) {", "-\t\tint length = this.withoutUnicodeBuffer.length;", "-\t\tSystem.arraycopy(this.withoutUnicodeBuffer, 0, savedWithoutUnicodeBuffer = new char [length], 0, length);", "-\t}", "-\t", "-\tboolean atLambda = false;", "-\t", "-\ttry {", "-\t\ttry {", "-\t\t\tjumpOver('(', ')', blackListedTokens);", "-\t\t} finally {", "-\t\t\tif (this.currentCharacter == ')') {", "-\t\t\t\tboolean whiteSpace;", "-\t\t\t\tdo {", "-\t\t\t\t\tthis.startPosition = this.currentPosition;", "-\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\twhiteSpace = jumpOverUnicodeWhiteSpace();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\twhiteSpace = CharOperation.isWhitespace(this.currentCharacter);", "-\t\t\t\t\t}", "-\t\t\t\t} while (whiteSpace);", "-\t\t\t\tatLambda =  this.currentCharacter == '-' && getNextChar('>');", "-\t\t\t}", "-\t\t}", "-\t} catch (Exception e) {", "-\t\t// ignore", "-\t} finally {", "-\t\t// Restore status quo ante and return suitable value.", "-\t\tthis.currentPosition = savedCurrentPosition;", "-\t\tthis.startPosition = savedStartPosition;", "-\t\tthis.currentCharacter = savedCurrentCharacter;", "-\t\tthis.withoutUnicodePtr = savedWithoutUnicodePtr;", "-\t\tif (savedWithoutUnicodePtr != 0) {", "-\t\t\tSystem.arraycopy(savedWithoutUnicodeBuffer, 0, this.withoutUnicodeBuffer, 0, savedWithoutUnicodeBuffer.length);", "-\t\t}", "-\t\t", "-\t}", "-\treturn atLambda;", "-}", "+}", "+private final boolean atLambdaParameterList() { // Did the '(' we saw just now herald a lambda parameter list ?", "+\treturn getVanguardParser().parse(TokenNameARROW);", "+}"]}], "num": 59830}
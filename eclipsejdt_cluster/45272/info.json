{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a074e7458e69a8ddc9e8b1a89c338de5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c8675e509128c18f17e91245af97562", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/CommentRecorderParser.java", "commitBeforeChange": "f3797939fa5164cd62a3ae51074dba1ccea759ff", "commitAfterChange": "0df341e86846b5d019d9adfde0716c02f828f524", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic int flushCommentsDefinedPriorTo(int position)", "signatureAfterChange": " \tpublic int flushCommentsDefinedPriorTo(int position)", "diff": ["-\t\t\tint immediateCommentEnd = -this.scanner.commentStops[index+1]; //non-javadoc comment end positions are negative", "-\t\t\tif (immediateCommentEnd > 0){ // only tolerating non-javadoc comments", "+\t\t\tint immediateCommentEnd = 0;", "+\t\t\twhile (index<lastCommentIndex && (immediateCommentEnd = -this.scanner.commentStops[index+1])  > 0){ // only tolerating non-javadoc comments (non-javadoc comment end positions are negative)", "-\t\t\t\tif (this.scanner.getLineNumber(position) == this.scanner.getLineNumber(immediateCommentEnd)){", "-\t\t\t\t\tposition = immediateCommentEnd;", "-\t\t\t\t\tvalidCount--; // flush this comment", "-\t\t\t\t\tindex++;", "-\t\t\t\t}", "+\t\t\t\tif (this.scanner.getLineNumber(position) != this.scanner.getLineNumber(immediateCommentEnd)) break;", "+\t\t\t\tposition = immediateCommentEnd;", "+\t\t\t\tvalidCount--; // flush this comment", "+\t\t\t\tindex++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d21b78b264ecc36891855f067678989a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "3284f738bbf7a2dbd90434dea313c8629bed5722", "commitAfterChange": "bd3806cc9cec8e9a14826ff23d7065c6143ced5e", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "\t \t \tpublic MethodBinding findMethod0(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "signatureAfterChange": "\t \t \tpublic MethodBinding findMethod0(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "diff": ["-\t\t\t\t\t\t\tif (improved.isValidBinding()) {", "+\t\t\t\t\t\t\tif (improved != null && improved.isValidBinding()) {", "-\t\t\t\tunitScope.recordTypeReferences(candidate.thrownExceptions);", "+\t\t\t\tif (candidate != null)", "+\t\t\t\t\tunitScope.recordTypeReferences(candidate.thrownExceptions);"]}], "num": 45272}
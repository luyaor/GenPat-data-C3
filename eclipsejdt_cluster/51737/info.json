{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4e57a73700fcfa9520724a7d5de4d8f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dfe38c0957a0ce566ac80dd3286f0ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "6cdef9e50c0c19ef931636bb6582e431ba4ed6f0", "commitAfterChange": "a08dcb71c251f4a65da174f08c5aedb4a1c21fbd", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": " public boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-    if (this == otherType) return true;", "+", "+\tif (this == otherType) return true;", "-    if (otherType.isWildcard()) // wildcard", "-\t\treturn ((WildcardBinding) otherType).boundCheck(this);", "-    if (this.typeVariables == NoTypeVariables) return false;", "-    if (otherType.isParameterizedType()) {", "-        if ((otherType.tagBits & HasWildcard) == 0 && (!this.isMemberType() || !otherType.isMemberType())) ", "-        \treturn false; // should have been identical", "-        ParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "-        if (this != otherParamType.type) ", "-            return false;", "-        ReferenceBinding enclosing = enclosingType();", "-        if (enclosing != null && !enclosing.isEquivalentTo(otherParamType.enclosingType()))", "-            return false;", "-        int length = this.typeVariables == null ? 0 : this.typeVariables.length;", "-        TypeBinding[] otherArguments = otherParamType.arguments;", "-        int otherLength = otherArguments == null ? 0 : otherArguments.length;", "-        if (otherLength != length) ", "-            return false;", "-        // argument must be identical, only equivalence is allowed if wildcard other type", "-        for (int i = 0; i < length; i++) {", "-        \tTypeBinding argument = this.typeVariables[i];", "-        \tTypeBinding otherArgument = otherArguments[i];", "-\t\t\tif (!(argument == otherArgument", "-\t\t\t\t\t|| (otherArgument.isWildcard()) && argument.isEquivalentTo(otherArgument))) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-        }", "-        return true;", "-    } else if (otherType.isRawType())", "-        return otherType.erasure() == this;", "+    switch(otherType.bindingType()) {", "+", "+    \tcase Binding.WILDCARD_TYPE :", "+\t\t\treturn ((WildcardBinding) otherType).boundCheck(this);", "+    \t", "+    \tcase Binding.PARAMETERIZED_TYPE :", "+\t        if ((otherType.tagBits & HasWildcard) == 0 && (!this.isMemberType() || !otherType.isMemberType())) ", "+\t        \treturn false; // should have been identical", "+\t        ParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "+\t        if (this != otherParamType.type) ", "+\t            return false;", "+\t        ReferenceBinding enclosing = enclosingType();", "+\t        if (enclosing != null && !enclosing.isEquivalentTo(otherParamType.enclosingType()))", "+\t            return false;", "+\t        int length = this.typeVariables == null ? 0 : this.typeVariables.length;", "+\t        TypeBinding[] otherArguments = otherParamType.arguments;", "+\t        int otherLength = otherArguments == null ? 0 : otherArguments.length;", "+\t        if (otherLength != length) ", "+\t            return false;", "+\t        // argument must be identical, only equivalence is allowed if wildcard other type", "+\t        for (int i = 0; i < length; i++) {", "+\t        \tTypeBinding argument = this.typeVariables[i];", "+\t        \tTypeBinding otherArgument = otherArguments[i];", "+\t\t\t\tif (!(argument == otherArgument", "+\t\t\t\t\t\t|| (otherArgument.isWildcard()) && argument.isEquivalentTo(otherArgument))) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t        }", "+\t        return true;", "+    \t", "+    \tcase Binding.RAW_TYPE :", "+\t        return otherType.erasure() == this;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fff6c1321e5cd87614e7a25d7efbf65f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "6cdef9e50c0c19ef931636bb6582e431ba4ed6f0", "commitAfterChange": "a08dcb71c251f4a65da174f08c5aedb4a1c21fbd", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t \tpublic boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": " \t \tpublic boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-        if (otherType.isRawType())", "-            return erasure() == otherType.erasure();", "-        if (otherType.isParameterizedType()) {", "-            if ((otherType.tagBits & HasWildcard) == 0 && (!this.isMemberType() || !otherType.isMemberType())) ", "-            \treturn false; // should have been identical", "-            ParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "-            if (this.type != otherParamType.type) ", "-                return false;", "-            ReferenceBinding enclosing = enclosingType();", "-            if (enclosing != null && !enclosing.isEquivalentTo(otherParamType.enclosingType()))", "-                return false;", "-            int length = this.arguments == null ? 0 : this.arguments.length;", "-            TypeBinding[] otherArguments = otherParamType.arguments;", "-            int otherLength = otherArguments == null ? 0 : otherArguments.length;", "-            if (otherLength != length) ", "-                return false;", "-            // argument must be identical, only equivalence is allowed if wildcard other type", "-            for (int i = 0; i < length; i++) {", "-            \tTypeBinding argument = this.arguments[i];", "-            \tTypeBinding otherArgument = otherArguments[i];", "-\t\t\t\tif (!(argument == otherArgument", "-\t\t\t\t\t\t|| (otherArgument.isWildcard()) && argument.isEquivalentTo(otherArgument))) {", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-            }", "-            return true;", "-        }", "-        if (otherType.isWildcard())", "-        \treturn ((WildcardBinding) otherType).boundCheck(this);", "+\t    switch(otherType.bindingType()) {", "+\t", "+\t    \tcase Binding.WILDCARD_TYPE :", "+\t        \treturn ((WildcardBinding) otherType).boundCheck(this);", "+\t    \t\t", "+\t    \tcase Binding.PARAMETERIZED_TYPE :", "+\t            if ((otherType.tagBits & HasWildcard) == 0 && (!this.isMemberType() || !otherType.isMemberType())) ", "+\t            \treturn false; // should have been identical", "+\t            ParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "+\t            if (this.type != otherParamType.type) ", "+\t                return false;", "+\t            ReferenceBinding enclosing = enclosingType();", "+\t            if (enclosing != null && !enclosing.isEquivalentTo(otherParamType.enclosingType()))", "+\t                return false;", "+\t            int length = this.arguments == null ? 0 : this.arguments.length;", "+\t            TypeBinding[] otherArguments = otherParamType.arguments;", "+\t            int otherLength = otherArguments == null ? 0 : otherArguments.length;", "+\t            if (otherLength != length) ", "+\t                return false;", "+\t            // argument must be identical, only equivalence is allowed if wildcard other type", "+\t            for (int i = 0; i < length; i++) {", "+\t            \tTypeBinding argument = this.arguments[i];", "+\t            \tTypeBinding otherArgument = otherArguments[i];", "+\t\t\t\t\tif (!(argument == otherArgument", "+\t\t\t\t\t\t\t|| (otherArgument.isWildcard()) && argument.isEquivalentTo(otherArgument))) {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t            }", "+\t            return true;", "+\t    \t", "+\t    \tcase Binding.RAW_TYPE :", "+\t            return erasure() == otherType.erasure();", "+\t    }"]}], "num": 51737}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0d322fab92827fad4cfb7f39c0adebe", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d2ca8b07568067850cc30c0d5911df3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "319a6f22b4c64e212eff57a4501a52f0225217c6", "commitAfterChange": "cd2f0b28432b5b0308d7d5515f79ac66fead6f97", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "diff": ["-\t\t\t\t\t\tint index;", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tif ((index = Util.indexOfMatchingPath(customOutput, outputLocations, outputCount)) != -1) {", "+\t\t\t\t\t\tif (Util.indexOfMatchingPath(customOutput, outputLocations, outputCount) != -1) {", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// check nesting", "-\t\t\t\t\t\tif ((index = Util.indexOfEnclosingPath(customOutput, outputLocations, outputCount)) != -1) {", "-\t\t\t\t\t\t\tif (index == 0) {", "-\t\t\t\t\t\t\t\t// custom output is nested in project's output: need to check if all source entries have a custom", "-\t\t\t\t\t\t\t\t// output before complaining", "-\t\t\t\t\t\t\t\tif (potentialNestedOutput == null) potentialNestedOutput = customOutput;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestOutputInOutput\", customOutput.makeRelative().toString(), outputLocations[index].makeRelative().toString())); //$NON-NLS-1$", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t// accumulate all outputs, will check nesting once all available (to handle ordering issues)", "-\t\t\t}\t", "+\t\t\t}", "+\t\t}", "+\t\t// check nesting across output locations", "+\t\tfor (int i = 1 /*no check for default output*/ ; i < outputCount; i++) {", "+\t\t    IPath customOutput = outputLocations[i];", "+\t\t    int index;", "+\t\t\t// check nesting", "+\t\t\tif ((index = Util.indexOfEnclosingPath(customOutput, outputLocations, outputCount)) != -1 && index != i) {", "+\t\t\t\tif (index == 0) {", "+\t\t\t\t\t// custom output is nested in project's output: need to check if all source entries have a custom", "+\t\t\t\t\t// output before complaining", "+\t\t\t\t\tif (potentialNestedOutput == null) potentialNestedOutput = customOutput;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestOutputInOutput\", customOutput.makeRelative().toString(), outputLocations[index].makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c655622cf788d0f7e03d345b4b6ed58d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "e33ceacdb6e9b17f29de3a23e3df28f1c6bec162", "commitAfterChange": "81fe472327b51c234112233c89df88e95ab01675", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "diff": ["+\t\tIPath potentialNestedOutput = null;", "+\t\tint sourceEntryCount = 0;", "+\t\t\t\t\tsourceEntryCount++;", "-\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestOutputInOutput\", customOutput.toString(), outputLocations[index].toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\tif (index == 0) {", "+\t\t\t\t\t\t\t\t// custom output is nested in project's output: need to check if all source entries have a custom", "+\t\t\t\t\t\t\t\t// output before complaining", "+\t\t\t\t\t\t\t\tif (potentialNestedOutput == null) potentialNestedOutput = customOutput;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestOutputInOutput\", customOutput.toString(), outputLocations[index].toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t// allow custom output nesting in project's output if all source entries have a custom output", "+\t\tif (potentialNestedOutput != null && sourceEntryCount > outputCount-1) {", "+\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestOutputInOutput\", potentialNestedOutput.toString(), outputLocations[0].toString())); //$NON-NLS-1$", "+\t\t}", "-\t\t\t\tif (!allowNestingInOutputLocations[index]){", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestEntryInOutput\", entryPath.toString(), outputLocations[index].toString())); //$NON-NLS-1$", "+\t\t\t\tif (!allowNestingInOutputLocations[index]) {", "+\t\t\t\t\t// allow nesting in project's output if all source entries have a custom output", "+\t\t\t\t\tif (index != 0 || sourceEntryCount > outputCount - 1) {", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestEntryInOutput\", entryPath.toString(), outputLocations[index].toString())); //$NON-NLS-1$", "+\t\t\t\t\t}"]}], "num": 67481}
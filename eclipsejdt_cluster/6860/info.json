{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75e063863f02ce6c5d66002d436bbd1b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f1766b2c577244b87b1dc537675de15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredType.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public TypeDeclaration updatedTypeDeclaration()", "signatureAfterChange": " public TypeDeclaration updatedTypeDeclaration()", "diff": ["-\t\tMemberTypeDeclaration[] memberTypeDeclarations = new MemberTypeDeclaration[existingCount + memberTypeCount];", "+\t\tTypeDeclaration[] memberTypeDeclarations = new TypeDeclaration[existingCount + memberTypeCount];", "-\t\t\tmemberTypeDeclarations[existingCount + i] = (MemberTypeDeclaration)memberTypes[i].updatedTypeDeclaration();", "+\t\t\tmemberTypeDeclarations[existingCount + i] = memberTypes[i].updatedTypeDeclaration();", "-\t/* might need to cast itself into a MemberTypeDeclaration or a LocalTypeDeclaration */", "-\tTypeDeclaration newTypeDeclaration = null;", "-\t\tnewTypeDeclaration = new MemberTypeDeclaration(typeDeclaration.compilationResult);", "-\t} else {", "-\t\tif (parent instanceof RecoveredMethod){", "-\t\t\tnewTypeDeclaration = new LocalTypeDeclaration(typeDeclaration.compilationResult);", "-\t\t}", "-\t}", "-\t/* copy slots into new type */", "-\tif (newTypeDeclaration != null){", "-\t\tnewTypeDeclaration.modifiers = typeDeclaration.modifiers;", "-\t\tnewTypeDeclaration.modifiersSourceStart = typeDeclaration.modifiersSourceStart;", "-\t\tnewTypeDeclaration.name = typeDeclaration.name;", "-\t\tnewTypeDeclaration.superclass = typeDeclaration.superclass;", "-\t\tnewTypeDeclaration.superInterfaces = typeDeclaration.superInterfaces;", "-\t\tnewTypeDeclaration.fields = typeDeclaration.fields;", "-\t\tnewTypeDeclaration.methods = typeDeclaration.methods;", "-\t\tnewTypeDeclaration.memberTypes = typeDeclaration.memberTypes;", "-\t\tnewTypeDeclaration.ignoreFurtherInvestigation = typeDeclaration.ignoreFurtherInvestigation;", "-\t\tnewTypeDeclaration.maxFieldCount = typeDeclaration.maxFieldCount;", "-\t\tnewTypeDeclaration.declarationSourceStart = typeDeclaration.declarationSourceStart;", "-\t\tnewTypeDeclaration.declarationSourceEnd = typeDeclaration.declarationSourceEnd;", "-\t\tnewTypeDeclaration.bodyEnd = typeDeclaration.bodyEnd;", "-\t\tnewTypeDeclaration.bodyStart = typeDeclaration.bodyStart;", "-\t\ttypeDeclaration = newTypeDeclaration;", "+\t\ttypeDeclaration.bits |= ASTNode.IsMemberTypeMASK;", "+\t} else if (parent instanceof RecoveredMethod){", "+\t\ttypeDeclaration.bits |= ASTNode.IsLocalTypeMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7316cf559c2ca0989607602268dd61d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredType.java", "commitBeforeChange": "3a24c8e93f77a32dae59173b29a4fa366ce01a3a", "commitAfterChange": "5d36ded47d2c78d72658a7417caa4c325d7b6276", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public TypeDeclaration updatedTypeDeclaration()", "signatureAfterChange": " public TypeDeclaration updatedTypeDeclaration(int depth, Set knownTypes)", "diff": ["-public TypeDeclaration updatedTypeDeclaration(){", "+public TypeDeclaration updatedTypeDeclaration(int depth, Set knownTypes){", "+\tif (depth >= MAX_TYPE_DEPTH) return null;", "+", "+\tif(knownTypes.contains(this.typeDeclaration)) return null;", "+\tknownTypes.add(this.typeDeclaration);", "+\t", "+\t\t", "+\t\tint updatedCount = 0;", "-\t\t\tmemberTypeDeclarations[existingCount + i] = this.memberTypes[i].updatedTypeDeclaration();", "+\t\t\tTypeDeclaration updatedTypeDeclaration = this.memberTypes[i].updatedTypeDeclaration(depth + 1, knownTypes);", "+\t\t\tif (updatedTypeDeclaration != null) {", "+\t\t\t\tmemberTypeDeclarations[existingCount + (updatedCount++)] = updatedTypeDeclaration;", "+\t\t\t}", "-\t\tthis.typeDeclaration.memberTypes = memberTypeDeclarations;", "-\t\tif(memberTypeDeclarations[memberTypeDeclarations.length - 1].declarationSourceEnd > lastEnd) {", "-\t\t\tlastEnd = memberTypeDeclarations[memberTypeDeclarations.length - 1].declarationSourceEnd;", "+\t\tif (updatedCount < this.memberTypeCount) {", "+\t\t\tint length = existingCount + updatedCount;", "+\t\t\tSystem.arraycopy(memberTypeDeclarations, 0, memberTypeDeclarations = new TypeDeclaration[length], 0, length);", "+\t\t}", "+\t\t", "+\t\tif (memberTypeDeclarations.length > 0) { ", "+\t\t\tthis.typeDeclaration.memberTypes = memberTypeDeclarations;", "+\t\t\tif(memberTypeDeclarations[memberTypeDeclarations.length - 1].declarationSourceEnd > lastEnd) {", "+\t\t\t\tlastEnd = memberTypeDeclarations[memberTypeDeclarations.length - 1].declarationSourceEnd;", "+\t\t\t}", "-\t\t\tfieldDeclarations[existingCount + i] = this.fields[i].updatedFieldDeclaration();", "+\t\t\tfieldDeclarations[existingCount + i] = this.fields[i].updatedFieldDeclaration(depth, knownTypes);", "-\t\t\tAbstractMethodDeclaration updatedMethod = this.methods[i].updatedMethodDeclaration();", "+\t\t\tAbstractMethodDeclaration updatedMethod = this.methods[i].updatedMethodDeclaration(depth, knownTypes);"]}], "num": 6860}
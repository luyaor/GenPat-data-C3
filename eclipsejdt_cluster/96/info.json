{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22c45b12164d29a40f67349e9297e720", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c605ec62a035282e9648f469b6cf8dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldReferencePattern.java", "commitBeforeChange": "8d3a80d6ae4963f77008a085d8594027df9d6302", "commitAfterChange": "b736ca9b5c529e8455312865c769b9a1151265f5", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r private int matchLevel(FieldBinding binding)", "signatureAfterChange": "\r private int matchLevel(FieldBinding binding)", "diff": ["-\t// field type\r", "-\tint newLevel = this.matchLevelForType(this.typeSimpleName, this.typeQualification, binding.type);\r", "-\tswitch (newLevel) {\r", "-\t\tcase IMPOSSIBLE_MATCH:\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\tcase ACCURATE_MATCH: // keep previous level\r", "-\t\t\tbreak;\r", "-\t\tdefault: // ie. INACCURATE_MATCH\r", "-\t\t\tlevel = newLevel;\r", "-\t\t\tbreak;\r", "+\t// look at field type only if declaring type is not specified\r", "+\tif (this.declaringSimpleName == null) {\r", "+\t\tint newLevel = this.matchLevelForType(this.typeSimpleName, this.typeQualification, binding.type);\r", "+\t\tswitch (newLevel) {\r", "+\t\t\tcase IMPOSSIBLE_MATCH:\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\tcase ACCURATE_MATCH: // keep previous level\r", "+\t\t\t\tbreak;\r", "+\t\t\tdefault: // ie. INACCURATE_MATCH\r", "+\t\t\t\tlevel = newLevel;\r", "+\t\t\t\tbreak;\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6e1652e466c4ea0047b1df6ffd2524d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldDeclarationPattern.java", "commitBeforeChange": "8d3a80d6ae4963f77008a085d8594027df9d6302", "commitAfterChange": "b736ca9b5c529e8455312865c769b9a1151265f5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r public int matchLevel(Binding binding)", "signatureAfterChange": "\r public int matchLevel(Binding binding)", "diff": ["-\t// field type\r", "-\tint newLevel = this.matchLevelForType(this.typeSimpleName, this.typeQualification, field.type);\r", "-\tswitch (newLevel) {\r", "-\t\tcase IMPOSSIBLE_MATCH:\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\tcase ACCURATE_MATCH: // keep previous level\r", "-\t\t\tbreak;\r", "-\t\tdefault: // ie. INACCURATE_MATCH\r", "-\t\t\tlevel = newLevel;\r", "-\t\t\tbreak;\r", "+\t// look at field type only if declaring type is not specified\r", "+\tif (this.declaringSimpleName == null) {\r", "+\t\tint newLevel = this.matchLevelForType(this.typeSimpleName, this.typeQualification, field.type);\r", "+\t\tswitch (newLevel) {\r", "+\t\t\tcase IMPOSSIBLE_MATCH:\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\tcase ACCURATE_MATCH: // keep previous level\r", "+\t\t\t\tbreak;\r", "+\t\t\tdefault: // ie. INACCURATE_MATCH\r", "+\t\t\t\tlevel = newLevel;\r", "+\t\t\t\tbreak;\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cccd91d31109e2ba60343abd2f8ff997", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodDeclarationPattern.java", "commitBeforeChange": "8d3a80d6ae4963f77008a085d8594027df9d6302", "commitAfterChange": "b736ca9b5c529e8455312865c769b9a1151265f5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public boolean matchesBinary(Object binaryInfo, Object enclosingBinaryInfo)", "signatureAfterChange": "\r public boolean matchesBinary(Object binaryInfo, Object enclosingBinaryInfo)", "diff": ["-\t// return type\r", "-\tString returnTypeSignature = Signature.toString(Signature.getReturnType(methodDescriptor));\r", "-\tif (!this.matchesType(this.returnSimpleName, this.returnQualification, returnTypeSignature.toCharArray())) {\r", "-\t\treturn false;\r", "+\r", "+\t// look at return type only if declaring type is not specified\r", "+\tif (this.declaringSimpleName == null) {\r", "+\t\tString returnTypeSignature = Signature.toString(Signature.getReturnType(methodDescriptor));\r", "+\t\tif (!this.matchesType(this.returnSimpleName, this.returnQualification, returnTypeSignature.toCharArray())) {\r", "+\t\t\treturn false;\r", "+\t\t}\r"]}], "num": 96}
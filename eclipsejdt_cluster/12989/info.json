{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5b1e42a916868d9f3c16feff45fc7af", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "093c9d0e706797ec18822653a546b81b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "c9b530e01318c4f59e9e7828de1da4c97f8fe89e", "commitAfterChange": "69656daba7331091b482d7c6b3e675c144730396", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tpublic boolean visit(Assignment node)", "signatureAfterChange": "  \tpublic boolean visit(Assignment node)", "diff": ["-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameEQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\tAssignment.Operator operator = node.getOperator();", "+\t\tif (operator == Assignment.Operator.ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameEQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.MINUS_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameMINUS_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.PLUS_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNamePLUS_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.TIMES_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameMULTIPLY_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.DIVIDE_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDIVIDE_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.REMAINDER_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameREMAINDER_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.LEFT_SHIFT_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLEFT_SHIFT_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.RIGHT_SHIFT_SIGNED_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRIGHT_SHIFT_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.RIGHT_SHIFT_UNSIGNED_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.BIT_AND_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameAND_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.BIT_OR_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameOR_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameXOR_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "199dc9a2ade424ab3eb7d6469282be5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": " \tpublic boolean visit( \t\tTypeDeclaration localTypeDeclaration, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\t\tParameterizedQualifiedTypeReference parameterizedQualifiedTypeReference, \t\t\tClassScope scope)", "diff": ["+\t}", "+\tpublic boolean visit(", "+\t\t\tParameterizedQualifiedTypeReference parameterizedQualifiedTypeReference,", "+\t\t\tClassScope scope) {", "+\t\tfinal int numberOfParens = (parameterizedQualifiedTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageOpeningParenthesizedExpression(parameterizedQualifiedTypeReference, numberOfParens);", "+\t\t}", "+\t\tTypeReference[][] typeArguments = parameterizedQualifiedTypeReference.typeArguments;", "+\t\tint length = typeArguments.length;", "+\t\tfor (int i = 0; i < length - 1; i++) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier);", "+\t\t\tTypeReference[] typeArgument = typeArguments[i];\t\t\t", "+\t\t\tif (typeArgument != null) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_parameterized_type_reference);", "+\t\t\t\tif (this.preferences.insert_space_after_opening_angle_bracket_in_parameterized_type_reference) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t\t\tint typeArgumentLength = typeArgument.length;", "+\t\t\t\tfor (int j = 0; j < typeArgumentLength - 1; j++) {", "+\t\t\t\t\ttypeArgument[j].traverse(this, scope);", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_parameterized_type_reference);", "+\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_parameterized_type_reference) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}\t\t\t", "+\t\t\t\t}", "+\t\t\t\ttypeArgument[typeArgumentLength - 1].traverse(this, scope);", "+\t\t\t\tif (isClosingGenericToken()) {", "+\t\t\t\t\tthis.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_parameterized_type_reference);", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDOT);", "+\t\t}", "+\t\tint dimensions = parameterizedQualifiedTypeReference.dimensions();", "+\t\tif (dimensions != 0) {", "+\t\t\tif (this.preferences.insert_space_before_opening_bracket_in_array_type_reference) {", "+\t\t\t\tthis.scribe.space();", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < dimensions; i++) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "+\t\t\t\tif (this.preferences.insert_space_between_brackets_in_array_type_reference) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "+\t\t\t}", "+\t\t}\t\t", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageClosingParenthesizedExpression(parameterizedQualifiedTypeReference, numberOfParens);", "+\t\t}", "+\t\treturn false;", "+\t}"]}], "num": 12989}
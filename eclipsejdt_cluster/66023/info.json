{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "939641496e7b59403278c5b72c512e3d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02ba648c3485a377cbd0a130c8e257ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6d0a85bdd711755c7e89639293c9b8f71d8baf20", "commitAfterChange": "92ea6ed181998d63f87fdeb63a36bb7f9ee7309e", "methodNumberBeforeChange": 932, "methodNumberAfterChange": 932, "signatureBeforeChange": " public void _test926()", "signatureAfterChange": " public void test926()", "diff": ["-public void _test926() {", "-\tthis.runConformTest(", "+public void test926() {", "+\tthis.runNegativeTest(", "-\t\t\"\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tRESULT = NonTerminalSourcePart.create(Tuple.create(true, t.value().fst()));\\n\" + ", "+\t\t\"\t         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from NonTerminalSourcePart<Tuple<Boolean,capture-of ? extends Term>> to NonTerminalSourcePart<? extends Tuple<Boolean,Term>>\\n\" + ", "+\t\t\"----------\\n\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05400ae98f8d0f1d8a9dcc12361227d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "2eab698c606e3b17217602bbc99837242c743a5a", "commitAfterChange": "6d141275326cf4caf65ec5dca68b565e2e9b1360", "methodNumberBeforeChange": 385, "methodNumberAfterChange": 385, "signatureBeforeChange": "  public void test1027()", "signatureAfterChange": "  public void test1027()", "diff": ["-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\"\");", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 9)\\n\" +", "+\t\t\t\"\tif (o == null) \\n\" +", "+\t\t\t\"\t    ^\\n\" +", "+\t\t\t\"Redundant null check: The variable o can only be null at this location\\n\" +", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "134de87ec2cc78b42ee7a71b4580d81c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java", "commitBeforeChange": "68f185fc63132d7b106a1c7ca52ed6d004b96329", "commitAfterChange": "4a85a8ee613913420acf3dde5af380e91d3bad2c", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " public void test425512() throws Exception", "signatureAfterChange": " public void test425512() throws Exception", "diff": ["-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\"5\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tint [] a = (int [] & Cloneable & Serializable) new int[5];\\n\" + ", "+\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Arrays are not allowed in intersection cast operator\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "195c70ad54796cf0c5f263bce52e57d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9144806e49f76b29608474c4bebb2700b5c20faa", "commitAfterChange": "142c1803cd69a49b32423044506cd57c4ca51a87", "methodNumberBeforeChange": 753, "methodNumberAfterChange": 753, "signatureBeforeChange": " public void test747()", "signatureAfterChange": " public void test747()", "diff": ["-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\"\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "+\t\t\"\tclass Y<U extends T & I> {\\r\\n\" + ", "+\t\t\"\t                      ^\\n\" + ", "+\t\t\"Cannot specify any additional bound X.I when first bound is a type parameter\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2120e2bb7b4858fa0396f3689b117df2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java", "commitBeforeChange": "d7bf97b0906e6821b36f900e536d18f1ccdddff2", "commitAfterChange": "dd10489904dda11a1b9c522a71a4705b9646605e", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": " public void _test428352()", "signatureAfterChange": " public void test428352()", "diff": ["-public void _test428352() {", "-\trunConformTest(", "+public void test428352() {", "+\trunNegativeTest(", "-\t\t\t\"X.java\",", "+\t\t\t\"OperationsPile.java\",", "-\t\t\"\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in OperationsPile.java (at line 13)\\n\" + ", "+\t\t\"\taddAll3(combined, new OperationsPile<>(handler));\\n\" + ", "+\t\t\"\t                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Cannot infer type arguments for OperationsPile<>\\n\" + ", "+\t\t\"----------\\n\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d3cc48dcb2a9c79b1baac8906c6434b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "8c030d505f30b0cafedd9f4204a10256b97739b1", "commitAfterChange": "7ad108ea3de2b7d68d2737f4428379110b97b811", "methodNumberBeforeChange": 392, "methodNumberAfterChange": 392, "signatureBeforeChange": " public void test1034()", "signatureAfterChange": " public void test1034()", "diff": ["-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\"\");", "+\t\t\"----------\\n\" +", "+\t\t\"1. ERROR in X.java (at line 16)\\n\" +", "+\t\t\"\tif (rs != null)\\n\" +", "+\t\t\"\t    ^^\\n\" +", "+\t\t\"Redundant null check: The variable rs cannot be null at this location\\n\" +", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fe9a4b786ee1db059512e8d9d792b82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "0edd2a8da94febc0bef7418a02cfac9f1a30d36a", "commitAfterChange": "85f48e0f08275e1f81e9995073d5c4f69bfd0707", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic void test015()", "signatureAfterChange": "  \tpublic void test015()", "diff": ["-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"1\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tY.count(new int[0]);\\n\" + ", "+\t\t\t\"\t  ^^^^^\\n\" + ", "+\t\t\t\"The method count(int[], int[]) is ambiguous for the type Y\\n\" + ", "+\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "342728266be21e84061a97b5411787af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "bac0771911f11962784cf0ef9252c1e7875dc1e4", "commitAfterChange": "277b33164a7aa6b44e8af80cbf75c89be37ef9e5", "methodNumberBeforeChange": 178, "methodNumberAfterChange": 178, "signatureBeforeChange": " public void test172()", "signatureAfterChange": " public void test172()", "diff": ["-\tcustomOptions.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.WARNING);", "+\tcustomOptions.put(CompilerOptions.OPTION_ReportUnusedPrivateMember, CompilerOptions.WARNING);", "-\t\t\"\",", "+\t\t\"----------\\n\" +", "+\t\t\"1. WARNING in X.java (at line 8)\\n\" +", "+\t\t\"\tprivate enum Complaint {       WARNING, ERROR, FATAL_ERROR, PANIC;\\n\" +", "+\t\t\"\t             ^^^^^^^^^\\n\" +", "+\t\t\"The type X.Complaint is never used locally\\n\" +", "+\t\t\"----------\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3645ddb8d97ca0308c45edabeb3d3466", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "66655f5e1f98e14cb994324b511a6633d4950147", "commitAfterChange": "05ac7a532e5c7862447e6e0fc351f30875c4dd96", "methodNumberBeforeChange": 233, "methodNumberAfterChange": 233, "signatureBeforeChange": " \tpublic void test0229()", "signatureAfterChange": " \tpublic void test0229()", "diff": ["-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"SUCCESS\");", "-\t}\t\t\t", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "+\t\t\t\"\tT.MXC f;\\r\\n\" + ", "+\t\t\t\"\t^^^^^\\n\" + ", "+\t\t\t\"Illegal qualified access from the type parameter T\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t // cannot select from a type variable", "+\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ba0072c384d438874b18e789c403e6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "44b2c87051c4d9bbf37b4cf649be500c54102bf7", "commitAfterChange": "9abfcc7867d970a4b8915c842032bf1660c0523c", "methodNumberBeforeChange": 762, "methodNumberAfterChange": 762, "signatureBeforeChange": " public void test756()", "signatureAfterChange": " public void test756()", "diff": ["-//https://bugs.eclipse.org/bugs/show_bug.cgi?id=99999", "+//https://bugs.eclipse.org/bugs/show_bug.cgi?id=99999 - variation", "-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\"\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" + ", "+\t\t\"\tX<?>.B[] b = new X<?>.B[1];\\r\\n\" + ", "+\t\t\"\t             ^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Cannot create a generic array of X<?>.B\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43f7adb64452b3ace89829fff946fd06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "26c2e79f3bf65d02ca24e9f456c481b11db84310", "commitAfterChange": "1542690d818b56ca31610b1599cca37ada2a98ce", "methodNumberBeforeChange": 431, "methodNumberAfterChange": 431, "signatureBeforeChange": " \tpublic void test429()", "signatureAfterChange": " \tpublic void test429()", "diff": ["-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\" // no complaints about duplicates", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X4.java (at line 1)\\r\\n\" + ", "+\t\t\t\"\tclass X4 <T extends Comparable<Z> & Comparable<Z>> {}\\r\\n\" + ", "+\t\t\t\"\t                                    ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate bound Comparable<Z>\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// no complaints about duplicates if they are both parameterized with same args", "+\t\t\t// but you cannot extend Comparable & Comparable so we'll report an error"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44f80e2c07c7b937871d61a68d5cd620", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "86653d5c035aa51cca2173bb8c909d061953e701", "commitAfterChange": "e556f9da5ae6c442ae4aa18b3f85e0ca7f743a2a", "methodNumberBeforeChange": 193, "methodNumberAfterChange": 193, "signatureBeforeChange": " public void _test0470_while()", "signatureAfterChange": " public void test0470_while()", "diff": ["-public void _test0470_while() {", "-\tthis.runConformTest(", "+public void test0470_while() {", "+\tthis.runNegativeTest(", "-\t\t\"ERROR: o cannot be null on first if\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tif (o != null && o.toString().equals(\\\"o\\\")) {\\n\" + ", "+\t\t\"\t    ^\\n\" + ", "+\t\t\"Redundant null check: The variable o cannot be null at this location\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "588de5b33b80de459da578db0b9a2b98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "99e06cdf0656ed0f6c3eb604300a8baae7ee3beb", "commitAfterChange": "d6c2a90130be430285c5f6a000090d250c310afd", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": " public void test0413_while_unknown_field()", "signatureAfterChange": " public void test0413_while_unknown_field()", "diff": ["-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\"\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\to.toString();\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"Potential null pointer access: The field o may be null at this location\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62268c309ce60a8065db2db55bb6c02f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9144806e49f76b29608474c4bebb2700b5c20faa", "commitAfterChange": "142c1803cd69a49b32423044506cd57c4ca51a87", "methodNumberBeforeChange": 858, "methodNumberAfterChange": 858, "signatureBeforeChange": " public void test852()", "signatureAfterChange": " public void test852()", "diff": ["-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\"\");\t", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "+\t\t\"\t<T extends Runnable, U extends T & Runnable>  T foo() { return null; }\\r\\n\" + ", "+\t\t\"\t                                   ^^^^^^^^\\n\" + ", "+\t\t\"Cannot specify any additional bound Runnable when first bound is a type parameter\\n\" + ", "+\t\t\"----------\\n\");\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "639359bfe093ed9c40984c6d3b96cfc2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "2eab698c606e3b17217602bbc99837242c743a5a", "commitAfterChange": "6d141275326cf4caf65ec5dca68b565e2e9b1360", "methodNumberBeforeChange": 203, "methodNumberAfterChange": 203, "signatureBeforeChange": " public void test0505_try_finally()", "signatureAfterChange": " public void test0505_try_finally()", "diff": ["-//       initialized (for sure) on line 2.", "+// As of Bug 345305 this has been changed to a more accurate analysis.", "-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\"\");", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 7)\\n\" +", "+\t\t\t\"\tif (x == null) {/* */}\\n\" +", "+\t\t\t\"\t    ^\\n\" +", "+\t\t\t\"Redundant null check: The variable x can only be null at this location\\n\" +", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6984927274293e6cad4a9315be8e1d73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "27981506f2756dff04c50e8b59d9c147159c1382", "commitAfterChange": "3a03108b43e5ef2ebe5aa948629c8324c4c57d2e", "methodNumberBeforeChange": 365, "methodNumberAfterChange": 365, "signatureBeforeChange": " \tpublic void test363()", "signatureAfterChange": " \tpublic void test363()", "diff": ["-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 6)\\r\\n\" + ", "+\t\t\"\tm_values = values.entrySet();\\r\\n\" + ", "+\t\t\"\t           ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Set<Map.Entry<Integer,?>> to Set<Map.Entry<Integer,?>>\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81ddc756900027d834ac08e1f46bb92c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c86c38d672e49d50e598810327b66493258e94dd", "commitAfterChange": "060261358ee4101b16c7399fe1e71ff5bc4ac40a", "methodNumberBeforeChange": 1047, "methodNumberAfterChange": 1047, "signatureBeforeChange": " public void test1021b()", "signatureAfterChange": " public void test1021b()", "diff": ["-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\"\"", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in p\\\\SomeClass2.java (at line 3)\\n\" + ", "+\t\t\"\tpublic abstract class SomeClass2<T> extends M {\\n\" + ", "+\t\t\"\t                                            ^\\n\" + ", "+\t\t\"Cycle detected: the type SomeClass2<T> cannot extend/implement itself or one of its own member types\\n\" + ", "+\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9418f02e1fe7017e8320741ffc0bdcb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ResourceLeakTests.java", "commitBeforeChange": "8d45cb26fc5ad244f93e8632d761d46ad4a120cf", "commitAfterChange": "e113fe138f1e4be2f22f54aa73cae2174e2d64a6", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " public void test062c() throws IOException", "signatureAfterChange": " public void test062c() throws IOException", "diff": ["-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\"\",", "+\t\t\"----------\\n\" +", "+\t\t\"1. ERROR in X.java (at line 6)\\n\" +", "+\t\t\"\twriteIt(new FileOutputStream(new File(\\\"C:\\\\temp\\\\foo.txt\\\")));\\n\" +", "+\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\"Potential resource leak: \\'<unassigned Closeable value>\\' may not be closed\\n\" +", "+\t\t\"----------\\n\",", "-\t\tnull,", "-\t\toptions,", "-\t\tnull);", "+\t\toptions);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d8cca571d12e77448debf71e51d01d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "252534b1e3dad1831e3abff323be8258609f736d", "commitAfterChange": "e2f59df4da4b0717730e8b0f95dd08cfbb696924", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " \tpublic void _test421922()", "signatureAfterChange": " \tpublic void test426678()", "diff": ["-\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=421922,  [1.8][compiler] Varargs & Overload - Align to JLS8", "-\tpublic void _test421922() {", "-\t\trunConformTest(", "+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=426678, [1.8][compiler] Another issue with vararg type element accessibility", "+\tpublic void test426678() {", "+\t\trunNegativeTest(", "-\t\t\t\"MB\"); // check and adjust,", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tnew B().foo(null, null);\\n\" + ", "+\t\t\t\"\t        ^^^\\n\" + ", "+\t\t\t\"The method foo(A...) of type B is not applicable as the formal varargs element type A is not accessible here\\n\" + ", "+\t\t\t\"----------\\n\"); // check and adjust,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4c22f1213dd358b3763ec27503ff0b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "8c030d505f30b0cafedd9f4204a10256b97739b1", "commitAfterChange": "7ad108ea3de2b7d68d2737f4428379110b97b811", "methodNumberBeforeChange": 385, "methodNumberAfterChange": 385, "signatureBeforeChange": "  public void test1027()", "signatureAfterChange": "  public void test1027()", "diff": ["-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\"\");", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 9)\\n\" +", "+\t\t\t\"\tif (o == null) \\n\" +", "+\t\t\t\"\t    ^\\n\" +", "+\t\t\t\"Redundant null check: The variable o can only be null at this location\\n\" +", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a51b734174e4ffc737af4b13f1711a47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "af330be1052a8d3b1a31b10596d367fb42f89f79", "commitAfterChange": "b3a6b4ddf9d5bd5365b7e897739a001bb2ff860b", "methodNumberBeforeChange": 768, "methodNumberAfterChange": 768, "signatureBeforeChange": " public void test0748()", "signatureAfterChange": " public void test0748()", "diff": ["-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\"\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 6)\\r\\n\" + ", "+\t\t\"\tstatic class BytesFactory implements Factory<byte[]> {\\r\\n\" + ", "+\t\t\"\t             ^^^^^^^^^^^^\\n\" + ", "+\t\t\"The type X.BytesFactory must implement the inherited abstract method X.Factory<byte[]>.create(Class<U>)\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afac6451b503aac0ec2bd8aa610a75e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "8c030d505f30b0cafedd9f4204a10256b97739b1", "commitAfterChange": "7ad108ea3de2b7d68d2737f4428379110b97b811", "methodNumberBeforeChange": 203, "methodNumberAfterChange": 203, "signatureBeforeChange": " public void test0505_try_finally()", "signatureAfterChange": " public void test0505_try_finally()", "diff": ["-//       initialized (for sure) on line 2.", "+// As of Bug 345305 this has been changed to a more accurate analysis.", "-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\"\");", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 7)\\n\" +", "+\t\t\t\"\tif (x == null) {/* */}\\n\" +", "+\t\t\t\"\t    ^\\n\" +", "+\t\t\t\"Redundant null check: The variable x can only be null at this location\\n\" +", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbfcae68f8120373a33b67e174fbc569", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "4e1c84d7f1b5cbfdb04337ad1ef6661973bb5b54", "commitAfterChange": "d1fadbf3a3cc65cdec59a81bd717eea0685adc65", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 127, "signatureBeforeChange": " \tpublic void test122()", "signatureAfterChange": " \tpublic void test122()", "diff": ["-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tcase (NORMAL) :\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^\\n\" + ", "+\t\t\t\"Enum contants cannot be surrounded by parenthesis\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf0a3857459206568e4979cc1387850b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9144806e49f76b29608474c4bebb2700b5c20faa", "commitAfterChange": "142c1803cd69a49b32423044506cd57c4ca51a87", "methodNumberBeforeChange": 787, "methodNumberAfterChange": 787, "signatureBeforeChange": " public void test781()", "signatureAfterChange": " public void test781()", "diff": ["-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\"\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "+\t\t\"\tpublic static <E, T extends E & Comparable<? super T>> Foo<E> doIt(T t) {\\r\\n\" + ", "+\t\t\"\t                                ^^^^^^^^^^\\n\" + ", "+\t\t\"Cannot specify any additional bound Comparable<? super T> when first bound is a type parameter\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1a224b2bf5db73bced75b7f6536def0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c86c38d672e49d50e598810327b66493258e94dd", "commitAfterChange": "060261358ee4101b16c7399fe1e71ff5bc4ac40a", "methodNumberBeforeChange": 1167, "methodNumberAfterChange": 1167, "signatureBeforeChange": " public void test1139()", "signatureAfterChange": " public void test1139()", "diff": ["-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\"\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in p\\\\X.java (at line 9)\\r\\n\" + ", "+\t\t\"\tpublic class X extends Super<A<X>> {\\r\\n\" + ", "+\t\t\"\t                       ^^^^^\\n\" + ", "+\t\t\"Cycle detected: the type X cannot extend/implement itself or one of its own member types\\n\" + ", "+\t\t\"----------\\n\"", "+\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5b217a92af615928bb5868976efbada", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "2eab698c606e3b17217602bbc99837242c743a5a", "commitAfterChange": "6d141275326cf4caf65ec5dca68b565e2e9b1360", "methodNumberBeforeChange": 392, "methodNumberAfterChange": 392, "signatureBeforeChange": " public void test1034()", "signatureAfterChange": " public void test1034()", "diff": ["-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\"\");", "+\t\t\"----------\\n\" +", "+\t\t\"1. ERROR in X.java (at line 16)\\n\" +", "+\t\t\"\tif (rs != null)\\n\" +", "+\t\t\"\t    ^^\\n\" +", "+\t\t\"Redundant null check: The variable rs cannot be null at this location\\n\" +", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecbf6fded58236476f971eae9ffa99da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "f0430317923561aaf4c1a789df7c09fbc01d5f33", "commitAfterChange": "dfb3637702f1e682e6ee6d2d1c5b6ed54a2efc28", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " \tpublic void test073()", "signatureAfterChange": " \tpublic void test073()", "diff": ["-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"SUCCESS\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "+\t\t\t\"\ta(new Integer(1), 2);\\r\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"The method a(int, int) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// a is ambiguous, both method a(int,int) in X and method a(java.lang.Object,java.lang.Object) in X match", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f073430c4a2d0ed4a3b6dddb7c6a275c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "aeb25ab0fdeaedfd0f4ac9a6012d2a11af4c869a", "commitAfterChange": "a2e52170d07ac53b0646161c65180b5691c41bb6", "methodNumberBeforeChange": 144, "methodNumberAfterChange": 144, "signatureBeforeChange": "     public void test140()", "signatureAfterChange": "     public void test140()", "diff": ["-        this.runConformTest(", "+        this.runNegativeTest(", "-\t\t\t\"\");", "+    \t\t\"----------\\n\" + ", "+    \t\t\"1. ERROR in X.java (at line 6)\\r\\n\" + ", "+    \t\t\"\tstatic void foo(){}\t\\r\\n\" + ", "+    \t\t\"\t            ^^^^^\\n\" + ", "+    \t\t\"The method foo() of type Bar must override a superclass method\\n\" + ", "+    \t\t\"----------\\n\");"]}], "num": 66023}
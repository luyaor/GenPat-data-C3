{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b93aa3cade858b5bfeb4d19ac78655b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e9321ab803bae23015ee55981b4d70b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "4d4c077960caad3dac6f1440a1eec3349b581bc3", "commitAfterChange": "84e94fe061dc975da80dda85572c99f5b95d09f2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public IIndex[] getIndexes()", "signatureAfterChange": " public IIndex[] getIndexes()", "diff": ["-\tif (this.indexes == null) {", "-\t\treturn this.computeIndexes(); // if some indexes aren't ready, the index list won't be cached into 'indexes' slot", "+\tif (this.indexKeys == null) {", "+\t\tthis.initializeIndexKeys(); ", "-\treturn this.indexes;", "+\t// acquire the in-memory indexes on the fly", "+\tint length = this.indexKeys.length;", "+\tIIndex[] indexes = new IIndex[length];", "+\tfor (int i = 0; i < length; i++){", "+\t\t// may trigger some index recreation work", "+\t\tindexes[i] = indexManager.getIndex(indexKeys[i], true /*reuse index file*/, false /*do not create if none*/);", "+\t}", "+\treturn indexes;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "673bbb80da03f126066658742ed575ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "c4112ab397da10b85cbb2a3f081c4c91ed7c7975", "commitAfterChange": "2077df1da6fa132fd5beb7d042b102e760cf8cbf", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void storeDependencyInfo()", "signatureAfterChange": " public void storeDependencyInfo()", "diff": ["+", "+\tsize = this.rootReferences.size;", "+\tchar[][] rootRefs = new char[size][];", "+\tfor (int i = 0; i < size; i++)", "+\t\trootRefs[i] = this.rootReferences.elementAt(i);", "+\tthis.referenceContext.compilationResult.rootReferences = rootRefs;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fddecff98fbfacb30c9546a753fe3cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SearchParticipantTests.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t\tpublic void locateMatches(SearchDocument[] documents, SearchPattern pattern, IJavaSearchScope scope, SearchRequestor requestor, IProgressMonitor monitor) throws CoreException", "signatureAfterChange": "  \t\tpublic void locateMatches(SearchDocument[] documents, SearchPattern pattern, IJavaSearchScope scope, SearchRequestor requestor, IProgressMonitor monitor) throws CoreException", "diff": ["+\t\t\tint length = documents.length;", "+\t\t\tSearchDocument[] wrapperDocuments = new SearchDocument[length];", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\twrapperDocuments[i] = new WrapperDocument(documents[i], this);", "+\t\t\t}", "+\t\t\tthis.defaultSearchParticipant.locateMatches(wrapperDocuments, pattern, scope, requestor, monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aca1314191aa77e16d40702dceb28d6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/State.java", "commitBeforeChange": "c9d8f7d33a12a3fca98b81131e389ee514f5477e", "commitAfterChange": "f2df113c95a9e172c6339459cdc3cce6bb01fe4b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \r static State read(DataInputStream in) throws IOException", "signatureAfterChange": "\r \r static State read(DataInputStream in) throws IOException", "diff": ["+\tchar[][] internedSimpleNames = ReferenceCollection.internSimpleNames(readNames(in), false);\r", "-\tfor (int i = 0; i < length; i++)\r", "-\t\tinternedQualifiedNames[i] = readNames(in);\r", "+\tfor (int i = 0; i < length; i++) {\r", "+\t\tint qLength = in.readInt();\r", "+\t\tchar[][] qName = new char[qLength][];\r", "+\t\tfor (int j = 0; j < qLength; j++)\r", "+\t\t\tqName[j] = internedSimpleNames[in.readInt()];\r", "+\t\tinternedQualifiedNames[i] = qName;\r", "+\t}\r", "-\tchar[][] internedSimpleNames = ReferenceCollection.internSimpleNames(readNames(in), false);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1b15df7d946e112f160aba789f358f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTRequestor.java", "commitBeforeChange": "729d195ede25ca6ee5a445494cda26bf5f4b94a7", "commitAfterChange": "9e025388268143d227b16d19d468b4e4bff0d580", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic IBinding[] createBindings(String[] bindingKeys)", "signatureAfterChange": " \tpublic IBinding[] createBindings(String[] bindingKeys)", "diff": ["-\t\treturn this.compilationUnitResolver.createBindings(bindingKeys);", "+\t\tint length = bindingKeys.length;", "+\t\tIBinding[] result = new IBinding[length];", "+\t\tfor (int i = 0; i < length; i++)", "+\t\t\tresult[i] = this.compilationUnitResolver.createBinding(bindingKeys[i]);", "+\t\treturn result;"]}], "num": 63831}
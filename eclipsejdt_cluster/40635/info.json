{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b66161ccc4b246919d21ac695fb41532", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4393c973b7d675291400316626aa47f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BodyDeclaration.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic int getModifiers()", "signatureAfterChange": "  \tpublic int getModifiers()", "diff": ["-\t\treturn modifiers;", "+\t\t// more efficient than checking getAST().API_LEVEL", "+\t\tif (this.modifiers == null) {", "+\t\t\t// 2.0 behavior - bona fide property", "+\t\t\treturn this.modifierFlags;", "+\t\t} else {", "+\t\t\t// 3.0 behavior - convenient method", "+\t\t\t// performance could be improved by caching computed flags", "+\t\t\t// but this would require tracking changes to this.modifiers", "+\t\t\tint flags = Modifier.NONE;", "+\t\t\tfor (Iterator it = modifiers().iterator(); it.hasNext(); ) {", "+\t\t\t\tObject x = it.next();", "+\t\t\t\tif (x instanceof Modifier) {", "+\t\t\t\t\tflags |= ((Modifier) x).getKeyword().toFlagValue();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn flags;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81418d1a88567b01bdbe00d9a9de6f76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic int getModifiers()", "signatureAfterChange": "  \tpublic int getModifiers()", "diff": ["-\t\treturn modifiers;", "+\t\t// more efficient than checking getAST().API_LEVEL", "+\t\tif (this.modifiers == null) {", "+\t\t\t// 2.0 behavior - bona fide property", "+\t\t\treturn this.modifierFlags;", "+\t\t} else {", "+\t\t\t// 3.0 behavior - convenient method", "+\t\t\t// performance could be improved by caching computed flags", "+\t\t\t// but this would require tracking changes to this.modifiers", "+\t\t\tint flags = Modifier.NONE;", "+\t\t\tfor (Iterator it = modifiers().iterator(); it.hasNext(); ) {", "+\t\t\t\tObject x = it.next();", "+\t\t\t\tif (x instanceof Modifier) {", "+\t\t\t\t\tflags |= ((Modifier) x).getKeyword().toFlagValue();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn flags;", "+\t\t}"]}], "num": 40635}
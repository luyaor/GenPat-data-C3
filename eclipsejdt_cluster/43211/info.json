{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca58cc558eeb6f2fa5517c37d846ff84", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4246f8c6fcacc722efb22ed14b10286f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "90f07ffa24358809e90a41caf7e256409b417f57", "commitAfterChange": "5b1c31ccfae0bfdb40434d9a104ce9cdaaaeb619", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] otherInheritedMethods)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] otherInheritedMethods)", "diff": ["-\t\tTypeBinding originalReturnType = originalInherited.returnType.leafComponentType();", "-\t\tswitch (originalReturnType.kind()) {", "-\t\t\tcase Binding.GENERIC_TYPE :", "-\t\t\t\t// TODO (philippe) - we need this hack until SourceTypeBindings stop acting as ParameterizedTypes", "-\t\t\t\tif (originalReturnType != originalInherited.declaringClass || !inheritedMethod.returnType.leafComponentType().isParameterizedType())", "-\t\t\t\t\tbreak;", "-\t\t\tcase Binding.PARAMETERIZED_TYPE :", "-\t\t\t\tif (!currentMethod.returnType.leafComponentType().isParameterizedType()) {", "-\t\t\t\t\tif (currentMethod.returnType.leafComponentType().isRawType() && inheritedMethod.returnType.leafComponentType().isRawType())", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, ((MethodDeclaration) currentMethod.sourceMethod()).returnType);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.TYPE_PARAMETER : // see 81618", "-\t\t\t\tif (((TypeVariableBinding) originalReturnType).declaringElement == originalInherited) {", "-\t\t\t\t\tTypeBinding returnType = currentMethod.returnType.leafComponentType();", "-\t\t\t\t\tif (!returnType.isTypeVariable() || ((TypeVariableBinding) returnType).declaringElement != currentMethod)", "+\t\tif (inheritedMethod.returnType.leafComponentType().isParameterizedType()) {", "+\t\t\tif (currentMethod.returnType.leafComponentType().isRawType())", "+\t\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, ((MethodDeclaration) currentMethod.sourceMethod()).returnType);", "+//\t\t} else if (inheritedMethod.hasSubstitutedReturnType() && originalInherited.returnType.leafComponentType().isTypeVariable()) {", "+\t\t} else if (originalInherited.returnType.leafComponentType().isTypeVariable()) { // ", "+\t\t\t\tif (((TypeVariableBinding) originalInherited.returnType.leafComponentType()).declaringElement == originalInherited) { // see 81618 - type variable from inherited method", "+\t\t\t\t\tTypeBinding currentReturnType = currentMethod.returnType.leafComponentType();", "+\t\t\t\t\tif (!currentReturnType.isTypeVariable() || ((TypeVariableBinding) currentReturnType).declaringElement != currentMethod)", "-\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baacb2fecb2461f3450ab2066222fdcd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "519f65f0f5344992cd2a44d698edb1295f3c3a67", "commitAfterChange": "1b7858c417f0a2eea0d6f609fa41df3128fd97dd", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] otherInheritedMethods)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] otherInheritedMethods)", "diff": ["+}", "-\t\tproblemReporter(currentMethod).varargsConflict(currentMethod, inheritedMethod);", "-", "-\tMethodBinding originalInherited = inheritedMethod.original();", "+\t\tproblemReporter(currentMethod).varargsConflict(currentMethod, inheritedMethod, this.type);", "+\tMethodBinding originalInherited = inheritedMethod.original();", "-\t\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, ((MethodDeclaration) currentMethod.sourceMethod()).returnType);", "-//\t\t} else if (inheritedMethod.hasSubstitutedReturnType() && originalInherited.returnType.leafComponentType().isTypeVariable()) {", "-\t\t} else if (originalInherited.returnType.leafComponentType().isTypeVariable()) { // ", "-\t\t\t\tif (((TypeVariableBinding) originalInherited.returnType.leafComponentType()).declaringElement == originalInherited) { // see 81618 - type variable from inherited method", "-\t\t\t\t\tTypeBinding currentReturnType = currentMethod.returnType.leafComponentType();", "-\t\t\t\t\tif (!currentReturnType.isTypeVariable() || ((TypeVariableBinding) currentReturnType).declaringElement != currentMethod)", "-\t\t\t\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, ((MethodDeclaration) currentMethod.sourceMethod()).returnType);", "-\t\t\t\t}", "+\t\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, this.type);", "+\t\t} else if (inheritedMethod.hasSubstitutedReturnType() && originalInherited.returnType.leafComponentType().isTypeVariable()) {", "+\t\t\tif (((TypeVariableBinding) originalInherited.returnType.leafComponentType()).declaringElement == originalInherited) { // see 81618 - type variable from inherited method", "+\t\t\t\tTypeBinding currentReturnType = currentMethod.returnType.leafComponentType();", "+\t\t\t\tif (!currentReturnType.isTypeVariable() || ((TypeVariableBinding) currentReturnType).declaringElement != currentMethod)", "+\t\t\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, this.type);", "+\t\t\t}"]}], "num": 43211}
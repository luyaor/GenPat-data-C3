{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "991bf41c331a1e590988c1fb88ce8bf3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09fa057144bfebb413344cdf978a39c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "e168a89894f4c34ad40563ef07ce8bbd8e8c6783", "commitAfterChange": "1bbbf8a961dd066b4ec5087feb85c45913c76707", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tProcessorEnvImpl env, \t\t\tIProgressMonitor progressMonitor) \tthrows CoreException", "signatureAfterChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tProcessorEnvImpl env, \t\t\tIProgressMonitor progressMonitor) \tthrows CoreException", "diff": ["+\t\t\tIFile file = (IFile)unit.getResource();", "-\t\t\t", "-\t\t\tif( unit.exists() ){", "+", "+\t\t\tif (unit.exists()) {", "-\t\t\t\t\toldData = new BufferedInputStream( ((IFile)unit.getResource() ).getContents());", "+\t\t\t\t\toldData = new BufferedInputStream( ((IFile)unit.getResource()).getContents());", "-\t\t\t}", "+\t\t\t}\t", "-\t\t\tif( contentsDiffer ){", "-\t\t\t\tunit = pkgFrag.createCompilationUnit(cuName, contents, true, progressMonitor);", "-\t\t\t}", "-\t\t\t", "-\t\t\tif( unit == null ) {\t\t\t\t", "-\t\t\t\tIStatus status = AptPlugin.createStatus(new IllegalStateException(\"Unable to create unit for \" + cuName), \"Failure generating file\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tthrow new CoreException(status);", "-\t\t\t}", "-\t\t\telse{", "-\t\t\t\tif( contentsDiffer ){\t\t", "-\t\t\t\t\t// make sure the change is commited to disk. ", "-\t\t\t\t\tif( unit.isWorkingCopy() )\t\t\t", "-\t\t\t\t\t\tunit.commitWorkingCopy(true, progressMonitor);\t\t\t", "-\t\t\t\t\telse\t\t\t", "-\t\t\t\t\t\tunit.save(progressMonitor, true);", "-\t\t\t\t}", "-\t\t\t\tfinal IFile file = (IFile)unit.getResource();", "-\t\t\t\tfile.setDerived( true );", "-\t\t\t\t// We used to also make the file read-only. This is a bad idea,", "-\t\t\t\t// as refactorings then fail in the future, which is worse", "-\t\t\t\t// than allowing a user to modify a generated file.", "+\t\t\tif( contentsDiffer ){\t", "-\t\t\t\t// during a batch build", "-\t\t\t\tif( parentFile != null ){", "-\t\t\t\t\taddEntryToFileMaps( parentFile, file );", "+\t\t\t\tif( unit.exists() && unit.isOpen() ){", "+\t\t\t\t\tIBuffer buffer = unit.getBuffer();", "+\t\t\t\t\tif (buffer == null){", "+\t\t\t\t\t\tIStatus status = AptPlugin.createStatus(new IllegalStateException(\"Unable to update unit for \" + cuName), \"Failure generating file\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\tthrow new CoreException(status);", "+\t\t\t\t\t}", "+\t\t\t\t\tbuffer.setContents(contents.toCharArray());", "+\t\t\t\t\tbuffer.save(progressMonitor, true);", "-\t\t\t\treturn new FileGenerationResult(file, contentsDiffer, updatededSourcePath);", "-\t\t\t}", "+\t\t\t\telse{", "+\t\t\t\t\tICompilationUnit newUnit = null;", "+\t\t\t\t\tnewUnit = pkgFrag.createCompilationUnit(cuName, contents, true,", "+\t\t\t\t\t\t\tprogressMonitor);", "+\t\t\t\t\tif( newUnit == null ) {\t\t\t\t", "+\t\t\t\t\t\tIStatus status = AptPlugin.createStatus(new IllegalStateException(\"Unable to create unit for \" + cuName), \"Failure generating file\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\tthrow new CoreException(status);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "+\t\t\tfile.setDerived(true);", "+\t\t\t// We used to also make the file read-only. This is a bad idea,", "+\t\t\t// as refactorings then fail in the future, which is worse", "+\t\t\t// than allowing a user to modify a generated file.", "+\t\t\t// during a batch build", "+\t\t\tif( parentFile != null ){", "+\t\t\t\taddEntryToFileMaps( parentFile, file );", "+\t\t\t}", "+\t\t\treturn new FileGenerationResult(file, contentsDiffer, updatededSourcePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65e588ddb799ee087ae2a1f2e54a7b7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "309be04a155363e9f398875d6734d13ff5334b6c", "commitAfterChange": "6b58c2063066f4462a27490669b336c2263fae86", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 17, "signatureBeforeChange": " protected IType createTypeHandle(char[] simpleTypeName)", "signatureAfterChange": " protected IType createTypeHandle(String simpleTypeName)", "diff": ["-protected IType createTypeHandle(char[] simpleTypeName) {", "-\tOpenable currentOpenable = this.currentPossibleMatch.openable;", "-\tif (currentOpenable instanceof CompilationUnit)", "-\t\treturn ((CompilationUnit) currentOpenable).getType(new String(simpleTypeName));", "+protected IType createTypeHandle(String simpleTypeName) {", "+\tOpenable openable = this.currentPossibleMatch.openable;", "+\tif (openable instanceof CompilationUnit)", "+\t\treturn ((CompilationUnit) openable).getType(simpleTypeName);", "-\t// ensure this is a top level type (see bug 20011  Searching for Inner Classes gives bad search results)", "-\treturn getTopLevelType(((ClassFile) currentOpenable).getType());", "+\tIType binaryType = ((ClassFile) openable).getType();", "+\tif (simpleTypeName.equals(binaryType.getTypeQualifiedName()))", "+\t\treturn binaryType; // answer only top-level types, sometimes the classFile is for a member/local type", "+", "+\ttry {", "+\t\tIClassFile classFile = binaryType.getPackageFragment().getClassFile(simpleTypeName + SuffixConstants.SUFFIX_STRING_class);", "+\t\treturn classFile.getType();", "+\t} catch (JavaModelException e) {", "+\t\t// ignore as implementation of getType() cannot throw this exception", "+\t}", "+\treturn null;"]}], "num": 37891}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f426873e6a72561fe5992a4cb8008e6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96a53e0a0338e31e21af48929682cfe4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/messager/MessagerProc.java", "commitBeforeChange": "c658da8ee403c4a9726e31e0b3916361b6795525", "commitAfterChange": "bb6a78d249db719996651e9dce01af3d16d29c93", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate boolean collectElements()", "signatureAfterChange": " \tprivate boolean collectElements()", "diff": ["-/*\t\tList<? extends Element> enclosedElements = _elementE.getEnclosedElements();", "-\t\tloop : for (Element element : enclosedElements) {", "+\t\tList<? extends Element> enclosedElements = _elementE.getEnclosedElements();", "+\t\tfor (Element element : enclosedElements) {", "-\t\t\t\t\tif (element == null) continue loop;", "-\t\t\t\t\tif (\"foo\".equals(name)) {", "+\t\t\t\t\tif (\"foo\".equals(name) && _methodElement == null) {", "-\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase FIELD :", "+\t\t\t\t\tVariableElement variableElement = (VariableElement) element;", "+\t\t\t\t\tbuilder = new StringBuilder(variableElement.getSimpleName());", "+\t\t\t\t\tname = String.valueOf(builder);", "+\t\t\t\t\tif (\"j\".equals(name) && _variableElement == null) {", "+\t\t\t\t\t\t_variableElement = variableElement;", "-\t\t}*/", "+\t\t}", "+\t\t", "+\t\tif (_variableElement == null) {", "+\t\t\treportError(\"Element for field j could not be found\");", "+\t\t\treturn false;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcb118f5d401baf1a4899f1c05dce639", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "7e41439f7b91a880bb131d143b9faf947232eb35", "commitAfterChange": "1fe69d52230e67687b32b072c6843ac0b930c0b8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "signatureAfterChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "diff": ["-\t\t// Verify that we get the root elements we expect", "-\t\tSet<String> expectedRootElementNames = new HashSet<String>(ROOT_ELEMENT_NAMES.length);", "-\t\tfor (String name : ROOT_ELEMENT_NAMES) {", "-\t\t\texpectedRootElementNames.add(name);", "-\t\t}", "-\t\tSet<? extends Element> actualRootElements = roundEnv.getRootElements();", "-\t\tif (null == actualRootElements) {", "-\t\t\treportError(\"getRootElements() returned null\");", "-\t\t\treturn false;", "-\t\t}", "-\t\tfor (Element e : actualRootElements) {", "-\t\t\tString name = e.getSimpleName().toString();", "-\t\t\tif (!expectedRootElementNames.remove(name)) {", "-\t\t\t\treportError(\"Missing root element \" + name);", "-\t\t\t}", "-\t\t}", "-\t\tif (!expectedRootElementNames.isEmpty()) {", "-\t\t\treportError(\"Found extra root elements including \" + expectedRootElementNames.iterator().next());", "+\t\tif (!collectElements()) {", "-\t\tif (!collectElements()) {", "+\t\tif (!examineRoundEnv(roundEnv)) {"]}], "num": 23528}
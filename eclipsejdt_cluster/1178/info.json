{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0a39309d1a21e345194abc0b6724c31", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "014ec6c3dfe40fa743fef39f7a30492b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "90d481edc9060cc498a8f085b08186108312e37b", "commitAfterChange": "f3a3c06f6e68ab7680c250209b9759ac3d56fec6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic IDOMNode findNode(IDOMCompilationUnit dom)", "signatureAfterChange": " \tpublic ASTNode findNode(CompilationUnit ast)", "diff": ["-    // TODO - JDOM - remove once model ported off of JDOM", "-\tpublic IDOMNode findNode(IDOMCompilationUnit dom) {", "-\t\tint type = getElementType();", "-\t\tif (type == IJavaElement.COMPILATION_UNIT || ", "-\t\t\ttype == IJavaElement.FIELD || ", "-\t\t\ttype == IJavaElement.IMPORT_DECLARATION || ", "-\t\t\ttype == IJavaElement.INITIALIZER || ", "-\t\t\ttype == IJavaElement.METHOD || ", "-\t\t\ttype == IJavaElement.PACKAGE_DECLARATION || ", "-\t\t\ttype == IJavaElement.TYPE) {", "-\t\t\tArrayList path = new ArrayList();", "-\t\t\tIJavaElement element = this;", "-\t\t\twhile (element != null && element.getElementType() != IJavaElement.COMPILATION_UNIT) {", "-\t\t\t\tif (element.getElementType() != IJavaElement.IMPORT_CONTAINER) {", "-\t\t\t\t\t// the DOM does not have import containers, so skip them", "-\t\t\t\t\tpath.add(0, element);", "-\t\t\t\t}", "-\t\t\t\telement = element.getParent();", "-\t\t\t}", "-\t\t\tif (path.size() == 0) {", "-\t\t\t\tif (equalsDOMNode(dom)) {", "-\t\t\t\t\treturn dom;", "-\t\t\t\t} else {", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn ((JavaElement) path.get(0)).followPath(path, 0, dom.getFirstChild());", "-\t\t} else {", "-\t\t\treturn null;", "-\t\t}", "-\t}", "+\tpublic ASTNode findNode(CompilationUnit ast) {", "+\t\treturn null; // works only inside a compilation unit"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ee6c4da7899fec5c8b0989ed2ba24ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "b4bd621d9d0ae940b676be9ef06c098999d70b35", "commitAfterChange": "2a2935d5ba546500d563cc08921b53e5b286cdf8", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "diff": ["-\t\tIJavaElement[] otherElements = null;", "+\t\tFieldDeclaration[] otherFields = null;", "-\t\tfor (int i = 0, l = fields.length; i < l; i++) {", "+\t\tint length = fields.length;", "+\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tif (otherElements == null) {", "-\t\t\t\t\t\totherElements = new IJavaElement[] { createHandle(field, type, enclosingElement) };", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tint length = otherElements.length;", "-\t\t\t\t\t\tSystem.arraycopy(otherElements, 0, otherElements = new IJavaElement[length+1], 0, length);", "-\t\t\t\t\t\totherElements[length] = createHandle(field, type, enclosingElement);", "+\t\t\t\t\tif (otherFields == null) {", "+\t\t\t\t\t\totherFields = new FieldDeclaration[length-i];", "+\t\t\t\t\totherFields[i-1-first] = field;", "-\t\t\t\t\t\treportMatching(fields[j], type, enclosingElement, otherElements, value, typeInHierarchy, nodeSet);", "+\t\t\t\t\t\treportMatching(fields[j], otherFields, type, enclosingElement, value, typeInHierarchy, nodeSet);", "-\t\t\t\t\totherElements = null;", "+\t\t\t\t\totherFields = null;", "-\t\t\t\treportMatching(field, type, enclosingElement, null, value, typeInHierarchy, nodeSet);", "+\t\t\t\treportMatching(field, null, type, enclosingElement, value, typeInHierarchy, nodeSet);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b23a0b8c7f80a0662a85046a2aa918d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "32182d99a9e4095a7eee846288e3e10ca04721a2", "commitAfterChange": "e6a111ff4a8296335842f49d9f6c646a663e39a2", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \t\tpublic void elementChanged(ElementChangedEvent ev)", "signatureAfterChange": "  \t\tpublic void elementChanged(ElementChangedEvent event)", "diff": ["-\t\tpublic void elementChanged(ElementChangedEvent ev) {", "-\t\t\tIJavaElementDelta[] copy= new IJavaElementDelta[this.deltas.length + 1];", "-\t\t\tSystem.arraycopy(this.deltas, 0, copy, 0, this.deltas.length);", "-\t\t\tcopy[this.deltas.length]= ev.getDelta();", "-\t\t\tthis.deltas= copy;", "-\t\t\tnew Throwable(\"Caller of IElementChangedListener#elementChanged\").printStackTrace(new PrintStream(this.stackTraces));", "+\t\tpublic void elementChanged(ElementChangedEvent event) {", "+\t\t\tif (this.eventType == -1 || event.getType() == this.eventType) {", "+\t\t\t\tif (this.eventType == IResourceChangeEvent.POST_CHANGE && !\"main\".equals(Thread.currentThread().getName())) {", "+\t\t\t\t\tSystem.out.println(\"POST_CHANGE not in main\");", "+\t\t\t\t}", "+\t\t\t\tIJavaElementDelta[] copy= new IJavaElementDelta[this.deltas.length + 1];", "+\t\t\t\tSystem.arraycopy(this.deltas, 0, copy, 0, this.deltas.length);", "+\t\t\t\tcopy[this.deltas.length]= event.getDelta();", "+\t\t\t\tthis.deltas= copy;", "+\t", "+\t\t\t\tnew Throwable(\"Caller of IElementChangedListener#elementChanged\").printStackTrace(new PrintStream(this.stackTraces));", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5290f46e7e907213e9b1ce64178803f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "ef26de670ead73cc3e16060217656a0a8919f1d5", "commitAfterChange": "9579b84ceaab0473eb674994db1f38b5ee7b5115", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \tprotected IJavaElementDelta[] filterRealDeltas(IJavaElementDelta[] deltas)", "signatureAfterChange": "\r \tprotected IJavaElementDelta[] filterRealDeltas(IJavaElementDelta[] deltas)", "diff": ["-\t\tIJavaElementDelta[] realDeltas = new IJavaElementDelta[deltas.length];\r", "+\t\tint length = deltas.length;\r", "+\t\tIJavaElementDelta[] realDeltas = null;\r", "-\t\tfor (int i = 0; i < deltas.length; i++) {\r", "-\t\t\tIJavaElementDelta delta = deltas[i];\r", "+\t\tfor (int i = 0; i < length; i++) {\r", "+\t\t\tJavaElementDelta delta = (JavaElementDelta)deltas[i];\r", "-\t\t\t\t|| delta.getKind() != IJavaElementDelta.CHANGED\r", "+\t\t\t\t|| delta.getKind() == IJavaElementDelta.ADDED\r", "+\t\t\t\t|| delta.getKind() == IJavaElementDelta.REMOVED\r", "-\t\t\t\t|| (delta.getFlags() & IJavaElementDelta.F_OPENED) != 0) {\r", "+\t\t\t\t|| (delta.getFlags() & IJavaElementDelta.F_OPENED) != 0\r", "+\t\t\t\t|| delta.resourceDeltasCounter > 0) {\r", "+\t\t\t\tif (realDeltas == null) {\r", "+\t\t\t\t\trealDeltas = new IJavaElementDelta[length];\r", "+\t\t\t\t}\r", "-\t\tIJavaElementDelta[] result = new IJavaElementDelta[index];\r", "-\t\tif (result.length > 0) {\r", "-\t\t\tSystem.arraycopy(realDeltas, 0, result, 0, result.length);\r", "+\t\tif (index > 0) {\r", "+\t\t\tIJavaElementDelta[] result = new IJavaElementDelta[index];\r", "+\t\t\tSystem.arraycopy(realDeltas, 0, result, 0, index);\r", "+\t\t\treturn result;\r", "+\t\t} else {\r", "+\t\t\treturn NO_DELTA;\r", "-\t\treturn result;\r"]}], "num": 1178}
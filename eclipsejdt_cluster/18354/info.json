{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "682c890946bcfe36feafaba07f48aef3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bd9d1185bbe9bf8b67b9115d8206523", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "06cedbd8bd184e3f34c939385e2cbddd9e3aedca", "commitAfterChange": "0d09a2966f3cebfb8d6601000e2b64259fed7dd8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " private void remember(IType type, ReferenceBinding typeBinding)", "signatureAfterChange": " private void remember(IType type, ReferenceBinding typeBinding)", "diff": ["-\t\tTypeDeclaration typeDeclaration = ((SourceTypeBinding)typeBinding).scope.referenceType();", "+\t\tif (typeBinding instanceof SourceTypeBinding) {", "+\t\t\tTypeDeclaration typeDeclaration = ((SourceTypeBinding)typeBinding).scope.referenceType();", "-\t\t// simple super class name", "-\t\tchar[] superclassName = null;", "-\t\tTypeReference superclass;", "-\t\tif ((typeDeclaration.bits & ASTNode.IsAnonymousType) != 0) {", "-\t\t\tsuperclass = typeDeclaration.allocation.type;", "-\t\t} else {", "-\t\t\tsuperclass = typeDeclaration.superclass;", "-\t\t}", "-\t\tif (superclass != null) {", "-\t\t\tchar[][] typeName = superclass.getTypeName();", "-\t\t\tsuperclassName = typeName == null ? null : typeName[typeName.length-1];", "-\t\t}", "-", "-\t\t// simple super interface names", "-\t\tchar[][] superInterfaceNames = null;", "-\t\tTypeReference[] superInterfaces = typeDeclaration.superInterfaces;", "-\t\tif (superInterfaces != null) {", "-\t\t\tint length = superInterfaces.length;", "-\t\t\tsuperInterfaceNames = new char[length][];", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tTypeReference superInterface = superInterfaces[i];", "-\t\t\t\tchar[][] typeName = superInterface.getTypeName();", "-\t\t\t\tsuperInterfaceNames[i] = typeName[typeName.length-1];", "+\t\t\t// simple super class name", "+\t\t\tchar[] superclassName = null;", "+\t\t\tTypeReference superclass;", "+\t\t\tif ((typeDeclaration.bits & ASTNode.IsAnonymousType) != 0) {", "+\t\t\t\tsuperclass = typeDeclaration.allocation.type;", "+\t\t\t} else {", "+\t\t\t\tsuperclass = typeDeclaration.superclass;", "-\t\t}", "+\t\t\tif (superclass != null) {", "+\t\t\t\tchar[][] typeName = superclass.getTypeName();", "+\t\t\t\tsuperclassName = typeName == null ? null : typeName[typeName.length-1];", "+\t\t\t}", "-\t\tHierarchyType hierarchyType = new HierarchyType(", "-\t\t\ttype,", "-\t\t\ttypeDeclaration.name,", "-\t\t\ttypeDeclaration.binding.modifiers,", "-\t\t\tsuperclassName,", "-\t\t\tsuperInterfaceNames);", "-\t\tremember(hierarchyType, typeDeclaration.binding);", "+\t\t\t// simple super interface names", "+\t\t\tchar[][] superInterfaceNames = null;", "+\t\t\tTypeReference[] superInterfaces = typeDeclaration.superInterfaces;", "+\t\t\tif (superInterfaces != null) {", "+\t\t\t\tint length = superInterfaces.length;", "+\t\t\t\tsuperInterfaceNames = new char[length][];", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tTypeReference superInterface = superInterfaces[i];", "+\t\t\t\t\tchar[][] typeName = superInterface.getTypeName();", "+\t\t\t\t\tsuperInterfaceNames[i] = typeName[typeName.length-1];", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\tHierarchyType hierarchyType = new HierarchyType(", "+\t\t\t\t\ttype,", "+\t\t\t\t\ttypeDeclaration.name,", "+\t\t\t\t\ttypeDeclaration.binding.modifiers,", "+\t\t\t\t\tsuperclassName,", "+\t\t\t\t\tsuperInterfaceNames);", "+\t\t\tremember(hierarchyType, typeDeclaration.binding);", "+\t\t} else {", "+\t\t\tHierarchyType hierarchyType = new HierarchyType(", "+\t\t\t\t\ttype,", "+\t\t\t\t\ttypeBinding.sourceName(),", "+\t\t\t\t\ttypeBinding.modifiers,", "+\t\t\t\t\ttypeBinding.superclass().sourceName(),", "+\t\t\t\t\tnew char [][] { typeBinding.superInterfaces()[0].sourceName() });", "+\t\t\tremember(hierarchyType, typeBinding);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acaf5fdd0e7271dd63afbe31199392d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java", "commitBeforeChange": "c62a418f35a40981606d85e97ecee9f9596fa8d0", "commitAfterChange": "4c8a3ba34c720dda98e8d56ba71f0361efbe740b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@Override \tpublic TypeElement boxedClass(PrimitiveType p)", "signatureAfterChange": " \t@Override \tpublic TypeElement boxedClass(PrimitiveType p)", "diff": ["-\t\t// TODO Auto-generated method stub", "-\t\treturn null;", "+\t\tPrimitiveTypeImpl primitiveTypeImpl = (PrimitiveTypeImpl) p;", "+\t\tBaseTypeBinding baseTypeBinding = (BaseTypeBinding) primitiveTypeImpl._binding;", "+\t\tTypeBinding boxed = _env.getLookupEnvironment().computeBoxingType(baseTypeBinding);", "+\t\treturn (TypeElement) Factory.newElement(boxed);"]}], "num": 18354}
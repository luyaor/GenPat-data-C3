{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "906f2b66fcc05340737c0f323c98951c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e8f3779bc7db6e22468fa3c9788bed7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "f36c718beb8bf08713390b2fd835e572041478ae", "commitAfterChange": "de0ec0255833f27449d5f59da580e82b41fe6f0d", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 73, "signatureBeforeChange": " \tprotected boolean parse(int specialToken)", "signatureAfterChange": " \tprotected Goal parse(Goal goal, Goal alternateGoal)", "diff": ["-\tprotected boolean parse(int specialToken) { // Canonical LALR pushdown automaton identical to Parser.parse() minus side effects of any kind.", "-\t\tthis.scanner.setFakeEofToken(specialToken);", "+\t// Canonical LALR pushdown automaton identical to Parser.parse() minus side effects of any kind, returns the rule reduced.", "+\tprotected Goal parse(Goal goal, Goal alternateGoal) {", "-\t\t\tthis.currentToken = specialToken; // steer the parser towards a single minded goal. ", "+\t\t\tthis.currentToken = goal.first; ", "-\t\t\t\t\treturn false;", "+\t\t\t\t\treturn Goal.FailedGoal;", "-\t\t\t\t    return true; // accept !", "+\t\t\t\t    return Goal.FailedGoal; // accept - we should never reach this state, we accept at reduce with a right member of follow set below.", "+\t\t\t\t\tif (goal.hasBeenReached(act, this.currentToken))", "+\t\t\t\t\t\treturn goal;", "+\t\t\t\t\tif (alternateGoal != null && alternateGoal.hasBeenReached(act,  this.currentToken))", "+\t\t\t\t\t\treturn alternateGoal;", "-\t\t\treturn false;", "+\t\t\treturn Goal.FailedGoal;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97ea41818bdb5678ade268ef665ab089", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "86284f2db6c7ac41b63c1766c9b7b3a016d95a9a", "commitAfterChange": "c8d8bdad35a9dc8d924116cabb6dd00986cff218", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " \tprotected Goal parse(Goal goal, Goal alternateGoal)", "signatureAfterChange": " \tprotected boolean parse(Goal goal)", "diff": ["-\tprotected Goal parse(Goal goal, Goal alternateGoal) {", "+\tprotected boolean parse(Goal goal) {", "-\t\t\t\t\treturn Goal.FailedGoal;", "+\t\t\t\t\treturn FAILURE;", "-\t\t\t\t    return Goal.FailedGoal; // accept - we should never reach this state, we accept at reduce with a right member of follow set below.", "+\t\t\t\t    return FAILURE; // accept - we should never reach this state, we accept at reduce with a right member of follow set below.", "-\t\t\t\t\t\treturn goal;", "-\t\t\t\t\tif (alternateGoal != null && alternateGoal.hasBeenReached(act,  this.currentToken))", "-\t\t\t\t\t\treturn alternateGoal;", "+\t\t\t\t\t\treturn SUCCESS;", "-\t\t\treturn Goal.FailedGoal;", "+\t\t\treturn FAILURE;"]}], "num": 4451}
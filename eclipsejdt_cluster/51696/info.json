{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab6738466df9ba5f20e5ccf099d4a3bc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07f3f51c665f1150de56ce5f5067c562", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "1cc3b3e7a0647f40743545ab9e305d8f4bd58bbd", "commitAfterChange": "9e14e700eaf4553e71d5d5792e1c8a3558660da3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic Compiler( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tMap settings, \t\tfinal ICompilerRequestor requestor, \t\tIProblemFactory problemFactory, \t\tboolean parseLiteralExpressionsAsConstants, \t\tboolean storeAnnotations, \t\tboolean statementsRecovery)", "signatureAfterChange": " \tprivate Compiler( \t\t\tINameEnvironment environment, \t\t\tIErrorHandlingPolicy policy, \t\t\tMap settings, \t\t\tfinal ICompilerRequestor requestor, \t\t\tIProblemFactory problemFactory, \t\t\tPrintWriter out, \t\t\tboolean parseLiteralExpressionsAsConstants, \t\t\tboolean storeAnnotations, \t\t\tboolean statementsRecovery, \t\t\tboolean flag)", "diff": ["-\t\tINameEnvironment environment,", "-\t\tIErrorHandlingPolicy policy,", "-\t\tMap settings,", "-\t\tfinal ICompilerRequestor requestor,", "-\t\tIProblemFactory problemFactory,", "-\t\tboolean parseLiteralExpressionsAsConstants,", "-\t\tboolean storeAnnotations,", "-\t\tboolean statementsRecovery) {", "+\t */", "+\tprivate Compiler(", "+\t\t\tINameEnvironment environment,", "+\t\t\tIErrorHandlingPolicy policy,", "+\t\t\tMap settings,", "+\t\t\tfinal ICompilerRequestor requestor,", "+\t\t\tIProblemFactory problemFactory,", "+\t\t\tPrintWriter out,", "+\t\t\tboolean parseLiteralExpressionsAsConstants,", "+\t\t\tboolean storeAnnotations,", "+\t\t\tboolean statementsRecovery,", "+\t\t\tboolean flag) {", "-\t\tthis.options.parseLiteralExpressionsAsConstants = parseLiteralExpressionsAsConstants;", "-\t\tthis.options.storeAnnotations = storeAnnotations;", "-\t\tthis.options.performStatementsRecovery =", "-\t\t\tstatementsRecovery &&", "-\t\t\tthis.options.performStatementsRecovery;// TODO temporary code to take into account the temporary JavaCore options", "+\t\tif (flag) { // boolean parameters are significant, pass them down", "+\t\t\tthis.options.parseLiteralExpressionsAsConstants = parseLiteralExpressionsAsConstants;", "+\t\t\tthis.options.storeAnnotations = storeAnnotations;", "+\t\t\tthis.options.performStatementsRecovery =", "+\t\t\t\tstatementsRecovery &&", "+\t\t\t\tthis.options.performStatementsRecovery;// TODO temporary code to take into account the temporary JavaCore options", "+\t\t}", "+\t\tthis.out = out == null ? new PrintWriter(System.out, true) : out;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32b9cdeaec6695181db0134d8bd3dd70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "542bc03686c1982d51c01449da7cc4df74fbe14e", "commitAfterChange": "488811f5b30befaaae3f5995fcfa0b0505629e6e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tsynchronized IMethodBinding getMethodBinding(org.eclipse.jdt.internal.compiler.lookup.MethodBinding methodBinding)", "signatureAfterChange": "  \tprivate synchronized IMethodBinding getMethodOrLambdaBinding(org.eclipse.jdt.internal.compiler.lookup.MethodBinding methodBinding, \t\t\t\t\t\t\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding descriptor, \t\t\t\t\t\t\t\t\t\t\t\t\tIBinding enclosingBinding)", "diff": ["+", "+\tprivate synchronized IMethodBinding getMethodOrLambdaBinding(org.eclipse.jdt.internal.compiler.lookup.MethodBinding methodBinding,", "+\t\t\t\t\t\t\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding descriptor,", "+\t\t\t\t\t\t\t\t\t\t\t\t\tIBinding enclosingBinding)", "+\t{", "-\t\t\tbinding = new MethodBinding(this, methodBinding);", "+\t\t\tif (descriptor != null && enclosingBinding != null) {", "+\t\t\t\tbinding = new MethodBinding.LambdaMethod(this, descriptor, methodBinding, enclosingBinding);", "+\t\t\t} else {", "+\t\t\t\tbinding = new MethodBinding(this, methodBinding);", "+\t\t\t}"]}], "num": 51696}
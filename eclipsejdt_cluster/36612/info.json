{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2482727037df157c16ac10e8ba21dbe7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "293b593fd4589a26fd3aa4a0f1a1e86d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "15ba790478e0bbae95b2e33b81452f5363e56d0c", "commitAfterChange": "e4e607ac6102960357aeaf6422bc906f0d3c86ca", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic MethodBinding getConstructor(ReferenceBinding receiverType, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": "  \tpublic MethodBinding getConstructor(ReferenceBinding receiverType, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["+", "+\tpublic MethodBinding getConstructor(ReferenceBinding receiverType, TypeBinding[] argumentTypes, InvocationSite invocationSite) {", "+\t\tcompilationUnitScope().recordTypeReference(receiverType);", "+\t\tcompilationUnitScope().recordTypeReferences(argumentTypes);", "+\t\tMethodBinding methodBinding = receiverType.getExactConstructor(argumentTypes);", "+\t\tif (methodBinding != null && methodBinding.canBeSeenBy(invocationSite, this))", "+\t\t\treturn methodBinding;", "+\t\tMethodBinding[] methods = receiverType.getMethods(ConstructorDeclaration.ConstantPoolName);", "+\t\tif (methods == NoMethods)", "+\t\t\treturn new ProblemMethodBinding(", "+\t\t\t\tConstructorDeclaration.ConstantPoolName,", "+\t\t\t\targumentTypes,", "+\t\t\t\tNotFound);", "+", "+\t\tMethodBinding[] compatible = new MethodBinding[methods.length];", "+\t\tint compatibleIndex = 0;", "+\t\tfor (int i = 0, length = methods.length; i < length; i++)", "+\t\t\tif (areParametersAssignable(methods[i].parameters, argumentTypes))", "+\t\t\t\tcompatible[compatibleIndex++] = methods[i];", "+\t\tif (compatibleIndex == 0)", "+\t\t\treturn new ProblemMethodBinding(", "+\t\t\t\tConstructorDeclaration.ConstantPoolName,", "+\t\t\t\targumentTypes,", "+\t\t\t\tNotFound);", "+\t\t// need a more descriptive error... cannot convert from X to Y", "+", "+\t\tMethodBinding[] visible = new MethodBinding[compatibleIndex];", "+\t\tint visibleIndex = 0;", "+\t\tfor (int i = 0; i < compatibleIndex; i++) {", "+\t\t\tMethodBinding method = compatible[i];", "+\t\t\tif (method.canBeSeenBy(invocationSite, this))", "+\t\t\t\tvisible[visibleIndex++] = method;", "+\t\t}", "+\t\tif (visibleIndex == 1) return visible[0];", "+\t\tif (visibleIndex == 0)", "+\t\t\treturn new ProblemMethodBinding(", "+\t\t\t\tcompatible[0],", "+\t\t\t\tConstructorDeclaration.ConstantPoolName,", "+\t\t\t\tcompatible[0].parameters,", "+\t\t\t\tNotVisible);", "+\t\treturn mostSpecificClassMethodBinding(visible, visibleIndex);", "-", "-\tpublic MethodBinding getConstructor(ReferenceBinding receiverType, TypeBinding[] argumentTypes, InvocationSite invocationSite) {", "-\t", "-\t\tcompilationUnitScope().recordTypeReference(receiverType);", "-\t\tcompilationUnitScope().recordTypeReferences(argumentTypes);", "-\t\tMethodBinding methodBinding = receiverType.getExactConstructor(argumentTypes);", "-\t\tif (methodBinding != null) {", "-\t\t\tif (methodBinding.canBeSeenBy(invocationSite, this))", "-\t\t\t\treturn methodBinding;", "-\t\t}", "-\t\tMethodBinding[] methods =", "-\t\t\treceiverType.getMethods(ConstructorDeclaration.ConstantPoolName);", "-\t\tif (methods == NoMethods) {", "-\t\t\treturn new ProblemMethodBinding(", "-\t\t\t\tConstructorDeclaration.ConstantPoolName,", "-\t\t\t\targumentTypes,", "-\t\t\t\tNotFound);", "-\t\t}", "-\t\tMethodBinding[] compatible = new MethodBinding[methods.length];", "-\t\tint compatibleIndex = 0;", "-\t\tfor (int i = 0, length = methods.length; i < length; i++)", "-\t\t\tif (areParametersAssignable(methods[i].parameters, argumentTypes))", "-\t\t\t\tcompatible[compatibleIndex++] = methods[i];", "-\t\tif (compatibleIndex == 0)", "-\t\t\treturn new ProblemMethodBinding(", "-\t\t\t\tConstructorDeclaration.ConstantPoolName,", "-\t\t\t\targumentTypes,", "-\t\t\t\tNotFound);", "-\t\t// need a more descriptive error... cannot convert from X to Y", "-\t", "-\t\tMethodBinding[] visible = new MethodBinding[compatibleIndex];", "-\t\tint visibleIndex = 0;", "-\t\tfor (int i = 0; i < compatibleIndex; i++) {", "-\t\t\tMethodBinding method = compatible[i];", "-\t\t\tif (method.canBeSeenBy(invocationSite, this))", "-\t\t\t\tvisible[visibleIndex++] = method;", "-\t\t}", "-\t\tif (visibleIndex == 1)", "-\t\t\treturn visible[0];", "-\t\tif (visibleIndex == 0)", "-\t\t\treturn new ProblemMethodBinding(", "-\t\t\t\tcompatible[0],", "-\t\t\t\tConstructorDeclaration.ConstantPoolName,", "-\t\t\t\tcompatible[0].parameters,", "-\t\t\t\tNotVisible);", "-\t\treturn mostSpecificClassMethodBinding(visible, visibleIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb125c39b04b3989e7f1ba57371aba79", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "368e7b2744bb4a520a4dfc9ab8183508aa7c626d", "commitAfterChange": "93b70485a331557e06c4f378f7086f6e4f12616a", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic MethodBinding getConstructor(ReferenceBinding receiverType, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": "  \tpublic MethodBinding getConstructor(ReferenceBinding receiverType, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\tcompilationUnitScope().recordTypeReference(receiverType);", "-\t\tcompilationUnitScope().recordTypeReferences(argumentTypes);", "-\t\tMethodBinding methodBinding = receiverType.getExactConstructor(argumentTypes);", "-\t\tif (methodBinding != null && methodBinding.canBeSeenBy(invocationSite, this))", "-\t\t\treturn methodBinding;", "-\t\tMethodBinding[] methods = receiverType.getMethods(ConstructorDeclaration.ConstantPoolName);", "-\t\tif (methods == NoMethods)", "-\t\t\treturn new ProblemMethodBinding(", "-\t\t\t\tConstructorDeclaration.ConstantPoolName,", "-\t\t\t\targumentTypes,", "-\t\t\t\tNotFound);", "-", "-\t\tMethodBinding[] compatible = new MethodBinding[methods.length];", "-\t\tint compatibleIndex = 0;", "-\t\tfor (int i = 0, length = methods.length; i < length; i++)", "-\t\t\tif (areParametersAssignable(methods[i].parameters, argumentTypes))", "-\t\t\t\tcompatible[compatibleIndex++] = methods[i];", "-\t\tif (compatibleIndex == 0)", "-\t\t\treturn new ProblemMethodBinding(", "-\t\t\t\tConstructorDeclaration.ConstantPoolName,", "-\t\t\t\targumentTypes,", "-\t\t\t\tNotFound);", "-\t\t// need a more descriptive error... cannot convert from X to Y", "-", "-\t\tMethodBinding[] visible = new MethodBinding[compatibleIndex];", "-\t\tint visibleIndex = 0;", "-\t\tfor (int i = 0; i < compatibleIndex; i++) {", "-\t\t\tMethodBinding method = compatible[i];", "-\t\t\tif (method.canBeSeenBy(invocationSite, this))", "-\t\t\t\tvisible[visibleIndex++] = method;", "+\t\ttry {", "+\t\t\tcompilationUnitScope().recordTypeReference(receiverType);", "+\t\t\tcompilationUnitScope().recordTypeReferences(argumentTypes);", "+\t\t\tMethodBinding methodBinding = receiverType.getExactConstructor(argumentTypes);", "+\t\t\tif (methodBinding != null && methodBinding.canBeSeenBy(invocationSite, this))", "+\t\t\t\treturn methodBinding;", "+\t\t\tMethodBinding[] methods = receiverType.getMethods(ConstructorDeclaration.ConstantPoolName);", "+\t\t\tif (methods == NoMethods)", "+\t\t\t\treturn new ProblemMethodBinding(", "+\t\t\t\t\tConstructorDeclaration.ConstantPoolName,", "+\t\t\t\t\targumentTypes,", "+\t\t\t\t\tNotFound);", "+\t", "+\t\t\tMethodBinding[] compatible = new MethodBinding[methods.length];", "+\t\t\tint compatibleIndex = 0;", "+\t\t\tfor (int i = 0, length = methods.length; i < length; i++)", "+\t\t\t\tif (areParametersAssignable(methods[i].parameters, argumentTypes))", "+\t\t\t\t\tcompatible[compatibleIndex++] = methods[i];", "+\t\t\tif (compatibleIndex == 0)", "+\t\t\t\treturn new ProblemMethodBinding(", "+\t\t\t\t\tConstructorDeclaration.ConstantPoolName,", "+\t\t\t\t\targumentTypes,", "+\t\t\t\t\tNotFound);", "+\t\t\t// need a more descriptive error... cannot convert from X to Y", "+\t", "+\t\t\tMethodBinding[] visible = new MethodBinding[compatibleIndex];", "+\t\t\tint visibleIndex = 0;", "+\t\t\tfor (int i = 0; i < compatibleIndex; i++) {", "+\t\t\t\tMethodBinding method = compatible[i];", "+\t\t\t\tif (method.canBeSeenBy(invocationSite, this))", "+\t\t\t\t\tvisible[visibleIndex++] = method;", "+\t\t\t}", "+\t\t\tif (visibleIndex == 1) return visible[0];", "+\t\t\tif (visibleIndex == 0)", "+\t\t\t\treturn new ProblemMethodBinding(", "+\t\t\t\t\tcompatible[0],", "+\t\t\t\t\tConstructorDeclaration.ConstantPoolName,", "+\t\t\t\t\tcompatible[0].parameters,", "+\t\t\t\t\tNotVisible);", "+\t\t\treturn mostSpecificClassMethodBinding(visible, visibleIndex);", "+\t\t} catch (AbortCompilation e) {", "+\t\t\te.updateContext(invocationSite, referenceCompilationUnit().compilationResult);", "+\t\t\tthrow e;", "-\t\tif (visibleIndex == 1) return visible[0];", "-\t\tif (visibleIndex == 0)", "-\t\t\treturn new ProblemMethodBinding(", "-\t\t\t\tcompatible[0],", "-\t\t\t\tConstructorDeclaration.ConstantPoolName,", "-\t\t\t\tcompatible[0].parameters,", "-\t\t\t\tNotVisible);", "-\t\treturn mostSpecificClassMethodBinding(visible, visibleIndex);"]}], "num": 36612}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3fb4f509934e8358492aa15755efd7c3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "061a36ec36bf649d406c8ddc4bfdafae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "c8fa56c625729a2c5aff4c492dea2eebe9fdcef6", "commitAfterChange": "841f0bfe84392d37aa864c563d3642fdef603b24", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tvoid applyReturnNullBits(MethodBinding method, long nullnessBits, LookupEnvironment environment)", "signatureAfterChange": "  \tvoid applyReturnNullBits(MethodBinding method, long nullnessBits, LookupEnvironment environment)", "diff": ["-\t\t\t\t// TODO(Stephan: Synthesize AnnotationBinding[] and call LE#createAnnotatedType(TB, AB[]);", "-\t\t\t\t//\tmethod.returnType = environment.createAnnotatedType(method.returnType, nullnessBits);", "+\t\t\t\tmethod.returnType = environment.createAnnotatedType(method.returnType, environment.nullAnnotationsFromTagBits(nullnessBits));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce18f5f3cf94d0f81f204bebde1d9f3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "4d19416746402b8fbbfd02c13772658da70a345a", "commitAfterChange": "81400db64234d6cf1ce3b6a87a8f065ac6bd072f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public static SearchPattern createPattern(IJavaElement element, int limitTo)", "signatureAfterChange": "\r public static SearchPattern createPattern(IJavaElement element, int limitTo)", "diff": ["-\t\t\t\t\t\tsearchPattern = new ConstructorDeclarationPattern(declaringSimpleName, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, parameterQualifications, parameterSimpleNames);\r", "+\t\t\t\t\t\tsearchPattern = \r", "+\t\t\t\t\t\t\tnew ConstructorDeclarationPattern(\r", "+\t\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\t\tparameterQualifications, \r", "+\t\t\t\t\t\t\t\tparameterSimpleNames);\r", "-\t\t\t\t\t\tsearchPattern = new MethodDeclarationPattern(selector, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, declaringSimpleName, returnQualification, returnSimpleName, parameterQualifications, parameterSimpleNames);\r", "+\t\t\t\t\t\tsearchPattern = \r", "+\t\t\t\t\t\t\tnew MethodDeclarationPattern(\r", "+\t\t\t\t\t\t\t\tselector, \r", "+\t\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\t\treturnQualification, \r", "+\t\t\t\t\t\t\t\treturnSimpleName, \r", "+\t\t\t\t\t\t\t\tparameterQualifications, \r", "+\t\t\t\t\t\t\t\tparameterSimpleNames);\r", "-\t\t\t\t\t\tsearchPattern = new ConstructorReferencePattern(declaringSimpleName, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, parameterQualifications, parameterSimpleNames);\r", "+\t\t\t\t\t\tsearchPattern = \r", "+\t\t\t\t\t\t\tnew ConstructorReferencePattern(\r", "+\t\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\t\tparameterQualifications, \r", "+\t\t\t\t\t\t\t\tparameterSimpleNames,\r", "+\t\t\t\t\t\t\t\tmethod.getDeclaringType());\r", "-\t\t\t\t\t\tsearchPattern = new MethodReferencePattern(selector, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, declaringSimpleName, returnQualification, returnSimpleName, parameterQualifications, parameterSimpleNames);\r", "+\t\t\t\t\t\tsearchPattern = \r", "+\t\t\t\t\t\t\tnew MethodReferencePattern(\r", "+\t\t\t\t\t\t\t\tselector, \r", "+\t\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\t\treturnQualification, \r", "+\t\t\t\t\t\t\t\treturnSimpleName, \r", "+\t\t\t\t\t\t\t\tparameterQualifications, \r", "+\t\t\t\t\t\t\t\tparameterSimpleNames,\r", "+\t\t\t\t\t\t\t\tmethod.getDeclaringType());\r", "-\t\t\t\t\t\t\tnew ConstructorDeclarationPattern(declaringSimpleName, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, parameterQualifications, parameterSimpleNames), \r", "-\t\t\t\t\t\t\tnew ConstructorReferencePattern(declaringSimpleName, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, parameterQualifications, parameterSimpleNames));\r", "+\t\t\t\t\t\t\tnew ConstructorDeclarationPattern(\r", "+\t\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\t\tparameterQualifications, \r", "+\t\t\t\t\t\t\t\tparameterSimpleNames), \r", "+\t\t\t\t\t\t\tnew ConstructorReferencePattern(\r", "+\t\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\t\tparameterQualifications, \r", "+\t\t\t\t\t\t\t\tparameterSimpleNames,\r", "+\t\t\t\t\t\t\t\tmethod.getDeclaringType()));\r", "-\t\t\t\t\t\t\tnew MethodDeclarationPattern(selector, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, declaringSimpleName, returnQualification, returnSimpleName, parameterQualifications, parameterSimpleNames), \r", "-\t\t\t\t\t\t\tnew MethodReferencePattern(selector, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, declaringSimpleName, returnQualification, returnSimpleName, parameterQualifications, parameterSimpleNames));\r", "+\t\t\t\t\t\t\tnew MethodDeclarationPattern(\r", "+\t\t\t\t\t\t\t\tselector, \r", "+\t\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\t\treturnQualification, \r", "+\t\t\t\t\t\t\t\treturnSimpleName, \r", "+\t\t\t\t\t\t\t\tparameterQualifications, \r", "+\t\t\t\t\t\t\t\tparameterSimpleNames), \r", "+\t\t\t\t\t\t\tnew MethodReferencePattern(\r", "+\t\t\t\t\t\t\t\tselector, \r", "+\t\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\t\treturnQualification, \r", "+\t\t\t\t\t\t\t\treturnSimpleName, \r", "+\t\t\t\t\t\t\t\tparameterQualifications, \r", "+\t\t\t\t\t\t\t\tparameterSimpleNames,\r", "+\t\t\t\t\t\t\t\tmethod.getDeclaringType()));\r"]}], "num": 44444}
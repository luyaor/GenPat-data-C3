{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "021642478c9d231c6b180cf7e8418947", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c385523b532f30e27dd224a4ed50433", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "08c5b9004bde27fb4063ce300ce881966676fe74", "commitAfterChange": "28d58bf6eb942015446b8ffce8f446f86e9686d9", "methodNumberBeforeChange": 166, "methodNumberAfterChange": 166, "signatureBeforeChange": " public void test401845a()", "signatureAfterChange": " public void test401845a()", "diff": ["-\t\t\t\"\t^^^\\n\" + ", "-\t\t\t\"The method foo(I[]...) in the type X is not applicable for the arguments (X::goo)\\n\" + ", "+\t\t\t\"\t    ^^^^^^\\n\" + ", "+\t\t\t\"The target type of this expression must be a functional interface\\n\" + ", "-\t\t\t\"\t^^^\\n\" + ", "-\t\t\t\"The method foo(I[]...) in the type X is not applicable for the arguments ((<no type> x) -> {\\n\" + ", "-\t\t\t\"  return 10;\\n\" + ", "-\t\t\t\"})\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The target type of this expression must be a functional interface\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ba4f82a6108ec46487542e985d9c7f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java", "commitBeforeChange": "eb0413d7c3f6c8377e410e116826fcfccbec3365", "commitAfterChange": "7cf8a68136e90cda676cf99c112914a22eaf96cd", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " public void test427628a()", "signatureAfterChange": " public void test427628a()", "diff": ["-\t\t\t\"The method test(((i != null) ? i.getJ() : null)) is undefined for the type X\\n\" + ", "+\t\t\t\"The method test(X.I) in the type X is not applicable for the arguments (((i != null) ? i.getJ() : null))\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\ttest(i!=null?i.getJ():null);\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X.J to X.I\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 12)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fa82f7da0a3d44b1c5d8884692703c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "bea7b508525f70d680963772996546f2bcf8018f", "commitAfterChange": "6612336f81825afdf894aa053e2e886c83842e87", "methodNumberBeforeChange": 172, "methodNumberAfterChange": 172, "signatureBeforeChange": " public void test401847a()", "signatureAfterChange": " public void test401847a()", "diff": ["+\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\"The method foo(I...) in the type X is not applicable for the arguments ((true ? X::goo : X::goo))\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tfoo(true ? X::goo : X::goo);\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 9)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a414bb554267a77dab7b269606acca19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "bea7b508525f70d680963772996546f2bcf8018f", "commitAfterChange": "6612336f81825afdf894aa053e2e886c83842e87", "methodNumberBeforeChange": 166, "methodNumberAfterChange": 166, "signatureBeforeChange": " public void test401845a()", "signatureAfterChange": " public void test401845a()", "diff": ["+\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\"The method foo(I[]...) in the type X is not applicable for the arguments (X::goo)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tfoo(X::goo);\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tfoo((x)-> {return 10;});\\n\" + ", "+\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\"The method foo(I[]...) in the type X is not applicable for the arguments ((<no type> x) -> {\\n\" + ", "+\t\t\t\"  return 10;\\n\" + ", "+\t\t\t\"})\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + "]}], "num": 13086}
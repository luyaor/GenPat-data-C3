{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f376be1334a623c6afa6dd00cef3ec7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "199e11ad37d50be8979ad73f35dcfc27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 221, "signatureBeforeChange": "  public void invalidMethod(MessageSend messageSend, MethodBinding method)", "signatureAfterChange": "  public void invalidMethod(MessageSend messageSend, MethodBinding method)", "diff": ["+\t\t\treturn;", "+\t\tcase ProblemReasons.ParameterizedMethodExpectedTypeProblem:", "+\t\t\t// FIXME(stephan): construct suitable message (https://bugs.eclipse.org/404675)", "+\t\t\tproblemMethod = (ProblemMethodBinding) method;", "+\t\t\tInferenceContext18 inferenceContext = problemMethod.inferenceContext;", "+\t\t\tif (inferenceContext != null && inferenceContext.outerContext != null) {", "+\t\t\t\t// problem relates to a nested inference context, let the outer handle it:", "+\t\t\t\tinferenceContext.outerContext.addProblemMethod(problemMethod);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tshownMethod = problemMethod.closestMatch;", "+\t\t\tthis.handle(", "+\t\t\t\tIProblem.TypeMismatch,", "+\t\t\t\tnew String[] {", "+\t\t\t\t        String.valueOf(shownMethod.returnType.readableName()),", "+\t\t\t\t        (problemMethod.returnType != null ? String.valueOf(problemMethod.returnType.readableName()) : \"<unknown>\")},", "+\t\t\t\tnew String[] {", "+\t\t\t\t        String.valueOf(shownMethod.returnType.shortReadableName()),", "+\t\t\t\t        (problemMethod.returnType != null ? String.valueOf(problemMethod.returnType.shortReadableName()) : \"<unknown>\")},", "+\t\t\t\tmessageSend.sourceStart,", "+\t\t\t\tmessageSend.sourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "752820375bf682de6499aa893f4bc834", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "cab98b2b8859caae533ee4cfbe628b2265262135", "commitAfterChange": "2b49f89ec08ec07d960829d0eb3050d846fdb2ac", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 221, "signatureBeforeChange": "  public void invalidMethod(MessageSend messageSend, MethodBinding method)", "signatureAfterChange": "  public void invalidMethod(MessageSend messageSend, MethodBinding method)", "diff": ["+\t\tcase ProblemReasons.ApplicableMethodOverriddenByInapplicable:", "+\t\t\tproblemMethod = (ProblemMethodBinding) method;", "+\t\t\tif (problemMethod.closestMatch != null) {", "+\t\t\t    shownMethod = problemMethod.closestMatch.original();", "+\t\t    }", "+\t\t\tthis.handle(", "+\t\t\t\tIProblem.ApplicableMethodOverriddenByInapplicable,", "+\t\t\t\tnew String[] {", "+\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t        typesAsString(shownMethod, false),", "+\t\t\t\t        new String(shownMethod.declaringClass.readableName()),", "+\t\t\t\t},", "+\t\t\t\tnew String[] {", "+\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t        typesAsString(shownMethod, true),", "+\t\t\t\t        new String(shownMethod.declaringClass.shortReadableName()),", "+\t\t\t\t},", "+\t\t\t\t(int) (messageSend.nameSourcePosition >>> 32),", "+\t\t\t\t(int) messageSend.nameSourcePosition);", "+\t\t\treturn;"]}], "num": 52553}
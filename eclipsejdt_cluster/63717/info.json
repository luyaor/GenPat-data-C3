{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4cffd92cf00d10b56e3d0be95665f1ee", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a195f2097792296b4589bb56a31e75d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "63af609b0c4ca15a76568f63423f1cb23d7be92e", "commitAfterChange": "c90b82edd1ac1d83673b4c91396967c8c061cdc3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate String[] convertTypeNamesToSigs(char[][] typeNames)", "signatureAfterChange": " \tpublic String[] convertTypeNamesToSigs(char[][] typeNames)", "diff": ["-\tprivate String[] convertTypeNamesToSigs(char[][] typeNames) {", "+\tpublic String[] convertTypeNamesToSigs(char[][] typeNames) {", "+\t\t\t\t\t\tint matchingEnd = findMatchingGenericEnd(typeSig, j+1);", "+\t\t\t\t\t\tif (matchingEnd > 0 && matchingEnd+1 < length && typeSig[matchingEnd+1] == Signature.C_DOT) {", "+\t\t\t\t\t\t\t// found Head<Param>.Tail -> discard everything except Tail", "+\t\t\t\t\t\t\tif (simpleTypeSig == null)", "+\t\t\t\t\t\t\t\tsimpleTypeSig = new StringBuffer().append(typeSig, 0, start);", "+\t\t\t\t\t\t\tsimpleTypeSig.append(Signature.C_UNRESOLVED);", "+\t\t\t\t\t\t\tstart = j = matchingEnd+2;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t//$FALL-THROUGH$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfb004937e3612717195776405cb152c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "ece2c7d1e79ad27366573b24052e580dddc3afec", "commitAfterChange": "7df383b00e8453025afa0d0c65533607ef343fe1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate String[] convertTypeNamesToSigs(char[][] typeNames)", "signatureAfterChange": " \tpublic String[] convertTypeNamesToSigs(char[][] typeNames)", "diff": ["-\tprivate String[] convertTypeNamesToSigs(char[][] typeNames) {", "+\tpublic String[] convertTypeNamesToSigs(char[][] typeNames) {", "+\t\t\t\t\t\tint matchingEnd = findMatchingGenericEnd(typeSig, j+1);", "+\t\t\t\t\t\tif (matchingEnd > 0 && matchingEnd+1 < length && typeSig[matchingEnd+1] == Signature.C_DOT) {", "+\t\t\t\t\t\t\t// found Head<Param>.Tail -> discard everything except Tail", "+\t\t\t\t\t\t\tif (simpleTypeSig == null)", "+\t\t\t\t\t\t\t\tsimpleTypeSig = new StringBuffer().append(typeSig, 0, start);", "+\t\t\t\t\t\t\tsimpleTypeSig.append(Signature.C_UNRESOLVED);", "+\t\t\t\t\t\t\tstart = j = matchingEnd+2;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t//$FALL-THROUGH$"]}], "num": 63717}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6939fae5dfcde71bf8498d3c59fc9a65", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38f86ca16765b98f8d5f7b0e8643995c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "bf4fd359c98503d2401041bd16d54a83079f69fe", "commitAfterChange": "7183d81a2458b7a9ecc9004f74bf12b52ac2eafc", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate void addDependentProjects(IPath projectPath, HashSet result)", "signatureAfterChange": " \tprivate void addDependentProjects(IJavaProject project, HashMap projectDependencies, HashSet result)", "diff": ["-\tprivate void addDependentProjects(IPath projectPath, HashSet result) {", "-\t\tIJavaProject[] projects = null;", "-\t\ttry {", "-\t\t\tprojects = this.manager.getJavaModel().getJavaProjects();", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// java model doesn't exist", "-\t\t\treturn;", "+\tprivate void addDependentProjects(IJavaProject project, HashMap projectDependencies, HashSet result) {", "+\t\tIJavaProject[] dependents = (IJavaProject[]) projectDependencies.get(project);", "+\t\tif (dependents == null) return;", "+\t\tfor (int i = 0, length = dependents.length; i < length; i++) {", "+\t\t\tIJavaProject dependent = dependents[i];", "+\t\t\tif (result.contains(dependent))", "+\t\t\t\tcontinue; // no need to go further as the project is already known", "+\t\t\tresult.add(dependent);", "+\t\t\taddDependentProjects(dependent, projectDependencies, result);", "-\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\tIJavaProject project = projects[i];", "-\t\t\tIClasspathEntry[] classpath = null;", "-\t\t\ttry {", "-\t\t\t\tclasspath = ((JavaProject)project).getExpandedClasspath(true);", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// project doesn't exist: continue with next project", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\tfor (int j = 0, length2 = classpath.length; j < length2; j++) {", "-\t\t\t\tIClasspathEntry entry = classpath[j];", "-\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT", "-\t\t\t\t\t\t\t&& entry.getPath().equals(projectPath)) {", "-\t\t\t\t\t\tresult.add(project);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f46d8600f2b2a5e4ae46d9ab361e6ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathChange.java", "commitBeforeChange": "98fa84ee39c41fd289fab405c645f226d27b7c68", "commitAfterChange": "f85e940f5bc47c34840682e379f1da2263835e88", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic boolean generateDelta(JavaElementDelta delta)", "signatureAfterChange": " \tpublic int generateDelta(JavaElementDelta delta)", "diff": ["-\tpublic boolean generateDelta(JavaElementDelta delta) {", "+\tpublic int generateDelta(JavaElementDelta delta) {", "-\t\t\treturn false;", "+\t\t\treturn NO_DELTA;", "-\t\tboolean hasDelta = false;", "+\t\tint result = NO_DELTA;", "-\t\t\t\thasDelta = true;", "+\t\t\t\tresult |= HAS_DELTA;", "-\t\t\t\treturn false;", "+\t\t\t\treturn NO_DELTA;", "-\t\t\treturn false;", "+\t\t\treturn NO_DELTA;", "-\t\t\treturn false;", "+\t\t\treturn NO_DELTA;", "-\t\t\t\t// do not notify remote project changes", "-\t\t\t\tif (this.oldResolvedClasspath[i].getEntryKind() == IClasspathEntry.CPE_PROJECT){", "+\t\t\t\t// remote project changes", "+\t\t\t\tif (this.oldResolvedClasspath[i].getEntryKind() == IClasspathEntry.CPE_PROJECT) {", "+\t\t\t\t\tresult |= HAS_PROJECT_CHANGE;", "-\t\t\t\thasDelta = true;", "+\t\t\t\tresult |= HAS_DELTA;", "-\t\t\t\t// do not notify remote project changes", "+\t\t\t\t// remote project changes", "+\t\t\t\t\tresult |= HAS_PROJECT_CHANGE;", "-\t\t\t\t\thasDelta = true;", "+\t\t\t\t\tresult |= HAS_DELTA;", "-\t\t\t\t\thasDelta = true;", "+\t\t\t\t\tresult |= HAS_DELTA;", "-\t\t\t\t// do not notify remote project changes", "-\t\t\t\tif (newResolvedClasspath[i].getEntryKind() == IClasspathEntry.CPE_PROJECT){", "+\t\t\t\t// remote project changes", "+\t\t\t\tif (newResolvedClasspath[i].getEntryKind() == IClasspathEntry.CPE_PROJECT) {", "+\t\t\t\t\tresult |= HAS_PROJECT_CHANGE;", "-\t\t\t\thasDelta = true;", "+\t\t\t\tresult |= HAS_DELTA;", "-\t\t\t\t\thasDelta = true;", "+\t\t\t\t\tresult |= HAS_DELTA;", "-\t\t\t\t\thasDelta = true;", "+\t\t\t\t\tresult |= HAS_DELTA;", "-\t\treturn hasDelta;", "+\t\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b38ee9256b6530a6dd97d57a1efa10c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/ProjectBinaryOutput.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \tpublic void scrubOutput()", "signatureAfterChange": "\r public void scrubOutput()", "diff": ["-\t */\r", "-\tpublic void scrubOutput() {\r", "-\r", "-\t\tIJavaProject projectElement = JavaCore.create(this.project);\r", "-\t\tIClasspathEntry[] entries;\r", "-\t\ttry {\r", "-\t\t\tentries = projectElement.getResolvedClasspath(true);\r", "-\t\t} catch (JavaModelException e) {\r", "-\t\t\tthrow this.dc.internalException(e);\r", "-\t\t}\r", "-\r", "-\t\t/* detect whether the binary ouput coincidates with source folder */\r", "-\t\tboolean flushAllOutput = false;\r", "-\t\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "-\t\t\tIClasspathEntry entry = entries[i];\r", "-\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_SOURCE)) {\r", "-\t\t\t\tif (!this.outputPath.equals(entry.getPath())) {\r", "-\t\t\t\t\tflushAllOutput = true; // output is distinct - flush all\r", "-\t\t\t\t}\r", "-\t\tif (flushAllOutput) {\r", "+ */\r", "+public void scrubOutput() {\r", "+\r", "+\tIJavaProject projectElement = JavaCore.create(this.project);\r", "+\tIClasspathEntry[] entries;\r", "+\ttry {\r", "+\t\tentries = projectElement.getResolvedClasspath(true);\r", "+\t} catch(JavaModelException e){\r", "+\t\tthrow this.dc.internalException(e);\r", "+\t}\r", "+\r", "+\t/* detect whether the binary ouput coincidates with source folder */\r", "+\tboolean flushAllOutput = true;\r", "+\tboolean hasSource = false;\r", "+\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "+\t\tIClasspathEntry entry = entries[i];\r", "+\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_SOURCE)) {\r", "+\t\t\thasSource = true;\r", "+\t\t\tif (this.outputPath.equals(entry.getPath())){\r", "+\t\t\t\tflushAllOutput = false; // output coincidates, cannot flush\r", "+\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\tif (hasSource) {\r", "+\t\tif (flushAllOutput){\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2ab4d3dbd818b36c06970ef61455990", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ExternalFoldersManager.java", "commitBeforeChange": "40eac8059a53961d90f717be2da5fcbf0c755e95", "commitAfterChange": "53bc343588c2b2b6eb1ea59b00d820f1868f0f5f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate HashMap getFolders()", "signatureAfterChange": "  \tprivate HashMap getFolders()", "diff": ["-\t\t\tif (project.isAccessible()) {", "-\t\t\t\ttry {", "-\t\t\t\t\tIResource[] members = project.members();", "-\t\t\t\t\tfor (int i = 0, length = members.length; i < length; i++) {", "-\t\t\t\t\t\tIResource member = members[i];", "-\t\t\t\t\t\tif (member.getType() == IResource.FOLDER && member.isLinked() && member.getName().startsWith(LINKED_FOLDER_NAME)) {", "-\t\t\t\t\t\t\tIPath externalFolderPath = member.getLocation();", "-\t\t\t\t\t\t\tthis.folders.put(externalFolderPath, member);", "-\t\t\t\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tif (!project.isAccessible()) {", "+\t\t\t\t\tif (project.exists()) {", "+\t\t\t\t\t\t// workspace was moved (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=252571 )", "+\t\t\t\t\t\topenExternalFoldersProject(project, null/*no progress*/);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// if project doesn't exist, do not open and recreate it as it means that there are no external folders", "+\t\t\t\t\t\treturn this.folders;", "-\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\tUtil.log(e, \"Exception while initializing external folders\"); //$NON-NLS-1$", "+\t\t\t\tIResource[] members = project.members();", "+\t\t\t\tfor (int i = 0, length = members.length; i < length; i++) {", "+\t\t\t\t\tIResource member = members[i];", "+\t\t\t\t\tif (member.getType() == IResource.FOLDER && member.isLinked() && member.getName().startsWith(LINKED_FOLDER_NAME)) {", "+\t\t\t\t\t\tIPath externalFolderPath = member.getLocation();", "+\t\t\t\t\t\tthis.folders.put(externalFolderPath, member);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\tUtil.log(e, \"Exception while initializing external folders\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "feec56b87252f0d1d2beb3c1b123a63c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "b4f87915b858b8e38e418046984ece5dc8db6148", "commitAfterChange": "4b0e968ea18c9b6d539f97894bc6451b0df31a4f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate void addDependentProjects(IPath projectPath, HashSet result)", "signatureAfterChange": " \tprivate void addDependentProjects(IPath projectPath, HashSet result)", "diff": ["+\t\tIJavaProject[] projects = null;", "-\t\t\tIJavaProject[] projects = this.manager.getJavaModel().getJavaProjects();", "-\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\t\tIJavaProject project = projects[i];", "-\t\t\t\tIClasspathEntry[] classpath = ((JavaProject)project).getExpandedClasspath(true);", "-\t\t\t\tfor (int j = 0, length2 = classpath.length; j < length2; j++) {", "-\t\t\t\t\tIClasspathEntry entry = classpath[j];", "-\t\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT", "-\t\t\t\t\t\t\t\t&& entry.getPath().equals(projectPath)) {", "-\t\t\t\t\t\t\tresult.add(project);", "-\t\t\t\t\t\t}", "+\t\t\tprojects = this.manager.getJavaModel().getJavaProjects();", "+\t\t} catch (JavaModelException e) {", "+\t\t\t// java model doesn't exist", "+\t\t\treturn;", "+\t\t}", "+\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\tIJavaProject project = projects[i];", "+\t\t\tIClasspathEntry[] classpath = null;", "+\t\t\ttry {", "+\t\t\t\tclasspath = ((JavaProject)project).getExpandedClasspath(true);", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// project doesn't exist: continue with next project", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\tfor (int j = 0, length2 = classpath.length; j < length2; j++) {", "+\t\t\t\tIClasspathEntry entry = classpath[j];", "+\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT", "+\t\t\t\t\t\t\t&& entry.getPath().equals(projectPath)) {", "+\t\t\t\t\t\tresult.add(project);", "-\t\t} catch (JavaModelException e) {", "-\t\t}", "+\t\t\t}"]}], "num": 51894}
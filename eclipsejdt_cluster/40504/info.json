{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a435f55d556cc414b411a256b5a36f7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e30efa9b687dcb52cc5842c6196a880", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java", "commitBeforeChange": "73c0b0b740cb64c7be657afbb9bc34e48a20047c", "commitAfterChange": "779e2b28fa6a74758838c96d9e99e9834fa3cd9a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newElements, ArrayList childrenHandles, ArrayList typeParameterHandles)", "signatureAfterChange": " private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newElements, ArrayList childrenHandles, ArrayList typeParameterHandles)", "diff": ["-\t\tfor (int j = 0; j < max; j++) {", "-\t\t\tIBinaryAnnotation[] parameterAnnotations = methodInfo.getParameterAnnotations(j);", "+\t\tint startIndex = 0;", "+\t\ttry {", "+\t\t\tif (isConstructor) {", "+\t\t\t\tif (type.isEnum()) {", "+\t\t\t\t\tstartIndex = 2;", "+\t\t\t\t} else if (type.isMember()", "+\t\t\t\t\t\t&& !Flags.isStatic(type.getFlags())) {", "+\t\t\t\t\tstartIndex = 1;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch(JavaModelException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\tfor (int j = startIndex; j < max; j++) {", "+\t\t\tIBinaryAnnotation[] parameterAnnotations = methodInfo.getParameterAnnotations(j - startIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "191c52afecac4f7a992c603d69d3f056", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java", "commitBeforeChange": "b03089beba6b009ef7cb1955138705446e620cd8", "commitAfterChange": "d9195349320cdcd84c669156fad022fb7f169939", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newElements, ArrayList childrenHandles, ArrayList typeParameterHandles)", "signatureAfterChange": " private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newElements, ArrayList childrenHandles, ArrayList typeParameterHandles)", "diff": ["-\t\tfor (int j = 0; j < max; j++) {", "-\t\t\tIBinaryAnnotation[] parameterAnnotations = methodInfo.getParameterAnnotations(j);", "+\t\tint startIndex = 0;", "+\t\ttry {", "+\t\t\tif (isConstructor) {", "+\t\t\t\tif (type.isEnum()) {", "+\t\t\t\t\tstartIndex = 2;", "+\t\t\t\t} else if (type.isMember()", "+\t\t\t\t\t\t&& !Flags.isStatic(type.getFlags())) {", "+\t\t\t\t\tstartIndex = 1;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch(JavaModelException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\tfor (int j = startIndex; j < max; j++) {", "+\t\t\tIBinaryAnnotation[] parameterAnnotations = methodInfo.getParameterAnnotations(j - startIndex);"]}], "num": 40504}
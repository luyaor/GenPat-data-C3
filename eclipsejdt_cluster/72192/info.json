{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0abeb78007d6024e0e133073d3fbc9fe", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a79735843371e0506fd427c9b28034e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "820e796a655cc430ae4ae3cd649830ad2aa11511", "commitAfterChange": "15e62f7752b5ba1cd51b3fafb5a3b0c9d1ba5891", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void testGetThrownExceptionTypes()", "signatureAfterChange": " public void testGetThrownExceptionTypes()", "diff": ["-\tmethodSig = \"<X:Qlist<Qstring;>;>(Qstring;Qobject;I)IQexception;Qerror;\";", "+\tmethodSig = \"<X:Qlist<Qstring;>;>(Qstring;Qobject;I)I^Qexception;^Qerror;\";", "-\tmethodSig = \"<X:Qlist<Qstring;>;>(Qlist<Qstring;>;)Qlist<Qxxx;>;Qexception<TT;>;Qerror;\";", "+\tmethodSig = \"<X:Qlist<Qstring;>;>(Qlist<Qstring;>;)Qlist<Qxxx;>;^Qexception<TT;>;^Qerror;\";", "+\t", "+\tmethodSig = \"<T:Ljava/lang/Exception;>()V^TT;\";", "+\tassertStringsEqual(\"Signature#getThrownExceptionTypes is not correct3\", \"TT;\\n\",", "+\t\t\tSignature.getThrownExceptionTypes(methodSig));", "+\tmethodSig = \"<T:Ljava/lang/Exception;>()V^TT;^Ljava/lang/Exception;\";", "+\tassertStringsEqual(\"Signature#getThrownExceptionTypes is not correct3\", \"TT;\\nLjava/lang/Exception;\\n\",", "+\t\t\tSignature.getThrownExceptionTypes(methodSig));", "+\t", "+\ttry {", "+\t\tSignature.getThrownExceptionTypes(\"<T:Ljava/lang/Exception;>()VTT;\");", "+\t\tassertTrue(\"Signature#getThrownExceptionTypes is not correct: exception\", false);", "+\t} catch (IllegalArgumentException iae) {", "+\t\t// do nothing", "+\t}", "+\t", "+\ttry {", "+\t\tSignature.getThrownExceptionTypes(\"<T:Ljava/lang/Exception;>()V^TT;Ljava/lang/Exception;\");", "+\t\tassertTrue(\"Signature#getThrownExceptionTypes is not correct: exception\", false);", "+\t} catch (IllegalArgumentException iae) {}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4baabda9d05ca13c8720430c93140c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "9506ae8fe4d60e3a32e2b276be442609d9dc9308", "commitAfterChange": "c1dc1d2bc5993046e3d691c95b58812d1c93dfb9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void testGetParameterCount()", "signatureAfterChange": " public void testGetParameterCount()", "diff": ["-\ttry {", "-\t\tSignature.getParameterCount(\"foo(LA<++Ljava.lang.Comparable;>;)\");", "-\t\tassertTrue(\"Signature#getParameterCount is not correct: exception\", false);", "-\t} catch (IllegalArgumentException iae) {", "-\t\t// do nothing", "-\t}", "+\t", "+\tmethodSig= \"foo(LA<++Ljava.lang.Comparable;>;)\";", "+\tassertEquals(\"Signature#getParameterCount is not correct14\", 1,", "+\t\tSignature.getParameterCount(methodSig));", "-\ttry {", "-\t\tSignature.getParameterCount(\"foo(LA<--Ljava.lang.Comparable;>;)\");", "-\t\tassertTrue(\"Signature#getParameterCount is not correct: exception\", false);", "-\t} catch (IllegalArgumentException iae) {", "-\t\t// do nothing", "-\t}", "+\tmethodSig= \"foo(LA<--Ljava.lang.Comparable;>;)\";", "+\tassertEquals(\"Signature#getParameterCount is not correct14\", 1,", "+\t\tSignature.getParameterCount(methodSig));", "-\ttry {", "-\t\tSignature.getParameterCount(\"foo(LA<+-Ljava.lang.Comparable;>;)\");", "-\t\tassertTrue(\"Signature#getParameterCount is not correct: exception\", false);", "-\t} catch (IllegalArgumentException iae) {", "-\t\t// do nothing", "-\t}", "+\tmethodSig= \"foo(LA<+-Ljava.lang.Comparable;>;)\";", "+\tassertEquals(\"Signature#getParameterCount is not correct14\", 1,", "+\t\tSignature.getParameterCount(methodSig));"]}], "num": 72192}
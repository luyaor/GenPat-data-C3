{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac4890c105d32ae97cf08be94b051f90", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "932bec36f1c87e1850f6a0383a1c49ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "98ff5077500cc7d4399a77f9c1d322d3dbdad499", "commitAfterChange": "0114b817b3783a58a2fe1110992accec45af9e77", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void generatePostIncrement( \tBlockScope currentScope, \tCodeStream codeStream, \tCompoundAssignment postIncrement, \tboolean valueRequired)", "signatureAfterChange": "  public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-public void generatePostIncrement(", "-\tBlockScope currentScope,", "-\tCodeStream codeStream,", "-\tCompoundAssignment postIncrement,", "-\tboolean valueRequired) {", "-", "+public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired) {", "-\tSyntheticMethodBinding accessor =", "-\t\tthis.syntheticReadAccessors == null", "+\tSyntheticMethodBinding accessor = this.syntheticReadAccessors == null", "+\tTypeBinding requiredGenericCast = getGenericCast(this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length);", "+\tTypeBinding operandType;", "+\tif (requiredGenericCast != null) {", "+\t\tcodeStream.checkcast(requiredGenericCast);", "+\t\toperandType = requiredGenericCast;", "+\t} else {", "+\t\toperandType = lastFieldBinding.type;", "+\t}\t\t", "-\t\t\tif ((lastFieldBinding.type == TypeBinding.LONG)", "-\t\t\t\t|| (lastFieldBinding.type == TypeBinding.DOUBLE)) {", "+\t\t\tif ((operandType == TypeBinding.LONG)", "+\t\t\t\t|| (operandType == TypeBinding.DOUBLE)) {", "-\t\t\tif ((lastFieldBinding.type == TypeBinding.LONG)", "-\t\t\t\t|| (lastFieldBinding.type == TypeBinding.DOUBLE)) {", "+\t\t\tif ((operandType == TypeBinding.LONG)", "+\t\t\t\t|| (operandType == TypeBinding.DOUBLE)) {", "-\tTypeBinding requiredGenericCast = getGenericCast(this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length);", "-\tif (requiredGenericCast != null) codeStream.checkcast(requiredGenericCast);", "-", "-\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\tcodeStream.generateImplicitConversion(this.implicitConversion);\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c30c86cc1490ac6a3a1c76ad9d1d1641", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "98ff5077500cc7d4399a77f9c1d322d3dbdad499", "commitAfterChange": "0114b817b3783a58a2fe1110992accec45af9e77", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": "  public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["+\t\t\tTypeBinding operandType;", "+\t\t\tif (this.genericCast != null) {", "+\t\t\t\tcodeStream.checkcast(this.genericCast);", "+\t\t\t\toperandType = this.genericCast;", "+\t\t\t} else {", "+\t\t\t\toperandType = fieldBinding.type;", "+\t\t\t}", "-\t\t\t\t\tif ((fieldBinding.type == TypeBinding.LONG) || (fieldBinding.type == TypeBinding.DOUBLE)) {", "+\t\t\t\t\tif ((operandType == TypeBinding.LONG) || (operandType == TypeBinding.DOUBLE)) {", "-\t\t\t\t\tif ((fieldBinding.type == TypeBinding.LONG) || (fieldBinding.type == TypeBinding.DOUBLE)) {", "+\t\t\t\t\tif ((operandType == TypeBinding.LONG) || (operandType == TypeBinding.DOUBLE)) {", "-\t\t\tif (this.genericCast != null)", "-\t\t\t\tcodeStream.checkcast(this.genericCast);", "-\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);\t\t", "-\t\t\t// no need for generic cast", "+\t\t\t// no need for generic cast ", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8fd61c8510296fa87ead97052e52936", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "98ff5077500cc7d4399a77f9c1d322d3dbdad499", "commitAfterChange": "0114b817b3783a58a2fe1110992accec45af9e77", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": "  public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["+\tTypeBinding operandType;", "+\tif (this.genericCast != null) {", "+\t\tcodeStream.checkcast(this.genericCast);", "+\t\toperandType = this.genericCast;", "+\t} else {", "+\t\toperandType = this.codegenBinding.type;", "+\t}\t", "-\t\t\tif ((this.codegenBinding.type == TypeBinding.LONG)", "-\t\t\t\t|| (this.codegenBinding.type == TypeBinding.DOUBLE)) {", "+\t\t\tif ((operandType == TypeBinding.LONG)", "+\t\t\t\t|| (operandType == TypeBinding.DOUBLE)) {", "-\t\t\tif ((this.codegenBinding.type == TypeBinding.LONG)", "-\t\t\t\t|| (this.codegenBinding.type == TypeBinding.DOUBLE)) {", "+\t\t\tif ((operandType == TypeBinding.LONG)", "+\t\t\t\t|| (operandType == TypeBinding.DOUBLE)) {", "-\tif (this.genericCast != null)", "-\t\tcodeStream.checkcast(this.genericCast);", "-\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\tcodeStream.generateImplicitConversion(this.implicitConversion);\t\t"]}], "num": 40240}
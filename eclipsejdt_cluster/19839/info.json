{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba45aea8fb2ba46113852cbb1e0da093", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d56d5f112ff903fc50f7cc4788e1d77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall)", "signatureAfterChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall)", "diff": ["-\t\t\tthis.requestor", "-\t\t\t\t.acceptField(", "-\t\t\t\t\tfield.declaringClass.qualifiedPackageName(),", "-\t\t\t\t\tfield.declaringClass.qualifiedSourceName(),", "-\t\t\t\t\tfield.name,", "-\t\t\t\t\tfield.type.qualifiedPackageName(),", "-\t\t\t\t\tfield.type.qualifiedSourceName(),", "-\t\t\t\t\tcompletion,", "-\t\t\t// may include some qualification to resolve ambiguities", "-\t\t\tfield.modifiers, this.startPosition - this.offset, this.endPosition - this.offset,", "-\t\t\trelevance);", "+\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF, this.actualCompletionPosition);", "+\t\t\t\tproposal.setDeclarationSignature(getSignature(field.declaringClass));", "+\t\t\t\tproposal.setSignature(getSignature(field.type));", "+\t\t\t\tproposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "+\t\t\t\tproposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "+\t\t\t\tproposal.setPackageName(field.type.qualifiedPackageName());", "+\t\t\t\tproposal.setTypeName(field.type.qualifiedSourceName()); ", "+\t\t\t\tproposal.setName(field.name);", "+\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\tproposal.setFlags(field.modifiers);", "+\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\tif(DEBUG) {", "+\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "203a4df8c4ad50e65fb9176a61693b5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "  \tprivate void findVariablesAndMethods( \t\tchar[] token, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope)", "signatureAfterChange": "  \tprivate void findVariablesAndMethods( \t\tchar[] token, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope)", "diff": ["-\t\t\t\t\t\tthis.requestor.acceptLocalVariable(", "-\t\t\t\t\t\t\tlocal.name,", "-\t\t\t\t\t\t\tlocal.type == null ", "-\t\t\t\t\t\t\t\t? CharOperation.NO_CHAR", "-\t\t\t\t\t\t\t\t: local.type.qualifiedPackageName(),", "-\t\t\t\t\t\t\tlocal.type == null", "-\t\t\t\t\t\t\t\t? local.declaration.type.toString().toCharArray()", "-\t\t\t\t\t\t\t\t: local.type.qualifiedSourceName(),", "-\t\t\t\t\t\t\tlocal.modifiers,", "-\t\t\t\t\t\t\tthis.startPosition - this.offset,", "-\t\t\t\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.LOCAL_VARIABLE_REF)) {", "+\t\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.LOCAL_VARIABLE_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\t\tproposal.setSignature(", "+\t\t\t\t\t\t\t\tlocal.type == null", "+\t\t\t\t\t\t\t\t? createTypeSignature(", "+\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR,", "+\t\t\t\t\t\t\t\t\t\tlocal.declaration.type.toString().toCharArray())", "+\t\t\t\t\t\t\t\t: getSignature(local.type));", "+\t\t\t\t\t\t\tif(local.type == null) {", "+\t\t\t\t\t\t\t\t//proposal.setPackageName(null);", "+\t\t\t\t\t\t\t\tproposal.setTypeName(local.declaration.type.toString().toCharArray());", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tproposal.setPackageName(local.type.qualifiedPackageName());", "+\t\t\t\t\t\t\t\tproposal.setTypeName(local.type.qualifiedSourceName());", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tproposal.setName(local.name);", "+\t\t\t\t\t\t\tproposal.setCompletion(local.name);", "+\t\t\t\t\t\t\tproposal.setFlags(local.modifiers);", "+\t\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37d5f98098ffdf36850af3c44a8900d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": " \t \tprivate void proposeNewMethod(char[] token, ReferenceBinding reference)", "signatureAfterChange": " \t \tprivate void proposeNewMethod(char[] token, ReferenceBinding reference)", "diff": ["+\t\tint relevance = computeBaseRelevance();", "+\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\tif(this.requestor instanceof IExtendedCompletionRequestor) {", "-\t\t\tIExtendedCompletionRequestor extendedRequestor = (IExtendedCompletionRequestor) this.requestor;", "-\t\t\t", "-\t\t\tint relevance = computeBaseRelevance();", "-\t\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\t\t", "-\t\t\textendedRequestor.acceptPotentialMethodDeclaration(", "-\t\t\t\t\treference.qualifiedPackageName(),", "-\t\t\t\t\treference.qualifiedSourceName(),", "-\t\t\t\t\ttoken,", "-\t\t\t\t\tthis.startPosition - this.offset,", "-\t\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\t\trelevance);", "+\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.POTENTIAL_METHOD_DECLARATION, this.actualCompletionPosition);", "+\t\tproposal.setDeclarationSignature(getSignature(reference));", "+\t\tproposal.setSignature(", "+\t\t\t\tcreateMethodSignature(", "+\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\tCharOperation.NO_CHAR,", "+\t\t\t\t\t\tVOID));", "+\t\tproposal.setDeclarationPackageName(reference.qualifiedPackageName());", "+\t\tproposal.setDeclarationTypeName(reference.qualifiedSourceName());", "+\t\t", "+\t\t//proposal.setPackageName(null);", "+\t\tproposal.setTypeName(VOID);", "+\t\tproposal.setName(token);", "+\t\t//proposal.setParameterPackageNames(null);", "+\t\t//proposal.setParameterTypeNames(null);", "+\t\t//proposal.setPackageName(null);", "+\t\tproposal.setCompletion(token);", "+\t\tproposal.setFlags(Flags.AccPublic);", "+\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\tproposal.setRelevance(relevance);", "+\t\tthis.requestor.accept(proposal);", "+\t\tif(DEBUG) {", "+\t\t\tthis.printDebug(proposal);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9eaa1bb7d0d6b26967c852e369456368", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "signatureAfterChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "diff": ["-\t\t\tthis.requestor.acceptMethod(", "-\t\t\t\tmethod.declaringClass.qualifiedPackageName(),", "-\t\t\t\tmethod.declaringClass.qualifiedSourceName(),", "-\t\t\t\tmethod.selector,", "-\t\t\t\tparameterPackageNames,", "-\t\t\t\tparameterTypeNames,", "-\t\t\t\tparameterNames,", "-\t\t\t\tmethod.returnType.qualifiedPackageName(),", "-\t\t\t\tmethod.returnType.qualifiedSourceName(),", "-\t\t\t\tcompletion,", "-\t\t\t\tmethod.modifiers,", "-\t\t\t\tthis.startPosition - this.offset,", "-\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\trelevance);", "+\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_REF, this.actualCompletionPosition);", "+\t\t\t\tproposal.setDeclarationSignature(getSignature(method.declaringClass));", "+\t\t\t\tproposal.setSignature(getSignature(method));", "+\t\t\t\tproposal.setDeclarationPackageName(method.declaringClass.qualifiedPackageName());", "+\t\t\t\tproposal.setDeclarationTypeName(method.declaringClass.qualifiedSourceName());", "+\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\tproposal.setPackageName(method.returnType.qualifiedPackageName());", "+\t\t\t\tproposal.setTypeName(method.returnType.qualifiedSourceName());", "+\t\t\t\tproposal.setName(method.selector);", "+\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\tproposal.setFlags(method.modifiers);", "+\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "+\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\tif(DEBUG) {", "+\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab113c71a83ab183be7b9f32014924bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tprivate void findClassField(char[] token, TypeBinding receiverType, Scope scope)", "signatureAfterChange": "  \tprivate void findClassField(char[] token, TypeBinding receiverType, Scope scope)", "diff": ["-\t\t\tthis.requestor.acceptField(", "-\t\t\t\tCharOperation.NO_CHAR,", "-\t\t\t\tCharOperation.NO_CHAR,", "-\t\t\t\tclassField,", "-\t\t\t\tCharOperation.NO_CHAR,", "-\t\t\t\tCharOperation.NO_CHAR,", "-\t\t\t\tclassField,", "-\t\t\t\tIConstants.AccStatic | IConstants.AccPublic,", "-\t\t\t\tthis.startPosition - this.offset,", "-\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\trelevance);", "+\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF, this.actualCompletionPosition);", "+\t\t\t\t//proposal.setDeclarationSignature(null);", "+\t\t\t\tproposal.setSignature(", "+\t\t\t\t\t\tcreateNonGenericTypeSignature(", "+\t\t\t\t\t\t\t\tCharOperation.concatWith(JAVA_LANG, '.'),", "+\t\t\t\t\t\t\t\tCLASS));", "+\t\t\t\t//proposal.setDeclarationPackageName(null);", "+\t\t\t\t//proposal.setDeclarationTypeName(null);", "+\t\t\t\tproposal.setPackageName(CharOperation.concatWith(JAVA_LANG, '.'));", "+\t\t\t\tproposal.setTypeName(CLASS);", "+\t\t\t\tproposal.setName(classField);", "+\t\t\t\tproposal.setCompletion(classField);", "+\t\t\t\tproposal.setFlags(Flags.AccStatic | Flags.AccPublic);", "+\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\tif(DEBUG) {", "+\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf446f79264f68fc341c04097ebf9fc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate void findExplicitConstructors( \t\tchar[] name, \t\tReferenceBinding currentType, \t\tMethodScope scope, \t\tInvocationSite invocationSite)", "signatureAfterChange": "  \tprivate void findExplicitConstructors( \t\tchar[] name, \t\tReferenceBinding currentType, \t\tMethodScope scope, \t\tInvocationSite invocationSite)", "diff": ["-\t\t\t\t\tthis.requestor.acceptMethod(", "-\t\t\t\t\t\tcurrentType.qualifiedPackageName(),", "-\t\t\t\t\t\tcurrentType.qualifiedSourceName(),", "-\t\t\t\t\t\tname,", "-\t\t\t\t\t\tparameterPackageNames,", "-\t\t\t\t\t\tparameterTypeNames,", "-\t\t\t\t\t\tparameterNames,", "-\t\t\t\t\t\tCharOperation.NO_CHAR,", "-\t\t\t\t\t\tCharOperation.NO_CHAR,", "-\t\t\t\t\t\tcompletion,", "-\t\t\t\t\t\tconstructor.modifiers,", "-\t\t\t\t\t\tthis.startPosition - this.offset,", "-\t\t\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\t\t\trelevance);", "+\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(currentType));", "+\t\t\t\t\t\tproposal.setSignature(getSignature(constructor));", "+\t\t\t\t\t\tproposal.setDeclarationPackageName(currentType.qualifiedPackageName());", "+\t\t\t\t\t\tproposal.setDeclarationTypeName(currentType.qualifiedSourceName());", "+\t\t\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\t\t\t//proposal.setPackageName(null);", "+\t\t\t\t\t\t//proposal.setTypeName(null);", "+\t\t\t\t\t\tproposal.setName(name);", "+\t\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\t\tproposal.setFlags(constructor.modifiers);", "+\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "+\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed227793ca5b78c3b1be970baf2dcfc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tprivate void findAnonymousType( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \t \tprivate void findAnonymousType( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite)", "diff": ["-\t\t\tthis.requestor.acceptAnonymousType(", "-\t\t\t\tcurrentType.qualifiedPackageName(),", "-\t\t\t\tcurrentType.qualifiedSourceName(),", "-\t\t\t\tCharOperation.NO_CHAR_CHAR,", "-\t\t\t\tCharOperation.NO_CHAR_CHAR,", "-\t\t\t\tCharOperation.NO_CHAR_CHAR,", "-\t\t\t\tcompletion,", "-\t\t\t\tIConstants.AccPublic,", "-\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\trelevance);", "+\t\t\tif(!this.requestor.isIgnored(CompletionProposal.ANONYMOUS_CLASS_DECLARATION)) {", "+\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.ANONYMOUS_CLASS_DECLARATION, this.actualCompletionPosition);", "+\t\t\t\tproposal.setDeclarationSignature(getSignature(currentType));", "+\t\t\t\tproposal.setSignature(", "+\t\t\t\t\t\tcreateMethodSignature(", "+\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\tCharOperation.NO_CHAR,", "+\t\t\t\t\t\t\t\tCharOperation.NO_CHAR));", "+\t\t\t\tproposal.setDeclarationPackageName(currentType.qualifiedPackageName());", "+\t\t\t\tproposal.setDeclarationTypeName(currentType.qualifiedSourceName());", "+\t\t\t\t//proposal.setParameterPackageNames(null);", "+\t\t\t\t//proposal.setParameterTypeNames(null);", "+\t\t\t\t//proposal.setPackageName(null);", "+\t\t\t\t//proposal.setTypeName(null);", "+\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\tproposal.setFlags(Flags.AccPublic);", "+\t\t\t\tproposal.setReplaceRange(this.endPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\tif(DEBUG) {", "+\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa64700d7b998fe9347ffd636fd7b07d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tprivate void findLocalMethodDeclarations( \t\tchar[] methodName, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType)", "signatureAfterChange": " \tprivate void findLocalMethodDeclarations( \t\tchar[] methodName, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType)", "diff": ["-\t\t\tthis.requestor.acceptMethodDeclaration(", "-\t\t\t\tmethod.declaringClass.qualifiedPackageName(),", "-\t\t\t\tmethod.declaringClass.qualifiedSourceName(),", "-\t\t\t\tmethod.selector,", "-\t\t\t\tparameterPackageNames,", "-\t\t\t\tparameterTypeNames,", "-\t\t\t\tparameterNames,", "-\t\t\t\tmethod.returnType.qualifiedPackageName(),", "-\t\t\t\tmethod.returnType.qualifiedSourceName(),", "-\t\t\t\tcompletion.toString().toCharArray(),", "-\t\t\t\tmethod.modifiers,", "-\t\t\t\tthis.startPosition - this.offset,", "-\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\trelevance);", "+\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_DECLARATION)) {", "+\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_DECLARATION, this.actualCompletionPosition);", "+\t\t\t\tproposal.setDeclarationSignature(getSignature(method.declaringClass));", "+\t\t\t\tproposal.setSignature(getSignature(method));", "+\t\t\t\tproposal.setDeclarationPackageName(method.declaringClass.qualifiedPackageName());", "+\t\t\t\tproposal.setDeclarationTypeName(method.declaringClass.qualifiedSourceName());", "+\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\tproposal.setPackageName(method.returnType.qualifiedPackageName());", "+\t\t\t\tproposal.setTypeName(method.returnType.qualifiedSourceName());", "+\t\t\t\tproposal.setCompletion(completion.toString().toCharArray());", "+\t\t\t\tproposal.setName(method.selector);", "+\t\t\t\tproposal.setFlags(method.modifiers);", "+\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "+\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\tif(DEBUG) {", "+\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 19839}
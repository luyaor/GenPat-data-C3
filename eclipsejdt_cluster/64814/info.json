{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad3947e4088090e46a697b41ac463948", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc28a5ef0b1e3de907d7c4f5cfdb315", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "d7bf97b0906e6821b36f900e536d18f1ccdddff2", "commitAfterChange": "dd10489904dda11a1b9c522a71a4705b9646605e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType)", "signatureAfterChange": " \t \tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType, Scope scope)", "diff": ["-\tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType) {", "+\tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType, Scope scope) {", "-\t\t\tthis.originalValueIfTrueType = this.valueIfTrue.checkAgainstFinalTargetType(targetType);", "-\t\t\tthis.originalValueIfFalseType = this.valueIfFalse.checkAgainstFinalTargetType(targetType);", "+\t\t\tthis.originalValueIfTrueType = this.valueIfTrue.checkAgainstFinalTargetType(targetType, scope);", "+\t\t\tthis.originalValueIfFalseType = this.valueIfFalse.checkAgainstFinalTargetType(targetType, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1de4ca6f43c1acb2fb480ef794ba20e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType, Scope scope)", "signatureAfterChange": " \t \tpublic boolean isPertinentToApplicability(TypeVariableBinding typeVariable, MethodBinding method)", "diff": ["-\tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType, Scope scope) {", "-\t\t// in 1.8 if treated as a poly expression:", "-\t\tif (isPolyExpression()) {", "-\t\t\ttargetType = targetType.uncapture(this.polyExpressionScope);", "-\t\t\tthis.originalValueIfTrueType = this.valueIfTrue.checkAgainstFinalTargetType(targetType, scope);", "-\t\t\tthis.originalValueIfFalseType = this.valueIfFalse.checkAgainstFinalTargetType(targetType, scope);", "-\t\t\tcomputeConversions(this.polyExpressionScope, targetType);", "-\t\t\tthis.resolvedType = targetType;", "-\t\t}", "-\t\treturn this.resolvedType;", "+\tpublic boolean isPertinentToApplicability(TypeVariableBinding typeVariable, MethodBinding method) {", "+\t\treturn this.valueIfTrue.isPertinentToApplicability(typeVariable, method) ", "+\t\t\t\t&& this.valueIfFalse.isPertinentToApplicability(typeVariable, method); // not perfect."]}], "num": 64814}
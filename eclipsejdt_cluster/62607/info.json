{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0cc7f183e6a724868e9bfa3f72b5afe1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "523c835d906845b03693cdaec5ea1a51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FakedTrackingVariable.java", "commitBeforeChange": "60105dfcc44d74dc319b1919727afc1b3907fff9", "commitAfterChange": "0747d5e7c6159c917fde8175fc9c67a8bade55fc", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic static FakedTrackingVariable pickVarForReporting(Set varsOfScope, BlockScope scope, boolean atExit)", "signatureAfterChange": "  \t\tpublic IteratorForReporting(List<FakedTrackingVariable> variables, Scope scope, boolean atExit)", "diff": ["-\tpublic static FakedTrackingVariable pickVarForReporting(Set varsOfScope, BlockScope scope, boolean atExit) {", "-\t\tif (varsOfScope.isEmpty()) return null;", "-\t\tFakedTrackingVariable trackingVar = (FakedTrackingVariable) varsOfScope.iterator().next();", "-\t\twhile (trackingVar.outerTracker != null) {", "-\t\t\t// resource is wrapped, is wrapper defined in this scope?", "-\t\t\tif (varsOfScope.contains(trackingVar.outerTracker)) {", "-\t\t\t\t// resource from same scope, travel up the wrapper chain", "-\t\t\t\ttrackingVar = trackingVar.outerTracker;", "-\t\t\t} else if (atExit) {", "-\t\t\t\t// at an exit point we report against inner despite a wrapper that may/may not be closed later", "-\t\t\t\tbreak;", "-\t\t\t} else {", "-\t\t\t\tBlockScope outerTrackerScope = trackingVar.outerTracker.binding.declaringScope;", "-\t\t\t\tif (outerTrackerScope == scope) {", "-\t\t\t\t\t// outerTracker is from same scope and already processed -> pick trackingVar now", "-\t\t\t\t\tbreak;", "-\t\t\t\t} else {", "-\t\t\t\t\t// outer resource is from other (outer?) scope", "-\t\t\t\t\tScope currentScope = scope;", "-\t\t\t\t\twhile ((currentScope = currentScope.parent) instanceof BlockScope) {", "-\t\t\t\t\t\tif (outerTrackerScope == currentScope) {", "-\t\t\t\t\t\t\t// at end of block pass responsibility for inner resource to outer scope holding a wrapper", "-\t\t\t\t\t\t\tvarsOfScope.remove(trackingVar); // drop this one", "-\t\t\t\t\t\t\t// pick a next candidate:", "-\t\t\t\t\t\t\treturn pickVarForReporting(varsOfScope, scope, atExit);", "+", "+\t\tpublic IteratorForReporting(List<FakedTrackingVariable> variables, Scope scope, boolean atExit) {", "+\t\t\tthis.varSet = new HashSet<>(variables);", "+\t\t\tthis.scope = scope;", "+\t\t\tthis.atExit = atExit;", "+\t\t\tsetUpForStage(Stage.OuterLess);", "+\t\t}", "-\t\t\t\t\tbreak; // not parent owned -> pick this var", "-\t\t\t\t}", "-\t\tvarsOfScope.remove(trackingVar);", "-\t\treturn trackingVar;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d98adc87be06f11d57367eecad6ee44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java", "commitBeforeChange": "7cbfac0f262651a92552aa1b245acf5ef1db3bb0", "commitAfterChange": "b6e21c793f3617f9c60f843e02a0537d5bd09d93", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \t@Override \tpublic List<? extends VariableElement> getParameters()", "signatureAfterChange": "  \t@Override \tpublic List<? extends VariableElement> getParameters()", "diff": ["-\t\t\t\tboolean isEnumConstructor = binding.isConstructor()", "-\t\t\t\t\t\t&& binding.declaringClass.isEnum()", "-\t\t\t\t\t\t&& binding.declaringClass.isBinaryBinding()", "-\t\t\t\t\t\t&& ((binding.modifiers & ExtraCompilerModifiers.AccGenericSignature) == 0);", "-\t\t\t\tif (isEnumConstructor) {", "-\t\t\t\t\tif (length == 2) {", "-\t\t\t\t\t\t// the two arguments are only the two synthetic arguments", "-\t\t\t\t\t\treturn Collections.emptyList();", "-\t\t\t\t\t}", "-\t\t\t\t\tfor (int i = 2; i < length; i++) {", "-\t\t\t\t\t\tTypeBinding typeBinding = binding.parameters[i];", "-\t\t\t\t\t\tStringBuilder builder = new StringBuilder(\"arg\");//$NON-NLS-1$", "-\t\t\t\t\t\tbuilder.append(i - 2);", "-\t\t\t\t\t\tVariableElement param = new VariableElementImpl(_env,", "-\t\t\t\t\t\t\t\tnew AptBinaryLocalVariableBinding(", "-\t\t\t\t\t\t\t\t\t\tString.valueOf(builder).toCharArray(),", "-\t\t\t\t\t\t\t\t\t\ttypeBinding,", "-\t\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\t\tnull,", "-\t\t\t\t\t\t\t\t\t\tbinding));", "-\t\t\t\t\t\tparams.add(param);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tint i = 0;", "-\t\t\t\t\tfor (TypeBinding typeBinding : binding.parameters) {", "-\t\t\t\t\t\tStringBuilder builder = new StringBuilder(\"arg\");//$NON-NLS-1$", "+\t\t\t\tint i = 0;", "+\t\t\t\tfor (TypeBinding typeBinding : binding.parameters) {", "+\t\t\t\t\tchar name[] = binding.parameterNames.length > i ? binding.parameterNames[i] : null;", "+\t\t\t\t\tif (name == null) {", "+ \t\t\t\t\t\tStringBuilder builder = new StringBuilder(\"arg\");//$NON-NLS-1$", "-\t\t\t\t\t\tVariableElement param = new VariableElementImpl(_env,", "-\t\t\t\t\t\t\t\tnew AptBinaryLocalVariableBinding(", "-\t\t\t\t\t\t\t\t\t\tString.valueOf(builder).toCharArray(),", "-\t\t\t\t\t\t\t\t\t\ttypeBinding,", "-\t\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\t\tparameterAnnotationBindings != null ? parameterAnnotationBindings[i] : null,", "-\t\t\t\t\t\t\t\t\t\tbinding));", "-\t\t\t\t\t\tparams.add(param);", "-\t\t\t\t\t\ti++;", "+\t\t\t\t\t\tname = String.valueOf(builder).toCharArray();", "+\t\t\t\t\tVariableElement param = new VariableElementImpl(_env,", "+\t\t\t\t\t\t\tnew AptBinaryLocalVariableBinding(", "+\t\t\t\t\t\t\t\t\tname,", "+\t\t\t\t\t\t\t\t\ttypeBinding,", "+\t\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t\tparameterAnnotationBindings != null ? parameterAnnotationBindings[i] : null,", "+\t\t\t\t\t\t\t\t\tbinding));", "+\t\t\t\t\tparams.add(param);", "+\t\t\t\t\ti++;"]}], "num": 62607}
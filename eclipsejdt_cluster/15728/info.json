{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80086ec0a8534814fe6c3e1392b1d0c4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "329ba83dc961c082cf62d2bf25ece625", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "32182d99a9e4095a7eee846288e3e10ca04721a2", "commitAfterChange": "e6a111ff4a8296335842f49d9f6c646a663e39a2", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 110, "signatureBeforeChange": " \tpublic void deleteResource(IResource resource) throws CoreException", "signatureAfterChange": " \tpublic void deleteResource(IResource resource) throws CoreException", "diff": ["-\t\t\tif (!org.eclipse.jdt.core.tests.util.Util.delete(resource)) {", "+\t\t\tif (org.eclipse.jdt.core.tests.util.Util.delete(resource)) {", "+\t\t\t\treturn;", "+\t\t\t} else {", "+\t\tthrow new RuntimeException(\"Could not delete \" + resource.getFullPath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34ec6547f8f75bba7644d7c00f33c73b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "e31e89499c545f3404d7787f4d333516631375ec", "commitAfterChange": "0eef8a719c726a9948e73db62c7f81adbce0f319", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  private void addDefaultAbstractMethods()", "signatureAfterChange": "  private void addDefaultAbstractMethods()", "diff": ["+\t", "+\tif (this != this.prototype) throw new IllegalStateException();", "+\t", "-\t\t\t\tSystem.arraycopy(this.methods, 0, this.methods = new MethodBinding[length + defaultAbstractsCount], 0, length);", "+\t\t\t\tSystem.arraycopy(this.methods, 0, setMethods(new MethodBinding[length + defaultAbstractsCount]), 0, length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e2040f23c0b700929fc0d1c9c4fae23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Member.java", "commitBeforeChange": "124193e3171870af04ab9d5ea3aa3b183d5f5130", "commitAfterChange": "0b7ff78692342ed66f3a07e07fcd0a8a72247fee", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public IType getType(String typeName, int count)", "signatureAfterChange": " public IType getType(String typeName, int count)", "diff": ["-\t// TODO (jerome) disable after M6", "-//\tif (isBinary()) {", "-//\t\tthrow new IllegalArgumentException(\"Not a source member \" + toStringWithAncestors()); //$NON-NLS-1$", "-//\t} else {", "+\tif (isBinary()) {", "+\t\tthrow new IllegalArgumentException(\"Not a source member \" + toStringWithAncestors()); //$NON-NLS-1$", "+\t} else {", "-//\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68385e7d5b9f714f87726e0f2b87e645", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "e6e8c555a7d6f504d4ea246c591d5bb3f080d438", "commitAfterChange": "3316f207e855c46fb5e805791239fa37620ca8c4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   DiskIndex(String fileName)", "signatureAfterChange": "   DiskIndex(String fileName)", "diff": ["-\tthis.fileName = fileName;", "+\tif (fileName == null)", "+\t\tthrow new java.lang.IllegalArgumentException();", "+\tthis.indexFile = new File(fileName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a370ea2bbdefa9fb8031322f8ff2e1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKey.java", "commitBeforeChange": "729d195ede25ca6ee5a445494cda26bf5f4b94a7", "commitAfterChange": "9e025388268143d227b16d19d468b4e4bff0d580", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t Binding getCompilerBinding(CompilationUnitResolver resolver)", "signatureAfterChange": " \t Binding getCompilerBinding(CompilationUnitResolver resolver)", "diff": ["-\t\t\tif (resolver.requestedKeys.containsKey(fileName) || resolver.requestedSources.containsKey(fileName))", "-\t\t\t\tthrow new RuntimeException(\"Key is part of a file that is being requested already\"); //$NON-NLS-1$", "-\t\t\tresolver.process(parsedUnit, resolver.totalUnits+1);", "+\t\t\t// don't resolve a second time the same unit (this would create the same bindingd twice)", "+\t\t\tif (!resolver.requestedKeys.containsKey(fileName) && !resolver.requestedSources.containsKey(fileName))", "+\t\t\t\tresolver.process(parsedUnit, resolver.totalUnits+1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94cfa8f66844aea3c7467563c8355518", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "d252240fefecda6f8aa975ebdcb182953df40821", "commitAfterChange": "30adc5455828e871ab44ff73fd0dcda0c140e3ee", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " public static void zip(File rootDir, String zipPath) throws IOException", "signatureAfterChange": " public static void zip(File rootDir, String zipPath) throws IOException", "diff": ["-        if (zipFile.exists()) delete(zipFile);", "+        if (zipFile.exists() && !delete(zipFile))", "+        \tthrow new IOException(\"Could not delete \" + zipPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95ce28fbd02521811ea2e87075647a62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "d3432881419f057ba041557b162e4f05f5019457", "commitAfterChange": "c978cd9a4b8a047123bdee75ac1f721797bdf05a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  private static void setOutputDir(String dir)", "signatureAfterChange": "  private static void setOutputDir(String dir)", "diff": ["-\tif (NO_COMMENTS || BRACES != null || !JOIN_LINES) {", "+\tif (NO_COMMENTS || BRACES != null || JOIN_LINES != null) {", "-\t\tif (!JOIN_LINES) {", "-\t\t\tOUTPUT_DIR = new File(OUTPUT_DIR, \"never_join_lines\");", "+\t\tif (JOIN_LINES != null) {", "+\t\t\tOUTPUT_DIR = new File(new File(OUTPUT_DIR, \"join_lines\"), JOIN_LINES);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5cb4d3823161120ddfad32aeb6e203a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java", "commitBeforeChange": "54fe6cbc33d3f80c684ffd571c49e220a343a1a8", "commitAfterChange": "40692b2e7bf7aa8c32cd5ed8db2d8a0fe5297d3c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static byte[] getZipEntryByteContent(ZipEntry ze, ZipFile zip) \t\tthrows IOException", "signatureAfterChange": " \tpublic static byte[] getZipEntryByteContent(ZipEntry ze, ZipFile zip) \t\tthrows IOException", "diff": ["+\t\t\tif (stream == null) throw new IOException(\"Invalid zip entry name : \" + ze.getName()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e31493cfda11f6b54c7fc85e81ad0969", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "3b2052c623130c252652dbc4ea1f3e9fec2cb90c", "commitAfterChange": "e2a6d43d6cfc7ae0c6dc6dfaa282461be00cd7e3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName)", "signatureAfterChange": "\r \r private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName)", "diff": ["-\t\tfor (int i = 0, length = initialTypeNames.length; i < length; i++)\r", "-\t\t\tif (qualifiedTypeName.equals(initialTypeNames[i]))\r", "+\t\tfor (int i = 0, length = initialTypeNames.length; i < length; i++) {\r", "+\t\t\tif (qualifiedTypeName.equals(initialTypeNames[i])) {\r", "+\t\t\t\tif (isIncrementalBuild)\r", "+\t\t\t\t\t// catch the case that a type inside a source file has been renamed but other class files are looking for it\r", "+\t\t\t\t\tthrow new AbortCompilation(true, new AbortIncrementalBuildException(qualifiedTypeName));\r", "+\t\t\t}\r", "+\t\t}\r"]}], "num": 15728}
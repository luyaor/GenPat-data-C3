{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "623423f7816031d44c9d6c4c2dc6531a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35538dc8d3109a8921d77e4e35e6a09c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "803ba016f131f4ec30746b0086adac5a909a8608", "commitAfterChange": "795246d8edc252b417c1fce229af2991829481c9", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " protected void openParent(IProgressMonitor pm) throws JavaModelException", "signatureAfterChange": " protected void openParent(IProgressMonitor pm) throws JavaModelException", "diff": ["-\ttry {", "-\t\tsuper.openParent(pm);", "-\t} catch(JavaModelException e){", "-\t\t// allow parent to not exist for working copies defined outside classpath", "-\t\tif (!e.isDoesNotExist()){ ", "-\t\t\tthrow e;", "+\tif (FIX_BUG25184) {", "+\t\ttry {", "+\t\t\tsuper.openParent(pm);", "+\t\t} catch(JavaModelException e){", "+\t\t\t// allow parent to not exist for working copies defined outside classpath", "+\t\t\tif (!e.isDoesNotExist()){ ", "+\t\t\t\tthrow e;", "+\t\t\t}", "+\t} else {", "+\t\tsuper.openParent(pm);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "423855d3107a433ae10b8b5b0c70cc85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/helloworld/HelloWorldWildcardAnnotationProcessorFactory.java", "commitBeforeChange": "13c7fe094d778e029a6ff3885a33b085ac95c7a1", "commitAfterChange": "3d23167de0cc8549a88a05b8aab19471006b9190", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \t \tpublic Collection<String> supportedAnnotationTypes()", "signatureAfterChange": "  \t \tpublic Collection<String> supportedAnnotationTypes()", "diff": ["-\t\treturn Collections.singletonList(\"org.eclipse.jdt.apt.tests.annotations.helloworld.*\"); //$NON-NLS-1$", "+\t\t", "+\t\t// We need to swap behavior because always claiming \"*\" will cause", "+\t\t// other processors normally called after us to be prevented from running,", "+\t\t// as we have claimed everything", "+\t\tif (CLAIM_ALL_ANNOTATIONS) {", "+\t\t\treturn Collections.singletonList(\"*\");", "+\t\t}", "+\t\telse {", "+\t\t\treturn Collections.singletonList(\"org.eclipse.jdt.apt.tests.annotations.helloworld.*\"); //$NON-NLS-1$", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43bd01c24dde3e35d21c2e2512249c2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnSingleTypeReference.java", "commitBeforeChange": "c170f8179cacaa96bd5e7ced1e8d03ed5ea31d41", "commitAfterChange": "e2cf787950c6d582e25b73b2371c68f3fffed436", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public TypeBinding resolveTypeEnclosing(BlockScope scope, ReferenceBinding enclosingType)", "signatureAfterChange": "\r public TypeBinding resolveTypeEnclosing(BlockScope scope, ReferenceBinding enclosingType)", "diff": ["-\tthrow new CompletionNodeFound(this, enclosingType, scope);\r", "+\tif(isCompletionNode) {\r", "+\t\tthrow new CompletionNodeFound(this, enclosingType, scope);\r", "+\t} else {\r", "+\t\treturn super.resolveTypeEnclosing(scope, enclosingType);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7af750335e0fa7e6fd8895b1f70882bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "a3e63b72d2efd2058d202d3e2711391afc827fec", "commitAfterChange": "f0131d199789fbf75036ba10803faed4ef08b399", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate static char[][] computeBaseTypeNames(char[] typeName, boolean isConstantField, char[][] excludedNames)", "signatureAfterChange": "  \tprivate static char[][] computeBaseTypeNames(char[] typeName, boolean isConstantField, char[][] excludedNames)", "diff": ["-\t\tchar[] name = computeBaseTypeNames(typeName[0], excludedNames);", "-\t\tif(name != null) {", "-\t\t\treturn new char[][]{name};", "+\t\tif (isConstantField) {", "+\t\t\treturn computeNonBaseTypeNames(typeName, isConstantField);", "-\t\t\t// compute variable name like from non base type", "-\t\t\treturn  computeNonBaseTypeNames(typeName, isConstantField);", "+\t\t\tchar[] name = computeBaseTypeNames(typeName[0], excludedNames);", "+\t\t\tif(name != null) {", "+\t\t\t\treturn new char[][]{name};", "+\t\t\t} else {", "+\t\t\t\t// compute variable name like from non base type", "+\t\t\t\treturn computeNonBaseTypeNames(typeName, isConstantField);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1621c2bd06bc04434bba2dea817859a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnSingleTypeReference.java", "commitBeforeChange": "c170f8179cacaa96bd5e7ced1e8d03ed5ea31d41", "commitAfterChange": "e2cf787950c6d582e25b73b2371c68f3fffed436", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": "\r public TypeBinding getTypeBinding(Scope scope)", "diff": ["-\tthrow new CompletionNodeFound(this, scope);\r", "+\tif(isCompletionNode) {\r", "+\t\tthrow new CompletionNodeFound(this, scope);\r", "+\t} else {\r", "+\t\treturn super.getTypeBinding(scope);\r", "+\t}\r"]}], "num": 1553}
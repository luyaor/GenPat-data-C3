{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a7e4408cdce4f8e342784e272de8ff7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42145bcf3fc9efea6662634100b65eae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "8d86c45b7dbc1d8316194b358e7234e4491fa695", "commitAfterChange": "0305482ace5c5443f44c914a225574b12096815b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\t \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "signatureAfterChange": "\t \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "diff": ["-\t\t\tsubstitutes = new TypeBinding[varLength];", "-\t\t\tfor (int i = 0; i < varLength; i++) {", "-\t\t\t\tTypeBinding[] variableSubstitutes = (TypeBinding[]) collectedSubstitutes.get(typeVariables[i]);", "-\t\t\t\tTypeBinding mostSpecificSubstitute = scope.lowerUpperBound(variableSubstitutes);", "-\t\t\t\t//TypeBinding mostSpecificSubstitute = scope.mostSpecificCommonType(variableSubstitutes);", "-\t\t\t\tif (mostSpecificSubstitute == null)", "-\t\t\t\t\treturn null; // incompatible", "-\t\t\t\tif (mostSpecificSubstitute == VoidBinding) {", "-\t\t\t\t\tneedReturnTypeInference = true;", "-\t\t\t\t    mostSpecificSubstitute = typeVariables[i];", "+\t\t\tif (collectedSubstitutes.isEmpty()) {", "+\t\t\t\t// raw generic method inferred", "+\t\t\t\tmethodSubstitute = new ParameterizedGenericMethodBinding(originalMethod, (RawTypeBinding)null, scope.environment());", "+\t\t\t} else {", "+\t\t\t\tsubstitutes = new TypeBinding[varLength];", "+\t\t\t\tfor (int i = 0; i < varLength; i++) {", "+\t\t\t\t\tTypeBinding[] variableSubstitutes = (TypeBinding[]) collectedSubstitutes.get(typeVariables[i]);", "+\t\t\t\t\tTypeBinding mostSpecificSubstitute = scope.lowerUpperBound(variableSubstitutes);", "+\t\t\t\t\tif (mostSpecificSubstitute == null)", "+\t\t\t\t\t\treturn null; // incompatible", "+\t\t\t\t\tif (mostSpecificSubstitute == VoidBinding) {", "+\t\t\t\t\t\tneedReturnTypeInference = true;", "+\t\t\t\t\t    mostSpecificSubstitute = typeVariables[i];", "+\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t\tsubstitutes[i] = mostSpecificSubstitute;", "-\t\t\t\tsubstitutes[i] = mostSpecificSubstitute;", "+\t\t\t\t// apply inferred variable substitutions", "+\t\t\t\tmethodSubstitute = new ParameterizedGenericMethodBinding(originalMethod, substitutes, scope.environment());", "-\t\t\t// apply inferred variable substitutions", "-\t\t\tmethodSubstitute = new ParameterizedGenericMethodBinding(originalMethod, substitutes, scope.environment());", "-\t\t\t\tif (expectedType != null)", "-\t\t\t\t\tmethodSubstitute.inferFromExpectedType(message.expectedType, scope);", "+\t\t\t\tmethodSubstitute.inferFromExpectedType(", "+\t\t\t\t\t\t// 15.12.2.8 - if no expected type, then assume Object", "+\t\t\t\t\t\texpectedType == null ? scope.getJavaLangObject() : expectedType, ", "+\t\t\t\t\t\tscope);", "-\t\tfor (int i = 0, length = typeVariables.length; i < length; i++) {", "-\t\t    TypeVariableBinding typeVariable = typeVariables[i];", "-\t\t    if (!typeVariable.boundCheck(methodSubstitute, substitutes[i]))", "-\t\t        // incompatible due to bound check", "-\t\t        return new ProblemMethodBinding(methodSubstitute, originalMethod.selector, new TypeBinding[]{substitutes[i], typeVariables[i] }, ParameterBoundMismatch);", "+\t\tif (!methodSubstitute.isRaw) {", "+\t\t\tfor (int i = 0, length = typeVariables.length; i < length; i++) {", "+\t\t\t    TypeVariableBinding typeVariable = typeVariables[i];", "+\t\t\t    TypeBinding substitute = substitutes[i];", "+\t\t\t    if (!typeVariable.boundCheck(methodSubstitute, substitute))", "+\t\t\t        // incompatible due to bound check", "+\t\t\t        return new ProblemMethodBinding(methodSubstitute, originalMethod.selector, new TypeBinding[]{substitutes[i], typeVariables[i] }, ParameterBoundMismatch);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db7a03d5c894c9e92178976ca1159713", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "99d47e4046e97803f75625986f5eb5ffc13cddfe", "commitAfterChange": "8282cb3c46786d73ca763e64384724ac9c0798d9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint)", "diff": ["-\tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes) {", "+\tpublic void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint) {", "+\t\t", "+\t", "+\t\tif (otherType.isBaseType()) {", "+\t\t\tTypeBinding boxedType = scope.environment().computeBoxingType(otherType);", "+\t\t\tif (boxedType == otherType) return;", "+\t\t\totherType = boxedType;", "+\t\t}", "-\t    TypeBinding[] variableSubstitutes = (TypeBinding[])substitutes.get(this);", "+\t\t// reverse constraint, to reflect variable on rhs:   A << T --> T >: A", "+\t\tint variableConstraint;", "+\t\tswitch(constraint) {", "+\t\t\tcase CONSTRAINT_EQUAL :", "+\t\t\t\tvariableConstraint = CONSTRAINT_EQUAL;", "+\t\t\t\tbreak;", "+\t\t\tcase CONSTRAINT_EXTENDS :", "+\t\t\t\tvariableConstraint = CONSTRAINT_SUPER;", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t//case CONSTRAINT_SUPER :", "+\t\t\t\tvariableConstraint = CONSTRAINT_EXTENDS;", "+\t\t\t\tbreak;", "+\t\t}", "+\t    TypeBinding[][] variableSubstitutes = (TypeBinding[][])substitutes.get(this);", "-\t\t        int length = variableSubstitutes.length;", "-\t\t        for (int i = 0; i < length; i++) {", "-\t\t        \tTypeBinding substitute = variableSubstitutes[i];", "-\t\t            if (substitute == otherType) return; // already there", "-\t\t            if (substitute == null) {", "-\t\t                variableSubstitutes[i] = otherType;", "-\t\t                break insertLoop;", "-\t\t            }", "-\t\t        }", "-\t\t        // no free spot found, need to grow", "-\t\t        System.arraycopy(variableSubstitutes, 0, variableSubstitutes = new TypeBinding[2*length], 0, length);", "-\t\t        variableSubstitutes[length] = otherType;", "-\t\t        substitutes.put(this, variableSubstitutes);", "+\t\t    \tTypeBinding[] constraintSubstitutes = variableSubstitutes[variableConstraint];", "+\t\t    \tint length;", "+\t\t    \tif (constraintSubstitutes == null) {", "+\t\t    \t\tlength = 0;", "+\t\t    \t\tconstraintSubstitutes = new TypeBinding[1];", "+\t\t    \t} else {", "+\t\t    \t\tlength = constraintSubstitutes.length;", "+\t\t\t        for (int i = 0; i < length; i++) {", "+\t\t\t        \tTypeBinding substitute = constraintSubstitutes[i];", "+\t\t\t            if (substitute == otherType) return; // already there", "+\t\t\t            if (substitute == null) {", "+\t\t\t                constraintSubstitutes[i] = otherType;", "+\t\t\t                break insertLoop;", "+\t\t\t            }", "+\t\t\t        }", "+\t\t\t        // no free spot found, need to grow", "+\t\t\t        System.arraycopy(constraintSubstitutes, 0, constraintSubstitutes = new TypeBinding[2*length], 0, length);", "+\t\t    \t}", "+\t\t        constraintSubstitutes[length] = otherType;", "+\t\t        variableSubstitutes[variableConstraint] = constraintSubstitutes;", "-            // recurse in variable bounds (82187)", "-            if (this.superclass != null && this.firstBound == this.superclass) {", "-                this.superclass.collectSubstitutes(otherType, substitutes);", "-            }", "-            for (int i = 0, length = this.superInterfaces.length; i < length; i++) {", "-                this.superInterfaces[i].collectSubstitutes(otherType, substitutes);", "-            }"]}], "num": 14538}
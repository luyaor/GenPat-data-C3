{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28fd345e87227f155cca9ebc23270bc5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf09a81a833f1a71e2adaeb2ae6c1501", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic LocalDeclaration[] findLocalVariableDeclarations(int position)", "signatureAfterChange": " public LocalDeclaration[] findLocalVariableDeclarations(int position)", "diff": ["-\t */", "-\tpublic LocalDeclaration[] findLocalVariableDeclarations(int position) {", "-\t\t// local variable init", "-\t\tint ilocal = 0, maxLocals = this.localIndex;", "-\t\tboolean hasMoreVariables = maxLocals > 0;", "-\t\tLocalDeclaration[] localDeclarations = null;", "-\t\tint declPtr = 0;", "-\t\t// scope init", "-\t\tint iscope = 0, maxScopes = this.subscopeCount;", "-\t\tboolean hasMoreScopes = maxScopes > 0;", "-", "-\t\t// iterate scopes and variables in parallel", "-\t\twhile (hasMoreVariables || hasMoreScopes) {", "-\t\t\tif (hasMoreScopes", "-\t\t\t\t&& (!hasMoreVariables || (subscopes[iscope].startIndex() <= ilocal))) {", "-\t\t\t\t// consider subscope first", "-\t\t\t\tScope subscope = subscopes[iscope];", "-\t\t\t\tif (subscope.kind == Scope.BLOCK_SCOPE) { // do not dive in nested types", "-\t\t\t\t\tlocalDeclarations = ((BlockScope)subscope).findLocalVariableDeclarations(position);", "-\t\t\t\t\tif (localDeclarations != null) {", "-\t\t\t\t\t\treturn localDeclarations;", "-\t\t\t\t\t}", "-\t\t\t\thasMoreScopes = ++iscope < maxScopes;", "-\t\t\t} else {", "-\t\t\t\t// consider variable first", "-\t\t\t\tLocalVariableBinding local = locals[ilocal]; // if no local at all, will be locals[ilocal]==null", "-\t\t\t\tif (local != null) {", "-\t\t\t\t\tLocalDeclaration localDecl = local.declaration;", "-\t\t\t\t\tif (localDecl != null) {", "-\t\t\t\t\t\tif (localDecl.declarationSourceStart <= position) {", "-\t\t\t\t\t\t\tif (position <= localDecl.declarationSourceEnd) {", "-\t\t\t\t\t\t\t\tif (localDeclarations == null) {", "-\t\t\t\t\t\t\t\t\tlocalDeclarations = new LocalDeclaration[maxLocals];", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tlocalDeclarations[declPtr++] = localDecl;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\treturn localDeclarations;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\thasMoreVariables = ++ilocal < maxLocals;", "-\t\t\t\tif (!hasMoreVariables && localDeclarations != null) {", "+ */", "+public LocalDeclaration[] findLocalVariableDeclarations(int position) {", "+\t// local variable init", "+\tint ilocal = 0, maxLocals = this.localIndex;", "+\tboolean hasMoreVariables = maxLocals > 0;", "+\tLocalDeclaration[] localDeclarations = null;", "+\tint declPtr = 0;", "+", "+\t// scope init", "+\tint iscope = 0, maxScopes = this.subscopeCount;", "+\tboolean hasMoreScopes = maxScopes > 0;", "+", "+\t// iterate scopes and variables in parallel", "+\twhile (hasMoreVariables || hasMoreScopes) {", "+\t\tif (hasMoreScopes", "+\t\t\t&& (!hasMoreVariables || (this.subscopes[iscope].startIndex() <= ilocal))) {", "+\t\t\t// consider subscope first", "+\t\t\tScope subscope = this.subscopes[iscope];", "+\t\t\tif (subscope.kind == Scope.BLOCK_SCOPE) { // do not dive in nested types", "+\t\t\t\tlocalDeclarations = ((BlockScope)subscope).findLocalVariableDeclarations(position);", "+\t\t\t\tif (localDeclarations != null) {", "-\t\t}", "-\t\treturn null;", "-\t}", "+\t\t\thasMoreScopes = ++iscope < maxScopes;", "+\t\t} else {", "+\t\t\t// consider variable first", "+\t\t\tLocalVariableBinding local = this.locals[ilocal]; // if no local at all, will be locals[ilocal]==null", "+\t\t\tif (local != null) {", "+\t\t\t\tLocalDeclaration localDecl = local.declaration;", "+\t\t\t\tif (localDecl != null) {", "+\t\t\t\t\tif (localDecl.declarationSourceStart <= position) {", "+\t\t\t\t\t\tif (position <= localDecl.declarationSourceEnd) {", "+\t\t\t\t\t\t\tif (localDeclarations == null) {", "+\t\t\t\t\t\t\t\tlocalDeclarations = new LocalDeclaration[maxLocals];", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tlocalDeclarations[declPtr++] = localDecl;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturn localDeclarations;", "+\t\t\t}", "+\t\t\thasMoreVariables = ++ilocal < maxLocals;", "+\t\t\tif (!hasMoreVariables && localDeclarations != null) {", "+\t\t\t\treturn localDeclarations;", "+\treturn null;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6f6fad724bd44aefc4e2a751cd2f795", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ObjectCache.java", "commitBeforeChange": "e0325c6422f39f597d14dd4c27ecf43875108a27", "commitAfterChange": "f389464fbe74a4e5c3adfde8847a7200db37d80c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public boolean containsKey(Object key)", "signatureAfterChange": " public boolean containsKey(Object key)", "diff": ["-\tint index = hashCode(key), length = keyTable.length;", "-\twhile (keyTable[index] != null) {", "-\t\tif (keyTable[index] == key)", "+\tint index = hashCode(key), length = this.keyTable.length;", "+\twhile (this.keyTable[index] != null) {", "+\t\tif (this.keyTable[index] == key)"]}], "num": 9305}
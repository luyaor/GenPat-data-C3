{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6fe86a0fad42e2e93d00e8143f08b9d6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a4a5896951eefec223ffc502c785a3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "54632eb8b3fc718083fd85b7fed41bcce1a85dc7", "commitAfterChange": "bfb03069bc857fa6dbdefe509f7d5cec8610c33c", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "signatureAfterChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "diff": ["-\t\t\t\t\t\tvalue = value.trim();", "-\t\t\t\t\t\t// Keep the option value, even if it's deprecated", "-\t\t\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=324987", "-\t\t\t\t\t\tprojectOptions.put(propertyName, value);", "-\t\t\t\t\t\tif (!optionNames.contains(propertyName)) {", "-\t\t\t\t\t\t\t// try to migrate deprecated options", "-\t\t\t\t\t\t\tString[] compatibleOptions = (String[]) javaModelManager.deprecatedOptions.get(propertyName);", "-\t\t\t\t\t\t\tif (compatibleOptions != null) {", "-\t\t\t\t\t\t\t\tfor (int co=0, length=compatibleOptions.length; co < length; co++) {", "-\t\t\t\t\t\t\t\t\tprojectOptions.put(compatibleOptions[co], value);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (optionNames.contains(propertyName)){", "+\t\t\t\t\t\t\tprojectOptions.put(propertyName, value.trim());", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// Maybe an obsolete preference, try to migrate it...", "+\t\t\t\t\t\t\tjavaModelManager.migrateObsoleteOption(projectOptions, propertyName, value.trim());", "-\t\t\t\tif (propertyValue != null && javaModelManager.knowsOption(propertyName)){", "+\t\t\t\tif (propertyValue != null && optionNames.contains(propertyName)){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74540f00443995d37606b86798064075", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "272c951df671b1ff904ed6bfcde81c10aeb94ffd", "commitAfterChange": "a9dd5518f87ef0feeb42f8f7b9c8664624a32457", "methodNumberBeforeChange": 388, "methodNumberAfterChange": 388, "signatureBeforeChange": " public ASTNode[] parseClassBodyDeclarations(char[] source, int offset, int length, CompilationUnitDeclaration unit)", "signatureAfterChange": " public ASTNode[] parseClassBodyDeclarations(char[] source, int offset, int length, CompilationUnitDeclaration unit)", "diff": ["+\t\t} else {", "+\t\t\t// empty class body declaration (like ';' see https://bugs.eclipse.org/bugs/show_bug.cgi?id=280079).", "+\t\t\tresult = new ASTNode[0];", "-\tfor (int i = 0, max = result.length; i< max; i++) {", "+\tfor (int i = 0, max = result.length; i < max; i++) {", "-\t\tif (this.lastAct == ERROR_ACTION && (!this.options.performMethodsFullRecovery && !this.options.performStatementsRecovery)) {", "+\t\tif (((node.bits & ASTNode.HasSyntaxErrors) != 0) && (!this.options.performMethodsFullRecovery && !this.options.performStatementsRecovery)) {", "-\t\t\t((Initializer) fieldDeclarations[i]).parseStatements(this, typeDeclaration , unit);", "-\t\t\tif (this.lastAct == ERROR_ACTION && (!this.options.performMethodsFullRecovery && !this.options.performStatementsRecovery)) {", "+\t\t\tInitializer initializer = (Initializer) fieldDeclarations[i];", "+\t\t\tinitializer.parseStatements(this, typeDeclaration , unit);", "+\t\t\tif (((initializer.bits & ASTNode.HasSyntaxErrors) != 0) && (!this.options.performMethodsFullRecovery && !this.options.performStatementsRecovery)) {"]}], "num": 60493}
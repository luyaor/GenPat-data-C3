{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3bd5baba1e9e6fe48c85182429c70319", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f9bc21dd709c7a76fdac3433a6a3ff1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "928aa699a216cf69978cb24af1fa6f7f4cba1f20", "commitAfterChange": "9221731a3d20320a45d9e6a6337379d8a431c366", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic boolean checkNegative9() throws Exception", "signatureAfterChange": " \tpublic boolean checkNegative9() throws Exception", "diff": ["-\t\tif (!checkModel(rootElements, NEGATIVE_9_MODEL, \"Negative9\")) {", "-\t\t\treturn false;", "-\t\t}", "-\t\t// check that specific elements are not here", "-\t\tsuffixes = new String[] { \"b\" };", "-\t\tboolean result = true;", "-\t\tString errorMessage = \"\";", "-\t\tfor (int i = 0, l = suffixes.length; i < l; i++) {", "-\t\t\tTypeElement element = _elementUtils.getTypeElement(\"targets.negative.pa.Negative9\" + suffixes[i]);", "-\t\t\tList<? extends TypeMirror> interfaces = element.getInterfaces();", "-\t\t\tif (interfaces.isEmpty()) {", "-\t\t\t\terrorMessage += \"Element Negative9\" + suffixes[i] + \" has extraneous interfaces\\n\";", "-\t\t\t\tresult = false;", "+\t\tif (this.processingEnv.getSourceVersion() == SourceVersion.RELEASE_6) {", "+\t\t\tif (!checkModel(rootElements, NEGATIVE_9_MODEL_VERSION6, \"Negative9\")) {", "+\t\t\t\treturn false;", "-\t\t\tfor (TypeMirror typeMirror : interfaces) {", "-\t\t\t\tTypeKind kind = typeMirror.getKind();", "-\t\t\t\tif (kind != TypeKind.DECLARED) {", "-\t\t\t\t\terrorMessage += \"Element Negative9\" + suffixes[i] + \" super interface is not a declared type: \" + kind + \" \\n\";", "+\t\t\treturn true;", "+\t\t} else {", "+\t\t\tif (!checkModel(rootElements, NEGATIVE_9_MODEL, \"Negative9\")) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\t// check that specific elements are not here", "+\t\t\tsuffixes = new String[] { \"b\" };", "+\t\t\tboolean result = true;", "+\t\t\tString errorMessage = \"\";", "+\t\t\tfor (int i = 0, l = suffixes.length; i < l; i++) {", "+\t\t\t\tTypeElement element = _elementUtils.getTypeElement(\"targets.negative.pa.Negative9\" + suffixes[i]);", "+\t\t\t\tList<? extends TypeMirror> interfaces = element.getInterfaces();", "+\t\t\t\tif (interfaces.isEmpty()) {", "+\t\t\t\t\terrorMessage += \"Element Negative9\" + suffixes[i] + \" has missing interfaces\\n\";", "-\t\t\t\tDeclaredType type = (DeclaredType) typeMirror;", "-\t\t\t\tList<? extends TypeMirror> typeArguments = type.getTypeArguments();", "-\t\t\t\tfor (TypeMirror typeMirror2 : typeArguments) {", "-\t\t\t\t\tkind = typeMirror2.getKind();", "-\t\t\t\t\tif (kind != TypeKind.ERROR) {", "-\t\t\t\t\t\terrorMessage += \"Element Negative9\" + suffixes[i] + \" superinterface's type argument is not an error type: \" + kind + \" \\n\";", "-\t\t\t\t\t\tresult = false;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\tif (!result) {", "+\t\t\t\treportError(errorMessage);", "+\t\t\t}", "+\t\t\treturn result;", "-\t\tif (!result) {", "-\t\t\treportError(errorMessage);", "-\t\t}", "-\t\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da7f68fcdf33b24e71d0cf09af9d1c3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "928aa699a216cf69978cb24af1fa6f7f4cba1f20", "commitAfterChange": "9221731a3d20320a45d9e6a6337379d8a431c366", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic boolean checkNegative8() throws Exception", "signatureAfterChange": " \tpublic boolean checkNegative8() throws Exception", "diff": ["-\t\tif (!checkModel(rootElements, NEGATIVE_8_MODEL, \"Negative8\")) {", "+\t\tif (this.processingEnv.getSourceVersion() == SourceVersion.RELEASE_6) {", "+\t\t\tif (!checkModel(rootElements, NEGATIVE_8_MODEL_VERSION6, \"Negative8\")) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t} else if (!checkModel(rootElements, NEGATIVE_8_MODEL, \"Negative8\")) {", "-\t\t// check that specific elements are not here", "-\t\tsuffixes = new String[] {\"a\", \"b\", \"c\", \"d\"};", "-\t\tboolean result = true;", "-\t\tString errorMessage = \"\";", "-\t\tfor (int i = 0, l = suffixes.length; i < l; i++) {", "-\t\t\tTypeElement element = _elementUtils.getTypeElement(\"targets.negative.pa.Negative8\" + suffixes[i]);", "-\t\t\tif (! element.getInterfaces().isEmpty()) {", "-\t\t\t\terrorMessage += \"Element Negative8\" + suffixes[i] + \" has extraneous interfaces\\n\";", "-\t\t\t\tresult = false;", "-\t\t\t}", "-\t\t}", "-\t\tif (!result) {", "-\t\t\treportError(errorMessage);", "-\t\t}", "-\t\treturn result;", "+\t\treturn true;"]}], "num": 45750}
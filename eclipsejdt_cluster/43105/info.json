{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3bc95bfe5e879216381a969526e3cfa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1175b037659027bbcd1b1ab06f22bb4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "b2caa750738c585e3970cd6cbdee229067bea596", "commitAfterChange": "8d1eb8a1ba1f8d42e85f057c2e74fe0db8cb690d", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " \tpublic boolean visit(NullLiteral nullLiteral, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(StringLiteralConcetanation stringLiteral, BlockScope scope)", "diff": ["+\t */", "+\tpublic boolean visit(StringLiteralConcetanation stringLiteral, BlockScope scope) {", "+\t\tfinal int numberOfParens = (stringLiteral.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageOpeningParenthesizedExpression(stringLiteral, numberOfParens);", "+\t\t}", "+", "+\t\tthis.scribe.printComment();", "+\t\tASTNode[] fragments = stringLiteral.literals;", "+\t\tint fragmentsSize = stringLiteral.counter;", "+\t\tAlignment binaryExpressionAlignment = this.scribe.createAlignment(\"binaryExpressionAlignment\", this.preferences.alignment_for_binary_expression, Alignment.R_OUTERMOST, fragmentsSize, this.scribe.scanner.currentPosition); //$NON-NLS-1$", "+\t\tthis.scribe.enterAlignment(binaryExpressionAlignment);", "+\t\tboolean ok = false;", "+\t\tdo {", "+\t\t\ttry {", "+\t\t\t\tfor (int i = 0; i < fragmentsSize - 1; i++) {", "+\t\t\t\t\tASTNode fragment = fragments[i];", "+\t\t\t\t\tfragment.traverse(this, scope);", "+\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\tif (this.scribe.lastNumberOfNewLines == 1) {", "+\t\t\t\t\t\t// a new line has been inserted by printTrailingComment()", "+\t\t\t\t\t\tthis.scribe.indentationLevel = binaryExpressionAlignment.breakIndentationLevel;", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.scribe.alignFragment(binaryExpressionAlignment, i);", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNamePLUS, this.preferences.insert_space_before_binary_operator);", "+\t\t\t\t\tif (this.preferences.insert_space_after_binary_operator) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tfragments[fragmentsSize - 1].traverse(this, scope);", "+\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\tok = true;", "+\t\t\t} catch(AlignmentException e){", "+\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t}", "+\t\t} while (!ok);\t\t", "+\t\tthis.scribe.exitAlignment(binaryExpressionAlignment, true);", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageClosingParenthesizedExpression(stringLiteral, numberOfParens);", "+\t\t}", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25bf3dcfc777e832713522ec9847d26b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "c0f09226322ecd771874277f6bb778276b0ec732", "commitAfterChange": "c22186f99babc1d07ce1a8d9528c4806c68c13fc", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 85, "signatureBeforeChange": " \tpublic boolean visit(MessageSend messageSend, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(MessageSend messageSend, BlockScope scope)", "diff": ["-\t\tAlignment messageAlignment = null;", "-\t\tif (!messageSend.receiver.isImplicitThis()) {", "-\t\t\tmessageSend.receiver.traverse(this, scope);", "-\t\t\tmessageAlignment = this.scribe.createAlignment(", "-\t\t\t\t\t\"messageAlignment\", //$NON-NLS-1$", "-\t\t\t\t\tthis.preferences.message_send_selector_alignment,", "-\t\t\t\t\t1,", "-\t\t\t\t\tthis.scribe.scanner.currentPosition);", "-\t\t\tthis.scribe.enterAlignment(messageAlignment);", "-\t\t\tboolean ok = false;", "-\t\t\tdo {", "-\t\t\t\ttry {", "-\t\t\t\t\tformatMessageSend(messageSend, scope, messageAlignment);", "-\t\t\t\t\tok = true;", "-\t\t\t\t} catch (AlignmentException e) {", "-\t\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t\t}", "-\t\t\t} while (!ok);", "-\t\t\tthis.scribe.exitAlignment(messageAlignment, true);", "+\t\tCascadingMethodInvocationFragmentBuilder builder = buildFragments(messageSend, scope);", "+\t\t", "+\t\tif (builder.size() >= 3) {", "+\t\t\tformatCascadingMessageSends(builder, scope);", "-\t\t\tformatMessageSend(messageSend, scope, null);\t\t\t", "+\t\t\tAlignment messageAlignment = null;", "+\t\t\tif (!messageSend.receiver.isImplicitThis()) {", "+\t\t\t\tmessageSend.receiver.traverse(this, scope);", "+\t\t\t\tmessageAlignment = this.scribe.createAlignment(", "+\t\t\t\t\t\t\"messageAlignment\", //$NON-NLS-1$", "+\t\t\t\t\t\tthis.preferences.message_send_selector_alignment,", "+\t\t\t\t\t\t1,", "+\t\t\t\t\t\tthis.scribe.scanner.currentPosition);", "+\t\t\t\tthis.scribe.enterAlignment(messageAlignment);", "+\t\t\t\tboolean ok = false;", "+\t\t\t\tdo {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tformatMessageSend(messageSend, scope, messageAlignment);", "+\t\t\t\t\t\tok = true;", "+\t\t\t\t\t} catch (AlignmentException e) {", "+\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t\t}", "+\t\t\t\t} while (!ok);", "+\t\t\t\tthis.scribe.exitAlignment(messageAlignment, true);", "+\t\t\t} else {", "+\t\t\t\tformatMessageSend(messageSend, scope, null);\t\t\t", "+\t\t\t}"]}], "num": 43105}
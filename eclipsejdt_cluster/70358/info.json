{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75e6252dc9fb097694b93521cced029d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a5c09fb38fc0e4b99e037c27367bd04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "4a6a7781755a7a1cf7e30b7e629a87eea802f054", "commitAfterChange": "79d84450fa0277faedd98590a756a4b3c3037926", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static boolean canSeeFocus(IJavaElement focus, boolean isPolymorphicSearch, IPath projectOrJarPath)", "signatureAfterChange": " public static boolean canSeeFocus(IJavaElement focus, boolean isPolymorphicSearch, IPath projectOrJarPath)", "diff": ["-\t\t} else {", "-\t\t\t// projectOrJarPath is a project", "-\t\t\tJavaProject focusProject = focus instanceof JarPackageFragmentRoot ? (JavaProject)focus.getParent() : (JavaProject)focus;", "-\t\t\tif (isPolymorphicSearch) {", "-\t\t\t\t// look for refering project", "-\t\t\t\tIClasspathEntry[] entries = focusProject.getExpandedClasspath(true);", "-\t\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {", "-\t\t\t\t\tIClasspathEntry entry = entries[i];", "-\t\t\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) ", "-\t\t\t\t\t\t&& entry.getPath().equals(projectOrJarPath)) {", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (focus instanceof JarPackageFragmentRoot) {", "-\t\t\t\t// focus is part of a jar", "-\t\t\t\tIPath focusPath = focus.getPath();", "-\t\t\t\tIClasspathEntry[] entries = ((JavaProject)project).getExpandedClasspath(true);", "-\t\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {", "-\t\t\t\t\tIClasspathEntry entry = entries[i];", "-\t\t\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) ", "-\t\t\t\t\t\t&& entry.getPath().equals(focusPath)) {", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn false;", "-\t\t\t} else {", "-\t\t\t\t// focus is part of a project", "-\t\t\t\tif (focus.equals(project)) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t} else {", "-\t\t\t\t\t// look for dependent projects", "-\t\t\t\t\tIPath focusPath = focusProject.getProject().getFullPath();", "-\t\t\t\t\tIClasspathEntry[] entries = ((JavaProject)project).getExpandedClasspath(true);", "-\t\t\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {", "-\t\t\t\t\t\tIClasspathEntry entry = entries[i];", "-\t\t\t\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) ", "-\t\t\t\t\t\t\t&& entry.getPath().equals(focusPath)) {", "-\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn false;", "+\t\t}", "+\t\t// projectOrJarPath is a project", "+\t\tJavaProject focusProject = focus instanceof JarPackageFragmentRoot ? (JavaProject)focus.getParent() : (JavaProject)focus;", "+\t\tif (isPolymorphicSearch) {", "+\t\t\t// look for refering project", "+\t\t\tIClasspathEntry[] entries = focusProject.getExpandedClasspath(true);", "+\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {", "+\t\t\t\tIClasspathEntry entry = entries[i];", "+\t\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) ", "+\t\t\t\t\t&& entry.getPath().equals(projectOrJarPath)) {", "+\t\t\t\t\t\treturn true;", "+\t\tif (focus instanceof JarPackageFragmentRoot) {", "+\t\t\t// focus is part of a jar", "+\t\t\tIPath focusPath = focus.getPath();", "+\t\t\tIClasspathEntry[] entries = ((JavaProject)project).getExpandedClasspath(true);", "+\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {", "+\t\t\t\tIClasspathEntry entry = entries[i];", "+\t\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) ", "+\t\t\t\t\t&& entry.getPath().equals(focusPath)) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn false;", "+\t\t} ", "+\t\t// focus is part of a project", "+\t\tif (focus.equals(project)) {", "+\t\t\treturn true;", "+\t\t} ", "+\t\t// look for dependent projects", "+\t\tIPath focusPath = focusProject.getProject().getFullPath();", "+\t\tIClasspathEntry[] entries = ((JavaProject)project).getExpandedClasspath(true);", "+\t\tfor (int i = 0, length = entries.length; i < length; i++) {", "+\t\t\tIClasspathEntry entry = entries[i];", "+\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) ", "+\t\t\t\t&& entry.getPath().equals(focusPath)) {", "+\t\t\t\t\treturn true;", "+\t\t\t}", "+\t\t}", "+\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5751fa29aa46baa46194d280c3ad3a05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "62963aabc698cdd12bc1bf2bd37eac8d72bccd2f", "commitAfterChange": "4e65c4119dadcaa4c5efef86f1373d469b137c02", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static boolean canSeeFocus(IJavaElement focus, boolean isPolymorphicSearch, IPath projectOrJarPath)", "signatureAfterChange": " public static boolean canSeeFocus(IJavaElement focus, boolean isPolymorphicSearch, IPath projectOrJarPath)", "diff": ["+\t\tIClasspathEntry[] focusEntries = null;", "+\t\tif (isPolymorphicSearch) {", "+\t\t\tJavaProject focusProject = focus instanceof JarPackageFragmentRoot ? (JavaProject) focus.getParent() : (JavaProject) focus;", "+\t\t\tfocusEntries = focusProject.getExpandedClasspath(true);", "+\t\t}", "-\t\tif (project == null) {", "-\t\t\t// projectOrJarPath is a jar", "-\t\t\t// it can see the focus only if it is on the classpath of a project that can see the focus", "-\t\t\tIJavaProject[] allProjects = model.getJavaProjects();", "-\t\t\tfor (int i = 0, length = allProjects.length; i < length; i++) {", "-\t\t\t\tJavaProject otherProject = (JavaProject) allProjects[i];", "-\t\t\t\tIClasspathEntry[] entries = otherProject.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "-\t\t\t\tfor (int j = 0, length2 = entries.length; j < length2; j++) {", "-\t\t\t\t\tIClasspathEntry entry = entries[j];", "-\t\t\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) ", "-\t\t\t\t\t\t&& entry.getPath().equals(projectOrJarPath)) {", "-\t\t\t\t\t\t\tif (canSeeFocus(focus, isPolymorphicSearch, otherProject.getPath())) {", "-\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn false;", "-\t\t}", "-\t\t// projectOrJarPath is a project", "-\t\tJavaProject focusProject = focus instanceof JarPackageFragmentRoot ? (JavaProject)focus.getParent() : (JavaProject)focus;", "-\t\tif (isPolymorphicSearch) {", "-\t\t\t// look for refering project", "-\t\t\tIClasspathEntry[] entries = focusProject.getExpandedClasspath(true);", "-\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {", "-\t\t\t\tIClasspathEntry entry = entries[i];", "-\t\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) ", "-\t\t\t\t\t&& entry.getPath().equals(projectOrJarPath)) {", "+\t\tif (project != null)", "+\t\t\treturn canSeeFocus(focus, (JavaProject) project, focusEntries);", "+", "+\t\t// projectOrJarPath is a jar", "+\t\t// it can see the focus only if it is on the classpath of a project that can see the focus", "+\t\tIJavaProject[] allProjects = model.getJavaProjects();", "+\t\tfor (int i = 0, length = allProjects.length; i < length; i++) {", "+\t\t\tJavaProject otherProject = (JavaProject) allProjects[i];", "+\t\t\tIClasspathEntry[] entries = otherProject.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "+\t\t\tfor (int j = 0, length2 = entries.length; j < length2; j++) {", "+\t\t\t\tIClasspathEntry entry = entries[j];", "+\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY && entry.getPath().equals(projectOrJarPath))", "+\t\t\t\t\tif (canSeeFocus(focus, otherProject, focusEntries))", "-\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn false;", "+\t} catch (JavaModelException e) {", "+\t\treturn false;", "+\t}", "+}", "-\t\t\tIClasspathEntry[] entries = ((JavaProject)project).getExpandedClasspath(true);", "-\t\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) ", "-\t\t\t\t\t&& entry.getPath().equals(focusPath)) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn false;", "-\t\t} ", "-\t\t// focus is part of a project", "-\t\tif (focus.equals(project)) {", "-\t\t\treturn true;", "-\t\t} ", "-\t\t// look for dependent projects", "-\t\tIPath focusPath = focusProject.getProject().getFullPath();", "-\t\tIClasspathEntry[] entries = ((JavaProject)project).getExpandedClasspath(true);", "-\t\tfor (int i = 0, length = entries.length; i < length; i++) {", "-\t\t\tIClasspathEntry entry = entries[i];", "-\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) ", "-\t\t\t\t&& entry.getPath().equals(focusPath)) {"]}], "num": 70358}
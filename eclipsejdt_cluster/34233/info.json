{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80de11a4638afae9d0cc7a4a942803cc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "629f5db0d1fb55324dc41a4c14e0d416", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tpublic String getName()", "signatureAfterChange": "  \tpublic String getName()", "diff": ["-\t\tif (isWildcardType()) {", "-\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) this.binding;", "-\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\tbuffer.append(TypeConstants.WILDCARD_NAME);", "-\t\t\tif (wildcardBinding.bound != null) {", "-\t\t\t\tswitch(wildcardBinding.kind) {", "-\t\t\t        case Wildcard.SUPER :", "-\t\t\t        \tbuffer.append(TypeConstants.WILDCARD_SUPER);", "-\t\t\t            break;", "-\t\t\t        case Wildcard.EXTENDS :", "-\t\t\t        \tbuffer.append(TypeConstants.WILDCARD_EXTENDS);", "-\t\t\t\t}", "-\t\t\t\tbuffer.append(getBound().getName());", "-\t\t\t}", "-\t\t\treturn String.valueOf(buffer);", "-\t\t}", "-\t\tif (isParameterizedType()) {", "-\t\t\tParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) this.binding;", "-\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\tbuffer.append(parameterizedTypeBinding.sourceName());", "-\t\t\tITypeBinding[] typeArguments = getTypeArguments();", "-\t\t\tfinal int typeArgumentsLength = typeArguments.length;", "-\t\t\tif (typeArgumentsLength != 0) {", "-\t\t\t\tbuffer.append('<');", "-\t\t\t\tfor (int i = 0, max = typeArguments.length; i < max; i++) {", "-\t\t\t\t\tif (i > 0) {", "-\t\t\t\t\t\tbuffer.append(',');", "+\t\tStringBuffer buffer;", "+\t\tswitch (this.binding.kind()) {", "+", "+\t\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) this.binding;", "+\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\tbuffer.append(TypeConstants.WILDCARD_NAME);", "+\t\t\t\tif (wildcardBinding.bound != null) {", "+\t\t\t\t\tswitch(wildcardBinding.boundKind) {", "+\t\t\t\t        case Wildcard.SUPER :", "+\t\t\t\t        \tbuffer.append(TypeConstants.WILDCARD_SUPER);", "+\t\t\t\t            break;", "+\t\t\t\t        case Wildcard.EXTENDS :", "+\t\t\t\t        \tbuffer.append(TypeConstants.WILDCARD_EXTENDS);", "-\t\t\t\t\tbuffer.append(typeArguments[i].getName());", "+\t\t\t\t\tbuffer.append(getBound().getName());", "-\t\t\t\tbuffer.append('>');\t", "-\t\t\t}", "-\t\t\treturn String.valueOf(buffer);", "+\t\t\t\treturn String.valueOf(buffer);", "+\t\t\t\t", "+\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\tif (isCapture()) {", "+\t\t\t\t\treturn NO_NAME;", "+\t\t\t\t}", "+\t\t\t\tTypeVariableBinding typeVariableBinding = (TypeVariableBinding) this.binding;", "+\t\t\t\treturn new String(typeVariableBinding.sourceName);", "+\t\t\t\t", "+\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) this.binding;", "+\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\tbuffer.append(parameterizedTypeBinding.sourceName());", "+\t\t\t\tITypeBinding[] typeArguments = getTypeArguments();", "+\t\t\t\tfinal int typeArgumentsLength = typeArguments.length;", "+\t\t\t\tif (typeArgumentsLength != 0) {", "+\t\t\t\t\tbuffer.append('<');", "+\t\t\t\t\tfor (int i = 0, max = typeArguments.length; i < max; i++) {", "+\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\tbuffer.append(',');", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbuffer.append(typeArguments[i].getName());", "+\t\t\t\t\t}", "+\t\t\t\t\tbuffer.append('>');\t", "+\t\t\t\t}", "+\t\t\t\treturn String.valueOf(buffer);", "+\t\t\t\t", "+\t\t\tcase Binding.RAW_TYPE :\t\t\t\t", "+\t\t\t\treturn getTypeDeclaration().getName();", "+", "+\t\t\tcase Binding.ARRAY_TYPE :", "+\t\t\t\tITypeBinding elementType = getElementType();", "+\t\t\t\tif (elementType.isLocal() || elementType.isAnonymous() || elementType.isCapture()) {", "+\t\t\t\t\treturn NO_NAME;", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tint dimensions = getDimensions();", "+\t\t\t\tchar[] brackets = new char[dimensions * 2];", "+\t\t\t\tfor (int i = dimensions * 2 - 1; i >= 0; i -= 2) {", "+\t\t\t\t\tbrackets[i] = ']';", "+\t\t\t\t\tbrackets[i - 1] = '[';", "+\t\t\t\t}", "+\t\t\t\tbuffer = new StringBuffer(elementType.getName());", "+\t\t\t\tbuffer.append(brackets);", "+\t\t\t\treturn String.valueOf(buffer);", "+", "+\t\t\tdefault :", "+\t\t\t\tif (isPrimitive() || isNullType()) {", "+\t\t\t\t\tBaseTypeBinding baseTypeBinding = (BaseTypeBinding) this.binding;", "+\t\t\t\t\treturn new String(baseTypeBinding.simpleName);", "+\t\t\t\t}", "+\t\t\t\tif (isAnonymous()) {", "+\t\t\t\t\treturn NO_NAME;", "+\t\t\t\t}", "+\t\t\t\treturn new String(this.binding.sourceName());", "-\t\tif (isRawType()) {", "-\t\t\treturn getTypeDeclaration().getName();", "-\t\t}", "-\t\tif (isPrimitive() || isNullType()) {", "-\t\t\tBaseTypeBinding baseTypeBinding = (BaseTypeBinding) this.binding;", "-\t\t\treturn new String(baseTypeBinding.simpleName);", "-\t\t}", "-\t\tif (isArray()) {", "-\t\t\tint dimensions = getDimensions();", "-\t\t\tchar[] brackets = new char[dimensions * 2];", "-\t\t\tfor (int i = dimensions * 2 - 1; i >= 0; i -= 2) {", "-\t\t\t\tbrackets[i] = ']';", "-\t\t\t\tbrackets[i - 1] = '[';", "-\t\t\t}", "-\t\t\tStringBuffer buffer = new StringBuffer(getElementType().getName());", "-\t\t\tbuffer.append(brackets);", "-\t\t\treturn String.valueOf(buffer);", "-\t\t}", "-\t\tif (isAnonymous()) {", "-\t\t\treturn NO_NAME;", "-\t\t}", "-\t\tif (isTypeVariable()) {", "-\t\t\tTypeVariableBinding typeVariableBinding = (TypeVariableBinding) this.binding;", "-\t\t\treturn new String(typeVariableBinding.sourceName);", "-\t\t}", "-\t\treturn new String(this.binding.sourceName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddfd5d1486bb34cdfba5f734042b2727", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "e67c77fc5e097eac99c8909bb016eff7011eb0ce", "commitAfterChange": "5d677f26e6a9dfca4bbd2cd8a965c43c4f46ed94", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": " private IPath getPath(IJavaElement element, boolean relativeToRoot)", "signatureAfterChange": " private IPath getPath(IJavaElement element, boolean relativeToRoot)", "diff": ["-\tif (element instanceof IPackageFragmentRoot) {", "-\t\tif (relativeToRoot)", "+\tswitch (element.getElementType()) {", "+\t\tcase IJavaElement.JAVA_MODEL:", "-\t\treturn ((IPackageFragmentRoot)element).getPath();", "+\t\tcase IJavaElement.JAVA_PROJECT:", "+\t\t\treturn element.getPath();", "+\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:", "+\t\t\tif (relativeToRoot)", "+\t\t\t\treturn Path.EMPTY;", "+\t\t\treturn element.getPath();", "+\t\tcase IJavaElement.PACKAGE_FRAGMENT:", "+\t\t\tString relativePath = Util.concatWith(((PackageFragment) element).names, '/');", "+\t\t\treturn getPath(element.getParent(), relativeToRoot).append(new Path(relativePath));", "+\t\tcase IJavaElement.COMPILATION_UNIT:", "+\t\tcase IJavaElement.CLASS_FILE:", "+\t\t\treturn getPath(element.getParent(), relativeToRoot).append(new Path(element.getElementName()));", "+\t\tdefault:", "+\t\t\treturn getPath(element.getParent(), relativeToRoot);", "-\tIJavaElement parent = element.getParent();", "-\tIPath parentPath = parent == null ? null : getPath(parent, relativeToRoot);", "-\tIPath childPath;", "-\tif (element instanceof PackageFragment) {", "-\t\tString relativePath = Util.concatWith(((PackageFragment) element).names, '/');", "-\t\tchildPath = new Path(relativePath);", "-\t} else if (element instanceof IOpenable) {", "-\t\tchildPath = new Path(element.getElementName());", "-\t} else {", "-\t\treturn parentPath;", "-\t}", "-\treturn parentPath == null ? childPath : parentPath.append(childPath);"]}], "num": 34233}
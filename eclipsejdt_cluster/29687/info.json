{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c1d87a7a0524ee5f0d01d62a2e45240", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "093c9d0e706797ec18822653a546b81b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "c9b530e01318c4f59e9e7828de1da4c97f8fe89e", "commitAfterChange": "69656daba7331091b482d7c6b3e675c144730396", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tpublic boolean visit(Assignment node)", "signatureAfterChange": "  \tpublic boolean visit(Assignment node)", "diff": ["-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameEQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\tAssignment.Operator operator = node.getOperator();", "+\t\tif (operator == Assignment.Operator.ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameEQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.MINUS_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameMINUS_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.PLUS_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNamePLUS_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.TIMES_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameMULTIPLY_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.DIVIDE_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDIVIDE_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.REMAINDER_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameREMAINDER_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.LEFT_SHIFT_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLEFT_SHIFT_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.RIGHT_SHIFT_SIGNED_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRIGHT_SHIFT_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.RIGHT_SHIFT_UNSIGNED_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.BIT_AND_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameAND_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else if (operator == Assignment.Operator.BIT_OR_ASSIGN) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameOR_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} else {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameXOR_EQUAL, this.preferences.insert_space_before_assignment_operator);", "+\t\t} "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f03d0a88829a4054eb515d64d7a271a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "fa5b9584504523e008d75d3102bbd9fdb41a99d1", "commitAfterChange": "be28c707007790646fb850eb239db7444413aebf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void buildMoreCompletionContext(Expression expression)", "signatureAfterChange": " private void buildMoreCompletionContext(Expression expression)", "diff": ["+\t\t\tcase K_ARRAY_INITIALIZER :", "+\t\t\t\tArrayInitializer arrayInitializer = new ArrayInitializer();", "+\t\t\t\tarrayInitializer.expressions = new Expression[]{expression};", "+\t\t\t\texpressionPtr -= expressionLengthStack[expressionLengthPtr--];", "+\t\t\t\t", "+\t\t\t\tif(expressionLengthPtr > -1", "+\t\t\t\t\t&& expressionPtr > -1", "+\t\t\t\t\t&& this.expressionStack[expressionPtr] != null", "+\t\t\t\t\t&& this.expressionStack[expressionPtr].sourceStart > info) {", "+\t\t\t\t\texpressionLengthPtr--;\t", "+\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\tlastCheckPoint = scanner.currentPosition;", "+\t\t\t\t", "+\t\t\t\tif(topKnownElementKind(COMPLETION_OR_ASSIST_PARSER, 1) == K_ARRAY_CREATION) {", "+\t\t\t\t\tArrayAllocationExpression allocationExpression = new ArrayAllocationExpression();", "+\t\t\t\t\tallocationExpression.type = getTypeReference(0);", "+\t\t\t\t\tint length = expressionLengthStack[expressionLengthPtr];", "+\t\t\t\t\tallocationExpression.dimensions = new Expression[length];", "+", "+\t\t\t\t\tallocationExpression.initializer = arrayInitializer;", "+\t\t\t\t\tassistNodeParent = allocationExpression;", "+\t\t\t\t} else if(currentElement instanceof RecoveredField) {", "+\t\t\t\t\tRecoveredField recoveredField = (RecoveredField) currentElement;", "+\t\t\t\t\tif(recoveredField.fieldDeclaration.type.dimensions() == 0) {", "+\t\t\t\t\t\tBlock block = new Block(0);", "+\t\t\t\t\t\tblock.sourceStart = info;", "+\t\t\t\t\t\tcurrentElement = currentElement.add(block, 1);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tstatement = arrayInitializer;", "+\t\t\t\t\t}", "+\t\t\t\t} else if(currentElement instanceof RecoveredLocalVariable) {", "+\t\t\t\t\tRecoveredLocalVariable recoveredLocalVariable = (RecoveredLocalVariable) currentElement;", "+\t\t\t\t\tif(recoveredLocalVariable.localDeclaration.type.dimensions() == 0) {", "+\t\t\t\t\t\tBlock block = new Block(0);", "+\t\t\t\t\t\tblock.sourceStart = info;", "+\t\t\t\t\t\tcurrentElement = currentElement.add(block, 1);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tstatement = arrayInitializer;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tstatement = arrayInitializer;", "+\t\t\t\t}", "+\t\t\t\tbreak nextElement;", "+\t\t\tcase K_ARRAY_CREATION :", "+\t\t\t\tArrayAllocationExpression allocationExpression = new ArrayAllocationExpression();", "+\t\t\t\tallocationExpression.type = getTypeReference(0);", "+\t\t\t\tallocationExpression.dimensions = new Expression[]{expression};", "+\t\t\t\t", "+\t\t\t\tassistNodeParent = allocationExpression;", "+\t\t\t\tbreak nextElement;", "+\t\t\tcase K_ASSISGNMENT_OPERATOR :", "+\t\t\t\tif(expressionPtr > 0 && expressionStack[expressionPtr - 1] != null) {", "+\t\t\t\t\tAssignment assignment;", "+\t\t\t\t\tif(info == EQUAL) {", "+\t\t\t\t\t\tassignment = new Assignment(", "+\t\t\t\t\t\t\texpressionStack[expressionPtr - 1],", "+\t\t\t\t\t\t\texpression,", "+\t\t\t\t\t\t\texpression.sourceEnd", "+\t\t\t\t\t\t);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tassignment = new CompoundAssignment(", "+\t\t\t\t\t\t\texpressionStack[expressionPtr - 1],", "+\t\t\t\t\t\t\texpression,", "+\t\t\t\t\t\t\tinfo,", "+\t\t\t\t\t\t\texpression.sourceEnd", "+\t\t\t\t\t\t);", "+\t\t\t\t\t}", "+\t\t\t\t\tassistNodeParent = assignment;", "+\t\t\t\t}", "+\t\t\t\tbreak nextElement;", "+\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ced864f3a81007bcf69ac0ae3390cbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredBlock.java", "commitBeforeChange": "697c6f52ed873e1d18816e7b9bdd345c15d550cf", "commitAfterChange": "8d866d91b7e6bec6081cd0b0a2b4eec25b579319", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public Block updatedBlock()", "signatureAfterChange": " public Block updatedBlock()", "diff": ["+\t", "+\t// may need to update the end of the last statement", "+\tRecoveredStatement lastStatement = statements[statementCount - 1];", "+\tRecoveredMethod enclosingMethod = this.enclosingMethod();", "+\tRecoveredInitializer enclosingIntializer = this.enclosingInitializer();", "+\tint bodyEndValue = 0;", "+\tif(enclosingMethod != null) {", "+\t\tbodyEndValue = enclosingMethod.methodDeclaration.bodyEnd;", "+\t\tif(enclosingIntializer != null && enclosingMethod.methodDeclaration.sourceStart < enclosingIntializer.fieldDeclaration.sourceStart) {", "+\t\t\tbodyEndValue = enclosingIntializer.fieldDeclaration.declarationSourceEnd;", "+\t\t}", "+\t} else if(enclosingIntializer != null) {", "+\t\tbodyEndValue = enclosingIntializer.fieldDeclaration.declarationSourceEnd;", "+\t} else {", "+\t\tbodyEndValue = this.blockDeclaration.sourceEnd - 1;", "+\t}", "+\t", "+\tif(lastStatement instanceof RecoveredLocalVariable) {", "+\t\tRecoveredLocalVariable lastLocalVariable = (RecoveredLocalVariable) lastStatement;", "+\t\tif(lastLocalVariable.localDeclaration.declarationSourceEnd == 0) {", "+\t\t\tlastLocalVariable.localDeclaration.declarationSourceEnd = bodyEndValue;", "+\t\t\tlastLocalVariable.localDeclaration.declarationEnd = bodyEndValue;", "+\t\t}", "+\t} else if(lastStatement instanceof RecoveredBlock) {", "+\t\tRecoveredBlock lastBlock = (RecoveredBlock) lastStatement;", "+\t\tif(lastBlock.blockDeclaration.sourceEnd == 0) {", "+\t\t\tlastBlock.blockDeclaration.sourceEnd = bodyEndValue;", "+\t\t}", "+\t} else if(!(lastStatement instanceof RecoveredType)){", "+\t\tif(lastStatement.statement.sourceEnd == 0) {", "+\t\t\tlastStatement.statement.sourceEnd = bodyEndValue;", "+\t\t}", "+\t}", "+\t", "+\tint lastEnd = blockDeclaration.sourceStart;", "+\t", "+\t\t\t", "+\t\t\tif (updatedStatement instanceof LocalDeclaration) {", "+\t\t\t\tLocalDeclaration localDeclaration = (LocalDeclaration) updatedStatement;", "+\t\t\t\tif(localDeclaration.declarationSourceEnd > lastEnd) {", "+\t\t\t\t\tlastEnd = localDeclaration.declarationSourceEnd;", "+\t\t\t\t}", "+\t\t\t} else if (updatedStatement instanceof TypeDeclaration) {", "+\t\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) updatedStatement;", "+\t\t\t\tif(typeDeclaration.declarationSourceEnd > lastEnd) {", "+\t\t\t\t\tlastEnd = typeDeclaration.declarationSourceEnd;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif (updatedStatement.sourceEnd > lastEnd) {", "+\t\t\t\t\tlastEnd = updatedStatement.sourceEnd;", "+\t\t\t\t}", "+\t\t\t}", "+\tif (this.blockDeclaration.sourceEnd == 0) {", "+\t\tthis.blockDeclaration.sourceEnd = lastEnd;", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d9f573ce87a02cd402acae9a5fd334e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTRecoveryPropagator.java", "commitBeforeChange": "ca0a8d2a8dcbdca4c1d22b2aafd247d22556e537", "commitAfterChange": "1155b311a647fc5f126edd0c5e6b818f225baee0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void endVisit(Block node)", "signatureAfterChange": "  \tpublic void endVisit(Block node)", "diff": ["-\t\tint level = node.getAST().apiLevel;", "-\t\t", "-\t\tList statements = node.statements();", "-\t\tnext : for (int i = 0, max = statements.size(); i < max; i++) {", "-\t\t\tASTNode statement = (ASTNode) statements.get(i);", "-\t\t\tif (statement.getNodeType() == ASTNode.VARIABLE_DECLARATION_STATEMENT) {", "-\t\t\t\tVariableDeclarationStatement variableDeclarationStatement =  (VariableDeclarationStatement) statement;", "-\t\t\t\t", "-\t\t\t\tif (level == AST.JLS2_INTERNAL) {", "-\t\t\t\t\tif (variableDeclarationStatement.getModifiers() != Modifier.NONE) {", "-\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t}", "-\t\t\t\t} else if (level >= AST.JLS3_INTERNAL) {", "-\t\t\t\t\tif (variableDeclarationStatement.modifiers().size() != 0) {", "-\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tType type = variableDeclarationStatement.getType();", "-\t\t\t\tif (type.getNodeType() != ASTNode.SIMPLE_TYPE) {", "-\t\t\t\t\tcontinue next;", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tList fragments = variableDeclarationStatement.fragments();", "-\t\t\t\tif (fragments.size() == 1) {", "-\t\t\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "-\t\t\t\t\t", "-\t\t\t\t\tSimpleName simpleName = fragment.getName();", "-\t\t\t\t\tif (CharOperation.equals(RecoveryScanner.FAKE_IDENTIFIER, simpleName.getIdentifier().toCharArray())) {", "-\t\t\t\t\t\tSimpleType simpleType = (SimpleType) type;", "-\t\t\t\t\t\tName name = simpleType.getName();", "-\t\t\t\t\t\tname.setParent(null, null);", "-\t\t\t\t\t\tname.setFlags(name.getFlags() | ASTNode.RECOVERED);", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tfinal ExpressionStatement stmt = new ExpressionStatement(name.getAST());", "-\t\t\t\t\t\tstmt.setExpression(name);", "-\t\t\t\t\t\tstmt.setSourceRange(variableDeclarationStatement.getStartPosition(), variableDeclarationStatement.getLength());", "-\t\t\t\t\t\tstmt.setFlags(stmt.getFlags() | ASTNode.RECOVERED);", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tstatements.add(i, stmt);", "-\t\t\t\t\t\tstatements.remove(variableDeclarationStatement);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6940de2d88e1ddcd581a4ea2b1310604", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "542ce5451500fe1306b92aaa9a7c04d8d83f7f3f", "commitAfterChange": "9cbf7e62288f060b33b2dc1c1d579dae84747012", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["-\t\t\t\t\t\tfindMethods(this.completionToken,null,null,enclosingType,scope,new ObjectVector(),false,false,true,null,null,false,false,true);", "+\t\t\t\t\t\tfindMethods(this.completionToken,null,null,enclosingType,scope,new ObjectVector(),false,false,true,null,null,false,false,true,null, null, null);", "-\t\t\t\t\t\tfindMethods(this.completionToken,null,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false,false,true);", "+\t\t\t\t\t\tfindMethods(this.completionToken,null,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false,false,true,null, null, null);", "-\t\t\tif (qualifiedBinding instanceof VariableBinding) {", "-", "+\t\t\tif (qualifiedBinding.problemId() == ProblemReasons.NotFound) {", "+\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "+\t\t\t\t// complete field members with missing fields type", "+\t\t\t\t// class X {", "+\t\t\t\t//   Missing f;", "+\t\t\t\t//   void foo() {", "+\t\t\t\t//     f.|", "+\t\t\t\t//   }", "+\t\t\t\t// }", "+\t\t\t\tif (this.assistNodeInJavadoc == 0 &&", "+\t\t\t\t\t\tthis.requestor.isAllowingRequiredProposals(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\tif(ref.tokens.length == 1) {", "+\t\t\t\t\t\tfindFieldsAndMethodsFromMissingFieldType(ref.tokens[0], scope, ref, insideTypeAnnotation);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (qualifiedBinding instanceof VariableBinding) {", "-\t\t\t\t\tfindFieldsAndMethods(this.completionToken, receiverType.capture(scope, ref.sourceEnd), scope, ref, scope,false,false);", "+\t\t\t\t\tfindFieldsAndMethods(this.completionToken, receiverType.capture(scope, ref.sourceEnd), scope, ref, scope,false,false, null, null, null);", "+\t\t\t\t} else if (this.assistNodeInJavadoc == 0 &&", "+\t\t\t\t\t\tthis.requestor.isAllowingRequiredProposals(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\tboolean proposeField = !this.requestor.isIgnored(CompletionProposal.FIELD_REF);", "+\t\t\t\t\tboolean proposeMethod = !this.requestor.isIgnored(CompletionProposal.METHOD_REF);", "+\t\t\t\t\tif (proposeField || proposeMethod) {", "+\t\t\t\t\t\tif (qualifiedBinding instanceof LocalVariableBinding) {", "+\t\t\t\t\t\t\t// complete local variable members with missing variables type", "+\t\t\t\t\t\t\t// class X {", "+\t\t\t\t\t\t\t//   void foo() {", "+\t\t\t\t\t\t\t//     Missing f;", "+\t\t\t\t\t\t\t//     f.|", "+\t\t\t\t\t\t\t//   }", "+\t\t\t\t\t\t\t// }", "+\t\t\t\t\t\t\tLocalVariableBinding localVariableBinding = (LocalVariableBinding) qualifiedBinding;", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tfindFieldsAndMethodsFromMissingType(", "+\t\t\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\t\t\tlocalVariableBinding.declaration.type,", "+\t\t\t\t\t\t\t\t\tlocalVariableBinding.declaringScope,", "+\t\t\t\t\t\t\t\t\tref,", "+\t\t\t\t\t\t\t\t\tscope);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull);", "-\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull);", "-\t\t\tif (!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "-\t\t\t\tfindKeywords(this.completionToken, new char[][]{Keywords.NEW}, false, false);", "+\t\t\tif (qualifiedBinding.problemId() == ProblemReasons.NotFound) {", "+\t\t\t\t// complete method members with missing return type", "+\t\t\t\t// class X {", "+\t\t\t\t//   Missing f() {return null;}", "+\t\t\t\t//   void foo() {", "+\t\t\t\t//     f().|", "+\t\t\t\t//   }", "+\t\t\t\t// }", "+\t\t\t\tif (this.assistNodeInJavadoc == 0 &&", "+\t\t\t\t\t\tthis.requestor.isAllowingRequiredProposals(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\tProblemMethodBinding problemMethodBinding = (ProblemMethodBinding) qualifiedBinding;\t\t\t\t", "+\t\t\t\t\tfindFieldsAndMethodsFromMissingReturnType(", "+\t\t\t\t\t\t\tproblemMethodBinding.selector,", "+\t\t\t\t\t\t\tproblemMethodBinding.parameters,", "+\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\taccess,", "+\t\t\t\t\t\t\tinsideTypeAnnotation);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\t\tfindKeywords(this.completionToken, new char[][]{Keywords.NEW}, false, false);", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tfindFieldsAndMethods(", "+\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t((TypeBinding) qualifiedBinding).capture(scope, access.receiver.sourceEnd),", "+\t\t\t\t\tscope,", "+\t\t\t\t\taccess,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tfalse,", "+\t\t\t\t\taccess.receiver instanceof SuperReference,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tnull);", "-\t\t\t", "-\t\t\tfindFieldsAndMethods(", "-\t\t\t\tthis.completionToken,", "-\t\t\t\t((TypeBinding) qualifiedBinding).capture(scope, access.receiver.sourceEnd),", "-\t\t\t\tscope,", "-\t\t\t\taccess,", "-\t\t\t\tscope,", "-\t\t\t\tfalse,", "-\t\t\t\taccess.receiver instanceof SuperReference);", "-\t\t\t\t\tfalse);", "+\t\t\t\t\tfalse,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tnull);", "-\t\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\tnull);", "-\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull);", "-\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull);", "-\t\t\t\t\tfindMethods(this.completionToken,", "+\t\t\t\t\tfindMethods(", "+\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f734c3aedbdb8891bc15fd50255936b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MemberValuePair.java", "commitBeforeChange": "c223ae053787e6c843ac82068147df20215c916b", "commitAfterChange": "0211ebf94321d48ca7e59da13d2b4b3ea6399b61", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "signatureAfterChange": " \t \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "diff": ["-\t\t\tscope.problemReporter().annotationValueMustBeArrayInitializer(this.value);", "+\t\t\tscope.problemReporter().annotationValueMustBeArrayInitializer(this.binding.declaringClass, this.name, this.value);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, expressions[i]);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, expressions[i], false);", "-\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, this.value);", "+\t\t\t\t\t\tif (valueType.isArrayType()) {", "+\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeArrayInitializer(this.binding.declaringClass, this.name, this.value);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, this.value, false);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (!(expressions[i] instanceof ClassLiteralAccess)) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeClassLiteral(this.binding.declaringClass, this.name, expressions[i]);", "+\t\t\t\t\t\t\t\tExpression currentExpression = expressions[i];", "+\t\t\t\t\t\t\t\tif (!(currentExpression instanceof ClassLiteralAccess)) {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeClassLiteral(this.binding.declaringClass, this.name, currentExpression);", "-\t\t\t\t\t// TODO (olivier) change message for annotation value must be an *enum* constant", "-\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, this.value);", "+\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, this.value, true);", "+\t\t\t\t} else if (this.value instanceof ArrayInitializer) {", "+\t\t\t\t\tArrayInitializer initializer = (ArrayInitializer) this.value;", "+\t\t\t\t\tfinal Expression[] expressions = initializer.expressions;", "+\t\t\t\t\tif (expressions != null) {", "+\t\t\t\t\t\tfor (int i =0, max = expressions.length; i < max; i++) {", "+\t\t\t\t\t\t\tExpression currentExpression = expressions[i];", "+\t\t\t\t\t\t\tif (currentExpression instanceof NullLiteral) {", "+\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, currentExpression, true);", "+\t\t\t\t\t\t\t} else if (currentExpression instanceof NameReference) {", "+\t\t\t\t\t\t\t\tNameReference nameReference = (NameReference) currentExpression;", "+\t\t\t\t\t\t\t\tfinal Binding nameReferenceBinding = nameReference.binding;", "+\t\t\t\t\t\t\t\tif (nameReferenceBinding.kind() == Binding.FIELD) {", "+\t\t\t\t\t\t\t\t\tFieldBinding fieldBinding = (FieldBinding) nameReferenceBinding;", "+\t\t\t\t\t\t\t\t\tif (!fieldBinding.declaringClass.isEnum()) {", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, currentExpression, true);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else if (this.value instanceof NameReference) {", "+\t\t\t\t\tNameReference nameReference = (NameReference) this.value;", "+\t\t\t\t\tfinal Binding nameReferenceBinding = nameReference.binding;", "+\t\t\t\t\tif (nameReferenceBinding.kind() == Binding.FIELD) {", "+\t\t\t\t\t\tFieldBinding fieldBinding = (FieldBinding) nameReferenceBinding;", "+\t\t\t\t\t\tif (!fieldBinding.declaringClass.isEnum()) {", "+\t\t\t\t\t\t\tif (!fieldBinding.type.isArrayType()) {", "+\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(this.binding.declaringClass, this.name, this.value, true);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeArrayInitializer(this.binding.declaringClass, this.name, this.value);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86fb9ca4d0654cd9a6b77ca26c180b18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "1807cc67396ea9076c76cb31f2d61c82f124d048", "commitAfterChange": "52597fb7db7ddfe8d0d19142d700054ae1d908a1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic GeneratedFileManager(final AptProject aptProject)", "signatureAfterChange": " \tpublic GeneratedFileManager(final AptProject aptProject)", "diff": ["-\t\t", "-\t\t// register a preference listener so that we can watch for changes ", "-\t\t// to the gen src dir at the project scope...", "-\t\tIScopeContext projScope = new ProjectScope(aptProject.getJavaProject().getProject());", "-\t\tIEclipsePreferences projPrefs = projScope.getNode(AptPlugin.PLUGIN_ID);", "-\t\tIPreferenceChangeListener projListener = new IPreferenceChangeListener() {", "-\t\t\tpublic void preferenceChange(PreferenceChangeEvent event) {", "-\t\t\t\t", "-\t\t\t\tfinal String newValue = (String)event.getNewValue();", "-\t\t\t\tif (newValue == null) {", "-\t\t\t\t\t// Null is used to indicate this preference has", "-\t\t\t\t\t// been removed, as the project has been deleted.", "-\t\t\t\t\t// We do nothing", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\tfinal String oldValue = (String)event.getOldValue();", "-\t\t\t\tif (newValue.equals(oldValue)) {", "-\t\t\t\t\t// No-op -- same config", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tif (AptPreferenceConstants.APT_GENSRCDIR.equals(event.getKey())) {", "-\t\t\t\t\tfinal boolean aptEnabled = AptConfig.isEnabled(_aptProject.getJavaProject());", "-\t\t\t\t\tif( AptPlugin.DEBUG )", "-\t\t\t\t\t\tAptPlugin.trace(\"configure generated source directory new value = \" +  //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tnewValue + ", "-\t\t\t\t\t\t\t\t\" old value = \"  + oldValue + //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\" APT is enabled = \" + aptEnabled); //$NON-NLS-1$", "-\t\t\t\t\t// If APT is enabled, ", "-\t\t\t\t\t// clean up the old cp entry, delete the old folder, ", "-\t\t\t\t\t// create the new one and update the classpath.", "-\t\t\t\t\tif( aptEnabled )", "-\t\t\t\t\t\tconfigureGeneratedSourceFolder( newValue, oldValue );", "-\t\t\t\t\telse", "-\t\t\t\t\t\tsetGeneratedSourceFolderName(newValue);", "-\t\t\t\t}", "-\t\t\t\telse if(AptPreferenceConstants.APT_ENABLED.equals(event.getKey()) ){", "-\t\t\t\t\tif( AptPlugin.DEBUG ){", "-\t\t\t\t\t\tAptPlugin.trace(\"Got preference change event for \" + AptPreferenceConstants.APT_ENABLED ); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\t// no-op;", "-\t\t\t\t\tif(newValue.equals(oldValue)){", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\tfinal boolean isEnabling = Boolean.parseBoolean(newValue);", "-\t\t\t\t\tif( AptPlugin.DEBUG ){", "-\t\t\t\t\t\tif( isEnabling )", "-\t\t\t\t\t\t\tAptPlugin.trace(\"enabling APT for \" + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$", "-\t\t\t\t\t\telse", "-\t\t\t\t\t\t\tAptPlugin.trace(\"diabling APT \" + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tif( isEnabling )", "-\t\t\t\t\t\tconfigureGeneratedSourceFolder();", "-\t\t\t\t\telse{", "-\t\t\t\t\t\tfinal IFolder srcFolder = getGeneratedSourceFolder();", "-\t\t\t\t\t\tprojectClean(true);", "-\t\t\t\t\t\tresetGeneratedSrcFolder(srcFolder, false);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t};", "-\t\tprojPrefs.addPreferenceChangeListener(projListener);", "-\t\t", "-\t\t// ...and at the workspace scope.", "-\t\t// Note we check all projects, even those that have project-specific", "-\t\t// settings, when the workspace setting changes.  For projects with", "-\t\t// project-specific settings, the value of the setting won't change ", "-\t\t// so the request will be ignored.", "-\t\tIScopeContext wkspScope = new InstanceScope();", "-\t\tIEclipsePreferences wkspPrefs = wkspScope.getNode(AptPlugin.PLUGIN_ID);", "-\t\tIPreferenceChangeListener wkspListener = new IPreferenceChangeListener() {", "-\t\t\tpublic void preferenceChange(PreferenceChangeEvent event) {", "-\t\t\t\tif (AptPreferenceConstants.APT_GENSRCDIR.equals(event.getKey())) {", "-\t\t\t\t\tconfigureGeneratedSourceFolder( AptConfig.getGenSrcDir(javaProject), null );", "-\t\t\t\t}", "-\t\t\t}", "-\t\t};", "-\t\twkspPrefs.addPreferenceChangeListener(wkspListener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8704ae3910935ae8c015ca340886436a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "e73037ff248454bfb7965c3990814d5ef5cb4620", "commitAfterChange": "cafb328a42240bc62f70f6b130384a29f0e8d16a", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tprivate void computeExpectedTypes(AstNode parent, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(AstNode parent, Scope scope)", "diff": ["+\t\t} else if(parent instanceof OperatorExpression) {", "+\t\t\tint operator = (parent.bits & AstNode.OperatorMASK) >> AstNode.OperatorSHIFT;", "+\t\t\tif(parent instanceof ConditionalExpression) {", "+\t\t\t\t// for future use", "+\t\t\t} else if(parent instanceof InstanceOfExpression) {", "+\t\t\t\tInstanceOfExpression e = (InstanceOfExpression) parent;", "+\t\t\t\tTypeBinding binding = e.expression.resolvedType;", "+\t\t\t\tif(binding != null){", "+\t\t\t\t\taddExpectedType(binding);", "+\t\t\t\t\texpectedTypesFilter = SUBTYPE | SUPERTYPE;", "+\t\t\t\t}", "+\t\t\t} else if(parent instanceof BinaryExpression) {", "+\t\t\t\tswitch(operator) {", "+\t\t\t\t\tcase OperatorIds.PLUS :", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ShortBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.IntBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.LongBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.FloatBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.DoubleBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.CharBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ByteBinding);", "+\t\t\t\t\t\taddExpectedType(scope.getJavaLangString());", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OperatorIds.AND_AND :", "+\t\t\t\t\tcase OperatorIds.OR_OR :", "+\t\t\t\t\tcase OperatorIds.XOR :", "+\t\t\t\t\t\taddExpectedType(BaseTypes.BooleanBinding);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault :", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ShortBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.IntBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.LongBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.FloatBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.DoubleBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.CharBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ByteBinding);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t} else if(parent instanceof UnaryExpression) {", "+\t\t\t\tswitch(operator) {", "+\t\t\t\t\tcase OperatorIds.NOT :", "+\t\t\t\t\t\taddExpectedType(BaseTypes.BooleanBinding);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OperatorIds.TWIDDLE :", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ShortBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.IntBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.LongBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.CharBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ByteBinding);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OperatorIds.PLUS :", "+\t\t\t\t\tcase OperatorIds.MINUS :", "+\t\t\t\t\tcase OperatorIds.PLUS_PLUS :", "+\t\t\t\t\tcase OperatorIds.MINUS_MINUS :", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ShortBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.IntBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.LongBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.FloatBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.DoubleBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.CharBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ByteBinding);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d03566893ea678e52a0d9412029a35b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "34f79b507663962f5a8b34c6546e7cf80423bb0b", "commitAfterChange": "0b3c372cd8063a26d1eaf5c9a3c9657a40eb4a99", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic static IClasspathEntry getResolvedClasspathEntry(IClasspathEntry entry)", "signatureAfterChange": " \tpublic static IClasspathEntry getResolvedClasspathEntry(IClasspathEntry entry)", "diff": ["-\t\treturn JavaModelManager.getJavaModelManager().getResolvedClasspathEntry(entry, false/*don't use previous session value*/);", "+", "+\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_VARIABLE)", "+\t\t\treturn entry;", "+", "+\t\tIPath resolvedPath = JavaCore.getResolvedVariablePath(entry.getPath());", "+\t\tif (resolvedPath == null)", "+\t\t\treturn null;", "+", "+\t\tObject target = JavaModel.getTarget(resolvedPath, false);", "+\t\tif (target == null)", "+\t\t\treturn null;", "+", "+\t\t// inside the workspace", "+\t\tif (target instanceof IResource) {", "+\t\t\tIResource resolvedResource = (IResource) target;", "+\t\t\tswitch (resolvedResource.getType()) {", "+", "+\t\t\t\tcase IResource.PROJECT :", "+\t\t\t\t\t// internal project", "+\t\t\t\t\treturn JavaCore.newProjectEntry(", "+\t\t\t\t\t\t\tresolvedPath,", "+\t\t\t\t\t\t\tentry.getAccessRules(),", "+\t\t\t\t\t\t\tentry.combineAccessRules(),", "+\t\t\t\t\t\t\tentry.getExtraAttributes(),", "+\t\t\t\t\t\t\tentry.isExported());", "+\t\t\t\tcase IResource.FILE :", "+\t\t\t\t\t// internal binary archive", "+\t\t\t\t\treturn JavaCore.newLibraryEntry(", "+\t\t\t\t\t\t\tresolvedPath,", "+\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentPath()),", "+\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()),", "+\t\t\t\t\t\t\tentry.getAccessRules(),", "+\t\t\t\t\t\t\tentry.getExtraAttributes(),", "+\t\t\t\t\t\t\tentry.isExported());", "+\t\t\t\tcase IResource.FOLDER :", "+\t\t\t\t\t// internal binary folder", "+\t\t\t\t\treturn JavaCore.newLibraryEntry(", "+\t\t\t\t\t\t\tresolvedPath,", "+\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentPath()),", "+\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()),", "+\t\t\t\t\t\t\tentry.getAccessRules(),", "+\t\t\t\t\t\t\tentry.getExtraAttributes(),", "+\t\t\t\t\t\t\tentry.isExported());", "+\t\t\t}", "+\t\t}", "+\t\tif (target instanceof File) {", "+\t\t\tFile externalFile = JavaModel.getFile(target);", "+\t\t\tif (externalFile != null) {", "+\t\t\t\t// external binary archive", "+\t\t\t\treturn JavaCore.newLibraryEntry(", "+\t\t\t\t\t\tresolvedPath,", "+\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentPath()),", "+\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()),", "+\t\t\t\t\t\tentry.getAccessRules(),", "+\t\t\t\t\t\tentry.getExtraAttributes(),", "+\t\t\t\t\t\tentry.isExported());", "+\t\t\t} else { ", "+\t\t\t\t// non-existing file", "+\t\t\t\tif (resolvedPath.isAbsolute()){", "+\t\t\t\t\treturn JavaCore.newLibraryEntry(", "+\t\t\t\t\t\t\tresolvedPath,", "+\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentPath()),", "+\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()),", "+\t\t\t\t\t\t\tentry.getAccessRules(),", "+\t\t\t\t\t\t\tentry.getExtraAttributes(),", "+\t\t\t\t\t\t\tentry.isExported());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} ", "+\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fad78ca23dcee6910e55546bddd44f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelStatus.java", "commitBeforeChange": "f39402d13165cb2a8baa9e8822f47cb5416f824f", "commitAfterChange": "c59f5d3873f087b004eace9b9fa6844d0400c666", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic String getMessage()", "signatureAfterChange": " \tpublic String getMessage()", "diff": ["+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+\t\t\t\tcase CP_CONTAINER_PATH_UNBOUND:", "+\t\t\t\t\tIPath path = this.fPath;", "+\t\t\t\t\tIJavaProject javaProject = (IJavaProject)fElements[0];", "+\t\t\t\t\tClasspathContainerInitializer initializer = JavaCore.getClasspathContainerInitializer(path.segment(0));", "+\t\t\t\t\tString description = null;", "+\t\t\t\t\tif (initializer != null) description = initializer.getDescription(path, javaProject);", "+\t\t\t\t\tif (description == null) description = path.makeRelative().toString();", "+\t\t\t\t\treturn Util.bind(\"classpath.unboundContainerPath\", description); //$NON-NLS-1$", "+", "+\t\t\t\tcase INVALID_CP_CONTAINER_ENTRY:", "+\t\t\t\t\tpath = this.fPath;", "+\t\t\t\t\tjavaProject = (IJavaProject)fElements[0];", "+\t\t\t\t\tIClasspathContainer container = null;", "+\t\t\t\t\tdescription = null;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tcontainer = JavaCore.getClasspathContainer(path, javaProject);", "+\t\t\t\t\t} catch(JavaModelException e){", "+\t\t\t\t\t}", "+\t\t\t\t\tif (container == null) {", "+\t\t\t\t\t\t initializer = JavaCore.getClasspathContainerInitializer(path.segment(0));", "+\t\t\t\t\t\tif (initializer != null) description = initializer.getDescription(path, javaProject);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tdescription = container.getDescription();", "+\t\t\t\t\t}", "+\t\t\t\t\tif (description == null) description = path.makeRelative().toString();", "+\t\t\t\t\treturn Util.bind(\"classpath.invalidContainer\", description); //$NON-NLS-1$", "+", "+\t\t\tcase CP_VARIABLE_PATH_UNBOUND:", "+\t\t\t\t\tpath = this.fPath;", "+\t\t\t\t\treturn Util.bind(\"classpath.unboundVariablePath\", path.makeRelative().toString()); //$NON-NLS-1$", "+\t\t\t\t\t", "+\t\t\tcase CLASSPATH_CYCLE: // TODO: getMessage for CLASSPATH_CYCLE", "+\t\t\t\t\tjavaProject = (IJavaProject)fElements[0];", "+\t\t\t\t\treturn Util.bind(\"classpath.cycle\", javaProject.getElementName()); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\t\t\t\t ", "+\t\t\tcase DISABLED_CP_EXCLUSION_PATTERNS:", "+\t\t\t\t\tpath = this.fPath;", "+\t\t\t\t\treturn Util.bind(\"classpath.disabledExclusionPatterns\", path.makeRelative().toString()); //$NON-NLS-1$", "+", "+\t\t\tcase DISABLED_CP_MULTIPLE_OUTPUT_LOCATIONS:", "+\t\t\t\t\tpath = this.fPath;", "+\t\t\t\t\treturn Util.bind(\"classpath.disabledMultipleOutputLocations\", path.makeRelative().toString()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98d4587ebbd4a09fba68395e058ad4a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 88, "signatureBeforeChange": " \tpublic void testExampleSnippets()", "signatureAfterChange": " \tpublic void testExampleSnippets()", "diff": ["-\t\t\tAST localAst = new AST();", "+\t\t\tAST localAst;", "+\t\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\t\tlocalAst = AST.newAST2();", "+\t\t\t} else {", "+\t\t\t\tlocalAst = AST.newAST3();", "+\t\t\t}", "-\t\t\ttd.setModifiers(Modifier.PUBLIC);", "+\t\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\t\ttd.setModifiers(Modifier.PUBLIC);", "+\t\t\t} else {", "+\t\t\t\ttd.modifiers().add(localAst.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD));", "+\t\t\t}", "-\t\t\tfd.setModifiers(Modifier.PRIVATE | Modifier.STATIC);", "+\t\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\t\tfd.setModifiers(Modifier.PRIVATE | Modifier.FINAL);", "+\t\t\t} else {", "+\t\t\t\tfd.modifiers().add(localAst.newModifier(Modifier.ModifierKeyword.PRIVATE_KEYWORD));", "+\t\t\t\tfd.modifiers().add(localAst.newModifier(Modifier.ModifierKeyword.STATIC_KEYWORD));", "+\t\t\t}", "-\t\t\tmd.setModifiers(Modifier.PUBLIC | Modifier.STATIC);", "+\t\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\t\tmd.setModifiers(Modifier.PUBLIC | Modifier.STATIC);", "+\t\t\t\tmd.setReturnType(localAst.newPrimitiveType(PrimitiveType.VOID));", "+\t\t\t} else {", "+\t\t\t\tmd.modifiers().add(localAst.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD));", "+\t\t\t\tmd.modifiers().add(localAst.newModifier(Modifier.ModifierKeyword.STATIC_KEYWORD));", "+\t\t\t\tmd.setReturnType2(localAst.newPrimitiveType(PrimitiveType.VOID));", "+\t\t\t}", "-\t\t\tmd.setReturnType(localAst.newPrimitiveType(PrimitiveType.VOID));", "-\t\t\tcr1.setName(localAst.newSimpleName(\"String\")); //$NON-NLS-1$", "+\t\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\t\tcr1.setName(localAst.newSimpleName(\"String\")); //$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tcr1.setType(localAst.newSimpleType(localAst.newSimpleName(\"String\"))); //$NON-NLS-1$", "+\t\t\t}", "-\t\t\tcr2.setName(localAst.newSimpleName(\"Listener\")); //$NON-NLS-1$", "+\t\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\t\tcr2.setName(localAst.newSimpleName(\"Listener\")); //$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tcr2.setType(localAst.newSimpleType(localAst.newSimpleName(\"Listener\"))); //$NON-NLS-1$", "+\t\t\t}", "-\t\t\tmd0.setModifiers(Modifier.PUBLIC);", "+\t\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\t\tmd0.setModifiers(Modifier.PUBLIC);", "+\t\t\t} else {", "+\t\t\t\tmd0.modifiers().add(localAst.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD));", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a13042c373372e8f5b6716ac9577a0cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "b1ce5a863ad0a541f80dd0793ff207f1e4ecf677", "commitAfterChange": "72d60854091bd7e8a5aafafdfea62cc297a3eb41", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate static SearchPattern createTypePattern(String patternString, int limitTo, int matchRule)", "signatureAfterChange": " \tprivate static SearchPattern createTypePattern(String patternString, int limitTo, int matchRule)", "diff": ["+\t\tboolean storeType = true, storeParam = true;", "+\t\tint parameterized = 0;", "+\t\tint paramPtr = -1;", "+\t\tchar[][] paramNames = null;", "+\t\tint[] wildcards = new int[10];", "-\t\t\tswitch (token) {", "-\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE:", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault: // all other tokens are considered identifiers (see bug 21763 Problem in Java search [search])", "+\t\t\tif (token != TerminalTokens.TokenNameWHITESPACE) {", "+\t\t\t\tif (storeParam) {", "+\t\t\t\t\tswitch (token) {", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameMULTIPLY:", "+\t\t\t\t\t\t\tif (parameterized > 0) {", "+\t\t\t\t\t\t\t\t// SEARCH_15 (frederic) Not treated yet...", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameQUESTION:", "+\t\t\t\t\t\t\tif (parameterized > 0) {", "+\t\t\t\t\t\t\t\tif (wildcards[paramPtr] == -1) {", "+\t\t\t\t\t\t\t\t\twildcards[paramPtr] = Wildcard.UNBOUND;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t// SEARCH_15 (frederic) Invalid syntax", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameextends:", "+\t\t\t\t\t\t\tif (parameterized > 0) {", "+\t\t\t\t\t\t\t\tif (wildcards[paramPtr] == Wildcard.UNBOUND) {", "+\t\t\t\t\t\t\t\t\twildcards[paramPtr] = Wildcard.EXTENDS;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t// SEARCH_15 (frederic) Invalid syntax", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNamesuper:", "+\t\t\t\t\t\t\tif (parameterized > 0) {", "+\t\t\t\t\t\t\t\tif (wildcards[paramPtr] == Wildcard.UNBOUND) {", "+\t\t\t\t\t\t\t\t\twildcards[paramPtr] = Wildcard.SUPER;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t// SEARCH_15 (frederic) Invalid syntax", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameCOMMA:", "+\t\t\t\t\t\t\tif (parameterized == 1) {", "+\t\t\t\t\t\t\t\tparamPtr++;", "+\t\t\t\t\t\t\t\twildcards[paramPtr] = -1;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameGREATER:", "+\t\t\t\t\t\t\tif (parameterized == 1) storeParam = false;", "+\t\t\t\t\t\t\tparameterized--;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameLESS:", "+\t\t\t\t\t\t\tif (parameterized == 0) {", "+\t\t\t\t\t\t\t\tparamNames = new char[10][]; // 10 parameters max", "+\t\t\t\t\t\t\t\tparamPtr++;", "+\t\t\t\t\t\t\t\twildcards[paramPtr] = -1;", "+\t\t\t\t\t\t\t\tstoreType = false;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tparameterized++;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier:", "+\t\t\t\t\t\t\tif (parameterized == 1 && storeParam) {", "+\t\t\t\t\t\t\t\tif (paramPtr < paramNames.length) {", "+\t\t\t\t\t\t\t\t\tif (paramNames[paramPtr] == null) {", "+\t\t\t\t\t\t\t\t\t\t// never store id at this index", "+\t\t\t\t\t\t\t\t\t\tparamNames[paramPtr] = scanner.getCurrentIdentifierSource();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t// syntax error", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (storeType) { // store type if not in type arguments declaration", "+\t\t\t\t}", "+\t\t\t\tstoreType = parameterized == 0;", "+\t\t// Resize param names array if necessary", "+\t\tif (paramPtr >= 0) {", "+\t\t\tSystem.arraycopy(paramNames, 0, paramNames = new char[paramPtr+1][], 0, paramPtr+1);", "+\t\t\tSystem.arraycopy(wildcards, 0, wildcards = new int[paramPtr+1], 0, paramPtr+1);", "+\t\t}", "-\t\t\t\treturn new TypeReferencePattern(qualificationChars, typeChars, matchRule);", "+\t\t\t\treturn new TypeReferencePattern(qualificationChars, typeChars, paramNames, false /* not generic */, wildcards, matchRule);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea20ac501e5fc515ac2c3c8db85a3e3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 416, "methodNumberAfterChange": 503, "signatureBeforeChange": " \tASTNode oneOfEach(AST target)", "signatureAfterChange": " \tASTNode oneOfEach(AST target)", "diff": ["-\t", "+", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tEnumDeclaration ed = target.newEnumDeclaration();", "+\t\t\ttd.bodyDeclarations().add(ed);\t", "+\t\t\tEnumConstantDeclaration ec = target.newEnumConstantDeclaration();", "+\t\t\ted.bodyDeclarations().add(ec);\t", "+\t\t}", "+\t\t", "-\t\tvariableDeclarationFragment.setInitializer(qn);", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tSimpleType st = target.newSimpleType(qn);", "+\t\t\tQualifiedType qt = target.newQualifiedType(st, target.newSimpleName(\"x\")); //$NON-NLS-1$", "+\t\t\tWildcardType wt = target.newWildcardType();", "+\t\t\tParameterizedType pmt = target.newParameterizedType(target.newSimpleName(\"y\")); //$NON-NLS-1$", "+\t\t\tpmt.typeArguments().add(wt);", "+\t\t\tpmt.typeArguments().add(qt);", "+\t\t\tmd.setReturnType2(pmt);", "+\t\t}", "+\t\t", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tEnhancedForStatement foreachStatement = target.newEnhancedForStatement();", "+\t\t\tb.statements().add(foreachStatement);", "+\t\t}", "+\t\t// annotations", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tAnnotationTypeDeclaration atd = target.newAnnotationTypeDeclaration();", "+\t\t\tcu.types().add(atd);", "+\t\t\tatd.bodyDeclarations().add(target.newAnnotationTypeMemberDeclaration());", "+\t\t\ttd.modifiers().add(target.newMarkerAnnotation());", "+\t\t\ttd.modifiers().add(target.newSingleMemberAnnotation());", "+\t\t\tNormalAnnotation an0 = target.newNormalAnnotation();", "+\t\t\ttd.modifiers().add(an0);", "+\t\t\tan0.values().add(target.newMemberValuePair());", "+\t\t\ttd.modifiers().add(target.newModifier(Modifier.ModifierKeyword.PRIVATE_KEYWORD));", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f91d71235024ca28ddd6e7b42cfeb5d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTRecoveryPropagator.java", "commitBeforeChange": "51c6ca3e4dfed3078a1640da7a2ab7f26c899e0a", "commitAfterChange": "de8aa9940086fe152901aa168536f30670945804", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void endVisit(Block node)", "signatureAfterChange": "  \tpublic void endVisit(Block node)", "diff": ["+\t\tint level = node.getAST().apiLevel;", "+\t\t", "+\t\tList statements = node.statements();", "+\t\tnext : for (int i = 0, max = statements.size(); i < max; i++) {", "+\t\t\tASTNode statement = (ASTNode) statements.get(i);", "+\t\t\tif (statement.getNodeType() == ASTNode.VARIABLE_DECLARATION_STATEMENT) {", "+\t\t\t\tVariableDeclarationStatement variableDeclarationStatement =  (VariableDeclarationStatement) statement;", "+\t\t\t\t", "+\t\t\t\tif (level == AST.JLS2_INTERNAL) {", "+\t\t\t\t\tif (variableDeclarationStatement.getModifiers() != Modifier.NONE) {", "+\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (level >= AST.JLS3_INTERNAL) {", "+\t\t\t\t\tif (variableDeclarationStatement.modifiers().size() != 0) {", "+\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tType type = variableDeclarationStatement.getType();", "+\t\t\t\tif (type.getNodeType() != ASTNode.SIMPLE_TYPE) {", "+\t\t\t\t\tcontinue next;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tList fragments = variableDeclarationStatement.fragments();", "+\t\t\t\tif (fragments.size() == 1) {", "+\t\t\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "+\t\t\t\t\t", "+\t\t\t\t\tSimpleName simpleName = fragment.getName();", "+\t\t\t\t\tif (CharOperation.equals(RecoveryScanner.FAKE_IDENTIFIER, simpleName.getIdentifier().toCharArray())) {", "+\t\t\t\t\t\tSimpleType simpleType = (SimpleType) type;", "+\t\t\t\t\t\tName name = simpleType.getName();", "+\t\t\t\t\t\tname.setParent(null, null);", "+\t\t\t\t\t\tname.setFlags(name.getFlags() | ASTNode.RECOVERED);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tfinal ExpressionStatement stmt = new ExpressionStatement(name.getAST());", "+\t\t\t\t\t\tstmt.setExpression(name);", "+\t\t\t\t\t\tstmt.setSourceRange(variableDeclarationStatement.getStartPosition(), variableDeclarationStatement.getLength());", "+\t\t\t\t\t\tstmt.setFlags(stmt.getFlags() | ASTNode.RECOVERED);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tstatements.add(i, stmt);", "+\t\t\t\t\t\tstatements.remove(variableDeclarationStatement);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t"]}], "num": 29687}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2bd5167b7eca176116ca699e815a8de5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b6b3618799d7cf4ee11148aec3f7849", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "8ca0d4068ff2e48c52b6cad25c5d2f5c2d9eace8", "commitAfterChange": "dedf5307e666f4e1475605b0b89aaf9292d38bf4", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 30, "signatureBeforeChange": "\r \r private MethodInfo[] removeSyntheticMethodsInfos(MethodInfo[] methodInfos)", "signatureAfterChange": "\r private boolean hasNonSyntheticMethodChanges(MethodInfo[] currentMethodInfos, MethodInfo[] otherMethodInfos)", "diff": ["+}\r", "+private boolean hasNonSyntheticMethodChanges(MethodInfo[] currentMethodInfos, MethodInfo[] otherMethodInfos) {\r", "+\tint length1 = currentMethodInfos == null ? 0 : currentMethodInfos.length;\r", "+\tint length2 = otherMethodInfos == null ? 0 : otherMethodInfos.length;\r", "+\tint index1 = 0;\r", "+\tint index2 = 0;\r", "+\r", "+\tend : while (index1 < length1 && index2 < length2) {\r", "+\t\twhile (currentMethodInfos[index1].isSynthetic()) {\r", "+\t\t\tif (++index1 >= length1) break end;\r", "+\t\t}\r", "+\t\twhile (otherMethodInfos[index2].isSynthetic()) {\r", "+\t\t\tif (++index2 >= length2) break end;\r", "+\t\t}\r", "+\t\tif (hasStructuralMethodChanges(currentMethodInfos[index1++], otherMethodInfos[index2++]))\r", "+\t\t\treturn true;\r", "+\t}\r", "+\r", "+\twhile (index1 < length1) {\r", "+\t\tif (!currentMethodInfos[index1++].isSynthetic()) return true;\r", "+\t}\r", "+\twhile (index2 < length2) {\r", "+\t\tif (!otherMethodInfos[index2++].isSynthetic()) return true;\r", "-\r", "-private MethodInfo[] removeSyntheticMethodsInfos(MethodInfo[] methodInfos) {\r", "-\tif (methodInfos == null) return methodInfos;\r", "-\t// remove synthetic fields\r", "-\tint methodInfosLength = methodInfos.length;\r", "-\tint methodInfosWithoutSyntheticsLength = methodInfosLength;\r", "-\tfor (int i = 0; i < methodInfosLength; i++) {\r", "-\t\tif (methodInfos[i].isSynthetic()) {\r", "-\t\t\tmethodInfosWithoutSyntheticsLength--;\r", "-\t\t}\r", "-\t}\r", "-\tMethodInfo[] methodInfosWithoutSynthetics = methodInfos;\r", "-\tif (methodInfosWithoutSyntheticsLength != methodInfosLength) {\r", "-\t\tmethodInfosWithoutSynthetics = new MethodInfo[methodInfosWithoutSyntheticsLength];\r", "-\t\tmethodInfosWithoutSyntheticsLength = 0;\r", "-\t\tfor (int i = 0; i < methodInfosLength; i++) {\r", "-\t\t\tif (!methodInfos[i].isSynthetic()) {\r", "-\t\t\t\tmethodInfosWithoutSynthetics[methodInfosWithoutSyntheticsLength++] = methodInfos[i];\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\treturn methodInfosWithoutSynthetics;\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f11f3d86536877b6d2858777f0a50931", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "8ca0d4068ff2e48c52b6cad25c5d2f5c2d9eace8", "commitAfterChange": "dedf5307e666f4e1475605b0b89aaf9292d38bf4", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 28, "signatureBeforeChange": "\t\t\t\r \r private FieldInfo[] removeSyntheticFieldsInfos(FieldInfo[] fieldInfos)", "signatureAfterChange": "\r private boolean hasNonSyntheticFieldChanges(FieldInfo[] currentFieldInfos, FieldInfo[] otherFieldInfos)", "diff": ["+private boolean hasNonSyntheticFieldChanges(FieldInfo[] currentFieldInfos, FieldInfo[] otherFieldInfos) {\r", "+\tint length1 = currentFieldInfos == null ? 0 : currentFieldInfos.length;\r", "+\tint length2 = otherFieldInfos == null ? 0 : otherFieldInfos.length;\r", "+\tint index1 = 0;\r", "+\tint index2 = 0;\r", "+\tend : while (index1 < length1 && index2 < length2) {\r", "+\t\twhile (currentFieldInfos[index1].isSynthetic()) {\r", "+\t\t\tif (++index1 >= length1) break end;\r", "+\t\twhile (otherFieldInfos[index2].isSynthetic()) {\r", "+\t\t\tif (++index2 >= length2) break end;\r", "+\t\t}\r", "+\t\tif (hasStructuralFieldChanges(currentFieldInfos[index1++], otherFieldInfos[index2++]))\r", "+\t\t\treturn true;\r", "+\t}\r", "+\r", "+\twhile (index1 < length1) {\r", "+\t\tif (!currentFieldInfos[index1++].isSynthetic()) return true;\r", "+\t}\r", "+\twhile (index2 < length2) {\r", "+\t\tif (!otherFieldInfos[index2++].isSynthetic()) return true;\r", "+\t}\r", "+\treturn false;\r", "+}\r", "-\r", "-private FieldInfo[] removeSyntheticFieldsInfos(FieldInfo[] fieldInfos) {\r", "-\tif (fieldInfos == null) return fieldInfos;\r", "-\t// remove synthetic fields\r", "-\tint fieldInfosLength = fieldInfos.length;\r", "-\tint fieldInfosWithoutSyntheticsLength = fieldInfosLength;\r", "-\r", "-\tfor (int i = 0; i < fieldInfosLength; i++) {\r", "-\t\tif (fieldInfos[i].isSynthetic()) {\r", "-\t\t\tfieldInfosWithoutSyntheticsLength--;\r", "-\t\t}\r", "-\t}\r", "-\tFieldInfo[] fieldInfosWithoutSynthetics = fieldInfos;\r", "-\tif (fieldInfosWithoutSyntheticsLength != fieldInfosLength) {\r", "-\t\tfieldInfosWithoutSynthetics = new FieldInfo[fieldInfosWithoutSyntheticsLength];\r", "-\t\tfieldInfosWithoutSyntheticsLength = 0;\r", "-\t\tfor (int i = 0; i < fieldInfosLength; i++) {\r", "-\t\t\tif (!fieldInfos[i].isSynthetic()) {\r", "-\t\t\t\tfieldInfosWithoutSynthetics[fieldInfosWithoutSyntheticsLength++] = fieldInfos[i];\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\treturn fieldInfosWithoutSynthetics;\r", "-}\r"]}], "num": 65625}
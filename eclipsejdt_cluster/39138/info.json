{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "92843d0dbb6c522950af557dc740c9f1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d64878b80a44e0cd8a9774c5547a582", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "8afc6c2545b5de051c1a37845dcbdbb43865eacc", "commitAfterChange": "02f0314baf345f99ed9121a26e25ddbfb9c11d17", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprivate void checkAndSetModifiers()", "signatureAfterChange": "  \tprivate void checkAndSetModifiers()", "diff": ["-\t\t\t} else if (sourceType.isLocalType()) { // each enum constant is an anonymous local type", "-\t\t\t\tfinal int UNEXPECTED_MODIFIERS = ~(ClassFileConstants.AccStrictfp | ClassFileConstants.AccFinal | ClassFileConstants.AccEnum); // add final since implicitly set for anonymous type", "-\t\t\t\tif ((realModifiers & UNEXPECTED_MODIFIERS) != 0)", "-\t\t\t\t\tproblemReporter().illegalModifierForLocalEnum(sourceType);", "+\t\t\t} else if (sourceType.isLocalType()) {", "+\t\t\t\t// each enum constant is an anonymous local type and its modifiers were already checked as an enum constant field"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c35b77f50eab59ab3e6c3001c11ff1ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "48ab17cbdf3deccaf2dbadd198bb57e5a4382148", "commitAfterChange": "977778c5ffb93962a86b77e68d84b35e620d598d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " private MethodBinding createMethod(IBinaryMethod method, long sourceLevel)", "signatureAfterChange": " private MethodBinding createMethod(IBinaryMethod method, long sourceLevel)", "diff": ["-\t\t\t\tint startIndex = (method.isConstructor() && isMemberType() && !isStatic()) ? 1 : 0;", "-\t\t\t\tif (startIndex == 1)", "-\t\t\t\t\tenvironment.getTypeFromTypeSignature(wrapper, typeVars, this); // skip synthetic argument", "-\t\t\t\twhile (wrapper.signature[wrapper.start] != ')') {", "+\t\t\t\twhile (wrapper.signature[wrapper.start] != ')')", "-\t\t\t\t}", "-\tif (use15specifics) {", "+\tif (use15specifics)", "-\t}", "-\tfor (int i = 0, length = typeVars.length; i < length; i++) {", "+\tfor (int i = 0, length = typeVars.length; i < length; i++)", "-\t}"]}], "num": 39138}
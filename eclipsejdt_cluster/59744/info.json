{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "525df553976af737016e9ef1e9c02917", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "553896d77c9aeaf70c770968000ae9aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "3022496b74f0bbeccd974aa8b5d23fb3438cc799", "commitAfterChange": "0841b38e29c9b9a090c0d849b31ae1e8b6484d97", "methodNumberBeforeChange": 557, "methodNumberAfterChange": 557, "signatureBeforeChange": " public void testCompletionStaticMethodDeclaration1() throws JavaModelException", "signatureAfterChange": " public void testCompletionStaticMethodDeclaration1() throws JavaModelException", "diff": ["-\tCompletionTestsRequestor requestor = new CompletionTestsRequestor();", "-\tICompilationUnit cu= getCompilationUnit(\"Completion\", \"src\", \"\", \"CompletionStaticMethodDeclaration1.java\");", "-", "-\tString str = cu.getSource();", "-\tString completeBehind = \"foo\";", "-\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "-\tcu.codeComplete(cursorLocation, requestor);", "-", "-\tassertEquals(", "-\t\t\t\"element:foo    completion:public static void foo()    relevance:\" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_RESTRICTED) + \"\\n\" +", "-\t\t\t\"element:foo0    completion:public void foo0()    relevance:\" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED),", "-\t\t\trequestor.getResults());", "+\tICompilationUnit aType = null;", "+\ttry {", "+\t\taType = getWorkingCopy(", "+\t            \"/Completion/src/TypeWithAMethodAndAStaticMethod .java\",", "+\t            \"public class TypeWithAMethodAndAStaticMethod {\\n\"+", "+\t            \"\tpublic static void foo(){}\\n\"+", "+\t            \"\tpublic void foo0(){}\\n\"+", "+\t            \"}\");", "+\t\t", "+\t\tthis.wc = getWorkingCopy(", "+\t            \"/Completion/src/CompletionStaticMethodDeclaration1.java\",", "+\t            \"public class CompletionStaticMethodDeclaration1 extends TypeWithAMethodAndAStaticMethod {\\n\"+", "+\t            \"\tfoo\\n\"+", "+\t            \"}\");", "+\t    ", "+\t    ", "+\t    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\t    String str = this.wc.getSource();", "+\t    String completeBehind = \"foo\";", "+\t    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+\t    this.wc.codeComplete(cursorLocation, requestor, this.owner);", "+\t", "+\t\tassertResults(", "+\t\t\t\t\"foo[POTENTIAL_METHOD_DECLARATION]{foo, LCompletionStaticMethodDeclaration1;, ()V, foo, null, \" + (R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"foo0[METHOD_DECLARATION]{public void foo0(), LTypeWithAMethodAndAStaticMethod;, ()V, foo0, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_METHOD_OVERIDE + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\trequestor.getResults());", "+\t} finally {", "+\t\tif(aType != null) {", "+\t\t\taType.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3bfb32331dd28f875a6433522e0b33a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "3022496b74f0bbeccd974aa8b5d23fb3438cc799", "commitAfterChange": "0841b38e29c9b9a090c0d849b31ae1e8b6484d97", "methodNumberBeforeChange": 562, "methodNumberAfterChange": 562, "signatureBeforeChange": " public void testCompletionStaticMethodDeclaration6() throws JavaModelException", "signatureAfterChange": " public void testCompletionStaticMethodDeclaration6() throws JavaModelException", "diff": ["-\tCompletionTestsRequestor requestor = new CompletionTestsRequestor();", "-\tICompilationUnit cu= getCompilationUnit(\"Completion\", \"src\", \"\", \"CompletionStaticMethodDeclaration6.java\");", "-", "-\tString str = cu.getSource();", "-\tString completeBehind = \"foo\";", "-\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "-\tcu.codeComplete(cursorLocation, requestor);", "-", "-\tassertEquals(", "-\t\t\t\"element:foo0    completion:public void foo0()    relevance:\" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED),", "-\t\t\trequestor.getResults());", "+\tICompilationUnit aType = null;", "+\ttry {", "+\t\taType = getWorkingCopy(", "+\t            \"/Completion/src/TypeWithAMethodAndAStaticMethod .java\",", "+\t            \"public class TypeWithAMethodAndAStaticMethod {\\n\"+", "+\t            \"\tpublic static void foo(){}\\n\"+", "+\t            \"\tpublic void foo0(){}\\n\"+", "+\t            \"}\");", "+\t\t\t", "+\t\tthis.wc = getWorkingCopy(", "+\t            \"/Completion/src/CompletionStaticMethodDeclaration6.java\",", "+\t            \"public class CompletionStaticMethodDeclaration6 {\\n\"+", "+\t            \"\tvoid bar() {\\n\"+", "+\t            \"\t\tnew TypeWithAMethodAndAStaticMethod() {\\n\"+", "+\t            \"\t\t\tfoo\\n\"+", "+\t            \"\t\t};\\n\"+", "+\t            \"\t}\\n\"+", "+\t            \"}\");", "+\t    ", "+\t    ", "+\t    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\t    String str = this.wc.getSource();", "+\t    String completeBehind = \"foo\";", "+\t    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+\t    this.wc.codeComplete(cursorLocation, requestor, this.owner);", "+\t", "+\t\tassertResults(", "+\t\t\t\t\"foo[POTENTIAL_METHOD_DECLARATION]{foo, LTypeWithAMethodAndAStaticMethod;, ()V, foo, null, \" + (R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"foo0[METHOD_DECLARATION]{public void foo0(), LTypeWithAMethodAndAStaticMethod;, ()V, foo0, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_METHOD_OVERIDE + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\trequestor.getResults());", "+\t} finally {", "+\t\tif(aType != null) {", "+\t\t\taType.discardWorkingCopy();", "+\t\t}", "+\t}"]}], "num": 59744}
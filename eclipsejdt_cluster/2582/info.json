{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e710de347e2740c56f0d9fd0124cb821", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9e25eb9243f940a7bc0cb3b561829c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemHandler.java", "commitBeforeChange": "3c9fcd486312b0a7ab40ed5ba3b6e46d9bce5dc9", "commitAfterChange": "7e8a00ed0fb06969786f78f88b755624a0317803", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void handle( \tint problemId, \tString[] problemArguments, \tint elaborationId, \tString[] messageArguments, \tint severity, \tint problemStartPosition, \tint problemEndPosition, \tReferenceContext referenceContext, \tCompilationResult unitResult)", "signatureAfterChange": " public void handle( \tint problemId, \tString[] problemArguments, \tint elaborationId, \tString[] messageArguments, \tint severity, \tint problemStartPosition, \tint problemEndPosition, \tReferenceContext referenceContext, \tCompilationResult unitResult)", "diff": ["+\t\t\t\t// don't abort or tag as error if the error is suppressed", "+\t\t\t\tif (!referenceContext.hasErrors() && (severity & ProblemSeverities.Optional) != 0 && this.options.suppressOptionalErrors) {", "+\t\t\t\t\tCompilationUnitDeclaration unitDecl = referenceContext.getCompilationUnitDeclaration();", "+\t\t\t\t\tif (unitDecl != null && unitDecl.isSuppressed(problem)) {", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffca3f599bd82905682267e2b2978d49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ea2fc86434ecfa29af7662d0b72f2fa65bd907c6", "commitAfterChange": "78c270cb0e8bf81b3b471a8bdedbb8d9bf04e016", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \t \tpublic boolean isInsideDeprecatedCode()", "signatureAfterChange": " \t \tpublic boolean isInsideDeprecatedCode()", "diff": ["+\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :", "+\t\t\t\t// consider import as being deprecated if first type is itself deprecated (123522)", "+\t\t\t\tCompilationUnitDeclaration unit = referenceCompilationUnit();", "+\t\t\t\tif (unit.types != null && unit.types.length > 0) {", "+\t\t\t\t\tSourceTypeBinding type = unit.types[0].binding;", "+\t\t\t\t\tif (type != null && type.isViewedAsDeprecated())", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t}"]}], "num": 2582}
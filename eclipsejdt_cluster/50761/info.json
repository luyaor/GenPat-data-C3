{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cbf012eddd0a661610848c1b4b3f1193", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37ea1e69968c4bfee933ee61b8e2e18d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "ac2c3539b72e65a4a4e0b168769da151e63c5ff1", "commitAfterChange": "014710437062a15282800b8efb747a8973068ba8", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " \t \tprivate void setJavaDocComment(BodyDeclaration bodyDeclaration)", "signatureAfterChange": "  \tpublic Javadoc convert(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc)", "diff": ["-\t", "-\t\tscanner.resetTo(bodyDeclaration.getStartPosition(), bodyDeclaration.getStartPosition() + bodyDeclaration.getLength());", "-\t\ttry {", "-\t\t\tint token;", "-\t\t\twhile ((token = scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_JAVADOC: //1003", "-\t\t\t\t\t\tJavadoc javadocComment = this.ast.newJavadoc();", "-\t\t\t\t\t\tint start = scanner.startPosition;", "-\t\t\t\t\t\tint length = scanner.currentPosition - start;", "-\t\t\t\t\t\tchar[] contents = new char[length];", "-\t\t\t\t\t\tSystem.arraycopy(this.compilationUnitSource, start, contents, 0, length);", "-\t\t\t\t\t\tsetDeprecatedComment(javadocComment, contents);", "-\t\t\t\t\t\tjavadocComment.setSourceRange(start, length);", "-\t\t\t\t\t\tbodyDeclaration.setJavadoc(javadocComment);", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\tdefault :", "-\t\t\t\t\t\treturn;", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "+", "+\tpublic Javadoc convert(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc) {", "+\t\tif (javadoc != null) {", "+\t\t\tDefaultCommentMapper mapper = new DefaultCommentMapper(this.commentsTable);", "+\t\t\tComment comment = mapper.getComment(javadoc.sourceStart);", "+\t\t\tif (comment != null && comment.isDocComment()) {", "+\t\t\t\tJavadoc docComment = (Javadoc) comment;", "+\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\trecordNodes(docComment, javadoc);", "+\t\t\t\t\t// resolve member and method references binding", "+\t\t\t\t\tIterator tags = docComment.tags().listIterator();", "+\t\t\t\t\twhile (tags.hasNext()) {", "+\t\t\t\t\t\tTagElement tagElement = (TagElement) tags.next();", "+\t\t\t\t\t\tIterator fragments = tagElement.fragments().listIterator();", "+\t\t\t\t\t\twhile (fragments.hasNext()) {", "+\t\t\t\t\t\t\tASTNode node = (ASTNode) fragments.next();", "+\t\t\t\t\t\t\tif (node.getNodeType() == ASTNode.MEMBER_REF) {", "+\t\t\t\t\t\t\t\tint start = node.getStartPosition();", "+\t\t\t\t\t\t\t\tName name = ((MemberRef)node).getName();", "+\t\t\t\t\t\t\t\tif (name != null) start = name.getStartPosition();", "+\t\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(start);", "+\t\t\t\t\t\t\t\tif (compilerNode != null) {", "+\t\t\t\t\t\t\t\t\trecordNodes(node, compilerNode);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (node.getNodeType() == ASTNode.METHOD_REF) {", "+\t\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(node.getStartPosition());", "+\t\t\t\t\t\t\t\tif (compilerNode != null) {", "+\t\t\t\t\t\t\t\t\trecordNodes(node, compilerNode);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (node.getNodeType() == ASTNode.TAG_ELEMENT) {", "+\t\t\t\t\t\t\t\t// resolve member and method references binding", "+\t\t\t\t\t\t\t\tTagElement inlineTag = (TagElement) node;", "+\t\t\t\t\t\t\t\tIterator inlineFragments = inlineTag.fragments().listIterator();", "+\t\t\t\t\t\t\t\twhile (inlineFragments.hasNext()) {", "+\t\t\t\t\t\t\t\t\tASTNode inlineNode = (ASTNode) inlineFragments.next();", "+\t\t\t\t\t\t\t\t\tif (inlineNode.getNodeType() == ASTNode.MEMBER_REF || inlineNode.getNodeType() == ASTNode.METHOD_REF) {", "+\t\t\t\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(inlineNode.getStartPosition());", "+\t\t\t\t\t\t\t\t\t\tif (compilerNode != null) {", "+\t\t\t\t\t\t\t\t\t\t\trecordNodes(inlineNode, compilerNode);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn docComment;", "+\t\t\t}", "+\t\t}", "+\t\treturn null;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df5a3e8016d385ff850e372eaf29b490", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragment.java", "commitBeforeChange": "9de11e1c2a41a21613174b6ab91cab4369b64686", "commitAfterChange": "d8ffd58c7c4b7aeb0d38e216b7c221e9b8f78625", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " void computeNonJavaResources(String[] resNames, JarPackageFragmentInfo info, String zipName)", "signatureAfterChange": " void computeNonJavaResources(String[] resNames, JarPackageFragment pkg, JarPackageFragmentInfo info, String zipName)", "diff": ["-/* package */ void computeNonJavaResources(String[] resNames, JarPackageFragmentInfo info, String zipName) {", "+/* package */ void computeNonJavaResources(String[] resNames, JarPackageFragment pkg, JarPackageFragmentInfo info, String zipName) {", "-\t\tObject[] res = new Object[max];", "-\t\tint index = 0;", "+\t\tHashMap jarEntries = new HashMap(); // map from IPath to IJarEntryResource", "+\t\tHashMap childrenMap = new HashMap(); // map from IPath to ArrayList<IJarEntryResource>", "+\t\tArrayList topJarEntries = new ArrayList();", "-\t\t\t\tIPath parentRelativePath = new Path(resName).removeFirstSegments(this.names.length);", "-\t\t\t\tres[index++] = new JarEntryFile(resName, zipName, parentRelativePath);", "+\t\t\t\tIPath childPath = new Path(resName).removeFirstSegments(this.names.length);", "+\t\t\t\tJarEntryFile file = new JarEntryFile(resName, zipName, childPath);", "+\t\t\t\tjarEntries.put(childPath, file);", "+\t\t\t\tif (childPath.segmentCount() == 1) {", "+\t\t\t\t\tfile.setParent(pkg);", "+\t\t\t\t\ttopJarEntries.add(file);", "+\t\t\t\t} else {", "+\t\t\t\t\tIPath parentPath = childPath.removeLastSegments(1);", "+\t\t\t\t\twhile (parentPath.segmentCount() > 0) {", "+\t\t\t\t\t\tArrayList parentChildren = (ArrayList) childrenMap.get(parentPath);", "+\t\t\t\t\t\tif (parentChildren == null) {", "+\t\t\t\t\t\t\tObject dir = new JarEntryDirectory(parentPath);", "+\t\t\t\t\t\t\tjarEntries.put(parentPath, dir);", "+\t\t\t\t\t\t\tchildrenMap.put(parentPath, parentChildren = new ArrayList());", "+\t\t\t\t\t\t\tparentChildren.add(childPath);", "+\t\t\t\t\t\t\tif (parentPath.segmentCount() == 1) {", "+\t\t\t\t\t\t\t\ttopJarEntries.add(dir);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tchildPath = parentPath;", "+\t\t\t\t\t\t\tparentPath = childPath.removeLastSegments(1);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tparentChildren.add(childPath);", "+\t\t\t\t\t\t\tbreak; // all parents are already registered", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t} ", "-\t\tif (index != max) {", "-\t\t\tSystem.arraycopy(res, 0, res = new Object[index], 0, index);", "+\t\tIterator entries = childrenMap.entrySet().iterator();", "+\t\twhile (entries.hasNext()) {", "+\t\t\tMap.Entry entry = (Map.Entry) entries.next();", "+\t\t\tIPath entryPath = (IPath) entry.getKey();", "+\t\t\tArrayList entryValue =  (ArrayList) entry.getValue();", "+\t\t\tJarEntryDirectory jarEntryDirectory = (JarEntryDirectory) jarEntries.get(entryPath);", "+\t\t\tint size = entryValue.size();", "+\t\t\tIJarEntryResource[] children = new IJarEntryResource[size];", "+\t\t\tfor (int i = 0; i < size; i++) {", "+\t\t\t\tObject child = jarEntries.get(entryValue.get(i));", "+\t\t\t\tif (child instanceof JarEntryFile) {", "+\t\t\t\t\t((JarEntryFile) child).setParent(jarEntryDirectory);", "+\t\t\t\t} else {", "+\t\t\t\t\t((JarEntryDirectory) child).setParent(jarEntryDirectory);", "+\t\t\t\t}", "+\t\t\t\tchildren[i] = (IJarEntryResource) child;", "+\t\t\t}", "+\t\t\tjarEntryDirectory.setChildren(children);", "+\t\t\tif (entryPath.segmentCount() == 1) {", "+\t\t\t\tjarEntryDirectory.setParent(pkg);", "+\t\t\t}", "+\t\t}", "+\t\tObject[] res = topJarEntries.toArray(new Object[topJarEntries.size()]);"]}], "num": 50761}
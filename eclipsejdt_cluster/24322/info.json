{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "389c2ab9617b5725b2c78455a4e4bcf7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb0023aa935e960f1b97a647d7577026", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "9f0dbd12be2b0343b01b9196da38099302e8dc06", "commitAfterChange": "b184f2349eaec2fcfb27dfe305b657dc3486d80d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void destroy()", "signatureAfterChange": " public void destroy()", "diff": ["-\t\tclose();", "-\t\t", "-\t\t// if original element is not on classpath flush it from the cache ", "-\t\tIJavaElement originalElement = this.getOriginalElement();", "-\t\tif (!this.getParent().exists()) {", "-\t\t\t((CompilationUnit)originalElement).close();", "-\t\t}", "-\t\t", "-\t\t// remove working copy from the cache", "-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t", "-\t\t// In order to be shared, working copies have to denote the same compilation unit ", "-\t\t// AND use the same buffer factory.", "-\t\t// Assuming there is a little set of buffer factories, then use a 2 level Map cache.", "-\t\tMap sharedWorkingCopies = manager.sharedWorkingCopies;", "-\t\t", "-\t\tMap perFactoryWorkingCopies = (Map) sharedWorkingCopies.get(this.bufferFactory);", "-\t\tif (perFactoryWorkingCopies != null){", "-\t\t\tRemoveSharedWorkingCopyOperation op = new RemoveSharedWorkingCopyOperation(originalElement, perFactoryWorkingCopies);", "-\t\t\trunOperation(op, null);", "-\t\t}\t\t", "+\t\tDestroyWorkingCopyOperation op = new DestroyWorkingCopyOperation(this);", "+\t\trunOperation(op, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c87980024749bc19bfb00569699bfac4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DiscardWorkingCopyOperation.java", "commitBeforeChange": "5b7577970cc1147a47fff02a981297149bac38c1", "commitAfterChange": "747a63a0a2a9b4e7029fd103555c522985364757", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\tworkingCopy.close();", "-\t\tworkingCopy.closeBuffer();", "-\t\t", "-\t\t// if original element is not on classpath flush it from the cache ", "-\t\tIJavaElement originalElement = workingCopy.getOriginalElement();", "-\t\tif (!workingCopy.getParent().exists()) {", "-\t\t\t((CompilationUnit)originalElement).close();", "-\t\t}", "-\t\t", "-\t\t// remove working copy info from the JavaModelCache", "-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\tmanager.removeInfoAndChildren(workingCopy);", "-", "-\t\t// remove working copy from the shared working copy cache if needed", "-\t\t", "-\t\t// In order to be shared, working copies have to denote the same compilation unit ", "-\t\t// AND use the same buffer factory.", "-\t\t// Assuming there is a little set of buffer factories, then use a 2 level Map cache.", "-\t\tMap sharedWorkingCopies = manager.sharedWorkingCopies;", "-\t\t", "-\t\tMap perFactoryWorkingCopies = (Map) sharedWorkingCopies.get(workingCopy.owner);", "-\t\tif (perFactoryWorkingCopies != null){", "-\t\t\tif (perFactoryWorkingCopies.remove(originalElement) != null", "-\t\t\t\t\t&& CompilationUnit.SHARED_WC_VERBOSE) {", "-\t\t\t\tSystem.out.println(\"Destroying shared working copy \" + workingCopy.toStringWithAncestors());//$NON-NLS-1$", "-\t\t\t}", "-\t\t}"]}], "num": 24322}
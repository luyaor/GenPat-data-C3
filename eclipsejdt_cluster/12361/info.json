{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5bf2a106826d212312ae9cd0cce15449", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90f75a2b0df195a636c4b77e747329f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "commitAfterChange": "ed3a0c0705f2be20be3aaf856f81a3803e4ac341", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public MatchLocator( \tSearchPattern pattern, \tSearchRequestor requestor, \tIJavaSearchScope scope, \tIProgressMonitor progressMonitor)", "signatureAfterChange": "  public MatchLocator( \tSearchPattern pattern, \tSearchRequestor requestor, \tIJavaSearchScope scope, \tIProgressMonitor progressMonitor)", "diff": ["+\t}", "+\tif (pattern instanceof MethodPattern) {", "+\t    IType type = ((MethodPattern) pattern).declaringType;", "+\t    if (type != null && !type.isBinary()) {", "+\t    \tSourceType sourceType = (SourceType) type;", "+\t    \tIMember local = sourceType.getOuterMostLocalContext();", "+\t    \tif (local instanceof IMethod) { // remember this method's range so we don't purge its statements.", "+\t    \t\ttry {", "+\t    \t\t\tISourceRange range = local.getSourceRange();", "+\t    \t\t\tthis.sourceStartOfMethodToRetain  = range.getOffset();", "+\t    \t\t\tthis.sourceEndOfMethodToRetain = this.sourceStartOfMethodToRetain + range.getLength() - 1; // offset is 0 based.", "+\t    \t\t} catch (JavaModelException e) {", "+\t    \t\t\t// drop silently. ", "+\t    \t\t}", "+\t    \t}", "+\t    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94fab1c170a61a3514dc0b646beb6ef4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalExtendedCompletionContext.java", "commitBeforeChange": "f95e58c822d23fa71cf6c6e2ac3adce80f07a42f", "commitAfterChange": "1c5093c74409d802b34134e981077f69adbcd0bf", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tprivate JavaElement getJavaElement(LocalVariableBinding binding)", "signatureAfterChange": " \t \tprivate JavaElement getJavaElement(LocalVariableBinding binding)", "diff": ["-\t\t\tIType type = (IType)this.getJavaElementOfCompilationUnit(typeDeclaration, typeDeclaration.binding);", "-\t\t\tif (type != null) {", "-\t\t\t\ttry {", "-\t\t\t\t\tIInitializer[] initializers = type.getInitializers();", "-\t\t\t\t\tif (initializers != null) {", "-\t\t\t\t\t\tdone : for (int i = 0; i < initializers.length; i++) {", "-\t\t\t\t\t\t\tIInitializer initializer = initializers[i];", "-\t\t\t\t\t\t\tISourceRange sourceRange = initializer.getSourceRange();", "-\t\t\t\t\t\t\tif (sourceRange != null) {", "-\t\t\t\t\t\t\t\tint initializerStart = sourceRange.getOffset();", "-\t\t\t\t\t\t\t\tint initializerEnd = initializerStart + sourceRange.getLength();", "-\t\t\t\t\t\t\t\tif (initializerStart <= local.sourceStart &&", "-\t\t\t\t\t\t\t\t\t\tlocal.sourceEnd <= initializerEnd) {", "-\t\t\t\t\t\t\t\t\tparent = (JavaElement)initializer;", "-\t\t\t\t\t\t\t\t\tbreak done;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tJavaElement type = this.getJavaElementOfCompilationUnit(typeDeclaration, typeDeclaration.binding);", "+\t\t\tparent = Util.getUnresolvedJavaElement(local.sourceStart, local.sourceEnd, type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fc49e1577afe2d305dd2d3da0dfa702", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "f95e58c822d23fa71cf6c6e2ac3adce80f07a42f", "commitAfterChange": "1c5093c74409d802b34134e981077f69adbcd0bf", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tpublic static JavaElement getUnresolvedJavaElement(MethodBinding methodBinding, WorkingCopyOwner workingCopyOwner, BindingsToNodesMap bindingsToNodes)", "signatureAfterChange": " \tpublic static JavaElement getUnresolvedJavaElement(int localSourceStart, int localSourceEnd, JavaElement type)", "diff": ["+\t */", "+\tpublic static JavaElement getUnresolvedJavaElement(int localSourceStart, int localSourceEnd, JavaElement type) {", "+\t\ttry {", "+\t\t\tif (!(type instanceof IType))", "+\t\t\t\treturn null;", "+\t\t\tIInitializer[] initializers = ((IType) type).getInitializers();", "+\t\t\tfor (int i = 0; i < initializers.length; i++) {", "+\t\t\t\tIInitializer initializer = initializers[i];", "+\t\t\t\tISourceRange sourceRange = initializer.getSourceRange();", "+\t\t\t\tif (sourceRange != null) {", "+\t\t\t\t\tint initializerStart = sourceRange.getOffset();", "+\t\t\t\t\tint initializerEnd = initializerStart + sourceRange.getLength();", "+\t\t\t\t\tif (initializerStart <= localSourceStart && localSourceEnd <= initializerEnd) {", "+\t\t\t\t\t\treturn (JavaElement) initializer;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn null;", "+\t\t} catch (JavaModelException e) {", "+\t\t\treturn null;", "+\t\t}", "+\t}"]}], "num": 12361}
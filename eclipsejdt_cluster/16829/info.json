{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c1f237dc0311c31a8836d6c497b4b86", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f6d14dd7cced6bac24ba55b8f748b0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a6c0426e8a97e5c69fdac3bea072af18fea82d0e", "commitAfterChange": "700519d9d691300ee33405d776a07eb44c2c4fa0", "methodNumberBeforeChange": 1492, "methodNumberAfterChange": 1492, "signatureBeforeChange": " public void test1458()", "signatureAfterChange": " public void test1458()", "diff": ["-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "+\t\t\t\t\t\"             Zork z;\\n\" +", "-\t\t\t\t\t\"\t}\\n\"", "-\t\t\t});", "+\t\t\t\t\t\"\t}\\n\",", "+\t\t\t},", "+\t\t\tthis.complianceLevel <= ClassFileConstants.JDK1_6 ?", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in CompilerBug.java (at line 22)\\n\" + ", "+\t\t\t\"\tZork z;\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" :", "+\t\t\t\t", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=334622", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in CompilerBug.java (at line 17)\\n\" + ", "+\t\t\t\"\tgetClass().newInstance().privateMethod();\\n\" + ", "+\t\t\t\"\t                         ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The method privateMethod() from the type CompilerBug is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in CompilerBug.java (at line 19)\\n\" + ", "+\t\t\t\"\tgetClass().newInstance().privateInt = 10;\\n\" + ", "+\t\t\t\"\t                         ^^^^^^^^^^\\n\" + ", "+\t\t\t\"The field CompilerBug.privateInt is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in CompilerBug.java (at line 22)\\n\" + ", "+\t\t\t\"\tZork z;\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d63a566d1e4bdd52bd4cfd13d87ece4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "266fb0d2bc58e2f4f179d2c1279dee095ed53e45", "commitAfterChange": "74a3b98be7e8e7ea98628bddc70a14abe6965022", "methodNumberBeforeChange": 1176, "methodNumberAfterChange": 1176, "signatureBeforeChange": " public void test1146()", "signatureAfterChange": " public void test1146()", "diff": ["+\t\t(this.complianceLevel == ClassFileConstants.JDK1_7 ?", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tComparator<? super T>... rest) {\\n\" + ", "+\t\t\t\"\t                         ^^^^\\n\" + ", "+\t\t\t\"Type safety: Potential heap pollution via varargs parameter rest\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tint i = asList(a, b, rest);\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from List<Comparator<?>> to int\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tint j = asList2(a, b);\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from List<Comparator<? extends Object>> to int\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\treturn compound(asList(a, b, rest));\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^\\n\" + ", "+\t\t\t\"The method compound(Iterable<? extends Comparator<? super U>>) in the type X is not applicable for the arguments (List<Comparator<?>>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tpublic static <E> List<E> asList(E a, E b, E... rest) {\\n\" + ", "+\t\t\t\"\t                                                ^^^^\\n\" + ", "+\t\t\t\"Type safety: Potential heap pollution via varargs parameter rest\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t: // 1.8 : one fewer error due to better type inference:", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\"));"]}], "num": 16829}
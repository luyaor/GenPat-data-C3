{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5e8e061ddea86dad6161529add27396", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aed87ef817741539c31ac3cf76a453e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "3474b76fc94606d0b8f4ddadcc2ba8eb6a2c0d7e", "commitAfterChange": "25ee38ac5310b866b312c28ed2b05a72790c9904", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 151, "signatureBeforeChange": " \tpublic void test0138() throws CoreException", "signatureAfterChange": " \tpublic void test0138() throws CoreException", "diff": ["-    \tString contents =", "+    \tfinal String contents =", "-    \t\tpublic boolean visit(QualifiedName qualifiedName) {", "-    \t\t\tIBinding binding = qualifiedName.resolveBinding();", "-    \t\t\tassertNotNull(\"No binding\", binding);", "-    \t\t\treturn true;", "-    \t\t}", "-    \t\tpublic boolean visit(SimpleName simpleName) {", "-\t\t\t\tif (simpleName.getIdentifier().equals(\"URL\")", "-\t\t\t\t\t\t|| simpleName.getIdentifier().equals(\"method\")) {", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-    \t\t\tIBinding binding = simpleName.resolveBinding();", "-    \t\t\tassertNotNull(\"No binding\", binding);", "-    \t\t\treturn true;", "-    \t\t}", "+    \t\t\tcheckSourceRange(type, \"java.util.List<URL>\", contents);", "-    \t\t\tassertNotNull(\"No binding\", typeBinding);", "-    \t\t\treturn true;", "-    \t\t}", "-    \t\tpublic boolean visit(SimpleType type) {", "-    \t\t\tITypeBinding typeBinding = type.resolveBinding();", "-    \t\t\tName name = type.getName();", "-    \t\t\tif (name.isSimpleName()) {", "-    \t\t\t\tSimpleName simpleName = (SimpleName) name;", "-    \t\t\t\tif (simpleName.getIdentifier().equals(\"URL\")) {", "-    \t\t\t\t\treturn false;", "-    \t\t\t\t}", "-    \t\t\t}", "-    \t\t\tassertNotNull(\"No binding\", typeBinding);", "-    \t\t\treturn true;", "-    \t\t}", "-    \t\tpublic boolean visit(TypeParameter typeParameter) {", "-    \t\t\tITypeBinding typeBinding = typeParameter.resolveBinding();", "-    \t\t\tassertNotNull(\"No binding\", typeBinding);", "-    \t\t\treturn true;", "-    \t\t}", "-    \t\tpublic boolean visit(QualifiedType type) {", "-    \t\t\tITypeBinding typeBinding = type.resolveBinding();", "-    \t\t\tassertNotNull(\"No binding\", typeBinding);", "+    \t\t\tassertNull(\"Got a binding\", typeBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0a30ea19d734587211fe1bc782bc425", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "ad3220b4b434313891b223270deb616283ce8051", "commitAfterChange": "c0a30fbd56f0faf040945ca7720c23f3dd404282", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tprivate static void resolvedChainedLibraries(IPath jarPath, HashSet visited, ArrayList result)", "signatureAfterChange": " \t \tprivate static void resolvedChainedLibraries(IPath jarPath, HashSet visited, ArrayList result)", "diff": ["-\t\tObject target = JavaModel.getTarget(jarPath, true/*check existence, otherwise the manifest cannot be read*/);", "-\t\tif (target instanceof IFile || target instanceof File) {", "-\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t\tZipFile zip = null;", "-\t\t\tBufferedReader reader = null;", "-\t\t\ttry {", "-\t\t\t\tzip = manager.getZipFile(jarPath);", "-\t\t\t\tZipEntry manifest =\tzip.getEntry(\"META-INF/MANIFEST.MF\"); //$NON-NLS-1$", "-\t\t\t\tif (manifest != null) { // non-null implies regular file", "-\t\t\t\t\treader = new BufferedReader(new InputStreamReader(zip.getInputStream(manifest)));", "-\t\t\t\t\tManifestAnalyzer analyzer = new ManifestAnalyzer();", "-\t\t\t\t\tboolean success = analyzer.analyzeManifestContents(reader);", "-\t\t\t\t\tList calledFileNames = analyzer.getCalledFileNames();", "-\t\t\t\t\tif (!success || analyzer.getClasspathSectionsCount() == 1 && calledFileNames == null) {", "-\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "-\t\t\t\t\t\t\tUtil.verbose(\"Invalid Class-Path header in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t} else if (analyzer.getClasspathSectionsCount() > 1) {", "-\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "-\t\t\t\t\t\t\tUtil.verbose(\"Multiple Class-Path headers in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn;", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tif (manager.isNonChainingJar(jarPath))", "+\t\t\treturn;", "+\t\tList calledFileNames = getCalledFileNames(jarPath);", "+\t\tif (calledFileNames == null) {", "+\t\t\tmanager.addNonChainingJar(jarPath);", "+\t\t} else {", "+\t\t\tIterator calledFilesIterator = calledFileNames.iterator();", "+\t\t\tIPath directoryPath = jarPath.removeLastSegments(1);", "+\t\t\twhile (calledFilesIterator.hasNext()) {", "+\t\t\t\tString calledFileName = (String) calledFilesIterator.next();", "+\t\t\t\tif (!directoryPath.isValidPath(calledFileName)) {", "+\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "+\t\t\t\t\t\tUtil.verbose(\"Invalid Class-Path entry \" + calledFileName + \" in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\tif (calledFileNames != null) {", "-\t\t\t\t\t\tIterator calledFilesIterator = calledFileNames.iterator();", "-\t\t\t\t\t\tIPath directoryPath = jarPath.removeLastSegments(1);", "-\t\t\t\t\t\twhile (calledFilesIterator.hasNext()) {", "-\t\t\t\t\t\t\tString calledFileName = (String) calledFilesIterator.next();", "-\t\t\t\t\t\t\tif (!directoryPath.isValidPath(calledFileName)) {", "-\t\t\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "-\t\t\t\t\t\t\t\t\tUtil.verbose(\"Invalid Class-Path entry \" + calledFileName + \" in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tIPath calledJar = directoryPath.append(new Path(calledFileName));", "-\t\t\t\t\t\t\t\tresolvedChainedLibraries(calledJar, visited, result);", "-\t\t\t\t\t\t\t\tresult.add(calledJar);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\t// not a zip file", "-\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "-\t\t\t\t\tUtil.verbose(\"Could not read Class-Path header in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$", "-\t\t\t\t\te.printStackTrace();", "-\t\t\t\t}", "-\t\t\t} catch (IOException e) {", "-\t\t\t\t// not a zip file", "-\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "-\t\t\t\t\tUtil.verbose(\"Could not read Class-Path header in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$", "-\t\t\t\t\te.printStackTrace();", "-\t\t\t\t}", "-\t\t\t} finally {", "-\t\t\t\tmanager.closeZipFile(zip);", "-\t\t\t\tif (reader != null) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\treader.close();", "-\t\t\t\t\t} catch (IOException e) {", "-\t\t\t\t\t\t// best effort", "-\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tIPath calledJar = directoryPath.append(new Path(calledFileName));", "+\t\t\t\t\tresolvedChainedLibraries(calledJar, visited, result);", "+\t\t\t\t\tresult.add(calledJar);"]}], "num": 69240}
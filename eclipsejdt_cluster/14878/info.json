{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9dafeef3378a6e1bd48149ecbb98c7cc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8122177472ac197d2c2fcd83df0b7f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5d2cd7f1076b45eee90e6733e80765abd1df3d6a", "commitAfterChange": "14e86a8141996732826e41cf3c8dd392bb1fd5ba", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void forceClasspathReload(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic void forceClasspathReload(IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\tflushClasspathProblemMarkers(false, true);", "-\t\t\tif (fileEntries == null)", "+\t\t\tif (fileEntries == null) {", "+\t\t\t}", "-\t\t\tif (getProject().isAccessible()) {", "-\t\t\t\tif (e.getJavaModelStatus().getException() instanceof CoreException) {", "-\t\t\t\t\t// happens if the .classpath could not be written to disk", "-\t\t\t\t\tcreateClasspathProblemMarker(new JavaModelStatus(", "-\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "-\t\t\t\t\t\t\tUtil.bind(\"classpath.couldNotWriteClasspathFile\", getElementName(), e.getMessage()))); //$NON-NLS-1$", "-\t\t\t\t} else {", "-\t\t\t\t\tcreateClasspathProblemMarker(new JavaModelStatus(", "-\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "-\t\t\t\t\t\t\tUtil.bind(\"classpath.invalidClasspathInClasspathFile\", getElementName(), e.getMessage()))); //$NON-NLS-1$", "-\t\t\t\t}\t\t\t", "+\t\t\tif (!ResourcesPlugin.getWorkspace().isTreeLocked()) {", "+\t\t\t\tif (getProject().isAccessible()) {", "+\t\t\t\t\tif (e.getJavaModelStatus().getException() instanceof CoreException) {", "+\t\t\t\t\t\t// happens if the .classpath could not be written to disk", "+\t\t\t\t\t\tcreateClasspathProblemMarker(new JavaModelStatus(", "+\t\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "+\t\t\t\t\t\t\t\tUtil.bind(\"classpath.couldNotWriteClasspathFile\", getElementName(), e.getMessage()))); //$NON-NLS-1$", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcreateClasspathProblemMarker(new JavaModelStatus(", "+\t\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "+\t\t\t\t\t\t\t\tUtil.bind(\"classpath.invalidClasspathInClasspathFile\", getElementName(), e.getMessage()))); //$NON-NLS-1$", "+\t\t\t\t\t}\t\t\t", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab87712b10f8f5cb70a79a5e165f5e15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "f192de6c5260ed351db3279698866194d932822c", "commitAfterChange": "bc1ab2814efa96b0090d7fa3a6e0df572ad09b84", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tprivate void computeExpectedTypes(AstNode parent, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(AstNode parent, Scope scope)", "diff": ["-\t\t\tMethodBinding methodBinding = ((AbstractMethodDeclaration) scope.methodScope().referenceContext).binding;", "-\t\t\tTypeBinding binding = methodBinding  == null ? null : methodBinding.returnType;", "-\t\t\tif(binding != null) {", "-\t\t\t\taddExpectedType(binding);", "+\t\t\tif(scope.methodScope().referenceContext instanceof AbstractMethodDeclaration) {", "+\t\t\t\tMethodBinding methodBinding = ((AbstractMethodDeclaration) scope.methodScope().referenceContext).binding;", "+\t\t\t\tTypeBinding binding = methodBinding  == null ? null : methodBinding.returnType;", "+\t\t\t\tif(binding != null) {", "+\t\t\t\t\taddExpectedType(binding);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aec4556acfa9900ae44a318cd64d1205", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "5020b77badf5ed685242230a1e92cfedde9d0095", "commitAfterChange": "4f8203818eae84aa9b2839be10eb10037835da39", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tprivate void updateClasspathMarkers(IResourceDelta delta)", "signatureAfterChange": " \tprivate void updateClasspathMarkers(IResourceDelta delta)", "diff": ["-", "+\t", "-\t\t\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();", "-\t\t\t\tIProject[] projects = workspaceRoot.getProjects();", "-\t\t\t\tint length = projects.length;", "-\t\t\t\tfor (int i = 0; i < length; i++){", "-\t\t\t\t\tIProject project = projects[i];", "-\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "-\t\t\t\t\tif (preferredClasspaths.get(javaProject) == null) { // not already updated", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tIPath projectPath = project.getFullPath();", "-\t\t\t\t\t\t\tIClasspathEntry[] classpath = javaProject.getResolvedClasspath(true); // allowed to reuse model cache", "-\t\t\t\t\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++) {", "-\t\t\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "-\t\t\t\t\t\t\t\tswitch (entry.getEntryKind()) {", "-\t\t\t\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT:", "-\t\t\t\t\t\t\t\t\t\tif (affectedProjects.contains(entry.getPath())) {", "-\t\t\t\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(null, null);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:", "-\t\t\t\t\t\t\t\t\t\tIPath entryPath = entry.getPath();", "-\t\t\t\t\t\t\t\t\t\tIPath libProjectPath = entryPath.removeLastSegments(entryPath.segmentCount()-1);", "-\t\t\t\t\t\t\t\t\t\tif (!libProjectPath.equals(projectPath) // if library contained in another project", "-\t\t\t\t\t\t\t\t\t\t\t\t&& affectedProjects.contains(libProjectPath)) {", "-\t\t\t\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(null, null);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\tif (!ResourcesPlugin.getWorkspace().isAutoBuilding()) {", "+\t\t\t\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();", "+\t\t\t\t\tIProject[] projects = workspaceRoot.getProjects();", "+\t\t\t\t\tint length = projects.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++){", "+\t\t\t\t\t\tIProject project = projects[i];", "+\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\t\tif (preferredClasspaths.get(javaProject) == null) { // not already updated", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tIPath projectPath = project.getFullPath();", "+\t\t\t\t\t\t\t\tIClasspathEntry[] classpath = javaProject.getResolvedClasspath(true); // allowed to reuse model cache", "+\t\t\t\t\t\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++) {", "+\t\t\t\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "+\t\t\t\t\t\t\t\t\tswitch (entry.getEntryKind()) {", "+\t\t\t\t\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT:", "+\t\t\t\t\t\t\t\t\t\t\tif (affectedProjects.contains(entry.getPath())) {", "+\t\t\t\t\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(null, null);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:", "+\t\t\t\t\t\t\t\t\t\t\tIPath entryPath = entry.getPath();", "+\t\t\t\t\t\t\t\t\t\t\tIPath libProjectPath = entryPath.removeLastSegments(entryPath.segmentCount()-1);", "+\t\t\t\t\t\t\t\t\t\t\tif (!libProjectPath.equals(projectPath) // if library contained in another project", "+\t\t\t\t\t\t\t\t\t\t\t\t\t&& affectedProjects.contains(libProjectPath)) {", "+\t\t\t\t\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(null, null);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} catch(JavaModelException e) {", "+\t\t\t\t\t\t\t\t\t// project no longer exists", "-\t\t\t\t\t\t} catch(JavaModelException e) {", "-\t\t\t\t\t\t\t\t// project no longer exists"]}], "num": 14878}
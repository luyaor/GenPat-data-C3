{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f54e15baa5ada6f8fe8053a685bca91d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d405c7c99097b032f1970567fd5163f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "77646fe802ce8842c3e468133491915f09e00874", "commitAfterChange": "95ad422ba75a97d9b8c3cb49bc8bd9dcf7d18a77", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate void assertBindingCreated(String[] pathAndSources, final String expectedKey) throws JavaModelException", "signatureAfterChange": " \tprivate void assertBindingCreated(String[] pathAndSources, final String expectedKey) throws JavaModelException", "diff": ["-\t\t\tif (!expectedKey.equals(requestor.createdBindingKey))", "-\t\t\t\tSystem.out.println(Util.displayString(requestor.createdBindingKey, 3));", "-\t\t\tassertEquals(\"Unexpected created binding\", expectedKey, requestor.createdBindingKey);", "+\t\t\tString key = expectedKey;", "+\t\t\tif (!key.equals(requestor.createdBindingKey)) {", "+\t\t\t\tBindingResolver resolver = requestBinding(pathAndSources, null);", "+\t\t\t\tif (resolver.bindingKey != null) key = resolver.bindingKey;", "+\t\t\t\tSystem.out.println(Util.displayString(key, 3));", "+\t\t\t}", "+\t\t\tassertEquals(\"Unexpected created binding\", key, requestor.createdBindingKey);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32b88e3fde864de4a22158bf68ad7abb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "cae7f8c61c51ef4d85d837657b5392af988fbdde", "commitAfterChange": "578d821fa14706debbd7277feb7d8a3dc6683433", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["-\tif (!resourceExists() || !isOnClasspath()) {", "-\t\tthrow newNotPresentException();", "-\t}", "+\tIStatus status = validateOnClasspath();", "+\tif (!status.isOK()) throw newJavaModelException(status);", "+\tif (!resourceExists()) throw newNotPresentException();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9f8e132546bc3acdc981a8ec90615ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java", "commitBeforeChange": "ed25425f5de4194a0f32ce4c1315af886ca42c42", "commitAfterChange": "821b6028ffbd0ba8edfd1a0534c32e817f4e830d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " protected void generateInfos(Object info, HashMap newElements, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " protected void generateInfos(Object info, HashMap newElements, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t// open the parent if necessary", "-\topenParent(info, newElements, monitor);", "+\t// open its ancestors if needed", "+\topenAncestors(newElements, monitor);", "+\t", "+\t// validate existence", "+\tIResource underlResource = getResource();", "+\tIStatus status = validateExistence(underlResource);", "+\tif (!status.isOK())", "+\t\tthrow newJavaModelException(status);", "+\t", "-\t\tboolean isStructureKnown = buildStructure(openableElementInfo, monitor, newElements, getResource());", "+\t\tboolean isStructureKnown = buildStructure(openableElementInfo, monitor, newElements, underlResource);"]}], "num": 39010}
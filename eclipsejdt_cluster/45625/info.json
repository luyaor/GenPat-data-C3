{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5ebd568c6c4de8906de1c00cabc8a77", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16f01d182f6c86e2e066610ff9dd11cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic void test030() throws Exception", "signatureAfterChange": " \t \tpublic void test063_codeblocks_new_instanceof() throws Exception", "diff": ["-\t// qualified allocation expression with type arguments", "-\tpublic void test030() throws Exception {", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(CLASS)\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "-\t\t\t\t\"D.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "-\t\t\t\t\"@interface D {\\n\" + ", "-\t\t\t\t\"\tchar value() default '-';\\n\" + ", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"import java.util.Map;\\n\" +", "-\t\t\t\t\"import java.util.HashMap;\\n\" +", "-\t\t\t\t\"@SuppressWarnings({\\\"unchecked\\\",\\\"rawtypes\\\"})\\n\" + ", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\tObject newMap(Object o) {\\n\" + ", "-\t\t\t\t\"\t\tMap<@A Object, ? super @C Map<@B String, @D Comparable>> map;\\n\" + ", "-\t\t\t\t\"\t\tif (o == null) {\\n\" + ", "-\t\t\t\t\"\t\t\tmap = null;\\n\" + ", "-\t\t\t\t\"\t\t\tSystem.out.println(map);\\n\" + ", "-\t\t\t\t\"\t\t} else {\\n\" + ", "-\t\t\t\t\"\t\t\tSystem.out.println(\\\"No map yet\\\");\\n\" + ", "-\t\t\t\t\"\t\t}\\n\" + ", "-\t\t\t\t\"\t\tmap = new HashMap();\\n\" + ", "-\t\t\t\t\"\t\treturn map;\\n\" + ", "-\t\t\t\t\"\t} \\n\" + ", "-\t\t\t\t\"}\",", "-\t\t},", "-\t\t\"\");", "-\t\tString expectedOutput =", "-\t\t\t\"    RuntimeVisibleTypeAnnotations: \\n\" + ", "-\t\t\t\"      #46 @A(\\n\" + ", "-\t\t\t\"        target type = 0x9 LOCAL_VARIABLE_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        local variable entries:\\n\" + ", "-\t\t\t\"          [pc: 6, pc: 16] index: 2\\n\" + ", "-\t\t\t\"          [pc: 32, pc: 34] index: 2\\n\" + ", "-\t\t\t\"        locations = {0}\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"      #47 @C(\\n\" + ", "-\t\t\t\"        target type = 0x1c WILDCARD_BOUND\\n\" + ", "-\t\t\t\"        wildcard location type = 0x9 LOCAL_VARIABLE_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"          local variable entries:\\n\" + ", "-\t\t\t\"                [pc: 6, pc: 16] index: 2\\n\" + ", "-\t\t\t\"                [pc: 32, pc: 34] index: 2\\n\" + ", "-\t\t\t\"              wildcard locations = {1}\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"      #48 @D(\\n\" + ", "-\t\t\t\"        target type = 0x1d WILDCARD_BOUND_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        wildcard location type = 0x9 LOCAL_VARIABLE_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"          local variable entries:\\n\" + ", "-\t\t\t\"                [pc: 6, pc: 16] index: 2\\n\" + ", "-\t\t\t\"                [pc: 32, pc: 34] index: 2\\n\" + ", "-\t\t\t\"              wildcard locations = {1}\\n\" + ", "-\t\t\t\"        locations = {1}\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"    RuntimeInvisibleTypeAnnotations: \\n\" + ", "-\t\t\t\"      #44 @B(\\n\" + ", "-\t\t\t\"        target type = 0x1d WILDCARD_BOUND_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        wildcard location type = 0x9 LOCAL_VARIABLE_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"          local variable entries:\\n\" + ", "-\t\t\t\"                [pc: 6, pc: 16] index: 2\\n\" + ", "-\t\t\t\"                [pc: 32, pc: 34] index: 2\\n\" + ", "-\t\t\t\"              wildcard locations = {1}\\n\" + ", "-\t\t\t\"        locations = {0}\\n\" + ", "-\t\t\t\"      )\\n\";", "-\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "-\t}", "+\t", "+\tpublic void test063_codeblocks_new_instanceof() throws Exception {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"A.java\",", "+\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "+\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "+\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "+\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "+\t\t\t\t\"@interface A {\\n\" + ", "+\t\t\t\t\"\tString value() default \\\"default\\\";\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"B.java\",", "+\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "+\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "+\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "+\t\t\t\t\"@Retention(CLASS)\\n\" + ", "+\t\t\t\t\"@interface B {\\n\" + ", "+\t\t\t\t\"\tint value() default -1;\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t\t\t\"C.java\",", "+\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "+\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "+\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "+\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "+\t\t\t\t\"@interface C {\\n\" + ", "+\t\t\t\t\"\tchar value() default '-';\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"I.java\",", "+\t\t\t\t\"interface I {}\\n\",", "+\t\t\t\t\"J.java\",", "+\t\t\t\t\"interface J {}\\n\",", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tpublic boolean foo(Object o) {\\n\" + ", "+\t\t\t\t\"\t\tboolean b = (o instanceof @C('_') Object[]);\\n\" + ", "+\t\t\t\t\"\t\tObject o1 = new @B(3) @A(\\\"new Object\\\") Object[] {};\\n\" + ", "+\t\t\t\t\"\t\treturn b;\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t},", "+\t\t\"\");", "+\t\tString expectedOutput =", "+\t\t\t\"    RuntimeInvisibleTypeAnnotations: \\n\" + ", "+\t\t\t\"      #24 @B(\\n\" + ", "+\t\t\t\"        #25 value=(int) 3 (constant type)\\n\" + ", "+\t\t\t\"        target type = 0x44 NEW\\n\" + ", "+\t\t\t\"        offset = 6\\n\" + ", "+\t\t\t\"        location = [ARRAY]\\n\" + ", "+\t\t\t\"      )\\n\" + ", "+\t\t\t\"    RuntimeVisibleTypeAnnotations: \\n\" + ", "+\t\t\t\"      #28 @C(\\n\" + ", "+\t\t\t\"        #25 value=\\'_\\' (constant type)\\n\" + ", "+\t\t\t\"        target type = 0x43 INSTANCEOF\\n\" + ", "+\t\t\t\"        offset = 1\\n\" + ", "+\t\t\t\"        location = [ARRAY]\\n\" + ", "+\t\t\t\"      )\\n\" + ", "+\t\t\t\"      #30 @A(\\n\" + ", "+\t\t\t\"        #25 value=\\\"new Object\\\" (constant type)\\n\" + ", "+\t\t\t\"        target type = 0x44 NEW\\n\" + ", "+\t\t\t\"        offset = 6\\n\" + ", "+\t\t\t\"        location = [ARRAY]\\n\" + ", "+\t\t\t\"      )\\n\";", "+\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c55b9d2132ec394154c0e105b8df47b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void test029() throws Exception", "signatureAfterChange": "  \tpublic void test013_classExtends_interfaces() throws Exception", "diff": ["+", "+\tpublic void test013_classExtends_interfaces() throws Exception {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"A.java\",", "+\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "+\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "+\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "+\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "+\t\t\t\t\"@interface A {\\n\" + ", "+\t\t\t\t\"\tString id() default \\\"default\\\";\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"B.java\",", "+\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "+\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "+\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "+\t\t\t\t\"@Retention(CLASS)\\n\" + ", "+\t\t\t\t\"@interface B {\\n\" + ", "+\t\t\t\t\"\tint value() default -1;\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t\t\t\"C.java\",", "+\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "+\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "+\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "+\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "+\t\t\t\t\"@interface C {\\n\" + ", "+\t\t\t\t\"\tchar value() default '-';\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"I.java\",", "+\t\t\t\t\"interface I {}\\n\",", "+\t\t\t\t\"J.java\",", "+\t\t\t\t\"interface J {}\\n\",", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X implements @A(id=\\\"Hello, World!\\\") I, @B @C('(') J {}\",", "+\t\t},", "+\t\t\"\");", "+\t\t// Output from javac b81 lambda", "+\t\t// RuntimeVisibleTypeAnnotations", "+\t\t// Bytes:28[0 2 16 0 0 0 0 13 0 1 0 14 115 0 15 16 0 1 0 0 16 0 1 0 17 67 0 18]", "+\t\t// RuntimeInvisibleTypeAnnotations", "+\t\t// Bytes:10[0 1 16 0 1 0 0 20 0 0]\t\t", "+\t\tString expectedOutput =", "+\t\t\t\"  RuntimeVisibleTypeAnnotations: \\n\" + ", "+\t\t\t\"    #23 @A(\\n\" + ", "+\t\t\t\"      #24 id=\\\"Hello, World!\\\" (constant type)\\n\" + ", "+\t\t\t\"      target type = 0x10 CLASS_EXTENDS\\n\" + ", "+\t\t\t\"      type index = 0\\n\" + ", "+\t\t\t\"    )\\n\" + ", "+\t\t\t\"    #26 @C(\\n\" + ", "+\t\t\t\"      #27 value=\\'(\\' (constant type)\\n\" + ", "+\t\t\t\"      target type = 0x10 CLASS_EXTENDS\\n\" + ", "+\t\t\t\"      type index = 1\\n\" + ", "+\t\t\t\"    )\\n\" + ", "+\t\t\t\"  RuntimeInvisibleTypeAnnotations: \\n\" + ", "+\t\t\t\"    #21 @B(\\n\" + ", "+\t\t\t\"      target type = 0x10 CLASS_EXTENDS\\n\" + ", "+\t\t\t\"      type index = 1\\n\" + ", "+\t\t\t\"    )\\n\";", "+\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "+\t}", "-\t// qualified allocation expression with type arguments", "-\tpublic void test029() throws Exception {", "-\t\t\t\t\"C.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "-\t\t\t\t\"@interface C {\\n\" + ", "-\t\t\t\t\"\tchar value() default '-';\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\t\"D.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "-\t\t\t\t\"@interface D {\\n\" + ", "-\t\t\t\t\"\tchar value() default '-';\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\t\"\tclass Y {\\n\" + ", "-\t\t\t\t\"\t\t<T, U> Y(T t, U u) {}\\n\" + ", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\t\t\"\t\tY y = new X().new <@D() @A(value = \\\"hello\\\") String, @B X> Y(\\\"SUCCESS\\\", null);\\n\" + ", "-\t\t\t\t\"\t\tSystem.out.println(y);\\n\" + ", "-\t\t\t\"      #47 @D(\\n\" + ", "-\t\t\t\"        target type = 0x18 TYPE_ARGUMENT_CONSTRUCTOR_CALL\\n\" + ", "-\t\t\t\"        offset = 19\\n\" + ", "-\t\t\t\"        type argument index = 0\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"      #48 @A(\\n\" + ", "-\t\t\t\"        #49 value=\\\"hello\\\" (constant type)\\n\" + ", "-\t\t\t\"        target type = 0x18 TYPE_ARGUMENT_CONSTRUCTOR_CALL\\n\" + ", "-\t\t\t\"        offset = 19\\n\" + ", "-\t\t\t\"        type argument index = 0\\n\" + ", "-\t\t\t\"      #45 @B(\\n\" + ", "-\t\t\t\"        target type = 0x18 TYPE_ARGUMENT_CONSTRUCTOR_CALL\\n\" + ", "-\t\t\t\"        offset = 19\\n\" + ", "-\t\t\t\"        type argument index = 1\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d96bc41895850c066c4f3cf7d6c202d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic void test031() throws Exception", "signatureAfterChange": " \t \tpublic void test046_methodParameter() throws Exception", "diff": ["+\t", "+\tpublic void test046_methodParameter() throws Exception {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tint foo(int i, double d, @B(3) String s) {\\n\" +", "+\t\t\t\t\"\t\treturn s.length();\\n\" +", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t\t\t", "+\t\t\t\t\"B.java\",", "+\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "+\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "+\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "+\t\t\t\t\"@Retention(CLASS)\\n\" + ", "+\t\t\t\t\"@interface B {\\n\" + ", "+\t\t\t\t\"\tint value() default -1;\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t},", "+\t\t\"\");", "+\t\t// javac-b81: Bytes:14[0 1 22 1 0 0 11 0 1 0 12 73 0 13]", "+\t\tString expectedOutput =", "+\t\t\t\"    RuntimeInvisibleTypeAnnotations: \\n\" + ", "+\t\t\t\"      #29 @B(\\n\" + ", "+\t\t\t\"        #30 value=(int) 3 (constant type)\\n\" + ", "+\t\t\t\"        target type = 0x16 METHOD_FORMAL_PARAMETER\\n\" + ", "+\t\t\t\"        method parameter index = 2\\n\" + ", "+\t\t\t\"      )\\n\";", "+\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "+\t}", "-\t// method type parameter bound generic or array", "-\tpublic void test031() throws Exception {", "-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"A.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "-\t\t\t\t\"@interface A {\\n\" + ", "-\t\t\t\t\"\tString value() default \\\"default\\\";\\n\" + ", "-\t\t\t\t\"B.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(CLASS)\\n\" + ", "-\t\t\t\t\"@interface B {\\n\" + ", "-\t\t\t\t\"\tint value() default -1;\\n\" + ", "-\t\t\t\t\"}\",", "-\t\t\t\t\"C.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(CLASS)\\n\" + ", "-\t\t\t\t\"@interface C {\\n\" + ", "-\t\t\t\t\"\tint value() default -1;\\n\" + ", "-\t\t\t\t\"}\",", "-\t\t\t\t\"D.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_PARAMETER)\\n\" + ", "-\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "-\t\t\t\t\"@interface D {\\n\" + ", "-\t\t\t\t\"\tString value() default \\\"default\\\";\\n\" + ", "-\t\t\t\t\"Z.java\",", "-\t\t\t\t\"public class Z<T> {}\",", "-\t\t\t\t\"\t<@D U, T extends Z<@A String @C[][]@B[]> & @B(3) Cloneable> void foo(U u, T t) {}\\n\" +", "-\t\t\t\"      #31 @D(\\n\" + ", "-\t\t\t\"        target type = 0x20 METHOD_TYPE_PARAMETER\\n\" + ", "-\t\t\t\"        type parameter index = 0\\n\" + ", "-\t\t\t\"      #32 @A(\\n\" + ", "-\t\t\t\"        target type = 0x13 METHOD_TYPE_PARAMETER_BOUND_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        type parameter index = 1 type parameter bound index = 0\\n\" + ", "-\t\t\t\"        locations = {0,2}\\n\" + ", "-\t\t\t\"      #26 @C(\\n\" + ", "-\t\t\t\"        target type = 0x13 METHOD_TYPE_PARAMETER_BOUND_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        type parameter index = 1 type parameter bound index = 0\\n\" + ", "-\t\t\t\"        locations = {0}\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"      #27 @B(\\n\" + ", "-\t\t\t\"        target type = 0x13 METHOD_TYPE_PARAMETER_BOUND_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        type parameter index = 1 type parameter bound index = 0\\n\" + ", "-\t\t\t\"        locations = {0,1}\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"      #27 @B(\\n\" + ", "-\t\t\t\"        #28 value=(int) 3 (constant type)\\n\" + ", "-\t\t\t\"        target type = 0x12 METHOD_TYPE_PARAMETER_BOUND\\n\" + ", "-\t\t\t\"        type parameter index = 1 type parameter bound index = 1\\n\" + "]}], "num": 45625}
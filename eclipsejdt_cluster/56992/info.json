{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1a43765c6f571cdb4dd1bc4ae9c7d08", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e1a3952956c98fc6413073bd28f5b33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "3cdc40c3e141f1d38e6828b30530d087867619a9", "commitAfterChange": "0768a01c46bf55c1ad1aefdbfa14c12019b43872", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprivate void assertBindingCreated(String[] pathAndSources, final String expectedKey) throws JavaModelException", "signatureAfterChange": " \tprivate void assertBindingsCreated(String[] pathAndSources, final String[] expectedKeys) throws JavaModelException", "diff": ["+\t */", "+\tprivate void assertBindingsCreated(String[] pathAndSources, final String[] expectedKeys) throws JavaModelException {", "-\t\t\t\tString createdBindingKey;", "+\t\t\t\tArrayList createdBindingKeys = new ArrayList();", "-\t\t\t\t\tIBinding[] bindings = createBindings(new String[] {expectedKey});", "+\t\t\t\t\tIBinding[] bindings = createBindings(expectedKeys);", "-\t\t\t\t\t\tthis.createdBindingKey = bindings[0].getKey();", "+\t\t\t\t\t\tthis.createdBindingKeys.add(bindings[0].getKey());", "+\t\t\t\t}", "+\t\t\t\tpublic String getCreatedKeys() {", "+\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\tfor (int i = 0, length = this.createdBindingKeys.size(); i < length; i++) {", "+\t\t\t\t\t\tbuffer.append(this.createdBindingKeys.get(i));", "+\t\t\t\t\t\tif (i < length - 1)", "+\t\t\t\t\t\t\tbuffer.append('\\n');", "+\t\t\t\t\t}", "+\t\t\t\t\treturn buffer.toString();", "-\t\t\tString actualKey = requestor.createdBindingKey;", "+\t\t\tString expectedKey = toString(expectedKeys);", "+\t\t\tString actualKey = requestor.getCreatedKeys();", "-\t\t\t\tBindingResolver resolver = requestBinding(pathAndSources, null);", "-\t\t\t\tif (resolver.bindingKey != null) {", "-\t\t\t\t\tif (!expectedKey.equals(resolver.bindingKey))", "-\t\t\t\t\t\tSystem.out.println(Util.displayString(resolver.bindingKey, 3));", "-\t\t\t\t\tassertEquals(\"Inconsistent expected key \", expectedKey, resolver.bindingKey);", "-\t\t\t\t} ", "+\t\t\t\tBindingResolver resolver = requestBindings(pathAndSources, null);", "+\t\t\t\tassertStringsEqual(\"Inconsistent expected key \", expectedKeys, resolver.getBindingKeys());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d19b6a34972d4c315f109aa3e829be7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "ec8e689e69ce65d5a3f127f9c7126c4bebdd7b60", "commitAfterChange": "c922c60b9bc5fcda7fb9f2a477eba6f8f95a6cf9", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate void discardWorkingCopies(ICompilationUnit[][] workingCopyBatches) throws JavaModelException", "signatureAfterChange": " \tprivate void assertBindingCreated(final String expectedKey) throws JavaModelException", "diff": ["+\t */", "+\tprivate void assertBindingCreated(final String expectedKey) throws JavaModelException {", "+\t\tclass Requestor extends TestASTRequestor {", "+\t\t\tString createdBindingKey;", "+\t\t\tpublic void acceptAST(CompilationUnit cu, ICompilationUnit source) {", "+\t\t\t\tsuper.acceptAST(cu, source);", "+\t\t\t\tIBinding[] bindings = createBindings(new String[] {expectedKey});", "+\t\t\t\tif (bindings != null && bindings.length > 0 && bindings[0] != null)", "+\t\t\t\t\tthis.createdBindingKey = bindings[0].getKey();", "+\t\t\t}", "+\t\t};", "+\t\tRequestor requestor = new Requestor();", "+\t\tICompilationUnit[] workingCopies = null;", "+\t\ttry {", "+\t\t\tworkingCopies = createWorkingCopies(new String[] {", "+\t\t\t\t\"/P/Test.java\",", "+\t\t\t\t\"public class Test {\\n\" +", "+\t\t\t\t\"}\"", "+\t\t\t});", "+\t\t\tresolveASTs(workingCopies, new String[] {}, requestor);", "+\t\t} finally {", "+\t\t\tdiscardWorkingCopies(workingCopies);", "+\t\t}", "+\t\t", "+\t\tif (!expectedKey.equals(requestor.createdBindingKey))", "+\t\t\tSystem.out.println(Util.displayString(expectedKey, 3));", "+\t\tassertEquals(\"Unexpected created binding\", expectedKey, requestor.createdBindingKey);", "+\t}", "-\tprivate void discardWorkingCopies(ICompilationUnit[][] workingCopyBatches) throws JavaModelException {", "-\t\tif (workingCopyBatches == null) return;", "-\t\tfor (int i = 0, length = workingCopyBatches.length; i < length; i++)", "-\t\t\tdiscardWorkingCopies(workingCopyBatches[i]);"]}], "num": 56992}
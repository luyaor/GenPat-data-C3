{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "942594a965532b9923944410bfb566da", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76dfa4e05b1600eb16bc2c1f325ab757", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "4a3b8d7f66c815bfc252f4ffc29a63c010eff917", "commitAfterChange": "2eb63d812179e5217306b90a651b95bfe7169c81", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void compile(ICompilationUnit[] sourceUnits)", "signatureAfterChange": " \tpublic void compile(ICompilationUnit[] sourceUnits)", "diff": ["-\t\tint i = 0;", "+\t\tProcessTaskManager processingTask = null;", "-\t\t\t// process all units (some more could be injected in the loop by the lookup environment)", "-\t\t\tfor (; i < this.totalUnits; i++) {", "-\t\t\t\tunit = unitsToProcess[i];", "-\t\t\t\treportProgress(Messages.bind(Messages.compilation_processing, new String(unit.getFileName())));", "-\t\t\t\ttry {", "+", "+\t\t\tif (this.useSingleThread) {", "+\t\t\t\t// process all units (some more could be injected in the loop by the lookup environment)", "+\t\t\t\tfor (int i = 0; i < this.totalUnits; i++) {", "+\t\t\t\t\tunit = unitsToProcess[i];", "+\t\t\t\t\treportProgress(Messages.bind(Messages.compilation_processing, new String(unit.getFileName())));", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tif (options.verbose)", "+\t\t\t\t\t\t\tthis.out.println(", "+\t\t\t\t\t\t\t\tMessages.bind(Messages.compilation_process,", "+\t\t\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\t\tString.valueOf(i + 1),", "+\t\t\t\t\t\t\t\t\tString.valueOf(this.totalUnits),", "+\t\t\t\t\t\t\t\t\tnew String(unitsToProcess[i].getFileName())", "+\t\t\t\t\t\t\t\t}));", "+\t\t\t\t\t\tprocess(unit, i);", "+\t\t\t\t\t} finally {", "+\t\t\t\t\t\t// cleanup compilation unit result", "+\t\t\t\t\t\tunit.cleanUp();", "+\t\t\t\t\t}", "+\t\t\t\t\tunitsToProcess[i] = null; // release reference to processed unit declaration", "+\t\t\t\t\t", "+\t\t\t\t\treportWorked(1, i);", "+\t\t\t\t\tthis.stats.lineCount += unit.compilationResult.lineSeparatorPositions.length;", "+\t\t\t\t\tlong acceptStart = System.currentTimeMillis();", "+\t\t\t\t\trequestor.acceptResult(unit.compilationResult.tagAsAccepted());", "+\t\t\t\t\tthis.stats.generateTime += System.currentTimeMillis() - acceptStart; // record accept time as part of generation", "-\t\t\t\t\t\t\tMessages.bind(Messages.compilation_process,", "+\t\t\t\t\t\t\tMessages.bind(Messages.compilation_done,", "-\t\t\t\t\t\t\t\tnew String(unitsToProcess[i].getFileName())", "+\t\t\t\t\t\t\t\tnew String(unit.getFileName())", "-\t\t\t\t\tprocess(unit, i);", "-\t\t\t\t} finally {", "-\t\t\t\t\t// cleanup compilation unit result", "-\t\t\t\t\tunit.cleanUp();", "-\t\t\t\tunitsToProcess[i] = null; // release reference to processed unit declaration", "-\t\t\t\t", "-\t\t\t\treportWorked(1, i);", "-\t\t\t\tthis.stats.lineCount += unit.compilationResult.lineSeparatorPositions.length;", "-\t\t\t\tlong acceptStart = System.currentTimeMillis();", "-\t\t\t\trequestor.acceptResult(unit.compilationResult.tagAsAccepted());", "-\t\t\t\tthis.stats.generateTime += System.currentTimeMillis() - acceptStart; // record accept time as part of generation", "-\t\t\t\tif (options.verbose)", "-\t\t\t\t\tthis.out.println(", "-\t\t\t\t\t\tMessages.bind(Messages.compilation_done,", "-\t\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\t\tString.valueOf(i + 1),", "-\t\t\t\t\t\t\tString.valueOf(this.totalUnits),", "-\t\t\t\t\t\t\tnew String(unit.getFileName())", "-\t\t\t\t\t\t}));", "+\t\t\t} else {", "+\t\t\t\tprocessingTask = new ProcessTaskManager(this);", "+\t\t\t\tint acceptedCount = 0;", "+\t\t\t\t// process all units (some more could be injected in the loop by the lookup environment)", "+\t\t\t\t// the processTask can continue to process units until its fixed sized cache is full then it must wait", "+\t\t\t\t// for this this thread to accept the units as they appear (it only waits if no units are available)", "+\t\t\t\twhile (true) {", "+\t\t\t\t\tunit = processingTask.removeNextUnit(); // waits if no units are in the processed queue", "+\t\t\t\t\tif (unit == null) break;", "+\t\t\t\t\treportWorked(1, acceptedCount++);", "+\t\t\t\t\tthis.stats.lineCount += unit.compilationResult.lineSeparatorPositions.length;", "+\t\t\t\t\trequestor.acceptResult(unit.compilationResult.tagAsAccepted());", "+\t\t\t\t\tif (options.verbose)", "+\t\t\t\t\t\tthis.out.println(", "+\t\t\t\t\t\t\tMessages.bind(Messages.compilation_done,", "+\t\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\tString.valueOf(acceptedCount),", "+\t\t\t\t\t\t\t\tString.valueOf(this.totalUnits),", "+\t\t\t\t\t\t\t\tnew String(unit.getFileName())", "+\t\t\t\t\t\t\t}));", "+\t\t\t\t}", "+\t\t\tif (processingTask != null) {", "+\t\t\t\tprocessingTask.shutdown();", "+\t\t\t\tprocessingTask = null;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb62f17cb1d203268dd9d9a01e7a6842", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "0cc61e9905c3f603dab789f6a44abfa63094212c", "commitAfterChange": "dfe6cc33aaef3c9c6160f09ab2a92557f3d235f0", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprotected void processBeginToCompile(ICompilationUnit[] sourceUnits)", "signatureAfterChange": " \tprotected void internalBeginToCompile(ICompilationUnit[] sourceUnits, int maxUnits)", "diff": ["-\t */", "-\tprotected void processBeginToCompile(ICompilationUnit[] sourceUnits) {", "-\t\tint maxUnits = sourceUnits.length;", "-", "-\t\t// Switch the current policy and compilation result for this unit to the requested one.", "-\t\tfor (int i = 0; i < maxUnits; i++) {", "-\t\t\tCompilationUnitDeclaration parsedUnit;", "-\t\t\tCompilationResult unitResult =", "-\t\t\t\tnew CompilationResult(sourceUnits[i], i, maxUnits, this.options.maxProblemsPerUnit);", "-\t\t\ttry {", "-\t\t\t\tif (options.verbose) {", "-\t\t\t\t\tthis.out.println(", "-\t\t\t\t\t\tMessages.bind(Messages.compilation_request,", "-\t\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\t\tString.valueOf(i + 1),", "-\t\t\t\t\t\t\tString.valueOf(maxUnits),", "-\t\t\t\t\t\t\tnew String(sourceUnits[i].getFileName())", "-\t\t\t\t\t\t}));", "-\t\t\t\t}", "-\t\t\t\t// diet parsing for large collection of units", "-\t\t\t\tif (totalUnits < parseThreshold) {", "-\t\t\t\t\tparsedUnit = parser.parse(sourceUnits[i], unitResult);", "-\t\t\t\t} else {", "-\t\t\t\t\tparsedUnit = parser.dietParse(sourceUnits[i], unitResult);", "-\t\t\t\t}", "-\t\t\t\t// initial type binding creation", "-\t\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "-\t\t\t\tthis.addCompilationUnit(sourceUnits[i], parsedUnit);", "-\t\t\t\tImportReference currentPackage = parsedUnit.currentPackage;", "-\t\t\t\tif (currentPackage != null) {", "-\t\t\t\t\tunitResult.recordPackageName(currentPackage.tokens);", "-\t\t\t\t}", "-\t\t\t\t//} catch (AbortCompilationUnit e) {", "-\t\t\t\t//\trequestor.acceptResult(unitResult.tagAsAccepted());", "-\t\t\t} finally {", "-\t\t\t\tsourceUnits[i] = null; // no longer hold onto the unit", "-\t\t\t}", "-\t\t}", "-\t\t// binding resolution", "-\t\tlookupEnvironment.completeTypeBindings();", "+\t */", "+\tprotected void internalBeginToCompile(ICompilationUnit[] sourceUnits, int maxUnits) {", "+\t\t// Switch the current policy and compilation result for this unit to the requested one.", "+\t\tfor (int i = 0; i < maxUnits; i++) {", "+\t\t\tCompilationUnitDeclaration parsedUnit;", "+\t\t\tCompilationResult unitResult =", "+\t\t\t\tnew CompilationResult(sourceUnits[i], i, maxUnits, this.options.maxProblemsPerUnit);", "+\t\t\ttry {", "+\t\t\t\tif (options.verbose) {", "+\t\t\t\t\tthis.out.println(", "+\t\t\t\t\t\tMessages.bind(Messages.compilation_request,", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tString.valueOf(i + 1),", "+\t\t\t\t\t\t\tString.valueOf(maxUnits),", "+\t\t\t\t\t\t\tnew String(sourceUnits[i].getFileName())", "+\t\t\t\t\t\t}));", "+\t\t\t\t}", "+\t\t\t\t// diet parsing for large collection of units", "+\t\t\t\tif (totalUnits < parseThreshold) {", "+\t\t\t\t\tparsedUnit = parser.parse(sourceUnits[i], unitResult);", "+\t\t\t\t} else {", "+\t\t\t\t\tparsedUnit = parser.dietParse(sourceUnits[i], unitResult);", "+\t\t\t\t}", "+\t\t\t\t// initial type binding creation", "+\t\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "+\t\t\t\tthis.addCompilationUnit(sourceUnits[i], parsedUnit);", "+\t\t\t\tImportReference currentPackage = parsedUnit.currentPackage;", "+\t\t\t\tif (currentPackage != null) {", "+\t\t\t\t\tunitResult.recordPackageName(currentPackage.tokens);", "+\t\t\t\t}", "+\t\t\t\t//} catch (AbortCompilationUnit e) {", "+\t\t\t\t//\trequestor.acceptResult(unitResult.tagAsAccepted());", "+\t\t\t} finally {", "+\t\t\t\tsourceUnits[i] = null; // no longer hold onto the unit", "+\t\t\t}", "+\t\t}", "+\t\t// binding resolution", "+\t\tlookupEnvironment.completeTypeBindings();", "+\t}"]}], "num": 5039}
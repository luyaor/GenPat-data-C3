{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5406fc30b3461e142ad489c54cb14f31", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0904c7f60e9ee5301ec1e57a298d0d96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "1d5b841741b609cf6927afba3dde0ac1dd2572e2", "commitAfterChange": "09c7c7b4fe8a9c0ad49252ee63d32d12d87dd8ea", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic static CompilationUnitDeclaration resolve( \t\tchar[] source, \t\tchar[][] packageName, \t\tString unitName, \t\tIJavaProject javaProject, \t\tboolean cleanUp, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": "  \tpublic static CompilationUnitDeclaration resolve( \t\tchar[] source, \t\tchar[][] packageName, \t\tString unitName, \t\tIJavaProject javaProject, \t\tNodeSearcher nodeSearcher, \t\tboolean cleanUp, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["+\t\tNodeSearcher nodeSearcher,", "-\t\tCompilationUnitResolver compilationUnitVisitor =", "-\t\t\tnew CompilationUnitResolver(", "-\t\t\t\tgetNameEnvironment((JavaProject)javaProject, owner, monitor),", "-\t\t\t\tgetHandlingPolicy(),", "-\t\t\t\tjavaProject.getOptions(true),", "-\t\t\t\tgetRequestor(),", "-\t\t\t\tgetProblemFactory(monitor));", "-\t", "+\t\tCancelableNameEnvironment environment = null;", "+\t\tCancelableProblemFactory problemFactory = null;", "+\t\t\tenvironment = new CancelableNameEnvironment(((JavaProject)javaProject), owner, monitor);", "+\t\t\tproblemFactory = new CancelableProblemFactory(monitor);", "+\t\t\tCompilationUnitResolver compilationUnitVisitor =", "+\t\t\t\tnew CompilationUnitResolver(", "+\t\t\t\t\tenvironment,", "+\t\t\t\t\tgetHandlingPolicy(),", "+\t\t\t\t\tjavaProject.getOptions(true),", "+\t\t\t\t\tgetRequestor(),", "+\t\t\t\t\tproblemFactory);", "+", "-\t\t\tunit =", "-\t\t\t\tcompilationUnitVisitor.resolve(", "-\t\t\t\t\tnew BasicCompilationUnit(", "-\t\t\t\t\t\tsource,", "-\t\t\t\t\t\tpackageName,", "-\t\t\t\t\t\tunitName,", "-\t\t\t\t\t\tencoding),", "-\t\t\t\t\ttrue, // method verification", "-\t\t\t\t\ttrue, // analyze code", "-\t\t\t\t\ttrue); // generate code\t\t\t\t\t", "+\t\t\tif (nodeSearcher != null) {", "+\t\t\t\tunit = ", "+\t\t\t\t\tcompilationUnitVisitor.resolve(", "+\t\t\t\t\t\tnew BasicCompilationUnit(", "+\t\t\t\t\t\t\tsource,", "+\t\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\t\tunitName,", "+\t\t\t\t\t\t\tencoding),", "+\t\t\t\t\t\tnodeSearcher,", "+\t\t\t\t\t\ttrue, // method verification", "+\t\t\t\t\t\ttrue, // analyze code", "+\t\t\t\t\t\ttrue); // generate code\t\t\t\t\t", "+\t\t\t} else {", "+\t\t\t\tunit = ", "+\t\t\t\t\tcompilationUnitVisitor.resolve(", "+\t\t\t\t\t\tnew BasicCompilationUnit(", "+\t\t\t\t\t\t\tsource,", "+\t\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\t\tunitName,", "+\t\t\t\t\t\t\tencoding),", "+\t\t\t\t\t\ttrue, // method verification", "+\t\t\t\t\t\ttrue, // analyze code", "+\t\t\t\t\t\ttrue); // generate code\t\t\t\t\t", "+\t\t\t}", "+\t\t\tif (environment != null) {", "+\t\t\t\tenvironment.monitor = null; // don't hold a reference to this external object", "+\t\t\t}", "+\t\t\tif (problemFactory != null) {", "+\t\t\t\tproblemFactory.monitor = null; // don't hold a reference to this external object", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c9e94cfecaa4d4fda59e326481bb564", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "5fd533c8760a35e551d2642335bb8a6be55dd0a9", "commitAfterChange": "0e6753a185999404d06eadf4d1578289f19a00e3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic static CompilationUnitDeclaration process( \t\tCompilationUnitDeclaration unit, \t\tICompilationUnit unitElement,  \t\tchar[] contents, \t\tParser parser, \t\tWorkingCopyOwner workingCopyOwner, \t\tIProblemRequestor problemRequestor, \t\tIProblemFactory problemFactory, \t\tboolean cleanupCU, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": "  \tpublic static CompilationUnitDeclaration process( \t\tCompilationUnitDeclaration unit, \t\tICompilationUnit unitElement,  \t\tchar[] contents, \t\tParser parser, \t\tWorkingCopyOwner workingCopyOwner, \t\tIProblemRequestor problemRequestor, \t\tboolean cleanupCU, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["-\t\tIProblemFactory problemFactory,", "-\t\tCompilationUnitProblemFinder problemFinder =", "-\t\t\tnew CompilationUnitProblemFinder(", "-\t\t\t\tproject.newSearchableNameEnvironment(workingCopyOwner),", "+\t\tCancelableNameEnvironment environment = null;", "+\t\tCancelableProblemFactory problemFactory = null;", "+\t\tCompilationUnitProblemFinder problemFinder = null;", "+\t\ttry {", "+\t\t\tenvironment = new CancelableNameEnvironment(project, workingCopyOwner, monitor);", "+\t\t\tproblemFactory = new CancelableProblemFactory(monitor);", "+\t\t\tproblemFinder = new CompilationUnitProblemFinder(", "+\t\t\t\tenvironment,", "-\t\tif (parser != null) {", "-\t\t\tproblemFinder.parser = parser;", "-\t\t}", "-", "-\t\ttry {", "-\t\t\t", "+\t\t\tif (parser != null) {", "+\t\t\t\tproblemFinder.parser = parser;", "+\t\t\t}", "+\t\t} catch (OperationCanceledException e) {", "+\t\t\tthrow e;", "-\t\t\tif (cleanupCU && unit != null) {", "+\t\t\tif (environment != null)", "+\t\t\t\tenvironment.monitor = null; // don't hold a reference to this external object", "+\t\t\tif (problemFactory != null)", "+\t\t\t\tproblemFactory.monitor = null; // don't hold a reference to this external object", "+\t\t\tif (cleanupCU && unit != null)", "-\t\t\t}", "-\t\t\tproblemFinder.lookupEnvironment.reset();\t\t\t", "+\t\t\tif (problemFinder != null)", "+\t\t\t\tproblemFinder.lookupEnvironment.reset();\t\t\t"]}], "num": 67168}
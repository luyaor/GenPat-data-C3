{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b891302806ec7bf746c685321c6f0af", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "555251c552db3c1ec05dfa60e47ce603", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SearchParticipantTests.java", "commitBeforeChange": "85ee19ae5349b20e38ff21e5b357d607fa19b367", "commitAfterChange": "c2615599dfd5ddc3fcc221204bcbd52b635e421d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic synchronized void _testIndexDocument() throws CoreException, InterruptedException", "signatureAfterChange": " \tpublic synchronized void testIndexDocument02() throws CoreException, InterruptedException", "diff": ["-\t */", "-\tpublic synchronized void _testIndexDocument() throws CoreException, InterruptedException {", "-\t\ttry {", "-\t\t\tcreateJavaProject(\"P\");", "-\t\t\tTestSearchParticipant participant = new TestSearchParticipant(){", "-\t\t\t\tpublic void indexDocument(SearchDocument document, IPath indexLocation) {", "-\t\t\t\t\tif (!document.getPath().equals(\"/P/no\")) {", "-\t\t\t\t\t\tfor (int i = 0; i < 1000; i++) {", "-\t\t\t\t\t\t\tdocument.addIndexEntry((\"category\" + i).toCharArray(), (\"key\" + i).toCharArray());", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t};", "-\t\t\tTestSearchDocument document = new TestSearchDocument(\"/P/X.test\", participant);", "-\t\t\tparticipant.scheduleDocumentIndexing(document, getIndexLocation());", "-\t\t\twaitUntilIndexesReady();", "-\t\t\twait(1100); // wait more than 1000ms so as to allow for the index to be saved on disk", "-\t\t\tdocument = new TestSearchDocument(\"/P/no\", participant);", "-\t\t\tparticipant.scheduleDocumentIndexing(document, getIndexLocation());", "-\t\t\twaitUntilIndexesReady();", "-\t\t\tassertTrue(\"Index file should have been written\",  getIndexLocation().toFile().length() > 0);", "-\t\t} finally {", "-\t\t\tdeleteProject(\"P\");", "-\t\t}", "+\t */", "+\tpublic synchronized void testIndexDocument02() throws CoreException, InterruptedException {", "+\t\tTestSearchParticipant participant = new TestSearchParticipant(){", "+\t\t\tpublic void indexDocument(SearchDocument document, IPath indexLocation) {", "+\t\t\t\tif (!document.getPath().equals(\"/P/no\")) {", "+\t\t\t\t\tfor (int i = 0; i < 1000; i++) {", "+\t\t\t\t\t\tdocument.addIndexEntry((\"category\" + i).toCharArray(), (\"key\" + i).toCharArray());", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t};", "+\t\tTestSearchDocument document = new TestSearchDocument(\"/P/X.test\", participant);", "+\t\tparticipant.scheduleDocumentIndexing(document, getIndexLocation());", "+\t\twaitUntilIndexesReady();", "+\t\twait(1100); // wait more than 1000ms so as to allow for the index to be saved on disk", "+\t\tdocument = new TestSearchDocument(\"/P/no\", participant);", "+\t\tparticipant.scheduleDocumentIndexing(document, getIndexLocation());", "+\t\twaitUntilIndexesReady();", "+\t\twait(1100); // wait more than 1000ms so as to allow for the index to be saved on disk", "+\t\tassertTrue(\"Index file should have been written\",  getIndexLocation().toFile().length() > 0);", "+\t", "+\t\tsimulateExit();", "+\t\tassertTrue(\"Index file should stay after shutdown\",  getIndexLocation().toFile().length() > 0);", "+\t\tthis.deleteProject = false;", "+\t\tthis.restart = true;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3f4429bcae2d4e55b2f125aa6a0465c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SearchParticipantTests.java", "commitBeforeChange": "85ee19ae5349b20e38ff21e5b357d607fa19b367", "commitAfterChange": "c2615599dfd5ddc3fcc221204bcbd52b635e421d", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void _testSearch() throws CoreException", "signatureAfterChange": " \tpublic void testSearch() throws CoreException", "diff": ["-\tpublic void _testSearch() throws CoreException {", "-\t\ttry {", "-\t\t\tcreateJavaProject(\"P\");", "-\t\t\tcreateFile(", "-\t\t\t\t\"/P/X.test\",", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"}\"", "-\t\t\t);", "-\t\t\t", "-\t\t\t// index file", "-\t\t\tTestSearchParticipant participant = new TestSearchParticipant();", "-\t\t\tTestSearchDocument document = new TestSearchDocument(\"/P/X.test\", participant);", "-\t\t\tparticipant.scheduleDocumentIndexing(document, getIndexLocation());", "-\t\t\twaitUntilIndexesReady();", "-\t\t\t", "-\t\t\t// search for declaration of X", "-\t\t\tSearchPattern pattern = SearchPattern.createPattern(\"X\", IJavaSearchConstants.DECLARATIONS, IJavaSearchConstants.TYPE, SearchPattern.R_EXACT_MATCH);", "-\t\t\tIJavaSearchScope scope = SearchEngine.createWorkspaceScope();", "-\t\t\tSearchRequestor requestor =  new TestResultCollector();", "-\t\t\tnew SearchEngine().search(pattern, new SearchParticipant[] {participant}, scope, requestor, null);", "-\t\t\tassertSearchResults(", "-\t\t\t\t\"X.test X [X]\",", "-\t\t\t\trequestor);", "-\t\t} finally {", "-\t\t\tdeleteProject(\"P\");", "-\t\t}", "+\t */", "+\tpublic void testSearch() throws CoreException {", "+\t\tcreateFile(", "+\t\t\t\"/P/X.test\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+", "+\t\t// index file", "+\t\tTestSearchParticipant participant = new TestSearchParticipant();", "+\t\tTestSearchDocument document = new TestSearchDocument(\"/P/X.test\", participant);", "+\t\tparticipant.scheduleDocumentIndexing(document, getIndexLocation());", "+\t\twaitUntilIndexesReady();", "+", "+\t\t// search for declaration of X", "+\t\tSearchPattern pattern = SearchPattern.createPattern(\"X\", IJavaSearchConstants.DECLARATIONS, IJavaSearchConstants.TYPE, SearchPattern.R_EXACT_MATCH);", "+\t\tIJavaSearchScope scope = SearchEngine.createWorkspaceScope();", "+\t\tSearchRequestor requestor =  new TestResultCollector();", "+\t\tnew SearchEngine().search(pattern, new SearchParticipant[] {participant}, scope, requestor, null);", "+\t\tassertSearchResults(", "+\t\t\t\"X.test X [X]\",", "+\t\t\trequestor);", "+\t}"]}], "num": 63834}
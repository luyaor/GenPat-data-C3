{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cabc101d975101852360081f94ad48e6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32825be88604eefd31afda5094107e79", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "fe46c42d584fc9df798276778c11a2ce2f79d8c4", "commitAfterChange": "8904ea4393baa4ec97ffdacde82d6f35bb8add7c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void add(IJavaProject javaProject, boolean includesPrereqProjects, HashSet visitedProjects) throws JavaModelException", "signatureAfterChange": "  public void add(IJavaProject javaProject, int includeMask, HashSet visitedProjects) throws JavaModelException", "diff": ["-public void add(IJavaProject javaProject, boolean includesPrereqProjects, HashSet visitedProjects) throws JavaModelException {", "+public void add(IJavaProject javaProject, int includeMask, HashSet visitedProjects) throws JavaModelException {", "-\t\t\t\tIPath path = entry.getPath();", "-\t\t\t\tthis.add(path, true);", "-\t\t\t\tthis.addEnclosingProjectOrJar(path);", "+\t\t\t\tIClasspathEntry rawEntry = null;", "+\t\t\t\tJavaModelManager.PerProjectInfo perProjectInfo = ((JavaProject)javaProject).getPerProjectInfo();", "+\t\t\t\tif (perProjectInfo != null && perProjectInfo.resolvedPathToRawEntries != null) {", "+\t\t\t\t\trawEntry = (IClasspathEntry) perProjectInfo.resolvedPathToRawEntries.get(entry.getPath());", "+\t\t\t\t}", "+\t\t\t\tif (rawEntry == null) break;", "+\t\t\t\tswitch (rawEntry.getEntryKind()) {", "+\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:", "+\t\t\t\t\tcase IClasspathEntry.CPE_VARIABLE:", "+\t\t\t\t\t\tif ((includeMask & APPLICATION_LIBRARIES) != 0) {", "+\t\t\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\t\t\tadd(path, true);", "+\t\t\t\t\t\t\taddEnclosingProjectOrJar(path);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IClasspathEntry.CPE_CONTAINER:", "+\t\t\t\t\t\tIClasspathContainer container = JavaCore.getClasspathContainer(rawEntry.getPath(), javaProject);", "+\t\t\t\t\t\tif (container == null) break;", "+\t\t\t\t\t\tif ((container.getKind() == IClasspathContainer.K_APPLICATION && (includeMask & APPLICATION_LIBRARIES) != 0)", "+\t\t\t\t\t\t\t\t|| (includeMask & SYSTEM_LIBRARIES) != 0) {", "+\t\t\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\t\t\tadd(path, true);", "+\t\t\t\t\t\t\taddEnclosingProjectOrJar(path);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t\t\t\tif (includesPrereqProjects) {", "-\t\t\t\t\tthis.add(model.getJavaProject(entry.getPath().lastSegment()), true, visitedProjects);", "+\t\t\t\tif ((includeMask & REFERENCED_PROJECTS) != 0) {", "+\t\t\t\t\tadd(model.getJavaProject(entry.getPath().lastSegment()), includeMask, visitedProjects);", "-\t\t\t\tthis.add(entry.getPath(), true);", "+\t\t\t\tif ((includeMask & SOURCES) != 0) {", "+\t\t\t\t\tadd(entry.getPath(), true);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "604bf8aa1b98e92d58ff0a7a40f4a801", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/NameEnvironment.java", "commitBeforeChange": "6c9d3461652e1b0a1c076bd07fea25ea7241dc4b", "commitAfterChange": "fc3823ac5e20f18e24acb3b991589cbc8e132c53", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public static ClasspathLocation[] computeLocations(IJavaProject project, boolean isUsingSourceFolders, ObjectVector sourceFolders, LookupTable prereqOutputFolders) throws JavaModelException", "signatureAfterChange": "\r public static ClasspathLocation[] computeLocations(\r \tIWorkspaceRoot workspaceRoot,\r \tIJavaProject javaProject,\r \tString outputFolderLocation,\r \tArrayList sourceFolders,\r \tLookupTable prereqOutputFolders) throws JavaModelException", "diff": ["-\t*/\r", "-public static ClasspathLocation[] computeLocations(IJavaProject project, boolean isUsingSourceFolders, ObjectVector sourceFolders, LookupTable prereqOutputFolders) throws JavaModelException {\r", "+*/\r", "+public static ClasspathLocation[] computeLocations(\r", "+\tIWorkspaceRoot workspaceRoot,\r", "+\tIJavaProject javaProject,\r", "+\tString outputFolderLocation,\r", "+\tArrayList sourceFolders,\r", "+\tLookupTable prereqOutputFolders) throws JavaModelException {\r", "-\tIClasspathEntry[] classpathEntries = ((JavaProject)project).getExpandedClasspath(true);\r", "+\tIClasspathEntry[] classpathEntries = ((JavaProject) javaProject).getExpandedClasspath(true);\r", "-\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();\r", "-\tIPath projectPath = project.getProject().getFullPath();\r", "-\tIResource outputFolder = workspaceRoot.findMember(project.getOutputLocation());\r", "-\t\r", "-\t\t\t\t\tif (!(resource instanceof IContainer)) continue nextEntry;\r", "-\t\t\t\t\tif (outputFolder == null || !outputFolder.exists() || !(outputFolder instanceof IContainer)){\r", "-\t\t\t\t\t\tcontinue nextEntry;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (isUsingSourceFolders){ // sources + binaries mode\r", "-\t\t\t\t\t\tif (sourceFolders != null) sourceFolders.add(resource);\r", "-\t\t\t\t\t\tclasspathLocations[cpCount++] = ClasspathLocation.forSourceFolder(\r", "-\t\t\t\t\t\t\tresource.getLocation().toString(),\r", "-\t\t\t\t\t\t\toutputFolder.getLocation().toString());\r", "-\t\t\t\t\t} else { // only consider binaries(once)\r", "-\t\t\t\t\t\tif (firstSourceFolder){\r", "-\t\t\t\t\t\t\tfirstSourceFolder = false;\r", "-\t\t\t\t\t\t\tclasspathLocations[cpCount++] = ClasspathLocation.forRequiredProject(outputFolder.getLocation().toString());\r", "-\t\t\t\t\t\t}\r", "+\t\t\t\t\tif (outputFolderLocation == null || !(resource instanceof IContainer)) continue nextEntry;\r", "+\t\t\t\t\tif (sourceFolders != null) { // normal builder mode\r", "+\t\t\t\t\t\tsourceFolders.add(resource);\r", "+\t\t\t\t\t\tclasspathLocations[cpCount++] =\r", "+\t\t\t\t\t\t\tClasspathLocation.forSourceFolder(resource.getLocation().toString(), outputFolderLocation);\r", "+\t\t\t\t\t} else if (firstSourceFolder) { // add the output folder only once\r", "+\t\t\t\t\t\tfirstSourceFolder = false;\r", "+\t\t\t\t\t\tclasspathLocations[cpCount++] = ClasspathLocation.forRequiredProject(outputFolderLocation);\r", "-\t\t\t\t\tif (prereqOutputFolders != null) prereqOutputFolders.put(prereqProject, prereqOutputFolder);\r", "+\t\t\t\t\tif (prereqOutputFolders != null)\r", "+\t\t\t\t\t\tprereqOutputFolders.put(prereqProject, prereqOutputFolder);\r", "-\tif (cpCount < max) {\r", "+\tif (cpCount < max)\r", "-\t}\r"]}], "num": 64997}
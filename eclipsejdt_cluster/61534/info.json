{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4dc9429188eca599d22d259368fe6144", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00d54c241b37b8a31047e00a094896d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void test001()", "signatureAfterChange": " \tpublic void test001()", "diff": ["-\t\t\t\"     0  new A001$1$A [21]\\n\" + ", "+\t\t\t\"     0  new A001$1$A [20]\\n\" + ", "-\t\t\t\"     5  invokespecial A001$1$A(A001) [24]\\n\" + ", "-\t\t\t\"     8  invokevirtual A001$1$A.get() : int  [27]\\n\" + ", "+\t\t\t\"     5  invokespecial A001$1$A(A001) [22]\\n\" + ", "+\t\t\t\"     8  invokevirtual A001$1$A.get() : int [25]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00dc4da0bcb7210706b3713f60ff2d1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 255, "methodNumberAfterChange": 255, "signatureBeforeChange": " \tpublic void test253()", "signatureAfterChange": " \tpublic void test253()", "diff": ["-\t\t\t\"Unsafe type operation: The cast from List<? extends Number> to parameterized type List<Number> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from List<? extends Number> to List<Number> will not check conformance of type arguments at runtime\\n\" + ", "-\t\t\t\"Unnecessary cast to type List<? extends Number> for expression of type List<? extends Number>\\n\" + ", "+\t\t\t\"Unnecessary cast from List<? extends Number> to List<? extends Number>\\n\" + ", "-\t\t\t\"Unnecessary cast to type List<? extends Number> for expression of type List<Integer>\\n\" + ", "+\t\t\t\"Unnecessary cast from List<Integer> to List<? extends Number>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01087763c30d2dc791443f9c2796b8e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AssignmentTest.java", "commitBeforeChange": "c9e02661baa80cf1f75154d10de9df61ce3f636d", "commitAfterChange": "d92419d7d90bedd902391c7e83696cf6304867ae", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public void test002()", "signatureAfterChange": "  public void test002()", "diff": ["-\t\t\"zork cannot be resolved\\n\" +", "+\t\t\"zork cannot be resolved to a variable\\n\" +", "-\t\t\"zork cannot be resolved\\n\" +", "+\t\t\"zork cannot be resolved to a variable\\n\" +", "-\t\t\"zork cannot be resolved\\n\" +", "+\t\t\"zork cannot be resolved to a variable\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0313144c6b92ba468a0a4f32ed39dfc9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  \tpublic void test26() throws JavaModelException", "signatureAfterChange": "  \tpublic void test26() throws JavaModelException", "diff": ["-\t\t\t\"field [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"field [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\",", "+\t\t\t\"field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\",", "+\t\t\telements", "+\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "037960e209b4450b0c2710bf7df24c93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 783, "methodNumberAfterChange": 783, "signatureBeforeChange": " public void test777()", "signatureAfterChange": " public void test777()", "diff": ["-\t\t\"Type safety: X.B is a raw type. References to generic type X.B<T> should be parameterized\\n\" + ", "+\t\t\"X.B is a raw type. References to generic type X.B<T> should be parameterized\\n\" + ", "-\t\t\"Type safety: X.G is a raw type. References to generic type X.G<T> should be parameterized\\n\" + ", "+\t\t\"X.G is a raw type. References to generic type X.G<T> should be parameterized\\n\" + ", "-\t\t\"Type safety: X.G is a raw type. References to generic type X.G<T> should be parameterized\\n\" + ", "+\t\t\"X.G is a raw type. References to generic type X.G<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04cfe68f1ddfe3b3187f2ed8d6974a30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "0bd8e1b1cf24c00d081a70bccd79f0e53ad3dc52", "commitAfterChange": "b35be838b9d57695e23b927dc647a592275feef5", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " public void test056u()", "signatureAfterChange": " public void test056u()", "diff": ["-\t\t\"Resource leak: \\\"reader2\\\" is never closed\\n\" + ", "+\t\t\"Resource leak: 'reader2' is never closed\\n\" + ", "-\t\t\"Resource leak: \\\"reader1\\\" is not closed at this location\\n\" + ", "+\t\t\"Resource leak: 'reader1' is not closed at this location\\n\" + ", "-\t\t\"Resource leak: \\\"reader1\\\" is not closed at this location\\n\" + ", "+\t\t\"Resource leak: 'reader1' is not closed at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05d743782351b6b50714d1904c25b411", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": "\r public void test0077() throws IOException", "signatureAfterChange": "\r public void test0077() throws IOException", "diff": ["-\tassertEquals(\"Wrong location\", \"{0}\", locations.get(\"@F\"));\r", "-\tassertEquals(\"Wrong location\", \"{1}\", locations.get(\"@G\"));\r", "-\tassertEquals(\"Wrong location\", \"{2}\", locations.get(\"@H\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY]\", locations.get(\"@F\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY]\", locations.get(\"@G\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY]\", locations.get(\"@H\"));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0603c30342c4736edc3cf3dc186dbe54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "ee6e442281c6adfce6f28a674af1fb9f7f9d707f", "commitAfterChange": "9d88e07972fdc72c8f68cd0cc8f036c691b75fb7", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void testLocalType1() throws JavaModelException", "signatureAfterChange": " public void testLocalType1() throws JavaModelException", "diff": ["-\t\t\"  X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object [in Object.class [in java.lang [in \"+  getExternalJCLPathString() +\" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  X {key=Lp7/X;} [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"  Y2 [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\",", "+\t\t\"  Y2 {key=Lp7/A$84;} [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08135445a05c1d1bb62ca70e0bf62400", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public void testRegion4() throws CoreException", "signatureAfterChange": " public void testRegion4() throws CoreException", "diff": ["-\t\t\t\"  X {key=LX;} [in X.java [in <default> [in <project root> [in P1]]]]\\n\" + ", "-\t\t\t\"    Z {key=LZ;} [in Z.java [in <default> [in <project root> [in P3]]]]\\n\" + ", "-\t\t\t\"    Y {key=LY;} [in Y.java [in <default> [in <project root> [in P2]]]]\\n\",", "+\t\t\t\"  X [in X.java [in <default> [in <project root> [in P1]]]]\\n\" + ", "+\t\t\t\"    Z [in Z.java [in <default> [in <project root> [in P3]]]]\\n\" + ", "+\t\t\t\"    Y [in Y.java [in <default> [in <project root> [in P2]]]]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08d9c42051a326e550ee3410388fdfe1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void test_nonnull_local_002()", "signatureAfterChange": " public void test_nonnull_local_002()", "diff": ["-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is inferred as @Nullable\\n\" +", "-\t\t\"Type mismatch: required \\'@NonNull String\\' but the provided value is null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull String\\' but the provided value is null\\n\" +", "-\t\t\"Potential type mismatch: required \\'@NonNull Object\\' but nullness of the provided value is unknown\\n\" +", "+\t\t\"Null type safety: The expression of type Object needs unchecked conversion to conform to \\'@NonNull Object\\'\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b063948a7b9eeb22f7471d0052c5a3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "48774e458dcfc41c34b203c6488c7b9a8716e5cc", "commitAfterChange": "6224a5dcda094820e09b86e019ae927259ff3273", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " public void testBug232768_Block06() throws JavaModelException", "signatureAfterChange": " public void testBug232768_Block06() throws JavaModelException", "diff": ["-\t\t\"   public     class\t\t\tD{\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"\t/*\\n\" +", "+\t\t\"   public     class\t\t\tD{    \\n\" +", "+\t\t\"\t\\n\" +", "+\t\t\"        /*\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b219699aa824d136e01e7b0e13ef8e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 604, "methodNumberAfterChange": 604, "signatureBeforeChange": " \tpublic void test600()", "signatureAfterChange": " \tpublic void test600()", "diff": ["-    \t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+    \t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-    \t\t\"Type safety: MyEnum is a raw type. References to generic type MyEnum<E> should be parameterized\\n\" + ", "+    \t\t\"MyEnum is a raw type. References to generic type MyEnum<E> should be parameterized\\n\" + ", "-    \t\t\"Type safety: MyEnum is a raw type. References to generic type MyEnum<E> should be parameterized\\n\" + ", "+    \t\t\"MyEnum is a raw type. References to generic type MyEnum<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b662b5bb035ee73086cd6b8fb4d1b46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " public void testTypeRefAll_Cast() throws CoreException", "signatureAfterChange": " public void testTypeRefAll_Cast() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\tt = (\ufffd|Types|\ufffd) o;@391] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java Types all.types.ref.TestTypes.method(Types) [\t\tTypes local = (\ufffd|Types|\ufffd) obj;@545] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\t\t\tthis.str = (\ufffd|String|\ufffd) this.object;@847] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\tt = (!|Types|!) o;@391] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java Types all.types.ref.TestTypes.method(Types) [\t\tTypes local = (!|Types|!) obj;@545] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\t\t\tthis.str = (!|String|!) this.object;@847] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ce582d102914943031b72e1f741cd30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 227, "methodNumberAfterChange": 228, "signatureBeforeChange": " public void testBug260381_wksp2_06() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_06() throws JavaModelException", "diff": ["-\t\t\"\t *             permit null elements. Note that if {@code occurrences} is\\n\" + ", "-\t\t\"\t *             zero, the implementation may opt to return normally.\\n\" + ", "+\t\t\"\t *             permit null elements. Note that if {@code\\n\" + ", "+\t\t\"\t *     occurrences} is zero, the implementation may opt to return normally.\\n\" + ", "-\t\t\"\tboolean /* int */add(E element, int occurrences);\\n\" + ", "+\t\t\"\tboolean /* int */ add(E element, int occurrences);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d2191dedfb02a6fb899f717e848828f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "b86c62c9276301f4293d579436f1016659c6742c", "commitAfterChange": "9816d147cfcd9317931332a2edf2549b9a55fa79", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void testBug233011() throws JavaModelException", "signatureAfterChange": " public void testBug233011() throws JavaModelException", "diff": ["-\t\t\"        // single          [# #]            line comment\\n\" +", "+\t\t\"        // [#single                       line#] comment\\n\" +", "-\t\t\"\t/*\\n\" +", "+\t\t\"        /*\\n\" +", "-\t\t\"\t// single line comment\\n\" +", "+\t\t\"        // single line comment\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d4c95884e2cd1fb16c0361ea73fdcbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 637, "methodNumberAfterChange": 637, "signatureBeforeChange": " \tpublic void test0632()", "signatureAfterChange": " \tpublic void test0632()", "diff": ["-\t\t\t\"The method add(capture-of ? extends Object[]) in the type Vector<capture-of ? extends Object[]> is not applicable for the arguments (capture-of ? extends Object[])\\n\" + ", "+\t\t\t\"The method add(capture#3-of ? extends Object[]) in the type Vector<capture#3-of ? extends Object[]> is not applicable for the arguments (capture#4-of ? extends Object[])\\n\" + ", "-\t\t\t\"The method add(capture-of ? super Object[]) in the type Vector<capture-of ? super Object[]> is not applicable for the arguments (capture-of ? super Object[])\\n\" + ", "+\t\t\t\"The method add(capture#5-of ? super Object[]) in the type Vector<capture#5-of ? super Object[]> is not applicable for the arguments (capture#6-of ? super Object[])\\n\" + ", "-\t\t\t\"The method add(capture-of ? extends Object[]) in the type Vector<capture-of ? extends Object[]> is not applicable for the arguments (capture-of ? super Object[])\\n\" + ", "+\t\t\t\"The method add(capture#7-of ? extends Object[]) in the type Vector<capture#7-of ? extends Object[]> is not applicable for the arguments (capture#8-of ? super Object[])\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ec243dbee7e2edd90c597029decefa6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 269, "methodNumberAfterChange": 269, "signatureBeforeChange": " public void testBug330313_regression_187b()", "signatureAfterChange": " public void testBug330313_regression_187b()", "diff": ["-\t\t\"\t\t\t\t+ Registry.getConvertToolName() + (\\\" -o \\\" + _workingDir\\n\" + ", "-\t\t\"\t\t\t\t+ File.separator + documentName + (\\\" -l \\\" + _workingDir\\n\" + ", "-\t\t\"\t\t\t\t+ File.separator + _fileList)));\\n\" + ", "+\t\t\"\t\t\t\t+ Registry.getConvertToolName()\\n\" + ", "+\t\t\"\t\t\t\t+ (\\\" -o \\\" + _workingDir + File.separator + documentName\\n\" + ", "+\t\t\"\t\t\t\t\t\t+ (\\\" -l \\\" + _workingDir + File.separator + _fileList)));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ef7f775ff52174ec944517267114a64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "48774e458dcfc41c34b203c6488c7b9a8716e5cc", "commitAfterChange": "6224a5dcda094820e09b86e019ae927259ff3273", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " public void testBug232768_Javadoc06() throws JavaModelException", "signatureAfterChange": " public void testBug232768_Javadoc06() throws JavaModelException", "diff": ["-\t\t\"   public     class\t\t\tC{\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"\t/**\\n\" +", "+\t\t\"   public     class\t\t\tC{    \\n\" +", "+\t\t\"\t\\n\" +", "+\t\t\"        /**\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f17ced813ac003bf8bff2227721a2b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "\t \tpublic void test078()", "signatureAfterChange": "\t \tpublic void test078()", "diff": ["-\t\t\t\"Type safety: The expression of raw type A is converted to A<String>. References to generic type A<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type A is converted to A<String> using a raw conversion. References to generic type A<P> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: The expression of raw type A is converted to A<String>. References to generic type A<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type A is converted to A<String> using a raw conversion. References to generic type A<P> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: The expression of raw type A is converted to A<String>. References to generic type A<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type A is converted to A<String> using a raw conversion. References to generic type A<P> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f2f2662fdad4c56203a26f2cc0993fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 269, "methodNumberAfterChange": 269, "signatureBeforeChange": " public void testBug330313_regression_187b()", "signatureAfterChange": " public void testBug330313_regression_187b()", "diff": ["-\t\t\"\t\t\t\t+ Registry.getConvertToolName()\\n\" + ", "-\t\t\"\t\t\t\t+ (\\\" -o \\\" + _workingDir + File.separator + documentName\\n\" + ", "-\t\t\"\t\t\t\t\t\t+ (\\\" -l \\\" + _workingDir + File.separator + _fileList)));\\n\" + ", "+\t\t\"\t\t\t\t+ Registry.getConvertToolName() + (\\\" -o \\\" + _workingDir\\n\" + ", "+\t\t\"\t\t\t\t+ File.separator + documentName + (\\\" -l \\\" + _workingDir\\n\" + ", "+\t\t\"\t\t\t\t+ File.separator + _fileList)));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f6f866c17b28b4539ba5eaf261b6a00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "  \tpublic void test067()", "signatureAfterChange": "  \tpublic void test067()", "diff": ["-\t\t\t\t+ \"Javadoc: java.awt.AWTexception cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: java.awt.AWTexception cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: IOException cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: IOException cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"InvalidException cannot be resolved (or is not an exception type) for the method t_foo\\n\"", "+\t\t\t\t+ \"InvalidException cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fca894ff14227dc3460607d4b829ad8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 227, "methodNumberAfterChange": 228, "signatureBeforeChange": " public void testBug260381_wksp2_06() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_06() throws JavaModelException", "diff": ["-\t\t\"\t *             permit null elements. Note that if {@code occurrences} is\\n\" + ", "-\t\t\"\t *             zero, the implementation may opt to return normally.\\n\" + ", "+\t\t\"\t *             permit null elements. Note that if {@code\\n\" + ", "+\t\t\"\t *     occurrences} is zero, the implementation may opt to return normally.\\n\" + ", "-\t\t\"\tboolean /* int */add(E element, int occurrences);\\n\" + ", "+\t\t\"\tboolean /* int */ add(E element, int occurrences);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ff78a5cd384d439d13cfbe567a570f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "63c8a2ec89eae9c5f71458dc20e19fe16c16341b", "commitAfterChange": "1380663d32eef4fe51daddb994c3d2197de60d56", "methodNumberBeforeChange": 422, "methodNumberAfterChange": 422, "signatureBeforeChange": " public void test2014_flow_info()", "signatureAfterChange": " public void test2014_flow_info()", "diff": ["-\t\t\"1. ERROR in X.java (at line 12)\\n\" +", "-\t\t\"\tclass Inner extends X {\\n\" +", "-\t\t\"\t      ^^^^^\\n\" +", "+\t\t\"1. ERROR in X.java (at line 20)\\n\" +", "+\t\t\"\tfinal int m164;\\n\" +", "+\t\t\"\t          ^^^^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1175c427fbf189215240433fd8124eaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 48, "signatureBeforeChange": " public void test0044()", "signatureAfterChange": " public void test0044()", "diff": ["-\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11f49ac065624a2b9158acd6b9a0629f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "2001b039afb3494b66b4a4b694a48c1ddf006564", "commitAfterChange": "4f470c96fe8512fc8667dbb12384398ec0b5851a", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \t \tpublic void testExtendedDimensions() throws JavaModelException", "signatureAfterChange": " \t \tpublic void testExtendedDimensions() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Unexpected type\", tBinding1.toString(), \"@Marker{ value = (String)\\\"1\\\"} String @Marker{ value = (String)\\\"2\\\"} []\");", "-\t\tassertEquals(\"Unexpected type\", methodDeclaration.resolveBinding().getReturnType().toString(), \"@Marker{ value = (String)\\\"1\\\"} String @Marker3{ value = (String)\\\"3\\\"} [] @Marker{ value = (String)\\\"2\\\"} []\");", "+\t\tassertEquals(\"Unexpected type\", tBinding1.toString(), \"@Marker((String)\\\"1\\\") String @Marker((String)\\\"2\\\") []\");", "+\t\tassertEquals(\"Unexpected type\", methodDeclaration.resolveBinding().getReturnType().toString(), \"@Marker((String)\\\"1\\\") String @Marker3((String)\\\"3\\\") [] @Marker((String)\\\"2\\\") []\");", "-\t\tassertEquals(\"Unexpected type\", fragment.resolveBinding().getType().toString(), \"String @Marker{ value = (String)\\\"Extended\\\"} [] @Marker{ value = (String)\\\"i0\\\"} @Marker2 [] [] @Marker{ value = (String)\\\"i1\\\"} []\");", "+\t\tassertEquals(\"Unexpected type\", fragment.resolveBinding().getType().toString(), \"String @Marker((String)\\\"Extended\\\") [] @Marker((String)\\\"i0\\\") @Marker2 [] [] @Marker((String)\\\"i1\\\") []\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13b280546475b10c9a799d840946b164", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void testJavadocMethodStringDeclaration() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocMethodStringDeclaration() throws CoreException", "diff": ["-\t\t\t\t\"annSearchedMethod\",", "+\t\t\t\t\"javadocSearchedMethod\",", "-\t\t\t\t\"src/j1/AnnSearched.java void j1.AnnSearched.annSearchedMethod() [annSearchedMethod] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/j1/AnnSearched.java void j1.AnnSearched.annSearchedMethod(String) [annSearchedMethod] EXACT_MATCH\",", "+\t\t\t\t\"src/j1/JavadocSearched.java void j1.JavadocSearched.javadocSearchedMethod() [javadocSearchedMethod] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/j1/JavadocSearched.java void j1.JavadocSearched.javadocSearchedMethod(String) [javadocSearchedMethod] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15155b680439faef251add38bd520ce5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " public void test062()", "signatureAfterChange": " public void test062()", "diff": ["-\t\t\"The enum constant X.A has no corresponding case label\\n\" +", "+\t\t\"The enum constant A needs a corresponding case label in this enum switch on X\\n\" +", "-\t\t\"The enum constant X.B has no corresponding case label\\n\" +", "+\t\t\"The enum constant B needs a corresponding case label in this enum switch on X\\n\" +", "-\t\t\"The enum constant X.C has no corresponding case label\\n\" +", "+\t\t\"The enum constant C needs a corresponding case label in this enum switch on X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15b0f633f166da3b2137a16552de8b89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 388, "methodNumberAfterChange": 388, "signatureBeforeChange": " \tpublic void test386()", "signatureAfterChange": " \tpublic void test386()", "diff": ["-\t\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\t\t\"\tpublic R getU() { return (R)u; } // Warning\\n\" + ", "-\t\t\t\t\"\t                         ^^^^\\n\" + ", "-\t\t\t\t\"Unnecessary cast from U to R\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "-\t\t\t\t\"\tpublic R getV() { return (R)v; } // Warning\\n\" + ", "-\t\t\t\t\"\t                         ^^^^\\n\" + ", "-\t\t\t\t\"Unnecessary cast from V to R\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\t\"\tpublic T getT() { return (T)o; } // Warning\\n\" + ", "-\t\t\t\t\"\t                         ^^^^\\n\" + ", "-\t\t\t\t\"Unnecessary cast from Object to T\\n\" + ", "-\t\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tpublic R getU() { return (R)u; } // Warning\\n\" + ", "+\t\t\t\"\t                         ^^^^\\n\" + ", "+\t\t\t\"Type safety: The cast from U to R is actually checking against the erased type Object\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tpublic R getV() { return (R)v; } // Warning\\n\" + ", "+\t\t\t\"\t                         ^^^^\\n\" + ", "+\t\t\t\"Type safety: The cast from V to R is actually checking against the erased type Object\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic T getT() { return (T)o; } // Warning\\n\" + ", "+\t\t\t\"\t                         ^^^^\\n\" + ", "+\t\t\t\"Type safety: The cast from Object to T is actually checking against the erased type Object\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15b12af88a959bbb98a6fe871d112432", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "e92324cecc3fbf731a68d99288f72318b17cf1ea", "commitAfterChange": "9832689930749c0e863f1bb11ec756d41ad5c5d4", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 91, "signatureBeforeChange": " public void testOrPattern() throws CoreException", "signatureAfterChange": " public void testOrPattern() throws CoreException", "diff": ["-\t\t\"src/e8/A.java e8.A.m() -> void [m] POTENTIAL_MATCH\\n\" +", "-\t\t\"src/q9/I.java q9.I.m() -> void [m] EXACT_MATCH\\n\" +", "-\t\t\"src/q9/I.java q9.A1.m() -> void [m] EXACT_MATCH\",", "+\t\t\"src/e8/A.java void e8.A.m() [m] POTENTIAL_MATCH\\n\" + ", "+\t\t\"src/q9/I.java void q9.I.m() [m] EXACT_MATCH\\n\" + ", "+\t\t\"src/q9/I.java void q9.A1.m() [m] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17bf779742aa14a54cb4fb2e238b4b2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/CompatibilityRulesTests.java", "commitBeforeChange": "6323cc5c6d6f8178c6abb39fea7a14207e20fad2", "commitAfterChange": "b269ecdf5686084f66bd06cd4020299e74297850", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void test027() throws JavaModelException", "signatureAfterChange": " \tpublic void test027() throws JavaModelException", "diff": ["-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"  <T> Z<T> foo(Z<T> o) {\\n\" +", "+\t\t\t\t\"public class X<T>  {\\n\" +", "+\t\t\t\t\"  Z<T> foo(Z<T> o) {\\n\" +", "-\t\t\t\t\"Lp1/X;.foo<T:Ljava/lang/Object;>(Lp1/Z<TT;>;)Lp1/Z<TT;>;\",", "+\t\t\t\t\"Lp1/X;.foo(Lp1/Z<TT;>;)Lp1/Z<TT;>;\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19084f19efd4581fe1486293cb0d1e69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "ee6e442281c6adfce6f28a674af1fb9f7f9d707f", "commitAfterChange": "9d88e07972fdc72c8f68cd0cc8f036c691b75fb7", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public void testRegion4() throws CoreException", "signatureAfterChange": " public void testRegion4() throws CoreException", "diff": ["-\t\t\t\"  X [in X.java [in <default> [in <project root> [in P1]]]]\\n\" + ", "-\t\t\t\"    Z [in Z.java [in <default> [in <project root> [in P3]]]]\\n\" + ", "-\t\t\t\"    Y [in Y.java [in <default> [in <project root> [in P2]]]]\\n\",", "+\t\t\t\"  X {key=LX;} [in X.java [in <default> [in <project root> [in P1]]]]\\n\" + ", "+\t\t\t\"    Z {key=LZ;} [in Z.java [in <default> [in <project root> [in P3]]]]\\n\" + ", "+\t\t\t\"    Y {key=LY;} [in Y.java [in <default> [in <project root> [in P2]]]]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a55b7ae8455a03026a9e6a528b4b4db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void test022()", "signatureAfterChange": " public void test022()", "diff": ["-\t\t\"The enum constant X.MX.BLEU reference cannot be qualified in a case label\\n\" +", "+\t\t\"The qualified case label X.MX.BLEU must be replaced with the unqualified enum constant BLEU\\n\" +", "-\t\t\"The enum constant X.MX.BLANC reference cannot be qualified in a case label\\n\" +", "+\t\t\"The qualified case label X.MX.BLANC must be replaced with the unqualified enum constant BLANC\\n\" +", "-\t\t\"The enum constant X.MX.ROUGE reference cannot be qualified in a case label\\n\" +", "+\t\t\"The qualified case label X.MX.ROUGE must be replaced with the unqualified enum constant ROUGE\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b0c32544967d6d22a1e8b119b11b45b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic void testBug83393b()", "signatureAfterChange": " \tpublic void testBug83393b()", "diff": ["-\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5 or greater\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b9e7060de13128fec12d1cd1bd4dd6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "commitAfterChange": "c3fe3a5d67fbf0c540d6fc63f233f6806516af9c", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic void test026()", "signatureAfterChange": "  \tpublic void test026()", "diff": ["-\t\t\t\t\"\tA test() { return super.test(); }\\n\" + ", "+\t\t\t\t\"\t@Override A test() { return super.test(); }\\n\" + ", "-\t\t\t\"\tA test() { return super.test(); }\\n\" + ", "-\t\t\t\"\t^\\n\" + ", "+\t\t\t\"\t@Override A test() { return super.test(); }\\n\" + ", "+\t\t\t\"\t          ^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ba9ac8088ec88d94c10f047ec2aa4ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \t \tpublic void test062()", "signatureAfterChange": " \t \tpublic void test062()", "diff": ["-\t\t\t\"     2  getstatic java/lang/System.out Ljava/io/PrintStream; [31]\\n\" + ", "+\t\t\t\"     2  getstatic java.lang.System.out : java.io.PrintStream [31]\\n\" + ", "-\t\t\t\"     6  invokevirtual java/io/PrintStream.println(I)V [37]\\n\" + ", "+\t\t\t\"     6  invokevirtual java.io.PrintStream.println(int) : void  [37]\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 10] local: i index: 0 type: I\\n\";", "+\t\t\t\"        [pc: 2, pc: 10] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c06a5c490f3d77e8357500be35b55f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " public void testTypeRefAll_Catch() throws CoreException", "signatureAfterChange": " public void testTypeRefAll_Catch() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\t} catch (\ufffd|RuntimeException|\ufffd e) {@304] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java Bug all.types.ref.TestTypes.bar(Bug) [\t\tcatch (\ufffd|Types|\ufffd ex) {}@634] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java Bug all.types.ref.TestTypes.bar(Bug) [\t\tcatch (\ufffd|Exception|\ufffd ex) {}@656] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\t} catch (!|RuntimeException|! e) {@304] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java Bug all.types.ref.TestTypes.bar(Bug) [\t\tcatch (!|Types|! ex) {}@634] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java Bug all.types.ref.TestTypes.bar(Bug) [\t\tcatch (!|Exception|! ex) {}@656] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c403d342662665b3043245931c024c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " \t \tpublic void test055()", "signatureAfterChange": " \t \tpublic void test055()", "diff": ["-\t\t\t\"     2  istore_0\\n\" + ", "-\t\t\t\"     3  iload_0\\n\" + ", "+\t\t\t\"     2  istore_0 [i]\\n\" + ", "+\t\t\t\"     3  iload_0 [i]\\n\" + ", "-\t\t\t\"     9  invokestatic #27 <Method X.boom()Z>\\n\" + ", "+\t\t\t\"     9  invokestatic X.boom()Z [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cf00b5ccf27191a5399806f621cad76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "775bb7e86633292b115b2935c87e101190166e9d", "commitAfterChange": "4a26249aa893b7bf1faa1e1388aeb96ba4c3a814", "methodNumberBeforeChange": 507, "methodNumberAfterChange": 507, "signatureBeforeChange": " \tpublic void test505()", "signatureAfterChange": " \tpublic void test505()", "diff": ["-\t\t\t\"  // Method descriptor  #10 ()V\\n\" + ", "+\t\t\t\"  // Method descriptor #10 ()V\\n\" + ", "-\t\t\t\"  // Method descriptor  #21 ([Ljava/lang/String;)V\\n\" + ", "+\t\t\t\"  // Method descriptor #21 ([Ljava/lang/String;)V\\n\" + ", "-\t\t\t\"  // Method descriptor  #10 ()V\\n\" + ", "+\t\t\t\"  // Method descriptor #10 ()V\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e0e7b3585da2ee8696b7a845c5047fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "413506076b5eca1e8bff0fe05f1ae6ca89cdfda0", "commitAfterChange": "84210148bd50897aa80e3947cfa4eab1021e65ca", "methodNumberBeforeChange": 563, "methodNumberAfterChange": 563, "signatureBeforeChange": " public void testBug209996_c22_3() throws CoreException", "signatureAfterChange": " public void testBug209996_c22_3() throws CoreException", "diff": ["-\t\t\"src/comment22/Test.java @Tag() [    @\ufffd|Tag|\ufffd Test test1, test2, test3;]\\n\" +", "-\t\t\"src/comment22/Test.java @Tag() [        @\ufffd|Tag|\ufffd Test local= null;]\\n\" +", "-\t\t\"src/comment22/Test.java @Tag() [        @\ufffd|Tag|\ufffd Test local1, local2, local3;]\",", "+\t\t\"src/comment22/Test.java @Tag() [    @\ufffd|Tag|\ufffd Test test1, test2, test3;]\\n\" +", "+\t\t\"src/comment22/Test.java @Tag() [        @\ufffd|Tag|\ufffd Test local= null;]\\n\" +", "+\t\t\"src/comment22/Test.java @Tag() [        @\ufffd|Tag|\ufffd Test local1, local2, local3;]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e1c9dfc5b09c8ec3c6a10825f6cbe81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void testBug83127b()", "signatureAfterChange": " \tpublic void testBug83127b()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e534f0cbf0ea8479803e28b4b186a9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " public void testMoveCuInEnclosingPkg() throws CoreException", "signatureAfterChange": " public void testMoveCuInEnclosingPkg() throws CoreException", "diff": ["-\t\t\t\"\t[project root][*]: {CHILDREN}\\n\" +", "+\t\t\t\"\t<project root>[*]: {CHILDREN}\\n\" +", "-\t\t\t\"\t\t\tA.java[-]: {MOVED_TO(A.java [in x [in [project root] [in P]]])}\\n\" +", "+\t\t\t\"\t\t\tA.java[-]: {MOVED_TO(A.java [in x [in <project root> [in P]]])}\\n\" +", "-\t\t\t\"\t\t\tA.java[+]: {MOVED_FROM(A.java [in x.y [in [project root] [in P]]])}\"", "+\t\t\t\"\t\t\tA.java[+]: {MOVED_FROM(A.java [in x.y [in <project root> [in P]]])}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fc9cc962fc0d535c773edf56b650d67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/FlowAnalysisTest8.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void testLambda_03()", "signatureAfterChange": " public void testLambda_03()", "diff": ["-\t\t\"Potential null pointer access: The variable o1 may be null at this location\\n\" + ", "+\t\t\"Potential null pointer access: this expression has a '@Nullable' type\\n\" + ", "-\t\t\"Potential null pointer access: The variable o2 may be null at this location\\n\" + ", "+\t\t\"Potential null pointer access: this expression has a '@Nullable' type\\n\" + ", "-\t\t\"Potential null pointer access: The variable o3 may be null at this location\\n\" + ", "+\t\t\"Potential null pointer access: this expression has a '@Nullable' type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20d64b36d93c06c0d6c90872b94e4ea9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "a00b91e363390d5872f24709421a2a2b1249ea30", "commitAfterChange": "61bf91bb0112a7323235a8711e82564a6109221c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void test008()", "signatureAfterChange": "  \tpublic void test008()", "diff": ["-\t\t\t\t\"class C extends B { public A foo() { return null; } }\\n\" +", "+\t\t\t\t\"class C extends B { @Override public A foo() { return null; } }\\n\" +", "-\t\t\t\"\tclass C extends B { public A foo() { return null; } }\\r\\n\" + ", "-\t\t\t\"\t                             ^^^^^\\n\" + ", "+\t\t\t\"\tclass C extends B { @Override public A foo() { return null; } }\\r\\n\" + ", "+\t\t\t\"\t                                       ^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20ddf7ad8425d8e2cafefcfc7d0b77db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/HierarchyOnWorkingCopiesTests.java", "commitBeforeChange": "bf2199048d434ee8a7461950468d3a2335a30990", "commitAfterChange": "99697e231d7abf709bf21ed4dc6a92bbb307b9f9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void test400905b() throws CoreException, IOException", "signatureAfterChange": " public void test400905b() throws CoreException, IOException", "diff": ["-\t\t\t\t\t\t\t\"  Lambda(I) [in i [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\" + ", "-\t\t\t\t\t\t\t\"  Lambda(I) [in main(String[]) [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\" + ", "-\t\t\t\t\t\t\t\"  Lambda(I) [in main(String[]) [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\",", "+\t\t\t\t\t\t\t\"  <lambda #1> [in i [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\" + ", "+\t\t\t\t\t\t\t\"  <lambda #1> [in main(String[]) [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\" + ", "+\t\t\t\t\t\t\t\"  <lambda #1> [in main(String[]) [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "210338778cd8432582aeae19004d811d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "a75ebaf0889649e7a4c140428341cde5c32ffe2e", "commitAfterChange": "157a9d28265d1a8c0af6b5ce9f61c33c050bacff", "methodNumberBeforeChange": 422, "methodNumberAfterChange": 422, "signatureBeforeChange": " public void test2014_flow_info()", "signatureAfterChange": " public void test2014_flow_info()", "diff": ["-\t\t\"1. ERROR in X.java (at line 12)\\n\" +", "-\t\t\"\tclass Inner extends X {\\n\" +", "-\t\t\"\t      ^^^^^\\n\" +", "+\t\t\"1. ERROR in X.java (at line 20)\\n\" +", "+\t\t\"\tfinal int m164;\\n\" +", "+\t\t\"\t          ^^^^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21693f1e58171e033c3ee4a1303bd6d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java", "commitBeforeChange": "301ea60f1c016cdc6dab5bb31b25b7537bf7ad1b", "commitAfterChange": "1033649cfcace48dcb2710381864f07b9c4be6ec", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void test007_task_tags_options()", "signatureAfterChange": " public void test007_task_tags_options()", "diff": ["-\t\t\"[FIXME,message contents,NORMAL]\\n\" +", "-\t\t\"[TODO,message contents,NORMAL]\\n\" +", "-\t\t\"[XXX,message contents,NORMAL]\\n\");", "+\t\t\"[FIXME, message contents,NORMAL]\\n\" +", "+\t\t\"[TODO, message contents,NORMAL]\\n\" +", "+\t\t\"[XXX, message contents,NORMAL]\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2318132f1c240d39fa26b2aaa03cdc91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "418e34f57c9f7842d3534af171e657c264f02dd7", "commitAfterChange": "42a66623ce2a3ec71a2f28506ffd67d2c8d2cf8c", "methodNumberBeforeChange": 449, "methodNumberAfterChange": 454, "signatureBeforeChange": " public void testBug319201d()", "signatureAfterChange": " public void testBug319201d()", "diff": ["-\t\t\t\"Potential null pointer access: The variable b2 may be null at this location\\n\" + ", "+\t\t\t\"Potential null pointer access: This expression of type Boolean may be null but requires auto-unboxing\\n\" + ", "-\t\t\t\"Null pointer access: The variable b3 can only be null at this location\\n\" + ", "+\t\t\t\"Null pointer access: This expression of type Boolean is null but requires auto-unboxing\\n\" + ", "-\t\t\t\"Potential null pointer access: The variable b7 may be null at this location\\n\" + ", "+\t\t\t\"Potential null pointer access: This expression of type Boolean may be null but requires auto-unboxing\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24a947521fdc15f7dc9cbbabe7bd295e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " public void testTypeRefQualifiedAll_Throws() throws CoreException", "signatureAfterChange": " public void testTypeRefQualifiedAll_Throws() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java type.def.Types all.types.ref.TestTypes.method(type.def.Types) [\ttype.def.Types method(type.def.Types param) throws \ufffd|type.def.Types|\ufffd {@555] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\tTestTypes() throws \ufffd|type.def.Types|\ufffd, RuntimeException {@893] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\tTestTypes() throws type.def.Types, \ufffd|RuntimeException|\ufffd {@909] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java type.def.Types all.types.ref.TestTypes.method(type.def.Types) [\ttype.def.Types method(type.def.Types param) throws !|type.def.Types|! {@555] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\tTestTypes() throws !|type.def.Types|!, RuntimeException {@893] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\tTestTypes() throws type.def.Types, !|RuntimeException|! {@909] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2651bf60098da28b0839fcc18310a2a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CreateMembersTests.java", "commitBeforeChange": "e7e7564689e931d1fed71c56fbe47c45f27678fe", "commitAfterChange": "e414d36721aa05dbbac7b21bf49fdccb073e6286", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void test001() throws JavaModelException", "signatureAfterChange": "  \tpublic void test001() throws JavaModelException", "diff": ["-\t\t\t\"    public void foo() {\\n\" + ", "-\t\t\t\"    \tSystem.out.println(\\\"Hello World\\\");\\n\" + ", "-\t\t\t\"    }\\n\" + ", "+\t\t\t\"\tpublic void foo() {\\n\" + ", "+\t\t\t\"\t\tSystem.out.println(\\\"Hello World\\\");\\n\" + ", "+\t\t\t\"\t}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26959cc7582130b06f3e9717117bde86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "ae391996f2ba5153face2dc96f44fbe25cc6cfcf", "commitAfterChange": "bd2d6cba91ea60af9a4818216d0ebbc8f0ef4bb2", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void testBug83127b()", "signatureAfterChange": " \tpublic void testBug83127b()", "diff": ["-\t\t\t\t\" *   - warning = \\\"The method add(Object) in the type Test is not applicable for\\n\" +", "+\t\t\t\t\" *   - warning = \\\"The method add(Number) in the type Sub is not applicable for\\n\" +", "-\t\t\t\t\" *   - method binding = Test.add(Object)\\n\" +", "+\t\t\t\t\" *   - method binding = Sub.add(Number)\\n\" +", "-\t\t\t\"Javadoc: The method add(Object) in the type Test is not applicable for the arguments (T)\\n\" +", "+\t\t\t\"Javadoc: The method add(Number) in the type Sub is not applicable for the arguments (T)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26d9b5f5ef97a1d2dd3f94fa05576354", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LocalVariableTest.java", "commitBeforeChange": "bce0dbd9dd489d3038652b337b4b76bb1f2246a4", "commitAfterChange": "f04ae71cc7d18b0e34f184a3124e4f7f58dafcf3", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void test018()", "signatureAfterChange": " public void test018()", "diff": ["-\t\t\"The parameter value is never read\\n\" +", "+\t\t\"The value of the parameter value is not used\\n\" +", "-\t\t\"The parameter value is never read\\n\" +", "+\t\t\"The value of the parameter value is not used\\n\" +", "-\t\t\"The parameter value is never read\\n\" +", "+\t\t\"The value of the parameter value is not used\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "271a055cad27e267b63fd8f33e32fc59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void testMoveSourceFolder4() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder4() throws CoreException", "diff": ["-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + ", "-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + ", "-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "277eb8d2de71b6f131e84a4d9f6eb517", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void testBug82514()", "signatureAfterChange": " \tpublic void testBug82514()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27e70f56266ccb3586d04c48dc011c91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "f711a2e15fc3de73f79ccc61d2dafcbdd0d9f0f1", "commitAfterChange": "e823242f8d03d0ef2504eab819b418e785f092ee", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " public void test094() throws Exception", "signatureAfterChange": " public void test094() throws Exception", "diff": ["-\t\t\"    1  aload_1\\n\" +", "-\t\t\"    2  iload_2\\n\" +", "+\t\t\"    1  aload_1 [arg0]\\n\" +", "+\t\t\"    2  iload_2 [arg1]\\n\" +", "-\t\t\"     2  aload_0\\n\" +", "+\t\t\"     2  aload_0 [arg0]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "284554174aaddc14fb4638db7d265ed9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "a75ebaf0889649e7a4c140428341cde5c32ffe2e", "commitAfterChange": "157a9d28265d1a8c0af6b5ce9f61c33c050bacff", "methodNumberBeforeChange": 423, "methodNumberAfterChange": 423, "signatureBeforeChange": " public void test2015_flow_info()", "signatureAfterChange": " public void test2015_flow_info()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 26)\\n\" +", "-\t\t\"\tclass Inner extends X {\\n\" +", "-\t\t\"\t      ^^^^^\\n\" +", "-\t\t\"The blank final field m164 may not have been initialized\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 34)\\n\" + ", "+\t\t\"\tfinal int m164;\\n\" + ", "+\t\t\"\t          ^^^^\\n\" + ", "+\t\t\"The blank final field m164 may not have been initialized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2869558378f86da534e5e462759a563d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void testBug83127a()", "signatureAfterChange": " \tpublic void testBug83127a()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28ee124eb4eb6db801dd904bce78f8f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Deprecated15Test.java", "commitBeforeChange": "232201d6380e7830296a82a7b3422a333db36b2e", "commitAfterChange": "378f419edc5509790bbfa3083244109f6abafbe2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void test002()", "signatureAfterChange": " public void test002()", "diff": ["-\t\t\"\t^^^^^^^\\n\" +", "+\t\t\"\t     ^^\\n\" +", "-\t\t\"\t^^^^^^^^^^\\n\" +", "+\t\t\"\t        ^^\\n\" +", "-\t\t\"\t^^^^^^^\\n\" +", "+\t\t\"\t  ^^^^^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29564508475c48f5317612ae8e468256", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 433, "methodNumberAfterChange": 433, "signatureBeforeChange": " \tpublic void test429()", "signatureAfterChange": " \tpublic void test429()", "diff": ["-\t\t\t\"Type safety: X5 is a raw type. References to generic type X5<T> should be parameterized\\n\" + ", "+\t\t\t\"X5 is a raw type. References to generic type X5<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X6 is a raw type. References to generic type X6<T> should be parameterized\\n\" + ", "+\t\t\t\"X6 is a raw type. References to generic type X6<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X7 is a raw type. References to generic type X7<T> should be parameterized\\n\" + ", "+\t\t\t\"X7 is a raw type. References to generic type X7<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a39b96fc12d0fefe97a2a9567c25960", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "de4b7bdd89919457ca271598365f7ba9556cd997", "commitAfterChange": "b26a664ac93cb33d6cf50930ea25f3388ced39d8", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " \tpublic void testBug83230_Implicit02() throws CoreException", "signatureAfterChange": " \tpublic void testBug83230_Implicit02() throws CoreException", "diff": ["-\t\t\t\"src/b83230/Test.java A b83230.Main.first() [] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b83230/Test.java b83230.Test [] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b83230/Test.java b83230.Test [] EXACT_MATCH\"", "+\t\t\t\"src/b83230/Test.java A b83230.Main.first() [\\\"Void\\\"] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b83230/Test.java b83230.Test [\\\"\\\"] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b83230/Test.java b83230.Test [\\\"2\\\"] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a50b6e5cc9984edcb36faf60828c5ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elementutils/ElementUtilsProc.java", "commitBeforeChange": "26d507f9337456ca82e52ed896177b679ad9ed51", "commitAfterChange": "6954f6f09ec0fa4357c31e7abaa82f5c7cd86dbc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate boolean examineBinaryName()", "signatureAfterChange": " \tprivate boolean examineBinaryName()", "diff": ["-\t\t\treportError(\"getBinaryName(F) should be \" + refNameF + \", was: \" + bnameF);", "+\t\t\treportError(\"examineBinaryName: getBinaryName(F) should be \" + refNameF + \", was: \" + bnameF);", "-\t\t\treportError(\"getBinaryName(F) should be \" + refBNameFChild + \", was: \" + bnameF);", "+\t\t\treportError(\"examineBinaryName: getBinaryName(F) should be \" + refBNameFChild + \", was: \" + bnameF);", "-\t\t\treportError(\"getBinaryName(F) should be \" + refBNameFEnum + \", was: \" + bnameF);", "+\t\t\treportError(\"examineBinaryName: getBinaryName(F) should be \" + refBNameFEnum + \", was: \" + bnameF);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ad9707aee28e030a1ee2621f10e79a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InterfaceMethodsTest.java", "commitBeforeChange": "88c7460e59173613af0d252f71b18fa99f4a3073", "commitAfterChange": "d09fa4802281032dbffe5d54191a48ffcdbfb895", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void testModifiers2()", "signatureAfterChange": " \tpublic void testModifiers2()", "diff": ["-\t\t\t\"Illegal modifiers for the interface method foo3; strictfp is not permitted for abstract interface methods\\n\" +", "+\t\t\t\"strictfp is not permitted for abstract interface method foo3\\n\" +", "-\t\t\t\"Illegal modifiers for the interface method foo4; strictfp is not permitted for abstract interface methods\\n\" +", "+\t\t\t\"strictfp is not permitted for abstract interface method foo4\\n\" +", "-\t\t\t\"Illegal modifiers for the interface method foo5; strictfp is not permitted for abstract interface methods\\n\" +", "+\t\t\t\"strictfp is not permitted for abstract interface method foo5\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b37ca9ce302544aa90f3e6179730382", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "4ce47574d95f211bec6cf02737b4ec30e386f5b1", "commitAfterChange": "6c173db4ca33e9b5b355fdac19466f82485aafe6", "methodNumberBeforeChange": 133, "methodNumberAfterChange": 133, "signatureBeforeChange": " \tpublic void test0132() throws JavaModelException", "signatureAfterChange": " \tpublic void test0132() throws JavaModelException", "diff": ["-\t\tjavadoc.setComment(\"/** JavaDoc Comment\\r\\n  */\");//$NON-NLS-1$*/", "+\t\tjavadoc.setComment(\"/** JavaDoc Comment*/\");//$NON-NLS-1$*/", "-\t\tcheckSourceRange(node, \"/** JavaDoc Comment\\r\\n  */\\r\\n  void foo(final int i) {}\", source); //$NON-NLS-1$", "-\t\tcheckSourceRange(actualJavadoc, \"/** JavaDoc Comment\\r\\n  */\", source);", "+\t\tcheckSourceRange(node, \"/** JavaDoc Comment*/\\n  void foo(final int i) {}\", source); //$NON-NLS-1$", "+\t\tcheckSourceRange(actualJavadoc, \"/** JavaDoc Comment*/\", source);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bf1e36ac7684cc026bf032707d4dff6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "448d62b2ff66cd7ed3c1bda65bd5259a6d0971b0", "commitAfterChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "methodNumberBeforeChange": 556, "methodNumberAfterChange": 556, "signatureBeforeChange": " public void testBug247564b_4_2()", "signatureAfterChange": " public void testBug247564b_4_2()", "diff": ["-\t\t\t\"        o.toString(); // danger\\n\" +", "+\t\t\t\"        o.toString(); // danger\" +", "-\t\t\t\"\to.toString(); // danger\\n\" + ", "+\t\t\t\"\to.toString(); // danger        return;\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 48)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 47)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e165429827949c9ff68637aee976aba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DefaultMethodsTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void testObjectMethod3()", "signatureAfterChange": " \tpublic void testObjectMethod3()", "diff": ["-\t\t\t\t\"    public Class<?> getClass() default { return null;}\\n\" + ", "+\t\t\t\t\"    default public Class<?> getClass() { return null;}\\n\" + ", "-\t\t\t\"\tpublic Class<?> getClass() default { return null;}\\n\" + ", "-\t\t\t\"\t                ^^^^^^^^^^\\n\" + ", "+\t\t\t\"\tdefault public Class<?> getClass() { return null;}\\n\" + ", "+\t\t\t\"\t                        ^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ea7853eaeb6231d5c98716621fc63d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d16d71303cc38b4ca3466d0f95ab4eeb4eced38a", "commitAfterChange": "04423947d8d7bb07b422b48e36dce13f3a6590fc", "methodNumberBeforeChange": 1087, "methodNumberAfterChange": 1087, "signatureBeforeChange": " public void test1058() throws Exception", "signatureAfterChange": " public void test1058() throws Exception", "diff": ["-\t\t\"        [pc: 32, line: 7]\\n\" +", "+\t\t\"        [pc: 29, line: 7]\\n\" +", "-\t\t\"        [pc: 2, pc: 32] local: foo index: 1 type: int\\n\" +", "-\t\t\"        [pc: 5, pc: 32] local: bar index: 2 type: java.lang.String\\n\" +", "+\t\t\"        [pc: 2, pc: 29] local: foo index: 1 type: int\\n\" +", "+\t\t\"        [pc: 5, pc: 29] local: bar index: 2 type: java.lang.String\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f0057db8cea5e9faef28818c9bb82c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "4ce47574d95f211bec6cf02737b4ec30e386f5b1", "commitAfterChange": "6c173db4ca33e9b5b355fdac19466f82485aafe6", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 114, "signatureBeforeChange": " \tpublic void test0113() throws JavaModelException", "signatureAfterChange": " \tpublic void test0113() throws JavaModelException", "diff": ["-\t\tString expectedSource = \"try {\\r\\n\" +//$NON-NLS-1$", "-\t\t\t \"\t\t} catch(Exception e) {\\r\\n\" +//$NON-NLS-1$", "-\t\t\t \"\t\t} finally {\\r\\n\" +//$NON-NLS-1$", "+\t\tString expectedSource = \"try {\\n\" +//$NON-NLS-1$", "+\t\t\t \"\t\t} catch(Exception e) {\\n\" +//$NON-NLS-1$", "+\t\t\t \"\t\t} finally {\\n\" +//$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f2810a60cb46ba56f03aec1d78c8956", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "4c370db17fcad0e528d16b2fecef0952e714ead1", "commitAfterChange": "73b4b882573d866af4a2886a5430207907acc99e", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void test0042() throws JavaModelException", "signatureAfterChange": " \tpublic void test0042() throws JavaModelException", "diff": ["-\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter15\" , \"src\", \"test0042\", \"A.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter15\" , \"src\", \"test0042\", \"X.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "-\t\tassertEquals(\"wrong key\", \"T:test0042/A/T[][]foo()\", binding.getKey());", "+\t\tassertEquals(\"wrong key\", \"T:test0042/X/T[][]foo()\", binding.getKey());", "-\t\tassertEquals(\"wrong key\", \"T:test0042/A/T[][]foo()[]\", binding2.getKey());\t\t", "+\t\tassertEquals(\"wrong key\", \"T:test0042/X/T[][]foo()[]\", binding2.getKey());\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ff00922aac1fce0bb59512f666f671b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "037cfa6bf481cd6ec3ad222bceff2d82fb8a8179", "commitAfterChange": "30d1d48bfa7e296fbeab8a3626c28e1130f44500", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void testBinary06()", "signatureAfterChange": " \tpublic void testBinary06()", "diff": ["-\t\t\t\t\"Null constraint mismatch: The type \\'@Nullable String\\' is not a valid substitute for the type parameter \\'T\\' which is constrained as \\'@NonNull\\'\\n\" + ", "+\t\t\t\t\"Null constraint mismatch: The type \\'@Nullable String\\' is not a valid substitute for the type parameter \\'@NonNull T extends @NonNull Object\\'\\n\" + ", "-\t\t\t\t\"Null constraint mismatch: The type \\'@NonNull String\\' is not a valid substitute for the type parameter \\'W\\' which is constrained as \\'@Nullable\\'\\n\" + ", "+\t\t\t\t\"Null constraint mismatch: The type \\'@NonNull String\\' is not a valid substitute for the type parameter \\'@Nullable W extends Object\\'\\n\" + ", "-\t\t\t\t\"Null constraint mismatch: The type '@NonNull Object' is not a valid substitute for the type parameter 'V' which is constrained as '@Nullable'\\n\" + ", "+\t\t\t\t\"Null constraint mismatch: The type \\'@NonNull Object\\' is not a valid substitute for the type parameter \\'@Nullable V extends @Nullable Object'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3011c51be402b26632fac71c2bc6eda9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests18.java", "commitBeforeChange": "bf2199048d434ee8a7461950468d3a2335a30990", "commitAfterChange": "99697e231d7abf709bf21ed4dc6a92bbb307b9f9", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " public void test430307() throws CoreException", "signatureAfterChange": " public void test430307() throws CoreException", "diff": ["-\t\t\t\"=Resolve/src<{X.java[X~foo~QList\\\\<QU;>;=)Getter=\\\"LGetter\\\\<TU;>;!144!161!152=&get!2=\\\"Ljava.util.List\\\\<TU;>;=\\\"x=\\\"I=\\\"i=\\\"TU;=\\\"LX\\\\~Getter\\\\<LX;:TU;>;.get\\\\(Ljava\\\\/util\\\\/List\\\\<TU;>;I)TU;@x!145!145!145!145!Ljava\\\\/util\\\\/List;!0!true@i!148!148!148!148!I!0!true=&@x!145!145!145!145!Ljava.util.List\\\\<LU;>;!0!true\", ", "+\t\t\t\"=Resolve/src<{X.java[X~foo~QList\\\\<QU;>;=)=\\\"LGetter\\\\<TU;>;!144!161!152=&get!2=\\\"Ljava.util.List\\\\<TU;>;=\\\"x=\\\"I=\\\"i=\\\"TU;=\\\"LX\\\\~Getter\\\\<LX;:TU;>;.get\\\\(Ljava\\\\/util\\\\/List\\\\<TU;>;I)TU;@x!145!145!145!145!Ljava\\\\/util\\\\/List;!0!true@i!148!148!148!148!I!0!true=&@x!145!145!145!145!Ljava.util.List\\\\<LU;>;!0!true\", ", "-\t\t\t\"=Resolve/src<{X.java[X~foo~QList\\\\<QU;>;=)Getter=\\\"LGetter\\\\<TU;>;!144!161!152=&get!2=\\\"Ljava.util.List\\\\<TU;>;=\\\"x=\\\"I=\\\"i=\\\"TU;=\\\"LX\\\\~Getter\\\\<LX;:TU;>;.get\\\\(Ljava\\\\/util\\\\/List\\\\<TU;>;I)TU;@x!145!145!145!145!Ljava\\\\/util\\\\/List;!0!true@i!148!148!148!148!I!0!true=&\", ", "+\t\t\t\"=Resolve/src<{X.java[X~foo~QList\\\\<QU;>;=)=\\\"LGetter\\\\<TU;>;!144!161!152=&get!2=\\\"Ljava.util.List\\\\<TU;>;=\\\"x=\\\"I=\\\"i=\\\"TU;=\\\"LX\\\\~Getter\\\\<LX;:TU;>;.get\\\\(Ljava\\\\/util\\\\/List\\\\<TU;>;I)TU;@x!145!145!145!145!Ljava\\\\/util\\\\/List;!0!true@i!148!148!148!148!I!0!true=&\", ", "-\t\t\t\"=Resolve/src<{X.java[X~foo~QList\\\\<QU;>;=)Getter=\\\"LGetter\\\\<TU;>;!144!161!152=&get!2=\\\"Ljava.util.List\\\\<TU;>;=\\\"x=\\\"I=\\\"i=\\\"TU;=\\\"LX\\\\~Getter\\\\<LX;:TU;>;.get\\\\(Ljava\\\\/util\\\\/List\\\\<TU;>;I)TU;@x!145!145!145!145!Ljava\\\\/util\\\\/List;!0!true@i!148!148!148!148!I!0!true=)\", ", "+\t\t\t\"=Resolve/src<{X.java[X~foo~QList\\\\<QU;>;=)=\\\"LGetter\\\\<TU;>;!144!161!152=&get!2=\\\"Ljava.util.List\\\\<TU;>;=\\\"x=\\\"I=\\\"i=\\\"TU;=\\\"LX\\\\~Getter\\\\<LX;:TU;>;.get\\\\(Ljava\\\\/util\\\\/List\\\\<TU;>;I)TU;@x!145!145!145!145!Ljava\\\\/util\\\\/List;!0!true@i!148!148!148!148!I!0!true=)\", "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "306b42afa16ce9304588f3a885a6c43c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void test_nonnull_parameter_016()", "signatureAfterChange": " public void test_nonnull_parameter_016()", "diff": ["-\t\t\t\"Redundant null check: The variable o cannot be null at this location\\n\" +", "+\t\t\t\"Redundant null check: The variable o is specified as @NonNull\\n\" +", "-\t\t\t\"Type mismatch: required \\'@NonNull Object[]\\' but the provided value is null\\n\" +", "+\t\t\t\"Null type mismatch: required \\'@NonNull Object[]\\' but the provided value is null\\n\" +", "-\t\t\t\"Type mismatch: required \\'@NonNull Object[]\\' but the provided value is null\\n\" +", "+\t\t\t\"Null type mismatch: required \\'@NonNull Object[]\\' but the provided value is null\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3113767bbae9c9e7672b7ca4dec71999", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void test041()", "signatureAfterChange": " \tpublic void test041()", "diff": ["-\t\t\t\"    1  istore_1\\n\" + ", "-\t\t\t\"    2  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    5  invokevirtual #26 <Method java/io/PrintStream.println()V>\\n\" + ", "+\t\t\t\"    1  istore_1 [b]\\n\" + ", "+\t\t\t\"    2  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    5  invokevirtual java/io/PrintStream.println()V [26]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31f074135c12d3156085db106a0716e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \t \tpublic void test052()", "signatureAfterChange": " \t \tpublic void test052()", "diff": ["-\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [26]\\n\" + ", "+\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [26]\\n\" + ", "-\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [32]\\n\" + ", "+\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void  [32]\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 17] local: i index: 0 type: I\\n\";", "+\t\t\t\"        [pc: 3, pc: 17] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "324e53085bfe191e3c2128a2f59629a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void testMoveSourceFolder6() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder6() throws CoreException", "diff": ["-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + ", "-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + ", "-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32653c3ed94a8734448339673a95cc79", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 269, "methodNumberAfterChange": 269, "signatureBeforeChange": " public void testBug330313_regression_187b()", "signatureAfterChange": " public void testBug330313_regression_187b()", "diff": ["-\t\t\"\t\t\t\t+ Registry.getConvertToolName() + (\\\" -o \\\" + _workingDir\\n\" + ", "-\t\t\"\t\t\t\t+ File.separator + documentName + (\\\" -l \\\" + _workingDir\\n\" + ", "-\t\t\"\t\t\t\t+ File.separator + _fileList)));\\n\" + ", "+\t\t\"\t\t\t\t+ Registry.getConvertToolName()\\n\" + ", "+\t\t\"\t\t\t\t+ (\\\" -o \\\" + _workingDir + File.separator + documentName\\n\" + ", "+\t\t\"\t\t\t\t\t\t+ (\\\" -l \\\" + _workingDir + File.separator + _fileList)));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "328840dbe792faa3c659a40cbf9df0fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JSR308SpecSnippetTests.java", "commitBeforeChange": "e46d27f78c861460763411dc3c7d80ec28005dd0", "commitAfterChange": "114d487223299fbb39233b9fa5b4135ee3c694c5", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void test010() throws Exception", "signatureAfterChange": " \tpublic void test010() throws Exception", "diff": ["-\t\t\t\t\"      #35 @Vernal(\\n\" + ", "+\t\t\t\t\"      #36 @Vernal(\\n\" + ", "-\t\t\t\t\"      #36 @English(\\n\" + ", "+\t\t\t\t\"      #37 @English(\\n\" + ", "-\t\t\t\t\"      #37 @NonNegative(\\n\" + ", "+\t\t\t\t\"      #38 @NonNegative(\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "328e80b0fe6d27563cdebf207a520ae4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "35192bdd39bce1e9b15851263fdb1cc51a01a12d", "commitAfterChange": "346ec90ab8195c0220dfb3a809d3812bb65c1857", "methodNumberBeforeChange": 231, "methodNumberAfterChange": 231, "signatureBeforeChange": " \tpublic void test0223()", "signatureAfterChange": " \tpublic void test0223()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tstatic final Map<String, Class<? extends Object>> classes2 \\n\" + ", "-\t\t\t\"\t                                                  ^^^^^^^^\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\t= new HashMap<String, Class>();\\n\" + ", "+\t\t\t\"\t  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35c4b93a29b2c1502e63c212c3edc4bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "27a11ce8ecc325901777098d9d0eafdb0be3dc5b", "commitAfterChange": "413506076b5eca1e8bff0fe05f1ae6ca89cdfda0", "methodNumberBeforeChange": 563, "methodNumberAfterChange": 563, "signatureBeforeChange": " public void testBug209996_c22_3() throws CoreException", "signatureAfterChange": " public void testBug209996_c22_3() throws CoreException", "diff": ["-\t\t\"src/comment22/Test.java @Tag() [    @\ufffd|Tag|\ufffd Test test1, test2, test3;]\\n\" +", "-\t\t\"src/comment22/Test.java @Tag() [        @\ufffd|Tag|\ufffd Test local= null;]\\n\" +", "-\t\t\"src/comment22/Test.java @Tag() [        @\ufffd|Tag|\ufffd Test local1, local2, local3;]\",", "+\t\t\"src/comment22/Test.java @Tag() [    @\ufffd|Tag|\ufffd Test test1, test2, test3;]\\n\" +", "+\t\t\"src/comment22/Test.java @Tag() [        @\ufffd|Tag|\ufffd Test local= null;]\\n\" +", "+\t\t\"src/comment22/Test.java @Tag() [        @\ufffd|Tag|\ufffd Test local1, local2, local3;]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35cec06e1205e7f1c749f6a2b9fc5b44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": "\t \tpublic void test098()", "signatureAfterChange": "\t \tpublic void test098()", "diff": ["-\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3714033d3596fea0db9c0df288b4496a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "f6fa3be1145d6296c15fb372e60410ee5b7af8f2", "commitAfterChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "methodNumberBeforeChange": 189, "methodNumberAfterChange": 189, "signatureBeforeChange": " \tpublic void testAutoBoxing01() throws CoreException", "signatureAfterChange": " \tpublic void testAutoBoxing01() throws CoreException", "diff": ["-\t\t\t\"public class Test {\\n\" + ", "+\t\t\t\"public class X {\\n\" + ", "-\t\tIMethod method = workingCopies[0].getType(\"Test\").getMethod(\"foo\", new String[] { \"I\" });", "+\t\tIMethod method = workingCopies[0].getType(\"X\").getMethod(\"foo\", new String[] { \"I\" });", "-\t\t\t\"src/p/X.java void p.Test.bar() [foo(new Integer(0))]\"", "+\t\t\t\"src/p/X.java void p.X.bar() [foo(new Integer(0))]\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3717abd1e61e71d44971e2600daa5446", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "2689c910e7993d7f2e4c96a00f4868eadf947850", "commitAfterChange": "7dc01ab99c724b043476264c1ff8612bbfa20971", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " public void test056u()", "signatureAfterChange": " public void test056u()", "diff": ["-\t\t\"Resource leak: \\'reader2\\' is never closed\\n\" + ", "+\t\t\"Resource leak: \\\"reader2\\\" is never closed\\n\" + ", "-\t\t\"Resource leak: \\'reader1\\' is not closed at this location\\n\" + ", "+\t\t\"Resource leak: \\\"reader1\\\" is not closed at this location\\n\" + ", "-\t\t\"Resource leak: \\'reader1\\' is not closed at this location\\n\" + ", "+\t\t\"Resource leak: \\\"reader1\\\" is not closed at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37436c146a1853835973df030a153ec4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "\t \tpublic void test078()", "signatureAfterChange": "\t \tpublic void test078()", "diff": ["-\t\t\t\"Unsafe type operation: Should not convert expression of raw type A to type A<String>. References to generic type A<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of raw type A is converted to A<String>. References to generic type A<P> should be parameterized\\n\" + ", "-\t\t\t\"Unsafe type operation: Should not convert expression of raw type A to type A<String>. References to generic type A<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of raw type A is converted to A<String>. References to generic type A<P> should be parameterized\\n\" + ", "-\t\t\t\"Unsafe type operation: Should not convert expression of raw type A to type A<String>. References to generic type A<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of raw type A is converted to A<String>. References to generic type A<P> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37be85947557a0a0d4b2f1971bfcc11b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/HierarchyOnWorkingCopiesTests.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void test400905b() throws CoreException, IOException", "signatureAfterChange": " public void test400905b() throws CoreException, IOException", "diff": ["-\t\t\t\t\t\"Focus: I [in [Working copy] A.java [in x.y [in src [in P]]]]\\n\" + ", "-\t\t\t\t\t\"Super types:\\n\" + ", "-\t\t\t\t\t\"Sub types:\\n\" + ", "-\t\t\t\t\t\"  <lambda> [in i [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\" + ", "-\t\t\t\t\t\"  <lambda>#2 [in main(String[]) [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\" + ", "-\t\t\t\t\t\"  <lambda>#3 [in main(String[]) [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\",", "+\t\t\t\t\t\t\t\"Focus: I [in [Working copy] A.java [in x.y [in src [in P]]]]\\n\" + ", "+\t\t\t\t\t\t\t\"Super types:\\n\" + ", "+\t\t\t\t\t\t\t\"Sub types:\\n\" + ", "+\t\t\t\t\t\t\t\"  Lambda(I) [in i [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\" + ", "+\t\t\t\t\t\t\t\"  Lambda(I) [in main(String[]) [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\" + ", "+\t\t\t\t\t\t\t\"  Lambda(I) [in main(String[]) [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37e5242c57a1f0e9af667d94173899a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DeprecatedTest.java", "commitBeforeChange": "232201d6380e7830296a82a7b3422a333db36b2e", "commitAfterChange": "378f419edc5509790bbfa3083244109f6abafbe2", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void test018()", "signatureAfterChange": " public void test018()", "diff": ["-\t\t\"\t^^^^^^^\\n\" +", "+\t\t\"\t     ^^\\n\" +", "-\t\t\"\t^^^^^^^^^^\\n\" +", "+\t\t\"\t        ^^\\n\" +", "-\t\t\"\t^^^^^^^\\n\" +", "+\t\t\"\t  ^^^^^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3918c98a59936d0917ebcf7027e15940", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 340, "methodNumberAfterChange": 340, "signatureBeforeChange": " \tpublic void test336()", "signatureAfterChange": " \tpublic void test336()", "diff": ["-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: MyClass is a raw type. References to generic type MyClass<Type> should be parameterized\\n\" + ", "+\t\t\t\"MyClass is a raw type. References to generic type MyClass<Type> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "398fa44ffda2a747e9c608db5690c181", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "988db3ec863dadeb2db80ab85efafc59fca27d63", "commitAfterChange": "bba7694c48471620eaabd1cb9ca1daab01462bcd", "methodNumberBeforeChange": 1489, "methodNumberAfterChange": 1489, "signatureBeforeChange": " public void test1455()", "signatureAfterChange": " public void test1455()", "diff": ["-\t\t\t\"X.java\",", "-\t\t\t\"class Outer<E> {\\n\" +", "+\t\t\t\"Outer.java\",", "+\t\t\t\"public class Outer<E> {\\n\" +", "-\t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\"1. WARNING in Outer.java (at line 8)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3992343dddab6b2983a0740fcf6f4423", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void testBug82514()", "signatureAfterChange": " \tpublic void testBug82514()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3afacb5412490a8e3214f7e6a1850215", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2cfaf33b626413a70eea1530c77695e81ac081f", "commitAfterChange": "89847a0c1a06590b3bbeee9528d77f57e2f8453c", "methodNumberBeforeChange": 246, "methodNumberAfterChange": 246, "signatureBeforeChange": " \tpublic void test0242()", "signatureAfterChange": " \tpublic void test0242()", "diff": ["-\t\t\t\"Type safety: The cast from Class to Class<? extends Object> is actually checking against the erased type Class\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Class to Class<? extends Object>\\n\" + ", "-\t\t\t\"Type safety: The cast from Class to Class<? extends String> is actually checking against the erased type Class\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Class to Class<? extends String>\\n\" + ", "-\t\t\t\"Type safety: The cast from Class to Class<String> is actually checking against the erased type Class\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Class to Class<String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ba4faa5bcbb46879cab402d57059f90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "2689c910e7993d7f2e4c96a00f4868eadf947850", "commitAfterChange": "7dc01ab99c724b043476264c1ff8612bbfa20971", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " public void test056throw2()", "signatureAfterChange": " public void test056throw2()", "diff": ["-\t\t\"Resource \\'reader\\' should be managed by try-with-resource\\n\" +", "+\t\t\"Resource \\\"reader\\\" should be managed by try-with-resource\\n\" +", "-\t\t\"Resource \\'reader\\' should be managed by try-with-resource\\n\" +", "+\t\t\"Resource \\\"reader\\\" should be managed by try-with-resource\\n\" +", "-\t\t\"Resource \\'reader\\' should be managed by try-with-resource\\n\" +", "+\t\t\"Resource \\\"reader\\\" should be managed by try-with-resource\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c3223064a246ec5a168bef1bdc2735e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "d6c2a90130be430285c5f6a000090d250c310afd", "commitAfterChange": "51e1f00f8d474f0b209b47afa85e44328a517f92", "methodNumberBeforeChange": 556, "methodNumberAfterChange": 556, "signatureBeforeChange": " public void testBug247564b_4_2()", "signatureAfterChange": " public void testBug247564b_4_2()", "diff": ["-\t\t\t\"        o.toString(); // danger\" +", "+\t\t\t\"        o.toString(); // danger\\n\" +", "-\t\t\t\"\to.toString(); // danger        return;\\n\" + ", "+\t\t\t\"\to.toString(); // danger\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 47)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 48)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dd0d7ad68dc9976ed1ac1ef14a7ddff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "2689c910e7993d7f2e4c96a00f4868eadf947850", "commitAfterChange": "7dc01ab99c724b043476264c1ff8612bbfa20971", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " public void test056l()", "signatureAfterChange": " public void test056l()", "diff": ["-\t\t\"Resource \\'fileReader\\' should be managed by try-with-resource\\n\" + ", "+\t\t\"Resource \\\"fileReader\\\" should be managed by try-with-resource\\n\" + ", "-\t\t\"Resource 'r3' should be managed by try-with-resource\\n\" +", "+\t\t\"Resource \\\"r3\\\" should be managed by try-with-resource\\n\" +", "-\t\t\"Potential resource leak: 'r2' may not be closed\\n\" + ", "+\t\t\"Potential resource leak: \\\"r2\\\" may not be closed\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3de779e2473520a66606e24c3b400dbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  \tpublic void test0039()", "signatureAfterChange": "  \tpublic void test0039()", "diff": ["-\t\t\t\"Method foo(L<E>) has the same erasure foo(L<E>) as another method in type X<E,T>\\n\" +", "+\t\t\t\"Erasure of method foo(L<E>) is the same as another method in type X<E,T>\\n\" +", "-\t\t\t\"Method foo(L<T>) has the same erasure foo(L<E>) as another method in type X<E,T>\\n\" +", "+\t\t\t\"Erasure of method foo(L<T>) is the same as another method in type X<E,T>\\n\" +", "-\t\t\t\"Method foo(L) has the same erasure foo(L<E>) as another method in type X<E,T>\\n\" +", "+\t\t\t\"Erasure of method foo(L) is the same as another method in type X<E,T>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3df31a5593ecb505f9d6b732a4b15670", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiProjectTests.java", "commitBeforeChange": "f39402d13165cb2a8baa9e8822f47cb5416f824f", "commitAfterChange": "c59f5d3873f087b004eace9b9fa6844d0400c666", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void testCycle2() throws JavaModelException", "signatureAfterChange": " \t \tpublic void testCycle2() throws JavaModelException", "diff": ["-\t\t\texpectingOnlySpecificProblemFor(p1,new Problem(\"p1\", \"A cycle was detected in the project's classpath.\", p1));//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingOnlySpecificProblemFor(p1,new Problem(\"p1\", \"A cycle was detected in the classpath of project: P1\", p1));//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\tnew Problem(\"p2\", \"A cycle was detected in the project's classpath.\", p2)//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\tnew Problem(\"p2\", \"A cycle was detected in the classpath of project: P2\", p2)//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\texpectingOnlySpecificProblemFor(p3,new Problem(\"p3\", \"A cycle was detected in the project's classpath.\", p3));//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingOnlySpecificProblemFor(p3,new Problem(\"p3\", \"A cycle was detected in the classpath of project: P3\", p3));//$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e358487b365cc6865eb3ec193c07484", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "  \tpublic void test053()", "signatureAfterChange": "  \tpublic void test053()", "diff": ["-\t\t\t\"     1  istore_0\\n\" + ", "-\t\t\t\"     2  iload_0\\n\" + ", "+\t\t\t\"     1  istore_0 [i]\\n\" + ", "+\t\t\t\"     2  iload_0 [i]\\n\" + ", "-\t\t\t\"     8  invokestatic #27 <Method X.boom()Z>\\n\" + ", "+\t\t\t\"     8  invokestatic X.boom()Z [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e6b4c3fe3367751f3c2edca558d451b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic void testBug83393a()", "signatureAfterChange": " \tpublic void testBug83393a()", "diff": ["-\t\t\t\"Syntax error, varargs are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, varargs are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, varargs are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ea699d004f26e1aec6ce856a2d62140", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  \tpublic void test0039()", "signatureAfterChange": "  \tpublic void test0039()", "diff": ["-\t\t\t\"Method foo(L<E>) has the same erasure foo(L<E>) as another method in type X<E,T>\\n\" +", "+\t\t\t\"Erasure of method foo(L<E>) is the same as another method in type X<E,T>\\n\" +", "-\t\t\t\"Method foo(L<T>) has the same erasure foo(L<E>) as another method in type X<E,T>\\n\" +", "+\t\t\t\"Erasure of method foo(L<T>) is the same as another method in type X<E,T>\\n\" +", "-\t\t\t\"Method foo(L) has the same erasure foo(L<E>) as another method in type X<E,T>\\n\" +", "+\t\t\t\"Erasure of method foo(L) is the same as another method in type X<E,T>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ead4aaee0232d7e91100d0f43b79692", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InterfaceMethodsTest.java", "commitBeforeChange": "7a4894572c8dc97616c8aa59652842aae37320e6", "commitAfterChange": "328c06fa136c963530115a367863b6a931384871", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void testModifiers4()", "signatureAfterChange": " \tpublic void testModifiers4()", "diff": ["-\t\t\t\"Illegal modifier for the interface method foo2; only public, abstract and strictfp are permitted\\n\" + ", "+\t\t\t\"Illegal combination of modifiers for the interface method foo2; only one of abstract, default, or static permitted\\n\" + ", "-\t\t\t\"Illegal modifier for the interface method foo3; only public, abstract and strictfp are permitted\\n\" + ", "+\t\t\t\"Illegal combination of modifiers for the interface method foo3; only one of abstract, default, or static permitted\\n\" + ", "-\t\t\t\"Illegal modifier for the interface method foo5; only public, abstract and strictfp are permitted\\n\" + ", "+\t\t\t\"Illegal combination of modifiers for the interface method foo5; only one of abstract, default, or static permitted\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3eed614488b7ded04d169632d4e614f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tpublic void test056()", "signatureAfterChange": "  \tpublic void test056()", "diff": ["-\t\t\t\"     9  invokestatic X.boom() : boolean  [27]\\n\" + ", "+\t\t\t\"     9  invokestatic X.boom() : boolean [26]\\n\" + ", "-\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [33]\\n\" + ", "+\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [28]\\n\" + ", "-\t\t\t\"    19  invokevirtual java.io.PrintStream.println(int) : void  [39]\\n\" + ", "+\t\t\t\"    19  invokevirtual java.io.PrintStream.println(int) : void [34]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "403379e11926af24641c0e8e71623820", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8816a21753c2d607b8868597ac43f18ef7dd2d50", "commitAfterChange": "3af20c8fa9116cf8e52dcf498c1b4eea06f21754", "methodNumberBeforeChange": 449, "methodNumberAfterChange": 449, "signatureBeforeChange": " \tpublic void test447()", "signatureAfterChange": " \tpublic void test447()", "diff": ["-\t\t\t\"Type safety: The expression of type X.Inner is converted to X<String>.Inner<Integer> using a raw conversion. References to generic type X<A>.Inner<B> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type X.Inner needs unchecked conversion to conform to X<String>.Inner<Integer>\\n\" + ", "-\t\t\t\"Type safety: The expression of type X.Inner<Integer> is converted to X<String>.Inner<Integer> using a raw conversion. References to generic type X<A>.Inner<B> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type X.Inner<Integer> needs unchecked conversion to conform to X<String>.Inner<Integer>\\n\" + ", "-\t\t\t\"Type safety: The expression of type X.Inner is converted to X.Inner<Integer> using a raw conversion. References to generic type X<A>.Inner<B> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type X.Inner needs unchecked conversion to conform to X.Inner<Integer>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "403e0488d9e33c11be7603f9b6c2b581", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "commitAfterChange": "5d080762ae8d3ca1ae1910319f56194e1932135d", "methodNumberBeforeChange": 563, "methodNumberAfterChange": 563, "signatureBeforeChange": " public void testBug209996_c22_3() throws CoreException", "signatureAfterChange": " public void testBug209996_c22_3() throws CoreException", "diff": ["-\t\t\"src/comment22/Test.java @Tag() [    @\ufffd|Tag|\ufffd Test test1, test2, test3;]\\n\" +", "-\t\t\"src/comment22/Test.java @Tag() [        @\ufffd|Tag|\ufffd Test local= null;]\\n\" +", "-\t\t\"src/comment22/Test.java @Tag() [        @\ufffd|Tag|\ufffd Test local1, local2, local3;]\",", "+\t\t\"src/comment22/Test.java @Tag() [    @\ufffd|Tag|\ufffd Test test1, test2, test3;]\\n\" +", "+\t\t\"src/comment22/Test.java @Tag() [        @\ufffd|Tag|\ufffd Test local= null;]\\n\" +", "+\t\t\"src/comment22/Test.java @Tag() [        @\ufffd|Tag|\ufffd Test local1, local2, local3;]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40a8d379bcb932c9f30779960229a2b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void testBug83127c()", "signatureAfterChange": " \tpublic void testBug83127c()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41e44943be5314229feb4ecc1d1f27af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void test007()", "signatureAfterChange": " public void test007()", "diff": ["-\t\t\"    80  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    83  ldc <String \\\"SUCCESS\\\"> [23]\\n\" + ", "-\t\t\"    85  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"    80  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    83  ldc <String \\\"SUCCESS\\\"> [22]\\n\" + ", "+\t\t\"    85  invokevirtual java.io.PrintStream.println(java.lang.String) : void [24]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4232c0db8f1767d3231ff54bc9f8e8df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void testMethodReferencesStringPatternSingleParamArguments02() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesStringPatternSingleParamArguments02() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testUnbound() [complete(new String(), gs)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testExtends() [complete(new Throwable(), gs)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testSuper() [<RuntimeException>complete(new RuntimeException(), gs)] EQUIVALENT_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testUnbound() [complete(new String(), gs)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testExtends() [complete(new Throwable(), gs)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testSuper() [<RuntimeException>complete(new RuntimeException(), gs)] POTENTIAL_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "423e60af53509523e806646a4128f8d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "7b4e4fcfdd4d04f13dc930d8b751701d20daa4d2", "commitAfterChange": "a8739597ebb6a7bc2be662454643b96202480dc7", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void test009()", "signatureAfterChange": " public void test009()", "diff": ["-        + \" -cp \\\"\" + OUTPUT_DIR + \"[+OK2.java\" + File.pathSeparator + \"~Warn.java\" ", "-        \t+ File.pathSeparator + \"-KO.java]\\\"\"", "+        + \" -cp \\\"\" + OUTPUT_DIR + \"[+OK2\" + File.pathSeparator + \"~Warn\" ", "+        \t+ File.pathSeparator + \"-KO]\\\"\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4407a166e7ba58c7ab6214ec231f8dba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiProjectTests.java", "commitBeforeChange": "f39402d13165cb2a8baa9e8822f47cb5416f824f", "commitAfterChange": "c59f5d3873f087b004eace9b9fa6844d0400c666", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void testCycle1() throws JavaModelException", "signatureAfterChange": " \t \tpublic void testCycle1() throws JavaModelException", "diff": ["-\t\t\texpectingOnlySpecificProblemFor(p1,new Problem(\"p1\", \"A cycle was detected in the project's classpath.\", p1));//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\texpectingOnlySpecificProblemFor(p2,new Problem(\"p2\", \"A cycle was detected in the project's classpath.\", p2));//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\texpectingOnlySpecificProblemFor(p3,new Problem(\"p3\", \"A cycle was detected in the project's classpath.\", p3));//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingOnlySpecificProblemFor(p1,new Problem(\"p1\", \"A cycle was detected in the classpath of project: P1\", p1));//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingOnlySpecificProblemFor(p2,new Problem(\"p2\", \"A cycle was detected in the classpath of project: P2\", p2));//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingOnlySpecificProblemFor(p3,new Problem(\"p3\", \"A cycle was detected in the classpath of project: P3\", p3));//$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44beb39f5383e5ccd63cb41bdbb7e0ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "de4b7bdd89919457ca271598365f7ba9556cd997", "commitAfterChange": "b26a664ac93cb33d6cf50930ea25f3388ced39d8", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void testBug83230_Implicit01() throws CoreException", "signatureAfterChange": " \tpublic void testBug83230_Implicit01() throws CoreException", "diff": ["-\t\t\t\"src/b83230/Test.java b83230.Test [] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b83230/Test.java b83230.Test.bar [] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b83230/Test.java void b83230.Test.foo() [] EXACT_MATCH\"", "+\t\t\t\"src/b83230/Test.java b83230.Test [41] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b83230/Test.java b83230.Test.bar [21] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b83230/Test.java void b83230.Test.foo() [10] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4571db64eda02683f6c793ef3d05e629", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "8a281cea306104e13dc5d8e2e915592f13b4b03f", "commitAfterChange": "4f6e7772e1eab66068e8d31851a8e395b8beb754", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " public void test400556c()", "signatureAfterChange": " public void test400556c()", "diff": ["-\t\t\t\"\t               ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t               ^^^^^^\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t               ^^^^^^\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t               ^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46ba488b9fe344843201c86dc8717d8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " public void test0044()", "signatureAfterChange": " public void test0044()", "diff": ["-\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46cd77a45f9a4d2cd675833420227988", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "3a514d6cf7a163df7c9aa1b24e69e8f3a5b39e3c", "commitAfterChange": "0aeaaba7ea908a19742d309ce070fd6d99b6c4d4", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void testJavadocConstructorStringReferenceWithJavadoc() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocConstructorStringReferenceWithJavadoc() throws CoreException", "diff": ["-//\t\tJavaSearchResultCollector result = new JavaSearchResultCollector();", "-//\t\tresult.showAccuracy = true;", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\",", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\",", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4757834d9f81539ccfc8b9236f684e1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "4c370db17fcad0e528d16b2fecef0952e714ead1", "commitAfterChange": "73b4b882573d866af4a2886a5430207907acc99e", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test0040() throws JavaModelException", "signatureAfterChange": " \tpublic void test0040() throws JavaModelException", "diff": ["-\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter15\" , \"src\", \"test0040\", \"A.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter15\" , \"src\", \"test0040\", \"X.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "-\t\tassertEquals(\"wrong key\", \"T:test0040/A/Tfoo()\", binding.getKey());", "+\t\tassertEquals(\"wrong key\", \"T:test0040/X/Tfoo()\", binding.getKey());", "-\t\tassertEquals(\"wrong key\", \"T:test0040/A/Tfoo()\", binding2.getKey());\t\t", "+\t\tassertEquals(\"wrong key\", \"T:test0040/X/Tfoo()\", binding2.getKey());\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4804810f37440904019e934fddcad3f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic void testBug83393a()", "signatureAfterChange": " \tpublic void testBug83393a()", "diff": ["-\t\t\t\"Syntax error, varargs are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, varargs are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, varargs are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4821864edc075f807c84f77eb11ecddc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void testJavadocTypeDeclarationWithJavadoc() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocTypeDeclarationWithJavadoc() throws CoreException", "diff": ["-\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"AnnSearched.java\").getType(\"AnnSearched\");", "+\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"JavadocSearched.java\").getType(\"JavadocSearched\");", "-\t\t\t\t\t\"src/j1/AnnSearched.java j1.AnnSearched [AnnSearched] EXACT_MATCH\",", "+\t\t\t\t\t\"src/j1/JavadocSearched.java j1.JavadocSearched [JavadocSearched] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "492bb6f07284eb1a7b237998f69b04ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2cfaf33b626413a70eea1530c77695e81ac081f", "commitAfterChange": "89847a0c1a06590b3bbeee9528d77f57e2f8453c", "methodNumberBeforeChange": 231, "methodNumberAfterChange": 231, "signatureBeforeChange": " \tpublic void test0227()", "signatureAfterChange": " \tpublic void test0227()", "diff": ["-\t\t\t\"Type safety: The cast from List to List<X> is actually checking against the erased type List\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from List to List<X>\\n\" + ", "-\t\t\t\"Type safety: The cast from Collection to List<X> is actually checking against the erased type List\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Collection to List<X>\\n\" + ", "-\t\t\t\"Type safety: The cast from List to Collection<X> is actually checking against the erased type Collection\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from List to Collection<X>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4931e35c65380b36ae2a0c7dee4d0d05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests2.java", "commitBeforeChange": "120defa76e249a7b50b5aa52206e16b815780186", "commitAfterChange": "635cdb5a7a6689c525de4e28f32c0630009bc2be", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void testBug376673e() throws CoreException, IOException", "signatureAfterChange": " \tpublic void testBug376673e() throws CoreException, IOException", "diff": ["-\t\t\t\t\t\t\"p\ud842\udf9f/i\ud842\udf9f/Test.java\",", "-\t\t\t\t\t\t\"package p\ud842\udf9f.i\ud842\udf9f;\\n\" +", "+\t\t\t\t\t\t\"p\\uD842\\uDF9F/i\\uD842\\uDF9F/Test.java\",", "+\t\t\t\t\t\t\"package p\\uD842\\uDF9F.i\\uD842\\uDF9F;\\n\" +", "-\t\tassertSearchResults(\"lib376673.jar p\ud842\udf9f.i\ud842\udf9f.Test [No source] EXACT_MATCH\");", "+\t\tassertSearchResults(\"lib376673.jar p\\uD842\\uDF9F.i\\uD842\\uDF9F.Test [No source] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49e015fafea3fa2568a05df7ae46508a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 563, "methodNumberAfterChange": 563, "signatureBeforeChange": " public void testBug209996_c22_3() throws CoreException", "signatureAfterChange": " public void testBug209996_c22_3() throws CoreException", "diff": ["-\t\t\"src/comment22/Test.java @Tag() [    @\ufffd|Tag|\ufffd Test test1, test2, test3;]\\n\" +", "-\t\t\"src/comment22/Test.java @Tag() [        @\ufffd|Tag|\ufffd Test local= null;]\\n\" +", "-\t\t\"src/comment22/Test.java @Tag() [        @\ufffd|Tag|\ufffd Test local1, local2, local3;]\",", "+\t\t\"src/comment22/Test.java @Tag() [    @\ufffd|Tag|\ufffd Test test1, test2, test3;]\\n\" +", "+\t\t\"src/comment22/Test.java @Tag() [        @\ufffd|Tag|\ufffd Test local= null;]\\n\" +", "+\t\t\"src/comment22/Test.java @Tag() [        @\ufffd|Tag|\ufffd Test local1, local2, local3;]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a9bbe83e9bde856a1402ece1f7b599a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "4c370db17fcad0e528d16b2fecef0952e714ead1", "commitAfterChange": "73b4b882573d866af4a2886a5430207907acc99e", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void test0036() throws JavaModelException", "signatureAfterChange": " \tpublic void test0036() throws JavaModelException", "diff": ["-\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter15\" , \"src\", \"test0036\", \"A.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter15\" , \"src\", \"test0036\", \"X.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "-\t\tcheckSourceRange(expressionStatement, \"this.<X>foo();\", source);\t\t", "+\t\tcheckSourceRange(expressionStatement, \"this.<T>foo();\", source);\t\t", "-\t\tcheckSourceRange(methodInvocation, \"this.<X>foo()\", source);", "+\t\tcheckSourceRange(methodInvocation, \"this.<T>foo()\", source);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ab63980a1734d2a93203e6219e75079", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests.java", "commitBeforeChange": "377462609d83990f9f6a62b422812db006751e9a", "commitAfterChange": "22ffc17005bd63d67acecaddbfd5435bf88ae086", "methodNumberBeforeChange": 146, "methodNumberAfterChange": 146, "signatureBeforeChange": " public void testInvalidField1() throws JavaModelException", "signatureAfterChange": " public void testInvalidField1() throws JavaModelException", "diff": ["+\tICompilationUnit cu = getWorkingCopy(", "+\t\t\"/Resolve/src/test/Test.java\",", "+\t\t\"package test;\"+", "+\t\t\"public class Event {\\n\" + ", "+\t\t\"        public int x;\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"        public void handle(Event e) {\\n\" + ", "+\t\t\"                e.x.eee.foo();\\n\" + ", "+\t\t\"        }\\n\" + ", "+\t\t\"}\");", "+\tString str = cu.getSource();", "+\t", "+\tint start = str.indexOf(\"eee\") + \"e\".length();", "+\tint length = 0;", "+\tIJavaElement[] elements = cu.codeSelect(start, length);", "+\tassertElementsEqual(", "+\t\t\"Unexpected elements\",", "+\t\t\"\",", "+\t\telements", "+\t);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4abfc73d6a910c96bee1b87d26de7127", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "2e199be1cb9f53bc00414ea80765129518e12c23", "commitAfterChange": "46bdd6036153580a7889ceb7993a8f8a6300be85", "methodNumberBeforeChange": 1087, "methodNumberAfterChange": 1087, "signatureBeforeChange": " public void test1058() throws Exception", "signatureAfterChange": " public void test1058() throws Exception", "diff": ["-\t\t\"        [pc: 32, line: 7]\\n\" +", "+\t\t\"        [pc: 29, line: 7]\\n\" +", "-\t\t\"        [pc: 2, pc: 32] local: foo index: 1 type: int\\n\" +", "-\t\t\"        [pc: 5, pc: 32] local: bar index: 2 type: java.lang.String\\n\" +", "+\t\t\"        [pc: 2, pc: 29] local: foo index: 1 type: int\\n\" +", "+\t\t\"        [pc: 5, pc: 29] local: bar index: 2 type: java.lang.String\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b08e905701ba5ab1320904c6acd7d0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 385, "methodNumberAfterChange": 385, "signatureBeforeChange": " \tpublic void test383()", "signatureAfterChange": " \tpublic void test383()", "diff": ["-\t\t\t\"Name clash : The method foo(Class<T>) of type X has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(Class<T>) of type X has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "-\t\t\t\"Name clash : The method foo(Class<T>) of type Y has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(Class<T>) of type Y has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "-\t\t\t\"Name clash : The method foo(Class<T>) of type Y has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method foo(Class<T>) of type Y has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bf01ad5b253cd7bb108fc3b7e37cfc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "17fcd420e0756889bcaffeff4cf983b2cff84a3e", "commitAfterChange": "e02893535f42359d54aa8b408faa8e8269b32442", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " public void test043()", "signatureAfterChange": " public void test043()", "diff": ["-\t\t\t\"     66  aload_3 [contexts]\\n\" + ", "+\t\t\t\"     66  aload_3\\n\" + ", "-\t\t\t\"        [pc: 4, pc: 100] local: warnings index: 2 type: java.lang.Object\\n\" + ", "-\t\t\t\"        [pc: 6, pc: 100] local: contexts index: 3 type: java.lang.Object\\n\" + ", "+\t\t\t\"        [pc: 4, pc: 35] local: warnings index: 2 type: java.lang.Object\\n\" + ", "+\t\t\t\"        [pc: 6, pc: 35] local: contexts index: 3 type: java.lang.Object\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c7cc5426c65c67069dc2e511eaeebf2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void test002()", "signatureAfterChange": "  public void test002()", "diff": ["-\t\t\"Unnecessary cast to type String for expression of type null\\n\" + ", "+\t\t\"Unnecessary cast from null to String\\n\" + ", "-\t\t\"Unnecessary cast to type String for expression of type String\\n\" + ", "+\t\t\"Unnecessary cast from String to String\\n\" + ", "-\t\t\"Unnecessary cast to type float for expression of type int\\n\" + ", "+\t\t\"Unnecessary cast from int to float\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d9c3a3f6c0b27ec64061808b2230ae9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "572021b99f292f39a76e81c2ea834ac6a839b00b", "commitAfterChange": "727d8ca46d64642ad4f629f81ba37e76e7ae8c85", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " public void testBug232768_Block06() throws JavaModelException", "signatureAfterChange": " public void testBug232768_Block06() throws JavaModelException", "diff": ["-\t\t\"   public     class\t\t\tD{    \\n\" +", "-\t\t\"\t\\n\" +", "-\t\t\"        /*\\n\" +", "+\t\t\"   public     class\t\t\tD{\\n\" +", "+\t\t\"\\n\" +", "+\t\t\"\t/*\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e8f6926d906fd3297806d285e80b085", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/FlowAnalysisTest.java", "commitBeforeChange": "63c8a2ec89eae9c5f71458dc20e19fe16c16341b", "commitAfterChange": "1380663d32eef4fe51daddb994c3d2197de60d56", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": " public void testBug338234c()", "signatureAfterChange": " public void testBug338234c()", "diff": ["-\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "-\t\t\"\tpublic class X {\\n\" + ", "-\t\t\"\t             ^\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tpublic final int field1;\\n\" + ", "+\t\t\"\t                 ^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ebcf6898ae1ef9d5a4cf56487eec1c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "775bb7e86633292b115b2935c87e101190166e9d", "commitAfterChange": "4a26249aa893b7bf1faa1e1388aeb96ba4c3a814", "methodNumberBeforeChange": 505, "methodNumberAfterChange": 505, "signatureBeforeChange": " \tpublic void test503()", "signatureAfterChange": " \tpublic void test503()", "diff": ["-\t\t\t\"  // Method descriptor  #10 ()V\\n\" + ", "+\t\t\t\"  // Method descriptor #10 ()V\\n\" + ", "-\t\t\t\"  // Method descriptor  #21 ([Ljava/lang/String;)V\\n\" + ", "+\t\t\t\"  // Method descriptor #21 ([Ljava/lang/String;)V\\n\" + ", "-\t\t\t\"  // Method descriptor  #10 ()V\\n\" + ", "+\t\t\t\"  // Method descriptor #10 ()V\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fa185d419ab76d35db70b392ae9c05a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "413506076b5eca1e8bff0fe05f1ae6ca89cdfda0", "commitAfterChange": "84210148bd50897aa80e3947cfa4eab1021e65ca", "methodNumberBeforeChange": 577, "methodNumberAfterChange": 577, "signatureBeforeChange": " public void testBug216875c() throws CoreException", "signatureAfterChange": " public void testBug216875c() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd.field = t1.field;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\"", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd.field = t1.field;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5021dcb8f5904e18da79478c183c933e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "ee6e442281c6adfce6f28a674af1fb9f7f9d707f", "commitAfterChange": "9d88e07972fdc72c8f68cd0cc8f036c691b75fb7", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public  void testBinarySubclass() throws JavaModelException", "signatureAfterChange": " public  void testBinarySubclass() throws JavaModelException", "diff": ["-\t\t\"  Object [in Object.class [in java.lang [in \"+  getExternalJCLPathString() +\" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"  <anonymous #1> [in foo [in Z48459 [in Z48459.java [in p48459.p1 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  Y48459 [in Y48459.class [in p48459.p2 [in lib48459 [in TypeHierarchy]]]]\\n\",", "+\t\t\"  <anonymous #1> {key=Lp48459/p1/Z48459$59;} [in foo [in Z48459 [in Z48459.java [in p48459.p1 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  Y48459 {key=Lp48459/p2/Y48459;} [in Y48459.class [in p48459.p2 [in lib48459 [in TypeHierarchy]]]]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52135250a12f38a78d924a963bd7a4cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "77646fe802ce8842c3e468133491915f09e00874", "commitAfterChange": "95ad422ba75a97d9b8c3cb49bc8bd9dcf7d18a77", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic void test025() throws CoreException", "signatureAfterChange": " \tpublic void test025() throws CoreException", "diff": ["-\t\t\t\t\"      void bar(int i, X x, String[][] s, Y[] args, boolean b, Object o) {\\n\" +", "-\t\t\t\t\"      }\\n\" +", "+\t\t\t\t\"      /*start*/void bar(int i, X x, String[][] s, Y[] args, boolean b, Object o) {\\n\" +", "+\t\t\t\t\"      }/*end*/\\n\" +", "-\t\t\t\"Lp1/X$1;.bar(ILp1/X;[[Ljava/lang/String;[Lp1/X$Y;ZLjava/lang/Object;)V\");", "+\t\t\t\"Lp1/X$68;.bar(ILp1/X;[[Ljava/lang/String;[Lp1/X$Y;ZLjava/lang/Object;)V\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52599cac51e5f6fc713d20227820ba0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest18.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void test0001()", "signatureAfterChange": "  public void test0001()", "diff": ["-\t\t\t\"    (<no type> first, <no type> second) ->     {\\n\" + ", "-\t\t\t\"      (<no type> xyz, <no type> pqr) -> <CompleteOnName:first.>;\\n\" + ", "-\t\t\t\"    };\\n\" + ", "+\t\t\t\"    goo((<no type> first, <no type> second) -> {\\n\" + ", "+\t\t\t\"  return (<no type> xyz, <no type> pqr) -> <CompleteOnName:first.>;\\n\" + ", "+\t\t\t\"});\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "525f40e147987bafcfda7ea7a465107c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 652, "methodNumberAfterChange": 652, "signatureBeforeChange": " \tpublic void test648()", "signatureAfterChange": " \tpublic void test648()", "diff": ["-\t\t\t\"Type safety: Outer.Inner is a raw type. References to generic type Outer<T>.Inner<U> should be parameterized\\n\" + ", "+\t\t\t\"Outer.Inner is a raw type. References to generic type Outer<T>.Inner<U> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Outer is a raw type. References to generic type Outer<T> should be parameterized\\n\" + ", "+\t\t\t\"Outer is a raw type. References to generic type Outer<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Outer.Inner is a raw type. References to generic type Outer<T>.Inner<U> should be parameterized\\n\" + ", "+\t\t\t\"Outer.Inner is a raw type. References to generic type Outer<T>.Inner<U> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52b53e6354da612d5d6c658e951aada0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "fa49e0b0d9160f5d6f6c9d7e60eb154d3ed01d92", "commitAfterChange": "77012b8966270aff8d07dc000b78d6d9498e30dd", "methodNumberBeforeChange": 223, "methodNumberAfterChange": 223, "signatureBeforeChange": " \t \tpublic void test0209() throws JavaModelException", "signatureAfterChange": " \t \tpublic void test0209() throws JavaModelException", "diff": ["-\t\t\t\"The array creation is unnecessary in an annotation value; only an array initializer is allowed\\n\" + ", "-\t\t\t\"The array creation is unnecessary in an annotation value; only an array initializer is allowed\\n\" + ", "-\t\t\t\"The array creation is unnecessary in an annotation value; only an array initializer is allowed\";", "+\t\t\t\"The value for annotation attribute A1.list must be an array initializer\\n\" + ", "+\t\t\t\"The value for annotation attribute A2.list must be an array initializer\\n\" + ", "+\t\t\t\"The value for annotation attribute A3.list must be an array initializer\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5454fc049b641e02fea6da1765809f95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "71461454c011188604de602b101178a9fe2bbd9e", "commitAfterChange": "0bc13ec7a82e3d51d40616081c389f8948d01d76", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void testBinaryTypeHiddenByOtherJar() throws CoreException, IOException", "signatureAfterChange": " public void testBinaryTypeHiddenByOtherJar() throws CoreException, IOException", "diff": ["-\t\t\t\"Focus: Y [in Y.class [in p [in \" + externalJar2 + \" [in P]]]]\\n\" + ", "+\t\t\t\"Focus: Y [in Y.class [in p [in \" + externalJar2 + \"]]]\\n\" + ", "-\t\t\t\"  X [in X.class [in p [in \" + externalJar1 + \" [in P]]]]\\n\" + ", "-\t\t\t\"    Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in P]]]]\\n\" + ", "+\t\t\t\"  X [in X.class [in p [in \" + externalJar1 + \"]]]\\n\" + ", "+\t\t\t\"    Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \"]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54f60a622fba7ecffc5ffd838ea7412a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "f711a2e15fc3de73f79ccc61d2dafcbdd0d9f0f1", "commitAfterChange": "e823242f8d03d0ef2504eab819b418e785f092ee", "methodNumberBeforeChange": 134, "methodNumberAfterChange": 134, "signatureBeforeChange": " public void test129() throws Exception", "signatureAfterChange": " public void test129() throws Exception", "diff": ["-\t\t\"    1  aload_1\\n\" +", "-\t\t\"    2  iload_2\\n\" +", "+\t\t\"    1  aload_1 [arg0]\\n\" +", "+\t\t\"    2  iload_2 [arg1]\\n\" +", "-\t\t\"     2  aload_0\\n\" +", "+\t\t\"     2  aload_0 [arg0]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55ad458f2c76d3ecdc7e70ce5d3feb3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2cfaf33b626413a70eea1530c77695e81ac081f", "commitAfterChange": "89847a0c1a06590b3bbeee9528d77f57e2f8453c", "methodNumberBeforeChange": 857, "methodNumberAfterChange": 857, "signatureBeforeChange": " public void test0850()", "signatureAfterChange": " public void test0850()", "diff": ["-\t\t\"Type safety: The cast from Object to T is actually checking against the erased type Object\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to T\\n\" + ", "-\t\t\"Type safety: The cast from Object to T is actually checking against the erased type Object\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to T\\n\" + ", "-\t\t\"Type safety: The cast from Object to T is actually checking against the erased type Object\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to T\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5626a3ac625112f3e4c8d103a3d80dad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LookupTest.java", "commitBeforeChange": "dbfe97bed3f7feb8408fadbcb58741aa04540553", "commitAfterChange": "3d86d8fdd283e92da8b2fd4ec59e7d2f2b4add9f", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " public void test042()", "signatureAfterChange": " public void test042()", "diff": ["-\t\t\"This class must implement the inherited abstract method Y.bar(), but cannot override it since it is not visible from X. Either make the type abstract or make the inherited method visible.\\n\" + ", "+\t\t\"This class must implement the inherited abstract method Y.bar(), but cannot override it since it is not visible from X. Either make the type abstract or make the inherited method visible\\n\" + ", "-\t\t\"The method X.foo() does not override the inherited method from Y.Member since it is private to a different package.\\n\" + ", "+\t\t\"The method X.foo() does not override the inherited method from Y.Member since it is private to a different package\\n\" + ", "-\t\t\"This class must implement the inherited abstract method Y.bar(), but cannot override it since it is not visible from M. Either make the type abstract or make the inherited method visible.\\n\" + ", "+\t\t\"This class must implement the inherited abstract method Y.bar(), but cannot override it since it is not visible from M. Either make the type abstract or make the inherited method visible\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56f6111866d66c5e6576890d42b48451", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 583, "methodNumberAfterChange": 583, "signatureBeforeChange": " public void testBug216875d() throws CoreException", "signatureAfterChange": " public void testBug216875d() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd.field = t1.field;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\tt1.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\tt2.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\"", "+\t\t\"src/test/X.java void test.X.foo() [\t\t!|t1|!.field = t1.field;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\tt1.field = !|t1|!.field;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\tt2.field = !|t1|!.field;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57f9e9e603792ed913eab1f3a941214e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "commitAfterChange": "5d080762ae8d3ca1ae1910319f56194e1932135d", "methodNumberBeforeChange": 577, "methodNumberAfterChange": 577, "signatureBeforeChange": " public void testBug216875c() throws CoreException", "signatureAfterChange": " public void testBug216875c() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd.field = t1.field;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\"", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd.field = t1.field;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "583bb45413f3ad3cb3dab09ebdc9d3ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void test001()", "signatureAfterChange": " \tpublic void test001()", "diff": ["-\t\t\t\"     5  invokespecial A001$1$A.<init>(LA001;)V [24]\\n\" + ", "-\t\t\t\"     8  invokevirtual A001$1$A.get()I [27]\\n\" + ", "+\t\t\t\"     5  invokespecial A001$1$A(A001) [24]\\n\" + ", "+\t\t\t\"     8  invokevirtual A001$1$A.get() : int  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 12] local: this index: 0 type: LA001;\\n\"; ", "+\t\t\t\"        [pc: 0, pc: 12] local: this index: 0 type: A001\\n\"; "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58ab1488f317d85a4dc2f126128cc7b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 568, "methodNumberAfterChange": 568, "signatureBeforeChange": " public void testBug209996_c22_3() throws CoreException", "signatureAfterChange": " public void testBug209996_c22_3() throws CoreException", "diff": ["-\t\t\"src/comment22/Test.java comment22.Test.test1 [    @\ufffd|Tag|\ufffd Test test1, test2, test3;]+[@Tag on test1]+[@Tag on test2,@Tag on test3]\\n\" + ", "-\t\t\"src/comment22/Test.java void comment22.Test.method() [        @\ufffd|Tag|\ufffd Test local= null;]+[@Tag on local]\\n\" + ", "-\t\t\"src/comment22/Test.java void comment22.Test.method() [        @\ufffd|Tag|\ufffd Test local1, local2, local3;]+[@Tag on local1]+[@Tag on local2,@Tag on local3]\",", "+\t\t\"src/comment22/Test.java comment22.Test.test1 [    @!|Tag|! Test test1, test2, test3;]+[@Tag on test1]+[@Tag on test2,@Tag on test3]\\n\" + ", "+\t\t\"src/comment22/Test.java void comment22.Test.method() [        @!|Tag|! Test local= null;]+[@Tag on local]\\n\" + ", "+\t\t\"src/comment22/Test.java void comment22.Test.method() [        @!|Tag|! Test local1, local2, local3;]+[@Tag on local1]+[@Tag on local2,@Tag on local3]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58e6cd84c4c8bbbe3c1edeecd992cb7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "cee242bcb21b999953c5459d6b40de2d782355f3", "commitAfterChange": "de0ba5a5e09b42f4671d55cb69260aca34e3da86", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic void testBug62812a()", "signatureAfterChange": " \tpublic void testBug62812a()", "diff": ["-\t\t\t\t\"Javadoc: Malformed reference (missing separator after method reference closing brace)\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed reference (missing end space separator)\\n\" + ", "-\t\t\t\t\"Javadoc: Malformed reference (missing separator after method reference closing brace)\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed reference (missing end space separator)\\n\" + ", "-\t\t\t\t\"Javadoc: Malformed reference (missing separator after method reference closing brace)\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed reference (missing end space separator)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58e9818760067302be43d1f3ebf07faa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "900c13d17fd147c187a2b319111ff0c850c4ae89", "commitAfterChange": "f02cc00df615ce0df96d2675e50465c713b4b942", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 40, "signatureBeforeChange": " public void testBug286668b_60w() throws JavaModelException", "signatureAfterChange": " public void testBug286668b_60w() throws JavaModelException", "diff": ["-\t\t\"\t\t.append(\\\"ghi\\\").append(\\\"jkl\\\").append(\\\"mno\\\")\\n\" + ", "-\t\t\"\t\t.append(\\\"pqr\\\").append(\\\"stu\\\").append(\\\"vwx\\\").append(\\n\" + ", "-\t\t\"\t\t\t\t\\\"yz\\\");\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"ghi\\\").append(\\\"jkl\\\").append(\\\"mno\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"pqr\\\").append(\\\"stu\\\").append(\\\"vwx\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"yz\\\");\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "590bbf09841dc728bf9f51362da0df02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "8a281cea306104e13dc5d8e2e915592f13b4b03f", "commitAfterChange": "4f6e7772e1eab66068e8d31851a8e395b8beb754", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void test015()", "signatureAfterChange": " public void test015()", "diff": ["-\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"\t       ^^^^^^^^\\n\" + ", "+\t\t\t\t\"\t       ^^^^^\\n\" + ", "-\t\t\t\t\"\t       ^^^^^^^^\\n\" + ", "+\t\t\t\t\"\t       ^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5931b468883414b20fcd9a8bdf1c73d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "commitAfterChange": "5d080762ae8d3ca1ae1910319f56194e1932135d", "methodNumberBeforeChange": 578, "methodNumberAfterChange": 578, "signatureBeforeChange": " public void testBug216875d() throws CoreException", "signatureAfterChange": " public void testBug216875d() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd.field = t1.field;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\tt1.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\tt2.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\"", "+\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd.field = t1.field;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\tt1.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\tt2.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59875be92dc8c6fcace4b768ec8f32fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "448d62b2ff66cd7ed3c1bda65bd5259a6d0971b0", "commitAfterChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "methodNumberBeforeChange": 588, "methodNumberAfterChange": 589, "signatureBeforeChange": " public void testBug247564m()", "signatureAfterChange": " public void testBug247564m()", "diff": ["-\t\t\t\"class MyException extends Exception{}\\n\" +", "+\t\t\t\"class MyException extends Exception{}\" +", "-\t\t\"\tclass MyException extends Exception{}\\n\" + ", "+\t\t\"\tclass MyException extends Exception{}public class X {\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 11)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a24f24e638ad81dcec765057774c8b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void test003()", "signatureAfterChange": " \tpublic void test003()", "diff": ["-\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [22]\\n\" + ", "+\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [17]\\n\" + ", "-\t\t\t\"     4  invokevirtual A003.bar() : int  [24]\\n\" + ", "-\t\t\t\"     7  invokevirtual java.io.PrintStream.println(int) : void  [30]\\n\" + ", "+\t\t\t\"     4  invokevirtual A003.bar() : int [23]\\n\" + ", "+\t\t\t\"     7  invokevirtual java.io.PrintStream.println(int) : void [25]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ad89734e45df2f956f5dcf01e0b8bcb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void testBug83127b()", "signatureAfterChange": " \tpublic void testBug83127b()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b9b15cbda2e2caeabda9e8e2a7104e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " \t \tpublic void test066()", "signatureAfterChange": " \t \tpublic void test066()", "diff": ["-\t\t\t\"     8  invokestatic X.boom() : boolean  [27]\\n\" + ", "+\t\t\t\"     8  invokestatic X.boom() : boolean [26]\\n\" + ", "-\t\t\t\"    14  getstatic java.lang.System.out : java.io.PrintStream [33]\\n\" + ", "+\t\t\t\"    14  getstatic java.lang.System.out : java.io.PrintStream [28]\\n\" + ", "-\t\t\t\"    18  invokevirtual java.io.PrintStream.println(int) : void  [39]\\n\" + ", "+\t\t\t\"    18  invokevirtual java.io.PrintStream.println(int) : void [34]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bf477c02067f7e14228c0761a693a68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocBugsTest.java", "commitBeforeChange": "97e6eff65e04dce7acb3a4b10558d6e9ea7e0a37", "commitAfterChange": "c14519ea32a4ea1ee3309a157338e6ed1eb4f28f", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": " public void testBug76324()", "signatureAfterChange": " public void testBug76324()", "diff": ["-\t\t\t\t\" * {@link <a  href=\\\"http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html\\\"> Swing tutorial </a>}\\n\" +", "+\t\t\t\t\" * {@link <a  href=\\\"http://download.oracle.com/javase/tutorial/uiswing/misc/index.html\\\"> Swing tutorial </a>}\\n\" +", "-\t\t\t\t\" *      href=\\\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/package-summary.html\\\">\\n\" +", "-\t\t\t\t\" *      JDK 5.0 </a>\\n\" +", "+\t\t\t\t\" *      href=\\\"http://download.oracle.com/javase/6/docs/api/java/util/concurrent/package-summary.html\\\">\\n\" +", "+\t\t\t\t\" *      JDK 6.0 </a>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d0db001e3fe525fdc73897cd5a6628c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "63c8a2ec89eae9c5f71458dc20e19fe16c16341b", "commitAfterChange": "1380663d32eef4fe51daddb994c3d2197de60d56", "methodNumberBeforeChange": 423, "methodNumberAfterChange": 423, "signatureBeforeChange": " public void test2015_flow_info()", "signatureAfterChange": " public void test2015_flow_info()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 26)\\n\" +", "-\t\t\"\tclass Inner extends X {\\n\" +", "-\t\t\"\t      ^^^^^\\n\" +", "-\t\t\"The blank final field m164 may not have been initialized\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 34)\\n\" + ", "+\t\t\"\tfinal int m164;\\n\" + ", "+\t\t\"\t          ^^^^\\n\" + ", "+\t\t\"The blank final field m164 may not have been initialized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e28cc7f476f02bc94b4c9eacb8b5ceb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 149, "signatureBeforeChange": " \tpublic void test0145()", "signatureAfterChange": " \tpublic void test0145()", "diff": ["-\t\t\t\"The method add(capture-of ?) in the type XList<capture-of ?> is not applicable for the arguments (X)\\n\" + ", "+\t\t\t\"The method add(capture#3-of ?) in the type XList<capture#3-of ?> is not applicable for the arguments (X)\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from X to capture-of ?\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X to capture#4-of ?\\n\" + ", "-\t\t\t\"The method addAll(XList<capture-of ?>) in the type XList<capture-of ?> is not applicable for the arguments (XList<capture-of ?>)\\n\" + ", "+\t\t\t\"The method addAll(XList<capture#5-of ?>) in the type XList<capture#5-of ?> is not applicable for the arguments (XList<capture#6-of ?>)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fab1a216718e43c125f622da6ba8fbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic void testBug83393a()", "signatureAfterChange": " \tpublic void testBug83393a()", "diff": ["-\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5 or greater\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "600b7f966e627c59b7620636f85bf6c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForConstructor.java", "commitBeforeChange": "314f66e76f751455a7dd539f576706f5f92aab24", "commitAfterChange": "5d2ad0b940570868aeb3a33317182334e9423c29", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void test012()", "signatureAfterChange": " \tpublic void test012()", "diff": ["-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid reference\\n\"", "+\t\t\t\t+ \"\t                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"Javadoc: Unexpected text\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60b743942f2b29880326e8d94d81c902", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src-annotations/org/eclipse/jdt/apt/tests/annotations/mirrortest/MirrorDeclarationTestAnnotationProcessor.java", "commitBeforeChange": "7cc379b6b0ded786eb62465b6560512e1ced1839", "commitAfterChange": "1b528a135074de935d61cd7debfa1639da5d7d2f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate void testMethodDeclaration(ClassDeclaration testClassDec)", "signatureAfterChange": " \tprivate void testMethodDeclaration(ClassDeclaration testClassDec)", "diff": ["-\t\t\tif(method.toString().endsWith(\"methodDec(int k, String ... t)\"))", "+\t\t\tif(method.toString().endsWith(\"methodDec(int k, String... t)\"))", "-\t\t\tif(param.toString().startsWith(\"String ...\"))", "+\t\t\tif(param.toString().startsWith(\"String...\"))", "-\t\tProcessorTestStatus.assertTrue(\"String ... parameter exists\", paramDeclString != null);", "+\t\tProcessorTestStatus.assertTrue(\"String... parameter exists\", paramDeclString != null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60e84db60585cded032746093ffcdc73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java", "commitBeforeChange": "301ea60f1c016cdc6dab5bb31b25b7537bf7ad1b", "commitAfterChange": "1033649cfcace48dcb2710381864f07b9c4be6ec", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void _test004_task_tags_options()", "signatureAfterChange": " public void _test004_task_tags_options()", "diff": ["-\t\t\"[FIXME,message contents,NORMAL]\\n\" +", "-\t\t\"[TODO,message contents,NORMAL]\\n\" +", "-\t\t\"[XXX,message contents,NORMAL]\\n\");", "+\t\t\"[FIXME, message contents,NORMAL]\\n\" +", "+\t\t\"[TODO, message contents,NORMAL]\\n\" +", "+\t\t\"[XXX, message contents,NORMAL]\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61e756ae474417f9839473044252b41b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2cfaf33b626413a70eea1530c77695e81ac081f", "commitAfterChange": "89847a0c1a06590b3bbeee9528d77f57e2f8453c", "methodNumberBeforeChange": 390, "methodNumberAfterChange": 390, "signatureBeforeChange": " \tpublic void test0386()", "signatureAfterChange": " \tpublic void test0386()", "diff": ["-\t\t\t\"Type safety: The cast from U to R is actually checking against the erased type Object\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from U to R\\n\" + ", "-\t\t\t\"Type safety: The cast from V to R is actually checking against the erased type Object\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from V to R\\n\" + ", "-\t\t\t\"Type safety: The cast from Object to T is actually checking against the erased type Object\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to T\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "626006c44007a0c5c1ecee833bbac11e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": " public void testTypeRefGenericAllG6_WildcardBounds() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAllG6_WildcardBounds() throws CoreException", "diff": ["-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryException [\t\ufffd|g6.t.def.Table<String, Exception>.Entry|\ufffd<String, Exception> entryException;@49] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryExceptionArray [\t\ufffd|g6.t.def.Table<String, Exception>.Entry<String, Exception>[]|\ufffd entryExceptionArray;@125] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\t\ufffd|g6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry|\ufffd<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]> tableOfEntryExceptionArray;@208] EXACT_MATCH\"", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryException [\t!|g6.t.def.Table<String, Exception>.Entry|!<String, Exception> entryException;@49] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryExceptionArray [\t!|g6.t.def.Table<String, Exception>.Entry<String, Exception>[]|! entryExceptionArray;@125] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\t!|g6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry|!<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]> tableOfEntryExceptionArray;@208] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "629beaba4fa8fbbaa6c60ac0e4dcb892", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SuperTypeTest.java", "commitBeforeChange": "727d8ca46d64642ad4f629f81ba37e76e7ae8c85", "commitAfterChange": "3bf739514a83473db763d6e900f7cc23c49722a4", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void test013()", "signatureAfterChange": " public void test013()", "diff": ["-\t\t\"Redundant superinterface Iterable<E> for the type X<E>, already defined by Collection<E>\\n\" + ", "+\t\t\"Redundant superinterface Iterable<E> for the type X<E>, already defined by List<E>\\n\" + ", "-\t\t\"\t                         ^^^^^^^^\\n\" + ", "-\t\t\"Redundant superinterface Iterable<E> for the type XXX<E>, already defined by Collection<E>\\n\" + ", "+\t\t\"\t                                               ^^^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Collection<E> for the type XXX<E>, already defined by List<E>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64bd5bf611b6df440d38522a8cfb1fc5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void test016()", "signatureAfterChange": " public void test016()", "diff": ["-\t\t\"    28  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    31  ldc <String \\\"SUCCESS\\\"> [23]\\n\" + ", "-\t\t\"    33  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"    28  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    31  ldc <String \\\"SUCCESS\\\"> [22]\\n\" + ", "+\t\t\"    33  invokevirtual java.io.PrintStream.println(java.lang.String) : void [24]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6510c9a05de783db78fc915399ba8e3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void testBug86380() throws CoreException", "signatureAfterChange": " \tpublic void testBug86380() throws CoreException", "diff": ["-\t\t\t\"Test {key=Lb86380/Test;} [in [Working copy] Test.java [in b86380 [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"foo() {key=Lb86380/Test;.foo()V} [in Test [in [Working copy] Test.java [in b86380 [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"field {key=Lb86380/Test;.field} [in Test [in [Working copy] Test.java [in b86380 [in <project root> [in Tests]]]]]\",", "+\t\t\t\"Test [in [Working copy] Test.java [in b86380 [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo() [in Test [in [Working copy] Test.java [in b86380 [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"field [in Test [in [Working copy] Test.java [in b86380 [in <project root> [in Tests]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6627a20dbd1c433ca74267f012c195b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void testJavadocTypeDeclaration() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocTypeDeclaration() throws CoreException", "diff": ["-\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"AnnSearched.java\").getType(\"AnnSearched\");", "+\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"JavadocSearched.java\").getType(\"JavadocSearched\");", "-\t\t\t\t\"src/j1/AnnSearched.java j1.AnnSearched [AnnSearched] EXACT_MATCH\",", "+\t\t\t\t\"src/j1/JavadocSearched.java j1.JavadocSearched [JavadocSearched] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66491f8cbcb3cd7c72c5fec0d8ab7ad7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 582, "methodNumberAfterChange": 582, "signatureBeforeChange": " public void testBug216875c() throws CoreException", "signatureAfterChange": " public void testBug216875c() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd.field = t1.field;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\"", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t!|t1|!.field = t1.field;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = !|t1|!.field;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = !|t1|!.field;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6667ed20957a4189ccf2763a4af35235", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \t \tpublic void test050()", "signatureAfterChange": " \t \tpublic void test050()", "diff": ["-\t\t\t\"     8  getstatic java/lang/System.out Ljava/io/PrintStream; [26]\\n\" + ", "+\t\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [26]\\n\" + ", "-\t\t\t\"    12  invokevirtual java/io/PrintStream.println(I)V [32]\\n\" + ", "+\t\t\t\"    12  invokevirtual java.io.PrintStream.println(int) : void  [32]\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 16] local: i index: 0 type: I\\n\";", "+\t\t\t\"        [pc: 2, pc: 16] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "681370bb4722ef1d24724642d37a0a76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "d8f389cbde24bb1c104b01e8be23d8716da06c45", "commitAfterChange": "314f66e76f751455a7dd539f576706f5f92aab24", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": " \tpublic void testBug68017negative()", "signatureAfterChange": " \tpublic void testBug68017negative()", "diff": ["-\t\t\t\t\"\t    ^^^^^^^\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^\\n\" + ", "-\t\t\t\t\"\t    ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^\\n\" + ", "-\t\t\t\t\"\t    ^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68e2f297f95a9e89f1a76be991a42903", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "98ea1cfbf8c156a194d5ecb17a824c89eb12361f", "commitAfterChange": "cdd7d3ab18b0522945b5ad8d6604c424fb55fd11", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 125, "signatureBeforeChange": "\r \tpublic void test419833()", "signatureAfterChange": "\r \tpublic void test419833()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 9)\\n\" + \r", "-\t\t\t\"\t<P> @T X() {\\n\" + \r", "-\t\t\t\"\t    ^\\n\" + \r", "+\t\t\t\"1. ERROR in X.java (at line 10)\\n\" + \r", "+\t\t\t\"\tpublic class X extends @T S implements @T  {\\n\" + \r", "+\t\t\t\"\t                                       ^\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "690cfb25331f3684e8ad8d9b976677e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2cfaf33b626413a70eea1530c77695e81ac081f", "commitAfterChange": "89847a0c1a06590b3bbeee9528d77f57e2f8453c", "methodNumberBeforeChange": 1095, "methodNumberAfterChange": 1095, "signatureBeforeChange": " public void test1083()", "signatureAfterChange": " public void test1083()", "diff": ["-\t\t\"Type safety: The cast from List<capture#1-of ? extends Serializable> to LinkedList<String> is actually checking against the erased type LinkedList\\n\" + ", "+\t\t\"Type safety: Unchecked cast from List<capture#1-of ? extends Serializable> to LinkedList<String>\\n\" + ", "-\t\t\"Type safety: The cast from List<capture#2-of ? extends Serializable> to LinkedList<Integer> is actually checking against the erased type LinkedList\\n\" + ", "+\t\t\"Type safety: Unchecked cast from List<capture#2-of ? extends Serializable> to LinkedList<Integer>\\n\" + ", "-\t\t\"Type safety: The cast from List<capture#3-of ? extends Serializable> to LinkedList<Runtime> is actually checking against the erased type LinkedList\\n\" + ", "+\t\t\"Type safety: Unchecked cast from List<capture#3-of ? extends Serializable> to LinkedList<Runtime>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6918cc5dde224f9600fef9691bc29bbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 295, "methodNumberAfterChange": 295, "signatureBeforeChange": " \tpublic void test291()", "signatureAfterChange": " \tpublic void test291()", "diff": ["-\t\t\t\"Type safety: Iterable is a raw type. References to generic type Iterable<T> should be parameterized\\n\" + ", "+\t\t\t\"Iterable is a raw type. References to generic type Iterable<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Iterable is a raw type. References to generic type Iterable<T> should be parameterized\\n\" + ", "+\t\t\t\"Iterable is a raw type. References to generic type Iterable<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a3e4dfa4e8d031fde29e46732b0afa7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 227, "methodNumberAfterChange": 227, "signatureBeforeChange": " \tpublic void test223()", "signatureAfterChange": " \tpublic void test223()", "diff": ["-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ab3270c003e1ec97a5bc05518636c9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "2689c910e7993d7f2e4c96a00f4868eadf947850", "commitAfterChange": "7dc01ab99c724b043476264c1ff8612bbfa20971", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " public void test056v()", "signatureAfterChange": " public void test056v()", "diff": ["-\t\t\"Resource leak: \\'reader\\' is never closed\\n\" + ", "+\t\t\"Resource leak: \\\"reader\\\" is never closed\\n\" + ", "-\t\t\"Resource \\'reader111\\' should be managed by try-with-resource\\n\" + ", "+\t\t\"Resource \\\"reader111\\\" should be managed by try-with-resource\\n\" + ", "-\t\t\"Resource leak: \\'reader2\\' is not closed at this location\\n\" + ", "+\t\t\"Resource leak: \\\"reader2\\\" is not closed at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c48e649741204a4f3328cd2f91f2897", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 577, "methodNumberAfterChange": 577, "signatureBeforeChange": " public void testBug216875c() throws CoreException", "signatureAfterChange": " public void testBug216875c() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd.field = t1.field;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\"", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd.field = t1.field;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cd5af2a73d76dab4966de7e9bf414d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  \tpublic void test057()", "signatureAfterChange": "  \tpublic void test057()", "diff": ["-\t\t\t\t+ \"Javadoc: java.awt.AWTexception cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: java.awt.AWTexception cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: IOException cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: IOException cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"InvalidException cannot be resolved (or is not an exception type) for the method t_foo\\n\"", "+\t\t\t\t+ \"InvalidException cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d0c0542569f51ec3e81c67ded5dc1ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": " public void testBug282030h1() throws JavaModelException", "signatureAfterChange": " public void testBug282030h1() throws JavaModelException", "diff": ["-\t\t\"@MyAnnot1(\\n\" + ", "-\t\t\"\t\tname = \\\"sample1\\\",\\n\" + ", "-\t\t\"\t\tvalue = { @MyAnnot2(name = \\\"sample2\\\", value = \\\"demo\\\") })\\n\" + ", "+\t\t\"@MyAnnot1(name = \\\"sample1\\\", value = { @MyAnnot2(\\n\" + ", "+\t\t\"\t\tname = \\\"sample2\\\",\\n\" + ", "+\t\t\"\t\tvalue = \\\"demo\\\") })\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d5ba20ddd8eeb3e75d2f4fdf2a812e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "d43bd70d5c6c4fa98b6c25564f2818572a108eac", "commitAfterChange": "3655fb3ae21ac46b5060eb9e240a41cd2462bac2", "methodNumberBeforeChange": 200, "methodNumberAfterChange": 200, "signatureBeforeChange": " public void test406614()", "signatureAfterChange": " public void test406614()", "diff": ["-\t\t\t\"The constructor X(() -> this.f) is undefined\\n\" + ", "+\t\t\t\"The constructor X(() -> {}) is undefined\\n\" + ", "-\t\t\t\"The constructor X(() -> this.g()) is undefined\\n\" + ", "+\t\t\t\"The constructor X(() -> {}) is undefined\\n\" + ", "-\t\t\t\"The constructor X(() -> f) is undefined\\n\" + ", "+\t\t\t\"The constructor X(() -> {}) is undefined\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6da1278b6d897b5cb5a4a6aec8cef653", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void test001()", "signatureAfterChange": " public void test001()", "diff": ["-\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"     9  ldc <String \\\"SUCCESS\\\"> [23]\\n\" + ", "-\t\t\"    11  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"     9  ldc <String \\\"SUCCESS\\\"> [22]\\n\" + ", "+\t\t\"    11  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e303eb5011e59e961aaef510424fab1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": "\r public void test0081() throws IOException", "signatureAfterChange": "\r public void test0081() throws IOException", "diff": ["-\tassertEquals(\"Wrong location\", \"{0}\", locations.get(\"@F\"));\r", "-\tassertEquals(\"Wrong location\", \"{1}\", locations.get(\"@G\"));\r", "-\tassertEquals(\"Wrong location\", \"{2}\", locations.get(\"@H\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY]\", locations.get(\"@F\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY]\", locations.get(\"@G\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY]\", locations.get(\"@H\"));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e51bb12b095b251fa72011b7a261ef1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InterfaceMethodsTest.java", "commitBeforeChange": "7a4894572c8dc97616c8aa59652842aae37320e6", "commitAfterChange": "328c06fa136c963530115a367863b6a931384871", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void testModifiers1a()", "signatureAfterChange": " \tpublic void testModifiers1a()", "diff": ["-\t\t\t\"Illegal modifier for the interface method foo2; only public, abstract and strictfp are permitted\\n\" + ", "+\t\t\t\"Illegal modifier for the interface method foo2; only public, abstract, default, static and strictfp are permitted\\n\" + ", "-\t\t\t\"Illegal modifier for the interface method foo4; only public, abstract and strictfp are permitted\\n\" + ", "+\t\t\t\"Illegal modifier for the interface method foo4; only public, abstract, default, static and strictfp are permitted\\n\" + ", "-\t\t\t\"Illegal modifier for the interface method foo5; only public, abstract and strictfp are permitted\\n\" + ", "+\t\t\t\"Illegal modifier for the interface method foo5; only public, abstract, default, static and strictfp are permitted\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7073f4ca39f067d4a28187021a6f3466", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "a4e58088a1010e10b50ef0d8683567f65215eac1", "commitAfterChange": "e58a2ebf19f99fca487e8ddd26a3dd844cc59501", "methodNumberBeforeChange": 214, "methodNumberAfterChange": 214, "signatureBeforeChange": "\r public void testBug446442_6b()", "signatureAfterChange": "\r public void testBug446442_6b()", "diff": ["-\t\t\"Contradictory null annotations: function type was inferred as \\'ArrayList<@NonNull @Nullable Integer> (ArrayList<@NonNull @Nullable Integer>)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r", "+\t\t\"Contradictory null annotations: function type was inferred as \\'ArrayList<@NonNull @Nullable Integer> (ArrayList<@Nullable @NonNull Integer>)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r", "-\t\t\"Contradictory null annotations: method was inferred as \\'boolean add(@NonNull @Nullable Integer)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r", "+\t\t\"Contradictory null annotations: method was inferred as \\'boolean add(@Nullable @NonNull Integer)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r", "-\t\t\"Contradictory null annotations: method was inferred as \\'@NonNull @Nullable Integer get(int)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r", "+\t\t\"Contradictory null annotations: method was inferred as \\'@Nullable @NonNull Integer get(int)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "712a0ac49d5f9b87ea19bdda84eeab0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBugsTestJLS3.java", "commitBeforeChange": "bae98ccb647b46a2d5cfccf36593de0c5db401c9", "commitAfterChange": "230a5cd410205aeead21b12e1ec93eae10a08fda", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void testBug130778i() throws JavaModelException", "signatureAfterChange": " public void testBug130778i() throws JavaModelException", "diff": ["-\t\t\t\"[*1*]@AnAnnotation[*1*](value=)\\n\" +", "+\t\t\t\"[*1*]@AnAnnotation(value=[*1*])\\n\" +", "-\t\t\t\"[*1*]@AnAnnotation[*1*] [*2*]@AnAnnotation2(value=\\\"b\\\")[*2*] [*3*]public[*3*] class X {\\n\" + ", "+\t\t\t\"[*1*]@AnAnnotation(value=$missing$)[*1*] [*2*]@AnAnnotation2(value=\\\"b\\\")[*2*] [*3*]public[*3*] class X {\\n\" + ", "-\t\t\t\"1:MARKER_ANNOTATION,[11,13],,,[ANNOTATION,La/X;@La/AnAnnotation;,]\\n\" + ", "+\t\t\t\"1:NORMAL_ANNOTATION,[11,20],,RECOVERED,[ANNOTATION,La/X;@La/AnAnnotation;,]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "719b344ddb4f919bf836ed40defe66db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ProblemTypeAndMethodTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " public void test076()", "signatureAfterChange": " public void test076()", "diff": ["-\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" +", "+\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" +", "+\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" +", "+\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71bc4b1bb3f70b0a006b29f934fea91e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "2d89f0516f5e5910bcd18015e8090ed0805dbb4e", "commitAfterChange": "817ed71692e2e331f7e0ac3a90af87bc08553ba4", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " \tpublic void test072()", "signatureAfterChange": " \tpublic void test072()", "diff": ["-\t\t\t\"1. ERROR in p1\\\\A.java (at line 7)\\n\" + ", "-\t\t\t\"\tint v2 = b.fooC;\\n\" + ", "+\t\t\t\"1. ERROR in p1\\\\A.java (at line 6)\\n\" + ", "+\t\t\t\"\tint v1 = b.fooB;\\n\" + ", "-\t\t\t\"fooC cannot be resolved or is not a field\\n\" + ", "+\t\t\t\"fooB cannot be resolved or is not a field\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73582fd91c66ac45e868d6443766fa20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 96, "signatureBeforeChange": "  \tpublic void test133()", "signatureAfterChange": "  \tpublic void test133()", "diff": ["-\t\t\t\t+ \"\t                 ^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                 ^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73becbfc72cc2003ce43cc3a3afb5865", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elementutils/ElementUtilsProc.java", "commitBeforeChange": "26d507f9337456ca82e52ed896177b679ad9ed51", "commitAfterChange": "6954f6f09ec0fa4357c31e7abaa82f5c7cd86dbc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate boolean examineGetDocComment()", "signatureAfterChange": " \tprivate boolean examineGetDocComment()", "diff": ["-\t\t\treportError(\"Unexpected result from getDocComment(F): \" + actual);", "+\t\t\treportError(\"examineGetDocComment: Unexpected result from getDocComment(F): \" + actual);", "-\t\t\t\t\treportError(\"Expected getDocComment(\" + name + \") to return null, but got \" + actual);", "+\t\t\t\t\treportError(\"examineGetDocComment: Expected getDocComment(\" + name + \") to return null, but got \" + actual);", "-\t\t\t\t\t\treportError(\"Unexpected result from getDocComment(\" + name + \"): \" + actual);", "+\t\t\t\t\t\treportError(\"examineGetDocComment: Unexpected result from getDocComment(\" + name + \"): \" + actual);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74283e163b90bbf05c42a3c44092e76c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 228, "methodNumberAfterChange": 227, "signatureBeforeChange": " public void testBug260381_wksp2_06() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_06() throws JavaModelException", "diff": ["-\t\t\"\t *             permit null elements. Note that if {@code\\n\" + ", "-\t\t\"\t *     occurrences} is zero, the implementation may opt to return normally.\\n\" + ", "+\t\t\"\t *             permit null elements. Note that if {@code occurrences} is\\n\" + ", "+\t\t\"\t *             zero, the implementation may opt to return normally.\\n\" + ", "-\t\t\"\tboolean /* int */ add(E element, int occurrences);\\n\" + ", "+\t\t\"\tboolean /* int */add(E element, int occurrences);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "749102bfd61edc9a554525dc97c26a1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "f8b6b46eb549003d602669d933e8c4d912cfd694", "commitAfterChange": "ccc0792be277c61897d6812d61e917773111eeb0", "methodNumberBeforeChange": 225, "methodNumberAfterChange": 225, "signatureBeforeChange": " public void testBug260381_wksp2_04() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_04() throws JavaModelException", "diff": ["-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75f5015fd7b2d980f226972ff2760ca0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "0241b6a034ef8fa4f27f3bd260b936d3f2c0aea7", "commitAfterChange": "99074098c6405e18b1f1a04aabe7c2838c777448", "methodNumberBeforeChange": 834, "methodNumberAfterChange": 834, "signatureBeforeChange": " public void test0814()", "signatureAfterChange": " public void test0814()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\"\tif (o instanceof E[]) { //incorrect: cannot test non-reifiable type\\n\" +", "-\t\t\"\t    ^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Cannot perform instanceof check against parameterized type E[]. Use instead its raw form Object[] since generic type information will be erased at runtime\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 5)\\n\" +", "-\t\t\"\tE[] es = (E[]) o;\\n\" +", "-\t\t\"\t         ^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked cast from Object to E[]\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 7)\\n\" +", "-\t\t\"\tif (o instanceof List<E>[]) { //incorrect too\\n\" +", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Cannot perform instanceof check against parameterized type List<E>[]. Use instead its raw form List[] since generic type information will be erased at runtime\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 8)\\n\" +", "-\t\t\"\tList<E>[] es = (List<E>[]) o; \\n\" +", "-\t\t\"\t               ^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked cast from Object to List<E>[]\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. ERROR in X.java (at line 15)\\n\" +", "-\t\t\"\tif (al instanceof List<E>[]) { //incorrect too\\n\" +", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Cannot perform instanceof check against parameterized type List<E>[]. Use instead its raw form List[] since generic type information will be erased at runtime\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"6. WARNING in X.java (at line 16)\\n\" +", "-\t\t\"\tList<E>[] es = (List<E>[]) al; \\n\" +", "-\t\t\"\t               ^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Unnecessary cast from ArrayList<E>[] to List<E>[]\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (o instanceof E[]) { //incorrect: cannot test non-reifiable type\\n\" + ", "+\t\t\"\t    ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Cannot perform instanceof check against type parameter E[]. Use instead its erasure Object[] instead since further generic type information will be erased at runtime\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tE[] es = (E[]) o;\\n\" + ", "+\t\t\"\t         ^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to E[]\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tif (o instanceof List<E>[]) { //incorrect too\\n\" + ", "+\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Cannot perform instanceof check against parameterized type List<E>[]. Use the form List<?>[] instead since further generic type information will be erased at runtime\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\"\tList<E>[] es = (List<E>[]) o; \\n\" + ", "+\t\t\"\t               ^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to List<E>[]\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\"\tif (al instanceof List<E>[]) { //incorrect too\\n\" + ", "+\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Cannot perform instanceof check against parameterized type List<E>[]. Use the form List<?>[] instead since further generic type information will be erased at runtime\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in X.java (at line 16)\\n\" + ", "+\t\t\"\tList<E>[] es = (List<E>[]) al; \\n\" + ", "+\t\t\"\t               ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Unnecessary cast from ArrayList<E>[] to List<E>[]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76deffe06efe23f08e955e49e25f8c3a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6e1daeed1b338c470552c705d4bce7d654dc9164", "commitAfterChange": "284c289846ff27fe8fc104da5e422fc3fb8c5d90", "methodNumberBeforeChange": 793, "methodNumberAfterChange": 793, "signatureBeforeChange": " public void test787()", "signatureAfterChange": " public void test787()", "diff": ["-\t\t\"1. ERROR in X.java (at line 8)\\r\\n\" + ", "-\t\t\"\tgetLonger(list, set);\\r\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\tgetLonger(list, set);\\n\" + ", "-\t\t\"Bound mismatch: The generic method getLonger(T, T) of type X<U> is not applicable for the arguments (AbstractCollection<? extends Object>&Cloneable&Serializable, AbstractCollection<? extends Object>&Cloneable&Serializable) since the type AbstractCollection<? extends Object>&Cloneable&Serializable is not a valid substitute for the bounded parameter <T extends Collection<? extends U>>\\n\" + ", "+\t\t\"Bound mismatch: The generic method getLonger(T, T) of type X<U> is not applicable for the arguments (HashSet<capture-of ?>, ArrayList<capture-of ?>). The inferred type AbstractCollection<? extends Object>&Cloneable&Serializable is not a valid substitute for the bounded parameter <T extends Collection<? extends U>>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7866b54b598eae1533631bfefcd93eb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/mirrortest/MirrorDeclarationTestAnnotationProcessor.java", "commitBeforeChange": "80b216af2abfbc335ce04bf55fc463ba47e45873", "commitAfterChange": "8eb843ef75292ca86ade9a64a79ec382d0e5f4fa", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate void testMethodDeclaration(ClassDeclaration testClassDec)", "signatureAfterChange": " \tprivate void testMethodDeclaration(ClassDeclaration testClassDec)", "diff": ["-\t\t\tif(method.toString().endsWith(\"methodDec(int k, String[] t)\"))", "+\t\t\tif(method.toString().endsWith(\"methodDec(int k, String... t)\"))", "-\t\t\tif(param.toString().startsWith(\"String[]\"))", "+\t\t\tif(param.toString().startsWith(\"String...\"))", "-\t\tProcessorTestStatus.assertTrue(\"String[] parameter exists\", paramDeclString != null);", "+\t\tProcessorTestStatus.assertTrue(\"String... parameter exists\", paramDeclString != null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78be9624f46c4b9f8cd63bc209293606", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DefaultMethodsTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void testObjectMethod1()", "signatureAfterChange": " \tpublic void testObjectMethod1()", "diff": ["-\t\t\t\t\"    public String toString () default { return \\\"\\\";}\\n\" + ", "+\t\t\t\t\"    public default String toString () { return \\\"\\\";}\\n\" + ", "-\t\t\t\"\tpublic String toString () default { return \\\"\\\";}\\n\" + ", "-\t\t\t\"\t              ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\tpublic default String toString () { return \\\"\\\";}\\n\" + ", "+\t\t\t\"\t                      ^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a32d5fea65cde397f63beca6d420f3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void testMethodReferencesStringPatternMultipleParamArguments02() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesStringPatternMultipleParamArguments02() throws CoreException", "diff": ["-\t\tsearch(\"complete % <Object, Exception, RuntimeException>\", METHOD, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"<Object, Exception, RuntimeException>complete\", METHOD, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [complete(new Object(), new Exception(), new RuntimeException(), gm)] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [<Object, Exception, RuntimeException>complete(new Object(), new Exception(), new RuntimeException(), gm)] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testMultiple() [complete(new Object(), new Exception(), new RuntimeException(), gm)] EXACT_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testMultiple() [complete(new Object(), new Exception(), new RuntimeException(), gm)] EQUIVALENT_RAW_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b071f8a3dd7c2363a17b41e9166e563", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void testMethodReferencesStringPatternMultipleParamArguments06() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesStringPatternMultipleParamArguments06() throws CoreException", "diff": ["-\t\tsearch(\"generic(*,*,*) % <Object, RuntimeException, RuntimeException>\", METHOD, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"<Object, RuntimeException, RuntimeException>generic(*,*,*)\", METHOD, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [generic(new Object(), new RuntimeException(), new RuntimeException())] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [<Object, RuntimeException, RuntimeException>generic(new Object(), new RuntimeException(), new RuntimeException())] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testMultiple() [generic(new Object(), new Exception(), new RuntimeException())] ERASURE_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testMultiple() [generic(new Object(), new Exception(), new RuntimeException())] EQUIVALENT_RAW_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bbbf6c2626e3a03fa1dead34dca88f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "b2b2f79127ceb81a70f0a7e9c4a14a4c97a6bb69", "commitAfterChange": "68d139bf0c56c6c993907701c5e076e9d3ee773d", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " public void test0044()", "signatureAfterChange": " public void test0044()", "diff": ["-\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "-\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "-\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c10fc1ea27c385f71eca128255e7625", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "bf2199048d434ee8a7461950468d3a2335a30990", "commitAfterChange": "99697e231d7abf709bf21ed4dc6a92bbb307b9f9", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": " public void testBug400905_0023() throws CoreException", "signatureAfterChange": " public void testBug400905_0023() throws CoreException", "diff": ["-\t\t\t\t\t\"src/test/Test.java int test.X.i:Lambda(I).thrice(int) [(x) /* field */ ->] EXACT_MATCH\\n\" + ", "-\t\t\t\t\t\"src/test/Test.java int void test.X.main(String[]):Lambda(I).thrice(int) [(x) /*call*/ ->] EXACT_MATCH\\n\" + ", "-\t\t\t\t\t\"src/test/Test.java int void test.X.main(String[]):Lambda(I).thrice(int) [(x) /* local */ ->] EXACT_MATCH\"", "+\t\t\t\t\t\"src/test/Test.java int test.X.i:<lambda #1>.thrice(int) [(x) /* field */ ->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\t\"src/test/Test.java int void test.X.main(String[]):<lambda #1>.thrice(int) [(x) /*call*/ ->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\t\"src/test/Test.java int void test.X.main(String[]):<lambda #1>.thrice(int) [(x) /* local */ ->] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cb5b6c7b752c7179b93e962eedf57ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "8a281cea306104e13dc5d8e2e915592f13b4b03f", "commitAfterChange": "4f6e7772e1eab66068e8d31851a8e395b8beb754", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": " public void test400556()", "signatureAfterChange": " public void test400556()", "diff": ["-\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t      ^^^^^^\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t      ^^^^^^\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t      ^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d0983fec1fdc1345515ce7d1deccbfe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 547, "methodNumberAfterChange": 547, "signatureBeforeChange": " \tpublic void test545()", "signatureAfterChange": " \tpublic void test545()", "diff": ["-\t\t\t\"Type safety: The cast from X<? extends Object> to X2 is actually checking against the erased type X2\\n\" + ", "+\t\t\t\"Type safety: The cast from X<capture-of ? extends Object> to X2 is actually checking against the erased type X2\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from X<? extends Object> to X<String>\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X<capture-of ? extends Object> to X<String>\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from X<? extends Object> to X2\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X<capture-of ? extends Object> to X2\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fc7adb1b7cd7e214f8f61ee8b19bcba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic void testBug83393a()", "signatureAfterChange": " \tpublic void testBug83393a()", "diff": ["-\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5 or greater\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8069250f042bfa5406858a8057fc5086", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "e92324cecc3fbf731a68d99288f72318b17cf1ea", "commitAfterChange": "9832689930749c0e863f1bb11ec756d41ad5c5d4", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 111, "signatureBeforeChange": " public void testSimpleMethodReference() throws CoreException", "signatureAfterChange": " public void testSimpleMethodReference() throws CoreException", "diff": ["-\t\t\"src/Test.java Test.main(String[]) -> void [foo(1, \\\"a\\\", y)]\\n\" +", "-\t\t\"src/Test.java Test.main(String[]) -> void [foo(1, \\\"a\\\", z)]\\n\" +", "-\t\t\"src/p/Z.java p.Z.foo(int, String, X) -> void [foo(i, s, new Y(true))]\", ", "+\t\t\"src/Test.java void Test.main(String[]) [foo(1, \\\"a\\\", y)]\\n\" + ", "+\t\t\"src/Test.java void Test.main(String[]) [foo(1, \\\"a\\\", z)]\\n\" + ", "+\t\t\"src/p/Z.java void p.Z.foo(int, String, X) [foo(i, s, new Y(true))]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "814526eef75b33c1f4b0e5528d2554ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "0241b6a034ef8fa4f27f3bd260b936d3f2c0aea7", "commitAfterChange": "99074098c6405e18b1f1a04aabe7c2838c777448", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 186, "signatureBeforeChange": " \tpublic void test0178()", "signatureAfterChange": " \tpublic void test0178()", "diff": ["-\t\t\t\"Cannot perform instanceof check against parameterized type X<T>. Use instead its raw form X since generic type information will be erased at runtime\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against parameterized type X<T>. Use the form X<?> instead since further generic type information will be erased at runtime\\n\" + ", "-\t\t\t\"Cannot perform instanceof check against parameterized type X<String>. Use instead its raw form X since generic type information will be erased at runtime\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against parameterized type X<String>. Use the form X<?> instead since further generic type information will be erased at runtime\\n\" + ", "-\t\t\t\"Cannot perform instanceof check against type parameter T. Use instead its erasure Object since generic type information will be erased at runtime\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against type parameter T. Use instead its erasure Object instead since further generic type information will be erased at runtime\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81b7b2f4b47ccdd2f0f32594dbc79f6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6d9cd9b246f8b8740f4a501085a32633b2b6c2af", "commitAfterChange": "470afdfff602b441f9a45a7d903230534423c9ca", "methodNumberBeforeChange": 446, "methodNumberAfterChange": 446, "signatureBeforeChange": " \tpublic void test444()", "signatureAfterChange": " \tpublic void test444()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic class X implements I<Integer>, I<String> {}\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X implements I<Integer>, I<String> {}\\n\" + ", "-\t\t\t\"Duplicate interface I<T> for the type X\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\"The interface I cannot be implemented more than once with different arguments: I<String> and I<Integer>\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "821f6067c1218f729230da23b7ba1505", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "27a11ce8ecc325901777098d9d0eafdb0be3dc5b", "commitAfterChange": "413506076b5eca1e8bff0fe05f1ae6ca89cdfda0", "methodNumberBeforeChange": 578, "methodNumberAfterChange": 578, "signatureBeforeChange": " public void testBug216875d() throws CoreException", "signatureAfterChange": " public void testBug216875d() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd.field = t1.field;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\tt1.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\tt2.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\"", "+\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd.field = t1.field;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\tt1.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\tt2.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8240461dcb9fbdfef24c81fb7150bc72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "572021b99f292f39a76e81c2ea834ac6a839b00b", "commitAfterChange": "727d8ca46d64642ad4f629f81ba37e76e7ae8c85", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " public void testBug232768_Javadoc06() throws JavaModelException", "signatureAfterChange": " public void testBug232768_Javadoc06() throws JavaModelException", "diff": ["-\t\t\"   public     class\t\t\tC{    \\n\" +", "-\t\t\"\t\\n\" +", "-\t\t\"        /**\\n\" +", "+\t\t\"   public     class\t\t\tC{\\n\" +", "+\t\t\"\\n\" +", "+\t\t\"\t/**\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "827e493d2f7977242e9b1aa25f6d30ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 557, "methodNumberAfterChange": 557, "signatureBeforeChange": "\t\t\t\t\t \tpublic void test555()", "signatureAfterChange": "\t\t\t\t\t \tpublic void test555()", "diff": ["-\t\t\t\"Type mismatch: cannot convert from X<? extends Number> to X<? extends U>\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X<capture-of ? extends Number> to X<? extends U>\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from ? extends Number to ? extends U\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from capture-of ? extends Number to capture-of ? extends U\\n\" + ", "-\t\t\t\"Bound mismatch: Cannot assign expression of type ? extends U to wildcard type ? extends Number. The wildcard type has no lower bound, and may actually be more restrictive than expression type\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from capture-of ? extends U to capture-of ? extends Number\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8539ced441c8dbe817dcc25c14916ab8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DeprecatedTest.java", "commitBeforeChange": "232201d6380e7830296a82a7b3422a333db36b2e", "commitAfterChange": "378f419edc5509790bbfa3083244109f6abafbe2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void test015()", "signatureAfterChange": " public void test015()", "diff": ["-\t\t\"\t^^^^^^^\\n\" +", "+\t\t\"\t     ^^\\n\" +", "-\t\t\"\t^^^^^^^^^^\\n\" +", "+\t\t\"\t        ^^\\n\" +", "-\t\t\"\t^^^^^^^\\n\" +", "+\t\t\"\t  ^^^^^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8711aa60428a13be92af12243f57f083", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5d2ad0b940570868aeb3a33317182334e9423c29", "commitAfterChange": "0f27abdc440c19d22cca8de897116ef5e59c08c4", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 129, "signatureBeforeChange": " \tpublic void test117()", "signatureAfterChange": " \tpublic void test117()", "diff": ["-\t\t\t\t\"public class X <T extends X.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "+\t\t\t\t\"public class X <T extends X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "-\t\t\t\t\"        new X<X.MX<Runnable>.MMX<Iterable<String>>>().new MX<Exception>();\\n\" + ", "+\t\t\t\t\"        new X<X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>>().new MX<Exception>();\\n\" + ", "-\t\t\t\t\"    void foo(X<X.MX.MMX>.MX.MMX<X> mx) {\\n\" + ", "+\t\t\t\t\"    void foo(X<X.MX.MMX>.MX<X>.MMX<X> mx) {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87b5475ad92879d66dc1d61ec5793765", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "\r public void test0068() throws IOException", "signatureAfterChange": "\r public void test0068() throws IOException", "diff": ["-\tassertEquals(\"Wrong location\", \"{0}\", locations.get(\"@F\"));\r", "-\tassertEquals(\"Wrong location\", \"{1}\", locations.get(\"@G\"));\r", "-\tassertEquals(\"Wrong location\", \"{2}\", locations.get(\"@H\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY]\", locations.get(\"@F\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY]\", locations.get(\"@G\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY]\", locations.get(\"@H\"));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87c46949bfc3fc6181a238fb80d10140", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void test_nonnull_parameter_015()", "signatureAfterChange": " public void test_nonnull_parameter_015()", "diff": ["-\t\t\t\"Redundant null check: The variable o cannot be null at this location\\n\" + ", "+\t\t\t\"Redundant null check: The variable o is specified as @NonNull\\n\" + ", "-\t\t\t\"Type mismatch: required \\'@NonNull Object[]\\' but the provided value is null\\n\" + ", "+\t\t\t\"Null type mismatch: required \\'@NonNull Object[]\\' but the provided value is null\\n\" + ", "-\t\t\t\"Type mismatch: required \\'@NonNull Object[]\\' but the provided value is null\\n\" + ", "+\t\t\t\"Null type mismatch: required \\'@NonNull Object[]\\' but the provided value is null\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "887befc1884f1b6840c15f7f8cd822c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "0bd8e1b1cf24c00d081a70bccd79f0e53ad3dc52", "commitAfterChange": "b35be838b9d57695e23b927dc647a592275feef5", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " public void test056l()", "signatureAfterChange": " public void test056l()", "diff": ["-\t\t\"Resource \\\"fileReader\\\" should be managed by try-with-resource\\n\" + ", "+\t\t\"Resource 'fileReader' should be managed by try-with-resource\\n\" + ", "-\t\t\"Resource \\\"r3\\\" should be managed by try-with-resource\\n\" +", "+\t\t\"Resource 'r3' should be managed by try-with-resource\\n\" +", "-\t\t\"Potential resource leak: \\\"r2\\\" may not be closed\\n\" + ", "+\t\t\"Potential resource leak: 'r2' may not be closed\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c2b6d6f30ad467930206fd3cb7ed4d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "6a30932a9f23eebeff6a4c95107cf5fc3f257b06", "commitAfterChange": "b2481149503869b0622f5e9e55188ca80636e024", "methodNumberBeforeChange": 187, "methodNumberAfterChange": 187, "signatureBeforeChange": " public void test0464_while_infinite()", "signatureAfterChange": " public void test0464_while_infinite()", "diff": ["-\t\t\t\"    loop: for( int i = 0; ; i++ )\\n\" + ", "+\t\t\t\"    loop: while(true)\\n\" + ", "-\t\t\t\"      if (a[i] == null)\\n\" + ", "+\t\t\t\"      if (a[0] == null)\\n\" + ", "-\t\t\t\"      key = a[i];\\n\" + ", "+\t\t\t\"      key = a[0];\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    if (key != null) {\\n\" + ", "+\t\t\t\"      // empty\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\"},", "+\t\t\"\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c4cec7abaf10bf7fb3e53353eafd4fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "27a11ce8ecc325901777098d9d0eafdb0be3dc5b", "commitAfterChange": "413506076b5eca1e8bff0fe05f1ae6ca89cdfda0", "methodNumberBeforeChange": 577, "methodNumberAfterChange": 577, "signatureBeforeChange": " public void testBug216875c() throws CoreException", "signatureAfterChange": " public void testBug216875c() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd.field = t1.field;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\"", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd.field = t1.field;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c5e042b68a82b28bd689f81d13877d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "bf2199048d434ee8a7461950468d3a2335a30990", "commitAfterChange": "99697e231d7abf709bf21ed4dc6a92bbb307b9f9", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " public void testBug400905_0013e() throws CoreException", "signatureAfterChange": " public void testBug400905_0013e() throws CoreException", "diff": ["-\t\t\t\t\"src/X.java int int void X.zoo():Lambda(I).doit(X):Lambda(I).doit(X) [X] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/X.java int void X.zoo():Lambda(I).doit(X):Q#1.x [X] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/X.java int void X.zoo():Lambda(I).doit(X) [X] EXACT_MATCH\");", "+\t\t\t\t\"src/X.java int int void X.zoo():<lambda #1>.doit(X):<lambda #1>.doit(X) [X] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():<lambda #1>.doit(X):Q#1.x [X] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():<lambda #1>.doit(X) [X] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cd339d57299e716ef679cf12ea2d38c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/mirrortest/MirrorDeclarationTestAnnotationProcessor.java", "commitBeforeChange": "d6f02f07429dae5d9415421b0a1fb951b3ab04e0", "commitAfterChange": "bd118e51270d54e48ef1b8d76bf62d7f013d8051", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate void testMethodDeclaration(ClassDeclaration testClassDec)", "signatureAfterChange": " \tprivate void testMethodDeclaration(ClassDeclaration testClassDec)", "diff": ["-\t\t\tif(method.toString().endsWith(\"methodDec(int k, String... t)\"))", "+\t\t\tif(method.toString().endsWith(\"methodDec(int k, String ... t)\"))", "-\t\t\tif(param.toString().startsWith(\"String...\"))", "+\t\t\tif(param.toString().startsWith(\"String ...\"))", "-\t\tProcessorTestStatus.assertTrue(\"String... parameter exists\", paramDeclString != null);", "+\t\tProcessorTestStatus.assertTrue(\"String ... parameter exists\", paramDeclString != null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d58927d6859dc36183987db583fd86c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "77646fe802ce8842c3e468133491915f09e00874", "commitAfterChange": "95ad422ba75a97d9b8c3cb49bc8bd9dcf7d18a77", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void test017() throws CoreException", "signatureAfterChange": " \tpublic void test017() throws CoreException", "diff": ["-\t\t\t\t\"    class Y {\\n\" +", "-\t\t\t\t\"    };\" +", "+\t\t\t\t\"    /*start*/class Y {\\n\" +", "+\t\t\t\t\"    }/*end*/;\" +", "-\t\t\t\"Lp1/X$1$Y;\");", "+\t\t\t\"Lp1/X$54;\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dcd1b15122dcc6e4e3d0fb367c6d387", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBugsTestJLS3.java", "commitBeforeChange": "bae98ccb647b46a2d5cfccf36593de0c5db401c9", "commitAfterChange": "230a5cd410205aeead21b12e1ec93eae10a08fda", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void testBug130778j() throws JavaModelException", "signatureAfterChange": " public void testBug130778j() throws JavaModelException", "diff": ["-\t\t\t\"[*2*]@AnAnnotation2[*2*](value=)\\n\" +", "+\t\t\t\"[*2*]@AnAnnotation2(value=[*2*])\\n\" +", "-\t\t\t\"[*1*]@AnAnnotation(value=\\\"a\\\")[*1*] [*2*]@AnAnnotation2[*2*] [*3*]public[*3*] class X {\\n\" + ", "+\t\t\t\"[*1*]@AnAnnotation(value=\\\"a\\\")[*1*] [*2*]@AnAnnotation2(value=$missing$)[*2*] [*3*]public[*3*] class X {\\n\" + ", "-\t\t\t\"2:MARKER_ANNOTATION,[36,14],,,[ANNOTATION,La/X;@La/AnAnnotation2;,]\\n\" + ", "+\t\t\t\"2:NORMAL_ANNOTATION,[36,21],,RECOVERED,[ANNOTATION,La/X;@La/AnAnnotation2;,]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e80107f8b98a78d055131fe89fd6968", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  \tpublic void test067()", "signatureAfterChange": "  \tpublic void test067()", "diff": ["-\t\t\t\"     2  istore_0\\n\" + ", "-\t\t\t\"     3  iload_0\\n\" + ", "+\t\t\t\"     2  istore_0 [i]\\n\" + ", "+\t\t\t\"     3  iload_0 [i]\\n\" + ", "-\t\t\t\"     9  invokestatic #27 <Method X.boom()Z>\\n\" + ", "+\t\t\t\"     9  invokestatic X.boom()Z [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f4bfbcc78cab56913a447ef13f4c11a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 560, "methodNumberAfterChange": 560, "signatureBeforeChange": "\t\t\t\t\t \tpublic void test0555()", "signatureAfterChange": "\t\t\t\t\t \tpublic void test0555()", "diff": ["-\t\t\t\"Type mismatch: cannot convert from X<capture-of ? extends Number> to X<? extends U>\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X<capture#4-of ? extends Number> to X<? extends U>\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from capture-of ? extends Number to capture-of ? extends U\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from capture#6-of ? extends Number to capture#5-of ? extends U\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from capture-of ? extends U to capture-of ? extends Number\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from capture#8-of ? extends U to capture#7-of ? extends Number\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "909da0d3b77e47706c0da4e2cff44126", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocBugsTest.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 114, "signatureBeforeChange": " \tpublic void testBug77510enabled()", "signatureAfterChange": " \tpublic void testBug77510enabled()", "diff": ["-\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\t\"\tint i0 = A.i0009;\\n\" + ", "-\t\t\t\t\"\t         ^^^^^^^\\n\" + ", "-\t\t\t\t\"The field A.i0009 is deprecated\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\t\"\tint i1 = A.i000a;\\n\" + ", "-\t\t\t\t\"\t         ^^^^^^^\\n\" + ", "-\t\t\t\t\"The field A.i000a is deprecated\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\t\"\tint i3 = A.i000c;\\n\" + ", "-\t\t\t\t\"\t         ^^^^^^^\\n\" + ", "-\t\t\t\t\"The field A.i000c is deprecated\\n\" + ", "-\t\t\t\t\"----------\\n\"", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tint i0 = A.i0009;\\n\" + ", "+\t\t\t\"\t           ^^^^^\\n\" + ", "+\t\t\t\"The field A.i0009 is deprecated\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tint i1 = A.i000a;\\n\" + ", "+\t\t\t\"\t           ^^^^^\\n\" + ", "+\t\t\t\"The field A.i000a is deprecated\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tint i3 = A.i000c;\\n\" + ", "+\t\t\t\"\t           ^^^^^\\n\" + ", "+\t\t\t\"The field A.i000c is deprecated\\n\" + ", "+\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "917c9fb658fdb98e2ff901531b13457f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic void testBug54962qualified() throws CoreException", "signatureAfterChange": " \tpublic void testBug54962qualified() throws CoreException", "diff": ["-\t\t\t\t\"src/j7/qua/li/fied/Bug54962a.java j7.qua.li.fied.Bug54962a [ * @see \ufffd|j7.qua.li.fied|\ufffd] EXACT_MATCH INSIDE_JAVADOC\\n\" +", "-\t\t\t\t\"src/j7/qua/li/fied/Bug54962a.java j7.qua.li.fied.Bug54962a [ * @see \ufffd|j7.qua.li.fied|\ufffd.BUG54962a] EXACT_MATCH INSIDE_JAVADOC\\n\" +", "-\t\t\t\t\"src/j7/qua/li/fied/Bug54962a.java j7.qua.li.fied.Bug54962a [ * @see \ufffd|j7.qua.li.fied|\ufffd.Bug54962a] EXACT_MATCH INSIDE_JAVADOC\",", "+\t\t\t\t\"src/j7/qua/li/fied/Bug54962a.java j7.qua.li.fied.Bug54962a [ * @see !|j7.qua.li.fied|!] EXACT_MATCH INSIDE_JAVADOC\\n\" +", "+\t\t\t\t\"src/j7/qua/li/fied/Bug54962a.java j7.qua.li.fied.Bug54962a [ * @see !|j7.qua.li.fied|!.BUG54962a] EXACT_MATCH INSIDE_JAVADOC\\n\" +", "+\t\t\t\t\"src/j7/qua/li/fied/Bug54962a.java j7.qua.li.fied.Bug54962a [ * @see !|j7.qua.li.fied|!.Bug54962a] EXACT_MATCH INSIDE_JAVADOC\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91ff45ae2c152960f09c16bf1cb22966", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "066f1fe71d5d139e5a681c9aeece89fa867b71b7", "commitAfterChange": "39951c3ce9f26380d44e65dd4f0a9c708c89c0d1", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " public void testEncodeDecodeEntry05()", "signatureAfterChange": " public void testEncodeDecodeEntry05()", "diff": ["-\t\t\"<classpathentry exported=\\\"true\\\" sourcepath=\\\"src.zip\\\" kind=\\\"lib\\\" rootpath=\\\"root\\\" path=\\\"lib.jar\\\">\\n\" + ", "+\t\t\"<classpathentry exported=\\\"true\\\" kind=\\\"lib\\\" path=\\\"lib.jar\\\" rootpath=\\\"root\\\" sourcepath=\\\"src.zip\\\">\\n\" + ", "-\t\t\"\t\t<attribute value=\\\"val1\\\" name=\\\"attr1\\\"/>\\n\" + ", "+\t\t\"\t\t<attribute name=\\\"attr1\\\" value=\\\"val1\\\"/>\\n\" + ", "-\t\t\"\t\t<accessrule kind=\\\"accessible\\\" pattern=\\\"**/A*.java\\\" ignoreifbetter=\\\"true\\\"/>\\n\" + ", "+\t\t\"\t\t<accessrule ignoreifbetter=\\\"true\\\" kind=\\\"accessible\\\" pattern=\\\"**/A*.java\\\"/>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9363c99e5718ef4b94a798df754c15de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "84c5b115e7466dfc6e19cd3055480421b2384a2d", "commitAfterChange": "1d6638787ae042a98f74eaa1a6155e74e1a941be", "methodNumberBeforeChange": 259, "methodNumberAfterChange": 259, "signatureBeforeChange": " public void test217_warn_options()", "signatureAfterChange": " public void test217_warn_options()", "diff": ["-\t\t\"1 problem (1 warning)\",", "+\t\t\"1 problem (1 warning)\\n\",", "-\t\t\"1 problem (1 warning)\",", "+\t\t\"1 problem (1 warning)\\n\",", "-\t\t\"1 problem (1 warning)\",", "+\t\t\"1 problem (1 warning)\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9445b1aa91a59fab169ba217b4ae146d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void testMethodReferencesStringPatternSingleParamArguments03() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesStringPatternSingleParamArguments03() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testUnbound() [complete(new String(), gs)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testExtends() [<Throwable>complete(new Throwable(), gs)] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testSuper() [complete(new RuntimeException(), gs)] ERASURE_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testUnbound() [complete(new String(), gs)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testExtends() [<Throwable>complete(new Throwable(), gs)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testSuper() [complete(new RuntimeException(), gs)] POTENTIAL_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94fedaaef90715c009c3c65dd8d2fa19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "2f57f8dfaade218a320169042ea7ed8e042be61d", "commitAfterChange": "870bb4f621dd0b8090426a7261d67a43a6dc9aa9", "methodNumberBeforeChange": 259, "methodNumberAfterChange": 259, "signatureBeforeChange": " public void test217_warn_options()", "signatureAfterChange": " public void test217_warn_options()", "diff": ["-\t\t\"1 problem (1 warning)\",", "+\t\t\"1 problem (1 warning)\\n\",", "-\t\t\"1 problem (1 warning)\",", "+\t\t\"1 problem (1 warning)\\n\",", "-\t\t\"1 problem (1 warning)\",", "+\t\t\"1 problem (1 warning)\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9552c26919a09c363e93a4225079ba55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void testMethodReferencesElementPatternSingleTypeParameter05() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternSingleTypeParameter05() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testUnbound() [complete(new String(), gs)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testExtends() [complete(new Throwable(), gs)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testSuper() [complete(new RuntimeException(), gs)] ERASURE_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testUnbound() [complete(new String(), gs)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testExtends() [complete(new Throwable(), gs)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testSuper() [complete(new RuntimeException(), gs)] POTENTIAL_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95bd58b3b574d19dd5735daed72162aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void testMethodReferencesElementPatternSingleParamArguments03() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternSingleParamArguments03() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testUnbound() [complete(new String(), gs)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testExtends() [complete(new Throwable(), gs)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testSuper() [complete(new RuntimeException(), gs)] ERASURE_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testUnbound() [complete(new String(), gs)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testExtends() [complete(new Throwable(), gs)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testSuper() [complete(new RuntimeException(), gs)] POTENTIAL_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95f040adbca7592c4d42a31510ee913d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public  void testBinarySubclass() throws JavaModelException", "signatureAfterChange": " public  void testBinarySubclass() throws JavaModelException", "diff": ["-\t\t\"  Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"  <anonymous #1> {key=Lp48459/p1/Z48459$59;} [in foo [in Z48459 [in Z48459.java [in p48459.p1 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  Y48459 {key=Lp48459/p2/Y48459;} [in Y48459.class [in p48459.p2 [in lib48459 [in TypeHierarchy]]]]\\n\",", "+\t\t\"  <anonymous #1> [in foo [in Z48459 [in Z48459.java [in p48459.p1 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  Y48459 [in Y48459.class [in p48459.p2 [in lib48459 [in TypeHierarchy]]]]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9634b87de4605ffdb595986fa56aa528", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "900c13d17fd147c187a2b319111ff0c850c4ae89", "commitAfterChange": "f02cc00df615ce0df96d2675e50465c713b4b942", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 41, "signatureBeforeChange": " public void testBug286668c_60w() throws JavaModelException", "signatureAfterChange": " public void testBug286668c_60w() throws JavaModelException", "diff": ["-\t\t\"\t\t.append(\\\"ghi\\\").append(\\\"jkl\\\").append(\\\"mno\\\")\\n\" + ", "-\t\t\"\t\t.append(\\\"pqr\\\").append(\\\"stu\\\").append(\\\"vwx\\\")\\n\" + ", "-\t\t\"\t\t.append(\\\"yz\\\");\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"ghi\\\").append(\\\"jkl\\\").append(\\\"mno\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"pqr\\\").append(\\\"stu\\\").append(\\\"vwx\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"yz\\\");\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9685f9e16ef748f43ecf285e27102a76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void testBug83127a()", "signatureAfterChange": " \tpublic void testBug83127a()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "978ca3369a3730cf8cfe8d0972ce8b61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "d9d1b97f49560324c7b848690f93b474a074ee07", "commitAfterChange": "001ffb6de73834a7a360af0372922300c59a2fe1", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void test022()", "signatureAfterChange": " \tpublic void test022()", "diff": ["-\t\t\t\"Cannot qualify the name of the enum constant BLEU in a case label\\n\" + ", "+\t\t\t\"The enum constant X.MX.BLEU reference cannot be qualified in a case label\\n\" + ", "-\t\t\t\"Cannot qualify the name of the enum constant BLANC in a case label\\n\" + ", "+\t\t\t\"The enum constant X.MX.BLANC reference cannot be qualified in a case label\\n\" + ", "-\t\t\t\"Cannot qualify the name of the enum constant ROUGE in a case label\\n\" + ", "+\t\t\t\"The enum constant X.MX.ROUGE reference cannot be qualified in a case label\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97dee9f7e1266f1695ce320ac4c4bb0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "ee6e442281c6adfce6f28a674af1fb9f7f9d707f", "commitAfterChange": "9d88e07972fdc72c8f68cd0cc8f036c691b75fb7", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void testLocalType3() throws JavaModelException", "signatureAfterChange": " public void testLocalType3() throws JavaModelException", "diff": ["-\t\t\"  Y1 [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"    X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"      Object [in Object.class [in java.lang [in \"+  getExternalJCLPathString() +\" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  Y1 {key=Lp7/A$288;} [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"    X {key=Lp7/X;} [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"      Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "986e45bd42d20cdc9b57414a0bddbf71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "a7c3cda7c961d5a5839fc88cdcdca05f749f0591", "commitAfterChange": "45f26d79341dbd73cc50656614a5963b62874264", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void test003()", "signatureAfterChange": "  \tpublic void test003()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 1)\\n\" + ", "-\t\t\t\"The import p.A.C cannot be resolved\\n\" + ", "+\t\t\t\"The import p.A.C is never used\\n\" + ", "-\t\t\t\"C cannot be resolved\\n\" + ", "+\t\t\t\"The type I is not visible\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ab99af744986111373747b92df1591b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void testBug83127a()", "signatureAfterChange": " \tpublic void testBug83127a()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9aeefa930416007470eac1ce2a1b2c99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "d6c2a90130be430285c5f6a000090d250c310afd", "commitAfterChange": "51e1f00f8d474f0b209b47afa85e44328a517f92", "methodNumberBeforeChange": 589, "methodNumberAfterChange": 588, "signatureBeforeChange": " public void testBug247564m()", "signatureAfterChange": " public void testBug247564m()", "diff": ["-\t\t\t\"class MyException extends Exception{}\" +", "+\t\t\t\"class MyException extends Exception{}\\n\" +", "-\t\t\"\tclass MyException extends Exception{}public class X {\\n\" + ", "+\t\t\"\tclass MyException extends Exception{}\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 12)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cabc834843a09daed0cfbaadb68823e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "7b4e4fcfdd4d04f13dc930d8b751701d20daa4d2", "commitAfterChange": "a8739597ebb6a7bc2be662454643b96202480dc7", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public void test019()", "signatureAfterChange": " public void test019()", "diff": ["-\t        + \" -cp \\\"\" + OUTPUT_DIR + \"[+OK2.*\" + File.pathSeparator + \"~Warn.*\" + File.pathSeparator + \"-KO.*]\\\"\"", "+\t        + \" -cp \\\"\" + OUTPUT_DIR + \"[+OK2\" + File.pathSeparator + \"~Warn\" + File.pathSeparator + \"-KO]\\\"\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cfde0e86e498480a669e6e969d7977a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "67643a7c27a6d261feaad810d2590f1f6d33b749", "commitAfterChange": "da7a5227e034c2b6c8a4762e61c3ccf43066f02e", "methodNumberBeforeChange": 449, "methodNumberAfterChange": 454, "signatureBeforeChange": " public void testBug319201d()", "signatureAfterChange": " public void testBug319201d()", "diff": ["-\t\t\t\"Potential null pointer access: The variable b2 may be null at this location\\n\" + ", "+\t\t\t\"Potential null pointer access: This expression of type Boolean may be null but requires auto-unboxing\\n\" + ", "-\t\t\t\"Null pointer access: The variable b3 can only be null at this location\\n\" + ", "+\t\t\t\"Null pointer access: This expression of type Boolean is null but requires auto-unboxing\\n\" + ", "-\t\t\t\"Potential null pointer access: The variable b7 may be null at this location\\n\" + ", "+\t\t\t\"Potential null pointer access: This expression of type Boolean may be null but requires auto-unboxing\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d157915631e9307b0854ad0e8100009", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b9bb6123c3e4c0567c677af33c7c0e8037ba4975", "commitAfterChange": "4dd974a226271180ff02d909a12722017f80ff3a", "methodNumberBeforeChange": 309, "methodNumberAfterChange": 309, "signatureBeforeChange": " public void test159()", "signatureAfterChange": " public void test159()", "diff": ["-\t\t\"The return types are incompatible for the inherited methods BFoo.bar(), AFoo.bar()\\n\" + ", "+\t\t\"The return types are incompatible for the inherited methods AFoo.bar(), BFoo.bar()\\n\" + ", "-\t\t\"The return types are incompatible for the inherited methods BFoo.bar(), AFoo.bar()\\n\" + ", "+\t\t\"The return types are incompatible for the inherited methods AFoo.bar(), BFoo.bar()\\n\" + ", "-\t\t\"The type Z must implement the inherited abstract method AFoo.bar()\\n\" + ", "+\t\t\"The type Z must implement the inherited abstract method BFoo.bar()\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f2b55b970a976de5eb046e0538e2ee8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": " public void testBug282030h1() throws JavaModelException", "signatureAfterChange": " public void testBug282030h1() throws JavaModelException", "diff": ["-\t\t\"@MyAnnot1(name = \\\"sample1\\\", value = { @MyAnnot2(\\n\" + ", "-\t\t\"\t\tname = \\\"sample2\\\",\\n\" + ", "-\t\t\"\t\tvalue = \\\"demo\\\") })\\n\" + ", "+\t\t\"@MyAnnot1(\\n\" + ", "+\t\t\"\t\tname = \\\"sample1\\\",\\n\" + ", "+\t\t\"\t\tvalue = { @MyAnnot2(name = \\\"sample2\\\", value = \\\"demo\\\") })\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0e0570e010626c68580a016f5ea0f94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "77e59a44eb8dbf245688369fa4e6a37813270ef9", "commitAfterChange": "6bbe71e24e5d5d76445f30e5351f63286e328fac", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " public void testBug400905_0003() throws CoreException", "signatureAfterChange": " public void testBug400905_0003() throws CoreException", "diff": ["-\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):Lambda(I).foo(b400905/Y) [y->] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):Lambda(I).foo(b400905/Y) [y ->] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):Lambda(I).foo(b400905/Y) [y  ->] EXACT_MATCH\"", "+\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):Lambda(I).foo(b400905.Y) [y->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):Lambda(I).foo(b400905.Y) [y ->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):Lambda(I).foo(b400905.Y) [y  ->] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a16e86a33fa9e817a07f5f3ebc94d843", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "  \tpublic void test068()", "signatureAfterChange": "  \tpublic void test068()", "diff": ["-\t\t\t\"     9  invokestatic X.boom() : boolean  [27]\\n\" + ", "+\t\t\t\"     9  invokestatic X.boom() : boolean [26]\\n\" + ", "-\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [33]\\n\" + ", "+\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [28]\\n\" + ", "-\t\t\t\"    19  invokevirtual java.io.PrintStream.println(int) : void  [39]\\n\" + ", "+\t\t\t\"    19  invokevirtual java.io.PrintStream.println(int) : void [34]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a189b976eff31ee8c01df6f4688ca4da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RenameTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void testRenameCU() throws CoreException", "signatureAfterChange": " public void testRenameCU() throws CoreException", "diff": ["-\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "-\t\t\"\t\t\tX.java[-]: {MOVED_TO(NewX.java [in [default] [in src [in P]]])}\\n\" + ", "-\t\t\"\t\t\tNewX.java[+]: {MOVED_FROM(X.java [in [default] [in src [in P]]])}\"", "+\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + ", "+\t\t\"\t\t\tX.java[-]: {MOVED_TO(NewX.java [in <default> [in src [in P]]])}\\n\" + ", "+\t\t\"\t\t\tNewX.java[+]: {MOVED_FROM(X.java [in <default> [in src [in P]]])}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2bb04a2c5c94d04cf700df009d900e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "  \tpublic void test065()", "signatureAfterChange": "  \tpublic void test065()", "diff": ["-\t\t\t\"     1  istore_0\\n\" + ", "-\t\t\t\"     2  iload_0\\n\" + ", "+\t\t\t\"     1  istore_0 [i]\\n\" + ", "+\t\t\t\"     2  iload_0 [i]\\n\" + ", "-\t\t\t\"     8  invokestatic #27 <Method X.boom()Z>\\n\" + ", "+\t\t\t\"     8  invokestatic X.boom()Z [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a48351fd93f7ecef8c48af7279b3400f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_4.java", "commitBeforeChange": "8758dd14429783f320e9886f9e8b83edae58524b", "commitAfterChange": "5d659b26c6aa5eb4fc698fe62dca975ceee0bdfd", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " public void test37()", "signatureAfterChange": " public void test37()", "diff": ["-\t\t\"1. ERROR in p\\\\X.java (at line 4)\\n\" + ", "+\t\t\"1. WARNING in p\\\\X.java (at line 4)\\n\" + ", "-\t\t\"\t^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Unexpected end of comment\\n\" + ", "+\t\t\"\t   ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"TODO: something\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a48845c291628732ebea2ba3e6946fdd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void testBug83127c()", "signatureAfterChange": " \tpublic void testBug83127c()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a49ab44681839775165fb39a18d502b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LookupTest.java", "commitBeforeChange": "bce0dbd9dd489d3038652b337b4b76bb1f2246a4", "commitAfterChange": "f04ae71cc7d18b0e34f184a3124e4f7f58dafcf3", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " public void test104()", "signatureAfterChange": " public void test104()", "diff": ["-\t\t\"The field A.x is never read locally\\n\" + ", "+\t\t\"The value of the field A.x is not used\\n\" + ", "-\t\t\"The field A.B.x is never read locally\\n\" + ", "+\t\t\"The value of the field A.B.x is not used\\n\" + ", "-\t\t\"The field A.B.c is never read locally\\n\" + ", "+\t\t\"The value of the field A.B.c is not used\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4ce5415ab62143920828e981cebe6ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": " public void testTypeRefQualifiedAll_Cast() throws CoreException", "signatureAfterChange": " public void testTypeRefQualifiedAll_Cast() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\tt = (\ufffd|type.def.Types|\ufffd) o;@418] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java type.def.Types all.types.ref.TestTypes.method(type.def.Types) [\t\ttype.def.Types local = (\ufffd|type.def.Types|\ufffd) obj;@635] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\t\t\tthis.str = (\ufffd|String|\ufffd) this.object;@982] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\tt = (!|type.def.Types|!) o;@418] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java type.def.Types all.types.ref.TestTypes.method(type.def.Types) [\t\ttype.def.Types local = (!|type.def.Types|!) obj;@635] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\t\t\tthis.str = (!|String|!) this.object;@982] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5c0d17f9ab6fc2b5b76240d53915918", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DefaultMethodsTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void testObjectMethod2()", "signatureAfterChange": " \tpublic void testObjectMethod2()", "diff": ["-\t\t\t\t\"    public boolean equals (T other) default { return false;}\\n\" + ", "+\t\t\t\t\"    public default boolean equals (T other) { return false;}\\n\" + ", "-\t\t\t\"\tpublic boolean equals (T other) default { return false;}\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\tpublic default boolean equals (T other) { return false;}\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5d207f5fa5a1d8989dc4dd8de530b67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "46707c76fd68c0bae496959cbe90bc206d6a8322", "commitAfterChange": "4b6ca10fae490fdd3d43c251801c6ab4492e083d", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \t \tpublic void test051()", "signatureAfterChange": " \t \tpublic void test051()", "diff": ["-\t\t\t\t\"    String value() default ;\\n\" + ", "+\t\t\t\t\"    String value() default \\\"Hello\\\";\\n\" + ", "-\t\t\t\t\"    @I(\\\"Hello\\\") void foo() {\\n\" + ", "+\t\t\t\t\"    @I(\\\"Hi\\\") void foo() {\\n\" + ", "-\t\t\t\"  @I(value={\\\"Hello\\\"})\\n\" + ", "+\t\t\t\"  @I(value=\\\"Hi\\\")\\n\" + ", "+\t\t\t\"  void foo();\\n\" + ", "+\t\t\t\"    0  return\\n\" + ", "+\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\"        [pc: 0, line: 7]\\n\" + ", "+\t\t\t\"      Local variable table:\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 1] local: this index: 0 type: LX;\\n\" + ", "+\t\t\t\"}\"; ", "+\t\t\t", "+\t\tif (actualOutput.indexOf(expectedOutput) == -1) {", "+\t\t\tSystem.out.println(org.eclipse.jdt.core.tests.util.Util.displayString(actualOutput, 2));", "+\t\t}", "+\t\tassertTrue(\"unexpected bytecode sequence\", actualOutput.indexOf(expectedOutput) != -1);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7a512767fba475628d202faf09fbaa3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DeprecatedTest.java", "commitBeforeChange": "232201d6380e7830296a82a7b3422a333db36b2e", "commitAfterChange": "378f419edc5509790bbfa3083244109f6abafbe2", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test016()", "signatureAfterChange": " public void test016()", "diff": ["-\t\t\"\t^^^^^^^\\n\" +", "+\t\t\"\t     ^^\\n\" +", "-\t\t\"\t^^^^^^^^^^\\n\" +", "+\t\t\"\t        ^^\\n\" +", "-\t\t\"\t^^^^^^^\\n\" +", "+\t\t\"\t  ^^^^^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7b4727507e6f304f486c65d43f69b17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "f7c2ed5ecce3841921f761b0b104d350042f786e", "commitAfterChange": "132971f23d5ad724e7abdb8444fe685456f8fc05", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void test015()", "signatureAfterChange": " public void test015()", "diff": ["-\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method\\n\" + ", "+\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method run(int)\\n\" + ", "-\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method\\n\" + ", "+\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method run(int, String)\\n\" + ", "-\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method\\n\" + ", "+\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method run(int, String)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8c310baff356cffc39f816451e625c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiProjectTests.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void testCompileOrder() throws JavaModelException", "signatureAfterChange": " \t \tpublic void testCompileOrder() throws JavaModelException", "diff": ["-\t\t\t\tnew Problem(\"p3\", \"W cannot be resolved (or is not a valid type) for the field Z.w\", c3),//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tnew Problem(\"p2\", \"W cannot be resolved (or is not a valid type) for the field Y.w\", c2),//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tnew Problem(\"p1\", \"W cannot be resolved (or is not a valid type) for the field X.w\", c1)//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p3\", \"W cannot be resolved to a type\", c3),//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p2\", \"W cannot be resolved to a type\", c2),//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p1\", \"W cannot be resolved to a type\", c1)//$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8d143e48029fab3dc8d9bef0de79e02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "  \tpublic void test060()", "signatureAfterChange": "  \tpublic void test060()", "diff": ["-\t\t\t\"     3  getstatic java/lang/System.out Ljava/io/PrintStream; [26]\\n\" + ", "+\t\t\t\"     3  getstatic java.lang.System.out : java.io.PrintStream [26]\\n\" + ", "-\t\t\t\"     7  invokevirtual java/io/PrintStream.println(I)V [32]\\n\" + ", "+\t\t\t\"     7  invokevirtual java.io.PrintStream.println(int) : void  [32]\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 11] local: i index: 0 type: I\\n\";", "+\t\t\t\"        [pc: 3, pc: 11] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa7de7a610798f2e1ee52f7d930356f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "c9e02661baa80cf1f75154d10de9df61ce3f636d", "commitAfterChange": "d92419d7d90bedd902391c7e83696cf6304867ae", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public void test026()", "signatureAfterChange": " public void test026()", "diff": ["-\t\t\"BLEU cannot be resolved\\n\" +", "+\t\t\"BLEU cannot be resolved to a variable\\n\" +", "-\t\t\"BLANC cannot be resolved\\n\" +", "+\t\t\"BLANC cannot be resolved to a variable\\n\" +", "-\t\t\"ROUGE cannot be resolved\\n\" +", "+\t\t\"ROUGE cannot be resolved to a variable\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abe4a9cdea14ab25e4b80d3ed7ad6415", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic void testBug83393b()", "signatureAfterChange": " \tpublic void testBug83393b()", "diff": ["-\t\t\t\"Syntax error, varargs are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, varargs are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, varargs are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac2f63088593d6f10d7ddeb44fe28574", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8816a21753c2d607b8868597ac43f18ef7dd2d50", "commitAfterChange": "3af20c8fa9116cf8e52dcf498c1b4eea06f21754", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "\t \tpublic void test078()", "signatureAfterChange": "\t \tpublic void test078()", "diff": ["-\t\t\t\"Type safety: The expression of type A is converted to A<String> using a raw conversion. References to generic type A<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type A needs unchecked conversion to conform to A<String>\\n\" + ", "-\t\t\t\"Type safety: The expression of type A is converted to A<String> using a raw conversion. References to generic type A<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type A needs unchecked conversion to conform to A<String>\\n\" + ", "-\t\t\t\"Type safety: The expression of type A is converted to A<String> using a raw conversion. References to generic type A<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type A needs unchecked conversion to conform to A<String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac4feebd94e36c2607ad531aa7e6cf75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiProjectTests.java", "commitBeforeChange": "b6c3ef88a42ce595faa4897ed3f3cb935e51c7fb", "commitAfterChange": "80d11a1b2e7fe69d0ca6c0214575c56a017a1140", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void testCycle2() throws JavaModelException", "signatureAfterChange": " \t \tpublic void testCycle2() throws JavaModelException", "diff": ["-\t\t\texpectingOnlySpecificProblemFor(p1,new Problem(\"p1\", \"A cycle was detected in the classpath of project: P1\", p1));//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingOnlySpecificProblemFor(p1,new Problem(\"p1\", \"A cycle was detected in the build path of project: P1\", p1));//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\tnew Problem(\"p2\", \"A cycle was detected in the classpath of project: P2\", p2)//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\tnew Problem(\"p2\", \"A cycle was detected in the build path of project: P2\", p2)//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\texpectingOnlySpecificProblemFor(p3,new Problem(\"p3\", \"A cycle was detected in the classpath of project: P3\", p3));//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingOnlySpecificProblemFor(p3,new Problem(\"p3\", \"A cycle was detected in the build path of project: P3\", p3));//$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac7f82898d4a9147598b9426df62c70a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "3a514d6cf7a163df7c9aa1b24e69e8f3a5b39e3c", "commitAfterChange": "0aeaaba7ea908a19742d309ce070fd6d99b6c4d4", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void testJavadocConstructorStringReference() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocConstructorStringReference() throws CoreException", "diff": ["-//\t\tJavaSearchResultCollector result = new JavaSearchResultCollector();", "-//\t\tresult.showAccuracy = true;", "-\t\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\",", "+\t\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad165b08ef078f00a12d459c60f023dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "f18f7c02b98c146e8137b7662982e2d6df05d49c", "commitAfterChange": "69bef202487469075de7ebc34de6c0a4a5c0cdbd", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void testBinary03()", "signatureAfterChange": " \tpublic void testBinary03()", "diff": ["-\t\t\t\t\t\"\t\tSystem.out.println(X1.f1.length);\\n\" +", "+\t\t\t\t\t\"\t\tSystem.out.println(p.X1.f1.length);\\n\" +", "-\t\t\t\t\"\tSystem.out.println(X1.f1.length);\\n\" + ", "-\t\t\t\t\"\t                   ^^\\n\" + // FIXME(stephan) should point to f1, see https://bugs.eclipse.org/414380 ", "+\t\t\t\t\"\tSystem.out.println(p.X1.f1.length);\\n\" + ", "+\t\t\t\t\"\t                        ^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad29a71fb22aaf23daa66f6ec9bbdcaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public void test_nonnull_local_001()", "signatureAfterChange": " public void test_nonnull_local_001()", "diff": ["-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value can be null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is inferred as @Nullable\\n\" +", "-\t\t\"Type mismatch: required \\'@NonNull String\\' but the provided value is null\\n\" +", "+\t\t\"Null type mismatch: required \\'@NonNull String\\' but the provided value is null\\n\" +", "-\t\t\"Potential type mismatch: required \\'@NonNull Object\\' but nullness of the provided value is unknown\\n\" +", "+\t\t\"Null type safety: The expression of type Object needs unchecked conversion to conform to \\'@NonNull Object\\'\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad50941a5bd06ecef424e279f7a12c6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " public void testBug400905_0013e() throws CoreException", "signatureAfterChange": " public void testBug400905_0013e() throws CoreException", "diff": ["-\t\t\t\t\"src/X.java int int void X.zoo():<lambda>#1.lambda$1(X):<lambda>#2.lambda$2(X) [X] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/X.java int void X.zoo():<lambda>#1.lambda$1(X):Q#1.x [X] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/X.java int void X.zoo():<lambda>#1.lambda$1(X) [X] EXACT_MATCH\");", "+\t\t\t\t\"src/X.java int int void X.zoo():Lambda(I).doit(X):Lambda(I).doit(X) [X] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():Lambda(I).doit(X):Q#1.x [X] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():Lambda(I).doit(X) [X] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af29218549d94af70e6323e656d48db9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "d6c2a90130be430285c5f6a000090d250c310afd", "commitAfterChange": "51e1f00f8d474f0b209b47afa85e44328a517f92", "methodNumberBeforeChange": 555, "methodNumberAfterChange": 555, "signatureBeforeChange": " public void testBug247564b_4()", "signatureAfterChange": " public void testBug247564b_4()", "diff": ["-\t\t\t\"        o.toString(); // danger\" +", "+\t\t\t\"        o.toString(); // danger\\n\" +", "-\t\t\t\"\to.toString(); // danger        return;\\n\" + ", "+\t\t\t\"\to.toString(); // danger\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 21)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 22)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af383256b853b6b8c1cc3e80101fc6a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": "\r public void test0076() throws IOException", "signatureAfterChange": "\r public void test0076() throws IOException", "diff": ["-\tassertEquals(\"Wrong location\", \"{0}\", locations.get(\"@B\"));\r", "-\tassertEquals(\"Wrong location\", \"{1}\", locations.get(\"@C\"));\r", "-\tassertEquals(\"Wrong location\", \"{1,0}\", locations.get(\"@D\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0)]\", locations.get(\"@B\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1)]\", locations.get(\"@C\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1), TYPE_ARGUMENT(0)]\", locations.get(\"@D\"));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0a00d173e0c7fa19e65fcbb03412bd8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic void testBug83393b()", "signatureAfterChange": " \tpublic void testBug83393b()", "diff": ["-\t\t\t\"Syntax error, varargs are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, varargs are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, varargs are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0b90fbb06c2d500df947dd3c2fe4feb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " public void test067()", "signatureAfterChange": " public void test067()", "diff": ["-\t\t\"The enum constant ONE must define the abstract method getSquare()\\n\" +", "+\t\t\"The enum constant ONE must implement the abstract method getSquare()\\n\" +", "-\t\t\"The enum constant TWO must define the abstract method getSquare()\\n\" +", "+\t\t\"The enum constant TWO must implement the abstract method getSquare()\\n\" +", "-\t\t\"The enum constant THREE must define the abstract method getSquare()\\n\" +", "+\t\t\"The enum constant THREE must implement the abstract method getSquare()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4835d632237cb7ad333c56b60489c6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "da66108c4dcf7d4c829f420f0c5740a1c650780f", "commitAfterChange": "499b520a4fc503777cad65625ba88d2eba0a29ac", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test036()", "signatureAfterChange": " \tpublic void test036()", "diff": ["-\t\t\t\"The type B is not visible\\n\" + ", "+\t\t\t\"The field B.p.A.CONSTANT_B is not visible\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The type B is not visible\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^^^^\\n\" + ", "+\t\t\t\"The field B.CONSTANT_B is not visible\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b487c29b267844463127d3a8d8b16d20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " public void testBug400905_0003() throws CoreException", "signatureAfterChange": " public void testBug400905_0003() throws CoreException", "diff": ["-\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):<lambda>#1.lambda$1(b400905/Y) [y->] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):<lambda>#2.lambda$2(b400905/Y) [y ->] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):<lambda>#3.lambda$3(b400905/Y) [y  ->] EXACT_MATCH\"", "+\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):Lambda(I).foo(b400905/Y) [y->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):Lambda(I).foo(b400905/Y) [y ->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):Lambda(I).foo(b400905/Y) [y  ->] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4e397e6b3f0707a6662745c40bf601d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CreateMembersTests.java", "commitBeforeChange": "d9da62b96418ec7c4e63f83dc9c7f0cfe3e6af1a", "commitAfterChange": "20ba2adddd9acb8b30c82e8f2340c23092f7b231", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void test001() throws JavaModelException", "signatureAfterChange": "  \tpublic void test001() throws JavaModelException", "diff": ["-\t\t\t\"\tpublic void foo() {\\n\" + ", "-\t\t\t\"\t\tSystem.out.println(\\\"Hello World\\\");\\n\" + ", "-\t\t\t\"\t}\\n\" +", "+\t\t\t\"    public void foo() {\\n\" + ", "+\t\t\t\"    \tSystem.out.println(\\\"Hello World\\\");\\n\" + ", "+\t\t\t\"    }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6065ee245ee8123b8d797a66aea35af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_4.java", "commitBeforeChange": "8758dd14429783f320e9886f9e8b83edae58524b", "commitAfterChange": "5d659b26c6aa5eb4fc698fe62dca975ceee0bdfd", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " public void test38()", "signatureAfterChange": " public void test38()", "diff": ["-\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 1)\\n\" + ", "-\t\t\"\t^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Unexpected end of comment\\n\" + ", "+\t\t\"\t   ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"TODO: something\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b66351e6310938315db829349fcd278e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ProblemTypeAndMethodTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " public void test077()", "signatureAfterChange": " public void test077()", "diff": ["-\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" +", "+\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" +", "+\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" +", "+\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7026dea675843ee7c61af706d2b8a72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "605cc5dd745b7e1d6935bfc34c1be6fcea51b4ab", "commitAfterChange": "03be42bb9ac6b223bea20e29a7b3f31a76dae9e4", "methodNumberBeforeChange": 568, "methodNumberAfterChange": 568, "signatureBeforeChange": " public void testBug209996_c22_3() throws CoreException", "signatureAfterChange": " public void testBug209996_c22_3() throws CoreException", "diff": ["-\t\t\"src/comment22/Test.java @Tag() [    @\ufffd|Tag|\ufffd Test test1, test2, test3;]\\n\" +", "-\t\t\"src/comment22/Test.java @Tag() [        @\ufffd|Tag|\ufffd Test local= null;]\\n\" +", "-\t\t\"src/comment22/Test.java @Tag() [        @\ufffd|Tag|\ufffd Test local1, local2, local3;]\",", "+\t\t\"src/comment22/Test.java comment22.Test.test1 [    @\ufffd|Tag|\ufffd Test test1, test2, test3;]+[@Tag on test1]+[@Tag on test2,@Tag on test3]\\n\" + ", "+\t\t\"src/comment22/Test.java void comment22.Test.method() [        @\ufffd|Tag|\ufffd Test local= null;]+[@Tag on local]\\n\" + ", "+\t\t\"src/comment22/Test.java void comment22.Test.method() [        @\ufffd|Tag|\ufffd Test local1, local2, local3;]+[@Tag on local1]+[@Tag on local2,@Tag on local3]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b762bfdc411416f0b45af0848b8e822b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ExternalizeStringLiteralsTest.java", "commitBeforeChange": "be99a78ebde70e086535a722e0c99b2c26590dce", "commitAfterChange": "15b09e3657f237aa7526b08315f9749226cbc20e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void test002()", "signatureAfterChange": "  public void test002()", "diff": ["-\t\t\t\"\t\tString s6 = \\\"\\\"; //$NON-NLS-1$//$NON-NLS-2$\\n\" +", "+\t\t\t\"\t\tString s6 = \\\"\\\"; //$NON-NLS-2$//$NON-NLS-1$\\n\" +", "-\t\t\"\tString s6 = \\\"\\\"; //$NON-NLS-1$//$NON-NLS-2$\\n\" + ", "-\t\t\"\t                             ^^^^^^^^^^^^^\\n\" + ", "+\t\t\"\tString s6 = \\\"\\\"; //$NON-NLS-2$//$NON-NLS-1$\\n\" + ", "+\t\t\"\t                ^^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7fa1f750cc997db38e4530478b34090", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void test012()", "signatureAfterChange": " \tpublic void test012()", "diff": ["-\t\t\t\"    1  istore_1\\n\" + ", "-\t\t\t\"    2  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    5  invokevirtual #26 <Method java/io/PrintStream.println()V>\\n\" + ", "+\t\t\t\"    1  istore_1 [b]\\n\" + ", "+\t\t\t\"    2  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    5  invokevirtual java/io/PrintStream.println()V [26]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba7707853f80952e35a7ac079822ed4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "328c06fa136c963530115a367863b6a931384871", "commitAfterChange": "c0d735bb59d0292c44074a58c867bfe7a8670833", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 139, "signatureBeforeChange": " public void test384750w()", "signatureAfterChange": " public void test384750w()", "diff": ["-\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"\t      ^^^^^^^\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^\\n\" + ", "-\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bad71bf2fbb4e498fd3a6cd5dbd62791", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " public void test061()", "signatureAfterChange": " public void test061()", "diff": ["-\t\t\"The enum constant X.A has no corresponding case label\\n\" +", "+\t\t\"The enum constant A needs a corresponding case label in this enum switch on X\\n\" +", "-\t\t\"The enum constant X.B has no corresponding case label\\n\" +", "+\t\t\"The enum constant B needs a corresponding case label in this enum switch on X\\n\" +", "-\t\t\"The enum constant X.C has no corresponding case label\\n\" +", "+\t\t\"The enum constant C needs a corresponding case label in this enum switch on X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbf0fea7c3d47b30b8a87bcabf07342d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void testMethodReferencesElementPatternSingleTypeParameter04() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternSingleTypeParameter04() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testUnbound() [paramTypesArgs(gs)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testExtends() [paramTypesArgs(gs)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testSuper() [paramTypesArgs(gs)] ERASURE_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testUnbound() [paramTypesArgs(gs)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testExtends() [paramTypesArgs(gs)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testSuper() [paramTypesArgs(gs)] POTENTIAL_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bce039b595cdfef1f78716ebcb24eff2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": "\t \tpublic void test098()", "signatureAfterChange": "\t \tpublic void test098()", "diff": ["-\t\t\"Unsafe type operation: Should not assign expression of type AX<String> to the field p of raw type AX. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\"Type safety: The field p from the raw type AX is assigned a value of type AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\"Unsafe type operation: Should not assign expression of type AX<String> to the field q of raw type AX. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\"Type safety: The field q from the raw type AX is assigned a value of type AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\"Unsafe type operation: Should not assign expression of type AX<Object> to the field r of raw type AX. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\"Type safety: The field r from the raw type AX is assigned a value of type AX<Object>. References to generic type AX<P> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcef3611abe1bad55ea57e2619300941", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "4ce47574d95f211bec6cf02737b4ec30e386f5b1", "commitAfterChange": "6c173db4ca33e9b5b355fdac19466f82485aafe6", "methodNumberBeforeChange": 208, "methodNumberAfterChange": 208, "signatureBeforeChange": " \tpublic void test0207() throws JavaModelException", "signatureAfterChange": " \tpublic void test0207() throws JavaModelException", "diff": ["-\t\tjavadoc.setComment(\"/** JavaDoc Comment\\r\\n  */\");//$NON-NLS-1$*/", "+\t\tjavadoc.setComment(\"/** JavaDoc Comment*/\");//$NON-NLS-1$*/", "-\t\tcheckSourceRange(node, \"/** JavaDoc Comment\\r\\n  */\\r\\n  void foo(final int i) {}\", source); //$NON-NLS-1$", "-\t\tcheckSourceRange(actualJavadoc, \"/** JavaDoc Comment\\r\\n  */\", source);", "+\t\tcheckSourceRange(node, \"/** JavaDoc Comment*/\\n  void foo(final int i) {}\", source); //$NON-NLS-1$", "+\t\tcheckSourceRange(actualJavadoc, \"/** JavaDoc Comment*/\", source);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcfbe395d1bb63f5097410889d26c0ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForInterface.java", "commitBeforeChange": "314f66e76f751455a7dd539f576706f5f92aab24", "commitAfterChange": "5d2ad0b940570868aeb3a33317182334e9423c29", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tpublic void test092()", "signatureAfterChange": " \tpublic void test092()", "diff": ["-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid reference\\n\"", "+\t\t\t\t+ \"\t                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"Javadoc: Unexpected text\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd09cb815a73c0a959528466c31f020a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "06cedbd8bd184e3f34c939385e2cbddd9e3aedca", "commitAfterChange": "0d09a2966f3cebfb8d6601000e2b64259fed7dd8", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public void testBug400905_0003() throws CoreException", "signatureAfterChange": " public void testBug400905_0003() throws CoreException", "diff": ["-\t\t\t\"src/b400905/I.java boolean b400905.I.foo(Y) [foo] EXACT_MATCH\\n\" +", "-\t\t\t\"src/b400905/X.java void b400905.X.main(String[]) [y->] EXACT_MATCH\\n\" +", "-\t\t\t\"src/b400905/X.java void b400905.X.main(String[]) [y ->] EXACT_MATCH\\n\" +", "-\t\t\t\"src/b400905/X.java void b400905.X.main(String[]) [y  ->] EXACT_MATCH\"", "+\t\t\t\"src/b400905/I.java boolean b400905.I.foo(Y) [foo] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):<lambda>#1.lambda$1(b400905/Y) [y->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):<lambda>#2.lambda$2(b400905/Y) [y ->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):<lambda>#3.lambda$3(b400905/Y) [y  ->] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd70d54f93ada4dca26f838a813f8ea4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LookupTest.java", "commitBeforeChange": "dbfe97bed3f7feb8408fadbcb58741aa04540553", "commitAfterChange": "3d86d8fdd283e92da8b2fd4ec59e7d2f2b4add9f", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void test037()", "signatureAfterChange": " public void test037()", "diff": ["-\t\t\"The method Y.foo() does not override the inherited method from X since it is private to a different package.\\n\" + ", "+\t\t\"The method Y.foo() does not override the inherited method from X since it is private to a different package\\n\" + ", "-\t\t\"The method Y.bar() does not override the inherited method from X since it is private to a different package.\\n\" + ", "+\t\t\"The method Y.bar() does not override the inherited method from X since it is private to a different package\\n\" + ", "-\t\t\"This class must implement the inherited abstract method X.foo(), but cannot override it since it is not visible from Z. Either make the type abstract or make the inherited method visible.\\n\" + ", "+\t\t\"This class must implement the inherited abstract method X.foo(), but cannot override it since it is not visible from Z. Either make the type abstract or make the inherited method visible\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf4e135be99dcad0fdc48a702f6e6d04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a75ebaf0889649e7a4c140428341cde5c32ffe2e", "commitAfterChange": "157a9d28265d1a8c0af6b5ce9f61c33c050bacff", "methodNumberBeforeChange": 233, "methodNumberAfterChange": 233, "signatureBeforeChange": " \tpublic void test0224()", "signatureAfterChange": " \tpublic void test0224()", "diff": ["-\t\t\t\"1. ERROR in test\\\\cheetah\\\\G.java (at line 2)\\n\" +", "-\t\t\t\"\tpublic class G<E> {\\n\" +", "-\t\t\t\"\t             ^\\n\" +", "+\t\t\t\"1. ERROR in test\\\\cheetah\\\\G.java (at line 3)\\n\" +", "+\t\t\t\"\tprotected final Object o;\\n\" +", "+\t\t\t\"\t                       ^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bffa17a807941af9a9ac02dea7b2448f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void testLocalType3() throws JavaModelException", "signatureAfterChange": " public void testLocalType3() throws JavaModelException", "diff": ["-\t\t\"  Y1 {key=Lp7/A$288;} [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"    X {key=Lp7/X;} [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"      Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  Y1 [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"    X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"      Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c04b8337651b2221e2fa6d1e31be3052", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "2f57f8dfaade218a320169042ea7ed8e042be61d", "commitAfterChange": "870bb4f621dd0b8090426a7261d67a43a6dc9aa9", "methodNumberBeforeChange": 258, "methodNumberAfterChange": 258, "signatureBeforeChange": " public void test216b_warn_options()", "signatureAfterChange": " public void test216b_warn_options()", "diff": ["-\t\t\"1 problem (1 warning)\",", "+\t\t\"1 problem (1 warning)\\n\",", "-\t\t\"1 problem (1 warning)\",", "+\t\t\"1 problem (1 warning)\\n\",", "-\t\t\"1 problem (1 warning)\",", "+\t\t\"1 problem (1 warning)\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c05455053c9ab60c8def8a6b68b3deb8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "bb2219f73a65d80105bc92727133ff8011c4e284", "commitAfterChange": "28ac5b5368dcd64802ba668460817e2bb2a5db8e", "methodNumberBeforeChange": 225, "methodNumberAfterChange": 225, "signatureBeforeChange": " public void testBug260381_wksp2_04() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_04() throws JavaModelException", "diff": ["-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c06df50c050ed7157f263d81ffa76a26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests18.java", "commitBeforeChange": "7792c069da7693e79a187c977ea9f7a78a8fff7b", "commitAfterChange": "415b98b155644be36e3e8596750b7ffdbf4a3542", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " public void test430307() throws CoreException", "signatureAfterChange": " public void test430307() throws CoreException", "diff": ["-\t\t\t\"=Resolve/src<{X.java[X~foo~QList\\\\<QU;>;=)Lambda\\\\(Getter)=\\\"LGetter\\\\<TU;>;!144!161!152=&get!2=\\\"Ljava.util.List\\\\<TU;>;=\\\"x=\\\"I=\\\"i=\\\"TU;=\\\"LX\\\\~Getter\\\\<LX;:TU;>;.get\\\\(Ljava\\\\/util\\\\/List\\\\<TU;>;I)TU;@x!145!145!145!145!Ljava\\\\/util\\\\/List;!0!true@i!148!148!148!148!I!0!true=&@x!145!145!145!145!Ljava.util.List\\\\<LU;>;!0!true\", ", "+\t\t\t\"=Resolve/src<{X.java[X~foo~QList\\\\<QU;>;=)Getter=\\\"LGetter\\\\<TU;>;!144!161!152=&get!2=\\\"Ljava.util.List\\\\<TU;>;=\\\"x=\\\"I=\\\"i=\\\"TU;=\\\"LX\\\\~Getter\\\\<LX;:TU;>;.get\\\\(Ljava\\\\/util\\\\/List\\\\<TU;>;I)TU;@x!145!145!145!145!Ljava\\\\/util\\\\/List;!0!true@i!148!148!148!148!I!0!true=&@x!145!145!145!145!Ljava.util.List\\\\<LU;>;!0!true\", ", "-\t\t\t\"=Resolve/src<{X.java[X~foo~QList\\\\<QU;>;=)Lambda\\\\(Getter)=\\\"LGetter\\\\<TU;>;!144!161!152=&get!2=\\\"Ljava.util.List\\\\<TU;>;=\\\"x=\\\"I=\\\"i=\\\"TU;=\\\"LX\\\\~Getter\\\\<LX;:TU;>;.get\\\\(Ljava\\\\/util\\\\/List\\\\<TU;>;I)TU;@x!145!145!145!145!Ljava\\\\/util\\\\/List;!0!true@i!148!148!148!148!I!0!true=&\", ", "+\t\t\t\"=Resolve/src<{X.java[X~foo~QList\\\\<QU;>;=)Getter=\\\"LGetter\\\\<TU;>;!144!161!152=&get!2=\\\"Ljava.util.List\\\\<TU;>;=\\\"x=\\\"I=\\\"i=\\\"TU;=\\\"LX\\\\~Getter\\\\<LX;:TU;>;.get\\\\(Ljava\\\\/util\\\\/List\\\\<TU;>;I)TU;@x!145!145!145!145!Ljava\\\\/util\\\\/List;!0!true@i!148!148!148!148!I!0!true=&\", ", "-\t\t\t\"=Resolve/src<{X.java[X~foo~QList\\\\<QU;>;=)Lambda\\\\(Getter)=\\\"LGetter\\\\<TU;>;!144!161!152=&get!2=\\\"Ljava.util.List\\\\<TU;>;=\\\"x=\\\"I=\\\"i=\\\"TU;=\\\"LX\\\\~Getter\\\\<LX;:TU;>;.get\\\\(Ljava\\\\/util\\\\/List\\\\<TU;>;I)TU;@x!145!145!145!145!Ljava\\\\/util\\\\/List;!0!true@i!148!148!148!148!I!0!true=)\", ", "+\t\t\t\"=Resolve/src<{X.java[X~foo~QList\\\\<QU;>;=)Getter=\\\"LGetter\\\\<TU;>;!144!161!152=&get!2=\\\"Ljava.util.List\\\\<TU;>;=\\\"x=\\\"I=\\\"i=\\\"TU;=\\\"LX\\\\~Getter\\\\<LX;:TU;>;.get\\\\(Ljava\\\\/util\\\\/List\\\\<TU;>;I)TU;@x!145!145!145!145!Ljava\\\\/util\\\\/List;!0!true@i!148!148!148!148!I!0!true=)\", "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1588d3877dd0de97046dd06149cfe86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " public void testTypeRefAll_Throws() throws CoreException", "signatureAfterChange": " public void testTypeRefAll_Throws() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java Types all.types.ref.TestTypes.method(Types) [\tTypes method(Types param) throws \ufffd|Types|\ufffd {@492] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\tTestTypes() throws \ufffd|Types|\ufffd, RuntimeException {@767] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\tTestTypes() throws Types, \ufffd|RuntimeException|\ufffd {@774] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java Types all.types.ref.TestTypes.method(Types) [\tTypes method(Types param) throws !|Types|! {@492] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\tTestTypes() throws !|Types|!, RuntimeException {@767] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes() [\tTestTypes() throws Types, !|RuntimeException|! {@774] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c24b290e9c4edcca32e121a94b1a9e21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 578, "methodNumberAfterChange": 578, "signatureBeforeChange": " public void testBug216875d() throws CoreException", "signatureAfterChange": " public void testBug216875d() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd.field = t1.field;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\tt1.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\tt2.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\"", "+\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd.field = t1.field;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\tt1.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\tt2.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2a47176b1fff228e629e96d690a3590", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java", "commitBeforeChange": "301ea60f1c016cdc6dab5bb31b25b7537bf7ad1b", "commitAfterChange": "1033649cfcace48dcb2710381864f07b9c4be6ec", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void test003_task_tags_options()", "signatureAfterChange": " public void test003_task_tags_options()", "diff": ["-\t\t\"[FIXME,message contents,HIGH]\\n\" +", "-\t\t\"[TODO,message contents,NORMAL]\\n\" +", "-\t\t\"[XXX,message contents,NORMAL]\\n\");", "+\t\t\"[FIXME, message contents,HIGH]\\n\" +", "+\t\t\"[TODO, message contents,NORMAL]\\n\" +", "+\t\t\"[XXX, message contents,NORMAL]\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2e510c01de49418c448f1589053d3cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 651, "methodNumberAfterChange": 651, "signatureBeforeChange": " \tpublic void test647()", "signatureAfterChange": " \tpublic void test647()", "diff": ["-\t\t\t\"Type safety: Outer.Inner is a raw type. References to generic type Outer<T>.Inner<U> should be parameterized\\n\" + ", "+\t\t\t\"Outer.Inner is a raw type. References to generic type Outer<T>.Inner<U> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Outer is a raw type. References to generic type Outer<T> should be parameterized\\n\" + ", "+\t\t\t\"Outer is a raw type. References to generic type Outer<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Outer.Inner is a raw type. References to generic type Outer<T>.Inner<U> should be parameterized\\n\" + ", "+\t\t\t\"Outer.Inner is a raw type. References to generic type Outer<T>.Inner<U> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c426e20568aca7c3af1c6b56a4238fe8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "      \tpublic void test070()", "signatureAfterChange": "      \tpublic void test070()", "diff": ["-\t\t\t\"    1  aload_1 [local_1]\\n\" + ", "-\t\t\t\"    2  iload_2 [local_2]\\n\" + ", "-\t\t\t\"    3  invokespecial java/lang/Enum.<init>(Ljava/lang/String;I)V [25]\\n\" + ", "+\t\t\t\"    1  aload_1\\n\" + ", "+\t\t\t\"    2  iload_2\\n\" + ", "+\t\t\t\"    3  invokespecial java.lang.Enum(java.lang.String, int) [25]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c42b435cdf8ed40052d174eab877b2a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "97e6eff65e04dce7acb3a4b10558d6e9ea7e0a37", "commitAfterChange": "c14519ea32a4ea1ee3309a157338e6ed1eb4f28f", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "  \tpublic void test086()", "signatureAfterChange": "  \tpublic void test086()", "diff": ["-\t\t\t\t\t+ \"\t * @see <a href=\\\"http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html\\\">Valid URL link reference</a>\\n\"", "-\t\t\t\t\t+ \"\t * @see <A HREF = \\\"http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html\\\">Valid URL link reference</A>\\n\"", "-\t\t\t\t\t+ \"\t * @see <a hReF = \\\"http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html\\\">Valid URL link reference</A>\\n\"", "+\t\t\t\t\t+ \"\t * @see <a href=\\\"http://download.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html\\\">Valid URL link reference</a>\\n\"", "+\t\t\t\t\t+ \"\t * @see <A HREF = \\\"http://download.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html\\\">Valid URL link reference</A>\\n\"", "+\t\t\t\t\t+ \"\t * @see <a hReF = \\\"http://download.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html\\\">Valid URL link reference</A>\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4c22028852ede306acb077f2cee769b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void testMethodReferencesElementPatternSingleParamArguments04() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternSingleParamArguments04() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testUnbound() [complete(new String(), gs)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testExtends() [complete(new Throwable(), gs)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testSuper() [complete(new RuntimeException(), gs)] ERASURE_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testUnbound() [complete(new String(), gs)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testExtends() [complete(new Throwable(), gs)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testSuper() [complete(new RuntimeException(), gs)] POTENTIAL_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c665faf425ff760c0dfe526e9c75df39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " public void test098()", "signatureAfterChange": " public void test098()", "diff": ["-\t\t\"The enum constant Colors.BLACK has no corresponding case label\\n\" +", "+\t\t\"The enum constant BLACK needs a corresponding case label in this enum switch on Colors\\n\" +", "-\t\t\"The enum constant Colors.RED has no corresponding case label\\n\" +", "+\t\t\"The enum constant RED needs a corresponding case label in this enum switch on Colors\\n\" +", "-\t\t\"The enum constant Colors.WHITE has no corresponding case label\\n\" +", "+\t\t\"The enum constant WHITE needs a corresponding case label in this enum switch on Colors\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c747b4035a071716e09708bb5fce00a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 939, "methodNumberAfterChange": 939, "signatureBeforeChange": " public void test0929()", "signatureAfterChange": " public void test0929()", "diff": ["-\t\t\"Type safety: Unchecked invocation allOf(Class<capture-of ? extends Enum>) of the generic method allOf(Class<E>) of type X\\n\" + ", "+\t\t\"Type safety: Unchecked invocation allOf(Class<capture#1-of ? extends Enum>) of the generic method allOf(Class<E>) of type X\\n\" + ", "-\t\t\"Type mismatch: cannot convert from Collection<capture-of ? extends Enum> to Collection<E>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Collection<capture#1-of ? extends Enum> to Collection<E>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from Collection<capture-of ? extends Enum> to Collection<E>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Collection<capture#2-of ? extends Enum> to Collection<E>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7d4a4cfe951305aaf73156fe5d24fc5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiProjectTests.java", "commitBeforeChange": "b6c3ef88a42ce595faa4897ed3f3cb935e51c7fb", "commitAfterChange": "80d11a1b2e7fe69d0ca6c0214575c56a017a1140", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void testCycle1() throws JavaModelException", "signatureAfterChange": " \t \tpublic void testCycle1() throws JavaModelException", "diff": ["-\t\t\texpectingOnlySpecificProblemFor(p1,new Problem(\"p1\", \"A cycle was detected in the classpath of project: P1\", p1));//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\texpectingOnlySpecificProblemFor(p2,new Problem(\"p2\", \"A cycle was detected in the classpath of project: P2\", p2));//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\texpectingOnlySpecificProblemFor(p3,new Problem(\"p3\", \"A cycle was detected in the classpath of project: P3\", p3));//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingOnlySpecificProblemFor(p1,new Problem(\"p1\", \"A cycle was detected in the build path of project: P1\", p1));//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingOnlySpecificProblemFor(p2,new Problem(\"p2\", \"A cycle was detected in the build path of project: P2\", p2));//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingOnlySpecificProblemFor(p3,new Problem(\"p3\", \"A cycle was detected in the build path of project: P3\", p3));//$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8931fead333e0ca48115f67084b4f89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DualParseSyntaxErrorTest.java", "commitBeforeChange": "fd230c4ee1ceefd6a4812ebc7de0e734ce8df73c", "commitAfterChange": "e752367433ca417806253a6753c55772428a8bf6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void test07()", "signatureAfterChange": " public void test07()", "diff": ["-\t\t\"1. ERROR in <test7> (at line 3)\\n\" + ", "-\t\t\"\tvoid foo() {  \t\t\t\t\t\t\t\\n\" + ", "-\t\t\"\t           ^\\n\" + ", "+\t\t\"1. ERROR in <test7> (at line 6)\\n\" + ", "+\t\t\"\tSystem.out.println();\t\t\t\t\t\\n\" + ", "+\t\t\"\t                    ^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8f249f4ec0f2b00258545465fca09fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " \tpublic void test099()", "signatureAfterChange": " \tpublic void test099()", "diff": ["-\t\t\t\"    [inner class info: #30 X$MyAnon, outer class info: #2 X\\n\" + ", "+\t\t\t\"    [inner class info: #29 X$MyAnon, outer class info: #1 X\\n\" + ", "-\t\t\t\"    [inner class info: #70 X$I, outer class info: #2 X\\n\" + ", "-\t\t\t\"     inner name: #71 I, accessflags: 1545 public abstract static ]\"; ", "+\t\t\t\"    [inner class info: #69 X$I, outer class info: #1 X\\n\" + ", "+\t\t\t\"     inner name: #71 I, accessflags: 1545 public abstract static ]\\n\"; "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9882a1e8ffc47bbdd10b10599ce477e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "a00b91e363390d5872f24709421a2a2b1249ea30", "commitAfterChange": "61bf91bb0112a7323235a8711e82564a6109221c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void test007()", "signatureAfterChange": "  \tpublic void test007()", "diff": ["-\t\t\t\t\"class B extends A { short get(short i, short s) {return i; } }\\n\"", "+\t\t\t\t\"class B extends A { @Override short get(short i, short s) {return i; } }\\n\"", "-\t\t\t\"\tclass B extends A { short get(short i, short s) {return i; } }\\r\\n\" + ", "-\t\t\t\"\t                          ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\tclass B extends A { @Override short get(short i, short s) {return i; } }\\r\\n\" + ", "+\t\t\t\"\t                                    ^^^^^^^^^^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9a39da906657ca284a64d25450171df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "63c8a2ec89eae9c5f71458dc20e19fe16c16341b", "commitAfterChange": "1380663d32eef4fe51daddb994c3d2197de60d56", "methodNumberBeforeChange": 233, "methodNumberAfterChange": 233, "signatureBeforeChange": " \tpublic void test0224()", "signatureAfterChange": " \tpublic void test0224()", "diff": ["-\t\t\t\"1. ERROR in test\\\\cheetah\\\\G.java (at line 2)\\n\" +", "-\t\t\t\"\tpublic class G<E> {\\n\" +", "-\t\t\t\"\t             ^\\n\" +", "+\t\t\t\"1. ERROR in test\\\\cheetah\\\\G.java (at line 3)\\n\" +", "+\t\t\t\"\tprotected final Object o;\\n\" +", "+\t\t\t\"\t                       ^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9e8d0bcd696c6981fe5bc1aa855fdd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "dee823e8e9454e3bbc323b61e0e66446bfc3e48a", "commitAfterChange": "c903817ea1b3b3294907f8d4a93524af350dfca3", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void test017()", "signatureAfterChange": " \tpublic void test017()", "diff": ["-\t\t\t\t\"\tpublic final <E extends T> boolean select(E obj) { return true; }\\n\" + ", "+\t\t\t\t\"\tpublic final <E extends T> boolean selekt(E obj) { return true; }\\n\" + ", "-\t\t\t\t\"\t\t\tif (select(obj)) okElements.add(obj);\\n\" +", "+\t\t\t\t\"\t\t\tif (selekt(obj)) okElements.add(obj);\\n\" +", "-\t\t\t\t\"\t<E extends T> boolean select(E obj);\\n\" +", "+\t\t\t\t\"\t<E extends T> boolean selekt(E obj);\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca0bb71311f269995d24f0ce239cd4cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void testBug83127b()", "signatureAfterChange": " \tpublic void testBug83127b()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cadf85a0426beb3eb8616f9851f5a43f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2cfaf33b626413a70eea1530c77695e81ac081f", "commitAfterChange": "89847a0c1a06590b3bbeee9528d77f57e2f8453c", "methodNumberBeforeChange": 531, "methodNumberAfterChange": 531, "signatureBeforeChange": "\t\t\t \tpublic void test0526()", "signatureAfterChange": "\t\t\t \tpublic void test0526()", "diff": ["-\t\t\t\"Type safety: The cast from Object to T is actually checking against the erased type Object\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to T\\n\" + ", "-\t\t\t\"Type safety: The cast from Object to T is actually checking against the erased type Object\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to T\\n\" + ", "-\t\t\t\"Type safety: The cast from Object to T is actually checking against the erased type Object\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to T\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb8c4a475d077a83cddd5b85f266d590", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DualParseSyntaxErrorTest.java", "commitBeforeChange": "fd230c4ee1ceefd6a4812ebc7de0e734ce8df73c", "commitAfterChange": "e752367433ca417806253a6753c55772428a8bf6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void test10()", "signatureAfterChange": " public void test10()", "diff": ["-\t\t\"1. ERROR in <test10> (at line 3)\\n\" + ", "-\t\t\"\tvoid foo() {  \t\t\t\t\t\t\t\\n\" + ", "-\t\t\"\t           ^\\n\" + ", "+\t\t\"1. ERROR in <test10> (at line 6)\\n\" + ", "+\t\t\"\tSystem.out.println();\t\t\t\t\t\\n\" + ", "+\t\t\"\t                    ^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbf85ddb08dce4a61f2895e9662e4610", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "037cfa6bf481cd6ec3ad222bceff2d82fb8a8179", "commitAfterChange": "30d1d48bfa7e296fbeab8a3626c28e1130f44500", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void testBinary06b()", "signatureAfterChange": " \tpublic void testBinary06b()", "diff": ["-\t\t\t\t\"Null constraint mismatch: The type \\'@Nullable String\\' is not a valid substitute for the type parameter \\'T\\' which is constrained as \\'@NonNull\\'\\n\" + ", "+\t\t\t\t\"Null constraint mismatch: The type \\'@Nullable String\\' is not a valid substitute for the type parameter \\'@NonNull T extends @NonNull Object\\'\\n\" + ", "-\t\t\t\t\"Null constraint mismatch: The type \\'@NonNull String\\' is not a valid substitute for the type parameter \\'W\\' which is constrained as \\'@Nullable\\'\\n\" + ", "+\t\t\t\t\"Null constraint mismatch: The type \\'@NonNull String\\' is not a valid substitute for the type parameter \\'@Nullable W extends Object\\'\\n\" + ", "-\t\t\t\t\"Null constraint mismatch: The type '@NonNull Object' is not a valid substitute for the type parameter 'V' which is constrained as '@Nullable'\\n\" + ", "+\t\t\t\t\"Null constraint mismatch: The type \\'@NonNull Object\\' is not a valid substitute for the type parameter \\'@Nullable V extends @Nullable Object\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc2ef66e7ee67d195b433d2321dcc297", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 102, "signatureBeforeChange": "\t \tpublic void test098()", "signatureAfterChange": "\t \tpublic void test098()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\"\tax.p = new AX<String>();\\n\" + ", "-\t\t\"\t^^^^\\n\" + ", "-\t\t\"Type safety: The field p from the raw type AX is assigned a value of type AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\"\tax.q = new AX<String>();\\n\" + ", "-\t\t\"\t^^^^\\n\" + ", "-\t\t\"Type safety: The field q from the raw type AX is assigned a value of type AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\"\tax.r = new AX<Object>();\\n\" + ", "-\t\t\"\t^^^^\\n\" + ", "-\t\t\"Type safety: The field r from the raw type AX is assigned a value of type AX<Object>. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\"\tax.s = new AX<String>();\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type mismatch: cannot convert from AX<String> to BX\\n\" + ", "-\t\t\"----------\\n\",", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tax.p = new AX<String>();\\n\" + ", "+\t\t\t\"\t   ^\\n\" + ", "+\t\t\t\"Type safety: The field p from the raw type AX is assigned a value of type AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tax.q = new AX<String>();\\n\" + ", "+\t\t\t\"\t   ^\\n\" + ", "+\t\t\t\"Type safety: The field q from the raw type AX is assigned a value of type AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tax.r = new AX<Object>();\\n\" + ", "+\t\t\t\"\t   ^\\n\" + ", "+\t\t\t\"Type safety: The field r from the raw type AX is assigned a value of type AX<Object>. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tax.s = new AX<String>();\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from AX<String> to BX\\n\" + ", "+\t\t\t\"----------\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc37172938390c8120940d73840498a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 891, "methodNumberAfterChange": 891, "signatureBeforeChange": " public void test0884()", "signatureAfterChange": " public void test0884()", "diff": ["-\t\t\"Type mismatch: cannot convert from Class<capture-of ? extends X> to String\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Class<capture#1-of ? extends X> to String\\n\" + ", "-\t\t\"Cannot cast from capture-of ? extends X to String\\n\" + ", "+\t\t\"Cannot cast from capture#2-of ? extends X to String\\n\" + ", "-\t\t\"Type safety: Unchecked invocation getDefault(Class<capture-of ? extends X>) of the generic method getDefault(Class<T>) of type X<C>\\n\" + ", "+\t\t\"Type safety: Unchecked invocation getDefault(Class<capture#2-of ? extends X>) of the generic method getDefault(Class<T>) of type X<C>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc79760e4075d682f2e6d40ec5e168c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "77be59ea5d67230fd212d874b96aeadaa71fd38c", "commitAfterChange": "496ec362de1eac6b25f53a35b2409254a0390a5f", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void testRenameJarFile1() throws CoreException", "signatureAfterChange": " public void testRenameJarFile1() throws CoreException", "diff": ["-\t\t\t\"\t/P/myLib.jar[-]: {MOVED_TO(/P/myLib2.jar [in P])}\\n\" + ", "-\t\t\t\"\t/P/myLib2.jar[+]: {MOVED_FROM(/P/myLib.jar [in P])}\\n\" + ", "+\t\t\t\"\tmyLib.jar[-]: {MOVED_TO(myLib2.jar [in P])}\\n\" + ", "+\t\t\t\"\tmyLib2.jar[+]: {MOVED_FROM(myLib.jar [in P])}\\n\" + ", "-\t\t\t\"\t/P/myLib2.jar\\n\" + ", "+\t\t\t\"\tmyLib2.jar\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccd6961671684d361f599f2c861eb7de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "e92324cecc3fbf731a68d99288f72318b17cf1ea", "commitAfterChange": "9832689930749c0e863f1bb11ec756d41ad5c5d4", "methodNumberBeforeChange": 142, "methodNumberAfterChange": 144, "signatureBeforeChange": " public void testTypeReferenceNotInClasspath() throws CoreException", "signatureAfterChange": " public void testTypeReferenceNotInClasspath() throws CoreException", "diff": ["-\t\t\"src/p/A.java p.A.x [X]\\n\" +", "-\t\t\"src/p/A.java p.A(X) [X]\\n\" +", "-\t\t\"src/p/A.java p.A.foo(int, String, X) -> void [X]\\n\" +", "-\t\t\"src/p/X.java p.X() [X]\\n\" +", "-\t\t\"src/p/X.java p.X.foo(int, String, X) -> void [X]\\n\" +", "-\t\t\"src/p/Y.java p.Y [X]\\n\" +", "-\t\t\"src/p/Z.java p.Z.foo(int, String, X) -> void [X]\",", "+\t\t\"src/p/A.java p.A.x [X]\\n\" + ", "+\t\t\"src/p/A.java p.A(X) [X]\\n\" + ", "+\t\t\"src/p/A.java void p.A.foo(int, String, X) [X]\\n\" + ", "+\t\t\"src/p/X.java p.X() [X]\\n\" + ", "+\t\t\"src/p/X.java void p.X.foo(int, String, X) [X]\\n\" + ", "+\t\t\"src/p/Y.java p.Y [X]\\n\" + ", "+\t\t\"src/p/Z.java void p.Z.foo(int, String, X) [X]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccd848f7019765dc6c95128ef7c04f32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LocalVariableTest.java", "commitBeforeChange": "bce0dbd9dd489d3038652b337b4b76bb1f2246a4", "commitAfterChange": "f04ae71cc7d18b0e34f184a3124e4f7f58dafcf3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void test017()", "signatureAfterChange": " public void test017()", "diff": ["-\t\t\"The parameter value is never read\\n\" +", "+\t\t\"The value of the parameter value is not used\\n\" +", "-\t\t\"The parameter value is never read\\n\" +", "+\t\t\"The value of the parameter value is not used\\n\" +", "-\t\t\"The parameter value is never read\\n\" +", "+\t\t\"The value of the parameter value is not used\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd30c995d2cc360586b6d105b10f9eaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " public void testTypeRefGenericAll01_WildcardBound() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAll01_WildcardBound() throws CoreException", "diff": ["-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super \ufffd|Types|\ufffd>> {@178] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic.field [\tGeneric<? extends \ufffd|Types|\ufffd, ?, ?> field;@207] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic.clazz [\tClass<? extends \ufffd|Exception|\ufffd> clazz;@270] EXACT_MATCH\"", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super !|Types|!>> {@178] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic.field [\tGeneric<? extends !|Types|!, ?, ?> field;@207] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic.clazz [\tClass<? extends !|Exception|!> clazz;@270] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce14fe76351a5650c9d9b406d2405ce4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " public void testTypeRefQualifiedAll_Catch() throws CoreException", "signatureAfterChange": " public void testTypeRefQualifiedAll_Catch() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\t} catch (\ufffd|RuntimeException|\ufffd e) {@322] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java type.def.Bug all.types.ref.TestTypes.bar(type.def.Bug) [\t\tcatch (\ufffd|type.def.Types|\ufffd ex) {}@751] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java type.def.Bug all.types.ref.TestTypes.bar(type.def.Bug) [\t\tcatch (\ufffd|Exception|\ufffd ex) {}@782] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\t} catch (!|RuntimeException|! e) {@322] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java type.def.Bug all.types.ref.TestTypes.bar(type.def.Bug) [\t\tcatch (!|type.def.Types|! ex) {}@751] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java type.def.Bug all.types.ref.TestTypes.bar(type.def.Bug) [\t\tcatch (!|Exception|! ex) {}@782] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cee7f2294d30e13a6a63dd49756ab347", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void testBug83127c()", "signatureAfterChange": " \tpublic void testBug83127c()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0a14a5cc2a0d0691b7f2e5dd3fe3553", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 726, "methodNumberAfterChange": 726, "signatureBeforeChange": " public void test720()", "signatureAfterChange": " public void test720()", "diff": ["-\t\t\"Type safety: Foo is a raw type. References to generic type Foo<T> should be parameterized\\n\" + ", "+\t\t\"Foo is a raw type. References to generic type Foo<T> should be parameterized\\n\" + ", "-\t\t\"Type safety: Foo is a raw type. References to generic type Foo<T> should be parameterized\\n\" + ", "+\t\t\"Foo is a raw type. References to generic type Foo<T> should be parameterized\\n\" + ", "-\t\t\"Type safety: Foo is a raw type. References to generic type Foo<T> should be parameterized\\n\" + ", "+\t\t\"Foo is a raw type. References to generic type Foo<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0b5b7404010524c421b79a6149d052e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 510, "methodNumberAfterChange": 510, "signatureBeforeChange": " \tpublic void test506()", "signatureAfterChange": " \tpublic void test506()", "diff": ["-\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Comparator is a raw type. References to generic type Comparator<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparator is a raw type. References to generic type Comparator<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<E> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1d2680f2094f7430eaec55c060d6582", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tpublic void test054()", "signatureAfterChange": "  \tpublic void test054()", "diff": ["-\t\t\t\"     8  invokestatic X.boom() : boolean  [27]\\n\" + ", "+\t\t\t\"     8  invokestatic X.boom() : boolean [26]\\n\" + ", "-\t\t\t\"    14  getstatic java.lang.System.out : java.io.PrintStream [33]\\n\" + ", "+\t\t\t\"    14  getstatic java.lang.System.out : java.io.PrintStream [28]\\n\" + ", "-\t\t\t\"    18  invokevirtual java.io.PrintStream.println(int) : void  [39]\\n\" + ", "+\t\t\t\"    18  invokevirtual java.io.PrintStream.println(int) : void [34]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1eac9bed40685754536131e566553c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elementutils/ElementUtilsProc.java", "commitBeforeChange": "57b3e1abeb63c771e6bdc37b05f8550c215d97c4", "commitAfterChange": "8263b1bf4e0979f16664b3ec7a3f63f9c444d8c1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate boolean examineGetDocComment()", "signatureAfterChange": " \tprivate boolean examineGetDocComment()", "diff": ["-\t\t\t\t\"        This line starts, contains\\tand ends with a tab\\t\\n\" +", "-\t\t\t\t\"                 This line starts with a space, tab, space, tab, space\\n\");", "+\t\t\t\t\"\\tThis line starts, contains\\tand ends with a tab\\t\\n\" +", "+\t\t\t\t\" \\t \\t This line starts with a space, tab, space, tab, space\\n\");", "-\t\tnameToDoc.put(\"m\", \"                Method\\tm\\n\");", "+\t\tnameToDoc.put(\"m\", \"\\t\\tMethod\\tm\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2351d2d1ac3e7da5b48839781992506", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 365, "methodNumberAfterChange": 365, "signatureBeforeChange": " \tpublic void test363()", "signatureAfterChange": " \tpublic void test363()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 6)\\r\\n\" + ", "-\t\t\"\tm_values = values.entrySet();\\r\\n\" + ", "-\t\t\"\t           ^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type mismatch: cannot convert from Set<Map.Entry<Integer,?>> to Set<Map.Entry<Integer,?>>\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tm_values = values.entrySet();\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from Set<Map.Entry<Integer,capture-of ?>> to Set<Map.Entry<Integer,?>>\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d354b4155180acc730446cf71defe994", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " public void testBug400905_0023() throws CoreException", "signatureAfterChange": " public void testBug400905_0023() throws CoreException", "diff": ["-\t\t\t\"src/test/Test.java int test.I.thrice(int) [thrice] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/test/Test.java int test.X.i:<lambda>#1.lambda$1(int) [(x) /* field */ ->] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/test/Test.java int void test.X.main(String[]):<lambda>#2.lambda$2(int) [(x) /*call*/ ->] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/test/Test.java int void test.X.main(String[]):<lambda>#3.lambda$3(int) [(x) /* local */ ->] EXACT_MATCH\"", "+\t\t\t\t\t\"src/test/Test.java int test.I.thrice(int) [thrice] EXACT_MATCH\\n\" + ", "+\t\t\t\t\t\"src/test/Test.java int test.X.i:Lambda(I).thrice(int) [(x) /* field */ ->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\t\"src/test/Test.java int void test.X.main(String[]):Lambda(I).thrice(int) [(x) /*call*/ ->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\t\"src/test/Test.java int void test.X.main(String[]):Lambda(I).thrice(int) [(x) /* local */ ->] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d366980af906ace5b3197624c47283e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/EvaluationContext.java", "commitBeforeChange": "bf1ba1c1732b0be00fbd03cfd8ae394b6a169e63", "commitAfterChange": "debb51f61b0b4a5b1a6926f67a451ba72125546c", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public static String getCodeSnippetSource()", "signatureAfterChange": " public static String getCodeSnippetSource()", "diff": ["-\t\t\"public void setResult(Object resultValue, Class resultType) {\\n\" + //$NON-NLS-1$", "-\t\t\"\tthis.resultValue = resultValue;\\n\" + //$NON-NLS-1$", "-\t\t\"\tthis.resultType = resultType;\\n\" + //$NON-NLS-1$", "+\t\t\"public void setResult(Object someResultValue, Class someResultType) {\\n\" + //$NON-NLS-1$", "+\t\t\"\tthis.resultValue = someResultValue;\\n\" + //$NON-NLS-1$", "+\t\t\"\tthis.resultType = someResultType;\\n\" + //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d49bfac27278555677c258fb3129e8b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void testMethodReferencesElementPatternMultipleTypeParameter04() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternMultipleTypeParameter04() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testUnbound() [paramTypesArgs(new Single<Object>(), new Single<Object>(), new Single<Object>(), gm)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [paramTypesArgs(new Single<Object>(), new Single<Throwable>(), new Single<Exception>(), gm)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [paramTypesArgs(new Single<Object>(), new Single<RuntimeException>(), new Single<RuntimeException>(), gm)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testUnbound() [paramTypesArgs(new Single<Object>(), new Single<Object>(), new Single<Object>(), gm)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [paramTypesArgs(new Single<Object>(), new Single<Throwable>(), new Single<Exception>(), gm)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [paramTypesArgs(new Single<Object>(), new Single<RuntimeException>(), new Single<RuntimeException>(), gm)] POTENTIAL_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d53066e53060130d3d0d00cf32fb0eb8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "0bd04abb8575a021cf8905c773ca1d2199f31c53", "commitAfterChange": "1bf6db68524b43c8e140351de0b8d9940aee5925", "methodNumberBeforeChange": 451, "methodNumberAfterChange": 451, "signatureBeforeChange": " \tpublic void test449()", "signatureAfterChange": " \tpublic void test449()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "-\t\t\t\"\tX<String>.Inner<Integer> d4 = new X.Inner<Integer>();\\n\" + ", "-\t\t\t\"\t                              ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The expression of type X.Inner<Integer> needs unchecked conversion to conform to X<String>.Inner<Integer>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\tX<String>.Inner<Integer> d4 = new X.Inner<Integer>();\\n\" + ", "-\t\t\t\"\t                                  ^^^^^^^\\n\" + ", "-\t\t\t\"The member type X.Inner<Integer> must be qualified with a parameterized type, since it is not static\\n\" + ", "-\t\t\t\"----------\\n\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tX<String>.Inner<Integer> d4 = new X.Inner<Integer>();\\n\" + ", "+\t\t\"\t                         ^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from X.Inner<Integer> to X<String>.Inner<Integer>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tX<String>.Inner<Integer> d4 = new X.Inner<Integer>();\\n\" + ", "+\t\t\"\t                                  ^^^^^^^\\n\" + ", "+\t\t\"The member type X.Inner<Integer> must be qualified with a parameterized type, since it is not static\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5bd18f927ecae6c90b487b6120faa36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "7b4e4fcfdd4d04f13dc930d8b751701d20daa4d2", "commitAfterChange": "a8739597ebb6a7bc2be662454643b96202480dc7", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \t\t public void test027()", "signatureAfterChange": " \t\t public void test027()", "diff": ["-\t\t        + \" -cp \\\"\" + OUTPUT_DIR + \"[+OK2.java\" + File.pathSeparator + \"-KO.java]\" + File.pathSeparator", "-\t\t        + OUTPUT_DIR + File.separator + \"p1[~Warn.java]\\\"\"", "+\t\t        + \" -cp \\\"\" + OUTPUT_DIR + \"[+OK2\" + File.pathSeparator + \"-KO]\" + File.pathSeparator", "+\t\t        + OUTPUT_DIR + File.separator + \"p1[~Warn]\\\"\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6deca3691ad70ad469a097ec8905b89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test015()", "signatureAfterChange": " public void test015()", "diff": ["-\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    11  ldc <String \\\"SUCCESS\\\"> [23]\\n\" + ", "-\t\t\"    13  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    11  ldc <String \\\"SUCCESS\\\"> [22]\\n\" + ", "+\t\t\"    13  invokevirtual java.io.PrintStream.println(java.lang.String) : void [24]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7679544c0d789ccfa554dc84b1d98ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "4ce47574d95f211bec6cf02737b4ec30e386f5b1", "commitAfterChange": "6c173db4ca33e9b5b355fdac19466f82485aafe6", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": " \tpublic void test0115() throws JavaModelException", "signatureAfterChange": " \tpublic void test0115() throws JavaModelException", "diff": ["-\t\tString expectedSource = \"try {\\r\\n\" +//$NON-NLS-1$", "-\t\t\t \"\t\t\treturn 2;\\r\\n\" +//$NON-NLS-1$", "-\t\t\t \"\t\t} catch(Exception e) {\\r\\n\" +//$NON-NLS-1$", "+\t\tString expectedSource = \"try {\\n\" +//$NON-NLS-1$", "+\t\t\t \"\t\t\treturn 2;\\n\" +//$NON-NLS-1$", "+\t\t\t \"\t\t} catch(Exception e) {\\n\" +//$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d79dbdb171f7e3fe12066460112bf6d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \t \tpublic void test058()", "signatureAfterChange": " \t \tpublic void test058()", "diff": ["-\t\t\t\"     2  getstatic java/lang/System.out Ljava/io/PrintStream; [26]\\n\" + ", "+\t\t\t\"     2  getstatic java.lang.System.out : java.io.PrintStream [26]\\n\" + ", "-\t\t\t\"     6  invokevirtual java/io/PrintStream.println(I)V [32]\\n\" + ", "+\t\t\t\"     6  invokevirtual java.io.PrintStream.println(int) : void  [32]\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 10] local: i index: 0 type: I\\n\";", "+\t\t\t\"        [pc: 2, pc: 10] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d925c879a73c2083f5eb05bd093b406c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void testBug83127c()", "signatureAfterChange": " \tpublic void testBug83127c()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d94c7abbdfac30934e2fd1aaef392caf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java", "commitBeforeChange": "8881369a7d0e4bdf41211abd8b5386c3693abb68", "commitAfterChange": "bf2117b5b91f53fb296d1eef53e3b05f16ac6939", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " public void testNestedSwitches()", "signatureAfterChange": " public void testNestedSwitches()", "diff": ["-\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum constants are permitted\\n\" + ", "+\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum variables are permitted\\n\" + ", "-\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum constants are permitted\\n\" + ", "+\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum variables are permitted\\n\" + ", "-\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum constants are permitted\\n\" + ", "+\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum variables are permitted\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d97a573f31982a225b713526c3cb73a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "11ed38e74464eb2e7d149f52bb984520286f9a3a", "commitAfterChange": "ad8b3feb3cd31efef290116a3645f74aac42c9f3", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tpublic void test036()", "signatureAfterChange": "  \tpublic void test036()", "diff": ["-\t\t\t\t+ \"inr cannot be resolved (or is not a valid type) for the argument a of the method p_foo\\n\"", "+\t\t\t\t+ \"inr cannot be resolved (or is not a valid type) for the parameter a of the method p_foo\\n\"", "-\t\t\t\t+ \"inx cannot be resolved (or is not a valid type) for the argument b of the method p_foo\\n\"", "+\t\t\t\t+ \"inx cannot be resolved (or is not a valid type) for the parameter b of the method p_foo\\n\"", "-\t\t\t\t+ \"inq cannot be resolved (or is not a valid type) for the argument c of the method p_foo\\n\"", "+\t\t\t\t+ \"inq cannot be resolved (or is not a valid type) for the parameter c of the method p_foo\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da5c765fec16b03bfc4f7d7ab8eeffe4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic void test065()", "signatureAfterChange": " \tpublic void test065()", "diff": ["-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db0a7c39422d250012700cae7a9d0714", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LookupTest.java", "commitBeforeChange": "bce0dbd9dd489d3038652b337b4b76bb1f2246a4", "commitAfterChange": "f04ae71cc7d18b0e34f184a3124e4f7f58dafcf3", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " public void test105()", "signatureAfterChange": " public void test105()", "diff": ["-\t\t\"The field A.x is never read locally\\n\" + ", "+\t\t\"The value of the field A.x is not used\\n\" + ", "-\t\t\"The field A.c is never read locally\\n\" + ", "+\t\t\"The value of the field A.c is not used\\n\" + ", "-\t\t\"The field A.C.x is never read locally\\n\" + ", "+\t\t\"The value of the field A.C.x is not used\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db7d856f989fd126b7f5073ad3a0419c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "17fcd420e0756889bcaffeff4cf983b2cff84a3e", "commitAfterChange": "e02893535f42359d54aa8b408faa8e8269b32442", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public void test045()", "signatureAfterChange": " public void test045()", "diff": ["-\t\t?\t\t\t\t\"  // Method descriptor #6 ()V\\n\" + ", "-\t\t\t\t\"  // Stack: 2, Locals: 7\\n\" + ", "-\t\t\t\t\"  public void save();\\n\" + ", "-\t\t\t\t\"     0  aconst_null\\n\" + ", "-\t\t\t\t\"     1  astore_1 [warnings]\\n\" + ", "-\t\t\t\t\"     2  aconst_null\\n\" + ", "-\t\t\t\t\"     3  astore_2 [contexts]\\n\" + ", "-\t\t\t\t\"     4  getstatic java.lang.System.out : java.io.PrintStream [15]\\n\" + ", "-\t\t\t\t\"     7  ldc <String \\\"[try]\\\"> [21]\\n\" + ", "-\t\t\t\t\"     9  invokevirtual java.io.PrintStream.print(java.lang.String) : void [23]\\n\" + ", "-\t\t\t\t\"    12  getstatic java.lang.System.out : java.io.PrintStream [15]\\n\" + ", "-\t\t\t\t\"    15  aload_1 [warnings]\\n\" + ", "-\t\t\t\t\"    16  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [29]\\n\" + ", "-\t\t\t\t\"    19  iconst_0\\n\" + ", "-\t\t\t\t\"    20  istore 5 [var]\\n\" + ", "-\t\t\t\t\"    22  getstatic java.lang.System.out : java.io.PrintStream [15]\\n\" + ", "-\t\t\t\t\"    25  ldc <String \\\"[finally]\\\"> [32]\\n\" + ", "-\t\t\t\t\"    27  invokevirtual java.io.PrintStream.print(java.lang.String) : void [23]\\n\" + ", "-\t\t\t\t\"    30  aconst_null\\n\" + ", "-\t\t\t\t\"    31  astore 6 [o]\\n\" + ", "-\t\t\t\t\"    33  aload 6 [o]\\n\" + ", "-\t\t\t\t\"    35  invokevirtual java.lang.Object.toString() : java.lang.String [34]\\n\" + ", "-\t\t\t\t\"    38  pop\\n\" + ", "-\t\t\t\t\"    39  return\\n\" + ", "-\t\t\t\t\"    40  astore_3 [npe]\\n\" + ", "-\t\t\t\t\"    41  getstatic java.lang.System.out : java.io.PrintStream [15]\\n\" + ", "-\t\t\t\t\"    44  ldc <String \\\"[npe]\\\"> [38]\\n\" + ", "-\t\t\t\t\"    46  invokevirtual java.io.PrintStream.print(java.lang.String) : void [23]\\n\" + ", "-\t\t\t\t\"    49  getstatic java.lang.System.out : java.io.PrintStream [15]\\n\" + ", "-\t\t\t\t\"    52  aload_2 [contexts]\\n\" + ", "-\t\t\t\t\"    53  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [29]\\n\" + ", "-\t\t\t\t\"    56  goto 19\\n\" + ", "-\t\t\t\t\"    59  astore_1 [e]\\n\" + ", "-\t\t\t\t\"    60  getstatic java.lang.System.out : java.io.PrintStream [15]\\n\" + ", "-\t\t\t\t\"    63  ldc <String \\\"[e]\\\"> [40]\\n\" + ", "-\t\t\t\t\"    65  invokevirtual java.io.PrintStream.print(java.lang.String) : void [23]\\n\" + ", "-\t\t\t\t\"    68  goto 19\\n\" + ", "-\t\t\t\t\"    71  astore 4\\n\" + ", "-\t\t\t\t\"    73  iconst_0\\n\" + ", "-\t\t\t\t\"    74  istore 5 [var]\\n\" + ", "-\t\t\t\t\"    76  getstatic java.lang.System.out : java.io.PrintStream [15]\\n\" + ", "-\t\t\t\t\"    79  ldc <String \\\"[finally]\\\"> [32]\\n\" + ", "-\t\t\t\t\"    81  invokevirtual java.io.PrintStream.print(java.lang.String) : void [23]\\n\" + ", "-\t\t\t\t\"    84  aconst_null\\n\" + ", "-\t\t\t\t\"    85  astore 6\\n\" + ", "-\t\t\t\t\"    87  aload 6\\n\" + ", "-\t\t\t\t\"    89  invokevirtual java.lang.Object.toString() : java.lang.String [34]\\n\" + ", "-\t\t\t\t\"    92  pop\\n\" + ", "-\t\t\t\t\"    93  aload 4\\n\" + ", "-\t\t\t\t\"    95  athrow\\n\" + ", "-\t\t\t\t\"      Exception Table:\\n\" + ", "-\t\t\t\t\"        [pc: 4, pc: 19] -> 40 when : java.lang.NullPointerException\\n\" + ", "-\t\t\t\t\"        [pc: 0, pc: 19] -> 59 when : java.lang.Exception\\n\" + ", "-\t\t\t\t\"        [pc: 40, pc: 59] -> 59 when : java.lang.Exception\\n\" + ", "-\t\t\t\t\"        [pc: 0, pc: 19] -> 71 when : any\\n\" + ", "-\t\t\t\t\"        [pc: 40, pc: 71] -> 71 when : any\\n\" + ", "-\t\t\t\t\"      Line numbers:\\n\" + ", "-\t\t\t\t\"        [pc: 0, line: 4]\\n\" + ", "-\t\t\t\t\"        [pc: 2, line: 5]\\n\" + ", "-\t\t\t\t\"        [pc: 4, line: 7]\\n\" + ", "-\t\t\t\t\"        [pc: 12, line: 8]\\n\" + ", "-\t\t\t\t\"        [pc: 19, line: 19]\\n\" + ", "-\t\t\t\t\"        [pc: 22, line: 20]\\n\" + ", "-\t\t\t\t\"        [pc: 30, line: 21]\\n\" + ", "-\t\t\t\t\"        [pc: 33, line: 22]\\n\" + ", "-\t\t\t\t\"        [pc: 39, line: 9]\\n\" + ", "-\t\t\t\t\"        [pc: 40, line: 10]\\n\" + ", "-\t\t\t\t\"        [pc: 41, line: 11]\\n\" + ", "-\t\t\t\t\"        [pc: 49, line: 12]\\n\" + ", "-\t\t\t\t\"        [pc: 56, line: 13]\\n\" + ", "-\t\t\t\t\"        [pc: 59, line: 15]\\n\" + ", "-\t\t\t\t\"        [pc: 60, line: 16]\\n\" + ", "-\t\t\t\t\"        [pc: 68, line: 17]\\n\" + ", "-\t\t\t\t\"        [pc: 71, line: 18]\\n\" + ", "-\t\t\t\t\"        [pc: 73, line: 19]\\n\" + ", "-\t\t\t\t\"        [pc: 76, line: 20]\\n\" + ", "-\t\t\t\t\"        [pc: 84, line: 21]\\n\" + ", "-\t\t\t\t\"        [pc: 87, line: 22]\\n\" + ", "-\t\t\t\t\"        [pc: 93, line: 23]\\n\" + ", "-\t\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\t\"        [pc: 0, pc: 96] local: this index: 0 type: X\\n\" + ", "-\t\t\t\t\"        [pc: 2, pc: 59] local: warnings index: 1 type: java.lang.Object\\n\" + ", "-\t\t\t\t\"        [pc: 4, pc: 59] local: contexts index: 2 type: java.lang.Object\\n\" + ", "-\t\t\t\t\"        [pc: 41, pc: 59] local: npe index: 3 type: java.lang.NullPointerException\\n\" + ", "-\t\t\t\t\"        [pc: 60, pc: 71] local: e index: 1 type: java.lang.Exception\\n\" + ", "-\t\t\t\t\"        [pc: 22, pc: 39] local: var index: 5 type: int\\n\" + ", "-\t\t\t\t\"        [pc: 76, pc: 93] local: var index: 5 type: int\\n\" + ", "-\t\t\t\t\"        [pc: 33, pc: 39] local: o index: 6 type: java.lang.Object\\n\"", "+\t\t?\t\"  // Method descriptor #6 ()V\\n\" + ", "+\t\t\t\"  // Stack: 2, Locals: 7\\n\" + ", "+\t\t\t\"  public void save();\\n\" + ", "+\t\t\t\"     0  aconst_null\\n\" + ", "+\t\t\t\"     1  astore_1 [warnings]\\n\" + ", "+\t\t\t\"     2  aconst_null\\n\" + ", "+\t\t\t\"     3  astore_2 [contexts]\\n\" + ", "+\t\t\t\"     4  getstatic java.lang.System.out : java.io.PrintStream [15]\\n\" + ", "+\t\t\t\"     7  ldc <String \\\"[try]\\\"> [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java.io.PrintStream.print(java.lang.String) : void [23]\\n\" + ", "+\t\t\t\"    12  getstatic java.lang.System.out : java.io.PrintStream [15]\\n\" + ", "+\t\t\t\"    15  aload_1 [warnings]\\n\" + ", "+\t\t\t\"    16  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [29]\\n\" + ", "+\t\t\t\"    19  iconst_0\\n\" + ", "+\t\t\t\"    20  istore 5 [var]\\n\" + ", "+\t\t\t\"    22  getstatic java.lang.System.out : java.io.PrintStream [15]\\n\" + ", "+\t\t\t\"    25  ldc <String \\\"[finally]\\\"> [32]\\n\" + ", "+\t\t\t\"    27  invokevirtual java.io.PrintStream.print(java.lang.String) : void [23]\\n\" + ", "+\t\t\t\"    30  aconst_null\\n\" + ", "+\t\t\t\"    31  astore 6 [o]\\n\" + ", "+\t\t\t\"    33  aload 6 [o]\\n\" + ", "+\t\t\t\"    35  invokevirtual java.lang.Object.toString() : java.lang.String [34]\\n\" + ", "+\t\t\t\"    38  pop\\n\" + ", "+\t\t\t\"    39  return\\n\" + ", "+\t\t\t\"    40  astore_3 [npe]\\n\" + ", "+\t\t\t\"    41  getstatic java.lang.System.out : java.io.PrintStream [15]\\n\" + ", "+\t\t\t\"    44  ldc <String \\\"[npe]\\\"> [38]\\n\" + ", "+\t\t\t\"    46  invokevirtual java.io.PrintStream.print(java.lang.String) : void [23]\\n\" + ", "+\t\t\t\"    49  getstatic java.lang.System.out : java.io.PrintStream [15]\\n\" + ", "+\t\t\t\"    52  aload_2\\n\" + ", "+\t\t\t\"    53  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [29]\\n\" + ", "+\t\t\t\"    56  goto 19\\n\" + ", "+\t\t\t\"    59  astore_1 [e]\\n\" + ", "+\t\t\t\"    60  getstatic java.lang.System.out : java.io.PrintStream [15]\\n\" + ", "+\t\t\t\"    63  ldc <String \\\"[e]\\\"> [40]\\n\" + ", "+\t\t\t\"    65  invokevirtual java.io.PrintStream.print(java.lang.String) : void [23]\\n\" + ", "+\t\t\t\"    68  goto 19\\n\" + ", "+\t\t\t\"    71  astore 4\\n\" + ", "+\t\t\t\"    73  iconst_0\\n\" + ", "+\t\t\t\"    74  istore 5 [var]\\n\" + ", "+\t\t\t\"    76  getstatic java.lang.System.out : java.io.PrintStream [15]\\n\" + ", "+\t\t\t\"    79  ldc <String \\\"[finally]\\\"> [32]\\n\" + ", "+\t\t\t\"    81  invokevirtual java.io.PrintStream.print(java.lang.String) : void [23]\\n\" + ", "+\t\t\t\"    84  aconst_null\\n\" + ", "+\t\t\t\"    85  astore 6\\n\" + ", "+\t\t\t\"    87  aload 6\\n\" + ", "+\t\t\t\"    89  invokevirtual java.lang.Object.toString() : java.lang.String [34]\\n\" + ", "+\t\t\t\"    92  pop\\n\" + ", "+\t\t\t\"    93  aload 4\\n\" + ", "+\t\t\t\"    95  athrow\\n\" + ", "+\t\t\t\"      Exception Table:\\n\" + ", "+\t\t\t\"        [pc: 4, pc: 19] -> 40 when : java.lang.NullPointerException\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 19] -> 59 when : java.lang.Exception\\n\" + ", "+\t\t\t\"        [pc: 40, pc: 59] -> 59 when : java.lang.Exception\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 19] -> 71 when : any\\n\" + ", "+\t\t\t\"        [pc: 40, pc: 71] -> 71 when : any\\n\" + ", "+\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\"        [pc: 0, line: 4]\\n\" + ", "+\t\t\t\"        [pc: 2, line: 5]\\n\" + ", "+\t\t\t\"        [pc: 4, line: 7]\\n\" + ", "+\t\t\t\"        [pc: 12, line: 8]\\n\" + ", "+\t\t\t\"        [pc: 19, line: 19]\\n\" + ", "+\t\t\t\"        [pc: 22, line: 20]\\n\" + ", "+\t\t\t\"        [pc: 30, line: 21]\\n\" + ", "+\t\t\t\"        [pc: 33, line: 22]\\n\" + ", "+\t\t\t\"        [pc: 39, line: 9]\\n\" + ", "+\t\t\t\"        [pc: 40, line: 10]\\n\" + ", "+\t\t\t\"        [pc: 41, line: 11]\\n\" + ", "+\t\t\t\"        [pc: 49, line: 12]\\n\" + ", "+\t\t\t\"        [pc: 56, line: 13]\\n\" + ", "+\t\t\t\"        [pc: 59, line: 15]\\n\" + ", "+\t\t\t\"        [pc: 60, line: 16]\\n\" + ", "+\t\t\t\"        [pc: 68, line: 17]\\n\" + ", "+\t\t\t\"        [pc: 71, line: 18]\\n\" + ", "+\t\t\t\"        [pc: 73, line: 19]\\n\" + ", "+\t\t\t\"        [pc: 76, line: 20]\\n\" + ", "+\t\t\t\"        [pc: 84, line: 21]\\n\" + ", "+\t\t\t\"        [pc: 87, line: 22]\\n\" + ", "+\t\t\t\"        [pc: 93, line: 23]\\n\" + ", "+\t\t\t\"      Local variable table:\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 96] local: this index: 0 type: X\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 19] local: warnings index: 1 type: java.lang.Object\\n\" + ", "+\t\t\t\"        [pc: 4, pc: 19] local: contexts index: 2 type: java.lang.Object\\n\" + ", "+\t\t\t\"        [pc: 41, pc: 59] local: npe index: 3 type: java.lang.NullPointerException\\n\" + ", "+\t\t\t\"        [pc: 60, pc: 71] local: e index: 1 type: java.lang.Exception\\n\" + ", "+\t\t\t\"        [pc: 22, pc: 39] local: var index: 5 type: int\\n\" + ", "+\t\t\t\"        [pc: 76, pc: 93] local: var index: 5 type: int\\n\" + ", "+\t\t\t\"        [pc: 33, pc: 39] local: o index: 6 type: java.lang.Object\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dba980467abeffaffe88c0fe2d234d51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": " public void testBug282030h1() throws JavaModelException", "signatureAfterChange": " public void testBug282030h1() throws JavaModelException", "diff": ["-\t\t\"@MyAnnot1(name = \\\"sample1\\\", value = { @MyAnnot2(\\n\" + ", "-\t\t\"\t\tname = \\\"sample2\\\",\\n\" + ", "-\t\t\"\t\tvalue = \\\"demo\\\") })\\n\" + ", "+\t\t\"@MyAnnot1(\\n\" + ", "+\t\t\"\t\tname = \\\"sample1\\\",\\n\" + ", "+\t\t\"\t\tvalue = { @MyAnnot2(name = \\\"sample2\\\", value = \\\"demo\\\") })\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbf7642019ebc456468aafebde3bdbd8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java", "commitBeforeChange": "9bf79c7ef87f9bb276696a699c24ee7886d82109", "commitAfterChange": "de2cee4ff7b76fb31a04f1c1b724977d8ef8d10e", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void testTopLevelType2() throws CoreException", "signatureAfterChange": " \tpublic void testTopLevelType2() throws CoreException", "diff": ["-\tpublic void testTopLevelType2() throws CoreException {", "-\t\t\tcreateFile(", "-\t\t\t\t\"/P/Y.java\",", "-\t\t\t\t\"}\"", "-\t\t\t\t\"public class X extends /*start*/Y/*end*/ {\\n\" +", "-\t\t\tIBinding binding = ((Type) node).resolveBinding();", "-\t\t\t\t\"Y [in Y.java [in <default> [in <project root> [in P]]]]\",", "-\t\t\tdeleteFile(\"/P/Y.java\");", "+\t */", "+\tpublic void testTopLevelType2() throws CoreException {", "+\t\ttry {", "+\t\t\tcreateFile(", "+\t\t\t\t\"/P/src/Y.java\",", "+\t\t\t\t\"public class Y {\\n\" +", "+\t\t\t\t\"}\"", "+\t\t\t);", "+\t\t\tASTNode node = buildAST(", "+\t\t\t\t\"public class X extends /*start*/Y/*end*/ {\\n\" +", "+\t\t\t\t\"}\"", "+\t\t\t);", "+\t\t\tIBinding binding = ((Type) node).resolveBinding();", "+\t\t\tassertNotNull(\"No binding\", binding);", "+\t\t\tIJavaElement element = binding.getJavaElement();", "+\t\t\tassertElementEquals(", "+\t\t\t\t\"Unexpected Java element\",", "+\t\t\t\t\"Y [in Y.java [in <default> [in src [in P]]]]\",", "+\t\t\t\telement", "+\t\t\t);", "+\t\t\tassertTrue(\"Element should exist\", element.exists());", "+\t\t} finally {", "+\t\t\tdeleteFile(\"/P/src/Y.java\");", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc8dd2ebd2fc83f9520ed0b64430e2f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void testBug82514()", "signatureAfterChange": " \tpublic void testBug82514()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de5639707d7c00100383498554e1078a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void testBug82514()", "signatureAfterChange": " \tpublic void testBug82514()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de6cf836a955f7f1c4c9c321e30c099d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java", "commitBeforeChange": "c5d1291515e72a1b02e2dba658336524eb7964dc", "commitAfterChange": "5c7f45483ff98aea12080f74206c0fab992839fd", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected void codeComplete(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, org.eclipse.jdt.internal.compiler.env.ICompilationUnit unitToSkip, int position, ICompletionRequestor requestor, WorkingCopyOwner owner) throws JavaModelException", "signatureAfterChange": " protected void codeComplete(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, org.eclipse.jdt.internal.compiler.env.ICompilationUnit unitToSkip, int position, ICompletionRequestor requestor, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-\t\tAssert.isTrue(false, \"Completion requestor cannot be null\"); //$NON-NLS-1$", "+\t\tAssert.isTrue(false, \"completion requestor cannot be null\"); //$NON-NLS-1$", "-\t\tAssert.isTrue(false, \"Completion position \"+position+\" is not located in supplied source range (0 - \"+buffer.getLength()+\")\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tAssert.isTrue(false, \"completion position \"+position+\" is not located in supplied source range (0, \"+buffer.getLength()+\")\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfcd5aad6935c816c1c1b4f24eeed7bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 556, "methodNumberAfterChange": 556, "signatureBeforeChange": " \tpublic void test554()", "signatureAfterChange": " \tpublic void test554()", "diff": ["-\t\t\t\"Type safety: The cast from X<? extends Object> to X<String> is actually checking against the erased type X\\n\" + ", "+\t\t\t\"Type safety: The cast from X<capture-of ? extends Object> to X<String> is actually checking against the erased type X\\n\" + ", "-\t\t\t\"Type safety: The cast from X<? extends Object> to X2 is actually checking against the erased type X2\\n\" + ", "+\t\t\t\"Type safety: The cast from X<capture-of ? extends Object> to X2 is actually checking against the erased type X2\\n\" + ", "-\t\t\t\"Type safety: The cast from X<? extends Object> to X3<String> is actually checking against the erased type X3\\n\" + ", "+\t\t\t\"Type safety: The cast from X<capture-of ? extends Object> to X3<String> is actually checking against the erased type X3\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0edb4a5b103b25fee5ccb29c328f0b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void test022()", "signatureAfterChange": " \tpublic void test022()", "diff": ["-\t\t\t\"\t     ^^^^^^^\\n\" + ", "+\t\t\t\"\t        ^^^^\\n\" + ", "-\t\t\t\"\t     ^^^^^^^^\\n\" + ", "+\t\t\t\"\t        ^^^^^\\n\" + ", "-\t\t\t\"\t     ^^^^^^^^\\n\" + ", "+\t\t\t\"\t        ^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1bdfc0093cc4dd0c221a0e117bee5ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 255, "methodNumberAfterChange": 255, "signatureBeforeChange": " \tpublic void test253()", "signatureAfterChange": " \tpublic void test253()", "diff": ["-\t\t\t\"Type safety: The cast from List<? extends Number> to List<Number> is actually checking against the erased type List\\n\" + ", "+\t\t\t\"Type safety: The cast from List<capture-of ? extends Number> to List<Number> is actually checking against the erased type List\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from List<? extends Number> to List<Number>\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Number> to List<Number>\\n\" + ", "-\t\t\t\"Unnecessary cast from List<? extends Number> to List<? extends Number>\\n\" + ", "+\t\t\t\"Unnecessary cast from List<capture-of ? extends Number> to List<? extends Number>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e23b66bbb43f92cc5593e08a023d0ce3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tpublic void test036()", "signatureAfterChange": "  \tpublic void test036()", "diff": ["-\t\t\t\t+ \"inr cannot be resolved (or is not a valid type) for the parameter a of the method p_foo\\n\"", "+\t\t\t\t+ \"inr cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"inx cannot be resolved (or is not a valid type) for the parameter b of the method p_foo\\n\"", "+\t\t\t\t+ \"inx cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"inq cannot be resolved (or is not a valid type) for the parameter c of the method p_foo\\n\"", "+\t\t\t\t+ \"inq cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2b5c322c8675e665fa43afeb3f35286", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void test014()", "signatureAfterChange": " public void test014()", "diff": ["-\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    11  ldc <String \\\"SUCCESS\\\"> [23]\\n\" + ", "-\t\t\"    13  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    11  ldc <String \\\"SUCCESS\\\"> [22]\\n\" + ", "+\t\t\"    13  invokevirtual java.io.PrintStream.println(java.lang.String) : void [24]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3f8f734515b29006c65945dac85da6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ProblemTypeAndMethodTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " public void test075()", "signatureAfterChange": " public void test075()", "diff": ["-\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" +", "+\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" +", "+\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" +", "+\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e40b465464a97af109a2f08e0a3a094d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "\t\t  \tpublic void test086()", "signatureAfterChange": "\t\t  \tpublic void test086()", "diff": ["-\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e530be101df2c2050707b47883ea7a63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RenameTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void testRenameCUForce() throws CoreException", "signatureAfterChange": " public void testRenameCUForce() throws CoreException", "diff": ["-\t\t\"\t\t[default][*]: {CHILDREN}\\n\" + ", "-\t\t\"\t\t\tX.java[-]: {MOVED_TO(Y.java [in [default] [in src [in P]]])}\\n\" + ", "-\t\t\"\t\t\tY.java[+]: {MOVED_FROM(X.java [in [default] [in src [in P]]])}\"", "+\t\t\"\t\t<default>[*]: {CHILDREN}\\n\" + ", "+\t\t\"\t\t\tX.java[-]: {MOVED_TO(Y.java [in <default> [in src [in P]]])}\\n\" + ", "+\t\t\"\t\t\tY.java[+]: {MOVED_FROM(X.java [in <default> [in src [in P]]])}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e57c85a56a47f737a628767d2a1ba514", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java", "commitBeforeChange": "8881369a7d0e4bdf41211abd8b5386c3693abb68", "commitAfterChange": "bf2117b5b91f53fb296d1eef53e3b05f16ac6939", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " public void testMultipleSwitches()", "signatureAfterChange": " public void testMultipleSwitches()", "diff": ["-\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum constants are permitted\\n\" + ", "+\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum variables are permitted\\n\" + ", "-\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum constants are permitted\\n\" + ", "+\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum variables are permitted\\n\" + ", "-\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum constants are permitted\\n\" + ", "+\t\t\"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum variables are permitted\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e70448e62e8ac5f7c81dcdff5393b13b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic void testBug48385()", "signatureAfterChange": " \tpublic void testBug48385()", "diff": ["-\t\t\t\t\"Javadoc: CharOperation cannot be resolved or is not a type\\n\" + ", "+\t\t\t\t\"Javadoc: CharOperation cannot be resolved to a type\\n\" + ", "-\t\t\t\t\"Javadoc: CharOperation cannot be resolved or is not a type\\n\" + ", "+\t\t\t\t\"Javadoc: CharOperation cannot be resolved to a type\\n\" + ", "-\t\t\t\t\"Javadoc: CharOperation cannot be resolved or is not a type\\n\" + ", "+\t\t\t\t\"Javadoc: CharOperation cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e796b8bfc1b660be7a067fa7f489216d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InterfaceMethodsTest.java", "commitBeforeChange": "c808b96946babe7971ac678c8d580ce253c8257a", "commitAfterChange": "168490e50ca546e3f1ae8e13e13d000625f50b16", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tpublic void _testBug421543a()", "signatureAfterChange": " \tpublic void _testBug421543a()", "diff": ["-\t\t\t\"\tvoid foo();\\n\" + ", "-\t\t\t\"\t     ^^^^^\\n\" + ", "-\t\t\t\"The method foo() of type J should be tagged with @Override since it actually overrides a superinterface method\\n\" + ", "+\t\t\t\"\tvoid foo(J t);\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^\\n\" + ", "+\t\t\t\"The method foo(J) of type J should be tagged with @Override since it actually overrides a superinterface method\\n\" + ", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7b4c68205e2792146c6bc9b8f10fce7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void testLocalType1() throws JavaModelException", "signatureAfterChange": " public void testLocalType1() throws JavaModelException", "diff": ["-\t\t\"  X {key=Lp7/X;} [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"  Y2 {key=Lp7/A$84;} [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\",", "+\t\t\"  Y2 [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e81680038bace6a36c918fc83617a19e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "5da4268a6e911ad3865241747a8e9714544fc990", "commitAfterChange": "1e8305535ff304200778a08eb6eb4025791a09c1", "methodNumberBeforeChange": 309, "methodNumberAfterChange": 309, "signatureBeforeChange": " public void test159()", "signatureAfterChange": " public void test159()", "diff": ["-\t\t\"The return types are incompatible for the inherited methods BFoo.bar(), AFoo.bar()\\n\" + ", "+\t\t\"The return types are incompatible for the inherited methods AFoo.bar(), BFoo.bar()\\n\" + ", "-\t\t\"The return types are incompatible for the inherited methods BFoo.bar(), AFoo.bar()\\n\" + ", "+\t\t\"The return types are incompatible for the inherited methods AFoo.bar(), BFoo.bar()\\n\" + ", "-\t\t\"The type Z must implement the inherited abstract method AFoo.bar()\\n\" + ", "+\t\t\"The type Z must implement the inherited abstract method BFoo.bar()\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e822b6bd4d2d58baeb6fce0bc69659b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 464, "methodNumberAfterChange": 464, "signatureBeforeChange": " \tpublic void test460()", "signatureAfterChange": " \tpublic void test460()", "diff": ["-\t\t\t\"Type safety: Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e825c1cd844886819b8a458e18eafcb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void testBug83127a()", "signatureAfterChange": " \tpublic void testBug83127a()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eab78d12bc3fe3049210dbe44ee13685", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": " public void testTypeRefGenericMethod_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericMethod_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\tvoid foo(A<\ufffd|String|\ufffd> a) {@46] EXACT_MATCH\\n\" +", "-\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\t\ta.<\ufffd|String|\ufffd>foo();@64] EXACT_MATCH\\n\" +", "-\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\t\ta.<\ufffd|A|\ufffd<? extends Exception>>foo();@83] EXACT_MATCH\"", "+\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\tvoid foo(A<!|String|!> a) {@46] EXACT_MATCH\\n\" +", "+\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\t\ta.<!|String|!>foo();@64] EXACT_MATCH\\n\" +", "+\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\t\ta.<!|A|!<? extends Exception>>foo();@83] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eae85afc638eb2804a54a9b7719fc8fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaLikeExtensionsTests.java", "commitBeforeChange": "53ef1901eb9652b60d01f901557a99f6b7923647", "commitAfterChange": "a968559657d89e15246203d474f2d73832561da4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void testGetJavaLikeExtensions01()", "signatureAfterChange": " \tpublic void testGetJavaLikeExtensions01()", "diff": ["-\t\t\t\".java\\n\" + ", "-\t\t\t\".foo\\n\" + ", "-\t\t\t\".bar\\n\",", "+\t\t\t\"java\\n\" + ", "+\t\t\t\"foo\\n\" + ", "+\t\t\t\"bar\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb26780948ebfae6893a0477b805018e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/FlowAnalysisTest.java", "commitBeforeChange": "a75ebaf0889649e7a4c140428341cde5c32ffe2e", "commitAfterChange": "157a9d28265d1a8c0af6b5ce9f61c33c050bacff", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": " public void testBug338234c()", "signatureAfterChange": " public void testBug338234c()", "diff": ["-\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "-\t\t\"\tpublic class X {\\n\" + ", "-\t\t\"\t             ^\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tpublic final int field1;\\n\" + ", "+\t\t\"\t                 ^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec24f3500e240d986a57dabfb590601c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "96c7afd29f6893c16cf00a3ac29701c1a81f919d", "commitAfterChange": "dd45817f66a0a68c9747e1c73f77cc12766ad25c", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " public void testBug232768_Javadoc06() throws JavaModelException", "signatureAfterChange": " public void testBug232768_Javadoc06() throws JavaModelException", "diff": ["-\t\t\"   public     class\t\t\tC{\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"\t/**\\n\" +", "+\t\t\"   public     class\t\t\tC{    \\n\" +", "+\t\t\"\t\\n\" +", "+\t\t\"        /**\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec4cf29da8e42d847863061a4ca31ade", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "commitAfterChange": "7799c5e59c4fc19bf5973ff7dc2c79e57bc68126", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void testMoveSourceFolder5() throws CoreException", "signatureAfterChange": " public void testMoveSourceFolder5() throws CoreException", "diff": ["-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + ", "-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + ", "-\t\t\t\"\t\t[default]\\n\" + ", "+\t\t\t\"\t\t<default>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eca50a7a08b2123304eae71cc3d51deb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForClass.java", "commitBeforeChange": "314f66e76f751455a7dd539f576706f5f92aab24", "commitAfterChange": "5d2ad0b940570868aeb3a33317182334e9423c29", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void test012()", "signatureAfterChange": " \tpublic void test012()", "diff": ["-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid reference\\n\"", "+\t\t\t\t+ \"\t                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"Javadoc: Unexpected text\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eebdbfaa0d05ecd1f6578818d210537e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "84c5b115e7466dfc6e19cd3055480421b2384a2d", "commitAfterChange": "1d6638787ae042a98f74eaa1a6155e74e1a941be", "methodNumberBeforeChange": 258, "methodNumberAfterChange": 258, "signatureBeforeChange": " public void test216b_warn_options()", "signatureAfterChange": " public void test216b_warn_options()", "diff": ["-\t\t\"1 problem (1 warning)\",", "+\t\t\"1 problem (1 warning)\\n\",", "-\t\t\"1 problem (1 warning)\",", "+\t\t\"1 problem (1 warning)\\n\",", "-\t\t\"1 problem (1 warning)\",", "+\t\t\"1 problem (1 warning)\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef7c8c55877f8e55dced8f93047fc3cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "80470e2095f3ac39008254e7ed449eb81be85ead", "commitAfterChange": "1d33f4fa9b7cb483682e4ad559e59736adf34320", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void test022()", "signatureAfterChange": " public void test022()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 7)\\n\" +", "-\t\t\"\tcase MX.BLEU : break;\\n\" +", "-\t\t\"\t        ^^^^\\n\" +", "-\t\t\"The qualified case label X.MX.BLEU must be replaced with the unqualified enum constant BLEU\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in X.java (at line 8)\\n\" +", "-\t\t\"\tcase MX.BLANC : break;\\n\" +", "-\t\t\"\t        ^^^^^\\n\" +", "-\t\t\"The qualified case label X.MX.BLANC must be replaced with the unqualified enum constant BLANC\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 9)\\n\" +", "-\t\t\"\tcase MX.ROUGE : break;\\n\" +", "-\t\t\"\t        ^^^^^\\n\" +", "-\t\t\"The qualified case label X.MX.ROUGE must be replaced with the unqualified enum constant ROUGE\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tcase MX.BLEU : break;\\n\" + ", "+\t\t\"\t     ^^^^^^^\\n\" + ", "+\t\t\"The qualified case label X.MX.BLEU must be replaced with the unqualified enum constant BLEU\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\tcase MX.BLANC : break;\\n\" + ", "+\t\t\"\t     ^^^^^^^^\\n\" + ", "+\t\t\"The qualified case label X.MX.BLANC must be replaced with the unqualified enum constant BLANC\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\"\tcase MX.ROUGE : break;\\n\" + ", "+\t\t\"\t     ^^^^^^^^\\n\" + ", "+\t\t\"The qualified case label X.MX.ROUGE must be replaced with the unqualified enum constant ROUGE\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef94a35784db61bff0c0952b59433bf3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBugsTestJLS3.java", "commitBeforeChange": "bae98ccb647b46a2d5cfccf36593de0c5db401c9", "commitAfterChange": "230a5cd410205aeead21b12e1ec93eae10a08fda", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void testBug130778l() throws JavaModelException", "signatureAfterChange": " public void testBug130778l() throws JavaModelException", "diff": ["-\t\t\t\"    [*1*]@AnAnnotation[*1*](value=)\\n\" +", "+\t\t\t\"    [*1*]@AnAnnotation(value=[*1*])\\n\" +", "-\t\t\t\"[*1*]@AnAnnotation[*1*] [*2*]@AnAnnotation2(value=\\\"b\\\")[*2*] class Y {\\n\" + ", "+\t\t\t\"[*1*]@AnAnnotation(value=$missing$)[*1*] [*2*]@AnAnnotation2(value=\\\"b\\\")[*2*] class Y {\\n\" + ", "-\t\t\t\"1:MARKER_ANNOTATION,[53,13],,,[ANNOTATION,La/X$115$Y;@La/AnAnnotation;,]\\n\" + ", "+\t\t\t\"1:NORMAL_ANNOTATION,[53,20],,RECOVERED,[ANNOTATION,La/X$115$Y;@La/AnAnnotation;,]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f09b54f4027c24740bd4f4ffc0069f57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "0bd8e1b1cf24c00d081a70bccd79f0e53ad3dc52", "commitAfterChange": "b35be838b9d57695e23b927dc647a592275feef5", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " public void test056v()", "signatureAfterChange": " public void test056v()", "diff": ["-\t\t\"Resource leak: \\\"reader\\\" is never closed\\n\" + ", "+\t\t\"Resource leak: 'reader' is never closed\\n\" + ", "-\t\t\"Resource \\\"reader111\\\" should be managed by try-with-resource\\n\" + ", "+\t\t\"Resource 'reader111' should be managed by try-with-resource\\n\" + ", "-\t\t\"Resource leak: \\\"reader2\\\" is not closed at this location\\n\" + ", "+\t\t\"Resource leak: 'reader2' is not closed at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0c9118a5871beb26a6148019b2e100f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "448d62b2ff66cd7ed3c1bda65bd5259a6d0971b0", "commitAfterChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "methodNumberBeforeChange": 555, "methodNumberAfterChange": 555, "signatureBeforeChange": " public void testBug247564b_4()", "signatureAfterChange": " public void testBug247564b_4()", "diff": ["-\t\t\t\"        o.toString(); // danger\\n\" +", "+\t\t\t\"        o.toString(); // danger\" +", "-\t\t\t\"\to.toString(); // danger\\n\" + ", "+\t\t\t\"\to.toString(); // danger        return;\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 22)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 21)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f11472f3843ed8bf38ee3d6b2e5b8ebd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "d32dbe370312bc68ef5b59c6268bfdfcda839b17", "commitAfterChange": "4b84620f8d71e6de7e42a2050aa5360e2143f846", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void test036()", "signatureAfterChange": " public void test036()", "diff": ["-\t\t\t\"Duplicate parameter x\\n\" + ", "+\t\t\t\"Lambda expression\\'s parameter x cannot redeclare another local variable defined in an enclosing scope. \\n\" + ", "-\t\t\t\"Duplicate parameter y\\n\" + ", "+\t\t\t\"Lambda expression\\'s parameter y cannot redeclare another local variable defined in an enclosing scope. \\n\" + ", "-\t\t\t\"Duplicate local variable args\\n\" + ", "+\t\t\t\"Lambda expression\\'s local variable args cannot redeclare another local variable defined in an enclosing scope. \\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f28604bec2936d678d4e666430cddb6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "e92324cecc3fbf731a68d99288f72318b17cf1ea", "commitAfterChange": "9832689930749c0e863f1bb11ec756d41ad5c5d4", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 116, "signatureBeforeChange": " public void testSimpleTypeReference() throws CoreException", "signatureAfterChange": " public void testSimpleTypeReference() throws CoreException", "diff": ["-\t\t\"src/p/A.java p.A.x [X]\\n\" +", "-\t\t\"src/p/A.java p.A(X) [X]\\n\" +", "-\t\t\"src/p/A.java p.A.foo(int, String, X) -> void [X]\\n\" +", "-\t\t\"src/p/X.java p.X() [X]\\n\" +", "-\t\t\"src/p/X.java p.X.foo(int, String, X) -> void [X]\\n\" +", "-\t\t\"src/p/Y.java p.Y [X]\\n\" +", "-\t\t\"src/p/Z.java p.Z.foo(int, String, X) -> void [X]\", ", "+\t\t\"src/p/A.java p.A.x [X]\\n\" + ", "+\t\t\"src/p/A.java p.A(X) [X]\\n\" + ", "+\t\t\"src/p/A.java void p.A.foo(int, String, X) [X]\\n\" + ", "+\t\t\"src/p/X.java p.X() [X]\\n\" + ", "+\t\t\"src/p/X.java void p.X.foo(int, String, X) [X]\\n\" + ", "+\t\t\"src/p/Y.java p.Y [X]\\n\" + ", "+\t\t\"src/p/Z.java void p.Z.foo(int, String, X) [X]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f31b4e5b4b38606ef86a3ae76d114e41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 342, "methodNumberAfterChange": 343, "signatureBeforeChange": " public void test1052_options_all_error()", "signatureAfterChange": " public void test1052_options_all_error()", "diff": ["-\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Null comparison always yields false: The variable o can only be null at this location\\n\" + ", "-\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Null pointer access: The variable o can only be null at this location\\n\" + ", "-\t\t\"The variable p may be null\\n\" + ", "+\t\t\"Potential null pointer access: The variable p may be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4536e16ea127cffe5163431ce89e166", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DualParseSyntaxErrorTest.java", "commitBeforeChange": "fd230c4ee1ceefd6a4812ebc7de0e734ce8df73c", "commitAfterChange": "e752367433ca417806253a6753c55772428a8bf6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void test02()", "signatureAfterChange": " public void test02()", "diff": ["-\t\t\"1. ERROR in <test2> (at line 3)\\n\" + ", "-\t\t\"\tvoid foo() {   \t\t\t\t\t\t\t\\n\" + ", "-\t\t\"\t           ^\\n\" + ", "+\t\t\"1. ERROR in <test2> (at line 4)\\n\" + ", "+\t\t\"\tfX = 0;  \t\t\t\t\t\t\t\\n\" + ", "+\t\t\"\t      ^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4cd4cd64e7a05df1b8f20a197294f21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "0bd8e1b1cf24c00d081a70bccd79f0e53ad3dc52", "commitAfterChange": "b35be838b9d57695e23b927dc647a592275feef5", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " public void test056throw2()", "signatureAfterChange": " public void test056throw2()", "diff": ["-\t\t\"Resource \\\"reader\\\" should be managed by try-with-resource\\n\" +", "+\t\t\"Resource 'reader' should be managed by try-with-resource\\n\" +", "-\t\t\"Resource \\\"reader\\\" should be managed by try-with-resource\\n\" +", "+\t\t\"Resource 'reader' should be managed by try-with-resource\\n\" +", "-\t\t\"Resource \\\"reader\\\" should be managed by try-with-resource\\n\" +", "+\t\t\"Resource 'reader' should be managed by try-with-resource\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f54c85b0a60e02406d879b658efac242", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "413506076b5eca1e8bff0fe05f1ae6ca89cdfda0", "commitAfterChange": "84210148bd50897aa80e3947cfa4eab1021e65ca", "methodNumberBeforeChange": 578, "methodNumberAfterChange": 578, "signatureBeforeChange": " public void testBug216875d() throws CoreException", "signatureAfterChange": " public void testBug216875d() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd.field = t1.field;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\tt1.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\tt2.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\"", "+\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd.field = t1.field;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\tt1.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\tt2.field = \ufffd|t1|\ufffd.field;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f59f9d800ec09425f8f7264c97af5964", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "96c7afd29f6893c16cf00a3ac29701c1a81f919d", "commitAfterChange": "dd45817f66a0a68c9747e1c73f77cc12766ad25c", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " public void testBug232768_Block06() throws JavaModelException", "signatureAfterChange": " public void testBug232768_Block06() throws JavaModelException", "diff": ["-\t\t\"   public     class\t\t\tD{\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"\t/*\\n\" +", "+\t\t\"   public     class\t\t\tD{    \\n\" +", "+\t\t\"\t\\n\" +", "+\t\t\"        /*\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5c0db0908a42f590e67088fb066f20b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InterfaceMethodsTest.java", "commitBeforeChange": "7a4894572c8dc97616c8aa59652842aae37320e6", "commitAfterChange": "328c06fa136c963530115a367863b6a931384871", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void testStaticMethod01()", "signatureAfterChange": " \tpublic void testStaticMethod01()", "diff": ["-\t\t\t\t\"Illegal modifier for the interface method foo2; only public, abstract and strictfp are permitted\\n\" + ", "+\t\t\t\t\"Illegal combination of modifiers for the interface method foo2; only one of abstract, default, or static permitted\\n\" + ", "-\t\t\t\t\"Illegal modifier for the interface method foo3; only public & abstract are permitted\\n\" + ", "+\t\t\t\t\"Illegal combination of modifiers for the interface method foo3; only one of abstract, default, or static permitted\\n\" + ", "-\t\t\t\t\"Illegal modifier for the interface method foo4; only public & abstract are permitted\\n\" + ", "+\t\t\t\t\"Illegal combination of modifiers for the interface method foo4; only one of abstract, default, or static permitted\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6aeeb49359987859a87e287e64f522d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic void testBug83393b()", "signatureAfterChange": " \tpublic void testBug83393b()", "diff": ["-\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\"Syntax error, varargs are only available if source level is 1.5\\n\" +", "+\t\t\t\"Syntax error, varargs are only available if source level is 1.5 or greater\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6d43acae4e5f364d23831aa0ced21d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 650, "methodNumberAfterChange": 650, "signatureBeforeChange": "\t\t\t \tpublic void test646()", "signatureAfterChange": "\t\t\t \tpublic void test646()", "diff": ["-\t\t\t\"Type safety: Outer.Inner is a raw type. References to generic type Outer<T>.Inner should be parameterized\\n\" + ", "+\t\t\t\"Outer.Inner is a raw type. References to generic type Outer<T>.Inner should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Outer is a raw type. References to generic type Outer<T> should be parameterized\\n\" + ", "+\t\t\t\"Outer is a raw type. References to generic type Outer<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Outer.Inner is a raw type. References to generic type Outer<T>.Inner should be parameterized\\n\" + ", "+\t\t\t\"Outer.Inner is a raw type. References to generic type Outer<T>.Inner should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f717f97389bc07169a5ef609e0fbd3a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "bf2199048d434ee8a7461950468d3a2335a30990", "commitAfterChange": "99697e231d7abf709bf21ed4dc6a92bbb307b9f9", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " public void testBug400905_0003() throws CoreException", "signatureAfterChange": " public void testBug400905_0003() throws CoreException", "diff": ["-\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):Lambda(I).foo(b400905.Y) [y->] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):Lambda(I).foo(b400905.Y) [y ->] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):Lambda(I).foo(b400905.Y) [y  ->] EXACT_MATCH\"", "+\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):<lambda #1>.foo(b400905.Y) [y->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):<lambda #1>.foo(b400905.Y) [y ->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java boolean void b400905.X.main(String[]):<lambda #1>.foo(b400905.Y) [y  ->] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8208e90079014635dd7c66f7c6f9a26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 185, "methodNumberAfterChange": 185, "signatureBeforeChange": " \tpublic void test183()", "signatureAfterChange": " \tpublic void test183()", "diff": ["-\t\t\t\"Unsafe type operation: The cast from Object to parameterized type Hashtable<String,Integer> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from Object to Hashtable<String,Integer> will not check conformance of type arguments at runtime\\n\" + ", "-\t\t\t\"Unnecessary cast to type Hashtable<String,Integer> for expression of type Z1\\n\" + ", "+\t\t\t\"Unnecessary cast from Z1 to Hashtable<String,Integer>\\n\" + ", "-\t\t\t\"Unsafe type operation: The cast from Z3 to parameterized type Hashtable<String,Integer> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from Z3 to Hashtable<String,Integer> will not check conformance of type arguments at runtime\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f865d33ab84d72f450619eda2bcef645", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void testMethodReferencesElementPatternSingleParamArguments06() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternSingleParamArguments06() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testUnbound() [complete(new String(), gs)] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testExtends() [complete(new Throwable(), gs)] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testSuper() [complete(new RuntimeException(), gs)] EQUIVALENT_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testUnbound() [complete(new String(), gs)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testExtends() [complete(new Throwable(), gs)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testSuper() [complete(new RuntimeException(), gs)] POTENTIAL_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb8e49e5d4f71007d44d24b87682b20b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": "  \tpublic void test064()", "signatureAfterChange": "  \tpublic void test064()", "diff": ["-\t\t\t\"     3  getstatic java/lang/System.out Ljava/io/PrintStream; [31]\\n\" + ", "+\t\t\t\"     3  getstatic java.lang.System.out : java.io.PrintStream [31]\\n\" + ", "-\t\t\t\"     7  invokevirtual java/io/PrintStream.println(I)V [37]\\n\" + ", "+\t\t\t\"     7  invokevirtual java.io.PrintStream.println(int) : void  [37]\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 11] local: i index: 0 type: I\\n\";", "+\t\t\t\"        [pc: 3, pc: 11] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb9f0137a7db5ea7ee814f291a36b364", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void testArrayType_10()", "signatureAfterChange": " \tpublic void testArrayType_10()", "diff": ["-\t\t\t\"Null type mismatch (type annotations): the expression of type \\'String @NonNull[] []\\' needs unchecked conversion to conform to \\'String @NonNull[] @NonNull[]\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String @NonNull[] []\\' needs unchecked conversion to conform to \\'String @NonNull[] @NonNull[]\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): the expression of type \\'String @NonNull[] []\\' needs unchecked conversion to conform to \\'String @NonNull[] @Nullable[]\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String @NonNull[] []\\' needs unchecked conversion to conform to \\'String @NonNull[] @Nullable[]\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): the expression of type \\'String @NonNull[] []\\' needs unchecked conversion to conform to \\'String @NonNull[] @Nullable[]\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String @NonNull[] []\\' needs unchecked conversion to conform to \\'String @NonNull[] @Nullable[]\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc909d31cb9b2eb14bf8b607cd84a819", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "d374c39ddab0b1f83162946aec27b6b36fb07bfb", "commitAfterChange": "a8a3a90ec5bfee0f774504f5c766dbb8c9570420", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void test043()", "signatureAfterChange": " \tpublic void test043()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "-\t\t\"\tint value;\\r\\n\" + ", "-\t\t\"\t    ^^^^^\\n\" + ", "-\t\t\"The annotation field X.value must be initialized with a constant expression\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tint value;\\n\" + ", "+\t\t\t\"\t    ^^^^^\\n\" + ", "+\t\t\t\"The blank final field value may not have been initialized\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc90e3fea1cf4ed88c14e2e2668bce0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "77646fe802ce8842c3e468133491915f09e00874", "commitAfterChange": "95ad422ba75a97d9b8c3cb49bc8bd9dcf7d18a77", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void test016() throws CoreException", "signatureAfterChange": " \tpublic void test016() throws CoreException", "diff": ["-\t\t\t\t\"    new X() {\\n\" +", "-\t\t\t\t\"    };\" +", "+\t\t\t\t\"    new X() /*start*/{\\n\" +", "+\t\t\t\t\"    }/*end*/;\" +", "-\t\t\t\"Lp1/X$1;\");", "+\t\t\t\"Lp1/X$52;\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcb696a56d0d61cbb95b84917dc15e18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocBugsTest.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": " \tpublic void testBug77510disabled()", "signatureAfterChange": " \tpublic void testBug77510disabled()", "diff": ["-\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\t\"\tint i0 = A.i0009;\\n\" + ", "-\t\t\t\t\"\t         ^^^^^^^\\n\" + ", "-\t\t\t\t\"The field A.i0009 is deprecated\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\t\"\tint i1 = A.i000a;\\n\" + ", "-\t\t\t\t\"\t         ^^^^^^^\\n\" + ", "-\t\t\t\t\"The field A.i000a is deprecated\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\t\"\tint i3 = A.i000c;\\n\" + ", "-\t\t\t\t\"\t         ^^^^^^^\\n\" + ", "-\t\t\t\t\"The field A.i000c is deprecated\\n\" + ", "-\t\t\t\t\"----------\\n\"", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tint i0 = A.i0009;\\n\" + ", "+\t\t\t\"\t           ^^^^^\\n\" + ", "+\t\t\t\"The field A.i0009 is deprecated\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tint i1 = A.i000a;\\n\" + ", "+\t\t\t\"\t           ^^^^^\\n\" + ", "+\t\t\t\"The field A.i000a is deprecated\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tint i3 = A.i000c;\\n\" + ", "+\t\t\t\"\t           ^^^^^\\n\" + ", "+\t\t\t\"The field A.i000c is deprecated\\n\" + ", "+\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd1d295c391fad3a64e2984b11c14e2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 375, "methodNumberAfterChange": 375, "signatureBeforeChange": " public void test315_warn_options_b()", "signatureAfterChange": " public void test315_warn_options_b()", "diff": ["-\t\t\t\t\"\tZork;\\n\" +", "+\t\t\t\t\"\tZork z;\\n\" +", "-\t\t\"\tZork;\\n\" + ", "+\t\t\"\tZork z;\\n\" + ", "-\t\t\"Syntax error on token \\\"Zork\\\", VariableDeclarator expected after this token\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd3405bc4555d3f932b125d383899e30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void testBug83127b()", "signatureAfterChange": " \tpublic void testBug83127b()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd9a48939294ba9f3f2cc61ef7ede900", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests.java", "commitBeforeChange": "377462609d83990f9f6a62b422812db006751e9a", "commitAfterChange": "22ffc17005bd63d67acecaddbfd5435bf88ae086", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 147, "signatureBeforeChange": " public void testInvalidField2() throws JavaModelException", "signatureAfterChange": " public void testInvalidField2() throws JavaModelException", "diff": ["+//https://bugs.eclipse.org/bugs/show_bug.cgi?id=221215 - variation", "+public void testInvalidField2() throws JavaModelException {", "+\tICompilationUnit cu = getWorkingCopy(", "+\t\t\"/Resolve/src/test/Test.java\",", "+\t\t\"package test;\"+", "+\t\t\"public class Event {\\n\" + ", "+\t\t\"        public int x;\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"        public void handle(Event e) {\\n\" + ", "+\t\t\"                this.x.eee.foo();\\n\" + ", "+\t\t\"        }\\n\" + ", "+\t\t\"}\");", "+\tString str = cu.getSource();", "+\t", "+\tint start = str.indexOf(\"eee\") + \"e\".length();", "+\tint length = 0;", "+\tIJavaElement[] elements = cu.codeSelect(start, length);", "+\tassertElementsEqual(", "+\t\t\"Unexpected elements\",", "+\t\t\"\",", "+\t\telements", "+\t);", "+}", "-public void testInvalidField2() throws JavaModelException {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff1a9d5f52610382321cc7affe8f7064", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": "  public void test98()", "signatureAfterChange": "  public void test98()", "diff": ["-\t\t\"\t\tif ((part != null && sel != null) || l instanceof String) {\t\t\\n\"+", "+\t\t\"\t\tif ((part != null && sel != null) || l instanceof String) {\t\\n\"+", "-    \t\"    if ((((part != null) && (sel != null)) || (l instanceof String))) \\n\"+", "+    \t\"    if ((((part != null) && (sel != null)) || (l instanceof String)))\\n\"+", "-\t\t\"        };;\\n\"+", "+\t\t\"        }\\n\"+"]}], "num": 61534}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a0648f11b2e8b825b01b7b3a6cf0adb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f310f2c80cf32bbd8a8f646041b96d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "\r public void test0026() throws IOException", "signatureAfterChange": "\r public void test0026() throws IOException", "diff": ["-\tString expectedUnitToString = \r", "-\t\t\"class A {\\n\" + \r", "-\t\t\"  A() {\\n\" + \r", "-\t\t\"    super();\\n\" + \r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer>@Marker int foo() {\\n\" + \r", "-\t\t\"    return 0;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer>int bar() {\\n\" + \r", "-\t\t\"    return 0;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"}\\n\";\r", "-\tcheckParse(CHECK_ALL & ~CHECK_JAVAC_PARSER, source.toCharArray(), null, \"test0026\", expectedUnitToString);\r", "+\tString expectedError = \r", "+\t\t\t\"----------\\n\" +\r", "+\t\t\t\"1. ERROR in test0026 (at line 2)\\n\" +\r", "+\t\t\t\"\tpublic <Integer, @Positive Integer, @Negative Integer, Integer> @Marker int foo() {\\n\" +\r", "+\t\t\t\"\t                                                                ^^^^^^^\\n\" +\r", "+\t\t\t\"Syntax error, type annotations are illegal here\\n\" +\r", "+\t\t\t\"----------\\n\";\r", "+\tcheckParse(CHECK_PARSER, source.toCharArray(), expectedError, \"test0026\", null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23e71ab2190438e787750535810bb663", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "\r public void test0031() throws IOException", "signatureAfterChange": "\r public void test0031() throws IOException", "diff": ["-\tString expectedUnitToString = \r", "-\t\t\"class A {\\n\" + \r", "-\t\t\"  A() {\\n\" + \r", "-\t\t\"    super();\\n\" + \r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer>@Marker int[] @NonEmpty [][] foo() {\\n\" + \r", "-\t\t\"    return 0;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer>int[] @NonEmpty [][] bar() {\\n\" + \r", "-\t\t\"    return 0;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"}\\n\";\r", "-\tcheckParse(CHECK_ALL & ~CHECK_JAVAC_PARSER, source.toCharArray(), null, \"test0031\", expectedUnitToString);\r", "+\tString expectedError = \r", "+\t\t\t\"----------\\n\" +\r", "+\t\t\t\"1. ERROR in test0031 (at line 2)\\n\" +\r", "+\t\t\t\"\tpublic <Integer, @Positive Integer, @Negative Integer, Integer> @Marker int[] @NonEmpty[][] foo() {\\n\" +\r", "+\t\t\t\"\t                                                                ^^^^^^^\\n\" +\r", "+\t\t\t\"Syntax error, type annotations are illegal here\\n\" +\r", "+\t\t\t\"----------\\n\";\r", "+\tcheckParse(CHECK_PARSER, source.toCharArray(), expectedError, \"test0031\", null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "587611bf9589762d1bb11f3f95401b54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "\r public void test0028() throws IOException", "signatureAfterChange": "\r public void test0028() throws IOException", "diff": ["-\tString expectedUnitToString = \r", "-\t\t\"class A {\\n\" + \r", "-\t\t\"  A() {\\n\" + \r", "-\t\t\"    super();\\n\" + \r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer>@Marker HashMap<@Readonly String, Object> foo() {\\n\" + \r", "-\t\t\"    return null;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer>HashMap<String, @NonNull Object> bar() {\\n\" + \r", "-\t\t\"    return null;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"}\\n\";\r", "-\tcheckParse(CHECK_ALL & ~CHECK_JAVAC_PARSER, source.toCharArray(), null, \"test0028\", expectedUnitToString);\r", "+\tString expectedError = \r", "+\t\t\t\"----------\\n\" +\r", "+\t\t\t\"1. ERROR in test0028 (at line 2)\\n\" +\r", "+\t\t\t\"\tpublic <Integer, @Positive Integer, @Negative Integer, Integer> @Marker HashMap<@Readonly String, Object> foo() {\\n\" +\r", "+\t\t\t\"\t                                                                ^^^^^^^\\n\" +\r", "+\t\t\t\"Syntax error, type annotations are illegal here\\n\" +\r", "+\t\t\t\"----------\\n\";\r", "+\tcheckParse(CHECK_PARSER, source.toCharArray(), expectedError, \"test0028\", null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae5f0db90afe4a7d23b83617caf70a27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "\r public void test0029() throws IOException", "signatureAfterChange": "\r public void test0029() throws IOException", "diff": ["-\tString expectedUnitToString = \r", "-\t\t\"class A {\\n\" + \r", "-\t\t\"  A() {\\n\" + \r", "-\t\t\"    super();\\n\" + \r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer> @Marker HashMap<@Readonly String, Object>.Iterator foo() {\\n\" + \r", "-\t\t\"    return null;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer>HashMap<String, @NonNull Object>.Iterator bar() {\\n\" + \r", "-\t\t\"    return null;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"}\\n\";\r", "-\tcheckParse(CHECK_ALL & ~CHECK_JAVAC_PARSER, source.toCharArray(), null, \"test0029\", expectedUnitToString);\r", "+\tString expectedError = \r", "+\t\t\t\"----------\\n\" +\r", "+\t\t\t\"1. ERROR in test0029 (at line 2)\\n\" +\r", "+\t\t\t\"\tpublic <Integer, @Positive Integer, @Negative Integer, Integer> @Marker HashMap<@Readonly String, Object>.Iterator foo() {\\n\" +\r", "+\t\t\t\"\t                                                                ^^^^^^^\\n\" +\r", "+\t\t\t\"Syntax error, type annotations are illegal here\\n\" +\r", "+\t\t\t\"----------\\n\";\r", "+\tcheckParse(CHECK_PARSER, source.toCharArray(), expectedError, \"test0029\", null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1b1c514eef2ba33514421d766a1e7ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "\r public void test0027() throws IOException", "signatureAfterChange": "\r public void test0027() throws IOException", "diff": ["-\tString expectedUnitToString = \r", "-\t\t\"class A {\\n\" + \r", "-\t\t\"  A() {\\n\" + \r", "-\t\t\"    super();\\n\" + \r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer>@Marker String foo() {\\n\" + \r", "-\t\t\"    return null;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer>String bar() {\\n\" + \r", "-\t\t\"    return null;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"}\\n\";\r", "-\tcheckParse(CHECK_ALL & ~CHECK_JAVAC_PARSER, source.toCharArray(), null, \"test0027\", expectedUnitToString);\r", "+\tString expectedError = \r", "+\t\t\t\"----------\\n\" +\r", "+\t\t\t\"1. ERROR in test0027 (at line 2)\\n\" +\r", "+\t\t\t\"\tpublic <Integer, @Positive Integer, @Negative Integer, Integer> @Marker String foo() {\\n\" +\r", "+\t\t\t\"\t                                                                ^^^^^^^\\n\" +\r", "+\t\t\t\"Syntax error, type annotations are illegal here\\n\" +\r", "+\t\t\t\"----------\\n\";\r", "+\tcheckParse(CHECK_PARSER, source.toCharArray(), expectedError, \"test0027\", null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd6b14a4e076c484078998317e457bcc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "\r public void test0033() throws IOException", "signatureAfterChange": "\r public void test0033() throws IOException", "diff": ["-\tString expectedUnitToString = \r", "-\t\t\"class A {\\n\" + \r", "-\t\t\"  A() {\\n\" + \r", "-\t\t\"    super();\\n\" + \r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer>@Marker HashMap<@Readonly String, Object>[] @NonEmpty [][] foo() {\\n\" + \r", "-\t\t\"    return null;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer>HashMap<String, @NonNull Object>[] @NonEmpty [][] bar() {\\n\" + \r", "-\t\t\"    return null;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"}\\n\";\r", "-\tcheckParse(CHECK_ALL & ~CHECK_JAVAC_PARSER, source.toCharArray(), null, \"test0033\", expectedUnitToString);\r", "+\tString expectedError = \r", "+\t\t\t\"----------\\n\" +\r", "+\t\t\t\"1. ERROR in test0033 (at line 2)\\n\" +\r", "+\t\t\t\"\tpublic <Integer, @Positive Integer, @Negative Integer, Integer> @Marker HashMap<@Readonly String, Object>[] @NonEmpty[][] foo() {\\n\" +\r", "+\t\t\t\"\t                                                                ^^^^^^^\\n\" +\r", "+\t\t\t\"Syntax error, type annotations are illegal here\\n\" +\r", "+\t\t\t\"----------\\n\";\r", "+\tcheckParse(CHECK_PARSER, source.toCharArray(), expectedError, \"test0033\", null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfb43b09e8f31135c506d5877af6f028", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "\r public void test0032() throws IOException", "signatureAfterChange": "\r public void test0032() throws IOException", "diff": ["-\tString expectedUnitToString = \r", "-\t\t\"class A {\\n\" + \r", "-\t\t\"  A() {\\n\" + \r", "-\t\t\"    super();\\n\" + \r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer>@Marker String[] @NonEmpty [][] foo() {\\n\" + \r", "-\t\t\"    return null;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer>String[] @NonEmpty [][] bar() {\\n\" + \r", "-\t\t\"    return null;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"}\\n\";\r", "-\tcheckParse(CHECK_ALL & ~CHECK_JAVAC_PARSER, source.toCharArray(), null, \"test0032\", expectedUnitToString);\r", "+\tString expectedError = \r", "+\t\t\t\"----------\\n\" +\r", "+\t\t\t\"1. ERROR in test0032 (at line 2)\\n\" +\r", "+\t\t\t\"\tpublic <Integer, @Positive Integer, @Negative Integer, Integer> @Marker String[]@NonEmpty[][] foo() {\\n\" +\r", "+\t\t\t\"\t                                                                ^^^^^^^\\n\" +\r", "+\t\t\t\"Syntax error, type annotations are illegal here\\n\" +\r", "+\t\t\t\"----------\\n\";\r", "+\tcheckParse(CHECK_PARSER, source.toCharArray(), expectedError, \"test0032\", null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3bd5502eade351c6b318a2438ca943e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "\r public void test0030() throws IOException", "signatureAfterChange": "\r public void test0030() throws IOException", "diff": ["-\tString expectedUnitToString = \r", "-\t\t\"class A {\\n\" + \r", "-\t\t\"  A() {\\n\" + \r", "-\t\t\"    super();\\n\" + \r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer> @Marker HashMap<@Readonly String, Object>.Iterator[] @NonEmpty [][] foo() {\\n\" + \r", "-\t\t\"    return null;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer>HashMap<String, @NonNull Object>.Iterator[] @NonEmpty [][] bar() {\\n\" + \r", "-\t\t\"    return null;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"}\\n\";\r", "-\tcheckParse(CHECK_ALL & ~CHECK_JAVAC_PARSER, source.toCharArray(), null, \"test0030\", expectedUnitToString);\r", "+\tString expectedError = \r", "+\t\t\t\"----------\\n\" +\r", "+\t\t\t\"1. ERROR in test0030 (at line 2)\\n\" +\r", "+\t\t\t\"\tpublic <Integer, @Positive Integer, @Negative Integer, Integer> @Marker HashMap<@Readonly String, Object>.Iterator[] @NonEmpty[][] foo() {\\n\" +\r", "+\t\t\t\"\t                                                                ^^^^^^^\\n\" +\r", "+\t\t\t\"Syntax error, type annotations are illegal here\\n\" +\r", "+\t\t\t\"----------\\n\";\r", "+\tcheckParse(CHECK_PARSER, source.toCharArray(), expectedError, \"test0030\", null);\r"]}], "num": 35899}
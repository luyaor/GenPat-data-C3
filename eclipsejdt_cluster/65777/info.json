{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "939e2fa63f6e2b0daa54dc8129e0badc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33b31e514a3f68a607b01f7297986e90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "8c64bffbde25c824dd307f6fe5deea636346d85b", "commitAfterChange": "d36ae205a84625709bd4542660b6890db5faa753", "methodNumberBeforeChange": 500, "methodNumberAfterChange": 500, "signatureBeforeChange": " public boolean automatonWillShift(int token, int lastAction)", "signatureAfterChange": " public boolean automatonWillShift(int token, int lastAction)", "diff": ["+\tif (lastAction <= NUM_RULES) { // in recovery mode, we could take a detour to here, with a pending reduce action.", "+\t\tstackTop --; ", "+\t    lastAction += ERROR_ACTION;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b91f91dc14c0411f60c788445badef2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "c7e96d986053614747f035da8c0e25c52c212a4c", "commitAfterChange": "d90d9bd95abe34cc0cfe3b06356eb1c26ea7d5bf", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r protected CompilationUnitDeclaration endParse(int act)", "signatureAfterChange": "\r protected CompilationUnitDeclaration endParse(int act)", "diff": ["-\tCompilationUnitDeclaration result = super.endParse(act);\r", "-\tnotifySourceElementRequestor();\r", "-\treturn result;\r", "+\tif (compilationUnit != null) {\r", "+\t\tCompilationUnitDeclaration result = super.endParse(act);\r", "+\t\tnotifySourceElementRequestor();\r", "+\t\treturn result;\r", "+\t} else {\r", "+\t\tnotifySourceElementRequestor();\r", "+\t\treturn null;\r", "+\t}\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfce00a2f42a1113b4ab0f000d73bc8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "b5c1652db351290a42a75d3cdd3241441a4413e2", "commitAfterChange": "43bc355f1a88457ab70fc9f06fe5c67fac23d207", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, SourceMethodElementInfo methodInfo, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, SourceMethodElementInfo methodInfo, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\t\t\t\t\t\tExpression expression =  parseMemberValue(defaultValueSource);", "-\t\t\t\t\t\tif (expression != null) {", "-\t\t\t\t\t\t\tannotationMethodDeclaration.defaultValue = expression;", "+\t\t\t\t\t\tif (defaultValueSource != null) {", "+    \t\t\t\t\t\tExpression expression =  parseMemberValue(defaultValueSource);", "+    \t\t\t\t\t\tif (expression != null) {", "+    \t\t\t\t\t\t\tannotationMethodDeclaration.defaultValue = expression;", "+    \t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// could not retrieve the default value", "+\t\t\t\t\t\t\thasDefaultValue = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2bc5e50ed5fcc225b326f55566d3a4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "cc1df04d2a7670c32d491fa2cc726f1c92c0a8b6", "commitAfterChange": "aaa066e01ab34ac4b1e524fd85da7d4cc6ffdf4e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tSystem.arraycopy(originalValuePairs, 0, pairs = new MemberValuePair[pairsLength], 0, pairsLength);", "+\t\tif (pairsLength > 0) {", "+\t\t\tSystem.arraycopy(originalValuePairs, 0, pairs = new MemberValuePair[pairsLength], 0, pairsLength);", "+\t\t} else {", "+\t\t\tpairs = originalValuePairs;", "+\t\t}\t\t"]}], "num": 65777}
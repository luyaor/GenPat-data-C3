{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ccaad3ef8a75cd591c63bc75e3932461", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "061149f8e96faecaecff2c0f138fc12a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void testConstructorDeclarationBug77093() throws CoreException", "signatureAfterChange": " \tpublic void testBug77093constructor() throws CoreException", "diff": ["-\tpublic void testConstructorDeclarationBug77093() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs/src/b77093/X.java\").getType(\"X\");", "-\t\tIMethod method = type.getMethod(\"X\", new String[] {\"[[QZ;\"});", "-\t\tsearch(method, DECLARATIONS, getJavaSearchScopeBugs(), resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b77093/X.java b77093.X(Z[][]) [X] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}", "+\t */", "+\tpublic void testBug77093constructor() throws CoreException {", "+\t\tICompilationUnit workingCopy = null;", "+\t\ttry {", "+\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b77093/X.java\",", "+\t\t\t\t\"package b77093;\\n\" + ", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tclass Z {\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tZ[][] z_arrays;\\n\" + ", "+\t\t\t\t\"\tX() {\\n\" + ", "+\t\t\t\t\"\t\tthis(new Z[10][]);\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tX(Z[][] arrays) {\\n\" + ", "+\t\t\t\t\"\t\tz_arrays = arrays;\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tprivate void foo(Z[] args) {\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tvoid bar() {\\n\" + ", "+\t\t\t\t\"\t\tfor (int i=0; i<z_arrays.length; i++)\\n\" + ", "+\t\t\t\t\"\t\t\tfoo(z_arrays[i]);\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\");", "+\t\t\tIType type = workingCopy.getType(\"X\");", "+\t\t\tIMethod method = type.getMethod(\"X\", new String[] {\"[[QZ;\"});", "+\t\t\t// Search for constructor declarations and references", "+\t\t\tsearch(method, ALL_OCCURRENCES);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b77093/X.java b77093.X() [this(new Z[10][])] EXACT_MATCH\\n\"+", "+\t\t\t\t\"src/b77093/X.java b77093.X(Z[][]) [X] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (workingCopy != null)", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "123e5319d8cbe8ce5b4d194622c56244", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void testMethodReferenceBug70827() throws CoreException", "signatureAfterChange": " \tpublic void testBug70827() throws CoreException", "diff": ["-\t */", "-\tpublic void testMethodReferenceBug70827() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs\", \"src\", \"b70827\", \"A.java\").getType(\"A\");", "-\t\tIMethod method = type.getMethod(\"privateMethod\", new String[] {});", "-\t\tsearch(method, REFERENCES, getJavaSearchScopeBugs(), resultCollector);", "-\t\tassertSearchResults(\"\", resultCollector);", "-\t}", "+\t */", "+\tpublic void testBug70827() throws CoreException {", "+\t\tICompilationUnit workingCopy = null;", "+\t\ttry {", "+\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b70827/A.java\",", "+\t\t\t\t\"package b70827;\\n\" + ", "+\t\t\t\t\"class A {\\n\" + ", "+\t\t\t\t\"\tprivate void privateMethod() {\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"class Second extends A {\\n\" + ", "+\t\t\t\t\"\tvoid call() {\\n\" + ", "+\t\t\t\t\"\t\tint i= privateMethod();\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tint privateMethod() {\\n\" + ", "+\t\t\t\t\"\t\treturn 1;\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\"", "+\t\t\t\t);", "+\t\t\tIType type = workingCopy.getType(\"A\");", "+\t\t\tIMethod method = type.getMethod(\"privateMethod\", new String[] {});", "+\t\t\tsearch(method, REFERENCES);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (workingCopy != null)", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d973b6c7cea16cb7072c066856f47c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "43bf4677e87b76a460506f46871dac9cbe16b176", "commitAfterChange": "f13a740e3b814a194962fd0ef85df91efde745be", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 76, "signatureBeforeChange": " public void test0072() throws JavaModelException", "signatureAfterChange": " public void test0072() throws JavaModelException", "diff": ["-\tCompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "-\tICompilationUnit cu= getCompilationUnit(\"Completion\", \"src3\", \"test0072\", \"Test.java\");", "-", "-\tString str = cu.getSource();", "-\tString completeBehind = \"test0072.p.ImportedClass.ZZ\";", "-\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "-\tcu.codeComplete(cursorLocation, requestor);", "-", "-\tassertResults(", "-\t\t\t\"ZZZ1[FIELD_REF]{test0072.p.ImportedClass.ZZZ1;, Ltest0072.p.ImportedClass;, I, ZZZ1, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"ZZZ2[METHOD_IMPORT]{test0072.p.ImportedClass.ZZZ2;, Ltest0072.p.ImportedClass;, ()V, ZZZ2, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"ZZZ2[METHOD_IMPORT]{test0072.p.ImportedClass.ZZZ2;, Ltest0072.p.ImportedClass;, (I)V, ZZZ2, (i), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\",", "-\t\t\trequestor.getResults());", "+\tICompilationUnit importedClass = null;", "+\ttry {", "+\t\timportedClass = getWorkingCopy(", "+\t\t\t\t\"/Completion/src3/test0072/p/ImportedClass.java\",", "+\t\t\t\t\"package test0072.p;\\n\"+", "+\t\t\t\t\"\\n\"+", "+\t\t\t\t\"public class ImportedClass {\\n\"+", "+\t\t\t\t\"\tpublic static int ZZZ1;\\n\"+", "+\t\t\t\t\"\tpublic static void ZZZ2() {}\\n\"+", "+\t\t\t\t\"\tpublic static void ZZZ2(int i) {}\\n\"+", "+\t\t\t\t\"}\");", "+\t\t", "+\t\tCompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\t\tICompilationUnit cu= getCompilationUnit(\"Completion\", \"src3\", \"test0072\", \"Test.java\");", "+\t", "+\t\tString str = cu.getSource();", "+\t\tString completeBehind = \"test0072.p.ImportedClass.ZZ\";", "+\t\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+\t\tcu.codeComplete(cursorLocation, requestor, this.owner);", "+\t", "+\t\tassertResults(", "+\t\t\t\t\"ZZZ1[FIELD_REF]{test0072.p.ImportedClass.ZZZ1;, Ltest0072.p.ImportedClass;, I, ZZZ1, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"ZZZ2[METHOD_IMPORT]{test0072.p.ImportedClass.ZZZ2;, Ltest0072.p.ImportedClass;, ()V, ZZZ2, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"ZZZ2[METHOD_IMPORT]{test0072.p.ImportedClass.ZZZ2;, Ltest0072.p.ImportedClass;, (I)V, ZZZ2, (i), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\trequestor.getResults());", "+\t} finally {", "+\t\tif(importedClass != null) {", "+\t\t\timportedClass.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5207021ac4fde368ef058b395c2dfe11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "43bf4677e87b76a460506f46871dac9cbe16b176", "commitAfterChange": "f13a740e3b814a194962fd0ef85df91efde745be", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 77, "signatureBeforeChange": " public void test0073() throws JavaModelException", "signatureAfterChange": " public void test0073() throws JavaModelException", "diff": ["-\tCompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "-\tICompilationUnit cu= getCompilationUnit(\"Completion\", \"src3\", \"test0073\", \"Test.java\");", "-", "-\tString str = cu.getSource();", "-\tString completeBehind = \"test0073.p.ImportedClass.Inner.ZZ\";", "-\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "-\tcu.codeComplete(cursorLocation, requestor);", "-", "-\tassertResults(", "-\t\t\t\"ZZZ1[FIELD_REF]{test0073.p.ImportedClass.Inner.ZZZ1;, Ltest0073.p.ImportedClass$Inner;, I, ZZZ1, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"ZZZ2[METHOD_IMPORT]{test0073.p.ImportedClass.Inner.ZZZ2;, Ltest0073.p.ImportedClass$Inner;, ()V, ZZZ2, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"ZZZ2[METHOD_IMPORT]{test0073.p.ImportedClass.Inner.ZZZ2;, Ltest0073.p.ImportedClass$Inner;, (I)V, ZZZ2, (i), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\",", "-\t\t\trequestor.getResults());", "+\tICompilationUnit importedClass = null;", "+\ttry {", "+\t\timportedClass = getWorkingCopy(", "+\t\t\t\t\"/Completion/src3/test0073/p/ImportedClass.java\",", "+\t\t\t\t\"package test0073.p;\\n\"+", "+\t\t\t\t\"\\n\"+", "+\t\t\t\t\"public class ImportedClass {\\n\"+", "+\t\t\t\t\"\tpublic static class Inner {\\n\"+", "+\t\t\t\t\"\t\tpublic static int ZZZ1;\\n\"+", "+\t\t\t\t\"\t\tpublic static void ZZZ2() {}\\n\"+", "+\t\t\t\t\"\t\tpublic static void ZZZ2(int i) {}\\n\"+", "+\t\t\t\t\"\t}\\n\"+", "+\t\t\t\t\"}\");", "+\t\t", "+\t\tCompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\t\tICompilationUnit cu= getCompilationUnit(\"Completion\", \"src3\", \"test0073\", \"Test.java\");", "+\t", "+\t\tString str = cu.getSource();", "+\t\tString completeBehind = \"test0073.p.ImportedClass.Inner.ZZ\";", "+\t\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+\t\tcu.codeComplete(cursorLocation, requestor, this.owner);", "+\t", "+\t\tassertResults(", "+\t\t\t\t\"ZZZ1[FIELD_REF]{test0073.p.ImportedClass.Inner.ZZZ1;, Ltest0073.p.ImportedClass$Inner;, I, ZZZ1, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"ZZZ2[METHOD_IMPORT]{test0073.p.ImportedClass.Inner.ZZZ2;, Ltest0073.p.ImportedClass$Inner;, ()V, ZZZ2, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"ZZZ2[METHOD_IMPORT]{test0073.p.ImportedClass.Inner.ZZZ2;, Ltest0073.p.ImportedClass$Inner;, (I)V, ZZZ2, (i), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\trequestor.getResults());", "+\t} finally {", "+\t\tif(importedClass != null) {", "+\t\t\timportedClass.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b07c901db3646a88dbaf7ac1979fa3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void testMethodReferenceBug41018() throws CoreException", "signatureAfterChange": " \tpublic void testBug41018() throws CoreException", "diff": ["-\t */", "-\tpublic void testMethodReferenceBug41018() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs\", \"src\", \"b41018\", \"A.java\").getType(\"A\");", "-\t\tIMethod method = type.getMethod(\"methodA\", new String[] { \"QClassB.InnerInterface;\" });", "-\t//\tJavaSearchResultCollector resultCollector = new JavaSearchResultCollector();", "-\t\tsearch(", "-\t\t\tmethod, ", "-\t\t\tREFERENCES, ", "-\t\t\tgetJavaSearchScopeBugs(), ", "-\t\t\tthis.resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b41018/A.java void b41018.A.anotherMethod() [methodA(null)] EXACT_MATCH\",", "-\t\t\tthis.resultCollector);", "-\t}", "+\tpublic void testBug41018() throws CoreException {", "+\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b41018/A.java\",", "+\t\t\t\t\"package b41018;\\n\" +", "+\t\t\t\t\"public class A {\\n\" + ", "+\t\t\t\t\"\tprotected void anotherMethod() {\\n\" + ", "+\t\t\t\t\"\t\tmethodA(null);\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tprivate Object methodA(ClassB.InnerInterface arg3) {\\n\" + ", "+\t\t\t\t\"\t\treturn null;\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"class ClassB implements InterfaceB {\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"interface InterfaceB {\\n\" + ", "+\t\t\t\t\"\tinterface InnerInterface {\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\"", "+\t\t\t\t);", "+\t\t\tIType type = workingCopy.getType(\"A\");", "+\t\t\tIMethod method = type.getMethod(\"methodA\", new String[] { \"QClassB.InnerInterface;\" });", "+\t\t\tsearch(method, REFERENCES);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b41018/A.java void b41018.A.anotherMethod() [methodA(null)] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (workingCopy != null)", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ea8718a3ef2aa7fa42031232327a755", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void testFieldReferenceBug73112b() throws CoreException", "signatureAfterChange": " \tpublic void testBug73112b() throws CoreException", "diff": ["-\t}", "-\tpublic void testFieldReferenceBug73112b() throws CoreException {", "-\t\tsearch(", "-\t\t\t\"fieldB73112*\",", "-\t\t\tFIELD,", "-\t\t\tALL_OCCURRENCES,", "-\t\t\tgetJavaSearchScopeBugs(), ", "-\t\t\tthis.resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b73112/B.java b73112.B.fieldB73112a [fieldB73112a] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73112/B.java b73112.B.fieldB73112b [fieldB73112b] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73112/B.java b73112.B.fieldB73112c [fieldB73112c] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73112/B.java b73112.B.fieldB73112c [fieldB73112a] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73112/B.java b73112.B.fieldB73112c [fieldB73112b] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73112/B.java b73112.B.fieldB73112d [fieldB73112d] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73112/B.java b73112.B.fieldB73112d [fieldB73112c] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73112/B.java b73112.B.fieldB73112d [fieldB73112a] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73112/B.java b73112.B.fieldB73112e [fieldB73112e] EXACT_MATCH\",", "-\t\t\tthis.resultCollector);", "-\t}", "+\t}", "+\tpublic void testBug73112b() throws CoreException {", "+\t\tICompilationUnit workingCopy = null;", "+\t\ttry {", "+\t\t\tworkingCopy = super.getWorkingCopy(\"/JavaSearchBugs/src/b73112/B.java\",", "+\t\t\t\t\"package b73112;\\n\" + ", "+\t\t\t\t\"public class B {\\n\" + ", "+\t\t\t\t\"    int fieldB73112a, fieldB73112b = 10;\\n\" + ", "+\t\t\t\t\"    int fieldB73112c = fieldB73112a + fieldB73112b, fieldB73112d = fieldB73112c + fieldB73112a, fieldB73112e;\\n\" + ", "+\t\t\t\t\"    \\n\" + ", "+\t\t\t\t\"    public void method(){}\\n\" + ", "+\t\t\t\t\"}\\n\");", "+\t\t\tworkingCopy.commitWorkingCopy(true, null);", "+\t\t\t// search field references to first multiple field", "+\t\t\tsearch(", "+\t\t\t\t\"fieldB73112*\",", "+\t\t\t\tFIELD,", "+\t\t\t\tALL_OCCURRENCES,", "+\t\t\t\tgetJavaSearchScopeBugs(),", "+\t\t\t\tthis.resultCollector);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b73112/B.java b73112.B.fieldB73112a [fieldB73112a] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73112/B.java b73112.B.fieldB73112b [fieldB73112b] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73112/B.java b73112.B.fieldB73112c [fieldB73112c] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73112/B.java b73112.B.fieldB73112c [fieldB73112a] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73112/B.java b73112.B.fieldB73112c [fieldB73112b] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73112/B.java b73112.B.fieldB73112d [fieldB73112d] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73112/B.java b73112.B.fieldB73112d [fieldB73112c] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73112/B.java b73112.B.fieldB73112d [fieldB73112a] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73112/B.java b73112.B.fieldB73112e [fieldB73112e] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (workingCopy != null)", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a95249756c4910477da13cd3ab40c1e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "43bf4677e87b76a460506f46871dac9cbe16b176", "commitAfterChange": "f13a740e3b814a194962fd0ef85df91efde745be", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 78, "signatureBeforeChange": " public void test0074() throws JavaModelException", "signatureAfterChange": " public void test0074() throws JavaModelException", "diff": ["-\tCompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "-\tICompilationUnit cu= getCompilationUnit(\"Completion\", \"src3\", \"test0074\", \"Test.java\");", "-", "-\tString str = cu.getSource();", "-\tString completeBehind = \"test0074.p.ImportedClass.Inner.ZZ\";", "-\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "-\tcu.codeComplete(cursorLocation, requestor);", "-", "-\tassertResults(", "-\t\t\t\"ZZZ1[FIELD_REF]{test0074.p.ImportedClass.Inner.ZZZ1;, Ltest0074.p.ImportedClass$Inner;, I, ZZZ1, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"ZZZ2[METHOD_IMPORT]{test0074.p.ImportedClass.Inner.ZZZ2;, Ltest0074.p.ImportedClass$Inner;, ()V, ZZZ2, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"ZZZ2[METHOD_IMPORT]{test0074.p.ImportedClass.Inner.ZZZ2;, Ltest0074.p.ImportedClass$Inner;, (I)V, ZZZ2, (i), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\",", "-\t\t\trequestor.getResults());", "+\tICompilationUnit importedClass = null;", "+\ttry {", "+\t\timportedClass = getWorkingCopy(", "+\t\t\t\t\"/Completion/src3/test0074/p/ImportedClass.java\",", "+\t\t\t\t\"package test0074.p;\\n\"+", "+\t\t\t\t\"\\n\"+", "+\t\t\t\t\"public class ImportedClass {\\n\"+", "+\t\t\t\t\"\tpublic class Inner {\\n\"+", "+\t\t\t\t\"\t\tpublic static int ZZZ1;\\n\"+", "+\t\t\t\t\"\t\tpublic static void ZZZ2() {}\\n\"+", "+\t\t\t\t\"\t\tpublic static void ZZZ2(int i) {}\\n\"+", "+\t\t\t\t\"\t}\\n\"+", "+\t\t\t\t\"}\");", "+\t\t", "+\t\tCompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\t\tICompilationUnit cu= getCompilationUnit(\"Completion\", \"src3\", \"test0074\", \"Test.java\");", "+\t", "+\t\tString str = cu.getSource();", "+\t\tString completeBehind = \"test0074.p.ImportedClass.Inner.ZZ\";", "+\t\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+\t\tcu.codeComplete(cursorLocation, requestor, this.owner);", "+\t", "+\t\tassertResults(", "+\t\t\t\t\"ZZZ1[FIELD_REF]{test0074.p.ImportedClass.Inner.ZZZ1;, Ltest0074.p.ImportedClass$Inner;, I, ZZZ1, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"ZZZ2[METHOD_IMPORT]{test0074.p.ImportedClass.Inner.ZZZ2;, Ltest0074.p.ImportedClass$Inner;, ()V, ZZZ2, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"ZZZ2[METHOD_IMPORT]{test0074.p.ImportedClass.Inner.ZZZ2;, Ltest0074.p.ImportedClass$Inner;, (I)V, ZZZ2, (i), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\trequestor.getResults());", "+\t} finally {", "+\t\tif(importedClass != null) {", "+\t\t\timportedClass.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbd82fc0c9265b01563072e8cbff471b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void testConstructorReferenceBug77388() throws CoreException", "signatureAfterChange": " \tpublic void testBug77388() throws CoreException", "diff": ["-\t */", "-\tpublic void testConstructorReferenceBug77388() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs/src/b77388/Test.java\").getType(\"Test\");", "-\t\tIMethod method = type.getMethod(\"Test\", new String[] {\"I\", \"I\"});", "-\t\tsearch(method, REFERENCES, getJavaSearchScopeBugs(), resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b77388/Test.java void b77388.Test.run() [new Test(1, 2)] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}", "+\t */", "+\tpublic void testBug77388() throws CoreException {", "+\t\tICompilationUnit workingCopy = null;", "+\t\ttry {", "+\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b77388/Test.java\",", "+\t\t\t\t\"package b77388;\\n\" + ", "+\t\t\t\t\"class Test {\\n\" + ", "+\t\t\t\t\"\tTest(int a, int b) {\t}\\n\" + ", "+\t\t\t\t\"\tvoid take(Test mc) { }\\n\" + ", "+\t\t\t\t\"\tvoid run() {\\n\" + ", "+\t\t\t\t\"\t\ttake( new Test(1, 2) ); // space in \\\") )\\\" is in match\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\");", "+\t\t\tIType type = workingCopy.getType(\"Test\");", "+\t\t\tIMethod method = type.getMethod(\"Test\", new String[] {\"I\", \"I\"});", "+\t\t\t// Search for constructor references", "+\t\t\tsearch(method, REFERENCES);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b77388/Test.java void b77388.Test.run() [new Test(1, 2)] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (workingCopy != null)", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f716be45e979257c5c94c55e3b0dccf2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void testTypeReferenceBug79803() throws CoreException", "signatureAfterChange": " \tpublic void testBug79803() throws CoreException", "diff": ["+\t */", "+\tpublic void testBug79803() throws CoreException {", "+\t\tICompilationUnit workingCopy = null;", "+\t\ttry {", "+\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b79803/A.java\",", "+\t\t\t\t\"package b79803;\\n\" + ", "+\t\t\t\t\"class A<A> {\\n\" + ", "+\t\t\t\t\"    A a;\\n\" + ", "+\t\t\t\t\"    b79803.A pa= new b79803.A();\\n\" + ", "+\t\t\t\t\"}\\n\"\t);", "+\t\t\t// search for first and second method should both return 2 inaccurate matches", "+\t\t\tIType type = workingCopy.getType(\"A\");", "+\t\t\tsearch(type,", "+\t\t\t\tREFERENCES,", "+\t\t\t\tSearchPattern.R_CASE_SENSITIVE|SearchPattern.R_ERASURE_MATCH,", "+\t\t\t\tgetJavaSearchScopeBugs(\"b79803\", false),", "+\t\t\t\tthis.resultCollector);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b79803/A.java b79803.A.pa [b79803.A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b79803/A.java b79803.A.pa [b79803.A] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (workingCopy != null)", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t}", "+\t}", "-\t */", "-\tpublic void testTypeReferenceBug79803() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs\", \"src\", \"b79803\", \"A.java\").getType(\"A\");", "-\t\tsearch(type, REFERENCES, SearchPattern.R_CASE_SENSITIVE|SearchPattern.R_ERASURE_MATCH, getJavaSearchScopeBugs(\"b79803\", false), this.resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b79803/A.java b79803.A.pa [b79803.A] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b79803/A.java b79803.A.pa [b79803.A] EXACT_MATCH\",", "-\t\t\tthis.resultCollector);", "-\t}"]}], "num": 59421}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3152b3a430b89ec4a5205d57e080b54c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a576913f0e39d6c672deaa36393a41d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+\t\t\t\tflowInfo,", "-\t\tFlowInfo actionInfo = flowInfo.copy().unconditionalInits().discardNullRelatedInitializations();", "+\t\tUnconditionalFlowInfo actionInfo = flowInfo.nullInfoLessUnconditionalCopy();", "+\t\t// we need to collect the contribution to nulls of the coming paths through the", "+\t\t// loop, be they falling through normally or branched to break, continue labels", "+\t\t// or catch blocks", "-\t\t\tactionInfo = action.analyseCode(currentScope, loopingContext, actionInfo);", "+\t\t\tactionInfo = action.", "+\t\t\t\tanalyseCode(currentScope, loopingContext, actionInfo).", "+\t\t\t\tunconditionalInits();", "-\t\t\tif (!actionInfo.isReachable() && !loopingContext.initsOnContinue.isReachable()) {", "+\t\t\tif ((actionInfo.tagBits & ", "+\t\t\t\t\tloopingContext.initsOnContinue.tagBits & ", "+\t\t\t\t\tFlowInfo.UNREACHABLE) != 0) {", "-\t\tactionInfo =", "+\t\tLoopingFlowContext condLoopContext;", "+\t\tFlowInfo condInfo =", "-\t\t\t\tloopingContext,", "+\t\t\t\t(condLoopContext =", "+\t\t\t\t\tnew LoopingFlowContext(flowContext,\tflowInfo, this, null, ", "+\t\t\t\t\t\tnull, currentScope)),", "-\t\t\t\t\t: (actionInfo.mergedWith(loopingContext.initsOnContinue))));", "+\t\t\t\t\t: (actionInfo.mergedWith(loopingContext.initsOnContinue))).copy());", "-\t\t\tloopingContext.complainOnDeferredChecks(currentScope, actionInfo);", "+\t\t\tloopingContext.complainOnDeferredFinalChecks(currentScope, condInfo);", "+\t\t\tcondLoopContext.complainOnDeferredFinalChecks(currentScope, condInfo);", "+\t\t\tUnconditionalFlowInfo checkFlowInfo;", "+\t\t\tloopingContext.complainOnDeferredNullChecks(currentScope, ", "+\t\t\t\t\tcheckFlowInfo = actionInfo.", "+\t\t\t\t\t\taddPotentialNullInfoFrom(", "+\t\t\t\t\t\t  condInfo.initsWhenTrue().unconditionalInits()));", "+\t\t\tcondLoopContext.complainOnDeferredNullChecks(currentScope, ", "+\t\t\t\t\tcheckFlowInfo);", "-\t\t\t\tisConditionOptimizedTrue, ", "-\t\t\t\tactionInfo.initsWhenFalse().addInitializationsFrom(flowInfo), // recover null inits from before condition analysis", "+\t\t\t\tisConditionOptimizedTrue,", "+\t\t\t\t(condInfo.tagBits & FlowInfo.UNREACHABLE) == 0 ?", "+\t\t\t\t\t\tflowInfo.addInitializationsFrom(condInfo.initsWhenFalse()) : condInfo, ", "+\t\t\t\t\t// recover null inits from before condition analysis"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a3dfb03c6d5625042d5e40f163fcfc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+\t\tthis.collection.checkNPE(currentScope, flowContext, flowInfo, true);", "-\t\tFlowInfo condInfo = flowInfo.copy().unconditionalInits().discardNullRelatedInitializations();", "-\t\tcondInfo = this.collection.analyseCode(scope, flowContext, condInfo);", "+\t\tFlowInfo condInfo = this.collection.analyseCode(scope, flowContext, flowInfo.copy());", "-\t\tLoopingFlowContext loopingContext = new LoopingFlowContext(flowContext, this, breakLabel, continueLabel, scope);", "-\t\tFlowInfo actionInfo = condInfo.initsWhenTrue().copy();", "+\t\tLoopingFlowContext loopingContext = ", "+\t\t\tnew LoopingFlowContext(flowContext, flowInfo, this, breakLabel, ", "+\t\t\t\tcontinueLabel, scope);", "+\t\tUnconditionalFlowInfo actionInfo = ", "+\t\t\tcondInfo.nullInfoLessUnconditionalCopy();", "-\t\t\t\tactionInfo = action.analyseCode(scope, loopingContext, actionInfo);", "+\t\t\t\tactionInfo = action.", "+\t\t\t\t\tanalyseCode(scope, loopingContext, actionInfo).", "+\t\t\t\t\tunconditionalCopy();", "-\t\t\texitBranch = condInfo.initsWhenFalse();", "-\t\t\texitBranch.addInitializationsFrom(flowInfo); // recover null inits from before condition analysis\t\t\t", "-\t\t\tif (!actionInfo.isReachable() && !loopingContext.initsOnContinue.isReachable()) {", "+\t\t\texitBranch = flowInfo.unconditionalCopy().", "+\t\t\t\taddInitializationsFrom(condInfo.initsWhenFalse()); ", "+\t\t\t// TODO (maxime) no need to test when false: can optimize (same for action being unreachable above) ", "+\t\t\tif ((actionInfo.tagBits & loopingContext.initsOnContinue.tagBits &", "+\t\t\t\t\tFlowInfo.UNREACHABLE) != 0) {", "-\t\t\t\tactionInfo = actionInfo.mergedWith(loopingContext.initsOnContinue.unconditionalInits());", "-\t\t\t\tloopingContext.complainOnDeferredChecks(scope, actionInfo);", "-\t\t\t\texitBranch.addPotentialInitializationsFrom(actionInfo.unconditionalInits());", "+\t\t\t\tactionInfo = actionInfo.mergedWith(loopingContext.initsOnContinue);", "+\t\t\t\tloopingContext.complainOnDeferredFinalChecks(scope, actionInfo);", "+\t\t\t\texitBranch.addPotentialInitializationsFrom(actionInfo);", "+\t\tloopingContext.complainOnDeferredNullChecks(currentScope, actionInfo);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce7074a19aa1aaf72374511991259263", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/WhileStatement.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tFlowInfo condInfo = flowInfo.copy().unconditionalInits().discardNullRelatedInitializations();", "+\t\tFlowInfo condInfo =\tflowInfo.nullInfoLessUnconditionalCopy();", "+\t\t// we need to collect the contribution to nulls of the coming paths through the", "+\t\t// loop, be they falling through normally or branched to break, continue labels", "+\t\t// or catch blocks", "-\t\t\t\t\tnew LoopingFlowContext(flowContext, this, null, null, currentScope)),", "+\t\t\t\t\tnew LoopingFlowContext(flowContext, flowInfo, this, null, ", "+\t\t\t\t\t\tnull, currentScope)),", "-\t\t\tcondLoopContext.complainOnDeferredChecks(currentScope, condInfo);", "+\t\t\tcondLoopContext.complainOnDeferredFinalChecks(currentScope, ", "+\t\t\t\t\tcondInfo);", "+\t\t\tcondLoopContext.complainOnDeferredNullChecks(currentScope,", "+\t\t\t\tcondInfo.unconditionalInits());", "-\t\t\t\tFlowInfo mergedInfo = condInfo.initsWhenFalse().unconditionalInits();", "+\t\t\t\tFlowInfo mergedInfo = condInfo.initsWhenFalse();", "-\t\t\t\treturn mergedInfo;", "+\t\t\t\treturn flowInfo.unconditionalInits().", "+\t\t\t\t\taddPotentialNullInfoFrom(", "+\t\t\t\t\t\t\tcondInfo.initsWhenFalse().unconditionalInits()); ", "+\t\t\t\t\tflowInfo,", "-\t\t\texitBranch = condInfo.initsWhenFalse();", "-\t\t\texitBranch.addInitializationsFrom(flowInfo); // recover null inits from before condition analysis", "-\t\t\tif (!actionInfo.isReachable() && !loopingContext.initsOnContinue.isReachable()) {", "+\t\t\texitBranch = flowInfo.copy();", "+\t\t\t// need to start over from flowInfo so as to get null inits", "+", "+\t\t\tif ((actionInfo.tagBits & ", "+\t\t\t\t\tloopingContext.initsOnContinue.tagBits &", "+\t\t\t\t\tFlowInfo.UNREACHABLE) != 0) {", "+\t\t\t\texitBranch.addInitializationsFrom(condInfo.initsWhenFalse());", "-\t\t\t\tcondLoopContext.complainOnDeferredChecks(currentScope, condInfo);", "+\t\t\t\tcondLoopContext.complainOnDeferredFinalChecks(currentScope, ", "+\t\t\t\t\t\tcondInfo);", "-\t\t\t\tloopingContext.complainOnDeferredChecks(currentScope, actionInfo);", "-\t\t\t\texitBranch.addPotentialInitializationsFrom(actionInfo.unconditionalInits());", "+\t\t\t\tcondLoopContext.complainOnDeferredNullChecks(currentScope, ", "+\t\t\t\t\t\tactionInfo);", "+\t\t\t\tloopingContext.complainOnDeferredFinalChecks(currentScope, ", "+\t\t\t\t\t\tactionInfo);", "+\t\t\t\tloopingContext.complainOnDeferredNullChecks(currentScope, ", "+\t\t\t\t\t\tactionInfo);", "+\t\t\t\texitBranch.", "+\t\t\t\t\taddPotentialInitializationsFrom(", "+\t\t\t\t\t\tactionInfo.unconditionalInits()).", "+\t\t\t\t\taddInitializationsFrom(condInfo.initsWhenFalse());"]}], "num": 72252}
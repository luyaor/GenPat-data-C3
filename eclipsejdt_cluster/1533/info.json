{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb3ece08804f5ed8bcc5c635fea0da9a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3daa10822316b1546a155291806251f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 121, "signatureBeforeChange": " public void invalidConstructor(Statement statement, MethodBinding targetConstructor)", "signatureAfterChange": " public void invalidConstructor(Statement statement, MethodBinding targetConstructor)", "diff": ["+    MethodBinding shownConstructor = targetConstructor;", "+\t\t\tProblemMethodBinding problemConstructor = (ProblemMethodBinding) targetConstructor;", "+\t\t\tif (problemConstructor.closestMatch != null) {", "+\t\t\t    shownConstructor = problemConstructor.closestMatch.original();", "+\t\t    }\t\t\t\t\t", "+\t\tcase ParameterBoundMismatch :", "+\t\t\tproblemConstructor = (ProblemMethodBinding) targetConstructor;", "+\t\t\tParameterizedGenericMethodBinding substitutedConstructor = (ParameterizedGenericMethodBinding) problemConstructor.closestMatch;", "+\t\t\tshownConstructor = substitutedConstructor.original();", "+\t\t\tTypeBinding typeArgument = targetConstructor.parameters[0];", "+\t\t\tTypeVariableBinding typeParameter = (TypeVariableBinding) targetConstructor.parameters[1];", "+\t\t\tthis.handle(", "+\t\t\t\tIProblem.GenericConstructorTypeArgumentMismatch,", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownConstructor.declaringClass.sourceName()),", "+\t\t\t\t        parametersAsString(shownConstructor.parameters, false), ", "+\t\t\t\t        new String(shownConstructor.declaringClass.readableName()), ", "+\t\t\t\t        parametersAsString(substitutedConstructor.parameters, false), ", "+\t\t\t\t        new String(typeArgument.readableName()), ", "+\t\t\t\t        new String(typeParameter.sourceName), ", "+\t\t\t\t        parameterBoundAsString(typeParameter, false) },", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownConstructor.declaringClass.sourceName()),", "+\t\t\t\t        parametersAsString(shownConstructor.parameters, true), ", "+\t\t\t\t        new String(shownConstructor.declaringClass.shortReadableName()), ", "+\t\t\t\t        parametersAsString(substitutedConstructor.parameters, true), ", "+\t\t\t\t        new String(typeArgument.shortReadableName()), ", "+\t\t\t\t        new String(typeParameter.sourceName), ", "+\t\t\t\t        parameterBoundAsString(typeParameter, true) },", "+\t\t\t\tstatement.sourceStart,", "+\t\t\t\tstatement.sourceEnd);\t\t    ", "+\t\t\treturn;\t\t    ", "+\t\t\t", "+\t\tcase TypeParameterArityMismatch :", "+\t\t\tproblemConstructor = (ProblemMethodBinding) targetConstructor;", "+\t\t\tshownConstructor = problemConstructor.closestMatch;", "+\t\t\tif (shownConstructor.typeVariables == TypeConstants.NoTypeVariables) {", "+\t\t\t\tthis.handle(", "+\t\t\t\t\tIProblem.NonGenericConstructor,", "+\t\t\t\t\tnew String[] { ", "+\t\t\t\t\t        new String(shownConstructor.declaringClass.sourceName()),", "+\t\t\t\t\t        parametersAsString(shownConstructor.parameters, false), ", "+\t\t\t\t\t        new String(shownConstructor.declaringClass.readableName()), ", "+\t\t\t\t\t        parametersAsString(targetConstructor.parameters, false) },", "+\t\t\t\t\tnew String[] { ", "+\t\t\t\t\t        new String(shownConstructor.declaringClass.sourceName()),", "+\t\t\t\t\t        parametersAsString(shownConstructor.parameters, true), ", "+\t\t\t\t\t        new String(shownConstructor.declaringClass.shortReadableName()), ", "+\t\t\t\t\t        parametersAsString(targetConstructor.parameters, true) },", "+\t\t\t\t\tstatement.sourceStart,", "+\t\t\t\t\tstatement.sourceEnd);\t\t    ", "+\t\t\t} else {", "+\t\t\t\tthis.handle(", "+\t\t\t\t\tIProblem.IncorrectArityForParameterizedConstructor  ,", "+\t\t\t\t\tnew String[] { ", "+\t\t\t\t\t        new String(shownConstructor.declaringClass.sourceName()),", "+\t\t\t\t\t        parametersAsString(shownConstructor.parameters, false), ", "+\t\t\t\t\t        new String(shownConstructor.declaringClass.readableName()), ", "+\t\t\t\t\t\t\tparametersAsString(shownConstructor.typeVariables, false),", "+\t\t\t\t\t        parametersAsString(targetConstructor.parameters, false) },", "+\t\t\t\t\tnew String[] { ", "+\t\t\t\t\t        new String(shownConstructor.declaringClass.sourceName()),", "+\t\t\t\t\t        parametersAsString(shownConstructor.parameters, true), ", "+\t\t\t\t\t        new String(shownConstructor.declaringClass.shortReadableName()), ", "+\t\t\t\t\t\t\tparametersAsString(shownConstructor.typeVariables, true),", "+\t\t\t\t\t        parametersAsString(targetConstructor.parameters, true) },", "+\t\t\t\t\tstatement.sourceStart,", "+\t\t\t\t\tstatement.sourceEnd);\t\t    ", "+\t\t\t}", "+\t\t\treturn;", "+\t\tcase ParameterizedMethodTypeMismatch :", "+\t\t\tproblemConstructor = (ProblemMethodBinding) targetConstructor;", "+\t\t\tshownConstructor = problemConstructor.closestMatch;", "+\t\t\tthis.handle(", "+\t\t\t\tIProblem.ParameterizedConstructorArgumentTypeMismatch,", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownConstructor.declaringClass.sourceName()),", "+\t\t\t\t        parametersAsString(shownConstructor.parameters, false), ", "+\t\t\t\t        new String(shownConstructor.declaringClass.readableName()), ", "+\t\t\t\t\t\tparametersAsString(((ParameterizedGenericMethodBinding)shownConstructor).typeArguments, false),", "+\t\t\t\t        parametersAsString(targetConstructor.parameters, false) },", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownConstructor.declaringClass.sourceName()),", "+\t\t\t\t        parametersAsString(shownConstructor.parameters, true), ", "+\t\t\t\t        new String(shownConstructor.declaringClass.shortReadableName()), ", "+\t\t\t\t\t\tparametersAsString(((ParameterizedGenericMethodBinding)shownConstructor).typeArguments, true),", "+\t\t\t\t        parametersAsString(targetConstructor.parameters, true) },", "+\t\t\t\tstatement.sourceStart,", "+\t\t\t\tstatement.sourceEnd);\t\t    ", "+\t\t\treturn;", "-\t\tnew String[] {new String(targetConstructor.declaringClass.readableName()), parametersAsString(targetConstructor)},", "-\t\tnew String[] {new String(targetConstructor.declaringClass.shortReadableName()), parametersAsShortString(targetConstructor)},", "+\t\tnew String[] {new String(targetConstructor.declaringClass.readableName()), parametersAsString(shownConstructor.parameters, false)},", "+\t\tnew String[] {new String(targetConstructor.declaringClass.shortReadableName()), parametersAsString(shownConstructor.parameters, true)},"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d50f1b3a41408dd6bd92c9f1d51c412c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "0b874da6971de1fd32448699ceb47420d2fca967", "commitAfterChange": "26e0fa15f2532c349b39ea632fd814fc4a7186c8", "methodNumberBeforeChange": 204, "methodNumberAfterChange": 204, "signatureBeforeChange": " public void javadocInvalidConstructor(Statement statement, MethodBinding targetConstructor, int modifiers)", "signatureAfterChange": " public void javadocInvalidConstructor(Statement statement, MethodBinding targetConstructor, int modifiers)", "diff": ["+\tint sourceStart = statement.sourceStart;", "+\tint sourceEnd = statement.sourceEnd;", "+\tif (statement instanceof AllocationExpression) {", "+\t\tAllocationExpression allocation = (AllocationExpression)statement;", "+\t\tif (allocation.enumConstant != null) {", "+\t\t\tsourceStart = allocation.enumConstant.sourceStart;", "+\t\t\tsourceEnd = allocation.enumConstant.sourceEnd;", "+\t\t}", "+\t}", "+\tProblemMethodBinding problemConstructor = null;", "+\tMethodBinding shownConstructor = null;", "+\t\tcase ParameterBoundMismatch :", "+\t\t\tproblemConstructor = (ProblemMethodBinding) targetConstructor;", "+\t\t\tParameterizedGenericMethodBinding substitutedConstructor = (ParameterizedGenericMethodBinding) problemConstructor.closestMatch;", "+\t\t\tshownConstructor = substitutedConstructor.original();", "+\t\t\tTypeBinding typeArgument = targetConstructor.parameters[0];", "+\t\t\tTypeVariableBinding typeParameter = (TypeVariableBinding) targetConstructor.parameters[1];", "+\t\t\tthis.handle(", "+\t\t\t\tIProblem.JavadocGenericConstructorTypeArgumentMismatch,", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownConstructor.declaringClass.sourceName()),", "+\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, false), ", "+\t\t\t\t        new String(shownConstructor.declaringClass.readableName()), ", "+\t\t\t\t        typesAsString(substitutedConstructor.isVarargs(), substitutedConstructor.parameters, false), ", "+\t\t\t\t        new String(typeArgument.readableName()), ", "+\t\t\t\t        new String(typeParameter.sourceName), ", "+\t\t\t\t        parameterBoundAsString(typeParameter, false) },", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownConstructor.declaringClass.sourceName()),", "+\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, true), ", "+\t\t\t\t        new String(shownConstructor.declaringClass.shortReadableName()), ", "+\t\t\t\t        typesAsString(substitutedConstructor.isVarargs(), substitutedConstructor.parameters, true), ", "+\t\t\t\t        new String(typeArgument.shortReadableName()), ", "+\t\t\t\t        new String(typeParameter.sourceName), ", "+\t\t\t\t        parameterBoundAsString(typeParameter, true) },", "+\t\t\t\tsourceStart,", "+\t\t\t\tsourceEnd);\t\t    ", "+\t\t\treturn;\t\t    ", "+\t\t\t", "+\t\tcase TypeParameterArityMismatch :", "+\t\t\tproblemConstructor = (ProblemMethodBinding) targetConstructor;", "+\t\t\tshownConstructor = problemConstructor.closestMatch;", "+\t\t\tif (shownConstructor.typeVariables == TypeConstants.NoTypeVariables) {", "+\t\t\t\tthis.handle(", "+\t\t\t\t\tIProblem.JavadocNonGenericConstructor,", "+\t\t\t\t\tnew String[] { ", "+\t\t\t\t\t        new String(shownConstructor.declaringClass.sourceName()),", "+\t\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, false), ", "+\t\t\t\t\t        new String(shownConstructor.declaringClass.readableName()), ", "+\t\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, false) },", "+\t\t\t\t\tnew String[] { ", "+\t\t\t\t\t        new String(shownConstructor.declaringClass.sourceName()),", "+\t\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, true), ", "+\t\t\t\t\t        new String(shownConstructor.declaringClass.shortReadableName()), ", "+\t\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, true) },", "+\t\t\t\t\tsourceStart,", "+\t\t\t\t\tsourceEnd);\t\t    ", "+\t\t\t} else {", "+\t\t\t\tthis.handle(", "+\t\t\t\t\tIProblem.JavadocIncorrectArityForParameterizedConstructor  ,", "+\t\t\t\t\tnew String[] { ", "+\t\t\t\t\t        new String(shownConstructor.declaringClass.sourceName()),", "+\t\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, false), ", "+\t\t\t\t\t        new String(shownConstructor.declaringClass.readableName()), ", "+\t\t\t\t\t\t\ttypesAsString(false, shownConstructor.typeVariables, false),", "+\t\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, false) },", "+\t\t\t\t\tnew String[] { ", "+\t\t\t\t\t        new String(shownConstructor.declaringClass.sourceName()),", "+\t\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, true), ", "+\t\t\t\t\t        new String(shownConstructor.declaringClass.shortReadableName()), ", "+\t\t\t\t\t\t\ttypesAsString(false, shownConstructor.typeVariables, true),", "+\t\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, true) },", "+\t\t\t\t\tsourceStart,", "+\t\t\t\t\tsourceEnd);\t\t    ", "+\t\t\t}", "+\t\t\treturn;", "+\t\tcase ParameterizedMethodTypeMismatch :", "+\t\t\tproblemConstructor = (ProblemMethodBinding) targetConstructor;", "+\t\t\tshownConstructor = problemConstructor.closestMatch;", "+\t\t\tthis.handle(", "+\t\t\t\tIProblem.JavadocParameterizedConstructorArgumentTypeMismatch,", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownConstructor.declaringClass.sourceName()),", "+\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, false), ", "+\t\t\t\t        new String(shownConstructor.declaringClass.readableName()), ", "+\t\t\t\t\t\ttypesAsString(false, ((ParameterizedGenericMethodBinding)shownConstructor).typeArguments, false),", "+\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, false) },", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownConstructor.declaringClass.sourceName()),", "+\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, true), ", "+\t\t\t\t        new String(shownConstructor.declaringClass.shortReadableName()), ", "+\t\t\t\t\t\ttypesAsString(false, ((ParameterizedGenericMethodBinding)shownConstructor).typeArguments, true),", "+\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, true) },", "+\t\t\t\tsourceStart,", "+\t\t\t\tsourceEnd);\t\t    ", "+\t\t\treturn;", "+\t\tcase TypeArgumentsForRawGenericMethod :", "+\t\t\tproblemConstructor = (ProblemMethodBinding) targetConstructor;", "+\t\t\tshownConstructor = problemConstructor.closestMatch;", "+\t\t\tthis.handle(", "+\t\t\t\tIProblem.JavadocTypeArgumentsForRawGenericConstructor,", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownConstructor.declaringClass.sourceName()),", "+\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, false), ", "+\t\t\t\t        new String(shownConstructor.declaringClass.readableName()), ", "+\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, false) },", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownConstructor.declaringClass.sourceName()),", "+\t\t\t\t        typesAsString(shownConstructor.isVarargs(), shownConstructor.parameters, true), ", "+\t\t\t\t        new String(shownConstructor.declaringClass.shortReadableName()), ", "+\t\t\t\t        typesAsString(targetConstructor.isVarargs(), targetConstructor.parameters, true) },", "+\t\t\t\tsourceStart,", "+\t\t\t\tsourceEnd);\t", "+\t\t\treturn;"]}], "num": 1533}
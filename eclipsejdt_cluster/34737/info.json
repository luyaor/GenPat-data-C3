{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9e8484783754c3483050a9c3fe412d3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1a8556bf70237d9ef48033e815226dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "1ddc6abfe5d6cd8ad8c71d5100cfa53f4e84487a", "commitAfterChange": "9043b6a8e4132c7e53a6fb980711e9a0982fef9b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic static MethodBinding computeCompatibleMethod18(MethodBinding originalMethod, TypeBinding[] arguments, final Scope scope, InvocationSite invocationSite)", "signatureAfterChange": "  \tpublic static MethodBinding computeCompatibleMethod18(MethodBinding originalMethod, TypeBinding[] arguments, final Scope scope, InvocationSite invocationSite)", "diff": ["-\t\tParameterizedGenericMethodBinding methodSubstitute = null;", "+\t\tif (invocationSite.checkingPotentialCompatibility()) {", "+\t\t\t// Not interested in a solution, only that there could potentially be one.", "+\t\t\treturn scope.environment().createParameterizedGenericMethod(originalMethod, typeVariables);", "+\t\t}", "+\t\t", "+\t\tParameterizedGenericMethodBinding methodSubstitute = null;", "-\t\t", "-\t\tif (invocationSite.checkingPotentialCompatibility()) {", "-\t\t\treturn scope.environment().createParameterizedGenericMethod(originalMethod, typeVariables);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abca3e215634ea317da6431407569094", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "1a542c460a449efbae14d1057ba233825602248d", "commitAfterChange": "1ddc6abfe5d6cd8ad8c71d5100cfa53f4e84487a", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["+\t\tif (isJdk18 && invocationSite.checkingPotentialCompatibility()) {", "+\t\t\tif (visibleSize != visible.length)", "+\t\t\t\tSystem.arraycopy(visible, 0, visible = new MethodBinding[visibleSize], 0, visibleSize);", "+\t\t\tinvocationSite.acceptPotentiallyCompatibleMethods(visible);", "+\t\t}", "+\t\t\t\tpublic boolean checkingPotentialCompatibility() { return false; }", "+\t\t\t\tpublic void acceptPotentiallyCompatibleMethods(MethodBinding[] methods) {/* ignore */}"]}], "num": 34737}
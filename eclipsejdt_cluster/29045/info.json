{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f926eb2b8ed185ab77a91035471b180", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77f80f1e39eaaa0f58ac3d76fa5e5441", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/TypeNameMatchRequestorWrapper.java", "commitBeforeChange": "4f20574f1c28798f17471aa0877376caa5cbe832", "commitAfterChange": "40c99687ccd3cd2f32c7182f6dd3a3815c599017", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access)", "signatureAfterChange": " public void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access)", "diff": ["-\t\tint separatorIndex= path.indexOf(IJavaSearchScope.JAR_FILE_ENTRY_SEPARATOR);", "-\t\tIType type = separatorIndex == -1", "-\t\t\t? createTypeFromPath(path, new String(simpleTypeName), enclosingTypeNames)", "-\t\t\t: createTypeFromJar(path, separatorIndex);", "+\t\tIType type = null;", "+\t\tif (this.handleFactory != null) {", "+\t\t\tOpenable openable = this.handleFactory.createOpenable(path, this.scope);", "+\t\t\tif (openable == null) return;", "+\t\t\tswitch (openable.getElementType()) {", "+\t\t\t\tcase IJavaElement.COMPILATION_UNIT:", "+\t\t\t\t\tICompilationUnit cu = (ICompilationUnit) openable;", "+\t\t\t\t\tif (enclosingTypeNames != null && enclosingTypeNames.length > 0) {", "+\t\t\t\t\t\ttype = cu.getType(new String(enclosingTypeNames[0]));", "+\t\t\t\t\t\tfor (int j=1, l=enclosingTypeNames.length; j<l; j++) {", "+\t\t\t\t\t\t\ttype = type.getType(new String(enclosingTypeNames[j]));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\ttype = cu.getType(new String(simpleTypeName));", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IJavaElement.CLASS_FILE:", "+\t\t\t\t\ttype = ((IClassFile)openable).getType();", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tint separatorIndex= path.indexOf(IJavaSearchScope.JAR_FILE_ENTRY_SEPARATOR);", "+\t\t\ttype = separatorIndex == -1", "+\t\t\t\t? createTypeFromPath(path, new String(simpleTypeName), enclosingTypeNames)", "+\t\t\t\t: createTypeFromJar(path, separatorIndex);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf3f7a7b45d0b69e8049afbc7c0c984a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/TypeNameMatchRequestorWrapper.java", "commitBeforeChange": "6fb2c9430c0440a4e2f750bfda1fd9ba0f2c24f0", "commitAfterChange": "13cf3e2d96e2930e3ab67ebe6fb94e89a4503d26", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access)", "signatureAfterChange": " public void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access)", "diff": ["-\tif (access == null) { // accept only if there's no access violation", "-\t\ttry {", "-\t\t\tint separatorIndex= path.indexOf(IJavaSearchScope.JAR_FILE_ENTRY_SEPARATOR);", "-\t\t\tIType type = separatorIndex == -1", "-\t\t\t\t? createTypeFromPath(path, new String(simpleTypeName), enclosingTypeNames)", "-\t\t\t\t: createTypeFromJar(path, separatorIndex);", "-\t\t\tif (type != null) {", "-\t\t\t\tthis.requestor.acceptTypeNameMatch(new JavaSearchTypeNameMatch(type, modifiers));", "-\t\t\t}", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// skip", "+\ttry {", "+\t\tint separatorIndex= path.indexOf(IJavaSearchScope.JAR_FILE_ENTRY_SEPARATOR);", "+\t\tIType type = separatorIndex == -1", "+\t\t\t? createTypeFromPath(path, new String(simpleTypeName), enclosingTypeNames)", "+\t\t\t: createTypeFromJar(path, separatorIndex);", "+\t\tif (type != null) {", "+\t\t\tthis.requestor.acceptTypeNameMatch(new JavaSearchTypeNameMatch(type, modifiers));", "+\t} catch (JavaModelException e) {", "+\t\t// skip"]}], "num": 29045}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c93297919ff7708f3e224125a7fd3c8e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "420465441c05c9aa091b6a8ee5968182", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "2fdac50d0a994a41e3b73d3202a0de983b014e1d", "commitAfterChange": "5291cd66203d5d42725b1c4b5cba50a5232bc244", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \t\tpublic void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event)", "signatureAfterChange": "  \tpublic void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event)", "diff": ["-\t\tpublic void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event) {", "-\t\t\tString key= event.getKey();", "-\t\t\tif (key.startsWith(CP_USERLIBRARY_PREFERENCES_PREFIX)) {", "-\t\t\t\ttry {", "-\t\t\t\t\trecreatePersistedUserLibraryEntry(key, (String) event.getNewValue(), false, true);", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\tif (logProblems) {", "-\t\t\t\t\t\tUtil.log(e, \"Exception while rebinding user library '\"+ key.substring(CP_USERLIBRARY_PREFERENCES_PREFIX.length()) +\"'.\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\tpublic void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event) {", "+\t\tString key = event.getKey();", "+\t\tif (key.startsWith(CP_USERLIBRARY_PREFERENCES_PREFIX)) {", "+\t\t\tString libName = key.substring(CP_USERLIBRARY_PREFERENCES_PREFIX.length());", "+\t\t\t\t// find affected projects", "+\t\t\t\tIPath containerPath = new Path(JavaCore.USER_LIBRARY_CONTAINER_ID).append(libName);", "+\t\t\t\tIJavaProject[] allJavaProjects = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProjects();", "+\t\t\t\tArrayList affectedProjects = new ArrayList();", "+\t\t\t\tfor (int i= 0; i < allJavaProjects.length; i++) {", "+\t\t\t\t\tIJavaProject javaProject = allJavaProjects[i];", "+\t\t\t\t\tIClasspathEntry[] entries= javaProject.getRawClasspath();", "+\t\t\t\t\tfor (int j= 0; j < entries.length; j++) {", "+\t\t\t\t\t\tIClasspathEntry entry = entries[j];", "+\t\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_CONTAINER) {", "+\t\t\t\t\t\t\tif (containerPath.equals(entry.getPath())) {", "+\t\t\t\t\t\t\t\taffectedProjects.add(javaProject);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t", "+\t\t\t\t// decode user library", "+\t\t\t\tString encodedUserLibrary = (String) event.getNewValue();", "+\t\t\t\tUserLibrary userLibrary = encodedUserLibrary == null ? null : UserLibrary.createFromString(new StringReader(encodedUserLibrary));", "+\t\t\t\t", "+\t\t\t\t// update user libraries map", "+\t\t\t\tif (userLibrary != null) {", "+\t\t\t\t\tthis.userLibraries.put(libName, userLibrary);", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.userLibraries.remove(libName);", "+\t\t\t\t", "+\t\t\t\t// update affected projects", "+\t\t\t\tint length = affectedProjects.size();", "+\t\t\t\tif (length == 0)", "+\t\t\t\t\treturn;", "+\t\t\t\tIJavaProject[] projects = new IJavaProject[length];", "+\t\t\t\taffectedProjects.toArray(projects);", "+\t\t\t\tIClasspathContainer[] containers = new IClasspathContainer[length];", "+\t\t\t\tif (userLibrary != null) {", "+\t\t\t\t\tUserLibraryClasspathContainer container = new UserLibraryClasspathContainer(libName);", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tcontainers[i] = container;", "+\t\t\t\tJavaCore.setClasspathContainer(containerPath, projects, containers, null);", "+\t\t\t} catch (IOException e) {", "+\t\t\t\tUtil.log(e, \"Exception while decoding user library '\"+ libName +\"'.\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\tUtil.log(e, \"Exception while setting user library '\"+ libName +\"'.\"); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93a6c21e0bfd369ec3ab93b54fac06b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaExpression.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \t@Override \tpublic String getTypeQualifiedName()", "signatureAfterChange": " \t \tpublic IJavaElement getHandleFromMemento(String token, MementoTokenizer memento, WorkingCopyOwner workingCopyOwner)", "diff": ["+\t", "+\tpublic IJavaElement getHandleFromMemento(String token, MementoTokenizer memento, WorkingCopyOwner workingCopyOwner) {", "+\t\tif (token.charAt(0) != JEM_LAMBDA_METHOD)", "+\t\t\treturn null;", "+\t\t", "+\t\t// ----", "+\t\tif (!memento.hasMoreTokens()) return this;", "+\t\tString selector = memento.nextToken();", "+\t\tif (!memento.hasMoreTokens() || memento.nextToken().charAt(0) != JEM_COUNT) return this;", "+\t\tif (!memento.hasMoreTokens()) return this;", "+\t\tint length = Integer.parseInt(memento.nextToken());", "+\t\tString [] parameterTypes = new String[length];", "+\t\tString [] parameterNames = new String[length];", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tif (!memento.hasMoreTokens() || memento.nextToken().charAt(0) != JEM_STRING) return this;", "+\t\t\tparameterTypes[i] = memento.nextToken();", "+\t\t\tif (!memento.hasMoreTokens() || memento.nextToken().charAt(0) != JEM_STRING) return this;", "+\t\t\tparameterNames[i] = memento.nextToken();", "+\t\t}", "+\t\tif (!memento.hasMoreTokens() || memento.nextToken().charAt(0) != JEM_STRING) return this;", "+\t\tString returnType = memento.nextToken();", "+\t\tif (!memento.hasMoreTokens() || memento.nextToken().charAt(0) != JEM_STRING) return this;", "+\t\tString key = memento.nextToken();", "+\t\tthis.lambdaMethod = LambdaMethod.make(this, selector, key, this.sourceStart, this.sourceEnd, this.arrowPosition, parameterTypes, parameterNames, returnType);", "+\t\tILocalVariable [] parameters = new ILocalVariable[length];", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tparameters[i] = (ILocalVariable) this.lambdaMethod.getHandleFromMemento(memento, workingCopyOwner);", "+\t\t}", "+\t\tthis.lambdaMethod.elementInfo.arguments  = parameters;", "+\t\tthis.elementInfo.children = new IJavaElement[] { this.lambdaMethod };", "+\t\treturn this.lambdaMethod;", "-", "-\t@Override", "-\tpublic String getTypeQualifiedName() {", "-\t\treturn null;", "-\t}"]}], "num": 34371}
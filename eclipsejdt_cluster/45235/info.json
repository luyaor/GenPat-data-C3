{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "226f79a34ba4cc0c9e0116d63701e182", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd47b9735538eea21c062d24a8a30ad5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "a746953c3c39228e621101bf14cd960b61f268e5", "commitAfterChange": "8d9e4d82b7907a3f11b58a9fee1e77dc3999b852", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public static int validateMatchRule(String stringPattern, int matchRule)", "signatureAfterChange": " public static int validateMatchRule(String stringPattern, int matchRule)", "diff": ["-\t\t\t(matchRule & R_CAMEL_CASE_MATCH) != 0 || (matchRule & R_CAMELCASE_MATCH) != 0) {", "+\t\t\t(matchRule & R_CAMELCASE_MATCH) != 0 || (matchRule & R_CAMELCASE_SAME_PART_COUNT_MATCH) != 0) {", "+\t\t\t// regexp is not supported yet", "-\tint starIndex = stringPattern.indexOf('*');", "-\tint questionIndex = stringPattern.indexOf('?');", "-\tif (starIndex < 0 && questionIndex < 0) {", "-\t\t// reset pattern match flag if any", "-\t\tmatchRule &= ~R_PATTERN_MATCH;", "-\t} else {", "-\t\t// force Pattern rule", "-\t\tmatchRule |= R_PATTERN_MATCH;", "+\tif (stringPattern != null) {", "+\t\tint starIndex = stringPattern.indexOf('*');", "+\t\tint questionIndex = stringPattern.indexOf('?');", "+\t\tif (starIndex < 0 && questionIndex < 0) {", "+\t\t\t// reset pattern match flag if any", "+\t\t\tmatchRule &= ~R_PATTERN_MATCH;", "+\t\t} else {", "+\t\t\t// force Pattern rule", "+\t\t\tmatchRule |= R_PATTERN_MATCH;", "+\t\t}", "-\t\t// remove Camel Case and Prefix match flags if any", "+\t\t// reset other incompatible flags", "-\t\tmatchRule &= ~R_CAMEL_CASE_MATCH;", "+\t\tmatchRule &= ~R_CAMELCASE_SAME_PART_COUNT_MATCH;", "+\t\treturn matchRule;", "-\t// Verify Camel Case match rule", "-\tif ((matchRule & R_CAMEL_CASE_MATCH) != 0) {", "-\t\tmatchRule &= ~R_CAMELCASE_MATCH; // in case of some user specify both constants", "-\t\t// Verify sting pattern validity", "-\t\tint length = stringPattern.length();", "-\t\tboolean validCamelCase = true;", "-\t\tboolean uppercase = false;", "-\t\tfor (int i=0; i<length && validCamelCase; i++) {", "-\t\t\tchar ch = stringPattern.charAt(i);", "-\t\t\tvalidCamelCase = i==0 ? ScannerHelper.isJavaIdentifierStart(ch) : ScannerHelper.isJavaIdentifierPart(ch);", "-\t\t\t// at least one uppercase character is need in CamelCase pattern", "-\t\t\t// (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=136313)", "-\t\t\tif (!uppercase) uppercase = ScannerHelper.isUpperCase(ch);", "-\t\t}", "-\t\tvalidCamelCase = validCamelCase && uppercase;", "-\t\t// Verify flags compatibility", "+\t// Verify Camel Case", "+\tif ((matchRule & R_CAMELCASE_MATCH) != 0) {", "+\t\t// reset other incompatible flags", "+\t\tmatchRule &= ~R_CAMELCASE_SAME_PART_COUNT_MATCH;", "+\t\tmatchRule &= ~R_PREFIX_MATCH;", "+\t\t// validate camel case rule and modify it if not valid", "+\t\tboolean validCamelCase = validateCamelCasePattern(stringPattern);", "-\t\t\tmatchRule &= ~R_CAMEL_CASE_MATCH;", "+\t\t\tmatchRule &= ~R_CAMELCASE_MATCH;", "+\t\treturn matchRule;", "+\t}", "+\t", "+\t// Verify Camel Case with same count of parts", "+\tif ((matchRule & R_CAMELCASE_SAME_PART_COUNT_MATCH) != 0) {", "+\t\t// reset other incompatible flags", "+\t\tmatchRule &= ~R_PREFIX_MATCH;", "+\t\t// validate camel case rule and modify it if not valid", "+\t\tboolean validCamelCase = validateCamelCasePattern(stringPattern);", "+\t\tif (!validCamelCase) {", "+\t\t\tmatchRule &= ~R_CAMELCASE_SAME_PART_COUNT_MATCH;", "+\t\t}", "+\t\treturn matchRule;", "-\t// Verify deprecated Camel Case match rule for backward compatibility", "-\telse if ((matchRule & R_CAMELCASE_MATCH) != 0) {", "-\t\t// Verify sting pattern validity", "-\t\tint length = stringPattern.length();", "-\t\tboolean validCamelCase = true;", "-\t\tboolean uppercase = false;", "-\t\tfor (int i=0; i<length && validCamelCase; i++) {", "-\t\t\tchar ch = stringPattern.charAt(i);", "-\t\t\tvalidCamelCase = i==0 ? ScannerHelper.isJavaIdentifierStart(ch) : ScannerHelper.isJavaIdentifierPart(ch);", "-\t\t\t// at least one uppercase character is need in CamelCase pattern", "-\t\t\t// (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=136313)", "-\t\t\tif (!uppercase) uppercase = ScannerHelper.isUpperCase(ch);", "-\t\t}", "-\t\tvalidCamelCase = validCamelCase && uppercase;", "-\t\t// Verify flags compatibility", "-\t\tif (validCamelCase) {", "-\t\t\tif ((matchRule & R_PREFIX_MATCH) != 0) {", "-\t\t\t\tif ((matchRule & R_CASE_SENSITIVE) != 0) {", "-\t\t\t\t\t// This is equivalent to Camel Case match rule", "-\t\t\t\t\tmatchRule &= ~R_PREFIX_MATCH;", "-\t\t\t\t\tmatchRule &= ~R_CASE_SENSITIVE;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else {", "-\t\t\tmatchRule &= ~R_CAMELCASE_MATCH;", "-\t\t\tif ((matchRule & R_PREFIX_MATCH) == 0) {", "-\t\t\t\tmatchRule |= R_PREFIX_MATCH;", "-\t\t\t\tmatchRule |= R_CASE_SENSITIVE;", "-\t\t\t}", "-\t\t}", "-\t}", "+\t// Return the validated match rule (modified if necessary)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e16e32c31ab4798361f7fa3d7e38947b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "6d3fe5277decae5e3a5511d22405bbe1fbb97924", "commitAfterChange": "5bcc7ea24a8cf84eab4e39ad9a998ea7bce03b7a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (anonymousType == null) { //----------------no anonymous class------------------------\t", "+\t\t", "+\t\tif (enclosingInstance != null) {", "-\t\t\t\tif (receiverType == null) {", "-\t\t\t\t\thasError = true;", "-\t\t\t\t} else {", "-\t\t\t\t\tif (enclosingInstanceContainsCast) {", "+\t\t\t\tif (receiverType != null && enclosingInstanceContainsCast) {", "-\t\t\t\t\t}", "-\t\t\t// will check for null after args are resolved", "-\t\t\tTypeBinding[] argumentTypes = NoParameters;", "-\t\t\tif (arguments != null) {", "-\t\t\t\tint length = arguments.length;", "-\t\t\t\targumentTypes = new TypeBinding[length];", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tExpression argument = this.arguments[i];", "-\t\t\t\t\tif (argument instanceof CastExpression) {", "-\t\t\t\t\t\targument.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "-\t\t\t\t\t\targsContainCast = true;", "-\t\t\t\t\t}", "-\t\t\t\t\tif ((argumentTypes[i] = argument.resolveType(scope)) == null){", "-\t\t\t\t\t\thasError = true;", "-\t\t\t\t\t}", "+\t\t} else {", "+\t\t\treceiverType = type.resolveType(scope);", "+\t\t}", "+\t\tif (receiverType == null) {", "+\t\t\thasError = true;", "+\t\t} else if (((ReferenceBinding) receiverType).isFinal() && this.anonymousType != null) {", "+\t\t\tscope.problemReporter().anonymousClassCannotExtendFinalClass(type, receiverType);", "+\t\t\thasError = true;", "+\t\t}", "+", "+\t\t// will check for null after args are resolved", "+\t\tTypeBinding[] argumentTypes = NoParameters;", "+\t\tif (arguments != null) {", "+\t\t\tint length = arguments.length;", "+\t\t\targumentTypes = new TypeBinding[length];", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tExpression argument = this.arguments[i];", "+\t\t\t\tif (argument instanceof CastExpression) {", "+\t\t\t\t\targument.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\t\t\t\targsContainCast = true;", "+\t\t\t\t}", "+\t\t\t\tif ((argumentTypes[i] = argument.resolveType(scope)) == null){", "+\t\t\t\t\thasError = true;", "-\t\t\t// limit of fault-tolerance", "-\t\t\tif (hasError) return receiverType;", "+\t\t}", "+\t\t// limit of fault-tolerance", "+\t\tif (hasError) return this.resolvedType = receiverType;", "+\t\t", "+\t\tif (this.anonymousType == null) {", "+\t\t\t// qualified allocation with no anonymous type", "-\t\t//--------------there is an anonymous type declaration-----------------", "-\t\tif (this.enclosingInstance != null) {", "-\t\t\tif (enclosingInstance instanceof CastExpression) {", "-\t\t\t\tenclosingInstance.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "-\t\t\t\tenclosingInstanceContainsCast = true;", "-\t\t\t}", "-\t\t\tif ((enclosingInstanceType = this.enclosingInstance.resolveType(scope)) == null) {", "-\t\t\t\thasError = true;", "-\t\t\t} else if (enclosingInstanceType.isBaseType() || enclosingInstanceType.isArrayType()) {", "-\t\t\t\tscope.problemReporter().illegalPrimitiveOrArrayTypeForEnclosingInstance(", "-\t\t\t\t\tenclosingInstanceType,", "-\t\t\t\t\tthis.enclosingInstance);", "-\t\t\t\thasError = true;", "-\t\t\t} else {", "-\t\t\t\treceiverType = ((SingleTypeReference) type).resolveTypeEnclosing(", "-\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) enclosingInstanceType);\t\t\t\t", "-\t\t\t\tif (enclosingInstanceContainsCast) {", "-\t\t\t\t\tCastExpression.checkNeedForEnclosingInstanceCast(scope, enclosingInstance, enclosingInstanceType, receiverType);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else {", "-\t\t\treceiverType = type.resolveType(scope);", "-\t\t}", "-\t\tif (receiverType == null) {", "-\t\t\thasError = true;", "-\t\t} else if (((ReferenceBinding) receiverType).isFinal()) {", "-\t\t\tscope.problemReporter().anonymousClassCannotExtendFinalClass(type, receiverType);", "-\t\t\thasError = true;", "-\t\t}", "-\t\tTypeBinding[] argumentTypes = NoParameters;", "-\t\tif (arguments != null) {", "-\t\t\tint length = arguments.length;", "-\t\t\targumentTypes = new TypeBinding[length];", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tExpression argument = this.arguments[i];", "-\t\t\t\tif (argument instanceof CastExpression) {", "-\t\t\t\t\targument.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "-\t\t\t\t\targsContainCast = true;", "-\t\t\t\t}", "-\t\t\t\tif ((argumentTypes[i] = argument.resolveType(scope)) == null) {", "-\t\t\t\t\thasError = true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t// limit of fault-tolerance", "-\t\tif (hasError) {", "-\t\t\treturn this.resolvedType = receiverType;", "-\t\t}", "-", "+\t\t// anonymous type scenario", "-\t\tthis.superTypeBinding =", "-\t\t\treceiverType.isInterface() ? scope.getJavaLangObject() : (ReferenceBinding) receiverType;", "-\t\tMethodBinding inheritedBinding =", "-\t\t\tscope.getConstructor(this.superTypeBinding, argumentTypes, this);", "+\t\tthis.superTypeBinding = receiverType.isInterface() ? scope.getJavaLangObject() : (ReferenceBinding) receiverType;", "+\t\t// insert anonymous type in scope", "+\t\tscope.addAnonymousType(this.anonymousType, (ReferenceBinding) receiverType);", "+\t\tthis.anonymousType.resolve(scope);\t\t", "+\t\t", "+\t\t// find anonymous super constructor", "+\t\tMethodBinding inheritedBinding = scope.getConstructor(this.superTypeBinding, argumentTypes, this);", "-\t\t\treturn null;", "+\t\t\treturn this.resolvedType = anonymousType.binding;", "-\t\t\t\treturn null;", "+\t\t\t\treturn this.resolvedType = anonymousType.binding;", "-\t\tscope.addAnonymousType(anonymousType, (ReferenceBinding) receiverType);", "-\t\tanonymousType.resolve(scope);"]}], "num": 45235}
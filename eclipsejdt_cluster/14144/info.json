{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34cd4c626128d331c4196e8c92fe4e39", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7237a5baa15eea386f7f078f21f86070", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTestAST3_2.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 252, "methodNumberAfterChange": 252, "signatureBeforeChange": "  \tpublic void test0613() throws JavaModelException", "signatureAfterChange": "  \tpublic void test0613() throws JavaModelException", "diff": ["-\t\t\tassertNull(\"Got a binding\", binding);", "+\t\t\tassertNotNull(\"No binding\", binding);", "+\t\t\tassertEquals(\"LX;.foo(Z)V#z\", binding.getKey());", "-\t\t\tassertNull(\"Got a binding\", typeBinding);", "+\t\t\tassertNotNull(\"No binding\", typeBinding);", "+\t\t\tassertEquals(\"LX;.foo(Z)V#z\", binding.getKey());\t\t\t", "-\t\t\tassertNull(\"Got a binding\", binding2);", "+\t\t\tassertNotNull(\"Got a binding\", binding2);", "+\t\t\tassertEquals(\"LX;.foo(Z)V#z\", binding2.getKey());\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9068b11e2549e7e68c6e13e2ca80376b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 232, "methodNumberAfterChange": 232, "signatureBeforeChange": " \tpublic void test0218() throws JavaModelException", "signatureAfterChange": " \tpublic void test0218() throws JavaModelException", "diff": ["-\t\tassertNull(\"Got a binding\", annotationBinding);", "+\t\tassertNotNull(\"No binding\", annotationBinding);", "+\t\tassertEquals(\"LX;.fXoo)I@LTest;\", annotationBinding.getKey());", "+\t\tassertFalse(\"Annotation should not be flagged as recovered\", annotationBinding.isRecovered());", "+\t\tassertTrue(\"Annotation type should be flagged as recovered\", annotationBinding.getAnnotationType().isRecovered());\t\t"]}], "num": 14144}
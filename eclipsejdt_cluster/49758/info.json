{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd741c5e434efdc5682602867732b2ad", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ba43f4a90917c36bea48617dd4527c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestOptions.java", "commitBeforeChange": "b60a608dbabf8b5f04fae21c808d5a97597a41f6", "commitAfterChange": "0812715fc31639c278d6b4cb2dea448517c247bf", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tprivate String resultForInvalidTagsReferencesClassOrField(int visibility)", "signatureAfterChange": "  \tprivate String resultForInvalidTagsClassOrField(int visibility)", "diff": ["-\tprivate String resultForInvalidTagsReferencesClassOrField(int visibility) {", "-\t\tString result = \"----------\\n\";", "-\t\tfor (int i=0; i<=visibility; i++) {", "-\t\t\tresult += resultForInvalidTagsReferencesClassOrField[i];", "+\tprivate String resultForInvalidTagsClassOrField(int visibility) {", "+\t\tif (reportInvalidJavadocTagsDeprecatedRef == null && reportInvalidJavadocTagsNotVisibleRef == null) {", "+\t\t\tString result = \"----------\\n\";", "+\t\t\tfor (int i=0; i<=visibility; i++) {", "+\t\t\t\tresult += resultForInvalidTagsClassOrField[i];", "+\t\t\t}", "+\t\t\treturn result;", "-\t\treturn result;", "+\t\tStringBuffer result = new StringBuffer(\"----------\\n\");", "+\t\tfor (int i=0, count=1; i<= visibility; i++) {", "+\t\t\tStringTokenizer tokenizer = new StringTokenizer(resultForInvalidTagsClassOrField[i], \"\\n\");", "+\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\tStringBuffer error = new StringBuffer();", "+\t\t\t\tboolean add = true;", "+\t\t\t\tfor (int j=0; j<5; j++) {", "+\t\t\t\t\tString line = tokenizer.nextToken();", "+\t\t\t\t\tswitch (j) {", "+\t\t\t\t\t\tcase 0:", "+\t\t\t\t\t\t\terror.append(count);", "+\t\t\t\t\t\t\terror.append(line.substring(line.indexOf('.')));", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase 3:", "+\t\t\t\t\t\t\tif (CompilerOptions.DISABLED.equals(reportInvalidJavadocTagsDeprecatedRef)) {", "+\t\t\t\t\t\t\t\tadd = line.indexOf(\"is deprecated\") == -1;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (add && CompilerOptions.DISABLED.equals(reportInvalidJavadocTagsNotVisibleRef)) {", "+\t\t\t\t\t\t\t\tadd = line.indexOf(\"is not visible\") == -1;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\terror.append(line);", "+\t\t\t\t\t}", "+\t\t\t\t\terror.append('\\n');", "+\t\t\t\t}", "+\t\t\t\tif (add) {", "+\t\t\t\t\tcount++;", "+\t\t\t\t\tresult.append(error);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn result.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3924d795315d3335d26538920d3f09bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestOptions.java", "commitBeforeChange": "b60a608dbabf8b5f04fae21c808d5a97597a41f6", "commitAfterChange": "0812715fc31639c278d6b4cb2dea448517c247bf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate String resultForInvalidTagsReferencesMethodOrConstructor(int visibility)", "signatureAfterChange": "  \tprivate String resultForInvalidTagsMethodOrConstructor(int visibility)", "diff": ["-\tprivate String resultForInvalidTagsReferencesMethodOrConstructor(int visibility) {", "-\t\tString result = \"----------\\n\";", "-\t\tfor (int i=0; i<=visibility; i++) {", "-\t\t\tresult += resultForInvalidTagsReferencesMethodOrConstructor[i];", "+\tprivate String resultForInvalidTagsMethodOrConstructor(int visibility) {", "+\t\tif (reportInvalidJavadocTagsDeprecatedRef == null && reportInvalidJavadocTagsNotVisibleRef == null) {", "+\t\t\tString result = \"----------\\n\";", "+\t\t\tfor (int i=0; i<=visibility; i++) {", "+\t\t\t\tresult += resultForInvalidTagsMethodOrConstructor[i];", "+\t\t\t}", "+\t\t\treturn result;", "-\t\treturn result;", "+\t\tStringBuffer result = new StringBuffer(\"----------\\n\");", "+\t\tfor (int i=0, count=1; i<= visibility; i++) {", "+\t\t\tStringTokenizer tokenizer = new StringTokenizer(resultForInvalidTagsMethodOrConstructor[i], \"\\n\");", "+\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\tStringBuffer error = new StringBuffer();", "+\t\t\t\tboolean add = true;", "+\t\t\t\tfor (int j=0; j<5; j++) {", "+\t\t\t\t\tString line = tokenizer.nextToken();", "+\t\t\t\t\tswitch (j) {", "+\t\t\t\t\t\tcase 0:", "+\t\t\t\t\t\t\terror.append(count);", "+\t\t\t\t\t\t\terror.append(line.substring(line.indexOf('.')));", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase 3:", "+\t\t\t\t\t\t\tif (CompilerOptions.DISABLED.equals(reportInvalidJavadocTagsDeprecatedRef)) {", "+\t\t\t\t\t\t\t\tadd = line.indexOf(\"is deprecated\") == -1;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (add && CompilerOptions.DISABLED.equals(reportInvalidJavadocTagsNotVisibleRef)) {", "+\t\t\t\t\t\t\t\tadd = line.indexOf(\"is not visible\") == -1;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\terror.append(line);", "+\t\t\t\t\t}", "+\t\t\t\t\terror.append('\\n');", "+\t\t\t\t}", "+\t\t\t\tif (add) {", "+\t\t\t\t\tcount++;", "+\t\t\t\t\tresult.append(error);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn result.toString();"]}], "num": 49758}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec40dc6e22cb976c0db8ea4ce2411902", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33132eaeb894631a95cc61f55fb61941", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "71ca7b096c04e123348cb13b19efbd2de402f9f2", "commitAfterChange": "6872e25fe154a5852fcd3ac0c49b686e5e81ec7b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r private NameEnvironmentAnswer findClass(char[] name, char[][] packageName)", "signatureAfterChange": "\r private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName)", "diff": ["-private NameEnvironmentAnswer findClass(char[] name, char[][] packageName) {\r", "-\tString fullName = assembleName(name, packageName, File.separatorChar);\r", "+private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName){\r", "-\t\tif (fullName.equals(knownFileNames[i]))\r", "+\t\tif (qualifiedTypeName.equals(knownFileNames[i]))\r", "-\tString filename = new String(name);\r", "-\tString binaryFilename = filename + \".class\"; //$NON-NLS-1$\r", "-\tString sourceFilename = filename + \".java\"; //$NON-NLS-1$\r", "-\tfor (int i = 0, length = classpaths.length; i < length; i++) {\r", "-\t\tClasspath classpath = classpaths[i];\r", "-\t\tboolean binaryExists = classpath.exists(binaryFilename, packageName);\r", "-\t\tboolean sourceExists = classpath.exists(sourceFilename, packageName);\r", "-\t\tif (binaryExists == sourceExists) {\r", "-\t\t\tif (binaryExists) { // so both are true\r", "-\t\t\t\tlong binaryModified = classpath.lastModified(binaryFilename, packageName);\r", "-\t\t\t\tlong sourceModified = classpath.lastModified(sourceFilename, packageName);\r", "-\t\t\t\tif (binaryModified > sourceModified)\r", "-\t\t\t\t\treturn classpath.readClassFile(binaryFilename, packageName);\r", "-\t\t\t\tif (sourceModified > 0)\r", "-\t\t\t\t\treturn classpath.readJavaFile(sourceFilename, packageName);\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\tif (binaryExists)\r", "-\t\t\t\treturn classpath.readClassFile(binaryFilename, packageName);\r", "-\t\t\telse\r", "-\t\t\t\treturn classpath.readJavaFile(sourceFilename, packageName);\r", "+\tString qualifiedBinaryFileName = qualifiedTypeName + \".class\"; //$NON-NLS-1$\r", "+\tString qualifiedPackageName =\r", "+\t\tqualifiedTypeName.length() == typeName.length\r", "+\t\t\t? \"\" //$NON-NLS-1$\r", "+\t\t\t: qualifiedBinaryFileName.substring(0, qualifiedTypeName.length() - typeName.length - 1);\r", "+\tString qp2 = File.separatorChar == '/' ? qualifiedPackageName : qualifiedPackageName.replace('/', File.separatorChar);\r", "+\tif (qualifiedPackageName == qp2) {\r", "+\t\tfor (int i = 0, length = classpaths.length; i < length; i++) {\r", "+\t\t\tNameEnvironmentAnswer answer = classpaths[i].findClass(typeName, qualifiedPackageName, qualifiedBinaryFileName);\r", "+\t\t\tif (answer != null) return answer;\r", "+\t\t}\r", "+\t} else {\r", "+\t\tString qb2 = qualifiedBinaryFileName.replace('/', File.separatorChar);\r", "+\t\tfor (int i = 0, length = classpaths.length; i < length; i++) {\r", "+\t\t\tClasspath p = classpaths[i];\r", "+\t\t\tNameEnvironmentAnswer answer = (p instanceof ClasspathJar)\r", "+\t\t\t\t? p.findClass(typeName, qualifiedPackageName, qualifiedBinaryFileName)\r", "+\t\t\t\t: p.findClass(typeName, qp2, qb2);\r", "+\t\t\tif (answer != null) return answer;\r", "-\treturn null; \r", "+\treturn null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fbbf7f1f8747bd4f198c43d97a2410f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "9b8497af1cbd77526a4fa45b99ed631f29570c0f", "commitAfterChange": "e2827e126b55e7ef1923fa3efec0a2ea0aba2477", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t\t \t\tprivate CompilationParticipant[] getRegisteredParticipants()", "signatureAfterChange": " \t\t \t\tprivate Object[][] getRegisteredParticipants()", "diff": ["-\t\tprivate CompilationParticipant[] getRegisteredParticipants() {", "+\t\tprivate Object[][] getRegisteredParticipants() {", "-\t\t\tfinal HashMap modifyingEnv = new HashMap();", "-\t\t\tfinal HashMap creatingProblems = new HashMap();", "-\t\t\tfinal HashMap others = new HashMap();", "+\t\t\tfinal ArrayList modifyingEnv = new ArrayList();", "+\t\t\tfinal ArrayList creatingProblems = new ArrayList();", "+\t\t\tfinal ArrayList others = new ArrayList();", "-\t\t\t\t\tPlatform.run(new ISafeRunnable() {", "-\t\t\t\t\t\tpublic void handleException(Throwable exception) {", "-\t\t\t\t\t\t\tUtil.log(exception, \"Exception occurred while creating compilation participant\"); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tpublic void run() throws Exception {", "-\t\t\t\t\t\t\tObject execExt = configElement.createExecutableExtension(\"class\"); //$NON-NLS-1$ ", "-\t\t\t\t\t\t\tif (execExt instanceof CompilationParticipant) {", "-\t\t\t\t\t\t\t\tif (\"true\".equals(configElement.getAttribute(\"modifiesEnvironment\"))) //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\t\t\t\tmodifyingEnv.put(configElement, execExt);", "-\t\t\t\t\t\t\t\telse if (\"true\".equals(configElement.getAttribute(\"createsProblems\"))) //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\t\t\t\tcreatingProblems.put(configElement, execExt);", "-\t\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t\t\tothers.put(configElement, execExt);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t});", "+\t\t\t\t\t// add config element in the group it belongs to", "+\t\t\t\t\tif (\"true\".equals(configElement.getAttribute(\"modifiesEnvironment\"))) //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\tmodifyingEnv.add(configElement);", "+\t\t\t\t\telse if (\"true\".equals(configElement.getAttribute(\"createsProblems\"))) //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\tcreatingProblems.add(configElement);", "+\t\t\t\t\telse", "+\t\t\t\t\t\tothers.add(configElement);", "-\t\t\tCompilationParticipant[] result = new CompilationParticipant[size];", "+\t\t\t", "+\t\t\t// sort config elements in each group", "+\t\t\tIConfigurationElement[] configElements = new IConfigurationElement[size];", "-\t\t\tindex = sortParticipants(modifyingEnv, result, index);", "-\t\t\tindex = sortParticipants(creatingProblems, result, index);", "-\t\t\tindex = sortParticipants(others, result, index);", "+\t\t\tindex = sortParticipants(modifyingEnv, configElements, index);", "+\t\t\tindex = sortParticipants(creatingProblems, configElements, index);", "+\t\t\tindex = sortParticipants(others, configElements, index);", "+\t\t\t", "+\t\t\t// create result table", "+\t\t\tObject[][] result = new Object[MAX_SOURCE_LEVEL][];", "+\t\t\tint length = configElements.length;", "+\t\t\tfor (int i = 0; i < MAX_SOURCE_LEVEL; i++) {", "+\t\t\t\tresult[i] = new Object[length];", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tString sourceLevel = configElements[i].getAttribute(\"requiredSourceLevel\"); //$NON-NLS-1$", "+\t\t\t\tint sourceLevelIndex = indexForSourceLevel(sourceLevel);", "+\t\t\t\tfor (int j = sourceLevelIndex; j < MAX_SOURCE_LEVEL; j++) {", "+\t\t\t\t\tresult[j][i] = configElements[i];", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 71643}
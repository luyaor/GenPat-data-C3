{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4fd347d9124e176d13d44c9aa44bb27", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8b3ab5b8c3dee99ae2190608579b231", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "3ef93f23afcd2f32a7f2e702fed5d9d29c70e752", "commitAfterChange": "a54ce0f1a5965500a06d345ce2b572137c5b2f38", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \tITypeBinding resolveType(Type type)", "signatureAfterChange": "\r \tITypeBinding resolveType(Type type)", "diff": ["-\t\twhile ((parentType instanceof Type) && ((Type) parentType).isArrayType()) {\r", "-\t\t\tarrayType = (Type) parentType;\r", "-\t\t\tparentType = parentType.getParent();\r", "-\t\t\tindex++;\r", "-\t\t}\r", "-\t\tAstNode node = null;\r", "-\t\tif (index != 0) {\r", "-\t\t\tnode = (AstNode) this.newAstToOldAst.get(arrayType);\r", "-\t\t} else {\r", "+\t\tAstNode node = (AstNode) this.newAstToOldAst.get(type);\r", "+\t\tif (node == null) {\r", "-\t\t\t\tnode = (AstNode) this.newAstToOldAst.get(type);\r", "+\t\t\t\t// we try to retrieve the type as an element type of an array type\r", "+\t\t\t\twhile ((parentType instanceof Type) && ((Type) parentType).isArrayType()) {\r", "+\t\t\t\t\tarrayType = (Type) parentType;\r", "+\t\t\t\t\tparentType = parentType.getParent();\r", "+\t\t\t\t\tindex++;\r", "+\t\t\t\t}\r", "+\t\t\t\tif (index != 0) {\r", "+\t\t\t\t\tnode = (AstNode) this.newAstToOldAst.get(arrayType);\r", "+\t\t\t\t}\r", "-\t\t\t\treturn this.getTypeBinding(arrayAllocationExpression.arrayTb);\r", "+\t\t\t\tArrayBinding arrayBinding = arrayAllocationExpression.arrayTb;\r", "+\t\t\t\tif (index != 0) {\r", "+\t\t\t\t\treturn this.getTypeBinding(this.scope.createArray(arrayBinding.leafComponentType, arrayBinding.dimensions - index));\r", "+\t\t\t\t} \r", "+\t\t\t\treturn this.getTypeBinding(arrayBinding);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbec575a63dff84a9882c5dc874d1085", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "57a39bffd481d99e266c1d932ca6a1e0a014c2f1", "commitAfterChange": "fa55650598792d02ad8b63316b23c9a28b441883", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprivate ASTNode internalCreateASTForKind()", "signatureAfterChange": " \tprivate ASTNode internalCreateASTForKind()", "diff": ["-\t\t\t\tTypeDeclaration typeDeclaration = converter.convert(nodes);", "-\t\t\t\ttypeDeclaration.setSourceRange(this.sourceOffset, this.sourceOffset + this.sourceLength);", "-\t\t\t\trootNodeToCompilationUnit(typeDeclaration.getAST(), compilationUnit, typeDeclaration, codeSnippetParsingUtil.recordedParsingInformation, null);", "-\t\t\t\tast.setDefaultNodeFlag(0);", "-\t\t\t\tast.setOriginalModificationCount(ast.modificationCount());", "-\t\t\t\treturn typeDeclaration;", "+\t\t\t\tif (nodes != null) {", "+\t\t\t\t\t// source has no syntax error or the statement recovery is enabled", "+\t\t\t\t\tTypeDeclaration typeDeclaration = converter.convert(nodes);", "+\t\t\t\t\ttypeDeclaration.setSourceRange(this.sourceOffset, this.sourceOffset + this.sourceLength);", "+\t\t\t\t\trootNodeToCompilationUnit(typeDeclaration.getAST(), compilationUnit, typeDeclaration, codeSnippetParsingUtil.recordedParsingInformation, null);", "+\t\t\t\t\tast.setDefaultNodeFlag(0);", "+\t\t\t\t\tast.setOriginalModificationCount(ast.modificationCount());", "+\t\t\t\t\treturn typeDeclaration;", "+\t\t\t\t} else {", "+\t\t\t\t\t// source has syntax error and the statement recovery is disabled", "+\t\t\t\t\tCategorizedProblem[] problems = recordedParsingInformation.problems;", "+\t\t\t\t\tif (problems != null) {", "+\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "+\t\t\t\t\t}", "+\t\t\t\t\tast.setDefaultNodeFlag(0);", "+\t\t\t\t\tast.setOriginalModificationCount(ast.modificationCount());", "+\t\t\t\t\treturn compilationUnit;", "+\t\t\t\t}"]}], "num": 49347}
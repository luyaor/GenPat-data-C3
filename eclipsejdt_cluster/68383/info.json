{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b71d38d72c96ad5e1113b3a1c1688b6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b0c0387306becda043d8233e527c43d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "8a281cea306104e13dc5d8e2e915592f13b4b03f", "commitAfterChange": "4f6e7772e1eab66068e8d31851a8e395b8beb754", "methodNumberBeforeChange": 420, "methodNumberAfterChange": 420, "signatureBeforeChange": " public void shouldReturn(TypeBinding returnType, ASTNode location)", "signatureAfterChange": " public void shouldReturn(TypeBinding returnType, ASTNode location)", "diff": ["+\tint sourceStart = location.sourceStart;", "+\tint sourceEnd = location.sourceEnd;", "+\tif (location instanceof LambdaExpression) {", "+\t\tLambdaExpression exp = (LambdaExpression) location;", "+\t\tsourceStart = exp.sourceStart;", "+\t\tsourceEnd = exp.diagnosticsSourceEnd();", "+\t}", "-\t\tlocation.sourceStart,", "-\t\tlocation.sourceEnd);", "+\t\tsourceStart,", "+\t\tsourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "417abb59c9b1c04b312660185d1fc4ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferenceLocator.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\tlocator.report(positions[0], positions[last - 1], element, accuracy);", "+\tint sourceStart = (int) (positions[0] >>> 32);", "+\tint sourceEnd = ((int) positions[last - 1])+1;", "+\tSearchMatch match = JavaSearchMatch.newReferenceMatch(IJavaElement.PACKAGE_FRAGMENT, element, accuracy, sourceStart, sourceEnd, locator);", "+\tlocator.report(match);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c0bb1524009f7c4ff2defec67e428b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "9bef3f15c43b07a14e76957980f62386b2bcee10", "commitAfterChange": "73f504e7d77d95d8fc2d6621b5727e1e3ab07530", "methodNumberBeforeChange": 376, "methodNumberAfterChange": 376, "signatureBeforeChange": " public void unreachableCode(Statement statement)", "signatureAfterChange": " public void unreachableCode(Statement statement)", "diff": ["+\tint sourceStart = statement.sourceStart;", "+\tint sourceEnd = statement.sourceEnd;", "+\tif (statement instanceof LocalDeclaration) {", "+\t\tLocalDeclaration declaration = (LocalDeclaration) statement;", "+\t\tsourceStart = declaration.declarationSourceStart;", "+\t\tsourceEnd = declaration.declarationSourceEnd;", "+\t} else if (statement instanceof Expression) {", "+\t\tint statemendEnd = ((Expression) statement).statementEnd;", "+\t\tif (statemendEnd != -1) sourceEnd = statemendEnd;", "+\t}", "-\t\tstatement.sourceStart,", "-\t\tstatement.sourceEnd);", "+\t\tsourceStart,", "+\t\tsourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de199de29e15bee60539e91c27b47b76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "dff8c6a289a7b5116b7d5b64b00c639d5d108195", "commitAfterChange": "aa886a7683ee98f7b84194332302c56bc487a61a", "methodNumberBeforeChange": 327, "methodNumberAfterChange": 327, "signatureBeforeChange": "  public void missingTypeInMethod(MessageSend messageSend, MethodBinding method)", "signatureAfterChange": "  public void missingTypeInMethod(ASTNode astNode, MethodBinding method)", "diff": ["-public void missingTypeInMethod(MessageSend messageSend, MethodBinding method) {", "+public void missingTypeInMethod(ASTNode astNode, MethodBinding method) {", "+\tint nameSourceStart, nameSourceEnd;", "+\tif (astNode instanceof MessageSend) {", "+\t\tMessageSend messageSend = astNode instanceof MessageSend ? (MessageSend) (astNode) : null;", "+\t\tnameSourceStart = (int) (messageSend.nameSourcePosition >>> 32);", "+\t\tnameSourceEnd = (int) messageSend.nameSourcePosition;", "+\t} else {", "+\t\tnameSourceStart = astNode.sourceStart;", "+\t\tnameSourceEnd = astNode.sourceEnd;", "+\t}", "-\t\t\t(int) (messageSend.nameSourcePosition >>> 32),", "-\t\t\t(int) messageSend.nameSourcePosition);", "+\t\t\tnameSourceStart,", "+\t\t\tnameSourceEnd);"]}], "num": 68383}
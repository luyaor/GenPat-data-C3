{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6313b019da8b86a731e8f91e12494f7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "314f8b8b200ad065ed0623b9e69e7f40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SyntheticMethodBinding.java", "commitBeforeChange": "5dcefdb7b6dc4ca118d352248744f6f6f0cfd53e", "commitAfterChange": "6568a2476b22c2b9915b48b3eb9ea4ea62f741d4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic SyntheticMethodBinding(SourceTypeBinding declaringEnum, char[] selector)", "signatureAfterChange": " \tpublic SyntheticMethodBinding(SourceTypeBinding declaringEnum, char[] selector)", "diff": ["+\t    this.declaringClass = declaringEnum;", "+\t    this.selector = selector;", "+\t    this.modifiers = AccFinal | AccPublic | AccStatic;", "+\t\tthis.tagBits |= TagBits.AnnotationResolved;", "+\t    this.thrownExceptions = NoExceptions;", "-\t\t    this.declaringClass = declaringEnum;", "-\t\t    this.selector = selector;", "-\t\t    this.modifiers = AccFinal | AccPublic | AccStatic;", "-\t\t    this.thrownExceptions = NoExceptions;", "-\t\t\tSyntheticMethodBinding[] knownAccessMethods = ((SourceTypeBinding)this.declaringClass).syntheticMethods();", "-\t\t\tint methodId = knownAccessMethods == null ? 0 : knownAccessMethods.length;", "-\t\t\tthis.index = methodId;\t    ", "-\t\t    this.declaringClass = declaringEnum;", "-\t\t    this.selector = selector;", "-\t\t    this.modifiers = AccFinal | AccPublic | AccStatic;", "-\t\t    this.thrownExceptions = NoExceptions;", "-\t\t\tSyntheticMethodBinding[] knownAccessMethods = ((SourceTypeBinding)this.declaringClass).syntheticMethods();", "-\t\t\tint methodId = knownAccessMethods == null ? 0 : knownAccessMethods.length;", "-\t\t\tthis.index = methodId;\t    ", "+\t\tSyntheticMethodBinding[] knownAccessMethods = ((SourceTypeBinding)this.declaringClass).syntheticMethods();", "+\t\tint methodId = knownAccessMethods == null ? 0 : knownAccessMethods.length;", "+\t\tthis.index = methodId;\t    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee2bb34bb59f9febc40cc6701a854654", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " public String[][] resolveType(String typeName, WorkingCopyOwner owner) throws JavaModelException", "signatureAfterChange": " public String[][] resolveType(String typeName, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-\tJavaProject project = (JavaProject)getJavaProject();", "-\tNameLookup lookup = null;", "-\ttry {", "-\t\t// set the units to look inside", "-\t\tlookup = project.getNameLookup();", "-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "-\t\tlookup.setUnitsToLookInside(workingCopies);", "-\t\t\t", "-\t\t// resolve", "-\t\tISourceType info = (ISourceType) this.getElementInfo();", "-\t\tISearchableNameEnvironment environment = project.getSearchableNameEnvironment();", "-\t", "-\t\tclass TypeResolveRequestor implements ISelectionRequestor {", "-\t\t\tString[][] answers = null;", "-\t\t\tvoid acceptType(String[] answer){", "-\t\t\t\tif (answers == null) {", "-\t\t\t\t\tanswers = new String[][]{ answer };", "-\t\t\t\t} else {", "-\t\t\t\t\t// grow", "-\t\t\t\t\tint length = answers.length;", "-\t\t\t\t\tSystem.arraycopy(answers, 0, answers = new String[length+1][], 0, length);", "-\t\t\t\t\tanswers[length] = answer;", "-\t\t\t\t}", "+\tISourceType info = (ISourceType) getElementInfo();", "+\tJavaProject project = (JavaProject) getJavaProject();", "+\tISearchableNameEnvironment environment = project.newSearchableNameEnvironment(owner);", "+", "+\tclass TypeResolveRequestor implements ISelectionRequestor {", "+\t\tString[][] answers = null;", "+\t\tvoid acceptType(String[] answer){", "+\t\t\tif (answers == null) {", "+\t\t\t\tanswers = new String[][]{ answer };", "+\t\t\t} else {", "+\t\t\t\t// grow", "+\t\t\t\tint length = answers.length;", "+\t\t\t\tSystem.arraycopy(answers, 0, answers = new String[length+1][], 0, length);", "+\t\t\t\tanswers[length] = answer;", "-\t\t\tpublic void acceptClass(char[] packageName, char[] className, boolean needQualification) {", "-\t\t\t\tacceptType(new String[]  { new String(packageName), new String(className) });", "-\t\t\t}", "-\t\t\t", "-\t\t\tpublic void acceptInterface(char[] packageName, char[] interfaceName, boolean needQualification) {", "-\t\t\t\tacceptType(new String[]  { new String(packageName), new String(interfaceName) });", "-\t\t\t}", "-\t", "-\t\t\tpublic void acceptError(IProblem error) {", "-\t\t\t\t// ignore", "-\t\t\t}", "-\t\t\tpublic void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] fieldName) {", "-\t\t\t\t// ignore", "-\t\t\t}", "-\t\t\tpublic void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor) {", "-\t\t\t\t// ignore", "-\t\t\t}", "-\t\t\tpublic void acceptPackage(char[] packageName){", "-\t\t\t\t// ignore", "-\t\t\t}", "-\t", "-\t\tTypeResolveRequestor requestor = new TypeResolveRequestor();", "-\t\tSelectionEngine engine = ", "-\t\t\tnew SelectionEngine(environment, requestor, this.getJavaProject().getOptions(true));", "-\t\t\t", "-\t \tIType[] topLevelTypes = this.getCompilationUnit().getTypes();", "-\t \tint length = topLevelTypes.length;", "-\t \tSourceTypeElementInfo[] topLevelInfos = new SourceTypeElementInfo[length];", "-\t \tfor (int i = 0; i < length; i++) {", "-\t\t\ttopLevelInfos[i] = (SourceTypeElementInfo) ((SourceType)topLevelTypes[i]).getElementInfo();", "+\t\tpublic void acceptClass(char[] packageName, char[] className, boolean needQualification) {", "+\t\t\tacceptType(new String[]  { new String(packageName), new String(className) });", "-\t\t\t", "-\t\tengine.selectType(info, typeName.toCharArray(), topLevelInfos, false);", "-\t\treturn requestor.answers;", "-\t} finally {", "-\t\tif (lookup != null) {", "-\t\t\tlookup.setUnitsToLookInside(null);", "+\t\t", "+\t\tpublic void acceptInterface(char[] packageName, char[] interfaceName, boolean needQualification) {", "+\t\t\tacceptType(new String[]  { new String(packageName), new String(interfaceName) });", "+", "+\t\tpublic void acceptError(IProblem error) {", "+\t\t\t// ignore", "+\t\t}", "+\t\tpublic void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] fieldName) {", "+\t\t\t// ignore", "+\t\t}", "+\t\tpublic void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor) {", "+\t\t\t// ignore", "+\t\t}", "+\t\tpublic void acceptPackage(char[] packageName){", "+\t\t\t// ignore", "+\t\t}", "+", "+\tTypeResolveRequestor requestor = new TypeResolveRequestor();", "+\tSelectionEngine engine = ", "+\t\tnew SelectionEngine(environment, requestor, project.getOptions(true));", "+\t\t", "+ \tIType[] topLevelTypes = getCompilationUnit().getTypes();", "+ \tint length = topLevelTypes.length;", "+ \tSourceTypeElementInfo[] topLevelInfos = new SourceTypeElementInfo[length];", "+ \tfor (int i = 0; i < length; i++) {", "+\t\ttopLevelInfos[i] = (SourceTypeElementInfo) ((SourceType)topLevelTypes[i]).getElementInfo();", "+\t}", "+\t\t", "+\tengine.selectType(info, typeName.toCharArray(), topLevelInfos, false);", "+\treturn requestor.answers;"]}], "num": 47602}
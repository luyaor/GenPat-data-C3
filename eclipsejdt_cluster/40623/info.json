{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "02f12505852562f2a43439663896842f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08a03719c1c9a65cb4768d16ed57ba99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "20c9553c55b67a9c07624bd0b5b35f188a7f1769", "commitAfterChange": "14fb89a0281d6b0089ef94e47420da3d5f85923f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public int addMatch(ASTNode node, int matchLevel)", "signatureAfterChange": "  public int addMatch(ASTNode node, int matchLevel)", "diff": ["-\tswitch (matchLevel & PatternLocator.NODE_SET_MASK) {", "+\tint maskedLevel = matchLevel & PatternLocator.MATCH_LEVEL_MASK;", "+\tswitch (maskedLevel) {", "-\t\t\taddTrustedMatch(node, POTENTIAL_MATCH);", "+\t\t\tif (matchLevel != maskedLevel) {", "+\t\t\t\taddTrustedMatch(node, new Integer(SearchMatch.A_INACCURATE+(matchLevel & PatternLocator.FLAVORS_MASK)));", "+\t\t\t} else {", "+\t\t\t\taddTrustedMatch(node, POTENTIAL_MATCH);", "+\t\t\t}", "-\t\t\taddTrustedMatch(node, ERASURE_MATCH);", "+\t\t\tif (matchLevel != maskedLevel) {", "+\t\t\t\taddTrustedMatch(node, new Integer(SearchPattern.R_ERASURE_MATCH+(matchLevel & PatternLocator.FLAVORS_MASK)));", "+\t\t\t} else {", "+\t\t\t\taddTrustedMatch(node, ERASURE_MATCH);", "+\t\t\t}", "-\t\t\taddTrustedMatch(node, EXACT_MATCH);", "+\t\t\tif (matchLevel != maskedLevel) {", "+\t\t\t\taddTrustedMatch(node, new Integer(SearchMatch.A_ACCURATE+(matchLevel & PatternLocator.FLAVORS_MASK)));", "+\t\t\t} else {", "+\t\t\t\taddTrustedMatch(node, EXACT_MATCH);", "+\t\t\t}", "+\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ddcba5685f85a6520e9d994e926ff76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "fbe3f3aabed3fd943703368b065a95bc68cf5a8d", "commitAfterChange": "3b51e6fd25bf226c9bb29d6317b71df712cf5255", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r private void configure(String[] argv) throws InvalidInputException", "diff": ["+\tfinal int SourceOption = 32;\r", "+\t\tif (currentArg.equals(\"-source\"/*nonNLS*/)) {\r", "+\t\t\tmode = SourceOption;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\t\r", "+\t\tif (mode == SourceOption) {\r", "+\t\t\tif (currentArg.equals(\"1.4\"/*nonNLS*/)) {\r", "+\t\t\t\tassertMode = true;\r", "+\t\t\t} else if (currentArg.equals(\"1.3\"/*nonNLS*/)) {\r", "+\t\t\t\tassertMode = false;\r", "+\t\t\t} else {\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.sourceOption\"/*nonNLS*/,currentArg));\r", "+\t\t\t}\r", "+\t\t\tmode = Default;\t\t\t\r", "+\t\t\tcontinue;\r", "+\t\t}\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b730eb13b0a262d9527cb80e76909d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 90, "signatureBeforeChange": "  \tpublic PackageDeclaration convertPackage(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnitDeclaration)", "signatureAfterChange": "  \tpublic PackageDeclaration convertPackage(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnitDeclaration)", "diff": ["-\tpublic PackageDeclaration convertPackage(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnitDeclaration) {", "-\t\torg.eclipse.jdt.internal.compiler.ast.ImportReference importReference = compilationUnitDeclaration.currentPackage;", "-\t\tPackageDeclaration packageDeclaration = this.ast.newPackageDeclaration();", "-\t\tchar[][] tokens = importReference.tokens;", "-\t\tint length = importReference.tokens.length;", "-\t\tlong[] positions = importReference.sourcePositions;", "-\t\tint start = (int)(positions[0]>>>32);", "-\t\tint end = (int)(positions[length - 1] & 0xFFFFFFFF);", "-\t\tName name = null;", "-\t\tif (length > 1) {", "-\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, importReference);", "-\t\t} else {", "-\t\t\tname = this.ast.newSimpleName(new String(tokens[0]));", "-\t\t\tname.setSourceRange(start, end - start + 1);", "-\t\t}", "-\t\tpackageDeclaration.setSourceRange(importReference.declarationSourceStart, importReference.declarationEnd - importReference.declarationSourceStart + 1);", "-\t\tpackageDeclaration.setName(name);", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(packageDeclaration, importReference);", "-\t\t\trecordNodes(name, compilationUnitDeclaration);", "-\t\t}", "-\t\treturn packageDeclaration;", "-\t}", "+", "+\tpublic PackageDeclaration convertPackage(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnitDeclaration) {", "+\t\torg.eclipse.jdt.internal.compiler.ast.ImportReference importReference = compilationUnitDeclaration.currentPackage;", "+\t\tPackageDeclaration packageDeclaration = this.ast.newPackageDeclaration();", "+\t\tchar[][] tokens = importReference.tokens;", "+\t\tint length = importReference.tokens.length;", "+\t\tlong[] positions = importReference.sourcePositions;", "+\t\tint start = (int)(positions[0]>>>32);", "+\t\tint end = (int)(positions[length - 1] & 0xFFFFFFFF);", "+\t\tName name = null;", "+\t\tif (length > 1) {", "+\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, importReference);", "+\t\t} else {", "+\t\t\tname = this.ast.newSimpleName(new String(tokens[0]));", "+\t\t\tname.setSourceRange(start, end - start + 1);", "+\t\t}", "+\t\tpackageDeclaration.setSourceRange(importReference.declarationSourceStart, importReference.declarationEnd - importReference.declarationSourceStart + 1);", "+\t\tpackageDeclaration.setName(name);", "+\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = importReference.annotations;", "+\t\tif (annotations != null) {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\tpackageDeclaration.setFlags(packageDeclaration.getFlags() & ASTNode.MALFORMED);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tfor (int i = 0, max = annotations.length; i < max; i++) {", "+\t\t\t\t\t\tpackageDeclaration.annotations().add(convert(annotations[i]));", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(packageDeclaration, importReference);", "+\t\t\trecordNodes(name, compilationUnitDeclaration);", "+\t\t}", "+\t\treturn packageDeclaration;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fbd917626d1e27100bb66bacd1ad3ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "b56d246271c095551a3a882f52570003cc372a30", "commitAfterChange": "3000413ce5f7d2704ad6fa8d0b9095de57112c06", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["-\t\t\t\t\tbuffer.append(this.binding.constantPoolName());", "+\t\t\t\t\tchar[] constantPoolName = this.binding.constantPoolName();", "+\t\t\t\t\tif (constantPoolName != null) {", "+\t\t\t\t\t\tbuffer.append(constantPoolName);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tchar[] qualifiedSourceName = this.binding.qualifiedSourceName();", "+\t\t\t\t\t\tif (qualifiedSourceName != null) {", "+\t\t\t\t\t\t\tCharOperation.replace(qualifiedSourceName, '.', '$');", "+\t\t\t\t\t\t\tbuffer", "+\t\t\t\t\t\t\t\t.append(getPackage().getName())", "+\t\t\t\t\t\t\t\t.append(qualifiedSourceName);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tbuffer", "+\t\t\t\t\t\t\t\t.append(getPackage().getName())", "+\t\t\t\t\t\t\t\t.append('/')", "+\t\t\t\t\t\t\t\t.append(getName());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41c8a336db34cb0f507df536295c8710", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDeltaBuilder.java", "commitBeforeChange": "ee7a9f184cb78c9a997b3d97c102d52d6cad8cc9", "commitAfterChange": "5ce130e25c355987e77b700c026948aca2c3cdd7", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 17, "signatureBeforeChange": " private void recordElementInfo(IJavaElement element, JavaModel model, int depth)", "signatureAfterChange": " private void recordElementInfo(IJavaElement element, JavaModel model, int depth)", "diff": ["-\tthis.putElementInfo(element, info);", "+\tthis.infos.put(element, info);", "+\tIAnnotation[] annotations = null;", "+\tif (info instanceof AnnotatableInfo) ", "+\t\tannotations = ((AnnotatableInfo) info).annotations;", "+\tif (annotations != null) {", "+\t\tif (this.annotationInfos == null)", "+\t\t\tthis.annotationInfos = new HashMap();", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tfor (int i = 0, length = annotations.length; i < length; i++) {", "+\t\t\tthis.annotationInfos.put(annotations[i], manager.getInfo(annotations[i]));", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68489c2f6f9e181d2a24d9c124170691", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic NameLookup(IJavaProject project) throws JavaModelException", "signatureAfterChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashMap packageFragments, ICompilationUnit[] workingCopies) throws JavaModelException", "diff": ["-\tpublic NameLookup(IJavaProject project) throws JavaModelException {", "-\t\tconfigureFromProject(project);", "+\tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashMap packageFragments, ICompilationUnit[] workingCopies) throws JavaModelException {", "+\t\tthis.packageFragmentRoots = packageFragmentRoots;", "+\t\tthis.packageFragments = packageFragments;", "+\t\tif (workingCopies != null) {", "+\t\t\tthis.unitsToLookInside = new HashMap();", "+\t\t\tfor (int i = 0, length = workingCopies.length; i < length; i++) {", "+\t\t\t\tICompilationUnit unitToLookInside = workingCopies[i];", "+\t\t\t\tICompilationUnit original = unitToLookInside.getPrimary();", "+\t\t\t\tthis.unitsToLookInside.put(original, unitToLookInside);", "+\t\t\t}", "+\t\t}"]}], "num": 40623}
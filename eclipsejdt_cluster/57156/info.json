{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d02e164ca4f7500fa2f1e9a2ec07022", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f1e448834ae4dde608db9d525fb5683", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "009f20126c1d3488d55fd03939439082cc2b8500", "commitAfterChange": "221d108d3944a4b3be482e01878be27efb774a39", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["-", "+\tfinal boolean reportUnavoidableGenericTypeProblems = this.scope.compilerOptions().reportUnavoidableGenericTypeProblems;", "-\t\t\tTypeBinding parameterType = arg.type.resolveType(methodDecl.scope, true /* check bounds*/);", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=322817", "+\t\t\tboolean deferRawTypeCheck = !reportUnavoidableGenericTypeProblems && (arg.type.bits & ASTNode.IgnoreRawTypeCheck) == 0;", "+\t\t\tTypeBinding parameterType;", "+\t\t\tif (deferRawTypeCheck) {", "+\t\t\t\targ.type.bits |= ASTNode.IgnoreRawTypeCheck;", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tparameterType = arg.type.resolveType(methodDecl.scope, true /* check bounds*/);", "+\t\t\t} finally {", "+\t\t\t\tif (deferRawTypeCheck) { ", "+\t\t\t\t\targ.type.bits &= ~ASTNode.IgnoreRawTypeCheck;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t", "-\t\t\tTypeBinding methodType = returnType.resolveType(methodDecl.scope, true /* check bounds*/);", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=322817", "+\t\t\tboolean deferRawTypeCheck = !reportUnavoidableGenericTypeProblems && (returnType.bits & ASTNode.IgnoreRawTypeCheck) == 0;", "+\t\t\tTypeBinding methodType;", "+\t\t\tif (deferRawTypeCheck) {", "+\t\t\t\treturnType.bits |= ASTNode.IgnoreRawTypeCheck;", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tmethodType = returnType.resolveType(methodDecl.scope, true /* check bounds*/);", "+\t\t\t} finally {", "+\t\t\t\tif (deferRawTypeCheck) { ", "+\t\t\t\t\treturnType.bits &= ~ASTNode.IgnoreRawTypeCheck;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2a40195f4ee8dc78e0acb5b08d41775", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "78e8a5c1a2e383b6d515ba3aab0d674e5548befa", "commitAfterChange": "4cb6b481d6e3c4ba44985d7b9c454fbe1bc42a7d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \r \tprivate IBinding returnBindingForQualifiedNamePart(ASTNode parent, int index)", "signatureAfterChange": "\r \r \tprivate IBinding returnBindingForQualifiedNamePart(ASTNode parent, int index)", "diff": ["-\t\t\t\t\treturn this.getTypeBinding(scope.getType(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName)));\r", "+\t\t\t\t\tBinding binding = scope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));\r", "+\t\t\t\t\tif (binding != null && binding.isValidBinding()) {\r", "+\t\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.PackageBinding) {\r", "+\t\t\t\t\t\t\treturn this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding)binding);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t// it is a type\r", "+\t\t\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding)binding);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\treturn null;\r"]}], "num": 57156}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4caf06d39055b1b90133f94e78ad44aa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a377fa6caddaa5d87e1454744480f91e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e1db8d4dbeb82ef211965c2ec07d2a51a3043b99", "commitAfterChange": "00d0740df9a9831befee6a5d66ec2fdb12e10db8", "methodNumberBeforeChange": 298, "methodNumberAfterChange": 298, "signatureBeforeChange": " public void test148()", "signatureAfterChange": " public void test148()", "diff": ["-\tthis.runNegativeTest(", "-\t\tnew String[] {", "-\t\t\t\"Y.java\",", "-\t\t\t\"abstract class X { abstract <T extends Object> T go(A<T> a); }\\n\" +", "-\t\t\t\"class Y extends X {\\n\" +", "-\t\t\t\"\t@Override <T extends Object> T go(A a) { return null; }\\n\" +", "-\t\t\t\"}\\n\" + ", "-\t\t\t\"class A<T> {}\"", "-\t\t},", "+\tString baseLogPart1 = ", "-\t\t\"\t                               ^^^^^^^\\n\" + ", "-\t\t\"The method go(A) of type Y must override a superclass method\\n\" + ", "+\t\t\"\t                               ^^^^^^^\\n\";", "+\tString baseLogPart2 = ", "-\t\t\"----------\\n\"", "+\t\t\"----------\\n\";", "+\tString overrideLog= \"The method go(A) of type Y must override a superclass method\\n\";", "+\t// warning message differs at 1.6 level", "+\tif (COMPLIANCE_1_6.compareTo(this.complianceLevel) <= 0) {", "+\t\toverrideLog = \"The method go(A) of type Y must override or implement a supertype method\\n\";", "+\t}", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"Y.java\",", "+\t\t\t\"abstract class X { abstract <T extends Object> T go(A<T> a); }\\n\" +", "+\t\t\t\"class Y extends X {\\n\" +", "+\t\t\t\"\t@Override <T extends Object> T go(A a) { return null; }\\n\" +", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class A<T> {}\"", "+\t\t}, baseLogPart1 + overrideLog + baseLogPart2"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8b7790ed2b455ed74ee373f5e7ca872", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "8d9e4d82b7907a3f11b58a9fee1e77dc3999b852", "commitAfterChange": "15b9b64cd3395138df99a099416e32d991a0ba26", "methodNumberBeforeChange": 298, "methodNumberAfterChange": 298, "signatureBeforeChange": " public void test148()", "signatureAfterChange": " public void test148()", "diff": ["-\tString baseLogPart1 = ", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"Y.java\",", "+\t\t\t\"abstract class X { abstract <T extends Object> T go(A<T> a); }\\n\" +", "+\t\t\t\"class Y extends X {\\n\" +", "+\t\t\t\"\t@Override <T extends Object> T go(A a) { return null; }\\n\" +", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class A<T> {}\"", "+\t\t},", "-\t\t\"\t                               ^^^^^^^\\n\";", "-\tString baseLogPart2 = ", "+\t\t\"\t                               ^^^^^^^\\n\" + ", "+\t\tmustOverrideMessage(\"go(A)\", \"Y\") + ", "-\t\t\"----------\\n\";", "-\tString overrideLog= \"The method go(A) of type Y must override a superclass method\\n\";", "-\t// warning message differs at 1.6 level", "-\tif (COMPLIANCE_1_6.compareTo(this.complianceLevel) <= 0) {", "-\t\toverrideLog = \"The method go(A) of type Y must override or implement a supertype method\\n\";", "-\t}", "-\tthis.runNegativeTest(", "-\t\tnew String[] {", "-\t\t\t\"Y.java\",", "-\t\t\t\"abstract class X { abstract <T extends Object> T go(A<T> a); }\\n\" +", "-\t\t\t\"class Y extends X {\\n\" +", "-\t\t\t\"\t@Override <T extends Object> T go(A a) { return null; }\\n\" +", "-\t\t\t\"}\\n\" + ", "-\t\t\t\"class A<T> {}\"", "-\t\t}, baseLogPart1 + overrideLog + baseLogPart2", "+\t\t\"----------\\n\""]}], "num": 47945}
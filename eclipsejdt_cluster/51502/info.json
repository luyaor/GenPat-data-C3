{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa53b4d1e4b57620478d5c7c748d0b88", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2040ed6ce90d612143fb0c34e7fff3ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "2f2916c1fb13d22701e433ffbb1a51f9e96c2bc4", "commitAfterChange": "a47d03faa1d7f04a91914573d6a6cca4eff80427", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "\r \tpublic void readVariables(String xmlString) throws IOException", "signatureAfterChange": "\r \tpublic void readVariables(String xmlString) throws IOException", "diff": ["+\t\tArrayList variableNamesList = new ArrayList();\r", "+\t\tArrayList variablePathsList = new ArrayList();\r", "+\t\t\r", "-\t\t\t\t\tString varName = element.getAttribute(\"name\"); //$NON-NLS-1$\r", "-\t\t\t\t\tString varPath = element.getAttribute(\"path\"); //$NON-NLS-1$\r", "-\t\t\t\t\ttry {\r", "-\t\t\t\t\t\tJavaCore.setClasspathVariable(varName, new Path(varPath), null);\r", "-\t\t\t\t\t} catch(JavaModelException e){\r", "-\t\t\t\t\t} catch(RuntimeException e){\r", "-\t\t\t\t\t}\r", "+\t\t\t\t\tvariableNamesList.add(element.getAttribute(\"name\")); //$NON-NLS-1$\r", "+\t\t\t\t\tvariablePathsList.add(new Path(element.getAttribute(\"path\"))); //$NON-NLS-1$\r", "+\t\t// set all variables at once\r", "+\t\ttry {\r", "+\t\t\tString[] variableNames = new String[variableNamesList.size()];\r", "+\t\t\tvariableNamesList.toArray(variableNames);\r", "+\t\t\tIPath[] variablePaths = new IPath[variablePathsList.size()];\r", "+\t\t\tvariablePathsList.toArray(variablePaths);\r", "+\t\t\tJavaCore.setClasspathVariables(variableNames, variablePaths, null);\r", "+\t\t} catch(JavaModelException e){\r", "+\t\t} catch(RuntimeException e){\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "230d0fe64c6e12a61460aac1ab30466a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "acfd6219b4879c4f154d609311f730da9a1473fe", "commitAfterChange": "ba5522acacd2cbe8e43baf52d73c691d0f7ad183", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tprotected String getURLContents(String docUrlValue) throws JavaModelException", "signatureAfterChange": " \tprotected String getURLContents(String docUrlValue) throws JavaModelException", "diff": ["-\t\t} catch(IOException e) {", "-\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.CANNOT_RETRIEVE_ATTACHED_JAVADOC, this));", "+\t\t} /*catch(SocketException e) {", "+\t\t\t// ignore. see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=120559", "+\t\t} */catch(IOException e) {", "+\t\t\tStringWriter stringWriter = new StringWriter();", "+\t\t\tPrintWriter writer = new PrintWriter(stringWriter);", "+\t\t\te.printStackTrace(writer);", "+\t\t\twriter.flush();", "+\t\t\twriter.close();", "+\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.CANNOT_RETRIEVE_ATTACHED_JAVADOC, this, String.valueOf(stringWriter.getBuffer())));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3186dc3f985be3a8daaf5a74b6512172", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "671203b650cf0c5ccde429cd68a99e555968a741", "commitAfterChange": "d25238a21da607e3e34ec805e2a7ff8f112fbd1b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic String disassemble(byte[] classFileBytes, String lineSeparator, int mode) throws ClassFormatException", "signatureAfterChange": " \tpublic String disassemble(byte[] classFileBytes, String lineSeparator, int mode) throws ClassFormatException", "diff": ["-\t\treturn disassemble(new ClassFileReader(classFileBytes, IClassFileReader.ALL), lineSeparator, mode);", "+\t\ttry {", "+\t\t\treturn disassemble(new ClassFileReader(classFileBytes, IClassFileReader.ALL), lineSeparator, mode);", "+\t\t} catch (ArrayIndexOutOfBoundsException e) {", "+\t\t\tStringWriter stringWriter = new StringWriter();", "+\t\t\tPrintWriter writer = new PrintWriter(stringWriter);", "+\t\t\te.printStackTrace(writer);", "+\t\t\twriter.flush();", "+\t\t\twriter.close();", "+\t\t\tthrow new ClassFormatException(String.valueOf(stringWriter.getBuffer()));", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b83e4481b99f4dc02cd26640dc1f17a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "671203b650cf0c5ccde429cd68a99e555968a741", "commitAfterChange": "d25238a21da607e3e34ec805e2a7ff8f112fbd1b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic String disassemble(byte[] classFileBytes, String lineSeparator) throws ClassFormatException", "signatureAfterChange": " \tpublic String disassemble(byte[] classFileBytes, String lineSeparator) throws ClassFormatException", "diff": ["-\t\treturn disassemble(new ClassFileReader(classFileBytes, IClassFileReader.ALL), lineSeparator, ClassFileBytesDisassembler.DEFAULT);", "+\t\ttry {", "+\t\t\treturn disassemble(new ClassFileReader(classFileBytes, IClassFileReader.ALL), lineSeparator, ClassFileBytesDisassembler.DEFAULT);", "+\t\t} catch (ArrayIndexOutOfBoundsException e) {", "+\t\t\tStringWriter stringWriter = new StringWriter();", "+\t\t\tPrintWriter writer = new PrintWriter(stringWriter);", "+\t\t\te.printStackTrace(writer);", "+\t\t\twriter.flush();", "+\t\t\twriter.close();", "+\t\t\tthrow new ClassFormatException(String.valueOf(stringWriter.getBuffer()));", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1b0cf364ca86f98ca9dfe34afaecac7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "c333ceff8dd520a0590ee780b2fe8c5efcd4c013", "commitAfterChange": "c77b24714f3e6f9d0a1f77d86a434cfb1d3d7793", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected void generateClasspathChangeDeltas( \t\tIClasspathEntry[] oldResolvedPath, \t\tIClasspathEntry[] newResolvedPath, \t\tJavaModelManager manager, \t\tfinal JavaProject project)", "signatureAfterChange": " \tprotected void generateClasspathChangeDeltas( \t\tIClasspathEntry[] oldResolvedPath, \t\tIClasspathEntry[] newResolvedPath, \t\tJavaModelManager manager, \t\tfinal JavaProject project)", "diff": ["-\t\t\t\t\tpkgFragmentRoots = project.computePackageFragmentRoots(oldResolvedPath[i]);", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tObjectVector accumulatedRoots = new ObjectVector();", "+\t\t\t\t\t\tHashSet rootIDs = new HashSet(5);", "+\t\t\t\t\t\trootIDs.add(project.rootID());", "+\t\t\t\t\t\tproject.computePackageFragmentRoots(", "+\t\t\t\t\t\t\toldResolvedPath[i], ", "+\t\t\t\t\t\t\taccumulatedRoots, ", "+\t\t\t\t\t\t\trootIDs,", "+\t\t\t\t\t\t\ttrue, // inside original project", "+\t\t\t\t\t\t\tfalse, // don't check existency", "+\t\t\t\t\t\t\tfalse); // don't retrieve exported roots", "+\t\t\t\t\t\tpkgFragmentRoots = new IPackageFragmentRoot[accumulatedRoots.size()];", "+\t\t\t\t\t\taccumulatedRoots.copyInto(pkgFragmentRoots);", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\tpkgFragmentRoots =  new IPackageFragmentRoot[] {};", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e076a909c028a1b90948515e5c26828d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/typeutils/TypeUtilsProc.java", "commitBeforeChange": "e254cb1235fced696c16505589db91831c0df710", "commitAfterChange": "fdf4380d8dd2e7b1f08462c3e15a52a8d6142eb4", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "signatureAfterChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "diff": ["-\t\tif (!examinePrimitives()) {", "-\t\t\treturn false;", "-\t\t}", "-\t\t", "-\t\tif (!examineNoType()) {", "-\t\t\treturn false;", "-\t\t}", "-\t\t", "-\t\tif (!examineGetDeclaredType()) {", "-\t\t\treturn false;", "-\t\t}", "-\t\t", "-\t\tif (!examineGetDeclaredTypeParameterized()) {", "-\t\t\treturn false;", "-\t\t}", "-", "-\t\tif (!examineGetDeclaredTypeNested()) {", "-\t\t\treturn false;", "-\t\t}", "-\t\t", "-\t\tif (!examineGetArrayTypeParameterized()) {", "-\t\t\treturn false;", "+\t\ttry {", "+    \t\tif (!examinePrimitives()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    \t\t", "+    \t\tif (!examineNoType()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    \t\t", "+    \t\tif (!examineGetDeclaredType()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    \t\t", "+    \t\tif (!examineGetDeclaredTypeParameterized()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    ", "+    \t\tif (!examineGetDeclaredTypeNested()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    \t\t", "+    \t\tif (!examineGetArrayTypeParameterized()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    \t\t", "+    \t\tif (!examineTypesAsMemberOf()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    \t\t", "+    \t\tif (!examineTypesAsMemberOfSubclass()) {", "+    \t\t    return false;", "+    \t\t}", "+\t\t} catch (RuntimeException e) {", "+\t\t    StringWriter sw = new StringWriter();", "+\t\t    PrintWriter w = new PrintWriter(sw);", "+\t\t    e.printStackTrace(w);", "+\t\t    reportError(sw.toString());", "+\t\t    return false;"]}], "num": 51502}
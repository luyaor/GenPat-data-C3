{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7af486d866a8ac7c5bacec28b2cc1398", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a65e369763126b07787cc563309e5c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6021d67f030c85737aa105da719e9a09cfc30ed", "commitAfterChange": "47da1e1f50b1360a7b560d74dfe1c60303fec552", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": " public synchronized void removeIndex(IPath containerPath)", "signatureAfterChange": " public synchronized void removeIndex(IPath containerPath)", "diff": ["-\tIPath indexLocation = computeIndexLocation(containerPath);", "+\tIndexLocation indexLocation = computeIndexLocation(containerPath);", "-\t\tindexFile = new File(indexLocation.toOSString()); // index is not cached yet, but still want to delete the file", "-\tif (indexFile.exists()) {", "+\t\tindexFile = indexLocation.getIndexFile(); // index is not cached yet, but still want to delete the file", "+\tif (this.indexStates.get(indexLocation) == REUSE_STATE) {", "+\t\tindexLocation.close();", "+\t\tthis.indexLocations.put(containerPath, null);", "+\t} else if (indexFile != null && indexFile.exists()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec33184a4638052deed9f58cd34d667a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "6a9c839afeea06e7dd97b023fa9c24def00f0f08", "commitAfterChange": "cf7db1b07f7da2723bd250cc64a7e16bec1c504d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private IType findSuperClass(IGenericType type, ReferenceBinding typeBinding)", "signatureAfterChange": " private IType findSuperClass(IGenericType type, ReferenceBinding typeBinding)", "diff": ["-\t\tif (superBinding.id == TypeIds.T_JavaLangObject && typeBinding.isHierarchyInconsistent()) {", "-\t\t\tchar[] superclassName;", "-\t\t\tchar separator;", "-\t\t\tif (type instanceof IBinaryType) {", "-\t\t\t\tsuperclassName = ((IBinaryType)type).getSuperclassName();", "-\t\t\t\tseparator = '/';", "-\t\t\t} else if (type instanceof ISourceType) {", "-\t\t\t\tsuperclassName = ((ISourceType)type).getSuperclassName();", "-\t\t\t\tseparator = '.';", "-\t\t\t} else if (type instanceof HierarchyType) {", "-\t\t\t\tsuperclassName = ((HierarchyType)type).superclassName;", "-\t\t\t\tseparator = '.';", "-\t\t\t} else {", "+\t\tif (typeBinding.isHierarchyInconsistent()) {", "+\t\t\tif (superBinding.problemId() == ProblemReasons.NotFound) {", "+\t\t\t\tthis.hasMissingSuperClass = true;", "+\t\t\t\tthis.builder.hierarchy.missingTypes.add(new String(superBinding.sourceName)); // note: this could be Map$Entry", "-\t\t\t}", "-\t\t\t", "-\t\t\tif (superclassName != null) { // check whether subclass of Object due to broken hierarchy (as opposed to explicitly extending it)", "-\t\t\t\tint lastSeparator = CharOperation.lastIndexOf(separator, superclassName);", "-\t\t\t\tchar[] simpleName = lastSeparator == -1 ? superclassName : CharOperation.subarray(superclassName, lastSeparator+1, superclassName.length);", "-\t\t\t\tif (!CharOperation.equals(simpleName, TypeConstants.OBJECT)) {", "-\t\t\t\t\tthis.hasMissingSuperClass = true;", "-\t\t\t\t\tthis.builder.hierarchy.missingTypes.add(new String(simpleName));", "+\t\t\t} else if ((superBinding.id == TypeIds.T_JavaLangObject)) {", "+\t\t\t\tchar[] superclassName;", "+\t\t\t\tchar separator;", "+\t\t\t\tif (type instanceof IBinaryType) {", "+\t\t\t\t\tsuperclassName = ((IBinaryType)type).getSuperclassName();", "+\t\t\t\t\tseparator = '/';", "+\t\t\t\t} else if (type instanceof ISourceType) {", "+\t\t\t\t\tsuperclassName = ((ISourceType)type).getSuperclassName();", "+\t\t\t\t\tseparator = '.';", "+\t\t\t\t} else if (type instanceof HierarchyType) {", "+\t\t\t\t\tsuperclassName = ((HierarchyType)type).superclassName;", "+\t\t\t\t\tseparator = '.';", "+\t\t\t\t} else {", "+\t\t\t\t", "+\t\t\t\tif (superclassName != null) { // check whether subclass of Object due to broken hierarchy (as opposed to explicitly extending it)", "+\t\t\t\t\tint lastSeparator = CharOperation.lastIndexOf(separator, superclassName);", "+\t\t\t\t\tchar[] simpleName = lastSeparator == -1 ? superclassName : CharOperation.subarray(superclassName, lastSeparator+1, superclassName.length);", "+\t\t\t\t\tif (!CharOperation.equals(simpleName, TypeConstants.OBJECT)) {", "+\t\t\t\t\t\tthis.hasMissingSuperClass = true;", "+\t\t\t\t\t\tthis.builder.hierarchy.missingTypes.add(new String(simpleName));", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 30933}
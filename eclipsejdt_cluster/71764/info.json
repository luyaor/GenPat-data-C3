{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "05cdf8d7131d15212ce76957f14809f8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fd82efee4a205329158553dda79b746", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "5280e1e8db473b5a94d57033a6d3cab2e44e385d", "commitAfterChange": "2f280867bbcfaf415b943516836db7a4100ee4c3", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 90, "signatureBeforeChange": "  protected void setPaths(ArrayList bootclasspaths, \t\tString sourcepathClasspathArg, \t\tArrayList sourcepathClasspaths, \t\tArrayList classpaths, \t\tArrayList extdirsClasspaths, \t\tArrayList endorsedDirClasspaths, \t\tString customEncoding) throws InvalidInputException", "signatureAfterChange": "  protected void setPaths(ArrayList bootclasspaths, \t\tString sourcepathClasspathArg, \t\tArrayList sourcepathClasspaths, \t\tArrayList classpaths, \t\tArrayList extdirsClasspaths, \t\tArrayList endorsedDirClasspaths, \t\tString customEncoding) throws InvalidInputException", "diff": ["-\tif (extdirsClasspaths == null) {", "-\t\textdirsClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\t\tString extdirsStr = System.getProperty(\"java.ext.dirs\"); //$NON-NLS-1$", "-\t\tif (extdirsStr == null) {", "-\t\t\tif (javaHome != null) {", "-\t\t\t\textdirsClasspaths.add(javaHome.getAbsolutePath() + \"/lib/ext\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t} else {", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(extdirsStr, File.pathSeparator);", "-\t\t\twhile (tokenizer.hasMoreTokens()) ", "-\t\t\t\textdirsClasspaths.add(tokenizer.nextToken());", "-\t\t}", "-\t}", "-\t", "-\t/*", "-\t * Feed extdirsClasspath with the entries found into the directories listed by", "-\t * extdirsNames.", "-\t */", "-\tif (extdirsClasspaths.size() != 0) {", "-\t\tFile[] directoriesToCheck = new File[extdirsClasspaths.size()];", "-\t\tfor (int i = 0; i < directoriesToCheck.length; i++) ", "-\t\t\tdirectoriesToCheck[i] = new File((String) extdirsClasspaths.get(i));", "-\t\textdirsClasspaths.clear();", "-\t\tFile[][] extdirsJars = getLibrariesFiles(directoriesToCheck);", "-\t\tif (extdirsJars != null) {", "-\t\t\tfor (int i = 0, max = extdirsJars.length; i < max; i++) {", "-\t\t\t\tFile[] current = extdirsJars[i];", "-\t\t\t\tif (current != null) {", "-\t\t\t\t\tfor (int j = 0, max2 = current.length; j < max2; j++) {", "-\t\t\t\t\t\tFileSystem.Classpath classpath = ", "-\t\t\t\t\t\t\tFileSystem.getClasspath(", "-\t\t\t\t\t\t\t\t\tcurrent[j].getAbsolutePath(),", "-\t\t\t\t\t\t\t\t\tnull, null); ", "-\t\t\t\t\t\tif (classpath != null) {", "-\t\t\t\t\t\t\textdirsClasspaths.add(classpath);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else if (directoriesToCheck[i].isFile()) {", "-\t\t\t\t\tthis.logger.logIncorrectExtDirsEntry(directoriesToCheck[i].getAbsolutePath());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+\textdirsClasspaths = handleExtdirs(extdirsClasspaths);", "-\t/*", "-\t * Feed endorsedDirClasspath according to:", "-\t * - -endorseddirs first if present;", "-\t * - else java.endorsed.dirs if defined;", "-\t * - else default extensions directory for the platform. (/lib/endorsed)", "-\t */", "-\tif (endorsedDirClasspaths == null) {", "-\t\tendorsedDirClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\t\tString endorsedDirsStr = System.getProperty(\"java.endorsed.dirs\"); //$NON-NLS-1$", "-\t\tif (endorsedDirsStr == null) {", "-\t\t\tif (javaHome != null) {", "-\t\t\t\tendorsedDirClasspaths.add(javaHome.getAbsolutePath() + \"/lib/endorsed\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t} else {", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(endorsedDirsStr, File.pathSeparator);", "-\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\tendorsedDirClasspaths.add(tokenizer.nextToken());", "-\t\t\t}", "-\t\t}", "-\t}", "-\t", "-\t/*", "-\t * Feed extdirsClasspath with the entries found into the directories listed by", "-\t * extdirsNames.", "-\t */", "-\tif (endorsedDirClasspaths.size() != 0) {", "-\t\tFile[] directoriesToCheck = new File[endorsedDirClasspaths.size()];", "-\t\tfor (int i = 0; i < directoriesToCheck.length; i++) ", "-\t\t\tdirectoriesToCheck[i] = new File((String) endorsedDirClasspaths.get(i));", "-\t\tendorsedDirClasspaths.clear();", "-\t\tFile[][] endorsedDirsJars = getLibrariesFiles(directoriesToCheck);", "-\t\tif (endorsedDirsJars != null) {", "-\t\t\tfor (int i = 0, max = endorsedDirsJars.length; i < max; i++) {", "-\t\t\t\tFile[] current = endorsedDirsJars[i];", "-\t\t\t\tif (current != null) {", "-\t\t\t\t\tfor (int j = 0, max2 = current.length; j < max2; j++) {", "-\t\t\t\t\t\tFileSystem.Classpath classpath = ", "-\t\t\t\t\t\t\tFileSystem.getClasspath(", "-\t\t\t\t\t\t\t\t\tcurrent[j].getAbsolutePath(),", "-\t\t\t\t\t\t\t\t\tnull, null); ", "-\t\t\t\t\t\tif (classpath != null) {", "-\t\t\t\t\t\t\tendorsedDirClasspaths.add(classpath);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else if (directoriesToCheck[i].isFile()) {", "-\t\t\t\t\tthis.logger.logIncorrectEndorsedDirsEntry(directoriesToCheck[i].getAbsolutePath());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+\tendorsedDirClasspaths = handleEndorseddirs(endorsedDirClasspaths);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b58fe3dcb5d8f7b4d338e8c168f3db47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "a667c05ed54e2e31a5fe871abdcae3c92be26c13", "commitAfterChange": "3ef2eccfdb5543a0ab32261d06183c857677e196", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 94, "signatureBeforeChange": " protected void setPaths(ArrayList bootclasspaths, \t\tString sourcepathClasspathArg, \t\tArrayList sourcepathClasspaths, \t\tArrayList classpaths, \t\tArrayList extdirsClasspaths, \t\tArrayList endorsedDirClasspaths, \t\tString customEncoding) throws InvalidInputException", "signatureAfterChange": " protected void setPaths(ArrayList bootclasspaths, \t\tString sourcepathClasspathArg, \t\tArrayList sourcepathClasspaths, \t\tArrayList classpaths, \t\tArrayList extdirsClasspaths, \t\tArrayList endorsedDirClasspaths, \t\tString customEncoding) throws InvalidInputException", "diff": ["+\t", "- \tfinal File javaHome = getJavaHome();", "- \tfinal int bootclasspathsSize = bootclasspaths.size();", "-\tif (bootclasspathsSize != 0) {", "-\t\tString[] paths = new String[bootclasspathsSize];", "-\t\tbootclasspaths.toArray(paths);", "-\t\tbootclasspaths.clear();", "-\t\tfor (int i = 0; i < bootclasspathsSize; i++) {", "-\t\t\tprocessPathEntries(DEFAULT_SIZE_CLASSPATH, bootclasspaths, ", "-\t\t\t\tpaths[i], customEncoding, false, true);", "-\t\t}", "-\t} else {", "-\t\t/* no bootclasspath specified", "-\t\t * we can try to retrieve the default librairies of the VM used to run", "-\t\t * the batch compiler", "-\t\t */", "-\t\t String javaversion = System.getProperty(\"java.version\");//$NON-NLS-1$", "-\t\t if (javaversion != null && javaversion.equalsIgnoreCase(\"1.1.8\")) { //$NON-NLS-1$", "-\t\t\tthis.logger.logWrongJDK();", "-\t\t\tthis.proceed = false;", "-\t\t\treturn;", "-\t\t }", "+ \tbootclasspaths = handleBootclasspath(bootclasspaths, customEncoding);", "-\t \t/*", "-\t \t * Handle >= JDK 1.2.2 settings: retrieve rt.jar", "-\t \t */", "-\t \t if (javaHome != null) {", "-\t\t\tFile[] directoriesToCheck = null;", "-\t\t\tif (System.getProperty(\"os.name\").startsWith(\"Mac\")) {//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\tdirectoriesToCheck = new File[] {", "-\t\t\t\t\tnew File(javaHome, \"../Classes\"), //$NON-NLS-1$", "-\t\t\t\t};", "-\t\t\t} else {", "-\t\t\t\tdirectoriesToCheck = new File[] { ", "-\t\t\t\t\tnew File(javaHome, \"lib\") //$NON-NLS-1$", "-\t\t\t\t};", "-\t\t\t}", "-\t\t\tFile[][] systemLibrariesJars = getLibrariesFiles(directoriesToCheck);", "-\t\t\tif (systemLibrariesJars != null) {", "-\t\t\t\tfor (int i = 0, max = systemLibrariesJars.length; i < max; i++) {", "-\t\t\t\t\tFile[] current = systemLibrariesJars[i];", "-\t\t\t\t\tif (current != null) {", "-\t\t\t\t\t\tfor (int j = 0, max2 = current.length; j < max2; j++) {", "-\t\t\t\t\t\t\tFileSystem.Classpath classpath = ", "-\t\t\t\t\t\t\t\tFileSystem.getClasspath(current[j].getAbsolutePath(),", "-\t\t\t\t\t\t\t\t\tnull, false, null, null); ", "-\t\t\t\t\t\t\tif (classpath != null) {", "-\t\t\t\t\t\t\t\tbootclasspaths.add(classpath);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "- \t\t}", "-\t}", "-\tfinal int classpathsSize = classpaths.size();", "-\tif (classpaths.size() != 0) {", "-\t\tString[] paths = new String[classpathsSize];", "-\t\tclasspaths.toArray(paths);", "-\t\tclasspaths.clear();", "-\t\tfor (int i = 0; i < classpathsSize; i++) {", "-\t\t\tprocessPathEntries(DEFAULT_SIZE_CLASSPATH, classpaths, paths[i], ", "-\t\t\t\t\tcustomEncoding, false, true);", "-\t\t}\t\t\t", "-\t} else {", "-\t\t// no user classpath specified.", "-\t\tString classProp = System.getProperty(\"java.class.path\"); //$NON-NLS-1$", "-\t\tif ((classProp == null) || (classProp.length() == 0)) {", "-\t\t\tthis.logger.logNoClasspath();", "-\t\t\tclasspaths.add(FileSystem.getClasspath(System.getProperty(\"user.dir\"), customEncoding, null));//$NON-NLS-1$", "-\t\t} else {", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(classProp, File.pathSeparator);", "-\t\t\tString token;", "-\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\ttoken = tokenizer.nextToken();", "-\t\t\t\tFileSystem.Classpath currentClasspath = FileSystem", "-\t\t\t\t\t\t.getClasspath(token, customEncoding, null);", "-\t\t\t\tif (currentClasspath != null) {", "-\t\t\t\t\tclasspaths.add(currentClasspath);", "-\t\t\t\t} else if (token.length() != 0) {", "-\t\t\t\t\tthis.logger.logIncorrectClasspath(token);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+\tclasspaths = handleClasspath(classpaths, customEncoding);", "+\t"]}], "num": 71764}
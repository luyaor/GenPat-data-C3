{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab517c5064d14fdfc18d3582a12fa4e7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7195b07e9ba75f19cfba4407ab24f357", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "309a387f480d97625be10c0bbfacfac3334e06f2", "commitAfterChange": "22307f44ec4cf0d4e9030797416029df1244cdb0", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " private String extractJavadoc(IType declaringType, String contents) throws JavaModelException", "signatureAfterChange": " private String extractJavadoc(IType declaringType, String contents) throws JavaModelException", "diff": ["-\t\tanchor = Util.toAnchor(genericSignature, methodName, Flags.isVarargs(getFlags()));", "+\t\tanchor = Util.toAnchor(0, genericSignature, methodName, Flags.isVarargs(getFlags()));", "-\tif (declaringTypeIsMember) {", "-\t\tint depth = 0;", "-\t\tfinal String packageFragmentName = declaringType.getPackageFragment().getElementName();", "-\t\t// might need to remove a part of the signature corresponding to the synthetic argument", "-\t\tfinal IJavaProject javaProject = declaringType.getJavaProject();", "-\t\tchar[][] typeNames = CharOperation.splitOn('.', typeQualifiedName.toCharArray());", "-\t\tif (!Flags.isStatic(declaringType.getFlags())) depth++;", "-\t\tStringBuffer typeName = new StringBuffer();", "-\t\tfor (int i = 0, max = typeNames.length; i < max; i++) {", "-\t\t\tif (typeName.length() == 0) {", "-\t\t\t\ttypeName.append(typeNames[i]);", "-\t\t\t} else {", "-\t\t\t\ttypeName.append('.').append(typeNames[i]);", "-\t\t\t}", "-\t\t\tIType resolvedType = javaProject.findType(packageFragmentName, String.valueOf(typeName));", "-\t\t\tif (resolvedType != null && resolvedType.isMember() && !Flags.isStatic(resolvedType.getFlags())) depth++;", "+\tif (declaringTypeIsMember && !Flags.isStatic(declaringType.getFlags())) {", "+\t\tint indexOfOpeningParen = anchor.indexOf('(');", "+\t\tif (indexOfOpeningParen == -1) return null;", "+\t\tint index = indexOfOpeningParen;", "+\t\tindexOfOpeningParen++;", "+\t\tint indexOfComma = anchor.indexOf(',', index);", "+\t\tif (indexOfComma != -1) {", "+\t\t\tindex = indexOfComma + 2;", "-\t\tif (depth != 0) {", "-\t\t\tint indexOfOpeningParen = anchor.indexOf('(');", "-\t\t\tif (indexOfOpeningParen == -1) return null;", "-\t\t\tint index = indexOfOpeningParen;", "-\t\t\tindexOfOpeningParen++;", "-\t\t\tfor (int i = 0; i < depth; i++) {", "-\t\t\t\tint indexOfComma = anchor.indexOf(',', index);", "-\t\t\t\tif (indexOfComma != -1) {", "-\t\t\t\t\tindex = indexOfComma + 2;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tanchor = anchor.substring(0, indexOfOpeningParen) + anchor.substring(index);", "-\t\t}", "+\t\tanchor = anchor.substring(0, indexOfOpeningParen) + anchor.substring(index);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d88ea4027dae293c0f3001f029bc530e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavadocContents.java", "commitBeforeChange": "1b94558fa757b767854d14340a754f8fb18540c3", "commitAfterChange": "c0f8220101d45cc95e0339b31adfd53c34571071", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate String computeMethodAnchorPrefixEnd(BinaryMethod method) throws JavaModelException", "signatureAfterChange": " \t \tprivate String computeMethodAnchorPrefixEnd(BinaryMethod method) throws JavaModelException", "diff": ["-\t\t\tfinal String packageFragmentName = declaringType.getPackageFragment().getElementName();", "-\t\t\tfinal IJavaProject javaProject = declaringType.getJavaProject();", "-\t\t\tchar[][] typeNames = CharOperation.splitOn('.', typeQualifiedName.toCharArray());", "-\t\t\tif (!Flags.isStatic(declaringType.getFlags())) depth++;", "-\t\t\tStringBuffer typeName = new StringBuffer();", "-\t\t\tfor (int i = 0, max = typeNames.length; i < max; i++) {", "-\t\t\t\tif (typeName.length() == 0) {", "-\t\t\t\t\ttypeName.append(typeNames[i]);", "-\t\t\t\t} else {", "-\t\t\t\t\ttypeName.append('.').append(typeNames[i]);", "-\t\t\t\t}", "-\t\t\t\tIType resolvedType = javaProject.findType(packageFragmentName, String.valueOf(typeName));", "-\t\t\t\tif (resolvedType != null && resolvedType.isMember() && !Flags.isStatic(resolvedType.getFlags())) depth++;", "+\t\t\tif (!Flags.isStatic(declaringType.getFlags())) {", "+\t\t\t\tdepth++;", "+\t\t\t\t// depth is 1", "-\t\t\t\tfor (int i = 0; i < depth; i++) {", "-\t\t\t\t\tint indexOfComma = anchor.indexOf(',', index);", "-\t\t\t\t\tif (indexOfComma != -1) {", "-\t\t\t\t\t\tindex = indexOfComma + 2;", "-\t\t\t\t\t}", "+\t\t\t\tint indexOfComma = anchor.indexOf(',', index);", "+\t\t\t\tif (indexOfComma != -1) {", "+\t\t\t\t\tindex = indexOfComma + 2;"]}], "num": 7538}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5c715ea8f173ff5bf74e87cdb603ca1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c6d6ee2ea8506f56f399c6820ffaffb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "1807cc67396ea9076c76cb31f2d61c82f124d048", "commitAfterChange": "52597fb7db7ddfe8d0d19142d700054ae1d908a1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\t\tpublic void preferenceChange(PreferenceChangeEvent event)", "signatureAfterChange": " \tpublic void handlePreferenceChange(String key, String oldValue, String newValue)", "diff": ["-\t\tIPreferenceChangeListener projListener = new IPreferenceChangeListener() {", "-\t\t\tpublic void preferenceChange(PreferenceChangeEvent event) {", "-\t\t\t\t", "-\t\t\t\tfinal String newValue = (String)event.getNewValue();", "-\t\t\t\tif (newValue == null) {", "-\t\t\t\t\t// Null is used to indicate this preference has", "-\t\t\t\t\t// been removed, as the project has been deleted.", "-\t\t\t\t\t// We do nothing", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\tfinal String oldValue = (String)event.getOldValue();", "-\t\t\t\tif (newValue.equals(oldValue)) {", "-\t\t\t\t\t// No-op -- same config", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tif (AptPreferenceConstants.APT_GENSRCDIR.equals(event.getKey())) {", "-\t\t\t\t\tfinal boolean aptEnabled = AptConfig.isEnabled(_aptProject.getJavaProject());", "-\t\t\t\t\tif( AptPlugin.DEBUG )", "-\t\t\t\t\t\tAptPlugin.trace(\"configure generated source directory new value = \" +  //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tnewValue + ", "-\t\t\t\t\t\t\t\t\" old value = \"  + oldValue + //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\" APT is enabled = \" + aptEnabled); //$NON-NLS-1$", "-\t\t\t\t\t// If APT is enabled, ", "-\t\t\t\t\t// clean up the old cp entry, delete the old folder, ", "-\t\t\t\t\t// create the new one and update the classpath.", "-\t\t\t\t\tif( aptEnabled )", "-\t\t\t\t\t\tconfigureGeneratedSourceFolder( newValue, oldValue );", "-\t\t\t\t\telse", "-\t\t\t\t\t\tsetGeneratedSourceFolderName(newValue);", "-\t\t\t\t}", "-\t\t\t\telse if(AptPreferenceConstants.APT_ENABLED.equals(event.getKey()) ){", "-\t\t\t\t\tif( AptPlugin.DEBUG ){", "-\t\t\t\t\t\tAptPlugin.trace(\"Got preference change event for \" + AptPreferenceConstants.APT_ENABLED ); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\t// no-op;", "-\t\t\t\t\tif(newValue.equals(oldValue)){", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\tfinal boolean isEnabling = Boolean.parseBoolean(newValue);", "-\t\t\t\t\tif( AptPlugin.DEBUG ){", "-\t\t\t\t\t\tif( isEnabling )", "-\t\t\t\t\t\t\tAptPlugin.trace(\"enabling APT for \" + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$", "-\t\t\t\t\t\telse", "-\t\t\t\t\t\t\tAptPlugin.trace(\"diabling APT \" + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tif( isEnabling )", "-\t\t\t\t\t\tconfigureGeneratedSourceFolder();", "-\t\t\t\t\telse{", "-\t\t\t\t\t\tfinal IFolder srcFolder = getGeneratedSourceFolder();", "-\t\t\t\t\t\tprojectClean(true);", "-\t\t\t\t\t\tresetGeneratedSrcFolder(srcFolder, false);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "+\t */", "+\tpublic void handlePreferenceChange(String key, String oldValue, String newValue) ", "+\t{", "+\t\tif (newValue == null) {", "+\t\t\t// Null is used to indicate this preference has", "+\t\t\t// been removed, as the project has been deleted.", "+\t\t\t// We do nothing", "+\t\t\treturn;", "+\t\t}", "+\t\tif (newValue.equals(oldValue)) {", "+\t\t\t// No-op -- same config", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\tif (AptPreferenceConstants.APT_GENSRCDIR.equals(key)) {", "+\t\t\tfinal boolean aptEnabled = AptConfig.isEnabled(_aptProject.getJavaProject());", "+\t\t\tif( AptPlugin.DEBUG )", "+\t\t\t\tAptPlugin.trace(\"configure generated source directory new value = \" +  //$NON-NLS-1$", "+\t\t\t\t\t\tnewValue + ", "+\t\t\t\t\t\t\" old value = \"  + oldValue + //$NON-NLS-1$", "+\t\t\t\t\t\t\" APT is enabled = \" + aptEnabled); //$NON-NLS-1$", "+\t\t\t// If APT is enabled, ", "+\t\t\t// clean up the old cp entry, delete the old folder, ", "+\t\t\t// create the new one and update the classpath.", "+\t\t\tif( aptEnabled )", "+\t\t\t\tconfigureGeneratedSourceFolder( newValue, oldValue );", "+\t\t\telse", "+\t\t\t\tsetGeneratedSourceFolderName(newValue);", "+\t\t}", "+\t\telse if(AptPreferenceConstants.APT_ENABLED.equals(key) ){", "+\t\t\tif( AptPlugin.DEBUG ){", "+\t\t\t\tAptPlugin.trace(\"Got preference change event for \" + AptPreferenceConstants.APT_ENABLED ); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\t", "+\t\t\tfinal boolean isEnabling = Boolean.parseBoolean(newValue);", "+\t\t\tif( AptPlugin.DEBUG ){", "+\t\t\t\tif( isEnabling )", "+\t\t\t\t\tAptPlugin.trace(\"enabling APT for \" + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$", "+\t\t\t\telse", "+\t\t\t\t\tAptPlugin.trace(\"diabling APT \" + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tif( isEnabling )", "+\t\t\t\tconfigureGeneratedSourceFolder();", "+\t\t\telse{", "+\t\t\t\tfinal IFolder srcFolder = getGeneratedSourceFolder();", "+\t\t\t\tprojectClean(true);", "+\t\t\t\tresetGeneratedSrcFolder(srcFolder, false);", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "562f158d038f5538c9ab106973324bb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tprivate ICompilationUnit getCachedWorkingCopy( IFile parentFile, String typeName )", "signatureAfterChange": " \tprivate synchronized ICompilationUnit getWorkingCopyForGeneratedFile(IFile parentFile, String typeName, CompilationUnitHelper cuh)", "diff": ["-\t//", "-\tprivate ICompilationUnit getCachedWorkingCopy( IFile parentFile, String typeName )", "+\t */", "+\tprivate synchronized ICompilationUnit getWorkingCopyForGeneratedFile(IFile parentFile, String typeName, CompilationUnitHelper cuh)", "-\t\tIFile derivedFile = getIFileForTypeName( typeName );", "-\t\tICompilationUnit workingCopy= null;", "+\t\tIPackageFragmentRoot root = _generatedPackageFragmentRoot.get().root;", "+\t\tIFile generatedFile = getIFileForTypeName(typeName);", "+\t\tICompilationUnit workingCopy;", "-\t\tsynchronized( this )", "-\t\t{", "-\t\t\tworkingCopy = _generatedFile2WorkingCopy.get( derivedFile );", "+\t\tworkingCopy = _hiddenBuiltTypes.get(generatedFile);", "+\t\tif (null != workingCopy) {", "+\t\t\t// file is currently hidden with a blank WC. Move that WC to the regular list.", "+\t\t\tif (AptPlugin.DEBUG_GFM_MAPS) AptPlugin.trace(", "+\t\t\t\t\t\"move working copy from hidden to regular list: \" + generatedFile); //$NON-NLS-1$", "+\t\t\t_hiddenBuiltTypes.remove(generatedFile);", "+\t\t\t_workingCopies.put(generatedFile, workingCopy);", "+\t\t} else {", "+\t\t\tworkingCopy = _workingCopies.get(generatedFile);", "+\t\t\tif (null == workingCopy) {", "+\t\t\t\t// we've not yet created a working copy for this file, so make one now.", "+\t\t\t\tworkingCopy = cuh.createWorkingCopy(typeName, root);", "+\t\t\t\t_workingCopies.put(generatedFile, workingCopy);", "+\t\t\t\tif (AptPlugin.DEBUG_GFM_MAPS) AptPlugin.trace( ", "+\t\t\t\t\t\t\"added new working copy to regular list: \" + generatedFile); //$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tif (AptPlugin.DEBUG_GFM_MAPS) AptPlugin.trace(", "+\t\t\t\t\t\t\"obtained existing working copy from regular list: \" + workingCopy.getElementName()); //$NON-NLS-1$", "+\t\t\t}", "-\t\t", "-\t\tif ( workingCopy != null )", "-\t\t\taddEntryToWorkingCopyMaps( parentFile, workingCopy );", "+", "+\t\t// Add it to the dependency map (a no-op if it's already there)", "+\t\tboolean added = _parentToGenWorkingCopies.put(parentFile, workingCopy);", "+\t\tif (AptPlugin.DEBUG_GFM_MAPS) {", "+\t\t\tif (added)", "+\t\t\t\tAptPlugin.trace(\"working copy association added: \" + parentFile + \" -> \" + workingCopy.getElementName()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\telse", "+\t\t\t\tAptPlugin.trace(\"working copy association already present: \" + parentFile + \" -> \" + workingCopy.getElementName()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t}", "+", "+\t\tassert checkIntegrity();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc53b710cab4cf3a34da51b149a00ea7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tprivate File getSerializationFile(IProject project)", "signatureAfterChange": " \tprivate void saveCompilationUnit(IPackageFragment pkgFrag, final String cuName, String contents, \t\t\tIProgressMonitor progressMonitor)", "diff": ["+\t */", "+\tprivate void saveCompilationUnit(IPackageFragment pkgFrag, final String cuName, String contents,", "+\t\t\tIProgressMonitor progressMonitor)", "+\t{", "+\t\tICompilationUnit unit = pkgFrag.getCompilationUnit(cuName);", "+\t\tboolean isWorkingCopy = unit.isWorkingCopy();", "+\t\tif (isWorkingCopy && unit.getResource().exists()) {", "+\t\t\t// If we have a working copy and it has a file, all we", "+\t\t\t// need to do is update its contents and commit it.", "+\t\t\t_CUHELPER.commitNewContents(unit, contents, progressMonitor);", "+\t\t\tif (AptPlugin.DEBUG_GFM) AptPlugin.trace( ", "+\t\t\t\t\t\"Committed existing working copy during build: \" + unit.getElementName()); //$NON-NLS-1$", "+\t\t}", "+\t\telse {", "+\t\t\tif (isWorkingCopy) {", "+\t\t\t\t// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=163906 -", "+\t\t\t\t// commitWorkingCopy() fails if file does not already exist.", "+\t\t\t\tSet<ICompilationUnit> toDiscard = discardWorkingCopy(unit);", "+\t\t\t\tfor (ICompilationUnit cuToDiscard : toDiscard) {", "+\t\t\t\t\t_CUHELPER.discardWorkingCopy(cuToDiscard);", "+\t\t\t\t\tif (AptPlugin.DEBUG_GFM) AptPlugin.trace( ", "+\t\t\t\t\t\t\t\"Discarded working copy during build: \" + unit.getElementName()); //$NON-NLS-1$", "+\t\t\ttry {", "+\t\t\t\tunit = pkgFrag.createCompilationUnit(cuName, contents, true, progressMonitor);", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\tAptPlugin.log(e, \"Unable to create compilation unit on disk: \" +  //$NON-NLS-1$", "+\t\t\t\t\t\tcuName + \" in pkg fragment: \" + pkgFrag.getElementName()); //$NON-NLS-1$", "+\t\t\tif (AptPlugin.DEBUG_GFM) AptPlugin.trace( ", "+\t\t\t\t\t\"Created compilation unit during build: \" + unit.getElementName()); //$NON-NLS-1$", "-\t */", "-\tprivate File getSerializationFile(IProject project) {", "-\t\tif (!project.exists()) return null;", "-\t\tIPath workingLocation = project.getWorkingLocation(AptPlugin.PLUGIN_ID);", "-\t\treturn workingLocation.append(\"state.dat\").toFile(); //$NON-NLS-1$", "-\t}"]}], "num": 25455}
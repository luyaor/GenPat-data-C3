{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c850d15e2f083202532e12bf6ead9e3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38fcf29fe4baac946205c99477be3adf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\tint[] sortedIndexes = new int[caseCount];", "-\t\t\tint[] localKeysCopy;", "-\t\t\tbreakLabel.initialize(codeStream);", "-\t\t\tCaseLabel[] caseLabels = new CaseLabel[caseCount];", "-\t\t\tint[] constants = new int[caseCount];", "-\t\t\tboolean needSwitch = caseCount != 0;", "+\t\t\tthis.breakLabel.initialize(codeStream);", "+\t\t\tCaseLabel[] caseLabels = new CaseLabel[this.caseCount];", "+\t\t\tboolean needSwitch = this.caseCount != 0;", "-\t\t\t\tconstants[i] = cases[i].constantExpression.constant.intValue();", "-\t", "-\t\t\t// we sort the keys to be able to generate the code for tableswitch or lookupswitch", "-\t\t\tfor (int i = 0; i < caseCount; i++) {", "-\t\t\t\tsortedIndexes[i] = i;", "-\t\t\t}", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tconstants,", "-\t\t\t\t0,", "-\t\t\t\t(localKeysCopy = new int[caseCount]),", "-\t\t\t\t0,", "-\t\t\t\tcaseCount);", "-\t\t\tCodeStream.sort(localKeysCopy, 0, caseCount - 1, sortedIndexes);", "-\t", "-\t\t\t\tint max = localKeysCopy[caseCount - 1];", "+\t\t\t\tint[] sortedIndexes = new int[this.caseCount];", "+\t\t\t\t// we sort the keys to be able to generate the code for tableswitch or lookupswitch", "+\t\t\t\tfor (int i = 0; i < caseCount; i++) {", "+\t\t\t\t\tsortedIndexes[i] = i;", "+\t\t\t\t}", "+\t\t\t\tint[] localKeysCopy;", "+\t\t\t\tSystem.arraycopy(this.constants, 0, (localKeysCopy = new int[this.caseCount]), 0, this.caseCount);", "+\t\t\t\tCodeStream.sort(localKeysCopy, 0, this.caseCount - 1, sortedIndexes);", "+", "+\t\t\t\t// for enum constants, actually switch on constant ordinal()", "+\t\t\t\tif (this.expression.resolvedType.isEnum()) {", "+\t\t\t\t\tcodeStream.invokeEnumOrdinal(this.expression.resolvedType.constantPoolName());", "+\t\t\t\t}", "+\t\t\t\tint max = localKeysCopy[this.caseCount - 1];", "-\t\t\t\t\t\tcodeStream.lookupswitch(defaultLabel, constants, sortedIndexes, caseLabels);", "+\t\t\t\t\t\tcodeStream.lookupswitch(defaultLabel, this.constants, sortedIndexes, caseLabels);", "-\t\t\t\t\t\t\tconstants,", "+\t\t\t\t\t\t\tthis.constants,", "-\t\t\t\t\tcodeStream.lookupswitch(defaultLabel, constants, sortedIndexes, caseLabels);", "+\t\t\t\t\tcodeStream.lookupswitch(defaultLabel, this.constants, sortedIndexes, caseLabels);", "-\t\t\tif (statements != null) {", "-\t\t\t\tfor (int i = 0, maxCases = statements.length; i < maxCases; i++) {", "-\t\t\t\t\tStatement statement = statements[i];", "-\t\t\t\t\tif ((caseIndex < caseCount) && (statement == cases[caseIndex])) { // statements[i] is a case", "-\t\t\t\t\t\tthis.scope.switchCase = cases[caseIndex]; // record entering in a switch case block", "+\t\t\tif (this.statements != null) {", "+\t\t\t\tfor (int i = 0, maxCases = this.statements.length; i < maxCases; i++) {", "+\t\t\t\t\tStatement statement = this.statements[i];", "+\t\t\t\t\tif ((caseIndex < this.caseCount) && (statement == this.cases[caseIndex])) { // statements[i] is a case", "+\t\t\t\t\t\tthis.scope.switchCase = this.cases[caseIndex]; // record entering in a switch case block", "-\t\t\t\t\t\tif (statement == defaultCase) { // statements[i] is a case or a default case", "-\t\t\t\t\t\t\tthis.scope.switchCase = defaultCase; // record entering in a switch case block", "+\t\t\t\t\t\tif (statement == this.defaultCase) { // statements[i] is a case or a default case", "+\t\t\t\t\t\t\tthis.scope.switchCase = this.defaultCase; // record entering in a switch case block", "-\t\t\tbreakLabel.place();", "+\t\t\tthis.breakLabel.place();", "-\t\t\t\tcodeStream.exitUserScope(scope);", "+\t\t\t\tcodeStream.exitUserScope(this.scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "743ea1735a8ab25f8dc68b65757ecf5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "82e38714e3cc40f0c2983bf6e0392b987ccce94e", "commitAfterChange": "6f52e55dfcdb3767d3e0659e7f3cf8875e7f6b50", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": "  \tpublic void ensureSpaceBeforeReplace(ASTNode node, ChildPropertyDescriptor desc, int offset, int numTokenBefore)", "signatureAfterChange": " \t \tpublic void ensureSpaceBeforeReplace(ASTNode node)", "diff": ["-", "-\tpublic void ensureSpaceBeforeReplace(ASTNode node, ChildPropertyDescriptor desc, int offset, int numTokenBefore) {", "-\t\t// bug 103970", "-\t\tif (getChangeKind(node, desc) == RewriteEvent.REPLACED) {", "-\t\t\ttry {", "-\t\t\t\twhile (numTokenBefore > 0) {", "-\t\t\t\t\toffset= getScanner().getNextEndOffset(offset, true);", "-\t\t\t\t\tnumTokenBefore--;", "+\t", "+\tpublic void ensureSpaceBeforeReplace(ASTNode node) {", "+\t\tif (this.beforeRequiredSpaceIndex  == -1) return;", "+\t\t", "+\t\tList events = this.eventStore.getChangedPropertieEvents(node);", "+\t\t", "+\t\tfor (Iterator iterator = events.iterator(); iterator.hasNext();) {", "+\t\t\tRewriteEvent event = (RewriteEvent) iterator.next();", "+\t\t\tif (event.getChangeKind() == RewriteEvent.REPLACED && event.getOriginalValue() instanceof ASTNode) {", "+\t\t\t\tif (this.beforeRequiredSpaceIndex  == getExtendedOffset((ASTNode) event.getOriginalValue())) {", "+\t\t\t\t\tdoTextInsert(this.beforeRequiredSpaceIndex , String.valueOf(' '), getEditGroup(event));", "+\t\t\t\t\tthis.beforeRequiredSpaceIndex  = -1;", "+\t\t\t\t\treturn;", "-    \t\t\tif (offset == getExtendedOffset((ASTNode) getOriginalValue(node, desc))) {", "-\t\t\t\t\tdoTextInsert(offset, String.valueOf(' '), getEditGroup(node, desc));", "-\t\t\t\t}", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\thandleException(e);", "+\t\t", "+\t\tif (this.beforeRequiredSpaceIndex  < getExtendedOffset(node)) {", "+\t\t\tthis.beforeRequiredSpaceIndex  = -1;", "+\t\t}"]}], "num": 70782}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66d2bb3b29eef89eb02d976de01d6a4c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fbcc033d8a3afa2e58fbbf43f66edef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "891789830cfd7d9a651c4ddd8100684f907baeae", "commitAfterChange": "9ac94fb8c1cd89eceb0d1711aa38389eccfc7fd3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r \r private boolean isWorthBuilding() throws CoreException", "signatureAfterChange": "\r \r private boolean isWorthBuilding() throws CoreException", "diff": ["-\tif (abortBuilds) {\r", "-\t\tIMarker[] markers =\r", "-\t\t\tcurrentProject.findMarkers(IJavaModelMarker.BUILDPATH_PROBLEM_MARKER, false, IResource.DEPTH_ONE);\r", "-\t\tif (markers.length > 0) {\r", "-\t\t\tif (DEBUG)\r", "-\t\t\t\tSystem.out.println(\"Aborted build because project is involved in a cycle or has classpath problems\"); //$NON-NLS-1$\r", "+\tif (!abortBuilds) return true;\r", "-\t\t\t// remove all existing class files... causes all dependent projects to do the same\r", "-\t\t\tnew BatchImageBuilder(this).scrubOutputFolder();\r", "+\tIMarker[] markers =\r", "+\t\tcurrentProject.findMarkers(IJavaModelMarker.BUILDPATH_PROBLEM_MARKER, false, IResource.DEPTH_ONE);\r", "+\tif (markers.length > 0) {\r", "+\t\tif (DEBUG)\r", "+\t\t\tSystem.out.println(\"Aborted build because project is involved in a cycle or has classpath problems\"); //$NON-NLS-1$\r", "-\t\t\tremoveProblemsFor(currentProject); // make this the only problem for this project\r", "-\t\t\treturn false;\r", "-\t\t}\r", "+\t\t// remove all existing class files... causes all dependent projects to do the same\r", "+\t\tnew BatchImageBuilder(this).scrubOutputFolder();\r", "+\r", "+\t\tremoveProblemsFor(currentProject); // make this the only problem for this project\r", "+\t\treturn false;\r", "-\t// make sure all prereq projects have valid build states\r", "+\t// make sure all prereq projects have valid build states... only when aborting builds since projects in cycles do not have build states\r", "-\t\t\tif (!abortBuilds && !p.isOpen()) continue next; // skip closed projects if we're not aborting builds because of classpath problems\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "597f71707992e43b78f20b921634fcd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "ccc3f585223a02209d9fb1de4b1dae325e3fd665", "commitAfterChange": "9a356484adb65f7cc29bbc7281d74cb6498e9713", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r protected IProject[] build(int kind, Map ignored, IProgressMonitor monitor) throws CoreException", "signatureAfterChange": "\r \r protected IProject[] build(int kind, Map ignored, IProgressMonitor monitor) throws CoreException", "diff": ["+\t\tif (this.classpath != null) {\r", "-\t\tif (kind == FULL_BUILD) {\r", "-\t\t\tbuildAll();\r", "-\t\t} else {\r", "-\t\t\tif ((this.lastState = getLastState(currentProject)) == null) {\r", "-\t\t\t\tif (DEBUG)\r", "-\t\t\t\t\tSystem.out.println(\"Performing full build since last saved state was not found\"); //$NON-NLS-1$\r", "+\t\t\tif (kind == FULL_BUILD) {\r", "-\t\t\t} else if (hasClasspathChanged() || hasOutputLocationChanged()) {\r", "-\t\t\t\t// if the output location changes, do not delete the binary files from old location\r", "-\t\t\t\t// the user may be trying something\r", "-\t\t\t\tbuildAll();\r", "-\t\t\t} else if (sourceFolders.length > 0) {\r", "-\t\t\t\t// if there is no source to compile & no classpath changes then we are done\r", "-\t\t\t\tSimpleLookupTable deltas = findDeltas();\r", "-\t\t\t\tif (deltas == null)\r", "+\t\t\t} else {\r", "+\t\t\t\tif ((this.lastState = getLastState(currentProject)) == null) {\r", "+\t\t\t\t\tif (DEBUG)\r", "+\t\t\t\t\t\tSystem.out.println(\"Performing full build since last saved state was not found\"); //$NON-NLS-1$\r", "-\t\t\t\telse\r", "-\t\t\t\t\tbuildDeltas(deltas);\r", "+\t\t\t\t} else if (hasClasspathChanged() || hasOutputLocationChanged()) {\r", "+\t\t\t\t\t// if the output location changes, do not delete the binary files from old location\r", "+\t\t\t\t\t// the user may be trying something\r", "+\t\t\t\t\tbuildAll();\r", "+\t\t\t\t} else if (sourceFolders.length > 0) {\r", "+\t\t\t\t\t// if there is no source to compile & no classpath changes then we are done\r", "+\t\t\t\t\tSimpleLookupTable deltas = findDeltas();\r", "+\t\t\t\t\tif (deltas == null)\r", "+\t\t\t\t\t\tbuildAll();\r", "+\t\t\t\t\telse\r", "+\t\t\t\t\t\tbuildDeltas(deltas);\r", "+\t\t\t\t}\r", "+\t\t\tok = true;\r", "-\t\tok = true;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0ce2f2343d70c0c939e5a6d477b4ec9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "a00e6eb31425a8647b43db8ab18e7ffa598e36ab", "commitAfterChange": "473caccfd9ed330c0dc0a96a8172124ff7556099", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r protected IProject[] build(int kind, Map ignored, IProgressMonitor monitor) throws CoreException", "signatureAfterChange": "\r \r protected IProject[] build(int kind, Map ignored, IProgressMonitor monitor) throws CoreException", "diff": ["-\tif (currentProject == null || !currentProject.exists()) return new IProject[0];\r", "+\tif (currentProject == null || !currentProject.isAccessible()) return new IProject[0];\r", "-\t\tif (kind == FULL_BUILD) {\r", "-\t\t\tbuildAll();\r", "-\t\t} else {\r", "-\t\t\tif ((this.lastState = getLastState(currentProject)) == null) {\r", "-\t\t\t\tif (DEBUG)\r", "-\t\t\t\t\tSystem.out.println(\"Performing full build since last saved state was not found\"); //$NON-NLS-1$\r", "+\t\tif (isWorthBuilding()) {\r", "+\t\t\tif (kind == FULL_BUILD) {\r", "-\t\t\t} else if (hasClasspathChanged() || hasOutputLocationChanged()) {\r", "-\t\t\t\t// if the output location changes, do not delete the binary files from old location\r", "-\t\t\t\t// the user may be trying something\r", "-\t\t\t\tbuildAll();\r", "-\t\t\t} else if (sourceFolders.length > 0) { // if there is no source to compile & no classpath changes then we are done\r", "-\t\t\t\tclearLastState(); // clear the previously built state so if the build fails, a full build will occur next time\r", "-\t\t\t\tSimpleLookupTable deltas = findDeltas();\r", "-\t\t\t\tif (deltas == null)\r", "+\t\t\t} else {\r", "+\t\t\t\tif ((this.lastState = getLastState(currentProject)) == null) {\r", "+\t\t\t\t\tif (DEBUG)\r", "+\t\t\t\t\t\tSystem.out.println(\"Performing full build since last saved state was not found\"); //$NON-NLS-1$\r", "-\t\t\t\telse\r", "-\t\t\t\t\tbuildDeltas(deltas);\r", "+\t\t\t\t} else if (hasClasspathChanged() || hasOutputLocationChanged()) {\r", "+\t\t\t\t\t// if the output location changes, do not delete the binary files from old location\r", "+\t\t\t\t\t// the user may be trying something\r", "+\t\t\t\t\tbuildAll();\r", "+\t\t\t\t} else if (sourceFolders.length > 0) { // if there is no source to compile & no classpath changes then we are done\r", "+\t\t\t\t\tclearLastState(); // clear the previously built state so if the build fails, a full build will occur next time\r", "+\t\t\t\t\tSimpleLookupTable deltas = findDeltas();\r", "+\t\t\t\t\tif (deltas == null)\r", "+\t\t\t\t\t\tbuildAll();\r", "+\t\t\t\t\telse\r", "+\t\t\t\t\t\tbuildDeltas(deltas);\r", "+\t\t\t\t}\r", "+\t\t\tok = true;\r", "-\t\tok = true;\r", "-\t\tUtil.log(e, \"JavaBuilder handling ImageBuilderInternalException\"); //$NON-NLS-1$\r", "+\t\tUtil.log(e.getThrowable(), \"JavaBuilder handling ImageBuilderInternalException\"); //$NON-NLS-1$\r", "-\t} catch (IncompleteClassPathException e) {\r", "-\t\tif (DEBUG) Util.log(e, \"JavaBuilder handling IncompleteClassPathException\"); //$NON-NLS-1$\r", "+\t} catch (MissingClassFileException e) {\r", "+\t\t// do not log this exception since its thrown to handle aborted compiles because of missing class files\r", "+\t\tif (DEBUG)\r", "+\t\t\tSystem.out.println(Util.bind(\"build.incompleteClassPath\", e.missingClassFile)); //$NON-NLS-1$\r", "-\t\tif (DEBUG) Util.log(e, \"JavaBuilder handling MissingSourceFileException\"); //$NON-NLS-1$\r", "+\t\t// do not log this exception since its thrown to handle aborted compiles because of missing source files\r", "+\t\tif (DEBUG)\r", "+\t\t\tSystem.out.println(Util.bind(\"build.missingSourceFile\", e.missingSourceFile)); //$NON-NLS-1$\r"]}], "num": 57165}
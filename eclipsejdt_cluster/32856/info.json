{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34e0fb1cf939f9821a4d128765adfcb7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d490c0804c31d326ac43dd026b5b7a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "ac2c3539b72e65a4a4e0b168769da151e63c5ff1", "commitAfterChange": "014710437062a15282800b8efb747a8973068ba8", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " \tprivate void setDeprecatedComment(Javadoc javadocComment, char[] contents)", "signatureAfterChange": "   \tprivate Comment createComment(int[] positions)", "diff": ["-\t */", "-\tprivate void setDeprecatedComment(Javadoc javadocComment, char[] contents) {", "-\t\tjavadocComment.setComment(new String(contents));", "+", "+\tprivate Comment createComment(int[] positions) {", "+\t\t// Create comment node", "+\t\tComment comment = null;", "+\t\tint start = positions[0];", "+\t\tint end = positions[1];", "+\t\tif (positions[1]>0) { // Javadoc comments have positive end position", "+\t\t\tthis.ast.newJavadoc();", "+\t\t\tDocCommentParser docParser = new DocCommentParser(this.ast, this.scanner);", "+\t\t\tJavadoc docComment = docParser.parse(positions);", "+//\t\t\tString contents = new String(this.compilationUnitSource, start, end - start + 1);", "+//\t\t\tjavadoc.parseComment(contents);", "+\t\t\tif (docComment == null) return null;", "+\t\t\tcomment = docComment;", "+\t\t} else {", "+\t\t\tend = -end;", "+\t\t\tif (positions[0]>0) { // Block comment have positive start position", "+\t\t\t\tcomment = this.ast.newBlockComment();", "+\t\t\t} else { // Line comment have negative start and end position", "+\t\t\t\tstart = -start;", "+\t\t\t\tcomment = this.ast.newLineComment();", "+\t\t\t}", "+\t\t\tcomment.setSourceRange(start, end - start);", "+\t\t}", "+\t\treturn comment;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53ba2bcaabcc16dd7f29628ac8494c20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 101, "signatureBeforeChange": "   \tprivate Comment createComment(int[] positions)", "signatureAfterChange": "  \tprotected Comment createComment(int[] positions)", "diff": ["+", "+\tprotected Comment createComment(int[] positions) {", "+\t\t// Create comment node", "+\t\tComment comment = null;", "+\t\tint start = positions[0];", "+\t\tint end = positions[1];", "+\t\tif (positions[1]>0) { // Javadoc comments have positive end position", "+\t\t\tthis.ast.newJavadoc();", "+\t\t\tJavadoc docComment = this.docParser.parse(positions);", "+\t\t\tif (docComment == null) return null;", "+\t\t\tcomment = docComment;", "+\t\t} else {", "+\t\t\tend = -end;", "+\t\t\tif (positions[0]>0) { // Block comment have positive start position", "+\t\t\t\tcomment = this.ast.newBlockComment();", "+\t\t\t} else { // Line comment have negative start and end position", "+\t\t\t\tstart = -start;", "+\t\t\t\tcomment = this.ast.newLineComment();", "+\t\t\t}", "+\t\t\tcomment.setSourceRange(start, end - start);", "+\t\t}", "+\t\treturn comment;", "+\t}", "-", "-\tprivate Comment createComment(int[] positions) {", "-\t\t// Create comment node", "-\t\tComment comment = null;", "-\t\tint start = positions[0];", "-\t\tint end = positions[1];", "-\t\tif (positions[1]>0) { // Javadoc comments have positive end position", "-\t\t\tthis.ast.newJavadoc();", "-\t\t\tJavadoc docComment = this.docParser.parse(positions);", "-\t\t\tif (docComment == null) return null;", "-\t\t\tcomment = docComment;", "-\t\t} else {", "-\t\t\tend = -end;", "-\t\t\tif (positions[0]>0) { // Block comment have positive start position", "-\t\t\t\tcomment = this.ast.newBlockComment();", "-\t\t\t} else { // Line comment have negative start and end position", "-\t\t\t\tstart = -start;", "-\t\t\t\tcomment = this.ast.newLineComment();", "-\t\t\t}", "-\t\t\tcomment.setSourceRange(start, end - start);", "-\t\t}", "-\t\treturn comment;", "-\t}"]}], "num": 32856}
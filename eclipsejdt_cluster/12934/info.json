{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4bdab22f965adc3b520756a8c3075de5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "341bc3bb788183c68230d671b2f0ad4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "ebf0740a88fe14f88af9807da3fc8260efdeeb0a", "commitAfterChange": "56cd7be7209c3b63ac72922c3a342e501721fcf5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["-\t\t\t\t\tTypeVariableBinding[] typeVariables = inheritedMethod.typeVariables;", "+\t\t\t\t\tTypeVariableBinding[] typeVariables = inheritedMethod.original().typeVariables;", "-\t\t\tTypeVariableBinding[] typeVariables = currentMethod.typeVariables;", "+\t\t\tTypeVariableBinding[] typeVariables = currentMethod.original().typeVariables;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64176cfc6a9eaca1b56aae4e58335107", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t\tpublic TypeBinding substitute(TypeVariableBinding typeVariable)", "signatureAfterChange": " \t\tpublic TypeBinding substitute(TypeVariableBinding typeVariable)", "diff": ["-\t\t\tif (typeVariable.rank >= this.variables.length || this.variables[typeVariable.rank] != typeVariable) {   // not kosher, don't touch.", "+\t\t\tif (typeVariable.rank >= this.variables.length || TypeBinding.notEquals(this.variables[typeVariable.rank], typeVariable)) {   // not kosher, don't touch."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bdaa5da2964976f7764cc8fb31c1004", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "8816a21753c2d607b8868597ac43f18ef7dd2d50", "commitAfterChange": "3af20c8fa9116cf8e52dcf498c1b4eea06f21754", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic void inferFromExpectedType(TypeBinding expectedType, Scope scope)", "signatureAfterChange": " \t \tpublic void inferFromExpectedType(TypeBinding expectedType, Scope scope)", "diff": ["-\t    TypeVariableBinding[] originalVariables = this.original().typeVariables;", "+\t    TypeVariableBinding[] originalVariables = this.originalMethod.typeVariables; // immediate parent (could be a parameterized method)", "-\t\tthis.returnType = this.substitute(this.returnType);", "+\t\tthis.returnType = Scope.substitute(this, this.returnType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4c3ed5fae64cfec53287e4eb8017afb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private MethodBinding createMethod(IBinaryMethod method, long sourceLevel)", "signatureAfterChange": " private MethodBinding createMethod(IBinaryMethod method, long sourceLevel)", "diff": ["-\tReferenceBinding[] exceptions = NoExceptions;", "-\tTypeBinding[] parameters = NoParameters;", "-\tTypeVariableBinding[] typeVars = NoTypeVariables;", "+\tReferenceBinding[] exceptions = Binding.NO_EXCEPTIONS;", "+\tTypeBinding[] parameters = Binding.NO_PARAMETERS;", "+\tTypeVariableBinding[] typeVars = Binding.NO_TYPE_VARIABLES;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbc737e8f4b383659bc9382ef118fee9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "6eb32d06a01a4c0cd88aa5091b2c41c8c1c0f654", "commitAfterChange": "e2f0c62f19f84a64c659ab6f8501b4d7ba65723d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "diff": ["+\t\tTypeVariableBinding[] typeVariables = method.typeVariables;", "-\t\t\t&& genericTypeArguments == null)", "+\t\t\t&& genericTypeArguments == null", "+\t\t\t&& typeVariables == NoTypeVariables)", "-\t\tTypeVariableBinding[] typeVariables = method.typeVariables;"]}], "num": 12934}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d54e8753ebf974ae4905715b2ffbe54", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6374bfb8b5d4ebd3eaef29ed6947e59f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "67766e5b27ea79987add5b8cee1657ec3cbfbedb", "commitAfterChange": "e6c002b5fc187b459093049d56b25a0df58b8d61", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t} else if (((ReferenceBinding) receiverType).isFinal() && this.anonymousType != null) {", "-\t\t\tif (!receiverType.isEnum()) {", "-\t\t\t\tscope.problemReporter().anonymousClassCannotExtendFinalClass(type, receiverType);", "+\t\t} else if (((ReferenceBinding) receiverType).isFinal()) {", "+\t\t\tif (this.anonymousType != null) {", "+\t\t\t\tif (!receiverType.isEnum()) {", "+\t\t\t\t\tscope.problemReporter().anonymousClassCannotExtendFinalClass(type, receiverType);", "+\t\t\t\t\thasError = true;", "+\t\t\t\t}", "+\t\t\t} else if (!receiverType.canBeInstantiated()) {", "+\t\t\t\tscope.problemReporter().cannotInstantiate(type, receiverType);", "+\t\t\t\treturn this.resolvedType = receiverType;", "-\t\t\thasError = true;", "-\t\t\tReferenceBinding allocationType = (ReferenceBinding) receiverType;", "+\t\t\tReferenceBinding allocationType = (ReferenceBinding) receiverType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "852df1099ef9175e2caac7c4ba710d91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "6aa15157c4a89778b30fbac85a8e1c76029da034", "commitAfterChange": "d40b3c41bcebac07f42f1f11c9b679087cfd1515", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tprivate static TypeBinding mergeAnnotationsIntoType(BlockScope scope, AnnotationBinding[] se8Annotations, long se8nullBits, Annotation se8NullAnnotation, \t\t\tTypeReference typeRef, TypeBinding existingType)", "signatureAfterChange": "  \tprivate static TypeBinding mergeAnnotationsIntoType(BlockScope scope, AnnotationBinding[] se8Annotations, long se8nullBits, Annotation se8NullAnnotation, \t\t\tTypeReference typeRef, TypeBinding existingType)", "diff": ["+\t\t\t\tse8nullBits = 0;", "+\t\tif (se8nullBits != 0 && oldLeafType.isBaseType()) {", "+\t\t\tscope.problemReporter().illegalAnnotationForBaseType(typeRef, new Annotation[] { se8NullAnnotation }, se8nullBits);", "+\t\t\treturn existingType;", "+\t\t}"]}], "num": 30031}
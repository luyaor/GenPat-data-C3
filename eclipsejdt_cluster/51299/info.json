{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "831be4a4d95cd44e32e3c1b1f75e0041", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ea9c7e081935880b401b8ef581c196a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "a069ec3e155df34e1c3faf73c5e321c7b4b692f7", "commitAfterChange": "6dea5cf1ef2d860c99ae96c566fbaac1cc8d1d31", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void compile(ICompilationUnit[] sourceUnits)", "signatureAfterChange": " \tpublic void compile(ICompilationUnit[] sourceUnits)", "diff": ["-\t\t\tbeginToCompile(sourceUnits);", "+\t\t\tif (this.annotationProcessorManager == null) {", "+\t\t\t\tbeginToCompile(sourceUnits);", "+\t\t\t} else {", "+\t\t\t\tICompilationUnit[] originalUnits = (ICompilationUnit[]) sourceUnits.clone(); // remember source units in case a source type collision occurs", "+\t\t\t\ttry {", "+\t\t\t\t\tbeginToCompile(sourceUnits);", "-\t\t\tif (this.annotationProcessorManager != null) {", "-\t\t\t\tprocessAnnotations();", "-\t\t\t\tif (!this.options.generateClassFiles) {", "-\t\t\t\t\t// -proc:only was set on the command line", "+\t\t\t\t\tprocessAnnotations();", "+\t\t\t\t\tif (!this.options.generateClassFiles) {", "+\t\t\t\t\t\t// -proc:only was set on the command line", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t} catch (SourceTypeCollisionException e) {", "+\t\t\t\t\treset();", "+\t\t\t\t\t// a generated type was referenced before it was created", "+\t\t\t\t\t// the compiler either created a MissingType or found a BinaryType for it", "+\t\t\t\t\t// so add the processor's generated files & start over,", "+\t\t\t\t\t// but remember to only pass the generated files to the annotation processor", "+\t\t\t\t\tint originalLength = originalUnits.length;", "+\t\t\t\t\tint newProcessedLength = e.newAnnotationProcessorUnits.length;", "+\t\t\t\t\tICompilationUnit[] combinedUnits = new ICompilationUnit[originalLength + newProcessedLength];", "+\t\t\t\t\tSystem.arraycopy(originalUnits, 0, combinedUnits, 0, originalLength);", "+\t\t\t\t\tSystem.arraycopy(e.newAnnotationProcessorUnits, 0, combinedUnits, originalLength, newProcessedLength);", "+\t\t\t\t\tthis.annotationProcessorStartIndex  = originalLength;", "+\t\t\t\t\tcompile(combinedUnits);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a051a068794a83a09121027238eeadc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "c0f8220101d45cc95e0339b31adfd53c34571071", "commitAfterChange": "f6e3b2cfdf325803724d69b4361d14343e55308a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate void build()", "signatureAfterChange": " \t \tprivate void build()", "diff": ["-\t\t\t", "-\t\t\t// Construct build environment, this invokes the build inside a callback", "-\t\t\t// in order to keep open the DOM AST pipeline", "-\t\t\tBuildEnv.newBuildEnv( ", "-\t\t\t\t\t_filesWithAnnotation, ", "-\t\t\t\t\t_filesWithoutAnnotation, ", "-\t\t\t\t\t_aptProject.getJavaProject(),", "-\t\t\t\t\tbuildCallback);", "+\t\t\tboolean split = false;", "+\t\t\tif (SPLIT_FILES && !hasBatchFactory()) { // don't split the files if batch processors are present", "+\t\t\t\tsplit = _filesWithAnnotation.length > MAX_FILES_PER_ITERATION ? true : false;", "+\t\t\t}", "+\t\t\tif (!split) {", "+\t\t\t\t// Construct build environment, this invokes the build inside a callback", "+\t\t\t\t// in order to keep open the DOM AST pipeline", "+\t\t\t\tBuildEnv.newBuildEnv(", "+\t\t\t\t\t\t_filesWithAnnotation,", "+\t\t\t\t\t\t_filesWithoutAnnotation,", "+\t\t\t\t\t\t_aptProject.getJavaProject(),", "+\t\t\t\t\t\tbuildCallback);", "+\t\t\t} else {", "+\t\t\t\tfor (int index = 0; index < _filesWithAnnotation.length;) {", "+\t\t\t\t\tint numberToProcess = (index + MAX_FILES_PER_ITERATION) > _filesWithAnnotation.length ? _filesWithAnnotation.length - index : MAX_FILES_PER_ITERATION;", "+\t\t\t\t\tBuildContext[] filesToProcess = new BuildContext[numberToProcess];\t\t\t ", "+\t\t\t\t\tSystem.arraycopy(_filesWithAnnotation, index, filesToProcess, 0, numberToProcess);", "+\t\t\t\t\t// Construct build environment, this invokes the build inside a callback", "+\t\t\t\t\t// in order to keep open the DOM AST pipeline", "+\t\t\t\t\tBuildEnv.newBuildEnv( ", "+\t\t\t\t\t\t\tfilesToProcess, ", "+\t\t\t\t\t\t\t_filesWithoutAnnotation, ", "+\t\t\t\t\t\t\t_aptProject.getJavaProject(),", "+\t\t\t\t\t\t\tbuildCallback);", "+\t\t\t\t\t index += numberToProcess;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acfa6e6179d868b0467bc2d577c06d5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "82a0f3c12838ccee831a07a711dbd532d22679fb", "commitAfterChange": "60b668dec4a840702d6f3caa42eff8925a9372b7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate void setUpFullSourceWorkspace() throws IOException, CoreException", "signatureAfterChange": " \tprivate void setUpFullSourceWorkspace() throws IOException, CoreException", "diff": ["-\t\t// Init JRE_LIB variable", "+\t\t// Create lib entries for the JDKs", "-\t\tint length = jdkLibs.length;", "-\t\tString jdkLib = null;", "-\t\tfor (int i=0; i<length; i++) {", "-\t\t\tif (jdkLibs[i].endsWith(\"rt.jar\")) {", "-\t\t\t\tjdkLib = jdkLibs[i];", "-\t\t\t\tbreak;", "-\t\t\t}", "+\t\tint jdkLibsLength = jdkLibs.length;", "+\t\tIClasspathEntry[] jdkEntries = new IClasspathEntry[jdkLibsLength];", "+\t\tfor (int i=0; i<jdkLibsLength; i++) {", "+\t\t\tjdkEntries[i] = JavaCore.newLibraryEntry(new Path(jdkLibs[i]), null, null);", "-\t\tif (jdkLib == null) {", "-\t\t\tthrow new RuntimeException(\"Cannot set JRE_LIB classpath variable as the rt.jar lib was not found!!!\");", "-\t\t}", "-\t\tJavaCore.setClasspathVariable(\"JRE_LIB\", new Path(jdkLib), null);", "+\t\tstart = System.currentTimeMillis();", "-\t\tlength = ALL_PROJECTS.length;", "-\t\tfor (int i = 0; i < length; i++) {", "+\t\tint projectsLength = ALL_PROJECTS.length;", "+\t\tfor (int i = 0; i < projectsLength; i++) {", "-\t\t\tALL_PROJECTS[i].setRawClasspath(ALL_PROJECTS[i].getRawClasspath(), null);", "+\t\t\t", "+\t\t\t// Set jdk jars onto the project classpath", "+\t\t\tIClasspathEntry[] entries = ALL_PROJECTS[i].getRawClasspath();", "+\t\t\tint entriesLength = entries.length;", "+\t\t\tSystem.arraycopy(entries, 0, entries = new IClasspathEntry[jdkLibsLength+entriesLength], jdkLibsLength, entriesLength);", "+\t\t\tSystem.arraycopy(jdkEntries, 0, entries, 0, jdkLibsLength);", "+\t\t\tALL_PROJECTS[i].setRawClasspath(entries, null);", "+", "-\t\tSystem.out.println(\"done\");", "+\t\tSystem.out.println(\"(\"+(System.currentTimeMillis()-start)+\"ms)\");"]}], "num": 51299}
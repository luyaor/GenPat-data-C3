{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2bce7fdaac4c316820d85dac349b3d13", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ba7e4e12d70e79a2fe05f7866486603", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "bb58594beea7321f1a2a3673bab3e26af89ead20", "commitAfterChange": "7376fb10956e4a03cc528e86b634b5ca73ef755b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic static CompilationUnitDeclaration resolve( \t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\tIJavaProject javaProject, \t\tNodeSearcher nodeSearcher, \t\tMap options, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic static CompilationUnitDeclaration resolve( \t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\tIJavaProject javaProject, \t\tNodeSearcher nodeSearcher, \t\tMap options, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\tCompilationUnitResolver resolver = null;", "-\t\t\tCompilationUnitResolver resolver =", "+\t\t\tresolver =", "-\t\t\t// unit cleanup is done by caller", "+\t\t\t// first unit cleanup is done by caller, but cleanup all enqueued requested units (not processed)", "+\t\t\tif (resolver != null) {", "+\t\t\t\tfor (int i = 1, length = resolver.totalUnits; i < length; i++) {", "+\t\t\t\t\tCompilationUnitDeclaration parsedUnit = resolver.unitsToProcess[i];", "+\t\t\t\t\tif (parsedUnit.scope != null) ", "+\t\t\t\t\t\tparsedUnit.scope.faultInTypes(); // force resolution of signatures, so clients can query DOM AST", "+\t\t\t\t\tparsedUnit.cleanUp();", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c16f80b078a1f36a4098dba98ee3ef77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "ade89e4fcc147d76e26736c6fadf9edebfc6386e", "commitAfterChange": "29f9f7b54f341569f134578b4014b331ae83ea82", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r protected boolean findAffectedSourceFiles(IResourceDelta delta, IResource prereqOutputFolder)", "signatureAfterChange": "\r \r protected boolean findAffectedSourceFiles(IResourceDelta delta, IResource[] binaryResources)", "diff": ["-protected boolean findAffectedSourceFiles(IResourceDelta delta, IResource prereqOutputFolder) {\r", "-\tIResourceDelta binaryDelta = delta.findMember(prereqOutputFolder.getProjectRelativePath());\r", "-\tif (binaryDelta != null) {\r", "-\t\tif (binaryDelta.getKind() == IResourceDelta.ADDED || binaryDelta.getKind() == IResourceDelta.REMOVED)\r", "-\t\t\treturn false;\r", "-\t\tint outputFolderSegmentCount = prereqOutputFolder.getLocation().segmentCount();\r", "-\t\tIResourceDelta[] children = binaryDelta.getAffectedChildren();\r", "-\t\tfor (int i = 0, length = children.length; i < length; ++i)\r", "-\t\t\tfindAffectedSourceFiles(children[i], outputFolderSegmentCount);\r", "-\t\tnotifier.checkCancel();\r", "+protected boolean findAffectedSourceFiles(IResourceDelta delta, IResource[] binaryResources) {\r", "+\tfor (int j = 0, k = binaryResources.length; j < k; j++) {\r", "+\t\tIResource binaryResource = binaryResources[j];\r", "+\t\t// either a .class file folder or a zip/jar file\r", "+\t\tif (binaryResource != null) { // skip unchanged output folder\r", "+\t\t\tIResourceDelta binaryDelta = delta.findMember(binaryResource.getProjectRelativePath());\r", "+\t\t\tif (binaryDelta != null) {\r", "+\t\t\t\tif (binaryResource instanceof IFile) return false; // do full build since jar file was added/removed/changed\r", "+\t\t\t\tif (binaryDelta.getKind() == IResourceDelta.ADDED || binaryDelta.getKind() == IResourceDelta.REMOVED)\r", "+\t\t\t\t\treturn false; // added/removed binary folder should not make it here, but handle anyways\r", "+\t\t\t\tint segmentCount = binaryResource.getLocation().segmentCount();\r", "+\t\t\t\tIResourceDelta[] children = binaryDelta.getAffectedChildren(); // .class files from class folder\r", "+\t\t\t\tfor (int i = 0, length = children.length; i < length; ++i)\r", "+\t\t\t\t\tfindAffectedSourceFiles(children[i], segmentCount);\r", "+\t\t\t\tnotifier.checkCancel();\r", "+\t\t\t}\r", "+\t\t}\r"]}], "num": 71056}
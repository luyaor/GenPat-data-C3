{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fef0f4ab50d3f94811334f362d061b4f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "200a370f577f5710df1833c2f72e453d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/AbstractASTTests.java", "commitBeforeChange": "fcebf68426f9aa792d1f3380803ca144f79b6c3c", "commitAfterChange": "4da5a9a150c1a47a773a4fd9e96abe9171b5562d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprotected ASTNode[] buildASTs(String contents, ICompilationUnit cu, boolean reportErrors) throws JavaModelException", "signatureAfterChange": " \tprotected ASTNode[] buildASTs(String newContents, ICompilationUnit cu, boolean reportErrors) throws JavaModelException", "diff": ["-\tprotected ASTNode[] buildASTs(String contents, ICompilationUnit cu, boolean reportErrors) throws JavaModelException {", "-\t\tMarkerInfo markerInfo = new MarkerInfo(contents);", "-\t\tcontents = markerInfo.source;", "-", "-\t\tcu.getBuffer().setContents(contents);", "+\tprotected ASTNode[] buildASTs(String newContents, ICompilationUnit cu, boolean reportErrors) throws JavaModelException {", "+\t\tMarkerInfo markerInfo;", "+\t\tif (newContents == null) {", "+\t\t\tmarkerInfo = new MarkerInfo(cu.getSource());", "+\t\t\tnewContents = markerInfo.source;", "+\t\t\tcu.getBuffer().setContents(newContents);", "+\t\t\tcu.makeConsistent(null);", "+\t\t} else {", "+\t\t\tmarkerInfo = new MarkerInfo(newContents);", "+\t\t\tnewContents = markerInfo.source;", "+\t\t\tcu.getBuffer().setContents(newContents);", "+\t\t}", "-\t\t\tunit = cu.reconcile(AST.JLS3, false, null, null);", "+\t\t\tunit = cu.reconcile(AST.JLS3, reportErrors, null, null);", "-\t\t\t\tUtil.appendProblem(buffer, problems[i], contents.toCharArray(), i+1);", "+\t\t\t\tUtil.appendProblem(buffer, problems[i], newContents.toCharArray(), i+1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "325dcfe13689cb16aabb79a388ef9e26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AnnotationParser.java", "commitBeforeChange": "aabd59e4934a861167bc5ad69597bc9fd97e06dc", "commitAfterChange": "4ed2786f22dd00c9c1f7773433c3548c8c0f6fc3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tvoid parseReturn()", "signatureAfterChange": " \t \tprivate void parseReturn()", "diff": ["-\tvoid parseReturn() {", "-\t\t// to be continued", "+\tprivate void parseReturn() {", "+\t\tif (this.annotation.returnStatement == null) {", "+\t\t\tthis.annotation.returnStatement =", "+\t\t\t\tnew AnnotationReturnStatement(", "+\t\t\t\t\tscanner.getCurrentTokenStartPosition(),", "+\t\t\t\t\tscanner.getCurrentTokenEndPosition(),", "+\t\t\t\t\tscanner.getRawTokenSourceEnd());", "+\t\t}", "+\t\telse {", "+\t\t\tthis.sourceParser.problemReporter().annotationInvalidReturnTag(", "+\t\t\t\tscanner.getCurrentTokenStartPosition(),", "+\t\t\t\tscanner.getCurrentTokenEndPosition(),", "+\t\t\t\tfalse);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8944aeac74e0729eb4049d75cf7704ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "0534618c17c0b5f6c361eb5acf9c22731255984f", "commitAfterChange": "d85ef445439a7932d1fe7c7dafa9bf16e2d2dd51", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \t \tpublic CompilationUnit convert(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, char[] source)", "signatureAfterChange": " \t \tpublic CompilationUnit convert(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, char[] source)", "diff": ["+\t\tif(unit.compilationResult.recoveryScannerData != null) {", "+\t\t\tthis.scanner = new RecoveryScanner(this.scanner, unit.compilationResult.recoveryScannerData.removeUnused());", "+\t\t\tthis.docParser.scanner = this.scanner;", "+\t\t}", "+\t\t\tASTRecoveryPropagator recoveryPropagator = new ASTRecoveryPropagator(resizedProblems);", "+\t\t\tcompilationUnit.accept(recoveryPropagator);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e88ccbbdb02cc55cde1a2fa8153c39e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "8cdf54f95656ee372ecbeae181ede3d9dd6c34a8", "commitAfterChange": "ef10fc23511bb08998ebf4a7dfdc62536faa0a9b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void deleting(IProject project)", "signatureAfterChange": " \tpublic void deleting(IProject project)", "diff": ["+\t\t\t", "+\t\t\t// remember roots of this project", "+\t\t\tif (this.removedRoots == null) {", "+\t\t\t\tthis.removedRoots = new HashMap();", "+\t\t\t}", "+\t\t\tif (javaProject.isOpen()) {", "+\t\t\t\tthis.removedRoots.put(javaProject, javaProject.getPackageFragmentRoots());", "+\t\t\t} else {", "+\t\t\t\t// compute roots without opening project", "+\t\t\t\tthis.removedRoots.put(", "+\t\t\t\t\tjavaProject, ", "+\t\t\t\t\tjavaProject.computePackageFragmentRoots(", "+\t\t\t\t\t\tjavaProject.getResolvedClasspath(true), ", "+\t\t\t\t\t\tfalse));", "+\t\t\t}", "+\t\t\t"]}], "num": 7381}
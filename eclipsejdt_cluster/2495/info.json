{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c4802c117fab6c78e20b0593489bd9c", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b305a0d9f4eeaa498d08ae9b0536991c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public void complete(ICompilationUnit sourceUnit, int completionPosition)", "signatureAfterChange": "\r \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition)", "diff": ["- */\r", "-public void complete(ICompilationUnit sourceUnit, int completionPosition) {\r", "-\ttry {\r", "-\t\tint actualCompletionPosition = completionPosition - 1; // for now until we can change the UI.\r", "-\t\tCompilationResult result = new CompilationResult(sourceUnit, 1, 1);\r", "-\t\tCompilationUnitDeclaration parsedUnit = parser.dietParse(sourceUnit, result, actualCompletionPosition);\r", "-\r", "-//\t\tboolean completionNodeFound = false;\r", "-\t\tif (parsedUnit != null) {\r", "-\t\t\t// scan the package & import statements first\r", "-\t\t\tif (parsedUnit.currentPackage instanceof CompletionOnPackageReference) {\r", "-\t\t\t\tfindPackages((CompletionOnPackageReference) parsedUnit.currentPackage);\r", "-\t\t\t\treturn;\r", "-\t\t\tImportReference[] imports = parsedUnit.imports;\r", "-\t\t\tif (imports != null) {\r", "-\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {\r", "-\t\t\t\t\tImportReference importReference = imports[i];\r", "-\t\t\t\t\tif (importReference instanceof CompletionOnImportReference) {\r", "-\t\t\t\t\t\tfindImports((CompletionOnImportReference) importReference);\r", "-\t\t\t\t\t\treturn;\r", "-\t\t\t\t\t}\r", "-\t\t\tif (parsedUnit.types != null) {\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit);\r", "-\t\t\t\t\tif ((unitScope = parsedUnit.scope) != null) {\r", "+\t */\r", "+\tpublic void complete(ICompilationUnit sourceUnit, int completionPosition) {\r", "+\t\ttry {\r", "+\t\t\tactualCompletionPosition = completionPosition - 1;\r", "+\t\t\t// for now until we can change the UI.\r", "+\t\t\tCompilationResult result = new CompilationResult(sourceUnit, 1, 1);\r", "+\t\t\tCompilationUnitDeclaration parsedUnit =\r", "+\t\t\t\tparser.dietParse(sourceUnit, result, actualCompletionPosition);\r", "+\r", "+\t\t\t//\t\tboolean completionNodeFound = false;\r", "+\t\t\tif (parsedUnit != null) {\r", "+\t\t\t\t// scan the package & import statements first\r", "+\t\t\t\tif (parsedUnit.currentPackage instanceof CompletionOnPackageReference) {\r", "+\t\t\t\t\tfindPackages((CompletionOnPackageReference) parsedUnit.currentPackage);\r", "+\t\t\t\t\treturn;\r", "+\t\t\t\t}\r", "+\t\t\t\tImportReference[] imports = parsedUnit.imports;\r", "+\t\t\t\tif (imports != null) {\r", "+\t\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {\r", "+\t\t\t\t\t\tImportReference importReference = imports[i];\r", "+\t\t\t\t\t\tif (importReference instanceof CompletionOnImportReference) {\r", "+\t\t\t\t\t\t\tfindImports((CompletionOnImportReference) importReference);\r", "+\t\t\t\t\t\t\treturn;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\r", "+\t\t\t\tif (parsedUnit.types != null) {\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit);\r", "+\t\t\t\t\t\tif ((unitScope = parsedUnit.scope) != null) {\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} catch (CompletionNodeFound e) {\r", "-//\t\t\t\t\tcompletionNodeFound = true;\r", "-\t\t\t\t\tif (e.astNode != null) // if null then we found a problem in the completion node\r", "-\t\t\t\t\t\tcomplete(e.astNode, e.qualifiedBinding, e.scope);\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\r", "-/* Ignore package, import, class & interface keywords for now...\r", "-\t\tif (!completionNodeFound) {\r", "-\t\t\tif (parsedUnit == null || parsedUnit.types == null) {\r", "-\t\t\t\t// this is not good enough... can still be trying to define a second type\r", "-\t\t\t\tCompletionScanner scanner = (CompletionScanner) parser.scanner;\r", "-\t\t\t\tsetSourceRange(scanner.completedIdentifierStart, scanner.completedIdentifierEnd);\r", "-\t\t\t\tfindKeywords(scanner.completionIdentifier, mainDeclarations, null);\r", "-\t\t\t}\r", "-\t\t\t// currently have no way to know if extends/implements are possible keywords\r", "-\t\t}\r", "-*/\t} catch (IndexOutOfBoundsException e) { // work-around internal failure - 1GEMF6D\r", "-\t} catch (InvalidCursorLocation e) { // may eventually report a usefull error\r", "-\t} catch (AbortCompilation e) { // ignore this exception for now since it typically means we cannot find java.lang.Object\r", "-\t} finally {\r", "-\t\treset();\r", "-\t}\r", "-}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} catch (CompletionNodeFound e) {\r", "+\t\t\t\t\t\t//\t\t\t\t\tcompletionNodeFound = true;\r", "+\t\t\t\t\t\tif (e.astNode != null)\r", "+\t\t\t\t\t\t\t// if null then we found a problem in the completion node\r", "+\t\t\t\t\t\t\tcomplete(e.astNode, e.qualifiedBinding, e.scope);\r", "+\t\t\t/* Ignore package, import, class & interface keywords for now...\r", "+\t\t\t\t\tif (!completionNodeFound) {\r", "+\t\t\t\t\t\tif (parsedUnit == null || parsedUnit.types == null) {\r", "+\t\t\t\t\t\t\t// this is not good enough... can still be trying to define a second type\r", "+\t\t\t\t\t\t\tCompletionScanner scanner = (CompletionScanner) parser.scanner;\r", "+\t\t\t\t\t\t\tsetSourceRange(scanner.completedIdentifierStart, scanner.completedIdentifierEnd);\r", "+\t\t\t\t\t\t\tfindKeywords(scanner.completionIdentifier, mainDeclarations, null);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t// currently have no way to know if extends/implements are possible keywords\r", "+\t\t\t\t\t}\r", "+\t\t\t*/\r", "+\t\t} catch (IndexOutOfBoundsException e) { // work-around internal failure - 1GEMF6D\r", "+\t\t} catch (InvalidCursorLocation e) { // may eventually report a usefull error\r", "+\t\t} catch (AbortCompilation e) { // ignore this exception for now since it typically means we cannot find java.lang.Object\r", "+\t\t} finally {\r", "+\t\t\treset();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e15f59bf910d7ef87e2a3a555399e214", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "dfc3b8264596f4754baac29eef1af815f182c4f3", "commitAfterChange": "db0143bfca2398448195a62173050bd24d4fcb31", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public void complete(ICompilationUnit sourceUnit, int completionPosition)", "signatureAfterChange": "\r \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition)", "diff": ["- */\r", "-public void complete(ICompilationUnit sourceUnit, int completionPosition) {\r", "-\ttry {\r", "-\t\tint actualCompletionPosition = completionPosition - 1; // for now until we can change the UI.\r", "-\t\tCompilationResult result = new CompilationResult(sourceUnit, 1, 1);\r", "-\t\tCompilationUnitDeclaration parsedUnit = parser.dietParse(sourceUnit, result, actualCompletionPosition);\r", "-\r", "-//\t\tboolean completionNodeFound = false;\r", "-\t\tif (parsedUnit != null) {\r", "-\t\t\t// scan the package & import statements first\r", "-\t\t\tif (parsedUnit.currentPackage instanceof CompletionOnPackageReference) {\r", "-\t\t\t\tfindPackages((CompletionOnPackageReference) parsedUnit.currentPackage);\r", "-\t\t\t\treturn;\r", "-\t\t\tImportReference[] imports = parsedUnit.imports;\r", "-\t\t\tif (imports != null) {\r", "-\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {\r", "-\t\t\t\t\tImportReference importReference = imports[i];\r", "-\t\t\t\t\tif (importReference instanceof CompletionOnImportReference) {\r", "-\t\t\t\t\t\tfindImports((CompletionOnImportReference) importReference);\r", "-\t\t\t\t\t\treturn;\r", "-\t\t\t\t\t}\r", "-\t\t\tif (parsedUnit.types != null) {\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit);\r", "-\t\t\t\t\tif ((unitScope = parsedUnit.scope) != null) {\r", "+\t */\r", "+\tpublic void complete(ICompilationUnit sourceUnit, int completionPosition) {\r", "+\t\ttry {\r", "+\t\t\tactualCompletionPosition = completionPosition - 1;\r", "+\t\t\t// for now until we can change the UI.\r", "+\t\t\tCompilationResult result = new CompilationResult(sourceUnit, 1, 1);\r", "+\t\t\tCompilationUnitDeclaration parsedUnit =\r", "+\t\t\t\tparser.dietParse(sourceUnit, result, actualCompletionPosition);\r", "+\r", "+\t\t\t//\t\tboolean completionNodeFound = false;\r", "+\t\t\tif (parsedUnit != null) {\r", "+\t\t\t\t// scan the package & import statements first\r", "+\t\t\t\tif (parsedUnit.currentPackage instanceof CompletionOnPackageReference) {\r", "+\t\t\t\t\tfindPackages((CompletionOnPackageReference) parsedUnit.currentPackage);\r", "+\t\t\t\t\treturn;\r", "+\t\t\t\t}\r", "+\t\t\t\tImportReference[] imports = parsedUnit.imports;\r", "+\t\t\t\tif (imports != null) {\r", "+\t\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {\r", "+\t\t\t\t\t\tImportReference importReference = imports[i];\r", "+\t\t\t\t\t\tif (importReference instanceof CompletionOnImportReference) {\r", "+\t\t\t\t\t\t\tfindImports((CompletionOnImportReference) importReference);\r", "+\t\t\t\t\t\t\treturn;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\r", "+\t\t\t\tif (parsedUnit.types != null) {\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit);\r", "+\t\t\t\t\t\tif ((unitScope = parsedUnit.scope) != null) {\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} catch (CompletionNodeFound e) {\r", "-//\t\t\t\t\tcompletionNodeFound = true;\r", "-\t\t\t\t\tif (e.astNode != null) // if null then we found a problem in the completion node\r", "-\t\t\t\t\t\tcomplete(e.astNode, e.qualifiedBinding, e.scope);\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\r", "-/* Ignore package, import, class & interface keywords for now...\r", "-\t\tif (!completionNodeFound) {\r", "-\t\t\tif (parsedUnit == null || parsedUnit.types == null) {\r", "-\t\t\t\t// this is not good enough... can still be trying to define a second type\r", "-\t\t\t\tCompletionScanner scanner = (CompletionScanner) parser.scanner;\r", "-\t\t\t\tsetSourceRange(scanner.completedIdentifierStart, scanner.completedIdentifierEnd);\r", "-\t\t\t\tfindKeywords(scanner.completionIdentifier, mainDeclarations, null);\r", "-\t\t\t}\r", "-\t\t\t// currently have no way to know if extends/implements are possible keywords\r", "-\t\t}\r", "-*/\t} catch (IndexOutOfBoundsException e) { // work-around internal failure - 1GEMF6D\r", "-\t} catch (InvalidCursorLocation e) { // may eventually report a usefull error\r", "-\t} catch (AbortCompilation e) { // ignore this exception for now since it typically means we cannot find java.lang.Object\r", "-\t} finally {\r", "-\t\treset();\r", "-\t}\r", "-}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} catch (CompletionNodeFound e) {\r", "+\t\t\t\t\t\t//\t\t\t\t\tcompletionNodeFound = true;\r", "+\t\t\t\t\t\tif (e.astNode != null)\r", "+\t\t\t\t\t\t\t// if null then we found a problem in the completion node\r", "+\t\t\t\t\t\t\tcomplete(e.astNode, e.qualifiedBinding, e.scope);\r", "+\t\t\t/* Ignore package, import, class & interface keywords for now...\r", "+\t\t\t\t\tif (!completionNodeFound) {\r", "+\t\t\t\t\t\tif (parsedUnit == null || parsedUnit.types == null) {\r", "+\t\t\t\t\t\t\t// this is not good enough... can still be trying to define a second type\r", "+\t\t\t\t\t\t\tCompletionScanner scanner = (CompletionScanner) parser.scanner;\r", "+\t\t\t\t\t\t\tsetSourceRange(scanner.completedIdentifierStart, scanner.completedIdentifierEnd);\r", "+\t\t\t\t\t\t\tfindKeywords(scanner.completionIdentifier, mainDeclarations, null);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t// currently have no way to know if extends/implements are possible keywords\r", "+\t\t\t\t\t}\r", "+\t\t\t*/\r", "+\t\t} catch (IndexOutOfBoundsException e) { // work-around internal failure - 1GEMF6D\r", "+\t\t} catch (InvalidCursorLocation e) { // may eventually report a usefull error\r", "+\t\t} catch (AbortCompilation e) { // ignore this exception for now since it typically means we cannot find java.lang.Object\r", "+\t\t} finally {\r", "+\t\t\treset();\r"]}], "num": 2495}
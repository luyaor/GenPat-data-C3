{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8adcd79f3ea5fb87265df46b14ec2b86", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10c74dc706d3039ea4ce37a5e406074b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "3413778e1bd5154fc1bb3b2fe41a2f5c159f06ae", "commitAfterChange": "b6700c6040587d6a407e0aa87172122e678ac070", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tprivate void disassemble(ICodeAttribute codeAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": "  \tprivate void disassemble(IAnnotationComponentValue annotationComponentValue, IConstantPool constantPool, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["+", "+\tprivate void disassemble(IAnnotationComponentValue annotationComponentValue, IConstantPool constantPool, StringBuffer buffer, String lineSeparator, int tabNumber) {", "+\t\tswitch(annotationComponentValue.getTag()) {", "+\t\t\tcase IAnnotationComponentValue.BYTE_TAG:", "+\t\t\tcase IAnnotationComponentValue.CHAR_TAG:", "+\t\t\tcase IAnnotationComponentValue.DOUBLE_TAG:", "+\t\t\tcase IAnnotationComponentValue.FLOAT_TAG:", "+\t\t\tcase IAnnotationComponentValue.INTEGER_TAG:", "+\t\t\tcase IAnnotationComponentValue.LONG_TAG:", "+\t\t\tcase IAnnotationComponentValue.SHORT_TAG:", "+\t\t\tcase IAnnotationComponentValue.BOOLEAN_TAG:", "+\t\t\tcase IAnnotationComponentValue.STRING_TAG:", "+\t\t\t\tIConstantPoolEntry constantPoolEntry = annotationComponentValue.getConstantValue();", "+\t\t\t\tString value = null;", "+\t\t\t\tswitch(constantPoolEntry.getKind()) {", "+\t\t\t\t\tcase IConstantPoolConstant.CONSTANT_Long :", "+\t\t\t\t\t\tvalue = constantPoolEntry.getLongValue() + \"L\"; //$NON-NLS-1$", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IConstantPoolConstant.CONSTANT_Float :", "+\t\t\t\t\t\tvalue = constantPoolEntry.getFloatValue() + \"f\"; //$NON-NLS-1$", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IConstantPoolConstant.CONSTANT_Double :", "+\t\t\t\t\t\tvalue = Double.toString(constantPoolEntry.getDoubleValue());", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IConstantPoolConstant.CONSTANT_Integer:", "+\t\t\t\t\t\tswitch(annotationComponentValue.getTag()) {", "+\t\t\t\t\t\t\tcase IAnnotationComponentValue.CHAR_TAG :", "+\t\t\t\t\t\t\t\tvalue = \"'\" + (char) constantPoolEntry.getIntegerValue() + \"'\"; //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase IAnnotationComponentValue.BOOLEAN_TAG :", "+\t\t\t\t\t\t\t\tvalue = constantPoolEntry.getIntegerValue() == 1 ? \"true\" : \"false\";//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase IAnnotationComponentValue.BYTE_TAG :", "+\t\t\t\t\t\t\t\tvalue = \"(byte) \" + constantPoolEntry.getIntegerValue(); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase IAnnotationComponentValue.SHORT_TAG :", "+\t\t\t\t\t\t\t\tvalue =  \"(short) \" + constantPoolEntry.getIntegerValue(); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase IAnnotationComponentValue.INTEGER_TAG :", "+\t\t\t\t\t\t\t\tvalue =  \"(int) \" + constantPoolEntry.getIntegerValue(); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IConstantPoolConstant.CONSTANT_String:", "+\t\t\t\t\t\tvalue = \"\\\"\" + decodeStringValue(constantPoolEntry.getStringValue()) + \"\\\"\";//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t}", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.annotationdefaultvalue\", value)); //$NON-NLS-1$", "+\t\t\t\tbreak;", "+\t\t\tcase IAnnotationComponentValue.ENUM_TAG:", "+\t\t\t\tfinal int enumConstantTypeNameIndex = annotationComponentValue.getEnumConstantTypeNameIndex();", "+\t\t\t\tconstantPoolEntry = annotationComponentValue.getEnumConstantTypeName();", "+\t\t\t\tfinal char[] typeName = CharOperation.replaceOnCopy(constantPoolEntry.getUtf8Value(), '/', '.');", "+\t\t\t\tfinal int enumConstantNameIndex = annotationComponentValue.getEnumConstantNameIndex();", "+\t\t\t\tconstantPoolEntry = annotationComponentValue.getEnumConstantName();", "+\t\t\t\tfinal char[] constantName = constantPoolEntry.getUtf8Value();", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.annotationenumvalue\", //$NON-NLS-1$", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\tInteger.toString(enumConstantTypeNameIndex),", "+\t\t\t\t\t\tInteger.toString(enumConstantNameIndex),", "+\t\t\t\t\t\tnew String(Signature.toCharArray(typeName)),", "+\t\t\t\t\t\tnew String(constantName)", "+\t\t\t\t})); //$NON-NLS-1$", "+\t\t\t\tbreak;", "+\t\t\tcase IAnnotationComponentValue.CLASS_TAG:", "+\t\t\t\tfinal int classIndex = annotationComponentValue.getClassInfoIndex();", "+\t\t\t\tconstantPoolEntry = annotationComponentValue.getClassInfo();", "+\t\t\t\tfinal char[] className = CharOperation.replaceOnCopy(constantPoolEntry.getUtf8Value(), '/', '.');", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.annotationclassvalue\", //$NON-NLS-1$", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\tInteger.toString(classIndex),", "+\t\t\t\t\t\tnew String(Signature.toCharArray(className))", "+\t\t\t\t})); //$NON-NLS-1$", "+\t\t\t\tbreak;", "+\t\t\tcase IAnnotationComponentValue.ANNOTATION_TAG:", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.annotationannotationvalue\")); //$NON-NLS-1$", "+\t\t\t\tIAnnotation annotation = annotationComponentValue.getAttributeValue();", "+\t\t\t\tdisassemble(annotation, constantPool, buffer, lineSeparator, tabNumber + 1);", "+\t\t\t\tbreak;", "+\t\t\tcase IAnnotationComponentValue.ARRAY_TAG:", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.annotationarrayvaluestart\")); //$NON-NLS-1$", "+\t\t\t\tfinal IAnnotationComponentValue[] annotationComponentValues = annotationComponentValue.getAnnotationComponentValues();", "+\t\t\t\tfor (int i = 0, max = annotationComponentValues.length; i < max; i++) {", "+\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\t\t\t\tdisassemble(annotationComponentValues[i], constantPool, buffer, lineSeparator, tabNumber + 1);", "+\t\t\t\t}", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.annotationarrayvalueend\")); //$NON-NLS-1$", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87aaec9084d5e733aebd61dab5327759", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tprivate void disassembleTargetTypeContents(boolean insideWildcard, int targetType, IExtendedAnnotation extendedAnnotation, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": " \tprivate void disassembleTargetTypeContents(boolean insideWildcard, int targetType, IExtendedAnnotation extendedAnnotation, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["+\t}", "-\t\t\tcase IExtendedAnnotationConstants.CLASS_EXTENDS_IMPLEMENTS :", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_classextendsimplements, new String[] {", "-\t\t\t\t\t\tInteger.toString(extendedAnnotation.getAnnotationTypeIndex()),", "-\t\t\t\t\t}));", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.CLASS_EXTENDS_IMPLEMENTS_GENERIC_OR_ARRAY :", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_classextendsimplements, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getAnnotationTypeIndex()),", "-\t\t\t\t\t\t}));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tif (insideWildcard) {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getWildcardLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_locations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_CAST :", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_INSTANCEOF :", "-\t\t\tcase IExtendedAnnotationConstants.OBJECT_CREATION :", "-\t\t\tcase IExtendedAnnotationConstants.CLASS_LITERAL :", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_offset, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getOffset()),", "-\t\t\t\t\t\t}));", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_CAST_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_INSTANCEOF_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.OBJECT_CREATION_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.CLASS_LITERAL_GENERIC_OR_ARRAY :", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_offset, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getOffset()),", "-\t\t\t\t\t\t}));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tif (insideWildcard) {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getWildcardLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_locations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.CLASS_TYPE_PARAMETER_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_TYPE_PARAMETER_GENERIC_OR_ARRAY :", "+\t\t\tcase IExtendedAnnotationConstants.CLASS_EXTENDS :", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_type_parameter, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getTypeParameterIndex()),", "-\t\t\t\t\t\t}));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tif (insideWildcard) {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getWildcardLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_locations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t}", "+\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_classextendsimplements, new String[] {", "+\t\t\t\t\t\tInteger.toString(extendedAnnotation.getAnnotationTypeIndex()),", "+\t\t\t\t\t}));", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_TYPE_PARAMETER_BOUND :", "+\t\t\t\t", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_TYPE_PARAMETER_BOUND :", "+\t\t\t\tbreak;\t\t\t\t", "+\t\t\tcase IExtendedAnnotationConstants.FIELD :", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_RETURN :", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_RECEIVER :", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_TYPE_PARAMETER_BOUND_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.CLASS_TYPE_PARAMETER_BOUND_GENERIC_OR_ARRAY :", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_FORMAL_PARAMETER :", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_type_parameter_with_bound, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getTypeParameterIndex()),", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getTypeParameterBoundIndex()),", "+\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_method_parameter, new String[] {", "+\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getParameterIndex()),", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tif (insideWildcard) {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getWildcardLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_locations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t}", "+\t\t\tcase IExtendedAnnotationConstants.THROWS :", "+\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_throws, new String[] {", "+\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getAnnotationTypeIndex()),", "+\t\t\t\t\t\t}));", "+\t\t\t\tbreak;", "+", "+\t\t\tcase IExtendedAnnotationConstants.RESOURCE_VARIABLE :", "-\t\t\tcase IExtendedAnnotationConstants.LOCAL_VARIABLE_GENERIC_OR_ARRAY :", "-\t\t\t\tbuffer.append(Messages.disassembler_localvariabletargetheader);", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 3);", "-\t\t\t\tlocalVariableTableSize = extendedAnnotation.getLocalVariableRefenceInfoLength();", "-\t\t\t\tlocalVariableTable = extendedAnnotation.getLocalVariableTable();", "-\t\t\t\tfor (int i = 0; i < localVariableTableSize; i++) {", "-\t\t\t\t\tif (i != 0) {", "-\t\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 3);", "-\t\t\t\t\t}", "-\t\t\t\t\tILocalVariableReferenceInfo info = localVariableTable[i];", "-\t\t\t\t\tint index= info.getIndex();", "-\t\t\t\t\tint startPC = info.getStartPC();", "-\t\t\t\t\tint length  = info.getLength();", "-\t\t\t\t\tbuffer.append(Messages.bind(Messages.classfileformat_localvariablereferenceinfoentry,", "-\t\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\t\tInteger.toString(startPC),", "-\t\t\t\t\t\t\tInteger.toString(startPC + length),", "-\t\t\t\t\t\t\tInteger.toString(index),", "-\t\t\t\t\t\t}));", "-\t\t\t\t}", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tif (insideWildcard) {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getWildcardLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_locations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_PARAMETER :", "+\t\t\tcase IExtendedAnnotationConstants.EXCEPTION_PARAMETER :", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_method_parameter, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getTypeParameterIndex()),", "+\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_exception_table_index, new String[] {", "+\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getExceptionTableIndex()),", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_PARAMETER_GENERIC_OR_ARRAY :", "+\t\t\t\t", "+\t\t\tcase IExtendedAnnotationConstants.INSTANCEOF :", "+\t\t\tcase IExtendedAnnotationConstants.NEW :", "+\t\t\tcase IExtendedAnnotationConstants.CONSTRUCTOR_REFERENCE :", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_REFERENCE :", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_method_parameter, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getTypeParameterIndex()),", "+\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_offset, new String[] {", "+\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getOffset()),", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tif (insideWildcard) {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getWildcardLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_locations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t}", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_RECEIVER_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_RETURN_TYPE_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.FIELD_GENERIC_OR_ARRAY :", "-\t\t\t\tif (insideWildcard) {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getWildcardLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_locations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_ARGUMENT_CONSTRUCTOR_CALL :", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_ARGUMENT_METHOD_CALL :", "+\t\t\tcase IExtendedAnnotationConstants.CAST :", "+\t\t\tcase IExtendedAnnotationConstants.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT :", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_INVOCATION_TYPE_ARGUMENT :", "+\t\t\tcase IExtendedAnnotationConstants.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT :", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_REFERENCE_TYPE_ARGUMENT :", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_ARGUMENT_CONSTRUCTOR_CALL_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_ARGUMENT_METHOD_CALL_GENERIC_OR_ARRAY :", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_offset, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getOffset()),", "-\t\t\t\t\t\t}));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_type_argument, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getAnnotationTypeIndex()),", "-\t\t\t\t\t\t}));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tif (insideWildcard) {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getWildcardLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_locations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.THROWS :", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_throws, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getAnnotationTypeIndex()),", "-\t\t\t\t\t\t}));", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.THROWS_GENERIC_OR_ARRAY :", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_throws, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(extendedAnnotation.getAnnotationTypeIndex()),", "-\t\t\t\t\t\t}));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tif (insideWildcard) {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getWildcardLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_locations, new String[] {", "-\t\t\t\t\t\t\t\ttoString(extendedAnnotation.getLocations()),", "-\t\t\t\t\t\t\t}));", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "932b18899b70c52e1ea07772acaf2370", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "b18b012adcc471e2280a6e20faa4d2a33f1db69a", "commitAfterChange": "5bb01926d23a6cf003d0d521691c391ac08b77a7", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tprivate void disassemble(ICodeAttribute codeAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": "  \tprivate void disassemble(IEnclosingMethodAttribute enclosingMethodAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["-\t\tbuffer", "-\t\t\t.append(Util.bind(\"disassembler.commentstart\")) //$NON-NLS-1$", "-\t\t\t.append(Util.bind(\"classfileformat.maxStack\")) //$NON-NLS-1$", "-\t\t\t.append(codeAttribute.getMaxStack())", "-\t\t\t.append(Util.bind(\"disassembler.comma\")) //$NON-NLS-1$", "-\t\t\t.append(Util.bind(\"classfileformat.maxLocals\")) //$NON-NLS-1$", "-\t\t\t.append(codeAttribute.getMaxLocals())", "-\t\t\t.append(Util.bind(\"disassembler.commentend\")); //$NON-NLS-1$", "-\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "-\t\tbuffer.append(Util.bind(\"disassembler.codeattributeheader\")); //$NON-NLS-1$", "-\t\tDefaultBytecodeVisitor visitor = new DefaultBytecodeVisitor(codeAttribute.getCodeLength(), buffer, lineSeparator, tabNumber + 1);", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\tfor (int i = 0; i < exceptionTableLength; i++) {", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tchar[] exceptionType = Signature.toCharArray(localVariableTableEntry.getDescriptor());", "-\t\t\t\tCharOperation.replace(exceptionType, '/', '.');", "-\t\t\t\t\t.append(localVariableTableEntry.getIndex())", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocaltype\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(exceptionType);", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\tchar[] exceptionType = Signature.toCharArray(localVariableTableEntry.getDescriptor());", "-\t\t\tCharOperation.replace(exceptionType, '/', '.');", "-\t\t\t\t.append(localVariableTableEntry.getIndex())", "-\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocaltype\")) //$NON-NLS-1$", "-\t\t\t\t.append(exceptionType);", "+", "+\tprivate void disassemble(IEnclosingMethodAttribute enclosingMethodAttribute, StringBuffer buffer, String lineSeparator, int tabNumber) {", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\tbuffer.append(Util.bind(\"disassembler.enclosingmethodheader\")); //$NON-NLS-1$", "+\t\tbuffer", "+\t\t\t.append(Util.bind(\"disassembler.constantpoolindex\")) //$NON-NLS-1$", "+\t\t\t.append(enclosingMethodAttribute.getEnclosingClassIndex())", "+\t\t\t.append(\" \")//$NON-NLS-1$", "+\t\t\t.append(Util.bind(\"disassembler.constantpoolindex\")) //$NON-NLS-1$", "+\t\t\t.append(enclosingMethodAttribute.getMethodNameAndTypeIndex())", "+\t\t\t.append(\" \")//$NON-NLS-1$", "+\t\t\t.append(enclosingMethodAttribute.getEnclosingClass()) //$NON-NLS-1$", "+\t\t\t.append(\".\")//$NON-NLS-1$", "+\t\t\t.append(enclosingMethodAttribute.getMethodName()) //$NON-NLS-1$", "+\t\t\t.append(enclosingMethodAttribute.getMethodDescriptor()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ea417d09a744b0e4b0b167f332143b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "418d08685e8bc0508d05dda65dd277f56261854f", "commitAfterChange": "2d42c7f71ce65658f51f1f08922e1c6e3b9d54f4", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 71, "signatureBeforeChange": " private void jumpOver(char open, char close, char [] blackList) throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parse(int specialToken)", "diff": ["-private void jumpOver(char open, char close, char [] blackList) throws InvalidInputException {", "-\t// Lifted from jumpOverMethodBody() and simplified and minimized side effects. Caller should still save and restore cursor.", "-\tint found = 1;", "-\tboolean whiteSpace;", "-\tint blackListLength = blackList == null ? 0 : blackList.length;", "-\twhile (true) {", "-\t\tdo {", "-\t\t\tthis.startPosition = this.currentPosition;", "-\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "-\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\twhiteSpace = jumpOverUnicodeWhiteSpace();", "-\t\t\t} else {", "-\t\t\t\twhiteSpace = CharOperation.isWhitespace(this.currentCharacter);", "-\t\t\t}", "-\t\t} while (whiteSpace);", "-", "-\t\tchar c = this.currentCharacter;", "-\t\tfor (int i = 0; i < blackListLength; i++) {", "-\t\t\tif (blackList[i] == c)", "-\t\t\t\treturn;", "-\t\t}", "-\t\t", "-\t\t// -------consume token until close is found", "-\t\tNextToken: switch (c) {", "-\t\t\tcase '(' :", "-\t\t\t\tif (open == '(') {", "-\t\t\t\t\tfound++;", "-\t\t\t\t}", "-\t\t\t\tbreak NextToken;", "-\t\t\tcase ')' :", "-\t\t\t\tif (close == ')') {", "-\t\t\t\t\tfound--;", "-\t\t\t\t\tif (found == 0) {", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak NextToken;", "-\t\t\tcase '<' :", "-\t\t\t\tif (open == '<') {", "-\t\t\t\t\tfound++;", "-\t\t\t\t}", "-\t\t\t\tbreak NextToken;", "-\t\t\tcase '>' :", "-\t\t\t\tif (close == '>') {", "-\t\t\t\t\tfound--;", "-\t\t\t\t\tif (found == 0) {", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak NextToken;", "-\t\t\tcase '\\'' :   // can show up in annotations ...", "-\t\t\t\tint test;", "-\t\t\t\tif ((test = getNextChar('\\n', '\\r')) >= 0 || getNextChar('\\'')) {", "-\t\t\t\t\tthrow new InvalidInputException(INVALID_CHARACTER_CONSTANT);", "-\t\t\t\t}", "-\t\t\t\tif (getNextChar('\\\\')) {", "-\t\t\t\t\tif (this.unicodeAsBackSlash) {", "-\t\t\t\t\t\tthis.unicodeAsBackSlash = false;", "-\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\') && (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\t\tgetNextUnicodeChar();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tthis.currentCharacter = this.source[this.currentPosition++];", "-\t\t\t\t\t}", "-\t\t\t\t\tscanEscapeCharacter();", "-\t\t\t\t} else { // consume next character", "-\t\t\t\t\tthis.unicodeAsBackSlash = false;", "-\t\t\t\t\tif ((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\' && this.source[this.currentPosition] == 'u') {", "-\t\t\t\t\t\tgetNextUnicodeChar();\t", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (getNextChar('\\''))", "-\t\t\t\t\tbreak NextToken;", "-\t\t\t\tthrow new InvalidInputException(INVALID_CHARACTER_CONSTANT);", "-\t\t\tcase '\"' : // can show up in annotations ...", "-\t\t\t\t\tthis.unicodeAsBackSlash = false;", "-\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "-\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\tgetNextUnicodeChar();", "-\t\t\t\t\t} ", "-\t\t\t\t\twhile (this.currentCharacter != '\"') {", "-\t\t\t\t\t\tif (this.currentCharacter == '\\n' || this.currentCharacter == '\\r') {", "-\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_CHAR_IN_STRING);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (this.currentCharacter == '\\\\') {", "-\t\t\t\t\t\t\tif (this.unicodeAsBackSlash) {", "-\t\t\t\t\t\t\t\tthis.unicodeAsBackSlash = false;", "-\t\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\') && (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tthis.currentCharacter = this.source[this.currentPosition++];", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tscanEscapeCharacter();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.unicodeAsBackSlash = false;", "-\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "-\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\t\tgetNextUnicodeChar();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\tbreak NextToken;", "-\t\t\tcase '/' :", "-\t\t\t{", "-\t\t\t\tif ((test = getNextChar('/', '*')) == 0) { // line comment", "-\t\t\t\t\tdo {", "-\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "-\t\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\t\tgetNextUnicodeChar();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// handle the \\\\u case manually into comment", "-\t\t\t\t\t\tif (this.currentCharacter == '\\\\') {", "-\t\t\t\t\t\t\tif (this.source[this.currentPosition] == '\\\\')", "-\t\t\t\t\t\t\t\tthis.currentPosition++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} while (this.currentCharacter != '\\r' && this.currentCharacter != '\\n');", "-\t\t\t\t\t// completely consume the line break", "-\t\t\t\t\tif (this.currentCharacter == '\\r') {", "-\t\t\t\t\t\tif (this.source[this.currentPosition] == '\\n') {", "-\t\t\t\t\t\t\tthis.currentPosition++;", "-\t\t\t\t\t\t\tthis.currentCharacter = '\\n';", "-\t\t\t\t\t\t} else if ((this.source[this.currentPosition] == '\\\\')", "-\t\t\t\t\t\t\t\t&& (this.source[this.currentPosition + 1] == 'u')) {", "-\t\t\t\t\t\t\tgetNextUnicodeChar();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak NextToken;", "-\t\t\t\t}", "-\t\t\t\tif (test > 0) { // /**/ && /***/", "-\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "-\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\tgetNextUnicodeChar();", "-\t\t\t\t\t} ", "-\t\t\t\t\tboolean star;", "-\t\t\t\t\tdo {", "-\t\t\t\t\t\tstar = this.currentCharacter == '*';", "-\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "-\t\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\t\tgetNextUnicodeChar();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// handle the \\\\u case manually into comment", "-\t\t\t\t\t\tif (this.currentCharacter == '\\\\') {", "-\t\t\t\t\t\t\tif (this.source[this.currentPosition] == '\\\\')", "-\t\t\t\t\t\t\t\tthis.currentPosition++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} while ((this.currentCharacter != '/') || (!star));", "-\t\t\t\t}", "-\t\t\t\tbreak NextToken;", "-\t\t\t}", "-\t\t\tdefault :", "-\t\t\t\tif (c < ScannerHelper.MAX_OBVIOUS) {", "-\t\t\t\t\tif ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c] & ScannerHelper.C_IDENT_START) != 0) {", "-\t\t\t\t\t\tscanIdentifierOrKeyword();", "-\t\t\t\t\t\tbreak NextToken;", "-\t\t\t\t\t} else if ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c] & ScannerHelper.C_DIGIT) != 0) {", "-\t\t\t\t\t\tscanNumber(false); // can occur in annotations.", "-\t\t\t\t\t\tbreak NextToken;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tbreak NextToken;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tboolean isJavaIdStart;", "-\t\t\t\tif (c >= HIGH_SURROGATE_MIN_VALUE && c <= HIGH_SURROGATE_MAX_VALUE) {", "-\t\t\t\t\t// Unicode 4 detection", "-\t\t\t\t\tchar low = (char) getNextChar();", "-\t\t\t\t\tif (low < LOW_SURROGATE_MIN_VALUE || low > LOW_SURROGATE_MAX_VALUE) {", "-\t\t\t\t\t\t// illegal low surrogate", "-\t\t\t\t\t\tbreak NextToken;", "-\t\t\t\t\t}", "-\t\t\t\t\tisJavaIdStart = ScannerHelper.isJavaIdentifierStart(this.complianceLevel, c, low);", "-\t\t\t\t} else if (c >= LOW_SURROGATE_MIN_VALUE && c <= LOW_SURROGATE_MAX_VALUE) {", "-\t\t\t\t\tbreak NextToken;", "-\t\t\t\t} else {", "-\t\t\t\t\t// optimized case already checked", "-\t\t\t\t\tisJavaIdStart = ScannerHelper.isJavaIdentifierStart(this.complianceLevel, c);", "-\t\t\t\t}", "-\t\t\t\tif (isJavaIdStart) {", "-\t\t\t\t\tscanIdentifierOrKeyword();", "-\t\t\t\t}", "-\t\t\t\tbreak NextToken;", "-\t\t}", "-\t}", "-}", "+\t}", "+\tprotected boolean parse(int specialToken) { // Canonical LALR pushdown automaton identical to Parser.parse() minus side effects of any kind.", "+\t\tthis.scanner.setFakeEofToken(specialToken);", "+\t\ttry {", "+\t\t\tint act = START_STATE;", "+\t\t\tthis.stateStackTop = -1;", "+\t\t\tthis.currentToken = specialToken; // steer the parser towards a single minded goal. ", "+\t\t\tProcessTerminals : for (;;) {", "+\t\t\t\tint stackLength = this.stack.length;", "+\t\t\t\tif (++this.stateStackTop >= stackLength) {", "+\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\tthis.stack, 0,", "+\t\t\t\t\t\tthis.stack = new int[stackLength + StackIncrement], 0,", "+\t\t\t\t\t\tstackLength);", "+\t\t\t\t}", "+\t\t\t\tthis.stack[this.stateStackTop] = act;", "+", "+\t\t\t\tact = Parser.tAction(act, this.currentToken);", "+\t\t\t\tif (act == ERROR_ACTION) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tif (act <= NUM_RULES) {", "+\t\t\t\t\tthis.stateStackTop--;", "+\t\t\t\t} else if (act > ERROR_ACTION) { /* shift-reduce */", "+\t\t\t\t\tthis.currentToken = this.scanner.getNextToken();", "+\t\t\t\t\tact -= ERROR_ACTION;", "+\t\t\t\t} else {", "+\t\t\t\t    if (act < ACCEPT_ACTION) { /* shift */", "+\t\t\t\t    \tthis.currentToken = this.scanner.getNextToken();", "+\t\t\t\t\t\tcontinue ProcessTerminals;", "+\t\t\t\t\t}", "+\t\t\t\t    return true; // accept !", "+\t\t\t\t}", "+", "+\t\t\t\t// ProcessNonTerminals :", "+\t\t\t\tdo { /* reduce */", "+\t\t\t\t\tthis.stateStackTop -= (Parser.rhs[act] - 1);", "+\t\t\t\t\tact = Parser.ntAction(this.stack[this.stateStackTop], Parser.lhs[act]);", "+\t\t\t\t} while (act <= NUM_RULES);", "+\t\t\t}", "+\t\t} catch (Exception e) {", "+\t\t\treturn false;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baeb331ede207bc46124619aabc88546", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ExtendedAnnotation.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprivate void internalDecoding( \t\t\tint localTargetType, \t\t\tbyte[] classFileBytes, \t\t\tIConstantPool constantPool, \t\t\tint localOffset) throws ClassFormatException", "signatureAfterChange": " \t \tprivate void readTargetInfo( \t\t\tint localTargetType, \t\t\tbyte[] classFileBytes, \t\t\tIConstantPool constantPool, \t\t\tint localOffset) throws ClassFormatException", "diff": ["-\tprivate void internalDecoding(", "+\tprivate void readTargetInfo(", "-\t\t\tcase IExtendedAnnotationConstants.CLASS_EXTENDS_IMPLEMENTS :", "-\t\t\t\tthis.annotationTypeIndex = u2At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset+=2;", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.CLASS_EXTENDS_IMPLEMENTS_GENERIC_OR_ARRAY :", "-\t\t\t\tthis.annotationTypeIndex = u2At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset+=2;", "-\t\t\t\tint locationLength = u2At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset += 2;", "-\t\t\t\tthis.locations = new int[locationLength];", "-\t\t\t\tfor (int i = 0; i < locationLength; i++) {", "-\t\t\t\t\tthis.locations[i] = u1At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\t\tthis.readOffset++;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_CAST :", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_INSTANCEOF :", "-\t\t\tcase IExtendedAnnotationConstants.OBJECT_CREATION :", "-\t\t\tcase IExtendedAnnotationConstants.CLASS_LITERAL :", "-\t\t\t\tthis.offset = u2At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset += 2;", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_CAST_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_INSTANCEOF_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.OBJECT_CREATION_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.CLASS_LITERAL_GENERIC_OR_ARRAY :", "-\t\t\t\tthis.offset = u2At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset += 2;", "-\t\t\t\tlocationLength = u2At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset += 2;", "-\t\t\t\tthis.locations = new int[locationLength];", "-\t\t\t\tfor (int i = 0; i < locationLength; i++) {", "-\t\t\t\t\tthis.locations[i] = u1At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\t\tthis.readOffset++;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.CLASS_TYPE_PARAMETER_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_TYPE_PARAMETER_GENERIC_OR_ARRAY :", "-\t\t\t\tthis.typeParameterIndex = u1At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset++;", "-\t\t\t\tlocationLength = u2At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset += 2;", "-\t\t\t\tthis.locations = new int[locationLength];", "-\t\t\t\tfor (int i = 0; i < locationLength; i++) {", "-\t\t\t\t\tthis.locations[i] = u1At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\t\tthis.readOffset++;", "-\t\t\t\t}", "+", "+\t\t\tcase IExtendedAnnotationConstants.CLASS_EXTENDS :", "+\t\t\t\tthis.annotationTypeIndex = u2At(classFileBytes, this.readOffset, localOffset);", "+\t\t\t\tthis.readOffset+=2;", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_TYPE_PARAMETER_BOUND :", "+", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_TYPE_PARAMETER_BOUND :", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_TYPE_PARAMETER_BOUND_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.CLASS_TYPE_PARAMETER_BOUND_GENERIC_OR_ARRAY :", "-\t\t\t\tthis.typeParameterIndex = u1At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset++;", "-\t\t\t\tthis.typeParameterBoundIndex = u1At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset++;", "-\t\t\t\tlocationLength = u2At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset += 2;", "-\t\t\t\tthis.locations = new int[locationLength];", "-\t\t\t\tfor (int i = 0; i < locationLength; i++) {", "-\t\t\t\t\tthis.locations[i] = u1At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\t\tthis.readOffset++;", "-\t\t\t\t}", "+\t\t\t\t", "+\t\t\tcase IExtendedAnnotationConstants.FIELD :", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_RETURN :", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_RECEIVER :", "+\t\t\t\t// nothing to do, target_info is empty_target", "+\t\t\t\t", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_FORMAL_PARAMETER :", "+\t\t\t\tthis.parameterIndex = u1At(classFileBytes, this.readOffset, localOffset);", "+\t\t\t\tthis.readOffset++;", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase IExtendedAnnotationConstants.THROWS :", "+\t\t\t\tthis.annotationTypeIndex = u2At(classFileBytes, this.readOffset, localOffset);", "+\t\t\t\tthis.readOffset+=2;", "+\t\t\t\tbreak;", "+", "+\t\t\t\t", "+\t\t\tcase IExtendedAnnotationConstants.RESOURCE_VARIABLE :", "-\t\t\tcase IExtendedAnnotationConstants.LOCAL_VARIABLE_GENERIC_OR_ARRAY :", "-\t\t\t\ttableLength = u2At(classFileBytes, this.readOffset, localOffset);", "+", "+\t\t\tcase IExtendedAnnotationConstants.EXCEPTION_PARAMETER :", "+\t\t\t\tthis.exceptionTableIndex = u2At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.localVariableTable = new LocalVariableReferenceInfo[tableLength];", "-\t\t\t\tfor (int i = 0; i < tableLength; i++) {", "-\t\t\t\t\tthis.localVariableTable[i] = new LocalVariableReferenceInfo(classFileBytes, constantPool, this.readOffset + localOffset);", "-\t\t\t\t\tthis.readOffset += 6;", "-\t\t\t\t}", "-\t\t\t\tlocationLength = u2At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset += 2;", "-\t\t\t\tthis.locations = new int[locationLength];", "-\t\t\t\tfor (int i = 0; i < locationLength; i++) {", "-\t\t\t\t\tthis.locations[i] = u1At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\t\tthis.readOffset++;", "-\t\t\t\t}", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_PARAMETER :", "-\t\t\t\tthis.parameterIndex = u1At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset++;", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_PARAMETER_GENERIC_OR_ARRAY :", "-\t\t\t\tthis.parameterIndex = u1At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset++;", "-\t\t\t\tlocationLength = u2At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset += 2;", "-\t\t\t\tthis.locations = new int[locationLength];", "-\t\t\t\tfor (int i = 0; i < locationLength; i++) {", "-\t\t\t\t\tthis.locations[i] = u1At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\t\tthis.readOffset++;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_RECEIVER_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_RETURN_TYPE_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.FIELD_GENERIC_OR_ARRAY :", "-\t\t\t\tlocationLength = u2At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset += 2;", "-\t\t\t\tthis.locations = new int[locationLength];", "-\t\t\t\tfor (int i = 0; i < locationLength; i++) {", "-\t\t\t\t\tthis.locations[i] = u1At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\t\tthis.readOffset++;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_ARGUMENT_CONSTRUCTOR_CALL :", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_ARGUMENT_METHOD_CALL :", "+", "+\t\t\tcase IExtendedAnnotationConstants.NEW :", "+\t\t\tcase IExtendedAnnotationConstants.INSTANCEOF :", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_REFERENCE :", "+\t\t\tcase IExtendedAnnotationConstants.CONSTRUCTOR_REFERENCE :", "-\t\t\t\tthis.annotationTypeIndex = u1At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset++;", "+\t\t\t\tbreak;\t", "+", "+\t\t\tcase IExtendedAnnotationConstants.CAST :", "+\t\t\t\tthis.offset = u2At(classFileBytes, this.readOffset, localOffset);", "+\t\t\t\tthis.readOffset += 3; // skipping the 3rd byte which will be 0 for CAST", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_ARGUMENT_CONSTRUCTOR_CALL_GENERIC_OR_ARRAY :", "-\t\t\tcase IExtendedAnnotationConstants.TYPE_ARGUMENT_METHOD_CALL_GENERIC_OR_ARRAY :", "+", "+\t\t\tcase IExtendedAnnotationConstants.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT :", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_INVOCATION_TYPE_ARGUMENT :", "+\t\t\tcase IExtendedAnnotationConstants.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT :", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_REFERENCE_TYPE_ARGUMENT :", "+\t\t\t\t// read type_argument_index", "-\t\t\t\tlocationLength = u2At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset += 2;", "-\t\t\t\tthis.locations = new int[locationLength];", "-\t\t\t\tfor (int i = 0; i < locationLength; i++) {", "-\t\t\t\t\tthis.locations[i] = u1At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\t\tthis.readOffset++;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.THROWS :", "-\t\t\t\tthis.annotationTypeIndex = u2At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset+=2;", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.THROWS_GENERIC_OR_ARRAY :", "-\t\t\t\tthis.annotationTypeIndex = u2At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset+=2;", "-\t\t\t\tlocationLength = u2At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\tthis.readOffset += 2;", "-\t\t\t\tthis.locations = new int[locationLength];", "-\t\t\t\tfor (int i = 0; i < locationLength; i++) {", "-\t\t\t\t\tthis.locations[i] = u1At(classFileBytes, this.readOffset, localOffset);", "-\t\t\t\t\tthis.readOffset++;", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3f029a09430ff4460ea1e94be1cf288", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "cf143a6a7ccd7553042fd4fda437966abe78a9e6", "commitAfterChange": "31d3be0ab92dab378331be6840b8f198d91f8e2d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \t \tprivate void disassemble(ICodeAttribute codeAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": "  \tprivate void disassemble(IRuntimeInvisibleParameterAnnotationsAttribute runtimeInvisibleParameterAnnotationsAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["+", "+\tprivate void disassemble(IRuntimeInvisibleParameterAnnotationsAttribute runtimeInvisibleParameterAnnotationsAttribute, StringBuffer buffer, String lineSeparator, int tabNumber) {", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\tbuffer.append(Util.bind(\"disassembler.runtimevisibleparameterannotationsattributeheader\")); //$NON-NLS-1$", "+\t\tIParameterAnnotation[] parameterAnnotations = runtimeInvisibleParameterAnnotationsAttribute.getParameterAnnotations();", "+\t\tfor (int i = 0, max = parameterAnnotations.length; i < max; i++) {", "+\t\t\tdisassemble(i, parameterAnnotations[i], buffer, lineSeparator, tabNumber + 1);", "+\t\t}"]}], "num": 35583}
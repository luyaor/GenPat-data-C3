{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42b65d258f868df2a6048048b9047dc9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0360992c03e4e57a2e779d37c153ab6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "723628e20cdcca3d7368991555fbb1e08f7222a1", "commitAfterChange": "daa096617d4294add6bd8531102c2906f3417dbb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected int classpathContains( \t\tIClasspathEntry[] list, \t\tIClasspathEntry entry)", "signatureAfterChange": " \tprotected int classpathContains( \t\tIClasspathEntry[] list, \t\tIClasspathEntry entry)", "diff": ["-\t\tfor (int i = 0; i < list.length; i++) {", "+\t\tString[] exclusionPatterns = entry.getExclusionPatterns();", "+\t\tnextEntry: for (int i = 0; i < list.length; i++) {", "+\t\t\t\t\tString[] otherExcludes = other.getExclusionPatterns();", "+\t\t\t\t\tif (exclusionPatterns == null) {", "+\t\t\t\t\t\tif (otherExcludes != null)", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint excludeLength = exclusionPatterns.length;", "+\t\t\t\t\t\tif (otherExcludes == null || otherExcludes.length != excludeLength)", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tfor (int j = 0; j < excludeLength; j++) {", "+\t\t\t\t\t\t\tif (!exclusionPatterns[j].equals(otherExcludes[j]))", "+\t\t\t\t\t\t\t\tcontinue nextEntry;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03c7ef5ad8070dd64e4db3db1e8a0f63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/State.java", "commitBeforeChange": "c9d8f7d33a12a3fca98b81131e389ee514f5477e", "commitAfterChange": "f2df113c95a9e172c6339459cdc3cce6bb01fe4b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r \r void write(DataOutputStream out) throws IOException", "signatureAfterChange": "\r \r void write(DataOutputStream out) throws IOException", "diff": ["-\t\t\t\tif (!internedQualifiedNames.contains(qName)) // remember the names have been interned\r", "+\t\t\t\tif (!internedQualifiedNames.contains(qName)) { // remember the names have been interned\r", "+\t\t\t\t\tfor (int k = 0, sLength = qName.length; k < sLength; k++) {\r", "+\t\t\t\t\t\tchar[] sName = qName[k];\r", "+\t\t\t\t\t\tif (!internedSimpleNames.contains(sName)) // remember the names have been interned\r", "+\t\t\t\t\t\t\tinternedSimpleNames.add(sName);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "-\tlength = internedQualifiedNames.size();\r", "-\tout.writeInt(length);\r", "-\tfor (int i = 0; i < length; i++)\r", "-\t\twriteNames((char[][]) internedQualifiedNames.get(i), out);\r", "+\t// now write the interned qualified names as arrays of interned simple names\r", "+\tlength = internedQualifiedNames.size();\r", "+\tout.writeInt(length);\r", "+\tfor (int i = 0; i < length; i++) {\r", "+\t\tchar[][] qName = (char[][]) internedQualifiedNames.get(i);\r", "+\t\tint qLength = qName.length;\r", "+\t\tout.writeInt(qLength);\r", "+\t\tfor (int j = 0; j < qLength; j++)\r", "+\t\t\tout.writeInt(internedSimpleNames.indexOf(qName[j]));\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29ab03cca2da07ab470c6aacc46e1813", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "78c62e3a4157070f714848f4de312a55f14f5144", "commitAfterChange": "fb48e11da0ebe84c63fab7b3cb5afd39c0ba6101", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  public WildcardBinding createWildcard(ReferenceBinding genericType, int rank, TypeBinding bound, int kind)", "signatureAfterChange": "  public WildcardBinding createWildcard(ReferenceBinding genericType, int rank, TypeBinding bound, TypeBinding[] otherBounds, int kind)", "diff": ["-public WildcardBinding createWildcard(ReferenceBinding genericType, int rank, TypeBinding bound, int kind) {", "+public WildcardBinding createWildcard(ReferenceBinding genericType, int rank, TypeBinding bound, TypeBinding[] otherBounds, int kind) {", "+\tif (genericType == null) // pseudo wildcard denoting composite bounds for lub computation", "+\t\tgenericType = ReferenceBinding.LUB_GENERIC;", "+\t\t\t    if (cachedType.otherBounds != otherBounds) {", "+\t\t\t    \tint cachedLength = cachedType.otherBounds == null ? 0 : cachedType.otherBounds.length;", "+\t\t\t    \tint length = otherBounds == null ? 0 : otherBounds.length;", "+\t\t\t    \tif (cachedLength != length) continue nextCachedType;", "+\t\t\t    \tfor (int j = 0; j < length; j++) {", "+\t\t\t    \t\tif (cachedType.otherBounds[j] != otherBounds[j]) continue nextCachedType;", "+\t\t\t    \t}", "+\t\t\t    }", "-\tWildcardBinding wildcard = new WildcardBinding(genericType, rank, bound, kind, this);", "+\tWildcardBinding wildcard = new WildcardBinding(genericType, rank, bound, otherBounds, kind, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f3bbcf5fc4858d5e94f3771776faaf6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchPattern.java", "commitBeforeChange": "562f566c1c2b8bfedaad7117a5b53ae2f781bec9", "commitAfterChange": "b11449e69404728ca4b19e3cce8d08756ffe4f52", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tchar[][] extractMethodArguments(IMethod method)", "signatureAfterChange": " \tchar[][] extractMethodArguments(IMethod method)", "diff": ["+\t\tString[] argumentsSignatures = null;", "-\t\t\treturn Util.extractMethodArguments(((ParameterizedSourceMethod)method).uniqueKey);", "+\t\t\targumentsSignatures = ((ParameterizedSourceMethod)method).genericTypeArgumentsSignatures;", "-\t\t\treturn Util.extractMethodArguments(((ParameterizedBinaryMethod)method).uniqueKey);", "+\t\t\targumentsSignatures = ((ParameterizedBinaryMethod)method).genericTypeArgumentsSignatures;", "+", "+\t\t// Parameterized method", "+\t\tint length = argumentsSignatures==null ? 0 : argumentsSignatures.length;", "+\t\tif (length > 0) {", "+\t\t\tchar[][] methodArguments = new char[length][];", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tmethodArguments[i] = argumentsSignatures[i].toCharArray();", "+\t\t\t\tCharOperation.replace(methodArguments[i], new char[] { '$', '/' }, '.');", "+\t\t\t}", "+\t\t\treturn methodArguments;", "+\t\t}", "+\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "407a228aa1b92e59c82190c74480f340", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "8d0a5299117e5fc84e729116ac52feef1385b968", "commitAfterChange": "527793c3501c0044ba7f65ec00ff957c7a149690", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean equals(Object object)", "signatureAfterChange": " \tpublic boolean equals(Object object)", "diff": ["+\t\t\tif (this.exclusionPatterns == null){", "+\t\t\t\tif (otherEntry.getExclusionPatterns() != null)", "+\t\t\t\t\treturn false;", "+\t\t\t} else {", "+\t\t\t\tint excludeLength = this.exclusionPatterns.length;", "+\t\t\t\tString[] otherExcludes = otherEntry.getExclusionPatterns();", "+\t\t\t\tif (otherExcludes == null || otherExcludes.length != excludeLength)", "+\t\t\t\t\treturn false;", "+\t\t\t\tfor (int i = 0; i < excludeLength; i++){", "+\t\t\t\t\tif (!this.exclusionPatterns[i].equals(otherExcludes[i]))", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41b67b112225b657cd23cb28633e265c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "ff17444fcc31fe021d6a45c4b051acce1b3894e3", "commitAfterChange": "eb15457015da4dfaee5df4c21a851b245805072a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void enterType(TypeInfo typeInfo)", "signatureAfterChange": " public void enterType(TypeInfo typeInfo)", "diff": ["-\tinfo.setSuperclassName(typeInfo.superclass);", "-\tinfo.setSuperInterfaceNames(typeInfo.superinterfaces);", "+\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\tchar[] superclass = typeInfo.superclass;", "+\tinfo.setSuperclassName(superclass == null ? null : manager.intern(superclass));", "+\tchar[][] superinterfaces = typeInfo.superinterfaces;", "+\tfor (int i = 0, length = superinterfaces == null ? 0 : superinterfaces.length; i < length; i++)", "+\t\tsuperinterfaces[i] = manager.intern(superinterfaces[i]);", "+\tinfo.setSuperInterfaceNames(superinterfaces);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42a3985fbe399cd9942e776d3df632ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "19eef6f26c48016adc4a14301bf3da3ca0ccecb1", "commitAfterChange": "650839ed308774b6702bdf04023742a308aab499", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "  private boolean hasStructuralAnnotationChanges(IBinaryAnnotation[] currentAnnotations, IBinaryAnnotation[] otherAnnotations)", "signatureAfterChange": "  private boolean hasStructuralAnnotationChanges(IBinaryAnnotation[] currentAnnotations, IBinaryAnnotation[] otherAnnotations)", "diff": ["-\t\t\tif (!currentPairs[j].getValue().equals(otherPairs[j].getValue()))", "+\t\t\tfinal Object value = currentPairs[j].getValue();", "+\t\t\tfinal Object value2 = otherPairs[j].getValue();", "+\t\t\tif (value instanceof Object[]) {", "+\t\t\t\tObject[] currentValues = (Object[]) value;", "+\t\t\t\tif (value2 instanceof Object[]) {", "+\t\t\t\t\tObject[] currentValues2 = (Object[]) value2;", "+\t\t\t\t\tfinal int length = currentValues.length;", "+\t\t\t\t\tif (length != currentValues2.length) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t\tfor (int n = 0; n < length; n++) {", "+\t\t\t\t\t\tif (!currentValues[n].equals(currentValues2[n])) {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t} else if (!value.equals(value2)) {", "+\t\t\t\treturn true;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "446d369124c283569d6421471dac226b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java", "commitBeforeChange": "95cf1c51bda98298c8465ff64b742f30d6302c1e", "commitAfterChange": "c061de6d65bf019fa9950896cd9e3724a43a4d46", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic boolean isProperType(boolean admitCapture18)", "signatureAfterChange": "  \tpublic boolean isProperType(boolean admitCapture18)", "diff": ["-\t\treturn admitCapture18;", "+\t\tif (!admitCapture18) ", "+\t\t\treturn false;", "+\t\tif (this.inRecursiveFunction)", "+\t\t\treturn true;", "+\t\tthis.inRecursiveFunction = true;", "+\t\ttry {", "+\t\t\tif (this.lowerBound != null && !this.lowerBound.isProperType(admitCapture18))", "+\t\t\t\treturn false;", "+\t\t\tif (this.upperBounds != null) {", "+\t\t\t\tfor (int i = 0; i < this.upperBounds.length; i++) {", "+\t\t\t\t\tif (!this.upperBounds[i].isProperType(admitCapture18))", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} finally {", "+\t\t\tthis.inRecursiveFunction = false;", "+\t\t}", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59daee73bccb4a47a65d0b3dd94117f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "ebc568fad377cf85a79bc0aeeea9122e5115f057", "commitAfterChange": "75c11b9993cee3cc0c66baeb87390d3f47878de0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t\t\tpublic IProblem createProblem( \t\t\t\tchar[] originatingFileName, \t\t\t\tint problemId, \t\t\t\tString[] problemArguments, \t\t\t\tString[] messageArguments, \t\t\t\tint severity, \t\t\t\tint startPosition, \t\t\t\tint endPosition, \t\t\t\tint lineNumber)", "signatureAfterChange": "  \tprivate static void reportProblems(CompilationUnitDeclaration unit, IAbstractSyntaxTreeVisitor visitor)", "diff": ["-\t\treturn new DefaultProblemFactory(Locale.getDefault()) {", "-\t\t\tpublic IProblem createProblem(", "-\t\t\t\tchar[] originatingFileName,", "-\t\t\t\tint problemId,", "-\t\t\t\tString[] problemArguments,", "-\t\t\t\tString[] messageArguments,", "-\t\t\t\tint severity,", "-\t\t\t\tint startPosition,", "-\t\t\t\tint endPosition,", "-\t\t\t\tint lineNumber) {", "-", "-\t\t\t\tIProblem problem =", "-\t\t\t\t\tsuper.createProblem(", "-\t\t\t\t\t\toriginatingFileName,", "-\t\t\t\t\t\tproblemId,", "-\t\t\t\t\t\tproblemArguments,", "-\t\t\t\t\t\tmessageArguments,", "-\t\t\t\t\t\tseverity,", "-\t\t\t\t\t\tstartPosition,", "-\t\t\t\t\t\tendPosition,", "-\t\t\t\t\t\tlineNumber);", "-\t\t\t\t// only consider problems associated with resolved file", "-\t\t\t\tif (CharOperation.equals(originatingFileName, fileName)){", "-\t\t\t\t\tvisitor.acceptProblem(problem);", "-\t\t\t\t}", "-\t\t\t\treturn problem;", "-\t\t\t}", "+\tprivate static void reportProblems(CompilationUnitDeclaration unit, IAbstractSyntaxTreeVisitor visitor) {", "+\t\tCompilationResult unitResult = unit.compilationResult;", "+\t\tIProblem[] problems = unitResult.getAllProblems();", "+\t\tfor (int i = 0, problemLength = problems == null ? 0 : problems.length; i < problemLength; i++) {", "+\t\t\tvisitor.acceptProblem(problems[i]);\t\t\t\t", "+\t\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e4d2ebc16ad30a28dcb6c4acc98da31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "79230cd7762a4c67bbe12b2445e22b464f420455", "commitAfterChange": "0e2b95cbd8acd25a30eff4aa5a4e5b34fa13b0c5", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \tpublic boolean performConcurrentJob(\r \t\tIJob searchJob,\r \t\tint waitingPolicy,\r \t\tIProgressMonitor progress)", "signatureAfterChange": "\r \tpublic boolean performConcurrentJob(\r \t\tIJob searchJob,\r \t\tint waitingPolicy,\r \t\tIProgressMonitor progress)", "diff": ["+\t\tint concurrentJobWork = 100;\r", "-\t\t\t\t\t\tstatus = searchJob.execute(progress);\r", "+\t\t\t\t\t\tstatus = searchJob.execute(progress == null ? null : new SubProgressMonitor(progress, concurrentJobWork));\r", "+\t\t\t\t\tIProgressMonitor subProgress = null;\r", "+\t\t\t\t\tint totalWork = this.awaitingJobsCount();\r", "+\t\t\t\t\tif (progress != null && totalWork > 0) {\r", "+\t\t\t\t\t\tsubProgress = new SubProgressMonitor(progress, 50);\r", "+\t\t\t\t\t\tsubProgress.beginTask(\"\", totalWork); //$NON-NLS-1$\r", "+\t\t\t\t\t\tconcurrentJobWork = 50;\r", "+\t\t\t\t\t}\r", "-\t\t\t\t\t\tif (progress != null && progress.isCanceled())\r", "+\t\t\t\t\t\tif (subProgress != null && subProgress.isCanceled())\r", "-\t\t\t\t\t\t\tif (progress != null) {\r", "-\t\t\t\t\t\t\t\tprogress.subTask(\r", "+\t\t\t\t\t\t\tif (subProgress != null) {\r", "+\t\t\t\t\t\t\t\tsubProgress.subTask(\r", "+\t\t\t\t\t\t\t\tsubProgress.worked(1);\r", "+\t\t\t\t\tif (subProgress != null) {\r", "+\t\t\t\t\t\tsubProgress.done();\r", "+\t\t\t\t\t}\r", "-\t\tstatus = searchJob.execute(progress);\r", "+\t\tstatus = searchJob.execute(progress == null ? null : new SubProgressMonitor(progress, concurrentJobWork));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63464a012e74b993aacc783f616d1025", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "ff17444fcc31fe021d6a45c4b051acce1b3894e3", "commitAfterChange": "eb15457015da4dfaee5df4c21a851b245805072a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void enterMethod(MethodInfo methodInfo)", "signatureAfterChange": " public void enterMethod(MethodInfo methodInfo)", "diff": ["-\tinfo.setArgumentNames(methodInfo.parameterNames);", "-\tinfo.setReturnType(methodInfo.returnType == null ? new char[]{'v', 'o','i', 'd'} : methodInfo.returnType);", "-\tinfo.setExceptionTypeNames(methodInfo.exceptionTypes);", "+\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\tchar[][] parameterNames = methodInfo.parameterNames;", "+\tfor (int i = 0, length = parameterNames.length; i < length; i++)", "+\t\tparameterNames[i] = manager.intern(parameterNames[i]);", "+\tinfo.setArgumentNames(parameterNames);", "+\tchar[] returnType = methodInfo.returnType == null ? new char[]{'v', 'o','i', 'd'} : methodInfo.returnType;", "+\tinfo.setReturnType(manager.intern(returnType));", "+\tchar[][] exceptionTypes = methodInfo.exceptionTypes;", "+\tinfo.setExceptionTypeNames(exceptionTypes);", "+\tfor (int i = 0, length = exceptionTypes.length; i < length; i++)", "+\t\texceptionTypes[i] = manager.intern(exceptionTypes[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6deb74f7fa8eb52a7cfa6f46ab5c9e27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaWorkspaceScope.java", "commitBeforeChange": "e4f6d0091f68bf4b6ecb46943ad5d4d6a5ce0095", "commitAfterChange": "3a73dbc8d9839c0eb87857ef97f640371d15a626", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " public String toString()", "signatureAfterChange": "   public String toString()", "diff": ["+", "-\treturn \"JavaWorkspaceScope\"; //$NON-NLS-1$", "+\tStringBuffer result = new StringBuffer(\"JavaWorkspaceScope on \"); //$NON-NLS-1$", "+\tIPath[] paths = enclosingProjectsAndJars();", "+\tint length = paths == null ? 0 : paths.length;", "+\tif (length == 0) {", "+\t\tresult.append(\"[empty scope]\"); //$NON-NLS-1$", "+\t} else {", "+\t\tresult.append(\"[\"); //$NON-NLS-1$", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tresult.append(\"\\n\\t\"); //$NON-NLS-1$", "+\t\t\tresult.append(paths[i]);", "+\t\t}", "+\t\tresult.append(\"\\n]\"); //$NON-NLS-1$", "+\t}", "+\treturn result.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "742cb0dbbe52e82f792f1f375aeda30c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 18, "signatureBeforeChange": " protected int getPosition()", "signatureAfterChange": " public int[] getFramePositions()", "diff": ["-}", "-protected int getPosition() {", "-    // need to record a new stack frame at this position", "-    int pos = super.getPosition();", "-    this.framePositions.add(new Integer(this.position));", "-    storeStackMapFrame();", "-    return pos;", "-}", "+}", "+public int[] getFramePositions() {", "+\tSet set = this.framePositions.keySet();", "+\tint size = set.size();", "+\tint[] positions = new int[size];", "+\tint n = 0;", "+\tfor (Iterator iterator = set.iterator(); iterator.hasNext(); ) {", "+\t\tpositions[n++] = ((Integer) iterator.next()).intValue();", "+\t}", "+\tArrays.sort(positions);", "+//  System.out.print('[');", "+//  for (int n = 0; n < size; n++) {", "+//  \tif (n != 0) System.out.print(',');", "+//  \tSystem.out.print(positions[n]);", "+//  }", "+//  System.out.println(']');", "+\treturn positions;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76f2b59a95244919f52963021ae0ab6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "b0ee678b65f48d1cfab35972dd53d6bd85389446", "commitAfterChange": "5a11933bf440021c4c92ce580c9967dadb549d6e", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": " public boolean isTypeArgumentContainedBy(TypeBinding otherType)", "signatureAfterChange": " public boolean isTypeArgumentContainedBy(TypeBinding otherType)", "diff": ["+\t\t\t\t\tif (otherBound instanceof IntersectionCastTypeBinding) {", "+\t\t\t\t\t\tTypeBinding [] intersectingTypes = ((IntersectionCastTypeBinding) otherBound).intersectingTypes;", "+\t\t\t\t\t\tfor (int i = 0, length = intersectingTypes.length; i < length; i++)", "+\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(intersectingTypes[i], this))", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (otherBound instanceof IntersectionCastTypeBinding) {", "+\t\t\t\t\t\tTypeBinding [] intersectingTypes = ((IntersectionCastTypeBinding) otherBound).intersectingTypes;", "+\t\t\t\t\t\tfor (int i = 0, length = intersectingTypes.length; i < length; i++)", "+\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(intersectingTypes[i], this))", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f7c5a4f708924bf27b118b2bd0f8420", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableTypeImpl.java", "commitBeforeChange": "80e40b4c60040fa0aa8e1c95f16e2597f3f0acf0", "commitAfterChange": "f9277e3d6f326ff6a770d54a63a8fe0127208bbc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t@Override \tpublic List<? extends TypeMirror> getParameterTypes()", "signatureAfterChange": " \t@Override \tpublic List<? extends TypeMirror> getParameterTypes()", "diff": ["-\t\tArrayList<TypeMirror> list = new ArrayList<TypeMirror>();", "-\t\tTypeBinding[] parameters = ((MethodBinding) this._binding).parameters;", "-\t\tif (parameters.length != 0) {", "+\t\tMethodBinding binding = (MethodBinding) this._binding;", "+\t\tTypeBinding[] parameters = binding.parameters;", "+\t\tint length = parameters.length;", "+\t\tboolean isEnumConstructor = binding.isConstructor() && binding.declaringClass.isEnum();", "+\t\tif (isEnumConstructor) {", "+\t\t\tif (length == 2) {", "+\t\t\t\treturn Collections.emptyList();", "+\t\t\t}", "+\t\t\tArrayList<TypeMirror> list = new ArrayList<TypeMirror>();", "+\t\t\tfor (int i = 2; i < length; i++) {", "+\t\t\t\tlist.add(_env.getFactory().newTypeMirror(parameters[i]));", "+\t\t\t}", "+\t\t\treturn Collections.unmodifiableList(list);", "+\t\t}", "+\t\tif (length != 0) {", "+\t\t\tArrayList<TypeMirror> list = new ArrayList<TypeMirror>();", "+\t\t\treturn Collections.unmodifiableList(list);", "-\t\treturn Collections.unmodifiableList(list);", "+\t\treturn Collections.emptyList();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95c76220278f6a2dce705115b04790e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "c4112ab397da10b85cbb2a3f081c4c91ed7c7975", "commitAfterChange": "2077df1da6fa132fd5beb7d042b102e760cf8cbf", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  static State read(IProject project, DataInputStream in) throws IOException", "signatureAfterChange": "  static State read(IProject project, DataInputStream in) throws IOException", "diff": ["+\tchar[][] internedRootNames = ReferenceCollection.internSimpleNames(readNames(in), false);", "-\t\t\t\tcollection = new AdditionalTypeCollection(additionalTypeNames, qualifiedNames, simpleNames);", "+\t\t\t\tchar[][] rootNames = new char[in.readInt()][];", "+\t\t\t\tfor (int j = 0, m = rootNames.length; j < m; j++)", "+\t\t\t\t\trootNames[j] = internedRootNames[in.readInt()];", "+\t\t\t\tcollection = new AdditionalTypeCollection(additionalTypeNames, qualifiedNames, simpleNames, rootNames);", "-\t\t\t\tcollection = new ReferenceCollection(qNames, sNames);", "+\t\t\t\tchar[][] rNames = new char[in.readInt()][];", "+\t\t\t\tfor (int j = 0, m = rNames.length; j < m; j++)", "+\t\t\t\t\trNames[j] = internedRootNames[in.readInt()];", "+\t\t\t\tcollection = new ReferenceCollection(qNames, sNames, rNames);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aef7b61e5444eb34ee6dbadf2b80c411", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate int extractArgCount(char[] signature) throws ClassFormatException", "signatureAfterChange": " \tprivate int extractArgCount(char[] signature, char[] className) throws ClassFormatException", "diff": ["-\tprivate int extractArgCount(char[] signature) throws ClassFormatException {", "+\tprivate int extractArgCount(char[] signature, char[] className) throws ClassFormatException {", "-\t\t\t\t\tparameterTypesCounter++;", "+\t\t\t\t\t// verify if first parameter is synthetic", "+\t\t\t\t\tif (className != null && parameterTypesCounter == 0) {", "+\t\t\t\t\t\tchar[] classSignature = Signature.createCharArrayTypeSignature(className, true);", "+\t\t\t\t\t\tint length = indexOfSemiColon-i+1;", "+\t\t\t\t\t\tif (classSignature.length > (length+1)) {", "+\t\t\t\t\t\t\t// synthetic means that parameter type has same signature than given class", "+\t\t\t\t\t\t\tfor (int j=i, k=0; j<indexOfSemiColon; j++, k++) {", "+\t\t\t\t\t\t\t\tif (signature[j] != classSignature[k]) {", "+\t\t\t\t\t\t\t\t\tparameterTypesCounter++;", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tparameterTypesCounter++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tclassName = null; // do not verify following parameters", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tparameterTypesCounter++;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b343510f29a0ff14ee44cfe1e15adb39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4cdefe233d92943ef24306ac575ee21d8a052e72", "commitAfterChange": "f974621a419c66d8827ce49e878f1ca626c0f5c2", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r public IType lookupType(TypeBinding typeBinding)", "signatureAfterChange": "\r public IType lookupType(TypeBinding typeBinding)", "diff": ["+\t\r", "+\t// find package fragments\r", "+\t\t\t\r", "+\t\r", "+\t// search inside enclosing element\r", "+\tchar[][] qualifiedName = CharOperation.splitOn('.', typeName);\r", "+\tint length = qualifiedName.length;\r", "+\tif (length == 0) return null;\r", "+\tIType type = this.createTypeHandle(qualifiedName[0]);\r", "+\tif (type == null) return null;\r", "+\tfor (int i = 1; i < length; i++) {\r", "+\t\ttype = this.createTypeHandle(type, qualifiedName[i]);\r", "+\t\tif (type == null) return null;\r", "+\t}\r", "+\tif (type.exists()) return type;\t\r", "+\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e26baa2ce266a5e30183a7e12dc548b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "12bbec9151d1b613c62f44289e9e604128f21de0", "commitAfterChange": "cfad6931331ca38f2461ad24853dd9b6dfa652de", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 25, "signatureBeforeChange": "  private void writeRestriction(AccessRestriction restriction, DataOutputStream out) throws IOException", "signatureAfterChange": "  private void writeRestriction(AccessRuleSet accessRuleSet, DataOutputStream out) throws IOException", "diff": ["-private void writeRestriction(AccessRestriction restriction, DataOutputStream out) throws IOException {", "-\tif (restriction == null) {", "-\t\tout.writeBoolean(false);", "+private void writeRestriction(AccessRuleSet accessRuleSet, DataOutputStream out) throws IOException {", "+\tif (accessRuleSet == null) {", "+\t\tout.writeInt(0);", "-\t\tout.writeBoolean(true);", "-\t\tout.writeUTF(restriction.getMessageTemplate());", "-\t\twriteNames(restriction.getInclusionPatterns(), out); // inclusion patterns come first, see readRestriction()", "-\t\twriteNames(restriction.getExclusionPatterns(), out);", "-\t\t// skip the AccessRestriction.furtherRestriction until we decide if it will be used", "+\t\tAccessRule[] accessRules = accessRuleSet.getAccessRules();", "+\t\tint length = accessRules.length;", "+\t\tout.writeInt(length);", "+\t\tif (length != 0) { ", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tAccessRule accessRule = accessRules[i];", "+\t\t\t\twriteName(accessRule.pattern, out);", "+\t\t\t\tout.writeInt(accessRule.severity);", "+\t\t\t}", "+\t\t\tout.writeUTF(accessRuleSet.messageTemplate);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6bd4be5cd33943e4a878ad1686dd87e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MemberValuePairBinding.java", "commitBeforeChange": "f16dd04d587b8e1f3024d7d526e9df3f56508d6d", "commitAfterChange": "200a72c26c52eaf559c601781ddfbb997711dd26", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic boolean isEqualTo(IBinding binding)", "signatureAfterChange": "  \tpublic boolean isEqualTo(IBinding binding)", "diff": ["-\t\tIMemberValuePairBinding other = (IMemberValuePairBinding) binding;", "-\t\tif (!getMethodBinding().isEqualTo(other.getMethodBinding())) {", "+\t\tIMemberValuePairBinding otherMemberValuePairBinding = (IMemberValuePairBinding) binding;", "+\t\tif (!getMethodBinding().isEqualTo(otherMemberValuePairBinding.getMethodBinding())) {", "-\t\tObject otherValue = other.getValue();", "+\t\tObject otherValue = otherMemberValuePairBinding.getValue();", "-\t\treturn currentValue.equals(otherValue);", "+\t\tif (currentValue.getClass().isArray()) {", "+\t\t\tif (!otherValue.getClass().isArray()) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tObject[] currentValues = (Object[]) currentValue;", "+\t\t\tObject[] otherValues = (Object[]) otherValue;", "+\t\t\tfinal int length = currentValues.length;", "+\t\t\tif (length != otherValues.length) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tObject current = currentValues[i];", "+\t\t\t\tObject other = otherValues[i];", "+\t\t\t\tif (current instanceof IBinding) {", "+\t\t\t\t\tif (!(other instanceof IBinding)) {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (!((IBinding) current).isEqualTo((IBinding) other)) {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (!current.equals(other)) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn true;", "+\t\t} else {", "+\t\t\treturn currentValue.equals(otherValue);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7d7d3dc9bc4cc8d46d27d6bb427e0b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateImportOperation.java", "commitBeforeChange": "bf0273f35fd80b9116145d3f2db1dec44bd9f2a0", "commitAfterChange": "09b80c5ae8d08eac28366eb29a3931cf5a303b0b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected ASTNode generateElementAST(ASTRewrite rewriter, IDocument document, ICompilationUnit cu) throws JavaModelException", "signatureAfterChange": " protected ASTNode generateElementAST(ASTRewrite rewriter, IDocument document, ICompilationUnit cu) throws JavaModelException", "diff": ["-\tName name = ast.newName(new String[] {this.importName});", "+\t// split import name into individual fragments", "+\tchar[][] charFragments = CharOperation.splitOn('.', this.importName.toCharArray());", "+\tint length = charFragments.length;", "+\t// check whether on demand", "+\tboolean onDemand;", "+\tif (charFragments[length-1].length == 1 && charFragments[length-1][0] == '*') {", "+\t\tonDemand = true;", "+\t\tlength--;", "+\t} else {", "+\t\tonDemand = false;", "+\t}", "+\tString[] strFragments = new String[length];", "+\tfor (int i = 0; i < length; i++) {", "+\t\tstrFragments[i] = String.valueOf(charFragments[i]);", "+\t}", "+\tName name = ast.newName(strFragments);", "+\tif (onDemand) importDeclaration.setOnDemand(true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea7e7854313bcb2854e8181e0bd1198e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "1780102e8a06260eba129007a669ddcafe6f2f5f", "commitAfterChange": "a5722689742a043213ccdec9d3d691140ed7f4f9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "signatureAfterChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "diff": ["-\t\t\t\t// TODO If S is an intersection type of which T is an element, the constraint reduces to true. ", "-\t\t\t\tif (subCandidate.kind() == Binding.INTERSECTION_TYPE)", "-\t\t\t\t\tInferenceContext18.missingImplementation(\"NYI\"); //$NON-NLS-1$", "+\t\t\t\tif (subCandidate.kind() == Binding.INTERSECTION_TYPE) {", "+\t\t\t\t\tReferenceBinding[] intersectingTypes = subCandidate.getIntersectingTypes();", "+\t\t\t\t\tif (intersectingTypes != null)", "+\t\t\t\t\t\tfor (int i = 0; i < intersectingTypes.length; i++)", "+\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(intersectingTypes[i], superCandidate))", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t}", "-\t\t\t\t// same as wildcard (but we don't have a lower bound any way)", "-\t\t\t\t// TODO If S is an intersection type of which T is an element, the constraint reduces to true.", "-\t\t\t\tif (subCandidate.kind() == Binding.INTERSECTION_TYPE)", "-\t\t\t\t\tInferenceContext18.missingImplementation(\"NYI\"); //$NON-NLS-1$", "+\t\t\t\t// similar to wildcard, but different queries for lower bound", "+\t\t\t\tif (subCandidate.kind() == Binding.INTERSECTION_TYPE) {", "+\t\t\t\t\tReferenceBinding[] intersectingTypes = subCandidate.getIntersectingTypes();", "+\t\t\t\t\tif (intersectingTypes != null)", "+\t\t\t\t\t\tfor (int i = 0; i < intersectingTypes.length; i++)", "+\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(intersectingTypes[i], superCandidate))", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tif (superCandidate instanceof CaptureBinding) {", "+\t\t\t\t\tCaptureBinding capture = (CaptureBinding) superCandidate;", "+\t\t\t\t\tif (capture.lowerBound != null && capture.firstBound == null)", "+\t\t\t\t\t\treturn new ConstraintTypeFormula(subCandidate, capture.lowerBound, SUBTYPE, this.isSoft);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb2154af8c5527d85618eb19ba90741f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTestsRequestor2.java", "commitBeforeChange": "22519abd3f3558e92c5b78ac9ce9558a4e196050", "commitAfterChange": "c562fe63284003e0aa645013eaaa286d657e4cee", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprotected void appendProposal(CompletionProposal proposal, StringBuffer buffer)", "signatureAfterChange": "  \tprotected void appendProposal(CompletionProposal proposal, StringBuffer buffer)", "diff": ["+\t\tif(this.showParamterNames) {", "+\t\t\tchar[][] parameterNames = proposal.findParameterNames(null);", "+\t\t\tbuffer.append(\", \");", "+\t\t\tif(parameterNames == null || parameterNames.length <= 0) {", "+\t\t\t\tbuffer.append(NULL_LITERAL);", "+\t\t\t} else {", "+\t\t\t\tbuffer.append(\"(\");", "+\t\t\t\tfor (int i = 0; i < parameterNames.length; i++) {", "+\t\t\t\t\tif(i > 0) buffer.append(\", \");", "+\t\t\t\t\tbuffer.append(parameterNames[i]);", "+\t\t\t\t}", "+\t\t\t\tbuffer.append(\")\");", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f766ac5c9694ab49e8baa440ec2b37dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "aa26b9b8d7416323ddb940d58fe661ba8f5d7223", "commitAfterChange": "a4cacbfb8be6276f1bbe9130c20576048fe33408", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public boolean hasStructuralChanges(byte[] newBytes, boolean orderRequired, boolean excludesSynthetic)", "signatureAfterChange": " public boolean hasStructuralChanges(byte[] newBytes, boolean orderRequired, boolean excludesSynthetic)", "diff": ["+\t\tchar[][][] missingTypes = getMissingTypeNames();", "+\t\tchar[][][] newMissingTypes = newClassFile.getMissingTypeNames();", "+\t\tif (missingTypes != null) {", "+\t\t\tif (newMissingTypes == null) {", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tint length = missingTypes.length;", "+\t\t\tif (length != newMissingTypes.length) {", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tif (!CharOperation.equals(missingTypes[i], newMissingTypes[i])) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else if (newMissingTypes != null) {", "+\t\t\treturn true;", "+\t\t}"]}], "num": 29069}
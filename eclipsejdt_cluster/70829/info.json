{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e758e4cb1a2da53d3a9d5df7e41e7f49", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e36b3e136c32f7841a151b710ce22dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/SourceElementParserTest.java", "commitBeforeChange": "30692448718de71df165cc52c018bee7df31a8fb", "commitAfterChange": "7fbd6c6645520ea8c438436fb3626bdc9d3414b8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void enterConstructor(MethodInfo methodInfo)", "signatureAfterChange": " public void enterConstructor(MethodInfo methodInfo)", "diff": ["- */", "-public void enterConstructor(MethodInfo methodInfo) {", "-", "-\tcurrentType.addMethod(", "-\t\tcurrentMethod = ", "-\t\t\tnew SourceMethod(", "-\t\t\t\tmethodInfo.declarationStart, ", "-\t\t\t\tmethodInfo.modifiers, ", "-\t\t\t\tnull, ", "-\t\t\t\tmethodInfo.name, ", "-\t\t\t\tmethodInfo.nameSourceStart, ", "-\t\t\t\tmethodInfo.nameSourceEnd, ", "-\t\t\t\tmethodInfo.parameterTypes, ", "-\t\t\t\tmethodInfo.parameterNames, ", "-\t\t\t\tmethodInfo.exceptionTypes,", "-\t\t\t\tsource)); ", "-\tif (methodInfo.typeParameters != null) {", "-\t\tfor (int i = 0, length = methodInfo.typeParameters.length; i < length; i++) {", "-\t\t\tTypeParameterInfo typeParameterInfo = methodInfo.typeParameters[i];", "+}", "+public void enterConstructor(MethodInfo methodInfo) {", "+\tenterAbtractMethod(methodInfo);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18516f9ceb97cfd51089864e0013d8bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "a3da1013b6fe549ad5c2ee5b7dc726eba38ff59e", "commitAfterChange": "30692448718de71df165cc52c018bee7df31a8fb", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void enterMethod( \t\tint declarationStart, \t\tint modifiers, \t\tchar[] returnType, \t\tchar[] name, \t\tint nameSourceStart, \t\tint nameSourceEnd, \t\tchar[][] parameterTypes, \t\tchar[][] parameterNames, \t\tchar[][] exceptionTypes)", "signatureAfterChange": " \tpublic void enterMethod(MethodInfo methodInfo)", "diff": ["-\tpublic void enterMethod(", "-\t\tint declarationStart,", "-\t\tint modifiers,", "-\t\tchar[] returnType,", "-\t\tchar[] name,", "-\t\tint nameSourceStart,", "-\t\tint nameSourceEnd,", "-\t\tchar[][] parameterTypes,", "-\t\tchar[][] parameterNames,", "-\t\tchar[][] exceptionTypes) {", "+\tpublic void enterMethod(MethodInfo methodInfo) {", "-\t\t\tfMemberName[typeDepth] = new String(name);", "+\t\t\tfMemberName[typeDepth] = new String(methodInfo.name);", "-\t\t\t\tnew SourceRange(nameSourceStart, nameSourceEnd - nameSourceStart + 1);", "-\t\t\tfMemberDeclarationStart[typeDepth] = declarationStart;", "-\t\t\tfMethodParameterTypes[typeDepth] = parameterTypes;", "-\t\t\tfMethodParameterNames[typeDepth] = parameterNames;", "+\t\t\t\tnew SourceRange(methodInfo.nameSourceStart, methodInfo.nameSourceEnd - methodInfo.nameSourceStart + 1);", "+\t\t\tfMemberDeclarationStart[typeDepth] = methodInfo.declarationStart;", "+\t\t\tfMethodParameterTypes[typeDepth] = methodInfo.parameterTypes;", "+\t\t\tfMethodParameterNames[typeDepth] =methodInfo. parameterNames;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e618505e026cb58d4817275a6632783", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/SourceElementParserTest.java", "commitBeforeChange": "a3da1013b6fe549ad5c2ee5b7dc726eba38ff59e", "commitAfterChange": "30692448718de71df165cc52c018bee7df31a8fb", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void enterConstructor( \tint declarationStart,  \tint modifiers,  \tchar[] name,  \tint nameSourceStart,  \tint nameSourceEnd,  \tchar[][] parameterTypes,  \tchar[][] parameterNames,  \tchar[][] exceptionTypes)", "signatureAfterChange": " public void enterConstructor(MethodInfo methodInfo)", "diff": ["-public void enterConstructor(", "-\tint declarationStart, ", "-\tint modifiers, ", "-\tchar[] name, ", "-\tint nameSourceStart, ", "-\tint nameSourceEnd, ", "-\tchar[][] parameterTypes, ", "-\tchar[][] parameterNames, ", "-\tchar[][] exceptionTypes) {", "+public void enterConstructor(MethodInfo methodInfo) {", "-\t\t\t\tdeclarationStart, ", "-\t\t\t\tmodifiers, ", "+\t\t\t\tmethodInfo.declarationStart, ", "+\t\t\t\tmethodInfo.modifiers, ", "-\t\t\t\tname, ", "-\t\t\t\tnameSourceStart, ", "-\t\t\t\tnameSourceEnd, ", "-\t\t\t\tparameterTypes, ", "-\t\t\t\tparameterNames, ", "-\t\t\t\texceptionTypes,", "+\t\t\t\tmethodInfo.name, ", "+\t\t\t\tmethodInfo.nameSourceStart, ", "+\t\t\t\tmethodInfo.nameSourceEnd, ", "+\t\t\t\tmethodInfo.parameterTypes, ", "+\t\t\t\tmethodInfo.parameterNames, ", "+\t\t\t\tmethodInfo.exceptionTypes,", "+\tif (methodInfo.typeParameters != null) {", "+\t\tfor (int i = 0, length = methodInfo.typeParameters.length; i < length; i++) {", "+\t\t\tTypeParameterInfo typeParameterInfo = methodInfo.typeParameters[i];", "+\t\t\taddTypeParameter(typeParameterInfo);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d2b3e9b6193f653309d31019f35fdc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/SourceElementParserTest.java", "commitBeforeChange": "a3da1013b6fe549ad5c2ee5b7dc726eba38ff59e", "commitAfterChange": "30692448718de71df165cc52c018bee7df31a8fb", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void enterMethod( \tint declarationStart,  \tint modifiers,  \tchar[] returnType,  \tchar[] name,  \tint nameSourceStart,  \tint nameSourceEnd,  \tchar[][] parameterTypes,  \tchar[][] parameterNames,  \tchar[][] exceptionTypes)", "signatureAfterChange": " public void enterMethod(MethodInfo methodInfo)", "diff": ["-public void enterMethod(", "-\tint declarationStart, ", "-\tint modifiers, ", "-\tchar[] returnType, ", "-\tchar[] name, ", "-\tint nameSourceStart, ", "-\tint nameSourceEnd, ", "-\tchar[][] parameterTypes, ", "-\tchar[][] parameterNames, ", "-\tchar[][] exceptionTypes) {", "+public void enterMethod(MethodInfo methodInfo) {", "-\t\t\t\tdeclarationStart, ", "-\t\t\t\tmodifiers, ", "-\t\t\t\treturnType, ", "-\t\t\t\tname, ", "-\t\t\t\tnameSourceStart, ", "-\t\t\t\tnameSourceEnd, ", "-\t\t\t\tparameterTypes, ", "-\t\t\t\tparameterNames, ", "-\t\t\t\texceptionTypes,", "+\t\t\t\tmethodInfo.declarationStart, ", "+\t\t\t\tmethodInfo.modifiers, ", "+\t\t\t\tmethodInfo.returnType, ", "+\t\t\t\tmethodInfo.name, ", "+\t\t\t\tmethodInfo.nameSourceStart, ", "+\t\t\t\tmethodInfo.nameSourceEnd, ", "+\t\t\t\tmethodInfo.parameterTypes, ", "+\t\t\t\tmethodInfo.parameterNames, ", "+\t\t\t\tmethodInfo.exceptionTypes,", "+\t", "+\tif (methodInfo.typeParameters != null) {", "+\t\tfor (int i = 0, length = methodInfo.typeParameters.length; i < length; i++) {", "+\t\t\tTypeParameterInfo typeParameterInfo = methodInfo.typeParameters[i];", "+\t\t\taddTypeParameter(typeParameterInfo);", "+\t\t}", "+\t}"]}], "num": 70829}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "179d000e8008cfa7ade46e99265804e4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "611fcdbf8649fb28dfdec3db4adde2bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "97881e1f65dad02c5fcba69e18ae3332573c3839", "commitAfterChange": "5ae43aadc33d93b5c6af6a0612729105eee79d4f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic static CompilationUnitDeclaration resolve( \t\tICompilationUnit unitElement, \t\tNodeSearcher nodeSearcher, \t\tboolean cleanUp, \t\tchar[] source, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": "  \tpublic static CompilationUnitDeclaration resolve( \t\tIClassFile classFile, \t\tNodeSearcher nodeSearcher, \t\tboolean cleanUp, \t\tchar[] source, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["+\t\tIClassFile classFile,", "+\t\tNodeSearcher nodeSearcher,", "+\t\tboolean cleanUp,", "+\t\tchar[] source,", "+\t\tWorkingCopyOwner owner,", "+\t\tIProgressMonitor monitor)", "+\t\tthrows JavaModelException {", "+", "+\t\tCompilationUnitDeclaration unit = null;", "+\t\ttry {", "+\t\t\t", "+\t\t\tStringBuffer buffer = new StringBuffer(SuffixConstants.SUFFIX_STRING_java);", "+\t\t\t", "+\t\t\tString classFileName = classFile.getElementName(); // this includes the trailing .class", "+\t\t\tbuffer.insert(0, classFileName.toCharArray(), 0, classFileName.indexOf('.'));", "+\t\t\tchar[] fileName = String.valueOf(buffer).toCharArray();", "+\t\t\tJavaProject project = (JavaProject) classFile.getJavaProject();", "+\t\t\tCompilationUnitResolver compilationUnitVisitor =", "+\t\t\t\tnew CompilationUnitResolver(", "+\t\t\t\t\tgetNameEnvironment(project, owner, monitor),", "+\t\t\t\t\tgetHandlingPolicy(),", "+\t\t\t\t\tproject.getOptions(true),", "+\t\t\t\t\tgetRequestor(),", "+\t\t\t\t\tgetProblemFactory(monitor));", "+\t", "+\t\t\tString encoding = project.getOption(JavaCore.CORE_ENCODING, true);", "+\t", "+\t\t\tchar[][] expectedPackageName = CharOperation.splitOn('.', classFile.getType().getPackageFragment().getElementName().toCharArray());", "+\t\t", "+\t\t\tunit = compilationUnitVisitor.resolve(", "+\t\t\t\tnew BasicCompilationUnit(", "+\t\t\t\t\tsource,", "+\t\t\t\t\texpectedPackageName,", "+\t\t\t\t\tnew String(fileName),", "+\t\t\t\t\tencoding),", "+\t\t\t\tnodeSearcher,", "+\t\t\t\ttrue, // method verification", "+\t\t\t\ttrue, // analyze code", "+\t\t\t\ttrue); // generate code", "+\t\t\treturn unit;", "+\t\t} finally {", "+\t\t\tif (cleanUp && unit != null) {", "+\t\t\t\tunit.cleanUp();", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbb2f935f32a5f7a783b6dd6452f883e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "1d5b841741b609cf6927afba3dde0ac1dd2572e2", "commitAfterChange": "09c7c7b4fe8a9c0ad49252ee63d32d12d87dd8ea", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic static CompilationUnitDeclaration resolve( \t\tIClassFile classFile, \t\tNodeSearcher nodeSearcher, \t\tboolean cleanUp, \t\tchar[] source, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": "  \tpublic static CompilationUnitDeclaration resolve( \t\tIClassFile classFile, \t\tNodeSearcher nodeSearcher, \t\tboolean cleanUp, \t\tchar[] source, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["-", "-\t\tCompilationUnitDeclaration unit = null;", "-\t\ttry {", "-\t\t\t", "-\t\t\tStringBuffer buffer = new StringBuffer(SuffixConstants.SUFFIX_STRING_java);", "-\t\t\t", "-\t\t\tString classFileName = classFile.getElementName(); // this includes the trailing .class", "-\t\t\tbuffer.insert(0, classFileName.toCharArray(), 0, classFileName.indexOf('.'));", "-\t\t\tchar[] fileName = String.valueOf(buffer).toCharArray();", "-\t\t\tJavaProject project = (JavaProject) classFile.getJavaProject();", "-\t\t\tCompilationUnitResolver compilationUnitVisitor =", "-\t\t\t\tnew CompilationUnitResolver(", "-\t\t\t\t\tgetNameEnvironment(project, owner, monitor),", "-\t\t\t\t\tgetHandlingPolicy(),", "-\t\t\t\t\tproject.getOptions(true),", "-\t\t\t\t\tgetRequestor(),", "-\t\t\t\t\tgetProblemFactory(monitor));", "-\t", "-\t\t\tString encoding = project.getOption(JavaCore.CORE_ENCODING, true);", "-\t", "-\t\t\tchar[][] expectedPackageName = CharOperation.splitOn('.', classFile.getType().getPackageFragment().getElementName().toCharArray());", "-\t\t\tunit = compilationUnitVisitor.resolve(", "-\t\t\t\tnew BasicCompilationUnit(", "-\t\t\t\t\tsource,", "-\t\t\t\t\texpectedPackageName,", "-\t\t\t\t\tnew String(fileName),", "-\t\t\t\t\tencoding),", "-\t\t\t\tnodeSearcher,", "-\t\t\t\ttrue, // method verification", "-\t\t\t\ttrue, // analyze code", "-\t\t\t\ttrue); // generate code", "-\t\t\treturn unit;", "-\t\t} finally {", "-\t\t\tif (cleanUp && unit != null) {", "-\t\t\t\tunit.cleanUp();", "-\t\t\t}", "-\t\t}", "+\t\tchar[][] packageName = CharOperation.splitOn('.', classFile.getType().getPackageFragment().getElementName().toCharArray());", "+\t\tStringBuffer buffer = new StringBuffer(SuffixConstants.SUFFIX_STRING_java);", "+\t\tString classFileName = classFile.getElementName(); // this includes the trailing .class", "+\t\tbuffer.insert(0, classFileName.toCharArray(), 0, classFileName.indexOf('.'));", "+\t\tString fileName = String.valueOf(buffer);", "+\t\tIJavaProject project = classFile.getJavaProject();", "+\t\treturn resolve(source, packageName, fileName, project, nodeSearcher, cleanUp, owner, monitor);"]}], "num": 20492}
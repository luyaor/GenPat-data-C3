{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e23d62286f4ba8fb04b53b72227650e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "367ab3cc74472d997c48a597a9e242ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void testBug95521()", "signatureAfterChange": " \tpublic void testBug95521()", "diff": ["-\t\t\t\"1. ERROR in test\\\\X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\r\\n\" + ", "+\t\t\t\"1. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\n\" + ", "-\t\t\t\"2. ERROR in test\\\\X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\r\\n\" + ", "+\t\t\t\"2. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\n\" + ", "-\t\t\t\"3. ERROR in test\\\\X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\r\\n\" + ", "+\t\t\t\"3. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\n\" + ", "-\t\t\t\"4. ERROR in test\\\\X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\r\\n\" + ", "+\t\t\t\"4. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\n\" + ", "-\t\t\t\"5. ERROR in test\\\\X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\r\\n\" + ", "+\t\t\t\"5. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\n\" + ", "-\t\t\t\"6. ERROR in test\\\\X.java (at line 15)\\r\\n\" + ", "-\t\t\t\"\t* @param <T>\\r\\n\" + ", "+\t\t\t\"6. ERROR in test\\\\X.java (at line 15)\\n\" + ", "+\t\t\t\"\t* @param <T>\\n\" + ", "-\t\t\t\"7. ERROR in test\\\\X.java (at line 19)\\r\\n\" + ", "-\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\r\\n\" + ", "+\t\t\t\"7. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\n\" + ", "-\t\t\t\"8. ERROR in test\\\\X.java (at line 19)\\r\\n\" + ", "-\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\r\\n\" + ", "-\t\t\t\"\t                            ^\\n\" + ", "-\t\t\t\"T cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"9. ERROR in test\\\\X.java (at line 19)\\r\\n\" + ", "-\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\r\\n\" + ", "+\t\t\t\"8. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\n\" + ", "-\t\t\t\"10. ERROR in test\\\\X.java (at line 19)\\r\\n\" + ", "-\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\r\\n\" + ", "+\t\t\t\"9. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\n\" + ", "+\t\t\t\"\t                            ^\\n\" + ", "+\t\t\t\"T cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\n\" + ", "-\t\t\t\"11. ERROR in test\\\\X.java (at line 19)\\r\\n\" + ", "-\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\r\\n\" + ", "+\t\t\t\"11. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\n\" + ", "-\t\t\t\"12. ERROR in test\\\\X.java (at line 22)\\r\\n\" + ", "-\t\t\t\"\t* @param <T>\\r\\n\" + ", "+\t\t\t\"12. ERROR in test\\\\X.java (at line 22)\\n\" + ", "+\t\t\t\"\t* @param <T>\\n\" + ", "-\t\t\t\"13. ERROR in test\\\\X.java (at line 24)\\r\\n\" + ", "-\t\t\t\"\tclass G<T> {}\\r\\n\" + ", "+\t\t\t\"13. ERROR in test\\\\X.java (at line 24)\\n\" + ", "+\t\t\t\"\tclass G<T> {}\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57c91a582b16eba17f041704051d6e03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void testBug95521()", "signatureAfterChange": " \tpublic void testBug95521()", "diff": ["-\t\t\t\"1. ERROR in test\\\\X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\r\\n\" + ", "+\t\t\t\"1. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\n\" + ", "-\t\t\t\"2. ERROR in test\\\\X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\r\\n\" + ", "+\t\t\t\"2. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\n\" + ", "-\t\t\t\"3. ERROR in test\\\\X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\r\\n\" + ", "+\t\t\t\"3. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\n\" + ", "-\t\t\t\"4. ERROR in test\\\\X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\r\\n\" + ", "+\t\t\t\"4. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\n\" + ", "-\t\t\t\"5. ERROR in test\\\\X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\r\\n\" + ", "+\t\t\t\"5. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\n\" + ", "-\t\t\t\"6. ERROR in test\\\\X.java (at line 15)\\r\\n\" + ", "-\t\t\t\"\t* @param <T>\\r\\n\" + ", "+\t\t\t\"6. ERROR in test\\\\X.java (at line 15)\\n\" + ", "+\t\t\t\"\t* @param <T>\\n\" + ", "-\t\t\t\"7. ERROR in test\\\\X.java (at line 19)\\r\\n\" + ", "-\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\r\\n\" + ", "+\t\t\t\"7. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\n\" + ", "-\t\t\t\"8. ERROR in test\\\\X.java (at line 19)\\r\\n\" + ", "-\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\r\\n\" + ", "-\t\t\t\"\t                            ^\\n\" + ", "-\t\t\t\"T cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"9. ERROR in test\\\\X.java (at line 19)\\r\\n\" + ", "-\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\r\\n\" + ", "+\t\t\t\"8. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\n\" + ", "-\t\t\t\"10. ERROR in test\\\\X.java (at line 19)\\r\\n\" + ", "-\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\r\\n\" + ", "+\t\t\t\"9. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\n\" + ", "+\t\t\t\"\t                            ^\\n\" + ", "+\t\t\t\"T cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\n\" + ", "-\t\t\t\"11. ERROR in test\\\\X.java (at line 19)\\r\\n\" + ", "-\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\r\\n\" + ", "+\t\t\t\"11. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\n\" + ", "-\t\t\t\"12. ERROR in test\\\\X.java (at line 22)\\r\\n\" + ", "-\t\t\t\"\t* @param <T>\\r\\n\" + ", "+\t\t\t\"12. ERROR in test\\\\X.java (at line 22)\\n\" + ", "+\t\t\t\"\t* @param <T>\\n\" + ", "-\t\t\t\"13. ERROR in test\\\\X.java (at line 24)\\r\\n\" + ", "-\t\t\t\"\tclass G<T> {}\\r\\n\" + ", "+\t\t\t\"13. ERROR in test\\\\X.java (at line 24)\\n\" + ", "+\t\t\t\"\tclass G<T> {}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a18b93e5a9e6641b97cfb51b9f943c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void test024()", "signatureAfterChange": " public void test024()", "diff": ["-\t\t\"     1  anewarray #17 java/lang/String\\n\" + ", "+\t\t\"     1  anewarray java/lang/String [17]\\n\" + ", "-\t\t\"     6  ldc #19 <String \\\"SUCCESS\\\">\\n\" + ", "+\t\t\"     6  ldc <String \\\"SUCCESS\\\"> [19]\\n\" + ", "-\t\t\"     9  astore_1\\n\" + ", "-\t\t\"    10  new #21 java/util/ArrayList\\n\" + ", "+\t\t\"     9  astore_1 [tab]\\n\" + ", "+\t\t\"    10  new java/util/ArrayList [21]\\n\" + ", "-\t\t\"    14  invokespecial #22 <Method java/util/ArrayList.<init>()V>\\n\" + ", "-\t\t\"    17  astore_2\\n\" + ", "-\t\t\"    18  aload_1\\n\" + ", "-\t\t\"    19  astore 6\\n\" + ", "+\t\t\"    14  invokespecial java/util/ArrayList.<init>()V [22]\\n\" + ", "+\t\t\"    17  astore_2 [list]\\n\" + ", "+\t\t\"    18  aload_1 [tab]\\n\" + ", "+\t\t\"    19  astore [local_6]\\n\" + ", "-\t\t\"    22  istore 4\\n\" + ", "-\t\t\"    24  aload 6\\n\" + ", "+\t\t\"    22  istore [local_4]\\n\" + ", "+\t\t\"    24  aload [local_6]\\n\" + ", "-\t\t\"    27  istore 5\\n\" + ", "+\t\t\"    27  istore [local_5]\\n\" + ", "-\t\t\"    32  aload 6\\n\" + ", "-\t\t\"    34  iload 4\\n\" + ", "+\t\t\"    32  aload [local_6]\\n\" + ", "+\t\t\"    34  iload [local_4]\\n\" + ", "-\t\t\"    37  astore_3\\n\" + ", "-\t\t\"    38  aload_2\\n\" + ", "-\t\t\"    39  aload_3\\n\" + ", "-\t\t\"    40  invokeinterface [nargs : 2] #28 <Interface method java/util/List.add(Ljava/lang/Object;)Z>\\n\" + ", "+\t\t\"    37  astore_3 [arg]\\n\" + ", "+\t\t\"    38  aload_2 [list]\\n\" + ", "+\t\t\"    39  aload_3 [arg]\\n\" + ", "+\t\t\"    40  invokeinterface java/util/List.add(Ljava/lang/Object;)Z [28] [nargs: 2]\\n\" + ", "-\t\t\"    46  iinc 4 1\\n\" + ", "-\t\t\"    49  iload 4\\n\" + ", "-\t\t\"    51  iload 5\\n\" + ", "+\t\t\"    46  iinc 4 1 [local_4]\\n\" + ", "+\t\t\"    49  iload [local_4]\\n\" + ", "+\t\t\"    51  iload [local_5]\\n\" + ", "-\t\t\"    56  aload_2\\n\" + ", "-\t\t\"    57  invokeinterface [nargs : 1] #32 <Interface method java/util/List.iterator()Ljava/util/Iterator;>\\n\" + ", "-\t\t\"    62  astore 4\\n\" + ", "+\t\t\"    56  aload_2 [list]\\n\" + ", "+\t\t\"    57  invokeinterface java/util/List.iterator()Ljava/util/Iterator; [32] [nargs: 1]\\n\" + ", "+\t\t\"    62  astore [local_4]\\n\" + ", "-\t\t\"    67  aload 4\\n\" + ", "-\t\t\"    69  invokeinterface [nargs : 1] #38 <Interface method java/util/Iterator.next()Ljava/lang/Object;>\\n\" + ", "-\t\t\"    74  astore_3\\n\" + ", "-\t\t\"    75  getstatic #44 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    78  aload_3\\n\" + ", "-\t\t\"    79  invokevirtual #50 <Method java/io/PrintStream.print(Ljava/lang/Object;)V>\\n\" + ", "-\t\t\"    82  aload 4\\n\" + ", "-\t\t\"    84  invokeinterface [nargs : 1] #54 <Interface method java/util/Iterator.hasNext()Z>\\n\" + ", "+\t\t\"    67  aload [local_4]\\n\" + ", "+\t\t\"    69  invokeinterface java/util/Iterator.next()Ljava/lang/Object; [38] [nargs: 1]\\n\" + ", "+\t\t\"    74  astore_3 [arg]\\n\" + ", "+\t\t\"    75  getstatic java/lang/System.out Ljava/io/PrintStream; [44]\\n\" + ", "+\t\t\"    78  aload_3 [arg]\\n\" + ", "+\t\t\"    79  invokevirtual java/io/PrintStream.print(Ljava/lang/Object;)V [50]\\n\" + ", "+\t\t\"    82  aload [local_4]\\n\" + ", "+\t\t\"    84  invokeinterface java/util/Iterator.hasNext()Z [54] [nargs: 1]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82d9fcd4cb4e39ebee63c499effab9bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " public void testTypeRefGenericAll02_TypeArgumentl() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAll02_TypeArgumentl() throws CoreException", "diff": ["-\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.x [\t\tX<\ufffd|String|\ufffd> x;@130] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<\ufffd|A|\ufffd, B, C> t;@148] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<A, \ufffd|B|\ufffd, C> t;@151] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<A, B, \ufffd|C|\ufffd> t;@154] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<\ufffd|X|\ufffd<Y<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@167] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<\ufffd|Y|\ufffd<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@169] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<\ufffd|Z|\ufffd<String>>>, Y<Z<String>>, Z<String>> bar() {@171] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<\ufffd|String|\ufffd>>>, Y<Z<String>>, Z<String>> bar() {@173] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, \ufffd|Y|\ufffd<Z<String>>, Z<String>> bar() {@184] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<\ufffd|Z|\ufffd<String>>, Z<String>> bar() {@186] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<\ufffd|String|\ufffd>>, Z<String>> bar() {@188] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<String>>, \ufffd|Z|\ufffd<String>> bar() {@198] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<String>>, Z<\ufffd|String|\ufffd>> bar() {@200] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<\ufffd|X|\ufffd<Y<Z<String>>>, Y<Z<String>>, Z<String>>();@236] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<\ufffd|Y|\ufffd<Z<String>>>, Y<Z<String>>, Z<String>>();@238] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<\ufffd|Z|\ufffd<String>>>, Y<Z<String>>, Z<String>>();@240] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<\ufffd|String|\ufffd>>>, Y<Z<String>>, Z<String>>();@242] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, \ufffd|Y|\ufffd<Z<String>>, Z<String>>();@253] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<\ufffd|Z|\ufffd<String>>, Z<String>>();@255] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<\ufffd|String|\ufffd>>, Z<String>>();@257] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<String>>, \ufffd|Z|\ufffd<String>>();@267] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<String>>, Z<\ufffd|String|\ufffd>>();@269] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<\ufffd|A|\ufffd, Z<String>, X<String>> () {@96] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, \ufffd|Z|\ufffd<String>, X<String>> () {@99] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<\ufffd|String|\ufffd>, X<String>> () {@101] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<String>, \ufffd|X|\ufffd<String>> () {@110] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<String>, X<\ufffd|String|\ufffd>> () {@112] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<\ufffd|A|\ufffd, ? extends B, ? super C> field = new Test<A, Z<String>, X<String>> () {@52] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, \ufffd|B|\ufffd, ? extends C> foo(Test<? extends A, ? super B, C> param) {@306] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends A, ? super B, \ufffd|C|\ufffd> param) {@355] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.C [class C extends X<\ufffd|String|\ufffd> {}@428] EXACT_MATCH\"", "+\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.x [\t\tX<!|String|!> x;@130] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<!|A|!, B, C> t;@148] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<A, !|B|!, C> t;@151] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<A, B, !|C|!> t;@154] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<!|X|!<Y<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@167] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<!|Y|!<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@169] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<!|Z|!<String>>>, Y<Z<String>>, Z<String>> bar() {@171] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<!|String|!>>>, Y<Z<String>>, Z<String>> bar() {@173] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, !|Y|!<Z<String>>, Z<String>> bar() {@184] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<!|Z|!<String>>, Z<String>> bar() {@186] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<!|String|!>>, Z<String>> bar() {@188] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<String>>, !|Z|!<String>> bar() {@198] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<String>>, Z<!|String|!>> bar() {@200] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<!|X|!<Y<Z<String>>>, Y<Z<String>>, Z<String>>();@236] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<!|Y|!<Z<String>>>, Y<Z<String>>, Z<String>>();@238] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<!|Z|!<String>>>, Y<Z<String>>, Z<String>>();@240] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<!|String|!>>>, Y<Z<String>>, Z<String>>();@242] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, !|Y|!<Z<String>>, Z<String>>();@253] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<!|Z|!<String>>, Z<String>>();@255] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<!|String|!>>, Z<String>>();@257] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<String>>, !|Z|!<String>>();@267] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<String>>, Z<!|String|!>>();@269] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<!|A|!, Z<String>, X<String>> () {@96] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, !|Z|!<String>, X<String>> () {@99] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<!|String|!>, X<String>> () {@101] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<String>, !|X|!<String>> () {@110] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<String>, X<!|String|!>> () {@112] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<!|A|!, ? extends B, ? super C> field = new Test<A, Z<String>, X<String>> () {@52] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, !|B|!, ? extends C> foo(Test<? extends A, ? super B, C> param) {@306] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends A, ? super B, !|C|!> param) {@355] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.C [class C extends X<!|String|!> {}@428] EXACT_MATCH\""]}], "num": 56250}
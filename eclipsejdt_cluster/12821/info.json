{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7f8711a0918a7055786e3fa124361c8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41e5479706ee4d416a846455480a7741", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java", "commitBeforeChange": "c117a64cdf0af5bb1016a70197fdaaecfa29c6f9", "commitAfterChange": "f27e1412cdba4e953d571d1998376687a4c5af71", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 30, "signatureBeforeChange": " \t \tpublic void consumeWildCard(int kind)", "signatureAfterChange": " \t \tpublic void consumeWildCard(int kind)", "diff": ["-\t\tthis.wildcardKind = kind;", "+\t\tswitch (kind) {", "+\t\t\tcase Wildcard.EXTENDS:", "+\t\t\tcase Wildcard.SUPER:", "+\t\t\t\tBindingKeyResolver boundResolver = (BindingKeyResolver) this.types.get(0);", "+\t\t\t\tthis.compilerBinding = this.environment.createWildcard((ReferenceBinding) this.wildcardGenericType, this.wildcardRank, (TypeBinding) boundResolver.compilerBinding, null /*no extra bound*/, kind);", "+\t\t\t\tbreak;", "+\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\tthis.compilerBinding = this.environment.createWildcard((ReferenceBinding) this.wildcardGenericType, rank++, null/*no bound*/, null /*no extra bound*/, kind);", "+\t\t\t\tbreak;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44b13b57432537cb97c90077f9f47bdd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleTypeReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeEnclosing(BlockScope scope, ReferenceBinding enclosingType)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeEnclosing(BlockScope scope, ReferenceBinding enclosingType)", "diff": ["-\t\tReferenceBinding memberTb = scope.getMemberType(token, enclosingType);", "-\t\tif (!memberTb.isValidBinding()) {", "-\t\t\tscope.problemReporter().invalidEnclosingType(this, memberTb, enclosingType);", "+\t\tReferenceBinding memberType = scope.getMemberType(token, enclosingType);", "+\t\tif (!memberType.isValidBinding()) {", "+\t\t\tscope.problemReporter().invalidEnclosingType(this, memberType, enclosingType);", "-\t\tif (isTypeUseDeprecated(memberTb, scope))", "-\t\t\tscope.problemReporter().deprecatedType(memberTb, this);", "-\t\treturn this.resolvedType = memberTb;", "+\t\tif (isTypeUseDeprecated(memberType, scope)) {", "+\t\t\tscope.problemReporter().deprecatedType(memberType, this);", "+\t\t}", "+\t\t// check raw type", "+\t\tif (memberType.isArrayType()) {", "+\t\t    TypeBinding leafComponentType = memberType.leafComponentType();", "+\t\t    if (leafComponentType.isGenericType()) { // raw type", "+\t\t        return this.resolvedType = scope.createArrayType(scope.environment().createRawType((ReferenceBinding)leafComponentType, null), memberType.dimensions());", "+\t\t    }", "+\t\t} else if (memberType.isGenericType()) {", "+\t        return this.resolvedType = scope.environment().createRawType(memberType, null); // raw type", "+\t\t}\t\t\t", "+\t\treturn this.resolvedType = memberType;"]}], "num": 12821}
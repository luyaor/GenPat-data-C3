{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a98d5413b8e3c041981e6ecaaca423e6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8f185beb10dbbe7ea723a690c2a1716", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "cbce30b9f59e4652d4bd8e53671da318f5703bbd", "commitAfterChange": "bb6274460011ae3e14410332fdec5a35eeffca9b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " private Statement buildMoreCompletionEnclosingContext(Statement statement)", "signatureAfterChange": " private Statement buildMoreCompletionEnclosingContext(Statement statement)", "diff": ["-", "+\tIfStatement ifStatement = null;", "-\tif (index != -1 && this.elementInfoStack[index] == IF && this.elementObjectInfoStack[index] != null) {", "-\t\tExpression condition = (Expression)this.elementObjectInfoStack[index];", "-", "-\t\t// If currentElement is a RecoveredLocalVariable then it can be contained in the if statement", "-\t\tif (this.currentElement instanceof RecoveredLocalVariable &&", "-\t\t\t\tthis.currentElement.parent instanceof RecoveredBlock) {", "-\t\t\tRecoveredLocalVariable recoveredLocalVariable = (RecoveredLocalVariable) this.currentElement;", "-\t\t\tif (recoveredLocalVariable.localDeclaration.initialization == null &&", "-\t\t\t\t\tstatement instanceof Expression &&", "-\t\t\t\t\tcondition.sourceStart < recoveredLocalVariable.localDeclaration.sourceStart) {", "-\t\t\t\tthis.currentElement.add(statement, 0);", "-", "-\t\t\t\tstatement = recoveredLocalVariable.updatedStatement(0, new HashSet());", "-", "-\t\t\t\t// RecoveredLocalVariable must be removed from its parent because the IfStatement will be added instead", "-\t\t\t\tRecoveredBlock recoveredBlock =  (RecoveredBlock) recoveredLocalVariable.parent;", "-\t\t\t\trecoveredBlock.statements[--recoveredBlock.statementCount] = null;", "-", "-\t\t\t\tthis.currentElement = recoveredBlock;", "-", "+\twhile (index >= 0) {", "+\t\t// Try to find an enclosing if statement even if one is not found immediately preceding the completion node.", "+\t\tif (index != -1 && this.elementInfoStack[index] == IF && this.elementObjectInfoStack[index] != null) {", "+\t\t\tExpression condition = (Expression)this.elementObjectInfoStack[index];", "+\t", "+\t\t\t// If currentElement is a RecoveredLocalVariable then it can be contained in the if statement", "+\t\t\tif (this.currentElement instanceof RecoveredLocalVariable &&", "+\t\t\t\t\tthis.currentElement.parent instanceof RecoveredBlock) {", "+\t\t\t\tRecoveredLocalVariable recoveredLocalVariable = (RecoveredLocalVariable) this.currentElement;", "+\t\t\t\tif (recoveredLocalVariable.localDeclaration.initialization == null &&", "+\t\t\t\t\t\tstatement instanceof Expression &&", "+\t\t\t\t\t\tcondition.sourceStart < recoveredLocalVariable.localDeclaration.sourceStart) {", "+\t\t\t\t\tthis.currentElement.add(statement, 0);", "+\t", "+\t\t\t\t\tstatement = recoveredLocalVariable.updatedStatement(0, new HashSet());", "+\t", "+\t\t\t\t\t// RecoveredLocalVariable must be removed from its parent because the IfStatement will be added instead", "+\t\t\t\t\tRecoveredBlock recoveredBlock =  (RecoveredBlock) recoveredLocalVariable.parent;", "+\t\t\t\t\trecoveredBlock.statements[--recoveredBlock.statementCount] = null;", "+\t", "+\t\t\t\t\tthis.currentElement = recoveredBlock;", "+\t", "+\t\t\t\t}", "+\t\t\tif (statement instanceof AND_AND_Expression && this.assistNode instanceof Statement) {", "+\t\t\t\tstatement = (Statement) this.assistNode;", "+\t\t\t}", "+\t\t\tifStatement =", "+\t\t\t\tnew IfStatement(", "+\t\t\t\t\t\tcondition,", "+\t\t\t\t\t\tstatement,", "+\t\t\t\t\t\tcondition.sourceStart,", "+\t\t\t\t\t\tstatement.sourceEnd);", "+\t\t\tindex--;", "+\t\t\tbreak;", "-\t\tif (statement instanceof AND_AND_Expression && this.assistNode instanceof Statement) {", "-\t\t\tstatement = (Statement) this.assistNode;", "-\t\t}", "-\t\tIfStatement ifStatement =", "-\t\t\tnew IfStatement(", "-\t\t\t\t\tcondition,", "-\t\t\t\t\tstatement,", "-\t\t\t\t\tcondition.sourceStart,", "-\t\t\t\t\tstatement.sourceEnd);", "-\t\tthis.enclosingNode = ifStatement;", "-\t\treturn ifStatement;", "+\t\tindex--;", "-", "-\treturn statement;", "+\tif (ifStatement == null) {", "+\t\treturn statement;", "+\t}", "+\t// collect all if statements with instanceof expressions that enclose the completion node", "+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=304006", "+\twhile (index >= 0) {", "+\t\tif (this.elementInfoStack[index] == IF && this.elementObjectInfoStack[index] instanceof InstanceOfExpression) {", "+\t\t\tInstanceOfExpression condition = (InstanceOfExpression)this.elementObjectInfoStack[index];", "+\t\t\tifStatement =", "+\t\t\t\tnew IfStatement(", "+\t\t\t\t\t\tcondition,", "+\t\t\t\t\t\tifStatement,", "+\t\t\t\t\t\tcondition.sourceStart,", "+\t\t\t\t\t\tifStatement.sourceEnd);", "+\t\t}", "+\t\tindex--;", "+\t}", "+\tthis.enclosingNode = ifStatement;", "+\treturn ifStatement;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc9946209860736ba6460992cd0b0a51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "9d055452465eca773099f6ddbd176c8ac4e63d52", "commitAfterChange": "b579f24643c72147abdb76f77077723f48a330f4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private Statement buildMoreCompletionEnclosingContext(Statement statement)", "signatureAfterChange": " private Statement buildMoreCompletionEnclosingContext(Statement statement)", "diff": ["-\tif (blockIndex != -1 && controlIndex < blockIndex) {", "-\t\tif (this.elementInfoStack[blockIndex] == IF && this.elementObjectInfoStack[blockIndex] != null) {", "-\t\t\tExpression condition = (Expression)this.elementObjectInfoStack[blockIndex];", "-\t\t\tIfStatement ifStatement =", "-\t\t\t\tnew IfStatement(", "+\tint index = blockIndex != -1 && controlIndex < blockIndex ? blockIndex : controlIndex;", "+\t", "+\tif (index != -1 && this.elementInfoStack[index] == IF && this.elementObjectInfoStack[index] != null) {", "+\t\tExpression condition = (Expression)this.elementObjectInfoStack[index];", "+\t\t", "+\t\t// If currentElement is a RecoveredLocalVariable then it can be contained in the if statement", "+\t\tif (this.currentElement instanceof RecoveredLocalVariable &&", "+\t\t\t\tthis.currentElement.parent instanceof RecoveredBlock) {", "+\t\t\tRecoveredLocalVariable recoveredLocalVariable = (RecoveredLocalVariable) this.currentElement;", "+\t\t\tif (recoveredLocalVariable.localDeclaration.initialization == null &&", "+\t\t\t\t\tstatement instanceof Expression &&", "+\t\t\t\t\tcondition.sourceStart < recoveredLocalVariable.localDeclaration.sourceStart) {", "+\t\t\t\tthis.currentElement.add(statement, 0);", "+\t\t\t\t", "+\t\t\t\tstatement = recoveredLocalVariable.updatedStatement();", "+\t\t\t\t", "+\t\t\t\t// RecoveredLocalVariable must be removed from its parent because the IfStatement will be added instead", "+\t\t\t\tRecoveredBlock recoveredBlock =  (RecoveredBlock) recoveredLocalVariable.parent;", "+\t\t\t\trecoveredBlock.statements[--recoveredBlock.statementCount] = null;", "+\t\t\t\t", "+\t\t\t\tthis.currentElement = recoveredBlock;", "+\t\t\t\t", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tIfStatement ifStatement = ", "+\t\t\tnew IfStatement(", "-\t\t\tthis.enclosingNode = ifStatement;", "-\t\t\treturn ifStatement;", "-\t\t}", "-\t} else if (controlIndex != -1) {", "-\t\tif (this.elementInfoStack[controlIndex] == IF && this.elementObjectInfoStack[controlIndex] != null) {", "-\t\t\tExpression condition = (Expression)this.elementObjectInfoStack[controlIndex];", "-\t\t\tIfStatement ifStatement =", "-\t\t\t\tnew IfStatement(", "-\t\t\t\t\tcondition, ", "-\t\t\t\t\tstatement, ", "-\t\t\t\t\tcondition.sourceStart, ", "-\t\t\t\t\tstatement.sourceEnd);", "-\t\t\tthis.enclosingNode = ifStatement;", "-\t\t\treturn ifStatement;", "-\t\t}", "+\t\tthis.enclosingNode = ifStatement;", "+\t\treturn ifStatement;"]}], "num": 46615}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a4f11e3b17aaeae8f94ef4a93f7170a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "171d3aa6ea5db218b09307218430d095", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elementutils/ElementUtilsProc.java", "commitBeforeChange": "c7e13eb999aeeb70fd34b19df0f27a778109206c", "commitAfterChange": "ad2281f1520933e65d479408c685e1055d82a8b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate boolean collectElements()", "signatureAfterChange": " \tprivate boolean collectElements()", "diff": ["+\t\t_elementH = _elementUtils.getTypeElement(\"targets.model.pc.H\");", "+\t\tif (_elementH == null || _elementH.getKind() != ElementKind.CLASS) {", "+\t\t\treportError(\"element H was not found or was not a class\");", "+\t\t\treturn false;", "+\t\t}", "+\t\t", "+\t\t_elementAnnoX = _elementUtils.getTypeElement(\"targets.model.pc.AnnoX\");", "+\t\tif (null == _elementAnnoX || _elementAnnoX.getKind() != ElementKind.ANNOTATION_TYPE) {", "+\t\t\treportError(\"annotation type annoX was not found or was not an annotation\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tfor (ExecutableElement method : ElementFilter.methodsIn(_elementAnnoX.getEnclosedElements())) {", "+\t\t\tif (\"value\".equals(method.getSimpleName().toString())) {", "+\t\t\t\t_annoXValue = method;", "+\t\t\t}", "+\t\t}", "+\t\tif (null == _annoXValue) {", "+\t\t\treportError(\"Could not find value() method in annotation type AnnoX\");", "+\t\t\treturn false;", "+\t\t}", "+\t\t", "+\t\t_elementAnnoY = _elementUtils.getTypeElement(\"targets.model.pc.AnnoY\");", "+\t\tif (null == _elementAnnoY || _elementAnnoY.getKind() != ElementKind.ANNOTATION_TYPE) {", "+\t\t\treportError(\"annotation type annoY was not found or was not an annotation\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tfor (ExecutableElement method : ElementFilter.methodsIn(_elementAnnoY.getEnclosedElements())) {", "+\t\t\tif (\"value\".equals(method.getSimpleName().toString())) {", "+\t\t\t\t_annoYValue = method;", "+\t\t\t}", "+\t\t}", "+\t\tif (null == _annoYValue) {", "+\t\t\treportError(\"Could not find value() method in annotation type AnnoY\");", "+\t\t\treturn false;", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4336c44be82854fbf6b60d569372345c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "d4fbb2dc620a3bd100b1dfc77464dd2b555e2dbc", "commitAfterChange": "a87cbcf6820e29c784cdbeba4d4d7b888f3bb8dc", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate boolean examineDAnnotations()", "signatureAfterChange": " \tprivate boolean examineDAnnotations()", "diff": ["+\t\t// methodDvoid3 has an annotation with string array type, but its value is a single string.", "+\t\t// See bug 261969.", "+\t\tList<? extends AnnotationMirror> annotsMethodDvoid3 = _methodDvoid3.getAnnotationMirrors();", "+\t\tif (1 != annotsMethodDvoid3.size()) {", "+\t\t\treportError(\"Wrong number of annotations on D.methodDvoid3(): expected 1, got \" + annotsMethodDvoid3.size());", "+\t\t\treturn false;", "+\t\t}", "+\t\tAnnotationMirror annotMethodDvoid3 = annotsMethodDvoid3.get(0);", "+\t\tMap<? extends ExecutableElement, ? extends AnnotationValue> annotMethodDvoid3Values = annotMethodDvoid3.getElementValues();", "+\t\tif (1 != annotMethodDvoid3Values.size()) {", "+\t\t\treportError(\"Wrong number of values on annotation on D.methodDvoid3(): expected 1, got \" ", "+\t\t\t\t\t+ annotMethodDvoid3Values.size());", "+\t\t\treturn false;", "+\t\t}", "+\t\tAnnotationValue annotMethodDvoid3Value = annotMethodDvoid3Values.values().iterator().next();", "+\t\tObject annotMethodDvoid3RealValue = annotMethodDvoid3Value.getValue();", "+\t\tif (null == annotMethodDvoid3RealValue) {", "+\t\t\treportError(\"Value of annotation on D.methodDvoid3() was null\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tif (!(annotMethodDvoid3RealValue instanceof List<?>)) {", "+\t\t\treportError(\"Expected type of annotation on D.methodDvoid3() to be List<?> but was: \" +", "+\t\t\t\t\tannotMethodDvoid3RealValue.getClass().getName());", "+\t\t\treturn false;", "+\t\t}", "+\t\t// If it's a List, then it's a List<AnnotationValue> so we've got another layer to decipher", "+\t\tAnnotationValue innerDvoid3Value = ((AnnotationValue)((List<?>)annotMethodDvoid3RealValue).get(0));", "+\t\tif (!\"methodDvoid3Value\".equals((String)innerDvoid3Value.getValue())) {", "+\t\t\treportError(\"Expected value of annotation on D.methodDvoid3() to be \\\"methodDvoid3Value\\\" but was: \" +", "+\t\t\t\t\tinnerDvoid3Value.getValue());", "+\t\t\treturn false;", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e766c7fe9f023ca34033d66557a956a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "ca3904810f95e1bcd38fe30169e6be65df9fab10", "commitAfterChange": "8d889a3eb8b924cc60e70fa9d37c9ce9262cf8ad", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate boolean examineDAnnotations()", "signatureAfterChange": " \tprivate boolean examineDAnnotations()", "diff": ["+\t\t\tint order = 0;", "+\t\t\t\t++order;", "+\t\t\t\t\t// Annotation value map should preserve order of annotation values", "+\t\t\t\t\tif (order != 1) {", "+\t\t\t\t\t\treportError(\"The annoZint param on D.methodDvoid should be first in the map, but was \" + order);", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t// methodDvoid2 is like methodDvoid but the annotation values are in opposite order;", "+\t\t// check to see that order has been preserved", "+\t\tList<? extends AnnotationMirror> annotsMethodDvoid2 = _methodDvoid2.getAnnotationMirrors();", "+\t\tfor (AnnotationMirror annotMethodDvoid2 : annotsMethodDvoid2) {", "+\t\t\tMap<? extends ExecutableElement, ? extends AnnotationValue> values = annotMethodDvoid2.getElementValues();", "+\t\t\tif (null == values || values.size() != 2) {", "+\t\t\t\treportError(\"@AnnoZ on D.methodDvoid2() should have two values but had: \" +", "+\t\t\t\t\t\t(values == null ? 0 : values.size()));", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tint order = 0;", "+\t\t\tfor (Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : values.entrySet()) {", "+\t\t\t\tString methodName = entry.getKey().getSimpleName().toString();", "+\t\t\t\tswitch (++order) {", "+\t\t\t\tcase 1:", "+\t\t\t\t\tif (!\"annoZString\".equals(methodName)) {", "+\t\t\t\t\t\treportError(\"First value of @AnnoZ on D.methodDvoid2 should be annoZString, but was: \" + methodName);", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 2:", "+\t\t\t\t\tif (!\"annoZint\".equals(methodName)) {", "+\t\t\t\t\t\treportError(\"Second value of @AnnoZ on D.methodDvoid2 should be annoZint, but was: \" + methodName);", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t"]}], "num": 71135}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bbc14dad35a76939b87ce8fd59e3a525", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15e76e3aaeda9066b7c2c6cd2464cd17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "ad99e8346223888eb2f8e2613d918829f95fd2b2", "commitAfterChange": "7c65ba31905e387e2902b13fe71f33b55f069273", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tboolean match(char patternTypeSuffix, char[] patternPkg, char[] patternTypeName, int matchRule, int typeKind, char[] pkg, char[] typeName)", "signatureAfterChange": "  \tboolean match(char patternTypeSuffix, char[] patternPkg, char[] patternTypeName, int matchRule, int typeKind, char[] pkg, char[] typeName)", "diff": ["-", "-\t\tboolean isCaseSensitive = (matchRule & SearchPattern.R_CASE_SENSITIVE) != 0;", "-\t\tif (patternPkg != null && !CharOperation.equals(patternPkg, pkg, isCaseSensitive))", "-\t\t\t\treturn false;", "-", "+\t\treturn match(patternPkg, matchRule, patternTypeName, matchRule, pkg, typeName);", "+\t}", "-\t\t\tboolean isCamelCase = (matchRule & (SearchPattern.R_CAMELCASE_MATCH | SearchPattern.R_CAMELCASE_SAME_PART_COUNT_MATCH)) != 0;", "-\t\t\tint matchMode = matchRule & JavaSearchPattern.MATCH_MODE_MASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79c3f6aa091baba2a7fb9b405ddc739f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java", "commitBeforeChange": "9170036b60b531a506b4ffe0efeda8e18d918bef", "commitAfterChange": "f8aee71b6b129d09f997301cd8500148a6feb325", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static boolean isMatch(char[] pattern, char[] word, int matchRule)", "signatureAfterChange": "  public static boolean isMatch(char[] pattern, char[] word, int matchRule)", "diff": ["+\t// First test camel case if necessary", "+\tboolean isCamelCase = (matchRule & SearchPattern.R_CAMELCASE_MATCH) != 0;", "+\tif (isCamelCase && pattern[0] == word[0] && CharOperation.camelCaseMatch(pattern, word)) {", "+\t\treturn true;", "+\t}", "+", "+\tmatchRule &= ~SearchPattern.R_CAMELCASE_MATCH;", "+\t\t\tif (isCamelCase) return false;", "-\t\t\t// avoid message send by comparing first character", "+\t\t\tif (isCamelCase) return false;", "-\t\t\t// avoid message send by comparing first character"]}], "num": 66136}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9f6fb59cf57e446654b28fb2c786150", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "644172cde21b78b35c3dfad84967394f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["+\t\t\t\t/*", "+\t\t\t\t * This should not happen. For consistency purpose, if the exception label is never used", "+\t\t\t\t * we also don't generate the corresponding catch block, otherwise we have some", "+\t\t\t\t * unreachable bytecodes", "+\t\t\t\t */", "+\t\t\t\tif (exceptionLabels[i].count == 0) continue;", "-\t\t\t\tcodeStream.pushOnStack(exceptionLabels[i].exceptionType);", "+\t\t\t\tcodeStream.pushExceptionOnStack(exceptionLabels[i].exceptionType);", "-\t\tif (this.subRoutineStartLabel != null) {", "-\t\t\tcodeStream.pushOnStack(this.scope.getJavaLangThrowable());", "+\t\tif (this.subRoutineStartLabel != null && this.anyExceptionLabel.count != 0) {", "+\t\t\tcodeStream.pushExceptionOnStack(this.scope.getJavaLangThrowable());", "-\t\t\t\t\tint position = codeStream.position;\t\t\t\t\t\t", "+\t\t\t\t\tint position = codeStream.position;", "-\t\t\t\t\tcodeStream.pushOnStack(this.scope.getJavaLangThrowable());", "+\t\t\t\t\tcodeStream.pushExceptionOnStack(this.scope.getJavaLangThrowable());", "+\t\t\t\t\tcodeStream.addVariable(this.anyExceptionVariable);", "+\t\t\t\t\tcodeStream.removeVariable(this.anyExceptionVariable);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e9e2701a15c5248f76ec794b99941f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["+\t\t\t\t\tcodeStream.pushOnStack(exceptionLabels[i].exceptionType);", "-\t\t\t\t\tcodeStream.incrStackSize(1);", "-\t\t\t\tthis.placeAllAnyExceptionHandlers();", "-\t\t\t\tif (naturalExitExceptionHandler != null) naturalExitExceptionHandler.place();", "-\t\t\t\t", "+\t\t\t\tcodeStream.pushOnStack(scope.getJavaLangThrowable());", "+\t\t\t\tthis.placeAllAnyExceptionHandlers();", "+\t\t\t\tif (naturalExitExceptionHandler != null) naturalExitExceptionHandler.place();", "+\t\t\t\t", "-\t\t\t\tcodeStream.incrStackSize(1);", "-\t\t\t\t\t\tcodeStream.load(anyExceptionVariable);", "-\t\t\t\t\t\tcodeStream.athrow();", "+\t\t\t\t\t\tcodeStream.throwAnyException(anyExceptionVariable);", "-\t\t\t\t\t\tcodeStream.incrStackSize(1);", "+\t\t\t\t\t\tcodeStream.pushOnStack(scope.getJavaLangThrowable());", "-\t\t\t\t\t\tcodeStream.load(anyExceptionVariable);", "-\t\t\t\t\t\tcodeStream.athrow();", "+\t\t\t\t\t\tcodeStream.throwAnyException(anyExceptionVariable);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba59b7c2e588d2b1528c167a371871f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "60fa0f30df3be607236a3914a945d66c6861e8b5", "commitAfterChange": "372db4ee3a74f029d1a0f2dad8a011aea73fd481", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": " public void generateClassLiteralAccessForType(TypeBinding accessedType, FieldBinding syntheticFieldBinding)", "signatureAfterChange": " public void generateClassLiteralAccessForType(TypeBinding accessedType, FieldBinding syntheticFieldBinding)", "diff": ["-\tBranchLabel endLabel;", "-\tExceptionLabel anyExceptionHandler;", "-\tint saveStackSize;", "-\t\tendLabel = new BranchLabel(this);", "+\t\tBranchLabel endLabel = new BranchLabel(this);", "-\t\tanyExceptionHandler = new ExceptionLabel(this, TypeBinding.NULL /*represents ClassNotFoundException*/);", "-\t\tanyExceptionHandler.placeStart();", "+\t\tExceptionLabel classNotFoundExceptionHandler = new ExceptionLabel(this, TypeBinding.NULL /*represents ClassNotFoundException*/);", "+\t\tclassNotFoundExceptionHandler.placeStart();", "-\t\tanyExceptionHandler.placeEnd();", "+\t\tclassNotFoundExceptionHandler.placeEnd();", "-\t", "-\t", "+", "-\t\tsaveStackSize = stackDepth;", "-\t\tstackDepth = 1;", "-\t\tanyExceptionHandler.place();", "-\t", "+\t\tthis.pushExceptionOnStack(TypeBinding.NULL);/*represents ClassNotFoundException*/", "+\t\tclassNotFoundExceptionHandler.place();", "+", "-\t\tstackDepth = saveStackSize;"]}], "num": 37806}
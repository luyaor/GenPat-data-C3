{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d03ac58c15cc36ff137402baf31503ef", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "127a3b402606826897ffd286841bc8ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/Factory.java", "commitBeforeChange": "a6fb7155fd890e70fc93ff099a2bfa78beffa3e9", "commitAfterChange": "dade23c0ca1cb5b996dfae1d1cfc189d06d41a6f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private static Object performNecessaryTypeConversion(final TypeMirror expectedType, \t    \t\t\t\t\t\t\t\t\t\t\t     final Object value, \t    \t\t\t\t\t\t\t\t\t\t\t     final String name, \t    \t\t\t\t\t\t\t\t\t\t\t     final EclipseMirrorImpl parent, \t    \t\t\t\t\t\t\t\t\t\t\t     final BaseProcessorEnv env)", "signatureAfterChange": "     private static Object performNecessaryTypeConversion(final TypeMirror expectedType, \t    \t\t\t\t\t\t\t\t\t\t\t     final Object value, \t    \t\t\t\t\t\t\t\t\t\t\t     final String name, \t    \t\t\t\t\t\t\t\t\t\t\t     final EclipseMirrorImpl parent, \t    \t\t\t\t\t\t\t\t\t\t\t     final BaseProcessorEnv env)", "diff": ["-    \tif(expectedType == null )return value;", "-    \t// apply widening or narrowing primitive type conversion based on JLS 5.1.2 and 5.1.3", "+    \tif( expectedType == null )return value;", "-    \t\t// widening byte -> short, int, long, float or double", "-    \t\t// narrowing byte -> char", "-    \t\tif( value instanceof Byte )", "-    \t\t{", "-    \t\t\tfinal byte b = ((Byte)value).byteValue();", "-    \t\t\tswitch( ((PrimitiveType)expectedType).getKind() )", "-    \t\t\t{", "-    \t\t\tcase CHAR:", "-    \t\t\t\treturn new Character((char)b);", "-    \t\t\tcase SHORT:", "-    \t\t\t\treturn new Short(b);", "-    \t\t\tcase INT:", "-    \t\t\t\treturn new Integer(b);", "-    \t\t\tcase LONG:", "-    \t\t\t\treturn new Long(b);", "-    \t\t\tcase FLOAT:", "-    \t\t\t\treturn new Float(b);", "-    \t\t\tcase DOUBLE:", "-    \t\t\t\treturn new Double(b);", "-    \t\t\tdefault:", "-    \t\t\t\t// it is either already correct or it is completely wrong,", "-    \t\t\t\t// which doesn't really matter what's returned", "-    \t\t\t\treturn value;", "-    \t\t\t}", "-    \t\t}", "-    \t\t// widening short -> int, long, float, or double ", "-    \t\t// narrowing short -> byte or char", "-    \t\telse if( value instanceof Short )", "-    \t\t{", "-    \t\t\tfinal short s = ((Short)value).shortValue();", "-    \t\t\tswitch( ((PrimitiveType)expectedType).getKind() )", "-    \t\t\t{", "-    \t\t\tcase BYTE:", "-    \t\t\t\treturn new Byte((byte)s);", "-    \t\t\tcase CHAR:", "-    \t\t\t\treturn new Character((char)s);  ", "-    \t\t\tcase INT:", "-    \t\t\t\treturn new Integer(s); ", "-    \t\t\tcase LONG:", "-    \t\t\t\treturn new Long(s);", "-    \t\t\tcase FLOAT:", "-    \t\t\t\treturn new Float(s);", "-    \t\t\tcase DOUBLE:", "-    \t\t\t\treturn new Double(s);", "-    \t\t\tdefault:", "-    \t\t\t\t// it is either already correct or it is completely wrong,", "-    \t\t\t\t// which doesn't really matter what's returned", "-    \t\t\t\treturn value;", "-    \t\t\t}", "-    \t\t}", "-    \t\t// widening char -> int, long, float, or double ", "-    \t\t// narrowing char -> byte or short", "-    \t\telse if( value instanceof Character )", "-    \t\t{", "-    \t\t\tfinal char c = ((Character)value).charValue();", "-    \t\t\tswitch( ((PrimitiveType)expectedType).getKind() )", "-    \t\t\t{", "-    \t\t\tcase INT:", "-    \t\t\t\treturn new Integer(c); ", "-    \t\t\tcase LONG:", "-    \t\t\t\treturn new Long(c);", "-    \t\t\tcase FLOAT:", "-    \t\t\t\treturn new Float(c);", "-    \t\t\tcase DOUBLE:", "-    \t\t\t\treturn new Double(c);", "-    \t\t\tcase BYTE:", "-    \t\t\t\treturn new Byte((byte)c);", "-    \t\t\tcase SHORT:", "-    \t\t\t\treturn new Short((short)c);  ", "-    \t\t\t", "-    \t\t\tdefault:", "-    \t\t\t\t// it is either already correct or it is completely wrong,", "-    \t\t\t\t// which doesn't really matter what's returned", "-    \t\t\t\treturn value;", "-    \t\t\t}", "-    \t\t}", "-    \t\t", "-    \t\t// widening int -> long, float, or double ", "-    \t\t// narrowing int -> byte, short, or char ", "-    \t\telse if( value instanceof Integer )", "-    \t\t{", "-    \t\t\tfinal int i = ((Integer)value).intValue();", "-    \t\t\tswitch( ((PrimitiveType)expectedType).getKind() )", "-    \t\t\t{    \t\t", "-    \t\t\tcase LONG:", "-    \t\t\t\treturn new Long(i);", "-    \t\t\tcase FLOAT:", "-    \t\t\t\treturn new Float(i);", "-    \t\t\tcase DOUBLE:", "-    \t\t\t\treturn new Double(i);", "-    \t\t\tcase BYTE:", "-    \t\t\t\treturn new Byte((byte)i);", "-    \t\t\tcase SHORT:", "-    \t\t\t\treturn new Short((short)i);  ", "-    \t\t\tcase CHAR:", "-    \t\t\t\treturn new Character((char)i);", "-    \t\t\tdefault:", "-    \t\t\t\t// it is either already correct or it is completely wrong,", "-    \t\t\t\t// which doesn't really matter what's returned", "-    \t\t\t\treturn value;", "-    \t\t\t}", "-    \t\t}", "-    \t\t// widening long -> float or double", "-    \t\telse if( value instanceof Long )", "-    \t\t{", "-    \t\t\tfinal long l = ((Long)value).longValue();", "-    \t\t\tswitch( ((PrimitiveType)expectedType).getKind() )", "-    \t\t\t{", "-    \t\t\tcase FLOAT:", "-    \t\t\t\treturn new Float(l);", "-    \t\t\tcase DOUBLE:", "-    \t\t\t\treturn new Double(l);    \t\t", "-    \t\t\tdefault:", "-    \t\t\t\t// it is either already correct or it is completely wrong,", "-    \t\t\t\t// which doesn't really matter what's returned", "-    \t\t\t\treturn value;", "-    \t\t\t}", "-    \t\t}", "-    \t\t", "-    \t\t// widening float -> double    \t\t ", "-    \t\telse if( value instanceof Float )", "-    \t\t{", "-    \t\t\tfinal float f = ((Float)value).floatValue();", "-    \t\t\tswitch( ((PrimitiveType)expectedType).getKind() )", "-    \t\t\t{    \t\t\t", "-    \t\t\tcase DOUBLE:", "-    \t\t\t\treturn new Double(f);    \t\t", "-    \t\t\tdefault:", "-    \t\t\t\t// it is either already correct or it is completely wrong,", "-    \t\t\t\t// which doesn't really matter what's returned", "-    \t\t\t\treturn value;", "-    \t\t\t}", "-    \t\t}", "-    \t\telse // boolean or double case. Nothing we can do here.", "-    \t\t\treturn value;", "+    \t\tfinal Class primitiveClass = getJavaLangClass_Primitive( (PrimitiveType)expectedType );", "+    \t\treturn performNecessaryPrimitiveTypeConversion(primitiveClass, value, false);", "-    \t\tfinal AnnotationValue annoValue = createAnnotationValue(converted, name, 0, parent, env);", "+    \t\tfinal AnnotationValue annoValue = createAnnotationValueFromDOMValue(converted, name, 0, parent, env);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "423afee563c9a7b8ac681ccb806da02b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java", "commitBeforeChange": "442502365ca87bb4850988c7cbff70c6c7204090", "commitAfterChange": "e2f40216eda9970777e0041ec245c6f388ea953e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": " public static Test suite()", "diff": ["-\t", "-\tif (false) {", "-\t\tString className = JavaProjectTests.class.getName();", "-\t\tSystem.err.println(\"WARNING: only a subset of \"+className+\" tests will be run...\");", "-\t\tTestSuite suite = new Suite(className);", "-\t\tsuite.addTest(new JavaProjectTests(\"testAddNonJavaResourcePackageFragmentRoot\"));", "-\t\treturn suite;", "-\t}", "-\tTestSuite suite = new Suite(JavaProjectTests.class.getName());", "-\tsuite.addTest(new JavaProjectTests(\"testPackageFragmentRootRawEntry\"));", "-\tsuite.addTest(new JavaProjectTests(\"testPackageFragmentRootRawEntryWhenDuplicate\"));", "-\tsuite.addTest(new JavaProjectTests(\"testProjectGetChildren\"));", "-\tsuite.addTest(new JavaProjectTests(\"testProjectGetPackageFragments\"));", "-\tsuite.addTest(new JavaProjectTests(\"testRootGetPackageFragments\"));", "-\tsuite.addTest(new JavaProjectTests(\"testRootGetPackageFragments2\"));", "-\tsuite.addTest(new JavaProjectTests(\"testRootGetPackageFragments3\"));", "-\tsuite.addTest(new JavaProjectTests(\"testInternalArchiveCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testExternalArchiveCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testProjectCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testPackageFragmentCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testPackageFragmentHasSubpackages\"));", "-\tsuite.addTest(new JavaProjectTests(\"testIsDefaultPackage\"));", "-\tsuite.addTest(new JavaProjectTests(\"testPackageFragmentRootCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testJarPackageFragmentCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testCompilationUnitCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testClassFileCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testArchiveClassFileCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testBinaryTypeCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testSourceMethodCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testOutputLocationNotAddedAsPackageFragment\"));", "-\tsuite.addTest(new JavaProjectTests(\"testOutputLocationNestedInRoot\"));", "-\tsuite.addTest(new JavaProjectTests(\"testChangeOutputLocation\"));", "-\tsuite.addTest(new JavaProjectTests(\"testFindElementPackage\"));", "-\tsuite.addTest(new JavaProjectTests(\"testFindElementClassFile\"));", "-\tsuite.addTest(new JavaProjectTests(\"testFindElementCompilationUnit\"));", "-\tsuite.addTest(new JavaProjectTests(\"testFindElementCompilationUnitDefaultPackage\"));", "-\tsuite.addTest(new JavaProjectTests(\"testFindElementInvalidPath\"));", "-\tsuite.addTest(new JavaProjectTests(\"testFindElementPrereqSimpleProject\"));", "-\tsuite.addTest(new JavaProjectTests(\"testProjectClose\"));", "-\tsuite.addTest(new JavaProjectTests(\"testPackageFragmentRenameAndCreate\"));", "-\tsuite.addTest(new JavaProjectTests(\"testFolderWithDotName\"));", "-\tsuite.addTest(new JavaProjectTests(\"testPackageFragmentNonJavaResources\"));", "-\tsuite.addTest(new JavaProjectTests(\"testPackageFragmentPackageInfoClass\"));", "-\tsuite.addTest(new JavaProjectTests(\"testPackageFragmentRootNonJavaResources\"));", "-\tsuite.addTest(new JavaProjectTests(\"testAddNonJavaResourcePackageFragmentRoot\"));", "-\tsuite.addTest(new JavaProjectTests(\"testFindPackageFragmentRootFromClasspathEntry\"));", "-\tsuite.addTest(new JavaProjectTests(\"testGetClasspathOnClosedProject\"));", "-\tsuite.addTest(new JavaProjectTests(\"testGetRequiredProjectNames\"));", "-\tsuite.addTest(new JavaProjectTests(\"testGetNonJavaResources1\"));", "-\tsuite.addTest(new JavaProjectTests(\"testGetNonJavaResources2\"));", "-\tsuite.addTest(new JavaProjectTests(\"testGetNonJavaResources3\"));", "-\tsuite.addTest(new JavaProjectTests(\"testGetNonJavaResources4\"));", "-\tsuite.addTest(new JavaProjectTests(\"testSourceFolderWithJarName\"));", "-\tsuite.addTest(new JavaProjectTests(\"testJdkLevelRoot\"));", "-\t", "-\t// TODO (jerome) reenable when https://bugs.eclipse.org/bugs/show_bug.cgi?id=71460 is fixed ", "-\t//suite.addTest(new JavaProjectTests(\"testExtraJavaLikeExtension1\"));", "-\t//suite.addTest(new JavaProjectTests(\"testExtraJavaLikeExtension2\"));", "-\t", "+\tTestSuite suite = (TestSuite) buildModelTestSuite(JavaProjectTests.class);", "+", "-\tsuite.addTest(new JavaProjectTests(\"testDeletePackageWithAutobuild\"));", "+\tif (suite.testCount() > 1) // if not running only 1 test", "+\t\tsuite.addTest(new JavaProjectTests(\"lastlyTestDeletePackageWithAutobuild\"));", "+\t"]}], "num": 63667}
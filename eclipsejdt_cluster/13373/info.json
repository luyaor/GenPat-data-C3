{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb7f2e649fd29f3ed543edecf887325f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77015194c12254fb7e256edfdb25310d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "78098de24c545f715ba2d1751d0ca9e6c5c70cdd", "commitAfterChange": "b455d99806c18178f9d152ed826cde0ff5c786f3", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " private IJavaElement createMethodHandle(IType type, String methodName, String[] parameterTypeSignatures)", "signatureAfterChange": " private IJavaElement createMethodHandle(IType type, String methodName, String[] parameterTypeSignatures)", "diff": ["-\tIJavaElement handle = type.getMethod(methodName, parameterTypeSignatures);", "-\tInteger occurenceCount = (Integer) this.allHandlesOccurences.get(handle);", "-\tif (occurenceCount == null) {", "-\t\toccurenceCount = new Integer(1);", "-\t} else {", "-\t\t// there are duplicate for this method, find right one", "-\t\tint count = occurenceCount.intValue();", "-\t\ttry {", "-\t\t\tIMethod[] methods = type.getMethods();", "-\t\t\tint length = methods.length;", "-\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\tif (methods[i].equals(handle)) {", "-\t\t\t\t\thandle = methods[i+count];", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// ignore", "+\tIMethod methodHandle = type.getMethod(methodName, parameterTypeSignatures);", "+\tif (methodHandle instanceof SourceMethod) {", "+\t\twhile (this.methodHandles.contains(methodHandle)) {", "+\t\t\t((SourceMethod) methodHandle).occurrenceCount++;", "-\t\toccurenceCount = new Integer(count+1);", "-\tthis.allHandlesOccurences.put(handle, occurenceCount);", "-\treturn handle;", "+\tthis.methodHandles.add(methodHandle);", "+\treturn methodHandle;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "809212afbb208f3364daddf62812082f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/HierarchyResolver.java", "commitBeforeChange": "bffd05273174fba670489cd637d40ac2a4d0913b", "commitAfterChange": "5cda6ee5d9726ecd4c3800dc98f96b9913f2498c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r private void reportHierarchy()", "signatureAfterChange": "\r private void reportHierarchy()", "diff": ["-\t\tIGenericType suppliedType = typeModels[current];\r", "-\t\tReferenceBinding typeBinding = typeBindings[current];\r", "-\t\tReferenceBinding superBinding = typeBinding.superclass();\r", "-\t\tIGenericType superclass = null;\r", "-\t\tif (superBinding != null) {\r", "-\t\t\tfor (int t = typeIndex; t >= 0; t--) {\r", "-\t\t\t\tif (typeBindings[t] == superBinding) {\r", "-\t\t\t\t\tsuperclass = typeModels[t];\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\r", "-\t\tReferenceBinding[] interfaceBindings = typeBinding.superInterfaces();\r", "-\t\tint length = interfaceBindings.length;\r", "-\t\tIGenericType[] superinterfaces = new IGenericType[length];\r", "-\t\tnext : for (int i = 0; i < length; i++) {\r", "-\t\t\tReferenceBinding interfaceBinding = interfaceBindings[i];\r", "-\t\t\tfor (int t = typeIndex; t >= 0; t--) {\r", "-\t\t\t\tif (typeBindings[t] == interfaceBinding) {\r", "-\t\t\t\t\tsuperinterfaces[i] = typeModels[t];\r", "-\t\t\t\t\tcontinue next;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "+\t\tIGenericType suppliedType = typeModels[current];\r", "+\t\tReferenceBinding typeBinding = typeBindings[current];\r", "+\t\tIGenericType superclass;\r", "+\t\t} else {\r", "+\t\t\tsuperclass = this.findSuperClass(suppliedType, typeBinding);\r", "+\t\tIGenericType[] superinterfaces = this.findSuperInterfaces(suppliedType, typeBinding);\r", "+\t\t\r"]}], "num": 13373}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f87d0e6d6acfe72d3f971c500d01037", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cf603f7bbf85284ec19f0a6258236d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 433, "methodNumberAfterChange": 433, "signatureBeforeChange": " \tpublic void test429()", "signatureAfterChange": " \tpublic void test429()", "diff": ["-\t\t\t\"1. ERROR in X4.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tclass X4 <T extends Comparable<Z> & Comparable<Z>> {}\\r\\n\" + ", "+\t\t\t\"1. ERROR in X4.java (at line 1)\\n\" + ", "+\t\t\t\"\tclass X4 <T extends Comparable<Z> & Comparable<Z>> {}\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X5.java (at line 1)\\n\" + ", "+\t\t\t\"\tclass X5 <T extends Y & Comparable<X5>> {}\\n\" + ", "+\t\t\t\"\t                                   ^^\\n\" + ", "+\t\t\t\"Type safety: X5 is a raw type. References to generic type X5<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X6.java (at line 1)\\n\" + ", "+\t\t\t\"\tclass X6 <T extends Y & Comparable<X6>> {}\\n\" + ", "+\t\t\t\"\t                                   ^^\\n\" + ", "+\t\t\t\"Type safety: X6 is a raw type. References to generic type X6<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X7.java (at line 1)\\n\" + ", "+\t\t\t\"\tclass X7 <T extends Comparable<Z> & Comparable<X7>> {}\\n\" + ", "+\t\t\t\"\t                                               ^^\\n\" + ", "+\t\t\t\"Type safety: X7 is a raw type. References to generic type X7<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b461eef4b993d7cf879008a1ad77a78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 432, "methodNumberAfterChange": 433, "signatureBeforeChange": " \tpublic void test429()", "signatureAfterChange": " \tpublic void test429()", "diff": ["-\t\t\t\"Bound conflict: Comparable<X5> is inherited with conflicting arguments\\n\" + ", "+\t\t\t\"The interface Comparable cannot be implemented more than once with different arguments: Comparable<X5> and Comparable<Y>\\n\" + ", "-\t\t\t\"1. ERROR in X6.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tclass X6 <T extends Y & Comparable<X6>> {}\\r\\n\" + ", "+\t\t\t\"1. ERROR in X6.java (at line 1)\\n\" + ", "+\t\t\t\"\tclass X6 <T extends Y & Comparable<X6>> {}\\n\" + ", "-\t\t\t\"Bound conflict: Comparable<X6> is inherited with conflicting arguments\\n\" + ", "+\t\t\t\"The interface Comparable cannot be implemented more than once with different arguments: Comparable<X6> and Comparable<Z>\\n\" + ", "-\t\t\t\"1. ERROR in X7.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tclass X7 <T extends Comparable<Z> & Comparable<X7>> {}\\r\\n\" + ", "+\t\t\t\"1. ERROR in X7.java (at line 1)\\n\" + ", "+\t\t\t\"\tclass X7 <T extends Comparable<Z> & Comparable<X7>> {}\\n\" + ", "-\t\t\t\"Bound conflict: Comparable<X7> is inherited with conflicting arguments\\n\" + ", "+\t\t\t\"The interface Comparable cannot be implemented more than once with different arguments: Comparable<X7> and Comparable<Z>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b9645642adc3a9227350abd455b17f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "875cc8d42787c90738d8dc077a25eb401e9e38f9", "commitAfterChange": "adfd584faf146517cb3e86f9f2b585f2851a3630", "methodNumberBeforeChange": 387, "methodNumberAfterChange": 387, "signatureBeforeChange": "\t \tpublic void _test385()", "signatureAfterChange": "  \tpublic void test385()", "diff": ["- */\t", "-\tpublic void _test385() { // 77496", "+\tpublic void test385() { // 77496", "-\t\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\t\"\tpublic List<String> getList() { return null; }\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tpublic List<String> getList() { return null; }\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tclass C extends B implements IDoubles {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"The return type is incompatible with IDoubles.getList(), B.getList()\\n\" + ", "+\t\t\t/*", "+\t\t\tX.java:3: A is not abstract and does not override abstract method getList() in IDoubles", "+\t\t\tclass A implements IDoubles {", "+\t\t\t^", "+\t\t\tX.java:4: getList() in A cannot implement getList() in IDoubles; attempting to use incompatible return type", "+\t\t\tfound   : java.util.List<java.lang.String>", "+\t\t\trequired: java.util.List<java.lang.Double>", "+\t\t\t\tpublic List<String> getList() { return null; }", "+\t\t\t                            ^", "+\t\t\tX.java:9: C is not abstract and does not override abstract method getList() in IDoubles", "+\t\t\tclass C extends B implements IDoubles {", "+\t\t\t */\t"]}], "num": 15459}
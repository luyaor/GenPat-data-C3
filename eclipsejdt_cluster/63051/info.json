{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e8066e81d34cdcc8029a037592b9a5d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b222b881b733511c44409284c1f91c0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "55c6ab9c45d49f1f177c61cec69726a778e34111", "commitAfterChange": "9e53891494288567535baf6ce8385d425d9822fd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashtableOfArrayToObject packageFragments, ICompilationUnit[] workingCopies)", "signatureAfterChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashtableOfArrayToObject packageFragments, ICompilationUnit[] workingCopies)", "diff": ["+\t\t\tHashSet visited = new HashSet();", "+\t\t\t\t", "+\t\t\t\tPackageFragment pkg = (PackageFragment) unitToLookInside.getParent();", "+\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot) pkg.getParent();", "+\t\t\t\tif (visited.contains(root)) continue;", "+\t\t\t\tString[] pkgName = pkg.names;", "+\t\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) packageFragments.get(pkgName);", "+\t\t\t\tif (roots == null) {", "+\t\t\t\t\tpackageFragments.put(pkgName, new IPackageFragmentRoot[] {root});", "+\t\t\t\t} else {", "+\t\t\t\t\tint rootLength = roots.length;", "+\t\t\t\t\tSystem.arraycopy(roots, 0, roots = new IPackageFragmentRoot[rootLength+1], 0, rootLength);", "+\t\t\t\t\troots[rootLength] = root;", "+\t\t\t\t\tpackageFragments.put(pkgName, roots);", "+\t\t\t\t}", "+\t\t\t\tvisited.add(root);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d616536d853884c5ce58c2c525c9aed3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "ade89e4fcc147d76e26736c6fadf9edebfc6386e", "commitAfterChange": "29f9f7b54f341569f134578b4014b331ae83ea82", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public static ClasspathLocation[] computeLocations(\r \tIWorkspaceRoot workspaceRoot,\r \tIJavaProject javaProject,\r \tString outputFolderLocation,\r \tArrayList sourceFolders,\r \tSimpleLookupTable prereqOutputFolders) throws JavaModelException", "signatureAfterChange": "\r public static ClasspathLocation[] computeLocations(\r \tIWorkspaceRoot workspaceRoot,\r \tIJavaProject javaProject,\r \tString outputFolderLocation,\r \tArrayList sourceFolders,\r \tSimpleLookupTable binaryResources) throws JavaModelException", "diff": ["-\tSimpleLookupTable prereqOutputFolders) throws JavaModelException {\r", "+\tSimpleLookupTable binaryResources) throws JavaModelException {\r", "-\t\tObject target = JavaModel.getTarget(workspaceRoot, entry.getPath(), true);\r", "+\t\tIPath path = entry.getPath();\r", "+\t\tObject target = JavaModel.getTarget(workspaceRoot, path, true);\r", "-\t\t\t\t\tif (prereqOutputFolders != null)\r", "-\t\t\t\t\t\tprereqOutputFolders.put(prereqProject, prereqOutputFolder);\r", "+\t\t\t\t\tif (binaryResources != null) { // normal builder mode\r", "+\t\t\t\t\t\tIResource[] existingResources = (IResource[]) binaryResources.get(prereqProject);\r", "+\t\t\t\t\t\tif (existingResources == null)\r", "+\t\t\t\t\t\t\tbinaryResources.put(prereqProject, new IResource[] {prereqOutputFolder});\r", "+\t\t\t\t\t\telse\r", "+\t\t\t\t\t\t\texistingResources[0] = prereqOutputFolder; // project's output folder is always first\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif (resource.getLocation() == null) // sanity check\r", "+\t\t\t\t\t\tcontinue nextEntry;\r", "-\t\t\t\t\t\tString extension = entry.getPath().getFileExtension();\r", "+\t\t\t\t\t\tString extension = path.getFileExtension();\r", "+\t\t\t\t\tif (binaryResources != null) { // normal builder mode\r", "+\t\t\t\t\t\tIProject p = resource.getProject(); // can be the project being built\r", "+\t\t\t\t\t\tIResource[] existingResources = (IResource[]) binaryResources.get(p);\r", "+\t\t\t\t\t\tif (existingResources == null) {\r", "+\t\t\t\t\t\t\texistingResources = new IResource[] {null, resource}; // project's output folder is always first, null if not included\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tint size = existingResources.length;\r", "+\t\t\t\t\t\t\tSystem.arraycopy(existingResources, 0, existingResources = new IResource[size + 1], 0, size);\r", "+\t\t\t\t\t\t\texistingResources[size] = resource;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbinaryResources.put(p, existingResources);\r", "+\t\t\t\t\t}\r", "-\t\t\tString extension = entry.getPath().getFileExtension();\r", "+\t\t\tString extension = path.getFileExtension();\r", "-\t\t\tclasspathLocations[cpCount++] = ClasspathLocation.forLibrary(entry.getPath().toString());\r", "+\t\t\tclasspathLocations[cpCount++] = ClasspathLocation.forLibrary(path.toString());\r"]}], "num": 63051}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "676762b148c0c776939c4528b7418c18", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d5ecb847e6fa59290170c8fc5aea77b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "581702d71a138ac97fe73cfd2b06cc855f39a496", "commitAfterChange": "d47f7e16ee9a06ebea0c1bfa73440fda6af0235f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected boolean generateInfos(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean generateInfos(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["-\t\t// put the info now, because getting the contents requires it", "+", "+\t\t// get buffer contents", "+\t\tIBuffer buffer = getBufferManager().getBuffer(WorkingCopy.this);", "+\t\tif (buffer == null) {", "+\t\t\tbuffer = openBuffer(pm); // open buffer independently from the info, since we are building the info", "+\t\t}", "+\t\tfinal char[] contents = buffer == null ? null : buffer.getCharacters();", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tIBuffer buffer = getBufferManager().getBuffer(WorkingCopy.this);", "-\t\t\t\t\t\tif (buffer == null) {", "-\t\t\t\t\t\t\t\tbuffer = openBuffer(pm); // open buffer independently from the info, since we are building the info", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn buffer == null ? null : buffer.getCharacters();", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\treturn CharOperation.NO_CHAR;", "-\t\t\t\t\t}", "+\t\t\t\t\treturn contents;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96f5a9e40c882d38cf02de86b6a3d648", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "581702d71a138ac97fe73cfd2b06cc855f39a496", "commitAfterChange": "d47f7e16ee9a06ebea0c1bfa73440fda6af0235f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 18, "signatureBeforeChange": "  protected boolean generateInfos(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": "  protected boolean generateInfos(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["-\t\t// put the info now, because getting the contents requires it", "+", "+\t\t// get buffer contents", "+\t\tIBuffer buffer = getBufferManager().getBuffer(CompilationUnit.this);", "+\t\tif (buffer == null) {", "+\t\t\tbuffer = openBuffer(pm); // open buffer independently from the info, since we are building the info", "+\t\t}", "+\t\tfinal char[] contents = buffer == null ? null : buffer.getCharacters();", "+\t\t", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tIBuffer buffer = getBufferManager().getBuffer(CompilationUnit.this);", "-\t\t\t\t\t\tif (buffer == null) {", "-\t\t\t\t\t\t\t\tbuffer = openBuffer(pm); // open buffer independently from the info, since we are building the info", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn buffer == null ? null : buffer.getCharacters();", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\treturn CharOperation.NO_CHAR;", "-\t\t\t\t\t}", "+\t\t\t\t\treturn contents;"]}], "num": 45381}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "535ab4aa61812985316bd2a915d15b65", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "652f9b597c9d02eb45a9f264eac8afd1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "1924cfa5e4209a8742be0104afe1beaad86d0922", "commitAfterChange": "dfe897878a3115c90160783084107f96dcd301be", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic CompilerOptions getCustomCompilerOptions(Scope scope)", "signatureAfterChange": " \t \tpublic void recordSuppressWarnings(CompilationResult compilationResult, int startSuppresss, int endSuppress)", "diff": ["-\t", "-\tpublic CompilerOptions getCustomCompilerOptions(Scope scope) {", "-\t\tCompilerOptions options = scope.compilerOptions();", "-\t\tlong warningLevel = options.warningThreshold;", "-\t\tlong originalWarningLevel = warningLevel;", "-\t\tMemberValuePair[] pairs = this.memberValuePairs();", "-\t\tpairLoop: for (int i = 0, length = pairs.length; i < length; i++) {", "-\t\t\tMemberValuePair pair = pairs[i];", "-\t\t\tif (CharOperation.equals(pair.name, TypeConstants.VALUE)) {", "-\t\t\t\tExpression value = pair.value;", "-\t\t\t\tif (value instanceof ArrayInitializer) {", "-\t\t\t\t\tArrayInitializer initializer = (ArrayInitializer) value;", "-\t\t\t\t\tExpression[] inits = initializer.expressions;", "-\t\t\t\t\tfor (int j = 0, initsLength = inits.length; j < initsLength; j++) {", "-\t\t\t\t\t\tConstant cst = inits[j].constant;", "-\t\t\t\t\t\tif (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {", "-\t\t\t\t\t\t\twarningLevel &= ~getSuppressedWarningLevel(cst.stringValue());", "-\t\t\t\t\t\t\tif (warningLevel == 0) break pairLoop;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tConstant cst = value.constant;", "-\t\t\t\t\tif (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {", "-\t\t\t\t\t\twarningLevel &= ~getSuppressedWarningLevel(cst.stringValue());", "-\t\t\t\t\t\tif (warningLevel == 0) break pairLoop;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak pairLoop;", "-\t\t\t}", "-\t\t}", "-\t\tif (originalWarningLevel != warningLevel) {", "-\t\t\toptions = new CompilerOptions(options);", "-\t\t\toptions.warningThreshold = warningLevel;", "-\t\t}", "-\t\treturn options;", "-\t}", "+\t", "+\tpublic void recordSuppressWarnings(CompilationResult compilationResult, int startSuppresss, int endSuppress) {", "+\t\tlong suppressWarningIrritants = 0;", "+\t\tMemberValuePair[] pairs = this.memberValuePairs();", "+\t\tpairLoop: for (int i = 0, length = pairs.length; i < length; i++) {", "+\t\t\tMemberValuePair pair = pairs[i];", "+\t\t\tif (CharOperation.equals(pair.name, TypeConstants.VALUE)) {", "+\t\t\t\tExpression value = pair.value;", "+\t\t\t\tif (value instanceof ArrayInitializer) {", "+\t\t\t\t\tArrayInitializer initializer = (ArrayInitializer) value;", "+\t\t\t\t\tExpression[] inits = initializer.expressions;", "+\t\t\t\t\tfor (int j = 0, initsLength = inits.length; j < initsLength; j++) {", "+\t\t\t\t\t\tConstant cst = inits[j].constant;", "+\t\t\t\t\t\tif (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {", "+\t\t\t\t\t\t\tsuppressWarningIrritants |= CompilerOptions.warningTokenToIrritant(cst.stringValue());", "+\t\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tConstant cst = value.constant;", "+\t\t\t\t\tif (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {", "+\t\t\t\t\t\tsuppressWarningIrritants |= CompilerOptions.warningTokenToIrritant(cst.stringValue());", "+\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak pairLoop;", "+\t\t\t}", "+\t\t}", "+\t\tif (suppressWarningIrritants != 0) {", "+\t\t\tcompilationResult.recordSuppressWarnings(suppressWarningIrritants, startSuppresss, endSuppress);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e83ba9094590172ada311ea8ed9319c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java", "commitBeforeChange": "2923ed68c1f82d0e305a158b4c5d393b708481eb", "commitAfterChange": "78fb30efd0199bf293193efc0adbb492172aafcc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void finalizeProblems()", "signatureAfterChange": "  \tpublic void finalizeProblems()", "diff": ["-\t\tlong[] foundIrritants = new long[this.suppressWarningsCount];", "+\t\tIrritantSet[] foundIrritants = new IrritantSet[this.suppressWarningsCount];", "-\t\t\tlong irritant = ProblemReporter.getIrritant(problemID);", "+\t\t\tint irritant = ProblemReporter.getIrritant(problemID);", "-\t\t\t\tif ((irritant & this.suppressWarningIrritants[iSuppress]) == 0)", "+\t\t\t\tif (!this.suppressWarningIrritants[iSuppress].isSet(irritant))", "-\t\t\t\tfoundIrritants[iSuppress] |= irritant;", "+\t\t\t\tif (foundIrritants[iSuppress] == null){", "+\t\t\t\t\tfoundIrritants[iSuppress] = new IrritantSet(irritant);", "+\t\t\t\t} else {", "+\t\t\t\t\tfoundIrritants[iSuppress].set(irritant);", "+\t\t\t\t}", "-\t\t\t\t\tlong irritants = this.suppressWarningIrritants[iSuppress];", "-\t\t\t\t\tif (unusedWarningTokenIsWarning && ~irritants == 0) continue; // @SuppressWarnings(\"all\") also suppresses unused warning token", "+\t\t\t\t\tIrritantSet irritants = this.suppressWarningIrritants[iSuppress];", "+\t\t\t\t\tif (unusedWarningTokenIsWarning && irritants.areAllSet()) continue; // @SuppressWarnings(\"all\") also suppresses unused warning token", "-\t\t\t\t\t\t\t\t\t\t\t\tlong tokenIrritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());", "-\t\t\t\t\t\t\t\t\t\t\t\tif (tokenIrritants != 0", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& ~tokenIrritants != 0 // no complaint against @SuppressWarnings(\"all\")", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& options.getSeverity(tokenIrritants) != ProblemSeverities.Ignore // if irritant is effectevely enabled", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& (foundIrritants[iSuppress] & tokenIrritants) == 0) { // if irritant had no matching problem", "+\t\t\t\t\t\t\t\t\t\t\t\tIrritantSet tokenIrritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());", "+\t\t\t\t\t\t\t\t\t\t\t\tif (tokenIrritants != null", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& !tokenIrritants.areAllSet() // no complaint against @SuppressWarnings(\"all\")", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& options.isAnyEnabled(tokenIrritants) // if irritant is effectevely enabled", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& (foundIrritants[iSuppress] == null || !foundIrritants[iSuppress].isAnySet(tokenIrritants))) { // if irritant had no matching problem", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (~this.suppressWarningIrritants[jSuppress] == 0) break pairLoop; // suppress all?", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.suppressWarningIrritants[jSuppress].areAllSet()) break pairLoop; // suppress all?", "-\t\t\t\t\t\t\t\t\t\tlong tokenIrritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());", "-\t\t\t\t\t\t\t\t\t\tif (tokenIrritants != 0", "-\t\t\t\t\t\t\t\t\t\t\t\t&& ~tokenIrritants != 0 // no complaint against @SuppressWarnings(\"all\")", "-\t\t\t\t\t\t\t\t\t\t\t\t&& options.getSeverity(tokenIrritants) != ProblemSeverities.Ignore // if irritant is effectevely enabled", "-\t\t\t\t\t\t\t\t\t\t\t\t&& (foundIrritants[iSuppress] & tokenIrritants) == 0) { // if irritant had no matching problem", "+\t\t\t\t\t\t\t\t\t\tIrritantSet tokenIrritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());", "+\t\t\t\t\t\t\t\t\t\tif (tokenIrritants != null", "+\t\t\t\t\t\t\t\t\t\t\t\t&& !tokenIrritants.areAllSet() // no complaint against @SuppressWarnings(\"all\")", "+\t\t\t\t\t\t\t\t\t\t\t\t&& options.isAnyEnabled(tokenIrritants) // if irritant is effectevely enabled", "+\t\t\t\t\t\t\t\t\t\t\t\t&& (foundIrritants[iSuppress] == null || !foundIrritants[iSuppress].isAnySet(tokenIrritants))) { // if irritant had no matching problem", "-\t\t\t\t\t\t\t\t\t\t\t\t\tif (~this.suppressWarningIrritants[jSuppress] == 0) break pairLoop; // suppress all?", "+\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.suppressWarningIrritants[jSuppress].areAllSet()) break pairLoop; // suppress all?"]}], "num": 11447}
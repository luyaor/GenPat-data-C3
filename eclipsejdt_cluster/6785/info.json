{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce560b66503e55703ff7039c0aa7e83a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e836c5db2371335d6c9a0e0a92ab9e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "66a68a77c79dc8161adf91226d8f791e46bc037a", "commitAfterChange": "7bdcf3d951d8bd1150c90600a140b9efc498e23b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate static char[] removePrefix(char[] name, char[][] prefixes)", "signatureAfterChange": " \t \tprivate static char[] removePrefix(char[] name, char[][] prefixes)", "diff": ["+\t\t\tint nameLength = name.length;", "-\t\t\t\tint max = prefix.length < name.length ? prefix.length : name.length;", "-\t\t\t\tint currLen = 0;", "-\t\t\t\tfor (; currLen < max; currLen++) {", "-\t\t\t\t\tif(Character.toLowerCase(prefix[currLen]) != Character.toLowerCase(name[currLen])) {", "-\t\t\t\t\t\tif (currLen > bestLength) {", "-\t\t\t\t\t\t\tbestLength = currLen;", "+\t\t\t\t", "+\t\t\t\tint prefixLength = prefix.length;", "+\t\t\t\tif(prefixLength <= nameLength) {", "+\t\t\t\t\tif(CharOperation.prefixEquals(prefix, name, false)) {", "+\t\t\t\t\t\tif (prefixLength > bestLength) {", "+\t\t\t\t\t\t\tbestLength = prefixLength;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tif(currLen == max && currLen > bestLength) {", "-\t\t\t\t\tbestLength = max;", "+\t\t\t\t} else {", "+\t\t\t\t\tint currLen = 0;", "+\t\t\t\t\tfor (; currLen < nameLength; currLen++) {", "+\t\t\t\t\t\tif(Character.toLowerCase(prefix[currLen]) != Character.toLowerCase(name[currLen])) {", "+\t\t\t\t\t\t\tif (currLen > bestLength) {", "+\t\t\t\t\t\t\t\tbestLength = currLen;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif(currLen == nameLength && currLen > bestLength) {", "+\t\t\t\t\t\tbestLength = currLen;", "+\t\t\t\t\t}", "-\t\t\t\tif(bestLength == name.length) {", "+\t\t\t\tif(bestLength == nameLength) {", "-\t\t\t\t\twithoutPrefixName = CharOperation.subarray(name, bestLength, name.length);", "+\t\t\t\t\twithoutPrefixName = CharOperation.subarray(name, bestLength, nameLength);", "+//\t\t", "+//\t\t", "+//\t\t// remove longer prefix", "+//\t\tchar[] withoutPrefixName = name;", "+//\t\tif (prefixes != null) {", "+//\t\t\tint bestLength = 0;", "+//\t\t\tfor (int i= 0; i < prefixes.length; i++) {", "+//\t\t\t\tchar[] prefix = prefixes[i];", "+//\t\t\t\tint max = prefix.length < name.length ? prefix.length : name.length;", "+//\t\t\t\tint currLen = 0;", "+//\t\t\t\tfor (; currLen < max; currLen++) {", "+//\t\t\t\t\tif(Character.toLowerCase(prefix[currLen]) != Character.toLowerCase(name[currLen])) {", "+//\t\t\t\t\t\tif (currLen > bestLength) {", "+//\t\t\t\t\t\t\tbestLength = currLen;", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t\tbreak;", "+//\t\t\t\t\t}", "+//\t\t\t\t}", "+//\t\t\t\tif(currLen == max && currLen > bestLength) {", "+//\t\t\t\t\tbestLength = max;", "+//\t\t\t\t}", "+//\t\t\t}", "+//\t\t\tif(bestLength > 0) {", "+//\t\t\t\tif(bestLength == name.length) {", "+//\t\t\t\t\twithoutPrefixName = CharOperation.NO_CHAR;", "+//\t\t\t\t} else {", "+//\t\t\t\t\twithoutPrefixName = CharOperation.subarray(name, bestLength, name.length);", "+//\t\t\t\t}", "+//\t\t\t}", "+//\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8ad0ff26269d2cc539568de2b8e616c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java", "commitBeforeChange": "14ba43da4ca84e6aa2e4b0e2b6c660335b90691e", "commitAfterChange": "b7f39314c9eefd05e7002c31c87dcdb0333c0655", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic final static boolean isArchiveFileName(String name)", "signatureAfterChange": " \tpublic final static boolean isPotentialZipArchive(String name)", "diff": ["-\tpublic final static boolean isArchiveFileName(String name) {", "-\t\tint nameLength = name == null ? 0 : name.length();", "-\t\tint suffixLength = SUFFIX_JAR.length;", "-\t\tif (nameLength < suffixLength) return false;", "-", "-\t\t// try to match as JAR file", "-\t\tfor (int i = 0; i < suffixLength; i++) {", "-\t\t\tchar c = name.charAt(nameLength - i - 1);", "-\t\t\tint suffixIndex = suffixLength - i - 1;", "-\t\t\tif (c != SUFFIX_jar[suffixIndex] && c != SUFFIX_JAR[suffixIndex]) {", "-", "-\t\t\t\t// try to match as ZIP file", "-\t\t\t\tsuffixLength = SUFFIX_ZIP.length;", "-\t\t\t\tif (nameLength < suffixLength) return false;", "-\t\t\t\tfor (int j = 0; j < suffixLength; j++) {", "-\t\t\t\t\tc = name.charAt(nameLength - j - 1);", "-\t\t\t\t\tsuffixIndex = suffixLength - j - 1;", "-\t\t\t\t\tif (c != SUFFIX_zip[suffixIndex] && c != SUFFIX_ZIP[suffixIndex]) return false;", "+\tpublic final static boolean isPotentialZipArchive(String name) {", "+\t\tint lastDot = name.lastIndexOf('.');", "+\t\tif (lastDot == -1)", "+\t\t\treturn false; // no file extension, it cannot be a zip archive name", "+\t\tif (name.lastIndexOf(File.separatorChar) > lastDot)", "+\t\t\treturn false; // dot was before the last file separator, it cannot be a zip archive name", "+\t\tint length = name.length();", "+\t\tint extensionLength = length - lastDot - 1;", "+\t\tif (extensionLength == EXTENSION_java.length()) {", "+\t\t\tfor (int i = extensionLength-1; i >=0; i--) {", "+\t\t\t\tif (Character.toLowerCase(name.charAt(length - extensionLength + i)) != EXTENSION_java.charAt(i)) {", "+\t\t\t\t\tbreak; // not a \".java\" file, check \".class\" file case below", "-\t\t\t\treturn true;", "+\t\t\t\tif (i == 0) {", "+\t\t\t\t\treturn false; // it is a \".java\" file, it cannot be a zip archive name", "+\t\t\t\t}", "-\t\treturn true;\t\t", "-\t}\t", "+\t\tif (extensionLength == EXTENSION_class.length()) {", "+\t\t\tfor (int i = extensionLength-1; i >=0; i--) {", "+\t\t\t\tif (Character.toLowerCase(name.charAt(length - extensionLength + i)) != EXTENSION_class.charAt(i)) {", "+\t\t\t\t\treturn true; // not a \".class\" file, so this is a potential archive name", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn false; // it is a \".class\" file, it cannot be a zip archive name", "+\t\t}", "+\t\treturn true; // it is neither a \".java\" file nor a \".class\" file, so this is a potential archive name", "+\t}"]}], "num": 6785}
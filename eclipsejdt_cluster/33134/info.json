{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2de1b6ca2e0b039e49a02f417a4b655", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05400a0f2c0d7f1b4e34bc33b85b4ee3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "04fb6202efdc761094aeadbfae786f791930dbc9", "commitAfterChange": "574419ea1bfec3547ee209064f26cc8514bc0721", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 24, "signatureBeforeChange": " private ICompilationUnit[] filterWorkingCopies(ICompilationUnit[] copies, IJavaElement focus, boolean isPolymorphicSearch)", "signatureAfterChange": " private ICompilationUnit[] workingCopiesThatCanSeeFocus(IJavaElement focus, boolean isPolymorphicSearch)", "diff": ["- */", "-private ICompilationUnit[] filterWorkingCopies(ICompilationUnit[] copies, IJavaElement focus, boolean isPolymorphicSearch) {", "-\tif (focus == null || copies == null) return copies;", "-\twhile (!(focus instanceof IJavaProject) && !(focus instanceof JarPackageFragmentRoot)) {", "-\t\tfocus = focus.getParent();", "-\t}", "-\tint length = copies.length;", "-\tICompilationUnit[] result = null;", "-\tint index = -1;", "-\tfor (int i=0; i<length; i++) {", "-\t\tICompilationUnit workingCopy = copies[i];", "-\t\tIPath projectOrJar = IndexSelector.getProjectOrJar(workingCopy).getPath();", "-\t\tif (!IndexSelector.canSeeFocus(focus, isPolymorphicSearch, projectOrJar)) {", "-\t\t\tif (result == null) {", "-\t\t\t\tresult = new ICompilationUnit[length-1];", "-\t\t\t\tSystem.arraycopy(copies, 0, result, 0, i);", "-\t\t\t\tindex = i;", "-\t\t\t}", "-\t\t} else if (result != null) {", "-\t\t\tresult[index++] = workingCopy;", "-\t\t}", "-\t}", "-\tif (result != null) {", "-\t\tif (result.length != index) {", "-\t\t\tSystem.arraycopy(result, 0, result = new ICompilationUnit[index], 0, index);", "-\t\t}", "-\t\treturn result;", "-\t} else {", "-\t\treturn copies;", "-\t}", "+ */", "+private ICompilationUnit[] workingCopiesThatCanSeeFocus(IJavaElement focus, boolean isPolymorphicSearch) {", "+\tICompilationUnit[] copies = getWorkingCopies();", "+\tif (focus == null || copies == null) return copies;", "+\twhile (!(focus instanceof IJavaProject) && !(focus instanceof JarPackageFragmentRoot)) {", "+\t\tfocus = focus.getParent();", "+\t}", "+\tint length = copies.length;", "+\tICompilationUnit[] result = null;", "+\tint index = -1;", "+\tfor (int i=0; i<length; i++) {", "+\t\tICompilationUnit workingCopy = copies[i];", "+\t\tIPath projectOrJar = IndexSelector.getProjectOrJar(workingCopy).getPath();", "+\t\tif (!IndexSelector.canSeeFocus(focus, isPolymorphicSearch, projectOrJar)) {", "+\t\t\tif (result == null) {", "+\t\t\t\tresult = new ICompilationUnit[length-1];", "+\t\t\t\tSystem.arraycopy(copies, 0, result, 0, i);", "+\t\t\t\tindex = i;", "+\t\t\t}", "+\t\t} else if (result != null) {", "+\t\t\tresult[index++] = workingCopy;", "+\t\t}", "+\t}", "+\tif (result != null) {", "+\t\tif (result.length != index) {", "+\t\t\tSystem.arraycopy(result, 0, result = new ICompilationUnit[index], 0, index);", "+\t\t}", "+\t\treturn result;", "+\t} else {", "+\t\treturn copies;", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b76b36b509b25b11f91c641e46b0913", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "5166ddb130bcb062c1e82da491c829c5d95a6211", "commitAfterChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  protected CompilationParticipantResult[] notifyParticipants(SourceFile[] unitsAboutToCompile)", "signatureAfterChange": "  protected CompilationParticipantResult[] notifyParticipants(SourceFile[] unitsAboutToCompile)", "diff": ["+\tCompilationParticipantResult[] results = new CompilationParticipantResult[unitsAboutToCompile.length];", "+\tfor (int i = unitsAboutToCompile.length; --i >= 0;)", "+\t\tresults[i] = new CompilationParticipantResult(unitsAboutToCompile[i]);", "+", "-\tCompilationParticipantResult[] results = null;", "-\tfor (int i = 0, l = this.javaBuilder.participants == null ? 0 : this.javaBuilder.participants.length; i < l; i++) {", "-\t\tif (!this.javaBuilder.participants[i].isAnnotationProcessor()) {", "-\t\t\tif (results == null) {", "-\t\t\t\tresults = new CompilationParticipantResult[unitsAboutToCompile.length];", "-\t\t\t\tfor (int j = unitsAboutToCompile.length; --j >= 0;)", "-\t\t\t\t\tresults[j] = new CompilationParticipantResult(unitsAboutToCompile[j]);", "-\t\t\t}", "-\t\t\tthis.javaBuilder.participants[i].buildStarting(results);", "-\t\t}", "-\t}", "-\treturn results;", "-}", "+\t// and what happens if some participants do not expect to be called with only a few files, after seeing 'all' the files?", "+\t\tthis.javaBuilder.participants[i].buildStarting(results, this instanceof BatchImageBuilder);", "+\tSimpleSet uniqueFiles = null;", "+\tCompilationParticipantResult[] toAdd = null;", "+\tint added = 0;", "+\t\t\t\tif (uniqueFiles == null) {", "+\t\t\t\t\tuniqueFiles = new SimpleSet(unitsAboutToCompile.length + 3);", "+\t\t\t\t\tfor (int f = unitsAboutToCompile.length; --f >= 0;)", "+\t\t\t\t\t\tuniqueFiles.add(unitsAboutToCompile[f]);", "+\t\t\t\t}", "+\t\t\t\tif (!uniqueFiles.includes(sourceFile))", "+\t\t\t\t\tuniqueFiles.add(sourceFile);", "+\t\t\t\t\tCompilationParticipantResult newResult = new CompilationParticipantResult(sourceFile);", "+\t\t\t\t\t// is there enough room to add all the addedGeneratedFiles.length ?", "+\t\t\t\t\tif (toAdd == null) {", "+\t\t\t\t\t\ttoAdd = new CompilationParticipantResult[addedGeneratedFiles.length];", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint length = toAdd.length;", "+\t\t\t\t\t\tif (added == length)", "+\t\t\t\t\t\t\tSystem.arraycopy(toAdd, 0, toAdd = new CompilationParticipantResult[length + addedGeneratedFiles.length], 0, length);", "+\t\t\t\t\t}", "+\t\t\t\t\ttoAdd[added++] = newResult;", "+\tif (added >0 ) {", "+\t\tint length = results.length;", "+\t\tSystem.arraycopy(results, 0, results = new CompilationParticipantResult[length + added], 0 , length);", "+\t\tSystem.arraycopy(toAdd, 0, results, length, added);", "+\t}", "+\treturn results;", "+}"]}], "num": 33134}
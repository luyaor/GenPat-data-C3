{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f1af768bd7ff35e8ab2f53f9a417f23", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cabfb6ab2551f02362133042689e5c23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java", "commitBeforeChange": "7234934f3efed703cbf030a33d03d36a447aeef6", "commitAfterChange": "34106cbe5c11d866864bb97a52bcf55f920c9662", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void readBinaryChildren(HashMap newElements, IBinaryType typeInfo)", "signatureAfterChange": " protected void readBinaryChildren(HashMap newElements, IBinaryType typeInfo)", "diff": ["-\tArrayList children = new ArrayList();", "+\tArrayList childrenHandles = new ArrayList();", "-\t\tgenerateFieldInfos(type, typeInfo, newElements, children);", "-\t\tgenerateMethodInfos(type, typeInfo, newElements, children);", "-\t\tgenerateInnerClassHandles(type, typeInfo, children); // Note inner class are separate openables that are not opened here: no need to pass in newElements", "+\t\tgenerateFieldInfos(type, typeInfo, newElements, childrenHandles);", "+\t\tgenerateMethodInfos(type, typeInfo, newElements, childrenHandles);", "+\t\tgenerateInnerClassHandles(type, typeInfo, childrenHandles); // Note inner class are separate openables that are not opened here: no need to pass in newElements", "-\tthis.binaryChildren = new JavaElement[children.size()];", "-\tchildren.toArray(this.binaryChildren);", "+\tthis.binaryChildren = new JavaElement[childrenHandles.size()];", "+\tchildrenHandles.toArray(this.binaryChildren);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd4f455786fc633b8585962c6e3ee4a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java", "commitBeforeChange": "f8eb13111e85058d6a3b96c5e3a0a3762548a3d5", "commitAfterChange": "3a282cd8b7c83e96465ddc9983742da9604c6a89", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected void readBinaryChildren(HashMap newElements, IBinaryType typeInfo)", "signatureAfterChange": " protected void readBinaryChildren(HashMap newElements, IBinaryType typeInfo)", "diff": ["+\tArrayList typeParameterHandles = new ArrayList();", "-\t\tgenerateTypeParameterInfos(type, typeInfo.getGenericSignature(), newElements, childrenHandles);", "+\t\tgenerateTypeParameterInfos(type, typeInfo.getGenericSignature(), newElements, typeParameterHandles);", "-\t\tgenerateMethodInfos(type, typeInfo, newElements, childrenHandles);", "+\t\tgenerateMethodInfos(type, typeInfo, newElements, childrenHandles, typeParameterHandles);", "+\tint typeParameterHandleSize = typeParameterHandles.size();", "+\tif (typeParameterHandleSize == 0) {", "+\t\tthis.typeParameters = TypeParameter.NO_TYPE_PARAMETERS;", "+\t} else {", "+\t\tthis.typeParameters = new ITypeParameter[typeParameterHandleSize];", "+\t\ttypeParameterHandles.toArray(this.typeParameters);", "+\t}"]}], "num": 15799}
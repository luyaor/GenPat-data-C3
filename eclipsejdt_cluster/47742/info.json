{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ba49b529d2319700df4628d9a5bcf4c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23c91985fc8acaa484d2f64d7a3ac852", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "ed25425f5de4194a0f32ce4c1315af886ca42c42", "commitAfterChange": "821b6028ffbd0ba8edfd1a0534c32e817f4e830d", "methodNumberBeforeChange": 150, "methodNumberAfterChange": 150, "signatureBeforeChange": " \tprotected synchronized void putInfos(IJavaElement openedElement, Map newElements)", "signatureAfterChange": " \tprotected synchronized void putInfos(IJavaElement openedElement, Map newElements)", "diff": ["-\t\t// remove children", "+\t\t// remove existing children as the are replaced with the new children contained in newElements", "-\t\tif (openedElement instanceof IParent && existingInfo instanceof JavaElementInfo) {", "-\t\t\tIJavaElement[] children = ((JavaElementInfo)existingInfo).getChildren();", "-\t\t\tfor (int i = 0, size = children.length; i < size; ++i) {", "-\t\t\t\tJavaElement child = (JavaElement) children[i];", "-\t\t\t\ttry {", "-\t\t\t\t\tchild.close();", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t// ignore", "-\t\t\t\t}", "-\t\t\t}", "+\t\tif (openedElement instanceof IParent) {", "+\t\t\tcloseChildren(existingInfo);", "-\t\t// When a JarPackageFragment is flused from the LRU cache, the entire", "+\t\t// When a JarPackageFragment is flushed from the LRU cache, the entire", "-\t\t// added (during the 'while' loop), we will end up in an inconsist state. ", "+\t\t// added (during the 'while' loop), we will end up in an inconsistent state. ", "-\t\t\tif( element instanceof JarPackageFragmentRoot ){", "+\t\t\tif (element instanceof JarPackageFragmentRoot) {", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36bea158ff3ef00c97f4683abe3d6ee4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "2e8c81b48304c9e33747060a2a7fcd8295c64afe", "commitAfterChange": "50125dca81221f803e384aaa4267a637e226f1c2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  protected void updateProblemsFor(String sourceLocation, CompilationResult result) throws CoreException", "signatureAfterChange": "  protected void updateProblemsFor(String sourceLocation, CompilationResult result) throws CoreException", "diff": ["-\tIProblem[] problems = result.getProblems();", "-\tboolean hasNoProblems = problems == null;", "-\tfoundProblem : if (!hasNoProblems) {", "-\t\tfor (int i = 0, length = problems.length; i < length; i++)", "-\t\t\tif (problems[i].getID() != IProblem.Task) break foundProblem;", "-\t\thasNoProblems = true;", "-\t}", "-\tif (hasNoProblems && markers.length == 0) return;", "+\tIProblem[] problems = result.getProblems(); // contains both true problems and todo tasks", "+\tif (problems == null && markers.length == 0 && JavaBuilder.getTasksFor(resource) == null) return;", "-\tJavaBuilder.removeProblemsFor(resource);", "+\tJavaBuilder.removeProblemsAndTasksFor(resource);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6763412e92bb57830e83d1ccdcb92c37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBinaryType.java", "commitBeforeChange": "b2329baad162e28eeaa0efd6e2ada9db5179775c", "commitAfterChange": "1d49668f30e4a48841a7ba14782018ddd855d6b6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r public boolean isAnonymous()", "signatureAfterChange": "\r public boolean isAnonymous()", "diff": ["+public boolean isAnonymous() {\r", "+\treturn false; // index did not record this information (since unused for hierarchies)\r", "+}\r", "-}\r", "-public boolean isAnonymous() {\r", "-\tint index = CharOperation.lastIndexOf('$', this.name);\r", "-\tif (index == -1) {\r", "-\t\treturn false;\r", "-\t} else {\r", "-\t\tfor (int i = index + 1, length = this.name.length; i < length; i++) {\r", "-\t\t\tif (!Character.isDigit(this.name[i])) {\r", "-\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\treturn true;\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9630dc46b35a4be36b633a00efa1add3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BuilderTests.java", "commitBeforeChange": "bbf4c65896774d7094a1b0af184fa5e65fff430e", "commitAfterChange": "88a272a79e1a01de59a7879ee7d861a289fe8315", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprotected void expectingProblemsFor(IPath[] roots, String expected)", "signatureAfterChange": " \tprotected void expectingProblemsFor(IPath[] roots, String expected)", "diff": ["-\t\tStringBuffer buffer = new StringBuffer();", "+\t\tProblem[] problems = allSortedProblems(roots);", "+\t\tassumeEquals(\"Invalid problem(s)!!!\", expected, arrayToString(problems)); //$NON-NLS-1$", "+\t}", "-\t\tif (allProblems != null) {", "-\t\t\tfor (int i=0, length=allProblems.length; i<length; i++) {", "-\t\t\t\tif (i>0) buffer.append('\\n');", "-\t\t\t\tbuffer.append(allProblems[i]);", "-\t\t\t}", "-\t\t}", "-\t\tString actual = buffer.toString();", "-\t\tassumeEquals(\"Invalid problem(s)!!!\", expected, actual); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7fe0ec73c998d2288afabf23ded991e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TestBuffer.java", "commitBeforeChange": "3614fb7a931da6f7d6b963e79da43a1a287be280", "commitAfterChange": "f35ac795e031f468ed2702736c7462517694be67", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t\tpublic void close()", "signatureAfterChange": " \t\tpublic void close()", "diff": ["-\t\t\t\tBufferChangedEvent event = null;", "-\t\t\t\tevent = new BufferChangedEvent(this, 0, 0, null);", "-\t\t\t\tfor (int i = 0, size = this.changeListeners.size(); i < size; ++i) {", "-\t\t\t\t\tIBufferChangedListener listener = (IBufferChangedListener) this.changeListeners.get(i);", "-\t\t\t\t\tlistener.bufferChanged(event);", "-\t\t\t\t}", "+\t\t\t\tnotifyListeners();", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f030dbc28926ec71db2b4f7b9496691f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "813cb7f1fc14c8072642ec711f5098f552e1b8db", "commitAfterChange": "12c7a1390003be03c294e54b44d9a738e6c7419f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public static IJavaSearchScope createJavaSearchScope(IJavaElement[] elements)", "signatureAfterChange": "\r public static IJavaSearchScope createJavaSearchScope(IJavaElement[] elements)", "diff": ["+ */\r", "+public static IJavaSearchScope createJavaSearchScope(IJavaElement[] elements) {\r", "+\treturn createJavaSearchScope(elements, true);\r", "+}\r", "-public static IJavaSearchScope createJavaSearchScope(IJavaElement[] elements) {\r", "-\t\t\t\tscope.add(element);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f088b2cbe1d839d22e700d52afe72913", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "ed25425f5de4194a0f32ce4c1315af886ca42c42", "commitAfterChange": "821b6028ffbd0ba8edfd1a0534c32e817f4e830d", "methodNumberBeforeChange": 161, "methodNumberAfterChange": 162, "signatureBeforeChange": " \tpublic synchronized Object removeInfoAndChildren(JavaElement element) throws JavaModelException", "signatureAfterChange": " \tpublic synchronized Object removeInfoAndChildren(JavaElement element) throws JavaModelException", "diff": ["-\t\t\t\tif (element instanceof IParent && info instanceof JavaElementInfo) {", "-\t\t\t\t\tIJavaElement[] children = ((JavaElementInfo)info).getChildren();", "-\t\t\t\t\tfor (int i = 0, size = children.length; i < size; ++i) {", "-\t\t\t\t\t\tJavaElement child = (JavaElement) children[i];", "-\t\t\t\t\t\tchild.close();", "-\t\t\t\t\t}", "+\t\t\t\tif (element instanceof IParent) {", "+\t\t\t\t\tcloseChildren(info);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff914bb7f71c461aab7ffa8e42d4d05d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/MementoTests.java", "commitBeforeChange": "487518d242da0a7f63289dd927851dff16ea9f7a", "commitAfterChange": "050a9c6e48eb0f6afd9130b84b06f0bc9eaab8cf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected String getEscapedExternalJCLPath()", "signatureAfterChange": " protected String getEscapedExternalJCLPath()", "diff": ["-\tString path = getExternalJCLPath().toString();", "+\treturn getEscapedPath(getExternalJCLPath().toString());", "+}"]}], "num": 47742}
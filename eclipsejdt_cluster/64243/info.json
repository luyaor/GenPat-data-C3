{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "77aecd404c1f1d91673ad2163af8b65f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4856c618864adc5b03347ab9531ceda1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractComparisonTest.java", "commitBeforeChange": "fa16fc80b475f974c3040ef90f01075968f51405", "commitAfterChange": "9528b13b60b5267a27dfdeac3b8ea9a804476535", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprotected void runJavac(String[] testFiles, final String expectedProblemLog)", "signatureAfterChange": " \tprotected void runJavac(String[] testFiles, final String expectedProblemLog, final String expectedSuccessOutputString, boolean shouldFlushOutputDirectory)", "diff": ["-\tprotected void runJavac(String[] testFiles, final String expectedProblemLog) {", "+\tprotected void runJavac(String[] testFiles, final String expectedProblemLog, final String expectedSuccessOutputString, boolean shouldFlushOutputDirectory) {", "+\t\t\tif (shouldFlushOutputDirectory)", "+\t\t\t\tcleanupDirectory(new File(JAVAC_OUTPUT_DIR));", "+", "-\t\t\t", "+", "-\t\t\tProcess process = null;", "+\t\t\tProcess compileProcess = null;", "+\t\t\tProcess execProcess = null;", "-\t\t\t\tString[] classpath = getDefaultClassPaths();", "+\t\t\t\tString[] classpath = Util.concatWithClassLibs(JAVAC_OUTPUT_DIR, false);", "+\t\t\t\tcp.append(\" -classpath .;\"); // start with the current directory which contains the source files", "-\t\t\t\tcmdLine.append(\" -classpath \");", "+\t\t\t\tcmdLine.append(\" -d \");", "+\t\t\t\tcmdLine.append(JAVAC_OUTPUT_DIR.indexOf(\" \") != -1 ? \"\\\"\" + JAVAC_OUTPUT_DIR + \"\\\"\" : JAVAC_OUTPUT_DIR);", "-\t\t\t\tprocess = Runtime.getRuntime().exec(cmdLine.toString(), null, this.dirPath.toFile());", "+\t\t\t\tcompileProcess = Runtime.getRuntime().exec(cmdLine.toString(), null, this.dirPath.toFile());", "-\t            Logger errorLogger = new Logger(process.getErrorStream(), \"ERROR\");            ", "-\t            ", "+\t            Logger errorLogger = new Logger(compileProcess.getErrorStream(), \"ERROR\");            ", "+", "-\t            Logger outputLogger = new Logger(process.getInputStream(), \"OUTPUT\");", "-\t                ", "+\t            Logger outputLogger = new Logger(compileProcess.getInputStream(), \"OUTPUT\");", "+", "-\t\t\t\tint exitValue = process.waitFor();", "+\t\t\t\tint exitValue = compileProcess.waitFor();", "-\t\t\t\t\t}", "-\t\t\t\t\telse if (errorLogger.buffer.length() > 0) {", "+\t\t\t\t\t} else if (errorLogger.buffer.length() > 0) {", "+\t\t\t\t\t} else if (expectedSuccessOutputString != null) {", "+\t\t\t\t\t\t// Compute command line", "+\t\t\t\t\t\tIPath javaPath = jdkDir.append(\"bin\").append(\"java.exe\");", "+\t\t\t\t\t\tStringBuffer javaCmdLine = new StringBuffer(javaPath.toString());", "+\t\t\t\t\t\tjavaCmdLine.append(cp);", "+\t\t\t\t\t\t// assume executable class is name of first test file", "+\t\t\t\t\t\tjavaCmdLine.append(' ').append(testFiles[0].substring(0, testFiles[0].indexOf('.')));", "+\t\t\t\t\t\texecProcess = Runtime.getRuntime().exec(javaCmdLine.toString(), null, this.dirPath.toFile());", "+\t\t\t\t\t\tLogger logger = new Logger(execProcess.getInputStream(), \"OUTPUT\");", "+\t\t\t\t\t\tlogger.start();", "+", "+\t\t\t\t\t\texitValue = execProcess.waitFor();", "+\t\t\t\t\t\tString javaOutput = logger.buffer.toString().trim();", "+\t\t\t\t\t\tif (!expectedSuccessOutputString.equals(javaOutput)) {", "+\t\t\t\t\t\t\tSystem.out.println(\"========================================\");", "+\t\t\t\t\t\t\tSystem.out.println(testName+\": runtime results don't match:\");", "+\t\t\t\t\t\t\tSystem.out.println(expectedSuccessOutputString);", "+\t\t\t\t\t\t\tSystem.out.println(javaOutput);", "+\t\t\t\t\t\t\tSystem.out.println(\"\\n\");", "+\t\t\t\t\t\t\tprintFiles(testFiles);", "+\t\t\t\t\t\t}", "-\t\t\t\tif (process != null) process.destroy();", "+\t\t\t\tif (compileProcess != null) compileProcess.destroy();", "+\t\t\t\tif (execProcess != null) execProcess.destroy();", "-", "+\t\t} catch (Exception e) {", "+\t\t\te.printStackTrace();", "+\t\t} finally {", "-\t\t} catch (Exception e) {", "-\t\t\te.printStackTrace();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba84835c0eedbd4ef60758f5e330f990", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ExternalFoldersManager.java", "commitBeforeChange": "d7f649048f20a2b7da85ffb34af89adc6b577de1", "commitAfterChange": "e84db8d4c6681c452df342e0bb55c2450eb0a239", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate IFolder createLinkFolder(IPath externalFolderPath, boolean refreshIfExistAlready, \t\t\t\t\t\t\t\t\tIProject externalFoldersProject, IProgressMonitor monitor) throws CoreException", "signatureAfterChange": "  \tprivate IFolder createLinkFolder(IPath externalFolderPath, boolean refreshIfExistAlready, \t\t\t\t\t\t\t\t\tIProject externalFoldersProject, IProgressMonitor monitor) throws CoreException", "diff": ["-\t\tif (!result.exists())", "-\t\t\tresult.createLink(externalFolderPath, IResource.ALLOW_MISSING_LOCAL, monitor);", "-\t\telse if (refreshIfExistAlready)", "-\t\t\tresult.refreshLocal(IResource.DEPTH_INFINITE,  monitor);", "+\t\ttry {", "+\t\t\tif (!result.exists())", "+\t\t\t\tresult.createLink(externalFolderPath, IResource.ALLOW_MISSING_LOCAL, monitor);", "+\t\t\telse if (refreshIfExistAlready)", "+\t\t\t\tresult.refreshLocal(IResource.DEPTH_INFINITE,  monitor);", "+\t\t}", "+\t\tcatch(IllegalArgumentException e) {", "+\t\t\tif (System.getProperty(\"jdt.bug.367669\") != null) { //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"============================================================================================================\"); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"The following logs are created for troubleshooting bug: https://bugs.eclipse.org/bugs/show_bug.cgi?id=367669\"); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"Exteral folder: \" + externalFolderPath); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"Link folder: \" + result.toString()); //$NON-NLS-1$", "+\t\t\t\tFile externalFile = new File(externalFolderPath.toOSString());", "+\t\t\t\tSystem.out.println(externalFile.exists() ? \"External folder exists\" : \"ERROR: External folder DOES NOT exist\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tSystem.out.println(result.exists() ? \"Link for folder exists\" : \"ERROR: Link for folder does not exist\");  //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\tIProject externalFolderProject = getExternalFoldersProject();", "+\t\t\t\tIFile externalProjectFile = externalFolderProject.getFile(IProjectDescription.DESCRIPTION_FILE_NAME);", "+\t\t\t\tif (externalProjectFile.exists()) {", "+\t\t\t\t\tSystem.out.println(\"External Folder Project exists with following content:\"); //$NON-NLS-1$", "+\t\t\t\t\tBufferedInputStream bs = new BufferedInputStream(externalProjectFile.getContents());", "+\t\t\t\t\tint available = 0;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\twhile ((available = bs.available()) > 0) {", "+\t\t\t\t\t\t\tbyte[] contents = new byte[available];", "+\t\t\t\t\t\t\tbs.read(contents);", "+\t\t\t\t\t\t\tSystem.out.println(new String(contents));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbs.close();", "+\t\t\t\t\t} catch (IOException e1) {", "+\t\t\t\t\t\tSystem.out.println(\"Error reading external folder project file: Here is the stack trace:\"); //$NON-NLS-1$", "+\t\t\t\t\t\te1.printStackTrace();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\telse {", "+\t\t\t\t\tSystem.out.println(\"ERROR: External folders project doesn't exist.\"); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tSystem.out.println(\"========================================== Debug information ends ==========================================\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tthrow e;", "+\t\t}"]}], "num": 64243}
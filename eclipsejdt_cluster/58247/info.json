{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21a778270f8aeaa3f1a4fe56aeb2151b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9eaa1bb7d0d6b26967c852e369456368", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "signatureAfterChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "diff": ["-\t\t\tthis.requestor.acceptMethod(", "-\t\t\t\tmethod.declaringClass.qualifiedPackageName(),", "-\t\t\t\tmethod.declaringClass.qualifiedSourceName(),", "-\t\t\t\tmethod.selector,", "-\t\t\t\tparameterPackageNames,", "-\t\t\t\tparameterTypeNames,", "-\t\t\t\tparameterNames,", "-\t\t\t\tmethod.returnType.qualifiedPackageName(),", "-\t\t\t\tmethod.returnType.qualifiedSourceName(),", "-\t\t\t\tcompletion,", "-\t\t\t\tmethod.modifiers,", "-\t\t\t\tthis.startPosition - this.offset,", "-\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\trelevance);", "+\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_REF, this.actualCompletionPosition);", "+\t\t\t\tproposal.setDeclarationSignature(getSignature(method.declaringClass));", "+\t\t\t\tproposal.setSignature(getSignature(method));", "+\t\t\t\tproposal.setDeclarationPackageName(method.declaringClass.qualifiedPackageName());", "+\t\t\t\tproposal.setDeclarationTypeName(method.declaringClass.qualifiedSourceName());", "+\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\tproposal.setPackageName(method.returnType.qualifiedPackageName());", "+\t\t\t\tproposal.setTypeName(method.returnType.qualifiedSourceName());", "+\t\t\t\tproposal.setName(method.selector);", "+\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\tproposal.setFlags(method.modifiers);", "+\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "+\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\tif(DEBUG) {", "+\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf446f79264f68fc341c04097ebf9fc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate void findExplicitConstructors( \t\tchar[] name, \t\tReferenceBinding currentType, \t\tMethodScope scope, \t\tInvocationSite invocationSite)", "signatureAfterChange": "  \tprivate void findExplicitConstructors( \t\tchar[] name, \t\tReferenceBinding currentType, \t\tMethodScope scope, \t\tInvocationSite invocationSite)", "diff": ["-\t\t\t\t\tthis.requestor.acceptMethod(", "-\t\t\t\t\t\tcurrentType.qualifiedPackageName(),", "-\t\t\t\t\t\tcurrentType.qualifiedSourceName(),", "-\t\t\t\t\t\tname,", "-\t\t\t\t\t\tparameterPackageNames,", "-\t\t\t\t\t\tparameterTypeNames,", "-\t\t\t\t\t\tparameterNames,", "-\t\t\t\t\t\tCharOperation.NO_CHAR,", "-\t\t\t\t\t\tCharOperation.NO_CHAR,", "-\t\t\t\t\t\tcompletion,", "-\t\t\t\t\t\tconstructor.modifiers,", "-\t\t\t\t\t\tthis.startPosition - this.offset,", "-\t\t\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\t\t\trelevance);", "+\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(currentType));", "+\t\t\t\t\t\tproposal.setSignature(getSignature(constructor));", "+\t\t\t\t\t\tproposal.setDeclarationPackageName(currentType.qualifiedPackageName());", "+\t\t\t\t\t\tproposal.setDeclarationTypeName(currentType.qualifiedSourceName());", "+\t\t\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\t\t\t//proposal.setPackageName(null);", "+\t\t\t\t\t\t//proposal.setTypeName(null);", "+\t\t\t\t\t\tproposal.setName(name);", "+\t\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\t\tproposal.setFlags(constructor.modifiers);", "+\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "+\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa64700d7b998fe9347ffd636fd7b07d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tprivate void findLocalMethodDeclarations( \t\tchar[] methodName, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType)", "signatureAfterChange": " \tprivate void findLocalMethodDeclarations( \t\tchar[] methodName, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType)", "diff": ["-\t\t\tthis.requestor.acceptMethodDeclaration(", "-\t\t\t\tmethod.declaringClass.qualifiedPackageName(),", "-\t\t\t\tmethod.declaringClass.qualifiedSourceName(),", "-\t\t\t\tmethod.selector,", "-\t\t\t\tparameterPackageNames,", "-\t\t\t\tparameterTypeNames,", "-\t\t\t\tparameterNames,", "-\t\t\t\tmethod.returnType.qualifiedPackageName(),", "-\t\t\t\tmethod.returnType.qualifiedSourceName(),", "-\t\t\t\tcompletion.toString().toCharArray(),", "-\t\t\t\tmethod.modifiers,", "-\t\t\t\tthis.startPosition - this.offset,", "-\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\trelevance);", "+\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_DECLARATION)) {", "+\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_DECLARATION, this.actualCompletionPosition);", "+\t\t\t\tproposal.setDeclarationSignature(getSignature(method.declaringClass));", "+\t\t\t\tproposal.setSignature(getSignature(method));", "+\t\t\t\tproposal.setDeclarationPackageName(method.declaringClass.qualifiedPackageName());", "+\t\t\t\tproposal.setDeclarationTypeName(method.declaringClass.qualifiedSourceName());", "+\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\tproposal.setPackageName(method.returnType.qualifiedPackageName());", "+\t\t\t\tproposal.setTypeName(method.returnType.qualifiedSourceName());", "+\t\t\t\tproposal.setCompletion(completion.toString().toCharArray());", "+\t\t\t\tproposal.setName(method.selector);", "+\t\t\t\tproposal.setFlags(method.modifiers);", "+\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "+\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\tif(DEBUG) {", "+\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 58247}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "abf2bf195e4607fa0823b0cb29a57f41", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a786b048b9ccc1ff722dd11cc5c2311", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["+\tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess) {", "+\t\t// if field from parameterized type got found, use the original field at codegen time", "+\t\tif (this.binding instanceof ParameterizedFieldBinding) {", "+\t\t    ParameterizedFieldBinding parameterizedField = (ParameterizedFieldBinding) this.binding;", "+\t\t    this.codegenBinding = parameterizedField.originalField;", "+\t\t    FieldBinding fieldCodegenBinding = (FieldBinding)this.codegenBinding;", "+\t\t    // extra cast needed if field type was type variable", "+\t\t    if ((fieldCodegenBinding.type.tagBits & TagBits.HasTypeVariable) != 0) {", "+\t\t        this.genericCast = fieldCodegenBinding.type.genericCast(parameterizedField.type);", "+\t\t    }", "+\t\t}\t\t", "+\t\t\t\t\t\t\t&& fieldBinding.declaringClass.getPackage() != currentScope.enclosingSourceType().getPackage()))) {", "+\t\t\t\tsyntheticAccessors[isReadAccess ? READ : WRITE] = ", "+\t\t\t\t    ((SourceTypeBinding)currentScope.enclosingSourceType().", "+\t\t\t\t\t\tenclosingTypeAt((bits & DepthMASK) >> DepthSHIFT)).addSyntheticMethod((FieldBinding) this.codegenBinding, isReadAccess);", "+\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess((FieldBinding)this.codegenBinding, this, isReadAccess);", "-\t}", "-\tpublic void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo) {", "-\t", "-\t\tif (!flowInfo.isReachable()) return;", "-\t\tif ((bits & FIELD) != 0) {", "-\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "-\t\t\tif (((bits & DepthMASK) != 0) ", "-\t\t\t\t&& (fieldBinding.isPrivate() // private access", "-\t\t\t\t\t|| (fieldBinding.isProtected() // implicit protected access", "-\t\t\t\t\t\t\t&& fieldBinding.declaringClass.getPackage() ", "-\t\t\t\t\t\t\t\t!= currentScope.enclosingSourceType().getPackage()))) {", "-\t\t\t\tif (syntheticAccessors == null)", "-\t\t\t\t\tsyntheticAccessors = new MethodBinding[2];", "-\t\t\t\tsyntheticAccessors[WRITE] = ", "-\t\t\t\t\t((SourceTypeBinding)currentScope.enclosingSourceType().", "-\t\t\t\t\t\tenclosingTypeAt((bits & DepthMASK) >> DepthSHIFT)).", "-\t\t\t\t\t\t\taddSyntheticMethod(fieldBinding, false);", "-\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldWriteAccess(fieldBinding, this);", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\t// if the binding declaring class is not visible, need special action", "-\t\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "-\t\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\t\t// and not from Object or implicit static field access.\t", "-\t\t\tif (fieldBinding.declaringClass != this.actualReceiverType", "-\t\t\t\t&& !this.actualReceiverType.isArrayType()\t", "-\t\t\t\t&& fieldBinding.declaringClass != null", "-\t\t\t\t&& fieldBinding.constant == NotAConstant", "-\t\t\t\t&& ((currentScope.environment().options.targetJDK >= ClassFileConstants.JDK1_2 ", "-\t\t\t\t\t\t&& !fieldBinding.isStatic()", "-\t\t\t\t\t\t&& fieldBinding.declaringClass.id != T_Object) // no change for Object fields (if there was any)", "-\t\t\t\t\t|| !fieldBinding.declaringClass.canBeSeenBy(currentScope))){", "-\t\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)this.actualReceiverType);", "+\t\t\t\tthis.codegenBinding = ", "+\t\t\t\t    currentScope.enclosingSourceType().getUpdatedFieldBinding(", "+\t\t\t\t\t        (FieldBinding) this.codegenBinding, ", "+\t\t\t\t\t        (ReferenceBinding)this.actualReceiverType.erasure());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c06b679bd0c0b30527f2bb1feaa751e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaExpression.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \t@Override \tpublic boolean isAnnotation() throws JavaModelException", "signatureAfterChange": " \t \tpublic boolean equals(Object o)", "diff": ["+\t", "+\tpublic boolean equals(Object o) {", "+\t\tif (this == o)", "+\t\t\treturn true;", "+\t\t/* I see cases where equal lambdas are dismissed as unequal on account of working copy owner.", "+\t\t   This results in spurious failures. See JavaSearchBugs8Tests.testBug400905_0021()", "+\t\t   For now exclude the working copy owner and compare", "+\t\t*/", "+\t\tif (o instanceof LambdaExpression) {", "+\t\t\tLambdaExpression that = (LambdaExpression) o;", "+\t\t\tif (this.sourceStart != that.sourceStart)", "+\t\t\t\treturn false;", "+\t\t\tCompilationUnit thisCU = (CompilationUnit) this.getCompilationUnit();", "+\t\t\tCompilationUnit thatCU = (CompilationUnit) that.getCompilationUnit();", "+\t\t\treturn thisCU.getElementName().equals(thatCU.getElementName()) && thisCU.parent.equals(thatCU.parent);", "+\t\t}", "-", "-\t@Override", "-\tpublic boolean isAnnotation() throws JavaModelException {", "-\t\treturn false;", "-\t}"]}], "num": 55891}
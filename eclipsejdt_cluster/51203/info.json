{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae7604564abfe34fb7daad7a1ec32512", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05de15240c9e9d931d556d4628cca892", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "8e257a3aaf425ec95693dbfcce4a3e04f63a99fd", "commitAfterChange": "b4bc0528b8236ab3f6100faade4f9f0cb79aaa89", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": " public void test0140()", "signatureAfterChange": " public void test0140()", "diff": ["+public void test0140(){", "-public void test0140(){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45f8c281ed20bbbcd9772051df185f98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 340, "methodNumberAfterChange": 340, "signatureBeforeChange": " \tpublic void test336()", "signatureAfterChange": " \tpublic void test336()", "diff": ["-\t\t\t\"2. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tpublic <Type> Type myMethod(Object obj, Class type) {\\n\" + ", "+\t\t\t\"\t                                        ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic static <Type> Type myStaticMethod(Object obj, Class type) {\\n\" + ", "+\t\t\t\"\t                                                     ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\t\"\treturn new MyClass().myMethod(this, IMyInterface.class);\\n\" + ", "+\t\t\t\"\t           ^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: MyClass is a raw type. References to generic type MyClass<Type> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 17)\\n\" + ", "+\t\t\t\"\treturn MyClass.myStaticMethod(this, IMyInterface.class);\\n\" + ", "+\t\t\t\"\t       ^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: MyClass is a raw type. References to generic type MyClass<Type> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a7a23d236bc39a3d2d8666849254d9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "4043b8a88c35a2c1612858cff67743727f25247b", "commitAfterChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void _testMultipleWildcardUnboundStringPattern07() throws CoreException", "signatureAfterChange": " \tpublic void testSinglePatternSimpleName07() throws CoreException", "diff": ["+\t}", "+\tpublic void testSinglePatternSimpleName07() throws CoreException {", "+\t\tIJavaSearchScope scope = getJavaSearchScope15(\"g1.t\", true /* add all subpackages */);", "+\t\tsearch(\"Generic.MemberGeneric\", TYPE, REFERENCES, scope, resultCollector);", "+\t\tassertSearchResults(", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [Generic<Object, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [Generic<Object, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [Generic<?, ?, ?>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [Generic<Object>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic<Exception>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [Generic<Object>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [Generic<Exception>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [Generic<?>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [Generic<? extends Throwable>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic<? super RuntimeException>.MemberGeneric] EXACT_MATCH\",", "+\t\t\tresultCollector);", "+\t}", "-\t// although there's only one per class in the member type hierarchy...", "-\tpublic void _testMultipleWildcardUnboundStringPattern07() throws CoreException {", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [MemberGeneric<Object, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric<Exception, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric<? extends Throwable, ? extends Exception, ? extends RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [MemberGeneric<Object, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric<Exception, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric<? extends Throwable, ? extends Exception, ? extends RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic.MemberGeneric] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "762c67cb4eca32fb75a8ad8eb2bf8b58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "8f5b67bd80ff7e72bd80828779ffdbdb5bad5276", "commitAfterChange": "50d8267275b181894c19c15246b42f9711f997ad", "methodNumberBeforeChange": 339, "methodNumberAfterChange": 339, "signatureBeforeChange": " public void test293_warn_options()", "signatureAfterChange": " public void test293_warn_options()", "diff": ["-// -warn option - regression tests to check option suppressAssertNull", "+// since includeAssertNull is not enabled", "-\t\t+ \" -warn:null,suppressAssertNull -1.5 -proc:none -d \\\"\" + OUTPUT_DIR + \"\\\"\",", "+\t\t+ \" -warn:null,includeAssertNull -1.5 -proc:none -d \\\"\" + OUTPUT_DIR + \"\\\"\",", "-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 10)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 4)\\n\" + ", "+\t\t\"\tif (a!=null) {\\n\" + ", "+\t\t\"\t    ^\\n\" + ", "+\t\t\"Null comparison always yields false: The variable a can only be null at this location\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 10)\\n\" + ", "-\t\t\"1 problem (1 warning)\",", "+\t\t\"3. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 12)\\n\" + ", "+\t\t\"\tif (b!=null) {\\n\" + ", "+\t\t\"\t    ^\\n\" + ", "+\t\t\"Redundant null check: The variable b cannot be null at this location\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 18)\\n\" + ", "+\t\t\"\tif (c.equals(a)) {\\n\" + ", "+\t\t\"\t    ^\\n\" +  ", "+\t\t\"Null pointer access: The variable c can only be null at this location\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4 problems (4 warnings)\", "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a34982cf0f7782a7bbec1aaf3d0d3b11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "f4a4e733ec9a6ee8e5480938f7f746aa2704ad0d", "commitAfterChange": "f775b73fdbd5c38023656e438f9ccb262941721f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void test0019()", "signatureAfterChange": " public void test0019()", "diff": ["-\t\t\"3. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tZ<Y1, Y2> var;\\n\" + ", "+\t\t\"\t  ^^\\n\" + ", "+\t\t\"Y1 cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tZ<Y1, Y2> var;\\n\" + ", "+\t\t\"\t      ^^\\n\" + ", "+\t\t\"Y2 cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tZ<Y1, Y2> var;\\n\" + ", "+\t\t\"\t  ^^\\n\" + ", "+\t\t\"Y1 cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tZ<Y1, Y2> var;\\n\" + ", "+\t\t\"\t      ^^\\n\" + ", "+\t\t\"Y2 cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 3)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef0de9d7326cfd42fd58f0df01f431fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "258488aa3b2262f0e872853fc9eb6924859897e3", "commitAfterChange": "f1b24eaca7583818fb45648b70a2b62fb1ff278d", "methodNumberBeforeChange": 175, "methodNumberAfterChange": 175, "signatureBeforeChange": " public void _test170()", "signatureAfterChange": " public void test170()", "diff": ["-public void _test170() {", "-\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\", // =================", "-\t\t\t\t\"public enum X {\\n\" + ", "-\t\t\t\t\"\tMonday(\\\"Mon\\\", X.OFFSET + 0),\\n\" + ", "-\t\t\t\t\"\tTuesday(\\\"Tue\\\", X.OFFSET + 1);\\n\" + ", "-\t\t\t\t\"\tpublic static final int OFFSET = 0;\\n\" + ", "-\t\t\t\t\"\tX(String abbr, int index) {}\\n\" + ", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\t\t\"\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\", // =================", "-\t\t\t},", "-\t\t\t\"SUCCESS\");", "+public void test170() {", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\", // =================", "+\t\t\t\"enum Days {\\n\" + ", "+\t\t\t\"    Monday(\\\"Mon\\\", Days.OFFSET + 0),    // should not complain\\n\" + ", "+\t\t\t\"    Tuesday(\\\"Tue\\\", Days.Wednesday.hashCode()),   // should complain since enum constant\\n\" + ", "+\t\t\t\"    Wednesday(\\\"Wed\\\", OFFSET + 2);   // should complain since unqualified\\n\" + ", "+\t\t\t\"    public static final int OFFSET = 0;  // cannot move this above, else more errors\\n\" + ", "+\t\t\t\"    Days(String abbr, int index) {\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"class X {\\n\" + ", "+\t\t\t\"    public static final int FOO = X.OFFSET + 0;\\n\" + ", "+\t\t\t\"    public static final int BAR = OFFSET + 1;\\n\" + ", "+\t\t\t\"    public static final int OFFSET = 0;  // cannot move this above, else more errors\\n\" + ", "+\t\t\t\"}\\n\", // =================", "+\t\t},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\"\tTuesday(\\\"Tue\\\", Days.Wednesday.hashCode()),   // should complain since enum constant\\n\" + ", "+\t\t\"\t                    ^^^^^^^^^\\n\" + ", "+\t\t\"Cannot reference a field before it is defined\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tWednesday(\\\"Wed\\\", OFFSET + 2);   // should complain since unqualified\\n\" + ", "+\t\t\"\t                 ^^^^^^\\n\" + ", "+\t\t\"Cannot reference a field before it is defined\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\"\tpublic static final int BAR = OFFSET + 1;\\n\" + ", "+\t\t\"\t                              ^^^^^^\\n\" + ", "+\t\t\"Cannot reference a field before it is defined\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0cb507828f8e4601acdb7b2fa534ae9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 652, "methodNumberAfterChange": 652, "signatureBeforeChange": " \tpublic void test648()", "signatureAfterChange": " \tpublic void test648()", "diff": ["+\t        \"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tOuter.Inner inner = new Sub().get();\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Outer.Inner is a raw type. References to generic type Outer<T>.Inner<U> should be parameterized\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tclass Sub extends Outer {\\n\" + ", "+\t\t\t\"\t                  ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Outer is a raw type. References to generic type Outer<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tInner get() { return null; }\\n\" + ", "+\t\t\t\"\t^^^^^\\n\" + ", "+\t\t\t\"Type safety: Outer.Inner is a raw type. References to generic type Outer<T>.Inner<U> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc8ceec522e75e20c54d3e503e3d83ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "d5a32e245b27c645dcf70347396d7253765682d3", "commitAfterChange": "562bd70d52b78a80d9ea0f036f9a91cfb91468db", "methodNumberBeforeChange": 494, "methodNumberAfterChange": 494, "signatureBeforeChange": " public void testBug325342b()", "signatureAfterChange": " public void testBug325342b()", "diff": ["-\t\t\t\"2. ERROR in Test.java (at line 10)\\n\" + ", "+\t\t\t\"2. WARNING in Test.java (at line 4)\\n\" + ", "+\t\t\t\"\tif (a!=null) {\\n\" + ", "+\t\t\t\"\t\t\tSystem.out.println(\\\"a is not null\\\");\\n\" + ", "+\t\t\t\"\t\t } else{\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Dead code\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in Test.java (at line 10)\\n\" + ", "-\t\t\t\"3. ERROR in Test.java (at line 16)\\n\" + ", "+\t\t\t\"4. WARNING in Test.java (at line 12)\\n\" + ", "+\t\t\t\"\t} else{\\n\" + ", "+\t\t\t\"\t\t\tSystem.out.println(\\\"a is null\\\");\\n\" + ", "+\t\t\t\"\t\t }\\n\" + ", "+\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Dead code\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in Test.java (at line 16)\\n\" + "]}], "num": 51203}
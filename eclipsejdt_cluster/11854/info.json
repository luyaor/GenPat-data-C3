{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a284f6aea97d589f72ae37cbdad02a8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a713e91b66c9023a34eb4226a6e3127", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "a9567e58ade978b67e4f2db4ee5fe35bc3c0d3fe", "commitAfterChange": "0b6f06d77f121375ae3494c8c329aad2cfc0a1a4", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "  private void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding)", "signatureAfterChange": "  private void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding, ITypeAnnotationWalker externalAnnotationWalker)", "diff": ["-private void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding) {", "+private void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding, ITypeAnnotationWalker externalAnnotationWalker) {", "-\tIBinaryAnnotation[] annotations = method.getAnnotations();", "+\tITypeAnnotationWalker returnWalker = externalAnnotationWalker.toMethodReturn();", "+\tIBinaryAnnotation[] annotations = returnWalker != ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER", "+\t\t\t\t\t\t\t\t? returnWalker.getAnnotationsAtCursor(methodBinding.returnType.id)", "+\t\t\t\t\t\t\t\t: method.getAnnotations();", "-\tint numParamAnnotations = method.getAnnotatedParametersCount();", "+\tint numParamAnnotations = externalAnnotationWalker instanceof IMethodAnnotationWalker", "+\t\t\t\t\t\t\t? ((IMethodAnnotationWalker) externalAnnotationWalker).getParameterCount()", "+\t\t\t\t\t\t\t: method.getAnnotatedParametersCount();", "-\t\t\t\tIBinaryAnnotation[] paramAnnotations = method.getParameterAnnotations(j+startIndex);", "+\t\t\t\tITypeAnnotationWalker parameterWalker = externalAnnotationWalker.toMethodParameter((short) (j+startIndex));", "+\t\t\t\tIBinaryAnnotation[] paramAnnotations = parameterWalker != ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? parameterWalker.getAnnotationsAtCursor(parameters[j].id)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: method.getParameterAnnotations(j+startIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcd1a0fa9ad69dc9b1571ce949f65fff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "00c42145a98af76c17f15294be6170e6defe1ae9", "commitAfterChange": "ff9b5fb6d6cce662b372282e8b20522e1f33d740", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  private boolean isWorthBuilding() throws CoreException", "signatureAfterChange": "  private boolean isWorthBuilding() throws CoreException", "diff": ["+\t// except for projects involved in a 'warning' cycle (see below)", "+\t\t\t// The prereq project has no build state: if this project has a 'warning' cycle marker and the prereq project is involved in the cycle", "+\t\t\t// then allow build (see http://bugs.eclipse.org/bugs/show_bug.cgi?id=23357)", "+\t\t\tJavaProject jProject = (JavaProject)this.javaProject;", "+\t\t\tIMarker cycleMarker = jProject.getCycleMarker();", "+\t\t\tif (cycleMarker != null && ((Integer)cycleMarker.getAttribute(IMarker.SEVERITY)).intValue() == IMarker.SEVERITY_WARNING) {", "+\t\t\t\tHashSet cycleParticipants = new HashSet();", "+\t\t\t\tjProject.updateCycleParticipants(null, new ArrayList(), cycleParticipants, ResourcesPlugin.getWorkspace().getRoot());", "+\t\t\t\tif (cycleParticipants.contains(JavaCore.create(p))) {", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 11854}
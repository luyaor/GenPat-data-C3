{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "92391dbdd1bc6b8852c39d11b6b3c389", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02730626b1b10d44a495e8c358e8ff0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "e58f2038b180bd18be0d01efd245c2dfe6cd7c52", "commitAfterChange": "d5b7a7df240100471f0f4fc25ca0d59acd7e1502", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \t\r \tpublic static CompilationUnitDeclaration parse(char[] source)", "signatureAfterChange": "\r \t\r \tpublic static CompilationUnitDeclaration parse(char[] source)", "diff": ["-\t\treturn parser.parse(sourceUnit, new CompilationResult(sourceUnit, 0, 0));\r", "+\t\tCompilationUnitDeclaration compilationUnitDeclaration = parser.dietParse(sourceUnit, new CompilationResult(sourceUnit, 0, 0));\r", "+\t\t\r", "+\t\tif (compilationUnitDeclaration.ignoreMethodBodies) {\r", "+\t\t\tcompilationUnitDeclaration.ignoreFurtherInvestigation = true;\r", "+\t\t\t// if initial diet parse did not work, no need to dig into method bodies.\r", "+\t\t\treturn compilationUnitDeclaration; \r", "+\t\t}\r", "+\t\t\r", "+\t\t//fill the methods bodies in order for the code to be generated\r", "+\t\t//real parse of the method....\r", "+\t\tparser.scanner.setSourceBuffer(source);\r", "+\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types = compilationUnitDeclaration.types;\r", "+\t\tif (types != null) {\r", "+\t\t\tfor (int i = types.length; --i >= 0;)\r", "+\t\t\t\ttypes[i].parseMethod(parser, compilationUnitDeclaration);\r", "+\t\t}\r", "+\t\treturn compilationUnitDeclaration;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6c7f96548b6cdf3aa557b35ce4d56a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "5a0b16973c5f2b4b1beccfae3f83602332ac3f5d", "commitAfterChange": "4ee57f1aa920ef9dfc0c8991087575befcec8304", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic static CompilationUnitDeclaration parse( \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\t\tNodeSearcher nodeSearcher, \t\t\tMap settings, \t\t\tint flags)", "signatureAfterChange": "  \tpublic static CompilationUnitDeclaration parse( \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\t\tNodeSearcher nodeSearcher, \t\t\tMap settings, \t\t\tint flags)", "diff": ["+\t\tcompilerOptions.ignoreMethodBodies = (flags & ICompilationUnit.IGNORE_METHOD_BODIES) != 0;", "-\t\t\t//fill the methods bodies in order for the code to be generated", "-\t\t\t//real parse of the method....", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types = compilationUnitDeclaration.types;", "-\t\t\tif (types != null) {", "-\t\t\t\tfor (int i = 0, length = types.length; i < length; i++)", "-\t\t\t\t\ttypes[i].parseMethods(parser, compilationUnitDeclaration);", "-\t\t\t}", "+\t\t\t\t//fill the methods bodies in order for the code to be generated", "+\t\t\t\t//real parse of the method....\t\t\t", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types = compilationUnitDeclaration.types;", "+\t\t\t\tif (types != null) {", "+\t\t\t\t\tfor (int j = 0, typeLength = types.length; j < typeLength; j++) {", "+\t\t\t\t\t\ttypes[j].parseMethods(parser, compilationUnitDeclaration);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 55624}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "61037dc3250d73da80da51a400568142", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b2b5b84059090b4a72ddf410b5b4729", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AttachSourceTests.java", "commitBeforeChange": "d7f649048f20a2b7da85ffb34af89adc6b577de1", "commitAfterChange": "e84db8d4c6681c452df342e0bb55c2450eb0a239", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void testExternalFolder5() throws Exception", "signatureAfterChange": " public void testExternalFolder5() throws Exception", "diff": ["-\t\ttry {", "-\t\t\tjavaProject = createJavaProject(\"P\", new String[0], new String[] {externalLib}, \"\");", "-\t\t}", "-\t\tcatch (Exception e) {", "-\t\t\tIFolder folder = getFolder(externalLib);", "-\t\t\tSystem.out.println(\"----------  This information is logged for debugging purposes as this test fails sporadically.---------\");", "-\t\t\tSystem.out.println(\"Failing when creating Link folder for: \" + externalFolder);", "-\t\t\tSystem.out.println(\"Existing? \" + folder.exists());", "-\t\t\tIProject externalFolderProject = JavaModelManager.getExternalManager().getExternalFoldersProject();", "-\t\t\tIFile externalProjectFile = externalFolderProject.getFile(\".project\");", "-\t\t\tif (externalProjectFile.exists()) {", "-\t\t\t\tSystem.out.println(\"External Folder Project exists with following content:\");", "-\t\t\t\tBufferedInputStream bs = new BufferedInputStream(externalProjectFile.getContents());", "-\t\t\t\tint available = 0;", "-\t\t\t\twhile ((available = bs.available()) > 0) {", "-\t\t\t\t\tbyte[] contents = new byte[available];", "-\t\t\t\t\tbs.read(contents);", "-\t\t\t\t\tSystem.out.println(new String(contents));", "-\t\t\t\t}", "-\t\t\t\tbs.close();", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\tSystem.out.println(\"External folders project doesn't exist.\");", "-\t\t\t}", "-\t\t\tSystem.out.println(\"----------  Debug information ends ---------\");", "-\t\t\tthrow e;", "-\t\t}", "+\t\tjavaProject = createJavaProject(\"P\", new String[0], new String[] {externalLib}, \"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3da2785a587bcc2dcc14671841a89967", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/APIDocumentationTests.java", "commitBeforeChange": "9892e22e3cda97844e8704bc9ff3072e4e043b62", "commitAfterChange": "fe412add93d4cfbb83d610f46ca1de0e6d064ca7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void test001() throws CoreException, IllegalArgumentException, IllegalAccessException, IOException", "signatureAfterChange": " public void testJavaCoreAPI() throws CoreException, IllegalArgumentException, IllegalAccessException, IOException", "diff": ["-public void test001() throws CoreException, IllegalArgumentException, IllegalAccessException, IOException {", "+public void testJavaCoreAPI() throws CoreException, IllegalArgumentException, IllegalAccessException, IOException {", "+", "+", "+\t// 1. attempt: workspace relative location in project org.eclipse.jdt.core:", "-System.err.println(\"Bundle URL = \"+url);", "-System.err.println(\"Bundle path = \"+path);", "-\tpath = path.removeLastSegments(1).append(\"org.eclipse.jdt.core\");", "-System.err.println(\"jdt.core path = \"+path);", "-\tString stringPath = path.toString() + \"/model/org/eclipse/jdt/core/JavaCore.java\"; ", "+\tpath = path.removeLastSegments(1).append(ORG_ECLIPSE_JDT_CORE);", "+\tString stringPath = path.toString() + \"/model/\" + PATH_JAVA_CORE_JAVA; ", "-System.err.println(\"JavaCore.java = \"+javaCoreSourceFile+\" exists? \"+javaCoreSourceFile.exists());", "-\t\tsourceChars = org.eclipse.jdt.internal.compiler.util.Util.getFileCharContent(javaCoreSourceFile, null);", "+\t\tsourceChars = Util.getFileCharContent(javaCoreSourceFile, null);", "-\t\t// experimental Q&D tweak: try to find the source bundle by manipulating the file name of the regular bundle's location:", "-\t\t@SuppressWarnings(\"deprecation\")Bundle[] sourceBundles = org.eclipse.jdt.core.tests.Activator.getPackageAdmin().getBundles(\"org.eclipse.jdt.core\", null);", "+\t\t// 2. attempt: locate org.eclipse.jdt.core.source jar next to org.eclipse.jdt.core jar:", "+\t\t@SuppressWarnings(\"deprecation\")Bundle[] sourceBundles =", "+\t\t\t\torg.eclipse.jdt.core.tests.Activator.getPackageAdmin().getBundles(ORG_ECLIPSE_JDT_CORE, null);", "-System.err.println(\"Source Bundle = \"+bundle);", "-System.err.println(\"Bundle Location = \"+stringPath);", "-\t\t\tif (stringPath.startsWith(\"reference:file:\"))", "-\t\t\t\tstringPath = stringPath.substring(\"reference:file:\".length());", "-\t\t\tstringPath = stringPath.replace(\"org.eclipse.jdt.core\", \"org.eclipse.jdt.core.source\");", "-System.err.println(\"Source Bundle Location = \"+stringPath);", "+\t\t\tif (stringPath.startsWith(REFERENCE_FILE_SCHEMA))", "+\t\t\t\tstringPath = stringPath.substring(REFERENCE_FILE_SCHEMA.length());", "+\t\t\tstringPath = stringPath.replace(ORG_ECLIPSE_JDT_CORE, ORG_ECLIPSE_JDT_CORE_SOURCE);", "-System.err.println(\"Jar File = \"+jarFile+\" exists? \"+jarFile.exists());", "-\t\t\t\t\tZipEntry entry = zipFile.getEntry(\"org/eclipse/jdt/core/JavaCore.java\");", "-System.err.println(\"Zip Entry = \"+entry);", "-System.err.println(\"Zip Entry Size = \"+entry.getSize());", "+\t\t\t\t\tZipEntry entry = zipFile.getEntry(PATH_JAVA_CORE_JAVA);", "-\t\t\t\t\t\tsourceChars = org.eclipse.jdt.internal.compiler.util.Util.getInputStreamAsCharArray(inputStream, (int)entry.getSize(), null);", "+\t\t\t\t\t\tsourceChars = Util.getInputStreamAsCharArray(inputStream, (int)entry.getSize(), null);", "+\t"]}], "num": 67286}
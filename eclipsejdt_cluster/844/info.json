{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68b38fcffe4f3a999f741f209260040f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e21216d69c7d5e1e000be4cd91e122c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "signatureAfterChange": " public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "diff": ["-", "-\t\t\t&& ((operator == PLUS) || (operator == MULTIPLY)) // only commutative operations", "-\t\t\t&& ((variableReference = (SingleNameReference) operation.right).binding == this.binding)", "-\t\t\t&& (operation.left.constant != Constant.NotAConstant) // exclude non constant expressions, since could have side-effect", "-\t\t\t&& (((operation.left.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_JavaLangString) // exclude string concatenation which would occur backwards", "-\t\t\t&& (((operation.right.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_JavaLangString)) { // exclude string concatenation which would occur backwards", "+\t\t\t\t&& ((operator == PLUS) || (operator == MULTIPLY)) // only commutative operations", "+\t\t\t\t&& ((variableReference = (SingleNameReference) operation.right).binding == this.binding)", "+\t\t\t\t&& (operation.left.constant != Constant.NotAConstant) // exclude non constant expressions, since could have side-effect", "+\t\t\t\t&& (((operation.left.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_JavaLangString) // exclude string concatenation which would occur backwards", "+\t\t\t\t&& (((operation.right.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_JavaLangString)) { // exclude string concatenation which would occur backwards", "-\t\t\tFieldBinding fieldBinding = (FieldBinding) this.codegenBinding;", "-\t\t\tif (fieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "-\t\t\t\tif (!fieldBinding.isStatic()) { // need a receiver?", "+\t\t\tFieldBinding codegenField = ((FieldBinding) this.binding).original();", "+\t\t\tif (codegenField.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "+\t\t\t\tif (!codegenField.isStatic()) { // need a receiver?", "-\t\t\t\tfieldStore(codeStream, fieldBinding, null, valueRequired);", "+\t\t\t\tfieldStore(currentScope, codeStream, codegenField, null, this.actualReceiverType, this.delegateThis == null /*implicit this*/, valueRequired);", "-\t\t\t\tcodeStream.generateEmulationForField(fieldBinding);", "-\t\t\t\tif (!fieldBinding.isStatic()) { // need a receiver?", "+\t\t\t\tcodeStream.generateEmulationForField(codegenField);", "+\t\t\t\tif (!codegenField.isStatic()) { // need a receiver?", "-\t\t\t\t\tif ((fieldBinding.type == TypeBinding.LONG) || (fieldBinding.type == TypeBinding.DOUBLE)) {", "+\t\t\t\t\tif ((codegenField.type == TypeBinding.LONG) || (codegenField.type == TypeBinding.DOUBLE)) {", "-\t\t\t\tcodeStream.generateEmulatedWriteAccessForField(fieldBinding);", "+\t\t\t\tcodeStream.generateEmulatedWriteAccessForField(codegenField);", "-\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.codegenBinding;", "+\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.binding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f90eea69e876470c87bca7c9af6c7a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "c986b0f978be08ca5c6279c4e65ad1a7f4c62b60", "commitAfterChange": "be7acf5c57ef3c4a15433f3f4f0191da4eed3774", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\t  \tpublic void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "signatureAfterChange": "\t  \tpublic void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "diff": ["+\t\t\tint operator = (operation.bits & OperatorMASK) >> OperatorSHIFT;", "-\t\t\t\tvariableReference.generateCompoundAssignment(currentScope, codeStream, syntheticAccessors == null ? null : syntheticAccessors[WRITE], operation.right, (operation.bits & OperatorMASK) >> OperatorSHIFT, operation.implicitConversion, valueRequired);", "+\t\t\t\tvariableReference.generateCompoundAssignment(currentScope, codeStream, syntheticAccessors == null ? null : syntheticAccessors[WRITE], operation.right, operator, operation.implicitConversion, valueRequired);", "+\t\t\t\tif (valueRequired) {", "+\t\t\t\t\tcodeStream.generateImplicitConversion(assignment.implicitConversion);", "+\t\t\t\t}\t\t\t\t", "-\t\t\t}", "-\t\t\tint operator = (operation.bits & OperatorMASK) >> OperatorSHIFT;", "+\t\t\t} ", "-\t\t\t\t&& ((operator == PLUS) || (operator == MULTIPLY)) // only commutative operations", "-\t\t\t\t&& ((variableReference = (SingleNameReference) operation.right).binding == binding)", "-\t\t\t\t&& (operation.left.constant != NotAConstant) // exclude non constant expressions, since could have side-effect", "-\t\t\t\t&& (((operation.left.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_JavaLangString) // exclude string concatenation which would occur backwards", "-\t\t\t\t&& (((operation.right.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_JavaLangString)) { // exclude string concatenation which would occur backwards", "+\t\t\t\t\t&& ((operator == PLUS) || (operator == MULTIPLY)) // only commutative operations", "+\t\t\t\t\t&& ((variableReference = (SingleNameReference) operation.right).binding == binding)", "+\t\t\t\t\t&& (operation.left.constant != NotAConstant) // exclude non constant expressions, since could have side-effect", "+\t\t\t\t\t&& (((operation.left.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_JavaLangString) // exclude string concatenation which would occur backwards", "+\t\t\t\t\t&& (((operation.right.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_JavaLangString)) { // exclude string concatenation which would occur backwards", "+\t\t\t\tif (valueRequired) {", "+\t\t\t\t\tcodeStream.generateImplicitConversion(assignment.implicitConversion);", "+\t\t\t\t}\t\t\t\t"]}], "num": 844}
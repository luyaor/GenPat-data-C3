{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "81b4a9e7bd5ef9c49ba09cab73ce95a9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b528a449a33e10aece71c08d0fc8dfb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "d7e7bb059880a6c87ea3290708d2d0a9f9e7ebe8", "commitAfterChange": "a415220ad0bdc743d286b40ccc481ededfe8132e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void computeConstant(BlockScope scope, int leftId, int rightId)", "signatureAfterChange": "  \tpublic void computeConstant(BlockScope scope, int leftId, int rightId)", "diff": ["-\t\tif ((left.constant != Constant.NotAConstant)", "-\t\t\t&& (right.constant != Constant.NotAConstant)) {", "+\t\tif ((this.left.constant != Constant.NotAConstant)", "+\t\t\t&& (this.right.constant != Constant.NotAConstant)) {", "-\t\t\t\tconstant =", "+\t\t\t\tthis.constant =", "-\t\t\t\t\t\tleft.constant,", "+\t\t\t\t\t\tthis.left.constant,", "-\t\t\t\t\t\t(bits & OperatorMASK) >> OperatorSHIFT,", "-\t\t\t\t\t\tright.constant,", "+\t\t\t\t\t\t(this.bits & OperatorMASK) >> OperatorSHIFT,", "+\t\t\t\t\t\tthis.right.constant,", "-\t\t\t\tconstant = Constant.NotAConstant;", "+\t\t\t\tthis.constant = Constant.NotAConstant;", "-\t\t\tconstant = Constant.NotAConstant;", "+\t\t\tthis.constant = Constant.NotAConstant;", "-\t\t\toptimizedBooleanConstant(", "+\t\t\tthis.optimizedBooleanConstant(", "-\t\t\t\t(bits & OperatorMASK) >> OperatorSHIFT,", "+\t\t\t\t(this.bits & OperatorMASK) >> OperatorSHIFT,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4553f088dc217359efca6e27f0a77baa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "signatureAfterChange": " public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "diff": ["-\t\tif ((operation.left instanceof SingleNameReference) && ((variableReference = (SingleNameReference) operation.left).binding == binding)) {", "+\t\tif ((operation.left instanceof SingleNameReference) && ((variableReference = (SingleNameReference) operation.left).binding == this.binding)) {", "-\t\t\tvariableReference.generateCompoundAssignment(currentScope, codeStream, syntheticAccessors == null ? null : syntheticAccessors[WRITE], operation.right, (operation.bits & OperatorMASK) >> OperatorSHIFT, operation.left.implicitConversion /*should be equivalent to no conversion*/, valueRequired);", "+\t\t\tvariableReference.generateCompoundAssignment(currentScope, codeStream, this.syntheticAccessors == null ? null : this.syntheticAccessors[WRITE], operation.right, (operation.bits & OperatorMASK) >> OperatorSHIFT, operation.left.implicitConversion /*should be equivalent to no conversion*/, valueRequired);", "-\t\t\t&& ((variableReference = (SingleNameReference) operation.right).binding == binding)", "+\t\t\t&& ((variableReference = (SingleNameReference) operation.right).binding == this.binding)", "-\t\t\tvariableReference.generateCompoundAssignment(currentScope, codeStream, syntheticAccessors == null ? null : syntheticAccessors[WRITE], operation.left, operator, operation.right.implicitConversion /*should be equivalent to no conversion*/, valueRequired);", "+\t\t\tvariableReference.generateCompoundAssignment(currentScope, codeStream, this.syntheticAccessors == null ? null : this.syntheticAccessors[WRITE], operation.left, operator, operation.right.implicitConversion /*should be equivalent to no conversion*/, valueRequired);", "-\tswitch (bits & RestrictiveFlagMASK) {", "+\tswitch (this.bits & RestrictiveFlagMASK) {", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "+\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "+\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((this.bits & DepthMASK) >> DepthSHIFT);", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "-\t\t\tif ((bits & FirstAssignmentToLocalMASK) != 0) { // for local variable debug attributes", "+\t\t\tif ((this.bits & FirstAssignmentToLocalMASK) != 0) { // for local variable debug attributes"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4da11b1c3e0b42d2dec579d8f58a217a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "4e0e44e12d531b0f9a299237d2e668d6176cd234", "commitAfterChange": "2156fedddc9b679afe1f45ef1e9d318ac4df4d9a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope)", "signatureAfterChange": " \t \tprivate TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope)", "diff": ["-\t\tTypeBinding[] argumentTypes = Binding.NO_PARAMETERS;", "+\t\tthis.argumentTypes = Binding.NO_PARAMETERS;", "-\t\t\targumentTypes = new TypeBinding[length];", "+\t\t\tthis.argumentTypes = new TypeBinding[length];", "-\t\t\t\tif ((argumentTypes[i] = argument.resolveType(scope)) == null){", "+\t\t\t\tif ((this.argumentTypes[i] = argument.resolveType(scope)) == null){", "-\t\t\t\t\t\tpseudoArgs[i] = argumentTypes[i] == null ? TypeBinding.NULL : argumentTypes[i]; // replace args with errors with null type", "+\t\t\t\t\t\tpseudoArgs[i] = this.argumentTypes[i] == null ? TypeBinding.NULL : this.argumentTypes[i]; // replace args with errors with null type", "-\t\t\t\tTypeBinding [] inferredTypes = inferElidedTypes((ParameterizedTypeBinding) receiverType, receiverType.enclosingType(), argumentTypes, scope);", "+\t\t\t\tTypeBinding [] inferredTypes = inferElidedTypes((ParameterizedTypeBinding) receiverType, receiverType.enclosingType(), this.argumentTypes, scope);", "-\t\t\tthis.binding = findConstructorBinding(scope, this, allocationType, argumentTypes);", "+\t\t\tthis.binding = findConstructorBinding(scope, this, allocationType, this.argumentTypes);", "-\t\t\t\tif (checkInvocationArguments(scope, null, allocationType, this.binding, this.arguments, argumentTypes, argsContainCast, this)) {", "+\t\t\t\tif (checkInvocationArguments(scope, null, allocationType, this.binding, this.arguments, this.argumentTypes, argsContainCast, this)) {", "-\t\t \t\tcheckTypeArgumentRedundancy((ParameterizedTypeBinding)receiverType, receiverType.enclosingType(), argumentTypes , scope);", "+\t\t \t\tcheckTypeArgumentRedundancy((ParameterizedTypeBinding)receiverType, receiverType.enclosingType(), this.argumentTypes , scope);", "-\t\tMethodBinding inheritedBinding = findConstructorBinding(scope, this, anonymousSuperclass, argumentTypes);", "+\t\tMethodBinding inheritedBinding = findConstructorBinding(scope, this, anonymousSuperclass, this.argumentTypes);", "-\t\t\tif (checkInvocationArguments(scope, null, anonymousSuperclass, inheritedBinding, this.arguments, argumentTypes, argsContainCast, this)) {", "+\t\t\tif (checkInvocationArguments(scope, null, anonymousSuperclass, inheritedBinding, this.arguments, this.argumentTypes, argsContainCast, this)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9897f5039bec4f682f0a83c51b0e7766", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "4e0e44e12d531b0f9a299237d2e668d6176cd234", "commitAfterChange": "2156fedddc9b679afe1f45ef1e9d318ac4df4d9a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tboolean receiverCast = false, argsContainCast = false;", "+\tboolean receiverCast = false;", "-\tboolean receiverIsType = this.receiver instanceof NameReference && (((NameReference) this.receiver).bits & Binding.TYPE) != 0;", "+\tthis.receiverIsType = this.receiver instanceof NameReference && (((NameReference) this.receiver).bits & Binding.TYPE) != 0;", "-\tTypeBinding[] argumentTypes = Binding.NO_PARAMETERS;", "-\t\targumentTypes = new TypeBinding[length];", "+\t\tthis.argumentTypes = new TypeBinding[length];", "-\t\t\t\targsContainCast = true;", "+\t\t\t\tthis.argsContainCast = true;", "-\t\t\tif ((argumentTypes[i] = argument.resolveType(scope)) == null){", "+\t\t\tif ((this.argumentTypes[i] = argument.resolveType(scope)) == null){", "-\t\t\t\t\tpseudoArgs[i] = argumentTypes[i] == null ? TypeBinding.NULL : argumentTypes[i]; // replace args with errors with null type", "+\t\t\t\t\tpseudoArgs[i] = this.argumentTypes[i] == null ? TypeBinding.NULL : this.argumentTypes[i]; // replace args with errors with null type", "-\t\tscope.problemReporter().errorNoMethodFor(this, this.actualReceiverType, argumentTypes);", "+\t\tscope.problemReporter().errorNoMethodFor(this, this.actualReceiverType, this.argumentTypes);", "-\tfindMethodBinding(scope, argumentTypes);", "+\tfindMethodBinding(scope);", "-\t\t\t\tscope.problemReporter().errorNoMethodFor(this, this.actualReceiverType, argumentTypes);", "+\t\t\t\tscope.problemReporter().errorNoMethodFor(this, this.actualReceiverType, this.argumentTypes);", "-\t\tif (receiverIsType) {", "+\t\tif (this.receiverIsType) {", "-\t\tif (!(this.receiver.isImplicitThis() || this.receiver.isSuper() || receiverIsType)) {", "+\t\tif (!(this.receiver.isImplicitThis() || this.receiver.isSuper() || this.receiverIsType)) {", "-\tif (checkInvocationArguments(scope, this.receiver, this.actualReceiverType, this.binding, this.arguments, argumentTypes, argsContainCast, this)) {", "+\tif (checkInvocationArguments(scope, this.receiver, this.actualReceiverType, this.binding, this.arguments, this.argumentTypes, this.argsContainCast, this)) {", "-\t\tscope.checkAppropriateMethodAgainstSupers(this.selector, this.binding, argumentTypes, this);", "+\t\tscope.checkAppropriateMethodAgainstSupers(this.selector, this.binding, this.argumentTypes, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d05ac598a68603cd2b2114295b6334f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\tif (constant != NotAConstant) {", "+\tif (this.constant != NotAConstant) {", "-\t\t\tcodeStream.generateConstant(constant, implicitConversion);", "+\t\t\tcodeStream.generateConstant(this.constant, this.implicitConversion);", "-\t\tswitch (bits & RestrictiveFlagMASK) {", "+\t\tswitch (this.bits & RestrictiveFlagMASK) {", "-\t\t\t\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "+\t\t\t\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "+\t\t\t\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((this.bits & DepthMASK) >> DepthSHIFT);", "-\t\t\t\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "-\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\t\t\t\tcodeStream.generateConstant(fieldBinding.constant, implicitConversion);", "+\t\t\t\t\t\tcodeStream.generateConstant(fieldBinding.constant, this.implicitConversion);", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "-\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);"]}], "num": 6779}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df97d72ebd720472ce9c9cb1d0ea559b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3901df16d6840135f3b9cc2118e3b0b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public BinaryTypeBinding createBinaryTypeFrom(IBinaryType binaryType, PackageBinding packageBinding, boolean needFieldsAndMethods, AccessRestriction accessRestriction)", "signatureAfterChange": " public BinaryTypeBinding createBinaryTypeFrom(IBinaryType binaryType, PackageBinding packageBinding, boolean needFieldsAndMethods, AccessRestriction accessRestriction)", "diff": ["-\tif (cachedType != null) {", "+\tif (cachedType != null) { // update reference to unresolved binding after having read classfile (knows whether generic for raw conversion)", "+\t\t// TODO (kent) suspect the check below is no longer required, since we should not be requesting a binary which is already in the cache", "-", "-\t\t((UnresolvedReferenceBinding) cachedType).setResolvedType(binaryBinding, this);", "+\t\tthis.updateCaches((UnresolvedReferenceBinding)cachedType, binaryBinding);", "-", "+\tif (cachedType != null) { // update reference to unresolved binding after having read classfile (knows whether generic for raw conversion)", "+\t\t((UnresolvedReferenceBinding) cachedType).setResolvedType(binaryBinding, this);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c6728a194bd125048380a977e93b686", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "6376828719de1b35fb16828dd60ac530e949608a", "commitAfterChange": "2a2667223f1903b9c183c60ab8e7003c7b66502a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public BinaryTypeBinding createBinaryTypeFrom(IBinaryType binaryType, PackageBinding packageBinding, boolean needFieldsAndMethods, AccessRestriction accessRestriction)", "signatureAfterChange": " public BinaryTypeBinding createBinaryTypeFrom(IBinaryType binaryType, PackageBinding packageBinding, boolean needFieldsAndMethods, AccessRestriction accessRestriction)", "diff": ["-\t\tthis.updateCaches((UnresolvedReferenceBinding)cachedType, binaryBinding);", "+", "+\t\t((UnresolvedReferenceBinding) cachedType).setResolvedType(binaryBinding, this);", "+", "-\tif (cachedType != null) { // update reference to unresolved binding after having read classfile (knows whether generic for raw conversion)", "-\t\t((UnresolvedReferenceBinding) cachedType).setResolvedType(binaryBinding, this);", "-\t}"]}], "num": 11271}
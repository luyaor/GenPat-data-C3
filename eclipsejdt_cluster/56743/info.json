{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24088d63c7a8436487741eac96acac25", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2562113970d256ad31b45b2c7228311d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "afcefcc52a6e235f9ed640317727929d84135cf0", "commitAfterChange": "5ce294a787e58643d5e8115fe2ddfea119e53aa2", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " private void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " private void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\t\t\tstaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo).setReachMode(flowInfo.reachMode()));  // reset reach mode in case initializers did abrupt completely", "+\t\t\t\t\t\tstaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo));", "-\t\t\t\t\tmethod.analyseCode(this.scope, initializerContext, constructorInfo.copy().setReachMode(flowInfo.reachMode())); // reset reach mode in case initializers did abrupt completely", "-\t\t\t\t\tif (method.needFreeReturn) {", "-\t\t\t\t\t\tmethod.needFreeReturn = (constructorInfo.tagBits & FlowInfo.UNREACHABLE) == 0;", "-\t\t\t\t\t}", "+\t\t\t\t\t((ConstructorDeclaration)method).analyseCode(this.scope, initializerContext, constructorInfo.copy(), flowInfo.reachMode());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d66d5be3960e5ac9b5148b7a6ca32fb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " \tpublic void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\t\t}", "+\t\t\t\t\t} ", "-\t\t\t\t\tmemberTypes[i].analyseCode(scope, flowContext, nonStaticFieldInfo.copy());", "+\t\t\t\t\tmemberTypes[i].analyseCode(scope, flowContext, nonStaticFieldInfo.copy().setReachMode(flowInfo.reachMode())); // reset reach mode in case initializers did abrupt completely", "-\t\t\t\t\t\t\tstaticInitializerContext, ", "-\t\t\t\t\t\t\tstaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo));", "+\t\t\t\t\t\t\tstaticInitializerContext,  ", "+\t\t\t\t\t\t\tstaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo).setReachMode(flowInfo.reachMode()));  // reset reach mode in case initializers did abrupt completely", "-\t\t\t\t\t\tmethod.analyseCode(scope, initializerContext, constructorInfo.copy());", "+\t\t\t\t\t\tmethod.analyseCode(scope, initializerContext, constructorInfo.copy().setReachMode(flowInfo.reachMode())); // reset reach mode in case initializers did abrupt completely"]}], "num": 56743}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f65691625189ad4d42ac4210a3a3f03f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b273d8c83ff5b7f0e7c9e612ffce1824", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "4592203a9ca4f535a7eed609203c10be25594830", "commitAfterChange": "dd8acd32bb2cfc259d17de73e694d3edd149f2a2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \tpublic void select(\r \t\tICompilationUnit sourceUnit,\r \t\tint selectionSourceStart,\r \t\tint selectionSourceEnd)", "signatureAfterChange": "\r \tpublic void select(\r \t\tICompilationUnit sourceUnit,\r \t\tint selectionSourceStart,\r \t\tint selectionSourceEnd)", "diff": ["-\t\t\t\t\t\t\tif (!acceptedAnswer)\r", "-\t\t\t\t\t\t\t\tnameEnvironment.findTypes(selectedIdentifier, this);\r", "-\t\t\t\t\t\t\t// try with simple type name\r", "+\t\t\t\t\t\t\t// accept qualified types only if no unqualified type was accepted\r", "+\t\t\t\t\t\t\tif(!acceptedAnswer) {\r", "+\t\t\t\t\t\t\t\tacceptQualifiedTypes();\r", "+\t\t\t\t\t\t\t\tif (!acceptedAnswer) {\r", "+\t\t\t\t\t\t\t\t\tnameEnvironment.findTypes(selectedIdentifier, this);\r", "+\t\t\t\t\t\t\t\t\t// try with simple type name\r", "+\t\t\t\t\t\t\t\t\tif(!acceptedAnswer) {\r", "+\t\t\t\t\t\t\t\t\t\tacceptQualifiedTypes();\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ceddb96e5ff7f86a91196de213f285db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaSearchTests.java", "commitBeforeChange": "7d7a110acd7fb43dd9a0120381db3995104a56b1", "commitAfterChange": "c7a7e4e108b0e3c57db4a9ecb9572c48f5ebfb8b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t\tprotected void writeLine() throws CoreException", "signatureAfterChange": " \t\tprotected void writeLine() throws CoreException", "diff": ["+\t\t\t\tif (this.showAccess) {", "+\t\t\t\t\tif (match instanceof FieldReferenceMatch) {", "+\t\t\t\t\t\tFieldReferenceMatch fieldRef = (FieldReferenceMatch) match;", "+\t\t\t\t\t\tif (fieldRef.isReadAccess()) {", "+\t\t\t\t\t\t\tline.append(\" READ\");", "+\t\t\t\t\t\t\tif (fieldRef.isWriteAccess()) line.append(\"/WRITE\");", "+\t\t\t\t\t\t\tline.append(\" ACCESS\");", "+\t\t\t\t\t\t} else if (fieldRef.isWriteAccess()) {", "+\t\t\t\t\t\t\tline.append(\" WRITE ACCESS\");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (match instanceof LocalVariableReferenceMatch) {", "+\t\t\t\t\t\tLocalVariableReferenceMatch variableRef = (LocalVariableReferenceMatch) match;", "+\t\t\t\t\t\tif (variableRef.isReadAccess()) {", "+\t\t\t\t\t\t\tline.append(\" READ\");", "+\t\t\t\t\t\t\tif (variableRef.isWriteAccess()) line.append(\"/WRITE\");", "+\t\t\t\t\t\t\tline.append(\" ACCESS\");", "+\t\t\t\t\t\t} else if (variableRef.isWriteAccess()) {", "+\t\t\t\t\t\t\tline.append(\" WRITE ACCESS\");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 27612}
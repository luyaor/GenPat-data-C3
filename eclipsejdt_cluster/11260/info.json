{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3bf5f3748e7725e5df886e04e4abecbe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39883053418fdccb8e46628c26744058", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic static SearchPattern createPattern(IJavaElement element, int limitTo, int matchRule)", "signatureAfterChange": " \tpublic static SearchPattern createPattern(IJavaElement element, int limitTo, int matchRule)", "diff": ["-\t\t\t\t\tif (CharOperation.indexOf(Signature.C_GENERIC_START, signature) < 0) {", "-\t\t\t\t\t\ttypeSignature = null;", "-\t\t\t\t\t}", "+\t\t\t\t// Create field pattern", "+\t\t\t\tboolean findDeclarations = false;", "+\t\t\t\tboolean readAccess = false;", "+\t\t\t\tboolean writeAccess = false;", "-\t\t\t\t\t\tsearchPattern = ", "-\t\t\t\t\t\t\tnew FieldPattern(", "-\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\tname, ", "-\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\t\t\t\ttypeSignature,", "-\t\t\t\t\t\t\t\tmatchRule);", "+\t\t\t\t\t\tfindDeclarations = true;", "-\t\t\t\t\t\tsearchPattern = ", "-\t\t\t\t\t\t\tnew FieldPattern(", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\ttrue, // read access", "-\t\t\t\t\t\t\t\ttrue, // write access", "-\t\t\t\t\t\t\t\tname, ", "-\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\t\t\t\ttypeSignature,", "-\t\t\t\t\t\t\t\tmatchRule);", "+\t\t\t\t\t\treadAccess = true;", "+\t\t\t\t\t\twriteAccess = true;", "-\t\t\t\t\t\tsearchPattern = ", "-\t\t\t\t\t\t\tnew FieldPattern(", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\ttrue, // read access only", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\tname, ", "-\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\t\t\t\ttypeSignature,", "-\t\t\t\t\t\t\t\tmatchRule);", "+\t\t\t\t\t\treadAccess = true;", "-\t\t\t\t\t\tsearchPattern = ", "-\t\t\t\t\t\t\tnew FieldPattern(", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\ttrue, // write access only", "-\t\t\t\t\t\t\t\tname, ", "-\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\t\t\t\ttypeSignature,", "-\t\t\t\t\t\t\t\tmatchRule);", "+\t\t\t\t\t\twriteAccess = true;", "-\t\t\t\t\t\tsearchPattern =", "-\t\t\t\t\t\t\tnew FieldPattern(", "-\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\ttrue, // read access", "-\t\t\t\t\t\t\t\ttrue, // write access", "-\t\t\t\t\t\t\t\tname, ", "-\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\t\t\t\ttypeSignature,", "-\t\t\t\t\t\t\t\tmatchRule);", "+\t\t\t\t\t\tfindDeclarations = true;", "+\t\t\t\t\t\treadAccess = true;", "+\t\t\t\t\t\twriteAccess = true;", "+\t\t\t\tsearchPattern = ", "+\t\t\t\t\tnew FieldPattern(", "+\t\t\t\t\t\tfindDeclarations,", "+\t\t\t\t\t\treadAccess,", "+\t\t\t\t\t\twriteAccess,", "+\t\t\t\t\t\tname, ", "+\t\t\t\t\t\tdeclaringQualification, ", "+\t\t\t\t\t\tdeclaringSimpleName, ", "+\t\t\t\t\t\ttypeQualification, ", "+\t\t\t\t\t\ttypeSimpleName,", "+\t\t\t\t\t\ttypeSignature,", "+\t\t\t\t\t\tmatchRule);", "-\t\t\t\t\t\t\tfalse, // does not need signature", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\tString returnSignature;", "-\t\t\t\t\tString returnType = Signature.toString(method.getReturnType()).replace('$', '.');", "-\t\t\t\t\tif ((lastDot = returnType.lastIndexOf('.')) == -1) {", "-\t\t\t\t\t\treturnSimpleName = returnType.toCharArray();", "+\t\t\t\t\treturnSignature = method.getReturnType();", "+\t\t\t\t\tchar[] signature = returnSignature.toCharArray();", "+\t\t\t\t\tchar[] returnErasure = Signature.toCharArray(Signature.getTypeErasure(signature));", "+\t\t\t\t\tCharOperation.replace(returnErasure, '$', '.');", "+\t\t\t\t\tif ((lastDot = CharOperation.lastIndexOf('.', returnErasure)) == -1) {", "+\t\t\t\t\t\treturnSimpleName = returnErasure;", "-\t\t\t\t\t\treturnSimpleName = returnType.substring(lastDot + 1).toCharArray();", "-\t\t\t\t\t\treturnQualification = method.isBinary()", "-\t\t\t\t\t\t\t? returnType.substring(0, lastDot).toCharArray()", "+\t\t\t\t\t\treturnSimpleName = CharOperation.subarray(returnErasure, lastDot + 1, returnErasure.length);", "+\t\t\t\t\t\treturnQualification = CharOperation.subarray(returnErasure, 0, lastDot);", "+\t\t\t\t\t\tif (!method.isBinary()) {", "-\t\t\t\t\t\t\t: CharOperation.concat(IIndexConstants.ONE_STAR, returnType.substring(0, lastDot).toCharArray());", "+\t\t\t\t\t\t\tCharOperation.concat(IIndexConstants.ONE_STAR, returnQualification);", "+\t\t\t\t\t\t}", "+\t\t\t\tString[] parameterSignatures = new String[paramCount];", "-\t\t\t\t\tString signature = Signature.toString(parameterTypes[i]).replace('$', '.');", "-\t\t\t\t\tif ((lastDot = signature.lastIndexOf('.')) == -1) {", "-\t\t\t\t\t\tparameterSimpleNames[i] = signature.toCharArray();", "+\t\t\t\t\tparameterSignatures[i] = parameterTypes[i];", "+\t\t\t\t\tchar[] signature = parameterSignatures[i].toCharArray();", "+\t\t\t\t\tchar[] paramErasure = Signature.toCharArray(Signature.getTypeErasure(signature));", "+\t\t\t\t\tCharOperation.replace(paramErasure, '$', '.');", "+\t\t\t\t\tif ((lastDot = CharOperation.lastIndexOf('.', paramErasure)) == -1) {", "+\t\t\t\t\t\tparameterSimpleNames[i] = paramErasure;", "-\t\t\t\t\t\tparameterSimpleNames[i] = signature.substring(lastDot + 1).toCharArray();", "-\t\t\t\t\t\tparameterQualifications[i] = method.isBinary()", "-\t\t\t\t\t\t\t? signature.substring(0, lastDot).toCharArray()", "+\t\t\t\t\t\tparameterSimpleNames[i] = CharOperation.subarray(paramErasure, lastDot + 1, paramErasure.length);", "+\t\t\t\t\t\tparameterQualifications[i] = CharOperation.subarray(paramErasure, 0, lastDot);", "+\t\t\t\t\t\tif (!method.isBinary()) {", "-\t\t\t\t\t\t\t: CharOperation.concat(IIndexConstants.ONE_STAR, signature.substring(0, lastDot).toCharArray());", "+\t\t\t\t\t\t\tCharOperation.concat(IIndexConstants.ONE_STAR, parameterQualifications[i]);", "+\t\t\t\t\t\t}", "+", "+\t\t\t\t// Create method/constructor pattern", "+\t\t\t\tboolean findMethodDeclarations = true;", "+\t\t\t\tboolean findMethodReferences = true;", "-\t\t\t\t\t\tif (isConstructor) {", "-\t\t\t\t\t\t\tsearchPattern = ", "-\t\t\t\t\t\t\t\tnew ConstructorPattern(", "-\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\t\tparameterQualifications, ", "-\t\t\t\t\t\t\t\t\tparameterSimpleNames,", "-\t\t\t\t\t\t\t\t\tvarargs,", "-\t\t\t\t\t\t\t\t\tmatchRule);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tsearchPattern = ", "-\t\t\t\t\t\t\t\tnew MethodPattern(", "-\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\tselector, ", "-\t\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\t\treturnQualification, ", "-\t\t\t\t\t\t\t\t\treturnSimpleName, ", "-\t\t\t\t\t\t\t\t\tparameterQualifications, ", "-\t\t\t\t\t\t\t\t\tparameterSimpleNames,", "-\t\t\t\t\t\t\t\t\tvarargs,", "-\t\t\t\t\t\t\t\t\tnull,", "-\t\t\t\t\t\t\t\t\tmatchRule);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tfindMethodReferences = false;", "-\t\t\t\t\t\tif (isConstructor) {", "-\t\t\t\t\t\t\tsearchPattern = ", "-\t\t\t\t\t\t\t\tnew ConstructorPattern(", "-\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\t\tparameterQualifications, ", "-\t\t\t\t\t\t\t\t\tparameterSimpleNames,", "-\t\t\t\t\t\t\t\t\tvarargs,", "-\t\t\t\t\t\t\t\t\tmatchRule);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tsearchPattern = ", "-\t\t\t\t\t\t\t\tnew MethodPattern(", "-\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\tselector, ", "-\t\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\t\treturnQualification, ", "-\t\t\t\t\t\t\t\t\treturnSimpleName, ", "-\t\t\t\t\t\t\t\t\tparameterQualifications, ", "-\t\t\t\t\t\t\t\t\tparameterSimpleNames,", "-\t\t\t\t\t\t\t\t\tvarargs,", "-\t\t\t\t\t\t\t\t\tmethod.getDeclaringType(),", "-\t\t\t\t\t\t\t\t\tmatchRule);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tfindMethodDeclarations = false;", "-\t\t\t\t\t\tif (isConstructor) {", "-\t\t\t\t\t\t\tsearchPattern =", "-\t\t\t\t\t\t\t\tnew ConstructorPattern(", "-\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\t\tparameterQualifications, ", "-\t\t\t\t\t\t\t\t\tparameterSimpleNames,", "-\t\t\t\t\t\t\t\t\tvarargs,", "-\t\t\t\t\t\t\t\t\tmatchRule);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tsearchPattern =", "-\t\t\t\t\t\t\t\tnew MethodPattern(", "-\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\tselector, ", "-\t\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\t\treturnQualification, ", "-\t\t\t\t\t\t\t\t\treturnSimpleName, ", "-\t\t\t\t\t\t\t\t\tparameterQualifications, ", "-\t\t\t\t\t\t\t\t\tparameterSimpleNames,", "-\t\t\t\t\t\t\t\t\tvarargs,", "-\t\t\t\t\t\t\t\t\tmethod.getDeclaringType(),", "-\t\t\t\t\t\t\t\t\tmatchRule);", "-\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (isConstructor) {", "+\t\t\t\t\tsearchPattern =", "+\t\t\t\t\t\tnew ConstructorPattern(", "+\t\t\t\t\t\t\tfindMethodDeclarations,", "+\t\t\t\t\t\t\tfindMethodReferences,", "+\t\t\t\t\t\t\tdeclaringSimpleName, ", "+\t\t\t\t\t\t\tdeclaringQualification, ", "+\t\t\t\t\t\t\tparameterQualifications, ", "+\t\t\t\t\t\t\tparameterSimpleNames,", "+\t\t\t\t\t\t\tparameterSignatures,", "+\t\t\t\t\t\t\tmethod,", "+\t\t\t\t\t\t\tvarargs,", "+\t\t\t\t\t\t\tmatchRule);", "+\t\t\t\t} else {", "+\t\t\t\t\tsearchPattern =", "+\t\t\t\t\t\tnew MethodPattern(", "+\t\t\t\t\t\t\tfindMethodDeclarations,", "+\t\t\t\t\t\t\tfindMethodReferences,", "+\t\t\t\t\t\t\tselector, ", "+\t\t\t\t\t\t\tdeclaringQualification, ", "+\t\t\t\t\t\t\tdeclaringSimpleName, ", "+\t\t\t\t\t\t\treturnQualification, ", "+\t\t\t\t\t\t\treturnSimpleName, ", "+\t\t\t\t\t\t\treturnSignature,", "+\t\t\t\t\t\t\tparameterQualifications, ", "+\t\t\t\t\t\t\tparameterSimpleNames,", "+\t\t\t\t\t\t\tparameterSignatures,", "+\t\t\t\t\t\t\tvarargs,", "+\t\t\t\t\t\t\tmethod,", "+\t\t\t\t\t\t\tmatchRule);", "-\t\t\t\tString signature = type instanceof ParameterizedSourceType ? ((ParameterizedSourceType) type).uniqueKey : null;", "-\t\t\t\t\t\t\ttrue, // need signature", "-\t\t\t\t\t\t\tsignature,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\ttype,", "-\t\t\t\tif (searchPattern == null) { // TODO (frederic) remove when new API IType.getParameterizedName() will be available", "-\t\t\t\t\tsearchPattern = new TypeReferencePattern(", "-\t\t\t\t\t\tCharOperation.concatWith(type.getPackageFragment().getElementName().toCharArray(), enclosingTypeNames(type), '.'), ", "-\t\t\t\t\t\ttype.getElementName().toCharArray(),", "-\t\t\t\t\t\ttype,", "-\t\t\t\t\t\tmatchRule);", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "806fc051bfc9bf57758ae511264c3e87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "49c7e567a30e3d9cc1c4880ba35031661d2a5415", "commitAfterChange": "c9d2c7d4276b8b0f65a3b8bbfa4009e8632940f9", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "  \tprivate void printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "signatureAfterChange": "  \tprivate void printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "diff": ["-\t\t", "+\t\tStringBuffer tokensBuffer = new StringBuffer();", "+", "-\t\tboolean openedChar = false;", "-\t\t\t\t\tif (openedChar) {", "-\t\t\t\t\t\topenedChar = false;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (insertSpace) {", "-\t\t\t\t\t\t\tbuffer.append(' ');", "-\t\t\t\t\t\t\tthis.column++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\topenedChar = true;", "+\t\t\t\t\tif (insertSpace) {", "+\t\t\t\t\t\ttokensBuffer.append(' ');", "-\t\t\t\t\tbuffer.append('\\'');", "-\t\t\t\t\tthis.column++;", "+\t\t\t\t\ttokensBuffer.append('\\'');", "-\t\t\t\t\t\t\tbuffer.append(' ');", "-\t\t\t\t\t\t\tthis.column++;", "+\t\t\t\t\t\t\ttokensBuffer.append(' ');", "-\t\t\t\t\tbuffer.append('\"');", "-\t\t\t\t\tthis.column++;", "+\t\t\t\t\ttokensBuffer.append('\"');", "-    \t\tboolean insertSpace = (previousToken == TerminalTokens.TokenNameWHITESPACE || newLine) && !firstWord;", "+    \t\tboolean insertSpace = (previousToken == TerminalTokens.TokenNameWHITESPACE || newLine) && (!firstWord || !hasTokens);", "+\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\tthis.column += tokensBuffer.length();", "+\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\tpreviousToken = token;", "+\t\t\t\t\t\t// Add remaining buffered tokens", "+\t\t\t\t\t\tif (tokensBuffer.length() > 0) {", "+\t\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\t\tthis.column += tokensBuffer.length();", "+\t\t\t\t\t\t}", "-\t\t\t\t    \tthis.column += BLOCK_LINE_PREFIX_LENGTH + 1;", "+\t\t\t\t    \tthis.column += BLOCK_FOOTER_LENGTH + 1;", "-\t\t\t\tcase TerminalTokens.TokenNameLESS:", "-\t\t\t\t\t// We cannot break tags", "-\t\t\t\t\tStringBuffer breakBuffer = new StringBuffer();", "-\t\t\t\t\tint start = this.scanner.startPosition;", "-\t\t    \t\tint tokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "-\t\t\t\t\tbreakBuffer.append(this.scanner.source, this.scanner.startPosition, tokenLength);", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tboolean closing = false;", "-\t\t\t\t\t\tif ((token = this.scanner.getNextToken()) == TerminalTokens.TokenNameDIVIDE) {", "-\t\t\t    \t\t\ttokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "-\t\t\t\t\t\t\tbreakBuffer.append(this.scanner.source, this.scanner.startPosition, tokenLength);", "-\t\t\t\t\t\t\ttoken = this.scanner.getNextToken();", "-\t\t\t\t\t\t\tclosing = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (token == TerminalTokens.TokenNameIdentifier) {", "-\t\t\t    \t\t\ttokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "-\t\t\t\t\t\t\tbreakBuffer.append(this.scanner.source, this.scanner.startPosition, tokenLength);", "-\t\t\t\t\t\t\ttoken = this.scanner.getNextToken();", "-\t\t\t\t\t\t\tif (token == TerminalTokens.TokenNameGREATER) {", "-\t\t\t\t    \t\t\ttokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "-\t\t\t\t\t\t\t\tbreakBuffer.append(this.scanner.source, this.scanner.startPosition, tokenLength);", "-\t\t\t\t\t\t\t\tif ((this.column + breakBuffer.length()) > maxColumn) {", "-\t\t\t\t\t\t\t    \tbuffer.append(this.lineSeparator);", "-\t\t\t\t\t\t\t    \tthis.column = 1;", "-\t\t\t\t\t\t\t    \tprintIndentationIfNecessary(buffer);", "-\t\t\t\t\t\t    \t\tbuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t\t\t\t\t    \tthis.column += BLOCK_LINE_PREFIX_LENGTH;", "-\t\t\t\t\t\t\t\t\tmultiLines = true;", "-\t\t\t\t\t\t\t\t} else if (!closing) {", "-\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "-\t\t\t\t\t\t\t\t\tthis.column++;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbuffer.append(breakBuffer);", "-\t\t\t\t\t\t\t\tthis.column += breakBuffer.length();", "-\t\t\t\t\t\t\t\tpreviousToken = token;", "-\t\t\t\t\t\t\t\tscannerLine = lineNumber;", "-\t\t\t\t\t\t\t\tnewLine = false;", "-\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tcatch (InvalidInputException iie) {", "-\t\t\t\t\t\t// forget as we're started after next token", "-\t\t\t\t\t}", "-\t\t\t\t\t// Need to retrieve correct position", "-\t\t\t\t\tthis.scanner.resetTo(start, currentTokenEndPosition-1);", "-\t\t\t\t\ttry {", "-\t                    token = this.scanner.getNextToken();", "-                    } catch (InvalidInputException e) {", "-\t                    // will not happen", "-                    }", "-\t\t\t\t\tbreak;", "+\t\t\t\t\t// Add remaining buffered tokens", "+\t\t\t\t\tif (tokensBuffer.length() > 0) {", "+\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t}", "-    \t\t\tthis.column++;", "-\t\t\tthis.column += tokenLength;", "-    \t\tif (previousToken == -1 || insertSpace) this.column++;", "+    \t\tint lastColumn = this.column + tokensBuffer.length() + tokenLength;", "+    \t\tif (previousToken == -1 || insertSpace) lastColumn++;", "-\t\t\tif (!firstWord && this.column > maxColumn) {", "+\t\t\tif (!firstWord && lastColumn > maxColumn) {", "+\t\t    \tString tokensString = tokensBuffer.toString().trim();", "+\t\t\t\tif ((firstColumn+tokensString.length()+tokenLength) > maxColumn) {", "+\t\t\t\t\t// there won't be enough room even if we break the line before the buffered tokens", "+\t\t\t\t\t// So add the buffered tokens now", "+\t\t\t\t\tif (buffer.length() == 0) {", "+\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\tthis.column++;", "+\t\t\t\t\t}", "+\t\t\t\t\tbuffer.append(tokensString);", "+\t\t\t\t\tthis.column += tokensString.length();", "+\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t}", "+\t\t    \tif (tokensBuffer.length() > 0) {", "+\t\t\t\t\tbuffer.append(tokensString);", "+\t\t\t\t\tthis.column += tokensString.length();", "+\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t    \t}", "-\t\t\t\t\tif (buffer.length() > 0) buffer.append(' ');", "+\t\t\t\t\ttokensBuffer.append(' ');", "-\t\t\t\tbuffer.append(this.scanner.source, tokenStart, tokenLength);", "+\t\t\t\ttokensBuffer.append(this.scanner.source, tokenStart, tokenLength);", "-\t\t\t\t\treplacement.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\tif (buffer.charAt(0) == ' ') {", "+\t\t\t\t\t\treplacement.append(' ');", "+\t\t\t\t\t\treplacement.append('*');", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treplacement.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\tthis.column++;", "+\t\t\t\t\t}", "-\t\t\t\tif (hasTokens) replacement.append(' ');", "+\t\t\t\tif (buffer.charAt(0) != ' ') {", "+\t\t\t\t\treplacement.append(' ');", "+\t\t\t\t\tthis.column++;", "+\t\t\t\t}"]}], "num": 11260}
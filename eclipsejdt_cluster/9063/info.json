{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "798b98eca7fcb4be27abacdc1f3cf033", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d99d72ec3877930c140cea393fe5ed1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t// resolve type arguments (for generic constructor call)", "+\t\tif (this.typeArguments != null) {", "+\t\t\tint length = this.typeArguments.length;", "+\t\t\tboolean argHasError = false; // typeChecks all arguments", "+\t\t\tthis.genericTypeArguments = new TypeBinding[length];", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tif ((this.genericTypeArguments[i] = this.typeArguments[i].resolveType(scope)) == null) {", "+\t\t\t\t\targHasError = true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (argHasError) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tif ((this.resolvedType.tagBits & TagBits.HasWildcard) != 0) {", "+\t\t    scope.problemReporter().cannotInstantiateWithWildcards(type, (ParameterizedTypeBinding)this.resolvedType);", "+\t\t    return this.resolvedType;", "+\t\t}", "-\t\tif (!(binding = scope.getConstructor(allocationType, argumentTypes, this))", "-\t\t\t.isValidBinding()) {", "+\t\tif (!(binding = scope.getConstructor(allocationType, argumentTypes, this)).isValidBinding()) {", "-", "-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0; i < arguments.length; i++) {", "-\t\t\t\targuments[i].implicitWidening(binding.parameters[i], argumentTypes[i]);", "-\t\t\t}", "-\t\t\tif (argsContainCast) {", "-\t\t\t\tCastExpression.checkNeedForArgumentCasts(scope, null, allocationType, binding, this.arguments, argumentTypes, this);", "-\t\t\t}", "-\t\t}", "+\t\tif (this.arguments != null)", "+\t\t\tcheckInvocationArguments(scope, null, allocationType, this.binding, this.arguments, argumentTypes, argsContainCast, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cbf3840c5fb77ddf7c53c3ece99031f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["+\tboolean argsContainCast = false;", "-\t\t\tif ((argumentTypes[i] = this.arguments[i].resolveType(scope)) == null) {", "+\t\t\tExpression argument = this.arguments[i];", "+\t\t\tif (argument instanceof CastExpression) {", "+\t\t\t\targument.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\t\t\targsContainCast = true;", "+\t\t\t}", "+\t\t\tif ((argumentTypes[i] = argument.resolveType(scope)) == null) {", "+\tif ((this.resolvedType.tagBits & TagBits.HasWildcard) != 0) {", "+\t    scope.problemReporter().cannotInstantiateWithWildcards(type, (ParameterizedTypeBinding)this.resolvedType);", "+\t    return this.resolvedType;", "+\t}\t", "-\tif (this.arguments != null) {", "-\t\tfor (int i = 0; i < this.arguments.length; i++) {", "-\t\t\tthis.arguments[i].implicitWidening(this.binding.parameters[i], argumentTypes[i]);", "+\tboolean warnRawArgs = false;", "+\tif (arguments != null) {", "+\t\tfor (int i = 0; i < arguments.length; i++) {", "+\t\t    TypeBinding parameterType = binding.parameters[i];", "+\t\t    TypeBinding argumentType = argumentTypes[i];", "+\t\t\targuments[i].computeConversion(scope, parameterType, argumentType);", "+\t\t\tif (argumentType != parameterType && argumentType.isRawType() && parameterType.isParameterizedType()) {", "+\t\t\t    warnRawArgs = true;", "+\t\t\t}", "+\t\tif (argsContainCast) {", "+\t\t\tCastExpression.checkNeedForArgumentCasts(scope, null, allocatedType, binding, this.arguments, argumentTypes, this);", "+\t\t}", "+\t}", "+\tif (allocatedType.isRawType() && this.binding.hasSubstitutedParameters()) {", "+\t    scope.problemReporter().unsafeRawInvocation(this, allocatedType, this.binding);", "+\t} else if (warnRawArgs) {", "+\t    scope.problemReporter().unsafeInvocationWithRawArguments(this, allocatedType, this.binding, argumentTypes);"]}], "num": 9063}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70a7d307e11b242844ee45ee2060937d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d65bc62d69c4d7915636f8fa0db2e92", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "6cd0099c2021e34815eaba987a586ae52dacf569", "commitAfterChange": "d6dc74869d8c303dbb7a6d8b327d8b104cd5865b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tprivate ReferenceExpression registerCopy(TypeBinding targetType, ReferenceExpression copy)", "signatureAfterChange": " \t \tpublic boolean isCompatibleWith(TypeBinding targetType, Scope scope)", "diff": ["-\t// Cache resolved copies against various target types, so repeat overload resolution and possibly type inference could be avoided.", "-\tprivate ReferenceExpression registerCopy(TypeBinding targetType, ReferenceExpression copy) {", "-\t\tif (this.copiesPerTargetType == null)", "-\t\t\tthis.copiesPerTargetType = new HashMap<TypeBinding, ReferenceExpression>();", "-\t\tthis.copiesPerTargetType.put(targetType, copy);", "-\t\treturn copy;", "+\t\tReferenceExpression copy = cachedResolvedCopy(targetType);", "+\t\treturn copy != null && copy.resolvedType != null && copy.resolvedType.isValidBinding() && copy.binding != null && copy.binding.isValidBinding();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e6ab59dcc2dba5e1b4bc64e239e1f66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "7b4fdf4780132144ccc7c2e7370ef3841befc3d9", "commitAfterChange": "6a5ede81dc60cc482d4fde0564e95e20c9055fee", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tHashtable setSourceComment(char[] source)", "signatureAfterChange": " \tvoid setSourceComment(char[] source)", "diff": ["-\tHashtable setSourceComment(char[] source) {", "-\t\tHashtable comments = new Hashtable();", "-//\t\tthis.comments = new ArrayList();", "-//\t\tthis.allTags = new ArrayList();", "+\tvoid setSourceComment(char[] source) {", "+\t\tthis.comments = new ArrayList();", "+\t\tthis.allTags = new ArrayList();", "-\t\t\t\t\t\tcomments.put(buffer.toString(), tags);", "+\t\t\t\t\t\tthis.comments.add(buffer.toString());", "+\t\t\t\t\t\tthis.allTags.add(tags);", "-\t\t\t\t\t\tcomments.put(buffer.toString(), tags);", "+\t\t\t\t\t\tthis.comments.add(buffer.toString());", "+\t\t\t\t\t\tthis.allTags.add(tags);", "-\t\treturn comments;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3194e6232a1e2fdeaad9e9d455638a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "41f0eedac440a5a7408e664ba09866184ebddd55", "commitAfterChange": "e0b93cd9388950bd51950e07247cdecc9e3263df", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void resolve(MethodScope methScope)", "signatureAfterChange": " \tpublic void resolve(MethodScope methScope)", "diff": ["-\t\t\tTypeBinding binding = references[i].resolveType(methScope);", "-\t\t\t", "-\t\t\tif ((methDecl.isConstructor() || override) && !superRef && binding != null && binding.isValidBinding()) {", "-\t\t\t\t// if binding is valid then look if we have a reference to an overriden method/constructor", "-\t\t\t\tif (references[i] instanceof JavadocMessageSend) {", "-\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) references[i];", "-\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(messageSend.qualifyingType) &&", "-\t\t\t\t\t\tCharOperation.equals(messageSend.selector, methDecl.selector) &&", "-\t\t\t\t\t\t(messageSend.binding.returnType == methDecl.binding.returnType)) {", "-\t\t\t\t\t\tif (messageSend.arguments == null && methDecl.arguments == null) {", "-\t\t\t\t\t\t\tsuperRef = true;", "+\t\t\treferences[i].resolveType(methScope);", "+\t\t\ttry {", "+\t\t\t\t// see whether we can have a super reference", "+\t\t\t\tif ((methDecl.isConstructor() || override) && !superRef) {", "+\t\t\t\t\tif (references[i] instanceof JavadocMessageSend) {", "+\t\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) references[i];", "+\t\t\t\t\t\t// if binding is valid then look if we have a reference to an overriden method/constructor", "+\t\t\t\t\t\tif (messageSend.binding != null && messageSend.binding.isValidBinding()) {", "+\t\t\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(messageSend.receiverType) &&", "+\t\t\t\t\t\t\t\tCharOperation.equals(messageSend.selector, methDecl.selector) &&", "+\t\t\t\t\t\t\t\t(messageSend.binding.returnType == methDecl.binding.returnType)) {", "+\t\t\t\t\t\t\t\tif (messageSend.arguments == null && methDecl.arguments == null) {", "+\t\t\t\t\t\t\t\t\tsuperRef = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\telse if (messageSend.arguments != null && methDecl.arguments != null) {", "+\t\t\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersEqual(messageSend.binding);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\telse if (messageSend.arguments != null && methDecl.arguments != null) {", "-\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersEqual(messageSend.binding);", "+\t\t\t\t\t}", "+\t\t\t\t\telse if (references[i] instanceof JavadocAllocationExpression) {", "+\t\t\t\t\t\tJavadocAllocationExpression allocationExpr = (JavadocAllocationExpression) references[i];", "+\t\t\t\t\t\t// if binding is valid then look if we have a reference to an overriden method/constructor", "+\t\t\t\t\t\tif (allocationExpr.binding != null && allocationExpr.binding.isValidBinding()) {", "+\t\t\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(allocationExpr.resolvedType)) {", "+\t\t\t\t\t\t\t\tif (allocationExpr.arguments == null && methDecl.arguments == null) {", "+\t\t\t\t\t\t\t\t\tsuperRef = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\telse if (allocationExpr.arguments != null && methDecl.arguments != null) {", "+\t\t\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersEqual(allocationExpr.binding);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "-\t\t\t\telse if (references[i] instanceof JavadocAllocationExpression) {", "-\t\t\t\t\tJavadocAllocationExpression allocationExpr = (JavadocAllocationExpression) references[i];", "-\t\t\t\t\tTypeBinding constructorBinding = allocationExpr.type.resolvedType;", "-\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(constructorBinding)) {", "-\t\t\t\t\t\tif (allocationExpr.arguments == null && methDecl.arguments == null) {", "-\t\t\t\t\t\t\tsuperRef = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\telse if (allocationExpr.arguments != null && methDecl.arguments != null) {", "-\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersEqual(allocationExpr.binding);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t}", "+\t\t\tcatch (Exception e) {", "+\t\t\t\t// Something wrong happen, forgot super ref..."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2202f29f45d34cd291eaa614f241d7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "bbbc03c8974b50736f7c2247e05857599972fd62", "commitAfterChange": "3dbb4c838e7dddd8ff99712109431d1f442c8931", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void run()", "signatureAfterChange": " \tpublic void run()", "diff": ["-\t\t\t\t\twhile ((awaitingJobsCount = awaitingJobsCount()) > 0) {", "+\t\t\t\t\twhile (!monitor.isCanceled() && (awaitingJobsCount = awaitingJobsCount()) > 0) {", "-\t\t\tProgressJob progressJob = null;", "+\t\t\tthis.progressJob = null;", "-\t\t\t\t\t\t\tif (progressJob != null) progressJob = null;", "+\t\t\t\t\t\t\tif (this.progressJob != null) {", "+\t\t\t\t\t\t\t\tthis.progressJob.cancel();", "+\t\t\t\t\t\t\t\tthis.progressJob = null;", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (progressJob == null) {", "-\t\t\t\t\t\t\tprogressJob = new ProgressJob(Messages.manager_indexingInProgress); ", "-\t\t\t\t\t\t\tprogressJob.setPriority(Job.LONG);", "-\t\t\t\t\t\t\tprogressJob.setSystem(true);", "-\t\t\t\t\t\t\tprogressJob.schedule();", "+\t\t\t\t\t\tif (this.progressJob == null) {", "+\t\t\t\t\t\t\tthis.progressJob = new ProgressJob(Messages.manager_indexingInProgress); ", "+\t\t\t\t\t\t\tthis.progressJob.setPriority(Job.LONG);", "+\t\t\t\t\t\t\tthis.progressJob.setSystem(true);", "+\t\t\t\t\t\t\tthis.progressJob.schedule();"]}], "num": 32174}
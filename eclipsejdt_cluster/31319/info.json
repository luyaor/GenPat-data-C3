{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d8f281391c9fb596ff0aad5fea9351c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cc5bf81578ea4b97ccff169ab2b7669", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "e8cc2a8f8e9efcff6e76a3ee15d5b53d1a958057", "commitAfterChange": "7e8c39a9e3d7dea3d8b022efbc3b049165785892", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate FieldDeclaration convert(SourceFieldElementInfo fiieldInfo, TypeDeclaration type, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate FieldDeclaration convert(SourceField fieldHandle, TypeDeclaration type, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\tprivate FieldDeclaration convert(SourceFieldElementInfo fiieldInfo, TypeDeclaration type, CompilationResult compilationResult) {", "+\tprivate FieldDeclaration convert(SourceField fieldHandle, TypeDeclaration type, CompilationResult compilationResult) throws JavaModelException {", "+\t\tSourceFieldElementInfo fieldInfo = (SourceFieldElementInfo) fieldHandle.getElementInfo();", "-\t\tint start = fiieldInfo.getNameSourceStart();", "-\t\tint end = fiieldInfo.getNameSourceEnd();", "+\t\tint start = fieldInfo.getNameSourceStart();", "+\t\tint end = fieldInfo.getNameSourceEnd();", "-\t\tfield.name = fiieldInfo.getName();", "+\t\tfield.name = fieldInfo.getName();", "-\t\tfield.declarationSourceStart = fiieldInfo.getDeclarationSourceStart();", "-\t\tfield.declarationSourceEnd = fiieldInfo.getDeclarationSourceEnd();", "-\t\tint modifiers = fiieldInfo.getModifiers();", "+\t\tfield.declarationSourceStart = fieldInfo.getDeclarationSourceStart();", "+\t\tfield.declarationSourceEnd = fieldInfo.getDeclarationSourceEnd();", "+\t\tint modifiers = fieldInfo.getModifiers();", "-\t\t\tfield.type = createTypeReference(fiieldInfo.getTypeName(), start, end);", "+\t\t\tfield.type = createTypeReference(fieldInfo.getTypeName(), start, end);", "+", "+\t\t/* convert annotations */", "+\t\tfield.annotations = convertAnnotations(fieldHandle);", "-\t\t\tchar[] initializationSource = fiieldInfo.getInitializationSource();", "+\t\t\tchar[] initializationSource = fieldInfo.getInitializationSource();", "-\t\t\tIJavaElement[] children = fiieldInfo.getChildren();", "+\t\t\tIJavaElement[] children = fieldInfo.getChildren();", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tTypeDeclaration anonymousLocalTypeDeclaration = convert((SourceTypeElementInfo)((JavaElement)localType).getElementInfo(), compilationResult);", "-\t\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(anonymousLocalTypeDeclaration);", "-\t\t\t\t\t\texpression.type = anonymousLocalTypeDeclaration.superclass;", "-\t\t\t\t\t\tanonymousLocalTypeDeclaration.superclass = null;", "-\t\t\t\t\t\tanonymousLocalTypeDeclaration.superInterfaces = null;", "-\t\t\t\t\t\tanonymousLocalTypeDeclaration.allocation = expression;", "-\t\t\t\t\t\tanonymousLocalTypeDeclaration.modifiers &= ~AccEnum; // remove tag in case this is the init of an enum constant", "-\t\t\t\t\t\texpressions[i] = expression;", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t// ignore", "-\t\t\t\t\t}", "+\t\t\t\t\tTypeDeclaration anonymousLocalTypeDeclaration = convert((SourceType) localType, compilationResult);", "+\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(anonymousLocalTypeDeclaration);", "+\t\t\t\t\texpression.type = anonymousLocalTypeDeclaration.superclass;", "+\t\t\t\t\tanonymousLocalTypeDeclaration.superclass = null;", "+\t\t\t\t\tanonymousLocalTypeDeclaration.superInterfaces = null;", "+\t\t\t\t\tanonymousLocalTypeDeclaration.allocation = expression;", "+\t\t\t\t\tanonymousLocalTypeDeclaration.modifiers &= ~AccEnum; // remove tag in case this is the init of an enum constant", "+\t\t\t\t\texpressions[i] = expression;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70327d0c349b850d06c24c008f74b4ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "068cd980b5edbe213826c80d8c3fb1a72582288a", "commitAfterChange": "6eb32d06a01a4c0cd88aa5091b2c41c8c1c0f654", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeDeclaration convert(ISourceType sourceType, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate TypeDeclaration convert(SourceTypeElementInfo typeInfo, CompilationResult compilationResult)", "diff": ["-\tprivate TypeDeclaration convert(ISourceType sourceType, CompilationResult compilationResult) {", "+\tprivate TypeDeclaration convert(SourceTypeElementInfo typeInfo, CompilationResult compilationResult) {", "-\t\tif (sourceType.getEnclosingType() == null && sourceType instanceof SourceTypeElementInfo) {", "-\t\t\tIType typeHandle = ((SourceTypeElementInfo)sourceType).getHandle();", "+\t\tif (typeInfo.getEnclosingType() == null) {", "+\t\t\tIType typeHandle = typeInfo.getHandle();", "-\t\t\ttype.name = sourceType.getName();", "+\t\t\ttype.name = typeInfo.getName();", "-\t\ttype.name = sourceType.getName();", "+\t\ttype.name = typeInfo.getName();", "-\t\ttype.sourceStart = start = sourceType.getNameSourceStart();", "-\t\ttype.sourceEnd = end = sourceType.getNameSourceEnd();", "-\t\ttype.modifiers = sourceType.getModifiers();", "-\t\ttype.declarationSourceStart = sourceType.getDeclarationSourceStart();", "-\t\ttype.declarationSourceEnd = sourceType.getDeclarationSourceEnd();", "+\t\ttype.sourceStart = start = typeInfo.getNameSourceStart();", "+\t\ttype.sourceEnd = end = typeInfo.getNameSourceEnd();", "+\t\ttype.modifiers = typeInfo.getModifiers();", "+\t\ttype.declarationSourceStart = typeInfo.getDeclarationSourceStart();", "+\t\ttype.declarationSourceEnd = typeInfo.getDeclarationSourceEnd();", "-\t\tchar[][] typeParameterNames = sourceType.getTypeParameterNames();", "+\t\tchar[][] typeParameterNames = typeInfo.getTypeParameterNames();", "-\t\t\tchar[][][] typeParameterBounds = sourceType.getTypeParameterBounds();", "+\t\t\tchar[][][] typeParameterBounds = typeInfo.getTypeParameterBounds();", "-\t\tif (sourceType.getSuperclassName() != null) {", "-\t\t\ttype.superclass = createTypeReference(sourceType.getSuperclassName(), start, end);", "+\t\tif (typeInfo.getSuperclassName() != null) {", "+\t\t\ttype.superclass = createTypeReference(typeInfo.getSuperclassName(), start, end);", "-\t\tchar[][] interfaceNames = sourceType.getInterfaceNames();", "+\t\tchar[][] interfaceNames = typeInfo.getInterfaceNames();", "-\t\t\tISourceType[] sourceMemberTypes = sourceType.getMemberTypes();", "+\t\t\tISourceType[] sourceMemberTypes = typeInfo.getMemberTypes();", "-\t\t\t\ttype.memberTypes[i] = convert(sourceMemberTypes[i], compilationResult);", "+\t\t\t\ttype.memberTypes[i] = convert((SourceTypeElementInfo) sourceMemberTypes[i], compilationResult);", "-\t\tif ((this.flags & LOCAL_TYPE) != 0 && sourceType instanceof SourceTypeElementInfo) {", "-\t\t\tinitializers = ((SourceTypeElementInfo)sourceType).getInitializers();", "+\t\tif ((this.flags & LOCAL_TYPE) != 0) {", "+\t\t\tinitializers = typeInfo.getInitializers();", "-\t\t\tsourceFields = sourceType.getFields();", "+\t\t\tsourceFields = typeInfo.getFields();", "-\t\t\t\ttype.fields[i] = convert(sourceFields[index++], type, compilationResult);", "+\t\t\t\ttype.fields[i] = convert((SourceFieldElementInfo) sourceFields[index++], type, compilationResult);", "-\t\t\tISourceMethod[] sourceMethods = sourceType.getMethods();", "+\t\t\tISourceMethod[] sourceMethods = typeInfo.getMethods();"]}], "num": 31319}
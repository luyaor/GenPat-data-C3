{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c098b5e6bb0912a23730a527094e2577", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1551aee67003a81108eda98e91d43793", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "a8f2b9d6f31a63759a85bef6a1ed8cbb23fbd3fa", "commitAfterChange": "ce41f66e0706b1b71981331d2b2667a0940a3697", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public static final boolean camelCaseMatch(char[] pattern, int patternStart, int patternEnd, char[] name, int nameStart, int nameEnd)", "signatureAfterChange": " public static final boolean camelCaseMatch(char[] pattern, int patternStart, int patternEnd, char[] name, int nameStart, int nameEnd)", "diff": ["-\t\t\t\t? ScannerHelper.ObviousIdentCharNatures[patternChar] == ScannerHelper.C_LOWER_LETTER", "+\t\t\t\t? ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[patternChar] == ScannerHelper.C_LOWER_LETTER", "-\t\t\t\t\tswitch (ScannerHelper.ObviousIdentCharNatures[nameChar]) {", "+\t\t\t\t\tswitch (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[nameChar]) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ae506d51b933154fe545b13c92c6d36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "bb035342af3e77c43a12431c380fb2a6fe6ec67e", "commitAfterChange": "d9aabee2fc6180b2ed4f4131332dc5a46cc37a0d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["-\t\t\tcases = new Case[length = statements.length];", "+\t\t\tcases = new CaseStatement[length = statements.length];", "-\t\t\t\t\t\t\t\tscope.problemReporter().duplicateCase((Case) statements[i], cst); //TODO: (philippe) could improve diagnosis to indicate colliding case", "+\t\t\t\t\t\t\t\tscope.problemReporter().duplicateCase((CaseStatement) statements[i], cst); //TODO: (philippe) could improve diagnosis to indicate colliding case"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1ea2231602f70a72c6985f65f08419b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "124641ac651bbea2bd062a9605817d39b473bf0e", "commitAfterChange": "54f3e7caaa3150d871f7d11c1e610492c84f6dde", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, final FlowInfo flowInfo)", "signatureAfterChange": " \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, final FlowInfo flowInfo)", "diff": ["-\t\t\t\t\t&& flowInfo.reachMode() == FlowInfo.REACHABLE)", "+\t\t\t\t\t&& lambdaInfo.reachMode() == FlowInfo.REACHABLE)", "-\t\t\t\tcheckAgainstNullAnnotation(flowContext, expression, expression.nullStatus(flowInfo, flowContext));", "+\t\t\t\tcheckAgainstNullAnnotation(flowContext, expression, expression.nullStatus(lambdaInfo, flowContext));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fac665b2e170f352d6390e5b591cde6f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "9775053c06b88abc4990b96720855b4d26f13ab7", "commitAfterChange": "61d6a0379a06ef6680e82e7f6a32f04040234762", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  \tpublic void swapUnresolved(UnresolvedReferenceBinding unresolvedType, ReferenceBinding resolvedType, LookupEnvironment env)", "signatureAfterChange": "  \tpublic void swapUnresolved(UnresolvedReferenceBinding unresolvedType, ReferenceBinding resolvedType, LookupEnvironment env)", "diff": ["-\t\t\t\tthis.enclosingType = (ReferenceBinding) env.convertToRawType(enclosing); // needed when binding unresolved member type", "+\t\t\t\tthis.enclosingType = (ReferenceBinding) env.convertUnresolvedBinaryToRawType(enclosing); // needed when binding unresolved member type", "-\t\t\t\t\tthis.arguments[i] = env.convertToRawType(resolvedType);", "+\t\t\t\t\tthis.arguments[i] = env.convertUnresolvedBinaryToRawType(resolvedType);"]}], "num": 22113}
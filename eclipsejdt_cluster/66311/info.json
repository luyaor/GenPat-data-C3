{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33b83de6b98eec105e0bf414ecdd89ca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8608e71f801b19ee8a231b356c0bed45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "3413778e1bd5154fc1bb3b2fe41a2f5c159f06ae", "commitAfterChange": "b6700c6040587d6a407e0aa87172122e678ac070", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tprivate void disassemble(IEnclosingMethodAttribute enclosingMethodAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": "  \tprivate void disassemble(IAnnotation annotation, IConstantPool constantPool, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["+", "+\tprivate void disassemble(IAnnotation annotation, IConstantPool constantPool, StringBuffer buffer, String lineSeparator, int tabNumber) {", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\tfinal int typeIndex = annotation.getTypeIndex();", "+\t\tfinal char[] typeName = CharOperation.replaceOnCopy(constantPool.decodeEntry(typeIndex).getUtf8Value(), '/', '.');", "+\t\tbuffer.append(", "+\t\t\tUtil.bind(\"disassembler.annotationentrystart\", //$NON-NLS-1$", "+\t\t\tnew String[] {", "+\t\t\t\tInteger.toString(typeIndex),", "+\t\t\t\tnew String(Signature.toCharArray(typeName))", "+\t\t\t}", "+\t\t));", "+\t\tfinal IAnnotationComponent[] components = annotation.getComponents();", "+\t\tfor (int i = 0, max = components.length; i < max; i++) {", "+\t\t\tdisassemble(components[i], constantPool, buffer, lineSeparator, tabNumber + 1);", "+\t\t}", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\tbuffer.append(Util.bind(\"disassembler.annotationentryend\")); //$NON-NLS-1$", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8623183dd9b347a52193c77dbf717a0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "71df68ac6bbd7c5b4b673539241b9c1cc905574c", "commitAfterChange": "04c08732703d5f5e97b66e89468d2f87b7f84cff", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 118, "signatureBeforeChange": " \tpublic void removeFromSecondaryTypesCache(IFile file)", "signatureAfterChange": " \tpublic void secondaryTypesRemoving(IFile file, boolean cleanIndexCache)", "diff": ["-\t */", "-\tpublic void removeFromSecondaryTypesCache(IFile file) {", "-\t\tif (VERBOSE) {", "-\t\t\tStringBuffer buffer = new StringBuffer(\"JavaModelManager.removeSecondaryTypePaths(\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(file.getName());", "-\t\t\tbuffer.append(')');", "-\t\t\tUtil.verbose(buffer.toString());", "-\t\t}", "-\t\tif (file != null) {", "-\t\t\tPerProjectInfo projectInfo = getPerProjectInfo(file.getProject(), false);", "-\t\t\tif (projectInfo != null && projectInfo.secondaryTypes != null) {", "-\t\t\t\tif (VERBOSE) {", "-\t\t\t\t\tUtil.verbose(\"-> remove file from cache of project: \"+file.getProject().getName()); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tIterator packages = projectInfo.secondaryTypes.keySet().iterator();", "-\t\t\t\twhile (packages.hasNext()) {", "-\t\t\t\t\tString packName = (String) packages.next();", "-\t\t\t\t\tObject object = projectInfo.secondaryTypes.get(packName);", "-\t\t\t\t\tif (object instanceof HashMap) {", "-\t\t\t\t\t\tHashMap types = (HashMap) object;", "-\t\t\t\t\t\tIterator names = types.keySet().iterator();", "-\t\t\t\t\t\twhile (names.hasNext()) {", "-\t\t\t\t\t\t\tString typeName = (String) names.next();", "-\t\t\t\t\t\t\tIType type = (IType) types.get(typeName);", "-\t\t\t\t\t\t\tif (file.equals(type.getResource())) {", "-\t\t\t\t\t\t\t\ttypes.remove(typeName);", "-\t\t\t\t\t\t\t\tif (types.size() == 0) {", "-\t\t\t\t\t\t\t\t\tprojectInfo.secondaryTypes.remove(packName);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+\t */", "+\tpublic void secondaryTypesRemoving(IFile file, boolean cleanIndexCache) {", "+\t\tif (VERBOSE) {", "+\t\t\tStringBuffer buffer = new StringBuffer(\"JavaModelManager.removeFromSecondaryTypesCache(\"); //$NON-NLS-1$", "+\t\t\tbuffer.append(file.getName());", "+\t\t\tbuffer.append(')');", "+\t\t\tUtil.verbose(buffer.toString());", "+\t\t}", "+\t\tif (file != null) {", "+\t\t\tPerProjectInfo projectInfo = getPerProjectInfo(file.getProject(), false);", "+\t\t\tif (projectInfo != null && projectInfo.secondaryTypes != null) {", "+\t\t\t\tif (VERBOSE) {", "+\t\t\t\t\tUtil.verbose(\"-> remove file from cache of project: \"+file.getProject().getName()); //$NON-NLS-1$", "+\t\t\t\t}", "+", "+\t\t\t\t// Clean current cache", "+\t\t\t\tsecondaryTypesRemoving(projectInfo.secondaryTypes, file);", "+\t\t\t\t", "+\t\t\t\t// Clean indexing cache if necessary", "+\t\t\t\tif (!cleanIndexCache) return;", "+\t\t\t\tHashMap indexingCache = (HashMap) projectInfo.secondaryTypes.get(INDEXED_SECONDARY_TYPES);", "+\t\t\t\tif (indexingCache != null) {", "+\t\t\t\t\tSet keys = indexingCache.keySet();", "+\t\t\t\t\tint filesSize = keys.size(), filesCount = 0;", "+\t\t\t\t\tIFile[] removed = null;", "+\t\t\t\t\tIterator cachedFiles = keys.iterator();", "+\t\t\t\t\twhile (cachedFiles.hasNext()) {", "+\t\t\t\t\t\tIFile cachedFile = (IFile) cachedFiles.next();", "+\t\t\t\t\t\tif (file.equals(cachedFile)) {", "+\t\t\t\t\t\t\tif (removed == null) removed = new IFile[filesSize];", "+\t\t\t\t\t\t\tfilesSize--;", "+\t\t\t\t\t\t\tremoved[filesCount++] = cachedFile;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tfor (int i=0; i<filesCount; i++) {", "+\t\t\t\t\t\tindexingCache.remove(removed[i]);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af665cbeed635abe42b71f351ae2c90b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "2a6fc21e132c7337a2ad9e75a03356551f0e9060", "commitAfterChange": "2f8f6c0c9552d7ebf46ec13ce513e098823a7a4e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate void disassemble(IClassFileReader classFileReader, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": " \tprivate void disassemble(IClassFileReader classFileReader, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["-\t\tcheckDeprecated(methodInfo, buffer, lineSeparator, tabNumber);", "-\t\tcheckSynthetic(methodInfo, buffer, lineSeparator, tabNumber);", "-\t\t\tbuffer.append(Signature.toCharArray(methodDescriptor, methodName, getParameterNames(methodDescriptor) , false, true));", "+\t\t\tbuffer.append(Signature.toCharArray(methodDescriptor, methodName, getParameterNames(methodDescriptor) , true, false));", "-\t\t\t.append(' ');", "+\t\t\t.append(' ')", "+\t\t\t.append(Util.bind(\"disassembler.commentend\"));", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\tIClassFileAttribute[] attributes = methodInfo.getAttributes();", "+\t\tint length = attributes.length;", "+\t\tif (length != 0) {", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tIClassFileAttribute attribute = attributes[i];", "+\t\t\t\tif ((attribute != codeAttribute) && (attribute != exceptionAttribute)) {", "+\t\t\t\t\tdisassemble(attribute, buffer, lineSeparator, tabNumber);", "+\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-\t\t\tbuffer.append(Util.bind(\"disassembler.commentend\"));", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\tbuffer", "-\t\t\t\t.append(Util.bind(\"disassembler.commentstart\"))", "-\t\t\t\t.append(' ')", "-\t\t\t\t.append(Util.bind(\"classfileformat.maxStack\"))", "-\t\t\t\t.append(codeAttribute.getMaxStack())", "-\t\t\t\t.append(' ')", "-\t\t\t\t.append(',')", "-\t\t\t\t.append(' ')", "-\t\t\t\t.append(Util.bind(\"classfileformat.maxLocals\"))", "-\t\t\t\t.append(' ')", "-\t\t\t\t.append(codeAttribute.getMaxLocals())", "-\t\t\t\t.append(' ')", "-\t\t\t\t.append(Util.bind(\"disassembler.commentend\"));", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t} else {", "-\t\t\tbuffer.append(Util.bind(\"disassembler.commentend\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc3d60bb9bef5075e3ab8992ce3ccbc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AnnotationParser.java", "commitBeforeChange": "b63ee5a669593061b975bc2def28757d777c16ca", "commitAfterChange": "09bf35df2168c2ab3f5a24971ca9aae42bfc8d5b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprivate void updateAnnotation()", "signatureAfterChange": " \tprivate void updateAnnotation()", "diff": ["+\t\tif (this.astLengthPtr == -1) {", "+\t\t\treturn;", "+\t\t}", "+", "+\t\t// Initialize arrays", "+\t\tint[] sizes = new int[ORDERED_TAGS_NUMBER];", "+\t\tfor (int i=0; i<=this.astLengthPtr; i++) {", "+\t\t\tsizes[i%ORDERED_TAGS_NUMBER] += this.astLengthStack[i];", "+\t\t}", "+\t\tthis.annotation.references = new Expression[sizes[SEE_TAG_EXPECTED_ORDER]];", "+\t\tthis.annotation.thrownExceptions = new TypeReference[sizes[THROWS_TAG_EXPECTED_ORDER]];", "+\t\tthis.annotation.parameters = new AnnotationSingleNameReference[sizes[PARAM_TAG_EXPECTED_ORDER]];", "+\t\t", "+\t\t// Store nodes in arrays", "+\t\t\tint ptr = this.astLengthPtr % ORDERED_TAGS_NUMBER;", "-\t\t\tif (this.astLengthPtr == 2) {", "+\t\t\tif (ptr == SEE_TAG_EXPECTED_ORDER) {", "-\t\t\t\tif (size > 0) {", "-\t\t\t\t\tthis.annotation.references = new Expression[size];", "-\t\t\t\t\tfor (int i = (size - 1); i >= 0; i--) {", "-\t\t\t\t\t\tthis.annotation.references[i] = (Expression) this.astStack[astPtr--];", "-\t\t\t\t\t}", "+\t\t\t\tfor (int i=0; i<size; i++) {", "+\t\t\t\t\tthis.annotation.references[--sizes[ptr]] = (Expression) this.astStack[astPtr--];", "-\t\t\telse if (this.astLengthPtr == 1) {", "+\t\t\telse if (ptr == THROWS_TAG_EXPECTED_ORDER) {", "-\t\t\t\tif (size > 0) {", "-\t\t\t\t\tthis.annotation.thrownExceptions = new TypeReference[size];", "-\t\t\t\t\tfor (int i = (size - 1); i >= 0; i--) {", "-\t\t\t\t\t\tthis.annotation.thrownExceptions[i] = (TypeReference) this.astStack[astPtr--];", "-\t\t\t\t\t}", "+\t\t\t\tfor (int i=0; i<size; i++) {", "+\t\t\t\t\tthis.annotation.thrownExceptions[--sizes[ptr]] = (TypeReference) this.astStack[astPtr--];", "-\t\t\telse if (this.astLengthPtr == 0) {", "+\t\t\telse if (ptr == PARAM_TAG_EXPECTED_ORDER) {", "-\t\t\t\tif (size > 0) {", "-\t\t\t\t\tthis.annotation.parameters = new AnnotationSingleNameReference[size];", "-\t\t\t\t\tfor (int i = (size - 1); i >= 0; i--) {", "-\t\t\t\t\t\tthis.annotation.parameters[i] = (AnnotationSingleNameReference) this.astStack[astPtr--];", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-", "-\t\t\t// Flag all nodes got from other ast length stack pointer values as invalid....", "-\t\t\t// TODO (frederic) To be changed when mixed tags declaration will be accepted", "-\t\t\telse {", "-\t\t\t\tint size = this.astLengthStack[this.astLengthPtr--];", "-\t\t\t\tif (size > 0) {", "-\t\t\t\t\tfor (int i = 0; i < size; i++) {", "-\t\t\t\t\t\tAstNode node = this.astStack[astPtr--];", "-\t\t\t\t\t\tthis.sourceParser.problemReporter().annotationUnexpectedTag(node.sourceStart, node.sourceEnd);", "-\t\t\t\t\t}", "+\t\t\t\tfor (int i=0; i<size; i++) {", "+\t\t\t\t\tthis.annotation.parameters[--sizes[ptr]] = (AnnotationSingleNameReference) this.astStack[astPtr--];"]}], "num": 66311}
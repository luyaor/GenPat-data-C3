{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "345f2c23127230487d517b49854cf3fc", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57cd03a153fd4c7d35ad407eb1fae0bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "58aaea35ae4c64a4ecebe06d6b1ab1679e04698a", "commitAfterChange": "d5df66f62f879926d0ab37840f8644f7133a2a54", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " private void createFields(IBinaryField[] iFields, long sourceLevel)", "signatureAfterChange": " private void createFields(IBinaryField[] iFields, long sourceLevel)", "diff": ["+\t\t\tboolean hasRestrictedAccess = hasRestrictedAccess();", "+\t\t\t\tif (hasRestrictedAccess) {", "+\t\t\t\t\tfield.modifiers |= ExtraCompilerModifiers.AccRestrictedAccess;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0476e637b0af62e6f998760411c6da6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "f41df9b6ac9b62f616470e8ec0968732d823137f", "commitAfterChange": "2f379667b4f33f336f0003d6b2911b5403125b74", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tvoid initialize(ReferenceBinding someType, TypeBinding[] someArguments)", "signatureAfterChange": "  \tvoid initialize(ReferenceBinding someType, TypeBinding[] someArguments)", "diff": ["-\t\t\t\tif (!someArgument.isWildcard() || ((WildcardBinding) someArgument).kind != Wildcard.UNBOUND) {", "+\t\t\t\tboolean isWildcardArgument = someArgument.isWildcard();", "+\t\t\t\tif (isWildcardArgument) {", "+\t\t\t\t\tthis.tagBits |= HasDirectWildcard;", "+\t\t\t\t}", "+\t\t\t\tif (!isWildcardArgument || ((WildcardBinding) someArgument).kind != Wildcard.UNBOUND) {", "-\t\t\t    this.tagBits |= someArgument.tagBits & (HasTypeVariable | HasWildcard);", "+\t\t\t    this.tagBits |= someArgument.tagBits & (HasTypeVariable);"]}], "num": 34931}
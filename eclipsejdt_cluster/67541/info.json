{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71648c21eb6484322b43c7c7fbb0c204", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5aa171ce1a588b4f37730f86bd5693c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "4e141be8003d1ef09b5a958dd38e851de76be5f5", "commitAfterChange": "d14fcf9bcec95873f54edd756055ca864aab7a2b", "methodNumberBeforeChange": 301, "methodNumberAfterChange": 301, "signatureBeforeChange": " protected void consumeReferenceExpressionTypeForm(boolean isPrimitive)", "signatureAfterChange": " protected void consumeReferenceExpressionTypeForm(boolean isPrimitive, boolean isArray)", "diff": ["-protected void consumeReferenceExpressionTypeForm(boolean isPrimitive) {", "-\t// ReferenceExpression ::= PrimitiveType Dims '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t// ReferenceExpression ::= Name Dims '::' NonWildTypeArgumentsopt IdentifierOrNew", "+protected void consumeReferenceExpressionTypeForm(boolean isPrimitive, boolean isArray) {", "+\t", "+\t// ReferenceExpression ::= PrimitiveType Dims PushModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t// ReferenceExpression ::= Modifiers PrimitiveType Dims PushRealModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t// ReferenceExpression ::= Name Dims PushModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t// ReferenceExpression ::= Modifiers Name Dims PushRealModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t// ReferenceExpression ::= Modifiers Name PushRealModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\tint illegalModifiersSourceStart = this.intStack[this.intPtr--];", "+\tint illegalModifiers = this.intStack[this.intPtr--];", "+\t", "-\ttype = getUnannotatedTypeReference(this.intStack[this.intPtr--]);", "+\t// Type Annotations are in the expression stack, so retrieve as unannotated type ", "+\ttype = getUnannotatedTypeReference(isArray ? this.intStack[this.intPtr--] : 0);", "+    // and attach the annotations now.", "+\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "+\t\tSystem.arraycopy(", "+\t\t\t\tthis.expressionStack,", "+\t\t\t\t(this.expressionPtr -= length) + 1,", "+\t\t\t\ttype.annotations = new Annotation[length],", "+\t\t\t\t0,", "+\t\t\t\tlength);", "+\t\ttype.sourceStart = type.annotations[0].sourceStart;", "+\t\ttype.bits |= ASTNode.HasTypeAnnotations;", "+\t}", "+\tif (illegalModifiersSourceStart >= 0 && illegalModifiersSourceStart < type.sourceStart) {", "+\t\ttype.sourceStart = illegalModifiersSourceStart;", "+\t}", "+\tif (illegalModifiers != ClassFileConstants.AccDefault) {", "+\t\tproblemReporter().invalidLocationForModifiers(type);", "+\t}", "+\tresetModifiers();", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a3fcc5a9eed69886fdee16c45615246", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 301, "methodNumberAfterChange": 290, "signatureBeforeChange": " protected void consumeReferenceExpressionTypeForm(boolean isPrimitive, boolean isArray)", "signatureAfterChange": " protected void consumeReferenceExpressionTypeForm(boolean isPrimitive, boolean isArray)", "diff": ["-\t// ReferenceExpression ::= PrimitiveType Dims PushModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t// ReferenceExpression ::= Modifiers PrimitiveType Dims PushRealModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t// ReferenceExpression ::= Name Dims PushModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t// ReferenceExpression ::= Modifiers Name Dims PushRealModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t// ReferenceExpression ::= Modifiers Name PushRealModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t// ReferenceExpression ::= PrimitiveType Dims '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t// ReferenceExpression ::= Name Dims '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t// ReferenceExpression ::= Name '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t\tmethodReference = (SingleNameReference) getUnspecifiedReferenceOptimized();", "+\t\tmethodReference = new SingleNameReference(this.identifierStack[this.identifierPtr], this.identifierPositionStack[this.identifierPtr--]);", "+\t\tthis.identifierLengthPtr--;", "-\tint illegalModifiersSourceStart = this.intStack[this.intPtr--];", "-\tint illegalModifiers = this.intStack[this.intPtr--];", "-\t", "-\t// Type Annotations are in the expression stack, so retrieve as unannotated type ", "-\ttype = getUnannotatedTypeReference(isArray ? this.intStack[this.intPtr--] : 0);", "-    // and attach the annotations now.", "-\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "-\t\ttype.annotations = new Annotation[type.getAnnotatableLevels()][];", "-\t\tSystem.arraycopy(", "-\t\t\t\tthis.expressionStack,", "-\t\t\t\t(this.expressionPtr -= length) + 1,", "-\t\t\t\ttype.annotations[0] = new Annotation[length],", "-\t\t\t\t0,", "-\t\t\t\tlength);", "-\t\ttype.sourceStart = type.annotations[0][0].sourceStart;", "-\t\ttype.bits |= ASTNode.HasTypeAnnotations;", "-\t}", "-\tif (illegalModifiersSourceStart >= 0 && illegalModifiersSourceStart < type.sourceStart) {", "-\t\ttype.sourceStart = illegalModifiersSourceStart;", "-\t}", "+\ttype = getTypeReference(isArray ? this.intStack[this.intPtr--] : 0);", "-\tif (illegalModifiers != ClassFileConstants.AccDefault) {", "-\t\tproblemReporter().invalidLocationForModifiers(type);", "-\t}", "-\tresetModifiers();", "-\t"]}], "num": 67541}
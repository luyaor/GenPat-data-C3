{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "981e254ccc936d87ef1826cd1ae79a7b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20b8dc7c59fd09e84e9e8a05bc939048", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "53380a5830867128cd28d10f3919067730bbfb82", "commitAfterChange": "c0f393752b7d4523a5fc372912c7b4e192e52da7", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "signatureAfterChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "diff": ["-\t\t\t\tif (previousFragment == null) {", "-\t\t\t\t\tif (tagName != null && (source[tagStart] == '\\r' || source[tagStart] == '\\n')) {", "-\t\t\t\t\t\twhile (source[tagStart] == '*' || Character.isWhitespace(source[tagStart])) {", "-\t\t\t\t\t\t\ttagStart++; // purge non-stored characters", "-\t\t\t\t\t\t}", "+\t\t\t\tif (previousFragment == null && TagElement.TAG_PARAM.equals(tagName) && ((TextElement)fragment).getText().equals(\"<\")) { // special case here for @param <E> syntax", "+\t\t\t\t\tint start = tagStart;", "+\t\t\t\t\t// verify '<'", "+\t\t\t\t\twhile (source[start] == ' ' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\tstart++; // purge white characters", "+\t\t\t\t\ttext = new String(source, start, fragment.getLength());", "+\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());", "+\t\t\t\t\tstart += fragment.getLength();", "+\t\t\t\t\t// verify simple name", "+\t\t\t\t\tassumeTrue(this.prefix+\"Unexpected fragment end for \"+tagElement, elements.hasNext());", "+\t\t\t\t\tfragment = (ASTNode) elements.next();", "+\t\t\t\t\twhile (source[start] == ' ' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\tstart++; // purge white characters", "+\t\t\t\t\t}", "+\t\t\t\t\tassumeEquals(this.prefix+\"Unexpected node type for tag element \"+tagElement, ASTNode.SIMPLE_NAME, fragment.getNodeType());", "+\t\t\t\t\tName name = (Name) fragment;", "+\t\t\t\t\tverifyNamePositions(start, name, source);", "+\t\t\t\t\tstart += fragment.getLength();", "+\t\t\t\t\t// verify simple name", "+\t\t\t\t\tassumeTrue(this.prefix+\"Unexpected fragment end for \"+tagElement, elements.hasNext());", "+\t\t\t\t\tfragment = (ASTNode) elements.next();", "+\t\t\t\t\twhile (source[start] == ' ' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\tstart++; // purge white characters", "+\t\t\t\t\t}", "+\t\t\t\t\ttext = new String(source, start, fragment.getLength());", "+\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());", "+\t\t\t\t\tstart += fragment.getLength();", "+\t\t\t\t\t// reset fragment as simple name to avoid issue with next text element", "+\t\t\t\t\tfragment = name;", "+\t\t\t\t\ttagStart += (start- tagStart) - name.getLength();", "-\t\t\t\t\tif (previousFragment.getNodeType() == ASTNode.TEXT_ELEMENT) {", "-\t\t\t\t\t\tassumeTrue(this.prefix+\"Wrong length at <\"+previousFragment.getStartPosition()+\"> for text element \"+previousFragment, (source[tagStart] == '\\r' && source[tagStart+1] == '\\n' || source[tagStart] == '\\n'));", "-\t\t\t\t\t\twhile (source[tagStart] == '*' || Character.isWhitespace(source[tagStart])) {", "-\t\t\t\t\t\t\ttagStart++; // purge non-stored characters", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tint start = tagStart;", "-\t\t\t\t\t\tboolean newLine = false;", "-\t\t\t\t\t\twhile (source[start] == '*' || Character.isWhitespace(source[start])) {", "-\t\t\t\t\t\t\tstart++; // purge non-stored characters", "-\t\t\t\t\t\t\tif (source[tagStart] == '\\r' || source[tagStart] == '\\n') {", "-\t\t\t\t\t\t\t\tnewLine = true;", "+\t\t\t\t\tif (previousFragment == null) {", "+\t\t\t\t\t\tif (tagName != null && (source[tagStart] == '\\r' || source[tagStart] == '\\n')) {", "+\t\t\t\t\t\t\twhile (source[tagStart] == '*' || Character.isWhitespace(source[tagStart])) {", "+\t\t\t\t\t\t\t\ttagStart++; // purge non-stored characters", "-\t\t\t\t\t\tif (newLine) tagStart = start;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (previousFragment.getNodeType() == ASTNode.TEXT_ELEMENT) {", "+\t\t\t\t\t\t\tassumeTrue(this.prefix+\"Wrong length at <\"+previousFragment.getStartPosition()+\"> for text element \"+previousFragment, (source[tagStart] == '\\r' && source[tagStart+1] == '\\n' || source[tagStart] == '\\n'));", "+\t\t\t\t\t\t\twhile (source[tagStart] == '*' || Character.isWhitespace(source[tagStart])) {", "+\t\t\t\t\t\t\t\ttagStart++; // purge non-stored characters", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (TagElement.TAG_PARAM.equals(tagName) && previousFragment.getNodeType() == ASTNode.SIMPLE_NAME && ((TextElement)fragment).getText().equals(\">\")) {", "+\t\t\t\t\t\t\twhile (source[tagStart] == ' ' || Character.isWhitespace(source[tagStart])) {", "+\t\t\t\t\t\t\t\ttagStart++; // purge white characters", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint start = tagStart;", "+\t\t\t\t\t\t\tboolean newLine = false;", "+\t\t\t\t\t\t\twhile (source[start] == '*' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\t\t\tstart++; // purge non-stored characters", "+\t\t\t\t\t\t\t\tif (source[tagStart] == '\\r' || source[tagStart] == '\\n') {", "+\t\t\t\t\t\t\t\t\tnewLine = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (newLine) tagStart = start;", "+\t\t\t\t\t\t}", "+\t\t\t\t\ttext = new String(source, tagStart, fragment.getLength());", "+\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());", "-\t\t\t\ttext = new String(source, tagStart, fragment.getLength());", "-\t\t\t\tassumeEquals(this.prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d050ea1a1b79e30247d1b8b27e42f7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected void setUp()", "signatureAfterChange": " \tprotected void setUp()", "diff": ["-\t\tast = new AST();", "+\t\tif (this.API_LEVEL == AST.LEVEL_2_0) {", "+\t\t\tast = AST.newAST2();", "+\t\t}", "+\t\tif (this.API_LEVEL == AST.LEVEL_3_0) {", "+\t\t\tast = AST.newAST3();", "+\t\t}", "+\t\tN4 = ast.newSimpleName(\"P\"); //$NON-NLS-1$", "+\t\tN4S = \"[(nSPPnS)]\"; //$NON-NLS-1$", "+\t\tT2 = ast.newSimpleType(ast.newSimpleName(\"X\")); //$NON-NLS-1$", "+\t\tT2S = \"[(tS[(nSXXnS)]tS)]\"; //$NON-NLS-1$", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tPT1 = ast.newParameterizedType(ast.newSimpleName(\"Z\")); //$NON-NLS-1$", "+\t\t\tPT1S = \"[(tM[(nSZZnS)]tM)]\"; //$NON-NLS-1$", "+", "+\t\t\tTP1 = ast.newTypeParameter();", "+\t\t\tTP1.setName(ast.newSimpleName(\"x\")); //$NON-NLS-1$", "+\t\t\tTP1S = \"[(tTP[(nSxxnS)]tTP)]\"; //$NON-NLS-1$", "+", "+\t\t\tTP2 = ast.newTypeParameter();", "+\t\t\tTP2.setName(ast.newSimpleName(\"y\")); //$NON-NLS-1$", "+\t\t\tTP2S = \"[(tTP[(nSyynS)]tTP)]\"; //$NON-NLS-1$", "+", "+\t\t\tMVP1 = ast.newMemberValuePair();", "+\t\t\tMVP1.setName(ast.newSimpleName(\"x\")); //$NON-NLS-1$", "+\t\t\tMVP1.setValue(ast.newSimpleName(\"y\")); //$NON-NLS-1$", "+\t\t\tMVP1S = \"[(@MVP[(nSxxnS)][(nSyynS)]@MVP)]\"; //$NON-NLS-1$", "+\t\t", "+\t\t\tMVP2 = ast.newMemberValuePair();", "+\t\t\tMVP2.setName(ast.newSimpleName(\"a\")); //$NON-NLS-1$", "+\t\t\tMVP2.setValue(ast.newSimpleName(\"b\")); //$NON-NLS-1$", "+\t\t\tMVP2S = \"[(@MVP[(nSaanS)][(nSbbnS)]@MVP)]\"; //$NON-NLS-1$", "+\t\t", "+\t\t\tMOD1 = ast.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD);", "+\t\t\tMOD1S = \"[(MODpublicpublicMOD)]\"; //$NON-NLS-1$", "+\t\t\tMOD2 = ast.newModifier(Modifier.ModifierKeyword.FINAL_KEYWORD);", "+\t\t\tMOD2S = \"[(MODfinalfinalMOD)]\"; //$NON-NLS-1$", "+\t\t", "+\t\t\tANO1 = ast.newMarkerAnnotation();", "+\t\t\tANO1.setTypeName(ast.newSimpleName(\"a\")); //$NON-NLS-1$", "+\t\t\tANO1S = \"[(@MAN[(nSaanS)]@MAN)]\"; //$NON-NLS-1$", "+", "+\t\t\tANO2 = ast.newNormalAnnotation();", "+\t\t\tANO2.setTypeName(ast.newSimpleName(\"b\")); //$NON-NLS-1$", "+\t\t\tANO2S = \"[(@NAN[(nSbbnS)]@NAN)]\"; //$NON-NLS-1$", "+\t\t", "+\t\t\tEC1 = ast.newEnumConstantDeclaration();", "+\t\t\tEC1.setName(ast.newSimpleName(\"c\")); //$NON-NLS-1$", "+\t\t\tEC1S = \"[(ECD[(nSccnS)]ECD)]\"; //$NON-NLS-1$", "+\t\t", "+\t\t\tEC2 = ast.newEnumConstantDeclaration();", "+\t\t\tEC2.setName(ast.newSimpleName(\"d\")); //$NON-NLS-1$", "+\t\t\tEC2S = \"[(ECD[(nSddnS)]ECD)]\"; //$NON-NLS-1$", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb6d98f8bce00a193cb7cfb9254b869a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected void setUp()", "signatureAfterChange": " \tprotected void setUp()", "diff": ["-\t\tast = new AST();", "+\t\tif (this.API_LEVEL == AST.LEVEL_2_0) {", "+\t\t\tast = AST.newAST2();", "+\t\t}", "+\t\tif (this.API_LEVEL == AST.LEVEL_3_0) {", "+\t\t\tast = AST.newAST3();", "+\t\t}", "+\t\tN4 = ast.newSimpleName(\"P\"); //$NON-NLS-1$", "+\t\tT1S = \"(tS(nSZZnS)tS)\"; //$NON-NLS-1$", "+\t\tT2 = ast.newSimpleType(ast.newSimpleName(\"Y\")); //$NON-NLS-1$", "+\t\tT2S = \"(tS(nSYYnS)tS)\"; //$NON-NLS-1$", "-\t\tLC1 = ast.newLineComment();", "-", "+", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tPT1 = ast.newParameterizedType(ast.newSimpleName(\"Z\")); //$NON-NLS-1$", "+\t\t\tPT1S = \"(tM(nSZZnS)tM)\"; //$NON-NLS-1$", "+", "+\t\t\tTP1 = ast.newTypeParameter();", "+\t\t\tTP1.setName(ast.newSimpleName(\"x\")); //$NON-NLS-1$", "+\t\t\tTP1S = \"[(tTP[(nSxxnS)]tTP)]\"; //$NON-NLS-1$", "+\t", "+\t\t\tTP2 = ast.newTypeParameter();", "+\t\t\tTP2.setName(ast.newSimpleName(\"y\")); //$NON-NLS-1$", "+\t\t\tTP2S = \"[(tTP[(nSyynS)]tTP)]\"; //$NON-NLS-1$", "+\t\t\tLC1 = ast.newLineComment();", "+", "+\t\t\tMVP1 = ast.newMemberValuePair();", "+\t\t\tMVP1.setName(ast.newSimpleName(\"x\")); //$NON-NLS-1$", "+\t\t\tMVP1.setValue(ast.newSimpleName(\"y\")); //$NON-NLS-1$", "+\t", "+\t\t\tMVP2 = ast.newMemberValuePair();", "+\t\t\tMVP2.setName(ast.newSimpleName(\"a\")); //$NON-NLS-1$", "+\t\t\tMVP2.setValue(ast.newSimpleName(\"b\")); //$NON-NLS-1$", "+\t\t\t", "+\t\t\tANO1 = ast.newMarkerAnnotation();", "+\t\t\tANO1.setTypeName(ast.newSimpleName(\"p\")); //$NON-NLS-1$", "+\t\t", "+\t\t\tANO2 = ast.newSingleMemberAnnotation();", "+\t\t\tANO2.setTypeName(ast.newSimpleName(\"q\")); //$NON-NLS-1$", "+\t\t\tANO2.setValue(ast.newSimpleName(\"v\")); //$NON-NLS-1$", "+\t\t\t", "+\t\t\tMOD1 = ast.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD);", "+\t\t\tMOD2 = ast.newModifier(Modifier.ModifierKeyword.FINAL_KEYWORD);", "+\t\t\t", "+\t\t\tEC1 = ast.newEnumConstantDeclaration();", "+\t\t\tEC1.setName(ast.newSimpleName(\"F\")); //$NON-NLS-1$", "+\t\t\tEC2 = ast.newEnumConstantDeclaration();", "+\t\t\tEC2.setName(ast.newSimpleName(\"G\")); //$NON-NLS-1$", "+\t\t}"]}], "num": 35030}
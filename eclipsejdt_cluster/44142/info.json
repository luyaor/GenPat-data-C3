{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "251d1c95e2c6e1f1d59920797647222c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ea28411d557c024dfddcdf8d5ecbe04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "bc8a42889f857ed7728b976d31e674de6afdad4d", "commitAfterChange": "e50f3d9d374cf35289e57b1f80fafcaa8e59eb2e", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " public void generateSyntheticEnclosingInstanceValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "signatureAfterChange": " public void generateSyntheticEnclosingInstanceValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "diff": ["-\t\t\t\t", "+", "+\t\tboolean needEnclosingInstanceNullCheck = currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4;", "+\t\t\t\t\t\t", "+\t\t\t\tif (needEnclosingInstanceNullCheck){", "+\t\t\t\t\tdup();", "+\t\t\t\t\tinvokeObjectGetClass(); // will perform null check", "+\t\t\t\t\tpop();", "+\t\t\t\t}", "+\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac011e8dad49b50407385007ea485c94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "1585d95aacd546d0fef8e25ddee2f5a6f64f7c62", "commitAfterChange": "bcf6d39cea27ed7bf3bf85709bd7e60dc5605058", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType,  \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tMethodBinding matchingMethod, \t\tObjectVector found)", "signatureAfterChange": " \tpublic MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType,  \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tMethodBinding matchingMethod, \t\tObjectVector found)", "diff": ["+\t\tCompilationUnitScope unitScope = compilationUnitScope();", "-\t\t\tif (matchingMethod != null) compilationUnitScope().recordTypeReferences(matchingMethod.thrownExceptions);", "+\t\t\tif (matchingMethod != null)", "+\t\t\t\tunitScope.recordTypeReferences(matchingMethod.thrownExceptions);", "-\t\t\tcompilationUnitScope().recordTypeReferences(candidates[0].thrownExceptions);", "+\t\t\tunitScope.recordTypeReferences(candidates[0].thrownExceptions);", "+\t\tboolean isCompliant14 = unitScope.environment.options.complianceLevel >= ClassFileConstants.JDK1_4;", "+\t\tif (isCompliant14)", "+\t\t\treturn mostSpecificMethodBinding(candidates, candidatesCount, argumentTypes, invocationSite);"]}], "num": 44142}
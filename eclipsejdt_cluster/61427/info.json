{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c213d35cce8713e1fd47b37fb25f5c5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36b014252dce5c7755bbecc23f2edacc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "b2caa750738c585e3970cd6cbdee229067bea596", "commitAfterChange": "8d1eb8a1ba1f8d42e85f057c2e74fe0db8cb690d", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " protected void consumeBinaryExpression(int op)", "signatureAfterChange": " protected void consumeBinaryExpression(int op)", "diff": ["-\tif (op == OR_OR) {", "-\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\tnew OR_OR_Expression(", "-\t\t\t\tthis.expressionStack[this.expressionPtr], ", "-\t\t\t\tthis.expressionStack[this.expressionPtr + 1], ", "-\t\t\t\top); ", "-\t} else {", "-\t\tif (op == AND_AND) {", "+\tExpression expr1 = this.expressionStack[this.expressionPtr];", "+\tExpression expr2 = this.expressionStack[this.expressionPtr + 1];", "+\tswitch(op) {", "+\t\tcase OR_OR :", "+\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\tnew OR_OR_Expression(", "+\t\t\t\t\texpr1, ", "+\t\t\t\t\texpr2, ", "+\t\t\t\t\top); ", "+\t\t\tbreak;", "+\t\tcase AND_AND :", "-\t\t\t\t\tthis.expressionStack[this.expressionPtr], ", "-\t\t\t\t\tthis.expressionStack[this.expressionPtr + 1], ", "+\t\t\t\t\texpr1, ", "+\t\t\t\t\texpr2, ", "-\t\t} else {", "+\t\t\tbreak;", "+\t\tcase PLUS :", "-\t\t\tif ((op == PLUS) && this.optimizeStringLiterals) {", "-\t\t\t\tExpression expr1, expr2;", "-\t\t\t\texpr1 = this.expressionStack[this.expressionPtr];", "-\t\t\t\texpr2 = this.expressionStack[this.expressionPtr + 1];", "+\t\t\tif (this.optimizeStringLiterals) {", "+\t\t\t} else if (expr1 instanceof StringLiteral) {", "+\t\t\t\tif (expr2 instanceof StringLiteral) {", "+\t\t\t\t\t// string + string", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\t\t\t((StringLiteral) expr1).extendsWith((StringLiteral) expr2); ", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\t\t\tnew BinaryExpression(", "+\t\t\t\t\t\t\texpr1, ", "+\t\t\t\t\t\t\texpr2, ", "+\t\t\t\t\t\t\top);", "+\t\t\t\t}", "-\t\t\t\t\t\tthis.expressionStack[this.expressionPtr], ", "-\t\t\t\t\t\tthis.expressionStack[this.expressionPtr + 1], ", "+\t\t\t\t\t\texpr1, ", "+\t\t\t\t\t\texpr2, ", "-\t\t}", "+\t\t\tbreak;", "+\t\tdefault :", "+\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\tnew BinaryExpression(", "+\t\t\t\t\texpr1, ", "+\t\t\t\t\texpr2, ", "+\t\t\t\t\top);\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "895be80da000500a2a9b3e741645e5da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " protected void consumeBinaryExpression(int op)", "signatureAfterChange": " protected void consumeBinaryExpression(int op)", "diff": ["-\texpressionPtr--;", "-\texpressionLengthPtr--;", "+\tthis.expressionPtr--;", "+\tthis.expressionLengthPtr--;", "-\t\texpressionStack[expressionPtr] = ", "+\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\t\texpressionStack[expressionPtr], ", "-\t\t\t\texpressionStack[expressionPtr + 1], ", "+\t\t\t\tthis.expressionStack[this.expressionPtr], ", "+\t\t\t\tthis.expressionStack[this.expressionPtr + 1], ", "-\t\t\texpressionStack[expressionPtr] = ", "+\t\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\t\t\texpressionStack[expressionPtr], ", "-\t\t\t\t\texpressionStack[expressionPtr + 1], ", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr], ", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr + 1], ", "-\t\t\tif ((op == PLUS) && optimizeStringLiterals) {", "+\t\t\tif ((op == PLUS) && this.optimizeStringLiterals) {", "-\t\t\t\texpr1 = expressionStack[expressionPtr];", "-\t\t\t\texpr2 = expressionStack[expressionPtr + 1];", "+\t\t\t\texpr1 = this.expressionStack[this.expressionPtr];", "+\t\t\t\texpr2 = this.expressionStack[this.expressionPtr + 1];", "-\t\t\t\t\t\texpressionStack[expressionPtr] = ", "+\t\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\t\t\t\texpressionStack[expressionPtr] = ", "+\t\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\t\t\t\texpressionStack[expressionPtr] = new BinaryExpression(expr1, expr2, PLUS);", "+\t\t\t\t\t\tthis.expressionStack[this.expressionPtr] = new BinaryExpression(expr1, expr2, PLUS);", "-\t\t\t\t\texpressionStack[expressionPtr] = new BinaryExpression(expr1, expr2, PLUS);", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr] = new BinaryExpression(expr1, expr2, PLUS);", "-\t\t\t\texpressionStack[expressionPtr] = ", "+\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\t\t\t\texpressionStack[expressionPtr], ", "-\t\t\t\t\t\texpressionStack[expressionPtr + 1], ", "+\t\t\t\t\t\tthis.expressionStack[this.expressionPtr], ", "+\t\t\t\t\t\tthis.expressionStack[this.expressionPtr + 1], "]}], "num": 61427}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3106dbd3d422a0ee76a49c4fd849857", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3365bdd1a7ae690f6e65e7b8f69704bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredLocalVariable.java", "commitBeforeChange": "ff1eb602a8aea39b1e15b206441aadf76bfaa984", "commitAfterChange": "dc5ee42cb3e5694c60c3a1f62c20766cb3cb2274", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " public Statement updatedStatement()", "signatureAfterChange": " public Statement updatedStatement()", "diff": ["+\t/* update annotations */", "+\tif (modifiers != 0) {", "+\t\tthis.localDeclaration.modifiers |= modifiers;", "+\t\tif (this.modifiersStart < this.localDeclaration.declarationSourceStart) {", "+\t\t\tthis.localDeclaration.declarationSourceStart = modifiersStart;", "+\t\t}", "+\t}", "+\t/* update annotations */", "+\tif (annotationCount > 0){", "+\t\tint existingCount = localDeclaration.annotations == null ? 0 : localDeclaration.annotations.length;", "+\t\tAnnotation[] annotationReferences = new Annotation[existingCount + annotationCount];", "+\t\tif (existingCount > 0){", "+\t\t\tSystem.arraycopy(localDeclaration.annotations, 0, annotationReferences, annotationCount, existingCount);", "+\t\t}", "+\t\tfor (int i = 0; i < annotationCount; i++){", "+\t\t\tannotationReferences[i] = annotations[i].updatedAnnotationReference();", "+\t\t}", "+\t\tlocalDeclaration.annotations = annotationReferences;", "+\t\t", "+\t\tint start = this.annotations[0].annotation.sourceStart;", "+\t\tif (start < this.localDeclaration.declarationSourceStart) {", "+\t\t\tthis.localDeclaration.declarationSourceStart = start;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a2b95ce17cf40fd13bc32e94b32b7b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredMethod.java", "commitBeforeChange": "ff1eb602a8aea39b1e15b206441aadf76bfaa984", "commitAfterChange": "dc5ee42cb3e5694c60c3a1f62c20766cb3cb2274", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " public AbstractMethodDeclaration updatedMethodDeclaration()", "signatureAfterChange": " public AbstractMethodDeclaration updatedMethodDeclaration()", "diff": ["-", "+\t/* update annotations */", "+\tif (modifiers != 0) {", "+\t\tthis.methodDeclaration.modifiers |= modifiers;", "+\t\tif (this.modifiersStart < this.methodDeclaration.declarationSourceStart) {", "+\t\t\tthis.methodDeclaration.declarationSourceStart = modifiersStart;", "+\t\t}", "+\t}", "+\t/* update annotations */", "+\tif (annotationCount > 0){", "+\t\tint existingCount = methodDeclaration.annotations == null ? 0 : methodDeclaration.annotations.length;", "+\t\tAnnotation[] annotationReferences = new Annotation[existingCount + annotationCount];", "+\t\tif (existingCount > 0){", "+\t\t\tSystem.arraycopy(methodDeclaration.annotations, 0, annotationReferences, annotationCount, existingCount);", "+\t\t}", "+\t\tfor (int i = 0; i < annotationCount; i++){", "+\t\t\tannotationReferences[i] = annotations[i].updatedAnnotationReference();", "+\t\t}", "+\t\tmethodDeclaration.annotations = annotationReferences;", "+\t\t", "+\t\tint start = this.annotations[0].annotation.sourceStart;", "+\t\tif (start < this.methodDeclaration.declarationSourceStart) {", "+\t\t\tthis.methodDeclaration.declarationSourceStart = start;", "+\t\t}", "+\t}", "+\t"]}], "num": 35317}
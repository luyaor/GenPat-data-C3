{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1739f9c283792d987b18e9e64174cc60", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1667c838428030b55b0f513ff6ca591a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "4f0e2d1dce5fad13089e3fb4fcd43ccba005c83c", "commitAfterChange": "698c26d613731d0111dbddcb370ca40364ac7e62", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 129, "signatureBeforeChange": " \tprivate void findVariableName( \t\tchar[] token, \t\tchar[] qualifiedPackageName, \t\tchar[] qualifiedSourceName, \t\tchar[] sourceName, \t\tfinal TypeBinding typeBinding, \t\tchar[][] discouragedNames, \t\tfinal char[][] forbiddenNames, \t\tint dim, \t\tint kind, \t\tint modifiers)", "signatureAfterChange": " \tprivate void findVariableName( \t\t\tchar[] token, \t\t\tchar[] qualifiedPackageName, \t\t\tchar[] qualifiedSourceName, \t\t\tchar[] sourceName, \t\t\tfinal TypeBinding typeBinding, \t\t\tchar[][] discouragedNames, \t\t\tfinal char[][] forbiddenNames, \t\t\tint dim, \t\t\tint kind, \t\t\tint modifiers)", "diff": ["-\t\tchar[] token,", "-\t\tchar[] qualifiedPackageName,", "-\t\tchar[] qualifiedSourceName,", "-\t\tchar[] sourceName,", "-\t\tfinal TypeBinding typeBinding,", "-\t\tchar[][] discouragedNames,", "-\t\tfinal char[][] forbiddenNames,", "-\t\tint dim,", "-\t\tint kind,", "-\t\tint modifiers){", "+\t\t\tchar[] token,", "+\t\t\tchar[] qualifiedPackageName,", "+\t\t\tchar[] qualifiedSourceName,", "+\t\t\tchar[] sourceName,", "+\t\t\tfinal TypeBinding typeBinding,", "+\t\t\tchar[][] discouragedNames,", "+\t\t\tfinal char[][] forbiddenNames,", "+\t\t\tint dim,", "+\t\t\tint kind,", "+\t\t\tint modifiers){", "+\t\tfindVariableName(", "+\t\t\t\ttoken,", "+\t\t\t\tqualifiedPackageName,", "+\t\t\t\tqualifiedSourceName,", "+\t\t\t\tsourceName,", "+\t\t\t\ttypeBinding,", "+\t\t\t\tdiscouragedNames,", "+\t\t\t\tforbiddenNames,", "+\t\t\t\tfalse,", "+\t\t\t\tdim,", "+\t\t\t\tkind,", "+\t\t\t\tmodifiers);", "+\t}", "-\t\tif (dim > 0){", "-\t\t\tint l = qualifiedSourceName.length;", "-\t\t\tdisplayName = new char[l+(2*dim)];", "-\t\t\tSystem.arraycopy(qualifiedSourceName, 0, displayName, 0, l);", "-\t\t\tfor(int i = 0; i < dim; i++){", "-\t\t\t\tdisplayName[l+(i*2)] = '[';", "-\t\t\t\tdisplayName[l+(i*2)+1] = ']';", "-\t\t\tdisplayName = qualifiedSourceName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "759e021d0a2d998c1fd68768665b1e31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "618f3771c49dbf9480ae16a58263680af2b36ad6", "commitAfterChange": "7cfc4523cdcfe787f1d0d2fd75b08c06e5b4b089", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean checkDeprecation(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tpublic boolean checkDeprecation(int javadocStart, int javadocEnd)", "diff": ["-\t\tboolean foundDeprecated = false;", "-\t\t\tint endComment = javadocEnd - 2;", "+\t\t\tthis.endComment = javadocEnd - 2;", "-\t\t\t\tthis.astLengthPtr = -1;", "-\t\t\t\tthis.astPtr = -1;", "-\t\t\t\tthis.currentTokenType = -1;", "-\t\t\t\tthis.scanner.startPosition = this.index;", "-\t\t\t\tthis.inlineTagStarted = false;", "-\t\t\t\tthis.lineStarted = false;", "-\t\t\t\tint lineNumber = this.sourceParser.scanner.getLineNumber(javadocStart);", "-\t\t\t\tint lastLineNumber = this.sourceParser.scanner.getLineNumber(javadocEnd);", "-\t\t\t\tthis.lineEnd = lineNumber == lastLineNumber ? javadocEnd - 2 : javadocStart + 3;", "-\t\t\t\tchar nextCharacter= 0, previousChar;", "-\t\t\t\tint charPosition = -1, inlineStartPosition = 0;", "-\t\t\t\t", "-\t\t\t\t// Loop on each comment character", "-\t\t\t\twhile (this.index < endComment) {", "-\t\t\t\t\tint previousPosition = this.index;", "-\t\t\t\t\tpreviousChar = nextCharacter;", "-\t\t\t\t\t", "-\t\t\t\t\t// Calculate line end (cannot use this.scanner.linePtr as scanner does not parse line ends again)", "-\t\t\t\t\tif (this.index > this.lineEnd) {", "-\t\t\t\t\t\tif (lineNumber < lastLineNumber) {", "-\t\t\t\t\t\t\tthis.lineEnd = this.sourceParser.scanner.getLineEnd(++lineNumber) - 1;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.lineEnd = javadocEnd - 2;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.lineStarted = false;", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\t// Read next char only if token was consumed", "-\t\t\t\t\tif (this.currentTokenType < 0) {", "-\t\t\t\t\t\tnextCharacter = readChar(); // consider unicodes", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tswitch (this.currentTokenType) {", "-\t\t\t\t\t\t\tcase TerminalTokens.TokenNameRBRACE:", "-\t\t\t\t\t\t\t\tnextCharacter = '}';", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase TerminalTokens.TokenNameMULTIPLY:", "-\t\t\t\t\t\t\t\tnextCharacter = '*';", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\tnextCharacter = this.scanner.currentCharacter;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\tswitch (nextCharacter) {", "-\t\t\t\t\t\tcase '@' :", "-\t\t\t\t\t\t\tboolean valid = false;", "-\t\t\t\t\t\t\t// Start tag parsing only if we are on line beginning or at inline tag beginning", "-\t\t\t\t\t\t\tif (!this.lineStarted || previousChar == '{') {", "-\t\t\t\t\t\t\t\tthis.lineStarted = true;", "-\t\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\t\tthis.inlineTagStarted = false;", "-\t\t\t\t\t\t\t\t\tint start = this.astStack[this.astPtr].sourceStart;", "-\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidTag(start, charPosition);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tif (previousChar == '{') {", "-\t\t\t\t\t\t\t\t\t\tthis.inlineTagStarted = true;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tthis.scanner.resetTo(this.index, endComment);", "-\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1; // flush token cache at line begin", "-\t\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\t\tint tk = readTokenAndConsume();", "-\t\t\t\t\t\t\t\t\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t\t\t\t\t\t\tswitch (tk) {", "-\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "-\t\t\t\t\t\t\t\t\t\t\t\tchar[] tag = this.scanner.getCurrentIdentifierSource();", "-\t\t\t\t\t\t\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tfoundDeprecated = true;", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = true;", "-\t\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_INHERITDOC)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tthis.javadoc.inherited = true;", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = true;", "-\t\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_PARAM)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseParam();", "-\t\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_EXCEPTION)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseThrows();", "-\t\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_SEE) ||", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(tag, TAG_LINK) ||", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(tag, TAG_LINKPLAIN)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee();", "-\t\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "-\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamereturn :", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseReturn();", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethrows :", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseThrows();", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif (!valid && this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\t\t\t\tthis.inlineTagStarted = false;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t} catch (InvalidInputException e) {", "-\t\t\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '\\r':", "-\t\t\t\t\t\tcase '\\n':", "-\t\t\t\t\t\t\tthis.lineStarted = false;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '}' :", "-\t\t\t\t\t\t\tif (this.inlineTagStarted) this.inlineTagStarted = false;", "-\t\t\t\t\t\t\tthis.lineStarted = true;", "-\t\t\t\t\t\t\tcharPosition = previousPosition;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '{' :", "-\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\tthis.inlineTagStarted = false;", "-\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidTag(inlineStartPosition, this.index);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tinlineStartPosition = previousPosition;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '*' :", "-\t\t\t\t\t\t\tcharPosition = previousPosition;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault :", "-\t\t\t\t\t\t\tcharPosition = previousPosition;", "-\t\t\t\t\t\t\tif (!this.lineStarted && !CharOperation.isWhitespace(nextCharacter)) {", "-\t\t\t\t\t\t\t\tthis.lineStarted = true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tsuper.checkDeprecation(javadocStart, javadocEnd);", "-\t\t\tif (this.checkJavadoc) {", "-\t\t\t\tupdateJavadoc();", "-\t\t\t}", "-\t\treturn foundDeprecated;", "+\t\treturn this.deprecated;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fa51b90f183d30ca3c5b90f511a7aa2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CopyMoveTests.java", "commitBeforeChange": "fda975d98b069f678ae89a663957463bb7bd4088", "commitAfterChange": "2e99c72cc03690dcb30e61cdafeb829a4f1ada2f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, IProgressMonitor monitor) throws JavaModelException", "diff": ["+public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, IProgressMonitor monitor) throws JavaModelException {", "+\tmovePositive(elements, destinations, siblings, names, force, true, null);", "+}", "-public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, IProgressMonitor monitor) throws JavaModelException {", "-\t\tstartDeltas();", "-\t\t\tIJavaElementDelta destDelta = null;", "-\t\t\tif (isMainType(element, destinations[i]) && names != null && names[i] != null) { //moved/renamed main type to same cu", "-\t\t\t\tdestDelta = this.deltaListener.getDeltaFor(moved.getParent());", "-\t\t\t\tassertTrue(\"Renamed compilation unit as result of main type not added\", destDelta != null && destDelta.getKind() == IJavaElementDelta.ADDED);", "-\t\t\t\tassertTrue(\"flag should be F_MOVED_FROM\", (destDelta.getFlags() & IJavaElementDelta.F_MOVED_FROM) > 0);", "-\t\t\t\tassertTrue(\"moved from handle should be original\", destDelta.getMovedFromElement().equals(element.getParent()));", "-\t\t\t} else {", "-\t\t\t\tdestDelta = this.deltaListener.getDeltaFor(destinations[i], true);", "-\t\t\t\tassertTrue(\"Destination container not changed\", destDelta != null && destDelta.getKind() == IJavaElementDelta.CHANGED);", "-\t\t\t\tIJavaElementDelta[] deltas = destDelta.getAddedChildren();", "-\t\t\t\tassertTrue(\"Added children not correct for element copy\", deltas[i].getElement().equals(moved));", "-\t\t\t\tassertTrue(\"should be K_ADDED\", deltas[i].getKind() == IJavaElementDelta.ADDED);", "-\t\t\t\tIJavaElementDelta sourceDelta= this.deltaListener.getDeltaFor(element, false);", "-\t\t\t\tassertTrue(\"should be K_REMOVED\", sourceDelta.getKind() == IJavaElementDelta.REMOVED);", "-\t\tstopDeltas();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0486cf5b1e45fcd3ca8a1600da55bcd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "8abf03ebc64c5dfaa72b42e56c19fb01c4c7861e", "commitAfterChange": "5b58321cc6529786ed20cb721ece7536a2d99088", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "signatureAfterChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "diff": ["-\t\tswitch (expressionOperatorID) {", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.EQUAL_EQUAL :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.EQUALS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS_EQUAL :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.LESS_EQUALS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER_EQUAL :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.GREATER_EQUALS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT_EQUAL :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.NOT_EQUALS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LEFT_SHIFT :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.LEFT_SHIFT);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.RIGHT_SHIFT :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.RIGHT_SHIFT_SIGNED);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.UNSIGNED_RIGHT_SHIFT :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.RIGHT_SHIFT_UNSIGNED);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR_OR :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.CONDITIONAL_OR);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND_AND :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.CONDITIONAL_AND);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.PLUS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MINUS :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.MINUS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.REMAINDER :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.REMAINDER);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.XOR :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.XOR);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.AND);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MULTIPLY :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.TIMES);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.OR);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.DIVIDE :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.DIVIDE);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.GREATER);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.LESS);", "-\t\t}", "+\t\tinfixExpression.setOperator(getOperatorFor(expressionOperatorID));"]}], "num": 42927}
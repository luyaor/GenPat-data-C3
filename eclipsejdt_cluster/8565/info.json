{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cbbca7b6da893d66aaa6bd111a8b9913", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04c3146b8d989953a0fdcfec8b8990ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetCodeStream.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void checkcast(int baseId)", "signatureAfterChange": " protected void checkcast(int baseId)", "diff": ["-\tcountLabels = 0;", "+\tthis.countLabels = 0;", "-\t\tposition++;", "-\t\tbCodeStream[classFileOffset++] = OPC_checkcast;", "+\t\tthis.position++;", "+\t\tthis.bCodeStream[this.classFileOffset++] = OPC_checkcast;", "-\t\t\twriteUnsignedShort(constantPool.literalIndexForJavaLangByte());", "+\t\t\twriteUnsignedShort(this.constantPool.literalIndexForJavaLangByte());", "-\t\t\twriteUnsignedShort(constantPool.literalIndexForJavaLangShort());", "+\t\t\twriteUnsignedShort(this.constantPool.literalIndexForJavaLangShort());", "-\t\t\twriteUnsignedShort(constantPool.literalIndexForJavaLangCharacter());", "+\t\t\twriteUnsignedShort(this.constantPool.literalIndexForJavaLangCharacter());", "-\t\t\twriteUnsignedShort(constantPool.literalIndexForJavaLangInteger());", "+\t\t\twriteUnsignedShort(this.constantPool.literalIndexForJavaLangInteger());", "-\t\t\twriteUnsignedShort(constantPool.literalIndexForJavaLangLong());", "+\t\t\twriteUnsignedShort(this.constantPool.literalIndexForJavaLangLong());", "-\t\t\twriteUnsignedShort(constantPool.literalIndexForJavaLangFloat());", "+\t\t\twriteUnsignedShort(this.constantPool.literalIndexForJavaLangFloat());", "-\t\t\twriteUnsignedShort(constantPool.literalIndexForJavaLangDouble());", "+\t\t\twriteUnsignedShort(this.constantPool.literalIndexForJavaLangDouble());", "-\t\t\twriteUnsignedShort(constantPool.literalIndexForJavaLangBoolean());", "+\t\t\twriteUnsignedShort(this.constantPool.literalIndexForJavaLangBoolean());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48b6c8741a24d25a03702dc3fbeec435", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "931e434bb3e4b9f62577b10f8123cfc028893969", "commitAfterChange": "c0b519c3b149b13ea0f307f0d3414359b2cf0639", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "  public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["+", "+public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {\t\t", "+\tint pc = codeStream.position;", "+\tif (this.constant != Constant.NotAConstant) {", "+\t\t\tcodeStream.generateConstant(this.constant, this.implicitConversion);", "-", "-\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {\t\t", "-\t\tint pc = codeStream.position;", "-\t\tif (constant != Constant.NotAConstant) {", "-\t\t\tif (valueRequired) {", "-\t\t\t\tcodeStream.generateConstant(constant, implicitConversion);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tFieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);", "-\t\t\tif (lastFieldBinding != null) {", "-\t\t\t\tboolean isStatic = lastFieldBinding.isStatic();", "-\t\t\t\tConstant fieldConstant = lastFieldBinding.constant();", "-\t\t\t\tif (fieldConstant != Constant.NotAConstant) {", "+\t} else {", "+\t\tFieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);", "+\t\tif (lastFieldBinding != null) {", "+\t\t\tboolean isStatic = lastFieldBinding.isStatic();", "+\t\t\tConstant fieldConstant = lastFieldBinding.constant();", "+\t\t\tif (fieldConstant != Constant.NotAConstant) {", "+\t\t\t\tif (!isStatic){", "+\t\t\t\t\tcodeStream.invokeObjectGetClass();", "+\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t}", "+\t\t\t\tif (valueRequired) { // inline the last field constant", "+\t\t\t\t\tcodeStream.generateConstant(fieldConstant, this.implicitConversion);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tboolean isFirst = lastFieldBinding == this.binding ", "+\t\t\t\t\t\t\t\t\t\t\t\t&& (this.indexOfFirstFieldBinding == 1 || lastFieldBinding.declaringClass == currentScope.enclosingReceiverType())", "+\t\t\t\t\t\t\t\t\t\t\t\t&& this.otherBindings == null; // could be dup: next.next.next", "+\t\t\t\tTypeBinding requiredGenericCast = getGenericCast(this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length);", "+\t\t\t\tif (valueRequired  ", "+\t\t\t\t\t\t|| (!isFirst && currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4)", "+\t\t\t\t\t\t|| ((this.implicitConversion & TypeIds.UNBOXING) != 0)", "+\t\t\t\t\t\t|| requiredGenericCast != null) {", "+\t\t\t\t\tint lastFieldPc = codeStream.position;", "+\t\t\t\t\tif (lastFieldBinding.declaringClass == null) { // array length", "+\t\t\t\t\t\tcodeStream.arraylength();", "+\t\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// could occur if !valueRequired but compliance >= 1.4", "+\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tSyntheticMethodBinding accessor =", "+\t\t\t\t\t\t\tthis.syntheticReadAccessors == null", "+\t\t\t\t\t\t\t\t? null", "+\t\t\t\t\t\t\t\t: this.syntheticReadAccessors[this.syntheticReadAccessors.length - 1];", "+\t\t\t\t\t\tif (accessor == null) {", "+\t\t\t\t\t\t\tif (isStatic) {", "+\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (requiredGenericCast != null) codeStream.checkcast(requiredGenericCast);", "+\t\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tboolean isUnboxing = (this.implicitConversion & TypeIds.UNBOXING) != 0;", "+\t\t\t\t\t\t\t// conversion only generated if unboxing", "+\t\t\t\t\t\t\tif (isUnboxing) codeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t\tswitch (isUnboxing ? postConversionType(currentScope).id : lastFieldBinding.type.id) {", "+\t\t\t\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\t\t\t\tcodeStream.pop2();", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\tint fieldPosition = (int) (this.sourcePositions[this.sourcePositions.length - 1] >>> 32);", "+\t\t\t\t\tcodeStream.recordPositionsFrom(lastFieldPc, fieldPosition);", "+\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.invokeObjectGetClass();", "+\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\t\tif (valueRequired) { // inline the last field constant", "-\t\t\t\t\t\tcodeStream.generateConstant(fieldConstant, implicitConversion);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tboolean isFirst = lastFieldBinding == this.binding ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t&& (this.indexOfFirstFieldBinding == 1 || lastFieldBinding.declaringClass == currentScope.enclosingReceiverType())", "-\t\t\t\t\t\t\t\t\t\t\t\t\t&& this.otherBindings == null; // could be dup: next.next.next", "-\t\t\t\t\tTypeBinding requiredGenericCast = getGenericCast(this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length);", "-\t\t\t\t\tif (valueRequired  ", "-\t\t\t\t\t\t\t|| (!isFirst && currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4)", "-\t\t\t\t\t\t\t|| ((implicitConversion & TypeIds.UNBOXING) != 0)", "-\t\t\t\t\t\t\t|| requiredGenericCast != null) {", "-\t\t\t\t\t\tint lastFieldPc = codeStream.position;", "-\t\t\t\t\t\tif (lastFieldBinding.declaringClass == null) { // array length", "-\t\t\t\t\t\t\tcodeStream.arraylength();", "-\t\t\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t// could occur if !valueRequired but compliance >= 1.4", "-\t\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tSyntheticMethodBinding accessor =", "-\t\t\t\t\t\t\t\tsyntheticReadAccessors == null", "-\t\t\t\t\t\t\t\t\t? null", "-\t\t\t\t\t\t\t\t\t: syntheticReadAccessors[syntheticReadAccessors.length - 1];", "-\t\t\t\t\t\t\tif (accessor == null) {", "-\t\t\t\t\t\t\t\tif (isStatic) {", "-\t\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (requiredGenericCast != null) codeStream.checkcast(requiredGenericCast);", "-\t\t\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tboolean isUnboxing = (implicitConversion & TypeIds.UNBOXING) != 0;", "-\t\t\t\t\t\t\t\t// conversion only generated if unboxing", "-\t\t\t\t\t\t\t\tif (isUnboxing) codeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t\t\t\tswitch (isUnboxing ? postConversionType(currentScope).id : lastFieldBinding.type.id) {", "-\t\t\t\t\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\t\t\t\tcase T_double :", "-\t\t\t\t\t\t\t\t\t\tcodeStream.pop2();", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tdefault :", "-\t\t\t\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tint fieldPosition = (int) (this.sourcePositions[this.sourcePositions.length - 1] >>> 32);", "-\t\t\t\t\t\tcodeStream.recordPositionsFrom(lastFieldPc, fieldPosition);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (!isStatic){", "-\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}\t\t\t\t\t\t\t\t\t", "-\t\t\t\t}", "+\t\t\t\t}\t\t\t\t\t\t\t\t\t", "-\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "738d9f8d50be97e46d124b3102b5e701", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ClassInstanceCreation.java", "commitBeforeChange": "2bf3ca4fdac4d07bd91bee9a8957437ed1319e5b", "commitAfterChange": "095f68551aabc4fec8e028b2a81b692255ffc31a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tint treeSize()", "signatureAfterChange": " \tint treeSize()", "diff": ["+\t\t// n.b. typeParameters == null for ast.API_LEVEL == 2.0", "-\t\t\t+ (typeName == null ? 0 : getName().treeSize())", "-\t\t\t+ (type == null ? 0 : getType().treeSize())", "-\t\t\t+ (optionalExpression == null ? 0 : getExpression().treeSize())", "-\t\t\t+ arguments.listSize()", "-\t\t\t+ (optionalAnonymousClassDeclaration == null ? 0 : getAnonymousClassDeclaration().treeSize());", "+\t\t\t+ (this.typeName == null ? 0 : getName().treeSize())", "+\t\t\t+ (this.type == null ? 0 : getType().treeSize())", "+\t\t\t+ (this.optionalExpression == null ? 0 : getExpression().treeSize())", "+\t\t\t+ (this.typeParameters == null ? 0 : this.typeParameters.listSize())", "+\t\t\t+ (this.arguments == null ? 0 : this.arguments.listSize())", "+\t\t\t+ (this.optionalAnonymousClassDeclaration == null ? 0 : getAnonymousClassDeclaration().treeSize());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8283e9c0db5df53bc3f0b498c562b9e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "fced1a7a2b8f5ce77723d058091976d51b43704e", "commitAfterChange": "6900dd1a03d1ad901ee84c7d15bd4e318744abe6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "signatureAfterChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "diff": ["-\t\t\tif (qualifiedSelection != null", "-\t\t\t\t&& !CharOperation.equals(qualifiedSelection, typeBinding.readableName())) {", "+\t\t\tif (this.qualifiedSelection != null", "+\t\t\t\t&& !CharOperation.equals(this.qualifiedSelection, typeBinding.readableName())) {", "-\t\t\t\tnoProposal = false;", "+\t\t\t\tthis.noProposal = false;", "-\t\t\t\tnoProposal = false;", "+\t\t\t\tthis.noProposal = false;", "-\t\t\t\tnoProposal = false;", "+\t\t\t\tthis.noProposal = false;", "-\t\t\t\tnoProposal = false;", "+\t\t\t\tthis.noProposal = false;", "-\t\t\t\t\t\tactualSelectionStart,", "-\t\t\t\t\t\tactualSelectionEnd);", "+\t\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\t\tthis.actualSelectionEnd);", "-\t\t\t\t\t\tactualSelectionStart,", "-\t\t\t\t\t\tactualSelectionEnd);", "+\t\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\t\tthis.actualSelectionEnd);", "-\t\t\t\t\t\tnoProposal = false;", "+\t\t\t\t\t\tthis.noProposal = false;", "-\t\t\t\t\t\t\t\tnoProposal = false;", "-\t\t\t\t\t\t\t\trequestor.acceptPackage(packageBinding.readableName());", "+\t\t\t\t\t\t\t\tthis.noProposal = false;", "+\t\t\t\t\t\t\t\tthis.requestor.acceptPackage(packageBinding.readableName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4144a4c5dac603780c6889a8696775b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "8cf1dcdf2235b54b4116fb6f086a0d218e6b26f7", "commitAfterChange": "45fa88428d5d04389be0956547a1793c4e66bac3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\t\t\tsyntheticAccessor = ((SourceTypeBinding)this.codegenBinding.declaringClass).addSyntheticMethod(this.codegenBinding, isSuperAccess());", "+\t\t\tthis.syntheticAccessor = ((SourceTypeBinding)this.codegenBinding.declaringClass).addSyntheticMethod(this.codegenBinding, isSuperAccess());", "-\t} else if (receiver instanceof QualifiedSuperReference){ // qualified super", "+\t} else if (this.receiver instanceof QualifiedSuperReference){ // qualified super", "-\t\tSourceTypeBinding destinationType = (SourceTypeBinding)(((QualifiedSuperReference)receiver).currentCompatibleType);", "-\t\tsyntheticAccessor = destinationType.addSyntheticMethod(this.codegenBinding, isSuperAccess());", "+\t\tSourceTypeBinding destinationType = (SourceTypeBinding)(((QualifiedSuperReference)this.receiver).currentCompatibleType);", "+\t\tthis.syntheticAccessor = destinationType.addSyntheticMethod(this.codegenBinding, isSuperAccess());", "-\t} else if (binding.isProtected()){", "+\t} else if (this.binding.isProtected()){", "-\t\tif (((bits & DepthMASK) != 0) ", "+\t\tif (((this.bits & ASTNode.DepthMASK) != 0) ", "-\t\t\tSourceTypeBinding currentCompatibleType = (SourceTypeBinding)enclosingSourceType.enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "-\t\t\tsyntheticAccessor = currentCompatibleType.addSyntheticMethod(this.codegenBinding, isSuperAccess());", "+\t\t\tSourceTypeBinding currentCompatibleType = (SourceTypeBinding)enclosingSourceType.enclosingTypeAt((this.bits & ASTNode.DepthMASK) >> ASTNode.DepthSHIFT);", "+\t\t\tthis.syntheticAccessor = currentCompatibleType.addSyntheticMethod(this.codegenBinding, isSuperAccess());", "-\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !(receiver.isImplicitThis() && this.codegenBinding.isStatic()))", "-\t\t\t\t&& this.binding.declaringClass.id != T_JavaLangObject) // no change for Object methods", "+\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !(this.receiver.isImplicitThis() && this.codegenBinding.isStatic()))", "+\t\t\t\t&& this.binding.declaringClass.id != TypeIds.T_JavaLangObject) // no change for Object methods"]}], "num": 8565}
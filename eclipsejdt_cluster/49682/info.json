{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ae55a65eea3a7b781cfeadf178b276f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "035c1ab6d48fd70eea6f6e60e187c8a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ProblemConstructorTest.java", "commitBeforeChange": "8d8cc91b7aba4777ee9418a3cef6e1e163bfbf27", "commitAfterChange": "d0534e0376f1634b8fe35d19dde78d7433440f37", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void test005()", "signatureAfterChange": " public void test005()", "diff": ["-\t\t\t\t\"A.java\",", "-\t\t\t\t\"public class A {\\n\" +", "-\t\t\t    \"    public A(String s) {\\n\" +", "-\t\t\t    \"            B.test();\\n\" +", "-\t\t\t    \"    }\\n\" +", "-                \"\\n\" +", "-\t\t\t    \"    private static class B extends A {\\n\" +", "-\t\t\t    \"       public B () { super(\\\"\\\"); }\\n\" +", "-\t\t\t    \"\\n\" +", "-\t\t\t    \"            private static void test() {\\n\" +", "-\t\t\t    \"            };\\n\" +", "-\t\t\t    \"   }\\n\" +", "-\t\t\t\t\"}\\n\"", "+\t\t\t\"A.java\",", "+\t\t\t\"public class A {\\n\" +", "+\t\t    \"\tpublic A(String s) {\\n\" +", "+\t\t    \"\t\tB.test();\\n\" +", "+\t\t    \"\t}\\n\" +", "+            \"\\n\" +", "+\t\t    \"\tprivate static class B extends A {\\n\" +", "+\t\t    \"\t\tpublic B () { super(\\\"\\\"); }\\n\" +", "+\t\t    \"\tprivate static void test() {};\\n\" +", "+\t\t    \"\t}\\n\" +", "+\t\t\t\"}\\n\"", "+\t\t},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in A.java (at line 3)\\n\" + ", "+\t\t\"\tB.test();\\n\" + ", "+\t\t\"\t^^^^^^^^\\n\" + ", "+\t\t\"Access to enclosing method test() from the type A.B is emulated by a synthetic accessor method\\n\" + ", "+\t\t\"----------\\n\");", "+}", "-\t\t\t\"1. WARNING in A.java (at line 3)\\n\" + ", "-\t\t\t\"\tB.test();\\n\" + ", "-\t\t\t\"\t^^^^^^^^\\n\" + ", "-\t\t\t\"Access to enclosing method test() from the type A.B is emulated by a synthetic accessor method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d3f830505be4d0b52c58618fd497e6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "09f42f58bcdf2fa84ccd2b8b65f28ab3036222ca", "commitAfterChange": "57e8dd41219d846363c918d62edb5007994c5c79", "methodNumberBeforeChange": 176, "methodNumberAfterChange": 176, "signatureBeforeChange": " public void test401939a()", "signatureAfterChange": " public void test401939a()", "diff": ["-\t\t\t\t\"\t    ^^^^\\n\" + ", "-\t\t\t\t\"This method must return a result of type int\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\t\"\tfoo(()->{ if (1 == 2) throw new RuntimeException(); });\\n\" + ", "-\t\t\t\t\"\t                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Dead code\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method foo(I) in the type X is not applicable for the arguments (() -> {\\n\" + ", "+\t\t\t\t\"  if ((1 == 2))\\n\" + ", "+\t\t\t\t\"      throw new RuntimeException();\\n\" + ", "+\t\t\t\t\"})\\n\" + "]}], "num": 49682}
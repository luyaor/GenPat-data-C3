{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f28547cef8d59a2eec9b7353480fce16", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11a9dbd4811afb0a1cd8689f51379e95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " public void test049()", "signatureAfterChange": " public void test049()", "diff": ["-\t\t\t\"      Stack map table: number of frames 3\\n\" + ", "-\t\t\t\"        [pc: 7, same]\\n\" + ", "+\t\t\t\"      Stack map table: number of frames 2\\n\" + ", "-\t\t\t\"      Stack map table: number of frames 3\\n\" + ", "-\t\t\t\"        [pc: 0, same]\\n\" + ", "+\t\t\t\"      Stack map table: number of frames 1\\n\" + ", "-\t\t\t\"        [pc: 9, same]\\n\" + ", "-\t\t\t\"      Stack map table: number of frames 3\\n\" + ", "-\t\t\t\"        [pc: 9, append: {int}]\\n\" + ", "-\t\t\t\"        [pc: 17, full, stack: {java.lang.Exception}, locals: {X}]\\n\" + ", "+\t\t\t\"      Stack map table: number of frames 2\\n\" + ", "+\t\t\t\"        [pc: 17, same_locals_1_stack_item, stack: {java.lang.Exception}]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf24ca14ccfb5069435ea7eddb5b8d26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprotected int selectionEnd(ICompilationUnit cu, String commentText) throws JavaModelException", "signatureAfterChange": " \tprivate int[] selectionInfo(ICompilationUnit cu, String selection, int occurences) throws JavaModelException", "diff": ["+\t */", "+\tprivate int[] selectionInfo(ICompilationUnit cu, String selection, int occurences) throws JavaModelException {", "+\t\tString source = cu.getSource();", "+\t\tint index = occurences < 0 ? source.lastIndexOf(selection) : source.indexOf(selection);", "+\t\tint max = Math.abs(occurences)-1;", "+\t\tfor (int n=0; index >= 0 && n<max; n++) {", "+\t\t\tindex = occurences < 0 ? source.lastIndexOf(selection, index) : source.indexOf(selection, index+selection.length());", "+\t\t}", "+\t\tStringBuffer msg = new StringBuffer(\"Selection '\");", "+\t\tmsg.append(selection);", "+\t\tif (index >= 0) {", "+\t\t\tif (selection.startsWith(\"/**\")) { // comment is before", "+\t\t\t\tint start = source.indexOf(\"*/\", index);", "+\t\t\t\tif (start >=0) {", "+\t\t\t\t\treturn new int[] { start+2, selection.length()-(start+2-index) };", "+\t\t\t\t} else {", "+\t\t\t\t\tmsg.append(\"' starts with an unterminated comment\");", "+\t\t\t} else if (selection.endsWith(\"*/\")) { // comment is after", "+\t\t\t\tint end = source.lastIndexOf(\"/**\", index+selection.length());", "+\t\t\t\tif (end >=0) {", "+\t\t\t\t\treturn new int[] { index, index-end };", "+\t\t\t\t} else {", "+\t\t\t\t\tmsg.append(\"' ends with an unstartted comment\");", "+\t\t\t\t}", "+\t\t\t} else { // no comment => use whole selection", "+\t\t\t\treturn new int[] { index, selection.length() };", "+\t\t} else {", "+\t\t\tmsg.append(\"' was not found in \");", "+\t\tmsg.append(source);", "-\tprotected int selectionEnd(ICompilationUnit cu, String commentText) throws JavaModelException {", "-", "-\t\t// Get dom compilation unit", "-\t\tASTParser parser = ASTParser.newParser(AST.JLS3);", "-\t\tparser.setSource(cu);", "-\t\tparser.setResolveBindings(false);", "-", "-\t\t// Look for selection", "-\t\tfinal CompilationUnit unit = (CompilationUnit) parser.createAST(null);", "-\t\tList comments = unit.getCommentList();", "-\t\tJavadoc selectionComment = null;", "-\t\tfor (int i=0, size=comments.size(); i<size && selectionComment==null; i++) {", "-\t\t\tComment comment = (Comment) comments.get(i);", "-\t\t\tif (comment.isDocComment()) {", "-\t\t\t\tJavadoc javadoc = (Javadoc) comment;", "-\t\t\t\tif (javadoc.tags().size() == 1) {", "-\t\t\t\t\tTagElement tagElement = (TagElement) javadoc.tags().get(0);", "-\t\t\t\t\tif (tagElement.fragments().size() == 1) {", "-\t\t\t\t\t\tASTNode node = (ASTNode) tagElement.fragments().get(0);", "-\t\t\t\t\t\tif (node.getNodeType() == ASTNode.TEXT_ELEMENT) {", "-\t\t\t\t\t\t\tTextElement text = (TextElement) node;", "-\t\t\t\t\t\t\tif (commentText.equals(text.getText())) {", "-\t\t\t\t\t\t\t\tselectionComment = javadoc;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (selectionComment == null) {", "-\t\t\tStringBuffer msg = new StringBuffer(\"No javadoc comment /** \");", "-\t\t\tmsg.append(commentText);", "-\t\t\tmsg.append(\" */ was found in \");", "-\t\t\tmsg.append(cu.getElementName());", "-\t\t\tmsg.append(\":\\n\");", "-\t\t\tmsg.append(cu.getBuffer().getCharacters());", "-\t\t\tassertTrue(msg.toString(), false);", "-\t\t\treturn -1;", "-\t\t}", "-\t\treturn selectionComment.getStartPosition()+selectionComment.getLength();"]}], "num": 19626}
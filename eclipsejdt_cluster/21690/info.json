{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "027331f5430bc492ad0a1a69fce0a9cc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e72fffcde42cd75c9cb6895d07b24a11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/MethodInfoWithParameterAnnotations.java", "commitBeforeChange": "94200ed39d00137579089415688a6cedf88ddec1", "commitAfterChange": "382f13be1a95be764b13ca01158d15888308733b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public IBinaryAnnotation[] getParameterAnnotations(int index)", "signatureAfterChange": " public IBinaryAnnotation[] getParameterAnnotations(int index, char[] classFileName)", "diff": ["-public IBinaryAnnotation[] getParameterAnnotations(int index) {", "-\treturn this.parameterAnnotations == null ? null : this.parameterAnnotations[index];", "+public IBinaryAnnotation[] getParameterAnnotations(int index, char[] classFileName) {", "+\ttry {", "+\t\treturn this.parameterAnnotations == null ? null : this.parameterAnnotations[index];", "+\t} catch (ArrayIndexOutOfBoundsException aioobe) {", "+\t\t// detailed reporting to track down https://bugs.eclipse.org/474081", "+\t\tStringBuffer message = new StringBuffer(\"Mismatching number of parameter annotations, \"); //$NON-NLS-1$", "+\t\tmessage.append(index);", "+\t\tmessage.append('>');", "+\t\tmessage.append(this.parameterAnnotations.length-1);", "+\t\tmessage.append(\" in \"); //$NON-NLS-1$", "+\t\tmessage.append(getSelector());", "+\t\tchar[] desc = getGenericSignature();", "+\t\tif (desc != null)", "+\t\t\tmessage.append(desc);", "+\t\telse", "+\t\t\tmessage.append(getMethodDescriptor());", "+\t\tif (classFileName != null)", "+\t\t\tmessage.append(\" in \").append(classFileName); //$NON-NLS-1$", "+\t\tthrow new IllegalStateException(message.toString(), aioobe);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efdb18144494c196e9df69d5c0eb15a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "378f419edc5509790bbfa3083244109f6abafbe2", "commitAfterChange": "ec60c6997892bec30aa4ae01a8f63027630c4cdf", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tpublic CompilationUnit convert(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, char[] source)", "signatureAfterChange": "  \tpublic CompilationUnit convert(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, char[] source)", "diff": ["-\t\tif(unit.compilationResult.recoveryScannerData != null) {", "-\t\t\tRecoveryScanner recoveryScanner = new RecoveryScanner(this.scanner, unit.compilationResult.recoveryScannerData.removeUnused());", "-\t\t\tthis.scanner = recoveryScanner;", "-\t\t\tthis.docParser.scanner = this.scanner;", "-\t\t}", "-\t\tthis.compilationUnitSource = source;", "-\t\tthis.compilationUnitSourceLength = source.length;", "-\t\tthis.scanner.setSource(source, unit.compilationResult);", "-\t\tCompilationUnit compilationUnit = new CompilationUnit(this.ast);", "-\t\tcompilationUnit.setStatementsRecoveryData(unit.compilationResult.recoveryScannerData);", "-", "-\t\t// Parse comments", "-\t\tint[][] comments = unit.comments;", "-\t\tif (comments != null) {", "-\t\t\tbuildCommentsTable(compilationUnit, comments);", "-\t\t}", "-", "-\t\t// handle the package declaration immediately", "-\t\t// There is no node corresponding to the package declaration", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(compilationUnit, unit);", "-\t\t}", "-\t\tif (unit.currentPackage != null) {", "-\t\t\tPackageDeclaration packageDeclaration = convertPackage(unit);", "-\t\t\tcompilationUnit.setPackage(packageDeclaration);", "-\t\t}", "-\t\torg.eclipse.jdt.internal.compiler.ast.ImportReference[] imports = unit.imports;", "-\t\tif (imports != null) {", "-\t\t\tint importLength = imports.length;", "-\t\t\tfor (int i = 0; i < importLength; i++) {", "-\t\t\t\tcompilationUnit.imports().add(convertImport(imports[i]));", "+\t\ttry {", "+\t\t\tif(unit.compilationResult.recoveryScannerData != null) {", "+\t\t\t\tRecoveryScanner recoveryScanner = new RecoveryScanner(this.scanner, unit.compilationResult.recoveryScannerData.removeUnused());", "+\t\t\t\tthis.scanner = recoveryScanner;", "+\t\t\t\tthis.docParser.scanner = this.scanner;", "-\t\t}", "-", "-\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types = unit.types;", "-\t\tif (types != null) {", "-\t\t\tint typesLength = types.length;", "-\t\t\tfor (int i = 0; i < typesLength; i++) {", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration declaration = types[i];", "-\t\t\t\tif (CharOperation.equals(declaration.name, TypeConstants.PACKAGE_INFO_NAME)) {", "-\t\t\t\t\tcontinue;", "+\t\t\tthis.compilationUnitSource = source;", "+\t\t\tthis.compilationUnitSourceLength = source.length;", "+\t\t\tthis.scanner.setSource(source, unit.compilationResult);", "+\t\t\tCompilationUnit compilationUnit = new CompilationUnit(this.ast);", "+\t\t\tcompilationUnit.setStatementsRecoveryData(unit.compilationResult.recoveryScannerData);", "+\t", "+\t\t\t// Parse comments", "+\t\t\tint[][] comments = unit.comments;", "+\t\t\tif (comments != null) {", "+\t\t\t\tbuildCommentsTable(compilationUnit, comments);", "+\t\t\t}", "+\t", "+\t\t\t// handle the package declaration immediately", "+\t\t\t// There is no node corresponding to the package declaration", "+\t\t\tif (this.resolveBindings) {", "+\t\t\t\trecordNodes(compilationUnit, unit);", "+\t\t\t}", "+\t\t\tif (unit.currentPackage != null) {", "+\t\t\t\tPackageDeclaration packageDeclaration = convertPackage(unit);", "+\t\t\t\tcompilationUnit.setPackage(packageDeclaration);", "+\t\t\t}", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.ImportReference[] imports = unit.imports;", "+\t\t\tif (imports != null) {", "+\t\t\t\tint importLength = imports.length;", "+\t\t\t\tfor (int i = 0; i < importLength; i++) {", "+\t\t\t\t\tcompilationUnit.imports().add(convertImport(imports[i]));", "-\t\t\t\tASTNode type = convert(declaration);", "-\t\t\t\tif (type == null) {", "-\t\t\t\t\tcompilationUnit.setFlags(compilationUnit.getFlags() | ASTNode.MALFORMED);", "+\t\t\t}", "+\t", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types = unit.types;", "+\t\t\tif (types != null) {", "+\t\t\t\tint typesLength = types.length;", "+\t\t\t\tfor (int i = 0; i < typesLength; i++) {", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration declaration = types[i];", "+\t\t\t\t\tif (CharOperation.equals(declaration.name, TypeConstants.PACKAGE_INFO_NAME)) {", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tASTNode type = convert(declaration);", "+\t\t\t\t\tif (type == null) {", "+\t\t\t\t\t\tcompilationUnit.setFlags(compilationUnit.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcompilationUnit.types().add(type);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcompilationUnit.setSourceRange(unit.sourceStart, unit.sourceEnd - unit.sourceStart  + 1);", "+\t", "+\t\t\tint problemLength = unit.compilationResult.problemCount;", "+\t\t\tif (problemLength != 0) {", "+\t\t\t\tCategorizedProblem[] resizedProblems = null;", "+\t\t\t\tfinal CategorizedProblem[] problems = unit.compilationResult.getProblems();", "+\t\t\t\tfinal int realProblemLength=problems.length;", "+\t\t\t\tif (realProblemLength == problemLength) {", "+\t\t\t\t\tresizedProblems = problems;", "-\t\t\t\t\tcompilationUnit.types().add(type);", "+\t\t\t\t\tSystem.arraycopy(problems, 0, (resizedProblems = new CategorizedProblem[realProblemLength]), 0, realProblemLength);", "+\t\t\t\tASTSyntaxErrorPropagator syntaxErrorPropagator = new ASTSyntaxErrorPropagator(resizedProblems);", "+\t\t\t\tcompilationUnit.accept(syntaxErrorPropagator);", "+\t\t\t\tASTRecoveryPropagator recoveryPropagator =", "+\t\t\t\t\tnew ASTRecoveryPropagator(resizedProblems, unit.compilationResult.recoveryScannerData);", "+\t\t\t\tcompilationUnit.accept(recoveryPropagator);", "+\t\t\t\tcompilationUnit.setProblems(resizedProblems);", "-\t\t}", "-\t\tcompilationUnit.setSourceRange(unit.sourceStart, unit.sourceEnd - unit.sourceStart  + 1);", "-", "-\t\tint problemLength = unit.compilationResult.problemCount;", "-\t\tif (problemLength != 0) {", "-\t\t\tCategorizedProblem[] resizedProblems = null;", "-\t\t\tfinal CategorizedProblem[] problems = unit.compilationResult.getProblems();", "-\t\t\tfinal int realProblemLength=problems.length;", "-\t\t\tif (realProblemLength == problemLength) {", "-\t\t\t\tresizedProblems = problems;", "-\t\t\t} else {", "-\t\t\t\tSystem.arraycopy(problems, 0, (resizedProblems = new CategorizedProblem[realProblemLength]), 0, realProblemLength);", "+\t\t\tif (this.resolveBindings) {", "+\t\t\t\tlookupForScopes();", "-\t\t\tASTSyntaxErrorPropagator syntaxErrorPropagator = new ASTSyntaxErrorPropagator(resizedProblems);", "-\t\t\tcompilationUnit.accept(syntaxErrorPropagator);", "-\t\t\tASTRecoveryPropagator recoveryPropagator =", "-\t\t\t\tnew ASTRecoveryPropagator(resizedProblems, unit.compilationResult.recoveryScannerData);", "-\t\t\tcompilationUnit.accept(recoveryPropagator);", "-\t\t\tcompilationUnit.setProblems(resizedProblems);", "+\t\t\tcompilationUnit.initCommentMapper(this.scanner);", "+\t\t\treturn compilationUnit;", "+\t\t} catch(RuntimeException e) {", "+\t\t\tStringBuffer message = new StringBuffer(\"Exception occurred during compilation unit conversion:\");  //$NON-NLS-1$", "+\t\t\tString lineDelimiter = Util.findLineSeparator(source);", "+\t\t\tif (lineDelimiter == null) lineDelimiter = System.getProperty(\"line.separator\");//$NON-NLS-1$", "+\t\t\tmessage.append(lineDelimiter);", "+\t\t\tmessage.append(\"----------------------------------- SOURCE BEGIN -------------------------------------\"); //$NON-NLS-1$", "+\t\t\tmessage.append(lineDelimiter);", "+\t\t\tmessage.append(source);", "+\t\t\tmessage.append(lineDelimiter);", "+\t\t\tmessage.append(\"----------------------------------- SOURCE END -------------------------------------\"); //$NON-NLS-1$", "+\t\t\tUtil.log(e, message.toString());", "+\t\t\tthrow e;", "-\t\tif (this.resolveBindings) {", "-\t\t\tlookupForScopes();", "-\t\t}", "-\t\tcompilationUnit.initCommentMapper(this.scanner);", "-\t\treturn compilationUnit;"]}], "num": 21690}
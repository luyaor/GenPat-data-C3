{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "851333165dc89f42a98f48fb87fa0780", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e9e2701a15c5248f76ec794b99941f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["+\t\t\t\t\tcodeStream.pushOnStack(exceptionLabels[i].exceptionType);", "-\t\t\t\t\tcodeStream.incrStackSize(1);", "-\t\t\t\tthis.placeAllAnyExceptionHandlers();", "-\t\t\t\tif (naturalExitExceptionHandler != null) naturalExitExceptionHandler.place();", "-\t\t\t\t", "+\t\t\t\tcodeStream.pushOnStack(scope.getJavaLangThrowable());", "+\t\t\t\tthis.placeAllAnyExceptionHandlers();", "+\t\t\t\tif (naturalExitExceptionHandler != null) naturalExitExceptionHandler.place();", "+\t\t\t\t", "-\t\t\t\tcodeStream.incrStackSize(1);", "-\t\t\t\t\t\tcodeStream.load(anyExceptionVariable);", "-\t\t\t\t\t\tcodeStream.athrow();", "+\t\t\t\t\t\tcodeStream.throwAnyException(anyExceptionVariable);", "-\t\t\t\t\t\tcodeStream.incrStackSize(1);", "+\t\t\t\t\t\tcodeStream.pushOnStack(scope.getJavaLangThrowable());", "-\t\t\t\t\t\tcodeStream.load(anyExceptionVariable);", "-\t\t\t\t\t\tcodeStream.athrow();", "+\t\t\t\t\t\tcodeStream.throwAnyException(anyExceptionVariable);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f06c968e4bdb762d76045713f88109bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IfStatement.java", "commitBeforeChange": "949f1bbe84622faa807866412d26a5bdb0f64fe4", "commitAfterChange": "ecd2d9d0e14c2688e43c7c452930452fe7a77cc0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tif (this.thenStatement == null) {", "-\t\t\tthenFlowInfo = flowInfo.initsWhenTrue();", "+\t\tif (isConditionOptimizedFalse) {", "+\t\t\t//thenFlowInfo = conditionInfo.initsWhenTrue().copy().setReachMode(FlowInfo.CHECK_POT_INIT_FAKE_REACHABLE);", "+\t\t\tthenFlowInfo = flowInfo.initsWhenTrue().copy().setReachMode(FlowInfo.UNREACHABLE); // revert", "+\t\t\t", "-\t\t\tif (isConditionOptimizedFalse) thenFlowInfo.setReachMode(FlowInfo.CHECK_POT_INIT_FAKE_REACHABLE);", "-", "+\t\t}", "+\t\tif (this.thenStatement != null) {", "-\t\tif (this.elseStatement == null) {", "-\t\t\telseFlowInfo = flowInfo.initsWhenFalse();", "+\t\tif (isConditionOptimizedTrue) {", "+\t\t\t//elseFlowInfo = conditionInfo.initsWhenFalse().copy().setReachMode(FlowInfo.CHECK_POT_INIT_FAKE_REACHABLE);", "+\t\t\telseFlowInfo = flowInfo.initsWhenFalse().copy().setReachMode(FlowInfo.UNREACHABLE); // revert", "-\t\t\tif (isConditionOptimizedTrue) elseFlowInfo.setReachMode(FlowInfo.CHECK_POT_INIT_FAKE_REACHABLE);", "-", "+\t\t}", "+\t\tif (this.elseStatement != null) {", "-\t\t\t\tmergedInfo = elseFlowInfo.setReachMode(FlowInfo.FAKE_REACHABLE);", "+\t\t\t\tmergedInfo = elseFlowInfo.setReachMode(FlowInfo.UNREACHABLE);", "-\t\t\t\tmergedInfo = thenFlowInfo.setReachMode(FlowInfo.FAKE_REACHABLE);", "+\t\t\t\tmergedInfo = thenFlowInfo.setReachMode(FlowInfo.UNREACHABLE);"]}], "num": 1339}
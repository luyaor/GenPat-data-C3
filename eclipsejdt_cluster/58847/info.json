{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07f92e3f3759535c18f32a101a86cba2", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0debbedbf14f66ab48f6e5470d614df6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingStatementsTest.java", "commitBeforeChange": "bebbc656cd8c0b5b2b17917b50736d005533495d", "commitAfterChange": "53b5fe3415daa91888a4dcef6f73ef37da327c9d", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "\t\t \t \tpublic void testReturnStatement() throws Exception", "signatureAfterChange": "\t\t \t \tpublic void testReturnStatement() throws Exception", "diff": ["+\t\tbuf.append(\"        return/*com*/ 1;\\n\");", "-\t\tassertTrue(\"Number of statements not 5\", statements.size() == 5);", "+\t\tassertTrue(\"Number of statements not 6\", statements.size() == 6);", "+\t\t}", "+\t\t{ // replace expression with comment (additional space needed)", "+\t\t\tReturnStatement statement= (ReturnStatement) statements.get(5);", "+\t\t\t", "+\t\t\tExpression expression= statement.getExpression();", "+\t\t\trewrite.replace(expression, ast.newNumberLiteral(\"9\"), null);", "+\t\tbuf.append(\"        return 9;\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7757edf57f49606d94ab3c469c65b40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingStatementsTest.java", "commitBeforeChange": "facdf5a5026398564c3ed7b97c965e8ab5351db6", "commitAfterChange": "74695e077c1f467c6eefdb1072c4a419061d0e20", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "\t\t \t \tpublic void testReturnStatement() throws Exception", "signatureAfterChange": "\t\t \t \tpublic void testReturnStatement() throws Exception", "diff": ["+\t\tbuf.append(\"        return(1 + 2);\\n\");", "-\t\tassertTrue(\"Number of statements not 4\", statements.size() == 4);", "+\t\tassertTrue(\"Number of statements not 5\", statements.size() == 5);", "+\t\t}", "+\t\t{ // replace parentized expression (additional space needed)", "+\t\t\tReturnStatement statement= (ReturnStatement) statements.get(4);", "+\t\t\t", "+\t\t\tExpression expression= statement.getExpression();", "+\t\t\trewrite.replace(expression, ast.newNumberLiteral(\"9\"), null);", "-\t\tbuf.append(\"        return 9 + 2;\\n\");\t\t", "+\t\tbuf.append(\"        return 9 + 2;\\n\");", "+\t\tbuf.append(\"        return 9;\\n\");\t"]}], "num": 58847}
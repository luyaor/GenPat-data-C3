{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc4998782d851b6545e8835c998f9aaa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c8bac5daf27a678e582f7dd6760892e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "b2f2db5aca4b5592810cb876316dc430449c50f8", "commitAfterChange": "423363127bfe75baf23fa282b4893f61b836a936", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t// check raw type", "-\t\t\t\t\tif (type.isArrayType()) {", "-\t\t\t\t\t    TypeBinding leafComponentType = type.leafComponentType();", "-\t\t\t\t\t    if (leafComponentType.isGenericType()) { // raw type", "-\t\t\t\t\t        return this.resolvedType = scope.createArrayType(scope.environment().createRawType((ReferenceBinding)leafComponentType, null), type.dimensions());", "-\t\t\t\t\t    }", "-\t\t\t\t\t} else if (type.isGenericType()) {", "-\t\t\t\t        return this.resolvedType = scope.environment().createRawType((ReferenceBinding)type, null); // raw type", "-\t\t\t\t\t}\t\t", "-\t\t\t\t\treturn this.resolvedType = type;", "+\t\t\t\t\treturn this.resolvedType = convertToRawType(type, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32bc499ee6e26ab0914c30e0c36cbfdd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "b2f2db5aca4b5592810cb876316dc430449c50f8", "commitAfterChange": "423363127bfe75baf23fa282b4893f61b836a936", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t// check raw type", "-\t\t\t\t\tif (type.isArrayType()) {", "-\t\t\t\t\t    TypeBinding leafComponentType = type.leafComponentType();", "-\t\t\t\t\t    if (leafComponentType.isGenericType()) { // raw type", "-\t\t\t\t\t        return this.resolvedType = scope.createArrayType(scope.environment().createRawType((ReferenceBinding)leafComponentType, null), type.dimensions());", "-\t\t\t\t\t    }", "-\t\t\t\t\t} else if (type.isGenericType()) {", "-\t\t\t\t        return this.resolvedType = scope.environment().createRawType((ReferenceBinding)type, null); // raw type", "-\t\t\t\t\t}\t\t", "-\t\t\t\t\treturn this.resolvedType = type;", "+\t\t\t\t\treturn this.resolvedType = convertToRawType(type, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0fe1ef7bb5bc6ddacd7341e85564e76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleTypeReference.java", "commitBeforeChange": "b2f2db5aca4b5592810cb876316dc430449c50f8", "commitAfterChange": "423363127bfe75baf23fa282b4893f61b836a936", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeEnclosing(BlockScope scope, ReferenceBinding enclosingType)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeEnclosing(BlockScope scope, ReferenceBinding enclosingType)", "diff": ["-\t\tif (isTypeUseDeprecated(memberType, scope)) {", "+\t\tif (isTypeUseDeprecated(memberType, scope))", "-\t\t}", "-\t\t// check raw type", "-\t\tif (memberType.isArrayType()) {", "-\t\t    TypeBinding leafComponentType = memberType.leafComponentType();", "-\t\t    if (leafComponentType.isGenericType()) { // raw type", "-\t\t        return this.resolvedType = scope.createArrayType(scope.environment().createRawType((ReferenceBinding)leafComponentType, null), memberType.dimensions());", "-\t\t    }", "-\t\t} else if (memberType.isGenericType()) {", "-\t        return this.resolvedType = scope.environment().createRawType(memberType, null); // raw type", "-\t\t}\t\t\t", "-\t\treturn this.resolvedType = memberType;", "+\t\treturn this.resolvedType = convertToRawType(memberType, scope);"]}], "num": 51136}
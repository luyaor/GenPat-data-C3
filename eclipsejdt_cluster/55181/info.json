{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d554496f839230a9b58e57c0f629bad0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "891d7c521a6084fc5c0e95707d72247a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "6436bbd31cbe5b698244c0208dd161fd144dd93e", "commitAfterChange": "4e5b524e8fed0a2f038362e79ac7bed8b62bd551", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType, Scope scope)", "signatureAfterChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType, Scope scope)", "diff": ["-\t\t\t\t\tint code2 = boundCheck(substitution, bound.capture(scope, -1), scope); // no position needed as this capture will never escape this context", "+\t\t\t\t\tint code2 = boundCheck(substitution, bound.capture(scope, -1, -1), scope); // no position needed as this capture will never escape this context"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2b8c067555edcabc54e1cc5876cdd44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "6436bbd31cbe5b698244c0208dd161fd144dd93e", "commitAfterChange": "4e5b524e8fed0a2f038362e79ac7bed8b62bd551", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " private boolean isCompatibleWith0(TypeBinding otherType, Scope captureScope)", "signatureAfterChange": " private boolean isCompatibleWith0(TypeBinding otherType, Scope captureScope)", "diff": ["-\t\t\t\t\t\tTypeBinding bound = typeVariable.firstBound.capture(captureScope, -1); // no position needed as this capture will never escape this context", "+\t\t\t\t\t\tTypeBinding bound = typeVariable.firstBound.capture(captureScope, -1, -1); // no position needed as this capture will never escape this context"]}], "num": 55181}
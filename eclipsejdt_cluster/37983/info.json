{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ece752a1c3c3209ea7c6f9d9b5ea71a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "672fe783e4f503e8efdaccd38998a15b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/batch/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "6b83d22a910c2e140d2fd3f8ea7f6dbc1b911422", "commitAfterChange": "8d0d90902203ccd1f00600a41aa29bdae4aef363", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate void resolveAnnotations( \t\t\tBlockScope scope, \t\t\tAnnotation[] annotations, \t\t\tBinding currentBinding)", "signatureAfterChange": "  \tprivate void resolveAnnotations( \t\t\tBlockScope scope, \t\t\tAnnotation[] annotations, \t\t\tBinding currentBinding)", "diff": ["-\t\t\tTypeElement anno = (TypeElement)ElementFactory.newElement(binding.getAnnotationType()); ", "-\t\t\tElement element = ElementFactory.newElement(currentBinding);", "-\t\t\t_annoToElement.put(anno, element);", "+\t\t\tif (binding != null) { // binding should be resolved, but in case it's not, ignore it", "+\t\t\t\tTypeElement anno = (TypeElement)ElementFactory.newElement(binding.getAnnotationType()); ", "+\t\t\t\tElement element = ElementFactory.newElement(currentBinding);", "+\t\t\t\t_annoToElement.put(anno, element);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ba118a6e53022486ed4d7112b4faedb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "7163191ad837ee4dbd99301bb257966d1ab9ea7a", "commitAfterChange": "efcbc8246985c2d4ce62d9f4d57040e9d6aab069", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate void resolveAnnotations(BlockScope scope, Annotation[] annotations, Binding currentBinding)", "signatureAfterChange": "  \tprivate void resolveAnnotations(BlockScope scope, Annotation[] annotations, Binding currentBinding)", "diff": ["-\t\t\tif (binding != null) { // binding should be resolved, but in case it's not, ignore it: it could have been wrapped into a container.", "-\t\t\t\tTypeElement anno = (TypeElement)_factory.newElement(binding.getAnnotationType());", "+\t\t\tReferenceBinding annotationType = binding.getAnnotationType();", "+\t\t\tif (binding != null", "+\t\t\t\t\t&& Annotation.isAnnotationTargetAllowed(scope, annotationType, currentBinding)", "+\t\t\t\t\t) { // binding should be resolved, but in case it's not, ignore it: it could have been wrapped into a container.", "+\t\t\t\tTypeElement anno = (TypeElement)_factory.newElement(annotationType);"]}], "num": 37983}
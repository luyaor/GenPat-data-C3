{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab07446a3bd828ca5224003966c6c11e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5157fa17e3a8c156234401faf102367e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "afae5ec0c1e6fe82c8553a9480b7bba01ac56f61", "commitAfterChange": "567b9446b3323f99231b5c6438b186ba7014e61e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope)", "signatureAfterChange": "  \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope)", "diff": ["-\t\t\t\t\t\t\t\t\t\tfindKeywords(completionToken, new char[][]{Keywords.THIS});", "+\t\t\t\t\t\t\t\t\t\tif(completionToken.length > 0) {", "+\t\t\t\t\t\t\t\t\t\t\tfindKeywords(completionToken, new char[][]{Keywords.THIS});", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tint relevance = computeBaseRelevance();", "+\t\t\t\t\t\t\t\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "+\t\t\t\t\t\t\t\t\t\t\trelevance += computeRelevanceForCaseMatching(completionToken, Keywords.THIS);", "+\t\t\t\t\t\t\t\t\t\t\tnoProposal = false;", "+\t\t\t\t\t\t\t\t\t\t\trequestor.acceptKeyword(Keywords.THIS, startPosition - offset, endPosition - offset,relevance);", "+\t\t\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f4cb77bf499e39b0e9cb43f11f1da80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompiler.java", "commitBeforeChange": "50bce8c3f61bb3d688d9edafa1d2a65300b2c4a3", "commitAfterChange": "9bee1c6f3c6bf50ec7f9dbd9166f81542168adc6", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic CompilationTask getTask(Writer out, \t\t\tJavaFileManager fileManager, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener, \t\t\tIterable<String> options, \t\t\tIterable<String> classes, \t\t\tIterable<? extends JavaFileObject> compilationUnits)", "signatureAfterChange": " \t@SuppressWarnings(\"unchecked\") \tpublic CompilationTask getTask(Writer out, \t\t\tJavaFileManager fileManager, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener, \t\t\tIterable<String> options, \t\t\tIterable<String> classes, \t\t\tIterable<? extends JavaFileObject> compilationUnits)", "diff": ["+\t@SuppressWarnings(\"unchecked\")", "-\t\tthis.initialize(writerOut, writerErr, false);", "+\t\tinitialize(writerOut, writerErr, false);", "+\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);", "+\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_6);", "+\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "-    \t\tfor (Iterator<String> iterator = options.iterator(); iterator.hasNext(); ) {", "+\t\t\tfor (Iterator<String> iterator = options.iterator(); iterator.hasNext(); ) {", "-    \t\t}", "+\t\t\t}"]}], "num": 39008}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f460c7451a23808e07167084e207933", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3362362bf164fe7f8367e4657df7c102", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "6c179d1611035fa643a61ef0b82b25ce29580a3a", "commitAfterChange": "42a8e7b7f9382c59bb1ff340f0838c566aaa3094", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void checkBounds(ReferenceBinding type, Scope scope, int index)", "signatureAfterChange": " \tpublic void checkBounds(ReferenceBinding type, Scope scope, int index)", "diff": ["-\t\t\tfor (int i = 0, argLength = typeVariables.length; i < argLength; i++)", "-\t\t\t    if (!typeVariables[i].boundCheck(parameterizedType, argTypes[i]))", "-\t\t\t\t\tscope.problemReporter().typeMismatchError(argTypes[i], typeVariables[i], currentType, this.typeArguments[index][i]);", "+\t\t\tif (argTypes != null && typeVariables != null) { // argTypes may be null in error cases", "+\t\t\t\tfor (int i = 0, argLength = typeVariables.length; i < argLength; i++)", "+\t\t\t\t    if (!typeVariables[i].boundCheck(parameterizedType, argTypes[i]))", "+\t\t\t\t\t\tscope.problemReporter().typeMismatchError(argTypes[i], typeVariables[i], currentType, this.typeArguments[index][i]);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a31496dd6cc945039f18a4e14d577b84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "8077355c6fdedc1952f9406d850f744eb2551157", "commitAfterChange": "4d0bf071df00d4688845a9086931e919c0d6ab82", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " public NameReference createSingleAssistNameReference(char[] name, long position)", "signatureAfterChange": " public NameReference createSingleAssistNameReference(char[] name, long position)", "diff": ["-\t\t\t} else {", "+\t\t\t} else if(kind != K_BETWEEN_CASE_AND_COLON && kind != K_BETWEEN_DEFAULT_AND_COLON) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2e3580e2160671f4a771f6e9c5d854e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "eaac4cd91d3c13197436495a330942a49816eb54", "commitAfterChange": "34c575f49537f6b5068ad46efa5087a738972fae", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void checkBounds(Scope scope)", "signatureAfterChange": " \tpublic void checkBounds(Scope scope)", "diff": ["-\t\t\tint argLength = this.typeArguments.length;", "-\t\t\tfor (int i = 0; i < argLength; i++)", "-\t\t\t    if (!typeVariables[i].boundCheck(parameterizedType, argTypes[i]))", "-\t\t\t\t\tscope.problemReporter().typeMismatchError(argTypes[i], typeVariables[i], currentType, this.typeArguments[i]);", "+\t\t\tif (argTypes != null && typeVariables != null) { // may be null in error cases", "+\t\t\t\tfor (int i = 0, argLength = typeVariables.length; i < argLength; i++)", "+\t\t\t\t\tif (!typeVariables[i].boundCheck(parameterizedType, argTypes[i]))", "+\t\t\t\t\t\tscope.problemReporter().typeMismatchError(argTypes[i], typeVariables[i], currentType, this.typeArguments[i]);", "+\t\t\t}"]}], "num": 18293}
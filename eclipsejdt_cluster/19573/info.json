{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f91c899b9f590a8d56c18267dafb44e3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b10d3ea9e2978bc1eb3fe186b2097bb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java", "commitBeforeChange": "23d031b1b77753b1109ce0253088a2b7f49a7000", "commitAfterChange": "80f6342a7f709a2d6fe0cf3f1274abc00b566ec7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public TypeMirror erasure(TypeMirror t)", "signatureAfterChange": "      @Override     public TypeMirror erasure(TypeMirror t)", "diff": ["-            return _env.getFactory().newTypeMirror(((ReferenceBinding) binding).erasure());", "+        \tTypeBinding type = ((ReferenceBinding) binding).erasure();", "+        \tif (type.isGenericType()) {", "+        \t\ttype = _env.getLookupEnvironment().convertToRawType(type, false);", "+        \t}", "+            return _env.getFactory().newTypeMirror(type);", "+            TypeBinding leafType = typeBinding.leafComponentType().erasure();", "+            if (leafType.isGenericType()) {", "+            \tleafType = _env.getLookupEnvironment().convertToRawType(leafType, false);", "+            }", "-                    this._env.getLookupEnvironment().createArrayType(", "-                            typeBinding.leafComponentType().erasure(),", "+                    this._env.getLookupEnvironment().createArrayType(leafType,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cebb96d56bf8c3a4b8d380951b6695a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ad30422de59b5093c5225e2a4599516c056303dc", "commitAfterChange": "c1c045ff9c256acaa6d98530fa4640b4cd80b7c6", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "  \tpublic boolean isBoxingCompatibleWith(TypeBinding left, TypeBinding right)", "signatureAfterChange": "  \tpublic boolean isBoxingCompatibleWith(TypeBinding expressionType, TypeBinding targetType)", "diff": ["-\tpublic boolean isBoxingCompatibleWith(TypeBinding left, TypeBinding right) {", "-\t\treturn left.isBaseType() != right.isBaseType() && environment().isBoxingCompatibleWith(left, right);", "+\tpublic boolean isBoxingCompatibleWith(TypeBinding expressionType, TypeBinding targetType) {", "+\t\tLookupEnvironment environment = environment();", "+\t\tif (environment.globalOptions.sourceLevel < ClassFileConstants.JDK1_5 || expressionType.isBaseType() == targetType.isBaseType())", "+\t\t\treturn false;", "+\t", "+\t\t// check if autoboxed type is compatible", "+\t\tTypeBinding convertedType = environment.computeBoxingType(expressionType);", "+\t\treturn convertedType == targetType || convertedType.isCompatibleWith(targetType);"]}], "num": 19573}
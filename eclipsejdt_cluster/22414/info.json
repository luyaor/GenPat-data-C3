{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e57ab03627b4dc4c0afd222530affab1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2a40195f4ee8dc78e0acb5b08d41775", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "78e8a5c1a2e383b6d515ba3aab0d674e5548befa", "commitAfterChange": "4cb6b481d6e3c4ba44985d7b9c454fbe1bc42a7d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \r \tprivate IBinding returnBindingForQualifiedNamePart(ASTNode parent, int index)", "signatureAfterChange": "\r \r \tprivate IBinding returnBindingForQualifiedNamePart(ASTNode parent, int index)", "diff": ["-\t\t\t\t\treturn this.getTypeBinding(scope.getType(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName)));\r", "+\t\t\t\t\tBinding binding = scope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));\r", "+\t\t\t\t\tif (binding != null && binding.isValidBinding()) {\r", "+\t\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.PackageBinding) {\r", "+\t\t\t\t\t\t\treturn this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding)binding);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t// it is a type\r", "+\t\t\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding)binding);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\treturn null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8da072565678e4418bf254bfcaf8047", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "510157084fee658717584c7d1b83583284de1aee", "commitAfterChange": "c62f395f5b6154673520cf146ae6171d3654422c", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \r \tprivate IBinding returnBindingForQualifiedNamePart(ASTNode parent, int index)", "signatureAfterChange": "\r \r \tprivate IBinding returnBindingForQualifiedNamePart(ASTNode parent, int index)", "diff": ["-\t\t\t\t\t// a extra lookup is required`\r", "+\t\t\t\t\t// a extra lookup is required\r", "+\t\t} else if (node instanceof QualifiedTypeReference) {\r", "+\t\t\tQualifiedTypeReference qualifiedTypeReference = (QualifiedTypeReference) node;\r", "+\t\t\tif (index == 0) {\r", "+\t\t\t\treturn this.getTypeBinding((ReferenceBinding)qualifiedTypeReference.binding);\r", "+\t\t\t} else {\r", "+\t\t\t\tint qualifiedTypeLength = qualifiedTypeReference.tokens.length;\r", "+\t\t\t\tint indexInQualifiedName = qualifiedTypeLength - index; // one-based\r", "+\t\t\t\tScope internalScope = retrieveEnclosingScope(parent);\r", "+\t\t\t\tBinding binding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));\r", "+\t\t\t\tif (binding != null && binding.isValidBinding()) {\r", "+\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.PackageBinding) {\r", "+\t\t\t\t\t\treturn this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding)binding);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t// it is a type\r", "+\t\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding)binding);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r"]}], "num": 22414}
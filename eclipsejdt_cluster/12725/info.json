{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b785cffc2fbd0cda36e7bf0bf1c52785", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18521135a0d14c4a338cd7b3bd3405d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java", "commitBeforeChange": "5df75ce3074574b9ceea64411eeaa18313a445b2", "commitAfterChange": "418c3c32abb13732045765a3a2278937dc9fd129", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public String getJavadocContents(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public JavadocContents getJavadocContents(IProgressMonitor monitor) throws JavaModelException", "diff": ["-public String getJavadocContents(IProgressMonitor monitor) throws JavaModelException {", "+public JavadocContents getJavadocContents(IProgressMonitor monitor) throws JavaModelException {", "-\tString cachedJavadoc = null;", "+\tJavadocContents cachedJavadoc = null;", "-\t\tcachedJavadoc = (String) projectInfo.javadocCache.get(this);", "+\t\tcachedJavadoc = (JavadocContents) projectInfo.javadocCache.get(this);", "+\t", "-", "+\tJavadocContents javadocContents = new JavadocContents(this, contents);", "-\t\tprojectInfo.javadocCache.put(this, contents);", "+\t\tprojectInfo.javadocCache.put(this, javadocContents);", "-\treturn contents;", "+\treturn javadocContents;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44ac03c8a4c13def605b3f19acb73d64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "1987bebfc0499fe07d643a641d2e74ff184f5cc7", "commitAfterChange": "2b6b723d87be49aecbb1b89e893d389af560ea10", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void bytecodeExceeds64KLimit(TypeDeclaration location)", "signatureAfterChange": " public void bytecodeExceeds64KLimit(LambdaExpression location)", "diff": ["+public void bytecodeExceeds64KLimit(LambdaExpression location) {", "+\tMethodBinding method = location.binding;", "+\t\tthis.handle(", "+\t\t\tIProblem.BytecodeExceeds64KLimit,", "+\t\t\tnew String[] {new String(method.selector), typesAsString(method, false)},", "+\t\t\tnew String[] {new String(method.selector), typesAsString(method, true)},", "+\t\t\tProblemSeverities.Error | ProblemSeverities.Abort | ProblemSeverities.Fatal,", "+\t\t\tlocation.sourceStart,", "+\t\t\tlocation.sourceEnd);", "+}"]}], "num": 12725}
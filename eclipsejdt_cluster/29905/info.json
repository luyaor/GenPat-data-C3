{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c7d596c6945345f487c34c0945135873", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b948fa3333819ca95a10d1384b550ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public IJavaModelStatus verify()", "signatureAfterChange": "\r public IJavaModelStatus verify()", "diff": ["-\tIClasspathEntry[] classpath = this.newRawPath;\r", "-\tIPath projectPath= javaProject.getProject().getFullPath();\r", "-\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "-\tboolean allowNestingInOutput = false;\r", "-\tboolean hasSource = false;\r", "-\tfor (int i = 0 ; i < classpath.length; i++) {\r", "-\t\tif (classpath[i].getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "-\t\tif (classpath[i].getPath().equals(outputLocation)){\r", "-\t\t\tallowNestingInOutput = true;\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t}\r", "-\tif (!hasSource) allowNestingInOutput = true; // if no source, then allowed\r", "-\t\r", "-\t// check all entries\r", "-\tfor (int i = 0 ; i < classpath.length; i++) {\r", "-\t\tIClasspathEntry entry = classpath[i];\r", "-\t\tIPath entryPath = entry.getPath();\r", "-\r", "-\t\t// no further check if entry coincidates with project or output location\r", "-\t\tif (entryPath.equals(projectPath)) continue;\r", "-\t\tif (entryPath.equals(outputLocation)) continue;\r", "-\t\t\r", "-\t\t// prevent nesting source entries in each other\r", "-\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "-\t\t\tfor (int j = 0; j < classpath.length; j++){\r", "-\t\t\t\tIClasspathEntry otherEntry = classpath[j];\r", "-\t\t\t\tif (entry != otherEntry && otherEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "-\t\t\t\t\tif (entryPath.isPrefixOf(otherEntry.getPath())){\r", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t// prevent nesting output location inside entry\r", "-\t\tif (entryPath.isPrefixOf(outputLocation)) {\r", "-\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "-\t\t}\r", "-\r", "-\t\t// prevent nesting entry inside output location - when distinct from project or a source folder\r", "-\t\tif (!allowNestingInOutput && outputLocation.isPrefixOf(entryPath)) {\r", "-\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "-\t\t}\r", "-\t}\r", "-\treturn JavaModelStatus.VERIFIED_OK;\r", "+\treturn JavaConventions.validateClasspath(javaProject, this.newRawPath, outputLocation);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b9c3fb4988df55cc2bc01613f777cd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public IJavaModelStatus verify()", "signatureAfterChange": "\r public IJavaModelStatus verify()", "diff": ["-\tIClasspathEntry[] classpath = this.newRawPath;\r", "-\tIPath projectPath= javaProject.getProject().getFullPath();\r", "-\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "-\tboolean allowNestingInOutput = false;\r", "-\tboolean hasSource = false;\r", "-\tfor (int i = 0 ; i < classpath.length; i++) {\r", "-\t\tif (classpath[i].getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "-\t\tif (classpath[i].getPath().equals(outputLocation)){\r", "-\t\t\tallowNestingInOutput = true;\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t}\r", "-\tif (!hasSource) allowNestingInOutput = true; // if no source, then allowed\r", "-\t\r", "-\t// check all entries\r", "-\tfor (int i = 0 ; i < classpath.length; i++) {\r", "-\t\tIClasspathEntry entry = classpath[i];\r", "-\t\tIPath entryPath = entry.getPath();\r", "-\r", "-\t\t// no further check if entry coincidates with project or output location\r", "-\t\tif (entryPath.equals(projectPath)) continue;\r", "-\t\tif (entryPath.equals(outputLocation)) continue;\r", "-\t\t\r", "-\t\t// prevent nesting source entries in each other\r", "-\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "-\t\t\tfor (int j = 0; j < classpath.length; j++){\r", "-\t\t\t\tIClasspathEntry otherEntry = classpath[j];\r", "-\t\t\t\tif (entry != otherEntry && otherEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "-\t\t\t\t\tif (entryPath.isPrefixOf(otherEntry.getPath())){\r", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t// prevent nesting output location inside entry\r", "-\t\tif (entryPath.isPrefixOf(outputLocation)) {\r", "-\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "-\t\t}\r", "-\r", "-\t\t// prevent nesting entry inside output location - when distinct from project or a source folder\r", "-\t\tif (!allowNestingInOutput && outputLocation.isPrefixOf(entryPath)) {\r", "-\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "-\t\t}\r", "-\t}\r", "-\treturn JavaModelStatus.VERIFIED_OK;\r", "+\treturn JavaConventions.validateClasspath(javaProject, this.newRawPath, outputLocation);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82b365e37ed256bc05465155d2808060", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public IJavaModelStatus verify()", "signatureAfterChange": "\r public IJavaModelStatus verify()", "diff": ["-\tIClasspathEntry[] classpath = this.newRawPath;\r", "-\tIPath projectPath= javaProject.getProject().getFullPath();\r", "-\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "-\tboolean allowNestingInOutput = false;\r", "-\tboolean hasSource = false;\r", "-\tfor (int i = 0 ; i < classpath.length; i++) {\r", "-\t\tif (classpath[i].getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "-\t\tif (classpath[i].getPath().equals(outputLocation)){\r", "-\t\t\tallowNestingInOutput = true;\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t}\r", "-\tif (!hasSource) allowNestingInOutput = true; // if no source, then allowed\r", "-\t\r", "-\t// check all entries\r", "-\tfor (int i = 0 ; i < classpath.length; i++) {\r", "-\t\tIClasspathEntry entry = classpath[i];\r", "-\t\tIPath entryPath = entry.getPath();\r", "-\r", "-\t\t// no further check if entry coincidates with project or output location\r", "-\t\tif (entryPath.equals(projectPath)) continue;\r", "-\t\tif (entryPath.equals(outputLocation)) continue;\r", "-\t\t\r", "-\t\t// prevent nesting source entries in each other\r", "-\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "-\t\t\tfor (int j = 0; j < classpath.length; j++){\r", "-\t\t\t\tIClasspathEntry otherEntry = classpath[j];\r", "-\t\t\t\tif (entry != otherEntry && otherEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "-\t\t\t\t\tif (entryPath.isPrefixOf(otherEntry.getPath())){\r", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t// prevent nesting output location inside entry\r", "-\t\tif (entryPath.isPrefixOf(outputLocation)) {\r", "-\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "-\t\t}\r", "-\r", "-\t\t// prevent nesting entry inside output location - when distinct from project or a source folder\r", "-\t\tif (!allowNestingInOutput && outputLocation.isPrefixOf(entryPath)) {\r", "-\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "-\t\t}\r", "-\t}\r", "-\treturn JavaModelStatus.VERIFIED_OK;\r", "+\treturn JavaConventions.validateClasspath(javaProject, this.newRawPath, outputLocation);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87ba592c0a015cd1db2866f0cb6a0ca9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public IJavaModelStatus verify()", "signatureAfterChange": "\r public IJavaModelStatus verify()", "diff": ["-\tIClasspathEntry[] classpath = this.newRawPath;\r", "-\tIPath projectPath= javaProject.getProject().getFullPath();\r", "-\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "-\tboolean allowNestingInOutput = false;\r", "-\tboolean hasSource = false;\r", "-\tfor (int i = 0 ; i < classpath.length; i++) {\r", "-\t\tif (classpath[i].getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "-\t\tif (classpath[i].getPath().equals(outputLocation)){\r", "-\t\t\tallowNestingInOutput = true;\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t}\r", "-\tif (!hasSource) allowNestingInOutput = true; // if no source, then allowed\r", "-\t\r", "-\t// check all entries\r", "-\tfor (int i = 0 ; i < classpath.length; i++) {\r", "-\t\tIClasspathEntry entry = classpath[i];\r", "-\t\tIPath entryPath = entry.getPath();\r", "-\r", "-\t\t// no further check if entry coincidates with project or output location\r", "-\t\tif (entryPath.equals(projectPath)) continue;\r", "-\t\tif (entryPath.equals(outputLocation)) continue;\r", "-\t\t\r", "-\t\t// prevent nesting source entries in each other\r", "-\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "-\t\t\tfor (int j = 0; j < classpath.length; j++){\r", "-\t\t\t\tIClasspathEntry otherEntry = classpath[j];\r", "-\t\t\t\tif (entry != otherEntry && otherEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "-\t\t\t\t\tif (entryPath.isPrefixOf(otherEntry.getPath())){\r", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t// prevent nesting output location inside entry\r", "-\t\tif (entryPath.isPrefixOf(outputLocation)) {\r", "-\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "-\t\t}\r", "-\r", "-\t\t// prevent nesting entry inside output location - when distinct from project or a source folder\r", "-\t\tif (!allowNestingInOutput && outputLocation.isPrefixOf(entryPath)) {\r", "-\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryPath);\r", "-\t\t}\r", "-\t}\r", "-\treturn JavaModelStatus.VERIFIED_OK;\r", "+\treturn JavaConventions.validateClasspath(javaProject, this.newRawPath, outputLocation);\r"]}], "num": 29905}
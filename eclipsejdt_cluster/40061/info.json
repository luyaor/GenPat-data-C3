{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a9ae9cac979cd1847b223150249a628", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bace1cebc39b777dc61fb88a0c81a1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "1df699e669c4e4f2a900614bdd75bf90200992be", "commitAfterChange": "0171a309cfa1d187647511afec0bb25c2eadf3cf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, Expression receiver, ReferenceBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] argumentTypes, final InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, Expression receiver, ReferenceBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] argumentTypes, final InvocationSite invocationSite)", "diff": ["+\t\t", "+\t\t// first iteration, questionning widening cast", "-\t\t\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)argument);", "+\t\t\t\t\tscope.problemReporter().unnecessaryCastForArgument((CastExpression)argument, binding.parameters[i]);", "-\t\tif (rawArgumentTypes == argumentTypes) return; // did not find any unnecessary cast candidate", "-\t", "-\t\tInvocationSite fakeInvocationSite = new InvocationSite(){\t", "-\t\t\tpublic boolean isSuperAccess(){ return invocationSite.isSuperAccess(); }", "-\t\t\tpublic boolean isTypeAccess() { return invocationSite.isTypeAccess(); }", "-\t\t\tpublic void setActualReceiverType(ReferenceBinding actualReceiverType) {}", "-\t\t\tpublic void setDepth(int depth) {}", "-\t\t\tpublic void setFieldIndex(int depth){}", "-\t\t};\t", "-\t\tMethodBinding bindingIfNoCast;", "-\t\tif (binding.isConstructor()) {", "-\t\t\tbindingIfNoCast = scope.getConstructor(receiverType, rawArgumentTypes, fakeInvocationSite);", "-\t\t} else {", "-\t\t\tbindingIfNoCast = receiver.isImplicitThis()", "-\t\t\t\t? scope.getImplicitMethod(binding.selector, rawArgumentTypes, fakeInvocationSite)", "-\t\t\t\t: scope.getMethod(receiverType, binding.selector, rawArgumentTypes, fakeInvocationSite); \t", "+\t\t// did not find any unnecessary cast candidate", "+\t\tif (rawArgumentTypes != argumentTypes) {", "+\t\t\tcheckAlternateBinding(scope, receiver, receiverType, binding, arguments, argumentTypes, rawArgumentTypes, invocationSite);", "-\t\tif (bindingIfNoCast == binding) {", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tif (argumentTypes[i] != rawArgumentTypes[i]) {", "-\t\t\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)arguments[i]);", "+\t\t", "+\t\t// second attempt questionning narrowing cast", "+\t\trawArgumentTypes = argumentTypes;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tExpression argument = arguments[i];", "+\t\t\tif (argument instanceof CastExpression && (argument.bits & UnnecessaryCastMask) == 0) {", "+\t\t\t\tTypeBinding castedExpressionType = ((CastExpression)argument).expression.resolvedType;", "+\t\t\t\tif (rawArgumentTypes == argumentTypes) {", "+\t\t\t\t\tSystem.arraycopy(rawArgumentTypes, 0, rawArgumentTypes = new TypeBinding[length], 0, length);", "+\t\t\t\trawArgumentTypes[i] = castedExpressionType; ", "+\t\t}", "+\t\tif (rawArgumentTypes != argumentTypes) {", "+\t\t\tcheckAlternateBinding(scope, receiver, receiverType, binding, arguments, argumentTypes, rawArgumentTypes, invocationSite);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbb38e322c721bc7c253c6e8bfbfe1e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "c9050a3a9594b7d361850fa9a3880d65c49e6aec", "commitAfterChange": "861f1162953e56602b4d7507e52e1f13733854c4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public void generateCode(ClassScope classScope, ClassFile classFile)", "signatureAfterChange": "\r public void generateCode(ClassScope classScope, ClassFile classFile)", "diff": ["+\t// for each method we start the code generate with wideMode equals to false\r", "+\t// in the code Stream.\r", "+\tclassFile.codeStream.wideMode = false;\r", "-\t\tclassFile.generateMethodInfoHeader(binding);\r", "-\t\tint methodAttributeOffset = classFile.contentsOffset;\r", "-\t\tint attributeNumber = classFile.generateMethodInfoAttribute(binding);\r", "-\t\tif ((!binding.isNative()) && (!binding.isAbstract())) {\r", "-\t\t\tint codeAttributeOffset = classFile.contentsOffset;\r", "-\t\t\tclassFile.generateCodeAttributeHeader();\r", "-\t\t\tCodeStream codeStream = classFile.codeStream;\r", "-\t\t\tcodeStream.reset(this, classFile);\r", "-\t\t\t// initialize local positions\r", "-\t\t\tscope.computeLocalVariablePositions(binding.isStatic() ? 0 : 1, codeStream);\r", "-\r", "-\t\t\t// arguments initialization for local variable debug attributes\r", "-\t\t\tif (arguments != null) {\r", "-\t\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {\r", "-\t\t\t\t\tLocalVariableBinding argBinding;\r", "-\t\t\t\t\tcodeStream.addVisibleLocalVariable(argBinding = arguments[i].binding);\r", "-\t\t\t\t\targBinding.recordInitializationStartPC(0);\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tif (statements != null) {\r", "-\t\t\t\tfor (int i = 0, max = statements.length; i < max; i++)\r", "-\t\t\t\t\tstatements[i].generateCode(scope, codeStream);\r", "-\t\t\t}\r", "-\t\t\tif (needFreeReturn) {\r", "-\t\t\t\tcodeStream.return_();\r", "-\t\t\t}\r", "-\t\t\t// local variable attributes\r", "-\t\t\tcodeStream.exitUserScope(scope);\r", "-\t\t\tcodeStream.recordPositionsFrom(0, this);\r", "-\t\t\tclassFile.completeCodeAttribute(codeAttributeOffset);\r", "-\t\t\tattributeNumber++;\r", "-\t\t}\r", "-\t\tclassFile.completeMethodInfo(methodAttributeOffset, attributeNumber);\r", "-\r", "-\t\t// if a problem got reported during code gen, then trigger problem method creation\r", "-\t\tif (ignoreFurtherInvestigation){\r", "-\t\t\tthrow new AbortMethod(scope.referenceCompilationUnit().compilationResult);\r", "-\t\t}\r", "+\t\tthis.internalGenerateCode(classScope, classFile);\r", "-\t\tint problemsLength;\r", "-\t\tIProblem[] problems = scope.referenceCompilationUnit().compilationResult.getProblems();\r", "-\t\tIProblem[] problemsCopy = new IProblem[problemsLength = problems.length];\r", "-\t\tSystem.arraycopy(problems, 0, problemsCopy, 0, problemsLength);\r", "-\t\tclassFile.addProblemMethod(this, binding, problemsCopy, problemResetPC);\r", "+\t\tif (e.compilationResult == null) {\r", "+\t\t\ttry {\r", "+\t\t\t\tif (statements != null) {\r", "+\t\t\t\t\tfor (int i = 0, max = statements.length; i < max; i++)\r", "+\t\t\t\t\t\tstatements[i].resetStateForCodeGeneration();\r", "+\t\t\t\t}\r", "+\t\t\t\tclassFile.contentsOffset = problemResetPC;\r", "+\t\t\t\tclassFile.methodCount--;\r", "+\t\t\t\tclassFile.codeStream.wideMode = true;\r", "+\t\t\t\tproblemResetPC = classFile.contentsOffset;\r", "+\t\t\t\tthis.internalGenerateCode(classScope, classFile);\r", "+\t\t\t} catch(AbortMethod e2) {\r", "+\t\t\t\tint problemsLength;\r", "+\t\t\t\tIProblem[] problems = scope.referenceCompilationUnit().compilationResult.getProblems();\r", "+\t\t\t\tIProblem[] problemsCopy = new IProblem[problemsLength = problems.length];\r", "+\t\t\t\tSystem.arraycopy(problems, 0, problemsCopy, 0, problemsLength);\r", "+\t\t\t\tclassFile.addProblemMethod(this, binding, problemsCopy, problemResetPC);\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\tint problemsLength;\r", "+\t\t\tIProblem[] problems = scope.referenceCompilationUnit().compilationResult.getProblems();\r", "+\t\t\tIProblem[] problemsCopy = new IProblem[problemsLength = problems.length];\r", "+\t\t\tSystem.arraycopy(problems, 0, problemsCopy, 0, problemsLength);\r", "+\t\t\tclassFile.addProblemMethod(this, binding, problemsCopy, problemResetPC);\r", "+\t\t}\r", "+\t}\r", "+}\r"]}], "num": 40061}
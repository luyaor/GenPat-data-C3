{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4294e61708e21140abc348996d8af8f8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16cbc7c8d6a1372ba688209b3a5d21b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "590096e839ca0126cbcfbf2e5062f8db4b66c3ba", "commitAfterChange": "2ca5e5e3fb17277ecb8c1c3fe65c0829f50cb44e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic IType findType(String typeName, String packageName, boolean partialMatch, int acceptFlags)", "signatureAfterChange": " \tpublic IType findType(String typeName, String packageName, boolean partialMatch, int acceptFlags)", "diff": ["-\t\tif (packageName == null) {", "+\t\tif (packageName == null || packageName.length() == 0) {", "+\t\t} else if (typeName.length() > 0 && Character.isLowerCase(typeName.charAt(0))) {", "+\t\t\t// see if this is a known package and not a type", "+\t\t\tif (findPackageFragments(packageName + \".\" + typeName, false) != null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f18b30f956034136bfd06f8e8c1019ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ListRewriteEvent.java", "commitBeforeChange": "5591f329d04e2b37eb4fa781c7c541080109aa0a", "commitAfterChange": "d2ce3e4f25cd9bbbb131e9cbb38f00f462e43b0f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tpublic RewriteEvent replaceEntry(ASTNode originalEntry, ASTNode newEntry)", "signatureAfterChange": " \t \tpublic RewriteEvent replaceEntry(ASTNode entry, ASTNode newEntry)", "diff": ["-\tpublic RewriteEvent replaceEntry(ASTNode originalEntry, ASTNode newEntry) {", "-\t\tif (originalEntry == null) {", "+\tpublic RewriteEvent replaceEntry(ASTNode entry, ASTNode newEntry) {", "+\t\tif (entry == null) {", "-\t\t\tif (curr.getOriginalValue() == originalEntry) {", "+\t\t\tif (curr.getOriginalValue() == entry || curr.getNewValue() == entry) {", "+\t\t\t\tif (curr.getNewValue() == null && curr.getOriginalValue() == null) { // removed an inserted node", "+\t\t\t\t\tentries.remove(i);", "+\t\t\t\t\treturn null;", "+\t\t\t\t}"]}], "num": 61560}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c384a6fcc1485bc204e52a57c91aaea", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67c93f394e56f2fab0901a39f0fcbc84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathChange.java", "commitBeforeChange": "d9e2e2bfbd91f5590cc17d29dbb01112d1067957", "commitAfterChange": "e61f569dbc4aa27cac18a55212d084c74e736bfb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic int generateDelta(JavaElementDelta delta)", "signatureAfterChange": " \tpublic int generateDelta(JavaElementDelta delta)", "diff": ["+", "+\t\tstate.addForRefresh(this.project); // ensure external jars are refreshed for this project (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=212769 )", "+\t\t\t\t", "+\t\t\t\t// remember timestamp of jars that were removed (in case they are added as external jar in the same operation)", "+\t\t\t\tfor (int j = 0, length = pkgFragmentRoots.length; j < length; j++) {", "+\t\t\t\t\tIPackageFragmentRoot root = pkgFragmentRoots[j];", "+\t\t\t\t\tif (root.isArchive() && !root.isExternal()) {", "+\t\t\t\t\t\tURI location = root.getResource().getLocationURI();", "+\t\t\t\t\t\tFile file = null;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tIFileStore fileStore = EFS.getStore(location);", "+\t\t\t\t\t\t\tfile = fileStore.toLocalFile(EFS.NONE, null);", "+\t\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\t\t// continue", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (file == null)", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tlong timeStamp = DeltaProcessor.getTimeStamp(file);", "+\t\t\t\t\t\tIPath externalPath = new org.eclipse.core.runtime.Path(file.getAbsolutePath());", "+\t\t\t\t\t\tstate.getExternalLibTimeStamps().put(externalPath, new Long(timeStamp));", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdb840578f9c4ef0e4eaad95f8af9e82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "commitAfterChange": "192820efad9191d4773fbd88aa6d8a5ea915ea14", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tstatic boolean inferPolyInvocationType(InferenceContext18 inferenceContext, InvocationSite invocationSite, TypeBinding targetType, MethodBinding method)  \t\t\t\tthrows InferenceFailureException", "signatureAfterChange": "  \tstatic boolean inferPolyInvocationType(InferenceContext18 inferenceContext, InvocationSite invocationSite, TypeBinding targetType, MethodBinding method)  \t\t\t\tthrows InferenceFailureException", "diff": ["-\t\t\t\tinferenceContext.currentBounds.captures.put(gbeta, parameterizedType.capture(inferenceContext.scope, invocationSite.sourceEnd())); // established: both types have nonnull arguments", "+\t\t\t\tinferenceContext.currentBounds.captures.put(gbeta, parameterizedType); // established: both types have nonnull arguments", "+\t\t\t\tif (InferenceContext18.SHOULD_WORKAROUND_BUG_JDK_8054721) {", "+\t\t\t\t\tfor (int i = 0, length = arguments.length; i < length;i++) {", "+\t\t\t\t\t\tif (arguments[i].isWildcard() && arguments[i].isProperType(true)) {", "+\t\t\t\t\t\t\tWildcardBinding wildcard = (WildcardBinding) arguments[i];", "+\t\t\t\t\t\t\tSourceTypeBinding contextType = inferenceContext.scope.enclosingSourceType();", "+\t\t\t\t\t\t\tint position = invocationSite.sourceEnd();", "+\t\t\t\t\t\t\tCompilationUnitScope compilationUnitScope = inferenceContext.scope.compilationUnitScope();", "+\t\t\t\t\t\t\tASTNode cud = compilationUnitScope.referenceContext;", "+\t\t\t\t\t\t\tfinal int captureID = compilationUnitScope.nextCaptureID();", "+\t\t\t\t\t\t\tCaptureBinding capture = inferenceContext.environment.createCapturedWildcard(wildcard, contextType, position, cud, captureID);", "+\t\t\t\t\t\t\tinferenceContext.currentBounds.addBound(new TypeBound(betas[i], capture, SAME), inferenceContext.environment);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 58571}
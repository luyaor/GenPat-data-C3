{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f2b386f7e7fad50d7c1f101ef3b8334", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4079b4fb5057b68ae3fea9ac75e46a28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "1209010fd2d01b73be2d5ddcc68dee954a4dfb12", "commitAfterChange": "e2d64401ee163038583789c4f8e64653502b280a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["-\r", "-\t\t// if the binding declaring class is not visible, need special action\r", "-\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding\r", "-\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type\t\t\r", "-\t\tFieldBinding fieldBinding = (FieldBinding)binding;\r", "-\t\tif (delegateThis == null) {\r", "-\t\t\tif (fieldBinding.declaringClass != this.actualReceiverType\r", "-\t\t\t\t&& fieldBinding.declaringClass != null\r", "-\t\t\t\t&& fieldBinding.constant == NotAConstant\r", "-\t\t\t\t&& ((scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "-\t\t\t\t\t\t&& (indexOfFirstFieldBinding > 1 || !fieldBinding.isStatic())\r", "-\t\t\t\t\t\t&& fieldBinding.declaringClass.id != T_Object) //no change for Object fields (in case there was)\r", "-\t\t\t\t\t|| !fieldBinding.declaringClass.canBeSeenBy(scope))){\r", "-\t\t\t\tbinding = new FieldBinding(fieldBinding, (ReferenceBinding)this.actualReceiverType);\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\tCodeSnippetScope localScope = new CodeSnippetScope(scope);\r", "-\t\t\tif (fieldBinding.declaringClass != delegateThis.type\r", "-\t\t\t\t&& !delegateThis.type.isArrayType()\t\t\t\r", "-\t\t\t\t&& fieldBinding.declaringClass != null\r", "-\t\t\t\t&& fieldBinding.constant == NotAConstant\r", "-\t\t\t\t&& ((scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "-\t\t\t\t\t\t&& (indexOfFirstFieldBinding > 1 || !fieldBinding.isStatic())\r", "-\t\t\t\t\t\t&& fieldBinding.declaringClass.id != T_Object) //no change for Object fields (in case there was)\r", "-\t\t\t\t\t|| !localScope.canBeSeenByForCodeSnippet(fieldBinding.declaringClass, (ReferenceBinding) delegateThis.type))) {\r", "-\t\t\t\t\tbinding = new FieldBinding(fieldBinding, (ReferenceBinding) delegateThis.type);\r", "-\t\t\t}\r", "-\t\t}\r", "-\totherBindings = new FieldBinding[otherBindingsLength];\r", "+\tthis.otherCodegenBindings = this.otherBindings = new FieldBinding[otherBindingsLength];\r", "-\t\t\t// if the binding declaring class is not visible, need special action\r", "-\t\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding\r", "-\t\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type\t\t\t\r", "-\t\t\tif (delegateThis == null) {\r", "-\t\t\t\tif (field.declaringClass != type\r", "-\t\t\t\t\t&& !type.isArrayType()\t\t\t\t\r", "-\t\t\t\t\t&& field.declaringClass != null // array.length\r", "-\t\t\t\t\t&& field.constant == NotAConstant\r", "-\t\t\t\t\t&& ((scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\t\t\t\t\t\r", "-\t\t\t\t\t\t\t&& field.declaringClass.id != T_Object) //no change for Object fields (in case there was)\r", "-\t\t\t\t\t\t|| !field.declaringClass.canBeSeenBy(scope))) {\r", "-\t\t\t\t\t\totherBindings[place] = new FieldBinding(field, (ReferenceBinding)type);\r", "-\t\t\t\t}\r", "-\t\t\t} else {\r", "-\t\t\t\tCodeSnippetScope localScope = new CodeSnippetScope(scope);\r", "-\t\t\t\tif (field.declaringClass != type\r", "-\t\t\t\t\t&& !type.isArrayType()\r", "-\t\t\t\t\t&& field.declaringClass != null // array.length\r", "-\t\t\t\t\t&& field.constant == NotAConstant\r", "-\t\t\t\t\t&& ((scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "-\t\t\t\t\t\t\t&& field.declaringClass.id != T_Object) //no change for Object fields (in case there was)\r", "-\t\t\t\t\t\t|| !localScope.canBeSeenByForCodeSnippet(field.declaringClass, (ReferenceBinding) delegateThis.type))){\r", "-\t\t\t\t\totherBindings[place] = new FieldBinding(field, (ReferenceBinding)type);\r", "-\t\t\t\t}\r", "-\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "807920f83373a4047df85dd61e2aa4e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void manageSyntheticAccessIfNecessary( \t\tBlockScope currentScope, \t\tFieldBinding fieldBinding, \t\tTypeBinding lastReceiverType, \t\tint index, \t\tFlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, int index, FlowInfo flowInfo)", "diff": ["-\t */", "-\tpublic void manageSyntheticAccessIfNecessary(", "-\t\tBlockScope currentScope,", "-\t\tFieldBinding fieldBinding,", "-\t\tTypeBinding lastReceiverType,", "-\t\tint index,", "-\t\tFlowInfo flowInfo) {", "-\t\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) != 0) return;", "+ */", "+public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, int index, FlowInfo flowInfo) {", "+\t// do nothing", "+}", "-\t\t// if the binding declaring class is not visible, need special action", "-\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "-\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\tboolean useDelegate;", "-\t\tif (index < 0) { // write-access?", "-\t\t    useDelegate = fieldBinding == this.binding && this.delegateThis != null;", "-\t\t} else {", "-\t\t\tuseDelegate = index == 0 && this.delegateThis != null;", "-\t\t}", "-", "-\t\tif (useDelegate) {", "-\t\t\tlastReceiverType = this.delegateThis.type;", "-\t\t}", "-\t\t// if the binding declaring class is not visible, need special action", "-\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "-\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\t// and not from Object or implicit static field access.", "-\t\tif (fieldBinding.declaringClass != lastReceiverType", "-\t\t\t\t&& !lastReceiverType.isArrayType()", "-\t\t\t\t&& fieldBinding.declaringClass != null // array.length", "-\t\t\t\t&& fieldBinding.constant() == Constant.NotAConstant) {", "-\t\t\tCompilerOptions options = currentScope.compilerOptions();", "-\t\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "-\t\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || (index < 0 ? fieldBinding != this.binding : index > 0) || this.indexOfFirstFieldBinding > 1 || !fieldBinding.isStatic())", "-\t\t\t\t\t&& fieldBinding.declaringClass.id != T_JavaLangObject) // no change for Object fields", "-\t\t\t\t|| !(useDelegate", "-\t\t\t\t\t\t? new CodeSnippetScope(currentScope).canBeSeenByForCodeSnippet(fieldBinding.declaringClass, (ReferenceBinding) this.delegateThis.type)", "-\t\t\t\t\t\t: fieldBinding.declaringClass.canBeSeenBy(currentScope))) {", "-", "-\t\t\t    if (index < 0) { // write-access?", "-\t\t\t\t\tif (fieldBinding == this.binding){", "-\t\t\t\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType.erasure());", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (this.otherCodegenBindings == this.otherBindings){", "-\t\t\t\t\t\t\tint l = this.otherBindings.length;", "-\t\t\t\t\t\t\tSystem.arraycopy(this.otherBindings, 0, this.otherCodegenBindings = new FieldBinding[l], 0, l);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.otherCodegenBindings[this.otherCodegenBindings.length-1] = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType.erasure());", "-\t\t\t\t\t}", "-\t\t\t    } if (index == 0){", "-\t\t\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType.erasure());", "-\t\t\t\t} else {", "-\t\t\t\t\tif (this.otherCodegenBindings == this.otherBindings){", "-\t\t\t\t\t\tint l = this.otherBindings.length;", "-\t\t\t\t\t\tSystem.arraycopy(this.otherBindings, 0, this.otherCodegenBindings = new FieldBinding[l], 0, l);", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.otherCodegenBindings[index-1] = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType.erasure());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}"]}], "num": 55098}
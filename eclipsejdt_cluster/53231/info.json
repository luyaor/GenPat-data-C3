{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f2235b7c1303037ba94d6ebb4314360", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4aae13fe2fe359df8e59326eab55cc6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public void recordHandlingException( \t\tReferenceBinding exceptionType, \t\tUnconditionalFlowInfo flowInfo, \t\tTypeBinding raisedException, \t\tASTNode invocationSite, \t\tboolean wasAlreadyDefinitelyCaught)", "signatureAfterChange": "  public void recordHandlingException( \t\tReferenceBinding exceptionType, \t\tUnconditionalFlowInfo flowInfo, \t\tTypeBinding raisedException, \t\tTypeBinding caughtException, \t\tASTNode invocationSite, \t\tboolean wasAlreadyDefinitelyCaught)", "diff": ["+\t\tTypeBinding caughtException,", "-", "-\tthis.initsOnExceptions[index] =", "-\t\t(this.initsOnExceptions[index].tagBits & FlowInfo.UNREACHABLE) == 0 ?", "-\t\t\tthis.initsOnExceptions[index].mergedWith(flowInfo):", "+\tint catchBlock = this.exceptionToCatchBlockMap != null? this.exceptionToCatchBlockMap[index] : index;", "+\tif (caughtException != null && this.catchArguments != null && this.catchArguments.length > 0 && !wasAlreadyDefinitelyCaught) {", "+\t\tCatchParameterBinding catchParameter = (CatchParameterBinding) this.catchArguments[catchBlock].binding;", "+\t\tcatchParameter.setPreciseType(caughtException);", "+\t}", "+\tthis.initsOnExceptions[catchBlock] =", "+\t\t(this.initsOnExceptions[catchBlock].tagBits & FlowInfo.UNREACHABLE) == 0 ?", "+\t\t\tthis.initsOnExceptions[catchBlock].mergedWith(flowInfo):"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d9ba5c19f7291796e8862f5cc00ad4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "4bdd855d0f802eda5492db24df9cfcadb9d4328e", "commitAfterChange": "f4651b2dd08a519f2dfe53cd582459f24cec135f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void createMethods(IBinaryMethod[] iMethods)", "signatureAfterChange": " private void createMethods(IBinaryMethod[] iMethods)", "diff": ["-\tint clinitIndex = -1;", "-\t\t\tchar[] methodName = iMethods[i].getSelector();", "-\t\t\tif (methodName[0] == '<' && methodName.length == 8) { // Can only match <clinit>", "+\t\t\tIBinaryMethod method;", "+\t\t\tchar[] methodName = (method = iMethods[i]).getSelector();", "+\t\t\tif ((methodName[0] == '<' && methodName.length == 8)", "+\t\t\t\t\t|| (method.getModifiers() & AccSynthetic) != 0) { // Can only match <clinit> or synthetics", "-\t\t\t\tclinitIndex = i;", "-\t\t\t\tbreak;", "-\tfor (int i = 0, length = iMethods.length; i < length; i++)", "-\t\tif (i != clinitIndex)", "-\t\t\tthis.methods[next++] = createMethod(iMethods[i]);", "+\tfor (int i = 0, length = iMethods.length; i < length; i++){", "+\t\t\tIBinaryMethod method;", "+\t\t\tchar[] methodName = (method = iMethods[i]).getSelector();", "+\t\t\tif (!((methodName[0] == '<' && methodName.length == 8)", "+\t\t\t\t\t|| (method.getModifiers() & AccSynthetic) != 0)) { // Can only match <clinit> or synthetics", "+\t\t\t\tthis.methods[next++] = createMethod(iMethods[i]);", "+\t\t\t}", "+\t}"]}], "num": 53231}
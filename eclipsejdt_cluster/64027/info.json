{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3dc1aa5811ac1e8697a0b69bf0b10b9", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3a222662be72ec8052edf0d51baee05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/FriendDependencyTests.java", "commitBeforeChange": "b98255ea12b09d2a9b7c2a33f6e9c53123da1aec", "commitAfterChange": "ea7357803f7625c89fd0063c616a1f7a28c12a8c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void internSimpleNames()", "signatureAfterChange": " public void testInternSimpleNames()", "diff": ["-public void internSimpleNames() {", "+public void testInternSimpleNames() {", "+", "+\ttry {", "+\t\tString className = \"org.eclipse.jdt.internal.core.builder.ReferenceCollection\";", "+\t\tClass clazz = Class.forName(className);", "+\t\t//org.eclipse.jdt.internal.core.JavaModelManager.getLastBuiltState(IProject, IProgressMonitor)", "+\t\tClass[] arguments = new Class[2];", "+\t\tString argumentClassName = \"org.eclipse.jdt.internal.core.builder.StringSet\";", "+\t\targuments[0] = Class.forName(argumentClassName);", "+\t\targuments[1] = Boolean.TYPE;", "+\t\tclazz.getDeclaredMethod(\"internSimpleNames\", arguments);", "+\t} catch (ClassNotFoundException e) {", "+\t\te.printStackTrace();", "+\t\tassertTrue(\"Should be there\", false);", "+\t} catch (SecurityException e) {", "+\t\te.printStackTrace();", "+\t\tassertTrue(\"Should be there\", false);", "+\t} catch (NoSuchMethodException e) {", "+\t\te.printStackTrace();", "+\t\tassertTrue(\"Should be there\", false);", "+\t} catch (IllegalArgumentException e) {", "+\t\te.printStackTrace();", "+\t\tassertTrue(\"Should be there\", false);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e63033687ee78753093ea9b91e904349", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/DecodeCodeFormatterPreferences.java", "commitBeforeChange": "b9fba611699cd3de6aaeecf1e218591cb72fa466", "commitAfterChange": "7464b1ea1c1edb40a36aa8ba9bb025cac2275919", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic static Map decodeCodeFormatterOptions(String fileName)", "signatureAfterChange": "  \tpublic static Map decodeCodeFormatterOptions(String fileName, String profileName)", "diff": ["-\tpublic static Map decodeCodeFormatterOptions(String fileName) {", "+", "+\tpublic static Map decodeCodeFormatterOptions(String fileName, String profileName) {", "-\t\t\tsaxParser.parse(new File(fileName), new DecodeCodeFormatterPreferences());", "+\t\t\tfinal DecodeCodeFormatterPreferences preferences = new DecodeCodeFormatterPreferences(profileName);", "+\t\t\tsaxParser.parse(new File(fileName), preferences);", "+\t\t\treturn preferences.getEntries();", "-\t\t} ", "+\t\t}", "+\t\t/*try {", "+\t\t\tBufferedReader reader = new BufferedReader(new FileReader(fileName));", "+\t\t\tElement rootNode;", "+", "+\t\t\ttry {", "+\t\t\t\tDocumentBuilder parser =", "+\t\t\t\t\tDocumentBuilderFactory.newInstance().newDocumentBuilder();", "+\t\t\t\trootNode = parser.parse(new InputSource(reader)).getDocumentElement();", "+\t\t\t\treturn rootNode;", "+\t\t\t} catch (SAXException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t} catch (ParserConfigurationException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t} finally {", "+\t\t\t\treader.close();", "+\t\t\t}", "+\t\t} catch (IOException e) {", "+\t\t\te.printStackTrace();", "+\t\t}*/", "+\t}"]}], "num": 64027}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5843c9a9f4ce2206f11f95ba1d5f1334", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10e68e1fc41239734f95d30af39f27e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "7ecaef5de16e38a10853a04df519c7ec4f9241fc", "commitAfterChange": "69abb8d1d00eb0a16e17263935c45f1044354687", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "diff": ["-\t\t} else if (genericTypeArguments != null) {", "+\t\t} else if (genericTypeArguments != null && compilerOptions().complianceLevel < ClassFileConstants.JDK1_7) {", "-\t\t\t\tif (!((ParameterizedGenericMethodBinding) method).wasInferred) {", "+\t\t\t\tif (!((ParameterizedGenericMethodBinding) method).wasInferred)", "-\t\t\t\t\tif (compilerOptions().complianceLevel < ClassFileConstants.JDK1_7) {", "-\t\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.TypeArgumentsForRawGenericMethod);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif (compilerOptions().complianceLevel < ClassFileConstants.JDK1_7) {", "-\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.TypeParameterArityMismatch);", "-\t\t\t\t}", "+\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.TypeArgumentsForRawGenericMethod);", "+\t\t\t} else if (!method.isOverriding() || !isOverriddenMethodGeneric(method)) {", "+\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.TypeParameterArityMismatch);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1655b761aac50f0c428eb9900ded14ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "diff": ["-\t\t\t&& (method.returnType.tagBits & HasTypeVariable) == 0 ", "+\t\t\t&& (method.returnType.tagBits & TagBits.HasTypeVariable) == 0 ", "-\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, TypeArgumentsForRawGenericMethod);", "+\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.TypeArgumentsForRawGenericMethod);", "-\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, TypeParameterArityMismatch);", "+\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.TypeParameterArityMismatch);", "-\t\t\treturn new ProblemMethodBinding(method, method.selector, arguments, ParameterizedMethodTypeMismatch);", "+\t\t\treturn new ProblemMethodBinding(method, method.selector, arguments, ProblemReasons.ParameterizedMethodTypeMismatch);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b371c2db7f991ad52b491207cb72ff4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "37d61d5c5c650829214bf858cd078e7d345a9a26", "commitAfterChange": "dd98852dd97e40bffde60b114dfaf133a2c50581", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "diff": ["-\t\t} else if (genericTypeArguments != null && !(method instanceof ParameterizedGenericMethodBinding)) {", "-\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, TypeParameterArityMismatch);", "+\t\t} else if (genericTypeArguments != null) {", "+\t\t\tif (method instanceof ParameterizedGenericMethodBinding) {", "+\t\t\t\tif (method.declaringClass.isRawType())", "+\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, TypeArgumentsForRawGenericMethod); // attempt to invoke generic method of raw type with type hints <String>foo()", "+\t\t\t} else {", "+\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, TypeParameterArityMismatch);", "+\t\t\t}"]}], "num": 51995}
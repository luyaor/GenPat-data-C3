{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04b0078602ca1e1fab1abf64947d3ddf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10905b3f69f2f32efa7cca11b2c53ff3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "f74715a51fe7f041c72bc80d27202c276ba5b2e3", "commitAfterChange": "f253b0c587ecac9d5c91cf7491378fa42651550b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r public void addProblemMethod(\r \tAbstractMethodDeclaration method, \r \tMethodBinding methodBinding, \r \tIProblem[] problems)", "signatureAfterChange": "\r public void addProblemMethod(\r \tAbstractMethodDeclaration method, \r \tMethodBinding methodBinding, \r \tIProblem[] problems)", "diff": ["-\tString problemString = \"\";\r", "+\tString problemString = \"\"/*nonNLS*/;\r", "-\t\t\t\tbuffer.append(\"\\t\" + problem.getMessage() + \"\\n\");\r", "+\t\t\t\tbuffer.append(\"\\t\"/*nonNLS*/ + problem.getMessage() + \"\\n\"/*nonNLS*/);\r", "-\t\t\tbuffer.insert(0, \"Unresolved compilation problems: \\n\");\r", "+\t\t\tbuffer.insert(0, Util.bind(\"compilation.unresolvedProblems\"/*nonNLS*/));\r", "-\t\t\tbuffer.insert(0, \"Unresolved compilation problem: \\n\");\r", "+\t\t\tbuffer.insert(0, Util.bind(\"compilation.unresolvedProblem\"/*nonNLS*/));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16a7e823c6bca3cdec6cf71a2738ca0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/BuildNotifier.java", "commitBeforeChange": "c66df91fe4ef54ca3fc328225a1127f6072a0caf", "commitAfterChange": "05b313c1ebccd8136a07de8477552de6fc20b5e1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public void begin()", "signatureAfterChange": "\r public void begin()", "diff": ["-\t\tfBuildMonitor.beginBuild(fIsBatch ? \"Begin batch build\" : \"Begin incremental build\");\r", "+\t\tfBuildMonitor.beginBuild(fIsBatch ? Util.bind(\"build.beginBatch\"/*nonNLS*/) : Util.bind(\"build.beginIncremental\"/*nonNLS*/));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27e0b12a2235eed5202bee516c47b627", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/StateSnap.java", "commitBeforeChange": "c66df91fe4ef54ca3fc328225a1127f6072a0caf", "commitAfterChange": "05b313c1ebccd8136a07de8477552de6fc20b5e1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public StateImpl read(JavaDevelopmentContextImpl dc, IProject project, DataInputStream in) throws IOException", "signatureAfterChange": "\r public StateImpl read(JavaDevelopmentContextImpl dc, IProject project, DataInputStream in) throws IOException", "diff": ["-\t\tthrow new IOException(\"Unrecognized format\");\r", "+\t\tthrow new IOException(Util.bind(\"build.wrongFileFormat\"/*nonNLS*/));\r", "-\t\t\tthrow new IOException(\"Unrecognized state format\");\r", "+\t\t\tthrow new IOException(Util.bind(\"build.unhandledVersionFormat\"/*nonNLS*/));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38fd6f76128290d6339ab157c27fc964", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/StateSnapConstantPool.java", "commitBeforeChange": "c66df91fe4ef54ca3fc328225a1127f6072a0caf", "commitAfterChange": "05b313c1ebccd8136a07de8477552de6fc20b5e1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r public IHandle getHandle(int index) throws IOException", "signatureAfterChange": "\r public IHandle getHandle(int index) throws IOException", "diff": ["-\t\t\tthrow new IOException(\"Error in format\");\r", "+\t\t\tthrow new IOException(Util.bind(\"build.formatError\"/*nonNLS*/));\r", "-\t\tthrow new IOException(\"Error in format\");\r", "+\t\tthrow new IOException(Util.bind(\"build.formatError\"/*nonNLS*/));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5287969e80d3b9cf6a8c0872944a98b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "e22e3614eb69018940fae05b9e58858f8a672e01", "commitAfterChange": "56d8ad4b7df60e79a9ee98611feebac099c594f9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public static IStatus validateImportDeclaration(String name)", "signatureAfterChange": "\r public static IStatus validateImportDeclaration(String name)", "diff": ["-\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, \"An import declaration must not be null\", null);;\r", "+\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.import.nullImport\"/*nonNLS*/), null);\r", "-\t\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, \"An import declaration must not end with an unqualified *\", null);;\r", "+\t\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.import.unqualifiedImport\"/*nonNLS*/), null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f5dbdb3a88795d529022e242e24d33a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "f391db9dfa982dbe09df7c4d362cd9e5a8546769", "commitAfterChange": "79d0c2f491160c45c925011f7ac69394bca87445", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public final static void buildFilesFromLPG(String dataFilename)\tthrows java.io.IOException", "signatureAfterChange": "\r public final static void buildFilesFromLPG(String dataFilename)\tthrows java.io.IOException", "diff": ["-\t\tSystem.out.println(\"The path for the javadcl.java file is incorrect\");\r", "+\t\tSystem.out.println(Util.bind(\"parser.incorrectPath\"/*nonNLS*/));\r", "-\tSystem.out.println(\"MOVE FILES IN THE Runtime DIRECTORY OF Parser.class\");\r", "+\tSystem.out.println(Util.bind(\"parser.moveFiles\"/*nonNLS*/));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62195f8c091ef58266f358dc94fbb8fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "f74715a51fe7f041c72bc80d27202c276ba5b2e3", "commitAfterChange": "f253b0c587ecac9d5c91cf7491378fa42651550b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r public void addProblemConstructor(\r \tAbstractMethodDeclaration method, \r \tMethodBinding methodBinding, \r \tIProblem[] problems)", "signatureAfterChange": "\r public void addProblemConstructor(\r \tAbstractMethodDeclaration method, \r \tMethodBinding methodBinding, \r \tIProblem[] problems)", "diff": ["-\t\t\t\tbuffer.append(\"\\t\" + problem.getMessage() + \"\\n\");\r", "+\t\t\t\tbuffer.append(\"\\t\"/*nonNLS*/ + problem.getMessage() + \"\\n\"/*nonNLS*/);\r", "-\t\t\tbuffer.insert(0, \"Unresolved compilation problems: \\n\");\r", "+\t\t\tbuffer.insert(0, Util.bind(\"compilation.unresolvedProblems\"/*nonNLS*/));\r", "-\t\t\tbuffer.insert(0, \"Unresolved compilation problem: \\n\");\r", "+\t\t\tbuffer.insert(0, Util.bind(\"compilation.unresolvedProblem\"/*nonNLS*/));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d2f62fba090240352fcdbeca38e6b72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/StateSnapConstantPool.java", "commitBeforeChange": "c66df91fe4ef54ca3fc328225a1127f6072a0caf", "commitAfterChange": "05b313c1ebccd8136a07de8477552de6fc20b5e1", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r public IPackage getPackage(int index) throws IOException", "signatureAfterChange": "\r public IPackage getPackage(int index) throws IOException", "diff": ["-\t\t\tthrow new IOException(\"Error in format\");\r", "+\t\t\tthrow new IOException(Util.bind(\"build.formatError\"/*nonNLS*/));\r", "-\t\tthrow new IOException(\"Error in format\");\r", "+\t\tthrow new IOException(Util.bind(\"build.formatError\"/*nonNLS*/));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6db33a2feee5c06657c04ae01ec05536", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "f74715a51fe7f041c72bc80d27202c276ba5b2e3", "commitAfterChange": "f253b0c587ecac9d5c91cf7491378fa42651550b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public void addProblemClinit(IProblem[] problems)", "signatureAfterChange": "\r public void addProblemClinit(IProblem[] problems)", "diff": ["-\t\t\tbuffer.insert(0, \"Unresolved compilation problems: \\n\");\r", "+\t\t\tbuffer.insert(0, Util.bind(\"compilation.unresolvedProblems\"/*nonNLS*/));\r", "-\t\t\tbuffer.insert(0, \"Unresolved compilation problem: \\n\");\r", "+\t\t\tbuffer.insert(0, Util.bind(\"compilation.unresolvedProblem\"/*nonNLS*/));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e60313b5e9798e8f3e8acfdf50a5062", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/jdom/DOMMethod.java", "commitBeforeChange": "79d0c2f491160c45c925011f7ac69394bca87445", "commitAfterChange": "5e822caf41e5c8401dd961b84bb7f6d0d93a554e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public void addParameter(String type, String name) throws IllegalArgumentException", "signatureAfterChange": "\r public void addParameter(String type, String name) throws IllegalArgumentException", "diff": ["-\t\tthrow new IllegalArgumentException(\"Cannot add parameter with null type\");\r", "+\t\tthrow new IllegalArgumentException(Util.bind(\"dom.nullTypeParameter\"/*nonNLS*/));\r", "-\t\tthrow new IllegalArgumentException(\"Cannot add parameter with null name\");\r", "+\t\tthrow new IllegalArgumentException(Util.bind(\"dom.nullNameParameter\"/*nonNLS*/));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81a752e0ff39e0b40c6d37a95b5fdb8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "5daa588a9c6875c9de552511061bd65eb70651f2", "commitAfterChange": "6b75596628a9411872718e8e4eb4a7802dfca2a9", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  static State read(IProject project, DataInputStream in) throws IOException", "signatureAfterChange": "  static State read(IProject project, DataInputStream in) throws IOException", "diff": ["-\t\tSystem.out.println(\"About to read state...\"); //$NON-NLS-1$", "+\t\tSystem.out.println(\"About to read state \" + project.getName()); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"Found non-compatible state version... answered null\"); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"Found non-compatible state version... answered null for \" + project.getName()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8efad5d6da7fe4b80511cc9445858168", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 57, "signatureBeforeChange": "\r \tpublic ITypeHierarchy newTypeHierarchy(IType type, IRegion region, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "\r \tpublic ITypeHierarchy newTypeHierarchy(IType type, IRegion region, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\tthrow new IllegalArgumentException(\"type cannot be null\");\r", "+\t\t\tthrow new IllegalArgumentException(Util.bind(\"hierarchy.nullFocusType\"/*nonNLS*/));\r", "-\t\t\tthrow new IllegalArgumentException(\"region cannot be null\");\r", "+\t\t\tthrow new IllegalArgumentException(Util.bind(\"hierarchy.nullRegion\"/*nonNLS*/));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0ca0cd1de788aa658c27e811e7fde37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/JavaBuilder.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tprotected IProject[] build(int kind, Map map, IProgressMonitor monitor)\r \t\tthrows CoreException", "signatureAfterChange": "\r \tprotected IProject[] build(int kind, Map map, IProgressMonitor monitor) throws CoreException", "diff": ["-\tprotected IProject[] build(int kind, Map map, IProgressMonitor monitor)\r", "-\t\tthrows CoreException {\r", "+\tprotected IProject[] build(int kind, Map map, IProgressMonitor monitor) throws CoreException {\r", "-\t\tif (!this.getProject().exists())\r", "-\t\t\treturn new IProject[0];\r", "+\t\tif (!this.getProject().exists()) return new IProject[0];\r", "-\r", "+\t\t\r", "-\t\t\t} else {\r", "+\t\t\t}\r", "+\t\t\telse {\r", "-\t\t\t\t} else {\r", "+\t\t\t\t}\r", "+\t\t\t\telse {\r", "-\t\t\t\tthrow new CoreException(\r", "-\t\t\t\t\tnew Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, \"Java Builder\", e));\r", "+\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"build.builderName\"/*nonNLS*/), e));\r", "-\t\t\tif (monitor != null)\r", "-\t\t\t\tmonitor.subTask(\"Java build completed\");\r", "+\t\t\tif (monitor != null) monitor.subTask(Util.bind(\"build.completed\"/*nonNLS*/));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8bdea1de9241735fa0b396522c4a02a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/jdom/DOMMethod.java", "commitBeforeChange": "79d0c2f491160c45c925011f7ac69394bca87445", "commitAfterChange": "5e822caf41e5c8401dd961b84bb7f6d0d93a554e", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "\r public void setParameters(String[] types, String[] names) throws IllegalArgumentException", "signatureAfterChange": "\r public void setParameters(String[] types, String[] names) throws IllegalArgumentException", "diff": ["-\t\t\tthrow new IllegalArgumentException(\"types and names must have identical length\");\r", "+\t\t\tthrow new IllegalArgumentException(Util.bind(\"dom.mismatchArgNamesAndTypes\"/*nonNLS*/));\r", "-\t\tthrow new IllegalArgumentException(\"types and names must have identical length\");\r", "+\t\tthrow new IllegalArgumentException(Util.bind(\"dom.mismatchArgNamesAndTypes\"/*nonNLS*/));\r", "-\t\tparametersBuffer.append(\"(\");\r", "+\t\tparametersBuffer.append(\"(\"/*nonNLS*/);\r", "-\t\t\t\t.append(\" \")\r", "+\t\t\t\t.append(' ')\r", "-\t\tparametersBuffer.append(\")\");\r", "+\t\tparametersBuffer.append(')');\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb55ebb118108eebbe1b13a6666bfab5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java", "commitBeforeChange": "f391db9dfa982dbe09df7c4d362cd9e5a8546769", "commitAfterChange": "79d0c2f491160c45c925011f7ac69394bca87445", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public char[] readableName()", "signatureAfterChange": "\r public char[] readableName()", "diff": ["-\t\t\treturn (\"<anonymous subclass of \" + new String(superclass.readableName()) + \">\").toCharArray();\r", "+\t\t\treturn (\"<\"/*nonNLS*/+Util.bind(\"binding.subclass\"/*nonNLS*/,new String(superclass.readableName())) + \">\"/*nonNLS*/).toCharArray();\r", "-\t\t\treturn (\"<anonymous implementation of \" + new String(superInterfaces[0].readableName()) + \">\").toCharArray();\t\t\t\r", "+\t\t\treturn (\"<\"/*nonNLS*/+Util.bind(\"binding.implementation\"/*nonNLS*/,new String(superInterfaces[0].readableName())) + \">\"/*nonNLS*/).toCharArray();\t\t\t\r"]}], "num": 71169}
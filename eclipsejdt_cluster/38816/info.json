{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a22888158ce2f933e464377a3d8c8e0f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58a618dd892a6442c57635da205fa973", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8845e4c8987116cc9c0aea93f48c3f458c73e5bf", "commitAfterChange": "5c85878a62876932bc62b0767f0e4b075cea01c0", "methodNumberBeforeChange": 300, "methodNumberAfterChange": 300, "signatureBeforeChange": " \tpublic void test298()", "signatureAfterChange": " \tpublic void _test298()", "diff": ["-\t// X is not abstract and does not override abstract method putAll(java.util.Map<? extends java.lang.String,? extends V>) in java.util.Map", "-\tpublic void test298() {", "-\t\tthis.runConformTest(", "+\tpublic void _test298() {", "+\t\tthis.runNegativeTest(", "-\t\t\t\t\"   \\n\" + ", "-\t\t\t\t\"   public static void main(String [] args) {\\n\" + ", "-\t\t\t\t\"        System.out.println(\\\"SUCCESS\\\");\\n\" + ", "-\t\t\t\t\"   }\\n\" + ", "-\t\t\t\"SUCCESS\");", "-/* Also", "-name clash: putAll(java.util.Map<? extends java.lang.String,? extends V>) in GenericMap<S,V> and putAll(java.util.Map<? extends K,? extends V>)", "-in java.util.Map<S,V> have the same erasure, yet neither overrides the other", "-", "-abstract class GenericMap<S, V> implements java.util.Map<S, V> {", "-   public void putAll(java.util.Map<? extends String, ? extends V> t) { }", "-}", "- */", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tpublic class X<V> implements Map<String, V> {\\n\" + ", "+\t\t\t\"\t             ^\\n\" + ", "+\t\t\t\"Class must implement the inherited abstract method Map<String,V>.putAll(Map<? extends String,? extends V>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 17)\\n\" + ", "+\t\t\t\"\tpublic void putAll(Map<String, ? extends V> t) { }\\n\" + ", "+\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash : The method putAll(Map<String,? extends V>) of type X<V> has the same erasure as putAll(Map<? extends K,? extends V>) of type Map<String,V> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\", //---------------------------", "+\t\t\t\t\"public abstract class X<S, V> implements java.util.Map<Object, Object> {\\n\" + ", "+\t\t\t\t\"   public void putAll(java.util.Map<?, ?> t) { }\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"\");", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\", //---------------------------", "+\t\t\t\t\"public abstract class X<S, V> implements java.util.Map<S, V> {\\n\" + ", "+\t\t\t\t\"   public void putAll(java.util.Map<? extends String, ? extends V> t) { }\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic void putAll(java.util.Map<? extends String, ? extends V> t) { }\\n\" + ", "+\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash : The method putAll(Map<? extends String,? extends V>) of type X<S,V> has the same erasure as putAll(Map<? extends K,? extends V>) of type Map<S,V> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d78ae219584dcc65a948e24c19047c91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "a61562d7e56bcf68476db5393ae43445e5aee116", "commitAfterChange": "73e230db98e1a65780b6160021e4c8063d2276e3", "methodNumberBeforeChange": 327, "methodNumberAfterChange": 327, "signatureBeforeChange": " public void test177()", "signatureAfterChange": " public void test177()", "diff": ["-\tif (new CompilerOptions(getCompilerOptions()).sourceLevel >= ClassFileConstants.JDK1_6) {", "+\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) { // see test187()", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"import java.util.*;\\n\" +", "+\t\t\t\t\"interface I { I foo(Collection<?> c); }\\n\" +", "+\t\t\t\t\"class A extends LinkedHashMap {\\n\" +", "+\t\t\t\t\"\tpublic A foo(Collection c) { return this; }\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class X extends A implements I {\\n\" +", "+\t\t\t\t\"\t@Override public X foo(Collection<?> c) { return this; }\\n\" +", "+\t\t\t\t\"}\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass A extends LinkedHashMap {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"The serializable class A does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass A extends LinkedHashMap {\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"LinkedHashMap is a raw type. References to generic type LinkedHashMap<K,V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tpublic A foo(Collection c) { return this; }\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tclass X extends A implements I {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"Name clash: The method foo(Collection<?>) of type I has the same erasure as foo(Collection) of type A but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tclass X extends A implements I {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"The serializable class X does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\t@Override public X foo(Collection<?> c) { return this; }\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(Collection<?>) of type X has the same erasure as foo(Collection) of type A but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);", "+\t} else if (new CompilerOptions(getCompilerOptions()).sourceLevel == ClassFileConstants.JDK1_6) {"]}], "num": 38816}
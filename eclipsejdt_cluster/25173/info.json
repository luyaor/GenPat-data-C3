{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f482de80a4d98c1f16e970d3190b9004", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "603cb7d52f5206f2e3204566d7b80904", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "a253e12d0e5500dde78cb361a701e1e0a42cc195", "commitAfterChange": "e6906c72fd0737bba033cc849684f3e2192fc730", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " public void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " public void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t\t\tif (this.destinationPath != null)", "+\t\t\t\t\tif (this.destinationPath != null) {", "+\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "+\t\t\t\t\t\terrorMessage.append(currentArg);", "+\t\t\t\t\t\tif ((index + 1) < argCount) {", "+\t\t\t\t\t\t\terrorMessage.append(' ');", "+\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateOutputPath\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\t\tMain.bind(\"configure.duplicateOutputPath\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t}", "-\t\t\t\t\tif (bootclasspaths.size() > 0)", "+\t\t\t\t\tif (bootclasspaths.size() > 0) {", "+\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "+\t\t\t\t\t\terrorMessage.append(currentArg);", "+\t\t\t\t\t\tif ((index + 1) < argCount) {", "+\t\t\t\t\t\t\terrorMessage.append(' ');", "+\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateBootClasspath\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\t\tMain.bind(\"configure.duplicateBootClasspath\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t}", "-\t\t\t\t\tif (sourcepathClasspaths.size() > 0)", "+\t\t\t\t\tif (sourcepathClasspaths.size() > 0) {", "+\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "+\t\t\t\t\t\terrorMessage.append(currentArg);", "+\t\t\t\t\t\tif ((index + 1) < argCount) {", "+\t\t\t\t\t\t\terrorMessage.append(' ');", "+\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateSourcepath\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\t\tMain.bind(\"configure.duplicateSourcepath\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t}", "-\t\t\t\t\tif (extdirsNames.size() > 0)", "+\t\t\t\t\tif (extdirsNames.size() > 0) {", "+\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "+\t\t\t\t\t\terrorMessage.append(currentArg);", "+\t\t\t\t\t\tif ((index + 1) < argCount) {", "+\t\t\t\t\t\t\terrorMessage.append(' ');", "+\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateExtdirs\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\t\tMain.bind(\"configure.duplicateExtdirs\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b10b3ee6165f0a92331d20a67a3c30c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "98c08ded096494364ca74f948e8f494b3f447e89", "commitAfterChange": "423cede7ef9cde15030dc54ef2266be4ddcc9112", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tpublic void _test018()", "signatureAfterChange": " public void _test018b()", "diff": ["-// TODO (maxime) enforce working directory", "-\tpublic void _test018(){", "-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\t\"X.java\",", "-\t\t\t\t\t\"/** */\\n\" +", "-\t\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\t\"\tOK1 ok1;\\n\" +", "-\t\t\t\t\t\"}\",", "-\t\t\t\t\t\"OK1.java\",", "-\t\t\t\t\t\"/** */\\n\" +", "-\t\t\t\t\t\"public class OK1 {\\n\" +", "-\t\t\t\t\t\"\t// empty\\n\" +", "-\t\t\t\t\t\"}\"", "-\t\t\t},", "-\t        \"\\\"\" + OUTPUT_DIR +  File.separator + \"X.java\\\"\"", "-\t        + \" -1.5 -g -preserveAllLocals\"", "-\t        + \" -verbose -proceedOnError -referenceInfo\"", "-\t        + \" -d \\\"\" + OUTPUT_DIR + \"\\\"\",", "-\t        \"[2 .class files generated]\\n\",", "-\t        \"\",", "-\t        true);", "+// empty sourcepath works with javac but not with ecj", "+public void _test018b(){", "+\tString currentWorkingDirectoryPath = System.getProperty(\"user.dir\");", "+\tif (currentWorkingDirectoryPath == null) {", "+\t\tSystem.err.println(\"BatchCompilerTest#18b could not access the current working directory \" + currentWorkingDirectoryPath);", "+\t} else if (!new File(currentWorkingDirectoryPath).isDirectory()) {", "+\t\tSystem.err.println(\"BatchCompilerTest#18b current working directory is not a directory \" + currentWorkingDirectoryPath);", "+\t} else {", "+\t\tString xPath = currentWorkingDirectoryPath + File.separator + \"X.java\";", "+\t\tString ok1Path = currentWorkingDirectoryPath + File.separator + \"OK1.java\";", "+\t\tPrintWriter sourceFileWriter;", "+\t\ttry {", "+\t\t\tFile file = new File(xPath);", "+\t\t\tsourceFileWriter = new PrintWriter(new FileOutputStream(file));", "+\t\t\tsourceFileWriter.write(", "+\t\t\t\t\"/** */\\n\" +", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tOK1 ok1;\\n\" +", "+\t\t\t\t\"}\");", "+\t\t\tsourceFileWriter.close();", "+\t\t\tfile = new File(ok1Path);", "+\t\t\tsourceFileWriter = new PrintWriter(new FileOutputStream(file));", "+\t\t\tsourceFileWriter.write(", "+\t\t\t\t\"/** */\\n\" +", "+\t\t\t\t\"public class OK1 {\\n\" +", "+\t\t\t\t\"\t// empty\\n\" +", "+\t\t\t\t\"}\");", "+\t\t\tsourceFileWriter.close();", "+\t\t\tthis.runTest(", "+\t\t\t\ttrue,", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"dummy.java\", // enforce output directory creation", "+\t\t\t\t\t\"\"", "+\t\t\t\t},", "+\t\t        \"X.java\"", "+\t\t        + \" -1.5 -g -preserveAllLocals\"", "+\t\t        + \" -verbose -proceedOnError\"", "+\t\t        + \" -d \\\"\" + OUTPUT_DIR + \"\\\"\",", "+\t\t        TWO_FILES_GENERATED_MATCHER,", "+\t\t        EMPTY_STRING_MATCHER,", "+\t\t        false);", "+\t\t} catch (FileNotFoundException e) {", "+\t\t\tSystem.err.println(\"BatchCompilerTest#18b could not write to current working directory \" + currentWorkingDirectoryPath);", "+\t\t} finally {", "+\t\t\tnew File(xPath).delete();", "+\t\t\tnew File(ok1Path).delete();", "+\t\t}", "+\t}", "+}"]}], "num": 25173}
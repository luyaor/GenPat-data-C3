{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b83eab832bbe28bb3aa4095fbcd01ddb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ff6f61b2cefff782a09e2445dc56f07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic  FileGenerationResult generateFileDuringReconcile( \t\t\tICompilationUnit parentCompilationUnit, String typeName, \t\t\tString contents, WorkingCopyOwner workingCopyOwner, \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor )  \t \tthrows CoreException", "signatureAfterChange": " \tpublic FileGenerationResult generateFileDuringReconcile(ICompilationUnit parentCompilationUnit, String typeName, \t\t\tString contents) throws CoreException", "diff": ["-\tpublic  FileGenerationResult generateFileDuringReconcile(", "-\t\t\tICompilationUnit parentCompilationUnit, String typeName,", "-\t\t\tString contents, WorkingCopyOwner workingCopyOwner,", "-\t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor ) ", "-\t", "-\tthrows CoreException", "-\t{\t", "-\t\t", "+\tpublic FileGenerationResult generateFileDuringReconcile(ICompilationUnit parentCompilationUnit, String typeName,", "+\t\t\tString contents) throws CoreException", "+\t{", "-\t\t// We have disabled Reconcile-time type generated for a long time and", "-\t\t// everything else has changed ever since. Don't expect the following ", "-\t\t// code to work when we enable reconcile-time type generation again. ", "-\t\t// -theodora", "-\t\t// Work item", "-\t\t// 1) make sure generated source directory and classpath is setup properly", "-\t\t//    (i don't think it is today) -theodora", "+", "+\t\tIFile parentFile = (IFile) parentCompilationUnit.getResource();", "-\t\tICompilationUnit workingCopy = null;", "-\t\tFileGenerationResult result = null;", "-\t\tIFile parentFile = (IFile)parentCompilationUnit.getResource();", "-\t\ttry ", "-\t\t{", "-\t\t\t//", "-\t\t\t// get working copy (either from cache or create a new one)", "-\t\t\t//", "-\t\t\tworkingCopy = getCachedWorkingCopy( parentFile, typeName );", "-\t\t\t", "-\t\t\tif ( workingCopyOwner == null )", "-\t\t\t\tworkingCopyOwner = parentCompilationUnit.getOwner();", "-\t\t\t", "-\t\t\tif ( workingCopy == null )", "-\t\t\t{", "-\t\t\t\t// create a new working copy", "-\t\t\t\tworkingCopy = createNewWorkingCopy(  ", "-\t\t\t\t\t\tparentFile,  typeName, contents,  ", "-\t\t\t\t\t\tworkingCopyOwner, problemRequestor,  progressMonitor);", "-\t\t\t\t\t\t\t\t", "-\t\t\t\tworkingCopy.reconcile(AST.JLS3, true, workingCopyOwner,", "-\t\t\t\t\t\tprogressMonitor);", "-\t\t\t\t", "-\t\t\t\t// TODO:  pass in correct flag for source-patch changed.  This is probably not going to matter.  Per 103183, we will either ", "-\t\t\t\t// disable reconcile-time generation, or do it without any modifications, so we shouldn't have to worry about this.   ", "-\t\t\t\tresult = new FileGenerationResult((IFile)workingCopy.getResource(), true);", "-\t\t\t}", "+\t\tICompilationUnit workingCopy = getWorkingCopyForGeneratedFile(parentFile, typeName, _CUHELPER);", "+", "+\t\t// Update its contents and recursively reconcile", "+\t\tboolean modified = _CUHELPER.updateWorkingCopyContents(", "+\t\t\t\tcontents, workingCopy, parentCompilationUnit.getOwner(), RECURSIVE_RECONCILE);", "+\t\tif (AptPlugin.DEBUG_GFM) {", "+\t\t\tif (modified)", "+\t\t\t\tAptPlugin.trace(\"working copy modified during reconcile: \" + typeName); //$NON-NLS-1$", "-\t\t\t{", "+\t\t\t\tAptPlugin.trace(\"working copy unmodified during reconcile: \" + typeName); //$NON-NLS-1$", "+\t\t}", "-\t\t\t\t//", "-\t\t\t\t//  Update working copy's buffer with the contents of the type ", "-\t\t\t\t// ", "-\t\t\t\tboolean modified = updateWorkingCopy( contents, workingCopy, workingCopyOwner, progressMonitor );", "-\t\t\t\tresult = new FileGenerationResult((IFile)workingCopy.getResource(), modified);", "-\t\t\t}", "-\t\t\t", "-\t\t\treturn result;", "-\t\t} ", "-\t\tcatch (JavaModelException jme) ", "-\t\t{", "-\t\t\tAptPlugin.log(jme, \"Could not generate file for type: \" + typeName); //$NON-NLS-1$", "-\t\t} ", "-\t\treturn new FileGenerationResult((IFile)workingCopy.getResource(), true);", "+\t\tIFile generatedFile = (IFile) workingCopy.getResource();", "+\t\treturn new FileGenerationResult(generatedFile, modified);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3a946df73d1def6978b13477c6b4b69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/EntryResult.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " public boolean equals(Object anObject)", "signatureAfterChange": " public void addDocumentTable(HashtableOfObject table)", "diff": ["-}", "-public boolean equals(Object anObject){", "-\t", "-\tif (this == anObject) {", "-\t    return true;", "-\t}", "-\tif ((anObject != null) && (anObject instanceof EntryResult)) {", "-\t\tEntryResult anEntryResult = (EntryResult) anObject;", "-\t\tif (!CharOperation.equals(this.word, anEntryResult.word)) return false;", "-\t\tint length;", "-\t\tint[] refs, otherRefs;", "-\t\tif ((length = (refs = this.fileRefs).length) != (otherRefs = anEntryResult.fileRefs).length) return false;", "-\t\tfor (int i =  0; i < length; i++){", "-\t\t\tif (refs[i] != otherRefs[i]) return false;", "-\t\t}", "-\t\treturn true;", "-\t}", "-\treturn false;", "-\t", "+}", "+public void addDocumentTable(HashtableOfObject table) {", "+\tif (this.documentTables == null) {", "+\t\tthis.documentTables = new HashtableOfObject[] {table};", "+\t\treturn;", "+\t}", "+", "+\tint length = this.documentTables.length;", "+\tSystem.arraycopy(this.documentTables, 0, this.documentTables = new HashtableOfObject[length + 1], 0, length);", "+\tthis.documentTables[length] = table;"]}], "num": 5635}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e248e80d25f0fff6a2b54fd49950483d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b45bdac012eb41c9ab6524094bac6d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "7ba9ff29fe6b05ec0a2f58eaa1f5d3e68bb11101", "commitAfterChange": "427a01e331e57852efc472cca3a8360bd121fda9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "diff": ["+\tTypeAnnotationWalker walker = (sourceLevel >= ClassFileConstants.JDK1_8 && this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) ?", "+\t\t\tTypeAnnotationWalker.create(method) : TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER;", "-\t\t\t\t\tparameters[i - startIndex] = this.environment.getTypeFromSignature(methodDescriptor, index, end, false, this, missingTypeNames);", "+\t\t\t\t\tparameters[i - startIndex] = this.environment.getTypeFromSignature(methodDescriptor, index, end, false, this, missingTypeNames, walker.toMethodParameter((short)i));", "-\t\t\treturnType = this.environment.getTypeFromSignature(methodDescriptor, index + 1, -1, false, this, missingTypeNames);   // index is currently pointing at the ')'", "+\t\t\treturnType = this.environment.getTypeFromSignature(methodDescriptor, index + 1, -1, false, this, missingTypeNames, walker.toMethodReturn());   // index is currently pointing at the ')'", "-\t\t\ttypeVars = createTypeVariables(wrapper, false, missingTypeNames);", "+\t\t\ttypeVars = createTypeVariables(wrapper, false, missingTypeNames, walker, false/*class*/);", "+// \t\tNote(stephan): currently the compiler is not interested in retrieving receiver annotations, here is how we would do it:", "+//\t\tIBinaryAnnotation[] receiverAnnotations = walker.toReceiver().getAnnotationsAtCursor();", "+\t\t", "+\t\t\t\tshort rank = 0;", "-\t\t\t\t\ttypes.add(this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames));", "+\t\t\t\t\ttypes.add(this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames, walker.toMethodParameter(rank++)));", "-\t\treturnType = this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames);", "+\t\treturnType = this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames, walker.toMethodReturn());", "+\t\t\tint excRank = 0;", "-\t\t\t\ttypes.add(this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames));", "+\t\t\t\ttypes.add(this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames,", "+\t\t\t\t\twalker.toThrows(excRank++)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "833a8f9e7465a67344c06876b033cd05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "7ba9ff29fe6b05ec0a2f58eaa1f5d3e68bb11101", "commitAfterChange": "427a01e331e57852efc472cca3a8360bd121fda9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "signatureAfterChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "diff": ["-\t\tlong sourceLevel = this.environment.globalOptions.originalSourceLevel;", "+\t\tCompilerOptions globalOptions = this.environment.globalOptions;", "+\t\tlong sourceLevel = globalOptions.originalSourceLevel;", "+\t\tTypeAnnotationWalker walker = (sourceLevel >= ClassFileConstants.JDK1_8 && globalOptions.isAnnotationBasedNullAnalysisEnabled) ?", "+\t\t\t\tTypeAnnotationWalker.create(binaryType.getTypeAnnotations()) : TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER;", "-\t\t\t\tthis.typeVariables = createTypeVariables(wrapper, true, missingTypeNames);", "+\t\t\t\tthis.typeVariables = createTypeVariables(wrapper, true, missingTypeNames, walker, true/*class*/);", "-\t\t\tthis.superclass = (ReferenceBinding) this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames);", "+\t\t\tthis.superclass = (ReferenceBinding) this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames, ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twalker.toSupertype((short) -1));", "+\t\t\t\tshort rank = 0;", "-\t\t\t\t\ttypes.add(this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames));", "+\t\t\t\t\ttypes.add(this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames, walker.toSupertype(rank++)));"]}], "num": 62569}
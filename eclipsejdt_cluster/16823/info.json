{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b964aacb8473d6a77f89cb8f52c7af6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c7054ddf5875fe15ae7f7520b3ea4fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FinallyFlowContext.java", "commitBeforeChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "commitAfterChange": "8f130374b1740d04a2a1a32967cf4d9130b4bd12", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void recordUsingNullReference(Scope scope, VariableBinding local, \t\t\tASTNode location, int checkType, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\t\tASTNode location, int checkType, FlowInfo flowInfo)", "diff": ["-\tpublic void recordUsingNullReference(Scope scope, VariableBinding local,", "+\tpublic void recordUsingNullReference(Scope scope, LocalVariableBinding local,", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantNullAssignment(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantNullAssignment(local, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullInstanceof(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullInstanceof(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, reference);", "-\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, location);", "+\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, location);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, location);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, location);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, location);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantNullAssignment(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantNullAssignment(local, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullInstanceof(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullInstanceof(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, reference);", "-\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, location);", "+\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, location);", "-\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, location);", "+\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, location);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e5f9872739f6ca7711ed0f3db6620ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "8f261bb6c49278e86707910a4be5450c713c940a", "commitAfterChange": "b5977e771dcaa856815c805c4cdc6cf2a2c18650", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void complainOnDeferredNullChecks(BlockScope scope, FlowInfo callerFlowInfo)", "signatureAfterChange": " public void complainOnDeferredNullChecks(BlockScope scope, FlowInfo callerFlowInfo)", "diff": ["-\t\t\tExpression expression = this.nullReferences[i];", "+\t\t\tASTNode location = this.nullReferences[i];", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, location);", "+\t\t\t\t\tExpression expression = (Expression)location;", "-\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, expression);", "+\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, location);", "-\t\t\t\t\tthis.parent.recordNullityMismatch(scope, expression, flowInfo.nullStatus(local), this.expectedTypes[i]);", "+\t\t\t\t\tthis.parent.recordNullityMismatch(scope, (Expression)location, flowInfo.nullStatus(local), this.expectedTypes[i]);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase EXIT_RESOURCE:", "+\t\t\t\t\tif (local instanceof LocalVariableBinding) {", "+\t\t\t\t\t\tFakedTrackingVariable trackingVar = ((LocalVariableBinding) local).closeTracker;", "+\t\t\t\t\t\tif (trackingVar != null) {", "+\t\t\t\t\t\t\tif (trackingVar.hasDefinitelyNoResource(flowInfo)) {", "+\t\t\t\t\t\t\t\tcontinue; // no resource - no warning.", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (trackingVar.isClosedInFinallyOfEnclosing(scope)) {", "+\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (this.parent.recordExitAgainstResource(scope, flowInfo, trackingVar, location)) {", "+\t\t\t\t\t\t\t\tthis.nullReferences[i] = null;", "+\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\tthis.parent.recordUsingNullReference(scope, local, expression,", "+\t\t\tthis.parent.recordUsingNullReference(scope, local, location,", "-\t\t\tExpression expression = this.nullReferences[i];", "+\t\t\tASTNode location = this.nullReferences[i];", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, location);", "+\t\t\t\t\tExpression expression = (Expression) location;", "-\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, expression);", "+\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, location);", "-\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, expression);", "+\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, location);", "-\t\t\t\t\t\tscope.problemReporter().nullityMismatch(expression, this.expectedTypes[i], nullStatus, annotationName);", "+\t\t\t\t\t\tscope.problemReporter().nullityMismatch((Expression) location, this.expectedTypes[i], nullStatus, annotationName);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase EXIT_RESOURCE:", "+\t\t\t\t\tnullStatus = flowInfo.nullStatus(local);", "+\t\t\t\t\tif (nullStatus != FlowInfo.NON_NULL && local instanceof LocalVariableBinding) {", "+\t\t\t\t\t\tFakedTrackingVariable closeTracker = ((LocalVariableBinding)local).closeTracker;", "+\t\t\t\t\t\tif (closeTracker != null) {", "+\t\t\t\t\t\t\tif (closeTracker.hasDefinitelyNoResource(flowInfo)) {", "+\t\t\t\t\t\t\t\tcontinue; // no resource - no warning.", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (closeTracker.isClosedInFinallyOfEnclosing(scope)) {", "+\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tnullStatus = closeTracker.findMostSpecificStatus(flowInfo, scope, null);", "+\t\t\t\t\t\t\tcloseTracker.recordErrorLocation(this.nullReferences[i], nullStatus);", "+\t\t\t\t\t\t\tcloseTracker.reportRecordedErrors(scope, nullStatus);", "+\t\t\t\t\t\t\tthis.nullReferences[i] = null;", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0a81c5e8c7c74ac8a46479acf8ccb4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FinallyFlowContext.java", "commitBeforeChange": "99e06cdf0656ed0f6c3eb604300a8baae7ee3beb", "commitAfterChange": "d6c2a90130be430285c5f6a000090d250c310afd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\t\tExpression reference, int checkType, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void recordUsingNullReference(Scope scope, VariableBinding local, \t\t\tExpression reference, int checkType, FlowInfo flowInfo)", "diff": ["-\tpublic void recordUsingNullReference(Scope scope, LocalVariableBinding local,", "+\tpublic void recordUsingNullReference(Scope scope, VariableBinding local,", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantNullAssignment(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantNullAssignment(local, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullInstanceof(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullInstanceof(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "-\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, reference);", "+\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantNullAssignment(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantNullAssignment(local, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullInstanceof(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullInstanceof(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "-\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, reference);", "+\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "-\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);"]}], "num": 16823}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb07f2a388630b175fb8e5e90783d172", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aeb9049b0bd90e45360f007869a603da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "2e1e850482d90086f267196870c1a847d5fe0441", "commitAfterChange": "7cd8d4cd3f07fb844c8ea150f6fb9724f3e46dcf", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  protected char[] writeClassFile(ClassFile classFile, boolean isSecondaryType) throws CoreException", "signatureAfterChange": "  protected char[] writeClassFile(ClassFile classFile, boolean isSecondaryType) throws CoreException", "diff": ["-\t// Before writing out the class file, compare it to the previous file", "-\t// If structural changes occured then add dependent source files", "-\tIPath filePath = new Path(fileName);\t\t\t", "+\tIPath filePath = new Path(fileName);", "-\tbyte[] bytes = classFile.getBytes();", "-\tif (writeClassFileCheck(file, fileName, bytes, isSecondaryType)) {", "-\t\tif (JavaBuilder.DEBUG)", "-\t\t\tSystem.out.println(\"Writing class file \" + file.getName());//$NON-NLS-1$", "-\t\tfile.create(new ByteArrayInputStream(bytes), IResource.FORCE, null);", "-\t\tfile.setDerived(true);", "-\t} else if (JavaBuilder.DEBUG) {", "-\t\tSystem.out.println(\"Skipped over unchanged class file \" + file.getName());//$NON-NLS-1$", "-\t}", "+\twriteClassFileBytes(classFile.getBytes(), file, fileName, isSecondaryType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6569fb6c4040f279c0b76e2f21a474b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "667b6c6169416d9b79d86e73c3fa9c45930c36a8", "commitAfterChange": "8e69d36fa08db2d61d2c40fecd2494cfd19819f5", "methodNumberBeforeChange": 240, "methodNumberAfterChange": 239, "signatureBeforeChange": "  \tpublic void setOptions(Hashtable newOptions)", "signatureAfterChange": "  \tpublic void setOptions(Hashtable newOptions)", "diff": ["-\t\t", "-\t\tif (DEBUG_302850) {", "-\t\t\tSystem.out.println(\"Entering in JavaModelManager.setOptions():\"); //$NON-NLS-1$", "-\t\t\tSystem.out.println(new CompilerOptions(newOptions).toString());", "-\t\t\tSystem.out.println(\"\t- Call stack:\"); //$NON-NLS-1$", "-\t\t\tStackTraceElement[] elements = new Exception().getStackTrace();", "-\t\t\tfor (int i=0,n=elements.length; i<n; i++) {", "-\t\t\t\tSystem.out.println(\"\t\t+ \"+elements[i]); //$NON-NLS-1$", "+\t\tHashtable cachedValue = newOptions == null ? null : new Hashtable(newOptions);", "+\t\tIEclipsePreferences defaultPreferences = getDefaultPreferences();", "+\t\tIEclipsePreferences instancePreferences = getInstancePreferences();", "+", "+\t\tif (newOptions == null){", "+\t\t\ttry {", "+\t\t\t\tinstancePreferences.clear();", "+\t\t\t} catch(BackingStoreException e) {", "+\t\t\t\t// ignore", "+\t\t\t}", "+\t\t} else {", "+\t\t\tEnumeration keys = newOptions.keys();", "+\t\t\twhile (keys.hasMoreElements()){", "+\t\t\t\tString key = (String)keys.nextElement();", "+\t\t\t\tint optionLevel = getOptionLevel(key);", "+\t\t\t\tif (optionLevel == UNKNOWN_OPTION) continue; // unrecognized option", "+\t\t\t\tif (key.equals(JavaCore.CORE_ENCODING)) {", "+\t\t\t\t\tif (cachedValue != null) {", "+\t\t\t\t\t\tcachedValue.put(key, JavaCore.getEncoding());", "+\t\t\t\t\t}", "+\t\t\t\t\tcontinue; // skipped, contributed by resource prefs", "+\t\t\t\t}", "+\t\t\t\tString value = (String) newOptions.get(key);", "+\t\t\t\tString defaultValue = defaultPreferences.get(key, null);", "+\t\t\t\t// Store value in preferences", "+\t\t\t\tif (defaultValue != null && defaultValue.equals(value)) {", "+\t\t\t\t\tvalue = null;", "+\t\t\t\t}", "+\t\t\t\tstorePreference(key, value, instancePreferences, newOptions);", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\t// persist options", "+\t\t\t\tinstancePreferences.flush();", "+\t\t\t} catch(BackingStoreException e) {", "+\t\t\t\t// ignore", "-", "-\t\t\tHashtable cachedValue = newOptions == null ? null : new Hashtable(newOptions);", "-\t\t\tIEclipsePreferences defaultPreferences = getDefaultPreferences();", "-\t\t\tIEclipsePreferences instancePreferences = getInstancePreferences();", "-", "-\t\t\tif (newOptions == null){", "-\t\t\t\ttry {", "-\t\t\t\t\tinstancePreferences.clear();", "-\t\t\t\t} catch(BackingStoreException e) {", "-\t\t\t\t\t// ignore", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tEnumeration keys = newOptions.keys();", "-\t\t\t\twhile (keys.hasMoreElements()){", "-\t\t\t\t\tString key = (String)keys.nextElement();", "-\t\t\t\t\tint optionLevel = getOptionLevel(key);", "-\t\t\t\t\tif (optionLevel == UNKNOWN_OPTION) continue; // unrecognized option", "-\t\t\t\t\tif (key.equals(JavaCore.CORE_ENCODING)) {", "-\t\t\t\t\t\tif (cachedValue != null) {", "-\t\t\t\t\t\t\tcachedValue.put(key, JavaCore.getEncoding());", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcontinue; // skipped, contributed by resource prefs", "-\t\t\t\t\t}", "-\t\t\t\t\tString value = (String) newOptions.get(key);", "-\t\t\t\t\tString defaultValue = defaultPreferences.get(key, null);", "-\t\t\t\t\t// Store value in preferences", "-\t\t\t\t\tif (defaultValue != null && defaultValue.equals(value)) {", "-\t\t\t\t\t\tvalue = null;", "-\t\t\t\t\t}", "-\t\t\t\t\tstorePreference(key, value, instancePreferences, newOptions);", "-\t\t\t\t}", "-\t\t\t\ttry {", "-\t\t\t\t\t// persist options", "-\t\t\t\t\tinstancePreferences.flush();", "-\t\t\t\t} catch(BackingStoreException e) {", "-\t\t\t\t\t// ignore", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t// update cache", "-\t\t\tUtil.fixTaskTags(cachedValue);", "-\t\t\tthis.optionsCache = cachedValue;", "+\t\t// update cache", "+\t\tUtil.fixTaskTags(cachedValue);", "+\t\tthis.optionsCache = cachedValue;"]}], "num": 11496}
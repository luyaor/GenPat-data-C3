{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c6aaa514649ca6b93ed94c3a1f8850fb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f7703b1a17f8de211a3c49aa7891c8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java", "commitBeforeChange": "a8fe5c37924ef2fcf1865a85c200f728cfc703db", "commitAfterChange": "014bbfb3be0dcdead6b75cdb183bf5ed97ad2239", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tprivate void assertArraysEquals(String actualContents, String expectedContents)", "signatureAfterChange": " \t \tprivate void assertArraysEquals(String actualContents, String expectedContents)", "diff": ["-\t\tassertTrue(\"Different size\", actualContentsArray.length == expectedContentsArray.length); //$NON-NLS-1$", "+\t\tif (actualContentsArray.length !=expectedContentsArray.length) {", "+\t\t\tSystem.out.println(Util.displayString(actualContents, 2));", "+\t\t}", "+\t\tassertEquals(\"Different size\", expectedContentsArray.length, actualContentsArray.length); //$NON-NLS-1$", "+\t\t\tif (!expectedContentsArray[i].equals(actualContentsArray[i])){", "+\t\t\t\tSystem.out.println(Util.displayString(actualContentsArray[i], 2));", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f4a5449e9deed2364998df65d71877c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "376cf3e1a3637f0d6698064b8aa139e3173f12de", "commitAfterChange": "15d76232d8d0f6d3d473493e1ebc4002775a58d1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \r private SimpleLookupTable findDeltas()", "signatureAfterChange": "\r \r private SimpleLookupTable findDeltas()", "diff": ["-\tSimpleLookupTable deltas = new SimpleLookupTable(binaryResources.elementSize + 1);\r", "+\tSimpleLookupTable deltas = new SimpleLookupTable(3);\r", "-\t\tdeltas.put(currentProject, delta);\r", "+\t\tif (delta.getKind() != IResourceDelta.NO_CHANGE) {\r", "+\t\t\tif (DEBUG)\r", "+\t\t\t\tSystem.out.println(\"Found source delta for: \" + currentProject.getName()); //$NON-NLS-1$\r", "+\t\t\tdeltas.put(currentProject, delta);\r", "+\t\t}\r", "-\t\t\tif (!lastState.isStructurallyChanged(p, getLastState(p))) { // see if we can skip its delta\r", "-\t\t\t\tIResource[] binaryResources = (IResource[]) valueTable[i];\r", "-\t\t\t\tif (binaryResources.length <= 1)\r", "+\t\t\tState s = getLastState(p);\r", "+\t\t\tif (!lastState.isStructurallyChanged(p, s)) { // see if we can skip its delta\r", "+\t\t\t\tif (s.wasNoopBuild())\r", "+\t\t\t\t\tcontinue nextProject; // project has no source folders and can be skipped\r", "+\t\t\t\tIResource[] classFoldersAndJars = (IResource[]) valueTable[i];\r", "+\t\t\t\tif (classFoldersAndJars.length <= 1)\r", "-\t\t\t\tbinaryResources[0] = null; // skip the output folder\r", "+\t\t\t\tclassFoldersAndJars[0] = null; // skip the output folder\r", "-\t\t\t\tdeltas.put(p, delta);\r", "+\t\t\t\tif (delta.getKind() != IResourceDelta.NO_CHANGE) {\r", "+\t\t\t\t\tif (DEBUG)\r", "+\t\t\t\t\t\tSystem.out.println(\"Found binary delta for: \" + p.getName()); //$NON-NLS-1$\r", "+\t\t\t\t\tdeltas.put(p, delta);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "775525f216b3ada1f4c7b729e9101394", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "3fd9ba7770cab33e59f381d90c14d9b1a2469d1c", "commitAfterChange": "051572f99b6a73010e844cbf76e196d479c1689d", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 28, "signatureBeforeChange": " private synchronized static boolean existingExternalFilesContains(File externalFile)", "signatureAfterChange": " static private boolean isExternalFile(IPath path)", "diff": ["-}", "-private synchronized static boolean existingExternalFilesContains(File externalFile) {", "-\treturn existingExternalFiles.contains(externalFile);", "-}", "+static private boolean isExternalFile(IPath path) {", "+\tif (JavaModelManager.getJavaModelManager().isExternalFile(path)) {", "+\t\treturn true;", "+\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {", "+\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [JavaModel.isExternalFile(...)] Checking existence of \" + path.toString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t}", "+\tboolean isFile = path.toFile().isFile();", "+\tif (isFile) {", "+\t\tJavaModelManager.getJavaModelManager().addExternalFile(path);", "+\t}", "+\treturn isFile;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c92a00d66ada16a7b4e7767d4af3ab33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AbstractCompletionTest.java", "commitBeforeChange": "657570b48a17f915b1074904b34a72cfb4a35e14", "commitAfterChange": "61fe80f034add1c939a15204bbe2ce5b13ba0757", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void checkDietParse( \tchar[] source,  \tint cursorLocation,  \tString expectedCompletion,  \tString expectedParentCompletion, \tString expectedUnitToString,  \tString expectedCompletionIdentifier, \tString expectedReplacedSource, \tString testName)", "signatureAfterChange": " public void checkDietParse( \tchar[] source,  \tint cursorLocation,  \tString expectedCompletion,  \tString expectedParentCompletion, \tString expectedUnitToString,  \tString expectedCompletionIdentifier, \tString expectedReplacedSource, \tString testName)", "diff": ["+\tif (!expectedCompletion.equals(computedCompletion)) {", "+\t\tSystem.out.println(Util.displayString(computedCompletion));", "+\t}", "+\t\tif (!expectedParentCompletion.equals(computedParentCompletion)) {", "+\t\t\tSystem.out.println(Util.displayString(computedParentCompletion));", "+\t\t}", "+\tif (!expectedUnitToString.equals(computedUnitToString)) {", "+\t\tSystem.out.println(Util.displayString(computedUnitToString));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e84aa44ec1e08d0e527d6b9bfe33318c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "1f5ad882ea0492ed54bf7475f97067e7b092799d", "commitAfterChange": "e5f3208dcc3e07cb0646a33f6e325520c0a0443a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r public static Object getTarget(IContainer container, IPath path, boolean checkResourceExistence)", "signatureAfterChange": "\r public static Object getTarget(IContainer container, IPath path, boolean checkResourceExistence)", "diff": ["+\t\t\t\r", "+\t\t\t// check timestamp to figure if JAR has changed in some way\r", "+\t\t\tLong oldTimestamp =(Long) externalTimeStamps.get(path);\r", "+\t\t\tlong newTimeStamp = externalFile.lastModified() + externalFile.length();\r", "+\t\t\tif (oldTimestamp != null){\r", "+\t\t\t\tif (oldTimestamp.longValue() != newTimeStamp){\r", "+\t\t\t\t\t// jar has changed - need to refresh\r", "+\t\t\t\t\tJavaModelManager.getJavaModelManager().deltaProcessor.externalJarPathsToUpdate.add(path);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\texternalTimeStamps.put(path, new Long(newTimeStamp));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f37b8d319a2ec1154a8c022c8b0040bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "2fd2027f1bd96549ae174a672a3e75a3fbef9f00", "commitAfterChange": "bbdc67ca80e8d3933fe67f2dadba11598c084b7c", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "\r public static Object getTarget(IContainer container, IPath path, boolean checkResourceExistence)", "signatureAfterChange": "\r public static Object getTarget(IContainer container, IPath path, boolean checkResourceExistence)", "diff": ["-\t} else {\r", "+\t} else { \r", "-\t\t\t\r", "-\t\t\t// check timestamp to figure if JAR has changed in some way\r", "-\t\t\tLong oldTimestamp =(Long) externalTimeStamps.get(path);\r", "-\t\t\tlong newTimeStamp = externalFile.lastModified() + externalFile.length();\r", "-\t\t\tif (oldTimestamp != null){\r", "-\t\t\t\tif (oldTimestamp.longValue() != newTimeStamp){\r", "-\t\t\t\t\t// jar has changed - need to refresh\r", "-\t\t\t\t\tJavaModelManager.getJavaModelManager().deltaProcessor.externalJarPathsToUpdate.add(path);\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\texternalTimeStamps.put(path, new Long(newTimeStamp));\r", "-\r"]}], "num": 70257}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c52a6a0f4e258690d7f42de3f98b7ad", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61dedb5a40bcacc8c55f65506ddcc9a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java", "commitBeforeChange": "6436bbd31cbe5b698244c0208dd161fd144dd93e", "commitAfterChange": "4e5b524e8fed0a2f038362e79ac7bed8b62bd551", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic final CaptureBinding getCapturedWildcard(WildcardBinding wildcard, ReferenceBinding contextType, int position, ASTNode cud, int id)", "signatureAfterChange": " \tpublic final CaptureBinding getCapturedWildcard(WildcardBinding wildcard, ReferenceBinding contextType, int start, int end, ASTNode cud, int id)", "diff": ["-\t// No need for an override in ATS, since we are dealing with recaptures here.", "-\tpublic final CaptureBinding getCapturedWildcard(WildcardBinding wildcard, ReferenceBinding contextType, int position, ASTNode cud, int id) {", "+\t// No need for an override in ATS, since interning is position specific and either the wildcard there is annotated or not.", "+\tpublic final CaptureBinding getCapturedWildcard(WildcardBinding wildcard, ReferenceBinding contextType, int start, int end, ASTNode cud, int id) {", "-\t\tfor (i = 0; i < length; i++) {", "-\t\t\tTypeBinding derivedType = derivedTypes[i];", "-\t\t\tif (derivedType == null) ", "+\t\t", "+\t\t/* Search backwards looking at recent captures, if we encounter a capture from a different compilation unit, this is a fresh uninterned capture.", "+\t\t   While compiling one file, we may reach into another file to build structure, we should not compile method bodies there, so we expect to see ", "+\t\t   all captures from the same file together without being interleaved by captures from other files.", "+\t\t*/", "+\t\tint nullSlot = length;", "+\t\tfor (i = length - 1; i >= -1; --i) {", "+\t\t\tif (i == -1) {", "+\t\t\t\ti = nullSlot;", "+\t\t\t}", "+\t\t\tTypeBinding derivedType = derivedTypes[i];", "+\t\t\tif (derivedType == null) { ", "+\t\t\t\tnullSlot = i;", "+\t\t\t\tcontinue;", "+\t\t\t}", "-\t\t\tif (prior.sourceType != contextType || prior.position != position || prior.cud != cud) //$IDENTITY-COMPARISON$", "+\t\t\tif (prior.cud != cud) { // Searching further to the left is futile, exit the loop.", "+\t\t\t\ti = nullSlot;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (prior.sourceType != contextType || prior.start != start || prior.end != end) //$IDENTITY-COMPARISON$", "-\t\tTypeBinding capture = derivedTypes[i] = new CaptureBinding(wildcard, contextType, position, cud, id);", "+\t\tTypeBinding capture = derivedTypes[i] = new CaptureBinding(wildcard, contextType, start, end, cud, id);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8af96d7d8094f89ac033e8c0a448fb3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java", "commitBeforeChange": "18afecfb87dd02dac4ea06759372f08f747c5651", "commitAfterChange": "31e5ca7af716345beef7b42b73d26081ddf0ed7c", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " public String getAttachedJavadoc(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public String getAttachedJavadoc(IProgressMonitor monitor) throws JavaModelException", "diff": ["-\treturn contents.substring(indexOfStartOfClassData + JavadocConstants.START_OF_CLASS_DATA_LENGTH, indexOfNextSummary);", "+\t/*", "+\t * Check out to cut off the hierarchy see 119844", "+\t * We remove what the contents between the start of class data and the first <P>", "+\t */", "+\tfinal int searchStart = indexOfStartOfClassData + JavadocConstants.START_OF_CLASS_DATA_LENGTH;", "+\tint indexOfFirstParagraph = contents.indexOf(\"<P>\", searchStart); //$NON-NLS-1$", "+\tif (indexOfFirstParagraph == -1) {", "+\t\tindexOfFirstParagraph = contents.indexOf(\"<p>\", searchStart); //$NON-NLS-1$", "+\t\tif (indexOfFirstParagraph == -1) {", "+\t\t\tindexOfFirstParagraph = indexOfNextSummary;", "+\t\t} else {", "+\t\t\tindexOfFirstParagraph += 3 /* size of <P> */;", "+\t\t}", "+\t} else {", "+\t\tindexOfFirstParagraph += 3 /* size of <P> */;", "+\t}", "+\treturn contents.substring(indexOfFirstParagraph, indexOfNextSummary);"]}], "num": 59442}
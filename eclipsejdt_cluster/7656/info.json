{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b54ba7653e796a0a2d6f10d869e056c9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74429f3ab0e7db4e459a7454c3770985", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionJavadoc.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate char[][] missingTypeParameterTags(Binding paramNameRefBinding, Scope scope)", "signatureAfterChange": " \tprivate char[][] missingTypeParameterTags(Binding paramNameRefBinding, Scope scope)", "diff": ["-\t\tTypeDeclaration typeDeclaration = null;", "-\t\tAbstractMethodDeclaration methodDeclaration = null;", "+\t\tTypeParameter[] parameters =  null;", "-\t\t\t\tmethodDeclaration = ((MethodScope)scope).referenceMethod();", "+\t\t\t\tAbstractMethodDeclaration methodDeclaration = ((MethodScope)scope).referenceMethod();", "+\t\t\t\tparameters = methodDeclaration.typeParameters();", "-\t\t\t\ttypeDeclaration = ((ClassScope) scope).referenceContext;", "+\t\t\t\tTypeDeclaration typeDeclaration = ((ClassScope) scope).referenceContext;", "+\t\t\t\tparameters = typeDeclaration.typeParameters;", "-\t\tTypeParameter[] parameters = typeDeclaration==null ? methodDeclaration.typeParameters() : typeDeclaration.typeParameters;", "-\t\tint typeParametersLength = parameters == null ? 0 : parameters.length;", "-\t\tif (paramTypeParamLength == 0) {", "-\t\t\tchar[][] missingParams = new char[typeParametersLength][];", "-\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "-\t\t\t\tmissingParams[i] = parameters[i].name;", "+\t\tif (parameters != null) {", "+\t\t\tint typeParametersLength = parameters.length;", "+\t\t\tif (paramTypeParamLength == 0) {", "+\t\t\t\tchar[][] missingParams = new char[typeParametersLength][];", "+\t\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "+\t\t\t\t\tmissingParams[i] = parameters[i].name;", "+\t\t\t\t}", "+\t\t\t\treturn missingParams;", "-\t\t\treturn missingParams;", "-\t\t}", "-\t\t// Look for missing type parameter", "-\t\tchar[][] missingParams = new char[typeParametersLength][];", "-\t\tint size = 0;", "-\t\tfor (int i = 0; i < typeParametersLength; i++) {", "-\t\t\tTypeParameter parameter = parameters[i];", "-\t\t\tboolean found = false;", "-\t\t\tint paramNameRefCount = 0;", "-\t\t\tfor (int j = 0; j < paramTypeParamLength && !found; j++) {", "-\t\t\t\tif (parameter.binding == this.paramTypeParameters[j].resolvedType) {", "-\t\t\t\t\tif (parameter.binding == paramNameRefBinding) { // do not count first occurence of param nmae reference", "-\t\t\t\t\t\tparamNameRefCount++;", "-\t\t\t\t\t\tfound = paramNameRefCount > 1;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tfound = true;", "+\t\t\t// Look for missing type parameter", "+\t\t\tchar[][] missingParams = new char[typeParametersLength][];", "+\t\t\tint size = 0;", "+\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "+\t\t\t\tTypeParameter parameter = parameters[i];", "+\t\t\t\tboolean found = false;", "+\t\t\t\tint paramNameRefCount = 0;", "+\t\t\t\tfor (int j = 0; j < paramTypeParamLength && !found; j++) {", "+\t\t\t\t\tif (parameter.binding == this.paramTypeParameters[j].resolvedType) {", "+\t\t\t\t\t\tif (parameter.binding == paramNameRefBinding) { // do not count first occurence of param nmae reference", "+\t\t\t\t\t\t\tparamNameRefCount++;", "+\t\t\t\t\t\t\tfound = paramNameRefCount > 1;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tfound = true;", "+\t\t\t\t\t\t}", "+\t\t\t\tif (!found) {", "+\t\t\t\t\tmissingParams[size++] = parameter.name;", "+\t\t\t\t}", "-\t\t\tif (!found) {", "-\t\t\t\tmissingParams[size++] = parameter.name;", "+\t\t\tif (size > 0) {", "+\t\t\t\tif (size != typeParametersLength) {", "+\t\t\t\t\tSystem.arraycopy(missingParams, 0, missingParams = new char[size][], 0, size);", "+\t\t\t\t}", "+\t\t\t\treturn missingParams;", "-\t\t}", "-\t\tif (size > 0) {", "-\t\t\tif (size != typeParametersLength) {", "-\t\t\t\tSystem.arraycopy(missingParams, 0, missingParams = new char[size][], 0, size);", "-\t\t\t}", "-\t\t\treturn missingParams;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f73df79c0f656d9135c18efaa86182c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchPattern.java", "commitBeforeChange": "1203ec285e9510454e7eee6b9217d8d694a24e95", "commitAfterChange": "fe9d56739c7ee5a42ad73e908441932d571ee55b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tvoid storeTypeSignaturesAndArguments(IType type)", "signatureAfterChange": " \tvoid storeTypeSignaturesAndArguments(IType type)", "diff": ["-\t\tBindingKey key;", "-\t\tif (type.isResolved() && ((key = new BindingKey(type.getKey())).isParameterizedType() || key.isRawType())) {", "-\t\t\tString signature = key.toSignature();", "-\t\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(signature);", "-\t\t\tsetTypeArguments(Util.getAllTypeArguments(this.typeSignatures));", "-\t\t} else {", "-\t\t\t// Scan hierachy to store type arguments at each level", "-\t\t\tchar[][][] typeParameters = new char[10][][];", "-\t\t\tint ptr = -1;", "-\t\t\tboolean hasParameters = false;", "-\t\t\ttry {", "-\t\t\t\tIJavaElement parent = type;", "-\t\t\t\tITypeParameter[] parameters = null;", "-\t\t\t\twhile (parent != null && parent.getElementType() == IJavaElement.TYPE) {", "-\t\t\t\t\tif (++ptr > typeParameters.length) {", "-\t\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[typeParameters.length+10][][], 0, ptr);", "-\t\t\t\t\t}", "-\t\t\t\t\tIType parentType = (IType) parent;", "-\t\t\t\t\tparameters = parentType.getTypeParameters();", "-\t\t\t\t\tif (parameters !=null) {", "-\t\t\t\t\t\tint length = parameters.length;", "-\t\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\t\thasParameters = true;", "-\t\t\t\t\t\t\ttypeParameters[ptr] = new char[length][];", "-\t\t\t\t\t\t\tfor (int i=0; i<length; i++)", "-\t\t\t\t\t\t\t\ttypeParameters[ptr][i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tparent = parent.getParent();", "+\t\tif (type.isResolved()) {", "+\t\t\tBindingKey bindingKey = new BindingKey(type.getKey());", "+\t\t\tif (bindingKey.isParameterizedType() || bindingKey.isRawType()) {", "+\t\t\t\tString signature = bindingKey.toSignature();", "+\t\t\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(signature);", "+\t\t\t\tsetTypeArguments(Util.getAllTypeArguments(this.typeSignatures));", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+", "+\t\t// Scan hierarchy to store type arguments at each level", "+\t\tchar[][][] typeParameters = new char[10][][];", "+\t\tint ptr = -1;", "+\t\tboolean hasParameters = false;", "+\t\ttry {", "+\t\t\tIJavaElement parent = type;", "+\t\t\tITypeParameter[] parameters = null;", "+\t\t\twhile (parent != null && parent.getElementType() == IJavaElement.TYPE) {", "+\t\t\t\tif (++ptr > typeParameters.length) {", "+\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[typeParameters.length+10][][], 0, ptr);", "+\t\t\t\tIType parentType = (IType) parent;", "+\t\t\t\tparameters = parentType.getTypeParameters();", "+\t\t\t\tif (parameters !=null) {", "+\t\t\t\t\tint length = parameters.length;", "+\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\thasParameters = true;", "+\t\t\t\t\t\ttypeParameters[ptr] = new char[length][];", "+\t\t\t\t\t\tfor (int i=0; i<length; i++)", "+\t\t\t\t\t\t\ttypeParameters[ptr][i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tparent = parent.getParent();", "-\t\t\tcatch (JavaModelException jme) {", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\t// Store type arguments if any", "-\t\t\tif (hasParameters) {", "-\t\t\t\tif (++ptr < typeParameters.length)", "-\t\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[ptr][][], 0, ptr);", "-\t\t\t\tsetTypeArguments(typeParameters);", "-\t\t\t}", "+\t\t}", "+\t\tcatch (JavaModelException jme) {", "+\t\t\treturn;", "+\t\t}", "+", "+\t\t// Store type arguments if any", "+\t\tif (hasParameters) {", "+\t\t\tif (++ptr < typeParameters.length)", "+\t\t\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new char[ptr][][], 0, ptr);", "+\t\t\tsetTypeArguments(typeParameters);"]}], "num": 7656}
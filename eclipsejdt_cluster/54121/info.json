{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e37b73ce9ef48028f5ecae09206fcb6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85dbf3630f9ce917a653a8d662a56e3a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "aa0984d79780a8b5715722d33a45cdb0c134a6fb", "commitAfterChange": "2c4584c2d5b726b4cdc708e96ad6b04e53986107", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \t \tpublic void resolve(BlockScope scope)", "diff": ["-\t\tif ((expressionType = expression.resolveType(scope)) == null)", "+\t\tif ((expressionType = expression.resolveType(scope)) == null) return;", "+\t\tif (expressionType == VoidBinding) {", "+\t\t\tscope.problemReporter().attemptToReturnVoidValue(this);", "+\t\t\treturn;", "+\t\t}", "+\t\tif (methodType == null) ", "-\t\tif (methodType != null && expression.isConstantValueOfTypeAssignableToType(expressionType, methodType)) {", "+\t\tif (expression.isConstantValueOfTypeAssignableToType(expressionType, methodType)) {", "-\t\tif (expressionType == VoidBinding) {", "-\t\t\tscope.problemReporter().attemptToReturnVoidValue(this);", "-\t\t\treturn;", "-\t\t}", "-\t\tif (methodType != null && expressionType.isCompatibleWith(methodType)) {", "+\t\tif (expressionType.isCompatibleWith(methodType)) {", "-\t\tif (methodType != null){", "-\t\t\tscope.problemReporter().typeMismatchError(expressionType, methodType, expression);", "-\t\t}", "+\t\tscope.problemReporter().typeMismatchError(expressionType, methodType, expression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7c7080b33b1b5df54687780b5b85a90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "27b04348f6378e421a1a2788716e3b7fc8643774", "commitAfterChange": "f91a77f7dbbae615b9ce90f64f6be8f6d8a36ad5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public void resolve(BlockScope scope)", "signatureAfterChange": "\r public void resolve(BlockScope scope)", "diff": ["+\tMethodBinding methodBinding;\r", "-\t\t\t? ((AbstractMethodDeclaration) methodScope.referenceContext).binding.returnType\r", "+\t\t\t? ((methodBinding = ((AbstractMethodDeclaration) methodScope.referenceContext).binding) == null \r", "+\t\t\t\t? null \r", "+\t\t\t\t: methodBinding.returnType)\r", "-\tif (expression.isConstantValueOfTypeAssignableToType(expressionType, methodType)) {\r", "+\tif (methodType != null && expression.isConstantValueOfTypeAssignableToType(expressionType, methodType)) {\r", "-\tif (scope.areTypesCompatible(expressionType, methodType)) {\r", "+\tif (methodType != null && scope.areTypesCompatible(expressionType, methodType)) {\r", "-\tscope.problemReporter().typeMismatchErrorActualTypeExpectedType(expression, expressionType, methodType);\r", "+\tif (methodType != null){\r", "+\t\tscope.problemReporter().typeMismatchErrorActualTypeExpectedType(expression, expressionType, methodType);\r", "+\t}\r"]}], "num": 54121}
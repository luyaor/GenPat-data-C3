{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c8ae0eb6990db0a93c00ed19821c3938", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e35b0f1fafc371cd4873870014c9891", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  public void markAsDefinitelyNull(LocalVariableBinding local)", "signatureAfterChange": "  public void markAsDefinitelyNonNull(LocalVariableBinding local)", "diff": ["+    \tthis.tagBits |= NULL_FLAG_MASK;", "+    \tlong mask;", "+    \tint position;", "+    \t// position is zero-based", "+    \tif ((position = local.id + this.maxFieldCount) < BitCacheSize) { // use bits", "+    \t\t// set assigned non null", "+    \t\tthis.nullBit1 |= (mask = 1L << position);", "+    \t\tthis.nullBit3 |= mask;", "+    \t\t// clear others", "+    \t\tthis.nullBit2 &= (mask = ~mask);", "+    \t\tthis.nullBit4 &= mask;", "+    \t\tif (coverageTestFlag && coverageTestId == 22) {", "+    \t\t  \tthis.nullBit1 = 0;", "+    \t\t}", "+    \t} ", "+    \telse {", "+    \t\t// use extra vector", "+    \t\tint vectorIndex ;", "+    \t\tthis.extra[2][vectorIndex = (position / BitCacheSize) - 1] ", "+    \t\t    |= (mask = 1L << (position % BitCacheSize));", "+    \t\tthis.extra[4][vectorIndex] |= mask;", "+    \t\tthis.extra[3][vectorIndex] &= (mask = ~mask);", "+    \t\tthis.extra[5][vectorIndex] &= mask;", "+    \t\tif (coverageTestFlag && coverageTestId == 23) {", "+    \t\t\tthis.extra[2][vectorIndex] = 0;", "+    \t\t}", "+    \t}", "-\t\tthis.tagBits |= NULL_FLAG_MASK;", "-\t\tint position;", "-\t\tlong mask;", "-\t\t// position is zero-based", "-\t\tif ((position = local.id + this.maxFieldCount) < BitCacheSize) {\t\t// use bits", "-\t\t\tthis.nullAssignmentStatusBit1 |= (mask = 1L << position); // set assignment", "-\t\t\tthis.nullAssignmentStatusBit2 &= ~mask; // clear protection", "-\t\t\tthis.nullAssignmentValueBit1 |= mask; // set null", "-\t\t\tthis.nullAssignmentValueBit2 &= ~mask; // clear non null", "-\t\t\tif (coverageTestFlag && coverageTestId == 31) {", "-\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "-\t\t\t}", "-\t\t} ", "-\t\telse {", "-\t\t\t// use extra vector", "-\t\t\tint vectorIndex = (position / BitCacheSize) - 1;", "-\t\t\tthis.extra[2][vectorIndex] |= ", "-\t\t\t\t(mask = 1L << (position % BitCacheSize));", "-\t\t\tthis.extra[3][vectorIndex] &= ~mask;", "-\t\t\tthis.extra[4][vectorIndex] |= mask;", "-\t\t\tthis.extra[5][vectorIndex] &= ~mask;", "-\t\t\tif (coverageTestFlag && coverageTestId == 32) {", "-\t\t\t\tthis.extra[5][vectorIndex] = ~0;", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccf8c212f0268b10069afda6cdec2e4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic UnconditionalFlowInfo discardNonFieldInitializations()", "signatureAfterChange": " public UnconditionalFlowInfo discardNonFieldInitializations()", "diff": ["+ */", "+public UnconditionalFlowInfo discardNonFieldInitializations() {", "+\tint limit = this.maxFieldCount;", "+\tif (limit < BitCacheSize) {", "+\t\tlong mask = (1L << limit)-1;", "+\t\tthis.definiteInits &= mask;", "+\t\tthis.potentialInits &= mask;", "+\t\tthis.nullAssignmentStatusBit1 &= mask;", "+\t\tthis.nullAssignmentStatusBit2 &= mask;", "+\t\tthis.nullAssignmentValueBit1 &= mask;", "+\t\tthis.nullAssignmentValueBit2 &= mask;", "+\t} ", "+\t// use extra vector", "+\tif (this.extra == null) {", "+\t\treturn this; // if vector not yet allocated, then not initialized", "+\t}", "+\tint vectorIndex, length = this.extra[0].length;", "+\tif ((vectorIndex = (limit / BitCacheSize) - 1) >= length) {", "+\t\treturn this; // not enough room yet", "+\t}", "+\tif (vectorIndex >= 0) { ", "+\t\t// else we only have complete non field array items left", "+\t\tfor (int j = 0; j < extraLength; j++) {", "+\t\t\tthis.extra[j][vectorIndex] &= mask;", "+\t\t}", "+\tfor (int i = vectorIndex + 1; i < length; i++) {", "+\t\tfor (int j = 0; j < extraLength; j++) {", "+\t\t\tthis.extra[j][i] = 0;", "+\t\t}", "+\t}", "+\treturn this;", "+}", "-\tpublic UnconditionalFlowInfo discardNonFieldInitializations(){", "-\t\t", "-\t\tint limit = this.maxFieldCount;", "-\t\t", "-\t\tif (limit < BitCacheSize) {", "-\t\t\tlong mask = (1L << limit)-1;", "-\t\t\tthis.definiteInits &= mask;", "-\t\t\tthis.potentialInits &= mask;", "-\t\t\tthis.definiteNulls &= mask;", "-\t\t\tthis.definiteNonNulls &= mask;", "-\t\t\treturn this;", "-\t\t// use extra vector", "-\t\tif (extraDefiniteInits == null) {", "-\t\t\treturn this; // if vector not yet allocated, then not initialized", "-\t\tint vectorIndex, length = this.extraDefiniteInits.length;", "-\t\tif ((vectorIndex = (limit / BitCacheSize) - 1) >= length) {", "-\t\t\treturn this; // not enough room yet", "-\t\t}", "-\t\tlong mask = (1L << (limit % BitCacheSize))-1;", "-\t\tthis.extraDefiniteInits[vectorIndex] &= mask;", "-\t\tthis.extraPotentialInits[vectorIndex] &= mask;", "-\t\tthis.extraDefiniteNulls[vectorIndex] &= mask;", "-\t\tthis.extraDefiniteNonNulls[vectorIndex] &= mask;", "-\t\tfor (int i = vectorIndex+1; i < length; i++) {", "-\t\t\tthis.extraDefiniteInits[i] = 0L;", "-\t\t\tthis.extraPotentialInits[i] = 0L;", "-\t\t\tthis.extraDefiniteNulls[i] = 0L;", "-\t\t\tthis.extraDefiniteNonNulls[i] = 0L;", "-\t\t}", "-\t\treturn this;"]}], "num": 53449}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a9d87e379aefe5cba2661de1851a1e19", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f3dced92d3fa84291f029c55380bb11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  protected void removeSecondaryTypes() throws CoreException", "signatureAfterChange": "  protected void removeSecondaryTypes() throws CoreException", "diff": ["-\t\tfor (int i = 0, length = secondaryTypesToRemove.size(); i < length; i++)", "-\t\t\tremoveClassFile((IPath) secondaryTypesToRemove.get(i));", "+\t\tObject[] keyTable = secondaryTypesToRemove.keyTable;", "+\t\tObject[] valueTable = secondaryTypesToRemove.valueTable;", "+\t\tfor (int i = 0, l = keyTable.length; i < l; i++) {", "+\t\t\tIContainer outputFolder = (IContainer) keyTable[i];", "+\t\t\tif (outputFolder != null) {", "+\t\t\t\tArrayList paths = (ArrayList) valueTable[i];", "+\t\t\t\tfor (int j = 0, m = paths.size(); j < m; j++)", "+\t\t\t\t\tremoveClassFile((IPath) paths.get(j), outputFolder);", "+\t\t\t}", "+\t\t}", "-\t\tif (previousLocations != null && previousLocations.size() > 1)", "-\t\t\tthis.previousLocations = null; // cannot optimize recompile case when a secondary type is deleted", "+\t\tif (previousSourceFiles != null && previousSourceFiles.size() > 1)", "+\t\t\tthis.previousSourceFiles = null; // cannot optimize recompile case when a secondary type is deleted"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "720410b703f4afdd42890147dcf64465", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 41, "signatureBeforeChange": " public void shutdown()", "signatureAfterChange": " public void shutdown()", "diff": ["+}", "-\tIndexSelector indexSelector = new IndexSelector(new JavaWorkspaceScope(), null, this);", "-\tIIndex[] selectedIndexes = indexSelector.getIndexes();", "-\tfor (int i = 0, max = selectedIndexes.length; i < max; i++) {", "-\t\tString path = selectedIndexes[i].getIndexFile().getAbsolutePath();", "-\t\tknownPaths.put(path, path);", "+\tSearchParticipant[] participants = SearchEngine.getSearchParticipants();", "+\tIJavaSearchScope scope = new JavaWorkspaceScope();", "+\tfor (int i = 0, length = participants.length; i < length; i++) {", "+\t\tSearchParticipant participant = participants[i];", "+\t\tSearchPattern pattern = new TypeDeclarationPattern(null, null, null, ' ', SearchPattern.R_PATTERN_MATCH);", "+\t\tPatternSearchJob job = new PatternSearchJob(pattern, participant, scope, null);", "+\t\tIIndex[] selectedIndexes = job.getIndexes(null);", "+\t\tfor (int j = 0, max = selectedIndexes.length; j < max; j++) {", "+\t\t\tString path = selectedIndexes[j].getIndexFile().getAbsolutePath();", "+\t\t\tknownPaths.put(path, path);", "+\t\t}"]}], "num": 27954}
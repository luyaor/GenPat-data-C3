{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6dcf0f4417c7f89818b4d86b03005bba", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fec8e2840b86fd768d481138ce6b54c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "b1348e3d0230a581c7eb25acd6ec072853b12bb0", "commitAfterChange": "f3728b24e0fe129a3644e987b967023e3f656958", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "\r \tpublic ISourceRange mapSource(\r \t\tIType type,\r \t\tchar[] contents,\r \t\tIJavaElement searchedElement)", "signatureAfterChange": "\r \tpublic ISourceRange mapSource(\r \t\tIType type,\r \t\tchar[] contents,\r \t\tIJavaElement searchedElement)", "diff": ["-\r", "+\t\tthis.fMemberDeclarationStart = new int[1];\r", "+\t\tthis.fMemberName = new String[1];\r", "+\t\tthis.fMemberNameRange = new SourceRange[1];\r", "+\t\tthis.fMethodParameterTypes = new char[1][][];\r", "+\t\tthis.anonymousCounter = 0;\r", "+\t\t\r", "-\t\t\tSourceElementParser parser = new SourceElementParser(this, factory);\r", "+\t\t\tSourceElementParser parser = null;\r", "+\t\t\tboolean isAnonymousClass = false;\r", "+\t\t\ttry {\r", "+\t\t\t\tisAnonymousClass = ((IBinaryType) fType.getRawInfo()).isAnonymous();\r", "+\t\t\t} catch(JavaModelException e) {\r", "+\t\t\t}\r", "+\t\t\tif (isAnonymousClass) {\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tthis.anonymousClassName = Integer.parseInt(fType.getElementName());\r", "+\t\t\t\t} catch(NumberFormatException e) {\r", "+\t\t\t\t}\r", "+\t\t\t\tparser = new SourceElementParser(this, factory, true);\r", "+\t\t\t} else {\r", "+\t\t\t\tparser = new SourceElementParser(this, factory);\r", "+\t\t\t}\r", "-\t\t\t\tfalse);\r", "+\t\t\t\tisAnonymousClass);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1670b22dcaef02609819abbed4b9e201", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest.java", "commitBeforeChange": "4d6296b6ebb5111ab8825f79519da9de471cce30", "commitAfterChange": "c7f6d299ed8c40f551e9a2897713e6aad0e44d7d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic static Test suite()", "signatureAfterChange": "  \tpublic static Test suite()", "diff": ["-\t\tTestSuite suite = new TestSuite(JavadocTest.class.getName());", "-\t\tfor (int i=0; i<allTestClasses.size(); i++) {", "-\t\t\tsuite.addTest(buildTestSuite((Class) allTestClasses.get(i)));", "+\t\tTestSuite ts = new TestSuite(JavadocTest.class.getName());", "+\t", "+\t\t// Reset forgotten subsets of tests", "+\t\tTestCase.TESTS_PREFIX = null;", "+\t\tTestCase.TESTS_NAMES = null;", "+\t\tTestCase.TESTS_NUMBERS = null;", "+\t\tTestCase.TESTS_RANGE = null;", "+\t", "+\t\tfor (int i = 0, l=allTestClasses.size(); i < l; i++) {", "+\t\t\tClass testClass = (Class) allTestClasses.get(i);", "+\t", "+\t\t\t// call the suite() method and add the resulting suite to the suite", "+\t\t\ttry {", "+\t\t\t\tMethod suiteMethod = testClass.getDeclaredMethod(\"suite\", new Class[0]); //$NON-NLS-1$", "+\t\t\t\tTest suite = (Test)suiteMethod.invoke(null, new Object[0]);", "+\t\t\t\tts.addTest(suite);", "+\t\t\t} catch (IllegalAccessException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t} catch (InvocationTargetException e) {", "+\t\t\t\te.getTargetException().printStackTrace();", "+\t\t\t} catch (NoSuchMethodException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t}", "-//\t\tsuite.addTest(buildTestSuite());", "-\t\treturn suite;", "+\t\treturn ts;"]}], "num": 29581}
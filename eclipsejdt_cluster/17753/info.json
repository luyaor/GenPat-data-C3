{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "326e91275fd5368742b7ac5c46ba0815", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2213a691f3141b9865f6f0a87bf5d028", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "e980bec51b1b659da189c52a214379978c34468e", "commitAfterChange": "9f038d058d2bda926136df66ffdae620fcaf8616", "methodNumberBeforeChange": 142, "methodNumberAfterChange": 143, "signatureBeforeChange": "  \t\tvoid save() throws IOException, JavaModelException", "signatureAfterChange": "  \t\tvoid save() throws IOException, JavaModelException", "diff": ["-\t\t\tsaveVariables(JavaModelManager.this.variables);", "+\t\t\t", "+\t\t\t// don't save classpath variables from the default preferences as there is no delta if they are removed", "+\t\t\tHashMap varsToSave = null;", "+\t\t\tIterator iterator = JavaModelManager.this.variables.keySet().iterator();", "+\t\t\tIEclipsePreferences defaultPreferences = getDefaultPreferences();", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\tString varName = (String) iterator.next();", "+\t\t\t\tif (defaultPreferences.get(CP_VARIABLE_PREFERENCES_PREFIX + varName, null) != null) {", "+\t\t\t\t\tif (varsToSave == null)", "+\t\t\t\t\t\tvarsToSave = new HashMap(JavaModelManager.this.variables);", "+\t\t\t\t\tvarsToSave.remove(varName);", "+\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t}", "+\t\t\t", "+\t\t\tsaveVariables(varsToSave != null ? varsToSave : JavaModelManager.this.variables);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d131281fedb7ecb72eadc54532620377", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "055380e1ecf4ba956a2ed12d0bd6afd30fa4bb0d", "commitAfterChange": "5633218f57a8f96a181a737ead7a991d28ce84d5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+", "-\t\ttryInfo.addPotentialInitializationsFrom(insideSubContext.initsOnReturn);", "-\t\tfinallyContext.complainOnRedundantFinalAssignments(tryInfo, currentScope);", "+", "+\t\t// propagate inits to enclosing subroutines", "+\t\tUnconditionalFlowInfo initsBeforeReturn = insideSubContext.initsOnReturn.copy().unconditionalInits();", "+\t\tinitsBeforeReturn.addInitializationsFrom(subInfo);", "+\t\tFlowContext traversedContext = insideSubContext.parent;", "+\t\twhile (traversedContext != null) {", "+\t\t\tAstNode sub = traversedContext.subRoutine();", "+\t\t\tif (sub != null && sub.cannotReturn()) break;//TODO: should move below?", "+\t\t\ttraversedContext.initsOnReturn().addInitializationsFrom(initsBeforeReturn);", "+\t\t\ttraversedContext = traversedContext.parent;", "+\t\t}", "+", "+\t\tfinallyContext.complainOnRedundantFinalAssignments(", "+\t\t\ttryInfo.isReachable() ", "+\t\t\t\t? (tryInfo.addPotentialInitializationsFrom(insideSubContext.initsOnReturn))", "+\t\t\t\t: insideSubContext.initsOnReturn, ", "+\t\t\tcurrentScope);"]}], "num": 17753}
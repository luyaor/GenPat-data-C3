{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b48fec0f66882963f8ed8242c2aa12a1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b27b61fd8bc5723f23f863d06f71e1a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "4d1b2a602aa63e2d641e31567150dab25a5e04f3", "commitAfterChange": "7935d7046a5948ba0caaa49b731ab944081ed079", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " public boolean isCompatibleWith(TypeBinding otherType, Scope captureScope)", "signatureAfterChange": " public boolean isCompatibleWith(TypeBinding otherType, Scope captureScope)", "diff": ["-\totherType = otherType.unannotated(); // for now consider un-annotated type as compatible to type with any type annotations", "-\tif ((this.tagBits & TagBits.HasNullTypeAnnotation) != 0)", "-\t\treturn unannotated().isCompatibleWith(otherType, captureScope);", "+\t// disregard any type annotations on this and otherType", "+\t// recursive call needed when this is annotated, unless the annotation was introduced on a declaration", "+\totherType = otherType.unannotated();", "+\tTypeBinding unannotated = unannotated();", "+\tif (unannotated != this)", "+\t\treturn unannotated.isCompatibleWith(otherType, captureScope);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fff70d1f81d61347f5d9997cd7361075", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java", "commitBeforeChange": "4d1b2a602aa63e2d641e31567150dab25a5e04f3", "commitAfterChange": "7935d7046a5948ba0caaa49b731ab944081ed079", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public boolean isCompatibleWith(TypeBinding otherType, Scope captureScope)", "signatureAfterChange": " public boolean isCompatibleWith(TypeBinding otherType, Scope captureScope)", "diff": ["-\totherType = otherType.unannotated(); // for now consider un-annotated type as compatible to type with any type annotations", "-\tif ((this.tagBits & TagBits.HasNullTypeAnnotation) != 0)", "-\t\treturn unannotated().isCompatibleWith(otherType, captureScope);", "+\t// disregard any type annotations on this and otherType", "+\t// recursive call needed when this is annotated, unless the annotation was introduced on a declaration", "+\totherType = otherType.unannotated();", "+\tTypeBinding unannotated = unannotated();", "+\tif (unannotated != this)", "+\t\treturn unannotated.isCompatibleWith(otherType, captureScope);"]}], "num": 47630}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ffb23eb7272d70e76136c936c37eb83e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88ea137fa9e97f3ec77051b1a9794852", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (isPolyExpression()) {", "-\t\t\t\tif (this.expectedType == null) {", "-\t\t\t\t\tthis.polyExpressionScope = scope; // preserve for eventual resolution/error reporting.", "-\t\t\t\t}", "-\t\t\t}", "-", "-\t\t\t/* Not reached as of now as we don't evaluate conditional expressions multiple times, left in for now.", "-\t\t\t   If in future, we change things so control reaches here, a precondition is that this.expectedType is", "-\t\t\t   the final target type.", "-\t\t\t*/", "+", "+\t\t\t", "+\t\t\tif (this.originalValueIfTrueType == null || !this.originalValueIfTrueType.isValidBinding())", "+\t\t\t\treturn this.resolvedType = null;", "+\t\t\tif (this.originalValueIfFalseType == null || !this.originalValueIfFalseType.isValidBinding())", "+\t\t\t\treturn this.resolvedType = null;", "-\t\t\t\tthis.polyExpressionScope = scope; // preserve for eventual resolution/error reporting.", "-\t\t\tcomputeConversions(scope, this.expectedType);", "-\t\t\treturn this.resolvedType = this.expectedType;", "+\t\t\treturn this.resolvedType = computeConversions(scope, this.expectedType) ? this.expectedType : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ace2285d55c8545d35b8957ab891fe48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Wildcard.java", "commitBeforeChange": "c45031a708344453f01f911278a63ebae41b9cba", "commitAfterChange": "c49a7bd34f8c2781dba76984d24d83335183205f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding genericType, int rank)", "signatureAfterChange": "  \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding genericType, int rank)", "diff": ["-\t\tresolveAnnotations(scope);", "-\t\tWildcardBinding wildcard = scope.environment().createWildcard(genericType, rank, boundType, null /*no extra bound*/, this.kind);", "-\t\treturn this.resolvedType = wildcard;", "+\t\tthis.resolvedType = scope.environment().createWildcard(genericType, rank, boundType, null /*no extra bound*/, this.kind);", "+\t\tresolveAnnotations(scope);", "+\t\tif (boundType != null && boundType.hasNullTypeAnnotations() && this.resolvedType.hasNullTypeAnnotations()) {", "+\t\t\tif (((boundType.tagBits | this.resolvedType.tagBits) & TagBits.AnnotationNullMASK) == TagBits.AnnotationNullMASK) { // are both set?", "+\t\t\t\tAnnotation annotation = this.bound.findAnnotation(boundType.tagBits & TagBits.AnnotationNullMASK);", "+\t\t\t\tscope.problemReporter().contradictoryNullAnnotationsOnBounds(annotation, this.resolvedType.tagBits);", "+\t\t\t\tthis.resolvedType = this.resolvedType.unannotated();", "+\t\t\t\tthis.bound.resolvedType = ((WildcardBinding)this.resolvedType).bound = boundType.unannotated();", "+\t\t\t}", "+\t\t}", "+\t\treturn this.resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebfc6797d5af9e6c0e18b02b0d69e241", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "5464f8b56e2b620bf0f37dc5a7c218f835be9cef", "commitAfterChange": "57e05ac5c8db0c06028159bb169607bae2e0ec84", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tthis.expressionType = type.resolveType(scope); // will check for null after args are resolved", "+\tthis.resolvedType = type.resolveType(scope); // will check for null after args are resolved", "-\t\t\treturn this.expressionType;", "+\t\t\treturn this.resolvedType;", "-\tif (this.expressionType == null)", "+\tif (this.resolvedType == null)", "-\tif (!this.expressionType.canBeInstantiated()) {", "-\t\tscope.problemReporter().cannotInstantiate(type, this.expressionType);", "-\t\treturn this.expressionType;", "+\tif (!this.resolvedType.canBeInstantiated()) {", "+\t\tscope.problemReporter().cannotInstantiate(type, this.resolvedType);", "+\t\treturn this.resolvedType;", "-\tReferenceBinding allocatedType = (ReferenceBinding) this.expressionType;", "+\tReferenceBinding allocatedType = (ReferenceBinding) this.resolvedType;", "-\t\t\t\t\treturn this.expressionType;", "+\t\t\t\t\treturn this.resolvedType;", "-\t\t\t\treturn this.expressionType;", "+\t\t\t\treturn this.resolvedType;", "-\t\t\t\treturn this.expressionType;", "+\t\t\t\treturn this.resolvedType;", "-\t\t\treturn this.expressionType;", "+\t\t\treturn this.resolvedType;"]}], "num": 10539}
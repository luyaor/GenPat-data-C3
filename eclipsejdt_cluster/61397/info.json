{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3188dc8c17468d81194bcff6bbe8ee12", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29e4fb5c0a8e172506e467e92c3432b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "8bb6b9481b79f29da1fc965f1ebeeb888e97d205", "commitAfterChange": "4e81456d91d85b9a795956ecc38cb1d7061bd32d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprivate void findLocalMethods(\r \t\tchar[] methodName,\r \t\tTypeBinding[] argTypes,\r \t\tMethodBinding[] methods,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tTypeBinding receiverType,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \tprivate void findLocalMethods(\r \t\tchar[] methodName,\r \t\tTypeBinding[] argTypes,\r \t\tMethodBinding[] methods,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tTypeBinding receiverType,\r \t\tInvocationSite invocationSite)", "diff": ["-\t//\tboolean noVoidReturnType, how do you know?\r", "-\tboolean onlyStaticMethods,\r", "+\t\tboolean onlyStaticMethods,\r", "+\r", "+\r", "+\r", "+\r", "+\r", "+\r", "-\t\t\tfor (int a = minArgLength; --a >= 0;)\r", "-\t\t\t\tif (argTypes[a] != null) // can be null if it could not be resolved properly\r", "-\t\t\t\t\tif (!scope.areTypesCompatible(argTypes[a], method.parameters[a]))\r", "-\t\t\t\t\t\tcontinue next;\r", "+\t\t\tfor (int a = minArgLength; --a >= 0;){\r", "+\t\t\t\tif (argTypes[a] != null){ // can be null if it could not be resolved properly\r", "+\t\t\t\t\tif (!scope.areTypesCompatible(argTypes[a], method.parameters[a])) {\r", "+\t\t\t\t\t\tcontinue next;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\r", "+\r", "+\r", "+\r", "+\r", "+\r", "+\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90cdff781c26d9879af6cccb51052ab2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "2b5adfd5bdf5a370e30eef7cf60813025897bdd3", "commitAfterChange": "6c719f0e5c9d00da68797ddc3b13bec6943a8d9c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "signatureAfterChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "diff": ["-\t", "+", "-\t", "+", "-\tIEntryResult[] entries = (IEntryResult[])this.entryResults.get(input);", "+\tIEntryResult[] entries = (IEntryResult[]) this.entryResults.get(input);", "-\t\tif (entries == null) {", "+\t\tif (entries == null)", "-\t\t}", "-\tnextEntry: for (int i = 0, max = entries.length; i < max; i++){", "+\tnextEntry: for (int i = 0, max = entries.length; i < max; i++) {", "-\t\t\tif (word[length+slash] != '/') continue; ", "+\t\t\tif (word[length + slash] != '/') continue; ", "-\t\t\tfor (int j = 0; j < length; j++) {", "-\t\t\t\tchar value = word[j+slash];", "-\t\t\t\tif (value != simpleName[j]) continue nextEntry;", "-\t\t\t}", "+\t\t\tfor (int j = 0; j < length; j++)", "+\t\t\t\tif (word[j + slash] != simpleName[j]) continue nextEntry;", "-\t\t", "+", "-\t\tthis.decodeIndexEntry(entry);", "+\t\tdecodeIndexEntry(entry);"]}], "num": 61397}
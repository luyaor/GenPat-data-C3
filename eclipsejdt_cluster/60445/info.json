{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "304813aca933513709caa0c0fbae6e95", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3998e1a6fb440a77c78961a88a629da3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 53, "signatureBeforeChange": "  TypeBinding getTypeFromVariantTypeSignature( \t\tSignatureWrapper wrapper, \t\tTypeVariableBinding[] staticVariables, \t\tReferenceBinding enclosingType, \t\tReferenceBinding genericType, \t\tint rank, \t\tchar[][][] missingTypeNames, \t\tTypeAnnotationWalker walker)", "signatureAfterChange": "  TypeBinding getTypeFromVariantTypeSignature( \t\tSignatureWrapper wrapper, \t\tTypeVariableBinding[] staticVariables, \t\tReferenceBinding enclosingType, \t\tReferenceBinding genericType, \t\tint rank, \t\tchar[][][] missingTypeNames, \t\tTypeAnnotationWalker walker)", "diff": ["-\t\t\tlong tagBits = typeAnnotationsToTagBits(walker.getAnnotationsAtCursor());", "-\t\t\treturn createWildcard(genericType, rank, bound, null /*no extra bound*/, Wildcard.SUPER, tagBits);", "+\t\t\tAnnotationBinding [] annotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+\t\t\treturn this.typeSystem.getWildcard(genericType, rank, bound, null /*no extra bound*/, Wildcard.SUPER, annotations);", "-\t\t\ttagBits = typeAnnotationsToTagBits(walker.getAnnotationsAtCursor());", "-\t\t\treturn createWildcard(genericType, rank, bound, null /*no extra bound*/, Wildcard.EXTENDS, tagBits);", "+\t\t\tannotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+\t\t\treturn this.typeSystem.getWildcard(genericType, rank, bound, null /*no extra bound*/, Wildcard.EXTENDS, annotations);", "-\t\t\ttagBits = typeAnnotationsToTagBits(walker.getAnnotationsAtCursor());", "-\t\t\treturn createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND, tagBits);", "+\t\t\tannotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+\t\t\treturn this.typeSystem.getWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND, annotations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4178657eb2efefbcfc8a85bbbe5930e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "c45031a708344453f01f911278a63ebae41b9cba", "commitAfterChange": "c49a7bd34f8c2781dba76984d24d83335183205f", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 54, "signatureBeforeChange": "  TypeBinding getTypeFromVariantTypeSignature( \t\tSignatureWrapper wrapper, \t\tTypeVariableBinding[] staticVariables, \t\tReferenceBinding enclosingType, \t\tReferenceBinding genericType, \t\tint rank, \t\tchar[][][] missingTypeNames, \t\tTypeAnnotationWalker walker)", "signatureAfterChange": "  TypeBinding getTypeFromVariantTypeSignature( \t\tSignatureWrapper wrapper, \t\tTypeVariableBinding[] staticVariables, \t\tReferenceBinding enclosingType, \t\tReferenceBinding genericType, \t\tint rank, \t\tchar[][][] missingTypeNames, \t\tTypeAnnotationWalker walker)", "diff": ["-\t\t\tTypeBinding bound = getTypeFromTypeSignature(wrapper, staticVariables, enclosingType, missingTypeNames, walker);", "-\t\t\treturn createWildcard(genericType, rank, bound, null /*no extra bound*/, Wildcard.SUPER);", "+\t\t\tTypeBinding bound = getTypeFromTypeSignature(wrapper, staticVariables, enclosingType, missingTypeNames, walker.toWildcardBound());", "+\t\t\tlong tagBits = typeAnnotationsToTagBits(walker.getAnnotationsAtCursor());", "+\t\t\treturn createWildcard(genericType, rank, bound, null /*no extra bound*/, Wildcard.SUPER, tagBits);", "-\t\t\tbound = getTypeFromTypeSignature(wrapper, staticVariables, enclosingType, missingTypeNames, walker);", "-\t\t\treturn createWildcard(genericType, rank, bound, null /*no extra bound*/, Wildcard.EXTENDS);", "+\t\t\tbound = getTypeFromTypeSignature(wrapper, staticVariables, enclosingType, missingTypeNames, walker.toWildcardBound());", "+\t\t\ttagBits = typeAnnotationsToTagBits(walker.getAnnotationsAtCursor());", "+\t\t\treturn createWildcard(genericType, rank, bound, null /*no extra bound*/, Wildcard.EXTENDS, tagBits);", "-\t\t\treturn createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\ttagBits = typeAnnotationsToTagBits(walker.getAnnotationsAtCursor());", "+\t\t\treturn createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND, tagBits);"]}], "num": 60445}
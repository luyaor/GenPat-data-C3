{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c49de8d9baa5bba0f191952f996b4bca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00fd924401d20f86364dccc03b11b4fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "c8af5e76f44ad60b89fcc109db821631c8461cdd", "commitAfterChange": "7202d999e970cc0e26c9a6dc344ca659a295fdad", "methodNumberBeforeChange": 258, "methodNumberAfterChange": 259, "signatureBeforeChange": " \tpublic void _test0240() throws JavaModelException", "signatureAfterChange": " \tpublic void test0241() throws JavaModelException", "diff": ["-\tpublic void _test0240() throws JavaModelException {", "+\tpublic void test0241() throws JavaModelException {", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"\t<T> void foo() {}\\n\" +", "+\t\t\t\"}\";", "+\t\tnode = getASTNode(unit, 0, 0);", "+\t\tassertEquals(\"Not a method declaration\", ASTNode.METHOD_DECLARATION, node.getNodeType());", "+\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) node;", "+\t\tIMethodBinding methodBinding = methodDeclaration.resolveBinding();", "+\t\tassertNotNull(\"No binding\", methodBinding);", "+\t\tITypeBinding[] typeParameters = methodBinding.getTypeParameters();", "+\t\tassertEquals(\"Wrong binary name\", \"X$()V$T\", typeParameter.getBinaryName());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0141d810eae0f9847019458fd1f6192a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "3a514d6cf7a163df7c9aa1b24e69e8f3a5b39e3c", "commitAfterChange": "0aeaaba7ea908a19742d309ce070fd6d99b6c4d4", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void testBug47968type() throws CoreException", "signatureAfterChange": " \tpublic void testBug47968type() throws CoreException", "diff": ["-//\t\tJavaSearchResultCollector result = new JavaSearchResultCollector();", "-//\t\tresult.showAccuracy = true;", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [Bug47968] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [Bug47968] EXACT_MATCH\",", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [Bug47968] EXACT_MATCH INSIDE_JAVADOC\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e10d9643f3b4d352511bda61cb115688", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "c62ecfd031507c11ea236866605fedd6f3a952c5", "commitAfterChange": "ded73445e8c5cf2db0a4abcc53e1680f02ae6cf7", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 336, "signatureBeforeChange": " public void testBug286601i2()", "signatureAfterChange": " public void testBug330313_b286601_07()", "diff": ["-}", "-public void testBug286601i2() {", "-\tthis.formatterPrefs.join_wrapped_lines = false;", "-\tthis.formatterPrefs.tab_char = DefaultCodeFormatterOptions.SPACE;", "-\tthis.formatterPrefs.alignment_for_expressions_in_array_initializer = DefaultCodeFormatterConstants.WRAP_ONE_PER_LINE;", "-\tsetUpBracesPreferences(DefaultCodeFormatterConstants.NEXT_LINE);", "-\tString source =", "-\t\t\"package massive;\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"public class X06a {\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"    \\n\" +", "-\t\t\"    // Table to merge access modes for condition statements (e.g branch[x] || branch[y]). \\n\" +", "-\t\t\"    private static final String[][] ACCESS_MODE_CONDITIONAL_TABLE= {\\n\" +", "-\t\t\"    /* Comment 1 */\\n\" +", "-\t\t\"    /* Comment 2 */ { \\\"1234567890123456789012345678901234567890\\\", \\\"1234567890123456789012345678901234567890\\\" },\\n\" +", "-\t\t\"    /* Comment 3 */ { \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ______________\\\", \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ______________\\\" },\\n\" +", "-\t\t\"    };\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"}\\n\";", "-\tformatSource(source,", "-\t\t\"package massive;\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"public class X06a\\n\" +", "-\t\t\"{\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"    // Table to merge access modes for condition statements (e.g branch[x] ||\\n\" +", "-\t\t\"    // branch[y]).\\n\" +", "-\t\t\"    private static final String[][] ACCESS_MODE_CONDITIONAL_TABLE =\\n\" +", "-\t\t\"    {\\n\" +", "-\t\t\"     /* Comment 1 */\\n\" +", "-\t\t\"     /* Comment 2 */{ \\\"1234567890123456789012345678901234567890\\\", \\\"1234567890123456789012345678901234567890\\\" },\\n\" +", "-\t\t\"     /* Comment 3 */{ \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ______________\\\", \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ______________\\\" },\\n\" +", "-\t\t\"    };\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"}\\n\"", "-\t);", "-}", "+}", "+public void testBug330313_b286601_07() {", "+\tthis.formatterPrefs.join_wrapped_lines = false;", "+\tthis.formatterPrefs.tab_char = DefaultCodeFormatterOptions.SPACE;", "+\tthis.formatterPrefs.alignment_for_expressions_in_array_initializer = Alignment.M_ONE_PER_LINE_SPLIT;", "+\tsetUpBracesPreferences(DefaultCodeFormatterConstants.NEXT_LINE);", "+\tString source =", "+\t\t\"package b286601;\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"public class X07 {\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"    \\n\" + ", "+\t\t\"    // Table to merge access modes for condition statements (e.g branch[x] || branch[y]). \\n\" + ", "+\t\t\"    static final String[][] ACCESS_MODE_CONDITIONAL_TABLE= {\\n\" + ", "+\t\t\"    /* Comment 1 */\\n\" + ", "+\t\t\"    /* Comment 2 */ { \\\"1234567890123456789012345678901234567890\\\", \\\"1234567890123456789012345678901234567890\\\" },\\n\" + ", "+\t\t\"    /* Comment 3 */ { \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ______________\\\", \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ______________\\\" },\\n\" + ", "+\t\t\"    };\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"}\\n\";", "+\tformatSource(source,", "+\t\t\"package b286601;\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"public class X07\\n\" + ", "+\t\t\"{\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"    // Table to merge access modes for condition statements (e.g branch[x] ||\\n\" + ", "+\t\t\"    // branch[y]).\\n\" + ", "+\t\t\"    static final String[][] ACCESS_MODE_CONDITIONAL_TABLE =\\n\" + ", "+\t\t\"    {\\n\" + ", "+\t\t\"            /* Comment 1 */\\n\" + ", "+\t\t\"            /* Comment 2 */{\\n\" + ", "+\t\t\"                    \\\"1234567890123456789012345678901234567890\\\",\\n\" + ", "+\t\t\"                    \\\"1234567890123456789012345678901234567890\\\" },\\n\" + ", "+\t\t\"            /* Comment 3 */{\\n\" + ", "+\t\t\"                    \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ______________\\\",\\n\" + ", "+\t\t\"                    \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ______________\\\" },\\n\" + ", "+\t\t\"    };\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"}\\n\"", "+\t);", "+}"]}], "num": 57776}
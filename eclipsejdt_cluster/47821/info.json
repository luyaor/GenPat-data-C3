{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c4f19552f44a7bc9ab35a5d89690772", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bf4233d38c6e176514cdeb7135a1389", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "fe412add93d4cfbb83d610f46ca1de0e6d064ca7", "commitAfterChange": "297840d814bc6fb8f78f68a36eb74676aea7b3b0", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": "\r public void testBug460186() throws JavaModelException", "signatureAfterChange": "\r public void testBug460186() throws JavaModelException", "diff": ["-\t\t\t\"package test460186;\\n\" +\r", "-\t\t\t\"public class NPE {\\n\" + \r", "-\t\t\t\"\tvoid foo(String[] args) throws Exception {\\n\" + \r", "-\t\t\t\"\t\tif (args == null) error(); \\n\" + \r", "-\t\t\t\"\t\terror();[]\\n\" + \r", "-\t\t\t\"\t}\\n\" + \r", "-\t\t\t\"\tvoid error() throws Exception {\\n\" + \r", "-\t\t\t\"\t\tthrow new Exception();\\n\" + \r", "+\t\t\t\"class Foo {\\n\" + \r", "+\t\t\t\"\tvoid foo()\\n {\" + \r", "+\t\t\t\"\t\tfoo();[]\\n\" + \r", "-\ttry {\r", "-\t\tparser.createASTs(new ICompilationUnit[] {this.workingCopy}, new String[0], requestor, null);\r", "-\t} catch (IllegalArgumentException e) {\r", "-\t\tassertTrue(\"Test Failed\", false);\r", "-\t}\r", "+\tparser.createASTs(new ICompilationUnit[] {this.workingCopy}, new String[0], requestor, null);\r", "+\t// Implicitly check that no exception is thrown by createASTs.\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7c738daf16a823e6d5fcbbd8d6b2318", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiProjectTests.java", "commitBeforeChange": "2a3b80bcfd06669d1427574c339ccf3d0f31ce96", "commitAfterChange": "f55c780ccc21a82ef44a53622872b20d6daffee7", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void test103_missing_required_binaries() throws JavaModelException", "signatureAfterChange": " public void test103_missing_required_binaries() throws JavaModelException", "diff": ["-\tenv.addRequiredProject(p3, p1);", "+//\tenv.addRequiredProject(p3, p1); - missing dependency", "-\t\t\"  void foo();\\n\" +", "-\t\t\"public abstract class X implements I {\\n\" +", "+\t\t\"public class X implements I {\\n\" +", "-\tIPath y = env.addClass(root3, \"\", \"Y\",", "-\t\t\"public abstract class Y extends X {\\n\" +", "-\t\t\"  X m = new X();\\n\" +  // error!", "-\t\t\"  void bar() {\\n\" +", "-\t\t\"    this.m.foo();\\n\" +", "-\t\t\"  }\\n\" +", "+\tenv.addClass(root3, \"\", \"Y\",", "+\t\t\"public class Y {\\n\" +", "+\t\t\"  X m = new X();\\n\" +", "-\t\texpectingOnlySpecificProblemsFor(p3, new Problem[]{", "-\t\t\tnew Problem(\"p3\", ", "-\t\t\t\t\"Cannot instantiate the type X\", ", "-\t\t\t\ty, 48, 49, CategorizedProblem.CAT_TYPE),", "-\t\t});", "+\t\texpectingNoProblemsFor(p3);"]}], "num": 47821}
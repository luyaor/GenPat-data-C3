{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d2437ca56eaea6ecf0d6b949c695c2c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c9bec823089fac406405e00e745392b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "4224ed338b096a221dba6dc1bfeabf46bad0c43f", "commitAfterChange": "4f3e6e808c3352288b20b9a17621a861ee976387", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public ICompilationUnit getCompilationUnit(String name)", "signatureAfterChange": " public ICompilationUnit getCompilationUnit(String name)", "diff": ["-\tICompilationUnit primaryCU =  new CompilationUnit(this, name, DefaultWorkingCopyOwner.PRIMARY);", "-\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\tMap sharedWorkingCopies = manager.sharedWorkingCopies;", "-\tMap perOwnerWorkingCopies = (Map) sharedWorkingCopies.get(DefaultWorkingCopyOwner.PRIMARY);", "-\tif (perOwnerWorkingCopies == null) return primaryCU;", "-\tICompilationUnit sharedWC = (ICompilationUnit)perOwnerWorkingCopies.get(primaryCU);", "-\tif (sharedWC == null) {", "-\t\treturn primaryCU;", "-\t} else {", "-\t\treturn sharedWC;", "-\t}", "+\treturn  new CompilationUnit(this, name, DefaultWorkingCopyOwner.PRIMARY);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e81c4eba7b4eadefe9164c640165e7ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "6945031c95ca0d70ac3adb24efe812a06855be13", "commitAfterChange": "7a9726508a1cf4124fc56e814b6b230c72a37501", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " public ICompilationUnit getWorkingCopy(WorkingCopyOwner workingCopyOwner, IProblemRequestor problemRequestor, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public ICompilationUnit getWorkingCopy(WorkingCopyOwner workingCopyOwner, IProblemRequestor problemRequestor, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t// In order to be shared, working copies have to denote the same compilation unit ", "-\t// AND use the same owner.", "-\t// Assuming there is a little set of buffer factories, then use a 2 level Map cache.", "-\tMap sharedWorkingCopies = manager.sharedWorkingCopies;", "-\t", "-\tMap perOwnerWorkingCopies = (Map) sharedWorkingCopies.get(workingCopyOwner);", "-\tif (perOwnerWorkingCopies == null){", "-\t\tperOwnerWorkingCopies = new HashMap();", "-\t\tsharedWorkingCopies.put(workingCopyOwner, perOwnerWorkingCopies);", "+\tCompilationUnit workingCopy = new CompilationUnit((PackageFragment)getParent(), getElementName(), workingCopyOwner);", "+\tIPath path = getPath();", "+\tJavaModelManager.PerWorkingCopyInfo perWorkingCopyInfo = ", "+\t\tmanager.getPerWorkingCopyInfo(workingCopy, path, false/*don't create*/, true/*record usage*/, null/*not used since don't create*/);", "+\tif (perWorkingCopyInfo != null) {", "+\t\treturn perWorkingCopyInfo.getWorkingCopy(); // return existing handle instead of the one created above", "-\tCompilationUnit workingCopy = (CompilationUnit)perOwnerWorkingCopies.get(this);", "-\tif (workingCopy != null) {", "-\t\tJavaModelManager.PerWorkingCopyInfo perWorkingCopyInfo = ", "-\t\t\tmanager.getPerWorkingCopyInfo(workingCopy, false/*don't create*/, true/*record usage*/, null/*not used since don't create*/);", "-\t\tif (perWorkingCopyInfo != null) {", "-", "-\t\t\tif (SHARED_WC_VERBOSE) {", "-\t\t\t\tSystem.out.println(\"Incrementing use count of shared working copy \" + workingCopy.toStringWithAncestors()); //$NON-NLS-1$", "-\t\t\t}", "-", "-\t\t\treturn workingCopy;", "-\t\t}", "-\t} ", "-\tworkingCopy = new CompilationUnit((PackageFragment)getParent(), getElementName(), workingCopyOwner);", "-\tBecomeWorkingCopyOperation op = new BecomeWorkingCopyOperation(workingCopy, perOwnerWorkingCopies, problemRequestor);", "+\tBecomeWorkingCopyOperation op = new BecomeWorkingCopyOperation(workingCopy, path, problemRequestor);"]}], "num": 43136}
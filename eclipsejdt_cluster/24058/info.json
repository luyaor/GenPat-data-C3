{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e5f467cb158bd4bcccf1853707a9e4c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9342b61931834f5b06f9a293c873e29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "e8cc2a8f8e9efcff6e76a3ee15d5b53d1a958057", "commitAfterChange": "7e8c39a9e3d7dea3d8b022efbc3b049165785892", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeDeclaration convert(SourceTypeElementInfo typeInfo, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate TypeDeclaration convert(SourceType typeHandle, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\tprivate TypeDeclaration convert(SourceTypeElementInfo typeInfo, CompilationResult compilationResult) {", "+\tprivate TypeDeclaration convert(SourceType typeHandle, CompilationResult compilationResult) throws JavaModelException {", "+\t\tSourceTypeElementInfo typeInfo = (SourceTypeElementInfo) typeHandle.getElementInfo();", "-\t\t\tIType typeHandle = typeInfo.getHandle();", "-\t\t\ttry {", "-\t\t\t\tif (typeHandle.isAnonymous()) {", "-\t\t\t\t\ttype.name = TypeDeclaration.ANONYMOUS_EMPTY_NAME;", "-\t\t\t\t\ttype.bits |= ASTNode.AnonymousAndLocalMask;", "-\t\t\t\t} else {", "-\t\t\t\t\tif (typeHandle.isLocal()) {", "-\t\t\t\t\t\ttype.bits |= ASTNode.IsLocalTypeMASK;", "-\t\t\t\t\t}", "+\t\t\tif (typeHandle.isAnonymous()) {", "+\t\t\t\ttype.name = TypeDeclaration.ANONYMOUS_EMPTY_NAME;", "+\t\t\t\ttype.bits |= ASTNode.AnonymousAndLocalMask;", "+\t\t\t} else {", "+\t\t\t\tif (typeHandle.isLocal()) {", "+\t\t\t\t\ttype.bits |= ASTNode.IsLocalTypeMASK;", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// could not figure, assume toplevel", "+\t\t", "+\t\t/* convert annotations */", "+\t\ttype.annotations = convertAnnotations(typeHandle);", "-\t\t\tISourceType[] sourceMemberTypes = typeInfo.getMemberTypes();", "+\t\t\tSourceType[] sourceMemberTypes = typeInfo.getMemberTypeHandles();", "-\t\t\t\ttype.memberTypes[i] = convert((SourceTypeElementInfo) sourceMemberTypes[i], compilationResult);", "+\t\t\t\ttype.memberTypes[i] = convert(sourceMemberTypes[i], compilationResult);", "-\t\tISourceField[] sourceFields = null;", "+\t\tSourceField[] sourceFields = null;", "-\t\t\tsourceFields = typeInfo.getFields();", "+\t\t\tsourceFields = typeInfo.getFieldHandles();", "-\t\t\t\ttype.fields[i] = convert((SourceFieldElementInfo) sourceFields[index++], type, compilationResult);", "+\t\t\t\ttype.fields[i] = convert(sourceFields[index++], type, compilationResult);", "-\t\t\tISourceMethod[] sourceMethods = typeInfo.getMethods();", "+\t\t\tSourceMethod[] sourceMethods = typeInfo.getMethodHandles();", "-\t\t\t\tISourceMethod sourceMethod = sourceMethods[i];", "+\t\t\t\tSourceMethod sourceMethod = sourceMethods[i];", "-\t\t\t\tif ((sourceMethod.getModifiers() & Flags.AccAbstract) != 0) {", "+\t\t\t\tif ((sourceMethod.getFlags() & Flags.AccAbstract) != 0) {", "-\t\t\t\t\tAbstractMethodDeclaration method = convert((SourceMethodElementInfo) sourceMethod, compilationResult);", "+\t\t\t\t\tAbstractMethodDeclaration method = convert(sourceMethod, compilationResult);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc6e819bb0512cc527b73432ef83e2c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "91a5b49121a22c32ff81484145fe6ce15b755e81", "commitAfterChange": "16b9910572e7876db169469e4f3c509a31490ed4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeDeclaration convert(ISourceType sourceType, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate TypeDeclaration convert(ISourceType sourceType, CompilationResult compilationResult)", "diff": ["-\t\tif (sourceType.getEnclosingType() != null) {", "+\t\tif (sourceType.getEnclosingType() == null && sourceType instanceof SourceTypeElementInfo) {", "+\t\t\tIType typeHandle = ((SourceTypeElementInfo)sourceType).getHandle();", "+\t\t\ttry {", "+\t\t\t\tif (typeHandle.isAnonymous()) {", "+\t\t\t\t\ttype.name = TypeDeclaration.ANONYMOUS_EMPTY_NAME;", "+\t\t\t\t\ttype.bits |= ASTNode.AnonymousAndLocalMask;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (typeHandle.isLocal()) {", "+\t\t\t\t\t\ttype.bits |= ASTNode.IsLocalTypeMASK;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// could not figure, assume toplevel", "+\t\t\t}", "+\t\t}  else {", "+\t\t}", "+\t\tif ((type.bits & ASTNode.IsAnonymousTypeMASK) == 0) {", "+\t\t\ttype.name = sourceType.getName();", "-\t\t/* convert fields */", "+\t\t/* convert intializers and fields*/", "+\t\tInitializerElementInfo[] initializers = null;", "+\t\tint initializerCount = 0;", "+\t\tif ((this.flags & LOCAL_TYPE) != 0 && sourceType instanceof SourceTypeElementInfo) {", "+\t\t\tinitializers = ((SourceTypeElementInfo)sourceType).getInitializers();", "+\t\t\tinitializerCount = initializers.length;", "+\t\t}", "+\t\tISourceField[] sourceFields = null;", "+\t\tint sourceFieldCount = 0;", "-\t\t\tISourceField[] sourceFields = sourceType.getFields();", "-\t\t\tint sourceFieldCount = sourceFields == null ? 0 : sourceFields.length;", "-\t\t\ttype.fields = new FieldDeclaration[sourceFieldCount];", "-\t\t\tfor (int i = 0; i < sourceFieldCount; i++) {", "-\t\t\t\ttype.fields[i] = convert(sourceFields[i], type);", "+\t\t\tsourceFields = sourceType.getFields();", "+\t\t\tsourceFieldCount = sourceFields == null ? 0 : sourceFields.length;", "+\t\t}", "+\t\tint length = initializerCount + sourceFieldCount;", "+\t\tif (length > 0) {", "+\t\t\ttype.fields = new FieldDeclaration[length];", "+\t\t\tfor (int i = 0; i < initializerCount; i++) {", "+\t\t\t\ttype.fields[i] = convert(initializers[i], compilationResult);", "+\t\t\t}", "+\t\t\tint index = 0;", "+\t\t\tfor (int i = initializerCount; i < length; i++) {", "+\t\t\t\ttype.fields[i] = convert(sourceFields[index++], type, compilationResult);"]}], "num": 24058}
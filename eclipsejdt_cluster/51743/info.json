{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cff84700baba011162c8aa72a96f9997", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ce48317f910e286c70f8e729756efd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "12bbec9151d1b613c62f44289e9e604128f21de0", "commitAfterChange": "cfad6931331ca38f2461ad24853dd9b6dfa652de", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic ClasspathEntry( \t\tint contentKind, \t\tint entryKind, \t\tIPath path, \t\tIPath[] inclusionPatterns, \t\tIPath[] exclusionPatterns, \t\tIPath sourceAttachmentPath, \t\tIPath sourceAttachmentRootPath, \t\tIPath specificOutputLocation, \t\tboolean isExported, \t\tIPath[] accessibleFiles, \t\tIPath[] nonAccessibleFiles, \t\tboolean combineAccessRestrictions, \t\tIClasspathAttribute[] extraAttributes)", "signatureAfterChange": " \tpublic ClasspathEntry( \t\tint contentKind, \t\tint entryKind, \t\tIPath path, \t\tIPath[] inclusionPatterns, \t\tIPath[] exclusionPatterns, \t\tIPath sourceAttachmentPath, \t\tIPath sourceAttachmentRootPath, \t\tIPath specificOutputLocation, \t\tboolean isExported, \t\tIAccessRule[] accessRules, \t\tboolean combineAccessRules, \t\tIClasspathAttribute[] extraAttributes)", "diff": ["-\t\tIPath[] accessibleFiles,", "-\t\tIPath[] nonAccessibleFiles,", "-\t\tboolean combineAccessRestrictions,", "+\t\tIAccessRule[] accessRules,", "+\t\tboolean combineAccessRules,", "-\t\tthis.accessibleFiles = accessibleFiles;", "-\t\tthis.nonAccessibleFiles = nonAccessibleFiles;", "-\t\tthis.combineAccessRestrictions = combineAccessRestrictions;", "+\t\t", "+\t\tAccessRuleSet ruleSet = createAccessRuleSet(accessRules);", "+\t\tif (ruleSet != null) {", "+\t\t\t// compute message template", "+\t\t\truleSet.messageTemplate = getMessageTemplate();", "+\t\t}", "+\t\tthis.accessRuleSet = ruleSet;", "+\t\t", "+\t\tthis.combineAccessRules = combineAccessRules;", "-\t    if (accessibleFiles != INCLUDE_ALL && accessibleFiles.length > 0) {", "-\t\t\tthis.importRestriction = UNINIT_RESTRICTION;", "-\t    }", "-\t    if (nonAccessibleFiles.length > 0) {", "-\t\t\tthis.importRestriction = UNINIT_RESTRICTION;", "-\t    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2182b13d969e91a185e30c2934b87977", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ImportRewrite.java", "commitBeforeChange": "e6d1c8eac73b65997182b9feaba7e190099afd1a", "commitAfterChange": "8771cbd26402d5e088df5bc8e18f1b0e8d601818", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "  \tprivate Type getArrayType(Type elementType, AST ast, ImportRewriteContext context, ITypeBinding normalizedBinding)", "signatureAfterChange": "  \tprivate Type getArrayType(Type elementType, AST ast, ImportRewriteContext context, ITypeBinding normalizedBinding)", "diff": ["-\t\t\tIAnnotationBinding[][] annotationsOnDimensions = normalizedBinding.getTypeAnnotationsOnDimensions();", "-\t\t\tint length = annotationsOnDimensions != null ? annotationsOnDimensions.length : 0;", "-\t\t\tlength = length < noDimensions ? length : noDimensions; // should not be >, but preventive.", "-\t\t\tfor (int i = 0; i < length; ++i) {", "-\t\t\t\tList dimensions = arrayType.dimensions();", "-\t\t\t\tDimension dimension = (Dimension) dimensions.get(i);", "-\t\t\t\tIAnnotationBinding[] annotationOnDimension = annotationsOnDimensions[i];", "-\t\t\t\tif (annotationOnDimension == null) continue;", "-\t\t\t\tannotateList(dimension.annotations(), annotationOnDimension, ast, context);", "+\t\t\tfor (int i = 0; i < noDimensions; i++) {", "+\t\t\t\tIAnnotationBinding[] typeAnnotations = normalizedBinding.getTypeAnnotations();", "+\t\t\t\tif (typeAnnotations.length > 0) {", "+\t\t\t\t\tDimension dimension = (Dimension) arrayType.dimensions().get(i);", "+\t\t\t\t\tannotateList(dimension.annotations(), typeAnnotations, ast, context);", "+\t\t\t\t}", "+\t\t\t\tnormalizedBinding = normalizedBinding.getComponentType();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8c5b2bf9793cd9d606fa6363bb784ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "6a44e0777af1a4632e0d20c0e9b92d35d2ad59f3", "commitAfterChange": "2ca339c139c0fe73a5bd2705f66592731098d347", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void complainIfUnusedExceptionHandlers( \t\tAstNode[] exceptionHandlers, \t\tBlockScope scope, \t\tTryStatement tryStatement)", "signatureAfterChange": "  \tpublic void complainIfUnusedExceptionHandlers(AbstractMethodDeclaration method)", "diff": ["+\tpublic void complainIfUnusedExceptionHandlers(AbstractMethodDeclaration method) {", "+\t\tMethodScope scope = method.scope;", "+\t\t// report errors for unreachable exception handlers", "+\t\tfor (int i = 0, count = handledExceptions.length; i < count; i++) {", "+\t\t\tint index = indexes.get(handledExceptions[i]);", "+\t\t\tint cacheIndex = index / BitCacheSize;", "+\t\t\tint bitMask = 1 << (index % BitCacheSize);", "+\t\t\tif ((isReached[cacheIndex] & bitMask) == 0) {", "+\t\t\t\tscope.problemReporter().unusedDeclaredThrownException(", "+\t\t\t\t\thandledExceptions[index],", "+\t\t\t\t\tmethod,", "+\t\t\t\t\tmethod.thrownExceptions[index]);", "+\t\t\t}", "+\t\t}", "+\t}", "-\t\tAstNode[] exceptionHandlers,", "-\t\t\t\tscope.problemReporter().unreachableExceptionHandler(", "-\t\t\t\t\texceptionHandlers[index]);", "-\t\t\t\t\tscope.problemReporter().maskedExceptionHandler(", "-\t\t\t\t\t\texceptionHandlers[index]);", "-\t\t// will optimized out unnecessary catch block during code gen", "-\t\ttryStatement.preserveExceptionHandler = isNeeded;"]}], "num": 51743}
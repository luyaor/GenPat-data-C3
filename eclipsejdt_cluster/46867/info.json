{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "abf57725b8abc28925c3ef510cc5f6f3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2157d94301a5daa592cb059a3f5b67e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "74d2aea83c6e0695d56d884494cbf746e657419c", "commitAfterChange": "7a9c0666eb2e26d6f63c1d37d496287d2df152d0", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public long getAnnotationTagBits()", "signatureAfterChange": " public long getAnnotationTagBits()", "diff": ["-\t\tTypeDeclaration typeDecl = ((SourceTypeBinding)originalMethod.declaringClass).scope.referenceContext;", "-\t\tAbstractMethodDeclaration methodDecl = typeDecl.declarationOf(originalMethod);", "-\t\tif (methodDecl != null)", "-\t\t\tASTNode.resolveAnnotations(methodDecl.scope, methodDecl.annotations, originalMethod);", "+\t\tClassScope scope = ((SourceTypeBinding) originalMethod.declaringClass).scope;", "+\t\tif (scope != null) {", "+\t\t\tTypeDeclaration typeDecl = scope.referenceContext;", "+\t\t\tAbstractMethodDeclaration methodDecl = typeDecl.declarationOf(originalMethod);", "+\t\t\tif (methodDecl != null)", "+\t\t\t\tASTNode.resolveAnnotations(methodDecl.scope, methodDecl.annotations, originalMethod);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6373dc91dc5118fab4a0adf66b9d6594", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "a1d9bbf4a9247221698b754328cf60e4164c8777", "commitAfterChange": "5b9d47f409f69c6ae2c967cf638930323c52a4e8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic static final Constant getConstantFor( \t\tFieldBinding binding, \t\tReference reference, \t\tboolean isImplicit, \t\tScope referenceScope)", "signatureAfterChange": " \tpublic static final Constant getConstantFor( \t\tFieldBinding binding, \t\tReference reference, \t\tboolean isImplicit, \t\tScope referenceScope)", "diff": ["-\t\tSourceTypeBinding typeBinding = (SourceTypeBinding) binding.declaringClass;", "-\t\tTypeDeclaration typeDecl = typeBinding.scope.referenceContext;", "-\t\tFieldDeclaration fieldDecl = typeDecl.declarationOf(binding);", "+\t\tFieldBinding originalField = binding.original();", "+\t\tSourceTypeBinding sourceType = (SourceTypeBinding) originalField.declaringClass;", "+\t\tTypeDeclaration typeDecl = sourceType.scope.referenceContext;", "+\t\tFieldDeclaration fieldDecl = typeDecl.declarationOf(originalField);", "-\t\tfieldDecl.resolve(binding.isStatic() //side effect on binding ", "+\t\tfieldDecl.resolve(originalField.isStatic() //side effect on binding "]}], "num": 46867}
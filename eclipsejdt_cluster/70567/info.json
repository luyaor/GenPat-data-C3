{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "489e1e978296b9e6807b15b5c884ce02", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82b32c2f769882bc00e0fdf6c924c1c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "e74a7e922535396e598f77f6ca74363a6e6d0498", "commitAfterChange": "5132501fe32bc39d29df0ef5b05cc4e551a24910", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void createInitialConstraintsForParameters(TypeBinding[] parameters, boolean checkVararg, TypeBinding varArgsType, MethodBinding method)", "signatureAfterChange": " \tpublic void createInitialConstraintsForParameters(TypeBinding[] parameters, boolean checkVararg, TypeBinding varArgsType, MethodBinding method)", "diff": ["-\t\t\t} else {", "-\t\t\t\tif (!(parameters[i] instanceof TypeVariableBinding) || this.invocationArguments[i].isPertinentToApplicability(((TypeVariableBinding)parameters[i]), method))", "-\t\t\t\t\tthis.initialConstraints[numConstraints++] = new ConstraintExpressionFormula(this.invocationArguments[i], thetaF, ReductionResult.POTENTIALLY_COMPATIBLE);", "-\t\t\t\t// else we know it is potentially compatible, no need to assert.", "-\t\t\t}", "+\t\t\t} else if (!isTypeVariableOfCandidate(parameters[i], method)) {", "+\t\t\t\tthis.initialConstraints[numConstraints++] = new ConstraintExpressionFormula(this.invocationArguments[i], thetaF, ReductionResult.POTENTIALLY_COMPATIBLE);", "+\t\t\t} // else we know it is potentially compatible, no need to assert.", "-\t\t\t\t} else {", "-\t\t\t\t\tif (!(varArgsType instanceof TypeVariableBinding) || this.invocationArguments[i].isPertinentToApplicability(((TypeVariableBinding)varArgsType), method))", "-\t\t\t\t\t\tthis.initialConstraints[numConstraints++] = new ConstraintExpressionFormula(this.invocationArguments[i], thetaF, ReductionResult.POTENTIALLY_COMPATIBLE);", "-\t\t\t\t\t// else we know it is potentially compatible, no need to assert.", "-\t\t\t\t}", "+\t\t\t\t} else if (!isTypeVariableOfCandidate(varArgsType, method)) {", "+\t\t\t\t\tthis.initialConstraints[numConstraints++] = new ConstraintExpressionFormula(this.invocationArguments[i], thetaF, ReductionResult.POTENTIALLY_COMPATIBLE);", "+\t\t\t\t} // else we know it is potentially compatible, no need to assert."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb5046bbf0b53e3d048e4b47b9f91f87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/JavaDevelopmentContextImpl.java", "commitBeforeChange": "92f042fa40e42063d16c97bd03b03013bccafbbf", "commitAfterChange": "564f0099078b50659e30ddb5a5157ad26528c30f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r byte[] getBinaryFromFileSystem(org.eclipse.core.resources.IFile file)", "signatureAfterChange": "\r byte[] getBinaryFromFileSystem(org.eclipse.core.resources.IFile file)", "diff": ["-\t\tIPath location = file.getLocation();\r", "-\t\tif (location == null) return new byte[0];\r", "-\t\tInputStream input = new java.io.FileInputStream(location.toOSString());\r", "-\t\treturn org.eclipse.jdt.internal.core.Util.readContentsAsBytes(input);\r", "-\t} catch (IOException e) {\r", "+\t\treturn Util.getResourceContentsAsByteArray(file);\r", "+\t} catch (JavaModelException e) {\r"]}], "num": 70567}
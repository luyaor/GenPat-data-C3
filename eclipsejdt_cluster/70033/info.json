{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0340b93038fc37ab755e205807d217f3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e13c1649934d0fbc085b51d60c19888", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "f3d22d99bfd9fe1ebb494e068d8993b366a4fb40", "commitAfterChange": "3d39b6fa2333bd82d316ed4fa6ee77581202d163", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, \t\t\tFlowInfo flowInfo)", "diff": ["-\t\tFlowInfo flowInfo) {", "+\t\t\tFlowInfo flowInfo) {", "+\t\tint initialComplaintLevel = (flowInfo.reachMode() & FlowInfo.UNREACHABLE) != 0 ? Statement.COMPLAINED_FAKE_REACHABLE : Statement.NOT_COMPLAINED;", "-\t\t\t\tcurrentScope.problemReporter().fakeReachable(this.valueIfTrue);", "+\t\t\t}", "+\t\t\tif (!isKnowDeadCodePattern(this.condition) || currentScope.compilerOptions().reportDeadCodeInTrivialIfStatement) {", "+\t\t\t\tthis.valueIfTrue.complainIfUnreachable(trueFlowInfo, currentScope, initialComplaintLevel);", "-\t\t\t\tcurrentScope.problemReporter().fakeReachable(this.valueIfFalse);", "+\t\t\tif (!isKnowDeadCodePattern(this.condition) || currentScope.compilerOptions().reportDeadCodeInTrivialIfStatement) {", "+\t\t\t\tthis.valueIfFalse.complainIfUnreachable(falseFlowInfo, currentScope, initialComplaintLevel);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9a72cf0acd7c981049b7f17abc02afa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/WhileStatement.java", "commitBeforeChange": "3307a3b21f8472cc998512e9e4cd5afdd4f17b52", "commitAfterChange": "b155f47580a90f694a899aae6d06a1ff29f450b8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tpublic FlowInfo analyseCode(", "-\t\tBlockScope currentScope,", "-\t\tFlowContext flowContext,", "-\t\tFlowInfo flowInfo) {", "+\tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {", "+\t\tint initialComplaintLevel = (flowInfo.reachMode() & FlowInfo.UNREACHABLE) != 0 ? Statement.COMPLAINED_FAKE_REACHABLE : Statement.NOT_COMPLAINED;", "-\t\tthis.preCondInitStateIndex =", "-\t\t\tcurrentScope.methodScope().recordInitializationStates(flowInfo);", "+\t\tthis.preCondInitStateIndex = currentScope.methodScope().recordInitializationStates(flowInfo);", "+\t\t", "-\t\t\tif (!this.action.complainIfUnreachable(actionInfo, currentScope, false)) {", "+\t\t\tif (this.action.complainIfUnreachable(actionInfo, currentScope, initialComplaintLevel) < Statement.COMPLAINED_UNREACHABLE) {"]}], "num": 70033}
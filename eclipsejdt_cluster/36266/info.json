{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f87c8be1d89e923f14c1b68d5ea1ea6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62c9c633dd8083a4faa80e65c5679bcb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "cbe2b622e81a27ceffd382724966e1dd065a9d5c", "commitAfterChange": "5f8bc31fdd9227264ffdb0d653c171e78b54416c", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding method)", "signatureAfterChange": "  \tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding method)", "diff": ["-\t\tif (targetType instanceof TypeVariableBinding) {", "-\t\t\tif (method != null) { // when called from type inference", "-\t\t\t\tif (((TypeVariableBinding)targetType).declaringElement == method)", "-\t\t\t\t\treturn false;", "-\t\t\t\tif (method.isConstructor() && ((TypeVariableBinding)targetType).declaringElement == method.declaringClass)", "-\t\t\t\t\treturn false;", "-\t\t\t} else { // for internal calls", "-\t\t\t\tTypeVariableBinding typeVariable = (TypeVariableBinding) targetType;", "-\t\t\t\tif (typeVariable.declaringElement instanceof MethodBinding)", "-\t\t\t\t\treturn false;", "-\t\t\t}", "-\t\t}", "+\t\tif (!super.isPertinentToApplicability(targetType, method))", "+\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b032c080dc75002151824838695a5ccb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "a05f72a9389097f85d037088e479172e5f54b397", "commitAfterChange": "264e20b3b391e1bf2368fe3b934918be326e6ec2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\tAbstractMethodDeclaration methodDeclaration = methodScope.referenceMethod();", "+\t\tAbstractMethodDeclaration methodDeclaration = (methodScope != null) ? methodScope.referenceMethod() : null;", "+\t\t\tif (typeVariables == null) typeVariables = Binding.NO_TYPE_VARIABLES;", "-\t\t\t\tif (typeVariableBinding.declaringElement instanceof TypeBinding)", "+\t\t\t\tif (typeVariableBinding != null && typeVariableBinding.declaringElement instanceof TypeBinding)", "-\t\t\t\t\tif (typeVariableBinding.declaringElement instanceof TypeBinding)", "+\t\t\t\t\tif (typeVariableBinding != null && typeVariableBinding.declaringElement instanceof TypeBinding)"]}], "num": 36266}
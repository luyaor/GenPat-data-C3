{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dde784b676fbd92c7521c75bee041e93", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fa22c31e7fa14af83640d93acf30457", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java", "commitBeforeChange": "ee73272992444a9c8e6586ce5a37f5dc6d6e8bd9", "commitAfterChange": "f598d68e65d421b1e902e4d71831d57a9b4e73ab", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public boolean getNextCharAsJavaIdentifierPart()", "signatureAfterChange": " public boolean getNextCharAsJavaIdentifierPart()", "diff": ["-\tint temp = currentPosition;", "+\tint temp = this.currentPosition;", "-\t\tif (((currentCharacter = source[currentPosition++]) == '\\\\')", "-\t\t\t&& (source[currentPosition] == 'u')) {", "+\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\tcurrentPosition++;", "-\t\t\twhile (source[currentPosition] == 'u') {", "-\t\t\t\tcurrentPosition++;", "+\t\t\tthis.currentPosition++;", "+\t\t\twhile (this.source[this.currentPosition] == 'u') {", "+\t\t\t\tthis.currentPosition++;", "-\t\t\tif (((c1 = Character.getNumericValue(source[currentPosition++])) > 15", "+\t\t\tif (((c1 = Character.getNumericValue(this.source[this.currentPosition++])) > 15", "-\t\t\t\t|| ((c2 = Character.getNumericValue(source[currentPosition++])) > 15 || c2 < 0)", "-\t\t\t\t|| ((c3 = Character.getNumericValue(source[currentPosition++])) > 15 || c3 < 0)", "-\t\t\t\t|| ((c4 = Character.getNumericValue(source[currentPosition++])) > 15 || c4 < 0)) {", "-\t\t\t\tcurrentPosition = temp;", "+\t\t\t\t|| ((c2 = Character.getNumericValue(this.source[this.currentPosition++])) > 15 || c2 < 0)", "+\t\t\t\t|| ((c3 = Character.getNumericValue(this.source[this.currentPosition++])) > 15 || c3 < 0)", "+\t\t\t\t|| ((c4 = Character.getNumericValue(this.source[this.currentPosition++])) > 15 || c4 < 0)) {", "+\t\t\t\tthis.currentPosition = temp;", "-\t\t\tcurrentCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "-\t\t\tif (!Character.isJavaIdentifierPart(currentCharacter)) {", "-\t\t\t\tcurrentPosition = temp;", "+\t\t\tthis.currentCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "+\t\t\tif (!Character.isJavaIdentifierPart(this.currentCharacter)) {", "+\t\t\t\tthis.currentPosition = temp;", "-\t\t\tif (withoutUnicodePtr == 0) {", "+\t\t\tif (this.withoutUnicodePtr == 0) {", "-\t\t\t\twithoutUnicodePtr = currentPosition - unicodeSize - startPosition;", "+\t\t\t\tthis.withoutUnicodePtr = this.currentPosition - unicodeSize - this.startPosition;", "-\t\t\t\t\tsource, ", "-\t\t\t\t\tstartPosition, ", "-\t\t\t\t\twithoutUnicodeBuffer, ", "+\t\t\t\t\tthis.source, ", "+\t\t\t\t\tthis.startPosition, ", "+\t\t\t\t\tthis.withoutUnicodeBuffer, ", "-\t\t\t\t\twithoutUnicodePtr); ", "+\t\t\t\t\tthis.withoutUnicodePtr); ", "-\t\t\tif (temp < cursorLocation && cursorLocation < currentPosition-1){", "+\t\t\tif (temp < this.cursorLocation && this.cursorLocation < this.currentPosition-1){", "-\t\t\t// store the current unicode, only if we did not pass the cursorLocation", "+\t\t\t// store the current unicode, only if we did not pass the cursor location", "-\t\t\tif ((completionIdentifier != null)", "-\t\t\t\t|| (startPosition <= cursorLocation+1 && cursorLocation >= currentPosition-1)){", "-\t\t\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;", "+\t\t\tif ((this.completionIdentifier != null)", "+\t\t\t\t|| (this.startPosition <= this.cursorLocation+1 && this.cursorLocation >= this.currentPosition-1)){", "+\t\t\t\tthis.withoutUnicodeBuffer[++this.withoutUnicodePtr] = this.currentCharacter;", "-\t\t\tif (!Character.isJavaIdentifierPart(currentCharacter)) {", "-\t\t\t\tcurrentPosition = temp;", "+\t\t\tif (!Character.isJavaIdentifierPart(this.currentCharacter)) {", "+\t\t\t\tthis.currentPosition = temp;", "-\t\t\tif (withoutUnicodePtr != 0){", "-\t\t\t\t// store the current unicode, only if we did not pass the cursorLocation", "+\t\t\tif (this.withoutUnicodePtr != 0){", "+\t\t\t\t// store the current unicode, only if we did not pass the cursor location", "-\t\t\t\tif ((completionIdentifier != null)", "-\t\t\t\t\t|| (startPosition <= cursorLocation+1 && cursorLocation >= currentPosition-1)){", "-\t\t\t\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;", "+\t\t\t\tif ((this.completionIdentifier != null)", "+\t\t\t\t\t|| (this.startPosition <= this.cursorLocation+1 && this.cursorLocation >= this.currentPosition-1)){", "+\t\t\t\t\tthis.withoutUnicodeBuffer[++this.withoutUnicodePtr] = this.currentCharacter;", "-\t\tcurrentPosition = temp;", "+\t\tthis.currentPosition = temp;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e821d375f91b5270ec09bcf97103d8cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java", "commitBeforeChange": "13b501923d975b39fcf9769686302cfbbf5a49d6", "commitAfterChange": "006d0d2bcd46f9eeb26a0d3ca2d5e66e5408265f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " public boolean getNextCharAsJavaIdentifierPart()", "signatureAfterChange": " public final void getNextUnicodeChar() throws InvalidInputException", "diff": ["- */", "-public boolean getNextCharAsJavaIdentifierPart() {", "-\tif (this.currentPosition >= this.source.length) // handle the obvious case upfront", "-\t\treturn false;", "-", "-\tint temp = this.currentPosition;", "-\ttry {", "-\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "-\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t//-------------unicode traitement ------------", "-\t\t\tint c1, c2, c3, c4;", "-\t\t\tint unicodeSize = 6;", "-\t\t\tthis.currentPosition++;", "-\t\t\twhile (this.source[this.currentPosition] == 'u') {", "-\t\t\t\tthis.currentPosition++;", "-\t\t\t\tunicodeSize++;", "-\t\t\t}", "-", "-\t\t\tif (((c1 = Character.getNumericValue(this.source[this.currentPosition++])) > 15", "-\t\t\t\t|| c1 < 0)", "-\t\t\t\t|| ((c2 = Character.getNumericValue(this.source[this.currentPosition++])) > 15 || c2 < 0)", "-\t\t\t\t|| ((c3 = Character.getNumericValue(this.source[this.currentPosition++])) > 15 || c3 < 0)", "-\t\t\t\t|| ((c4 = Character.getNumericValue(this.source[this.currentPosition++])) > 15 || c4 < 0)) {", "-\t\t\t\tthis.currentPosition = temp;", "-\t\t\t\treturn false;", "-\t\t\t}", "-", "-\t\t\tthis.currentCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "-\t\t\tif (!Character.isJavaIdentifierPart(this.currentCharacter)) {", "-\t\t\t\tthis.currentPosition = temp;", "-\t\t\t\treturn false;", "-\t\t\t}", "-", "-\t\t\t//need the unicode buffer", "-\t\t\tif (this.withoutUnicodePtr == 0) {", "-\t\t\t\t//buffer all the entries that have been left aside....", "-\t\t\t\tunicodeInitializeBuffer(this.currentPosition - unicodeSize - this.startPosition);", "-\t\t\t}", "-\t\t\tif (temp < this.cursorLocation && this.cursorLocation < this.currentPosition-1){", "-\t\t\t\tthrow new InvalidCursorLocation(InvalidCursorLocation.NO_COMPLETION_INSIDE_UNICODE);", "-\t\t\t}", "-\t\t\t// store the current unicode, only if we did not pass the cursor location", "-\t\t\t// Note: this does not handle cases where the cursor is in the middle of a unicode", "-\t\t\tif ((this.completionIdentifier != null)", "-\t\t\t\t|| (this.startPosition <= this.cursorLocation+1 && this.cursorLocation >= this.currentPosition-1)){", "-\t\t\t    unicodeStoreAt(++this.withoutUnicodePtr);", "-\t\t\t}", "-\t\t\treturn true;", "-\t\t} //-------------end unicode traitement--------------", "-\t\telse {", "-\t\t\tif (!Character.isJavaIdentifierPart(this.currentCharacter)) {", "-\t\t\t\tthis.currentPosition = temp;", "-\t\t\t\treturn false;", "-\t\t\t}", "-", "-\t\t\tif (this.withoutUnicodePtr != 0){", "-\t\t\t\t// store the current unicode, only if we did not pass the cursor location", "-\t\t\t\t// Note: this does not handle cases where the cursor is in the middle of a unicode", "-\t\t\t\tif ((this.completionIdentifier != null)", "-\t\t\t\t\t\t|| (this.startPosition <= this.cursorLocation+1 && this.cursorLocation >= this.currentPosition-1)){", "-\t\t\t\t    unicodeStoreAt(++this.withoutUnicodePtr);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn true;", "-\t\t}", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\tthis.currentPosition = temp;", "-\t\treturn false;", "-\t}", "-}", "+public final void getNextUnicodeChar() throws InvalidInputException {", "+\tint temp = this.currentPosition;", "+\tsuper.getNextUnicodeChar();", "+\tif (temp < this.cursorLocation && this.cursorLocation < this.currentPosition-1){", "+\t\tthrow new InvalidCursorLocation(InvalidCursorLocation.NO_COMPLETION_INSIDE_UNICODE);", "+\t}", "+}"]}], "num": 38825}
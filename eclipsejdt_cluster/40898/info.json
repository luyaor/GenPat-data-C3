{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7663e1f120ed8285edd66424b02d8fc5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "064fbcfb24712ac08d0df9e77f7bd7d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 29, "signatureBeforeChange": " protected void consumeExplicitConstructorInvocationWithTypeArguments(int flag, int recFlag)", "signatureAfterChange": " protected void consumeFieldDeclaration()", "diff": ["-}", "-protected void consumeExplicitConstructorInvocationWithTypeArguments(int flag, int recFlag) {", "-\tsuper.consumeExplicitConstructorInvocationWithTypeArguments(flag, recFlag);", "-\ttriggerRecoveryUponLambdaClosure();", "+}", "+protected void consumeFieldDeclaration() {", "+\tsuper.consumeFieldDeclaration();", "+\tif (triggerRecoveryUponLambdaClosure((Statement) this.astStack[this.astPtr], true)) {", "+\t\tif (this.currentElement instanceof RecoveredType)", "+\t\t\tpopUntilElement(K_TYPE_DELIMITER);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99ad751356883d887ef9dec0e4fce0f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 26, "signatureBeforeChange": " protected void consumeExpressionStatement()", "signatureAfterChange": " protected void consumeInvocationExpression()", "diff": ["+}", "+protected void consumeInvocationExpression() { // on error, a message send's error reductions will take the expression path rather than the statement path since that is a dead end.", "+\tsuper.consumeInvocationExpression();", "+\ttriggerRecoveryUponLambdaClosure(this.expressionStack[this.expressionPtr], false);", "+}", "-protected void consumeExpressionStatement() {", "-\tsuper.consumeExpressionStatement();", "-\ttriggerRecoveryUponLambdaClosure();"]}], "num": 40898}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af5a355b835feaed463f90dc7e60da1d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06c7e522b516c1c442b1cea8a76295ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": "\r public void test0072() throws IOException", "signatureAfterChange": "\r public void test0072() throws IOException", "diff": ["-\tassertEquals(\"Wrong location\", \"{0}\", locations.get(\"@I\"));\r", "-\tassertEquals(\"Wrong location\", \"{1}\", locations.get(\"@J\"));\r", "-\tassertEquals(\"Wrong location\", \"{2}\", locations.get(\"@A\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,0}\", locations.get(\"@B\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,1}\", locations.get(\"@C\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,1,0,2}\", locations.get(\"@H\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,1,0}\", locations.get(\"@E\"));\r", "-\tassertEquals(\"Wrong location\", \"{2,1,0,1}\", locations.get(\"@G\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY]\", locations.get(\"@I\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY]\", locations.get(\"@J\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY]\", locations.get(\"@A\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(0)]\", locations.get(\"@B\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1)]\", locations.get(\"@C\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1), TYPE_ARGUMENT(0), ARRAY, ARRAY, ARRAY]\", locations.get(\"@H\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1), TYPE_ARGUMENT(0)]\", locations.get(\"@E\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1), TYPE_ARGUMENT(0), ARRAY, ARRAY]\", locations.get(\"@G\"));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14ecf3398ef091b3b412dfc6f455bcc0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "8a281cea306104e13dc5d8e2e915592f13b4b03f", "commitAfterChange": "4f6e7772e1eab66068e8d31851a8e395b8beb754", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " public void test043()", "signatureAfterChange": " public void test043()", "diff": ["-\t\t\t\"\t                      ^^^^^^^^\\n\" + ", "+\t\t\t\"\t                      ^^^^^\\n\" + ", "-\t\t\t\"\t                      ^^^^^^^^\\n\" + ", "+\t\t\t\"\t                      ^^^^^\\n\" + ", "-\t\t\t\"\t                      ^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t                      ^^^^^^^\\n\" + ", "-\t\t\t\"\t                      ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t                      ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"\t                      ^^^^^^^^\\n\" + ", "+\t\t\t\"\t                      ^^^^^\\n\" + ", "-\t\t\t\"\t                      ^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t                      ^^^^^^^\\n\" + ", "-\t\t\t\"\t                      ^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t                      ^^^^^^^\\n\" + ", "-\t\t\t\"\t                      ^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t                      ^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1514edab4c637c6b482f73d14933b7bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \t \tpublic void test032()", "signatureAfterChange": " \t \tpublic void test032()", "diff": ["-\t\t\t\"     0  new java/lang/Integer [17]\\n\" + ", "+\t\t\t\"     0  new java.lang.Integer [17]\\n\" + ", "-\t\t\t\"     5  invokespecial java/lang/Integer.<init>(I)V [20]\\n\" + ", "-\t\t\t\"     8  new java/lang/Integer [17]\\n\" + ", "+\t\t\t\"     5  invokespecial java.lang.Integer(int) [20]\\n\" + ", "+\t\t\t\"     8  new java.lang.Integer [17]\\n\" + ", "-\t\t\t\"    13  invokespecial java/lang/Integer.<init>(I)V [20]\\n\" + ", "+\t\t\t\"    13  invokespecial java.lang.Integer(int) [20]\\n\" + ", "-\t\t\t\"    19  getstatic java/lang/System.out Ljava/io/PrintStream; [26]\\n\" + ", "-\t\t\t\"    22  invokevirtual java/io/PrintStream.println()V [31]\\n\" + ", "-\t\t\t\"    25  getstatic java/lang/System.out Ljava/io/PrintStream; [26]\\n\" + ", "+\t\t\t\"    19  getstatic java.lang.System.out : java.io.PrintStream [26]\\n\" + ", "+\t\t\t\"    22  invokevirtual java.io.PrintStream.println() : void  [31]\\n\" + ", "+\t\t\t\"    25  getstatic java.lang.System.out : java.io.PrintStream [26]\\n\" + ", "-\t\t\t\"    30  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [37]\\n\" + ", "+\t\t\t\"    30  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [37]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f5ceda599ab593adabfba6589649eaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 189, "methodNumberAfterChange": 189, "signatureBeforeChange": " \tpublic void test058a()", "signatureAfterChange": " \tpublic void test058a()", "diff": ["-\t\t\t\t\"Method foo(T) has the same erasure foo(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\"Erasure of method foo(T) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\"Method foo(A) has the same erasure foo(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\"Method foo2(T) has the same erasure foo2(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\"Erasure of method foo2(T) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\"Method foo2(A) has the same erasure foo2(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\"Erasure of method foo2(A) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\t\"Method foo(T) has the same erasure foo(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(T) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\t\"Method foo(A) has the same erasure foo(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\t\"Method foo2(T) has the same erasure foo2(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo2(T) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\t\"Method foo2(A) has the same erasure foo2(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo2(A) is the same as another method in type X<A>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f706b47cc0ad1c03780658c0c78311d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 184, "methodNumberAfterChange": 184, "signatureBeforeChange": " \tpublic void test054d()", "signatureAfterChange": " \tpublic void test054d()", "diff": ["-\t\t\t\t\"Method a(A<T>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method a(A<T>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method a(A<Object>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method a(A<Object>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method aa(A<T>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method aa(A<T>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method aa(A<Object>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method aa(A<Object>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method a(A<T>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method a(A<T>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method a(A<Object>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method a(A<Object>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method aa(A<T>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method aa(A<T>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method aa(A<Object>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method aa(A<Object>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fbc4fd885468fa0f9c809957e2744be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 163, "methodNumberAfterChange": 163, "signatureBeforeChange": " \tpublic void test050c()", "signatureAfterChange": " \tpublic void test050c()", "diff": ["-\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Y>) is the same as another method in type X.C5\\n\" +", "-\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Z>) is the same as another method in type X.C5\\n\" +", "-\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Y>) is the same as another method in type X.C6\\n\" +", "-\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Z>) is the same as another method in type X.C6\\n\" +", "-\t\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Y>) is the same as another method in type X.C5\\n\" +", "-\t\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Z>) is the same as another method in type X.C5\\n\" +", "-\t\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Y>) is the same as another method in type X.C6\\n\" +", "-\t\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Z>) is the same as another method in type X.C6\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "256970d8e24d6728afec16fd7c23ee43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "166df64b1dde30fc61b2e4fda13d5a0d769a3aef", "commitAfterChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "methodNumberBeforeChange": 1231, "methodNumberAfterChange": 1231, "signatureBeforeChange": " public void test1200()", "signatureAfterChange": " public void test1200()", "diff": ["-\t\t\"1. ERROR in X.java (at line 12)\\r\\n\" +", "-\t\t\"\treturn make(type, value);//1\\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 12)\\n\" +", "+\t\t\"\treturn make(type, value);//1\\n\" +", "-\t\t\"2. ERROR in X.java (at line 17)\\r\\n\" +", "-\t\t\"\treturn (Map<Class<?>, X>) make(type, value);//2\\r\\n\" +", "+\t\t\"2. ERROR in X.java (at line 17)\\n\" +", "+\t\t\"\treturn (Map<Class<?>, X>) make(type, value);//2\\n\" +", "-\t\t\"3. ERROR in X.java (at line 21)\\r\\n\" +", "-\t\t\"\treturn make(X.class, value);//3\\r\\n\" +", "+\t\t\"3. ERROR in X.java (at line 21)\\n\" +", "+\t\t\"\treturn make(X.class, value);//3\\n\" +", "-\t\t\"4. ERROR in X.java (at line 25)\\r\\n\" +", "-\t\t\"\treturn (Map<Class<?>, X>) make(X.class, value);//4\\r\\n\" +", "+\t\t\"4. ERROR in X.java (at line 25)\\n\" +", "+\t\t\"\treturn (Map<Class<?>, X>) make(X.class, value);//4\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31c219971bf1cce9d2a7d8787189e297", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InnerEmulationTest.java", "commitBeforeChange": "232201d6380e7830296a82a7b3422a333db36b2e", "commitAfterChange": "378f419edc5509790bbfa3083244109f6abafbe2", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": " public void test135()", "signatureAfterChange": " public void test135()", "diff": ["-\t\t\"\t^^^^\\n\" +", "+\t\t\"\t  ^^\\n\" +", "-\t\t\"\t^^^^^^^^\\n\" +", "+\t\t\"\t     ^^^\\n\" +", "-\t\t\"\t                ^^^^\\n\" +", "+\t\t\"\t                  ^^\\n\" +", "-\t\t\"\t                ^^^^^^^^\\n\" +", "+\t\t\"\t                     ^^^\\n\" +", "-\t\t\"\t^^^^\\n\" +", "+\t\t\"\t  ^^\\n\" +", "-\t\t\"\t^^^^^^^^\\n\" +", "+\t\t\"\t     ^^^\\n\" +", "-\t\t\"\t                   ^^^^\\n\" +", "+\t\t\"\t                     ^^\\n\" +", "-\t\t\"\t                   ^^^^^^^^\\n\" +", "+\t\t\"\t                        ^^^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "337e83c142df4a838d0b22bafea1ad03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 88, "signatureBeforeChange": " \tpublic void testBug103304f()", "signatureAfterChange": " \tpublic void testBug103304f()", "diff": ["-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33be603c8ff2b4322bc97be272f87607", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 183, "methodNumberAfterChange": 183, "signatureBeforeChange": " \tpublic void test054d()", "signatureAfterChange": " \tpublic void test054d()", "diff": ["-\t\t\t\t\"Method a(A<T>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method a(A<T>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method a(A<Object>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method a(A<Object>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method aa(A<T>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method aa(A<T>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method aa(A<Object>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method aa(A<Object>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method a(A<T>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method a(A<T>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method a(A<Object>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method a(A<Object>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method aa(A<T>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method aa(A<T>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method aa(A<Object>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method aa(A<Object>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34a09e71bceca65434800113ba755703", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "08c5b9004bde27fb4063ce300ce881966676fe74", "commitAfterChange": "28d58bf6eb942015446b8ffce8f446f86e9686d9", "methodNumberBeforeChange": 196, "methodNumberAfterChange": 196, "signatureBeforeChange": " public void test406614()", "signatureAfterChange": " public void test406614()", "diff": ["-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The constructor X(() -> this.f) is undefined\\n\" + ", "+\t\t\t\"\t           ^^^^\\n\" + ", "+\t\t\t\"Cannot refer to \\'this\\' nor \\'super\\' while explicitly invoking a constructor\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The constructor X(() -> this.g()) is undefined\\n\" + ", "+\t\t\t\"\t           ^^^^\\n\" + ", "+\t\t\t\"Cannot refer to \\'this\\' nor \\'super\\' while explicitly invoking a constructor\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The constructor X(() -> f) is undefined\\n\" + ", "+\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\"Cannot refer to an instance field f while explicitly invoking a constructor\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The constructor X(() -> g()) is undefined\\n\" + ", "+\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\"Cannot refer to an instance method while explicitly invoking a constructor\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d46db151034a3ffb5f3018b29aa745d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 580, "methodNumberAfterChange": 580, "signatureBeforeChange": " \tpublic void test0561()", "signatureAfterChange": " \tpublic void test0561()", "diff": ["-\t\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Integer>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Integer>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Integer>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Integer>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "491565146a506f478b53479b49ab56c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tpublic void test14() throws JavaModelException", "signatureAfterChange": "  \tpublic void test14() throws JavaModelException", "diff": ["-\t\t\t\"Field {key=LTest~Field;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest~Field;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest~Field;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest~Field;.foo} [in Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\",", "+\t\t\t\"Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "572a2e9a4db566f398b626c0cce66569", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": " public void testTypeRefGenericAllG1_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAllG1_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [\tpublic Generic<\ufffd|Object|\ufffd>.MemberGeneric<Object> gen_obj;@393] EXACT_MATCH\\n\" +", "-\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [\tpublic Generic<Object>.MemberGeneric<\ufffd|Object|\ufffd> gen_obj;@415] EXACT_MATCH\\n\" +", "-\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [\tpublic Generic<\ufffd|Exception|\ufffd>.MemberGeneric<Exception> gen_exc;@448] EXACT_MATCH\\n\" +", "-\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [\tpublic Generic<Exception>.MemberGeneric<\ufffd|Exception|\ufffd> gen_exc;@473] EXACT_MATCH\\n\" +", "-\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [\tpublic g1.t.s.def.Generic<\ufffd|Object|\ufffd>.MemberGeneric<Object> qgen_obj;@803] EXACT_MATCH\\n\" +", "-\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [\tpublic g1.t.s.def.Generic<Object>.MemberGeneric<\ufffd|Object|\ufffd> qgen_obj;@825] EXACT_MATCH\\n\" +", "-\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [\tpublic g1.t.s.def.Generic<\ufffd|Exception|\ufffd>.MemberGeneric<Exception> qgen_exc;@870] EXACT_MATCH\\n\" +", "-\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [\tpublic g1.t.s.def.Generic<Exception>.MemberGeneric<\ufffd|Exception|\ufffd> qgen_exc;@895] EXACT_MATCH\"", "+\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [\tpublic Generic<!|Object|!>.MemberGeneric<Object> gen_obj;@393] EXACT_MATCH\\n\" +", "+\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [\tpublic Generic<Object>.MemberGeneric<!|Object|!> gen_obj;@415] EXACT_MATCH\\n\" +", "+\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [\tpublic Generic<!|Exception|!>.MemberGeneric<Exception> gen_exc;@448] EXACT_MATCH\\n\" +", "+\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [\tpublic Generic<Exception>.MemberGeneric<!|Exception|!> gen_exc;@473] EXACT_MATCH\\n\" +", "+\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [\tpublic g1.t.s.def.Generic<!|Object|!>.MemberGeneric<Object> qgen_obj;@803] EXACT_MATCH\\n\" +", "+\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [\tpublic g1.t.s.def.Generic<Object>.MemberGeneric<!|Object|!> qgen_obj;@825] EXACT_MATCH\\n\" +", "+\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [\tpublic g1.t.s.def.Generic<!|Exception|!>.MemberGeneric<Exception> qgen_exc;@870] EXACT_MATCH\\n\" +", "+\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [\tpublic g1.t.s.def.Generic<Exception>.MemberGeneric<!|Exception|!> qgen_exc;@895] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5873477a65c5b5e65218f5236c495523", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "a746953c3c39228e621101bf14cd960b61f268e5", "commitAfterChange": "8d9e4d82b7907a3f11b58a9fee1e77dc3999b852", "methodNumberBeforeChange": 288, "methodNumberAfterChange": 292, "signatureBeforeChange": " private void setUpBug110060_ConstructorPattern() throws CoreException", "signatureAfterChange": " private void setUpBug110060_ConstructorPattern() throws CoreException", "diff": ["-\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b110060/AA.java\",", "+\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b110060/AAAA.java\",", "-\t\t\"public class AA {\\n\" +", "-\t\t\"\tAA() {}\\n\" +", "+\t\t\"public class AAAA {\\n\" +", "+\t\t\"\tAAAA() {}\\n\" +", "-\tworkingCopies[3] = getWorkingCopy(\"/JavaSearchBugs/src/b110060/AxA.java\",", "+\tworkingCopies[3] = getWorkingCopy(\"/JavaSearchBugs/src/b110060/AxAyAz.java\",", "-\t\t\"public class AxA {\\n\" +", "-\t\t\"\tAxA() {}\\n\" +", "+\t\t\"public class AxAyAz {\\n\" +", "+\t\t\"\tAxAyAz() {}\\n\" +", "-\t\t\"\tAA aa = new AA();\\n\" +", "+\t\t\"\tAAAA aaaa = new AAAA();\\n\" +", "-\t\t\"\tAxA axa = new AxA();\\n\" +", "+\t\t\"\tAxAyAz axayaz = new AxAyAz();\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58e7073f48c9b60942a96a67f68979b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void testParameterizedTypeMultipleArguments03() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeMultipleArguments03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [NonGeneric.GenericMember<Object, Exception, RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [NonGeneric.GenericMember<Exception, Exception, RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [NonGeneric.GenericMember<?, ?, ?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [NonGeneric.GenericMember<Object, Exception, RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [NonGeneric.GenericMember<Exception, Exception, RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [NonGeneric.GenericMember<?, ?, ?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [g1.t.m.def.NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [g1.t.m.def.NonGeneric.GenericMember<Object, Exception, RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [g1.t.m.def.NonGeneric.GenericMember<Exception, Exception, RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [g1.t.m.def.NonGeneric.GenericMember<?, ?, ?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [g1.t.m.def.NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [g1.t.m.def.NonGeneric.GenericMember<Object, Exception, RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [g1.t.m.def.NonGeneric.GenericMember<Exception, Exception, RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [g1.t.m.def.NonGeneric.GenericMember<?, ?, ?>] EQUIVALENT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a77d2d15d8d19568ed9596d40b06dd6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 90, "signatureBeforeChange": "  \tpublic void test125()", "signatureAfterChange": "  \tpublic void test125()", "diff": ["-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b12edf179f3ac5508ddf422312d549e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public void test033()", "signatureAfterChange": " public void test033()", "diff": ["-\t\t\"Unnecessary cast to type List for expression of type ArrayList\\n\" + ", "+\t\t\"Unnecessary cast from ArrayList to List\\n\" + ", "-\t\t\"Unnecessary cast to type List for expression of type ArrayList\\n\" + ", "+\t\t\"Unnecessary cast from ArrayList to List\\n\" + ", "-\t\t\"Unnecessary cast to type String for expression of type String\\n\" + ", "+\t\t\"Unnecessary cast from String to String\\n\" + ", "-\t\t\"Unnecessary cast to type List for expression of type ArrayList\\n\" + ", "+\t\t\"Unnecessary cast from ArrayList to List\\n\" + ", "-\t\t\"Unnecessary cast to type List for expression of type ArrayList\\n\" + ", "+\t\t\"Unnecessary cast from ArrayList to List\\n\" + ", "-\t\t\"Unnecessary cast to type List for expression of type ArrayList\\n\" + ", "+\t\t\"Unnecessary cast from ArrayList to List\\n\" + ", "-\t\t\"Unnecessary cast to type String for expression of type String\\n\" + ", "+\t\t\"Unnecessary cast from String to String\\n\" + ", "-\t\t\"Unnecessary cast to type List for expression of type ArrayList\\n\" + ", "+\t\t\"Unnecessary cast from ArrayList to List\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73ba241fcae96973d76f8351cbe4801b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaRegressionTest.java", "commitBeforeChange": "61a3328acf71aecf2ed394549a809b489d124796", "commitAfterChange": "93064d94293a0408d3fca5808908fb56902798a3", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testBug457007()", "signatureAfterChange": " public void testBug457007()", "diff": ["-\t\t\"public class Test  {\\n\" +", "-\t\t\t\"void method() {\\n\" +", "-\t\t\t\"  class Bar {}\\n\" +", "-\t\t\t\"  java.util.function.Function<String, Bar> f = str -> new Bar();\\n\" +", "-\t\t\t\"}\\n\" +", "-\t\t\t\"public static void main(String[] args) {\\n\" +", "-\t\t\t\"  System.out.println(\\\"done\\\");\\n\" +", "-\t\t\t\"}\\n\" +", "+\t\t\"public class Test {\\n\" +", "+\t\t\"\tvoid method() {\\n\" +", "+\t\t\"  \t\tclass Bar {}\\n\" +", "+\t\t\"  \t\tjava.util.function.Function<String, Bar> f = str -> new Bar();\\n\" +", "+\t\t\"\t}\\n\" +", "+\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\"\t\tSystem.out.println(\\\"done\\\");\\n\" +", "+\t\t\"\t}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76aa206994900f06a2fa1a78ad0d5e63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 88, "signatureBeforeChange": " \tpublic void testBug103304f()", "signatureAfterChange": " \tpublic void testBug103304f()", "diff": ["-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80def02d0beac3756b131474492c9ca9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeSingleArgument01() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeSingleArgument01() throws CoreException", "diff": ["-\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionList [g6.t.def.List] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionListArray [g6.t.def.List] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionListArrayList [g6.t.def.List] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionListArrayList [g6.t.def.List] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionList [g6.t.def.List] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionListArray [g6.t.def.List] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionListArrayList [g6.t.def.List] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionListArrayList [g6.t.def.List] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionList [List] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionListArray [List] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionListArrayList [List] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionListArrayList [List] COMPATIBLE_ERASURE_MATCH\",", "+\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionList [List] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionListArray [List] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionListArrayList [List] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionListArrayList [List] EQUIVALENT_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "826697e4d93daaeeda32f847b7b1cb25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void testMethodReferencesStringPatternSingleParamArguments03() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesStringPatternSingleParamArguments03() throws CoreException", "diff": ["-\t\tsearch(\"*e?e* % <? super Exception>\", METHOD, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"<? super Exception>*e?e*\", METHOD, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testSingle() [generic(new Exception())] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testSingle() [complete(new Exception(), gs)] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testObject() [generic(new Object())] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testObject() [complete(new Object(), gs)] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [generic(new Exception())] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [complete(new Exception(), gs)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testSingle() [generic(new Exception())] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testSingle() [complete(new Exception(), gs)] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testObject() [<Object>generic(new Object())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testObject() [<Object>complete(new Object(), gs)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [<Exception>generic(new Exception())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [<Exception>complete(new Exception(), gs)] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testExtends() [complete(new Throwable(), gs)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testExtends() [<Throwable>complete(new Throwable(), gs)] EQUIVALENT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c7df7b7aada1a9a64e322a59b3dd8a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": " public void testTypeRefGenericAllG1_WildcardBounds() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAllG1_WildcardBounds() throws CoreException", "diff": ["-\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [\tpublic Generic<? extends \ufffd|Throwable|\ufffd>.MemberGeneric<? super RuntimeException> gen_thr;@564] EXACT_MATCH\\n\" +", "-\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [\tpublic Generic<? extends Throwable>.MemberGeneric<? super \ufffd|RuntimeException|\ufffd> gen_thr;@597] EXACT_MATCH\\n\" +", "-\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [\tpublic Generic<? super \ufffd|RuntimeException|\ufffd>.MemberGeneric<? extends Throwable> gen_run;@648] EXACT_MATCH\\n\" +", "-\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [\tpublic Generic<? super RuntimeException>.MemberGeneric<? extends \ufffd|Throwable|\ufffd> gen_run;@690] EXACT_MATCH\\n\" +", "-\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [\tpublic g1.t.s.def.Generic<? extends \ufffd|Throwable|\ufffd>.MemberGeneric<? super RuntimeException> qgen_thr;@1010] EXACT_MATCH\\n\" +", "-\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [\tpublic g1.t.s.def.Generic<? extends Throwable>.MemberGeneric<? super \ufffd|RuntimeException|\ufffd> qgen_thr;@1043] EXACT_MATCH\\n\" +", "-\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [\tpublic g1.t.s.def.Generic<? super \ufffd|RuntimeException|\ufffd>.MemberGeneric<? extends Throwable> qgen_run;@1106] EXACT_MATCH\\n\" +", "-\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [\tpublic g1.t.s.def.Generic<? super RuntimeException>.MemberGeneric<? extends \ufffd|Throwable|\ufffd> qgen_run;@1148] EXACT_MATCH\"", "+\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [\tpublic Generic<? extends !|Throwable|!>.MemberGeneric<? super RuntimeException> gen_thr;@564] EXACT_MATCH\\n\" +", "+\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [\tpublic Generic<? extends Throwable>.MemberGeneric<? super !|RuntimeException|!> gen_thr;@597] EXACT_MATCH\\n\" +", "+\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [\tpublic Generic<? super !|RuntimeException|!>.MemberGeneric<? extends Throwable> gen_run;@648] EXACT_MATCH\\n\" +", "+\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [\tpublic Generic<? super RuntimeException>.MemberGeneric<? extends !|Throwable|!> gen_run;@690] EXACT_MATCH\\n\" +", "+\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [\tpublic g1.t.s.def.Generic<? extends !|Throwable|!>.MemberGeneric<? super RuntimeException> qgen_thr;@1010] EXACT_MATCH\\n\" +", "+\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [\tpublic g1.t.s.def.Generic<? extends Throwable>.MemberGeneric<? super !|RuntimeException|!> qgen_thr;@1043] EXACT_MATCH\\n\" +", "+\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [\tpublic g1.t.s.def.Generic<? super !|RuntimeException|!>.MemberGeneric<? extends Throwable> qgen_run;@1106] EXACT_MATCH\\n\" +", "+\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [\tpublic g1.t.s.def.Generic<? super RuntimeException>.MemberGeneric<? extends !|Throwable|!> qgen_run;@1148] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e254813a5110b16fb49dc0519289fea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 190, "methodNumberAfterChange": 190, "signatureBeforeChange": " \tpublic void test058a()", "signatureAfterChange": " \tpublic void test058a()", "diff": ["-\t\t\t\t\"Method foo(T) has the same erasure foo(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\"Erasure of method foo(T) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\"Method foo(A) has the same erasure foo(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\"Method foo2(T) has the same erasure foo2(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\"Erasure of method foo2(T) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\"Method foo2(A) has the same erasure foo2(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\"Erasure of method foo2(A) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\t\"Method foo(T) has the same erasure foo(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(T) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\t\"Method foo(A) has the same erasure foo(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\t\"Method foo2(T) has the same erasure foo2(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo2(T) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\t\"Method foo2(A) has the same erasure foo2(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo2(A) is the same as another method in type X<A>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9277773995d1c761c25d46bd87351489", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 172, "methodNumberAfterChange": 172, "signatureBeforeChange": " \tpublic void test050l()", "signatureAfterChange": " \tpublic void test050l()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" +", "-\t\t\t\"\tvoid a(A<Number> s) {}\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "+\t\t\t\"\tvoid a(A<Number> s) {}\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tB a(A<Number> n) { return null; }\\r\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"\tB a(A<Number> n) { return null; }\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 4)\\r\\n\" +", "-\t\t\t\"\tObject b(A<Number> s) {}\\r\\n\" +", "+\t\t\t\"3. ERROR in X.java (at line 4)\\n\" +", "+\t\t\t\"\tObject b(A<Number> s) {}\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 5)\\r\\n\" +", "-\t\t\t\"\tB b(A<Number> n) { return null; }\\r\\n\" +", "+\t\t\t\"4. ERROR in X.java (at line 5)\\n\" +", "+\t\t\t\"\tB b(A<Number> n) { return null; }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93d2a52683ef9e835f966142671ba361", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "commitAfterChange": "c3fe3a5d67fbf0c540d6fc63f233f6806516af9c", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic void test025()", "signatureAfterChange": "  \tpublic void test025()", "diff": ["-\t\t\t\t\"\tInteger test() { return 1; }\\n\" + ", "+\t\t\t\t\"\t@Override Integer test() { return 1; }\\n\" + ", "-\t\t\t\"\tInteger test() { return 1; }\\n\" + ", "-\t\t\t\"\t^^^^^^^\\n\" + ", "+\t\t\t\"\t@Override Integer test() { return 1; }\\n\" + ", "+\t\t\t\"\t          ^^^^^^^\\n\" + ", "-\t\t\t\t\"\tInteger[] test() { return new Integer[] {2}; }\\n\" + ", "+\t\t\t\t\"\t@Override Integer[] test() { return new Integer[] {2}; }\\n\" + ", "-\t\t\t\"\tInteger[] test() { return new Integer[] {2}; }\\n\" + ", "-\t\t\t\"\t^^^^^^^^^\\n\" + ", "+\t\t\t\"\t@Override Integer[] test() { return new Integer[] {2}; }\\n\" + ", "+\t\t\t\"\t          ^^^^^^^^^\\n\" + ", "-\t\t\t\t\"\t<T> T test(T t) { return t; }\\n\" + ", "+\t\t\t\t\"\t@Override <T> T test(T t) { return t; }\\n\" + ", "-\t\t\t\t\"\t<U> Integer test(U u) { return 1; }\\n\" + ", "+\t\t\t\t\"\t@Override <U> Integer test(U u) { return 1; }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d4effee692a226d7cb5adb00b134107", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 90, "signatureBeforeChange": " \tpublic void testBug103304f()", "signatureAfterChange": " \tpublic void testBug103304f()", "diff": ["-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a06ac331d2f766dd2da40d4fb9519127", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 407, "methodNumberAfterChange": 407, "signatureBeforeChange": " public void testBug317719g() throws Exception", "signatureAfterChange": " public void testBug317719g() throws Exception", "diff": ["-\t\t\t\"Method doIt(Collection<int[]>) has the same erasure doIt(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\"Erasure of method doIt(Collection<int[]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\"Method doIt(Collection<int[][]>) has the same erasure doIt(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\"Erasure of method doIt(Collection<int[][]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\"Method doIt2(Collection<int[]>) has the same erasure doIt2(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\"Erasure of method doIt2(Collection<int[]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\"Method doIt2(Collection<int[][]>) has the same erasure doIt2(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\"Erasure of method doIt2(Collection<int[][]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\t\"Method doIt(Collection<int[]>) has the same erasure doIt(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\t\"Erasure of method doIt(Collection<int[]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\t\"Method doIt(Collection<int[][]>) has the same erasure doIt(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\t\"Erasure of method doIt(Collection<int[][]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\t\"Method doIt2(Collection<int[]>) has the same erasure doIt2(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\t\"Erasure of method doIt2(Collection<int[]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\t\"Method doIt2(Collection<int[][]>) has the same erasure doIt2(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\t\"Erasure of method doIt2(Collection<int[][]>) is the same as another method in type X<Z>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a215a62c5df0be6eef29cac08ef2d206", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "166df64b1dde30fc61b2e4fda13d5a0d769a3aef", "commitAfterChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "methodNumberBeforeChange": 1329, "methodNumberAfterChange": 1329, "signatureBeforeChange": " public void test1295()", "signatureAfterChange": " public void test1295()", "diff": ["-\t\t\t\"1. WARNING in X.java (at line 7)\\r\\n\" +", "-\t\t\t\"\tjava.util.List<Counter<?>> list1 = java.util.Arrays.asList(songCounter, genreCounter);\\r\\n\" +", "+\t\t\t\"1. WARNING in X.java (at line 7)\\n\" +", "+\t\t\t\"\tjava.util.List<Counter<?>> list1 = java.util.Arrays.asList(songCounter, genreCounter);\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 8)\\r\\n\" +", "-\t\t\t\"\tjava.util.List<Counter<? extends Object>> list2 = java.util.Arrays.asList(songCounter, genreCounter);\\r\\n\" +", "+\t\t\t\"2. WARNING in X.java (at line 8)\\n\" +", "+\t\t\t\"\tjava.util.List<Counter<? extends Object>> list2 = java.util.Arrays.asList(songCounter, genreCounter);\\n\" +", "-\t\t\t\"3. WARNING in X.java (at line 11)\\r\\n\" +", "-\t\t\t\"\tjava.util.List<Counter<? extends String>> list5 = java.util.Arrays.asList(songCounter, genreCounter);\\r\\n\" +", "+\t\t\t\"3. WARNING in X.java (at line 11)\\n\" +", "+\t\t\t\"\tjava.util.List<Counter<? extends String>> list5 = java.util.Arrays.asList(songCounter, genreCounter);\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 11)\\r\\n\" +", "-\t\t\t\"\tjava.util.List<Counter<? extends String>> list5 = java.util.Arrays.asList(songCounter, genreCounter);\\r\\n\" +", "+\t\t\t\"4. ERROR in X.java (at line 11)\\n\" +", "+\t\t\t\"\tjava.util.List<Counter<? extends String>> list5 = java.util.Arrays.asList(songCounter, genreCounter);\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a34870529400c172959044df244740f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "4ce47574d95f211bec6cf02737b4ec30e386f5b1", "commitAfterChange": "6c173db4ca33e9b5b355fdac19466f82485aafe6", "methodNumberBeforeChange": 294, "methodNumberAfterChange": 294, "signatureBeforeChange": " \tpublic void test0293() throws JavaModelException", "signatureAfterChange": " \tpublic void test0293() throws JavaModelException", "diff": ["-\t\t\t\t\"{\\r\\n\" +", "-\t\t\t\t\"\t\t\tpublic void run() {\\r\\n\" +", "-\t\t\t\t\"\t\t\t\t/*]*/foo();/*[*/\\r\\n\" +", "-\t\t\t\t\"\t\t\t}\\r\\n\" +", "+\t\t\t\t\"{\\n\" +", "+\t\t\t\t\"\t\t\tpublic void run() {\\n\" +", "+\t\t\t\t\"\t\t\t\t/*]*/foo();/*[*/\\n\" +", "+\t\t\t\t\"\t\t\t}\\n\" +", "-\t\t\t\t\"run= new Runnable() {\\r\\n\" +", "-\t\t\t\t\"\t\t\tpublic void run() {\\r\\n\" +", "-\t\t\t\t\"\t\t\t\t/*]*/foo();/*[*/\\r\\n\" +", "-\t\t\t\t\"\t\t\t}\\r\\n\" +", "+\t\t\t\t\"run= new Runnable() {\\n\" +", "+\t\t\t\t\"\t\t\tpublic void run() {\\n\" +", "+\t\t\t\t\"\t\t\t\t/*]*/foo();/*[*/\\n\" +", "+\t\t\t\t\"\t\t\t}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab1cc0d06e10a5b05a72c0e2481db746", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AnnotationValueConversionTests.java", "commitBeforeChange": "7109b1b8695adc90efc89b381fbef11f66adc5d7", "commitAfterChange": "737754e9e10e391c87e1274f991c2e257be4069b", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \t \t@SuppressWarnings(\"nls\") \tpublic void testMissingPrimitiveTypeValues_Reflection() throws Exception", "signatureAfterChange": " \t \t@SuppressWarnings(\"nls\") \tpublic void testMissingPrimitiveTypeValues_Reflection() throws Exception", "diff": ["-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber z expected true but got false\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber s expected 49 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber i expected 49 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber c expected 1 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber b expected 49 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber l expected 49 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber f expected 49.0 but got 0.0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber d expected 49.0 but got 0.0\", testPath)", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member z expected true but got false\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member s expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member i expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member c expected 1 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member b expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member l expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member f expected 49.0 but got 0.0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member d expected 49.0 but got 0.0\", testPath)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af500268708124126ef5ce8a71715bf3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 217, "methodNumberAfterChange": 217, "signatureBeforeChange": " \tpublic void test215()", "signatureAfterChange": " \tpublic void test215()", "diff": ["-\t\t\t\"     0  aload_0\\n\" + ", "+\t\t\t\"     0  aload_0 [args]\\n\" + ", "-\t\t\t\"     5  astore_1\\n\" + ", "+\t\t\t\"     5  astore_1 [i]\\n\" + ", "-\t\t\t\"    10  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    13  aload_1\\n\" + ", "-\t\t\t\"    14  invokevirtual #27 <Method java/io/PrintStream.println(Ljava/lang/Object;)V>\\n\" + ", "-\t\t\t\"    17  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    20  ldc #29 <String \\\"SUCCESS\\\">\\n\" + ", "-\t\t\t\"    22  invokevirtual #32 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + ", "+\t\t\t\"    10  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    13  aload_1 [i]\\n\" + ", "+\t\t\t\"    14  invokevirtual java/io/PrintStream.println(Ljava/lang/Object;)V [27]\\n\" + ", "+\t\t\t\"    17  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    20  ldc <String \\\"SUCCESS\\\"> [29]\\n\" + ", "+\t\t\t\"    22  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [32]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b56543d993f61f3327c6d92a773364ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void testParameterizedTypeSingleArgument03() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeSingleArgument03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [NonGeneric.GenericMember<?>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [NonGeneric.GenericMember<? extends Throwable>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [NonGeneric.GenericMember<? super RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [g1.t.s.def.NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [NonGeneric.GenericMember<?>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [NonGeneric.GenericMember<? extends Throwable>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [NonGeneric.GenericMember<? super RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [g1.t.s.def.NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [g1.t.s.def.NonGeneric.GenericMember<?>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [g1.t.s.def.NonGeneric.GenericMember<? extends Throwable>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [g1.t.s.def.NonGeneric.GenericMember<? super RuntimeException>] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [g1.t.s.def.NonGeneric.GenericMember<?>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [g1.t.s.def.NonGeneric.GenericMember<? extends Throwable>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [g1.t.s.def.NonGeneric.GenericMember<? super RuntimeException>] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7ffe2e5d3f255cc845f98b9d43c4145", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " public void testTypeRefGenericsTest10_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericsTest10_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/test10/Test.java test10.Test.y1 [\tY<\ufffd|Y|\ufffd<? extends Exception>> y1;@39] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.y2 [\tY<\ufffd|X|\ufffd<? extends Object, ? super String, ? extends Exception>> y2;@70] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x1 [\tX<\ufffd|Y|\ufffd<? super Object>, Y<? extends String>, Y<? super Exception>> x1;@135] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x1 [\tX<Y<? super Object>, \ufffd|Y|\ufffd<? extends String>, Y<? super Exception>> x1;@154] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x1 [\tX<Y<? super Object>, Y<? extends String>, \ufffd|Y|\ufffd<? super Exception>> x1;@175] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x2 [\tX<\ufffd|X|\ufffd<? extends Object, ? extends Object, ? extends Object>, X<? super String, ? super String, ? super String>, X<? extends Exception, ? super Exception, ? extends Exception>> x2;@204] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends Object>, \ufffd|X|\ufffd<? super String, ? super String, ? super String>, X<? extends Exception, ? super Exception, ? extends Exception>> x2;@261] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends Object>, X<? super String, ? super String, ? super String>, \ufffd|X|\ufffd<? extends Exception, ? super Exception, ? extends Exception>> x2;@312] EXACT_MATCH\"", "+\t\t\"src/test10/Test.java test10.Test.y1 [\tY<!|Y|!<? extends Exception>> y1;@39] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.y2 [\tY<!|X|!<? extends Object, ? super String, ? extends Exception>> y2;@70] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x1 [\tX<!|Y|!<? super Object>, Y<? extends String>, Y<? super Exception>> x1;@135] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x1 [\tX<Y<? super Object>, !|Y|!<? extends String>, Y<? super Exception>> x1;@154] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x1 [\tX<Y<? super Object>, Y<? extends String>, !|Y|!<? super Exception>> x1;@175] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x2 [\tX<!|X|!<? extends Object, ? extends Object, ? extends Object>, X<? super String, ? super String, ? super String>, X<? extends Exception, ? super Exception, ? extends Exception>> x2;@204] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends Object>, !|X|!<? super String, ? super String, ? super String>, X<? extends Exception, ? super Exception, ? extends Exception>> x2;@261] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends Object>, X<? super String, ? super String, ? super String>, !|X|!<? extends Exception, ? super Exception, ? extends Exception>> x2;@312] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc856fc782e8f6e94de13697fe16b651", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void test019()", "signatureAfterChange": " \tpublic void test019()", "diff": ["-\t\t\t\"     1  istore_1\\n\" + ", "+\t\t\t\"     1  istore_1 [b]\\n\" + ", "-\t\t\t\"     4  istore_2\\n\" + ", "-\t\t\t\"     5  iload_2\\n\" + ", "+\t\t\t\"     4  istore_2 [i]\\n\" + ", "+\t\t\t\"     5  iload_2 [i]\\n\" + ", "-\t\t\t\"    10  iload_1\\n\" + ", "+\t\t\t\"    10  iload_1 [b]\\n\" + ", "-\t\t\t\"    17  iload_1\\n\" + ", "+\t\t\t\"    17  iload_1 [b]\\n\" + ", "-\t\t\t\"    21  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    24  iload_2\\n\" + ", "-\t\t\t\"    25  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"    21  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    24  iload_2 [i]\\n\" + ", "+\t\t\t\"    25  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd4f5942a5e20645ba5f4fd416f8055e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d16d71303cc38b4ca3466d0f95ab4eeb4eced38a", "commitAfterChange": "04423947d8d7bb07b422b48e36dce13f3a6590fc", "methodNumberBeforeChange": 1095, "methodNumberAfterChange": 1095, "signatureBeforeChange": " public void test1066() throws Exception", "signatureAfterChange": " public void test1066() throws Exception", "diff": ["-\t\t\t\t\"        [pc: 79, line: 12]\\n\" +", "+\t\t\t\t\"        [pc: 76, line: 12]\\n\" +", "-\t\t\t\t\"        [pc: 158, line: 17]\\n\" +", "+\t\t\t\t\"        [pc: 155, line: 17]\\n\" +", "-\t\t\t\t\"        [pc: 240, line: 22]\\n\" +", "+\t\t\t\t\"        [pc: 237, line: 22]\\n\" +", "-\t\t\t\t\"        [pc: 322, line: 27]\\n\" +", "+\t\t\t\t\"        [pc: 319, line: 27]\\n\" +", "-\t\t\t\t\"        [pc: 79, line: 12]\\n\" +", "+\t\t\t\t\"        [pc: 76, line: 12]\\n\" +", "-\t\t\t\t\"        [pc: 158, line: 17]\\n\" +", "+\t\t\t\t\"        [pc: 155, line: 17]\\n\" +", "-\t\t\t\t\"        [pc: 240, line: 22]\\n\" +", "+\t\t\t\t\"        [pc: 237, line: 22]\\n\" +", "-\t\t\t\t\"        [pc: 322, line: 27]\\n\" +", "+\t\t\t\t\"        [pc: 319, line: 27]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "beb6563545d146150985041334f21d87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 580, "methodNumberAfterChange": 580, "signatureBeforeChange": " \tpublic void test0561()", "signatureAfterChange": " \tpublic void test0561()", "diff": ["-\t\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Integer>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Integer>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Integer>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Integer>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c97d5aa133de4619b19a7e95cbff64ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "2e199be1cb9f53bc00414ea80765129518e12c23", "commitAfterChange": "46bdd6036153580a7889ceb7993a8f8a6300be85", "methodNumberBeforeChange": 1095, "methodNumberAfterChange": 1095, "signatureBeforeChange": " public void test1066() throws Exception", "signatureAfterChange": " public void test1066() throws Exception", "diff": ["-\t\t\t\t\"        [pc: 79, line: 12]\\n\" +", "+\t\t\t\t\"        [pc: 76, line: 12]\\n\" +", "-\t\t\t\t\"        [pc: 158, line: 17]\\n\" +", "+\t\t\t\t\"        [pc: 155, line: 17]\\n\" +", "-\t\t\t\t\"        [pc: 240, line: 22]\\n\" +", "+\t\t\t\t\"        [pc: 237, line: 22]\\n\" +", "-\t\t\t\t\"        [pc: 322, line: 27]\\n\" +", "+\t\t\t\t\"        [pc: 319, line: 27]\\n\" +", "-\t\t\t\t\"        [pc: 79, line: 12]\\n\" +", "+\t\t\t\t\"        [pc: 76, line: 12]\\n\" +", "-\t\t\t\t\"        [pc: 158, line: 17]\\n\" +", "+\t\t\t\t\"        [pc: 155, line: 17]\\n\" +", "-\t\t\t\t\"        [pc: 240, line: 22]\\n\" +", "+\t\t\t\t\"        [pc: 237, line: 22]\\n\" +", "-\t\t\t\t\"        [pc: 322, line: 27]\\n\" +", "+\t\t\t\t\"        [pc: 319, line: 27]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca99f7feb73da47016dbcaaa0999b855", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 406, "methodNumberAfterChange": 406, "signatureBeforeChange": " public void testBug317719g() throws Exception", "signatureAfterChange": " public void testBug317719g() throws Exception", "diff": ["-\t\t\t\"Method doIt(Collection<int[]>) has the same erasure doIt(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\"Erasure of method doIt(Collection<int[]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\"Method doIt(Collection<int[][]>) has the same erasure doIt(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\"Erasure of method doIt(Collection<int[][]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\"Method doIt2(Collection<int[]>) has the same erasure doIt2(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\"Erasure of method doIt2(Collection<int[]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\"Method doIt2(Collection<int[][]>) has the same erasure doIt2(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\"Erasure of method doIt2(Collection<int[][]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\t\"Method doIt(Collection<int[]>) has the same erasure doIt(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\t\"Erasure of method doIt(Collection<int[]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\t\"Method doIt(Collection<int[][]>) has the same erasure doIt(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\t\"Erasure of method doIt(Collection<int[][]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\t\"Method doIt2(Collection<int[]>) has the same erasure doIt2(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\t\"Erasure of method doIt2(Collection<int[]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\t\"Method doIt2(Collection<int[][]>) has the same erasure doIt2(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\t\"Erasure of method doIt2(Collection<int[][]>) is the same as another method in type X<Z>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf6d935f068e24a07aa562a72550f16e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void testParameterizedTypeSingleArgument02() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeSingleArgument02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic<?>.Member] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic<? extends Throwable>.Member] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>.Member] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic.Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic<?>.Member] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic<? extends Throwable>.Member] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>.Member] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [g1.t.s.def.Generic<?>.Member] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [g1.t.s.def.Generic<? extends Throwable>.Member] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [g1.t.s.def.Generic<? super RuntimeException>.Member] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [g1.t.s.def.Generic<?>.Member] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [g1.t.s.def.Generic<? extends Throwable>.Member] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [g1.t.s.def.Generic<? super RuntimeException>.Member] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e370b1db4ceb10cf523cea9933de72aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/OperatorExpression.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic static final String generateTableTestCase()", "signatureAfterChange": "  \tpublic static final String generateTableTestCase()", "diff": ["-\t\t\t\t\tcase T_boolean \t: return \"true\" ; //$NON-NLS-1$", "-\t\t\t\t\tcase T_byte\t\t: return \"((byte) 3)\" ; //$NON-NLS-1$", "-\t\t\t\t\tcase T_char\t\t: return \"'A'\" ; //$NON-NLS-1$", "-\t\t\t\t\tcase T_double\t: return \"300.0d\" ; //$NON-NLS-1$", "-\t\t\t\t\tcase T_float\t: return \"100.0f\" ; //$NON-NLS-1$", "-\t\t\t\t\tcase T_int\t\t: return \"1\" ; //$NON-NLS-1$", "-\t\t\t\t\tcase T_long\t\t: return \"7L\" ; //$NON-NLS-1$", "-\t\t\t\t\tcase T_String\t: return \"\\\"hello-world\\\"\" ; //$NON-NLS-1$", "+\t\t\t\t\tcase T_boolean \t: return \"true\"; //$NON-NLS-1$", "+\t\t\t\t\tcase T_byte\t\t: return \"((byte) 3)\"; //$NON-NLS-1$", "+\t\t\t\t\tcase T_char\t\t: return \"'A'\"; //$NON-NLS-1$", "+\t\t\t\t\tcase T_double\t: return \"300.0d\"; //$NON-NLS-1$", "+\t\t\t\t\tcase T_float\t: return \"100.0f\"; //$NON-NLS-1$", "+\t\t\t\t\tcase T_int\t\t: return \"1\"; //$NON-NLS-1$", "+\t\t\t\t\tcase T_long\t\t: return \"7L\"; //$NON-NLS-1$", "+\t\t\t\t\tcase T_String\t: return \"\\\"hello-world\\\"\"; //$NON-NLS-1$", "-\t\t\t\t\tcase T_boolean \t: return \"z\" ; //$NON-NLS-1$", "-\t\t\t\t\tcase T_byte\t\t: return \"b\" ; //$NON-NLS-1$", "-\t\t\t\t\tcase T_char\t\t: return \"c\" ; //$NON-NLS-1$", "-\t\t\t\t\tcase T_double\t: return \"d\" ; //$NON-NLS-1$", "-\t\t\t\t\tcase T_float\t: return \"f\" ; //$NON-NLS-1$", "-\t\t\t\t\tcase T_int\t\t: return \"i\" ; //$NON-NLS-1$", "-\t\t\t\t\tcase T_long\t\t: return \"l\" ; //$NON-NLS-1$", "-\t\t\t\t\tcase T_String\t: return \"str\" ; //$NON-NLS-1$", "+\t\t\t\t\tcase T_boolean \t: return \"z\"; //$NON-NLS-1$", "+\t\t\t\t\tcase T_byte\t\t: return \"b\"; //$NON-NLS-1$", "+\t\t\t\t\tcase T_char\t\t: return \"c\"; //$NON-NLS-1$", "+\t\t\t\t\tcase T_double\t: return \"d\"; //$NON-NLS-1$", "+\t\t\t\t\tcase T_float\t: return \"f\"; //$NON-NLS-1$", "+\t\t\t\t\tcase T_int\t\t: return \"i\"; //$NON-NLS-1$", "+\t\t\t\t\tcase T_long\t\t: return \"l\"; //$NON-NLS-1$", "+\t\t\t\t\tcase T_String\t: return \"str\"; //$NON-NLS-1$", "-\t\t\t\t\tcase LESS :\t\t\treturn \"<\";\t}; //$NON-NLS-1$", "+\t\t\t\t\tcase LESS :\t\t\treturn \"<\";\t} //$NON-NLS-1$", "-\t\tString s ;", "+\t\tString s;", "-\t\t\t\"\\t\\tString str0 ;\\t String str\\t= \"+decode.constant(T_String)+\";\\n\"+ //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\"\\t\\tint i0 ;\\t int i\\t= \"+decode.constant(T_int)+\" ;\\n\"+ //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\"\\t\\tString str0;\\t String str\\t= \"+decode.constant(T_String)+\";\\n\"+ //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\"\\t\\tint i0;\\t int i\\t= \"+decode.constant(T_int)+\";\\n\"+ //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\"\\t\\tchar c0; \\t char  c\\t= \"+decode.constant(T_char)+\" ;\\n\"+ //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\"\\t\\tfloat f0; \\t float f\\t= \"+decode.constant(T_float)+\" ;\\n\"+ //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\"\\t\\tdouble d0;\\t double d\\t= \"+decode.constant(T_double)+\" ;\\n\"+ //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\"\\t\\tchar c0; \\t char  c\\t= \"+decode.constant(T_char)+\";\\n\"+ //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\"\\t\\tfloat f0; \\t float f\\t= \"+decode.constant(T_float)+\";\\n\"+ //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\"\\t\\tdouble d0;\\t double d\\t= \"+decode.constant(T_double)+\";\\n\"+ //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\"\\t\\tlong l0; \\t long l\\t= \"+decode.constant(T_long)+\" ;\\n\"+ //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\"\\t\\tObject obj0; \\t Object obj\\t= \"+decode.constant(T_Object)+\" ;\\n\"+ //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\"\\t\\tlong l0; \\t long l\\t= \"+decode.constant(T_long)+\";\\n\"+ //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\"\\t\\tObject obj0; \\t Object obj\\t= \"+decode.constant(T_Object)+\";\\n\"+ //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tfor (int i=0; i < operators.length ; i++)", "+\t\tfor (int i=0; i < operators.length; i++)", "-\t\t\t\t\tString test = result == T_String ? \".equals(\" : \" != (\" ; //$NON-NLS-2$ //$NON-NLS-1$", "+\t\t\t\t\tString test = result == T_String ? \".equals(\" : \" != (\"; //$NON-NLS-2$ //$NON-NLS-1$", "-\t\treturn s += \"\\n\\t\\tSystem.out.println(\\\"binary tables test : done\\\");}\" ; //$NON-NLS-1$", "+\t\treturn s += \"\\n\\t\\tSystem.out.println(\\\"binary tables test : done\\\");}\"; //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea1ebd09f170c0225bafb546df926a55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "4b34ac952495406305286be091754126c6d25593", "commitAfterChange": "a3337f44ed6348a5f4f65ab1b2584cb8125066c6", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 122, "signatureBeforeChange": " public void testBug286668c_40w() throws JavaModelException", "signatureAfterChange": " public void testBug286668c_40w() throws JavaModelException", "diff": ["-\t\t\"\t\tbuilder.append(\\\"abc\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\\\"def\\\")\\n\" +", "-\t\t\"\t\t\t\t.append(\\\"ghi\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\t\t\\\"jkl\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\t\t\\\"mno\\\")\\n\" +", "-\t\t\"\t\t\t\t.append(\\\"pqr\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\t\t\\\"stu\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\t\t\\\"vwx\\\")\\n\" +", "-\t\t\"\t\t\t\t.append(\\\"yz\\\");\\n\" +", "+\t\t\"\t\tbuilder.append(\\\"abc\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"def\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"ghi\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"jkl\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"mno\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"pqr\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"stu\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"vwx\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"yz\\\");\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed89bf69ccc27e49edd348e5aff867b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic void testParameterizedTypeSingleArgument04() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeSingleArgument04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>.MemberGeneric<?>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>.MemberGeneric<?>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [g1.t.s.def.Generic<?>.MemberGeneric<?>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [g1.t.s.def.Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [g1.t.s.def.Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [g1.t.s.def.Generic<?>.MemberGeneric<?>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [g1.t.s.def.Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [g1.t.s.def.Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0bbacff8f2d6318b7e97d130c6f802d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 164, "methodNumberAfterChange": 164, "signatureBeforeChange": " \tpublic void test050c()", "signatureAfterChange": " \tpublic void test050c()", "diff": ["-\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Y>) is the same as another method in type X.C5\\n\" +", "-\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Z>) is the same as another method in type X.C5\\n\" +", "-\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Y>) is the same as another method in type X.C6\\n\" +", "-\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Z>) is the same as another method in type X.C6\\n\" +", "-\t\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Y>) is the same as another method in type X.C5\\n\" +", "-\t\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Z>) is the same as another method in type X.C5\\n\" +", "-\t\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Y>) is the same as another method in type X.C6\\n\" +", "-\t\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Z>) is the same as another method in type X.C6\\n\" +"]}], "num": 11388}
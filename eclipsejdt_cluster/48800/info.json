{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c11769f3b577f450903a2d2a50e0e4ae", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "361b94821661b44c8a3fc73d826c4fca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/ClasspathMultiDirectory.java", "commitBeforeChange": "82197baae0367830baca5c640478373ab5a7a62f", "commitAfterChange": "8fb638b22d441ebdf2eef8ceaf13b7008c790687", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \r NameEnvironmentAnswer findClass(char[] className, char[][] packageName)", "signatureAfterChange": "\r \r NameEnvironmentAnswer findClass(char[] className, char[][] packageName)", "diff": ["-\tString filename = new String(className);\r", "-\tString sourceFilename = filename + \".java\"; //$NON-NLS-1$\r", "-\tString binaryFilename = filename + \".class\"; //$NON-NLS-1$\r", "-\r", "-\tif (!exists(binaryPath, binaryFilename, packageName)) {\r", "-\t\tif (!exists(sourcePath, sourceFilename, packageName)) return null;\r", "-\t\tString fullName = sourcePath + NameEnvironment.assembleName(sourceFilename, packageName, '/');\r", "-\t\treturn new NameEnvironmentAnswer(new CompilationUnit(null, fullName));\r", "-\t}\r", "-\r", "-\tif (!exists(sourcePath, sourceFilename, packageName)) {\r", "-\t\t// ask builder for the matching source filename for this type\r", "-\t\tsourceFilename = findSourceFilenameFor(className, packageName);\r", "-\t\tif (sourceFilename == null) {\r", "-\t\t\t// return class file if a matching source filename doesn't exist... EXTRA class file case\r", "-\t\t\ttry {\r", "-\t\t\t\treturn new NameEnvironmentAnswer(\r", "-\t\t\t\t\tClassFileReader.read(binaryPath + NameEnvironment.assembleName(binaryFilename, packageName, '/')));\r", "-\t\t\t} catch (Exception e) {\r", "-\t\t\t\treturn null;\r", "-\t\t\t}\r", "-\t\t}\r", "+\tif (nameEnvironment.additionalSourceFilenames != null) {\r", "+\t\t// if an additional source file is waiting to be compiled, answer it\r", "+\t\t// BUT not if this is a secondary type search,\r", "+\t\t// if we answer the source file X.java which may no longer define Y\r", "+\t\t// then the binary type looking for Y will fail & think the class path is wrong\r", "+\t\t// let the recompile loop fix up dependents when Y has been deleted from X.java\r", "+\t\tString sourceFilename = new String(className) + \".java\"; //$NON-NLS-1$\r", "-\t\t\t// return the source file which contains this secondary type\r", "-\t\t\tString fullName = sourcePath + NameEnvironment.assembleName(sourceFilename, packageName, '/');\r", "-\t\t\treturn new NameEnvironmentAnswer(new CompilationUnit(null, fullName));\r", "-\t\t}\r", "-\t\treturn null; // return null if a source filename is known but its not in this classpath entry\r", "-\t}\r", "-\r", "-\tString fullSourceName = sourcePath + NameEnvironment.assembleName(sourceFilename, packageName, '/');\r", "-\tString fullBinaryName = binaryPath + NameEnvironment.assembleName(binaryFilename, packageName, '/');\r", "-\tlong sourceModified = new File(fullSourceName).lastModified();\r", "-\tlong binaryModified = new File(fullBinaryName).lastModified();\r", "-\tif (binaryModified > sourceModified) {\r", "-\t\ttry {\r", "-\t\t\treturn new NameEnvironmentAnswer(\r", "-\t\t\t\tClassFileReader.read(fullBinaryName));\r", "-\t\t} catch (Exception e) {\r", "+\t\t\tString fullSourceName = sourcePath + NameEnvironment.assembleName(sourceFilename, packageName, '/');\r", "+\t\t\tString[] additionalSourceFilenames = nameEnvironment.additionalSourceFilenames;\r", "+\t\t\tfor (int i = 0, l = additionalSourceFilenames.length; i < l; i++)\r", "+\t\t\t\tif (fullSourceName.equals(additionalSourceFilenames[i]))\r", "+\t\t\t\t\treturn new NameEnvironmentAnswer(new CompilationUnit(null, fullSourceName));\r", "-\treturn new NameEnvironmentAnswer(new CompilationUnit(null, fullSourceName));\r", "-}\r", "+\t// assume any class file found in this output folder would eventually be found...\r", "+\t// its possible with multiple source folders, that a class file should not be found associated\r", "+\t// with this source folder, but with another which we have yet to search\r", "+\treturn super.findClass(className, packageName);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e83d9df06a17f0ffa40c59991cb85dba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathMultiDirectory.java", "commitBeforeChange": "ccba397e4e9d73802c009a4349e321c86584df94", "commitAfterChange": "cec508cecafb7942c9eac67dcd1f12c464401c60", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": " \r \r NameEnvironmentAnswer findClass(String binaryFileName, String qualifiedPackageName, String qualifiedBinaryFileName)", "signatureAfterChange": " \r \r NameEnvironmentAnswer findSourceFile(\r \tString qualifiedSourceFileName,\r \tString qualifiedPackageName,\r \tchar[] typeName,\r \tString[] additionalSourceFilenames)", "diff": ["-NameEnvironmentAnswer findClass(String binaryFileName, String qualifiedPackageName, String qualifiedBinaryFileName) {\r", "-\tString[] additionalSourceFilenames = nameEnvironment.additionalSourceFilenames;\r", "-\tif (additionalSourceFilenames != null) {\r", "-\t\tif (!isPackage(qualifiedPackageName)) return null; // most common case\r", "+NameEnvironmentAnswer findSourceFile(\r", "+\tString qualifiedSourceFileName,\r", "+\tString qualifiedPackageName,\r", "+\tchar[] typeName,\r", "+\tString[] additionalSourceFilenames) {\r", "-\t\t// if an additional source file is waiting to be compiled, answer it\r", "-\t\t// BUT not if this is a secondary type search,\r", "-\t\t// if we answer the source file X.java which may no longer define Y\r", "-\t\t// then the binary type looking for Y will fail & think the class path is wrong\r", "-\t\t// let the recompile loop fix up dependents when Y has been deleted from X.java\r", "-\t\tString fullSourceName = sourcePath + qualifiedBinaryFileName.substring(0, qualifiedBinaryFileName.length() - 6) + \".java\"; //$NON-NLS-1$\r", "-\t\tfor (int i = 0, l = additionalSourceFilenames.length; i < l; i++)\r", "-\t\t\tif (fullSourceName.equals(additionalSourceFilenames[i]))\r", "-\t\t\t\treturn new NameEnvironmentAnswer(\r", "-\t\t\t\t\tnew SourceFile(fullSourceName, binaryFileName.substring(0, binaryFileName.length() - 6), qualifiedPackageName));\r", "-\t}\r", "-\r", "-\t// assume any class file found in this output folder would eventually be found...\r", "-\t// its possible with multiple source folders, that a class file should not be found associated\r", "-\t// with this source folder, but with another which we have yet to search\r", "-\treturn super.findClass(binaryFileName, qualifiedPackageName, qualifiedBinaryFileName);\r", "+\t// if an additional source file is waiting to be compiled, answer it\r", "+\t// BUT not if this is a secondary type search,\r", "+\t// if we answer the source file X.java which may no longer define Y\r", "+\t// then the binary type looking for Y will fail & think the class path is wrong\r", "+\t// let the recompile loop fix up dependents when Y has been deleted from X.java\r", "+\tString fullSourceName = sourcePath + qualifiedSourceFileName;\r", "+\tfor (int i = 0, l = additionalSourceFilenames.length; i < l; i++)\r", "+\t\tif (fullSourceName.equals(additionalSourceFilenames[i]))\r", "+\t\t\treturn new NameEnvironmentAnswer(\r", "+\t\t\t\tnew SourceFile(fullSourceName, typeName, CharOperation.splitOn('/', qualifiedPackageName.toCharArray())));\r", "+\treturn null;\r"]}], "num": 48800}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a23d9666c7a7d4d0466ba683dd5d1e48", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bc7a195ce0d4dfe51ccd4ddddc78c6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public String[] getExceptionTypes() throws JavaModelException", "signatureAfterChange": " public String[] getExceptionTypes() throws JavaModelException", "diff": ["-\t\tchar[][] eTypeNames = info.getExceptionTypeNames();", "-\t\tif (eTypeNames == null || eTypeNames.length == 0) {", "-\t\t\tthis.exceptionTypes = NO_TYPES;", "-\t\t} else {", "-\t\t\teTypeNames = ClassFile.translatedNames(eTypeNames);", "-\t\t\tthis.exceptionTypes = new String[eTypeNames.length];", "-\t\t\tfor (int j = 0, length = eTypeNames.length; j < length; j++) {", "-\t\t\t\t// 1G01HRY: ITPJCORE:WINNT - method.getExceptionType not in correct format", "-\t\t\t\tint nameLength = eTypeNames[j].length;", "-\t\t\t\tchar[] convertedName = new char[nameLength + 2];", "-\t\t\t\tSystem.arraycopy(eTypeNames[j], 0, convertedName, 1, nameLength);", "-\t\t\t\tconvertedName[0] = 'L';", "-\t\t\t\tconvertedName[nameLength + 1] = ';';", "-\t\t\t\tthis.exceptionTypes[j] = new String(convertedName);", "+\t\tchar[] genericSignature = info.getGenericSignature();", "+\t\tif (genericSignature != null) {", "+\t\t\tchar[] dotBasedSignature = CharOperation.replaceOnCopy(genericSignature, '/', '.');", "+\t\t\tthis.exceptionTypes = Signature.getThrownExceptionTypes(new String(dotBasedSignature));", "+\t\t}", "+\t\tif (this.exceptionTypes == null || this.exceptionTypes.length == 0) {", "+\t\t\tchar[][] eTypeNames = info.getExceptionTypeNames();", "+\t\t\tif (eTypeNames == null || eTypeNames.length == 0) {", "+\t\t\t\tthis.exceptionTypes = NO_TYPES;", "+\t\t\t} else {", "+\t\t\t\teTypeNames = ClassFile.translatedNames(eTypeNames);", "+\t\t\t\tthis.exceptionTypes = new String[eTypeNames.length];", "+\t\t\t\tfor (int j = 0, length = eTypeNames.length; j < length; j++) {", "+\t\t\t\t\t// 1G01HRY: ITPJCORE:WINNT - method.getExceptionType not in correct format", "+\t\t\t\t\tint nameLength = eTypeNames[j].length;", "+\t\t\t\t\tchar[] convertedName = new char[nameLength + 2];", "+\t\t\t\t\tSystem.arraycopy(eTypeNames[j], 0, convertedName, 1, nameLength);", "+\t\t\t\t\tconvertedName[0] = 'L';", "+\t\t\t\t\tconvertedName[nameLength + 1] = ';';", "+\t\t\t\t\tthis.exceptionTypes[j] = new String(convertedName);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c732e48e8a03e9648e29372c37ce070f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newElements, ArrayList childrenHandles)", "signatureAfterChange": " private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newElements, ArrayList childrenHandles)", "diff": ["-\t\tString[] pNames= Signature.getParameterTypes(new String(methodInfo.getMethodDescriptor()));", "+\t\tchar[] signature = methodInfo.getGenericSignature();", "+\t\tif (signature == null) signature = methodInfo.getMethodDescriptor();", "+\t\tString[] pNames = null;", "+\t\ttry {", "+\t\t\tpNames = Signature.getParameterTypes(new String(signature));", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t\t// protect against malformed .class file (e.g. com/sun/crypto/provider/SunJCE_b.class has a 'a' generic signature)", "+\t\t\tsignature = methodInfo.getMethodDescriptor();", "+\t\t\tpNames = Signature.getParameterTypes(new String(signature));", "+\t\t}"]}], "num": 29068}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c7188d3922f3ba220f6432ccc201afa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e855e9e557f7eb3110b27fba92751407", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GrammarCoverageTests308.java", "commitBeforeChange": "62a40ae820eb3f4d9fe13acbfcd6c17882e53721", "commitAfterChange": "6e5d8fb1fa59c43c60c58828e1e292aaafa3465f", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void test034() throws Exception", "signatureAfterChange": " \tpublic void test034() throws Exception", "diff": ["-\t\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tY y1 = @Marker x.new @Marker Y();\\n\" + ", "+\t\t\t\t\"\t                      ^^^^^^\\n\" + ", "+\t\t\t\t\"Marker cannot be resolved to a type\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\t\"3. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tY y2 = @Marker x.new <String> @Marker Y();\\n\" + ", "+\t\t\t\t\"\t                               ^^^^^^\\n\" + ", "+\t\t\t\t\"Marker cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f511519a6d8603de58abfccdc566641e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4ee57f1aa920ef9dfc0c8991087575befcec8304", "commitAfterChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "methodNumberBeforeChange": 1038, "methodNumberAfterChange": 1038, "signatureBeforeChange": " public void test1013()", "signatureAfterChange": " public void test1013()", "diff": ["-\t\t\t\"\t\tSystem.out.println(\\\"[done]\\\");\\n\" +", "+\t\t\t\"\t\tSystem.out.println(zork);\\n\" +", "-\t\t\"1. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\"\tSystem.out.println(zork);\\n\" + ", "+\t\t\"\t                   ^^^^\\n\" + ", "+\t\t\"zork cannot be resolved to a variable\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 14)\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 15)\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 15)\\n\" + ", "-\t\t\"\tX x = bar1(l1, l2);\\n\" + ", "-\t\t\"\t      ^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type mismatch: cannot convert from Object to X\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f79bf264916c2b8a9435bccb1f3f3e67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GrammarCoverageTests308.java", "commitBeforeChange": "62a40ae820eb3f4d9fe13acbfcd6c17882e53721", "commitAfterChange": "6e5d8fb1fa59c43c60c58828e1e292aaafa3465f", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void test033() throws Exception", "signatureAfterChange": " \tpublic void test033() throws Exception", "diff": ["-\t\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tY y1 = new @Marker X().new @Marker Y();\\n\" + ", "+\t\t\t\t\"\t                            ^^^^^^\\n\" + ", "+\t\t\t\t\"Marker cannot be resolved to a type\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tY y2 = new @Marker X().new <String> @Marker Y();\\n\" + ", "+\t\t\t\t\"\t                                     ^^^^^^\\n\" + ", "+\t\t\t\t\"Marker cannot be resolved to a type\\n\" + "]}], "num": 45948}
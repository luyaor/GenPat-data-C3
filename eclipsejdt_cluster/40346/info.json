{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e76931d3326ed8e4c5bf5f72bceb0cff", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2182b13d969e91a185e30c2934b87977", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ImportRewrite.java", "commitBeforeChange": "e6d1c8eac73b65997182b9feaba7e190099afd1a", "commitAfterChange": "8771cbd26402d5e088df5bc8e18f1b0e8d601818", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "  \tprivate Type getArrayType(Type elementType, AST ast, ImportRewriteContext context, ITypeBinding normalizedBinding)", "signatureAfterChange": "  \tprivate Type getArrayType(Type elementType, AST ast, ImportRewriteContext context, ITypeBinding normalizedBinding)", "diff": ["-\t\t\tIAnnotationBinding[][] annotationsOnDimensions = normalizedBinding.getTypeAnnotationsOnDimensions();", "-\t\t\tint length = annotationsOnDimensions != null ? annotationsOnDimensions.length : 0;", "-\t\t\tlength = length < noDimensions ? length : noDimensions; // should not be >, but preventive.", "-\t\t\tfor (int i = 0; i < length; ++i) {", "-\t\t\t\tList dimensions = arrayType.dimensions();", "-\t\t\t\tDimension dimension = (Dimension) dimensions.get(i);", "-\t\t\t\tIAnnotationBinding[] annotationOnDimension = annotationsOnDimensions[i];", "-\t\t\t\tif (annotationOnDimension == null) continue;", "-\t\t\t\tannotateList(dimension.annotations(), annotationOnDimension, ast, context);", "+\t\t\tfor (int i = 0; i < noDimensions; i++) {", "+\t\t\t\tIAnnotationBinding[] typeAnnotations = normalizedBinding.getTypeAnnotations();", "+\t\t\t\tif (typeAnnotations.length > 0) {", "+\t\t\t\t\tDimension dimension = (Dimension) arrayType.dimensions().get(i);", "+\t\t\t\t\tannotateList(dimension.annotations(), typeAnnotations, ast, context);", "+\t\t\t\t}", "+\t\t\t\tnormalizedBinding = normalizedBinding.getComponentType();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74e3e8665ada8ecd8d9e22157ea6edb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 49, "signatureBeforeChange": " TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType,  \t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "signatureAfterChange": " TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType,  \t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "diff": ["-\t\tTypeAnnotationWalker dimensionsWalker = null;", "-\t\tfor (int i = 0; i < dimension; i++) {", "-\t\t\tif (dimensionsWalker == null)", "-\t\t\t\tdimensionsWalker = walker; // outermost dimension == main type", "-\t\t\telse", "-\t\t\t\tdimensionsWalker = dimensionsWalker.toNextArrayDimension();", "-\t\t\tlong tagBits = typeAnnotationsToTagBits(dimensionsWalker.getAnnotationsAtCursor());", "-\t\t\tif (tagBits != 0L) {", "-\t\t\t\tif (annotationTagBitsOnDimensions == null)", "-\t\t\t\t\tannotationTagBitsOnDimensions = new long[dimension+1]; // leave room for leaf type", "-\t\t\t\tannotationTagBitsOnDimensions[i] = tagBits; ", "-\t\t\t}", "-\t\t}", "+\t\tannotationTagBitsOnDimensions = getAnnotationTagBitsOnDimensions(dimension, walker);", "-\t\t\tif (refType instanceof UnresolvedReferenceBinding) {", "-\t\t\t\t// clone so we don't interfere with future lookups:", "-\t\t\t\tbinding = new UnresolvedReferenceBinding(refType, tagBits);", "-\t\t\t} else {", "-\t\t\t\tbinding = createAnnotatedType(refType, tagBits);", "-\t\t\t}", "+\t\t\tbinding = createAnnotatedType(refType, tagBits);", "+}"]}], "num": 40346}
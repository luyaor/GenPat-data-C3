{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "edd7e18d08f134fe42fac7e15bea2f11", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "356cace4e01e996bb669c24ddf29af87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "8d0a5299117e5fc84e729116ac52feef1385b968", "commitAfterChange": "527793c3501c0044ba7f65ec00ff957c7a149690", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected static Element getEntryAsXMLElement( \t\tDocument document, \t\tIClasspathEntry entry, \t\tIPath prefixPath) \t\tthrows JavaModelException", "signatureAfterChange": " \tprotected static Element getEntryAsXMLElement( \t\tDocument document, \t\tIClasspathEntry entry, \t\tIPath prefixPath) \t\tthrows JavaModelException", "diff": ["+\t\t}", "+\t\t", "+\t\tString[] exclusionPatterns;", "+\t\tif ((exclusionPatterns = entry.getExclusionPatterns()) != null) {", "+\t\t\tStringBuffer excludeRule = new StringBuffer(10);", "+\t\t\tfor (int i = 0, max = exclusionPatterns.length; i < max; i++){", "+\t\t\t\tif (i > 0) excludeRule.append('|');", "+\t\t\t\texcludeRule.append(exclusionPatterns[i]);", "+\t\t\t}", "+\t\t\telement.setAttribute(\"excluding\", excludeRule.toString());  //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5402cffd3a0108c35a90610daf535d6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "9b921f99315dbbd37e5ce242cb0efa8c0bd12214", "commitAfterChange": "6b16361a0fd854f68a5a4796074fceea4b12f838", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " protected void runJavac( \t\tString[] testFiles, \t\tboolean expectingCompilerErrors, \t\tString expectedCompilerLog, \t\tString expectedOutputString, \t\tString expectedErrorString, \t\tboolean shouldFlushOutputDirectory,  \t\tJavacTestOptions options)", "signatureAfterChange": " protected void runJavac( \t\tString[] testFiles, \t\tboolean expectingCompilerErrors, \t\tString expectedCompilerLog, \t\tString expectedOutputString, \t\tString expectedErrorString, \t\tboolean shouldFlushOutputDirectory,  \t\tJavacTestOptions options, \t\tString[] vmArguments)", "diff": ["-\t\tJavacTestOptions options) {", "+\t\tJavacTestOptions options,", "+\t\tString[] vmArguments) {", "+\t// WORK reorder parameters", "-\t\t\t\t\truntime.execute(javacOutputDirectory, \"\", testFiles[0].substring(0, testFiles[0].length() - 5), stdout, stderr);", "+\t\t\t\t\tString vmOptions = \"\";", "+\t\t\t\t\tif (vmArguments != null) {", "+\t\t\t\t\t\tint l = vmArguments.length;", "+\t\t\t\t\t\tif (l > 0) {", "+\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer(vmArguments[0]);", "+\t\t\t\t\t\t\tfor (int i = 1; i < l; i++) {", "+\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\tbuffer.append(vmArguments[i]);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tvmOptions = buffer.toString();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\truntime.execute(javacOutputDirectory, vmOptions, testFiles[0].substring(0, testFiles[0].length() - 5), stdout, stderr);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d029fd9863421e1e63c3a17313d21af3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "c93b7fc02953335388042ab5bd4ec34f70464821", "commitAfterChange": "c9213ae595dd32af0d2b3bd7c31b733e8b1d0dd1", "methodNumberBeforeChange": 387, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic String toString()", "signatureAfterChange": " \tpublic String toString()", "diff": ["+\t}", "+\tpublic String toString() {", "+\t\tString[] strings = new String[index+1];", "+\t\tSystem.arraycopy(results, 0, strings, 0, index+1);", "+\t\tArrays.sort(strings);", "+\t\tStringBuffer buffer = new StringBuffer();", "+\t\tfor (int i=0; i<=index; i++) {", "+\t\t\tif (i>0) buffer.append('\\n');", "+\t\t\tbuffer.append(strings[i]);", "+\t\t}", "+\t\treturn buffer.toString();", "+\t}", "-\t}", "-\tpublic String toString() {", "-\t\treturn this.results.toString();", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0d5c66a01fd18ac6e168c0e3d3edaac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void elementEncode(XMLWriter writer, IPath projectPath, boolean indent, boolean newLine)", "signatureAfterChange": " \tpublic void elementEncode(XMLWriter writer, IPath projectPath, boolean indent, boolean newLine)", "diff": ["-\t\t", "-\t\tif (this.exclusionPatterns.length > 0) {", "+\t\tif (this.inclusionPatterns != null && this.inclusionPatterns.length > 0) {", "+\t\t\tStringBuffer includeRule = new StringBuffer(10);", "+\t\t\tfor (int i = 0, max = this.inclusionPatterns.length; i < max; i++){", "+\t\t\t\tif (i > 0) includeRule.append('|');", "+\t\t\t\tincludeRule.append(this.inclusionPatterns[i]);", "+\t\t\t}", "+\t\t\tparameters.put(\"including\", String.valueOf(includeRule));//$NON-NLS-1$", "+\t\t}", "+\t\tif (this.exclusionPatterns != null && this.exclusionPatterns.length > 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee4203f06ab42ef6d415ca25a21d3788", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModifyingResourceTests.java", "commitBeforeChange": "be247eb150a4ae64408d691fa5f52cc64cf01665", "commitAfterChange": "560772312173d5112198fae503105dd04e5536f2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void assertDeltas(String message, String expected)", "signatureAfterChange": " protected void assertDeltas(String message, String expected)", "diff": ["+\t\tIResourceDelta[] nonJavaProjects = deltas[i].getResourceDeltas();", "+\t\tif (nonJavaProjects != null) {", "+\t\t\tfor (int j=0, nonJavaProjectsLength=nonJavaProjects.length; j<nonJavaProjectsLength; j++) {", "+\t\t\t\tif (j == 0 && buffer.length() != 0) {", "+\t\t\t\t\tbuffer.append(\"\\n\");", "+\t\t\t\t}", "+\t\t\t\tbuffer.append(nonJavaProjects[j]);", "+\t\t\t\tif (j != nonJavaProjectsLength-1) {", "+\t\t\t\t\tbuffer.append(\"\\n\");", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 27620}
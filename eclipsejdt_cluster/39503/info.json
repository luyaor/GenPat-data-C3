{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c2ff2305d429ffb38f664b7354292ea", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c04fb3f07453698df6bcaba97a936782", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 120, "signatureBeforeChange": " \tpublic void test0109() throws JavaModelException", "signatureAfterChange": " \tpublic void test0109() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"@Annot(value=\\\"Hello\\\", count=-1)\\n\" +", "-\t\t\t\t\"@interface Annot {\\n\" +", "-\t\t\t\t\"    String value();\\n\" +", "-\t\t\t\t\"    int count();\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/Annot.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tnode = getASTNode(compilationUnit, 0);", "-\t\t\tAnnotationTypeDeclaration annotationTypeDeclaration = (AnnotationTypeDeclaration) node;", "-\t\t\tITypeBinding typeBinding = annotationTypeDeclaration.resolveBinding();", "-\t\t\tassertNotNull(\"No type binding\", typeBinding);", "-\t\t\tIMethodBinding[] methods = typeBinding.getDeclaredMethods();", "-\t\t\tassertEquals(\"Wrong size\", 2, methods.length);", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"@Annot(value=\\\"Hello\\\", count=-1)\\n\" +", "+\t\t\t\"@interface Annot {\\n\" +", "+\t\t\t\"    String value();\\n\" +", "+\t\t\t\"    int count();\\n\" +", "+\t\t\t\"}\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/Annot.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tnode = getASTNode(compilationUnit, 0);", "+\t\tAnnotationTypeDeclaration annotationTypeDeclaration = (AnnotationTypeDeclaration) node;", "+\t\tITypeBinding typeBinding = annotationTypeDeclaration.resolveBinding();", "+\t\tassertNotNull(\"No type binding\", typeBinding);", "+\t\tIMethodBinding[] methods = typeBinding.getDeclaredMethods();", "+\t\tassertEquals(\"Wrong size\", 2, methods.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c43d92827e0689902da05a4a39bbc6af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 113, "signatureBeforeChange": " \tpublic void test0102() throws JavaModelException", "signatureAfterChange": " \tpublic void test0102() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"import java.util.HashMap;\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"    Object o= new HashMap<?, ?>[0];\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tnode = getASTNode(compilationUnit, 0, 0);", "-\t\t\tassertEquals(\"Not a field declaration\", ASTNode.FIELD_DECLARATION, node.getNodeType());", "-\t\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) node;", "-\t\t\tList fragments = fieldDeclaration.fragments();", "-\t\t\tassertEquals(\"wrong size\", 1, fragments.size());", "-\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "-\t\t\tcheckSourceRange(fragment, \"o= new HashMap<?, ?>[0]\", contents.toCharArray());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"import java.util.HashMap;\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"    Object o= new HashMap<?, ?>[0];\\n\" +", "+\t\t\t\"}\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tnode = getASTNode(compilationUnit, 0, 0);", "+\t\tassertEquals(\"Not a field declaration\", ASTNode.FIELD_DECLARATION, node.getNodeType());", "+\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) node;", "+\t\tList fragments = fieldDeclaration.fragments();", "+\t\tassertEquals(\"wrong size\", 1, fragments.size());", "+\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "+\t\tcheckSourceRange(fragment, \"o= new HashMap<?, ?>[0]\", contents.toCharArray());"]}], "num": 39503}
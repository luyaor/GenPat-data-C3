{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ab2a0f4c7db38b91e111e34724159e2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46df42520aba644f1d8299422a75aa55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "f0cb4a068eeab3abed95a0b2adb026d43df5a459", "commitAfterChange": "a216b7a3c34bd18a3c5423aaf9bc759d76b8f068", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "\r \tpublic NameLookup getNameLookup() throws JavaModelException", "signatureAfterChange": "\r \tpublic NameLookup getNameLookup() throws JavaModelException", "diff": ["-\t\tif (info.getNameLookup() == null) {\r", "-\t\t\tinfo.setNameLookup(new NameLookup(this));\r", "+\t\t// lock on the project info to avoid race condition\r", "+\t\tsynchronized(info){\r", "+\t\t\tNameLookup nameLookup;\r", "+\t\t\tif ((nameLookup = info.getNameLookup()) == null){\r", "+\t\t\t\tinfo.setNameLookup(nameLookup = new NameLookup(this));\r", "+\t\t\t}\r", "+\t\t\treturn nameLookup;\r", "-\t\treturn info.getNameLookup();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b424deac1a3eee0363b1ac4043c7968d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "f9c8085d5f196168022784cbce4ebb351d6b98d6", "commitAfterChange": "ff8ce17574e8339f9bf6c2f5871e0aa33dc85f9a", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " \tpublic NameLookup newNameLookup(ICompilationUnit[] workingCopies) throws JavaModelException", "signatureAfterChange": " \tpublic NameLookup newNameLookup(ICompilationUnit[] workingCopies) throws JavaModelException", "diff": ["-", "-\t\tJavaProjectElementInfo info = getJavaProjectElementInfo();", "-\t\t// lock on the project info to avoid race condition while computing the pkg fragment roots and package fragment caches", "-\t\tsynchronized(info){", "-\t\t\treturn new NameLookup(info.getAllPackageFragmentRoots(this), info.getAllPackageFragments(this), workingCopies, info.pathToResolvedEntries);", "-\t\t}", "+\t\treturn getJavaProjectElementInfo().newNameLookup(this, workingCopies);"]}], "num": 67479}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7eeba1b4e0fcd919bb08705bf075da37", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98226a63fc2e8d01b57b07e76fec8a28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java", "commitBeforeChange": "6f6bc9d0562d23a055ee9e986cf21155795a29ff", "commitAfterChange": "7f289b483e1414e7141e9f94307fbe445e3b1b34", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate CompilationParticipantResult cleanNotify( CompilationParticipantEvent cpe )", "signatureAfterChange": "  \tprivate CompilationParticipantResult cleanNotify( CompilationParticipantEvent cpe )", "diff": ["+\t\ttry{", "+\t\t\t// clear out all markers during a clean.", "+\t\t\tIMarker[] markers = p.findMarkers(ProcessorEnvImpl.BUILD_MARKER, true, IResource.DEPTH_INFINITE);", "+\t\t\tif( markers != null ){", "+\t\t\t\tfor( IMarker marker : markers )", "+\t\t\t\t\tmarker.delete();", "+\t\t\t}", "+\t\t}", "+\t\tcatch(CoreException e){", "+\t\t\te.printStackTrace();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea82f94ae3575bf7270aa3eb12a3d075", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "b23efdb186bab86ee31b58ab278fa9a0bc22ac6e", "commitAfterChange": "d1672c4973b4d066327f254ca8486bc25c95661d", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 141, "signatureBeforeChange": " \tpublic boolean visit(ThrowStatement node)", "signatureAfterChange": " \tpublic boolean visit(ThrowStatement node)", "diff": ["-\t\trewriteRequiredNode(node, ThrowStatement.EXPRESSION_PROPERTY);\t\t", "+\t\ttry {", "+\t\t\tint offset= getScanner().getTokenEndOffset(ITerminalSymbols.TokenNamethrow, node.getStartPosition());", "+\t\t\tensureSpaceBeforeReplace(node, ThrowStatement.EXPRESSION_PROPERTY, offset, 0);", "+\t\t\t", "+\t\t\trewriteRequiredNode(node, ThrowStatement.EXPRESSION_PROPERTY);", "+\t\t} catch (CoreException e) {", "+\t\t\thandleException(e);", "+\t\t}"]}], "num": 34406}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1dad14f9da329e6cb5b08654f5cc903", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95e7b24527d5d06cc2e230ce859a19c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredField.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public RecoveredElement add(LambdaExpression expression, int bracketBalanceValue)", "signatureAfterChange": " public RecoveredElement add(TypeDeclaration typeDeclaration, int bracketBalanceValue)", "diff": ["- */", "-public RecoveredElement add(LambdaExpression expression, int bracketBalanceValue) {", "-", "-\tif (this.alreadyCompletedFieldInitialization) {", "-\t\treturn super.add(expression, bracketBalanceValue);", "-\t} else {", "-\t\tif (expression.sourceEnd > 0)", "-\t\t\t\tthis.alreadyCompletedFieldInitialization = true;", "-\t\t// else we may still be inside the initialization, having parsed only a part of it yet", "-\t\tthis.fieldDeclaration.initialization = expression;", "-\t\tthis.fieldDeclaration.declarationSourceEnd = expression.sourceEnd;", "-\t\tthis.fieldDeclaration.declarationEnd = expression.sourceEnd;", "-\t\treturn this.initializerLambda = new RecoveredLambdaExpression(expression, this, bracketBalanceValue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d667b14552c85471146e5b961b75284b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredField.java", "commitBeforeChange": "841af85ab99e4b15e2a10d11233f480a3f381ff0", "commitAfterChange": "01bd53f266d07ca177ff8e7fb927b7206b4c562d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public RecoveredElement add(TypeDeclaration typeDeclaration, int bracketBalanceValue)", "signatureAfterChange": " public RecoveredElement add(LambdaExpression expression, int bracketBalanceValue)", "diff": ["+ */", "+public RecoveredElement add(LambdaExpression expression, int bracketBalanceValue) {", "+", "+\tif (this.alreadyCompletedFieldInitialization) {", "+\t\treturn super.add(expression, bracketBalanceValue);", "+\t} else {", "+\t\tif (expression.sourceEnd > 0)", "+\t\t\t\tthis.alreadyCompletedFieldInitialization = true;", "+\t\t// else we may still be inside the initialization, having parsed only a part of it yet", "+\t\tthis.fieldDeclaration.initialization = expression;", "+\t\tthis.fieldDeclaration.declarationSourceEnd = expression.sourceEnd;", "+\t\tthis.fieldDeclaration.declarationEnd = expression.sourceEnd;", "+\t\treturn this.initializer = new RecoveredLambdaExpression(expression, this, bracketBalanceValue);"]}], "num": 20690}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad516d292124a2e1b902c8155252cd37", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1af5f77b3b038391bfca73d6c6118f20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "signatureAfterChange": "  \tpublic void traverse(ASTVisitor visitor, ClassScope scope)", "diff": ["+\t\t\tif (this.annotations != null) {", "+\t\t\t\tint annotationsLength = this.annotations.length;", "+\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "+\t\t\t\t\tthis.annotations[i].traverse(visitor, scope);", "+\t\t\t}", "+\t\t\tif (this.annotationsOnDimensions != null) {", "+\t\t\t\tfor (int i = 0, max = this.annotationsOnDimensions.length; i < max; i++) {", "+\t\t\t\t\tAnnotation[] annotations2 = this.annotationsOnDimensions[i];", "+\t\t\t\t\tfor (int j = 0, max2 = annotations2.length; j < max2; j++) {", "+\t\t\t\t\t\tAnnotation annotation = annotations2[j];", "+\t\t\t\t\t\tannotation.traverse(visitor, scope);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ecc59b478c32dca98ed167677d068de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "432008853dbe89b80857db09e494b48744c55f84", "commitAfterChange": "9fa3233c96ef5a5d9fd8dee21980d4556ff02acf", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "diff": ["-\t\tif (compatibleIndex == 0)\r", "+\t\tif (compatibleIndex == 0) { // try to find a close match when the parameter order is wrong or missing some parameters\r", "+\t\t\tint argLength = argumentTypes.length;\r", "+\t\t\tnextMethod : for (int i = 0; i < foundSize; i++) {\r", "+\t\t\t\tMethodBinding methodBinding = (MethodBinding) found.elementAt(i);\r", "+\t\t\t\tTypeBinding[] params = methodBinding.parameters;\r", "+\t\t\t\tint paramLength = params.length;\r", "+\t\t\t\tnextArg: for (int a = 0; a < argLength; a++) {\r", "+\t\t\t\t\tTypeBinding arg = argumentTypes[a];\r", "+\t\t\t\t\tfor (int p = 0; p < paramLength; p++)\r", "+\t\t\t\t\t\tif (params[p] == arg)\r", "+\t\t\t\t\t\t\tcontinue nextArg;\r", "+\t\t\t\t\tcontinue nextMethod;\r", "+\t\t\t\t}\r", "+\t\t\t\treturn methodBinding;\r", "+\t\t\t}\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ca0880131d291d916fda8c82753010c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic void traverse(ASTVisitor visitor, ClassScope scope)", "signatureAfterChange": "  \tpublic void traverse(ASTVisitor visitor, ClassScope scope)", "diff": ["+\t\t\tif (this.annotations != null) {", "+\t\t\t\tint annotationsLength = this.annotations.length;", "+\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "+\t\t\t\t\tthis.annotations[i].traverse(visitor, scope);", "+\t\t\t}", "+\t\t\tif (this.annotationsOnDimensions != null) {", "+\t\t\t\tfor (int i = 0, max = this.annotationsOnDimensions.length; i < max; i++) {", "+\t\t\t\t\tAnnotation[] annotations2 = this.annotationsOnDimensions[i];", "+\t\t\t\t\tfor (int j = 0, max2 = annotations2.length; j < max2; j++) {", "+\t\t\t\t\t\tAnnotation annotation = annotations2[j];", "+\t\t\t\t\t\tannotation.traverse(visitor, scope);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cb0def294ac044867a399de7ec437b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "signatureAfterChange": " \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "diff": ["+\t\t\tif (this.annotations != null) {", "+\t\t\t\tint annotationsLength = this.annotations.length;", "+\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "+\t\t\t\t\tthis.annotations[i].traverse(visitor, scope);", "+\t\t\t}", "+\t\t\tif (this.annotationsOnDimensions != null) {", "+\t\t\t\tfor (int i = 0, max = this.annotationsOnDimensions.length; i < max; i++) {", "+\t\t\t\t\tAnnotation[] annotations2 = this.annotationsOnDimensions[i];", "+\t\t\t\t\tfor (int j = 0, max2 = annotations2.length; j < max2; j++) {", "+\t\t\t\t\t\tAnnotation annotation = annotations2[j];", "+\t\t\t\t\t\tannotation.traverse(visitor, scope);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 59381}
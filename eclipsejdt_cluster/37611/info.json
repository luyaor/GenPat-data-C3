{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea097d86dcf1d3581eda953b563cb3aa", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87c407b0dac505d73252a39871b4da9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "09e6a0d689d92bccdede36cccd43932276d7e4d3", "commitAfterChange": "0848b8a6a9afff16623dfc6b0821adb833326b41", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " public void test041()", "signatureAfterChange": " public void test041()", "diff": ["-\t\t\t\"\t    throw x;    // ~== throw new F()\\n\" + // javac 8b74 complains here.", "+\t\t\t\"\t    throw x;    // ~== throw new F()\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 20)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tG g = (x) -> { // Elided type is inferred from descriptor to be F\\n\" + ", "+\t\t\t\"\t    throw x;    // ~== throw new F()\\n\" + ", "+\t\t\t\"\t};\\n\" + ", "+\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Illegal lambda expression: Method m of type G2 is generic \\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 20)\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 23)\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 23)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9d9956c36a1e5e0d608f83cf1d946a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 377, "methodNumberAfterChange": 377, "signatureBeforeChange": " public void test1052_options_all_error()", "signatureAfterChange": " public void test1052_options_all_error()", "diff": ["-\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" +", "-\t\t\"\tif (o != null) {\\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "+\t\t\"\tif (o != null) {\\n\" +", "-\t\t\"Null comparison always yields false: The variable o can only be null at this location\\n\" +", "+\t\t\"Null comparison always yields false: The variable o can only be null at this location\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 8)\\r\\n\" +", "-\t\t\"\to.toString();\\r\\n\" +", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (o != null) {\\n\" + ", "+\t\t\"       o = null;\\n\" + ", "+\t\t\"    }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + ", "+\t\t\"----------\\n\" +", "+\t\t\"3. ERROR in X.java (at line 8)\\n\" +", "+\t\t\"\to.toString();\\n\" +", "-\t\t\"3. ERROR in X.java (at line 9)\\r\\n\" +", "-\t\t\"\tp.toString();\\r\\n\" +", "+\t\t\"4. ERROR in X.java (at line 9)\\n\" +", "+\t\t\"\tp.toString();\\n\" +"]}], "num": 37611}
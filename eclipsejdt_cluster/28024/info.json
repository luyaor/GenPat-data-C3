{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17f0cc347bf0b2b9a504b8d91d888e4f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a0347ef5f5970a908c3281eaf45a6a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SubRoutineStatement.java", "commitBeforeChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "commitAfterChange": "cbaf155d59bae1aee7ec473c177014431f794c16", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic static void reenterAnyExceptionHandlers(SubRoutineStatement[] subroutines, int max, CodeStream codeStream)", "signatureAfterChange": " \t \tpublic static void reenterAllExceptionHandlers(SubRoutineStatement[] subroutines, int max, CodeStream codeStream)", "diff": ["+\tpublic static void reenterAllExceptionHandlers(SubRoutineStatement[] subroutines, int max, CodeStream codeStream) {", "+\t\tif (subroutines == null) return;", "+\t\tif (max < 0) max = subroutines.length;", "+\t\tfor (int i = 0; i < max; i++) {", "+\t\t\tSubRoutineStatement sub = subroutines[i];", "+\t\t\tsub.enterAnyExceptionHandler(codeStream);", "+\t\t\tsub.enterDeclaredExceptionHandlers(codeStream);", "+\t\t}\t", "+\t}", "-\t", "-\tpublic static void reenterAnyExceptionHandlers(SubRoutineStatement[] subroutines, int max, CodeStream codeStream) {", "-\t\tif (subroutines == null) return;", "-\t\tif (max < 0) max = subroutines.length;", "-\t\tfor (int i = 0; i < max; i++) {", "-\t\t\tsubroutines[i].enterAnyExceptionHandler(codeStream); ", "-\t\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dac31a17602f5f4f4579fe05dbe53f56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BranchStatement.java", "commitBeforeChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "commitAfterChange": "cbaf155d59bae1aee7ec473c177014431f794c16", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-", "-\tif ((bits & IsReachable) == 0) {", "+\tif ((this.bits & ASTNode.IsReachable) == 0) {", "-\tif (subroutines != null){", "-\t\tfor (int i = 0, max = subroutines.length; i < max; i++){", "-\t\t\tSubRoutineStatement sub = subroutines[i];", "-\t\t\tsub.generateSubRoutineInvocation(currentScope, codeStream);", "-\t\t\tif (sub.isSubRoutineEscaping()) {", "+\tif (this.subroutines != null){", "+\t\tfor (int i = 0, max = this.subroutines.length; i < max; i++){", "+\t\t\tSubRoutineStatement sub = this.subroutines[i];", "+\t\t\tboolean didEscape = sub.generateSubRoutineInvocation(currentScope, codeStream, this.targetLabel);", "+\t\t\tif (didEscape) {", "-\t\t\t\t\tSubRoutineStatement.reenterAnyExceptionHandlers(subroutines, i, codeStream);", "+\t\t\t\t\tSubRoutineStatement.reenterAllExceptionHandlers(this.subroutines, i, codeStream);", "-\t\t\tsub.exitAnyExceptionHandler();", "-\tcodeStream.goto_(targetLabel);", "+\tcodeStream.goto_(this.targetLabel);", "-\tSubRoutineStatement.reenterAnyExceptionHandlers(subroutines, -1, codeStream);", "+\tSubRoutineStatement.reenterAllExceptionHandlers(this.subroutines, -1, codeStream);"]}], "num": 28024}
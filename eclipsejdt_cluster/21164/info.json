{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c7e84643ca9f6826e31b1e18c2ea11d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6b4874d4dd8bb31944e602fb4ed2456", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java", "commitBeforeChange": "9bf79c7ef87f9bb276696a699c24ee7886d82109", "commitAfterChange": "de2cee4ff7b76fb31a04f1c1b724977d8ef8d10e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void testMethod4() throws JavaModelException", "signatureAfterChange": " \tpublic void testMethod4() throws JavaModelException", "diff": ["-\t */", "-\tpublic void testMethod4() throws JavaModelException {", "-\t\tASTNode node = buildAST(", "-\t\t\t\"public class X {\\n\" + ", "-\t\t\t\"\tvoid foo() {\\n\" + ", "-\t\t\t\"\t\t/*start*/bar(new B<Object>())/*end*/;\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"\t<T extends Object> void bar(A<? extends T> arg) {\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"}\\n\" + ", "-\t\t\t\"class A<T> {\\n\" + ", "-\t\t\t\"}\\n\" + ", "-\t\t\t\"class B<T> extends A<T> {\t\\n\" + ", "-\t\t\t\"}\"", "-\t\t);", "-\t\tIBinding binding = ((MethodInvocation) node).resolveMethodBinding();", "-\t\tassertNotNull(\"No binding\", binding);", "-\t\tIJavaElement element = binding.getJavaElement();", "-\t\tassertElementEquals(", "-\t\t\t\"Unexpected Java element\",", "-\t\t\t\"bar(A<? extends T>) [in X [in [Working copy] X.java [in <default> [in <project root> [in P]]]]]\",", "-\t\t\telement", "-\t\t);", "-\t\tassertTrue(\"Element should exist\", element.exists());", "-\t}", "+\tpublic void testMethod4() throws JavaModelException {", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\t\"\t\t/*start*/bar(new B<Object>())/*end*/;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\t<T extends Object> void bar(A<? extends T> arg) {\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class A<T> {\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class B<T> extends A<T> {\t\\n\" + ", "+\t\tIBinding binding = ((MethodInvocation) node).resolveMethodBinding();", "+\t\t\t\"bar(A<? extends T>) [in X [in [Working copy] X.java [in <default> [in src [in P]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee9f5299b304ed1380b1310fdbe53ef4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java", "commitBeforeChange": "9bf79c7ef87f9bb276696a699c24ee7886d82109", "commitAfterChange": "de2cee4ff7b76fb31a04f1c1b724977d8ef8d10e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic void testMethod3() throws JavaModelException", "signatureAfterChange": " \tpublic void testMethod3() throws JavaModelException", "diff": ["-\t */", "-\tpublic void testMethod3() throws JavaModelException {", "-\t\tICompilationUnit otherWorkingCopy = null;", "-\t\ttry {", "-\t\t\totherWorkingCopy = getWorkingCopy(", "-\t\t\t\t\"/P/Y.java\",", "-\t\t\t\t\"public class Y {\\n\" +", "-\t\t\t\t\"  void foo(int i, String[] args, java.lang.Class clazz) {}\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\tthis.workingCopy.getOwner(), ", "-\t\t\t\tnull", "-\t\t\t);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"  void bar() {\\n\" +", "-\t\t\t\t\"    Y y = new Y();\\n\" +", "-\t\t\t\t\"    /*start*/y.foo(1, new String[0], getClass())/*end*/;\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"}\"", "-\t\t\t);", "-\t\t\tIBinding binding = ((MethodInvocation) node).resolveMethodBinding();", "-\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t\tIJavaElement element = binding.getJavaElement();", "-\t\t\tassertElementEquals(", "-\t\t\t\t\"Unexpected Java element\",", "-\t\t\t\t\"foo(int, String[], java.lang.Class) [in Y [in [Working copy] Y.java [in <default> [in <project root> [in P]]]]]\",", "-\t\t\t\telement", "-\t\t\t);", "-\t\t\tassertTrue(\"Element should exist\", element.exists());", "-\t\t} finally {", "-\t\t\tif (otherWorkingCopy != null)", "-\t\t\t\totherWorkingCopy.discardWorkingCopy();", "-\t\t}", "-\t}", "+\t */", "+\tpublic void testMethod3() throws JavaModelException {", "+\t\tICompilationUnit otherWorkingCopy = null;", "+\t\t\totherWorkingCopy = getWorkingCopy(", "+\t\t\t\t\"/P/src/Y.java\",", "+\t\t\t\t\"  void foo(int i, String[] args, java.lang.Class clazz) {}\\n\" +", "+\t\t\t\t\"}\",", "+\t\t\t\tthis.workingCopy.getOwner(), ", "+\t\t\t\tnull", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"  void bar() {\\n\" +", "+\t\t\t\t\"    Y y = new Y();\\n\" +", "+\t\t\t\t\"    /*start*/y.foo(1, new String[0], getClass())/*end*/;\\n\" +", "+\t\t\t\t\"  }\\n\" +", "+\t\t\tIBinding binding = ((MethodInvocation) node).resolveMethodBinding();", "+\t\t\t\t\"foo(int, String[], java.lang.Class) [in Y [in [Working copy] Y.java [in <default> [in src [in P]]]]]\",", "+\t\t\tif (otherWorkingCopy != null)", "+\t\t\t\totherWorkingCopy.discardWorkingCopy();"]}], "num": 21164}
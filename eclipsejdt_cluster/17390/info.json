{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3152872ae8eacf26a5af8fabfbc8060", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57e54a40001a21150d3fd082d695b272", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnJavadocTag.java", "commitBeforeChange": "aa8429de1ce59ee844c2f0de07adad34ff0300a0", "commitAfterChange": "9b592f6388a5636707e72a81ff341b93791e3014", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void filterPossibleTags(Scope scope)", "signatureAfterChange": "  \tpublic void filterPossibleTags(Scope scope)", "diff": ["+\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=255752", "+\t\t\t\t// Check for FAKE_TYPE_NAME to allow proposals (@see CompletionParser#consumeCompilationUnit)", "+\t\t\t\tCompilationUnitDeclaration compilationUnit = scope.referenceCompilationUnit();", "+\t\t\t\tif (compilationUnit != null &&", "+\t\t\t\t\t\t(compilationUnit.types.length > 0 && compilationUnit.types[0].name == CompletionParser.FAKE_TYPE_NAME)) {", "+\t\t\t\t\tspecifiedTags = CLASS_TAGS;", "+\t\t\t\t} else {", "+\t\t\t\t\tspecifiedTags = COMPILATION_UNIT_TAGS;", "+\t\t\t\t}", "+\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6cdb5b9f767820148097213e4c612ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayTypeReference.java", "commitBeforeChange": "27f0a8bf5e0182b2f55d23c88165e43a56aee13f", "commitAfterChange": "51213023943da7653dfbcc6859baaa171fa1aac9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t \t@Override \tpublic boolean hasNullTypeAnnotation()", "signatureAfterChange": " \t \t@Override \tpublic boolean hasNullTypeAnnotation(AnnotationPosition position)", "diff": ["-\tpublic boolean hasNullTypeAnnotation() {", "-    \tif (super.hasNullTypeAnnotation())", "-    \t\treturn true;", "-    \tif (this.resolvedType != null && !this.resolvedType.hasNullTypeAnnotations())", "-    \t\treturn false; // shortcut", "-    \tif (this.annotationsOnDimensions != null) {", "-    \t\tfor (int i = 0; i < this.annotationsOnDimensions.length; i++) {", "-\t\t\t\tAnnotation[] innerAnnotations = this.annotationsOnDimensions[i];", "-\t\t\t\tif (containsNullAnnotation(innerAnnotations))", "+\tpublic boolean hasNullTypeAnnotation(AnnotationPosition position) {", "+\t\tswitch (position) {", "+\t\t\tcase LEAF_TYPE:", "+\t\t\t\t// ignore annotationsOnDimensions:", "+\t\t\t\treturn super.hasNullTypeAnnotation(position);", "+\t\t\tcase MAIN_TYPE:", "+\t\t\t\t// outermost dimension only:", "+\t\t\t\tif (this.annotationsOnDimensions != null && this.annotationsOnDimensions.length > 0) {", "+\t\t\t\t\tAnnotation[] innerAnnotations = this.annotationsOnDimensions[0];", "+\t\t\t\t\treturn containsNullAnnotation(innerAnnotations);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase ANY:", "+\t\t\t\tif (super.hasNullTypeAnnotation(position))", "-\t\t\t}", "-    \t}", "+\t\t\t\tif (this.resolvedType != null && !this.resolvedType.hasNullTypeAnnotations())", "+\t\t\t\t\treturn false; // shortcut", "+\t\t\t\tif (this.annotationsOnDimensions != null) {", "+\t\t\t\t\tfor (int i = 0; i < this.annotationsOnDimensions.length; i++) {", "+\t\t\t\t\t\tAnnotation[] innerAnnotations = this.annotationsOnDimensions[i];", "+\t\t\t\t\t\tif (containsNullAnnotation(innerAnnotations))", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffca3f599bd82905682267e2b2978d49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ea2fc86434ecfa29af7662d0b72f2fa65bd907c6", "commitAfterChange": "78c270cb0e8bf81b3b471a8bdedbb8d9bf04e016", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \t \tpublic boolean isInsideDeprecatedCode()", "signatureAfterChange": " \t \tpublic boolean isInsideDeprecatedCode()", "diff": ["+\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :", "+\t\t\t\t// consider import as being deprecated if first type is itself deprecated (123522)", "+\t\t\t\tCompilationUnitDeclaration unit = referenceCompilationUnit();", "+\t\t\t\tif (unit.types != null && unit.types.length > 0) {", "+\t\t\t\t\tSourceTypeBinding type = unit.types[0].binding;", "+\t\t\t\t\tif (type != null && type.isViewedAsDeprecated())", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t}"]}], "num": 17390}
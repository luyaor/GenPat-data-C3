{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c1c7bb4d2c0f30dd59df5bd706e390c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bea21a0685d3b9916a13d989f228609c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "d785f90166aa4c50a893672b2f8b10875313fedd", "commitAfterChange": "b8b352fc846455808f45330cfd0c7d70c44859bf", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected void checkDisassembledClassFile(String fileName, String className, String expectedOutput, int mode)", "signatureAfterChange": " \tprotected void checkDisassembledClassFile(String fileName, String className, String expectedOutput, int mode) throws Exception", "diff": ["-\tprotected void checkDisassembledClassFile(String fileName, String className, String expectedOutput, int mode) {", "+\tprotected void checkDisassembledClassFile(String fileName, String className, String expectedOutput, int mode) throws Exception {", "-\t\tString result = null;", "-\t\ttry {", "-\t\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(classFile);", "-\t\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "-\t\t\tresult = disassembler.disassemble(classFileBytes, \"\\n\", mode);", "-\t\t} catch (IOException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tassertTrue(\"Should not happen : \", false);", "-\t\t} catch (ClassFormatException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tassertTrue(\"Should not happen : \", false);", "-\t\t}", "+\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(classFile);", "+\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "+\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", mode);", "-\t\t", "-\t\ttry {", "-\t\t\tFileInputStream stream = new FileInputStream(classFile);", "-\t\t\tClassFileReader.read(stream, className + \".class\", true);", "-\t\t\tstream.close();", "-\t\t} catch (org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tassertTrue(\"ClassFormatException\", false);", "-\t\t} catch (IOException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tassertTrue(\"IOException\", false);", "-\t\t}", "+\t\tFileInputStream stream = new FileInputStream(classFile);", "+\t\tClassFileReader.read(stream, className + \".class\", true);", "+\t\tstream.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e63033687ee78753093ea9b91e904349", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/DecodeCodeFormatterPreferences.java", "commitBeforeChange": "b9fba611699cd3de6aaeecf1e218591cb72fa466", "commitAfterChange": "7464b1ea1c1edb40a36aa8ba9bb025cac2275919", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic static Map decodeCodeFormatterOptions(String fileName)", "signatureAfterChange": "  \tpublic static Map decodeCodeFormatterOptions(String fileName, String profileName)", "diff": ["-\tpublic static Map decodeCodeFormatterOptions(String fileName) {", "+", "+\tpublic static Map decodeCodeFormatterOptions(String fileName, String profileName) {", "-\t\t\tsaxParser.parse(new File(fileName), new DecodeCodeFormatterPreferences());", "+\t\t\tfinal DecodeCodeFormatterPreferences preferences = new DecodeCodeFormatterPreferences(profileName);", "+\t\t\tsaxParser.parse(new File(fileName), preferences);", "+\t\t\treturn preferences.getEntries();", "-\t\t} ", "+\t\t}", "+\t\t/*try {", "+\t\t\tBufferedReader reader = new BufferedReader(new FileReader(fileName));", "+\t\t\tElement rootNode;", "+", "+\t\t\ttry {", "+\t\t\t\tDocumentBuilder parser =", "+\t\t\t\t\tDocumentBuilderFactory.newInstance().newDocumentBuilder();", "+\t\t\t\trootNode = parser.parse(new InputSource(reader)).getDocumentElement();", "+\t\t\t\treturn rootNode;", "+\t\t\t} catch (SAXException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t} catch (ParserConfigurationException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t} finally {", "+\t\t\t\treader.close();", "+\t\t\t}", "+\t\t} catch (IOException e) {", "+\t\t\te.printStackTrace();", "+\t\t}*/", "+\t}"]}], "num": 45435}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23de6e009e400567f6f4b7d77d2b62dc", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21b29c637e292144ab36e611e722cdbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "b18b012adcc471e2280a6e20faa4d2a33f1db69a", "commitAfterChange": "5bb01926d23a6cf003d0d521691c391ac08b77a7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "signatureAfterChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "diff": ["-\t\t", "+\t\tISourceAttribute sourceAttribute = classFileReader.getSourceFileAttribute();", "+\t\tIClassFileAttribute classFileAttribute = Util.getAttribute(classFileReader, IAttributeNamesConstants.SIGNATURE);", "+\t\tISignatureAttribute signatureAttribute = (ISignatureAttribute) classFileAttribute;", "+\t\tfinal int accesssFlags = classFileReader.getAccessFlags();", "-\t\t\tbuffer.append(Util.bind(\"disassembler.commentstart\")); //$NON-NLS-1$", "-\t\t\twriteNewLine(buffer, lineSeparator, 0);", "-\t\t\tbuffer.append(Util.bind(\"disassembler.begincommentline\"));\t\t\t //$NON-NLS-1$", "-\t\t\tif (minorVersion == 3 && majorVersion == 45) {", "-\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\", \" 1.1\"));//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t} else if (minorVersion == 0 && majorVersion == 46) {", "-\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\", \"1.2\"));//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t} else if (minorVersion == 0 && majorVersion == 47) {", "-\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\", \"1.3\"));//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t} else if (minorVersion == 0 && majorVersion == 48) {", "-\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\", \"1.4\"));//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t} else if (minorVersion == 0 && majorVersion == 49) {", "-\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\", \"1.5\"));//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\tbuffer.append(Util.bind(\"disassembler.begincommentline\")); //$NON-NLS-1$", "+\t\t\tif (sourceAttribute != null) {", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.sourceattributeheader\")); //$NON-NLS-1$", "+\t\t\t\tbuffer.append(sourceAttribute.getSourceFileName());", "+\t\t\tString versionNumber = VERSION_UNKNOWN;//$NON-NLS-1$", "+\t\t\tif (minorVersion == 3 && majorVersion == 45) {", "+\t\t\t\tversionNumber = JavaCore.VERSION_1_1;", "+\t\t\t} else if (minorVersion == 0 && majorVersion == 46) {", "+\t\t\t\tversionNumber = JavaCore.VERSION_1_2;", "+\t\t\t} else if (minorVersion == 0 && majorVersion == 47) {", "+\t\t\t\tversionNumber = JavaCore.VERSION_1_3;", "+\t\t\t} else if (minorVersion == 0 && majorVersion == 48) {", "+\t\t\t\tversionNumber = JavaCore.VERSION_1_4;", "+\t\t\t} else if (minorVersion == 0 && majorVersion == 49) {", "+\t\t\t\tversionNumber = JavaCore.VERSION_1_5;", "+\t\t\t}", "+\t\t\tbuffer.append(", "+\t\t\t\tUtil.bind(\"classfileformat.versiondetails\",//$NON-NLS-1$", "+\t\t\t\tnew String[] {", "+\t\t\t\t\tversionNumber,", "+\t\t\t\t\tInteger.toString(majorVersion),", "+\t\t\t\t\tInteger.toString(minorVersion),", "+\t\t\t\t\t((accesssFlags & IModifierConstants.ACC_SUPER) != 0", "+\t\t\t\t\t\t\t? Util.bind(\"classfileformat.superflagisset\")//$NON-NLS-1$", "+\t\t\t\t\t\t\t: Util.bind(\"classfileformat.superflagisnotset\"))//$NON-NLS-1$", "+\t\t\t\t\t+ (isDeprecated(classFileReader) ? \", deprecated\" : EMPTY_OUTPUT)//$NON-NLS-1$", "+\t\t\t\t}));", "-\t\t\tbuffer.append(Util.bind(\"disassembler.begincommentline\"));\t\t\t //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"classfileformat.magicnumber\")); //$NON-NLS-1$", "-\t\t\tbuffer.append(Integer.toHexString(classFileReader.getMagic()).toUpperCase());", "-\t\t\twriteNewLine(buffer, lineSeparator, 0);", "-\t\t\tbuffer.append(Util.bind(\"disassembler.begincommentline\"));\t\t\t //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"classfileformat.minorversion\")); //$NON-NLS-1$", "-\t\t\tbuffer.append(minorVersion);", "-\t\t\twriteNewLine(buffer, lineSeparator, 0);", "-\t\t\tbuffer.append(Util.bind(\"disassembler.begincommentline\"));\t\t\t //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"classfileformat.majorversion\")); //$NON-NLS-1$", "-\t\t\tbuffer.append(majorVersion);", "-\t\t\twriteNewLine(buffer, lineSeparator, 0);", "-\t\t\tbuffer.append(Util.bind(\"disassembler.commentend\")); //$NON-NLS-1$", "-\t\t\twriteNewLine(buffer, lineSeparator, 0);", "-\t\t}", "-\t\tISourceAttribute sourceAttribute = classFileReader.getSourceFileAttribute();", "-\t\tif (sourceAttribute != null) {", "-\t\t\tbuffer.append(Util.bind(\"classfileformat.sourcename\")); //$NON-NLS-1$", "-\t\t\tbuffer.append(sourceAttribute.getSourceFileName());", "-\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t\tif (signatureAttribute != null) {", "+\t\t\t\tbuffer", "+\t\t\t\t\t.append(Util.bind(\"disassembler.begincommentline\"))\t //$NON-NLS-1$", "+\t\t\t\t\t.append(Util.bind(\"disassembler.signatureattributeheader\")) //$NON-NLS-1$", "+\t\t\t\t\t.append(signatureAttribute.getSignature());", "+\t\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t\t}", "-\t\t\tdecodeModifiersForType(buffer, classFileReader.getAccessFlags());", "+\t\t\tdecodeModifiersForType(buffer, accesssFlags);", "+\t\t\tif (isSynthetic(classFileReader)) {", "+\t\t\t\tbuffer.append(\"synthetic\"); //$NON-NLS-1$", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.space\")); //$NON-NLS-1$", "+\t\t\t}", "-\t\tif (classFileReader.isClass()) {", "+\t\tif ((accesssFlags & IModifierConstants.ACC_ENUM) != 0) {", "+\t\t\tbuffer.append(\"enum \"); //$NON-NLS-1$", "+\t\t} else if (classFileReader.isClass()) {", "-\t\t\t\t\t.append(Util.bind(\"disassembler.comma\")); //$NON-NLS-1$", "+\t\t\t\t\t.append(Util.bind(\"disassembler.comma\"))//$NON-NLS-1$", "+\t\t\t\t\t.append(Util.bind(\"disassembler.space\")); //$NON-NLS-1$", "-\t\twriteNewLine(buffer, lineSeparator, 1);", "-\t\tcheckSuperFlags(buffer, classFileReader.getAccessFlags(), lineSeparator, 1);", "+\t\t\tIClassFileAttribute[] attributes = classFileReader.getAttributes();", "+\t\t\tlength = attributes.length;", "+\t\t\tIEnclosingMethodAttribute enclosingMethodAttribute = getEnclosingMethodAttribute(classFileReader);", "+\t\t\tint remainingAttributesLength = length;", "+\t\t\tif (innerClassesAttribute != null) {", "+\t\t\t\tremainingAttributesLength--;", "+\t\t\t}", "+\t\t\tif (enclosingMethodAttribute != null) {", "+\t\t\t\tremainingAttributesLength--;", "+\t\t\t}", "+\t\t\tif (sourceAttribute != null) {", "+\t\t\t\tremainingAttributesLength--;", "+\t\t\t}", "+\t\t\tif (signatureAttribute != null) {", "+\t\t\t\tremainingAttributesLength--;", "+\t\t\t}", "+\t\t\tif (innerClassesAttribute != null || enclosingMethodAttribute != null || remainingAttributesLength != 0) {", "+\t\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t\t}", "-\t\t\tIClassFileAttribute[] attributes = classFileReader.getAttributes();", "-\t\t\tlength = attributes.length;", "+\t\t\tif (enclosingMethodAttribute != null) {", "+\t\t\t\tdisassemble(enclosingMethodAttribute, buffer, lineSeparator, 0);", "+\t\t\t}", "-\t\t\t\t\t\t&& attribute != sourceAttribute) {", "+\t\t\t\t\t\t&& attribute != sourceAttribute", "+\t\t\t\t\t\t&& attribute != signatureAttribute", "+\t\t\t\t\t\t&& attribute != enclosingMethodAttribute", "+\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.DEPRECATED)", "+\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.SYNTHETIC)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9607943bc2ea232204e57fd1f41b019", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "6b6471423b89c70a33d53654f3143292c15724dc", "commitAfterChange": "dbb5484f1c0506305bb2de3acc0db3501ec7c329", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "  private static void initProfiles(StringBuffer buffer)", "signatureAfterChange": "  private static int initProfiles(String profile)", "diff": ["-private static void initProfiles(StringBuffer buffer) {", "-\tboolean profile = NO_COMMENTS || PRESERVED_LINES != -1;", "-\t \tif (!JOIN_LINES.equals(\"never\") &&", "-\t \t\t!JOIN_LINES.equals(\"only_comments\") &&", "-\t \t\t!JOIN_LINES.equals(\"only_code\")) {", "-\t \t\tJOIN_LINES = null;", "-\t \t} else {", "-\t \t\tprofile = true;", "-\t \tif (!BRACES.equals(DefaultCodeFormatterConstants.NEXT_LINE) &&", "-\t \t\t!BRACES.equals(DefaultCodeFormatterConstants.NEXT_LINE_ON_WRAP) &&", "-\t \t\t!BRACES.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "-\t \t\tBRACES = null;", "-\t \t} else {", "-\t \t\tprofile = true;", "-\tif (profile) {", "-\t\tbuffer.append(\"Profiles  : \");", "-\t\tbuffer.append(LINE_SEPARATOR);", "+private static int initProfiles(String profile) {", "+\tStringTokenizer tokenizer = new StringTokenizer(profile, \",\");", "+\tint profiles = 0;", "+\twhile (tokenizer.hasMoreTokens()) {", "+\t\tString token = tokenizer.nextToken();", "+\t\tint idx = token.indexOf('=');", "+\t\tif (idx <= 0) {", "+\t\t\tSystem.err.println(\"'\"+profile+\"' is not a valid profile!!!\");", "+\t\t\treturn 0;", "+\t\t}", "+\t\tString profileName = token.substring(0, idx);", "+\t\tif (profileName.equals(\"join_lines\")) {", "+\t\t\tString joinLines = token.substring(idx+1);", "+\t\t \tif (joinLines.equals(\"never\")) {", "+\t\t \t\tprofiles += PROFILE_NEVER_JOIN_LINES;", "+\t\t \t} else if (joinLines.equals(\"only_comments\")) {", "+\t\t \t\tprofiles += PROFILE_JOIN_LINES_ONLY_COMMENTS;", "+\t\t \t} else if (joinLines.equals(\"only_code\")) {", "+\t\t \t\tprofiles += PROFILE_JOIN_LINES_ONLY_CODE;", "+\t\t\t}", "+\t\t} else if (profileName.equals(\"no_comments\")) {", "+\t\t\tString noComments = token.substring(idx+1);", "+\t\t \tif (noComments.equals(DefaultCodeFormatterConstants.TRUE)) {", "+\t \t\t\tprofiles |= PROFILE_NO_COMMENTS;", "+\t\t \t}", "+\t\t} else if (profileName.equals(\"braces\")) {", "+\t\t\tString braces = token.substring(idx+1);", "+\t\t \tif (braces.equals(DefaultCodeFormatterConstants.NEXT_LINE)) {", "+\t\t \t\tprofiles += PROFILE_BRACES_NEXT_LINE;", "+\t\t \t} else if (braces.equals(DefaultCodeFormatterConstants.NEXT_LINE_ON_WRAP)) {", "+\t\t \t\tprofiles += PROFILE_BRACES_NEXT_LINE_ON_WRAP;", "+\t\t \t} else if (braces.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "+\t\t \t\tprofiles += PROFILE_BRACES_NEXT_LINE_SHIFTED;", "+\t\t \t}", "+\t\t} else if (profileName.equals(\"preserved_lines\")) {", "+\t\t\ttry {", "+\t\t\t\tString lines = token.substring(idx+1);", "+\t \t\t\tint value = Integer.parseInt(lines);", "+\t \t\t\tif (value >= 0 && value < 8) {", "+\t\t \t\t\tprofiles += value << 5;", "+\t \t\t\t}", "+\t\t \t}", "+\t\t\tcatch (NumberFormatException nfe) {", "+\t\t\t\t// skip", "+\t\t\t}", "+\t\t}", "+\t}", "+\treturn profiles;", "+}"]}], "num": 72727}
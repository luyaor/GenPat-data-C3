{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45b16311e27c3f8d01dde824bccbf2be", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd8c7800640da9be229bd995bd31edea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "14d627dce82d56cfd2be03743c28c7ac3736df42", "commitAfterChange": "98d42611e634b1db50f18796da74a25e56b7b155", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "diff": ["-\t\t\tif (monitor != null) \tmonitor.beginTask(Messages.javamodel_initialization, 100);", "+\t\t\tif (monitor != null) {", "+\t\t\t\tmonitor.beginTask(Messages.javamodel_initialization, 100);", "+\t\t\t\tmonitor.subTask(Messages.javamodel_configuring_classpath_containers);", "+\t\t\t}", "+\t\t\tSubProgressMonitor subMonitor = null;", "-\t\t\t\t\tmonitor.subTask(Messages.javamodel_configuring_classpath_containers);", "-\t\t\t\t\tmanager.batchContainerInitializationsProgress.set(new SubProgressMonitor(monitor, 50)); // 50% of the time is spent in initializing containers and variables", "+\t\t\t\t\tsubMonitor = new SubProgressMonitor(monitor, 50); // 50% of the time is spent in initializing containers and variables", "+\t\t\t\t\tsubMonitor.beginTask(\"\", 100); //$NON-NLS-1$", "+\t\t\t\t\tsubMonitor.worked(5); // give feedback to the user that something is happening", "+\t\t\t\t\tmanager.batchContainerInitializationsProgress.initializeAfterLoadMonitor.set(subMonitor);", "-\t\t\t\t", "-\t\t\t\t// all classpaths in the workspace are going to be resolved, ensure that containers are initialized in one batch", "-\t\t\t\tmanager.batchContainerInitializations = true; ", "-\t\t\t\t", "-\t\t\t\t// avoid leaking source attachment properties (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=183413)", "-\t\t\t\tIJavaProject[] projects = manager.getJavaModel().getJavaProjects();", "-\t\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\t\t\tIClasspathEntry[] classpath;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tclasspath = ((JavaProject) projects[i]).getResolvedClasspath();", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t// project no longer exist: ignore", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (classpath != null) {", "-\t\t\t\t\t\tfor (int j = 0, length2 = classpath.length; j < length2; j++) {", "-\t\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "-\t\t\t\t\t\t\tif (entry.getSourceAttachmentPath() != null)", "-\t\t\t\t\t\t\t\tUtil.setSourceAttachmentProperty(entry.getPath(), null);", "-\t\t\t\t\t\t\t// else source might have been attached by IPackageFragmentRoot#attachSource(...), we keep it", "+\t\t\t\tif (manager.forceBatchInitializations(true/*initAfterLoad*/)) { // if no other thread has started the batch container initializations", "+\t\t\t\t\tmanager.getClasspathContainer(Path.EMPTY, null); // force the batch initialization", "+\t\t\t\t} else { // else wait for the batch initialization to finish", "+\t\t\t\t\twhile (manager.batchContainerInitializations == JavaModelManager.BATCH_INITIALIZATION_IN_PROGRESS) {", "+\t\t\t\t\t\tif (subMonitor != null) {", "+\t\t\t\t\t\t\tsubMonitor.subTask(manager.batchContainerInitializationsProgress.subTaskName);", "+\t\t\t\t\t\t\tsubMonitor.worked(manager.batchContainerInitializationsProgress.getWorked());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tsynchronized(manager) {", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tmanager.wait(100);", "+\t\t\t\t\t\t\t} catch (InterruptedException e) {", "+\t\t\t\t\t\t\t\t// continue", "+\t\t\t\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t// initialize delta state", "-\t\t\t\tmanager.deltaState.rootsAreStale = true; // in case it was already initialized before we cleaned up the source attachment proprties", "-\t\t\t\tmanager.deltaState.initializeRoots();", "-\t\t\t\tmanager.batchContainerInitializationsProgress.set(null);", "+\t\t\t\tif (subMonitor != null)", "+\t\t\t\t\tsubMonitor.done();", "+\t\t\t\tmanager.batchContainerInitializationsProgress.initializeAfterLoadMonitor.set(null);", "+\t\t\t", "+\t\t\t// avoid leaking source attachment properties (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=183413 )", "+\t\t\tif (monitor != null)", "+\t\t\t\tmonitor.subTask(Messages.javamodel_resetting_source_attachment_properties);", "+\t\t\tfinal IJavaProject[] projects = manager.getJavaModel().getJavaProjects();", "+\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\t\tIClasspathEntry[] classpath;", "+\t\t\t\ttry {", "+\t\t\t\t\tclasspath = ((JavaProject) projects[i]).getResolvedClasspath();", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t// project no longer exist: ignore", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (classpath != null) {", "+\t\t\t\t\tfor (int j = 0, length2 = classpath.length; j < length2; j++) {", "+\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "+\t\t\t\t\t\tif (entry.getSourceAttachmentPath() != null)", "+\t\t\t\t\t\t\tUtil.setSourceAttachmentProperty(entry.getPath(), null);", "+\t\t\t\t\t\t// else source might have been attached by IPackageFragmentRoot#attachSource(...), we keep it", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\t// initialize delta state", "+\t\t\tif (monitor != null)", "+\t\t\t\tmonitor.subTask(Messages.javamodel_initializing_delta_state);", "+\t\t\tmanager.deltaState.rootsAreStale = true; // in case it was already initialized before we cleaned up the source attachment proprties", "+\t\t\tmanager.deltaState.initializeRoots(true/*initAfteLoad*/);", "+\t\t\tif (monitor != null)", "+\t\t\t\tmonitor.subTask(Messages.javamodel_configuring_searchengine);", "-\t\t\t\tif (monitor != null)", "-\t\t\t\t\tmonitor.subTask(Messages.javamodel_configuring_searchengine);", "-\t\t\t\t\t\tIJavaProject[] projects = null;", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tprojects = model.getJavaProjects();", "-\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\t// could not get Java projects: ignore", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (projects != null) {", "-\t\t\t\t\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\t\t\t\t\t\tIJavaProject project = projects[i];", "-\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\tif (JavaBuilder.DEBUG)", "-\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Touching \" + project.getElementName()); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\tproject.getProject().touch(progressMonitor2);", "-\t\t\t\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\t\t\t\t// could not touch this project: ignore", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\t\t\t\t\tIJavaProject project = projects[i];", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tif (JavaBuilder.DEBUG)", "+\t\t\t\t\t\t\t\t\tSystem.out.println(\"Touching \" + project.getElementName()); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tproject.getProject().touch(progressMonitor2);", "+\t\t\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\t\t\t// could not touch this project: ignore"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe638a1d3f62abca6f263bda6c97df0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "fc25b1b826e7fad7f1da04ab9d452bc350b24919", "commitAfterChange": "19b4c669e6d8313d03dbcc8b595622002fe408a5", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " public void configure(String[] argv)", "signatureAfterChange": " public void configure(String[] argv)", "diff": ["+\t\t\t\tif (currentArg.startsWith(\"-nullAnnotations:\")) { //$NON-NLS-1$", "+\t\t\t\t\tStringTokenizer tokenizer =", "+\t\t\t\t\t\tnew StringTokenizer(currentArg.substring(\"-nullAnnotations:\".length()), \",\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\t\tString token = tokenizer.nextToken();", "+\t\t\t\t\t\tif (token.startsWith(\"nullable=\")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NullableAnnotationName, token.substring(\"nullable=\".length())); //$NON-NLS-1$", "+\t\t\t\t\t\t} else if (token.startsWith(\"nonnull=\")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NonNullAnnotationName, token.substring(\"nonnull=\".length())); //$NON-NLS-1$", "+\t\t\t\t\t\t} else if (token.equals(\"emulate\")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_EmulateNullAnnotationTypes, CompilerOptions.ENABLED);", "+\t\t\t\t\t\t} else if (token.equals(\"import\")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_DefaultImportNullAnnotationTypes, CompilerOptions.ENABLED);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthrow new IllegalArgumentException(", "+\t\t\t\t\t\t\t\tthis.bind(\"configure.unrecognized.nullannotation.option\", token)); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}"]}], "num": 13439}
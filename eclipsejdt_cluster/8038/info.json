{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da340be55baa2197d144e4b4139d596f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08bad76548974cfea537890853667680", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "8861b8acfd87086e544117143aef10af0195095f", "commitAfterChange": "e6a8418fa053d90159e93cddfdeaf1bb437e9155", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["-\t\t\t} ", "+\t\t\t}", "+\t\t\t// Report no implicit string conversion", "+\t\t\tif (optionID.equals(OPTION_ReportNoImplicitStringConversion)) {", "+\t\t\t\tif (optionValue.equals(ERROR)) {", "+\t\t\t\t\tthis.errorThreshold |= NoImplicitStringConversion;", "+\t\t\t\t\tthis.warningThreshold &= ~NoImplicitStringConversion;", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {", "+\t\t\t\t\tthis.errorThreshold &= ~NoImplicitStringConversion;", "+\t\t\t\t\tthis.warningThreshold |= NoImplicitStringConversion;", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "+\t\t\t\t\tthis.errorThreshold &= ~NoImplicitStringConversion;", "+\t\t\t\t\tthis.warningThreshold &= ~NoImplicitStringConversion;", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aa7d1a7b5e54a8d30cc55b8503746d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "cf3402778a386b4819e4d3554ae8d21d9e5326e6", "commitAfterChange": "56a4d388176794077c8c6fb2f22cd1defef6beb5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["-\t\t\t}\t\t\t// Report non-externalized string literals", "+\t\t\t}\t\t\t", "+\t\t\t// Report possible accidental boolean assignment", "+\t\t\tif(optionID.equals(OPTION_ReportPossibleAccidentalBooleanAssignment)){", "+\t\t\t\tif (optionValue.equals(ERROR)) {", "+\t\t\t\t\tthis.errorThreshold |= AccidentalBooleanAssign;", "+\t\t\t\t\tthis.warningThreshold &= ~AccidentalBooleanAssign;", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {", "+\t\t\t\t\tthis.errorThreshold &= ~AccidentalBooleanAssign;", "+\t\t\t\t\tthis.warningThreshold |= AccidentalBooleanAssign;", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "+\t\t\t\t\tthis.errorThreshold &= ~AccidentalBooleanAssign;", "+\t\t\t\t\tthis.warningThreshold &= ~AccidentalBooleanAssign;", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\t// Report non-externalized string literals"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dcd8a8bbea3a5200a2e33cbb9c68347", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "6dad91e4f298fff813aeb65b0b459a8698c68fdb", "commitAfterChange": "74ba53ab0437265c5342ec723f72d2aea81fd661", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["+\t\t\t// Report todo", "+\t\t\tif(optionID.equals(OPTION_ReportToDo)){", "+\t\t\t\tif (optionValue.equals(ERROR)) {", "+\t\t\t\t\tthis.errorThreshold |= ToDo;", "+\t\t\t\t\tthis.warningThreshold &= ~ToDo;", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {", "+\t\t\t\t\tthis.errorThreshold &= ~ToDo;", "+\t\t\t\t\tthis.warningThreshold |= ToDo;", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "+\t\t\t\t\tthis.errorThreshold &= ~ToDo;", "+\t\t\t\t\tthis.warningThreshold &= ~ToDo;", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t} ", "+\t\t\t// Report todo", "+\t\t\tif(optionID.equals(OPTION_ToDoTag)){", "+\t\t\t\tthis.toDoTag = optionValue.toCharArray();", "+\t\t\t\tcontinue;", "+\t\t\t} "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d11f55ae23490a9945c416587c56d9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "a466448c8c20caf6437280cc371e39e731c58c8c", "commitAfterChange": "a378fd4d849bd18205ff3b90c2e9bce96c37a3e7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tpublic CompilerOptions(Map settings)", "signatureAfterChange": "\r \tpublic CompilerOptions(Map settings)", "diff": ["+\t\t\t// Report unused parameter\r", "+\t\t\tif(optionID.equals(OPTION_ReportUnusedImport)){\r", "+\t\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\t\tthis.errorThreshold |= UnusedImport;\r", "+\t\t\t\t\tthis.warningThreshold &= ~UnusedImport;\r", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~UnusedImport;\r", "+\t\t\t\t\tthis.warningThreshold |= UnusedImport;\r", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~UnusedImport;\r", "+\t\t\t\t\tthis.warningThreshold &= ~UnusedImport;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t} \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8ace8eeb30a99a43becbfe068ee2f73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "7e47f9acc3454f5babc44432d7650b471f5736c6", "commitAfterChange": "75c0ccb1e2c68587a8e2efbb2a478d71f7d635f3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tpublic CompilerOptions(Map settings)", "signatureAfterChange": "\r \tpublic CompilerOptions(Map settings)", "diff": ["+\t\t\t// Define the JDK compliance level\r", "+\t\t\tif(optionID.equals(OPTION_Compliance)){\r", "+\t\t\t\tif (optionValue.equals(VERSION_1_1)) {\r", "+\t\t\t\t\tthis.complianceLevel = JDK1_1;\r", "+\t\t\t\t} else if (optionValue.equals(VERSION_1_2)) {\r", "+\t\t\t\t\tthis.complianceLevel = JDK1_2;\r", "+\t\t\t\t} else if (optionValue.equals(VERSION_1_3)) {\r", "+\t\t\t\t\tthis.complianceLevel = JDK1_3;\r", "+\t\t\t\t} else if (optionValue.equals(VERSION_1_4)) {\r", "+\t\t\t\t\tthis.complianceLevel = JDK1_4;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t} \r"]}], "num": 8038}
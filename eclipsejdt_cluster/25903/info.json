{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "290f6eff671acb2f40e204c99ef0f888", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "598c3ce81fb90fda1ff019135bbd4e01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "c6d4125101bf5167c8111f17bf85f3fddd64ca03", "commitAfterChange": "42809a61ef9e5b72c9cffca62cbb33391fa05b96", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(ISourceMethod sourceMethod, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(ISourceMethod sourceMethod, CompilationResult compilationResult)", "diff": ["-\t\t\tchar[][][] typeParameterBounds = sourceMethod.getTypeParameterBounds();", "-\t\t\ttypeParams = new TypeParameter[parameterCount];", "-\t\t\tfor (int i = 0; i < parameterCount; i++) {", "-\t\t\t\ttypeParams[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);", "+\t\t\tif (parameterCount > 0) { // method's type parameters must be null if no type parameter", "+\t\t\t\tchar[][][] typeParameterBounds = sourceMethod.getTypeParameterBounds();", "+\t\t\t\ttypeParams = new TypeParameter[parameterCount];", "+\t\t\t\tfor (int i = 0; i < parameterCount; i++) {", "+\t\t\t\t\ttypeParams[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);", "+\t\t\t\t}", "-\t\tmethod.modifiers = sourceMethod.getModifiers();", "+\t\tint modifiers = sourceMethod.getModifiers();", "+\t\tboolean isVarargs = (modifiers & AccVarargs) != 0;", "+\t\tmethod.modifiers = modifiers & ~AccVarargs;", "-\t\t\t\t\tfalse);", "+\t\t\t\t\tisVarargs && i == argumentCount-1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a88b8c7755d020cefbae3404c7ea747", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/TypeConverter.java", "commitBeforeChange": "c6d4125101bf5167c8111f17bf85f3fddd64ca03", "commitAfterChange": "42809a61ef9e5b72c9cffca62cbb33391fa05b96", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprivate static AbstractMethodDeclaration convert(IMethod method, IType type, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \t \tprivate static AbstractMethodDeclaration convert(IMethod method, IType type, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\t\tmethodDeclaration.modifiers = method.getFlags();", "+\t\tint flags = method.getFlags();", "+\t\tboolean isVarargs = Flags.isVarargs(flags);", "+\t\tmethodDeclaration.modifiers = flags & ~Flags.AccVarargs;", "+\t\t\tString argumentTypeName = argumentTypeNames[i];", "-\t\t\t\tcreateTypeReference(Signature.toString(argumentTypeNames[i]).toCharArray(), type),", "+\t\t\t\tcreateTypeReference(Signature.toString(argumentTypeName).toCharArray(), type),", "-\t\t\t\tfalse);", "+\t\t\t\tisVarargs && i == argumentCount-1);"]}], "num": 25903}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "87184faef10587d417bd80f380741b97", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "382e69815da93cf222235e3851186e51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic MethodBinding findExactMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findExactMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["-\t\tif (exactMethod != null && exactMethod.typeVariables == NoTypeVariables) {", "+\t\tif (exactMethod != null && exactMethod.typeVariables == Binding.NO_TYPE_VARIABLES) {", "-\t\t\t\t\t&& argumentTypes == NoParameters", "+\t\t\t\t\t&& argumentTypes == Binding.NO_PARAMETERS", "-\t\t\t\tif (exactMethod.typeVariables != NoTypeVariables || invocationSite.genericTypeArguments() != null) {", "+\t\t\t\tif (exactMethod.typeVariables != Binding.NO_TYPE_VARIABLES || invocationSite.genericTypeArguments() != null) {", "-\t\t\t\t\tif (!compatibleMethod.isValidBinding() && exactMethod.typeVariables != NoTypeVariables) {", "+\t\t\t\t\tif (!compatibleMethod.isValidBinding() && exactMethod.typeVariables != Binding.NO_TYPE_VARIABLES) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c6e367f0e5da3550930caa64adca4c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "af330be1052a8d3b1a31b10596d367fb42f89f79", "commitAfterChange": "b3a6b4ddf9d5bd5365b7e897739a001bb2ff860b", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["+\t\tMethodVerifier verifier = environment().methodVerifier();", "-\t\t\t\t\t\t\tif (currentMethod.areParametersEqual(matchingMethod)) {", "+\t\t\t\t\t\t\tif (verifier.doesMethodOverride(matchingMethod.original(), currentMethod.original())) {", "-\t\t\t\t\t\t\t\t\tif (matchingMethod.typeVariables != Binding.NO_TYPE_VARIABLES && invocationSite.genericTypeArguments() == null)", "-\t\t\t\t\t\t\t\t\t\tcontinue nextMethod; // keep inherited substituted methods to detect anonymous errors", "-\t\t\t\t\t\t\t\t\tif (matchingMethod.hasSubstitutedParameters() && !currentMethod.original().areParametersEqual(matchingMethod.original()))", "-\t\t\t\t\t\t\t\t\t\tcontinue nextMethod; // keep inherited substituted methods to detect anonymous errors"]}], "num": 37534}
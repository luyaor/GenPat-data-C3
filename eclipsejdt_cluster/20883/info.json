{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dab298c514be9bc86b513e78996e1a22", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62f1fe02ad6695a230ad77ea28ff8567", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "26ecbd70f644b3e526f4a51dee0b94e84d57cade", "commitAfterChange": "63af609b0c4ca15a76568f63423f1cb23d7be92e", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  public ParameterizedTypeBinding createParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType)", "signatureAfterChange": "  public ParameterizedTypeBinding createParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType)", "diff": ["+\treturn createParameterizedType(genericType, typeArguments, 0L, enclosingType);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c06734d714f2584f0cfc58a0b19a6251", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModifyingResourceTests.java", "commitBeforeChange": "eedafe9176d5ca60193623550822839844fd4aae", "commitAfterChange": "16a0328cb89c7e4d508e8edfc85e1af4879c13c7", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " protected IClasspathEntry[] createClasspath(String[] sourceFoldersAndPatterns, boolean hasInclusionPatterns, boolean hasExclusionPatterns)", "signatureAfterChange": " protected IClasspathEntry[] createClasspath(String[] foldersAndPatterns, boolean hasInclusionPatterns, boolean hasExclusionPatterns)", "diff": ["-protected IClasspathEntry[] createClasspath(String[] sourceFoldersAndPatterns, boolean hasInclusionPatterns, boolean hasExclusionPatterns) {", "-\tint length = sourceFoldersAndPatterns.length;", "+protected IClasspathEntry[] createClasspath(String[] foldersAndPatterns, boolean hasInclusionPatterns, boolean hasExclusionPatterns) {", "+\treturn createClasspath(null, foldersAndPatterns, hasInclusionPatterns, hasExclusionPatterns);", "+}", "-\t\tString src = sourceFoldersAndPatterns[i];", "-\t\t\tString patterns = sourceFoldersAndPatterns[i+1];", "-\t\t\tString patterns = sourceFoldersAndPatterns[i+increment-1];", "-\t\tclasspath[i/increment] = JavaCore.newSourceEntry(new Path(src), inclusionPatternPaths, exclusionPatternPaths, null); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8a5c89aa0ffa79782516e09f8960d90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "4b460199498c48cda44ce10125aa5901a10bff62", "commitAfterChange": "ccd12469d7fc21a8e1a0a597451a059df56002ad", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public AnnotationBinding createAnnotation(ReferenceBinding annotationType, ElementValuePair[] pairs)", "signatureAfterChange": " public AnnotationBinding createAnnotation(ReferenceBinding annotationType, ElementValuePair[] pairs)", "diff": ["-\t// cached info is array of already created annotation binding for this type", "-\tAnnotationBinding[] cachedInfo = (AnnotationBinding[])this.uniqueAnnotationBindings.get(annotationType);", "-\tboolean needToGrow = false;", "-\tint index = 0;", "-\tif (cachedInfo != null){", "-\t\tnextCachedType : ", "-\t\t\t// iterate existing parameterized for reusing one with same type arguments if any", "-\t\t\tfor (int max = cachedInfo.length; index < max; index++){", "-\t\t\t\tAnnotationBinding cachedType = cachedInfo[index];", "-\t\t\t\tif (cachedType == null) break nextCachedType;", "-\t\t\t\tElementValuePair[] elementValuePairs = cachedType.pairs;", "-\t\t\t\tint length2 = pairs.length;", "-\t\t\t\tif (length2 != elementValuePairs.length) continue nextCachedType;", "-\t\t\t\tloop: for (int i = 0; i < length2; i++) {", "-\t\t\t\t\tElementValuePair pair = elementValuePairs[i];", "-\t\t\t\t\t// loop on the given pair to make sure one will match", "-\t\t\t\t\tfor (int j = 0; j < length2; j++) {", "-\t\t\t\t\t\tElementValuePair pair2 = pairs[j];", "-\t\t\t\t\t\tif (pair.binding == pair2.binding) {", "-\t\t\t\t\t\t\tif (pair.value == null) {", "-\t\t\t\t\t\t\t\tif (pair2.value == null) {", "-\t\t\t\t\t\t\t\t\tcontinue loop;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcontinue nextCachedType;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tif (pair2.value == null", "-\t\t\t\t\t\t\t\t\t\t|| !pair2.value.equals(pair.value)) {", "-\t\t\t\t\t\t\t\t\tcontinue nextCachedType;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tcontinue loop;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\t// no match found for pair so we create a new annotation binding", "-\t\t\t\t\tcontinue nextCachedType;", "-\t\t\t\t}", "-\t\t\t\t// cached type match, reuse current", "-\t\t\t\treturn cachedType;", "-\t\t}", "-\t\tneedToGrow = true;", "-\t} else {", "-\t\tcachedInfo = new AnnotationBinding[1];", "-\t\tthis.uniqueAnnotationBindings.put(annotationType, cachedInfo);", "-\t}", "-\t// grow cache ?", "-\tint length = cachedInfo.length;", "-\tif (needToGrow && index == length){", "-\t\tSystem.arraycopy(cachedInfo, 0, cachedInfo = new AnnotationBinding[length*2], 0, length);", "-\t\tthis.uniqueAnnotationBindings.put(annotationType, cachedInfo);", "-\t}", "-\t// add new binding", "-\tAnnotationBinding annotationBinding = new AnnotationBinding(annotationType, pairs);", "-\tcachedInfo[index] = annotationBinding;", "-\treturn annotationBinding;", "+\treturn new AnnotationBinding(annotationType, pairs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb7b8670d70149c8c9a651872db61520", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 33, "signatureBeforeChange": "  public RawTypeBinding createRawType(ReferenceBinding genericType, ReferenceBinding enclosingType)", "signatureAfterChange": "  public RawTypeBinding createRawType(ReferenceBinding genericType, ReferenceBinding enclosingType)", "diff": ["-\t// cached info is array of already created raw types for this type", "-\tRawTypeBinding[] cachedInfo = (RawTypeBinding[])this.uniqueRawTypeBindings.get(genericType);", "-\tboolean needToGrow = false;", "-\tint index = 0;", "-\tif (cachedInfo != null){", "-\t\tnextCachedType :", "-\t\t\t// iterate existing parameterized for reusing one with same type arguments if any", "-\t\t\tfor (int max = cachedInfo.length; index < max; index++){", "-\t\t\t    RawTypeBinding cachedType = cachedInfo[index];", "-\t\t\t    if (cachedType == null) break nextCachedType;", "-\t\t\t    if (cachedType.actualType() != genericType) continue nextCachedType; // remain of unresolved type", "-\t\t\t    if (cachedType.enclosingType() != enclosingType) continue nextCachedType;", "-\t\t\t\t// all enclosing type match, reuse current", "-\t\t\t\treturn cachedType;", "-\t\t}", "-\t\tneedToGrow = true;", "-\t} else {", "-\t\tcachedInfo = new RawTypeBinding[1];", "-\t\tthis.uniqueRawTypeBindings.put(genericType, cachedInfo);", "-\t}", "-\t// grow cache ?", "-\tint length = cachedInfo.length;", "-\tif (needToGrow && index == length){", "-\t\tSystem.arraycopy(cachedInfo, 0, cachedInfo = new RawTypeBinding[length*2], 0, length);", "-\t\tthis.uniqueRawTypeBindings.put(genericType, cachedInfo);", "-\t}", "-\t// add new binding", "-\tRawTypeBinding rawType = new RawTypeBinding(genericType, enclosingType, this);", "-\tcachedInfo[index] = rawType;", "-\treturn rawType;", "-", "+\treturn this.typeSystem.getRawType(genericType, enclosingType, Binding.NO_ANNOTATIONS);"]}], "num": 20883}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c25461fb117422aeb89b0c8185de36d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4811df02820fa6f0cde9413771915402", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "44b2ae0b9ea2797846c8f36e5cf3be1acaab875d", "commitAfterChange": "0492d8e41c1aba4d81d43f5d644f4506ed10c8ab", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " MethodBinding inferInvocationType(Invocation invocation, TypeBinding[] argumentTypes, ParameterizedGenericMethodBinding method)", "signatureAfterChange": " MethodBinding inferInvocationType(Invocation invocation, TypeBinding[] argumentTypes, ParameterizedGenericMethodBinding method)", "diff": ["-\t\tif (haveProperTargetType || !invocation.getExpressionContext().definesTargetType()) {", "+\t\tboolean inferredInvocationType = false;", "+\t\tif (targetType != null || !invocation.getExpressionContext().definesTargetType()) {", "+\t\t\t\t\tinferredInvocationType = true;", "-\t\tif (!haveProperTargetType && invocation.getExpressionContext().definesTargetType())", "-\t\t\treturn method; // still not ready!", "-", "-\t\tif (finalMethod != null) {", "+\t\tif (inferredInvocationType) {", "+\t\t} else if (!haveProperTargetType && invocation.getExpressionContext().definesTargetType()) {", "+\t\t\treturn method; // still not ready!"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e38be39bfe3e70561c41b13c7311ecf5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public boolean checkNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " public boolean checkNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tboolean isNullable = false;", "+\t\t// 1. priority: @NonNull", "-\t\t\tscope.problemReporter().dereferencingNullableExpression(this, scope.environment());", "-\t\t\treturn true; // danger is definite.", "-\t\t\t// stopping analysis at this point requires that the above error is not suppressable", "-\t\t\t// unless suppressing all null warnings (otherwise we'd miss a stronger warning below).", "+\t\t\tisNullable = true;", "+\t\t// 2. priority: local with flow analysis (via the FlowContext)", "+\t} else if (isNullable) {", "+\t\t// 3. priority: @Nullable without a local", "+\t\tscope.problemReporter().dereferencingNullableExpression(this);", "+\t\treturn true;"]}], "num": 64666}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ff69aed0445aff771d62302a7f24ccb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31a7685162b60a33f42e71f5d38bd70f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "34524ca2a2726d3f2d12d7ec232f0ab3f3d44b88", "commitAfterChange": "bd9b7470ed45d9a74b5c4178e4b5a244ec7162c6", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic char[] findSource(IType type, String simpleSourceFileName)", "signatureAfterChange": " \tpublic char[] findSource(IType type, String simpleSourceFileName)", "diff": ["-\t\tif (this.rootPath != null) {", "-\t\t\tsource = getSourceForRootPath(this.rootPath, name);", "-\t\t}", "+\t\tJavaModelManager javaModelManager = JavaModelManager.getJavaModelManager();", "+\t\ttry {", "+\t\t\tjavaModelManager.cacheZipFiles(this); // Cache any zip files we open during this operation", "-\t\tif (source == null) {", "-\t\t\tcomputeAllRootPaths(type);", "-\t\t\tif (this.rootPaths != null) {", "-\t\t\t\tloop: for (Iterator iterator = this.rootPaths.iterator(); iterator.hasNext(); ) {", "-\t\t\t\t\tString currentRootPath = (String) iterator.next();", "-\t\t\t\t\tif (!currentRootPath.equals(this.rootPath)) {", "-\t\t\t\t\t\tsource = getSourceForRootPath(currentRootPath, name);", "-\t\t\t\t\t\tif (source != null) {", "-\t\t\t\t\t\t\t// remember right root path", "-\t\t\t\t\t\t\tthis.rootPath = currentRootPath;", "-\t\t\t\t\t\t\tbreak loop;", "+\t\t\tif (this.rootPath != null) {", "+\t\t\t\tsource = getSourceForRootPath(this.rootPath, name);", "+\t\t\t}", "+\t", "+\t\t\tif (source == null) {", "+\t\t\t\tcomputeAllRootPaths(type);", "+\t\t\t\tif (this.rootPaths != null) {", "+\t\t\t\t\tloop: for (Iterator iterator = this.rootPaths.iterator(); iterator.hasNext(); ) {", "+\t\t\t\t\t\tString currentRootPath = (String) iterator.next();", "+\t\t\t\t\t\tif (!currentRootPath.equals(this.rootPath)) {", "+\t\t\t\t\t\t\tsource = getSourceForRootPath(currentRootPath, name);", "+\t\t\t\t\t\t\tif (source != null) {", "+\t\t\t\t\t\t\t\t// remember right root path", "+\t\t\t\t\t\t\t\tthis.rootPath = currentRootPath;", "+\t\t\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t\t\t}", "+\t\t} finally {", "+\t\t\tjavaModelManager.flushZipFiles(this); // clean up cached zip files."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e480029c1443c2f7cf7f25d4b5d095f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "da8753945f9324ceda2d1052b9998ea992c54912", "commitAfterChange": "678850fe27109f883daa0f4585d44c71bef496d8", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic char[] findSource(IType type, String simpleSourceFileName)", "signatureAfterChange": " \tpublic char[] findSource(IType type, String simpleSourceFileName)", "diff": ["-\t\tif (this.rootPath != null) {", "-\t\t\tsource = getSourceForRootPath(this.rootPath, name);", "-\t\t}", "+\t\tJavaModelManager javaModelManager = JavaModelManager.getJavaModelManager();", "+\t\ttry {", "+\t\t\tjavaModelManager.cacheZipFiles(this); // Cache any zip files we open during this operation", "-\t\tif (source == null) {", "-\t\t\tcomputeAllRootPaths(type);", "-\t\t\tif (this.rootPaths != null) {", "-\t\t\t\tloop: for (Iterator iterator = this.rootPaths.iterator(); iterator.hasNext(); ) {", "-\t\t\t\t\tString currentRootPath = (String) iterator.next();", "-\t\t\t\t\tif (!currentRootPath.equals(this.rootPath)) {", "-\t\t\t\t\t\tsource = getSourceForRootPath(currentRootPath, name);", "-\t\t\t\t\t\tif (source != null) {", "-\t\t\t\t\t\t\t// remember right root path", "-\t\t\t\t\t\t\tthis.rootPath = currentRootPath;", "-\t\t\t\t\t\t\tbreak loop;", "+\t\t\tif (this.rootPath != null) {", "+\t\t\t\tsource = getSourceForRootPath(this.rootPath, name);", "+\t\t\t}", "+\t", "+\t\t\tif (source == null) {", "+\t\t\t\tcomputeAllRootPaths(type);", "+\t\t\t\tif (this.rootPaths != null) {", "+\t\t\t\t\tloop: for (Iterator iterator = this.rootPaths.iterator(); iterator.hasNext(); ) {", "+\t\t\t\t\t\tString currentRootPath = (String) iterator.next();", "+\t\t\t\t\t\tif (!currentRootPath.equals(this.rootPath)) {", "+\t\t\t\t\t\t\tsource = getSourceForRootPath(currentRootPath, name);", "+\t\t\t\t\t\t\tif (source != null) {", "+\t\t\t\t\t\t\t\t// remember right root path", "+\t\t\t\t\t\t\t\tthis.rootPath = currentRootPath;", "+\t\t\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t\t\t}", "+\t\t} finally {", "+\t\t\tjavaModelManager.flushZipFiles(this); // clean up cached zip files."]}], "num": 7903}
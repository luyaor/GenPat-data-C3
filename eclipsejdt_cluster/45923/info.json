{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5720b532f6ce0d31596ace13f26967f5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b50f64de25be610d9ba8882bd5587f4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 90, "signatureBeforeChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "diff": ["+\t\t// Expected types for javadoc", "+\t\t} else if (parent instanceof Javadoc) {", "+\t\t\tif (scope.kind == Scope.METHOD_SCOPE) {", "+\t\t\t\tMethodScope methodScope = (MethodScope) scope;", "+\t\t\t\tAbstractMethodDeclaration methodDecl = methodScope.referenceMethod();", "+\t\t\t\tif (methodDecl != null && methodDecl.binding != null) {", "+\t\t\t\t\tReferenceBinding[] exceptions = methodDecl.binding.thrownExceptions;", "+\t\t\t\t\tif (exceptions != null) {", "+\t\t\t\t\t\tfor (int i = 0; i < exceptions.length; i++) {", "+\t\t\t\t\t\t\taddExpectedType(exceptions[i]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f86deba2219642de8cc49205de8e605c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "c7a8b7fd1ce23a51c71adbc13895e1e7353a4cf1", "commitAfterChange": "60d259d5b1e0ff710248aa3b7ae16581d3024e86", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate ReferenceBinding findGroundTargetType(BlockScope blockScope, TypeBinding targetType, boolean argumentTypesElided)", "signatureAfterChange": "  \tprivate ReferenceBinding findGroundTargetType(BlockScope blockScope, TypeBinding targetType, boolean argumentTypesElided)", "diff": ["-\t\t\t\tif (!argumentTypesElided)", "-\t\t\t\t\treturn new InferenceContext18(blockScope).inferFunctionalInterfaceParameterization(this, blockScope, withWildCards);", "-\t\t\t\telse", "+\t\t\t\tif (!argumentTypesElided) {", "+\t\t\t\t\tInferenceContext18 freshInferenceContext = new InferenceContext18(blockScope);", "+\t\t\t\t\tReferenceBinding inferredType = freshInferenceContext.inferFunctionalInterfaceParameterization(this, blockScope, withWildCards);", "+\t\t\t\t\tfreshInferenceContext.cleanUp();", "+\t\t\t\t\treturn inferredType;", "+\t\t\t\t} else {", "+\t\t\t\t}"]}], "num": 45923}
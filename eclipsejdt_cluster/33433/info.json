{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "03a771809c189e5e1456aec2c54e9e39", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e6910e68e11b13e7d75b26fec4fe33f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "581702d71a138ac97fe73cfd2b06cc855f39a496", "commitAfterChange": "d47f7e16ee9a06ebea0c1bfa73440fda6af0235f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected boolean computeChildren(OpenableElementInfo info, IResource resource) throws JavaModelException", "signatureAfterChange": " protected boolean generateInfos(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["- */", "-protected boolean computeChildren(OpenableElementInfo info, IResource resource) throws JavaModelException {", "-\tArrayList vChildren = new ArrayList();", "-\tint kind = getKind();", "-\tString extType;", "-\tif (kind == IPackageFragmentRoot.K_SOURCE) {", "-\t\textType = EXTENSION_java;", "-\t} else {", "-\t\textType = EXTENSION_class;", "-\t}", "-\ttry {", "-\t\tchar[][] exclusionPatterns = ((PackageFragmentRoot)getPackageFragmentRoot()).fullExclusionPatternChars();", "-\t\tIResource[] members = ((IContainer) resource).members();", "-\t\tfor (int i = 0, max = members.length; i < max; i++) {", "-\t\t\tIResource child = members[i];", "-\t\t\tif (child.getType() != IResource.FOLDER", "-\t\t\t\t\t&& !Util.isExcluded(child, exclusionPatterns)) {", "-\t\t\t\tString extension = child.getProjectRelativePath().getFileExtension();", "-\t\t\t\tif (extension != null) {", "-\t\t\t\t\tif (extension.equalsIgnoreCase(extType)) {", "-\t\t\t\t\t\tIJavaElement childElement;", "-\t\t\t\t\t\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isValidCompilationUnitName(child.getName())) {", "-\t\t\t\t\t\t\tchildElement = getCompilationUnit(child.getName());", "-\t\t\t\t\t\t\tvChildren.add(childElement);", "-\t\t\t\t\t\t} else if (Util.isValidClassFileName(child.getName())) {", "-\t\t\t\t\t\t\tchildElement = getClassFile(child.getName());", "-\t\t\t\t\t\t\tvChildren.add(childElement);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t} catch (CoreException e) {", "-\t\tthrow new JavaModelException(e);", "-\t}", "-\tIJavaElement[] children = new IJavaElement[vChildren.size()];", "-\tvChildren.toArray(children);", "-\tinfo.setChildren(children);", "-\treturn true;", "+", "+\tint kind = getKind();", "+\tString extType;", "+\tif (kind == IPackageFragmentRoot.K_SOURCE) {", "+\t\textType = EXTENSION_java;", "+\t} else {", "+\t\textType = EXTENSION_class;", "+\t}", "+", "+\tArrayList vChildren = new ArrayList();", "+\ttry {", "+\t\tchar[][] exclusionPatterns = ((PackageFragmentRoot)getPackageFragmentRoot()).fullExclusionPatternChars();", "+\t\tIResource[] members = ((IContainer) underlyingResource).members();", "+\t\tfor (int i = 0, max = members.length; i < max; i++) {", "+\t\t\tIResource child = members[i];", "+\t\t\tif (child.getType() != IResource.FOLDER", "+\t\t\t\t\t&& !Util.isExcluded(child, exclusionPatterns)) {", "+\t\t\t\tString extension = child.getProjectRelativePath().getFileExtension();", "+\t\t\t\tif (extension != null) {", "+\t\t\t\t\tif (extension.equalsIgnoreCase(extType)) {", "+\t\t\t\t\t\tIJavaElement childElement;", "+\t\t\t\t\t\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isValidCompilationUnitName(child.getName())) {", "+\t\t\t\t\t\t\tchildElement = getCompilationUnit(child.getName());", "+\t\t\t\t\t\t\tvChildren.add(childElement);", "+\t\t\t\t\t\t} else if (Util.isValidClassFileName(child.getName())) {", "+\t\t\t\t\t\t\tchildElement = getClassFile(child.getName());", "+\t\t\t\t\t\t\tvChildren.add(childElement);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t} catch (CoreException e) {", "+\t\tthrow new JavaModelException(e);", "+\t}", "+\tIJavaElement[] children = new IJavaElement[vChildren.size()];", "+\tvChildren.toArray(children);", "+\tinfo.setChildren(children);", "+\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b7d1a944c0f40775d37d5d0ba601359", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "0efae52576e07ebd224a2451d252dd1a61534d03", "commitAfterChange": "8722bacd2644840da886ad1d13785a049b5d8dcf", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic IClasspathEntry[] getRawClasspath() throws JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getRawClasspath(boolean createMarkers, boolean logProblems) throws JavaModelException", "diff": ["+\t */", "+\tpublic IClasspathEntry[] getRawClasspath(boolean createMarkers, boolean logProblems) throws JavaModelException {", "+", "-\t\tclasspath = this.readClasspathFile(false/*don't create markers*/, true/*log problems*/);", "+\t\tclasspath = this.readClasspathFile(createMarkers, logProblems);"]}], "num": 33433}
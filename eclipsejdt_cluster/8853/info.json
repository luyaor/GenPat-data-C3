{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e19a8d526d2b5cbe11967ea87d16124", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9579d423144472a230aa77caaed858fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "6c76d390a016d2bc042688766f03adca637f8318", "commitAfterChange": "ae0b30b76dcbe89d5bd08d53d907ae7218823168", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": " MethodBinding inferInvocationType(Invocation invocation, TypeBinding[] argumentTypes, ParameterizedGenericMethodBinding method)", "signatureAfterChange": " MethodBinding inferInvocationType(Invocation invocation, TypeBinding[] argumentTypes, ParameterizedGenericMethodBinding method)", "diff": ["-\t\t\t// start over from a previous candidate but discard its type variable instantiations", "-\t\t\t// TODO: should we retain any instantiations of type variables not owned by the method? ", "-\t\t\tBoundSet result = null;", "-\t\t\ttry {", "-\t\t\t\tresult = inferInvocationType(this.currentBounds, targetType, invocation, original);", "-\t\t\t} catch (InferenceFailureException e) {", "-\t\t\t\t// no solution, but do more checks below", "+\t\t\tBoundSet result = (BoundSet) this.solutionsPerTargetType.get(targetType);", "+\t\t\tif (result == null) {", "+\t\t\t\t// start over from a previous candidate but discard its type variable instantiations", "+\t\t\t\t// TODO: should we retain any instantiations of type variables not owned by the method? ", "+\t\t\t\ttry {", "+\t\t\t\t\tresult = inferInvocationType(this.currentBounds, targetType, invocation, original);", "+\t\t\t\t} catch (InferenceFailureException e) {", "+\t\t\t\t\t// no solution, but do more checks below", "+\t\t\t\t}", "+\t\t\t\t\tthis.solutionsPerTargetType.put(targetType, new Solution(finalMethod, result));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be33233a9aaa907b4fdff0a51e655b2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "6c76d390a016d2bc042688766f03adca637f8318", "commitAfterChange": "ae0b30b76dcbe89d5bd08d53d907ae7218823168", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 38, "signatureBeforeChange": "  \tpublic boolean rebindInnerPolies(MethodBinding method, InvocationSite site)", "signatureAfterChange": "  \tpublic boolean rebindInnerPolies(MethodBinding method, InvocationSite site)", "diff": ["-\t\tif ((targetType == null || !targetType.isProperType(true)) && site.getExpressionContext() == ExpressionContext.VANILLA_CONTEXT) {", "-\t\t\t// in this case we don't yet have the solution, compute it now:", "-\t\t\ttry {", "-\t\t\t\tbounds = inferInvocationType(this.currentBounds, null, site, method);", "-\t\t\t} catch (InferenceFailureException e) {", "-\t\t\t\treturn false;", "+\t\tif (targetType == null || !targetType.isProperType(true)) {", "+\t\t\tif (site.getExpressionContext() == ExpressionContext.VANILLA_CONTEXT) {", "+\t\t\t\t// in this case we don't yet have the solution, compute it now:", "+\t\t\t\ttry {", "+\t\t\t\t\tbounds = inferInvocationType(this.currentBounds, null, site, method);", "+\t\t\t\t} catch (InferenceFailureException e) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tif (bounds == null)", "+\t\t\t\t\treturn false;", "-\t\t\tif (bounds == null)", "-\t\t\t\treturn false;", "+\t\t} else {", "+\t\t\tSolution solution = (Solution) this.solutionsPerTargetType.get(targetType);", "+\t\t\tif (solution != null && solution.bounds != null)", "+\t\t\t\tbounds = solution.bounds;"]}], "num": 8853}
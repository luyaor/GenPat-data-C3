{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "583080bf5798a034c80c280aff60233a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8908b86689a173de471e72681fa713c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/TypeNameMatch.java", "commitBeforeChange": "6d01e4ebe1c118a0c419b75b0fb080cfaf7251e3", "commitAfterChange": "029ecda8642c825aa67d5cb4d406e2fb27fbac64", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 10, "signatureBeforeChange": " public TypeNameMatch(IType type)", "signatureAfterChange": " public int hashCode()", "diff": ["-public TypeNameMatch(IType type) {", "-\tthis.type = type;", "-}", "+ */", "+public int hashCode() {", "+\treturn this.type.hashCode();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b011cc3e0d551c9800e8b3079899abc0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "028715233e83730a9b58b487ee5c57b64348364c", "commitAfterChange": "76623358e8f03500966e9b9a0c7cbdeda3393726", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprotected void addToBuildSpec(String builderID) throws CoreException", "signatureAfterChange": " \tprotected void addToBuildSpec(String builderID) throws CoreException", "diff": ["-\t\tICommand javaCommand = getJavaCommand(description);", "+\t\tint javaCommandIndex = getJavaCommandIndex(description.getBuildSpec());", "-\t\tif (javaCommand == null) {", "+\t\tif (javaCommandIndex == -1) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d627d8fff46bf5f62588ad6d974be388", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "b1909bb0c4bbb70fecea5345c2e954fa4204b1dd", "commitAfterChange": "1ef42230a28632657bfac5df1d197b6d35dcc83d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate static boolean checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType, TypeBinding originalParameterType)", "signatureAfterChange": " \tprivate static int checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType, TypeBinding originalParameterType)", "diff": ["-\tprivate static boolean checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType, TypeBinding originalParameterType) {", "+\tprivate static int checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType, TypeBinding originalParameterType) {", "-\t\t    \treturn true; // unsafeWildcardInvocation", "+\t\t    \treturn INVOCATION_ARGUMENT_WILDCARD;", "-\t\tif (argumentType != checkedParameterType) {", "-\t\t\tif (argumentType.needsUncheckedConversion(checkedParameterType)) {", "-\t\t\t\tscope.problemReporter().unsafeTypeConversion(argument, argumentType, checkedParameterType);", "-\t\t\t}", "+\t\tif (argumentType != checkedParameterType && argumentType.needsUncheckedConversion(checkedParameterType)) {", "+\t\t\tscope.problemReporter().unsafeTypeConversion(argument, argumentType, checkedParameterType);", "+\t\t\treturn INVOCATION_ARGUMENT_UNCHECKED;", "-\t\treturn false;", "+\t\treturn INVOCATION_ARGUMENT_OK;"]}], "num": 14135}
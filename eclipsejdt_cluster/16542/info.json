{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1dd27d9f4d337c2a92b5c7bc0641b070", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19d178a9a37f6a5e110faa8c0e3d61ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "cbe2b622e81a27ceffd382724966e1dd065a9d5c", "commitAfterChange": "5f8bc31fdd9227264ffdb0d653c171e78b54416c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding candidateMethod)", "signatureAfterChange": " \t \tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding method)", "diff": ["-\tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding candidateMethod) {", "-\t\treturn this.isExactMethodReference();", "+\tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding method) {", "+\t\tif (!this.isExactMethodReference()) {", "+\t\t\treturn false;", "+\t\t}", "+\t\treturn super.isPertinentToApplicability(targetType, method);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6e52cb97b4e907a4d670569b9aa5987", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "36f18984332c17b4f3416bf96bf11f035f368dfc", "commitAfterChange": "cfa46c438969c215e6ff9812212b2c63288e6c8a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " private boolean mustImplementAbstractMethod(MethodBinding abstractMethod)", "signatureAfterChange": " private boolean mustImplementAbstractMethod(MethodBinding abstractMethod)", "diff": ["-\t\tif (this.type.implementsInterface(declaringClass, false))", "-\t\t\treturn !this.type.isAbstract();", "+\t\tif (this.type.implementsInterface(declaringClass, false)) {", "+\t\t\tif (this.type.isAbstract()) return false; // leave it for the subclasses", "+\t\t\tif (!superclass.implementsInterface(declaringClass, true)) // only if a superclass does not also implement the interface", "+\t\t\t\treturn true;", "+\t\t}"]}], "num": 16542}
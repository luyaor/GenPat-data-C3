{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a53efac0ddb38b2fa3b16196415c87d0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89982ffc2fa437db5edfe3bc5a631c3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HandleFactory.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic IJavaElement createElement(final AstNode toBeFound, CompilationUnitDeclaration parsedUnit, final Openable openable)", "signatureAfterChange": " \tpublic IJavaElement createElement(final ASTNode toBeFound, CompilationUnitDeclaration parsedUnit, final Openable openable)", "diff": ["-\tpublic IJavaElement createElement(final AstNode toBeFound, CompilationUnitDeclaration parsedUnit, final Openable openable) {", "+\tpublic IJavaElement createElement(final ASTNode toBeFound, CompilationUnitDeclaration parsedUnit, final Openable openable) {", "-\t\tclass Visitor extends AbstractSyntaxTreeVisitorAdapter {", "+\t\tclass Visitor extends ASTVisitor {", "-\t\t\t", "-\t\t\tpublic boolean visit(AnonymousLocalTypeDeclaration node, BlockScope scope) {", "-\t\t\t\tcurrentElement = updateOccurenceCount(((IMember)currentElement).getType(\"\", 1)); //$NON-NLS-1$", "-\t\t\t\tif (node == toBeFound) throw new EndVisit();", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tpublic void endVisit(AnonymousLocalTypeDeclaration node, BlockScope scope) {", "-\t\t\t\tcurrentElement = currentElement.getParent();", "-\t\t\t}", "-\t\t\tpublic boolean visit(LocalTypeDeclaration node, BlockScope scope) {", "-\t\t\t\tcurrentElement = updateOccurenceCount(((IMember)currentElement).getType(new String(node.name), 1));", "+\t\t\tpublic boolean visit(TypeDeclaration node, BlockScope scope) {", "+\t\t\t\tif ((node.bits & ASTNode.IsAnonymousTypeMASK) != 0) {", "+\t\t\t\t\tcurrentElement = updateOccurenceCount(((IMember)currentElement).getType(\"\", 1)); //$NON-NLS-1$", "+\t\t\t\t} else {", "+\t\t\t\t\tcurrentElement = updateOccurenceCount(((IMember)currentElement).getType(new String(node.name), 1));", "+\t\t\t\t}", "-\t\t\tpublic void endVisit(LocalTypeDeclaration node, BlockScope scope) {", "-\t\t\t\tcurrentElement = currentElement.getParent();", "+\t\t\tpublic void endVisit(TypeDeclaration node, BlockScope scope) {", "+\t\t\t\tif ((node.bits & ASTNode.IsMemberTypeMASK) != 0) {", "+\t\t\t\t\tcurrentElement = ((IType)currentElement).getDeclaringType();", "+\t\t\t\t} else {", "+\t\t\t\t\tcurrentElement = currentElement.getParent();", "+\t\t\t\t}", "-\t\t\tpublic boolean visit(MemberTypeDeclaration node, ClassScope scope) {", "+\t\t\tpublic boolean visit(TypeDeclaration node, ClassScope scope) {", "-\t\t\tpublic void endVisit(MemberTypeDeclaration node, ClassScope scope) {", "-\t\t\t\tcurrentElement = ((IType)currentElement).getDeclaringType();", "+\t\t\tpublic void endVisit(TypeDeclaration node, ClassScope scope) {", "+\t\t\t\tcurrentElement = currentElement.getParent();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbd5aad40fec8274a341b8216fe4861e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "593b7c498e35f1adb3620eff493d0f4b5e771b68", "commitAfterChange": "3b34d278ba258a10a58d188a2047da908229b941", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public boolean breaksOut()", "signatureAfterChange": " public boolean breaksOut(final char[] label)", "diff": ["-public boolean breaksOut() {", "-\tclass ControlStructureVisitor extends ASTVisitor {", "-\t\tStatement body;", "+// Inspect AST nodes looking for a break statement, descending into nested control structures only when necessary (looking for a break with a specific label.)", "+public boolean breaksOut(final char[] label) {", "+\treturn new ASTVisitor() {", "+\t\t", "-\t\tpublic ControlStructureVisitor(Statement statement) {", "-\t\t\tthis.body = statement;", "-\t\t\tthis.breaksOut = false;", "-\t\t}", "-\t\tpublic boolean visit(TypeDeclaration type, BlockScope skope) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tpublic boolean visit(TypeDeclaration type, ClassScope skope) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tpublic boolean visit(LambdaExpression lambda, BlockScope skope) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tpublic boolean visit(WhileStatement whileStatement, BlockScope skope) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tpublic boolean visit(DoStatement doStatement, BlockScope skope) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tpublic boolean visit(ForeachStatement foreachStatement, BlockScope skope) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tpublic boolean visit(ForStatement forStatement, BlockScope skope) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tpublic boolean visit(SwitchStatement switchStatement, BlockScope skope) {", "-\t\t\treturn false;", "-\t\t}", "+\t\tpublic boolean visit(TypeDeclaration type, BlockScope skope) { return label != null; }", "+\t\tpublic boolean visit(TypeDeclaration type, ClassScope skope) { return label != null; }", "+\t\tpublic boolean visit(LambdaExpression lambda, BlockScope skope) { return label != null;}", "+\t\tpublic boolean visit(WhileStatement whileStatement, BlockScope skope) { return label != null; }", "+\t\tpublic boolean visit(DoStatement doStatement, BlockScope skope) { return label != null; }", "+\t\tpublic boolean visit(ForeachStatement foreachStatement, BlockScope skope) { return label != null; }", "+\t\tpublic boolean visit(ForStatement forStatement, BlockScope skope) { return label != null; }", "+\t\tpublic boolean visit(SwitchStatement switchStatement, BlockScope skope) { return label != null; }", "+\t\t", "-\t    \tthis.breaksOut = true;", "+\t\t\tif (label == null || CharOperation.equals(label,  breakStatement.label))", "+\t\t\t\tthis.breaksOut = true;", "+\t\t", "-\t\t\tthis.body.traverse(this, null);", "+\t\t\tStatement.this.traverse(this, null);", "-\t}", "-\treturn new ControlStructureVisitor(this).breaksOut();", "+\t}.breaksOut();", "+}"]}], "num": 41320}
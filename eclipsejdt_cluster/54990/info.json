{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc35b80c62e1c291ca17a55ad882adc0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "097e257ed61b23089b1b5aa8c7b8d172", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2548efb91bb743c25fd3bab3833473b467f314a0", "commitAfterChange": "f4a6a4aada4b614e2acc0db0bdcfb1edac95da6d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void acceptType( \t\tchar[] packageName, \t\tchar[] simpleTypeName, \t\tchar[][] enclosingTypeNames, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "signatureAfterChange": " \tpublic void acceptType( \t\tchar[] packageName, \t\tchar[] simpleTypeName, \t\tchar[][] enclosingTypeNames, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "diff": ["-\t */", "-\tpublic void acceptType(", "-\t\tchar[] packageName,", "-\t\tchar[] simpleTypeName,", "-\t\tchar[][] enclosingTypeNames,", "-\t\tint modifiers,", "-\t\tAccessRestriction accessRestriction) {", "-", "-\t\tif (this.options.checkDeprecation && (modifiers & ClassFileConstants.AccDeprecated) != 0) return;", "-", "-\t\tif (this.options.checkVisibility) {", "-\t\t\tif((modifiers & ClassFileConstants.AccPublic) == 0) {", "-\t\t\t\tif((modifiers & ClassFileConstants.AccPrivate) != 0) return;", "-", "-\t\t\t\tchar[] currentPackage = CharOperation.concatWith(this.unitScope.fPackage.compoundName, '.');", "-\t\t\t\tif(!CharOperation.equals(packageName, currentPackage)) return;", "-\t\t\t}", "-\t\t}", "-", "-\t\tint accessibility = IAccessRule.K_ACCESSIBLE;", "-\t\tif(accessRestriction != null) {", "-\t\t\tswitch (accessRestriction.getProblemId()) {", "-\t\t\t\tcase IProblem.ForbiddenReference:", "-\t\t\t\t\tif (this.options.checkForbiddenReference) {", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\taccessibility = IAccessRule.K_NON_ACCESSIBLE;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IProblem.DiscouragedReference:", "-\t\t\t\t\tif (this.options.checkDiscouragedReference) {", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\taccessibility = IAccessRule.K_DISCOURAGED;", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-", "-\t\tif(this.acceptedTypes == null) {", "-\t\t\tthis.acceptedTypes = new ObjectVector();", "-\t\t}", "-\t\tthis.acceptedTypes.add(new AcceptedType(packageName, simpleTypeName, enclosingTypeNames, modifiers, accessibility));", "-\t}", "+\t */", "+\tpublic void acceptType(", "+\t\tchar[] packageName,", "+\t\tchar[] simpleTypeName,", "+\t\tchar[][] enclosingTypeNames,", "+\t\tint modifiers,", "+\t\tAccessRestriction accessRestriction) {", "+\t\t", "+\t\t// does not check cancellation for every types to avoid performance loss", "+\t\tif ((this.foundTypesCount % CHECK_CANCEL_FREQUENCY_IN_FIND_TYPES) == 0) checkCancel();", "+\t\tthis.foundTypesCount++;", "+\t\t", "+\t\tif (this.options.checkDeprecation && (modifiers & ClassFileConstants.AccDeprecated) != 0) return;", "+", "+\t\tif (this.options.checkVisibility) {", "+\t\t\tif((modifiers & ClassFileConstants.AccPublic) == 0) {", "+\t\t\t\tif((modifiers & ClassFileConstants.AccPrivate) != 0) return;", "+", "+\t\t\t\tchar[] currentPackage = CharOperation.concatWith(this.unitScope.fPackage.compoundName, '.');", "+\t\t\t\tif(!CharOperation.equals(packageName, currentPackage)) return;", "+\t\t\t}", "+\t\t}", "+", "+\t\tint accessibility = IAccessRule.K_ACCESSIBLE;", "+\t\tif(accessRestriction != null) {", "+\t\t\tswitch (accessRestriction.getProblemId()) {", "+\t\t\t\tcase IProblem.ForbiddenReference:", "+\t\t\t\t\tif (this.options.checkForbiddenReference) {", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\taccessibility = IAccessRule.K_NON_ACCESSIBLE;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IProblem.DiscouragedReference:", "+\t\t\t\t\tif (this.options.checkDiscouragedReference) {", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\taccessibility = IAccessRule.K_DISCOURAGED;", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+", "+\t\tif(this.acceptedTypes == null) {", "+\t\t\tthis.acceptedTypes = new ObjectVector();", "+\t\t}", "+\t\tthis.acceptedTypes.add(new AcceptedType(packageName, simpleTypeName, enclosingTypeNames, modifiers, accessibility));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4735300938ef527be09213749f9f2229", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a8e18c32dc806d659bf5d8f2444be6f4268510d4", "commitAfterChange": "73072a493445774e509d0c21f3c359a527fa380b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void acceptInterface( \t\tchar[] packageName, \t\tchar[] interfaceName, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "signatureAfterChange": " \tpublic void acceptType( \t\tchar[] packageName, \t\tchar[] typeName, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "diff": ["+\tpublic void acceptType(", "+\t\tchar[] typeName,", "+\t\tchar[] fullyQualifiedName = CharOperation.concat(packageName, typeName, '.');", "+\t\t\tif (mustQualifyType(packageName, typeName)) {", "+\t\t\t\tcompletionName = typeName;", "+\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, typeName);", "+\t\t\trelevance += computeRelevanceForExpectingType(packageName, typeName);", "+\t\t\t", "+\t\t\tint kind = modifiers & (IConstants.AccInterface+IConstants.AccEnum+IConstants.AccAnnotation);", "+\t\t\tswitch (kind) {", "+\t\t\t\tcase IConstants.AccAnnotation:", "+\t\t\t\tcase IConstants.AccAnnotation+IConstants.AccInterface:", "+\t\t\t\t\trelevance += computeRelevanceForAnnotation();", "+\t\t\t\t\trelevance += computeRelevanceForInterface();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstants.AccEnum:", "+\t\t\t\t\trelevance += computeRelevanceForEnum();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstants.AccInterface:", "+\t\t\t\t\trelevance += computeRelevanceForInterface();", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\trelevance += computeRelevanceForClass();", "+\t\t\t\t\trelevance += computeRelevanceForException(typeName);", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tproposal.setSignature(createNonGenericTypeSignature(packageName, typeName));", "+\t\t\tproposal.setTypeName(typeName);", "-\t */", "-\tpublic void acceptInterface(", "-\t\tchar[] packageName,", "-\t\tchar[] interfaceName,", "-\t\tint modifiers,", "-\t\tAccessRestriction accessRestriction) {", "-", "-\t\tchar[] fullyQualifiedName = CharOperation.concat(packageName, interfaceName, '.');", "-\t\tchar[] completionName = fullyQualifiedName;", "-", "-\t\tif (this.knownTypes.containsKey(completionName)) return;", "-", "-\t\tthis.knownTypes.put(completionName, this);", "-", "-\t\tint accessibility = IAccessRule.K_ACCESSIBLE;", "-\t\tif(accessRestriction != null) {", "-\t\t\tswitch (accessRestriction.getProblemId()) {", "-\t\t\t\tcase IProblem.ForbiddenReference:", "-\t\t\t\t\tif(this.options.checkForbiddenReference) return;", "-\t\t\t\t\taccessibility = IAccessRule.K_NON_ACCESSIBLE;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IProblem.DiscouragedReference:", "-\t\t\t\t\tif(this.options.checkDiscouragedReference) return;", "-\t\t\t\t\taccessibility = IAccessRule.K_DISCOURAGED;", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tboolean isQualified = true;", "-\t\tint relevance = computeBaseRelevance();", "-\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\trelevance += computeRelevanceForRestrictions(accessibility);", "-\t\tif (this.resolvingImports) {", "-\t\t\tcompletionName = CharOperation.concat(completionName, new char[] { ';' });", "-\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, fullyQualifiedName);", "-\t\t} else {", "-\t\t\tif (mustQualifyType(packageName, interfaceName)) {", "-\t\t\t\tif (packageName == null || packageName.length == 0)", "-\t\t\t\t\tif (this.unitScope != null && this.unitScope.fPackage.compoundName != CharOperation.NO_CHAR_CHAR)", "-\t\t\t\t\t\treturn; // ignore types from the default package from outside it", "-\t\t\t} else {", "-\t\t\t\tcompletionName = interfaceName;", "-\t\t\t\tisQualified = false;", "-\t\t\t}", "-\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, interfaceName);", "-\t\t\trelevance += computeRelevanceForExpectingType(packageName, interfaceName);", "-\t\t\trelevance += computeRelevanceForInterface();", "-\t\t\trelevance += computeRelevanceForQualification(isQualified);", "-\t\t}", "-\t\t", "-\t\tthis.noProposal = false;", "-\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\tproposal.setDeclarationSignature(packageName);", "-\t\t\tproposal.setSignature(createNonGenericTypeSignature(packageName, interfaceName));", "-\t\t\tproposal.setPackageName(packageName);", "-\t\t\tproposal.setTypeName(interfaceName);", "-\t\t\tproposal.setCompletion(completionName);", "-\t\t\tproposal.setFlags(modifiers | Flags.AccInterface);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82b8bfd05e8f2690feada398511bc584", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "43bf4677e87b76a460506f46871dac9cbe16b176", "commitAfterChange": "f13a740e3b814a194962fd0ef85df91efde745be", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void acceptType( \t\tchar[] packageName, \t\tchar[] typeName, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "signatureAfterChange": " \tpublic void acceptType( \t\tchar[] packageName, \t\tchar[] simpleTypeName, \t\tchar[][] enclosingTypeNames, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "diff": ["-\t\tchar[] typeName,", "+\t\tchar[] simpleTypeName,", "+\t\tchar[][] enclosingTypeNames,", "-\t\tchar[] fullyQualifiedName = CharOperation.concat(packageName, typeName, '.');", "-\t\tchar[] completionName = fullyQualifiedName;", "-", "-\t\tif (this.knownTypes.containsKey(completionName)) return;", "-", "-\t\tthis.knownTypes.put(completionName, this);", "-", "+\t\tif (this.options.checkVisibility) {", "+\t\t\tif((modifiers & IConstants.AccPublic) == 0) {", "+\t\t\t\tif((modifiers & IConstants.AccPrivate) != 0) return;", "+\t\t\t\t", "+\t\t\t\tchar[] currentPackage = CharOperation.concatWith(this.unitScope.fPackage.compoundName, '.');", "+\t\t\t\tif(!CharOperation.equals(packageName, currentPackage)) return;", "+\t\t\t}", "+\t\t}", "+\t\t", "-\t\tboolean isQualified = true;", "+\t\tif(acceptedTypes == null) {", "+\t\t\tacceptedTypes = new ObjectVector();", "+\t\t}", "+\t\tacceptedTypes.add(new AcceptedType(packageName, simpleTypeName, enclosingTypeNames, modifiers, accessibility));", "+\t}", "-\t\tif (this.resolvingImports) {", "-\t\t\tcompletionName = CharOperation.concat(completionName, new char[] { ';' });", "-\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, fullyQualifiedName);", "-\t\t} else {", "-\t\t\tif (mustQualifyType(packageName, typeName)) {", "-\t\t\t\tif (packageName == null || packageName.length == 0)", "-\t\t\t\t\tif (this.unitScope != null && this.unitScope.fPackage.compoundName != CharOperation.NO_CHAR_CHAR)", "-\t\t\t\t\t\treturn; // ignore types from the default package from outside it", "-\t\t\t} else {", "-\t\t\t\tcompletionName = typeName;", "-\t\t\t\tisQualified = false;", "-\t\t\t}", "-\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, typeName);", "-\t\t\trelevance += computeRelevanceForExpectingType(packageName, typeName);", "-\t\t\trelevance += computeRelevanceForQualification(isQualified);", "-\t\t\t", "-\t\t\tint kind = modifiers & (IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation);", "-\t\t\tswitch (kind) {", "-\t\t\t\tcase IConstants.AccAnnotation:", "-\t\t\t\tcase IConstants.AccAnnotation | IConstants.AccInterface:", "-\t\t\t\t\trelevance += computeRelevanceForAnnotation();", "-\t\t\t\t\trelevance += computeRelevanceForInterface();", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IConstants.AccEnum:", "-\t\t\t\t\trelevance += computeRelevanceForEnum();", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IConstants.AccInterface:", "-\t\t\t\t\trelevance += computeRelevanceForInterface();", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault:", "-\t\t\t\t\trelevance += computeRelevanceForClass();", "-\t\t\t\t\trelevance += computeRelevanceForException(typeName);", "-\t\t\t\t\tbreak;", "-\t\t\t}"]}], "num": 54990}
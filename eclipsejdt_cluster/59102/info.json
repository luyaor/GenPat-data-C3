{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b72096e8deb598b7c0ae30a1bb05400", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03c7ef5ad8070dd64e4db3db1e8a0f63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/State.java", "commitBeforeChange": "c9d8f7d33a12a3fca98b81131e389ee514f5477e", "commitAfterChange": "f2df113c95a9e172c6339459cdc3cce6bb01fe4b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r \r void write(DataOutputStream out) throws IOException", "signatureAfterChange": "\r \r void write(DataOutputStream out) throws IOException", "diff": ["-\t\t\t\tif (!internedQualifiedNames.contains(qName)) // remember the names have been interned\r", "+\t\t\t\tif (!internedQualifiedNames.contains(qName)) { // remember the names have been interned\r", "+\t\t\t\t\tfor (int k = 0, sLength = qName.length; k < sLength; k++) {\r", "+\t\t\t\t\t\tchar[] sName = qName[k];\r", "+\t\t\t\t\t\tif (!internedSimpleNames.contains(sName)) // remember the names have been interned\r", "+\t\t\t\t\t\t\tinternedSimpleNames.add(sName);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "-\tlength = internedQualifiedNames.size();\r", "-\tout.writeInt(length);\r", "-\tfor (int i = 0; i < length; i++)\r", "-\t\twriteNames((char[][]) internedQualifiedNames.get(i), out);\r", "+\t// now write the interned qualified names as arrays of interned simple names\r", "+\tlength = internedQualifiedNames.size();\r", "+\tout.writeInt(length);\r", "+\tfor (int i = 0; i < length; i++) {\r", "+\t\tchar[][] qName = (char[][]) internedQualifiedNames.get(i);\r", "+\t\tint qLength = qName.length;\r", "+\t\tout.writeInt(qLength);\r", "+\t\tfor (int j = 0; j < qLength; j++)\r", "+\t\t\tout.writeInt(internedSimpleNames.indexOf(qName[j]));\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee592fb0e722f8e23cbba183376db3f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "c4112ab397da10b85cbb2a3f081c4c91ed7c7975", "commitAfterChange": "2077df1da6fa132fd5beb7d042b102e760cf8cbf", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  void write(DataOutputStream out) throws IOException", "signatureAfterChange": "  void write(DataOutputStream out) throws IOException", "diff": ["+ * char[][]\tInterned root names", "+\tSimpleLookupTable internedRootNames = new SimpleLookupTable(3);", "+\t\t\tchar[][] rNames = collection.rootReferences;", "+\t\t\tfor (int j = 0, m = rNames.length; j < m; j++) {", "+\t\t\t\tchar[] rName = rNames[j];", "+\t\t\t\tif (!internedRootNames.containsKey(rName)) // remember the names have been interned", "+\t\t\t\t\tinternedRootNames.put(rName, new Integer(internedRootNames.elementSize));", "+\t\t\t}", "-\tchar[][] internedArray = new char[internedSimpleNames.elementSize][];", "+\tchar[][] internedArray = new char[internedRootNames.elementSize][];", "+\tObject[] rootNames = internedRootNames.keyTable;", "+\tObject[] positions = internedRootNames.valueTable;", "+\tfor (int i = positions.length; --i >= 0; ) {", "+\t\tif (positions[i] != null) {", "+\t\t\tint index = ((Integer) positions[i]).intValue();", "+\t\t\tinternedArray[index] = (char[]) rootNames[i];", "+\t\t}", "+\t}", "+\twriteNames(internedArray, out);", "+\t// now write the interned simple names", "+\tinternedArray = new char[internedSimpleNames.elementSize][];", "-\tObject[] positions = internedSimpleNames.valueTable;", "+\tpositions = internedSimpleNames.valueTable;", "+\t\t\t\tchar[][] rNames = collection.rootReferences;", "+\t\t\t\tint rLength = rNames.length;", "+\t\t\t\tout.writeInt(rLength);", "+\t\t\t\tfor (int j = 0; j < rLength; j++) {", "+\t\t\t\t\tindex = (Integer) internedRootNames.get(rNames[j]);", "+\t\t\t\t\tout.writeInt(index.intValue());", "+\t\t\t\t}"]}], "num": 59102}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f47600b41043708217ae2162e1958315", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d357ff0eeb5788382719e1b0f4e156f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate static boolean resolveSubstituteConstraints(Scope scope, TypeVariableBinding[] typeVariables, InferenceContext inferenceContext, boolean considerEXTENDSConstraints)", "signatureAfterChange": "  \tprivate static boolean resolveSubstituteConstraints(Scope scope, TypeVariableBinding[] typeVariables, InferenceContext inferenceContext, boolean considerEXTENDSConstraints)", "diff": ["-\t\t\t\t\t\t\tif (equalSubstitute == current) {", "+\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(equalSubstitute, current)) {", "-\t\t\t\t\t\t\t\t\tif (equalSubstitute != current && equalSubstitute != null) {", "+\t\t\t\t\t\t\t\t\tif (TypeBinding.notEquals(equalSubstitute, current) && equalSubstitute != null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2b1d866f9b6455c88630a28d70123e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["-\t\t\t\t\t\tif (castElementType == exprElementType) {", "+\t\t\t\t\t\tif (TypeBinding.equalsEquals(castElementType, exprElementType)) {", "-\t\t\t\t\t\t\t\t\t\tif ((castTypeMethods[i].returnType != expressionTypeMethods[j].returnType)", "+\t\t\t\t\t\t\t\t\t\tif ((TypeBinding.notEquals(castTypeMethods[i].returnType, expressionTypeMethods[j].returnType))"]}], "num": 34833}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1e30d85c42b199b850f2ce8dd25fbef", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "372f0c3841ee2aceaede95b48b39b0fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "13991702fc2c3e2b678aa9ef22a4a03b29ad808b", "commitAfterChange": "3a8b2107b944f5a4646c23d5049199496436bc6e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, SourceMethodElementInfo methodInfo, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, SourceMethodElementInfo methodInfo, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\t\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=324850, Even when this type is being constructed", "-\t\t   on behalf of a 1.4 project we must internalize type variables properly in order to be able to", "-\t\t   recognize usages of them in the method signature, to apply substitutions and thus to be able to", "-\t\t   detect overriding in the presence of generics. If we simply drop them, when the method signature", "-\t\t   refers to the type parameter, we won't know it should be bound to the type parameter and perform", "-\t\t   incorrect lookup and may mistakenly end up with missing types", "-\t\t */", "+\t\t// convert 1.5 specific constructs only if compliance is 1.5 or above", "-\t\tchar[][] typeParameterNames = methodInfo.getTypeParameterNames();", "-\t\tif (typeParameterNames != null) {", "-\t\t\tint parameterCount = typeParameterNames.length;", "-\t\t\tif (parameterCount > 0) { // method's type parameters must be null if no type parameter", "-\t\t\t\tchar[][][] typeParameterBounds = methodInfo.getTypeParameterBounds();", "-\t\t\t\ttypeParams = new TypeParameter[parameterCount];", "-\t\t\t\tfor (int i = 0; i < parameterCount; i++) {", "-\t\t\t\t\ttypeParams[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);", "+\t\t// Digest type parameters if compliance level of current project or its prerequisite is >= 1.5", "+\t\t// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=323633 && https://bugs.eclipse.org/bugs/show_bug.cgi?id=305259", "+\t\tif (this.has1_5Compliance || this.problemReporter.options.complianceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\t/* convert type parameters */", "+\t\t\tchar[][] typeParameterNames = methodInfo.getTypeParameterNames();", "+\t\t\tif (typeParameterNames != null) {", "+\t\t\t\tint parameterCount = typeParameterNames.length;", "+\t\t\t\tif (parameterCount > 0) { // method's type parameters must be null if no type parameter", "+\t\t\t\t\tchar[][][] typeParameterBounds = methodInfo.getTypeParameterBounds();", "+\t\t\t\t\ttypeParams = new TypeParameter[parameterCount];", "+\t\t\t\t\tfor (int i = 0; i < parameterCount; i++) {", "+\t\t\t\t\t\ttypeParams[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6678a772cb9d433f1f2f0b6f8c07b101", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "e5f01975d99954b1483781c8c9c08a016b294102", "commitAfterChange": "6c19a02159d7dcaca8c603f73a96718172825002", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate TypeDeclaration convert(SourceType typeHandle, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \tprivate TypeDeclaration convert(SourceType typeHandle, CompilationResult compilationResult) throws JavaModelException", "diff": ["-", "+\t\t}", "+\t\t// Digest type parameters if compliance level of current project or its prerequisite is >= 1.5", "+\t\t// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=323633 && https://bugs.eclipse.org/bugs/show_bug.cgi?id=305259", "+\t\tif (this.has1_5Compliance || this.problemReporter.options.complianceLevel >= ClassFileConstants.JDK1_5) {"]}], "num": 9303}
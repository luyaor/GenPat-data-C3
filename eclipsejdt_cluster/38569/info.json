{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "81ff37e99ba222ca6e04fe31537f5e57", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e411207ee8116162b0c5f2e3e4e21f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 262, "methodNumberAfterChange": 262, "signatureBeforeChange": " protected void resetStacks()", "signatureAfterChange": " protected void resetStacks()", "diff": ["-\tastPtr = -1;", "-\tastLengthPtr = -1;", "-\texpressionPtr = -1;", "-\texpressionLengthPtr = -1;", "-\tidentifierPtr = -1;\t", "-\tidentifierLengthPtr\t= -1;", "-\tintPtr = -1;", "-\tnestedMethod[nestedType = 0] = 0; // need to reset for further reuse", "-\tvariablesCounter[nestedType] = 0;", "-\tdimensions = 0 ;", "-\trealBlockStack[realBlockPtr = 0] = 0;", "-\trecoveredStaticInitializerStart = 0;", "-\tlistLength = 0;", "+\tthis.astPtr = -1;", "+\tthis.astLengthPtr = -1;", "+\tthis.expressionPtr = -1;", "+\tthis.expressionLengthPtr = -1;", "+\tthis.identifierPtr = -1;\t", "+\tthis.identifierLengthPtr\t= -1;", "+\tthis.intPtr = -1;", "+\tthis.nestedMethod[this.nestedType = 0] = 0; // need to reset for further reuse", "+\tthis.variablesCounter[this.nestedType] = 0;", "+\tthis.dimensions = 0 ;", "+\tthis.realBlockStack[this.realBlockPtr = 0] = 0;", "+\tthis.recoveredStaticInitializerStart = 0;", "+\tthis.listLength = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "591cb28cb97e95a147d39917561a16e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "0574a8adbdf81e334e9d9100de29641afab2bba5", "commitAfterChange": "7186c730d487753734b0547672e890b50fededb4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t} else { // cf. MessageSend.generateCode()", "+\t\t} else { // cf. MessageSend.generateCode()'s call to CodeStream.getConstantPoolDeclaringClass. We have extracted the relevant portions sans side effect here. ", "-\t\t\t\tTypeBinding declaringClass = CodeStream.getConstantPoolDeclaringClass(currentScope, this.binding, this.lhs.resolvedType, false);", "-\t\t\t\tif (declaringClass instanceof ReferenceBinding)", "-\t\t\t\t\tthis.binding.declaringClass = (ReferenceBinding) declaringClass;", "+\t\t\t\tif (TypeBinding.notEquals(this.binding.declaringClass, this.lhs.resolvedType.erasure())) {", "+\t\t\t\t\tif (!this.binding.declaringClass.canBeSeenBy(currentScope)) {", "+\t\t\t\t\t\tthis.binding = new MethodBinding(this.binding, (ReferenceBinding) this.lhs.resolvedType.erasure());", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "840e847aa4f5121bf47f14c988819b8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "a53da0027d2af09b928dca6fa330419b46afa0ca", "commitAfterChange": "792caf681810140ce615d98d3abfdde62639719c", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["-\t\tif (compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\tif (!method.isConstructor()) {", "-\t\t\tif (nullTagBits != (method.returnType.tagBits & TagBits.AnnotationNullMASK)) {", "-\t\t\t\tTypeReference returnTypeRef = ((MethodDeclaration)methodDecl).returnType;", "-\t\t\t\tif (method.returnType.isBaseType()) {", "-\t\t\t\t\tif (method.returnType.id != TypeIds.T_void)  // type annotations are *always* illegal for 'void'", "-\t\t\t\t\t\tthis.scope.problemReporter().illegalAnnotationForBaseType(returnTypeRef, methodDecl.annotations, nullTagBits);", "-\t\t\t\t} else {", "-\t\t\t\t\t// annotation was mistakenly associated to the method, create the annotated type now:", "-\t\t\t\t\tmethod.returnType = this.scope.environment().pushAnnotationIntoType(method.returnType, returnTypeRef, nullTagBits);", "+\t\t\tTypeReference returnTypeRef = ((MethodDeclaration)methodDecl).returnType;", "+\t\t\tif (compilerOptions.sourceLevel < ClassFileConstants.JDK1_8) {", "+\t\t\t\tif (!this.scope.validateNullAnnotation(nullTagBits, returnTypeRef, methodDecl.annotations))", "+\t\t\t\t\tmethod.tagBits &= ~TagBits.AnnotationNullMASK;", "+\t\t\t} else {", "+\t\t\t\tif (nullTagBits != (method.returnType.tagBits & TagBits.AnnotationNullMASK)) {", "+\t\t\t\t\tif (!this.scope.validateNullAnnotation(nullTagBits, returnTypeRef, methodDecl.annotations)) {", "+\t\t\t\t\t\tmethod.returnType = method.returnType.unannotated();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// annotation was mistakenly associated to the method, create the annotated type now:", "+\t\t\t\t\t\tmethod.returnType = this.scope.environment().createAnnotatedType(method.returnType, nullTagBits);", "+\t\t\t\t\t}", "+\t\t\t\t\tmethod.tagBits &= ~TagBits.AnnotationNullMASK;", "-\t\t\t\tmethod.tagBits &= ~TagBits.AnnotationNullMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88ea137fa9e97f3ec77051b1a9794852", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (isPolyExpression()) {", "-\t\t\t\tif (this.expectedType == null) {", "-\t\t\t\t\tthis.polyExpressionScope = scope; // preserve for eventual resolution/error reporting.", "-\t\t\t\t}", "-\t\t\t}", "-", "-\t\t\t/* Not reached as of now as we don't evaluate conditional expressions multiple times, left in for now.", "-\t\t\t   If in future, we change things so control reaches here, a precondition is that this.expectedType is", "-\t\t\t   the final target type.", "-\t\t\t*/", "+", "+\t\t\t", "+\t\t\tif (this.originalValueIfTrueType == null || !this.originalValueIfTrueType.isValidBinding())", "+\t\t\t\treturn this.resolvedType = null;", "+\t\t\tif (this.originalValueIfFalseType == null || !this.originalValueIfFalseType.isValidBinding())", "+\t\t\t\treturn this.resolvedType = null;", "-\t\t\t\tthis.polyExpressionScope = scope; // preserve for eventual resolution/error reporting.", "-\t\t\tcomputeConversions(scope, this.expectedType);", "-\t\t\treturn this.resolvedType = this.expectedType;", "+\t\t\treturn this.resolvedType = computeConversions(scope, this.expectedType) ? this.expectedType : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f13379507e9f7083f72867ecee45c747", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreatePackageFragmentOperation.java", "commitBeforeChange": "1e77fadf417c78089a8bce12d01b049277ef0c41", "commitAfterChange": "caf3736c8c3269393f7e0bedb9e633769506e2e8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void executeOperation() throws JavaModelException", "signatureAfterChange": " protected void executeOperation() throws JavaModelException", "diff": ["-\tIPackageFragmentRoot root = (IPackageFragmentRoot) getParentElement();", "-\tString[] names = Util.getTrimmedSimpleNames(fName);", "-\tbeginTask(Util.bind(\"operation.createPackageFragmentProgress\"), names.length); //$NON-NLS-1$", "+\tPackageFragmentRoot root = (PackageFragmentRoot) getParentElement();", "+\tbeginTask(Util.bind(\"operation.createPackageFragmentProgress\"), this.pkgName.length); //$NON-NLS-1$", "-\tString sideEffectPackageName = \"\"; //$NON-NLS-1$", "-\tArrayList results = new ArrayList(names.length);", "-\tchar[][] inclusionPatterns = ((PackageFragmentRoot)root).fullInclusionPatternChars();", "-\tchar[][] exclusionPatterns = ((PackageFragmentRoot)root).fullExclusionPatternChars();", "+\tString[] sideEffectPackageName = CharOperation.NO_STRINGS; ", "+\tArrayList results = new ArrayList(this.pkgName.length);", "+\tchar[][] inclusionPatterns = root.fullInclusionPatternChars();", "+\tchar[][] exclusionPatterns = root.fullExclusionPatternChars();", "-\tfor (i = 0; i < names.length; i++) {", "-\t\tString subFolderName = names[i];", "-\t\tsideEffectPackageName += subFolderName;", "+\tfor (i = 0; i < this.pkgName.length; i++) {", "+\t\tString subFolderName = this.pkgName[i];", "+\t\tsideEffectPackageName = Util.arrayConcat(sideEffectPackageName, subFolderName);", "-\t\tsideEffectPackageName += '.';", "-\t\tresultElements = new IJavaElement[results.size()];", "-\t\tresults.toArray(resultElements);", "+\t\tthis.resultElements = new IJavaElement[results.size()];", "+\t\tresults.toArray(this.resultElements);"]}], "num": 38569}
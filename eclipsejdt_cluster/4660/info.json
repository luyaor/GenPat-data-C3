{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9d961dd012b3974ccc3ba3e547e706c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a4eaa1ae36d9b016c2ac39aa8e5e529", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "6e5d8fb1fa59c43c60c58828e1e292aaafa3465f", "commitAfterChange": "108910be72e713e6e104fafacd635988e5383096", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 51, "signatureBeforeChange": "  protected void resolveAnnotations(BlockScope scope)", "signatureAfterChange": "  protected void resolveAnnotations(Scope scope)", "diff": ["-protected void resolveAnnotations(BlockScope scope) {", "-\tif (this.annotations != null) {", "-\t\tresolveAnnotations(scope, this.annotations, new Annotation.TypeUseBinding(Binding.TYPE_USE));", "+protected void resolveAnnotations(Scope scope) {", "+\tAnnotation[][] annotationsOnDimensions = getAnnotationsOnDimensions();", "+\tif (this.annotations != null || annotationsOnDimensions != null) {", "+\t\tBlockScope resolutionScope = Scope.typeAnnotationsResolutionScope(scope);", "+\t\tif (resolutionScope != null) {", "+\t\t\tif (this.annotations != null) {", "+\t\t\t\tint annotationsLevels = this.annotations.length;", "+\t\t\t\tfor (int i = 0; i < annotationsLevels; i++) {", "+\t\t\t\t\tif (this.annotations[i] != null) {", "+\t\t\t\t\t\tresolveAnnotations(resolutionScope, this.annotations[i], new Annotation.TypeUseBinding(isWildcard() ? Binding.TYPE_PARAMETER : Binding.TYPE_USE));", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\tif (annotationsOnDimensions != null) {", "+\t\t\t\tfor (int i = 0, length = annotationsOnDimensions.length; i < length; i++) {", "+\t\t\t\t\tAnnotation [] dimensionAnnotations = annotationsOnDimensions[i];", "+\t\t\t\t\tif (dimensionAnnotations  != null) {", "+\t\t\t\t\t\tresolveAnnotations(resolutionScope, dimensionAnnotations, new Annotation.TypeUseBinding(Binding.TYPE_USE));", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e5b5899e3eb4140a59dc8637ca2ad8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "73197a47274e75e8fe1581fdac3a086fb2ddf471", "commitAfterChange": "340440fc2f9b9eb03b89c385f562976def2c6c0e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate void resolveAnnotations( \t\t\tBlockScope scope, \t\t\tAnnotation[] annotations, \t\t\tBinding currentBinding)", "signatureAfterChange": "  \tprivate void resolveAnnotations(BlockScope scope, Annotation[] annotations, Binding currentBinding)", "diff": ["-\tprivate void resolveAnnotations(", "-\t\t\tBlockScope scope,", "-\t\t\tAnnotation[] annotations,", "-\t\t\tBinding currentBinding) {", "-\t\tASTNode.resolveAnnotations(scope, annotations, currentBinding, true);", "-\t\tElement element = null;", "+\tprivate void resolveAnnotations(BlockScope scope, Annotation[] annotations, Binding currentBinding) {", "-\t\tfor (Annotation annotation : annotations) {", "-\t\t\tAnnotationBinding binding = annotation.getCompilerAnnotation();", "-\t\t\tif (binding != null) { // binding should be resolved, but in case it's not, ignore it", "+\t\tint length = annotations == null ? 0 : annotations.length;", "+\t\tif (length == 0)", "+\t\t\treturn;", "+\t\t", "+\t\tASTNode.resolveAnnotations(scope, annotations, currentBinding, true);", "+\t\tElementImpl element = (ElementImpl) _factory.newElement(currentBinding);", "+\t\tAnnotationBinding [] annotationBindings = element.getPackedAnnotationBindings(); // discovery is never in terms of repeating annotation.", "+\t\tfor (AnnotationBinding binding : annotationBindings) {", "+\t\t\tif (binding != null) { // binding should be resolved, but in case it's not, ignore it: it could have been wrapped into a container.", "-\t\t\t\tif (element == null) {", "-\t\t\t\t\telement = _factory.newElement(currentBinding);", "-\t\t\t\t}"]}], "num": 4660}
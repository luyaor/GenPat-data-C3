{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee629a9028f85a6ae8d599386a0a4fd5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "157a11ce493e5c9de5e5f7db3cfa56ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "a8073c80a69f6c184e71b3ada3faf15faa3ff3ae", "commitAfterChange": "33e49b6e14282ee69dc2c2cf0c73bec5e674cdf2", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic static AnnotationBinding [] resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient, boolean copySE8AnnotationsToType)", "signatureAfterChange": " \tpublic static AnnotationBinding [] resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient, boolean copySE8AnnotationsToType)", "diff": ["+\t\t\tMap implicitContainerAnnotations = null;", "-\t\t\t\tTypeBinding annotationType = annotation.getAnnotationType();", "+\t\t\t\tReferenceBinding annotationType = annotation.getAnnotationType();", "-\t\t\t\t\t\tfoundDuplicate = true;", "-\t\t\t\t\t\tif (distinctAnnotations == annotations) {", "-\t\t\t\t\t\t\tSystem.arraycopy(distinctAnnotations, 0, distinctAnnotations = new AnnotationBinding[length], 0, length);", "+\t\t\t\t\t\tif (annotationType.isRepeatableAnnotation()) {", "+\t\t\t\t\t\t\tReferenceBinding resolvedContainer = annotationType.resolveContainerAnnotation();", "+\t\t\t\t\t\t\tif (resolvedContainer != null) {", "+\t\t\t\t\t\t\t\t// Since this is a repeated annotation, we need to check if the container is also used - so store it", "+\t\t\t\t\t\t\t\t// in a map of (container's ReferenceBinding -> the repeated source Annotation)", "+\t\t\t\t\t\t\t\tif (implicitContainerAnnotations == null) implicitContainerAnnotations = new HashMap(3);", "+\t\t\t\t\t\t\t\timplicitContainerAnnotations.put(resolvedContainer, sourceAnnotations[i]);", "+\t\t\t\t\t\t\t\tAnnotation.checkAnnotationContainerTarget(sourceAnnotations[i], scope, annotationType, resolvedContainer);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tfoundDuplicate = true;", "+\t\t\t\t\t\t\tif (distinctAnnotations == annotations) {", "+\t\t\t\t\t\t\t\tSystem.arraycopy(distinctAnnotations, 0, distinctAnnotations = new AnnotationBinding[length], 0, length);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tdistinctAnnotations[j] = null; // report it only once", "+\t\t\t\t\t\t\tscope.problemReporter().duplicateAnnotation(sourceAnnotations[j], scope.compilerOptions().sourceLevel);", "-\t\t\t\t\t\tdistinctAnnotations[j] = null; // report it only once", "-\t\t\t\t\t\tscope.problemReporter().duplicateAnnotation(sourceAnnotations[j]);", "-\t\t\t\t\tscope.problemReporter().duplicateAnnotation(sourceAnnotations[i]);", "+\t\t\t\t\tscope.problemReporter().duplicateAnnotation(sourceAnnotations[i], scope.compilerOptions().sourceLevel);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (implicitContainerAnnotations != null) {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tif (distinctAnnotations[i] == null) continue;", "+\t\t\t\t\tAnnotation annotation = sourceAnnotations[i];", "+\t\t\t\t\tReferenceBinding annotationType = distinctAnnotations[i].getAnnotationType();", "+\t\t\t\t\tif (implicitContainerAnnotations.containsKey(annotationType)) {", "+\t\t\t\t\t\tscope.problemReporter().repeatedAnnotationWithContainer((Annotation) implicitContainerAnnotations.get(annotationType), annotation);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ace121144845435c406d111ca1f28a12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "0328928ec6e943d2d976356cfda47a4325798cf6", "commitAfterChange": "f53fc12a4e16e7e99a89753f24ef3e0e0388e214", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "  \tprivate void findTypesAndSubpackages( \t\tchar[] token, \t\tPackageBinding packageBinding)", "signatureAfterChange": "  \tprivate void findTypesAndSubpackages( \t\tchar[] token, \t\tPackageBinding packageBinding)", "diff": ["+\t\t", "+\t\tif (unitScope != null) {", "+\t\t\tint typeLength = qualifiedName.length;", "+\t\t\tSourceTypeBinding[] types = unitScope.topLevelTypes;", "+", "+\t\t\tfor (int i = 0, length = types.length; i < length; i++) {", "+\t\t\t\tSourceTypeBinding sourceType = types[i]; ", "+\t", "+\t\t\t\tchar[] qualifiedSourceTypeName = CharOperation.concatWith(sourceType.compoundName, '.');", "+\t\t\t\t", "+\t\t\t\tif (typeLength > qualifiedSourceTypeName.length)\tcontinue;", "+\t\t\t\tif (!CharOperation.prefixEquals(qualifiedName, qualifiedSourceTypeName, false))\tcontinue;", "+", "+\t\t\t\tint relevance = computeBaseRelevance();", "+\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "+\t\t\t\trelevance += computeRelevanceForCaseMatching(qualifiedName, qualifiedSourceTypeName);", "+\t\t\t\trelevance += computeRelevanceForExpectingType(sourceType);", "+\t\t\t\trelevance += computeRelevanceForQualification(false);", "+", "+\t\t\t\tif (sourceType.isClass()){", "+\t\t\t\t\trelevance += computeRelevanceForClass();", "+\t\t\t\t\trelevance += computeRelevanceForException(sourceType.sourceName);", "+\t\t\t\t\trequestor.acceptClass(", "+\t\t\t\t\t\tsourceType.qualifiedPackageName(),", "+\t\t\t\t\t\tsourceType.sourceName(),", "+\t\t\t\t\t\tsourceType.sourceName(),", "+\t\t\t\t\t\tsourceType.modifiers,", "+\t\t\t\t\t\tstartPosition - offset, ", "+\t\t\t\t\t\tendPosition - offset,", "+\t\t\t\t\t\trelevance);", "+\t\t\t\t} else {", "+\t\t\t\t\trelevance += computeRelevanceForInterface();", "+\t\t\t\t\trequestor.acceptInterface(", "+\t\t\t\t\t\tsourceType.qualifiedPackageName(),", "+\t\t\t\t\t\tsourceType.sourceName(),", "+\t\t\t\t\t\tsourceType.sourceName(),", "+\t\t\t\t\t\tsourceType.modifiers,", "+\t\t\t\t\t\tstartPosition - offset,", "+\t\t\t\t\t\tendPosition - offset,", "+\t\t\t\t\t\trelevance);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae8dfad4f6348268f296fa892f6febf3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "abc14013a8fd8f8040bc625a426663caf110b8a2", "commitAfterChange": "f04bcab2628ef5d21c040097a5d26e48d3262568", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "  \tprivate void findTypesAndPackages(char[] token, Scope scope)", "signatureAfterChange": "  \tprivate void findTypesAndPackages(char[] token, Scope scope)", "diff": ["-", "-\t\tif (token.length == 0)", "-\t\t\treturn;", "-", "-\t\tfindKeywords(token, baseTypes, scope);", "-\t\tnameEnvironment.findTypes(token, this);", "-\t\tnameEnvironment.findPackages(token, this);", "+\t\t", "+\t\tif (token.length == 0) {", "+\t\t\tif(expectedTypesPtr > -1) {", "+\t\t\t\tfor (int i = 0; i <= expectedTypesPtr; i++) {", "+\t\t\t\t\tif(expectedTypes[i] instanceof ReferenceBinding) {", "+\t\t\t\t\t\tReferenceBinding refBinding = (ReferenceBinding)expectedTypes[i];", "+\t\t\t\t\t\tif(!unitScope.isDefinedInSameUnit(refBinding)) {", "+\t\t\t\t\t\t\tint relevance = R_DEFAULT + R_CASE + R_EXPECTED_TYPE;", "+\t\t\t\t\t\t\tif(refBinding.isClass()) {", "+\t\t\t\t\t\t\t\trelevance += computeRelevanceForClass();", "+\t\t\t\t\t\t\t\trequestor.acceptClass(", "+\t\t\t\t\t\t\t\t\trefBinding.qualifiedPackageName(),", "+\t\t\t\t\t\t\t\t\trefBinding.sourceName(),", "+\t\t\t\t\t\t\t\t\trefBinding.sourceName(),", "+\t\t\t\t\t\t\t\t\trefBinding.modifiers,", "+\t\t\t\t\t\t\t\t\tstartPosition - offset, ", "+\t\t\t\t\t\t\t\t\tendPosition - offset,", "+\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\t\t} else if (refBinding.isInterface()) {", "+\t\t\t\t\t\t\t\trelevance += computeRelevanceForInterface();", "+\t\t\t\t\t\t\t\trequestor.acceptInterface(", "+\t\t\t\t\t\t\t\t\trefBinding.qualifiedPackageName(),", "+\t\t\t\t\t\t\t\t\trefBinding.sourceName(),", "+\t\t\t\t\t\t\t\t\trefBinding.sourceName(),", "+\t\t\t\t\t\t\t\t\trefBinding.modifiers,", "+\t\t\t\t\t\t\t\t\tstartPosition - offset, ", "+\t\t\t\t\t\t\t\t\tendPosition - offset,", "+\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} ", "+\t\t} else {", "+\t\t\tfindKeywords(token, baseTypes, scope);", "+\t\t\tnameEnvironment.findTypes(token, this);", "+\t\t\tnameEnvironment.findPackages(token, this);", "+\t\t}"]}], "num": 11701}
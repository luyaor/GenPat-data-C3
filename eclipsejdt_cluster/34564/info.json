{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55fe3dcdeeac21c427b06276dc07bcf5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02d9f7284a16801bad5f8639986cb5fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ConditionalFlowInfo.java", "commitBeforeChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "commitAfterChange": "8f130374b1740d04a2a1a32967cf4d9130b4bd12", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 13, "signatureBeforeChange": "  public void updateConstantFieldsMask(FieldBinding field)", "signatureAfterChange": "  public boolean isPotentiallyAssigned(FieldBinding field)", "diff": ["+public boolean isPotentiallyAssigned(FieldBinding field) {", "+\treturn this.initsWhenTrue.isPotentiallyAssigned(field)", "+\t\t\t|| this.initsWhenFalse.isPotentiallyAssigned(field);", "-", "-public void updateConstantFieldsMask(FieldBinding field) {", "-\tthis.initsWhenTrue.updateConstantFieldsMask(field);", "-\tthis.initsWhenFalse.updateConstantFieldsMask(field);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab07dcf57c8167258cd029b026c36610", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/workspace/Converter/junit/textui/TestRunner.java", "commitBeforeChange": "5f14954289dcfe3aa64cd723a9ea9807dea33e05", "commitAfterChange": "4b4449dde49cdcaed9ae00d1ac057ecfeb8d8c23", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tstatic public void run(Test suite)", "signatureAfterChange": " \tstatic public TestResult run(Test test)", "diff": ["-\tstatic public void run(Test suite) {", "-\t\tTestRunner aTestRunner= new TestRunner();", "-\t\taTestRunner.doRun(suite, false);", "+\tstatic public TestResult run(Test test) {", "+\t\tTestRunner runner= new TestRunner();", "+\t\treturn runner.doRun(test);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb7b75418fd82259b71ed6a98aebd96e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ConditionalFlowInfo.java", "commitBeforeChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "commitAfterChange": "8f130374b1740d04a2a1a32967cf4d9130b4bd12", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void addConstantFieldsMask(UnconditionalFlowInfo other)", "signatureAfterChange": "  public boolean isDefinitelyAssigned(FieldBinding field)", "diff": ["+public boolean isDefinitelyAssigned(FieldBinding field) {", "+\treturn this.initsWhenTrue.isDefinitelyAssigned(field)", "+\t\t\t&& this.initsWhenFalse.isDefinitelyAssigned(field);", "-", "-public void addConstantFieldsMask(UnconditionalFlowInfo other) {", "-\tthis.initsWhenTrue.addConstantFieldsMask(other);", "-\tthis.initsWhenFalse.addConstantFieldsMask(other);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa280be9a3bd78b7c83dacc78ab9a35b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "9043b6a8e4132c7e53a6fb980711e9a0982fef9b", "commitAfterChange": "416292d2f4be39d514e933551cdaebb7c7ebd8a7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate void registerResult(TypeBinding targetType, MethodBinding declaration)", "signatureAfterChange": " \tprivate ReferenceExpression registerCopy(TypeBinding targetType, ReferenceExpression copy)", "diff": ["-\t// Cache compile time declaration against various target types, so repeat overload resolution and possibly type inference could be avoided.", "-\tprivate void registerResult(TypeBinding targetType, MethodBinding declaration) {", "-\t\tif (this.declarationPerTargetType == null)", "-\t\t\tthis.declarationPerTargetType = new HashMap<TypeBinding, MethodBinding>();", "-\t\tthis.declarationPerTargetType.put(targetType, declaration);", "-\t}", "+\t// Cache resolved copies against various target types, so repeat overload resolution and possibly type inference could be avoided.", "+\tprivate ReferenceExpression registerCopy(TypeBinding targetType, ReferenceExpression copy) {", "+\t\tif (this.copiesPerTargetType == null)", "+\t\t\tthis.copiesPerTargetType = new HashMap<TypeBinding, ReferenceExpression>();", "+\t\tthis.copiesPerTargetType.put(targetType, copy);", "+\t\treturn copy;"]}], "num": 34564}
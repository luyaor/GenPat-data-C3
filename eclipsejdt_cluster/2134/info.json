{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "380290a09971426463deed247b4dcdad", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "553678e97165c5dc1b39823b3625fdf6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "af79dfe4ab6f88841082d7727b71d3b65b4f7778", "commitAfterChange": "e097bd9e8b95f2f5601006e28238301c69bf5baf", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public TypeBinding copyAnnotations(TypeBinding annotatedType, TypeBinding unannotatedSubstite)", "signatureAfterChange": " public TypeBinding copyAnnotations(TypeBinding annotatedType, TypeBinding unannotatedSubstitute)", "diff": ["-public TypeBinding copyAnnotations(TypeBinding annotatedType, TypeBinding unannotatedSubstite) {", "+public TypeBinding copyAnnotations(TypeBinding annotatedType, TypeBinding unannotatedSubstitute) {", "-\t\treturn unannotatedSubstite;", "+\t\treturn unannotatedSubstitute;", "-\tif (unannotatedSubstite instanceof ReferenceBinding) {", "+\tif (unannotatedSubstitute instanceof ReferenceBinding) {", "-\t\tif (annotatedType.isParameterizedType() && unannotatedSubstite.isParameterizedType()) {", "-\t\t\tParameterizedTypeBinding unannotatedPTB = (ParameterizedTypeBinding) unannotatedSubstite;", "+\t\tif (annotatedType.isParameterizedType() && unannotatedSubstitute.isParameterizedType()) {", "+\t\t\tParameterizedTypeBinding unannotatedPTB = (ParameterizedTypeBinding) unannotatedSubstitute;", "-\t\tReferenceBinding newEnclosing = unannotatedSubstite.enclosingType();", "+\t\tReferenceBinding newEnclosing = unannotatedSubstitute.enclosingType();", "-\t\treturn createParameterizedType((ReferenceBinding)unannotatedSubstite.original(), newArguments, nullTagBits, newEnclosing);", "+\t\treturn createParameterizedType((ReferenceBinding)unannotatedSubstitute.original(), newArguments, nullTagBits, newEnclosing);", "-\t} else if (annotatedType instanceof ArrayBinding && unannotatedSubstite instanceof ArrayBinding) {", "+\t} else if (annotatedType instanceof ArrayBinding && unannotatedSubstitute instanceof ArrayBinding) {", "-\t\tTypeBinding newLeafType = unannotatedSubstite.leafComponentType(); ", "+\t\tTypeBinding newLeafType = unannotatedSubstitute.leafComponentType(); ", "-\t\treturn createArrayType(newLeafType, unannotatedSubstite.dimensions(), tagBitsOnDimensions);", "+\t\treturn createArrayType(newLeafType, unannotatedSubstitute.dimensions(), tagBitsOnDimensions);", "-\treturn unannotatedSubstite; // shouldn't happen actually", "+\treturn unannotatedSubstitute; // shouldn't happen actually"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4fad0a1847370b0a0e35691297a69e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "6d8036f4b0f90ef715394ba92952a819714c2135", "commitAfterChange": "02733ea32199eef92e7e8bc7be9f2db172e7eedd", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " protected void process(PotentialMatch potentialMatch, boolean bindingsWereCreated) throws CoreException", "signatureAfterChange": " protected void process(PossibleMatch possibleMatch, boolean bindingsWereCreated) throws CoreException", "diff": ["-protected void process(PotentialMatch potentialMatch, boolean bindingsWereCreated) throws CoreException {", "-\tthis.currentPotentialMatch = potentialMatch;", "-\tCompilationUnitDeclaration unit = potentialMatch.parsedUnit;", "+protected void process(PossibleMatch possibleMatch, boolean bindingsWereCreated) throws CoreException {", "+\tthis.currentPossibleMatch = possibleMatch;", "+\tCompilationUnitDeclaration unit = possibleMatch.parsedUnit;", "-\t\t\tif (this.currentPotentialMatch.openable instanceof ClassFile) {", "-\t\t\t\tClassFile classFile = (ClassFile) this.currentPotentialMatch.openable;", "-\t\t\t\tIBinaryType info = this.getBinaryInfo(classFile, this.currentPotentialMatch.resource);", "+\t\t\tif (this.currentPossibleMatch.openable instanceof ClassFile) {", "+\t\t\t\tClassFile classFile = (ClassFile) this.currentPossibleMatch.openable;", "+\t\t\t\tIBinaryType info = this.getBinaryInfo(classFile, this.currentPossibleMatch.resource);", "-\t\tmatchingNodeSet = this.currentPotentialMatch.matchingNodeSet;", "+\t\tmatchingNodeSet = this.currentPossibleMatch.matchingNodeSet;", "-\t\t\t\tSystem.out.println(\"Resolving \" + this.currentPotentialMatch.openable.toStringWithAncestors()); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"Resolving \" + this.currentPossibleMatch.openable.toStringWithAncestors()); //$NON-NLS-1$", "-\t\tthis.currentPotentialMatch = null;", "+\t\tthis.currentPossibleMatch = null;"]}], "num": 2134}
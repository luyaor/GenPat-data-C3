{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "066d5e5bc6323653e3865b137731114e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "965419497de4ebd58b86258b237b0036", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "470e8c33a7442e0e7175bf038b674be31dc41ef4", "commitAfterChange": "f3797939fa5164cd62a3ae51074dba1ccea759ff", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["-\t\t}\t", "-\t\tif (candidates[0].declaringClass.isClass()) {", "-\t\t\treturn mostSpecificClassMethodBinding(candidates, visiblesCount);", "-\t\t} else {", "-\t\t\treturn mostSpecificInterfaceMethodBinding(candidates, visiblesCount);", "+\t\tif (isCompliant14)", "+\t\t\treturn mostSpecificMethodBinding(candidates, visiblesCount);", "+\t\treturn candidates[0].declaringClass.isClass()", "+\t\t\t? mostSpecificClassMethodBinding(candidates, visiblesCount)", "+\t\t\t: mostSpecificInterfaceMethodBinding(candidates, visiblesCount);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba1915e0d87b1317b535802a6f7fc91b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "b32fc1bd12e1af3d23b798a9c1ddb2d07b773695", "commitAfterChange": "e8809c830aa9910fa512262ec2fd91fe29f694ac", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "diff": ["+\t// Internal use only - use findMethod()", "+\tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext) {", "+\t\t}", "+", "+\t\tif (inStaticContext) {", "+\t\t\tMethodBinding[] staticCandidates = new MethodBinding[visiblesCount];", "+\t\t\tint staticCount = 0;", "+\t\t\tfor (int i = 0; i < visiblesCount; i++)", "+\t\t\t\tif (candidates[i].isStatic())", "+\t\t\t\t\tstaticCandidates[staticCount++] = candidates[i];", "+\t\t\tif (staticCount == 1)", "+\t\t\t\treturn staticCandidates[0];", "+\t\t\tif (staticCount > 1)", "+\t\t\t\treturn mostSpecificMethodBinding(staticCandidates, staticCount, argumentTypes, invocationSite, receiverType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa32102f444d4dbe7b349474ce57b811", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public MethodBinding findMethod( \tReferenceBinding receiverType, \tchar[] selector, \tTypeBinding[] argumentTypes, \tInvocationSite invocationSite)", "signatureAfterChange": " public MethodBinding findMethod( \tReferenceBinding receiverType, \tchar[] selector, \tTypeBinding[] argumentTypes, \tInvocationSite invocationSite)", "diff": ["-\t\t\tif (areParametersAssignable(methodBinding.parameters, argumentTypes))", "-\t\t\t\tcandidates[candidatesCount++] = methodBinding;", "+\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "+\t\t\tif (compatibleMethod != null)", "+\t\t\t\tcandidates[candidatesCount++] = compatibleMethod;", "-\t\t\treturn mostSpecificClassMethodBinding(candidates, visiblesCount);", "+\t\t\treturn mostSpecificClassMethodBinding(candidates, visiblesCount, invocationSite);", "-\t\t\treturn mostSpecificInterfaceMethodBinding(candidates, visiblesCount);", "+\t\t\treturn mostSpecificInterfaceMethodBinding(candidates, visiblesCount, invocationSite);"]}], "num": 31199}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f808c8bfc59e42527cf1a4dbcad828a", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77dc4eb977225888e616f033bf5a7b8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorDeclarationPattern.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r protected boolean matches(AstNode node, boolean resolve)", "signatureAfterChange": "\r public int matchLevel(AstNode node, boolean resolve)", "diff": ["- */\r", "-protected boolean matches(AstNode node, boolean resolve) {\r", "-\tif (!(node instanceof ConstructorDeclaration)) return false;\r", "-\r", "-\tConstructorDeclaration constructor = (ConstructorDeclaration)node;\r", "-\r", "-\t// constructor name is stored in selector field\r", "-\tif (this.declaringSimpleName != null \r", "-\t\t\t&& !this.matchesName(this.declaringSimpleName, constructor.selector))\r", "-\t\treturn false;\r", "-\r", "-\t// declaring type\r", "-\tMethodBinding binding = constructor.binding;\r", "-\tif (resolve && binding != null) {\r", "-\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "-\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\t\t\r", "-\t// argument types\r", "-\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\tif (argumentCount > -1) {\r", "-\t\tint parameterCount = constructor.arguments == null ? 0 : constructor.arguments.length;\r", "-\t\tif (parameterCount != argumentCount)\r", "-\t\t\treturn false;\r", "-\r", "-\t\tif (resolve && binding != null) {\r", "-\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "-\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "-\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "-\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\r", "-\treturn true;\r", "-}\r", "+ */\r", "+public int matchLevel(AstNode node, boolean resolve) {\r", "+\tif (!(node instanceof ConstructorDeclaration)) return IMPOSSIBLE_MATCH;\r", "+\r", "+\tConstructorDeclaration constructor = (ConstructorDeclaration)node;\r", "+\r", "+\tif (resolve) {\r", "+\t\treturn this.matchLevel(constructor.binding);\r", "+\t} else {\r", "+\t\t// constructor name is stored in selector field\r", "+\t\tif (this.declaringSimpleName != null \r", "+\t\t\t\t&& !this.matchesName(this.declaringSimpleName, constructor.selector))\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t\r", "+\t\t// parameter types\r", "+\t\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\t\tif (parameterCount > -1) {\r", "+\t\t\tint argumentCount = constructor.arguments == null ? 0 : constructor.arguments.length;\r", "+\t\t\tif (parameterCount != argumentCount)\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\r", "+\t\treturn POSSIBLE_MATCH;\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be23152f54e02ed15402801f37040383", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorDeclarationPattern.java", "commitBeforeChange": "60e138d2828b37f2615e0cced57acea3adb47644", "commitAfterChange": "3c340a30d5ee47c28968789969de0fd1189f5b30", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r protected boolean matches(AstNode node, boolean resolve)", "signatureAfterChange": "\r public int matchLevel(AstNode node, boolean resolve)", "diff": ["- */\r", "-protected boolean matches(AstNode node, boolean resolve) {\r", "-\tif (!(node instanceof ConstructorDeclaration)) return false;\r", "-\r", "-\tConstructorDeclaration constructor = (ConstructorDeclaration)node;\r", "-\r", "-\t// constructor name is stored in selector field\r", "-\tif (this.declaringSimpleName != null \r", "-\t\t\t&& !this.matchesName(this.declaringSimpleName, constructor.selector))\r", "-\t\treturn false;\r", "-\r", "-\t// declaring type\r", "-\tMethodBinding binding = constructor.binding;\r", "-\tif (resolve && binding != null) {\r", "-\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "-\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\t\t\r", "-\t// argument types\r", "-\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\tif (argumentCount > -1) {\r", "-\t\tint parameterCount = constructor.arguments == null ? 0 : constructor.arguments.length;\r", "-\t\tif (parameterCount != argumentCount)\r", "-\t\t\treturn false;\r", "-\r", "-\t\tif (resolve && binding != null) {\r", "-\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "-\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "-\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "-\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\r", "-\treturn true;\r", "-}\r", "+ */\r", "+public int matchLevel(AstNode node, boolean resolve) {\r", "+\tif (!(node instanceof ConstructorDeclaration)) return IMPOSSIBLE_MATCH;\r", "+\r", "+\tConstructorDeclaration constructor = (ConstructorDeclaration)node;\r", "+\r", "+\tif (resolve) {\r", "+\t\treturn this.matchLevel(constructor.binding);\r", "+\t} else {\r", "+\t\t// constructor name is stored in selector field\r", "+\t\tif (this.declaringSimpleName != null \r", "+\t\t\t\t&& !this.matchesName(this.declaringSimpleName, constructor.selector))\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t\r", "+\t\t// parameter types\r", "+\t\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\t\tif (parameterCount > -1) {\r", "+\t\t\tint argumentCount = constructor.arguments == null ? 0 : constructor.arguments.length;\r", "+\t\t\tif (parameterCount != argumentCount)\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\r", "+\t\treturn POSSIBLE_MATCH;\r", "+\t}\r", "+}\r"]}], "num": 49091}
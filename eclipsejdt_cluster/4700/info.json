{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72b1e684803cb278d62c14e64ee4a942", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "352ed496236de15d033252a17a4c57e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java", "commitBeforeChange": "7675c409a4b3b1e15b1cc476a0a66b988b5fb4a0", "commitAfterChange": "28d83829a5c5453c02025fb74750ed1594ff644e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r public IType getDeclaringType()", "signatureAfterChange": "\r public IType getDeclaringType()", "diff": ["-\ttry {\r", "-\t\tchar[] enclosingTypeName = ((IBinaryType) getRawInfo()).getEnclosingTypeName();\r", "-\t\tif (enclosingTypeName == null) {\r", "+\tIClassFile classFile = this.getClassFile();\r", "+\tif (classFile.isOpen()) {\r", "+\t\ttry {\r", "+\t\t\tchar[] enclosingTypeName = ((IBinaryType) getRawInfo()).getEnclosingTypeName();\r", "+\t\t\tif (enclosingTypeName == null) {\r", "+\t\t\t\treturn null;\r", "+\t\t\t}\r", "+\t\t \tenclosingTypeName = ClassFile.unqualifiedName(enclosingTypeName);\r", "+\t\t \t\r", "+\t\t\t// workaround problem with class files compiled with javac 1.1.* \r", "+\t\t\t// that return a non-null enclosing type name for local types defined in anonymous (e.g. A$1$B)\r", "+\t\t\tif (classFile.getElementName().length() > enclosingTypeName.length+1 \r", "+\t\t\t\t\t&& Character.isDigit(classFile.getElementName().charAt(enclosingTypeName.length+1))) {\r", "+\t\t\t\treturn null;\r", "+\t\t\t} \r", "+\t\t\t\r", "+\t\t\treturn getPackageFragment().getClassFile(new String(enclosingTypeName) + \".class\").getType(); //$NON-NLS-1$;\r", "+\t\t} catch (JavaModelException npe) {\r", "-\t\tenclosingTypeName = ClassFile.unqualifiedName(enclosingTypeName);\r", "-\t\treturn getPackageFragment().getClassFile(new String(enclosingTypeName) + \".class\").getType(); //$NON-NLS-1$\r", "-\t} catch (JavaModelException npe) {\r", "-\t\treturn null;\r", "+\t} else {\r", "+\t\t// cannot access .class file without opening it \r", "+\t\t// and getDeclaringType() is supposed to be a handle-only method,\r", "+\t\t// so default to assuming $ is an enclosing type separator\r", "+\t\tString classFileName = classFile.getElementName();\r", "+\t\tint lastDollar = -1;\r", "+\t\tfor (int i = 0, length = classFileName.length(); i < length; i++) {", "+\t\t\tchar c = classFileName.charAt(i);\r", "+\t\t\tif (Character.isDigit(c) && lastDollar == i-1) {\r", "+\t\t\t\t// anonymous or local type\r", "+\t\t\t\treturn null;\r", "+\t\t\t} else if (c == '$') {\r", "+\t\t\t\tlastDollar = i;\r", "+\t\t\t}", "+\t\t}\r", "+\t\tif (lastDollar == -1) {\r", "+\t\t\treturn null;\r", "+\t\t} else {\r", "+\t\t\tString enclosingName = classFileName.substring(0, lastDollar);\r", "+\t\t\tString enclosingClassFileName = enclosingName + \".class\"; //$NON-NLS-1$\r", "+\t\t\treturn \r", "+\t\t\t\tnew BinaryType(\r", "+\t\t\t\t\tthis.getPackageFragment().getClassFile(enclosingClassFileName),\r", "+\t\t\t\t\tenclosingName.substring(enclosingName.lastIndexOf('$')+1));\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68294e7644eaeb853f38ad93d66b0132", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PotentialMatch.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate char[] getQualifiedName()", "signatureAfterChange": " private char[] getQualifiedName()", "diff": ["-\t */", "-\tprivate char[] getQualifiedName() {", "-\t\tif (this.openable instanceof CompilationUnit) {", "-\t\t\t// get file name", "-\t\t\tString fileName = this.resource.getFullPath().lastSegment();", "-\t\t\t// get main type name", "-\t\t\tchar[] mainTypeName = fileName.substring(0, fileName.length()-5).toCharArray(); ", "-\t\t\tCompilationUnit cu = (CompilationUnit)this.openable;", "-\t\t\treturn cu.getType(new String(mainTypeName)).getFullyQualifiedName().toCharArray();", "-\t\t} else if (this.openable instanceof ClassFile) {", "-\t\t\tString fileName = getSourceFileName();", "-\t\t\tif (fileName == NO_SOURCE_FILE_NAME) {", "-\t\t\t\ttry {", "-\t\t\t\t\treturn ((ClassFile)this.openable).getType().getFullyQualifiedName('.').toCharArray();", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tString simpleName = fileName.substring(0, fileName.length()-5); // length-\".java\".length()", "-\t\t\tString pkgName = this.openable.getParent().getElementName();", "-\t\t\tif (pkgName.length() == 0) {", "-\t\t\t\treturn simpleName.toCharArray();", "-\t\t\t} else {", "-\t\t\t\treturn (pkgName + '.' + simpleName).toCharArray();", "-\t\t\t}", "-\t\t} else {", "-\t\t\treturn null;", "-\t\t}", "-\t}", "+ */", "+private char[] getQualifiedName() {", "+\tif (this.openable instanceof CompilationUnit) {", "+\t\t// get file name", "+\t\tString fileName = this.resource.getFullPath().lastSegment();", "+\t\t// get main type name", "+\t\tchar[] mainTypeName = fileName.substring(0, fileName.length()-5).toCharArray(); ", "+\t\tCompilationUnit cu = (CompilationUnit) this.openable;", "+\t\treturn cu.getType(new String(mainTypeName)).getFullyQualifiedName().toCharArray();", "+\t} else if (this.openable instanceof ClassFile) {", "+\t\tString fileName = getSourceFileName();", "+\t\tif (fileName == NO_SOURCE_FILE_NAME) {", "+\t\t\t\treturn ((ClassFile) this.openable).getType().getFullyQualifiedName('.').toCharArray();", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t}", "+\t\tString simpleName = fileName.substring(0, fileName.length()-5); // length-\".java\".length()", "+\t\tString pkgName = this.openable.getParent().getElementName();", "+\t\tif (pkgName.length() == 0)", "+\t\t\treturn simpleName.toCharArray();", "+\t\treturn (pkgName + '.' + simpleName).toCharArray();", "+\t}", "+\treturn null;", "+}"]}], "num": 4700}
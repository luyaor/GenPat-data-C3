{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d093d9e5b62582cdbe59fc482590141d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d5cbaf7510d88516a4afdc45fce2567", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "98c08ded096494364ca74f948e8f494b3f447e89", "commitAfterChange": "423cede7ef9cde15030dc54ef2266be4ddcc9112", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public static void createJar(String[] pathsAndContents, String jarPath, String compliance) throws IOException", "signatureAfterChange": " public static void createJar(String[] pathsAndContents, String[] extraPathsAndContents, Map options, String jarPath) throws IOException", "diff": ["+}", "+public static void createJar(String[] pathsAndContents, String[] extraPathsAndContents, Map options, String jarPath) throws IOException {", "+\tif (pathsAndContents != null) {", "+\t\tcompile(pathsAndContents, options, classesPath);", "+\t}", "+\tfor (int i = 0, l = extraPathsAndContents == null ? 0 : extraPathsAndContents.length; i < l; /* inc in loop */) {", "+\t\tFile  outputFile = new File(classesPath, extraPathsAndContents[i++]);", "+\t\toutputFile.getParentFile().mkdirs();", "+\t\tUtil.writeToFile(extraPathsAndContents[i++], outputFile.getAbsolutePath());", "+\t}", "-public static void createJar(String[] pathsAndContents, String jarPath, String compliance) throws IOException {", "-    createJar(pathsAndContents, getCompileOptions(compliance), jarPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5267c80f691421fb3fe49ff85e351cbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "8d1c92d5ff789a78e5b2b21597d7c303cc8d5234", "commitAfterChange": "270bcfc5f9a8c2abee755a7d8ecdd2a24972b638", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters)", "signatureAfterChange": " \t \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters)", "diff": ["+\t\t\t\t\tif (superType.isParameterizedType()) {", "+\t\t\t\t\t\tReferenceBinding match = typeVariable.superclass.findSuperTypeErasingTo((ReferenceBinding) superType.erasure());", "+\t\t\t\t\t\tboolean isCollision = match != null && match != superType;", "+\t\t\t\t\t\tfor (int index = typeVariable.superInterfaces.length; !isCollision && --index >= 0;) {", "+\t\t\t\t\t\t\tReferenceBinding temp = typeVariable.superInterfaces[index];", "+\t\t\t\t\t\t\tisCollision = superType != temp && superType.erasure() == temp.erasure();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (isCollision) {", "+\t\t\t\t\t\t\tproblemReporter().boundHasConflictingArguments(typeRef, superType);", "+\t\t\t\t\t\t\ttypeVariable.tagBits |= HierarchyHasProblems;", "+\t\t\t\t\t\t\tnoProblems = false;", "+\t\t\t\t\t\t\tcontinue nextVariable;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dc63d1e44d1baa3efc4f898ea243951", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "79ea7516ee993fa0354e3522ad8337d5c8c5bf24", "commitAfterChange": "444d0d90fb5197da92c8f8879cb5ec3d4ff0d34c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void checkExternalArchiveChanges(IJavaElement[] elementsToRefresh, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic void checkExternalArchiveChanges(IJavaElement[] elementsToRefresh, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\t\tfor (int i = 0, length = projectDeltas.length; i < length; i++) {", "+\t\t\t\tfinal int length = projectDeltas.length;", "+\t\t\t\tfinal IProject[] projectsToTouch = new IProject[length];", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\t// touch the project to force it to be recompiled", "-\t\t\t\t\t\tjavaProject.getProject().touch(monitor);", "-\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\tthrow new JavaModelException(e);", "+\t\t\t\t\tprojectsToTouch[i] = javaProject.getProject();", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t// touch the projects to force them to be recompiled while taking the workspace lock ", "+\t\t\t\t// so that there is no concurrency with the Java builder", "+\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=96575", "+\t\t\t\tIWorkspaceRunnable runnable = new IWorkspaceRunnable() {", "+\t\t\t\t\tpublic void run(IProgressMonitor progressMonitor) throws CoreException {", "+\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\tIProject project = projectsToTouch[i];", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t// reset the corresponding project built state, since the builder would miss this change", "+\t\t\t\t\t\t\tif (JavaBuilder.DEBUG)", "+\t\t\t\t\t\t\t\tSystem.out.println(\"Clearing last state for project with external jar changed: \" + project); //$NON-NLS-1$\t\t\t\t\t\t", "+\t\t\t\t\t\t\tDeltaProcessor.this.manager.setLastBuiltState(project, null /*no state*/);", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t// touch to force a build of this project", "+\t\t\t\t\t\t\tproject.touch(progressMonitor);", "+\t\t\t\t\t\t}", "-\t\t\t\t}\t\t", "+\t\t\t\t};", "+\t\t\t\ttry {", "+\t\t\t\t\tResourcesPlugin.getWorkspace().run(runnable, monitor);", "+\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\tthrow new JavaModelException(e);", "+\t\t\t\t}", "+\t\t\t\t"]}], "num": 31852}
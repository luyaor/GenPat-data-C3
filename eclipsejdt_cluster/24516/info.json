{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd5203359a8d77feb816ca0b54988dbf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bc7829d5e397819239a8240dba89ea3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PotentialMatch.java", "commitBeforeChange": "c221b518b7348e54695e056da6261b43107500f5", "commitAfterChange": "c7e96d986053614747f035da8c0e25c52c212a4c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r private void locateMatchesInCompilationUnit(char[] source) throws CoreException", "signatureAfterChange": "\r private void locateMatchesInCompilationUnit(char[] source) throws CoreException", "diff": ["-\t\tthis.matchSet.accuracy = IJavaSearchResultCollector.EXACT_MATCH;\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tif (this.parsedUnit.scope != null) {\r", "-\t\t\t\t\t\tthis.parsedUnit.scope.faultInTypes();\r", "-\t\t\t\t\t\tthis.parsedUnit.resolve();\r", "+\t\t\t\tif (this.shouldResolve) {\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\tif (this.parsedUnit.scope != null) {\r", "+\t\t\t\t\t\t\tthis.parsedUnit.scope.faultInTypes();\r", "+\t\t\t\t\t\t\tthis.parsedUnit.resolve();\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t// report matches that needed resolve\r", "+\t\t\t\t\t\tthis.matchSet.cuHasBeenResolved = true;\r", "+\t\t\t\t\t\tthis.matchSet.reportMatching(this.parsedUnit);\r", "+\t\t\t\t\t} catch (AbortCompilation e) {\r", "+\t\t\t\t\t\t// could not resolve (reasons include \"could not find library class\") \r", "+\t\t\t\t\t\t// -> ignore and report innacurate matches\r", "+\t\t\t\t\t\tthis.matchSet.cuHasBeenResolved = true;\r", "+\t\t\t\t\t\tthis.matchSet.reportMatching(this.parsedUnit);\r", "-\t\t\t\t\t// report matches that needed resolve\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// problem ocured while completing the bindings for the base classes\r", "+\t\t\t\t\t// -> report innacurate matches\r", "-\t\t\t\t\tthis.matchSet.accuracy = IJavaSearchResultCollector.EXACT_MATCH;\r", "-\t\t\t\t\tthis.matchSet.reportMatching(this.parsedUnit);\r", "-\t\t\t\t} catch (AbortCompilation e) {\r", "-\t\t\t\t\t// could not resolve (reasons include \"could not find library class\") -> ignore and report the unresolved nodes\r", "-\t\t\t\t\tthis.matchSet.cuHasBeenResolved = false;\r", "-\t\t\t\t\tthis.matchSet.accuracy = IJavaSearchResultCollector.POTENTIAL_MATCH;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e203d377f3230548e4474c9f4eb352b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "commitAfterChange": "8f130374b1740d04a2a1a32967cf4d9130b4bd12", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 32, "signatureBeforeChange": "  final public boolean isDefinitelyAssigned(VariableBinding var)", "signatureAfterChange": "  public void markAsDefinitelyAssigned(FieldBinding field)", "diff": ["-final public boolean isDefinitelyAssigned(VariableBinding var) {", "-\tif (var instanceof FieldBinding) {", "-\t\treturn this.isDefinitelyAssigned((FieldBinding)var);", "-\t} else {", "-\t\treturn this.isDefinitelyAssigned((LocalVariableBinding)var);", "-\t}", "-}", "+public void markAsDefinitelyAssigned(FieldBinding field) {", "+\t\tmarkAsDefinitelyAssigned(field.id);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41701ca638571edd13a6b9674df3723f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "915adeadf0a77f488d15bb1d0bf2559201b1f96d", "commitAfterChange": "e8c4bcb175c9fa83d7e57124058ee64597b70965", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tprotected boolean traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "signatureAfterChange": " \tprotected boolean traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "diff": ["-\t\t\t\tRootInfo childRootInfo = (RootInfo)this.roots.get(childPath);", "+\t\t\t\tint childKind = child.getKind();", "+\t\t\t\tRootInfo childRootInfo = this.rootInfo(childPath, childKind);", "-\t\t\t\t\t\tchild.getKind(),", "-\t\t\t\t\t\tchild.getFlags(),", "+\t\t\t\t\t\tchildKind,", "-\t\t\t\t\t\t|| (childRootInfo == null && (childRootInfo = (RootInfo)this.roots.get(childPath)) != null)) {", "+\t\t\t\t\t\t|| (childRootInfo == null && (childRootInfo = this.rootInfo(childPath, childKind)) != null)) {", "-\t\t\t\tif ((rootList = (ArrayList)this.otherRoots.get(childPath)) != null) {", "+\t\t\t\tif ((rootList = this.otherRootsInfo(childPath, childKind)) != null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4969779d1e58f3f5bdf5a62839381f76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/DefaultCodeFormatterConstants.java", "commitBeforeChange": "49716bf4b4bfac2e9c15a5ccf977b85753b02ce1", "commitAfterChange": "18d1b818e2c1363e3c9436625e46da37b9994fdc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static boolean getForceWrapping(Map options, String key)", "signatureAfterChange": " \tpublic static boolean getForceWrapping(String value)", "diff": ["-\t */", "-\tpublic static boolean getForceWrapping(Map options, String key) {", "-\t\tObject option = options.get(key);", "-\t\tif (option != null) {", "-\t\t\ttry {", "-\t\t\t\tint existingValue = Integer.parseInt((String) option);", "-\t\t\t\treturn (existingValue & Alignment.M_FORCE) != 0;", "-\t\t\t} catch (NumberFormatException e) {", "-\t\t\t\t// nothing to do", "-\t\t\t}", "-\t\t}", "-\t\treturn false;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68ffebdcbf1169848c7861370a3f80d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "f9968462ad3e78057baba9747e91f7b6e3ea59e1", "commitAfterChange": "1f65e2f1d1142c8be683dea8425f1840c9121137", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic boolean isSubsignature(IMethodBinding otherMethod)", "signatureAfterChange": "  \tpublic boolean isSubsignature(IMethodBinding otherMethod)", "diff": ["-\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding other = ((MethodBinding) otherMethod).binding;", "-\t\t\tif (!CharOperation.equals(this.binding.selector, other.selector))", "-\t\t\t\treturn false;", "-\t\t\treturn this.binding.areParameterErasuresEqual(other) && this.binding.areTypeVariableErasuresEqual(other);", "+\t\t\tLookupEnvironment lookupEnvironment = this.resolver.lookupEnvironment();", "+\t\t\treturn lookupEnvironment != null", "+\t\t\t\t&& lookupEnvironment.methodVerifier().isMethodSubsignature(this.binding, ((MethodBinding) otherMethod).binding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e6fcb4bdc7a6028b1f220b0020b1b34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultCommentMapper.java", "commitBeforeChange": "6e642a34a8b5c85df508f049684a8996f1b8df52", "commitAfterChange": "355460267a070a52738f93cd1e4e0f2039fb0d85", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tint storeLeadingComments(ASTNode node, int previousEnd)", "signatureAfterChange": " \tint storeLeadingComments(ASTNode node, int previousEnd, int[] parentLineRange)", "diff": ["-\tint storeLeadingComments(ASTNode node, int previousEnd) {", "+\tint storeLeadingComments(ASTNode node, int previousEnd, int[] parentLineRange) {", "-\t\tint previousEndLine = this.scanner.getLineNumber(previousEnd);", "-\t\tint nodeStartLine = this.scanner.getLineNumber(nodeStart);", "+\t\tint previousEndLine = getLineNumber(previousEnd, parentLineRange);", "+\t\tint nodeStartLine = getLineNumber(nodeStart, parentLineRange);", "-\t\t\tint commentLine = this.scanner.getLineNumber(commentStart);", "+\t\t\tint commentLine = getLineNumber(commentStart, parentLineRange);", "-\t\t\t\tint lastTokenLine = this.scanner.getLineNumber(lastTokenEnd);", "+\t\t\t\tint lastTokenLine = getLineNumber(lastTokenEnd, parentLineRange);", "-\t\t\t\twhile (startIdx<length && lastTokenLine == this.scanner.getLineNumber(this.comments[startIdx].getStartPosition()) && nodeStartLine != lastTokenLine) {", "+\t\t\t\twhile (startIdx<length && lastTokenLine == getLineNumber(this.comments[startIdx].getStartPosition(), parentLineRange) && nodeStartLine != lastTokenLine) {"]}], "num": 24516}
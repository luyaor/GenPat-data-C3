{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58c81f03042e50bd55bb20a1dcd36817", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a7d7ae68fde79070def0d5adc0d8043", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "572021b99f292f39a76e81c2ea834ac6a839b00b", "commitAfterChange": "727d8ca46d64642ad4f629f81ba37e76e7ae8c85", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 52, "signatureBeforeChange": "  \tprivate boolean isValidEdit(OptimizedReplaceEdit edit)", "signatureAfterChange": "  \tprivate boolean isValidEdit(OptimizedReplaceEdit edit)", "diff": ["+\t\t\tIRegion starting = getAdaptedRegionAt(editOffset + editLength);", "+\t\t\tif (starting != null) {", "+\t\t\t\tint i = editOffset;", "+\t\t\t\tfor (int max = editOffset + editLength; i < max; i++) {", "+\t\t\t\t\tint replacementStringIndex = i - editOffset;", "+\t\t\t\t\tif (replacementStringIndex >= editReplacementLength || this.scanner.source[i] != edit.replacement.charAt(replacementStringIndex)) {", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (i - editOffset != editReplacementLength && i != editOffset + editLength - 1) {", "+\t\t\t\t\tedit.offset = starting.getOffset();", "+\t\t\t\t\tedit.length = 0;", "+\t\t\t\t\tedit.replacement = edit.replacement.substring(i - editOffset);", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7515991d9bdae1926f7e50f572fd097", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "97881e1f65dad02c5fcba69e18ae3332573c3839", "commitAfterChange": "5ae43aadc33d93b5c6af6a0612729105eee79d4f", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "\t \t \tprivate boolean isValidEdit(OptimizedReplaceEdit edit)", "signatureAfterChange": "\t \t \tprivate boolean isValidEdit(OptimizedReplaceEdit edit)", "diff": ["-\t\tif (editLength != 0 && editReplacementLength != 0 && editLength == editReplacementLength) {", "-\t\t\tfor (int i = editOffset, max = editOffset + editLength; i < max; i++) {", "-\t\t\t\tif (scanner.source[i] != edit.replacement.charAt(i - editOffset)) {", "+\t\tif (editLength != 0) {", "+\t\t\tif (this.textRegionStart <= editOffset && (editOffset + editLength - 1) <= this.textRegionEnd) {", "+\t\t\t\tif (editReplacementLength != 0 && editLength == editReplacementLength) {", "+\t\t\t\t\tfor (int i = editOffset, max = editOffset + editLength; i < max; i++) {", "+\t\t\t\t\t\tif (scanner.source[i] != edit.replacement.charAt(i - editOffset)) {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\treturn false;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t} else if (editOffset + editLength == this.textRegionStart) {", "+\t\t\t\tint i = editOffset;", "+\t\t\t\tfor (int max = editOffset + editLength; i < max; i++) {", "+\t\t\t\t\tif (scanner.source[i] != edit.replacement.charAt(i - editOffset)) {", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (i == editOffset + editLength - 1) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t} else {", "+\t\t\t\t\tedit.offset = textRegionStart;", "+\t\t\t\t\tedit.length = 0;", "+\t\t\t\t\tedit.replacement = edit.replacement.substring(i - editOffset);", "-\t\t\treturn false;", "-\t\t} else {", "+\t\t} else if (this.textRegionStart <= editOffset && editOffset <= this.textRegionEnd) {", "+\t\treturn false;"]}], "num": 70404}
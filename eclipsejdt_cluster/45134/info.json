{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a083a1494a3bc90842bf7ac8fc742dd7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc28a5ef0b1e3de907d7c4f5cfdb315", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "d7bf97b0906e6821b36f900e536d18f1ccdddff2", "commitAfterChange": "dd10489904dda11a1b9c522a71a4705b9646605e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType)", "signatureAfterChange": " \t \tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType, Scope scope)", "diff": ["-\tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType) {", "+\tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType, Scope scope) {", "-\t\t\tthis.originalValueIfTrueType = this.valueIfTrue.checkAgainstFinalTargetType(targetType);", "-\t\t\tthis.originalValueIfFalseType = this.valueIfFalse.checkAgainstFinalTargetType(targetType);", "+\t\t\tthis.originalValueIfTrueType = this.valueIfTrue.checkAgainstFinalTargetType(targetType, scope);", "+\t\t\tthis.originalValueIfFalseType = this.valueIfFalse.checkAgainstFinalTargetType(targetType, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20969a35d2443c429635323b90b77269", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "ed45f69d40b17b59915e726fa4a306f40a296886", "commitAfterChange": "3168f520c145ac4dd47d54a812acd1c888ed8ea9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType)", "signatureAfterChange": " \t \tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType)", "diff": ["-\t\tthis.valueIfTrue.checkAgainstFinalTargetType(targetType);", "-\t\tthis.valueIfFalse.checkAgainstFinalTargetType(targetType);", "-\t\tthis.resolvedType = targetType;", "-\t\treturn targetType;", "+\t\tif (isPolyExpression()) {", "+\t\t\tthis.valueIfTrue.checkAgainstFinalTargetType(targetType);", "+\t\t\tthis.valueIfFalse.checkAgainstFinalTargetType(targetType);", "+\t\t\tthis.resolvedType = targetType;", "+\t\t}", "+\t\treturn this.resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55956a137c367d74be258de4646181eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java", "commitBeforeChange": "09f42f58bcdf2fa84ccd2b8b65f28ab3036222ca", "commitAfterChange": "57e8dd41219d846363c918d62edb5007994c5c79", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tpublic void checkAgainstFinalTargetType(TypeBinding targetType)", "signatureAfterChange": "  \tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType)", "diff": ["-", "-\tpublic void checkAgainstFinalTargetType(TypeBinding targetType) {", "-\t\tif (this.expectedIsFinalTargetType)", "-\t\t\treturn; // already checked", "-\t\tthis.expectedIsFinalTargetType = true;", "-\t\tresolveTypeExpecting(this.enclosingScope, targetType);", "+\tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType) {", "+\t\treturn resolveTypeExpecting(this.enclosingScope, targetType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1de4ca6f43c1acb2fb480ef794ba20e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType, Scope scope)", "signatureAfterChange": " \t \tpublic boolean isPertinentToApplicability(TypeVariableBinding typeVariable, MethodBinding method)", "diff": ["-\tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType, Scope scope) {", "-\t\t// in 1.8 if treated as a poly expression:", "-\t\tif (isPolyExpression()) {", "-\t\t\ttargetType = targetType.uncapture(this.polyExpressionScope);", "-\t\t\tthis.originalValueIfTrueType = this.valueIfTrue.checkAgainstFinalTargetType(targetType, scope);", "-\t\t\tthis.originalValueIfFalseType = this.valueIfFalse.checkAgainstFinalTargetType(targetType, scope);", "-\t\t\tcomputeConversions(this.polyExpressionScope, targetType);", "-\t\t\tthis.resolvedType = targetType;", "-\t\t}", "-\t\treturn this.resolvedType;", "+\tpublic boolean isPertinentToApplicability(TypeVariableBinding typeVariable, MethodBinding method) {", "+\t\treturn this.valueIfTrue.isPertinentToApplicability(typeVariable, method) ", "+\t\t\t\t&& this.valueIfFalse.isPertinentToApplicability(typeVariable, method); // not perfect."]}], "num": 45134}
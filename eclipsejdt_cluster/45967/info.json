{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e4954d5e826a891ab15b769bafc836fc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2abda129b2f2d06167dcd8366bf11a32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "f657f893ed970d58ce4565eab2924c903044ce31", "commitAfterChange": "bfbe9b06c5798f1baef8d69d4a33bb41763f82a1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["+\t\t// TODO add conversion from old options to new options", "+\t\tfinal Object clearBlankLines = settings.get(JavaCore.FORMATTER_CLEAR_BLANK_LINES);", "+\t\tif (clearBlankLines != null) {", "+\t\t\tif (JavaCore.CLEAR_ALL.equals(clearBlankLines)) {", "+\t\t\t\tthis.number_of_empty_lines_to_preserve = 0;", "+\t\t\t} else if (JavaCore.PRESERVE_ONE.equals(clearBlankLines)) {", "+\t\t\t\tthis.number_of_empty_lines_to_preserve = 1;", "+\t\t\t} else {", "+\t\t\t\tthis.number_of_empty_lines_to_preserve = 9999;", "+\t\t\t}", "+\t\t}", "+\t\tfinal Object compactAssignment = settings.get(JavaCore.FORMATTER_COMPACT_ASSIGNMENT);", "+\t\tif (compactAssignment != null) {", "+\t\t\tthis.insert_space_before_assignment_operators = JavaCore.NORMAL.equals(compactAssignment);", "+\t\t}", "+\t\tfinal Object newLineOpenBrace = settings.get(JavaCore.FORMATTER_NEWLINE_OPENING_BRACE);", "+\t\tif(newLineOpenBrace != null){", "+\t\t\tif (JavaCore.INSERT.equals(newLineOpenBrace)) {", "+\t\t\t\tthis.anonymous_type_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "+\t\t\t\tthis.type_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "+\t\t\t\tthis.method_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "+\t\t\t\tthis.block_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "+\t\t\t\tthis.switch_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "+\t\t\t} else {", "+\t\t\t\tthis.anonymous_type_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t\tthis.type_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t\tthis.method_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t\tthis.block_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t\tthis.switch_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t}", "+\t\t}", "+\t\tfinal Object newLineControl = settings.get(JavaCore.FORMATTER_NEWLINE_CONTROL);", "+\t\tif (newLineControl != null) {", "+\t\t\tthis.insert_new_line_in_control_statements = JavaCore.INSERT.equals(newLineControl);", "+\t\t}", "+\t\tfinal Object newLineElseIf  = settings.get(JavaCore.FORMATTER_NEWLINE_CONTROL);", "+\t\tif (newLineElseIf != null) {", "+\t\t\tthis.compact_else_if = JavaCore.DO_NOT_INSERT.equals(newLineElseIf);", "+\t\t}", "+\t\tfinal Object newLineEmptyBlock  = settings.get(JavaCore.FORMATTER_NEWLINE_EMPTY_BLOCK);", "+\t\tif (newLineEmptyBlock != null) {", "+\t\t\tif (JavaCore.INSERT.equals(newLineEmptyBlock)) {", "+\t\t\t\tthis.insert_new_line_in_empty_anonymous_type_declaration = true;", "+\t\t\t\tthis.insert_new_line_in_empty_type_declaration = true;", "+\t\t\t\tthis.insert_new_line_in_empty_method_body = true;", "+\t\t\t\tthis.insert_new_line_in_empty_block = true;", "+\t\t\t} else {", "+\t\t\t\tthis.insert_new_line_in_empty_anonymous_type_declaration = false;", "+\t\t\t\tthis.insert_new_line_in_empty_type_declaration = false;", "+\t\t\t\tthis.insert_new_line_in_empty_method_body = false;", "+\t\t\t\tthis.insert_new_line_in_empty_block = false;", "+\t\t\t}", "+\t\t}", "+\t\tfinal Object castExpression = settings.get(JavaCore.FORMATTER_SPACE_CASTEXPRESSION);", "+\t\tif (castExpression != null) {", "+\t\t\tthis.insert_space_after_closing_paren_in_cast = JavaCore.INSERT.equals(castExpression);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61efe28b40cf8a1805a397e6192c9ec0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "a59c911bb67a4a0588e810060c73cd3ec2f53032", "commitAfterChange": "f9b051d5e41bd27efd803711c20da8dcd750758f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["-\t\t}", "-\t\tfinal Object convertOldToNewOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_CONVERT_OLD_TO_NEW);", "-\t\tif (convertOldToNewOption != null) {", "-\t\t\tthis.convert_old_to_new = DefaultCodeFormatterConstants.TRUE.equals(convertOldToNewOption);", "-\t\t// TODO Remove before 3.0", "-\t\tif (this.convert_old_to_new) {", "-\t\t\tfinal Object clearBlankLines = settings.get(JavaCore.FORMATTER_CLEAR_BLANK_LINES);", "-\t\t\tif (clearBlankLines != null) {", "-\t\t\t\tif (JavaCore.CLEAR_ALL.equals(clearBlankLines)) {", "-\t\t\t\t\tthis.number_of_empty_lines_to_preserve = 0;", "-\t\t\t\t} else if (JavaCore.PRESERVE_ONE.equals(clearBlankLines)) {", "-\t\t\t\t\tthis.number_of_empty_lines_to_preserve = 1;", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.number_of_empty_lines_to_preserve = Integer.MAX_VALUE;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tfinal Object compactAssignment = settings.get(JavaCore.FORMATTER_COMPACT_ASSIGNMENT);", "-\t\t\tif (compactAssignment != null) {", "-\t\t\t\tthis.insert_space_before_assignment_operators = JavaCore.NORMAL.equals(compactAssignment);", "-\t\t\t}", "-\t\t\tfinal Object newLineOpenBrace = settings.get(JavaCore.FORMATTER_NEWLINE_OPENING_BRACE);", "-\t\t\tif(newLineOpenBrace != null){", "-\t\t\t\tif (JavaCore.INSERT.equals(newLineOpenBrace)) {", "-\t\t\t\t\tthis.anonymous_type_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\t\t\t\tthis.type_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\t\t\t\tthis.method_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\t\t\t\tthis.block_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\t\t\t\tthis.switch_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.anonymous_type_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "-\t\t\t\t\tthis.type_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "-\t\t\t\t\tthis.method_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "-\t\t\t\t\tthis.block_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "-\t\t\t\t\tthis.switch_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tfinal Object newLineControl = settings.get(JavaCore.FORMATTER_NEWLINE_CONTROL);", "-\t\t\tif (newLineControl != null) {", "-\t\t\t\tthis.insert_new_line_in_control_statements = JavaCore.INSERT.equals(newLineControl);", "-\t\t\t}", "-\t\t\tfinal Object newLineElseIf  = settings.get(JavaCore.FORMATTER_NEWLINE_ELSE_IF);", "-\t\t\tif (newLineElseIf != null) {", "-\t\t\t\tthis.compact_else_if = JavaCore.DO_NOT_INSERT.equals(newLineElseIf);", "-\t\t\t}", "-\t\t\tfinal Object newLineEmptyBlock  = settings.get(JavaCore.FORMATTER_NEWLINE_EMPTY_BLOCK);", "-\t\t\tif (newLineEmptyBlock != null) {", "-\t\t\t\tif (JavaCore.INSERT.equals(newLineEmptyBlock)) {", "-\t\t\t\t\tthis.insert_new_line_in_empty_anonymous_type_declaration = true;", "-\t\t\t\t\tthis.insert_new_line_in_empty_type_declaration = true;", "-\t\t\t\t\tthis.insert_new_line_in_empty_method_body = true;", "-\t\t\t\t\tthis.insert_new_line_in_empty_block = true;", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.insert_new_line_in_empty_anonymous_type_declaration = false;", "-\t\t\t\t\tthis.insert_new_line_in_empty_type_declaration = false;", "-\t\t\t\t\tthis.insert_new_line_in_empty_method_body = false;", "-\t\t\t\t\tthis.insert_new_line_in_empty_block = false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tfinal Object castExpression = settings.get(JavaCore.FORMATTER_SPACE_CASTEXPRESSION);", "-\t\t\tif (castExpression != null) {", "-\t\t\t\tthis.insert_space_after_closing_paren_in_cast = JavaCore.INSERT.equals(castExpression);", "-\t\t\t}", "-\t\t}"]}], "num": 45967}
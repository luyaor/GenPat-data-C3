{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80c4275e367087e344f22c902511e9d2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "361efb63772c758bbac4badb20f07075", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "589050186c89abf7f6363daf924cc76bd3ce26c4", "commitAfterChange": "eb2eaa18a369809cf4e26f772ccf899a60215409", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": "   public int scanNumber(boolean dotPrefix) throws InvalidInputException", "signatureAfterChange": "   public int scanNumber(boolean dotPrefix) throws InvalidInputException", "diff": ["+\t\t\t\tif (end == start) { // Has no digits before exponent", "+\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t}", "+\t\t\t\t\tthrow new InvalidInputException(INVALID_HEXA);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0a9f6b9779a5ddd782cc18846d088ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedAllocationExpression.java", "commitBeforeChange": "dc65df766d611a37f7ac764bcbe2a25e27a5e3bd", "commitAfterChange": "bef60d1fb53f507f903d66ac6e04e719aa5b50f4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (anonymousType.binding.superInterfaces == Binding.NO_SUPERINTERFACES) {", "-\t\t\t// find the constructor binding inside the super constructor call", "-\t\t\tConstructorDeclaration constructor = (ConstructorDeclaration) anonymousType.declarationOf(binding.original());", "-\t\t\tthrow new SelectionNodeFound(constructor.constructorCall.binding);", "+\t\tif (anonymousType.binding != null) {", "+\t\t\tif (anonymousType.binding.superInterfaces == Binding.NO_SUPERINTERFACES) {", "+\t\t\t\t// find the constructor binding inside the super constructor call", "+\t\t\t\tConstructorDeclaration constructor = (ConstructorDeclaration) anonymousType.declarationOf(binding.original());", "+\t\t\t\tthrow new SelectionNodeFound(constructor.constructorCall.binding);", "+\t\t\t} else {", "+\t\t\t\t// open on the only superinterface", "+\t\t\t\tthrow new SelectionNodeFound(anonymousType.binding.superInterfaces[0]);", "+\t\t\t}", "-\t\t\t// open on the only superinterface", "-\t\t\tthrow new SelectionNodeFound(anonymousType.binding.superInterfaces[0]);", "+\t\t\tif (this.resolvedType.isInterface()) {", "+\t\t\t\tthrow new SelectionNodeFound(resolvedType);", "+\t\t\t}", "+\t\t\tthrow new SelectionNodeFound(binding);"]}], "num": 72868}
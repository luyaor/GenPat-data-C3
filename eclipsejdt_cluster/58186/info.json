{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b11c42444fa7dbd0b7172bb57e4f3491", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57e1e3462c82d08d2b91bc8311b2ff69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "1a94a1e6652f1701b8c360d56d755e5438b79c26", "commitAfterChange": "3b002cab97d2ee77b59be67feaf705de255bc1fb", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "  private void processPathEntries(final int defaultSize, final ArrayList paths, final String currentPath, String customEncoding, boolean isSourceOnly)", "signatureAfterChange": "  private void processPathEntries(final int defaultSize, final ArrayList paths,  \t\t\tfinal String currentPath, String customEncoding, boolean isSourceOnly, \t\t\tboolean rejectDestinationPathOnJars)  \t\tthrows InvalidInputException", "diff": ["-private void processPathEntries(final int defaultSize, final ArrayList paths, final String currentPath, String customEncoding, boolean isSourceOnly) {", "+private void processPathEntries(final int defaultSize, final ArrayList paths, ", "+\t\t\tfinal String currentPath, String customEncoding, boolean isSourceOnly,", "+\t\t\tboolean rejectDestinationPathOnJars) ", "+\t\tthrows InvalidInputException {", "+\tString currentDestinationPath = null;", "+\tfinal int destinationPathReadyToClose = 7;", "+\t// 'path[-d bin'", "+\tfinal int readyToCloseEndingWithDestinationPath = 8;", "+\t// 'path[-d bin]' 'path[rule][-d bin]'", "+\tfinal int destinatonPathStart = 9;", "+\t// 'path[rule]['", "-\twhile (tokenizer.hasMoreTokens()) {", "+\twhile (tokenizer.hasMoreTokens() && state != error) {", "+\t\t\tcase readyToCloseOrOtherEntry:", "-\t\t\tcase readyToCloseOrOtherEntry:", "+\t\t\tcase readyToCloseEndingWithDestinationPath:", "-\t\t\t\taddNewEntry(paths, currentClasspathName, currentRuleSpecs, customEncoding, isSourceOnly);", "+\t\t\t\taddNewEntry(paths, currentClasspathName, currentRuleSpecs, ", "+\t\t\t\t\t\tcustomEncoding, currentDestinationPath, isSourceOnly,", "+\t\t\t\t\t\trejectDestinationPathOnJars);", "+\t\t\tcase destinationPathReadyToClose:", "+\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\tMain.bind(\"configure.incorrectDestinationPathEntry\", //$NON-NLS-1$ ", "+\t\t\t\t\t\tcurrentPath));\t\t\t\t", "+\t\t\t\tbreak;", "+\t\t\tcase readyToCloseEndingWithRules:", "+\t\t\t\tstate = destinatonPathStart;", "+\t\t\tcase destinationPathReadyToClose:", "+\t\t\t\tstate = readyToCloseEndingWithDestinationPath;", "+\t\t\t\tbreak;", "-", "-\t\t\tcase rulesNeedAnotherRule:", "+\t\t\t\tif (token.startsWith(\"-d \")) { //$NON-NLS-1$", "+\t\t\t\t\tcurrentDestinationPath = token.substring(3).trim();", "+\t\t\t\t\tstate = destinationPathReadyToClose;", "+\t\t\t\t\tbreak;", "+\t\t\t\t} // else we proceed with a rule", "+\t\t\tcase rulesNeedAnotherRule:", "+\t\t\t\tbreak;", "+\t\t\tcase destinatonPathStart:", "+\t\t\t\tif (!token.startsWith(\"-d \")) { //$NON-NLS-1$", "+\t\t\t\t\tstate = error;", "+\t\t\t\t} else {", "+\t\t\t\t\tcurrentDestinationPath = token.substring(3).trim();", "+\t\t\t\t\tstate = destinationPathReadyToClose;", "+\t\t\t\t}", "-\t\tcase readyToClose :", "-\t\tcase readyToCloseEndingWithRules :", "-\t\tcase readyToCloseOrOtherEntry :", "-\t\t\taddNewEntry(paths, currentClasspathName, currentRuleSpecs, customEncoding, isSourceOnly);", "+\t\tcase readyToCloseOrOtherEntry:", "+\t\t\tbreak;", "+\t\tcase readyToClose:", "+\t\tcase readyToCloseEndingWithRules:", "+\t\tcase readyToCloseEndingWithDestinationPath:", "+\t\t\taddNewEntry(paths, currentClasspathName, currentRuleSpecs, ", "+\t\t\t\tcustomEncoding, currentDestinationPath, isSourceOnly,", "+\t\t\t\trejectDestinationPathOnJars);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f90524ecee2651378cb3e6b62f3289d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "6c5ed1b4ed06e066835a3bf2ea35d093c31d8a42", "commitAfterChange": "8bc47c693f418d320513158fd7b4c7024ff227d6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r private void configure(String[] argv) throws InvalidInputException", "diff": ["+\tfinal int InsideDefaultEncoding = 64;\r", "-\t\t\t\r", "+\tboolean didSpecifyDefaultEncoding = false;\r", "+\r", "+\tString customEncoding = null;\r", "+\tString currentArg = \"\";\r", "+\t\t\r", "-\t\tString currentArg = argv[index].trim();\r", "+\r", "+\t\tif (customEncoding != null){\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.unexpectedCustomEncoding\", currentArg, customEncoding)); //$NON-NLS-1$\r", "+\t\t}\r", "+\r", "+\t\tcurrentArg = argv[index].trim();\r", "+\r", "+\t\tcustomEncoding = null;\r", "+\t\tif (currentArg.endsWith(\"]\")){ // look for encoding specification\r", "+\t\t\tint encodingStart = currentArg.indexOf('[') + 1;\r", "+\t\t\tint encodingEnd = currentArg.length() - 1;\r", "+\t\t\tif (encodingStart >= 1){\r", "+\t\t\t\tif (encodingStart < encodingEnd){\r", "+\t\t\t\t\tcustomEncoding = currentArg.substring(encodingStart, encodingEnd);\r", "+\t\t\t\t\ttry {// ensure encoding is supported\r", "+\t\t\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), customEncoding);\r", "+\t\t\t\t\t} catch(UnsupportedEncodingException e){\r", "+\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.unsupportedEncoding\", customEncoding)); //$NON-NLS-1$\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\tcurrentArg = currentArg.substring(0, encodingStart - 1);\r", "+\t\t\t}\r", "+\t\t}\r", "+\r", "+\t\t\t\tencodings = new String[argCount - index];\r", "+\t\t\t\tSystem.arraycopy(encodings, 0, (encodings = new String[length + argCount - index]), 0, length);\r", "-\t\t\tfilenames[filesCount++] = currentArg;\r", "+\t\t\tfilenames[filesCount] = currentArg;\r", "+\t\t\tencodings[filesCount++] = customEncoding;\r", "+\t\t\tcustomEncoding = null;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.equals(\"-encoding\")) { //$NON-NLS-1$\r", "+\t\t\tmode = InsideDefaultEncoding;\r", "+\t\tif (mode == InsideDefaultEncoding){\r", "+\t\t\tif (didSpecifyDefaultEncoding){\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateDefaultEncoding\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t}\r", "+\t\t\ttry { // ensure encoding is supported\r", "+\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), currentArg);\r", "+\t\t\t} catch(UnsupportedEncodingException e){\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.unsupportedEncoding\", currentArg)); //$NON-NLS-1$\r", "+\t\t\t}\r", "+\t\t\toptions.put(CompilerOptions.OPTION_Encoding, currentArg);\r", "+\t\t\tdidSpecifyDefaultEncoding = true;\r", "+\t\t\tmode = Default;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\t\tSystem.arraycopy(encodings, 0, (encodings = new String[length + filesCount]), 0, filesCount);\r", "+\t\t\tfor (int i = 0; i < length; i++){\r", "+\t\t\t\tencodings[filesCount+i] = customEncoding;\r", "+\t\t\t}\r", "+\t\t\tcustomEncoding = null;\r", "+\t\t\tencodings = new String[filesCount];\r", "+\t\t\tfor (int i = 0; i < filesCount; i++){\r", "+\t\t\t\tencodings[i] = customEncoding;\r", "+\t\t\t}\r", "+\t\t\tcustomEncoding = null;\r"]}], "num": 58186}
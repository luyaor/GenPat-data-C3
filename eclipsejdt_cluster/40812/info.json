{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00ab56d1f9f8eec044f1666c5986ae68", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5663cec67026d849ab2d69158fd43bbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "0aa34db9e617bf74b6393bf5508b95dcdaed80af", "commitAfterChange": "c9c1bc452cc86c18011e1d146fda7426c2ac0742", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tprivate boolean checkExpression(Expression expri, TypeBinding[] u, TypeBinding r1, TypeBinding[] v, TypeBinding r2)  \t\t\tthrows InferenceFailureException", "signatureAfterChange": "  \tprivate boolean checkExpression(Expression expri, TypeBinding[] u, TypeBinding r1, TypeBinding[] v, TypeBinding r2)  \t\t\tthrows InferenceFailureException", "diff": ["+\t\t\tReferenceExpression reference = (ReferenceExpression) expri;", "-\t\t\t\tReferenceExpression reference = (ReferenceExpression) expri;", "-\t\t\t\tif (r2.id == TypeIds.T_void)", "-\t\t\t\t\treturn true;", "-\t\t\t\tMethodBinding method = reference.findCompileTimeMethodTargeting(null, this.scope); // TODO directly access exactMethodBinding!", "-\t\t\t\tTypeBinding returnType = method.isConstructor() ? method.declaringClass : method.returnType;", "-\t\t\t\tif (r1.isPrimitiveType() && !r2.isPrimitiveType() && returnType.isPrimitiveType()) ", "-\t\t\t\t\treturn true;", "-\t\t\t\tif (r2.isPrimitiveType() && !r1.isPrimitiveType() && !returnType.isPrimitiveType())", "-\t\t\t\t\treturn true;", "+\t\t\tif (r2.id == TypeIds.T_void)", "+\t\t\t\treturn true;", "+\t\t\tMethodBinding method = reference.getExactMethod();", "+\t\t\tTypeBinding returnType = method.isConstructor() ? method.declaringClass : method.returnType;", "+\t\t\tif (r1.isPrimitiveType() && !r2.isPrimitiveType() && returnType.isPrimitiveType()) ", "+\t\t\t\treturn true;", "+\t\t\tif (r2.isPrimitiveType() && !r1.isPrimitiveType() && !returnType.isPrimitiveType())", "+\t\t\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf6a551e612df0d22c18c15cd071e464", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "dd94cf0bd440f6e64eda78265f5494ba3f323126", "commitAfterChange": "d1744bcd23d1403e6d9f13ec027be2082d1bac18", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private void buildForProject(JavaProject project, ArrayList infos, ArrayList units, IWorkingCopy[] workingCopies, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " private void buildForProject(JavaProject project, ArrayList infos, ArrayList units, IWorkingCopy[] workingCopies, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\tsynchronized(this.nameLookup) { // prevent 2 concurrent accesses to name lookup while the units to look inside are set", "-\t\t\tif (inProjectOfFocusType) {", "-\t\t\t\torg.eclipse.jdt.core.ICompilationUnit unitToLookInside = focusType.getCompilationUnit();", "-\t\t\t\tIWorkingCopy[] unitsToLookInside;", "-\t\t\t\tif (unitToLookInside != null) {", "-\t\t\t\t\tint wcLength = workingCopies == null ? 0 : workingCopies.length;", "-\t\t\t\t\tif (wcLength == 0) {", "-\t\t\t\t\t\tunitsToLookInside = new IWorkingCopy[] {unitToLookInside};", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tunitsToLookInside = new IWorkingCopy[wcLength+1];", "-\t\t\t\t\t\tunitsToLookInside[0] = unitToLookInside;", "-\t\t\t\t\t\tSystem.arraycopy(workingCopies, 0, unitsToLookInside, 1, wcLength);", "-\t\t\t\t\t}", "+\t\tif (inProjectOfFocusType) {", "+\t\t\torg.eclipse.jdt.core.ICompilationUnit unitToLookInside = focusType.getCompilationUnit();", "+\t\t\tIWorkingCopy[] unitsToLookInside;", "+\t\t\tif (unitToLookInside != null) {", "+\t\t\t\tint wcLength = workingCopies == null ? 0 : workingCopies.length;", "+\t\t\t\tif (wcLength == 0) {", "+\t\t\t\t\tunitsToLookInside = new IWorkingCopy[] {unitToLookInside};", "-\t\t\t\t\tunitsToLookInside = workingCopies;", "+\t\t\t\t\tunitsToLookInside = new IWorkingCopy[wcLength+1];", "+\t\t\t\t\tunitsToLookInside[0] = unitToLookInside;", "+\t\t\t\t\tSystem.arraycopy(workingCopies, 0, unitsToLookInside, 1, wcLength);", "-\t\t\t\tthis.nameLookup.setUnitsToLookInside(unitsToLookInside);", "+\t\t\t} else {", "+\t\t\t\tunitsToLookInside = workingCopies;", "+\t\t\tthis.nameLookup.setUnitsToLookInside(unitsToLookInside); // NB: this uses a PerThreadObject, so it is thread safe"]}], "num": 40812}
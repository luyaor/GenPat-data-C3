{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f07877563844b7b14af5822ab912bff", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29b9a0cf54977d3a7480d9232844b758", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected IClasspathEntry[] decodeClasspath(String xmlClasspath, boolean createMarker, boolean logProblems)", "signatureAfterChange": "  \tpublic static boolean areClasspathsEqual( \t\t\tIClasspathEntry[] firstClasspath, IClasspathEntry[] secondClasspath,  \t\t\tIPath firstOutputLocation, IPath secondOutputLocation)", "diff": ["+", "+\tpublic static boolean areClasspathsEqual(", "+\t\t\tIClasspathEntry[] firstClasspath, IClasspathEntry[] secondClasspath, ", "+\t\t\tIPath firstOutputLocation, IPath secondOutputLocation) {", "+\t\tint length = firstClasspath.length;", "+\t\tif (length != secondClasspath.length) return false;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tif (!firstClasspath[i].equals(secondClasspath[i]))", "+\t\t\t\treturn false;", "+\t\t}", "+\t\tif (firstOutputLocation == null)", "+\t\t\treturn secondOutputLocation == null;", "+\t\treturn firstOutputLocation.equals(secondOutputLocation);", "+\t}", "-\tprotected IClasspathEntry[] decodeClasspath(String xmlClasspath, boolean createMarker, boolean logProblems) {", "-\t\treturn decodeClasspath(xmlClasspath, createMarker, logProblems, null/*not interested in unknown elements*/);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3d82c20628cedb6745d24b5f54d3c98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "bbf01bd45c20dcf892a1672b9d9c504b05790a01", "commitAfterChange": "64f2a5b8a78095fa170a97cceb8e661d31b0ae71", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "\r \tpublic boolean isClasspathEqualsTo(IClasspathEntry[] otherClasspathWithOutput)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic boolean isClasspathEqualsTo(IClasspathEntry[] newClasspath, IPath newOutputLocation, IClasspathEntry[] otherClasspathWithOutput)\r \t\tthrows JavaModelException", "diff": ["-\tpublic boolean isClasspathEqualsTo(IClasspathEntry[] otherClasspathWithOutput)\r", "+\tpublic boolean isClasspathEqualsTo(IClasspathEntry[] newClasspath, IPath newOutputLocation, IClasspathEntry[] otherClasspathWithOutput)\r", "-\t\t\tIClasspathEntry[] classpath = getRawClasspath();\r", "-\t\t\tif (length == classpath.length + 1) {\r", "+\t\t\tif (length == newClasspath.length + 1) {\r", "-\t\t\t\t\tif (!otherClasspathWithOutput[i].equals(classpath[i]))\r", "+\t\t\t\t\tif (!otherClasspathWithOutput[i].equals(newClasspath[i]))\r", "-\t\t\t\t\t&& otherClasspathWithOutput[length - 1].getPath().equals(getOutputLocation()))\r", "+\t\t\t\t\t&& otherClasspathWithOutput[length - 1].getPath().equals(newOutputLocation))\r"]}], "num": 41623}
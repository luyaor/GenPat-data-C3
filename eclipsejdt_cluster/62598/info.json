{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b121f59661cc01a2ab7be4f88eebb59a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b70cd719a0b5b106e404b05b0c8e0d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateElementInCUOperation.java", "commitBeforeChange": "90d481edc9060cc498a8f085b08186108312e37b", "commitAfterChange": "f3a3c06f6e68ab7680c250209b9759ac3d56fec6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\t\tgenerateNewCompilationUnitDOM(unit);", "-\t\t\tif (fCreationOccurred) {", "+\t\t\tgenerateNewCompilationUnitAST(unit);", "+\t\t\tif (this.creationOccurred) {", "-\t\t\t\tIBuffer buffer = unit.getBuffer();", "-\t\t\t\tif (buffer  == null) return;", "-\t\t\t\tchar[] bufferContents = buffer.getCharacters();", "-\t\t\t\tif (bufferContents == null) return;", "-\t\t\t\tchar[] elementContents = Util.normalizeCRs(getCreatedElementCharacters(), bufferContents);", "-\t\t\t\tswitch (fReplacementLength) {", "-\t\t\t\t\tcase -1 : ", "-\t\t\t\t\t\t// element is append at the end", "-\t\t\t\t\t\tbuffer.append(elementContents);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 0 :", "-\t\t\t\t\t\t// element is inserted", "-\t\t\t\t\t\tbuffer.replace(fInsertionPosition, 0, elementContents);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault :", "-\t\t\t\t\t\t// element is replacing the previous one", "-\t\t\t\t\t\tbuffer.replace(fInsertionPosition, fReplacementLength, elementContents);", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2f3b6f73bbe4c03228530c725ea327f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateTypeMemberOperation.java", "commitBeforeChange": "90d481edc9060cc498a8f085b08186108312e37b", "commitAfterChange": "f3a3c06f6e68ab7680c250209b9759ac3d56fec6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected void generateNewCompilationUnitDOM(ICompilationUnit cu) throws JavaModelException", "signatureAfterChange": " protected abstract SimpleName rename(ASTNode node, SimpleName newName);", "diff": ["-// TODO - JDOM - remove once model ported off of JDOM", "-protected void generateNewCompilationUnitDOM(ICompilationUnit cu) throws JavaModelException {", "-\tIBuffer buffer = cu.getBuffer();", "-\tif (buffer == null) return;", "-\tchar[] prevSource = buffer.getCharacters();", "-\tif (prevSource == null) return;", "-", "-\t// create a JDOM for the compilation unit", "-\tfCUDOM = (new DOMFactory()).createCompilationUnit(prevSource, cu.getElementName());", "-\tIDOMNode parent = ((JavaElement) getParentElement()).findNode(fCUDOM);", "-\tif (parent == null) {", "-\t\t//#findNode does not work for autogenerated CUs as the contents are empty", "-\t\tparent = fCUDOM;", "-\t}", "-\tIDOMNode child = deprecatedGenerateElementDOM();", "-\tif (child != null) {", "-\t\tinsertDOMNode(parent, child);", "-\t}", "-\tworked(1);", "-}", "+protected abstract SimpleName rename(ASTNode node, SimpleName newName);"]}], "num": 62598}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "721a4689fe35cc65bf568d44c5d36d3a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7bee1aa66baa24ab29973835bc21971", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "6defd2b79520062f5150164ded77c2d030acc168", "commitAfterChange": "d351702f3561d64a024c15ffbed0faad48ce2838", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testBug70892negative2()", "signatureAfterChange": " \tpublic void test039()", "diff": ["-\tpublic void testBug70892negative2() {", "+\t}", "+\tpublic void test039() {", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\" /**\\n\" + ", "+\t\t\t\t\t\"  * Invalid type parameter reference\\n\" + ", "+\t\t\t\t\t\"  * @param <E Type parameter of class X\\n\" + ", "+\t\t\t\t\t\"  * @param E> Type\\n\" + ", "+\t\t\t\t\t\"  * @param <<E> Type\\n\" + ", "+\t\t\t\t\t\"  * @param <<<E> Type\\n\" + ", "+\t\t\t\t\t\"  * @param <E>> Type\\n\" + ", "+\t\t\t\t\t\"  */\\n\" + ", "+\t\t\t\t\t\" public class X<E> {}\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\t* @param <E Type parameter of class X\\n\" + ", "+\t\t\t\t\"\t         ^^\\n\" + ", "+\t\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\t* @param E> Type\\n\" + ", "+\t\t\t\t\"\t         ^^\\n\" + ", "+\t\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\t* @param <<E> Type\\n\" + ", "+\t\t\t\t\"\t         ^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\t* @param <<<E> Type\\n\" + ", "+\t\t\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\t* @param <E>> Type\\n\" + ", "+\t\t\t\t\"\t         ^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"6. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\t\"\tpublic class X<E> {}\\n\" + ", "+\t\t\t\t\"\t               ^\\n\" + ", "+\t\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\t\"----------\\n\"", "+\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef2219b47fcc6fc079dc16164f69af09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 179, "methodNumberAfterChange": 179, "signatureBeforeChange": " \tpublic void test054a()", "signatureAfterChange": " \tpublic void test054a()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 6)\\n\" +", "-\t\t\t\"\tString a(X x) {  return null; }\\n\" +", "-\t\t\t\"\t       ^^^^^^\\n\" +", "-\t\t\t\"Method a(X) has the same erasure a(X) as another method in type X\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 7)\\n\" +", "-\t\t\t\"\t<T extends X> T a(T x) {  return null; }\\n\" +", "-\t\t\t\"\t                ^^^^^^\\n\" +", "-\t\t\t\"Method a(T) has the same erasure a(X) as another method in type X\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\t<T1, T2> String aaa(X x) {  return null; }\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^\\n\" + ", "+\t\t\t\"Method aaa(X) has the same erasure aaa(X) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\t<T extends X> T aaa(T x) {  return null; }\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^\\n\" + ", "+\t\t\t\"Method aaa(T) has the same erasure aaa(X) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t<T> String aa(X x) {  return null; }\\n\" + ", "+\t\t\t\"\t           ^^^^^^^\\n\" + ", "+\t\t\t\"Method aa(X) has the same erasure aa(X) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t<T extends X> T aa(T x) {  return null; }\\n\" + ", "+\t\t\t\"\t                ^^^^^^^\\n\" + ", "+\t\t\t\"Method aa(T) has the same erasure aa(X) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tString a(X x) {  return null; }\\n\" + ", "+\t\t\t\"\t       ^^^^^^\\n\" + ", "+\t\t\t\"Method a(X) has the same erasure a(X) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\t<T extends X> T a(T x) {  return null; }\\n\" + ", "+\t\t\t\"\t                ^^^^^^\\n\" + ", "+\t\t\t\"Method a(T) has the same erasure a(X) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\t<T> String z(X x) { return null; }\\n\" + ", "+\t\t\t\"\t           ^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method z(X) in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\t<T, S> Object z(X x) { return null; }\\n\" + ", "+\t\t\t\"\t              ^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method z(X) in type X\\n\" + ", "-\t\t\t// a(X) is already defined in X", "+/* javac 7", "+X.java:3: name clash: <T>aaa(T) and <T1,T2>aaa(X) have the same erasure", "+        <T extends X> T aaa(T x) {  return null; }", "+                        ^", "+  where T,T1,T2 are type-variables:", "+    T extends X declared in method <T>aaa(T)", "+    T1 extends Object declared in method <T1,T2>aaa(X)", "+    T2 extends Object declared in method <T1,T2>aaa(X)", "+X.java:5: name clash: <T#1>aa(T#1) and <T#2>aa(X) have the same erasure", "+        <T extends X> T aa(T x) {  return null; }", "+                        ^", "+  where T#1,T#2 are type-variables:", "+    T#1 extends X declared in method <T#1>aa(T#1)", "+    T#2 extends Object declared in method <T#2>aa(X)", "+X.java:7: a(X) is already defined in X", "+        <T extends X> T a(T x) {  return null; }", "+                        ^", "+X.java:9: name clash: <T#1,S>z(X) and <T#3>z(X) have the same erasure", "+        <T, S> Object z(X x) { return null; }", "+                      ^", "+  where T#1,S,T#3 are type-variables:", "+    T#1 extends Object declared in method <T#1,S>z(X)", "+    S extends Object declared in method <T#1,S>z(X)", "+    T#3 extends Object declared in method <T#3>z(X)", "+4 errors", "+ */"]}], "num": 25361}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1077981cd8f7f93256860247c63a1d32", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3cdc049a72348c1b4bb388f8dbbb7d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "c9b530e01318c4f59e9e7828de1da4c97f8fe89e", "commitAfterChange": "69656daba7331091b482d7c6b3e675c144730396", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "  \tpublic boolean visit(SuperMethodInvocation node)", "signatureAfterChange": "  \tpublic boolean visit(SuperMethodInvocation node)", "diff": ["-\t\t// TODO Auto-generated method stub", "-\t\treturn super.visit(node);", "+\t\tfinal Name qualifier = node.getQualifier();", "+\t\tif (qualifier != null) {", "+\t\t\tqualifier.accept(this);", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDOT);", "+\t\t}", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNamesuper);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDOT);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_method_invocation);", "+", "+\t\tfinal List arguments = node.arguments();", "+\t\tfinal int argumentsLength = arguments.size();", "+\t\tif (argumentsLength != 0) {", "+\t\t\tif (this.preferences.insert_space_after_opening_paren_in_method_invocation) {", "+\t\t\t\tthis.scribe.space();", "+\t\t\t}", "+\t\t\tif (argumentsLength > 1) {", "+\t\t\t\tAlignment2 argumentsAlignment = this.scribe.createAlignment(", "+\t\t\t\t\t\t\"messageArguments\", //$NON-NLS-1$", "+\t\t\t\t\t\tthis.preferences.alignment_for_arguments_in_method_invocation,", "+\t\t\t\t\t\targumentsLength,", "+\t\t\t\t\t\tthis.scribe.scanner.currentPosition);", "+\t\t\t\tthis.scribe.enterAlignment(argumentsAlignment);", "+\t\t\t\tboolean ok = false;", "+\t\t\t\tdo {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "+\t\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_method_invocation_arguments);", "+\t\t\t\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.scribe.alignFragment(argumentsAlignment, i);", "+\t\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_method_invocation_arguments) {", "+\t\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t((Expression) arguments.get(i)).accept(this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tok = true;", "+\t\t\t\t\t} catch (AlignmentException e) {", "+\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t\t}", "+\t\t\t\t} while (!ok);", "+\t\t\t\tthis.scribe.exitAlignment(argumentsAlignment, true);", "+\t\t\t} else {", "+\t\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "+\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_method_invocation_arguments);", "+\t\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\t}", "+\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_method_invocation_arguments) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t\t((Expression) arguments.get(i)).accept(this);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_method_invocation); ", "+\t\t} else {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_parens_in_method_invocation);", "+\t\t}\t\t\t", "+\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd06a6a820b86aaa94abdedf18314116", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "c9b530e01318c4f59e9e7828de1da4c97f8fe89e", "commitAfterChange": "69656daba7331091b482d7c6b3e675c144730396", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "  \tpublic boolean visit(MethodInvocation node)", "signatureAfterChange": "  \tpublic boolean visit(MethodInvocation node)", "diff": ["-\t\t// TODO Auto-generated method stub", "-\t\treturn super.visit(node);", "+\t\tMethodInvocationFragmentBuilder builder = new MethodInvocationFragmentBuilder();", "+\t\tnode.accept(builder);", "+\t\t", "+\t\tfinal List fragments = builder.fragments();", "+\t\tfinal int fragmentsLength = fragments.size();", "+\t\tif (fragmentsLength >= 3) {", "+\t\t\t// manage cascading method invocations", "+\t\t} else {", "+\t\t\tExpression expression = node.getExpression();", "+\t\t\tif (expression != null) {", "+\t\t\t\texpression.accept(this);", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDOT);", "+\t\t\t}", "+\t\t\tfinal List typeArguments = node.typeArguments();", "+\t\t\tfinal int typeArgumentsLength = typeArguments.size();", "+\t\t\tif (typeArgumentsLength != 0) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_type_arguments); ", "+\t\t\t\tif (this.preferences.insert_space_after_opening_angle_bracket_in_type_arguments) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < typeArgumentsLength - 1; i++) {", "+\t\t\t\t\t((Type) typeArguments.get(i)).accept(this);", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_type_arguments);", "+\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_type_arguments) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\t((Type) typeArguments.get(typeArgumentsLength - 1)).accept(this);", "+\t\t\t\tif (isClosingGenericToken()) {", "+\t\t\t\t\tthis.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_type_arguments); ", "+\t\t\t\t}", "+\t\t\t\tif (this.preferences.insert_space_after_closing_angle_bracket_in_type_arguments) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier); // selector", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_method_invocation);", "+", "+\t\t\tfinal List arguments = node.arguments();", "+\t\t\tfinal int argumentsLength = arguments.size();", "+\t\t\tif (argumentsLength != 0) {", "+\t\t\t\tif (this.preferences.insert_space_after_opening_paren_in_method_invocation) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t\t\tif (argumentsLength > 1) {", "+\t\t\t\t\tAlignment2 argumentsAlignment = this.scribe.createAlignment(", "+\t\t\t\t\t\t\t\"messageArguments\", //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.preferences.alignment_for_arguments_in_method_invocation,", "+\t\t\t\t\t\t\targumentsLength,", "+\t\t\t\t\t\t\tthis.scribe.scanner.currentPosition);", "+\t\t\t\t\tthis.scribe.enterAlignment(argumentsAlignment);", "+\t\t\t\t\tboolean ok = false;", "+\t\t\t\t\tdo {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "+\t\t\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_method_invocation_arguments);", "+\t\t\t\t\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tthis.scribe.alignFragment(argumentsAlignment, i);", "+\t\t\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_method_invocation_arguments) {", "+\t\t\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t((Expression) arguments.get(i)).accept(this);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tok = true;", "+\t\t\t\t\t\t} catch (AlignmentException e) {", "+\t\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} while (!ok);", "+\t\t\t\t\tthis.scribe.exitAlignment(argumentsAlignment, true);", "+\t\t\t\t} else {", "+\t\t\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "+\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_method_invocation_arguments);", "+\t\t\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_method_invocation_arguments) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t((Expression) arguments.get(i)).accept(this);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_method_invocation); ", "+\t\t\t} else {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_parens_in_method_invocation);", "+\t\t\t}\t\t\t", "+\t\t}", "+\t\treturn false;"]}], "num": 61445}
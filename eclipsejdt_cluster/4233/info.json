{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "13901d2a8b162c2d11d67f54f2c305cf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f60ea034c3e3f2056185f6b2075d264", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "381b0c5e3a54bec6f421d38d7ee5fd38c998afc2", "commitAfterChange": "140563af50526c3e1d6be899503d29113c538e25", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\treturn this.resolvedType = scope.environment().convertToRawType(type);", "+\t\t\t\t\ttype = scope.environment().convertToRawType(type);", "+\t\t\t\t\tif (type.isRawType() && scope.compilerOptions().reportRawTypeReference) {", "+\t\t\t\t\t\tscope.problemReporter().rawTypeReference(this, type);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn this.resolvedType = type;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8b530b6e53d94737561a32faf4be5f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "f7529141d7e838cb41f5908a7631797fc0e75f0a", "commitAfterChange": "8f217d25322b885604d27f1ae4690e476bac378b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-//\t\t\t\t\t\t\tif (castType.isRawType() && scope.compilerOptions().reportRawTypeReference){", "-//\t\t\t\t\t\t\t\tscope.problemReporter().rawTypeReference(this.type, castType);\t\t\t", "-//\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (castType.isRawType() && scope.compilerOptions().getSeverity(CompilerOptions.RawTypeReference) != ProblemSeverities.Ignore){", "+\t\t\t\t\t\t\t\tscope.problemReporter().rawTypeReference(this.type, castType);\t\t\t", "+\t\t\t\t\t\t\t}"]}], "num": 4233}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c6357d0f359f5ede672739de64e7a366", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f2da82ad46031dac59495f33207f965", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 164, "methodNumberAfterChange": 164, "signatureBeforeChange": " \tpublic void test050e()", "signatureAfterChange": " \tpublic void test050e()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\t<N extends B> N a(A<String> s) { return null; }\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method a(A<String>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\t<N> Object a(A<Number> n) { return null; }\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method a(A<Number>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t<N extends B> void b(A<String> s) {}\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t<N extends B> B b(A<Number> n) { return null; }\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tvoid c(A<String> s) {}\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method c(A<String>) has the same erasure c(A<T>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tB c(A<Number> n) { return null; }\\n\" + ", "+\t\t\t\"\t  ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method c(A<Number>) has the same erasure c(A<T>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\"", "+/* javac 7", "+X.java:3: name clash: <N#1>a(A<Number>) and <N#2>a(A<String>) have the same erasure", "+        <N> Object a(A<Number> n) { return null; }", "+                   ^", "+  where N#1,N#2 are type-variables:", "+    N#1 extends Object declared in method <N#1>a(A<Number>)", "+    N#2 extends B declared in method <N#2>a(A<String>)", "+X.java:5: name clash: <N#1>b(A<Number>) and <N#2>b(A<String>) have the same erasure", "+        <N extends B> B b(A<Number> n) { return null; }", "+                        ^", "+  where N#1,N#2 are type-variables:", "+    N#1 extends B declared in method <N#1>b(A<Number>)", "+    N#2 extends B declared in method <N#2>b(A<String>)", "+X.java:7: name clash: c(A<Number>) and c(A<String>) have the same erasure", "+        B c(A<Number> n) { return null; }", "+          ^", "+3 errors", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "295e061ed90ba4ebb1d4b845811787e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void test021()", "signatureAfterChange": " \tpublic void test021()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return;", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"true\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in Y.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic class Y<V extends String> extends X<V> {\\n\" + ", "+\t\t\t\"\t                         ^^^^^^\\n\" + ", "+\t\t\t\"The type parameter V should not be bounded by the final type String. Final types cannot be further extended\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tpublic static <W extends String> Y<W> make(Class<W> clazz) {\\n\" + ", "+\t\t\t\"\t                         ^^^^^^\\n\" + ", "+\t\t\t\"The type parameter W should not be bounded by the final type String. Final types cannot be further extended\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tpublic static <W extends String> Y<W> make(Class<W> clazz) {\\n\" + ", "+\t\t\t\"\t                                      ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method make(Class<W>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in Y.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic static <U extends Object> X<U> make(Class<U> clazz) {\\n\" + ", "+\t\t\t\"\t                                      ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method make(Class<U>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in Y.java (at line 13)\\n\" + ", "+\t\t\t\"\tY.make(getClazz());\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation make(Class) of the generic method make(Class<W>) of type Y\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in Y.java (at line 13)\\n\" + ", "+\t\t\t\"\tY.make(getClazz());\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in Y.java (at line 15)\\n\" + ", "+\t\t\t\"\tpublic static Class getClazz() {\\n\" + ", "+\t\t\t\"\t              ^^^^^\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);", "+/* javac 7", "+X.java:8: name clash: <U>make(Class<U>) and <W>make(Class<W>) have the same erasure", "+  public static <U extends Object> X<U> make(Class<U> clazz) {", "+                                        ^", "+  where U,W are type-variables:", "+    U extends Object declared in method <U>make(Class<U>)", "+    W extends String declared in method <W>make(Class<W>)", "+X.java:13: warning: [unchecked] unchecked conversion", "+    Y.make(getClazz());", "+                   ^", "+  required: Class<W#1>", "+  found:    Class", "+  where W#1,W#2 are type-variables:", "+    W#1 extends String declared in method <W#2>make(Class<W#2>)", "+    W#2 extends String declared in method <W#2>make(Class<W#2>)", "+X.java:13: warning: [unchecked] unchecked method invocation: method make in class Y is applied to given types", "+    Y.make(getClazz());", "+          ^", "+  required: Class<W>", "+  found: Class", "+  where W is a type-variable:", "+    W extends String declared in method <W>make(Class<W>)", "+1 error", "+2 warnings", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cb9f396eb2bbd3bf0fb0d1e6a796912", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 579, "methodNumberAfterChange": 579, "signatureBeforeChange": " \tpublic void test0561()", "signatureAfterChange": " \tpublic void test0561()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return;", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tvoid foo(A<String> a) {}\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tObject foo(A<Integer> a) { return null; }\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tvoid test(A<Integer> a) { foo(a); }\\n\" + ", "+\t\t\t\"\t                          ^^^\\n\" + ", "+\t\t\t\"The method foo(A<String>) in the type X is not applicable for the arguments (A<Integer>)\\n\" + ", "+\t\t\t\"----------\\n\"", "-\t\tthis.runConformTest(", "+/* javac 7", "+X.java:3: name clash: foo(A<Integer>) and foo(A<String>) have the same erasure", "+        Object foo(A<Integer> a) { return null; }", "+               ^", "+X.java:4: method foo in class X cannot be applied to given types", "+        void test(A<Integer> a) { foo(a); }", "+                                  ^", "+  required: A<String>", "+  found: A<Integer>", "+2 errors", "+ */", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tNumber foo(A<String> a) { return null; }\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tInteger foo(A<Integer> a) { return null; }\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tvoid test(A<Integer> a) { foo(a); }\\n\" + ", "+\t\t\t\"\t                          ^^^\\n\" + ", "+\t\t\t\"The method foo(A<String>) in the type X is not applicable for the arguments (A<Integer>)\\n\" + ", "+\t\t\t\"----------\\n\"", "+/* javac 7", "+X.java:3: name clash: foo(A<Integer>) and foo(A<String>) have the same erasure", "+        Integer foo(A<Integer> a) { return null; }", "+                ^", "+X.java:4: method foo in class X cannot be applied to given types", "+        void test(A<Integer> a) { foo(a); }", "+                                  ^", "+  required: A<String>", "+  found: A<Integer>", "+2 errors", "+ */"]}], "num": 39048}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7bda55d930432913f2b499bc9246d7c7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c6d6ee2ea8506f56f399c6820ffaffb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "1807cc67396ea9076c76cb31f2d61c82f124d048", "commitAfterChange": "52597fb7db7ddfe8d0d19142d700054ae1d908a1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\t\tpublic void preferenceChange(PreferenceChangeEvent event)", "signatureAfterChange": " \tpublic void handlePreferenceChange(String key, String oldValue, String newValue)", "diff": ["-\t\tIPreferenceChangeListener projListener = new IPreferenceChangeListener() {", "-\t\t\tpublic void preferenceChange(PreferenceChangeEvent event) {", "-\t\t\t\t", "-\t\t\t\tfinal String newValue = (String)event.getNewValue();", "-\t\t\t\tif (newValue == null) {", "-\t\t\t\t\t// Null is used to indicate this preference has", "-\t\t\t\t\t// been removed, as the project has been deleted.", "-\t\t\t\t\t// We do nothing", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\tfinal String oldValue = (String)event.getOldValue();", "-\t\t\t\tif (newValue.equals(oldValue)) {", "-\t\t\t\t\t// No-op -- same config", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tif (AptPreferenceConstants.APT_GENSRCDIR.equals(event.getKey())) {", "-\t\t\t\t\tfinal boolean aptEnabled = AptConfig.isEnabled(_aptProject.getJavaProject());", "-\t\t\t\t\tif( AptPlugin.DEBUG )", "-\t\t\t\t\t\tAptPlugin.trace(\"configure generated source directory new value = \" +  //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tnewValue + ", "-\t\t\t\t\t\t\t\t\" old value = \"  + oldValue + //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\" APT is enabled = \" + aptEnabled); //$NON-NLS-1$", "-\t\t\t\t\t// If APT is enabled, ", "-\t\t\t\t\t// clean up the old cp entry, delete the old folder, ", "-\t\t\t\t\t// create the new one and update the classpath.", "-\t\t\t\t\tif( aptEnabled )", "-\t\t\t\t\t\tconfigureGeneratedSourceFolder( newValue, oldValue );", "-\t\t\t\t\telse", "-\t\t\t\t\t\tsetGeneratedSourceFolderName(newValue);", "-\t\t\t\t}", "-\t\t\t\telse if(AptPreferenceConstants.APT_ENABLED.equals(event.getKey()) ){", "-\t\t\t\t\tif( AptPlugin.DEBUG ){", "-\t\t\t\t\t\tAptPlugin.trace(\"Got preference change event for \" + AptPreferenceConstants.APT_ENABLED ); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\t// no-op;", "-\t\t\t\t\tif(newValue.equals(oldValue)){", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\tfinal boolean isEnabling = Boolean.parseBoolean(newValue);", "-\t\t\t\t\tif( AptPlugin.DEBUG ){", "-\t\t\t\t\t\tif( isEnabling )", "-\t\t\t\t\t\t\tAptPlugin.trace(\"enabling APT for \" + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$", "-\t\t\t\t\t\telse", "-\t\t\t\t\t\t\tAptPlugin.trace(\"diabling APT \" + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tif( isEnabling )", "-\t\t\t\t\t\tconfigureGeneratedSourceFolder();", "-\t\t\t\t\telse{", "-\t\t\t\t\t\tfinal IFolder srcFolder = getGeneratedSourceFolder();", "-\t\t\t\t\t\tprojectClean(true);", "-\t\t\t\t\t\tresetGeneratedSrcFolder(srcFolder, false);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "+\t */", "+\tpublic void handlePreferenceChange(String key, String oldValue, String newValue) ", "+\t{", "+\t\tif (newValue == null) {", "+\t\t\t// Null is used to indicate this preference has", "+\t\t\t// been removed, as the project has been deleted.", "+\t\t\t// We do nothing", "+\t\t\treturn;", "+\t\t}", "+\t\tif (newValue.equals(oldValue)) {", "+\t\t\t// No-op -- same config", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\tif (AptPreferenceConstants.APT_GENSRCDIR.equals(key)) {", "+\t\t\tfinal boolean aptEnabled = AptConfig.isEnabled(_aptProject.getJavaProject());", "+\t\t\tif( AptPlugin.DEBUG )", "+\t\t\t\tAptPlugin.trace(\"configure generated source directory new value = \" +  //$NON-NLS-1$", "+\t\t\t\t\t\tnewValue + ", "+\t\t\t\t\t\t\" old value = \"  + oldValue + //$NON-NLS-1$", "+\t\t\t\t\t\t\" APT is enabled = \" + aptEnabled); //$NON-NLS-1$", "+\t\t\t// If APT is enabled, ", "+\t\t\t// clean up the old cp entry, delete the old folder, ", "+\t\t\t// create the new one and update the classpath.", "+\t\t\tif( aptEnabled )", "+\t\t\t\tconfigureGeneratedSourceFolder( newValue, oldValue );", "+\t\t\telse", "+\t\t\t\tsetGeneratedSourceFolderName(newValue);", "+\t\t}", "+\t\telse if(AptPreferenceConstants.APT_ENABLED.equals(key) ){", "+\t\t\tif( AptPlugin.DEBUG ){", "+\t\t\t\tAptPlugin.trace(\"Got preference change event for \" + AptPreferenceConstants.APT_ENABLED ); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\t", "+\t\t\tfinal boolean isEnabling = Boolean.parseBoolean(newValue);", "+\t\t\tif( AptPlugin.DEBUG ){", "+\t\t\t\tif( isEnabling )", "+\t\t\t\t\tAptPlugin.trace(\"enabling APT for \" + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$", "+\t\t\t\telse", "+\t\t\t\t\tAptPlugin.trace(\"diabling APT \" + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tif( isEnabling )", "+\t\t\t\tconfigureGeneratedSourceFolder();", "+\t\t\telse{", "+\t\t\t\tfinal IFolder srcFolder = getGeneratedSourceFolder();", "+\t\t\t\tprojectClean(true);", "+\t\t\t\tresetGeneratedSrcFolder(srcFolder, false);", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86fb9ca4d0654cd9a6b77ca26c180b18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "1807cc67396ea9076c76cb31f2d61c82f124d048", "commitAfterChange": "52597fb7db7ddfe8d0d19142d700054ae1d908a1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic GeneratedFileManager(final AptProject aptProject)", "signatureAfterChange": " \tpublic GeneratedFileManager(final AptProject aptProject)", "diff": ["-\t\t", "-\t\t// register a preference listener so that we can watch for changes ", "-\t\t// to the gen src dir at the project scope...", "-\t\tIScopeContext projScope = new ProjectScope(aptProject.getJavaProject().getProject());", "-\t\tIEclipsePreferences projPrefs = projScope.getNode(AptPlugin.PLUGIN_ID);", "-\t\tIPreferenceChangeListener projListener = new IPreferenceChangeListener() {", "-\t\t\tpublic void preferenceChange(PreferenceChangeEvent event) {", "-\t\t\t\t", "-\t\t\t\tfinal String newValue = (String)event.getNewValue();", "-\t\t\t\tif (newValue == null) {", "-\t\t\t\t\t// Null is used to indicate this preference has", "-\t\t\t\t\t// been removed, as the project has been deleted.", "-\t\t\t\t\t// We do nothing", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\tfinal String oldValue = (String)event.getOldValue();", "-\t\t\t\tif (newValue.equals(oldValue)) {", "-\t\t\t\t\t// No-op -- same config", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tif (AptPreferenceConstants.APT_GENSRCDIR.equals(event.getKey())) {", "-\t\t\t\t\tfinal boolean aptEnabled = AptConfig.isEnabled(_aptProject.getJavaProject());", "-\t\t\t\t\tif( AptPlugin.DEBUG )", "-\t\t\t\t\t\tAptPlugin.trace(\"configure generated source directory new value = \" +  //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tnewValue + ", "-\t\t\t\t\t\t\t\t\" old value = \"  + oldValue + //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\" APT is enabled = \" + aptEnabled); //$NON-NLS-1$", "-\t\t\t\t\t// If APT is enabled, ", "-\t\t\t\t\t// clean up the old cp entry, delete the old folder, ", "-\t\t\t\t\t// create the new one and update the classpath.", "-\t\t\t\t\tif( aptEnabled )", "-\t\t\t\t\t\tconfigureGeneratedSourceFolder( newValue, oldValue );", "-\t\t\t\t\telse", "-\t\t\t\t\t\tsetGeneratedSourceFolderName(newValue);", "-\t\t\t\t}", "-\t\t\t\telse if(AptPreferenceConstants.APT_ENABLED.equals(event.getKey()) ){", "-\t\t\t\t\tif( AptPlugin.DEBUG ){", "-\t\t\t\t\t\tAptPlugin.trace(\"Got preference change event for \" + AptPreferenceConstants.APT_ENABLED ); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\t// no-op;", "-\t\t\t\t\tif(newValue.equals(oldValue)){", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\tfinal boolean isEnabling = Boolean.parseBoolean(newValue);", "-\t\t\t\t\tif( AptPlugin.DEBUG ){", "-\t\t\t\t\t\tif( isEnabling )", "-\t\t\t\t\t\t\tAptPlugin.trace(\"enabling APT for \" + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$", "-\t\t\t\t\t\telse", "-\t\t\t\t\t\t\tAptPlugin.trace(\"diabling APT \" + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tif( isEnabling )", "-\t\t\t\t\t\tconfigureGeneratedSourceFolder();", "-\t\t\t\t\telse{", "-\t\t\t\t\t\tfinal IFolder srcFolder = getGeneratedSourceFolder();", "-\t\t\t\t\t\tprojectClean(true);", "-\t\t\t\t\t\tresetGeneratedSrcFolder(srcFolder, false);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t};", "-\t\tprojPrefs.addPreferenceChangeListener(projListener);", "-\t\t", "-\t\t// ...and at the workspace scope.", "-\t\t// Note we check all projects, even those that have project-specific", "-\t\t// settings, when the workspace setting changes.  For projects with", "-\t\t// project-specific settings, the value of the setting won't change ", "-\t\t// so the request will be ignored.", "-\t\tIScopeContext wkspScope = new InstanceScope();", "-\t\tIEclipsePreferences wkspPrefs = wkspScope.getNode(AptPlugin.PLUGIN_ID);", "-\t\tIPreferenceChangeListener wkspListener = new IPreferenceChangeListener() {", "-\t\t\tpublic void preferenceChange(PreferenceChangeEvent event) {", "-\t\t\t\tif (AptPreferenceConstants.APT_GENSRCDIR.equals(event.getKey())) {", "-\t\t\t\t\tconfigureGeneratedSourceFolder( AptConfig.getGenSrcDir(javaProject), null );", "-\t\t\t\t}", "-\t\t\t}", "-\t\t};", "-\t\twkspPrefs.addPreferenceChangeListener(wkspListener);"]}], "num": 55167}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6fee5a76337c3f183ec2ae023c7b3d7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b50f64de25be610d9ba8882bd5587f4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 90, "signatureBeforeChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "diff": ["+\t\t// Expected types for javadoc", "+\t\t} else if (parent instanceof Javadoc) {", "+\t\t\tif (scope.kind == Scope.METHOD_SCOPE) {", "+\t\t\t\tMethodScope methodScope = (MethodScope) scope;", "+\t\t\t\tAbstractMethodDeclaration methodDecl = methodScope.referenceMethod();", "+\t\t\t\tif (methodDecl != null && methodDecl.binding != null) {", "+\t\t\t\t\tReferenceBinding[] exceptions = methodDecl.binding.thrownExceptions;", "+\t\t\t\t\tif (exceptions != null) {", "+\t\t\t\t\t\tfor (int i = 0; i < exceptions.length; i++) {", "+\t\t\t\t\t\t\taddExpectedType(exceptions[i]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee668e7d09aad0f0242ecc5fa86eb52c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java", "commitBeforeChange": "a348185fc1394ba62b163286d4e293f1fc3fd0c0", "commitAfterChange": "65ed763b9d706d338d2d71213ef4b79f1a7dfcf5", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic void traverse( \t\tASTVisitor visitor, \t\tCompilationUnitScope unitScope)", "signatureAfterChange": "  \tpublic void traverse( \t\tASTVisitor visitor, \t\tCompilationUnitScope unitScope)", "diff": ["+\t\t\t\tboolean isPackageInfo = isPackageInfo();", "+\t\t\t\tif (this.types != null && isPackageInfo) {", "+\t\t            // resolve synthetic type declaration", "+\t\t\t\t\tfinal TypeDeclaration syntheticTypeDeclaration = types[0];", "+\t\t\t\t\t// resolve javadoc package if any", "+\t\t\t\t\tfinal MethodScope classScope = syntheticTypeDeclaration.staticInitializerScope;", "+\t\t\t\t\tif (this.javadoc != null) {", "+\t\t\t\t\t\tthis.javadoc.traverse(visitor, classScope);", "+\t\t\t\t\t}", "+\t\t\t\t\tfinal Annotation[] annotations = this.currentPackage.annotations;", "+\t\t\t\t\tif (annotations != null) {", "+\t\t\t\t\t\tint annotationsLength = annotations.length;", "+\t\t\t\t\t\tfor (int i = 0; i < annotationsLength; i++) {", "+\t\t\t\t\t\t\tannotations[i].traverse(visitor, classScope);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 47094}
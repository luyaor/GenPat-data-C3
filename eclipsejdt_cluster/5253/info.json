{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84f4edc012719fce1fbe344655d988d8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3af48786c742ad62918a7841497148dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "1784048e951cac8e5c6590cc5827817757e6384e", "commitAfterChange": "4a48abb3b4027036bdeac61104059b6c83710144", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate Expression parseMember(TypeReference receiver) throws InvalidInputException", "signatureAfterChange": " \tprivate Expression parseMember(TypeReference receiver) throws InvalidInputException", "diff": ["-\t\tif (readTokenAndConsume() == TerminalTokens.TokenNameIdentifier) {", "+\t\tif (readToken() == TerminalTokens.TokenNameIdentifier) {", "+\t\t\tconsumeToken();", "-\t\t\tif (readTokenAndConsume() == TerminalTokens.TokenNameLPAREN) {", "+\t\t\tif (readToken() == TerminalTokens.TokenNameLPAREN) {", "+\t\t\t\tconsumeToken();", "-\t\t\t\t\tend = end < this.lineEnd ? end : (this.lineEnd - 1);", "+\t\t\t\t\tend = end < this.lineEnd ? end : this.lineEnd;", "-\t\tthis.sourceParser.problemReporter().javadocInvalidSeeReference(start, getEndPosition());", "+\t\tint end = getEndPosition() - 1;", "+\t\tend = start > end ? getEndPosition() : end;", "+\t\tthis.sourceParser.problemReporter().javadocInvalidSeeReference(start, end);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "733b9b0bcffd22882462b7846f08901d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemHandler.java", "commitBeforeChange": "1fd4391b9d956e4b222e75746a12248fe673ae09", "commitAfterChange": "0ac06ace387f6f7ca79dcd41a12a6564b157c4e4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void handle( \tint problemId,  \tString[] problemArguments,  \tString[] messageArguments, \tint severity,  \tint problemStartPosition,  \tint problemEndPosition,  \tReferenceContext referenceContext,  \tCompilationResult unitResult)", "signatureAfterChange": " public void handle( \tint problemId,  \tString[] problemArguments,  \tString[] messageArguments, \tint severity,  \tint problemStartPosition,  \tint problemEndPosition,  \tReferenceContext referenceContext,  \tCompilationResult unitResult)", "diff": ["-\t\t\tCategorizedProblem problem = this.createProblem(null, \tproblemId, \tproblemArguments, messageArguments, severity, 0, 0, 0);\t\t\t", "+\t\t\tCategorizedProblem problem = this.createProblem(null, \tproblemId, \tproblemArguments, messageArguments, severity, 0, 0, 0, 0);\t\t\t", "+\tint lineNumber = problemStartPosition >= 0", "+\t\t\t? searchLineNumber(unitResult.getLineSeparatorPositions(), problemStartPosition)", "+\t\t\t: 0;", "+\tint columnNumber = problemStartPosition >= 0", "+\t\t\t? searchColumnNumber(unitResult.getLineSeparatorPositions(), lineNumber, problemStartPosition)", "+\t\t\t: 0;", "-\t\t\tproblemStartPosition >= 0", "-\t\t\t\t? searchLineNumber(unitResult.getLineSeparatorPositions(), problemStartPosition)", "-\t\t\t\t: 0);", "+\t\t\tlineNumber,", "+\t\t\tcolumnNumber);", "+"]}], "num": 5253}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7eb3977c1364089e11811df481f1b3ea", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a09398af27c656c8a05c3ff4187b3290", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "3091564ff71d95ca83672941f8a4ec3464344683", "commitAfterChange": "ac6c2726bc9770d7575dff83ad9611f141165280", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void matchLevelAndReportImportRef(ImportReference importRef, Binding binding, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchLevelAndReportImportRef(ImportReference importRef, Binding binding, MatchLocator locator) throws CoreException", "diff": ["+\t\t} else if (binding instanceof MethodBinding) {", "+\t\t\tMethodBinding methodBinding = (MethodBinding) binding;", "+\t\t\tif (!methodBinding.isStatic()) return;", "+\t\t\trefBinding = methodBinding.declaringClass;", "+\t\t// resolve and report", "+\t\tint level = resolveLevel(refBinding);", "+\t\tif (level >= INACCURATE_MATCH) {", "+\t\t\tmatchReportImportRef(", "+\t\t\t\timportRef, ", "+\t\t\t\tbinding, ", "+\t\t\t\tlocator.createImportHandle(importRef), ", "+\t\t\t\tlevel == ACCURATE_MATCH", "+\t\t\t\t\t? SearchMatch.A_ACCURATE", "+\t\t\t\t\t: SearchMatch.A_INACCURATE,", "+\t\t\t\tlocator);", "+\t\t}", "+\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d22fb01dd0498075d54b5ea002964c14", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldLocator.java", "commitBeforeChange": "272d365c8c794b76444b3643d2b9ddaaf32b6191", "commitAfterChange": "6c8b6c70bde19844df9a948acbc4f151c3d9aa74", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void matchLevelAndReportImportRef(ImportReference importRef, Binding binding, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchLevelAndReportImportRef(ImportReference importRef, Binding binding, MatchLocator locator) throws CoreException", "diff": ["-\t\t// we accept to report match of static field on static import", "-\t\tint level = resolveLevel(binding);", "-\t\tif (level >= INACCURATE_MATCH) {", "-\t\t\tint accuracy = level == ACCURATE_MATCH", "-\t\t\t\t? SearchMatch.A_ACCURATE", "-\t\t\t\t: SearchMatch.A_INACCURATE;", "-\t\t\tSearchMatch match = locator.newFieldReferenceMatch(locator.createImportHandle(importRef), accuracy, importRef.sourceStart, importRef.sourceEnd-importRef.sourceStart+1, importRef);", "-\t\t\tlocator.report(match);", "-\t\t}", "+\t\tsuper.matchLevelAndReportImportRef(importRef, binding, locator);"]}], "num": 17646}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "92b30bf28f72e43448a5a4d17dab25f8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fc65f680a22655d44075f15a81a6712", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "83dc88df7a1508be17b764df4120ac8a34178f58", "commitAfterChange": "f428b70bc80bfdae47260a00a8636113b21b698c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      \tReferenceBinding resolve()", "signatureAfterChange": "      \tReferenceBinding resolve()", "diff": ["-\t\tBinaryTypeBinding.resolveType(this.genericType, this.environment, null, 0);", "+\t\tBinaryTypeBinding.resolveType(this.genericType, this.environment, null, 0); // do not assign to genericType field, since will return a raw type", "+\t\t\t\tthis.bound = BinaryTypeBinding.resolveType(this.bound, this.environment, null, 0);", "+\t        \tfor (int i = 0, length = this.otherBounds == null ? 0 : this.otherBounds.length; i < length; i++) {", "+\t\t\t\t\tthis.otherBounds[i]= BinaryTypeBinding.resolveType(this.bound, this.environment, null, 0);", "+\t        \t}", "+\t\t\t\tbreak;", "-\t\t\t\tBinaryTypeBinding.resolveType(this.bound, this.environment, null, 0);", "+\t\t\t\tthis.bound = BinaryTypeBinding.resolveType(this.bound, this.environment, null, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d36eb7e12bff332f0920d17b6d30c68d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "cee242bcb21b999953c5459d6b40de2d782355f3", "commitAfterChange": "de0ba5a5e09b42f4671d55cb69260aca34e3da86", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "diff": ["-\t\t\tthis.lineEnd = (this.linePtr == this.lastLinePtr) ? this.endComment : getLineEnd(this.linePtr);", "+\t\t\tthis.lineEnd = (this.linePtr == this.lastLinePtr) ? this.endComment : this.scanner.getLineEnd(this.linePtr);", "-\t\t\t\t\t\t\t\t\t\t\tcase '-':", "+\t\t\t\t\t\t\t\t\t\t\t// case '-': allowed in tag names as this character is often used in doclets (bug 68087)", "+\t\t\t\t\t\t\t\t\t\t// verify characters after return tag (we're expecting text description)", "+\t\t\t\t\t\t\t\t\t\tif(!verifyCharsAfterReturnTag(this.index)) {", "+\t\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null) {", "+\t\t\t\t\t\t\t\t\t\t\t\tint end = this.starPosition == -1 || this.lineEnd<this.starPosition ? this.lineEnd : this.starPosition;", "+\t\t\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocEmptyReturnTag(this.tagSourceStart, end);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t// do nothing for '*' character", "+\t\t\t\t\tcase '\\u000c' :\t/* FORM FEED               */", "+\t\t\t\t\tcase ' ' :\t\t\t/* SPACE                   */", "+\t\t\t\t\tcase '\\t' :\t\t\t/* HORIZONTAL TABULATION   */", "+\t\t\t\t\t\t// do nothing for space or '*' characters", "-\t\t\t\t\t\tif (!CharOperation.isWhitespace(nextCharacter)) {", "-\t\t\t\t\t\t\tif (!this.lineStarted) {", "-\t\t\t\t\t\t\t\tthis.textStart = previousPosition;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthis.lineStarted = true;", "+\t\t\t\t\t\tif (!this.lineStarted) {", "+\t\t\t\t\t\t\tthis.textStart = previousPosition;", "+\t\t\t\t\t\tthis.lineStarted = true;", "+\t\t\t\t\t\tbreak;"]}], "num": 37881}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d52f80a2517df9556c1028412b43e41", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d25ec7ee400c8503ad5c42f415ea27d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " protected int refineAccuracy(int accuracy, ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, MatchLocator locator)", "signatureAfterChange": " protected void updateMatch(ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, MatchLocator locator)", "diff": ["-protected int refineAccuracy(int accuracy, ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, MatchLocator locator) {", "-\t// We can only refine if locator has an unit scope.", "-\tif (locator.unitScope == null) return accuracy;", "-\treturn refineAccuracy(accuracy, parameterizedBinding, patternTypeArguments, false, 0, locator);", "-}", "+protected void updateMatch(ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, MatchLocator locator) {", "+\t// Only possible if locator has an unit scope.", "+\tif (locator.unitScope != null) {", "+\t\tupdateMatch(parameterizedBinding, patternTypeArguments, false, 0, locator);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d66f78148362b76417a797076d3f9957", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldLocator.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprotected int refineAccuracy(int accuracy, ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, MatchLocator locator)", "signatureAfterChange": " protected void updateMatch(ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, MatchLocator locator)", "diff": ["-\t */", "-\tprotected int refineAccuracy(int accuracy, ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, MatchLocator locator) {", "-\t\t// We can only refine if locator has an unit scope.", "-\t\tif (locator.unitScope == null) return accuracy;", "-\t\tint refinedAccuracy = refineAccuracy(accuracy, parameterizedBinding, patternTypeArguments, false, 0, locator);", "-\t\tif (refinedAccuracy > SearchMatch.A_INACCURATE)", "-\t\t\treturn -1; // canot accept neither erasure nor compatible match", "-\t\treturn refinedAccuracy;", "+ */", "+protected void updateMatch(ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, MatchLocator locator) {", "+\t// We can only refine if locator has an unit scope.", "+\tif (locator.unitScope == null) return;", "+\tupdateMatch(parameterizedBinding, patternTypeArguments, false, 0, locator);", "+\tif (!match.isExact()) {", "+\t\t// cannot accept neither erasure nor compatible match", "+\t\tmatch.setRule(0);", "+}"]}], "num": 52177}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "565ff22e01ef2c6f17c3929c06d051fe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0aa248104a19fc4065109fdd0e5da27e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "ec64763fa4e57b4943311ee555e5ddce81854cf2", "commitAfterChange": "b0ee678b65f48d1cfab35972dd53d6bd85389446", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "signatureAfterChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "diff": ["-\t\t\t\t\t\tif (innerCtx == null) { // no inference -> assume it wasn't really poly after all", "+\t\t\t\t\t\tif (innerCtx == null || innerCtx.stepCompleted >= InferenceContext18.TYPE_INFERRED) { ", "+\t\t\t\t\t\t\t/* No inference context -> the method was likely manufactured by Scope.findExactMethod -> assume it wasn't really poly after all.", "+\t\t\t\t\t\t\t   Otherwise, either the constraints and initial bounds that would effectively reduce to b3 are already transferred to current context ", "+\t\t\t\t\t\t\t   during C Set construction. Otherwise all that is relevant is to relate the return type with expected type.", "+\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\tif (innerCtx.stepCompleted >= InferenceContext18.TYPE_INFERRED) {", "-\t\t\t\t\t\t\t// The constraints and initial bounds that would effectively reduce to b3 are already transferred to current context during C Set construction.", "-\t\t\t\t\t\t\t// This should really be done only for poly invocations interleaved by a lambda that is not pertinent to applicability. FIXME.", "-\t\t\t\t\t\t\treturn TRUE;", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tinnerCtx.outerContext = inferenceContext;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25199770eec76be8a91deb27df8d832a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "b18d6adb25f48ecf7c7eab00f32abaea5a8b60ae", "commitAfterChange": "92554e04c2e222921db725ed0779cc4ef54e89f9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "signatureAfterChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "diff": ["-\t\t\t\t\t\tif (innerCtx == null || innerCtx.stepCompleted >= InferenceContext18.TYPE_INFERRED) { ", "+\t\t\t\t\t\tif (innerCtx == null) { ", "-\t\t\t\t\t\t\t   Otherwise, either the constraints and initial bounds that would effectively reduce to b3 are already transferred to current context ", "-\t\t\t\t\t\t\t   during C Set construction. Otherwise all that is relevant is to relate the return type with expected type.", "+\t\t\t\t\t\t\t   -> proceed as for non-poly expressions."]}], "num": 55114}
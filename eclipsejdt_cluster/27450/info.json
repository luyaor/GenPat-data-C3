{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3a737faa2aaa90b9ed3095416343048", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a403ad5e63f83ea70a55ee08f8fdf86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "2d445826d63f77051d33e940a44a5c31fae7d718", "commitAfterChange": "c14134e37304f95ef7b6c63def5cdd59053dadda", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\t\tboolean foundInImport = false;", "+\t\t\t\tint importLevel = -1; // -1 = not found, 0 = on demand match, 1 = single import match", "-\t\t\t\t\t\t} else if (resolvedImport instanceof ReferenceBinding && importBinding.onDemand) {", "+\t\t\t\t\t\t} else if (importBinding.onDemand && importLevel < 1 && resolvedImport instanceof ReferenceBinding) {", "-\t\t\t\t\t\t\t\t\t\t\tif (!importBinding.onDemand) // single method selector import", "-\t\t\t\t\t\t\t\t\t\t\t\treturn compatibleMethod;", "-\t\t\t\t\t\t\t\t\t\t\tif (foundInImport)", "-\t\t\t\t\t\t\t\t\t\t\t\t// Answer error binding -- import on demand conflict; name found in two import on demand types.", "-\t\t\t\t\t\t\t\t\t\t\t\treturn new ProblemMethodBinding(compatibleMethod, selector, compatibleMethod.parameters, Ambiguous);", "+\t\t\t\t\t\t\t\t\t\t\tint matchingImportLevel = importBinding.onDemand ? 0 : 1;", "+\t\t\t\t\t\t\t\t\t\t\tif (matchingImportLevel == importLevel) {", "+\t\t\t\t\t\t\t\t\t\t\t\tscope = this;", "+\t\t\t\t\t\t\t\t\t\t\t\twhile (true) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tswitch (scope.kind) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase CLASS_SCOPE :", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn new ProblemMethodBinding(selector, argumentTypes, ((ClassScope) scope).referenceContext.binding, Ambiguous);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase COMPILATION_UNIT_SCOPE :", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn new ProblemMethodBinding(compatibleMethod, selector, compatibleMethod.parameters, Ambiguous);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t\t\tscope = scope.parent;", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\tfoundInImport = true;", "+\t\t\t\t\t\t\t\t\t\t\timportLevel = matchingImportLevel;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b7093a45ab0dc4019341c36a9df0223", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "5a10f519c81ebdddb6bd4a37e304977f9bce5290", "commitAfterChange": "7b4e4fcfdd4d04f13dc930d8b751701d20daa4d2", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["+\t\t\t\tMethodBinding[] visible = null;", "-\t\t\t\t\t\t\t\t\t\t\tint matchingImportLevel = importBinding.onDemand ? 0 : 1;", "-\t\t\t\t\t\t\t\t\t\t\tif (matchingImportLevel == importLevel) {", "-\t\t\t\t\t\t\t\t\t\t\t\tscope = this;", "-\t\t\t\t\t\t\t\t\t\t\t\twhile (true) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tswitch (scope.kind) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase CLASS_SCOPE :", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn new ProblemMethodBinding(selector, argumentTypes, ((ClassScope) scope).referenceContext.binding, Ambiguous);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase COMPILATION_UNIT_SCOPE :", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn new ProblemMethodBinding(compatibleMethod, selector, compatibleMethod.parameters, Ambiguous);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\tscope = scope.parent;", "+\t\t\t\t\t\t\t\t\t\t\tif (foundMethod == null || !foundMethod.isValidBinding()) {", "+\t\t\t\t\t\t\t\t\t\t\t\tfoundMethod = compatibleMethod;", "+\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\tif (visible == null) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvisible = new MethodBinding[] {foundMethod, compatibleMethod};", "+\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tint visibleLength = visible.length;", "+\t\t\t\t\t\t\t\t\t\t\t\t\tMethodBinding[] temp = new MethodBinding[visibleLength + 1];", "+\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.arraycopy(visible, 0, temp, 0, visibleLength);", "+\t\t\t\t\t\t\t\t\t\t\t\t\ttemp[visibleLength] = compatibleMethod;", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvisible = temp;", "-\t\t\t\t\t\t\t\t\t\t\tfoundMethod = compatibleMethod;", "-\t\t\t\t\t\t\t\t\t\t\timportLevel = matchingImportLevel;", "+\t\t\t\t\t\t\t\t\t\t\timportLevel = importBinding.onDemand ? 0 : 1;", "+\t\t\t\tif (visible != null)", "+\t\t\t\t\tfoundMethod = mostSpecificMethodBinding(visible, visible.length, argumentTypes, invocationSite);"]}], "num": 27450}
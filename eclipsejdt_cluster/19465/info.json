{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07be43ee21976df7aaf71d0e60301f95", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "034bd157689d52c5c45b7c7923451bdd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "1d6fd3220a380be4db641e43b2002eb0a6f872ab", "commitAfterChange": "f5fccb9c727b0655636fe138af1c3a58b47300b1", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \r \r private void initializeBuilder() throws CoreException", "signatureAfterChange": " \r \r private void initializeBuilder() throws CoreException", "diff": ["-\t\r", "+\r", "-\tthis.resourceFilters = filterSequence != null && filterSequence.length() > 0\r", "+\tchar[][] filters = filterSequence != null && filterSequence.length() > 0\r", "+\tif (filters == null) {\r", "+\t\tthis.fileFilters = null;\r", "+\t\tthis.folderFilters = null;\r", "+\t} else {\r", "+\t\tint fileCount = 0, folderCount = 0;\r", "+\t\tfor (int i = 0, length = filters.length; i < length; i++) {\r", "+\t\t\tchar[] f = filters[i];\r", "+\t\t\tif (f[f.length - 1] == '/') folderCount++; else fileCount++;\r", "+\t\t}\r", "+\t\tthis.fileFilters = new char[fileCount][];\r", "+\t\tthis.folderFilters = new String[folderCount];\r", "+\t\tfor (int i = 0, length = filters.length; i < length; i++) {\r", "+\t\t\tchar[] f = filters[i];\r", "+\t\t\tif (f[f.length - 1] == '/')\r", "+\t\t\t\tfolderFilters[--folderCount] = new String(CharOperation.subarray(f, 0, f.length - 1));\r", "+\t\t\telse\r", "+\t\t\t\tfileFilters[--fileCount] = f;\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3eed95df8acd4f3e1ddba53659f360ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic final static boolean isExcluded(IPath resourcePath, char[][] exclusionPatterns)", "signatureAfterChange": " \tpublic final static boolean isExcluded(IPath resourcePath, char[][] inclusionPatterns, char[][] exclusionPatterns, boolean isFolderPath)", "diff": ["-\tpublic final static boolean isExcluded(IPath resourcePath, char[][] exclusionPatterns) {", "-\t\tif (exclusionPatterns == null) return false;", "+\tpublic final static boolean isExcluded(IPath resourcePath, char[][] inclusionPatterns, char[][] exclusionPatterns, boolean isFolderPath) {", "+\t\tif (inclusionPatterns == null && exclusionPatterns == null) return false;", "-\t\tfor (int i = 0, length = exclusionPatterns.length; i < length; i++)", "-\t\t\tif (CharOperation.pathMatch(exclusionPatterns[i], path, true, '/'))", "-\t\t\t\treturn true;", "+", "+\t\tinclusionCheck: if (inclusionPatterns != null) {", "+\t\t\tfor (int i = 0, length = inclusionPatterns.length; i < length; i++) {", "+\t\t\t\tchar[] pattern = inclusionPatterns[i];", "+\t\t\t\tchar[] folderPattern = pattern;", "+\t\t\t\tif (isFolderPath) {", "+\t\t\t\t\tint lastSlash = CharOperation.lastIndexOf('/', pattern);", "+\t\t\t\t\tif (lastSlash != -1) {", "+\t\t\t\t\t\tint star = CharOperation.indexOf('*', pattern, lastSlash);", "+\t\t\t\t\t\tif (star == -1 || star >= pattern.length-1 || pattern[star+1] != '*') {", "+\t\t\t\t\t\t\tfolderPattern = CharOperation.subarray(pattern, 0, lastSlash);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (CharOperation.pathMatch(folderPattern, path, true, '/')) {", "+\t\t\t\t\tbreak inclusionCheck;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn true; // never included", "+\t\t}", "+\t\tif (isFolderPath) {", "+\t\t\tpath = CharOperation.concat(path, new char[] {'*'}, '/');", "+\t\t}", "+\t\texclusionCheck: if (exclusionPatterns != null) {", "+\t\t\tfor (int i = 0, length = exclusionPatterns.length; i < length; i++) {", "+\t\t\t\tif (CharOperation.pathMatch(exclusionPatterns[i], path, true, '/')) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 19465}
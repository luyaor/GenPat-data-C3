{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4bc4150275ef6fa2078b7cc7a44f5a59", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ae4a048e9bffe96968359f13e2b0957", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "169996ac8cc8ac61982c0e7d00f722cad6796570", "commitAfterChange": "dc6ca6b3fb7984153c92a0fe7dc6707c05469a49", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprivate void runTest(DefaultCodeFormatter codeFormatter, String sourceIn, String packageName, String compilationUnitName, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator)", "signatureAfterChange": " \t \tprivate void runTest(String input, String output, DefaultCodeFormatter codeFormatter, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator)", "diff": ["-\tprivate void runTest(DefaultCodeFormatter codeFormatter, String sourceIn, String packageName, String compilationUnitName, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator) {", "-\t\ttry {", "-\t\t\tassertNotNull(sourceIn);", "-\t\t\tICompilationUnit outputUnit = getCompilationUnit(\"Formatter\" , \"\", packageName, getOut(compilationUnitName)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tassertNotNull(outputUnit);", "-\t\t\tString result;", "-\t\t\tif (length == -1) {", "-\t\t\t\tresult = runFormatter(codeFormatter, sourceIn, kind, indentationLevel, offset, sourceIn.length(), lineSeparator);", "-\t\t\t} else {", "-\t\t\t\tresult = runFormatter(codeFormatter, sourceIn, kind, indentationLevel, offset, length, lineSeparator);", "-\t\t\t}", "-\t\t\tassertLineEquals(result, sourceIn, outputUnit.getSource(), checkNull);", "-\t\t} catch (JavaModelException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tassertTrue(false);", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61945ab7672979595f58a584be44f634", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "c01d4e421a0fa2c650a398bcf3ff121ab0577af6", "commitAfterChange": "42d19dd3705bce900dfc36deb77d97fde99bf108", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tprivate void runTest(DefaultCodeFormatter codeFormatter, String packageName, String compilationUnitName, int kind, int indentationLevel, boolean checkNull, int offset, int length)", "signatureAfterChange": " \tprivate void runTest(DefaultCodeFormatter codeFormatter, String packageName, String compilationUnitName, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator)", "diff": ["-", "+\t}", "+\tprivate void runTest(DefaultCodeFormatter codeFormatter, String packageName, String compilationUnitName, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator) {", "-\t\t\t\tresult = runFormatter(codeFormatter, s, kind, indentationLevel, offset, s.length());", "+\t\t\t\tresult = runFormatter(codeFormatter, s, kind, indentationLevel, offset, s.length(), lineSeparator);", "-\t\t\t\tresult = runFormatter(codeFormatter, s, kind, indentationLevel, offset, length);", "+\t\t\t\tresult = runFormatter(codeFormatter, s, kind, indentationLevel, offset, length, lineSeparator);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7330774b23b7af2184d0e31a7e97d210", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsTests.java", "commitBeforeChange": "635645f64cc3986d85427716b6b1431b69a73db1", "commitAfterChange": "52bf936fc576c8beae0884d140c2c4a36e852ace", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "  void formatSource(String source, String formattedOutput, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator)", "signatureAfterChange": "  void formatSource(String source, String formattedOutput, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator, boolean repeat)", "diff": ["-void formatSource(String source, String formattedOutput, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator) {", "+void formatSource(String source, String formattedOutput, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator, boolean repeat) {", "-\t\tresult = runFormatter(codeFormatter, source, kind, indentationLevel, offset, source.length(), lineSeparator);", "+\t\tresult = runFormatter(codeFormatter, source, kind, indentationLevel, offset, source.length(), lineSeparator, repeat);", "-\t\tresult = runFormatter(codeFormatter, source, kind, indentationLevel, offset, length, lineSeparator);", "+\t\tresult = runFormatter(codeFormatter, source, kind, indentationLevel, offset, length, lineSeparator, repeat);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7834d10560405cd93fb0552979524f9f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "c01d4e421a0fa2c650a398bcf3ff121ab0577af6", "commitAfterChange": "42d19dd3705bce900dfc36deb77d97fde99bf108", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tprivate String runFormatter(DefaultCodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length)", "signatureAfterChange": " \t \tprivate String runFormatter(DefaultCodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length, String lineSeparator)", "diff": ["-\tprivate String runFormatter(DefaultCodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length) {", "+\tprivate String runFormatter(DefaultCodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length, String lineSeparator) {", "-\t\tTextEdit edit = codeFormatter.format(kind, source, offset, length, indentationLevel, null);//$NON-NLS-1$", "+\t\tTextEdit edit = codeFormatter.format(kind, source, offset, length, indentationLevel, lineSeparator);//$NON-NLS-1$", "-\t\t\tedit = codeFormatter.format(kind, result, 0, result.length(), indentationLevel, null);//$NON-NLS-1$", "+\t\t\tedit = codeFormatter.format(kind, result, 0, result.length(), indentationLevel, lineSeparator);//$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1989128663890b21a2e69be889ac2bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "635645f64cc3986d85427716b6b1431b69a73db1", "commitAfterChange": "52bf936fc576c8beae0884d140c2c4a36e852ace", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tprivate void runTest(CodeFormatter codeFormatter, String packageName, String compilationUnitName, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator)", "signatureAfterChange": "  \tprivate void runTest(CodeFormatter codeFormatter, String packageName, String compilationUnitName, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator)", "diff": ["-\t\t\tString s = sourceUnit.getSource();", "-\t\t\tassertNotNull(s);", "+\t\t\tString source = sourceUnit.getSource();", "+\t\t\tassertNotNull(source);", "-\t\t\t\tresult = runFormatter(codeFormatter, s, kind, indentationLevel, offset, s.length(), lineSeparator);", "+\t\t\t\tresult = runFormatter(codeFormatter, source, kind, indentationLevel, offset, source.length(), lineSeparator, true);", "-\t\t\t\tresult = runFormatter(codeFormatter, s, kind, indentationLevel, offset, length, lineSeparator);", "+\t\t\t\tresult = runFormatter(codeFormatter, source, kind, indentationLevel, offset, length, lineSeparator, true);", "-\t\t\tassertLineEquals(result, s, outputUnit.getSource(), checkNull);", "+\t\t\tassertLineEquals(result, source, outputUnit.getSource(), checkNull);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c57ba1e1c55113ced33541a06980ca2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "a4669bf7c1bea8a08bf4a9d017bbfc729f9d6fb3", "commitAfterChange": "8530f36dbde13058837d240762ab3a756916ff70", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate void runTest(String source, String expectedResult, DefaultCodeFormatter codeFormatter, int kind, int indentationLevel, boolean checkNull, int offset, int length)", "signatureAfterChange": " \t \t \tprivate void runTest(String input, String output, DefaultCodeFormatter codeFormatter, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator)", "diff": ["+\tprivate void runTest(String input, String output, DefaultCodeFormatter codeFormatter, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator) {", "+\t\tString result;", "+\t\tif (length == -1) {", "+\t\t\tresult = runFormatter(codeFormatter, input, kind, indentationLevel, offset, input.length(), lineSeparator);", "+\t\t} else {", "+\t\t\tresult = runFormatter(codeFormatter, input, kind, indentationLevel, offset, length, lineSeparator);", "+\t\t}", "+\t\tassertLineEquals(result, input, output, checkNull);", "+\t}", "-\tprivate void runTest(String source, String expectedResult, DefaultCodeFormatter codeFormatter, int kind, int indentationLevel, boolean checkNull, int offset, int length) {", "-\t\tString result;", "-\t\tif (length == -1) {", "-\t\t\tresult = runFormatter(codeFormatter, source, kind, indentationLevel, offset, source.length(), null);", "-\t\t} else {", "-\t\t\tresult = runFormatter(codeFormatter, source, kind, indentationLevel, offset, length, null);", "-\t\t}", "-\t\tassertLineEquals(result, source, expectedResult, checkNull);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccd3268af3726e01b1aa160c9924e48c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "87d4fd7980451e90652820b5860e6399b708ef2c", "commitAfterChange": "913656a5a76e9163d25332c6a9aeee51291ec413", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tvoid formatSource(String source, String formattedOutput, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator, boolean repeat)", "signatureAfterChange": " \t \tvoid formatSource(String source, String formattedOutput, int kind, int indentationLevel, int offset, int length, String lineSeparator, boolean repeat)", "diff": ["-\tvoid formatSource(String source, String formattedOutput, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator, boolean repeat) {", "+\tvoid formatSource(String source, String formattedOutput, int kind, int indentationLevel, int offset, int length, String lineSeparator, boolean repeat) {", "-\t\tassertLineEquals(result, source, formattedOutput);", "+\t\tif (lineSeparator == null) {", "+\t\t\tassertLineEquals(result, source, formattedOutput);", "+\t\t} else {", "+\t\t\t// Do not convert line delimiter while comparing result when a specific one is specified", "+\t\t\tassertNotNull(\"Error(s) occured while formatting\", result);", "+\t\t\tString outputSource = formattedOutput == null ? source : formattedOutput;", "+\t\t\tassertSourceEquals(\"Different number of length\", outputSource, result, false/*do not convert line delimiter*/);", "+\t\t}"]}], "num": 12940}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40de7eaab32ad1c5f9bd3896d27b4a43", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eb66a05ccbd35be790d69bf4a9254b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "e7fead4adac4e5d682bbdf8cb7aaa3f524aab927", "commitAfterChange": "3f60ba6c4328b89dbfaef12feb628451b43d7879", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void  checkParameterizedTypeBounds()", "signatureAfterChange": " \tpublic void  checkParameterizedTypeBounds()", "diff": ["-\t\tfor (int i = 0, l = this.deferredBoundChecks == null ? 0 : this.deferredBoundChecks.size(); i < l; i++)", "-\t\t\t((TypeReference) this.deferredBoundChecks.get(i)).checkBounds(this);", "+\t\tfor (int i = 0, l = this.deferredBoundChecks == null ? 0 : this.deferredBoundChecks.size(); i < l; i++) {", "+\t\t\tObject toCheck = this.deferredBoundChecks.get(i);", "+\t\t\tif (toCheck instanceof TypeReference)", "+\t\t\t\t((TypeReference) toCheck).checkBounds(this);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7246ca3950a3da1f485341332708d38f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "4e9ad7fb672de1276fe9f6535946a56c32344f69", "commitAfterChange": "fb5a19c39f23c560b52f4dcae45f678d9265aed4", "methodNumberBeforeChange": 215, "methodNumberAfterChange": 215, "signatureBeforeChange": " protected void markFieldsWithLocalType(TypeDeclaration type)", "signatureAfterChange": " protected void markInitializersWithLocalType(TypeDeclaration type)", "diff": ["-protected void markFieldsWithLocalType(TypeDeclaration type) {", "+protected void markInitializersWithLocalType(TypeDeclaration type) {", "-\t\ttype.fields[i].bits |= AstNode.HasLocalTypeMASK;", "+\t\tFieldDeclaration field = type.fields[i];", "+\t\tif (field instanceof Initializer) {", "+\t\t\tfield.bits |= AstNode.HasLocalTypeMASK;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e078c5b632852178624cde00f9c63dad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/PackageUtil.java", "commitBeforeChange": "fa2cb5bc47f7fe5d18ae109d09f3bf4ba668083f", "commitAfterChange": "3ba9d90cc0b0b979098ff6ad3236612052718a0b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic static Collection<ClassDeclaration> getClasses( \t\t\tfinal PackageDeclaration pkg, \t\t\tfinal ProcessorEnvImpl env)", "signatureAfterChange": " \t \tpublic static Collection<ClassDeclaration> getClasses( \t\t\tfinal PackageDeclaration pkg, \t\t\tfinal ProcessorEnvImpl env)", "diff": ["-\t\t\t\tif (type.isClass()) {", "-\t\t\t\t\tclasses.add((ClassDeclaration)env.getTypeDeclaration(type));", "+\t\t\t\t// isClass() will return true if TypeDeclaration is an InterfaceDeclaration", "+\t\t\t\tif (type.isClass() ) {", "+\t\t\t\t\tTypeDeclaration td = env.getTypeDeclaration( type );", "+\t\t\t\t\tif ( td instanceof ClassDeclaration ) {\t\t\t\t", "+\t\t\t\t\t\tclasses.add((ClassDeclaration)td);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1bf0783fd8bf3f9533b6649863126c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateInitializerOperation.java", "commitBeforeChange": "26fb5d57c5ee4c25f94ae8cf71583bb38b6a5d86", "commitAfterChange": "89ce3bddf98db0013e85e2ac6b8df0c1b6776581", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r protected IDOMNode generateElementDOM() throws JavaModelException", "signatureAfterChange": "\r protected IDOMNode generateElementDOM() throws JavaModelException", "diff": ["-\t\tdomInitializer = (IDOMInitializer) generateSyntaxIncorrectDOM();\r", "+\t\tIDOMNode node = generateSyntaxIncorrectDOM();\r", "+\t\tif (!(node instanceof IDOMInitializer)) {\r", "+\t\t\treturn null;\r", "+\t\t}\r", "+\t\tdomInitializer = (IDOMInitializer) node;\r"]}], "num": 71310}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4dc690b5f41ccebf800ccb47278138ba", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10b8c9c3b43b16d19b13dafc4a69886b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/junit/extension/TestCase.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public static List buildTestsList(Class evaluationTestClass)", "signatureAfterChange": "  public static List buildTestsList(Class evaluationTestClass, int inheritedDepth)", "diff": ["+", "+public static List buildTestsList(Class evaluationTestClass, int inheritedDepth) {", "+\tClass evaluationTestSuperclass = evaluationTestClass.getSuperclass();", "+\tfor (int i=0; i<inheritedDepth && !Flags.isAbstract(evaluationTestSuperclass.getModifiers()); i++) {", "+\t\tMethod[] superMethods = evaluationTestSuperclass.getDeclaredMethods();", "+\t\tMethod[] mergedMethods = new Method[methods.length+superMethods.length];", "+\t\tSystem.arraycopy(superMethods, 0, mergedMethods, 0, superMethods.length);", "+\t\tSystem.arraycopy(methods, 0, mergedMethods, superMethods.length, methods.length);", "+\t\tmethods = mergedMethods;", "+\t\tevaluationTestSuperclass = evaluationTestSuperclass.getSuperclass();", "+\t}", "-\t\t\t\t\ttests.add(constructor.newInstance(params));", "+\t\t\t\t\tif (testNames.add(methName))", "+\t\t\t\t\t\ttests.add(constructor.newInstance(params));", "-\t\t\t\t\t\t\t\ttestNames.add(methName);", "-\t\t\t\t\t\t\t\ttests.add(constructor.newInstance(params));", "+\t\t\t\t\t\t\t\tif (testNames.add(methName))", "+\t\t\t\t\t\t\t\t\ttests.add(constructor.newInstance(params));", "-\t\t\t\t\t\ttests.add(constructor.newInstance(params));", "+\t\t\t\t\t\tif (testNames.add(methName))", "+\t\t\t\t\t\t\ttests.add(constructor.newInstance(params));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccb5232b9132030e6c4f89c0fd6dbf22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTestsRequestor2.java", "commitBeforeChange": "542ce5451500fe1306b92aaa9a7c04d8d83f7f3f", "commitAfterChange": "9cbf7e62288f060b33b2dc1c1d579dae84747012", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tprotected StringBuffer printProposal(CompletionProposal proposal)", "signatureAfterChange": " \t \tprotected StringBuffer printProposal(CompletionProposal proposal, int tab, StringBuffer buffer)", "diff": ["-\t\tStringBuffer buffer = new StringBuffer(getElementName(proposal));", "+\t", "+\tprotected StringBuffer printProposal(CompletionProposal proposal, int tab, StringBuffer buffer) {", "+\t\tfor (int i = 0; i < tab; i++) {", "+\t\t\tbuffer.append(\"   \"); //$NON-NLS-1$", "+\t\t}", "+\t\tbuffer.append(getElementName(proposal));", "+\t\tif(this.showMissingTypes) {", "+\t\t\tCompletionProposal[] requiredProposals = proposal.getRequiredProposals();", "+\t\t\tif (requiredProposals != null) {", "+\t\t\t\tint length = requiredProposals.length;", "+\t\t\t\tSystem.arraycopy(requiredProposals, 0, requiredProposals = new CompletionProposal[length], 0, length);", "+\t\t\t\tquickSort(requiredProposals, 0, length - 1);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tbuffer.append('\\n');", "+\t\t\t\t\tprintProposal(requiredProposals[i], tab + 1, buffer);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 48968}
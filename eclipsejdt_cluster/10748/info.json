{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "abe9022f12edd4be5846e6199797bd28", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "012ab8565381d0e867198ef916713956", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "a06218214703d95f526c8a8e7a9ba95c40cf7247", "commitAfterChange": "181d08f984fbd0b3599b94e8d63f55f9bcad62b6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tIBinding resolveName(Name name)", "signatureAfterChange": " \tIBinding resolveName(Name name)", "diff": ["-\t\t\tif (qualifiedTypeReference.binding == null || !qualifiedTypeReference.binding.isValidBinding()) {", "+\t\t\tif (qualifiedTypeReference.binding == null) {", "-\t\t\t\t\tif (binding != null && binding.isValidBinding()) {", "-\t\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.PackageBinding) {", "-\t\t\t\t\t\t\treturn this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding)binding);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// it is a type", "-\t\t\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding)binding);", "-\t\t\t\t\t\t}", "+\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.PackageBinding) {", "+\t\t\t\t\t\treturn this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding)binding);", "+\t\t\t\t\t} else if (binding instanceof org.eclipse.jdt.internal.compiler.lookup.TypeBinding) {", "+\t\t\t\t\t\t// it is a type", "+\t\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding)binding);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturn null;", "-\t\t\t\tif (binding != null && binding.isValidBinding()) {", "+\t\t\t\tif (binding != null) {", "-\t\t\t\t\t} else {", "+\t\t\t\t\t} else if (binding instanceof org.eclipse.jdt.internal.compiler.lookup.TypeBinding) {", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cb416c25f6732c80c91b5fba74fcb0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public ReferenceBinding[] superInterfaces()", "signatureAfterChange": "     public ReferenceBinding[] superInterfaces()", "diff": ["-\t\t\tTypeBinding superType = null;", "-\t\t\t\tsuperType = this.bound;", "+\t\t\t\tif (this.bound.isInterface()) {", "+\t\t\t\t\treturn new ReferenceBinding[]{ (ReferenceBinding)this.bound };", "+\t\t\t\t} else {", "+\t\t\t\t\treturn NoSuperInterfaces;", "+\t\t\t\t}", "-\t\t\t\tsuperType = this.typeVariable.firstBound; // TODO (philippe) shouldn't it retrieve variable superinterfaces ?", "+\t\t\t\treturn this.typeVariable.superInterfaces();", "-\t\t\tthis.superInterfaces = superType != null && superType.isInterface()", "-\t\t\t\t? new ReferenceBinding[] { (ReferenceBinding) superType }", "-\t\t\t\t: NoSuperInterfaces;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10e68e1fc41239734f95d30af39f27e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "7ecaef5de16e38a10853a04df519c7ec4f9241fc", "commitAfterChange": "69abb8d1d00eb0a16e17263935c45f1044354687", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "diff": ["-\t\t} else if (genericTypeArguments != null) {", "+\t\t} else if (genericTypeArguments != null && compilerOptions().complianceLevel < ClassFileConstants.JDK1_7) {", "-\t\t\t\tif (!((ParameterizedGenericMethodBinding) method).wasInferred) {", "+\t\t\t\tif (!((ParameterizedGenericMethodBinding) method).wasInferred)", "-\t\t\t\t\tif (compilerOptions().complianceLevel < ClassFileConstants.JDK1_7) {", "-\t\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.TypeArgumentsForRawGenericMethod);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif (compilerOptions().complianceLevel < ClassFileConstants.JDK1_7) {", "-\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.TypeParameterArityMismatch);", "-\t\t\t\t}", "+\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.TypeArgumentsForRawGenericMethod);", "+\t\t\t} else if (!method.isOverriding() || !isOverriddenMethodGeneric(method)) {", "+\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.TypeParameterArityMismatch);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74da0f9920d1cfd40a9edacc960f4961", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "55099d2c60113e1ad2e8ab8558e8720dd555fab8", "commitAfterChange": "fafb2dc68e9656aa163ddd55309d4bcb6df6ee09", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (use18specifics && valueIfTrueType != null && valueIfFalseType != null) {", "-\t\t\tif (valueIfTrueType.isAnnotatedTypeWithoutArguments() != valueIfFalseType.isAnnotatedTypeWithoutArguments()) {", "-\t\t\t\tif (valueIfTrueType.isAnnotatedTypeWithoutArguments()) // FIXME(stephan) mixed scenarios: null tag bits & type arguments", "-\t\t\t\t\tvalueIfTrueType = valueIfTrueType.original();", "-\t\t\t\telse", "-\t\t\t\t\tvalueIfFalseType = valueIfFalseType.original();", "-\t\t\t}", "+\t\tif (use18specifics && valueIfTrueType != null && valueIfFalseType != null && valueIfTrueType != valueIfFalseType) {", "+\t\t\tvalueIfTrueType = valueIfTrueType.unannotated();", "+\t\t\tvalueIfFalseType = valueIfFalseType.unannotated();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b40259d60dfbd4a942ec16eb86dd5405", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldReferencePattern.java", "commitBeforeChange": "8635a189d924741fc24bc4be873c4d30df46a524", "commitAfterChange": "903406128c19b4f927e6592cfb93facd59066f36", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r private int matchLevel(NameReference nameRef, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(NameReference nameRef, boolean resolve)", "diff": ["-\t\tboolean nameMatch = true;\r", "-\t\tif (this.name != null) {\r", "-\t\t\tif (nameRef instanceof SingleNameReference) {\r", "-\t\t\t\tnameMatch = this.matchesName(this.name, ((SingleNameReference)nameRef).token);\r", "-\t\t\t} else { // QualifiedNameReference\r", "-\t\t\t\tnameMatch = false;\r", "-\t\t\t\tQualifiedNameReference qNameRef = (QualifiedNameReference)nameRef;\r", "-\t\t\t\tchar[][] tokens = qNameRef.tokens;\r", "-\t\t\t\tfor (int i = qNameRef.indexOfFirstFieldBinding-1, max = tokens.length; i < max && !nameMatch; i++){\r", "-\t\t\t\t\tif (i >= 0) nameMatch = this.matchesName(this.name, tokens[i]);\r", "-\t\t\t\t}\r", "-\t\t\t}\t\t\t\t\r", "-\t\t} \r", "-\t\tif (nameMatch) {\r", "+\t\tif (this.name == null) {\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "+\t\t\tif (nameRef instanceof SingleNameReference) {\r", "+\t\t\t\tif (this.matchesName(this.name, ((SingleNameReference)nameRef).token)) {\r", "+\t\t\t\t\t// can only be a possible match since resolution is needed \r", "+\t\t\t\t\t// to find out if it is a field ref\r", "+\t\t\t\t\treturn POSSIBLE_MATCH;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t\t}\r", "+\t\t\t} else { // QualifiedNameReference\r", "+\t\t\t\tQualifiedNameReference qNameRef = (QualifiedNameReference)nameRef;\r", "+\t\t\t\tchar[][] tokens = qNameRef.tokens;\r", "+\t\t\t\tboolean matchOnFirstToken = false;\r", "+\t\t\t\tfor (int i = 0, max = tokens.length; i < max; i++){\r", "+\t\t\t\t\tif (this.matchesName(this.name, tokens[i])) {\r", "+\t\t\t\t\t\t// can only be a possible match since resolution is needed \r", "+\t\t\t\t\t\t// to find out if it is a field ref\r", "+\t\t\t\t\t\treturn POSSIBLE_MATCH;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t}\t\t\t\t\r", "+\t\t} \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef4d43725d9b1e614ef342dad2f53f7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "4e2e64c4f88c99c3e5a108d48b8090039fe7bc09", "commitAfterChange": "3cc60ef5ffdcff6661df47897d960b6759c64207", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tIBinding resolveImport(ImportDeclaration importDeclaration)", "signatureAfterChange": " \tIBinding resolveImport(ImportDeclaration importDeclaration)", "diff": ["-\t\t\t\tif ((binding != null) && (binding.isValidBinding())) {", "+\t\t\t\tif (binding != null) {", "-\t\t\t\tif (binding != null && binding.isValidBinding()) {", "+\t\t\t\tif (binding != null && binding instanceof org.eclipse.jdt.internal.compiler.lookup.TypeBinding) {", "-\t\t\t\t\tif (typeBinding == null) {", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t}", "-\t\t\t\t\treturn typeBinding;", "+\t\t\t\t\treturn typeBinding == null ? null : typeBinding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe702d9e1f81101e60136f97ad23a949", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void checkComment()", "signatureAfterChange": " public void checkComment()", "diff": ["-\t\tint length = paramReferences == null ? 0 : paramReferences.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tthis.patternLocator.match(paramReferences[i], this.nodeSet);", "+\t\tif (paramReferences != null) {", "+\t\t\tfor (int i=0, length=paramReferences.length; i < length; i++) {", "+\t\t\t\tthis.patternLocator.match(paramReferences[i], this.nodeSet);", "+\t\t\t}", "-\t\tlength = paramTypeParameters == null ? 0 : paramTypeParameters.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tthis.patternLocator.match(paramTypeParameters[i], this.nodeSet);", "+\t\tif (paramTypeParameters != null) {", "+\t\t\tfor (int i=0, length=paramTypeParameters.length; i < length; i++) {", "+\t\t\t\tthis.patternLocator.match(paramTypeParameters[i], this.nodeSet);", "+\t\t\t}", "-\t\tlength = thrownExceptions == null ? 0 : thrownExceptions.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tthis.patternLocator.match(thrownExceptions[i], this.nodeSet);", "+\t\tif (thrownExceptions != null) {", "+\t\t\tfor (int i=0, length=thrownExceptions.length; i < length; i++) {", "+\t\t\t\tthis.patternLocator.match(thrownExceptions[i], this.nodeSet);", "+\t\t\t}", "-\t\tlength = references == null ? 0 : references.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tExpression reference = references[i];", "-\t\t\tif (reference instanceof TypeReference) {", "-\t\t\t\tTypeReference typeRef = (TypeReference) reference;", "-\t\t\t\tthis.patternLocator.match(typeRef, this.nodeSet);", "-\t\t\t} else if (reference instanceof JavadocFieldReference) {", "-\t\t\t\tJavadocFieldReference fieldRef = (JavadocFieldReference) reference;", "-\t\t\t\tthis.patternLocator.match(fieldRef, this.nodeSet);", "-\t\t\t\tif (fieldRef.receiver instanceof TypeReference && !fieldRef.receiver.isThis()) {", "-\t\t\t\t\tTypeReference typeRef = (TypeReference) fieldRef.receiver;", "+\t\tif (references != null) {", "+\t\t\tfor (int i=0, length=references.length; i < length; i++) {", "+\t\t\t\tExpression reference = references[i];", "+\t\t\t\tif (reference instanceof TypeReference) {", "+\t\t\t\t\tTypeReference typeRef = (TypeReference) reference;", "-\t\t\t\t}", "-\t\t\t} else if (reference instanceof JavadocMessageSend) {", "-\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) reference;", "-\t\t\t\tthis.patternLocator.match(messageSend, this.nodeSet);", "-\t\t\t\tif (messageSend.receiver instanceof TypeReference && !messageSend.receiver.isThis()) {", "-\t\t\t\t\tTypeReference typeRef = (TypeReference) messageSend.receiver;", "-\t\t\t\t\tthis.patternLocator.match(typeRef, this.nodeSet);", "-\t\t\t\t}", "-\t\t\t\tif (messageSend.arguments != null) {", "-\t\t\t\t\tfor (int a=0,al=messageSend.arguments.length; a<al; a++) {", "-\t\t\t\t\t\tJavadocArgumentExpression argument = (JavadocArgumentExpression) messageSend.arguments[a];", "-\t\t\t\t\t\tif (argument.argument != null && argument.argument.type != null) {", "-\t\t\t\t\t\t\tthis.patternLocator.match(argument.argument.type, this.nodeSet);", "+\t\t\t\t} else if (reference instanceof JavadocFieldReference) {", "+\t\t\t\t\tJavadocFieldReference fieldRef = (JavadocFieldReference) reference;", "+\t\t\t\t\tthis.patternLocator.match(fieldRef, this.nodeSet);", "+\t\t\t\t\tif (fieldRef.receiver instanceof TypeReference && !fieldRef.receiver.isThis()) {", "+\t\t\t\t\t\tTypeReference typeRef = (TypeReference) fieldRef.receiver;", "+\t\t\t\t\t\tthis.patternLocator.match(typeRef, this.nodeSet);", "+\t\t\t\t\t}", "+\t\t\t\t} else if (reference instanceof JavadocMessageSend) {", "+\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) reference;", "+\t\t\t\t\tthis.patternLocator.match(messageSend, this.nodeSet);", "+\t\t\t\t\tif (messageSend.receiver instanceof TypeReference && !messageSend.receiver.isThis()) {", "+\t\t\t\t\t\tTypeReference typeRef = (TypeReference) messageSend.receiver;", "+\t\t\t\t\t\tthis.patternLocator.match(typeRef, this.nodeSet);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (messageSend.arguments != null) {", "+\t\t\t\t\t\tfor (int a=0,al=messageSend.arguments.length; a<al; a++) {", "+\t\t\t\t\t\t\tJavadocArgumentExpression argument = (JavadocArgumentExpression) messageSend.arguments[a];", "+\t\t\t\t\t\t\tif (argument.argument != null && argument.argument.type != null) {", "+\t\t\t\t\t\t\t\tthis.patternLocator.match(argument.argument.type, this.nodeSet);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else if (reference instanceof JavadocAllocationExpression) {", "-\t\t\t\tJavadocAllocationExpression constructor = (JavadocAllocationExpression) reference;", "-\t\t\t\tthis.patternLocator.match(constructor, this.nodeSet);", "-\t\t\t\tif (constructor.type != null && !constructor.type.isThis()) {", "-\t\t\t\t\tthis.patternLocator.match(constructor.type, this.nodeSet);", "-\t\t\t\t}", "-\t\t\t\tif (constructor.arguments != null) {", "-\t\t\t\t\tfor (int a=0,al=constructor.arguments.length; a<al; a++) {", "-\t\t\t\t\t\tthis.patternLocator.match(constructor.arguments[a], this.nodeSet);", "-\t\t\t\t\t\tJavadocArgumentExpression argument = (JavadocArgumentExpression) constructor.arguments[a];", "-\t\t\t\t\t\tif (argument.argument != null && argument.argument.type != null) {", "-\t\t\t\t\t\t\tthis.patternLocator.match(argument.argument.type, this.nodeSet);", "+\t\t\t\t} else if (reference instanceof JavadocAllocationExpression) {", "+\t\t\t\t\tJavadocAllocationExpression constructor = (JavadocAllocationExpression) reference;", "+\t\t\t\t\tthis.patternLocator.match(constructor, this.nodeSet);", "+\t\t\t\t\tif (constructor.type != null && !constructor.type.isThis()) {", "+\t\t\t\t\t\tthis.patternLocator.match(constructor.type, this.nodeSet);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (constructor.arguments != null) {", "+\t\t\t\t\t\tfor (int a=0,al=constructor.arguments.length; a<al; a++) {", "+\t\t\t\t\t\t\tthis.patternLocator.match(constructor.arguments[a], this.nodeSet);", "+\t\t\t\t\t\t\tJavadocArgumentExpression argument = (JavadocArgumentExpression) constructor.arguments[a];", "+\t\t\t\t\t\t\tif (argument.argument != null && argument.argument.type != null) {", "+\t\t\t\t\t\t\t\tthis.patternLocator.match(argument.argument.type, this.nodeSet);", "+\t\t\t\t\t\t\t}"]}], "num": 10748}
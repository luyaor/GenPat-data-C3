{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f06027f5d8a48399bc9be72c5fb7a1fe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17934cebd7377f964bdfa6755b03df6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/ExternalAnnotationUtil.java", "commitBeforeChange": "34f724a9738d7636a75842e2910c694725115548", "commitAfterChange": "9b49fc6edec0d13e82a14df97219e6ae294f74cc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tstatic void annotateMember(String typeName, IFile file, String selector, String originalSignature, String annotatedSignature, \t\t\t\t\t\t\t\t\t\tint updatePosition, MergeStrategy mergeStrategy, IProgressMonitor monitor) \t\t\tthrows CoreException, IOException, IllegalArgumentException", "signatureAfterChange": "  \tprivate static void annotateMember(String typeName, IFile file, String selector, String originalSignature, String annotatedSignature, \t\t\t\t\t\t\t\t\t\tint updatePosition, MergeStrategy mergeStrategy, IProgressMonitor monitor) \t\t\tthrows CoreException, IOException, IllegalArgumentException", "diff": ["-\tstatic void annotateMember(String typeName, IFile file, String selector, String originalSignature, String annotatedSignature,", "+\tprivate static void annotateMember(String typeName, IFile file, String selector, String originalSignature, String annotatedSignature,", "-\t\t\t// assemble full annotatedSignature:", "-\t\t\tswitch (updatePosition) {", "-\t\t\t\tcase POSITION_FULL_SIGNATURE:", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase POSITION_RETURN_TYPE:", "-\t\t\t\t\tannotatedSignature = updateMethodReturnType(annotatedSignature, originalSignature, mergeStrategy);", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault:", "-\t\t\t\t\tannotatedSignature = updateParameterType(annotatedSignature, updatePosition, originalSignature, mergeStrategy);", "-\t\t\t}", "+\t\t\t// assemble full annotatedSignature (don't bother merging since no previous signature exists):", "+\t\t\tannotatedSignature = updateSignature(originalSignature, annotatedSignature, updatePosition, MergeStrategy.REPLACE_SIGNATURE);", "-\t\t\t\t\t\t\t\t\t\tif (updatePosition == POSITION_FULL_SIGNATURE) {", "-\t\t\t\t\t\t\t\t\t\t\tannotatedSignature = addAnnotationsTo(annotatedSignature, annotationLine.trim(), mergeStrategy);", "-\t\t\t\t\t\t\t\t\t\t} else if (updatePosition == POSITION_RETURN_TYPE) {", "-\t\t\t\t\t\t\t\t\t\t\tannotatedSignature = updateMethodReturnType(annotatedSignature, annotationLine.trim(), mergeStrategy);", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tannotatedSignature = updateParameterType(annotatedSignature, updatePosition, annotationLine.trim(), mergeStrategy);", "-\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tannotatedSignature = updateSignature(annotationLine.trim(), annotatedSignature, updatePosition, mergeStrategy);", "-\t\t\t\tif (updatePosition == POSITION_FULL_SIGNATURE) {", "-\t\t\t\t\t// annotatedSignature is already complete", "-\t\t\t\t} else if (updatePosition == POSITION_RETURN_TYPE) {", "-\t\t\t\t\tannotatedSignature = updateMethodReturnType(annotatedSignature, originalSignature, mergeStrategy);", "-\t\t\t\t} else {", "-\t\t\t\t\tannotatedSignature = updateParameterType(annotatedSignature, updatePosition, originalSignature, mergeStrategy);", "-\t\t\t\t}", "+\t\t\t\tannotatedSignature = updateSignature(originalSignature, annotatedSignature, updatePosition, mergeStrategy);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfa27854261cfac34ece41c4ababe8ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "26e0b0c271d5031424823a1070ef180ba24218bf", "commitAfterChange": "c84496f37e5dff715764911530c1fceaa60b14ee", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void generateOptimizedLogicalXor( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedLogicalXor( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "diff": ["-\t\t\t\t\t\tfalseLabel,", "+\t\t\t\t\t\tfalseLabel, // negating", "-\t\t\t\t\tif ((bits & OnlyValueRequired) != 0) {", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t\t}", "+\t\t\t\t\tright.generateOptimizedBoolean(", "+\t\t\t\t\t\tcurrentScope,", "+\t\t\t\t\t\tcodeStream,", "+\t\t\t\t\t\ttrueLabel,", "+\t\t\t\t\t\tfalseLabel,", "+\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t\t\tfalseLabel,", "+\t\t\t\t\t\tfalseLabel, // negating", "-\t\t\t\t\tif ((bits & OnlyValueRequired) != 0) {", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t\t}", "+\t\t\t\t\tleft.generateOptimizedBoolean(", "+\t\t\t\t\t\tcurrentScope,", "+\t\t\t\t\t\tcodeStream,", "+\t\t\t\t\t\ttrueLabel,", "+\t\t\t\t\t\tfalseLabel,", "+\t\t\t\t\t\tvalueRequired);", "-\t\t\tif ((bits & OnlyValueRequired) == 0) {", "-\t\t\t\tif (falseLabel == null) {", "-\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\t// implicit falling through the FALSE case", "-\t\t\t\t\t\tcodeStream.ifne(trueLabel);", "-\t\t\t\t\t}", "+\t\t\tif (falseLabel == null) {", "+\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t// implicit falling through the FALSE case", "+\t\t\t\t\tcodeStream.ifne(trueLabel);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t// implicit falling through the TRUE case", "+\t\t\t\tif (trueLabel == null) {", "+\t\t\t\t\tcodeStream.ifeq(falseLabel);", "-\t\t\t\t\t// implicit falling through the TRUE case", "-\t\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\t\tcodeStream.ifeq(falseLabel);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t\t}", "+\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur"]}], "num": 4375}
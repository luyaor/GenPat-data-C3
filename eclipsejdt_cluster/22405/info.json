{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "924d5b6da9d6aa9fa843cf19c8131efa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1777c8a6ad886098f24ee5b14c67a2e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IntersectionCastTypeReference.java", "commitBeforeChange": "9bafd098a4f01cb487df1e23626d9ca01b29c273", "commitAfterChange": "79363a0cf2877d51c36b4085a9d2b719b103bf6c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void traverse(ASTVisitor visitor, ClassScope scope)", "signatureAfterChange": " \tpublic void traverse(ASTVisitor visitor, ClassScope scope)", "diff": ["-\t\tif (visitor.visit(this, scope)) {", "-\t\t\tint length = this.typeReferences == null ? 0 : this.typeReferences.length;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tthis.typeReferences[i].traverse(visitor, scope);", "-\t\t\t}", "-\t\t}", "-\t\tvisitor.endVisit(this, scope);", "+\t\tthrow new UnsupportedOperationException(\"Unexpected traversal request: IntersectionTypeReference in class scope\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fb0df77efb157be00dc54771c645859", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/AbstractASTTests.java", "commitBeforeChange": "d7c990d50da3096d1d0c829cba02221aeda7589f", "commitAfterChange": "924bb53fdc2b8abef6daacf4b8eb0fd3e9ce7fd5", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tprotected IBinding[] resolveBindings(String contents, ICompilationUnit cu) throws JavaModelException", "signatureAfterChange": " \tprotected IBinding[] resolveBindings(String contents, ICompilationUnit cu) throws JavaModelException", "diff": ["-\t\tASTNode[] nodes = buildASTs(contents, cu, false /* do not report errors */);", "+\t\treturn resolveBindings(contents, cu, true/*report errors*/);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47f4501afc81f1cd407212566044624a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests2.java", "commitBeforeChange": "a790cc2a1fe344908ce312351c9762d437d04475", "commitAfterChange": "96135df97393d0f8f1ee1a690487357a43849eda", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t\tpublic CompletionContainerInitializer(String projectName, String[] libPaths, boolean[] areExported)", "signatureAfterChange": " \t\t \t\tpublic CompletionContainerInitializer(String projectName, String[] libPaths, boolean[] areExported)", "diff": ["-\t\t */", "+\t\t\tthis(projectName, libPaths, areExported, null);", "+\t\t}", "-\t\t\t\tnewContainer(charLibPaths, areExported)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7414627099bd4a8787e35ddcec815e8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "8067f09e8071a20569a3fd9dc66db19a958bfb97", "commitAfterChange": "f6a0948c2da27a90da464bd930eca2dc3c5c851b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public String[] getParameterNames() throws JavaModelException", "signatureAfterChange": " public String[] getParameterNames() throws JavaModelException", "diff": ["-\t\t\t\t// ignore", "+\t\t\t\tjavadocContents = null;", "-\t\t} else {", "-\t\t\t// let's see if we can retrieve them from the debug infos", "-\t\t\tchar[][] argumentNames = info.getArgumentNames();", "-\t\t\tif (argumentNames != null && argumentNames.length == paramCount) {", "-\t\t\t\tString[] names = new String[paramCount];", "-\t\t\t\tfor (int i = 0; i < paramCount; i++) {", "-\t\t\t\t\tnames[i] = new String(argumentNames[i]);", "-\t\t\t\t}", "-\t\t\t\treturn this.parameterNames = names;", "-\t\t\t}", "-\t\t\treturn getRawParameterNames(paramCount);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c7cd0ccec2db223cbc349fa972ba75f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "12bbec9151d1b613c62f44289e9e604128f21de0", "commitAfterChange": "cfad6931331ca38f2461ad24853dd9b6dfa652de", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic static char[][] getAccessRestrictionPatterns(IPath[] patternSequence)", "signatureAfterChange": " \tpublic boolean combineAccessRestrictions()", "diff": ["+\t// TODO (jerome) remove before 3.1 M6", "+\t\treturn combineAccessRules();", "+\t}", "-\t", "-\tpublic static char[][] getAccessRestrictionPatterns(IPath[] patternSequence) {", "-\t\tif (patternSequence == null) return null;", "-\t\tint length = patternSequence.length;", "-\t\tif (length == 0) return null;", "-\t\tchar[][] patternChars = new char[length][];", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tpatternChars[i] = patternSequence[i].toString().toCharArray();", "-\t\t}", "-\t\treturn patternChars;", "-\t}\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b931f5108a864c37a9059417d0fe8e22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingComparator.java", "commitBeforeChange": "17b1cbd42bc737b47c9ebf5ceda98737740d0825", "commitAfterChange": "c184ff0d8868e4e4a23c45be667e27d2482aa33f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] bindings, org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] otherBindings)", "signatureAfterChange": " \tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] bindings, org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] otherBindings)", "diff": ["+\t\treturn isEqual(bindings, otherBindings, true);", "+\t}", "-\t\t\t\tif (!isEqual(bindings[i], otherBindings[i])) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8e33ae1ed8430c8157d8788e98aff9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "424b9c711eb8f066b325841662effb171f3ae4ef", "commitAfterChange": "4d19416746402b8fbbfd02c13772658da70a345a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r \tpublic IPackageFragmentRoot[] getAllPackageFragmentRoots()\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic IPackageFragmentRoot[] getAllPackageFragmentRoots()\r \t\tthrows JavaModelException", "diff": ["-\t\tIJavaElement[] tempChildren = getElementInfo().getChildren();\r", "-\t\tIPackageFragmentRoot[] children = new IPackageFragmentRoot[tempChildren.length];\r", "-\t\tfor (int i = 0; i < tempChildren.length; i++) {\r", "-\t\t\tchildren[i] = (IPackageFragmentRoot) tempChildren[i];\r", "-\t\t}\r", "-\t\treturn children;\r", "-\t}\r", "+\t\treturn computePackageFragmentRoots(true);\r"]}], "num": 22405}
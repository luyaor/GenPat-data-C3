{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8bffa3a38a893fe15ec9add9f7c02531", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0956462f6f4b01fed197de15a9351cd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "b19e9753b2440fbc565e94b25c4419c1ce3ce1f2", "commitAfterChange": "fb2dd37cec63b32be19be47d4358718ed4d76649", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " public void test065()", "signatureAfterChange": " public void test065()", "diff": ["-\t\t\t\t\"Variable x is required to be final or effectively final\\n\" + ", "+\t\t\t\t\"Local variable x defined in an enclosing scope must be final or effectively final\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "112a82ad3441678eb2c0e96b363958cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "0363c5b13c6d7bf3598bba760643aa0fb259248e", "commitAfterChange": "b1d084f45599e11d80665b306c9b3f617ba97f32", "methodNumberBeforeChange": 375, "methodNumberAfterChange": 375, "signatureBeforeChange": " \tpublic void test0366()", "signatureAfterChange": " \tpublic void test0366()", "diff": ["-\t\t\t\"Type mismatch: cannot convert from MX<capture#8-of ? super String> to MX<? super Object>\\n\" +", "+\t\t\t\"Type mismatch: cannot convert from MX<capture#7-of ? super String> to MX<? super Object>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11a425d94d08c2ab1da903b60e35dd3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": " public void testBug400905_0018() throws CoreException", "signatureAfterChange": " public void testBug400905_0018() throws CoreException", "diff": ["-\t\t\t\t\"src/Y.java java/lang/String Function<String,String> Collectors.castingIdentity():<lambda>#1.lambda$1(java/lang/String) [i ->] EXACT_MATCH\");", "+\t\t\t\t\"src/Y.java java/lang/String Function<String,String> Collectors.castingIdentity():Lambda(Function).apply(java/lang/String) [i ->] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21c8c80faa79d23bf45fe8efaf106408", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JSR308SpecSnippetTests.java", "commitBeforeChange": "f7c2ed5ecce3841921f761b0b104d350042f786e", "commitAfterChange": "132971f23d5ad724e7abdb8444fe685456f8fc05", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void test014() throws Exception", "signatureAfterChange": " \tpublic void test014() throws Exception", "diff": ["-\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method\\n\" + ", "+\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method foo()\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24888e0d557de21b73870f68252a9fb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "041f5c7c1b5d406b904fd03b60472d45690a364f", "commitAfterChange": "0574a8adbdf81e334e9d9100de29641afab2bba5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void test002()", "signatureAfterChange": " public void test002()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\"\tfor (int value : new int[] {value}) {\\n\" +", "-\t\t\"\t                            ^^^^^\\n\" +", "-\t\t\"The local variable value may not have been initialized\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tfor (int value : new int[] {value}) {\\n\" + ", "+\t\t\"\t                            ^^^^^\\n\" + ", "+\t\t\"value cannot be resolved to a variable\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25f5d5d130363f24ecbfec801fd117cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "fb0020e27808c429f3f311a11ef0ea9ea04441aa", "commitAfterChange": "29bba5ec8d05a9cd1832ad934d2530b41087b676", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": " \tpublic void testWildcardCapture()", "signatureAfterChange": " \tpublic void testWildcardCapture()", "diff": ["-\t\t\t\"Null type safety (type annotations): The expression of type \\'List<capture#>\\' needs unchecked conversion to conform to \\'List<@NonNull capture#>\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'List<capture#of ? extends X>\\' needs unchecked conversion to conform to \\'List<@NonNull capture#of ? extends X>\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "299452265091b0258939c29d6c595219", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "b19e9753b2440fbc565e94b25c4419c1ce3ce1f2", "commitAfterChange": "fb2dd37cec63b32be19be47d4358718ed4d76649", "methodNumberBeforeChange": 216, "methodNumberAfterChange": 216, "signatureBeforeChange": " public void test404657_loop()", "signatureAfterChange": " public void test404657_loop()", "diff": ["-\t\t\t\"Variable n is required to be final or effectively final\\n\" + ", "+\t\t\t\"Local variable n defined in an enclosing scope must be final or effectively final\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cbceda113c8a73b357a1e628655e33e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GrammarCoverageTests308.java", "commitBeforeChange": "a75f0756b3cdda16ae0347da0cb2609171946934", "commitAfterChange": "bc9ce3968f8f3e0eb426deb1d35cab387ea00774", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void test002() throws Exception", "signatureAfterChange": " \tpublic void test002() throws Exception", "diff": ["-\t\t\t\t\"Syntax error, type annotations are illegal here\\n\" + ", "+\t\t\t\t\"The annotation @Marker is disallowed for this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b48188fbea78f14953767614a7b4c9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/TypeBindingTests308.java", "commitBeforeChange": "ee49c8f1081c02bdb311590036980191aff6a2f1", "commitAfterChange": "d3d6e8a120fcc21d2141655c16c3f72a3fe7aa82", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "\r \t\r \tpublic void testAnnotatedBinaryType() throws CoreException, IOException", "signatureAfterChange": "\r \t\r \tpublic void testAnnotatedBinaryType() throws CoreException, IOException", "diff": ["-\t\t\tassertEquals(\"Wrong type\", \"@Marker{ value = (String)\\\"Outer\\\"} Outer.@Marker{ value = (String)\\\"Middle\\\"} Middle.@Marker{ value = (String)\\\"Inner\\\"} Inner\", type.toString());\t\t\r", "+\t\t\tassertEquals(\"Wrong type\", \"@Marker((String)\\\"Outer\\\") Outer.@Marker((String)\\\"Middle\\\") Middle.@Marker((String)\\\"Inner\\\") Inner\", type.toString());\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "464ab7e9af8d887054538c993651ea2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "f8b6b46eb549003d602669d933e8c4d912cfd694", "commitAfterChange": "ccc0792be277c61897d6812d61e917773111eeb0", "methodNumberBeforeChange": 222, "methodNumberAfterChange": 222, "signatureBeforeChange": " public void testBug260381_wksp2_02() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_02() throws JavaModelException", "diff": ["-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49803f83db504cdd61cb7aff56ae8f9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java", "commitBeforeChange": "277b33164a7aa6b44e8af80cbf75c89be37ef9e5", "commitAfterChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void test010() throws JavaModelException", "signatureAfterChange": " public void test010() throws JavaModelException", "diff": ["-\t\t\t\"getClass[METHOD_REF]{getClass(), Ljava.lang.Object;, ()Ljava.lang.Class<+Ljava.lang.Object;>;, getClass, null, 35}\\n\" +", "+\t\t\t\"getClass[METHOD_REF]{getClass(), Ljava.lang.Object;, ()Ljava.lang.Class<*>;, getClass, null, 35}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f524b6b8e18180b09a9facc6d5c2c3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "b19e9753b2440fbc565e94b25c4419c1ce3ce1f2", "commitAfterChange": "fb2dd37cec63b32be19be47d4358718ed4d76649", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " public void test068()", "signatureAfterChange": " public void test068()", "diff": ["-\t\t\t\t\"Variable x is required to be final or effectively final\\n\" + ", "+\t\t\t\t\"Local variable x defined in an enclosing scope must be final or effectively final\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "551fa86c64dea680dfbede1efa99ce37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "f8e06af2d64912de617f742baa744d8cff14ca39", "commitAfterChange": "799bcf90c7e5ed6ce45339b7f5c6f4ecccd1d29c", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 110, "signatureBeforeChange": " public void test400556e()", "signatureAfterChange": " public void test400556e()", "diff": ["-\t\t\t\"Lambda expression\\'s parameter p is expected to be of type List<? extends List<ParameterType>>[]\\n\" + ", "+\t\t\t\"Lambda expression\\'s parameter p is expected to be of type List<? extends List<?>>[]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5884586abedb7aafe4c7bdef51ac5dd6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/TypeBindingTests308.java", "commitBeforeChange": "ee49c8f1081c02bdb311590036980191aff6a2f1", "commitAfterChange": "d3d6e8a120fcc21d2141655c16c3f72a3fe7aa82", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "\r \tpublic void testAnnotatedBinaryType6() throws CoreException, IOException", "signatureAfterChange": "\r \tpublic void testAnnotatedBinaryType6() throws CoreException, IOException", "diff": ["-\t\t\tassertEquals(\"Wrong type\", \"@T{ value = (int)1} Outer#RAW.@T{ value = (int)2} Inner#RAW @T{ value = (int)4} [] @T{ value = (int)3} []\", type.toString());\t\t\r", "+\t\t\tassertEquals(\"Wrong type\", \"@T((int)1) Outer#RAW.@T((int)2) Inner#RAW @T((int)4) [] @T((int)3) []\", type.toString());\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5be887943536c0cfeaf85158fa08d6fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java", "commitBeforeChange": "b3906111a4433325958de7604465d8f0e49325d2", "commitAfterChange": "0b27309efdaba54bffa19e81e0f1e5ae6f176884", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void testBug424038()", "signatureAfterChange": " public void testBug424038()", "diff": ["-\t\t\"Type mismatch: cannot convert from List<Foo<E>.Stuff<E>> to List<Consumer<E>>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<Foo.Stuff<E>> to List<Consumer<E>>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e19ffb3c9bb5f3a334ea4a87e4b8e88", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/TestUtil.java", "commitBeforeChange": "ab8c02c44a008f2de315de55f5173248fa4552c7", "commitAfterChange": "312080ad16a6bef0ac87ef3aa13c9fc56f80f732", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic static String getPluginExtSrcDir()", "signatureAfterChange": "  \tpublic static String getPluginExtSrcDir()", "diff": ["-\t\treturn getFileInPlugin( AptTestsPlugin.getDefault(), new Path( \"/srcext\" ) ) //$NON-NLS-1$", "+\t\treturn getFileInPlugin( AptTestsPlugin.getDefault(), new Path( \"/src-ext\" ) ) //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62727cb4ef7390846aaefb1a9ee8801b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "f8b6b46eb549003d602669d933e8c4d912cfd694", "commitAfterChange": "ccc0792be277c61897d6812d61e917773111eeb0", "methodNumberBeforeChange": 162, "methodNumberAfterChange": 162, "signatureBeforeChange": " public void testBug239941() throws JavaModelException", "signatureAfterChange": " public void testBug239941() throws JavaModelException", "diff": ["-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "643eb3b6655fef6073a1533f715ace8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "abe6a4b8c7a37b999ce782468f77dcc11e925eae", "commitAfterChange": "b3906111a4433325958de7604465d8f0e49325d2", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": " public void test400556e()", "signatureAfterChange": " public void test400556e()", "diff": ["-\t\t\t\"Lambda expression\\'s parameter p is expected to be of type List<? extends List<?>>[]\\n\" + ", "+\t\t\t\"Lambda expression\\'s parameter p is expected to be of type List<? extends List<ParameterType>>[]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "688806d67452afc37f27420d81c085f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "8a281cea306104e13dc5d8e2e915592f13b4b03f", "commitAfterChange": "4f6e7772e1eab66068e8d31851a8e395b8beb754", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void test020()", "signatureAfterChange": " public void test020()", "diff": ["-\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ad4eaf1c6e51019da12d4663823986c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "f8b6b46eb549003d602669d933e8c4d912cfd694", "commitAfterChange": "ccc0792be277c61897d6812d61e917773111eeb0", "methodNumberBeforeChange": 218, "methodNumberAfterChange": 218, "signatureBeforeChange": " public void testBug260381_wksp1_01() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp1_01() throws JavaModelException", "diff": ["-\t\t\"\t * \\n\" +", "+\t\t\"\t *\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6be69d1cab46f15a741615cb6d83d4fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void test017() throws JavaModelException", "signatureAfterChange": " public void test017() throws JavaModelException", "diff": ["-\t\t\t\"\t\t\t}\\n\" +", "+\t\t\t\"\t}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d2dbdce1db9f34aebc4cb78b23ec6e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFormatter.java", "commitBeforeChange": "24eb072a7e8fa246f853df0748e7c66069f4ff20", "commitAfterChange": "cd140389e1d0cdca9f232f9b33d1b09e90034b22", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprivate TextEdit formatNode(ASTNode node, String str, int indentationLevel)", "signatureAfterChange": " \tprivate TextEdit formatNode(ASTNode node, String str, int indentationLevel)", "diff": ["-\t\t\t\t\tprefix= \"void m(\"; //$NON-NLS-1$", "+\t\t\t\t\tprefix= \"void m(final \"; //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7564e5b3efab0ab97afaeb3351b04236", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "8c77956bb14bf31d316463be9556a2204834682b", "commitAfterChange": "366617dbc4fc1d9363db17217a7ae199f0f005ea", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void test028()", "signatureAfterChange": " \tpublic void test028()", "diff": ["-\t\t\t\"The argument of type Class[] should explicitly be cast to Object[] for the invocation of the varargs method invoke(Object, Object...) from type Method. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type Class[] of the last argument to method invoke(Object, Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "793322d20fbc9fcc94687c143c60ad1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "b19e9753b2440fbc565e94b25c4419c1ce3ce1f2", "commitAfterChange": "fb2dd37cec63b32be19be47d4358718ed4d76649", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " public void test057()", "signatureAfterChange": " public void test057()", "diff": ["-\t\t\t\t\"Variable x is required to be final or effectively final\\n\" + ", "+\t\t\t\t\"Local variable x defined in an enclosing scope must be final or effectively final\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79f48d758da82a8417fac99b5699802f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "130cb4765fd3f636bbf53ed159d4905dec0a5fd5", "commitAfterChange": "938f4b2ad6ef3c12e60db3be23aed731979677d7", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public void test_nonnull_parameter_015()", "signatureAfterChange": " public void test_nonnull_parameter_015()", "diff": ["-\t\t\t\"The argument of type null should explicitly be cast to Object[] for the invocation of the varargs method foo2(int, Object...) from type X. It could alternatively be cast to Object for a varargs invocation\\n\" + ", "+\t\t\t\"Type null of the last argument to method foo2(int, Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d141e3142dd413a1ebcf67a75014684", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "b19e9753b2440fbc565e94b25c4419c1ce3ce1f2", "commitAfterChange": "fb2dd37cec63b32be19be47d4358718ed4d76649", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " public void test054()", "signatureAfterChange": " public void test054()", "diff": ["-\t\t\t\t\"Variable args is required to be final or effectively final\\n\" + ", "+\t\t\t\t\"Local variable args defined in an enclosing scope must be final or effectively final\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "826d91e913b4e048f609cd270413c2d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/RepeatableAnnotationTest.java", "commitBeforeChange": "3c8db8654fc8e2927c75863ec1232c9bc3800c9b", "commitAfterChange": "533660d1560f1a7aff4c5ccabdcd0cb35c0194c1", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void test026()", "signatureAfterChange": " \tpublic void test026()", "diff": ["-\t\t\t\"The containing annotation @FooContainer is allowed at targets where the repeatable annotation @Foo is not: TYPE, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, ANNOTATION_TYPE, PACKAGE\\n\" + ", "+\t\t\t\"The container annotation type @FooContainer is allowed at targets where the repeatable annotation type @Foo is not: TYPE, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, ANNOTATION_TYPE, PACKAGE\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82c95265ed698812b3261a5d280424b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "bb2219f73a65d80105bc92727133ff8011c4e284", "commitAfterChange": "28ac5b5368dcd64802ba668460817e2bb2a5db8e", "methodNumberBeforeChange": 275, "methodNumberAfterChange": 275, "signatureBeforeChange": " public void testBug309835_wksp1_02()", "signatureAfterChange": " public void testBug309835_wksp1_02()", "diff": ["-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8654bd15a20e7e4f2509520dd6f9c991", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "b19e9753b2440fbc565e94b25c4419c1ce3ce1f2", "commitAfterChange": "fb2dd37cec63b32be19be47d4358718ed4d76649", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " public void test047()", "signatureAfterChange": " public void test047()", "diff": ["-\t\t\t\t\"Variable var is required to be final or effectively final\\n\" + ", "+\t\t\t\t\"Local variable var defined in an enclosing scope must be final or effectively final\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "869ae177f6d42c44c9bde2e599bf28ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ExpressionContextTests.java", "commitBeforeChange": "8a281cea306104e13dc5d8e2e915592f13b4b03f", "commitAfterChange": "4f6e7772e1eab66068e8d31851a8e395b8beb754", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void test005()", "signatureAfterChange": " public void test005()", "diff": ["-\t\t\t\"\t                   ^^^^^^^^\\n\" + ", "+\t\t\t\"\t                   ^^^^^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bf1970489a894f15b71879447ac70fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "06cedbd8bd184e3f34c939385e2cbddd9e3aedca", "commitAfterChange": "0d09a2966f3cebfb8d6601000e2b64259fed7dd8", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " public void testBug400905_0005() throws CoreException", "signatureAfterChange": " public void testBug400905_0005() throws CoreException", "diff": ["-\t\t\t\"src/b400905/X.java void b400905.X.main(String[]) [() /* bar */ ->] EXACT_MATCH\\n\" +", "+\t\t\t\"src/b400905/X.java void void b400905.X.main(String[]):<lambda>#2.lambda$2() [() /* bar */ ->] EXACT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9299d41b3436c60ed70ca94bed6b94fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "8a281cea306104e13dc5d8e2e915592f13b4b03f", "commitAfterChange": "4f6e7772e1eab66068e8d31851a8e395b8beb754", "methodNumberBeforeChange": 177, "methodNumberAfterChange": 177, "signatureBeforeChange": " public void test401939ca()", "signatureAfterChange": " public void test401939ca()", "diff": ["-\t\t\t\t\"\t    ^^^^^^^^^\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95ef8dbadafb1ab53ab5bf41b56e9b51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests18.java", "commitBeforeChange": "277b33164a7aa6b44e8af80cbf75c89be37ef9e5", "commitAfterChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void test0020() throws JavaModelException", "signatureAfterChange": " public void test0020() throws JavaModelException", "diff": ["-\t\t\"hashCode() [in Object [in Object.class [in java.lang [in \"+ getExternalPath() + \"jclMin1.8.jar]]]]\",", "+\t\t\"hashCode() [in Object [in Object.class [in java.lang [in \"+ getExternalPath() + \"jclFull1.8.jar]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98c7a12ba18f9e7d2189e04059ea6512", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "f7c2ed5ecce3841921f761b0b104d350042f786e", "commitAfterChange": "132971f23d5ad724e7abdb8444fe685456f8fc05", "methodNumberBeforeChange": 155, "methodNumberAfterChange": 156, "signatureBeforeChange": " public void test401610b()", "signatureAfterChange": " public void test401610b()", "diff": ["-\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method\\n\" + ", "+\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method foo()\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9969cbc5f97c0f26e542f02f0642ee18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/RepeatableAnnotationTest.java", "commitBeforeChange": "0fdabed7d03d0f0d08fda0e7f845381fd7c643ef", "commitAfterChange": "b31cd8ccd51413655d3e805905e8dd7d1404f391", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic void testRepeatableWithContaining2()", "signatureAfterChange": " \tpublic void testRepeatableWithContaining2()", "diff": ["-\t\t\t\"1. ERROR in A.java (at line 12)\\n\" + ", "+\t\t\t\"1. WARNING in A.java (at line 12)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4d5b3d3965673b3414b71a32aa334cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "b3906111a4433325958de7604465d8f0e49325d2", "commitAfterChange": "0b27309efdaba54bffa19e81e0f1e5ae6f176884", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " public void test0034()", "signatureAfterChange": " public void test0034()", "diff": ["-\t\t\"Cannot infer type arguments for Y<>\\n\" + ", "+\t\t\"The constructor X<Integer>.Y<String>(String, String) is undefined\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6879e09b41cbfae40d39139799ea30a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/MementoTests.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void testBinaryMethodMemento4() throws JavaModelException", "signatureAfterChange": " public void testBinaryMethodMemento4() throws JavaModelException", "diff": ["-\t\t\"=P/lib<p(X.class[X~foo~Ljava.util.Collection\\\\<*>;\",", "+\t\t\"=P/lib<p(X.class[X~foo~Ljava.util.Collection\\\\<\\\\*\\\\>;\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6cf4a1ac8f733b4fd78bc2e76b38d97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java", "commitBeforeChange": "277b33164a7aa6b44e8af80cbf75c89be37ef9e5", "commitAfterChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void testExpressionBody2() throws JavaModelException", "signatureAfterChange": " public void testExpressionBody2() throws JavaModelException", "diff": ["-\t\t\t\"getClass[METHOD_REF]{getClass(), Ljava.lang.Object;, ()Ljava.lang.Class<+Ljava.lang.Object;>;, null, null, getClass, null, [173, 173], 35}\\n\" +", "+\t\t\t\"getClass[METHOD_REF]{getClass(), Ljava.lang.Object;, ()Ljava.lang.Class<*>;, null, null, getClass, null, [173, 173], 35}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab71a89315c89d38b0d2bf4dbb3d5f54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests18.java", "commitBeforeChange": "277b33164a7aa6b44e8af80cbf75c89be37ef9e5", "commitAfterChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void test0019() throws JavaModelException", "signatureAfterChange": " public void test0019() throws JavaModelException", "diff": ["-\t\t\"hashCode() [in Object [in Object.class [in java.lang [in \"+ getExternalPath() + \"jclMin1.8.jar]]]]\",", "+\t\t\"hashCode() [in Object [in Object.class [in java.lang [in \"+ getExternalPath() + \"jclFull1.8.jar]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abf4d61f5d5bac53250dacbc9f9fe06c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "8a281cea306104e13dc5d8e2e915592f13b4b03f", "commitAfterChange": "4f6e7772e1eab66068e8d31851a8e395b8beb754", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public void test045()", "signatureAfterChange": " public void test045()", "diff": ["-\t\t\t\"\t                               ^^^^^^^^^\\n\" + ", "+\t\t\t\"\t                               ^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad69a7e5b108023dcf912e73fddae21e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " public void testBug400905_0013() throws CoreException", "signatureAfterChange": " public void testBug400905_0013() throws CoreException", "diff": ["-\t\t\t\t\"src/X.java int void X.zoo():<lambda>#1.lambda$1() [() ->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():Lambda(I).doit() [() ->] EXACT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae4c6d4708cc6f4f37b5b8dd148360c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests18.java", "commitBeforeChange": "277b33164a7aa6b44e8af80cbf75c89be37ef9e5", "commitAfterChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " public void test422468d() throws JavaModelException", "signatureAfterChange": " public void test422468d() throws JavaModelException", "diff": ["-\t\t\"length() [in String [in String.class [in java.lang [in \"+ getExternalPath() + \"jclMin1.8.jar]]]]\",", "+\t\t\"length() [in String [in String.class [in java.lang [in \"+ getExternalPath() + \"jclFull1.8.jar]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4d99a9e8e774917aa915f25d66565b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "a75f0756b3cdda16ae0347da0cb2609171946934", "commitAfterChange": "bc9ce3968f8f3e0eb426deb1d35cab387ea00774", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "\r \tpublic void test062() throws Exception", "signatureAfterChange": "\r \tpublic void test062() throws Exception", "diff": ["-\t\t\t\t\"Syntax error, type annotations are illegal here\\n\" + \r", "+\t\t\t\t\"Annotation types that do not specify explicit target element types cannot be applied here\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9c7b4bf3976f43fd463e1440e07d2d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ExpressionContextTests.java", "commitBeforeChange": "8a281cea306104e13dc5d8e2e915592f13b4b03f", "commitAfterChange": "4f6e7772e1eab66068e8d31851a8e395b8beb754", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void test006()", "signatureAfterChange": " public void test006()", "diff": ["-\t\t\t\"\t                       ^^^^^^^^\\n\" + ", "+\t\t\t\"\t                       ^^^^^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6f8ff7478945223fb1d8442b3f3d07b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6af4748240d783fb0fd75666c88ce3ea32b7386e", "commitAfterChange": "c4bbe81e5ffd7d180da7485d9b35d8dbf9b1703c", "methodNumberBeforeChange": 1025, "methodNumberAfterChange": 1025, "signatureBeforeChange": " public void test1000()", "signatureAfterChange": " public void test1000()", "diff": ["-\t\t\t\"Type safety: The expression of type Iterator[] needs unchecked conversion to conform to Iterator<? extends Object>[]\\n\" + ", "+\t\t\t\"Type safety: The expression of type Iterator[] needs unchecked conversion to conform to Iterator<? extends Number>[]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7bd9ba7a407813b17b055b090634ee7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "b19e9753b2440fbc565e94b25c4419c1ce3ce1f2", "commitAfterChange": "fb2dd37cec63b32be19be47d4358718ed4d76649", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " public void test067()", "signatureAfterChange": " public void test067()", "diff": ["-\t\t\t\t\"Variable i is required to be final or effectively final\\n\" + ", "+\t\t\t\t\"Local variable i defined in an enclosing scope must be final or effectively final\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c86f1e675fce2d06015db740d8a3ab97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "f8e06af2d64912de617f742baa744d8cff14ca39", "commitAfterChange": "799bcf90c7e5ed6ce45339b7f5c6f4ecccd1d29c", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": " public void test400556f()", "signatureAfterChange": " public void test400556f()", "diff": ["-\t\t\t\"Lambda expression\\'s parameter p is expected to be of type List<? extends List<ParameterType>>[]\\n\" + ", "+\t\t\t\"Lambda expression\\'s parameter p is expected to be of type List<? extends List<? extends ParameterType>>[]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd8b59c43dce1f79fed9849b27a5b5f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/RepeatableAnnotationTest.java", "commitBeforeChange": "3c8db8654fc8e2927c75863ec1232c9bc3800c9b", "commitAfterChange": "533660d1560f1a7aff4c5ccabdcd0cb35c0194c1", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void testUnspecifiedTarget()", "signatureAfterChange": " \tpublic void testUnspecifiedTarget()", "diff": ["-\t\t\t\"The containing annotation @TC is allowed at targets where the repeatable annotation @T is not: TYPE_USE\\n\" + ", "+\t\t\t\"The container annotation type @TC is allowed at targets where the repeatable annotation type @T is not: TYPE_USE\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8998049d24e54b094a93fdb92887837", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "bb2219f73a65d80105bc92727133ff8011c4e284", "commitAfterChange": "28ac5b5368dcd64802ba668460817e2bb2a5db8e", "methodNumberBeforeChange": 172, "methodNumberAfterChange": 172, "signatureBeforeChange": " public void testBug294500b()", "signatureAfterChange": " public void testBug294500b()", "diff": ["-\t\t\" * \\n\" + ", "+\t\t\" *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0e30248559d5a58c6615809cfbade11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ExpressionContextTests.java", "commitBeforeChange": "8a281cea306104e13dc5d8e2e915592f13b4b03f", "commitAfterChange": "4f6e7772e1eab66068e8d31851a8e395b8beb754", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void test001()", "signatureAfterChange": " public void test001()", "diff": ["-\t\t\t\"\t           ^^^^^^^^\\n\" + ", "+\t\t\t\"\t           ^^^^^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e10f4d0b075d1884346d537469e3d78a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "6c3b6971f88c7f6d5be3c70fdaf936700dc7f94b", "commitAfterChange": "dfd4f51ecdd2928f82bb07183b33c60122015348", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "\r \tpublic void test068() throws Exception", "signatureAfterChange": "\r \tpublic void test068() throws Exception", "diff": ["-\t\t\t\t\"Syntax error, type annotations are illegal here\\n\" + \r", "+\t\t\t\t\"Annotation types that do not specify explicit target element types cannot be applied here\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e47ed8a357f71b2725865db2edfdf2c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "f8e06af2d64912de617f742baa744d8cff14ca39", "commitAfterChange": "799bcf90c7e5ed6ce45339b7f5c6f4ecccd1d29c", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 114, "signatureBeforeChange": " public void test400556i()", "signatureAfterChange": " public void test400556i()", "diff": ["-\t\t\t\"Lambda expression\\'s parameter p is expected to be of type List<? extends List<P>>[]\\n\" + ", "+\t\t\t\"Lambda expression\\'s parameter p is expected to be of type List<? extends List<? super P>>[]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e913ac0c2a01bd1332c5302741aeb462", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "b19e9753b2440fbc565e94b25c4419c1ce3ce1f2", "commitAfterChange": "fb2dd37cec63b32be19be47d4358718ed4d76649", "methodNumberBeforeChange": 215, "methodNumberAfterChange": 215, "signatureBeforeChange": " public void test404657_final()", "signatureAfterChange": " public void test404657_final()", "diff": ["-\t\t\t\"Variable n is required to be final or effectively final\\n\" + ", "+\t\t\t\"Local variable n defined in an enclosing scope must be final or effectively final\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecf9f676ff27b1bfb84f8f45a59eda9f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "f8b6b46eb549003d602669d933e8c4d912cfd694", "commitAfterChange": "ccc0792be277c61897d6812d61e917773111eeb0", "methodNumberBeforeChange": 179, "methodNumberAfterChange": 179, "signatureBeforeChange": " public void testBug295175d()", "signatureAfterChange": " public void testBug295175d()", "diff": ["-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee03b9d2175607de7d17aa5eb65dbd27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " public void testBug400905_0012() throws CoreException", "signatureAfterChange": " public void testBug400905_0012() throws CoreException", "diff": ["-\t\t\t\t\"src/X.java void X.i:<lambda>#1.lambda$1() [() ->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java void X.i:Lambda(I).doit() [() ->] EXACT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1cbae72099b629cbb91e19f29e1535b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "abe6a4b8c7a37b999ce782468f77dcc11e925eae", "commitAfterChange": "b3906111a4433325958de7604465d8f0e49325d2", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 112, "signatureBeforeChange": " public void test400556f()", "signatureAfterChange": " public void test400556f()", "diff": ["-\t\t\t\"Lambda expression\\'s parameter p is expected to be of type List<? extends List<? extends ParameterType>>[]\\n\" + ", "+\t\t\t\"Lambda expression\\'s parameter p is expected to be of type List<? extends List<ParameterType>>[]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb8d062ecf8d696909e7431346a56f5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "8a281cea306104e13dc5d8e2e915592f13b4b03f", "commitAfterChange": "4f6e7772e1eab66068e8d31851a8e395b8beb754", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " public void test400556a()", "signatureAfterChange": " public void test400556a()", "diff": ["-\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\t      ^^^^^^\\n\" + "]}], "num": 18086}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae574a112788dc9b5666ee4575e4a96b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22df807be201826c140b1ec6bc2e5459", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 106, "signatureBeforeChange": " \tpublic void test0114_while()", "signatureAfterChange": " public void test0404_while()", "diff": ["-\t// null analysis -- while", "-\tpublic void test0114_while() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t void foo() {\\n\" + ", "-\t\t\t\t\"\t\t Object o = null;\\n\" + ", "-\t\t\t\t\"\t\t while (o == null) {\\n\" + ", "-\t\t\t\t     // quiet: first iteration is sure to find o null, ", "-\t\t\t\t     // but other iterations may change it ", "-\t\t\t\t\"\t\t   if (System.currentTimeMillis() > 10L) {\\n\" + ", "-\t\t\t\t\"\t\t     o = new Object();\\n\" + ", "-\t\t\t\t\"\t\t   }\\n\" + ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"\"  ", "-\t\t);", "-\t}", "+// null analysis -- while", "+public void test0404_while() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  void foo() {\\n\" + ", "+\t\t\t\"    Object o = null;\\n\" + ", "+\t\t\t\"    while (o == null) {\\n\" + ", "+\t\t\t     // quiet: first iteration is sure to find o null, ", "+\t\t\t     // but other iterations may change it ", "+\t\t\t\"      if (System.currentTimeMillis() > 10L) {\\n\" + ", "+\t\t\t\"        o = new Object();\\n\" + ", "+\t\t\t\"      }\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2718a892453cce5bdaacad9808e3c687", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void test0004_field_with_method_call()", "signatureAfterChange": " public void test0010_field_with_method_call()", "diff": ["+// null analysis -- field", "+public void test0010_field_with_method_call() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  Object o;\\n\" + ", "+\t\t\t\"  void foo() {\\n\" + ", "+\t\t\t\"    o = null;\\n\" + ", "+\t\t\t\"    bar();\\n\" + // defuses null by side effect", "+\t\t\t\"    o.toString();\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"  void bar() {\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"\");", "+}", "-\t// null analysis -- field", "-\tpublic void test0004_field_with_method_call() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t Object o;\\n\" + ", "-\t\t\t\t\"\t void foo() {\\n\" + ", "-\t\t\t\t\"\t\t o = null;\\n\" + ", "-\t\t\t\t\"\t\t bar();\\n\" + // defuses null by side effect", "-\t\t\t\t\"\t\t o.toString();\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"\t void bar() {\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"\"", "-\t\t);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31081840ab85c990d80d501b808bbd67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 77, "signatureBeforeChange": " \tpublic void test0107_if_else()", "signatureAfterChange": " public void test0307_if_else()", "diff": ["-\t// null analysis - if/else", "-\tpublic void test0107_if_else() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t void foo(Object o) {\\n\" + ", "-\t\t\t\t\"\t\t if (o ==  null) {\\n\" + ", "-\t\t\t\t\"\t\t\t System.exit(0);\\n\" + ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t\t if (o == null) {\\n\" + ", "-\t\t\t\t  // quiet ", "-\t\t\t\t  // a direct call to System.exit() can be recognized as such; yet,", "-\t\t\t\t  // a lot of other methods may have the same property (aka calling", "-\t\t\t\t  // System.exit() themselves.)", "-\t\t\t\t\"\t\t   // do nothing\\n\" + ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"\"", "-\t\t);", "-\t}\t\t", "+// null analysis - if/else", "+public void test0307_if_else() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  void foo(Object o) {\\n\" + ", "+\t\t\t\"    if (o ==  null) {\\n\" + ", "+\t\t\t\"      System.exit(0);\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    if (o == null) {\\n\" + ", "+\t\t\t  // quiet ", "+\t\t\t  // a direct call to System.exit() can be recognized as such; yet,", "+\t\t\t  // a lot of other methods may have the same property (aka calling", "+\t\t\t  // System.exit() themselves.)", "+\t\t\t\"      // do nothing\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"\");", "+}   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5eff2dfbe7fa74b2beeb09d74dba9181", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 193, "signatureBeforeChange": " \tpublic void test0224_for()", "signatureAfterChange": " public void test0704_for()", "diff": ["-\t// null analysis -- for", "-\tpublic void test0224_for() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t void foo() {\\n\" + ", "-\t\t\t\t\"\t\t Object o = null;\\n\" + ", "-\t\t\t\t\"\t\t for (;o == null;) {\\n\" + ", "-\t\t\t\t     // quiet: first iteration is sure to find it null, ", "-\t\t\t\t     // but other iterations may change it ", "-\t\t\t\t\"\t\t   if (System.currentTimeMillis() > 10L) {\\n\" + ", "-\t\t\t\t\"\t\t     o = new Object();\\n\" + ", "-\t\t\t\t\"\t\t   }\\n\" + ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"\"  ", "-\t\t);", "-\t}", "+// null analysis -- for", "+public void test0704_for() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  void foo() {\\n\" + ", "+\t\t\t\"    Object o = null;\\n\" + ", "+\t\t\t\"    for (;o == null;) {\\n\" + ", "+\t\t\t     // quiet: first iteration is sure to find it null, ", "+\t\t\t     // but other iterations may change it ", "+\t\t\t\"      if (System.currentTimeMillis() > 10L) {\\n\" + ", "+\t\t\t\"        o = new Object();\\n\" + ", "+\t\t\t\"      }\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb22226076718bbaf72e5a287b5f8307", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void test0006_field_with_method_call()", "signatureAfterChange": " public void test0012_field_with_method_call()", "diff": ["+// null analysis -- field", "+public void test0012_field_with_method_call() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  Object o;\\n\" + ", "+\t\t\t\"  void foo() {\\n\" + ", "+\t\t\t\"    o = null;\\n\" + ", "+\t\t\t\"    bar();\\n\" + ", "+\t\t\t\"    o.toString();\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"  static void bar() {\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"\" // still ok because the class may hold a pointer to this", "+\t);", "+}", "-\t// null analysis -- field", "-\tpublic void test0006_field_with_method_call() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t Object o;\\n\" + ", "-\t\t\t\t\"\t void foo() {\\n\" + ", "-\t\t\t\t\"\t\t o = null;\\n\" + ", "-\t\t\t\t\"\t\t bar();\\n\" + ", "-\t\t\t\t\"\t\t o.toString();\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"\t static void bar() {\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"\" // still ok because the class may hold a pointer to this", "-\t\t);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cec4cd721fdb7550bfc0f11eece72f57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void test0007_field_with_method_call()", "signatureAfterChange": " public void test0013_field_with_method_call()", "diff": ["+// null analysis -- field", "+public void test0013_field_with_method_call() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  static Object o;\\n\" + ", "+\t\t\t\"  void foo() {\\n\" + ", "+\t\t\t\"    o = null;\\n\" + ", "+\t\t\t\"    bar();\\n\" + ", "+\t\t\t\"    o.toString();\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"  void bar() {\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"\" // still ok because this may place a static call upon X", "+\t);", "+}", "-\t// null analysis -- field", "-\tpublic void test0007_field_with_method_call() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t static Object o;\\n\" + ", "-\t\t\t\t\"\t void foo() {\\n\" + ", "-\t\t\t\t\"\t\t o = null;\\n\" + ", "-\t\t\t\t\"\t\t bar();\\n\" + ", "-\t\t\t\t\"\t\t o.toString();\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"\t void bar() {\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"\" // still ok because this may place a static call upon X", "-\t\t);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e843e35057b9c83bd588dd2714b4de43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void test0005_field_with_method_call()", "signatureAfterChange": " public void test0011_field_with_method_call()", "diff": ["+// null analysis -- field", "+public void test0011_field_with_method_call() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  static Object o;\\n\" + ", "+\t\t\t\"  void foo() {\\n\" + ", "+\t\t\t\"    o = null;\\n\" + ", "+\t\t\t\"    bar();\\n\" + // defuses null by side effect", "+\t\t\t\"    o.toString();\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"  static void bar() {\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"\");", "+}", "-\t// null analysis -- field", "-\tpublic void test0005_field_with_method_call() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t static Object o;\\n\" + ", "-\t\t\t\t\"\t void foo() {\\n\" + ", "-\t\t\t\t\"\t\t o = null;\\n\" + ", "-\t\t\t\t\"\t\t bar();\\n\" + // defuses null by side effect", "-\t\t\t\t\"\t\t o.toString();\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"\t static void bar() {\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"\"", "-\t\t);", "-\t}"]}], "num": 52806}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21ece488319c38c43288ac85d6a6965d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70a7c21653f5b5ac2c563b0a52d950cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void reportMatching(CompilationUnitDeclaration unit) throws CoreException", "signatureAfterChange": " public void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "diff": ["-public void reportMatching(CompilationUnitDeclaration unit) throws CoreException {", "-\tif (this.cuHasBeenResolved) {", "+public void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException {", "+\tif (mustResolve) {", "-\t\tfor (Iterator potentialMatches = this.potentialMatchingNodes.keySet().iterator(); potentialMatches.hasNext();) {", "-\t\t\tAstNode node = (AstNode) potentialMatches.next();", "-\t\t\tint level;", "+\t\tObject[] nodes = this.potentialMatchingNodesSet.values;", "+\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\tAstNode node = (AstNode) nodes[i];", "+\t\t\tif (node == null) continue;", "-\t\t\t\tlevel = this.locator.pattern.matchLevel(node, true);", "-\t\t\t\tif (level == SearchPattern.ACCURATE_MATCH || level == SearchPattern.INACCURATE_MATCH) {", "-\t\t\t\t\tthis.matchingNodes.put(node, new Integer(level));", "-\t\t\t\t}", "+\t\t\t\tint level = this.locator.pattern.matchLevel(node, true);", "+\t\t\t\tif (level == SearchPattern.ACCURATE_MATCH)", "+\t\t\t\t\tthis.matchingNodes.put(node, EXACT_MATCH);", "+\t\t\t\telse if (level == SearchPattern.INACCURATE_MATCH)", "+\t\t\t\t\tthis.matchingNodes.put(node, POTENTIAL_MATCH);", "-\t\tthis.potentialMatchingNodes = new HashMap();", "+\t\tthis.potentialMatchingNodesSet = new SimpleSet();", "-\t", "-\t// package declaration", "+", "+\tif (this.matchingNodes.elementSize == 0) return; // no matching nodes were found", "+", "-\tInteger level;", "-\tif (pkg != null && (level = (Integer)this.matchingNodes.remove(pkg)) != null) {", "-\t\tif ((this.matchContainer & SearchPattern.COMPILATION_UNIT) != 0) {", "+\tif (pkg != null && this.matchingNodes.removeKey(pkg) != null)", "+\t\tif ((this.matchContainer & SearchPattern.COMPILATION_UNIT) != 0)", "+", "+\tImportReference[] imports = unit.imports;", "+\tif (imports != null) {", "+\t\tfor (int i = 0, l = imports.length; i < l; i++) {", "+\t\t\tImportReference importRef = imports[i];", "+\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(importRef);", "+\t\t\tif (level != null && (this.matchContainer & SearchPattern.COMPILATION_UNIT) != 0)", "+\t\t\t\tthis.locator.reportImport(importRef, level.intValue());", "-\t// import declarations", "-\tif (!this.cuHasBeenResolved) {", "-\t\tImportReference[] imports = unit.imports;", "-\t\tif (imports != null) {", "-\t\t\tfor (int i = 0; i < imports.length; i++) {", "-\t\t\t\tImportReference importRef = imports[i];", "-\t\t\t\tif ((level = (Integer)this.matchingNodes.remove(importRef)) != null) {", "-\t\t\t\t\tif ((this.matchContainer & SearchPattern.COMPILATION_UNIT) != 0) {", "-\t\t\t\t\t\tthis.locator.reportImport(", "-\t\t\t\t\t\t\timportRef, ", "-\t\t\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t} // else import declarations have already been processed above", "-", "-\t// types", "-\t\tfor (int i = 0; i < types.length; i++) {", "+\t\tfor (int i = 0, l = types.length; i < l; i++) {", "+\t\t\tif (this.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "-\t\t\tif ((level = (Integer)this.matchingNodes.remove(type)) != null) {", "-\t\t\t\tif ((this.matchContainer & SearchPattern.COMPILATION_UNIT) != 0) {", "-\t\t\t\t\tthis.locator.reportTypeDeclaration(", "-\t\t\t\t\t\ttype, ", "-\t\t\t\t\t\tnull, ", "-\t\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tthis.reportMatching(type, null);", "+\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(type);", "+\t\t\tif (level != null && (this.matchContainer & SearchPattern.COMPILATION_UNIT) != 0)", "+\t\t\t\tthis.locator.reportTypeDeclaration(type, null, level.intValue());", "+\t\t\treportMatching(type, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0f2f3e54f7657ae3d357873e324b3be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 43, "signatureBeforeChange": " public void reportImport(ImportReference reference, int accuracy) throws CoreException", "signatureAfterChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "diff": ["-public void reportImport(ImportReference reference, int accuracy) throws CoreException {", "-\tIJavaElement importHandle = createImportHandle(reference);", "-\tthis.patternLocator.matchReportImportRef(reference, null, importHandle, accuracy, this);", "+ */", "+protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException {", "+\tMatchingNodeSet nodeSet = this.currentPossibleMatch.nodeSet;", "+\tif (mustResolve) {", "+\t\t// move the possible matching nodes that exactly match the search pattern to the matching nodes set", "+\t\tObject[] nodes = nodeSet.possibleMatchingNodesSet.values;", "+\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\tAstNode node = (AstNode) nodes[i];", "+\t\t\tif (node == null) continue;", "+\t\t\tif (node instanceof ImportReference) {", "+\t\t\t\t// special case for import refs: they don't know their binding", "+\t\t\t\t// import ref cannot be in the hirarchy of a type", "+\t\t\t\tif (this.hierarchyResolver != null) continue;", "+", "+\t\t\t\tImportReference importRef = (ImportReference) node;", "+\t\t\t\tBinding binding = importRef.onDemand", "+\t\t\t\t\t? unit.scope.getTypeOrPackage(CharOperation.subarray(importRef.tokens, 0, importRef.tokens.length))", "+\t\t\t\t\t: unit.scope.getTypeOrPackage(importRef.tokens);", "+\t\t\t\tthis.patternLocator.matchLevelAndReportImportRef(importRef, binding, this);", "+\t\t\t} else {", "+\t\t\t\tnodeSet.addMatch(node, this.patternLocator.resolveLevel(node));", "+\t\t\t}", "+\t\t}", "+\t\tnodeSet.possibleMatchingNodesSet = new SimpleSet();", "+\t}", "+", "+\tif (nodeSet.matchingNodes.elementSize == 0) return; // no matching nodes were found", "+", "+\tboolean searchInsideCompilationUnits = (this.matchContainer & PatternLocator.COMPILATION_UNIT_CONTAINER) != 0;", "+\tImportReference pkg = unit.currentPackage;", "+\tif (pkg != null && nodeSet.matchingNodes.removeKey(pkg) != null) {", "+// Currently a no-op", "+//\t\tif (searchInsideCompilationUnits)", "+//\t\t\treportPackageDeclaration(pkg);", "+\t}", "+", "+\tImportReference[] imports = unit.imports;", "+\tif (imports != null) {", "+\t\tfor (int i = 0, l = imports.length; i < l; i++) {", "+\t\t\tImportReference importRef = imports[i];", "+\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(importRef);", "+\t\t\tif (level != null && searchInsideCompilationUnits)", "+\t\t\t\tthis.patternLocator.matchReportImportRef(importRef, null, createImportHandle(importRef), level.intValue(), this);", "+\t\t}", "+\t}", "+", "+\tTypeDeclaration[] types = unit.types;", "+\tif (types != null) {", "+\t\tfor (int i = 0, l = types.length; i < l; i++) {", "+\t\t\tif (nodeSet.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\t\tTypeDeclaration type = types[i];", "+\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(type);", "+\t\t\tif (level != null && searchInsideCompilationUnits)", "+\t\t\t\treportTypeDeclaration(type, null, level.intValue());", "+\t\t\treportMatching(type, null, nodeSet);", "+\t\t}", "+\t}", "+}"]}], "num": 45858}
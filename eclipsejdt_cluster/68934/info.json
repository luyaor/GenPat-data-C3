{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47935ac9d38c9b5bf96ad56464744c5c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b20a484ef0441e6b1960be2b5bdd843", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultCommentMapper.java", "commitBeforeChange": "43c947b648b5a1fa1fb7d4f5ce5b7cea1d4fa7a2", "commitAfterChange": "eee151556fa5628da58c297d3e841df408f33c62", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate void doExtraRangesForChildren(ASTNode node, Scanner scanner)", "signatureAfterChange": "  \t\tprotected boolean visitNode(ASTNode node)", "diff": ["-\t */", "-\tprivate void doExtraRangesForChildren(ASTNode node, Scanner scanner) {", "-\t\t// Compute node children", "-\t\tList children= getChildren(node);", "-\t\tint size = children.size() ;", "-\t\t// Compute last next start and previous end. Next start is the starting position", "-\t\t// of first token following node end which is neither a comment nor white spaces.", "-\t\tint lastPos = getExtendedEnd(node);", "-\t\tint previousEnd = node.getStartPosition();", "-\t\t", "-\t\t// Compute leading and trailing comments for all children nodes at this level", "-\t\tthis.commentIndex = 0;", "-\t\ttry {", "-\t\t\tfor (int i= 0; i < size; i++) {", "-\t\t\t\tASTNode current = (ASTNode) children.get(i);", "-\t\t\t\tboolean lastChild = i==(size-1);", "-\t\t\t\tint nextStart = lastChild ? lastPos : ((ASTNode) children.get(i+1)).getStartPosition();", "-\t\t\t\tstoreLeadingComments(current, previousEnd,scanner);", "-\t\t\t\tpreviousEnd = storeTrailingComments(current, nextStart, scanner, lastChild);", "-\t\t\t}", "-\t\t}", "-\t\tcatch (Exception ex) {", "-\t\t\t// Give up extended ranges at this level if unexpected exception happens...", "-\t\t}", "-\t\t", "-\t\t// Compute extended ranges at sub-levels", "-\t\tfor (int i= 0; i < size; i++) {", "-\t\t\tdoExtraRangesForChildren((ASTNode) children.get(i), scanner);", "-\t\t}", "+", "+", "+\t\t\t// Get default previous end", "+\t\t\tASTNode parent = node.getParent();", "+\t\t\tint previousEnd = parent.getStartPosition();", "+", "+\t\t\t// Look for sibling node", "+\t\t\tASTNode sibling = (ASTNode) this.waitingSiblings.get(parent);", "+\t\t\tif (sibling != null) {", "+\t\t\t\t// Found one previous sibling, so compute its trailing comments using current node start position", "+\t\t\t\ttry {", "+\t\t\t\t\tpreviousEnd = storeTrailingComments(sibling, node.getStartPosition(), false);", "+\t\t\t\t} catch (Exception ex) {", "+\t\t\t\t\t// Give up extended ranges at this level if unexpected exception happens...", "+\t\t\t\t}", "+", "+\t\t\t// Compute leading comments for current node", "+\t\t\ttry {", "+\t\t\t\tstoreLeadingComments(node, previousEnd);", "+\t\t\t} catch (Exception ex) {", "+\t\t\t\t// Give up extended ranges at this level if unexpected exception happens...", "+\t\t\t}", "+\t\t\t", "+\t\t\t// Store current node as waiting sibling for its parent", "+\t\t\tthis.waitingSiblings.put(parent, node);", "+", "+\t\t\t// We're always ok to visit sub-levels", "+\t\t\treturn true;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ff433b33ad98d2b3bd1fefaa3582274", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6e8c555a7d6f504d4ea246c591d5bb3f080d438", "commitAfterChange": "3316f207e855c46fb5e805791239fa37620ca8c4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void cleanUpIndexes()", "signatureAfterChange": " public void cleanUpIndexes()", "diff": ["-\tSimpleLookupTable knownPaths = new SimpleLookupTable();", "+\tSimpleSet knownPaths = new SimpleSet();", "-\tfor (int j = 0, max = selectedIndexes.length; j < max; j++) {", "-\t\t// TODO should use getJavaPluginWorkingLocation()+index simple name to avoid bugs such as https://bugs.eclipse.org/bugs/show_bug.cgi?id=62267", "-\t\tString path = selectedIndexes[j].getIndexFile().getAbsolutePath();", "-\t\tknownPaths.put(path, path);", "+\tfor (int i = 0, l = selectedIndexes.length; i < l; i++) {", "+\t\tString path = selectedIndexes[i].getIndexFile().getAbsolutePath();", "+\t\tknownPaths.add(path);", "-\tif (indexStates != null) {", "-\t\tObject[] keys = indexStates.keyTable;", "-\t\tint keysLength = keys.length;", "-\t\tint updates = 0;", "-\t\tString locations[] = new String[keysLength];", "+\tif (this.indexStates != null) {", "+\t\tObject[] keys = this.indexStates.keyTable;", "+\t\tIPath[] locations = new IPath[this.indexStates.elementSize];", "+\t\tint count = 0;", "-\t\t\tString key = (String) keys[i];", "-\t\t\tif (key != null && !knownPaths.containsKey(key)) {", "-\t\t\t\tlocations[updates++] = key;", "-\t\t\t}", "+\t\t\tIPath key = (IPath) keys[i];", "+\t\t\tif (key != null && !knownPaths.includes(key.toOSString()))", "+\t\t\t\tlocations[count++] = key;", "-\t\tif (updates > 0) {", "+\t\tif (count > 0)", "-\t\t}", "-", "-\tFile indexesDirectory = new File(getJavaPluginWorkingLocation().toOSString());", "-\tif (indexesDirectory.isDirectory()) {", "-\t\tFile[] indexesFiles = indexesDirectory.listFiles();", "-\t\tif (indexesFiles != null) {", "-\t\t\tfor (int i = 0, indexesFilesLength = indexesFiles.length; i < indexesFilesLength; i++) {", "-\t\t\t\tString fileName = indexesFiles[i].getAbsolutePath();", "-\t\t\t\tif (!knownPaths.containsKey(fileName) && fileName.toLowerCase().endsWith(\".index\")) { //$NON-NLS-1$", "-\t\t\t\t\tif (VERBOSE)", "-\t\t\t\t\t\tUtil.verbose(\"Deleting index file \" + indexesFiles[i]); //$NON-NLS-1$", "-\t\t\t\t\tindexesFiles[i].delete();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+\tdeleteIndexFiles(knownPaths);"]}], "num": 68934}
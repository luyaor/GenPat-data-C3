{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa5d0929f096ae640c972079df60e4b1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d306c268584f0deb20a588b82cc0bce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic abstract EntryResult[] query(char[][] categories, char[] key, int matchRule);", "signatureAfterChange": " public EntryResult[] query(char[][] categories, char[] key, int matchRule) throws IOException", "diff": ["-\t */", "-\tpublic abstract EntryResult[] query(char[][] categories, char[] key, int matchRule);", "+ */", "+public EntryResult[] query(char[][] categories, char[] key, int matchRule) throws IOException {", "+\tif (this.memoryIndex.shouldMerge() && monitor.exitReadEnterWrite()) {", "+\t\ttry {", "+\t\t\tsave();", "+\t\t} finally {", "+\t\t\tmonitor.exitWriteEnterRead();", "+\t\t}", "+\t}", "+", "+\tHashtableOfObject results;", "+\tif (this.memoryIndex.hasChanged()) {", "+\t\tresults = this.diskIndex.addQueryResults(categories, key, matchRule, this.memoryIndex);", "+\t\tthis.memoryIndex.addQueryResults(categories, key, matchRule, results);", "+\t} else {", "+\t\tresults = this.diskIndex.addQueryResults(categories, key, matchRule, null);", "+\t}", "+\tif (results.elementSize == 0) return null;", "+", "+\tEntryResult[] entryResults = new EntryResult[results.elementSize];", "+\tint count = 0;", "+\tObject[] values = results.valueTable;", "+\tfor (int i = 0, l = values.length; i < l; i++) {", "+\t\tEntryResult result = (EntryResult) values[i];", "+\t\tif (result != null)", "+\t\t\tentryResults[count++] = result;", "+\t}", "+\treturn entryResults;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0133d15f5c235b2dbbf9858ac009878", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "2b3faf03e480607600ec10a4a39f50f16f7be45e", "commitAfterChange": "f7325223a37c0f8ceeea4cb0dae6e3b624fd90dd", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "  protected boolean findSourceFiles(IResourceDelta delta) throws CoreException", "signatureAfterChange": "  protected boolean findSourceFiles(IResourceDelta delta) throws CoreException", "diff": ["+\tArrayList visited = new ArrayList(sourceLocations.length);", "-\t\t\t\t\tfindSourceFiles(children[j], md, segmentCount);", "+\t\t\t\t\tif (!findSourceFiles(children[j], md, segmentCount))", "+\t\t\t\t\t\treturn false;", "+\t\t\tif (md.hasIndependentOutputFolder && !visited.contains(md.binaryFolder)) {", "+\t\t\t\tvisited.add(md.binaryFolder);", "+\t\t\t\tIResourceDelta binaryDelta = delta.findMember(md.binaryFolder.getProjectRelativePath());", "+\t\t\t\tif (binaryDelta != null) {", "+\t\t\t\t\tint segmentCount = binaryDelta.getFullPath().segmentCount();", "+\t\t\t\t\tIResourceDelta[] children = binaryDelta.getAffectedChildren();", "+\t\t\t\t\tfor (int j = 0, m = children.length; j < m; j++)", "+\t\t\t\t\t\tif (!checkForClassFileChanges(children[j], md, segmentCount))", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t\t\t\tfindSourceFiles(children[j], md, segmentCount);", "+\t\t\t\t\t\tif (!findSourceFiles(children[j], md, segmentCount))", "+\t\t\t\t\t\t\treturn false;"]}], "num": 21662}
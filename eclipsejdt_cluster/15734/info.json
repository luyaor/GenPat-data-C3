{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "05a7c9ba57d3a032e03da7bb6801cc23", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50064f68faf84a8627e793a323c74870", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "8e43318d18f951ae3a3314bdbfe107991355bc65", "commitAfterChange": "6a28357528f11445ee351675b8133965f3b96037", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["-\t\t\t\tif (currentType.isGenericType()) {", "+\t\t\t\tReferenceBinding currentErasure = (ReferenceBinding)currentType.erasure();", "+\t\t\t\tif (currentErasure.isGenericType()) {", "-\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.environment().createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType));", "+\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.environment().createParameterizedType(currentErasure, null, qualifiedType));", "-\t   \t\t\t    qualifiedType = scope.environment().createRawType(currentType, qualifiedType); // raw type", "+\t   \t\t\t    qualifiedType = scope.environment().createRawType(currentErasure, qualifiedType); // raw type", "-\t\t\t\t\t\t\t\t\t\t\t\t\t? scope.environment().createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t? scope.environment().createParameterizedType(currentErasure, null, qualifiedType)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5402cfebc5f57a6ab2644de991add47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "2fed68de4f28af9e25ceba559157a67158806686", "commitAfterChange": "fb92a6812847f2670c8d1e77d78e650152148e1a", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": " public void generateSyntheticEnclosingInstanceValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "signatureAfterChange": " public void generateSyntheticEnclosingInstanceValues( \t\tBlockScope currentScope,  \t\tReferenceBinding targetType,  \t\tExpression enclosingInstance,  \t\tAstNode invocationSite)", "diff": ["-public void generateSyntheticEnclosingInstanceValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite) {", "+public void generateSyntheticEnclosingInstanceValues(", "+\t\tBlockScope currentScope, ", "+\t\tReferenceBinding targetType, ", "+\t\tExpression enclosingInstance, ", "+\t\tAstNode invocationSite) {", "+\t\t// deny access to enclosing instance argument for allocation and super constructor call (if 1.4)", "+\t\tboolean ignoreEnclosingArgInConstructorCall = invocationSite instanceof AllocationExpression", "+\t\t\t\t\t|| (complyTo14 && ((invocationSite instanceof ExplicitConstructorCall && ((ExplicitConstructorCall)invocationSite).isSuperAccess())));", "-\t\t\t\t", "-\t\t\t\t// TODO (philippe) should have sender specify how to select enclosing instance 1.3/1.4 flavor ", "-\t\t\t\t\tsyntheticArgType, ", "-\t\t\t\t\tfalse /*not only exact match (that is, allow compatible)*/,", "-\t\t\t\t\tcomplyTo14", "-\t\t\t\t\t\t? (invocationSite instanceof AllocationExpression ", "-\t\t\t\t\t\t\t|| (invocationSite instanceof ExplicitConstructorCall && ((ExplicitConstructorCall)invocationSite).isSuperAccess()))", "-\t\t\t\t\t\t: invocationSite instanceof AllocationExpression);", "+\t\t\t\t\t\tsyntheticArgType, ", "+\t\t\t\t\t\tfalse /*not only exact match (that is, allow compatible)*/,", "+\t\t\t\t\t\tignoreEnclosingArgInConstructorCall);"]}], "num": 15734}
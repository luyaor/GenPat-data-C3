{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ffab2f379fa9a600482e9d90b1a678b3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a35c3b439086a6989b8909730c1359f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ExternalAnnotationProvider.java", "commitBeforeChange": "80e31481d0d6262559c156b1e1d04936f3ab697a", "commitAfterChange": "a071cbdaf211a260b8aa9c61822ac5501cee9c5c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate void initialize(InputStream input) throws IOException", "signatureAfterChange": "  \tprivate void initialize(InputStream input) throws IOException", "diff": ["-\t\t\tString line = reader.readLine().trim();", "-\t\t\tif (line.startsWith(CLASS_PREFIX)) {", "-\t\t\t\tline = line.substring(CLASS_PREFIX.length());", "-\t\t\t} else {", "-\t\t\t\tthrow new IOException(\"missing class header in annotation file\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tif (!trimTail(line).equals(this.typeName)) {", "-\t\t\t\tthrow new IOException(\"mismatching class name in annotation file, expected \"+this.typeName+\", but header said \"+line); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t}", "+\t\t\tassertClassHeader(reader.readLine(), this.typeName);", "+", "+\t\t\tString line;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd1ce46e5aea888d4ff06c915e35e944", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/RoundEnvImpl.java", "commitBeforeChange": "0451f7d8d4c6c8405b9315cd6272871fc556bba4", "commitAfterChange": "99792a3ac5be202887d314558a46b5851f3a5997", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \t@Override \tpublic Set<? extends Element> getElementsAnnotatedWith(Class<? extends Annotation> a)", "signatureAfterChange": " \t \t@Override \tpublic Set<? extends Element> getElementsAnnotatedWith(Class<? extends Annotation> a)", "diff": ["-", "+\t", "-\t\t\tthrow new IllegalArgumentException(\"Only annotation type are expected\"); //$NON-NLS-1$", "+\t\t\tthrow new IllegalArgumentException(\"Argument must represent an annotation type\"); //$NON-NLS-1$", "-\t\tif (annoType.getKind() != ElementKind.ANNOTATION_TYPE) {", "-\t\t\tthrow new IllegalArgumentException(\"Only annotation type are expected\"); //$NON-NLS-1$", "-\t\t}", "-\t\treturn _annoToUnit.getValues(annoType);", "+\t\treturn getElementsAnnotatedWith(annoType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e80c537774184d8ed13166e529487e1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/RoundEnvImpl.java", "commitBeforeChange": "3d8fd8b145b9fa1f2c27b19a7df3e728982e46e7", "commitAfterChange": "2e00795c3d6ef500d7af726d431f240f73b100c7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \t@Override \tpublic Set<? extends Element> getElementsAnnotatedWith(Class<? extends Annotation> a)", "signatureAfterChange": "  \t@Override \tpublic Set<? extends Element> getElementsAnnotatedWith(Class<? extends Annotation> a)", "diff": ["-\t\tTypeElement annoType = _processingEnv.getElementUtils().getTypeElement(a.getCanonicalName());", "+\t\tString canonicalName = a.getCanonicalName();", "+\t\tif (canonicalName == null) {", "+\t\t\t// null for anonymous and local classes or an array of those", "+\t\t\tthrow new IllegalArgumentException(\"Only annotation type are expected\"); //$NON-NLS-1$", "+\t\t}", "+\t\tTypeElement annoType = _processingEnv.getElementUtils().getTypeElement(canonicalName);", "+\t\tif (annoType.getKind() != ElementKind.ANNOTATION_TYPE) {", "+\t\t\tthrow new IllegalArgumentException(\"Only annotation type are expected\"); //$NON-NLS-1$", "+\t\t}"]}], "num": 12452}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "382e29c8ba1f78f6704000d5d07e6a3f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02275896f6c53278ad4433c92d8f3d6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " public void test058() throws Exception", "signatureAfterChange": " public void test058() throws Exception", "diff": ["-\t\t\t\t\"public class X {\\r\\n\" +", "-\t\t\t\t\"\tpublic static void main(String args[]) {\\r\\n\" +", "-\t\t\t\t\"\t\ttry {\\r\\n\" +", "-\t\t\t\t\"\t\t\ttry {\\r\\n\" +", "-\t\t\t\t\"\t\t\t\tSystem.out.print(\\\"SU\\\");\\r\\n\" +", "-\t\t\t\t\"\t\t\t} finally {\\r\\n\" +", "-\t\t\t\t\"\t\t\t\tSystem.out.print(\\\"CC\\\");\\r\\n\" +", "-\t\t\t\t\"\t\t\t}\\r\\n\" +", "-\t\t\t\t\"\t\t} finally {\\r\\n\" +", "-\t\t\t\t\"\t\t\tSystem.out.println(\\\"ESS\\\");\\r\\n\" +", "-\t\t\t\t\"\t\t}\\r\\n\" +", "-\t\t\t\t\"\t}\\r\\n\" +", "-\t\t\t\t\"}\\r\\n\" +", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String args[]) {\\n\" +", "+\t\t\t\t\"\t\ttry {\\n\" +", "+\t\t\t\t\"\t\t\ttry {\\n\" +", "+\t\t\t\t\"\t\t\t\tSystem.out.print(\\\"SU\\\");\\n\" +", "+\t\t\t\t\"\t\t\t} finally {\\n\" +", "+\t\t\t\t\"\t\t\t\tSystem.out.print(\\\"CC\\\");\\n\" +", "+\t\t\t\t\"\t\t\t}\\n\" +", "+\t\t\t\t\"\t\t} finally {\\n\" +", "+\t\t\t\t\"\t\t\tSystem.out.println(\\\"ESS\\\");\\n\" +", "+\t\t\t\t\"\t\t}\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72b5d2f40c19db5c24a173abe234419f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 505, "methodNumberAfterChange": 505, "signatureBeforeChange": " \tpublic void test501()", "signatureAfterChange": " \tpublic void test501()", "diff": ["-\t\t\t\"     0  new X [2]\\n\" + ", "+\t\t\t\"     0  new X [1]\\n\" + ", "-\t\t\t\"     4  new BX [27]\\n\" + ", "+\t\t\t\"     4  new BX [26]\\n\" + ", "-\t\t\t\"    11  invokespecial X(AX) [30]\\n\" + ", "+\t\t\t\"    11  invokespecial X(AX) [29]\\n\" + ", "-\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [36]\\n\" + ", "+\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [31]\\n\" + ", "-\t\t\t\"    19  getfield X.t : AX [17]\\n\" + ", "-\t\t\t\"    22  checkcast BX [27]\\n\" + ", "-\t\t\t\"    25  getfield BX.ax : java.lang.Object [40]\\n\" + ", "-\t\t\t\"    28  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [46]\\n\" + ", "-\t\t\t\"    31  getstatic java.lang.System.out : java.io.PrintStream [36]\\n\" + ", "+\t\t\t\"    19  getfield X.t : AX [16]\\n\" + ", "+\t\t\t\"    22  checkcast BX [26]\\n\" + ", "+\t\t\t\"    25  getfield BX.ax : java.lang.Object [37]\\n\" + ", "+\t\t\t\"    28  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [41]\\n\" + ", "+\t\t\t\"    31  getstatic java.lang.System.out : java.io.PrintStream [31]\\n\" + ", "-\t\t\t\"    35  getfield X.t : AX [17]\\n\" + ", "-\t\t\t\"    38  checkcast BX [27]\\n\" + ", "-\t\t\t\"    41  getfield BX.bx : java.lang.Object [49]\\n\" + ", "-\t\t\t\"    44  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [46]\\n\" + ", "+\t\t\t\"    35  getfield X.t : AX [16]\\n\" + ", "+\t\t\t\"    38  checkcast BX [26]\\n\" + ", "+\t\t\t\"    41  getfield BX.bx : java.lang.Object [47]\\n\" + ", "+\t\t\t\"    44  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [41]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88b9fe13399063575ae50a32f89c43fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void test018()", "signatureAfterChange": " public void test018()", "diff": ["-\t\t\"     9  astore [local_5]\\n\" + ", "+\t\t\"     9  astore 5\\n\" + ", "-\t\t\"    12  istore_3 [local_3]\\n\" + ", "-\t\t\"    13  aload [local_5]\\n\" + ", "+\t\t\"    12  istore_3\\n\" + ", "+\t\t\"    13  aload 5\\n\" + ", "-\t\t\"    16  istore [local_4]\\n\" + ", "+\t\t\"    16  istore 4\\n\" + ", "-\t\t\"    21  aload [local_5]\\n\" + ", "-\t\t\"    23  iload_3 [local_3]\\n\" + ", "+\t\t\"    21  aload 5\\n\" + ", "+\t\t\"    23  iload_3\\n\" + ", "-\t\t\"    26  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    26  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    30  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\"    30  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\"    36  iload_3 [local_3]\\n\" + ", "-\t\t\"    37  iload [local_4]\\n\" + ", "+\t\t\"    36  iload_3\\n\" + ", "+\t\t\"    37  iload 4\\n\" + ", "-\t\t\"        [pc: 0, pc: 43] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 8, pc: 43] local: tab index: 1 type: [I\\n\" + ", "-\t\t\"        [pc: 26, pc: 42] local: e index: 2 type: I\\n\";", "+\t\t\"        [pc: 0, pc: 43] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 8, pc: 43] local: tab index: 1 type: int[]\\n\" + ", "+\t\t\"        [pc: 26, pc: 42] local: e index: 2 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9419dee663240d69cb7604bd7606de0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 503, "methodNumberAfterChange": 503, "signatureBeforeChange": " \tpublic void test501()", "signatureAfterChange": " \tpublic void test501()", "diff": ["-\t\t\t\"     8  invokespecial BX.<init>()V [28]\\n\" + ", "-\t\t\t\"    11  invokespecial X.<init>(LAX;)V [30]\\n\" + ", "+\t\t\t\"     8  invokespecial BX() [28]\\n\" + ", "+\t\t\t\"    11  invokespecial X(AX) [30]\\n\" + ", "-\t\t\t\"    15  getstatic java/lang/System.out Ljava/io/PrintStream; [36]\\n\" + ", "+\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [36]\\n\" + ", "-\t\t\t\"    19  getfield X.t LAX; [17]\\n\" + ", "+\t\t\t\"    19  getfield X.t : AX [17]\\n\" + ", "-\t\t\t\"    25  getfield BX.ax Ljava/lang/Object; [40]\\n\" + ", "-\t\t\t\"    28  invokevirtual java/io/PrintStream.print(Ljava/lang/Object;)V [46]\\n\" + ", "-\t\t\t\"    31  getstatic java/lang/System.out Ljava/io/PrintStream; [36]\\n\" + ", "+\t\t\t\"    25  getfield BX.ax : java.lang.Object [40]\\n\" + ", "+\t\t\t\"    28  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [46]\\n\" + ", "+\t\t\t\"    31  getstatic java.lang.System.out : java.io.PrintStream [36]\\n\" + ", "-\t\t\t\"    35  getfield X.t LAX; [17]\\n\" + ", "+\t\t\t\"    35  getfield X.t : AX [17]\\n\" + ", "-\t\t\t\"    41  getfield BX.bx Ljava/lang/Object; [49]\\n\" + ", "-\t\t\t\"    44  invokevirtual java/io/PrintStream.print(Ljava/lang/Object;)V [46]\\n\" + ", "+\t\t\t\"    41  getfield BX.bx : java.lang.Object [49]\\n\" + ", "+\t\t\t\"    44  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [46]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 48] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 15, pc: 48] local: x index: 1 type: LX;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 48] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 15, pc: 48] local: x index: 1 type: X\\n\" + ", "-\t\t\t\"        [pc: 15, pc: 48] local: x index: 1 type: LX<+LBX;>;\\n\";", "+\t\t\t\"        [pc: 15, pc: 48] local: x index: 1 type: X<? extends BX>\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94593fcb4e76370b62ea0a1154044738", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " public void testTypeRefGenericAll01_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAll01_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<\ufffd|Types|\ufffd> & Serializable, V extends A<? super Types>> {@135] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic.comp [\tComparable<\ufffd|String|\ufffd> comp;@239] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<\ufffd|Types|\ufffd, UClass, VClass> {@112] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, \ufffd|UClass|\ufffd, VClass> {@119] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, UClass, \ufffd|VClass|\ufffd> {@127] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric.test [\tTestGeneric<\ufffd|Types|\ufffd> test;@150] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<\ufffd|String|\ufffd> foo(TestGeneric<Types> param1, Comparable<String> param2) {@176] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<\ufffd|Types|\ufffd> param1, Comparable<String> param2) {@200] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<Types> param1, Comparable<\ufffd|String|\ufffd> param2) {@226] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<\ufffd|TestGeneric|\ufffd<Types>> bar() {@275] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<TestGeneric<\ufffd|Types|\ufffd>> bar() {@287] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements Comparable<\ufffd|Types|\ufffd>, Serializable {@373] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.VClass [class VClass extends A<\ufffd|Types|\ufffd> {}@519] EXACT_MATCH\"", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<!|Types|!> & Serializable, V extends A<? super Types>> {@135] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic.comp [\tComparable<!|String|!> comp;@239] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<!|Types|!, UClass, VClass> {@112] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, !|UClass|!, VClass> {@119] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, UClass, !|VClass|!> {@127] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric.test [\tTestGeneric<!|Types|!> test;@150] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<!|String|!> foo(TestGeneric<Types> param1, Comparable<String> param2) {@176] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<!|Types|!> param1, Comparable<String> param2) {@200] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<Types> param1, Comparable<!|String|!> param2) {@226] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<!|TestGeneric|!<Types>> bar() {@275] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<TestGeneric<!|Types|!>> bar() {@287] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements Comparable<!|Types|!>, Serializable {@373] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.VClass [class VClass extends A<!|Types|!> {}@519] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a134f6ce6c586da6e919b26292f9725e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "  public void test075() throws JavaModelException", "signatureAfterChange": "  public void test075() throws JavaModelException", "diff": ["-\t\t\"clone[JAVADOC_METHOD_REF]{{@link #clone() }, Ljava.lang.Object;, ()Ljava.lang.Object;, clone, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"equals[JAVADOC_METHOD_REF]{{@link #equals(Object) }, Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"finalize[JAVADOC_METHOD_REF]{{@link #finalize() }, Ljava.lang.Object;, ()V, finalize, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"getClass[JAVADOC_METHOD_REF]{{@link #getClass() }, Ljava.lang.Object;, ()Ljava.lang.Class;, getClass, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"hashCode[JAVADOC_METHOD_REF]{{@link #hashCode() }, Ljava.lang.Object;, ()I, hashCode, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"notify[JAVADOC_METHOD_REF]{{@link #notify() }, Ljava.lang.Object;, ()V, notify, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"notifyAll[JAVADOC_METHOD_REF]{{@link #notifyAll() }, Ljava.lang.Object;, ()V, notifyAll, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"toString[JAVADOC_METHOD_REF]{{@link #toString() }, Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long, int) }, Ljava.lang.Object;, (JI)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long) }, Ljava.lang.Object;, (J)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait() }, Ljava.lang.Object;, ()V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns(int, float, Class) }, Ljavadoc.text.BasicTestTextIns;, (IFLjava.lang.Class;)V, BasicTestTextIns, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\\n\" + ", "-\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns() }, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\"", "+\t\t\"clone[JAVADOC_METHOD_REF]{{@link #clone()}, Ljava.lang.Object;, ()Ljava.lang.Object;, clone, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"equals[JAVADOC_METHOD_REF]{{@link #equals(Object)}, Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"finalize[JAVADOC_METHOD_REF]{{@link #finalize()}, Ljava.lang.Object;, ()V, finalize, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"getClass[JAVADOC_METHOD_REF]{{@link #getClass()}, Ljava.lang.Object;, ()Ljava.lang.Class;, getClass, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"hashCode[JAVADOC_METHOD_REF]{{@link #hashCode()}, Ljava.lang.Object;, ()I, hashCode, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"notify[JAVADOC_METHOD_REF]{{@link #notify()}, Ljava.lang.Object;, ()V, notify, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"notifyAll[JAVADOC_METHOD_REF]{{@link #notifyAll()}, Ljava.lang.Object;, ()V, notifyAll, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"toString[JAVADOC_METHOD_REF]{{@link #toString()}, Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long, int)}, Ljava.lang.Object;, (JI)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long)}, Ljava.lang.Object;, (J)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait()}, Ljava.lang.Object;, ()V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns(int, float, Class)}, Ljavadoc.text.BasicTestTextIns;, (IFLjava.lang.Class;)V, BasicTestTextIns, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\\n\" + ", "+\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns()}, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5134c377ba3d423d982942724c416ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "  public void test076() throws JavaModelException", "signatureAfterChange": "  public void test076() throws JavaModelException", "diff": ["-\t\t\"clone[JAVADOC_METHOD_REF]{{@link #clone() }, Ljava.lang.Object;, ()Ljava.lang.Object;, clone, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"equals[JAVADOC_METHOD_REF]{{@link #equals(Object) }, Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"finalize[JAVADOC_METHOD_REF]{{@link #finalize() }, Ljava.lang.Object;, ()V, finalize, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"getClass[JAVADOC_METHOD_REF]{{@link #getClass() }, Ljava.lang.Object;, ()Ljava.lang.Class;, getClass, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"hashCode[JAVADOC_METHOD_REF]{{@link #hashCode() }, Ljava.lang.Object;, ()I, hashCode, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"notify[JAVADOC_METHOD_REF]{{@link #notify() }, Ljava.lang.Object;, ()V, notify, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"notifyAll[JAVADOC_METHOD_REF]{{@link #notifyAll() }, Ljava.lang.Object;, ()V, notifyAll, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"toString[JAVADOC_METHOD_REF]{{@link #toString() }, Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long, int) }, Ljava.lang.Object;, (JI)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long) }, Ljava.lang.Object;, (J)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait() }, Ljava.lang.Object;, ()V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns(int, float, Class) }, Ljavadoc.text.BasicTestTextIns;, (IFLjava.lang.Class;)V, BasicTestTextIns, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\\n\" + ", "-\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns() }, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\"", "+\t\t\"clone[JAVADOC_METHOD_REF]{{@link #clone()}, Ljava.lang.Object;, ()Ljava.lang.Object;, clone, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"equals[JAVADOC_METHOD_REF]{{@link #equals(Object)}, Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"finalize[JAVADOC_METHOD_REF]{{@link #finalize()}, Ljava.lang.Object;, ()V, finalize, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"getClass[JAVADOC_METHOD_REF]{{@link #getClass()}, Ljava.lang.Object;, ()Ljava.lang.Class;, getClass, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"hashCode[JAVADOC_METHOD_REF]{{@link #hashCode()}, Ljava.lang.Object;, ()I, hashCode, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"notify[JAVADOC_METHOD_REF]{{@link #notify()}, Ljava.lang.Object;, ()V, notify, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"notifyAll[JAVADOC_METHOD_REF]{{@link #notifyAll()}, Ljava.lang.Object;, ()V, notifyAll, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"toString[JAVADOC_METHOD_REF]{{@link #toString()}, Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long, int)}, Ljava.lang.Object;, (JI)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long)}, Ljava.lang.Object;, (J)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait()}, Ljava.lang.Object;, ()V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns(int, float, Class)}, Ljavadoc.text.BasicTestTextIns;, (IFLjava.lang.Class;)V, BasicTestTextIns, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\\n\" + ", "+\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns()}, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7e6d70ce282e86a6bb9a330108ee142", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void test016()", "signatureAfterChange": " public void test016()", "diff": ["-\t\t\"     1  newarray #10 int\\n\" + ", "+\t\t\"     1  newarray int [10]\\n\" + ", "-\t\t\"     7  astore_1\\n\" + ", "-\t\t\"     8  aload_1\\n\" + ", "-\t\t\"     9  astore 4\\n\" + ", "+\t\t\"     7  astore_1 [tab]\\n\" + ", "+\t\t\"     8  aload_1 [tab]\\n\" + ", "+\t\t\"     9  astore [local_4]\\n\" + ", "-\t\t\"    12  istore_2\\n\" + ", "-\t\t\"    13  aload 4\\n\" + ", "+\t\t\"    12  istore_2 [local_2]\\n\" + ", "+\t\t\"    13  aload [local_4]\\n\" + ", "-\t\t\"    16  istore_3\\n\" + ", "+\t\t\"    16  istore_3 [local_3]\\n\" + ", "-\t\t\"    20  iinc 2 1\\n\" + ", "-\t\t\"    23  iload_2\\n\" + ", "-\t\t\"    24  iload_3\\n\" + ", "+\t\t\"    20  iinc 2 1 [local_2]\\n\" + ", "+\t\t\"    23  iload_2 [local_2]\\n\" + ", "+\t\t\"    24  iload_3 [local_3]\\n\" + ", "-\t\t\"    28  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    31  ldc #23 <String \\\"SUCCESS\\\">\\n\" + ", "-\t\t\"    33  invokevirtual #29 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    28  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    31  ldc <String \\\"SUCCESS\\\"> [23]\\n\" + ", "+\t\t\"    33  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [29]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9c903903e8e1075d05a6b5d1b240ebe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "4043b8a88c35a2c1612858cff67743727f25247b", "commitAfterChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic void testSingleWildcardUnboundStringPattern05() throws CoreException", "signatureAfterChange": " \tpublic void testSingleWildcardUnboundStringPattern05() throws CoreException", "diff": ["-\t// TODO [search] try to have a better match selection", "-\t\tIJavaSearchScope scope = getJavaSearchScope15(\"g1.t\", true /* add all subpackages */);", "-\t\tsearch(\"Generic<?>.MemberGeneric\", TYPE, REFERENCES, scope, resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric<Object>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric<Exception>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [MemberGeneric<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric<? super RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric<? extends Throwable>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric<Object>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric<Exception>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [MemberGeneric<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric<? super RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric<? extends Throwable>] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [Generic<Object>.MemberGeneric<Object>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic<Exception>.MemberGeneric<Exception>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>.MemberGeneric<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [Generic<Object>.MemberGeneric<Object>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [Generic<Exception>.MemberGeneric<Exception>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [Generic<?>.MemberGeneric<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] EXACT_MATCH\","]}], "num": 61099}
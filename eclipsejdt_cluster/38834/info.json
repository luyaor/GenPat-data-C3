{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f61e6ad67eba6cd69fd9cd013a1bba2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "243c412e6850bdc0ebfdc19ec50ca613", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceField.java", "commitBeforeChange": "d3438591c6303b10ffdfe04935a028a1a295bc18", "commitAfterChange": "7acc82a1aa09d7f270cc2a9bb108a01a76d98132", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object getConstant() throws JavaModelException", "signatureAfterChange": " public Object getConstant() throws JavaModelException", "diff": ["-\tif (this.constant != null) {", "-\t\treturn this.constant;", "-\t}", "+\tObject constant = null;\t", "-\t\tthis.constant = new Integer(constantSource);", "+\t\tconstant = new Integer(constantSource);", "-\t\tthis.constant = new Short(constantSource);", "+\t\tconstant = new Short(constantSource);", "-\t\tthis.constant = new Byte(constantSource);", "+\t\tconstant = new Byte(constantSource);", "-\t\tthis.constant = new Boolean(constantSource);", "+\t\tconstant = new Boolean(constantSource);", "-\t\tthis.constant = new Character(constantSource.charAt(0));", "+\t\tconstant = new Character(constantSource.charAt(0));", "-\t\tthis.constant = new Double(constantSource);", "+\t\tconstant = new Double(constantSource);", "-\t\tthis.constant = new Float(constantSource);", "+\t\tconstant = new Float(constantSource);", "-\t\tthis.constant = new Long(constantSource);", "+\t\tconstant = new Long(constantSource);", "-\t\tthis.constant = constantSource;", "+\t\tconstant = constantSource;", "-\treturn this.constant;", "+\treturn constant;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1eb663ee0e1b1148b750126a7f1bf33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatterCommentParser.java", "commitBeforeChange": "0a52fc66fb4db2fd9981d577d974e91228093601", "commitAfterChange": "76d395ddd90431ef7cb4486078cb51e978a5ad63", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " private int getHtmlTagIndex(char[] htmlTag)", "signatureAfterChange": " private int getHtmlTagIndex(char[] htmlTag)", "diff": ["-\t\tfor (int i=0, max=IJavaDocTagConstants.JAVADOC_SPECIAL_TAGS.length; i<max; i++) {", "-\t\t\tchar[] tag = IJavaDocTagConstants.JAVADOC_SPECIAL_TAGS[i];", "+\t\tfor (int i=0, max=JAVADOC_SPECIAL_TAGS.length; i<max; i++) {", "+\t\t\tchar[] tag = JAVADOC_SPECIAL_TAGS[i];", "-\t\t\tchar[] tag = IJavaDocTagConstants.JAVADOC_CODE_TAGS[i];", "+\t\t\tchar[] tag = JAVADOC_CODE_TAGS[i];", "-\t\tfor (int i=0, max=IJavaDocTagConstants.JAVADOC_BREAK_TAGS.length; i<max; i++) {", "-\t\t\tchar[] tag = IJavaDocTagConstants.JAVADOC_BREAK_TAGS[i];", "+\t\tfor (int i=0, max=JAVADOC_BREAK_TAGS.length; i<max; i++) {", "+\t\t\tchar[] tag = JAVADOC_BREAK_TAGS[i];", "-\t\tfor (int i=0, max=IJavaDocTagConstants.JAVADOC_IMMUTABLE_TAGS.length; i<max; i++) {", "-\t\t\tchar[] tag = IJavaDocTagConstants.JAVADOC_IMMUTABLE_TAGS[i];", "+\t\tfor (int i=0, max=JAVADOC_IMMUTABLE_TAGS.length; i<max; i++) {", "+\t\t\tchar[] tag = JAVADOC_IMMUTABLE_TAGS[i];", "-\t\tfor (int i=0, max=IJavaDocTagConstants.JAVADOC_SEPARATOR_TAGS.length; i<max; i++) {", "-\t\t\tchar[] tag = IJavaDocTagConstants.JAVADOC_SEPARATOR_TAGS[i];", "+\t\tfor (int i=0, max=JAVADOC_SEPARATOR_TAGS.length; i<max; i++) {", "+\t\t\tchar[] tag = JAVADOC_SEPARATOR_TAGS[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa9c0c78c96d4df122833e5eb923ef4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "52b692ed21634a88100b21eba7894614726adbcf", "commitAfterChange": "0d07e8a93b23da2b01f8b175a71d349d77236596", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\tthis.codegenBinding = this.binding.original();", "+\tMethodBinding codegenBinding = this.binding.original();", "-\t\tif (currentScope.enclosingSourceType() != this.codegenBinding.declaringClass){", "+\t\tif (currentScope.enclosingSourceType() != codegenBinding.declaringClass){", "-\t\t\tthis.syntheticAccessor = ((SourceTypeBinding)this.codegenBinding.declaringClass).addSyntheticMethod(this.codegenBinding, isSuperAccess());", "-\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);", "+\t\t\tthis.syntheticAccessor = ((SourceTypeBinding)codegenBinding.declaringClass).addSyntheticMethod(codegenBinding, isSuperAccess());", "+\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(codegenBinding, this);", "-\t\tthis.syntheticAccessor = destinationType.addSyntheticMethod(this.codegenBinding, isSuperAccess());", "-\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);", "+\t\tthis.syntheticAccessor = destinationType.addSyntheticMethod(codegenBinding, isSuperAccess());", "+\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(codegenBinding, this);", "-\t\t\t\t&& this.codegenBinding.declaringClass.getPackage()", "+\t\t\t\t&& codegenBinding.declaringClass.getPackage()", "-\t\t\tthis.syntheticAccessor = currentCompatibleType.addSyntheticMethod(this.codegenBinding, isSuperAccess());", "-\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);", "+\t\t\tthis.syntheticAccessor = currentCompatibleType.addSyntheticMethod(codegenBinding, isSuperAccess());", "+\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(codegenBinding, this);"]}], "num": 38834}
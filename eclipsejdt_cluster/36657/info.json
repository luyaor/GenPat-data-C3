{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "14aa9cd7fa6737480d8cd8b4396fb37c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b462ae7a905eed164545903ce84f9d78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 179, "methodNumberAfterChange": 250, "signatureBeforeChange": "\t \t \tpublic void testInitializer()", "signatureAfterChange": "\t \t \tpublic void testInitializer()", "diff": ["-\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t} else {", "+\t\t\tassertTrue(x.modifiers().size() == 0);", "+\t\t}", "+\t\ttModifiers(x);", "-\t\tint legal = Modifier.STATIC;", "-\t\tpreviousCount = ast.modificationCount();", "-\t\tx.setModifiers(legal);", "-\t\tassertTrue(ast.modificationCount() > previousCount);", "-\t\tassertTrue(x.getModifiers() == legal);", "-\t\t", "-\t\tpreviousCount = ast.modificationCount();", "-\t\tx.setModifiers(Modifier.NONE);", "-\t\tassertTrue(ast.modificationCount() > previousCount);", "-\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tint legal = Modifier.STATIC;", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setModifiers(legal);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.getModifiers() == legal);", "+\t\t\t", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setModifiers(Modifier.NONE);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e39afd87d0998001f73084387788179e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "6c050fdd50da181a73c24a3d84f6766ee118b95b", "commitAfterChange": "f13a5d135f0d6d82ec59c09667ba7900fd57b604", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\tleft.checkNPE(currentScope, flowContext, flowInfo, false /* skip String */);", "-\tflowInfo = left.analyseCode(currentScope, flowContext, flowInfo).", "-\t\tunconditionalInits();", "-\tright.checkNPE(currentScope, flowContext, flowInfo, false /* skip String */);", "-\treturn right.analyseCode(currentScope, flowContext, flowInfo).", "-\t\tunconditionalInits();", "+\tif (this.resolvedType.id == T_JavaLangString) {", "+\t\treturn right.analyseCode(currentScope, flowContext, ", "+\t\t\t\tleft.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits()).", "+\t\t\tunconditionalInits();", "+\t}", "+\telse {", "+\t\tleft.checkNPE(currentScope, flowContext, flowInfo);", "+\t\tflowInfo = left.analyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tunconditionalInits();", "+\t\tright.checkNPE(currentScope, flowContext, flowInfo);", "+\t\treturn right.analyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tunconditionalInits();", "+\t}"]}], "num": 36657}
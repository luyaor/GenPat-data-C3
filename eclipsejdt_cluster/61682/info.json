{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30adcd291bdba753a7f493efaba81994", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3015b6ae732463ccf3a4c71ff52e7519", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "6498f02423137f9292b34e601b633d22e6c4b5d9", "commitAfterChange": "ded354ea9af9c645b73bb24272f1a729a3f65c1d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void analyseCode( \t\tClassScope classScope, \t\tInitializationFlowContext initializationContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void analyseCode( \t\tClassScope classScope, \t\tInitializationFlowContext initializationContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tif (ignoreFurtherInvestigation)", "+\t\tif (this.ignoreFurtherInvestigation)", "-\t\t\tif (binding == null)", "+\t\t\tif (this.binding == null)", "-\t\t\t\t\tscope.problemReporter().unusedPrivateMethod(this);", "+\t\t\t\t\tthis.scope.problemReporter().unusedPrivateMethod(this);", "-\t\t\tif (binding.declaringClass.isEnum() && (this.selector == TypeConstants.VALUES || this.selector == TypeConstants.VALUEOF))", "+\t\t\tif (this.binding.declaringClass.isEnum() && (this.selector == TypeConstants.VALUES || this.selector == TypeConstants.VALUEOF))", "-\t\t\tif (binding.isAbstract() || binding.isNative())", "+\t\t\tif (this.binding.isAbstract() || this.binding.isNative())", "-\t\t\t\t\tbinding.thrownExceptions,", "-\t\t\t\t\tscope,", "+\t\t\t\t\tthis.binding.thrownExceptions,", "+\t\t\t\t\tthis.scope,", "-\t\t\tif (statements != null) {", "+\t\t\tif (this.statements != null) {", "-\t\t\t\tfor (int i = 0, count = statements.length; i < count; i++) {", "-\t\t\t\t\tStatement stat = statements[i];", "-\t\t\t\t\tif (!stat.complainIfUnreachable(flowInfo, scope, didAlreadyComplain)) {", "-\t\t\t\t\t\tflowInfo = stat.analyseCode(scope, methodContext, flowInfo);", "+\t\t\t\tfor (int i = 0, count = this.statements.length; i < count; i++) {", "+\t\t\t\t\tStatement stat = this.statements[i];", "+\t\t\t\t\tif (!stat.complainIfUnreachable(flowInfo, this.scope, didAlreadyComplain)) {", "+\t\t\t\t\t\tflowInfo = stat.analyseCode(this.scope, methodContext, flowInfo);", "-\t\t\tTypeBinding returnTypeBinding = binding.returnType;", "+\t\t\tTypeBinding returnTypeBinding = this.binding.returnType;", "-\t\t\t\t\tscope.problemReporter().shouldReturn(returnTypeBinding, this);", "+\t\t\t\t\tthis.scope.problemReporter().shouldReturn(returnTypeBinding, this);", "-\t\t\tscope.checkUnusedParameters(binding);", "+\t\t\tthis.scope.checkUnusedParameters(this.binding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4e96b3bf82968761c67b66b3da8af94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate void generateCode(ClassFile classFile)", "signatureAfterChange": "  \tprivate void generateCode(ClassFile classFile)", "diff": ["-\t\tclassFile.generateMethodInfoHeader(binding);", "+\t\tclassFile.generateMethodInfoHeader(this.binding);", "-\t\tint attributeNumber = classFile.generateMethodInfoAttribute(binding);", "-\t\tif ((!binding.isNative()) && (!binding.isAbstract())) {", "+\t\tint attributeNumber = classFile.generateMethodInfoAttribute(this.binding);", "+\t\tif ((!this.binding.isNative()) && (!this.binding.isAbstract())) {", "-\t\t\tthis.scope.computeLocalVariablePositions(binding.isStatic() ? 0 : 1, codeStream);", "+\t\t\tthis.scope.computeLocalVariablePositions(this.binding.isStatic() ? 0 : 1, codeStream);", "-\t\t\tif (arguments != null) {", "-\t\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "+\t\t\tif (this.arguments != null) {", "+\t\t\t\tfor (int i = 0, max = this.arguments.length; i < max; i++) {", "-\t\t\t\t\tcodeStream.addVisibleLocalVariable(argBinding = arguments[i].binding);", "+\t\t\t\t\tcodeStream.addVisibleLocalVariable(argBinding = this.arguments[i].binding);", "-\t\t\tif (statements != null) {", "-\t\t\t\tfor (int i = 0, max = statements.length; i < max; i++)", "-\t\t\t\t\tstatements[i].generateCode(scope, codeStream);", "+\t\t\tif (this.statements != null) {", "+\t\t\t\tfor (int i = 0, max = this.statements.length; i < max; i++)", "+\t\t\t\t\tthis.statements[i].generateCode(this.scope, codeStream);", "-\t\t\tcodeStream.exitUserScope(scope);", "+\t\t\tcodeStream.exitUserScope(this.scope);", "-\t\tif (ignoreFurtherInvestigation) {", "-\t\t\tthrow new AbortMethod(scope.referenceCompilationUnit().compilationResult);", "+\t\tif (this.ignoreFurtherInvestigation) {", "+\t\t\tthrow new AbortMethod(this.scope.referenceCompilationUnit().compilationResult);"]}], "num": 61682}
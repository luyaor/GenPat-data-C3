{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd887d9cf071aad0936733a5765d997c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08a7a095e7e42f60ca8952906841d5ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "a53e0f6f60b988e927d553381431ae6a40286252", "commitAfterChange": "2d9b05bb71b127652760933dafce873a5ec0cb28", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "diff": ["-\tMethodBinding first = methods[0];", "-\tint index = length;", "-\twhile (--index > 0 && areReturnTypesEqual(first, methods[index])){/*empty*/}", "-\tif (index > 0) {  // All inherited methods do NOT have the same vmSignature", "-\t\tif (this.type.isInterface())", "-\t\t\tfor (int i = length; --i >= 0;)", "-\t\t\t\tif (methods[i].declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\t\t\t\treturn; // do not complain since the super interface already got blamed", "-\t\tproblemReporter().inheritedMethodsHaveIncompatibleReturnTypes(this.type, methods, length);", "+\tif (!checkInheritedReturnTypes(methods, length))", "-\t}", "-\tindex = 0;", "+\tint index = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6012e88a126093e2527e677af4abbaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "fa7d50ac51966a79c3d2cf5f38e668c0cb98a72e", "commitAfterChange": "6e0e34ccee3902df04c0b7e36099dc48350ccb65", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t \tprivate void rootNodeToCompilationUnit(AST ast, CompilationUnit compilationUnit, ASTNode node, RecordedParsingInformation recordedParsingInformation, RecoveryScannerData data)", "signatureAfterChange": " \t \tprivate void rootNodeToCompilationUnit(AST ast, CompilationUnit compilationUnit, ASTNode node, RecordedParsingInformation recordedParsingInformation, RecoveryScannerData data)", "diff": ["-\t\t\t\t\t\tfor (int i = 0, max = block.statements().size(); i < max; i++) {", "-\t\t\t\t\t\t\tpropagateErrors((ASTNode) block.statements().get(i), problems, data);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tpropagateErrors(block, problems, data);", "-\t\t\t\t\t\tfor (int i = 0, max = typeDeclaration.bodyDeclarations().size(); i < max; i++) {", "-\t\t\t\t\t\t\tpropagateErrors((ASTNode) typeDeclaration.bodyDeclarations().get(i), problems, data);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tpropagateErrors(typeDeclaration, problems, data);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7c57a94fb5219596a79754cc9f600f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "3a81160be71000bf58205b8c507f9771dc3c2db8", "commitAfterChange": "c62d7e2dfcaccc6ada032dc74b101555c9e56495", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " public static final boolean prefixEquals( \tchar[] prefix, \tchar[] name, \tboolean isCaseSensitive)", "signatureAfterChange": " public static final boolean prefixEquals( \tchar[] prefix, \tchar[] name, \tboolean isCaseSensitive)", "diff": ["+\treturn prefixEquals(prefix, name, isCaseSensitive, 0);", "+}", "-\tif (name.length < max)", "-\t\tfor (int i = max;", "-\t\t\t--i >= 0;", "-\t\t\t) // assumes the prefix is not larger than the name", "-\t\t\tif (prefix[i] != name[i])", "-\tfor (int i = max;", "-\t\t--i >= 0;", "-\t\t) // assumes the prefix is not larger than the name", "-\t\t\t!= ScannerHelper.toLowerCase(name[i]))"]}], "num": 67728}
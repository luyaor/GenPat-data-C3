{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b6dd156975cfbd17c73565d8bcbb707", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "423afee563c9a7b8ac681ccb806da02b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java", "commitBeforeChange": "442502365ca87bb4850988c7cbff70c6c7204090", "commitAfterChange": "e2f40216eda9970777e0041ec245c6f388ea953e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": " public static Test suite()", "diff": ["-\t", "-\tif (false) {", "-\t\tString className = JavaProjectTests.class.getName();", "-\t\tSystem.err.println(\"WARNING: only a subset of \"+className+\" tests will be run...\");", "-\t\tTestSuite suite = new Suite(className);", "-\t\tsuite.addTest(new JavaProjectTests(\"testAddNonJavaResourcePackageFragmentRoot\"));", "-\t\treturn suite;", "-\t}", "-\tTestSuite suite = new Suite(JavaProjectTests.class.getName());", "-\tsuite.addTest(new JavaProjectTests(\"testPackageFragmentRootRawEntry\"));", "-\tsuite.addTest(new JavaProjectTests(\"testPackageFragmentRootRawEntryWhenDuplicate\"));", "-\tsuite.addTest(new JavaProjectTests(\"testProjectGetChildren\"));", "-\tsuite.addTest(new JavaProjectTests(\"testProjectGetPackageFragments\"));", "-\tsuite.addTest(new JavaProjectTests(\"testRootGetPackageFragments\"));", "-\tsuite.addTest(new JavaProjectTests(\"testRootGetPackageFragments2\"));", "-\tsuite.addTest(new JavaProjectTests(\"testRootGetPackageFragments3\"));", "-\tsuite.addTest(new JavaProjectTests(\"testInternalArchiveCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testExternalArchiveCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testProjectCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testPackageFragmentCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testPackageFragmentHasSubpackages\"));", "-\tsuite.addTest(new JavaProjectTests(\"testIsDefaultPackage\"));", "-\tsuite.addTest(new JavaProjectTests(\"testPackageFragmentRootCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testJarPackageFragmentCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testCompilationUnitCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testClassFileCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testArchiveClassFileCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testBinaryTypeCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testSourceMethodCorrespondingResource\"));", "-\tsuite.addTest(new JavaProjectTests(\"testOutputLocationNotAddedAsPackageFragment\"));", "-\tsuite.addTest(new JavaProjectTests(\"testOutputLocationNestedInRoot\"));", "-\tsuite.addTest(new JavaProjectTests(\"testChangeOutputLocation\"));", "-\tsuite.addTest(new JavaProjectTests(\"testFindElementPackage\"));", "-\tsuite.addTest(new JavaProjectTests(\"testFindElementClassFile\"));", "-\tsuite.addTest(new JavaProjectTests(\"testFindElementCompilationUnit\"));", "-\tsuite.addTest(new JavaProjectTests(\"testFindElementCompilationUnitDefaultPackage\"));", "-\tsuite.addTest(new JavaProjectTests(\"testFindElementInvalidPath\"));", "-\tsuite.addTest(new JavaProjectTests(\"testFindElementPrereqSimpleProject\"));", "-\tsuite.addTest(new JavaProjectTests(\"testProjectClose\"));", "-\tsuite.addTest(new JavaProjectTests(\"testPackageFragmentRenameAndCreate\"));", "-\tsuite.addTest(new JavaProjectTests(\"testFolderWithDotName\"));", "-\tsuite.addTest(new JavaProjectTests(\"testPackageFragmentNonJavaResources\"));", "-\tsuite.addTest(new JavaProjectTests(\"testPackageFragmentPackageInfoClass\"));", "-\tsuite.addTest(new JavaProjectTests(\"testPackageFragmentRootNonJavaResources\"));", "-\tsuite.addTest(new JavaProjectTests(\"testAddNonJavaResourcePackageFragmentRoot\"));", "-\tsuite.addTest(new JavaProjectTests(\"testFindPackageFragmentRootFromClasspathEntry\"));", "-\tsuite.addTest(new JavaProjectTests(\"testGetClasspathOnClosedProject\"));", "-\tsuite.addTest(new JavaProjectTests(\"testGetRequiredProjectNames\"));", "-\tsuite.addTest(new JavaProjectTests(\"testGetNonJavaResources1\"));", "-\tsuite.addTest(new JavaProjectTests(\"testGetNonJavaResources2\"));", "-\tsuite.addTest(new JavaProjectTests(\"testGetNonJavaResources3\"));", "-\tsuite.addTest(new JavaProjectTests(\"testGetNonJavaResources4\"));", "-\tsuite.addTest(new JavaProjectTests(\"testSourceFolderWithJarName\"));", "-\tsuite.addTest(new JavaProjectTests(\"testJdkLevelRoot\"));", "-\t", "-\t// TODO (jerome) reenable when https://bugs.eclipse.org/bugs/show_bug.cgi?id=71460 is fixed ", "-\t//suite.addTest(new JavaProjectTests(\"testExtraJavaLikeExtension1\"));", "-\t//suite.addTest(new JavaProjectTests(\"testExtraJavaLikeExtension2\"));", "-\t", "+\tTestSuite suite = (TestSuite) buildModelTestSuite(JavaProjectTests.class);", "+", "-\tsuite.addTest(new JavaProjectTests(\"testDeletePackageWithAutobuild\"));", "+\tif (suite.testCount() > 1) // if not running only 1 test", "+\t\tsuite.addTest(new JavaProjectTests(\"lastlyTestDeletePackageWithAutobuild\"));", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7621be5223884115c6efb675f35c3d33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "f174c5e3ec66ea2a46810b190cc3e9d57c0432d4", "commitAfterChange": "8bbacffbe712e7ac5a5d22a44809b44ff8a5e616", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static Test suite()", "signatureAfterChange": " \tpublic static Test suite()", "diff": ["-\t\t// Tests on type declarations", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocTypeDeclaration\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocTypeDeclarationWithJavadoc\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocTypeStringDeclaration\"));", "-\t\t", "-\t\t// Tests on field declarations", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocFieldDeclaration\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocFieldDeclarationWithJavadoc\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocFieldStringDeclaration\"));", "-", "-\t\t// Tests on method declarations", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocMethodDeclaration\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocMethodArgDeclaration\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocMethodDeclarationWithJavadoc\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocMethodArgDeclarationWithJavadoc\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocMethodStringDeclaration\"));", "-", "-\t\t// Tests on type references", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocTypeReference\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocTypeReferenceWithJavadoc\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocTypeStringReference\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocTypeStringReferenceWithJavadoc\"));", "-", "-\t\t// Tests on field references", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocFieldReference\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocFieldReferenceWithJavadoc\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocFieldStringReference\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocFieldStringReferenceWithJavadoc\"));", "-", "-\t\t// Tests on method references", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocMethodReference\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocMethodArgReference\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocMethodReferenceWithJavadoc\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocMethodArgReferenceWithJavadoc\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocMethodStringReference\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocMethodStringReferenceWithJavadoc\"));", "-", "-\t\t// Tests on constructor references", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocConstructorReference\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocConstructorArgReference\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocConstructorReferenceWithJavadoc\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocConstructorArgReferenceWithJavadoc\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocConstructorStringReference\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testJavadocConstructorStringReferenceWithJavadoc\"));", "-", "-\t\t// Tests on bugs", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testBug47909\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testBug47968type\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testBug47968field\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testBug47968method\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testBug47968constructor\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testBug47209type\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testBug47209field\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testBug47209method\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testBug47209constructor\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testBug49994\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testBug49994field\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testBug49994method\"));", "-\t\tsuite.addTest(new JavaSearchJavadocTests(\"testBug49994constructor\"));", "+\t\tif (DOC_COMMENT_SUPPORT == null) {", "+\t\t\t// Default is to test both Doc Comment Support ON and OFF", "+\t\t\tbuildSuite(suite, JavaCore.ENABLED);", "+\t\t\tbuildSuite(suite, JavaCore.DISABLED);", "+\t\t} else {", "+\t\t\t// Test specified with Doc Comment Support", "+\t\t\tString support = DOC_COMMENT_SUPPORT==null ? JavaCore.DISABLED : (DOC_COMMENT_SUPPORT.equals(JavaCore.DISABLED)?JavaCore.DISABLED:JavaCore.ENABLED);", "+\t\t\tbuildSuite(suite, support);", "+\t\t}"]}], "num": 44041}
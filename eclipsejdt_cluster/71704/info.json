{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bdf03d4160074b64c2b7485d8ab06759", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dba94a1f7cfe44105d1faf7551fde9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5046f0da42323773845d7a3edf39df0b8c6a1944", "commitAfterChange": "80f69cca108e407e297e62382ba04bd29eb1703d", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 135, "signatureBeforeChange": " \tpublic boolean writeFileEntries(IClasspathEntry[] newClasspath, IPath newOutputLocation) throws JavaModelException", "signatureAfterChange": " \tpublic boolean writeFileEntries(IClasspathEntry[] newClasspath, IClasspathEntry[] referencedEntries, IPath newOutputLocation) throws JavaModelException", "diff": ["-\tpublic boolean writeFileEntries(IClasspathEntry[] newClasspath, IPath newOutputLocation) throws JavaModelException {", "+\tpublic boolean writeFileEntries(IClasspathEntry[] newClasspath, IClasspathEntry[] referencedEntries, IPath newOutputLocation) throws JavaModelException {", "-\t\tIClasspathEntry[] fileEntries = readFileEntries(unknownElements);", "-\t\tif (fileEntries != JavaProject.INVALID_CLASSPATH && areClasspathsEqual(newClasspath, newOutputLocation, fileEntries)) {", "+\t\tIClasspathEntry[][] fileEntries = readFileEntries(unknownElements);", "+\t\tif (fileEntries[0] != JavaProject.INVALID_CLASSPATH && ", "+\t\t\t\tareClasspathsEqual(newClasspath, newOutputLocation, fileEntries[0])", "+\t\t\t\t&& (referencedEntries == null || areClasspathsEqual(referencedEntries, fileEntries[1])) ) {", "-\t\t\tsetSharedProperty(JavaProject.CLASSPATH_FILENAME, encodeClasspath(newClasspath, newOutputLocation, true, unknownElements));", "+\t\t\tsetSharedProperty(JavaProject.CLASSPATH_FILENAME, encodeClasspath(newClasspath, referencedEntries, newOutputLocation, true, unknownElements));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc476f49375e6caf5081e9c971d53b22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "653b549b2ec915800fe34bbb2ab9809b71ca66a5", "commitAfterChange": "2caa59d033a9b6c8ec71aab586472ad7fe749893", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " public ArrayBinding createArrayType(TypeBinding leafComponentType, int dimensionCount)", "signatureAfterChange": " public ArrayBinding createArrayType(TypeBinding leafComponentType, int dimensionCount, long[] nullTagBitsPerDimension)", "diff": ["+}", "+public ArrayBinding createArrayType(TypeBinding leafComponentType, int dimensionCount, long[] nullTagBitsPerDimension) {", "-\t\t\treturn arrayBindings[index] = new ArrayBinding(leafComponentType, dimensionCount, this);", "-\t\tif (currentBinding.leafComponentType == leafComponentType)", "+\t\t\treturn arrayBindings[index] = new ArrayBinding(leafComponentType, dimensionCount, this, nullTagBitsPerDimension);", "+\t\tif (currentBinding.leafComponentType == leafComponentType", "+\t\t\t\t&& (nullTagBitsPerDimension == null || Arrays.equals(currentBinding.nullTagBitsPerDimension, nullTagBitsPerDimension)))", "-\treturn arrayBindings[length] = new ArrayBinding(leafComponentType, dimensionCount, this);", "+\treturn arrayBindings[length] = new ArrayBinding(leafComponentType, dimensionCount, this, nullTagBitsPerDimension);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0524e0a89a903613bcd6d7368b24d31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMethodElementInfo.java", "commitBeforeChange": "98ffe5c3e0ee98aced84143e819730763e74b3e9", "commitAfterChange": "1f2394e7d3e26360ba7160bfc3ad58fd843c4a63", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public char[] getDefaultValueSource()", "signatureAfterChange": " public char[] getDefaultValueSource(char[] cuSource)", "diff": ["-public char[] getDefaultValueSource() {", "-\tif (this.defaultAnnotationValue == CharOperation.NO_CHAR) ", "+public char[] getDefaultValueSource(char[] cuSource) {", "+\tif (this.defaultValueStart == 0 && this.defaultValueEnd == 0) ", "-\treturn this.defaultAnnotationValue;", "+\treturn CharOperation.subarray(cuSource, this.defaultValueStart, this.defaultValueEnd+1);"]}], "num": 71704}
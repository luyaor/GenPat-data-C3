{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b76cb6fa75dba46276b17236b5515f12", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d480cc32f5eccc15dc1ecb662e4f12c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "344f41e4f3a0936f3d1a8dc22956abcf4bca93c4", "commitAfterChange": "2749db90d9b59a49ba8d955d8eddabda9be1d8ee", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding[] descriptorParameters = this.descriptor != null && this.descriptor.parameters != null && this.descriptor.parameters.length > 0 ? ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew TypeBinding[this.descriptor.parameters.length] : Binding.NO_PARAMETERS;", "-\t\tfor (int i = 0, length = descriptorParameters.length; i < length; i++)", "-\t\t\tdescriptorParameters[i] = this.descriptor.parameters[i].capture(scope, this.sourceEnd);", "+\t\tTypeBinding[] descriptorParameters = descriptorParametersAsArgumentExpressions();", "+\t\t", "+\t\tthis.haveReceiver = true;", "+\t\tif (this.lhs instanceof NameReference) {", "+\t\t\tif ((this.lhs.bits & ASTNode.RestrictiveFlagMASK) == Binding.TYPE) {", "+\t\t\t\tthis.haveReceiver = false;", "+\t\t\t}", "+\t\t} else if (this.lhs instanceof TypeReference) {", "+\t\t\tthis.haveReceiver = false;", "+\t\t}", "+\t\t", "+\t\t", "-\t\t", "-\t\tthis.haveReceiver = true;", "-\t\tif (this.lhs instanceof NameReference) {", "-\t\t\tif ((this.lhs.bits & ASTNode.RestrictiveFlagMASK) == Binding.TYPE) {", "-\t\t\t\tthis.haveReceiver = false;", "-\t\t\t}", "-\t\t} else if (this.lhs instanceof TypeReference) {", "-\t\t\tthis.haveReceiver = false;", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76e4088bb81fbeb0230241cde9ae5cf7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "6c7de59cc4e8b7d3ff952cb73eea6ba69e83b190", "commitAfterChange": "8eda346eb2b6784c607071f6828a328415623f59", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic boolean visit(IntersectionCastTypeReference intersectionCastTypeReference, BlockScope scope)", "signatureAfterChange": " public TypeReference[] getTypeReferences()", "diff": ["-\tpublic boolean visit(IntersectionCastTypeReference intersectionCastTypeReference, BlockScope scope) {", "-\t\tint length = intersectionCastTypeReference.typeReferences == null ? 0 : intersectionCastTypeReference.typeReferences.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tthis.info2 = i;", "-\t\t\tintersectionCastTypeReference.typeReferences[i].traverse(this, scope);", "-\t\t}", "-\t\treturn false; // iteration was done here, do not repeat in the caller", "-\t}", "+public TypeReference[] getTypeReferences() {", "+\treturn new TypeReference [] { this };", "+}"]}], "num": 62534}
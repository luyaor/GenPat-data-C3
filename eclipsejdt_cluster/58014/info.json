{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5e07016bc67cb9b8bc1584eb7cad9a3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b8a10f79db61295b40343be6fbb9dd8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 306, "methodNumberAfterChange": 295, "signatureBeforeChange": " protected void consumeReferenceExpressionGenericTypeForm()", "signatureAfterChange": " protected void consumeReferenceExpressionGenericTypeForm()", "diff": ["-\t// ReferenceExpression ::= Name PushModifiers BeginTypeArguments ReferenceExpressionTypeArgumentsAndTrunk '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t// ReferenceExpression ::= Modifiers Name PushRealModifiers BeginTypeArguments ReferenceExpressionTypeArgumentsAndTrunk '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t// ReferenceExpression ::= Name BeginTypeArguments ReferenceExpressionTypeArgumentsAndTrunk '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t\tmethodReference = (SingleNameReference) getUnspecifiedReferenceOptimized();", "+\t\tmethodReference = new SingleNameReference(this.identifierStack[this.identifierPtr], this.identifierPositionStack[this.identifierPtr--]);", "+\t\tthis.identifierLengthPtr--;", "-", "-\t\tTypeReference rightSide = getUnannotatedTypeReference(0); // until we add support for X. @Inner Y, by design the type after '.' is unannotated.", "-\t\ttype = computeQualifiedGenericsFromRightSide(rightSide, dims);", "+\t\tAnnotation [][] annotationsOnDimensions = dims == 0 ? null : getAnnotationsOnDimensions(dims);", "+\t\tTypeReference rightSide = getTypeReference(0);", "+\t\ttype = computeQualifiedGenericsFromRightSide(rightSide, dims, annotationsOnDimensions);", "-\t\ttype = getUnannotatedTypeReference(dims); // annotations attached below.", "+\t\ttype = getTypeReference(dims);", "-\tint illegalModifiersSourceStart = this.intStack[this.intPtr--];", "-\tif (illegalModifiersSourceStart >= 0 && illegalModifiersSourceStart < type.sourceStart) {", "-\t\ttype.sourceStart = illegalModifiersSourceStart;", "-\t}", "-\t// Prefix annotations if any are on the expression stack, attach them now.", "-\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "-\t\ttype.annotations = new Annotation[type.getAnnotatableLevels()][];", "-\t\tSystem.arraycopy(", "-\t\t\t\tthis.expressionStack,", "-\t\t\t\t(this.expressionPtr -= length) + 1,", "-\t\t\t\ttype.annotations[0] = new Annotation[length],", "-\t\t\t\t0,", "-\t\t\t\tlength);", "-\t\tint annotStart = type.annotations[0][0].sourceStart;", "-\t\tif (annotStart < type.sourceStart) {", "-\t\t\ttype.sourceStart = annotStart;", "-\t\t}", "-\t\ttype.bits |= ASTNode.HasTypeAnnotations;", "-\t}", "-", "-\tint illegalModifiers = this.intStack[this.intPtr--];", "-\tif (illegalModifiers != ClassFileConstants.AccDefault) {", "-\t\tproblemReporter().invalidLocationForModifiers(type);", "-\t}", "-\tresetModifiers();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a3fcc5a9eed69886fdee16c45615246", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 301, "methodNumberAfterChange": 290, "signatureBeforeChange": " protected void consumeReferenceExpressionTypeForm(boolean isPrimitive, boolean isArray)", "signatureAfterChange": " protected void consumeReferenceExpressionTypeForm(boolean isPrimitive, boolean isArray)", "diff": ["-\t// ReferenceExpression ::= PrimitiveType Dims PushModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t// ReferenceExpression ::= Modifiers PrimitiveType Dims PushRealModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t// ReferenceExpression ::= Name Dims PushModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t// ReferenceExpression ::= Modifiers Name Dims PushRealModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t// ReferenceExpression ::= Modifiers Name PushRealModifiers '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t// ReferenceExpression ::= PrimitiveType Dims '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t// ReferenceExpression ::= Name Dims '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t// ReferenceExpression ::= Name '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t\tmethodReference = (SingleNameReference) getUnspecifiedReferenceOptimized();", "+\t\tmethodReference = new SingleNameReference(this.identifierStack[this.identifierPtr], this.identifierPositionStack[this.identifierPtr--]);", "+\t\tthis.identifierLengthPtr--;", "-\tint illegalModifiersSourceStart = this.intStack[this.intPtr--];", "-\tint illegalModifiers = this.intStack[this.intPtr--];", "-\t", "-\t// Type Annotations are in the expression stack, so retrieve as unannotated type ", "-\ttype = getUnannotatedTypeReference(isArray ? this.intStack[this.intPtr--] : 0);", "-    // and attach the annotations now.", "-\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "-\t\ttype.annotations = new Annotation[type.getAnnotatableLevels()][];", "-\t\tSystem.arraycopy(", "-\t\t\t\tthis.expressionStack,", "-\t\t\t\t(this.expressionPtr -= length) + 1,", "-\t\t\t\ttype.annotations[0] = new Annotation[length],", "-\t\t\t\t0,", "-\t\t\t\tlength);", "-\t\ttype.sourceStart = type.annotations[0][0].sourceStart;", "-\t\ttype.bits |= ASTNode.HasTypeAnnotations;", "-\t}", "-\tif (illegalModifiersSourceStart >= 0 && illegalModifiersSourceStart < type.sourceStart) {", "-\t\ttype.sourceStart = illegalModifiersSourceStart;", "-\t}", "+\ttype = getTypeReference(isArray ? this.intStack[this.intPtr--] : 0);", "-\tif (illegalModifiers != ClassFileConstants.AccDefault) {", "-\t\tproblemReporter().invalidLocationForModifiers(type);", "-\t}", "-\tresetModifiers();", "-\t"]}], "num": 58014}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ab71abd6c3d3fb66ab9d5e65611f3da", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2718695629873e76012c6090cda94f65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "904e81d11d3fc634ae2d9d861dc6c73c9ea81e03", "commitAfterChange": "2fce9fdec7d24fd4985bfaa8a4da9bdc5aff2660", "methodNumberBeforeChange": 176, "methodNumberAfterChange": 184, "signatureBeforeChange": "\t \t \tpublic void testJavadoc()", "signatureAfterChange": " \tpublic void testJavadoc()", "diff": ["-\t", "+\t */", "-\t\tJavadoc x = ast.newJavadoc();", "+\t\tfinal Javadoc x = ast.newJavadoc();", "+\t\tassertTrue(!x.isBlockComment());", "+\t\tassertTrue(!x.isLineComment());", "+\t\tassertTrue(x.isDocComment());", "+\t\tassertTrue(x.fragments().isEmpty());", "+\t\tassertTrue(x.getAlternateRoot() == null);", "+\t\t", "+\t\ttAlternateRoot(x);", "+", "+\t\t// check that fragments() can handle TagElement", "+\t\tgenericPropertyListTest(x, x.fragments(),", "+\t\t  new Property(\"Fragments\", true, TagElement.class) { //$NON-NLS-1$", "+\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\tTagElement result = targetAst.newTagElement();", "+\t\t\t\tif (parented) {", "+\t\t\t\t\tJavadoc parent = targetAst.newJavadoc();", "+\t\t\t\t\tparent.fragments().add(result);", "+\t\t\t\t}", "+\t\t\t\treturn result;", "+\t\t\t}", "+\t\t\tpublic ASTNode[] counterExamples(AST targetAst) {", "+\t\t\t\treturn new ASTNode[] {", "+\t\t\t\t\ttargetAst.newEmptyStatement(),", "+\t\t\t\t\ttargetAst.newCompilationUnit(),", "+\t\t\t\t\ttargetAst.newTypeDeclaration(),", "+\t\t\t\t\ttargetAst.newJavadoc(),", "+\t\t\t\t};", "+\t\t\t}", "+\t\t});", "+\t\t// check that fragments() can handle Name", "+\t\tgenericPropertyListTest(x, x.fragments(),", "+\t\t  new Property(\"Fragments\", true, Name.class) { //$NON-NLS-1$", "+\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\tSimpleName result = targetAst.newSimpleName(\"foo\"); //$NON-NLS-1$", "+\t\t\t\tif (parented) {", "+\t\t\t\t\ttargetAst.newExpressionStatement(result);", "+\t\t\t\t}", "+\t\t\t\treturn result;", "+\t\t\t}", "+\t\t});", "+\t\t// check that fragments() can handle TextElement", "+\t\tgenericPropertyListTest(x, x.fragments(),", "+\t\t  new Property(\"Fragments\", true, TextElement.class) { //$NON-NLS-1$", "+\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\tTextElement result = targetAst.newTextElement();", "+\t\t\t\tif (parented) {", "+\t\t\t\t\tJavadoc parent = targetAst.newJavadoc();", "+\t\t\t\t\tparent.fragments().add(result);", "+\t\t\t\t}", "+\t\t\t\treturn result;", "+\t\t\t}", "+\t\t});", "+\t\t// check that fragments() can handle MethodRef", "+\t\tgenericPropertyListTest(x, x.fragments(),", "+\t\t  new Property(\"Fragments\", true, MethodRef.class) { //$NON-NLS-1$", "+\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\tMethodRef result = targetAst.newMethodRef();", "+\t\t\t\tif (parented) {", "+\t\t\t\t\tJavadoc parent = targetAst.newJavadoc();", "+\t\t\t\t\tparent.fragments().add(result);", "+\t\t\t\t}", "+\t\t\t\treturn result;", "+\t\t\t}", "+\t\t});", "+\t\t// check that fragments() can handle MemberRef", "+\t\tgenericPropertyListTest(x, x.fragments(),", "+\t\t  new Property(\"Fragments\", true, MemberRef.class) { //$NON-NLS-1$", "+\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\tMemberRef result = targetAst.newMemberRef();", "+\t\t\t\tif (parented) {", "+\t\t\t\t\tJavadoc parent = targetAst.newJavadoc();", "+\t\t\t\t\tparent.fragments().add(result);", "+\t\t\t\t}", "+\t\t\t\treturn result;", "+\t\t\t}", "+\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5105f5acd94cfdb3334bdb8acc43a8e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "97881e1f65dad02c5fcba69e18ae3332573c3839", "commitAfterChange": "5ae43aadc33d93b5c6af6a0612729105eee79d4f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic static CompilationUnit parsePartialCompilationUnit(         IClassFile classFile, \t\tint position, \t\tboolean resolveBindings, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic static CompilationUnit parsePartialCompilationUnit(         IClassFile classFile, \t\tint position, \t\tboolean resolveBindings, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "diff": ["-\t\t// TODO (olivier) missing implementation", "-\t\tthrow new RuntimeException(\"Not implemented yet\"); //$NON-NLS-1$", "+", "+\t\tchar[] source = null;", "+\t\tString sourceString = null;", "+\t\ttry {", "+\t\t\tsourceString = classFile.getSource();", "+\t\t} catch (JavaModelException e) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+", "+\t\tif (sourceString == null) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tsource = sourceString.toCharArray();", "+", "+\t\tNodeSearcher searcher = new NodeSearcher(position);", "+", "+\t\tfinal Map options = classFile.getJavaProject().getOptions(true);", "+\t\tif (resolveBindings) {", "+\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = null;", "+\t\t\ttry {", "+\t\t\t\t// parse and resolve", "+\t\t\t\tcompilationUnitDeclaration = CompilationUnitResolver.resolve(", "+\t\t\t\t\tclassFile,", "+\t\t\t\t\tsearcher,", "+\t\t\t\t\tfalse/*don't cleanup*/,", "+\t\t\t\t\tsource,", "+\t\t\t\t\towner,", "+\t\t\t\t\tmonitor);", "+\t\t\t\t", "+\t\t\t\tASTConverter converter = new ASTConverter(options, true, monitor);", "+\t\t\t\tAST ast = new AST();", "+\t\t\t\tBindingResolver resolver = new DefaultBindingResolver(compilationUnitDeclaration.scope);", "+\t\t\t\tast.setBindingResolver(resolver);", "+\t\t\t\tconverter.setAST(ast);", "+\t\t\t", "+\t\t\t\tCompilationUnit compilationUnit = converter.convert(compilationUnitDeclaration, source);", "+\t\t\t\tcompilationUnit.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);", "+\t\t\t\tresolver.storeModificationCount(ast.modificationCount());", "+\t\t\t\treturn compilationUnit;", "+\t\t\t} catch(JavaModelException e) {", "+\t\t\t\t/* if a JavaModelException is thrown trying to retrieve the name environment", "+\t\t\t\t * then we simply do a parsing without creating bindings.", "+\t\t\t\t * Therefore all binding resolution will return null.", "+\t\t\t\t */", "+\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration2 = CompilationUnitResolver.parse(", "+\t\t\t\t\tsource,", "+\t\t\t\t\tsearcher,", "+\t\t\t\t\toptions);", "+\t\t\t\t", "+\t\t\t\tASTConverter converter = new ASTConverter(options, false, monitor);", "+\t\t\t\tAST ast = new AST();", "+\t\t\t\tfinal BindingResolver resolver = new BindingResolver();", "+\t\t\t\tast.setBindingResolver(resolver);", "+\t\t\t\tconverter.setAST(ast);", "+\t", "+\t\t\t\tCompilationUnit compilationUnit = converter.convert(compilationUnitDeclaration2, source);", "+\t\t\t\tcompilationUnit.setLineEndTable(compilationUnitDeclaration2.compilationResult.lineSeparatorPositions);", "+\t\t\t\tresolver.storeModificationCount(ast.modificationCount());", "+\t\t\t\treturn compilationUnit;", "+\t\t\t} finally {", "+\t\t\t\tif (compilationUnitDeclaration != null) {", "+\t\t\t\t\tcompilationUnitDeclaration.cleanUp();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = CompilationUnitResolver.parse(", "+\t\t\t\tsource,", "+\t\t\t\tsearcher,", "+\t\t\t\toptions);", "+\t\t\t", "+\t\t\tASTConverter converter = new ASTConverter(options, false, monitor);", "+\t\t\tAST ast = new AST();", "+\t\t\tfinal BindingResolver resolver = new BindingResolver();", "+\t\t\tast.setBindingResolver(resolver);", "+\t\t\tconverter.setAST(ast);", "+", "+\t\t\tCompilationUnit compilationUnit = converter.convert(compilationUnitDeclaration, source);", "+\t\t\tcompilationUnit.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);", "+\t\t\tresolver.storeModificationCount(ast.modificationCount());", "+\t\t\treturn compilationUnit;", "+\t\t}"]}], "num": 64169}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4e5535ec806b95feab23b2012d005f0c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4361cbf8beed90a3a7b3c1f5ce3446a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "0f841a0360389f0f91aef636ca6531276c4a074d", "commitAfterChange": "4e57894c46e6fdc6da393db7e5519e070814fd68", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected boolean buildStructure(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["-\tboolean statementsRecovery;", "+\tint reconcileFlags;", "-\t\tstatementsRecovery = astHolder.statementsRecovery;", "+\t\treconcileFlags = astHolder.reconcileFlags;", "-\t\tstatementsRecovery = false;", "+\t\treconcileFlags = 0;", "-\tparser.setStatementsRecovery(statementsRecovery);", "+\tparser.setStatementsRecovery((reconcileFlags & ICompilationUnit.ENABLE_STATEMENTS_RECOVERY) != 0);", "-\t\t\t\tcompilationUnitDeclaration = CompilationUnitProblemFinder.process(unit, this, contents, parser, this.owner, problems, createAST, true, pm);", "+\t\t\t\tcompilationUnitDeclaration = CompilationUnitProblemFinder.process(unit, this, contents, parser, this.owner, problems, createAST, reconcileFlags, pm);", "-\t\t\t\tcompilationUnitDeclaration = CompilationUnitProblemFinder.process(unit, this, contents, parser, this.owner, problems, createAST, true, pm);", "+\t\t\t\tcompilationUnitDeclaration = CompilationUnitProblemFinder.process(unit, this, contents, parser, this.owner, problems, createAST, reconcileFlags, pm);", "-\t\t\torg.eclipse.jdt.core.dom.CompilationUnit cu = AST.convertCompilationUnit(astLevel, unit, contents, options, computeProblems, this, pm);", "+\t\t\torg.eclipse.jdt.core.dom.CompilationUnit cu = AST.convertCompilationUnit(astLevel, unit, contents, options, computeProblems, this, reconcileFlags, pm);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f479c5a56ffec7ff4d9fa455fb8179e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "3614fb7a931da6f7d6b963e79da43a1a287be280", "commitAfterChange": "f35ac795e031f468ed2702736c7462517694be67", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected boolean buildStructure(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["-\t// get buffer contents", "+\t// ensure buffer is opened", "-\t\tbuffer = openBuffer(pm, unitInfo); // open buffer independently from the info, since we are building the info", "-\t}", "-\tfinal char[] contents;", "-\tif (buffer == null) {", "-\t\tcontents = CharOperation.NO_CHAR ;", "-\t} else {", "-\t\tchar[] characters = buffer.getCharacters();", "-\t\tcontents = characters == null ? CharOperation.NO_CHAR : characters;", "+\t\topenBuffer(pm, unitInfo); // open buffer independently from the info, since we are building the info", "-\tCompilationUnitDeclaration unit = parser.parseCompilationUnit(", "-\t\tnew org.eclipse.jdt.internal.compiler.env.ICompilationUnit() {", "-\t\t\tpublic char[] getContents() {", "-\t\t\t\treturn contents;", "-\t\t\t}", "-\t\t\tpublic char[] getMainTypeName() {", "-\t\t\t\treturn CompilationUnit.this.getMainTypeName();", "-\t\t\t}", "-\t\t\tpublic char[][] getPackageName() {", "-\t\t\t\treturn CompilationUnit.this.getPackageName();", "-\t\t\t}", "-\t\t\tpublic char[] getFileName() {", "-\t\t\t\treturn CompilationUnit.this.getFileName();", "-\t\t\t}", "-\t\t}, ", "-\t\ttrue /*full parse to find local elements*/);", "+\tCompilationUnit source = cloneCachingContents();", "-\t\t\t\tcompilationUnitDeclaration = CompilationUnitProblemFinder.process(unit, this, contents, parser, this.owner, problems, createAST, reconcileFlags, pm);", "+\t\t\t\tcompilationUnitDeclaration = CompilationUnitProblemFinder.process(source, parser, this.owner, problems, createAST, reconcileFlags, pm);", "-\t\t\t\tcompilationUnitDeclaration = CompilationUnitProblemFinder.process(unit, this, contents, parser, this.owner, problems, createAST, reconcileFlags, pm);", "+\t\t\t\tcompilationUnitDeclaration = CompilationUnitProblemFinder.process(source, parser, this.owner, problems, createAST, reconcileFlags, pm);", "+\t\t} else {", "+\t\t\tcompilationUnitDeclaration = parser.parseCompilationUnit(source, true /*full parse to find local elements*/);", "-\t\t\torg.eclipse.jdt.core.dom.CompilationUnit cu = AST.convertCompilationUnit(astLevel, unit, contents, options, computeProblems, this, reconcileFlags, pm);", "+\t\t\torg.eclipse.jdt.core.dom.CompilationUnit cu = AST.convertCompilationUnit(astLevel, compilationUnitDeclaration, options, computeProblems, source, reconcileFlags, pm);", "+}"]}], "num": 42222}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4308c16ef4d54a006ac7ad023cb9c8a3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "041ceafaa3cf517e3d9341265c94cb6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "4a6b3839c123ba52c0418c6a1716f84ca2fa40ee", "commitAfterChange": "7ab66ec659aff4e2eeafa10fb6d8c45a18f899f6", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void printBlockComment(char[] s, int commentStart)", "signatureAfterChange": " \tpublic void printBlockComment(char[] s, int commentStart)", "diff": ["+\t\tint currentTokenStartPosition = this.scanner.getCurrentTokenStartPosition();", "+\t\tint currentTokenEndPosition = this.scanner.getCurrentTokenEndPosition() + 1;", "+\t\t", "-\t\t\t\t// add position mapping", "-\t\t\t\tString reduceLine = lineContents.trim();", "-\t\t\t\tfinal int reduceLineLength = reduceLine.length();", "-\t\t\t\tif (this.positionsToMap != null) {", "-\t\t\t\t\tint start = commentSource.indexOf(reduceLine, startSearchIndex);", "-\t\t\t\t\tmapPositions(start + commentStart, this.buffer.length(), reduceLineLength);", "-\t\t\t\t\tstartSearchIndex = start + reduceLineLength + 1;", "+\t\t\t\t// remove leading whitespaces", "+\t\t\t\tint lineStartPosition = currentTokenStartPosition + commentSource.indexOf(lineContents, startSearchIndex);", "+\t\t\t\tthis.scanner.resetTo(lineStartPosition, this.scannerEndPosition - 1);", "+\t\t\t\tString reduceLine = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tif (this.scanner.getNextToken() == ITerminalSymbols.TokenNameWHITESPACE) {", "+\t\t\t\t\t\tint begin = this.scanner.getCurrentTokenEndPosition() + 1 - lineStartPosition;", "+\t\t\t\t\t\tif (begin < lineContents.length()) {", "+\t\t\t\t\t\t\treduceLine = lineContents.substring(begin);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\treduceLine = \"\"; //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treduceLine = lineContents;", "+\t\t\t\t\t}", "+\t\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t\t// should not happen", "+\t\t\t\tfinal int reduceLineLength = reduceLine.length();", "+\t\t\t\t// add position mapping", "+\t\t\t\tint start = commentSource.indexOf(reduceLine, startSearchIndex);", "+\t\t\t\tif (this.positionsToMap != null) {", "+\t\t\t\t\tmapPositions(start + commentStart, this.buffer.length(), reduceLineLength);", "+\t\t\t\t}", "+\t\t\t\tstartSearchIndex = start + reduceLineLength + 1;", "+\t\tthis.scanner.resetTo(currentTokenEndPosition, this.scannerEndPosition - 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcd217267a2cc2ebaf8d725a6c9c0219", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "8bcd9b87ed997ca91c95e87fd5639a0cef180234", "commitAfterChange": "451dfca83862105681163e8101832560ac0259eb", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "  \tprivate int printJavadocBlockNodesNewLines(FormatJavadocBlock block, FormatJavadocNode node, int previousEnd)", "signatureAfterChange": "  \tprivate int printJavadocBlockNodesNewLines(FormatJavadocBlock block, FormatJavadocNode node, int previousEnd)", "diff": ["-\t    \t\t\t\tint token = this.scanner.getNextToken();", "-\t    \t\t\t\tswitch (token) {", "-\t    \t\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE:", "-\t    \t\t\t\t\t\tif (CharOperation.indexOf('\\n', this.scanner.source, this.scanner.startPosition, this.scanner.currentPosition) >= 0) {", "-\t    \t\t\t\t\t\t\treturn newLines;", "-\t    \t\t\t\t\t\t}", "-\t    \t\t\t\t\t\tlength = 1;", "-\t    \t\t\t\t\t\tbreak;", "-\t    \t\t\t\t\tcase TerminalTokens.TokenNameMULTIPLY:", "-\t    \t\t\t\t\t\tif (newLine) {", "-\t    \t\t\t\t\t\t\tnewLine = false;", "-\t    \t\t\t\t\t\t\tcontinue;", "-\t    \t\t\t\t\t\t}", "-\t    \t\t\t\t\t\tlength = 1;", "-\t    \t\t\t\t\t\tbreak;", "-\t    \t\t\t\t\tdefault:", "-\t\t\t\t    \t\t\tlength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "-\t    \t\t\t\t\t\tbreak;", "+\t    \t\t\t\ttry {", "+\t\t    \t\t\t\tint token = this.scanner.getNextToken();", "+\t\t    \t\t\t\tswitch (token) {", "+\t\t    \t\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE:", "+\t\t    \t\t\t\t\t\tif (CharOperation.indexOf('\\n', this.scanner.source, this.scanner.startPosition, this.scanner.currentPosition) >= 0) {", "+\t\t    \t\t\t\t\t\t\treturn newLines;", "+\t\t    \t\t\t\t\t\t}", "+\t\t    \t\t\t\t\t\tlength = 1;", "+\t\t    \t\t\t\t\t\tbreak;", "+\t\t    \t\t\t\t\tcase TerminalTokens.TokenNameMULTIPLY:", "+\t\t    \t\t\t\t\t\tif (newLine) {", "+\t\t    \t\t\t\t\t\t\tnewLine = false;", "+\t\t    \t\t\t\t\t\t\tcontinue;", "+\t\t    \t\t\t\t\t\t}", "+\t\t    \t\t\t\t\t\tlength = 1;", "+\t\t    \t\t\t\t\t\tbreak;", "+\t\t    \t\t\t\t\tdefault:", "+\t\t\t\t\t    \t\t\tlength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t\t    \t\t\t\t\t\tbreak;", "+\t\t    \t\t\t\t}", "+\t    \t\t\t\t}", "+\t    \t\t\t\tcatch (InvalidInputException iie) {", "+\t    \t\t\t\t\t// maybe an unterminated string or comment", "+\t\t\t    \t\t\tlength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;"]}], "num": 2095}
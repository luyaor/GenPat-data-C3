{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ec0a0092dfbcf50e7c8b6c8c8642620", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "882325b554bdff7589d3578731788927", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/CompilerInvocationTests.java", "commitBeforeChange": "8ae6a032b744da62a95176b1af816f0bc6d501e7", "commitAfterChange": "e5d1651827919c7582ba9351a3db777b316a27e0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 59, "signatureBeforeChange": " @Override protected boolean invokeCompiler( \t\tPrintWriter out,  \t\tPrintWriter err, \t\tObject extraArguments, \t\tTestCompilationProgress compilationProgress)", "signatureAfterChange": " public void test021_output_streams() throws IOException", "diff": ["-}", "-@Override", "-protected boolean invokeCompiler(", "-\t\tPrintWriter out, ", "-\t\tPrintWriter err,", "-\t\tObject extraArguments,", "-\t\tTestCompilationProgress compilationProgress) {", "-\tCompilerInvocationTestsArguments arguments = (CompilerInvocationTestsArguments) extraArguments;", "-\tStandardJavaFileManager manager = arguments.standardJavaFileManager;", "-\tif (manager == null) {", "-\t\tmanager = JAVAC_COMPILER.getStandardFileManager(null, null, null); // will pick defaults up", "-\t}", "-\tList<File> files = new ArrayList<File>();", "-\tString[] fileNames = arguments.fileNames;", "-\tfor (int i = 0, l = fileNames.length; i < l; i++) {", "-\t\tfiles.add(new File(OUTPUT_DIR + File.separator + fileNames[i]));", "-\t}", "-\tCompilationTask task = COMPILER.getTask(out, arguments.standardJavaFileManager /* carry the null over */, null, arguments.options, null, manager.getJavaFileObjectsFromFiles(files));", "-\treturn task.call();", "+// most basic output test", "+public void test021_output_streams() throws IOException {", "+\tByteArrayOutputStream ", "+\t\t\toutBuffer = new ByteArrayOutputStream(),", "+\t\t\terrBuffer = new ByteArrayOutputStream();", "+\tCompilationTask task = COMPILER.getTask(", "+\t\tnew PrintWriter(outBuffer), ", "+\t\tJAVAC_COMPILER.getStandardFileManager(null /* diagnosticListener */, null /* locale */, null /* charset */), ", "+\t\tnew CompilerInvocationDiagnosticListener(new PrintWriter(errBuffer)), ", "+\t\tArrays.asList(\"-v\"), null, null);", "+\tassertTrue(task.call());", "+\tassertTrue(outBuffer.toString().startsWith(\"Eclipse Java Compiler\"));", "+\tassertTrue(errBuffer.toString().isEmpty());", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdad8a71757107780c759f8081aa8389", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/SourceFile.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic char[] getContents()", "signatureAfterChange": "  public char[] getContents()", "diff": ["-\t", "-\tpublic char[] getContents() {", "-", "-\t\t// otherwise retrieve it", "-\t\tBufferedReader reader = null;", "+public char[] getContents() {", "+\t// otherwise retrieve it", "+\tInputStreamReader reader = null;", "+\ttry {", "+\t\treader =", "+\t\t\tthis.encoding == null", "+\t\t\t\t? new InputStreamReader(resource.getContents())", "+\t\t\t\t: new InputStreamReader(resource.getContents(), this.encoding);", "+\t\tCharArrayBuffer result = new CharArrayBuffer();", "-\t\t\tFile file = new File(new String(fileName));", "-\t\t\tInputStreamReader streamReader =", "-\t\t\t\tthis.encoding == null", "-\t\t\t\t\t? new InputStreamReader(new FileInputStream(file))", "-\t\t\t\t\t: new InputStreamReader(new FileInputStream(file), this.encoding);", "-\t\t\treader = new BufferedReader(streamReader);", "-\t\t\tint length = (int) file.length();", "-\t\t\tchar[] contents = new char[length];", "-\t\t\tint len = 0;", "-\t\t\tint readSize = 0;", "-\t\t\twhile ((readSize != -1) && (len != length)) {", "-\t\t\t\t// See PR 1FMS89U", "-\t\t\t\t// We record first the read size. In this case len is the actual read size.", "-\t\t\t\tlen += readSize;", "-\t\t\t\treadSize = reader.read(contents, len, length - len);", "-\t\t\t}", "+\t\t\tint count;", "+\t\t\tchar[] buffer = new char[4096];", "+\t\t\twhile ((count = reader.read(buffer, 0, buffer.length)) > -1)", "+\t\t\t\tresult.append(buffer, 0, count);", "+\t\t} finally {", "-\t\t\t// See PR 1FMS89U", "-\t\t\t// Now we need to resize in case the default encoding used more than one byte for each", "-\t\t\t// character", "-\t\t\tif (len != length)", "-\t\t\t\tSystem.arraycopy(contents, 0, (contents = new char[len]), 0, len);\t\t", "-\t\t\treturn contents;", "-\t\t} catch (FileNotFoundException e) {", "-\t\t\tthrow new AbortCompilation(true, new MissingSourceFileException(new String(fileName)));", "-\t\t} catch (IOException e) {", "-\t\t\tif (reader != null) {", "-\t\t\t\ttry {", "-\t\t\t\t\treader.close();", "-\t\t\t\t} catch(IOException ioe) {", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tthrow new AbortCompilation(true, new MissingSourceFileException(new String(fileName)));", "+\t\treturn result.getContents();", "+\t} catch (CoreException e) {", "+\t\tthrow new AbortCompilation(true, new MissingSourceFileException(resource.getFullPath().toString()));", "+\t} catch (IOException e) {", "+\t\tif (reader != null) {", "+\t\t\ttry { reader.close(); } catch(IOException ioe) {}", "+\t\t}", "+\t\tthrow new AbortCompilation(true, new MissingSourceFileException(resource.getFullPath().toString()));", "+}"]}], "num": 11877}
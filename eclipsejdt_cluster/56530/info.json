{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ddcf3336d2b4def6c4dcb6fa16dd5a16", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26d6c7b276050cc65c62d4ccd4c00568", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "1dbf45ade1eaa8473579771e92825a7887776253", "commitAfterChange": "0fb8e6d8cd5771230b88c7189dc0d95f3a5da0e3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tvoid setSourceComment(char[] source)", "signatureAfterChange": " \tvoid setSourceComment(char[] source)", "diff": ["-\t\tStringBuffer buffer = new StringBuffer();", "+\t\tStringBuffer buffer = null;", "-\t\tboolean end = false;", "+\t\tboolean end = false, lineStarted = false;", "-\t\t\t\t\tswitch (source[i+1]) {", "+\t\t\t\t\tswitch (source[++i]) {", "+\t\t\t\t\t\t\tbuffer = new StringBuffer(\"//\");", "+\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\tif (source[i+2] == '*') {", "-\t\t\t\t\t\t\t\tcomment = 3; // javadoc", "+\t\t\t\t\t\t\tif (source[++i] == '*') {", "+\t\t\t\t\t\t\t\tif (source[++i] == '/') { // empty block comment", "+\t\t\t\t\t\t\t\t\tthis.comments.add(\"/**/\");", "+\t\t\t\t\t\t\t\t\tthis.allTags.add(new ArrayList());", "+\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tcomment = 3; // javadoc", "+\t\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"/**\");", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"/*\");", "-\t\t\t\t\t\tbuffer = new StringBuffer();", "-\t\t\t\t\tif (source[i] == '@') {", "-\t\t\t\t\t\ttag = \"\";", "+\t\t\t\t\tswitch (source[i]) {", "+\t\t\t\t\t\tcase '@':", "+\t\t\t\t\t\t\tif (!lineStarted || source[i-1] == '{') {", "+\t\t\t\t\t\t\t\ttag = \"\";", "+\t\t\t\t\t\t\t\tlineStarted = true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase '\\r':", "+\t\t\t\t\t\tcase '\\n':", "+\t\t\t\t\t\t\tlineStarted = false;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase '*':", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tif (!Character.isWhitespace(source[i])) {", "+\t\t\t\t\t\t\t\tlineStarted = true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tlineStarted = false;", "-\t\t\t\t\t\tbuffer = new StringBuffer();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a61a8d9dbafb69e0e81ca1d1076b2c04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "beddf7ea3209e604e7dd085747cac8c41b2dfbd0", "commitAfterChange": "cafda46507ac63768e17397affc84b63092c7e46", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tprotected static void initLogDir()", "signatureAfterChange": " \tprotected static void initLogDir()", "diff": ["+\t\tFile dir = null;", "-\t\t\tFile dir = new File(logDir);", "+\t\t\t// Verify that parent log dir is valid if exist", "+\t\t\tdir = new File(logDir);", "-\t\t\t\tif (dir.isDirectory()) {", "-\t\t\t\t\tLOG_DIR = dir;", "-\t\t\t\t} else {", "+\t\t\t\tif (!dir.isDirectory()) {", "+\t\t\t\t\tdir = INVALID_DIR;", "-\t\t\t\tif (dir.mkdir()) {", "-\t\t\t\t\tLOG_DIR = dir;", "-\t\t\t\t} else {", "+\t\t\t\t// Create parent dir if necessary", "+\t\t\t\tint n=0;", "+\t\t\t\tboolean created = false;", "+\t\t\t\twhile (!created && n<3) {", "+\t\t\t\t\tcreated = dir.mkdir();", "+\t\t\t\t\tif (!created) {", "+\t\t\t\t\t\tdir = dir.getParentFile();", "+\t\t\t\t\t}", "+\t\t\t\t\tn++;", "+\t\t\t\t}", "+\t\t\t\tif (!created) {", "+\t\t\t\t\tdir = INVALID_DIR;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\t// Create Log dir", "+\t\t\tString[] subdirs = new String[] {", "+\t\t\t\t(PATCH_ID == null) ? LOG_VERSION : PATCH_ID,", "+\t\t\t\tRUN_ID", "+\t\t\t};", "+\t\t\tfor (int i=0; i<subdirs.length; i++) {", "+\t\t\t\tdir = new File(dir, subdirs[i]);", "+\t\t\t\tif (dir.exists()) {", "+\t\t\t\t\tif (!dir.isDirectory()) {", "+\t\t\t\t\t\tSystem.err.println(dir.getPath()+\" is not a valid directory. Log files will NOT be written!\");", "+\t\t\t\t\t\tdir= INVALID_DIR;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (!dir.mkdir()) {", "+\t\t\t\t\tSystem.err.println(\"Cannot create \"+logDir+\". Log files will NOT be written!\");", "+\t\t\t\t\tdir = INVALID_DIR;", "+\t\t\t\t\tbreak;", "+\t\tLOG_DIR = dir;", "+\t}"]}], "num": 56530}
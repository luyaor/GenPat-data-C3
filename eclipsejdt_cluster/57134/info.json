{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1edd73e827c3ca67fe60f31994488c22", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2c31b889f53b37edaf8d1f587284036", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "f6037f3e0e76e18ea82dd93d13e55dc410583456", "commitAfterChange": "a5577117cb4a612450eddce3c0b20eb90f21cb89", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprivate void checkProjectsBeingAddedOrRemoved(IResourceDelta delta)", "signatureAfterChange": " \tprivate void checkProjectsBeingAddedOrRemoved(IResourceDelta delta)", "diff": ["-\t\t\t\tif (this.state.modelProjectsCache == null) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tthis.state.modelProjectsCache = this.manager.getJavaModel().getJavaProjects();", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t// java model doesn't exist: never happens", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tthis.state.getOldJavaProjecNames(); // force list to be computed", "-\t\t\t\t\t\t\t\tboolean wasJavaProject = this.manager.getJavaModel().findJavaProject(project) != null;", "+\t\t\t\t\t\t\t\tboolean wasJavaProject = this.state.findJavaProject(project.getName()) != null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b655c46059bc143be6370d025edd027b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/MissingTypesGuesser.java", "commitBeforeChange": "f8406402dab63bd844517051ef5aaa1b160d2392", "commitAfterChange": "5bd6b9d7331a9e7fe82d427994d62e0af1821389", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \t \tpublic void guess(TypeReference typeRef, Scope scope, GuessedTypeRequestor requestor)", "signatureAfterChange": " \t \tpublic void guess(TypeReference typeRef, Scope scope, GuessedTypeRequestor requestor)", "diff": ["-\t\t\tthis.problemFactory.hasProblems = false;", "-\t\t\tthis.problemFactory.checkProblems = true;", "+\t\t\t", "+\t\t\tthis.problemFactory.startCheckingProblems();", "-\t\t\t\t\tconvertedType.traverse(resolutionCleaner, (BlockScope)scope);", "-\t\t\t\t\tconvertedType.traverse(resolutionCleaner, (ClassScope)scope);", "-\t\t\tthis.problemFactory.checkProblems = false;", "-\t\t\tif (!this.problemFactory.hasProblems) {", "+\t\t\tthis.problemFactory.stopCheckingProblems();", "+\t\t\tif (!this.problemFactory.hasForbiddenProblems) {", "-\t\t\t\t\t\t\t\tmissingElementsEnds);", "+\t\t\t\t\t\t\t\tmissingElementsEnds,", "+\t\t\t\t\t\t\t\tthis.problemFactory.hasAllowedProblems);"]}], "num": 57134}
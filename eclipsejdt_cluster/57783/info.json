{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0265653d1acedaab54ea908abaeabd77", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30470556803096ea52777ebab7e69a06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/APTTestBase.java", "commitBeforeChange": "b9128093e8302bc6585f51afb5cbfa4db580aa85", "commitAfterChange": "8036c2dbcd62f164037a717d38250a661a02697b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \t@SuppressWarnings(\"unchecked\") \tprotected IMarker[] getAPTBuildMarkerFor(IPath path)", "signatureAfterChange": " \t \t@SuppressWarnings(\"unchecked\") \tprotected IMarker[] getAllAPTMarkers(IPath path)", "diff": ["-\tprotected IMarker[] getAPTBuildMarkerFor(IPath path){", "+\tprotected IMarker[] getAllAPTMarkers(IPath path){", "-\t\t\treturn resource.findMarkers(\"org.eclipse.jdt.apt.core.marker\", true, IResource.DEPTH_INFINITE);", "+\t\t\tIMarker[] markers = null;", "+\t\t\tint total = 0;", "+\t\t\tfinal IMarker[] processorMarkers = resource.findMarkers(AptPlugin.APT_PROCESSOR_PROBLEM_MARKER, true, IResource.DEPTH_INFINITE);", "+\t\t\ttotal = processorMarkers.length;", "+\t\t\tmarkers = processorMarkers;", "+\t\t\t\t", "+\t\t\tfinal IMarker[] factoryPathMarkers = resource.findMarkers(AptPlugin.APT_BUILD_PROBLEM_MARKER, true, IResource.DEPTH_INFINITE);\t\t\t", "+\t\t\tif( factoryPathMarkers.length != 0 ){", "+\t\t\t\tif( total != 0 ){", "+\t\t\t\t\tfinal int len = factoryPathMarkers.length;", "+\t\t\t\t\tfinal IMarker[] temp = new IMarker[len + total ];", "+\t\t\t\t\tSystem.arraycopy(markers, 0, temp, 0, total);", "+\t\t\t\t\tSystem.arraycopy(factoryPathMarkers, 0, temp, total, len);", "+\t\t\t\t\tmarkers = temp;", "+\t\t\t\t\ttotal += len;", "+\t\t\t\t}", "+\t\t\t\telse", "+\t\t\t\t\tmarkers = factoryPathMarkers;", "+\t\t\t}", "+\t\t\tfinal IMarker[] configMarkers = resource.findMarkers(AptPlugin.APT_CONFIG_PROBLEM_MARKER, true, IResource.DEPTH_INFINITE);\t\t\t", "+\t\t\tif( configMarkers.length != 0 ){", "+\t\t\t\tif( total != 0 ){", "+\t\t\t\t\tfinal int len = configMarkers.length;", "+\t\t\t\t\tfinal IMarker[] temp = new IMarker[len + total];", "+\t\t\t\t\tSystem.arraycopy(markers, 0, temp, 0, total);", "+\t\t\t\t\tSystem.arraycopy(configMarkers, 0, temp, total, len);", "+\t\t\t\t\tmarkers = temp;", "+\t\t\t\t\ttotal += len;", "+\t\t\t\t}", "+\t\t\t\telse", "+\t\t\t\t\tmarkers = configMarkers;", "+\t\t\t}", "+\t\t\treturn markers;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f04f182591a6bfa078ad23796785343", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/AllPerformanceTests.java", "commitBeforeChange": "beddf7ea3209e604e7dd085747cac8c41b2dfbd0", "commitAfterChange": "cafda46507ac63768e17397affc84b63092c7e46", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static Test suite()", "signatureAfterChange": " \tpublic static Test suite()", "diff": ["-\t\tint length = 0;", "-\t\ttry {", "-\t\t\tlength = Integer.parseInt(LENGTH);", "-\t\t\tif (length<=0 || length>testSuites.length)", "-\t\t\t\tlength = testSuites.length;", "-\t\t} catch (NumberFormatException e1) {", "-\t\t\tlength = testSuites.length;", "-\t\t}", "-\t\tif (ADDITIONAL != null) {", "-\t\t\tint pos = -1;", "+\t\tint length = testSuites.length;", "+\t\tif (ADD) {", "-\t\t\t\tpos = Integer.parseInt(ADDITIONAL);", "-\t\t\t\tint cl = complete.length;", "-\t\t\t\tClass[] newSuites = new Class[length+cl];", "-\t\t\t\tif (pos <= 0) {", "-\t\t\t\t\tSystem.arraycopy(complete, 0, newSuites, 0, cl);", "-\t\t\t\t\tSystem.arraycopy(testSuites, 0, newSuites, cl, length);", "-\t\t\t\t} else if (pos >= length) {", "-\t\t\t\t\tSystem.arraycopy(testSuites, 0, newSuites, 0, length);", "-\t\t\t\t\tSystem.arraycopy(complete, 0, newSuites, length, cl);", "-\t\t\t\t} else {", "-\t\t\t\t\tfor (int i=0; i<pos; i++)", "-\t\t\t\t\t\tnewSuites[i] = testSuites[i];", "-\t\t\t\t\tfor (int i=pos; i<pos+cl; i++)", "-\t\t\t\t\t\tnewSuites[i] = complete[i-pos];", "-\t\t\t\t\tfor (int i=pos+cl; i<length+cl; i++)", "-\t\t\t\t\t\tnewSuites[i] = testSuites[i-cl];", "-\t\t\t\t}", "+\t\t\t\tint completeLength = complete.length;", "+\t\t\t\tClass[] newSuites = new Class[length+completeLength];", "+\t\t\t\tSystem.arraycopy(testSuites, 0, newSuites, 0, length);", "+\t\t\t\tSystem.arraycopy(complete, 0, newSuites, length, completeLength);", "+", "+\t\t// Get suite acronym", "+\t\tString suitesAcronym = \"\";", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tString name = FullSourceWorkspaceTests.suiteTypeShortName(testSuites[i]);", "+\t\t\tif (name != null) {", "+\t\t\t\tsuitesAcronym += name.substring(0, 1);", "+\t\t\t}", "+\t\t}", "+\t\tFullSourceWorkspaceTests.RUN_ID = suitesAcronym; //.toLowerCase();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acfa6e6179d868b0467bc2d577c06d5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "82a0f3c12838ccee831a07a711dbd532d22679fb", "commitAfterChange": "60b668dec4a840702d6f3caa42eff8925a9372b7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate void setUpFullSourceWorkspace() throws IOException, CoreException", "signatureAfterChange": " \tprivate void setUpFullSourceWorkspace() throws IOException, CoreException", "diff": ["-\t\t// Init JRE_LIB variable", "+\t\t// Create lib entries for the JDKs", "-\t\tint length = jdkLibs.length;", "-\t\tString jdkLib = null;", "-\t\tfor (int i=0; i<length; i++) {", "-\t\t\tif (jdkLibs[i].endsWith(\"rt.jar\")) {", "-\t\t\t\tjdkLib = jdkLibs[i];", "-\t\t\t\tbreak;", "-\t\t\t}", "+\t\tint jdkLibsLength = jdkLibs.length;", "+\t\tIClasspathEntry[] jdkEntries = new IClasspathEntry[jdkLibsLength];", "+\t\tfor (int i=0; i<jdkLibsLength; i++) {", "+\t\t\tjdkEntries[i] = JavaCore.newLibraryEntry(new Path(jdkLibs[i]), null, null);", "-\t\tif (jdkLib == null) {", "-\t\t\tthrow new RuntimeException(\"Cannot set JRE_LIB classpath variable as the rt.jar lib was not found!!!\");", "-\t\t}", "-\t\tJavaCore.setClasspathVariable(\"JRE_LIB\", new Path(jdkLib), null);", "+\t\tstart = System.currentTimeMillis();", "-\t\tlength = ALL_PROJECTS.length;", "-\t\tfor (int i = 0; i < length; i++) {", "+\t\tint projectsLength = ALL_PROJECTS.length;", "+\t\tfor (int i = 0; i < projectsLength; i++) {", "-\t\t\tALL_PROJECTS[i].setRawClasspath(ALL_PROJECTS[i].getRawClasspath(), null);", "+\t\t\t", "+\t\t\t// Set jdk jars onto the project classpath", "+\t\t\tIClasspathEntry[] entries = ALL_PROJECTS[i].getRawClasspath();", "+\t\t\tint entriesLength = entries.length;", "+\t\t\tSystem.arraycopy(entries, 0, entries = new IClasspathEntry[jdkLibsLength+entriesLength], jdkLibsLength, entriesLength);", "+\t\t\tSystem.arraycopy(jdkEntries, 0, entries, 0, jdkLibsLength);", "+\t\t\tALL_PROJECTS[i].setRawClasspath(entries, null);", "+", "-\t\tSystem.out.println(\"done\");", "+\t\tSystem.out.println(\"(\"+(System.currentTimeMillis()-start)+\"ms)\");"]}], "num": 57783}
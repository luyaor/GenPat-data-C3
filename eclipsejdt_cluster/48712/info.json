{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c92685ef74523a4909e7671245c4eab", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a403ad5e63f83ea70a55ee08f8fdf86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "2d445826d63f77051d33e940a44a5c31fae7d718", "commitAfterChange": "c14134e37304f95ef7b6c63def5cdd59053dadda", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\t\tboolean foundInImport = false;", "+\t\t\t\tint importLevel = -1; // -1 = not found, 0 = on demand match, 1 = single import match", "-\t\t\t\t\t\t} else if (resolvedImport instanceof ReferenceBinding && importBinding.onDemand) {", "+\t\t\t\t\t\t} else if (importBinding.onDemand && importLevel < 1 && resolvedImport instanceof ReferenceBinding) {", "-\t\t\t\t\t\t\t\t\t\t\tif (!importBinding.onDemand) // single method selector import", "-\t\t\t\t\t\t\t\t\t\t\t\treturn compatibleMethod;", "-\t\t\t\t\t\t\t\t\t\t\tif (foundInImport)", "-\t\t\t\t\t\t\t\t\t\t\t\t// Answer error binding -- import on demand conflict; name found in two import on demand types.", "-\t\t\t\t\t\t\t\t\t\t\t\treturn new ProblemMethodBinding(compatibleMethod, selector, compatibleMethod.parameters, Ambiguous);", "+\t\t\t\t\t\t\t\t\t\t\tint matchingImportLevel = importBinding.onDemand ? 0 : 1;", "+\t\t\t\t\t\t\t\t\t\t\tif (matchingImportLevel == importLevel) {", "+\t\t\t\t\t\t\t\t\t\t\t\tscope = this;", "+\t\t\t\t\t\t\t\t\t\t\t\twhile (true) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tswitch (scope.kind) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase CLASS_SCOPE :", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn new ProblemMethodBinding(selector, argumentTypes, ((ClassScope) scope).referenceContext.binding, Ambiguous);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase COMPILATION_UNIT_SCOPE :", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn new ProblemMethodBinding(compatibleMethod, selector, compatibleMethod.parameters, Ambiguous);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t\t\tscope = scope.parent;", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\tfoundInImport = true;", "+\t\t\t\t\t\t\t\t\t\t\timportLevel = matchingImportLevel;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3a287c90babde4c6f72ebcc5e651c10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "f875f4161e47c5087f589529b7e7ee5cf66c1b26", "commitAfterChange": "3e03e3984540d3907fa7739b419f89dad9725944", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 58, "signatureBeforeChange": "  \tprivate void formatArrayQualifiedTypeReference(ArrayQualifiedTypeReference arrayQualifiedTypeReference)", "signatureAfterChange": " \tpublic boolean visit( \t\tArrayQualifiedTypeReference arrayQualifiedTypeReference, \t\tBlockScope scope)", "diff": ["-\tprivate void formatArrayQualifiedTypeReference(ArrayQualifiedTypeReference arrayQualifiedTypeReference) {", "-\t\tfinal int numberOfParens = (arrayQualifiedTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "-\t\tif (numberOfParens > 0) {", "-\t\t\tmanageOpeningParenthesizedExpression(arrayQualifiedTypeReference, numberOfParens);", "-\t\t}", "-\t\tformatQualifiedTypeReference(arrayQualifiedTypeReference);", "-\t\tformatLeadingDimensions(arrayQualifiedTypeReference, true);", "-\t\tif (numberOfParens > 0) {", "-\t\t\tmanageClosingParenthesizedExpression(arrayQualifiedTypeReference, numberOfParens);", "-\t\t}", "-\t}", "+\t\tArrayQualifiedTypeReference arrayQualifiedTypeReference,", "+\t\tBlockScope scope) {", "+\t\t\tfinal int numberOfParens = (arrayQualifiedTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\t\tif (numberOfParens > 0) {", "+\t\t\t\tmanageOpeningParenthesizedExpression(arrayQualifiedTypeReference, numberOfParens);", "+\t\t\t}", "+\t\t\tthis.scribe.printArrayQualifiedReference(arrayQualifiedTypeReference.tokens.length, arrayQualifiedTypeReference.sourceEnd);", "+\t\t\tint dimensions = getDimensions();", "+\t\t\tif (dimensions != 0) {", "+\t\t\t\tfor (int i = 0; i < dimensions; i++) {", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (numberOfParens > 0) {", "+\t\t\t\tmanageClosingParenthesizedExpression(arrayQualifiedTypeReference, numberOfParens);", "+\t\t\t}"]}], "num": 48712}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d78941ed2d54cde02f1f992cafb629a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21b10e20ceeb43d55cfccf1d7f91111f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "b569ead8ca8eb70f2238fa7623595fd9d9d2052b", "commitAfterChange": "fa3daf9bf67e6348fc32b1850f7aae915874e42e", "methodNumberBeforeChange": 350, "methodNumberAfterChange": 182, "signatureBeforeChange": " protected void ignoreInterfaceDeclaration()", "signatureAfterChange": " protected void consumeInvalidInterfaceDeclaration()", "diff": ["+}", "+protected void consumeInvalidInterfaceDeclaration() {", "+\t// BlockStatement ::= InvalidInterfaceDeclaration", "+\t//InterfaceDeclaration ::= Modifiersopt 'interface' 'Identifier' ExtendsInterfacesopt InterfaceHeader InterfaceBody", "+\tTypeDeclaration typeDecl = (TypeDeclaration) this.astStack[this.astPtr];", "+\tproblemReporter().cannotDeclareLocalInterface(typeDecl.name, typeDecl.sourceStart, typeDecl.sourceEnd);", "+\t// remove the ast node created in interface header", "+\tthis.astPtr--;", "+\tpushOnAstLengthStack(-1);", "+\tconcatNodeLists();", "+}", "-}", "-protected void ignoreInterfaceDeclaration() {", "-\t// BlockStatement ::= InvalidInterfaceDeclaration", "-\t//InterfaceDeclaration ::= Modifiersopt 'interface' 'Identifier' ExtendsInterfacesopt InterfaceHeader InterfaceBody", "-", "-\t// length declarations", "-\tint length;", "-\tif ((length = this.astLengthStack[this.astLengthPtr--]) != 0) {", "-\t\t//there are length declarations", "-\t\t//dispatch according to the type of the declarations", "-\t\tdispatchDeclarationInto(length);", "-\t}", "-\t", "-\tflushCommentsDefinedPriorTo(this.endStatementPosition);", "-", "-\t// report the problem and continue parsing", "-\tTypeDeclaration typeDecl = (TypeDeclaration) this.astStack[this.astPtr];", "-\ttypeDecl.bodyEnd = this.endStatementPosition;", "-\tproblemReporter().cannotDeclareLocalInterface(typeDecl.name, typeDecl.sourceStart, typeDecl.sourceEnd);", "-", "-\t// mark initializers with local type mark if needed", "-\tmarkInitializersWithLocalType(typeDecl);", "-", "-\t// remove the ast node created in interface header", "-\tthis.astPtr--;", "-\tpushOnAstLengthStack(-1);", "-\tconcatNodeLists();", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9231715c56349720c7b344ea2258fb87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 182, "methodNumberAfterChange": 41, "signatureBeforeChange": " protected void consumeTypeDeclarationsopt()", "signatureAfterChange": " protected void consumeAnnotationTypeDeclaration()", "diff": ["+protected void consumeAnnotationTypeDeclaration() {", "+\tint length;", "+\tif ((length = this.astLengthStack[this.astLengthPtr--]) != 0) {", "+\t\t//there are length declarations", "+\t\t//dispatch according to the type of the declarations", "+\t\tdispatchDeclarationInto(length);", "+\t}", "+", "+\tTypeDeclaration typeDecl = (TypeDeclaration) this.astStack[this.astPtr];", "+\t", "+\t// mark initializers with local type mark if needed", "+\tmarkInitializersWithLocalType(typeDecl);", "+", "+\t//convert constructor that do not have the type's name into methods", "+\ttypeDecl.checkConstructors(this);", "+\t", "+\t//always add <clinit> (will be remove at code gen time if empty)", "+\tif (this.scanner.containsAssertKeyword) {", "+\t\ttypeDecl.bits |= ASTNode.AddAssertionMASK;", "+\t}", "+\ttypeDecl.addClinit();", "+\ttypeDecl.bodyEnd = this.endStatementPosition;", "+\tif (length == 0 && !containsComment(typeDecl.bodyStart, typeDecl.bodyEnd)) {", "+\t\ttypeDecl.bits |= ASTNode.UndocumentedEmptyBlockMASK;", "+\t}", "+\ttypeDecl.declarationSourceEnd = flushCommentsDefinedPriorTo(this.endStatementPosition); ", "+}", "-}", "-protected void consumeTypeDeclarationsopt() {", "-\t// TypeDeclarationsopt ::= TypeDeclarations", "-\tint length;", "-\tif ((length = this.astLengthStack[this.astLengthPtr--]) != 0) {", "-\t\tthis.astPtr -= length;", "-\t\tSystem.arraycopy(this.astStack, this.astPtr + 1, this.compilationUnit.types = new TypeDeclaration[length], 0, length);", "-\t}", "-}"]}], "num": 59227}
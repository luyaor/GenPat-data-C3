{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51956fac4bef505f2da060941eb2cfb1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f14ead1a777534cf127c38db85e9006", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "e5c43dd471dbf8471a49f6e1d0d0bd8b0674d309", "commitAfterChange": "5ddd4f3ebd7249766144e83fbecfadbf5a91a48a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tMethodBinding createMethod(AbstractMethodDeclaration method)", "signatureAfterChange": " \tMethodBinding createMethod(AbstractMethodDeclaration method)", "diff": ["-\t\t\tif (method.isDefaultConstructor()) {", "+\t\t\tif (method.isDefaultConstructor())", "-\t\t\t}", "+", "+\t\tArgument[] argTypes = method.arguments;", "+\t\tint argLength = argTypes == null ? 0 : argTypes.length;", "+\t\tif (argLength > 0 && environment().options.sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\tif (argTypes[--argLength].isVarArgs)", "+\t\t\t\tmethod.binding.modifiers |= AccVarargs;", "+\t\t\twhile (--argLength >= 0) {", "+\t\t\t\tif (argTypes[argLength].isVarArgs)", "+\t\t\t\t\tproblemReporter().illegalVararg(argTypes[argLength], method);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e87fc880fe35b54f19ce739ebc57c244", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "80725f3277230b2c6b48548b2a0746bbcbd23f0d", "commitAfterChange": "2abb5c60316a8a4cab92c4dd0598d9a27a87d40b", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tprivate void formatMethodArguments( \t\t\tfinal Argument[] arguments, \t\t\tMethodScope scope, \t\t\tboolean spaceBeforeOpenParen, \t\t\tboolean spaceBetweenEmptyParameters, \t\t\tboolean spaceBeforeClosingParen, \t\t\tboolean spaceBeforeFirstParameter, \t\t\tboolean spaceBeforeComma, \t\t\tboolean spaceAfterComma, \t\t\tint methodDeclarationParametersAlignment)", "signatureAfterChange": " \tprivate void formatMethodArguments( \t\t\tReceiver receiver, \t\t\tfinal Argument[] arguments, \t\t\tMethodScope scope, \t\t\tboolean spaceBeforeOpenParen, \t\t\tboolean spaceBetweenEmptyParameters, \t\t\tboolean spaceBeforeClosingParen, \t\t\tboolean spaceBeforeFirstParameter, \t\t\tboolean spaceBeforeComma, \t\t\tboolean spaceAfterComma, \t\t\tint methodDeclarationParametersAlignment)", "diff": ["+\t\t\tReceiver receiver,", "-\t\tif (arguments != null) {", "+\t\tif (arguments != null || receiver != null) {", "-\t\t\tint argumentLength = arguments.length;", "+\t\t\tint receiverCount = receiver != null ? 1 : 0;", "+\t\t\tint realArgumentLength =  arguments != null ? arguments.length : 0;", "+\t\t\tint argumentLength = realArgumentLength + receiverCount;", "-\t\t\t\t\t\targuments[i].traverse(this, scope);", "+\t\t\t\t\t\tif (i < receiverCount) {", "+\t\t\t\t\t\t\treceiver.traverse(this, scope);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\targuments[i - receiverCount].traverse(this, scope);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fec882b9bc93f62a44f30be2bda70f48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "f18746495477338a9b83fca4f673d973bc3b28e9", "commitAfterChange": "b7c75d5af8ed9aa46f28be9d8bc08449dc25dc4e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic boolean deleteGeneratedFile(IFile generatedFile, IFile parentFile, IProgressMonitor progressMonitor ) \t\tthrows CoreException", "signatureAfterChange": " \tpublic boolean deleteGeneratedFile(IFile generatedFile, IFile parentFile, IProgressMonitor progressMonitor ) \t\tthrows CoreException", "diff": ["-\t\tif ( delete )", "+\t\tif ( delete ){", "+\t\t\tfinal IFolder genFolder = getGeneratedSourceFolder();", "+\t\t\tIContainer parent = generatedFile.getParent();", "+\t\t\twhile( !genFolder.equals(parent) && parent != null ){", "+\t\t\t\tfinal IResource[] members = parent.members();", "+\t\t\t\tIContainer grandParent = parent.getParent();", "+\t\t\t\t// last one turns the light off.", "+\t\t\t\tif( members == null || members.length == 0 )", "+\t\t\t\t\tparent.delete(true, progressMonitor);", "+\t\t\t\telse", "+\t\t\t\t\tbreak;", "+\t\t\t\tparent = grandParent;", "+\t\t\t}", "+\t\t}"]}], "num": 4491}
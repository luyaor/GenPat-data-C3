{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2119523e532bb61c7ef44281b4717a9c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdafbe882b60f7fb3b22b5f0bbc55963", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "d8f1f284f6441905e7bc6bf6eb6a9443c997d8fe", "commitAfterChange": "a20c7987b715f8a0fad829453c4bde4984a825aa", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["-\t\t\t\tif (q.length != this.arguments.length) {", "-\t\t\t\t\t// fail  TODO: can this still happen here?", "+\t\t\t\tif (q == null || q.length != this.arguments.length) {", "+\t\t\t\t\t// fail  TODO: can lengths actually differ here?", "+\t\t\t\t// TODO: in which cases do we have to assign this.resolvedType & this.descriptor (with problem bindings) to prevent NPE downstream??"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f45883a8133067137b00072010fa40b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnExplicitConstructorCall.java", "commitBeforeChange": "6900dd1a03d1ad901ee84c7d15bd4e318744abe6", "commitAfterChange": "f08042169ed40835df5f51519ff1fa8d2ac0cd70", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope scope)", "diff": ["-\t\tif (arguments != null) {", "-\t\t\tint argsLength = arguments.length;", "+\t\tif (this.arguments != null) {", "+\t\t\tint argsLength = this.arguments.length;", "-\t\t\t\targuments[a].resolveType(scope);", "+\t\t\t\tthis.arguments[a].resolveType(scope);", "-\t\tif (accessMode != This && receiverType != null) {", "+\t\tif (this.accessMode != This && receiverType != null) {"]}], "num": 7304}
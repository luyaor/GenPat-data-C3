{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a9485aed118a02e1d9c9ff3a9114152", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9dbed8b78216d41716e6fcd23cbe54e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "e4262ef08c6f8e26e57ca0c6211e0fdea3f40578", "commitAfterChange": "6a7a52c96b7229ab86908d69ec0e914d08a5352f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tvoid checkMemberValues(MemberValuePair[] valuePairs, Scope scope)", "signatureAfterChange": " \t \t \tvoid checkMemberValues(MemberValuePair[] valuePairs, Scope scope)", "diff": ["+\t", "-\t\t\t\t\tmemberValue.setExpectedType(method.returnType); // needed in case of generic method invocation", "+\t\t\t\t\texpectedValueType = method.returnType;", "+\t\t\t\t\tmemberValue.setExpectedType(expectedValueType); // needed in case of generic method invocation", "+\t\t\t\t\tcheckAnnotationValue(expectedValueType, method.declaringClass, method.selector, memberValue, scope);", "+\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5ce676b97f2bd9026722cce8a5b4327", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\texpression.setExpectedType(this.resolvedType); // needed in case of generic method invocation\t\t\t", "-\t\t\t\t\t\tscope.problemReporter().unnecessaryCast(this);", "+\t\t\t\t\t\tif (!usedForGenericMethodReturnTypeInference()) // used for generic type inference ?", "+\t\t\t\t\t\t\tscope.problemReporter().unnecessaryCast(this);", "-\t\t} else { // expression as a cast !!!!!!!!", "+\t\t} else { // expression as a cast"]}], "num": 60179}
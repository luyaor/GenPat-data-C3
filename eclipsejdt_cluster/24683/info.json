{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "378c1b3e9aad17a72892d30c1909cd13", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37dbd12da1be296b02322354bee3910f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "98ad487e103c268099d7117573693243c8d3b8fc", "commitAfterChange": "721a9dcda02493639666143934bddb089e848d18", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " protected void matchReportReference(QualifiedTypeReference qTypeRef, IJavaElement element, Binding elementBinding, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, Binding elementBinding, Scope scope, int accuracy, MatchLocator locator) throws CoreException", "diff": ["+ */", "+protected void matchReportReference(ASTNode reference, IJavaElement element, Binding elementBinding, Scope scope, int accuracy, MatchLocator locator) throws CoreException {", "+\tif (scope == null || (scope.kind != Scope.BLOCK_SCOPE && scope.kind != Scope.METHOD_SCOPE)) {", "+\t\tmatchReportReference(reference, element, elementBinding, accuracy, locator);", "+\t\treturn;", "+\t}", "+\t", "+\t// Look if some block scope local variable declarations include reference start position", "+\tBlockScope blockScope = (BlockScope) scope;", "+\tLocalDeclaration[] localDeclarations = blockScope.findLocalVariableDeclarations(reference.sourceStart);", "+\tint length = localDeclarations == null ? 0 : localDeclarations.length;", "+\tIJavaElement localElement = null;", "+\tIJavaElement[] otherElements = null;", "+", "+\t// Some local variable declaration are matching", "+\tif (length > 0) {", "+", "+\t\t// Set local element to first matching local declaration", "+\t\tint idx = 0;", "+\t\tfor (; idx<length; idx++) {", "+\t\t\tif (localDeclarations[idx] == null) break;", "+\t\t\tif (reference.sourceStart == localDeclarations[idx].declarationSourceStart) {", "+\t\t\t\tlocalElement = locator.createHandle(localDeclarations[idx], element);", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (idx>0 && localDeclarations[idx].sourceStart > reference.sourceStart) {", "+\t\t\t\tlocalElement = locator.createHandle(localDeclarations[idx-1], element);", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\tif (localElement == null && idx > 0) {", "+\t\t\tif (reference.sourceEnd < localDeclarations[idx-1].declarationEnd) {", "+\t\t\t\tlocalElement = locator.createHandle(localDeclarations[idx-1], element);", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\t// Store other local variable declarations in other elements", "+\t\tint size = 0;", "+\t\tfor (int j=1; j<length; j++) {", "+\t\t\tif (localDeclarations[j] == null) break;", "+\t\t\tif (reference.sourceStart == localDeclarations[j].declarationSourceStart) {", "+\t\t\t\tif (otherElements == null) {", "+\t\t\t\t\totherElements = new IJavaElement[length-j];", "+\t\t\t\t}", "+\t\t\t\totherElements[size++] = locator.createHandle(localDeclarations[j], element);", "+\t\t\t}", "+\t\t}", "+\t\tif (size > 0 && size != (length-1)) {", "+\t\t\tSystem.arraycopy(otherElements, 0, otherElements = new IJavaElement[size], 0, size);", "+\t\t}", "+\t}", "+\t", "+\t// Report match with local and other elements if any", "+\tmatchReportReference(reference, element, localElement, otherElements, elementBinding, accuracy, locator);", "-\tmatch = locator.newTypeReferenceMatch(element, elementBinding, accuracy, qTypeRef);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad9bb3caa9766be2836375e44d0bd1b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "commitAfterChange": "af607e2e1ad6576e50200e327ea9acd540ed1ad7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, Binding elementBinding, Scope scope, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(QualifiedNameReference qNameRef, IJavaElement element, Binding elementBinding, int accuracy, MatchLocator locator) throws CoreException", "diff": ["- */", "-protected void matchReportReference(ASTNode reference, IJavaElement element, Binding elementBinding, Scope scope, int accuracy, MatchLocator locator) throws CoreException {", "-\tif (scope == null || (scope.kind != Scope.BLOCK_SCOPE && scope.kind != Scope.METHOD_SCOPE)) {", "-\t\tmatchReportReference(reference, element, elementBinding, accuracy, locator);", "-\t\treturn;", "-\t}", "-\t", "-\t// Look if some block scope local variable declarations include reference start position", "-\tBlockScope blockScope = (BlockScope) scope;", "-\tLocalDeclaration[] localDeclarations = blockScope.findLocalVariableDeclarations(reference.sourceStart);", "-\tIJavaElement localElement = null;", "-\tIJavaElement[] otherElements = null;", "-", "-\t// Some local variable declaration are matching", "-\tif (localDeclarations != null) {", "-\t\tint length = localDeclarations.length;", "-", "-\t\t// Set local element to first matching local declaration", "-\t\tint idx = 0;", "-\t\tfor (; idx<length; idx++) {", "-\t\t\tif (localDeclarations[idx] == null) break;", "-\t\t\tif (reference.sourceStart == localDeclarations[idx].declarationSourceStart) {", "-\t\t\t\tlocalElement = locator.createHandle(localDeclarations[idx], element);", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tif (idx>0 && localDeclarations[idx].sourceStart > reference.sourceStart) {", "-\t\t\t\tlocalElement = locator.createHandle(localDeclarations[idx-1], element);", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\tif (localElement == null && idx > 0) {", "-\t\t\tif (reference.sourceEnd < localDeclarations[idx-1].declarationEnd) {", "-\t\t\t\tlocalElement = locator.createHandle(localDeclarations[idx-1], element);", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\t// Store other local variable declarations in other elements", "-\t\tint size = 0;", "-\t\tfor (int j=1; j<length; j++) {", "-\t\t\tif (localDeclarations[j] == null) break;", "-\t\t\tif (reference.sourceStart == localDeclarations[j].declarationSourceStart) {", "-\t\t\t\tif (otherElements == null) {", "-\t\t\t\t\totherElements = new IJavaElement[length-j];", "-\t\t\t\t}", "-\t\t\t\totherElements[size++] = locator.createHandle(localDeclarations[j], element);", "-\t\t\t}", "-\t\t}", "-\t\tif (size > 0 && size != (length-1)) {", "-\t\t\tSystem.arraycopy(otherElements, 0, otherElements = new IJavaElement[size], 0, size);", "-\t\t}", "-\t}", "-\t", "-\t// Report match with local and other elements if any", "-\tmatchReportReference(reference, element, localElement, otherElements, elementBinding, accuracy, locator);", "-}"]}], "num": 24683}
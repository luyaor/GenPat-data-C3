{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bec5248530d0e0707875c03981f8ce3c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4b7622cfc99a1056194135bae519291", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "605463bb98397b59c78b7fc56ee33e7e22fd8367", "commitAfterChange": "7428bd3b18a16b1860e6a1a28fbc6cd63967fdc6", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "signatureAfterChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "diff": ["-\t\tint firstColumn = 1 + this.indentationLevel + JAVADOC_LINE_PREFIX_LENGTH;", "+\t\tint firstColumn = 1 + this.indentationLevel + BLOCK_LINE_PREFIX_LENGTH;", "-\t\t\tthis.numberOfIndentations += (JAVADOC_LINE_PREFIX_LENGTH / this.indentationSize) + 1;", "+\t\t\tthis.numberOfIndentations += (BLOCK_LINE_PREFIX_LENGTH / this.indentationSize) + 1;", "-\t\t    \t\tbuffer.append(JAVADOC_LINE_PREFIX);", "+\t\t    \t\tbuffer.append(BLOCK_LINE_PREFIX);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d159933574a9a504296486f71f0d299c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "605463bb98397b59c78b7fc56ee33e7e22fd8367", "commitAfterChange": "7428bd3b18a16b1860e6a1a28fbc6cd63967fdc6", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tprivate void printJavadocGapLines(int textStartPosition, int textEndPosition, int newLines, boolean clearBlankLines, boolean footer, StringBuffer output)", "signatureAfterChange": " \tprivate void printJavadocGapLines(int textStartPosition, int textEndPosition, int newLines, boolean clearBlankLines, boolean footer, StringBuffer output)", "diff": ["-\t\t\t\t\t\t\tbuffer.append(JAVADOC_LINE_PREFIX);", "-\t\t\t\t\t\t\tthis.column += JAVADOC_LINE_PREFIX_LENGTH;", "+\t\t\t\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\tthis.column += BLOCK_LINE_PREFIX_LENGTH;", "-\t\t\t\t\t\t\t\t\tbuffer.append(JAVADOC_LINE_PREFIX);", "-\t\t\t\t\t\t\t\t\tthis.column += JAVADOC_LINE_PREFIX_LENGTH;", "+\t\t\t\t\t\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\t\t\tthis.column += BLOCK_LINE_PREFIX_LENGTH;", "-\t\t\t\t\tbuffer.append(JAVADOC_LINE_PREFIX);", "-\t\t\t\t\tthis.column += JAVADOC_LINE_PREFIX_LENGTH;", "+\t\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\tthis.column += BLOCK_LINE_PREFIX_LENGTH;"]}], "num": 68327}
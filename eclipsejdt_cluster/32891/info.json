{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6db61990cba034c4b1fa92220ccb9cbf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "993d2bd04cddb4e6c421e6ccebe4637c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java", "commitBeforeChange": "0068d668d02e74d5e05cae7551f5be0e4c9df655", "commitAfterChange": "50d6f2f45e4a04d5b51844d834d563b6a353f472", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "\r \r \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding type;\r", "-\t\t\t\ttype = BooleanBinding;\r", "+\t\t\t\tthis.typeBinding = BooleanBinding;\r", "-\t\t\t\ttype = ByteBinding;\r", "+\t\t\t\tthis.typeBinding = ByteBinding;\r", "-\t\t\t\ttype = CharBinding;\r", "+\t\t\t\tthis.typeBinding = CharBinding;\r", "-\t\t\t\ttype = DoubleBinding;\r", "+\t\t\t\tthis.typeBinding = DoubleBinding;\r", "-\t\t\t\ttype = FloatBinding;\r", "+\t\t\t\tthis.typeBinding = FloatBinding;\r", "-\t\t\t\ttype = IntBinding;\r", "+\t\t\t\tthis.typeBinding = IntBinding;\r", "-\t\t\t\ttype = LongBinding;\r", "+\t\t\t\tthis.typeBinding = LongBinding;\r", "-\t\treturn type;\r", "+\t\treturn this.typeBinding;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9223f59a4b070935398a1b4614cb0de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 19, "signatureBeforeChange": " public BinaryTypeBinding cacheMissingBinaryType(char[][] compoundName, CompilationUnitDeclaration unit)", "signatureAfterChange": " public MissingTypeBinding createMissingType(PackageBinding packageBinding, char[][] compoundName)", "diff": ["-public BinaryTypeBinding cacheMissingBinaryType(char[][] compoundName, CompilationUnitDeclaration unit) {", "-\t// report the missing class file first", "-\tproblemReporter.isClassPathCorrect(", "-\t\tcompoundName, ", "-\t\tunit == null ? this.unitBeingCompleted : unit, ", "-\t\tthis.missingClassFileLocation);", "-", "-\tPackageBinding packageBinding = computePackageFrom(compoundName);", "-\t// create a proxy for the missing BinaryType", "-\tMissingBinaryTypeBinding type = new MissingBinaryTypeBinding(packageBinding, compoundName, this);", "-\tif (type.id != TypeIds.T_JavaLangObject) {", "-\t\t// make Object be its superclass - it could in turn be missing as well", "-\t\tReferenceBinding objectType = getType(TypeConstants.JAVA_LANG_OBJECT);", "-\t\tif (objectType == null)", "-\t\t\tobjectType = cacheMissingBinaryType(TypeConstants.JAVA_LANG_OBJECT, unit);\t// create a proxy for the missing Object type\t\t", "-\t\ttype.setMissingSuperclass(objectType);", "-\t}", "-\tpackageBinding.addType(type);", "-\treturn type;\t", "-}", "+*/", "+public MissingTypeBinding createMissingType(PackageBinding packageBinding, char[][] compoundName) {", "+\t// create a proxy for the missing BinaryType", "+\tif (packageBinding == null) {", "+\t\tpackageBinding = computePackageFrom(compoundName, true /* missing */);", "+\t\tif (packageBinding == TheNotFoundPackage) packageBinding = this.defaultPackage;", "+\t}", "+\tMissingTypeBinding missingType = new MissingTypeBinding(packageBinding, compoundName, this);", "+\tif (missingType.id != TypeIds.T_JavaLangObject) {", "+\t\t// make Object be its superclass - it could in turn be missing as well", "+\t\tReferenceBinding objectType = getType(TypeConstants.JAVA_LANG_OBJECT);", "+\t\tif (objectType == null) {", "+\t\t\tobjectType = createMissingType(null, TypeConstants.JAVA_LANG_OBJECT);\t// create a proxy for the missing Object type\t\t", "+\t\t}", "+\t\tmissingType.setMissingSuperclass(objectType);", "+\t}", "+\tpackageBinding.addType(missingType);", "+\treturn missingType;\t", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddc5bf54454de86ac08ebf626e157376", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "80a36bf53ae731edac012c99749b4fd073634fd5", "commitAfterChange": "775667d78092a7c5a2c35b021921f25b4037d7f4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void faultInImports()", "signatureAfterChange": " void faultInImports()", "diff": ["+\t// keep static imports with normal imports until there is a reason to split them up", "+\t// on demand imports continue to be packages & types. need to check on demand type imports for fields/methods", "+\t// single imports change from being just types to types or fields", "-\t\tfor (int j = 0; j < index; j++)", "-\t\t\tif (resolvedImports[j].onDemand == importReference.onDemand)", "+\t\tfor (int j = 0; j < index; j++) {", "+\t\t\tif (resolvedImports[j].onDemand == importReference.onDemand) {", "-\t\tif (importReference.onDemand == true)", "+\t\t\t}", "+\t\t}", "+\t\tif (importReference.onDemand) {", "-\t\tif (importReference.onDemand) {", "-\t\t\tBinding importBinding = findOnDemandImport(compoundName);", "+", "+\t\t\tBinding importBinding = findOnDemandImport(compoundName, importReference.isStatic());", "-\t\t\tBinding typeBinding = findSingleTypeImport(compoundName);", "-\t\t\tif (!typeBinding.isValidBinding()) {", "-\t\t\t\tproblemReporter().importProblem(importReference, typeBinding);", "+\t\t\tBinding importBinding = findSingleImport(compoundName, importReference.isStatic());", "+\t\t\tif (!importBinding.isValidBinding()) {", "+\t\t\t\tproblemReporter().importProblem(importReference, importBinding);", "-\t\t\tif (typeBinding instanceof PackageBinding) {", "+\t\t\tif (importBinding instanceof PackageBinding) {", "-\t\t\tif (typeBinding instanceof ReferenceBinding) {", "-\t\t\t\tReferenceBinding referenceBinding = (ReferenceBinding) typeBinding;", "-\t\t\t\tif (importReference.isTypeUseDeprecated(referenceBinding, this)) {", "-\t\t\t\t\tproblemReporter().deprecatedType((TypeBinding) typeBinding, importReference);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tReferenceBinding existingType = typesBySimpleNames.get(compoundName[compoundName.length - 1]);", "-\t\t\tif (existingType != null) {", "-\t\t\t\t// duplicate test above should have caught this case, but make sure", "-\t\t\t\tif (existingType == typeBinding) {", "+\t\t\t// collisions between an imported static field & a type should be checked according to spec... but currently not by javac", "+\t\t\tif (importBinding instanceof ReferenceBinding) {", "+\t\t\t\tReferenceBinding referenceBinding = (ReferenceBinding) importBinding;", "+\t\t\t\tif (importReference.isTypeUseDeprecated(referenceBinding, this))", "+\t\t\t\t\tproblemReporter().deprecatedType(referenceBinding, importReference);", "+", "+\t\t\t\tReferenceBinding existingType = typesBySimpleNames.get(compoundName[compoundName.length - 1]);", "+\t\t\t\tif (existingType != null) {", "+\t\t\t\t\t// duplicate test above should have caught this case, but make sure", "+\t\t\t\t\tif (existingType == referenceBinding)", "+\t\t\t\t\t\tcontinue nextImport;", "+\t\t\t\t\t// either the type collides with a top level type or another imported type", "+\t\t\t\t\tfor (int j = 0, length = topLevelTypes.length; j < length; j++) {", "+\t\t\t\t\t\tif (CharOperation.equals(topLevelTypes[j].sourceName, existingType.sourceName)) {", "+\t\t\t\t\t\t\tproblemReporter().conflictingImport(importReference);", "+\t\t\t\t\t\t\tcontinue nextImport;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tproblemReporter().duplicateImport(importReference);", "-\t\t\t\t// either the type collides with a top level type or another imported type", "-\t\t\t\tfor (int j = 0, length = topLevelTypes.length; j < length; j++) {", "-\t\t\t\t\tif (CharOperation.equals(topLevelTypes[j].sourceName, existingType.sourceName)) {", "-\t\t\t\t\t\tproblemReporter().conflictingImport(importReference);", "-\t\t\t\t\t\tcontinue nextImport;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tproblemReporter().duplicateImport(importReference);", "-\t\t\t\tcontinue nextImport;", "+\t\t\t\ttypesBySimpleNames.put(compoundName[compoundName.length - 1], referenceBinding);", "-\t\t\tresolvedImports[index++] = new ImportBinding(compoundName, false, typeBinding, importReference);", "-\t\t\ttypesBySimpleNames.put(compoundName[compoundName.length - 1], (ReferenceBinding) typeBinding);", "+\t\t\tresolvedImports[index++] = new ImportBinding(compoundName, false, importBinding, importReference);", "-\t\tif (!binding.onDemand)", "+\t\tif (!binding.onDemand && binding.resolvedImport instanceof ReferenceBinding)"]}], "num": 32891}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "922174a66f86a4dc85f79c8b783e448b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "088d0154331cfdfff564fb64af229999", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/CompilationResult.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic void record(CategorizedProblem newProblem, ReferenceContext referenceContext)", "signatureAfterChange": "  public void record(CategorizedProblem newProblem, ReferenceContext referenceContext)", "diff": ["-", "-\tpublic void record(CategorizedProblem newProblem, ReferenceContext referenceContext) {", "-", "-\t\t//new Exception(\"VERBOSE PROBLEM REPORTING\").printStackTrace();", "-\t\tif(newProblem.getID() == IProblem.Task) {", "-\t\t\t\trecordTask(newProblem);", "-\t\t\t\treturn;", "-\t\t}", "-\t\tif (problemCount == 0) {", "-\t\t\tproblems = new CategorizedProblem[5];", "-\t\t} else if (problemCount == problems.length) {", "-\t\t\tSystem.arraycopy(problems, 0, (problems = new CategorizedProblem[problemCount * 2]), 0, problemCount);", "-\t\t}", "-\t\tproblems[problemCount++] = newProblem;", "-\t\tif (referenceContext != null){", "-\t\t\tif (problemsMap == null) problemsMap = new HashMap(5);", "-\t\t\tif (firstErrors == null) firstErrors = new HashSet(5);", "-\t\t\tif (newProblem.isError() && !referenceContext.hasErrors()) firstErrors.add(newProblem);", "-\t\t\tproblemsMap.put(newProblem, referenceContext);", "-\t\t}", "-\t\tif ((newProblem.getID() & IProblem.Syntax) != 0 && newProblem.isError())", "-\t\t\tthis.hasSyntaxError = true;", "-\t}", "+", "+public void record(CategorizedProblem newProblem, ReferenceContext referenceContext) {", "+\t//new Exception(\"VERBOSE PROBLEM REPORTING\").printStackTrace();", "+\tif(newProblem.getID() == IProblem.Task) {", "+\t\t\trecordTask(newProblem);", "+\t\t\treturn;", "+\t}", "+\tif (this.problemCount == 0) {", "+\t\tthis.problems = new CategorizedProblem[5];", "+\t} else if (this.problemCount == this.problems.length) {", "+\t\tSystem.arraycopy(this.problems, 0, (this.problems = new CategorizedProblem[this.problemCount * 2]), 0, this.problemCount);", "+\t}", "+\tthis.problems[this.problemCount++] = newProblem;", "+\tif (referenceContext != null){", "+\t\tif (this.problemsMap == null) this.problemsMap = new HashMap(5);", "+\t\tif (this.firstErrors == null) this.firstErrors = new HashSet(5);", "+\t\tif (newProblem.isError() && !referenceContext.hasErrors()) this.firstErrors.add(newProblem);", "+\t\tthis.problemsMap.put(newProblem, referenceContext);", "+\t}", "+\tif ((newProblem.getID() & IProblem.Syntax) != 0 && newProblem.isError())", "+\t\tthis.hasSyntaxError = true;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a2acea7715c1868ddd47c05e2e927a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/CompilationResult.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic CategorizedProblem[] getProblems()", "signatureAfterChange": " public CategorizedProblem[] getProblems()", "diff": ["-\t */", "-\tpublic CategorizedProblem[] getProblems() {", "-\t\t", "-\t\t// Re-adjust the size of the problems if necessary.", "-\t\tif (problems != null) {", "-\t\t\tdiscardSuppressedWarnings();", "-\t", "-\t\t\tif (this.problemCount != problems.length) {", "-\t\t\t\tSystem.arraycopy(problems, 0, (problems = new CategorizedProblem[problemCount]), 0, problemCount);", "-\t\t\t}", "-\t", "-\t\t\tif (this.maxProblemPerUnit > 0 && this.problemCount > this.maxProblemPerUnit){", "-\t\t\t\tquickPrioritize(problems, 0, problemCount - 1);", "-\t\t\t\tthis.problemCount = this.maxProblemPerUnit;", "-\t\t\t\tSystem.arraycopy(problems, 0, (problems = new CategorizedProblem[problemCount]), 0, problemCount);", "-\t\t\t}", "-\t", "-\t\t\t// Sort problems per source positions.", "-\t\t\tquickSort(problems, 0, problems.length-1);", "-\t\t}", "-\t\treturn problems;", "-\t}", "+ */", "+public CategorizedProblem[] getProblems() {", "+\t// Re-adjust the size of the problems if necessary.", "+\tif (this.problems != null) {", "+\t\tdiscardSuppressedWarnings();", "+", "+\t\tif (this.problemCount != this.problems.length) {", "+\t\t\tSystem.arraycopy(this.problems, 0, (this.problems = new CategorizedProblem[this.problemCount]), 0, this.problemCount);", "+\t\t}", "+", "+\t\tif (this.maxProblemPerUnit > 0 && this.problemCount > this.maxProblemPerUnit){", "+\t\t\tquickPrioritize(this.problems, 0, this.problemCount - 1);", "+\t\t\tthis.problemCount = this.maxProblemPerUnit;", "+\t\t\tSystem.arraycopy(this.problems, 0, (this.problems = new CategorizedProblem[this.problemCount]), 0, this.problemCount);", "+\t\t}", "+", "+\t\t// Stable sort problems per source positions.", "+\t\tArrays.sort(this.problems, 0, this.problems.length, CompilationResult.PROBLEM_COMPARATOR);", "+\t\t//quickSort(problems, 0, problems.length-1);", "+\t}", "+\treturn this.problems;", "+}"]}], "num": 32387}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4071bdb3ccb28b4d9f577b0f48e63913", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38f656535469353adab7ae6f5e23160b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/PackageBinding.java", "commitBeforeChange": "9ca626bedc0237851594e44ef2cc849d0e315bfd", "commitAfterChange": "917862b43f0f61fc17faa68fa8a6509dfa2a089a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  public Binding getTypeOrPackage(char[] name)", "signatureAfterChange": "  public Binding getTypeOrPackage(char[] name)", "diff": ["-\t\treferenceBinding = (ReferenceBinding) BinaryTypeBinding.resolveType(referenceBinding, this.environment, false /* no raw conversion for now */);", "-\t\tif (referenceBinding.isNestedType())", "-\t\t\treturn new ProblemReferenceBinding(new char[][]{name}, referenceBinding, ProblemReasons.InternalNameProvided);", "-\t\treturn referenceBinding;", "+\t\tif ((referenceBinding.tagBits & TagBits.HasMissingType) == 0) {", "+\t\t\treferenceBinding = (ReferenceBinding) BinaryTypeBinding.resolveType(referenceBinding, this.environment, false /* no raw conversion for now */);", "+\t\t\tif (referenceBinding.isNestedType()) {", "+\t\t\t\treturn new ProblemReferenceBinding(new char[][]{name}, referenceBinding, ProblemReasons.InternalNameProvided);", "+\t\t\t}", "+\t\t\treturn referenceBinding;", "+\t\t}", "-\tif (packageBinding != null && packageBinding != LookupEnvironment.TheNotFoundPackage)", "+\tif (packageBinding != null && packageBinding != LookupEnvironment.TheNotFoundPackage) {", "-", "+\t}", "-\t\t\tif (referenceBinding.isNestedType())", "+\t\t\tif (referenceBinding.isNestedType()) {", "+\t\t\t}", "-\t\tif ((packageBinding = findPackage(name)) != null)", "+\t\tif ((packageBinding = findPackage(name)) != null) {", "+\t\t}", "+\t\tif (referenceBinding != null && referenceBinding != LookupEnvironment.TheNotFoundType) {", "+\t\t\treturn referenceBinding; // found cached missing type - check if package conflict", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfdcbc7e3ba44e56b3f17fd0ee8cfc43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\tpublic FlowInfo analyseCode(", "-\t\tBlockScope currentScope,", "-\t\tFlowContext flowContext,", "+public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext,", "-", "-\t\t// record variable initialization if any", "-\t\tif (flowInfo.isReachable()) {", "-\t\t\tbits |= IsLocalDeclarationReachable; // only set if actually reached", "-\t\t}", "-\t\tif (this.initialization == null) ", "-\t\t\treturn flowInfo;", "-\t\t\t", "-\t\tint nullStatus = this.initialization.nullStatus(flowInfo);", "-\t\tflowInfo =", "-\t\t\tthis.initialization", "-\t\t\t\t.analyseCode(currentScope, flowContext, flowInfo)", "-\t\t\t\t.unconditionalInits();", "-\t\t", "-\t\tflowInfo.markAsDefinitelyAssigned(binding);", "+\t// record variable initialization if any", "+\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0) {", "+\t\tbits |= IsLocalDeclarationReachable; // only set if actually reached", "+\t}", "+\tif (this.initialization == null) { ", "+\t\treturn flowInfo;", "+\t}", "+\tint nullStatus = this.initialization.nullStatus(flowInfo);", "+\tflowInfo =", "+\t\tthis.initialization", "+\t\t\t.analyseCode(currentScope, flowContext, flowInfo)", "+\t\t\t.unconditionalInits();", "+\tflowInfo.markAsDefinitelyAssigned(binding);", "+\tif ((this.binding.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\t\tdefault:", "+\t\t\t\tflowInfo.markAsDefinitelyUnknown(this.binding);", "-\t\treturn flowInfo;", "+\treturn flowInfo;", "+}"]}], "num": 10051}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c2f18bfc318a963f8628710cf4874b59", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20c7347557a78033bd5ecec31182c7d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java", "commitBeforeChange": "83445beb69e15e5eb2488d8746136cbbd8c4461a", "commitAfterChange": "cff902ed861deb5cff157c45c8eb21f377de7ae3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic boolean setUpperBounds(TypeBinding[] upperBounds, ReferenceBinding javaLangObject)", "signatureAfterChange": " \t \tpublic boolean setUpperBounds(TypeBinding[] upperBounds, ReferenceBinding javaLangObject)", "diff": ["+\t\tif (!isConsistentIntersection(upperBounds))", "+\t\t\treturn false;", "-\t\t\tif (!aBound.isWildcard() && !aBound.isTypeVariable() && aBound.isProperType(true)) {", "-\t\t\t\t// check for inconsistency between any two real types:", "-\t\t\t\tfor (int j = 0; j < upperBounds.length; j++) {", "-\t\t\t\t\tif (i == j) continue;", "-\t\t\t\t\tTypeBinding otherBound = upperBounds[j];", "-\t\t\t\t\tif (!otherBound.isWildcard() && !otherBound.isTypeVariable() && otherBound.isProperType(true))", "-\t\t\t\t\t\tif (aBound.erasure().isCompatibleWith(otherBound.erasure()))", "-\t\t\t\t\t\t\tif (!aBound.isCompatibleWith(otherBound))", "-\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t\t\tthis.superclass = (ReferenceBinding) upperBounds[i];", "+\t\t\t\t\tthis.superclass = (ReferenceBinding) aBound;", "-\t\t\t\t// TODO: what about additional super classes?? (see isCompatibleWith)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2eaf85d222c964e0b93522bd17a75060", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "4582114353aa3904268b70cdd42dc3781becfb01", "commitAfterChange": "7b316625d96d66e552d608c4488c77581168d213", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate String getMatchRuleString(final int matchRule)", "signatureAfterChange": " \tprivate String getMatchRuleString(final int matchRule)", "diff": ["-\t\tfor (int i=1; i<=7; i++) {", "-\t\t\tint bit = matchRule & (1<<i);", "+\t\tfor (int i=1; i<=8; i++) {", "+\t\t\tint bit = matchRule & (1<<(i-1));", "+\t\t\tif (buffer.length()>0) buffer.append(\" | \"); //$NON-NLS-1$", "-\t\t\t\t\tif (buffer.length()>0) buffer.append('+');", "-\t\t\t\t\tif (buffer.length()>0) buffer.append('+');", "-\t\t\t\t\tif (buffer.length()>0) buffer.append('+');", "-\t\t\t\t\tif (buffer.length()>0) buffer.append('+');", "-\t\t\t\t\tif (buffer.length()>0) buffer.append('+');", "-\t\t\t\t\tif (buffer.length()>0) buffer.append('+');", "-\t\t\t\t\tif (buffer.length()>0) buffer.append('+');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ee5fb9e63bb12b8f2058bcda858b655", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "0307cad3f1b01ed5d7ce67bc78cd9b706e4819f3", "commitAfterChange": "7a57dee588cd632418aaf1f630bac2c2a5d6439a", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tpublic static CompilationUnitDeclaration resolve( \t\tICompilationUnit unitElement, \t\tNodeSearcher nodeSearcher, \t\tboolean cleanUp, \t\tchar[] source, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic CompilationUnitDeclaration resolve( \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit,  \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "diff": ["-\t", "-\tpublic static CompilationUnitDeclaration resolve(", "-\t\tICompilationUnit unitElement,", "-\t\tNodeSearcher nodeSearcher,", "-\t\tboolean cleanUp,", "-\t\tchar[] source,", "-\t\tWorkingCopyOwner owner,", "-\t\tIProgressMonitor monitor)", "-\t\tthrows JavaModelException {", "-\t\t", "-\t\tIPackageFragment packageFragment = (IPackageFragment)unitElement.getAncestor(IJavaElement.PACKAGE_FRAGMENT);", "-\t\tchar[][] packageName = null;", "-\t\tif (packageFragment != null){", "-\t\t\tpackageName = CharOperation.splitOn('.', packageFragment.getElementName().toCharArray());", "-\t\t}", "-\t\tString fileName = unitElement.getElementName();", "-\t\tIJavaProject project = unitElement.getJavaProject();", "-\t\treturn resolve(source, packageName, fileName, project, nodeSearcher, cleanUp, owner, monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b70cd719a0b5b106e404b05b0c8e0d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateElementInCUOperation.java", "commitBeforeChange": "90d481edc9060cc498a8f085b08186108312e37b", "commitAfterChange": "f3a3c06f6e68ab7680c250209b9759ac3d56fec6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\t\tgenerateNewCompilationUnitDOM(unit);", "-\t\t\tif (fCreationOccurred) {", "+\t\t\tgenerateNewCompilationUnitAST(unit);", "+\t\t\tif (this.creationOccurred) {", "-\t\t\t\tIBuffer buffer = unit.getBuffer();", "-\t\t\t\tif (buffer  == null) return;", "-\t\t\t\tchar[] bufferContents = buffer.getCharacters();", "-\t\t\t\tif (bufferContents == null) return;", "-\t\t\t\tchar[] elementContents = Util.normalizeCRs(getCreatedElementCharacters(), bufferContents);", "-\t\t\t\tswitch (fReplacementLength) {", "-\t\t\t\t\tcase -1 : ", "-\t\t\t\t\t\t// element is append at the end", "-\t\t\t\t\t\tbuffer.append(elementContents);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 0 :", "-\t\t\t\t\t\t// element is inserted", "-\t\t\t\t\t\tbuffer.replace(fInsertionPosition, 0, elementContents);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault :", "-\t\t\t\t\t\t// element is replacing the previous one", "-\t\t\t\t\t\tbuffer.replace(fInsertionPosition, fReplacementLength, elementContents);", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51d7d243c93f01e42b95935a97159425", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "7b0f09fd73b49ba4dc507ba4a634d425ab3e92c2", "commitAfterChange": "90ccf89195ab29ecb5a569cf526f683aefa3263d", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r protected void openWhenClosed(IProgressMonitor pm, IBuffer buffer) throws JavaModelException", "signatureAfterChange": "\r public IResource getResource()", "diff": ["+ */\r", "+public IResource getResource() {\r", "+\treturn null;\r", "+}\r", "-protected void openWhenClosed(IProgressMonitor pm, IBuffer buffer) throws JavaModelException {\r", "-\tif (buffer == null && this.bufferFactory != null) {\r", "-\t\tbuffer = this.bufferFactory.createBuffer(this);\r", "-\t\tif (buffer != null){\r", "-\t\t\tif (buffer.getCharacters() == null){\r", "-\t\t\t\tCompilationUnit original = (CompilationUnit) getOriginalElement();\r", "-\t\t\t\tbuffer.setContents(original.getContents());\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\tsuper.openWhenClosed(pm, buffer);\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2f3b6f73bbe4c03228530c725ea327f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateTypeMemberOperation.java", "commitBeforeChange": "90d481edc9060cc498a8f085b08186108312e37b", "commitAfterChange": "f3a3c06f6e68ab7680c250209b9759ac3d56fec6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected void generateNewCompilationUnitDOM(ICompilationUnit cu) throws JavaModelException", "signatureAfterChange": " protected abstract SimpleName rename(ASTNode node, SimpleName newName);", "diff": ["-// TODO - JDOM - remove once model ported off of JDOM", "-protected void generateNewCompilationUnitDOM(ICompilationUnit cu) throws JavaModelException {", "-\tIBuffer buffer = cu.getBuffer();", "-\tif (buffer == null) return;", "-\tchar[] prevSource = buffer.getCharacters();", "-\tif (prevSource == null) return;", "-", "-\t// create a JDOM for the compilation unit", "-\tfCUDOM = (new DOMFactory()).createCompilationUnit(prevSource, cu.getElementName());", "-\tIDOMNode parent = ((JavaElement) getParentElement()).findNode(fCUDOM);", "-\tif (parent == null) {", "-\t\t//#findNode does not work for autogenerated CUs as the contents are empty", "-\t\tparent = fCUDOM;", "-\t}", "-\tIDOMNode child = deprecatedGenerateElementDOM();", "-\tif (child != null) {", "-\t\tinsertDOMNode(parent, child);", "-\t}", "-\tworked(1);", "-}", "+protected abstract SimpleName rename(ASTNode node, SimpleName newName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5b8926148a9a85b1fd8efcccec0dd46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "dbb24333d1a9f6e740de2fc6e65eb72985f1b637", "commitAfterChange": "06941e026ea4dbfbd7f404b306f62a143ee43165", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t\tpublic void preferenceChange(PreferenceChangeEvent event)", "signatureAfterChange": " \t\tpublic void preferenceChange(PreferenceChangeEvent event)", "diff": ["-\t\t\t// update the changed value in the options map.", "-\t\t\tMap<String, String> options = _optionsMaps.get(_proj);", "-\t\t\tif (null == options) {", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\toptions.put(event.getKey(), (String)event.getNewValue());", "-\t\t\t", "-\t\t\t// handle change to generated source directory", "-\t\t\tif ( AptPreferenceConstants.APT_GENSRCDIR.equals( event.getKey() ) ) {", "-", "-\t\t\t\tif ( event.getNewValue() != null && ! event.getNewValue().equals( event.getOldValue())) {", "-\t\t\t\t\tGeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager( _proj );", "-\t\t\t\t\tgfm.setGeneratedSourceFolderName( (String)event.getNewValue() );", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "+            changePreference(event.getKey(), (String)event.getNewValue(), (String)event.getOldValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f78b44e1cd3a8fdb4978f65c1bb133b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "ee446c21d0aaa4f4c4b0513ad11960ed53ccba7d", "commitAfterChange": "271be052e104f1beefee4cd78039eca6ee6adb4f", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 51, "signatureBeforeChange": "  private void visitIfNeeded(FieldDeclaration field, TypeDeclaration declaringType)", "signatureAfterChange": " public void setRequestor(ISourceElementRequestor requestor)", "diff": ["-", "-private void visitIfNeeded(FieldDeclaration field, TypeDeclaration declaringType) {", "-\tif (this.localDeclarationVisitor != null ", "-\t\t&& (field.bits & ASTNode.HasLocalType) != 0) {", "-\t\t\tif (field.initialization != null) {", "-\t\t\t\ttry {", "-\t\t\t\t\tthis.localDeclarationVisitor.pushDeclaringType(declaringType);", "-\t\t\t\t\tfield.initialization.traverse(this.localDeclarationVisitor, (MethodScope) null);", "-\t\t\t\t} finally {", "-\t\t\t\t\tthis.localDeclarationVisitor.popDeclaringType();", "-\t\t\t\t}", "-\t\t\t}", "-\t}", "-}", "+public void setRequestor(ISourceElementRequestor requestor) {", "+\tthis.requestor = requestor;", "+\tthis.notifier.requestor = requestor;"]}], "num": 64721}
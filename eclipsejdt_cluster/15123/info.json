{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af235e682691e191a8d0f34cebfece43", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fe979947da2711d5703c1628c59f1af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "b3906111a4433325958de7604465d8f0e49325d2", "commitAfterChange": "0b27309efdaba54bffa19e81e0f1e5ae6f176884", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope)", "signatureAfterChange": " \t \tprivate TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope)", "diff": ["-\t\t\t\tTypeBinding [] inferredTypes = inferElidedTypes(((ParameterizedTypeBinding) receiverType).genericType(), receiverType.enclosingType(), argumentTypes, scope);", "+\t\t\t\tTypeBinding [] inferredTypes = inferElidedTypes((ParameterizedTypeBinding) receiverType, receiverType.enclosingType(), argumentTypes, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "259f0079b492838cea9a121e9547b157", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "b3906111a4433325958de7604465d8f0e49325d2", "commitAfterChange": "0b27309efdaba54bffa19e81e0f1e5ae6f176884", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " boolean resolvePart2(ResolutionState state)", "signatureAfterChange": " boolean resolvePart2(ResolutionState state)", "diff": ["-\t\tTypeBinding [] inferredTypes = inferElidedTypes(genericType, genericType.enclosingType(), state.argumentTypes, state.scope);", "+\t\tTypeBinding [] inferredTypes = inferElidedTypes((ParameterizedTypeBinding) this.resolvedType, this.resolvedType.enclosingType(), state.argumentTypes, state.scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a85380ee230e24244b94eff9fd6f758", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "b3906111a4433325958de7604465d8f0e49325d2", "commitAfterChange": "0b27309efdaba54bffa19e81e0f1e5ae6f176884", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding [] inferredTypes = inferElidedTypes(((ParameterizedTypeBinding) this.resolvedType).genericType(), null, argumentTypes, scope);", "+\t\tTypeBinding [] inferredTypes = inferElidedTypes((ParameterizedTypeBinding) this.resolvedType, null, argumentTypes, scope);"]}], "num": 15123}
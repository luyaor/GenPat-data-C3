{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68049e11ad5e464ebd923beb60fc8df4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e8f6f3616a4fb14422be1eec1a63f81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "717a44c6b6c761be0c48243cde9dff6857a6db32", "commitAfterChange": "df9941361641a347d1ba4ee80fe7f9c7468ba17a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \r \tpublic void resolve(MethodScope initializationScope)", "signatureAfterChange": "\r \r \tpublic void resolve(MethodScope initializationScope)", "diff": ["-\t\tif (!hasBeenResolved && binding != null && binding.isValidBinding()) {\r", "-\t\t\thasBeenResolved = true;\r", "-\t\t\tif (isTypeUseDeprecated(binding.type, initializationScope))\r", "-\t\t\t\tinitializationScope.problemReporter().deprecatedType(binding.type, type);\r", "+\t\tif (!this.hasBeenResolved && binding != null && this.binding.isValidBinding()) {\r", "+\r", "+\t\t\tthis.hasBeenResolved = true;\r", "+\r", "+\t\t\tif (isTypeUseDeprecated(this.binding.type, initializationScope))\r", "+\t\t\t\tinitializationScope.problemReporter().deprecatedType(this.binding.type, this.type);\r", "-\t\t\tif (initialization == null) {\r", "-\t\t\t\tbinding.constant = Constant.NotAConstant;\r", "+\t\t\tif (this.initialization == null) {\r", "+\t\t\t\tthis.binding.constant = Constant.NotAConstant;\r", "-\t\t\t\t// break dead-lock cycles by forcing constant to NotAConstant\r", "-\t\t\t\t\tinitializationScope.fieldDeclarationIndex = binding.id;\r", "-\t\t\t\t\tbinding.constant = Constant.NotAConstant;\r", "-\t\t\t\t\tTypeBinding tb = binding.type;\r", "-\t\t\t\t\tTypeBinding initTb;\r", "+\t\t\t\t\tinitializationScope.fieldDeclarationIndex = this.binding.id;\r", "+\r", "+\t\t\t\t\t// break dead-lock cycles by forcing constant to NotAConstant\r", "+\t\t\t\t\tthis.binding.constant = Constant.NotAConstant;\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tTypeBinding typeBinding = this.binding.type;\r", "+\t\t\t\t\tTypeBinding initializationTypeBinding;\r", "+\t\t\t\t\t\r", "-\t\t\t\t\t\tif ((initTb = initialization.resolveTypeExpecting(initializationScope, tb))\r", "-\t\t\t\t\t\t\t!= null) {\r", "-\t\t\t\t\t\t\t((ArrayInitializer) initialization).binding = (ArrayBinding) initTb;\r", "-\t\t\t\t\t\t\tinitialization.implicitWidening(tb, initTb);\r", "+\r", "+\t\t\t\t\t\tif ((initializationTypeBinding = this.initialization.resolveTypeExpecting(initializationScope, typeBinding)) \t!= null) {\r", "+\t\t\t\t\t\t\t((ArrayInitializer) this.initialization).binding = (ArrayBinding) initializationTypeBinding;\r", "+\t\t\t\t\t\t\tthis.initialization.implicitWidening(typeBinding, initializationTypeBinding);\r", "-\t\t\t\t\t} else if (\r", "-\t\t\t\t\t\t(initTb = initialization.resolveType(initializationScope)) != null) {\r", "-\t\t\t\t\t\tif (initialization.isConstantValueOfTypeAssignableToType(initTb, tb)\r", "-\t\t\t\t\t\t\t|| (tb.isBaseType() && BaseTypeBinding.isWidening(tb.id, initTb.id)))\r", "-\t\t\t\t\t\t\tinitialization.implicitWidening(tb, initTb);\r", "-\t\t\t\t\t\telse if (initializationScope.areTypesCompatible(initTb, tb))\r", "-\t\t\t\t\t\t\tinitialization.implicitWidening(tb, initTb);\r", "-\t\t\t\t\t\telse\r", "-\t\t\t\t\t\t\tinitializationScope.problemReporter().typeMismatchError(initTb, tb, this);\r", "-\t\t\t\t\t\tif (binding.isFinal()) // cast from constant actual type to variable type\r", "-\t\t\t\t\t\t\tbinding.constant =\r", "-\t\t\t\t\t\t\t\tinitialization.constant.castTo(\r", "-\t\t\t\t\t\t\t\t\t(binding.type.id << 4) + initialization.constant.typeID());\r", "+\t\t\t\t\t} else if ((initializationTypeBinding = initialization.resolveType(initializationScope)) != null) {\r", "+\r", "+\t\t\t\t\t\tif (this.initialization.isConstantValueOfTypeAssignableToType(initializationTypeBinding, typeBinding)\r", "+\t\t\t\t\t\t\t|| (typeBinding.isBaseType() && BaseTypeBinding.isWidening(typeBinding.id, initializationTypeBinding.id))) {\r", "+\r", "+\t\t\t\t\t\t\tthis.initialization.implicitWidening(typeBinding, initializationTypeBinding);\r", "+\r", "+\t\t\t\t\t\t}\telse if (initializationScope.areTypesCompatible(initializationTypeBinding, typeBinding)) {\r", "+\t\t\t\t\t\t\tthis.initialization.implicitWidening(typeBinding, initializationTypeBinding);\r", "+\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tinitializationScope.problemReporter().typeMismatchError(initializationTypeBinding, typeBinding, this);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tif (this.binding.isFinal()){ // cast from constant actual type to variable type\r", "+\t\t\t\t\t\t\tthis.binding.constant =\r", "+\t\t\t\t\t\t\t\tthis.initialization.constant.castTo(\r", "+\t\t\t\t\t\t\t\t\t(this.binding.type.id << 4) + this.initialization.constant.typeID());\r", "+\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbinding.constant = NotAConstant;\r", "+\t\t\t\t\t\tthis.binding.constant = NotAConstant;\r", "-\t\t\t\t\tif (binding.constant == null)\r", "-\t\t\t\t\t\tbinding.constant = Constant.NotAConstant;\r", "+\t\t\t\t\tif (this.binding.constant == null)\r", "+\t\t\t\t\t\tthis.binding.constant = Constant.NotAConstant;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "640d47487fa89369e756114b1917c92d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void resolve(MethodScope initializationScope)", "signatureAfterChange": " \t \tpublic void resolve(MethodScope initializationScope)", "diff": ["-\t\t\t\tif (isTypeUseDeprecated(this.binding.type, initializationScope)) {", "-\t\t\t\t\tinitializationScope.problemReporter().deprecatedType(this.binding.type, this.type);", "-\t\t\t\t}", "-\t\t\t\t\tTypeBinding typeBinding = this.binding.type;", "-\t\t\t\t\tTypeBinding initializationTypeBinding;", "-\t\t\t\t\t", "+\t\t\t\t\tTypeBinding fieldType = this.binding.type;", "+\t\t\t\t\tTypeBinding initializationType;", "+\t\t\t\t\tthis.initialization.setExpectedType(fieldType); // needed in case of generic method invocation", "-\t\t\t\t\t\tif ((initializationTypeBinding = this.initialization.resolveTypeExpecting(initializationScope, typeBinding)) != null) {", "-\t\t\t\t\t\t\t((ArrayInitializer) this.initialization).binding = (ArrayBinding) initializationTypeBinding;", "-\t\t\t\t\t\t\tthis.initialization.implicitWidening(typeBinding, initializationTypeBinding);", "+\t\t\t\t\t\tif ((initializationType = this.initialization.resolveTypeExpecting(initializationScope, fieldType)) != null) {", "+\t\t\t\t\t\t\t((ArrayInitializer) this.initialization).binding = (ArrayBinding) initializationType;", "+\t\t\t\t\t\t\tthis.initialization.computeConversion(initializationScope, fieldType, initializationType);", "-\t\t\t\t\t} else if ((initializationTypeBinding = this.initialization.resolveType(initializationScope)) != null) {", "+\t\t\t\t\t} else if ((initializationType = this.initialization.resolveType(initializationScope)) != null) {", "-\t\t\t\t\t\tif (this.initialization.isConstantValueOfTypeAssignableToType(initializationTypeBinding, typeBinding)", "-\t\t\t\t\t\t\t|| (typeBinding.isBaseType() && BaseTypeBinding.isWidening(typeBinding.id, initializationTypeBinding.id))) {", "-", "-\t\t\t\t\t\t\tthis.initialization.implicitWidening(typeBinding, initializationTypeBinding);", "-", "-\t\t\t\t\t\t}\telse if (initializationTypeBinding.isCompatibleWith(typeBinding)) {", "-\t\t\t\t\t\t\tthis.initialization.implicitWidening(typeBinding, initializationTypeBinding);", "-", "+\t\t\t\t\t\tif (this.initialization.isConstantValueOfTypeAssignableToType(initializationType, fieldType)", "+\t\t\t\t\t\t\t\t|| (fieldType.isBaseType() && BaseTypeBinding.isWidening(fieldType.id, initializationType.id))", "+\t\t\t\t\t\t\t\t|| initializationType.isCompatibleWith(fieldType)) {", "+\t\t\t\t\t\t\tthis.initialization.computeConversion(initializationScope, fieldType, initializationType);", "+\t\t\t\t\t\t\tif (initializationType.isRawType() && (fieldType.isParameterizedType() || fieldType.isGenericType())) {", "+\t\t\t\t\t\t\t\t    initializationScope.problemReporter().unsafeRawAssignment(this.initialization, initializationType, fieldType);", "+\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tinitializationScope.problemReporter().typeMismatchError(initializationTypeBinding, typeBinding, this);", "+\t\t\t\t\t\t\tinitializationScope.problemReporter().typeMismatchError(initializationType, fieldType, this);"]}], "num": 10645}
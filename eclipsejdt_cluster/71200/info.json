{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b17e7e9ceb8b42f2034e0fbd6e8b31c1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba4f55f4060bf4286a7fc5014fa25694", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "2dd578f5dcd63152f86cd37da8e4317b8b4f26ca", "commitAfterChange": "edce8af1f4239346d62d47f3ba5f215c94025b36", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void createMethods(IBinaryMethod[] iMethods)", "signatureAfterChange": " private void createMethods(IBinaryMethod[] iMethods)", "diff": ["-", "-\t\t\tchar[] methodName;", "-\t\t\t} else if ((methodName = method.getSelector()).length == 8 && methodName[0] == '<') {", "-\t\t\t\t// discard <clinit>", "-\t\t\t\tiClinit = i;", "-\t\t\t\ttotal--;", "+\t\t\t} else if (iClinit == -1) {", "+\t\t\t\tchar[] methodName = method.getSelector();", "+\t\t\t\tif (methodName.length == 8 && methodName[0] == '<') {", "+\t\t\t\t\t// discard <clinit>", "+\t\t\t\t\tiClinit = i;", "+\t\t\t\t\ttotal--;", "+\t\t\t\t}", "-\t\tfor (int i = 0; i < initialTotal; i++) {", "+\t\tfor (int i = 0; i < initialTotal; i++)", "-\t\t}", "-\t\tint index = 0;", "-\t\tfor (int i = 0; i < initialTotal; i++) {", "-\t\t\tif (iClinit == i) continue;", "-\t\t\tif (toSkip != null && toSkip[i] < 0) continue;", "-\t\t\tthis.methods[index++] = createMethod(iMethods[i]);", "-\t\t}", "+\t\tfor (int i = 0, index = 0; i < initialTotal; i++)", "+\t\t\tif (iClinit != i && (toSkip == null || toSkip[i] != -1))", "+\t\t\t\tthis.methods[index++] = createMethod(iMethods[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da17ed6d770eb2075aad7d70c03bbbde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "fd1449d055a6537ff2cc9fdda22529f36f4ae8e5", "commitAfterChange": "fb84cc02ab4c4e17beda8243ff879a6db41ca643", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void createMethods(IBinaryMethod[] iMethods)", "signatureAfterChange": " private void createMethods(IBinaryMethod[] iMethods)", "diff": ["+ */", "-\tint total = 0;", "-\tint iClinit = -1;", "+", "+\tint total = 0, initialTotal = 0, iClinit = -1;", "-\t\ttotal = iMethods.length;", "+\t\ttotal = initialTotal = iMethods.length;", "+\t\t\t\t// discard synthetics methods", "+\t\t\t\t// discard <clinit>", "-\tint index = 0;", "-\tif (iClinit < 0 && toSkip == null) {", "-\t\tfor (int i = 0, length = iMethods.length; i < length; i++) {", "-\t\t\tthis.methods[index++] = createMethod(iMethods[i]);", "+\tif (total == initialTotal) {", "+\t\tfor (int i = 0; i < initialTotal; i++) {", "+\t\t\tthis.methods[i] = createMethod(iMethods[i]);", "-\t\tfor (int i = 0, length = iMethods.length; i < length; i++) {", "-\t\t\tif (iClinit != i && toSkip[i] == 0)", "-\t\t\t\tthis.methods[index++] = createMethod(iMethods[i]);", "+\t\tint index = 0;", "+\t\tfor (int i = 0; i < initialTotal; i++) {", "+\t\t\tif (iClinit == i) continue;", "+\t\t\tif (toSkip != null && toSkip[i] == 0) continue;", "+\t\t\tthis.methods[index++] = createMethod(iMethods[i]);"]}], "num": 71200}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57d19cb6289877ad678520233eb94902", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07201b73717c6e75e19c79da99f4e5b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6021d67f030c85737aa105da719e9a09cfc30ed", "commitAfterChange": "47da1e1f50b1360a7b560d74dfe1c60303fec552", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public Index[] getIndexes(IPath[] locations, IProgressMonitor progressMonitor)", "signatureAfterChange": " public Index[] getIndexes(IndexLocation[] locations, IProgressMonitor progressMonitor)", "diff": ["-public Index[] getIndexes(IPath[] locations, IProgressMonitor progressMonitor) {", "+public Index[] getIndexes(IndexLocation[] locations, IProgressMonitor progressMonitor) {", "-\t\tIPath indexLocation = locations[i];", "+\t\tIndexLocation indexLocation = locations[i];", "-\t\t\t\tif (!getJavaPluginWorkingLocation().isPrefixOf(indexLocation)) { // the index belongs to non-jdt search participant", "-\t\t\t\t\tif (indexLocation.toFile().exists()) { ", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tIPath container = getParticipantsContainer(indexLocation);", "-\t\t\t\t\t\t\tif (container != null) {", "-\t\t\t\t\t\t\t\tindex = new Index(indexLocation.toOSString(), container.toOSString(), true /*reuse index file*/);", "-\t\t\t\t\t\t\t\tthis.indexes.put(indexLocation, index);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} catch (IOException e) {", "-\t\t\t\t\t\t\t// ignore", "+\t\t\t\tif (indexLocation.isParticipantIndex() && indexLocation.exists()) { // the index belongs to non-jdt search participant", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tIPath container = getParticipantsContainer(indexLocation);", "+\t\t\t\t\t\tif (container != null) {", "+\t\t\t\t\t\t\tindex = new Index(indexLocation, container.toOSString(), true /*reuse index file*/);", "+\t\t\t\t\t\t\tthis.indexes.put(indexLocation, index);", "-\t\t\t\t\t} ", "+\t\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\t\t// ignore", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2176c896b67d5b5d8cf41ba03a42ace1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "9d422f535f1cf1a8b8f8401815db736b124961e4", "commitAfterChange": "13ebf03f7d31f9fda8d23c3fe70da0f01fcad14a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": " public synchronized IIndex recreateIndex(IPath path)", "signatureAfterChange": " public synchronized IIndex recreateIndex(IPath path)", "diff": ["-\tIIndex index = (IIndex) indexes.get(path);", "-\tif (index != null) {", "-\t\ttry {", "-\t\t\t// Path is already canonical", "-\t\t\tString indexPath = computeIndexName(path);", "-\t\t\tReadWriteMonitor monitor = (ReadWriteMonitor)monitors.remove(index);", "-\t\t\tindex = new Index(indexPath, \"Index for \" + path.toOSString(), true /*reuse index file*/); //$NON-NLS-1$", "-\t\t\tindex.empty();", "-\t\t\tindexes.put(path, index);", "-\t\t\tmonitors.put(index, monitor);", "-\t\t} catch (IOException e) {", "-\t\t\t// The file could not be created. Possible reason: the project has been deleted.", "-\t\t\treturn null;", "-\t\t}", "+\t// only called to over write an existing cached index...", "+\ttry {", "+\t\tIIndex index = (IIndex) this.indexes.get(path);", "+\t\tReadWriteMonitor monitor = (ReadWriteMonitor) this.monitors.remove(index);", "+", "+\t\t// Path is already canonical", "+\t\tString indexPath = computeIndexName(path);", "+\t\tindex = new Index(indexPath, \"Index for \" + path.toOSString(), true /*reuse index file*/); //$NON-NLS-1$", "+\t\tindex.empty();", "+\t\tindexes.put(path, index);", "+\t\tmonitors.put(index, monitor);", "+\t\treturn index;", "+\t} catch (IOException e) {", "+\t\t// The file could not be created. Possible reason: the project has been deleted.", "+\t\treturn null;", "-\t//System.out.println(\" index name: \" + path.toOSString() + \" <----> \" + index.getIndexFile().getName());\t", "-\treturn index;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eb2e876d9ada0842c22eb0483c3ec99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "0a2eedbd50adb9049a6119ce5bc61718d79db170", "commitAfterChange": "61838c2ec4c633bb2cdc1d21d43b28ec4bbd7a84", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public synchronized IIndex getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing)", "signatureAfterChange": " public synchronized IIndex getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing)", "diff": ["-\t\ttry {", "-\t\t\tString indexName = computeIndexName(path);", "-\t\t\tObject state = getIndexStates().get(indexName);", "-\t\t\tInteger currentIndexState = state == null ? UNKNOWN_STATE : (Integer) state;", "-\t\t\tif (currentIndexState == UNKNOWN_STATE) {", "-\t\t\t\t// should only be reachable for query jobs", "-\t\t\t\t// IF you put an index in the cache, then AddJarFileToIndex fails because it thinks there is nothing to do", "-\t\t\t\trebuildIndex(indexName, path);", "-\t\t\t\treturn null;", "-\t\t\t}", "+\t\tString indexName = computeIndexName(path);", "+\t\tObject state = getIndexStates().get(indexName);", "+\t\tInteger currentIndexState = state == null ? UNKNOWN_STATE : (Integer) state;", "+\t\tif (currentIndexState == UNKNOWN_STATE) {", "+\t\t\t// should only be reachable for query jobs", "+\t\t\t// IF you put an index in the cache, then AddJarFileToIndex fails because it thinks there is nothing to do", "+\t\t\trebuildIndex(indexName, path);", "+\t\t\treturn null;", "+\t\t}", "-\t\t\t// index isn't cached, consider reusing an existing index file", "-\t\t\tif (reuseExistingFile) {", "-\t\t\t\tFile indexFile = new File(indexName);", "-\t\t\t\tif (indexFile.exists() && isIndexSignatureValid(indexFile)) { // check before creating index so as to avoid creating a new empty index if file is missing", "+\t\t// index isn't cached, consider reusing an existing index file", "+\t\tif (reuseExistingFile) {", "+\t\t\tFile indexFile = new File(indexName);", "+\t\t\tif (indexFile.exists()) { // check before creating index so as to avoid creating a new empty index if file is missing", "+\t\t\t\ttry {", "-\t\t\t\t\tif (index != null) {", "-\t\t\t\t\t\tindexes.put(path, index);", "-\t\t\t\t\t\tmonitors.put(index, new ReadWriteMonitor());", "-\t\t\t\t\t\treturn index;", "-\t\t\t\t\t}", "-\t\t\t\t} else if (currentIndexState == SAVED_STATE) {", "-\t\t\t\t\trebuildIndex(indexName, path);", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t} ", "-\t\t\t// index wasn't found on disk, consider creating an empty new one", "-\t\t\tif (createIfMissing) {", "-\t\t\t\tindex = new Index(indexName, \"Index for \" + path.toOSString(), false /*do not reuse index file*/); //$NON-NLS-1$", "-\t\t\t\tif (index != null) {", "+\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\t// failed to read the existing file or its no longer compatible", "+\t\t\t\t\tindex = null;", "-\t\t} catch (IOException e) {", "-\t\t\t// The file could not be created. Possible reason: the project has been deleted.", "-\t\t\treturn null;", "+\t\t\tif (currentIndexState == SAVED_STATE) { // rebuild index if existing file is missing or corrupt", "+\t\t\t\trebuildIndex(indexName, path);", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t} ", "+\t\t// index wasn't found on disk, consider creating an empty new one", "+\t\tif (createIfMissing) {", "+\t\t\ttry {", "+\t\t\t\tindex = new Index(indexName, \"Index for \" + path.toOSString(), false /*do not reuse index file*/); //$NON-NLS-1$", "+\t\t\t\tindexes.put(path, index);", "+\t\t\t\tmonitors.put(index, new ReadWriteMonitor());", "+\t\t\t\treturn index;", "+\t\t\t} catch (IOException e) {", "+\t\t\t\t// The file could not be created. Possible reason: the project has been deleted.", "+\t\t\t\treturn null;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5de150c8c48369e901b323e948fc7a9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6021d67f030c85737aa105da719e9a09cfc30ed", "commitAfterChange": "47da1e1f50b1360a7b560d74dfe1c60303fec552", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": " public synchronized void removeIndexPath(IPath path)", "signatureAfterChange": " public synchronized void removeIndexPath(IPath path)", "diff": ["-\tIPath[] locations = null;", "+\tIndexLocation[] locations = null;", "-\t\tIPath indexLocation = (IPath) keyTable[i];", "+\t\tIndexLocation indexLocation = (IndexLocation) keyTable[i];", "-\t\tif (path.isPrefixOf(indexLocation)) {", "+\t\tif (indexLocation.startsWith(path)) {", "-\t\t\t\tlocations = new IPath[max];", "+\t\t\t\tlocations = new IndexLocation[max];", "-\t\t\tFile indexFile = index.getIndexFile();", "-\t\t\tif (indexFile.exists()) {", "+\t\t\tif (this.indexStates.get(indexLocation) == REUSE_STATE) {", "+\t\t\t\tindexLocation.close();", "+\t\t\t} else {", "-\t\t\t\t\tUtil.verbose(\"removing index file \" + indexFile); //$NON-NLS-1$", "-\t\t\t\tindexFile.delete();", "+\t\t\t\t\tUtil.verbose(\"removing index file \" + indexLocation); //$NON-NLS-1$", "+\t\t\t\tindexLocation.delete();", "-\t\tif (this.participantsContainers != null && this.participantsContainers.get(path.toOSString()) != null) {", "-\t\t\tthis.participantsContainers.removeKey(path.toOSString());\t", "-\t\t\twriteParticipantsIndexNamesFile();", "+\t\tif (this.participantsContainers != null) {", "+\t\t\tboolean update = false;", "+\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\tif (this.participantsContainers.get(locations[i]) != null) {", "+\t\t\t\t\tupdate = true;", "+\t\t\t\t\tthis.participantsContainers.removeKey(locations[i]);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (update) writeParticipantsIndexNamesFile();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a76ee32a923a9ca7640f01ed6b23ea63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "dfd8d4647bad1465cda928961972e854fc071249", "commitAfterChange": "31c3266cfb06f3143b63cd3aca05524ef5cd1755", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public IIndex getIndex(IPath path)", "signatureAfterChange": "\r public synchronized IIndex getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing)", "diff": ["-public IIndex getIndex(IPath path) {\r", "-\treturn this.getIndex(path, true);\r", "-}\r", "+public synchronized IIndex getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing) {\r", "+\t\t\tString indexPath = null;\r", "+\t\t\t// index isn't cached, consider reusing an existing index file\r", "+\t\t\tif (reuseExistingFile){\r", "+\t\t\t\tindexPath = computeIndexName(path);\r", "+\t\t\t\tFile indexFile = new File(indexPath);\r", "+\t\t\t\tif (indexFile.exists()){ // check before creating index so as to avoid creating a new empty index if file is missing\r", "+\t\t\t\t\tindex = new Index(indexPath, \"Index for \" + path.toOSString(), true /*reuse index file*/); //$NON-NLS-1$\r", "+\t\t\t\t\tif (index != null){\r", "+\t\t\t\t\t\tindexes.put(path, index);\r", "+\t\t\t\t\t\tmonitors.put(index, new ReadWriteMonitor());\r", "+\t\t\t\t\t\treturn index;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t} \r", "+\t\t\t// index wasn't found on disk, consider creating an empty new one\r", "+\t\t\tif (createIfMissing){\r", "+\t\t\t\tif (indexPath == null) indexPath = computeIndexName(path);\r", "+\t\t\t\tindex = new Index(indexPath, \"Index for \" + path.toOSString(), false /*do not reuse index file*/); //$NON-NLS-1$\r", "+\t\t\t\tif (index != null){\r", "+\t\t\t\t\tindexes.put(path, index);\r", "+\t\t\t\t\tmonitors.put(index, new ReadWriteMonitor());\r", "+\t\t\t\t\treturn index;\r", "+\t\t\t\t}\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9e25644f9810ac6ff676010a5b17765", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "9d422f535f1cf1a8b8f8401815db736b124961e4", "commitAfterChange": "13ebf03f7d31f9fda8d23c3fe70da0f01fcad14a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 4, "signatureBeforeChange": " public synchronized IIndex getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing)", "signatureAfterChange": " public synchronized IIndex getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing)", "diff": ["-\t\t\tString indexPath = null;", "-\t\t\t", "+\t\t\tString indexName = computeIndexName(path);", "+\t\t\tObject state = getIndexStates().get(indexName);", "+\t\t\tInteger currentIndexState = state == null ? UNKNOWN_STATE : (Integer) state;", "+\t\t\tif (currentIndexState == UNKNOWN_STATE) {", "+\t\t\t\t// should only be reachable for query jobs", "+\t\t\t\t// IF you put an index in the cache, then AddJarFileToIndex fails because it thinks there is nothing to do", "+\t\t\t\trebuildIndex(indexName, path);", "+\t\t\t\treturn null;", "+\t\t\t}", "+", "-\t\t\tif (reuseExistingFile){", "-\t\t\t\tindexPath = computeIndexName(path);", "-\t\t\t\tFile indexFile = new File(indexPath);", "-\t\t\t\tif (indexFile.exists()){ // check before creating index so as to avoid creating a new empty index if file is missing", "-\t\t\t\t\tindex = new Index(indexPath, \"Index for \" + path.toOSString(), true /*reuse index file*/); //$NON-NLS-1$", "-\t\t\t\t\tif (index != null){", "+\t\t\tif (reuseExistingFile) {", "+\t\t\t\tFile indexFile = new File(indexName);", "+\t\t\t\tif (indexFile.exists()) { // check before creating index so as to avoid creating a new empty index if file is missing", "+\t\t\t\t\tindex = new Index(indexName, \"Index for \" + path.toOSString(), true /*reuse index file*/); //$NON-NLS-1$", "+\t\t\t\t\tif (index != null) {", "+\t\t\t\t} else if (currentIndexState == SAVED_STATE) {", "+\t\t\t\t\trebuildIndex(indexName, path);", "+\t\t\t\t\treturn null;", "-\t\t\tif (createIfMissing){", "-\t\t\t\tif (indexPath == null) indexPath = computeIndexName(path);", "-\t\t\t\tindex = new Index(indexPath, \"Index for \" + path.toOSString(), false /*do not reuse index file*/); //$NON-NLS-1$", "-\t\t\t\tif (index != null){", "+\t\t\tif (createIfMissing) {", "+\t\t\t\tindex = new Index(indexName, \"Index for \" + path.toOSString(), false /*do not reuse index file*/); //$NON-NLS-1$", "+\t\t\t\tif (index != null) {"]}], "num": 18874}
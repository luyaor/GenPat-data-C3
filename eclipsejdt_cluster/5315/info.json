{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bccb63fcde111c5934af94c687227af7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28eee93ca29a664ce76ad23bed9b7eb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "e7e7564689e931d1fed71c56fbe47c45f27678fe", "commitAfterChange": "e414d36721aa05dbbac7b21bf49fdccb073e6286", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 45, "signatureBeforeChange": "  \tprivate void printIndentationIfNecessary(StringBuffer buffer)", "signatureAfterChange": "   \tprivate void printIndentationIfNecessary(StringBuffer buffer)", "diff": ["+", "-\t\t// where do we want to go (will round up to the next tab stop if snapToTabs == true)", "-\t\tint wantedIndentation= getNextIndentationLevel(this.indentationLevel + 1);", "-\t\twhile (this.column - 1 < this.indentationLevel) {", "-\t\t\t// where would we get by appending a tab?", "-\t\t\tint nextTabIndentation= this.column - 1 + (this.tabLength - ((this.column - 1) % this.tabLength));", "-\t\t\tif (this.useTab && nextTabIndentation <= wantedIndentation) {", "-\t\t\t\tbuffer.append('\\t');", "-\t\t\t\tthis.lastNumberOfNewLines = 0;", "-\t\t\t\tint complement = this.tabLength - ((this.column - 1) % this.tabLength); // amount of space", "-\t\t\t\tthis.column += complement;", "-\t\t\t} else {", "-\t\t\t\tbuffer.append(this.fillingSpace);", "-\t\t\t\tthis.column++;", "+\t\tint indentationColumn = (this.useTab ? this.indentationLevel * this.tabSize : this.indentationLevel)+1;", "+\t\tif (this.column < indentationColumn) {", "+\t\t\tfor (int i = getColumnIndentationLevel(), max = this.indentationLevel; i < max; i++) { ", "+\t\t\t\tif (this.useTab) {", "+\t\t\t\t\tthis.tab(buffer);", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.column++;", "+\t\t\t\t\tbuffer.append(this.fillingSpace);", "+\t\t\t\t\tthis.needSpace = false;", "+\t\t\t\t}", "-\t\t\tthis.needSpace = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6e759ef27a7175297c20d41e52647c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a73c1b70646c33788c416636d54ca7b824b36c44", "commitAfterChange": "89bcdbe3377ffa239857ce6e220c3e9a2f048f0c", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 44, "signatureBeforeChange": "   \tprivate void printIndentationIfNecessary(StringBuffer buffer)", "signatureAfterChange": "  \tprivate void printIndentationIfNecessary(StringBuffer buffer)", "diff": ["-", "-\t\tint indentationColumn = (this.useTab ? this.indentationLevel * this.tabSize : this.indentationLevel)+1;", "-\t\tif (this.column < indentationColumn) {", "-\t\t\tfor (int i = getColumnIndentationLevel(), max = this.indentationLevel; i < max; i++) { ", "-\t\t\t\tif (this.useTab) {", "-\t\t\t\t\tthis.tab(buffer);", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.column++;", "-\t\t\t\t\tbuffer.append(this.fillingSpace);", "-\t\t\t\t\tthis.needSpace = false;", "-\t\t\t\t}", "+\t\t// where do we want to go (will round up to the next tab stop if snapToTabs == true)", "+\t\tint wantedIndentation= getNextIndentationLevel(this.indentationLevel + 1);", "+\t\twhile (this.column - 1 < this.indentationLevel) {", "+\t\t\t// where would we get by appending a tab?", "+\t\t\tint nextTabIndentation= this.column - 1 + (this.tabLength - ((this.column - 1) % this.tabLength));", "+\t\t\tif (this.useTab && nextTabIndentation <= wantedIndentation) {", "+\t\t\t\tbuffer.append('\\t');", "+\t\t\t\tthis.lastNumberOfNewLines = 0;", "+\t\t\t\tint complement = this.tabLength - ((this.column - 1) % this.tabLength); // amount of space", "+\t\t\t\tthis.column += complement;", "+\t\t\t} else {", "+\t\t\t\tbuffer.append(this.fillingSpace);", "+\t\t\t\tthis.column++;", "+\t\t\tthis.needSpace = false;"]}], "num": 5315}
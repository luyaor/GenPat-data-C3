{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "92f3deadb2465e5baa3a5d5bb2512708", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "095405b30eccf35fedbf94e71036fe30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "0e8ca24e8451f1d91ed53a269d184ea21d12301f", "commitAfterChange": "369ffd3db09511488e039ba2575df2eeea055320", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, IClasspathEntry[] classpath)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int parentType)", "diff": ["-\tprotected boolean traverseDelta(IResourceDelta delta, IClasspathEntry[] classpath) {\r", "+\tprotected boolean traverseDelta(IResourceDelta delta, int parentType) {\r", "-\t\tboolean isOnClasspath = this.isOnClasspath(classpath, res);\r", "-\t\tOpenable element = null;\r", "-\t\tboolean processChildren = true;\r", "-\t\tJavaProject project = null;\r", "-\t\tif (isOnClasspath) {\r", "-\t\t\tOpenable[] elements = this.createElements(res);\r", "-\t\t\tif (elements != null) {\r", "-\t\t\t\tfor (int i = 0, length = elements.length; i < length; i++) {\r", "-\t\t\t\t\telement = elements[i];\r", "-\t\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(element, delta);\r", "+\t\t// check if current resource is now on classpath and determine the element type\r", "+\t\tboolean isOnClasspath = false;\r", "+\t\tint elementType = -1;\r", "+\t\tswitch (parentType) {\r", "+\t\t\tcase IJavaElement.JAVA_MODEL:\r", "+\t\t\tcase IJavaElement.JAVA_PROJECT:\r", "+\t\t\t\tisOnClasspath = this.isOnClasspath(res.getFullPath());\r", "+\t\t\t\tif (isOnClasspath) {\r", "+\t\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT_ROOT;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\telementType = IJavaElement.JAVA_PROJECT; // not yet in a package fragment root\r", "-\t\t\t} else {\r", "-\t\t\t\treturn false;\r", "-\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\r", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "+\t\t\t\tisOnClasspath = true;\r", "+\t\t\t\tif (res instanceof IFolder) {\r", "+\t\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tString extension = res.getFileExtension();\r", "+\t\t\t\t\tif (\"java\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\t\telementType = IJavaElement.COMPILATION_UNIT;\r", "+\t\t\t\t\t} else if (\"class\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\t\telementType = IJavaElement.CLASS_FILE;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t}\t\t\t\t\t\t\r", "+\t\t\r", "+\t\tboolean processChildren = true;\r", "+\t\tif (isOnClasspath) {\r", "+\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(delta, elementType);\r", "-\t\t\t\tproject = (JavaProject)JavaCore.getJavaCore().create((IProject)res);\r", "-\t\t\t\tif (project == null) return false; // not a Java project\r", "-\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(project, delta);\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tif (this.isOpen(res) && !((IProject)res).hasNature(JavaCore.NATURE_ID)) return false; // non java project\r", "+\t\t\t\t} catch (CoreException e) {\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t\t}\r", "+\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(delta, elementType);\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tclasspath = project.getExpandedClasspath(true);\r", "-\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t}\r", "-\t\t\t\t// if classpath is known, we are for sure out of classpath: stop processing children\r", "-\t\t\t\tprocessChildren = classpath != null;\r", "+\t\t\t\t// not yet inside a package fragment root\r", "+\t\t\t\tprocessChildren = true;\r", "+\t\t\tOpenable element = null;\r", "-\t\t\t\tif (!traverseDelta(child, isOnClasspath ? null : classpath)) {\r", "+\t\t\t\tif (!traverseDelta(child, elementType)) {\r", "+\t\t\t\t\t\t\tif (element == null) {\r", "+\t\t\t\t\t\t\t\telement = this.createElement(res, elementType);\r", "+\t\t\t\t\t\t\t\tif (element == null) continue;\r", "+\t\t\t\t\t\t\t}\r", "-\t\t\tif (oneChildOnClasspath || project != null) {\r", "+\t\t\tif (oneChildOnClasspath || res instanceof IProject) {\r", "-\t\t\t\tif (project == null) {\r", "-\t\t\t\t\tproject = (JavaProject)JavaCore.getJavaCore().create(res.getProject());\r", "-\t\t\t\t}\r", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tif (orphanChildren[i] != null) {\r", "-\t\t\t\t\t\ttry {\r", "-\t\t\t\t\t\t\tnonJavaResourcesChanged(project, orphanChildren[i]);\r", "-\t\t\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}", "+\t\t\t\tJavaProject project = (JavaProject)JavaCore.getJavaCore().create(res.getProject());\r", "+\t\t\t\tif (project != null) {\r", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tif (orphanChildren[i] != null) {\r", "+\t\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\t\tnonJavaResourcesChanged(project, orphanChildren[i]);\r", "+\t\t\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}\r", "-\t\t\treturn isOnClasspath && element != null; // element is null if non-java resource in package\r", "+\t\t\treturn \r", "+\t\t\t\tisOnClasspath \r", "+\t\t\t\t\t&& (elementType == IJavaElement.COMPILATION_UNIT \r", "+\t\t\t\t\t\t|| elementType == IJavaElement.CLASS_FILE);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2076a5019fee861086f8914274076709", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "f238d59edecc5d87c39084d60c9040567d09deaf", "commitAfterChange": "ce0032759c3236d2ea392944fcdfb033987155c8", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int parentType, IJavaProject parentProject)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int elementType, IJavaProject currentProject)", "diff": ["-\tprotected boolean traverseDelta(IResourceDelta delta, int parentType, IJavaProject parentProject) {\r", "+\tprotected boolean traverseDelta(IResourceDelta delta, int elementType, IJavaProject currentProject) {\r", "-\t\t// check if current resource is now on classpath and determine the element type\r", "-\t\tIJavaProject currentProject = parentProject;\r", "-\t\tIPath fullPath = res.getFullPath();\r", "-\t\tIJavaProject projectOfRoot = (IJavaProject)this.roots.get(fullPath);\r", "-\t\tint elementType = -1;\r", "-\t\tif (projectOfRoot != null) {\r", "-\t\t\tcurrentProject = projectOfRoot;\r", "-\t\t\tif (parentType == IJavaElement.JAVA_MODEL && delta.getKind() != IResourceDelta.CHANGED) {\r", "-\t\t\t\t// project is added or removed\r", "-\t\t\t\telementType = IJavaElement.JAVA_PROJECT;\r", "-\t\t\t} else {\r", "-\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT_ROOT;\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\tswitch (parentType) {\r", "-\t\t\t\tcase IJavaElement.JAVA_MODEL:\r", "-\t\t\t\tcase IJavaElement.JAVA_PROJECT:\r", "-\t\t\t\t\tif (currentProject != null) {\r", "-\t\t\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT_ROOT;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\telementType = IJavaElement.JAVA_PROJECT; // not yet in a package fragment root\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\r", "-\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "-\t\t\t\t\tif (res instanceof IFolder) {\r", "-\t\t\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tString extension = res.getFileExtension();\r", "-\t\t\t\t\t\tif (\"java\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "-\t\t\t\t\t\t\telementType = IJavaElement.COMPILATION_UNIT;\r", "-\t\t\t\t\t\t} else if (\"class\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "-\t\t\t\t\t\t\telementType = IJavaElement.CLASS_FILE;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t\r", "+\t\t// process current delta\r", "-\t\tboolean result;\r", "+\r", "+\t\t// process children if needed\r", "-\t\t\tOpenable element = null;\r", "+\t\t\tOpenable parent = null;\r", "-\t\t\t\tif (!traverseDelta(child, elementType, currentProject)) {\r", "+\t\t\t\tIResource childRes = child.getResource();\r", "+\t\t\t\tIPath childPath = childRes.getFullPath();\r", "+\r", "+\t\t\t\t// find out whether the child is a package fragment root of the current project\r", "+\t\t\t\tIJavaProject projectOfRoot = (IJavaProject)this.roots.get(childPath);\r", "+\t\t\t\tboolean isPkgFragmentRoot = \r", "+\t\t\t\t\tprojectOfRoot != null \r", "+\t\t\t\t\t&& (projectOfRoot.getProject().getFullPath().isPrefixOf(childPath));\r", "+\t\t\t\tint childType = this.elementType(child, elementType, isPkgFragmentRoot);\r", "+\t\t\t\t\r", "+\t\t\t\t// traverse delta for child in the same project\r", "+\t\t\t\tif (!this.traverseDelta(child, childType, (currentProject == null && isPkgFragmentRoot) ? projectOfRoot : currentProject)) {\r", "-\t\t\t\t\t\t\tif (element == null) {\r", "+\t\t\t\t\t\t\tif (parent == null) {\r", "-\t\t\t\t\t\t\t\tif (fullPath.equals(currentProject.getProject().getFullPath())) {\r", "-\t\t\t\t\t\t\t\t\telement = (Openable)currentProject;\r", "+\t\t\t\t\t\t\t\tif (elementType == IJavaElement.JAVA_PROJECT) {\r", "+\t\t\t\t\t\t\t\t\tparent = (Openable)currentProject;\r", "-\t\t\t\t\t\t\t\t\telement = this.createElement(res, elementType, currentProject);\r", "+\t\t\t\t\t\t\t\t\tparent = this.createElement(res, elementType, currentProject);\r", "-\t\t\t\t\t\t\t\tif (element == null) continue;\r", "+\t\t\t\t\t\t\t\tif (parent == null) continue;\r", "-\t\t\t\t\t\t\t// add child as non java resource if current element on classpath\r", "-\t\t\t\t\t\t\tnonJavaResourcesChanged(element, child);\r", "+\t\t\t\t\t\t\t// add child as non java resource\r", "+\t\t\t\t\t\t\tnonJavaResourcesChanged(parent, child);\r", "+\t\t\t\t}\r", "+\t\t\t\t\r", "+\t\t\t\t// if child is a package fragment root of another project, traverse delta too\r", "+\t\t\t\tif (projectOfRoot != null && !isPkgFragmentRoot) {\r", "+\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, projectOfRoot);\r", "+\t\t\t\t\t// NB: No need to check the return value as the child can only be on the classpath\r", "+\t\t\t\t}\r", "+\t\t\t\t\r", "+\t\t\t\t// if the child is a package fragment root of one or several other projects\r", "+\t\t\t\tHashSet set;\r", "+\t\t\t\tif ((set = (HashSet)this.otherRoots.get(childPath)) != null) {\r", "+\t\t\t\t\tIPackageFragmentRoot currentRoot = \r", "+\t\t\t\t\t\t(currentProject == null ? \r", "+\t\t\t\t\t\t\tprojectOfRoot : \r", "+\t\t\t\t\t\t\tcurrentProject).getPackageFragmentRoot(childRes);\r", "+\t\t\t\t\tIterator iterator = set.iterator();\r", "+\t\t\t\t\twhile (iterator.hasNext()) {\r", "+\t\t\t\t\t\tIJavaProject project = (IJavaProject) iterator.next();\r", "+\t\t\t\t\t\tthis.cloneCurrentDelta(project, currentRoot);\r", "+\t\t\t\t\t}\r", "-\t\t\tresult = currentProject != null || oneChildOnClasspath;\r", "+\t\t\treturn currentProject != null || oneChildOnClasspath;\r", "-\t\t\t// if we changed the current project or if the element type is -1, \r", "+\t\t\t// if not on classpath or if the element type is -1, \r", "-\t\t\tresult = \r", "-\t\t\t\tcurrentProject != null \r", "-\t\t\t\t&& currentProject.equals(parentProject)\r", "-\t\t\t\t&& elementType != -1;\r", "+\t\t\treturn currentProject != null && elementType != -1;\r", "-\t\t\r", "-\t\t// other roots\r", "-\t\tHashSet set;\r", "-\t\tif ((set = (HashSet)this.otherRoots.get(fullPath)) != null) {\r", "-\t\t\tIPackageFragmentRoot currentRoot = currentProject.getPackageFragmentRoot(res);\r", "-\t\t\tIterator iterator = set.iterator();\r", "-\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\tIJavaProject project = (IJavaProject) iterator.next();", "-\t\t\t\tthis.cloneCurrentDelta(project, currentRoot);", "-\t\t\t}\r", "+\t}\r", "-\t\t\r", "-\t\treturn result;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7ffd3027c9cfb98693fbd8f09bb3215", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "feb6545df47d2c5c5dddbb92489d5f562545b32e", "commitAfterChange": "f2175e743261684fe3de1337b02bb7bc5e74c85c", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int parentType)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int parentType, IJavaProject currentProject)", "diff": ["-\tprotected boolean traverseDelta(IResourceDelta delta, int parentType) {\r", "+\tprotected boolean traverseDelta(IResourceDelta delta, int parentType, IJavaProject currentProject) {\r", "-\t\tboolean isOnClasspath = false;\r", "+\t\tIPath fullPath = res.getFullPath();\r", "+\t\tIJavaProject projectOfRoot = (IJavaProject)this.roots.get(fullPath);\r", "-\t\tswitch (parentType) {\r", "-\t\t\tcase IJavaElement.JAVA_MODEL:\r", "-\t\t\tcase IJavaElement.JAVA_PROJECT:\r", "-\t\t\t\tisOnClasspath = this.isOnClasspath(res.getFullPath());\r", "-\t\t\t\tif (isOnClasspath) {\r", "-\t\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT_ROOT;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\telementType = IJavaElement.JAVA_PROJECT; // not yet in a package fragment root\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\r", "-\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "-\t\t\t\tisOnClasspath = true;\r", "-\t\t\t\tif (res instanceof IFolder) {\r", "-\t\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tString extension = res.getFileExtension();\r", "-\t\t\t\t\tif (\"java\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "-\t\t\t\t\t\telementType = IJavaElement.COMPILATION_UNIT;\r", "-\t\t\t\t\t} else if (\"class\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "-\t\t\t\t\t\telementType = IJavaElement.CLASS_FILE;\r", "+\t\tif (projectOfRoot != null) {\r", "+\t\t\tcurrentProject = projectOfRoot;\r", "+\t\t\tif (parentType == IJavaElement.JAVA_MODEL && delta.getKind() != IResourceDelta.CHANGED) {\r", "+\t\t\t\t// project is added or removed\r", "+\t\t\t\telementType = IJavaElement.JAVA_PROJECT;\r", "+\t\t\t} else {\r", "+\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT_ROOT;\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\tswitch (parentType) {\r", "+\t\t\t\tcase IJavaElement.JAVA_MODEL:\r", "+\t\t\t\tcase IJavaElement.JAVA_PROJECT:\r", "+\t\t\t\t\tif (currentProject != null) {\r", "+\t\t\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT_ROOT;\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\telementType = IJavaElement.JAVA_PROJECT; // not yet in a package fragment root\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t}\t\t\t\t\t\t\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\r", "+\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "+\t\t\t\t\tif (res instanceof IFolder) {\r", "+\t\t\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT;\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tString extension = res.getFileExtension();\r", "+\t\t\t\t\t\tif (\"java\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\t\t\telementType = IJavaElement.COMPILATION_UNIT;\r", "+\t\t\t\t\t\t} else if (\"class\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\t\t\telementType = IJavaElement.CLASS_FILE;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t}\r", "-\t\tif (isOnClasspath) {\r", "+\t\tif (currentProject != null) {\r", "+\t\t\tif (this.currentElement == null || !this.currentElement.getJavaProject().equals(currentProject)) {\r", "+\t\t\t\t// force the currentProject to be used\r", "+\t\t\t\tthis.currentElement = (Openable)currentProject;\r", "+\t\t\t}\r", "+\t\tboolean result;\r", "-\t\t\t\tif (!traverseDelta(child, elementType)) {\r", "+\t\t\t\tif (!traverseDelta(child, elementType, currentProject)) {\r", "-\t\t\t\t\t\tif (isOnClasspath) { \r", "+\t\t\t\t\t\tif (currentProject != null) { \r", "+\t\t\t\t\t\t\t\tif (this.currentElement == null || !this.currentElement.getJavaProject().equals(currentProject)) {\r", "+\t\t\t\t\t\t\t\t\t// force the currentProject to be used\r", "+\t\t\t\t\t\t\t\t\tthis.currentElement = (Openable)currentProject;\r", "+\t\t\t\t\t\t\t\t}\r", "-\t\t\t\tJavaProject project = (JavaProject)JavaCore.getJavaCore().create(res.getProject());\r", "-\t\t\t\tif (project != null) {\r", "+\t\t\t\tJavaProject adoptiveProject = (JavaProject)JavaCore.getJavaCore().create(res.getProject());\r", "+\t\t\t\tif (adoptiveProject != null) {\r", "-\t\t\t\t\t\t\t\tnonJavaResourcesChanged(project, orphanChildren[i]);\r", "+\t\t\t\t\t\t\t\tnonJavaResourcesChanged(adoptiveProject, orphanChildren[i]);\r", "-\t\t\treturn isOnClasspath || oneChildOnClasspath;\r", "+\t\t\tresult = currentProject != null || oneChildOnClasspath;\r", "-\t\t\treturn \r", "-\t\t\t\tisOnClasspath \r", "+\t\t\tresult = \r", "+\t\t\t\tcurrentProject != null \r", "+\t\t\r", "+\t\t// other roots\r", "+\t\tHashSet set;\r", "+\t\tif ((set = (HashSet)this.otherRoots.get(fullPath)) != null) {\r", "+\t\t\tIterator iterator = set.iterator();\r", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\tIJavaProject project = (IJavaProject) iterator.next();", "+\t\t\t\tthis.cloneCurrentDelta(project, res);", "+\t\t\t}\r", "+\t\t}\r", "+\t\t\r", "+\t\treturn result;\r"]}], "num": 2309}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9be9fe0636b498ee246eb08de31df8d1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f04d1b7cd608bfdc8d9d992692933b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CreateMembersTests.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void test004() throws JavaModelException", "signatureAfterChange": " \tpublic void test004() throws JavaModelException", "diff": ["-\t\tHashtable oldOptions = JavaCore.getOptions();", "-\t\ttry {", "-\t\t\tHashtable options = new Hashtable(oldOptions);", "-\t\t\toptions.put(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_1_5);", "-\t\t\toptions.put(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_5);", "-\t\t\tJavaCore.setOptions(options);", "-\t\t\tIType type = getCompilationUnit(\"/CreateMembers/src/A.java\").getType(\"A\");", "-\t\t\tIMethod method = type.createMethod(", "-\t\t\t\t\"void bar(String... args) {}\",", "-\t\t\t\tnull, // no siblings", "-\t\t\t\tfalse, // don't force", "-\t\t\t\tnull // no progress monitor", "-\t\t\t);", "-\t\t\tassertTrue(\"Method should exist\", method.exists());", "-\t\t} finally {", "-\t\t\tJavaCore.setOptions(oldOptions);", "-\t\t}", "+\t\tIType type = getCompilationUnit(\"/CreateMembers/src/A.java\").getType(\"A\");", "+\t\tIMethod method = type.createMethod(", "+\t\t\t\"void bar(String... args) {}\",", "+\t\t\tnull, // no siblings", "+\t\t\tfalse, // don't force", "+\t\t\tnull // no progress monitor", "+\t\t);", "+\t\tassertTrue(\"Method should exist\", method.exists());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "372c34bed445e68ff53c65ed816403ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CreateMembersTests.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void test005() throws JavaModelException", "signatureAfterChange": " \tpublic void test005() throws JavaModelException", "diff": ["-\t\tHashtable oldOptions = JavaCore.getOptions();", "-\t\ttry {", "-\t\t\tHashtable options = new Hashtable(oldOptions);", "-\t\t\toptions.put(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_1_5);", "-\t\t\toptions.put(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_5);", "-\t\t\tJavaCore.setOptions(options);", "-\t\t\tICompilationUnit compilationUnit = getCompilationUnit(\"CreateMembers\", \"src\", \"\", \"E2.java\");", "-\t\t\tassertNotNull(\"No compilation unit\", compilationUnit);", "-\t\t\tIType[] types = compilationUnit.getTypes();", "-\t\t\tassertNotNull(\"No types\", types);", "-\t\t\tassertEquals(\"Wrong size\", 1, types.length);", "-\t\t\tIType type = types[0];", "-\t\t\ttype.createField(\"int i;\", null, true, null);", "-\t\t\tString expectedSource = ", "-\t\t\t\t\"public enum E2 {\\n\" + ", "-\t\t\t\t\"\tA, B, C;\\n\\n\" +", "-\t\t\t\t\"\tint i;\\n\" + ", "-\t\t\t\t\"}\";", "-\t\t\tassertSourceEquals(\"Unexpected source\", expectedSource, type.getSource());", "-\t\t} finally {", "-\t\t\tJavaCore.setOptions(oldOptions);", "-\t\t}", "+\t\tICompilationUnit compilationUnit = getCompilationUnit(\"CreateMembers\", \"src\", \"\", \"E2.java\");", "+\t\tassertNotNull(\"No compilation unit\", compilationUnit);", "+\t\tIType[] types = compilationUnit.getTypes();", "+\t\tassertNotNull(\"No types\", types);", "+\t\tassertEquals(\"Wrong size\", 1, types.length);", "+\t\tIType type = types[0];", "+\t\ttype.createField(\"int i;\", null, true, null);", "+\t\tString expectedSource = ", "+\t\t\t\"public enum E2 {\\n\" + ", "+\t\t\t\"\tA, B, C;\\n\\n\" +", "+\t\t\t\"\tint i;\\n\" + ", "+\t\t\t\"}\";", "+\t\tassertSourceEquals(\"Unexpected source\", expectedSource, type.getSource());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6d8fb98d2aee1c70c45314ccf136845", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CreateMembersTests.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void test006() throws JavaModelException", "signatureAfterChange": " \tpublic void test006() throws JavaModelException", "diff": ["-\t\tHashtable oldOptions = JavaCore.getOptions();", "-\t\ttry {", "-\t\t\tHashtable options = new Hashtable(oldOptions);", "-\t\t\toptions.put(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_1_5);", "-\t\t\toptions.put(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_5);", "-\t\t\tJavaCore.setOptions(options);", "-\t\t\tICompilationUnit compilationUnit = getCompilationUnit(\"CreateMembers\", \"src\", \"\", \"E3.java\");", "-\t\t\tassertNotNull(\"No compilation unit\", compilationUnit);", "-\t\t\tIType[] types = compilationUnit.getTypes();", "-\t\t\tassertNotNull(\"No types\", types);", "-\t\t\tassertEquals(\"Wrong size\", 1, types.length);", "-\t\t\tIType type = types[0];", "-\t\t\ttype.createType(\"class DD {}\", null, true, null);", "-\t\t\tString expectedSource = ", "-\t\t\t\t\"public enum E3 {\\n\" + ", "-\t\t\t\t\"\tA, B, C;\\n\\n\" +", "-\t\t\t\t\"\tclass DD {}\\n\" + ", "-\t\t\t\t\"}\";", "-\t\t\tassertSourceEquals(\"Unexpected source\", expectedSource, type.getSource());", "-\t\t} finally {", "-\t\t\tJavaCore.setOptions(oldOptions);", "-\t\t}", "+\t\tICompilationUnit compilationUnit = getCompilationUnit(\"CreateMembers\", \"src\", \"\", \"E3.java\");", "+\t\tassertNotNull(\"No compilation unit\", compilationUnit);", "+\t\tIType[] types = compilationUnit.getTypes();", "+\t\tassertNotNull(\"No types\", types);", "+\t\tassertEquals(\"Wrong size\", 1, types.length);", "+\t\tIType type = types[0];", "+\t\ttype.createType(\"class DD {}\", null, true, null);", "+\t\tString expectedSource = ", "+\t\t\t\"public enum E3 {\\n\" + ", "+\t\t\t\"\tA, B, C;\\n\\n\" +", "+\t\t\t\"\tclass DD {}\\n\" + ", "+\t\t\t\"}\";", "+\t\tassertSourceEquals(\"Unexpected source\", expectedSource, type.getSource());"]}], "num": 63489}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe0130dc896c02c798bf842363f47fd5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3257f170202d17c0c623942e30cc6989", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "e727e59f7c542c72974201b990d6500618f1dbac", "commitAfterChange": "dfc95f9bbb633dbf9f58a8f0947067806925def8", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic static final boolean pathMatch( \t\tchar[] pattern, \t\tchar[] filepath, \t\tboolean isCaseSensitive, \t\tchar pathSeparator)", "signatureAfterChange": " \tpublic static final boolean pathMatch( \t\tchar[] pattern, \t\tchar[] filepath, \t\tboolean isCaseSensitive, \t\tchar pathSeparator)", "diff": ["-\t\t// offsets inside pattern", "-\t\tint pSegmentStart = 0, pLength = pattern.length;", "-\t\tint pSegmentEnd = CharOperation.indexOf(pathSeparator, pattern);", "-\t\tif (pSegmentEnd < 0)", "-\t\t\tpSegmentEnd = pLength;", "-", "-\t\t// offsets inside filepath", "-\t\tint fSegmentStart = 0, fLength = filepath.length;", "-\t\tint fSegmentEnd = CharOperation.indexOf(pathSeparator, filepath);", "-\t\tif (fSegmentEnd < 0)", "-\t\t\tfSegmentEnd = fLength;", "-", "-\t\tboolean freeLeadingDoubleStar = pattern[0] != pathSeparator;", "+\t\tboolean freeLeadingDoubleStar;", "+", "+\t\t// offsets inside pattern", "+\t\tint pSegmentStart, pLength = pattern.length;", "+", "+\t\tif (freeLeadingDoubleStar = pattern[0] != pathSeparator){", "+\t\t\tpSegmentStart = 0;", "+\t\t} else {", "+\t\t\tpSegmentStart = 1;", "+\t\t}", "+\t\tint pSegmentEnd = CharOperation.indexOf(pathSeparator, pattern, pSegmentStart+1);", "+\t\tif (pSegmentEnd < 0) pSegmentEnd = pLength;", "+\t\t// offsets inside filepath", "+\t\tint fSegmentStart, fLength = filepath.length;", "+\t\tif (filepath[0] != pathSeparator){", "+\t\t\tfSegmentStart = 0;", "+\t\t} else {", "+\t\t\tfSegmentStart = 1;", "+\t\t}", "+\t\tif (fSegmentStart != pSegmentStart) {", "+\t\t\treturn false; // both must start with a separator or none.", "+\t\t}", "+\t\tint fSegmentEnd = CharOperation.indexOf(pathSeparator, filepath, fSegmentStart+1);", "+\t\tif (fSegmentEnd < 0) fSegmentEnd = fLength;", "+", "-\t\t\t&& !(pSegmentEnd == pSegmentStart + 2", "-\t\t\t\t&& pattern[pSegmentStart] == '*'", "-\t\t\t\t&& pattern[pSegmentStart + 1] == '*')) {", "+\t\t\t&& !(pSegmentEnd == pLength && freeTrailingDoubleStar", "+\t\t\t\t\t|| (pSegmentEnd == pSegmentStart + 2", "+\t\t\t\t\t\t\t&& pattern[pSegmentStart] == '*'", "+\t\t\t\t\t\t\t&& pattern[pSegmentStart + 1] == '*'))) {", "-\t\t\tif (fSegmentEnd < 0)", "-\t\t\t\tfSegmentEnd = fLength;", "+\t\t\tif (fSegmentEnd < 0) fSegmentEnd = fLength;", "-\t\tif (pSegmentEnd == pSegmentStart + 2", "-\t\t\t&& pattern[pSegmentStart] == '*'", "-\t\t\t&& pattern[pSegmentStart + 1] == '*') {", "+\t\tif ((pSegmentStart >= pLength && freeTrailingDoubleStar)", "+\t\t\t\t|| (pSegmentEnd == pSegmentStart + 2", "+\t\t\t\t\t&& pattern[pSegmentStart] == '*'", "+\t\t\t\t\t&& pattern[pSegmentStart + 1] == '*')) {", "-\t\t\tif (pSegmentEnd < 0)", "-\t\t\t\tpSegmentEnd = pLength;", "+\t\t\tif (pSegmentEnd < 0) pSegmentEnd = pLength;", "-\t\tcheckSegment : while (", "-\t\t\tfSegmentStart < fLength && pSegmentStart < pLength) {", "-\t\t\t/* segment is ending */", "-\t\t\tif (pSegmentEnd == pSegmentStart + 2", "-\t\t\t\t&& pattern[pSegmentStart] == '*'", "-\t\t\t\t&& pattern[pSegmentStart + 1] == '*') {", "+\t\tcheckSegment : while (fSegmentStart < fLength) {", "+\t\t\t\t", "+\t\t\tif (pSegmentStart >= pLength) {", "+\t\t\t\tif (freeTrailingDoubleStar) return true;", "+\t\t\t\t// mismatch - restart current path segment", "-\t\t\t\t\tCharOperation.indexOf(", "-\t\t\t\t\t\tpathSeparator,", "-\t\t\t\t\t\tpattern,", "-\t\t\t\t\t\tpSegmentStart = pSegmentEnd + 1);", "-\t\t\t\t// skip separator", "-\t\t\t\tif (pSegmentEnd < 0)", "-\t\t\t\t\tpSegmentEnd = pLength;", "-\t\t\t\tpSegmentRestart = pSegmentStart;", "-\t\t\t\tfSegmentRestart = fSegmentStart;", "-\t\t\t\tcontinue checkSegment;", "-\t\t\t}", "-\t\t\t/* chech current path segment */", "-\t\t\tif (!CharOperation", "-\t\t\t\t.match(", "-\t\t\t\t\tpattern,", "-\t\t\t\t\tpSegmentStart,", "-\t\t\t\t\tpSegmentEnd,", "-\t\t\t\t\tfilepath,", "-\t\t\t\t\tfSegmentStart,", "-\t\t\t\t\tfSegmentEnd,", "-\t\t\t\t\tisCaseSensitive)) {", "-\t\t\t\t// mismatch - restart current segment", "-\t\t\t\tpSegmentEnd =", "-\t\t\t\t\tCharOperation.indexOf(", "-\t\t\t\t\t\tpathSeparator,", "-\t\t\t\t\t\tpattern,", "-\t\t\t\t\t\tpSegmentStart = pSegmentRestart);", "-\t\t\t\tif (pSegmentEnd < 0)", "-\t\t\t\t\tpSegmentEnd = pLength;", "+\t\t\t\t\tCharOperation.indexOf(pathSeparator, pattern, pSegmentStart = pSegmentRestart);", "+\t\t\t\tif (pSegmentEnd < 0) pSegmentEnd = pLength;", "-\t\t\t\tfSegmentRestart =", "-\t\t\t\t\tCharOperation.indexOf(", "-\t\t\t\t\t\tpathSeparator,", "-\t\t\t\t\t\tfilepath,", "-\t\t\t\t\t\tfSegmentRestart + 1);", "+\t\t\t\tfSegmentRestart = ", "+\t\t\t\t\tCharOperation.indexOf(pathSeparator, filepath, fSegmentRestart + 1);", "-\t\t\t\t\tCharOperation.indexOf(", "-\t\t\t\t\t\tpathSeparator,", "-\t\t\t\t\t\tfilepath,", "-\t\t\t\t\t\tfSegmentStart = fSegmentRestart);", "-\t\t\t\tif (fSegmentEnd < 0)", "-\t\t\t\t\tfSegmentEnd = fLength;", "+\t\t\t\t\tCharOperation.indexOf(pathSeparator, filepath, fSegmentStart = fSegmentRestart);", "+\t\t\t\tif (fSegmentEnd < 0) fSegmentEnd = fLength;", "+\t\t\t\tcontinue checkSegment;", "+\t\t\t}", "+\t\t\t", "+\t\t\t/* path segment is ending */", "+\t\t\tif (pSegmentEnd == pSegmentStart + 2", "+\t\t\t\t&& pattern[pSegmentStart] == '*'", "+\t\t\t\t&& pattern[pSegmentStart + 1] == '*') {", "+\t\t\t\tpSegmentEnd =", "+\t\t\t\t\tCharOperation.indexOf(pathSeparator, pattern, pSegmentStart = pSegmentEnd + 1);", "+\t\t\t\t// skip separator", "+\t\t\t\tif (pSegmentEnd < 0) pSegmentEnd = pLength;", "+\t\t\t\tpSegmentRestart = pSegmentStart;", "+\t\t\t\tfSegmentRestart = fSegmentStart;", "+\t\t\t\tif (pSegmentStart >= pLength) return true;", "+\t\t\t\tcontinue checkSegment;", "+\t\t\t}", "+\t\t\t/* chech current path segment */", "+\t\t\tif (!CharOperation.match(", "+\t\t\t\t\t\t\t\tpattern,", "+\t\t\t\t\t\t\t\tpSegmentStart,", "+\t\t\t\t\t\t\t\tpSegmentEnd,", "+\t\t\t\t\t\t\t\tfilepath,", "+\t\t\t\t\t\t\t\tfSegmentStart,", "+\t\t\t\t\t\t\t\tfSegmentEnd,", "+\t\t\t\t\t\t\t\tisCaseSensitive)) {", "+\t\t\t\t// mismatch - restart current path segment", "+\t\t\t\tpSegmentEnd =", "+\t\t\t\t\tCharOperation.indexOf(pathSeparator, pattern, pSegmentStart = pSegmentRestart);", "+\t\t\t\tif (pSegmentEnd < 0) pSegmentEnd = pLength;", "+", "+\t\t\t\tfSegmentRestart = ", "+\t\t\t\t\tCharOperation.indexOf(pathSeparator, filepath, fSegmentRestart + 1);", "+\t\t\t\t// skip separator", "+\t\t\t\tif (fSegmentRestart < 0) {", "+\t\t\t\t\tfSegmentRestart = fLength;", "+\t\t\t\t} else {", "+\t\t\t\t\tfSegmentRestart++;", "+\t\t\t\t}", "+\t\t\t\tfSegmentEnd =", "+\t\t\t\t\tCharOperation.indexOf(pathSeparator, filepath, fSegmentStart = fSegmentRestart);", "+\t\t\t\tif (fSegmentEnd < 0) fSegmentEnd = fLength;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea10152475df7cb55439557db3e0a36b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTestsRequestor2.java", "commitBeforeChange": "542ce5451500fe1306b92aaa9a7c04d8d83f7f3f", "commitAfterChange": "9cbf7e62288f060b33b2dc1c1d579dae84747012", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 20, "signatureBeforeChange": " \t \tprotected int compare(CompletionProposal proposal1, CompletionProposal proposal2)", "signatureAfterChange": " \t \tprotected int compare(CompletionProposal proposal1, CompletionProposal proposal2)", "diff": ["-\t\tif(relDif != 0) {", "-\t\t\treturn relDif;", "-\t\t} else {", "-\t\t\tString name1 = getElementName(proposal1);", "-\t\t\tString name2 = getElementName(proposal2);", "-\t\t\tint nameDif = name1.compareTo(name2);", "-\t\t\tif(nameDif != 0) {", "-\t\t\t\treturn nameDif;", "-\t\t\t} else {", "-\t\t\t\tint kindDif = proposal1.getKind() - proposal2.getKind();", "-\t\t\t\tif(kindDif != 0) {", "-\t\t\t\t\treturn kindDif;", "-\t\t\t\t} else {", "-\t\t\t\t\tString completion1 = new String(proposal1.getCompletion());", "-\t\t\t\t\tString completion2 = new String(proposal2.getCompletion());", "-\t\t\t\t\treturn completion1.compareTo(completion2);", "-\t\t\t\t}", "-\t\t\t}", "+\t\tif(relDif != 0) return relDif;", "+\t\tString name1 = getElementName(proposal1);", "+\t\tString name2 = getElementName(proposal2);", "+\t\tint nameDif = name1.compareTo(name2);", "+\t\tif(nameDif != 0) return nameDif;", "+\t\tint kindDif = proposal1.getKind() - proposal2.getKind();", "+\t\tif(kindDif != 0) return kindDif;", "+\t\tString completion1 = new String(proposal1.getCompletion());", "+\t\tString completion2 = new String(proposal2.getCompletion());", "+\t\tint completionDif = completion1.compareTo(completion2);", "+\t\tif(completionDif != 0) return completionDif;", "+\t\tchar[] temp = proposal1.getSignature();", "+\t\tString signature1 = temp == null ? null: new String(temp);", "+\t\ttemp = proposal2.getSignature();", "+\t\tString signature2 = temp == null ? null: new String(temp);", "+\t\tint signatureDif = 0;", "+\t\tif(signature1 != null && signature2 != null) {", "+\t\t\tsignatureDif = signature1.compareTo(signature2);", "+\t\tif(signatureDif != 0) return signatureDif;", "+\t\ttemp = proposal1.getDeclarationSignature();", "+\t\tString declarationSignature1 = temp == null ? null: new String(temp);", "+\t\ttemp = proposal2.getDeclarationSignature();", "+\t\tString declarationSignature2 = temp == null ? null: new String(temp);", "+\t\tint declarationSignatureDif = 0;", "+\t\tif(declarationSignature1 != null && declarationSignature2 != null) {", "+\t\t\tdeclarationSignatureDif = declarationSignature1.compareTo(declarationSignature2);", "+\t\t}", "+\t\tif(declarationSignatureDif != 0) return declarationSignatureDif;", "+\t\treturn 0;"]}], "num": 72575}
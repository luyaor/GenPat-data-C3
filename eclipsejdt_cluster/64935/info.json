{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3965370c13a1a3ca70c38c5d892a81e3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58df1789bcc4682306bcdb9e15f92880", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "dfc3b8264596f4754baac29eef1af815f182c4f3", "commitAfterChange": "db0143bfca2398448195a62173050bd24d4fcb31", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r \r private void findMemberTypes(char[] typeName, ReferenceBinding[] memberTypes, ObjectVector typesFound)", "signatureAfterChange": "\r \r \tprivate void findMemberTypes(\r \t\tchar[] typeName,\r \t\tReferenceBinding[] memberTypes,\r \t\tObjectVector typesFound,\r \t\tReferenceBinding receiverType,\r \t\tSourceTypeBinding invocationType)", "diff": ["-private void findMemberTypes(char[] typeName, ReferenceBinding[] memberTypes, ObjectVector typesFound) {\r", "-\r", "-\t// Inherited member types which are hidden by subclasses are filtered out\r", "-\t// No visibility checks can be performed without the scope & invocationSite\r", "-\r", "-\tint typeLength = typeName.length;\r", "-\tnext : for (int m = memberTypes.length; --m >= 0;) {\r", "-\t\tReferenceBinding memberType = memberTypes[m];\r", "-//\t\tif (!wantClasses && memberType.isClass()) continue next;\r", "-//\t\tif (!wantInterfaces && memberType.isInterface()) continue next;\r", "-\t\tif (typeLength > memberType.sourceName.length) continue next;\r", "-\t\tif (!CharOperation.prefixEquals(typeName, memberType.sourceName, false /* ignore case */)) continue next;\r", "-\r", "-\t\tfor (int i = typesFound.size; --i >= 0;) {\r", "-\t\t\tReferenceBinding otherType = (ReferenceBinding) typesFound.elementAt(i);\r", "-\t\t\tif (memberType == otherType) continue next;\r", "-\t\t\tif (CharOperation.equals(memberType.sourceName, otherType.sourceName, true)) {\r", "-\t\t\t\tif (memberType.enclosingType().isSuperclassOf(otherType.enclosingType())) continue next;\r", "-\t\t\t\tif (otherType.enclosingType().isInterface())\r", "-\t\t\t\t\tif (memberType.enclosingType().implementsInterface(otherType.enclosingType(), true)) continue next;\r", "-\r", "-\t\ttypesFound.add(memberType);\r", "-\t\tif (memberType.isClass())\r", "-\t\t\trequestor.acceptClass(\r", "-\t\t\t\tmemberType.qualifiedPackageName(),\r", "-\t\t\t\tmemberType.qualifiedSourceName(),\r", "-\t\t\t\tmemberType.sourceName(),\r", "-\t\t\t\tmemberType.modifiers,\r", "-\t\t\t\tstartPosition,\r", "-\t\t\t\tendPosition);\r", "-\t\telse\r", "-\t\t\trequestor.acceptInterface(\r", "-\t\t\t\tmemberType.qualifiedPackageName(),\r", "-\t\t\t\tmemberType.qualifiedSourceName(),\r", "-\t\t\t\tmemberType.sourceName(),\r", "-\t\t\t\tmemberType.modifiers,\r", "-\t\t\t\tstartPosition,\r", "-\t\t\t\tendPosition);\r", "-}\r", "+\tprivate void findMemberTypes(\r", "+\t\tchar[] typeName,\r", "+\t\tReferenceBinding[] memberTypes,\r", "+\t\tObjectVector typesFound,\r", "+\t\tReferenceBinding receiverType,\r", "+\t\tSourceTypeBinding invocationType) {\r", "+\t\t// Inherited member types which are hidden by subclasses are filtered out\r", "+\t\t// No visibility checks can be performed without the scope & invocationSite\r", "+\r", "+\t\tint typeLength = typeName.length;\r", "+\t\tnext : for (int m = memberTypes.length; --m >= 0;) {\r", "+\t\t\tReferenceBinding memberType = memberTypes[m];\r", "+\t\t\t//\t\tif (!wantClasses && memberType.isClass()) continue next;\r", "+\t\t\t//\t\tif (!wantInterfaces && memberType.isInterface()) continue next;\r", "+\t\t\tif (typeLength > memberType.sourceName.length)\r", "+\t\t\t\tcontinue next;\r", "+\t\t\tif (!CharOperation.prefixEquals(typeName, memberType.sourceName, false\r", "+\t\t\t\t/* ignore case */\r", "+\t\t\t\t))\r", "+\t\t\t\tcontinue next;\r", "+\r", "+\t\t\tif (options.checkVisibilitySensitive()\r", "+\t\t\t\t&& !memberType.canBeSeenBy(receiverType, invocationType))\r", "+\t\t\t\tcontinue next;\r", "+\r", "+\t\t\tfor (int i = typesFound.size; --i >= 0;) {\r", "+\t\t\t\tReferenceBinding otherType = (ReferenceBinding) typesFound.elementAt(i);\r", "+\t\t\t\tif (memberType == otherType)\r", "+\t\t\t\t\tcontinue next;\r", "+\t\t\t\tif (CharOperation.equals(memberType.sourceName, otherType.sourceName, true)) {\r", "+\t\t\t\t\tif (memberType.enclosingType().isSuperclassOf(otherType.enclosingType()))\r", "+\t\t\t\t\t\tcontinue next;\r", "+\t\t\t\t\tif (otherType.enclosingType().isInterface())\r", "+\t\t\t\t\t\tif (memberType\r", "+\t\t\t\t\t\t\t.enclosingType()\r", "+\t\t\t\t\t\t\t.implementsInterface(otherType.enclosingType(), true))\r", "+\t\t\t\t\t\t\tcontinue next;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\r", "+\t\t\ttypesFound.add(memberType);\r", "+\t\t\tif (memberType.isClass())\r", "+\t\t\t\trequestor.acceptClass(\r", "+\t\t\t\t\tmemberType.qualifiedPackageName(),\r", "+\t\t\t\t\tmemberType.qualifiedSourceName(),\r", "+\t\t\t\t\tmemberType.sourceName(),\r", "+\t\t\t\t\tmemberType.modifiers,\r", "+\t\t\t\t\tstartPosition,\r", "+\t\t\t\t\tendPosition);\r", "+\t\t\telse\r", "+\t\t\t\trequestor.acceptInterface(\r", "+\t\t\t\t\tmemberType.qualifiedPackageName(),\r", "+\t\t\t\t\tmemberType.qualifiedSourceName(),\r", "+\t\t\t\t\tmemberType.sourceName(),\r", "+\t\t\t\t\tmemberType.modifiers,\r", "+\t\t\t\t\tstartPosition,\r", "+\t\t\t\t\tendPosition);\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99465b08a198a967b3a359eb2660a5e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r \r private void findMemberTypes(char[] typeName, ReferenceBinding[] memberTypes, ObjectVector typesFound)", "signatureAfterChange": "\r \r \tprivate void findMemberTypes(\r \t\tchar[] typeName,\r \t\tReferenceBinding[] memberTypes,\r \t\tObjectVector typesFound,\r \t\tReferenceBinding receiverType,\r \t\tSourceTypeBinding invocationType)", "diff": ["-private void findMemberTypes(char[] typeName, ReferenceBinding[] memberTypes, ObjectVector typesFound) {\r", "-\r", "-\t// Inherited member types which are hidden by subclasses are filtered out\r", "-\t// No visibility checks can be performed without the scope & invocationSite\r", "-\r", "-\tint typeLength = typeName.length;\r", "-\tnext : for (int m = memberTypes.length; --m >= 0;) {\r", "-\t\tReferenceBinding memberType = memberTypes[m];\r", "-//\t\tif (!wantClasses && memberType.isClass()) continue next;\r", "-//\t\tif (!wantInterfaces && memberType.isInterface()) continue next;\r", "-\t\tif (typeLength > memberType.sourceName.length) continue next;\r", "-\t\tif (!CharOperation.prefixEquals(typeName, memberType.sourceName, false /* ignore case */)) continue next;\r", "-\r", "-\t\tfor (int i = typesFound.size; --i >= 0;) {\r", "-\t\t\tReferenceBinding otherType = (ReferenceBinding) typesFound.elementAt(i);\r", "-\t\t\tif (memberType == otherType) continue next;\r", "-\t\t\tif (CharOperation.equals(memberType.sourceName, otherType.sourceName, true)) {\r", "-\t\t\t\tif (memberType.enclosingType().isSuperclassOf(otherType.enclosingType())) continue next;\r", "-\t\t\t\tif (otherType.enclosingType().isInterface())\r", "-\t\t\t\t\tif (memberType.enclosingType().implementsInterface(otherType.enclosingType(), true)) continue next;\r", "-\r", "-\t\ttypesFound.add(memberType);\r", "-\t\tif (memberType.isClass())\r", "-\t\t\trequestor.acceptClass(\r", "-\t\t\t\tmemberType.qualifiedPackageName(),\r", "-\t\t\t\tmemberType.qualifiedSourceName(),\r", "-\t\t\t\tmemberType.sourceName(),\r", "-\t\t\t\tmemberType.modifiers,\r", "-\t\t\t\tstartPosition,\r", "-\t\t\t\tendPosition);\r", "-\t\telse\r", "-\t\t\trequestor.acceptInterface(\r", "-\t\t\t\tmemberType.qualifiedPackageName(),\r", "-\t\t\t\tmemberType.qualifiedSourceName(),\r", "-\t\t\t\tmemberType.sourceName(),\r", "-\t\t\t\tmemberType.modifiers,\r", "-\t\t\t\tstartPosition,\r", "-\t\t\t\tendPosition);\r", "-}\r", "+\tprivate void findMemberTypes(\r", "+\t\tchar[] typeName,\r", "+\t\tReferenceBinding[] memberTypes,\r", "+\t\tObjectVector typesFound,\r", "+\t\tReferenceBinding receiverType,\r", "+\t\tSourceTypeBinding invocationType) {\r", "+\t\t// Inherited member types which are hidden by subclasses are filtered out\r", "+\t\t// No visibility checks can be performed without the scope & invocationSite\r", "+\r", "+\t\tint typeLength = typeName.length;\r", "+\t\tnext : for (int m = memberTypes.length; --m >= 0;) {\r", "+\t\t\tReferenceBinding memberType = memberTypes[m];\r", "+\t\t\t//\t\tif (!wantClasses && memberType.isClass()) continue next;\r", "+\t\t\t//\t\tif (!wantInterfaces && memberType.isInterface()) continue next;\r", "+\t\t\tif (typeLength > memberType.sourceName.length)\r", "+\t\t\t\tcontinue next;\r", "+\t\t\tif (!CharOperation.prefixEquals(typeName, memberType.sourceName, false\r", "+\t\t\t\t/* ignore case */\r", "+\t\t\t\t))\r", "+\t\t\t\tcontinue next;\r", "+\r", "+\t\t\tif (options.checkVisibilitySensitive()\r", "+\t\t\t\t&& !memberType.canBeSeenBy(receiverType, invocationType))\r", "+\t\t\t\tcontinue next;\r", "+\r", "+\t\t\tfor (int i = typesFound.size; --i >= 0;) {\r", "+\t\t\t\tReferenceBinding otherType = (ReferenceBinding) typesFound.elementAt(i);\r", "+\t\t\t\tif (memberType == otherType)\r", "+\t\t\t\t\tcontinue next;\r", "+\t\t\t\tif (CharOperation.equals(memberType.sourceName, otherType.sourceName, true)) {\r", "+\t\t\t\t\tif (memberType.enclosingType().isSuperclassOf(otherType.enclosingType()))\r", "+\t\t\t\t\t\tcontinue next;\r", "+\t\t\t\t\tif (otherType.enclosingType().isInterface())\r", "+\t\t\t\t\t\tif (memberType\r", "+\t\t\t\t\t\t\t.enclosingType()\r", "+\t\t\t\t\t\t\t.implementsInterface(otherType.enclosingType(), true))\r", "+\t\t\t\t\t\t\tcontinue next;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\r", "+\t\t\ttypesFound.add(memberType);\r", "+\t\t\tif (memberType.isClass())\r", "+\t\t\t\trequestor.acceptClass(\r", "+\t\t\t\t\tmemberType.qualifiedPackageName(),\r", "+\t\t\t\t\tmemberType.qualifiedSourceName(),\r", "+\t\t\t\t\tmemberType.sourceName(),\r", "+\t\t\t\t\tmemberType.modifiers,\r", "+\t\t\t\t\tstartPosition,\r", "+\t\t\t\t\tendPosition);\r", "+\t\t\telse\r", "+\t\t\t\trequestor.acceptInterface(\r", "+\t\t\t\t\tmemberType.qualifiedPackageName(),\r", "+\t\t\t\t\tmemberType.qualifiedSourceName(),\r", "+\t\t\t\t\tmemberType.sourceName(),\r", "+\t\t\t\t\tmemberType.modifiers,\r", "+\t\t\t\t\tstartPosition,\r", "+\t\t\t\t\tendPosition);\r", "+\t\t}\r", "+\t}\r"]}], "num": 64935}
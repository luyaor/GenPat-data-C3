{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b770de3024ccd6a81bd7e146ccd61a5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56b386472c15f8d024374b8d5c802872", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyPackageFragmentRootOperation.java", "commitBeforeChange": "2137214feeed8e469f6a48ad072ff21bc1eece7e", "commitAfterChange": "41b3af5fb5d6223f4e0dcfced815a29a07861ec5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprotected void updateDestProjectClasspath( \t\tIClasspathEntry rootEntry, \t\tIWorkspaceRoot workspaceRoot) \t\tthrows JavaModelException", "signatureAfterChange": " \tprotected void updateDestProjectClasspath( \t\tIClasspathEntry rootEntry, \t\tIWorkspaceRoot workspaceRoot) \t\tthrows JavaModelException", "diff": ["+\t\t", "+\t\tIClasspathEntry[] newClasspath;", "+\t\t", "+\t\t// case of existing entry and REPLACE was specified", "+\t\tif ((this.updateModelFlags & IPackageFragmentRoot.REPLACE) != 0) {", "+\t\t\t// find existing entry", "+\t\t\tIPath rootPath = rootEntry.getPath();", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tif (rootPath.equals(classpath[i].getPath())) {", "+\t\t\t\t\tnewClasspath = new IClasspathEntry[length];", "+\t\t\t\t\tSystem.arraycopy(classpath, 0, newClasspath, 0, length);", "+\t\t\t\t\tnewClasspath[i] = copy(rootEntry);", "+\t\t\t\t\tjProject.setRawClasspath(newClasspath, fMonitor);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t} ", "+\t\t", "+\t\t// other cases", "-\t\tIClasspathEntry[] newClasspath = new IClasspathEntry[length+1];", "+\t\tnewClasspath = new IClasspathEntry[length+1];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "620353baf2e6b9520f71e6b343b37b73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Tests.java", "commitBeforeChange": "939badb3c6fe1d2f02856fa68cfae3c871f99594", "commitAfterChange": "1d813f81d1ab9bf28fbd197f33e8c5356ab9bb9d", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems)", "signatureAfterChange": " \tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems)", "diff": ["-\t\tfor (int i = 0; i < expectedProblems.length; i++)", "-\t\t\tassertEquals(\"unexpected problem\", expectedProblems[i].toString(), rootProblems[i].toString()); //$NON-NLS-1$", "+\t", "+\t\tfor (int i = 0; i < expectedProblems.length; i++) {", "+\t\t\tProblem expectedProblem = expectedProblems[i];", "+\t\t\tboolean found = false;", "+\t\t\tfor (int j = 0; j < rootProblems.length; j++) {", "+\t\t\t\tif(expectedProblem.equals(rootProblems[j])) {", "+\t\t\t\t\tfound = true;", "+\t\t\t\t\trootProblems[j] = null;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tassertTrue(\"problem not found: \" + expectedProblem.toString(), found); //$NON-NLS-1$", "+\t\t}", "+\t\tfor (int i = 0; i < rootProblems.length; i++) {", "+\t\t\tif(rootProblems[i] != null) {", "+\t\t\t\tassertTrue(\"unexpected problem: \" + rootProblems[i].toString(), false); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}"]}], "num": 65817}
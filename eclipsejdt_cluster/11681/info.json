{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08e817287cd5cd592e83728a34b492b7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1d0928aa8eeade4bb82d7c1460ea3af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 611, "methodNumberAfterChange": 611, "signatureBeforeChange": "\t\t \tpublic void test607()", "signatureAfterChange": "\t\t \tpublic void test607()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tCollections.sort (lComp);\t\t\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation sort(List<Comparable>) of the generic method sort(List<T>) of type Collections\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 15)\\n\" + ", "-\t\t\t\"\tCollections.sort (lStr);\\n\" + ", "-\t\t\t\"\t            ^^^^\\n\" + ", "-\t\t\t\"Bound mismatch: The generic method sort(List<T>) of type Collections is not applicable for the arguments (List<Comparable<String>>). The inferred type Comparable<String> is not a valid substitute for the bounded parameter <T extends Comparable<? super T>>\\n\" + ", "-\t\t\t\"----------\\n\");", "+            \"----------\\n\" + ", "+    \t\t\"1. WARNING in X.java (at line 10)\\n\" + ", "+    \t\t\"\tList<Comparable> lComp = new ArrayList<Comparable> ();\\n\" + ", "+    \t\t\"\t     ^^^^^^^^^^\\n\" + ", "+    \t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+    \t\t\"\tList<Comparable> lComp = new ArrayList<Comparable> ();\\n\" + ", "+    \t\t\"\t                                       ^^^^^^^^^^\\n\" + ", "+    \t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"3. WARNING in X.java (at line 11)\\n\" + ", "+    \t\t\"\tCollections.sort (lComp);\t\t\\n\" + ", "+    \t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+    \t\t\"Type safety: Unchecked invocation sort(List<Comparable>) of the generic method sort(List<T>) of type Collections\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"4. ERROR in X.java (at line 15)\\n\" + ", "+    \t\t\"\tCollections.sort (lStr);\\n\" + ", "+    \t\t\"\t            ^^^^\\n\" + ", "+    \t\t\"Bound mismatch: The generic method sort(List<T>) of type Collections is not applicable for the arguments (List<Comparable<String>>). The inferred type Comparable<String> is not a valid substitute for the bounded parameter <T extends Comparable<? super T>>\\n\" + ", "+    \t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e398227d1bde2f84b36e27106b205f41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1063, "methodNumberAfterChange": 1063, "signatureBeforeChange": " public void test1035()", "signatureAfterChange": " public void test1035()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in ComparableComparator.java (at line 14)\\n\" +", "-\t\t\"\tstatic <M extends String> Comparator<M> baz() {\\n\" +", "-\t\t\"\t                  ^^^^^^\\n\" +", "-\t\t\"The type parameter M should not be bounded by the final type String. Final types cannot be further extended\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in ComparableComparator.java (at line 27)\\n\" +", "-\t\t\"\tstatic Object BAR2 = ComparableComparator.bar();//1a\\n\" +", "-\t\t\"\t                                          ^^^\\n\" +", "-\t\t\"Bound mismatch: The generic method bar() of type ComparableComparator<T> is not applicable for the arguments (). The inferred type Comparable<Comparable<M>> is not a valid substitute for the bounded parameter <M extends Comparable<M>>\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in ComparableComparator.java (at line 14)\\n\" + ", "+\t\t\"\tstatic <M extends String> Comparator<M> baz() {\\n\" + ", "+\t\t\"\t                  ^^^^^^\\n\" + ", "+\t\t\"The type parameter M should not be bounded by the final type String. Final types cannot be further extended\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in ComparableComparator.java (at line 25)\\n\" + ", "+\t\t\"\tstatic Comparator BAR = ComparableComparator.bar();//0\\n\" + ", "+\t\t\"\t                                             ^^^\\n\" + ", "+\t\t\"Bound mismatch: The generic method bar() of type ComparableComparator<T> is not applicable for the arguments (). The inferred type Comparable<Comparable<M>> is not a valid substitute for the bounded parameter <M extends Comparable<M>>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in ComparableComparator.java (at line 27)\\n\" + ", "+\t\t\"\tstatic Object BAR2 = ComparableComparator.bar();//1a\\n\" + ", "+\t\t\"\t                                          ^^^\\n\" + ", "+\t\t\"Bound mismatch: The generic method bar() of type ComparableComparator<T> is not applicable for the arguments (). The inferred type Comparable<Comparable<M>> is not a valid substitute for the bounded parameter <M extends Comparable<M>>\\n\" + "]}], "num": 11681}
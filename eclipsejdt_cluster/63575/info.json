{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "93d043335f0a77eaa22a2fe99a732a8a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3eed95df8acd4f3e1ddba53659f360ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic final static boolean isExcluded(IPath resourcePath, char[][] exclusionPatterns)", "signatureAfterChange": " \tpublic final static boolean isExcluded(IPath resourcePath, char[][] inclusionPatterns, char[][] exclusionPatterns, boolean isFolderPath)", "diff": ["-\tpublic final static boolean isExcluded(IPath resourcePath, char[][] exclusionPatterns) {", "-\t\tif (exclusionPatterns == null) return false;", "+\tpublic final static boolean isExcluded(IPath resourcePath, char[][] inclusionPatterns, char[][] exclusionPatterns, boolean isFolderPath) {", "+\t\tif (inclusionPatterns == null && exclusionPatterns == null) return false;", "-\t\tfor (int i = 0, length = exclusionPatterns.length; i < length; i++)", "-\t\t\tif (CharOperation.pathMatch(exclusionPatterns[i], path, true, '/'))", "-\t\t\t\treturn true;", "+", "+\t\tinclusionCheck: if (inclusionPatterns != null) {", "+\t\t\tfor (int i = 0, length = inclusionPatterns.length; i < length; i++) {", "+\t\t\t\tchar[] pattern = inclusionPatterns[i];", "+\t\t\t\tchar[] folderPattern = pattern;", "+\t\t\t\tif (isFolderPath) {", "+\t\t\t\t\tint lastSlash = CharOperation.lastIndexOf('/', pattern);", "+\t\t\t\t\tif (lastSlash != -1) {", "+\t\t\t\t\t\tint star = CharOperation.indexOf('*', pattern, lastSlash);", "+\t\t\t\t\t\tif (star == -1 || star >= pattern.length-1 || pattern[star+1] != '*') {", "+\t\t\t\t\t\t\tfolderPattern = CharOperation.subarray(pattern, 0, lastSlash);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (CharOperation.pathMatch(folderPattern, path, true, '/')) {", "+\t\t\t\t\tbreak inclusionCheck;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn true; // never included", "+\t\t}", "+\t\tif (isFolderPath) {", "+\t\t\tpath = CharOperation.concat(path, new char[] {'*'}, '/');", "+\t\t}", "+\t\texclusionCheck: if (exclusionPatterns != null) {", "+\t\t\tfor (int i = 0, length = exclusionPatterns.length; i < length; i++) {", "+\t\t\t\tif (CharOperation.pathMatch(exclusionPatterns[i], path, true, '/')) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56b662c38be0f177a893499707120ed2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/UnresolvedReferenceNameFinder.java", "commitBeforeChange": "1fe69d52230e67687b32b072c6843ac0b930c0b8", "commitAfterChange": "6b2eaccbd1d9579997548e9877abcafa55f36650", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate boolean initPotentialNamesTables()", "signatureAfterChange": " \t \tprivate boolean initPotentialNamesTables(char[][] discouragedNames)", "diff": ["-\tprivate boolean initPotentialNamesTables() {", "-\t\tchar[][] pvns = this.completionScanner.potentialVariableNames;", "-\t\tint[] pvnss = this.completionScanner.potentialVariableNameStarts;", "-\t\tint pvnsPtr = this.completionScanner.potentialVariableNamesPtr;", "+\tprivate boolean initPotentialNamesTables(char[][] discouragedNames) {", "+\t\tchar[][] pvns = this.parser.potentialVariableNames;", "+\t\tint[] pvnss = this.parser.potentialVariableNameStarts;", "+\t\tint pvnsPtr = this.parser.potentialVariableNamesPtr;", "-\t\t// remove null", "+\t\t// remove null and discouragedNames", "+\t\tint discouragedNamesCount = discouragedNames == null ? 0 : discouragedNames.length;", "-\t\tfor (int i = 0; i <= pvnsPtr; i++) {", "-\t\t\tif (pvns[i] != null) {", "-\t\t\t\tchar[] temp = pvns[i];", "-\t\t\t\tpvns[i] = null;", "-\t\t\t\tpvns[++j] = temp;", "-\t\t\t\tpvnss[j] = pvnss[i];", "-\t\t\t\t", "+\t\tnext : for (int i = 0; i <= pvnsPtr; i++) {", "+\t\t\tchar[] temp = pvns[i];", "+\t\t\t", "+\t\t\tif (temp == null) continue next;", "+\t\t\t", "+\t\t\tfor (int k = 0; k < discouragedNamesCount; k++) {", "+\t\t\t\tif (CharOperation.equals(temp, discouragedNames[k], false)) {", "+\t\t\t\t\tcontinue next;", "+\t\t\t\t}", "+\t\t\t", "+\t\t\tpvns[i] = null;", "+\t\t\tpvns[++j] = temp;", "+\t\t\tpvnss[j] = pvnss[i];", "-\t\t", "-\t\tif (pvnsPtr > 0) {", "-\t\t\t// sort by position", "-\t\t\tquickSort(pvnss, pvns, 0, pvnsPtr);", "-\t\t\t", "-\t\t\t// remove double", "-\t\t\tj = 0;", "-\t\t\tfor (int i = 1; i <= pvnsPtr; i++) {", "-\t\t\t\tif (pvnss[i] != pvnss[j]) {", "-\t\t\t\t\tchar[] temp = pvns[i];", "-\t\t\t\t\tpvns[i] = null;", "-\t\t\t\t\tpvns[++j] = temp;", "-\t\t\t\t\tpvnss[j] = pvnss[i];", "-\t\t\t\t} else {", "-\t\t\t\t\tpvns[i] = null;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\tpvnsPtr = j;", "-\t\t}", "-\t}"]}], "num": 63575}
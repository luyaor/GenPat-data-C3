{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f48f28029b74bde352d956f92f030a6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95b3213babeadc8f86915a97eb435b28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/CompilerToolTests.java", "commitBeforeChange": "f6d7e4c8ebdaaf8a904962804a027a09edc0c0d3", "commitAfterChange": "30e98d6cc084dfe1b207ffb7493b2de7b6cec8c4", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void testCompilerOneClassWithEclipseCompiler()", "signatureAfterChange": "  \tpublic void testCompilerOneClassWithEclipseCompiler()", "diff": ["-\t\tStandardJavaFileManager manager = Compiler.getStandardFileManager(null, Locale.getDefault(), Charset.defaultCharset());", "+\t\tStandardJavaFileManager manager = compiler.getStandardFileManager(null, Locale.getDefault(), Charset.defaultCharset());", "+\t\t\t@Override", "+\t\t\tpublic FileObject getFileForInput(Location location, String packageName, String relativeName)", "+\t\t\t\t\tthrows IOException {", "+\t\t\t\tif (DEBUG) {", "+\t\t\t\t\tSystem.out.println(\"Create file for input : \" + packageName + \" \" + relativeName + \" in location \" + location);", "+\t\t\t\t}", "+\t\t\t\treturn super.getFileForInput(location, packageName, relativeName);", "+\t\t\t}", "+\t\t\t@Override", "+\t\t\tpublic JavaFileObject getJavaFileForInput(Location location, String className, Kind kind)", "+\t\t\t\t\tthrows IOException {", "+\t\t\t\tif (DEBUG) {", "+\t\t\t\t\tSystem.out.println(\"Create java file for input : \" + className + \" in location \" + location);", "+\t\t\t\t}", "+\t\t\t\treturn super.getJavaFileForInput(location, className, kind);", "+\t\t\t}", "-\t\t\t\t\tSystem.out.println(\"EC: Create .class file for \" + className + \" in location \" + location + \" with sibling \" + sibling.toUri());", "+\t\t\t\t\tSystem.out.println(\"Create .class file for \" + className + \" in location \" + location + \" with sibling \" + sibling.toUri());", "-\t\t// create new list containing inputfile", "+\t\t// create new list containing input file", "- \t\tCompilationTask task = Compiler.getTask(printWriter, forwardingJavaFileManager, null, options, null, units);", "+ \t\tCompilationTask task = compiler.getTask(printWriter, forwardingJavaFileManager, null, options, null, units);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b883d2dd441a3e7b293e12902e91e4e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/CompilerToolTests.java", "commitBeforeChange": "f6d7e4c8ebdaaf8a904962804a027a09edc0c0d3", "commitAfterChange": "30e98d6cc084dfe1b207ffb7493b2de7b6cec8c4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void _testCompilerOneClassWithSystemCompiler2()", "signatureAfterChange": " \tpublic void testCompilerOneClassWithSystemCompiler2()", "diff": ["-\tpublic void _testCompilerOneClassWithSystemCompiler2() {", "+\tpublic void testCompilerOneClassWithSystemCompiler2() {", "-\t\tStandardJavaFileManager manager = Compiler.getStandardFileManager(null, Locale.getDefault(), Charset.defaultCharset());", "+\t\tStandardJavaFileManager manager = compiler.getStandardFileManager(null, Locale.getDefault(), Charset.defaultCharset());", "-\t\t@SuppressWarnings(\"resource\")", "-\t\tForwardingJavaFileManager<StandardJavaFileManager> forwardingJavaFileManager = new ForwardingJavaFileManager<StandardJavaFileManager>(manager) {", "+\t\tForwardingJavaFileManager<JavaFileManager> forwardingJavaFileManager = new ForwardingJavaFileManager<JavaFileManager>(manager) {", "+\t\t\t@Override", "+\t\t\tpublic String inferBinaryName(Location location, JavaFileObject file) {", "+\t\t\t\tString binaryName = super.inferBinaryName(location, file);", "+\t\t\t\tif (DEBUG) {", "+\t\t\t\t\tSystem.out.println(\"binary name: \" + binaryName);", "+\t\t\t\t}", "+\t\t\t\treturn binaryName;", "+\t\t\t}", "+\t\t\t@Override", "+\t\t\tpublic Iterable<JavaFileObject> list(Location location, String packageName, Set<Kind> kinds, boolean recurse)", "+\t\t\t\t\tthrows IOException {", "+\t\t\t\tIterable<JavaFileObject> list = super.list(location, packageName, kinds, recurse);", "+\t\t\t\tif (DEBUG) {", "+\t\t\t\t\tSystem.out.println(\"start list: \");", "+\t\t\t\t\tfor (JavaFileObject fileObject : list) {", "+\t\t\t\t\t\tSystem.out.println(fileObject.getName());", "+\t\t\t\t\t}", "+\t\t\t\t\tSystem.out.println(\"end   list: \");", "+\t\t\t\t}", "+\t\t\t\treturn list;", "+\t\t\t}", "-\t\t// create new list containing inputfile", "+\t\t// create new list containing input file", "-\t\tCompilationTask task = systemCompiler.getTask(printWriter, manager, null, options, null, units);", "+\t\tCompilationTask task = systemCompiler.getTask(printWriter, forwardingJavaFileManager, null, options, null, units);"]}], "num": 11081}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "082a6e226d38e53210e1e1562c1529e2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b5eef01d3033f91ca2db20050c58bca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void testBug73336() throws CoreException", "signatureAfterChange": " \tpublic void testBug73336() throws CoreException", "diff": ["-\t\tICompilationUnit[] workingCopies = new ICompilationUnit[6];", "-\t\ttry {", "-\t\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "-\t\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/A.java\",", "-\t\t\t\t\"package b73336;\\n\" + ", "-\t\t\t\t\"public class A {}\\n\",", "-\t\t\t\towner", "-\t\t\t\t);", "-\t\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/AA.java\",", "-\t\t\t\t\"package b73336;\\n\" + ", "-\t\t\t\t\"public class AA extends A {}\\n\",", "-\t\t\t\towner,", "-\t\t\t\ttrue);", "-\t\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/B.java\",", "-\t\t\t\t\"package b73336;\\n\" + ", "-\t\t\t\t\"public class B extends X<A, A> {\\n\" + ", "-\t\t\t\t\"\t<T> void foo(T t) {}\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\towner,", "-\t\t\t\ttrue);", "-\t\t\tworkingCopies[3] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/C.java\",", "-\t\t\t\t\"package b73336;\\n\" + ", "-\t\t\t\t\"public class C implements I<A> {\\n\" + ", "-\t\t\t\t\"\tpublic void foo() {\\n\" + ", "-\t\t\t\t\"\t\tB b = new B();\\n\" + ", "-\t\t\t\t\"\t\tb.<A>foo(new A());\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\towner,", "-\t\t\t\ttrue\t);", "-\t\t\tworkingCopies[4] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/I.java\",", "-\t\t\t\t\"package b73336;\\n\" + ", "-\t\t\t\t\"public interface I<T>  {\\n\" + ", "-\t\t\t\t\"\tpublic void foo();\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\towner,", "-\t\t\t\ttrue\t);", "-\t\t\tworkingCopies[5] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/X.java\",", "-\t\t\t\t\"package b73336;\\n\" + ", "-\t\t\t\t\"public class X<T, U> {\\n\" + ", "-\t\t\t\t\"\t<V> void foo(V v) {}\\n\" + ", "-\t\t\t\t\"\tclass Member<T> {\\n\" + ", "-\t\t\t\t\"\t\tvoid foo() {}\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\towner,", "-\t\t\t\ttrue\t);", "-\t\t\t// search for first and second method should both return 2 inaccurate matches", "-\t\t\tIType type = workingCopies[0].getType(\"A\");", "-\t\t\tsearch(type,", "-\t\t\t\tREFERENCES,", "-\t\t\t\tgetJavaSearchScopeBugs(\"b73336\", false),", "-\t\t\t\tthis.resultCollector);", "-\t\t\tassertSearchResults(", "-\t\t\t\t\"src/b73336/AA.java b73336.AA [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336/B.java b73336.B [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336/B.java b73336.B [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336/C.java b73336.C [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336/C.java void b73336.C.foo() [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336/C.java void b73336.C.foo() [A] EXACT_MATCH\"", "-\t\t\t);", "-\t\t}", "-\t\tfinally {", "-\t\t\tdiscardWorkingCopies(workingCopies);", "-\t\t}", "+\t\tworkingCopies = new ICompilationUnit[6];", "+\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "+\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/A.java\",", "+\t\t\t\"package b73336;\\n\" + ", "+\t\t\t\"public class A {}\\n\",", "+\t\t\towner,", "+\t\t\ttrue);", "+\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/AA.java\",", "+\t\t\t\"package b73336;\\n\" + ", "+\t\t\t\"public class AA extends A {}\\n\",", "+\t\t\towner,", "+\t\t\ttrue);", "+\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/B.java\",", "+\t\t\t\"package b73336;\\n\" + ", "+\t\t\t\"public class B extends X<A, A> {\\n\" + ", "+\t\t\t\"\t<T> void foo(T t) {}\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\towner,", "+\t\t\ttrue);", "+\t\tworkingCopies[3] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/C.java\",", "+\t\t\t\"package b73336;\\n\" + ", "+\t\t\t\"public class C implements I<A> {\\n\" + ", "+\t\t\t\"\tpublic void foo() {\\n\" + ", "+\t\t\t\"\t\tB b = new B();\\n\" + ", "+\t\t\t\"\t\tb.<A>foo(new A());\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\towner,", "+\t\t\ttrue\t);", "+\t\tworkingCopies[4] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/I.java\",", "+\t\t\t\"package b73336;\\n\" + ", "+\t\t\t\"public interface I<T>  {\\n\" + ", "+\t\t\t\"\tpublic void foo();\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\towner,", "+\t\t\ttrue\t);", "+\t\tworkingCopies[5] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/X.java\",", "+\t\t\t\"package b73336;\\n\" + ", "+\t\t\t\"public class X<T, U> {\\n\" + ", "+\t\t\t\"\t<V> void foo(V v) {}\\n\" + ", "+\t\t\t\"\tclass Member<T> {\\n\" + ", "+\t\t\t\"\t\tvoid foo() {}\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\towner,", "+\t\t\ttrue\t);", "+\t\t// search for first and second method should both return 2 inaccurate matches", "+\t\tIType type = workingCopies[0].getType(\"A\");", "+\t\tsearch(type, REFERENCES); //, getJavaSearchScopeBugs(\"b73336\", false));", "+\t\tassertSearchResults(", "+\t\t\t\"src/b73336/AA.java b73336.AA [A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b73336/B.java b73336.B [A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b73336/B.java b73336.B [A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b73336/C.java b73336.C [A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b73336/C.java void b73336.C.foo() [A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b73336/C.java void b73336.C.foo() [A] EXACT_MATCH\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4bdb0aaaa2d9695a33be3c45039c09e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0944527a7397db56b1dedbe42ea5aecf6e1f8ca1", "commitAfterChange": "259394e49b8b2716f2b45f583ae806167c65a507", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 93, "signatureBeforeChange": " \tpublic void testBug70827_NotFixed() throws CoreException", "signatureAfterChange": " \tpublic void testBug88300c() throws CoreException", "diff": ["-\t}", "-\tpublic void testBug70827_NotFixed() throws CoreException {", "-\t\tworkingCopies = new ICompilationUnit[3];", "-\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b70827/not/fixed/ConditionalFlowInfo.java\",", "-\t\t\t\"package b70827.not.fixed;\\n\" + ", "-\t\t\t\"public class ConditionalFlowInfo extends FlowInfo {\\n\" + ", "-\t\t\t\"\tpublic FlowInfo info;\\n\" + ", "-\t\t\t\"\tConditionalFlowInfo(FlowInfo info){\\n\" + ", "-\t\t\t\"\t\tthis.info = info;\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"\tpublic void markAsDefinitelyNull(FieldBinding field) {\\n\" + ", "-\t\t\t\"\t\tinfo.markAsDefinitelyNull(field);\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"\tpublic void markAsDefinitelyNull(LocalVariableBinding local) {\\n\" + ", "-\t\t\t\"\t\tinfo.markAsDefinitelyNull(local);\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"}\\n\"", "-\t\t);", "-\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b70827/not/fixed/FlowInfo.java\",", "-\t\t\t\"package b70827.not.fixed;\\n\" + ", "-\t\t\t\"\\n\" + ", "-\t\t\t\"class FieldBinding {\\n\" + ", "-\t\t\t\"\tint id;\\n\" + ", "-\t\t\t\"}\\n\" + ", "-\t\t\t\"class LocalVariableBinding extends FieldBinding {}\\n\" + ", "-\t\t\t\"\\n\" + ", "-\t\t\t\"public abstract class FlowInfo {\\n\" + ", "-\t\t\t\"\tabstract public void markAsDefinitelyNull(LocalVariableBinding local);\\n\" + ", "-\t\t\t\"\tabstract public void markAsDefinitelyNull(FieldBinding field);\\n\" + ", "-\t\t\t\"}\\n\"", "-\t\t\t);", "-\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b70827/not/fixed/UnconditionalFlowInfo.java\",", "-\t\t\t\"package b70827.not.fixed;\\n\" + ", "-\t\t\t\"public class UnconditionalFlowInfo extends FlowInfo {\\n\" + ", "-\t\t\t\"\tfinal private void markAsDefinitelyNull(int position) {}\\n\" + ", "-\t\t\t\"\tpublic void markAsDefinitelyNull(FieldBinding field) {\\n\" + ", "-\t\t\t\"\t\tmarkAsDefinitelyNull(field.id);\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"\tpublic void markAsDefinitelyNull(LocalVariableBinding local) {\\n\" + ", "-\t\t\t\"\t\tmarkAsDefinitelyNull(local.id + 1);\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"}\\n\"", "-\t\t\t);", "-\t\tIType type = workingCopies[2].getType(\"UnconditionalFlowInfo\");", "-\t\tsearch(type.getMethods()[2], REFERENCES);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b70827/not/fixed/ConditionalFlowInfo.java void b70827.not.fixed.ConditionalFlowInfo.markAsDefinitelyNull(LocalVariableBinding) [markAsDefinitelyNull(local)] EXACT_MATCH\"", "+\t}", "+\tpublic void testBug88300c() throws CoreException {", "+\t\tworkingCopies = new ICompilationUnit[3];", "+\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b88300/not/fixed/ConditionalFlowInfo.java\",", "+\t\t\t\"package b88300.not.fixed;\\n\" + ", "+\t\t\t\"public class ConditionalFlowInfo extends FlowInfo {\\n\" + ", "+\t\t\t\"\tpublic FlowInfo info;\\n\" + ", "+\t\t\t\"\tConditionalFlowInfo(FlowInfo info){\\n\" + ", "+\t\t\t\"\t\tthis.info = info;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tpublic void markAsDefinitelyNull(FieldBinding field) {\\n\" + ", "+\t\t\t\"\t\tinfo.markAsDefinitelyNull(field);\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tpublic void markAsDefinitelyNull(LocalVariableBinding local) {\\n\" + ", "+\t\t\t\"\t\tinfo.markAsDefinitelyNull(local);\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\"", "+\t\t);", "+\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b88300/not/fixed/FlowInfo.java\",", "+\t\t\t\"package b88300.not.fixed;\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"class FieldBinding {\\n\" + ", "+\t\t\t\"\tint id;\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class LocalVariableBinding extends FieldBinding {}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"public abstract class FlowInfo {\\n\" + ", "+\t\t\t\"\tabstract public void markAsDefinitelyNull(LocalVariableBinding local);\\n\" + ", "+\t\t\t\"\tabstract public void markAsDefinitelyNull(FieldBinding field);\\n\" + ", "+\t\t\t\"}\\n\"", "+\t\t\t);", "+\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b88300/not/fixed/UnconditionalFlowInfo.java\",", "+\t\t\t\"package b88300.not.fixed;\\n\" + ", "+\t\t\t\"public class UnconditionalFlowInfo extends FlowInfo {\\n\" + ", "+\t\t\t\"\tfinal private void markAsDefinitelyNull(int position) {}\\n\" + ", "+\t\t\t\"\tpublic void markAsDefinitelyNull(FieldBinding field) {\\n\" + ", "+\t\t\t\"\t\tmarkAsDefinitelyNull(field.id);\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tpublic void markAsDefinitelyNull(LocalVariableBinding local) {\\n\" + ", "+\t\t\t\"\t\tmarkAsDefinitelyNull(local.id + 1);\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\"", "+\t\t\t);", "+\t\tIType type = workingCopies[2].getType(\"UnconditionalFlowInfo\");", "+\t\tsearch(type.getMethods()[2], REFERENCES);", "+\t\tassertSearchResults(", "+\t\t\t\"src/b88300/not/fixed/ConditionalFlowInfo.java void b88300.not.fixed.ConditionalFlowInfo.markAsDefinitelyNull(LocalVariableBinding) [markAsDefinitelyNull(local)] EXACT_MATCH\"", "+\t\t);", "+\t}"]}], "num": 30461}
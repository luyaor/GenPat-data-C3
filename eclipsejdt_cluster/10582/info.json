{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7cf8e365bb1b055ea77175e1e8e54516", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c14b4ba0a07ed17b1a254efe25ef987", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ImportRewrite.java", "commitBeforeChange": "6d5d9e32b8895e146fe7b876c8e27635ad72d617", "commitAfterChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " final int findInImports(String qualifier, String name, int kind)", "signatureAfterChange": " final int findInImports(String qualifier, String name, int kind)", "diff": ["-\t\t\t\t\treturn res;", "+\t\t\t\t\tif (prefix != STATIC_PREFIX) {", "+\t\t\t\t\t\treturn res;", "+\t\t\t\t\t}", "+\t\t\t\t\tObject currKind = this.importsKindMap.get(curr.substring(1));", "+\t\t\t\t\tif (currKind != null && currKind.equals(this.importsKindMap.get(qualifier + '.' + name))) {", "+\t\t\t\t\t\treturn res;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86a3df20e5d0d1aefe84557bd896d69c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "8f40b18693d984d1b3346925dd24dfb773855585", "commitAfterChange": "98a24097737828240f1d21a0b23b90c66df1d2e5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprotected IType getHandle(IGenericType genericType)", "signatureAfterChange": " \tprotected IType getHandle(IGenericType genericType)", "diff": ["-\t\tif (genericType.isBinaryType()) {", "+\t\tif (genericType instanceof HierarchyType) {", "+\t\t\tIType handle = (IType)this.infoToHandle.get(genericType);", "+\t\t\tif (handle == null) {", "+\t\t\t\thandle = ((HierarchyType)genericType).typeHandle;", "+\t\t\t\tthis.infoToHandle.put(genericType, handle);", "+\t\t\t}", "+\t\t\treturn handle;", "+\t\t} else if (genericType.isBinaryType()) {"]}], "num": 10582}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6fdec48457b6fc0c442408cb5a8aa2ae", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "369bc77f63cf5eac8ffdec5db4deaf66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "07f2a3d76611d11852367ea136a6272990449122", "commitAfterChange": "b51487a3e769c1faf54930e906289a243b81936a", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  public void reconcile(boolean forceProblemDetection, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "  public void reconcile(boolean forceProblemDetection, IProgressMonitor monitor) throws JavaModelException", "diff": ["-", "-\tif (this.useCount == 0) throw newNotPresentException(); //was destroyed", "-\t", "-\tif (monitor != null){", "-\t\tif (monitor.isCanceled()) return;", "-\t\tmonitor.beginTask(Util.bind(\"element.reconciling\"), 10); //$NON-NLS-1$", "-\t}", "-", "-\tboolean wasConsistent = isConsistent();", "-\tJavaElementDeltaBuilder deltaBuilder = null;", "-", "-\ttry {", "-\t\t// create the delta builder (this remembers the current content of the cu)", "-\t\tif (!wasConsistent){", "-\t\t\tdeltaBuilder = new JavaElementDeltaBuilder(this);", "-\t\t\t", "-\t\t\t// update the element infos with the content of the working copy", "-\t\t\tthis.makeConsistent(monitor);", "-\t\t\tdeltaBuilder.buildDeltas();", "-\t", "-\t\t}", "-", "-\t\tif (monitor != null) monitor.worked(2);", "-\t\t", "-\t\t// force problem detection? - if structure was consistent", "-\t\tif (forceProblemDetection && wasConsistent){", "-\t\t\tif (monitor != null && monitor.isCanceled()) return;", "-\t", "-\t\t\tIProblemRequestor problemRequestor = this.getProblemRequestor();", "-\t\t\tif (problemRequestor != null && problemRequestor.isActive()){", "-\t\t\t\tproblemRequestor.beginReporting();", "-\t\t\t\tCompilationUnitProblemFinder.process(this, problemRequestor, monitor);", "-\t\t\t\tproblemRequestor.endReporting();", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\t// fire the deltas", "-\t\tif (deltaBuilder != null){", "-\t\t\tif ((deltaBuilder.delta != null) && (deltaBuilder.delta.getAffectedChildren().length > 0)) {", "-\t\t\t\tJavaModelManager.getJavaModelManager().", "-\t\t\t\t\tfire(deltaBuilder.delta, ElementChangedEvent.POST_RECONCILE);", "-\t\t\t}", "-\t\t}", "-\t} finally {", "-\t\tif (monitor != null) monitor.done();", "-\t}", "+\tReconcileWorkingCopyOperation op = new ReconcileWorkingCopyOperation(this, forceProblemDetection);", "+\trunOperation(op, monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cad13d70583a83f711390a84eb38f32c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "6a9c839afeea06e7dd97b023fa9c24def00f0f08", "commitAfterChange": "cf7db1b07f7da2723bd250cc64a7e16bec1c504d", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 20, "signatureBeforeChange": " protected void storeProblemsFor(SourceFile sourceFile, CategorizedProblem[] problems) throws CoreException", "signatureAfterChange": " protected void storeProblemsFor(SourceFile sourceFile, CategorizedProblem[] problems) throws CoreException", "diff": ["+\t // once a classpath error is found, ignore all other problems for this project so the user can see the main error", "+\t// but still try to compile as many source files as possible to help the case when the base libraries are in source", "+\tif (!this.keepStoringProblemMarkers) return; // only want the one error recorded on this source file", "-\tString missingClassFile = null;", "+", "+\t\t// handle missing classfile situation", "-\t\t\tJavaBuilder.removeProblemsAndTasksFor(javaBuilder.currentProject); // make this the only problem for this project", "-\t\t\tString[] args = problem.getArguments();", "-\t\t\tmissingClassFile = args[0];", "+\t\t\tString missingClassfileName = problem.getArguments()[0];", "+\t\t\tif (JavaBuilder.DEBUG)", "+\t\t\t\tSystem.out.println(Messages.bind(Messages.build_incompleteClassPath, missingClassfileName));", "+\t\t\tboolean isInvalidClasspathError = JavaCore.ERROR.equals(javaBuilder.javaProject.getOption(JavaCore.CORE_INCOMPLETE_CLASSPATH, true));", "+\t\t\t// insert extra classpath problem, and make it the only problem for this project (optional)", "+\t\t\tif (isInvalidClasspathError && JavaCore.ABORT.equals(javaBuilder.javaProject.getOption(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH, true))) {", "+\t\t\t\tJavaBuilder.removeProblemsAndTasksFor(javaBuilder.currentProject); // make this the only problem for this project", "+\t\t\t\tthis.keepStoringProblemMarkers = false;", "+\t\t\t}", "+\t\t\tIMarker marker = this.javaBuilder.currentProject.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);", "+\t\t\tmarker.setAttribute(IMarker.MESSAGE, Messages.bind(Messages.build_incompleteClassPath, missingClassfileName)); ", "+\t\t\tmarker.setAttribute(IMarker.SEVERITY, isInvalidClasspathError ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING);", "+\t\t\tmarker.setAttribute(IJavaModelMarker.CATEGORY_ID, CategorizedProblem.CAT_BUILDPATH);", "+\t\t\tmarker.setAttribute(IMarker.GENERATED_BY, JavaBuilder.GENERATED_BY);", "+\t\t\t// even if we're not keeping more markers, still fall through rest of the problem reporting, so that offending", "+\t\t\t// IsClassPathCorrect problem gets recorded since it may help locate the offending reference", "-\t\t", "+", "-\t\t\t\t|| (managedProblem = managedMarkerTypes.contains(markerType))) {\t\t\t", "+\t\t\t\t|| (managedProblem = managedMarkerTypes.contains(markerType))) {", "-\t\t\t", "+", "+", "+\t\t\tif (!this.keepStoringProblemMarkers) return; // only want the one error recorded on this source file", "-\t\tif (missingClassFile != null)", "-\t\t\tthrow new MissingClassFileException(missingClassFile);"]}], "num": 65547}
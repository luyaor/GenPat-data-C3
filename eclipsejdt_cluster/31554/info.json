{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a00008b6b5904aed3694c0ff119aa0ed", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02651b36d419f532ff1c9848487827d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "5bb2bc7f924033ac90ef06377adaf6e8028c136c", "commitAfterChange": "ef1e5cb9e8f1ed367497f33911cb9848dee28aa7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "diff": ["-\t\t\tint endTextPosition = this.index;", "-\t\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidTag(this.inlineTagStart, endTextPosition);", "+\t\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocUnexpectedTag(this.inlineTagStart, this.inlineTagStart);", "-\t\t\t\t\t\t\t\t\tif (this.textStart != -1 && this.textStart < endTextPosition) {", "-\t\t\t\t\t\t\t\t\t\tpushText(this.textStart, endTextPosition);", "+\t\t\t\t\t\t\t\t\tif (this.textStart != -1 && this.textStart < this.inlineTagStart) {", "+\t\t\t\t\t\t\t\t\t\tpushText(this.textStart, this.inlineTagStart);", "-\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_SEE) ||", "-\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(tag, TAG_LINK)) {", "+\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_SEE)) {", "+\t\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_LINK)) {", "+\t\t\t\t\t\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee(false);", "+\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee(true);", "+\t\t\t\t\t\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee(true);", "+\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tendTextPosition = previousPosition;", "-\t\t\t\t\t\tendTextPosition = previousPosition;", "-\t\t\t\t\t\tendTextPosition = previousPosition;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d36eb7e12bff332f0920d17b6d30c68d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "cee242bcb21b999953c5459d6b40de2d782355f3", "commitAfterChange": "de0ba5a5e09b42f4671d55cb69260aca34e3da86", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "diff": ["-\t\t\tthis.lineEnd = (this.linePtr == this.lastLinePtr) ? this.endComment : getLineEnd(this.linePtr);", "+\t\t\tthis.lineEnd = (this.linePtr == this.lastLinePtr) ? this.endComment : this.scanner.getLineEnd(this.linePtr);", "-\t\t\t\t\t\t\t\t\t\t\tcase '-':", "+\t\t\t\t\t\t\t\t\t\t\t// case '-': allowed in tag names as this character is often used in doclets (bug 68087)", "+\t\t\t\t\t\t\t\t\t\t// verify characters after return tag (we're expecting text description)", "+\t\t\t\t\t\t\t\t\t\tif(!verifyCharsAfterReturnTag(this.index)) {", "+\t\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null) {", "+\t\t\t\t\t\t\t\t\t\t\t\tint end = this.starPosition == -1 || this.lineEnd<this.starPosition ? this.lineEnd : this.starPosition;", "+\t\t\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocEmptyReturnTag(this.tagSourceStart, end);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t// do nothing for '*' character", "+\t\t\t\t\tcase '\\u000c' :\t/* FORM FEED               */", "+\t\t\t\t\tcase ' ' :\t\t\t/* SPACE                   */", "+\t\t\t\t\tcase '\\t' :\t\t\t/* HORIZONTAL TABULATION   */", "+\t\t\t\t\t\t// do nothing for space or '*' characters", "-\t\t\t\t\t\tif (!CharOperation.isWhitespace(nextCharacter)) {", "-\t\t\t\t\t\t\tif (!this.lineStarted) {", "-\t\t\t\t\t\t\t\tthis.textStart = previousPosition;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthis.lineStarted = true;", "+\t\t\t\t\t\tif (!this.lineStarted) {", "+\t\t\t\t\t\t\tthis.textStart = previousPosition;", "+\t\t\t\t\t\tthis.lineStarted = true;", "+\t\t\t\t\t\tbreak;"]}], "num": 31554}
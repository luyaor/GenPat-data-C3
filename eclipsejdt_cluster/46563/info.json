{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f28b49b0b755ae3beda59c02c248b3cb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "316dd726ee966722be8e59b0cf11c412", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "dec2dac6f78a5ffa915ffd3b73cb386c60b72cae", "commitAfterChange": "eead3352ceb339c6e7d1c285e537cdff0d79d4a6", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprotected void updateOutputLocation() throws JavaModelException", "signatureAfterChange": " \tprotected void updateOutputLocation() throws JavaModelException", "diff": ["-\t\t\tdelta.added(frag);", "-\t\t\tdeltaToFire = true;", "+\t\t\tif (!Util.isExcluded(frag)) {", "+\t\t\t\tdelta.added(frag);", "+\t\t\t\tdeltaToFire = true;", "+\t\t\t}", "-\t\t\tdelta.removed(frag);", "-\t\t\tdeltaToFire = true;", "+\t\t\tif (!Util.isExcluded(frag)) {", "+\t\t\t\tdelta.removed(frag);", "+\t\t\t\tdeltaToFire = true;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bc40fb822ceae66ae27cf154178d3dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ExternalAnnotationProvider.java", "commitBeforeChange": "d08e87c35b21123010227cf2729df51d820e4d50", "commitAfterChange": "48a2d2499344bebca223a2f8c964ed5900cd0012", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic ExternalAnnotationProvider(File annotationSource) throws IOException", "signatureAfterChange": " \t \tpublic ExternalAnnotationProvider(File annotationSource) throws IOException", "diff": ["+\t\tif (!annotationSource.exists()) throw new FileNotFoundException(annotationSource.getAbsolutePath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d0427ca82f4db40f88813b5adcdab5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "3eb54501d04c06d548e0703970c7c1e0fb48a24c", "commitAfterChange": "c56ed3bd74492c5179e95d29b48fda6c6cba2ca8", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tprivate int generateRuntimeAnnotations(final Annotation[] annotations, final long targetMask)", "signatureAfterChange": " \tprivate int generateRuntimeAnnotations(final Annotation[] annotations, final long targetMask)", "diff": ["-\t\t\tif (annotationMask != 0 && (annotationMask & targetMask) == 0) continue;", "+\t\t\tif (annotationMask != 0 && (annotationMask & targetMask) == 0) {", "+\t\t\t\tif (!jdk16packageInfoAnnotation(annotationMask, targetMask)) continue;", "+\t\t\t}", "-\t\t\t\tif (annotationMask != 0 && (annotationMask & targetMask) == 0) continue;", "+\t\t\t\tif (annotationMask != 0 && (annotationMask & targetMask) == 0) {", "+\t\t\t\t\tif (!jdk16packageInfoAnnotation(annotationMask, targetMask)) continue;", "+\t\t\t\t}", "-\t\t\t\tif (annotationMask != 0 && (annotationMask & targetMask) == 0) continue;", "+\t\t\t\tif (annotationMask != 0 && (annotationMask & targetMask) == 0) {", "+\t\t\t\t\tif (!jdk16packageInfoAnnotation(annotationMask, targetMask)) continue;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "485d30c73c7055266645d587dc0dd15d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "ae980cab0e47f9f9109f15f27f7ea765847cf9bc", "commitAfterChange": "4d657d16dcce8d103534cfb60b4be82696664aa1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public IClassFile getClassFile(String name)", "signatureAfterChange": " public IClassFile getClassFile(String name)", "diff": ["+\tif (!Util.isClassFileName(name)) {", "+\t\tthrow new IllegalArgumentException(Util.bind(\"element.invalidClassFileName\")); //$NON-NLS-1$", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54847f19c8f14165de89f4b721aa34e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "66645ff7b2e7900a6e51de489fc3a747bdbf1458", "commitAfterChange": "a24bdada3de440570b8b103bca0325b799f298f1", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 76, "signatureBeforeChange": " \t \tprivate void runTest( \t\t\tboolean shouldFlushOutputDirectory,  \t\t\tString[] testFiles, \t\t\tString[] classLibraries, \t\t\tMap customOptions, \t\t\tboolean performStatementsRecovery, \t\t\tICompilerRequestor customRequestor, \t\t\tboolean expectingCompilerErrors, \t\t\tString expectedCompilerLog, \t\t\tboolean forceExecution, \t\t\tString[] vmArguments, \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tJavacTestOptions javacTestOptions)", "signatureAfterChange": " \tprivate void runTest( \t\t\tboolean shouldFlushOutputDirectory,  \t\t\tString[] testFiles, \t\t\tString[] classLibraries, \t\t\tMap customOptions, \t\t\tboolean performStatementsRecovery, \t\t\tICompilerRequestor customRequestor, \t\t\tboolean expectingCompilerErrors, \t\t\tString expectedCompilerLog, \t\t\tboolean forceExecution, \t\t\tString[] vmArguments, \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tJavacTestOptions javacTestOptions)", "diff": ["-\t", "+// WORK log test files in all failure cases (ez cut and paste)\t", "-\t\t\t\t\tassertTrue(\"Unexpected success\", requestor.hasErrors);", "+\t\t\t\t\tif (!requestor.hasErrors) {", "+\t\t\t\t\t\tlogTestFiles(true, testFiles);", "+\t\t\t\t\t\tfail(\"Unexpected success\");", "+\t\t\t\t\t}", "-\t\t\t\t\tassertEquals(\"Unexpected failure\", \"\", requestor.problemLog);", "+\t\t\t\t\tif (!\"\".equals(requestor.problemLog)) {", "+\t\t\t\t\t\tlogTestFiles(true, testFiles);", "+\t\t\t\t\t\tassertEquals(\"Unexpected failure\", \"\", requestor.problemLog);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58e7de807f4b25eed9c7b77ee0ad5757", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "d3432881419f057ba041557b162e4f05f5019457", "commitAfterChange": "c978cd9a4b8a047123bdee75ac1f721797bdf05a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void setUp() throws Exception", "signatureAfterChange": " public void setUp() throws Exception", "diff": ["-\tthis.preferences.join_lines_in_comments = JOIN_LINES;", "-\tthis.preferences.join_wrapped_lines = JOIN_LINES;", "+\tif (JOIN_LINES != null) {", "+\t\tif (!JOIN_LINES.equals(\"only_comments\")) {", "+\t\t\tthis.preferences.join_lines_in_comments = false;", "+\t\t}", "+\t\tif (!JOIN_LINES.equals(\"only_code\")) {", "+\t\t\tthis.preferences.join_wrapped_lines = false;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "682ed777cba0da3473e115bc88eae4e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "888ff915accf0f7dc08ba845bca467c94f1e290b", "commitAfterChange": "f69c200469412ca3b93e80844c6c1f4e077169ac", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected boolean generateInfos(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["+ */", "+protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException {", "+", "+\t// check whether this pkg can be opened", "+\tif (!underlyingResource.isAccessible()) throw newNotPresentException();", "+", "+\tint kind = getKind();", "+\tString extType;", "+\tif (kind == IPackageFragmentRoot.K_SOURCE) {", "+\t\textType = EXTENSION_java;", "+\t} else {", "+\t\textType = EXTENSION_class;", "+\t}", "+", "+\tArrayList vChildren = new ArrayList();", "+\ttry {", "+\t\tchar[][] exclusionPatterns = ((PackageFragmentRoot)getPackageFragmentRoot()).fullExclusionPatternChars();", "+\t\tIResource[] members = ((IContainer) underlyingResource).members();", "+\t\tfor (int i = 0, max = members.length; i < max; i++) {", "+\t\t\tIResource child = members[i];", "+\t\t\tif (child.getType() != IResource.FOLDER", "+\t\t\t\t\t&& !Util.isExcluded(child, exclusionPatterns)) {", "+\t\t\t\tString extension = child.getProjectRelativePath().getFileExtension();", "+\t\t\t\tif (extension != null) {", "+\t\t\t\t\tif (extension.equalsIgnoreCase(extType)) {", "+\t\t\t\t\t\tIJavaElement childElement;", "+\t\t\t\t\t\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isValidCompilationUnitName(child.getName())) {", "+\t\t\t\t\t\t\tchildElement = new CompilationUnit(this, child.getName(), DefaultCompilationUnitOwner.PRIMARY);", "+\t\t\t\t\t\t\tvChildren.add(childElement);", "+\t\t\t\t\t\t} else if (Util.isValidClassFileName(child.getName())) {", "+\t\t\t\t\t\t\tchildElement = getClassFile(child.getName());", "+\t\t\t\t\t\t\tvChildren.add(childElement);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t} catch (CoreException e) {", "+\t\tthrow new JavaModelException(e);", "+\t}", "+\tIJavaElement[] children = new IJavaElement[vChildren.size()];", "+\tvChildren.toArray(children);", "+\tinfo.setChildren(children);", "+\treturn true;", "- */", "-protected boolean generateInfos(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException {", "-", "-\tint kind = getKind();", "-\tString extType;", "-\tif (kind == IPackageFragmentRoot.K_SOURCE) {", "-\t\textType = EXTENSION_java;", "-\t} else {", "-\t\textType = EXTENSION_class;", "-\t}", "-", "-\tArrayList vChildren = new ArrayList();", "-\ttry {", "-\t\tchar[][] exclusionPatterns = ((PackageFragmentRoot)getPackageFragmentRoot()).fullExclusionPatternChars();", "-\t\tIResource[] members = ((IContainer) underlyingResource).members();", "-\t\tfor (int i = 0, max = members.length; i < max; i++) {", "-\t\t\tIResource child = members[i];", "-\t\t\tif (child.getType() != IResource.FOLDER", "-\t\t\t\t\t&& !Util.isExcluded(child, exclusionPatterns)) {", "-\t\t\t\tString extension = child.getProjectRelativePath().getFileExtension();", "-\t\t\t\tif (extension != null) {", "-\t\t\t\t\tif (extension.equalsIgnoreCase(extType)) {", "-\t\t\t\t\t\tIJavaElement childElement;", "-\t\t\t\t\t\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isValidCompilationUnitName(child.getName())) {", "-\t\t\t\t\t\t\tchildElement = getCompilationUnit(child.getName());", "-\t\t\t\t\t\t\tvChildren.add(childElement);", "-\t\t\t\t\t\t} else if (Util.isValidClassFileName(child.getName())) {", "-\t\t\t\t\t\t\tchildElement = getClassFile(child.getName());", "-\t\t\t\t\t\t\tvChildren.add(childElement);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t} catch (CoreException e) {", "-\t\tthrow new JavaModelException(e);", "-\t}", "-\tIJavaElement[] children = new IJavaElement[vChildren.size()];", "-\tvChildren.toArray(children);", "-\tinfo.setChildren(children);", "-\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69b052391281a6897af73ffbf0a79e05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "e37ddd2cb60251da977bfe008d0c558febeb1616", "commitAfterChange": "ddff16f6a6b8fee88d497b4653d14d58ccda81b4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tstatic int minorFromRawVersion (String version, String rawVersion)", "signatureAfterChange": " \tstatic int minorFromRawVersion (String version, String rawVersion)", "diff": ["+\t\t\t\treturn 0000;", "+\t\t\t}", "+\t\t\tif (\"1.7.0_10\".equals(rawVersion)) {", "+\t\t\t\treturn 1000;", "+\t\t\t}", "+\t\t}", "+\t\tif (version == JavaCore.VERSION_1_8) {", "+\t\t\tif (\"1.8.0-ea\".equals(rawVersion)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72e9e3ea18c2976e7295a986b8fa35fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "3e104a2ad2daae13b366a9a1eee4b2527591ce40", "commitAfterChange": "80124b8e78c2f4cdfd849f3bbbfe3f59078f0726", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " private void fixSupertypeBindings()", "signatureAfterChange": " private void fixSupertypeBindings()", "diff": ["-\t\t\t\tif (superclass != null) ", "-\t\t\t\t\t((SourceTypeBinding) typeBinding).superclass = (ReferenceBinding) superclass;", "+\t\t\t\tif (superclass != null) {", "+\t\t\t\t\t// ensure we are not creating a cycle (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=215681 )", "+\t\t\t\t\tif (!(subTypeOfType((ReferenceBinding) superclass, typeBinding))) {", "+\t\t\t\t\t\t((SourceTypeBinding) typeBinding).superclass = (ReferenceBinding) superclass;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\t\t\tif (superInterface != null)", "-\t\t\t\t\t\t\tinterfaceBindings[index++] = superInterface;", "+\t\t\t\t\t\tif (superInterface != null) {", "+\t\t\t\t\t\t\t// ensure we are not creating a cycle (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=215681 )", "+\t\t\t\t\t\t\tif (!(subTypeOfType(superInterface, typeBinding))) {", "+\t\t\t\t\t\t\t\tinterfaceBindings[index++] = superInterface;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fd92634f2773b013ed16837c7021cd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "6f6bc9d0562d23a055ee9e986cf21155795a29ff", "commitAfterChange": "7f289b483e1414e7141e9f94307fbe445e3b1b34", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \t \tpublic CompilationUnit getAstCompilationUnit(final IFile file)", "signatureAfterChange": " \tpublic CompilationUnit getAstCompilationUnit(final IFile file)", "diff": ["+     */", "-\t\tfor( int i=0, len=_files.length; i<len; i++ ){", "-\t\t\tif( _files[i] == file )", "-\t\t\t\treturn _astUnits[i];", "-\t\t}", "-\t\treturn null;", "+\t\tif( file == null ) ", "+    \t\treturn null;", "+    \telse if( file.equals(_file) )", "+    \t\treturn _astRoot;", "+    \telse if( _batchMode ){", "+    \t\tfor( int i=0, len=_files.length; i<len; i++ ){", "+        \t\tif( file.equals(_files[i]) )", "+        \t\t\treturn _astUnits[i];", "+        \t}", "+    \t}", "+    \treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "943882e47cc0ec21e36824478521dac2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "c374466b639cefc117e60812e1d9f16701d104ca", "commitAfterChange": "788c169eda00b669155eb0f9164eec17e1ef661d", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \t \tprivate void findExceptionFromTryStatement( \t\t\tchar[] typeName, \t\t\tReferenceBinding exceptionType, \t\t\tReferenceBinding receiverType, \t\t\tSourceTypeBinding invocationType,  \t\t\tBlockScope scope,  \t\t\tObjectVector typesFound, \t\t\tboolean searchSuperClasses)", "signatureAfterChange": " \t \tprivate void findExceptionFromTryStatement( \t\t\tchar[] typeName, \t\t\tReferenceBinding exceptionType, \t\t\tReferenceBinding receiverType, \t\t\tSourceTypeBinding invocationType,  \t\t\tBlockScope scope,  \t\t\tObjectVector typesFound, \t\t\tboolean searchSuperClasses)", "diff": ["-\t\t\tif (invocationType != null && !exceptionType.canBeSeenBy(receiverType, invocationType)) {", "-\t\t\t\treturn;", "-\t\t\t} else if(invocationType == null && !exceptionType.canBeSeenBy(this.unitScope.fPackage)) {", "+\t\t\tif (invocationType != null) {", "+\t\t\t\tif (receiverType != null) {", "+\t\t\t\t\tif (!exceptionType.canBeSeenBy(receiverType, invocationType)) return;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (!exceptionType.canBeSeenBy(exceptionType, invocationType)) return;", "+\t\t\t\t}", "+\t\t\t} else if(!exceptionType.canBeSeenBy(this.unitScope.fPackage)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a823942702b95642c2a7df3a182d195b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "d3432881419f057ba041557b162e4f05f5019457", "commitAfterChange": "c978cd9a4b8a047123bdee75ac1f721797bdf05a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  private static void initProfiles()", "signatureAfterChange": "  private static void initProfiles()", "diff": ["+\tif (JOIN_LINES != null) {", "+\t \tif (!JOIN_LINES.equals(\"never\") &&", "+\t \t\t!JOIN_LINES.equals(\"only_comments\") &&", "+\t \t\t!JOIN_LINES.equals(\"only_code\")) {", "+\t \t\tJOIN_LINES = null;", "+\t \t}", "+\t}"]}], "num": 46563}
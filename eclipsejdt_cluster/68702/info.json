{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dcdd9544d064c870b3425e6eb5cd81f1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a1a0664be72b02213f4bf78e894505b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (!foundValue &&", "-\t\t\t\t\t(method.modifiers & ClassFileConstants.AccAnnotationDefault) == 0 &&", "-\t\t\t\t\t(this.bits & IsRecovered) == 0) {", "+\t\t\tif (!foundValue", "+\t\t\t\t\t&& (method.modifiers & ClassFileConstants.AccAnnotationDefault) == 0", "+\t\t\t\t\t&& (this.bits & IsRecovered) == 0", "+\t\t\t\t\t&& annotationType.isValidBinding()) {", "-\t\t\t\tscope.problemReporter().undefinedAnnotationValue(annotationType, pairs[i]);", "+\t\t\t\tif (annotationType.isValidBinding()) {", "+\t\t\t\t\tscope.problemReporter().undefinedAnnotationValue(annotationType, pairs[i]);", "+\t\t\t\t}", "-\t\t\t\tlong metaTagBits = annotationType.getAnnotationTagBits(); // could be forward reference", "-\t\t\t\tif ((metaTagBits & TagBits.AnnotationTargetMASK) == 0) // does not specify any target restriction", "+\t\t\t\tif (!annotationType.isValidBinding()) {", "+\t\t\t\t\t// no need to check annotation usage if missing", "+\t\t\t\t}", "+", "+\t\t\t\tlong metaTagBits = annotationType.getAnnotationTagBits(); // could be forward reference", "+\t\t\t\tif ((metaTagBits & TagBits.AnnotationTargetMASK) == 0) {", "+\t\t\t\t\t// does not specify any target restriction - all locations are possible including type annotations", "+\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t}", "+\t\t\t\t\tcase Binding.TYPE_USE :", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t\t\t// jsr 308", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForAnnotationType|TagBits.AnnotationForType)) != 0)", "+\t\t\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForAnnotationType | TagBits.AnnotationForType)) != 0)", "-\t\t\t\t\t\tif (((MethodBinding)this.recipient).isConstructor()) {", "+\t\t\t\t\t\tMethodBinding methodBinding = (MethodBinding) this.recipient;", "+\t\t\t\t\t\tif (methodBinding.isConstructor()) {", "-\t\t\t\t\t\t} else \tif ((metaTagBits & TagBits.AnnotationForMethod) != 0)", "+\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForMethod) != 0) {", "+\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t\t\t// jsr 308 - annotation on method return type", "+\t\t\t\t\t\t\tif (methodBinding.returnType != null && methodBinding.returnType.id == T_void) {", "+\t\t\t\t\t\t\t\tscope.problemReporter().illegalUsageOfTypeAnnotations(this);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForField) != 0)", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForField) != 0) {", "+\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t\t\t// jsr 308 - annotation on field type", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForParameter) != 0)", "+\t\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForParameter) != 0) {", "-\t\t\t\t\t\t} else \tif ((annotationType.tagBits & TagBits.AnnotationForLocalVariable) != 0)", "+\t\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t\t\t\t// jsr 308 - annotation on method parameter type", "+\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if ((annotationType.tagBits & TagBits.AnnotationForLocalVariable) != 0) {", "+\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t\t\t// jsr 308 - annotation on local type", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\t\tcase Binding.TYPE_PARAMETER : // jsr308", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForTypeParameter) != 0) {", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76203819a5c846d49ff677b680a3356a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "3aeda49982d529a7b3b4520a8ddfc77c62e6f6ba", "commitAfterChange": "756bb6bed26516f6a7f37d505e2052383d6cc457", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tMemberValuePair valueAttribute = null; // remember the first 'value' pair", "+\t\t\t\t\tif (valueAttribute == null && CharOperation.equals(memberName, TypeConstants.VALUE)) {", "+\t\t\t\t\t\tvalueAttribute = valuePair;", "+\t\t\t\t\t}", "+\t\t// recognize standard annotations ?", "+\t\tlong tagBits = detectStandardAnnotation(scope, annotationType, valueAttribute);", "+\t\tif (this.recipient != null) {", "+\t\t\tif (tagBits != 0) {", "+\t\t\t\t// tag bits onto recipient", "+\t\t\t\tswitch (this.recipient.kind()) {", "+\t\t\t\t\tcase Binding.PACKAGE :", "+\t\t\t\t\t\t// TODO (philippe) need support for package annotations", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.TYPE :", "+\t\t\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\t\t((ReferenceBinding)this.recipient).tagBits |= tagBits;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.METHOD :", "+\t\t\t\t\t\t((MethodBinding)this.recipient).tagBits |= tagBits;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.FIELD :", "+\t\t\t\t\t\t((FieldBinding)this.recipient).tagBits |= tagBits;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.LOCAL :", "+\t\t\t\t\t\t((LocalVariableBinding)this.recipient).tagBits |= tagBits;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}\t\t\t", "+\t\t\t}", "+\t\t\t// check (meta)target compatibility", "+\t\t\tcheckTargetCompatibility: {", "+\t\t\t\tlong metaTagBits = annotationType.tagBits;", "+\t\t\t\tif ((metaTagBits & TagBits.AnnotationTargetMASK) == 0) // does not specify any target restriction", "+\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t", "+\t\t\t\tswitch (recipient.kind()) {", "+\t\t\t\t\tcase Binding.PACKAGE :", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForPackage) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.TYPE :", "+\t\t\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\t\t\tif (((ReferenceBinding)this.recipient).isAnnotationType()) {", "+\t\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForAnnotationType) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t} else \tif ((metaTagBits & TagBits.AnnotationForType) != 0) ", "+\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForParameter) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.METHOD :", "+\t\t\t\t\t\tif (((MethodBinding)this.recipient).isConstructor()) {", "+\t\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForConstructor) != 0)", "+\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t} else \tif ((metaTagBits & TagBits.AnnotationForMethod) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.FIELD :", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForField) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.LOCAL :", "+\t\t\t\t\t\tif ((annotationType.tagBits & TagBits.AnnotationForLocalVariable) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}\t\t\t", "+\t\t\t\tscope.problemReporter().incompatibleTargetForAnnotation(this);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4792328c7a406375ea0e381ad9abd14", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "7163191ad837ee4dbd99301bb257966d1ab9ea7a", "commitAfterChange": "efcbc8246985c2d4ce62d9f4d57040e9d6aab069", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  \tstatic boolean isAnnotationTargetAllowed(Annotation annotation, BlockScope scope, TypeBinding annotationType, int kind)", "signatureAfterChange": "  \tprivate static boolean isAnnotationTargetAllowed(Binding recipient, BlockScope scope, TypeBinding annotationType, int kind, long metaTagBits)", "diff": ["+\tprivate static boolean isAnnotationTargetAllowed(Binding recipient, BlockScope scope, TypeBinding annotationType, int kind, long metaTagBits) {", "+\t\tswitch (kind) {", "+\t\t\tcase Binding.PACKAGE :", "+\t\t\t\tif ((metaTagBits & TagBits.AnnotationForPackage) != 0)", "+\t\t\t\t\treturn true;", "+\t\t\t\telse if (scope.compilerOptions().sourceLevel <= ClassFileConstants.JDK1_6) {", "+\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) recipient;", "+\t\t\t\t\tif (CharOperation.equals(sourceType.sourceName, TypeConstants.PACKAGE_INFO_NAME))", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.TYPE_USE :", "+\t\t\t\tif ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t// jsr 308", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tif (scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8) {", "+\t\t\t\t\t// already reported as syntax error; don't report secondary problems", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.TYPE :", "+\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\tif (((ReferenceBinding)recipient).isAnnotationType()) {", "+\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForAnnotationType | TagBits.AnnotationForType | TagBits.AnnotationForTypeUse)) != 0)", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else if ((metaTagBits & (TagBits.AnnotationForType | TagBits.AnnotationForTypeUse)) != 0) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForPackage) != 0) {", "+\t\t\t\t\tif (CharOperation.equals(((ReferenceBinding) recipient).sourceName, TypeConstants.PACKAGE_INFO_NAME))", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.METHOD :", "+\t\t\t\tMethodBinding methodBinding = (MethodBinding) recipient;", "+\t\t\t\tif (methodBinding.isConstructor()) {", "+\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForConstructor | TagBits.AnnotationForTypeUse)) != 0)", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForMethod) != 0) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) methodBinding.declaringClass;", "+\t\t\t\t\tMethodDeclaration methodDecl = (MethodDeclaration) sourceType.scope.referenceContext.declarationOf(methodBinding);", "+\t\t\t\t\tif (isTypeUseCompatible(methodDecl.returnType, scope)) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.FIELD :", "+\t\t\t\tif ((metaTagBits & TagBits.AnnotationForField) != 0) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\tFieldBinding sourceField = (FieldBinding) recipient;", "+\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) sourceField.declaringClass;", "+\t\t\t\t\tFieldDeclaration fieldDeclaration = sourceType.scope.referenceContext.declarationOf(sourceField);", "+\t\t\t\t\tif (isTypeUseCompatible(fieldDeclaration.type, scope)) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.LOCAL :", "+\t\t\t\tLocalVariableBinding localVariableBinding = (LocalVariableBinding) recipient;", "+\t\t\t\tif ((localVariableBinding.tagBits & TagBits.IsArgument) != 0) {", "+\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForParameter) != 0) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t\tif (isTypeUseCompatible(localVariableBinding.declaration.type, scope)) {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else if ((annotationType.tagBits & TagBits.AnnotationForLocalVariable) != 0) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\tif (isTypeUseCompatible(localVariableBinding.declaration.type, scope)) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.TYPE_PARAMETER : // jsr308", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=391196", "+\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForTypeParameter | TagBits.AnnotationForTypeUse)) != 0) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t}", "+\t\treturn false;", "+\t}", "-\t\tswitch (kind) {", "-\t\t\tcase Binding.PACKAGE :", "-\t\t\t\tif ((metaTagBits & TagBits.AnnotationForPackage) != 0)", "-\t\t\t\t\treturn true;", "-\t\t\t\telse if (scope.compilerOptions().sourceLevel <= ClassFileConstants.JDK1_6) {", "-\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) annotation.recipient;", "-\t\t\t\t\tif (CharOperation.equals(sourceType.sourceName, TypeConstants.PACKAGE_INFO_NAME))", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.TYPE_USE :", "-\t\t\t\tif ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t// jsr 308", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\tif (scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8) {", "-\t\t\t\t\t// already reported as syntax error; don't report secondary problems", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.TYPE :", "-\t\t\tcase Binding.GENERIC_TYPE :", "-\t\t\t\tif (((ReferenceBinding)annotation.recipient).isAnnotationType()) {", "-\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForAnnotationType | TagBits.AnnotationForType | TagBits.AnnotationForTypeUse)) != 0)", "-\t\t\t\t\treturn true;", "-\t\t\t\t} else if ((metaTagBits & (TagBits.AnnotationForType | TagBits.AnnotationForTypeUse)) != 0) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForPackage) != 0) {", "-\t\t\t\t\tif (CharOperation.equals(((ReferenceBinding) annotation.recipient).sourceName, TypeConstants.PACKAGE_INFO_NAME))", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.METHOD :", "-\t\t\t\tMethodBinding methodBinding = (MethodBinding) annotation.recipient;", "-\t\t\t\tif (methodBinding.isConstructor()) {", "-\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForConstructor | TagBits.AnnotationForTypeUse)) != 0)", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForMethod) != 0) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) methodBinding.declaringClass;", "-\t\t\t\t\tMethodDeclaration methodDecl = (MethodDeclaration) sourceType.scope.referenceContext.declarationOf(methodBinding);", "-\t\t\t\t\tif (isTypeUseCompatible(methodDecl.returnType, scope)) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.FIELD :", "-\t\t\t\tif ((metaTagBits & TagBits.AnnotationForField) != 0) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\tFieldBinding sourceField = (FieldBinding) annotation.recipient;", "-\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) sourceField.declaringClass;", "-\t\t\t\t\tFieldDeclaration fieldDeclaration = sourceType.scope.referenceContext.declarationOf(sourceField);", "-\t\t\t\t\tif (isTypeUseCompatible(fieldDeclaration.type, scope)) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.LOCAL :", "-\t\t\t\tLocalVariableBinding localVariableBinding = (LocalVariableBinding) annotation.recipient;", "-\t\t\t\tif ((localVariableBinding.tagBits & TagBits.IsArgument) != 0) {", "-\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForParameter) != 0) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t\tif (isTypeUseCompatible(localVariableBinding.declaration.type, scope)) {", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else if ((annotationType.tagBits & TagBits.AnnotationForLocalVariable) != 0) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\tif (isTypeUseCompatible(localVariableBinding.declaration.type, scope)) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.TYPE_PARAMETER : // jsr308", "-\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=391196", "-\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForTypeParameter | TagBits.AnnotationForTypeUse)) != 0) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t}", "-\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd7871e0035238d473484ab51023c000", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "a8073c80a69f6c184e71b3ada3faf15faa3ff3ae", "commitAfterChange": "33e49b6e14282ee69dc2c2cf0c73bec5e674cdf2", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t// check (meta)target compatibility", "-\t\t\tcheckTargetCompatibility: {", "-\t\t\t\tif (!annotationType.isValidBinding()) {", "-\t\t\t\t\t// no need to check annotation usage if missing", "-\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t}", "-", "-\t\t\t\tlong metaTagBits = annotationType.getAnnotationTagBits(); // could be forward reference", "-\t\t\t\tif ((metaTagBits & TagBits.AnnotationTargetMASK) == 0) {", "-\t\t\t\t\t// does not specify any target restriction - all locations supported in Java 7 and before are possible", "-\t\t\t\t\tif (kind == Binding.TYPE_PARAMETER || kind == Binding.TYPE_USE) {", "-\t\t\t\t\t\tscope.problemReporter().explitAnnotationTargetRequired(this);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t}", "-", "-\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=391201", "-\t\t\t\tif ((metaTagBits & TagBits.SE7AnnotationTargetMASK) == 0", "-\t\t\t\t\t\t&& (metaTagBits & (TagBits.AnnotationForTypeUse | TagBits.AnnotationForTypeParameter)) != 0) {", "-\t\t\t\t\tif (scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8) {", "-\t\t\t\t\t\tswitch (kind) {", "-\t\t\t\t\t\t\tcase Binding.PACKAGE :", "-\t\t\t\t\t\t\tcase Binding.TYPE :", "-\t\t\t\t\t\t\tcase Binding.GENERIC_TYPE :", "-\t\t\t\t\t\t\tcase Binding.METHOD :", "-\t\t\t\t\t\t\tcase Binding.FIELD :", "-\t\t\t\t\t\t\tcase Binding.LOCAL :", "-\t\t\t\t\t\t\t\tscope.problemReporter().invalidUsageOfTypeAnnotations(this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tswitch (kind) {", "-\t\t\t\t\tcase Binding.PACKAGE :", "-\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForPackage) != 0)", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.TYPE_USE :", "-\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t\t\t// jsr 308", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.TYPE :", "-\t\t\t\t\tcase Binding.GENERIC_TYPE :", "-\t\t\t\t\t\tif (((ReferenceBinding)this.recipient).isAnnotationType()) {", "-\t\t\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForAnnotationType | TagBits.AnnotationForType)) != 0)", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t} else if ((metaTagBits & (TagBits.AnnotationForType | TagBits.AnnotationForTypeUse)) != 0) {", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForPackage) != 0) {", "-\t\t\t\t\t\t\tif (CharOperation.equals(((ReferenceBinding)this.recipient).sourceName, TypeConstants.PACKAGE_INFO_NAME))", "-\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.METHOD :", "-\t\t\t\t\t\tMethodBinding methodBinding = (MethodBinding) this.recipient;", "-\t\t\t\t\t\tif (methodBinding.isConstructor()) {", "-\t\t\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForConstructor | TagBits.AnnotationForTypeUse)) != 0)", "-\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForMethod) != 0) {", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) methodBinding.declaringClass;", "-\t\t\t\t\t\t\tMethodDeclaration methodDecl = (MethodDeclaration) sourceType.scope.referenceContext.declarationOf(methodBinding);", "-\t\t\t\t\t\t\tif (isTypeUseCompatible(methodDecl.returnType, scope)) {", "-\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.FIELD :", "-\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForField) != 0) {", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t\t\tFieldBinding sourceField = (FieldBinding) this.recipient;", "-\t\t\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) sourceField.declaringClass;", "-\t\t\t\t\t\t\tFieldDeclaration fieldDeclaration = sourceType.scope.referenceContext.declarationOf(sourceField);", "-\t\t\t\t\t\t\tif (isTypeUseCompatible(fieldDeclaration.type, scope)) {", "-\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.LOCAL :", "-\t\t\t\t\t\tLocalVariableBinding localVariableBinding = (LocalVariableBinding)this.recipient;", "-\t\t\t\t\t\tif ((localVariableBinding.tagBits & TagBits.IsArgument) != 0) {", "-\t\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForParameter) != 0) {", "-\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t\t\t\tif (isTypeUseCompatible(localVariableBinding.declaration.type, scope)) {", "-\t\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else if ((annotationType.tagBits & TagBits.AnnotationForLocalVariable) != 0) {", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t\t\tif (isTypeUseCompatible(localVariableBinding.declaration.type, scope)) {", "-\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.TYPE_PARAMETER : // jsr308", "-\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=391196", "-\t\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForTypeParameter | TagBits.AnnotationForTypeUse)) != 0) {", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\tscope.problemReporter().disallowedTargetForAnnotation(this);", "-\t\t\t}", "+\t\t\tcheckAnnotationTarget(this, scope, annotationType, kind);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f307213468c59cfc06821c2d546f5be2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "5cd024d52141117881e2f62e4aa34624606418cf", "commitAfterChange": "a75f0756b3cdda16ae0347da0cb2609171946934", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic static void copySE8AnnotationsToType(BlockScope scope, Binding recipient, Annotation[] annotations)", "signatureAfterChange": " \tpublic static void copySE8AnnotationsToType(BlockScope scope, Binding recipient, Annotation[] annotations)", "diff": ["-\t*/", "+\t// When SE8 annotations feature in SE7 locations, they get attributed to the declared entity. Copy/move these to the type of the declared entity (field, local, argument etc.)", "-\t\tif (annotations != null && recipient.kind() != Binding.TYPE_USE) {", "-\t\t\tAnnotationBinding [] se8Annotations = null;", "-\t\t\tint se8count = 0;", "-\t\t\tlong se8nullBits = 0;", "-\t\t\tAnnotation se8NullAnnotation = null;", "-\t\t\tfor (int i = 0, length = annotations.length; i < length; i++) {", "-\t\t\t\tAnnotationBinding annotation = annotations[i].getCompilerAnnotation();", "-\t\t\t\tif (annotation == null) continue;", "-\t\t\t\tfinal ReferenceBinding annotationType = annotation.getAnnotationType();", "-\t\t\t\tlong metaTagBits = annotationType.getAnnotationTagBits();", "-\t\t\t\tif ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\tif (se8Annotations == null) {", "-\t\t\t\t\t\tse8Annotations = new AnnotationBinding[] { annotation };", "-\t\t\t\t\t\tse8count = 1;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tSystem.arraycopy(se8Annotations, 0, se8Annotations = new AnnotationBinding[se8count + 1], 0, se8count);", "-\t\t\t\t\t\tse8Annotations[se8count++] = annotation;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (annotationType.id == TypeIds.T_ConfiguredAnnotationNonNull) {", "-\t\t\t\t\t\tse8nullBits = TagBits.AnnotationNonNull;", "-\t\t\t\t\t\tse8NullAnnotation = annotations[i];", "-\t\t\t\t\t} else if (annotationType.id == TypeIds.T_ConfiguredAnnotationNullable) {", "-\t\t\t\t\t\tse8nullBits = TagBits.AnnotationNullable;", "-\t\t\t\t\t\tse8NullAnnotation = annotations[i];", "-\t\t\t\t\t}", "+\t\t", "+\t\tif (annotations == null || annotations.length == 0 || recipient == null)", "+\t\t\treturn;", "+\t\t", "+\t\tlong recipientTargetMask = 0;", "+\t\tswitch (recipient.kind()) {", "+\t\t\tcase Binding.LOCAL:", "+\t\t\t\trecipientTargetMask = recipient.isParameter() ? TagBits.AnnotationForParameter : TagBits.AnnotationForLocalVariable;", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.FIELD:", "+\t\t\t\trecipientTargetMask = TagBits.AnnotationForField;", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.METHOD:", "+\t\t\t\trecipientTargetMask = TagBits.AnnotationForMethod;", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\tAnnotationBinding [] se8Annotations = null;", "+\t\tint se8count = 0;", "+\t\tlong se8nullBits = 0;", "+\t\tAnnotation se8NullAnnotation = null;", "+\t\tfor (int i = 0, length = annotations.length; i < length; i++) {", "+\t\t\tAnnotationBinding annotation = annotations[i].getCompilerAnnotation();", "+\t\t\tif (annotation == null) continue;", "+\t\t\tfinal ReferenceBinding annotationType = annotation.getAnnotationType();", "+\t\t\tlong metaTagBits = annotationType.getAnnotationTagBits();", "+\t\t\tif ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\tif (se8Annotations == null) {", "+\t\t\t\t\tse8Annotations = new AnnotationBinding[] { annotation };", "+\t\t\t\t\tse8count = 1;", "+\t\t\t\t} else {", "+\t\t\t\t\tSystem.arraycopy(se8Annotations, 0, se8Annotations = new AnnotationBinding[se8count + 1], 0, se8count);", "+\t\t\t\t\tse8Annotations[se8count++] = annotation;", "+\t\t\t\t}", "+\t\t\t\tif (annotationType.id == TypeIds.T_ConfiguredAnnotationNonNull) {", "+\t\t\t\t\tse8nullBits = TagBits.AnnotationNonNull;", "+\t\t\t\t\tse8NullAnnotation = annotations[i];", "+\t\t\t\t} else if (annotationType.id == TypeIds.T_ConfiguredAnnotationNullable) {", "+\t\t\t\t\tse8nullBits = TagBits.AnnotationNullable;", "+\t\t\t\t\tse8NullAnnotation = annotations[i];", "-\t\t\tif (se8Annotations != null) {", "-\t\t\t\tswitch (recipient.kind()) {", "-\t\t\t\t\tcase Binding.LOCAL:", "-\t\t\t\t\t\tLocalVariableBinding local = (LocalVariableBinding) recipient;", "-\t\t\t\t\t\tTypeReference typeRef = local.declaration.type;", "-\t\t\t\t\t\tif (Annotation.isTypeUseCompatible(typeRef, scope)) { // discard hybrid annotations on package qualified types.", "-\t\t\t\t\t\t\tlocal.declaration.bits |= HasTypeAnnotations;", "-\t\t\t\t\t\t\ttypeRef.bits |= HasTypeAnnotations;", "-\t\t\t\t\t\t\tlocal.type = mergeAnnotationsIntoType(scope, se8Annotations, se8nullBits, se8NullAnnotation, typeRef, local.type);", "+\t\t}", "+\t\tif (se8Annotations != null) {", "+\t\t\tswitch (recipient.kind()) {", "+\t\t\t\tcase Binding.LOCAL:", "+\t\t\t\t\tLocalVariableBinding local = (LocalVariableBinding) recipient;", "+\t\t\t\t\tTypeReference typeRef = local.declaration.type;", "+\t\t\t\t\tif (Annotation.isTypeUseCompatible(typeRef, scope)) { // discard hybrid annotations on package qualified types.", "+\t\t\t\t\t\tlocal.declaration.bits |= HasTypeAnnotations;", "+\t\t\t\t\t\ttypeRef.bits |= HasTypeAnnotations;", "+\t\t\t\t\t\tlocal.type = mergeAnnotationsIntoType(scope, se8Annotations, se8nullBits, se8NullAnnotation, typeRef, local.type);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.FIELD:", "+\t\t\t\t\tFieldBinding field = (FieldBinding) recipient;", "+\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) field.declaringClass;", "+\t\t\t\t\tFieldDeclaration fieldDeclaration = sourceType.scope.referenceContext.declarationOf(field);", "+\t\t\t\t\tif (Annotation.isTypeUseCompatible(fieldDeclaration.type, scope)) { // discard hybrid annotations on package qualified types.", "+\t\t\t\t\t\tfieldDeclaration.bits |= HasTypeAnnotations;", "+\t\t\t\t\t\tfieldDeclaration.type.bits |= HasTypeAnnotations;", "+\t\t\t\t\t\tfield.type = mergeAnnotationsIntoType(scope, se8Annotations, se8nullBits, se8NullAnnotation, fieldDeclaration.type, field.type);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.METHOD:", "+\t\t\t\t\tMethodBinding method = (MethodBinding) recipient;", "+\t\t\t\t\tif (!method.isConstructor()) {", "+\t\t\t\t\t\tsourceType = (SourceTypeBinding) method.declaringClass;", "+\t\t\t\t\t\tMethodDeclaration methodDecl = (MethodDeclaration) sourceType.scope.referenceContext.declarationOf(method);", "+\t\t\t\t\t\tif (Annotation.isTypeUseCompatible(methodDecl.returnType, scope)) {", "+\t\t\t\t\t\t\tmethodDecl.bits |= HasTypeAnnotations;", "+\t\t\t\t\t\t\tmethodDecl.returnType.bits |= HasTypeAnnotations;", "+\t\t\t\t\t\t\tmethod.returnType = mergeAnnotationsIntoType(scope, se8Annotations, se8nullBits, se8NullAnnotation, methodDecl.returnType, method.returnType);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.FIELD:", "-\t\t\t\t\t\tFieldBinding field = (FieldBinding) recipient;", "-\t\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) field.declaringClass;", "-\t\t\t\t\t\tFieldDeclaration fieldDeclaration = sourceType.scope.referenceContext.declarationOf(field);", "-\t\t\t\t\t\tif (Annotation.isTypeUseCompatible(fieldDeclaration.type, scope)) { // discard hybrid annotations on package qualified types.", "-\t\t\t\t\t\t\tfieldDeclaration.bits |= HasTypeAnnotations;", "-\t\t\t\t\t\t\tfieldDeclaration.type.bits |= HasTypeAnnotations;", "-\t\t\t\t\t\t\tfield.type = mergeAnnotationsIntoType(scope, se8Annotations, se8nullBits, se8NullAnnotation, fieldDeclaration.type, field.type);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.METHOD:", "-\t\t\t\t\t\tMethodBinding method = (MethodBinding) recipient;", "-\t\t\t\t\t\tif (!method.isConstructor()) {", "-\t\t\t\t\t\t\tsourceType = (SourceTypeBinding) method.declaringClass;", "-\t\t\t\t\t\t\tMethodDeclaration methodDecl = (MethodDeclaration) sourceType.scope.referenceContext.declarationOf(method);", "-\t\t\t\t\t\t\tif (Annotation.isTypeUseCompatible(methodDecl.returnType, scope)) {", "-\t\t\t\t\t\t\t\tmethodDecl.bits |= HasTypeAnnotations;", "-\t\t\t\t\t\t\t\tmethodDecl.returnType.bits |= HasTypeAnnotations;", "-\t\t\t\t\t\t\t\tmethod.returnType = mergeAnnotationsIntoType(scope, se8Annotations, se8nullBits, se8NullAnnotation, methodDecl.returnType, method.returnType);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tAnnotationBinding [] recipientAnnotations = recipient.getAnnotations();", "+\t\t\tint length = recipientAnnotations == null ? 0 : recipientAnnotations.length;", "+\t\t\tint newLength = 0;", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tlong annotationTargetMask = recipientAnnotations[i].getAnnotationType().getAnnotationTagBits() & TagBits.AnnotationTargetMASK;", "+\t\t\t\tif (annotationTargetMask == 0 || (annotationTargetMask & recipientTargetMask) != 0)", "+\t\t\t\t\trecipientAnnotations[newLength++] = recipientAnnotations[i];", "+\t\t\t}", "+\t\t\tif (newLength != length) {", "+\t\t\t\tSystem.arraycopy(recipientAnnotations, 0, recipientAnnotations = new AnnotationBinding[newLength],  0, newLength);", "+\t\t\t\trecipient.setAnnotations(recipientAnnotations, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6251f6065b44516754e33d07340363d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "b7e239ed905db549b7b097dee42d60985426c483", "commitAfterChange": "5b37648dead58e0f08eb29205d0792e2cc2d0ce3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static void resolveDeprecatedAnnotations(BlockScope scope, Annotation[] annotations, Binding recipient)", "signatureAfterChange": " public static void resolveDeprecatedAnnotations(BlockScope scope, Annotation[] annotations, Binding recipient)", "diff": ["-\t */", "-\tpublic static void resolveDeprecatedAnnotations(BlockScope scope, Annotation[] annotations, Binding recipient) {", "-\t\tif (annotations == null) ", "-\t\t\treturn;", "-\t\tint length = annotations.length;", "-\t\tif (length == 0) ", "-\t\t\treturn;", "-\t\tif (recipient != null) {", "-\t\t\tswitch (recipient.kind()) {", "-\t\t\t\tcase Binding.PACKAGE :", "-\t\t\t\t\tPackageBinding packageBinding = (PackageBinding) recipient;", "-\t\t\t\t\tif ((packageBinding.tagBits & (TagBits.AnnotationResolved|TagBits.AnnotationDeprecated)) != 0) return;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Binding.TYPE :", "-\t\t\t\tcase Binding.GENERIC_TYPE :", "-\t\t\t\t\tReferenceBinding type = (ReferenceBinding) recipient;", "-\t\t\t\t\tif ((type.tagBits & (TagBits.AnnotationResolved|TagBits.AnnotationDeprecated)) != 0) return;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Binding.METHOD :", "-\t\t\t\t\tMethodBinding method = (MethodBinding) recipient;", "-\t\t\t\t\tif ((method.tagBits & (TagBits.AnnotationResolved|TagBits.AnnotationDeprecated)) != 0) return;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Binding.FIELD :", "-\t\t\t\t\tFieldBinding field = (FieldBinding) recipient;", "-\t\t\t\t\tif ((field.tagBits & (TagBits.AnnotationResolved|TagBits.AnnotationDeprecated)) != 0) return;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Binding.LOCAL :", "-\t\t\t\t\tLocalVariableBinding local = (LocalVariableBinding) recipient;", "-\t\t\t\t\tif ((local.tagBits & (TagBits.AnnotationResolved|TagBits.AnnotationDeprecated)) != 0) return;", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault :", "-\t\t\t\t\treturn;", "-\t\t\t}\t\t\t", "-\t\t}", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tTypeReference annotationTypeRef = annotations[i].type;", "-\t\t\t// only resolve type name if 'Deprecated' last token", "-\t\t\tif (!CharOperation.equals(TypeConstants.JAVA_LANG_DEPRECATED[2], annotationTypeRef.getLastToken())) return;", "-\t\t\tTypeBinding annotationType = annotations[i].type.resolveType(scope);", "-\t\t\tif(annotationType != null && annotationType.isValidBinding() && annotationType.id == TypeIds.T_JavaLangDeprecated) {", "-\t\t\t\tif (recipient != null) {", "-\t\t\t\t\tswitch (recipient.kind()) {", "-\t\t\t\t\t\tcase Binding.PACKAGE :", "-\t\t\t\t\t\t\tPackageBinding packageBinding = (PackageBinding) recipient;", "-\t\t\t\t\t\t\tpackageBinding.tagBits |= TagBits.AnnotationDeprecated;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase Binding.TYPE :", "-\t\t\t\t\t\tcase Binding.GENERIC_TYPE :", "-\t\t\t\t\t\tcase Binding.TYPE_PARAMETER :", "-\t\t\t\t\t\t\tReferenceBinding type = (ReferenceBinding) recipient;", "-\t\t\t\t\t\t\ttype.tagBits |= TagBits.AnnotationDeprecated;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase Binding.METHOD :", "-\t\t\t\t\t\t\tMethodBinding method = (MethodBinding) recipient;", "-\t\t\t\t\t\t\tmethod.tagBits |= TagBits.AnnotationDeprecated;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase Binding.FIELD :", "-\t\t\t\t\t\t\tFieldBinding field = (FieldBinding) recipient;", "-\t\t\t\t\t\t\tfield.tagBits |= TagBits.AnnotationDeprecated;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase Binding.LOCAL :", "-\t\t\t\t\t\t\tLocalVariableBinding local = (LocalVariableBinding) recipient;", "-\t\t\t\t\t\t\tlocal.tagBits |= TagBits.AnnotationDeprecated;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}\t\t\t", "+ */", "+public static void resolveDeprecatedAnnotations(BlockScope scope, Annotation[] annotations, Binding recipient) {", "+\tif (recipient != null) {", "+\t\tint kind = recipient.kind();", "+\t\tif (annotations != null) { ", "+\t\t\tint length;", "+\t\t\tif ((length = annotations.length) >= 0) { ", "+\t\t\t\tswitch (kind) {", "+\t\t\t\t\tcase Binding.PACKAGE :", "+\t\t\t\t\t\tPackageBinding packageBinding = (PackageBinding) recipient;", "+\t\t\t\t\t\tif ((packageBinding.tagBits & TagBits.DeprecatedAnnotationResolved) != 0) return;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.TYPE :", "+\t\t\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\t\t\tReferenceBinding type = (ReferenceBinding) recipient;", "+\t\t\t\t\t\tif ((type.tagBits & TagBits.DeprecatedAnnotationResolved) != 0) return;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.METHOD :", "+\t\t\t\t\t\tMethodBinding method = (MethodBinding) recipient;", "+\t\t\t\t\t\tif ((method.tagBits & TagBits.DeprecatedAnnotationResolved) != 0) return;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.FIELD :", "+\t\t\t\t\t\tFieldBinding field = (FieldBinding) recipient;", "+\t\t\t\t\t\tif ((field.tagBits & TagBits.DeprecatedAnnotationResolved) != 0) return;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.LOCAL :", "+\t\t\t\t\t\tLocalVariableBinding local = (LocalVariableBinding) recipient;", "+\t\t\t\t\t\tif ((local.tagBits & TagBits.DeprecatedAnnotationResolved) != 0) return;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault :", "+\t\t\t\t\t\treturn;", "+\t\t\t\t}\t\t\t", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tTypeReference annotationTypeRef = annotations[i].type;", "+\t\t\t\t\t// only resolve type name if 'Deprecated' last token", "+\t\t\t\t\tif (!CharOperation.equals(TypeConstants.JAVA_LANG_DEPRECATED[2], annotationTypeRef.getLastToken())) return;", "+\t\t\t\t\tTypeBinding annotationType = annotations[i].type.resolveType(scope);", "+\t\t\t\t\tif(annotationType != null && annotationType.isValidBinding() && annotationType.id == TypeIds.T_JavaLangDeprecated) {", "+\t\t\t\t\t\tswitch (kind) {", "+\t\t\t\t\t\t\tcase Binding.PACKAGE :", "+\t\t\t\t\t\t\t\tPackageBinding packageBinding = (PackageBinding) recipient;", "+\t\t\t\t\t\t\t\tpackageBinding.tagBits |= (TagBits.AnnotationDeprecated | TagBits.DeprecatedAnnotationResolved);", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\tcase Binding.TYPE :", "+\t\t\t\t\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\t\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\t\t\t\tReferenceBinding type = (ReferenceBinding) recipient;", "+\t\t\t\t\t\t\t\ttype.tagBits |= (TagBits.AnnotationDeprecated | TagBits.DeprecatedAnnotationResolved);", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\tcase Binding.METHOD :", "+\t\t\t\t\t\t\t\tMethodBinding method = (MethodBinding) recipient;", "+\t\t\t\t\t\t\t\tmethod.tagBits |= (TagBits.AnnotationDeprecated | TagBits.DeprecatedAnnotationResolved);", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\tcase Binding.FIELD :", "+\t\t\t\t\t\t\t\tFieldBinding field = (FieldBinding) recipient;", "+\t\t\t\t\t\t\t\tfield.tagBits |= (TagBits.AnnotationDeprecated | TagBits.DeprecatedAnnotationResolved);", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\tcase Binding.LOCAL :", "+\t\t\t\t\t\t\t\tLocalVariableBinding local = (LocalVariableBinding) recipient;", "+\t\t\t\t\t\t\t\tlocal.tagBits |= (TagBits.AnnotationDeprecated | TagBits.DeprecatedAnnotationResolved);", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t}\t\t\t", "+\t\t\t\t\t}", "+\t\tswitch (kind) {", "+\t\t\tcase Binding.PACKAGE :", "+\t\t\t\tPackageBinding packageBinding = (PackageBinding) recipient;", "+\t\t\t\tpackageBinding.tagBits |= TagBits.DeprecatedAnnotationResolved;", "+\t\t\t\treturn;", "+\t\t\tcase Binding.TYPE :", "+\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\tReferenceBinding type = (ReferenceBinding) recipient;", "+\t\t\t\ttype.tagBits |= TagBits.DeprecatedAnnotationResolved;", "+\t\t\t\treturn;", "+\t\t\tcase Binding.METHOD :", "+\t\t\t\tMethodBinding method = (MethodBinding) recipient;", "+\t\t\t\tmethod.tagBits |= TagBits.DeprecatedAnnotationResolved;", "+\t\t\t\treturn;", "+\t\t\tcase Binding.FIELD :", "+\t\t\t\tFieldBinding field = (FieldBinding) recipient;", "+\t\t\t\tfield.tagBits |= TagBits.DeprecatedAnnotationResolved;", "+\t\t\t\treturn;", "+\t\t\tcase Binding.LOCAL :", "+\t\t\t\tLocalVariableBinding local = (LocalVariableBinding) recipient;", "+\t\t\t\tlocal.tagBits |= TagBits.DeprecatedAnnotationResolved;", "+\t\t\t\treturn;", "+\t\t\tdefault:", "+\t\t\t\treturn;", "+\t\t}\t\t\t", "+}"]}], "num": 68702}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "efa51c388b801a757903f5ffacb909ad", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e3a828a3e83d423092e921970875a97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "d7e7bb059880a6c87ea3290708d2d0a9f9e7ebe8", "commitAfterChange": "a415220ad0bdc743d286b40ccc481ededfe8132e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void implicitWidening( \t\tTypeBinding runtimeTimeType, \t\tTypeBinding compileTimeType)", "signatureAfterChange": " \tpublic void implicitWidening( \t\tTypeBinding runtimeTimeType, \t\tTypeBinding compileTimeType)", "diff": ["-\t\tif (compileTimeType.id == T_null) {", "-\t\t\t// this case is possible only for constant null", "-\t\t\t// The type of runtime is a reference type", "-\t\t\t// The code gen use the constant id thus any value", "-\t\t\t// for the runtime id (akak the <<4) could be used.", "-\t\t\t// T_Object is used as some general T_reference", "-\t\t\timplicitConversion = (T_Object << 4) + T_null;", "-\t\t\treturn;", "-\t\t}", "+//\t\tif (compileTimeType.id == T_null) {", "+//\t\t\t// this case is possible only for constant null", "+//\t\t\t// The type of runtime is a reference type", "+//\t\t\t// The code gen use the constant id thus any value", "+//\t\t\t// for the runtime id (akak the <<4) could be used.", "+//\t\t\t// T_Object is used as some general T_reference", "+//\t\t\timplicitConversion = (T_Object << 4) + T_null;", "+//\t\t\treturn;", "+//\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e969a0ee3f7b5deb5ab47ea480981d7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "3b08272ee847aa9d892ea0105ce6d34424762f9c", "commitAfterChange": "ed6be0a94093e63f3ba13a0769b90a8ca2a5b2b0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\t\t// the resources are not in scope after the try block, so remove their assignment info", "+\t\t\t// to avoid polluting the state indices. However, do this after the postTryInitStateIndex is calculated since", "+\t\t\t// it is used to add or remove assigned resources during code gen", "+\t\t\tfor (int i = 0; i < resourcesLength; i++) {", "+\t\t\t\ttryInfo.resetAssignmentInfo(this.resources[i].binding);", "+\t\t\t}", "+\t\t\t// the resources are not in scope after the try block, so remove their assignment info", "+\t\t\t// to avoid polluting the state indices. However, do this after the postTryInitStateIndex is calculated since", "+\t\t\t// it is used to add or remove assigned resources during code gen", "+\t\t\tfor (int i = 0; i < resourcesLength; i++) {", "+\t\t\t\ttryInfo.resetAssignmentInfo(this.resources[i].binding);", "+\t\t\t}"]}], "num": 14284}
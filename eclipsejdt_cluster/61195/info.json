{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6edc79e9172b8e78f7b7b99495eaa8ef", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c2611db8f047b6bc8db1cc1d6cef785", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldLocator.java", "commitBeforeChange": "6ca82f1a54d472af29c424861c5280a8ebc7b028", "commitAfterChange": "6d8036f4b0f90ef715394ba92952a819714c2135", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void matchReference(Reference node, MatchingNodeSet nodeSet, boolean writeOnlyAccess)", "signatureAfterChange": " protected void matchReference(Reference node, MatchingNodeSet nodeSet, boolean writeOnlyAccess)", "diff": ["-\t\t\tnodeSet.addMatch(node, this.pattern.mustResolve ? POTENTIAL_MATCH : ACCURATE_MATCH);", "+\t\t\tnodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "-\t\t\tnodeSet.addMatch(node, this.pattern.mustResolve ? POTENTIAL_MATCH : ACCURATE_MATCH);", "+\t\t\tnodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "-\t\t\t\tnodeSet.addMatch(node, POTENTIAL_MATCH);", "+\t\t\t\tnodeSet.addMatch(node, POSSIBLE_MATCH);", "-\t\t\t\t\tnodeSet.addMatch(node, POTENTIAL_MATCH);", "+\t\t\t\t\tnodeSet.addMatch(node, POSSIBLE_MATCH);", "-\t\t\t\t\t\tnodeSet.addMatch(node, POTENTIAL_MATCH);", "+\t\t\t\t\t\tnodeSet.addMatch(node, POSSIBLE_MATCH);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33614c7b9a1fcdc281b2d955f690d5ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldLocator.java", "commitBeforeChange": "11d9bc69677fa9c8e3ad183264b865451dc15a16", "commitAfterChange": "0aef5635cdda5f8b487e6520930c462feef51cd5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void matchReference(Reference node, MatchingNodeSet nodeSet, boolean writeOnlyAccess)", "signatureAfterChange": " protected int matchReference(Reference node, MatchingNodeSet nodeSet, boolean writeOnlyAccess)", "diff": ["-protected void matchReference(Reference node, MatchingNodeSet nodeSet, boolean writeOnlyAccess) {", "+protected int matchReference(Reference node, MatchingNodeSet nodeSet, boolean writeOnlyAccess) {", "-\t\t\tnodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "+\t\t\treturn nodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "-\t\t\tnodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "+\t\t\treturn nodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "-\t\t\t\tnodeSet.addMatch(node, POSSIBLE_MATCH);", "+\t\t\t\treturn nodeSet.addMatch(node, POSSIBLE_MATCH);", "-\t\t\t\t\tnodeSet.addMatch(node, POSSIBLE_MATCH);", "+\t\t\t\t\treturn nodeSet.addMatch(node, POSSIBLE_MATCH);", "-\t\t\t\t\t\tnodeSet.addMatch(node, POSSIBLE_MATCH);", "-\t\t\t\t\t\treturn;", "+\t\t\t\t\t\treturn nodeSet.addMatch(node, POSSIBLE_MATCH);", "+\treturn IMPOSSIBLE_MATCH;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "784fa69373fd693e9c044f519e5653d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "6d8036f4b0f90ef715394ba92952a819714c2135", "commitAfterChange": "02733ea32199eef92e7e8bc7be9f2db172e7eedd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void match(Reference node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public void match(Reference node, MatchingNodeSet nodeSet)", "diff": ["-\t\tnodeSet.addMatch(node, this.pattern.mustResolve ? POTENTIAL_MATCH : ACCURATE_MATCH);", "+\t\tnodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "-\t\t\tnodeSet.addMatch(node, POTENTIAL_MATCH); // resolution is needed to find out if it is a type ref ", "+\t\t\tnodeSet.addMatch(node, POSSIBLE_MATCH); // resolution is needed to find out if it is a type ref ", "-\t\t\t\tnodeSet.addMatch(node, POTENTIAL_MATCH); // resolution is needed to find out if it is a type ref", "+\t\t\t\tnodeSet.addMatch(node, POSSIBLE_MATCH); // resolution is needed to find out if it is a type ref"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81231656ec25ba83e96e3a000643c6a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "6d8036f4b0f90ef715394ba92952a819714c2135", "commitAfterChange": "02733ea32199eef92e7e8bc7be9f2db172e7eedd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void match(TypeReference node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public void match(TypeReference node, MatchingNodeSet nodeSet)", "diff": ["-\t\tnodeSet.addMatch(node, this.pattern.mustResolve ? POTENTIAL_MATCH : ACCURATE_MATCH);", "+\t\tnodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "-\t\t\tnodeSet.addMatch(node, this.pattern.mustResolve ? POTENTIAL_MATCH : ACCURATE_MATCH);", "+\t\t\tnodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "-\t\t\t\tnodeSet.addMatch(node, POTENTIAL_MATCH); // resolution is needed to find out if it is a type ref", "+\t\t\t\tnodeSet.addMatch(node, POSSIBLE_MATCH); // resolution is needed to find out if it is a type ref"]}], "num": 61195}
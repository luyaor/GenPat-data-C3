{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "13e6bbde6be336d5dbe3638d63548990", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "494dd7b5367b4f2492b6106c17d388ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "5c85878a62876932bc62b0767f0e4b075cea01c0", "commitAfterChange": "ba74dc7a93e5bf80ccc6be3234ebe25167de5c99", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["-\t\tthis.customDefaultOptions = new HashMap();", "-\t\t", "+\t\tthis.customDefaultOptions = new CompilerOptions().getMap();", "+", "-        // disable all warnings by default", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode, CompilerOptions.DISABLED); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod, CompilerOptions.DISABLED); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedParameter, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedImport, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportNoEffectAssignment, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportNoImplicitStringConversion, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportNonStaticAccessToStatic, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportIndirectStaticAccess, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportIncompatibleNonInheritedInterfaceMethod, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedPrivateMember, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportLocalVariableHiding, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportFieldHiding, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportEmptyStatement, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportAssertIdentifier, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportEnumIdentifier, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUndocumentedEmptyBlock, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnnecessaryTypeCheck, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnnecessaryElse, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportInvalidJavadoc, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportInvalidJavadocTagsVisibility, CompilerOptions.PUBLIC);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportInvalidJavadocTags, CompilerOptions.DISABLED);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportInvalidJavadocTagsDeprecatedRef, CompilerOptions.DISABLED);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportInvalidJavadocTagsNotVisibleRef, CompilerOptions.DISABLED);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingJavadocTags, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingJavadocTagsVisibility, CompilerOptions.PUBLIC);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingJavadocTagsOverriding, CompilerOptions.DISABLED);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingJavadocComments, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingJavadocCommentsVisibility, CompilerOptions.PUBLIC);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingJavadocCommentsOverriding, CompilerOptions.DISABLED);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportFinallyBlockNotCompletingNormally, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedDeclaredThrownException, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionWhenOverriding, CompilerOptions.DISABLED); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnqualifiedFieldAccess, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnsafeTypeOperation, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportFinalParameterBound, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingSerialVersion, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedParameterWhenImplementingAbstract, CompilerOptions.DISABLED); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedParameterWhenOverridingConcrete, CompilerOptions.DISABLED); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportSpecialParameterHidingField, CompilerOptions.DISABLED); ", "-", "+\t        // disable all warnings", "+\t\t\tObject[] entries = this.customDefaultOptions.entrySet().toArray();", "+\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "+\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "+\t\t\t\tif (!(entry.getKey() instanceof String))", "+\t\t\t\t\tcontinue;", "+\t\t\t\tif (!(entry.getValue() instanceof String))", "+\t\t\t\t\tcontinue;", "+\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "+\t\t\t\t\tthis.customDefaultOptions.put(entry.getKey(), CompilerOptions.IGNORE);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_TaskTags, \"\"); //$NON-NLS-1$", "-\t\t\t// no warnings", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedImport, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportNonStaticAccessToStatic, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedImport, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportNonStaticAccessToStatic, CompilerOptions.WARNING);", "+\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.IGNORE); ", "+\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode, CompilerOptions.DISABLED); ", "+\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod, CompilerOptions.DISABLED); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c75790116c0bd29214b7a774f1b906fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate void findHeader()", "signatureAfterChange": "  \tprivate void setDefaultCompilerOptions()", "diff": ["-", "-\tprivate void findHeader() {", "-\t\tif (this.astRoot instanceof CompilationUnit) {", "-\t\t\tList<TypeDeclaration> types = ((CompilationUnit) this.astRoot).types();", "-\t\t\tif (!types.isEmpty()) {", "-\t\t\t\tint headerEndIndex = this.tokenManager.firstIndexIn(types.get(0), -1);", "-\t\t\t\tthis.tokenManager.setHeaderEndIndex(headerEndIndex);", "-\t\t\t}", "-\t\t}", "-\t}", "+", "+\tprivate void setDefaultCompilerOptions() {", "+\t\tif (this.defaultCompilerOptions ==  null) {", "+\t\t\tMap optionsMap = new HashMap(30);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_LocalVariableAttribute, CompilerOptions.DO_NOT_GENERATE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_LineNumberAttribute, CompilerOptions.DO_NOT_GENERATE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_SourceFileAttribute, CompilerOptions.DO_NOT_GENERATE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_MethodParametersAttribute, CompilerOptions.DO_NOT_GENERATE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.PRESERVE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_DocCommentSupport, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportOverridingMethodWithoutSuperInvocation, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedObjectAllocation, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameter, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedImport, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportNoEffectAssignment, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportNoImplicitStringConversion, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportNonStaticAccessToStatic, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportIndirectStaticAccess, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportIncompatibleNonInheritedInterfaceMethod, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedPrivateMember, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportLocalVariableHiding, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportFieldHiding, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportEmptyStatement, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportAssertIdentifier, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportEnumIdentifier, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUndocumentedEmptyBlock, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnnecessaryTypeCheck, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadoc, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadocTagsVisibility, CompilerOptions.PUBLIC);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadocTags, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocTagDescription, CompilerOptions.RETURN_TAG);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadocTagsDeprecatedRef, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadocTagsNotVisibleRef, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocTags, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocTagsVisibility, CompilerOptions.PUBLIC);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocTagsOverriding, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocComments, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocCommentsVisibility, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocCommentsOverriding, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportFinallyBlockNotCompletingNormally, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedDeclaredThrownException, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionWhenOverriding, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnqualifiedFieldAccess, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_TaskTags, Util.EMPTY_STRING);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_TaskPriorities, Util.EMPTY_STRING);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_TaskCaseSensitive, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameterWhenImplementingAbstract, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameterWhenOverridingConcrete, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportSpecialParameterHidingField, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnavoidableGenericTypeProblems, CompilerOptions.ENABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_MaxProblemPerUnit, String.valueOf(100));", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_InlineJsr, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ShareCommonFinallyBlocks, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMethodCanBeStatic, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMethodCanBePotentiallyStatic, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedTypeParameter, CompilerOptions.IGNORE);", "+\t\t\tthis.defaultCompilerOptions = optionsMap;", "+\t\t}", "+\t\tObject sourceOption = this.options.get(CompilerOptions.OPTION_Source);", "+\t\tif (sourceOption != null) {", "+\t\t\tthis.defaultCompilerOptions.put(CompilerOptions.OPTION_Source, sourceOption);", "+\t\t} else {", "+\t\t\tthis.defaultCompilerOptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);"]}], "num": 32838}
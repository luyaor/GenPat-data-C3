{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dfad733d78a06f8cd9a49c666e8b17c5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ffca66f4ebb098422e1680f4d48a6e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "5a3a5f398a8971568181868be2d5d76728016763", "commitAfterChange": "44cc03459f9020b4da0ebdb14fa0624b7d8dfc4d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": "  public void resolve(IGenericType[] suppliedTypes, ICompilationUnit[] sourceUnits, IProgressMonitor monitor)", "signatureAfterChange": "  public void resolve(IGenericType[] suppliedTypes, ICompilationUnit[] sourceUnits, IProgressMonitor monitor)", "diff": ["-\t\t\t\t\tbinaryBindings[i] = lookupEnvironment.cacheBinaryType(binaryType, false);", "+\t\t\t\t\tbinaryBindings[i] = this.lookupEnvironment.cacheBinaryType(binaryType, false);", "-\t\t\t\t\t\tlookupEnvironment.problemReporter, ", "+\t\t\t\t\t\tthis.lookupEnvironment.problemReporter, ", "-\t\t\t\t\t\tlookupEnvironment.buildTypeBindings(units[i]);", "+\t\t\t\t\t\tthis.lookupEnvironment.buildTypeBindings(units[i]);", "-\t\tParser parser = new Parser(lookupEnvironment.problemReporter, true);", "+\t\tParser parser = new Parser(this.lookupEnvironment.problemReporter, true);", "-\t\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit);", "+\t\t\t\tthis.lookupEnvironment.buildTypeBindings(parsedUnit);", "-\t\t\t\t\t\tlookupEnvironment.completeTypeBindings(parsedUnit, false);", "+\t\t\t\t\t\tthis.lookupEnvironment.completeTypeBindings(parsedUnit, false);", "-\t\t\t\tlookupEnvironment.completeTypeBindings(parsedUnit, false);", "+\t\t\t\tthis.lookupEnvironment.completeTypeBindings(parsedUnit, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb5b01b6235c73b6597671b21f04697a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "8cf1dcdf2235b54b4116fb6f086a0d218e6b26f7", "commitAfterChange": "45fa88428d5d04389be0956547a1793c4e66bac3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " \t public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tboolean nonStatic = !binding.isStatic();", "-\tflowInfo = receiver.analyseCode(currentScope, flowContext, flowInfo, nonStatic).unconditionalInits();", "+\tboolean nonStatic = !this.binding.isStatic();", "+\tflowInfo = this.receiver.analyseCode(currentScope, flowContext, flowInfo, nonStatic).unconditionalInits();", "-\t\treceiver.checkNPE(currentScope, flowContext, flowInfo);", "+\t\tthis.receiver.checkNPE(currentScope, flowContext, flowInfo);", "-\tif (arguments != null) {", "-\t\tint length = arguments.length;", "+\tif (this.arguments != null) {", "+\t\tint length = this.arguments.length;", "-\t\t\tflowInfo = arguments[i].analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "+\t\t\tflowInfo = this.arguments[i].analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "-\tif ((thrownExceptions = binding.thrownExceptions) != Binding.NO_EXCEPTIONS) {", "+\tif ((thrownExceptions = this.binding.thrownExceptions) != Binding.NO_EXCEPTIONS) {"]}], "num": 59344}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dadc74d0ec5e052fb0aa9a7446dba8ff", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04bc31ac33d7a547e5d00626bfc20d4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " \tpublic void test102()", "signatureAfterChange": " \tpublic void test102()", "diff": ["+\t        \"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tSet<SomeEnum> set1 = EnumSet.of(SomeEnum.A);\\n\" + ", "+\t\t\t\"\t                     ^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: EnumSet is a raw type. References to generic type EnumSet<E> should be parameterized\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tSet<SomeEnum> set2 = EnumSet.of(SomeEnum.foo());\\n\" + ", "+\t\t\t\"\t                     ^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: EnumSet is a raw type. References to generic type EnumSet<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 19)\\n\" + ", "+\t\t\t\"\tclass Bar extends Foo {\\n\" + ", "+\t\t\t\"\t                  ^^^\\n\" + ", "+\t\t\t\"Type safety: Foo is a raw type. References to generic type Foo<U> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b00bd25eb36a44fc32306ea90ae79c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "6781b5445d9813f939573ded9d37ee82c9dbbd15", "commitAfterChange": "6989e5bb4ed8f3be37ea69298930332629e9b475", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "     public void test111()", "signatureAfterChange": "     public void test111()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tinterface Iface extends Ann {\\n\" + ", "+\t\t\t\"\t                        ^^^\\n\" + ", "+\t\t\t\"The annotation type Ann should not be used as a superinterface for Iface\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tabstract class Klass implements Ann {\\n\" + ", "+\t\t\t\"\t                                ^^^\\n\" + ", "+\t\t\t\"The annotation type Ann should not be used as a superinterface for Klass\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\t\"\tclass AnnImpl implements Ann {\\n\" + ", "+\t\t\t\"\t                         ^^^\\n\" + ", "+\t\t\t\"The annotation type Ann should not be used as a superinterface for AnnImpl\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9eb6b8fe63ccb7ca1e3f52ab3eb83f3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7ae58cbb90a0e72a8dd69c0cd98dc1505a8668bf", "commitAfterChange": "4a1a6051dae9d70af8f16177f47bcc456f4eca12", "methodNumberBeforeChange": 705, "methodNumberAfterChange": 705, "signatureBeforeChange": " public void test701()", "signatureAfterChange": " public void test0701()", "diff": ["-public void test701() {", "+public void test0701() {", "-\t\t\"1. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\"\tList<Counter<?>> list1 = Arrays.asList(songCounter, genreCounter);\\n\" + ", "+\t\t\"\t                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety : A generic array of Deejay.Counter<? extends Object> is created for a varargs parameter\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\"\tList<Counter<? extends Object>> list2 = Arrays.asList(songCounter, genreCounter);\\n\" + ", "+\t\t\"\t                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety : A generic array of Deejay.Counter<? extends Object> is created for a varargs parameter\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\"\tList<Counter<? extends String>> list5 = Arrays.asList(songCounter, genreCounter);\\n\" + ", "+\t\t\"\t                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety : A generic array of Deejay.Counter<? extends Object> is created for a varargs parameter\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f49ccea4d69f669abb8ffa91148055a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tpublic void test018()", "signatureAfterChange": "  \tpublic void test018()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tFloat f = args.length == 0 ? new Float(0) : 0;\\n\" + ", "+\t\t\t\"\t          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The expression of type float is boxed into Float\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tFloat f = args.length == 0 ? new Float(0) : 0;\\n\" + ", "+\t\t\t\"\t                             ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The expression of type Float is unboxed into float\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tSystem.out.println((int)f);\\n\" + ", "+\t\t\t\"\t                        ^\\n\" + ", "+\t\t\t\"The expression of type Float is unboxed into int\\n\" + "]}], "num": 2429}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "767869439f561cef279fb4f1c2d0a942", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5173cbe70b1acf9739dd8064c33d48e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "c74124c71dc16aadffc9c127481cf29440dd03c8", "commitAfterChange": "2d053de9651cebac3cf0a82f4012b7196ccb5c83", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "signatureAfterChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "diff": ["-\t\t\t\tInferenceContext18.missingImplementation(\"NYI\"); //$NON-NLS-1$", "+\t\t\t\tsuperCandidate = ((WildcardBinding) superCandidate).allBounds();", "+\t\t\t\t//$FALL-THROUGH$", "+\t\t\tcase Binding.INTERSECTION_CAST_TYPE:", "+\t\t\t\tTypeBinding[] intersectingTypes = ((IntersectionCastTypeBinding) superCandidate).intersectingTypes;", "+\t\t\t\tConstraintFormula[] result = new ConstraintFormula[intersectingTypes.length];", "+\t\t\t\tfor (int i = 0; i < intersectingTypes.length; i++) {", "+\t\t\t\t\tresult[i] = ConstraintTypeFormula.create(subCandidate, intersectingTypes[i], SUBTYPE, this.isSoft);", "+\t\t\t\t}", "+\t\t\t\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e9ab22000b0d63ac7a2cf2516f5d8e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "1b4ae3c306349bc12b5bd14c0b0208197346f4fe", "commitAfterChange": "e411de6de610f4a41b2ca5b35274818572448e41", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 141, "signatureBeforeChange": " public static TypeBinding getConstantPoolDeclaringClass(Scope currentScope, MethodBinding codegenBinding, TypeBinding actualReceiverType, boolean isImplicitThisReceiver)", "signatureAfterChange": " public static TypeBinding getConstantPoolDeclaringClass(Scope currentScope, MethodBinding codegenBinding, TypeBinding actualReceiverType, boolean isImplicitThisReceiver)", "diff": ["-\t\t\t\tif (!actualReceiverType.isIntersectionType18()) // no constant pool representation. FIXME, visibility issue not handled.", "+\t\t\t\tif (actualReceiverType.isIntersectionType18()) {", "+\t\t\t\t\tTypeBinding[] intersectingTypes = ((IntersectionTypeBinding18)actualReceiverType).getIntersectingTypes();", "+\t\t\t\t\tfor(int i = 0; i < intersectingTypes.length; i++) {", "+\t\t\t\t\t\tif (intersectingTypes[i].findSuperTypeOriginatingFrom(constantPoolDeclaringClass) != null) {", "+\t\t\t\t\t\t\tconstantPoolDeclaringClass = intersectingTypes[i];", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t}"]}], "num": 8740}
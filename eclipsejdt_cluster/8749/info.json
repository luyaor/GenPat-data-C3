{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ddc8efef158f4e0a0fd26d9b53e0538d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "891d1a60d8bb8c636595139b9f2eb997", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "52aadf84ad4c79f64e59f07a05239268e15539c0", "commitAfterChange": "edc37e94c3a8ff30574beb9cdf0696d92f661cd3", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic synchronized ZipFile getZipFile(IPath path) throws CoreException", "signatureAfterChange": " \tpublic ZipFile getZipFile(IPath path) throws CoreException", "diff": ["-\tpublic synchronized ZipFile getZipFile(IPath path) throws CoreException {", "-\t\tThread currentThread = Thread.currentThread();", "-\t\tHashMap map = null;", "-\t\tZipFile zipFile;", "-\t\tif ((map = (HashMap)this.zipFiles.get(currentThread)) != null ", "-\t\t\t\t&& (zipFile = (ZipFile)map.get(path)) != null) {", "-\t\t\t\t", "-\t\t\treturn zipFile;", "-\t\t}", "-\t\tString fileSystemPath= null;", "-\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();", "-\t\tIResource file = root.findMember(path);", "-\t\tif (path.isAbsolute() && file != null) {", "-\t\t\tif (file == null) { // external file", "-\t\t\t\tfileSystemPath= path.toOSString();", "-\t\t\t} else { // internal resource (not an IFile or not existing)", "-\t\t\t\tIPath location;", "-\t\t\t\tif (file.getType() != IResource.FILE || (location = file.getLocation()) == null) {", "+\tpublic ZipFile getZipFile(IPath path) throws CoreException {", "+\t\t\t", "+\t\tsynchronized(this.zipFiles) { // TODO:  use PeThreadObject which does synchronization", "+\t\t\tThread currentThread = Thread.currentThread();", "+\t\t\tHashMap map = null;", "+\t\t\tZipFile zipFile;", "+\t\t\tif ((map = (HashMap)this.zipFiles.get(currentThread)) != null ", "+\t\t\t\t\t&& (zipFile = (ZipFile)map.get(path)) != null) {", "+\t\t\t\t\t", "+\t\t\t\treturn zipFile;", "+\t\t\t}", "+\t\t\tString fileSystemPath= null;", "+\t\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();", "+\t\t\tIResource file = root.findMember(path);", "+\t\t\tif (path.isAbsolute() && file != null) {", "+\t\t\t\tif (file == null) { // external file", "+\t\t\t\t\tfileSystemPath= path.toOSString();", "+\t\t\t\t} else { // internal resource (not an IFile or not existing)", "+\t\t\t\t\tIPath location;", "+\t\t\t\t\tif (file.getType() != IResource.FILE || (location = file.getLocation()) == null) {", "+\t\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tfileSystemPath= location.toOSString();", "+\t\t\t\t}", "+\t\t\t} else if (!path.isAbsolute()) {", "+\t\t\t\tfile= root.getFile(path);", "+\t\t\t\tif (file == null || file.getType() != IResource.FILE) {", "+\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tIPath location = file.getLocation();", "+\t\t\t\tif (location == null) {", "+\t\t\t} else {", "+\t\t\t\tfileSystemPath= path.toOSString();", "-\t\t} else if (!path.isAbsolute()) {", "-\t\t\tfile= root.getFile(path);", "-\t\t\tif (file == null || file.getType() != IResource.FILE) {", "-\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "+\t", "+\t\t\ttry {", "+\t\t\t\tif (ZIP_ACCESS_VERBOSE) {", "+\t\t\t\t\tSystem.out.println(\"(\" + currentThread + \") [JavaModelManager.getZipFile(IPath)] Creating ZipFile on \" + fileSystemPath ); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t}", "+\t\t\t\tzipFile = new ZipFile(fileSystemPath);", "+\t\t\t\tif (map != null) {", "+\t\t\t\t\tmap.put(path, zipFile);", "+\t\t\t\t}", "+\t\t\t\treturn zipFile;", "+\t\t\t} catch (IOException e) {", "+\t\t\t\tthrow new CoreException(new Status(Status.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"status.IOException\"), e)); //$NON-NLS-1$", "-\t\t\tIPath location = file.getLocation();", "-\t\t\tif (location == null) {", "-\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tfileSystemPath= location.toOSString();", "-\t\t} else {", "-\t\t\tfileSystemPath= path.toOSString();", "-\t\t}", "-", "-\t\ttry {", "-\t\t\tif (ZIP_ACCESS_VERBOSE) {", "-\t\t\t\tSystem.out.println(\"(\" + currentThread + \") [JavaModelManager.getZipFile(IPath)] Creating ZipFile on \" + fileSystemPath ); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t}", "-\t\t\tzipFile = new ZipFile(fileSystemPath);", "-\t\t\tif (map != null) {", "-\t\t\t\tmap.put(path, zipFile);", "-\t\t\t}", "-\t\t\treturn zipFile;", "-\t\t} catch (IOException e) {", "-\t\t\tthrow new CoreException(new Status(Status.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"status.IOException\"), e)); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d525b01b0aa50d7f0c406b919ac24aa6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "52aadf84ad4c79f64e59f07a05239268e15539c0", "commitAfterChange": "edc37e94c3a8ff30574beb9cdf0696d92f661cd3", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic synchronized void flushZipFiles()", "signatureAfterChange": " \tpublic void flushZipFiles()", "diff": ["-\tpublic synchronized void flushZipFiles() {", "-\t\tThread currentThread = Thread.currentThread();", "-\t\tHashMap map = (HashMap)this.zipFiles.remove(currentThread);", "-\t\tif (map == null) return;", "-\t\tIterator iterator = map.values().iterator();", "-\t\twhile (iterator.hasNext()) {", "-\t\t\ttry {", "-\t\t\t\tZipFile zipFile = (ZipFile)iterator.next();", "-\t\t\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {", "-\t\t\t\t\tSystem.out.println(\"(\" + currentThread + \") [JavaModelManager.flushZipFiles()] Closing ZipFile on \" +zipFile.getName()); //$NON-NLS-1$//$NON-NLS-2$", "+\tpublic void flushZipFiles() {", "+\t\tsynchronized(this.zipFiles) {", "+\t\t\tThread currentThread = Thread.currentThread();", "+\t\t\tHashMap map = (HashMap)this.zipFiles.remove(currentThread);", "+\t\t\tif (map == null) return;", "+\t\t\tIterator iterator = map.values().iterator();", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\ttry {", "+\t\t\t\t\tZipFile zipFile = (ZipFile)iterator.next();", "+\t\t\t\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {", "+\t\t\t\t\t\tSystem.out.println(\"(\" + currentThread + \") [JavaModelManager.flushZipFiles()] Closing ZipFile on \" +zipFile.getName()); //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t\t}", "+\t\t\t\t\tzipFile.close();", "+\t\t\t\t} catch (IOException e) {", "-\t\t\t\tzipFile.close();", "-\t\t\t} catch (IOException e) {", "-\t\t}", "-\t\t", "+\t\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f798c64a1a33826312a145672384803f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "52aadf84ad4c79f64e59f07a05239268e15539c0", "commitAfterChange": "edc37e94c3a8ff30574beb9cdf0696d92f661cd3", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic synchronized void cacheZipFiles()", "signatureAfterChange": " \tpublic void cacheZipFiles()", "diff": ["-\tpublic synchronized void cacheZipFiles() {", "-\t\tThread currentThread = Thread.currentThread();", "-\t\tif (this.zipFiles.get(currentThread) != null) return;", "-\t\tthis.zipFiles.put(currentThread, new HashMap());", "-\t}", "+\tpublic void cacheZipFiles() {", "+\t\tsynchronized(this.zipFiles) {", "+\t\t\tThread currentThread = Thread.currentThread();", "+\t\t\tif (this.zipFiles.get(currentThread) != null) return;", "+\t\t\tthis.zipFiles.put(currentThread, new HashMap());", "+\t}"]}], "num": 8749}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1e67479204ce6e86804fdba0bc1b9ce", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "279a08275c259193e28de53575f417b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "signatureAfterChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "diff": ["-\tif (this.scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5) {", "+\tlong sourceLevel = this.scope.compilerOptions().sourceLevel;", "+\tif (sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\t\t// TODO(SH): different strategy for 1.8, or is \"repair\" below enough?", "+\t\t\t\t}", "+\t\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8 && field.type instanceof ReferenceBinding) {", "+\t\t\t\t\tlong nullTagBits = field.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\tif (nullTagBits != 0 && nullTagBits != (field.type.tagBits & TagBits.AnnotationNullMASK))", "+\t\t\t\t\t\tfield.type = environment.pushAnnotationIntoType(fieldType, fieldDecl.type, nullTagBits);", "+\t\t\t\t\t// do not reset field.tagBits, since more fields may need to share this information (\"@NonNull Object o1, o2;\")"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91e9004afac9dd7bcf379b0fb84133f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 47, "signatureBeforeChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "signatureAfterChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "diff": ["+\t", "+\tif (this != this.prototype)", "+\t\treturn this.prototype.resolveTypeFor(field);", "+", "+\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\t\t\tAnnotationBinding [] annotations = field.getAnnotations();", "+\t\t\t\tif (annotations != null && annotations != Binding.NO_ANNOTATIONS) {", "+\t\t\t\t\tASTNode.copySE8AnnotationsToType(initializationScope, field, annotations);", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8 && !fieldType.isBaseType()) {", "-\t\t\t\t\tlong nullTagBits = field.tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\tif (nullTagBits != 0 && nullTagBits != (fieldType.tagBits & TagBits.AnnotationNullMASK))", "-\t\t\t\t\t\tfield.type = environment.createAnnotatedType(fieldType, nullTagBits);", "-\t\t\t\t\t// do not reset field.tagBits, since more fields may need to share this information (\"@NonNull Object o1, o2;\")", "-\t\t\t\t}"]}], "num": 23621}
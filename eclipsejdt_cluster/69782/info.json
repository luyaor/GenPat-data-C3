{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68deb05f2971d78fabaf3607f69324bf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "558f89bb5ea07c4167a2d01d8ee25b04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 313, "methodNumberAfterChange": 323, "signatureBeforeChange": " protected void consumeUnaryExpression(int op)", "signatureAfterChange": " protected void consumeUnaryExpression(int op)", "diff": ["-\t\tif ((exp instanceof IntLiteral) && (((IntLiteral) exp).mayRepresentMIN_VALUE())) {", "-\t\t\tr = this.expressionStack[this.expressionPtr] = new IntLiteralMinValue();", "-\t\t} else {", "-\t\t\tif ((exp instanceof LongLiteral) && (((LongLiteral) exp).mayRepresentMIN_VALUE())) {", "-\t\t\t\tr = this.expressionStack[this.expressionPtr] = new LongLiteralMinValue();", "+\t\tif (exp instanceof IntLiteral) {", "+\t\t\tIntLiteral intLiteral = (IntLiteral) exp;", "+\t\t\tIntLiteral convertToMinValue = intLiteral.convertToMinValue();", "+\t\t\tif (convertToMinValue ==  intLiteral) {", "+\t\t\t\t// not a min value literal so we convert it to an unary expression", "+\t\t\t\tr = new UnaryExpression(exp, op);", "-\t\t\t\tr = this.expressionStack[this.expressionPtr] = new UnaryExpression(exp, op);", "+\t\t\t\tr = convertToMinValue;", "+\t\t} else if (exp instanceof LongLiteral) {", "+\t\t\tLongLiteral longLiteral = (LongLiteral) exp;", "+\t\t\tLongLiteral convertToMinValue = longLiteral.convertToMinValue();", "+\t\t\tif (convertToMinValue ==  longLiteral) {", "+\t\t\t\t// not a min value literal so we convert it to an unary expression", "+\t\t\t\tr = new UnaryExpression(exp, op);", "+\t\t\t} else {", "+\t\t\t\tr = convertToMinValue;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tr = new UnaryExpression(exp, op);", "-\t\tr = this.expressionStack[this.expressionPtr] = new UnaryExpression(exp, op);", "+\t\tr = new UnaryExpression(exp, op);", "+\tthis.expressionStack[this.expressionPtr] = r;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "795fe08336b1a75316bec41b79f0b119", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "543cc417bbddfcd6644a73f4c45c69976260e7e9", "commitAfterChange": "585bfb2f49948f6e4fcfbc837feda680fdc72f44", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " protected void consumeBinaryExpression(int op)", "signatureAfterChange": " protected void consumeBinaryExpression(int op)", "diff": ["-\t\t\t\t} else if (expr1 instanceof BinaryExpression) {", "+\t\t\t\t} else if (expr1 instanceof BinaryExpression &&", "+\t\t\t\t\t\t\t// single out the a + b case, which is a BE ", "+\t\t\t\t\t\t\t// instead of a CBE (slightly more than a half of ", "+\t\t\t\t\t\t\t// strings concatenation are one-deep binary ", "+\t\t\t\t\t\t\t// expressions)", "+\t\t\t\t\t\t((expr1.bits & ASTNode.OperatorMASK) >> ", "+\t\t\t\t\t\t\tASTNode.OperatorSHIFT) == OperatorIds.PLUS) {", "-\t\t\t\t\t// single out the a + b case, which is a BE ", "-\t\t\t\t\t// instead of a CBE (slightly more than a half of strings", "-\t\t\t\t\t// concatenation are one-deep binary expressions)", "-\t\t\t\t} else if (expr1 instanceof BinaryExpression) {", "-\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\t\t\t\tnew CombinedBinaryExpression(expr1, expr2, PLUS, 1);", "-\t\t\t\t} else {", "-\t\t\t\t\t// single out the a + b case", "-\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\t\t\t\tnew BinaryExpression(expr1, expr2, PLUS);", "-\t\t\t\t}", "+\t\t\t} else if (expr1 instanceof BinaryExpression && ", "+\t\t\t\t\t\t\t// single out the a + b case", "+\t\t\t\t\t\t((expr1.bits & ASTNode.OperatorMASK) >> ", "+\t\t\t\t\t\t\tASTNode.OperatorSHIFT) == OperatorIds.PLUS) {", "+\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\t\tnew CombinedBinaryExpression(expr1, expr2, PLUS, 1);", "+\t\t\t} else {", "+\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\t\tnew BinaryExpression(expr1, expr2, PLUS);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba3e767a051bee5ff688233988a45c7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "d6764f9787acc40fd6905118b80ac5eb262f0c0e", "commitAfterChange": "17319a2f3f2fc4a6c43571afc2102c2f6bf7e480", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " protected void consumeBinaryExpression(int op)", "signatureAfterChange": " protected void consumeBinaryExpression(int op)", "diff": ["-\t\t\t\t\tif (expr2 instanceof CharLiteral) { // string+char", "-\t\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\t\t\t\t\t((StringLiteral) expr1).extendWith((CharLiteral) expr2); ", "-\t\t\t\t\t} else if (expr2 instanceof StringLiteral) { //string+string", "-\t\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\t\t\t\t\t((StringLiteral) expr1).extendWith((StringLiteral) expr2); ", "+\t\t\t\t\tif (((expr1.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT) == 0) {", "+\t\t\t\t\t\tif (expr2 instanceof CharLiteral) { // string+char", "+\t\t\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\t\t\t\t\t((StringLiteral) expr1).extendWith((CharLiteral) expr2); ", "+\t\t\t\t\t\t} else if (expr2 instanceof StringLiteral) { //string+string", "+\t\t\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\t\t\t\t\t((StringLiteral) expr1).extendWith((StringLiteral) expr2); ", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.expressionStack[this.expressionPtr] = new BinaryExpression(expr1, expr2, PLUS);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t// BE_INSTRUMENTATION: neutralized in the released code\t\t\t\t\t", "+\t\t\t\t\t// BE_INSTRUMENTATION: neutralized in the released code", "-\t\t\t\tif (expr2 instanceof StringLiteral) {", "+\t\t\t\tif (expr2 instanceof StringLiteral", "+\t\t\t\t\t\t&& ((expr1.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT) == 0) {", "-\t\t\t\t\t// BE_INSTRUMENTATION: neutralized in the released code\t\t\t\t\t", "+\t\t\t\t\t// BE_INSTRUMENTATION: neutralized in the released code"]}], "num": 69782}
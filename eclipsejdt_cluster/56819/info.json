{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "309c678c9ad4fb99cf4b39980cce0c9f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a15441a0d50da7607e381b7503d5bfc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "5d2cd7f1076b45eee90e6733e80765abd1df3d6a", "commitAfterChange": "14e86a8141996732826e41cf3c8dd392bb1fd5ba", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tprivate void performPreBuildCheck( \t\tIResourceDelta delta, \t\tIJavaElement parent)", "signatureAfterChange": " \tprivate void performPreBuildCheck(IResourceDelta delta, Map preferredClasspaths, Map preferredOutputs)", "diff": ["-\tprivate void performPreBuildCheck(", "-\t\tIResourceDelta delta,", "-\t\tIJavaElement parent) {", "-\t", "+\tprivate void performPreBuildCheck(IResourceDelta delta, Map preferredClasspaths, Map preferredOutputs) {", "-\t\tIJavaElement element = null;", "-\t", "+\t\t", "-\t\t\t\t\telement = JavaCore.create(resource);", "+\t\t\t\tIProject project = (IProject)resource;", "+\t\t\t\tboolean isJavaProject = JavaProject.hasJavaNature(project);", "+\t\t\t\t\tcase IResourceDelta.ADDED:", "+\t\t\t\t\t\tprocessChildren = isJavaProject;", "+\t\t\t\t\t\tthis.rootsToRefresh.add(project.getFullPath());", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t// do not visit non-java projects (see bug 16140 Non-java project gets .classpath)", "-\t\t\t\t\t\tIProject project = (IProject)resource;", "-\t\t\t\t\t\tif (JavaProject.hasJavaNature(project)) {", "-\t\t\t\t\t\t\telement = JavaCore.create(resource);", "-\t\t\t\t\t\t\tprocessChildren = true;", "-\t\t\t\t\t\t} else if (this.manager.getJavaModel().findJavaProject(project) != null) {", "-\t\t\t\t\t\t\t// project had the java nature", "-\t\t\t\t\t\t\tthis.state.rootsAreStale = true;", "-", "-\t\t\t\t\t\t\t// remove classpath cache so that initializeRoots() will not consider the project has a classpath", "-\t\t\t\t\t\t\tthis.manager.removePerProjectInfo((JavaProject)JavaCore.create(project));", "+\t\t\t\t\t\tprocessChildren = isJavaProject;", "+\t\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.OPEN) != 0) {", "+\t\t\t\t\t\t\t// project opened or closed: remember  project and its dependents", "+\t\t\t\t\t\t\tthis.rootsToRefresh.add(project.getFullPath());", "+\t\t\t\t\t\t\tif (isJavaProject) {", "+\t\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(preferredClasspaths, preferredOutputs); // in case .classpath got modified while closed", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if ((delta.getFlags() & IResourceDelta.DESCRIPTION) != 0) {", "+\t\t\t\t\t\t\tif (!JavaProject.hasJavaNature(project)) {", "+\t\t\t\t\t\t\t\t// project no longer has Java nature, discard Java related obsolete markers", "+\t\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\t\t\t\tthis.rootsToRefresh.add(project.getFullPath());", "+\t\t\t\t\t\t\t\t// flush classpath markers", "+\t\t\t\t\t\t\t\tjavaProject.", "+\t\t\t\t\t\t\t\t\tflushClasspathProblemMarkers(", "+\t\t\t\t\t\t\t\t\t\ttrue, // flush cycle markers", "+\t\t\t\t\t\t\t\t\t\ttrue  //flush classpath format markers", "+\t\t\t\t\t\t\t\t\t);", "+\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t// remove problems and tasks created  by the builder", "+\t\t\t\t\t\t\t\tJavaBuilder.removeProblemsAndTasksFor(project);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\tcase IResourceDelta.ADDED:", "-\t\t\t\t\t\tthis.state.rootsAreStale = true;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t// remove classpath cache so that initializeRoots() will not consider the project has a classpath", "-\t\t\t\t\t\tthis.manager.removePerProjectInfo((JavaProject)JavaCore.create(resource));", "-\t\t\t\t\t\tthis.state.rootsAreStale = true;", "+\t\t\t\t\t\tthis.rootsToRefresh.add(project.getFullPath());", "-\t\t\t\tif (parent.getElementType() == IJavaElement.JAVA_PROJECT) {", "-\t\t\t\t\tIFile file = (IFile) resource;", "-\t\t\t\t\tJavaProject project = (JavaProject) parent;", "-\t", "-\t\t\t\t\t/* check classpath file change */", "-\t\t\t\t\tif (file.getName().equals(JavaProject.CLASSPATH_FILENAME)) {", "-\t\t\t\t\t\treconcileClasspathFileUpdate(delta, project);", "-\t\t\t\t\t\tthis.state.rootsAreStale = true;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-//\t\t\t\t\t/* check custom preference file change */", "-//\t\t\t\t\tif (file.getName().equals(JavaProject.PREF_FILENAME)) {", "-//\t\t\t\t\t\treconcilePreferenceFileUpdate(delta, file, project);", "-//\t\t\t\t\t\tbreak;", "-//\t\t\t\t\t}", "+\t\t\t\t/* check classpath file change */", "+\t\t\t\tIFile file = (IFile) resource;", "+\t\t\t\tif (file.getName().equals(JavaProject.CLASSPATH_FILENAME)) {", "+\t\t\t\t\tthis.rootsToRefresh.add(file.getProject().getFullPath());", "+\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(file.getProject());", "+\t\t\t\t\tjavaProject.updateClasspathMarkers(preferredClasspaths, preferredOutputs);", "+\t\t\t\t\tbreak;", "+//\t\t\t\t/* check custom preference file change */", "+//\t\t\t\tif (file.getName().equals(JavaProject.PREF_FILENAME)) {", "+//\t\t\t\t\treconcilePreferenceFileUpdate(delta, file, project);", "+//\t\t\t\t\tbreak;", "+//\t\t\t\t}", "-\t\t\t\tperformPreBuildCheck(children[i], element);", "+\t\t\t\tperformPreBuildCheck(children[i], preferredClasspaths, preferredOutputs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "540a3ccadb46508c3dec8c3ed3dbc0d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "594cd83ff88684fe048c67afeebfbae2953dc7be", "commitAfterChange": "253974b8e0badc35a364b079060f4bef219ede16", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tprivate void performPreBuildCheck(IResourceDelta delta, Map preferredClasspaths, Map preferredOutputs)", "signatureAfterChange": " \tprivate void updateClasspathMarkers(IResourceDelta delta, HashSet affectedProjects, Map preferredClasspaths, Map preferredOutputs)", "diff": ["-\t */", "-\tprivate void performPreBuildCheck(IResourceDelta delta, Map preferredClasspaths, Map preferredOutputs) {", "-\t\tIResource resource = delta.getResource();", "-\t\tboolean processChildren = false;", "-\t\t", "-\t\tswitch (resource.getType()) {", "-\t", "-\t\t\tcase IResource.ROOT :", "-\t\t\t\tif (delta.getKind() == IResourceDelta.CHANGED) {", "-\t\t\t\t\tprocessChildren = true;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IResource.PROJECT :", "-\t\t\t\tIProject project = (IProject)resource;", "-\t\t\t\tint kind = delta.getKind();", "-\t\t\t\tboolean isJavaProject = JavaProject.hasJavaNature(project);", "-\t\t\t\tswitch (kind) {", "-\t\t\t\t\tcase IResourceDelta.ADDED:", "-\t\t\t\t\t\tprocessChildren = isJavaProject;", "-\t\t\t\t\t\tthis.rootsToRefresh.add(project.getFullPath());", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase IResourceDelta.CHANGED:", "-\t\t\t\t\t\tprocessChildren = isJavaProject;", "-\t\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.OPEN) != 0) {", "-\t\t\t\t\t\t\t// project opened or closed: remember  project and its dependents", "-\t\t\t\t\t\t\tthis.rootsToRefresh.add(project.getFullPath());", "-\t\t\t\t\t\t\tif (isJavaProject) {", "-\t\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "-\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(preferredClasspaths, preferredOutputs); // in case .classpath got modified while closed", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else if ((delta.getFlags() & IResourceDelta.DESCRIPTION) != 0) {", "-\t\t\t\t\t\t\tif (!JavaProject.hasJavaNature(project)) {", "-\t\t\t\t\t\t\t\t// project no longer has Java nature, discard Java related obsolete markers", "-\t\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "-\t\t\t\t\t\t\t\tthis.rootsToRefresh.add(project.getFullPath());", "-\t\t\t\t\t\t\t\t// flush classpath markers", "-\t\t\t\t\t\t\t\tjavaProject.", "-\t\t\t\t\t\t\t\t\tflushClasspathProblemMarkers(", "-\t\t\t\t\t\t\t\t\t\ttrue, // flush cycle markers", "-\t\t\t\t\t\t\t\t\t\ttrue  //flush classpath format markers", "-\t\t\t\t\t\t\t\t\t);", "-\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t// remove problems and tasks created  by the builder", "-\t\t\t\t\t\t\t\tJavaBuilder.removeProblemsAndTasksFor(project);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase IResourceDelta.REMOVED:", "-\t\t\t\t\t\tthis.rootsToRefresh.add(project.getFullPath());", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IResource.FILE :", "-\t\t\t\t/* check classpath file change */", "-\t\t\t\tIFile file = (IFile) resource;", "-\t\t\t\tif (file.getName().equals(JavaProject.CLASSPATH_FILENAME)) {", "-\t\t\t\t\tthis.rootsToRefresh.add(file.getProject().getFullPath());", "-\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(file.getProject());", "-\t\t\t\t\tjavaProject.updateClasspathMarkers(preferredClasspaths, preferredOutputs);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-//\t\t\t\t/* check custom preference file change */", "-//\t\t\t\tif (file.getName().equals(JavaProject.PREF_FILENAME)) {", "-//\t\t\t\t\treconcilePreferenceFileUpdate(delta, file, project);", "-//\t\t\t\t\tbreak;", "-//\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t}", "-\t\tif (processChildren) {", "-\t\t\tIResourceDelta[] children = delta.getAffectedChildren();", "-\t\t\tfor (int i = 0; i < children.length; i++) {", "-\t\t\t\tperformPreBuildCheck(children[i], preferredClasspaths, preferredOutputs);", "-\t\t\t}", "-\t\t}", "-\t}", "+\t */", "+\tprivate void updateClasspathMarkers(IResourceDelta delta, HashSet affectedProjects, Map preferredClasspaths, Map preferredOutputs) {", "+\t\tIResource resource = delta.getResource();", "+\t\tboolean processChildren = false;", "+\t\t", "+\t\tswitch (resource.getType()) {", "+\t", "+\t\t\tcase IResource.ROOT :", "+\t\t\t\tif (delta.getKind() == IResourceDelta.CHANGED) {", "+\t\t\t\t\tprocessChildren = true;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase IResource.PROJECT :", "+\t\t\t\tIProject project = (IProject)resource;", "+\t\t\t\tint kind = delta.getKind();", "+\t\t\t\tboolean isJavaProject = JavaProject.hasJavaNature(project);", "+\t\t\t\tswitch (kind) {", "+\t\t\t\t\tcase IResourceDelta.ADDED:", "+\t\t\t\t\t\tprocessChildren = isJavaProject;", "+\t\t\t\t\t\taffectedProjects.add(project.getFullPath());", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IResourceDelta.CHANGED:", "+\t\t\t\t\t\tprocessChildren = isJavaProject;", "+\t\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.OPEN) != 0) {", "+\t\t\t\t\t\t\t// project opened or closed: remember  project and its dependents", "+\t\t\t\t\t\t\taffectedProjects.add(project.getFullPath());", "+\t\t\t\t\t\t\tif (isJavaProject) {", "+\t\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(preferredClasspaths, preferredOutputs); // in case .classpath got modified while closed", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if ((delta.getFlags() & IResourceDelta.DESCRIPTION) != 0) {", "+\t\t\t\t\t\t\tif (!JavaProject.hasJavaNature(project)) {", "+\t\t\t\t\t\t\t\t// project no longer has Java nature, discard Java related obsolete markers", "+\t\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\t\t\t\taffectedProjects.add(project.getFullPath());", "+\t\t\t\t\t\t\t\t// flush classpath markers", "+\t\t\t\t\t\t\t\tjavaProject.", "+\t\t\t\t\t\t\t\t\tflushClasspathProblemMarkers(", "+\t\t\t\t\t\t\t\t\t\ttrue, // flush cycle markers", "+\t\t\t\t\t\t\t\t\t\ttrue  //flush classpath format markers", "+\t\t\t\t\t\t\t\t\t);", "+\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t// remove problems and tasks created  by the builder", "+\t\t\t\t\t\t\t\tJavaBuilder.removeProblemsAndTasksFor(project);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IResourceDelta.REMOVED:", "+\t\t\t\t\t\taffectedProjects.add(project.getFullPath());", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase IResource.FILE :", "+\t\t\t\t/* check classpath file change */", "+\t\t\t\tIFile file = (IFile) resource;", "+\t\t\t\tif (file.getName().equals(JavaProject.CLASSPATH_FILENAME)) {", "+\t\t\t\t\taffectedProjects.add(file.getProject().getFullPath());", "+\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(file.getProject());", "+\t\t\t\t\tjavaProject.updateClasspathMarkers(preferredClasspaths, preferredOutputs);", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+//\t\t\t\t/* check custom preference file change */", "+//\t\t\t\tif (file.getName().equals(JavaProject.PREF_FILENAME)) {", "+//\t\t\t\t\treconcilePreferenceFileUpdate(delta, file, project);", "+//\t\t\t\t\tbreak;", "+//\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tif (processChildren) {", "+\t\t\tIResourceDelta[] children = delta.getAffectedChildren();", "+\t\t\tfor (int i = 0; i < children.length; i++) {", "+\t\t\t\tupdateClasspathMarkers(children[i], affectedProjects, preferredClasspaths, preferredOutputs);", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 56819}
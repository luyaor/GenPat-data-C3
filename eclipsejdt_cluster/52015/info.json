{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "956c7d3b81543f2f7c7dc55b0859bd7f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75b214657b66849a850cf2ba2a1fb13a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "70337366d47ddb1b6bf810cfbab10722a3defded", "commitAfterChange": "4264b3d6b24e1d383a61389ea63fe7d21d4ef1c4", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public FormatterMassiveRegressionTests(File file, boolean compare)", "signatureAfterChange": " public FormatterMassiveRegressionTests()", "diff": ["+public FormatterMassiveRegressionTests() {", "+\tsuper(\"testDeleteOutputDir\");", "+\tthis.canCompare = false;", "+\tthis.file = null;", "+\tthis.inputFiles = null;", "+\tthis.testIndex = -1;", "+\tthis.path = new Path(OUTPUT_DIR.getPath());", "+}", "-public FormatterMassiveRegressionTests(File file, boolean compare) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea761cb50a61de30ebb4480da5a4ea06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "6f6bc9d0562d23a055ee9e986cf21155795a29ff", "commitAfterChange": "7f289b483e1414e7141e9f94307fbe445e3b1b34", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private void updateProblemLength()", "signatureAfterChange": "     private void updateProblemLength()", "diff": ["+    \t", "-    \t\tint fileIndex = -1;", "-    \t\t\t\tif( fileIndex == -1 )", "-    \t\t\t\t\tfileIndex = getFileIndex(file);", "-    \t\t\t\t// -2 means it's not one of the files that we are processing.", "-    \t\t\t\tif( fileIndex != -2 )", "-    \t\t\t\t\tcount ++;", "+    \t\t\t\tcount ++;", "-    \t\tif( fileIndex != -2 ){", "-    \t\t\tif( count > 0 ){", "+    \t\tif( count > 0 ){", "+    \t\t\tfinal CompilationUnit astUnit = getAstCompilationUnit(file);", "+    \t\t\tif( astUnit != null ){", "+    \t\t\t", "-\t    \t\t\t_astUnits[fileIndex].accept( lfinder );", "+\t    \t\t\t", "+\t    \t\t\tastUnit.accept( lfinder );", "-    \t\t\t// else everything is clear.", "+    \t\t\telse{", "+        \t\t\tfor(IProblem problem : entry.getValue() ){", "+        \t\t\t\t// set the -1 source end to be the same as the source start.", "+        \t\t\t\tif( problem.getSourceEnd() < problem.getSourceStart() )", "+        \t\t\t\t\tproblem.setSourceEnd(problem.getSourceStart());", "+        \t\t\t}", "+        \t\t}", "-    \t\telse{", "-    \t\t\tfor(IProblem problem : entry.getValue() ){", "-    \t\t\t\t// set the -1 source end to be the same as the source start.", "-    \t\t\t\tif( problem.getSourceEnd() < problem.getSourceStart() )", "-    \t\t\t\t\tproblem.setSourceEnd(problem.getSourceStart());", "-    \t\t\t}", "-    \t\t}", "+    \t\t"]}], "num": 52015}
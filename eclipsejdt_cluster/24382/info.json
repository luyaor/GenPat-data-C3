{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "91fc3e913af4d34f18b7c3648aab8cf0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25a4825bcb309dd0f054839d729d1ca4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "1f2b71005b6f3f6c7afc37a6ab8b070d125aa11d", "commitAfterChange": "e6a4fbed6c2350d9eb33af17fd782fa0deebbcbb", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tprivate boolean createExternalArchiveDelta(HashSet refreshedElements, IProgressMonitor monitor)", "signatureAfterChange": " \tprivate boolean createExternalArchiveDelta(HashSet refreshedElements, IProgressMonitor monitor)", "diff": ["+\t\t\tboolean hasChainedJar = false;", "-\t\t\t\t\t\t\tjavaProject.resetResolvedClasspath(); // in case it contains a chained jar", "+\t\t\t\t\t\t\thasChainedJar |= !this.manager.isNonChainingJar(entryPath);", "-\t\t\t\t\t\t\tjavaProject.resetResolvedClasspath(); // in case it contains a chained jar", "+\t\t\t\t\t\t\thasChainedJar |= !this.manager.isNonChainingJar(entryPath);", "-\t\t\t\t\t\t\tjavaProject.resetResolvedClasspath(); // in case it contains a chained jar", "+\t\t\t\t\t\t\thasChainedJar |= !this.manager.isNonChainingJar(entryPath);", "+\t\t\t", "+\t\t\tif (hasChainedJar) {", "+\t\t\t\tjavaProject.resetResolvedClasspath();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec20ac790192334ec368a5059d1591f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/TypeVector.java", "commitBeforeChange": "4060a8b976ef0b5d8ddad76013819bf5f0674a9c", "commitAfterChange": "e52667a2f75989a9365399a97143f06e9f238b04", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public boolean contains(IType element)", "signatureAfterChange": " public boolean contains(IType element)", "diff": ["-\tfor (int i = this.size; --i >= 0;)", "-\t\tif (element.equals(this.elements[i]))", "+\tfor (int i = this.size; --i >= 0;) {", "+\t\t/* Note: When creating new subtypes of RST, need to check whether this code", "+\t\t * which gives special treatment to lambda needs modification or not - refer to bug 436139", "+\t\t * An alternate could have been the following:", "+\t\t * if (element.equals(this.elements[i) && this.elements[i].equals(element)) return true;", "+\t\t * but the above has the issue of repeating the steps in most of the cases.", "+\t\t */", "+\t\tIType firstElement = null;", "+\t\tIType secondElement = null;", "+\t\tif (element.isLambda()) {", "+\t\t\tfirstElement = element;", "+\t\t\tsecondElement = elements[i];", "+\t\t} else {", "+\t\t\tfirstElement = elements[i];", "+\t\t\tsecondElement = element;", "+\t\t}", "+\t\tif (firstElement.equals(secondElement))", "+\t}"]}], "num": 24382}
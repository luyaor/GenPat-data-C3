{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "511a8d6dd97fe696762a7033e76e1ad0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddffbd3da1273d6808f5d8ab7e347b32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "30210dace16fbfb20e6910ce9f1394f40ee548a8", "commitAfterChange": "5a6c51c6c96c32c434285845bfd71f9a0c6d8df5", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic static Hashtable getDefaultOptions()", "signatureAfterChange": "  \tpublic static Hashtable getDefaultOptions()", "diff": ["-\t\t// get preferences set to their default", "-\t\tString[] defaultPropertyNames = preferences.defaultPropertyNames();", "-\t\tfor (int i = 0; i < defaultPropertyNames.length; i++){", "-\t\t\tString propertyName = defaultPropertyNames[i];", "-\t\t\tif (optionNames.contains(propertyName)) {", "-\t\t\t\tdefaultOptions.put(propertyName, preferences.getDefaultString(propertyName));", "-\t\t\t}", "-\t\t}\t\t", "-\t\t// get preferences not set to their default", "-\t\tString[] propertyNames = preferences.propertyNames();", "-\t\tfor (int i = 0; i < propertyNames.length; i++){", "-\t\t\tString propertyName = propertyNames[i];", "-\t\t\tif (optionNames.contains(propertyName)) {", "-\t\t\t\tdefaultOptions.put(propertyName, preferences.getDefaultString(propertyName));", "-\t\t\t}", "-\t\t}\t\t", "+\t\t// initialize preferences to their default", "+\t\tIterator iterator = optionNames.iterator();", "+\t\twhile (iterator.hasNext()) {", "+\t\t    String propertyName = (String) iterator.next();", "+\t\t    defaultOptions.put(propertyName, preferences.getDefaultString(propertyName));", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fac9efb60a229ed640c443d821343625", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "6dc2c6292eeb29ab819c1296b12d7a61265835da", "commitAfterChange": "d3d9c65ab8eabcabeb66c720711bcaf713684a64", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \t\r \tprotected void closing(Object info) throws JavaModelException", "signatureAfterChange": "\r \t\r \tprotected void closing(Object info) throws JavaModelException", "diff": ["-\t\tIClasspathEntry[] entries = getRawClasspath();\r", "-\t\tfor (int i = 0; i < entries.length; i++) {\r", "-\t\t\tif(entries[i].getEntryKind() == IClasspathEntry.CPE_LIBRARY) {\r", "-\t\t\t\tIPackageFragmentRoot[] roots = getPackageFragmentRoots(entries[i]);\r", "-\t\t\t\tfor (int j = 0; j < roots.length; j++) {\r", "-\t\t\t\t\tif(roots[j] instanceof JarPackageFragmentRoot){\r", "-\t\t\t\t\t\tJarPackageFragmentRoot jarRoot = (JarPackageFragmentRoot) roots[j];\r", "-\t\t\t\t\t\ttry {\r", "-\t\t\t\t\t\t\tjarRoot.getWorkspace().getRoot().setPersistentProperty(jarRoot.getSourceAttachmentPropertyName(), null); // lose info - will be recomputed\r", "-\t\t\t\t\t\t} catch(CoreException ce){\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\t\t\r", "+\t\t\r", "+\t\t// forget source attachment recommendations\r", "+\t\tIPackageFragmentRoot[] roots = this.getPackageFragmentRoots();\r", "+\t\tfor (int i = 0; i < roots.length; i++) {\r", "+\t\t\tif (roots[i] instanceof JarPackageFragmentRoot){\r", "+\t\t\t\t((JarPackageFragmentRoot) roots[i]).setSourceAttachmentProperty(null); \r", "+\t\t\t}\r"]}], "num": 48394}
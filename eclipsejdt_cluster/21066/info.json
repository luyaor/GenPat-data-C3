{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3690c6ed4c39abcde1e5b8d1af950a3e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdb6c29e7645beeed4be4947cd943c64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator2.java", "commitBeforeChange": "c8ba677b973d65c930b8b6fc78c8e5fffbed1050", "commitAfterChange": "52bfb22ae63beeffe38cde8c6b0f35d6c4f59371", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprotected boolean createHierarchyResolver(PotentialMatch[] potentialMatches)", "signatureAfterChange": " \tprotected boolean createHierarchyResolver(PotentialMatch[] potentialMatches)", "diff": ["-\t\tif (this.scope instanceof HierarchyScope) {", "-\t\t\tIType focusType = ((HierarchyScope)this.scope).focusType;", "-\t\t\tif (focusType != null) {", "-\t\t\t\t// cache focus type if not a potential match", "-\t\t\t\tchar[][] compoundName = CharOperation.splitOn('.', focusType.getFullyQualifiedName().toCharArray());", "-\t\t\t\tboolean isPotentialMatch = false;", "-\t\t\t\tfor (int i = 0, length = potentialMatches.length; i < length; i++) {", "-\t\t\t\t\tif (CharOperation.equals(potentialMatches[i].compoundName, compoundName)) {", "-\t\t\t\t\t\tisPotentialMatch = true;", "-\t\t\t\t\t\tbreak;", "+\t\tIType focusType = getFocusType();", "+\t\tif (focusType != null) {", "+\t\t\t// cache focus type if not a potential match", "+\t\t\tchar[][] compoundName = CharOperation.splitOn('.', focusType.getFullyQualifiedName().toCharArray());", "+\t\t\tboolean isPotentialMatch = false;", "+\t\t\tfor (int i = 0, length = potentialMatches.length; i < length; i++) {", "+\t\t\t\tif (CharOperation.equals(potentialMatches[i].compoundName, compoundName)) {", "+\t\t\t\t\tisPotentialMatch = true;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (!isPotentialMatch) {", "+\t\t\t\tif (focusType.isBinary()) {", "+\t\t\t\t\t// cache binary type", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tthis.cacheBinaryType(focusType);", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t} else {", "+\t\t\t\t\t// cache all types in the focus' compilation unit (even secondary types)", "+\t\t\t\t\tthis.accept((ICompilationUnit)focusType.getCompilationUnit());", "-\t\t\t\tif (!isPotentialMatch) {", "-\t\t\t\t\tif (focusType.isBinary()) {", "-\t\t\t\t\t\t// cache binary type", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tthis.cacheBinaryType(focusType);", "-\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// cache all types in the focus' compilation unit (even secondary types)", "-\t\t\t\t\t\tthis.accept((ICompilationUnit)focusType.getCompilationUnit());", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t// resolve focus type", "-\t\t\t\tthis.hierarchyResolver = new HierarchyResolver(this.lookupEnvironment, null/*hierarchy is not going to be computed*/);", "-\t\t\t\tif (this.hierarchyResolver.setFocusType(compoundName) == null) {", "-\t\t\t\t\t// focus type is not visible from this project", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tthis.hierarchyResolver = null;", "+\t\t\t}", "+\t\t\t", "+\t\t\t// resolve focus type", "+\t\t\tthis.hierarchyResolver = new HierarchyResolver(this.lookupEnvironment, null/*hierarchy is not going to be computed*/);", "+\t\t\tif (this.hierarchyResolver.setFocusType(compoundName) == null) {", "+\t\t\t\t// focus type is not visible from this project", "+\t\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faf18c798f804f527ff6cbdcbc055042", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprotected boolean createHierarchyResolver(PotentialMatch[] potentialMatches)", "signatureAfterChange": " protected boolean createHierarchyResolver(IType focusType, PotentialMatch[] potentialMatches)", "diff": ["-\t */", "-\tprotected boolean createHierarchyResolver(PotentialMatch[] potentialMatches) {", "-\t\t// create hierarchy resolver if scope is a hierarchy scope", "-\t\tIType focusType = getFocusType();", "-\t\tif (focusType != null) {", "-\t\t\t// cache focus type if not a potential match", "-\t\t\tchar[][] compoundName = CharOperation.splitOn('.', focusType.getFullyQualifiedName().toCharArray());", "-\t\t\tboolean isPotentialMatch = false;", "-\t\t\tfor (int i = 0, length = potentialMatches.length; i < length; i++) {", "-\t\t\t\tif (CharOperation.equals(potentialMatches[i].compoundName, compoundName)) {", "-\t\t\t\t\tisPotentialMatch = true;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (!isPotentialMatch) {", "-\t\t\t\tif (focusType.isBinary()) {", "-\t\t\t\t\t// cache binary type", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tthis.cacheBinaryType(focusType);", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// cache all types in the focus' compilation unit (even secondary types)", "-\t\t\t\t\tthis.accept((ICompilationUnit)focusType.getCompilationUnit());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\t// resolve focus type", "-\t\t\tthis.hierarchyResolver = new HierarchyResolver(this.lookupEnvironment, null/*hierarchy is not going to be computed*/);", "-\t\t\tReferenceBinding focusTypeBinding = this.hierarchyResolver.setFocusType(compoundName);", "-\t\t\tif (focusTypeBinding == null || !focusTypeBinding.isValidBinding() || (focusTypeBinding.tagBits & TagBits.HierarchyHasProblems) > 0) {", "-\t\t\t\t// focus type is not visible from this project", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t} else {", "-\t\t\tthis.hierarchyResolver = null;", "-\t\t}", "-\t\treturn true;", "-\t}", "+ */", "+protected boolean createHierarchyResolver(IType focusType, PotentialMatch[] potentialMatches) {", "+\t// cache focus type if not a potential match", "+\tchar[][] compoundName = CharOperation.splitOn('.', focusType.getFullyQualifiedName().toCharArray());", "+\tboolean isPotentialMatch = false;", "+\tfor (int i = 0, length = potentialMatches.length; i < length; i++) {", "+\t\tif (CharOperation.equals(potentialMatches[i].compoundName, compoundName)) {", "+\t\t\tisPotentialMatch = true;", "+\t\t\tbreak;", "+\tif (!isPotentialMatch) {", "+\t\tif (focusType.isBinary()) {", "+\t\t\ttry {", "+\t\t\t\tcacheBinaryType(focusType);", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\treturn false;", "+\t\t} else {", "+\t\t\t// cache all types in the focus' compilation unit (even secondary types)", "+\t\t\taccept((ICompilationUnit) focusType.getCompilationUnit());", "+\t}", "+", "+\t// resolve focus type", "+\tthis.hierarchyResolver = new HierarchyResolver(this.lookupEnvironment, null/*hierarchy is not going to be computed*/);", "+\tReferenceBinding binding = this.hierarchyResolver.setFocusType(compoundName);", "+\treturn binding != null && binding.isValidBinding() && (binding.tagBits & TagBits.HierarchyHasProblems) == 0;", "+}"]}], "num": 21066}
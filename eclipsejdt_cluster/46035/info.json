{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "143751272fdf602907ed47ea4e3ac5f3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "863b68a4c20fbcf4bc84e450db280da8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "c40952dd3377ae996ee676dcac3fcb724d57d010", "commitAfterChange": "1283becde4269d4bd1b131ede84504f893ae6981", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate void verifyTypeReference(Expression reference, Expression typeReference, Scope scope, boolean source15, ReferenceBinding resolvedType, int modifiers)", "signatureAfterChange": "  \tprivate void verifyTypeReference(Expression reference, Expression typeReference, Scope scope, boolean source15, ReferenceBinding resolvedType, int modifiers)", "diff": ["+\t\t\t\tif (typeReference instanceof JavadocQualifiedTypeReference && !scope.isDefinedInSameUnit(resolvedType)) {", "+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=222188", "+\t\t\t\t\t// partially qualified references from a different CU should be warned", "+\t\t\t\t\tchar[][] typeRefName = ((JavadocQualifiedTypeReference) typeReference).getTypeName();", "+\t\t\t\t\tint skipLength = 0;", "+\t\t\t\t\tif (topLevelScope.getCurrentPackage() == resolvedType.getPackage()", "+\t\t\t\t\t\t\t&& typeRefName.length < computedCompoundName.length) {", "+\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=221539: references can be partially qualified", "+\t\t\t\t\t\t// in same package and hence if the package name is not given, ignore package name check", "+\t\t\t\t\t\tskipLength = resolvedType.fPackage.compoundName.length;", "+\t\t\t\t\t}", "+\t\t\t\t\tboolean valid = true;", "+\t\t\t\t\tif (typeRefName.length == computedCompoundName.length - skipLength) {", "+\t\t\t\t\t\tcheckQualification: for (int i = 0; i < typeRefName.length; i++) {", "+\t\t\t\t\t\t\tif (!CharOperation.equals(typeRefName[i], computedCompoundName[i + skipLength])) {", "+\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t\tbreak checkQualification;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t}", "+\t\t\t\t\t// report invalid reference", "+\t\t\t\t\tif (!valid) {", "+\t\t\t\t\t\tif (scopeModifiers == -1) scopeModifiers = scope.getDeclarationModifiers();", "+\t\t\t\t\t\tscope.problemReporter().javadocInvalidMemberTypeQualification(typeReference.sourceStart, typeReference.sourceEnd, scopeModifiers);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1b24065a12bddf8844b5bb012002de1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "e5bb4bddaa8ae27dfddec859067bcb3df83df4dc", "commitAfterChange": "65877d9109defab8c1c7191e1a9530b8bc8f9b43", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tif (this.binding != null && this.type.resolvedType instanceof TypeVariableBinding) {", "+\t\tMethodScope methodScope= this.binding.declaringScope.methodScope();", "+\t\tAbstractMethodDeclaration methodDeclaration = methodScope.referenceMethod();", "+\t\tif (methodDeclaration != null && ((methodDeclaration.bits & ASTNode.CanBeStatic) != 0) && methodDeclaration.binding != null) {", "+\t\t\tTypeVariableBinding[] typeVariables = methodDeclaration.binding.typeVariables();", "+\t\t\tif (typeVariables == Binding.NO_TYPE_VARIABLES) {", "+\t\t\t\t// Method declares no type variables.", "+\t\t\t\tcurrentScope.resetEnclosingMethodStaticFlag();", "+\t\t\t} else {", "+\t\t\t\t// to check whether the resolved type for this is declared by enclosing method as a type variable", "+\t\t\t\tboolean usesEnclosingTypeVar = false; ", "+\t\t\t\tfor (int i = 0; i < typeVariables.length ; i ++) {", "+\t\t\t\t\tif (typeVariables[i] == this.type.resolvedType){", "+\t\t\t\t\t\tusesEnclosingTypeVar = true;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (!usesEnclosingTypeVar) {", "+\t\t\t\t\t// uses a type variable not declared by enclosing method", "+\t\t\t\t\tcurrentScope.resetEnclosingMethodStaticFlag();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 46035}
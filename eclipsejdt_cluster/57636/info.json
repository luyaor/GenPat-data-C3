{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "942be523465202266593f87868816175", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01e4d7f30638d5c5fb0242660c85c502", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 285, "methodNumberAfterChange": 285, "signatureBeforeChange": " public void testBug330313_wksp1_12()", "signatureAfterChange": " public void testBug330313_wksp1_12()", "diff": ["-\t\t\"\t\t\t\tdoc.addPositionUpdater(\\n\" + ", "-\t\t\"\t\t\t\t\t\tnew DefaultPositionUpdater(POS_CATEGORY) {\\n\" + ", "-\t\t\"\t\t\t\t\t\t\tprotected boolean notDeleted() {\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t\tif (fOffset < fPosition.offset\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t\t\t\t&& (fPosition.offset\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t\t\t\t\t\t+ fPosition.length < fOffset\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ fLength)) {\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t\t\treturn false;\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t\t}\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t\treturn true;\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t}\\n\" + ", "-\t\t\"\t\t\t\t\t\t});\\n\" + ", "+\t\t\"\t\t\t\tdoc.addPositionUpdater(new DefaultPositionUpdater(POS_CATEGORY) {\\n\" + ", "+\t\t\"\t\t\t\t\tprotected boolean notDeleted() {\\n\" + ", "+\t\t\"\t\t\t\t\t\tif (fOffset < fPosition.offset\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\t&& (fPosition.offset + fPosition.length < fOffset\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\t\t\t+ fLength)) {\\n\" + ", "+\t\t\"\t\t\t\t\t\t\treturn false;\\n\" + ", "+\t\t\"\t\t\t\t\t\t}\\n\" + ", "+\t\t\"\t\t\t\t\t\treturn true;\\n\" + ", "+\t\t\"\t\t\t\t\t}\\n\" + ", "+\t\t\"\t\t\t\t});\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0531ac24ce1185c5f0dde22dab854437", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ImportRewriteTest.java", "commitBeforeChange": "f8f573fb4945f47fa2e1f634d0b55fa9e0151f17", "commitAfterChange": "b1e2ed2bb1403d1f729ccda27eb7b9ebe7009bed", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 80, "signatureBeforeChange": "     public void testBug376930_5c() throws Exception", "signatureAfterChange": "     public void testBug376930_5c() throws Exception", "diff": ["+        // java.util.Map.* takes the place of java.util.Map.SomethingElse,", "+        // and the latter's comments are reassigned to it.", "-                \"// comment 1\\n\" +", "-\t\t\t\t\"/* lead 1*/ \" +", "-\t\t\t\t\"import java.util.Map.*; // test1\\n\" +", "-\t\t\t\t\"/* lead 2*/\\n\" +", "-\t\t\t\t\"// test2\\n\" +", "-\t\t\t\t\"/* lead 3*/ \\n\" +", "+\t\t\t\t\"/* lead 3*/\\n\" +", "-                \"\\n\" + ", "+\t\t\t\t\"import java.util.Map.*;\\n\" +", "+\t\t\t\t\"\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ebee197ea6d40b16b34d72276d8e191", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 286, "methodNumberAfterChange": 286, "signatureBeforeChange": " public void testBug330313_wksp1_12_njl()", "signatureAfterChange": " public void testBug330313_wksp1_12_njl()", "diff": ["-\t\t\"\t\t\t\tdoc.addPositionUpdater(\\n\" + ", "-\t\t\"\t\t\t\t\t\tnew DefaultPositionUpdater(POS_CATEGORY) {\\n\" + ", "-\t\t\"\t\t\t\t\t\t\tprotected boolean notDeleted() {\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t\tif (fOffset < fPosition.offset\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t\t\t\t&& (fPosition.offset\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t\t\t\t\t\t+ fPosition.length < fOffset\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ fLength)) {\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t\t\treturn false;\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t\t}\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t\treturn true;\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t}\\n\" + ", "-\t\t\"\t\t\t\t\t\t});\\n\" + ", "+\t\t\"\t\t\t\tdoc.addPositionUpdater(new DefaultPositionUpdater(POS_CATEGORY) {\\n\" + ", "+\t\t\"\t\t\t\t\tprotected boolean notDeleted() {\\n\" + ", "+\t\t\"\t\t\t\t\t\tif (fOffset < fPosition.offset\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\t&& (fPosition.offset + fPosition.length < fOffset\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\t\t\t+ fLength)) {\\n\" + ", "+\t\t\"\t\t\t\t\t\t\treturn false;\\n\" + ", "+\t\t\"\t\t\t\t\t\t}\\n\" + ", "+\t\t\"\t\t\t\t\t\treturn true;\\n\" + ", "+\t\t\"\t\t\t\t\t}\\n\" + ", "+\t\t\"\t\t\t\t});\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5869fec48f7326df93d95bf36b5b1171", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/StatementRecoveryTest.java", "commitBeforeChange": "788c169eda00b669155eb0f9164eec17e1ef661d", "commitAfterChange": "7898c4b8cd615bc3892adbc0bebbcfa8bbac8b39", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void test0028()", "signatureAfterChange": " public void test0028()", "diff": ["-\t\t\"      () {\\n\" + ", "-\t\t\"        super();\\n\" + ", "-\t\t\"      }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87dcd88072f32d0783cbc9bd3c7aa2a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "183f54b68364b226246fe663acdbcbf6f6f1dd9e", "commitAfterChange": "42389b5a6a8ef8c4646bcecf0b3ebcc0d07e69ed", "methodNumberBeforeChange": 409, "methodNumberAfterChange": 410, "signatureBeforeChange": " \tpublic void test407()", "signatureAfterChange": " \tpublic void test408()", "diff": ["-\t// 78008", "-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"import java.util.*;\\n\" + ", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"    public Integer[] getTypes() {\\n\" + ", "-\t\t\t\t\"        List<Integer> list = new ArrayList<Integer>();\\n\" + ", "-\t\t\t\t\"        return list == null \\n\" + ", "-\t\t\t\t\"            ? new Integer[0] \\n\" + ", "-\t\t\t\t\"            : list.toArray(new Integer[list.size()]);\\n\" + ", "-\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"    public static void main(String[] args) {\\n\" + ", "-\t\t\t\t\"        Class clazz = null;\\n\" + ", "-\t\t\t\t\"        try {\\n\" + ", "-\t\t\t\t\"            clazz = Class.forName(\\\"X\\\");\\n\" + ", "-\t\t\t\t\"\t\t\t System.out.println(\\\"SUCCESS\\\");\\n\" +", "-\t\t\t\t\"        } catch (Throwable e) {\\n\" + ", "-\t\t\t\t\"            e.printStackTrace();\\n\" + ", "-\t\t\t\t\"        }\\n\" + ", "-\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\"}\",", "-\t\t\t},", "-\t\t\t\"SUCCESS\");\t", "-\t}\t\t\t", "+\t// 78008", "+\tpublic void test408() {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"import java.util.*;\\n\" + ", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"    public Integer[] getTypes() {\\n\" + ", "+\t\t\t\t\"        List<Integer> list = new ArrayList<Integer>();\\n\" + ", "+\t\t\t\t\"        return list == null \\n\" + ", "+\t\t\t\t\"            ? new Integer[0] \\n\" + ", "+\t\t\t\t\"            : list.toArray(new Integer[list.size()]);\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"    public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"        Class clazz = null;\\n\" + ", "+\t\t\t\t\"        try {\\n\" + ", "+\t\t\t\t\"            clazz = Class.forName(\\\"X\\\");\\n\" + ", "+\t\t\t\t\"    \t     System.out.println(\\\"SUCCESS\\\");\\n\" + ", "+\t\t\t\t\"        } catch (Throwable e) {\\n\" + ", "+\t\t\t\t\"            e.printStackTrace();\\n\" + ", "+\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t\t},", "+\t\t\t\"SUCCESS\");\t", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c96fa397cee16aec01bd9d54b1958d4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "26e0b0c271d5031424823a1070ef180ba24218bf", "commitAfterChange": "c84496f37e5dff715764911530c1fceaa60b14ee", "methodNumberBeforeChange": 509, "methodNumberAfterChange": 509, "signatureBeforeChange": " \tpublic void test505()", "signatureAfterChange": " \tpublic void test505()", "diff": ["-\t\t\t\"    14  aload_0 [this]\\n\" + ", "-\t\t\t\"    15  getfield X.e : XA [42]\\n\" + ", "-\t\t\t\"    18  pop\\n\" + ", "-\t\t\t\"    19  getstatic XB.CONST : XB [44]\\n\" + ", "-\t\t\t\"    22  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [50]\\n\" + ", "-\t\t\t\"    25  return\\n\" + ", "+\t\t\t\"    14  getstatic XB.CONST : XB [42]\\n\" + ", "+\t\t\t\"    17  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [48]\\n\" + ", "+\t\t\t\"    20  return\\n\" + ", "-\t\t\t\"        [pc: 25, line: 19]\\n\" + ", "+\t\t\t\"        [pc: 20, line: 19]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 26] local: this index: 0 type: X\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 21] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 26] local: this index: 0 type: X<E>\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 21] local: this index: 0 type: X<E>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d00c6a0c68a578a19bc2c728ddb8409d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/StatementRecoveryTest.java", "commitBeforeChange": "788c169eda00b669155eb0f9164eec17e1ef661d", "commitAfterChange": "7898c4b8cd615bc3892adbc0bebbcfa8bbac8b39", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public void test0029()", "signatureAfterChange": " public void test0029()", "diff": ["-\t\t\"      () {\\n\" + ", "-\t\t\"        super();\\n\" + ", "-\t\t\"      }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9800862b9a268771a793fc829d657ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "984bec0735c837a49816a47e66faa3e64aa59275", "commitAfterChange": "9949db0584a6499b1daec6c7af373276b97d338d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void testFocusWithLocalAndAnonymousTypes() throws JavaModelException", "signatureAfterChange": " public void testFocusWithLocalAndAnonymousTypes() throws JavaModelException", "diff": ["-\t\t\"Focus: p7.X\\n\" + ", "+\t\t\"Focus: X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"  X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object [in Object.class [in java.lang [in \"+  getExternalJCLPath() +\" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  Object [in Object.class [in java.lang [in \"+  getExternalJCLPath() +\" [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"  X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Y1 [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"      Y2 [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"    <anonymous #1> [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"    <anonymous #2> [in field2 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"    <anonymous #1> [in field2 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"    <anonymous #1> [in field1 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"    <anonymous #1> [in <initializer #2> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"    Y1 [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"      Y2 [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"    <anonymous #1> [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\",", "+\t\t\"  Y1 [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"    Y2 [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #2> [in field2 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> [in field2 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> [in field1 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> [in <initializer #2> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  Y1 [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"    Y2 [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\","]}], "num": 57636}
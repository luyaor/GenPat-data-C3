{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ac9f9c09775234bde18e3188ce55742", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45f7f16d07363e93630f296e6fb38df0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "f2d453b40b80a7b4342f872cb4a2ceb30cb26035", "commitAfterChange": "ff67eddd91980875c818d1dd4c9e986c8fe296a7", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 120, "signatureBeforeChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "diff": ["+\t\t} else if (parent instanceof TryStatement) {", "+\t\t\tboolean isException = false;", "+\t\t\tif (node instanceof CompletionOnSingleTypeReference) {", "+\t\t\t\tisException = ((CompletionOnSingleTypeReference)node).isException();", "+\t\t\t} else if (node instanceof CompletionOnQualifiedTypeReference) {", "+\t\t\t\tisException = ((CompletionOnQualifiedTypeReference)node).isException();", "+\t\t\t} else if (node instanceof CompletionOnParameterizedQualifiedTypeReference) {", "+\t\t\t\tisException = ((CompletionOnParameterizedQualifiedTypeReference)node).isException();", "+\t\t\t}", "+\t\t\tif (isException) {", "+\t\t\t\tThrownExceptionFinder thrownExceptionFinder = new ThrownExceptionFinder();", "+\t\t\t\tReferenceBinding[] bindings = thrownExceptionFinder.find((TryStatement) parent, (BlockScope)scope);", "+\t\t\t\tif (bindings != null && bindings.length > 0) {", "+\t\t\t\t\tfor (int i = 0; i < bindings.length; i++) {", "+\t\t\t\t\t\taddExpectedType(bindings[i], scope);", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.expectedTypesFilter = SUPERTYPE;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8023c5f0e7fef98f7e7be4fb77a89493", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "38437076b7a492cbe65acea37c6da2899990885f", "commitAfterChange": "a85dd3772bf40e01ede4717af426d44844307345", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "signatureAfterChange": " \tprotected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "diff": ["+\t\t\t// Decide whether we have a constructor or not", "+\t\t\tboolean isConstructor = false;", "-\t\t\t\tif (name == null) {", "+\t\t\t\tisConstructor = CharOperation.equals(this.identifierStack[0], name);", "+\t\t\t\ttypeRef = new ImplicitDocTypeReference(name, this.memberStart);", "+\t\t\t} else {", "+\t\t\t\tchar[] name = null;", "+\t\t\t\tif (typeRef instanceof JavadocSingleTypeReference) {", "+\t\t\t\t\tname = ((JavadocSingleTypeReference)typeRef).token;", "+\t\t\t\t} else if (typeRef instanceof JavadocQualifiedTypeReference) {", "+\t\t\t\t\tchar[][] tokens = ((JavadocQualifiedTypeReference)typeRef).tokens;", "+\t\t\t\t\tname = tokens[tokens.length-1];", "+\t\t\t\t} else {", "-\t\t\t\ttypeRef = new JavadocSingleTypeReference(name, 0, 0, 0);", "+\t\t\t\tisConstructor = CharOperation.equals(this.identifierStack[0], name);", "-\t\t\t// Decide whether we have a constructor or not", "-\t\t\tchar[][] receiverTokens = typeRef.getTypeName();", "-\t\t\tchar[] memberName = this.identifierStack[0];", "-\t\t\tboolean isConstructor = CharOperation.equals(memberName, receiverTokens[receiverTokens.length-1]);"]}], "num": 36060}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e62d9368b21c0c587218538b0b0ce890", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00c652881c9c1bce96bb1aecccf54ea6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "d6b9a9ad265263a5b48f56f9c01c650843316a42", "commitAfterChange": "9e722bc19e55d2718f2ad1194bb716de73154e02", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tpublic FlowInfo setReachMode(int reachMode)", "signatureAfterChange": " \t \tpublic FlowInfo setReachMode(int reachMode)", "diff": ["-\t\t\tpotentialInits = 0;", "-\t\t\textraPotentialInits = null;", "+\t\t\tthis.potentialInits = 0;", "+\t\t\tif (this.extraPotentialInits != null){", "+\t\t\t\tfor (int i = 0, length = this.extraPotentialInits.length; i < length; i++){", "+\t\t\t\t\tthis.extraPotentialInits[i] = 0;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aec6ecc051d16ea08d7a50e8b608e986", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "562f566c1c2b8bfedaad7117a5b53ae2f781bec9", "commitAfterChange": "b11449e69404728ca4b19e3cce8d08756ffe4f52", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public OrPattern(SearchPattern leftPattern, SearchPattern rightPattern)", "signatureAfterChange": "  \tpublic OrPattern(SearchPattern leftPattern, SearchPattern rightPattern)", "diff": ["-public OrPattern(SearchPattern leftPattern, SearchPattern rightPattern) {", "-\tsuper(Math.max(leftPattern.getMatchRule(), rightPattern.getMatchRule()));", "-\t((InternalSearchPattern)this).kind = OR_PATTERN;", "-\t((InternalSearchPattern)this).mustResolve = ((InternalSearchPattern) leftPattern).mustResolve || ((InternalSearchPattern) rightPattern).mustResolve;", "-\tSearchPattern[] leftPatterns = leftPattern instanceof OrPattern ? ((OrPattern) leftPattern).patterns : null;", "-\tSearchPattern[] rightPatterns = rightPattern instanceof OrPattern ? ((OrPattern) rightPattern).patterns : null;", "-\tint leftSize = leftPatterns == null ? 1 : leftPatterns.length;", "-\tint rightSize = rightPatterns == null ? 1 : rightPatterns.length;", "-\tthis.patterns = new SearchPattern[leftSize + rightSize];", "+\tpublic OrPattern(SearchPattern leftPattern, SearchPattern rightPattern) {", "+\t\tsuper(Math.max(leftPattern.getMatchRule(), rightPattern.getMatchRule()));", "+\t\t((InternalSearchPattern)this).kind = OR_PATTERN;", "+\t\t((InternalSearchPattern)this).mustResolve = ((InternalSearchPattern) leftPattern).mustResolve || ((InternalSearchPattern) rightPattern).mustResolve;", "+\t", "+\t\tSearchPattern[] leftPatterns = leftPattern instanceof OrPattern ? ((OrPattern) leftPattern).patterns : null;", "+\t\tSearchPattern[] rightPatterns = rightPattern instanceof OrPattern ? ((OrPattern) rightPattern).patterns : null;", "+\t\tint leftSize = leftPatterns == null ? 1 : leftPatterns.length;", "+\t\tint rightSize = rightPatterns == null ? 1 : rightPatterns.length;", "+\t\tthis.patterns = new SearchPattern[leftSize + rightSize];", "+\t", "+\t\tif (leftPatterns == null)", "+\t\t\tthis.patterns[0] = leftPattern;", "+\t\telse", "+\t\t\tSystem.arraycopy(leftPatterns, 0, this.patterns, 0, leftSize);", "+\t\tif (rightPatterns == null)", "+\t\t\tthis.patterns[leftSize] = rightPattern;", "+\t\telse", "+\t\t\tSystem.arraycopy(rightPatterns, 0, this.patterns, leftSize, rightSize);", "-\tif (leftPatterns == null)", "-\t\tthis.patterns[0] = leftPattern;", "-\telse", "-\t\tSystem.arraycopy(leftPatterns, 0, this.patterns, 0, leftSize);", "-\tif (rightPatterns == null)", "-\t\tthis.patterns[leftSize] = rightPattern;", "-\telse", "-\t\tSystem.arraycopy(rightPatterns, 0, this.patterns, leftSize, rightSize);", "-}", "+\t\t// Store erasure match", "+\t\tfor (int i = 0, length = this.patterns.length; i < length && !isErasureMatch; i++) {", "+\t\t\tif (((JavaSearchPattern) this.patterns[i]).isErasureMatch) isErasureMatch = true;", "+\t\t}", "+\t}"]}], "num": 28453}
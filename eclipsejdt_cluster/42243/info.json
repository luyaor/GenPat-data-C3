{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8bac25520926214dad3ebf2e1f697fb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0435a4ad6deabd290ea39e11028bf5ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "058f4956c302999db0dab277cf91883f2d016e2b", "commitAfterChange": "27d9d524a3b624cfc1260a727d1dfb92d53ae22a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\t\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\t\tscope,", "-\t\t\t\t\t((ArrayBinding) castType).elementsType(),", "-\t\t\t\t\texprElementType,", "-\t\t\t\t\texpression);", "+\t\t\t\treturn checkCastTypesCompatibility(scope, ((ArrayBinding) castType).elementsType(), exprElementType, expression);", "-\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "-\t\t\t\tif (match == null) {", "-\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t\tif (expressionType instanceof ReferenceBinding) {", "+\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "+\t\t\t\t\tif (match == null) {", "+\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, null, true);", "-\t\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\t\tscope,", "-\t\t\t\t\tcastType.erasure(),", "-\t\t\t\t\texpressionType,", "-\t\t\t\t\texpression);", "+\t\t\t\treturn checkCastTypesCompatibility(scope, castType.erasure(), expressionType, expression);", "-\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "-\t\t\tif (match != null) {", "-\t\t\t\ttagAsUnnecessaryCast(scope, castType);", "-\t\t\t\treturn true;", "+\t\t\tif (castType instanceof ReferenceBinding) {", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "+\t\t\t\tif (match != null) {", "+\t\t\t\t\ttagAsUnnecessaryCast(scope, castType);", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "-\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\tscope,", "-\t\t\t\tcastType,", "-\t\t\t\texpressionType.erasure(),", "-\t\t\t\texpression);", "+\t\t\treturn checkCastTypesCompatibility(scope, castType, expressionType.erasure(), expression);", "-\t\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\t\tscope,", "-\t\t\t\t\tcastType.erasure(),", "-\t\t\t\t\texpressionType,", "-\t\t\t\t\texpression);", "+\t\t\t\treturn checkCastTypesCompatibility(scope, castType.erasure(), expressionType, expression);", "-\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\tscope,", "-\t\t\t\tcastType.erasure(),", "-\t\t\t\texpressionType,", "-\t\t\t\texpression);", "+\t\t\treturn checkCastTypesCompatibility(scope, castType.erasure(), expressionType, expression);", "-\t\t\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\t\t\t\t\treportIllegalCast(scope, castType, expressionType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fdf492f829ee0f0c72104d69cdb76c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void addTrustedMatch(ASTNode node, boolean isExact)", "signatureAfterChange": " public void addTrustedMatch(ASTNode node, boolean isExact)", "diff": ["+\taddTrustedMatch(node, isExact ? EXACT_MATCH : POTENTIAL_MATCH);", "+\t", "+}", "-\tthis.matchingNodes.put(node, isExact ? EXACT_MATCH : POTENTIAL_MATCH);"]}], "num": 42243}
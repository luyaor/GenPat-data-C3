{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d75ff299c4e1d847f33e56db1af861e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4337f9917fe8349599c55f82e2226d3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "51ef1f3e636c416c08f983016f64f795f2b9cc74", "commitAfterChange": "9d3908e6916e224f861c3acffb456d39563ef22b", "methodNumberBeforeChange": 764, "methodNumberAfterChange": 764, "signatureBeforeChange": " public void test758()", "signatureAfterChange": " public void test758()", "diff": ["-\t\t\"Type safety: The expression of type X.EntryMap.Entry needs unchecked conversion to conform to X.EntryMap<K,V>.Entry\\n\" + ", "+\t\t\"Unnecessary cast from X.EntryMap.Entry to X.EntryMap.Entry\\n\" + ", "-\t\t\"Unnecessary cast from X.EntryMap.Entry to X.EntryMap.Entry\\n\" + ", "+\t\t\"Type safety: The expression of type X.EntryMap.Entry needs unchecked conversion to conform to X.EntryMap<K,V>.Entry\\n\" + ", "-\t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\"\tEntryMap<K,V>.Entry entry = (EntryMap.Entry) internalGet(key);\\n\" + ", "-\t\t\"\t                             ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type safety: X.EntryMap.Entry is a raw type. References to generic type X<K,V>.EntryMap<K,V>.Entry should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"5. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 14)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4605e5541730ca3240458071edd96527", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "51ef1f3e636c416c08f983016f64f795f2b9cc74", "commitAfterChange": "9d3908e6916e224f861c3acffb456d39563ef22b", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " \tpublic void test102()", "signatureAfterChange": " \tpublic void test102()", "diff": ["-\t        \"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tSet<SomeEnum> set1 = EnumSet.of(SomeEnum.A);\\n\" + ", "-\t\t\t\"\t                     ^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: EnumSet is a raw type. References to generic type EnumSet<E> should be parameterized\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "-\t\t\t\"\tSet<SomeEnum> set2 = EnumSet.of(SomeEnum.foo());\\n\" + ", "-\t\t\t\"\t                     ^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: EnumSet is a raw type. References to generic type EnumSet<E> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 15)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 19)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 19)\\n\" + "]}], "num": 5038}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "06eaf78572fd47d29e48e5a7770254ae", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c2621d3b1322e4452ee1815e2763aaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-}", "-\tif (this.constant != Constant.NotAConstant) {", "-\t\tif (valueRequired) {", "-\t\t\tcodeStream.generateConstant(this.constant, this.implicitConversion);", "-\t\t}", "-\t} else {", "-\t\tFieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);", "-\t\tif (valueRequired) {", "-\t\t\tif (lastFieldBinding.declaringClass == null) { // array length", "-\t\t\t\tcodeStream.arraylength();", "-\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\t} else {", "-\t\t\t\tConstant fieldConstant = lastFieldBinding.constant();", "-\t\t\t\tif (fieldConstant != Constant.NotAConstant) {", "-\t\t\t\t\tif (!lastFieldBinding.isStatic()){", "-\t\t\t\t\t\tcodeStream.invokeObjectGetClass();", "-\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t}", "-\t\t\t\t\t// inline the last field constant", "-\t\t\t\t\tcodeStream.generateConstant(fieldConstant, this.implicitConversion);", "-\t\t\t\t} else {", "-\t\t\t\t\tif (lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "-\t\t\t\t\t\tif (lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "-\t\t\t\t\t}", "-\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\t\t}", "+\tif ((this.bits & Binding.VARIABLE) == 0) { // nothing to do if type ref", "+\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\treturn;", "+\t}", "+\tFieldBinding lastFieldBinding = this.otherBindings == null ? (FieldBinding) this.binding : this.otherBindings[this.otherBindings.length-1];", "+\tif (lastFieldBinding.canBeSeenBy(getFinalReceiverType(), this, currentScope)) {", "+\t\tsuper.generateCode(currentScope, codeStream, valueRequired);", "+\t\treturn;", "+\t}", "+\tlastFieldBinding = generateReadSequence(currentScope, codeStream);", "+\tif (lastFieldBinding != null) {", "+\t\tboolean isStatic = lastFieldBinding.isStatic();", "+\t\tConstant fieldConstant = lastFieldBinding.constant();", "+\t\tif (fieldConstant != Constant.NotAConstant) {", "+\t\t\tif (!isStatic){", "+\t\t\t\tcodeStream.invokeObjectGetClass();", "+\t\t\t\tcodeStream.pop();", "+\t\t\t}", "+\t\t\tif (valueRequired) { // inline the last field constant", "+\t\t\t\tcodeStream.generateConstant(fieldConstant, this.implicitConversion);", "-\t\t\tif (lastFieldBinding != null && !lastFieldBinding.isStatic()){", "-\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\tcodeStream.pop();", "+\t\t\tboolean isFirst = lastFieldBinding == this.binding", "+\t\t\t\t\t\t\t\t\t\t\t&& (this.indexOfFirstFieldBinding == 1 || lastFieldBinding.declaringClass == currentScope.enclosingReceiverType())", "+\t\t\t\t\t\t\t\t\t\t\t&& this.otherBindings == null; // could be dup: next.next.next", "+\t\t\tTypeBinding requiredGenericCast = getGenericCast(this.otherBindings == null ? 0 : this.otherBindings.length);", "+\t\t\tif (valueRequired", "+\t\t\t\t\t|| (!isFirst && currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4)", "+\t\t\t\t\t|| ((this.implicitConversion & TypeIds.UNBOXING) != 0)", "+\t\t\t\t\t|| requiredGenericCast != null) {", "+\t\t\t\tint lastFieldPc = codeStream.position;", "+\t\t\t\tif (lastFieldBinding.declaringClass == null) { // array length", "+\t\t\t\t\tcodeStream.arraylength();", "+\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// could occur if !valueRequired but compliance >= 1.4", "+\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "+\t\t\t\t\tif (requiredGenericCast != null) codeStream.checkcast(requiredGenericCast);", "+\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tboolean isUnboxing = (this.implicitConversion & TypeIds.UNBOXING) != 0;", "+\t\t\t\t\t\t// conversion only generated if unboxing", "+\t\t\t\t\t\tif (isUnboxing) codeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\tswitch (isUnboxing ? postConversionType(currentScope).id : lastFieldBinding.type.id) {", "+\t\t\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\t\t\tcodeStream.pop2();", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\tint fieldPosition = (int) (this.sourcePositions[this.sourcePositions.length - 1] >>> 32);", "+\t\t\t\tcodeStream.recordPositionsFrom(lastFieldPc, fieldPosition);", "+\t\t\t} else {", "+\t\t\t\tif (!isStatic){", "+\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "+\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48b6c8741a24d25a03702dc3fbeec435", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "931e434bb3e4b9f62577b10f8123cfc028893969", "commitAfterChange": "c0b519c3b149b13ea0f307f0d3414359b2cf0639", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "  public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["+", "+public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {\t\t", "+\tint pc = codeStream.position;", "+\tif (this.constant != Constant.NotAConstant) {", "+\t\t\tcodeStream.generateConstant(this.constant, this.implicitConversion);", "-", "-\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {\t\t", "-\t\tint pc = codeStream.position;", "-\t\tif (constant != Constant.NotAConstant) {", "-\t\t\tif (valueRequired) {", "-\t\t\t\tcodeStream.generateConstant(constant, implicitConversion);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tFieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);", "-\t\t\tif (lastFieldBinding != null) {", "-\t\t\t\tboolean isStatic = lastFieldBinding.isStatic();", "-\t\t\t\tConstant fieldConstant = lastFieldBinding.constant();", "-\t\t\t\tif (fieldConstant != Constant.NotAConstant) {", "+\t} else {", "+\t\tFieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);", "+\t\tif (lastFieldBinding != null) {", "+\t\t\tboolean isStatic = lastFieldBinding.isStatic();", "+\t\t\tConstant fieldConstant = lastFieldBinding.constant();", "+\t\t\tif (fieldConstant != Constant.NotAConstant) {", "+\t\t\t\tif (!isStatic){", "+\t\t\t\t\tcodeStream.invokeObjectGetClass();", "+\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t}", "+\t\t\t\tif (valueRequired) { // inline the last field constant", "+\t\t\t\t\tcodeStream.generateConstant(fieldConstant, this.implicitConversion);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tboolean isFirst = lastFieldBinding == this.binding ", "+\t\t\t\t\t\t\t\t\t\t\t\t&& (this.indexOfFirstFieldBinding == 1 || lastFieldBinding.declaringClass == currentScope.enclosingReceiverType())", "+\t\t\t\t\t\t\t\t\t\t\t\t&& this.otherBindings == null; // could be dup: next.next.next", "+\t\t\t\tTypeBinding requiredGenericCast = getGenericCast(this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length);", "+\t\t\t\tif (valueRequired  ", "+\t\t\t\t\t\t|| (!isFirst && currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4)", "+\t\t\t\t\t\t|| ((this.implicitConversion & TypeIds.UNBOXING) != 0)", "+\t\t\t\t\t\t|| requiredGenericCast != null) {", "+\t\t\t\t\tint lastFieldPc = codeStream.position;", "+\t\t\t\t\tif (lastFieldBinding.declaringClass == null) { // array length", "+\t\t\t\t\t\tcodeStream.arraylength();", "+\t\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// could occur if !valueRequired but compliance >= 1.4", "+\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tSyntheticMethodBinding accessor =", "+\t\t\t\t\t\t\tthis.syntheticReadAccessors == null", "+\t\t\t\t\t\t\t\t? null", "+\t\t\t\t\t\t\t\t: this.syntheticReadAccessors[this.syntheticReadAccessors.length - 1];", "+\t\t\t\t\t\tif (accessor == null) {", "+\t\t\t\t\t\t\tif (isStatic) {", "+\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (requiredGenericCast != null) codeStream.checkcast(requiredGenericCast);", "+\t\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tboolean isUnboxing = (this.implicitConversion & TypeIds.UNBOXING) != 0;", "+\t\t\t\t\t\t\t// conversion only generated if unboxing", "+\t\t\t\t\t\t\tif (isUnboxing) codeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t\tswitch (isUnboxing ? postConversionType(currentScope).id : lastFieldBinding.type.id) {", "+\t\t\t\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\t\t\t\tcodeStream.pop2();", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\tint fieldPosition = (int) (this.sourcePositions[this.sourcePositions.length - 1] >>> 32);", "+\t\t\t\t\tcodeStream.recordPositionsFrom(lastFieldPc, fieldPosition);", "+\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.invokeObjectGetClass();", "+\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\t\tif (valueRequired) { // inline the last field constant", "-\t\t\t\t\t\tcodeStream.generateConstant(fieldConstant, implicitConversion);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tboolean isFirst = lastFieldBinding == this.binding ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t&& (this.indexOfFirstFieldBinding == 1 || lastFieldBinding.declaringClass == currentScope.enclosingReceiverType())", "-\t\t\t\t\t\t\t\t\t\t\t\t\t&& this.otherBindings == null; // could be dup: next.next.next", "-\t\t\t\t\tTypeBinding requiredGenericCast = getGenericCast(this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length);", "-\t\t\t\t\tif (valueRequired  ", "-\t\t\t\t\t\t\t|| (!isFirst && currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4)", "-\t\t\t\t\t\t\t|| ((implicitConversion & TypeIds.UNBOXING) != 0)", "-\t\t\t\t\t\t\t|| requiredGenericCast != null) {", "-\t\t\t\t\t\tint lastFieldPc = codeStream.position;", "-\t\t\t\t\t\tif (lastFieldBinding.declaringClass == null) { // array length", "-\t\t\t\t\t\t\tcodeStream.arraylength();", "-\t\t\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t// could occur if !valueRequired but compliance >= 1.4", "-\t\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tSyntheticMethodBinding accessor =", "-\t\t\t\t\t\t\t\tsyntheticReadAccessors == null", "-\t\t\t\t\t\t\t\t\t? null", "-\t\t\t\t\t\t\t\t\t: syntheticReadAccessors[syntheticReadAccessors.length - 1];", "-\t\t\t\t\t\t\tif (accessor == null) {", "-\t\t\t\t\t\t\t\tif (isStatic) {", "-\t\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (requiredGenericCast != null) codeStream.checkcast(requiredGenericCast);", "-\t\t\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tboolean isUnboxing = (implicitConversion & TypeIds.UNBOXING) != 0;", "-\t\t\t\t\t\t\t\t// conversion only generated if unboxing", "-\t\t\t\t\t\t\t\tif (isUnboxing) codeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t\t\t\tswitch (isUnboxing ? postConversionType(currentScope).id : lastFieldBinding.type.id) {", "-\t\t\t\t\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\t\t\t\tcase T_double :", "-\t\t\t\t\t\t\t\t\t\tcodeStream.pop2();", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tdefault :", "-\t\t\t\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tint fieldPosition = (int) (this.sourcePositions[this.sourcePositions.length - 1] >>> 32);", "-\t\t\t\t\t\tcodeStream.recordPositionsFrom(lastFieldPc, fieldPosition);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (!isStatic){", "-\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}\t\t\t\t\t\t\t\t\t", "-\t\t\t\t}", "+\t\t\t\t}\t\t\t\t\t\t\t\t\t", "-\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+}"]}], "num": 62494}
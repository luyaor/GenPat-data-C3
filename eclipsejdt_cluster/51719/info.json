{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6755e2082b2c13da109df496d73fe3eb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14b23b94d223a54491b62ed3e7e4b57d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PotentialMatch.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void locateMatchesInClassFile() throws CoreException", "signatureAfterChange": " public void locateMatchesInClassFile() throws CoreException", "diff": ["-\t */", "-\tpublic void locateMatchesInClassFile() throws CoreException {", "-\t\torg.eclipse.jdt.internal.core.ClassFile classFile = (org.eclipse.jdt.internal.core.ClassFile)this.openable;", "-\t\tIBinaryType info = this.locator.getBinaryInfo(classFile, this.resource);", "-\t\tif (info == null) ", "-\t\t\treturn; // unable to go further", "-\t", "-\t\t// check class definition", "-\t\tBinaryType binaryType = (BinaryType)classFile.getType();", "-\t\tif (this.locator.pattern.matchesBinary(info, null)) {", "-\t\t\tthis.locator.reportBinaryMatch(binaryType, info, IJavaSearchResultCollector.EXACT_MATCH);", "-\t\t}", "-\t", "-\t\tboolean compilationAborted = false;", "-\t\tif (this.locator.pattern.mustResolve) {", "-\t\t\t// resolve", "-\t\t\tBinaryTypeBinding binding = null;", "-\t\t\t\tbinding = this.locator.cacheBinaryType(binaryType);", "-\t\t\t\tif (binding != null) {", "-\t\t\t\t\t// filter out element not in hierarchy scope", "-\t\t\t\t\tif (!this.locator.typeInHierarchy(binding)) {", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t", "-\t\t\t\t\t// check methods", "-\t\t\t\t\tMethodBinding[] methods = binding.methods();", "-\t\t\t\t\tfor (int i = 0; i < methods.length; i++) {", "-\t\t\t\t\t\tMethodBinding method = methods[i];", "-\t\t\t\t\t\tint level = this.locator.pattern.matchLevel(method);", "-\t\t\t\t\t\tswitch (level) {", "-\t\t\t\t\t\t\tcase SearchPattern.IMPOSSIBLE_MATCH:", "-\t\t\t\t\t\t\tcase SearchPattern.INACCURATE_MATCH:", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\tIMethod methodHandle = ", "-\t\t\t\t\t\t\t\t\tbinaryType.getMethod(", "-\t\t\t\t\t\t\t\t\t\tnew String(method.isConstructor() ? binding.compoundName[binding.compoundName.length-1] : method.selector),", "-\t\t\t\t\t\t\t\t\t\tSignature.getParameterTypes(new String(method.signature()).replace('/', '.'))", "-\t\t\t\t\t\t\t\t\t);", "-\t\t\t\t\t\t\t\tthis.locator.reportBinaryMatch(", "-\t\t\t\t\t\t\t\t\tmethodHandle, ", "-\t\t\t\t\t\t\t\t\tinfo, ", "-\t\t\t\t\t\t\t\t\tlevel == SearchPattern.ACCURATE_MATCH ? ", "-\t\t\t\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH : ", "-\t\t\t\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t", "-\t\t\t\t\t// check fields", "-\t\t\t\t\tFieldBinding[] fields = binding.fields();", "-\t\t\t\t\tfor (int i = 0; i < fields.length; i++) {", "-\t\t\t\t\t\tFieldBinding field = fields[i];", "-\t\t\t\t\t\tint level = this.locator.pattern.matchLevel(field);", "-\t\t\t\t\t\tswitch (level) {", "-\t\t\t\t\t\t\tcase SearchPattern.IMPOSSIBLE_MATCH:", "-\t\t\t\t\t\t\tcase SearchPattern.INACCURATE_MATCH:", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\tIField fieldHandle = binaryType.getField(new String(field.name));", "-\t\t\t\t\t\t\t\tthis.locator.reportBinaryMatch(", "-\t\t\t\t\t\t\t\t\tfieldHandle, ", "-\t\t\t\t\t\t\t\t\tinfo, ", "-\t\t\t\t\t\t\t\t\tlevel == SearchPattern.ACCURATE_MATCH ? ", "-\t\t\t\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH : ", "-\t\t\t\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t\t\t\t}", "+ */", "+public void locateMatchesInClassFile() throws CoreException {", "+\tMatchLocator locator = this.matchingNodeSet.locator;", "+\torg.eclipse.jdt.internal.core.ClassFile classFile = (org.eclipse.jdt.internal.core.ClassFile) this.openable;", "+\tIBinaryType info = locator.getBinaryInfo(classFile, this.resource);", "+\tif (info == null) return; // unable to go further", "+", "+\t// check class definition", "+\tSearchPattern pattern = locator.pattern;", "+\tBinaryType binaryType = (BinaryType) classFile.getType();", "+\tif (pattern.matchesBinary(info, null))", "+\t\tlocator.reportBinaryMatch(binaryType, info, IJavaSearchResultCollector.EXACT_MATCH);", "+", "+\tint accuracy = IJavaSearchResultCollector.EXACT_MATCH;", "+\tif (pattern.mustResolve) {", "+\t\ttry {", "+\t\t\tBinaryTypeBinding binding = locator.cacheBinaryType(binaryType);", "+\t\t\tif (binding != null) {", "+\t\t\t\t// filter out element not in hierarchy scope", "+\t\t\t\tif (!locator.typeInHierarchy(binding)) return;", "+", "+\t\t\t\tMethodBinding[] methods = binding.methods();", "+\t\t\t\tfor (int i = 0, l = methods.length; i < l; i++) {", "+\t\t\t\t\tMethodBinding method = methods[i];", "+\t\t\t\t\tint level = pattern.matchLevel(method);", "+\t\t\t\t\tif (level >= SearchPattern.POTENTIAL_MATCH) {", "+\t\t\t\t\t\tIMethod methodHandle = binaryType.getMethod(", "+\t\t\t\t\t\t\tnew String(method.isConstructor() ? binding.compoundName[binding.compoundName.length-1] : method.selector),", "+\t\t\t\t\t\t\tSignature.getParameterTypes(new String(method.signature()).replace('/', '.')));", "+\t\t\t\t\t\tlocator.reportBinaryMatch(", "+\t\t\t\t\t\t\tmethodHandle, ", "+\t\t\t\t\t\t\tinfo, ", "+\t\t\t\t\t\t\tlevel == SearchPattern.ACCURATE_MATCH", "+\t\t\t\t\t\t\t\t? IJavaSearchResultCollector.EXACT_MATCH", "+\t\t\t\t\t\t\t\t: IJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t} catch (AbortCompilation e) {", "-\t\t\t\tbinding = null;", "+", "+\t\t\t\tFieldBinding[] fields = binding.fields();", "+\t\t\t\tfor (int i = 0, l = fields.length; i < l; i++) {", "+\t\t\t\t\tFieldBinding field = fields[i];", "+\t\t\t\t\tint level = pattern.matchLevel(field);", "+\t\t\t\t\tif (level >= SearchPattern.POTENTIAL_MATCH) {", "+\t\t\t\t\t\tIField fieldHandle = binaryType.getField(new String(field.name));", "+\t\t\t\t\t\tlocator.reportBinaryMatch(", "+\t\t\t\t\t\t\tfieldHandle, ", "+\t\t\t\t\t\t\tinfo, ", "+\t\t\t\t\t\t\tlevel == SearchPattern.ACCURATE_MATCH", "+\t\t\t\t\t\t\t\t? IJavaSearchResultCollector.EXACT_MATCH", "+\t\t\t\t\t\t\t\t: IJavaSearchResultCollector.POTENTIAL_MATCH);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\t// no need to check binary info since resolve was successful", "+\t\t\t\treturn;", "-\t", "-\t\t\t// no need to check binary info if resolve was successful", "-\t\t\tcompilationAborted = binding == null;", "-\t\t\tif (!compilationAborted) return;", "+\t\t} catch (AbortCompilation e) { // if compilation was aborted it is a problem with the class path", "-\t", "-\t\t// if compilation was aborted it is a problem with the class path: ", "-\t\t// report as a potential match if binary info matches the pattern", "-\t\tint accuracy = compilationAborted ? IJavaSearchResultCollector.POTENTIAL_MATCH : IJavaSearchResultCollector.EXACT_MATCH;", "-\t\t", "-\t\t// check methods", "-\t\tIBinaryMethod[] methods = info.getMethods();", "-\t\tint length = methods == null ? 0 : methods.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tIBinaryMethod method = methods[i];", "-\t\t\tif (this.locator.pattern.matchesBinary(method, info)) {", "-\t\t\t\tIMethod methodHandle = ", "-\t\t\t\t\tbinaryType.getMethod(", "-\t\t\t\t\t\tnew String(method.isConstructor() ? info.getName() : method.getSelector()),", "-\t\t\t\t\t\tSignature.getParameterTypes(new String(method.getMethodDescriptor()).replace('/', '.'))", "-\t\t\t\t\t);", "-\t\t\t\tthis.locator.reportBinaryMatch(methodHandle, info, accuracy);", "-\t\t\t}", "-\t\t}", "-\t", "-\t\t// check fields", "-\t\tIBinaryField[] fields = info.getFields();", "-\t\tlength = fields == null ? 0 : fields.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tIBinaryField field = fields[i];", "-\t\t\tif (this.locator.pattern.matchesBinary(field, info)) {", "-\t\t\t\tIField fieldHandle = binaryType.getField(new String(field.getName()));", "-\t\t\t\tthis.locator.reportBinaryMatch(fieldHandle, info, accuracy);", "-\t\t\t}", "-\t\t}", "-\t}", "+\t\t// report as a potential match if binary info matches the pattern\t\t", "+\t\taccuracy = IJavaSearchResultCollector.POTENTIAL_MATCH;", "+\tIBinaryMethod[] methods = info.getMethods();", "+\tif (methods != null) {", "+\t\tfor (int i = 0, l = methods.length; i < l; i++) {", "+\t\t\tIBinaryMethod method = methods[i];", "+\t\t\tif (pattern.matchesBinary(method, info)) {", "+\t\t\t\tIMethod methodHandle = binaryType.getMethod(", "+\t\t\t\t\tnew String(method.isConstructor() ? info.getName() : method.getSelector()),", "+\t\t\t\t\tSignature.getParameterTypes(new String(method.getMethodDescriptor()).replace('/', '.')));", "+\t\t\t\tlocator.reportBinaryMatch(methodHandle, info, accuracy);", "+\t\t\t}", "+\t\t}", "+\t}", "+", "+\tIBinaryField[] fields = info.getFields();", "+\tif (fields != null) {", "+\t\tfor (int i = 0, l = fields.length; i < l; i++) {", "+\t\t\tIBinaryField field = fields[i];", "+\t\t\tif (pattern.matchesBinary(field, info)) {", "+\t\t\t\tIField fieldHandle = binaryType.getField(new String(field.getName()));", "+\t\t\t\tlocator.reportBinaryMatch(fieldHandle, info, accuracy);", "+\t\t\t}", "+\t\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c69a2526ff20beb5041c8b660447d4a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void reportMatching(TypeDeclaration type, IJavaElement parent) throws CoreException", "signatureAfterChange": " public void reportMatching(TypeDeclaration type, IJavaElement parent) throws CoreException", "diff": ["-\t", "-\t// filter out element not in hierarchy scope", "-\tboolean typeInHierarchy = type.binding == null || this.locator.typeInHierarchy(type.binding);", "-\t", "-\t\tenclosingElement = this.locator.createTypeHandle((IType)parent, type.name);", "+\t\tenclosingElement = this.locator.createTypeHandle((IType) parent, type.name);", "-\tInteger level;", "-\t", "-\t// fields", "-\tFieldDeclaration[] fields = type.fields;", "-\tif (fields != null) {", "-\t\tfor (int i = 0; i < fields.length; i++) {", "-\t\t\tFieldDeclaration field = fields[i];", "-\t\t\tif ((level = (Integer)this.matchingNodes.remove(field)) != null", "-\t\t\t\t&& typeInHierarchy", "-\t\t\t\t&& (this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\t\tthis.locator.reportFieldDeclaration(", "-\t\t\t\t\t\tfield, ", "-\t\t\t\t\t\tenclosingElement, ", "-\t\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t}", "-\t\t\tthis.reportMatching(field, enclosingElement, type, typeInHierarchy);", "-\t\t}", "-\t}", "-", "-\t// methods", "-\tAbstractMethodDeclaration[] methods = type.methods;", "-\tif (methods != null) {", "-\t\tfor (int i = 0; i < methods.length; i++) {", "-\t\t\tAbstractMethodDeclaration method = methods[i];", "-\t\t\tif ((level = (Integer)this.matchingNodes.remove(method)) != null", "-\t\t\t\t&& typeInHierarchy", "-\t\t\t\t&& (this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\t\tthis.locator.reportMethodDeclaration(", "-\t\t\t\t\t\tmethod, ", "-\t\t\t\t\t\tenclosingElement, ", "-\t\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t}", "-\t\t\tthis.reportMatching(method, enclosingElement, typeInHierarchy);", "-\t\t}", "-\t}", "-", "-\t// member types", "-\tMemberTypeDeclaration[] memberTypes = type.memberTypes;", "-\tif (memberTypes != null) {", "-\t\tfor (int i = 0; i < memberTypes.length; i++) {", "-\t\t\tMemberTypeDeclaration memberType = memberTypes[i];", "-\t\t\tif ((level = (Integer)this.matchingNodes.remove(memberType)) != null", "-\t\t\t\t&& typeInHierarchy", "-\t\t\t\t&& (this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\t\tthis.locator.reportTypeDeclaration(", "-\t\t\t\t\t\tmemberType, ", "-\t\t\t\t\t\tenclosingElement, ", "-\t\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t}", "-\t\t\tthis.reportMatching(memberType, enclosingElement);", "-\t\t}", "-\t}", "-\t\tTypeReference superType = ((AnonymousLocalTypeDeclaration)type).allocation.type;", "-\t\tif (superType != null && (level = (Integer)this.matchingNodes.remove(superType)) != null) {", "-\t\t\tif ((this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\tthis.locator.reportSuperTypeReference(", "-\t\t\t\t\tsuperType, ", "-\t\t\t\t\tenclosingElement, ", "-\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t}", "+\t\tTypeReference superType = ((AnonymousLocalTypeDeclaration) type).allocation.type;", "+\t\tif (superType != null) {", "+\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(superType);", "+\t\t\tif (level != null && (this.matchContainer & SearchPattern.CLASS) != 0)", "+\t\t\t\tthis.locator.reportSuperTypeReference(superType, enclosingElement, level.intValue());", "-\t\tif (superClass != null && (level = (Integer)this.matchingNodes.remove(superClass)) != null) {", "-\t\t\tif ((this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\tthis.locator.reportSuperTypeReference(", "-\t\t\t\t\tsuperClass, ", "-\t\t\t\t\tenclosingElement, ", "-\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t}", "+\t\tif (superClass != null) {", "+\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(superClass);", "+\t\t\tif (level != null && (this.matchContainer & SearchPattern.CLASS) != 0)", "+\t\t\t\tthis.locator.reportSuperTypeReference(superClass, enclosingElement, level.intValue());", "-\t\t\tfor (int i = 0; i < superInterfaces.length; i++) {", "+\t\t\tfor (int i = 0, l = superInterfaces.length; i < l; i++) {", "-\t\t\t\tif ((level = (Integer)this.matchingNodes.get(superInterface)) != null) {", "-\t\t\t\t\tif ((this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\t\t\tthis.locator.reportSuperTypeReference(", "-\t\t\t\t\t\t\tsuperInterface, ", "-\t\t\t\t\t\t\tenclosingElement, ", "-\t\t\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(superInterface);", "+\t\t\t\tif (level != null && (this.matchContainer & SearchPattern.CLASS) != 0)", "+\t\t\t\t\tthis.locator.reportSuperTypeReference(superInterface, enclosingElement, level.intValue());", "+\t\t}", "+\t}", "+", "+\t// filter out element not in hierarchy scope", "+\tboolean typeInHierarchy = type.binding == null || this.locator.typeInHierarchy(type.binding);", "+", "+\tFieldDeclaration[] fields = type.fields;", "+\tif (fields != null) {", "+\t\tif (this.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\tfor (int i = 0, l = fields.length; i < l; i++) {", "+\t\t\tFieldDeclaration field = fields[i];", "+\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(field);", "+\t\t\tif (level != null && typeInHierarchy && (this.matchContainer & SearchPattern.CLASS) != 0)", "+\t\t\t\tthis.locator.reportFieldDeclaration(field, enclosingElement, level.intValue());", "+\t\t\treportMatching(field, enclosingElement, type, typeInHierarchy);", "+\t\t}", "+\t}", "+", "+\tAbstractMethodDeclaration[] methods = type.methods;", "+\tif (methods != null) {", "+\t\tif (this.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\tfor (int i = 0, l = methods.length; i < l; i++) {", "+\t\t\tAbstractMethodDeclaration method = methods[i];", "+\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(method);", "+\t\t\tif (level != null && typeInHierarchy && (this.matchContainer & SearchPattern.CLASS) != 0)", "+\t\t\t\tthis.locator.reportMethodDeclaration(method, enclosingElement, level.intValue());", "+\t\t\treportMatching(method, enclosingElement, typeInHierarchy);", "+\t\t}", "+\t}", "+", "+\tMemberTypeDeclaration[] memberTypes = type.memberTypes;", "+\tif (memberTypes != null) {", "+\t\tfor (int i = 0, l = memberTypes.length; i < l; i++) {", "+\t\t\tif (this.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\t\tMemberTypeDeclaration memberType = memberTypes[i];", "+\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(memberType);", "+\t\t\tif (level != null && typeInHierarchy && (this.matchContainer & SearchPattern.CLASS) != 0)", "+\t\t\t\tthis.locator.reportTypeDeclaration(memberType, enclosingElement, level.intValue());", "+\t\t\treportMatching(memberType, enclosingElement);"]}], "num": 51719}
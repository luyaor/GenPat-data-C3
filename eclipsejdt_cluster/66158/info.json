{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "87b961a80883e6263d7d125c0fe91f3b", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a0ecd7fc70106f6d20008c29efe065c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type)", "signatureAfterChange": "\r protected boolean matchesType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type)", "diff": ["+ */\r", "+protected boolean matchesType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type) {\r", "+\tif (enclosingNamePattern == null) {\r", "+\t\treturn this.matchesType(simpleNamePattern, qualificationPattern, type);\r", "+\t} else {\r", "+\t\tchar[] pattern;\r", "+\t\tif (qualificationPattern == null) {\r", "+\t\t\treturn matchesType(simpleNamePattern, enclosingNamePattern, type);\r", "+\t\t} else {\r", "+\t\t\t// pattern was created from a Java element: qualification is the package name.\r", "+\t\t\tchar[] fullQualificationPattern = CharOperation.concat(qualificationPattern, enclosingNamePattern, '.');\r", "+\t\t\treturn \r", "+\t\t\t\tthis.matchesType(simpleNamePattern, fullQualificationPattern, type)\r", "+\t\t\t\t&& CharOperation.equals(qualification, CharOperation.concatWith(type.getPackage().compoundName, '.'));\r", "+\t\t}\r", "- */\r", "-protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type) {\r", "-\tif (enclosingNamePattern == null) {\r", "-\t\treturn this.matchLevelForType(simpleNamePattern, qualificationPattern, type);\r", "-\t} else {\r", "-\t\tchar[] pattern;\r", "-\t\tif (qualificationPattern == null) {\r", "-\t\t\treturn matchLevelForType(simpleNamePattern, enclosingNamePattern, type);\r", "-\t\t} else {\r", "-\t\t\t// pattern was created from a Java element: qualification is the package name.\r", "-\t\t\tchar[] fullQualificationPattern = CharOperation.concat(qualificationPattern, enclosingNamePattern, '.');\r", "-\t\t\tif ( CharOperation.equals(qualification, CharOperation.concatWith(type.getPackage().compoundName, '.'))) {\r", "-\t\t\t\treturn this.matchLevelForType(simpleNamePattern, fullQualificationPattern, type);\r", "-\t\t\t} else {\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1e812c5c4cd57c8fe1eec424e1a5b61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type)", "signatureAfterChange": "\r protected boolean matchesType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type)", "diff": ["+ */\r", "+protected boolean matchesType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type) {\r", "+\tif (enclosingNamePattern == null) {\r", "+\t\treturn this.matchesType(simpleNamePattern, qualificationPattern, type);\r", "+\t} else {\r", "+\t\tchar[] pattern;\r", "+\t\tif (qualificationPattern == null) {\r", "+\t\t\treturn matchesType(simpleNamePattern, enclosingNamePattern, type);\r", "+\t\t} else {\r", "+\t\t\t// pattern was created from a Java element: qualification is the package name.\r", "+\t\t\tchar[] fullQualificationPattern = CharOperation.concat(qualificationPattern, enclosingNamePattern, '.');\r", "+\t\t\treturn \r", "+\t\t\t\tthis.matchesType(simpleNamePattern, fullQualificationPattern, type)\r", "+\t\t\t\t&& CharOperation.equals(qualification, CharOperation.concatWith(type.getPackage().compoundName, '.'));\r", "+\t\t}\r", "- */\r", "-protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, char[] enclosingNamePattern, TypeBinding type) {\r", "-\tif (enclosingNamePattern == null) {\r", "-\t\treturn this.matchLevelForType(simpleNamePattern, qualificationPattern, type);\r", "-\t} else {\r", "-\t\tchar[] pattern;\r", "-\t\tif (qualificationPattern == null) {\r", "-\t\t\treturn matchLevelForType(simpleNamePattern, enclosingNamePattern, type);\r", "-\t\t} else {\r", "-\t\t\t// pattern was created from a Java element: qualification is the package name.\r", "-\t\t\tchar[] fullQualificationPattern = CharOperation.concat(qualificationPattern, enclosingNamePattern, '.');\r", "-\t\t\tif ( CharOperation.equals(qualification, CharOperation.concatWith(type.getPackage().compoundName, '.'))) {\r", "-\t\t\t\treturn this.matchLevelForType(simpleNamePattern, fullQualificationPattern, type);\r", "-\t\t\t} else {\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r"]}], "num": 66158}
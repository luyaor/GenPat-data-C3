{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3f7772005fb374b0e23ee21b22f1425", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6940de2d88e1ddcd581a4ea2b1310604", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "542ce5451500fe1306b92aaa9a7c04d8d83f7f3f", "commitAfterChange": "9cbf7e62288f060b33b2dc1c1d579dae84747012", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["-\t\t\t\t\t\tfindMethods(this.completionToken,null,null,enclosingType,scope,new ObjectVector(),false,false,true,null,null,false,false,true);", "+\t\t\t\t\t\tfindMethods(this.completionToken,null,null,enclosingType,scope,new ObjectVector(),false,false,true,null,null,false,false,true,null, null, null);", "-\t\t\t\t\t\tfindMethods(this.completionToken,null,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false,false,true);", "+\t\t\t\t\t\tfindMethods(this.completionToken,null,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false,false,true,null, null, null);", "-\t\t\tif (qualifiedBinding instanceof VariableBinding) {", "-", "+\t\t\tif (qualifiedBinding.problemId() == ProblemReasons.NotFound) {", "+\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "+\t\t\t\t// complete field members with missing fields type", "+\t\t\t\t// class X {", "+\t\t\t\t//   Missing f;", "+\t\t\t\t//   void foo() {", "+\t\t\t\t//     f.|", "+\t\t\t\t//   }", "+\t\t\t\t// }", "+\t\t\t\tif (this.assistNodeInJavadoc == 0 &&", "+\t\t\t\t\t\tthis.requestor.isAllowingRequiredProposals(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\tif(ref.tokens.length == 1) {", "+\t\t\t\t\t\tfindFieldsAndMethodsFromMissingFieldType(ref.tokens[0], scope, ref, insideTypeAnnotation);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (qualifiedBinding instanceof VariableBinding) {", "-\t\t\t\t\tfindFieldsAndMethods(this.completionToken, receiverType.capture(scope, ref.sourceEnd), scope, ref, scope,false,false);", "+\t\t\t\t\tfindFieldsAndMethods(this.completionToken, receiverType.capture(scope, ref.sourceEnd), scope, ref, scope,false,false, null, null, null);", "+\t\t\t\t} else if (this.assistNodeInJavadoc == 0 &&", "+\t\t\t\t\t\tthis.requestor.isAllowingRequiredProposals(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\tboolean proposeField = !this.requestor.isIgnored(CompletionProposal.FIELD_REF);", "+\t\t\t\t\tboolean proposeMethod = !this.requestor.isIgnored(CompletionProposal.METHOD_REF);", "+\t\t\t\t\tif (proposeField || proposeMethod) {", "+\t\t\t\t\t\tif (qualifiedBinding instanceof LocalVariableBinding) {", "+\t\t\t\t\t\t\t// complete local variable members with missing variables type", "+\t\t\t\t\t\t\t// class X {", "+\t\t\t\t\t\t\t//   void foo() {", "+\t\t\t\t\t\t\t//     Missing f;", "+\t\t\t\t\t\t\t//     f.|", "+\t\t\t\t\t\t\t//   }", "+\t\t\t\t\t\t\t// }", "+\t\t\t\t\t\t\tLocalVariableBinding localVariableBinding = (LocalVariableBinding) qualifiedBinding;", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tfindFieldsAndMethodsFromMissingType(", "+\t\t\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\t\t\tlocalVariableBinding.declaration.type,", "+\t\t\t\t\t\t\t\t\tlocalVariableBinding.declaringScope,", "+\t\t\t\t\t\t\t\t\tref,", "+\t\t\t\t\t\t\t\t\tscope);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull);", "-\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull);", "-\t\t\tif (!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "-\t\t\t\tfindKeywords(this.completionToken, new char[][]{Keywords.NEW}, false, false);", "+\t\t\tif (qualifiedBinding.problemId() == ProblemReasons.NotFound) {", "+\t\t\t\t// complete method members with missing return type", "+\t\t\t\t// class X {", "+\t\t\t\t//   Missing f() {return null;}", "+\t\t\t\t//   void foo() {", "+\t\t\t\t//     f().|", "+\t\t\t\t//   }", "+\t\t\t\t// }", "+\t\t\t\tif (this.assistNodeInJavadoc == 0 &&", "+\t\t\t\t\t\tthis.requestor.isAllowingRequiredProposals(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\tProblemMethodBinding problemMethodBinding = (ProblemMethodBinding) qualifiedBinding;\t\t\t\t", "+\t\t\t\t\tfindFieldsAndMethodsFromMissingReturnType(", "+\t\t\t\t\t\t\tproblemMethodBinding.selector,", "+\t\t\t\t\t\t\tproblemMethodBinding.parameters,", "+\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\taccess,", "+\t\t\t\t\t\t\tinsideTypeAnnotation);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\t\tfindKeywords(this.completionToken, new char[][]{Keywords.NEW}, false, false);", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tfindFieldsAndMethods(", "+\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t((TypeBinding) qualifiedBinding).capture(scope, access.receiver.sourceEnd),", "+\t\t\t\t\tscope,", "+\t\t\t\t\taccess,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tfalse,", "+\t\t\t\t\taccess.receiver instanceof SuperReference,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tnull);", "-\t\t\t", "-\t\t\tfindFieldsAndMethods(", "-\t\t\t\tthis.completionToken,", "-\t\t\t\t((TypeBinding) qualifiedBinding).capture(scope, access.receiver.sourceEnd),", "-\t\t\t\tscope,", "-\t\t\t\taccess,", "-\t\t\t\tscope,", "-\t\t\t\tfalse,", "-\t\t\t\taccess.receiver instanceof SuperReference);", "-\t\t\t\t\tfalse);", "+\t\t\t\t\tfalse,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tnull);", "-\t\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\tnull);", "-\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull);", "-\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull);", "-\t\t\t\t\tfindMethods(this.completionToken,", "+\t\t\t\t\tfindMethods(", "+\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1de5a78382eabae367089d7c12eea12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2e2135e23ec5738f13780e9b130faac2db0c376b", "commitAfterChange": "3d9ca5323b31c8907d129d4437482cfc3b641c64", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, ASTNode enclosingNode, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["-\tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation) {", "+\tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, ASTNode enclosingNode, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation) {", "-\t\t\t\t\t\tfindMethods(this.completionToken,null,null,enclosingType,scope,new ObjectVector(),false,false,true,null,null,false,false,true,null, null, null, false);", "+\t\t\t\t\t\tfindMethods(", "+\t\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\tenclosingType,", "+\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\tnew ObjectVector(),", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\t-1,", "+\t\t\t\t\t\t\t\t-1);", "-\t\t\t\t\t\tfindMethods(this.completionToken,null,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false,false,true,null, null, null, false);", "+\t\t\t\t\t\tfindMethods(", "+\t\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\t\tnull,null,", "+\t\t\t\t\t\t\t\tscope.enclosingSourceType(),", "+\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\tnew ObjectVector(),", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\t-1,", "+\t\t\t\t\t\t\t\t-1);", "-\t\t\t\t\tfindFieldsAndMethods(this.completionToken, receiverType.capture(scope, ref.sourceEnd), scope, ref, scope,false,false, null, null, null, false);", "+\t\t\t\t\tObjectVector fieldsFound = new ObjectVector();", "+\t\t\t\t\tObjectVector methodsFound = new ObjectVector();", "+\t\t\t\t\t", "+\t\t\t\t\tfindFieldsAndMethods(", "+\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\treceiverType.capture(scope, ref.sourceEnd),", "+\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\tfieldsFound,", "+\t\t\t\t\t\t\tmethodsFound,", "+\t\t\t\t\t\t\tref,", "+\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t-1,", "+\t\t\t\t\t\t\t-1);", "+\t\t\t\t\t", "+\t\t\t\t\tfindFieldsAndMethodsFromCastedReceiver(", "+\t\t\t\t\t\t\tenclosingNode,", "+\t\t\t\t\t\t\tqualifiedBinding,", "+\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\tfieldsFound,", "+\t\t\t\t\t\t\tmethodsFound,", "+\t\t\t\t\t\t\tref,", "+\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\tref);", "+\t\t\t\t\t", "+\t\t\t\t\tObjectVector fieldsFound = new ObjectVector();", "+\t\t\t\t\tObjectVector methodsFound = new ObjectVector();", "+\t\t\t\t\t", "+\t\t\t\t\tboolean superCall = access.receiver instanceof SuperReference;", "+\t\t\t\t\t", "+\t\t\t\t\t\tfieldsFound,", "+\t\t\t\t\t\tmethodsFound,", "-\t\t\t\t\t\taccess.receiver instanceof SuperReference,", "+\t\t\t\t\t\tsuperCall,", "-\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t-1,", "+\t\t\t\t\t\t-1);", "+\t\t\t\t\t", "+\t\t\t\t\tif (!superCall) {", "+\t\t\t\t\t\tfindFieldsAndMethodsFromCastedReceiver(", "+\t\t\t\t\t\t\t\tenclosingNode,", "+\t\t\t\t\t\t\t\tqualifiedBinding,", "+\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\tfieldsFound,", "+\t\t\t\t\t\t\t\tmethodsFound,", "+\t\t\t\t\t\t\t\taccess,", "+\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\taccess.receiver);", "+\t\t\t\t\t}", "-\t\t\t\t\tfalse);", "+\t\t\t\t\tfalse,", "+\t\t\t\t\tnull,", "+\t\t\t\t\t-1,", "+\t\t\t\t\t-1);", "-\t\t\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\t-1,", "+\t\t\t\t\t\t\t\t-1);", "-\t\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t-1,", "+\t\t\t\t\t\t\t-1);", "-\t\t\t\t\t\tfindMethods(this.completionToken,", "+\t\t\t\t\t\tfindMethods(", "+\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t-1,", "+\t\t\t\t\t\t\t-1);", "-\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t-1,", "+\t\t\t\t\t\t-1);", "+\t}"]}], "num": 52996}
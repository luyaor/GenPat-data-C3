{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a097c7fcebb86c8ecaab50368b04b199", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "319b22b27eefa7e447525c71a2838191", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTestsRequestor.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public CompletionTestsRequestor()", "signatureAfterChange": "  \tprivate void acceptCommon(CompletionProposal proposal)", "diff": ["- */", "-public CompletionTestsRequestor() {", "-\tsuper();", "-}", "+\tprivate void acceptCommon(CompletionProposal proposal) {", "+\t\tfCompletions.addElement(new String(proposal.getCompletion()));", "+\t\tfRelevances.addElement(String.valueOf(proposal.getRelevance()));", "+\t\tfCompletionStart.addElement(String.valueOf(proposal.getReplaceStart()));", "+\t\tfCompletionEnd.addElement(String.valueOf(proposal.getReplaceEnd()));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c87ccb7d812142ab2f744c9f76984cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingInsertBoundTest.java", "commitBeforeChange": "ce1a50c038f410b16a75eb29a8e1c64f33a61360", "commitAfterChange": "e0b71f0955015294aa51eae2753decb6574d6e98", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void testRemove4() throws Exception", "signatureAfterChange": "  \tpublic void testRemove4() throws Exception", "diff": ["+\t\tbuf.append(\"//c1\\n\");", "+\t\tbuf.append(\"\\n\");", "+\t\tbuf.append(\"    \\n\");", "+\t\tbuf.append(\"\\n\");", "+\t\tbuf.append(\"//c2\\n\");", "+\t\tbuf.append(\"\\n\");", "+\t\tbuf.append(\"    \\n\");", "+\t\tbuf.append(\"\\n\");", "+\t\tbuf.append(\"//c3\\n\");", "+\t\tbuf.append(\"\\n\");", "+\t\tbuf.append(\"    \\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be8210931c5bc8737bc97719815125d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "cafe24e04dba838f2a044f5841f2d59f6e1e413a", "commitAfterChange": "5bbb393ab48bb747308d33b821b44f27c0eaf2dd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "signatureAfterChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "diff": ["+\t\t\tbuffer.append(Util.bind(\"disassembler.commentstart\")); //$NON-NLS-1$", "+\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t\tbuffer.append(Util.bind(\"disassembler.begincommentline\"));\t\t\t //$NON-NLS-1$", "+\t\t\tif (minorVersion == 3 && majorVersion == 45) {", "+\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\", \" 1.1\"));//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t} else if (minorVersion == 0 && majorVersion == 46) {", "+\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\", \"1.2\"));//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t} else if (minorVersion == 0 && majorVersion == 47) {", "+\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\", \"1.3\"));//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t} else if (minorVersion == 0 && majorVersion == 48) {", "+\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\", \"1.4\"));//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t}", "+\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t\tbuffer.append(Util.bind(\"disassembler.begincommentline\"));\t\t\t //$NON-NLS-1$", "+\t\t\tbuffer.append(Util.bind(\"disassembler.begincommentline\"));\t\t\t //$NON-NLS-1$", "+\t\t\tbuffer.append(Util.bind(\"disassembler.begincommentline\"));\t\t\t //$NON-NLS-1$", "-\t\t\tif (minorVersion == 3 && majorVersion == 45) {", "-\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\") +\" 1.1\");//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t} else if (minorVersion == 0 && majorVersion == 46) {", "-\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\") + \"1.2\");//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t} else if (minorVersion == 0 && majorVersion == 47) {", "-\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\") + \"1.3\");//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t} else if (minorVersion == 0 && majorVersion == 48) {", "-\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\") + \"1.4\");//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t}", "-\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t\tbuffer.append(Util.bind(\"disassembler.commentend\")); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f44ff9a4c415652781d956d2b65a6ceb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/FactoryLoaderTests.java", "commitBeforeChange": "7177897be6073a1c35ee9a465aa5f0559da1bff1", "commitAfterChange": "3ef396e7cc3e0323aa7fad284fecd31681852465", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void testExternalJarLoader() throws Exception", "signatureAfterChange": " \t \tpublic void testExternalJarLoader() throws Exception", "diff": ["-\t\t// add _extJar to the factory list and rebuild.", "+\t\t// add _extJar to the factory list as an external jar, and rebuild.", "-\t\t// This file will be locked until GC takes care of unloading", "-\t\t// the annotation processor classes.", "-\t\t_extJar.deleteOnExit();", "+\t\t// add _extJar to the factory list as a class-path-relative jar, and rebuild.", "+\t\tifp.addVarJar(_extVarJar);", "+\t\tAptConfig.setFactoryPath(jproj, ifp);", "+\t\t", "+\t\t// rebuild and verify that the processor was loaded", "+\t\tLoaderTestAnnotationProcessor.clearLoaded();", "+\t\tfullBuild( project.getFullPath() );", "+\t\texpectingNoProblems();", "+\t\tassertTrue(LoaderTestAnnotationProcessor.isLoaded());", "+\t\t", "+\t\t// restore to the original", "+\t\tifp.removeVarJar(_extVarJar);", "+\t\tAptConfig.setFactoryPath(jproj, ifp);", "+\t\t", "+\t\t// rebuild and verify that the processor was not loaded.", "+\t\tLoaderTestAnnotationProcessor.clearLoaded();", "+\t\tfullBuild( project.getFullPath() );", "+\t\texpectingNoProblems();", "+\t\tassertFalse(LoaderTestAnnotationProcessor.isLoaded());", "+\t}"]}], "num": 15949}
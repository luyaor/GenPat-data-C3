{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb6d3ce3a1052c6c1f24fe2d89495455", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "117364b9c20006302afe238f1164da59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "c87413f1c3fa777cce7cb1df06542ffdf2ba70ba", "commitAfterChange": "dbb59802bd05ea277b4706afb85d6b75d5bdff2a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprivate void runAPTInFileBasedMode( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv, \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<char[]> sourceForFilesWithMissingType)", "signatureAfterChange": " \t \tprivate void runAPTInFileBasedMode( \t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tfinal ProcessorEnvImpl processorEnv, \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<ICompilationUnit> unitsForFilesWithMissingType)", "diff": ["-\t\t\tfinal List<AnnotationProcessorFactory> factories,", "+\t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories,", "-\t\t\tfinal List<char[]> sourceForFilesWithMissingType)", "+\t\t\tfinal List<ICompilationUnit> unitsForFilesWithMissingType)", "-\t\t\tfor (int factoryIndex = 0, numFactories = factories.size(); factoryIndex < numFactories; factoryIndex++) {", "-\t\t\t\tfinal AnnotationProcessorFactory factory = factories.get(factoryIndex);", "-\t\t\t\tif( isBatchFactory(factory) ) continue;", "+\t\t\tfor( Map.Entry<AnnotationProcessorFactory, FactoryPath.Attributes> entry : factories.entrySet() ){", "+\t\t\t\tif( entry.getValue().runInBatchMode() ) continue;", "+\t\t\t\tAnnotationProcessorFactory factory = entry.getKey();", "-\t\t\t\t\t\taddFileWithMissingTypeError(curFile, filesWithMissingType, sourceForFilesWithMissingType, processorEnv);", "+\t\t\t\t\t\taddFileWithMissingTypeError(curFile, filesWithMissingType, unitsForFilesWithMissingType, processorEnv);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d16f72319eb6bbbf188fcc6e05308f3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathJar.java", "commitBeforeChange": "88e5aa006a98c27f378a9ba9656ac196342e257f", "commitAfterChange": "80c078ddcf769ceb84a30bdd1354fc49a196e760", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": " \r \r NameEnvironmentAnswer findClass(char[] className, char[][] packageName)", "signatureAfterChange": " \r \r NameEnvironmentAnswer findClass(String binaryFileName, String qualifiedPackageName, String qualifiedBinaryFileName)", "diff": ["-NameEnvironmentAnswer findClass(char[] className, char[][] packageName) {\r", "-\tif (directoryCache == null) buildDirectoryStructure();\r", "-\ttry {\r", "-\t\tString binaryFilename =\r", "-\t\t\tNameEnvironment.assembleName(new String(className) + \".class\", packageName, '/'); //$NON-NLS-1$\r", "-\t\tif (zipFile.getEntry(binaryFilename) == null) return null;\r", "+NameEnvironmentAnswer findClass(String binaryFileName, String qualifiedPackageName, String qualifiedBinaryFileName) {\r", "+\tif (!isPackage(qualifiedPackageName)) return null; // most common case\r", "-\t\treturn new NameEnvironmentAnswer(ClassFileReader.read(zipFile, binaryFilename));\r", "-\t} catch (Exception e) {\r", "-\t\treturn null; // treat as if class file is missing\r", "-\t}\r", "+\ttry {\r", "+\t\tClassFileReader reader = ClassFileReader.read(zipFile, qualifiedBinaryFileName);\r", "+\t\tif (reader != null) return new NameEnvironmentAnswer(reader);\r", "+\t} catch (Exception e) {} // treat as if class file is missing\r", "+\treturn null;\r"]}], "num": 3858}
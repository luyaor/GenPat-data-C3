{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8354d9e829180882068a74f67c12ea30", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2362fb9b4343d292023b67c2abfac96c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "fccc3c9fd12b95c908b1566d2444bf312ceefff2", "commitAfterChange": "65db522775790e696e2711bd035a45d8d1048338", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["+", "-\t\t\t\t// copy the list, since single type imports are removed if they cannot be resolved", "-\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {", "-\t\t\t\t\tImportBinding typeImport = imports[i];", "-\t\t\t\t\tif (!typeImport.onDemand) {", "-\t\t\t\t\t\tif (CharOperation.equals(typeImport.compoundName[typeImport.compoundName.length - 1], name)) {", "-\t\t\t\t\t\t\tif (unitScope.resolveSingleTypeImport(typeImport) != null) {", "-\t\t\t\t\t\t\t\tImportReference importReference = typeImport.reference;", "-\t\t\t\t\t\t\t\tif (importReference != null) importReference.used = true;", "-\t\t\t\t\t\t\t\treturn typeImport.resolvedImport; // already know its visible", "+\t\t\t\tHashtableOfObject typeImports = unitScope.resolvedSingeTypeImports;", "+\t\t\t\tif (typeImports != null) {", "+\t\t\t\t\tImportBinding typeImport = (ImportBinding) typeImports.get(name);", "+\t\t\t\t\tif (typeImport != null) {", "+\t\t\t\t\t\tImportReference importReference = typeImport.reference;", "+\t\t\t\t\t\tif (importReference != null) importReference.used = true;", "+\t\t\t\t\t\treturn typeImport.resolvedImport; // already know its visible", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// walk all the imports since resolvedSingeTypeImports is not yet initialized", "+\t\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {", "+\t\t\t\t\t\tImportBinding typeImport = imports[i];", "+\t\t\t\t\t\tif (!typeImport.onDemand) {", "+\t\t\t\t\t\t\tif (CharOperation.equals(typeImport.compoundName[typeImport.compoundName.length - 1], name)) {", "+\t\t\t\t\t\t\t\tif (unitScope.resolveSingleTypeImport(typeImport) != null) {", "+\t\t\t\t\t\t\t\t\tImportReference importReference = typeImport.reference;", "+\t\t\t\t\t\t\t\t\tif (importReference != null) importReference.used = true;", "+\t\t\t\t\t\t\t\t\treturn typeImport.resolvedImport; // already know its visible", "+\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3260cc55468af3a77bbe8c5a6fb38147", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "4020c98214bab208cbde4dc18107a41e64955fa0", "commitAfterChange": "ee8bf0fe9fa07676924688b12f84c7853a8f35be", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void resolve(Openable[] openables, HashSet localTypes, IProgressMonitor monitor)", "signatureAfterChange": " public void resolve(Openable[] openables, HashSet localTypes, IProgressMonitor monitor)", "diff": ["-\t\tBinaryTypeBinding focusBinaryBinding = null;", "+\t\tReferenceBinding focusBinaryBinding = null;", "+\t\t", "+\t\t// if no potential subtype was a real subtype of the binary focus type, no need to go further", "+\t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=54043)", "+\t\tif (focusBinaryBinding == null && focus != null && focus.isBinary()) {", "+\t\t\tchar[] fullyQualifiedName = focus.getFullyQualifiedName().toCharArray();", "+\t\t\tfocusBinaryBinding = this.lookupEnvironment.getCachedType(CharOperation.splitOn('.', fullyQualifiedName));", "+\t\t\tif (focusBinaryBinding == null) return;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ba1c7c6c1498c2b417eedd5f4943097", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "785b5a5212732878b11204756fc2e20339845fb0", "commitAfterChange": "3d7bc61655a92c7c01b569228f267b1a98e25ce8", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": " public void fieldHiding(FieldDeclaration fieldDecl, Binding hiddenVariable)", "signatureAfterChange": " public void fieldHiding(FieldDeclaration fieldDecl, Binding hiddenVariable)", "diff": ["-\t\t\t\treturn; // do not report unused serialVersionUID field", "+\t\tReferenceBinding referenceBinding = field.declaringClass;", "+\t\tif (referenceBinding != null) {", "+\t\t\tif (referenceBinding.findSuperTypeOriginatingFrom(TypeIds.T_JavaIoSerializable, false /*Serializable is not a class*/) != null) {", "+\t\t\t\treturn; // do not report unused serialVersionUID field for class that implements Serializable", "+\t\t\t}", "+\t\t}", "-\t\t\t\treturn; // do not report unused serialPersistentFields field", "+\t\tReferenceBinding referenceBinding = field.declaringClass;", "+\t\tif (referenceBinding != null) {", "+\t\t\tif (referenceBinding.findSuperTypeOriginatingFrom(TypeIds.T_JavaIoSerializable, false /*Serializable is not a class*/) != null) {", "+\t\t\t\treturn; // do not report unused serialVersionUID field for class that implements Serializable", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "960d45deba2af278886b70417ab07953", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PotentialMatch.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic char[] getContents()", "signatureAfterChange": " public char[] getContents()", "diff": ["+}", "+public char[] getContents() {", "+\tchar[] source = null;", "+\ttry {", "+\t\tif (this.openable instanceof CompilationUnit) {", "+\t\t\tif (((CompilationUnit) this.openable).isWorkingCopy()) {", "+\t\t\t\tIBuffer buffer = this.openable.getBuffer();", "+\t\t\t\tif (buffer == null) return null;", "+\t\t\t\tsource = buffer.getCharacters();", "+\t\t\t} else {", "+\t\t\t\tsource = Util.getResourceContentsAsCharArray((IFile) this.resource);", "+\t\t} else if (this.openable instanceof ClassFile) {", "+\t\t\t\tString fileName = getSourceFileName();", "+\t\t\t\tif (fileName == NO_SOURCE_FILE_NAME) return null;", "+", "+\t\t\t\tIType type = ((ClassFile) this.openable).getType();", "+\t} catch (JavaModelException e) {", "-\tpublic char[] getContents() {", "-\t\tchar[] source = null;", "-\t\ttry {", "-\t\t\tif (this.openable instanceof CompilationUnit) {", "-\t\t\t\tif (((CompilationUnit)this.openable).isWorkingCopy()) {", "-\t\t\t\t\tIBuffer buffer = this.openable.getBuffer();", "-\t\t\t\t\tif (buffer == null) return null;", "-\t\t\t\t\tsource = buffer.getCharacters();", "-\t\t\t\t} else {", "-\t\t\t\t\tsource = Util.getResourceContentsAsCharArray((IFile)this.resource);", "-\t\t\t\t}", "-\t\t\t} else if (this.openable instanceof ClassFile) {", "-\t\t\t\tsource = findClassFileSource();", "-\t\t\t}", "-\t\t} catch (JavaModelException e) {", "-\t\t}", "-\t\tif (source == null) return CharOperation.NO_CHAR;", "-\t\treturn source;", "-\t}", "+\tif (source == null) return CharOperation.NO_CHAR;", "+\treturn source;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbc9330ac8534fee13cdef2d3625a404", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "b17f0033873962e79cd540a0937b76249dec8a6c", "commitAfterChange": "360e136a8e044225071869fa38d7072ea1d3cdac", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " private void reportHierarchy()", "signatureAfterChange": " private void reportHierarchy()", "diff": ["+}", "+private void reportHierarchy() {", "+\t", "+\t// set focus type binding", "+\tIType focus = this.requestor.getType();", "+\tif (focus != null) {", "+\t\tMember declaringMember = ((Member)focus).getOuterMostLocalContext();", "+\t\tif (declaringMember == null) {", "+\t\t\t// top level or member type", "+\t\t\tchar[] fullyQualifiedName = focus.getFullyQualifiedName().toCharArray();", "+\t\t\tsetFocusType(CharOperation.splitOn('.', fullyQualifiedName));", "-}", "-private void reportHierarchy() {"]}], "num": 64416}
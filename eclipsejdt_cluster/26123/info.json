{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a329f6e048f10362d9f77f07b4b8d81", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e49cdf1d7ce49519fddc0b01620b404", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "4119a65befb0f1b826133c8b40790cea36510774", "commitAfterChange": "199c84f2cae998bf19dec5ba0cb5f860d990b3fa", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void testSearchAllTypeNameMatches() throws CoreException", "signatureAfterChange": " \tpublic void testSearchAllTypeNameMatches() throws CoreException", "diff": ["-\t\tnew SearchEngine().searchAllTypeNames(", "-\t\t\tnull,", "-\t\t\tSearchPattern.R_PATTERN_MATCH | SearchPattern.R_CASE_SENSITIVE,", "-\t\t\tnull,", "-\t\t\tSearchPattern.R_PATTERN_MATCH | SearchPattern.R_CASE_SENSITIVE,", "-\t\t\tIJavaSearchConstants.TYPE,", "-\t\t\tscope, ", "-\t\t\trequestor,", "-\t\t\tWAIT_UNTIL_READY_TO_SEARCH,", "-\t\t\tnull);", "-\t\tNumberFormat intFormat = NumberFormat.getIntegerInstance();", "-\t\tSystem.out.println(\"\tAll type names = \"+intFormat.format(requestor.count));", "-\t\tif (SEARCH_ALL_TYPE_NAMES_COUNT == -1) {", "-\t\t\tSEARCH_ALL_TYPE_NAMES_COUNT = requestor.count;", "-\t\t} else {", "-\t\t\tassertEquals(\"We should find same number of types in the workspace whatever the search method is!\", SEARCH_ALL_TYPE_NAMES_COUNT, requestor.count);", "+\t\tfor (int i=0 ; i<WARMUP_COUNT; i++) {", "+\t\t\tnew SearchEngine().searchAllTypeNames(", "+\t\t\t\tnull,", "+\t\t\t\tSearchPattern.R_PATTERN_MATCH | SearchPattern.R_CASE_SENSITIVE,", "+\t\t\t\tnull,", "+\t\t\t\tSearchPattern.R_PATTERN_MATCH | SearchPattern.R_CASE_SENSITIVE,", "+\t\t\t\tIJavaSearchConstants.TYPE,", "+\t\t\t\tscope, ", "+\t\t\t\trequestor,", "+\t\t\t\tWAIT_UNTIL_READY_TO_SEARCH,", "+\t\t\t\tnull);", "+\t\t\tif (i == 0) {", "+\t\t\t\tSystem.out.println(\"\tAll type names = \"+INT_FORMAT.format(requestor.count));", "+\t\t\t\tif (SEARCH_ALL_TYPE_NAMES_COUNT == -1) {", "+\t\t\t\t\tSEARCH_ALL_TYPE_NAMES_COUNT = requestor.count;", "+\t\t\t\t} else {", "+\t\t\t\t\tassertEquals(\"We should find same number of types in the workspace whatever the search method is!\", SEARCH_ALL_TYPE_NAMES_COUNT, requestor.count);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69b9e6ac10599d7230b5c6cff7faec6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "4119a65befb0f1b826133c8b40790cea36510774", "commitAfterChange": "199c84f2cae998bf19dec5ba0cb5f860d990b3fa", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void testNewSearchAllTypeNames() throws CoreException", "signatureAfterChange": " \tpublic void testNewSearchAllTypeNames() throws CoreException", "diff": ["-\t\ttagAsSummary(\"Cold search all type names\", true); // put in fingerprint", "+\t\ttagAsSummary(\"Cold search all type names\", true);\t// put in fingerprint", "-\t\tnew SearchEngine().searchAllTypeNames(", "-\t\t\tnull,", "-\t\t\tSearchPattern.R_PATTERN_MATCH | SearchPattern.R_CASE_SENSITIVE,", "-\t\t\tnull,", "-\t\t\tSearchPattern.R_PATTERN_MATCH | SearchPattern.R_CASE_SENSITIVE,", "-\t\t\tIJavaSearchConstants.TYPE,", "-\t\t\tscope, ", "-\t\t\trequestor,", "-\t\t\tWAIT_UNTIL_READY_TO_SEARCH,", "-\t\t\tnull);", "-\t\tNumberFormat intFormat = NumberFormat.getIntegerInstance();", "-\t\tSystem.out.println(\"\tAll type names = \"+intFormat.format(requestor.count));", "-\t\tif (SEARCH_ALL_TYPE_NAMES_COUNT == -1) {", "-\t\t\tSEARCH_ALL_TYPE_NAMES_COUNT = requestor.count;", "-\t\t} else {", "-\t\t\tassertEquals(\"We should find same number of types in the workspace whatever the search method is!\", SEARCH_ALL_TYPE_NAMES_COUNT, requestor.count);", "+\t\tfor (int i=0 ; i<WARMUP_COUNT; i++) {", "+\t\t\tnew SearchEngine().searchAllTypeNames(", "+\t\t\t\tnull,", "+\t\t\t\tSearchPattern.R_PATTERN_MATCH | SearchPattern.R_CASE_SENSITIVE,", "+\t\t\t\tnull,", "+\t\t\t\tSearchPattern.R_PATTERN_MATCH | SearchPattern.R_CASE_SENSITIVE,", "+\t\t\t\tIJavaSearchConstants.TYPE,", "+\t\t\t\tscope, ", "+\t\t\t\trequestor,", "+\t\t\t\tWAIT_UNTIL_READY_TO_SEARCH,", "+\t\t\t\tnull);", "+\t\t\tif (i == 0) {", "+\t\t\t\tSystem.out.println(\"\tAll type names = \"+INT_FORMAT.format(requestor.count));", "+\t\t\t\tif (SEARCH_ALL_TYPE_NAMES_COUNT == -1) {", "+\t\t\t\t\tSEARCH_ALL_TYPE_NAMES_COUNT = requestor.count;", "+\t\t\t\t} else {", "+\t\t\t\t\tassertEquals(\"We should find same number of types in the workspace whatever the search method is!\", SEARCH_ALL_TYPE_NAMES_COUNT, requestor.count);", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 26123}
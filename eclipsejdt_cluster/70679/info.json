{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2cb1a54b7c8b0adf28f924699efd72f8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "320cd4154ac38ecf50b2094ba5d54b9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "538c0b31c8df84049489b5a401103859bb5eec8f", "commitAfterChange": "16b28f2f33ec894bf25a38e03f521a91d92e684d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\t\t/* convert type parameters */", "-\t\tchar[][] typeParameterNames = methodInfo.getTypeParameterNames();", "+\t\t// convert 1.5 specific constructs only if compliance is 1.5 or above", "-\t\tif (typeParameterNames != null) {", "-\t\t\tint parameterCount = typeParameterNames.length;", "-\t\t\tif (parameterCount > 0) { // method's type parameters must be null if no type parameter", "-\t\t\t\tchar[][][] typeParameterBounds = methodInfo.getTypeParameterBounds();", "-\t\t\t\ttypeParams = new TypeParameter[parameterCount];", "-\t\t\t\tfor (int i = 0; i < parameterCount; i++) {", "-\t\t\t\t\ttypeParams[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);", "+\t\tif (this.has1_5Compliance) {", "+\t\t\t/* convert type parameters */", "+\t\t\tchar[][] typeParameterNames = methodInfo.getTypeParameterNames();", "+\t\t\tif (typeParameterNames != null) {", "+\t\t\t\tint parameterCount = typeParameterNames.length;", "+\t\t\t\tif (parameterCount > 0) { // method's type parameters must be null if no type parameter", "+\t\t\t\t\tchar[][][] typeParameterBounds = methodInfo.getTypeParameterBounds();", "+\t\t\t\t\ttypeParams = new TypeParameter[parameterCount];", "+\t\t\t\t\tfor (int i = 0; i < parameterCount; i++) {", "+\t\t\t\t\t\ttypeParams[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);", "+\t\t\t\t\t}", "-\t\t/* convert annotations */", "-\t\tmethod.annotations = convertAnnotations(methodHandle);", "+\t\t// convert 1.5 specific constructs only if compliance is 1.5 or above", "+\t\tif (this.has1_5Compliance) {", "+\t\t\t/* convert annotations */", "+\t\t\tmethod.annotations = convertAnnotations(methodHandle);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64e58a7152d6fbfa50313393421a5778", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "890f12769080ec7e336b8a6c7a5ccafda55e441c", "commitAfterChange": "59c21df7bbb3eb9f4d564c252a3eb81338b6548b", "methodNumberBeforeChange": 337, "methodNumberAfterChange": 338, "signatureBeforeChange": " public void goForHeaders()", "signatureAfterChange": " public void goForHeaders()", "diff": ["-", "-\tthis.firstToken = TokenNameUNSIGNED_RIGHT_SHIFT;", "+\tif(this.isInsideEnumConstantPart) {", "+\t\tthis.firstToken = TokenNameNOT;", "+\t} else {", "+\t\tthis.firstToken = TokenNameUNSIGNED_RIGHT_SHIFT;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0db809b1c2c1083adb6e6ecdba89a63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatterCommentParser.java", "commitBeforeChange": "7315a9946428ac17ed2f3c53c5f292f76322b904", "commitAfterChange": "62f8132aa6e66bc79d2cfcc69b7efa69d325d62b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": " protected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": " protected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["+\t} else if (this.invalidTagName) {", "+\t\tthis.textStart = previousPosition;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb8799fedd370a30ffba196f75f5c975", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "027433d18c80815de3076b7fd489422a48401f1a", "commitAfterChange": "e060e0428f7f92647e77ad8da2c7818eb4c4e3a7", "methodNumberBeforeChange": 487, "methodNumberAfterChange": 488, "signatureBeforeChange": " public void recoveryTokenCheck()", "signatureAfterChange": " public void recoveryTokenCheck()", "diff": ["+\t\t\tif (this.ignoreNextClosingBrace) {", "+\t\t\t\tthis.ignoreNextClosingBrace = false;", "+\t\t\t\tbreak;", "+\t\t\t}"]}], "num": 70679}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c42d1aeb11a22fa1f3b7e0250830888a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1e890e74897b433203144f19b8c332f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationMirrorImpl.java", "commitBeforeChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "commitAfterChange": "2ed8d2842cd060fd2ed1992ac37d7e3f157e19c9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r     private Expression getValue(final String memberName)", "signatureAfterChange": "     private Object getValue(final String memberName)", "diff": ["-     */\r", "-    private Expression getValue(final String memberName)\r", "-    {\r", "-        if( _annoAstNode.isMarkerAnnotation() ) return null;\r", "-        else if( _annoAstNode.isSingleMemberAnnotation() ) {\r", "-            final Expression value = ((SingleMemberAnnotation)_annoAstNode).getValue();\r", "-            final ITypeBinding typeBinding = _annoAstNode.resolveTypeBinding();\r", "-            if( typeBinding.isAnnotation() ){\r", "-                final IMethodBinding[] methods  = typeBinding.getDeclaredMethods();\t\t\t\t\r", "-                // There should only be one since this is a single member annotation.\r", "-                if( methods != null && methods.length != 1 ){\r", "-                    IMethodBinding elementMethod = methods[0];\r", "-                    // make sure the name matches.\r", "-                    if( elementMethod.getName().equals(memberName) )\r", "-                        return value;\r", "-                }\r", "-            }\r", "-        }\r", "-        else if( _annoAstNode.isNormalAnnotation() ){\r", "-            final NormalAnnotation normalAnnotation = (NormalAnnotation)_annoAstNode;\r", "-            final List<MemberValuePair> pairs = normalAnnotation.values();\r", "-            {\r", "-               for( MemberValuePair pair : pairs ){\r", "-                    final SimpleName simpleName = pair.getName();\r", "-                    if( simpleName == null ) continue;\r", "-                    final String name = simpleName.toString();\r", "-                    if( simpleName.toString().equals(memberName) )\r", "-                        return pair.getValue();\r", "-                }\r", "-            }\r", "-        }\r", "-        // didn't find it in the ast, check the default values.\r", "-        final IMethodBinding binding = getMethodBinding(memberName);\r", "-        final ITypeBinding declaringClass = binding.getDeclaringClass();\r", "-        if(binding == null || declaringClass == null ) return null;\r", "-\r", "-        if( declaringClass.isFromSource() ){\r", "-            final AnnotationTypeMemberDeclaration methodDecl =\r", "-                (AnnotationTypeMemberDeclaration)_env.getASTNodeForBinding(binding);\r", "-            if( methodDecl != null )\r", "-                return methodDecl.getDefault();\r", "-            else\r", "-                return null;\r", "-        }\r", "-        else{\r", "-            // todo: (theodora) handle reading default value from binary.\r", "-            return null;\r", "-        }\r", "-    }\r", "+     */", "+    private Object getValue(final String memberName)", "+    {", "+\t\tif( memberName == null ) return null;", "+\t\tfinal IResolvedMemberValuePair[] declaredPairs = _domAnnotation.getDeclaredMemberValuePairs();", "+\t\tfor( IResolvedMemberValuePair pair : declaredPairs ){\t\t\t", "+\t\t\tif( memberName.equals(pair.getName()) ){", "+\t\t\t\treturn pair.getValue();\t\t\t\t", "+\t\t\t}", "+\t\t}", "+      ", "+        // didn't find it in the ast, check the default values.", "+        final IMethodBinding binding = getMethodBinding(memberName);", "+\t\tif(binding == null ) return null;", "+\t\treturn binding.getDefaultValue();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea53030bca547b684e88e0184918a951", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationMirrorImpl.java", "commitBeforeChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "commitAfterChange": "2ed8d2842cd060fd2ed1992ac37d7e3f157e19c9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r     public ITypeBinding[] getMemberValueTypeBinding(String membername)", "signatureAfterChange": "     public ITypeBinding[] getMemberValueTypeBinding(String membername)", "diff": ["-     */\r", "-    public ITypeBinding[] getMemberValueTypeBinding(String membername)\r", "-    {\r", "-        if( membername == null ) return null;\r", "-\r", "-        if( _annoAstNode.isMarkerAnnotation() ) return null;\r", "-        else if( _annoAstNode.isSingleMemberAnnotation() ) {\r", "-            final Expression value = ((SingleMemberAnnotation)_annoAstNode).getValue();\r", "-            if(value == null) return null;\r", "-            final ITypeBinding typeBinding = _annoAstNode.resolveTypeBinding();\r", "-            if( typeBinding.isAnnotation() ){\r", "-                final IMethodBinding[] methods  = typeBinding.getDeclaredMethods();\r", "-                // There should only be one since this is a single member annotation.\r", "-                if( methods != null && methods.length != 1 ){\r", "-                    IMethodBinding elementMethod = methods[0];\r", "-                    // make sure the name matches.\r", "-                    if( elementMethod.getName().equals(membername) )\r", "-                        return getExpressionTypeBindings(value);\r", "-                }\r", "-            }\r", "-        }\r", "-        else if( _annoAstNode.isNormalAnnotation() ){\r", "-            final NormalAnnotation normalAnnotation = (NormalAnnotation)_annoAstNode;\r", "-            final List<MemberValuePair> pairs = normalAnnotation.values();\r", "-            {\r", "-               for( MemberValuePair pair : pairs ){\r", "-                    final SimpleName simpleName = pair.getName();\r", "-                    if( simpleName == null ) continue;\r", "-                    final String name = simpleName.toString();\r", "-                    if( simpleName.toString().equals(membername) )\r", "-                        return getExpressionTypeBindings(pair.getValue());\r", "-                }\r", "-            }\r", "-        }\r", "-        // didn't find it in the ast, check the default values.\r", "-        final IMethodBinding binding = getMethodBinding(membername);\r", "-        final ITypeBinding declaringClass = binding.getDeclaringClass();\r", "-        if(binding == null || declaringClass == null ) return null;\r", "-\r", "-        if( declaringClass.isFromSource() ){\r", "-            final AnnotationTypeMemberDeclaration methodDecl =\r", "-                (AnnotationTypeMemberDeclaration)_env.getASTNodeForBinding(binding);\r", "-            if( methodDecl != null )\r", "-                return getExpressionTypeBindings(methodDecl.getDefault());\r", "-            else\r", "-                return null;\r", "-        }\r", "-        else{\r", "-            // todo: (theodora) handle reading default value from binary.\r", "-            return null;\r", "-        }\r", "-    }\r", "+     */", "+    public ITypeBinding[] getMemberValueTypeBinding(String membername)", "+    {", "+        if( membername == null ) return null;", "+\t\tfinal IResolvedMemberValuePair[] declaredPairs = _domAnnotation.getDeclaredMemberValuePairs();", "+\t\tfor( IResolvedMemberValuePair pair : declaredPairs ){\t\t\t", "+\t\t\tif( membername.equals(pair.getName()) ){", "+\t\t\t\tfinal Object value = pair.getValue();", "+\t\t\t\treturn getValueTypeBinding(value, pair.getMemberBinding().getReturnType());", "+\t\t\t}", "+\t\t}", "+      ", "+        // didn't find it in the ast, check the default values.", "+        final IMethodBinding binding = getMethodBinding(membername);", "+\t\tif(binding == null ) return null;", "+\t\tfinal Object defaultValue = binding.getDefaultValue();", "+\t\tif( defaultValue != null )\t\t", "+\t\t\treturn getValueTypeBinding(defaultValue, binding.getReturnType() );", "+\t\telse", "+\t\t\treturn null;\t\t", "+    }"]}], "num": 7269}
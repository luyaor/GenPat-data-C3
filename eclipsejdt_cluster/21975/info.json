{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "facca8f2603b9fba8f282f4cb8e6ff91", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "512c920cf94b5bd25f63af36a0323257", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "a190d14807d4bcd5bcc5a224c605da11ef938ef0", "commitAfterChange": "65cd85ec657509335f606a8248f5deaa818d1194", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void resolve(MethodScope initializationScope)", "signatureAfterChange": " \t \tpublic void resolve(MethodScope initializationScope)", "diff": ["-", "+\t", "+\t\t\t// thus must lookup separately in super type and outer context", "+\t\t\t", "-\t\t\t\t\tBinding existingVariable = classScope.findField(declaringType.superclass, this.name, this, true /*resolve*/);", "-\t\t\t\t\tif (existingVariable != null && existingVariable.isValidBinding()) {", "+\t\t\t\t\tBinding existingVariable = classScope.findField(declaringType.superclass, this.name, this,  false /*do not resolve hidden field*/);", "+\t\t\t\t\tif (existingVariable != null && existingVariable.isValidBinding()){", "+\t\t\t\t\t// only corner case is: lookup of outer field through static declaringType, which isn't detected by #getBinding as lookup starts", "+\t\t\t\t\t// from outer scope. Subsequent static contexts are detected for free.", "-\t\t\t\t\tif (existingVariable != null && existingVariable.isValidBinding()){", "+\t\t\t\t\tif (existingVariable != null && existingVariable.isValidBinding()", "+\t\t\t\t\t\t\t&& (!(existingVariable instanceof FieldBinding)", "+\t\t\t\t\t\t\t\t\t|| ((FieldBinding) existingVariable).isStatic() ", "+\t\t\t\t\t\t\t\t\t|| !declaringType.isStatic())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4165247a5310a9a042a5d56a3430b55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "8d011b03381d3efb22f096963964840a728e892c", "commitAfterChange": "637d66e0d1e2e285ddeeaf1de62c4418b17f95fd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void resolve(MethodScope initializationScope)", "signatureAfterChange": " \t \tpublic void resolve(MethodScope initializationScope)", "diff": ["-\t\t\t\tif (checkLocal && declaringType.enclosingType() != null) {", "+\t\t\t\tif (checkLocal) {", "-\t\t\t\t\tBinding existingVariable = outerScope.getBinding(this.name, Binding.VARIABLE, this, false /*do not resolve hidden field*/);", "-\t\t\t\t\tif (existingVariable != null && this.binding != existingVariable && existingVariable.isValidBinding()", "-\t\t\t\t\t\t\t&& (!(existingVariable instanceof FieldBinding)", "-\t\t\t\t\t\t\t\t\t|| ((FieldBinding) existingVariable).isStatic() ", "-\t\t\t\t\t\t\t\t\t|| !declaringType.isStatic())) {", "-\t\t\t\t\t\tinitializationScope.problemReporter().fieldHiding(this, existingVariable);", "+\t\t\t\t\tif (outerScope.kind != Scope.COMPILATION_UNIT_SCOPE) {", "+\t\t\t\t\t\tBinding existingVariable = outerScope.getBinding(this.name, Binding.VARIABLE, this, false /*do not resolve hidden field*/);", "+\t\t\t\t\t\tif (existingVariable != null && this.binding != existingVariable && existingVariable.isValidBinding()", "+\t\t\t\t\t\t\t\t&& (!(existingVariable instanceof FieldBinding)", "+\t\t\t\t\t\t\t\t\t\t|| ((FieldBinding) existingVariable).isStatic() ", "+\t\t\t\t\t\t\t\t\t\t|| !declaringType.isStatic())) {", "+\t\t\t\t\t\t\tinitializationScope.problemReporter().fieldHiding(this, existingVariable);", "+\t\t\t\t\t\t}"]}], "num": 21975}
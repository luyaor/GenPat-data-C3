{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b4f024c358ee165c60d1b9be4b36741d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a46ee95fc3c59735b763ab439d7d7162", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "08156cfc79f23b49be764df235698ffd6b9cb69d", "commitAfterChange": "adde2d508be4224bc02de90413feb639a619a5ba", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void searchAllSecondaryTypeNames( \t\t\tIPackageFragmentRoot[] sourceFolders, \t\t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\t\tboolean waitForIndexes, \t\t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllSecondaryTypeNames( \t\t\tIPackageFragmentRoot[] sourceFolders, \t\t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\t\tboolean waitForIndexes, \t\t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\t", "+", "+\t\t// Get working copy path(s). Store in a single string in case of only one to optimize comparison in requestor", "+\t\tString workingCopyPath = null;", "+\t\tfinal int copiesLength = copies == null ? 0 : copies.length;", "-\t\t\tfor (int i = 0, length = copies.length; i < length; i++) {", "-\t\t\t\tICompilationUnit workingCopy = copies[i];", "-\t\t\t\tworkingCopyPaths.add(workingCopy.getPath().toString());", "+\t\t\tif (copiesLength == 1) {", "+\t\t\t\tworkingCopyPath = copies[0].getPath().toString();", "+\t\t\t} else {", "+\t\t\t\tfor (int i = 0; i < copiesLength; i++) {", "+\t\t\t\t\tICompilationUnit workingCopy = copies[i];", "+\t\t\t\t\tworkingCopyPaths.add(workingCopy.getPath().toString());", "+\t\t\t\t}", "+\t\tfinal String singleWkcpPath = workingCopyPath;", "+\t\t// Index requestor", "+\t\t\t\t// Filter unexpected types", "-\t\t\t\tif (record.secondary) {", "-\t\t\t\t\tAccessRestriction accessRestriction = null;", "-\t\t\t\t\tif (record.enclosingTypeNames != IIndexConstants.ONE_ZERO_CHAR  // filter out local and anonymous classes", "-\t\t\t\t\t\t\t&& !workingCopyPaths.contains(documentPath)) { // filter out working copies", "-\t\t\t\t\t\tif (access != null) {", "-\t\t\t\t\t\t\t// Compute document relative path", "-\t\t\t\t\t\t\tint pkgLength = (record.pkg==null || record.pkg.length==0) ? 0 : record.pkg.length+1;", "-\t\t\t\t\t\t\tint nameLength = record.simpleName==null ? 0 : record.simpleName.length;", "-\t\t\t\t\t\t\tchar[] path = new char[pkgLength+nameLength];", "-\t\t\t\t\t\t\tint pos = 0;", "-\t\t\t\t\t\t\tif (pkgLength > 0) {", "-\t\t\t\t\t\t\t\tSystem.arraycopy(record.pkg, 0, path, pos, pkgLength-1);", "-\t\t\t\t\t\t\t\tCharOperation.replace(path, '.', '/');", "-\t\t\t\t\t\t\t\tpath[pkgLength-1] = '/';", "-\t\t\t\t\t\t\t\tpos += pkgLength;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (nameLength > 0) {", "-\t\t\t\t\t\t\t\tSystem.arraycopy(record.simpleName, 0, path, pos, nameLength);", "-\t\t\t\t\t\t\t\tpos += nameLength;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// Update access restriction if path is not empty", "-\t\t\t\t\t\t\tif (pos > 0) {", "-\t\t\t\t\t\t\t\taccessRestriction = access.getViolatedRestriction(path);", "-\t\t\t\t\t\t\t}", "+\t\t\t\tif (!record.secondary) {", "+\t\t\t\t\treturn true; // filter maint types", "+\t\t\t\t}", "+\t\t\t\tif (record.enclosingTypeNames == IIndexConstants.ONE_ZERO_CHAR) {", "+\t\t\t\t\treturn true; // filter out local and anonymous classes", "+\t\t\t\t}", "+\t\t\t\tswitch (copiesLength) {", "+\t\t\t\t\tcase 0:", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 1:", "+\t\t\t\t\t\tif (singleWkcpPath.equals(documentPath)) {", "+\t\t\t\t\t\t\treturn true; // fliter out *the* working copy", "-\t\t\t\t\t\tnameRequestor.acceptType(record.modifiers, record.pkg, record.simpleName, record.enclosingTypeNames, documentPath, accessRestriction);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tif (workingCopyPaths.contains(documentPath)) {", "+\t\t\t\t\t\t\treturn true; // filter out working copies", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+", "+\t\t\t\t// Accept document path", "+\t\t\t\tAccessRestriction accessRestriction = null;", "+\t\t\t\tif (access != null) {", "+\t\t\t\t\t// Compute document relative path", "+\t\t\t\t\tint pkgLength = (record.pkg==null || record.pkg.length==0) ? 0 : record.pkg.length+1;", "+\t\t\t\t\tint nameLength = record.simpleName==null ? 0 : record.simpleName.length;", "+\t\t\t\t\tchar[] path = new char[pkgLength+nameLength];", "+\t\t\t\t\tint pos = 0;", "+\t\t\t\t\tif (pkgLength > 0) {", "+\t\t\t\t\t\tSystem.arraycopy(record.pkg, 0, path, pos, pkgLength-1);", "+\t\t\t\t\t\tCharOperation.replace(path, '.', '/');", "+\t\t\t\t\t\tpath[pkgLength-1] = '/';", "+\t\t\t\t\t\tpos += pkgLength;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (nameLength > 0) {", "+\t\t\t\t\t\tSystem.arraycopy(record.simpleName, 0, path, pos, nameLength);", "+\t\t\t\t\t\tpos += nameLength;", "+\t\t\t\t\t}", "+\t\t\t\t\t// Update access restriction if path is not empty", "+\t\t\t\t\tif (pos > 0) {", "+\t\t\t\t\t\taccessRestriction = access.getViolatedRestriction(path);", "+\t\t\t\tnameRequestor.acceptType(record.modifiers, record.pkg, record.simpleName, record.enclosingTypeNames, documentPath, accessRestriction);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d01f58f79447b42d6773431194cfcf20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "08156cfc79f23b49be764df235698ffd6b9cb69d", "commitAfterChange": "adde2d508be4224bc02de90413feb639a619a5ba", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[][] qualifications,  \t\tfinal char[][] typeNames, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[][] qualifications,  \t\tfinal char[][] typeNames, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["+\t\t// Get working copy path(s). Store in a single string in case of only one to optimize comparison in requestor", "+\t\tString workingCopyPath = null;", "+\t\tfinal int copiesLength = copies == null ? 0 : copies.length;", "-\t\t\tfor (int i = 0, length = copies.length; i < length; i++) {", "-\t\t\t\tICompilationUnit workingCopy = copies[i];", "-\t\t\t\tworkingCopyPaths.add(workingCopy.getPath().toString());", "+\t\t\tif (copiesLength == 1) {", "+\t\t\t\tworkingCopyPath = copies[0].getPath().toString();", "+\t\t\t} else {", "+\t\t\t\tfor (int i = 0; i < copiesLength; i++) {", "+\t\t\t\t\tICompilationUnit workingCopy = copies[i];", "+\t\t\t\t\tworkingCopyPaths.add(workingCopy.getPath().toString());", "+\t\t\t\t}", "+\t\tfinal String singleWkcpPath = workingCopyPath;", "+\t\t// Index requestor", "-\t\t\t\tif (!workingCopyPaths.contains(documentPath)) { // filter out working copies", "-\t\t\t\t\tQualifiedTypeDeclarationPattern record = (QualifiedTypeDeclarationPattern) indexRecord;", "-\t\t\t\t\tAccessRestriction accessRestriction = null;", "-\t\t\t\t\tif (access != null) {", "-\t\t\t\t\t\t// Compute document relative path", "-\t\t\t\t\t\tint qualificationLength = (record.qualification == null || record.qualification.length == 0) ? 0 : record.qualification.length + 1;", "-\t\t\t\t\t\tint nameLength = record.simpleName == null ? 0 : record.simpleName.length;", "-\t\t\t\t\t\tchar[] path = new char[qualificationLength + nameLength];", "-\t\t\t\t\t\tint pos = 0;", "-\t\t\t\t\t\tif (qualificationLength > 0) {", "-\t\t\t\t\t\t\tSystem.arraycopy(record.qualification, 0, path, pos, qualificationLength - 1);", "-\t\t\t\t\t\t\tCharOperation.replace(path, '.', '/');", "-\t\t\t\t\t\t\tpath[qualificationLength-1] = '/';", "-\t\t\t\t\t\t\tpos += qualificationLength;", "+\t\t\t\t// Filter unexpected types", "+\t\t\t\tswitch (copiesLength) {", "+\t\t\t\t\tcase 0:", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 1:", "+\t\t\t\t\t\tif (singleWkcpPath.equals(documentPath)) {", "+\t\t\t\t\t\t\treturn true; // fliter out *the* working copy", "-\t\t\t\t\t\tif (nameLength > 0) {", "-\t\t\t\t\t\t\tSystem.arraycopy(record.simpleName, 0, path, pos, nameLength);", "-\t\t\t\t\t\t\tpos += nameLength;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tif (workingCopyPaths.contains(documentPath)) {", "+\t\t\t\t\t\t\treturn true; // filter out working copies", "-\t\t\t\t\t\t// Update access restriction if path is not empty", "-\t\t\t\t\t\tif (pos > 0) {", "-\t\t\t\t\t\t\taccessRestriction = access.getViolatedRestriction(path);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tnameRequestor.acceptType(record.modifiers, record.getPackageName(), record.simpleName, record.getEnclosingTypeNames(), documentPath, accessRestriction);", "+\t\t\t\t\t\tbreak;", "+", "+\t\t\t\t// Accept document path", "+\t\t\t\tQualifiedTypeDeclarationPattern record = (QualifiedTypeDeclarationPattern) indexRecord;", "+\t\t\t\tAccessRestriction accessRestriction = null;", "+\t\t\t\tif (access != null) {", "+\t\t\t\t\t// Compute document relative path", "+\t\t\t\t\tint qualificationLength = (record.qualification == null || record.qualification.length == 0) ? 0 : record.qualification.length + 1;", "+\t\t\t\t\tint nameLength = record.simpleName == null ? 0 : record.simpleName.length;", "+\t\t\t\t\tchar[] path = new char[qualificationLength + nameLength];", "+\t\t\t\t\tint pos = 0;", "+\t\t\t\t\tif (qualificationLength > 0) {", "+\t\t\t\t\t\tSystem.arraycopy(record.qualification, 0, path, pos, qualificationLength - 1);", "+\t\t\t\t\t\tCharOperation.replace(path, '.', '/');", "+\t\t\t\t\t\tpath[qualificationLength-1] = '/';", "+\t\t\t\t\t\tpos += qualificationLength;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (nameLength > 0) {", "+\t\t\t\t\t\tSystem.arraycopy(record.simpleName, 0, path, pos, nameLength);", "+\t\t\t\t\t\tpos += nameLength;", "+\t\t\t\t\t}", "+\t\t\t\t\t// Update access restriction if path is not empty", "+\t\t\t\t\tif (pos > 0) {", "+\t\t\t\t\t\taccessRestriction = access.getViolatedRestriction(path);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tnameRequestor.acceptType(record.modifiers, record.getPackageName(), record.simpleName, record.getEnclosingTypeNames(), documentPath, accessRestriction);"]}], "num": 16778}
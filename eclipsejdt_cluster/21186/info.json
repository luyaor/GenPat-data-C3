{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "725ae4d47a5c5acc56b79b237c125468", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8040cdb528b7c87766069fa5422f9ad9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "bde9840f9573d77080a23dfde60bdb51dc549649", "commitAfterChange": "e5950298e29dbaf979a85e6f3f4a27d3f4b008e8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprotected void seekQualifiedMemberTypes(String qualifiedName, IType type, boolean partialMatch, IJavaElementRequestor requestor, int acceptFlags)", "signatureAfterChange": " \t \tprotected void seekTypesInTopLevelType(String prefix, int firstDot, IType topLevelType, IJavaElementRequestor requestor, int acceptFlags)", "diff": ["-\tprotected void seekQualifiedMemberTypes(String qualifiedName, IType type, boolean partialMatch, IJavaElementRequestor requestor, int acceptFlags) {", "-\t\tif (type == null)", "-\t\t\treturn;", "-\t\tString matchName= qualifiedName;", "-\t\tint index= qualifiedName.indexOf('$');", "-\t\tboolean nested= false;", "-\t\tif (index != -1) {", "-\t\t\tmatchName= qualifiedName.substring(0, index);", "-\t\t\tnested= true;", "-\t\t}", "-\t\t\tif (nameMatches(matchName, memberType, partialMatch))", "-\t\t\t\tif (nested) {", "-\t\t\t\t\tseekQualifiedMemberTypes(qualifiedName.substring(index + 1, qualifiedName.length()), memberType, partialMatch, requestor, acceptFlags);", "-\t\t\t\t\tif (acceptType(memberType, acceptFlags)) requestor.acceptMemberType(memberType);", "+\t", "+\tprotected void seekTypesInTopLevelType(String prefix, int firstDot, IType topLevelType, IJavaElementRequestor requestor, int acceptFlags) {", "+\t\tif (!topLevelType.getElementName().toLowerCase().startsWith(prefix))", "+\t\t\treturn;", "+\t\tif (firstDot == -1) {", "+\t\t\tif (acceptType(topLevelType, acceptFlags))", "+\t\t\t\trequestor.acceptType(topLevelType);", "+\t\t} else {", "+\t\t\tseekTypesInType(prefix, firstDot, topLevelType, requestor, acceptFlags);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85cc0de4a3b862a9f45497e53ff3bd44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java", "commitBeforeChange": "f15f3a4daa4f7cbf363475bdb20d4707912f834f", "commitAfterChange": "1e2211eded7d5ae87dfcf507bb00676a5a81d8e9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void testPerfBuildCompilerUsingBatchCompiler() throws IOException", "signatureAfterChange": " \tpublic void testPerfBuildCompilerUsingBatchCompiler() throws IOException", "diff": ["-", "-\tpublic void testPerfBuildCompilerUsingBatchCompiler() throws IOException {", "-\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\t\tfinal IWorkspaceRoot workspaceRoot = workspace.getRoot();", "-\t\tfinal String targetWorkspacePath = workspaceRoot.getProject(JavaCore.PLUGIN_ID)", "-\t\t\t.getLocation()", "-\t\t\t.toFile()", "-\t\t\t.getCanonicalPath();", "-\t\tfinal String sources = targetWorkspacePath + File.separator + \"compiler\"; //$NON-NLS-1$", "-\t\tfinal String bins = targetWorkspacePath + File.separator + \"bin\"; //$NON-NLS-1$", "-\t\tfinal String logs = targetWorkspacePath + File.separator + \"log.txt\"; //$NON-NLS-1$", "-", "-\t\t// Note this test is not a finger print test, so we don't want to use", "-\t\t// tagAsGlobalSummary(...)", "-\t\ttagAsSummary(\"Build jdt-core/compiler using batch compiler\", Dimension.CPU_TIME);", "-", "-\t\t// Compile 10 times", "-\t\tMain.compile(sources + \" -1.4 -g -preserveAllLocals -enableJavadoc -nowarn -d \" + bins + \" -log \" + logs); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tfor (int i = 0; i < REPEAT; i++) {", "-\t\t\tstartMeasuring();", "-\t\t\tMain.compile(sources + \" -1.4 -g -preserveAllLocals -enableJavadoc -nowarn -d \" + bins + \" -log \" + logs); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tstopMeasuring();", "-\t\t\tcleanupDirectory(new File(bins));", "-\t\tcommitMeasurements();", "-\t\tassertPerformance();", "-\t\tFile logsFile = new File(logs);", "+\t */", "+\tpublic void testPerfBuildCompilerUsingBatchCompiler() throws IOException {", "+\t\t// Do no longer print results in performance fingerprint", "+\t\ttagAsSummary(\"Compile>Build>Batch>Src:compiler>Options:DocCommentSupport,None\", Dimension.CPU_TIME, true); // put in fingerprint", "+", "+\t\tFile logsFile = buildUsingBatchCompiler(\"-enableJavadoc -nowarn\");", "+", "+\t\t// Should not get any error", "-\t\tassertEquals(\"Has errors\", 0, logsFile.length());", "+\t\tif (logsFile.length() != 0) {", "+\t\t\tchar[] errors = Util.getFileCharContent(logsFile, null);", "+\t\t\tint length = Math.min(errors.length, 1000);", "+\t\t\tassertTrue(\"Should have NO warning!\\nAlthoug, got following ones:\\n\"+(new String(errors, 0, length)), false);", "+\t\t}"]}], "num": 21186}
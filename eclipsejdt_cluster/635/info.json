{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "afb7ceb97b71c3e3871343f3db612a14", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06058baebef7d4ebd26f039a17eb0488", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "4334ae3c3edbbd7f696f2ecb0b69bc310c6a9029", "commitAfterChange": "5bbbd2a6cca56e147177ee2f5e5f3e4b4f043dee", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r \tpublic static IPath getClasspathVariable(String variableName)", "signatureAfterChange": "\r \tpublic static IPath getClasspathVariable(final String variableName)", "diff": ["-\tpublic static IPath getClasspathVariable(String variableName) {\r", "+\tpublic static IPath getClasspathVariable(final String variableName) {\r", "-\t\t\tClasspathVariableInitializer initializer = getClasspathVariableInitializer(variableName);\r", "+\t\t\tfinal ClasspathVariableInitializer initializer = getClasspathVariableInitializer(variableName);\r", "-\t\t\t\tinitializer.initialize(variableName);\r", "+\t\t\t\t// wrap initializer call with Safe runnable in case initializer would be causing some grief\r", "+\t\t\t\tPlatform.run(new ISafeRunnable() {\r", "+\t\t\t\t\tpublic void handleException(Throwable exception) {\r", "+\t\t\t\t\t\tUtil.log(exception, \"Exception occurred in classpath variable initializer: \"+initializer); //$NON-NLS-1$\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tpublic void run() throws Exception {\r", "+\t\t\t\t\t\tinitializer.initialize(variableName);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t});\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c14c1710267475d80aea17c6323c6ff2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "de7e4b40954d182f333159de9571c0420d75e2aa", "commitAfterChange": "bbe83fbd85bca6d9714766efe7501065c33cddbf", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public static void searchAllPossibleSubTypes( \tIType type, \tIJavaSearchScope scope, \tfinal Map binariesFromIndexMatches, \tfinal IPathRequestor pathRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)", "signatureAfterChange": " public static void searchAllPossibleSubTypes( \tIType type, \tIJavaSearchScope scope, \tfinal Map binariesFromIndexMatches, \tfinal IPathRequestor pathRequestor, \tint waitingPolicy, \tfinal IProgressMonitor progressMonitor)", "diff": ["-\tIProgressMonitor progressMonitor) {", "+\tfinal IProgressMonitor progressMonitor) {", "-\t\t\tindexManager.performConcurrentJob(job, waitingPolicy, null); // no sub progress monitor since its too costly for deep hierarchies", "+\t\t\tindexManager.performConcurrentJob(job, waitingPolicy, progressMonitor == null ? null : new NullProgressMonitor() { ", "+\t\t\t\t// don't report progress since this is too costly for deep hierarchies", "+\t\t\t\t// just handle isCanceled() (seehttps://bugs.eclipse.org/bugs/show_bug.cgi?id=179511)", "+\t\t\t\tpublic void setCanceled(boolean value) {", "+\t\t\t\t\tprogressMonitor.setCanceled(value);", "+\t\t\t\t}", "+\t\t\t\tpublic boolean isCanceled() {", "+\t\t\t\t\treturn progressMonitor.isCanceled();", "+\t\t\t\t}", "+\t\t\t});"]}], "num": 635}
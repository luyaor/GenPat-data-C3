{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96b8b2ff249ab34ab133f9ca20abc09c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "071eba537909777f0d33a59c77757a37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "cb586d1ec75e8da71f4da23a7a5eb911d6960b1c", "commitAfterChange": "543f951d6390669f9bed8c637d9d6aef509af249", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 122, "signatureBeforeChange": "  public void generateSyntheticBodyForFieldReadAccess(SyntheticMethodBinding accessMethod)", "signatureAfterChange": "  public void generateSyntheticBodyForFieldReadAccess(SyntheticMethodBinding accessMethod)", "diff": ["+\t// target method declaring class may not be accessible (247953);", "+\tTypeBinding declaringClass = accessMethod.purpose == SyntheticMethodBinding.SuperFieldReadAccess ", "+\t\t\t? accessMethod.declaringClass.superclass() ", "+\t\t\t: accessMethod.declaringClass;", "-\t\tfieldAccess(Opcodes.OPC_getstatic, fieldBinding, accessMethod.declaringClass); // target method declaring class may not be accessible (247953);", "+\t\tfieldAccess(Opcodes.OPC_getstatic, fieldBinding, declaringClass); ", "-\t\tfieldAccess(Opcodes.OPC_getfield, fieldBinding, accessMethod.declaringClass); // target method declaring class may not be accessible (247953);", "+\t\tfieldAccess(Opcodes.OPC_getfield, fieldBinding, declaringClass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf3e89f5fcfb1d2f2e9d72ddcf3377bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "cb586d1ec75e8da71f4da23a7a5eb911d6960b1c", "commitAfterChange": "543f951d6390669f9bed8c637d9d6aef509af249", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 123, "signatureBeforeChange": "  public void generateSyntheticBodyForFieldWriteAccess(SyntheticMethodBinding accessMethod)", "signatureAfterChange": "  public void generateSyntheticBodyForFieldWriteAccess(SyntheticMethodBinding accessMethod)", "diff": ["+\t// target method declaring class may not be accessible (247953);", "+\tTypeBinding declaringClass = accessMethod.purpose == SyntheticMethodBinding.SuperFieldWriteAccess ", "+\t\t\t? accessMethod.declaringClass.superclass() ", "+\t\t\t: accessMethod.declaringClass;\t", "-\t\tfieldAccess(Opcodes.OPC_putstatic, fieldBinding, accessMethod.declaringClass); // target method declaring class may not be accessible (247953);", "+\t\tfieldAccess(Opcodes.OPC_putstatic, fieldBinding, declaringClass);", "-\t\tfieldAccess(Opcodes.OPC_putfield, fieldBinding, accessMethod.declaringClass); // target method declaring class may not be accessible (247953);", "+\t\tfieldAccess(Opcodes.OPC_putfield, fieldBinding, declaringClass);"]}], "num": 32134}
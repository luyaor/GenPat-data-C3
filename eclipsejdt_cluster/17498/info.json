{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78605345e6ad75fb94df7f26d4520d00", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c87644cb1be636a56bcd3ba512ebb0ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "ce9d82264275b3c4ad926312ca4ca735e225fab4", "commitAfterChange": "3f70f3f99df21def4574d8396aee2d34db8ebf8e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r \r public void shutdown()", "signatureAfterChange": "\r \r public void shutdown()", "diff": ["-\ttry {\r", "-\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();\r", "-\t\tHashMap keepingIndexesPaths = new HashMap();\r", "-\t\tif (model != null) {\r", "-\t\t\t// remove unused indexes\r", "-\t\t\tIJavaProject[] projects = model.getJavaProjects();\r", "-\t\t\tfor (int i = 0, max = projects.length; i < max; i++) {\r", "-\t\t\t\tif (projects[i].exists()) {\r", "-\t\t\t\t\tString path = this.getIndex(projects[i].getProject().getFullPath()).getIndexFile().getPath();\r", "-\t\t\t\t\tkeepingIndexesPaths.put(path,path);\r", "-\t\t\t\t\tIClasspathEntry[] entries = projects[i].getResolvedClasspath(true);\r", "-\t\t\t\t\tfor (int j = 0, max2 = entries.length; j < max2; j++) {\r", "-\t\t\t\t\t\tif (entries[j].getEntryKind() == ClasspathEntry.CPE_LIBRARY) {\r", "-\t\t\t\t\t\t\tpath = this.getIndex(entries[j].getPath()).getIndexFile().getPath();\r", "-\t\t\t\t\t\t\tkeepingIndexesPaths.put(path,path);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tFile indexesDirectory = new File(this.getJavaPluginWorkingLocation().toOSString());\r", "-\t\t\tif (indexesDirectory.isDirectory()) {\r", "-\t\t\t\tFile[] indexesFiles = indexesDirectory.listFiles();\r", "-\t\t\t\tfor (int i = 0, indexesFilesLength = indexesFiles.length; i < indexesFilesLength; i++) {\r", "-\t\t\t\t\tif (keepingIndexesPaths.get(indexesFiles[i].getAbsolutePath()) == null) {\r", "-\t\t\t\t\t\tindexesFiles[i].delete();\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\t\r", "+\tHashMap keepingIndexesPaths = new HashMap();\r", "+\tIndexSelector indexSelector = new IndexSelector(new JavaWorkspaceScope(), null, this);\r", "+\tIIndex[] selectedIndexes = indexSelector.getIndexes();\r", "+\tfor (int i = 0, max = selectedIndexes.length; i < max; i++) {\r", "+\t\tString path = selectedIndexes[i].getIndexFile().getAbsolutePath();\r", "+\t\tkeepingIndexesPaths.put(path, path);\r", "+\t}\r", "+\tFile indexesDirectory = new File(this.getJavaPluginWorkingLocation().toOSString());\r", "+\tif (indexesDirectory.isDirectory()) {\r", "+\t\tFile[] indexesFiles = indexesDirectory.listFiles();\r", "+\t\tfor (int i = 0, indexesFilesLength = indexesFiles.length; i < indexesFilesLength; i++) {\r", "+\t\t\tif (keepingIndexesPaths.get(indexesFiles[i].getAbsolutePath()) == null) {\r", "+\t\t\t\tindexesFiles[i].delete();\r", "-\t} catch(JavaModelException e) {\r", "+\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb4ecd59de3ca1663018b068a924e8e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "87b777c1fc477e9b3f12a1e072f005600f998f84", "commitAfterChange": "f66fb438b9cc0be7e04e5e7cd4ac6af72beb4f11", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tprotected ICompilationUnit getCompilationUnit(String projectName, String packageName, String unitName) throws JavaModelException", "signatureAfterChange": " \tprotected ICompilationUnit getCompilationUnit(String projectName, String packageName, String unitName) throws JavaModelException", "diff": ["-\t\tIPackageFragmentRoot[] fragmentRoots = javaProject.getPackageFragmentRoots();", "-\t\tint length = fragmentRoots.length;", "-\t\tfor (int i=0; i<length; i++) {", "-\t\t\tif (fragmentRoots[i] instanceof JarPackageFragmentRoot) continue;", "-\t\t\tIJavaElement[] packages= fragmentRoots[i].getChildren();", "-\t\t\tfor (int k= 0; k < packages.length; k++) {", "-\t\t\t\tIPackageFragment pack = (IPackageFragment) packages[k];", "-\t\t\t\tif (pack.getElementName().equals(packageName)) {", "-\t\t\t\t\tICompilationUnit[] units = pack.getCompilationUnits();", "-\t\t\t\t\tfor (int u=0; u<units.length; u++) {", "-\t\t\t\t\t\tif (units[u].getElementName().equals(unitName))", "-\t\t\t\t\t\t\treturn units[u];", "-\t\t\t\t\t}", "+\t\tIType type = javaProject.findType(packageName, unitName);", "+\t\tif (type != null) {", "+\t\t\treturn type.getCompilationUnit();", "+\t\t}", "+\t\treturn null;", "+\t}"]}], "num": 17498}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a489417c33e8ccd4ce197a974d409572", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ad5e2c0deef7ae3f8b36df4452f7c97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java", "commitBeforeChange": "8f81b2e3747fcb9f17cf00acc1b99bfe92cefa96", "commitAfterChange": "b94c15d0468e2c86a83d3434786ffbaf7e2c6cc7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void indexDocument()", "signatureAfterChange": " \tpublic void indexDocument()", "diff": ["-\t", "+", "+\t\t\t// Look for references in class annotations", "+\t\t\tIBinaryAnnotation[] annotations = reader.getAnnotations();", "+\t\t\tif (annotations != null) {", "+\t\t\t\tfor (int a=0, length=annotations.length; a<length; a++) {", "+\t\t\t\t\tIBinaryAnnotation annotation = annotations[a];", "+\t\t\t\t\taddBinaryAnnotation(annotation);", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\t\t\t// look for references in method annotations", "+\t\t\t\t\tannotations = method.getAnnotations();", "+\t\t\t\t\tif (annotations != null) {", "+\t\t\t\t\t\tfor (int a=0, length=annotations.length; a<length; a++) {", "+\t\t\t\t\t\t\tIBinaryAnnotation annotation = annotations[a];", "+\t\t\t\t\t\t\taddBinaryAnnotation(annotation);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t// look for references in field annotations", "+\t\t\t\t\tannotations = field.getAnnotations();", "+\t\t\t\t\tif (annotations != null) {", "+\t\t\t\t\t\tfor (int a=0, length=annotations.length; a<length; a++) {", "+\t\t\t\t\t\t\tIBinaryAnnotation annotation = annotations[a];", "+\t\t\t\t\t\t\taddBinaryAnnotation(annotation);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b5873e355027856738ec93abe45f154", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java", "commitBeforeChange": "d85d39eaac6c50a092ebc71013caff6067946721", "commitAfterChange": "4113d4b15f909d9ae6a13dfdc1603db4b3835658", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void generateAnnotationInfo(JavaElement parent, HashMap newElements, IBinaryAnnotation annotationInfo)", "signatureAfterChange": " private void generateAnnotationInfo(JavaElement parent, HashMap newElements, IBinaryAnnotation annotationInfo, String memberValuePairName)", "diff": ["+}", "+private void generateAnnotationInfo(JavaElement parent, HashMap newElements, IBinaryAnnotation annotationInfo, String memberValuePairName) {", "-\tAnnotation annotation = new Annotation(parent, new String(typeName));", "+\tAnnotation annotation = new Annotation(parent, new String(typeName), memberValuePairName);", "+\twhile (newElements.containsKey(annotation)) {", "+\t\tannotation.occurrenceCount++;", "+\t}", "-\t\t\tgenerateAnnotationInfo(annotation, newElements, (IBinaryAnnotation) value);", "+\t\t\tgenerateAnnotationInfo(annotation, newElements, (IBinaryAnnotation) value, new String(pairs[i].getName()));", "+\t\t} else if (value instanceof Object[]) {", "+\t\t\t// if the value is an array, it can have no more than 1 dimension - no need to recurse", "+\t\t\tObject[] valueArray = (Object[]) value;", "+\t\t\tfor (int j = 0, valueArrayLength = valueArray.length; j < valueArrayLength; j++) {", "+\t\t\t\tObject nestedValue = valueArray[j];", "+\t\t\t\tif (nestedValue instanceof IBinaryAnnotation) {", "+\t\t\t\t\tgenerateAnnotationInfo(annotation, newElements, (IBinaryAnnotation) nestedValue, new String(pairs[i].getName()));", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9501d78fdef0c57d43b329f0d98802a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "e593164022433d17467e437ca5f1d1580fcf9c34", "commitAfterChange": "1ca61ba390ea54fcabd09223853d7a3d6816c249", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": "  \tprivate void setArrayTypeAnnotations(ExtraDimension currentDimension, \t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[][] annotationsOnDims, int index)", "signatureAfterChange": "  \tprivate void setTypeAnnotationsOnDimension(ExtraDimension currentDimension, org.eclipse.jdt.internal.compiler.ast.Annotation[][] annotationsOnDimensions, int dimension)", "diff": ["-\tprivate void setArrayTypeAnnotations(ExtraDimension currentDimension,", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[][] annotationsOnDims, int index) {", "-\t\tif (annotationsOnDims == null) return;", "-\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[] annotation = annotationsOnDims[index];", "-\t\tif (annotation != null) {", "-\t\t\tfor (int j = 0; j < annotation.length; j++) {", "-\t\t\t\tAnnotation annot = convert(annotation[j]);", "-\t\t\t\tcurrentDimension.annotations().add(annot);", "+\tprivate void setTypeAnnotationsOnDimension(ExtraDimension currentDimension, org.eclipse.jdt.internal.compiler.ast.Annotation[][] annotationsOnDimensions, int dimension) {", "+\t\tif (annotationsOnDimensions == null) return;", "+\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = annotationsOnDimensions[dimension];", "+\t\tif (annotations != null) {", "+\t\t\tfor (int j = 0, length = annotations.length; j < length; j++) {", "+\t\t\t\tAnnotation annotation = convert(annotations[j]);", "+\t\t\t\tcurrentDimension.annotations().add(annotation);"]}], "num": 25069}
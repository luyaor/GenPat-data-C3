{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1752c6bf3af42a0eb1c026fcb06d797", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "332e54ee89b30991ba15b74a7b8a5cf4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 580, "methodNumberAfterChange": 580, "signatureBeforeChange": " \tpublic void test0561()", "signatureAfterChange": " \tpublic void test0561()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\tvoid foo(A<String> a) {}\\n\" + ", "+\t\t\t\t\"\t     ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tObject foo(A<Integer> a) { return null; }\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\t\t\"\tvoid foo(A<String> a) {}\\n\" + ", "+\t\t\t\t\t\"\t     ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\tObject foo(A<Integer> a) { return null; }\\n\" + ", "+\t\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\t\"\tvoid test(A<Integer> a) { foo(a); }\\n\" + ", "+\t\t\t\t\t\"\t                          ^^^\\n\" + ", "+\t\t\t\t\t\"The method foo(A<String>) in the type X is not applicable for the arguments (A<Integer>)\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"\tvoid foo(A<String> a) {}\\n\" + ", "-\t\t\t\"\t     ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tObject foo(A<Integer> a) { return null; }\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tvoid test(A<Integer> a) { foo(a); }\\n\" + ", "-\t\t\t\"\t                          ^^^\\n\" + ", "-\t\t\t\"The method foo(A<String>) in the type X is not applicable for the arguments (A<Integer>)\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog", "+\t\tString expectedCompilerLog2 = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\tNumber foo(A<String> a) { return null; }\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tInteger foo(A<Integer> a) { return null; }\\n\" + ", "+\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\t\t\"\tNumber foo(A<String> a) { return null; }\\n\" + ", "+\t\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\tInteger foo(A<Integer> a) { return null; }\\n\" + ", "+\t\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\t\"\tvoid test(A<Integer> a) { foo(a); }\\n\" + ", "+\t\t\t\t\t\"\t                          ^^^\\n\" + ", "+\t\t\t\t\t\"The method foo(A<String>) in the type X is not applicable for the arguments (A<Integer>)\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"\tNumber foo(A<String> a) { return null; }\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tInteger foo(A<Integer> a) { return null; }\\n\" + ", "-\t\t\t\"\t        ^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tvoid test(A<Integer> a) { foo(a); }\\n\" + ", "-\t\t\t\"\t                          ^^^\\n\" + ", "-\t\t\t\"The method foo(A<String>) in the type X is not applicable for the arguments (A<Integer>)\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog2"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f597abf030a1c53146d2bc0ea3542615", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "ab13d6b1cdae7066b5bf55448172280f7137212e", "commitAfterChange": "b6aa1e7468e04a61e529b4c4b0b636e6819cd942", "methodNumberBeforeChange": 356, "methodNumberAfterChange": 356, "signatureBeforeChange": " \tpublic void test0348()", "signatureAfterChange": " \tpublic void test0348()", "diff": ["-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"import java.io.IOException;\\n\" +", "-\t\t\t\t\"public abstract class X<T extends Runnable> {\\n\" +", "+\t\tif (this.complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\tthis.runNegativeTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"import java.io.IOException;\\n\" +", "+\t\t\t\t\t\"public abstract class X<T extends Runnable> {\\n\" +", "+\t\t\t\t\t\"\tpublic abstract <T extends Exception> T bar(T t);\\n\" +", "+\t\t\t\t\t\"\tstatic void foo(X x) {\\n\" +", "+\t\t\t\t\t\"\t\tx.<Exception>bar(null);\\n\" +", "+\t\t\t\t\t\"\t\tclass R implements Runnable {\\n\" +", "+\t\t\t\t\t\"\t\t\tpublic void run() {}\\n\" +", "+\t\t\t\t\t\"\t\t}\\n\" +", "+\t\t\t\t\t\"\t\tX<R> xr = new X<R>(){  \\n\" +", "+\t\t\t\t\t\"\t\t\tpublic <T extends Exception> T bar(T t) { return t; }\\n\" +", "+\t\t\t\t\t\"\t\t};\\n\" +", "+\t\t\t\t\t\"\t\tIOException e = xr.bar(new IOException());\\n\" +", "+\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\"}\\n\"", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"1. WARNING in X.java (at line 3)\\n\" +", "+\t\t\t\t\"\t                 ^\\n\" +", "+\t\t\t\t\"The type parameter T is hiding the type T\\n\" +", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"2. WARNING in X.java (at line 4)\\n\" +", "-\t\t\t\t\"\t\tx.<Exception>bar(null);\\n\" +", "-\t\t\t\t\"\t\tclass R implements Runnable {\\n\" +", "-\t\t\t\t\"\t\t\tpublic void run() {}\\n\" +", "-\t\t\t\t\"\t\t}\\n\" +", "-\t\t\t\t\"\t\tX<R> xr = new X<R>(){  \\n\" +", "-\t\t\t\t\"\t\t\tpublic <T extends Exception> T bar(T t) { return t; }\\n\" +", "-\t\t\t\t\"\t\t};\\n\" +", "-\t\t\t\t\"\t\tIOException e = xr.bar(new IOException());\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\\n\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 3)\\n\" +", "-\t\t\t\"\tpublic abstract <T extends Exception> T bar(T t);\\n\" +", "-\t\t\t\"\t                 ^\\n\" +", "-\t\t\t\"The type parameter T is hiding the type T\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 4)\\n\" +", "-\t\t\t\"\tstatic void foo(X x) {\\n\" +", "-\t\t\t\"\t                ^\\n\" +", "-\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\"\tx.<Exception>bar(null);\\n\" +", "-\t\t\t\"\t             ^^^\\n\" +", "-\t\t\t\"The method bar(Exception) of raw type X is no longer generic; it cannot be parameterized with arguments <Exception>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. WARNING in X.java (at line 10)\\n\" +", "-\t\t\t\"\tpublic <T extends Exception> T bar(T t) { return t; }\\n\" +", "-\t\t\t\"\t                               ^^^^^^^^\\n\" +", "-\t\t\t\"The method bar(T) of type new X<R>(){} should be tagged with @Override since it actually overrides a superclass method\\n\" +", "-\t\t\t\"----------\\n\",", "-\t\t\tJavacTestOptions.EclipseHasABug.EclipseBug236242);", "+\t\t\t\t\"\t                ^\\n\" +", "+\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" +", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "+\t\t\t\t\"\tx.<Exception>bar(null);\\n\" +", "+\t\t\t\t\"\t             ^^^\\n\" +", "+\t\t\t\t\"The method bar(Exception) of raw type X is no longer generic; it cannot be parameterized with arguments <Exception>\\n\" +", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"4. WARNING in X.java (at line 10)\\n\" +", "+\t\t\t\t\"\tpublic <T extends Exception> T bar(T t) { return t; }\\n\" +", "+\t\t\t\t\"\t                               ^^^^^^^^\\n\" +", "+\t\t\t\t\"The method bar(T) of type new X<R>(){} should be tagged with @Override since it actually overrides a superclass method\\n\" +", "+\t\t\t\t\"----------\\n\",", "+\t\t\t\tJavacTestOptions.EclipseHasABug.EclipseBug236242);", "+\t\t\treturn;", "+\t\t}", "+\t\tthis.runNegativeTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"import java.io.IOException;\\n\" +", "+\t\t\t\t\t\"public abstract class X<T extends Runnable> {\\n\" +", "+\t\t\t\t\t\"\tpublic abstract <T extends Exception> T bar(T t);\\n\" +", "+\t\t\t\t\t\"\tstatic void foo(X x) {\\n\" +", "+\t\t\t\t\t\"\t\tx.<Exception>bar(null);\\n\" +", "+\t\t\t\t\t\"\t\tclass R implements Runnable {\\n\" +", "+\t\t\t\t\t\"\t\t\tpublic void run() { zork = 0; }\\n\" +", "+\t\t\t\t\t\"\t\t}\\n\" +", "+\t\t\t\t\t\"\t\tX<R> xr = new X<R>(){  \\n\" +", "+\t\t\t\t\t\"\t\t\tpublic <T extends Exception> T bar(T t) { return t; }\\n\" +", "+\t\t\t\t\t\"\t\t};\\n\" +", "+\t\t\t\t\t\"\t\tIOException e = xr.bar(new IOException());\\n\" +", "+\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\"}\\n\"", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tpublic abstract <T extends Exception> T bar(T t);\\n\" + ", "+\t\t\t\t\"\t                 ^\\n\" + ", "+\t\t\t\t\"The type parameter T is hiding the type T\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tstatic void foo(X x) {\\n\" + ", "+\t\t\t\t\"\t                ^\\n\" + ", "+\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tx.<Exception>bar(null);\\n\" + ", "+\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: The method bar(Exception) belongs to the raw type X. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tpublic void run() { zork = 0; }\\n\" + ", "+\t\t\t\t\"\t                    ^^^^\\n\" + ", "+\t\t\t\t\"zork cannot be resolved\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tpublic <T extends Exception> T bar(T t) { return t; }\\n\" + ", "+\t\t\t\t\"\t                               ^^^^^^^^\\n\" + ", "+\t\t\t\t\"The method bar(T) of type new X<R>(){} should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+\t\t\t\t\"----------\\n\",", "+\t\t\t\tJavacTestOptions.EclipseHasABug.EclipseBug236242);\t\t"]}], "num": 13272}
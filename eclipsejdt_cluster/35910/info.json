{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6680852787b348b2feabe7be0473976a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4598096e7ea04058aa0a7adaf54635b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic TypeVariableBinding[] createTypeVariables(TypeParameter[] typeParameters, Binding declaringElement)", "signatureAfterChange": "  \tpublic TypeVariableBinding[] createTypeVariables(TypeParameter[] typeParameters, Binding declaringElement)", "diff": ["+\t\t\tif ((typeParameter.bits & ASTNode.HasTypeAnnotations) != 0) {", "+\t\t\t\tswitch(declaringElement.kind()) {", "+\t\t\t\t\tcase Binding.METHOD :", "+\t\t\t\t\t\tMethodBinding methodBinding = (MethodBinding) declaringElement;", "+\t\t\t\t\t\tAbstractMethodDeclaration sourceMethod = methodBinding.sourceMethod();", "+\t\t\t\t\t\tif (sourceMethod != null) {", "+\t\t\t\t\t\t\tsourceMethod.bits |= ASTNode.HasTypeAnnotations;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.TYPE :", "+\t\t\t\t\t\tif (declaringElement instanceof SourceTypeBinding) {", "+\t\t\t\t\t\t\tSourceTypeBinding sourceTypeBinding = (SourceTypeBinding) declaringElement;", "+\t\t\t\t\t\t\tTypeDeclaration typeDeclaration = sourceTypeBinding.scope.referenceContext;", "+\t\t\t\t\t\t\tif (typeDeclaration != null) {", "+\t\t\t\t\t\t\t\ttypeDeclaration.bits |= ASTNode.HasTypeAnnotations;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e44aea4d9e4abedee2c3b91afd53e8d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingOpenable.java", "commitBeforeChange": "15070dfb720141f260eff9f86b3742c51648d5f0", "commitAfterChange": "f850238096d0e6e37fbf42c72e3eea2d357ec53f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " private void locateMatchesInClassFile() throws CoreException, JavaModelException", "signatureAfterChange": " private void locateMatchesInClassFile() throws CoreException, JavaModelException", "diff": ["-\t\t\tbinding = this.locator.lookupEnvironment.cacheBinaryType(info);", "-\t\t\tif (binding == null) { // it was already cached as a result of a previous query", "-\t\t\t\tchar[][] compoundName = CharOperation.splitOn('.', binaryType.getFullyQualifiedName().toCharArray());", "-\t\t\t\tReferenceBinding referenceBinding = this.locator.lookupEnvironment.getCachedType(compoundName);", "-\t\t\t\tif (referenceBinding != null && (referenceBinding instanceof BinaryTypeBinding)) {", "-\t\t\t\t\t// if the binding could be found and if it comes from a binary type,", "-\t\t\t\t\tbinding = (BinaryTypeBinding)referenceBinding;", "-\t\t\t\t}", "-\t\t\t}", "-", "+\t\t\tbinding = this.locator.cacheBinaryType(binaryType);"]}], "num": 35910}
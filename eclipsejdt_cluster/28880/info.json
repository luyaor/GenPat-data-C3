{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48a2988c8b1287d2351991efe13a279d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61a41c1d39a4c708b26c27f6d41d3613", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "64adb94de0734c7d5adfd2cb11839ed3d3641dfc", "commitAfterChange": "a12b1847e48d96ac5e805a907f4cf72bcc8b1f19", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 88, "signatureBeforeChange": "  \tpublic static void recreatePersistedContainer(String propertyName, String containerString, boolean addToContainerValues)", "signatureAfterChange": "  \tpublic static void recreatePersistedContainer(String propertyName, String containerString, boolean addToContainerValues)", "diff": ["-\t\t\tfinal String projectName = propertyName.substring(containerPrefixLength, index).trim();", "-\t\t\tJavaProject project = (JavaProject)getJavaModelManager().getJavaModel().getJavaProject(projectName);", "-\t\t\tif (!project.getProject().isAccessible()) return; // avoid leaking deleted project's persisted container", "-\t\t\tfinal IPath containerPath = new Path(propertyName.substring(index+1).trim());", "-\t\t\t", "-\t\t\tif (containerString == null || containerString.equals(CP_ENTRY_IGNORE)) {", "-\t\t\t\tgetJavaModelManager().containerPut(project, containerPath, null);", "-\t\t\t} else {", "-\t\t\t\tfinal IClasspathEntry[] containerEntries = project.decodeClasspath(containerString, false, false);", "-\t\t\t\tif (containerEntries != null && containerEntries != JavaProject.INVALID_CLASSPATH) {", "-\t\t\t\t\tIClasspathContainer container = new IClasspathContainer() {", "-\t\t\t\t\t\tpublic IClasspathEntry[] getClasspathEntries() {", "-\t\t\t\t\t\t\treturn containerEntries;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tpublic String getDescription() {", "-\t\t\t\t\t\t\treturn \"Persisted container [\"+containerPath+\" for project [\"+ projectName+\"]\"; //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tpublic int getKind() {", "-\t\t\t\t\t\t\treturn 0; ", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tpublic IPath getPath() {", "-\t\t\t\t\t\t\treturn containerPath;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tpublic String toString() {", "-\t\t\t\t\t\t\treturn getDescription();", "-\t\t\t\t\t\t}", "+\t\t\tString projectName = propertyName.substring(containerPrefixLength, index).trim();", "+\t\t\tIJavaProject project = getJavaModelManager().getJavaModel().getJavaProject(projectName);", "+\t\t\tIPath containerPath = new Path(propertyName.substring(index+1).trim());", "+\t\t\trecreatePersistedContainer(project, containerPath, containerString, addToContainerValues);", "+\t\t}", "+\t}", "-\t\t\t\t\t};", "-\t\t\t\t\tif (addToContainerValues) {", "-\t\t\t\t\t\tgetJavaModelManager().containerPut(project, containerPath, container);", "-\t\t\t\t\t}", "-\t\t\t\t\tMap projectContainers = (Map)getJavaModelManager().previousSessionContainers.get(project);", "-\t\t\t\t\tif (projectContainers == null){", "-\t\t\t\t\t\tprojectContainers = new HashMap(1);", "-\t\t\t\t\t\tgetJavaModelManager().previousSessionContainers.put(project, projectContainers);", "-\t\t\t\t\t}", "-\t\t\t\t\tprojectContainers.put(containerPath, container);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "925f70e1a15d116735e040e7a8cb3f0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "signatureAfterChange": "\r public void accept(ISourceType sourceType, PackageBinding packageBinding)", "diff": ["+ */\r", "+public void accept(ISourceType sourceType, PackageBinding packageBinding) {\r", "+\twhile (sourceType.getEnclosingType() != null) sourceType = sourceType.getEnclosingType();\r", "+\tCompilationResult result = new CompilationResult(sourceType.getFileName(), 1, 1); // need to hold onto this\r", "+\tCompilationUnitDeclaration unit =\r", "+\t\tSourceTypeConverter.buildCompilationUnit(sourceType, true, true, lookupEnvironment.problemReporter, result);\r", "+\tif (unit != null) {\r", "+\t\tthis.lookupEnvironment.buildTypeBindings(unit);\r", "+\t\tthis.lookupEnvironment.completeTypeBindings(unit, true);\r", "+\t}\r", "+}\r", "-\t */\r", "-\tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding) {\r", "-\t\tISourceType sourceType = sourceTypes[0];\r", "-\t\twhile (sourceType.getEnclosingType() != null)\r", "-\t\t\tsourceType = sourceType.getEnclosingType();\r", "-\t\tCompilationUnitDeclaration unit;\r", "-\t\tif (sourceType instanceof SourceTypeElementInfo) {\r", "-\t\t\t// get source\r", "-\t\t\tSourceTypeElementInfo elementInfo = (SourceTypeElementInfo) sourceType;\r", "-\t\t\tIType type = elementInfo.getHandle();\r", "-\t\t\t\tfinal IFile file = (IFile) type.getUnderlyingResource();\r", "-\t\t\t\tfinal char[] source = PotentialMatch.getContents(file);\r", "-\r", "-\t\t\t\t// get main type name\r", "-\t\t\t\tfinal String fileName = file.getFullPath().lastSegment();\r", "-\t\t\t\tfinal char[] mainTypeName =\r", "-\t\t\t\t\tfileName.substring(0, fileName.length() - 5).toCharArray();\r", "-\r", "-\t\t\t\t// source unit\r", "-\t\t\t\tICompilationUnit sourceUnit = new ICompilationUnit() {\r", "-\t\t\t\t\tpublic char[] getContents() {\r", "-\t\t\t\t\t\treturn source;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tpublic char[] getFileName() {\r", "-\t\t\t\t\t\treturn fileName.toCharArray();\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tpublic char[] getMainTypeName() {\r", "-\t\t\t\t\t\treturn mainTypeName;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t};\r", "-\r", "-\t\t\t\t// diet parse\r", "-\t\t\t\tCompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0);\r", "-\t\t\t\tunit = this.parser.dietParse(sourceUnit, compilationResult);\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\tunit = null;\r", "-\t\t} else {\r", "-\t\t\tCompilationResult result =\r", "-\t\t\t\tnew CompilationResult(sourceType.getFileName(), 0, 0);\r", "-\t\t\tunit =\r", "-\t\t\t\tSourceTypeConverter.buildCompilationUnit(\r", "-\t\t\t\t\tsourceTypes,\r", "-\t\t\t\t\ttrue,\r", "-\t\t\t\t\ttrue,\r", "-\t\t\t\t\tlookupEnvironment.problemReporter,\r", "-\t\t\t\t\tresult);\r", "-\t\tif (unit != null) {\r", "-\t\t\tthis.lookupEnvironment.buildTypeBindings(unit);\r", "-\t\t\tthis.lookupEnvironment.completeTypeBindings(unit, true);\r", "-\t\t\tthis.parsedUnits.put(sourceType.getQualifiedName(), unit);\r"]}], "num": 28880}
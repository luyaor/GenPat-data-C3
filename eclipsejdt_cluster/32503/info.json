{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28e3646c641310f14300cf859cb35c36", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36093c5539d079815dfb0183c0034b29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "a1763251def6c3b8a3b42735dab5f81d5a53deef", "commitAfterChange": "f174c5e3ec66ea2a46810b190cc3e9d57c0432d4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "diff": ["-\t\t\tint charPosition = this.index;", "+\t\t\tint previousPosition = this.index;", "+\t\t\tint endTextPosition = this.index;", "-\t\t\t\tint previousPosition = this.index;", "+\t\t\t\tpreviousPosition = this.index;", "-\t\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidTag(this.inlineTagStart, charPosition);", "+\t\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidTag(this.inlineTagStart, endTextPosition);", "-\t\t\t\t\t\t\t\t\tif (this.textStart != -1 && this.textStart <= charPosition) {", "-\t\t\t\t\t\t\t\t\t\tpushText(this.textStart, charPosition);", "+\t\t\t\t\t\t\t\t\tif (this.textStart != -1 && this.textStart < endTextPosition) {", "+\t\t\t\t\t\t\t\t\t\tpushText(this.textStart, endTextPosition);", "-\t\t\t\t\t\tint position = previousChar == '{' ? this.inlineTagStart : charPosition;", "-\t\t\t\t\t\tif (this.lineStarted && this.textStart <= position) {", "-\t\t\t\t\t\t\tpushText(this.textStart, position);", "+\t\t\t\t\t\tif (this.lineStarted && this.textStart < previousPosition) {", "+\t\t\t\t\t\t\tpushText(this.textStart, previousPosition);", "-\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart <= charPosition) {", "-\t\t\t\t\t\t\t\tpushText(this.textStart, charPosition);", "+\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {", "+\t\t\t\t\t\t\t\tpushText(this.textStart, previousPosition);", "-\t\t\t\t\t\t} else /*if (this.index <= this.lineEnd)*/ {", "+\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcharPosition = previousPosition;", "+\t\t\t\t\t\t\tendTextPosition = previousPosition;", "-\t\t\t\t\t\tcharPosition = previousPosition;", "+\t\t\t\t\t\t// do nothing for '*' character", "+\t\t\t\t\t\tendTextPosition = previousPosition;", "-\t\t\t\t\t\tcharPosition = previousPosition;", "+\t\t\t\t\t\tendTextPosition = previousPosition;", "-\t\t\tif (this.lineStarted && this.textStart <= charPosition) {", "-\t\t\t\tpushText(this.textStart, charPosition);", "+\t\t\tif (this.lineStarted && this.textStart < previousPosition) {", "+\t\t\t\tpushText(this.textStart, previousPosition);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "363d453442e6f9d59a14616f2b3a197c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean commentParse()", "signatureAfterChange": " \tprotected boolean commentParse()", "diff": ["-\t\t\t\t\t\t\tthis.lineStarted = true;", "-\t\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {", "-\t\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) pushText(this.textStart, previousPosition);", "+\t\t\t\t\t\t\t\tif (this.textStart != -1 && this.textStart < previousPosition) {", "+\t\t\t\t\t\t\t\t\tif (this.kind != COMPIL_PARSER) pushText(this.textStart, previousPosition);", "-\t\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) pushText(this.textStart, this.inlineTagStart);", "+\t\t\t\t\t\t\t\t\tif (this.kind != COMPIL_PARSER) pushText(this.textStart, this.inlineTagStart);", "-\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) pushText(this.textStart, invalidTagLineEnd);", "+\t\t\t\t\t\t\t\tif (this.kind != COMPIL_PARSER) pushText(this.textStart, invalidTagLineEnd);", "+\t\t\t\t\t\tthis.lineStarted = true;", "-\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) pushText(this.textStart, previousPosition);", "+\t\t\t\t\t\t\tif (this.kind != COMPIL_PARSER) pushText(this.textStart, previousPosition);", "-\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "+\t\t\t\t\t\t\tif (this.kind != COMPIL_PARSER) {", "-\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "+\t\t\t\t\t\t\tif (this.kind != COMPIL_PARSER) {", "-\t\t\t\tif (this.kind == DOM_PARSER) {", "+\t\t\t\tif (this.kind != COMPIL_PARSER) {", "-\t\t\t} else if (this.kind == DOM_PARSER && this.lineStarted && this.textStart < previousPosition) {", "+\t\t\t} else if (this.kind != COMPIL_PARSER && this.lineStarted && this.textStart < previousPosition) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71a2549cae3cf2e3f8c8727e0fce0f4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \t \tprivate void format(TypeDeclaration typeDeclaration)", "signatureAfterChange": " \t \tprivate void format(TypeDeclaration typeDeclaration)", "diff": ["-\t\t\t\t\tthis.preferences.type_declaration_superclass_alignment,", "+\t\t\t\t\tthis.preferences.alignment_for_superclass_in_type_declaration,", "-\t\t\t\t\tthis.preferences.type_declaration_superinterfaces_alignment,", "+\t\t\t\t\tthis.preferences.alignment_for_superinterfaces_in_type_declaration,", "-\t\tString class_declaration_brace = this.preferences.type_declaration_brace_position;", "+\t\tString class_declaration_brace = this.preferences.brace_position_for_type_declaration;", "-        formatLeftCurlyBrace(line, this.preferences.type_declaration_brace_position);", "-\t\tformatTypeOpeningBrace(class_declaration_brace, this.preferences.insert_space_before_type_open_brace, typeDeclaration);", "+        formatLeftCurlyBrace(line, class_declaration_brace);", "+\t\tformatTypeOpeningBrace(class_declaration_brace, this.preferences.insert_space_before_opening_brace_in_type_declaration, typeDeclaration);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8faa03afd5890af88125a7f6731aa7af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "1ce53ca49608d62967854b92a874a5596d91464e", "commitAfterChange": "bb72ae085a9c803f32e5ba9cfc8183ec6217c40b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["+\t\tReferenceBinding qualifiedType = null;", "-\t    \tReferenceBinding enclosingType = (ReferenceBinding) this.resolvedType;", "-\t\t\tif (typeIsConsistent && currentType.isStatic() && enclosingType != null && (enclosingType.isParameterizedType() || enclosingType.isGenericType())) {", "-\t\t\t\tscope.problemReporter().staticMemberOfParameterizedType(this, scope.createParameterizedType(currentType, null, enclosingType));", "+\t\t\tif (typeIsConsistent && currentType.isStatic() && qualifiedType != null && (qualifiedType.isParameterizedType() || qualifiedType.isGenericType())) {", "+\t\t\t\tscope.problemReporter().staticMemberOfParameterizedType(this, scope.createParameterizedType(currentType, null, qualifiedType));", "-\t\t\t\tif (typeIsConsistent && !currentType.isStatic() && enclosingType != null && enclosingType.isRawType()) {", "+\t\t\t\tif (typeIsConsistent && !currentType.isStatic() && qualifiedType != null && qualifiedType.isRawType()) {", "-\t\t\t\t\t\t\tthis, scope.environment().createRawType(currentType, enclosingType), argTypes);", "+\t\t\t\t\t\t\tthis, scope.environment().createRawType(currentType, qualifiedType), argTypes);", "-\t\t\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType(currentType, argTypes, enclosingType);", "+\t\t\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType(currentType, argTypes, qualifiedType);", "-\t\t\t\tthis.resolvedType = parameterizedType;", "+\t\t\t\tqualifiedType = parameterizedType;", "-\t\t\t\tif (currentType.erasure().isGenericType()) {", "-\t   \t\t\t    if (typeIsConsistent && enclosingType != null && enclosingType.isParameterizedType()) {", "-\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.createParameterizedType(currentType, null, enclosingType));", "+\t\t\t\tif (currentType.isGenericType()) {", "+\t   \t\t\t    if (typeIsConsistent && qualifiedType != null && qualifiedType.isParameterizedType()) {", "+\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.createParameterizedType(currentType, null, qualifiedType));", "-\t   \t\t\t    this.resolvedType = scope.environment().createRawType(currentType, enclosingType); // raw type", "+\t   \t\t\t    qualifiedType = scope.environment().createRawType(currentType, qualifiedType); // raw type", "-", "+\t\tthis.resolvedType = qualifiedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b184a8c4042761113e4cf3e7126bcabe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void testGrowImports() throws JavaModelException", "signatureAfterChange": " public void testGrowImports() throws JavaModelException", "diff": ["-\tthis.clearDeltas();", "+\tclearDeltas();", "-\tthis.clearDeltas();", "+\tclearDeltas();"]}], "num": 32503}
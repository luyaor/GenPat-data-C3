{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f5dfe4ca260ccb4f4385cec66079686", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ef7b55051d92af02b243abeefd2cc6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingExpressionsTest.java", "commitBeforeChange": "eed1a08cebbf98096012b816207df007b92ad038", "commitAfterChange": "b9d41d0ed4ae01b16e3d13e30399d50f0163af83", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void testInstanceofExpression() throws Exception", "signatureAfterChange": " \tpublic void testInstanceofExpression() throws Exception", "diff": ["+\t\tbuf.append(\"        goo(k()instanceof Vector);\\n\");", "-\t\tassertTrue(\"Number of statements not 1\", statements.size() == 1);", "+\t\tassertTrue(\"Number of statements not 2\", statements.size() == 2);", "+\t\t{ // change left side", "+\t\t\tExpressionStatement stmt= (ExpressionStatement) statements.get(1);", "+\t\t\tMethodInvocation invocation= (MethodInvocation) stmt.getExpression();", "+\t\t\t", "+\t\t\tList arguments= invocation.arguments();", "+\t\t\tInstanceofExpression expr= (InstanceofExpression) arguments.get(0);", "+\t\t\t", "+\t\t\tSimpleName name= ast.newSimpleName(\"x\");", "+\t\t\trewrite.replace(expr.getLeftOperand(), name, null);", "+\t\t}", "+\t\tbuf.append(\"        goo(x instanceof Vector);\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d6470ad8e2b3523cb1ae88942d21806", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingTypeDeclTest.java", "commitBeforeChange": "cf7d7b40d6b2bdb180c3b5405f67692d11fca251", "commitAfterChange": "52f990bdad4ba550492efcdd60a5a240aead4bfa", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t\t\t \tpublic void testImportDeclaration() throws Exception", "signatureAfterChange": " \t\t\t \tpublic void testImportDeclaration() throws Exception", "diff": ["-\t\tbuf.append(\"import java.text.*;\\n\");\t\t\t\t\t", "+\t\tbuf.append(\"import java.text.*;\\n\");", "+\t\tbuf.append(\"import static java.lang.Math.*;\\n\");", "+\t\tbuf.append(\"import java.lang.Math.*;\\n\");\t\t", "-\t\tCompilationUnit astRoot= createAST(cu);", "+\t\tCompilationUnit astRoot= createAST3(cu);", "-\t\tassertTrue(\"Number of imports not 4\", imports.size() == 4);", "+\t\tassertTrue(\"Number of imports not 6\", imports.size() == 6);", "-\t\t}\t\t", "-\t\t", "+\t\t}", "+\t\t{ // remove static ", "+\t\t\tImportDeclaration imp= (ImportDeclaration) imports.get(4);", "+\t\t\t", "+\t\t\trewrite.set(imp, ImportDeclaration.STATIC_PROPERTY, Boolean.FALSE, null);", "+\t\t}", "+\t\t{ // add static", "+\t\t\tImportDeclaration imp= (ImportDeclaration) imports.get(5);", "+\t\t\t", "+\t\t\trewrite.set(imp, ImportDeclaration.STATIC_PROPERTY, Boolean.TRUE, null);", "+\t\t}", "-\t\tbuf.append(\"import org.eclipse.*;\\n\");\t\t\t", "+\t\tbuf.append(\"import org.eclipse.*;\\n\");", "+\t\tbuf.append(\"import java.lang.Math.*;\\n\");", "+\t\tbuf.append(\"import static java.lang.Math.*;\\n\");"]}], "num": 13089}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "716e4fab23d2b5e9187ac36f4ff587d3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4635302af8d66208e80776690563975c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["-\t\t\t\t\tif (expressionType.isBaseType()) {", "+\t\t\t\t\tif (!expressionType.isValidBinding()) {", "+\t\t\t\t\t\texpressionType = null; // fault-tolerance: ignore type mismatch from constants from hereon", "+\t\t\t\t\t\tbreak checkType;", "+\t\t\t\t\t} else if (expressionType.isBaseType()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8825d7f2bf728b26e541301fdc4903dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "566dfe9d75afc609e513171bfa949df8ee32e8da", "commitAfterChange": "14bf482e9ce4e28aba53c29fe3155a9c59b88f63", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (Scope.areTypesCompatible(enclosingInstanceType, expectedType))", "+\t\t\tif (enclosingInstanceType.isCompatibleWith(expectedType))", "-\t\t\tif (!Scope", "-\t\t\t\t.areTypesCompatible(", "-\t\t\t\t\tenclosingInstanceType,", "-\t\t\t\t\tinheritedBinding.declaringClass.enclosingType())) {", "+\t\t\tif (!enclosingInstanceType.isCompatibleWith(inheritedBinding.declaringClass.enclosingType())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d87305733aca13052d48b0b72484034", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "c805b2c9ea429c7a118f078e4364f61575eab52b", "commitAfterChange": "01ebdd7bcd2ae1972ae7d5e4a984275dc87ac438", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["-\t\t\t\t} else if (expressionType.isEnum())", "-\t\t\t\t\t\tbreak checkType;", "+\t\t\t\t} else if (expressionType.isEnum()) {", "+\t\t\t\t\tbreak checkType;", "+\t\t\t\t} else if (upperScope.isBoxingCompatibleWith(expressionType, IntBinding)) {", "+\t\t\t\t\texpression.computeConversion(upperScope, IntBinding, expressionType);", "+\t\t\t\t\tbreak checkType;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae6d9f8f6587520d68786a01cf8ac34d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "566dfe9d75afc609e513171bfa949df8ee32e8da", "commitAfterChange": "14bf482e9ce4e28aba53c29fe3155a9c59b88f63", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tprivate int computeRelevanceForExpectingType(TypeBinding proposalType)", "signatureAfterChange": " \tprivate int computeRelevanceForExpectingType(TypeBinding proposalType)", "diff": ["-\t\t\t\t\t&& Scope.areTypesCompatible(proposalType, expectedTypes[i])) {", "+\t\t\t\t\t&& proposalType.isCompatibleWith(expectedTypes[i])) {", "-\t\t\t\t\t&& Scope.areTypesCompatible(expectedTypes[i], proposalType)) {", "+\t\t\t\t\t&& expectedTypes[i].isCompatibleWith(proposalType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8a3fa0a52da0934b60e770f8d7fbef9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "1585d95aacd546d0fef8e25ddee2f5a6f64f7c62", "commitAfterChange": "bcf6d39cea27ed7bf3bf85709bd7e60dc5605058", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeExpecting( \t\tBlockScope scope, \t\tTypeBinding expectedType)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeExpecting( \t\tBlockScope scope, \t\tTypeBinding expectedType)", "diff": ["-\t\tif (!expressionType.isCompatibleWith(expectedType)) {", "+\t\tif (scope.isBoxingCompatibleWith(expressionType, expectedType)) {", "+\t\t\tthis.computeConversion(scope, expectedType, expressionType);", "+\t\t} else if (!expressionType.isCompatibleWith(expectedType)) {"]}], "num": 9549}
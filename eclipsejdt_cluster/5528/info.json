{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b516107ad092aac9e9606708ab9fe1b8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2a9176623ba443ae5a3642736cb265e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void test010a()", "signatureAfterChange": " public void test010a()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\"\tstatic <L1 extends Listener & ErrorListener> Object createParser(L1 l) { return null; }\\n\" +", "-\t\t\"\t                                                    ^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Method createParser(L1) has the same erasure createParser(X.Listener) as another method in type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in X.java (at line 5)\\n\" +", "-\t\t\"\tstatic <L2 extends ErrorListener & Listener> Object createParser(L2 l) { return null; }\\n\" +", "-\t\t\"\t                                                    ^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Method createParser(L2) has the same erasure createParser(X.ErrorListener) as another method in type X\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\tcreateParser(new A());\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^\\n\" + ", "+\t\t\"The method createParser(A) is ambiguous for the type X\\n\" + ", "+// javac 7 randomly picks which ever method is second"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9eb5d46d775938968eef7513c41759c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java", "commitBeforeChange": "1a542c460a449efbae14d1057ba233825602248d", "commitAfterChange": "1ddc6abfe5d6cd8ad8c71d5100cfa53f4e84487a", "methodNumberBeforeChange": 163, "methodNumberAfterChange": 163, "signatureBeforeChange": " public void test430766a()", "signatureAfterChange": " public void test430766a()", "diff": ["-\t\t\t\"\t                        ^^^^^^^^^\\n\" + ", "-\t\t\t\"The method comparing(Function<? super T,? extends U>) in the type Comparator is not applicable for the arguments (Comparator<Object>)\\n\" + ", "+\t\t\t\"\t                                             ^^^^^^^^^\\n\" + ", "+\t\t\t\"The method nullsLast(Comparator<? super T>) in the type Comparator is not applicable for the arguments (Person::<Runnable>isRunnable)\\n\" + ", "-\t\t\t\"\t                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from Comparator<Object> to Function<? super T,? extends U>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 21)\\n\" + ", "-\t\t\t\"\tpersons.sort(Comparator.comparing(Comparator.nullsLast(Person::<Runnable>isRunnable)));\\n\" + ", "-\t\t\t\"The type X.Person does not define isRunnable(Object, Object) that is applicable here\\n\" + ", "+\t\t\t\"The type X.Person does not define isRunnable(T, T) that is applicable here\\n\" + "]}], "num": 5528}
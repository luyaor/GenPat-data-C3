{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e9be8a0cd5e3810b704b6c6fd716f87", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52d08029e00141f0154c32933856a6eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "4b3b23614cfca32dd53fa7e699914bb6d6883a79", "commitAfterChange": "497b69b47b38f18098b3c3fae687e15309c6bbc5", "methodNumberBeforeChange": 234, "methodNumberAfterChange": 234, "signatureBeforeChange": " \tpublic void test0220() throws JavaModelException", "signatureAfterChange": " \tpublic void test0220() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Wrong size\", 0, body.statements().size());", "-\t\tassertTrue(\"Not recovered\", isRecovered(body));", "+\t\tList statements = body.statements();", "+\t\tassertEquals(\"Wrong size\", 1, statements.size());", "+\t\tassertTrue(\"Recovered\", !isRecovered(body));", "+\t\t", "+\t\tStatement statement = (Statement)statements.get(0);", "+\t\tassertEquals(\"Not an enhanced for statement\", ASTNode.ENHANCED_FOR_STATEMENT, statement.getNodeType());", "+\t\tEnhancedForStatement enhancedForStatement = (EnhancedForStatement) statement;", "+\t\tStatement forBody = enhancedForStatement.getBody();", "+\t\tassertNotNull(\"No body\", forBody);", "+\t\tassertEquals(\"Not a block\", ASTNode.BLOCK, forBody.getNodeType());", "+\t\t", "+\t\tstatements = ((Block)forBody).statements();", "+\t\tassertEquals(\"Wrong size\", 1, statements.size());", "+\t\tstatement = (Statement)statements.get(0);", "+\t\tassertEquals(\"Not an try statement\", ASTNode.TRY_STATEMENT, statement.getNodeType());", "+\t\tTryStatement tryStatement = (TryStatement) statement;", "+\t\tBlock finallyBlock = tryStatement.getFinally();", "+\t\tassertNotNull(\"No finally block\", finallyBlock);", "+\t\tassertTrue(\"Not recovered\", isRecovered(finallyBlock));", "+\t\t", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70ebe68a25c83df0409d9f7b3c73cdab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTestAST3_2.java", "commitBeforeChange": "cc44d533509199a22dee3cb03412b30282a18add", "commitAfterChange": "dee23bd4f5a65ed282a3f4a7e19b637fd72cfc3b", "methodNumberBeforeChange": 314, "methodNumberAfterChange": 316, "signatureBeforeChange": " \tpublic void test0667() throws JavaModelException", "signatureAfterChange": " \tpublic void test0667_2() throws JavaModelException", "diff": ["+\t */", "+\tpublic void test0667_2() throws JavaModelException {", "+\t\tICompilationUnit workingCopy = null;", "+\t\ttry {", "+\t\t\tString contents =", "+\t\t\t\t\"import java.util.ArrayList;\\n\" +", "+\t\t\t\t\"\\n\" +", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tList foo() {\\n\" +", "+\t\t\t\t\"\t\treturn null;\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\";", "+\t\t\tworkingCopy = getWorkingCopy(\"/Converter/src/X.java\", true/*resolve*/);", "+\t\t\tASTNode node = buildAST(", "+\t\t\t\tcontents,", "+\t\t\t\tworkingCopy,", "+\t\t\t\tfalse,", "+\t\t\t\tfalse,", "+\t\t\t\ttrue);", "+\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\t\tCompilationUnit unit = (CompilationUnit) node;", "+\t\t\tString expectedError = \"List cannot be resolved to a type\";", "+\t\t\tassertProblemsSize(unit, 1, expectedError);", "+\t\t\tnode = getASTNode(unit, 0, 0);", "+\t\t\tassertEquals(\"Not a method declaration\", ASTNode.METHOD_DECLARATION, node.getNodeType());", "+\t\t\tMethodDeclaration declaration = (MethodDeclaration) node;", "+\t\t\tIMethodBinding binding = declaration.resolveBinding();", "-\t\t\tassertEquals(\"LX;.foo()LList;\", binding.getKey());\t\t\t\t", "+\t\t\tassertEquals(\"LX;.foo()LList;\", binding.getKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "757867f8479ed6e6a1a73436298007f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTestAST3_2.java", "commitBeforeChange": "0d655eb7c5734b22e978a732e9dc70711c6565d1", "commitAfterChange": "e8e6bc5be64017fb64d9068aa06ee69d945c7195", "methodNumberBeforeChange": 214, "methodNumberAfterChange": 214, "signatureBeforeChange": " \tpublic void _test0580() throws JavaModelException", "signatureAfterChange": " \tpublic void test0580() throws JavaModelException", "diff": ["-\tpublic void _test0580() throws JavaModelException {", "+\tpublic void test0580() throws JavaModelException {", "+\t\t\tString source = \"package p;\\n\" +", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"\td String[][]tab;\\n\" +", "+\t\t\t\"}\";", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"\td\\n\" +", "-\t\t\t\t\"\t\\n\" +", "-\t\t\t\t\"\tString[][]tab;\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\tworkingCopy);", "+\t\t\t\tsource,", "+\t\t\t\tworkingCopy,", "+\t\t\t\tfalse);", "+\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\t\tnode = getASTNode(compilationUnit, 0, 0);", "+\t\t\tassertEquals(\"wrong type\", ASTNode.FIELD_DECLARATION, node.getNodeType());", "+\t\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) node;", "+\t\t\tcheckSourceRange(fieldDeclaration, \"d String[][]\", source.toCharArray());", "+\t\t\tType type = fieldDeclaration.getType();", "+\t\t\tassertTrue(\"Not a simple type\", type.isSimpleType());", "+\t\t\tList fragments = fieldDeclaration.fragments();", "+\t\t\tassertEquals(\"Wrong size\", 1, fragments.size());", "+\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "+\t\t\tassertEquals(\"Wrong extended dimensions\", 2, fragment.getExtraDimensions());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7961778436351d6fc3a16f8dc2699908", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java", "commitBeforeChange": "6eb04387ef3ee5335f206eb99b3c936de2847d3d", "commitAfterChange": "b01f0952648a27a3dbc985907cc5ced8ba10ed91", "methodNumberBeforeChange": 213, "methodNumberAfterChange": 213, "signatureBeforeChange": " \tpublic void test0608() throws CoreException", "signatureAfterChange": " \tpublic void test0608() throws CoreException", "diff": ["-\t\t\tASTNode cu = buildAST(null, workingCopy, false, true);", "-\t\t\tassertNotNull(\"Should get an AST\", cu);", "+\t\t\tASTNode node = buildAST(null, workingCopy, false, true);", "+\t\t\tassertNotNull(\"Should get an AST\", node);", "+\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\t\tnode = getASTNode((CompilationUnit) node, 0, 0, 0);", "+\t\t\tassertEquals(\"Not a for statement\", ASTNode.FOR_STATEMENT, node.getNodeType());", "+\t\t\tForStatement forStatement = (ForStatement) node;", "+\t\t\tList initializers = forStatement.initializers();", "+\t\t\tassertEquals(\"Wrong size\", 1, initializers.size());", "+\t\t\tVariableDeclarationExpression expression = (VariableDeclarationExpression) initializers.get(0);", "+\t\t\tList fragments = expression.fragments();", "+\t\t\tassertEquals(\"Wrong size\", 1, fragments.size());", "+\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "+\t\t\tassertEquals(\"Wrong name\", \"i\", fragment.getName().getIdentifier());", "+\t\t\tassertTrue(\"Should be a recovered fragment\", isRecovered(expression));"]}], "num": 39221}
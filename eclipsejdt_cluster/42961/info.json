{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7dbe9c8226cfb29aea9133da349ac43d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da7f68fcdf33b24e71d0cf09af9d1c3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "928aa699a216cf69978cb24af1fa6f7f4cba1f20", "commitAfterChange": "9221731a3d20320a45d9e6a6337379d8a431c366", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic boolean checkNegative8() throws Exception", "signatureAfterChange": " \tpublic boolean checkNegative8() throws Exception", "diff": ["-\t\tif (!checkModel(rootElements, NEGATIVE_8_MODEL, \"Negative8\")) {", "+\t\tif (this.processingEnv.getSourceVersion() == SourceVersion.RELEASE_6) {", "+\t\t\tif (!checkModel(rootElements, NEGATIVE_8_MODEL_VERSION6, \"Negative8\")) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t} else if (!checkModel(rootElements, NEGATIVE_8_MODEL, \"Negative8\")) {", "-\t\t// check that specific elements are not here", "-\t\tsuffixes = new String[] {\"a\", \"b\", \"c\", \"d\"};", "-\t\tboolean result = true;", "-\t\tString errorMessage = \"\";", "-\t\tfor (int i = 0, l = suffixes.length; i < l; i++) {", "-\t\t\tTypeElement element = _elementUtils.getTypeElement(\"targets.negative.pa.Negative8\" + suffixes[i]);", "-\t\t\tif (! element.getInterfaces().isEmpty()) {", "-\t\t\t\terrorMessage += \"Element Negative8\" + suffixes[i] + \" has extraneous interfaces\\n\";", "-\t\t\t\tresult = false;", "-\t\t\t}", "-\t\t}", "-\t\tif (!result) {", "-\t\t\treportError(errorMessage);", "-\t\t}", "-\t\treturn result;", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f56877bb6d598cd5dfb12cec3bd32383", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "e8e4696c6b4df6d1a8d3d92e6556bb62baf2641a", "commitAfterChange": "4d3c57a6d316c63afbedae8dcbdb1593f599b949", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public String getJdkLevel()", "signatureAfterChange": " public String getJdkLevel()", "diff": ["-\t\t\t\t} else if (hasChildren()) { // TODO: (olivier) should not populate the model, but rather walk the filesystem/resources directly", "-\t\t\t\t\tIJavaElement[] javaElements = getChildren();", "-\t\t\t\t\tfor (int i = 0, max = javaElements.length; i < max; i++) {", "-\t\t\t\t\t\tIPackageFragment fragment = (IPackageFragment) javaElements[i];", "-\t\t\t\t\t\tif (fragment.hasChildren()) {", "-\t\t\t\t\t\t\tIClassFile classFile = fragment.getClassFiles()[0];", "-\t\t\t\t\t\t\tIFile file = (IFile) classFile.getUnderlyingResource();", "-\t\t\t\t\t\t\tbyte[] bytes = Util.getResourceContentsAsByteArray(file);", "-\t\t\t\t\t\t\tIPath location = file.getLocation();", "-\t\t\t\t\t\t\treader = new ClassFileReader(bytes, location == null ? null : location.toString().toCharArray());", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tIResource resource = getResource();", "+\t\t\t\t\tIFile classFile = null;", "+\t\t\t\t\tif (resource.getType() == IResource.FOLDER) {", "+\t\t\t\t\t\tclassFile = searchClassFile((IFolder) resource);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (classFile != null) {", "+\t\t\t\t\t\tbyte[] bytes = Util.getResourceContentsAsByteArray(classFile);", "+\t\t\t\t\t\tIPath location = classFile.getLocation();", "+\t\t\t\t\t\treader = new ClassFileReader(bytes, location == null ? null : location.toString().toCharArray());"]}], "num": 42961}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5648e90c1b5344ab68f512fd6e3437c1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18d2e28ed7bf49ffe5bc1e8df3365c1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tvoid buildMethods()", "signatureAfterChange": "  \tvoid buildMethods()", "diff": ["-\t\tfor (int i = 0; i < size; i++) {", "-\t\t\tif (i != clinitIndex) {", "-\t\t\t\tMethodScope scope = new MethodScope(this, methods[i], false);", "-\t\t\t\tMethodBinding methodBinding = scope.createMethod(methods[i]);", "-\t\t\t\tif (methodBinding != null) // is null if binding could not be created", "-\t\t\t\t\tmethodBindings[count++] = methodBinding;", "+\t\tif (sourceType.isAbstract()) {", "+\t\t\tfor (int i = 0; i < size; i++) {", "+\t\t\t\tif (i != clinitIndex) {", "+\t\t\t\t\tMethodScope scope = new MethodScope(this, methods[i], false);", "+\t\t\t\t\tMethodBinding methodBinding = scope.createMethod(methods[i]);", "+\t\t\t\t\tif (methodBinding != null) // is null if binding could not be created", "+\t\t\t\t\t\tmethodBindings[count++] = methodBinding;", "+\t\t\t\t}", "+\t\t} else {", "+\t\t\tMethodBinding[] abstractMethods = null;", "+\t\t\tfor (int i = 0; i < size; i++) {", "+\t\t\t\tif (i != clinitIndex) {", "+\t\t\t\t\tMethodScope scope = new MethodScope(this, methods[i], false);", "+\t\t\t\t\tMethodBinding methodBinding = scope.createMethod(methods[i]);", "+\t\t\t\t\tif (methodBinding != null) { // is null if binding could not be created", "+\t\t\t\t\t\tmethodBindings[count++] = methodBinding;", "+\t\t\t\t\t\tif (methodBinding.isAbstract()) {", "+\t\t\t\t\t\t\tif (abstractMethods == null) {", "+\t\t\t\t\t\t\t\tabstractMethods = new MethodBinding[] {methodBinding};", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tint length = abstractMethods.length;", "+\t\t\t\t\t\t\t\tSystem.arraycopy(abstractMethods, 0, abstractMethods = new MethodBinding[length + 1], 0, length);", "+\t\t\t\t\t\t\t\tabstractMethods[length] = methodBinding;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (abstractMethods != null)", "+\t\t\t\tproblemReporter().abstractMethodInAbstractClass(sourceType, abstractMethods);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92c1e06983abec918c8062d568f0a96f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "8d0a5299117e5fc84e729116ac52feef1385b968", "commitAfterChange": "527793c3501c0044ba7f65ec00ff957c7a149690", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic static IClasspathEntry newSourceEntry(IPath path, String[] exclusionPatterns)", "signatureAfterChange": " \tpublic static IClasspathEntry newSourceEntry(IPath path, String[] exclusionPatterns)", "diff": ["-\t\t", "+", "+\t\t// discard empty trimmed patterns", "+\t\t\tString[] trimmedPatterns = exclusionPatterns;", "+\t\tif (exclusionPatterns != null) {", "+\t\t\tint index = 0;", "+\t\t\tint patternCount = exclusionPatterns.length;", "+\t\t\tfor (int i = 0; i < patternCount; i++){", "+\t\t\t\tString pattern;", "+\t\t\t\tif ((pattern = exclusionPatterns[i]) == null) continue;", "+\t\t\t\tString trimmedPattern = exclusionPatterns[i].trim();", "+\t\t\t\tif (trimmedPattern.length() == 0) continue;", "+\t\t\t\t", "+\t\t\t\tif (pattern.length() == trimmedPattern.length()) {", "+\t\t\t\t\tif (trimmedPatterns == exclusionPatterns) { // clone if necessary", "+\t\t\t\t\t\tSystem.arraycopy(exclusionPatterns, 0, trimmedPatterns = new String[patternCount], 0, index);", "+\t\t\t\t\t}", "+\t\t\t\t\ttrimmedPatterns[index] = trimmedPattern;", "+\t\t\t\t}", "+\t\t\t\tindex++;", "+\t\t\t}", "+\t\t\tif (index != patternCount) {", "+\t\t\t\tif (index == 0) {", "+\t\t\t\t\ttrimmedPatterns = null;", "+\t\t\t\t} else {", "+\t\t\t\t\tSystem.arraycopy(trimmedPatterns, 0, trimmedPatterns = new String[index], 0, index);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}\t\t", "-\t\t\texclusionPatterns,", "+\t\t\ttrimmedPatterns,"]}], "num": 26306}
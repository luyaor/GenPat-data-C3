{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad44afc7f4ca523b6b4cdc1fed23816b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "366517a1c33860d932c697500943dca6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "ce1a50c038f410b16a75eb29a8e1c64f33a61360", "commitAfterChange": "e0b71f0955015294aa51eae2753decb6574d6e98", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "  \t\tpublic final int rewriteList(ASTNode parent, StructuralPropertyDescriptor property, int offset, String keyword)", "signatureAfterChange": "  \t\tpublic final int rewriteList(ASTNode parent, StructuralPropertyDescriptor property, int offset, String keyword)", "diff": ["+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=306524", "+\t\t\t\t\t// Check for leading comments that are not part of extended range, and prevent them", "+\t\t\t\t\t// from getting removed.", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tTokenScanner scanner = getScanner();", "+\t\t\t\t\t\tint newOffset = prevEnd;", "+\t\t\t\t\t\tint extendedOffset = getExtendedOffset(node);", "+\t\t\t\t\t\t// Try to find the end of the last comment which is not part of extended source", "+\t\t\t\t\t\t// range of the node.", "+\t\t\t\t\t\twhile (TokenScanner.isComment(scanner.readNext(newOffset, false))) {", "+\t\t\t\t\t\t\tint tempOffset = scanner.getNextEndOffset(newOffset, false);", "+\t\t\t\t\t\t\t// check whether the comment is part of extended source range of the node.", "+\t\t\t\t\t\t\t// If it is then we need to stop.", "+\t\t\t\t\t\t\tif (tempOffset < extendedOffset) {", "+\t\t\t\t\t\t\t\tnewOffset = tempOffset;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (currPos < newOffset) {", "+\t\t\t\t\t\t\tcurrPos = extendedOffset;", "+\t\t\t\t\t\t} ", "+\t\t\t\t\t\tprevEnd = newOffset;\t\t", "+\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\t// ignore", "+\t\t\t\t\t}", "+\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=306524", "+\t\t\t\t\t\t// Check for trailing comments that are not part of extended range, and prevent them", "+\t\t\t\t\t\t// from getting removed.", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tTokenScanner scanner = getScanner();", "+\t\t\t\t\t\t\tint nextToken= scanner.readNext(currEnd, false);", "+\t\t\t\t\t\t\tif (TokenScanner.isComment(nextToken)) {", "+\t\t\t\t\t\t\t\t// the separator also has comments that are not part of extended", "+\t\t\t\t\t\t\t\t// source range of this node or the next node. So dont remove the separator", "+\t\t\t\t\t\t\t\tif (end != scanner.getNextStartOffset(currEnd, false)) {", "+\t\t\t\t\t\t\t\t\t// If this condition were true, comments just found as part of the separator would've basically been", "+\t\t\t\t\t\t\t\t\t// part of the extended source range of the next node. So 'end' wud've safely been set to the correct position", "+\t\t\t\t\t\t\t\t\t// and no change is needed.", "+\t\t\t\t\t\t\t\t\tend = currEnd;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\t\t// ignore", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d060b8a222c6a025e394da75e7c7411", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "3e22d4d529a535a246fe403256ff1dc4151cc248", "commitAfterChange": "14ae0f182797d2ba7f6b9ecff74cd13258c4bc42", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "  \t\tpublic final int rewriteList(ASTNode parent, StructuralPropertyDescriptor property, int offset, String keyword)", "signatureAfterChange": "  \t\tpublic final int rewriteList(ASTNode parent, StructuralPropertyDescriptor property, int offset, String keyword)", "diff": ["-\t\t\t\t\t\t", "+\t\t\t\t\t\t// make sure that comments between last modified source position and extended starting position of", "+\t\t\t\t\t\t// node to be replaced are not touched", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tTokenScanner scanner = getScanner();", "+\t\t\t\t\t\t\tint newOffset = prevEnd;", "+\t\t\t\t\t\t\tint extendedOffset = getExtendedOffset(node);", "+\t\t\t\t\t\t\t// Try to find the end of the last comment which is not part of extended source", "+\t\t\t\t\t\t\t// range of the node.", "+\t\t\t\t\t\t\twhile (TokenScanner.isComment(scanner.readNext(newOffset, false))) {", "+\t\t\t\t\t\t\t\tint tempOffset = scanner.getNextEndOffset(newOffset, false);", "+\t\t\t\t\t\t\t\t// check whether the comment is part of extended source range of the node.", "+\t\t\t\t\t\t\t\t// If it is then we need to stop.", "+\t\t\t\t\t\t\t\tif (tempOffset < extendedOffset) {", "+\t\t\t\t\t\t\t\t\tnewOffset = tempOffset;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (currPos < newOffset) {", "+\t\t\t\t\t\t\t\tcurrPos = extendedOffset;", "+\t\t\t\t\t\t\t} \t\t", "+\t\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\t\t// ignore", "+\t\t\t\t\t\t}"]}], "num": 46659}
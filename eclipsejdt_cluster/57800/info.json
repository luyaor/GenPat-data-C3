{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1aec44e181f4027baf3096eea20ef0bf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "131c23cfc07029ae8f234fbdd17e2e9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "30dfd49146d073c0ca77ec54f45987be483492de", "commitAfterChange": "b6791838b5fdf2dfb8325a3a5a7e1c11f48ab412", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic final void computeConstant(TypeBinding leftType, TypeBinding rightType)", "signatureAfterChange": " \t \tpublic final void computeConstant(TypeBinding leftType, TypeBinding rightType)", "diff": ["-\t\tif ((this.left.constant != NotAConstant) && (this.right.constant != NotAConstant)) {", "+\t\tif ((this.left.constant != Constant.NotAConstant) && (this.right.constant != Constant.NotAConstant)) {", "-\t\t\tthis.constant = NotAConstant;", "+\t\t\tthis.constant = Constant.NotAConstant;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4242df94c3406b6ee5878fa398bd8761", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "30dfd49146d073c0ca77ec54f45987be483492de", "commitAfterChange": "b6791838b5fdf2dfb8325a3a5a7e1c11f48ab412", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tconstant = NotAConstant;\t\t", "+\t\t\tconstant = Constant.NotAConstant;\t\t", "-\t\t\t\tconstant = NotAConstant;", "+\t\t\t\tconstant = Constant.NotAConstant;", "-\t\tconstant = NotAConstant;", "+\t\tconstant = Constant.NotAConstant;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c2e53d03b6dea8abe4fba6b978c871a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "30dfd49146d073c0ca77ec54f45987be483492de", "commitAfterChange": "b6791838b5fdf2dfb8325a3a5a7e1c11f48ab412", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tthis.constant = NotAConstant;", "+\tthis.constant = Constant.NotAConstant;", "-\t\t\t\t\tthis.constant = NotAConstant;", "+\t\t\t\t\tthis.constant = Constant.NotAConstant;", "-\t\t\t\tthis.constant = NotAConstant;", "+\t\t\t\tthis.constant = Constant.NotAConstant;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b47efbe687657b397cfbb8277a0ffa88", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "30dfd49146d073c0ca77ec54f45987be483492de", "commitAfterChange": "b6791838b5fdf2dfb8325a3a5a7e1c11f48ab412", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tboolean isConditionTrue = cst != NotAConstant && cst.booleanValue() == true;", "+\t\tboolean isConditionTrue = cst != Constant.NotAConstant && cst.booleanValue() == true;", "-\t\tboolean isConditionOptimizedTrue = cst != NotAConstant && cst.booleanValue() == true;", "-\t\tboolean isConditionOptimizedFalse = cst != NotAConstant && cst.booleanValue() == false;", "+\t\tboolean isConditionOptimizedTrue = cst != Constant.NotAConstant && cst.booleanValue() == true;", "+\t\tboolean isConditionOptimizedFalse = cst != Constant.NotAConstant && cst.booleanValue() == false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0abb23d5226b89372eb2c77f5d76e64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CaseStatement.java", "commitBeforeChange": "30dfd49146d073c0ca77ec54f45987be483492de", "commitAfterChange": "b6791838b5fdf2dfb8325a3a5a7e1c11f48ab412", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic Constant resolveCase( \t\tBlockScope scope, \t\tTypeBinding switchExpressionType, \t\tSwitchStatement switchStatement)", "signatureAfterChange": " \tpublic Constant resolveCase( \t\tBlockScope scope, \t\tTypeBinding switchExpressionType, \t\tSwitchStatement switchStatement)", "diff": ["-\t\t\treturn NotAConstant;", "+\t\t\treturn Constant.NotAConstant;", "-\t\tif (caseType == null || switchExpressionType == null) return NotAConstant;", "+\t\tif (caseType == null || switchExpressionType == null) return Constant.NotAConstant;", "-\t\treturn NotAConstant;", "+\t\treturn Constant.NotAConstant;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4eb0b48dc71ee2489d260b2cb9556a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "30dfd49146d073c0ca77ec54f45987be483492de", "commitAfterChange": "b6791838b5fdf2dfb8325a3a5a7e1c11f48ab412", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["-\t\t\t\t\tthis.returnAddressVariable.setConstant(NotAConstant); // not inlinable", "+\t\t\t\t\tthis.returnAddressVariable.setConstant(Constant.NotAConstant); // not inlinable", "-\t\t\t\tthis.anyExceptionVariable.setConstant(NotAConstant); // not inlinable", "+\t\t\t\tthis.anyExceptionVariable.setConstant(Constant.NotAConstant); // not inlinable", "-\t\t\t\t\t\t\tthis.secretReturnValue.setConstant(NotAConstant); // not inlinable", "+\t\t\t\t\t\t\tthis.secretReturnValue.setConstant(Constant.NotAConstant); // not inlinable"]}], "num": 57800}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2842612f0740abab066553a02376ac8c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d70c25ccdda5d918647a53767fc49aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "1369ee539fab963cb9212bc0e7728c8e7ea1581c", "commitAfterChange": "8677d75931646723a12e1b4ccafa141861462004", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 148, "signatureBeforeChange": " public void parseError( \tint startPosition,  \tint endPosition,  \tchar[] currentTokenSource,  \tString errorTokenName,  \tString[] possibleTokens)", "signatureAfterChange": " public void parseError( \tint startPosition,  \tint endPosition,  \tchar[] currentTokenSource,  \tString errorTokenName,  \tString[] possibleTokens)", "diff": ["+}", "+\t\t\tString[] arguments = new String[] {new String(currentTokenSource)};", "-\t\t\t\tnew String[] {new String(currentTokenSource)},", "+\t\t\t\targuments,", "+\t\t\t\targuments,", "+\t\t\tString[] arguments = new String[] {errorTokenName};", "-\t\t\t\tnew String[] {errorTokenName},", "+\t\t\t\targuments,", "+\t\t\t\targuments,", "+\t\tString[] arguments = new String[] {new String(currentTokenSource), list.toString()};", "-\t\t\tnew String[] {new String(currentTokenSource), list.toString()},", "+\t\t\targuments,", "+\t\t\targuments,", "+\tString[] arguments = new String[] {errorTokenName, list.toString()};", "-\t\tnew String[] {errorTokenName, list.toString()},", "+\t\targuments,", "+\t\targuments,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a90b0f98819f55ff3496de6ed89e358a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/EvaluationContext.java", "commitBeforeChange": "1369ee539fab963cb9212bc0e7728c8e7ea1581c", "commitAfterChange": "8677d75931646723a12e1b4ccafa141861462004", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void evaluateImports(INameEnvironment environment, IRequestor requestor, IProblemFactory problemFactory)", "signatureAfterChange": " public void evaluateImports(INameEnvironment environment, IRequestor requestor, IProblemFactory problemFactory)", "diff": ["-\t\t\t\t\tproblems[0] = problemFactory.createProblem(importDeclaration, IProblem.ImportNotFound, new String[] {new String(importDeclaration)}, ProblemSeverities.Warning, 0, importDeclaration.length - 1, i);", "+\t\t\t\t\tString[] arguments = new String[] {new String(importDeclaration)};", "+\t\t\t\t\tproblems[0] = problemFactory.createProblem(importDeclaration, IProblem.ImportNotFound, arguments, arguments, ProblemSeverities.Warning, 0, importDeclaration.length - 1, i);", "-\t\t\t\t\tproblems[0] = problemFactory.createProblem(importDeclaration, IProblem.ImportNotFound, new String[] {new String(importDeclaration)}, ProblemSeverities.Warning, 0, importDeclaration.length - 1, i);", "+\t\t\t\t\tString[] arguments = new String[] {new String(importDeclaration)};", "+\t\t\t\t\tproblems[0] = problemFactory.createProblem(importDeclaration, IProblem.ImportNotFound, arguments, arguments, ProblemSeverities.Warning, 0, importDeclaration.length - 1, i);", "-\t\t\tproblems[0] = problemFactory.createProblem(importDeclaration, IProblem.ImportNotFound, new String[] {new String(importDeclaration)}, ProblemSeverities.Warning, 0, importDeclaration.length - 1, i);", "+\t\t\tString[] arguments = new String[] {new String(importDeclaration)};", "+\t\t\tproblems[0] = problemFactory.createProblem(importDeclaration, IProblem.ImportNotFound, arguments, arguments, ProblemSeverities.Warning, 0, importDeclaration.length - 1, i);"]}], "num": 16748}
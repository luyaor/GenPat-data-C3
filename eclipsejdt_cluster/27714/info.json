{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce947a303be688babbd35f09d7af57be", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c0194dbf6fe801cf68289032317141f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "7cd8d4cd3f07fb844c8ea150f6fb9724f3e46dcf", "commitAfterChange": "89234b4d1eb7fc153ecbcc19fc64f47a51c3398d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 15, "signatureBeforeChange": "  protected boolean isClassFileChanged(IFile file, String fileName, byte[] newBytes) throws CoreException", "signatureAfterChange": "  protected boolean writeClassFileCheck(IFile file, String fileName, byte[] newBytes) throws CoreException", "diff": ["-protected boolean isClassFileChanged(IFile file, String fileName, byte[] newBytes) throws CoreException {", "-\ttry {", "-\t\tbyte[] oldBytes = Util.getResourceContentsAsByteArray(file);", "-\t\tnotEqual : if (newBytes.length == oldBytes.length) {", "-\t\t\tfor (int i = newBytes.length; --i >= 0;)", "-\t\t\t\tif (newBytes[i] != oldBytes[i]) break notEqual;", "-\t\t\treturn false; // bytes are identical so skip them", "-\t\t}", "-\t\tClassFileReader reader = new ClassFileReader(oldBytes, file.getLocation().toString().toCharArray());", "-\t\t// ignore local types since they're only visible inside a single method", "-\t\tif (!(reader.isLocal() || reader.isAnonymous()) && reader.hasStructuralChanges(newBytes)) {", "-\t\t\tif (JavaBuilder.DEBUG)", "-\t\t\t\tSystem.out.println(\"Type has structural changes \" + fileName); //$NON-NLS-1$", "-\t\t\taddDependentsOf(new Path(fileName), true);", "-\t\t}", "-\t} catch (ClassFormatException e) {", "-\t\taddDependentsOf(new Path(fileName), true);", "-\t}", "-\treturn true;", "-}", "+protected boolean writeClassFileCheck(IFile file, String fileName, byte[] newBytes) throws CoreException {", "+\ttry {", "+\t\tbyte[] oldBytes = Util.getResourceContentsAsByteArray(file);", "+\t\tnotEqual : if (newBytes.length == oldBytes.length) {", "+\t\t\tfor (int i = newBytes.length; --i >= 0;)", "+\t\t\t\tif (newBytes[i] != oldBytes[i]) break notEqual;", "+\t\t\treturn false; // bytes are identical so skip them", "+\t\t}", "+\t\tClassFileReader reader = new ClassFileReader(oldBytes, file.getLocation().toString().toCharArray());", "+\t\t// ignore local types since they're only visible inside a single method", "+\t\tif (!(reader.isLocal() || reader.isAnonymous()) && reader.hasStructuralChanges(newBytes)) {", "+\t\t\tif (JavaBuilder.DEBUG)", "+\t\t\t\tSystem.out.println(\"Type has structural changes \" + fileName); //$NON-NLS-1$", "+\t\t\taddDependentsOf(new Path(fileName), true);", "+\t\t}", "+\t} catch (ClassFormatException e) {", "+\t\taddDependentsOf(new Path(fileName), true);", "+\t}", "+\treturn true;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "624eb0cba34eb2ba630fd9b4d9ac77d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "2e1e850482d90086f267196870c1a847d5fe0441", "commitAfterChange": "7cd8d4cd3f07fb844c8ea150f6fb9724f3e46dcf", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "  protected boolean writeClassFileCheck(IFile file, String fileName, byte[] newBytes, boolean isSecondaryType) throws CoreException", "signatureAfterChange": "  protected void writeClassFileBytes(byte[] bytes, IFile file, String qualifiedFileName, boolean isSecondaryType) throws CoreException", "diff": ["-protected boolean writeClassFileCheck(IFile file, String fileName, byte[] newBytes, boolean isSecondaryType) throws CoreException {", "+protected void writeClassFileBytes(byte[] bytes, IFile file, String qualifiedFileName, boolean isSecondaryType) throws CoreException {", "-\t\ttry {", "-\t\t\tbyte[] oldBytes = Util.getResourceContentsAsByteArray(file);", "-\t\t\tnotEqual : if (newBytes.length == oldBytes.length) {", "-\t\t\t\tfor (int i = newBytes.length; --i >= 0;)", "-\t\t\t\t\tif (newBytes[i] != oldBytes[i]) break notEqual;", "-\t\t\t\treturn false; // bytes are identical so skip them", "-\t\t\t}", "-\t\t\tClassFileReader reader = new ClassFileReader(oldBytes, file.getLocation().toString().toCharArray());", "-\t\t\t// ignore local types since they're only visible inside a single method", "-\t\t\tif (!(reader.isLocal() || reader.isAnonymous()) && reader.hasStructuralChanges(newBytes)) {", "-\t\t\t\tif (JavaBuilder.DEBUG)", "-\t\t\t\t\tSystem.out.println(\"Type has structural changes \" + fileName); //$NON-NLS-1$", "-\t\t\t\taddDependentsOf(new Path(fileName), true);", "-\t\t\t}", "-\t\t} catch (ClassFormatException e) {", "-\t\t\taddDependentsOf(new Path(fileName), true);", "+\t\tif (isClassFileChanged(file, qualifiedFileName, bytes)) {", "+\t\t\tif (JavaBuilder.DEBUG)", "+\t\t\t\tSystem.out.println(\"Writing changed class file \" + file.getName());//$NON-NLS-1$", "+\t\t\tfile.setContents(new ByteArrayInputStream(bytes), true, false, null);", "+\t\t} else if (JavaBuilder.DEBUG) {", "+\t\t\tSystem.out.println(\"Skipped over unchanged class file \" + file.getName());//$NON-NLS-1$", "-", "-\t\tfile.delete(IResource.FORCE, null);", "-\t} else if (isSecondaryType) {", "-\t\taddDependentsOf(new Path(fileName), true); // new secondary type", "+\t} else {", "+\t\tif (isSecondaryType)", "+\t\t\taddDependentsOf(new Path(qualifiedFileName), true); // new secondary type", "+\t\tsuper.writeClassFileBytes(bytes, file, qualifiedFileName, isSecondaryType);", "-\treturn true;"]}], "num": 27714}
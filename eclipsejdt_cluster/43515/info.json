{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c54f904736f077d841a90621a2d635a4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b36fa46c2069e9eda89ba38215527883", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "165d2ee0a4a374ec3dbb0f3df780db24664ac692", "commitAfterChange": "146dc3b7afcca724ac2ba30b2cbb382c047a5a77", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "signatureAfterChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "diff": ["-\t\t\t// Read possible array declaration", "+\t\t\t// Read possible additional type info", "+\t\t\tboolean isVarargs = false;", "+\t\t\t\t// array declaration", "+\t\t\t} else if (readToken() == TerminalTokens.TokenNameELLIPSIS) {", "+\t\t\t\t// ellipsis declaration", "+\t\t\t\tint dimStart = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\tdimPositions[dim++] = (((long) dimStart) << 32) + this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\tconsumeToken();", "+\t\t\t\tisVarargs = true;", "-\t\t\t\tObject argument = createArgumentReference(name, dim, typeRef, dimPositions, argNamePos);", "+\t\t\t\tObject argument = createArgumentReference(name, dim, isVarargs, typeRef, dimPositions, argNamePos);", "-\t\t\t\tObject argument = createArgumentReference(name, dim, typeRef, dimPositions, argNamePos);", "+\t\t\t\tObject argument = createArgumentReference(name, dim, isVarargs, typeRef, dimPositions, argNamePos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e15ab25f946f56f9e05519ac607ab509", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "ac2c3539b72e65a4a4e0b168769da151e63c5ff1", "commitAfterChange": "014710437062a15282800b8efb747a8973068ba8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "signatureAfterChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "diff": ["-\t\t\tint argEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\tlong dimPos = -1;", "+\t\t\t\tint dimStart = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\tdimPos = (((long) dimStart) << 32) + this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\targEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\tlong argNamePos = -1;", "-\t\t\t\targEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\targNamePos = (((long)this.scanner.getCurrentTokenStartPosition())<<32)+this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\tObject argument = createArgumentReference(name, dim, typeRef, argEnd);", "+\t\t\t\tObject argument = createArgumentReference(name, dim, typeRef, dimPos, argNamePos);", "-\t\t\t\tObject argument = createArgumentReference(name, dim, typeRef, argEnd);", "+\t\t\t\tObject argument = createArgumentReference(name, dim, typeRef, dimPos, argNamePos);"]}], "num": 43515}
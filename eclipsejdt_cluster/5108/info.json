{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4fc782b5cd21252e288b9437b7ae0304", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b18154668a63877384dc8c4241e5347", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 283, "methodNumberAfterChange": 293, "signatureBeforeChange": " protected void consumeStatementTry(boolean withFinally)", "signatureAfterChange": " protected void consumeStatementTry(boolean withFinally, boolean hasResources)", "diff": ["-protected void consumeStatementTry(boolean withFinally) {", "-\t//TryStatement ::= 'try'  Block Catches", "-\t//TryStatement ::= 'try'  Block Catchesopt Finally", "-", "+protected void consumeStatementTry(boolean withFinally, boolean hasResources) {", "+\t// TryStatement ::= 'try'  Block Catches", "+\t// TryStatement ::= 'try'  Block Catchesopt Finally", "+\t// TryStatementWithResources ::= 'try' ResourceSpecification TryBlock Catchesopt", "+\t// TryStatementWithResources ::= 'try' ResourceSpecification TryBlock Catchesopt Finally", "+\t", "+\tif (hasResources) {", "+\t\t// get the resources", "+\t\tlength = this.astLengthStack[this.astLengthPtr--];", "+\t\tLocalDeclaration[] resources = new LocalDeclaration[length];", "+\t\tSystem.arraycopy(", "+\t\t\t\tthis.astStack,", "+\t\t\t\t(this.astPtr -= length) + 1,", "+\t\t\t\tresources,", "+\t\t\t\t0,", "+\t\t\t\tlength);", "+\t\ttryStmt.resources = resources;", "+\t\tif (this.options.sourceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\tproblemReporter().autoManagedResourcesNotBelow17(resources);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "572b74b81996656dd27fc80894e47709", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "1e302d0e8b80cb29d9d8ffac754bc44f21cd1c12", "commitAfterChange": "7e61b3f01f8b2328acee556fdc4ddf75c1702dd3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate Object reduceTypeEquality()", "signatureAfterChange": "  \tprivate Object reduceTypeEquality(TypeBinding object)", "diff": ["-\tprivate Object reduceTypeEquality() {", "+\tprivate Object reduceTypeEquality(TypeBinding object) {", "+\t\t\t\t// left and right are wildcards (\"type arguments\")", "-\t\t\t\tif (leftWC.bound == null && rightWC.bound == null)", "+\t\t\t\tif (leftWC.boundKind == Wildcard.UNBOUND && rightWC.boundKind == Wildcard.UNBOUND)", "+\t\t\t\tif (leftWC.boundKind == Wildcard.UNBOUND && rightWC.boundKind == Wildcard.EXTENDS)", "+\t\t\t\t\treturn new ConstraintTypeFormula(object, rightWC.bound, SAME, this.isSoft);", "+\t\t\t\tif (leftWC.boundKind == Wildcard.EXTENDS && rightWC.boundKind == Wildcard.UNBOUND)", "+\t\t\t\t\treturn new ConstraintTypeFormula(leftWC.bound, object, SAME, this.isSoft);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57bd3d0d432d6296ebb2b81f57dc1348", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 154, "signatureBeforeChange": " protected void consumeFormalParameter()", "signatureAfterChange": " protected void consumeFormalParameter(boolean isVarArgs)", "diff": ["-protected void consumeFormalParameter() {", "+protected void consumeFormalParameter(boolean isVarArgs) {", "-\tastStack : ", "-\tidentifierStack : type identifier", "-\tintStack : dim dim", "+\tthis.astStack : ", "+\tthis.identifierStack : type identifier", "+\tthis.intStack : dim dim", "-\tastStack : Argument", "-\tidentifierStack :  ", "-\tintStack :  ", "+\tthis.astStack : Argument", "+\tthis.identifierStack :  ", "+\tthis.intStack :  ", "-\t\t\tthis.intStack[this.intPtr + 1] & ~AccDeprecated); // modifiers", "+\t\t\tthis.intStack[this.intPtr + 1] & ~AccDeprecated,", "+\t\t\tisVarArgs); // modifiers", "+\t// consume annotations", "+\tint length;", "+\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.expressionStack, ", "+\t\t\t(this.expressionPtr -= length) + 1, ", "+\t\t\targ.annotations = new Annotation[length], ", "+\t\t\t0, ", "+\t\t\tlength); ", "+\t}", "-\t/* if incomplete method header, listLength counter will not have been reset,", "+\t/* if incomplete method header, this.listLength counter will not have been reset,", "+\t", "+\tif(isVarArgs &&", "+\t\t\toptions.sourceLevel < ClassFileConstants.JDK1_5 &&", "+\t\t\tthis.lastErrorEndPositionBeforeRecovery < this.scanner.currentPosition) {", "+\t\tthis.problemReporter().invalidUsageOfVarargs(arg);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8059a84a2f45871e00763c40480578af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " protected ParameterizedQualifiedTypeReference computeQualifiedGenericsFromRightSide(TypeReference rightSide, int dim)", "signatureAfterChange": " protected ParameterizedQualifiedTypeReference computeQualifiedGenericsFromRightSide(TypeReference rightSide, int dim)", "diff": ["+\tAnnotation [][] annotationsOnDimensions = dim == 0 ? null : getAnnotationsOnDimensions(dim);", "-\treturn new ParameterizedQualifiedTypeReference(tokens, typeArguments, dim, positions);", "+\tParameterizedQualifiedTypeReference typeRef = new ParameterizedQualifiedTypeReference(tokens, typeArguments, dim, annotationsOnDimensions, positions);", "+\tint length;", "+\tif (this.typeAnnotationLengthPtr >= 0 && (length = this.typeAnnotationLengthStack[this.typeAnnotationLengthPtr--]) != 0) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.typeAnnotationStack,", "+\t\t\t(this.typeAnnotationPtr -= length) + 1,", "+\t\t\ttypeRef.annotations = new Annotation[length],", "+\t\t\t0,", "+\t\t\tlength);", "+\t\ttypeRef.sourceStart = typeRef.annotations[0].sourceStart;", "+\t\ttypeRef.bits |= ASTNode.HasTypeAnnotations;", "+\t}", "+\treturn typeRef;"]}], "num": 5108}
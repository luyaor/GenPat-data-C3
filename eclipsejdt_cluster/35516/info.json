{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bad457df25056d9fa6a26eeed00c2405", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2de77cdd63e6a0e7169d82ec0c5be08b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/ExternalAnnotationUtil.java", "commitBeforeChange": "689526016f6ab442680e718d2760fc44e79dd9b5", "commitAfterChange": "ac25cb5f287628ef6e76b4074a6daea1d0d0dfb7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static String extractGenericSignature(IMethodBinding methodBinding)", "signatureAfterChange": " \tpublic static String extractGenericSignature(IMethodBinding methodBinding)", "diff": ["-\t\t// Note that IMethodBinding.binding is not accessible, hence we need to reverse engineer from the key:", "-\t\t", "-\t\t// method key contains the signature between '(' and '|': \"class.selector(params)return|throws\"", "-\t\tint open= methodBinding.getKey().indexOf('(');", "-\t\tint throwStart= methodBinding.getKey().indexOf('|');", "-\t\treturn throwStart == -1 ? methodBinding.getKey().substring(open) : methodBinding.getKey().substring(open, throwStart);", "+\t\t// Note that IMethodBinding.binding is not accessible, hence we need to recover the signature from the key:", "+\t\tKeyToSignature parser = new KeyToSignature(methodBinding.getKey(), KeyToSignature.SIGNATURE, true);", "+\t\tparser.parse();", "+\t\treturn parser.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "418940da57e27cea22c8a462246a050d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/ExternalAnnotationUtil.java", "commitBeforeChange": "689526016f6ab442680e718d2760fc44e79dd9b5", "commitAfterChange": "ac25cb5f287628ef6e76b4074a6daea1d0d0dfb7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static String extractGenericTypeSignature(ITypeBinding type)", "signatureAfterChange": " \tpublic static String extractGenericTypeSignature(ITypeBinding type)", "diff": ["-\t\tString key = type.getKey();", "-\t\tif (type.isTypeVariable()) {", "-\t\t\tint colon= key.indexOf(':');", "-\t\t\tif (colon > -1)", "-\t\t\t\treturn key.substring(colon+1); // cut of unwanted declaring type prefix", "-\t\t}", "-\t\treturn key;", "+\t\tKeyToSignature parser = new KeyToSignature(type.getKey(), KeyToSignature.SIGNATURE, true);", "+\t\tparser.parse();", "+\t\treturn parser.toString();"]}], "num": 35516}
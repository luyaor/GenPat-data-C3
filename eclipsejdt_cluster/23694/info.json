{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "822c2f01561118591bcbe669dac316ff", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52f79665a89ec11236862ee5aa8a76d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "df26c679ec361eae61785b6b440639645b574764", "commitAfterChange": "7e822612c4ed17c5f501a36859d0f7cd7f1c210d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public synchronized IndexLocation computeIndexLocation(IPath containerPath)", "signatureAfterChange": " public synchronized IndexLocation computeIndexLocation(IPath containerPath, final URL newIndexURL)", "diff": ["+ */", "+public synchronized IndexLocation computeIndexLocation(IPath containerPath, final URL newIndexURL) {", "+\tIndexLocation indexLocation = (IndexLocation) this.indexLocations.get(containerPath);", "+\tif (indexLocation == null) {", "+\t\tif(newIndexURL != null) {", "+\t\t\tindexLocation = IndexLocation.createIndexLocation(newIndexURL);", "+\t\t\t// update caches", "+\t\t\tindexLocation = (IndexLocation) getIndexStates().getKey(indexLocation);", "+\t\t\tthis.indexLocations.put(containerPath, indexLocation);", "+\t\t}", "+\t}", "+\telse {", "+\t\t// an existing index location exists - make sure it has not changed (i.e. the URL has not changed)", "+\t\tURL existingURL = indexLocation.getUrl();", "+\t\tif (newIndexURL != null) {", "+\t\t\t// if either URL is different then the index location has been updated so rebuild.", "+\t\t\tif(!newIndexURL.equals(existingURL)) {", "+\t\t\t\t// URL has changed so remove the old index and create a new one", "+\t\t\t\tthis.removeIndex(containerPath);", "+\t\t\t\t// create a new one", "+\t\t\t\tindexLocation = IndexLocation.createIndexLocation(newIndexURL);", "+\t\t\t\t// update caches", "+\t\t\t\tindexLocation = (IndexLocation) getIndexStates().getKey(indexLocation);", "+\t\t\t\tthis.indexLocations.put(containerPath, indexLocation);", "+\t\t\t}", "+\t\t}", "+\t}", "+\treturn indexLocation;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f22e1459f61114c9749a70662a2d90a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "0790094c582259a11cb5775cf9802758597e2f7f", "commitAfterChange": "8631fe374a0c007fcac770c2d9427a82a5e04a3d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public synchronized IndexLocation computeIndexLocation(IPath containerPath)", "signatureAfterChange": " public synchronized IndexLocation computeIndexLocation(IPath containerPath, final URL newIndexURL)", "diff": ["+ */", "+public synchronized IndexLocation computeIndexLocation(IPath containerPath, final URL newIndexURL) {", "+\tIndexLocation indexLocation = (IndexLocation) this.indexLocations.get(containerPath);", "+\tif (indexLocation == null) {", "+\t\tif(newIndexURL != null) {", "+\t\t\tindexLocation = IndexLocation.createIndexLocation(newIndexURL);", "+\t\t\t// update caches", "+\t\t\tindexLocation = (IndexLocation) getIndexStates().getKey(indexLocation);", "+\t\t\tthis.indexLocations.put(containerPath, indexLocation);", "+\t\t}", "+\t}", "+\telse {", "+\t\t// an existing index location exists - make sure it has not changed (i.e. the URL has not changed)", "+\t\tURL existingURL = indexLocation.getUrl();", "+\t\tif (newIndexURL != null) {", "+\t\t\t// if either URL is different then the index location has been updated so rebuild.", "+\t\t\tif(!newIndexURL.equals(existingURL)) {", "+\t\t\t\t// URL has changed so remove the old index and create a new one", "+\t\t\t\tthis.removeIndex(containerPath);", "+\t\t\t\t// create a new one", "+\t\t\t\tindexLocation = IndexLocation.createIndexLocation(newIndexURL);", "+\t\t\t\t// update caches", "+\t\t\t\tindexLocation = (IndexLocation) getIndexStates().getKey(indexLocation);", "+\t\t\t\tthis.indexLocations.put(containerPath, indexLocation);", "+\t\t\t}", "+\t\t}", "+\t}", "+\treturn indexLocation;"]}], "num": 23694}
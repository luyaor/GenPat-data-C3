{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b7cf787afa11a07ad5a44b31d0073f5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2d72d46bf8121ee14c7b6dbacf74b7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "signatureAfterChange": " public MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "diff": ["-// searches up the hierarchy as long as no potential (but not exact) match was found.", "-public MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope) {", "-\t// sender from refScope calls recordTypeReference(this)", "-\tint argCount = argumentTypes.length;", "-\tint selectorLength = selector.length;", "-\tboolean foundNothing = true;", "-", "-\tif ((tagBits & TagBits.AreMethodsComplete) != 0) { // have resolved all arg types & return type of the methods", "-\t\tnextMethod : for (int m = methods.length; --m >= 0;) {", "-\t\t\tMethodBinding method = methods[m];", "-\t\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "-\t\t\t\tfoundNothing = false; // inner type lookups must know that a method with this name exists", "-\t\t\t\t\tfor (int p = 0; p < argCount; p++)", "-\t\t\t\t\t\tif (toMatch[p] != argumentTypes[p])", "-\t\tMethodBinding[] matchingMethods = getMethods(selector); // takes care of duplicates & default abstract methods", "-\t\tfoundNothing = matchingMethods == Binding.NO_METHODS;", "-\t\tnextMethod : for (int m = matchingMethods.length; --m >= 0;) {", "-\t\t\tMethodBinding method = matchingMethods[m];", "-\t\t\tTypeBinding[] toMatch = method.parameters;", "-\t\t\tif (toMatch.length == argCount) {", "-\t\t\t\tfor (int p = 0; p < argCount; p++)", "-\t\t\t\t\tif (toMatch[p] != argumentTypes[p])", "-\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\treturn method;", "+//searches up the hierarchy as long as no potential (but not exact) match was found.", "+public MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope) {", "+\t// sender from refScope calls recordTypeReference(this)", "+\tint argCount = argumentTypes.length;", "+\tboolean foundNothing = true;", "+", "+\tif ((this.tagBits & TagBits.AreMethodsComplete) != 0) { // have resolved all arg types & return type of the methods", "+\t\tlong range;", "+\t\tif ((range = ReferenceBinding.binarySearch(selector, this.methods)) >= 0) {", "+\t\t\tnextMethod: for (int imethod = (int)range, end = (int)(range >> 32); imethod <= end; imethod++) {", "+\t\t\t\tMethodBinding method = this.methods[imethod];\t\t\t", "+\t\t\t\tfoundNothing = false; // inner type lookups must know that a method with this name exists", "+\t\t\t\tif (method.parameters.length == argCount) {", "+\t\t\t\t\tTypeBinding[] toMatch = method.parameters;", "+\t\t\t\t\tfor (int iarg = 0; iarg < argCount; iarg++)", "+\t\t\t\t\t\tif (toMatch[iarg] != argumentTypes[iarg])", "+\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\treturn method;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t} else {", "+\t\t// lazily sort methods", "+\t\tif ((this.tagBits & TagBits.AreMethodsSorted) == 0) {", "+\t\t\tint length = this.methods.length;", "+\t\t\tif (length > 1) \tReferenceBinding.sortMethods(this.methods, 0, length - 1);", "+\t\t\tthis.tagBits |= TagBits.AreMethodsSorted;", "+\t\t}", "+\t\t", "+\t\tlong range;", "+\t\tif ((range = ReferenceBinding.binarySearch(selector, this.methods)) >= 0) {", "+\t\t\t// check unresolved method", "+\t\t\tint start = (int) range, end = (int) (range >> 32);", "+\t\t\tfor (int imethod = start; imethod <= end; imethod++) {", "+\t\t\t\tMethodBinding method = this.methods[imethod];\t\t\t", "+\t\t\t\tif (resolveTypesFor(method) == null || method.returnType == null) {", "+\t\t\t\t\tmethods();", "+\t\t\t\t\treturn getExactMethod(selector, argumentTypes, refScope); // try again since the problem methods have been removed", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// check dup collisions", "+\t\t\tboolean isSource15 = this.scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5;", "+\t\t\tfor (int i = start; i <= end; i++) {", "+\t\t\t\tMethodBinding method1 = this.methods[i];", "+\t\t\t\tfor (int j = end; j > i; j--) {", "+\t\t\t\t\tMethodBinding method2 = this.methods[j];", "+\t\t\t\t\tboolean paramsMatch = isSource15", "+\t\t\t\t\t\t? method1.areParameterErasuresEqual(method2)", "+\t\t\t\t\t\t: method1.areParametersEqual(method2);", "+\t\t\t\t\tif (paramsMatch) {", "+\t\t\t\t\t\tmethods();", "+\t\t\t\t\t\treturn getExactMethod(selector, argumentTypes, refScope); // try again since the problem methods have been removed", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tnextMethod: for (int imethod = start; imethod <= end; imethod++) {", "+\t\t\t\tMethodBinding method = this.methods[imethod];\t\t\t\t\t\t", "+\t\t\t\tTypeBinding[] toMatch = method.parameters;", "+\t\t\t\tif (toMatch.length == argCount) {", "+\t\t\t\t\tfor (int iarg = 0; iarg < argCount; iarg++) {", "+\t\t\t\t\t\tif (toMatch[iarg] != argumentTypes[iarg]) {", "+\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\treturn method;", "+\t\t\t\t}", "+\t\t\t}\t\t\t\t", "-\t\t\t if (superInterfaces.length == 1) {", "+\t\t\t if (this.superInterfaces.length == 1) {", "-\t\t\t\t\trefScope.recordTypeReference(superInterfaces[0]);", "-\t\t\t\treturn superInterfaces[0].getExactMethod(selector, argumentTypes, refScope);", "+\t\t\t\t\trefScope.recordTypeReference(this.superInterfaces[0]);", "+\t\t\t\treturn this.superInterfaces[0].getExactMethod(selector, argumentTypes, refScope);", "-\t\t} else if (superclass != null) {", "+\t\t} else if (this.superclass != null) {", "-\t\t\t\trefScope.recordTypeReference(superclass);", "-\t\t\treturn superclass.getExactMethod(selector, argumentTypes, refScope);", "+\t\t\t\trefScope.recordTypeReference(this.superclass);", "+\t\t\treturn this.superclass.getExactMethod(selector, argumentTypes, refScope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6b506077f52b00ee035f9a6ea68681b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "  public MethodBinding[] getMethods(char[] selector)", "signatureAfterChange": " public MethodBinding[] getMethods(char[] selector)", "diff": ["-", "-\t// handle forward references to potential default abstract methods", "-\taddDefaultAbstractMethods();", "+\tint selectorLength = selector.length;", "+\tboolean methodsAreResolved = (modifiers & AccUnresolved) == 0; // have resolved all arg types & return type of the methods", "+\tjava.util.ArrayList matchingMethods = null;", "+\tfor (int i = 0, length = methods.length; i < length; i++) {", "+\t\tMethodBinding method = methods[i];", "+\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "+\t\t\tif (!methodsAreResolved && resolveTypesFor(method) == null || method.returnType == null) {", "+\t\t\t\tmethods();", "+\t\t\t\treturn getMethods(selector); // try again since the problem methods have been removed", "+\t\t\t}", "+\t\t\tif (matchingMethods == null)", "+\t\t\t\tmatchingMethods = new java.util.ArrayList(2);", "+\t\t\tmatchingMethods.add(method);", "+\t\t}", "+\t}", "+\tif (matchingMethods == null) return NoMethods;", "-\ttry{", "-\t\tint count = 0;", "-\t\tint lastIndex = -1;", "-\t\tint selectorLength = selector.length;", "-\t\tif ((modifiers & AccUnresolved) == 0) { // have resolved all arg types & return type of the methods", "-\t\t\tfor (int m = 0, length = methods.length; m < length; m++) {", "-\t\t\t\tMethodBinding method = methods[m];", "-\t\t\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "-\t\t\t\t\tcount++;", "-\t\t\t\t\tlastIndex = m;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else {", "-\t\t\tboolean foundProblem = false;", "-\t\t\tint failed = 0;", "-\t\t\tfor (int m = 0, length = methods.length; m < length; m++) {", "-\t\t\t\tMethodBinding method = methods[m];", "-\t\t\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "-\t\t\t\t\tif (resolveTypesFor(method) == null) {", "-\t\t\t\t\t\tfoundProblem = true;", "-\t\t\t\t\t\tmethods[m] = null; // unable to resolve parameters", "-\t\t\t\t\t\tfailed++;", "-\t\t\t\t\t} else if (method.returnType == null) {", "-\t\t\t\t\t\tfoundProblem = true;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\tlastIndex = m;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t", "-\t\t\tif (foundProblem || count > 1) {", "-\t\t\t\tfor (int m = methods.length; --m >= 0;) {", "-\t\t\t\t\tMethodBinding method = methods[m];", "-\t\t\t\t\tif (method != null && method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "-\t\t\t\t\t\tAbstractMethodDeclaration methodDecl = null;", "-\t\t\t\t\t\tfor (int i = 0; i < m; i++) {", "-\t\t\t\t\t\t\tMethodBinding method2 = methods[i];", "-\t\t\t\t\t\t\tif (method2 != null && CharOperation.equals(method.selector, method2.selector)) {", "-\t\t\t\t\t\t\t\tif (method.areParametersEqual(method2)) {", "-\t\t\t\t\t\t\t\t\tif (methodDecl == null) {", "-\t\t\t\t\t\t\t\t\t\tmethodDecl = method.sourceMethod(); // cannot be retrieved after binding is lost", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateMethodInType(this, methodDecl);", "-\t\t\t\t\t\t\t\t\t\tmethodDecl.binding = null;", "-\t\t\t\t\t\t\t\t\t\tmethods[m] = null;", "-\t\t\t\t\t\t\t\t\t\tfailed++;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateMethodInType(this, method2.sourceMethod());", "-\t\t\t\t\t\t\t\t\tmethod2.sourceMethod().binding = null;", "-\t\t\t\t\t\t\t\t\tmethods[i] = null;", "-\t\t\t\t\t\t\t\t\tfailed++;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (method.returnType == null && methodDecl == null) { // forget method with invalid return type... was kept to detect possible collisions", "-\t\t\t\t\t\t\tmethod.sourceMethod().binding = null;", "-\t\t\t\t\t\t\tmethods[m] = null;", "-\t\t\t\t\t\t\tfailed++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t", "-\t\t\t\tif (failed > 0) {", "-\t\t\t\t\tint newSize = methods.length - failed;", "-\t\t\t\t\tif (newSize == 0)", "-\t\t\t\t\t\treturn methods = NoMethods;", "-\t", "-\t\t\t\t\tMethodBinding[] newMethods = new MethodBinding[newSize];", "-\t\t\t\t\tfor (int i = 0, n = 0, max = methods.length; i < max; i++)", "-\t\t\t\t\t\tif (methods[i] != null)", "-\t\t\t\t\t\t\tnewMethods[n++] = methods[i];", "-\t\t\t\t\tmethods = newMethods;", "-\t\t\t\t\treturn getMethods(selector); // try again now that the problem methods have been removed", "+\tMethodBinding[] result = new MethodBinding[matchingMethods.size()];", "+\tmatchingMethods.toArray(result);", "+\tif (!methodsAreResolved) {", "+\t\tfor (int i = 0, length = result.length - 1; i < length; i++) {", "+\t\t\tMethodBinding method = result[i];", "+\t\t\tfor (int j = length; j > i; j--) {", "+\t\t\t\tif (method.areParameterErasuresEqual(result[j])) {", "+\t\t\t\t\tmethods();", "+\t\t\t\t\treturn getMethods(selector); // try again since the duplicate methods have been removed", "-\t\tif (count == 1)", "-\t\t\treturn new MethodBinding[] {methods[lastIndex]};", "-\t\tif (count > 1) {", "-\t\t\tMethodBinding[] result = new MethodBinding[count];", "-\t\t\tcount = 0;", "-\t\t\tfor (int m = 0; m <= lastIndex; m++) {", "-\t\t\t\tMethodBinding method = methods[m];", "-\t\t\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector))", "-\t\t\t\t\tresult[count++] = method;", "-\t\t\t}", "-\t\t\treturn result;", "-\t\t}", "-\t} catch(AbortCompilation e){", "-\t\t// ensure null methods are removed", "-\t\tMethodBinding[] newMethods = null;", "-\t\tint count = 0;", "-\t\tfor (int i = 0, max = methods.length; i < max; i++){", "-\t\t\tMethodBinding method = methods[i];", "-\t\t\tif (method == null && newMethods == null){", "-\t\t\t\tSystem.arraycopy(methods, 0, newMethods = new MethodBinding[max], 0, i);", "-\t\t\t} else if (newMethods != null && method != null) {", "-\t\t\t\tnewMethods[count++] = method;", "-\t\t\t}", "-\t\t}", "-\t\tif (newMethods != null){", "-\t\t\tSystem.arraycopy(newMethods, 0, methods = new MethodBinding[count], 0, count);", "-\t\t}\t\t\t", "-\t\tmodifiers ^= AccUnresolved;", "-\t\tthrow e;", "-\t}\t\t", "-\treturn NoMethods;", "+\t}", "+\treturn result;"]}], "num": 34893}
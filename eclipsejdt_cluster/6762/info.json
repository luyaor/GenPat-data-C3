{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dbd723d8e929d2cc0b0e75e5d0eeb5de", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dceb5a11c7f96e01f4e4761e249eed5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Clinit.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate void generateCode( \t\tClassScope classScope, \t\tClassFile classFile, \t\tint clinitOffset)", "signatureAfterChange": " \tprivate void generateCode( \t\tClassScope classScope, \t\tClassFile classFile, \t\tint clinitOffset)", "diff": ["-\t\t// generate initializers", "+\t\t// generate static fields/initializers/enum constants", "+\t\tint enumCount = 0;", "-\t\t\t\tFieldDeclaration fieldDecl;", "-\t\t\t\tif ((fieldDecl = declaringType.fields[i]).isStatic()) {", "+\t\t\t\tFieldDeclaration fieldDecl = declaringType.fields[i];", "+\t\t\t\tif (fieldDecl.isStatic()) {", "+\t\t\t\t}", "+\t\t\t\tif (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\tenumCount++;", "+\t\t// enum need to initialize $VALUES synthetic cache of enum constants", "+\t\tif (enumCount > 0) {", "+\t\t\tif (declaringType.fields != null) {", "+\t\t\t\t// $VALUES := new <EnumType>[<enumCount>]", "+\t\t\t\tcodeStream.generateInlinedValue(enumCount);", "+\t\t\t\tcodeStream.anewarray(declaringType.binding);", "+\t\t\t\tfor (int i = 0, max = declaringType.fields.length; i < max; i++) {", "+\t\t\t\t\tFieldDeclaration fieldDecl = declaringType.fields[i];", "+\t\t\t\t\t// $VALUES[i] = <enum-constant-i>", "+\t\t\t\t\tif (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t\tcodeStream.dup();", "+\t\t\t\t\t\tcodeStream.generateInlinedValue(fieldDecl.binding.id);", "+\t\t\t\t\t\tcodeStream.getstatic(fieldDecl.binding);", "+\t\t\t\t\t\tcodeStream.aastore();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tcodeStream.putstatic(declaringType.enumValuesSyntheticfield);", "+\t\t\t}", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b4377a2e75e4433082d4d690d00ae6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5046f0da42323773845d7a3edf39df0b8c6a1944", "commitAfterChange": "80f69cca108e407e297e62382ba04bd29eb1703d", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic IClasspathEntry[] decodeClasspath(String xmlClasspath, Map unknownElements) throws IOException, ClasspathEntry.AssertionFailedException", "signatureAfterChange": " \tpublic IClasspathEntry[][] decodeClasspath(String xmlClasspath, Map unknownElements) throws IOException, ClasspathEntry.AssertionFailedException", "diff": ["-\tpublic IClasspathEntry[] decodeClasspath(String xmlClasspath, Map unknownElements) throws IOException, ClasspathEntry.AssertionFailedException {", "+\tpublic IClasspathEntry[][] decodeClasspath(String xmlClasspath, Map unknownElements) throws IOException, ClasspathEntry.AssertionFailedException {", "-\t\tNodeList list = cpElement.getElementsByTagName(\"classpathentry\"); //$NON-NLS-1$", "+\t\tNodeList list = cpElement.getElementsByTagName(ClasspathEntry.TAG_CLASSPATHENTRY);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t// return a new empty classpath is it size is 0, to differenciate from an INVALID_CLASSPATH", "-\t\tIClasspathEntry[] entries = new IClasspathEntry[pathSize + (defaultOutput == null ? 0 : 1)];", "-\t\tpaths.toArray(entries);", "-\t\tif (defaultOutput != null) entries[pathSize] = defaultOutput; // ensure output is last item", "+\t\tIClasspathEntry[][] entries = new IClasspathEntry[2][];", "+\t\tentries[0] = new IClasspathEntry[pathSize + (defaultOutput == null ? 0 : 1)];", "+\t\tpaths.toArray(entries[0]);", "+\t\tif (defaultOutput != null) entries[0][pathSize] = defaultOutput; // ensure output is last item", "+\t\t", "+\t\tpaths.clear();", "+\t\tlist = cpElement.getElementsByTagName(ClasspathEntry.TAG_REFERENCED_ENTRY);", "+\t\tlength = list.getLength();", "+", "+\t\tfor (int i = 0; i < length; ++i) {", "+\t\t\tNode node = list.item(i);", "+\t\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {", "+\t\t\t\tIClasspathEntry entry = ClasspathEntry.elementDecode((Element)node, this, unknownElements);", "+\t\t\t\tif (entry != null){", "+\t\t\t\t\tpaths.add(entry);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tentries[1] = new IClasspathEntry[paths.size()];", "+\t\tpaths.toArray(entries[1]);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "919e3c7b3a97d3d59ff5f7d4f1df7c3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java", "commitBeforeChange": "8470bf3553696af2786417fd29ff24b20a8b811a", "commitAfterChange": "aa5e9e84a2dc24b977832ac83a286e33c5f481ea", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(EnumDeclaration node)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(EnumDeclaration node)", "diff": ["+\t\tint constantsEnd = -1;", "-\t\t\tthis.wrapGroupEnd = this.tm.lastIndexIn(enumConstants.get(enumConstants.size() - 1), -1);", "+\t\t\tthis.wrapGroupEnd = constantsEnd = this.tm.lastIndexIn(enumConstants.get(enumConstants.size() - 1), -1);", "+\t\tif (!this.options.join_wrapped_lines) {", "+\t\t\t// preserve a line break between the last comma and semicolon", "+\t\t\tint commaIndex = -1;", "+\t\t\tint i = constantsEnd > 0 ? constantsEnd : this.tm.firstIndexAfter(node.getName(), TokenNameLBRACE);", "+\t\t\twhile (++i < this.tm.size()) {", "+\t\t\t\tToken t = this.tm.get(i);", "+\t\t\t\tif (t.isComment())", "+\t\t\t\t\tcontinue;", "+\t\t\t\tif (t.tokenType == TokenNameCOMMA) {", "+\t\t\t\t\tcommaIndex = i;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (t.tokenType == TokenNameSEMICOLON && commaIndex >= 0", "+\t\t\t\t\t\t&& this.tm.countLineBreaksBetween(this.tm.get(commaIndex), t) == 1) {", "+\t\t\t\t\tt.setWrapPolicy(new WrapPolicy(WrapMode.WHERE_NECESSARY, commaIndex, 0));", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+"]}], "num": 6762}
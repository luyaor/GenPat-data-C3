{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1667b54acad79c1572787b399bcffed8", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22debee9b8ee07cbe4b50b938274f849", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "b3c49effd6a37f25d3bc9f0a1e991b665346dde6", "commitAfterChange": "350354f214ca227e1737fa04a92c132cd3211f35", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "\r \tpublic void reportReference(\r \t\tAstNode reference,\r \t\tTypeDeclaration typeDeclaration,\r \t\tFieldDeclaration fieldDeclaration,\r \t\tIJavaElement parent,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r \tpublic void reportReference(\r \t\tAstNode reference,\r \t\tTypeDeclaration typeDeclaration,\r \t\tFieldDeclaration fieldDeclaration,\r \t\tIJavaElement parent,\r \t\tint accuracy)\r \t\tthrows CoreException", "diff": ["-\t\t\tif (reference instanceof QualifiedNameReference\r", "-\t\t\t\t|| reference instanceof QualifiedTypeReference\r", "-\t\t\t\t|| reference instanceof ArrayTypeReference) {\r", "-\t\t\t\tthis.pattern.matchReportReference(reference, enclosingElement, accuracy, this);\r", "-\t\t\t} else\r", "-\t\t\t\tif (reference instanceof MessageSend) {\r", "-\t\t\t\t\t// message ref are starting at the selector start\r", "-\t\t\t\t\tthis.report(\r", "-\t\t\t\t\t\t(int) (((MessageSend) reference).nameSourcePosition >> 32),\r", "-\t\t\t\t\t\treference.sourceEnd,\r", "-\t\t\t\t\t\tenclosingElement,\r", "-\t\t\t\t\t\taccuracy);\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tthis.report(reference.sourceStart, reference.sourceEnd, enclosingElement, accuracy);\r", "-\t\t\t\t}\r", "+\t\t\tthis.pattern.matchReportReference(reference, enclosingElement, accuracy, this);\r", "-\t\t\tif (reference instanceof QualifiedNameReference\r", "-\t\t\t\t|| reference instanceof QualifiedTypeReference\r", "-\t\t\t\t|| reference instanceof ArrayTypeReference) {\r", "-\t\t\t\tthis.pattern.matchReportReference(\r", "-\t\t\t\t\treference,\r", "-\t\t\t\t\tenclosingElement,\r", "-\t\t\t\t\taccuracy,\r", "-\t\t\t\t\tthis);\r", "-\t\t\t} else\r", "-\t\t\t\tif (reference instanceof MessageSend) {\r", "-\t\t\t\t\t// message ref are starting at the selector start\r", "-\t\t\t\t\tthis.report(\r", "-\t\t\t\t\t\t(int) (((MessageSend) reference).nameSourcePosition >> 32),\r", "-\t\t\t\t\t\treference.sourceEnd,\r", "-\t\t\t\t\t\tenclosingElement,\r", "-\t\t\t\t\t\taccuracy);\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tthis.report(reference.sourceStart, reference.sourceEnd, enclosingElement, accuracy);\r", "-\t\t\t\t}\r", "+\t\t\tthis.pattern.matchReportReference(reference, enclosingElement, accuracy, this);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "265d8d8b75c1a7dcb652794d9b733faf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "\r \tpublic void reportReference(\r \t\tAstNode reference,\r \t\tAbstractMethodDeclaration methodDeclaration,\r \t\tchar[][] definingTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r public void reportReference(\r \tAstNode reference, \r \tAbstractMethodDeclaration methodDeclaration, \r \tchar[][] definingTypeNames, \r \tint accuracy) throws CoreException", "diff": ["+ */\r", "+public void reportReference(\r", "+\tAstNode reference, \r", "+\tAbstractMethodDeclaration methodDeclaration, \r", "+\tchar[][] definingTypeNames, \r", "+\tint accuracy) throws CoreException {\r", "+\t\t\r", "+\t// create defining method handle\r", "+\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "+\t\r", "+\t// accept reference\r", "+\tif (reference instanceof QualifiedNameReference || reference instanceof QualifiedTypeReference) {\r", "+\t\tthis.pattern.matchReportReference((AstNode)reference, method, accuracy, this);\r", "+\t} else if (reference instanceof MessageSend) { // message ref are starting at the selector start\r", "+\t\tthis.report((int)(((MessageSend)reference).nameSourcePosition >> 32), reference.sourceEnd, method, accuracy);\r", "+\t} else {\r", "+\t\tthis.report(reference.sourceStart, reference.sourceEnd, method, accuracy);\r", "+\t}\r", "+}\r", "-\t */\r", "-\tpublic void reportReference(\r", "-\t\tAstNode reference,\r", "-\t\tAbstractMethodDeclaration methodDeclaration,\r", "-\t\tchar[][] definingTypeNames,\r", "-\t\tint accuracy)\r", "-\t\tthrows CoreException {\r", "-\r", "-\t\t// create defining method handle\r", "-\t\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "-\r", "-\t\tif (reference instanceof QualifiedNameReference\r", "-\t\t\t|| reference instanceof QualifiedTypeReference) {\r", "-\t\t\tthis.pattern.matchReportReference((AstNode) reference, method, accuracy, this);\r", "-\t\t\tthis.report(reference.sourceStart, reference.sourceEnd, method, accuracy);\r"]}], "num": 62233}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "99279e59cd798c205b06be105e5c67ac", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac12697e82d0413f6d888ef89cdb0248", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "826c1497ef50e42a080ff7fc6fbbf447e4fe5c5c", "commitAfterChange": "26bd1fe56056b720ce5a64b81a3abfa348d52071", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\tif (imports != null){", "+\t\t\tif (imports != null) {", "-\t\t\t\t\tif (!typeImport.onDemand)", "-\t\t\t\t\t\tif (CharOperation.equals(typeImport.compoundName[typeImport.compoundName.length - 1], name))", "+\t\t\t\t\tif (!typeImport.onDemand) {", "+\t\t\t\t\t\tif (CharOperation.equals(typeImport.compoundName[typeImport.compoundName.length - 1], name)) {", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\tunitScope.recordReference(unitScope.fPackage.compoundName, name);", "-\t\t\tif (binding instanceof ReferenceBinding) return binding;", "+\t\t\tif (binding instanceof ReferenceBinding) return binding; // type is always visible to its own package", "-\t\t\tif (imports != null){", "+\t\t\tif (imports != null) {", "-\t\t\tif (type != null)", "-\t\t\t\treturn type;", "-\t\t}", "-\t\t// see if the name is a package", "-\t\tif ((mask & PACKAGE) != 0) {", "-\t\t\tcompilationUnitScope().recordSimpleReference(name);", "-\t\t\tPackageBinding packageBinding = unitScope.environment.getTopLevelPackage(name);", "-\t\t\tif (packageBinding != null)", "-\t\t\t\treturn packageBinding;", "+\t\t\tif (type != null) return type;", "-\t\tcompilationUnitScope().recordSimpleReference(name);", "-\t\t// Answer error binding -- could not find name", "-\t\tif (foundType != null){", "-\t\t\treturn foundType;", "+\t\tunitScope.recordSimpleReference(name);", "+\t\tif ((mask & PACKAGE) != 0) {", "+\t\t\tPackageBinding packageBinding = unitScope.environment.getTopLevelPackage(name);", "+\t\t\tif (packageBinding != null) return packageBinding;", "+", "+\t\t// Answer error binding -- could not find name", "+\t\tif (foundType != null) return foundType; // problem type from above"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e84e2b80d02e04b918510aa2604e38f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "f3bba67d7292a507e1b3691e11f35ff1c9658d01", "commitAfterChange": "5ba107df633d1beada69a1a39d8b4efe7c8b77f6", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": "\r \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\t\t\t\tReferenceBinding localType = ((BlockScope) scope).findLocalType(name);\r", "-\t\t\t\t\t\t// looks in this scope only\r", "+\t\t\t\t\t\tReferenceBinding localType = ((BlockScope) scope).findLocalType(name); // looks in this scope only\r", "+\r", "-\t\t\t\t\t\t\tif (foundType == null\r", "-\t\t\t\t\t\t\t\t|| (foundType.problemId() == NotVisible && memberType.problemId() != NotVisible))\r", "+\t\t\t\t\t\t\tif (foundType == null || (foundType.problemId() == NotVisible && memberType.problemId() != NotVisible))\r", "+\r", "-\t\t\t\t\tif (CharOperation\r", "-\t\t\t\t\t\t.equals(typeImport.compoundName[typeImport.compoundName.length - 1], name))\r", "+\t\t\t\t\tif (CharOperation.equals(typeImport.compoundName[typeImport.compoundName.length - 1], name))\r", "-\t\t\tReferenceBinding type = findType(name, unitScope.fPackage, unitScope.fPackage);\r", "-\t\t\t// is always visible\r", "-\t\t\tif (type != null)\r", "-\t\t\t\treturn type;\r", "+\t\t\tReferenceBinding type = findType(name, unitScope.fPackage, unitScope.fPackage); // is always visible\r", "+\t\t\tif (type != null) return type;\r", "+\t\t\tcompilationUnitScope().recordSimpleReference(name);\r", "-\t\t// Answer error binding -- could not find name\r", "+\r", "+// replaces calls to addNamespaceReference\r", "+\t\tcompilationUnitScope().recordSimpleReference(name);\r", "+\t\t// Answer error binding -- could not find name\r"]}], "num": 66523}
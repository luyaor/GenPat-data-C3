{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3db8dafb7dceb5748cda092edf803d68", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "095405b30eccf35fedbf94e71036fe30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "0e8ca24e8451f1d91ed53a269d184ea21d12301f", "commitAfterChange": "369ffd3db09511488e039ba2575df2eeea055320", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, IClasspathEntry[] classpath)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int parentType)", "diff": ["-\tprotected boolean traverseDelta(IResourceDelta delta, IClasspathEntry[] classpath) {\r", "+\tprotected boolean traverseDelta(IResourceDelta delta, int parentType) {\r", "-\t\tboolean isOnClasspath = this.isOnClasspath(classpath, res);\r", "-\t\tOpenable element = null;\r", "-\t\tboolean processChildren = true;\r", "-\t\tJavaProject project = null;\r", "-\t\tif (isOnClasspath) {\r", "-\t\t\tOpenable[] elements = this.createElements(res);\r", "-\t\t\tif (elements != null) {\r", "-\t\t\t\tfor (int i = 0, length = elements.length; i < length; i++) {\r", "-\t\t\t\t\telement = elements[i];\r", "-\t\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(element, delta);\r", "+\t\t// check if current resource is now on classpath and determine the element type\r", "+\t\tboolean isOnClasspath = false;\r", "+\t\tint elementType = -1;\r", "+\t\tswitch (parentType) {\r", "+\t\t\tcase IJavaElement.JAVA_MODEL:\r", "+\t\t\tcase IJavaElement.JAVA_PROJECT:\r", "+\t\t\t\tisOnClasspath = this.isOnClasspath(res.getFullPath());\r", "+\t\t\t\tif (isOnClasspath) {\r", "+\t\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT_ROOT;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\telementType = IJavaElement.JAVA_PROJECT; // not yet in a package fragment root\r", "-\t\t\t} else {\r", "-\t\t\t\treturn false;\r", "-\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\r", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "+\t\t\t\tisOnClasspath = true;\r", "+\t\t\t\tif (res instanceof IFolder) {\r", "+\t\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tString extension = res.getFileExtension();\r", "+\t\t\t\t\tif (\"java\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\t\telementType = IJavaElement.COMPILATION_UNIT;\r", "+\t\t\t\t\t} else if (\"class\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\t\telementType = IJavaElement.CLASS_FILE;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t}\t\t\t\t\t\t\r", "+\t\t\r", "+\t\tboolean processChildren = true;\r", "+\t\tif (isOnClasspath) {\r", "+\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(delta, elementType);\r", "-\t\t\t\tproject = (JavaProject)JavaCore.getJavaCore().create((IProject)res);\r", "-\t\t\t\tif (project == null) return false; // not a Java project\r", "-\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(project, delta);\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tif (this.isOpen(res) && !((IProject)res).hasNature(JavaCore.NATURE_ID)) return false; // non java project\r", "+\t\t\t\t} catch (CoreException e) {\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t\t}\r", "+\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(delta, elementType);\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tclasspath = project.getExpandedClasspath(true);\r", "-\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t}\r", "-\t\t\t\t// if classpath is known, we are for sure out of classpath: stop processing children\r", "-\t\t\t\tprocessChildren = classpath != null;\r", "+\t\t\t\t// not yet inside a package fragment root\r", "+\t\t\t\tprocessChildren = true;\r", "+\t\t\tOpenable element = null;\r", "-\t\t\t\tif (!traverseDelta(child, isOnClasspath ? null : classpath)) {\r", "+\t\t\t\tif (!traverseDelta(child, elementType)) {\r", "+\t\t\t\t\t\t\tif (element == null) {\r", "+\t\t\t\t\t\t\t\telement = this.createElement(res, elementType);\r", "+\t\t\t\t\t\t\t\tif (element == null) continue;\r", "+\t\t\t\t\t\t\t}\r", "-\t\t\tif (oneChildOnClasspath || project != null) {\r", "+\t\t\tif (oneChildOnClasspath || res instanceof IProject) {\r", "-\t\t\t\tif (project == null) {\r", "-\t\t\t\t\tproject = (JavaProject)JavaCore.getJavaCore().create(res.getProject());\r", "-\t\t\t\t}\r", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tif (orphanChildren[i] != null) {\r", "-\t\t\t\t\t\ttry {\r", "-\t\t\t\t\t\t\tnonJavaResourcesChanged(project, orphanChildren[i]);\r", "-\t\t\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}", "+\t\t\t\tJavaProject project = (JavaProject)JavaCore.getJavaCore().create(res.getProject());\r", "+\t\t\t\tif (project != null) {\r", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tif (orphanChildren[i] != null) {\r", "+\t\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\t\tnonJavaResourcesChanged(project, orphanChildren[i]);\r", "+\t\t\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}\r", "-\t\t\treturn isOnClasspath && element != null; // element is null if non-java resource in package\r", "+\t\t\treturn \r", "+\t\t\t\tisOnClasspath \r", "+\t\t\t\t\t&& (elementType == IJavaElement.COMPILATION_UNIT \r", "+\t\t\t\t\t\t|| elementType == IJavaElement.CLASS_FILE);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45f32a5ae360fa9760ac65c1405aa76d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetCodeStream.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " protected void invokeJavaLangReflectFieldGetter(int typeID)", "signatureAfterChange": " protected void invokeJavaLangReflectFieldGetter(int typeID)", "diff": ["-\tthis.countLabels = 0;", "-\tint usedTypeID;", "-\tif (typeID == T_null)", "-\t\tusedTypeID = T_Object;", "-\telse", "-\t\tusedTypeID = typeID;", "-\t// invokevirtual", "-\tif (classFileOffset + 2 >= bCodeStream.length) {", "-\t\tresizeByteArray();", "+\tint returnTypeSize = 1;", "+\tchar[] signature = null;", "+\tchar[] selector = null;", "+\tswitch (typeID) {", "+\t\tcase T_int :", "+\t\t\tselector = QualifiedNamesConstants.GET_INT_METHOD_NAME;", "+\t\t\tsignature = QualifiedNamesConstants.GET_INT_METHOD_SIGNATURE;", "+\t\t\tbreak;", "+\t\tcase T_byte :", "+\t\t\tselector = QualifiedNamesConstants.GET_BYTE_METHOD_NAME;", "+\t\t\tsignature = QualifiedNamesConstants.GET_BYTE_METHOD_SIGNATURE;", "+\t\t\tbreak;", "+\t\tcase T_short :", "+\t\t\tselector = QualifiedNamesConstants.GET_SHORT_METHOD_NAME;", "+\t\t\tsignature = QualifiedNamesConstants.GET_SHORT_METHOD_SIGNATURE;", "+\t\t\tbreak;", "+\t\tcase T_long :", "+\t\t\tselector = QualifiedNamesConstants.GET_LONG_METHOD_NAME;", "+\t\t\tsignature = QualifiedNamesConstants.GET_LONG_METHOD_SIGNATURE;", "+\t\t\treturnTypeSize = 2;", "+\t\t\tbreak;", "+\t\tcase T_float :", "+\t\t\tselector = QualifiedNamesConstants.GET_FLOAT_METHOD_NAME;", "+\t\t\tsignature = QualifiedNamesConstants.GET_FLOAT_METHOD_SIGNATURE;", "+\t\t\tbreak;", "+\t\tcase T_double :", "+\t\t\tselector = QualifiedNamesConstants.GET_DOUBLE_METHOD_NAME;", "+\t\t\tsignature = QualifiedNamesConstants.GET_DOUBLE_METHOD_SIGNATURE;", "+\t\t\treturnTypeSize = 2;", "+\t\t\tbreak;", "+\t\tcase T_char :", "+\t\t\tselector = QualifiedNamesConstants.GET_CHAR_METHOD_NAME;", "+\t\t\tsignature = QualifiedNamesConstants.GET_CHAR_METHOD_SIGNATURE;", "+\t\t\tbreak;", "+\t\tcase T_boolean :", "+\t\t\tselector = QualifiedNamesConstants.GET_BOOLEAN_METHOD_NAME;", "+\t\t\tsignature = QualifiedNamesConstants.GET_BOOLEAN_METHOD_SIGNATURE;", "+\t\t\tbreak;", "+\t\tdefault :", "+\t\t\tselector = QualifiedNamesConstants.GET_OBJECT_METHOD_NAME;", "+\t\t\tsignature = QualifiedNamesConstants.GET_OBJECT_METHOD_SIGNATURE;", "+\t\t\tbreak;", "-\tthis.position++;", "-\tthis.bCodeStream[this.classFileOffset++] = OPC_invokevirtual;", "-\twriteUnsignedShort(((CodeSnippetConstantPool) this.constantPool).literalIndexJavaLangReflectFieldGetter(typeID));", "-\tif ((usedTypeID != T_long) && (usedTypeID != T_double)) {", "-\t\tthis.stackDepth--;", "-\t}", "+\tthis.invoke(", "+\t\t\tOPC_invokevirtual,", "+\t\t\t1, // argCount", "+\t\t\treturnTypeSize, // return type size", "+\t\t\tQualifiedNamesConstants.JAVALANGREFLECTFIELD_CONSTANTPOOLNAME,", "+\t\t\tselector,", "+\t\t\tsignature);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff2a8023917c8af788888981cca6fbb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetCodeStream.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " protected void invokeJavaLangReflectFieldSetter(int typeID)", "signatureAfterChange": " protected void invokeJavaLangReflectFieldSetter(int typeID)", "diff": ["-\tthis.countLabels = 0;", "-\tint usedTypeID;", "-\tif (typeID == T_null)", "-\t\tusedTypeID = T_Object;", "-\telse", "-\t\tusedTypeID = typeID;", "-\t// invokevirtual", "-\tif (classFileOffset + 2 >= bCodeStream.length) {", "-\t\tresizeByteArray();", "+\tint argCount = 2;", "+\tchar[] signature = null;", "+\tchar[] selector = null;", "+\tswitch (typeID) {", "+\t\tcase T_int :", "+\t\t\tselector = QualifiedNamesConstants.SET_INT_METHOD_NAME;", "+\t\t\tsignature = QualifiedNamesConstants.SET_INT_METHOD_SIGNATURE;", "+\t\t\tbreak;", "+\t\tcase T_byte :", "+\t\t\tselector = QualifiedNamesConstants.SET_BYTE_METHOD_NAME;", "+\t\t\tsignature = QualifiedNamesConstants.SET_BYTE_METHOD_SIGNATURE;", "+\t\t\tbreak;", "+\t\tcase T_short :", "+\t\t\tselector = QualifiedNamesConstants.SET_SHORT_METHOD_NAME;", "+\t\t\tsignature = QualifiedNamesConstants.SET_SHORT_METHOD_SIGNATURE;", "+\t\t\tbreak;", "+\t\tcase T_long :", "+\t\t\tselector = QualifiedNamesConstants.SET_LONG_METHOD_NAME;", "+\t\t\tsignature = QualifiedNamesConstants.SET_LONG_METHOD_SIGNATURE;", "+\t\t\targCount = 3;", "+\t\t\tbreak;", "+\t\tcase T_float :", "+\t\t\tselector = QualifiedNamesConstants.SET_FLOAT_METHOD_NAME;", "+\t\t\tsignature = QualifiedNamesConstants.SET_FLOAT_METHOD_SIGNATURE;", "+\t\t\tbreak;", "+\t\tcase T_double :", "+\t\t\tselector = QualifiedNamesConstants.SET_DOUBLE_METHOD_NAME;", "+\t\t\tsignature = QualifiedNamesConstants.SET_DOUBLE_METHOD_SIGNATURE;", "+\t\t\targCount = 3;", "+\t\t\tbreak;", "+\t\tcase T_char :", "+\t\t\tselector = QualifiedNamesConstants.SET_CHAR_METHOD_NAME;", "+\t\t\tsignature = QualifiedNamesConstants.SET_CHAR_METHOD_SIGNATURE;", "+\t\t\tbreak;", "+\t\tcase T_boolean :", "+\t\t\tselector = QualifiedNamesConstants.SET_BOOLEAN_METHOD_NAME;", "+\t\t\tsignature = QualifiedNamesConstants.SET_BOOLEAN_METHOD_SIGNATURE;", "+\t\t\tbreak;", "+\t\tdefault :", "+\t\t\tselector = QualifiedNamesConstants.SET_OBJECT_METHOD_NAME;", "+\t\t\tsignature = QualifiedNamesConstants.SET_OBJECT_METHOD_SIGNATURE;", "+\t\t\tbreak;", "-\tthis.position++;", "-\tthis.bCodeStream[this.classFileOffset++] = OPC_invokevirtual;", "-\twriteUnsignedShort(((CodeSnippetConstantPool) this.constantPool).literalIndexJavaLangReflectFieldSetter(typeID));", "-\tif ((usedTypeID != T_long) && (usedTypeID != T_double)) {", "-\t\tthis.stackDepth-=3;", "-\t} else {", "-\t\tthis.stackDepth-=4;", "-\t}", "+\tthis.invoke(", "+\t\t\tOPC_invokevirtual,", "+\t\t\targCount, // argCount", "+\t\t\t0, // return type size", "+\t\t\tQualifiedNamesConstants.JAVALANGREFLECTFIELD_CONSTANTPOOLNAME,", "+\t\t\tselector,", "+\t\t\tsignature);"]}], "num": 39728}
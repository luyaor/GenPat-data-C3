{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b420c678852a4a4f4d2da621326dc32c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "411185ec302f261fb14337cd8ea3fcf6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tpublic void test0061() throws JavaModelException", "signatureAfterChange": " \tpublic void test0061() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"/*start*/public class X<T> {\\n\" +", "-\t\t\t\t\"}/*end*/\",", "-\t\t\t\tworkingCopy);", "-\t\t\tIBinding binding = ((TypeDeclaration) node).resolveBinding();", "-\t\t\tassertBindingKeyEquals(", "-\t\t\t\t\"Lp/X<TT;>;\",", "-\t\t\t\tbinding.getKey());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"/*start*/public class X<T> {\\n\" +", "+\t\t\t\"}/*end*/\",", "+\t\t\tthis.workingCopy);", "+\t\tIBinding binding = ((TypeDeclaration) node).resolveBinding();", "+\t\tassertBindingKeyEquals(", "+\t\t\t\"Lp/X<TT;>;\",", "+\t\t\tbinding.getKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bc4359e857770cd3a8565f7a0664e35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic void test0066() throws JavaModelException", "signatureAfterChange": " \tpublic void test0066() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class X<T> {\\n\" +", "-\t\t\t\t\"  /*start*/X/*end*/ field;\" +", "-\t\t\t\t\"}\",", "-\t\t\t\tworkingCopy);", "-\t\t\tIBinding binding = ((Type) node).resolveBinding();", "-\t\t\tassertBindingKeyEquals(", "-\t\t\t\t\"Lp/X;\",", "-\t\t\t\tbinding.getKey());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"public class X<T> {\\n\" +", "+\t\t\t\"  /*start*/X/*end*/ field;\" +", "+\t\t\t\"}\",", "+\t\t\tthis.workingCopy);", "+\t\tIBinding binding = ((Type) node).resolveBinding();", "+\t\tassertBindingKeyEquals(", "+\t\t\t\"Lp/X;\",", "+\t\t\tbinding.getKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3c8e5693daf87411024bcdb0b0f6691", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tpublic void test0062() throws JavaModelException", "signatureAfterChange": " \tpublic void test0062() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class X<T> {\\n\" +", "-\t\t\t\t\"  /*start*/X<Class>/*end*/ f;\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\tworkingCopy);", "-\t\t\tIBinding binding = ((Type) node).resolveBinding();", "-\t\t\tassertBindingKeyEquals(", "-\t\t\t\t\"Lp/X<Ljava/lang/Class;>;\",", "-\t\t\t\tbinding.getKey());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"public class X<T> {\\n\" +", "+\t\t\t\"  /*start*/X<Class>/*end*/ f;\\n\" +", "+\t\t\t\"}\",", "+\t\t\tthis.workingCopy);", "+\t\tIBinding binding = ((Type) node).resolveBinding();", "+\t\tassertBindingKeyEquals(", "+\t\t\t\"Lp/X<Ljava/lang/Class;>;\",", "+\t\t\tbinding.getKey());"]}], "num": 8050}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb075781c4d130dee4f84210c1bfcc10", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f22e0e7c0fbc1321418ab8973a3da4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java", "commitBeforeChange": "9b26efa81a6e381ed8487b9883db0ad019b470e0", "commitAfterChange": "f8b4a09010dbba905cde5c02b5290761440c6661", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \tpublic String getKey()", "signatureAfterChange": "\r \tpublic String getKey()", "diff": ["+\t\tif (isField()) {\r", "+\t\t\tStringBuffer buffer = new StringBuffer();\r", "+\t\t\tbuffer.append(this.getDeclaringClass().getKey());\r", "+\t\t\tbuffer.append(this.getName());\r", "+\t\t\tbuffer.append(getType().getKey());\r", "+\t\t\treturn buffer.toString();\r", "+\t\t}\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2be3bac0d722e809b87e8aeab66d3df9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "diff": ["-", "-", "+\t\tTypeBinding[] uncheckedArguments = null;", "-", "-", "+\t\t\t", "-", "+\t\t\t\tif (inferenceContext.isUnchecked) { // only remember unchecked status post 15.12.2.7", "+\t\t\t\t\tint length = inferenceContext.substitutes.length;", "+\t\t\t\t\tSystem.arraycopy(inferenceContext.substitutes, 0, uncheckedArguments = new TypeBinding[length], 0, length);", "+\t\t\t\t}", "-\t\tif (!methodSubstitute.isRaw) {", "-\t\t\tfor (int i = 0, length = typeVariables.length; i < length; i++) {", "-\t\t\t    TypeVariableBinding typeVariable = typeVariables[i];", "-\t\t\t    TypeBinding substitute = methodSubstitute.typeArguments[i];", "-\t\t\t\tswitch (typeVariable.boundCheck(methodSubstitute, substitute)) {", "-\t\t\t\t\tcase TypeConstants.MISMATCH :", "-\t\t\t\t        // incompatible due to bound check", "-\t\t\t\t\t\tint argLength = arguments.length;", "-\t\t\t\t\t\tTypeBinding[] augmentedArguments = new TypeBinding[argLength + 2]; // append offending substitute and typeVariable", "-\t\t\t\t\t\tSystem.arraycopy(arguments, 0, augmentedArguments, 0, argLength);", "-\t\t\t\t\t\taugmentedArguments[argLength] = substitute;", "-\t\t\t\t\t\taugmentedArguments[argLength+1] = typeVariable;", "-\t\t\t\t        return new ProblemMethodBinding(methodSubstitute, originalMethod.selector, augmentedArguments, ProblemReasons.ParameterBoundMismatch);", "-\t\t\t\t\tcase TypeConstants.UNCHECKED :", "-\t\t\t\t\t\t// tolerate unchecked bounds", "-\t\t\t\t\t\tmethodSubstitute.isUnchecked = true;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "+\t\tfor (int i = 0, length = typeVariables.length; i < length; i++) {", "+\t\t    TypeVariableBinding typeVariable = typeVariables[i];", "+\t\t    TypeBinding substitute = methodSubstitute.typeArguments[i];", "+\t\t    if (uncheckedArguments != null && uncheckedArguments[i] == null) continue; // only bound check if inferred through 15.12.2.6", "+\t\t\tswitch (typeVariable.boundCheck(methodSubstitute, substitute)) {", "+\t\t\t\tcase TypeConstants.MISMATCH :", "+\t\t\t        // incompatible due to bound check", "+\t\t\t\t\tint argLength = arguments.length;", "+\t\t\t\t\tTypeBinding[] augmentedArguments = new TypeBinding[argLength + 2]; // append offending substitute and typeVariable", "+\t\t\t\t\tSystem.arraycopy(arguments, 0, augmentedArguments, 0, argLength);", "+\t\t\t\t\taugmentedArguments[argLength] = substitute;", "+\t\t\t\t\taugmentedArguments[argLength+1] = typeVariable;", "+\t\t\t        return new ProblemMethodBinding(methodSubstitute, originalMethod.selector, augmentedArguments, ProblemReasons.ParameterBoundMismatch);", "+\t\t\t\tcase TypeConstants.UNCHECKED :", "+\t\t\t\t\t// tolerate unchecked bounds", "+\t\t\t\t\tinvocationSite.setUnchecked(true);", "+\t\t\t\t\tbreak;", "+\t\t// check presence of unchecked argument conversion a posteriori (15.12.2.6)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cdb9cb57fa3bb2c49c440b897444b57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "93a1400f497607a4d20ba91cb800384ef4814545", "commitAfterChange": "4c8a979be85a53a687ab4e874bed870bf08df5ef", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic ITypeBinding[] getParameterTypes()", "signatureAfterChange": " \tpublic ITypeBinding[] getParameterTypes()", "diff": ["-\t\t\t\tthis.parameterTypes[i] = this.resolver.getTypeBinding(parameters[i]);", "+\t\t\t\tfinal TypeBinding parameterBinding = parameters[i];", "+\t\t\t\tif (parameterBinding != null) {", "+\t\t\t\t\tthis.parameterTypes[i] = this.resolver.getTypeBinding(parameterBinding);", "+\t\t\t\t} else {", "+\t\t\t\t\t// log error", "+\t\t\t\t\tStringBuffer message = new StringBuffer(\"Report method binding where a parameter is null:\\n\");  //$NON-NLS-1$", "+\t\t\t\t\tmessage.append(this.toString());", "+\t\t\t\t\tUtil.log(new IllegalArgumentException(), message.toString());", "+\t\t\t\t\t// report no binding since one or more parameter has no binding", "+\t\t\t\t\treturn this.parameterTypes = NO_TYPE_BINDINGS;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "357a2624225415f41a7b53d4a31613fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  public MatchLocatorParser(ProblemReporter problemReporter)", "signatureAfterChange": "  public MatchLocatorParser(ProblemReporter problemReporter, MatchLocator locator)", "diff": ["-public MatchLocatorParser(ProblemReporter problemReporter) {", "+public MatchLocatorParser(ProblemReporter problemReporter, MatchLocator locator) {", "+", "+\tthis.patternLocator = locator.patternLocator; ", "+\tif ((locator.matchContainer & PatternLocator.CLASS_CONTAINER) != 0) {", "+\t\tthis.localDeclarationVisitor = (locator.matchContainer & PatternLocator.METHOD_CONTAINER) != 0", "+\t\t\t? new ClassAndMethodDeclarationVisitor()", "+\t\t\t: new ClassButNoMethodDeclarationVisitor();", "+\t} else {", "+\t\tthis.localDeclarationVisitor = (locator.matchContainer & PatternLocator.METHOD_CONTAINER) != 0", "+\t\t\t? new MethodButNoClassDeclarationVisitor()", "+\t\t\t: new NoClassNoMethodDeclarationVisitor();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a2dba9fd619c63ba9876461eb96761a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchMatch.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic String toString()", "signatureAfterChange": " \tpublic String toString()", "diff": ["+\t\tbuffer.append(\"\\n  rule=\"); //$NON-NLS-1$", "+\t\tif ((this.matchRule & SearchPattern.R_EQUIVALENT_MATCH) != 0) {", "+\t\t\tbuffer.append(\"EQUIVALENT\"); //$NON-NLS-1$", "+\t\t\tif ((this.matchRule & SearchPattern.R_ERASURE_MATCH) != 0)", "+\t\t\t\tbuffer.append(\"+ERASURE\"); //$NON-NLS-1$", "+\t\t} else if ((this.matchRule & SearchPattern.R_ERASURE_MATCH) != 0) {", "+\t\t\tbuffer.append(\"ERASURE\"); //$NON-NLS-1$", "+\t\t} else {", "+\t\t\tbuffer.append(\"EXACT\"); //$NON-NLS-1$", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f0a971f57e4b453dc8c699d5138d7d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "acc8bb9a2c395d7f5684b514d1321ba6377e97fd", "commitAfterChange": "dc9a89d9f844d31b09ec158bf347daa2976701f3", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic MethodBinding getMethodBinding()", "signatureAfterChange": " \tpublic MethodBinding getMethodBinding()", "diff": ["-\t\t\t\tthis.actualMethodBinding = new MethodBinding(this.binding.modifiers, this.binding.selector, this.binding.returnType, ", "-\t\t\t\t\t\tthis.binding instanceof SyntheticMethodBinding ? this.descriptor.parameters : this.binding.parameters,  // retain any faults in parameter list.", "-\t\t\t\t\t\t\t\tthis.binding.thrownExceptions, this.binding.declaringClass);", "+\t\t\t\t// Get rid of the synthetic arguments added via addSyntheticArgument()", "+\t\t\t\tTypeBinding[] newParams = null;", "+\t\t\t\tif (this.binding instanceof SyntheticMethodBinding && this.outerLocalVariables.length > 0) {", "+\t\t\t\t\tnewParams = new TypeBinding[this.binding.parameters.length - this.outerLocalVariables.length];", "+\t\t\t\t\tSystem.arraycopy(this.binding.parameters, this.outerLocalVariables.length, newParams, 0, newParams.length);", "+\t\t\t\t} else {", "+\t\t\t\t\tnewParams = this.binding.parameters;", "+\t\t\t\t}", "+\t\t\t\tthis.actualMethodBinding = new MethodBinding(this.binding.modifiers, this.binding.selector,", "+\t\t\t\t\t\tthis.binding.returnType, newParams, this.binding.thrownExceptions, this.binding.declaringClass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4583c5ee4df5b8784ecc8a71334f297c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.pluggable.tests/src/org/eclipse/jdt/apt/pluggable/tests/processors/genclass6/GenClass6Proc.java", "commitBeforeChange": "cae1ac0076053182a150a9a6566741ab9c075217", "commitAfterChange": "976283265acccc4408306834f2f927413343ea11", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate void generateType(GenClass6 genClassMirror, Element annotatedEl)", "signatureAfterChange": " \tprivate void processType(GenClass6 genClassMirror, Element annotatedEl)", "diff": ["-\tprivate void generateType(GenClass6 genClassMirror, Element annotatedEl) {", "+\tprivate void processType(GenClass6 genClassMirror, Element annotatedEl) {", "+\t\tString[] options = null;", "+\t\t\toptions = genClassMirror.options();", "+\t\t", "+\t\t// Options allow the processor to expose certain error conditions.", "+\t\tif (null != options) {", "+\t\t\tSet<String> optionSet = new HashSet<String>(Arrays.asList(options));", "+\t\t\t// See https://bugs.eclipse.org/269934: calling getEnclosedElements forces resolution of referenced types", "+\t\t\tif (optionSet.contains(\"forceElementResolution\")) {", "+\t\t\t\tannotatedEl.getEnclosedElements();", "+\t\t\t}", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1c3e13b152be8ff1bb5ece9ece696f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDeltaBuilder.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " private void findContentChange(JavaElementInfo oldInfo, JavaElementInfo newInfo, IJavaElement newElement)", "signatureAfterChange": " private void findContentChange(JavaElementInfo oldInfo, JavaElementInfo newInfo, IJavaElement newElement)", "diff": ["-\t\t\tif (!CharOperation.equals(", "-\t\t\t\t\t((SourceMethodElementInfo)oldInfo).getReturnTypeName(), ", "-\t\t\t\t\t((SourceMethodElementInfo)newInfo).getReturnTypeName())) {", "+\t\t\tSourceMethodElementInfo oldSourceMethodInfo = (SourceMethodElementInfo)oldInfo;", "+\t\t\tSourceMethodElementInfo newSourceMethodInfo = (SourceMethodElementInfo)newInfo;", "+\t\t\tif (!CharOperation.equals(oldSourceMethodInfo.getReturnTypeName(), newSourceMethodInfo.getReturnTypeName())", "+\t\t\t\t\t|| !CharOperation.equals(oldSourceMethodInfo.getTypeParameterSignatures(), newSourceMethodInfo.getTypeParameterSignatures())) {", "-\t\t\t|| !CharOperation.equals(oldSourceTypeInfo.getInterfaceNames(), newSourceTypeInfo.getInterfaceNames())) {", "+\t\t\t\t|| !CharOperation.equals(oldSourceTypeInfo.getInterfaceNames(), newSourceTypeInfo.getInterfaceNames())) {", "+\t\tif (!CharOperation.equals(oldSourceTypeInfo.getTypeParameterSignatures(), newSourceTypeInfo.getTypeParameterSignatures())) {", "+\t\t\tthis.delta.changed(newElement, IJavaElementDelta.F_CONTENT);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c66edb2a9d00a0a2904e867119220bfb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredVariableBinding.java", "commitBeforeChange": "d752b26e3a6a22a0d2aea83eca1f4ca2bd2e36dd", "commitAfterChange": "24134b187b46ea16212a45107324227f46ba3e4a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tpublic String getKey()", "signatureAfterChange": "  \tpublic String getKey()", "diff": ["-\t\treturn null;", "+\t\tStringBuffer buffer = new StringBuffer();", "+\t\tbuffer.append(\"Recovered#\"); //$NON-NLS-1$", "+\t\tif (variableDeclaration != null) {", "+\t\t\tbuffer", "+\t\t\t\t.append(\"variableDeclaration\") //$NON-NLS-1$", "+\t\t\t\t.append(this.variableDeclaration.getClass())", "+\t\t\t\t.append(this.variableDeclaration.getName().getIdentifier())", "+\t\t\t\t.append(this.variableDeclaration.getExtraDimensions());", "+\t\t}", "+\t\treturn String.valueOf(buffer);"]}], "num": 17915}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fef41b0739c847a9bc2a2cafde400f91", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "120e3c9199406365d6b0127569fd7345", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "2978110db99779d239d94c1b0f5bcb0af9289202", "commitAfterChange": "affddd301b18dc78fff479e07d2a614268019fc4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "signatureAfterChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "diff": ["-\t */", "-\tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode) {", "-\t\tif (classFileReader == null) return EMPTY_OUTPUT;", "-\t\tStringBuffer buffer = new StringBuffer();", "-\t", "-\t\tISourceAttribute sourceAttribute = classFileReader.getSourceFileAttribute();", "-\t\tIClassFileAttribute classFileAttribute = Util.getAttribute(classFileReader, IAttributeNamesConstants.SIGNATURE);", "-\t\tISignatureAttribute signatureAttribute = (ISignatureAttribute) classFileAttribute;", "-\t\tfinal int accessFlags = classFileReader.getAccessFlags();", "-\t\tif (mode == DETAILED || mode == SYSTEM) {", "-\t\t\tint minorVersion = classFileReader.getMinorVersion();", "-\t\t\tint majorVersion = classFileReader.getMajorVersion();", "-\t\t\tbuffer.append(Util.bind(\"disassembler.begincommentline\")); //$NON-NLS-1$", "-\t\t\tif (sourceAttribute != null) {", "-\t\t\t\tbuffer.append(Util.bind(\"disassembler.sourceattributeheader\")); //$NON-NLS-1$", "-\t\t\t\tbuffer.append(sourceAttribute.getSourceFileName());", "-\t\t\t}", "-\t\t\tString versionNumber = VERSION_UNKNOWN;//$NON-NLS-1$", "-\t\t\tif (minorVersion == 3 && majorVersion == 45) {", "-\t\t\t\tversionNumber = JavaCore.VERSION_1_1;", "-\t\t\t} else if (minorVersion == 0 && majorVersion == 46) {", "-\t\t\t\tversionNumber = JavaCore.VERSION_1_2;", "-\t\t\t} else if (minorVersion == 0 && majorVersion == 47) {", "-\t\t\t\tversionNumber = JavaCore.VERSION_1_3;", "-\t\t\t} else if (minorVersion == 0 && majorVersion == 48) {", "-\t\t\t\tversionNumber = JavaCore.VERSION_1_4;", "-\t\t\t} else if (minorVersion == 0 && majorVersion == 49) {", "-\t\t\t\tversionNumber = JavaCore.VERSION_1_5;", "-\t\t\t}", "-\t\t\tbuffer.append(", "-\t\t\t\tUtil.bind(\"classfileformat.versiondetails\",//$NON-NLS-1$", "-\t\t\t\tnew String[] {", "-\t\t\t\t\tversionNumber,", "-\t\t\t\t\tInteger.toString(majorVersion),", "-\t\t\t\t\tInteger.toString(minorVersion),", "-\t\t\t\t\t((accessFlags & IModifierConstants.ACC_SUPER) != 0", "-\t\t\t\t\t\t\t? Util.bind(\"classfileformat.superflagisset\")//$NON-NLS-1$", "-\t\t\t\t\t\t\t: Util.bind(\"classfileformat.superflagisnotset\"))//$NON-NLS-1$", "-\t\t\t\t\t+ (isDeprecated(classFileReader) ? \", deprecated\" : EMPTY_OUTPUT)//$NON-NLS-1$", "-\t\t\t\t}));", "-\t\t\twriteNewLine(buffer, lineSeparator, 0);", "-\t\t\tif (signatureAttribute != null) {", "-\t\t\t\tbuffer", "-\t\t\t\t\t.append(Util.bind(\"disassembler.begincommentline\"))\t //$NON-NLS-1$", "-\t\t\t\t\t.append(Util.bind(\"disassembler.signatureattributeheader\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(signatureAttribute.getSignature());", "-\t\t\t\twriteNewLine(buffer, lineSeparator, 0);", "-\t\t\t}", "-\t\t}", "-\t\tchar[] className = classFileReader.getClassName();", "-\t\tif (className == null) {", "-\t\t\t// incomplete initialization. We cannot go further.", "-\t\t\treturn buffer.toString();", "-\t\t}", "-\t\t", "-\t\tIInnerClassesAttribute innerClassesAttribute = classFileReader.getInnerClassesAttribute();", "-\t\t", "-\t\tif (innerClassesAttribute != null) {", "-\t\t\t// search the right entry", "-\t\t\tIInnerClassesAttributeEntry[] entries = innerClassesAttribute.getInnerClassAttributesEntries();", "-\t\t\tfor (int i = 0, max = entries.length; i < max ; i++) {", "-\t\t\t\tIInnerClassesAttributeEntry entry = entries[i];", "-\t\t\t\tchar[] innerClassName = entry.getInnerClassName();", "-\t\t\t\tif (innerClassName != null) {", "-\t\t\t\t\tif (CharOperation.equals(classFileReader.getClassName(), innerClassName)) {", "-\t\t\t\t\t\tdecodeModifiersForInnerClasses(buffer, entry.getAccessFlags());", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else {", "-\t\t\tdecodeModifiersForType(buffer, accessFlags);", "-\t\t\tif (isSynthetic(classFileReader)) {", "-\t\t\t\tbuffer.append(\"synthetic\"); //$NON-NLS-1$", "-\t\t\t\tbuffer.append(Util.bind(\"disassembler.space\")); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tif ((accessFlags & IModifierConstants.ACC_ENUM) != 0) {", "-\t\t\tbuffer.append(\"enum \"); //$NON-NLS-1$", "-\t\t} else if (classFileReader.isClass()) {", "-\t\t\tbuffer.append(\"class \"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tif ((accessFlags & IModifierConstants.ACC_ANNOTATION) != 0) {", "-\t\t\t\tbuffer.append(\"@\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tbuffer.append(\"interface \"); //$NON-NLS-1$", "-\t\t}", "-\t\tCharOperation.replace(className, '/', '.');", "-\t\tbuffer.append(className);", "-\t\t", "-\t\tchar[] superclassName = classFileReader.getSuperclassName();", "-\t\tif (superclassName != null) {", "-\t\t\tbuffer.append(\" extends \"); //$NON-NLS-1$", "-\t\t\tCharOperation.replace(superclassName, '/', '.');", "-\t\t\tbuffer.append(superclassName);", "-\t\t}", "-\t\tchar[][] superclassInterfaces = classFileReader.getInterfaceNames();", "-\t\tint length = superclassInterfaces.length;", "-\t\tif (length != 0) {", "-\t\t\tbuffer.append(\" implements \"); //$NON-NLS-1$", "-\t\t\tfor (int i = 0; i < length - 1; i++) {", "-\t\t\t\tchar[] superinterface = superclassInterfaces[i];", "-\t\t\t\tCharOperation.replace(superinterface, '/', '.');", "-\t\t\t\tbuffer", "-\t\t\t\t\t.append(superinterface)", "-\t\t\t\t\t.append(Util.bind(\"disassembler.comma\"))//$NON-NLS-1$", "-\t\t\t\t\t.append(Util.bind(\"disassembler.space\")); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tchar[] superinterface = superclassInterfaces[length - 1];", "-\t\t\tCharOperation.replace(superinterface, '/', '.');", "-\t\t\tbuffer.append(superinterface);", "-\t\t}", "-\t\tbuffer.append(Util.bind(\"disassembler.opentypedeclaration\")); //$NON-NLS-1$", "-\t\tif (mode == SYSTEM) {", "-\t\t\tdisassemble(classFileReader.getConstantPool(), buffer, lineSeparator, 1);", "-\t\t}", "-\t\tdisassembleTypeMembers(classFileReader, buffer, lineSeparator, 1, mode);", "-\t\tif (mode == DETAILED || mode == SYSTEM) {", "-\t\t\tIClassFileAttribute[] attributes = classFileReader.getAttributes();", "-\t\t\tlength = attributes.length;", "-\t\t\tIEnclosingMethodAttribute enclosingMethodAttribute = getEnclosingMethodAttribute(classFileReader);", "-\t\t\tIClassFileAttribute runtimeVisibleAnnotationsAttribute = Util.getAttribute(classFileReader, IAttributeNamesConstants.RUNTIME_VISIBLE_ANNOTATIONS);", "-\t\t\tIClassFileAttribute runtimeInvisibleAnnotationsAttribute = Util.getAttribute(classFileReader, IAttributeNamesConstants.RUNTIME_INVISIBLE_ANNOTATIONS);", "-\t\t\tIClassFileAttribute runtimeVisibleParameterAnnotationsAttribute = Util.getAttribute(classFileReader, IAttributeNamesConstants.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS);", "-\t\t\tIClassFileAttribute runtimeInvisibleParameterAnnotationsAttribute = Util.getAttribute(classFileReader, IAttributeNamesConstants.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS);", "-\t\t\tint remainingAttributesLength = length;", "-\t\t\tif (innerClassesAttribute != null) {", "-\t\t\t\tremainingAttributesLength--;", "-\t\t\t}", "-\t\t\tif (enclosingMethodAttribute != null) {", "-\t\t\t\tremainingAttributesLength--;", "-\t\t\t}", "-\t\t\tif (sourceAttribute != null) {", "-\t\t\t\tremainingAttributesLength--;", "-\t\t\t}", "-\t\t\tif (signatureAttribute != null) {", "-\t\t\t\tremainingAttributesLength--;", "-\t\t\t}", "-\t\t\tif (innerClassesAttribute != null || enclosingMethodAttribute != null || remainingAttributesLength != 0) {", "-\t\t\t\twriteNewLine(buffer, lineSeparator, 0);", "-\t\t\t}", "-\t\t\tif (innerClassesAttribute != null) {", "-\t\t\t\tdisassemble(innerClassesAttribute, buffer, lineSeparator, 1);", "-\t\t\t}", "-\t\t\tif (enclosingMethodAttribute != null) {", "-\t\t\t\tdisassemble(enclosingMethodAttribute, buffer, lineSeparator, 0);", "-\t\t\t}", "-\t\t\tif (runtimeVisibleAnnotationsAttribute != null) {", "-\t\t\t\tdisassemble((IRuntimeVisibleAnnotationsAttribute) runtimeVisibleAnnotationsAttribute, buffer, lineSeparator, 0);", "-\t\t\t}", "-\t\t\tif (runtimeInvisibleAnnotationsAttribute != null) {", "-\t\t\t\tdisassemble((IRuntimeInvisibleAnnotationsAttribute) runtimeInvisibleAnnotationsAttribute, buffer, lineSeparator, 0);", "-\t\t\t}", "-\t\t\tif (runtimeVisibleParameterAnnotationsAttribute != null) {", "-\t\t\t\tdisassemble((IRuntimeVisibleParameterAnnotationsAttribute) runtimeVisibleParameterAnnotationsAttribute, buffer, lineSeparator, 0);", "-\t\t\t}", "-\t\t\tif (runtimeInvisibleParameterAnnotationsAttribute != null) {", "-\t\t\t\tdisassemble((IRuntimeInvisibleParameterAnnotationsAttribute) runtimeInvisibleParameterAnnotationsAttribute, buffer, lineSeparator, 0);", "-\t\t\t}", "-\t\t\tif (length != 0) {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tIClassFileAttribute attribute = attributes[i];", "-\t\t\t\t\tif (attribute != innerClassesAttribute", "-\t\t\t\t\t\t&& attribute != sourceAttribute", "-\t\t\t\t\t\t&& attribute != signatureAttribute", "-\t\t\t\t\t\t&& attribute != enclosingMethodAttribute", "-\t\t\t\t\t\t&& attribute != runtimeInvisibleAnnotationsAttribute", "-\t\t\t\t\t\t&& attribute != runtimeVisibleAnnotationsAttribute", "-\t\t\t\t\t\t&& attribute != runtimeInvisibleParameterAnnotationsAttribute", "-\t\t\t\t\t\t&& attribute != runtimeVisibleParameterAnnotationsAttribute", "-\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.DEPRECATED)", "-\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.SYNTHETIC)) {", "-\t\t\t\t\t\tdisassemble(attribute, buffer, lineSeparator, 0);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}\t\t", "-\t\t}", "-\t\twriteNewLine(buffer, lineSeparator, 0);", "-\t\tbuffer.append(Util.bind(\"disassembler.closetypedeclaration\")); //$NON-NLS-1$", "-\t\treturn buffer.toString();", "-\t}", "+\t */", "+\tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode) {", "+\t\tif (classFileReader == null) return EMPTY_OUTPUT;", "+\t\tStringBuffer buffer = new StringBuffer();", "+\t", "+\t\tISourceAttribute sourceAttribute = classFileReader.getSourceFileAttribute();", "+\t\tIClassFileAttribute classFileAttribute = Util.getAttribute(classFileReader, IAttributeNamesConstants.SIGNATURE);", "+\t\tISignatureAttribute signatureAttribute = (ISignatureAttribute) classFileAttribute;", "+\t\tfinal int accessFlags = classFileReader.getAccessFlags();", "+\t\tif (mode == DETAILED || mode == SYSTEM) {", "+\t\t\tint minorVersion = classFileReader.getMinorVersion();", "+\t\t\tint majorVersion = classFileReader.getMajorVersion();", "+\t\t\tbuffer.append(Util.bind(\"disassembler.begincommentline\")); //$NON-NLS-1$", "+\t\t\tif (sourceAttribute != null) {", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.sourceattributeheader\")); //$NON-NLS-1$", "+\t\t\t\tbuffer.append(sourceAttribute.getSourceFileName());", "+\t\t\t}", "+\t\t\tString versionNumber = VERSION_UNKNOWN;//$NON-NLS-1$", "+\t\t\tif (minorVersion == 3 && majorVersion == 45) {", "+\t\t\t\tversionNumber = JavaCore.VERSION_1_1;", "+\t\t\t} else if (minorVersion == 0 && majorVersion == 46) {", "+\t\t\t\tversionNumber = JavaCore.VERSION_1_2;", "+\t\t\t} else if (minorVersion == 0 && majorVersion == 47) {", "+\t\t\t\tversionNumber = JavaCore.VERSION_1_3;", "+\t\t\t} else if (minorVersion == 0 && majorVersion == 48) {", "+\t\t\t\tversionNumber = JavaCore.VERSION_1_4;", "+\t\t\t} else if (minorVersion == 0 && majorVersion == 49) {", "+\t\t\t\tversionNumber = JavaCore.VERSION_1_5;", "+\t\t\t}", "+\t\t\tbuffer.append(", "+\t\t\t\tUtil.bind(\"classfileformat.versiondetails\",//$NON-NLS-1$", "+\t\t\t\tnew String[] {", "+\t\t\t\t\tversionNumber,", "+\t\t\t\t\tInteger.toString(majorVersion),", "+\t\t\t\t\tInteger.toString(minorVersion),", "+\t\t\t\t\t((accessFlags & IModifierConstants.ACC_SUPER) != 0", "+\t\t\t\t\t\t\t? Util.bind(\"classfileformat.superflagisset\")//$NON-NLS-1$", "+\t\t\t\t\t\t\t: Util.bind(\"classfileformat.superflagisnotset\"))//$NON-NLS-1$", "+\t\t\t\t\t+ (isDeprecated(classFileReader) ? \", deprecated\" : EMPTY_OUTPUT)//$NON-NLS-1$", "+\t\t\t\t}));", "+\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t\tif (signatureAttribute != null) {", "+\t\t\t\tbuffer", "+\t\t\t\t\t.append(Util.bind(\"disassembler.begincommentline\"))\t //$NON-NLS-1$", "+\t\t\t\t\t.append(Util.bind(\"disassembler.signatureattributeheader\")) //$NON-NLS-1$", "+\t\t\t\t\t.append(signatureAttribute.getSignature());", "+\t\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t\t}", "+\t\t}", "+\t\tchar[] className = classFileReader.getClassName();", "+\t\tif (className == null) {", "+\t\t\t// incomplete initialization. We cannot go further.", "+\t\t\treturn buffer.toString();", "+\t\t}", "+\t\t", "+\t\tIInnerClassesAttribute innerClassesAttribute = classFileReader.getInnerClassesAttribute();", "+\t\tIClassFileAttribute runtimeVisibleAnnotationsAttribute = Util.getAttribute(classFileReader, IAttributeNamesConstants.RUNTIME_VISIBLE_ANNOTATIONS);", "+\t\tIClassFileAttribute runtimeInvisibleAnnotationsAttribute = Util.getAttribute(classFileReader, IAttributeNamesConstants.RUNTIME_INVISIBLE_ANNOTATIONS);", "+\t\t", "+\t\tif (mode == DETAILED || mode == SYSTEM) {", "+\t\t\t// disassemble compact version of annotations", "+\t\t\tif (runtimeInvisibleAnnotationsAttribute != null) {", "+\t\t\t\tdisassembleAsModifier((IRuntimeInvisibleAnnotationsAttribute) runtimeInvisibleAnnotationsAttribute, buffer, lineSeparator, 1);", "+\t\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t\t}", "+\t\t\tif (runtimeVisibleAnnotationsAttribute != null) {", "+\t\t\t\tdisassembleAsModifier((IRuntimeVisibleAnnotationsAttribute) runtimeVisibleAnnotationsAttribute, buffer, lineSeparator, 1);", "+\t\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t\t}", "+\t\t}", "+\t\tif (innerClassesAttribute != null) {", "+\t\t\t// search the right entry", "+\t\t\tIInnerClassesAttributeEntry[] entries = innerClassesAttribute.getInnerClassAttributesEntries();", "+\t\t\tfor (int i = 0, max = entries.length; i < max ; i++) {", "+\t\t\t\tIInnerClassesAttributeEntry entry = entries[i];", "+\t\t\t\tchar[] innerClassName = entry.getInnerClassName();", "+\t\t\t\tif (innerClassName != null) {", "+\t\t\t\t\tif (CharOperation.equals(classFileReader.getClassName(), innerClassName)) {", "+\t\t\t\t\t\tdecodeModifiersForInnerClasses(buffer, entry.getAccessFlags());", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tdecodeModifiersForType(buffer, accessFlags);", "+\t\t\tif (isSynthetic(classFileReader)) {", "+\t\t\t\tbuffer.append(\"synthetic\"); //$NON-NLS-1$", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.space\")); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tif ((accessFlags & IModifierConstants.ACC_ENUM) != 0) {", "+\t\t\tbuffer.append(\"enum \"); //$NON-NLS-1$", "+\t\t} else if (classFileReader.isClass()) {", "+\t\t\tbuffer.append(\"class \"); //$NON-NLS-1$", "+\t\t} else {", "+\t\t\tif ((accessFlags & IModifierConstants.ACC_ANNOTATION) != 0) {", "+\t\t\t\tbuffer.append(\"@\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tbuffer.append(\"interface \"); //$NON-NLS-1$", "+\t\t}", "+\t\tCharOperation.replace(className, '/', '.');", "+\t\tbuffer.append(className);", "+\t\t", "+\t\tchar[] superclassName = classFileReader.getSuperclassName();", "+\t\tif (superclassName != null) {", "+\t\t\tbuffer.append(\" extends \"); //$NON-NLS-1$", "+\t\t\tCharOperation.replace(superclassName, '/', '.');", "+\t\t\tbuffer.append(superclassName);", "+\t\t}", "+\t\tchar[][] superclassInterfaces = classFileReader.getInterfaceNames();", "+\t\tint length = superclassInterfaces.length;", "+\t\tif (length != 0) {", "+\t\t\tbuffer.append(\" implements \"); //$NON-NLS-1$", "+\t\t\tfor (int i = 0; i < length - 1; i++) {", "+\t\t\t\tchar[] superinterface = superclassInterfaces[i];", "+\t\t\t\tCharOperation.replace(superinterface, '/', '.');", "+\t\t\t\tbuffer", "+\t\t\t\t\t.append(superinterface)", "+\t\t\t\t\t.append(Util.bind(\"disassembler.comma\"))//$NON-NLS-1$", "+\t\t\t\t\t.append(Util.bind(\"disassembler.space\")); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tchar[] superinterface = superclassInterfaces[length - 1];", "+\t\t\tCharOperation.replace(superinterface, '/', '.');", "+\t\t\tbuffer.append(superinterface);", "+\t\t}", "+\t\tbuffer.append(Util.bind(\"disassembler.opentypedeclaration\")); //$NON-NLS-1$", "+\t\tif (mode == SYSTEM) {", "+\t\t\tdisassemble(classFileReader.getConstantPool(), buffer, lineSeparator, 1);", "+\t\t}", "+\t\tdisassembleTypeMembers(classFileReader, buffer, lineSeparator, 1, mode);", "+\t\tif (mode == DETAILED || mode == SYSTEM) {", "+\t\t\tIClassFileAttribute[] attributes = classFileReader.getAttributes();", "+\t\t\tlength = attributes.length;", "+\t\t\tIEnclosingMethodAttribute enclosingMethodAttribute = getEnclosingMethodAttribute(classFileReader);", "+\t\t\tint remainingAttributesLength = length;", "+\t\t\tif (innerClassesAttribute != null) {", "+\t\t\t\tremainingAttributesLength--;", "+\t\t\t}", "+\t\t\tif (enclosingMethodAttribute != null) {", "+\t\t\t\tremainingAttributesLength--;", "+\t\t\t}", "+\t\t\tif (sourceAttribute != null) {", "+\t\t\t\tremainingAttributesLength--;", "+\t\t\t}", "+\t\t\tif (signatureAttribute != null) {", "+\t\t\t\tremainingAttributesLength--;", "+\t\t\t}", "+\t\t\tif (innerClassesAttribute != null || enclosingMethodAttribute != null || remainingAttributesLength != 0) {", "+\t\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t\t}", "+\t\t\tif (innerClassesAttribute != null) {", "+\t\t\t\tdisassemble(innerClassesAttribute, buffer, lineSeparator, 1);", "+\t\t\t}", "+\t\t\tif (enclosingMethodAttribute != null) {", "+\t\t\t\tdisassemble(enclosingMethodAttribute, buffer, lineSeparator, 0);", "+\t\t\t}", "+\t\t\tif (runtimeVisibleAnnotationsAttribute != null) {", "+\t\t\t\tdisassemble((IRuntimeVisibleAnnotationsAttribute) runtimeVisibleAnnotationsAttribute, buffer, lineSeparator, 0);", "+\t\t\t}", "+\t\t\tif (runtimeInvisibleAnnotationsAttribute != null) {", "+\t\t\t\tdisassemble((IRuntimeInvisibleAnnotationsAttribute) runtimeInvisibleAnnotationsAttribute, buffer, lineSeparator, 0);", "+\t\t\t}", "+\t\t\tif (length != 0) {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tIClassFileAttribute attribute = attributes[i];", "+\t\t\t\t\tif (attribute != innerClassesAttribute", "+\t\t\t\t\t\t&& attribute != sourceAttribute", "+\t\t\t\t\t\t&& attribute != signatureAttribute", "+\t\t\t\t\t\t&& attribute != enclosingMethodAttribute", "+\t\t\t\t\t\t&& attribute != runtimeInvisibleAnnotationsAttribute", "+\t\t\t\t\t\t&& attribute != runtimeVisibleAnnotationsAttribute", "+\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.DEPRECATED)", "+\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.SYNTHETIC)) {", "+\t\t\t\t\t\tdisassemble(attribute, buffer, lineSeparator, 0);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}\t\t", "+\t\t}", "+\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\tbuffer.append(Util.bind(\"disassembler.closetypedeclaration\")); //$NON-NLS-1$", "+\t\treturn buffer.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "491771c3a601726aec181213afe87d14", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "2978110db99779d239d94c1b0f5bcb0af9289202", "commitAfterChange": "affddd301b18dc78fff479e07d2a614268019fc4", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprivate void disassemble(IFieldInfo fieldInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": " \tprivate void disassemble(IFieldInfo fieldInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["-\t */", "-\tprivate void disassemble(IFieldInfo fieldInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {", "-\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\tchar[] fieldDescriptor = fieldInfo.getDescriptor();", "-\t\tIClassFileAttribute classFileAttribute = Util.getAttribute(fieldInfo, IAttributeNamesConstants.SIGNATURE);", "-\t\tISignatureAttribute signatureAttribute = (ISignatureAttribute) classFileAttribute;", "-\t\tif (mode == DETAILED || mode == SYSTEM) {", "-\t\t\tbuffer", "-\t\t\t\t.append(Util.bind(\"disassembler.begincommentline\")) //$NON-NLS-1$", "-\t\t\t\t.append(Util.bind(\"classfileformat.fieldddescriptor\")) //$NON-NLS-1$", "-\t\t\t\t.append(Util.bind(\"classfileformat.fielddescriptorindex\")) //$NON-NLS-1$", "-\t\t\t\t.append(fieldInfo.getDescriptorIndex())", "-\t\t\t\t.append(Util.bind(\"disassembler.space\")) //$NON-NLS-1$", "-\t\t\t\t.append(fieldDescriptor);", "-\t\t\tif (fieldInfo.isDeprecated()) {", "-\t\t\t\tbuffer.append(Util.bind(\"disassembler.deprecated\"));//$NON-NLS-1$", "-\t\t\t}", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\tif (signatureAttribute != null) {", "-\t\t\t\tbuffer", "-\t\t\t\t\t.append(Util.bind(\"disassembler.begincommentline\"))\t //$NON-NLS-1$", "-\t\t\t\t\t.append(Util.bind(\"disassembler.signatureattributeheader\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(signatureAttribute.getSignature());", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\t}", "-\t\t}", "-\t\tdecodeModifiersForField(buffer, fieldInfo.getAccessFlags());", "-\t\tif (fieldInfo.isSynthetic()) {", "-\t\t\tbuffer.append(\"synthetic\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"disassembler.space\")); //$NON-NLS-1$", "-\t\t}", "-\t\tbuffer.append(getSignatureForField(fieldDescriptor));", "-\t\tbuffer.append(Util.bind(\"disassembler.space\")); //$NON-NLS-1$", "-\t\tbuffer.append(new String(fieldInfo.getName()));", "-\t\tIConstantValueAttribute constantValueAttribute = fieldInfo.getConstantValueAttribute();", "-\t\tif (constantValueAttribute != null) {", "-\t\t\tbuffer.append(Util.bind(\"disassembler.fieldhasconstant\")); //$NON-NLS-1$", "-\t\t\tIConstantPoolEntry constantPoolEntry = constantValueAttribute.getConstantValue();", "-\t\t\tswitch(constantPoolEntry.getKind()) {", "-\t\t\t\tcase IConstantPoolConstant.CONSTANT_Long :", "-\t\t\t\t\tbuffer.append(constantPoolEntry.getLongValue() + \"L\"); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IConstantPoolConstant.CONSTANT_Float :", "-\t\t\t\t\tbuffer.append(constantPoolEntry.getFloatValue() + \"f\"); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IConstantPoolConstant.CONSTANT_Double :", "-\t\t\t\t\tbuffer.append(constantPoolEntry.getDoubleValue());", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IConstantPoolConstant.CONSTANT_Integer:", "-\t\t\t\t\tswitch(fieldDescriptor[0]) {", "-\t\t\t\t\t\tcase 'C' :", "-\t\t\t\t\t\t\tbuffer.append(\"'\" + (char) constantPoolEntry.getIntegerValue() + \"'\"); //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase 'Z' :", "-\t\t\t\t\t\t\tbuffer.append(constantPoolEntry.getIntegerValue() == 1 ? \"true\" : \"false\");//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase 'B' :", "-\t\t\t\t\t\t\tbuffer.append(constantPoolEntry.getIntegerValue());", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase 'S' :", "-\t\t\t\t\t\t\tbuffer.append(constantPoolEntry.getIntegerValue());", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase 'I' :", "-\t\t\t\t\t\t\tbuffer.append(constantPoolEntry.getIntegerValue());", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IConstantPoolConstant.CONSTANT_String:", "-\t\t\t\t\tbuffer.append(\"\\\"\" + decodeStringValue(constantPoolEntry.getStringValue()) + \"\\\"\" );//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t}", "-\t\t}", "-\t\tbuffer.append(Util.bind(\"disassembler.endoffieldheader\")); //$NON-NLS-1$", "-\t\tif (mode == DETAILED || mode == SYSTEM) {", "-\t\t\tIClassFileAttribute[] attributes = fieldInfo.getAttributes();", "-\t\t\tIClassFileAttribute runtimeVisibleAnnotationsAttribute = Util.getAttribute(fieldInfo, IAttributeNamesConstants.RUNTIME_VISIBLE_ANNOTATIONS);", "-\t\t\tIClassFileAttribute runtimeInvisibleAnnotationsAttribute = Util.getAttribute(fieldInfo, IAttributeNamesConstants.RUNTIME_INVISIBLE_ANNOTATIONS);", "-\t\t\tIClassFileAttribute runtimeVisibleParameterAnnotationsAttribute = Util.getAttribute(fieldInfo, IAttributeNamesConstants.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS);", "-\t\t\tIClassFileAttribute runtimeInvisibleParameterAnnotationsAttribute = Util.getAttribute(fieldInfo, IAttributeNamesConstants.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS);", "-\t\t\tint length = attributes.length;", "-\t\t\tif (length != 0) {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tIClassFileAttribute attribute = attributes[i];", "-\t\t\t\t\tif (attribute != constantValueAttribute", "-\t\t\t\t\t\t&& attribute != signatureAttribute", "-\t\t\t\t\t\t&& attribute != runtimeInvisibleAnnotationsAttribute", "-\t\t\t\t\t\t&& attribute != runtimeVisibleAnnotationsAttribute", "-\t\t\t\t\t\t&& attribute != runtimeInvisibleParameterAnnotationsAttribute", "-\t\t\t\t\t\t&& attribute != runtimeVisibleParameterAnnotationsAttribute", "-\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.DEPRECATED)", "-\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.SYNTHETIC)) {", "-\t\t\t\t\t\tdisassemble(attribute, buffer, lineSeparator, tabNumber);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (runtimeVisibleAnnotationsAttribute != null) {", "-\t\t\t\tdisassemble((IRuntimeVisibleAnnotationsAttribute) runtimeVisibleAnnotationsAttribute, buffer, lineSeparator, tabNumber);", "-\t\t\t}", "-\t\t\tif (runtimeInvisibleAnnotationsAttribute != null) {", "-\t\t\t\tdisassemble((IRuntimeInvisibleAnnotationsAttribute) runtimeInvisibleAnnotationsAttribute, buffer, lineSeparator, tabNumber);", "-\t\t\t}", "-\t\t\tif (runtimeVisibleParameterAnnotationsAttribute != null) {", "-\t\t\t\tdisassemble((IRuntimeVisibleParameterAnnotationsAttribute) runtimeVisibleParameterAnnotationsAttribute, buffer, lineSeparator, tabNumber);", "-\t\t\t}", "-\t\t\tif (runtimeInvisibleParameterAnnotationsAttribute != null) {", "-\t\t\t\tdisassemble((IRuntimeInvisibleParameterAnnotationsAttribute) runtimeInvisibleParameterAnnotationsAttribute, buffer, lineSeparator, tabNumber);", "-\t\t\t}", "-\t\t}", "-\t}", "+\t */", "+\tprivate void disassemble(IFieldInfo fieldInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\tchar[] fieldDescriptor = fieldInfo.getDescriptor();", "+\t\tIClassFileAttribute classFileAttribute = Util.getAttribute(fieldInfo, IAttributeNamesConstants.SIGNATURE);", "+\t\tISignatureAttribute signatureAttribute = (ISignatureAttribute) classFileAttribute;", "+\t\tif (mode == DETAILED || mode == SYSTEM) {", "+\t\t\tbuffer", "+\t\t\t\t.append(Util.bind(\"disassembler.begincommentline\")) //$NON-NLS-1$", "+\t\t\t\t.append(Util.bind(\"classfileformat.fieldddescriptor\")) //$NON-NLS-1$", "+\t\t\t\t.append(Util.bind(\"classfileformat.fielddescriptorindex\")) //$NON-NLS-1$", "+\t\t\t\t.append(fieldInfo.getDescriptorIndex())", "+\t\t\t\t.append(Util.bind(\"disassembler.space\")) //$NON-NLS-1$", "+\t\t\t\t.append(fieldDescriptor);", "+\t\t\tif (fieldInfo.isDeprecated()) {", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.deprecated\"));//$NON-NLS-1$", "+\t\t\t}", "+\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\t\tif (signatureAttribute != null) {", "+\t\t\t\tbuffer", "+\t\t\t\t\t.append(Util.bind(\"disassembler.begincommentline\"))\t //$NON-NLS-1$", "+\t\t\t\t\t.append(Util.bind(\"disassembler.signatureattributeheader\")) //$NON-NLS-1$", "+\t\t\t\t\t.append(signatureAttribute.getSignature());", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\t\t}", "+\t\t}", "+\t\tIClassFileAttribute runtimeVisibleAnnotationsAttribute = Util.getAttribute(fieldInfo, IAttributeNamesConstants.RUNTIME_VISIBLE_ANNOTATIONS);", "+\t\tIClassFileAttribute runtimeInvisibleAnnotationsAttribute = Util.getAttribute(fieldInfo, IAttributeNamesConstants.RUNTIME_INVISIBLE_ANNOTATIONS);", "+\t\tif (mode == DETAILED || mode == SYSTEM) {", "+\t\t\t// disassemble compact version of annotations", "+\t\t\tif (runtimeInvisibleAnnotationsAttribute != null) {", "+\t\t\t\tdisassembleAsModifier((IRuntimeInvisibleAnnotationsAttribute) runtimeInvisibleAnnotationsAttribute, buffer, lineSeparator, tabNumber + 1);", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\t\t}", "+\t\t\tif (runtimeVisibleAnnotationsAttribute != null) {", "+\t\t\t\tdisassembleAsModifier((IRuntimeVisibleAnnotationsAttribute) runtimeVisibleAnnotationsAttribute, buffer, lineSeparator, tabNumber + 1);", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\t\t}", "+\t\t}", "+\t\tdecodeModifiersForField(buffer, fieldInfo.getAccessFlags());", "+\t\tif (fieldInfo.isSynthetic()) {", "+\t\t\tbuffer.append(\"synthetic\"); //$NON-NLS-1$", "+\t\t\tbuffer.append(Util.bind(\"disassembler.space\")); //$NON-NLS-1$", "+\t\t}", "+\t\tbuffer.append(getSignatureForField(fieldDescriptor));", "+\t\tbuffer.append(Util.bind(\"disassembler.space\")); //$NON-NLS-1$", "+\t\tbuffer.append(new String(fieldInfo.getName()));", "+\t\tIConstantValueAttribute constantValueAttribute = fieldInfo.getConstantValueAttribute();", "+\t\tif (constantValueAttribute != null) {", "+\t\t\tbuffer.append(Util.bind(\"disassembler.fieldhasconstant\")); //$NON-NLS-1$", "+\t\t\tIConstantPoolEntry constantPoolEntry = constantValueAttribute.getConstantValue();", "+\t\t\tswitch(constantPoolEntry.getKind()) {", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_Long :", "+\t\t\t\t\tbuffer.append(constantPoolEntry.getLongValue() + \"L\"); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_Float :", "+\t\t\t\t\tbuffer.append(constantPoolEntry.getFloatValue() + \"f\"); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_Double :", "+\t\t\t\t\tbuffer.append(constantPoolEntry.getDoubleValue());", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_Integer:", "+\t\t\t\t\tswitch(fieldDescriptor[0]) {", "+\t\t\t\t\t\tcase 'C' :", "+\t\t\t\t\t\t\tbuffer.append(\"'\" + (char) constantPoolEntry.getIntegerValue() + \"'\"); //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase 'Z' :", "+\t\t\t\t\t\t\tbuffer.append(constantPoolEntry.getIntegerValue() == 1 ? \"true\" : \"false\");//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase 'B' :", "+\t\t\t\t\t\t\tbuffer.append(constantPoolEntry.getIntegerValue());", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase 'S' :", "+\t\t\t\t\t\t\tbuffer.append(constantPoolEntry.getIntegerValue());", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase 'I' :", "+\t\t\t\t\t\t\tbuffer.append(constantPoolEntry.getIntegerValue());", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_String:", "+\t\t\t\t\tbuffer.append(\"\\\"\" + decodeStringValue(constantPoolEntry.getStringValue()) + \"\\\"\" );//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t}", "+\t\t}", "+\t\tbuffer.append(Util.bind(\"disassembler.endoffieldheader\")); //$NON-NLS-1$", "+\t\tif (mode == DETAILED || mode == SYSTEM) {", "+\t\t\tIClassFileAttribute[] attributes = fieldInfo.getAttributes();", "+\t\t\tint length = attributes.length;", "+\t\t\tif (length != 0) {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tIClassFileAttribute attribute = attributes[i];", "+\t\t\t\t\tif (attribute != constantValueAttribute", "+\t\t\t\t\t\t&& attribute != signatureAttribute", "+\t\t\t\t\t\t&& attribute != runtimeInvisibleAnnotationsAttribute", "+\t\t\t\t\t\t&& attribute != runtimeVisibleAnnotationsAttribute", "+\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.DEPRECATED)", "+\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.SYNTHETIC)) {", "+\t\t\t\t\t\tdisassemble(attribute, buffer, lineSeparator, tabNumber);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (runtimeVisibleAnnotationsAttribute != null) {", "+\t\t\t\tdisassemble((IRuntimeVisibleAnnotationsAttribute) runtimeVisibleAnnotationsAttribute, buffer, lineSeparator, tabNumber);", "+\t\t\t}", "+\t\t\tif (runtimeInvisibleAnnotationsAttribute != null) {", "+\t\t\t\tdisassemble((IRuntimeInvisibleAnnotationsAttribute) runtimeInvisibleAnnotationsAttribute, buffer, lineSeparator, tabNumber);", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 50957}
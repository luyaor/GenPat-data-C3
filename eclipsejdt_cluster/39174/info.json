{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56073c571f325b1c26624bb36b991485", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dd300903c38c2b9ed340dd0eaf98616", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 167, "signatureBeforeChange": "\t\t \t \tpublic void testTypeDeclaration()", "signatureAfterChange": "\t\t \t \tpublic void testTypeDeclaration()", "diff": ["-\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t\tassertTrue(x.getSuperclass() == null);", "+\t\t\tassertTrue(x.superInterfaces().size() == 0);", "+\t\t} else {", "+\t\t\tassertTrue(x.modifiers().size() == 0);", "+\t\t\tassertTrue(x.typeParameters().size() == 0);", "+\t\t\tassertTrue(x.getSuperclassType() == null);", "+\t\t\tassertTrue(x.superInterfaceTypes().size() == 0);", "+\t\t}", "-\t\tassertTrue(x.getSuperclass() == null);", "-\t\tassertTrue(x.superInterfaces().size() == 0);", "-\t\tint legal = Modifier.PUBLIC | Modifier.PROTECTED", "-\t\t\t| Modifier.PRIVATE | Modifier.ABSTRACT | Modifier.STATIC", "-\t\t\t| Modifier.FINAL | Modifier.STRICTFP;", "-\t\tpreviousCount = ast.modificationCount();", "-\t\tx.setModifiers(legal);", "-\t\tassertTrue(ast.modificationCount() > previousCount);", "-\t\tassertTrue(x.getModifiers() == legal);", "-", "-\t\tpreviousCount = ast.modificationCount();", "-\t\tx.setModifiers(Modifier.NONE);", "-\t\tassertTrue(ast.modificationCount() > previousCount);", "-\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "-", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tint legal = Modifier.PUBLIC | Modifier.PROTECTED", "+\t\t\t\t| Modifier.PRIVATE | Modifier.ABSTRACT | Modifier.STATIC", "+\t\t\t\t| Modifier.FINAL | Modifier.STRICTFP;", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setModifiers(legal);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.getModifiers() == legal);", "+\t", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setModifiers(Modifier.NONE);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t}", "+\t\t", "-\t\t\t\t", "+\t\ttModifiers(x);\t\t", "+\t\t", "-\t\tgenericPropertyTest(x, new Property(\"Superclass\", false, Name.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tSimpleName result = targetAst.newSimpleName(\"foo\"); //$NON-NLS-1$", "-\t\t\t\tif (parented) {", "-\t\t\t\t\ttargetAst.newExpressionStatement(result);", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tgenericPropertyListTest(x, x.typeParameters(),", "+\t\t\t  new Property(\"TypeParameters\", true, TypeParameter.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tTypeParameter result = targetAst.newTypeParameter();", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newMethodDeclaration().typeParameters().add(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t\tpublic ASTNode get() {", "-\t\t\t\treturn x.getSuperclass();", "-\t\t\t}", "-\t\t\tpublic void set(ASTNode value) {", "-\t\t\t\tx.setSuperclass((Name) value);", "-\t\t\t}", "-\t\t});", "+\t\t\t});", "+\t\t}", "-\t\tgenericPropertyListTest(x, x.superInterfaces(),", "-\t\t  new Property(\"SuperInterfaces\", true, Name.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tSimpleName result = targetAst.newSimpleName(\"foo\"); //$NON-NLS-1$", "-\t\t\t\tif (parented) {", "-\t\t\t\t\ttargetAst.newExpressionStatement(result);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tgenericPropertyTest(x, new Property(\"Superclass\", false, Name.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tSimpleName result = targetAst.newSimpleName(\"foo\"); //$NON-NLS-1$", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newExpressionStatement(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t});", "+\t\t\t\tpublic ASTNode get() {", "+\t\t\t\t\treturn x.getSuperclass();", "+\t\t\t\t}", "+\t\t\t\tpublic void set(ASTNode value) {", "+\t\t\t\t\tx.setSuperclass((Name) value);", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tgenericPropertyListTest(x, x.superInterfaces(),", "+\t\t\t  new Property(\"SuperInterfaces\", true, Name.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tSimpleName result = targetAst.newSimpleName(\"foo\"); //$NON-NLS-1$", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newExpressionStatement(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\t", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tgenericPropertyTest(x, new Property(\"SuperclassType\", false, Type.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tSimpleType result = targetAst.newSimpleType(targetAst.newSimpleName(\"foo\")); //$NON-NLS-1$", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t\tpublic ASTNode get() {", "+\t\t\t\t\treturn x.getSuperclassType();", "+\t\t\t\t}", "+\t\t\t\tpublic void set(ASTNode value) {", "+\t\t\t\t\tx.setSuperclassType((Type) value);", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\t", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tgenericPropertyListTest(x, x.superInterfaceTypes(),", "+\t\t\t  new Property(\"SuperInterfaceTypes\", true, Type.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tSimpleType result = targetAst.newSimpleType(targetAst.newSimpleName(\"foo\")); //$NON-NLS-1$", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\t", "+", "+\t\t", "+\t\tEnumConstantDeclaration c1 = null;", "+\t\tEnumConstantDeclaration c2 = null;", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tc1 = ast.newEnumConstantDeclaration();", "+\t\t\tc2 = ast.newEnumConstantDeclaration();", "+\t\t\tx.bodyDeclarations().add(c1);", "+\t\t\tx.bodyDeclarations().add(c2);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13d45eef6b2017a546d070b4e47625eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 163, "methodNumberAfterChange": 230, "signatureBeforeChange": " \t \tpublic void testMethodDeclaration()", "signatureAfterChange": " \t \tpublic void testMethodDeclaration()", "diff": ["-\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t\tassertTrue(x.getReturnType().getParent() == x);", "+\t\t\tassertTrue(x.getReturnType().isPrimitiveType());", "+\t\t\tassertTrue(((PrimitiveType) x.getReturnType()).getPrimitiveTypeCode() == PrimitiveType.VOID);", "+\t\t} else {", "+\t\t\tassertTrue(x.modifiers().size() == 0);", "+\t\t\tassertTrue(x.typeParameters().size() == 0);", "+\t\t\tassertTrue(x.getReturnType2().getParent() == x);", "+\t\t\tassertTrue(x.getReturnType2().isPrimitiveType());", "+\t\t\tassertTrue(((PrimitiveType) x.getReturnType2()).getPrimitiveTypeCode() == PrimitiveType.VOID);", "+\t\t}", "-\t\tassertTrue(x.getReturnType().getParent() == x);", "-\t\tpreviousCount = ast.modificationCount();", "-\t\tint legal = Modifier.PUBLIC | Modifier.PROTECTED", "-\t\t\t| Modifier.PRIVATE | Modifier.ABSTRACT | Modifier.STATIC ", "-\t\t\t| Modifier.FINAL | Modifier.SYNCHRONIZED| Modifier.NATIVE", "-\t\t\t| Modifier.STRICTFP;", "-\t\tx.setModifiers(legal);", "-\t\tassertTrue(ast.modificationCount() > previousCount);", "-\t\tassertTrue(x.getModifiers() == legal);", "-", "-\t\tpreviousCount = ast.modificationCount();", "-\t\tx.setModifiers(Modifier.NONE);", "-\t\tassertTrue(ast.modificationCount() > previousCount);", "-\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tint legal = Modifier.PUBLIC | Modifier.PROTECTED", "+\t\t\t\t| Modifier.PRIVATE | Modifier.ABSTRACT | Modifier.STATIC ", "+\t\t\t\t| Modifier.FINAL | Modifier.SYNCHRONIZED| Modifier.NATIVE", "+\t\t\t\t| Modifier.STRICTFP;", "+\t\t\tx.setModifiers(legal);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.getModifiers() == legal);", "+\t", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setModifiers(Modifier.NONE);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t}", "+\t\ttModifiers(x);", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tgenericPropertyListTest(x, x.typeParameters(),", "+\t\t\t  new Property(\"TypeParameters\", true, TypeParameter.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tTypeParameter result = targetAst.newTypeParameter();", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newMethodDeclaration().typeParameters().add(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\t", "-\t\tgenericPropertyTest(x, new Property(\"ReturnType\", true, Type.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tSimpleType result = targetAst.newSimpleType(", "-\t\t\t\t\ttargetAst.newSimpleName(\"foo\")); //$NON-NLS-1$", "-\t\t\t\tif (parented) {", "-\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tgenericPropertyTest(x, new Property(\"ReturnType\", true, Type.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tSimpleType result = targetAst.newSimpleType(", "+\t\t\t\t\t\ttargetAst.newSimpleName(\"foo\")); //$NON-NLS-1$", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t\tpublic ASTNode get() {", "-\t\t\t\treturn x.getReturnType();", "-\t\t\t}", "-\t\t\tpublic void set(ASTNode value) {", "-\t\t\t\tx.setReturnType((Type) value);", "-\t\t\t}", "-\t\t});", "+\t\t\t\tpublic ASTNode get() {", "+\t\t\t\t\treturn x.getReturnType();", "+\t\t\t\t}", "+\t\t\t\tpublic void set(ASTNode value) {", "+\t\t\t\t\tx.setReturnType((Type) value);", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\t", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tgenericPropertyTest(x, new Property(\"ReturnType2\", false, Type.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tSimpleType result = targetAst.newSimpleType(", "+\t\t\t\t\t\ttargetAst.newSimpleName(\"foo\")); //$NON-NLS-1$", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t\tpublic ASTNode get() {", "+\t\t\t\t\treturn x.getReturnType2();", "+\t\t\t\t}", "+\t\t\t\tpublic void set(ASTNode value) {", "+\t\t\t\t\tx.setReturnType2((Type) value);", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\t", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\t// check isVariableArity convenience method", "+\t\t\tx.parameters().clear();", "+\t\t\tassertTrue(!x.isVariableArity()); // 0 params", "+\t\t\tx.parameters().add(ast.newSingleVariableDeclaration());", "+\t\t\tassertTrue(!x.isVariableArity()); // 1 params", "+\t\t\tSingleVariableDeclaration v = ast.newSingleVariableDeclaration();", "+\t\t\tx.parameters().add(v);", "+\t\t\tassertTrue(!x.isVariableArity()); // 2 param fixed arity", "+\t\t\tv.setVariableArity(true);", "+\t\t\tassertTrue(x.isVariableArity()); // 2 param fixed arity", "+\t\t\tx.parameters().add(ast.newSingleVariableDeclaration());", "+\t\t\tassertTrue(!x.isVariableArity()); // only last param counts", "+\t\t}"]}], "num": 39174}
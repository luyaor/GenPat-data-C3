{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8955ad3b156dffb5de623fccffcd5439", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02dc6f28a63ce7535f73ed761e8cdb97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDeltaBuilder.java", "commitBeforeChange": "f8eb13111e85058d6a3b96c5e3a0a3762548a3d5", "commitAfterChange": "3a282cd8b7c83e96465ddc9983742da9604c6a89", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " private void findContentChange(JavaElementInfo oldInfo, JavaElementInfo newInfo, IJavaElement newElement)", "signatureAfterChange": " private void findContentChange(JavaElementInfo oldInfo, JavaElementInfo newInfo, IJavaElement newElement)", "diff": ["-\t\t\tif (!CharOperation.equals(oldSourceMethodInfo.getReturnTypeName(), newSourceMethodInfo.getReturnTypeName())) {", "+\t\t\tif (!CharOperation.equals(oldSourceMethodInfo.getReturnTypeName(), newSourceMethodInfo.getReturnTypeName())", "+\t\t\t\t\t|| !CharOperation.equals(oldSourceMethodInfo.getTypeParameterNames(), newSourceMethodInfo.getTypeParameterNames())", "+\t\t\t\t\t|| !equals(oldSourceMethodInfo.getTypeParameterBounds(), newSourceMethodInfo.getTypeParameterBounds())) {", "+\t\tif (!CharOperation.equals(oldSourceTypeInfo.getTypeParameterNames(), newSourceTypeInfo.getTypeParameterNames())", "+\t\t\t\t|| !equals(oldSourceTypeInfo.getTypeParameterBounds(), newSourceTypeInfo.getTypeParameterBounds())) {", "+\t\t\tthis.delta.changed(newElement, IJavaElementDelta.F_CONTENT);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "184597d3b43dfe72e85891e8bf4a922c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "bc08a214a7dd82d4fa33bb61277cfaad2825deac", "commitAfterChange": "2208491f1e360e4237b8017b36c8fa0890474137", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " public void configure(String[] argv)", "signatureAfterChange": " public void configure(String[] argv)", "diff": ["-\t\t\t\t} else if (currentArg.equals(\"jsr14\")) { //$NON-NLS-1$", "+\t\t\t\t} else if (currentArg.equals(\"1.8\") || currentArg.equals(\"8\") || currentArg.equals(\"8.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_8);", "+\t\t\t\t}", "+\t\t\t\telse if (currentArg.equals(\"jsr14\")) { //$NON-NLS-1$", "+\t\t\t\t} else if (currentArg.equals(\"1.8\") || currentArg.equals(\"8\") || currentArg.equals(\"8.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_8);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f9668c338526ed9738689d992cb0096", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionRequestorWrapper.java", "commitBeforeChange": "4c1d448229be9b75331fa5d60ed6daf1dfef9f55", "commitAfterChange": "dee57778319ecddc17299fb2d002d4a5a28d0bbb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic void accept(CompletionProposal proposal)", "signatureAfterChange": " \t \tpublic void accept(CompletionProposal proposal)", "diff": ["-\t\t\t\t\t\t\tproposal.getParameterPackageNames(),", "-\t\t\t\t\t\t\tproposal.getParameterTypeNames(),", "+\t\t\t\t\t\t\tproposal.getParameterPackageNames() == null ? CharOperation.NO_CHAR_CHAR : proposal.getParameterPackageNames(),", "+\t\t\t\t\t\t\tproposal.getParameterTypeNames() == null ? CharOperation.NO_CHAR_CHAR : proposal.getParameterTypeNames(),", "-\t\t\t\t\t\t\tproposal.getParameterPackageNames(),", "-\t\t\t\t\t\t\tproposal.getParameterTypeNames(),", "+\t\t\t\t\t\t\tproposal.getParameterPackageNames() == null ? CharOperation.NO_CHAR_CHAR : proposal.getParameterPackageNames(),", "+\t\t\t\t\t\t\tproposal.getParameterTypeNames() == null ? CharOperation.NO_CHAR_CHAR : proposal.getParameterTypeNames(),", "-\t\t\t\t\t\tproposal.getParameterPackageNames(),", "-\t\t\t\t\t\tproposal.getParameterTypeNames(),", "+\t\t\t\t\t\tproposal.getParameterPackageNames() == null ? CharOperation.NO_CHAR_CHAR : proposal.getParameterPackageNames(),", "+\t\t\t\t\t\tproposal.getParameterTypeNames() == null ? CharOperation.NO_CHAR_CHAR : proposal.getParameterTypeNames(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fee5b5daaffc5beffc80e7a36c0e5fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatter.java", "commitBeforeChange": "f63db2314417880fb03b69a3a2d9f245018f9762", "commitAfterChange": "ed05e516511eea449e523a1d3b6827ca6c8a5f46", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r \tprivate void outputCurrentToken(int token)", "signatureAfterChange": "\r \tprivate void outputCurrentToken(int token)", "diff": ["+\t\t\t\tendOfLine = false;\r", "+\t\t\t\tcurrentCommentOffset = getCurrentCommentOffset();\r", "+\t\t\t\tbeginningOfLineSpaces = 0;\r", "+\t\t\t\tboolean pendingCarriageReturn = false;\r", "-\t\t\t\t\t\tcase '\\n' :\r", "+\t\t\t\t\t\t\tpendingCarriageReturn = true;\r", "-\t\t\t\t\t\t\tcurrentLineBuffer.append(currentCharacter);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase '\\n' :\r", "+\t\t\t\t\t\t\tupdateMappedPositions(i);\r", "+\t\t\t\t\t\t\tif (pendingCarriageReturn) {\r", "+\t\t\t\t\t\t\t\tincreaseGlobalDelta(options.lineSeparatorSequence.length - 2);\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\tincreaseGlobalDelta(options.lineSeparatorSequence.length - 1);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tpendingCarriageReturn = false;\r", "+\t\t\t\t\t\t\tcurrentLineBuffer.append(options.lineSeparatorSequence);\r", "+\t\t\t\t\t\t\tendOfLine = true;\r", "-\t\t\t\t\t\t\t\tif (beginningOfLineSpaces > currentCommentOffset)\r", "+\t\t\t\t\t\t\t\tif (beginningOfLineSpaces > currentCommentOffset) {\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\tincreaseGlobalDelta(-1);\r", "+\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\tif (beginningOfLineSpaces > currentCommentOffset)\r", "+\t\t\t\t\t\t\t\tif (beginningOfLineSpaces > currentCommentOffset) {\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\tincreaseGlobalDelta(-1);\r", "+\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tbeginningOfLineSpaces = 0;\r", "-\t\t\t\t\t\t\tcurrentLineBuffer.append(currentCharacter);\r", "-\t\t\t\t\t\t\tendOfLine = false;\r", "+\t\t\t\t\t\t\tif (pendingCarriageReturn) {\r", "+\t\t\t\t\t\t\t\tpendingCarriageReturn = false;\r", "+\t\t\t\t\t\t\t\tupdateMappedPositions(i);\r", "+\t\t\t\t\t\t\t\tincreaseGlobalDelta(options.lineSeparatorSequence.length - 1);\r", "+\t\t\t\t\t\t\t\tcurrentLineBuffer.append(options.lineSeparatorSequence);\r", "+\t\t\t\t\t\t\t\tbeginningOfLineSpaces = 0;\r", "+\t\t\t\t\t\t\t\tendOfLine = false;\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\tbeginningOfLineSpaces = 0;\r", "+\t\t\t\t\t\t\t\tcurrentLineBuffer.append(currentCharacter);\r", "+\t\t\t\t\t\t\t\tendOfLine = false;\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\tmultipleLineCommentCounter++;\r", "+\t\t\t\tupdateMappedPositions(startPosition);\r", "-\t\tupdateMappedPositions(startPosition);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56d8e13a23b38a40b9f42c58bfd115ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "2f81606b204235a7fea213d9e3c8df9d3bed65b9", "commitAfterChange": "af85a4064bb6dcfadda2603d722c6067b5a89418", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \r \tprivate IBinding returnBindingForQualifiedNamePart(ASTNode parent, int index)", "signatureAfterChange": "\r \r \tprivate IBinding returnBindingForQualifiedNamePart(ASTNode parent, int index)", "diff": ["-\t\t\t\t\tScope internalScope = retrieveEnclosingScope(parent);\r", "-\t\t\t\t\tBinding binding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));\r", "+\t\t\t\t\tBlockScope internalScope = retrieveEnclosingScope(parent);\r", "+\t\t\t\t\tBinding binding = null;\r", "+\t\t\t\t\tif (internalScope == null) {\r", "+\t\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));\r", "+\t\t\t\t\t}\r", "-\t\t\t\tScope internalScope = retrieveEnclosingScope(parent);\r", "-\t\t\t\tBinding binding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));\r", "+\t\t\t\tBlockScope internalScope = retrieveEnclosingScope(parent);\r", "+\t\t\t\tBinding binding = null;\r", "+\t\t\t\tif (internalScope == null) {\r", "+\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57840e3b234a33c014b0c159c6e1ec9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "c5d1291515e72a1b02e2dba658336524eb7964dc", "commitAfterChange": "5c7f45483ff98aea12080f74206c0fab992839fd", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t// if compliance 1.4 & source 1.3 => target is 1.2 if not specified", "-\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_3)){", "-\t\t\tif (didSpecifyCompliance", "-\t\t\t\t&& this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)", "-\t\t\t\t&& !didSpecifyTarget) {", "+\t\t// set default target according to compliance & sourcelevel.", "+\t\tif (!didSpecifyTarget) {", "+\t\t\tif (this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);", "+\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)) {", "+\t\t\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)) {", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67ccb8a791904693732dd4b3d91b4e4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "acf58dbcfbfa39ff3904f43d31343218ded91a71", "commitAfterChange": "27d95cfb6022c24feca5946c5f35f2eff59fa35f", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " public void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " public void configure(String[] argv) throws InvalidInputException", "diff": ["-\tboolean didSpecifyDeprecation = false;", "-\t\t\t\t\tdidSpecifyDeprecation = true;", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_ReportDeprecationInNonDeprecatedCode, CompilerOptions.ENABLED);", "-", "-\t\t\t\t\tif (didSpecifyDeprecation) {  // deprecation could have also been set through -deprecation option", "-\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);", "-\t\t\t\t\t}", "-", "+\t\t// defaults may have been overridden", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportUnusedParameterIncludeDocCommentReference,", "+\t\t\tCompilerOptions.ENABLED);", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionIncludeDocCommentReference,", "+\t\t\tCompilerOptions.ENABLED);", "+\t}", "+\t// configure deprecation level", "+\tif (this.options.get(CompilerOptions.OPTION_ReportDeprecationInNonDeprecatedCode) == CompilerOptions.ENABLED ||", "+\t\t\tthis.options.get(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode) == CompilerOptions.ENABLED) {", "+\t\tthis.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);", "+\t\t// the default may have been reset", "+\t} else {", "+\t\tthis.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.IGNORE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bf4c03e9137058dfc7ae908dacdc0b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "acf58dbcfbfa39ff3904f43d31343218ded91a71", "commitAfterChange": "27d95cfb6022c24feca5946c5f35f2eff59fa35f", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "  protected void disableWarnings()", "signatureAfterChange": "  protected void disableWarnings()", "diff": ["+\tthis.options.put(CompilerOptions.OPTION_ReportDeprecationInNonDeprecatedCode, CompilerOptions.DISABLED);", "+\tthis.options.put(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode, CompilerOptions.DISABLED);", "+\tthis.options.put(CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod, CompilerOptions.DISABLED);", "+\tthis.options.put(CompilerOptions.OPTION_ReportSpecialParameterHidingField, CompilerOptions.DISABLED);", "+\tthis.options.put(CompilerOptions.OPTION_SuppressWarnings, CompilerOptions.DISABLED);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71eabdf08ea3aeb757254a8b6f275576", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "f39402d13165cb2a8baa9e8822f47cb5416f824f", "commitAfterChange": "c59f5d3873f087b004eace9b9fa6844d0400c666", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "diff": ["+", "+\t\t\t\t\tif (resolvedEntry.getExclusionPatterns() != null && resolvedEntry.getExclusionPatterns().length > 0", "+\t\t\t\t\t\t\t&& JavaCore.DISABLED.equals(javaProject.getOption(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS, true))) {", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DISABLED_CP_EXCLUSION_PATTERNS, resolvedEntry.getPath());", "+\t\t\t\t\t}", "+", "+\t\t\t\t\t\tif (JavaCore.DISABLED.equals(javaProject.getOption(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS, true))) {", "+\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DISABLED_CP_MULTIPLE_OUTPUT_LOCATIONS, resolvedEntry.getPath());", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7df4a0cd55236701d0c87b80f7ad4118", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "45ae48e8cd32bd2f1c31e3208f3342c4041866de", "commitAfterChange": "89b6b4d9cc0c0dba647129d352a752277e787a7f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic DefaultCodeFormatter(DefaultCodeFormatterOptions preferences, Map options)", "signatureAfterChange": "  \tpublic DefaultCodeFormatter(DefaultCodeFormatterOptions preferences, Map options)", "diff": ["-\t\tthis.preferences = preferences;", "+\t\tif (options == null) {", "+\t\t\toptions = JavaCore.getOptions();", "+\t\t}", "+\t\tif (options != null) {", "+\t\t\tthis.preferences = new DefaultCodeFormatterOptions(options);", "+\t\t\tif (preferences != null) {", "+\t\t\t\tthis.preferences.set(preferences.getMap());", "+\t\t\t}", "+\t\t} else {", "+\t\t\tthis.preferences = DefaultCodeFormatterOptions.getDefault();", "+\t\t\tif (preferences != null) {", "+\t\t\t\tthis.preferences.set(preferences.getMap());", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94d7a61f84c452ae197b2b27ffcaf484", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic DefaultCodeFormatter(DefaultCodeFormatterOptions defaultCodeFormatterOptions, Map<String, String> options)", "signatureAfterChange": "  \tpublic DefaultCodeFormatter(DefaultCodeFormatterOptions defaultCodeFormatterOptions, Map options)", "diff": ["-", "-\tpublic DefaultCodeFormatter(DefaultCodeFormatterOptions defaultCodeFormatterOptions, Map<String, String> options) {", "-\t\tinitOptions(defaultCodeFormatterOptions, options);", "-\t}", "+\tpublic DefaultCodeFormatter(DefaultCodeFormatterOptions defaultCodeFormatterOptions, Map options) {", "+\t\tif (options == null) {", "+\t\t\tthis.options = JavaCore.getOptions();", "+\t\t\tthis.preferences = new DefaultCodeFormatterOptions(DefaultCodeFormatterConstants.getJavaConventionsSettings());", "+\t\t\tsetDefaultCompilerOptions();", "+\t\t\tsetOptions(options);", "+\t\t\tthis.preferences.set(defaultCodeFormatterOptions.getMap());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caeb18b43a3cac481148d899046cd154", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "3b50c86701dfe34f072b1b78f29f811d96dd75c2", "commitAfterChange": "ff17444fcc31fe021d6a45c4b051acce1b3894e3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  protected Compiler newCompiler()", "signatureAfterChange": "  protected Compiler newCompiler()", "diff": ["+\t// disable entire javadoc support if not interested in diagnostics", "+\tMap projectOptions = javaBuilder.javaProject.getOptions(true);", "+\tif (projectOptions.get(JavaCore.COMPILER_PB_INVALID_JAVADOC).equals(JavaCore.IGNORE) &&", "+\t\tprojectOptions.get(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS).equals(JavaCore.IGNORE) &&", "+\t\tprojectOptions.get(JavaCore.COMPILER_PB_MISSING_JAVADOC_COMMENTS).equals(JavaCore.IGNORE))", "+\t{", "+\t\tprojectOptions.put(JavaCore.COMPILER_DOC_COMMENT_SUPPORT, JavaCore.DISABLED);", "+\t}", "+\t", "-\t\tjavaBuilder.javaProject.getOptions(true),", "+\t\tprojectOptions,", "-\t// enable the compiler reference info support", "-\tnewCompiler.options.produceReferenceInfo = true;", "+\tCompilerOptions options = newCompiler.options;", "+\t// enable the compiler reference info support", "+\toptions.produceReferenceInfo = true;", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d866c4aa7d4c5f8b665665a3a4b18946", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatter.java", "commitBeforeChange": "a251ec08b0e50e1d36dec00c215d08f4c0a74008", "commitAfterChange": "0b0ac0f29d15040df869099953d90d518e5a8ee8", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r \tprivate void outputCurrentToken(int token)", "signatureAfterChange": "\r \tprivate void outputCurrentToken(int token)", "diff": ["+\t\t\t\t\t\t\tupdateMappedPositions(i);\r", "+\t\t\t\t\t\t\tif (pendingCarriageReturn) {\r", "+\t\t\t\t\t\t\t\tpendingCarriageReturn = false;\r", "+\t\t\t\t\t\t\t\tincreaseGlobalDelta(options.lineSeparatorSequence.length - 1);\r", "+\t\t\t\t\t\t\t\tcurrentLineBuffer.append(options.lineSeparatorSequence);\r", "+\t\t\t\t\t\t\t\tbeginningOfLineSpaces = 0;\r", "+\t\t\t\t\t\t\t\tendOfLine = true;\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tif (pendingCarriageReturn) {\r", "+\t\t\t\t\t\t\t\tpendingCarriageReturn = false;\r", "+\t\t\t\t\t\t\t\tincreaseGlobalDelta(options.lineSeparatorSequence.length - 1);\r", "+\t\t\t\t\t\t\t\tcurrentLineBuffer.append(options.lineSeparatorSequence);\r", "+\t\t\t\t\t\t\t\tbeginningOfLineSpaces = 0;\r", "+\t\t\t\t\t\t\t\tendOfLine = true;\r", "+\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\tupdateMappedPositions(i);\r", "-\t\t\t\t\t\t\t\tendOfLine = false;\r", "+\t\t\t\t\t\t\t\tendOfLine = true;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e50b5a7084135cf51b575bd400955b0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "b60a608dbabf8b5f04fae21c808d5a97597a41f6", "commitAfterChange": "0812715fc31639c278d6b4cb2dea448517c247bf", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public int computeSeverity(int problemId)", "signatureAfterChange": " public int computeSeverity(int problemId)", "diff": ["-\t\tcase IProblem.JavadocUsingDeprecatedField:", "-\t\tcase IProblem.JavadocUsingDeprecatedConstructor:", "-\t\tcase IProblem.JavadocUsingDeprecatedMethod:", "-\t\tcase IProblem.JavadocUsingDeprecatedType:", "-\t\tcase IProblem.JavadocNotVisibleField:", "-\t\tcase IProblem.JavadocNotVisibleConstructor:", "-\t\tcase IProblem.JavadocNotVisibleMethod:", "-\t\tcase IProblem.JavadocNotVisibleType:", "-\t\t\t} else {", "-\t\t\t\treturn ProblemSeverities.Ignore;", "+\t\t\treturn ProblemSeverities.Ignore;", "+", "+\t\t/*", "+\t\t * Javadoc invalid tags due to deprecated references", "+\t\t */", "+\t\tcase IProblem.JavadocUsingDeprecatedField:", "+\t\tcase IProblem.JavadocUsingDeprecatedConstructor:", "+\t\tcase IProblem.JavadocUsingDeprecatedMethod:", "+\t\tcase IProblem.JavadocUsingDeprecatedType:", "+\t\t\tif (this.options.docCommentSupport && this.options.reportInvalidJavadocTags && this.options.reportInvalidJavadocTagsDeprecatedRef) {", "+\t\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidJavadoc);", "+\t\t\t}", "+\t\t\treturn ProblemSeverities.Ignore;", "+", "+\t\t/*", "+\t\t * Javadoc invalid tags due to non-visible references", "+\t\t */", "+\t\tcase IProblem.JavadocNotVisibleField:", "+\t\tcase IProblem.JavadocNotVisibleConstructor:", "+\t\tcase IProblem.JavadocNotVisibleMethod:", "+\t\tcase IProblem.JavadocNotVisibleType:", "+\t\t\tif (this.options.docCommentSupport && this.options.reportInvalidJavadocTags && this.options.reportInvalidJavadocTagsNotVisibleRef) {", "+\t\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidJavadoc);", "+\t\t\t}", "+\t\t\treturn ProblemSeverities.Ignore;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efd1c0f4788b8b09e89225f55369433c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "c7a9edf536467451ba659d7e03ac6c483c5c0cfe", "commitAfterChange": "e6bf96fd82847410c46479a652f4e58f9a6dd052", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedPrivateMember,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "-\t\t\t\t\t} else if (token.equals(\"maskedCatchBlocks\")) { //$NON-NLS-1$", "+\t\t\t\t\t} else if (token.equals(\"maskedCatchBlock\") || token.equals(\"maskedCatchBlocks\")/*backward compatible*/) { //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t} else if (token.equals(\"unusedLocals\")) { //$NON-NLS-1$", "+\t\t\t\t\t} else if (token.equals(\"unusedLocal\") || token.equals(\"unusedLocals\")/*backward compatible*/) { //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t} else if (token.equals(\"unusedArguments\")) { //$NON-NLS-1$", "+\t\t\t\t\t} else if (token.equals(\"unusedArgument\") || token.equals(\"unusedArguments\")/*backward compatible*/) { //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t} else if (token.equals(\"unusedImports\")) { //$NON-NLS-1$", "+\t\t\t\t\t} else if (token.equals(\"unusedImport\") || token.equals(\"unusedImports\")/*backward compatible*/) { //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t} else if (token.equals(\"unusedPrivate\")) { //$NON-NLS-1$", "+\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedPrivateMember,", "+\t\t\t\t\t\t\tCompilerOptions.WARNING);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f19a07cd4116e046eb4e2fddd4f4c062", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "616a41b14ead174db92c630ec6ed7f1d666a9b67", "commitAfterChange": "645b7eff21d5db2b90380f1d4478beb9fa33f107", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": " public void configure(String[] argv)", "signatureAfterChange": " public void configure(String[] argv)", "diff": ["-\t\t\t\tif (currentArg.equals(\"-proceedOnError\")) { //$NON-NLS-1$", "+\t\t\t\tif (currentArg.startsWith(\"-proceedOnError\")) { //$NON-NLS-1$", "+\t\t\t\t\tint length = currentArg.length();", "+\t\t\t\t\tif (length > 15) {", "+\t\t\t\t\t\tif (currentArg.equals(\"-proceedOnError:Fatal\")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_FatalOptionalError, CompilerOptions.ENABLED);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthrow new IllegalArgumentException(", "+\t\t\t\t\t\t\t\t\tthis.bind(\"configure.invalidWarningConfiguration\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_FatalOptionalError, CompilerOptions.DISABLED);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb5e23cb3f6fd6f6f05b9e77cf3e84e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "07a7e8072bdec094e9ef52b674b1aac8f1f20d15", "commitAfterChange": "6b047504a49d2679fa08264f4459dab0ba213ade", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void add(IJavaElement element) throws JavaModelException", "signatureAfterChange": " public void add(IJavaElement element) throws JavaModelException", "diff": ["+\tString containerPathToString = null;", "+\t\t\tcontainerPathToString = containerPath.getDevice() == null ? containerPath.toString() : containerPath.toOSString();", "-\t\t\t\tadd(relativePath, containerPath.toString(), true, null);", "+\t\t\t\tadd(relativePath, containerPathToString, true, null);", "-\t\t\t\tadd(\"\", containerPath.toString(), true, null); //$NON-NLS-1$", "+\t\t\t\tadd(\"\", containerPathToString, true, null); //$NON-NLS-1$", "-\t\t\t\tadd(relativePath, containerPath.toString(), false, null);", "+\t\t\t\tcontainerPathToString = containerPath.getDevice() == null ? containerPath.toString() : containerPath.toOSString();", "+\t\t\t\tadd(relativePath, containerPathToString, false, null);", "+\t\t\t\t\tcontainerPathToString = containerPath.getDevice() == null ? containerPath.toString() : containerPath.toOSString();", "-\t\t\t\t\tadd(relativePath, containerPath.toString(), false, null);", "+\t\t\t\t\tadd(relativePath, containerPathToString, false, null);", "-\t\t\tadd(relativePath, containerPath.toString(), true, null);", "+\t\t\tcontainerPathToString = containerPath.getDevice() == null ? containerPath.toString() : containerPath.toOSString();", "+\t\t\tadd(relativePath, containerPathToString, true, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd74f50934c30078bfb695640ae5fa9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "3c339caa1e7b5ca6c56cf03ac002e58b4380b89e", "commitAfterChange": "51917a0c83743a82a23c6f16badda9326a65b40d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tprivate int elementType(IResource res, int kind, int flags, int parentType, boolean isPkgFragmentRoot)", "signatureAfterChange": " \tprivate int elementType(IResource res, int kind, int flags, int parentType, RootInfo rootInfo)", "diff": ["-\tprivate int elementType(IResource res, int kind, int flags, int parentType, boolean isPkgFragmentRoot) {", "+\tprivate int elementType(IResource res, int kind, int flags, int parentType, RootInfo rootInfo) {", "-\t\t\t\tif (isPkgFragmentRoot) {", "+\t\t\t\tif (rootInfo == null) {", "+\t\t\t\t\trootInfo = this.rootInfo(res.getFullPath());", "+\t\t\t\t}", "+\t\t\t\tif (rootInfo != null && (rootInfo.project.getProject().getFullPath().isPrefixOf(res.getFullPath()))) {", "-\t\t\t\tif (Util.isExcluded(res, this.currentExclusionPatterns)) {", "+\t\t\t\tif (rootInfo == null) {", "+\t\t\t\t\trootInfo = this.rootInfo(res.getFullPath());", "+\t\t\t\t}", "+\t\t\t\tif (Util.isExcluded(res, rootInfo == null ? null : rootInfo.exclusionPatterns)) {"]}], "num": 69039}
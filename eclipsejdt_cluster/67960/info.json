{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0cf401a9e25430c1b8dd5c677abf3ebe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0be21f8f874862713545dc23ab2a27d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "36487b734fd6779096039708f8fb8542e6d8c362", "commitAfterChange": "d57dbd547ab44a22cc430f18490a1ae370e64432", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\tcodeStream.pop();", "+\t\tboolean isUnboxing = (this.implicitConversion & TypeIds.UNBOXING) != 0;", "+\t\tswitch (isUnboxing ? postConversionType(currentScope).id : this.resolvedType.id) {", "+\t\t\tcase T_long :", "+\t\t\tcase T_double :", "+\t\t\t\tcodeStream.pop2();", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\tcodeStream.pop();", "+\t\t\t\tbreak;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f58eb85d4c5fecf3ddd6ef3ac45778e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "3654bde21d45ccdcdf1706ad07d134dc515c988b", "commitAfterChange": "fa087de3d8baeb274868a2e685535eadc531dcb1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": "  \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "diff": ["-\t\tif (valueRequired) {", "+\t\tboolean isUnboxing = (this.implicitConversion & TypeIds.UNBOXING) != 0;", "+\t\tif (valueRequired || isUnboxing) {", "-\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\tif (valueRequired) {", "+\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t} else if (isUnboxing) {", "+\t\t\t// conversion only generated if unboxing", "+\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\tswitch (postConversionType(currentScope).id) {", "+\t\t\t\tcase T_long :", "+\t\t\t\tcase T_double :", "+\t\t\t\t\tcodeStream.pop2();", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault :", "+\t\t\t\t\tcodeStream.pop();", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccbaaa64b6d7e19554453b50d930d599", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "3654bde21d45ccdcdf1706ad07d134dc515c988b", "commitAfterChange": "fa087de3d8baeb274868a2e685535eadc531dcb1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "  public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\tif (valueRequired) {", "+\tboolean isUnboxing = (this.implicitConversion & TypeIds.UNBOXING) != 0;", "+\tif (valueRequired || isUnboxing) {", "-\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\tif (valueRequired) {", "+\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t} else if (isUnboxing) {", "+\t\t// conversion only generated if unboxing", "+\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\tswitch (postConversionType(currentScope).id) {", "+\t\t\tcase T_long :", "+\t\t\tcase T_double :", "+\t\t\t\tcodeStream.pop2();", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\tcodeStream.pop();", "+\t\t}", "+\t}"]}], "num": 67960}
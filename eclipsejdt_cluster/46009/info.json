{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e350cf02bbdb0fb410a7384a42cd3ed", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03c7ef5ad8070dd64e4db3db1e8a0f63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/State.java", "commitBeforeChange": "c9d8f7d33a12a3fca98b81131e389ee514f5477e", "commitAfterChange": "f2df113c95a9e172c6339459cdc3cce6bb01fe4b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r \r void write(DataOutputStream out) throws IOException", "signatureAfterChange": "\r \r void write(DataOutputStream out) throws IOException", "diff": ["-\t\t\t\tif (!internedQualifiedNames.contains(qName)) // remember the names have been interned\r", "+\t\t\t\tif (!internedQualifiedNames.contains(qName)) { // remember the names have been interned\r", "+\t\t\t\t\tfor (int k = 0, sLength = qName.length; k < sLength; k++) {\r", "+\t\t\t\t\t\tchar[] sName = qName[k];\r", "+\t\t\t\t\t\tif (!internedSimpleNames.contains(sName)) // remember the names have been interned\r", "+\t\t\t\t\t\t\tinternedSimpleNames.add(sName);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "-\tlength = internedQualifiedNames.size();\r", "-\tout.writeInt(length);\r", "-\tfor (int i = 0; i < length; i++)\r", "-\t\twriteNames((char[][]) internedQualifiedNames.get(i), out);\r", "+\t// now write the interned qualified names as arrays of interned simple names\r", "+\tlength = internedQualifiedNames.size();\r", "+\tout.writeInt(length);\r", "+\tfor (int i = 0; i < length; i++) {\r", "+\t\tchar[][] qName = (char[][]) internedQualifiedNames.get(i);\r", "+\t\tint qLength = qName.length;\r", "+\t\tout.writeInt(qLength);\r", "+\t\tfor (int j = 0; j < qLength; j++)\r", "+\t\t\tout.writeInt(internedSimpleNames.indexOf(qName[j]));\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95c76220278f6a2dce705115b04790e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "c4112ab397da10b85cbb2a3f081c4c91ed7c7975", "commitAfterChange": "2077df1da6fa132fd5beb7d042b102e760cf8cbf", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  static State read(IProject project, DataInputStream in) throws IOException", "signatureAfterChange": "  static State read(IProject project, DataInputStream in) throws IOException", "diff": ["+\tchar[][] internedRootNames = ReferenceCollection.internSimpleNames(readNames(in), false);", "-\t\t\t\tcollection = new AdditionalTypeCollection(additionalTypeNames, qualifiedNames, simpleNames);", "+\t\t\t\tchar[][] rootNames = new char[in.readInt()][];", "+\t\t\t\tfor (int j = 0, m = rootNames.length; j < m; j++)", "+\t\t\t\t\trootNames[j] = internedRootNames[in.readInt()];", "+\t\t\t\tcollection = new AdditionalTypeCollection(additionalTypeNames, qualifiedNames, simpleNames, rootNames);", "-\t\t\t\tcollection = new ReferenceCollection(qNames, sNames);", "+\t\t\t\tchar[][] rNames = new char[in.readInt()][];", "+\t\t\t\tfor (int j = 0, m = rNames.length; j < m; j++)", "+\t\t\t\t\trNames[j] = internedRootNames[in.readInt()];", "+\t\t\t\tcollection = new ReferenceCollection(qNames, sNames, rNames);"]}], "num": 46009}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d79b472017a6716bee51c40b8c5ed5b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a41332266f263213f5fbb1b8e62c6ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic void test022()", "signatureAfterChange": " \tpublic void test022()", "diff": ["-\t\t\"Method make(Class<W>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\"Erasure of method make(Class<W>) is the same as another method in type Y<V>\\n\" +", "-\t\t\"Method make(Class<U>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\"Erasure of method make(Class<U>) is the same as another method in type Y<V>\\n\" +", "-\t\t\t\"Method make(Class<W>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\t\"Erasure of method make(Class<W>) is the same as another method in type Y<V>\\n\" +", "-\t\t\t\"Method make(Class<U>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\t\"Erasure of method make(Class<U>) is the same as another method in type Y<V>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "453035603b6fc90bb37e2dfc5ff9df80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " public void testTypeRefGenericsTest06_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericsTest06_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/test06/Test.java test06.Test.x [\tX<\ufffd|Exception|\ufffd> x; @39] EXACT_MATCH\\n\" +", "-\t\t\"src/test06/Test.java test06.Test.y [\tY<\ufffd|Object|\ufffd, String, Exception> y; @57] EXACT_MATCH\\n\" +", "-\t\t\"src/test06/Test.java test06.Test.y [\tY<Object, \ufffd|String|\ufffd, Exception> y; @65] EXACT_MATCH\\n\" +", "-\t\t\"src/test06/Test.java test06.Test.y [\tY<Object, String, \ufffd|Exception|\ufffd> y; @73] EXACT_MATCH\"", "+\t\t\"src/test06/Test.java test06.Test.x [\tX<!|Exception|!> x; @39] EXACT_MATCH\\n\" +", "+\t\t\"src/test06/Test.java test06.Test.y [\tY<!|Object|!, String, Exception> y; @57] EXACT_MATCH\\n\" +", "+\t\t\"src/test06/Test.java test06.Test.y [\tY<Object, !|String|!, Exception> y; @65] EXACT_MATCH\\n\" +", "+\t\t\"src/test06/Test.java test06.Test.y [\tY<Object, String, !|Exception|!> y; @73] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e1cf40aeddc43d9a7a26b90a572663b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void testBug83127d()", "signatureAfterChange": " \tpublic void testBug83127d()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bed9b44d85a65ffaf4286d625ee8ea7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "e46d27f78c861460763411dc3c7d80ec28005dd0", "commitAfterChange": "114d487223299fbb39233b9fa5b4135ee3c694c5", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " \t \tpublic void test066_codeblocks_methodReference() throws Exception", "signatureAfterChange": " \t \tpublic void test066_codeblocks_methodReference() throws Exception", "diff": ["-\t\t\t\"      #31 @B(\\n\" + ", "-\t\t\t\"        #32 value=(int) 1 (constant type)\\n\" + ", "+\t\t\t\"      #30 @B(\\n\" + ", "+\t\t\t\"        #31 value=(int) 1 (constant type)\\n\" + ", "-\t\t\t\"      #31 @B(\\n\" + ", "-\t\t\t\"        #32 value=(int) 2 (constant type)\\n\" + ", "+\t\t\t\"      #30 @B(\\n\" + ", "+\t\t\t\"        #31 value=(int) 2 (constant type)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95d8d3d11a4dbbd7baa00402260127a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "06cedbd8bd184e3f34c939385e2cbddd9e3aedca", "commitAfterChange": "0d09a2966f3cebfb8d6601000e2b64259fed7dd8", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " public void testBug400905_0002() throws CoreException", "signatureAfterChange": " public void testBug400905_0002() throws CoreException", "diff": ["-\t\t\t\"src/b400905/I.java int b400905.I.foo() [foo] EXACT_MATCH\\n\" +", "-\t\t\t\"src/b400905/X.java void b400905.X.main(String[]) [() ->] EXACT_MATCH\\n\" +", "-\t\t\t\"src/b400905/X.java void b400905.X.main(String[]) [()  ->] EXACT_MATCH\\n\" +", "-\t\t\t\"src/b400905/X.java void b400905.X.main(String[]) [()->] EXACT_MATCH\\n\" +", "-\t\t\t\"src/b400905/X.java I b400905.X.bar() [() ->] EXACT_MATCH\"", "-\t);\t", "+\t\t\t\"src/b400905/I.java int b400905.I.foo() [foo] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):<lambda>#1.lambda$1() [() ->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):<lambda>#2.lambda$2() [()  ->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):<lambda>#3.lambda$3() [()->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java int I b400905.X.bar():<lambda>#4.lambda$4() [() ->] EXACT_MATCH\");\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7bf28b52569e33fc5992398694e1ca5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AccessRestrictionsTests.java", "commitBeforeChange": "64774f020d7005b54827ff53032895aaf4555d81", "commitAfterChange": "e2d31ef7ac94c5bb6285f9813df43a1164c5ca8d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test007() throws CoreException", "signatureAfterChange": " public void test007() throws CoreException", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in /P2/src/p/Y.java (at line 3)\\n\" +", "-\t\t\t\"\tX x1;\\n\" +", "-\t\t\t\"\t^\\n\" +", "-\t\t\t\"Access restriction: The type X<T> is not accessible due to restriction on required project P1\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in /P2/src/p/Y.java (at line 4)\\n\" +", "-\t\t\t\"\tX<String> x2 = new X<String>(\\\"\\\");\\n\" +", "-\t\t\t\"\t^\\n\" +", "-\t\t\t\"Access restriction: The type X<String> is not accessible due to restriction on required project P1\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in /P2/src/p/Y.java (at line 4)\\n\" +", "-\t\t\t\"\tX<String> x2 = new X<String>(\\\"\\\");\\n\" +", "-\t\t\t\"\t               ^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Access restriction: The constructor X<String>(String) is not accessible due to restriction on required project P1\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in /P2/src/p/Y.java (at line 4)\\n\" +", "-\t\t\t\"\tX<String> x2 = new X<String>(\\\"\\\");\\n\" +", "-\t\t\t\"\t                   ^\\n\" +", "-\t\t\t\"Access restriction: The type X<String> is not accessible due to restriction on required project P1\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in /P2/src/p/Y.java (at line 3)\\n\" + ", "+\t\t\t\"\tX x1;\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"Access restriction: The type \\'X<T>\\' is not API (restriction on required project \\'P1\\')\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in /P2/src/p/Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tX<String> x2 = new X<String>(\\\"\\\");\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"Access restriction: The type \\'X<String>\\' is not API (restriction on required project \\'P1\\')\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in /P2/src/p/Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tX<String> x2 = new X<String>(\\\"\\\");\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Access restriction: The constructor \\'X<String>(String)\\' is not API (restriction on required project \\'P1\\')\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in /P2/src/p/Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tX<String> x2 = new X<String>(\\\"\\\");\\n\" + ", "+\t\t\t\"\t                   ^\\n\" + ", "+\t\t\t\"Access restriction: The type \\'X<String>\\' is not API (restriction on required project \\'P1\\')\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de2978985bc79a7cb2653e85b065948a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " public void test105()", "signatureAfterChange": " public void test105()", "diff": ["-\t\t\"\t\t\tnew int[]{0,0},\\n\" +", "-\t\t\"\t\t\tnew int[]{0,0}\\n\" +", "+\t\t\"\t\t\tnew int[]{0, 0},\\n\" +", "+\t\t\"\t\t\tnew int[]{0, 0}\\n\" +", "-\t\t\"  static int B = foo(new int[]{0,0,} , new int[]{0,0,});\\n\" +", "+\t\t\"  static int B = foo(new int[]{0, 0}, new int[]{0, 0});\\n\" +", "-\t\t\"  static int B = foo(new int[]{0,0,} , new int[]{0,0,});\\n\" +", "+\t\t\"  static int B = foo(new int[]{0, 0}, new int[]{0, 0});\\n\" +"]}], "num": 44014}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb5c6bc8496b8a8097de03a03f6e03c2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "075ee99bd54518357199285bc591f8bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "387b2eaf3ce0e720e6825fac06c84c2963551791", "commitAfterChange": "c848c526397205050ce74f2846e59bdbf8b870a1", "methodNumberBeforeChange": 342, "methodNumberAfterChange": 343, "signatureBeforeChange": " public void _test192()", "signatureAfterChange": " public void test193()", "diff": ["-public void _test192() {", "-\t\t\t\"\tpublic static int foo() {\\n\" + ", "-\t\t\t\"\t\treturn 0;\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"\tpublic static int foo() {\\n\" + ", "-\t\t\t\"\t\treturn 1;\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\"TBD\"", "+public void test193() {", "+\t\t\t\"\t@Override public int foo() { return 0; }\\n\" + ", "+\t\t\t\"\tpublic static int foo() { return 1; }\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in p1\\\\B.java (at line 3)\\n\" + ", "+\t\t\"\t@Override public int foo() { return 0; }\\n\" + ", "+\t\t\"\t                 ^^^\\n\" + ", "+\t\t\"The return type is incompatible with A.foo()\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in p1\\\\B.java (at line 3)\\n\" + ", "+\t\t\"\t@Override public int foo() { return 0; }\\n\" + ", "+\t\t\"\t                     ^^^^^\\n\" + ", "+\t\t\"This instance method cannot override the static method from C\\n\" + ", "+\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2187f7b0a9b3937e15fbdcc6017078dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "93de56b29d808bccb957df4ffa2902903a4c6151", "commitAfterChange": "baaa74c4f9aeaa7948ea0d073edd04cfcc2c793e", "methodNumberBeforeChange": 280, "methodNumberAfterChange": 279, "signatureBeforeChange": " public void test132()", "signatureAfterChange": " public void test132()", "diff": ["-// variant - simpler test case", "+// variant - type identity vs type equivalence", "-\t\t\t\"  U foo();\\n\" + ", "+\t\t\t\"  U foo(I<?> p);\\n\" + ", "+\t\t\t\"  U foo2(I<? extends Object> p);\\n\" + ", "-\t\t\t\"  public Object foo() {\\n\" + ", "-\t\t\t\"    return null;\\n\" + ", "-\t\t\t\"  }\\n\" + ", "+\t\t\t\"  public Object foo(I<? extends Object> p) { return null; }\\n\" + ", "+\t\t\t\"  public Object foo2(I<?> p) { return null; }\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\"\tpublic Object foo() {\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tpublic Object foo(I<? extends Object> p) { return null; }\\n\" + ", "-\t\t\"The return type is incompatible with I<U>.foo()\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\"The return type is incompatible with I<U>.foo(I<?>)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tpublic Object foo2(I<?> p) { return null; }\\n\" + ", "+\t\t\"\t       ^^^^^^\\n\" + ", "+\t\t\"The return type is incompatible with I<U>.foo2(I<? extends Object>)\\n\" + ", "+\t\t\"----------\\n\"", "+\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1625efdd1fcc9330b233d3510bb3edb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8845e4c8987116cc9c0aea93f48c3f458c73e5bf", "commitAfterChange": "5c85878a62876932bc62b0767f0e4b075cea01c0", "methodNumberBeforeChange": 350, "methodNumberAfterChange": 350, "signatureBeforeChange": " \tpublic void test348()", "signatureAfterChange": " \tpublic void _test348()", "diff": ["-\tpublic void test348() {", "+\tpublic void _test348() {", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"\t\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"\t\t\\n\" + ", "-\t\t\t\t\"\t\t\tpublic void run() {\\n\" + ", "-\t\t\t\t\"\t\t\t}\\n\" + ", "+\t\t\t\t\"\t\t\tpublic void run() {}\\n\" + ", "-\t\t\t\t\"\t\t\tpublic <T extends Exception> T bar(T t) { \\n\" + ", "-\t\t\t\t\"\t\t\t\treturn t; \\n\" + ", "-\t\t\t\t\"\t\t\t}\\n\" + ", "+\t\t\t\t\"\t\t\tpublic <T extends Exception> T bar(T t) { return t; }\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 15)\\n\" + ", "-\t\t\t\"\tpublic <T extends Exception> T bar(T t) { \\n\" + ", "-\t\t\t\"\t                             ^\\n\" + ", "-\t\t\t\"Type safety: The return type T of the method bar(T) of type new X<R>(){} needs unchecked conversion to conform to the return type T of inherited method\\n\" + "]}], "num": 24023}
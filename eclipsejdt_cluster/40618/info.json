{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc48702e49c328e3a97bd6db281266b6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "494eafcc004d56c301a9938a7bf8841a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t \tpublic void consumeWildCard(int kind, int rank)", "signatureAfterChange": " \t \tpublic void consumeWildCard(int kind)", "diff": ["-\tpublic void consumeWildCard(int kind, int rank) {", "-\t\tTypeBinding bound = ", "-\t\t\tkind != Wildcard.UNBOUND ? ", "-\t\t\t\t\t(TypeBinding) this.types.remove(this.types.size()-1) : ", "-\t\t\t\t\tnull;", "-\t\tTypeBinding wildCardBinding = this.environment.createWildcard((ReferenceBinding) this.typeBinding, rank, bound, null /*no extra bound*/, kind);", "-\t\tthis.types.add(wildCardBinding);", "+\tpublic void consumeWildCard(int kind) {", "+\t\tthis.wildcardKind = kind;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b42e1ab7f5927d70b2d3e5870d0f76a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKey.java", "commitBeforeChange": "9bf79c7ef87f9bb276696a699c24ee7886d82109", "commitAfterChange": "de2cee4ff7b76fb31a04f1c1b724977d8ef8d10e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit)", "signatureAfterChange": " \t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit)", "diff": ["-\t \t\t\tif (parsedUnit == null) ", "-\t \t\t\t\treturn getBinaryBinding();", "-\t \t\t\tTypeBinding binding = getTypeBinding(parsedUnit, parsedUnit.types, typeName);", "+\t \t\t\tTypeBinding binding = parsedUnit == null ? getBinaryBinding() : getTypeBinding(parsedUnit, parsedUnit.types, typeName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca4a9d7d2fad8010ce6c60329411f419", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java", "commitBeforeChange": "db0d99936b529038f502f3c42e4c67fa5380c5bc", "commitAfterChange": "5988789db77abec94d1b8a17fd42ed09f795c5be", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic void consumeNonParameterizedType()", "signatureAfterChange": " \t \tpublic void consumeRawType()", "diff": ["-\tpublic void consumeNonParameterizedType() {", "-\t\tif (this.typeBinding == null) return;", "-\t\tif (this.typeBinding.typeVariables().length > 0) {", "-\t\t\t// raw type", "-\t\t\tthis.typeBinding = this.environment.createRawType((ReferenceBinding) this.typeBinding, null/*no enclosing type*/);", "-\t\t}", "-\t}", "+\tpublic void consumeRawType() {", "+\t\tif (this.typeBinding == null) return;", "+\t\tthis.typeBinding = this.environment.createRawType((ReferenceBinding) this.typeBinding, null/*no enclosing type*/);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf994b8c6c88c2971677d68ccc92cfe6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java", "commitBeforeChange": "35fd76e356146458b564c231f44085c52b0d1c47", "commitAfterChange": "0bd04abb8575a021cf8905c773ca1d2199f31c53", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \t \tpublic void consumeType()", "signatureAfterChange": " \t \tpublic void consumeKey()", "diff": ["-\tpublic void consumeType() {", "-\t\tthis.typeBinding = getArrayBinding(this.dimension, this.typeBinding);", "-\t\tthis.compilerBinding = this.typeBinding;", "+\tpublic void consumeKey() {", "+\t\tif (this.typeBinding != null) {", "+\t\t\tthis.typeBinding = getArrayBinding(this.dimension, this.typeBinding);", "+\t\t\tthis.compilerBinding = this.typeBinding;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd090497f7423d05c48b7e643b96b5b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected TypeBinding getTypeNameBinding(CompilationUnitScope unitScope, int index)", "signatureAfterChange": " protected TypeBinding getTypeNameBinding(CompilationUnitScope unitScope, int index)", "diff": ["-\t\tif (typeBinding == null) {", "-\t\t\tthis.typeBindings[index] = new ProblemReferenceBinding(this.typeNames[index], ProblemReasons.NotFound);", "-\t\t} else {", "-\t\t\tthis.typeBindings[index] = typeBinding;", "-\t\t}", "-\t} else if (!typeBinding.isValidBinding()) {", "+\t\tthis.typeBindings[index] = typeBinding;", "+\t}", "+\tif (!typeBinding.isValidBinding()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f07cfe5979c1080f4506f44eca8e9bca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "commitAfterChange": "ed3a0c0705f2be20be3aaf856f81a3803e4ac341", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " protected TypeBinding getType(Object typeKey, char[] typeName)", "signatureAfterChange": " protected TypeBinding getType(Object typeKey, char[] typeName)", "diff": ["+\tif (typeBinding == null || !typeBinding.isValidBinding()) {", "+\t\ttypeBinding = this.lookupEnvironment.getType(compoundName);", "+\t}", "-\treturn typeBinding.isValidBinding() ? typeBinding : null;", "+\treturn typeBinding != null && typeBinding.isValidBinding() ? typeBinding : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f373d1e46108318f088b0f7327127d00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "aba5db418de65ea21899bfdf893833cd0fc3f586", "commitAfterChange": "7aba284c4ea53048ed9ad4ccc85fef0f7294903a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tpublic void setBinaryTypes(IBinaryType[] binaryTypes)", "signatureAfterChange": " \t \tpublic void setBinaryTypes(ReferenceBinding[] binaryTypes)", "diff": ["-\tpublic void setBinaryTypes(IBinaryType[] binaryTypes) {", "-\t\tfinal int length = binaryTypes.length;", "-\t\tBinaryTypeBinding[] temp = new BinaryTypeBinding[length];", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\ttemp[i] = this.lookupEnvironment.cacheBinaryType(binaryTypes[i], null);", "-\t\t}", "-\t\t// TODO should I reset the lookup environment ?", "-\t\tthis.binaryTypeBindings = temp;", "+\tpublic void setBinaryTypes(ReferenceBinding[] binaryTypes) {", "+\t\tthis.referenceBindings = binaryTypes;"]}], "num": 40618}
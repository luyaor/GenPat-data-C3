{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b0c411a51ff1e875168c63b87913604", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b5130424c9b4e378b18722071b8fac4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodDeclarationPattern.java", "commitBeforeChange": "8032392aee6168afb7d9361a5e7c32ded0b6567a", "commitAfterChange": "af7c555b94268663ad75bc44adea174c67a820bf", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public boolean matchesBinary(Object binaryInfo, Object enclosingBinaryInfo)", "signatureAfterChange": " public boolean matchesBinary(Object binaryInfo, Object enclosingBinaryInfo)", "diff": ["-\t", "-\t// selector", "-\tif (!this.matchesName(this.selector, method.getSelector()))", "-\t\treturn false;", "+\tif (!this.matchesName(this.selector, method.getSelector())) return false;", "-\tIBinaryType declaringType = (IBinaryType)enclosingBinaryInfo;", "-\tif (declaringType != null) {", "+\tif (enclosingBinaryInfo != null && (this.declaringSimpleName != null || this.declaringQualification != null)) {", "+\t\tIBinaryType declaringType = (IBinaryType)enclosingBinaryInfo;", "-\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringTypeName)) {", "+\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringTypeName))", "-\t\t}", "-\tString methodDescriptor = new String(method.getMethodDescriptor()).replace('/', '.');", "-", "-\t// look at return type only if declaring type is not specified", "-\tif (this.declaringSimpleName == null) {", "-\t\tString returnTypeSignature = Signature.toString(Signature.getReturnType(methodDescriptor));", "-\t\tif (!this.matchesType(this.returnSimpleName, this.returnQualification, returnTypeSignature.toCharArray())) {", "-\t\t\treturn false;", "-\t\t}", "-\t}", "-\t\t", "-\tif (parameterCount > -1) {", "-\t\tString[] arguments = Signature.getParameterTypes(methodDescriptor);", "-\t\tint argumentCount = arguments.length;", "-\t\tif (parameterCount != argumentCount)", "-\t\t\treturn false;", "-\t\tfor (int i = 0; i < parameterCount; i++) {", "-\t\t\tchar[] qualification = this.parameterQualifications[i];", "-\t\t\tchar[] type = this.parameterSimpleNames[i];", "-\t\t\tif (!this.matchesType(type, qualification, Signature.toString(arguments[i]).toCharArray()))", "+\tif (parameterCount > -1 || this.declaringSimpleName == null) {", "+\t\tString methodDescriptor = new String(method.getMethodDescriptor()).replace('/', '.');", "+", "+\t\tif (parameterCount > -1) {", "+\t\t\tString[] arguments = Signature.getParameterTypes(methodDescriptor);", "+\t\t\tint argumentCount = arguments.length;", "+\t\t\tif (parameterCount != argumentCount) return false;", "+\t\t\tfor (int i = 0; i < parameterCount; i++) {", "+\t\t\t\tchar[] qualification = this.parameterQualifications[i];", "+\t\t\t\tchar[] type = this.parameterSimpleNames[i];", "+\t\t\t\tif (!this.matchesType(type, qualification, Signature.toString(arguments[i]).toCharArray()))", "+\t\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}", "+", "+\t\t// look at return type only if declaring type is not specified", "+\t\tif (this.declaringSimpleName == null) {", "+\t\t\tString returnTypeSignature = Signature.toString(Signature.getReturnType(methodDescriptor));", "+\t\t\tif (!this.matchesType(this.returnSimpleName, this.returnQualification, returnTypeSignature.toCharArray())) {", "+\t\t\t}", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b53c69092aa44bb09c35f8fb188f325b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "ded90d967b480e6d7d22b3283d60f4ed44ccc489", "commitAfterChange": "18c83b91d182e52feafdad6b2c46eb79ffb0e002", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t\tprotected void logPerfResult(PrintStream[] logStreams, int count)", "signatureAfterChange": " \tprotected void logPerfResult(PrintStream[] logStreams, int count)", "diff": ["-\t\t */", "-\t\tprotected void logPerfResult(PrintStream[] logStreams, int count) {", "+\t */", "+\tprotected void logPerfResult(PrintStream[] logStreams, int count) {", "-\t\t\t// Perfs comment buffers", "-\t\t\tString[] comments = new String[2];", "+\t\t// Perfs comment buffers", "+\t\tString[] comments = new String[2];", "-\t\t\t// Log perf result", "-\t\t\tboolean haveTimes  = JdtCorePerformanceMeter.CPU_TIMES != null && JdtCorePerformanceMeter.ELAPSED_TIMES != null;", "-\t\t\tif (haveTimes) {", "-\t\t\t\tNumberFormat pFormat = NumberFormat.getPercentInstance();", "-\t\t\t\tpFormat.setMaximumFractionDigits(1);", "-\t\t\t\tNumberFormat dFormat = NumberFormat.getNumberInstance();", "-\t\t\t\tdFormat.setMaximumFractionDigits(2);", "-\t\t\t\ttry {", "-\t\t\t\t\t// Store CPU Time", "-\t\t\t\t\tJdtCorePerformanceMeter.Statistics cpuStats = (JdtCorePerformanceMeter.Statistics) JdtCorePerformanceMeter.CPU_TIMES.get(this.scenarioReadableName);", "-\t\t\t\t\tif (cpuStats != null) {", "-\t\t\t\t\t\tdouble percent = cpuStats.stddev/cpuStats.average;", "-\t\t\t\t\t\tif (percent > STDDEV_THRESHOLD) {", "-\t\t\t\t\t\t\tif (logStreams[0] != null) logStreams[0].print(\"'\");", "-\t\t\t\t\t\t\tSystem.out.println(\"\tWARNING: CPU time standard deviation is over 2%: \"+dFormat.format(cpuStats.stddev)+\"/\"+cpuStats.average+\"=\"+ pFormat.format(percent));", "-\t\t\t\t\t\t\tcomments[0] = \"stddev=\" + pFormat.format(percent);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (logStreams[0] != null) {", "-\t\t\t\t\t\t\tlogStreams[0].print(\"\"+cpuStats.average+\"\\t\");", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tThread.sleep(1000);", "-\t\t\t\t\t\tSystem.err.println(this.scenarioShortName+\": we should have stored CPU time!\");", "-\t\t\t\t\t\tThread.sleep(1000);", "+\t\t// Log perf result", "+\t\tboolean haveTimes  = JdtCorePerformanceMeter.CPU_TIMES != null && JdtCorePerformanceMeter.ELAPSED_TIMES != null;", "+\t\tif (haveTimes) {", "+\t\t\tNumberFormat pFormat = NumberFormat.getPercentInstance();", "+\t\t\tpFormat.setMaximumFractionDigits(1);", "+\t\t\tNumberFormat dFormat = NumberFormat.getNumberInstance();", "+\t\t\tdFormat.setMaximumFractionDigits(2);", "+\t\t\ttry {", "+\t\t\t\t// Store CPU Time", "+\t\t\t\tJdtCorePerformanceMeter.Statistics cpuStats = (JdtCorePerformanceMeter.Statistics) JdtCorePerformanceMeter.CPU_TIMES.get(this.scenarioReadableName);", "+\t\t\t\tif (cpuStats != null) {", "+\t\t\t\t\tdouble percent = cpuStats.stddev/cpuStats.average;", "+\t\t\t\t\tif (percent > STDDEV_THRESHOLD) {", "+\t\t\t\t\t\tif (logStreams[0] != null) logStreams[0].print(\"'\");", "+\t\t\t\t\t\tSystem.out.println(\"\tWARNING: CPU time standard deviation is over 2%: \"+dFormat.format(cpuStats.stddev)+\"/\"+cpuStats.average+\"=\"+ pFormat.format(percent));", "+\t\t\t\t\t\tcomments[0] = \"stddev=\" + pFormat.format(percent);", "-\t\t\t\t\t// Store Elapsed time", "-\t\t\t\t\tJdtCorePerformanceMeter.Statistics elapsedStats = (JdtCorePerformanceMeter.Statistics) JdtCorePerformanceMeter.ELAPSED_TIMES.get(this.scenarioReadableName);", "-\t\t\t\t\tif (elapsedStats != null) {", "-\t\t\t\t\t\tdouble percent = elapsedStats.stddev/elapsedStats.average;", "-\t\t\t\t\t\tif (percent > STDDEV_THRESHOLD) {", "-\t\t\t\t\t\t\tif (logStreams[1] != null) logStreams[1].print(\"'\");", "-\t\t\t\t\t\t\tSystem.out.println(\"\tWARNING: Elapsed time standard deviation is over 2%: \"+dFormat.format(elapsedStats.stddev)+\"/\"+elapsedStats.average+\"=\"+ pFormat.format(percent));", "-\t\t\t\t\t\t\tcomments[1] = \"stddev=\" + pFormat.format(percent);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (logStreams[1] != null) {", "-\t\t\t\t\t\t\tlogStreams[1].print(\"\"+elapsedStats.average+\"\\t\");", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tThread.sleep(1000);", "-\t\t\t\t\t\tSystem.err.println(this.scenarioShortName+\": we should have stored Elapsed time\");", "-\t\t\t\t\t\tThread.sleep(1000);", "+\t\t\t\t\tif (logStreams[0] != null) {", "+\t\t\t\t\t\tlogStreams[0].print(\"\"+cpuStats.sum+\"\\t\");", "-\t\t\t\t} catch (InterruptedException e) {", "-\t\t\t\t\t// do nothing", "+\t\t\t\t} else {", "+\t\t\t\t\tThread.sleep(1000);", "+\t\t\t\t\tSystem.err.println(this.scenarioShortName+\": we should have stored CPU time!\");", "+\t\t\t\t\tThread.sleep(1000);", "-\t\t\t}", "-", "-\t\t\t// Update comment buffers", "-\t\t\tStringBuffer[] scenarioComments = (StringBuffer[]) SCENARII_COMMENT.get(getClass());", "-\t\t\tif (scenarioComments == null) {", "-\t\t\t\tscenarioComments = new StringBuffer[LOG_TYPES.length];", "-\t\t\t\tSCENARII_COMMENT.put(getClass(), scenarioComments);", "-\t\t\t}", "-\t\t\tfor (int i=0, ln=LOG_TYPES.length; i<ln; i++) {", "-\t\t\t\tif (comments[i] != null) {", "-\t\t\t\t\tif (scenarioComments[i] == null) {", "-\t\t\t\t\t\tscenarioComments[i] = new StringBuffer();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tscenarioComments[i].append(' ');", "+\t\t\t\t// Store Elapsed time", "+\t\t\t\tJdtCorePerformanceMeter.Statistics elapsedStats = (JdtCorePerformanceMeter.Statistics) JdtCorePerformanceMeter.ELAPSED_TIMES.get(this.scenarioReadableName);", "+\t\t\t\tif (elapsedStats != null) {", "+\t\t\t\t\tdouble percent = elapsedStats.stddev/elapsedStats.average;", "+\t\t\t\t\tif (percent > STDDEV_THRESHOLD) {", "+\t\t\t\t\t\tif (logStreams[1] != null) logStreams[1].print(\"'\");", "+\t\t\t\t\t\tSystem.out.println(\"\tWARNING: Elapsed time standard deviation is over 2%: \"+dFormat.format(elapsedStats.stddev)+\"/\"+elapsedStats.average+\"=\"+ pFormat.format(percent));", "+\t\t\t\t\t\tcomments[1] = \"stddev=\" + pFormat.format(percent);", "-\t\t\t\t\tif (this.scenarioComment == null) {", "-\t\t\t\t\t\tscenarioComments[i].append(\"[\"+TEST_POSITION+\"]\");", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tscenarioComments[i].append(this.scenarioComment);", "+\t\t\t\t\tif (logStreams[1] != null) {", "+\t\t\t\t\t\tlogStreams[1].print(\"\"+elapsedStats.sum+\"\\t\");", "-\t\t\t\t\tscenarioComments[i].append(' ');", "-\t\t\t\t\tscenarioComments[i].append(comments[i]);", "-\t\t\t\t}\t", "-\t\t\t}", "-", "-\t\t\t// Close log", "-\t\t\tif (count == 0) {", "-\t\t\t\tfor (int i=0, ln=logStreams.length; i<ln; i++) {", "-\t\t\t\t\tif (logStreams[i] != null) {", "-\t\t\t\t\t\tif (haveTimes) {", "-\t\t\t\t\t\t\tif (comments[i] != null) {", "-\t\t\t\t\t\t\t\tlogStreams[i].print(scenarioComments[i].toString());", "-\t\t\t\t\t\t\t}\t", "-\t\t\t\t\t\t\tlogStreams[i].println();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tlogStreams[i].close();", "-\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tThread.sleep(1000);", "+\t\t\t\t\tSystem.err.println(this.scenarioShortName+\": we should have stored Elapsed time\");", "+\t\t\t\t\tThread.sleep(1000);", "-\t\t\t\tTEST_POSITION = 0;", "+\t\t\t} catch (InterruptedException e) {", "+\t\t\t\t// do nothing", "+", "+\t\t// Update comment buffers", "+\t\tStringBuffer[] scenarioComments = (StringBuffer[]) SCENARII_COMMENT.get(getClass());", "+\t\tif (scenarioComments == null) {", "+\t\t\tscenarioComments = new StringBuffer[LOG_TYPES.length];", "+\t\t\tSCENARII_COMMENT.put(getClass(), scenarioComments);", "+\t\t}", "+\t\tfor (int i=0, ln=LOG_TYPES.length; i<ln; i++) {", "+\t\t\tif (this.scenarioComment != null || comments[i] != null) {", "+\t\t\t\tif (scenarioComments[i] == null) {", "+\t\t\t\t\tscenarioComments[i] = new StringBuffer();", "+\t\t\t\t} else {", "+\t\t\t\t\tscenarioComments[i].append(' ');", "+\t\t\t\t}", "+\t\t\t\tif (this.scenarioComment == null) {", "+\t\t\t\t\tscenarioComments[i].append(\"[\"+TEST_POSITION+\"]\");", "+\t\t\t\t} else {", "+\t\t\t\t\tscenarioComments[i].append(this.scenarioComment);", "+\t\t\t\t}", "+\t\t\t\tif (comments[i] != null) {", "+\t\t\t\t\tif (this.scenarioComment != null) scenarioComments[i].append(',');", "+\t\t\t\t\tscenarioComments[i].append(comments[i]);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+", "+\t\t// Close log", "+\t\tif (count == 0) {", "+\t\t\tfor (int i=0, ln=logStreams.length; i<ln; i++) {", "+\t\t\t\tif (logStreams[i] != null) {", "+\t\t\t\t\tif (haveTimes) {", "+\t\t\t\t\t\tif (scenarioComments[i] != null) {", "+\t\t\t\t\t\t\tlogStreams[i].print(scenarioComments[i].toString());", "+\t\t\t\t\t\t}\t", "+\t\t\t\t\t\tlogStreams[i].println();", "+\t\t\t\t\t}", "+\t\t\t\t\tlogStreams[i].close();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tTEST_POSITION = 0;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa1b339b27fb92868faff0502c721d9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "7336215b569e42bf0d7946c272b0da8ff71d12fb", "commitAfterChange": "e29082e6108e43f171cfe9fae0a56914a1f2ec3e", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " private boolean checkKeyword()", "signatureAfterChange": " private boolean checkKeyword()", "diff": ["+\t\t\t\t&& (!this.compilationUnit.isPackageInfo() || this.compilationUnit.currentPackage != null)", "-\t\t\tif((this.lastModifiers & ClassFileConstants.AccPublic) == 0) {", "-\t\t\t\tboolean hasNoPublicType = true;", "-\t\t\t\tfor (int i = 0; i < unit.typeCount; i++) {", "-\t\t\t\t\tif((unit.types[i].typeDeclaration.modifiers & ClassFileConstants.AccPublic) != 0) {", "-\t\t\t\t\t\thasNoPublicType = false;", "+\t\t\tif (!this.compilationUnit.isPackageInfo()) {", "+\t\t\t\tif((this.lastModifiers & ClassFileConstants.AccPublic) == 0) {", "+\t\t\t\t\tboolean hasNoPublicType = true;", "+\t\t\t\t\tfor (int i = 0; i < unit.typeCount; i++) {", "+\t\t\t\t\t\tif((unit.types[i].typeDeclaration.modifiers & ClassFileConstants.AccPublic) != 0) {", "+\t\t\t\t\t\t\thasNoPublicType = false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif(hasNoPublicType) {", "+\t\t\t\t\t\tkeywords[count++] = Keywords.PUBLIC;", "-\t\t\t\tif(hasNoPublicType) {", "-\t\t\t\t\tkeywords[count++] = Keywords.PUBLIC;", "+\t\t\t\tif((this.lastModifiers & ClassFileConstants.AccAbstract) == 0", "+\t\t\t\t\t&& (this.lastModifiers & ClassFileConstants.AccFinal) == 0) {", "+\t\t\t\t\tkeywords[count++] = Keywords.ABSTRACT;", "-\t\t\t}", "-\t\t\tif((this.lastModifiers & ClassFileConstants.AccAbstract) == 0", "-\t\t\t\t&& (this.lastModifiers & ClassFileConstants.AccFinal) == 0) {", "-\t\t\t\tkeywords[count++] = Keywords.ABSTRACT;", "-\t\t\t}", "-\t\t\tif((this.lastModifiers & ClassFileConstants.AccAbstract) == 0", "-\t\t\t\t&& (this.lastModifiers & ClassFileConstants.AccFinal) == 0) {", "-\t\t\t\tkeywords[count++] = Keywords.FINAL;", "-\t\t\t}", "-", "-\t\t\tkeywords[count++] = Keywords.CLASS;", "-\t\t\tif (this.options.complianceLevel >= ClassFileConstants.JDK1_5) {", "-\t\t\t\tkeywords[count++] = Keywords.ENUM;", "-\t\t\t}", "-", "-\t\t\tif((this.lastModifiers & ClassFileConstants.AccFinal) == 0) {", "-\t\t\t\tkeywords[count++] = Keywords.INTERFACE;", "+\t\t\t\tif((this.lastModifiers & ClassFileConstants.AccAbstract) == 0", "+\t\t\t\t\t&& (this.lastModifiers & ClassFileConstants.AccFinal) == 0) {", "+\t\t\t\t\tkeywords[count++] = Keywords.FINAL;", "+\t\t\t\t}", "+\t", "+\t\t\t\tkeywords[count++] = Keywords.CLASS;", "+\t\t\t\tif (this.options.complianceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\t\t\tkeywords[count++] = Keywords.ENUM;", "+\t\t\t\t}", "+\t", "+\t\t\t\tif((this.lastModifiers & ClassFileConstants.AccFinal) == 0) {", "+\t\t\t\t\tkeywords[count++] = Keywords.INTERFACE;", "+\t\t\t\t}"]}], "num": 2226}
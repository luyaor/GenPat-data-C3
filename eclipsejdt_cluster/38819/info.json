{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32323eac0823970164a6a83e4f818d35", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d35a0ccc44b854a6d1f20274354ada2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "9ef16bbd886b16521464fbe002994d5fbaed976f", "commitAfterChange": "b27f301e84866741a3cab27f0e35cc886c5fd2e8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      \tprivate void loadFactories( List<AnnotationProcessorFactory> factories, List<FactoryContainer> containers )", "signatureAfterChange": "      \tprivate static List<AnnotationProcessorFactory> loadFactories( List<? extends FactoryContainer> containers )", "diff": ["-\tprivate void loadFactories( List<AnnotationProcessorFactory> factories, List<FactoryContainer> containers )", "+\tprivate static List<AnnotationProcessorFactory> loadFactories( List<? extends FactoryContainer> containers )", "-\t\tClassLoader classLoader = createClassLoader( containers );", "+\t\tList<AnnotationProcessorFactory> factories = new ArrayList(containers.size());", "+\t\tClassLoader classLoader = _createClassLoader( containers );", "+\t\treturn factories;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5866137cd798bd83874f2bb1ce6d603a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "5fbb7a295fe51a8ea6177a5aeab11cf819ed3177", "commitAfterChange": "cb36eca9d9b9093df77fd23643572b1315c79e4d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite, boolean uncheckedBoundCheck)", "signatureAfterChange": " \tpublic static boolean checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["-\tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite, boolean uncheckedBoundCheck) {", "+\tpublic static boolean checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite) {", "+\t\tboolean uncheckedBoundCheck = (method.tagBits & TagBits.HasUncheckedTypeArgumentForBoundCheck) != 0;", "-\t\t\tinvocationSite.setUnchecked(true);", "-\t\t    scope.problemReporter().unsafeRawGenericMethodInvocation((ASTNode)invocationSite, method, argumentTypes);", "+\t\t\tscope.problemReporter().unsafeRawGenericMethodInvocation((ASTNode)invocationSite, method, argumentTypes);", "+\t\t\treturn true;", "+\t\treturn false;"]}], "num": 38819}
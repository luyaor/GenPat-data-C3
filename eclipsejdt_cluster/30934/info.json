{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f1efbd056bd73af52df4b9337584453", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "022e10eee766e2580343e2d0a1f60c98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SynchronizedStatement.java", "commitBeforeChange": "bb035342af3e77c43a12431c380fb2a6fe6ec67e", "commitAfterChange": "d9aabee2fc6180b2ed4f4131332dc5a46cc37a0d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["+\t\tthis.resetAnyExceptionHandlers(); // could reenter if redoing codegen in wide-mode", "-\t\t\tExceptionLabel anyExceptionHandler = new ExceptionLabel(codeStream, null);", "-\t\t\t//'null' denotes any kind of exception", "+\t\t\tthis.enterAnyExceptionHandler(codeStream);", "-\t\t\tanyExceptionHandler.placeEnd();", "-\t\t\tanyExceptionHandler.place();", "+\t\t\tthis.exitAnyExceptionHandler();", "+\t\t\tthis.placeAllAnyExceptionHandlers();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ac97b2477196d23642394348109b368", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "6e72651dcdb7889db1f539504aa6882d0755cb06", "commitAfterChange": "3cd6c6019199ef77159b2d8f74a256f0294dd83c", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tpublic boolean hasClasspathCycle(IClasspathEntry[] entries)", "signatureAfterChange": " \tpublic boolean hasClasspathCycle(IClasspathEntry[] preferredClasspath)", "diff": ["-\tpublic boolean hasClasspathCycle(IClasspathEntry[] entries) {", "-\t\t", "-\t\tHashSet cycleParticipants = new HashSet();", "-\t\tupdateCycleParticipants(entries, new ArrayList(), cycleParticipants, getWorkspace().getRoot());", "-\t\treturn !cycleParticipants.isEmpty();", "+\tpublic boolean hasClasspathCycle(IClasspathEntry[] preferredClasspath) {", "+\t\tHashSet visited = new HashSet();", "+\t\tvisited.add(getElementName());", "+\t\treturn hasClasspathCycle(preferredClasspath, visited, ResourcesPlugin.getWorkspace().getRoot());", "+\t}"]}], "num": 30934}
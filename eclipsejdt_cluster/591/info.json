{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70521ecb6991a14b9b55ffe2cc94b2d9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e8c38066954a060e4311e9bff89ca81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\tif (binding.isPrivate()){", "+", "+\t// if method from parameterized type got found, use the original method at codegen time", "+\tthis.codegenBinding = this.binding.original();", "+\tif (this.codegenBinding != this.binding) {", "+\t    // extra cast needed if method return type has type variable", "+\t    if ((this.codegenBinding.returnType.tagBits & TagBits.HasTypeVariable) != 0) {", "+\t        this.genericCast = this.codegenBinding.returnType.genericCast(this.binding.returnType);", "+\t    }", "+\t} ", "+\tif (this.binding.isPrivate()){", "-\t\t\tsyntheticAccessor = ((SourceTypeBinding)binding.declaringClass).addSyntheticMethod(binding, isSuperAccess());", "-\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(binding, this);", "+\t\t\tsyntheticAccessor = ((SourceTypeBinding)binding.declaringClass).addSyntheticMethod(this.codegenBinding, isSuperAccess());", "+\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);", "-\t\tsyntheticAccessor = destinationType.addSyntheticMethod(binding, isSuperAccess());", "-\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(binding, this);", "+\t\tsyntheticAccessor = destinationType.addSyntheticMethod(this.codegenBinding, isSuperAccess());", "+\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);", "-\t\t\t\t&& binding.declaringClass.getPackage() ", "+\t\t\t\t&& this.codegenBinding.declaringClass.getPackage() ", "-\t\t\tsyntheticAccessor = currentCompatibleType.addSyntheticMethod(binding, isSuperAccess());", "-\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(binding, this);", "+\t\t\tsyntheticAccessor = currentCompatibleType.addSyntheticMethod(this.codegenBinding, isSuperAccess());", "+\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);", "+\t", "-\tif (binding.declaringClass != this.qualifyingType", "+\tif (this.binding.declaringClass != this.qualifyingType", "-\t\t\t\t&& (!receiver.isImplicitThis() || !binding.isStatic())", "-\t\t\t\t&& binding.declaringClass.id != T_Object) // no change for Object methods", "-\t\t\t|| !binding.declaringClass.canBeSeenBy(currentScope))) {", "+\t\t\t\t&& (!receiver.isImplicitThis() || !this.codegenBinding.isStatic())", "+\t\t\t\t&& this.binding.declaringClass.id != T_Object) // no change for Object methods", "+\t\t\t|| !this.binding.declaringClass.canBeSeenBy(currentScope))) {", "-\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedMethodBinding(binding, (ReferenceBinding) this.qualifyingType);", "+\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedMethodBinding(", "+\t\t        \t\t\t\t\t\t\t\t\t\tthis.codegenBinding, (ReferenceBinding) this.qualifyingType.erasure());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9ac490937ab8540cd6d564e87e92606", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "1209010fd2d01b73be2d5ddcc68dee954a4dfb12", "commitAfterChange": "e2d64401ee163038583789c4f8e64653502b280a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": "\r public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-\tif (binding.canBeSeenBy(receiverType, this, currentScope)) {\r", "-\t\treceiver.generateCode(currentScope, codeStream, !(isStatic = binding.isStatic()));\r", "+\tif (this.codegenBinding.canBeSeenBy(receiverType, this, currentScope)) {\r", "+\t\treceiver.generateCode(currentScope, codeStream, !(isStatic = this.codegenBinding.isStatic()));\r", "-\t\t\tcodeStream.getstatic(binding);\r", "+\t\t\tcodeStream.getstatic(this.codegenBinding);\r", "-\t\t\tcodeStream.getfield(binding);\r", "+\t\t\tcodeStream.getfield(this.codegenBinding);\r", "-\t\t\t\tif ((binding.type == LongBinding) || (binding.type == DoubleBinding)) {\r", "+\t\t\t\tif ((this.codegenBinding.type == LongBinding) || (this.codegenBinding.type == DoubleBinding)) {\r", "-\t\t\t\tif ((binding.type == LongBinding) || (binding.type == DoubleBinding)) {\r", "+\t\t\t\tif ((this.codegenBinding.type == LongBinding) || (this.codegenBinding.type == DoubleBinding)) {\r", "-\t\tcodeStream.sendOperator(postIncrement.operator, binding.type.id);\r", "+\t\tcodeStream.sendOperator(postIncrement.operator, this.codegenBinding.type.id);\r", "-\t\tfieldStore(codeStream, binding, null, false);\r", "+\t\tfieldStore(codeStream, this.codegenBinding, null, false);\r", "-\t\treceiver.generateCode(currentScope, codeStream, !(isStatic = binding.isStatic()));\r", "-\t\tif (binding.isStatic()) {\r", "+\t\treceiver.generateCode(currentScope, codeStream, !(isStatic = this.codegenBinding.isStatic()));\r", "+\t\tif (this.codegenBinding.isStatic()) {\r", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(binding);\r", "+\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(this.codegenBinding);\r", "-\t\t\tif ((binding.type == LongBinding) || (binding.type == DoubleBinding)) {\r", "+\t\t\tif ((this.codegenBinding.type == LongBinding) || (this.codegenBinding.type == DoubleBinding)) {\r", "-\t\tif ((binding.type == LongBinding) || (binding.type == DoubleBinding)) {\r", "+\t\tif ((this.codegenBinding.type == LongBinding) || (this.codegenBinding.type == DoubleBinding)) {\r", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForField(binding);\r", "+\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForField(this.codegenBinding);\r", "-\t\tif ((binding.type == LongBinding) || (binding.type == DoubleBinding)) {\r", "+\t\tif ((this.codegenBinding.type == LongBinding) || (this.codegenBinding.type == DoubleBinding)) {\r", "-\t\tcodeStream.sendOperator(postIncrement.operator, binding.type.id);\r", "+\t\tcodeStream.sendOperator(postIncrement.operator, this.codegenBinding.type.id);\r", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedWriteAccessForField(binding);\r", "+\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedWriteAccessForField(this.codegenBinding);\r"]}], "num": 591}
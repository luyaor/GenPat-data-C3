{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a89083089ad4b794d80879e4f36a7fa0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23e4fd97cd03ce2aa0005f3e951e59d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "888ff915accf0f7dc08ba845bca467c94f1e290b", "commitAfterChange": "f69c200469412ca3b93e80844c6c1f4e077169ac", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 6, "signatureBeforeChange": "  protected boolean generateInfos(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["+}", "+protected boolean buildStructure(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException {", "+\t// check if this compilation unit can be opened", "+\tif (!(info instanceof WorkingCopyElementInfo)) { // no check is done on root kind or exclusion pattern for working copies", "+\t\tif (((IPackageFragment)getParent()).getKind() == IPackageFragmentRoot.K_BINARY", "+\t\t\t\t|| !isValidCompilationUnit()", "+\t\t\t\t|| !underlyingResource.isAccessible()) {", "+\t\t\tthrow newNotPresentException();", "+\t\t}", "+\t}", "+\tif (this.owner == DESTROYED_WC_OWNER) {", "+\t\tthrow newNotPresentException();", "+\t}", "+", "+\tCompilationUnitElementInfo unitInfo = (CompilationUnitElementInfo) info;", "+", "+\t// get buffer contents", "+\tIBuffer buffer = getBufferManager().getBuffer(CompilationUnit.this);", "+\tif (buffer == null) {", "+\t\tbuffer = openBuffer(pm, unitInfo); // open buffer independently from the info, since we are building the info", "+\t}", "+\tfinal char[] contents = buffer == null ? null : buffer.getCharacters();", "+", "+\t// generate structure and compute syntax problems if needed", "+\tCompilationUnitStructureRequestor requestor = new CompilationUnitStructureRequestor(this, unitInfo, newElements);", "+\tboolean computeProblems = computeProblems(info);", "+\tIProblemFactory factory = ", "+\t\tcomputeProblems ", "+\t\t\t?  CompilationUnitProblemFinder.getProblemFactory(getElementName().toCharArray(), (WorkingCopyElementInfo)unitInfo, pm) ", "+\t\t\t:  \tnew DefaultProblemFactory();", "+\tSourceElementParser parser = new SourceElementParser(requestor, factory, new CompilerOptions(getJavaProject().getOptions(true)));", "+\trequestor.parser = parser;", "+\tif (computeProblems) {", "+\t\t((WorkingCopyElementInfo)unitInfo).problems = new ArrayList();", "+\t}", "+\tCompilationUnitDeclaration unit = parser.parseCompilationUnit(new org.eclipse.jdt.internal.compiler.env.ICompilationUnit() {", "+\t\t\tpublic char[] getContents() {", "+\t\t\t\treturn contents;", "+\t\t\t}", "+\t\t\tpublic char[] getMainTypeName() {", "+\t\t\t\treturn CompilationUnit.this.getMainTypeName();", "+\t\t\t}", "+\t\t\tpublic char[][] getPackageName() {", "+\t\t\t\treturn CompilationUnit.this.getPackageName();", "+\t\t\t}", "+\t\t\tpublic char[] getFileName() {", "+\t\t\t\treturn CompilationUnit.this.getFileName();", "+\t\t\t}", "+\t\t}, computeProblems /*full parse if compute problems*/);", "+\t", "+\t// update timestamp (might be IResource.NULL_STAMP if original does not exist)", "+\tif (underlyingResource == null) {", "+\t\tCompilationUnit original = new CompilationUnit((IPackageFragment)getParent(), getElementName(), DefaultCompilationUnitOwner.PRIMARY);", "+\t\tunderlyingResource = original.getResource();", "+\t}", "+\tunitInfo.fTimestamp = ((IFile)underlyingResource).getModificationStamp();", "+\t", "+\t// compute other problems if needed", "+\tif (computeProblems){", "+\t\tCompilationUnitProblemFinder.process(unit, this, (WorkingCopyElementInfo)unitInfo, pm); ", "+\t", "+\t\t// TODO: can now report problems as they are computed", "+\t\treportProblemsIfNeeded((WorkingCopyElementInfo)info);", "+\t}\t\t", "+\t", "+\treturn unitInfo.isStructureKnown();", "+}", "-", "-protected boolean generateInfos(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException {", "-", "-\tif (getParent() instanceof JarPackageFragment) {", "-\t\t// ignore .java files in jar", "-\t\tthrow newNotPresentException();", "-\t} else {", "-\t\tCompilationUnitElementInfo unitInfo = (CompilationUnitElementInfo) info;", "-", "-\t\t// get buffer contents", "-\t\tIBuffer buffer = getBufferManager().getBuffer(CompilationUnit.this);", "-\t\tif (buffer == null) {", "-\t\t\tbuffer = openBuffer(pm); // open buffer independently from the info, since we are building the info", "-\t\t}", "-\t\tfinal char[] contents = buffer == null ? null : buffer.getCharacters();", "-", "-\t\t// generate structure", "-\t\tCompilationUnitStructureRequestor requestor = new CompilationUnitStructureRequestor(this, unitInfo, newElements);", "-\t\tIProblemFactory factory = new DefaultProblemFactory();", "-\t\tSourceElementParser parser = new SourceElementParser(requestor, factory, new CompilerOptions(getJavaProject().getOptions(true)));", "-\t\trequestor.parser = parser;", "-\t\t", "-\t\tparser.parseCompilationUnit(new org.eclipse.jdt.internal.compiler.env.ICompilationUnit() {", "-\t\t\t\tpublic char[] getContents() {", "-\t\t\t\t\treturn contents;", "-\t\t\t\t}", "-\t\t\t\tpublic char[] getMainTypeName() {", "-\t\t\t\t\treturn CompilationUnit.this.getMainTypeName();", "-\t\t\t\t}", "-\t\t\t\tpublic char[][] getPackageName() {", "-\t\t\t\t\treturn CompilationUnit.this.getPackageName();", "-\t\t\t\t}", "-\t\t\t\tpublic char[] getFileName() {", "-\t\t\t\t\treturn CompilationUnit.this.getFileName();", "-\t\t\t\t}", "-\t\t\t}, false/*diet parse*/);", "-\t\treturn unitInfo.isStructureKnown();", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac78b190ec08bc9ee518947a4511c36f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tprotected boolean generateInfos(\r \t\tOpenableElementInfo info,\r \t\tIProgressMonitor pm,\r \t\tHashtable newElements,\r \t\tIResource underlyingResource)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r protected boolean generateInfos(OpenableElementInfo info, IProgressMonitor pm, Hashtable newElements, IResource underlyingResource) throws JavaModelException", "diff": ["-\t */\r", "-\tprotected boolean generateInfos(\r", "-\t\tOpenableElementInfo info,\r", "-\t\tIProgressMonitor pm,\r", "-\t\tHashtable newElements,\r", "-\t\tIResource underlyingResource)\r", "-\t\tthrows JavaModelException {\r", "-\r", "-\t\tif (getParent() instanceof JarPackageFragment) {\r", "-\t\t\t// ignore .java files in jar\r", "-\t\t\tthrow newNotPresentException();\r", "-\t\t\t// put the info now, because getting the contents requires it\r", "-\t\t\tfgJavaModelManager.putInfo(this, info);\r", "-\t\t\tCompilationUnitElementInfo unitInfo = (CompilationUnitElementInfo) info;\r", "-\r", "-\t\t\t// generate structure\r", "-\t\t\tCompilationUnitStructureRequestor requestor =\r", "-\t\t\t\tnew CompilationUnitStructureRequestor(this, unitInfo, newElements);\r", "-\t\t\tIProblemFactory factory = new ProblemFactory();\r", "-\t\t\tSourceElementParser parser = new SourceElementParser(requestor, factory);\r", "-\t\t\tparser.parseCompilationUnit(this, !isWorkingCopy());\r", "-\t\t\tif (isWorkingCopy()) {\r", "-\t\t\t\t// remember problems\r", "-\t\t\t\tVector problems = requestor.fProblems;\r", "-\t\t\t\tif (problems != null) {\r", "-\t\t\t\t\tproblems.copyInto(\r", "-\t\t\t\t\t\t((WorkingCopyElementInfo) unitInfo).problems = new IProblem[problems.size()]);\r", "-\t\t\t\t}\r", "-\r", "-\t\t\t\tCompilationUnit original = (CompilationUnit) getOriginalElement();\r", "-\t\t\t\tunitInfo.fTimestamp =\r", "-\t\t\t\t\t((IFile) original.getUnderlyingResource()).getModificationStamp();\r", "-\t\t\t\tif (unitInfo.fTimestamp == IResource.NULL_STAMP) {\r", "-\t\t\t\t\tthrow new JavaModelException(\r", "-\t\t\t\t\t\tnew JavaModelStatus(IJavaModelStatusConstants.INVALID_RESOURCE));\r", "-\t\t\treturn unitInfo.isStructureKnown();\r", "+ */\r", "+protected boolean generateInfos(OpenableElementInfo info, IProgressMonitor pm, Hashtable newElements, IResource underlyingResource) throws JavaModelException {\r", "+\tif (getParent() instanceof JarPackageFragment) {\r", "+\t\t// ignore .java files in jar\r", "+\t\tthrow newNotPresentException();\r", "+\t} else {\r", "+\t\t// put the info now, because getting the contents requires it\r", "+\t\tfgJavaModelManager.putInfo(this, info);\r", "+\t\tCompilationUnitElementInfo unitInfo = (CompilationUnitElementInfo) info;\r", "+\r", "+\t\t// generate structure\r", "+\t\tCompilationUnitStructureRequestor requestor = new CompilationUnitStructureRequestor(this, unitInfo, newElements);\r", "+\t\tIProblemFactory factory = new DefaultProblemFactory();\r", "+\t\tSourceElementParser parser = new SourceElementParser(requestor, factory);\r", "+\t\tparser.parseCompilationUnit(this, !isWorkingCopy());\r", "+\t\tif (isWorkingCopy()) {\r", "+\t\t\t// remember problems\r", "+\t\t\tVector problems = requestor.fProblems;\r", "+\t\t\tif (problems != null) {\r", "+\t\t\t\tproblems.copyInto(((WorkingCopyElementInfo)unitInfo).problems = new IProblem[problems.size()]);\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\tCompilationUnit original = (CompilationUnit) getOriginalElement();\r", "+\t\t\tunitInfo.fTimestamp = ((IFile) original.getUnderlyingResource()).getModificationStamp();\r", "+\t\t\tif(unitInfo.fTimestamp == IResource.NULL_STAMP){\r", "+\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_RESOURCE));\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\treturn unitInfo.isStructureKnown();\r", "+\t}\r", "+}\r"]}], "num": 26978}
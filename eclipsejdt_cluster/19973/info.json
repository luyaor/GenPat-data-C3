{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "90d27bf8552e237154f8323641cd1c82", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cf8177f9bd7ad101e3d3768b4b39cb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "765aefb641ece984e8e3a8e814e66c7ff75e2a4d", "commitAfterChange": "87bc3aca5276736813fdee6191f13f0834fba9c7", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " protected void storeProblemsFor(SourceFile sourceFile, CategorizedProblem[] problems) throws CoreException", "signatureAfterChange": " protected void storeProblemsFor(SourceFile sourceFile, CategorizedProblem[] problems) throws CoreException", "diff": ["+\t\tboolean managedProblem = false;", "-\t\t\t\t|| managedMarkerTypes.contains(markerType)) {\t\t\t", "+\t\t\t\t|| (managedProblem = managedMarkerTypes.contains(markerType))) {\t\t\t", "-\t\t\t\t\tnew Integer(problem.getCategoryID()), // category ID", "+\t\t\t\t\tnew Integer(problem.getCategoryID()) // category ID", "+\t\t\t// GENERATED_BY attribute for JDT problems", "+\t\t\tif (!managedProblem) {", "+\t\t\t\tmarker.setAttribute(IMarker.GENERATED_BY, JavaBuilder.GENERATED_BY);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "917fa29fe4abd92eecc03a2015dbeca4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "b15d555969226382f7ca55d85fc45725a266fc8b", "commitAfterChange": "ea2c66d41813ffe0a73e9227d41cf335eedf7fb6", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\tif (this.indexOfFirstFieldBinding == 1 && scope.compilerOptions().getSeverity(CompilerOptions.UnqualifiedFieldAccess) != ProblemSeverities.Ignore) {", "-\t\t\t\t\t\t\tscope.problemReporter().unqualifiedFieldAccess(this, fieldBinding);", "+\t\t\t\t\t\tboolean inStaticContext = scope.methodScope().isStatic;", "+\t\t\t\t\t\tif (this.indexOfFirstFieldBinding == 1) {", "+\t\t\t\t\t\t\tif (scope.compilerOptions().getSeverity(CompilerOptions.UnqualifiedFieldAccess) != ProblemSeverities.Ignore) {", "+\t\t\t\t\t\t\t\tscope.problemReporter().unqualifiedFieldAccess(this, fieldBinding);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (!inStaticContext) {", "+\t\t\t\t\t\t\t\tscope.tagAsAccessingEnclosingInstanceStateOf(fieldBinding.declaringClass, false /* type variable access */);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t || scope.methodScope().isStatic) { \t// the field is the first token of the qualified reference....", "+\t\t\t\t\t\t\t\t || inStaticContext) { \t// the field is the first token of the qualified reference...."]}], "num": 19973}
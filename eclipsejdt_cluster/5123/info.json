{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "853d62c2c84923ae170f1d369775adca", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17bba8b8e93dcd83b529694c305d746d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/MultiOperation.java", "commitBeforeChange": "a3333bb335567ca03beac7199ab0f2b0e3a8fc03", "commitAfterChange": "e5c7fc4ae60b9d791500413e9c800c9fd02d03c3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected MultiOperation(IJavaElement[] elementsToProcess, IJavaElement[] parentElements, boolean force)", "signatureAfterChange": " \tprotected MultiOperation(IJavaElement[] elementsToProcess, IJavaElement[] parentElements, boolean force)", "diff": ["-\tprotected MultiOperation(IJavaElement[] elementsToProcess, IJavaElement[] parentElements, boolean force) {", "-\t\tsuper(elementsToProcess, parentElements, force);", "-\t\tfParentElements = new HashMap(elementsToProcess.length);", "-\t\tif (elementsToProcess.length == parentElements.length) {", "-\t\t\tfor (int i = 0; i < elementsToProcess.length; i++) {", "-\t\t\t\tfParentElements.put(elementsToProcess[i], parentElements[i]);", "-\t\t\t}", "-\t\t} else { //same destination for all elements to be moved/copied/renamed", "-\t\t\tfor (int i = 0; i < elementsToProcess.length; i++) {", "-\t\t\t\tfParentElements.put(elementsToProcess[i], parentElements[0]);", "-\t\t\t}", "-\t\t}", "-\t", "-\t}", "+\t */", "+\tprotected MultiOperation(IJavaElement[] elementsToProcess, IJavaElement[] parentElements, boolean force) {", "+\t\tsuper(elementsToProcess, parentElements, force);", "+\t\tthis.newParents = new HashMap(elementsToProcess.length);", "+\t\tif (elementsToProcess.length == parentElements.length) {", "+\t\t\tfor (int i = 0; i < elementsToProcess.length; i++) {", "+\t\t\t\tthis.newParents.put(elementsToProcess[i], parentElements[i]);", "+\t\t\t}", "+\t\t} else { //same destination for all elements to be moved/copied/renamed", "+\t\t\tfor (int i = 0; i < elementsToProcess.length; i++) {", "+\t\t\t\tthis.newParents.put(elementsToProcess[i], parentElements[0]);", "+\t\t\t}", "+\t\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b94afeb330de4e9d86fbeb491c9b927f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HandleFactory.java", "commitBeforeChange": "b17f0033873962e79cd540a0937b76249dec8a6c", "commitAfterChange": "360e136a8e044225071869fa38d7072ea1d3cdac", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprivate IJavaElement createElement(Scope scope, int elementPosition, ICompilationUnit unit, HashSet existingElements)", "signatureAfterChange": " \tprivate IJavaElement createElement(Scope scope, int elementPosition, ICompilationUnit unit, HashSet existingElements, HashMap knownScopes)", "diff": ["-\tprivate IJavaElement createElement(Scope scope, int elementPosition, ICompilationUnit unit, HashSet existingElements) {", "-\t\tIJavaElement newElement = null;", "+\tprivate IJavaElement createElement(Scope scope, int elementPosition, ICompilationUnit unit, HashSet existingElements, HashMap knownScopes) {", "+\t\tIJavaElement newElement = (IJavaElement)knownScopes.get(scope);", "+\t\tif (newElement != null) return newElement;", "-\t\t\t\tIJavaElement parentElement = createElement(scope.parent, elementPosition, unit, existingElements);", "+\t\t\t\tIJavaElement parentElement = createElement(scope.parent, elementPosition, unit, existingElements, knownScopes);", "-\t\t\t\tIType parentType = (IType) createElement(scope.parent, elementPosition, unit, existingElements);", "+\t\t\t\tIType parentType = (IType) createElement(scope.parent, elementPosition, unit, existingElements, knownScopes);", "-\t\t\t\t\t\tif (field.sourceStart < elementPosition && field.sourceEnd > elementPosition) {", "+\t\t\t\t\t\tif (field.declarationSourceStart < elementPosition && field.declarationSourceEnd > elementPosition) {", "-\t\t\t\tnewElement = createElement(scope.parent, elementPosition, unit, existingElements);", "+\t\t\t\tnewElement = createElement(scope.parent, elementPosition, unit, existingElements, knownScopes);", "+\t\t\tknownScopes.put(scope, newElement);"]}], "num": 5123}
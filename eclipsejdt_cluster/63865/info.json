{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d15f28ca61bdf37cc8d0b1dfb382d874", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93d3d69c0349a1486a68583cb3a39e52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeFilerImpl.java", "commitBeforeChange": "4aad3541005b227c1c4489d6142b68e14885b9dc", "commitAfterChange": "c69c700b22ba98a95d56e16f7365ecaf28392cdd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t@Override \tpublic FileObject createResource(Location location, CharSequence pkg, \t\t\tCharSequence relativeName, Element... originatingElements) throws IOException", "signatureAfterChange": " \t@Override \tpublic FileObject createResource(Location location, CharSequence pkg, \t\t\tCharSequence relativeName, Element... originatingElements) throws IOException", "diff": ["-\t\t\tCharSequence relativeName, Element... originatingElements) throws IOException {", "-\t\t//TODO", "-\t\tthrow new UnsupportedOperationException(\"Creating resource files is not yet implemented\"); //$NON-NLS-1$", "+\t\t\tCharSequence relativeName, Element... originatingElements) throws IOException ", "+\t{", "+\t\t// Pre-emptively check parameters here, rather than later on when the resource is written and closed.", "+\t\tif (null == location) {", "+\t\t\tthrow new IllegalArgumentException(\"Location is null\");", "+\t\t}", "+\t\tif (!location.isOutputLocation()) {", "+\t\t\tthrow new IllegalArgumentException(\"Location \" + location.getName() + \" is not an output location\");", "+\t\t}", "+\t\t", "+\t\tif (null == pkg) {", "+\t\t\tthrow new IllegalArgumentException(\"Package is null\");", "+\t\t}", "+\t\tif (null == relativeName) {", "+\t\t\tthrow new IllegalArgumentException(\"Relative name is null\");", "+\t\t}", "+\t\tif ( relativeName.length() == 0) {", "+\t\t\tthrow new IllegalArgumentException(\"Relative name is zero length\");", "+\t\t}", "+\t\tIFile file = getOutputFileForLocation(location, pkg, relativeName);", "+\t\t", "+\t\t//TODO: check whether file has already been generated in this run", "+\t\tSet<IFile> parentFiles = new HashSet<IFile>(originatingElements.length);", "+\t\tfor (Element elem : originatingElements) {", "+\t\t\tIFile enclosing = _env.getEnclosingIFile(elem);", "+\t\t\tif (null != enclosing) {", "+\t\t\t\tparentFiles.add(enclosing);", "+\t\t\t}", "+\t\t}", "+\t\treturn new IdeOutputFileObject(_env, file, parentFiles);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c778ff92aecda1c622943f7b04c82772", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeFilerImpl.java", "commitBeforeChange": "4aad3541005b227c1c4489d6142b68e14885b9dc", "commitAfterChange": "c69c700b22ba98a95d56e16f7365ecaf28392cdd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@Override \tpublic JavaFileObject createSourceFile(CharSequence name, Element... originatingElements) \t\t\tthrows IOException", "signatureAfterChange": " \t@Override \tpublic JavaFileObject createSourceFile(CharSequence name, Element... originatingElements) \t\t\tthrows IOException", "diff": ["-\t\t//TODO: check whether file has already been generated in this run", "-\t\tList<IFile> parentFiles = new ArrayList<IFile>(originatingElements.length);", "-\t\tfor (Element elem : originatingElements) {", "-\t\t\tparentFiles.add(_env.getEnclosingIFile(elem));", "+\t\t// Pre-emptively check parameters here, rather than later on when the resource is written and closed.", "+\t\tif (null == name) {", "+\t\t\tthrow new IllegalArgumentException(\"Name is null\");", "-\t\treturn new IdeJavaFileObject(_env, name, parentFiles);", "+\t\t//TODO: check whether file has already been generated in this run", "+\t\tSet<IFile> parentFiles = new HashSet<IFile>(originatingElements.length);", "+\t\tfor (Element elem : originatingElements) {", "+\t\t\tIFile enclosing = _env.getEnclosingIFile(elem);", "+\t\t\tif (null != enclosing) {", "+\t\t\t\tparentFiles.add(enclosing);", "+\t\t\t}", "+\t\t}", "+\t\treturn new IdeOutputJavaFileObject(_env, name, parentFiles);"]}], "num": 63865}
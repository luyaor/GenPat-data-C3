{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80cb7181b88307e0f3031eee22197943", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3133b01c6a4976c7ad85b48295e76835", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKey.java", "commitBeforeChange": "ec6d7f365ea3ec3ffcd55d64775bd62b984807f3", "commitAfterChange": "c021c50efca4c234ec58241ed1fc82f6871e98bd", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t SourceTypeBinding getGenericTypeBinding(SourceTypeBinding typeBinding, CompilationUnitResolver resolver)", "signatureAfterChange": " \t SourceTypeBinding getGenericTypeBinding(SourceTypeBinding typeBinding, CompilationUnitResolver resolver)", "diff": ["+\t  */", "+\t SourceTypeBinding getGenericTypeBinding(SourceTypeBinding typeBinding, CompilationUnitResolver resolver) {", "+\t \tTypeVariableBinding[] typeVariableBindings = typeBinding.typeVariables();", "+\t \tfor (int i = 0, length = typeVariableBindings.length; i < length; i++) {", "+\t\t\tTypeVariableBinding typeVariableBinding = typeVariableBindings[i];", "+\t\t\tif (this.scanner.nextToken() != BindingKeyScanner.TYPE)", "+\t\t\t\treturn null;", "+\t\t \tchar[] typeVariableName = this.scanner.getTokenSource();", "+\t\t\tif (!CharOperation.equals(typeVariableName, typeVariableBinding.sourceName()))", "+\t\t\t\treturn null;", "+\t\t}", "+\t \treturn typeBinding;", "-\t  */", "-\t SourceTypeBinding getGenericTypeBinding(SourceTypeBinding typeBinding, CompilationUnitResolver resolver) {", "-\t \tTypeVariableBinding[] typeVariableBindings = typeBinding.typeVariables();", "-\t \tfor (int i = 0, length = typeVariableBindings.length; i < length; i++) {", "-\t\t\tTypeVariableBinding typeVariableBinding = typeVariableBindings[i];", "-\t\t \tchar[] typeVariableName = this.scanner.getTokenSource();", "-\t\t\tif (!CharOperation.equals(typeVariableName, typeVariableBinding.sourceName()))", "-\t\t\t\treturn null;", "-\t \t\treset();", "-\t \t\tBinding superclass = getCompilerBinding(resolver);", "-\t \t\tif (superclass != typeVariableBinding.superclass()) ", "-\t \t\t\treturn null;", "-\t \t\tReferenceBinding[] superinterfaces = typeVariableBinding.superInterfaces();", "-\t \t\tfor (int j = 0, superinterfacesLength = superinterfaces.length; j < superinterfacesLength; j++) {", "-\t\t \t\treset();", "-\t\t \t\tBinding superinterface = getCompilerBinding(resolver);", "-\t\t \t\tif (superinterface != superinterfaces[j]) ", "-\t\t \t\t\treturn null;", "-\t\t\t}", "-\t\t}", "-\t \treturn typeBinding;", "-\t }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e99748122dad1c96e033c77d32198d03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "67035f14cb0a6ff376a72c1dc8d8f9d49e8aa489", "commitAfterChange": "284db1207b4a8a1487a9884e41782a487dbb438d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  private boolean isWorthBuilding() throws CoreException", "signatureAfterChange": "  private boolean isWorthBuilding() throws CoreException", "diff": ["-\t\t\t// The prereq project has no build state: if this project has a 'warning' cycle marker and the prereq project is involved in the cycle", "+\t\t\t// The prereq project has no build state: if this prereq project has a 'warning' cycle marker", "-\t\t\tJavaProject jProject = (JavaProject)this.javaProject;", "-\t\t\tIMarker cycleMarker = jProject.getCycleMarker();", "-\t\t\tif (cycleMarker != null && ((Integer)cycleMarker.getAttribute(IMarker.SEVERITY)).intValue() == IMarker.SEVERITY_WARNING) {", "-\t\t\t\tHashSet cycleParticipants = new HashSet();", "-\t\t\t\tjProject.updateCycleParticipants(null, new ArrayList(), cycleParticipants, ResourcesPlugin.getWorkspace().getRoot());", "-\t\t\t\tif (cycleParticipants.contains(JavaCore.create(p))) {", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "+\t\t\tJavaProject prereqProject = (JavaProject)JavaCore.create(p);", "+\t\t\tif (prereqProject.hasCycleMarker() ", "+\t\t\t\t\t&& JavaCore.WARNING.equals(JavaCore.getOption(JavaCore.CORE_CIRCULAR_CLASSPATH))) {", "+\t\t\t\tcontinue;"]}], "num": 33538}
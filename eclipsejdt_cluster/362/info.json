{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9a10dcf9224c5491b5872e8a31cb706", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67b16146fc7726dc352f00c1b59c5d2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "4d5ca8a02167bbefc92469b1dbb1f1e04260a45e", "commitAfterChange": "76edcbed1c0fde7a71f27c4d41397b66a882f551", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkInheritedMethods(MethodBinding[] methods, int length, boolean[] isOverridden, boolean[] isInherited)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding[] methods, int length, boolean[] isOverridden, boolean[] isInherited)", "diff": ["-\t\t\t\t\t} else {", "-\t\t\t\t\t\tproblemReporter().duplicateInheritedMethods(this.type, concreteMethod, methods[i]);", "-\t\t\t\t\t\tcontinueInvestigation = false;", "+\t\t\t\t\t// https://bugs.eclipse.org/195802 with https://bugs.eclipse.org/410325", "+\t\t\t\t\t// If a replace method (from findReplacedMethod()) is the rawified version of another", "+\t\t\t\t\t// don't count this as duplicates:", "+\t\t\t\t\t//   (Not asking ParameterizedGenericMethodBinding.isRawMethod(),", "+\t\t\t\t\t//    because that is true only for methods of a RawTypeBinding,", "+\t\t\t\t\t//    but here we look for rawness regarding the method's type variables).", "+\t\t\t\t\tif (concreteMethod.declaringClass == methods[i].declaringClass ", "+\t\t\t\t\t\t\t&& concreteMethod.typeVariables.length != methods[i].typeVariables.length) ", "+\t\t\t\t\t{", "+\t\t\t\t\t\tif (concreteMethod.typeVariables == Binding.NO_TYPE_VARIABLES", "+\t\t\t\t\t\t\t\t&& concreteMethod.original() == methods[i])", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tif (methods[i].typeVariables == Binding.NO_TYPE_VARIABLES", "+\t\t\t\t\t\t\t\t&& methods[i].original() == concreteMethod)", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+", "+\t\t\t\t\tproblemReporter().duplicateInheritedMethods(this.type, concreteMethod, methods[i]);", "+\t\t\t\t\tcontinueInvestigation = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de25cebe1be767be2d2803dbb688395a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "e2e97eb1ed318448b72d60aca6f0daa8c5b48408", "commitAfterChange": "ce089180323dc4b5ef74d43ea0b4475c385fcd97", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void checkInheritedMethods(MethodBinding[] methods, int length, boolean[] isOverridden)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding[] methods, int length, boolean[] isOverridden)", "diff": ["+\t\t\t\t// https://bugs.eclipse.org/195802 with https://bugs.eclipse.org/410325", "+\t\t\t\t// If a replace method (from findReplacedMethod()) is the rawified version of another", "+\t\t\t\t// don't count this as duplicates:", "+\t\t\t\t//   (Not asking ParameterizedGenericMethodBinding.isRawMethod(),", "+\t\t\t\t//    because that is true only for methods of a RawTypeBinding,", "+\t\t\t\t//    but here we look for rawness regarding the method's type variables).", "+\t\t\t\tif (concreteMethod.declaringClass == methods[i].declaringClass ", "+\t\t\t\t\t\t&& concreteMethod.typeVariables.length != methods[i].typeVariables.length) ", "+\t\t\t\t{", "+\t\t\t\t\tif (concreteMethod.typeVariables == Binding.NO_TYPE_VARIABLES", "+\t\t\t\t\t\t\t&& concreteMethod.original() == methods[i])", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tif (methods[i].typeVariables == Binding.NO_TYPE_VARIABLES", "+\t\t\t\t\t\t\t&& methods[i].original() == concreteMethod)", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+"]}], "num": 362}
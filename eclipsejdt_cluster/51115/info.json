{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3eee4f3c97645c1fbca950f305de44d7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fb9b0e75bf9a1745a01d6ed5930ada9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "4d4c077960caad3dac6f1440a1eec3349b581bc3", "commitAfterChange": "84e94fe061dc975da80dda85572c99f5b95d09f2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private IIndex[] computeIndexes()", "signatureAfterChange": " private void initializeIndexKeys()", "diff": ["-private IIndex[] computeIndexes() {", "+private void initializeIndexKeys() {", "-\tboolean areAllIndexesReady = true;", "-\t", "-\tArrayList indexesInScope = new ArrayList();", "+\tArrayList requiredIndexKeys = new ArrayList();", "-\t\t\tIIndex index = this.indexManager.getIndex(path, true /*reuse index file*/, false /*do not create if none*/);", "-\t\t\tif (index == null) areAllIndexesReady = false;", "-\t\t\tif (index != null && indexesInScope.indexOf(index) == -1) {", "-\t\t\t\tindexesInScope.add(index);", "+\t\t\tif (requiredIndexKeys.indexOf(path) == -1) {", "+\t\t\t\trequiredIndexKeys.add(path);", "-\tIIndex[] availableIndexes = new IIndex[indexesInScope.size()];", "-\tindexesInScope.toArray(availableIndexes);", "-", "-\t// only cache available indexes if all of them were ready (if not, next call will recompute)", "-\tif (areAllIndexesReady) this.indexes = availableIndexes;", "-\treturn availableIndexes;", "+\tthis.indexKeys = new IPath[requiredIndexKeys.size()];", "+\trequiredIndexKeys.toArray(this.indexKeys);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c22a25476b8d4472a0fa685f4e4bf32a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/InMemoryIndex.java", "commitBeforeChange": "ae7797d27bfed7c3f6e7630a551ffec98598a05e", "commitAfterChange": "b5a62e48da3d2bb054c313f16e0e1c0a1279b4a4", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r \r \tprotected void save(IndexOutput output) throws IOException", "signatureAfterChange": "\r \r \tprotected void save(IndexOutput output) throws IOException", "diff": ["-\t\tchar[][] sortedWords= getSortedWords();\r", "+\t\tgetSortedWordEntries(); // init the slot\r", "-\t\t\t\toutput.addFile(indexedFile);\r", "+\t\t\t\toutput.addFile(indexedFile); // written out in order BUT not alphabetical\r", "-\t\t\tint numWords= sortedWords.length;\r", "-\t\t\tfor (int i= 0; i < numWords; ++i) {\r", "-\t\t\t\tchar[] word= sortedWords[i];\r", "-\t\t\t\tWordEntry entry= (WordEntry) this.words.get(word);\r", "-\t\t\t\toutput.addWord(entry);\r", "-\t\t\t}\r", "+\t\t\tfor (int i= 0, numWords= sortedWordEntries.length; i < numWords; ++i)\r", "+\t\t\t\toutput.addWord(sortedWordEntries[i]);\r", "-\t\t\tif (!ok)\r", "-\t\t\t\tif (output != null)\r", "-\t\t\t\t\toutput.close();\r", "+\t\t\tif (!ok && output != null)\r", "+\t\t\t\toutput.close();\r"]}], "num": 51115}
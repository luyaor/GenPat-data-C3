{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "200c483b692e58b8f86bc08cceab22e6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f90f8b99953b0e68641fabf71d2a114", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "e5e6f9097f2c3bf7294bd658643d6be9f7aaa5ef", "commitAfterChange": "d00bc48524f3df289951f11fca95cb39820be47f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "signatureAfterChange": "\r public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "diff": ["-\tint pc = codeStream.position;\r", "-\t\tif (constant.booleanValue() == true) {\r", "-\t\t\t// constant == true\r", "-\t\t\tif (valueRequired) {\r", "-\t\t\t\tif (falseLabel == null) {\r", "-\t\t\t\t\t// implicit falling through the FALSE case\r", "-\t\t\t\t\tif (trueLabel != null) {\r", "-\t\t\t\t\t\tcodeStream.goto_(trueLabel);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\t// constant == false\r", "-\t\t\tif (valueRequired) {\r", "-\t\t\t\tif (falseLabel != null) {\r", "-\t\t\t\t\t// implicit falling through the TRUE case\r", "-\t\t\t\t\tif (trueLabel == null) {\r", "-\t\t\t\t\t\tcodeStream.goto_(falseLabel);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tcodeStream.recordPositionsFrom(pc, this);\r", "+\t\tsuper.generateOptimizedBoolean(currentScope, codeStream, trueLabel, falseLabel, valueRequired);\r", "+\tint pc = codeStream.position;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d59667d6ea90f84bd84f5b174f5f9a0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "628e9c4648e198faf112f84ab4f79974c542dba4", "commitAfterChange": "a5c3db41a58c8521d5f8f73e141ab57108cd47bc", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprivate void formatClassBodyDeclarations(AstNode[] nodes)", "signatureAfterChange": " \tprivate void formatClassBodyDeclarations(AstNode[] nodes)", "diff": ["-\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tif (multiField.isStatic()) {", "-\t\t\t\t\t\t\t\tformat(multiField, this, null, isChunkStart);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tformat(multiField, this, null, isChunkStart);", "-\t\t\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t\t\t\tformat(multiField, this, null, isChunkStart);", "-\t\t\t\t\t\t\tif (initializer.isStatic()) {", "-\t\t\t\t\t\t\t\tinitializer.traverse(this, null);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tinitializer.traverse(this, null);", "-\t\t\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t\t\t\tinitializer.traverse(this, null);", "-\t\t\t\t\t\t\tif (field.isStatic()) {", "-\t\t\t\t\t\t\t\tformat(field, this, null, isChunkStart);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tformat(field, this, null, isChunkStart);", "-\t\t\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t\t\t\tformat(field, this, null, isChunkStart);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (i != max - 1) {", "+\t\t\t\t\t\tthis.scribe.printNewLine();"]}], "num": 71239}
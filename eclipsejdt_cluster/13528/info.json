{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "294e8f2cb7bc8063c8cec5f4da7c2f26", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "255787f9a718c920f2b52c770ac9c892", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "0efae52576e07ebd224a2451d252dd1a61534d03", "commitAfterChange": "8722bacd2644840da886ad1d13785a049b5d8dcf", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tpublic IClasspathEntry[] getRawClasspath() throws JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getRawClasspath() throws JavaModelException", "diff": ["+\t\treturn getRawClasspath(false/*don't create markers*/, true/*log problems*/);", "+\t}", "-\t\tclasspath = this.readClasspathFile(false/*don't create markers*/, true/*log problems*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcdfc62be0912c17f9a0887b9b9c982b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "a515c0e89f3538cb525603746b5edc352fafce13", "commitAfterChange": "ee21804c76d9045cca608d4ec10309d0029147ac", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tprotected boolean generateInfos( \t\tOpenableElementInfo info, \t\tIProgressMonitor pm, \t\tMap newElements, \t\tIResource underlyingResource)\tthrows JavaModelException", "signatureAfterChange": " \tprotected boolean generateInfos( \t\tOpenableElementInfo info, \t\tIProgressMonitor pm, \t\tMap newElements, \t\tIResource underlyingResource)\tthrows JavaModelException", "diff": ["-\t\t\t\t// put the info now, because setting the classpath requires it", "+\t\t\t\t// put the info now, because computing the roots requires it", "-\t\t\t\t// read classpath property (contains actual classpath and output location settings)", "-\t\t\t\tIClasspathEntry[] classpath = this.readClasspathFile(false/*don't create markers*/, true/*log problems*/);", "-\t\t\t\tIPath outputLocation = null;", "-\t\t\t\t// extract out the output location", "-\t\t\t\tif (classpath != null && classpath.length > 0) {", "-\t\t\t\t\tIClasspathEntry entry = classpath[classpath.length - 1];", "-\t\t\t\t\tif (entry.getContentKind() == ClasspathEntry.K_OUTPUT) {", "-\t\t\t\t\t\toutputLocation = entry.getPath();", "-\t\t\t\t\t\tIClasspathEntry[] copy = new IClasspathEntry[classpath.length - 1];", "-\t\t\t\t\t\tSystem.arraycopy(classpath, 0, copy, 0, copy.length);", "-\t\t\t\t\t\tclasspath = copy;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t// restore output location\t\t\t\t", "-\t\t\t\tif (outputLocation == null) {", "-\t\t\t\t\toutputLocation = defaultOutputLocation();", "-\t\t\t\t}", "-", "-\t\t\t\tJavaModelManager.PerProjectInfo perProjectInfo = getJavaModelManager().getPerProjectInfoCheckExistence(fProject);", "-\t\t\t\tsynchronized (perProjectInfo) {", "-\t\t\t\t\t// cache output location", "-\t\t\t\t\tperProjectInfo.outputLocation = outputLocation;", "-\t\t\t\t}", "-", "-\t\t\t\t/* Disable validate: classpath can contain CP variables and container that need to be resolved ", "-\t\t\t\t// validate classpath and output location", "-\t\t\t\tif (classpath != INVALID_CLASSPATH", "-\t\t\t\t\t\t&& !JavaConventions.validateClasspath(this, classpath, outputLocation).isOK()) {", "-\t\t\t\t\tclasspath = INVALID_CLASSPATH;", "-\t\t\t\t}", "-\t\t\t\t*/", "+\t\t\t\t// compute the pkg fragment roots", "+\t\t\t\tupdatePackageFragmentRoots();\t\t\t\t", "-\t\t\t\tsetRawClasspath0(classpath);", "-", "-\t\t} catch (JavaModelException e) {"]}], "num": 13528}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3822df0903f5eef62a3d4e79acfe3c02", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94b980ce653c06eaf4264b06cf2810a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/State.java", "commitBeforeChange": "4aa9bc6aa2cb666fb0721f9b95f7c7e969829a0c", "commitAfterChange": "39745a85705361f7e5b8ca890f80a07d85799adc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \r public void rememberAdditionalTypes(char[] fileId, char[][] typeNames)", "signatureAfterChange": "\r \r char[][] getAdditionalTypeNamesFor(char[] fileId)", "diff": ["+char[][] getAdditionalTypeNamesFor(char[] fileId) {\r", "+\tObject c = references.get(fileId);\r", "+\tif (c instanceof AdditionalTypeCollection)\r", "+\t\treturn ((AdditionalTypeCollection) c).additionalTypeNames;\r", "+\treturn null;\r", "-public void rememberAdditionalTypes(char[] fileId, char[][] typeNames) {\r", "-\tif (typeNames != null && typeNames.length > 0)\r", "-\t\tadditionalTypeNames.put(fileId, typeNames);\r", "-\telse\r", "-\t\tadditionalTypeNames.removeKey(fileId);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb6f1c245ef533eee23b396545e7e58b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/LineBreaksPreparator.java", "commitBeforeChange": "2e56c16c054ee89ad0380a5a606694122f7187a1", "commitAfterChange": "9120b6c49a4b36e25b20147789ffde03aca85f97", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "  \tprivate boolean handleEmptyLinesIndentation(int openBraceIndex)", "signatureAfterChange": "  \tprivate void addEmptyLineTokenAfter(int tokenIndex)", "diff": ["-\tprivate boolean handleEmptyLinesIndentation(int openBraceIndex) {", "-\t\tToken open = this.tm.get(openBraceIndex);", "-\t\tToken next = this.tm.get(openBraceIndex + 1);", "-\t\tboolean isEmpty = next.tokenType == TokenNameRBRACE;", "-\t\tif (!isEmpty || this.tm.countLineBreaksBetween(open, next) < 2 || !this.options.indent_empty_lines)", "-\t\t\treturn isEmpty;", "+\tprivate void addEmptyLineTokenAfter(int tokenIndex) {", "+\t\tif (tokenIndex + 1 >= this.tm.size())", "+\t\t\treturn;", "+\t\tToken token = this.tm.get(tokenIndex);", "+\t\tToken next = this.tm.get(tokenIndex + 1);", "+\t\tif (this.tm.countLineBreaksBetween(token, next) < 2 || !this.options.indent_empty_lines)", "+\t\t\treturn;", "-\t\tfor (int i = open.originalEnd + 1; i < next.originalStart; i++) {", "+\t\tfor (int i = token.originalEnd + 1; i < next.originalStart; i++) {", "-\t\t\t\tthis.tm.insert(openBraceIndex + 1, emptyLineToken);", "-\t\t\t\treturn true;", "+\t\t\t\tthis.tm.insert(tokenIndex + 1, emptyLineToken);", "+\t\t\t\treturn;", "-\t\treturn true;", "+\t\tassert false;"]}], "num": 51595}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c9be457ea7179724b3b4b22873e2229", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94bb4a1c3cfa1eaed72829a161cf308f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "363b367ba174c0ebc8c5fa2ea4730dd189c06e64", "commitAfterChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic static int checkAssignment(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t   VariableBinding var, FlowInfo flowInfo, int nullStatus, Expression expression, TypeBinding providedType)", "signatureAfterChange": " \tpublic static int checkAssignment(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t   VariableBinding var, FlowInfo flowInfo, int nullStatus, Expression expression, TypeBinding providedType)", "diff": ["-\t\tif (!currentScope.environment().usesNullTypeAnnotations()) {", "+\t\tboolean usesNullTypeAnnotations = currentScope.environment().usesNullTypeAnnotations();", "+\t\tif (!usesNullTypeAnnotations) {", "-\t\t\treturn FlowInfo.POTENTIALLY_NULL;\t\t\t// -> use more specific info from the annotation", "+\t\t\tif (usesNullTypeAnnotations && providedType.isTypeVariable() && (providedType.tagBits & TagBits.AnnotationNullMASK) == 0)", "+\t\t\t\treturn FlowInfo.POTENTIALLY_NULL | FlowInfo.POTENTIALLY_NON_NULL;\t\t// -> free type variable can mean either nullable or nonnull", "+\t\t\treturn FlowInfo.POTENTIALLY_NULL | FlowInfo.POTENTIALLY_UNKNOWN;\t\t\t// -> combine info from lhs & rhs"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2ffa4d54c2abc20feefd723b3d1982c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "56242f2c4a4e3fdfdcffa7d9541655946a7953f8", "commitAfterChange": "40f76b3d0fb01a4a7fa1aad4b09c356c31458c94", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " static int computeNullProblemSeverity(long requiredBits, long providedBits, int nullStatus)", "signatureAfterChange": " static int computeNullProblemSeverity(long requiredBits, long providedBits, int nullStatus)", "diff": ["-\t\t\treturn 3; // mismatching annotations", "+\t\t\treturn 2; // mismatching annotations", "-\t\t\tif (requiredBits == TagBits.AnnotationNonNull) {", "-\t\t\t\tif ((nullStatus & FlowInfo.POTENTIALLY_NULL) != 0) {", "-\t\t\t\t\treturn 1; // @NonNull vs. inferred @Nullable", "-\t\t\t\t} else if (nullStatus == FlowInfo.NULL) {", "-\t\t\t\t\treturn 1; // @NonNull vs. null", "-\t\t\t\t} else if (nullStatus == FlowInfo.NON_NULL) {", "-\t\t\t\t\treturn 0;", "-\t\t\t\t} else {", "-\t\t\t\t\treturn 2; // need unchecked conversion regarding type detail", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\treturn 2; // need unchecked conversion regarding type detail", "+\t\t\tif (requiredBits == TagBits.AnnotationNonNull && nullStatus == FlowInfo.NON_NULL) {", "+\t\t\t\treturn 0; // OK by flow analysis", "+\t\t\treturn 1; // need unchecked conversion regarding type detail", "-\treturn 0;", "+\treturn 0; // OK by tagBits"]}], "num": 54805}
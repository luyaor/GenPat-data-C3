{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d4866b543169a4797e054290c8704238", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35bd176347809e21c0c0f9b3f7fa001a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/AbstractCompilerToolTest.java", "commitBeforeChange": "24886323fed59fa7df90089efb8e6a1735628edf", "commitAfterChange": "2a6ccc4326c5f51715033b769f3fad2752538c59", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t@Override \tprotected boolean invokeCompiler( \t\t\tPrintWriter out,  \t\t\tPrintWriter err, \t\t\tObject extraArguments, \t\t\tTestCompilationProgress compilationProgress)", "signatureAfterChange": " \t@Override \tprotected boolean invokeCompiler( \t\t\tPrintWriter out,  \t\t\tPrintWriter err, \t\t\tObject extraArguments, \t\t\tTestCompilationProgress compilationProgress)", "diff": ["-\t\tList<File> files = new ArrayList<File>();", "-\t\tString[] fileNames = arguments.fileNames;", "-\t\tfor (int i = 0, l = fileNames.length; i < l; i++) {", "-\t\t\tif (fileNames[i].startsWith(OUTPUT_DIR)) {", "-\t\t\t\tfiles.add(new File(fileNames[i]));", "-\t\t\t} else {", "-\t\t\t\tfiles.add(new File(OUTPUT_DIR + File.separator + fileNames[i]));", "+\t\ttry {", "+\t\t\tList<File> files = new ArrayList<File>();", "+\t\t\tString[] fileNames = arguments.fileNames;", "+\t\t\tfor (int i = 0, l = fileNames.length; i < l; i++) {", "+\t\t\t\tif (fileNames[i].startsWith(OUTPUT_DIR)) {", "+\t\t\t\t\tfiles.add(new File(fileNames[i]));", "+\t\t\t\t} else {", "+\t\t\t\t\tfiles.add(new File(OUTPUT_DIR + File.separator + fileNames[i]));", "+\t\t\t\t}", "-\t\t}", "-\t\tCompilationTask task = COMPILER.getTask(out, arguments.standardJavaFileManager /* carry the null over */, new CompilerInvocationDiagnosticListener(err), arguments.options, null, manager.getJavaFileObjectsFromFiles(files));", "-\t\treturn task.call();", "+\t\t\tCompilationTask task = COMPILER.getTask(out, arguments.standardJavaFileManager /* carry the null over */, new CompilerInvocationDiagnosticListener(err), arguments.options, null, manager.getJavaFileObjectsFromFiles(files));", "+\t\t\treturn task.call();", "+\t\t} finally {", "+\t\t\ttry {", "+\t\t\t\tmanager.close();", "+\t\t\t} catch (IOException e) {", "+\t\t\t\t// nop", "+\t\t\t}", "+\t\t}\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "882325b554bdff7589d3578731788927", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/CompilerInvocationTests.java", "commitBeforeChange": "8ae6a032b744da62a95176b1af816f0bc6d501e7", "commitAfterChange": "e5d1651827919c7582ba9351a3db777b316a27e0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 59, "signatureBeforeChange": " @Override protected boolean invokeCompiler( \t\tPrintWriter out,  \t\tPrintWriter err, \t\tObject extraArguments, \t\tTestCompilationProgress compilationProgress)", "signatureAfterChange": " public void test021_output_streams() throws IOException", "diff": ["-}", "-@Override", "-protected boolean invokeCompiler(", "-\t\tPrintWriter out, ", "-\t\tPrintWriter err,", "-\t\tObject extraArguments,", "-\t\tTestCompilationProgress compilationProgress) {", "-\tCompilerInvocationTestsArguments arguments = (CompilerInvocationTestsArguments) extraArguments;", "-\tStandardJavaFileManager manager = arguments.standardJavaFileManager;", "-\tif (manager == null) {", "-\t\tmanager = JAVAC_COMPILER.getStandardFileManager(null, null, null); // will pick defaults up", "-\t}", "-\tList<File> files = new ArrayList<File>();", "-\tString[] fileNames = arguments.fileNames;", "-\tfor (int i = 0, l = fileNames.length; i < l; i++) {", "-\t\tfiles.add(new File(OUTPUT_DIR + File.separator + fileNames[i]));", "-\t}", "-\tCompilationTask task = COMPILER.getTask(out, arguments.standardJavaFileManager /* carry the null over */, null, arguments.options, null, manager.getJavaFileObjectsFromFiles(files));", "-\treturn task.call();", "+// most basic output test", "+public void test021_output_streams() throws IOException {", "+\tByteArrayOutputStream ", "+\t\t\toutBuffer = new ByteArrayOutputStream(),", "+\t\t\terrBuffer = new ByteArrayOutputStream();", "+\tCompilationTask task = COMPILER.getTask(", "+\t\tnew PrintWriter(outBuffer), ", "+\t\tJAVAC_COMPILER.getStandardFileManager(null /* diagnosticListener */, null /* locale */, null /* charset */), ", "+\t\tnew CompilerInvocationDiagnosticListener(new PrintWriter(errBuffer)), ", "+\t\tArrays.asList(\"-v\"), null, null);", "+\tassertTrue(task.call());", "+\tassertTrue(outBuffer.toString().startsWith(\"Eclipse Java Compiler\"));", "+\tassertTrue(errBuffer.toString().isEmpty());", "+}"]}], "num": 43837}
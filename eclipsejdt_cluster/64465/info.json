{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e9c6cf6cbfb23b5e5a1db8667614a8d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31507b419b34f0d18d8720a19f3ee3b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 40, "signatureBeforeChange": "  void scanFieldForNullAnnotation(IBinaryField field, FieldBinding fieldBinding)", "signatureAfterChange": "  private void scanFieldForNullAnnotation(IBinaryField field, FieldBinding fieldBinding)", "diff": ["-void scanFieldForNullAnnotation(IBinaryField field, FieldBinding fieldBinding) {", "-\tif (this.environment.globalOptions.sourceLevel >= ClassFileConstants.JDK1_8) {", "-\t\tTypeBinding fieldType = fieldBinding.type;", "-\t\tif (fieldType != null", "-\t\t\t\t&& !fieldType.isBaseType()", "-\t\t\t\t&& (fieldType.tagBits & TagBits.AnnotationNullMASK) == 0", "-\t\t\t\t&& (this.tagBits & TagBits.AnnotationNonNullByDefault) != 0) {", "-\t\t\tfieldBinding.type = this.environment.createAnnotatedType(fieldType, TagBits.AnnotationNonNull);", "-\t\t}", "-\t\treturn; // not using fieldBinding.tagBits when we have type annotations.", "-\t}", "-", "+private void scanFieldForNullAnnotation(IBinaryField field, FieldBinding fieldBinding) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a0e3ce0f0fac9585e518b23da9bce70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "dbdde44f24ace4ee47bccce2cfe484eeeb8013f3", "commitAfterChange": "33bcc97ba28fd6319a8c922b4f8d989e4aab5311", "methodNumberBeforeChange": 565, "methodNumberAfterChange": 565, "signatureBeforeChange": " public void nullityMismatchingTypeAnnotation(Expression expression, TypeBinding providedType, TypeBinding requiredType, NullAnnotationMatching status)", "signatureAfterChange": " public void nullityMismatchingTypeAnnotation(Expression expression, TypeBinding providedType, TypeBinding requiredType, NullAnnotationMatching status)", "diff": ["-\tif (providedType.id == TypeIds.T_null) {", "+\t// try to improve nonnull vs. null:", "+\tif (providedType.id == TypeIds.T_null || status.nullStatus == FlowInfo.NULL) {", "-\tString[] arguments ;", "+\t// try to improve nonnull vs. nullable:", "+\tif (status.isPotentiallyNullMismatch()", "+\t\t\t&& (requiredType.tagBits & TagBits.AnnotationNonNull) != 0 ", "+\t\t\t&& (providedType.tagBits & TagBits.AnnotationNullable) == 0)", "+\t{", "+\t\tnullityMismatchPotentiallyNull(expression, requiredType, this.options.nonNullAnnotationName);", "+\t\treturn;", "+\t}", "+\tString[] arguments;", "-\tif (status.superTypeHint != null) {", "+\tif (status.superTypeHint != null && requiredType.isParameterizedType()) {"]}], "num": 64465}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9832545ebc1ba5c099925770e3d53382", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96b000006e3402ea05e1a56c60e7ed37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "9528b13b60b5267a27dfdeac3b8ea9a804476535", "commitAfterChange": "ef0d751764a03bfb7b7e9d8838fc454e1e51fa0c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tthis.qualifyingType = this.receiverType = receiver.resolveType(scope); ", "-\tif (receiverCast && this.receiverType != null) {", "+\tthis.actualReceiverType = receiver.resolveType(scope); ", "+\tif (receiverCast && this.actualReceiverType != null) {", "-\t\tif (((CastExpression)this.receiver).expression.resolvedType == this.receiverType) { ", "+\t\tif (((CastExpression)this.receiver).expression.resolvedType == this.actualReceiverType) { ", "-\t\t\tif(receiverType instanceof ReferenceBinding) {", "+\t\t\tif(actualReceiverType instanceof ReferenceBinding) {", "-\t\t\t\tthis.binding = scope.findMethod((ReferenceBinding)receiverType, selector, new TypeBinding[]{}, this);", "+\t\t\t\tthis.binding = scope.findMethod((ReferenceBinding)actualReceiverType, selector, new TypeBinding[]{}, this);", "-\tif (this.receiverType == null) {", "+\tif (this.actualReceiverType == null) {", "-\tif (this.receiverType.isBaseType()) {", "-\t\tscope.problemReporter().errorNoMethodFor(this, this.receiverType, argumentTypes);", "+\tif (this.actualReceiverType.isBaseType()) {", "+\t\tscope.problemReporter().errorNoMethodFor(this, this.actualReceiverType, argumentTypes);", "-\t\t\t: scope.getMethod(this.receiverType, selector, argumentTypes, this); ", "+\t\t\t: scope.getMethod(this.actualReceiverType, selector, argumentTypes, this); ", "-\t\t\tif (this.receiverType instanceof ReferenceBinding) {", "-\t\t\t\tbinding.declaringClass = (ReferenceBinding) this.receiverType;", "+\t\t\tif (this.actualReceiverType instanceof ReferenceBinding) {", "+\t\t\t\tbinding.declaringClass = (ReferenceBinding) this.actualReceiverType;", "-\t\t\t\tscope.problemReporter().errorNoMethodFor(this, this.receiverType, argumentTypes);", "+\t\t\t\tscope.problemReporter().errorNoMethodFor(this, this.actualReceiverType, argumentTypes);", "-\t\tTypeBinding expectedQualifyingType = this.qualifyingType.erasure().isCompatibleWith(this.binding.declaringClass.erasure())", "-\t\t\t? this.qualifyingType", "+\t\tTypeBinding expectedReceiverType = this.actualReceiverType.erasure().isCompatibleWith(this.binding.declaringClass.erasure())", "+\t\t\t? this.actualReceiverType", "-\t\treceiver.computeConversion(scope, expectedQualifyingType, receiverType);", "-\t\tif (expectedQualifyingType != this.qualifyingType) this.qualifyingType = expectedQualifyingType;", "+\t\treceiver.computeConversion(scope, expectedReceiverType, actualReceiverType);", "+\t\tif (expectedReceiverType != this.actualReceiverType) this.actualReceiverType = expectedReceiverType;", "-\t\tif (!receiver.isImplicitThis() && binding.declaringClass != receiverType) {", "+\t\tif (!receiver.isImplicitThis() && binding.declaringClass != actualReceiverType) {", "-\t\tcheckInvocationArguments(scope, this.receiver, receiverType, binding, this.arguments, argumentTypes, argsContainCast, this);", "+\t\tcheckInvocationArguments(scope, this.receiver, actualReceiverType, binding, this.arguments, argumentTypes, argsContainCast, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc07679f7052627929814fdfeb813dba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocMessageSend.java", "commitBeforeChange": "9528b13b60b5267a27dfdeac3b8ea9a804476535", "commitAfterChange": "ef0d751764a03bfb7b7e9d8838fc454e1e51fa0c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\t\tthis.receiverType = scope.enclosingSourceType();", "+\t\t\tthis.actualReceiverType = scope.enclosingSourceType();", "-\t\t\tthis.receiverType = this.receiver.resolveType((ClassScope) scope);", "+\t\t\tthis.actualReceiverType = this.receiver.resolveType((ClassScope) scope);", "-\t\t\tthis.receiverType = this.receiver.resolveType((BlockScope) scope);", "+\t\t\tthis.actualReceiverType = this.receiver.resolveType((BlockScope) scope);", "-\t\tif (this.receiverType == null) {", "+\t\tif (this.actualReceiverType == null) {", "-\t\tthis.qualifyingType = this.receiverType;", "-\t\tthis.superAccess = scope.enclosingSourceType().isCompatibleWith(this.receiverType);", "+\t\tthis.superAccess = scope.enclosingSourceType().isCompatibleWith(this.actualReceiverType);", "-\t\tif (this.receiverType.isBaseType()) {", "-\t\t\tscope.problemReporter().javadocErrorNoMethodFor(this, this.receiverType, argumentTypes, scope.getDeclarationModifiers());", "+\t\tif (this.actualReceiverType.isBaseType()) {", "+\t\t\tscope.problemReporter().javadocErrorNoMethodFor(this, this.actualReceiverType, argumentTypes, scope.getDeclarationModifiers());", "-\t\t\t: scope.getMethod(this.receiverType, this.selector, argumentTypes, this);", "+\t\t\t: scope.getMethod(this.actualReceiverType, this.selector, argumentTypes, this);", "-\t\t\t\tif (this.receiverType instanceof ReferenceBinding) {", "-\t\t\t\t\tthis.binding.declaringClass = (ReferenceBinding) this.receiverType;", "+\t\t\t\tif (this.actualReceiverType instanceof ReferenceBinding) {", "+\t\t\t\t\tthis.binding.declaringClass = (ReferenceBinding) this.actualReceiverType;", "-\t\t\t\t\tscope.problemReporter().javadocErrorNoMethodFor(this, this.receiverType, argumentTypes, scope.getDeclarationModifiers());", "+\t\t\t\t\tscope.problemReporter().javadocErrorNoMethodFor(this, this.actualReceiverType, argumentTypes, scope.getDeclarationModifiers());"]}], "num": 72385}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf1a9608513524785e68309ca7c1b0ae", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b51eacd2d9a5512cd73a046e447070c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate void processPackageFragmentResource(PackageFragment source, PackageFragmentRoot root, String newName) throws JavaModelException", "signatureAfterChange": " \tprivate void processPackageFragmentResource(PackageFragment source, PackageFragmentRoot root, String newName) throws JavaModelException", "diff": ["-\t\t\tIPackageFragment newFrag = root.getPackageFragment(newFragName);", "+\t\t\tPackageFragment newFrag = root.getPackageFragment(newFragName);", "-\t\t\tboolean shouldMoveFolder = isMove() && !newFrag.getResource().exists(); // if new pkg fragment exists, it is an override", "-\t\t\tIFolder srcFolder = (IFolder)source.getResource();", "+\t\t\tboolean shouldMoveFolder = isMove() && !newFrag.resource().exists(); // if new pkg fragment exists, it is an override", "+\t\t\tIFolder srcFolder = (IFolder)source.resource();", "-\t\t\tboolean containsReadOnlySubPackageFragments = createNeededPackageFragments((IContainer) source.getParent().getResource(), root, newFragName, shouldMoveFolder);", "+\t\t\tboolean containsReadOnlySubPackageFragments = createNeededPackageFragments((IContainer) source.parent.resource(), root, newFragName, shouldMoveFolder);", "-\t\t\t\tupdateReadOnlyPackageFragmentsForMove((IContainer) source.getParent().getResource(), root, newFragName, sourceIsReadOnly);", "+\t\t\t\tupdateReadOnlyPackageFragmentsForMove((IContainer) source.parent.resource(), root, newFragName, sourceIsReadOnly);", "-\t\t\t\t\t\trootResource = newFrag.getResource();", "+\t\t\t\t\t\trootResource = newFrag.resource();", "-\t\t\t\t\t\trootResource =  source.getParent().getResource();", "+\t\t\t\t\t\trootResource =  source.parent.resource();", "-\t\t\t\tupdateReadOnlyPackageFragmentsForCopy((IContainer) source.getParent().getResource(), root, newFragName);", "+\t\t\t\tupdateReadOnlyPackageFragmentsForCopy((IContainer) source.parent.resource(), root, newFragName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5e595ba53967dc157605a181dc61c62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void add(IJavaElement element) throws JavaModelException", "signatureAfterChange": " public void add(IJavaElement element) throws JavaModelException", "diff": ["+\tPackageFragmentRoot root = null;", "-\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)element;", "-\t\t\tIPath rootPath = root.getPath();", "+\t\t\troot = (PackageFragmentRoot)element;", "+\t\t\tIPath rootPath = root.internalPath();", "-\t\t\tIResource rootResource = root.getResource();", "+\t\t\tIResource rootResource = root.resource();", "-\t\t\troot = (IPackageFragmentRoot)element.getParent();", "+\t\t\troot = (PackageFragmentRoot)element.getParent();", "-\t\t\t\tIResource resource = element.getResource();", "+\t\t\t\tIResource resource = ((JavaElement) element).resource();", "-\t\t\t\t\t\tcontainerPath = root.getKind() == IPackageFragmentRoot.K_SOURCE ? root.getParent().getPath() : root.getPath();", "+\t\t\t\t\t\tcontainerPath = root.getKind() == IPackageFragmentRoot.K_SOURCE ? root.getParent().getPath() : root.internalPath();", "-\t\t\troot = (IPackageFragmentRoot) element.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);", "+\t\t\troot = (PackageFragmentRoot) element.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);", "-\t\t\t\trelativePath = Util.relativePath(getPath(element, false/*full path*/), 1/*remove project segmet*/);", "+\t\t\t\trelativePath = Util.relativePath(getPath(element, false/*full path*/), 1/*remove project segment*/);", "-\t\t\t\tcontainerPath = root.getPath();", "+\t\t\t\tcontainerPath = root.internalPath();", "-\tif (containerPath != null)", "-\t\taddEnclosingProjectOrJar(containerPath);", "+\tif (root != null)", "+\t\taddEnclosingProjectOrJar(root.getKind() == IPackageFragmentRoot.K_SOURCE ? root.getParent().getPath() : root.getPath());"]}], "num": 66129}
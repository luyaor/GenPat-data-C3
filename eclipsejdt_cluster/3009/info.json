{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3119e0e662211dbea50bedd8cf29d1a6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1308143750bbe3134e50b500309b368a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/BuildListener.java", "commitBeforeChange": "72643ddaac52d3ea6e2573fbe40b9af5d9586d1e", "commitAfterChange": "965ee55c83771df9f7f21b38b9a78903a86f630d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\t \tprivate CompilationParticipantResult preBuildNotify( PreBuildCompilationEvent pbce )", "signatureAfterChange": " \t\t \tprivate CompilationParticipantResult preBuildNotify( PreBuildCompilationEvent pbce )", "diff": ["+\t\tHashSet<IFile> deletedFiles = new HashSet<IFile>();", "-\t\t\tAPTBuildResult result = APTDispatch.runAPTDuringBuild( ", "+\t\t\tAPTResult result = APTDispatch.runAPTDuringBuild( ", "-\t\t\tnewFiles.addAll( result.getNewFiles() );", "+\t\t\tnewFiles.addAll( result.getNewFiles() );\t\t\t", "+\t\t\tdeletedFiles.addAll( result.getDeletedFiles() );", "-\t\treturn new PreBuildCompilationResult( newFiles.toArray( new IFile[ newFiles.size() ] ), newDependencies ); ", "+\t\t// for apt, new files will always trump deleted files", "+\t\tfor ( IFile df : deletedFiles )", "+\t\t\tif ( newFiles.contains( df ) )", "+\t\t\t\tdeletedFiles.remove( df );", "+", "+\t\treturn new PreBuildCompilationResult( newFiles.toArray( new IFile[ newFiles.size() ] ), deletedFiles.toArray( new IFile[ deletedFiles.size() ] ), newDependencies ); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34c2dc2a567de9f59205dd60eed58399", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/mirrortest/MirrorDeclarationTestAnnotationProcessor.java", "commitBeforeChange": "4b460199498c48cda44ce10125aa5901a10bff62", "commitAfterChange": "ccd12469d7fc21a8e1a0a597451a059df56002ad", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate void testClassDeclaration(ClassDeclaration testClassDec)", "signatureAfterChange": " \tprivate void testClassDeclaration(ClassDeclaration testClassDec)", "diff": ["-\t\tProcessorTestStatus.assertEquals(\"Number of methods\", 2, methodDecls.size());", "+\t\tProcessorTestStatus.assertEquals(\"Number of methods\", 5, methodDecls.size());", "+\t\tHashSet<AnnotationMirror> annotationMirrors = new HashSet<AnnotationMirror>();", "+\t\tfor (MethodDeclaration methodDeclaration : methodDecls) {", "+\t\t\tCollection<AnnotationMirror> mirrors = methodDeclaration.getAnnotationMirrors();", "+\t\t\tannotationMirrors.addAll(mirrors);", "+\t\t}", "+\t\tProcessorTestStatus.assertEquals(\"Wrong size for annotation mirrors\", 3, annotationMirrors.size());", "+\t\t", "-\t\tProcessorTestStatus.assertEquals(\"Object is only super\", \"java.lang.Object\", superClass.toString());\t", "+\t\tProcessorTestStatus.assertEquals(\"Object is only super\", \"java.lang.Object\", superClass.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44a12600742e12dbf66bbbef9d4312c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "e501ebeb8f2d4d3ffca048b0a3620770b3b21e32", "commitAfterChange": "40a6830e5d047359c5255f8a6387f3c89500c57a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tJavaProject initialProject,  \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet visitedProjects,  \t\tObjectVector accumulatedEntries, \t\tMap preferredClasspaths, \t\tMap preferredOutputs) throws JavaModelException", "signatureAfterChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tJavaProject initialProject,  \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet rootIDs, \t\tObjectVector accumulatedEntries, \t\tMap preferredClasspaths, \t\tMap preferredOutputs) throws JavaModelException", "diff": ["-\t\tHashSet visitedProjects, ", "+\t\tHashSet rootIDs,", "-\t\tif (visitedProjects.contains(this)){", "+\t\t// for the project we add this, in case the project is its own source folder.", "+\t\t// we don't want the recursion to end if the source folder has been added", "+\t\t// so we might add it as a rootID and as a project", "+\t\tif (rootIDs.contains(this)){", "-\t\tvisitedProjects.add(this);", "+\t\trootIDs.add(this);", "-\t\t\tIClasspathEntry entry = immediateClasspath[i];", "+\t\t\tClasspathEntry entry = (ClasspathEntry) immediateClasspath[i];", "+\t\t\t\tString rootID = entry.rootID();", "+\t\t\t\tif (rootIDs.contains(rootID)) {", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\trootIDs.add(rootID);", "-\t\t\t\t\t\t\t\tvisitedProjects, ", "+\t\t\t\t\t\t\t\trootIDs,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "665352fd8a962d9e4146267d8c839ac6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "28e589c8bd8ca480293dacfafca0e094a1d48845", "commitAfterChange": "1cb4702a587b6ba044cf9cf0c7f733e4ce72e71e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprivate static void suggestNames( \t\tchar[] packageName, \t\tchar[] qualifiedTypeName, \t\tint dim, \t\tchar[] internalPrefix, \t\tchar[][] prefixes, \t\tchar[][] suffixes, \t\tchar[][] excludedNames, \t\tScanner nameScanner, \t\tINamingRequestor requestor)", "signatureAfterChange": " \t \tprivate static void suggestNames( \t\tchar[] packageName, \t\tchar[] qualifiedTypeName, \t\tint dim, \t\tchar[] internalPrefix, \t\tchar[][] prefixes, \t\tchar[][] suffixes, \t\tchar[][] excludedNames, \t\tScanner nameScanner, \t\tINamingRequestor requestor)", "diff": ["+\t\tSimpleSetOfCharArray foundNames = new SimpleSetOfCharArray();", "-\t\t\t\t\t\t\t\t\t\t\tacceptName(suffixName, prefixes[k], suffixes[l],  k == 0, l == 0, internalPrefix.length - j, requestor);", "-\t\t\t\t\t\t\t\t\t\t\tacceptDefaultName = false;", "+\t\t\t\t\t\t\t\t\t\t\tif (!foundNames.includes(suffixName)) {", "+\t\t\t\t\t\t\t\t\t\t\t\tacceptName(suffixName, prefixes[k], suffixes[l],  k == 0, l == 0, internalPrefix.length - j, requestor);", "+\t\t\t\t\t\t\t\t\t\t\t\tfoundNames.add(suffixName);", "+\t\t\t\t\t\t\t\t\t\t\t\tacceptDefaultName = false;", "+\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\tacceptName(suffixName, prefixes[k], suffixes[l], k == 0, l == 0, internalPrefix.length - j, requestor);", "-\t\t\t\t\t\t\t\t\t\t\t\t\tacceptDefaultName = false;", "+\t\t\t\t\t\t\t\t\t\t\t\t\tif (!foundNames.includes(suffixName)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tacceptName(suffixName, prefixes[k], suffixes[l], k == 0, l == 0, internalPrefix.length - j, requestor);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tfoundNames.add(suffixName);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tacceptDefaultName = false;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t}"]}], "num": 3009}
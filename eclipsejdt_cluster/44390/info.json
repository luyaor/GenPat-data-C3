{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a98b1b5bd193de359a632ad41a509f72", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "240bf62b8aec36830347b42956347335", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public int getNextToken() throws InvalidInputException", "signatureAfterChange": "\r public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "-\t\t\t\t\t\tcheckNonExternalizeString();\r", "-\t\t\t\t\t\tif (recordLineSeparator) {\r", "-\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\tlinePtr++;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "+\t\t\t\t\tif (recordLineSeparator\r", "+\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "+\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\tif (checkNonExternalizedStringLiterals){ // check for presence of\tNLS tags //$NON-NLS-?$ where ? is an int.\r", "-\t\t\t\t\t\tcurrentLineNr = linePtr;\r", "-\t\t\t\t\t\tif (currentLineNr != previousLineNr) {\r", "-\t\t\t\t\t\t\tcurrentLine= new NLSLine(currentLineNr);\r", "-\t\t\t\t\t\t\tlines.add(currentLine);\r", "-\t\t\t\t\t\t\tpreviousLineNr= currentLineNr;\r", "+\t\t\t\t\tif (checkNonExternalizedStringLiterals){ // check for presence of\t/*nonNLS*/\r", "+\t\t\t\t\t\tint lookAhead = 0;\r", "+\t\t\t\t\t\tfor (; lookAhead < 10; lookAhead++){\r", "+\t\t\t\t\t\t\tif (currentPosition + lookAhead == source.length)\r", "+\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\tif (source[currentPosition + lookAhead] != NonNLS_TAG[lookAhead])\r", "+\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\tcurrentLine.add(\r", "-\t\t\t\t\t\t\tnew StringLiteral(\r", "-\t\t\t\t\t\t\t\tgetCurrentTokenSourceString(), \r", "-\t\t\t\t\t\t\t\tstartPosition, \r", "-\t\t\t\t\t\t\t\tcurrentPosition - 1));\r", "+\t\t\t\t\t\tthis.wasNonExternalizedStringLiteral = lookAhead != 10;\r", "-\t\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "-\t\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "-\t\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "-\t\t\t\t\t\t\t\t\t\tif (isUnicode) {\r", "-\t\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();\r", "-\t\t\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\tif (recordLineSeparator\r", "+\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "+\t\t\t\t\t\t\t\t\tif (isUnicode) {\r", "+\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();\r", "-\t\t\t\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\tif (tokenizeComments) {\r", "-\t\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind\r", "-\t\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;\r", "-\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\tif (tokenizeComments) {\r", "+\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind\r", "+\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;\r", "+\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "-\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "-\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "-\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\tlinePtr++;\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tif (recordLineSeparator\r", "+\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "+\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "-\t\t\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "-\t\t\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "-\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\t\t\tlinePtr++;\r", "-\t\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\tif (recordLineSeparator\r", "+\t\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "+\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\tthrow new InvalidInputException(\"Ctrl-Z\"); //$NON-NLS-1$\r", "+\t\t\t\t\tthrow new InvalidInputException(\"Ctrl-Z\"/*nonNLS*/);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "462b00706c5e94b18f458474a0fe8095", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public int getNextToken() throws InvalidInputException", "signatureAfterChange": "\r public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "-\t\t\t\t\t\tcheckNonExternalizeString();\r", "-\t\t\t\t\t\tif (recordLineSeparator) {\r", "-\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\tlinePtr++;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "+\t\t\t\t\tif (recordLineSeparator\r", "+\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "+\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\tif (checkNonExternalizedStringLiterals){ // check for presence of\tNLS tags //$NON-NLS-?$ where ? is an int.\r", "-\t\t\t\t\t\tcurrentLineNr = linePtr;\r", "-\t\t\t\t\t\tif (currentLineNr != previousLineNr) {\r", "-\t\t\t\t\t\t\tcurrentLine= new NLSLine(currentLineNr);\r", "-\t\t\t\t\t\t\tlines.add(currentLine);\r", "-\t\t\t\t\t\t\tpreviousLineNr= currentLineNr;\r", "+\t\t\t\t\tif (checkNonExternalizedStringLiterals){ // check for presence of\t/*nonNLS*/\r", "+\t\t\t\t\t\tint lookAhead = 0;\r", "+\t\t\t\t\t\tfor (; lookAhead < 10; lookAhead++){\r", "+\t\t\t\t\t\t\tif (currentPosition + lookAhead == source.length)\r", "+\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\tif (source[currentPosition + lookAhead] != NonNLS_TAG[lookAhead])\r", "+\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\tcurrentLine.add(\r", "-\t\t\t\t\t\t\tnew StringLiteral(\r", "-\t\t\t\t\t\t\t\tgetCurrentTokenSourceString(), \r", "-\t\t\t\t\t\t\t\tstartPosition, \r", "-\t\t\t\t\t\t\t\tcurrentPosition - 1));\r", "+\t\t\t\t\t\tthis.wasNonExternalizedStringLiteral = lookAhead != 10;\r", "-\t\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "-\t\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "-\t\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "-\t\t\t\t\t\t\t\t\t\tif (isUnicode) {\r", "-\t\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();\r", "-\t\t\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\tif (recordLineSeparator\r", "+\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "+\t\t\t\t\t\t\t\t\tif (isUnicode) {\r", "+\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();\r", "-\t\t\t\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\tif (tokenizeComments) {\r", "-\t\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind\r", "-\t\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;\r", "-\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\tif (tokenizeComments) {\r", "+\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind\r", "+\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;\r", "+\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "-\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "-\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "-\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\tlinePtr++;\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tif (recordLineSeparator\r", "+\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "+\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "-\t\t\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "-\t\t\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "-\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\t\t\tlinePtr++;\r", "-\t\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\tif (recordLineSeparator\r", "+\t\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "+\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\tthrow new InvalidInputException(\"Ctrl-Z\"); //$NON-NLS-1$\r", "+\t\t\t\t\tthrow new InvalidInputException(\"Ctrl-Z\"/*nonNLS*/);\r"]}], "num": 44390}
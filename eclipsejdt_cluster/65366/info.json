{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ea0700b5ed7958b9382890f72a8eb34", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ca9237abbc08b7b88d253c14f3ea380", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 47, "signatureBeforeChange": "  \tprivate WrapPolicy getWrapPolicy(int wrappingOption, float penaltyMultiplier, boolean isFirst, ASTNode parentNode)", "signatureAfterChange": "  \tprivate WrapPolicy getWrapPolicy(int wrappingOption, float penaltyMultiplier, boolean isFirst, ASTNode parentNode)", "diff": ["+\t\tWrapMode wrapMode = WrapMode.WHERE_NECESSARY;", "-\t\t\t\treturn null;", "+\t\t\t\twrapMode = WrapMode.DISABLED;", "+\t\t\t\tbreak;", "-\t\tint topPriorityGroupEnd = isTopPriority ? this.wrapGroupEnd : -1;", "+\t\tif (isTopPriority)", "+\t\t\twrapMode = WrapMode.TOP_PRIORITY;", "-\t\treturn new WrapPolicy(extraIndent, this.wrapParentIndex, this.currentDepth, penaltyMultiplier, isFirst,", "-\t\t\t\tindentOnColumn, topPriorityGroupEnd, false);", "+\t\treturn new WrapPolicy(wrapMode, this.wrapParentIndex, this.wrapGroupEnd, extraIndent, this.currentDepth,", "+\t\t\t\tpenaltyMultiplier, isFirst, indentOnColumn);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6397ebba84080c04a848ce65ac872710", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "f0876a2c26cb4231ffe7dc0126e9ac775a1337ba", "commitAfterChange": "0f841a0360389f0f91aef636ca6531276c4a074d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static CompilationUnit convertCompilationUnit( \t\tint level, \t\torg.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnitDeclaration, \t\tchar[] source, \t\tMap options, \t\tboolean isResolved, \t\torg.eclipse.jdt.internal.core.CompilationUnit workingCopy, \t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic static CompilationUnit convertCompilationUnit( \t\tint level, \t\torg.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnitDeclaration, \t\tchar[] source, \t\tMap options, \t\tboolean isResolved, \t\torg.eclipse.jdt.internal.core.CompilationUnit workingCopy, \t\tint reconcileFlags, \t\tIProgressMonitor monitor)", "diff": ["+\t\tint reconcileFlags,", "-\t\t", "+", "-\t\tBindingResolver resolver = isResolved ? new DefaultBindingResolver(compilationUnitDeclaration.scope, workingCopy.owner, new DefaultBindingResolver.BindingTables()) : new BindingResolver();", "+\t\tBindingResolver resolver = null;", "+\t\tif (isResolved) {", "+\t\t\tresolver = new DefaultBindingResolver(compilationUnitDeclaration.scope, workingCopy.owner, new DefaultBindingResolver.BindingTables(), false);", "+\t\t\tast.setFlag(AST.RESOLVED_BINDINGS);", "+\t\t} else {", "+\t\t\tresolver = new BindingResolver();", "+\t\t}", "+\t\tast.setFlag(reconcileFlags);", "-\t", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7548af3f0587357e3dc581246522a3e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/DefaultProblem.java", "commitBeforeChange": "bdbfa5b74cd31bcdfeab2fc6974ba4e96597b32a", "commitAfterChange": "e74abb558d667117356c6f54df2ab5f4c2e65105", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public String errorReportSource(char[] unitSource)", "signatureAfterChange": " public String errorReportSource(char[] unitSource, int tagBits)", "diff": ["+}", "+public String errorReportSource(char[] unitSource, int tagBits) {", "-\tStringBuffer errorBuffer = new StringBuffer(\" \"); //$NON-NLS-1$", "-\terrorBuffer.append(Messages.bind(Messages.problem_atLine, String.valueOf(this.line))); ", "-\terrorBuffer.append(Util.LINE_SEPARATOR).append(\"\\t\"); //$NON-NLS-1$", "+\tStringBuffer errorBuffer = new StringBuffer();", "+\tif ((tagBits & Main.Logger.EMACS) == 0) {", "+\t\terrorBuffer.append(' ').append(Messages.bind(Messages.problem_atLine, String.valueOf(this.line))); ", "+\t\terrorBuffer.append(Util.LINE_SEPARATOR);", "+\t}", "+\terrorBuffer.append('\\t');"]}], "num": 65366}
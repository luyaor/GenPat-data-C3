{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af5b0384090a61de66c82d31002eceb6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e2234a16ba9431d4e1016a06c87053d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRootInfo.java", "commitBeforeChange": "c09e95424aee3fa583749f78830353a794128164", "commitAfterChange": "c7b59a28aedb68eaaa1a4a3fd7cd0012ca10b3f9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " private Object[] computeFolderNonJavaResources(JavaProject project, IContainer folder, char[][] exclusionPatterns) throws JavaModelException", "signatureAfterChange": " static Object[] computeFolderNonJavaResources(JavaProject project, IContainer folder, char[][] exclusionPatterns) throws JavaModelException", "diff": ["-private Object[] computeFolderNonJavaResources(JavaProject project, IContainer folder, char[][] exclusionPatterns) throws JavaModelException {", "+static Object[] computeFolderNonJavaResources(JavaProject project, IContainer folder, char[][] exclusionPatterns) throws JavaModelException {", "-\t\tfor (int i = 0, max = members.length; i < max; i++) {", "+\t\tnextResource: for (int i = 0, max = members.length; i < max; i++) {", "-\t\t\tif (Util.isExcluded(member, exclusionPatterns)) continue;", "-\t\t\tif (member.getType() == IResource.FILE) {", "-\t\t\t\tString fileName = member.getName();", "-\t\t\t\tif (!Util.isValidCompilationUnitName(fileName) && !Util.isValidClassFileName(fileName)) {", "+\t\t\tswitch (member.getType()) {", "+\t\t\t\tcase IResource.FILE :", "+\t\t\t\t\tString fileName = member.getName();", "+\t\t\t\t\tif (Util.isValidCompilationUnitName(fileName) && !Util.isExcluded(member, exclusionPatterns)) ", "+\t\t\t\t\t\tcontinue nextResource;", "+\t\t\t\t\tif (Util.isValidClassFileName(fileName)) ", "+\t\t\t\t\t\tcontinue nextResource;", "-\t\t\t\t\tif (project.findPackageFragmentRoot0(member.getFullPath()) == null) {", "-\t\t\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "-\t\t\t\t\t\t\t// resize", "-\t\t\t\t\t\t\tSystem.arraycopy(nonJavaResources, 0, (nonJavaResources = new IResource[nonJavaResourcesCounter * 2]), 0, nonJavaResourcesCounter);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = member;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else if (member.getType() == IResource.FOLDER) {", "-\t\t\t\tif (!Util.isValidFolderNameForPackage(member.getName())) {", "-\t\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "-\t\t\t\t\t\t// resize", "-\t\t\t\t\t\tSystem.arraycopy(nonJavaResources, 0, (nonJavaResources = new IResource[nonJavaResourcesCounter * 2]), 0, nonJavaResourcesCounter);", "-\t\t\t\t\t}", "-\t\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = member;", "-\t\t\t\t}", "+\t\t\t\t\tif (Util.isArchiveFileName(fileName) && project.findPackageFragmentRoot0(member.getFullPath()) != null) ", "+\t\t\t\t\t\tcontinue nextResource;", "+\t\t\t\t\tbreak;", "+", "+\t\t\t\tcase IResource.FOLDER :", "+\t\t\t\t\tif (Util.isValidFolderNameForPackage(member.getName()) && !Util.isExcluded(member, exclusionPatterns)) ", "+\t\t\t\t\t\tcontinue nextResource;", "+\t\t\t\t\tbreak;", "+\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "+\t\t\t\t// resize", "+\t\t\t\tSystem.arraycopy(nonJavaResources, 0, (nonJavaResources = new IResource[nonJavaResourcesCounter * 2]), 0, nonJavaResourcesCounter);", "+\t\t\t}", "+\t\t\tnonJavaResources[nonJavaResourcesCounter++] = member;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2427449b1f97d85132ef678f3e6746f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRootInfo.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " static Object[] computeFolderNonJavaResources(JavaProject project, IContainer folder, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "signatureAfterChange": " static Object[] computeFolderNonJavaResources(JavaProject project, IContainer folder, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "diff": ["-\t\tnextResource: for (int i = 0, max = members.length; i < max; i++) {", "-\t\t\tIResource member = members[i];", "-\t\t\tswitch (member.getType()) {", "-\t\t\t\tcase IResource.FILE :", "-\t\t\t\t\tString fileName = member.getName();", "+\t\tint length = members.length;", "+\t\tif (length > 0) {", "+\t\t\tString sourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\tString complianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\tnextResource: for (int i = 0; i < length; i++) {", "+\t\t\t\tIResource member = members[i];", "+\t\t\t\tswitch (member.getType()) {", "+\t\t\t\t\tcase IResource.FILE :", "+\t\t\t\t\t\tString fileName = member.getName();", "-\t\t\t\t\t// ignore .java files that are not excluded", "-\t\t\t\t\tif (Util.isValidCompilationUnitName(fileName) && !Util.isExcluded(member, inclusionPatterns, exclusionPatterns)) ", "-\t\t\t\t\t\tcontinue nextResource;", "-\t\t\t\t\t// ignore .class files", "-\t\t\t\t\tif (Util.isValidClassFileName(fileName)) ", "-\t\t\t\t\t\tcontinue nextResource;", "-\t\t\t\t\t// ignore .zip or .jar file on classpath", "-\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(fileName) && isClasspathEntry(member.getFullPath(), classpath)) ", "-\t\t\t\t\t\tcontinue nextResource;", "-\t\t\t\t\tbreak;", "+\t\t\t\t\t\t// ignore .java files that are not excluded", "+\t\t\t\t\t\tif (Util.isValidCompilationUnitName(fileName, sourceLevel, complianceLevel) && !Util.isExcluded(member, inclusionPatterns, exclusionPatterns)) ", "+\t\t\t\t\t\t\tcontinue nextResource;", "+\t\t\t\t\t\t// ignore .class files", "+\t\t\t\t\t\tif (Util.isValidClassFileName(fileName, sourceLevel, complianceLevel)) ", "+\t\t\t\t\t\t\tcontinue nextResource;", "+\t\t\t\t\t\t// ignore .zip or .jar file on classpath", "+\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(fileName) && isClasspathEntry(member.getFullPath(), classpath)) ", "+\t\t\t\t\t\t\tcontinue nextResource;", "+\t\t\t\t\t\tbreak;", "-\t\t\t\tcase IResource.FOLDER :", "-\t\t\t\t\t// ignore valid packages or excluded folders that correspond to a nested pkg fragment root", "-\t\t\t\t\tif (Util.isValidFolderNameForPackage(member.getName())", "-\t\t\t\t\t\t\t&& (!Util.isExcluded(member, inclusionPatterns, exclusionPatterns) ", "-\t\t\t\t\t\t\t\t|| isClasspathEntry(member.getFullPath(), classpath)))", "-\t\t\t\t\t\tcontinue nextResource;", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "-\t\t\t\t// resize", "-\t\t\t\tSystem.arraycopy(nonJavaResources, 0, (nonJavaResources = new IResource[nonJavaResourcesCounter * 2]), 0, nonJavaResourcesCounter);", "-\t\t\t}", "-\t\t\tnonJavaResources[nonJavaResourcesCounter++] = member;", "-", "+\t\t\t\t\tcase IResource.FOLDER :", "+\t\t\t\t\t\t// ignore valid packages or excluded folders that correspond to a nested pkg fragment root", "+\t\t\t\t\t\tif (Util.isValidFolderNameForPackage(member.getName(), sourceLevel, complianceLevel)", "+\t\t\t\t\t\t\t\t&& (!Util.isExcluded(member, inclusionPatterns, exclusionPatterns) ", "+\t\t\t\t\t\t\t\t\t\t|| isClasspathEntry(member.getFullPath(), classpath)))", "+\t\t\t\t\t\t\tcontinue nextResource;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "+\t\t\t\t\t// resize", "+\t\t\t\t\tSystem.arraycopy(nonJavaResources, 0, (nonJavaResources = new IResource[nonJavaResourcesCounter * 2]), 0, nonJavaResourcesCounter);", "+\t\t\t\t}", "+\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = member;", "+\t\t\t}\t"]}], "num": 60115}
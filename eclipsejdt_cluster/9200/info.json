{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3fa3fca985da6dc62a6ee1111950e762", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b596b5c4a09394b7694822f0c9292fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 327, "methodNumberAfterChange": 327, "signatureBeforeChange": " public void test177()", "signatureAfterChange": " public void test177()", "diff": ["-\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) { // see test187()", "+\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_6) { // see test187()", "-\t} else if (new CompilerOptions(getCompilerOptions()).sourceLevel == ClassFileConstants.JDK1_6) {", "-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"import java.util.*;\\n\" +", "-\t\t\t\t\"interface I { I foo(Collection<?> c); }\\n\" +", "-\t\t\t\t\"class A extends LinkedHashMap {\\n\" +", "-\t\t\t\t\"\tpublic A foo(Collection c) { return this; }\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class X extends A implements I {\\n\" +", "-\t\t\t\t\"\t@Override public X foo(Collection<?> c) { return this; }\\n\" +", "-\t\t\t\t\"}\"", "-\t\t\t},", "-\t\t\t\"\"", "-\t\t);", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 3)\\n\" +", "-\t\t\t\"\tclass A extends LinkedHashMap {\\n\" +", "-\t\t\t\"\t      ^\\n\" +", "-\t\t\t\"The serializable class A does not declare a static final serialVersionUID field of type long\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 3)\\n\" +", "-\t\t\t\"\tclass A extends LinkedHashMap {\\n\" +", "-\t\t\t\"\t                ^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"LinkedHashMap is a raw type. References to generic type LinkedHashMap<K,V> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. WARNING in X.java (at line 4)\\n\" +", "-\t\t\t\"\tpublic A foo(Collection c) { return this; }\\n\" +", "-\t\t\t\"\t             ^^^^^^^^^^\\n\" +", "-\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. WARNING in X.java (at line 6)\\n\" +", "-\t\t\t\"\tclass X extends A implements I {\\n\" +", "-\t\t\t\"\t      ^\\n\" +", "-\t\t\t\"The serializable class X does not declare a static final serialVersionUID field of type long\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in X.java (at line 7)\\n\" +", "-\t\t\t\"\t@Override public X foo(Collection<?> c) { return this; }\\n\" +", "-\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"The method foo(Collection<?>) of type X must override a superclass method\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass A extends LinkedHashMap {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"The serializable class A does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass A extends LinkedHashMap {\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"LinkedHashMap is a raw type. References to generic type LinkedHashMap<K,V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tpublic A foo(Collection c) { return this; }\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tclass X extends A implements I {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"Name clash: The method foo(Collection<?>) of type I has the same erasure as foo(Collection) of type A but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tclass X extends A implements I {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"The serializable class X does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\t@Override public X foo(Collection<?> c) { return this; }\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(Collection<?>) of type X has the same erasure as foo(Collection) of type A but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\t@Override public X foo(Collection<?> c) { return this; }\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The method foo(Collection<?>) of type X must override a superclass method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e6de839e43a96fefe00a3aaad3c1697", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 1210, "methodNumberAfterChange": 1210, "signatureBeforeChange": " public void test1181()", "signatureAfterChange": " public void test1181()", "diff": ["-\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return;", "-\t\t\t\"\\n\" +", "-\t\t\t\"\\n\" +", "-\t\t\t\"\\n\" +", "-\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\"\t}\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {}\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "-\t\t\"\tpublic static <S, T extends Comparable<S>, R extends S & T> R max(T arg1, S arg2) {\\n\" +", "-\t\t\"\t                                                         ^\\n\" +", "-\t\t\"Cannot specify any additional bound T when first bound is a type parameter\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in X.java (at line 2)\\n\" +", "-\t\t\"\tpublic static <S, T extends Comparable<S>, R extends S & T> R max(T arg1, S arg2) {\\n\" +", "-\t\t\"\t                                                              ^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. WARNING in X.java (at line 3)\\n\" +", "-\t\t\"\treturn (R) ((arg1.compareTo(arg2) > 0) ? arg1 : arg2);\\n\" +", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked cast from Object to R\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. ERROR in X.java (at line 6)\\n\" +", "-\t\t\"\tpublic static <T extends Comparable<S>, S, R extends S & Comparable<S>> R max(T arg1, S arg2) {\\n\" +", "-\t\t\"\t                                                         ^^^^^^^^^^\\n\" +", "-\t\t\"Cannot specify any additional bound Comparable<S> when first bound is a type parameter\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. ERROR in X.java (at line 6)\\n\" +", "-\t\t\"\tpublic static <T extends Comparable<S>, S, R extends S & Comparable<S>> R max(T arg1, S arg2) {\\n\" +", "-\t\t\"\t                                                                          ^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"6. WARNING in X.java (at line 7)\\n\" +", "-\t\t\"\treturn (R) ((arg1.compareTo(arg2) > 0) ? arg1 : arg2);\\n\" +", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked cast from Object to R\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"7. WARNING in X.java (at line 11)\\n\" +", "-\t\t\"\treturn (R) ((arg1.compareTo(arg2) > 0) ? arg1 : arg2);\\n\" +", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked cast from Object to R\\n\" +", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tpublic static <S, T extends Comparable<S>, R extends S & T> R max(T arg1, S arg2) {\\n\" + ", "+\t\t\"\t                                                         ^\\n\" + ", "+\t\t\"Cannot specify any additional bound T when first bound is a type parameter\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tpublic static <S, T extends Comparable<S>, R extends S & T> R max(T arg1, S arg2) {\\n\" + ", "+\t\t\"\t                                                              ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\"\treturn (R) ((arg1.compareTo(arg2) > 0) ? arg1 : arg2);\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to R\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tpublic static <T extends Comparable<S>, S, R extends S & Comparable<S>> R max(T arg1, S arg2) {\\n\" + ", "+\t\t\"\t                                                         ^^^^^^^^^^\\n\" + ", "+\t\t\"Cannot specify any additional bound Comparable<S> when first bound is a type parameter\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tpublic static <T extends Comparable<S>, S, R extends S & Comparable<S>> R max(T arg1, S arg2) {\\n\" + ", "+\t\t\"\t                                                                          ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\"\treturn (R) ((arg1.compareTo(arg2) > 0) ? arg1 : arg2);\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to R\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\tpublic static <T extends Comparable<S>, S, R extends Comparable<S>> R max(T arg1, S arg2) {\\n\" + ", "+\t\t\"\t                                                                      ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"8. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\treturn (R) ((arg1.compareTo(arg2) > 0) ? arg1 : arg2);\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to R\\n\" + ", "+\t\t\"----------\\n\"", "+\t);", "+/*", "+X.java:2: a type variable may not be followed by other bounds", "+        public static <S, T extends Comparable<S>, R extends S & T> R max(T arg1, S arg2) {", "+                                                                 ^", "+X.java:5: a type variable may not be followed by other bounds", "+        public static <T extends Comparable<S>, S, R extends S & Comparable<S>>", "+R max(T arg1, S arg2) {", "+                                                                           ^", "+X.java:5: name clash: <T#1,S#2,R#3>max(T#1,S#2) and <S#4,T#5,R#6>max(T#5,S#4) have the same erasure", "+        public static <T extends Comparable<S>, S, R extends S & Comparable<S>>", "+R max(T arg1, S arg2) {", "+", "+  ^", "+  where T#1,S#2,R#3,S#4,T#5,R#6 are type-variables:", "+    T#1 extends Comparable<S#2> declared in method <T#1,S#2,R#3>max(T#1,S#2)", "+    S#2 extends Object declared in method <T#1,S#2,R#3>max(T#1,S#2)", "+    R#3 extends S#2 declared in method <T#1,S#2,R#3>max(T#1,S#2)", "+    S#4 extends Object declared in method <S#4,T#5,R#6>max(T#5,S#4)", "+    T#5 extends Comparable<S#4> declared in method <S#4,T#5,R#6>max(T#5,S#4)", "+    R#6 extends S#4 declared in method <S#4,T#5,R#6>max(T#5,S#4)", "+X.java:8: name clash: <T#1,S#2,R#3>max(T#1,S#2) and <S#4,T#5,R#6>max(T#5,S#4) have the same erasure", "+        public static <T extends Comparable<S>, S, R extends Comparable<S>> R max(T arg1, S arg2) {", "+                                                                              ^", "+  where T#1,S#2,R#3,S#4,T#5,R#6 are type-variables:", "+    T#1 extends Comparable<S#2> declared in method <T#1,S#2,R#3>max(T#1,S#2)", "+    S#2 extends Object declared in method <T#1,S#2,R#3>max(T#1,S#2)", "+    R#3 extends Comparable<S#2> declared in method <T#1,S#2,R#3>max(T#1,S#2)", "+    S#4 extends Object declared in method <S#4,T#5,R#6>max(T#5,S#4)", "+    T#5 extends Comparable<S#4> declared in method <S#4,T#5,R#6>max(T#5,S#4)", "+    R#6 extends S#4 declared in method <S#4,T#5,R#6>max(T#5,S#4)", "+X.java:3: warning: [unchecked] unchecked cast", "+                return (R) ((arg1.compareTo(arg2) > 0) ? arg1 : arg2);", "+                           ^", "+  required: R", "+  found:    Object", "+  where R,S,T are type-variables:", "+    R extends S declared in method <S,T,R>max(T,S)", "+    S extends Object declared in method <S,T,R>max(T,S)", "+    T extends Comparable<S> declared in method <S,T,R>max(T,S)", "+X.java:6: warning: [unchecked] unchecked cast", "+                return (R) ((arg1.compareTo(arg2) > 0) ? arg1 : arg2);", "+                           ^", "+  required: R", "+  found:    Object", "+  where R,T,S are type-variables:", "+    R extends S declared in method <T,S,R>max(T,S)", "+    T extends Comparable<S> declared in method <T,S,R>max(T,S)", "+    S extends Object declared in method <T,S,R>max(T,S)", "+X.java:9: warning: [unchecked] unchecked cast", "+                return (R) ((arg1.compareTo(arg2) > 0) ? arg1 : arg2);", "+                           ^", "+  required: R", "+  found:    Object", "+  where R,T,S are type-variables:", "+    R extends Comparable<S> declared in method <T,S,R>max(T,S)", "+    T extends Comparable<S> declared in method <T,S,R>max(T,S)", "+    S extends Object declared in method <T,S,R>max(T,S)", "+4 errors", "+3 warnings", "+ */"]}], "num": 9200}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c2d0d9c63ca6e13e052d2601f3bf039f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6c1c137c21d6fe263ed87bb9a9ce54f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java", "commitBeforeChange": "4cd099cc1355b38c56182aa83f26686584f3ab85", "commitAfterChange": "dec08ba5b189563fc3fe0620826f7ae1c7797941", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "\r \tpublic String toString()", "signatureAfterChange": "\r \tpublic final String toString()", "diff": ["-\tpublic String toString() {\r", "+\tpublic final String toString() {\r", "+\t\t// allocate a buffer that is large enough to hold an average compilation unit\r", "+\t\tStringBuffer buffer = new StringBuffer(6000);\r", "+\t\tint p = buffer.length();\r", "+\t\ttry {\r", "+\t\t\tappendDebugString(buffer);\r", "+\t\t} catch (RuntimeException e) {\r", "+\t\t\t// since debugger sometimes call toString methods, problems can easily happen when\r", "+\t\t\t// toString is called on an instance that is being initialized\r", "+\t\t\tbuffer.setLength(p);\r", "+\t\t\tbuffer.append(\"!\");\r", "+\t\t\tbuffer.append(standardToString());\r", "+\t\t}\r", "+\t\t// convert to a string, but lose the extra space in the string buffer by copying\r", "+\t\treturn new String(buffer.toString());\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c76fe535f885a3f4ebbdd92d0d3e6400", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "27e347b6c930838a35dee8fcbff4b393aa0d8dde", "commitAfterChange": "32efda4ca470a8ccf71ee2d08eca76774c3b3fec", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " private static boolean equals(String a, String b)", "signatureAfterChange": " private static boolean equals(String a, String b)", "diff": ["-\tint length = aBuffer.length();", "-\tif (length != bBuffer.length()) {", "+\tint length = aBuffer.length(), bLength;", "+\tboolean result = true;", "+\tif (length != (bLength = bBuffer.length())) {", "-\t\treturn false;", "+\t\tif (length > bLength) {", "+\t\t\tlength = bLength;", "+\t\t}", "+\t\tresult = false;", "-\t\t\t\t\t+ \" a: ...\" + aBuffer.substring(beforeStart, beforeEnd) ", "+\t\t\t\t\t+ \"\\na: ...\" + aBuffer.substring(beforeStart, beforeEnd) ", "-\t\t\t\t\t+ \" b: ...\" + bBuffer.substring(beforeStart, beforeEnd) ", "+\t\t\t\t\t+ \"\\nb: ...\" + bBuffer.substring(beforeStart, beforeEnd) ", "-\treturn true;", "+\treturn result; // may be false if one of the strings equals the beginning", "+\t               // of the other one, which is longer anyway"]}], "num": 6855}
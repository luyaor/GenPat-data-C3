{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e844c4acac9a676e9a52339a1861419", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ad2a69da8754c8db50df9de88fee5fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "4dbfc96b81c8ea986466921f071c4e6377836a2c", "commitAfterChange": "b7f468690a70977c68b74d1aeee81bdba359d238", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": " public static void flushDirectoryContent(File dir)", "signatureAfterChange": " public static void flushDirectoryContent(File dir)", "diff": ["-\tif (dir.isDirectory()) {", "-\t\tString[] files = dir.list();", "-\t\tif (files == null) return;", "-\t\tfor (int i = 0, max = files.length; i < max; i++) {", "-\t\t\tFile current = new File(dir, files[i]);", "-\t\t\tif (current.isDirectory()) {", "-\t\t\t\tflushDirectoryContent(current);", "-\t\t\t}", "-\t\t\tif (!current.delete()) ", "-\t\t\t\tSystem.err.println(\"Could not delete \" + current.getName());", "-\t\t}", "+\tFile[] files = dir.listFiles();", "+\tif (files == null) return;", "+\tfor (int i = 0, max = files.length; i < max; i++) {", "+\t\tdelete(files[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "146a3e471adc83c610f9ade52d26cbc6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "874e2c41609c64af417834df9af2e898d8dcf37a", "commitAfterChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static int getIrritant(int problemID)", "signatureAfterChange": " public static int getIrritant(int problemID)", "diff": ["-\t\tcase IProblem.NullableFieldReference:", "-\t\tcase IProblem.RedundantNullCheckOnNonNullExpression:", "-\t\tcase IProblem.NonNullExpressionComparisonYieldsFalse:", "-\t\tcase IProblem.NonNullMessageSendComparisonYieldsFalse:", "-\t\tcase IProblem.RedundantNullCheckOnNonNullSpecdField:", "-\t\tcase IProblem.NonNullSpecdFieldComparisonYieldsFalse:", "-\t\tcase IProblem.UninitializedNonNullField:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44fd4c0dff1af7e5d85ff93a6b995735", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "2afd622177d6128cddce991d666981d185adf1ee", "commitAfterChange": "1de67e52d267c2abc8dc8e6e69930068fb43b448", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public TypeBinding computeBoxingType(TypeBinding type)", "signatureAfterChange": " public TypeBinding computeBoxingType(TypeBinding type)", "diff": ["-\t\tcase TypeIds.T_JavaLangVoid :", "-\t\t\treturn VoidBinding;", "-\t\tcase TypeIds.T_void :", "-\t\t\tboxedType = getType(JAVA_LANG_VOID);", "-\t\t\tif (boxedType != null) return boxedType;", "-\t\t\treturn new ProblemReferenceBinding(\tJAVA_LANG_VOID, NotFound);\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "515cf4261127e06f457dda8e418571cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Util.java", "commitBeforeChange": "fda0d2ec1e24f98b48a39fc410a65aaa372375fb", "commitAfterChange": "a6fc8aa8054ff029d4a044b3364141f4551124c8", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tpublic static final boolean isExcluded(IJavaElement element)", "signatureAfterChange": " \tpublic static final boolean isExcluded(IJavaElement element)", "diff": ["-\t * Returns whether the given java element is exluded from its classpath.\r\t */", "+\t * All other types of element are considered non-excluded.\r\t */", "-\t\t\tcase IJavaElement.JAVA_PROJECT:", "-\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:", "-\t\t\tcase IJavaElement.CLASS_FILE:", "-\t\t\t\t// projects, pkg fragment root and class files are never excluded", "-\t\t\t\treturn false;", "-\t\t\t\t// everything in a compilation unit", "-\t\t\t\tIJavaElement cu = element.getAncestor(IJavaElement.COMPILATION_UNIT);", "-\t\t\t\tif (cu == null) return false;", "-\t\t\t\treturn isExcluded(cu);", "+\t\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56ed4a043f7db318b23e6d064203f149", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "3f131825dfbebcd2d9846517fd8419ae56311784", "commitAfterChange": "ede87229fe271e061ecd80820c468f7956351f61", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static int getIrritant(int problemID)", "signatureAfterChange": " public static int getIrritant(int problemID)", "diff": ["-", "-\t\tcase IProblem.UnclosedCloseable:", "-\t\tcase IProblem.UnclosedCloseableAtExit:", "-\t\t\treturn CompilerOptions.UnclosedCloseable;", "-\t\tcase IProblem.PotentiallyUnclosedCloseable:", "-\t\tcase IProblem.PotentiallyUnclosedCloseableAtExit:", "-\t\t\treturn CompilerOptions.PotentiallyUnclosedCloseable;", "-\t\tcase IProblem.ExplicitlyClosedAutoCloseable:", "-\t\t\treturn CompilerOptions.ExplicitlyClosedAutoCloseable;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "719a18348ff41269dd8298a1c26532db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "66b6cf62f65cf0a44b83a254dfc63de882153874", "commitAfterChange": "ef52d30fd1653a11f5836c0398f61f103759e020", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": " public void generateClassLiteralAccessForType(TypeBinding accessedType, FieldBinding syntheticFieldBinding)", "signatureAfterChange": " public void generateClassLiteralAccessForType(TypeBinding accessedType, FieldBinding syntheticFieldBinding)", "diff": ["+\tthis.ldc(accessedType == BaseTypes.NullBinding ? \"java.lang.Object\" : String.valueOf(accessedType.constantPoolName()).replace('/', '.')); //$NON-NLS-1$", "+\tthis.invokeClassForName();", "+", "+\t/* See https://bugs.eclipse.org/bugs/show_bug.cgi?id=37565", "-", "+\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a48477c8808bdd09f30446dee1f0631", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "6180586710a957df9f07a8a5503c93267544711b", "commitAfterChange": "2bf8d876e4d66bd0fa9172a177289e82abf5e2a4", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic void run()", "signatureAfterChange": "\r \tpublic void run()", "diff": ["-\t\t\t\t\tSystem.out.println(\"-> executing (\"+ Thread.currentThread()+\"): \" + job); //$NON-NLS-1$//$NON-NLS-2$\r", "-\t\t\t\t\tSystem.out.println(\"\\t\" + awaitingJobsCount() + \" awaiting jobs.\");\t//$NON-NLS-1$ //$NON-NLS-2$\r", "+\t\t\t\t\tJobManager.log(awaitingJobsCount() + \" awaiting jobs\"); //$NON-NLS-1$\r", "+\t\t\t\t\tJobManager.log(\"STARTING to execute - \" + job); //$NON-NLS-1$\r", "+\t\t\t\t\tif (VERBOSE) {\r", "+\t\t\t\t\t\tJobManager.log(\"DONE executing - \" + job); //$NON-NLS-1$\r", "+\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "937c08b829822046ffd6f8503e1deed1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateTypeOperation.java", "commitBeforeChange": "1b9f72549c0f4a9738e1600d1d1680441854347a", "commitAfterChange": "047baefb7f698ce989354da49e0d4ba47d07fa76", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected IJavaElement generateResultHandle()", "signatureAfterChange": " protected IJavaElement generateResultHandle()", "diff": ["-\t\tcase IJavaElement.FIELD:", "-\t\tcase IJavaElement.INITIALIZER:", "-\t\tcase IJavaElement.METHOD:", "-\t\t\treturn ((IMember)parent).getType(fDOMNode.getName(), 1); // TODO (jerome) compute occurenceCount", "+\t\t// Note: creating local/anonymous type is not supported "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3800c6e5d21e7e99b03b7253c39bed4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "commitAfterChange": "8f130374b1740d04a2a1a32967cf4d9130b4bd12", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static int getIrritant(int problemID)", "signatureAfterChange": " public static int getIrritant(int problemID)", "diff": ["-\t\tcase IProblem.NullFieldReference:", "-\t\tcase IProblem.PotentialNullFieldReference:", "-\t\tcase IProblem.RedundantFieldNullAssignment:", "-\t\tcase IProblem.NullFieldInstanceofYieldsFalse:", "-\t\tcase IProblem.RedundantNullCheckOnNonNullField:", "-\t\tcase IProblem.RedundantNullCheckOnNullField:", "-\t\tcase IProblem.NonNullFieldComparisonYieldsFalse:", "-\t\tcase IProblem.NullFieldComparisonYieldsFalse:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4af579cca3b649929c4c4c67448449c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeMirrorImpl.java", "commitBeforeChange": "c62a418f35a40981606d85e97ecee9f9596fa8d0", "commitAfterChange": "4c8a3ba34c720dda98e8d56ba71f0361efbe740b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@Override \tpublic TypeKind getKind()", "signatureAfterChange": " \t@Override \tpublic TypeKind getKind()", "diff": ["-\t\t", "+\t\t// case Binding.METHOD: handled by ExecutableTypeImpl", "+\t\t// case Binding.PACKAGE: handled by NoTypeImpl", "+\t\t// case Binding.WILDCARD_TYPE: handled by WildcardTypeImpl", "+\t\t// case Binding.ARRAY_TYPE: handled by ArrayTypeImpl", "-\t\tcase Binding.METHOD:", "-\t\t\tthrow new IllegalArgumentException(\"Invalid binding kind: \" + _binding.kind()); //$NON-NLS-1$", "-\t\tcase Binding.PACKAGE:", "-\t\t\treturn TypeKind.PACKAGE;", "-\t\tcase Binding.ARRAY_TYPE:", "-\t\t\treturn TypeKind.ARRAY;", "-\t\tcase Binding.WILDCARD_TYPE:", "-\t\t\treturn TypeKind.WILDCARD;", "-\t\t\tthrow new UnsupportedOperationException(\"NYI\"); //$NON-NLS-1$", "+\t\t\tthrow new IllegalArgumentException(\"Invalid binding kind: \" + _binding.kind()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ace07986f75d76639a05cb290be02873", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "6180586710a957df9f07a8a5503c93267544711b", "commitAfterChange": "2bf8d876e4d66bd0fa9172a177289e82abf5e2a4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public void checkIndexConsistency()", "signatureAfterChange": "\r public void checkIndexConsistency()", "diff": ["-\tif (VERBOSE) System.out.println(\"STARTING (\"+ Thread.currentThread()+\") - ensuring consistency\"); //$NON-NLS-1$//$NON-NLS-2$\r", "+\tif (VERBOSE) JobManager.log(\"STARTING ensuring consistency\"); //$NON-NLS-1$\r", "-\t\tif (VERBOSE) System.out.println(\"DONE (\"+ Thread.currentThread()+\") - ensuring consistency\"); //$NON-NLS-1$//$NON-NLS-2$\r", "+\t\tif (VERBOSE) JobManager.log(\"DONE ensuring consistency\"); //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b91f3ded13ddb188671cbc20cb32b54d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "3fd9ba7770cab33e59f381d90c14d9b1a2469d1c", "commitAfterChange": "051572f99b6a73010e844cbf76e196d479c1689d", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 26, "signatureBeforeChange": " public static Object getExternalTarget(IPath path, boolean checkResourceExistence)", "signatureAfterChange": " public static Object getExternalTarget(IPath path, boolean checkResourceExistence)", "diff": ["+ */", "-\t} else if (existingExternalFilesContains(externalFile)) {", "+\t} else if (isExternalFile(path)) {", "-\t} else {", "-\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {", "-\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [JavaModel.getTarget(...)] Checking existence of \" + path.toString()); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t}", "-\t\tif (externalFile.isFile()) { // isFile() checks for existence (it returns false if a directory)", "-\t\t\t// cache external file", "-\t\t\texistingExternalFilesAdd(externalFile);", "-\t\t\treturn externalFile;", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0d6014e0b5c3125552d1e15c85924f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "5f0d5b4535e0c623b3c96db43a68b516445fa24d", "commitAfterChange": "563d52051d17585100c8a026af647f623a05093f", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public static Object getTarget(IContainer container, IPath path, boolean checkResourceExistence)", "signatureAfterChange": " public static Object getTarget(IContainer container, IPath path, boolean checkResourceExistence)", "diff": ["+\treturn getTargetAsExternalFile(path, checkResourceExistence);\t", "+}", "-\treturn null;\t"]}], "num": 55705}
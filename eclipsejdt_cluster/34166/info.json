{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b74444863ddce5e0507336d9f2df804", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c826848127b30c1ff1d6a6227dee826", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void resolveStatements()", "signatureAfterChange": " \tpublic void resolveStatements()", "diff": ["-\t\tif (!CharOperation.equals(scope.enclosingSourceType().sourceName, selector)){", "-\t\t\tscope.problemReporter().missingReturnType(this);", "+\t\tif (!CharOperation.equals(this.scope.enclosingSourceType().sourceName, selector)){", "+\t\t\tthis.scope.problemReporter().missingReturnType(this);", "+\t\tif (this.typeParameters != null) {", "+\t\t\tfor (int i = 0, length = this.typeParameters.length; i < length; i++) {", "+\t\t\t\tthis.typeParameters[i].resolve(this.scope);", "+\t\t\t}", "+\t\t}", "+\t\t", "-\t\t\tscope.problemReporter().annotationTypeDeclarationCannotHaveConstructor(this);", "+\t\t\tthis.scope.problemReporter().annotationTypeDeclarationCannotHaveConstructor(this);", "-\t\t\t\t\t\tscope.problemReporter().cannotUseSuperInJavaLangObject(this.constructorCall);", "+\t\t\t\t\t\tthis.scope.problemReporter().cannotUseSuperInJavaLangObject(this.constructorCall);", "-\t\t\tscope.problemReporter().methodNeedBody(this);\t\t", "+\t\t\tthis.scope.problemReporter().methodNeedBody(this);\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca48a66d809194af8153ae6c41719658", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "8c67d56825136ce0d7026162576ad6997e930bdc", "commitAfterChange": "0b88f9a0bb1950edae0865a8658608a49edfc445", "methodNumberBeforeChange": 205, "methodNumberAfterChange": 205, "signatureBeforeChange": " protected void consumeInterfaceMethodDeclaration(boolean hasSemicolonBody)", "signatureAfterChange": " protected void consumeInterfaceMethodDeclaration(boolean hasSemicolonBody)", "diff": ["-\tif (isDefault) {", "-\t\tif (!this.parsingJava8Plus) {", "-\t\t\tproblemReporter().defaultMethodsNotBelow18(md);", "-\t\t} else if (hasSemicolonBody) {", "+\tboolean isStatic = (md.modifiers & ClassFileConstants.AccStatic) != 0;", "+\tboolean bodyAllowed = isDefault || isStatic;", "+\tif (this.parsingJava8Plus) {", "+\t\tif (bodyAllowed && hasSemicolonBody) {", "-\t\t\tproblemReporter().methodNeedBody(md);\t// grammar intentially allows illegal input to enable this error message", "-\t\t// report the problem and continue the parsing - narrowing the problem onto the method", "-\t\tif(!this.statementRecoveryActivated && !hasSemicolonBody) problemReporter().abstractMethodNeedingNoBody(md);", "+\t\tif (isDefault) problemReporter().defaultMethodsNotBelow18(md);", "+\t\tif (isStatic) problemReporter().staticInterfaceMethodsNotBelow18(md);", "+\t}", "+\tif (!bodyAllowed && !this.statementRecoveryActivated && !hasSemicolonBody) {", "+\t\tproblemReporter().abstractMethodNeedingNoBody(md);"]}], "num": 34166}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e113ea2117e6c5b921c148fd47c66747", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "366ed67e60c975b9b0e3d4932e40a775", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BuildpathTests.java", "commitBeforeChange": "f2ff53b9c5467491559775afe1992655f55a63fe", "commitAfterChange": "b38f964c0abc42b760a66a064dc1b2f95aca317b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void testExternalJarChange() throws JavaModelException, IOException", "signatureAfterChange": " public void testExternalJarChange() throws JavaModelException, IOException", "diff": ["+ */", "+public void testExternalJarChange() throws JavaModelException, IOException {", "+\t// setup", "+\tIPath projectPath = env.addProject(\"Project\"); //$NON-NLS-1$", "+\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());", "+\tIPath root = env.getPackageFragmentRootPath(projectPath, \"\"); //$NON-NLS-1$", "+\tIPath classTest = env.addClass(root, \"p\", \"X\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\"package p;\\n\"+ //$NON-NLS-1$", "+\t\t\"public class X {\\n\" + //$NON-NLS-1$", "+\t\t\"  void foo() {\\n\" + //$NON-NLS-1$", "+\t\t\"    new q.Y().bar();\\n\" + //$NON-NLS-1$", "+\t\t\"  }\\n\" + //$NON-NLS-1$", "+\t\t\"}\" //$NON-NLS-1$", "+\t);", "+\tString externalJar = Util.getOutputDirectory() + File.separator + \"test.jar\"; //$NON-NLS-1$", "+\tUtil.createJar(", "+\t\tnew String[] {", "+\t\t\t\"q/Y.java\", //$NON-NLS-1$", "+\t\t\t\"package q;\\n\" + //$NON-NLS-1$", "+\t\t\t\"public class Y {\\n\" + //$NON-NLS-1$", "+\t\t\t\"}\" //$NON-NLS-1$", "+\t\t},", "+\t\tnew HashMap(),", "+\t\texternalJar", "+\t);", "+\tlong lastModified = new java.io.File(externalJar).lastModified();", "+\tenv.addExternalJar(projectPath, externalJar);", "+\t", "+\t// build -> expecting problems", "+\tfullBuild();", "+\texpectingProblemsFor(", "+\t\tclassTest,", "+\t\t\"Problem : The method bar() is undefined for the type Y [ resource : </Project/p/X.java> range : <57,60> category : <50> severity : <2>]\"", "+\t);", "+\t", "+\ttry {", "+\t\tThread.sleep(1000);", "+\t} catch(InterruptedException e) {", "-\t */", "-\tpublic void testExternalJarChange() throws JavaModelException, IOException {", "-\t\t// setup", "-\t\tIPath projectPath = env.addProject(\"Project\"); //$NON-NLS-1$", "-\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());", "-\t\tIPath root = env.getPackageFragmentRootPath(projectPath, \"\"); //$NON-NLS-1$", "-\t\tIPath classTest = env.addClass(root, \"p\", \"X\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\"package p;\\n\"+ //$NON-NLS-1$", "-\t\t\t\"public class X {\\n\" + //$NON-NLS-1$", "-\t\t\t\"  void foo() {\\n\" + //$NON-NLS-1$", "-\t\t\t\"    new q.Y().bar();\\n\" + //$NON-NLS-1$", "+\t// fix jar", "+\tUtil.createJar(", "+\t\tnew String[] {", "+\t\t\t\"q/Y.java\", //$NON-NLS-1$", "+\t\t\t\"package q;\\n\" + //$NON-NLS-1$", "+\t\t\t\"public class Y {\\n\" + //$NON-NLS-1$", "+\t\t\t\"  public void bar() {\\n\" + //$NON-NLS-1$", "-\t\t);", "-\t\tString externalJar = Util.getOutputDirectory() + File.separator + \"test.jar\"; //$NON-NLS-1$", "-\t\tUtil.createJar(", "-\t\t\tnew String[] {", "-\t\t\t\t\"q/Y.java\", //$NON-NLS-1$", "-\t\t\t\t\"package q;\\n\" + //$NON-NLS-1$", "-\t\t\t\t\"public class Y {\\n\" + //$NON-NLS-1$", "-\t\t\t\t\"}\" //$NON-NLS-1$", "-\t\t\t},", "-\t\t\tnew HashMap(),", "-\t\t\texternalJar", "-\t\t);", "-\t\tlong lastModified = new java.io.File(externalJar).lastModified();", "-\t\tenv.addExternalJar(projectPath, externalJar);", "-\t\t", "-\t\t// build -> expecting problems", "-\t\tfullBuild();", "-\t\texpectingProblemsFor(classTest);", "-\t\t", "-\t\ttry {", "-\t\t\tThread.sleep(1000);", "-\t\t} catch(InterruptedException e) {", "-\t\t}", "-\t\t// fix jar", "-\t\tUtil.createJar(", "-\t\t\tnew String[] {", "-\t\t\t\t\"q/Y.java\", //$NON-NLS-1$", "-\t\t\t\t\"package q;\\n\" + //$NON-NLS-1$", "-\t\t\t\t\"public class Y {\\n\" + //$NON-NLS-1$", "-\t\t\t\t\"  public void bar() {\\n\" + //$NON-NLS-1$", "-\t\t\t\t\"  }\\n\" + //$NON-NLS-1$", "-\t\t\t\t\"}\" //$NON-NLS-1$", "-\t\t\t},", "-\t\t\tnew HashMap(),", "-\t\t\texternalJar", "-\t\t);", "-\t\t", "-\t\tnew java.io.File(externalJar).setLastModified(lastModified + 1000); // to be sure its different", "-\t\t// refresh project and rebuild -> expecting no problems", "-\t\tIJavaProject project = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot().getProject(\"Project\")); //$NON-NLS-1$", "-\t\tproject.getJavaModel().refreshExternalArchives(new IJavaElement[] {project}, null);", "-\t\tincrementalBuild();", "-\t\texpectingNoProblems();", "-\t\t", "-\t}", "+\t\t},", "+\t\tnew HashMap(),", "+\t\texternalJar", "+\t);", "+\tnew java.io.File(externalJar).setLastModified(lastModified + 1000); // to be sure its different", "+\t// refresh project and rebuild -> expecting no problems", "+\tIJavaProject project = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot().getProject(\"Project\")); //$NON-NLS-1$", "+\tproject.getJavaModel().refreshExternalArchives(new IJavaElement[] {project}, null);", "+\tincrementalBuild();", "+\texpectingNoProblems();", "+\t", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2909e0652165afea4dfdf7b83ce3e56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/ParticipantBuildTests.java", "commitBeforeChange": "d85ef445439a7932d1fe7c7dafa9bf16e2d2dd51", "commitAfterChange": "17f252997734a1fb1f7e356e8b4b3c43b6ed95af", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void testProcessAnnotationReferences2() throws JavaModelException", "signatureAfterChange": "  \tpublic void testProcessAnnotationQualifiedReferences() throws JavaModelException", "diff": ["+\tpublic void testProcessAnnotationQualifiedReferences() throws JavaModelException {", "+\t\tIPath projectPath = env.addProject(\"Project\", \"1.5\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());", "+\t\tenv.removePackageFragmentRoot(projectPath, \"\"); //$NON-NLS-1$", "+\t\tIPath root = env.addPackageFragmentRoot(projectPath, \"src\"); //$NON-NLS-1$", "+\t\tenv.setOutputFolder(projectPath, \"bin\"); //$NON-NLS-1$", "+", "+\t\tenv.addClass(root, \"p1\", \"Test\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\"package p1;\\n\" + //$NON-NLS-1$", "+\t\t\t\"@GeneratedAnnotation\\n\" + //$NON-NLS-1$", "+\t\t\t\"public class Test { public void method() { p1.p2.GeneratedType.method(); } }\\n\" //$NON-NLS-1$", "+\t\t\t);", "+", "+\t\tenv.addClass(root, \"p1\", \"GeneratedAnnotation\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\"package p1;\\n\" + //$NON-NLS-1$", "+\t\t\t\"@interface GeneratedAnnotation{}\\n\" //$NON-NLS-1$", "+\t\t\t);", "+", "+\t\t// install compilationParticipant", "+\t\tnew BuildTestParticipant() {", "+\t\t\tpublic boolean isAnnotationProcessor() {", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tpublic void processAnnotations(ICompilationParticipantResult[] files) {", "+\t\t\t\t// want to add a gen'ed source file that is referenced from the initial file to see if its recompiled", "+\t\t\t\tICompilationParticipantResult result = files[0];", "+\t\t\t\tIFile genedType = result.getFile().getProject().getFile(new Path(\"src/p1/p2/GeneratedType.java\")); //$NON-NLS-1$", "+\t\t\t\tif (genedType.exists()) return;", "+\t\t\t\ttry {", "+\t\t\t\t\tIFolder folder = (IFolder) genedType.getParent();", "+\t\t\t\t\tif(!folder.exists())", "+\t\t\t\t\t\tfolder.create(true, true, null);\t\t\t\t", "+\t\t\t\t\tgenedType.create(new ByteArrayInputStream(\"package p1.p2; public class GeneratedType { public static void method(){} }\".getBytes()), true, null); //$NON-NLS-1$", "+\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\te.printStackTrace();", "+\t\t\t\t}", "+\t\t\t\tresult.recordAddedGeneratedFiles(new IFile[] {genedType});", "+\t\t\t}", "+\t\t};", "+", "+\t\tfullBuild(projectPath);", "+\t\texpectingNoProblems();", "+\t}", "-", "-\tpublic void testProcessAnnotationReferences2() throws JavaModelException {", "-\t\tIPath projectPath = env.addProject(\"Project\", \"1.5\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());", "-\t\tenv.removePackageFragmentRoot(projectPath, \"\"); //$NON-NLS-1$", "-\t\tIPath root = env.addPackageFragmentRoot(projectPath, \"src\"); //$NON-NLS-1$", "-\t\tenv.setOutputFolder(projectPath, \"bin\"); //$NON-NLS-1$", "-", "-\t\tenv.addClass(root, \"\", \"Test\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\"@GeneratedAnnotation\\n\" + //$NON-NLS-1$", "-\t\t\t\"public class Test extends p.GeneratedType {}\\n\" //$NON-NLS-1$", "-\t\t\t);", "-", "-\t\tenv.addClass(root, \"\", \"GeneratedAnnotation\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\"@interface GeneratedAnnotation{}\\n\"", "-\t\t\t);", "-", "-\t\t// install compilationParticipant", "-\t\tnew BuildTestParticipant() {", "-\t\t\tpublic boolean isAnnotationProcessor() {", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tpublic void processAnnotations(ICompilationParticipantResult[] files) {", "-\t\t\t\t// want to add a gen'ed source file that is referenced from the initial file to see if its recompiled", "-\t\t\t\tICompilationParticipantResult result = files[0];", "-\t\t\t\tif (!\"Test.java\".equals(result.getFile().getName())) return; //$NON-NLS-1$", "-\t\t\t\tIFile genedType = null;", "-\t\t\t\ttry {", "-\t\t\t\t\tIFolder genedFolder = result.getFile().getParent().getFolder(new Path(\"p\"));", "-\t\t\t\t\tif (!genedFolder.exists())", "-\t\t\t\t\t\tgenedFolder.create(true, false, null);", "-\t\t\t\t\tgenedType = genedFolder.getFile(new Path(\"GeneratedType.java\")); //$NON-NLS-1$", "-\t\t\t\t\tif (genedType.exists()) return;", "-\t\t\t\t\tgenedType.create(new ByteArrayInputStream(\"package p; public class GeneratedType {}\".getBytes()), true, null); //$NON-NLS-1$"]}], "num": 52365}
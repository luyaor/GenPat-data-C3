{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0d04105191361fc868703129e31d688", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "beab29089f87462ecf9f42e8ab389dc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "5f2456aa4b2b769de40fe8c031c43b1afaff3ffc", "commitAfterChange": "7234934f3efed703cbf030a33d03d36a447aeef6", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " public void parseBlockStatements( \tInitializer ini, \tTypeDeclaration type,  \tCompilationUnitDeclaration unit)", "signatureAfterChange": " public void parseBlockStatements( \tInitializer initializer, \tTypeDeclaration type,  \tCompilationUnitDeclaration unit)", "diff": ["-\tInitializer ini,", "+\tInitializer initializer,", "-\tscanner.resetTo(ini.sourceStart, bodyEnd(ini)); // just after the beginning {", "+\tscanner.resetTo(initializer.sourceStart, bodyEnd(initializer)); // just after the beginning {", "+\t", "+\tif (this.assistNode != null || lastAct == ERROR_ACTION) {", "+\t\treturn;", "+\t}", "+\t", "+\t// if no assist node was found, attach the statements as we might be searching for a declaration in a local type", "+\tinitializer.block.explicitDeclarations = realBlockStack[realBlockPtr--];", "+\tint length;", "+\tif ((length = astLengthStack[astLengthPtr--]) > 0) {", "+\t\tSystem.arraycopy(astStack, (astPtr -= length) + 1, initializer.block.statements = new Statement[length], 0, length); ", "+\t} else {", "+\t\t// check whether this block at least contains some comment in it", "+\t\tif (!containsComment(initializer.block.sourceStart, initializer.block.sourceEnd)) {", "+\t\t\tinitializer.block.bits |= AstNode.UndocumentedEmptyBlockMASK;", "+\t\t}", "+\t}", "+\t", "+\t// mark initializer with local type if one was found during parsing", "+\tif ((type.bits & AstNode.HasLocalTypeMASK) != 0) {", "+\t\tinitializer.bits |= AstNode.HasLocalTypeMASK;", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da67b4cf681f4a53d084bfa36c654dfd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "5d7b0ed4ccf6dc91337d9ac62f14ae585f547855", "commitAfterChange": "e706e02e84b0ab73a5fa0bab5675fe627a8c0157", "methodNumberBeforeChange": 238, "methodNumberAfterChange": 239, "signatureBeforeChange": "  public void parse( \tInitializer ini,  \tTypeDeclaration type,  \tCompilationUnitDeclaration unit)", "signatureAfterChange": "  public void parse( \tInitializer initializer,  \tTypeDeclaration type,  \tCompilationUnitDeclaration unit)", "diff": ["-\tInitializer ini, ", "+\tInitializer initializer, ", "-\tscanner.resetTo(ini.bodyStart, ini.bodyEnd); // just on the beginning {", "+\tscanner.resetTo(initializer.bodyStart, initializer.bodyEnd); // just on the beginning {", "-\tcheckNonNLSAfterBodyEnd(ini.declarationSourceEnd);", "+\tcheckNonNLSAfterBodyEnd(initializer.declarationSourceEnd);", "-\tini.block.explicitDeclarations = realBlockStack[realBlockPtr--];", "+\tinitializer.block.explicitDeclarations = realBlockStack[realBlockPtr--];", "-\tif ((length = astLengthStack[astLengthPtr--]) != 0)", "-\t\tSystem.arraycopy(", "-\t\t\tastStack, ", "-\t\t\t(astPtr -= length) + 1, ", "-\t\t\tini.block.statements = new Statement[length], ", "-\t\t\t0, ", "-\t\t\tlength); ", "+\tif ((length = astLengthStack[astLengthPtr--]) > 0) {", "+\t\tSystem.arraycopy(astStack, (astPtr -= length) + 1, initializer.block.statements = new Statement[length], 0, length); ", "+\t} else {", "+\t\t// check whether this block at least contains some comment in it", "+\t\tif (!containsComment(initializer.block.sourceStart, initializer.block.sourceEnd)) {", "+\t\t\tinitializer.block.bits |= AstNode.UncommentedEmptyBlockMASK;", "+\t\t}", "+\t}", "-\t\tini.bits |= AstNode.HasLocalTypeMASK;", "+\t\tinitializer.bits |= AstNode.HasLocalTypeMASK;"]}], "num": 3985}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0ca457092312b217c05086d00b037e3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30f6da80daa8afa501e7f7101fe1c833", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "signatureAfterChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "diff": ["-\t\t\t\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)wildcardBound).findSuperTypeWithSameErasure(superclassBound);", "+\t\t\t\t\t\t\t\tTypeBinding match = ((ReferenceBinding)wildcardBound).findSuperTypeWithSameErasure(superclassBound);", "-\t\t\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)wildcardBound).findSuperTypeWithSameErasure(superInterfaceBound);", "+\t\t\t\t\t\t\tTypeBinding match = wildcardBound.findSuperTypeWithSameErasure(superInterfaceBound);", "-\t\t\t\tif (argumentType instanceof ReferenceBinding) {", "-\t\t\t\t\tReferenceBinding referenceArgument = (ReferenceBinding) argumentType;", "-\t\t\t\t\tTypeBinding match = referenceArgument.findSuperTypeWithSameErasure(substitutedSuperType);", "-\t\t\t\t\tif (match != null){", "-\t\t\t\t\t\t// Enum#RAW is not a substitute for <E extends Enum<E>> (86838)", "-\t\t\t\t\t\tif (match.isRawType() && substitutedSuperType.isBoundParameterizedType())", "-\t\t\t\t\t\t\tunchecked = true;", "-\t\t\t\t\t}", "-\t\t\t\t} ", "+\t\t\t\tTypeBinding match = argumentType.findSuperTypeWithSameErasure(substitutedSuperType);", "+\t\t\t\tif (match != null){", "+\t\t\t\t\t// Enum#RAW is not a substitute for <E extends Enum<E>> (86838)", "+\t\t\t\t\tif (match.isRawType() && substitutedSuperType.isBoundParameterizedType())", "+\t\t\t\t\t\tunchecked = true;", "+\t\t\t\t}", "-\t\t\t\tif (argumentType instanceof ReferenceBinding) {", "-\t\t\t\t\tReferenceBinding referenceArgument = (ReferenceBinding) argumentType;", "-\t\t\t\t\tTypeBinding match = referenceArgument.findSuperTypeWithSameErasure(substitutedSuperType);", "-\t\t\t\t\tif (match != null){", "-\t\t\t\t\t\t// Enum#RAW is not a substitute for <E extends Enum<E>> (86838)", "-\t\t\t\t\t\tif (match.isRawType() && substitutedSuperType.isBoundParameterizedType())", "-\t\t\t\t\t\t\tunchecked = true;", "-\t\t\t\t\t}", "+\t\t\t\tTypeBinding match = argumentType.findSuperTypeWithSameErasure(substitutedSuperType);", "+\t\t\t\tif (match != null){", "+\t\t\t\t\t// Enum#RAW is not a substitute for <E extends Enum<E>> (86838)", "+\t\t\t\t\tif (match.isRawType() && substitutedSuperType.isBoundParameterizedType())", "+\t\t\t\t\t\tunchecked = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0f9fca87a6813040a4c9e7c33c50d22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic boolean boundCheck(Substitution substitution, TypeBinding argumentType)", "signatureAfterChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "diff": ["-\tpublic boolean boundCheck(Substitution substitution, TypeBinding argumentType) {", "+\tpublic int boundCheck(Substitution substitution, TypeBinding argumentType) {", "-\t\tif (argumentType == NullBinding || this == argumentType) ", "-\t\t\treturn true;", "+\t\tif (argumentType == NullBinding || argumentType == this)", "+\t\t\treturn TypeConstants.OK;", "+\t\tboolean hasSubstitution = substitution != null;", "-\t\t\treturn false;\t", "+\t\t\treturn TypeConstants.MISMATCH;\t", "-\t        switch (wildcard.kind) {", "+\t        switch (wildcard.boundKind) {", "-\t\t            if (!boundCheck(substitution, wildcard.bound)) return false;", "-\t\t            break;", "+//\t\t            if (boundCheck(substitution, wildcard.bound) != TypeConstants.OK) return TypeConstants.MISMATCH;", "+//\t\t            break;", "+\t\t            return boundCheck(substitution, wildcard.bound); // only check the lower bound", "-\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\treturn TypeConstants.OK;", "-\t\tboolean hasSubstitution = substitution != null;", "+\t\tboolean unchecked = false;", "+\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "+\t\t\t    return TypeConstants.MISMATCH;", "+\t\t\t}", "-\t\t\t\t\tif (match.isRawType() && !substitutedSuperType.isRawType())", "-\t\t\t\t\t\treturn false;", "+\t\t\t\t\tif (match.isRawType() && (substitutedSuperType.isGenericType()||substitutedSuperType.isBoundParameterizedType()))", "+\t\t\t\t\t\tunchecked = true;", "-\t\t\t}", "-\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "-\t\t\t    return false;", "+\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "+\t\t\t    return TypeConstants.MISMATCH;", "+\t\t\t}", "-\t\t\t\t\tif (match.isRawType() && !substitutedSuperType.isRawType())", "-\t\t\t\t\t\treturn false;", "+\t\t\t\t\tif (match.isRawType() && (substitutedSuperType.isGenericType()||substitutedSuperType.isBoundParameterizedType()))", "+\t\t\t\t\t\tunchecked = true;", "-\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "-\t\t\t    return false;", "-\t\t\t}", "-\t    return true;", "+\t    return unchecked ? TypeConstants.UNCHECKED : TypeConstants.OK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d22c84177feeadb7bedf24663acaf1a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "b1f26dd7246467dc23b84856de7e72a03a078127", "commitAfterChange": "28b12db798aef83fea7df32f8ed84696ebec2fff", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "signatureAfterChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "diff": ["-\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, this.superclass) : this.superclass;", "-\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "-\t\t\t    return TypeConstants.MISMATCH;", "-\t\t\t}", "-\t\t\tif (argumentType instanceof ReferenceBinding) {", "-\t\t\t\tReferenceBinding referenceArgument = (ReferenceBinding) argumentType;", "-\t\t\t\tTypeBinding match = referenceArgument.findSuperTypeWithSameErasure(substitutedSuperType);", "-\t\t\t\tif (match != null){", "-\t\t\t\t\t// Enum#RAW is not a substitute for <E extends Enum<E>> (86838)", "-\t\t\t\t\tif (match.isRawType() && (substitutedSuperType.isGenericType()||substitutedSuperType.isBoundParameterizedType()))", "-\t\t\t\t\t\tunchecked = true;", "+\t\t\tTypeBinding superType = this.superclass;", "+\t\t\tif (superType != argumentType) { // check identity before substituting (104649)", "+\t\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, superType) : superType;", "+\t\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "+\t\t\t\t    return TypeConstants.MISMATCH;", "-\t\t\t} ", "+\t\t\t\tif (argumentType instanceof ReferenceBinding) {", "+\t\t\t\t\tReferenceBinding referenceArgument = (ReferenceBinding) argumentType;", "+\t\t\t\t\tTypeBinding match = referenceArgument.findSuperTypeWithSameErasure(substitutedSuperType);", "+\t\t\t\t\tif (match != null){", "+\t\t\t\t\t\t// Enum#RAW is not a substitute for <E extends Enum<E>> (86838)", "+\t\t\t\t\t\tif (match.isRawType() && (substitutedSuperType.isGenericType()||substitutedSuperType.isBoundParameterizedType()))", "+\t\t\t\t\t\t\tunchecked = true;", "+\t\t\t\t\t}", "+\t\t\t\t} ", "+\t\t\t}", "-\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, this.superInterfaces[i]) : this.superInterfaces[i];", "-\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "-\t\t\t    return TypeConstants.MISMATCH;", "-\t\t\t}", "-\t\t\tif (argumentType instanceof ReferenceBinding) {", "-\t\t\t\tReferenceBinding referenceArgument = (ReferenceBinding) argumentType;", "-\t\t\t\tTypeBinding match = referenceArgument.findSuperTypeWithSameErasure(substitutedSuperType);", "-\t\t\t\tif (match != null){", "-\t\t\t\t\t// Enum#RAW is not a substitute for <E extends Enum<E>> (86838)", "-\t\t\t\t\tif (match.isRawType() && (substitutedSuperType.isGenericType()||substitutedSuperType.isBoundParameterizedType()))", "-\t\t\t\t\t\tunchecked = true;", "+\t    \tTypeBinding superType = this.superInterfaces[i];", "+\t    \tif (superType != argumentType) { // check identity before substituting (104649)", "+\t\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, superType) : superType;", "+\t\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "+\t\t\t\t    return TypeConstants.MISMATCH;", "-\t\t\t}", "+\t\t\t\tif (argumentType instanceof ReferenceBinding) {", "+\t\t\t\t\tReferenceBinding referenceArgument = (ReferenceBinding) argumentType;", "+\t\t\t\t\tTypeBinding match = referenceArgument.findSuperTypeWithSameErasure(substitutedSuperType);", "+\t\t\t\t\tif (match != null){", "+\t\t\t\t\t\t// Enum#RAW is not a substitute for <E extends Enum<E>> (86838)", "+\t\t\t\t\t\tif (match.isRawType() && (substitutedSuperType.isGenericType()||substitutedSuperType.isBoundParameterizedType()))", "+\t\t\t\t\t\t\tunchecked = true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t    \t}"]}], "num": 20388}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1078781cf2a0964c339eee01aac92905", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "123dfc32f22ef45437a3db3cc70170a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java", "commitBeforeChange": "25ceba4552ce4df8b00117185ea4a4cf292544fd", "commitAfterChange": "e31e89499c545f3404d7787f4d333516631375ec", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void initializeBounds(Scope scope, ParameterizedTypeBinding capturedParameterizedType)", "signatureAfterChange": " \tpublic void initializeBounds(Scope scope, ParameterizedTypeBinding capturedParameterizedType)", "diff": ["-\t\t\t\t\t\tthis.superclass = scope.getJavaLangObject();", "-\t\t\t\t\t\tthis.superInterfaces = new ReferenceBinding[] { (ReferenceBinding) capturedWildcardBound };", "+\t\t\t\t\t\tthis.setSuperClass(scope.getJavaLangObject());", "+\t\t\t\t\t\tthis.setSuperInterfaces(new ReferenceBinding[] { (ReferenceBinding) capturedWildcardBound });", "-\t\t\t\t\t\t\tthis.superclass = scope.getJavaLangObject();", "+\t\t\t\t\t\t\tthis.setSuperClass(scope.getJavaLangObject());", "-\t\t\t\t\t\t\tthis.superclass = (ReferenceBinding) capturedWildcardBound;", "+\t\t\t\t\t\t\tthis.setSuperClass((ReferenceBinding) capturedWildcardBound);", "-\t\t\t\t\t\tthis.superInterfaces = Binding.NO_SUPERINTERFACES;", "+\t\t\t\t\t\tthis.setSuperInterfaces(Binding.NO_SUPERINTERFACES);", "-\t\t\t\t\tthis.firstBound =  capturedWildcardBound;", "+\t\t\t\t\tthis.setFirstBound(capturedWildcardBound);", "-\t\t\t\t\tthis.superclass = scope.getJavaLangObject();", "-\t\t\t\t\tthis.superInterfaces = Binding.NO_SUPERINTERFACES;", "+\t\t\t\t\tthis.setSuperClass(scope.getJavaLangObject());", "+\t\t\t\t\tthis.setSuperInterfaces(Binding.NO_SUPERINTERFACES);", "-\t\t\t\t\tthis.superclass = scope.getJavaLangObject();", "-\t\t\t\t\tthis.superInterfaces = Binding.NO_SUPERINTERFACES;", "+\t\t\t\t\tthis.setSuperClass(scope.getJavaLangObject());", "+\t\t\t\t\tthis.setSuperInterfaces(Binding.NO_SUPERINTERFACES);", "-\t\t\t\t\tthis.superclass = substitutedVariableSuperclass;", "+\t\t\t\t\tthis.setSuperClass(substitutedVariableSuperclass);", "-\t\t\t\t\t\tthis.superInterfaces = new ReferenceBinding[] { (ReferenceBinding) capturedWildcardBound };", "+\t\t\t\t\t\tthis.setSuperInterfaces(new ReferenceBinding[] { (ReferenceBinding) capturedWildcardBound });", "-\t\t\t\t\t\tthis.superInterfaces = Scope.greaterLowerBound(substitutedVariableInterfaces);", "+\t\t\t\t\t\tthis.setSuperInterfaces(Scope.greaterLowerBound(substitutedVariableInterfaces));", "-\t\t\t\t\t\tthis.superclass = substitutedVariableSuperclass;", "+\t\t\t\t\t\tthis.setSuperClass(substitutedVariableSuperclass);", "-\t\t\t\t\t\tthis.superclass = (ReferenceBinding) capturedWildcardBound;", "+\t\t\t\t\t\tthis.setSuperClass((ReferenceBinding) capturedWildcardBound);", "-\t\t\t\t\t\t\tthis.superclass = substitutedVariableSuperclass;", "+\t\t\t\t\t\t\tthis.setSuperClass(substitutedVariableSuperclass);", "-\t\t\t\t\tthis.superInterfaces = substitutedVariableInterfaces;", "+\t\t\t\t\tthis.setSuperInterfaces(substitutedVariableInterfaces);", "-\t\t\t\tthis.firstBound =  capturedWildcardBound;", "+\t\t\t\tthis.setFirstBound(capturedWildcardBound);", "-\t\t\t\tthis.superclass = substitutedVariableSuperclass;", "-\t\t\t\tthis.superInterfaces = substitutedVariableInterfaces;", "+\t\t\t\tthis.setSuperClass(substitutedVariableSuperclass);", "+\t\t\t\tthis.setSuperInterfaces(substitutedVariableInterfaces);", "-\t\t\t\tthis.superclass = substitutedVariableSuperclass;", "+\t\t\t\tthis.setSuperClass(substitutedVariableSuperclass);", "-\t\t\t\t\tthis.firstBound = substitutedVariableSuperclass;", "+\t\t\t\t\tthis.setFirstBound(substitutedVariableSuperclass);", "-\t\t\t\tthis.superInterfaces = substitutedVariableInterfaces;", "+\t\t\t\tthis.setSuperInterfaces(substitutedVariableInterfaces);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4268c0441fd049f61771ab2b43822f4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java", "commitBeforeChange": "cd65b8d76037ea98de2f66f3cc29001c505073c6", "commitAfterChange": "dfc12356d0e56187f27726140c3e4ba7be8134b7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void initializeBounds(ParameterizedTypeBinding capturedParameterizedType)", "signatureAfterChange": " \tpublic void initializeBounds(ParameterizedTypeBinding capturedParameterizedType)", "diff": ["+\t\tReferenceBinding substitutedVariableSuperclass = (ReferenceBinding) Scope.substitute(capturedParameterizedType, originalVariableSuperclass);", "-\t\tReferenceBinding substitutedVariableSuperclass = originalVariableSuperclass.isTypeVariable() ? originalVariableSuperclass : (ReferenceBinding) Scope.substitute(capturedParameterizedType, originalVariableSuperclass);", "-\t\tReferenceBinding[] substitutedVariableInterfaces = Scope.substitute(capturedParameterizedType, wildcardVariable.superInterfaces());", "+\t\tif (substitutedVariableSuperclass == this) substitutedVariableSuperclass = originalVariableSuperclass;", "+\t\t", "+\t\tReferenceBinding[] originalVariableInterfaces = wildcardVariable.superInterfaces();\t\t", "+\t\tReferenceBinding[] substitutedVariableInterfaces = Scope.substitute(capturedParameterizedType, originalVariableInterfaces);", "+\t\tif (substitutedVariableInterfaces != originalVariableInterfaces) {", "+\t\t\t// prevent cyclic capture: given X<T>, capture(X<? extends T> could yield a circular type", "+\t\t\tfor (int i = 0, length = substitutedVariableInterfaces.length; i < length; i++) {", "+\t\t\t\tif (substitutedVariableInterfaces[i] == this) substitutedVariableInterfaces[i] = originalVariableInterfaces[i];", "+\t\t\t}", "+\t\t}", "+\t\tTypeBinding originalWildcardBound = wildcard.bound;", "+\t\t// prevent cyclic capture: given X<T>, capture(X<? extends T> could yield a circular type", "+\t\tTypeBinding substitutedWildcardBound = originalWildcardBound == null ? null : Scope.substitute(capturedParameterizedType, originalWildcardBound);", "+\t\tif (substitutedWildcardBound == this) substitutedWildcardBound = originalWildcardBound;", "-\t\t\t\t\t\tthis.superInterfaces = new ReferenceBinding[] { (ReferenceBinding) wildcard.bound };", "+\t\t\t\t\t\tthis.superInterfaces = new ReferenceBinding[] { (ReferenceBinding) substitutedWildcardBound };", "-\t\t\t\tTypeBinding substitutedWildcardBound = Scope.substitute(capturedParameterizedType, wildcard.bound);", "-\t\t\t\t// prevent cyclic capture: given X<T>, capture(X<? super T> could yield a circular type", "-\t\t\t\tsubstitutedWildcardBound = wildcard.bound.isTypeVariable() ? wildcard.bound : Scope.substitute(capturedParameterizedType, wildcard.bound);", "-\t\t\t\tif (wildcardVariable.firstBound == this.superclass ", "-\t\t\t\t\t\t|| substitutedWildcardBound == this.superclass) {", "-\t\t\t\t\tthis.firstBound = this.superclass;", "+\t\t\t\tif (wildcardVariable.firstBound == substitutedVariableSuperclass || substitutedWildcardBound == substitutedVariableSuperclass) {", "+\t\t\t\t\tthis.firstBound = substitutedVariableSuperclass;"]}], "num": 69645}
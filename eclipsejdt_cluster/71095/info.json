{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "328b3c417b762f875c8de578ffb2b43a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14e3ccd7558d29219b488035ebba9a67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "b3c49effd6a37f25d3bc9f0a1e991b665346dde6", "commitAfterChange": "350354f214ca227e1737fa04a92c132cd3211f35", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public static SearchPattern createPattern(IJavaElement element, int limitTo)", "signatureAfterChange": "\r public static SearchPattern createPattern(IJavaElement element, int limitTo)", "diff": ["-\t\t\t\t\tsearchPattern = new FieldDeclarationPattern(name, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, declaringSimpleName, typeQualification, typeSimpleName);\r", "+\t\t\t\t\tsearchPattern = \r", "+\t\t\t\t\t\tnew FieldDeclarationPattern(\r", "+\t\t\t\t\t\t\tname, \r", "+\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\ttypeQualification, \r", "+\t\t\t\t\t\t\ttypeSimpleName);\r", "-\t\t\t\t\tsearchPattern = new FieldReferencePattern(name, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, declaringSimpleName, typeQualification, typeSimpleName);\r", "+\t\t\t\t\tsearchPattern = \r", "+\t\t\t\t\t\tnew FieldReferencePattern(\r", "+\t\t\t\t\t\t\tname, \r", "+\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\ttypeQualification, \r", "+\t\t\t\t\t\t\ttypeSimpleName,\r", "+\t\t\t\t\t\t\ttrue,  // read access\r", "+\t\t\t\t\t\t\ttrue); // write access\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IJavaSearchConstants.READ_REFERENCES :\r", "+\t\t\t\t\tsearchPattern = \r", "+\t\t\t\t\t\tnew FieldReferencePattern(\r", "+\t\t\t\t\t\t\tname, \r", "+\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\ttypeQualification, \r", "+\t\t\t\t\t\t\ttypeSimpleName,\r", "+\t\t\t\t\t\t\ttrue,  // read access only\r", "+\t\t\t\t\t\t\tfalse);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IJavaSearchConstants.WRITE_REFERENCES :\r", "+\t\t\t\t\tsearchPattern = \r", "+\t\t\t\t\t\tnew FieldReferencePattern(\r", "+\t\t\t\t\t\t\tname, \r", "+\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\ttypeQualification, \r", "+\t\t\t\t\t\t\ttypeSimpleName,\r", "+\t\t\t\t\t\t\tfalse,\r", "+\t\t\t\t\t\t\ttrue); // write access only\r", "-\t\t\t\t\t\tnew FieldDeclarationPattern(name, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, declaringSimpleName, typeQualification, typeSimpleName), \r", "-\t\t\t\t\t\tnew FieldReferencePattern(name, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, declaringSimpleName, typeQualification, typeSimpleName));\r", "+\t\t\t\t\t\tnew FieldDeclarationPattern(\r", "+\t\t\t\t\t\t\tname, \r", "+\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\ttypeQualification, \r", "+\t\t\t\t\t\t\ttypeSimpleName), \r", "+\t\t\t\t\t\tnew FieldReferencePattern(\r", "+\t\t\t\t\t\t\tname, \r", "+\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\ttypeQualification, \r", "+\t\t\t\t\t\t\ttypeSimpleName,\r", "+\t\t\t\t\t\t\ttrue,  // read access\r", "+\t\t\t\t\t\t\ttrue)); // write access\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce18f5f3cf94d0f81f204bebde1d9f3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "4d19416746402b8fbbfd02c13772658da70a345a", "commitAfterChange": "81400db64234d6cf1ce3b6a87a8f065ac6bd072f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public static SearchPattern createPattern(IJavaElement element, int limitTo)", "signatureAfterChange": "\r public static SearchPattern createPattern(IJavaElement element, int limitTo)", "diff": ["-\t\t\t\t\t\tsearchPattern = new ConstructorDeclarationPattern(declaringSimpleName, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, parameterQualifications, parameterSimpleNames);\r", "+\t\t\t\t\t\tsearchPattern = \r", "+\t\t\t\t\t\t\tnew ConstructorDeclarationPattern(\r", "+\t\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\t\tparameterQualifications, \r", "+\t\t\t\t\t\t\t\tparameterSimpleNames);\r", "-\t\t\t\t\t\tsearchPattern = new MethodDeclarationPattern(selector, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, declaringSimpleName, returnQualification, returnSimpleName, parameterQualifications, parameterSimpleNames);\r", "+\t\t\t\t\t\tsearchPattern = \r", "+\t\t\t\t\t\t\tnew MethodDeclarationPattern(\r", "+\t\t\t\t\t\t\t\tselector, \r", "+\t\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\t\treturnQualification, \r", "+\t\t\t\t\t\t\t\treturnSimpleName, \r", "+\t\t\t\t\t\t\t\tparameterQualifications, \r", "+\t\t\t\t\t\t\t\tparameterSimpleNames);\r", "-\t\t\t\t\t\tsearchPattern = new ConstructorReferencePattern(declaringSimpleName, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, parameterQualifications, parameterSimpleNames);\r", "+\t\t\t\t\t\tsearchPattern = \r", "+\t\t\t\t\t\t\tnew ConstructorReferencePattern(\r", "+\t\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\t\tparameterQualifications, \r", "+\t\t\t\t\t\t\t\tparameterSimpleNames,\r", "+\t\t\t\t\t\t\t\tmethod.getDeclaringType());\r", "-\t\t\t\t\t\tsearchPattern = new MethodReferencePattern(selector, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, declaringSimpleName, returnQualification, returnSimpleName, parameterQualifications, parameterSimpleNames);\r", "+\t\t\t\t\t\tsearchPattern = \r", "+\t\t\t\t\t\t\tnew MethodReferencePattern(\r", "+\t\t\t\t\t\t\t\tselector, \r", "+\t\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\t\treturnQualification, \r", "+\t\t\t\t\t\t\t\treturnSimpleName, \r", "+\t\t\t\t\t\t\t\tparameterQualifications, \r", "+\t\t\t\t\t\t\t\tparameterSimpleNames,\r", "+\t\t\t\t\t\t\t\tmethod.getDeclaringType());\r", "-\t\t\t\t\t\t\tnew ConstructorDeclarationPattern(declaringSimpleName, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, parameterQualifications, parameterSimpleNames), \r", "-\t\t\t\t\t\t\tnew ConstructorReferencePattern(declaringSimpleName, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, parameterQualifications, parameterSimpleNames));\r", "+\t\t\t\t\t\t\tnew ConstructorDeclarationPattern(\r", "+\t\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\t\tparameterQualifications, \r", "+\t\t\t\t\t\t\t\tparameterSimpleNames), \r", "+\t\t\t\t\t\t\tnew ConstructorReferencePattern(\r", "+\t\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\t\tparameterQualifications, \r", "+\t\t\t\t\t\t\t\tparameterSimpleNames,\r", "+\t\t\t\t\t\t\t\tmethod.getDeclaringType()));\r", "-\t\t\t\t\t\t\tnew MethodDeclarationPattern(selector, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, declaringSimpleName, returnQualification, returnSimpleName, parameterQualifications, parameterSimpleNames), \r", "-\t\t\t\t\t\t\tnew MethodReferencePattern(selector, EXACT_MATCH, CASE_SENSITIVE, declaringQualification, declaringSimpleName, returnQualification, returnSimpleName, parameterQualifications, parameterSimpleNames));\r", "+\t\t\t\t\t\t\tnew MethodDeclarationPattern(\r", "+\t\t\t\t\t\t\t\tselector, \r", "+\t\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\t\treturnQualification, \r", "+\t\t\t\t\t\t\t\treturnSimpleName, \r", "+\t\t\t\t\t\t\t\tparameterQualifications, \r", "+\t\t\t\t\t\t\t\tparameterSimpleNames), \r", "+\t\t\t\t\t\t\tnew MethodReferencePattern(\r", "+\t\t\t\t\t\t\t\tselector, \r", "+\t\t\t\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\t\t\t\tCASE_SENSITIVE, \r", "+\t\t\t\t\t\t\t\tdeclaringQualification, \r", "+\t\t\t\t\t\t\t\tdeclaringSimpleName, \r", "+\t\t\t\t\t\t\t\treturnQualification, \r", "+\t\t\t\t\t\t\t\treturnSimpleName, \r", "+\t\t\t\t\t\t\t\tparameterQualifications, \r", "+\t\t\t\t\t\t\t\tparameterSimpleNames,\r", "+\t\t\t\t\t\t\t\tmethod.getDeclaringType()));\r"]}], "num": 71095}
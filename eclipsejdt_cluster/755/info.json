{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62141d1b5e121142c6a2d58aefbf259b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf406789328628f25ec7250d305246d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "0848b8a6a9afff16623dfc6b0821adb833326b41", "commitAfterChange": "29d4a1149e392c0b5c052a9202992e800f5506a5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected int checkAssignmentAgainstNullAnnotation(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t\t\t\t   LocalVariableBinding local, int nullStatus, Expression expression, TypeBinding providedType)", "signatureAfterChange": " protected int checkAssignmentAgainstNullAnnotation(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t\t\t\t   VariableBinding var, int nullStatus, Expression expression, TypeBinding providedType)", "diff": ["-/** Check null-ness of 'local' against a possible null annotation */", "+/** Check null-ness of 'var' against a possible null annotation */", "-\t\t\t\t\t\t\t\t\t\t\t\t   LocalVariableBinding local, int nullStatus, Expression expression, TypeBinding providedType)", "+\t\t\t\t\t\t\t\t\t\t\t\t   VariableBinding var, int nullStatus, Expression expression, TypeBinding providedType)", "-\tif (local != null) {", "-\t\tint severity = 0;", "-\t\tif ((local.tagBits & TagBits.AnnotationNonNull) != 0", "-\t\t\t\t&& nullStatus != FlowInfo.NON_NULL) {", "-\t\t\tflowContext.recordNullityMismatch(currentScope, expression, providedType, local.type, nullStatus);", "-\t\t\treturn FlowInfo.NON_NULL;", "-\t\t} else if ((severity = findNullTypeAnnotationMismatch(local.type, providedType)) > 0) {", "-\t\t\tcurrentScope.problemReporter().nullityMismatchingTypeAnnotation(expression, providedType, local.type, severity==1, currentScope.environment());", "-\t\t} else if ((local.tagBits & TagBits.AnnotationNullable) != 0", "-\t\t\t\t&& nullStatus == FlowInfo.UNKNOWN) {\t// provided a legacy type?", "-\t\t\treturn FlowInfo.POTENTIALLY_NULL;\t\t\t// -> use more specific info from the annotation", "-\t\t}", "+\tint severity = 0;", "+\tif ((var.tagBits & TagBits.AnnotationNonNull) != 0", "+\t\t\t&& nullStatus != FlowInfo.NON_NULL) {", "+\t\tflowContext.recordNullityMismatch(currentScope, expression, providedType, var.type, nullStatus);", "+\t\treturn FlowInfo.NON_NULL;", "+\t} else if ((severity = findNullTypeAnnotationMismatch(var.type, providedType)) > 0) {", "+\t\tcurrentScope.problemReporter().nullityMismatchingTypeAnnotation(expression, providedType, var.type, severity==1, currentScope.environment());", "+\t} else if ((var.tagBits & TagBits.AnnotationNullable) != 0", "+\t\t\t&& nullStatus == FlowInfo.UNKNOWN) {\t// provided a legacy type?", "+\t\treturn FlowInfo.POTENTIALLY_NULL;\t\t\t// -> use more specific info from the annotation"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc7b8e0ccf300e446c500ceae3987e40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "b14a6c4d09a9bece1bab75937908ff44df19fa09", "commitAfterChange": "a846071c58f9098177eef02be0134294158f9c4f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected int checkAssignmentAgainstNullAnnotation(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t\t\t\t   LocalVariableBinding local, int nullStatus, Expression expression, TypeBinding providedType)", "signatureAfterChange": " protected int checkAssignmentAgainstNullAnnotation(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t\t\t\t   VariableBinding var, int nullStatus, Expression expression, TypeBinding providedType)", "diff": ["-/** Check null-ness of 'local' against a possible null annotation */", "+/** Check null-ness of 'var' against a possible null annotation */", "-\t\t\t\t\t\t\t\t\t\t\t\t   LocalVariableBinding local, int nullStatus, Expression expression, TypeBinding providedType)", "+\t\t\t\t\t\t\t\t\t\t\t\t   VariableBinding var, int nullStatus, Expression expression, TypeBinding providedType)", "-\tif (local != null) {", "-\t\tif ((local.tagBits & TagBits.AnnotationNonNull) != 0", "-\t\t\t\t&& nullStatus != FlowInfo.NON_NULL) {", "-\t\t\tflowContext.recordNullityMismatch(currentScope, expression, providedType, local.type, nullStatus);", "-\t\t\treturn FlowInfo.NON_NULL;", "-\t\t} else if ((local.tagBits & TagBits.AnnotationNullable) != 0", "-\t\t\t\t&& nullStatus == FlowInfo.UNKNOWN) {\t// provided a legacy type?", "-\t\t\treturn FlowInfo.POTENTIALLY_NULL;\t\t\t// -> use more specific info from the annotation", "-\t\t}", "+\tif ((var.tagBits & TagBits.AnnotationNonNull) != 0", "+\t\t\t&& nullStatus != FlowInfo.NON_NULL) {", "+\t\tflowContext.recordNullityMismatch(currentScope, expression, providedType, var.type, nullStatus);", "+\t\treturn FlowInfo.NON_NULL;", "+\t} else if ((var.tagBits & TagBits.AnnotationNullable) != 0", "+\t\t\t&& nullStatus == FlowInfo.UNKNOWN) {\t// provided a legacy type?", "+\t\treturn FlowInfo.POTENTIALLY_NULL;\t\t\t// -> use more specific info from the annotation"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd58d5cd4fbb2be42dddc30953ea4727", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected int checkAssignmentAgainstNullAnnotation(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t\t\t\t   VariableBinding var, int nullStatus, Expression expression, TypeBinding providedType)", "signatureAfterChange": " protected int checkAssignmentAgainstNullAnnotation(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t\t\t\t   VariableBinding var, int nullStatus, Expression expression, TypeBinding providedType)", "diff": ["-\tint severity = 0;", "-\tif ((var.tagBits & TagBits.AnnotationNonNull) != 0", "-\t\t\t&& nullStatus != FlowInfo.NON_NULL) {", "-\t\tflowContext.recordNullityMismatch(currentScope, expression, providedType, var.type, nullStatus);", "+\tlong lhsTagBits = 0L;", "+\tboolean hasReported = false;", "+\tif (currentScope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8) {", "+\t\tlhsTagBits = var.tagBits & TagBits.AnnotationNullMASK;", "+\t} else {", "+\t\tlhsTagBits = var.type.tagBits & TagBits.AnnotationNullMASK;", "+\t\tint severity = findNullTypeAnnotationMismatch(var.type, providedType, nullStatus);", "+\t\tif (severity == 3) {", "+\t\t\tcurrentScope.problemReporter().nullityMismatchingTypeAnnotation(expression, providedType, var.type, severity);", "+\t\t\thasReported = true;", "+\t\t} else if (severity == 2) {", "+\t\t\tflowContext.recordNullityMismatch(currentScope, expression, providedType, var.type, nullStatus);", "+\t\t\thasReported = true;", "+\t\t}", "+\t}", "+\tif (lhsTagBits == TagBits.AnnotationNonNull && nullStatus != FlowInfo.NON_NULL) {", "+\t\tif (!hasReported)", "+\t\t\tflowContext.recordNullityMismatch(currentScope, expression, providedType, var.type, nullStatus);", "-\t} else if ((severity = findNullTypeAnnotationMismatch(var.type, providedType)) > 0) {", "-\t\tcurrentScope.problemReporter().nullityMismatchingTypeAnnotation(expression, providedType, var.type, severity==1, currentScope.environment());", "-\t} else if ((var.tagBits & TagBits.AnnotationNullable) != 0", "-\t\t\t&& nullStatus == FlowInfo.UNKNOWN) {\t// provided a legacy type?", "+\t} else if (lhsTagBits == TagBits.AnnotationNullable && nullStatus == FlowInfo.UNKNOWN) {\t// provided a legacy type?"]}], "num": 755}
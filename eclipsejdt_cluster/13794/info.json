{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5323860f46da8bb07812eea59bb85f0f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ed96579598d2d5f507a5d2540c5989b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "618f3771c49dbf9480ae16a58263680af2b36ad6", "commitAfterChange": "7cfc4523cdcfe787f1d0d2fd75b08c06e5b4b089", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate TypeReference parseQualifiedName(boolean reset) throws InvalidInputException", "signatureAfterChange": " \tprotected Object createTypeReference(int primitiveToken)", "diff": ["-\tprivate TypeReference parseQualifiedName(boolean reset) throws InvalidInputException {", "-", "-\t\t// Reset identifier stack if requested", "-\t\tif (reset) {", "-\t\t\tthis.identifierPtr = -1;", "-\t\t\tthis.identifierLengthPtr = -1;", "-\t\t}", "-", "-\t\t// Scan tokens", "-\t\tnextToken : for (int iToken = 0; ; iToken++) {", "-\t\t\tint token = readToken();", "-\t\t\tswitch (token) {", "-\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "-\t\t\t\t\tif (((iToken % 2) > 0)) { // identifiers must be odd tokens", "-\t\t\t\t\t\tbreak nextToken;", "-\t\t\t\t\t}", "-\t\t\t\t\tpushIdentifier(iToken == 0);", "-\t\t\t\t\tconsumeToken();", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase TerminalTokens.TokenNameDOT :", "-\t\t\t\t\tif ((iToken % 2) == 0) { // dots must be even tokens", "-\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\t}", "-\t\t\t\t\tconsumeToken();", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase TerminalTokens.TokenNamevoid :", "-\t\t\t\tcase TerminalTokens.TokenNameboolean :", "-\t\t\t\tcase TerminalTokens.TokenNamebyte :", "-\t\t\t\tcase TerminalTokens.TokenNamechar :", "-\t\t\t\tcase TerminalTokens.TokenNamedouble :", "-\t\t\t\tcase TerminalTokens.TokenNamefloat :", "-\t\t\t\tcase TerminalTokens.TokenNameint :", "-\t\t\t\tcase TerminalTokens.TokenNamelong :", "-\t\t\t\tcase TerminalTokens.TokenNameshort :", "-\t\t\t\t\tif (iToken > 0) {", "-\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\t}", "-\t\t\t\t\tpushIdentifier(true);", "-\t\t\t\t\tconsumeToken();", "-\t\t\t\t\tbreak nextToken;", "-", "-\t\t\t\tdefault :", "-\t\t\t\t\tif (iToken == 0) {", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t}", "-\t\t\t\t\tif ((iToken % 2) == 0) { // cannot leave on a dot", "-\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak nextToken;", "-\t\t\t}", "-\t\t}", "-", "-\t\t// Build type reference from read tokens", "+\t */", "+\tprotected Object createTypeReference(int primitiveToken) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "942583bef0f864501326e74634e2aa52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "97817ed754fcb90df07f717911c8c1d960c24a23", "commitAfterChange": "301ea60f1c016cdc6dab5bb31b25b7537bf7ad1b", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " \tpublic boolean isOnClasspath(IJavaElement element)", "signatureAfterChange": " \tpublic boolean isOnClasspath(IJavaElement element)", "diff": ["-\t\t// then look at resolved entries", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tIClasspathEntry rawEntry = rawClasspath[i];", "-\t\t\tswitch (rawEntry.getEntryKind()) {", "-\t\t\t\tcase IClasspathEntry.CPE_CONTAINER:", "-\t\t\t\t\tIClasspathContainer container;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tcontainer = JavaCore.getClasspathContainer(rawEntry.getPath(), this);", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (container == null)", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tIClasspathEntry[] containerEntries = container.getClasspathEntries();", "-\t\t\t\t\tif (containerEntries == null)", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t// container was bound", "-\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){", "-\t\t\t\t\t\tIClasspathEntry resolvedEntry = containerEntries[j];", "-\t\t\t\t\t\tif (resolvedEntry == null) {", "-\t\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE || JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "-\t\t\t\t\t\t\t\tJavaModelManager.getJavaModelManager().verbose_missbehaving_container(this, rawEntry.getPath(), containerEntries);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (isOnClasspathEntry(elementPath, isFolderPath, isPackageFragmentRoot, resolvedEntry))", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IClasspathEntry.CPE_VARIABLE:", "-\t\t\t\t\tIClasspathEntry resolvedEntry = JavaCore.getResolvedClasspathEntry(rawEntry);", "-\t\t\t\t\tif (resolvedEntry == null)", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tif (isOnClasspathEntry(elementPath, isFolderPath, isPackageFragmentRoot, resolvedEntry))", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\tbreak;", "-\t\t\t}", "+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=304081", "+\t\t// All the resolved classpath entries need to be considered, including the referenced classpath entries", "+\t\tIClasspathEntry[] resolvedClasspath = null;", "+\t\ttry {", "+\t\t\tresolvedClasspath = getResolvedClasspath();", "+\t\t} catch (JavaModelException e) {", "+\t\t\treturn false; // Perhaps, not a Java project", "+\t\tfor (int index = 0; index < resolvedClasspath.length; index++) {", "+\t\t\tif (isOnClasspathEntry(elementPath, isFolderPath, isPackageFragmentRoot, resolvedClasspath[index]))", "+\t\t\t\treturn true;", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f162f1d47538b9872d2ca58c1dd11434", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "2ae41539e386d12d9e7c121e231730e370deda2f", "commitAfterChange": "05dd526dbb279df7b7e23a1d7ccb53d445943919", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tpublic void findTypes(char[] prefix, final ISearchRequestor storage)", "signatureAfterChange": "\r \tpublic void findTypes(char[] prefix, final ISearchRequestor storage)", "diff": ["-\t\t\tJavaSearchScope scope = new JavaSearchScope();\r", "-\t\t\tIWorkspaceRoot root = this.project.getUnderlyingResource().getWorkspace().getRoot();\r", "-\t\t\tIClasspathEntry[] entries = ((JavaProject)this.project).getExpandedClasspath(true);\r", "-\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "-\t\t\t\tIClasspathEntry entry = entries[i];\r", "-\t\t\t\tswitch (entry.getEntryKind()) {\r", "-\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:\r", "-\t\t\t\t\t\tscope.add(root.getFile(entry.getPath()), false);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT:\r", "-\t\t\t\t\t\tscope.add(root.getProject(entry.getPath().lastSegment()), false);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE:\r", "-\t\t\t\t\t\tIPath path = entry.getPath();\r", "-\t\t\t\t\t\tif (path.segmentCount() == 1) {\r", "-\t\t\t\t\t\t\t// project is source\r", "-\t\t\t\t\t\t\tscope.add(root.getProject(path.lastSegment()), false);\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t// regular source folder\r", "-\t\t\t\t\t\t\tscope.add(root.getFolder(path), false);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\t\r", "+\t\t\tIJavaSearchScope scope = searchEngine.createJavaSearchScope(new IJavaElement[] {this.project});\r", "+\r"]}], "num": 13794}
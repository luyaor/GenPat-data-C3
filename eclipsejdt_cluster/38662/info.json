{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "386cbb7ca1ca11cbaad56dc9122fb283", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a31b9bb49d725087416ddeda820afcfd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "1f16b07138a4ff3970eb777fe51b4defd3508931", "commitAfterChange": "30166c06d6dd51fd7dbca34d0d55442f8ed395c4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["+\t\t\tConstant assignConstant;", "-\t\t\t\t\tConstant assignConstant;", "-\t\t\t\t\tif (((assignConstant = expression.constant) != Constant.NotAConstant)", "+\t\t\t\t\tassignConstant = expression.constant;", "+\t\t\t\t\tif (localBinding.resolvedPosition == -1) {", "+\t\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t * restart code gen because we either:", "+\t\t\t\t\t\t\t * - need the value", "+\t\t\t\t\t\t\t * - the constant can have potential side-effect", "+\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\tlocalBinding.useFlag = LocalVariableBinding.USED;", "+\t\t\t\t\t\t\tthrow new AbortMethod(CodeStream.RESTART_CODE_GEN_FOR_UNUSED_LOCALS_MODE, null);", "+\t\t\t\t\t\t} else if (assignConstant == Constant.NotAConstant) {", "+\t\t\t\t\t\t\t// we only need to generate the value of the expression's constant if it is not a constant expression", "+\t\t\t\t\t\t\texpression.generateCode(currentScope, codeStream, false);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\tif ((assignConstant != Constant.NotAConstant)", "+\t\t\t\t\tif (localBinding.resolvedPosition == -1) {", "+\t\t\t\t\t\tassignConstant = expression.constant;", "+\t\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t * restart code gen because we either:", "+\t\t\t\t\t\t\t * - need the value", "+\t\t\t\t\t\t\t * - the constant can have potential side-effect", "+\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\tlocalBinding.useFlag = LocalVariableBinding.USED;", "+\t\t\t\t\t\t\tthrow new AbortMethod(CodeStream.RESTART_CODE_GEN_FOR_UNUSED_LOCALS_MODE, null);", "+\t\t\t\t\t\t} else if (assignConstant == Constant.NotAConstant) {", "+\t\t\t\t\t\t\t// we only need to generate the value of the expression's constant if it is not a constant expression", "+\t\t\t\t\t\t\texpression.generateCode(currentScope, codeStream, false);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b46f73292b2c403dfd62d6d949316eb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "1f16b07138a4ff3970eb777fe51b4defd3508931", "commitAfterChange": "30166c06d6dd51fd7dbca34d0d55442f8ed395c4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["+\t\t\tConstant assignConstant;", "-\t\t\t\t\tConstant assignConstant;", "-\t\t\t\t\tif (((assignConstant = expression.constant) != Constant.NotAConstant)", "+\t\t\t\t\tassignConstant = expression.constant;", "+\t\t\t\t\tif (localBinding.resolvedPosition == -1) {", "+\t\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t * restart code gen because we either:", "+\t\t\t\t\t\t\t * - need the value", "+\t\t\t\t\t\t\t * - the constant can have potential side-effect", "+\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\tlocalBinding.useFlag = LocalVariableBinding.USED;", "+\t\t\t\t\t\t\tthrow new AbortMethod(CodeStream.RESTART_CODE_GEN_FOR_UNUSED_LOCALS_MODE, null);", "+\t\t\t\t\t\t} else if (assignConstant == Constant.NotAConstant) {", "+\t\t\t\t\t\t\t// we only need to generate the value of the expression's constant if it is not a constant expression", "+\t\t\t\t\t\t\texpression.generateCode(currentScope, codeStream, false);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\tif ((assignConstant != Constant.NotAConstant)", "-\t\t\t\t\t\t\t&& (assignConstant.typeID() != TypeIds.T_double)) {// TODO (philippe) is this test needed ?", "+\t\t\t\t\t\t\t&& (assignConstant.typeID() != TypeIds.T_double)) { // TODO (philippe) is this test needed ?", "+\t\t\t\t\tif (localBinding.resolvedPosition == -1) {", "+\t\t\t\t\t\tassignConstant = expression.constant;", "+\t\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t * restart code gen because we either:", "+\t\t\t\t\t\t\t * - need the value", "+\t\t\t\t\t\t\t * - the constant can have potential side-effect", "+\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\tlocalBinding.useFlag = LocalVariableBinding.USED;", "+\t\t\t\t\t\t\tthrow new AbortMethod(CodeStream.RESTART_CODE_GEN_FOR_UNUSED_LOCALS_MODE, null);", "+\t\t\t\t\t\t} else if (assignConstant == Constant.NotAConstant) {", "+\t\t\t\t\t\t\t// we only need to generate the value of the expression's constant if it is not a constant expression", "+\t\t\t\t\t\t\texpression.generateCode(currentScope, codeStream, false);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}"]}], "num": 38662}
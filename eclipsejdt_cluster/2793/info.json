{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa4b93e80bc6a9b62d79927f961f5aac", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "427d1a115092dc24cb7059a1d0022c6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "376d52c1cdc65e12a1dbf449737ba06d2101c4f4", "commitAfterChange": "7f3c64574901f5a013fb7527a4bb25411dd2afcf", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType) {", "+\tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType) {", "-\t\tboolean useTiebreakMethod = invocationSite.genericTypeArguments() == null;", "+\t\tInvocationSite tieBreakInvocationSite = new InvocationSite() {", "+\t\t\tpublic TypeBinding[] genericTypeArguments() { return null; } // ignore genericTypeArgs", "+\t\t\tpublic boolean isSuperAccess() { return invocationSite.isSuperAccess(); }", "+\t\t\tpublic boolean isTypeAccess() { return invocationSite.isTypeAccess(); }", "+\t\t\tpublic void setActualReceiverType(ReferenceBinding actualReceiverType) { /* ignore */}", "+\t\t\tpublic void setDepth(int depth) { /* ignore */}", "+\t\t\tpublic void setFieldIndex(int depth) { /* ignore */}", "+\t\t\tpublic int sourceStart() { return invocationSite.sourceStart(); }", "+\t\t\tpublic int sourceEnd() { return invocationSite.sourceStart(); }", "+\t\t};", "-\t\t\t\tMethodBinding tiebreakMethod = useTiebreakMethod ? current.tiebreakMethod() : current;", "+\t\t\t\tMethodBinding tiebreakMethod = current.tiebreakMethod();", "-\t\t\t\t\tMethodBinding acceptable = computeCompatibleMethod(methodToTest, tiebreakMethod.parameters, invocationSite);", "+\t\t\t\t\tMethodBinding acceptable = computeCompatibleMethod(methodToTest, tiebreakMethod.parameters, tieBreakInvocationSite);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2672b2202edcd565396bb8ba2e64423", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "7658885de020459a43d5c54a62e5511e4cf48903", "commitAfterChange": "effc87828d40c0b15d95e17b44487025194ac03b", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tprivate void findVariableName( \t\tchar[] token, \t\tchar[] qualifiedPackageName, \t\tchar[] qualifiedSourceName, \t\tchar[] sourceName, \t\tchar[][] excludeNames, \t\tint dim, \t\tint kind, \t\tint modifiers)", "signatureAfterChange": " \tprivate void findVariableName( \t\tchar[] token, \t\tchar[] qualifiedPackageName, \t\tchar[] qualifiedSourceName, \t\tchar[] sourceName, \t\tchar[][] excludeNames, \t\tint dim, \t\tint kind, \t\tint modifiers)", "diff": ["-\t\t", "-\t\tchar[][] names = CharOperation.NO_CHAR_CHAR;", "-\t\tswitch (kind) {", "-\t\t\tcase FIELD :", "-\t\t\t\tnames = NamingConventions.suggestFieldNames(", "-\t\t\t\t\tjavaProject,", "-\t\t\t\t\tqualifiedPackageName,", "-\t\t\t\t\tqualifiedSourceName,", "-\t\t\t\t\tdim,", "-\t\t\t\t\tmodifiers,", "-\t\t\t\t\texcludeNames);", "-\t\t\t\tbreak;", "-\t\t\tcase LOCAL :", "-\t\t\t\tnames = NamingConventions.suggestLocalVariableNames(", "-\t\t\t\t\tjavaProject,", "-\t\t\t\t\tqualifiedPackageName,", "-\t\t\t\t\tqualifiedSourceName,", "-\t\t\t\t\tdim,", "-\t\t\t\t\texcludeNames);", "-\t\t\t\tbreak;", "-\t\t\tcase ARGUMENT :", "-\t\t\t\tnames = NamingConventions.suggestArgumentNames(", "-\t\t\t\t\tjavaProject,", "-\t\t\t\t\tqualifiedPackageName,", "-\t\t\t\t\tqualifiedSourceName,", "-\t\t\t\t\tdim,", "-\t\t\t\t\texcludeNames);", "-\t\t\t\tbreak;", "-\t\t}", "-\t\tchar[] displayName;", "+\t\tfinal char[] displayName;", "-\t\tnext : for(int i = 0 ; i < names.length ; i++){", "-\t\t\tchar[] name = names[i];", "+\t\tfinal char[] t = token;", "+\t\tfinal char[] q = qualifiedPackageName;", "+\t\tINamingRequestor namingRequestor = new INamingRequestor() {", "+\t\t\tpublic void acceptNameWithPrefixAndSuffix(char[] name) {", "+\t\t\t\taccept(name, R_NAME_PREFIX + R_NAME_SUFFIX);", "+\t\t\t}", "+", "+\t\t\tpublic void acceptNameWithPrefix(char[] name) {", "+\t\t\t\taccept(name, R_NAME_PREFIX);", "+\t\t\t}", "+", "+\t\t\tpublic void acceptNameWithSuffix(char[] name) {", "+\t\t\t\taccept(name, R_NAME_SUFFIX);", "+\t\t\t}", "+", "+\t\t\tpublic void acceptNameWithoutPrefixAndSuffix(char[] name) {", "+\t\t\t\taccept(name, 0);", "+\t\t\t}", "+\t\t\tprivate void accept(char[] name, int prefixAndSuffixRelevance){", "+\t\t\t\tif (CharOperation.prefixEquals(t, name, false)) {", "+\t\t\t\t\tint relevance = computeBaseRelevance();", "+\t\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "+\t\t\t\t\trelevance += computeRelevanceForCaseMatching(t, name);", "+\t\t\t\t\trelevance += prefixAndSuffixRelevance;", "+", "+\t\t\t\t\t// accept result", "+\t\t\t\t\trequestor.acceptVariableName(", "+\t\t\t\t\t\tq,", "+\t\t\t\t\t\tdisplayName,", "+\t\t\t\t\t\tname,", "+\t\t\t\t\t\tname,", "+\t\t\t\t\t\tstartPosition - offset,", "+\t\t\t\t\t\tendPosition - offset,", "+\t\t\t\t\t\trelevance);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t};", "-\t\t\tif (!CharOperation.prefixEquals(token, name, false))", "-\t\t\t\tcontinue next;", "-\t\t\t", "-\t\t\tint relevance = computeBaseRelevance();", "-\t\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\t\trelevance += computeRelevanceForCaseMatching(token, name);", "-\t\t\t", "-\t\t\t// accept result", "-\t\t\trequestor.acceptVariableName(", "-\t\t\t\tqualifiedPackageName,", "-\t\t\t\tdisplayName,", "-\t\t\t\tname,", "-\t\t\t\tname,", "-\t\t\t\tstartPosition - offset,", "-\t\t\t\tendPosition - offset,", "-\t\t\t\trelevance);", "+\t\tswitch (kind) {", "+\t\t\tcase FIELD :", "+\t\t\t\tInternalNamingConventions.suggestFieldNames(", "+\t\t\t\t\tjavaProject,", "+\t\t\t\t\tqualifiedPackageName,", "+\t\t\t\t\tqualifiedSourceName,", "+\t\t\t\t\tdim,", "+\t\t\t\t\tmodifiers,", "+\t\t\t\t\texcludeNames,", "+\t\t\t\t\tnamingRequestor);", "+\t\t\t\tbreak;", "+\t\t\tcase LOCAL :", "+\t\t\t\tInternalNamingConventions.suggestLocalVariableNames(", "+\t\t\t\t\tjavaProject,", "+\t\t\t\t\tqualifiedPackageName,", "+\t\t\t\t\tqualifiedSourceName,", "+\t\t\t\t\tdim,", "+\t\t\t\t\texcludeNames,", "+\t\t\t\t\tnamingRequestor);", "+\t\t\t\tbreak;", "+\t\t\tcase ARGUMENT :", "+\t\t\t\tInternalNamingConventions.suggestArgumentNames(", "+\t\t\t\t\tjavaProject,", "+\t\t\t\t\tqualifiedPackageName,", "+\t\t\t\t\tqualifiedSourceName,", "+\t\t\t\t\tdim,", "+\t\t\t\t\texcludeNames,", "+\t\t\t\t\tnamingRequestor);", "+\t\t\t\tbreak;", "-\t\t"]}], "num": 2793}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3809221609ff7824c8b822ca09d04dec", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01b3beaf2d88ad43cbfe61793c16f96c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "f8e9cc8d760d40e7aca97ebb627c5ab02392d804", "commitAfterChange": "78ca28be54dd37f4936afd7f9f84bc9cf69d2754", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tprivate File getJavaHome()", "signatureAfterChange": "  \tprivate File getJavaHome()", "diff": ["-\tprivate boolean javaHomeChecked;", "-\t\tif (!javaHomeChecked) {", "-\t\t\tjavaHomeChecked = true;", "+\t\tif (!this.javaHomeChecked) {", "+\t\t\tthis.javaHomeChecked = true;", "-\t\t\t\tjavaHomeCache = new File(javaHome);", "-\t\t\t\tif (!javaHomeCache.exists())", "-\t\t\t\t\tjavaHomeCache = null;", "+\t\t\t\tthis.javaHomeCache = new File(javaHome);", "+\t\t\t\tif (!this.javaHomeCache.exists())", "+\t\t\t\t\tthis.javaHomeCache = null;", "-\t\treturn javaHomeCache;", "+\t\treturn this.javaHomeCache;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2efb45e0d532b855b574da4d2ac62e1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "931e434bb3e4b9f62577b10f8123cfc028893969", "commitAfterChange": "c0b519c3b149b13ea0f307f0d3414359b2cf0639", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tprotected void setSyntheticAccessor(FieldBinding fieldBinding, int index, SyntheticMethodBinding syntheticAccessor)", "signatureAfterChange": " protected void setSyntheticAccessor(FieldBinding fieldBinding, int index, SyntheticMethodBinding syntheticAccessor)", "diff": ["-\t// set the matching synthetic accessor", "-\tprotected void setSyntheticAccessor(FieldBinding fieldBinding, int index, SyntheticMethodBinding syntheticAccessor) {", "-\t\tif (index < 0) { // write-access ?", "-\t\t\tsyntheticWriteAccessor = syntheticAccessor;", "-\t    } else {", "-\t\t\tif (syntheticReadAccessors == null) {", "-\t\t\t\tsyntheticReadAccessors = new SyntheticMethodBinding[otherBindings == null ? 1 : otherBindings.length + 1];", "-\t\t\t}", "-\t\t\tsyntheticReadAccessors[index] = syntheticAccessor;", "-\t}", "+// set the matching synthetic accessor", "+protected void setSyntheticAccessor(FieldBinding fieldBinding, int index, SyntheticMethodBinding syntheticAccessor) {", "+\tif (index < 0) { // write-access ?", "+\t\tthis.syntheticWriteAccessor = syntheticAccessor;", "+    } else {", "+\t\tif (this.syntheticReadAccessors == null) {", "+\t\t\tthis.syntheticReadAccessors = new SyntheticMethodBinding[this.otherBindings == null ? 1 : this.otherBindings.length + 1];", "+\t\t}", "+\t\tthis.syntheticReadAccessors[index] = syntheticAccessor;", "+    }", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59d4c43220a755f8edc60e9d10e63d5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "3a7eebe0921eeefbdbf1fe4891891b6335310197", "commitAfterChange": "e8aa72d0e85424c76c1185b7518db6803dde6255", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void generateOptimizedBoolean( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tBranchLabel trueLabel, \t\tBranchLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired)", "diff": ["-\t */", "-\tpublic void generateOptimizedBoolean(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tBranchLabel trueLabel,", "-\t\tBranchLabel falseLabel,", "-\t\tboolean valueRequired) {", "-", "-\t\tif ((constant != Constant.NotAConstant) && (constant.typeID() == T_boolean)) {", "-\t\t\tsuper.generateOptimizedBoolean(", "-\t\t\t\ttrueLabel,", "-\t\t\t\tfalseLabel,", "-\t\t\treturn;", "-\t\t}", "-\t\tswitch ((bits & OperatorMASK) >> OperatorSHIFT) {", "-\t\t\tcase LESS :", "-\t\t\t\tgenerateOptimizedLessThan(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\ttrueLabel,", "-\t\t\t\t\tfalseLabel,", "-\t\t\t\t\tvalueRequired);", "-\t\t\t\treturn;", "-\t\t\tcase LESS_EQUAL :", "-\t\t\t\tgenerateOptimizedLessThanOrEqual(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\ttrueLabel,", "-\t\t\t\t\tfalseLabel,", "-\t\t\t\t\tvalueRequired);", "-\t\t\t\treturn;", "-\t\t\tcase GREATER :", "-\t\t\t\tgenerateOptimizedGreaterThan(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\ttrueLabel,", "-\t\t\t\t\tfalseLabel,", "-\t\t\t\t\tvalueRequired);", "-\t\t\t\treturn;", "-\t\t\tcase GREATER_EQUAL :", "-\t\t\t\tgenerateOptimizedGreaterThanOrEqual(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\ttrueLabel,", "-\t\t\t\t\tfalseLabel,", "-\t\t\t\t\tvalueRequired);", "-\t\t\t\treturn;", "-\t\t\tcase AND :", "-\t\t\t\tgenerateOptimizedLogicalAnd(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\ttrueLabel,", "-\t\t\t\t\tfalseLabel,", "-\t\t\t\t\tvalueRequired);", "-\t\t\t\treturn;", "-\t\t\tcase OR :", "-\t\t\t\tgenerateOptimizedLogicalOr(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\ttrueLabel,", "-\t\t\t\t\tfalseLabel,", "-\t\t\t\t\tvalueRequired);", "-\t\t\t\treturn;", "-\t\t\tcase XOR :", "-\t\t\t\tgenerateOptimizedLogicalXor(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\ttrueLabel,", "-\t\t\t\t\tfalseLabel,", "-\t\t\t\t\tvalueRequired);", "-\t\t\t\treturn;", "-\t\t}", "+ */", "+public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired) {", "+\tif ((this.constant != Constant.NotAConstant) && (this.constant.typeID() == TypeIds.T_boolean)) {", "+\t\treturn;", "+\tswitch ((this.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT) {", "+\t\tcase LESS :", "+\t\t\tgenerateOptimizedLessThan(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tcodeStream,", "+\t\t\t\ttrueLabel,", "+\t\t\t\tfalseLabel,", "+\t\t\t\tvalueRequired);", "+\t\t\treturn;", "+\t\tcase LESS_EQUAL :", "+\t\t\tgenerateOptimizedLessThanOrEqual(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tcodeStream,", "+\t\t\t\ttrueLabel,", "+\t\t\t\tfalseLabel,", "+\t\t\t\tvalueRequired);", "+\t\t\treturn;", "+\t\tcase GREATER :", "+\t\t\tgenerateOptimizedGreaterThan(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tcodeStream,", "+\t\t\t\ttrueLabel,", "+\t\t\t\tfalseLabel,", "+\t\t\t\tvalueRequired);", "+\t\t\treturn;", "+\t\tcase GREATER_EQUAL :", "+\t\t\tgenerateOptimizedGreaterThanOrEqual(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tcodeStream,", "+\t\t\t\ttrueLabel,", "+\t\t\t\tfalseLabel,", "+\t\t\t\tvalueRequired);", "+\t\t\treturn;", "+\t\tcase AND :", "+\t\t\tgenerateOptimizedLogicalAnd(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tcodeStream,", "+\t\t\t\ttrueLabel,", "+\t\t\t\tfalseLabel,", "+\t\t\t\tvalueRequired);", "+\t\t\treturn;", "+\t\tcase OR :", "+\t\t\tgenerateOptimizedLogicalOr(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tcodeStream,", "+\t\t\t\ttrueLabel,", "+\t\t\t\tfalseLabel,", "+\t\t\t\tvalueRequired);", "+\t\t\treturn;", "+\t\tcase XOR :", "+\t\t\tgenerateOptimizedLogicalXor(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tcodeStream,", "+\t\t\t\ttrueLabel,", "+\t\t\t\tfalseLabel,", "+\t\t\t\tvalueRequired);", "+\t\t\treturn;", "+\t}", "+\tsuper.generateOptimizedBoolean(", "+\t\tcurrentScope,", "+\t\tcodeStream,", "+\t\ttrueLabel,", "+\t\tfalseLabel,", "+\t\tvalueRequired);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e1ce6140ac3fbb84ad70236814bd76a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnMemberAccess.java", "commitBeforeChange": "bf1ba1c1732b0be00fbd03cfd8ae394b6a169e63", "commitAfterChange": "debb51f61b0b4a5b1a6926f67a451ba72125546c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding receiverType = receiver.resolveType(scope);", "-\t\tif (receiverType == null || receiverType.isBaseType())", "+\t\tthis.receiverType = receiver.resolveType(scope);", "+\t\tif (this.receiverType == null || this.receiverType.isBaseType())", "-\t\t\tthrow new CompletionNodeFound(this, receiverType, scope);", "+\t\t\tthrow new CompletionNodeFound(this, this.receiverType, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fa2effce93b7f1384e25e6969c41679", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ListRewriteEvent.java", "commitBeforeChange": "a8c43fb1703bc9585d371b45c5bc751b66052e18", "commitAfterChange": "40ace06b6f9aaa2f71ebf049ffa37ed745fa6ef3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic ListRewriteEvent(RewriteEvent[] children)", "signatureAfterChange": " \tpublic ListRewriteEvent(RewriteEvent[] children)", "diff": ["-\t\tfListEntries= new ArrayList(children.length * 2);", "-\t\tfOriginalNodes= new ArrayList(children.length * 2);", "+\t\tthis.listEntries= new ArrayList(children.length * 2);", "+\t\tthis.originalNodes= new ArrayList(children.length * 2);", "-\t\t\tfListEntries.add(curr);", "+\t\t\tthis.listEntries.add(curr);", "-\t\t\t\tfOriginalNodes.add(curr.getOriginalValue());", "+\t\t\t\tthis.originalNodes.add(curr.getOriginalValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8abacac9d49513be76ff61001e1fcd15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tpublic void parseStatements(Parser parser, CompilationUnitDeclaration unit)", "signatureAfterChange": " \t \tpublic void parseStatements(Parser parser, CompilationUnitDeclaration unit)", "diff": ["-\t\tif (isDefaultConstructor){", "-\t\t\tconstructorCall = SuperReference.implicitSuperConstructorCall();", "-\t\t\tconstructorCall.sourceStart = sourceStart;", "-\t\t\tconstructorCall.sourceEnd = sourceEnd; ", "+\t\tif (isDefaultConstructor && this.constructorCall == null){", "+\t\t\tthis.constructorCall = SuperReference.implicitSuperConstructorCall();", "+\t\t\tthis.constructorCall.sourceStart = this.sourceStart;", "+\t\t\tthis.constructorCall.sourceEnd = this.sourceEnd; "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d9666e9738720122829246507c30885", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tint treeSize()", "signatureAfterChange": " \tint treeSize()", "diff": ["-\t\tif (optionalPackageDeclaration != null) {", "+\t\tif (this.optionalPackageDeclaration != null) {", "-\t\tsize += imports.listSize();", "-\t\tsize += types.listSize();", "+\t\tsize += this.imports.listSize();", "+\t\tsize += this.types.listSize();", "-\t\tif (optionalCommentTable != null) {", "-\t\t\tfor (int i = 0; i < optionalCommentTable.length; i++) {", "-\t\t\t\tComment comment = optionalCommentTable[i];", "+\t\tif (this.optionalCommentTable != null) {", "+\t\t\tfor (int i = 0; i < this.optionalCommentTable.length; i++) {", "+\t\t\t\tComment comment = this.optionalCommentTable[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a02e186e1c3dd6273f4e91c4e8026bab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocSingleTypeReference.java", "commitBeforeChange": "1ad299c6e46ed5abccc52b588c8064972a8a8007", "commitAfterChange": "9161de43572385b89c05cb5fcdc58a0f1e197e80", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tTypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tTypeBinding internalResolveType(Scope scope)", "diff": ["-\t\t\t\t\t\treturn resolvedType;", "+\t\t\t\t\t\treturn this.resolvedType;", "-\t\t\treportDeprecatedType(scope);", "-\t\tif (resolvedType instanceof ParameterizedTypeBinding) {", "-\t\t\tresolvedType = ((ParameterizedTypeBinding)resolvedType).type;", "+\t\t\treportDeprecatedType(this.resolvedType, scope);", "+\t\tif (this.resolvedType instanceof ParameterizedTypeBinding) {", "+\t\t\tthis.resolvedType = ((ParameterizedTypeBinding)this.resolvedType).type;", "-\t\treturn resolvedType;", "+\t\treturn this.resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2070a02cdbf92e0d911bcac7b7f883b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompilationUnitTests.java", "commitBeforeChange": "fa78e4ce6e57928678189feff94d4c736b9ff2c4", "commitAfterChange": "0f248db43070dcf1bc4390d09f1d6625c113fc80", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 5, "signatureBeforeChange": "  private ICompilationUnit workingCopy(String source) throws JavaModelException", "signatureAfterChange": "  private ICompilationUnit createWorkingCopy(String source) throws JavaModelException", "diff": ["+", "+private ICompilationUnit createWorkingCopy(String source) throws JavaModelException {", "+\tthis.workingCopy = getCompilationUnit(\"/P/src/p/Y.java\").getWorkingCopy(new WorkingCopyOwner(){}, null, null);", "+\tthis.workingCopy.getBuffer().setContents(source);", "+\tthis.workingCopy.makeConsistent(null);", "+\treturn workingCopy;", "-", "-private ICompilationUnit workingCopy(String source) throws JavaModelException {", "-\tICompilationUnit workingCopy = getCompilationUnit(\"/P/src/p/Y.java\").getWorkingCopy(new WorkingCopyOwner(){}, null, null);", "-\tworkingCopy.getBuffer().setContents(source);", "-\tworkingCopy.makeConsistent(null);", "-\treturn workingCopy;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccc912eedea5f3f3f01753159f11f3b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void enterCompilationUnit()", "signatureAfterChange": " public void enterCompilationUnit()", "diff": ["-\tinfoStack = new Stack();", "-\thandleStack= new Stack();", "-\tinfoStack.push(unitInfo);", "-\thandleStack.push(unit);", "+\tthis.infoStack = new Stack();", "+\tthis.handleStack= new Stack();", "+\tthis.infoStack.push(this.unitInfo);", "+\tthis.handleStack.push(this.unit);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d536c1e48d973f3460bbea24ff5447bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/DefaultProblem.java", "commitBeforeChange": "38626b9db6f4c23d6e28ba50c8dfcdc942780467", "commitAfterChange": "3f8b6386f2cd9ac0059fbfe82973e311a492a851", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic String toString()", "signatureAfterChange": "  \tpublic String toString()", "diff": ["-\t\tString s = \"Pb(\" + (id & IgnoreCategoriesMask) + \") \"; //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tif (message != null) {", "-\t\t\ts += message;", "+\t\tString s = \"Pb(\" + (this.id & IgnoreCategoriesMask) + \") \"; //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tif (this.message != null) {", "+\t\t\ts += this.message;", "-\t\t\tif (arguments != null)", "-\t\t\t\tfor (int i = 0; i < arguments.length; i++)", "-\t\t\t\t\ts += \" \" + arguments[i]; //$NON-NLS-1$", "+\t\t\tif (this.arguments != null)", "+\t\t\t\tfor (int i = 0; i < this.arguments.length; i++)", "+\t\t\t\t\ts += \" \" + this.arguments[i]; //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f33ff37888a0aba1488b6d976eb264da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " private void buildCUSource()", "signatureAfterChange": " private void buildCUSource()", "diff": ["-\tif (localVarNames != null) {", "-\t\tfor (int i = 0, max = localVarNames.length; i < max; i++) {", "+\tif (this.localVarNames != null) {", "+\t\tfor (int i = 0, max = this.localVarNames.length; i < max; i++) {", "-\t\t\tbuffer.append(localVarTypeNames[i]);", "+\t\t\tbuffer.append(this.localVarTypeNames[i]);", "-\t\t\tbuffer.append(localVarNames[i]);", "+\t\t\tbuffer.append(this.localVarNames[i]);", "-\tstartPosOffset = buffer.length();", "-\tbuffer.append(codeSnippet);", "+\tthis.startPosOffset = buffer.length();", "+\tbuffer.append(this.codeSnippet);"]}], "num": 24716}
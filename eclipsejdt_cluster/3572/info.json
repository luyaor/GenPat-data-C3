{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "61e4336f832d563717ea5ef5391c6325", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d7cdd0995ebf930e5ff114a38501550", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 27, "signatureBeforeChange": " public TypeReference getTypeReference(int dim)", "signatureAfterChange": " public TypeReference getTypeReference(int dim)", "diff": ["-\tint length;", "-\tif ((length = identifierLengthStack[identifierLengthPtr--]) == 1) {", "-\t\t// single variable reference", "+\tint length = identifierLengthStack[identifierLengthPtr--];", "+\tif (length < 0) { //flag for precompiled type reference on base types", "+\t\tTypeReference ref = TypeReference.baseTypeReference(-length, dim);", "+\t\tref.sourceStart = intStack[intPtr--];", "-\t\t\tSingleTypeReference ref = ", "-\t\t\t\tnew SingleTypeReference(", "-\t\t\t\t\tidentifierStack[identifierPtr], ", "-\t\t\t\t\tidentifierPositionStack[identifierPtr--]);", "-\t\t\tif (reportReferenceInfo) {", "-\t\t\t\trequestor.acceptTypeReference(ref.token, ref.sourceStart);", "-\t\t\t}", "-\t\t\treturn ref;", "+\t\t\tref.sourceEnd = intStack[intPtr--];", "-\t\t\tArrayTypeReference ref = ", "-\t\t\t\tnew ArrayTypeReference(", "-\t\t\t\t\tidentifierStack[identifierPtr], ", "-\t\t\t\t\tdim, ", "-\t\t\t\t\tidentifierPositionStack[identifierPtr--]); ", "+\t\t\tintPtr--; // no need to use this position as it is an array", "-\t\t\tif (reportReferenceInfo) {", "-\t\t\t\trequestor.acceptTypeReference(ref.token, ref.sourceStart);", "-\t\t\t}", "-\t\t\treturn ref;", "+\t\tif (reportReferenceInfo){", "+\t\t\t\trequestor.acceptTypeReference(ref.getParameterizedTypeName(), ref.sourceStart, ref.sourceEnd);", "+\t\t}", "+\t\treturn ref;", "-\t\tif (length < 0) { //flag for precompiled type reference on base types", "-\t\t\tTypeReference ref = TypeReference.baseTypeReference(-length, dim);", "-\t\t\tref.sourceStart = intStack[intPtr--];", "-\t\t\tif (dim == 0) {", "-\t\t\t\tref.sourceEnd = intStack[intPtr--];", "-\t\t\t} else {", "-\t\t\t\tintPtr--; // no need to use this position as it is an array", "-\t\t\t\tref.sourceEnd = endPosition;", "-\t\t\t}", "-\t\t\tif (reportReferenceInfo){", "-\t\t\t\t\trequestor.acceptTypeReference(ref.getTypeName(), ref.sourceStart, ref.sourceEnd);", "+\t\tint numberOfIdentifiers = this.genericsIdentifiersLengthStack[this.genericsIdentifiersLengthPtr--];", "+\t\tif (length != numberOfIdentifiers || this.genericsLengthStack[this.genericsLengthPtr] != 0) {", "+\t\t\t// generic type", "+\t\t\tTypeReference ref = getTypeReferenceForGenericType(dim, length, numberOfIdentifiers);", "+\t\t\tif (reportReferenceInfo) {", "+\t\t\t\tif (length == 1 && numberOfIdentifiers == 1) {", "+\t\t\t\t\tParameterizedSingleTypeReference parameterizedSingleTypeReference = (ParameterizedSingleTypeReference) ref;", "+\t\t\t\t\trequestor.acceptTypeReference(parameterizedSingleTypeReference.token, parameterizedSingleTypeReference.sourceStart);", "+\t\t\t\t} else {", "+\t\t\t\t\tParameterizedQualifiedTypeReference parameterizedQualifiedTypeReference = (ParameterizedQualifiedTypeReference) ref;", "+\t\t\t\t\trequestor.acceptTypeReference(parameterizedQualifiedTypeReference.tokens, parameterizedQualifiedTypeReference.sourceStart, parameterizedQualifiedTypeReference.sourceEnd);", "+\t\t\t\t}", "-\t\t} else { //Qualified variable reference", "+\t\t} else if (length == 1) {", "+\t\t\t// single variable reference", "+\t\t\tthis.genericsLengthPtr--; // pop the 0", "+\t\t\tif (dim == 0) {", "+\t\t\t\tSingleTypeReference ref = ", "+\t\t\t\t\tnew SingleTypeReference(", "+\t\t\t\t\t\tidentifierStack[identifierPtr], ", "+\t\t\t\t\t\tidentifierPositionStack[identifierPtr--]);", "+\t\t\t\tif (reportReferenceInfo) {", "+\t\t\t\t\trequestor.acceptTypeReference(ref.token, ref.sourceStart);", "+\t\t\t\t}", "+\t\t\t\treturn ref;", "+\t\t\t} else {", "+\t\t\t\tArrayTypeReference ref = ", "+\t\t\t\t\tnew ArrayTypeReference(", "+\t\t\t\t\t\tidentifierStack[identifierPtr], ", "+\t\t\t\t\t\tdim, ", "+\t\t\t\t\t\tidentifierPositionStack[identifierPtr--]); ", "+\t\t\t\tref.sourceEnd = endPosition;", "+\t\t\t\tif (reportReferenceInfo) {", "+\t\t\t\t\trequestor.acceptTypeReference(ref.token, ref.sourceStart);", "+\t\t\t\t}", "+\t\t\t\treturn ref;", "+\t\t\t}", "+\t\t} else {//Qualified variable reference", "+\t\t\tthis.genericsLengthPtr--;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe7b3aac054945d06dd67d98dc01a5dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "0907dc6b12ade48990b856e3edfafde71195d9de", "commitAfterChange": "2fd2027f1bd96549ae174a672a3e75a3fbef9f00", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator)", "signatureAfterChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "diff": ["+\t */", "+\tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode) {", "-\t\tbuffer.append(Util.bind(\"classfileformat.magicnumber\")); //$NON-NLS-1$", "-\t\tbuffer.append(Integer.toHexString(classFileReader.getMagic()).toUpperCase());", "-\t\twriteNewLine(buffer, lineSeparator, 0);", "-\t\tbuffer.append(Util.bind(\"classfileformat.minorversion\")); //$NON-NLS-1$", "-\t\tbuffer.append(classFileReader.getMinorVersion());", "-\t\twriteNewLine(buffer, lineSeparator, 0);", "-\t\tbuffer.append(Util.bind(\"classfileformat.majorversion\")); //$NON-NLS-1$", "-\t\tbuffer.append(classFileReader.getMajorVersion());", "-\t\twriteNewLine(buffer, lineSeparator, 0);", "-\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\tif (mode == IClassFileDisassembler.DETAILED) {", "+\t\t\tint minorVersion = classFileReader.getMinorVersion();", "+\t\t\tint majorVersion = classFileReader.getMajorVersion();", "+\t\t\tbuffer.append(Util.bind(\"classfileformat.magicnumber\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(Integer.toHexString(classFileReader.getMagic()).toUpperCase());", "+\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t\tbuffer.append(Util.bind(\"classfileformat.minorversion\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(minorVersion);", "+\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t\tbuffer.append(Util.bind(\"classfileformat.majorversion\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(majorVersion);", "+\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t\tif (minorVersion == 3 && majorVersion == 45) {", "+\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\") +\" 1.1\");//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t} else if (minorVersion == 0 && majorVersion == 46) {", "+\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\") + \"1.2\");//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t} else if (minorVersion == 0 && majorVersion == 47) {", "+\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\") + \"1.3\");//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t} else if (minorVersion == 0 && majorVersion == 48) {", "+\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\") + \"1.4\");//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t}", "+\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t}", "-\t\tdisassembleTypeMembers(classFileReader, buffer, lineSeparator, 1);", "+\t\tdisassembleTypeMembers(classFileReader, buffer, lineSeparator, 1, mode);"]}], "num": 3572}
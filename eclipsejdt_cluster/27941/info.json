{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "845272cc88200ba734068c236a7a1e5c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3144490005c748f9729626fafcb71b37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 122, "signatureBeforeChange": " public void testPackageInfo01() throws CoreException", "signatureAfterChange": " public void testBug300576b() throws CoreException", "diff": ["-// Ensure that package-info doesn't cause AbortCompilation from the HierarchyResolver.", "-public void testPackageInfo01() throws CoreException {", "-\t\tcreateJavaProject(\"P\", new String[] {\"src\"}, new String[] {\"JCL_LIB\"}, new String[0], \"bin\");", "-", "-\t\tcreateFolder(\"/P/src/p\");", "-\t\tcreateFile(", "-\t\t\t\t\"/P/src/p/package-info.java\",", "-\t\t\t\t\"/** Doc comment*/ package p;\\n\"", "-\t\t\t);", "-\t\tcreateFile(", "-\t\t\t\t\"/P/src/p/A.java\",", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class A {\\n\" +", "-\t\t\t\t\"}\\n\"", "-\t\t\t);", "-\t\tcreateFile(", "-\t\t\t\t\"/P/src/p/C.java\",", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class C extends A {\\n\" +", "-\t\t\t\t\"    void foo() {\\n\" +", "-\t\t\t\t\"        class Bar extends C {}\\n\" +", "-\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\"}\\n\"", "-\t\t\t);", "-\t\tICompilationUnit cu = getCompilationUnit(\"/P/src/p/C.java\");", "-\t\tIType type = cu.getType(\"C\");", "-\t\tIMethod method = type.getMethod(\"foo\", new String[0]);", "-\t\tIType local = method.getType(\"Bar\", 1);", "-\t\tITypeHierarchy cHierarchy = type.newTypeHierarchy(null);", "-\t\tassertTrue(\"Local type should be in the hierarchy\", cHierarchy.contains(local));", "-\t\tdeleteProject(\"P\");", "+// test that a bogus java.lang.Enum (non-generic) doesn't cause NPE", "+public void testBug300576b() throws CoreException {", "+\tIJavaProject prj = null;", "+\ttry {", "+\t\tprj = createJavaProject(\"Bug300576\", new String[] {\"src\"}, new String[] {\"JCL_LIB\"}, \"bin\", \"1.5\");", "+\t\tcreateFolder(\"/Bug300576/src/p\");", "+\t\tcreateFolder(\"/Bug300576/src/java/lang\");", "+\t\tcreateFile(\"/Bug300576/src/java/lang/Enum.java\",", "+\t\t\t\t\"package java.lang;\\n\" +", "+\t\t\t\t\"public class Enum {}\\n\");", "+\t\tcreateFile(\"/Bug300576/src/p/Outer.java\",", "+\t\t\t\t\"package p;\\n\" + ", "+\t\t\t\t\"class Outer {\\n\" + ", "+\t\t\t\t\"    enum A {\\n\" + ", "+\t\t\t\t\"        GREEN, DARK_GREEN, BLACK;\\n\" +", "+\t\t\t\t\"        /** Javadoc of getNext() */\\n\" + ", "+\t\t\t\t\"        A getNext() {\\n\" + ", "+\t\t\t\t\"            switch (this) {\\n\" + ", "+\t\t\t\t\"                case GREEN : return DARK_GREEN;\\n\" + ", "+\t\t\t\t\"                case DARK_GREEN : return BLACK;\\n\" + ", "+\t\t\t\t\"                case BLACK : return GREEN;\\n\" + ", "+\t\t\t\t\"                default : return null;\\n\" + ", "+\t\t\t\t\"            }\\n\" + ", "+\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"    {\\n\" + ", "+\t\t\t\t\"        A a= A.GREEN.getNext();\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"}\\n\");", "+\t\tIType a = getCompilationUnit(\"Bug300576\", \"src\", \"p\", \"Outer.java\").getType(\"Outer\").getType(\"A\");", "+\t\tIRegion region = JavaCore.newRegion();", "+\t\tregion.add(getPackageFragmentRoot(\"Bug300576\", \"src\"));", "+\t\tITypeHierarchy hierarchy = prj.newTypeHierarchy(a, region, new NullProgressMonitor());", "+\t\tassertHierarchyEquals(", "+\t\t\t\t\"Focus: A [in Outer [in Outer.java [in p [in src [in Bug300576]]]]]\\n\" + ", "+\t\t\t\t\"Super types:\\n\" + ", "+\t\t\t\t\"Sub types:\\n\",", "+\t\t\t\thierarchy);", "+\t} finally {", "+\t\tif (prj != null)", "+\t\t\tdeleteProject(prj);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97375b32db6e14d61291783c064b7f87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "f51d6f5a0e9a386694d73d0c3aec5b18e2ce1002", "commitAfterChange": "4ec516fd83ba9f8d854c904c0afabe8bb5fc0412", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static IClasspathContainer getClasspathContainer(final IPath containerPath, final IJavaProject project) throws JavaModelException", "signatureAfterChange": " \tpublic static IClasspathContainer getClasspathContainer(final IPath containerPath, final IJavaProject project) throws JavaModelException", "diff": ["-\t", "-\t\tMap projectContainers = (Map)JavaModelManager.Containers.get(project);", "-\t\tif (projectContainers == null){", "-\t\t\tprojectContainers = new HashMap(1);", "-\t\t\tJavaModelManager.Containers.put(project, projectContainers);", "-\t\t}", "-\t\tIClasspathContainer container = (IClasspathContainer)projectContainers.get(containerPath);", "-\t", "+", "+\t\tIClasspathContainer container = JavaModelManager.containerGet(project, containerPath);", "+", "-\t\t\t\tprojectContainers.put(containerPath, JavaModelManager.ContainerInitializationInProgress); // avoid initialization cycles", "+\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "+\t\t\t\t\tSystem.out.println(\"CPContainer INIT - triggering initialization of: [\"+project.getElementName()+\"] \" + containerPath + \" using initializer: \"+ initializer); //$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$", "+\t\t\t\t\tnew Exception(\"FAKE exception for dumping current CPContainer ([\"+project.getElementName()+\"] \"+ containerPath+ \")INIT invocation stack trace\").printStackTrace(); //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$", "+\t\t\t\t}", "+\t\t\t\tJavaModelManager.containerPut(project, containerPath, JavaModelManager.ContainerInitializationInProgress); // avoid initialization cycles", "-\t\t\t\t\tcontainer = (IClasspathContainer)projectContainers.get(containerPath);", "+\t\t\t\t\tcontainer = JavaModelManager.containerGet(project, containerPath);", "-\t\t\t\t\tif (!ok) JavaModelManager.Containers.put(project, null); // flush cache", "-\t\t\t\t}", "-\t\t\t\tif (container != null){", "-\t\t\t\t\tprojectContainers.put(containerPath, container);", "+\t\t\t\t\tif (!ok) JavaModelManager.containerPut(project, containerPath, null); // flush cache", "-\t\t\t\t\tSystem.out.print(\"CPContainer INIT - after resolution: \" + containerPath + \" --> \"); //$NON-NLS-2$//$NON-NLS-1$", "+\t\t\t\t\tSystem.out.print(\"CPContainer INIT - after resolution: [\"+project.getElementName()+\"] \" + containerPath + \" --> \"); //$NON-NLS-2$//$NON-NLS-1$//$NON-NLS-3$", "+\t\t\t} else {", "+\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "+\t\t\t\t\tSystem.out.println(\"CPContainer INIT - no initializer found for: \"+project.getElementName()+\"] \" + containerPath); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd7eed0e7ebf1bacb18761bca2082742", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "51ef1f3e636c416c08f983016f64f795f2b9cc74", "commitAfterChange": "9d3908e6916e224f861c3acffb456d39563ef22b", "methodNumberBeforeChange": 187, "methodNumberAfterChange": 187, "signatureBeforeChange": " \tpublic void test183()", "signatureAfterChange": " \tpublic void test183()", "diff": ["-\t\tMap customOptions = getCompilerOptions();", "-\t\t\t\"1. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"\tObject a2 = (Hashtable) o;\\n\" + ", "-\t\t\t\"\t             ^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Hashtable is a raw type. References to generic type Hashtable<K,V> should be parameterized\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tObject a1 = (Hashtable<String,Integer>) d;\\n\" + ", "+\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from Dictionary<String,Integer> to Hashtable<String,Integer>\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tObject a2 = (Hashtable) o;\\n\" + ", "+\t\t\t\"\t            ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from Object to Hashtable\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tObject a3 = (Hashtable<Float, Double>) d;\\n\" + ", "+\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from Dictionary<String,Integer> to Hashtable<Float,Double>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 13)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tObject a4 = (Hashtable<String,Integer>) o;\\n\" + ", "+\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from Object to Hashtable<String,Integer>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 18)\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 24)\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 22)\\n\" + ", "+\t\t\t\"\tObject a6 = (Z2) z1;\\n\" + ", "+\t\t\t\"\t            ^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from Z1 to Z2\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 24)\\n\" + ", "-\t\t\t\"6. WARNING in X.java (at line 27)\\n\" + ", "+\t\t\t\"10. WARNING in X.java (at line 27)\\n\" + ", "-\t\t\t\"----------\\n\",", "-\t\t\tnull,", "-\t\t\ttrue,", "-\t\t\tcustomOptions);", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"11. WARNING in X.java (at line 27)\\n\" + ", "+\t\t\t\"\tObject a7 = (Hashtable<String,Integer>) z3;\\n\" + ", "+\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from Z3 to Hashtable<String,Integer>\\n\" + ", "+\t\t\t\"----------\\n\");"]}], "num": 27941}
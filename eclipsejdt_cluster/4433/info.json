{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d269471600ebdce8e628a462b35123c0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ad70f503f5c608370158a4fd6d8527c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "251e5030d501e3ac46efed7da2423b08b9bbc426", "commitAfterChange": "2e311e7a7c2090e80873156db9c9652e786f039d", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void recordComment(int token)", "signatureAfterChange": " public void recordComment(int token)", "diff": ["-\ttry {", "-\t\tthis.commentStops[++this.commentPtr] = stopPosition;", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\tint oldStackLength = this.commentStops.length;", "-\t\tint[] oldStack = this.commentStops;", "-\t\tthis.commentStops = new int[oldStackLength + 30];", "-\t\tSystem.arraycopy(oldStack, 0, this.commentStops, 0, oldStackLength);", "-\t\tthis.commentStops[this.commentPtr] = stopPosition;", "+\tint length = this.commentStops.length;", "+\tif (++this.commentPtr >=  length) {", "+\t\tSystem.arraycopy(this.commentStops, 0, this.commentStops = new int[length + 30], 0, length);", "-\t\tint[] old = this.commentStarts;", "-\t\tthis.commentStarts = new int[oldStackLength + 30];", "-\t\tSystem.arraycopy(old, 0, this.commentStarts, 0, oldStackLength);", "+\t\tSystem.arraycopy(this.commentStarts, 0, this.commentStarts = new int[length + 30], 0, length);", "-", "-\t//the buffer is of a correct size here", "+\tthis.commentStops[this.commentPtr] = stopPosition;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85dd5ea79c731a86e356a6e9e523a982", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "7bcb99e7ad84de70464891787abf51d43b804a12", "commitAfterChange": "8023b6f511673fc49005352ca31569dabe76c387", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void recordComment(int token)", "signatureAfterChange": " public void recordComment(int token)", "diff": ["-\ttry {", "-\t\tthis.commentStops[++this.commentPtr] = stopPosition;", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\tint oldStackLength = this.commentStops.length;", "-\t\tint[] oldStack = this.commentStops;", "-\t\tthis.commentStops = new int[oldStackLength + 30];", "-\t\tSystem.arraycopy(oldStack, 0, this.commentStops, 0, oldStackLength);", "-\t\tthis.commentStops[this.commentPtr] = stopPosition;", "+\tint length = this.commentStops.length;", "+\tif (++this.commentPtr >=  length) {", "+\t\tSystem.arraycopy(this.commentStops, 0, this.commentStops = new int[length + 30], 0, length);", "-\t\tint[] old = this.commentStarts;", "-\t\tthis.commentStarts = new int[oldStackLength + 30];", "-\t\tSystem.arraycopy(old, 0, this.commentStarts, 0, oldStackLength);", "+\t\tSystem.arraycopy(this.commentStarts, 0, this.commentStarts = new int[length + 30], 0, length);", "-", "-\t//the buffer is of a correct size here", "+\tthis.commentStops[this.commentPtr] = stopPosition;"]}], "num": 4433}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d11d9a187ed47a4e54c9c6ccc8ce465", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "316970d7caa95ec4184408f572e6b5ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess expression)", "signatureAfterChange": "  \tpublic EnumDeclaration convert(org.eclipse.jdt.internal.compiler.ast.EnumDeclaration enumDeclaration)", "diff": ["-\t}", "-\tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess expression) {", "-\t\tTypeLiteral typeLiteral = this.ast.newTypeLiteral();", "-\t\tif (this.resolveBindings) {", "-\t\t\tthis.recordNodes(typeLiteral, expression);", "-\t\t}", "-\t\ttypeLiteral.setSourceRange(expression.sourceStart, expression.sourceEnd - expression.sourceStart + 1);", "-\t\ttypeLiteral.setType(convertType(expression.type));", "-\t\treturn typeLiteral;", "-\t}", "+", "+\tpublic EnumDeclaration convert(org.eclipse.jdt.internal.compiler.ast.EnumDeclaration enumDeclaration) {", "+\t\tcheckCanceled();", "+\t\tEnumDeclaration enumDeclaration2 = this.ast.newEnumDeclaration();", "+\t\tint modifiers = enumDeclaration.modifiers;", "+\t\tmodifiers &= ~IConstants.AccInterface; // remove AccInterface flags", "+\t\tmodifiers &= CompilerModifiers.AccJustFlag;", "+\t\tif (modifiers != 0) {", "+\t\t\tsetModifiers(enumDeclaration2, enumDeclaration);", "+\t\t}", "+\t\tSimpleName typeName = this.ast.newSimpleName(new String(enumDeclaration.name));", "+\t\ttypeName.setSourceRange(enumDeclaration.sourceStart, enumDeclaration.sourceEnd - enumDeclaration.sourceStart + 1);", "+\t\tenumDeclaration2.setName(typeName);", "+\t\tenumDeclaration2.setSourceRange(enumDeclaration.declarationSourceStart, enumDeclaration.bodyEnd - enumDeclaration.declarationSourceStart + 1);", "+\t\t", "+\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference[] superInterfaces = enumDeclaration.superInterfaces;", "+\t\tif (superInterfaces != null) {", "+\t\t\tfor (int index = 0, length = superInterfaces.length; index < length; index++) {", "+\t\t\t\tenumDeclaration2.superInterfaceTypes().add(convertType(superInterfaces[index]));", "+\t\t\t}\t\t\t\t\t", "+\t\t}", "+\t\tbuildBodyDeclarations(enumDeclaration, enumDeclaration2);", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(enumDeclaration2, enumDeclaration);", "+\t\t\trecordNodes(typeName, enumDeclaration);", "+\t\t\tenumDeclaration2.resolveBinding();", "+\t\t}", "+\t\treturn enumDeclaration2;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df3b1513fe11d9368f2296afa573d11e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 90, "signatureBeforeChange": "  \tpublic EnumDeclaration convert(org.eclipse.jdt.internal.compiler.ast.EnumDeclaration enumDeclaration)", "signatureAfterChange": " \t \tprivate EnumDeclaration convertToEnumDeclaration(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration)", "diff": ["-", "-\tpublic EnumDeclaration convert(org.eclipse.jdt.internal.compiler.ast.EnumDeclaration enumDeclaration) {", "-\t\tcheckCanceled();", "-\t\tEnumDeclaration enumDeclaration2 = this.ast.newEnumDeclaration();", "-\t\tint modifiers = enumDeclaration.modifiers;", "-\t\tmodifiers &= ~IConstants.AccInterface; // remove AccInterface flags", "-\t\tmodifiers &= CompilerModifiers.AccJustFlag;", "-\t\tif (modifiers != 0) {", "-\t\t\tsetModifiers(enumDeclaration2, enumDeclaration);", "-\t\t}", "-\t\tSimpleName typeName = this.ast.newSimpleName(new String(enumDeclaration.name));", "-\t\ttypeName.setSourceRange(enumDeclaration.sourceStart, enumDeclaration.sourceEnd - enumDeclaration.sourceStart + 1);", "-\t\tenumDeclaration2.setName(typeName);", "-\t\tenumDeclaration2.setSourceRange(enumDeclaration.declarationSourceStart, enumDeclaration.bodyEnd - enumDeclaration.declarationSourceStart + 1);", "-\t\t", "-\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference[] superInterfaces = enumDeclaration.superInterfaces;", "-\t\tif (superInterfaces != null) {", "-\t\t\tfor (int index = 0, length = superInterfaces.length; index < length; index++) {", "-\t\t\t\tenumDeclaration2.superInterfaceTypes().add(convertType(superInterfaces[index]));", "-\t\t\t}\t\t\t\t\t", "-\t\t}", "-\t\tbuildBodyDeclarations(enumDeclaration, enumDeclaration2);", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(enumDeclaration2, enumDeclaration);", "-\t\t\trecordNodes(typeName, enumDeclaration);", "-\t\t\tenumDeclaration2.resolveBinding();", "-\t\t}", "-\t\treturn enumDeclaration2;", "+\tprivate EnumDeclaration convertToEnumDeclaration(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration) {", "+\t\tcheckCanceled();", "+\t\tEnumDeclaration enumDeclaration2 = this.ast.newEnumDeclaration();", "+\t\tint modifiers = typeDeclaration.modifiers;", "+\t\tmodifiers &= ~IConstants.AccInterface; // remove AccInterface flags", "+\t\tmodifiers &= CompilerModifiers.AccJustFlag;", "+\t\tif (modifiers != 0) {", "+\t\t\tsetModifiers(enumDeclaration2, typeDeclaration);", "+\t\t}", "+\t\tSimpleName typeName = this.ast.newSimpleName(new String(typeDeclaration.name));", "+\t\ttypeName.setSourceRange(typeDeclaration.sourceStart, typeDeclaration.sourceEnd - typeDeclaration.sourceStart + 1);", "+\t\tenumDeclaration2.setName(typeName);", "+\t\tenumDeclaration2.setSourceRange(typeDeclaration.declarationSourceStart, typeDeclaration.bodyEnd - typeDeclaration.declarationSourceStart + 1);", "+\t\t", "+\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference[] superInterfaces = typeDeclaration.superInterfaces;", "+\t\tif (superInterfaces != null) {", "+\t\t\tfor (int index = 0, length = superInterfaces.length; index < length; index++) {", "+\t\t\t\tenumDeclaration2.superInterfaceTypes().add(convertType(superInterfaces[index]));", "+\t\t\t}\t\t\t\t\t", "+\t\t}", "+\t\tbuildBodyDeclarations(typeDeclaration, enumDeclaration2);", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(enumDeclaration2, typeDeclaration);", "+\t\t\trecordNodes(typeName, typeDeclaration);", "+\t\t\tenumDeclaration2.resolveBinding();", "+\t\t}", "+\t\treturn enumDeclaration2;", "+\t}"]}], "num": 13362}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c11d55bbffd008650dc9c8ffebecae92", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a81be26aa0af7d0d2753f0508d4923c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJarFileToIndex.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t\t\tIIndex index = manager.getIndexForUpdate(this.indexPath, false, /*do not reuse index file*/ false /*do not create if none*/);", "+\t\t\tIIndex index = manager.getIndexForUpdate(this.containerPath, false, /*do not reuse index file*/ false /*do not create if none*/);", "-\t\t\t\t\tJobManager.verbose(\"-> no indexing required (index already exists) for \" + this.indexPath); //$NON-NLS-1$", "+\t\t\t\t\tJobManager.verbose(\"-> no indexing required (index already exists) for \" + this.containerPath); //$NON-NLS-1$", "-\t\t\tindex = manager.getIndexForUpdate(this.indexPath, true, /*reuse index file*/ true /*create if none*/);", "+\t\t\tindex = manager.getIndexForUpdate(this.containerPath, true, /*reuse index file*/ true /*create if none*/);", "-\t\t\t\t\tJobManager.verbose(\"-> index could not be created for \" + this.indexPath); //$NON-NLS-1$", "+\t\t\t\t\tJobManager.verbose(\"-> index could not be created for \" + this.containerPath); //$NON-NLS-1$", "-\t\t\t\t\tJobManager.verbose(\"-> index for \" + this.indexPath + \" just got deleted\"); //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t\tJobManager.verbose(\"-> index for \" + this.containerPath + \" just got deleted\"); //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [AddJarFileToIndex.execute()] Creating ZipFile on \" + this.indexPath); //$NON-NLS-1$\t//$NON-NLS-2$", "-\t\t\t\t\tzip = new ZipFile(this.indexPath.toFile());", "-\t\t\t\t\tzipFilePath = (Path) this.indexPath;", "+\t\t\t\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [AddJarFileToIndex.execute()] Creating ZipFile on \" + this.containerPath); //$NON-NLS-1$\t//$NON-NLS-2$", "+\t\t\t\t\tzip = new ZipFile(this.containerPath.toFile());", "+\t\t\t\t\tzipFilePath = (Path) this.containerPath;", "-\t\t\t\tindex = manager.recreateIndex(this.indexPath);", "+\t\t\t\tindex = manager.recreateIndex(this.containerPath);", "-\t\t\t\t\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getZipEntryByteContent(ze, zip);", "-\t\t\t\t\t\t// Add the name of the file to the index", "-\t\t\t\t\t\tindex.add(", "-\t\t\t\t\t\t\tnew JarFileEntryDocument(ze, classFileBytes, zipFilePath),", "-\t\t\t\t\t\t\tnew BinaryIndexer(true));", "+\t\t\t\t\t\tfinal byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getZipEntryByteContent(ze, zip);", "+\t\t\t\t\t\tSearchParticipant participant = SearchEngine.getDefaultSearchParticipant();", "+\t\t\t\t\t\tJarFileEntryDocument entryDocument = new JarFileEntryDocument(ze, null, zipFilePath);", "+\t\t\t\t\t\tSearchDocument document = new JavaSearchDocument(entryDocument.getName(), participant) {", "+\t\t\t\t\t\t\tpublic byte[] getByteContents() {", "+\t\t\t\t\t\t\t\treturn classFileBytes;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tpublic String toString() {", "+\t\t\t\t\t\t\t\treturn \"JarEntryDocument for \" + getPath(); //$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t};", "+\t\t\t\t\t\tthis.manager.indexDocument(document, participant, index);", "-\t\t\t\tJobManager.verbose(\"-> failed to index \" + this.indexPath + \" because of the following exception:\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tJobManager.verbose(\"-> failed to index \" + this.containerPath + \" because of the following exception:\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tmanager.removeIndex(this.indexPath);", "+\t\t\tmanager.removeIndex(this.containerPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd6eb003388dbfe78ab61a354a659418", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJarFileToIndex.java", "commitBeforeChange": "2acf337b771d06ad716c2ae54bdb8443b5b5d1d6", "commitAfterChange": "28f793f875e5d5b5aa1f2b69f1f41ea8e36715ac", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "\t \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-}\t", "-\t\t", "-\t\tif (progressMonitor != null && progressMonitor.isCanceled()) return COMPLETE;", "+", "+\t\tif (progressMonitor != null && progressMonitor.isCanceled()) return true;", "+", "-\t\t\tIPath indexedPath = this.path;", "-\t\t\tIIndex index = (IIndex) manager.getIndex(indexedPath, false /*do not reuse index file*/, false /*do not create if none*/);", "+\t\t\tIIndex index = (IIndex) manager.getIndex(this.indexPath, false, /*do not reuse index file*/ false /*do not create if none*/);", "-\t\t\t\tif (JobManager.VERBOSE) ", "-\t\t\t\t\tJobManager.verbose(\"-> no indexing required (index already exists) for \" + this.path); //$NON-NLS-1$", "-\t\t\t\treturn COMPLETE;", "+\t\t\t\tif (JobManager.VERBOSE)", "+\t\t\t\t\tJobManager.verbose(\"-> no indexing required (index already exists) for \" + this.indexPath); //$NON-NLS-1$", "+\t\t\t\treturn true;", "-\t\t\tindex = manager.getIndex(indexedPath, true /*reuse index file*/, true /*create if none*/);", "+\t\t\tindex = manager.getIndex(this.indexPath, true, /*reuse index file*/ true /*create if none*/);", "-\t\t\t\tif (JobManager.VERBOSE) ", "-\t\t\t\t\tJobManager.verbose(\"-> index could not be created for \" + this.path); //$NON-NLS-1$", "-\t\t\t\treturn COMPLETE;", "+\t\t\t\tif (JobManager.VERBOSE)", "+\t\t\t\t\tJobManager.verbose(\"-> index could not be created for \" + this.indexPath); //$NON-NLS-1$", "+\t\t\t\treturn true;", "-\t\t\t\tif (JobManager.VERBOSE) ", "-\t\t\t\t\tJobManager.verbose(\"-> index for \" + this.path + \" just got deleted\"); //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\treturn COMPLETE; // index got deleted since acquired", "+\t\t\t\tif (JobManager.VERBOSE)", "+\t\t\t\t\tJobManager.verbose(\"-> index for \" + this.indexPath + \" just got deleted\"); //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\treturn true; // index got deleted since acquired", "-\t\t\t\t\tif (location == null)", "-\t\t\t\t\t\treturn FAILED;", "-\t\t\t\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {", "+\t\t\t\t\tif (location == null) return false;", "+\t\t\t\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE)", "-\t\t\t\t\t}", "-\t\t\t\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {", "-\t\t\t\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [AddJarFileToIndex.execute()] Creating ZipFile on \" + this.path); //$NON-NLS-1$\t//$NON-NLS-2$", "-\t\t\t\t\t}", "-\t\t\t\t\tzip = new ZipFile(this.path.toFile());", "-\t\t\t\t\tzipFilePath = (Path) this.path;", "+\t\t\t\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE)", "+\t\t\t\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [AddJarFileToIndex.execute()] Creating ZipFile on \" + this.indexPath); //$NON-NLS-1$\t//$NON-NLS-2$", "+\t\t\t\t\tzip = new ZipFile(this.indexPath.toFile());", "+\t\t\t\t\tzipFilePath = (Path) this.indexPath;", "-\t\t\t\t\t\t\tJarFileEntryDocument entryDocument =", "-\t\t\t\t\t\t\t\tnew JarFileEntryDocument(ze, null, zipFilePath);", "+\t\t\t\t\t\t\tJarFileEntryDocument entryDocument = new JarFileEntryDocument(ze, null, zipFilePath);", "-\t\t\t\t\t\t\tJobManager.verbose(", "-\t\t\t\t\t\t\t\t\"-> no indexing required (index is consistent with library) for \" //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t+ zip.getName() + \" (\" //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t+ (System.currentTimeMillis() - initialTime) + \"ms)\"); //$NON-NLS-1$", "-\t\t\t\t\t\treturn COMPLETE;", "+\t\t\t\t\t\t\tJobManager.verbose(\"-> no indexing required (index is consistent with library) for \" //$NON-NLS-1$", "+\t\t\t\t\t\t\t+zip.getName() + \" (\" //$NON-NLS-1$", "+\t\t\t\t\t\t\t+ (System.currentTimeMillis() - initialTime) + \"ms)\"); //$NON-NLS-1$", "+\t\t\t\t\t\treturn true;", "-\t\t\t\t\tindex = manager.recreateIndex(indexedPath);", "+\t\t\t\t\tindex = manager.recreateIndex(this.indexPath);", "-\t\t\t\t\t\t\tJobManager.verbose(", "-\t\t\t\t\t\t\t\t\"-> indexing of \" //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t+ zip.getName() ", "-\t\t\t\t\t\t\t\t+ \" has been cancelled\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\tJobManager.verbose(\"-> indexing of \" //$NON-NLS-1$", "+\t\t\t\t\t\t\t+zip.getName() + \" has been cancelled\"); //$NON-NLS-1$", "-\t\t\t\t\t\treturn FAILED;", "+\t\t\t\t\t\treturn false;", "-\t\t\t\t\t", "+", "-\t\t\t\t\tJobManager.verbose(", "-\t\t\t\t\t\t\"-> done indexing of \" //$NON-NLS-1$", "-\t\t\t\t\t\t+ zip.getName() + \" (\" //$NON-NLS-1$", "-\t\t\t\t\t\t+ (System.currentTimeMillis() - initialTime) + \"ms)\"); //$NON-NLS-1$", "+\t\t\t\t\tJobManager.verbose(\"-> done indexing of \" //$NON-NLS-1$", "+\t\t\t\t\t+zip.getName() + \" (\" //$NON-NLS-1$", "+\t\t\t\t\t+ (System.currentTimeMillis() - initialTime) + \"ms)\"); //$NON-NLS-1$", "-\t\t\t\tJobManager.verbose(\"-> failed to index \" + this.path + \" because of the following exception:\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tJobManager.verbose(\"-> failed to index \" + this.indexPath + \" because of the following exception:\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tmanager.removeIndex(this.path);", "-\t\t\treturn FAILED;", "+\t\t\tmanager.removeIndex(this.indexPath);", "+\t\t\treturn false;", "-\t\treturn COMPLETE;", "+\t\treturn true;"]}], "num": 5762}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a91a4df6ea60e4b0ded45ea55a926a2f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3240b09a56068a5d4fe72fb507336a81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "d051e39b37c2132ed5482eec136a6f8669919913", "commitAfterChange": "27e5bf24465f583e3802225a581a8de5dc29abcf", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=185682", "+\tif (!valueRequired && ((this.bits & ASTNode.RestrictiveFlagMASK) == Binding.LOCAL)) {", "+\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.binding;", "+\t\tif (localBinding.useFlag == LocalVariableBinding.FAKE_USED) {", "+\t\t\t// compound assignment is the only usage of this local", "+\t\t\treportOnlyUselesslyReadLocal(currentScope, localBinding);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b8af643f346e00c17795daf33761746", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "fea19d22050275d4b6c4f9116a11537adeb627a9", "commitAfterChange": "6fe04df602475d9f13e955fcfd38124da359e84a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "signatureAfterChange": " public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "diff": ["-\tif ((this.bits & Binding.FIELD) != 0 && this.binding != null && this.binding.isValidBinding()) {", "-\t\t// set the generic cast after the fact, once the type expectation is fully known (no need for strict cast)", "-\t\tFieldBinding field = (FieldBinding) this.binding;", "-\t\tFieldBinding originalBinding = field.original();", "-\t\tTypeBinding originalType = originalBinding.type;", "-\t\t// extra cast needed if field type is type variable", "-\t\tif (originalType.leafComponentType().isTypeVariable()) {", "-\t    \tTypeBinding targetType = (!compileTimeType.isBaseType() && runtimeTimeType.isBaseType())", "-\t    \t\t? compileTimeType  // unboxing: checkcast before conversion", "-\t    \t\t: runtimeTimeType;", "-\t        this.genericCast = originalType.genericCast(scope.boxing(targetType));", "-\t        if (this.genericCast instanceof ReferenceBinding) {", "+\tif (this.binding != null && this.binding.isValidBinding()) {", "+\t\tTypeBinding originalType = null;", "+\t\tif ((this.bits & Binding.FIELD) != 0) {", "+\t\t\t// set the generic cast after the fact, once the type expectation is fully known (no need for strict cast)", "+\t\t\tFieldBinding field = (FieldBinding) this.binding;", "+\t\t\tFieldBinding originalBinding = field.original();", "+\t\t\toriginalType = originalBinding.type;", "+\t\t} else if ((this.bits & Binding.LOCAL) != 0) {", "+\t\t\tLocalVariableBinding local = (LocalVariableBinding) this.binding;", "+\t\t\toriginalType = local.type;", "+\t\t}", "+\t\t// extra cast needed if field/local type is type variable", "+\t\tif (originalType != null && originalType.leafComponentType().isTypeVariable()) {", "+\t\t\tTypeBinding targetType = (!compileTimeType.isBaseType() && runtimeTimeType.isBaseType())", "+\t\t\t\t\t? compileTimeType  // unboxing: checkcast before conversion", "+\t\t\t\t\t\t\t: runtimeTimeType;", "+\t\t\tthis.genericCast = originalType.genericCast(scope.boxing(targetType));", "+\t\t\tif (this.genericCast instanceof ReferenceBinding) {", "-\t\t        \tscope.problemReporter().invalidType(this,", "-\t\t        \t\t\tnew ProblemReferenceBinding(", "-\t\t\t\t\t\t\t\tCharOperation.splitOn('.', referenceCast.shortReadableName()),", "-\t\t\t\t\t\t\t\treferenceCast,", "-\t\t\t\t\t\t\t\tProblemReasons.NotVisible));", "+\t\t\t\t\tscope.problemReporter().invalidType(this,", "+\t\t\t\t\t\t\tnew ProblemReferenceBinding(", "+\t\t\t\t\t\t\t\t\tCharOperation.splitOn('.', referenceCast.shortReadableName()),", "+\t\t\t\t\t\t\t\t\treferenceCast,", "+\t\t\t\t\t\t\t\t\tProblemReasons.NotVisible));", "-\t        }", "+\t\t\t}"]}], "num": 51313}
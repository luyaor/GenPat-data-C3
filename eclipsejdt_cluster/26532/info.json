{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6203ed4b38b3e48934c43db583b19ba3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9847abad2bcb9dbf97303d04056bda22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "d5627341503c684b35efd505dd3662e10e508037", "commitAfterChange": "42ae31d036829167627987a2cc4bb88129de49f8", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " public final char[] signature()", "signatureAfterChange": " public final char[] signature()", "diff": ["-\t\tint count = syntheticArgumentTypes == null ? 0 : syntheticArgumentTypes.length;", "-\t\tfor (int i = 0; i < count; i++) {", "-\t\t\tbuffer.append(syntheticArgumentTypes[i].signature());", "+\t\tif (syntheticArgumentTypes != null) {", "+\t\t\tfor (int i = 0, count = syntheticArgumentTypes.length; i < count; i++) {", "+\t\t\t\tbuffer.append(syntheticArgumentTypes[i].signature());", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a339e58401f5a487430b72e83e14419f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "5e6ce1a02c1fd92d8737923476f9b03120d60dfc", "commitAfterChange": "27b04348f6378e421a1a2788716e3b7fc8643774", "methodNumberBeforeChange": 285, "methodNumberAfterChange": 285, "signatureBeforeChange": "\r final public void tableswitch(CaseLabel defaultLabel, int low, int high, int[] keys, int[] sortedIndexes, CaseLabel[] casesLabel)", "signatureAfterChange": "\r final public void tableswitch(CaseLabel defaultLabel, int low, int high, int[] keys, int[] sortedIndexes, CaseLabel[] casesLabel)", "diff": ["-\tint j = low;\r", "+\tint i = low, j = low;\r", "-\tfor (int i = low; i <= high; i++) {\r", "+\twhile (true) {\r", "+\t\t\tif (i == high) break; // if high is maxint, then avoids wrapping to minint.\r", "+\t\ti++;\r"]}], "num": 26532}
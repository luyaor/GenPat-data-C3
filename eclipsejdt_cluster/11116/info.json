{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09330338255b1c587ebfc4ba1016f1a6", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cb4b9b94a799f66b2941901718f107f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "4cc2f8f4e127cb2b5311bd70a3aa9e42278cea32", "commitAfterChange": "0774ccc9fbfb251d06c1b6758403976034210f78", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public boolean isPolymorphicSearch()", "signatureAfterChange": " boolean isPolymorphicSearch()", "diff": ["-public boolean isPolymorphicSearch() {", "+boolean isPolymorphicSearch() {", "-\t\tif (this.patterns[i].isPolymorphicSearch()) return true;", "+\t\tif (((InternalSearchPattern) this.patterns[i]).isPolymorphicSearch()) return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cad25040ed42a074051ee1f29f7bd9dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "4cc2f8f4e127cb2b5311bd70a3aa9e42278cea32", "commitAfterChange": "0774ccc9fbfb251d06c1b6758403976034210f78", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "signatureAfterChange": " void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "diff": ["-public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException {", "+void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException {", "-\t\t\tthis.patterns[i].findIndexMatches(index, requestor, participant, scope, progressMonitor);", "+\t\t\t((InternalSearchPattern)this.patterns[i]).findIndexMatches(index, requestor, participant, scope, progressMonitor);"]}], "num": 11116}
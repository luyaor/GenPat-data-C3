{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fcd2f057baae23ec3b09312d2d7e2ee7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ff2da105660f7fb590fc57f409df987", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "580481ae11bd0f856242b0cf44caa66107bf550d", "commitAfterChange": "d08e87c35b21123010227cf2729df51d820e4d50", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding createMethod(IBinaryMethod method, IBinaryType binaryType, long sourceLevel, char[][][] missingTypeNames)", "diff": ["-private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames) {", "+private MethodBinding createMethod(IBinaryMethod method, IBinaryType binaryType, long sourceLevel, char[][][] missingTypeNames) {", "-\tTypeAnnotationWalker walker = getTypeAnnotationWalker(method.getTypeAnnotations());", "+\tITypeAnnotationWalker walker = getTypeAnnotationWalker(method.getTypeAnnotations());", "+\t\tif (walker == ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER && binaryType instanceof ClassFileReader) {// TODO: avoid cast? add method to IBinaryType?", "+\t\t\twalker = ((ClassFileReader)binaryType).getAnnotationsForMethod(method, methodDescriptor, this.environment);", "+\t\t}", "+\t\tif (walker == ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER && binaryType instanceof ClassFileReader) {// TODO: avoid cast? add method to IBinaryType?", "+\t\t\twalker = ((ClassFileReader)binaryType).getAnnotationsForMethod(method, methodSignature, this.environment);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da3b614d55ce2e647de457b37275a300", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "b39f3a5a9fadba74f50d9dc16813d561f779e994", "commitAfterChange": "efd3b1f31e7f6af67fb63e84ece49ae3c1341055", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  private MethodBinding createMethod(IBinaryMethod method, IBinaryType binaryType, long sourceLevel, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "diff": ["-private MethodBinding createMethod(IBinaryMethod method, IBinaryType binaryType, long sourceLevel, char[][][] missingTypeNames) {", "+private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames) {", "-\tITypeAnnotationWalker walker = getTypeAnnotationWalker(method.getTypeAnnotations());", "+\tTypeAnnotationWalker walker = getTypeAnnotationWalker(method.getTypeAnnotations());", "-\t\tif (walker == ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER && binaryType instanceof ClassFileReader) {// TODO: avoid cast? add method to IBinaryType?", "-\t\t\twalker = ((ClassFileReader)binaryType).getAnnotationsForMethod(method, methodDescriptor, this.environment);", "-\t\t}", "-\t\tif (walker == ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER && binaryType instanceof ClassFileReader) {// TODO: avoid cast? add method to IBinaryType?", "-\t\t\twalker = ((ClassFileReader)binaryType).getAnnotationsForMethod(method, methodSignature, this.environment);", "-\t\t}"]}], "num": 61255}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c6bac23e864e0c34ce923dbebc72500", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0844b36e6ad7b88d4bbb5687906b24ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": "\r public void test0071() throws IOException", "signatureAfterChange": "\r public void test0071() throws IOException", "diff": ["-\tassertEquals(\"Wrong location\", \"{0}\", locations.get(\"@B\"));\r", "-\tassertEquals(\"Wrong location\", \"{1}\", locations.get(\"@C\"));\r", "-\tassertEquals(\"Wrong location\", \"{1,0,2}\", locations.get(\"@H\"));\r", "-\tassertEquals(\"Wrong location\", \"{1,0}\", locations.get(\"@E\"));\r", "-\tassertEquals(\"Wrong location\", \"{1,0,1}\", locations.get(\"@G\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(0)]\", locations.get(\"@B\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1)]\", locations.get(\"@C\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1), TYPE_ARGUMENT(0), ARRAY, ARRAY, ARRAY]\", locations.get(\"@H\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1), TYPE_ARGUMENT(0)]\", locations.get(\"@E\"));\r", "+\tassertEquals(\"Wrong location\", \"[TYPE_ARGUMENT(1), TYPE_ARGUMENT(0), ARRAY, ARRAY]\", locations.get(\"@G\"));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1137e887e2811eb66234b2638f3728bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  \tpublic void test24() throws JavaModelException", "signatureAfterChange": "  \tpublic void test24() throws JavaModelException", "diff": ["-\t\t\t\"Method {key=LTest$98;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$98;.foo()V} [in Method [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$98;.foo()V} [in Method [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest$98;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$98;.foo()V} [in Method [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]]\",", "+\t\t\t\"Method {key=LTest$98;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "+\t\t\t\"foo() {key=LTest$98;.foo()V} [in Method [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\\n\" + ", "+\t\t\t\"foo() {key=LTest$98;.foo()V} [in Method [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\\n\" + ", "+\t\t\t\"Method {key=LTest$98;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]\\n\" + ", "+\t\t\t\"foo() {key=LTest$98;.foo()V} [in Method [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "446dac25951d0f1250c74762028552cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/NameReferenceCompletionTest.java", "commitBeforeChange": "18f82f9b3d96b0cbaed089b15d61446eb0618142", "commitAfterChange": "8ab73b3fd3410dbf30af626275dd87b20a54b001", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void testQualifiedNameReferenceShrinkAllButOne2()", "signatureAfterChange": " public void testQualifiedNameReferenceShrinkAllButOne2()", "diff": ["-\t\t\"\t\tcom.ibm.tests.X o = new Y(i);\t\t\\n\" +", "+\t\t\"\t\ta.b.c.X o = new Y(i);\t\t\\n\" +", "-\t\t\"com.\",", "+\t\t\"\t\ta.\",", "-\t\t\"<CompleteOnName:com.>\",", "+\t\t\"<CompleteOnName:a.>\",", "-\t\t\"    <CompleteOnName:com.>;\\n\" +", "+\t\t\"    <CompleteOnName:a.>;\\n\" +", "-\t\t\"com.\",", "+\t\t\"a.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b25149b3512e0b0aea0edf373585b95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "cf895c35367340c7abd90778e60347850683ddea", "commitAfterChange": "04e1bf5f2770f9a2cdfb59f2c6a93389d529209c", "methodNumberBeforeChange": 252, "methodNumberAfterChange": 252, "signatureBeforeChange": " public void testBug110291() throws CoreException", "signatureAfterChange": " public void testBug110291() throws CoreException", "diff": ["-\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b110291/TestXX.java\",", "+\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b110291/Test110291XX.java\",", "-\t\t\"public class TestXX {\\n\" + ", "-\t\t\"\tclass TestYY {}\" +", "+\t\t\"public class Test110291XX {\\n\" + ", "+\t\t\"\tclass Test110291YY {}\" +", "-\tsearch(\"Test\", CONSTRUCTOR, DECLARATIONS, SearchPattern.R_PREFIX_MATCH);", "+\tsearch(\"Test110291\", CONSTRUCTOR, DECLARATIONS, SearchPattern.R_PREFIX_MATCH);", "-\t\t\"src/b110291/TestXX.java b110291.TestXX$TestYY [TestYY] EXACT_MATCH\"", "+\t\t\"src/b110291/Test110291XX.java b110291.Test110291XX$Test110291YY [Test110291YY] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4dbe287e0266653d14a73540ee6f6894", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void test014()", "signatureAfterChange": " \tpublic void test014()", "diff": ["-\t\t\t\"    28  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    28  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    32  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    32  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 36] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 36] local: b index: 1 type: Z\\n\" + ", "-\t\t\t\"        [pc: 5, pc: 36] local: i index: 2 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 36] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 36] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"        [pc: 5, pc: 36] local: i index: 2 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c8b75a7d7680f74ee366f88cc31a3b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 309, "methodNumberAfterChange": 310, "signatureBeforeChange": " public void test1004()", "signatureAfterChange": " public void test1004()", "diff": ["-\t\t\"The variable x cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"Redundant null check: The variable x cannot be null at this location\\n\" + ", "-\t\t\"The variable x cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"Null comparison always yields false: The variable x cannot be null at this location\\n\" + ", "-\t\t\"The variable x can only be null; it was either set to null or checked for null when last used\\n\" + ", "+\t\t\"Null pointer access: The variable x can only be null at this location\\n\" + ", "-\t\t\"The variable x cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"Redundant null check: The variable x cannot be null at this location\\n\" + ", "-\t\t\"The variable x may be null\\n\" + ", "+\t\t\"Potential null pointer access: The variable x may be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69cf03d69cae8d0c2079f4da3f26df7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void test003()", "signatureAfterChange": " \tpublic void test003()", "diff": ["-\t\t\t\"        [pc: 0, pc: 2] local: this index: 0 type: LA003;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 2] local: this index: 0 type: A003\\n\" + ", "-\t\t\t\"     0  getstatic java/lang/System.out Ljava/io/PrintStream; [22]\\n\" + ", "+\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [22]\\n\" + ", "-\t\t\t\"     4  invokevirtual A003.bar()I [24]\\n\" + ", "-\t\t\t\"     7  invokevirtual java/io/PrintStream.println(I)V [30]\\n\" + ", "+\t\t\t\"     4  invokevirtual A003.bar() : int  [24]\\n\" + ", "+\t\t\t\"     7  invokevirtual java.io.PrintStream.println(int) : void  [30]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 11] local: this index: 0 type: LA003;\\n\";", "+\t\t\t\"        [pc: 0, pc: 11] local: this index: 0 type: A003\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d5cd5709bc7b2220a9cba8304fe13cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "6c7de59cc4e8b7d3ff952cb73eea6ba69e83b190", "commitAfterChange": "8eda346eb2b6784c607071f6828a328415623f59", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " \t \tpublic void test070d_codeblocks_castDoubleIntersectionCastInExpression() throws Exception", "signatureAfterChange": " \t \tpublic void test070d_codeblocks_castDoubleIntersectionCastInExpression() throws Exception", "diff": ["-\t\t\t\t\"     9  checkcast K [28]\\n\" + ", "-\t\t\t\t\"    12  checkcast L [30]\\n\" + ", "-\t\t\t\t\"    15  checkcast I [32]\\n\" + ", "-\t\t\t\t\"    18  checkcast J [34]\\n\" + ", "+\t\t\t\t\"     9  checkcast L [28]\\n\" + ", "+\t\t\t\t\"    12  checkcast K [30]\\n\" + ", "+\t\t\t\t\"    15  checkcast J [32]\\n\" + ", "+\t\t\t\t\"    18  checkcast I [34]\\n\" + ", "-\t\t\t\t\"        offset = 15\\n\" + ", "+\t\t\t\t\"        offset = 18\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82de20c06608d0ab79e90536f5d692ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " \tpublic void test084()", "signatureAfterChange": " \tpublic void test084()", "diff": ["-\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ee440b7282a8cde55f7545d83252414", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 920, "methodNumberAfterChange": 920, "signatureBeforeChange": " public void test0913()", "signatureAfterChange": " public void test0913()", "diff": ["-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Collection<?>[]> to List<Collection[]>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#1-of ? extends Collection<?>[]> to List<Collection[]>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Collection[]> to List<Collection[]>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#2-of ? extends Collection[]> to List<Collection[]>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Collection<?>[]> to List<Collection<?>[]>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#3-of ? extends Collection<?>[]> to List<Collection<?>[]>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Collection[]> to List<Collection<?>[]>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#4-of ? extends Collection[]> to List<Collection<?>[]>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Collection[]> to List<? extends Collection<?>[]>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#8-of ? extends Collection[]> to List<? extends Collection<?>[]>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97df0211121858df3ca9726dc8a22809", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "commitAfterChange": "5d080762ae8d3ca1ae1910319f56194e1932135d", "methodNumberBeforeChange": 561, "methodNumberAfterChange": 561, "signatureBeforeChange": " public void testBug209996_c5() throws CoreException", "signatureAfterChange": " public void testBug209996_c5() throws CoreException", "diff": ["-\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref).ref [    void doA(\ufffd|Ref|\ufffd ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>).ref [    void doB(List<\ufffd|Ref|\ufffd> ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void doC(@Tag(\ufffd|Ref|\ufffd.class) Ref ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref).ref [    void doC(@Tag(Ref.class) \ufffd|Ref|\ufffd ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void dontD(@Tag(\ufffd|Ref|\ufffd.class) Object ref) {}]\",", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref).ref [    void doA(\ufffd|Ref|\ufffd ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>).ref [    void doB(List<\ufffd|Ref|\ufffd> ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void doC(@Tag(\ufffd|Ref|\ufffd.class) Ref ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref).ref [    void doC(@Tag(Ref.class) \ufffd|Ref|\ufffd ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void dontD(@Tag(\ufffd|Ref|\ufffd.class) Object ref) {}]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a60414ab44d517126b7208698150d0ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 918, "methodNumberAfterChange": 918, "signatureBeforeChange": " public void test0911()", "signatureAfterChange": " public void test0911()", "diff": ["-\t\t\"Type mismatch: cannot convert from List<capture-of ? super Collection<?>> to List<Collection>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#1-of ? super Collection<?>> to List<Collection>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? super Collection> to List<Collection>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#2-of ? super Collection> to List<Collection>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? super Collection<?>> to List<Collection<?>>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#3-of ? super Collection<?>> to List<Collection<?>>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? super Collection> to List<Collection<?>>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#4-of ? super Collection> to List<Collection<?>>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? super Collection<?>> to List<? super Collection>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#12-of ? super Collection<?>> to List<? super Collection>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afa0265ae25746d3ba764bd4ece6fb8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericConstructorTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void testConstructorReferencesStringPatternSingleParamArguments03() throws CoreException", "signatureAfterChange": " \tpublic void testConstructorReferencesStringPatternSingleParamArguments03() throws CoreException", "diff": ["-\t\tsearch(\"S?ng* % <? super Exception>\", CONSTRUCTOR, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"<? super Exception>S?ng*\", CONSTRUCTOR, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object())] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), new Throwable())] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(gs)] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), gs)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object())] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), new Throwable())] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(gs)] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), gs)] EQUIVALENT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bde549a519f400c894f528affec6644b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 561, "methodNumberAfterChange": 561, "signatureBeforeChange": " public void testBug209996_c5() throws CoreException", "signatureAfterChange": " public void testBug209996_c5() throws CoreException", "diff": ["-\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref).ref [    void doA(\ufffd|Ref|\ufffd ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>).ref [    void doB(List<\ufffd|Ref|\ufffd> ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void doC(@Tag(\ufffd|Ref|\ufffd.class) Ref ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref).ref [    void doC(@Tag(Ref.class) \ufffd|Ref|\ufffd ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void dontD(@Tag(\ufffd|Ref|\ufffd.class) Object ref) {}]\",", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref).ref [    void doA(\ufffd|Ref|\ufffd ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>).ref [    void doB(List<\ufffd|Ref|\ufffd> ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void doC(@Tag(\ufffd|Ref|\ufffd.class) Ref ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref).ref [    void doC(@Tag(Ref.class) \ufffd|Ref|\ufffd ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void dontD(@Tag(\ufffd|Ref|\ufffd.class) Object ref) {}]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c13387064232cc793096957fc17de678", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 513, "methodNumberAfterChange": 513, "signatureBeforeChange": " \tpublic void test509()", "signatureAfterChange": " \tpublic void test509()", "diff": ["-\t\t\t\"Type safety: MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "+\t\t\t\"MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "+\t\t\t\"MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "+\t\t\t\"MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "+\t\t\t\"MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "+\t\t\t\"MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0b3fa57c5f323e88944e24adb1a3d1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void test001() throws JavaModelException", "signatureAfterChange": " public void test001() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot }, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"inheritDoc[JAVADOC_INLINE_TAG]{{@inheritDoc }, null, null, inheritDoc, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain }, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"value[JAVADOC_INLINE_TAG]{{@value }, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot}, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"inheritDoc[JAVADOC_INLINE_TAG]{{@inheritDoc}, null, null, inheritDoc, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain}, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"value[JAVADOC_INLINE_TAG]{{@value}, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5b3b636ba22f8ddd8678776c6b0332b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 566, "methodNumberAfterChange": 566, "signatureBeforeChange": " public void testBug209996_c5() throws CoreException", "signatureAfterChange": " public void testBug209996_c5() throws CoreException", "diff": ["-\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref) [    void doA(\ufffd|Ref|\ufffd ref) {}]+[ref]\\n\" + ", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>) [    void doB(List<\ufffd|Ref|\ufffd> ref) {}]+[ref]\\n\" + ", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref) [    void doC(@Tag(\ufffd|Ref|\ufffd.class) Ref ref) {}]+[@Tag on ref]\\n\" + ", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref) [    void doC(@Tag(Ref.class) \ufffd|Ref|\ufffd ref) {}]+[ref]\\n\" + ", "-\t\t\"src/comment5/Ref.java void comment5.Ref.dontD(Object) [    void dontD(@Tag(\ufffd|Ref|\ufffd.class) Object ref) {}]+[@Tag on ref]\",", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref) [    void doA(!|Ref|! ref) {}]+[ref]\\n\" + ", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>) [    void doB(List<!|Ref|!> ref) {}]+[ref]\\n\" + ", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref) [    void doC(@Tag(!|Ref|!.class) Ref ref) {}]+[@Tag on ref]\\n\" + ", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref) [    void doC(@Tag(Ref.class) !|Ref|! ref) {}]+[ref]\\n\" + ", "+\t\t\"src/comment5/Ref.java void comment5.Ref.dontD(Object) [    void dontD(@Tag(!|Ref|!.class) Object ref) {}]+[@Tag on ref]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d99b923044412950af1d1c9c33458dea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests2.java", "commitBeforeChange": "120defa76e249a7b50b5aa52206e16b815780186", "commitAfterChange": "635cdb5a7a6689c525de4e28f32c0630009bc2be", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void testBug376673d() throws CoreException", "signatureAfterChange": " \tpublic void testBug376673d() throws CoreException", "diff": ["-\t\t\t\t\t\"class \ud842\udf9f1 {\" +", "-\t\t\t\t\t\"\tpublic int \ud842\udf9ff;\\n\" +", "+\t\t\t\t\t\"class \\uD842\\uDF9F1 {\" +", "+\t\t\t\t\t\"\tpublic int \\uD842\\uDF9Ff;\\n\" +", "-\t\t\t\tIFile file = createFile(\"/P/pkg/\ud842\udf9f1.java\", content, \"UTF-8\");", "+\t\t\t\tIFile file = createFile(\"/P/pkg/\\uD842\\uDF9F1.java\", content, \"UTF-8\");", "-\t\t\tsearch(\"\ud842\udf9ff\", FIELD, DECLARATIONS, EXACT_RULE, scope, this.resultCollector);", "-\t\t\tassertSearchResults(\"pkg/\ud842\udf9f1.java pkg.\ud842\udf9f1.\ud842\udf9ff [\ud842\udf9ff] EXACT_MATCH\");", "+\t\t\tsearch(\"\\uD842\\uDF9Ff\", FIELD, DECLARATIONS, EXACT_RULE, scope, this.resultCollector);", "+\t\t\tassertSearchResults(\"pkg/\\uD842\\uDF9F1.java pkg.\\uD842\\uDF9F1.\\uD842\\uDF9Ff [\\uD842\\uDF9Ff] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea72e7f30807fcccf5ad9c58c1007446", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testMethodReferencesStringPatternMultipleParamArguments07() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesStringPatternMultipleParamArguments07() throws CoreException", "diff": ["-\t\tsearch(\"complete % <?,? extends Throwable,? extends RuntimeException>\", METHOD, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"<?,? extends Throwable,? extends RuntimeException>complete\", METHOD, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [complete(new Object(), new Exception(), new RuntimeException(), gm)] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [complete(new Object(), new RuntimeException(), new RuntimeException(), gm)] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm)] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testMultiple() [complete(new Object(), new Exception(), new RuntimeException(), gm)] EQUIVALENT_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [<Object, Exception, RuntimeException>complete(new Object(), new Exception(), new RuntimeException(), gm)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [<Object, RuntimeException, RuntimeException>complete(new Object(), new RuntimeException(), new RuntimeException(), gm)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [<Object, RuntimeException, IllegalMonitorStateException>complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testMultiple() [complete(new Object(), new Exception(), new RuntimeException(), gm)] EQUIVALENT_RAW_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea9eb8ecf214338c415672bacf334135", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 121, "signatureBeforeChange": " \tpublic void test117()", "signatureAfterChange": " \tpublic void test117()", "diff": ["-\t\t\t\"Type safety: X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "+\t\t\t\"X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "+\t\t\t\"X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "+\t\t\t\"X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fabe21c3baabbd63ef948d102ea08133", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "328c06fa136c963530115a367863b6a931384871", "commitAfterChange": "c0d735bb59d0292c44074a58c867bfe7a8670833", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": " public void test384750o()", "signatureAfterChange": " public void test384750o()", "diff": ["-\t\t\t\t\t\"\t      ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^\\n\" + "]}], "num": 19040}
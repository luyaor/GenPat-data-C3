{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1a8b1a54c6be887c6df5b66d61c31d0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1981c0e1974968c35907fe2d7f9817e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 201, "methodNumberAfterChange": 320, "signatureBeforeChange": " protected TypeReference getTypeReference(int dim)", "signatureAfterChange": " protected TypeReference getTypeReference(int dim)", "diff": ["-protected TypeReference getTypeReference(int dim) { /* build a Reference on a variable that may be qualified or not", "-This variable is a type reference and dim will be its dimensions*/", "+}", "+protected TypeReference getTypeReference(int dim) {", "+\t/* build a Reference on a variable that may be qualified or not", "+\t This variable is a type reference and dim will be its dimensions*/", "-\tint length;", "-\tif ((length = this.identifierLengthStack[this.identifierLengthPtr--]) == 1) {", "-\t\t// single variable reference", "+\tint length = this.identifierLengthStack[this.identifierLengthPtr--];", "+\tif (length < 0) { //flag for precompiled type reference on base types", "+\t\tref = TypeReference.baseTypeReference(-length, dim);", "+\t\tref.sourceStart = this.intStack[this.intPtr--];", "-\t\t\tref = ", "-\t\t\t\tnew SingleTypeReference(", "-\t\t\t\t\tthis.identifierStack[this.identifierPtr], ", "-\t\t\t\t\tthis.identifierPositionStack[this.identifierPtr--]); ", "+\t\t\tref.sourceEnd = this.intStack[this.intPtr--];", "-\t\t\tref = ", "-\t\t\t\tnew ArrayTypeReference(", "-\t\t\t\t\tthis.identifierStack[this.identifierPtr], ", "-\t\t\t\t\tdim, ", "-\t\t\t\t\tthis.identifierPositionStack[this.identifierPtr--]); ", "-\t\t\tref.sourceEnd = this.endPosition;\t\t\t", "+\t\t\tthis.intPtr--;", "+\t\t\tref.sourceEnd = this.endPosition;", "-\t\tif (length < 0) { //flag for precompiled type reference on base types", "-\t\t\tref = TypeReference.baseTypeReference(-length, dim);", "-\t\t\tref.sourceStart = this.intStack[this.intPtr--];", "+\t\tint numberOfIdentifiers = this.genericsIdentifiersLengthStack[this.genericsIdentifiersLengthPtr--];", "+\t\tif (length != numberOfIdentifiers || this.genericsLengthStack[this.genericsLengthPtr] != 0) {", "+\t\t\t// generic type", "+\t\t\tref = getTypeReferenceForGenericType(dim, length, numberOfIdentifiers);", "+\t\t} else if (length == 1) {", "+\t\t\t// single variable reference", "+\t\t\tthis.genericsLengthPtr--; // pop the 0", "-\t\t\t\tref.sourceEnd = this.intStack[this.intPtr--];", "+\t\t\t\tref = ", "+\t\t\t\t\tnew SingleTypeReference(", "+\t\t\t\t\t\tthis.identifierStack[this.identifierPtr], ", "+\t\t\t\t\t\tthis.identifierPositionStack[this.identifierPtr--]); ", "-\t\t\t\tthis.intPtr--;", "-\t\t\t\tref.sourceEnd = this.endPosition;", "+\t\t\t\tref = ", "+\t\t\t\t\tnew ArrayTypeReference(", "+\t\t\t\t\t\tthis.identifierStack[this.identifierPtr], ", "+\t\t\t\t\t\tdim, ", "+\t\t\t\t\t\tthis.identifierPositionStack[this.identifierPtr--]); ", "+\t\t\t\tref.sourceEnd = this.endPosition;\t\t\t", "-\t\t} else { //Qualified variable reference", "+\t\t} else {", "+\t\t\tthis.genericsLengthPtr--;", "+\t\t\t//Qualified variable reference"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fab781d02156cbc14f95a5df410766ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 41, "signatureBeforeChange": " protected TypeReference getTypeReference(int dim)", "signatureAfterChange": " protected TypeReference getTypeReference(int dim)", "diff": ["-\tif ((index = indexOfAssistIdentifier()) < 0) {", "+\tif ((index = indexOfAssistIdentifier(true)) < 0) {", "-", "-\t/* retrieve identifiers subset and whole positions, the assist node positions", "-\t\tshould include the entire replaced source. */", "-\tchar[][] subset = identifierSubSet(index);", "-\tidentifierLengthPtr--;", "-\tidentifierPtr -= length;", "-\tlong[] positions = new long[length];", "-\tSystem.arraycopy(", "-\t\tidentifierPositionStack, ", "-\t\tidentifierPtr + 1, ", "-\t\tpositions, ", "-\t\t0, ", "-\t\tlength); ", "-", "-\t/* build specific assist on type reference */", "-\tif (index == 0) {", "-\t\t/* assist inside first identifier */", "-\t\treference = this.createSingleAssistTypeReference(", "-\t\t\t\t\t\tassistIdentifier(), ", "-\t\t\t\t\t\tpositions[0]);", "+\tint numberOfIdentifiers = this.genericsIdentifiersLengthStack[this.genericsIdentifiersLengthPtr--];", "+\tif (length != numberOfIdentifiers || this.genericsLengthStack[this.genericsLengthPtr] != 0) {", "+\t\tidentifierLengthPtr--;", "+\t\t// generic type", "+\t\treference = getAssistTypeReferenceForGenericType(dim, length, numberOfIdentifiers);", "-\t\t/* assist inside subsequent identifier */", "-\t\treference =\tthis.createQualifiedAssistTypeReference(", "-\t\t\t\t\t\tsubset,  ", "-\t\t\t\t\t\tassistIdentifier(), ", "-\t\t\t\t\t\tpositions);", "+\t\t/* retrieve identifiers subset and whole positions, the assist node positions", "+\t\t\tshould include the entire replaced source. */", "+\t\t", "+\t\tchar[][] subset = identifierSubSet(index);", "+\t\tidentifierLengthPtr--;", "+\t\tidentifierPtr -= length;", "+\t\tlong[] positions = new long[length];", "+\t\tSystem.arraycopy(", "+\t\t\tidentifierPositionStack, ", "+\t\t\tidentifierPtr + 1, ", "+\t\t\tpositions, ", "+\t\t\t0, ", "+\t\t\tlength); ", "+\t", "+\t\t/* build specific assist on type reference */", "+\t\t", "+\t\tif (index == 0) {", "+//\t\t\tgenericsIdentifiersLengthPtr--;", "+\t\t\tgenericsLengthPtr--;", "+\t\t\t/* assist inside first identifier */", "+\t\t\treference = this.createSingleAssistTypeReference(", "+\t\t\t\t\t\t\tassistIdentifier(), ", "+\t\t\t\t\t\t\tpositions[0]);", "+\t\t} else {", "+//\t\t\tgenericsIdentifiersLengthPtr--;", "+\t\t\tgenericsLengthPtr--;", "+\t\t\t/* assist inside subsequent identifier */", "+\t\t\treference =\tthis.createQualifiedAssistTypeReference(", "+\t\t\t\t\t\t\tsubset,  ", "+\t\t\t\t\t\t\tassistIdentifier(), ", "+\t\t\t\t\t\t\tpositions);", "+\t\t}", "+\t\tassistNode = reference;", "+\t\tthis.lastCheckPoint = reference.sourceEnd + 1;", "+\treturn reference;", "+}"]}], "num": 68928}
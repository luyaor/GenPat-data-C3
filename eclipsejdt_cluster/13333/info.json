{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f3b67033aa6ac28c44ecccda795141c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b11e07559cd73451d5b0b8993b12be1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingExpressionsTest.java", "commitBeforeChange": "810d2a46e73e304780d3a58f117d6c63103b4e72", "commitAfterChange": "43bf242c384a6b4ad5daf26c5b4617ec68564235", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void testArrayCreation2_since_8() throws Exception", "signatureAfterChange": "  \tpublic void testArrayCreation2_since_8() throws Exception", "diff": ["-\t\t\tExtraDimension dim0 = (ExtraDimension) arrayType.dimensions().get(0);", "+\t\t\tDimension dim0 = (Dimension) arrayType.dimensions().get(0);", "-\t\t\tExtraDimension dim1 = ast.newExtraDimension();", "+\t\t\tDimension dim1 = ast.newDimension();", "-\t\t\tExtraDimension dim2 = ast.newExtraDimension();", "+\t\t\tDimension dim2 = ast.newDimension();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a0fdabe6ad0ec7710eed5ef55b105d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": " protected void consumeEqualityExpression(int op)", "signatureAfterChange": " protected void consumeEqualityExpression(int op)", "diff": ["-\texpressionPtr--;", "-\texpressionLengthPtr--;", "-\texpressionStack[expressionPtr] =", "+\tthis.expressionPtr--;", "+\tthis.expressionLengthPtr--;", "+\tthis.expressionStack[this.expressionPtr] =", "-\t\t\texpressionStack[expressionPtr],", "-\t\t\texpressionStack[expressionPtr + 1],", "+\t\t\tthis.expressionStack[this.expressionPtr],", "+\t\t\tthis.expressionStack[this.expressionPtr + 1],"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "919df0c8993080035040f2fd8abd0c10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "3d4c80327c4bd6f61a1ef852d9f8cb11ff6d9d62", "commitAfterChange": "a00d0694a5797c69eb50145f1a65c73c676a067b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "signatureAfterChange": " \t \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "diff": ["-\t\tInfixExpression infixExpression = this.ast.newInfixExpression();", "+\t\tInfixExpression infixExpression = new InfixExpression(this.ast);", "-\t\t\t\t \tInfixExpression temp = this.ast.newInfixExpression();", "+\t\t\t\t \tInfixExpression temp = new InfixExpression(this.ast);", "-\t\t\t\t \t\ttemp = this.ast.newInfixExpression();", "+\t\t\t\t \t\ttemp = new InfixExpression(this.ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e87f049f3e87ceb46614bb966edc8184", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "13c8801d2f8e4ce1fa92bdf4a4bb98ae724d8896", "commitAfterChange": "44313304e0594d0f08292955b5056eea6f38a821", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " protected void consumeAssignment()", "signatureAfterChange": " protected void consumeAssignment()", "diff": ["+\tExpression expression = this.expressionStack[this.expressionPtr+1];", "-\t\t\t\tthis.expressionStack[this.expressionPtr+1],", "+\t\t\t\texpression,", "-\t\t\t\tthis.scanner.startPosition - 1)\t:", "+\t\t\t\texpression.sourceEnd):", "-\t\t\t\tthis.expressionStack[this.expressionPtr+1],", "-\t\t\t\tthis.scanner.startPosition - 1);", "+\t\t\t\texpression,", "+\t\t\t\texpression.sourceEnd);"]}], "num": 13333}
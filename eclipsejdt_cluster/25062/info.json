{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e8ed99eb5976267bf5c552d3b003778", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "155cd2e76155bbb4c0b007c2d6b1c660", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java", "commitBeforeChange": "5f1e634c9572918b0d35dc54c9c744d979f875dc", "commitAfterChange": "f16285cd9a78748d8021cd667f1fa680e2a6b70b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t@Override \tpublic WildcardType getWildcardType(TypeMirror extendsBound, TypeMirror superBound)", "signatureAfterChange": " \t@Override \tpublic WildcardType getWildcardType(TypeMirror extendsBound, TypeMirror superBound)", "diff": ["-\t\t// TODO Auto-generated method stub", "-\t\treturn null;", "+\t\tif (extendsBound != null && superBound != null) {", "+\t\t\tthrow new IllegalArgumentException(\"Extends and super bounds cannot be set at the same time\"); //$NON-NLS-1$", "+\t\t}", "+\t\tif (extendsBound != null) {", "+\t\t\tTypeMirrorImpl extendsBoundMirrorType = (TypeMirrorImpl) extendsBound;", "+\t\t\tTypeBinding typeBinding = (TypeBinding) extendsBoundMirrorType._binding;", "+\t\t\treturn new WildcardTypeImpl(this._env.getLookupEnvironment().createWildcard(", "+\t\t\t\t\tnull,", "+\t\t\t\t\t0,", "+\t\t\t\t\ttypeBinding,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tWildcard.EXTENDS));", "+\t\t}", "+\t\tif (superBound != null) {", "+\t\t\tTypeMirrorImpl superBoundMirrorType = (TypeMirrorImpl) superBound;", "+\t\t\tTypeBinding typeBinding = (TypeBinding) superBoundMirrorType._binding;", "+\t\t\treturn new WildcardTypeImpl(this._env.getLookupEnvironment().createWildcard(", "+\t\t\t\t\tnull,", "+\t\t\t\t\t0,", "+\t\t\t\t\ttypeBinding,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tWildcard.SUPER));", "+\t\t}", "+\t\treturn new WildcardTypeImpl(this._env.getLookupEnvironment().createWildcard(", "+\t\t\t\tnull,", "+\t\t\t\t0,", "+\t\t\t\tnull,", "+\t\t\t\tnull,", "+\t\t\t\tWildcard.UNBOUND));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "336f46e6c5b6adc8f8069329d84d9059", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tprivate TypeBinding leastContainingTypeArgument(TypeBinding u, TypeBinding v, ReferenceBinding genericType, int rank, List lubStack)", "signatureAfterChange": " \tprivate TypeBinding leastContainingTypeArgument(TypeBinding u, TypeBinding v, ReferenceBinding genericType, int rank, List lubStack)", "diff": ["-\t\t\t\t\t\t\t\tif (lub == IntBinding) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\t\t\t\tif (lub == TypeBinding.INT) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "-\t\t\t\t\t\tif (lub == IntBinding) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\t\tif (lub == TypeBinding.INT) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "-\t\t\t\t\tif (lub == IntBinding) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\tif (lub == TypeBinding.INT) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "-\t\tif (lub == IntBinding) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\tif (lub == TypeBinding.INT) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75dee42159c335dbec4cfd1644631791", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " \tprivate TypeBinding leastContainingTypeArgument(TypeBinding u, TypeBinding v, ReferenceBinding genericType, int rank, ArrayList lubStack)", "signatureAfterChange": " \tprivate TypeBinding leastContainingTypeArgument(TypeBinding u, TypeBinding v, ReferenceBinding genericType, int rank, ArrayList lubStack)", "diff": ["-\t\tif (u == v) return u;", "+\t\tif (TypeBinding.equalsEquals(u, v)) return u;", "-\t\t\t\t\t\t\t\tif (lub == TypeBinding.INT) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(lub, TypeBinding.INT)) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "-\t\t\t\t\t\t\t\tif (wildU.bound == wildV.bound) return wildU.bound;", "+\t\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(wildU.bound, wildV.bound)) return wildU.bound;", "-\t\t\t\t\t\tif (lub == TypeBinding.INT) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\t\tif (TypeBinding.equalsEquals(lub, TypeBinding.INT)) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "-\t\t\t\t\tif (lub == TypeBinding.INT) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\tif (TypeBinding.equalsEquals(lub, TypeBinding.INT)) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "-\t\tif (lub == TypeBinding.INT) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\tif (TypeBinding.equalsEquals(lub, TypeBinding.INT)) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);"]}], "num": 25062}
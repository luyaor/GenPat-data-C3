{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18bc8b420aab15fc6681fac1b0ab4b87", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "413620220cb61bb34ccb1ca6c17fd436", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "3cbc5a17035fd93e630a5ce3a447371924b2eaec", "commitAfterChange": "2fbac062d3f933d7974166e3d20ea9843fdd9750", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": "  \tprivate void printBlockComment(boolean isJavadoc)", "signatureAfterChange": "  \tprivate void printBlockComment(boolean isJavadoc)", "diff": ["-\t\tint currentCommentOffset = onFirstColumn ? 0 : getCurrentCommentOffset(start);", "+\t\tint currentCommentIndentation = onFirstColumn ? 0 : getCurrentCommentColumn(start) - 1;", "-\t\t\t\t\t\t\t\t\tint count = 0;", "+\t\t\t\t\t\t\t\t\tint currentIndentation = 0;", "-\t\t\t\t\t\t\t\t\t\tif (count >= currentCommentOffset) {", "+\t\t\t\t\t\t\t\t\t\tif (currentIndentation >= currentCommentIndentation) {", "-\t\t\t\t\t\t\t\t\t\t\t\tcount += this.tabLength;", "+\t\t\t\t\t\t\t\t\t\t\t\tif (this.tabLength != 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tint reminder = currentIndentation % this.tabLength;", "+\t\t\t\t\t\t\t\t\t\t\t\t\tif (reminder == 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentIndentation += this.tabLength;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentIndentation = ((currentIndentation / this.tabLength) + 1) * this.tabLength;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\tcount ++;", "+\t\t\t\t\t\t\t\t\t\t\t\tcurrentIndentation ++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebb1b2686aacdfa3ec84105c4be179e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "6dec9cb80d749866ad6a2b5d18c470f71732f9d8", "commitAfterChange": "a93fb5b3ff3b79e22a571c64a770b96117073c58", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\t\t\t\t\tif (this.codegenBinding != lastFieldBinding && !lastFieldBinding.isStatic()){", "+\t\t\t\t\t\t\tif (this.codegenBinding == lastFieldBinding) {", "+\t\t\t\t\t\t\t\tif (lastFieldBinding.isStatic()){", "+\t\t\t\t\t\t\t\t\t// if no valueRequired, still need possible side-effects of <clinit> invocation, if field belongs to different class", "+\t\t\t\t\t\t\t\t\tif (((FieldBinding)binding).original().declaringClass != this.actualReceiverType.erasure()) {", "+\t\t\t\t\t\t\t\t\t\tMethodBinding accessor = syntheticReadAccessors == null ? null : syntheticReadAccessors[i]; ", "+\t\t\t\t\t\t\t\t\t\tif (accessor == null) {", "+\t\t\t\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (!lastFieldBinding.isStatic()){"]}], "num": 72458}
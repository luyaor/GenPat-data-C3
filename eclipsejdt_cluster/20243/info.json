{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2229fef2a892c61de2eeda15f98a303", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbeb21ae2aba35c8258f87996281135f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ProcessTaskManager.java", "commitBeforeChange": "169e34c5bd218f18885e0f9a102cb8b1a23f40e5", "commitAfterChange": "881da43b7e0b2ca5798e9c55f57054ccdaa23c6e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void run()", "signatureAfterChange": "  public void run()", "diff": ["-\t\tCompilationUnitDeclaration unitToProcess = null;", "+\t\tunitToProcess = null;", "-\t\t\ttry {", "-\t\t\t\tsynchronized (this) {", "-\t\t\t\t\tif (this.processingThread == null) return;", "-\t", "-\t\t\t\t\tunitToProcess = this.compiler.getUnitToProcess(this.unitIndex);", "-\t\t\t\t\tif (unitToProcess == null) {", "-\t\t\t\t\t\tthis.processingThread = null;", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\tindex = this.unitIndex++;", "+\t\t\tsynchronized (this) {", "+\t\t\t\tif (this.processingThread == null) return;", "+", "+\t\t\t\tunitToProcess = this.compiler.getUnitToProcess(this.unitIndex);", "+\t\t\t\tif (unitToProcess == null) {", "+\t\t\t\t\tthis.processingThread = null;", "+\t\t\t\t\treturn;", "+\t\t\t\tindex = this.unitIndex++;", "+\t\t\t}", "+\t\t\ttry {", "-\t", "-\t\t\t\taddNextUnit(unitToProcess);", "+", "+\t\t\taddNextUnit(unitToProcess);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec293e446ee73c4b3bce2cf2c106160c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayInitializer.java", "commitBeforeChange": "c941a64be2d9c708421a59ecb1ed6ad7ef276757", "commitAfterChange": "ce382d177319340f48603e8b03d1c9f19b8aacae", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType)", "diff": ["-\t\t}", "+\t\t\t// fault-tolerance - resolve other expressions as well", "+\t\t\tfor (int i = 1, length = this.expressions.length; i < length; i++) {", "+\t\t\t\texpression = this.expressions[i];", "+\t\t\t\tif (expression != null) {", "+\t\t\t\t\texpression.resolveType(scope)\t;", "+\t\t\t\t}", "+\t\t\t}\t\t}", "-\t\t}", "-\t\t// fault-tolerance - resolve other expressions as well", "-\t\tfor (int i = 1, length = this.expressions.length; i < length; i++) {", "-\t\t\tExpression expression = this.expressions[i];", "-\t\t\tif (expression != null) {", "-\t\t\t\texpression.resolveType(scope)\t;", "-\t\t\t}"]}], "num": 20243}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5721c61efc4c7b1cb0905bb8fdb96c4f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d7016364b6ff96c165e39430aa518c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java", "commitBeforeChange": "99d47e4046e97803f75625986f5eb5ffc13cddfe", "commitAfterChange": "8282cb3c46786d73ca763e64384724ac9c0798d9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " public void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint)", "diff": ["-public void collectSubstitutes(TypeBinding otherType, Map substitutes) {", "-    if (otherType.isArrayType()) {", "-        int otherDim = otherType.dimensions();", "-        if (otherDim == this.dimensions) {", "-\t\t    this.leafComponentType.collectSubstitutes(otherType.leafComponentType(), substitutes);", "-        } else if (otherDim > this.dimensions) {", "-            ArrayBinding otherReducedType = this.environment.createArrayType(otherType.leafComponentType(), otherDim - this.dimensions);", "-            this.leafComponentType.collectSubstitutes(otherReducedType, substitutes);", "-        }", "-    } ", "+public void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint) {", "+\t", "+\tif ((this.tagBits & TagBits.HasTypeVariable) == 0) return;", "+\tif (otherType == NullBinding) return;", "+\t", "+\tswitch(otherType.kind()) {", "+\t\tcase Binding.ARRAY_TYPE :", "+\t        int otherDim = otherType.dimensions();", "+\t        if (otherDim == this.dimensions) {", "+\t\t\t    this.leafComponentType.collectSubstitutes(scope, otherType.leafComponentType(), substitutes, constraint);", "+\t        } else if (otherDim > this.dimensions) {", "+\t            ArrayBinding otherReducedType = this.environment.createArrayType(otherType.leafComponentType(), otherDim - this.dimensions);", "+\t            this.leafComponentType.collectSubstitutes(scope, otherReducedType, substitutes, constraint);", "+\t        }", "+\t\t\tbreak;", "+\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t//TypeVariableBinding variable = (TypeVariableBinding) otherType;", "+\t\t\t// TODO (philippe) should consider array bounds, and recurse", "+\t\t\tbreak;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc5116377d74f23d25f79cdd6fde0714", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java", "commitBeforeChange": "077229504ccd77d256450ca55e2c9e212f3f94d4", "commitAfterChange": "2d87d31e89bc602d928b4671e91e81b8af28ddbe", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint)", "signatureAfterChange": " public void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "diff": ["- */", "-public void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint) {", "+*/", "+public void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint) {", "-\tif (otherType == NullBinding) return;", "+\tif (actualType == NullBinding) return;", "-\tswitch(otherType.kind()) {", "+\tswitch(actualType.kind()) {", "-\t        int otherDim = otherType.dimensions();", "-\t        if (otherDim == this.dimensions) {", "-\t\t\t    this.leafComponentType.collectSubstitutes(scope, otherType.leafComponentType(), substitutes, constraint);", "-\t        } else if (otherDim > this.dimensions) {", "-\t            ArrayBinding otherReducedType = this.environment.createArrayType(otherType.leafComponentType(), otherDim - this.dimensions);", "-\t            this.leafComponentType.collectSubstitutes(scope, otherReducedType, substitutes, constraint);", "+\t        int actualDim = actualType.dimensions();", "+\t        if (actualDim == this.dimensions) {", "+\t\t\t    this.leafComponentType.collectSubstitutes(scope, actualType.leafComponentType(), substitutes, constraint);", "+\t        } else if (actualDim > this.dimensions) {", "+\t            ArrayBinding actualReducedType = this.environment.createArrayType(actualType.leafComponentType(), actualDim - this.dimensions);", "+\t            this.leafComponentType.collectSubstitutes(scope, actualReducedType, substitutes, constraint);"]}], "num": 65595}
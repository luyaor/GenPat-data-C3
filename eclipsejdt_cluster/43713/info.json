{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36e800c038306602156fcc76ef16f9f8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b952ec686fec33e43a31c9ca38c645a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "37207b2312332e7eb9b138e12e2db23f9f9da53e", "commitAfterChange": "1829731a70d63f049379e6ceb23edadc61e7b589", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  private void createFields(IBinaryField[] iFields, long sourceLevel, char[][][] missingTypeNames)", "signatureAfterChange": "  private void createFields(IBinaryField[] iFields, long sourceLevel, char[][][] missingTypeNames)", "diff": ["-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {", "-\t\t\t\tfor (int i = 0; i <size; i++) {", "-\t\t\t\t\tIBinaryField binaryField = iFields[i];", "-\t\t\t\t\tscanFieldForNullAnnotation(binaryField, this.fields[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cef9c965113d3843d80f05549db19ec7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "874e2c41609c64af417834df9af2e898d8dcf37a", "commitAfterChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  private void createFields(IBinaryField[] iFields, long sourceLevel, char[][][] missingTypeNames)", "signatureAfterChange": "  private void createFields(IBinaryField[] iFields, long sourceLevel, char[][][] missingTypeNames)", "diff": ["-\t\t\tif (this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {", "-\t\t\t\tfor (int i = 0; i <size; i++) {", "-\t\t\t\t\tIBinaryField binaryField = iFields[i];", "-\t\t\t\t\tscanFieldForNullAnnotation(binaryField, this.fields[i]);", "-\t\t\t\t}", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e40cb50ba5cdd7ec8525398605662880", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "8a408b497efbeecb377b7aba6d2f30900a2a3a12", "commitAfterChange": "d50174723dbd85184698fc85260a3922d407e188", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " boolean areParametersEqual(MethodBinding one, MethodBinding two)", "signatureAfterChange": " boolean areParametersEqual(MethodBinding one, MethodBinding two)", "diff": ["-\tif (one.declaringClass.isInterface()) {", "-\t\tfor (int i = 0; i < length; i++)", "-\t\t\tif (!areTypesEqual(oneArgs[i], twoArgs[i]))", "-\t\t\t\treturn false;", "-\t} else {", "-\t\t// methods with raw parameters are considered equal to inherited methods", "-\t\t// with parameterized parameters for backwards compatibility, need a more complex check", "-\t\tint i;", "-\t\tfoundRAW: for (i = 0; i < length; i++) {", "-\t\t\tif (!areTypesEqual(oneArgs[i], twoArgs[i])) {", "-\t\t\t\tif (oneArgs[i].leafComponentType().isRawType()) {", "-\t\t\t\t\tif (oneArgs[i].dimensions() == twoArgs[i].dimensions() && oneArgs[i].leafComponentType().isEquivalentTo(twoArgs[i].leafComponentType())) {", "-\t\t\t\t\t\t// raw mode does not apply if the method defines its own type variables", "-\t\t\t\t\t\tif (one.typeVariables != Binding.NO_TYPE_VARIABLES)", "+\t", "+\t// methods with raw parameters are considered equal to inherited methods", "+\t// with parameterized parameters for backwards compatibility, need a more complex check", "+\tint i;", "+\tfoundRAW: for (i = 0; i < length; i++) {", "+\t\tif (!areTypesEqual(oneArgs[i], twoArgs[i])) {", "+\t\t\tif (oneArgs[i].leafComponentType().isRawType()) {", "+\t\t\t\tif (oneArgs[i].dimensions() == twoArgs[i].dimensions() && oneArgs[i].leafComponentType().isEquivalentTo(twoArgs[i].leafComponentType())) {", "+\t\t\t\t\t// raw mode does not apply if the method defines its own type variables", "+\t\t\t\t\tif (one.typeVariables != Binding.NO_TYPE_VARIABLES)", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t// one parameter type is raw, hence all parameters types must be raw or non generic", "+\t\t\t\t\t// otherwise we have a mismatch check backwards", "+\t\t\t\t\tfor (int j = 0; j < i; j++)", "+\t\t\t\t\t\tif (oneArgs[j].leafComponentType().isParameterizedTypeWithActualArguments())", "-\t\t\t\t\t\t// one parameter type is raw, hence all parameters types must be raw or non generic", "-\t\t\t\t\t\t// otherwise we have a mismatch check backwards", "-\t\t\t\t\t\tfor (int j = 0; j < i; j++)", "-\t\t\t\t\t\t\tif (oneArgs[j].leafComponentType().isParameterizedTypeWithActualArguments())", "-\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t// switch to all raw mode", "-\t\t\t\t\t\tbreak foundRAW;", "-\t\t\t\t\t}", "+\t\t\t\t\t// switch to all raw mode", "+\t\t\t\t\tbreak foundRAW;", "-\t\t\t\treturn false;", "+\t\t\treturn false;", "-\t\t// all raw mode for remaining parameters (if any)", "-\t\tfor (i++; i < length; i++) {", "-\t\t\tif (!areTypesEqual(oneArgs[i], twoArgs[i])) {", "-\t\t\t\tif (oneArgs[i].leafComponentType().isRawType())", "-\t\t\t\t\tif (oneArgs[i].dimensions() == twoArgs[i].dimensions() && oneArgs[i].leafComponentType().isEquivalentTo(twoArgs[i].leafComponentType()))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\treturn false;", "-\t\t\t} else if (oneArgs[i].leafComponentType().isParameterizedTypeWithActualArguments()) {", "-\t\t\t\treturn false; // no remaining parameter can be a Parameterized type (if one has been converted then all RAW types must be converted)", "-\t\t\t}", "+\t}", "+\t// all raw mode for remaining parameters (if any)", "+\tfor (i++; i < length; i++) {", "+\t\tif (!areTypesEqual(oneArgs[i], twoArgs[i])) {", "+\t\t\tif (oneArgs[i].leafComponentType().isRawType())", "+\t\t\t\tif (oneArgs[i].dimensions() == twoArgs[i].dimensions() && oneArgs[i].leafComponentType().isEquivalentTo(twoArgs[i].leafComponentType()))", "+\t\t\t\t\tcontinue;", "+\t\t\treturn false;", "+\t\t} else if (oneArgs[i].leafComponentType().isParameterizedTypeWithActualArguments()) {", "+\t\t\treturn false; // no remaining parameter can be a Parameterized type (if one has been converted then all RAW types must be converted)"]}], "num": 43713}
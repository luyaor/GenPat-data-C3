{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4e0942ed3c99d5db1edcca22084b9911", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54b5d792598684b2e69cf0a88f760d26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "91a5b49121a22c32ff81484145fe6ce15b755e81", "commitAfterChange": "16b9910572e7876db169469e4f3c509a31490ed4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(ISourceMethod sourceMethod, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(ISourceMethod sourceMethod, CompilationResult compilationResult)", "diff": ["+\t\t", "+\t\t/* convert local and anonymous types */", "+\t\tif ((this.flags & LOCAL_TYPE) != 0 && sourceMethod instanceof SourceMethodElementInfo) {", "+\t\t\tIJavaElement[] children = ((SourceMethodElementInfo)sourceMethod).getChildren();", "+\t\t\tint typesLength = children.length;", "+\t\t\tif (typesLength != 0) {", "+\t\t\t\tStatement[] statements = new Statement[typesLength];", "+\t\t\t\tfor (int i = 0; i < typesLength; i++) {", "+\t\t\t\t\tJavaElement type = (JavaElement)children[i];", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tTypeDeclaration localType = convert((SourceTypeElementInfo)type.getElementInfo(), compilationResult);", "+\t\t\t\t\t\tif ((localType.bits & ASTNode.IsAnonymousTypeMASK) != 0) {", "+\t\t\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(localType);", "+\t\t\t\t\t\t\texpression.type = localType.superclass;", "+\t\t\t\t\t\t\tlocalType.superclass = null;", "+\t\t\t\t\t\t\tlocalType.superInterfaces = null;", "+\t\t\t\t\t\t\tlocalType.allocation = expression;", "+\t\t\t\t\t\t\tstatements[i] = expression;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tstatements[i] = localType;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t// ignore", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tmethod.statements = statements;", "+\t\t\t}", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d300e389136584e4acba34712da9eb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "91a5b49121a22c32ff81484145fe6ce15b755e81", "commitAfterChange": "16b9910572e7876db169469e4f3c509a31490ed4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate FieldDeclaration convert(ISourceField sourceField, TypeDeclaration type)", "signatureAfterChange": " \tprivate FieldDeclaration convert(ISourceField sourceField, TypeDeclaration type, CompilationResult compilationResult)", "diff": ["-\tprivate FieldDeclaration convert(ISourceField sourceField, TypeDeclaration type) {", "+\tprivate FieldDeclaration convert(ISourceField sourceField, TypeDeclaration type, CompilationResult compilationResult) {", "+\t\t/* conversion of field constant */", "-\t\t\t/* conversion of field constant */", "+\t\t/* conversion of local and anonymous types */", "+\t\tif ((this.flags & LOCAL_TYPE) != 0 && sourceField instanceof SourceFieldElementInfo) {", "+\t\t\tIJavaElement[] children = ((SourceFieldElementInfo)sourceField).getChildren();", "+\t\t\tint typesLength = children.length;", "+\t\t\tif (typesLength > 0) {", "+\t\t\t\tArrayInitializer initializer = new ArrayInitializer();", "+\t\t\t\tfield.initialization = initializer;", "+\t\t\t\tExpression[] expressions = new Expression[typesLength];", "+\t\t\t\tinitializer.expressions = expressions;", "+\t\t\t\tfor (int i = 0; i < typesLength; i++) {", "+\t\t\t\t\tIJavaElement localType = children[i];", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tTypeDeclaration anonymousLocalTypeDeclaration = convert((SourceTypeElementInfo)((JavaElement)localType).getElementInfo(),compilationResult);", "+\t\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(anonymousLocalTypeDeclaration);", "+\t\t\t\t\t\texpression.type = anonymousLocalTypeDeclaration.superclass;", "+\t\t\t\t\t\tanonymousLocalTypeDeclaration.superclass = null;", "+\t\t\t\t\t\tanonymousLocalTypeDeclaration.superInterfaces = null;", "+\t\t\t\t\t\tanonymousLocalTypeDeclaration.allocation = expression;", "+\t\t\t\t\t\texpressions[i] = expression;", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t// ignore", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 56047}
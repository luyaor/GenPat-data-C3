{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "615fe8f4f17658d375c7fb37626cf8c4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08567c5c82eb594ced8093626d8aa9f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "61d09a86467b5181e97f5bb9e14c930813d4a727", "commitAfterChange": "c614621106519ff8481a1054577c7b362708dd68", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\t\t\t\tif (!isConditionOptimizedFalse) {", "-\t\t\t\t\t\tloopingContext.complainOnFinalAssignmentsInLoop(currentScope, flowInfo);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif (!isConditionOptimizedFalse) {", "-\t\t\t\t\tloopingContext.complainOnFinalAssignmentsInLoop(currentScope, flowInfo);", "-\t\tLoopingFlowContext condLoopContext;", "-\t\t\t\t(condLoopContext =", "-\t\t\t\t\tnew LoopingFlowContext(flowContext, this, null, null, currentScope)),", "+\t\t\t\tloopingContext,", "-\t\tcondLoopContext.complainOnFinalAssignmentsInLoop(currentScope, flowInfo);", "+\t\tif (!isConditionOptimizedFalse && continueLabel != null) {", "+\t\t\tloopingContext.complainOnFinalAssignmentsInLoop(currentScope, flowInfo);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81eadf8119253974e2d43352551e6f0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "fe905e29a608f61f2afe181f4c1e4e27bb2b95dc", "commitAfterChange": "53a7cfa9bf2a3a1ade921d716dbdc58a4bfc35d4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["-\tString extType;", "-\tif (kind == IPackageFragmentRoot.K_SOURCE) {", "-\t\textType = EXTENSION_java;", "-\t} else {", "-\t\textType = EXTENSION_class;", "-\t}", "-\t\t\t\tString extension = child.getProjectRelativePath().getFileExtension();", "-\t\t\t\tif (extension != null) {", "-\t\t\t\t\tif (extension.equalsIgnoreCase(extType)) {", "-\t\t\t\t\t\tIJavaElement childElement;", "-\t\t\t\t\t\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isValidCompilationUnitName(child.getName())) {", "-\t\t\t\t\t\t\tchildElement = new CompilationUnit(this, child.getName(), DefaultWorkingCopyOwner.PRIMARY);", "-\t\t\t\t\t\t\tvChildren.add(childElement);", "-\t\t\t\t\t\t} else if (Util.isValidClassFileName(child.getName())) {", "-\t\t\t\t\t\t\tchildElement = getClassFile(child.getName());", "-\t\t\t\t\t\t\tvChildren.add(childElement);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\t\tIJavaElement childElement;", "+\t\t\t\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isValidCompilationUnitName(child.getName())) {", "+\t\t\t\t\tchildElement = new CompilationUnit(this, child.getName(), DefaultWorkingCopyOwner.PRIMARY);", "+\t\t\t\t\tvChildren.add(childElement);", "+\t\t\t\t} else if (kind == IPackageFragmentRoot.K_BINARY && Util.isValidClassFileName(child.getName())) {", "+\t\t\t\t\tchildElement = getClassFile(child.getName());", "+\t\t\t\t\tvChildren.add(childElement);"]}], "num": 26802}
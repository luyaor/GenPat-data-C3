{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7acb2c2abb6573a201681255c945b030", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c38c96492eca997c53bdd3a4efde7fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "dfc3b8264596f4754baac29eef1af815f182c4f3", "commitAfterChange": "db0143bfca2398448195a62173050bd24d4fcb31", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \r public CompletionEngine(\r \tISearchableNameEnvironment nameEnvironment, ICompletionRequestor requestor, ConfigurableOption[] settings)", "signatureAfterChange": "\r \r \tpublic CompletionEngine(\r \t\tISearchableNameEnvironment nameEnvironment,\r \t\tICompletionRequestor requestor,\r \t\tConfigurableOption[] settings)", "diff": ["+\tpublic CompletionEngine(\r", "+\t\tISearchableNameEnvironment nameEnvironment,\r", "+\t\tICompletionRequestor requestor,\r", "+\t\tConfigurableOption[] settings) {\r", "-public CompletionEngine(\r", "-\tISearchableNameEnvironment nameEnvironment, ICompletionRequestor requestor, ConfigurableOption[] settings) {\r", "+\t\tthis.requestor = requestor;\r", "+\t\tthis.nameEnvironment = nameEnvironment;\r", "-\tthis.requestor = requestor;\r", "-\tthis.nameEnvironment = nameEnvironment;\r", "-\r", "-\tCompilerOptions options = new CompilerOptions(settings);\r", "-\tProblemReporter problemReporter =\r", "-\t\tnew ProblemReporter(\r", "-\t\t\tDefaultErrorHandlingPolicies.proceedWithAllProblems(),\r", "-\t\t\toptions,\r", "-\t\t\tnew DefaultProblemFactory(Locale.getDefault())) {\r", "-\t\t\t\tpublic void record(IProblem problem, CompilationResult unitResult) {\r", "-\t\t\t\t\tif (problem.getID() != ProblemIrritants.UnmatchedBracket) {\r", "-\t\t\t\t\t\tunitResult.record(problem);\r", "-\t\t\t\t\t\tCompletionEngine.this.requestor.acceptError(problem);\r", "-\t\t\t\t\t}\r", "+\t\toptions = new CompletionOptions(settings);\r", "+\t\tCompilerOptions compilerOptions = new CompilerOptions(settings);\r", "+\t\tProblemReporter problemReporter =\r", "+\t\t\tnew ProblemReporter(\r", "+\t\t\t\tDefaultErrorHandlingPolicies.proceedWithAllProblems(),\r", "+\t\t\t\tcompilerOptions,\r", "+\t\t\t\tnew DefaultProblemFactory(Locale.getDefault())) {\r", "+\t\t\tpublic void record(IProblem problem, CompilationResult unitResult) {\r", "+\t\t\t\tif (problem.getID() != ProblemIrritants.UnmatchedBracket) {\r", "+\t\t\t\t\tunitResult.record(problem);\r", "+\t\t\t\t\tCompletionEngine.this.requestor.acceptError(problem);\r", "-\t\t\t};\r", "-\r", "-\tthis.parser = new CompletionParser(problemReporter, options.getAssertMode());\r", "-\tthis.lookupEnvironment = new LookupEnvironment(this, options, problemReporter, nameEnvironment);\r", "-}\r", "+\t\t};\r", "+\r", "+\t\tthis.parser =\r", "+\t\t\tnew CompletionParser(problemReporter, compilerOptions.getAssertMode());\r", "+\t\tthis.lookupEnvironment =\r", "+\t\t\tnew LookupEnvironment(this, compilerOptions, problemReporter, nameEnvironment);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "729b759d4370bee9263bc6a1b19ab5c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "61910f9ffdfc607d31120af5ce39e6bf8d69bab0", "commitAfterChange": "3a10f90d587275b68cb248facf53e1ae26bb70b8", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 74, "signatureBeforeChange": "  \tprotected void setUp() throws Exception", "signatureAfterChange": " \tprotected void setUp() throws Exception", "diff": ["+}", "+\t\t\t// WORK make all needed inits once and for all", "+\t\t\t\t\tJAVAC_OUTPUT_DIR = new File(JAVAC_OUTPUT_DIR_NAME);", "+\t\t\t\t\t// WORK simplify jdk.root out", "-\t\t\t\t\tcmdLineHeader.append(JAVAC_OUTPUT_DIR.indexOf(\" \") != -1 ? \"\\\"\" + JAVAC_OUTPUT_DIR + \"\\\"\" : JAVAC_OUTPUT_DIR);", "+\t\t\t\t\tcmdLineHeader.append(JAVAC_OUTPUT_DIR_NAME.indexOf(\" \") != -1 ? \"\\\"\" + JAVAC_OUTPUT_DIR_NAME + \"\\\"\" : JAVAC_OUTPUT_DIR_NAME);", "+\t\t\t\t\t// WORK new javac system does not do that... reconsider", "+\t\t\t\t\t// WORK if we keep a full log, it should not mix javac versions...", "-\t\t\t\t\t\tjavacCompilers.add(new JavacCompiler(jdkRootDirPath.toString(), version));\t", "+\t\t\t\t\t\tjavacCompilers.add(new JavacCompiler(jdkRootDirPath.toString()));\t"]}], "num": 50256}
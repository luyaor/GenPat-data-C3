{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "934866626e8e16edf5ec6032b16943df", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "509c96effce07a452f6cac20ce74a6a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathDirectory.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  String[] directoryList(String qualifiedPackageName)", "signatureAfterChange": "  String[] directoryList(String qualifiedPackageName)", "diff": ["-\tFile dir = new File(binaryPath + qualifiedPackageName);", "-\tnotFound : if (dir != null && dir.isDirectory()) {", "-\t\t// must protect against a case insensitive File call", "-\t\t// walk the qualifiedPackageName backwards looking for an uppercase character before the '/'", "-\t\tint index = qualifiedPackageName.length();", "-\t\tint last = qualifiedPackageName.lastIndexOf('/');", "-\t\twhile (--index > last && !Character.isUpperCase(qualifiedPackageName.charAt(index))) {}", "-\t\tif (index > last) {", "-\t\t\tif (last == -1) {", "-\t\t\t\tif (!doesFileExist(qualifiedPackageName, \"\")) //$NON-NLS-1$ ", "-\t\t\t\t\tbreak notFound;", "-\t\t\t} else {", "-\t\t\t\tString packageName = qualifiedPackageName.substring(last + 1);", "-\t\t\t\tString parentPackage = qualifiedPackageName.substring(0, last);", "-\t\t\t\tif (!doesFileExist(packageName, parentPackage))", "-\t\t\t\t\tbreak notFound;", "+\ttry {", "+\t\tIResource folder = binaryFolder.findMember(qualifiedPackageName); // this is a case-sensitive check", "+\t\tif (folder != null && folder.getType() == IResource.FOLDER) {", "+\t\t\tIResource[] members = ((IFolder) folder).members();", "+\t\t\tdirList = new String[members.length];", "+\t\t\tint index = 0;", "+\t\t\tfor (int i = 0, l = members.length; i < l; i++) {", "+\t\t\t\tIResource m = members[i];", "+\t\t\t\tif (m.getType() == IResource.FILE && JavaBuilder.CLASS_EXTENSION.equalsIgnoreCase(m.getFileExtension()))", "+\t\t\t\t\t// add exclusion pattern check here if we want to hide .class files", "+\t\t\t\t\tdirList[index++] = m.getName();", "+\t\t\tif (index < dirList.length)", "+\t\t\t\tSystem.arraycopy(dirList, 0, dirList = new String[index], 0, index);", "+\t\t\tdirectoryCache.put(qualifiedPackageName, dirList);", "+\t\t\treturn dirList;", "-\t\tif ((dirList = dir.list()) == null)", "-\t\t\tdirList = new String[0];", "-\t\tdirectoryCache.put(qualifiedPackageName, dirList);", "-\t\treturn dirList;", "+\t} catch(CoreException ignored) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95435749e4b5f9e8c525e3a0f733bc09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/TestUtil.java", "commitBeforeChange": "a4c0884f4909a7148eef43d80a79301d90c42921", "commitAfterChange": "04ac73525421db342cbea7b61068c93b1fac3e50", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic static void createAnnotationJar(String jarPath) \t\tthrows IOException", "signatureAfterChange": " \tpublic static File createAndAddExternalAnnotationJar(  \t\t\tIJavaProject project  ) \t\tthrows IOException, JavaModelException", "diff": ["-\tpublic static void createAnnotationJar(String jarPath)", "-\t\tthrows IOException", "+\t */", "+\tpublic static File createAndAddExternalAnnotationJar( ", "+\t\t\tIJavaProject project  )", "+\t\tthrows IOException, JavaModelException", "-\t\t//", "-\t\t// This filter only accepts classes in the package ANNOTATIONS_PKG.", "-\t\t// This way, we can jar up these files and have them available to the", "-\t\t// project", "-\t\t// so code can reference types in there.", "-\t\t//", "-\t\tFileFilter filter = new FileFilter()", "-\t\t{", "-\t\t\tpublic boolean accept(File pathname)", "-\t\t\t{", "-\t\t\t\tIPath f = new Path( pathname.getAbsolutePath() );", "-", "-\t\t\t\tint nsegments = f.matchingFirstSegments( new Path(", "-\t\t\t\t\tgetPluginClassesDir() ) );", "-\t\t\t\tboolean ok = true;", "-\t\t\t\tint min = Math.min( f.segmentCount() - nsegments,", "-\t\t\t\t\tANNOTATIONS_PKG_PARTS.length );", "-\t\t\t\tfor( int i = nsegments, j = 0; j < min; i++, j++ )", "-\t\t\t\t{", "-\t\t\t\t\tif( !f.segment( i ).equals( ANNOTATIONS_PKG_PARTS[j] ) )", "-\t\t\t\t\t{", "-\t\t\t\t\t\tok = false;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn ok;", "-\t\t\t}", "-\t\t};", "-\t\tzip( new File( getPluginClassesDir() ), jarPath, filter );", "+\t\tIPath projectPath = getProjectPath( project );", "+\t\tFile jarFile = new File( projectPath.toFile(), \"ClassesExt.jar\" );", "+\t\tString classesJarPath = jarFile.getAbsolutePath();", "+\t\tFileFilter classFilter = new PackageFileFilter(", "+\t\t\t\tEXTANNOTATIONS_PKG, getPluginExtClassesDir());", "+\t\tFileFilter manifestFilter = new PackageFileFilter(", "+\t\t\t\t\"META-INF\", getPluginExtSrcDir());", "+\t\tMap<File, FileFilter> files = new HashMap<File, FileFilter>(2);", "+\t\tfiles.put(new File( getPluginExtClassesDir() ), classFilter);", "+\t\tfiles.put(new File( getPluginExtSrcDir() ), manifestFilter);", "+\t\tzip( classesJarPath, files );", "+\t\taddLibraryEntry( project, new Path(classesJarPath), null /*srcAttachmentPath*/, ", "+\t\t\tnull /*srcAttachmentPathRoot*/, true );", "+\t\treturn new File(classesJarPath);"]}], "num": 33934}
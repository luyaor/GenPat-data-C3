{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1a6add93eff8025525cefc8b2a9d1ea0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14d53b6df581ce8d6ecff87daff2d643", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "eb1a68336fb3532a394ee8efeeada286d7b55c17", "commitAfterChange": "709a7ffdab3a47190685515954dea357e978ebb9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate boolean checkAnnotations()", "signatureAfterChange": " \tprivate boolean checkAnnotations()", "diff": ["-\t\tif (null == am3) {", "+\t\tif (_testFailingCases && null == am3) {", "-\t\t\t\tif (null == am4) {", "+\t\t\t\tif (_testFailingCases && null == am4) {", "-\t\t\t\tif (null == am5) {", "+\t\t\t\tif (_testFailingCases && null == am5) {", "-\t\t\t\tif (null == am8) {", "+\t\t\t\tif (_testFailingCases && null == am8) {", "+\t\t\telse if (\"s1\".equals(name)) {", "+\t\t\t\tAnnotationMirror am = findAnnotation(element, \"Anno1\");", "+\t\t\t\tif (null == am) {", "+\t\t\t\t\treportError(\"Couldn't find annotation Anno on field Negative1.s1\");", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tMap<? extends ExecutableElement, ? extends AnnotationValue> values = am.getElementValues();", "+\t\t\t\tfor (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : values.entrySet()) {", "+\t\t\t\t\tif (\"value\".equals(entry.getKey().getSimpleName().toString())) {", "+\t\t\t\t\t\tif (!\"spud\".equals(entry.getValue().getValue())) {", "+\t\t\t\t\t\t\treportError(\"Unexpected value for Anno1 on Negative1.s1: \" + entry.getValue().getValue());", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47fea76c38dab9808fdd2326487d7a8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/visitors/VisitorProc.java", "commitBeforeChange": "82fb6745d0f2bc2c9b5e4740da70b2e364d6955a", "commitAfterChange": "c295624cf25dea9fdc929a62413bd288dbeb35d7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "signatureAfterChange": "  \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "diff": ["+\t\t", "+\t\tAnnotationVisitorTester annoValVisitor = new AnnotationVisitorTester();", "+\t\tTypeElement typedAnnosDecl = _elementUtils.getTypeElement(\"targets.model.pc.TypedAnnos\");", "+\t\tif (null == typedAnnosDecl) {", "+\t\t\treportError(\"Couldn't find targets.model.pc.TypedAnnos\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tfor (TypeElement anno : annotations) {", "+\t\t\tif (typedAnnosDecl.equals(anno.getEnclosingElement())) {", "+\t\t\t\tfor (Element elem : roundEnv.getElementsAnnotatedWith(anno)) {", "+\t\t\t\t\tfor (AnnotationMirror annoMirror : elem.getAnnotationMirrors()) {", "+\t\t\t\t\t\tif (anno.equals(annoMirror.getAnnotationType().asElement())) {", "+\t\t\t\t\t\t\tMap<? extends ExecutableElement, ? extends AnnotationValue> values = annoMirror.getElementValues();", "+\t\t\t\t\t\t\tfor (AnnotationValue val : values.values()) {", "+\t\t\t\t\t\t\t\tval.accept(annoValVisitor, null);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (!annoValVisitor.checkVisits()) {", "+\t\t\treportError(\"Annotation value visitor was not visited as expected\");", "+\t\t\treturn false;", "+\t\t}", "+"]}], "num": 10117}
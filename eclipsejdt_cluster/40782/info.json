{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "858bf4bf16cd2bfb377d092d3a5d6499", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55fcc856c7d4b39acbe9d2ee17d26242", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java", "commitBeforeChange": "b3921c5eea6f0c6a7e0f7e9f7a3a4e8e611961a3", "commitAfterChange": "502bad8ce7c832154fb3a7a8f85a868d7d077253", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(CompilationUnit workingCopy, IProblemRequestor problemRequestor) throws JavaModelException", "signatureAfterChange": " \tpublic org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(CompilationUnit workingCopy) throws JavaModelException", "diff": ["-\tpublic org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(CompilationUnit workingCopy, IProblemRequestor problemRequestor) throws JavaModelException {", "+\tpublic org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(CompilationUnit workingCopy) throws JavaModelException {", "+\t\t\tthis.resolveBindings = this.requestorIsActive;", "-\t\tif (this.ast != null) return this.ast; // no need to recompute AST if known already", "-\t\tif (((this.reconcileFlags & ICompilationUnit.FORCE_PROBLEM_DETECTION) != 0) || this.resolveBindings) {", "-\t\t\tif (JavaProject.hasJavaNature(workingCopy.getJavaProject().getProject())) {", "-\t\t\t\tHashMap problemMap;", "-\t\t\t\tif (this.problems == null) {", "-\t\t\t\t\tproblemMap = new HashMap();", "-\t\t\t\t\tif ((this.reconcileFlags & ICompilationUnit.FORCE_PROBLEM_DETECTION) != 0)", "-\t\t\t\t\t\tthis.problems = problemMap;", "-\t\t\t\t} else", "-\t\t\t\t\tproblemMap = this.problems;", "-\t\t\t\tCompilationUnitDeclaration unit = null;", "-\t\t\t\ttry {", "-\t\t\t\t\t// find problems", "-\t\t\t\t\tchar[] contents = workingCopy.getContents();", "-\t\t\t\t\tunit =", "-\t\t\t\t\t\tCompilationUnitProblemFinder.process(", "-\t\t\t\t\t\t\tworkingCopy,", "-\t\t\t\t\t\t\tcontents,", "-\t\t\t\t\t\t\tthis.workingCopyOwner,", "-\t\t\t\t\t\t\tproblemMap,", "-\t\t\t\t\t\t\tthis.astLevel != ICompilationUnit.NO_AST/*creating AST if level is not NO_AST */,", "-\t\t\t\t\t\t\treconcileFlags,", "-\t\t\t\t\t\t\tthis.progressMonitor);", "-\t\t\t\t\tif (this.progressMonitor != null) this.progressMonitor.worked(1);", "-", "-\t\t\t\t\t// create AST if needed", "-\t\t\t\t\tif (this.astLevel != ICompilationUnit.NO_AST && unit != null) {", "-\t\t\t\t\t\tMap options = workingCopy.getJavaProject().getOptions(true);", "-\t\t\t\t\t\tthis.ast =", "-\t\t\t\t\t\t\tAST.convertCompilationUnit(", "-\t\t\t\t\t\t\t\tthis.astLevel,", "-\t\t\t\t\t\t\t\tunit,", "-\t\t\t\t\t\t\t\tcontents,", "-\t\t\t\t\t\t\t\toptions,", "-\t\t\t\t\t\t\t\ttrue/*isResolved*/,", "-\t\t\t\t\t\t\t\tworkingCopy,", "-\t\t\t\t\t\t\t\treconcileFlags,", "-\t\t\t\t\t\t\t\tthis.progressMonitor);", "-\t\t\t\t\t\tif (this.ast != null) {", "-\t\t\t\t\t\t\tthis.deltaBuilder.delta = new JavaElementDelta(workingCopy);", "-\t\t\t\t\t\t\tthis.deltaBuilder.delta.changedAST(this.ast);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (this.progressMonitor != null) this.progressMonitor.worked(1);", "-\t\t\t\t\t}", "-\t\t\t    } catch (JavaModelException e) {", "-\t\t\t    \tif (JavaProject.hasJavaNature(workingCopy.getJavaProject().getProject()))", "-\t\t\t    \t\tthrow e;", "-\t\t\t    \t// else JavaProject has lost its nature (or most likely was closed/deleted) while reconciling -> ignore", "-\t\t\t    \t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=100919)", "-\t\t\t    } finally {", "-\t\t\t        if (unit != null) {", "-\t\t\t            unit.cleanUp();", "-\t\t\t        }", "-\t\t\t    }", "-\t\t\t} // else working copy not in a Java project", "-\t\t\treturn this.ast;", "-\t\t}", "-\t\treturn null;", "+\t\tif (this.ast != null) ", "+\t\t\treturn this.ast; // no need to recompute AST if known already", "+\t\t", "+\t\tCompilationUnitDeclaration unit = null;", "+\t\tchar[] contents = null;", "+\t\ttry {", "+\t\t\t// find problems if needed", "+\t\t\tif (JavaProject.hasJavaNature(workingCopy.getJavaProject().getProject()) ", "+\t\t\t\t\t&& (this.reconcileFlags & ICompilationUnit.FORCE_PROBLEM_DETECTION) != 0) {", "+\t\t\t\tthis.resolveBindings = this.requestorIsActive;", "+\t\t\t\tif (this.problems == null)", "+\t\t\t\t\tthis.problems = new HashMap();", "+\t\t\t\tcontents = workingCopy.getContents();", "+\t\t\t\tunit =", "+\t\t\t\t\tCompilationUnitProblemFinder.process(", "+\t\t\t\t\t\tworkingCopy,", "+\t\t\t\t\t\tcontents,", "+\t\t\t\t\t\tthis.workingCopyOwner,", "+\t\t\t\t\t\tthis.problems,", "+\t\t\t\t\t\tthis.astLevel != ICompilationUnit.NO_AST/*creating AST if level is not NO_AST */,", "+\t\t\t\t\t\treconcileFlags,", "+\t\t\t\t\t\tthis.progressMonitor);", "+\t\t\t\tif (this.progressMonitor != null) this.progressMonitor.worked(1);", "+\t\t\t}", "+\t\t\t", "+\t\t\t// create AST if needed", "+\t\t\tif (this.astLevel != ICompilationUnit.NO_AST ", "+\t\t\t\t\t&& unit !=null/*unit is null if working copy is consistent && (problem detection not forced || non-Java project) -> don't create AST as per API*/) {", "+\t\t\t\tMap options = workingCopy.getJavaProject().getOptions(true);", "+\t\t\t\t// convert AST", "+\t\t\t\tthis.ast =", "+\t\t\t\t\tAST.convertCompilationUnit(", "+\t\t\t\t\t\tthis.astLevel,", "+\t\t\t\t\t\tunit,", "+\t\t\t\t\t\tcontents,", "+\t\t\t\t\t\toptions,", "+\t\t\t\t\t\tthis.resolveBindings,", "+\t\t\t\t\t\tworkingCopy,", "+\t\t\t\t\t\treconcileFlags,", "+\t\t\t\t\t\tthis.progressMonitor);", "+\t\t\t\tif (this.ast != null) {", "+\t\t\t\t\tthis.deltaBuilder.delta = new JavaElementDelta(workingCopy);", "+\t\t\t\t\tthis.deltaBuilder.delta.changedAST(this.ast);", "+\t\t\t\t}", "+\t\t\t\tif (this.progressMonitor != null) this.progressMonitor.worked(1);", "+\t\t\t}", "+\t    } catch (JavaModelException e) {", "+\t    \tif (JavaProject.hasJavaNature(workingCopy.getJavaProject().getProject()))", "+\t    \t\tthrow e;", "+\t    \t// else JavaProject has lost its nature (or most likely was closed/deleted) while reconciling -> ignore", "+\t    \t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=100919)", "+\t    } finally {", "+\t        if (unit != null) {", "+\t            unit.cleanUp();", "+\t        }", "+\t    }", "+\t\treturn this.ast;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88261d164b5728e03fcc1bfe9b1ead72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultCommentMapper.java", "commitBeforeChange": "e178d64eb65916b8b54353dd9e6bcf5b085bf212", "commitAfterChange": "b43b2427c7b970b1fbbb18c36881f31743b7cd83", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic int getExtendedEnd(ASTNode node)", "signatureAfterChange": " \tpublic int getExtendedEnd(ASTNode node)", "diff": ["-\t\tif (this.trailingComments != null) {", "-\t\t\tint[] range = (int[]) this.trailingComments.get(node);", "+\t\tif (this.trailingPtr >= 0) {", "+\t\t\tint[] range = null;", "+\t\t\tfor (int i=0; range==null && i<=this.trailingPtr; i++) {", "+\t\t\t\tif (this.trailingNodes[i] == node) range = this.trailingIndexes[i];", "+\t\t\t}", "-\t\t\t\tif (range[0] == -1 && range[1] == -1) {", "-\t\t\t\t\tASTNode parent = node.getParent();", "-\t\t\t\t\tif (parent != null && ((parent.getFlags() & ASTNode.ORIGINAL) != 0)) {", "-\t\t\t\t\t\treturn getExtendedEnd(parent);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tComment lastComment = this.comments[range[1]];", "-\t\t\t\t\tend = lastComment.getStartPosition() + lastComment.getLength();", "-\t\t\t\t}", "+\t\t\t\tComment lastComment = this.comments[range[1]];", "+\t\t\t\tend = lastComment.getStartPosition() + lastComment.getLength();"]}], "num": 40782}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "01da4501ece162f4a8400af1a055d89c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e37a1728a830bd55fa278e045f784b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "a9567e58ade978b67e4f2db4ee5fe35bc3c0d3fe", "commitAfterChange": "0b6f06d77f121375ae3494c8c329aad2cfc0a1a4", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "signatureAfterChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "diff": ["-\t\tTypeAnnotationWalker walker = getTypeAnnotationWalker(binaryType.getTypeAnnotations());", "+\t\tITypeAnnotationWalker walker = getTypeAnnotationWalker(binaryType.getTypeAnnotations());", "+\t\tITypeAnnotationWalker toplevelWalker = binaryType.enrichWithExternalAnnotationsFor(walker, null, this.environment);", "-\t\t\t\tthis.typeVariables = createTypeVariables(wrapper, true, missingTypeNames, walker, true/*class*/);", "+\t\t\t\tthis.typeVariables = createTypeVariables(wrapper, true, missingTypeNames, toplevelWalker, true/*class*/);", "-\t\t\t\tthis.superclass = this.environment.getTypeFromConstantPoolName(superclassName, 0, -1, false, missingTypeNames, walker.toSupertype((short) -1));", "+\t\t\t\tthis.superclass = this.environment.getTypeFromConstantPoolName(superclassName, 0, -1, false, missingTypeNames, toplevelWalker.toSupertype((short) -1, superclassName));", "-\t\t\t\t\t\tthis.superInterfaces[i] = this.environment.getTypeFromConstantPoolName(interfaceNames[i], 0, -1, false, missingTypeNames, walker.toSupertype(i));", "+\t\t\t\t\t\tthis.superInterfaces[i] = this.environment.getTypeFromConstantPoolName(interfaceNames[i], 0, -1, false, missingTypeNames, toplevelWalker.toSupertype(i, superclassName));", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twalker.toSupertype((short) -1));", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoplevelWalker.toSupertype((short) -1, wrapper.peekFullType()));", "-\t\t\t\t\ttypes.add(this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames, walker.toSupertype(rank++)));", "+\t\t\t\t\ttypes.add(this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames, toplevelWalker.toSupertype(rank++, wrapper.peekFullType())));", "-\t\t\tcreateFields(iFields, sourceLevel, missingTypeNames);", "-\t\t\tIBinaryMethod[] iMethods = createMethods(binaryType.getMethods(), sourceLevel, missingTypeNames);", "+\t\t\tcreateFields(iFields, binaryType, sourceLevel, missingTypeNames);", "+\t\t\tIBinaryMethod[] iMethods = createMethods(binaryType.getMethods(), binaryType, sourceLevel, missingTypeNames);", "-\t\t\t\t\tfor (int i = 0; i < iFields.length; i++)", "-\t\t\t\t\t\tscanFieldForNullAnnotation(iFields[i], this.fields[i], this.isEnum());", "+\t\t\t\t\tfor (int i = 0; i < iFields.length; i++) {", "+\t\t\t\t\t\t// below 1.8 we still might use an annotation walker to discover external annotations:", "+\t\t\t\t\t\tITypeAnnotationWalker fieldWalker = ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER;", "+\t\t\t\t\t\tif (sourceLevel < ClassFileConstants.JDK1_8)", "+\t\t\t\t\t\t\tfieldWalker = binaryType.enrichWithExternalAnnotationsFor(walker, iFields[i], this.environment);", "+\t\t\t\t\t\tscanFieldForNullAnnotation(iFields[i], this.fields[i], this.isEnum(), fieldWalker);", "+\t\t\t\t\t}", "-\t\t\t\t\tfor (int i = 0; i < iMethods.length; i++)", "-\t\t\t\t\t\tscanMethodForNullAnnotation(iMethods[i], this.methods[i]);", "+\t\t\t\t\tfor (int i = 0; i < iMethods.length; i++) {", "+\t\t\t\t\t\t// below 1.8 we still might use an annotation walker to discover external annotations:", "+\t\t\t\t\t\tITypeAnnotationWalker methodWalker = ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER;", "+\t\t\t\t\t\tif (sourceLevel < ClassFileConstants.JDK1_8)", "+\t\t\t\t\t\t\tmethodWalker = binaryType.enrichWithExternalAnnotationsFor(methodWalker, iMethods[i], this.environment);", "+\t\t\t\t\t\tscanMethodForNullAnnotation(iMethods[i], this.methods[i], methodWalker);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "348e16627a8632015f180ffd45dcae0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 100, "signatureBeforeChange": "  \tpublic void testAST()", "signatureAfterChange": "  \tpublic void testAST()", "diff": ["+\t\t", "+\t\tassertTrue(AST.LEVEL_2_0 == 2);", "+\t\tassertTrue(AST.LEVEL_3_0 == 3);", "+\t\t", "+\t\tAST a0 = new AST(); // deprecated, but still 2.0", "+\t\tassertTrue(a0.apiLevel() == AST.LEVEL_2_0);", "+\t\tAST a1 = new AST(new HashMap()); // deprecated, but still 2.0", "+\t\tassertTrue(a1.apiLevel() == AST.LEVEL_2_0);", "+\t\tAST a2 = AST.newAST2();", "+\t\tassertTrue(a2.apiLevel() == AST.LEVEL_2_0);", "+\t\tAST a3 = AST.newAST3();", "+\t\tassertTrue(a3.apiLevel() == AST.LEVEL_3_0);", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d31a13ebdf6ab9d08f78d95d0e8ac72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "57bd7f827fb4e26e2f4fcfb421451c18e4a1d09f", "commitAfterChange": "6eea20ade3a92e767b892a10ecaadeddc013ba12", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["-\t\t\t\t\tif (NullAnnotationMatching.analyse(inheritedMethod.returnType, currentMethod.returnType, 0, true).isAnyMismatch()) {", "+\t\t\t\t\tTypeBinding substituteReturnType = null; // for TVB identity checks inside NullAnnotationMatching.analyze()", "+\t\t\t\t\tTypeVariableBinding[] typeVariables = inheritedMethod.typeVariables;", "+\t\t\t\t\tif (typeVariables != null && currentMethod.returnType.id != TypeIds.T_void) {", "+\t\t\t\t\t\tParameterizedGenericMethodBinding substitute = this.environment.createParameterizedGenericMethod(currentMethod, typeVariables);", "+\t\t\t\t\t\tsubstituteReturnType = substitute.returnType;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (NullAnnotationMatching.analyse(inheritedMethod.returnType, currentMethod.returnType, substituteReturnType, 0, true).isAnyMismatch()) {", "+\t\tTypeBinding[] substituteParameters = null; // for TVB identity checks inside NullAnnotationMatching.analyze()", "+\t\tif (shouldComplain) {", "+\t\t\tTypeVariableBinding[] typeVariables = currentMethod.typeVariables;", "+\t\t\tif (typeVariables != Binding.NO_TYPE_VARIABLES) {", "+\t\t\t\tParameterizedGenericMethodBinding substitute = this.environment.createParameterizedGenericMethod(inheritedMethod, typeVariables);", "+\t\t\t\tsubstituteParameters = substitute.parameters;", "+\t\t\t}", "+\t\t}", "+", "-\t\t\t\t\tif (NullAnnotationMatching.analyse(currentMethod.parameters[i], inheritedMethod.parameters[i], 0, true).isAnyMismatch()) {", "+\t\t\t\t\tTypeBinding substituteParameter = substituteParameters != null ? substituteParameters[i] : null;", "+\t\t\t\t\tif (NullAnnotationMatching.analyse(currentMethod.parameters[i], inheritedMethod.parameters[i], substituteParameter, 0, true).isAnyMismatch()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fba27cbce2515d1886f25fb6b8ee3401", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/SampleASTs.java", "commitBeforeChange": "6a514a348b687707873fde0f6184e6b09d1607ee", "commitAfterChange": "15cb47257592351618c0f415edc117a6b315a803", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static ASTNode oneOfEach(AST target)", "signatureAfterChange": " \tpublic static ASTNode oneOfEach(AST target)", "diff": ["+\t\tif (target.apiLevel() >= AST.JLS8) {", "+\t\t\tExtraDimension ed = target.newExtraDimension();", "+\t\t\tmd.extraDimensions().add(ed);", "+\t\t}", "+\t\tif (target.apiLevel() >= JLS4_INTERNAL) {", "+\t\t\tUnionType ut = target.newUnionType();", "+\t\t\tcatchClause.getException().setType(ut);", "+\t\t}", "+\t\tif (target.apiLevel() >= AST.JLS8) {", "+\t\t\tIntersectionType it = target.newIntersectionType();", "+\t\t\tcastExpression.setType(it);", "+\t\t}", "+\t\tif (target.apiLevel() >= AST.JLS8) {", "+\t\t\tLambdaExpression lambdaExpression = target.newLambdaExpression();", "+\t\t\tz.add(lambdaExpression);", "+\t\t}"]}], "num": 20227}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "982078529f199fc3f86ebd85a34f27df", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96f123c561013dc8dac1d3cedd270a1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "0b874da6971de1fd32448699ceb47420d2fca967", "commitAfterChange": "26e0fa15f2532c349b39ea632fd814fc4a7186c8", "methodNumberBeforeChange": 206, "methodNumberAfterChange": 206, "signatureBeforeChange": " public void javadocInvalidMethod(MessageSend messageSend, MethodBinding method, int modifiers)", "signatureAfterChange": " public void javadocInvalidMethod(MessageSend messageSend, MethodBinding method, int modifiers)", "diff": ["+\tProblemMethodBinding problemMethod = null;", "+\tMethodBinding shownMethod = null;", "+\t\t\tproblemMethod = (ProblemMethodBinding) method;", "+\t\t\tif (problemMethod.closestMatch != null) {", "+\t\t\t\t\tString closestParameterTypeNames = typesAsString(problemMethod.closestMatch.isVarargs(), problemMethod.closestMatch.parameters, false);", "+\t\t\t\t\tString parameterTypeNames = typesAsString(method.isVarargs(), method.parameters, false);", "+\t\t\t\t\tString closestParameterTypeShortNames = typesAsString(problemMethod.closestMatch.isVarargs(), problemMethod.closestMatch.parameters, true);", "+\t\t\t\t\tString parameterTypeShortNames = typesAsString(method.isVarargs(), method.parameters, true);", "+\t\t\t\t\tif (closestParameterTypeShortNames.equals(parameterTypeShortNames)){", "+\t\t\t\t\t\tclosestParameterTypeShortNames = closestParameterTypeNames;", "+\t\t\t\t\t\tparameterTypeShortNames = parameterTypeNames;", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.handle(", "+\t\t\t\t\t\tIProblem.JavadocParameterMismatch,", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tnew String(problemMethod.closestMatch.declaringClass.readableName()),", "+\t\t\t\t\t\t\tnew String(problemMethod.closestMatch.selector),", "+\t\t\t\t\t\t\tclosestParameterTypeNames,", "+\t\t\t\t\t\t\tparameterTypeNames ", "+\t\t\t\t\t\t},", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tnew String(problemMethod.closestMatch.declaringClass.shortReadableName()),", "+\t\t\t\t\t\t\tnew String(problemMethod.closestMatch.selector),", "+\t\t\t\t\t\t\tclosestParameterTypeShortNames,", "+\t\t\t\t\t\t\tparameterTypeShortNames", "+\t\t\t\t\t\t},", "+\t\t\t\t\t\t(int) (messageSend.nameSourcePosition >>> 32),", "+\t\t\t\t\t\t(int) messageSend.nameSourcePosition);", "+\t\t\t\t\treturn;", "+\t\t\t}", "+\t\tcase ParameterBoundMismatch :", "+\t\t\tproblemMethod = (ProblemMethodBinding) method;", "+\t\t\tParameterizedGenericMethodBinding substitutedMethod = (ParameterizedGenericMethodBinding) problemMethod.closestMatch;", "+\t\t\tshownMethod = substitutedMethod.original();", "+\t\t\tTypeBinding typeArgument = method.parameters[0];", "+\t\t\tTypeVariableBinding typeParameter = (TypeVariableBinding) method.parameters[1];", "+\t\t\tthis.handle(", "+\t\t\t\tIProblem.JavadocGenericMethodTypeArgumentMismatch,", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false), ", "+\t\t\t\t        new String(shownMethod.declaringClass.readableName()), ", "+\t\t\t\t        typesAsString(substitutedMethod.isVarargs(), substitutedMethod.parameters, false), ", "+\t\t\t\t        new String(typeArgument.readableName()), ", "+\t\t\t\t        new String(typeParameter.sourceName), ", "+\t\t\t\t        parameterBoundAsString(typeParameter, false) },", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true), ", "+\t\t\t\t        new String(shownMethod.declaringClass.shortReadableName()), ", "+\t\t\t\t        typesAsString(substitutedMethod.isVarargs(), substitutedMethod.parameters, true), ", "+\t\t\t\t        new String(typeArgument.shortReadableName()), ", "+\t\t\t\t        new String(typeParameter.sourceName), ", "+\t\t\t\t        parameterBoundAsString(typeParameter, true) },", "+\t\t\t\t(int) (messageSend.nameSourcePosition >>> 32),", "+\t\t\t\t(int) messageSend.nameSourcePosition);\t\t    ", "+\t\t\treturn;", "+\t\tcase TypeParameterArityMismatch :", "+\t\t\tproblemMethod = (ProblemMethodBinding) method;", "+\t\t\tshownMethod = problemMethod.closestMatch;", "+\t\t\tif (shownMethod.typeVariables == TypeConstants.NoTypeVariables) {", "+\t\t\t\tthis.handle(", "+\t\t\t\t\tIProblem.JavadocNonGenericMethod ,", "+\t\t\t\t\tnew String[] { ", "+\t\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false), ", "+\t\t\t\t\t        new String(shownMethod.declaringClass.readableName()), ", "+\t\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, false) },", "+\t\t\t\t\tnew String[] { ", "+\t\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true), ", "+\t\t\t\t\t        new String(shownMethod.declaringClass.shortReadableName()), ", "+\t\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, true) },", "+\t\t\t\t\t(int) (messageSend.nameSourcePosition >>> 32),", "+\t\t\t\t\t(int) messageSend.nameSourcePosition);\t\t    ", "+\t\t\t} else {", "+\t\t\t\tthis.handle(", "+\t\t\t\t\tIProblem.JavadocIncorrectArityForParameterizedMethod  ,", "+\t\t\t\t\tnew String[] { ", "+\t\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false), ", "+\t\t\t\t\t        new String(shownMethod.declaringClass.readableName()), ", "+\t\t\t\t\t\t\ttypesAsString(false, shownMethod.typeVariables, false),", "+\t\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, false) },", "+\t\t\t\t\tnew String[] { ", "+\t\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true), ", "+\t\t\t\t\t        new String(shownMethod.declaringClass.shortReadableName()), ", "+\t\t\t\t\t\t\ttypesAsString(false, shownMethod.typeVariables, true),", "+\t\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, true) },", "+\t\t\t\t\t(int) (messageSend.nameSourcePosition >>> 32),", "+\t\t\t\t\t(int) messageSend.nameSourcePosition);\t\t    ", "+\t\t\t}", "+\t\t\treturn;", "+\t\tcase ParameterizedMethodTypeMismatch :", "+\t\t\tproblemMethod = (ProblemMethodBinding) method;", "+\t\t\tshownMethod = problemMethod.closestMatch;", "+\t\t\tthis.handle(", "+\t\t\t\tIProblem.JavadocParameterizedMethodArgumentTypeMismatch,", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false), ", "+\t\t\t\t        new String(shownMethod.declaringClass.readableName()), ", "+\t\t\t\t\t\ttypesAsString(false, ((ParameterizedGenericMethodBinding)shownMethod).typeArguments, false),", "+\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, false) },", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true), ", "+\t\t\t\t        new String(shownMethod.declaringClass.shortReadableName()), ", "+\t\t\t\t\t\ttypesAsString(false, ((ParameterizedGenericMethodBinding)shownMethod).typeArguments, true),", "+\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, true) },", "+\t\t\t\t(int) (messageSend.nameSourcePosition >>> 32),", "+\t\t\t\t(int) messageSend.nameSourcePosition);\t\t    ", "+\t\t\treturn;", "+\t\tcase TypeArgumentsForRawGenericMethod :", "+\t\t\tproblemMethod = (ProblemMethodBinding) method;", "+\t\t\tshownMethod = problemMethod.closestMatch;", "+\t\t\tthis.handle(", "+\t\t\t\tIProblem.JavadocTypeArgumentsForRawGenericMethod ,", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false), ", "+\t\t\t\t        new String(shownMethod.declaringClass.readableName()), ", "+\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, false) },", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true), ", "+\t\t\t\t        new String(shownMethod.declaringClass.shortReadableName()), ", "+\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, true) },", "+\t\t\t\t(int) (messageSend.nameSourcePosition >>> 32),", "+\t\t\t\t(int) messageSend.nameSourcePosition);\t\t       ", "+\t\t\treturn;", "-\t}", "-\tif (id == IProblem.JavadocUndefinedMethod) {", "-\t\tProblemMethodBinding problemMethod = (ProblemMethodBinding) method;", "-\t\tif (problemMethod.closestMatch != null) {", "-\t\t\t\tString closestParameterTypeNames = typesAsString(problemMethod.closestMatch.isVarargs(), problemMethod.closestMatch.parameters, false);", "-\t\t\t\tString parameterTypeNames = typesAsString(method.isVarargs(), method.parameters, false);", "-\t\t\t\tString closestParameterTypeShortNames = typesAsString(problemMethod.closestMatch.isVarargs(), problemMethod.closestMatch.parameters, true);", "-\t\t\t\tString parameterTypeShortNames = typesAsString(method.isVarargs(), method.parameters, true);", "-\t\t\t\tif (closestParameterTypeShortNames.equals(parameterTypeShortNames)){", "-\t\t\t\t\tclosestParameterTypeShortNames = closestParameterTypeNames;", "-\t\t\t\t\tparameterTypeShortNames = parameterTypeNames;", "-\t\t\t\t}", "-\t\t\t\tthis.handle(", "-\t\t\t\t\tIProblem.JavadocParameterMismatch,", "-\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\tnew String(problemMethod.closestMatch.declaringClass.readableName()),", "-\t\t\t\t\t\tnew String(problemMethod.closestMatch.selector),", "-\t\t\t\t\t\tclosestParameterTypeNames,", "-\t\t\t\t\t\tparameterTypeNames ", "-\t\t\t\t\t},", "-\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\tnew String(problemMethod.closestMatch.declaringClass.shortReadableName()),", "-\t\t\t\t\t\tnew String(problemMethod.closestMatch.selector),", "-\t\t\t\t\t\tclosestParameterTypeShortNames,", "-\t\t\t\t\t\tparameterTypeShortNames", "-\t\t\t\t\t},", "-\t\t\t\t\t(int) (messageSend.nameSourcePosition >>> 32),", "-\t\t\t\t\t(int) messageSend.nameSourcePosition);", "-\t\t\t\treturn;", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a426b3e026fcfdd903358245c805a69c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 131, "signatureBeforeChange": " public void invalidMethod(MessageSend messageSend, MethodBinding method)", "signatureAfterChange": " public void invalidMethod(MessageSend messageSend, MethodBinding method)", "diff": ["+}", "-\t// CODE should be UPDATED according to error coding in the different method binding errors", "-\t// The different targetted errors should be :", "-\t// \tUndefinedMethod", "-\t//\tNotVisibleMethod", "-\t//\tAmbiguousMethod", "-\t//  InheritedNameHidesEnclosingName", "-\t//\tInstanceMethodDuringConstructorInvocation", "-\t// StaticMethodRequested", "-", "+    MethodBinding shownMethod = method;", "+\t\t\tProblemMethodBinding problemMethod = (ProblemMethodBinding) method;", "+\t\t\tif (problemMethod.closestMatch != null) {", "+\t\t\t    \tshownMethod = problemMethod.closestMatch;", "+\t\t\t\t\tString closestParameterTypeNames = parametersAsString(shownMethod.parameters, false);", "+\t\t\t\t\tString parameterTypeNames = parametersAsString(method.parameters, false);", "+\t\t\t\t\tString closestParameterTypeShortNames = parametersAsString(shownMethod.parameters, true);", "+\t\t\t\t\tString parameterTypeShortNames = parametersAsString(method.parameters, true);", "+\t\t\t\t\tif (closestParameterTypeShortNames.equals(parameterTypeShortNames)){", "+\t\t\t\t\t\tclosestParameterTypeShortNames = closestParameterTypeNames;", "+\t\t\t\t\t\tparameterTypeShortNames = parameterTypeNames;", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.handle(", "+\t\t\t\t\t\tIProblem.ParameterMismatch,", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tnew String(shownMethod.declaringClass.readableName()),", "+\t\t\t\t\t\t\tnew String(shownMethod.selector),", "+\t\t\t\t\t\t\tclosestParameterTypeNames,", "+\t\t\t\t\t\t\tparameterTypeNames ", "+\t\t\t\t\t\t},", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tnew String(shownMethod.declaringClass.shortReadableName()),", "+\t\t\t\t\t\t\tnew String(shownMethod.selector),", "+\t\t\t\t\t\t\tclosestParameterTypeShortNames,", "+\t\t\t\t\t\t\tparameterTypeShortNames", "+\t\t\t\t\t\t},", "+\t\t\t\t\t\t(int) (messageSend.nameSourcePosition >>> 32),", "+\t\t\t\t\t\t(int) messageSend.nameSourcePosition);", "+\t\t\t\t\treturn;", "+\t\t\t}\t\t\t", "+\t\t\tproblemMethod = (ProblemMethodBinding) method;", "+\t\t\tif (problemMethod.closestMatch != null) {", "+\t\t\t    shownMethod = problemMethod.closestMatch.original();", "+\t\t    }\t\t\t", "-\t\t", "+\t\tcase ParameterBoundMismatch :", "+\t\t\tproblemMethod = (ProblemMethodBinding) method;", "+\t\t\tParameterizedGenericMethodBinding substitutedMethod = (ParameterizedGenericMethodBinding) problemMethod.closestMatch;", "+\t\t\tshownMethod = substitutedMethod.original();", "+\t\t\tTypeBinding typeArgument = method.parameters[0];", "+\t\t\tTypeVariableBinding typeParameter = (TypeVariableBinding) method.parameters[1];", "+\t\t\tthis.handle(", "+\t\t\t\tIProblem.GenericMethodTypeArgumentMismatch,", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t        parametersAsString(shownMethod.parameters, false), ", "+\t\t\t\t        new String(shownMethod.declaringClass.readableName()), ", "+\t\t\t\t        parametersAsString(substitutedMethod.parameters, false), ", "+\t\t\t\t        new String(typeArgument.readableName()), ", "+\t\t\t\t        new String(typeParameter.sourceName), ", "+\t\t\t\t        parameterBoundAsString(typeParameter, false) },", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t        parametersAsString(shownMethod.parameters, true), ", "+\t\t\t\t        new String(shownMethod.declaringClass.shortReadableName()), ", "+\t\t\t\t        parametersAsString(substitutedMethod.parameters, true), ", "+\t\t\t\t        new String(typeArgument.shortReadableName()), ", "+\t\t\t\t        new String(typeParameter.sourceName), ", "+\t\t\t\t        parameterBoundAsString(typeParameter, true) },", "+\t\t\t\t(int) (messageSend.nameSourcePosition >>> 32),", "+\t\t\t\t(int) messageSend.nameSourcePosition);\t\t    ", "+\t\t\treturn;", "+\t\tcase TypeParameterArityMismatch :", "+\t\t\tproblemMethod = (ProblemMethodBinding) method;", "+\t\t\tshownMethod = problemMethod.closestMatch;", "+\t\t\tif (shownMethod.typeVariables == TypeConstants.NoTypeVariables) {", "+\t\t\t\tthis.handle(", "+\t\t\t\t\tIProblem.NonGenericMethod ,", "+\t\t\t\t\tnew String[] { ", "+\t\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t\t        parametersAsString(shownMethod.parameters, false), ", "+\t\t\t\t\t        new String(shownMethod.declaringClass.readableName()), ", "+\t\t\t\t\t        parametersAsString(method.parameters, false) },", "+\t\t\t\t\tnew String[] { ", "+\t\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t\t        parametersAsString(shownMethod.parameters, true), ", "+\t\t\t\t\t        new String(shownMethod.declaringClass.shortReadableName()), ", "+\t\t\t\t\t        parametersAsString(method.parameters, true) },", "+\t\t\t\t\t(int) (messageSend.nameSourcePosition >>> 32),", "+\t\t\t\t\t(int) messageSend.nameSourcePosition);\t\t    ", "+\t\t\t} else {", "+\t\t\t\tthis.handle(", "+\t\t\t\t\tIProblem.IncorrectArityForParameterizedMethod  ,", "+\t\t\t\t\tnew String[] { ", "+\t\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t\t        parametersAsString(shownMethod.parameters, false), ", "+\t\t\t\t\t        new String(shownMethod.declaringClass.readableName()), ", "+\t\t\t\t\t\t\tparametersAsString(shownMethod.typeVariables, false),", "+\t\t\t\t\t        parametersAsString(method.parameters, false) },", "+\t\t\t\t\tnew String[] { ", "+\t\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t\t        parametersAsString(shownMethod.parameters, true), ", "+\t\t\t\t\t        new String(shownMethod.declaringClass.shortReadableName()), ", "+\t\t\t\t\t\t\tparametersAsString(shownMethod.typeVariables, true),", "+\t\t\t\t\t        parametersAsString(method.parameters, true) },", "+\t\t\t\t\t(int) (messageSend.nameSourcePosition >>> 32),", "+\t\t\t\t\t(int) messageSend.nameSourcePosition);\t\t    ", "+\t\t\t}", "+\t\t\treturn;", "+\t\tcase ParameterizedMethodTypeMismatch :", "+\t\t\tproblemMethod = (ProblemMethodBinding) method;", "+\t\t\tshownMethod = problemMethod.closestMatch;", "+\t\t\tthis.handle(", "+\t\t\t\tIProblem.ParameterizedMethodArgumentTypeMismatch,", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t        parametersAsString(shownMethod.parameters, false), ", "+\t\t\t\t        new String(shownMethod.declaringClass.readableName()), ", "+\t\t\t\t\t\tparametersAsString(((ParameterizedGenericMethodBinding)shownMethod).typeArguments, false),", "+\t\t\t\t        parametersAsString(method.parameters, false) },", "+\t\t\t\tnew String[] { ", "+\t\t\t\t        new String(shownMethod.selector),", "+\t\t\t\t        parametersAsString(shownMethod.parameters, true), ", "+\t\t\t\t        new String(shownMethod.declaringClass.shortReadableName()), ", "+\t\t\t\t\t\tparametersAsString(((ParameterizedGenericMethodBinding)shownMethod).typeArguments, true),", "+\t\t\t\t        parametersAsString(method.parameters, true) },", "+\t\t\t\t(int) (messageSend.nameSourcePosition >>> 32),", "+\t\t\t\t(int) messageSend.nameSourcePosition);\t\t    ", "+\t\t\treturn;", "+\t\t\t", "-\tif (id == IProblem.UndefinedMethod) {", "-\t\tProblemMethodBinding problemMethod = (ProblemMethodBinding) method;", "-\t\tif (problemMethod.closestMatch != null) {", "-\t\t\t\tString closestParameterTypeNames = parametersAsString(problemMethod.closestMatch);", "-\t\t\t\tString parameterTypeNames = parametersAsString(method);", "-\t\t\t\tString closestParameterTypeShortNames = parametersAsShortString(problemMethod.closestMatch);", "-\t\t\t\tString parameterTypeShortNames = parametersAsShortString(method);", "-\t\t\t\tif (closestParameterTypeShortNames.equals(parameterTypeShortNames)){", "-\t\t\t\t\tclosestParameterTypeShortNames = closestParameterTypeNames;", "-\t\t\t\t\tparameterTypeShortNames = parameterTypeNames;", "-\t\t\t\t}", "-\t\t\t\tid = IProblem.ParameterMismatch;", "-\t\t\t\tthis.handle(", "-\t\t\t\t\tid,", "-\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\tnew String(problemMethod.closestMatch.declaringClass.readableName()),", "-\t\t\t\t\t\tnew String(problemMethod.closestMatch.selector),", "-\t\t\t\t\t\tclosestParameterTypeNames,", "-\t\t\t\t\t\tparameterTypeNames ", "-\t\t\t\t\t},", "-\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\tnew String(problemMethod.closestMatch.declaringClass.shortReadableName()),", "-\t\t\t\t\t\tnew String(problemMethod.closestMatch.selector),", "-\t\t\t\t\t\tclosestParameterTypeShortNames,", "-\t\t\t\t\t\tparameterTypeShortNames", "-\t\t\t\t\t},", "-\t\t\t\t\t(int) (messageSend.nameSourcePosition >>> 32),", "-\t\t\t\t\t(int) messageSend.nameSourcePosition);", "-\t\t\t\treturn;", "-\t\t}", "-\t}", "-", "-\t\t\tnew String(method.selector), parametersAsString(method)},", "+\t\t\tnew String(shownMethod.selector), parametersAsString(shownMethod.parameters, false)},", "-\t\t\tnew String(method.selector), parametersAsShortString(method)},", "+\t\t\tnew String(shownMethod.selector), parametersAsString(shownMethod.parameters, true)},"]}], "num": 37184}
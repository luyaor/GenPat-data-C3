{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f967118bb4cf9490c37526cfe2170d1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67b5a8e9149a1615dfafba0cbe98545d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "3a7eebe0921eeefbdbf1fe4891891b6335310197", "commitAfterChange": "e8aa72d0e85424c76c1185b7518db6803dde6255", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["+ */", "+public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {", "+\tint pc = codeStream.position;", "+\tif (this.constant != Constant.NotAConstant) {", "+\t\tif (valueRequired)", "+\t\t\tcodeStream.generateConstant(this.constant, this.implicitConversion);", "+\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\treturn;", "-\t */", "-\tpublic void generateCode(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tboolean valueRequired) {", "-", "-\t\tint pc = codeStream.position;", "-\t\tif (constant != Constant.NotAConstant) {", "-\t\t\tif (valueRequired)", "-\t\t\t\tcodeStream.generateConstant(constant, implicitConversion);", "-\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t\t\treturn;", "-\t\t}", "-\t\tswitch ((bits & OperatorMASK) >> OperatorSHIFT) {", "-\t\t\tcase PLUS :", "-\t\t\t\tswitch (bits & ReturnTypeIDMASK) {", "-\t\t\t\t\tcase T_JavaLangString :", "-\t\t\t\t\t\tcodeStream.generateStringConcatenationAppend(currentScope, left, right);", "-\t\t\t\t\t\tif (!valueRequired)", "-\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_int :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "+\tswitch ((this.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT) {", "+\t\tcase PLUS :", "+\t\t\tswitch (this.bits & ASTNode.ReturnTypeIDMASK) {", "+\t\t\t\tcase T_JavaLangString :", "+\t\t\t\t\tcodeStream.generateStringConcatenationAppend(currentScope, this.left, this.right);", "+\t\t\t\t\tif (!valueRequired)", "+\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_int :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.iadd();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_long :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.ladd();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_double :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.dadd();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_float :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.fadd();", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase MINUS :", "+\t\t\tswitch (this.bits & ASTNode.ReturnTypeIDMASK) {", "+\t\t\t\tcase T_int :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.isub();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_long :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.lsub();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_double :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.dsub();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_float :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.fsub();", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase MULTIPLY :", "+\t\t\tswitch (this.bits & ASTNode.ReturnTypeIDMASK) {", "+\t\t\t\tcase T_int :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.imul();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_long :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.lmul();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_double :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.dmul();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_float :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.fmul();", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase DIVIDE :", "+\t\t\tswitch (this.bits & ASTNode.ReturnTypeIDMASK) {", "+\t\t\t\tcase T_int :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, true);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, true);", "+\t\t\t\t\tcodeStream.idiv();", "+\t\t\t\t\tif (!valueRequired)", "+\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_long :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, true);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, true);", "+\t\t\t\t\tcodeStream.ldiv();", "+\t\t\t\t\tif (!valueRequired)", "+\t\t\t\t\t\tcodeStream.pop2();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_double :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.ddiv();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_float :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.fdiv();", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase REMAINDER :", "+\t\t\tswitch (this.bits & ASTNode.ReturnTypeIDMASK) {", "+\t\t\t\tcase T_int :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, true);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, true);", "+\t\t\t\t\tcodeStream.irem();", "+\t\t\t\t\tif (!valueRequired)", "+\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_long :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, true);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, true);", "+\t\t\t\t\tcodeStream.lrem();", "+\t\t\t\t\tif (!valueRequired)", "+\t\t\t\t\t\tcodeStream.pop2();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_double :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.drem();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_float :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.frem();", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase AND :", "+\t\t\tswitch (this.bits & ASTNode.ReturnTypeIDMASK) {", "+\t\t\t\tcase T_int :", "+\t\t\t\t\t// 0 & x", "+\t\t\t\t\tif ((this.left.constant != Constant.NotAConstant)", "+\t\t\t\t\t\t&& (this.left.constant.typeID() == TypeIds.T_int)", "+\t\t\t\t\t\t&& (this.left.constant.intValue() == 0)) {", "+\t\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, false);", "-\t\t\t\t\t\t\tcodeStream.iadd();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.ladd();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_double :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.dadd();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_float :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.fadd();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase MINUS :", "-\t\t\t\tswitch (bits & ReturnTypeIDMASK) {", "-\t\t\t\t\tcase T_int :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.isub();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.lsub();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_double :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.dsub();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_float :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.fsub();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase MULTIPLY :", "-\t\t\t\tswitch (bits & ReturnTypeIDMASK) {", "-\t\t\t\t\tcase T_int :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.imul();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.lmul();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_double :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.dmul();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_float :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.fmul();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase DIVIDE :", "-\t\t\t\tswitch (bits & ReturnTypeIDMASK) {", "-\t\t\t\t\tcase T_int :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, true);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, true);", "-\t\t\t\t\t\tcodeStream.idiv();", "-\t\t\t\t\t\tif (!valueRequired)", "-\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, true);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, true);", "-\t\t\t\t\t\tcodeStream.ldiv();", "-\t\t\t\t\t\tif (!valueRequired)", "-\t\t\t\t\t\t\tcodeStream.pop2();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_double :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.ddiv();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_float :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.fdiv();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase REMAINDER :", "-\t\t\t\tswitch (bits & ReturnTypeIDMASK) {", "-\t\t\t\t\tcase T_int :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, true);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, true);", "-\t\t\t\t\t\tcodeStream.irem();", "-\t\t\t\t\t\tif (!valueRequired)", "-\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, true);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, true);", "-\t\t\t\t\t\tcodeStream.lrem();", "-\t\t\t\t\t\tif (!valueRequired)", "-\t\t\t\t\t\t\tcodeStream.pop2();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_double :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.drem();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_float :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.frem();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase AND :", "-\t\t\t\tswitch (bits & ReturnTypeIDMASK) {", "-\t\t\t\t\tcase T_int :", "-\t\t\t\t\t\t// 0 & x", "-\t\t\t\t\t\tif ((left.constant != Constant.NotAConstant)", "-\t\t\t\t\t\t\t&& (left.constant.typeID() == T_int)", "-\t\t\t\t\t\t\t&& (left.constant.intValue() == 0)) {", "-\t\t\t\t\t\t\tright.generateCode(currentScope, codeStream, false);", "+\t\t\t\t\t\t\tcodeStream.iconst_0();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// x & 0", "+\t\t\t\t\t\tif ((this.right.constant != Constant.NotAConstant)", "+\t\t\t\t\t\t\t&& (this.right.constant.typeID() == TypeIds.T_int)", "+\t\t\t\t\t\t\t&& (this.right.constant.intValue() == 0)) {", "+\t\t\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, false);", "-\t\t\t\t\t\t\t// x & 0", "-\t\t\t\t\t\t\tif ((right.constant != Constant.NotAConstant)", "-\t\t\t\t\t\t\t\t&& (right.constant.typeID() == T_int)", "-\t\t\t\t\t\t\t\t&& (right.constant.intValue() == 0)) {", "-\t\t\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, false);", "-\t\t\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\t\t\tcodeStream.iconst_0();", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\t\t\tcodeStream.iand();", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\t\t\tcodeStream.iand();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\t// 0 & x", "-\t\t\t\t\t\tif ((left.constant != Constant.NotAConstant)", "-\t\t\t\t\t\t\t&& (left.constant.typeID() == T_long)", "-\t\t\t\t\t\t\t&& (left.constant.longValue() == 0L)) {", "-\t\t\t\t\t\t\tright.generateCode(currentScope, codeStream, false);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_long :", "+\t\t\t\t\t// 0 & x", "+\t\t\t\t\tif ((this.left.constant != Constant.NotAConstant)", "+\t\t\t\t\t\t&& (this.left.constant.typeID() == TypeIds.T_long)", "+\t\t\t\t\t\t&& (this.left.constant.longValue() == 0L)) {", "+\t\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, false);", "+\t\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\t\tcodeStream.lconst_0();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// x & 0", "+\t\t\t\t\t\tif ((this.right.constant != Constant.NotAConstant)", "+\t\t\t\t\t\t\t&& (this.right.constant.typeID() == TypeIds.T_long)", "+\t\t\t\t\t\t\t&& (this.right.constant.longValue() == 0L)) {", "+\t\t\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, false);", "-\t\t\t\t\t\t\t// x & 0", "-\t\t\t\t\t\t\tif ((right.constant != Constant.NotAConstant)", "-\t\t\t\t\t\t\t\t&& (right.constant.typeID() == T_long)", "-\t\t\t\t\t\t\t\t&& (right.constant.longValue() == 0L)) {", "-\t\t\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, false);", "-\t\t\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\t\t\tcodeStream.lconst_0();", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\t\t\tcodeStream.land();", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\t\t\tcodeStream.land();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_boolean : // logical and", "-\t\t\t\t\t\tgenerateLogicalAnd(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase OR :", "-\t\t\t\tswitch (bits & ReturnTypeIDMASK) {", "-\t\t\t\t\tcase T_int :", "-\t\t\t\t\t\t// 0 | x", "-\t\t\t\t\t\tif ((left.constant != Constant.NotAConstant)", "-\t\t\t\t\t\t\t&& (left.constant.typeID() == T_int)", "-\t\t\t\t\t\t\t&& (left.constant.intValue() == 0)) {", "-\t\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// x | 0", "-\t\t\t\t\t\t\tif ((right.constant != Constant.NotAConstant)", "-\t\t\t\t\t\t\t\t&& (right.constant.typeID() == T_int)", "-\t\t\t\t\t\t\t\t&& (right.constant.intValue() == 0)) {", "-\t\t\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\t\t\tcodeStream.ior();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\t// 0 | x", "-\t\t\t\t\t\tif ((left.constant != Constant.NotAConstant)", "-\t\t\t\t\t\t\t&& (left.constant.typeID() == T_long)", "-\t\t\t\t\t\t\t&& (left.constant.longValue() == 0L)) {", "-\t\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// x | 0", "-\t\t\t\t\t\t\tif ((right.constant != Constant.NotAConstant)", "-\t\t\t\t\t\t\t\t&& (right.constant.typeID() == T_long)", "-\t\t\t\t\t\t\t\t&& (right.constant.longValue() == 0L)) {", "-\t\t\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\t\t\tcodeStream.lor();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_boolean : // logical or", "-\t\t\t\t\t\tgenerateLogicalOr(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase XOR :", "-\t\t\t\tswitch (bits & ReturnTypeIDMASK) {", "-\t\t\t\t\tcase T_int :", "-\t\t\t\t\t\t// 0 ^ x", "-\t\t\t\t\t\tif ((left.constant != Constant.NotAConstant)", "-\t\t\t\t\t\t\t&& (left.constant.typeID() == T_int)", "-\t\t\t\t\t\t\t&& (left.constant.intValue() == 0)) {", "-\t\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// x ^ 0", "-\t\t\t\t\t\t\tif ((right.constant != Constant.NotAConstant)", "-\t\t\t\t\t\t\t\t&& (right.constant.typeID() == T_int)", "-\t\t\t\t\t\t\t\t&& (right.constant.intValue() == 0)) {", "-\t\t\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\t\t\tcodeStream.ixor();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\t// 0 ^ x", "-\t\t\t\t\t\tif ((left.constant != Constant.NotAConstant)", "-\t\t\t\t\t\t\t&& (left.constant.typeID() == T_long)", "-\t\t\t\t\t\t\t&& (left.constant.longValue() == 0L)) {", "-\t\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// x ^ 0", "-\t\t\t\t\t\t\tif ((right.constant != Constant.NotAConstant)", "-\t\t\t\t\t\t\t\t&& (right.constant.typeID() == T_long)", "-\t\t\t\t\t\t\t\t&& (right.constant.longValue() == 0L)) {", "-\t\t\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\t\t\tcodeStream.lxor();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_boolean :", "-\t\t\t\t\t\tgenerateLogicalXor(currentScope, \tcodeStream, valueRequired);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase LEFT_SHIFT :", "-\t\t\t\tswitch (bits & ReturnTypeIDMASK) {", "-\t\t\t\t\tcase T_int :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.ishl();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.lshl();", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase RIGHT_SHIFT :", "-\t\t\t\tswitch (bits & ReturnTypeIDMASK) {", "-\t\t\t\t\tcase T_int :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.ishr();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.lshr();", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase UNSIGNED_RIGHT_SHIFT :", "-\t\t\t\tswitch (bits & ReturnTypeIDMASK) {", "-\t\t\t\t\tcase T_int :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.iushr();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tif (valueRequired)", "-\t\t\t\t\t\t\tcodeStream.lushr();", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase GREATER :", "-\t\t\t\tBranchLabel falseLabel, endLabel;", "-\t\t\t\tgenerateOptimizedGreaterThan(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\tnull,", "-\t\t\t\t\t(falseLabel = new BranchLabel(codeStream)),", "-\t\t\t\t\tvalueRequired);", "-\t\t\t\tif (valueRequired) {", "-\t\t\t\t\tcodeStream.iconst_1();", "-\t\t\t\t\tif ((bits & IsReturnedValue) != 0) {", "-\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\t\t\t\tcodeStream.generateReturnBytecode(this);", "-\t\t\t\t\t\tfalseLabel.place();", "-\t\t\t\t\t\tcodeStream.iconst_0();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.goto_(endLabel = new BranchLabel(codeStream));", "-\t\t\t\t\t\tcodeStream.decrStackSize(1);", "-\t\t\t\t\t\tfalseLabel.place();", "-\t\t\t\t\t\tcodeStream.iconst_0();", "-\t\t\t\t\t\tendLabel.place();", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase GREATER_EQUAL :", "-\t\t\t\tgenerateOptimizedGreaterThanOrEqual(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\tnull,", "-\t\t\t\t\t(falseLabel = new BranchLabel(codeStream)),", "-\t\t\t\t\tvalueRequired);", "-\t\t\t\tif (valueRequired) {", "-\t\t\t\t\tcodeStream.iconst_1();", "-\t\t\t\t\tif ((bits & IsReturnedValue) != 0) {", "-\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\t\t\t\tcodeStream.generateReturnBytecode(this);", "-\t\t\t\t\t\tfalseLabel.place();", "-\t\t\t\t\t\tcodeStream.iconst_0();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_boolean : // logical and", "+\t\t\t\t\tgenerateLogicalAnd(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase OR :", "+\t\t\tswitch (this.bits & ASTNode.ReturnTypeIDMASK) {", "+\t\t\t\tcase T_int :", "+\t\t\t\t\t// 0 | x", "+\t\t\t\t\tif ((this.left.constant != Constant.NotAConstant)", "+\t\t\t\t\t\t&& (this.left.constant.typeID() == TypeIds.T_int)", "+\t\t\t\t\t\t&& (this.left.constant.intValue() == 0)) {", "+\t\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tcodeStream.goto_(endLabel = new BranchLabel(codeStream));", "-\t\t\t\t\t\tcodeStream.decrStackSize(1);", "-\t\t\t\t\t\tfalseLabel.place();", "-\t\t\t\t\t\tcodeStream.iconst_0();", "-\t\t\t\t\t\tendLabel.place();", "+\t\t\t\t\t\t// x | 0", "+\t\t\t\t\t\tif ((this.right.constant != Constant.NotAConstant)", "+\t\t\t\t\t\t\t&& (this.right.constant.typeID() == TypeIds.T_int)", "+\t\t\t\t\t\t\t&& (this.right.constant.intValue() == 0)) {", "+\t\t\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\t\t\tcodeStream.ior();", "+\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase LESS :", "-\t\t\t\tgenerateOptimizedLessThan(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\tnull,", "-\t\t\t\t\t(falseLabel = new BranchLabel(codeStream)),", "-\t\t\t\t\tvalueRequired);", "-\t\t\t\tif (valueRequired) {", "-\t\t\t\t\tcodeStream.iconst_1();", "-\t\t\t\t\tif ((bits & IsReturnedValue) != 0) {", "-\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\t\t\t\tcodeStream.generateReturnBytecode(this);", "-\t\t\t\t\t\tfalseLabel.place();", "-\t\t\t\t\t\tcodeStream.iconst_0();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_long :", "+\t\t\t\t\t// 0 | x", "+\t\t\t\t\tif ((this.left.constant != Constant.NotAConstant)", "+\t\t\t\t\t\t&& (this.left.constant.typeID() == TypeIds.T_long)", "+\t\t\t\t\t\t&& (this.left.constant.longValue() == 0L)) {", "+\t\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tcodeStream.goto_(endLabel = new BranchLabel(codeStream));", "-\t\t\t\t\t\tcodeStream.decrStackSize(1);", "-\t\t\t\t\t\tfalseLabel.place();", "-\t\t\t\t\t\tcodeStream.iconst_0();", "-\t\t\t\t\t\tendLabel.place();", "+\t\t\t\t\t\t// x | 0", "+\t\t\t\t\t\tif ((this.right.constant != Constant.NotAConstant)", "+\t\t\t\t\t\t\t&& (this.right.constant.typeID() == TypeIds.T_long)", "+\t\t\t\t\t\t\t&& (this.right.constant.longValue() == 0L)) {", "+\t\t\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\t\t\tcodeStream.lor();", "+\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase LESS_EQUAL :", "-\t\t\t\tgenerateOptimizedLessThanOrEqual(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\tnull,", "-\t\t\t\t\t(falseLabel = new BranchLabel(codeStream)),", "-\t\t\t\t\tvalueRequired);", "-\t\t\t\tif (valueRequired) {", "-\t\t\t\t\tcodeStream.iconst_1();", "-\t\t\t\t\tif ((bits & IsReturnedValue) != 0) {", "-\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\t\t\t\tcodeStream.generateReturnBytecode(this);", "-\t\t\t\t\t\tfalseLabel.place();", "-\t\t\t\t\t\tcodeStream.iconst_0();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_boolean : // logical or", "+\t\t\t\t\tgenerateLogicalOr(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase XOR :", "+\t\t\tswitch (this.bits & ASTNode.ReturnTypeIDMASK) {", "+\t\t\t\tcase T_int :", "+\t\t\t\t\t// 0 ^ x", "+\t\t\t\t\tif ((this.left.constant != Constant.NotAConstant)", "+\t\t\t\t\t\t&& (this.left.constant.typeID() == TypeIds.T_int)", "+\t\t\t\t\t\t&& (this.left.constant.intValue() == 0)) {", "+\t\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tcodeStream.goto_(endLabel = new BranchLabel(codeStream));", "-\t\t\t\t\t\tcodeStream.decrStackSize(1);", "-\t\t\t\t\t\tfalseLabel.place();", "-\t\t\t\t\t\tcodeStream.iconst_0();", "-\t\t\t\t\t\tendLabel.place();", "+\t\t\t\t\t\t// x ^ 0", "+\t\t\t\t\t\tif ((this.right.constant != Constant.NotAConstant)", "+\t\t\t\t\t\t\t&& (this.right.constant.typeID() == TypeIds.T_int)", "+\t\t\t\t\t\t\t&& (this.right.constant.intValue() == 0)) {", "+\t\t\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\t\t\tcodeStream.ixor();", "+\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t}", "-\t\tif (valueRequired) {", "-\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t}", "-\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_long :", "+\t\t\t\t\t// 0 ^ x", "+\t\t\t\t\tif ((this.left.constant != Constant.NotAConstant)", "+\t\t\t\t\t\t&& (this.left.constant.typeID() == TypeIds.T_long)", "+\t\t\t\t\t\t&& (this.left.constant.longValue() == 0L)) {", "+\t\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// x ^ 0", "+\t\t\t\t\t\tif ((this.right.constant != Constant.NotAConstant)", "+\t\t\t\t\t\t\t&& (this.right.constant.typeID() == TypeIds.T_long)", "+\t\t\t\t\t\t\t&& (this.right.constant.longValue() == 0L)) {", "+\t\t\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\t\t\tcodeStream.lxor();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_boolean :", "+\t\t\t\t\tgenerateLogicalXor(currentScope, \tcodeStream, valueRequired);", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase LEFT_SHIFT :", "+\t\t\tswitch (this.bits & ASTNode.ReturnTypeIDMASK) {", "+\t\t\t\tcase T_int :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.ishl();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_long :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.lshl();", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase RIGHT_SHIFT :", "+\t\t\tswitch (this.bits & ASTNode.ReturnTypeIDMASK) {", "+\t\t\t\tcase T_int :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.ishr();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_long :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.lshr();", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase UNSIGNED_RIGHT_SHIFT :", "+\t\t\tswitch (this.bits & ASTNode.ReturnTypeIDMASK) {", "+\t\t\t\tcase T_int :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.iushr();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase T_long :", "+\t\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tif (valueRequired)", "+\t\t\t\t\t\tcodeStream.lushr();", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase GREATER :", "+\t\t\tBranchLabel falseLabel, endLabel;", "+\t\t\tgenerateOptimizedGreaterThan(", "+\t\t\t\tnull,", "+\t\t\t\t(falseLabel = new BranchLabel(codeStream)),", "+\t\t\tif (valueRequired) {", "+\t\t\t\tcodeStream.iconst_1();", "+\t\t\t\tif ((this.bits & ASTNode.IsReturnedValue) != 0) {", "+\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\tcodeStream.generateReturnBytecode(this);", "+\t\t\t\t\tfalseLabel.place();", "+\t\t\t\t\tcodeStream.iconst_0();", "+\t\t\t\t} else {", "+\t\t\t\t\tcodeStream.goto_(endLabel = new BranchLabel(codeStream));", "+\t\t\t\t\tcodeStream.decrStackSize(1);", "+\t\t\t\t\tfalseLabel.place();", "+\t\t\t\t\tcodeStream.iconst_0();", "+\t\t\t\t\tendLabel.place();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase GREATER_EQUAL :", "+\t\t\tgenerateOptimizedGreaterThanOrEqual(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tcodeStream,", "+\t\t\t\tnull,", "+\t\t\t\t(falseLabel = new BranchLabel(codeStream)),", "+\t\t\t\tvalueRequired);", "+\t\t\tif (valueRequired) {", "+\t\t\t\tcodeStream.iconst_1();", "+\t\t\t\tif ((this.bits & ASTNode.IsReturnedValue) != 0) {", "+\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\tcodeStream.generateReturnBytecode(this);", "+\t\t\t\t\tfalseLabel.place();", "+\t\t\t\t\tcodeStream.iconst_0();", "+\t\t\t\t} else {", "+\t\t\t\t\tcodeStream.goto_(endLabel = new BranchLabel(codeStream));", "+\t\t\t\t\tcodeStream.decrStackSize(1);", "+\t\t\t\t\tfalseLabel.place();", "+\t\t\t\t\tcodeStream.iconst_0();", "+\t\t\t\t\tendLabel.place();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase LESS :", "+\t\t\tgenerateOptimizedLessThan(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tcodeStream,", "+\t\t\t\tnull,", "+\t\t\t\t(falseLabel = new BranchLabel(codeStream)),", "+\t\t\t\tvalueRequired);", "+\t\t\tif (valueRequired) {", "+\t\t\t\tcodeStream.iconst_1();", "+\t\t\t\tif ((this.bits & ASTNode.IsReturnedValue) != 0) {", "+\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\tcodeStream.generateReturnBytecode(this);", "+\t\t\t\t\tfalseLabel.place();", "+\t\t\t\t\tcodeStream.iconst_0();", "+\t\t\t\t} else {", "+\t\t\t\t\tcodeStream.goto_(endLabel = new BranchLabel(codeStream));", "+\t\t\t\t\tcodeStream.decrStackSize(1);", "+\t\t\t\t\tfalseLabel.place();", "+\t\t\t\t\tcodeStream.iconst_0();", "+\t\t\t\t\tendLabel.place();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase LESS_EQUAL :", "+\t\t\tgenerateOptimizedLessThanOrEqual(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tcodeStream,", "+\t\t\t\tnull,", "+\t\t\t\t(falseLabel = new BranchLabel(codeStream)),", "+\t\t\t\tvalueRequired);", "+\t\t\tif (valueRequired) {", "+\t\t\t\tcodeStream.iconst_1();", "+\t\t\t\tif ((this.bits & ASTNode.IsReturnedValue) != 0) {", "+\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\tcodeStream.generateReturnBytecode(this);", "+\t\t\t\t\tfalseLabel.place();", "+\t\t\t\t\tcodeStream.iconst_0();", "+\t\t\t\t} else {", "+\t\t\t\t\tcodeStream.goto_(endLabel = new BranchLabel(codeStream));", "+\t\t\t\t\tcodeStream.decrStackSize(1);", "+\t\t\t\t\tfalseLabel.place();", "+\t\t\t\t\tcodeStream.iconst_0();", "+\t\t\t\t\tendLabel.place();", "+\t\t\t\t}", "+\t\t\t}", "+\t}", "+\tif (valueRequired) {", "+\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t}", "+\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "769b7361559dcb6880a6c21e0d2e910d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "6a44e0777af1a4632e0d20c0e9b92d35d2ad59f3", "commitAfterChange": "2ca339c139c0fe73a5bd2705f66592731098d347", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\trepetitions = 0;", "+\t\tthis.repetitions = 0;", "-\t\t\t\tif (filenames == null) {", "-\t\t\t\t\tfilenames = new String[argCount - index];", "-\t\t\t\t\tencodings = new String[argCount - index];", "-\t\t\t\t} else if (filesCount == filenames.length) {", "-\t\t\t\t\tint length = filenames.length;", "+\t\t\t\tif (this.filenames == null) {", "+\t\t\t\t\tthis.filenames = new String[argCount - index];", "+\t\t\t\t\tthis.encodings = new String[argCount - index];", "+\t\t\t\t} else if (filesCount == this.filenames.length) {", "+\t\t\t\t\tint length = this.filenames.length;", "-\t\t\t\t\t\tfilenames,", "+\t\t\t\t\t\tthis.filenames,", "-\t\t\t\t\t\t(filenames = new String[length + argCount - index]),", "+\t\t\t\t\t\t(this.filenames = new String[length + argCount - index]),", "-\t\t\t\t\t\tencodings,", "+\t\t\t\t\t\tthis.encodings,", "-\t\t\t\t\t\t(encodings = new String[length + argCount - index]),", "+\t\t\t\t\t\t(this.encodings = new String[length + argCount - index]),", "-\t\t\t\tfilenames[filesCount] = currentArg;", "-\t\t\t\tencodings[filesCount++] = customEncoding;", "+\t\t\t\tthis.filenames[filesCount] = currentArg;", "+\t\t\t\tthis.encodings[filesCount++] = customEncoding;", "-\t\t\t\tif (log != null)", "+\t\t\t\tif (this.log != null)", "-\t\t\t\tif (repetitions > 0)", "+\t\t\t\tif (this.repetitions > 0)", "-\t\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);", "+\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);", "-\t\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "+\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\t\t\tif (destinationPath != null)", "+\t\t\t\tif (this.destinationPath != null)", "-\t\t\t\tgeneratePackagesStructure = true;", "+\t\t\t\tthis.generatePackagesStructure = true;", "-\t\t\t\t\tclasspaths = new String[DEFAULT_SIZE_CLASSPATH];", "+\t\t\t\t\tthis.classpaths = new String[DEFAULT_SIZE_CLASSPATH];", "-\t\t\t\tshowProgress = true;", "+\t\t\t\tthis.showProgress = true;", "-\t\t\t\tproceedOnError = true;", "+\t\t\t\tthis.proceedOnError = true;", "-\t\t\t\ttimer = true;", "+\t\t\t\tthis.timer = true;", "-\t\t\t\t|| currentArg.equals(\"-v\")) { //$NON-NLS-1$", "+\t\t\t\t\t|| currentArg.equals(\"-v\")) { //$NON-NLS-1$", "-\t\t\t\tproceed = false;", "+\t\t\t\tthis.proceed = false;", "-\t\t\t\toptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);", "+\t\t\t\tthis.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);", "-\t\t\t\toptions.put(", "+\t\t\t\tthis.options.put(", "-\t\t\t\tsystemExitWhenFinished = false;", "+\t\t\t\tthis.systemExitWhenFinished = false;", "-\t\t\t\tverbose = true;", "+\t\t\t\tthis.verbose = true;", "-\t\t\t\tproduceRefInfo = true;", "+\t\t\t\tthis.produceRefInfo = true;", "-\t\t\t\t\toptions.put(", "+\t\t\t\t\tthis.options.put(", "-\t\t\t\t\toptions.put(", "+\t\t\t\t\tthis.options.put(", "-\t\t\t\t\toptions.put(", "+\t\t\t\t\tthis.options.put(", "-\t\t\t\t\toptions.put(", "+\t\t\t\t\tthis.options.put(", "-\t\t\t\t\toptions.put(", "+\t\t\t\t\tthis.options.put(", "-\t\t\t\t\toptions.put(", "+\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.WARNING);", "+\t\t\t\t\t} else if (token.equals(\"finally\")) { //$NON-NLS-1$", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportFinallyBlockNotCompletingNormally,", "+\t\t\t\t\t\t\tCompilerOptions.WARNING);", "+\t\t\t\t\t} else if (token.equals(\"unusedThrown\")) { //$NON-NLS-1$", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedDeclaredThrownException,", "+\t\t\t\t\t\t\tCompilerOptions.WARNING);", "+\t\t\t\t\t} else if (token.equals(\"unqualifiedField\")) { //$NON-NLS-1$", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportUnqualifiedFieldAccess,", "-\t\t\t\toptions.put(", "+\t\t\t\tthis.options.put(", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_3);", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_3);", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "-\t\t\t\t\tif (didSpecifyCompliance && CompilerOptions.versionToJdkLevel((String)options.get(CompilerOptions.OPTION_Compliance)) <= ClassFileConstants.JDK1_3) {", "-\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget14\", (String)options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\t\t\t\tif (didSpecifyCompliance && CompilerOptions.versionToJdkLevel((String)this.options.get(CompilerOptions.OPTION_Compliance)) <= ClassFileConstants.JDK1_3) {", "+\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget14\", (String)this.options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\t\t\tlog = currentArg;", "+\t\t\t\tthis.log = currentArg;", "-\t\t\t\t\trepetitions = Integer.parseInt(currentArg);", "-\t\t\t\t\tif (repetitions <= 0) {", "+\t\t\t\t\tthis.repetitions = Integer.parseInt(currentArg);", "+\t\t\t\t\tif (this.repetitions <= 0) {", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);", "-\t\t\t\toptions.put(CompilerOptions.OPTION_Encoding, currentArg);", "+\t\t\t\tthis.options.put(CompilerOptions.OPTION_Encoding, currentArg);", "-\t\t\t\tdestinationPath = currentArg;", "+\t\t\t\tthis.destinationPath = currentArg;", "-\t\t\t\t\tif ((length = classpaths.length) <= pathCount) {", "+\t\t\t\t\tif ((length = this.classpaths.length) <= pathCount) {", "-\t\t\t\t\t\t\tclasspaths,", "+\t\t\t\t\t\t\tthis.classpaths,", "-\t\t\t\t\t\t\t(classpaths = new String[length * 2]),", "+\t\t\t\t\t\t\t(this.classpaths = new String[length * 2]),", "-\t\t\t\t\tclasspaths[pathCount++] = tokenizer.nextToken();", "+\t\t\t\t\tthis.classpaths[pathCount++] = tokenizer.nextToken();", "-\t\t\t\tfinder.find(dir, SUFFIX_STRING_JAVA, verbose); //$NON-NLS-1$", "+\t\t\t\tfinder.find(dir, SUFFIX_STRING_JAVA, this.verbose); //$NON-NLS-1$", "-\t\t\tif (filenames != null) {", "+\t\t\tif (this.filenames != null) {", "-\t\t\t\t\tfilenames,", "+\t\t\t\t\tthis.filenames,", "-\t\t\t\t\t(filenames = new String[length + filesCount]),", "+\t\t\t\t\t(this.filenames = new String[length + filesCount]),", "-\t\t\t\t\tencodings,", "+\t\t\t\t\tthis.encodings,", "-\t\t\t\t\t(encodings = new String[length + filesCount]),", "+\t\t\t\t\t(this.encodings = new String[length + filesCount]),", "-\t\t\t\tSystem.arraycopy(results, 0, filenames, filesCount, length);", "+\t\t\t\tSystem.arraycopy(results, 0, this.filenames, filesCount, length);", "-\t\t\t\t\tencodings[filesCount + i] = customEncoding;", "+\t\t\t\t\tthis.encodings[filesCount + i] = customEncoding;", "-\t\t\t\tfilenames = finder.resultFiles;", "-\t\t\t\tfilesCount = filenames.length;", "-\t\t\t\tencodings = new String[filesCount];", "+\t\t\t\tthis.filenames = finder.resultFiles;", "+\t\t\t\tfilesCount = this.filenames.length;", "+\t\t\t\tthis.encodings = new String[filesCount];", "-\t\t\t\t\tencodings[i] = customEncoding;", "+\t\t\t\t\tthis.encodings[i] = customEncoding;", "-\t\t\tproceed = false;", "+\t\t\tthis.proceed = false;", "-\t\t\t\tfilenames,", "+\t\t\t\tthis.filenames,", "-\t\t\t\t(filenames = new String[filesCount]),", "+\t\t\t\t(this.filenames = new String[filesCount]),", "-\t\t\t\terr.println(Main.bind(\"configure.noClasspath\")); //$NON-NLS-1$", "+\t\t\t\tthis.err.println(Main.bind(\"configure.noClasspath\")); //$NON-NLS-1$", "-\t\t\tclasspaths = new String[tokenizer.countTokens() + 1];", "+\t\t\tthis.classpaths = new String[tokenizer.countTokens() + 1];", "-\t\t\t\tclasspaths[pathCount++] = tokenizer.nextToken();", "+\t\t\t\tthis.classpaths[pathCount++] = tokenizer.nextToken();", "-\t\t\tclasspaths[pathCount++] = System.getProperty(\"user.dir\");//$NON-NLS-1$", "+\t\t\tthis.classpaths[pathCount++] = System.getProperty(\"user.dir\");//$NON-NLS-1$", "-\t\t\t\terr.println(Main.bind(\"configure.requiresJDK1.2orAbove\")); //$NON-NLS-1$", "-\t\t\t\tproceed = false;", "+\t\t\t\tthis.err.println(Main.bind(\"configure.requiresJDK1.2orAbove\")); //$NON-NLS-1$", "+\t\t\t\tthis.proceed = false;", "-\t\tif (classpaths == null) {", "-\t\t\tclasspaths = new String[0];", "+\t\tif (this.classpaths == null) {", "+\t\t\tthis.classpaths = new String[0];", "-\t\tif ((pathCount + bootclasspathCount) != classpaths.length) {", "+\t\tif ((pathCount + bootclasspathCount) != this.classpaths.length) {", "-\t\t\tnewclasspaths = classpaths;", "+\t\t\tnewclasspaths = this.classpaths;", "-\t\t\tclasspaths,", "+\t\t\tthis.classpaths,", "-\t\tclasspaths = newclasspaths;", "-\t\tfor (int i = 0, max = classpaths.length; i < max; i++) {", "-\t\t\tFile file = new File(classpaths[i]);", "+\t\tthis.classpaths = newclasspaths;", "+\t\tfor (int i = 0, max = this.classpaths.length; i < max; i++) {", "+\t\t\tFile file = new File(this.classpaths[i]);", "-\t\t\t\terr.println(Main.bind(\"configure.incorrectClasspath\", classpaths[i])); //$NON-NLS-1$", "-\t\t\t} /* else {", "-\t\t\t\tout.println(classpaths[i]);", "-\t\t\t}*/", "+\t\t\t\tthis.err.println(Main.bind(\"configure.incorrectClasspath\", this.classpaths[i])); //$NON-NLS-1$", "+\t\t\t}", "-\t\tif (destinationPath == null) {", "-\t\t\tgeneratePackagesStructure = false;", "-\t\t} else if (\"none\".equals(destinationPath)) { //$NON-NLS-1$", "-\t\t\tdestinationPath = null;", "+\t\tif (this.destinationPath == null) {", "+\t\t\tthis.generatePackagesStructure = false;", "+\t\t} else if (\"none\".equals(this.destinationPath)) { //$NON-NLS-1$", "+\t\t\tthis.destinationPath = null;", "-\t\tif (CompilerOptions.versionToJdkLevel((String)options.get(CompilerOptions.OPTION_Source)) >= ClassFileConstants.JDK1_4", "-\t\t\t\t&& CompilerOptions.versionToJdkLevel((String)options.get(CompilerOptions.OPTION_TargetPlatform)) < ClassFileConstants.JDK1_4", "+\t\tif (CompilerOptions.versionToJdkLevel((String)this.options.get(CompilerOptions.OPTION_Source)) >= ClassFileConstants.JDK1_4", "+\t\t\t\t&& CompilerOptions.versionToJdkLevel((String)this.options.get(CompilerOptions.OPTION_TargetPlatform)) < ClassFileConstants.JDK1_4", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource14\", (String)options.get(CompilerOptions.OPTION_TargetPlatform))); //$NON-NLS-1$", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource14\", (String)this.options.get(CompilerOptions.OPTION_TargetPlatform))); //$NON-NLS-1$", "-\t\tif (CompilerOptions.versionToJdkLevel((String)options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_4", "-\t\t\t\t&& CompilerOptions.versionToJdkLevel((String)options.get(CompilerOptions.OPTION_TargetPlatform)) >= ClassFileConstants.JDK1_4", "+\t\tif (CompilerOptions.versionToJdkLevel((String)this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_4", "+\t\t\t\t&& CompilerOptions.versionToJdkLevel((String)this.options.get(CompilerOptions.OPTION_TargetPlatform)) >= ClassFileConstants.JDK1_4", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget14\", (String)options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget14\", (String)this.options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$", "-\t\tif (options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)){", "-\t\t\tif (!didSpecifyCompliance) options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\t\tif (!didSpecifyTarget) options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "-\t\t} else if (options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)", "-\t\t\t  \t\t&& options.get(CompilerOptions.OPTION_TargetPlatform).equals(CompilerOptions.VERSION_1_1)) {", "+\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)){", "+\t\t\tif (!didSpecifyCompliance) this.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "+\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\t} else if (this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)", "+\t\t\t  \t\t&& this.options.get(CompilerOptions.OPTION_TargetPlatform).equals(CompilerOptions.VERSION_1_1)) {", "-\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget11\", (String)options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$", "+\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget11\", (String)this.options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "-\t\tif (options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)", "-\t\t\t\t&& !options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)){ ", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource14\", (String)options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$", "+\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)", "+\t\t\t\t&& !this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)){ ", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource14\", (String)this.options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$", "-\t\tif (log != null) {", "+\t\tif (this.log != null) {", "-\t\t\t\terr = new PrintWriter(new FileOutputStream(log, false));", "+\t\t\t\tthis.err = new PrintWriter(new FileOutputStream(this.log, false));", "-\t\t\tshowProgress = false;", "+\t\t\tthis.showProgress = false;", "-\t\tif (repetitions == 0) {", "-\t\t\trepetitions = 1;", "+\t\tif (this.repetitions == 0) {", "+\t\t\tthis.repetitions = 1;"]}], "num": 72598}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f3dd256fdf1bb7d7c52f24bbd90b96d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ad5e2c0deef7ae3f8b36df4452f7c97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java", "commitBeforeChange": "8f81b2e3747fcb9f17cf00acc1b99bfe92cefa96", "commitAfterChange": "b94c15d0468e2c86a83d3434786ffbaf7e2c6cc7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void indexDocument()", "signatureAfterChange": " \tpublic void indexDocument()", "diff": ["-\t", "+", "+\t\t\t// Look for references in class annotations", "+\t\t\tIBinaryAnnotation[] annotations = reader.getAnnotations();", "+\t\t\tif (annotations != null) {", "+\t\t\t\tfor (int a=0, length=annotations.length; a<length; a++) {", "+\t\t\t\t\tIBinaryAnnotation annotation = annotations[a];", "+\t\t\t\t\taddBinaryAnnotation(annotation);", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\t\t\t// look for references in method annotations", "+\t\t\t\t\tannotations = method.getAnnotations();", "+\t\t\t\t\tif (annotations != null) {", "+\t\t\t\t\t\tfor (int a=0, length=annotations.length; a<length; a++) {", "+\t\t\t\t\t\t\tIBinaryAnnotation annotation = annotations[a];", "+\t\t\t\t\t\t\taddBinaryAnnotation(annotation);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t// look for references in field annotations", "+\t\t\t\t\tannotations = field.getAnnotations();", "+\t\t\t\t\tif (annotations != null) {", "+\t\t\t\t\t\tfor (int a=0, length=annotations.length; a<length; a++) {", "+\t\t\t\t\t\t\tIBinaryAnnotation annotation = annotations[a];", "+\t\t\t\t\t\t\taddBinaryAnnotation(annotation);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9501d78fdef0c57d43b329f0d98802a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "e593164022433d17467e437ca5f1d1580fcf9c34", "commitAfterChange": "1ca61ba390ea54fcabd09223853d7a3d6816c249", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": "  \tprivate void setArrayTypeAnnotations(ExtraDimension currentDimension, \t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[][] annotationsOnDims, int index)", "signatureAfterChange": "  \tprivate void setTypeAnnotationsOnDimension(ExtraDimension currentDimension, org.eclipse.jdt.internal.compiler.ast.Annotation[][] annotationsOnDimensions, int dimension)", "diff": ["-\tprivate void setArrayTypeAnnotations(ExtraDimension currentDimension,", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[][] annotationsOnDims, int index) {", "-\t\tif (annotationsOnDims == null) return;", "-\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[] annotation = annotationsOnDims[index];", "-\t\tif (annotation != null) {", "-\t\t\tfor (int j = 0; j < annotation.length; j++) {", "-\t\t\t\tAnnotation annot = convert(annotation[j]);", "-\t\t\t\tcurrentDimension.annotations().add(annot);", "+\tprivate void setTypeAnnotationsOnDimension(ExtraDimension currentDimension, org.eclipse.jdt.internal.compiler.ast.Annotation[][] annotationsOnDimensions, int dimension) {", "+\t\tif (annotationsOnDimensions == null) return;", "+\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = annotationsOnDimensions[dimension];", "+\t\tif (annotations != null) {", "+\t\t\tfor (int j = 0, length = annotations.length; j < length; j++) {", "+\t\t\t\tAnnotation annotation = convert(annotations[j]);", "+\t\t\t\tcurrentDimension.annotations().add(annotation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea18cbfe02cad99b8b8409627a184724", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "316430f6a7a386142798774df034be0e36155d28", "commitAfterChange": "5981e91cc71ba86df42ff9d60654ccdd89adffe1", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "diff": ["-\t\t\t\treportMatching(superClass.annotations[i], enclosingElement, null, type.binding, nodeSet, matchedClassContainer, enclosesElement);\t", "+\t\t\t\tAnnotation[] annotations = superClass.annotations[i];", "+\t\t\t\tif (annotations == null) continue;", "+\t\t\t\treportMatching(annotations, enclosingElement, null, type.binding, nodeSet, matchedClassContainer, enclosesElement);\t", "-\t\t\t\tif (typeReference != null &&  typeReference.annotations != null) {", "-\t\t\t\t\tfor (int j = 0, length = typeReference.annotations.length; j < length; j++) {", "-\t\t\t\t\t\treportMatching(typeReference.annotations[j], enclosingElement, null, type.binding, nodeSet, matchedClassContainer, enclosesElement);\t", "+\t\t\t\tAnnotation[][] annotations = typeReference != null ? typeReference.annotations : null;", "+\t\t\t\tif (annotations != null) {", "+\t\t\t\t\tfor (int j = 0, length = annotations.length; j < length; j++) {", "+\t\t\t\t\t\tif (annotations[j] == null) continue;", "+\t\t\t\t\t\treportMatching(annotations[j], enclosingElement, null, type.binding, nodeSet, matchedClassContainer, enclosesElement);\t"]}], "num": 3313}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4477f0bc553d423ee7077d5b11362bec", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b514181edb857d6db55f63206d5d6a29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "3bf739514a83473db763d6e900f7cc23c49722a4", "commitAfterChange": "2549563b41e6c85c6b89404895eaa0cb6c474e96", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "signatureAfterChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "diff": ["-\t\t\tint ptr = this.uninterestingBindingsPtr;", "-\t\t\t// Cases where the binding is uninteresting eg. for completion occurring inside a field declaration,", "-\t\t\t// the field binding is uninteresting and shouldn't be proposed.", "-\t\t\twhile (ptr >= 0) {", "-\t\t\t\tif (this.uninterestingBindings[ptr] == field) {", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=310427", "+\t\t\t// Don't propose field which is being declared currently", "+\t\t\t// Don't propose fields declared after the current field declaration statement", "+\t\t\tif (this.parser.assistNodeParent instanceof FieldDeclaration) {", "+\t\t\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) this.parser.assistNodeParent;", "+\t\t\t\tif (field.id >= fieldDeclaration.binding.id)", "-\t\t\t\t}", "-\t\t\t\tptr--;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db3e0fe1a6b5e07d090846c9299f062a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "27e5bf24465f583e3802225a581a8de5dc29abcf", "commitAfterChange": "10a7931aec1c8332a21c39057c6b5465506f45bd", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "signatureAfterChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "diff": ["+\t\t// if the proposal is being asked inside a field's initialization, we'll record its id", "+\t\tint fieldBeingCompletedId = -1;", "+\t\tfor (int f = fields.length; --f >=0;) {", "+\t\t\tFieldBinding field = fields[f];", "+\t\t\tFieldDeclaration fieldDeclaration = field.sourceField();", "+\t\t\tif (fieldDeclaration != null && fieldDeclaration.initialization != null) {", "+\t\t\t\t// We're asking for a proposal inside this field's initialization. So record its id", "+\t\t\t\tfieldBeingCompletedId = field.id;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "-", "+\t\t\t", "+\t\t\t// Content assist invoked inside some field's initialization.", "+\t\t\t// bug 310427 and 325481", "+\t\t\tif (fieldBeingCompletedId >= 0 && field.id >= fieldBeingCompletedId) {", "+\t\t\t\t// Don't propose field which is being declared currently", "+\t\t\t\t// Don't propose fields declared after the current field declaration statement", "+\t\t\t\tcontinue next;", "+\t\t\t}", "+\t\t\t", "-\t\t\t", "-\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=310427", "-\t\t\t// Don't propose field which is being declared currently", "-\t\t\t// Don't propose fields declared after the current field declaration statement", "-\t\t\tif (this.parser.assistNodeParent instanceof FieldDeclaration) {", "-\t\t\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) this.parser.assistNodeParent;", "-\t\t\t\tif (field.id >= fieldDeclaration.binding.id)", "-\t\t\t\t\tcontinue next;", "-\t\t\t}"]}], "num": 12951}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b34562924dabd0c6246474f1b7924ce9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86d63a895a12c294a94be06c688865e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "06f23e3e171e1532838272ad3cfed1dbf476c295", "commitAfterChange": "fd83708e4f6c48e5f68b55d90ce222d8723ca6ce", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName)", "signatureAfterChange": "\r private NameEnvironmentAnswer findClass(char[] name, char[][] packageName)", "diff": ["-private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName){\r", "+private NameEnvironmentAnswer findClass(char[] name, char[][] packageName) {\r", "+\tString fullName = assembleName(name, packageName, File.separatorChar);\r", "-\t\tif (qualifiedTypeName.equals(knownFileNames[i]))\r", "+\t\tif (fullName.equals(knownFileNames[i]))\r", "-\tString qualifiedBinaryFileName = qualifiedTypeName + \".class\"; //$NON-NLS-1$\r", "-\tString qualifiedPackageName =\r", "-\t\tqualifiedTypeName.length() == typeName.length\r", "-\t\t\t? \"\" //$NON-NLS-1$\r", "-\t\t\t: qualifiedBinaryFileName.substring(0, qualifiedTypeName.length() - typeName.length - 1);\r", "+\tString filename = new String(name);\r", "+\tString binaryFilename = filename + \".class\"; //$NON-NLS-1$\r", "+\tString sourceFilename = filename + \".java\"; //$NON-NLS-1$\r", "-\t\tNameEnvironmentAnswer answer = classpaths[i].findClass(typeName, qualifiedPackageName, qualifiedBinaryFileName);\r", "-\t\tif (answer != null) return answer;\r", "+\t\tClasspath classpath = classpaths[i];\r", "+\t\tboolean binaryExists = classpath.exists(binaryFilename, packageName);\r", "+\t\tboolean sourceExists = classpath.exists(sourceFilename, packageName);\r", "+\t\tif (binaryExists == sourceExists) {\r", "+\t\t\tif (binaryExists) { // so both are true\r", "+\t\t\t\tlong binaryModified = classpath.lastModified(binaryFilename, packageName);\r", "+\t\t\t\tlong sourceModified = classpath.lastModified(sourceFilename, packageName);\r", "+\t\t\t\tif (binaryModified > sourceModified)\r", "+\t\t\t\t\treturn classpath.readClassFile(binaryFilename, packageName);\r", "+\t\t\t\tif (sourceModified > 0)\r", "+\t\t\t\t\treturn classpath.readJavaFile(sourceFilename, packageName);\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\tif (binaryExists)\r", "+\t\t\t\treturn classpath.readClassFile(binaryFilename, packageName);\r", "+\t\t\telse\r", "+\t\t\t\treturn classpath.readJavaFile(sourceFilename, packageName);\r", "+\t\t}\r", "-\treturn null;\r", "+\treturn null; \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de80d9899de3dc96a202683e75cedd68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/CompilerInvocationTests.java", "commitBeforeChange": "8ae6a032b744da62a95176b1af816f0bc6d501e7", "commitAfterChange": "e5d1651827919c7582ba9351a3db777b316a27e0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tCompilerInvocationTestsArguments( \t\t\tStandardJavaFileManager standardJavaFileManager,  \t\t\tList<String> options, \t\t\tString[] fileNames)", "signatureAfterChange": " public void _test022_output_streams() throws IOException", "diff": ["-\tString[] fileNames;", "-\tCompilerInvocationTestsArguments(", "-\t\t\tStandardJavaFileManager standardJavaFileManager, ", "-\t\t\tList<String> options,", "-\t\t\tString[] fileNames) {", "-\t\tthis.standardJavaFileManager = standardJavaFileManager;", "-\t\tthis.options = options;", "-\t\tthis.fileNames = fileNames;", "-\t}", "+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=236814", "+public void _test022_output_streams() throws IOException {", "+\tByteArrayOutputStream ", "+\t\t\toutBuffer = new ByteArrayOutputStream(),", "+\t\t\terrBuffer = new ByteArrayOutputStream();", "+\tPrintStream ", "+\t\tsystemOut = System.out,", "+\t\tsystemErr = System.err;", "+\tSystem.setOut(new PrintStream(outBuffer));", "+\tSystem.setErr(new PrintStream(errBuffer));", "+\tCompilationTask task = COMPILER.getTask(", "+\t\tnull, ", "+\t\tJAVAC_COMPILER.getStandardFileManager(null /* diagnosticListener */, null /* locale */, null /* charset */), ", "+\t\tnew CompilerInvocationDiagnosticListener(new PrintWriter(errBuffer)), ", "+\t\tArrays.asList(\"-v\"), null, null);", "+\ttry {", "+\tassertTrue(task.call());", "+\tassertTrue(outBuffer.toString().isEmpty());", "+\tassertTrue(errBuffer.toString().startsWith(\"Eclipse Java Compiler\"));", "+\t} finally {", "+\t\tSystem.setOut(systemOut);", "+\t\tSystem.setErr(systemErr);", "+\t}", "+}"]}], "num": 11568}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "02ef89e8e428e2035c390cfebe395b17", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21193be551e14b68ff287f0ae7448f25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 126, "signatureBeforeChange": " \t \tprivate static void recreatePersistedContainer(final IJavaProject project, final IPath containerPath, String containerString, boolean addToContainerValues)", "signatureAfterChange": " \t \tprivate static void recreatePersistedContainer(final IJavaProject project, final IPath containerPath, String containerString, boolean addToContainerValues)", "diff": ["-\t\t\tfinal IClasspathEntry[] containerEntries = ((JavaProject) project).decodeClasspath(containerString, false, false);", "-\t\t\tif (containerEntries != null && containerEntries != JavaProject.INVALID_CLASSPATH) {", "+\t\t\tIClasspathEntry[] entries;", "+\t\t\ttry {", "+\t\t\t\tentries = ((JavaProject) project).decodeClasspath(containerString, null/*not interested in unknown elements*/);", "+\t\t\t} catch (IOException e) {", "+\t\t\t\tUtil.log(e, \"Could not recreate persisted container: \\n\" + containerString); //$NON-NLS-1$", "+\t\t\t\tentries = JavaProject.INVALID_CLASSPATH;", "+\t\t\t}", "+\t\t\tif (entries != JavaProject.INVALID_CLASSPATH) {", "+\t\t\t\tfinal IClasspathEntry[] containerEntries = entries;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51ba4256c36616a1796dc05330dfc603", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " void add(JavaProject javaProject, IPath pathToAdd, int includeMask, HashSet visitedProjects, IClasspathEntry referringEntry) throws JavaModelException", "signatureAfterChange": " void add(JavaProject javaProject, IPath pathToAdd, int includeMask, HashSet visitedProjects, IClasspathEntry referringEntry) throws JavaModelException", "diff": ["-\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "+\tIClasspathEntry[] entries = javaProject.getResolvedClasspath();", "-\t\t\t\tif (perProjectInfo != null && perProjectInfo.resolvedPathToRawEntries != null) {", "-\t\t\t\t\trawEntry = (IClasspathEntry) perProjectInfo.resolvedPathToRawEntries.get(entry.getPath());", "+\t\t\t\tMap resolvedPathToRawEntries = perProjectInfo.resolvedPathToRawEntries;", "+\t\t\t\tif (resolvedPathToRawEntries != null) {", "+\t\t\t\t\trawEntry = (IClasspathEntry) resolvedPathToRawEntries.get(entry.getPath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3ee7e6b467255c6c3a2db208cec75b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public IClasspathEntry getRawClasspathEntry() throws JavaModelException", "signatureAfterChange": " public IClasspathEntry getRawClasspathEntry() throws JavaModelException", "diff": ["-\tproject.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/); // force the reverse rawEntry cache to be populated", "-\tJavaModelManager.PerProjectInfo perProjectInfo = project.getPerProjectInfo();", "-\tif (perProjectInfo != null && perProjectInfo.resolvedPathToRawEntries != null) {", "-\t\trawEntry = (IClasspathEntry) perProjectInfo.resolvedPathToRawEntries.get(this.getPath());", "+\tproject.getResolvedClasspath(); // force the reverse rawEntry cache to be populated", "+\tMap resolvedPathToRawEntries = project.getPerProjectInfo().resolvedPathToRawEntries;", "+\tif (resolvedPathToRawEntries != null) {", "+\t\trawEntry = (IClasspathEntry) resolvedPathToRawEntries.get(this.getPath());"]}], "num": 44104}
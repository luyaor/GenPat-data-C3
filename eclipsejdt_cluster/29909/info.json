{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "540545c8828ac99ed101ef0fe22de180", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f845a385817df31320fc64ca3f84505", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "957977037bae1c5fe509d6f5b83d064a1bf50d04", "commitAfterChange": "78430308e7d45c151f6732314055fefd33935867", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 40, "signatureBeforeChange": " private void reportMatching(FieldDeclaration field, IJavaElement parent, TypeDeclaration type, MatchingNodeSet nodeSet, boolean typeInHierarchy) throws CoreException", "signatureAfterChange": " protected void reportMatching(FieldDeclaration field, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-private void reportMatching(FieldDeclaration field, IJavaElement parent, TypeDeclaration type, MatchingNodeSet nodeSet, boolean typeInHierarchy) throws CoreException {", "+protected void reportMatching(FieldDeclaration field, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException {", "+\tIJavaElement enclosingElement = null;", "+\tif (accuracy > -1) {", "+\t\tenclosingElement = createHandle(field, type, parent);", "+\t\treport(field.sourceStart, field.sourceEnd, enclosingElement, accuracy);", "+\t}", "+", "-\t\tLocalDeclarationVisitor localDeclarationVisitor = new LocalDeclarationVisitor(", "-\t\t\t(parent instanceof IType)", "-\t\t\t\t? (field.isField()", "-\t\t\t\t\t? (IJavaElement) createFieldHandle(field, (IType) parent)", "-\t\t\t\t\t: (IJavaElement) createInitializerHandle(type, field, (IType) parent))", "-\t\t\t\t: parent,", "-\t\t\tnodeSet);", "+\t\tif (enclosingElement == null)", "+\t\t\tenclosingElement = createHandle(field, type, parent);", "+\t\tLocalDeclarationVisitor localDeclarationVisitor = new LocalDeclarationVisitor(enclosingElement, nodeSet);", "-\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\tAstNode node = nodes[i];", "-\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "-\t\t\t\tif ((this.matchContainer & PatternLocator.FIELD_CONTAINER) != 0)", "-\t\t\t\t\treportReference(node, type, field, parent, level.intValue());", "+\t\t\tif ((this.matchContainer & PatternLocator.FIELD_CONTAINER) == 0) {", "+\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++)", "+\t\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);", "+\t\t\t} else {", "+\t\t\t\tif (enclosingElement == null)", "+\t\t\t\t\tenclosingElement = createHandle(field, type, parent);", "+\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\tAstNode node = nodes[i];", "+\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, level.intValue(), this);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf46d25cf005effcf19c73615ceeaaed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "957977037bae1c5fe509d6f5b83d064a1bf50d04", "commitAfterChange": "78430308e7d45c151f6732314055fefd33935867", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 41, "signatureBeforeChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-protected void reportMatching(TypeDeclaration type, IJavaElement parent, MatchingNodeSet nodeSet) throws CoreException {", "+protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet) throws CoreException {", "+\t// report the type declaration", "+\tif (accuracy > -1)", "+\t\treport(type.sourceStart, type.sourceEnd, enclosingElement, accuracy);", "+", "-\tboolean searchInsideTypes = (this.matchContainer & PatternLocator.CLASS_CONTAINER) != 0;", "+\tboolean matchedClassContainer = (this.matchContainer & PatternLocator.CLASS_CONTAINER) != 0;", "-\t\t\tif (level != null && searchInsideTypes)", "+\t\t\tif (level != null && matchedClassContainer)", "-\t\t\tif (level != null && searchInsideTypes)", "+\t\t\tif (level != null && matchedClassContainer)", "-\t\t\t\tif (level != null && searchInsideTypes)", "+\t\t\t\tif (level != null && matchedClassContainer)", "+\tmatchedClassContainer = matchedClassContainer && typeInHierarchy; ", "-\t\t\tif (level != null && typeInHierarchy && searchInsideTypes)", "-\t\t\t\treportFieldDeclaration(field, enclosingElement, level.intValue());", "-\t\t\treportMatching(field, enclosingElement, type, nodeSet, typeInHierarchy);", "+\t\t\tint value = (level != null && matchedClassContainer) ? level.intValue() : -1;", "+\t\t\treportMatching(field, type, enclosingElement, value, typeInHierarchy, nodeSet);", "-\t\t\tif (level != null && typeInHierarchy && searchInsideTypes)", "-\t\t\t\treportMethodDeclaration(method, enclosingElement, level.intValue());", "-\t\t\treportMatching(method, enclosingElement, nodeSet, typeInHierarchy);", "+\t\t\tint value = (level != null && matchedClassContainer) ? level.intValue() : -1;", "+\t\t\treportMatching(method, enclosingElement, value, typeInHierarchy, nodeSet);", "-\t\t\tif (level != null && typeInHierarchy && searchInsideTypes)", "-\t\t\t\treportTypeDeclaration(memberType, enclosingElement, level.intValue());", "-\t\t\treportMatching(memberType, enclosingElement, nodeSet);", "+\t\t\tint value = (level != null && matchedClassContainer) ? level.intValue() : -1;", "+\t\t\treportMatching(memberType, enclosingElement, value, nodeSet);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf6690228fa4508f920b123ea67e9045", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "29bba5ec8d05a9cd1832ad934d2530b41087b676", "commitAfterChange": "ca349eb1728a54f5c4569863d8f64340b099c4ce", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "  protected void reportMatching(LambdaExpression lambdaExpression,  IJavaElement parent, int accuracy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": "  protected void reportMatching(LambdaExpression lambdaExpression,  IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, boolean typeInHierarchy) throws CoreException", "diff": ["-protected void reportMatching(LambdaExpression lambdaExpression,  IJavaElement parent, int accuracy, MatchingNodeSet nodeSet) throws CoreException {", "+protected void reportMatching(LambdaExpression lambdaExpression,  IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, boolean typeInHierarchy) throws CoreException {", "+\tIJavaElement enclosingElement = null;", "+\t// Report the lambda declaration itself.", "-\t\tIJavaElement enclosingElement = createHandle(lambdaExpression, parent);", "+\t\tenclosingElement = createHandle(lambdaExpression, parent);", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (enclosingElement == null) {", "+\t\tenclosingElement = createHandle(lambdaExpression, parent);", "+\t}", "+\t// Traverse the lambda declaration to report matches inside, these matches if any should see the present lambda as the parent model element.", "+\tASTNode[] nodes = typeInHierarchy ? nodeSet.matchingNodes(lambdaExpression.sourceStart, lambdaExpression.sourceEnd) : null;", "+\tboolean report = (this.matchContainer & PatternLocator.METHOD_CONTAINER) != 0 && encloses(enclosingElement);", "+\tMemberDeclarationVisitor declarationVisitor = new MemberDeclarationVisitor(enclosingElement, report ? nodes : null, nodeSet, this, typeInHierarchy);", "+\t", "+\tif (lambdaExpression.arguments != null) {", "+\t\tint argumentsLength = lambdaExpression.arguments.length;", "+\t\tfor (int i = 0; i < argumentsLength; i++)", "+\t\t\tlambdaExpression.arguments[i].traverse(declarationVisitor, (BlockScope) null);", "+\t}", "+", "+\tif (lambdaExpression.body != null) {", "+\t\tlambdaExpression.body.traverse(declarationVisitor, (BlockScope) null);", "+\t}", "+\t", "+\t// Report all nodes and remove them", "+\tif (nodes != null) {", "+\t\tint length = nodes.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(nodes[i]);", "+\t\t\tif (report && level != null) {", "+\t\t\t\tthis.patternLocator.matchReportReference(nodes[i], enclosingElement, declarationVisitor.getLocalElement(i), declarationVisitor.getOtherElements(i), lambdaExpression.binding, level.intValue(), this);"]}], "num": 29909}
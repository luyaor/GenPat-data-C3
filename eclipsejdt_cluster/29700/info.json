{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9558f1e8b3c164e71fe407e1585a1e6b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34c26473be3a42771f94d64b145a65d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SortElementsOperation.java", "commitBeforeChange": "d9de3025d75d7748d7f38964e863764f5fea0a70", "commitAfterChange": "e3ee33979d423d2f8021d9bdc0b7d6cb00ccc2ce", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate String processElement(ICompilationUnit unit, char[] source)", "signatureAfterChange": " \tprivate String processElement(ICompilationUnit unit, char[] source)", "diff": ["+\t\tDocument document = new Document(new String(source));", "-\t\torg.eclipse.jdt.core.dom.CompilationUnit domUnit = (org.eclipse.jdt.core.dom.CompilationUnit) parser.createAST(null);", "-\t\tdomUnit.accept(new ASTVisitor() {", "+\t\torg.eclipse.jdt.core.dom.CompilationUnit ast = (org.eclipse.jdt.core.dom.CompilationUnit) parser.createAST(null);", "+        ", "+\t\tASTRewrite rewriter= sortCompilationUnit(ast, null);", "+\t\tif (rewriter == null)", "+\t\t\treturn document.get();", "+\t\t", "+\t\tTextEdit edits = rewriter.rewriteAST(document, null);", "+\t\t", "+\t\tRangeMarker[] markers = null;", "+\t\tif (this.positions != null) {", "+\t\t\tmarkers = new RangeMarker[this.positions.length];", "+\t\t\tfor (int i = 0, max = this.positions.length; i < max; i++) {", "+\t\t\t\tmarkers[i]= new RangeMarker(this.positions[i], 0);", "+\t\t\t\tinsert(edits, markers[i]);", "+\t\t\t}", "+\t\t}", "+\t\ttry {", "+\t\t\tedits.apply(document, TextEdit.UPDATE_REGIONS);", "+\t\t\tif (this.positions != null) {", "+\t\t\t\tfor (int i= 0, max = markers.length; i < max; i++) {", "+\t\t\t\t\tthis.positions[i]= markers[i].getOffset();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (BadLocationException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\treturn document.get();", "+\t}", "-\t\tfinal AST localAst = domUnit.getAST();", "-\t\tfinal ASTRewrite rewriter = ASTRewrite.create(localAst);", "-\t\tRangeMarker[] markers = null;", "-\t\tfinal boolean needPositionsMapping = this.positions != null;", "-\t\tif (needPositionsMapping) {", "-\t\t\tmarkers = new RangeMarker[this.positions.length];", "-\t\t\tfor (int i= 0; i < this.positions.length; i++) {", "-\t\t\t\tmarkers[i]= new RangeMarker(this.positions[i], 0);", "-\t\t}", "-\t\tString generatedSource = new String(source);", "-\t\tDocument document = new Document(generatedSource);", "-\t\tdomUnit.accept(new ASTVisitor() {", "-\t\t\t\tListRewrite listRewrite = rewriter.getListRewrite(compilationUnit, org.eclipse.jdt.core.dom.CompilationUnit.TYPES_PROPERTY);", "-\t\t\t\tList types = compilationUnit.types();", "-\t\t\t\tfinal int length = types.size();", "-\t\t\t\tif (length > 1) {", "-\t\t\t\t\tfinal List myCopy = new ArrayList();", "-\t\t\t\t\tmyCopy.addAll(types);", "-\t\t\t\t\tCollections.sort(myCopy, SortElementsOperation.this.comparator);", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tlistRewrite.replace((ASTNode) types.get(i), rewriter.createMoveTarget((ASTNode) myCopy.get(i)), null);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tListRewrite listRewrite = rewriter.getListRewrite(annotationTypeDeclaration, AnnotationTypeDeclaration.BODY_DECLARATIONS_PROPERTY);", "-\t\t\t\tList bodyDeclarations = annotationTypeDeclaration.bodyDeclarations();", "-\t\t\t\tfinal int length = bodyDeclarations.size();", "-\t\t\t\tif (length > 1) {", "-\t\t\t\t\tfinal List myCopy = new ArrayList();", "-\t\t\t\t\tmyCopy.addAll(bodyDeclarations);", "-\t\t\t\t\tCollections.sort(myCopy, SortElementsOperation.this.comparator);", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tlistRewrite.replace((ASTNode) bodyDeclarations.get(i), rewriter.createMoveTarget((ASTNode) myCopy.get(i)), null);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tListRewrite listRewrite = rewriter.getListRewrite(anonymousClassDeclaration, AnonymousClassDeclaration.BODY_DECLARATIONS_PROPERTY);", "-\t\t\t\tList bodyDeclarations = anonymousClassDeclaration.bodyDeclarations();", "-\t\t\t\tfinal int length = bodyDeclarations.size();", "-\t\t\t\tif (length > 1) {", "-\t\t\t\t\tfinal List myCopy = new ArrayList();", "-\t\t\t\t\tmyCopy.addAll(bodyDeclarations);", "-\t\t\t\t\tCollections.sort(myCopy, SortElementsOperation.this.comparator);", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tlistRewrite.replace((ASTNode) bodyDeclarations.get(i), rewriter.createMoveTarget((ASTNode) myCopy.get(i)), null);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tListRewrite listRewrite = rewriter.getListRewrite(typeDeclaration, TypeDeclaration.BODY_DECLARATIONS_PROPERTY);", "-\t\t\t\tList bodyDeclarations = typeDeclaration.bodyDeclarations();", "-\t\t\t\tfinal int length = bodyDeclarations.size();", "-\t\t\t\tif (length > 1) {", "-\t\t\t\t\tfinal List myCopy = new ArrayList();", "-\t\t\t\t\tmyCopy.addAll(bodyDeclarations);", "-\t\t\t\t\tCollections.sort(myCopy, SortElementsOperation.this.comparator);", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tlistRewrite.replace((ASTNode) bodyDeclarations.get(i), rewriter.createMoveTarget((ASTNode) myCopy.get(i)), null);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tListRewrite listRewrite = rewriter.getListRewrite(enumDeclaration, EnumDeclaration.BODY_DECLARATIONS_PROPERTY);", "-\t\t\t\tList bodyDeclarations = enumDeclaration.bodyDeclarations();", "-\t\t\t\tint length = bodyDeclarations.size();", "-\t\t\t\tif (length > 1) {", "-\t\t\t\t\tfinal List myCopy = new ArrayList();", "-\t\t\t\t\tmyCopy.addAll(bodyDeclarations);", "-\t\t\t\t\tCollections.sort(myCopy, SortElementsOperation.this.comparator);", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tlistRewrite.replace((ASTNode) bodyDeclarations.get(i), rewriter.createMoveTarget((ASTNode) myCopy.get(i)), null);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tlistRewrite = rewriter.getListRewrite(enumDeclaration, EnumDeclaration.ENUM_CONSTANTS_PROPERTY);", "-\t\t\t\tList enumConstants = enumDeclaration.enumConstants();", "-\t\t\t\tlength = enumConstants.size();", "-\t\t\t\tif (length > 1) {", "-\t\t\t\t\tfinal List myCopy = new ArrayList();", "-\t\t\t\t\tmyCopy.addAll(enumConstants);", "-\t\t\t\t\tCollections.sort(myCopy, SortElementsOperation.this.comparator);", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tlistRewrite.replace((ASTNode) enumConstants.get(i), rewriter.createMoveTarget((ASTNode) myCopy.get(i)), null);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t});\t\t\t", "-\t\tTextEdit edits = rewriter.rewriteAST(document, null);", "-\t\tif (needPositionsMapping) {", "-\t\t\tfor (int i = 0, max = markers.length; i < max; i++) {", "-\t\t\t\tinsert(edits, markers[i]);", "-\t\t\t}", "-\t\t}", "-\t\ttry {", "-\t\t\tedits.apply(document, TextEdit.UPDATE_REGIONS);", "-\t\t\tgeneratedSource = document.get();", "-\t\t\tif (needPositionsMapping) {", "-\t\t\t\tfor (int i= 0, max = markers.length; i < max; i++) {", "-\t\t\t\t\tthis.positions[i]= markers[i].getOffset();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (BadLocationException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t\treturn generatedSource;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f18357e1292437efd3728a2a343faef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SortElementsOperation.java", "commitBeforeChange": "d9f5208ccd9842b7305a76e615fa0b04487a1a33", "commitAfterChange": "9ac3d3205dd69d72df25a75c1584224d5519622d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate String processElement(ICompilationUnit unit, int[] positionsToMap, char[] source)", "signatureAfterChange": " \tprivate String processElement(ICompilationUnit unit, char[] source)", "diff": ["-\tprivate String processElement(ICompilationUnit unit, int[] positionsToMap, char[] source) {", "+\tprivate String processElement(ICompilationUnit unit, char[] source) {", "-\t\tSortElementBuilder builder = new SortElementBuilder(source, positionsToMap, this.comparator, options);", "-\t\tSourceElementParser parser = new SourceElementParser(builder,", "-\t\t\tProblemFactory.getProblemFactory(Locale.getDefault()), options, true/*report local declarations*/, true/*optimize string literals*/);", "+\t\tASTParser parser = ASTParser.newParser(AST.JLS3);", "+\t\tparser.setCompilerOptions(options.getMap());", "+\t\tparser.setSource(source);", "+\t\tparser.setKind(ASTParser.K_COMPILATION_UNIT);", "+\t\tparser.setResolveBindings(false);", "+\t\torg.eclipse.jdt.core.dom.CompilationUnit domUnit = (org.eclipse.jdt.core.dom.CompilationUnit) parser.createAST(null);", "+\t\tfinal AST localAst = domUnit.getAST();", "+\t\tfinal ASTRewrite rewriter = ASTRewrite.create(localAst);", "+\t\tRangeMarker[] markers = null;", "-\t\tif (unit.exists()) {", "-\t\t\tPackageFragment packageFragment = (PackageFragment)unit.getAncestor(IJavaElement.PACKAGE_FRAGMENT);", "-\t\t\tchar[][] expectedPackageName = null;", "-\t\t\tif (packageFragment != null){", "-\t\t\t\texpectedPackageName = Util.toCharArrays(packageFragment.names);", "+\t\tfinal boolean needPositionsMapping = this.positions != null;", "+\t\tif (needPositionsMapping) {", "+\t\t\tmarkers = new RangeMarker[this.positions.length];", "+\t\t\tfor (int i= 0; i < this.positions.length; i++) {", "+\t\t\t\tmarkers[i]= new RangeMarker(this.positions[i], 0);", "-\t\t\tparser.parseCompilationUnit(", "-\t\t\t\tnew BasicCompilationUnit(", "-\t\t\t\t\tsource,", "-\t\t\t\t\texpectedPackageName,", "-\t\t\t\t\tunit.getElementName(),", "-\t\t\t\t\tunit),", "-\t\t\t\tfalse/*diet parse*/);", "-\t\t} else {", "-\t\t\tparser.parseCompilationUnit(", "-\t\t\t\tnew BasicCompilationUnit(", "-\t\t\t\t\tsource,", "-\t\t\t\t\tnull,", "-\t\t\t\t\t\"\",//$NON-NLS-1$", "-\t\t\t\t\tunit.getJavaProject()),//$NON-NLS-1$", "-\t\t\t\tfalse/*diet parse*/);", "-\t\treturn builder.getSource();", "+\t\tString generatedSource = new String(source);", "+\t\tDocument document = new Document(generatedSource);", "+\t\tdomUnit.accept(new ASTVisitor() {", "+\t\t\tpublic boolean visit(org.eclipse.jdt.core.dom.CompilationUnit compilationUnit) {", "+\t\t\t\tListRewrite listRewrite = rewriter.getListRewrite(compilationUnit, org.eclipse.jdt.core.dom.CompilationUnit.TYPES_PROPERTY);", "+\t\t\t\tList myCopy = new ArrayList();", "+\t\t\t\tList types = compilationUnit.types();", "+\t\t\t\tfinal int length = types.size();", "+\t\t\t\tmyCopy.addAll(types);", "+\t\t\t\tCollections.sort(myCopy, SortElementsOperation.this.comparator);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tlistRewrite.replace((ASTNode) types.get(i), rewriter.createMoveTarget((ASTNode) myCopy.get(i)), null);", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tpublic boolean visit(AnnotationTypeDeclaration annotationTypeDeclaration) {", "+\t\t\t\tListRewrite listRewrite = rewriter.getListRewrite(annotationTypeDeclaration, AnnotationTypeDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\t\t\tList myCopy = new ArrayList();", "+\t\t\t\tList bodyDeclarations = annotationTypeDeclaration.bodyDeclarations();", "+\t\t\t\tfinal int length = bodyDeclarations.size();", "+\t\t\t\tmyCopy.addAll(bodyDeclarations);", "+\t\t\t\tCollections.sort(myCopy, SortElementsOperation.this.comparator);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tlistRewrite.replace((ASTNode) bodyDeclarations.get(i), rewriter.createMoveTarget((ASTNode) myCopy.get(i)), null);", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\t\t}", "+", "+\t\t\tpublic boolean visit(AnonymousClassDeclaration anonymousClassDeclaration) {", "+\t\t\t\tListRewrite listRewrite = rewriter.getListRewrite(anonymousClassDeclaration, AnonymousClassDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\t\t\tList myCopy = new ArrayList();", "+\t\t\t\tList bodyDeclarations = anonymousClassDeclaration.bodyDeclarations();", "+\t\t\t\tfinal int length = bodyDeclarations.size();", "+\t\t\t\tmyCopy.addAll(bodyDeclarations);", "+\t\t\t\tCollections.sort(myCopy, SortElementsOperation.this.comparator);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tlistRewrite.replace((ASTNode) bodyDeclarations.get(i), rewriter.createMoveTarget((ASTNode) myCopy.get(i)), null);", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\t", "+\t\t\tpublic boolean visit(TypeDeclaration typeDeclaration) {", "+\t\t\t\tListRewrite listRewrite = rewriter.getListRewrite(typeDeclaration, TypeDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\t\t\tList myCopy = new ArrayList();", "+\t\t\t\tList bodyDeclarations = typeDeclaration.bodyDeclarations();", "+\t\t\t\tfinal int length = bodyDeclarations.size();", "+\t\t\t\tmyCopy.addAll(bodyDeclarations);", "+\t\t\t\tCollections.sort(myCopy, SortElementsOperation.this.comparator);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tlistRewrite.replace((ASTNode) bodyDeclarations.get(i), rewriter.createMoveTarget((ASTNode) myCopy.get(i)), null);", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\t\t}", "+", "+\t\t\tpublic boolean visit(EnumDeclaration enumDeclaration) {", "+\t\t\t\tListRewrite listRewrite = rewriter.getListRewrite(enumDeclaration, EnumDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\t\t\tList myCopy = new ArrayList();", "+\t\t\t\tList bodyDeclarations = enumDeclaration.bodyDeclarations();", "+\t\t\t\tint length = bodyDeclarations.size();", "+\t\t\t\tmyCopy.addAll(bodyDeclarations);", "+\t\t\t\tCollections.sort(myCopy, SortElementsOperation.this.comparator);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tlistRewrite.replace((ASTNode) bodyDeclarations.get(i), rewriter.createMoveTarget((ASTNode) myCopy.get(i)), null);", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tlistRewrite = rewriter.getListRewrite(enumDeclaration, EnumDeclaration.ENUM_CONSTANTS_PROPERTY);", "+\t\t\t\tmyCopy = new ArrayList();", "+\t\t\t\tList enumConstants = enumDeclaration.enumConstants();", "+\t\t\t\tlength = enumConstants.size();", "+\t\t\t\tmyCopy.addAll(enumConstants);", "+\t\t\t\tCollections.sort(myCopy, SortElementsOperation.this.comparator);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tlistRewrite.replace((ASTNode) enumConstants.get(i), rewriter.createMoveTarget((ASTNode) myCopy.get(i)), null);", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t});\t\t\t", "+\t\tTextEdit edits = rewriter.rewriteAST(document, null);", "+\t\tif (needPositionsMapping) {", "+\t\t\tfor (int i = 0, max = markers.length; i < max; i++) {", "+\t\t\t\tinsert(edits, markers[i]);", "+\t\t\t}", "+\t\t}", "+\t\ttry {", "+\t\t\tedits.apply(document, TextEdit.UPDATE_REGIONS);", "+\t\t\tgeneratedSource = document.get();", "+\t\t\tif (needPositionsMapping) {", "+\t\t\t\tfor (int i= 0, max = markers.length; i < max; i++) {", "+\t\t\t\t\tthis.positions[i]= markers[i].getOffset();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (BadLocationException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\treturn generatedSource;"]}], "num": 29700}
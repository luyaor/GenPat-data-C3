{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54a9752c0c293678a913d60dcef19691", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f59c76fc26e9d20ec69c5481f3a9572", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "077229504ccd77d256450ca55e2c9e212f3f94d4", "commitAfterChange": "2d87d31e89bc602d928b4671e91e81b8af28ddbe", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void collectSubstitutes(Scope currentScope, TypeBinding otherType, Map substitutes, int constraint)", "signatureAfterChange": " public void collectSubstitutes(Scope currentScope, TypeBinding actualType, Map substitutes, int constraint)", "diff": ["-public void collectSubstitutes(Scope currentScope, TypeBinding otherType, Map substitutes, int constraint) {", "+public void collectSubstitutes(Scope currentScope, TypeBinding actualType, Map substitutes, int constraint) {", "-\tif (otherType == NullBinding) return;", "-\tif (!(otherType instanceof ReferenceBinding)) return;", "+\tif (actualType == NullBinding) return;", "+\tif (!(actualType instanceof ReferenceBinding)) return;", "-\tReferenceBinding equivalent, otherEquivalent;", "+\tReferenceBinding formalEquivalent, actualEquivalent;", "-\t\t\tequivalent = this;", "-\t        otherEquivalent = ((ReferenceBinding)otherType).findSuperTypeWithSameErasure(this);", "-\t        if (otherEquivalent == null) return;", "+\t\t\tformalEquivalent = this;", "+\t        actualEquivalent = ((ReferenceBinding)actualType).findSuperTypeWithSameErasure(this);", "+\t        if (actualEquivalent == null) return;", "-\t        equivalent = this.findSuperTypeWithSameErasure(otherType);", "-\t        if (equivalent == null) return;", "-\t        otherEquivalent = (ReferenceBinding) otherType;", "+\t        formalEquivalent = this.findSuperTypeWithSameErasure(actualType);", "+\t        if (formalEquivalent == null) return;", "+\t        actualEquivalent = (ReferenceBinding) actualType;", "-    TypeBinding[] elements;", "-    switch (equivalent.kind()) {", "+    TypeBinding[] formalArguments;", "+    switch (formalEquivalent.kind()) {", "-    \t\telements = equivalent.typeVariables();", "+    \t\tformalArguments = formalEquivalent.typeVariables();", "-    \t\telements = ((ParameterizedTypeBinding)equivalent).arguments;", "+    \t\tformalArguments = ((ParameterizedTypeBinding)formalEquivalent).arguments;", "-    TypeBinding[] otherElements;", "-    switch (otherEquivalent.kind()) {", "+    TypeBinding[] actualArguments;", "+    switch (actualEquivalent.kind()) {", "-    \t\totherElements = otherEquivalent.typeVariables();", "+    \t\tactualArguments = actualEquivalent.typeVariables();", "-    \t\totherElements = ((ParameterizedTypeBinding)otherEquivalent).arguments;", "+    \t\tactualArguments = ((ParameterizedTypeBinding)actualEquivalent).arguments;", "-    for (int i = 0, length = elements.length; i < length; i++) {", "-    \tTypeBinding otherElement = otherElements[i];", "-        elements[i].collectSubstitutes(scope, otherElements[i], substitutes, otherElement.isWildcard() ? constraint : CONSTRAINT_EQUAL);", "+    for (int i = 0, length = formalArguments.length; i < length; i++) {", "+    \tTypeBinding formalArgument = formalArguments[i];", "+        formalArgument.collectSubstitutes(scope, actualArguments[i], substitutes, formalArgument.isWildcard() ? constraint : CONSTRAINT_EQUAL);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98d44072b0c72cd69e654759c11456ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "077229504ccd77d256450ca55e2c9e212f3f94d4", "commitAfterChange": "2d87d31e89bc602d928b4671e91e81b8af28ddbe", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "diff": ["-\tpublic void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint) {", "+\tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint) {", "-\t\tif (otherType == NullBinding) return;", "+\t\tif (actualType == NullBinding) return;", "-\t\tif (!(otherType instanceof ReferenceBinding)) return;", "-\t\tReferenceBinding equivalent, otherEquivalent;", "+\t\tif (!(actualType instanceof ReferenceBinding)) return;", "+\t\tReferenceBinding formalEquivalent, actualEquivalent;", "-\t\t\t\tequivalent = this;", "-\t\t        otherEquivalent = ((ReferenceBinding)otherType).findSuperTypeWithSameErasure(this.type);", "-\t\t        if (otherEquivalent == null) return;", "+\t\t\t\tformalEquivalent = this;", "+\t\t        actualEquivalent = ((ReferenceBinding)actualType).findSuperTypeWithSameErasure(this.type);", "+\t\t        if (actualEquivalent == null) return;", "-\t\t        equivalent = this.findSuperTypeWithSameErasure(otherType);", "-\t\t        if (equivalent == null) return;", "-\t\t        otherEquivalent = (ReferenceBinding) otherType;", "+\t\t        formalEquivalent = this.findSuperTypeWithSameErasure(actualType);", "+\t\t        if (formalEquivalent == null) return;", "+\t\t        actualEquivalent = (ReferenceBinding) actualType;", "-        TypeBinding[] elements;", "-        switch (equivalent.kind()) {", "+        TypeBinding[] formalArguments;", "+        switch (formalEquivalent.kind()) {", "-        \t\telements = equivalent.typeVariables();", "+        \t\tformalArguments = formalEquivalent.typeVariables();", "-        \t\telements = ((ParameterizedTypeBinding)equivalent).arguments;", "+        \t\tformalArguments = ((ParameterizedTypeBinding)formalEquivalent).arguments;", "-        TypeBinding[] otherElements;", "-        switch (otherEquivalent.kind()) {", "+        TypeBinding[] actualArguments;", "+        switch (actualEquivalent.kind()) {", "-        \t\totherElements = otherEquivalent.typeVariables();", "+        \t\tactualArguments = actualEquivalent.typeVariables();", "-        \t\totherElements = ((ParameterizedTypeBinding)otherEquivalent).arguments;", "+        \t\tactualArguments = ((ParameterizedTypeBinding)actualEquivalent).arguments;", "-        for (int i = 0, length = elements.length; i < length; i++) {", "-        \tTypeBinding element = elements[i];", "-            element.collectSubstitutes(scope, otherElements[i], substitutes, element.isWildcard() ? constraint : CONSTRAINT_EQUAL);", "+        for (int i = 0, length = formalArguments.length; i < length; i++) {", "+        \tTypeBinding formalArgument = formalArguments[i];", "+            formalArgument.collectSubstitutes(scope, actualArguments[i], substitutes, formalArgument.isWildcard() ? constraint : CONSTRAINT_EQUAL);"]}], "num": 28066}
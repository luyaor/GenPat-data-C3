{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19e93fe22a41758b7d205217cd838341", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "111c8cacbca976813be746706bc2a44d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public Compiler(\r \tINameEnvironment environment, \r \tIErrorHandlingPolicy policy, \r \tConfigurableOption[] settings, \r \tICompilerRequestor requestor, \r \tIProblemFactory problemFactory)", "signatureAfterChange": "\r \tpublic Compiler(\r \t\tINameEnvironment environment,\r \t\tIErrorHandlingPolicy policy,\r \t\tConfigurableOption[] settings,\r \t\tICompilerRequestor requestor,\r \t\tIProblemFactory problemFactory)", "diff": ["- */\r", "-public Compiler(\r", "-\tINameEnvironment environment, \r", "-\tIErrorHandlingPolicy policy, \r", "-\tConfigurableOption[] settings, \r", "-\tICompilerRequestor requestor, \r", "-\tIProblemFactory problemFactory) {\r", "+\t */\r", "+\tpublic Compiler(\r", "+\t\tINameEnvironment environment,\r", "+\t\tIErrorHandlingPolicy policy,\r", "+\t\tConfigurableOption[] settings,\r", "+\t\tICompilerRequestor requestor,\r", "+\t\tIProblemFactory problemFactory) {\r", "-\t// create a problem handler given a handling policy\r", "-\tthis.options = new CompilerOptions(settings);\r", "-\tthis.requestor = requestor;\r", "-\tthis.problemReporter = \r", "-\t\tnew ProblemReporter(\r", "-\t\t\tpolicy, \r", "-\t\t\tthis.options, \r", "-\t\t\tproblemFactory);\r", "-\tthis.lookupEnvironment = new LookupEnvironment(this, options, problemReporter, environment);\r", "-\tthis.parser = \r", "-\t\tnew Parser(problemReporter, this.options.parseLiteralExpressionsAsConstants); \r", "-}\r", "+\t\t// create a problem handler given a handling policy\r", "+\t\tthis.options = new CompilerOptions(settings);\r", "+\t\tthis.requestor = requestor;\r", "+\t\tthis.problemReporter =\r", "+\t\t\tnew ProblemReporter(policy, this.options, problemFactory);\r", "+\t\tthis.lookupEnvironment =\r", "+\t\t\tnew LookupEnvironment(this, options, problemReporter, environment);\r", "+\t\tthis.parser =\r", "+\t\t\tnew Parser(\r", "+\t\t\t\tproblemReporter, \r", "+\t\t\t\tthis.options.parseLiteralExpressionsAsConstants, \r", "+\t\t\t\tthis.options.getAssertMode());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bf0a2e0d503d245f4ae292c1dc454c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public Compiler(\r \tINameEnvironment environment, \r \tIErrorHandlingPolicy policy, \r \tConfigurableOption[] settings, \r \tICompilerRequestor requestor, \r \tIProblemFactory problemFactory)", "signatureAfterChange": "\r \tpublic Compiler(\r \t\tINameEnvironment environment,\r \t\tIErrorHandlingPolicy policy,\r \t\tConfigurableOption[] settings,\r \t\tICompilerRequestor requestor,\r \t\tIProblemFactory problemFactory)", "diff": ["- */\r", "-public Compiler(\r", "-\tINameEnvironment environment, \r", "-\tIErrorHandlingPolicy policy, \r", "-\tConfigurableOption[] settings, \r", "-\tICompilerRequestor requestor, \r", "-\tIProblemFactory problemFactory) {\r", "+\t */\r", "+\tpublic Compiler(\r", "+\t\tINameEnvironment environment,\r", "+\t\tIErrorHandlingPolicy policy,\r", "+\t\tConfigurableOption[] settings,\r", "+\t\tICompilerRequestor requestor,\r", "+\t\tIProblemFactory problemFactory) {\r", "-\t// create a problem handler given a handling policy\r", "-\tthis.options = new CompilerOptions(settings);\r", "-\tthis.requestor = requestor;\r", "-\tthis.problemReporter = \r", "-\t\tnew ProblemReporter(\r", "-\t\t\tpolicy, \r", "-\t\t\tthis.options, \r", "-\t\t\tproblemFactory);\r", "-\tthis.lookupEnvironment = new LookupEnvironment(this, options, problemReporter, environment);\r", "-\tthis.parser = \r", "-\t\tnew Parser(problemReporter, this.options.parseLiteralExpressionsAsConstants); \r", "-}\r", "+\t\t// create a problem handler given a handling policy\r", "+\t\tthis.options = new CompilerOptions(settings);\r", "+\t\tthis.requestor = requestor;\r", "+\t\tthis.problemReporter =\r", "+\t\t\tnew ProblemReporter(policy, this.options, problemFactory);\r", "+\t\tthis.lookupEnvironment =\r", "+\t\t\tnew LookupEnvironment(this, options, problemReporter, environment);\r", "+\t\tthis.parser =\r", "+\t\t\tnew Parser(\r", "+\t\t\t\tproblemReporter, \r", "+\t\t\t\tthis.options.parseLiteralExpressionsAsConstants, \r", "+\t\t\t\tthis.options.getAssertMode());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e202c8ed6ddd889933502d8a4e42240", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public Compiler(\r \tINameEnvironment environment, \r \tIErrorHandlingPolicy policy, \r \tConfigurableOption[] settings, \r \tICompilerRequestor requestor, \r \tIProblemFactory problemFactory)", "signatureAfterChange": "\r \tpublic Compiler(\r \t\tINameEnvironment environment,\r \t\tIErrorHandlingPolicy policy,\r \t\tConfigurableOption[] settings,\r \t\tICompilerRequestor requestor,\r \t\tIProblemFactory problemFactory)", "diff": ["- */\r", "-public Compiler(\r", "-\tINameEnvironment environment, \r", "-\tIErrorHandlingPolicy policy, \r", "-\tConfigurableOption[] settings, \r", "-\tICompilerRequestor requestor, \r", "-\tIProblemFactory problemFactory) {\r", "+\t */\r", "+\tpublic Compiler(\r", "+\t\tINameEnvironment environment,\r", "+\t\tIErrorHandlingPolicy policy,\r", "+\t\tConfigurableOption[] settings,\r", "+\t\tICompilerRequestor requestor,\r", "+\t\tIProblemFactory problemFactory) {\r", "-\t// create a problem handler given a handling policy\r", "-\tthis.options = new CompilerOptions(settings);\r", "-\tthis.requestor = requestor;\r", "-\tthis.problemReporter = \r", "-\t\tnew ProblemReporter(\r", "-\t\t\tpolicy, \r", "-\t\t\tthis.options, \r", "-\t\t\tproblemFactory);\r", "-\tthis.lookupEnvironment = new LookupEnvironment(this, options, problemReporter, environment);\r", "-\tthis.parser = \r", "-\t\tnew Parser(problemReporter, this.options.parseLiteralExpressionsAsConstants); \r", "-}\r", "+\t\t// create a problem handler given a handling policy\r", "+\t\tthis.options = new CompilerOptions(settings);\r", "+\t\tthis.requestor = requestor;\r", "+\t\tthis.problemReporter =\r", "+\t\t\tnew ProblemReporter(policy, this.options, problemFactory);\r", "+\t\tthis.lookupEnvironment =\r", "+\t\t\tnew LookupEnvironment(this, options, problemReporter, environment);\r", "+\t\tthis.parser =\r", "+\t\t\tnew Parser(\r", "+\t\t\t\tproblemReporter, \r", "+\t\t\t\tthis.options.parseLiteralExpressionsAsConstants, \r", "+\t\t\t\tthis.options.getAssertMode());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbb0e9ce87dd4a0cd8b7a19793fc951d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public Compiler(\r \tINameEnvironment environment, \r \tIErrorHandlingPolicy policy, \r \tConfigurableOption[] settings, \r \tICompilerRequestor requestor, \r \tIProblemFactory problemFactory)", "signatureAfterChange": "\r \tpublic Compiler(\r \t\tINameEnvironment environment,\r \t\tIErrorHandlingPolicy policy,\r \t\tConfigurableOption[] settings,\r \t\tICompilerRequestor requestor,\r \t\tIProblemFactory problemFactory)", "diff": ["- */\r", "-public Compiler(\r", "-\tINameEnvironment environment, \r", "-\tIErrorHandlingPolicy policy, \r", "-\tConfigurableOption[] settings, \r", "-\tICompilerRequestor requestor, \r", "-\tIProblemFactory problemFactory) {\r", "+\t */\r", "+\tpublic Compiler(\r", "+\t\tINameEnvironment environment,\r", "+\t\tIErrorHandlingPolicy policy,\r", "+\t\tConfigurableOption[] settings,\r", "+\t\tICompilerRequestor requestor,\r", "+\t\tIProblemFactory problemFactory) {\r", "-\t// create a problem handler given a handling policy\r", "-\tthis.options = new CompilerOptions(settings);\r", "-\tthis.requestor = requestor;\r", "-\tthis.problemReporter = \r", "-\t\tnew ProblemReporter(\r", "-\t\t\tpolicy, \r", "-\t\t\tthis.options, \r", "-\t\t\tproblemFactory);\r", "-\tthis.lookupEnvironment = new LookupEnvironment(this, options, problemReporter, environment);\r", "-\tthis.parser = \r", "-\t\tnew Parser(problemReporter, this.options.parseLiteralExpressionsAsConstants); \r", "-}\r", "+\t\t// create a problem handler given a handling policy\r", "+\t\tthis.options = new CompilerOptions(settings);\r", "+\t\tthis.requestor = requestor;\r", "+\t\tthis.problemReporter =\r", "+\t\t\tnew ProblemReporter(policy, this.options, problemFactory);\r", "+\t\tthis.lookupEnvironment =\r", "+\t\t\tnew LookupEnvironment(this, options, problemReporter, environment);\r", "+\t\tthis.parser =\r", "+\t\t\tnew Parser(\r", "+\t\t\t\tproblemReporter, \r", "+\t\t\t\tthis.options.parseLiteralExpressionsAsConstants, \r", "+\t\t\t\tthis.options.getAssertMode());\r"]}], "num": 56166}
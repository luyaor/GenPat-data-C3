{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57c694426e2478f697941ad4a9f8b8ba", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e85fd2567b23c375d166b8982a5cba3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "808ee1989aa546fef406f77c37a96f979df5219f", "commitAfterChange": "2528937997399f978f8c04c6800f46f957dbd27f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static final boolean camelCaseMatch(String pattern, int patternStart, int patternEnd, String name, int nameStart, int nameEnd)", "signatureAfterChange": " public static final boolean camelCaseMatch(String pattern, String name, boolean prefixMatch)", "diff": ["+ */", "+public static final boolean camelCaseMatch(String pattern, String name, boolean prefixMatch) {", "+\tif (pattern == null)", "+\t\treturn true; // null pattern is equivalent to '*'", "+\tif (name == null)", "+\t\treturn false; // null name cannot match", "+", "+\treturn camelCaseMatch(pattern, 0, pattern.length(), name, 0, name.length(), prefixMatch);", "+}", "-\treturn CharOperation.camelCaseMatch(pattern.toCharArray(), patternStart, patternEnd, name.toCharArray(), nameStart, nameEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e96304e08db0a989b58a4461c21913d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "808ee1989aa546fef406f77c37a96f979df5219f", "commitAfterChange": "2528937997399f978f8c04c6800f46f957dbd27f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public static final boolean camelCaseMatch(char[] pattern, int patternStart, int patternEnd, char[] name, int nameStart, int nameEnd)", "signatureAfterChange": " public static final boolean camelCaseMatch(char[] pattern, char[] name, boolean prefixMatch)", "diff": ["+ */", "+public static final boolean camelCaseMatch(char[] pattern, char[] name, boolean prefixMatch) {", "+\tif (pattern == null)", "+\t\treturn true; // null pattern is equivalent to '*'", "+\tif (name == null)", "+\t\treturn false; // null name cannot match", "+", "+\treturn camelCaseMatch(pattern, 0, pattern.length, name, 0, name.length, prefixMatch);", "+}", "-\t\tif (iPattern == patternEnd) {", "-\t\t\t// We have exhausted pattern, so it's a match", "-\t\t\treturn true;"]}], "num": 25304}
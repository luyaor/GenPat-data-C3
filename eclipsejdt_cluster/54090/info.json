{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c748e9ca9754d867d1cbe74e9c06eab", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64897ef31da6feedd7dedc8c828cfcf6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public int literalIndex(float key)", "signatureAfterChange": " public int literalIndex(float key)", "diff": ["-\t//Retrieve the index from the cache", "-\tint index;", "-\t// lazy initialization for base type caches", "-\t// If it is null, initialize it, otherwise use it", "-\tif (floatCache == null) {", "-\t\tfloatCache = new FloatCache(FLOAT_INITIAL_SIZE);", "-\t}", "-\tif ((index = floatCache.putIfAbsent(key, this.currentIndex)) < 0) {", "-\t\tif ((index = -index) > 0xFFFF){", "-\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t}", "-\t\tthis.currentIndex++;", "-\t\t// Write the float constant entry into the constant pool", "-\t\t// First add the tag", "-\t\twriteU1(FloatTag);", "-\t\t// Then add the 4 bytes representing the float", "-\t\tint temp = java.lang.Float.floatToIntBits(key);", "-\t\tif (currentOffset + 4 >= poolContent.length) {", "-\t\t\tresizePoolContents(4);", "-\t\t}", "-\t\tpoolContent[currentOffset++] = (byte) (temp >>> 24);", "-\t\tpoolContent[currentOffset++] = (byte) (temp >>> 16);", "-\t\tpoolContent[currentOffset++] = (byte) (temp >>> 8);", "-\t\tpoolContent[currentOffset++] = (byte) temp;", "-\t}", "-\treturn index;", "+    //Retrieve the index from the cache", "+    int index;", "+    // lazy initialization for base type caches", "+    // If it is null, initialize it, otherwise use it", "+    if (floatCache == null) {", "+        floatCache = new FloatCache(FLOAT_INITIAL_SIZE);", "+    }", "+    if ((index = floatCache.putIfAbsent(key, this.currentIndex)) < 0) {", "+        if ((index = -index) > 0xFFFF){", "+            this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "+        }", "+        this.currentIndex++;", "+        // Write the float constant entry into the constant pool", "+        // First add the tag", "+        int length = this.offsets.length;", "+        if (length <= index) {", "+        \t// resize", "+            System.arraycopy(this.offsets, 0, (this.offsets = new int[index * 2]), 0, length);", "+        }", "+        this.offsets[index] = this.currentOffset;", "+        writeU1(FloatTag);", "+        // Then add the 4 bytes representing the float", "+        int temp = java.lang.Float.floatToIntBits(key);", "+        if (currentOffset + 4 >= poolContent.length) {", "+            resizePoolContents(4);", "+        }", "+        poolContent[currentOffset++] = (byte) (temp >>> 24);", "+        poolContent[currentOffset++] = (byte) (temp >>> 16);", "+        poolContent[currentOffset++] = (byte) (temp >>> 8);", "+        poolContent[currentOffset++] = (byte) temp;", "+    }", "+    return index;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5d2d3eba0876d8f258af8b6bbc39e74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public int literalIndex(int key)", "signatureAfterChange": " public int literalIndex(int key)", "diff": ["-\t//Retrieve the index from the cache", "-\tint index;", "-\t// lazy initialization for base type caches", "-\t// If it is null, initialize it, otherwise use it", "-\tif (intCache == null) {", "-\t\tintCache = new IntegerCache(INT_INITIAL_SIZE);", "-\t}", "-\tif ((index = intCache.putIfAbsent(key, this.currentIndex)) < 0) {", "-\t\tthis.currentIndex++;", "-\t\tif ((index = -index) > 0xFFFF){", "-\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t}", "-\t// Write the integer constant entry into the constant pool", "-\t\t// First add the tag", "-\t\twriteU1(IntegerTag);", "-\t\t// Then add the 4 bytes representing the int", "-\t\tif (currentOffset + 4 >= poolContent.length) {", "-\t\t\tresizePoolContents(4);", "-\t\t}", "-\t\tpoolContent[currentOffset++] = (byte) (key >>> 24);", "-\t\tpoolContent[currentOffset++] = (byte) (key >>> 16);", "-\t\tpoolContent[currentOffset++] = (byte) (key >>> 8);", "-\t\tpoolContent[currentOffset++] = (byte) key;", "-\t}", "-\treturn index;", "+    //Retrieve the index from the cache", "+    int index;", "+    // lazy initialization for base type caches", "+    // If it is null, initialize it, otherwise use it", "+    if (intCache == null) {", "+        intCache = new IntegerCache(INT_INITIAL_SIZE);", "+    }", "+    if ((index = intCache.putIfAbsent(key, this.currentIndex)) < 0) {", "+        this.currentIndex++;", "+        if ((index = -index) > 0xFFFF){", "+            this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "+        }", "+ \t   // Write the integer constant entry into the constant pool", "+        // First add the tag", "+        int length = this.offsets.length;", "+        if (length <= index) {", "+        \t// resize", "+            System.arraycopy(this.offsets, 0, (this.offsets = new int[index * 2]), 0, length);", "+        }", "+        this.offsets[index] = this.currentOffset;", "+        writeU1(IntegerTag);", "+        // Then add the 4 bytes representing the int", "+        if (currentOffset + 4 >= poolContent.length) {", "+            resizePoolContents(4);", "+        }", "+        poolContent[currentOffset++] = (byte) (key >>> 24);", "+        poolContent[currentOffset++] = (byte) (key >>> 16);", "+        poolContent[currentOffset++] = (byte) (key >>> 8);", "+        poolContent[currentOffset++] = (byte) key;", "+    }", "+    return index;"]}], "num": 54090}
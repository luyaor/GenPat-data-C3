{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d4e28951b93389acf041c0c17a96ce9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86e3f2da7e3784da272cf33da6bc4f19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementsImpl.java", "commitBeforeChange": "4c8a3ba34c720dda98e8d56ba71f0361efbe740b", "commitAfterChange": "c06cfa4791f8eb98381a7dd55dd6950dbcddf37c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t@Override \tpublic void printElements(Writer w, Element... elements)", "signatureAfterChange": " \t@Override \tpublic void printElements(Writer w, Element... elements)", "diff": ["-\t\t// TODO Auto-generated method stub", "-", "+\t\tString lineSeparator = System.getProperty(\"line.separator\"); //$NON-NLS-1$", "+\t\tfor (Element element : elements) {", "+\t\t\ttry {", "+\t\t\t\tw.write(element.toString());", "+\t\t\t\tw.write(lineSeparator);", "+\t\t\t} catch (IOException e) {", "+\t\t\t\t// ignore", "+\t\t\t}", "+\t\t}", "+\t\ttry {", "+\t\t\tw.flush();", "+\t\t} catch (IOException e) {", "+\t\t\t// ignore", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e45db43b0d3dd73c4aa2d6bc5a53111", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/JarClassLoader.java", "commitBeforeChange": "a6fb7155fd890e70fc93ff099a2bfa78beffa3e9", "commitAfterChange": "dade23c0ca1cb5b996dfae1d1cfc189d06d41a6f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic synchronized void close()", "signatureAfterChange": " \t \tpublic synchronized void close()", "diff": ["-\t\tif (_openCounter < 1) {", "-\t\t\tthrow new IllegalStateException(\"Attempt to close an already closed JarClassLoader\"); //$NON-NLS-1$", "-\t\t}", "-\t\t_openCounter--;", "-\t\tif (_openCounter == 0) {", "-\t\t\tfor (JarFile jar : _jars) {", "-\t\t\t\ttry {", "-\t\t\t\t\tjar.close();", "-\t\t\t\t}", "-\t\t\t\tcatch (IOException ioe) {", "-\t\t\t\t\tAptPlugin.log(ioe, \"Failed to close jar: \" + jar); //$NON-NLS-1$", "-\t\t\t\t}", "+\t\tif (! _open) return;", "+\t\t_open = false;", "+\t\t", "+\t\tfor (JarCLInputStream st : _openStreams) {", "+\t\t\ttry {", "+\t\t\t\tst.close();", "-\t\t\t_jars = null;", "+\t\t\tcatch (IOException ioe) {", "+\t\t\t\tAptPlugin.log(ioe, \"Failed to close stream\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t_openStreams = null;", "+", "+\t\tfor (JarFile jar : _jars) {", "+\t\t\ttry {", "+\t\t\t\tjar.close();", "+\t\t\t}", "+\t\t\tcatch (IOException ioe) {", "+\t\t\t\tAptPlugin.log(ioe, \"Failed to close jar: \" + jar); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "+\t\t_jars = null;", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6daf26bf24970744126f5d9558161d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "358d5f2f1d5c0a4dbde7d6e9af26746a4ddfb56c", "commitAfterChange": "ef1fa4748405f7f68a3b0c31fcd95f825ba17c29", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\t\tIClassFile classFile, \t\t\tboolean resolveBindings)", "signatureAfterChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\t\tIClassFile classFile, \t\t\tboolean resolveBindings)", "diff": ["-\t\t// TODO: (olivier) missing implementation", "-\t\tthrow new IllegalArgumentException();", "+\t\t\t\ttry {", "+\t\t\t\t\tString source = classFile.getSource();", "+\t\t\t\t\tif (resolveBindings) {", "+\t\t\t\t\t\treturn AST.parseCompilationUnit(source.toCharArray());", "+\t\t\t\t\t}", "+\t\t\t\t\treturn AST.parseCompilationUnit(", "+\t\t\t\t\t\tsource.toCharArray(),", "+\t\t\t\t\t\tclassFile.getElementName(),", "+\t\t\t\t\t\tclassFile.getJavaProject());", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\t\t}"]}], "num": 29910}
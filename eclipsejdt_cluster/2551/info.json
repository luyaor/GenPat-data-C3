{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a1b896607ed0ee6cbbc0b22b75abf71", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "863b68a4c20fbcf4bc84e450db280da8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "c40952dd3377ae996ee676dcac3fcb724d57d010", "commitAfterChange": "1283becde4269d4bd1b131ede84504f893ae6981", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate void verifyTypeReference(Expression reference, Expression typeReference, Scope scope, boolean source15, ReferenceBinding resolvedType, int modifiers)", "signatureAfterChange": "  \tprivate void verifyTypeReference(Expression reference, Expression typeReference, Scope scope, boolean source15, ReferenceBinding resolvedType, int modifiers)", "diff": ["+\t\t\t\tif (typeReference instanceof JavadocQualifiedTypeReference && !scope.isDefinedInSameUnit(resolvedType)) {", "+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=222188", "+\t\t\t\t\t// partially qualified references from a different CU should be warned", "+\t\t\t\t\tchar[][] typeRefName = ((JavadocQualifiedTypeReference) typeReference).getTypeName();", "+\t\t\t\t\tint skipLength = 0;", "+\t\t\t\t\tif (topLevelScope.getCurrentPackage() == resolvedType.getPackage()", "+\t\t\t\t\t\t\t&& typeRefName.length < computedCompoundName.length) {", "+\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=221539: references can be partially qualified", "+\t\t\t\t\t\t// in same package and hence if the package name is not given, ignore package name check", "+\t\t\t\t\t\tskipLength = resolvedType.fPackage.compoundName.length;", "+\t\t\t\t\t}", "+\t\t\t\t\tboolean valid = true;", "+\t\t\t\t\tif (typeRefName.length == computedCompoundName.length - skipLength) {", "+\t\t\t\t\t\tcheckQualification: for (int i = 0; i < typeRefName.length; i++) {", "+\t\t\t\t\t\t\tif (!CharOperation.equals(typeRefName[i], computedCompoundName[i + skipLength])) {", "+\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t\tbreak checkQualification;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t}", "+\t\t\t\t\t// report invalid reference", "+\t\t\t\t\tif (!valid) {", "+\t\t\t\t\t\tif (scopeModifiers == -1) scopeModifiers = scope.getDeclarationModifiers();", "+\t\t\t\t\t\tscope.problemReporter().javadocInvalidMemberTypeQualification(typeReference.sourceStart, typeReference.sourceEnd, scopeModifiers);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c5ba7b20c9345a25670255dab3a09d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "86ee968d8acf90a0a75c72085f72a3416b02186d", "commitAfterChange": "7915a529d4dab8b70a0cdb9189fc342b9112ed8e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["+\tif (this.receiver.isSuper() && this.actualReceiverType.isInterface()) {", "+\t\t// 15.12.3 (Java 8)", "+\t\tReferenceBinding enclosingType = scope.enclosingReceiverType();", "+\t\tMethodBinding otherMethod = scope.getMethod(enclosingType.superclass(), this.selector, argumentTypes, this);", "+\t\tif (scope.checkAppropriate(this.binding, otherMethod, this)) {", "+\t\t\tReferenceBinding[] superInterfaces = enclosingType.superInterfaces();", "+\t\t\tif (superInterfaces != null) {", "+\t\t\t\tfor (int i = 0; i < superInterfaces.length; i++) {", "+\t\t\t\t\totherMethod = scope.getMethod(superInterfaces[i], this.selector, argumentTypes, this);", "+\t\t\t\t\tif (!scope.checkAppropriate(this.binding, otherMethod, this))", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 2551}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a490fac5356782d799af626fba14626", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d87e6a0916ce3426a62cf399ddb67ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "c4baf766be166b04f595eec5cebbd2a64f399daa", "commitAfterChange": "6574ecf5c4b5647220e5c6028073411e3f107ad7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\tpublic TypeBinding resolveType(BlockScope blockScope) {", "-\t\tsuper.resolveType(blockScope);", "+\t// Structured to report as many errors as possible in bail out situations.", "+\tpublic TypeBinding resolveType(BlockScope scope) {", "+\t\tsuper.resolveType(scope);", "-\t\tthis.receiverType = this.lhs.resolveType(blockScope);", "+\t\tif (isConstructorReference()) {", "+\t\t\tthis.lhs.bits |= ASTNode.IgnoreRawTypeCheck; // raw types in constructor references are to be treated as though <> were specified.", "+\t\t}", "+\t\tTypeBinding lhsType = this.lhs.resolveType(scope);", "+\t\tif (this.typeArguments != null) {", "+\t\t\tint length = this.typeArguments.length;", "+\t\t\tboolean argHasError = scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_5;", "+\t\t\tthis.resolvedTypeArguments = new TypeBinding[length];", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tTypeReference typeReference = this.typeArguments[i];", "+\t\t\t\tif ((this.resolvedTypeArguments[i] = typeReference.resolveType(scope, true /* check bounds*/)) == null) {", "+\t\t\t\t\targHasError = true;", "+\t\t\t\t}", "+\t\t\t\tif (argHasError && typeReference instanceof Wildcard) { // resolveType on wildcard always return null above, resolveTypeArgument is the real workhorse.", "+\t\t\t\t\tscope.problemReporter().illegalUsageOfWildcard(typeReference);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (argHasError) {", "+\t\t\t\treturn this.resolvedType;", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tif (lhsType == null || !lhsType.isValidBinding()) ", "+\t\t\treturn null;", "+\t\t", "+\t\tfinal TypeBinding[] descriptorParameters = this.descriptor != null ? this.descriptor.parameters : Binding.NO_PARAMETERS;", "+\t\tfinal char[] selector = this.method != null ? this.method.token : CharOperation.NO_CHAR;", "+\t\tif (lhsType.isBaseType()) {", "+\t\t\tscope.problemReporter().errorNoMethodFor(this.lhs, lhsType, selector, this.descriptor != null ? descriptorParameters : Binding.NO_TYPES);", "+\t\t\treturn null;", "+\t\t}", "+\t\t", "+\t\tif (isConstructorReference() && !lhsType.canBeInstantiated()) {", "+\t\t\tscope.problemReporter().cannotInstantiate(this.lhs, lhsType);", "+\t\t\treturn null;", "+\t\t}", "+\t\t", "+\t\t/* 15.28: \"It is a compile-time error if a method reference of the form super :: NonWildTypeArgumentsopt Identifier or of the form ", "+\t\t   TypeName . super :: NonWildTypeArgumentsopt Identifier occurs in a static context.\": This is nop since the primary when it resolves", "+\t\t   itself will complain automatically.", "+\t\t", "+\t\t   15.28: \"The immediately enclosing instance of an inner class instance (15.9.2) must be provided for a constructor reference by a lexically ", "+\t\t   enclosing instance of this (8.1.3)\", we will actually implement this check in code generation. Emulation path computation will fail if there", "+\t\t   is no suitable enclosing instance. While this could be pulled up to here, leaving it to code generation is more consistent with Java 5,6,7 ", "+\t\t   modus operandi.", "+\t\t*/", "+\t\t", "+\t\t// handle the special case of array construction first.", "+        final int parametersLength = descriptorParameters.length;", "+        if (isConstructorReference() && lhsType.isArrayType()) {", "+        \tfinal TypeBinding leafComponentType = lhsType.leafComponentType();", "+\t\t\tif (leafComponentType.isParameterizedType()) {", "+        \t\tscope.problemReporter().illegalGenericArray(leafComponentType, this);", "+        \t\treturn null;", "+        \t}", "+        \tif (parametersLength != 1 || scope.parameterCompatibilityLevel(descriptorParameters[0], TypeBinding.INT) == Scope.NOT_COMPATIBLE) {", "+        \t\tscope.problemReporter().invalidArrayConstructorReference(this, lhsType, descriptorParameters);", "+        \t\treturn null;", "+        \t}", "+        \tif (!lhsType.isCompatibleWith(this.descriptor.returnType)) {", "+        \t\tscope.problemReporter().constructedArrayIncompatible(this, lhsType, this.descriptor.returnType);", "+        \t\treturn null;", "+        \t}", "+        \treturn this.resolvedType; // No binding construction possible. Code generator will have to conjure up a rabbit.", "+        }", "+\t\t", "+        this.receiverType = lhsType;", "+\t\t", "-\t\t\t\tif (this.receiverType.isRawType())", "-\t\t\t\t\tblockScope.problemReporter().rawTypeReference(this.lhs, this.receiverType);", "+\t\t\t\tif (isMethodReference() && this.receiverType.isRawType())", "+\t\t\t\t\tscope.problemReporter().rawTypeReference(this.lhs, this.receiverType);", "-\t\tif (this.typeArguments != null) {", "-\t\t\tint length = this.typeArguments.length;", "-\t\t\tboolean argHasError = blockScope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_5;", "-\t\t\tthis.resolvedTypeArguments = new TypeBinding[length];", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tTypeReference typeReference = this.typeArguments[i];", "-\t\t\t\tif ((this.resolvedTypeArguments[i] = typeReference.resolveType(blockScope, true /* check bounds*/)) == null) {", "-\t\t\t\t\targHasError = true;", "-\t\t\t\t}", "-\t\t\t\tif (argHasError && typeReference instanceof Wildcard) {", "-\t\t\t\t\tblockScope.problemReporter().illegalUsageOfWildcard(typeReference);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tif (this.receiverType == null || !this.receiverType.isValidBinding()) ", "-\t\t\treturn this.resolvedType;", "-\t\t", "-\t\tif (this.receiverType.isBaseType()) {", "-\t\t\tblockScope.problemReporter().errorNoMethodFor(this.lhs, this.receiverType, this.method.token, this.descriptor != null ? this.descriptor.parameters : Binding.NO_TYPES);", "+\t\t/* For Reference expressions unlike other call sites, we always have a receiver _type_ since LHS of :: cannot be empty. ", "+\t\t   LHS's resolved type == actual receiver type. All code below only when a valid descriptor is available.", "+\t\t */", "+        if (this.descriptor == null || !this.descriptor.isValidBinding())", "+        \treturn null;", "+        ", "+        // 15.28.1", "+        final boolean isMethodReference = isMethodReference();", "+        MethodBinding someMethod = isMethodReference ? scope.getMethod(this.receiverType, selector, descriptorParameters, this) :", "+        \t\t\t\t\t\t\t\t\t\t\t       scope.getConstructor((ReferenceBinding) this.receiverType, descriptorParameters, this);", "+        ", "+        if (someMethod != null && someMethod.isValidBinding()) {", "+        \tfinal boolean isStatic = someMethod.isStatic();", "+        \tif (isStatic && (this.haveReceiver || this.receiverType instanceof ParameterizedTypeBinding)) {", "+    \t\t\tscope.problemReporter().methodMustBeAccessedStatically(this, someMethod);", "+    \t\t\treturn null;", "+    \t\t}", "+        \tif (!this.haveReceiver) {", "+        \t\tif (!isStatic && !someMethod.isConstructor()) {", "+        \t\t\tscope.problemReporter().methodMustBeAccessedWithInstance(this, someMethod);", "+        \t\t\treturn null;", "+        \t\t}", "+        \t} ", "+        }", "+        ", "+        MethodBinding anotherMethod = null;", "+        if (!this.haveReceiver && isMethodReference && parametersLength > 0) {", "+        \tTypeBinding superType = descriptorParameters[0].findSuperTypeOriginatingFrom(this.receiverType);", "+        \tif (superType != null) {", "+        \t\tTypeBinding typeToSearch = this.receiverType.isRawType() ? superType : this.receiverType;", "+        \t\tTypeBinding [] parameters = Binding.NO_PARAMETERS;", "+        \t\tif (parametersLength > 1) {", "+        \t\t\tparameters = new TypeBinding[parametersLength - 1];", "+        \t\t\tSystem.arraycopy(descriptorParameters, 1, parameters, 0, parametersLength - 1);", "+        \t\t}", "+        \t\tanotherMethod = scope.getMethod(typeToSearch, selector, parameters, this);", "+        \t}", "+        \tif (anotherMethod != null && anotherMethod.isValidBinding() && anotherMethod.isStatic()) {", "+        \t\tscope.problemReporter().methodMustBeAccessedStatically(this, anotherMethod);", "+        \t\treturn null;", "+        \t}", "+        }", "+        ", "+        if (someMethod != null && someMethod.isValidBinding() && anotherMethod != null && anotherMethod.isValidBinding()) {", "+        \tscope.problemReporter().methodReferenceSwingsBothWays(this, anotherMethod, someMethod);", "+        \treturn null;", "+        }", "+", "+        this.binding = someMethod != null && someMethod.isValidBinding() ? someMethod : anotherMethod != null && anotherMethod.isValidBinding() ? anotherMethod : null;", "+        if (this.binding == null) {", "+        \tscope.problemReporter().danglingReference(this, this.receiverType, selector, descriptorParameters);", "-\t\t}", "-\t\t", "-\t\tif (isConstructorReference() && !this.receiverType.canBeInstantiated()) {", "-\t\t\tblockScope.problemReporter().cannotInstantiate(this.lhs, this.receiverType);", "-\t\t\treturn this.resolvedType;", "-\t\t}", "-", "-", "-\t\treturn this.resolvedType;", "+        }", "+        ", "+        // See https://bugs.eclipse.org/bugs/show_bug.cgi?id=382350#c2, I.super::abstractMethod will be handled there.", "+        ", "+        // OK, we have a compile time declaration, see if it passes muster.", "+        TypeBinding [] methodExceptions = this.binding.thrownExceptions;", "+        TypeBinding [] kosherExceptions = this.descriptor.thrownExceptions;", "+        boolean throwsTantrum = false;", "+        next: for (int i = 0, iMax = methodExceptions.length; i < iMax; i++) {", "+        \tfor (int j = 0, jMax = kosherExceptions.length; j < jMax; j++) {", "+        \t\tif (methodExceptions[i].isCompatibleWith(kosherExceptions[j], scope))", "+        \t\t\tcontinue next;", "+        \t}", "+        \tscope.problemReporter().unhandledException(methodExceptions[i], this);", "+        \tthrowsTantrum = true;", "+        }", "+        ", "+        if (this.binding.isAbstract()) {", "+        \tif (this.lhs instanceof SuperReference || this.lhs instanceof QualifiedSuperReference) {", "+        \t\tscope.problemReporter().cannotReferToAbstractMethod(this, this.binding);", "+        \t\treturn null;", "+        \t}", "+        }", "+        if (throwsTantrum)", "+        \treturn null;", "+ ", "+        return this.resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edfd29d6d3de9ddc5df1626a1945a009", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "21098f5e40f4c2eaaad3e643b94e7cf0a54113c9", "commitAfterChange": "643b63ca50a9d0dc58104cdf47074d124c87dafa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo)", "signatureAfterChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "diff": ["- */", "-public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo) {", "-\tanalyseCode(classScope, initializerFlowContext, flowInfo, FlowInfo.REACHABLE);", "-}"]}], "num": 37430}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62e4b7ea9e0356b9c82cc76d27c34096", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f18ca153bf5a50a69d4e566a2d76e58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CopyMoveResourcesTests.java", "commitBeforeChange": "ac348213720090e8c973890decef046772847214", "commitAfterChange": "32aaa515ff5df3a5c0b4fe7c5798b8e987579c0b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, IProgressMonitor monitor) throws JavaModelException", "diff": ["+\tDeltaListener listener = new DeltaListener();", "-\t\tstartDeltas();", "+\t\tstartDeltas(listener);", "-\t\t\t\tdestDelta = this.deltaListener.getDeltaFor(moved.getParent());", "+\t\t\t\tdestDelta = listener.getDeltaFor(moved.getParent());", "-\t\t\t\tdestDelta = this.deltaListener.getDeltaFor(destinations[i], true);", "+\t\t\t\tdestDelta = listener.getDeltaFor(destinations[i], true);", "-\t\t\t\tIJavaElementDelta sourceDelta = this.deltaListener.getDeltaFor(element, true);", "+\t\t\t\tIJavaElementDelta sourceDelta = listener.getDeltaFor(element, true);", "-\t\tstopDeltas();", "+\t\tstopDeltas(listener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9e648ccaa5ddc96f17cb6c4a813a9d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CopyMoveTests.java", "commitBeforeChange": "ac348213720090e8c973890decef046772847214", "commitAfterChange": "32aaa515ff5df3a5c0b4fe7c5798b8e987579c0b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, boolean checkDelta, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, boolean checkDelta, IProgressMonitor monitor) throws JavaModelException", "diff": ["-", "+\tDeltaListener listener = new DeltaListener();", "-\t\tif(checkDelta)\tstartDeltas();", "+\t\tif(checkDelta)\tstartDeltas(listener);", "-\t\t\t\t\tdestDelta = this.deltaListener.getDeltaFor(moved.getParent());", "+\t\t\t\t\tdestDelta = listener.getDeltaFor(moved.getParent());", "-\t\t\t\t\tdestDelta = this.deltaListener.getDeltaFor(destinations[i], true);", "+\t\t\t\t\tdestDelta = listener.getDeltaFor(destinations[i], true);", "-\t\t\t\t\tIJavaElementDelta sourceDelta= this.deltaListener.getDeltaFor(element, false);", "+\t\t\t\t\tIJavaElementDelta sourceDelta= listener.getDeltaFor(element, false);", "-\t\tif(checkDelta)\tstopDeltas();", "+\t\tif(checkDelta)\tstopDeltas(listener);"]}], "num": 17133}
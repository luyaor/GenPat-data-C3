{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ff099a47db33cc3ab4be474ec774551", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c1b06e3ef36fa2424e49ece31b5c9f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void computeFolderChildren(IContainer folder, boolean isIncluded, String[] pkgName, ArrayList vChildren, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "signatureAfterChange": " protected void computeFolderChildren(IContainer folder, boolean isIncluded, String[] pkgName, ArrayList vChildren, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "diff": ["-\t\tfor (int i = 0, max = members.length; i < max; i++) {", "-\t\t\tIResource member = members[i];", "-\t\t\tString memberName = member.getName();", "+\t\tint length = members.length;", "+\t\tif (length >0) {", "+\t\t\tString sourceLevel = javaProject.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\tString complianceLevel = javaProject.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tIResource member = members[i];", "+\t\t\t\tString memberName = member.getName();", "-\t\t\tswitch(member.getType()) {", "+\t\t\t\tswitch(member.getType()) {", "-\t\t\t    case IResource.FOLDER:", "-\t\t\t\t\t// recurse into sub folders even even parent not included as a sub folder could be included", "-\t\t\t\t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=65637)", "-\t\t\t\t\tif (Util.isValidFolderNameForPackage(memberName)) {", "-\t\t\t\t\t\t// eliminate binary output only if nested inside direct subfolders", "-\t\t\t\t\t\tif (javaProject.contains(member)) {", "-\t\t\t\t\t\t\tString[] newNames = Util.arrayConcat(pkgName, manager.intern(memberName));", "-\t\t\t\t\t\t\tboolean isMemberIncluded = !Util.isExcluded(member, inclusionPatterns, exclusionPatterns);", "-\t\t\t\t\t\t\tcomputeFolderChildren((IFolder) member, isMemberIncluded, newNames, vChildren, inclusionPatterns, exclusionPatterns);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t    \tbreak;", "-\t\t\t    case IResource.FILE:", "-\t\t\t        // inclusion filter may only include files, in which case we still want to include the immediate parent package (lazily)", "-\t\t\t\t\tif (!hasIncluded", "-\t\t\t\t\t\t\t\t&& Util.isValidCompilationUnitName(memberName)", "+\t\t\t    \tcase IResource.FOLDER:", "+\t\t\t    \t\t// recurse into sub folders even even parent not included as a sub folder could be included", "+\t\t\t    \t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=65637)", "+\t\t\t    \t\tif (Util.isValidFolderNameForPackage(memberName, sourceLevel, complianceLevel)) {", "+\t\t\t    \t\t\t// eliminate binary output only if nested inside direct subfolders", "+\t\t\t    \t\t\tif (javaProject.contains(member)) {", "+\t\t\t    \t\t\t\tString[] newNames = Util.arrayConcat(pkgName, manager.intern(memberName));", "+\t\t\t    \t\t\t\tboolean isMemberIncluded = !Util.isExcluded(member, inclusionPatterns, exclusionPatterns);", "+\t\t\t    \t\t\t\tcomputeFolderChildren((IFolder) member, isMemberIncluded, newNames, vChildren, inclusionPatterns, exclusionPatterns);", "+\t\t\t    \t\t\t}", "+\t\t\t    \t\t}", "+\t\t\t    \t\tbreak;", "+\t\t\t    \tcase IResource.FILE:", "+\t\t\t    \t\t// inclusion filter may only include files, in which case we still want to include the immediate parent package (lazily)", "+\t\t\t    \t\tif (!hasIncluded", "+\t\t\t    \t\t\t\t&& Util.isValidCompilationUnitName(memberName, sourceLevel, complianceLevel)", "-\t\t\t\t\t\thasIncluded = true;", "-\t\t\t\t\t    IPackageFragment pkg = getPackageFragment(pkgName);", "-\t\t\t\t\t    vChildren.add(pkg); ", "-\t\t\t\t\t}", "-\t\t\t        break;", "+\t\t\t    \t\t\thasIncluded = true;", "+\t\t\t    \t\t\tIPackageFragment pkg = getPackageFragment(pkgName);", "+\t\t\t    \t\t\tvChildren.add(pkg); ", "+\t\t\t    \t\t}", "+\t\t\t    \t\tbreak;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee4d595fb99aaf78bbef521dcc5f7566", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["-\t\tfor (int i = 0, max = members.length; i < max; i++) {", "-\t\t\tIResource child = members[i];", "-\t\t\tif (child.getType() != IResource.FOLDER", "-\t\t\t\t\t&& !Util.isExcluded(child, inclusionPatterns, exclusionPatterns)) {", "-\t\t\t\tIJavaElement childElement;", "-\t\t\t\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isValidCompilationUnitName(child.getName())) {", "-\t\t\t\t\tchildElement = new CompilationUnit(this, child.getName(), DefaultWorkingCopyOwner.PRIMARY);", "-\t\t\t\t\tvChildren.add(childElement);", "-\t\t\t\t} else if (kind == IPackageFragmentRoot.K_BINARY && Util.isValidClassFileName(child.getName())) {", "-\t\t\t\t\tchildElement = getClassFile(child.getName());", "-\t\t\t\t\tvChildren.add(childElement);", "+\t\tint length = members.length;", "+\t\tif (length > 0) {", "+\t\t\tIJavaProject project = getJavaProject();", "+\t\t\tString sourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\tString complianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tIResource child = members[i];", "+\t\t\t\tif (child.getType() != IResource.FOLDER", "+\t\t\t\t\t\t&& !Util.isExcluded(child, inclusionPatterns, exclusionPatterns)) {", "+\t\t\t\t\tIJavaElement childElement;", "+\t\t\t\t\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isValidCompilationUnitName(child.getName(), sourceLevel, complianceLevel)) {", "+\t\t\t\t\t\tchildElement = new CompilationUnit(this, child.getName(), DefaultWorkingCopyOwner.PRIMARY);", "+\t\t\t\t\t\tvChildren.add(childElement);", "+\t\t\t\t\t} else if (kind == IPackageFragmentRoot.K_BINARY && Util.isValidClassFileName(child.getName(), sourceLevel, complianceLevel)) {", "+\t\t\t\t\t\tchildElement = getClassFile(child.getName());", "+\t\t\t\t\t\tvChildren.add(childElement);", "+\t\t\t\t\t}"]}], "num": 34907}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "06107f9316ee3874b289b77d54a89b3f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3672a38551373f11603cf568617114b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "6c050fdd50da181a73c24a3d84f6766ee118b95b", "commitAfterChange": "f13a5d135f0d6d82ec59c09667ba7900fd57b604", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 68, "signatureBeforeChange": " public void test0046_strings_concatenation()", "signatureAfterChange": " public void test0121_strings_concatenation()", "diff": ["-// null analysis -- strings concatenation", "-public void test0046_strings_concatenation() {", "-\tthis.runConformTest(", "-\t\tnew String[] {", "-\t\t\t\"X.java\",", "-\t\t\t\"public class X {\\n\" + ", "-\t\t\t\"  String foo(String s1, String s2) {\\n\" + ", "-\t\t\t\"    if (s1 == null) { /* */ };\\n\" +", "-\t\t\t\"    s1 += s2;\\n\" + ", "-\t\t\t\"    return s1;\\n\" + ", "-\t\t\t\"  }\\n\" + ", "-\t\t\t\"}\\n\"},", "-\t\t\"\");", "-}", "+// null analysis -- strings concatenation", "+public void test0121_strings_concatenation() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  String foo(String s1, String s2) {\\n\" + ", "+\t\t\t\"    if (s1 == null) { /* */ };\\n\" +", "+\t\t\t\"    s1 += s2;\\n\" + ", "+\t\t\t\"    return s1;\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e01e5775796d2dc8ab52b3609f4be6ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "6c050fdd50da181a73c24a3d84f6766ee118b95b", "commitAfterChange": "f13a5d135f0d6d82ec59c09667ba7900fd57b604", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 67, "signatureBeforeChange": " public void test0045_strings_concatenation()", "signatureAfterChange": " public void test0120_strings_concatenation()", "diff": ["-//       extraneous call to toString() -- and remove it before releasing.", "-public void test0045_strings_concatenation() {", "-\tthis.runConformTest(", "-\t\tnew String[] {", "-\t\t\t\"X.java\",", "-\t\t\t\"public class X {\\n\" + ", "-\t\t\t\"  String foo(String s1, String s2) {\\n\" + ", "-\t\t\t\"    if (s1 == null) { /* */ };\\n\" +", "-\t\t\t\"    return s1 + s2;\\n\" + ", "-\t\t\t\"  }\\n\" + ", "-\t\t\t\"}\\n\"},", "-\t\t\"\");", "-}", "+//       extraneous call to toString() -- and remove it before releasing.", "+public void test0120_strings_concatenation() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  String foo(String s1, String s2) {\\n\" + ", "+\t\t\t\"    if (s1 == null) { /* */ };\\n\" +", "+\t\t\t\"    return s1 + s2;\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"\");", "+}"]}], "num": 36852}
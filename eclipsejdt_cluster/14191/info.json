{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5391760433834269127a0c3093ad05d3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39883053418fdccb8e46628c26744058", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic static SearchPattern createPattern(IJavaElement element, int limitTo, int matchRule)", "signatureAfterChange": " \tpublic static SearchPattern createPattern(IJavaElement element, int limitTo, int matchRule)", "diff": ["-\t\t\t\t\tif (CharOperation.indexOf(Signature.C_GENERIC_START, signature) < 0) {", "-\t\t\t\t\t\ttypeSignature = null;", "-\t\t\t\t\t}", "+\t\t\t\t// Create field pattern", "+\t\t\t\tboolean findDeclarations = false;", "+\t\t\t\tboolean readAccess = false;", "+\t\t\t\tboolean writeAccess = false;", "-\t\t\t\t\t\tsearchPattern = ", "-\t\t\t\t\t\t\tnew FieldPattern(", "-\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\tname, ", "-\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\t\t\t\ttypeSignature,", "-\t\t\t\t\t\t\t\tmatchRule);", "+\t\t\t\t\t\tfindDeclarations = true;", "-\t\t\t\t\t\tsearchPattern = ", "-\t\t\t\t\t\t\tnew FieldPattern(", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\ttrue, // read access", "-\t\t\t\t\t\t\t\ttrue, // write access", "-\t\t\t\t\t\t\t\tname, ", "-\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\t\t\t\ttypeSignature,", "-\t\t\t\t\t\t\t\tmatchRule);", "+\t\t\t\t\t\treadAccess = true;", "+\t\t\t\t\t\twriteAccess = true;", "-\t\t\t\t\t\tsearchPattern = ", "-\t\t\t\t\t\t\tnew FieldPattern(", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\ttrue, // read access only", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\tname, ", "-\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\t\t\t\ttypeSignature,", "-\t\t\t\t\t\t\t\tmatchRule);", "+\t\t\t\t\t\treadAccess = true;", "-\t\t\t\t\t\tsearchPattern = ", "-\t\t\t\t\t\t\tnew FieldPattern(", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\ttrue, // write access only", "-\t\t\t\t\t\t\t\tname, ", "-\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\t\t\t\ttypeSignature,", "-\t\t\t\t\t\t\t\tmatchRule);", "+\t\t\t\t\t\twriteAccess = true;", "-\t\t\t\t\t\tsearchPattern =", "-\t\t\t\t\t\t\tnew FieldPattern(", "-\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\ttrue, // read access", "-\t\t\t\t\t\t\t\ttrue, // write access", "-\t\t\t\t\t\t\t\tname, ", "-\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\t\t\t\ttypeSignature,", "-\t\t\t\t\t\t\t\tmatchRule);", "+\t\t\t\t\t\tfindDeclarations = true;", "+\t\t\t\t\t\treadAccess = true;", "+\t\t\t\t\t\twriteAccess = true;", "+\t\t\t\tsearchPattern = ", "+\t\t\t\t\tnew FieldPattern(", "+\t\t\t\t\t\tfindDeclarations,", "+\t\t\t\t\t\treadAccess,", "+\t\t\t\t\t\twriteAccess,", "+\t\t\t\t\t\tname, ", "+\t\t\t\t\t\tdeclaringQualification, ", "+\t\t\t\t\t\tdeclaringSimpleName, ", "+\t\t\t\t\t\ttypeQualification, ", "+\t\t\t\t\t\ttypeSimpleName,", "+\t\t\t\t\t\ttypeSignature,", "+\t\t\t\t\t\tmatchRule);", "-\t\t\t\t\t\t\tfalse, // does not need signature", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\tString returnSignature;", "-\t\t\t\t\tString returnType = Signature.toString(method.getReturnType()).replace('$', '.');", "-\t\t\t\t\tif ((lastDot = returnType.lastIndexOf('.')) == -1) {", "-\t\t\t\t\t\treturnSimpleName = returnType.toCharArray();", "+\t\t\t\t\treturnSignature = method.getReturnType();", "+\t\t\t\t\tchar[] signature = returnSignature.toCharArray();", "+\t\t\t\t\tchar[] returnErasure = Signature.toCharArray(Signature.getTypeErasure(signature));", "+\t\t\t\t\tCharOperation.replace(returnErasure, '$', '.');", "+\t\t\t\t\tif ((lastDot = CharOperation.lastIndexOf('.', returnErasure)) == -1) {", "+\t\t\t\t\t\treturnSimpleName = returnErasure;", "-\t\t\t\t\t\treturnSimpleName = returnType.substring(lastDot + 1).toCharArray();", "-\t\t\t\t\t\treturnQualification = method.isBinary()", "-\t\t\t\t\t\t\t? returnType.substring(0, lastDot).toCharArray()", "+\t\t\t\t\t\treturnSimpleName = CharOperation.subarray(returnErasure, lastDot + 1, returnErasure.length);", "+\t\t\t\t\t\treturnQualification = CharOperation.subarray(returnErasure, 0, lastDot);", "+\t\t\t\t\t\tif (!method.isBinary()) {", "-\t\t\t\t\t\t\t: CharOperation.concat(IIndexConstants.ONE_STAR, returnType.substring(0, lastDot).toCharArray());", "+\t\t\t\t\t\t\tCharOperation.concat(IIndexConstants.ONE_STAR, returnQualification);", "+\t\t\t\t\t\t}", "+\t\t\t\tString[] parameterSignatures = new String[paramCount];", "-\t\t\t\t\tString signature = Signature.toString(parameterTypes[i]).replace('$', '.');", "-\t\t\t\t\tif ((lastDot = signature.lastIndexOf('.')) == -1) {", "-\t\t\t\t\t\tparameterSimpleNames[i] = signature.toCharArray();", "+\t\t\t\t\tparameterSignatures[i] = parameterTypes[i];", "+\t\t\t\t\tchar[] signature = parameterSignatures[i].toCharArray();", "+\t\t\t\t\tchar[] paramErasure = Signature.toCharArray(Signature.getTypeErasure(signature));", "+\t\t\t\t\tCharOperation.replace(paramErasure, '$', '.');", "+\t\t\t\t\tif ((lastDot = CharOperation.lastIndexOf('.', paramErasure)) == -1) {", "+\t\t\t\t\t\tparameterSimpleNames[i] = paramErasure;", "-\t\t\t\t\t\tparameterSimpleNames[i] = signature.substring(lastDot + 1).toCharArray();", "-\t\t\t\t\t\tparameterQualifications[i] = method.isBinary()", "-\t\t\t\t\t\t\t? signature.substring(0, lastDot).toCharArray()", "+\t\t\t\t\t\tparameterSimpleNames[i] = CharOperation.subarray(paramErasure, lastDot + 1, paramErasure.length);", "+\t\t\t\t\t\tparameterQualifications[i] = CharOperation.subarray(paramErasure, 0, lastDot);", "+\t\t\t\t\t\tif (!method.isBinary()) {", "-\t\t\t\t\t\t\t: CharOperation.concat(IIndexConstants.ONE_STAR, signature.substring(0, lastDot).toCharArray());", "+\t\t\t\t\t\t\tCharOperation.concat(IIndexConstants.ONE_STAR, parameterQualifications[i]);", "+\t\t\t\t\t\t}", "+", "+\t\t\t\t// Create method/constructor pattern", "+\t\t\t\tboolean findMethodDeclarations = true;", "+\t\t\t\tboolean findMethodReferences = true;", "-\t\t\t\t\t\tif (isConstructor) {", "-\t\t\t\t\t\t\tsearchPattern = ", "-\t\t\t\t\t\t\t\tnew ConstructorPattern(", "-\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\t\tparameterQualifications, ", "-\t\t\t\t\t\t\t\t\tparameterSimpleNames,", "-\t\t\t\t\t\t\t\t\tvarargs,", "-\t\t\t\t\t\t\t\t\tmatchRule);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tsearchPattern = ", "-\t\t\t\t\t\t\t\tnew MethodPattern(", "-\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\tselector, ", "-\t\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\t\treturnQualification, ", "-\t\t\t\t\t\t\t\t\treturnSimpleName, ", "-\t\t\t\t\t\t\t\t\tparameterQualifications, ", "-\t\t\t\t\t\t\t\t\tparameterSimpleNames,", "-\t\t\t\t\t\t\t\t\tvarargs,", "-\t\t\t\t\t\t\t\t\tnull,", "-\t\t\t\t\t\t\t\t\tmatchRule);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tfindMethodReferences = false;", "-\t\t\t\t\t\tif (isConstructor) {", "-\t\t\t\t\t\t\tsearchPattern = ", "-\t\t\t\t\t\t\t\tnew ConstructorPattern(", "-\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\t\tparameterQualifications, ", "-\t\t\t\t\t\t\t\t\tparameterSimpleNames,", "-\t\t\t\t\t\t\t\t\tvarargs,", "-\t\t\t\t\t\t\t\t\tmatchRule);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tsearchPattern = ", "-\t\t\t\t\t\t\t\tnew MethodPattern(", "-\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\tselector, ", "-\t\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\t\treturnQualification, ", "-\t\t\t\t\t\t\t\t\treturnSimpleName, ", "-\t\t\t\t\t\t\t\t\tparameterQualifications, ", "-\t\t\t\t\t\t\t\t\tparameterSimpleNames,", "-\t\t\t\t\t\t\t\t\tvarargs,", "-\t\t\t\t\t\t\t\t\tmethod.getDeclaringType(),", "-\t\t\t\t\t\t\t\t\tmatchRule);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tfindMethodDeclarations = false;", "-\t\t\t\t\t\tif (isConstructor) {", "-\t\t\t\t\t\t\tsearchPattern =", "-\t\t\t\t\t\t\t\tnew ConstructorPattern(", "-\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\t\tparameterQualifications, ", "-\t\t\t\t\t\t\t\t\tparameterSimpleNames,", "-\t\t\t\t\t\t\t\t\tvarargs,", "-\t\t\t\t\t\t\t\t\tmatchRule);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tsearchPattern =", "-\t\t\t\t\t\t\t\tnew MethodPattern(", "-\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\tselector, ", "-\t\t\t\t\t\t\t\t\tdeclaringQualification, ", "-\t\t\t\t\t\t\t\t\tdeclaringSimpleName, ", "-\t\t\t\t\t\t\t\t\treturnQualification, ", "-\t\t\t\t\t\t\t\t\treturnSimpleName, ", "-\t\t\t\t\t\t\t\t\tparameterQualifications, ", "-\t\t\t\t\t\t\t\t\tparameterSimpleNames,", "-\t\t\t\t\t\t\t\t\tvarargs,", "-\t\t\t\t\t\t\t\t\tmethod.getDeclaringType(),", "-\t\t\t\t\t\t\t\t\tmatchRule);", "-\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (isConstructor) {", "+\t\t\t\t\tsearchPattern =", "+\t\t\t\t\t\tnew ConstructorPattern(", "+\t\t\t\t\t\t\tfindMethodDeclarations,", "+\t\t\t\t\t\t\tfindMethodReferences,", "+\t\t\t\t\t\t\tdeclaringSimpleName, ", "+\t\t\t\t\t\t\tdeclaringQualification, ", "+\t\t\t\t\t\t\tparameterQualifications, ", "+\t\t\t\t\t\t\tparameterSimpleNames,", "+\t\t\t\t\t\t\tparameterSignatures,", "+\t\t\t\t\t\t\tmethod,", "+\t\t\t\t\t\t\tvarargs,", "+\t\t\t\t\t\t\tmatchRule);", "+\t\t\t\t} else {", "+\t\t\t\t\tsearchPattern =", "+\t\t\t\t\t\tnew MethodPattern(", "+\t\t\t\t\t\t\tfindMethodDeclarations,", "+\t\t\t\t\t\t\tfindMethodReferences,", "+\t\t\t\t\t\t\tselector, ", "+\t\t\t\t\t\t\tdeclaringQualification, ", "+\t\t\t\t\t\t\tdeclaringSimpleName, ", "+\t\t\t\t\t\t\treturnQualification, ", "+\t\t\t\t\t\t\treturnSimpleName, ", "+\t\t\t\t\t\t\treturnSignature,", "+\t\t\t\t\t\t\tparameterQualifications, ", "+\t\t\t\t\t\t\tparameterSimpleNames,", "+\t\t\t\t\t\t\tparameterSignatures,", "+\t\t\t\t\t\t\tvarargs,", "+\t\t\t\t\t\t\tmethod,", "+\t\t\t\t\t\t\tmatchRule);", "-\t\t\t\tString signature = type instanceof ParameterizedSourceType ? ((ParameterizedSourceType) type).uniqueKey : null;", "-\t\t\t\t\t\t\ttrue, // need signature", "-\t\t\t\t\t\t\tsignature,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\ttype,", "-\t\t\t\tif (searchPattern == null) { // TODO (frederic) remove when new API IType.getParameterizedName() will be available", "-\t\t\t\t\tsearchPattern = new TypeReferencePattern(", "-\t\t\t\t\t\tCharOperation.concatWith(type.getPackageFragment().getElementName().toCharArray(), enclosingTypeNames(type), '.'), ", "-\t\t\t\t\t\ttype.getElementName().toCharArray(),", "-\t\t\t\t\t\ttype,", "-\t\t\t\t\t\tmatchRule);", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82868cd0529ce746ef01373d58f27e59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "88b7c7eb3469a024202ea445bb4a9f81206035c9", "commitAfterChange": "38981955f1b194aa266ea7fa397baf3099ab8081", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic static SearchPattern createPattern(IJavaElement element, int limitTo, int matchRule)", "signatureAfterChange": " \tpublic static SearchPattern createPattern(IJavaElement element, int limitTo, int matchRule)", "diff": ["+\t\tboolean ignoreDeclaringType = false;", "+\t\tboolean ignoreReturnType = false;", "+\t\tint maskedLimitTo = limitTo & ~(IJavaSearchConstants.IGNORE_DECLARING_TYPE+IJavaSearchConstants.IGNORE_RETURN_TYPE);", "+\t\tif (maskedLimitTo == IJavaSearchConstants.DECLARATIONS || maskedLimitTo == IJavaSearchConstants.ALL_OCCURRENCES) {", "+\t\t\tignoreDeclaringType = (limitTo & IJavaSearchConstants.IGNORE_DECLARING_TYPE) != 0;", "+\t\t\tignoreReturnType = (limitTo & IJavaSearchConstants.IGNORE_RETURN_TYPE) != 0;", "+\t\t}", "+\t\tchar[] declaringSimpleName = null;", "+\t\tchar[] declaringQualification = null;", "-\t\t\t\tIType declaringClass = field.getDeclaringType();", "-\t\t\t\tchar[] declaringSimpleName = declaringClass.getElementName().toCharArray();", "-\t\t\t\tchar[] declaringQualification = declaringClass.getPackageFragment().getElementName().toCharArray();", "-\t\t\t\tchar[][] enclosingNames = enclosingTypeNames(declaringClass);", "-\t\t\t\tif (enclosingNames.length > 0)", "-\t\t\t\t\tdeclaringQualification = CharOperation.concat(declaringQualification, CharOperation.concatWith(enclosingNames, '.'), '.');", "-\t\t\t\tchar[] name = field.getElementName().toCharArray();", "-\t\t\t\tchar[] typeSimpleName;", "-\t\t\t\tchar[] typeQualification;", "-\t\t\t\tString typeSignature;", "-\t\t\t\ttry {", "-\t\t\t\t\ttypeSignature = field.getTypeSignature();", "-\t\t\t\t\tchar[] signature = typeSignature.toCharArray();", "-\t\t\t\t\tchar[] typeErasure = Signature.toCharArray(Signature.getTypeErasure(signature));", "-\t\t\t\t\tCharOperation.replace(typeErasure, '$', '.');", "-\t\t\t\t\tif ((lastDot = CharOperation.lastIndexOf('.', typeErasure)) == -1) {", "-\t\t\t\t\t\ttypeSimpleName = typeErasure;", "-\t\t\t\t\t\ttypeQualification = null;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\ttypeSimpleName = CharOperation.subarray(typeErasure, lastDot + 1, typeErasure.length);", "-\t\t\t\t\t\ttypeQualification = CharOperation.subarray(typeErasure, 0, lastDot);", "-\t\t\t\t\t\tif (!field.isBinary()) {", "-\t\t\t\t\t\t\t// prefix with a '*' as the full qualification could be bigger (because of an import)", "-\t\t\t\t\t\t\tCharOperation.concat(IIndexConstants.ONE_STAR, typeQualification);", "-\t\t\t\t\t\t}", "+\t\t\t\tif (!ignoreDeclaringType) {", "+\t\t\t\t\tIType declaringClass = field.getDeclaringType();", "+\t\t\t\t\tdeclaringSimpleName = declaringClass.getElementName().toCharArray();", "+\t\t\t\t\tdeclaringQualification = declaringClass.getPackageFragment().getElementName().toCharArray();", "+\t\t\t\t\tchar[][] enclosingNames = enclosingTypeNames(declaringClass);", "+\t\t\t\t\tif (enclosingNames.length > 0) {", "+\t\t\t\t\t\tdeclaringQualification = CharOperation.concat(declaringQualification, CharOperation.concatWith(enclosingNames, '.'), '.');", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\tchar[] name = field.getElementName().toCharArray();", "+\t\t\t\tchar[] typeSimpleName = null;", "+\t\t\t\tchar[] typeQualification = null;", "+\t\t\t\tString typeSignature = null;", "+\t\t\t\tif (!ignoreReturnType) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\ttypeSignature = field.getTypeSignature();", "+\t\t\t\t\t\tchar[] signature = typeSignature.toCharArray();", "+\t\t\t\t\t\tchar[] typeErasure = Signature.toCharArray(Signature.getTypeErasure(signature));", "+\t\t\t\t\t\tCharOperation.replace(typeErasure, '$', '.');", "+\t\t\t\t\t\tif ((lastDot = CharOperation.lastIndexOf('.', typeErasure)) == -1) {", "+\t\t\t\t\t\t\ttypeSimpleName = typeErasure;", "+\t\t\t\t\t\t\ttypeQualification = null;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\ttypeSimpleName = CharOperation.subarray(typeErasure, lastDot + 1, typeErasure.length);", "+\t\t\t\t\t\t\ttypeQualification = CharOperation.subarray(typeErasure, 0, lastDot);", "+\t\t\t\t\t\t\tif (!field.isBinary()) {", "+\t\t\t\t\t\t\t\t// prefix with a '*' as the full qualification could be bigger (because of an import)", "+\t\t\t\t\t\t\t\tCharOperation.concat(IIndexConstants.ONE_STAR, typeQualification);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "-\t\t\t\tswitch (limitTo) {", "+\t\t\t\tswitch (maskedLimitTo) {", "-\t\t\t\t\tsearchPattern = createPackagePattern(elementName.substring(0, lastDot), limitTo, matchRule);", "+\t\t\t\t\tsearchPattern = createPackagePattern(elementName.substring(0, lastDot), maskedLimitTo, matchRule);", "-\t\t\t\t\t\t\tlimitTo,", "+\t\t\t\t\t\t\tmaskedLimitTo,", "-\t\t\t\tswitch (limitTo) {", "+\t\t\t\tswitch (maskedLimitTo) {", "-\t\t\t\tswitch (limitTo) {", "+\t\t\t\tswitch (maskedLimitTo) {", "-\t\t\t\tdeclaringClass = method.getDeclaringType();", "-\t\t\t\tdeclaringSimpleName = declaringClass.getElementName().toCharArray();", "-\t\t\t\tdeclaringQualification = declaringClass.getPackageFragment().getElementName().toCharArray();", "-\t\t\t\tenclosingNames = enclosingTypeNames(declaringClass);", "-\t\t\t\tif (enclosingNames.length > 0)", "-\t\t\t\t\tdeclaringQualification = CharOperation.concat(declaringQualification, CharOperation.concatWith(enclosingNames, '.'), '.');", "-\t\t\t\tchar[] selector = method.getElementName().toCharArray();", "-\t\t\t\tchar[] returnSimpleName;", "-\t\t\t\tchar[] returnQualification;", "-\t\t\t\tString returnSignature;", "-\t\t\t\ttry {", "-\t\t\t\t\treturnSignature = method.getReturnType();", "-\t\t\t\t\tchar[] signature = returnSignature.toCharArray();", "-\t\t\t\t\tchar[] returnErasure = Signature.toCharArray(Signature.getTypeErasure(signature));", "-\t\t\t\t\tCharOperation.replace(returnErasure, '$', '.');", "-\t\t\t\t\tif ((lastDot = CharOperation.lastIndexOf('.', returnErasure)) == -1) {", "-\t\t\t\t\t\treturnSimpleName = returnErasure;", "-\t\t\t\t\t\treturnQualification = null;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturnSimpleName = CharOperation.subarray(returnErasure, lastDot + 1, returnErasure.length);", "-\t\t\t\t\t\treturnQualification = CharOperation.subarray(returnErasure, 0, lastDot);", "-\t\t\t\t\t\tif (!method.isBinary()) {", "-\t\t\t\t\t\t\t// prefix with a '*' as the full qualification could be bigger (because of an import)", "-\t\t\t\t\t\t\tCharOperation.concat(IIndexConstants.ONE_STAR, returnQualification);", "-\t\t\t\t\t\t}", "+\t\t\t\tif (!ignoreDeclaringType) {", "+\t\t\t\t\tIType declaringClass = method.getDeclaringType();", "+\t\t\t\t\tdeclaringSimpleName = declaringClass.getElementName().toCharArray();", "+\t\t\t\t\tdeclaringQualification = declaringClass.getPackageFragment().getElementName().toCharArray();", "+\t\t\t\t\tchar[][] enclosingNames = enclosingTypeNames(declaringClass);", "+\t\t\t\t\tif (enclosingNames.length > 0) {", "+\t\t\t\t\t\tdeclaringQualification = CharOperation.concat(declaringQualification, CharOperation.concatWith(enclosingNames, '.'), '.');", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\tchar[] selector = method.getElementName().toCharArray();", "+\t\t\t\tchar[] returnSimpleName = null;", "+\t\t\t\tchar[] returnQualification = null;", "+\t\t\t\tString returnSignature = null;", "+\t\t\t\tif (!ignoreReturnType) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\treturnSignature = method.getReturnType();", "+\t\t\t\t\t\tchar[] signature = returnSignature.toCharArray();", "+\t\t\t\t\t\tchar[] returnErasure = Signature.toCharArray(Signature.getTypeErasure(signature));", "+\t\t\t\t\t\tCharOperation.replace(returnErasure, '$', '.');", "+\t\t\t\t\t\tif ((lastDot = CharOperation.lastIndexOf('.', returnErasure)) == -1) {", "+\t\t\t\t\t\t\treturnSimpleName = returnErasure;", "+\t\t\t\t\t\t\treturnQualification = null;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\treturnSimpleName = CharOperation.subarray(returnErasure, lastDot + 1, returnErasure.length);", "+\t\t\t\t\t\t\treturnQualification = CharOperation.subarray(returnErasure, 0, lastDot);", "+\t\t\t\t\t\t\tif (!method.isBinary()) {", "+\t\t\t\t\t\t\t\t// prefix with a '*' as the full qualification could be bigger (because of an import)", "+\t\t\t\t\t\t\t\tCharOperation.concat(IIndexConstants.ONE_STAR, returnQualification);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "-\t\t\t\tswitch (limitTo) {", "+\t\t\t\tswitch (maskedLimitTo) {", "-\t\t\t\t\t\t\tenclosingTypeNames(type),", "+\t\t\t\t\t\t\tignoreDeclaringType ? null : enclosingTypeNames(type),", "-\t\t\t\t\t\t\tlimitTo,", "+\t\t\t\t\t\t\tmaskedLimitTo,", "-\t\t\t\tsearchPattern = createPackagePattern(element.getElementName(), limitTo, matchRule);", "+\t\t\t\tsearchPattern = createPackagePattern(element.getElementName(), maskedLimitTo, matchRule);"]}], "num": 14191}
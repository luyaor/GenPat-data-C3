{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a683a9288023061d0e5665a43ad2060d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61b169f3a37f756bf0bdd864a4e1d927", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "de542d47e7857076ff550f4560e517bc0773f2ce", "commitAfterChange": "29901dd2faebfaef1b4d98d076ffc43db80ce6e9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void generateCompoundAssignment( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tExpression expression, \t\tint operator, \t\tint assignmentImplicitConversion, \t\tboolean valueRequired)", "signatureAfterChange": "  \tpublic void generateCompoundAssignment( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tExpression expression, \t\tint operator, \t\tint assignmentImplicitConversion, \t\tboolean valueRequired)", "diff": ["-\t\tif ((operationTypeID = (implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) == T_JavaLangString) {", "-\t\t    // no need for generic cast on previous #getfield since using Object string buffer methods.", "-\t\t\tcodeStream.generateStringConcatenationAppend(currentScope, null, expression);", "-\t\t} else {", "-\t\t\t// promote the array reference to the suitable operation type", "-\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t// generate the increment value (will by itself  be promoted to the operation value)", "-\t\t\tif (expression == IntLiteral.One) { // prefix operation", "-\t\t\t\tcodeStream.generateConstant(expression.constant, implicitConversion);", "-\t\t\t} else {", "-\t\t\t\texpression.generateCode(currentScope, codeStream, true);", "-\t\t\t}", "-\t\t\t// perform the operation", "-\t\t\tcodeStream.sendOperator(operator, operationTypeID);", "-\t\t\t// cast the value back to the array reference type", "-\t\t\tcodeStream.generateImplicitConversion(assignmentImplicitConversion);", "+\t\tswitch(operationTypeID = (implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) {", "+\t\t\tcase T_JavaLangString :", "+\t\t\tcase T_JavaLangObject :", "+\t\t\tcase T_undefined :", "+\t\t\t\tcodeStream.generateStringConcatenationAppend(currentScope, null, expression);", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\t// promote the array reference to the suitable operation type", "+\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\t// generate the increment value (will by itself  be promoted to the operation value)", "+\t\t\t\tif (expression == IntLiteral.One) { // prefix operation", "+\t\t\t\t\tcodeStream.generateConstant(expression.constant, implicitConversion);", "+\t\t\t\t} else {", "+\t\t\t\t\texpression.generateCode(currentScope, codeStream, true);", "+\t\t\t\t}", "+\t\t\t\t// perform the operation", "+\t\t\t\tcodeStream.sendOperator(operator, operationTypeID);", "+\t\t\t\t// cast the value back to the array reference type", "+\t\t\t\tcodeStream.generateImplicitConversion(assignmentImplicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1bae1453ea649b5acf572ffca1276ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "cea6bc363df31dbead276062796eda418a3c4e77", "commitAfterChange": "19a809bd1e2b2fc92385fe5f8ca9f89249ad244c", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public static char[][] getTypeParameters(char[] methodOrTypeSignature) throws IllegalArgumentException", "signatureAfterChange": " public static char[][] getTypeParameters(char[] methodOrTypeSignature) throws IllegalArgumentException", "diff": ["-\t\t\t\tif (methodOrTypeSignature[i] == ':') {", "-\t\t\t\t\tcontinue nextBound; // empty bound", "+\t\t\t\tswitch (methodOrTypeSignature[i]) {", "+\t\t\t\t\tcase ':':", "+\t\t\t\t\t\tcontinue nextBound; // empty bound", "+\t\t\t\t\tcase C_GENERIC_END:", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\ti = Util.scanTypeSignature(methodOrTypeSignature, i);", "+\t\t\t\t\t\ti++; // position at start of next param if any", "+\t\t\t\t\t\tbreak;", "-\t\t\t\ti = Util.scanTypeSignature(methodOrTypeSignature, i);", "-\t\t\t\ti++; // position at start of next param if any"]}], "num": 27403}
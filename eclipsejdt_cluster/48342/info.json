{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e35215cfcfa123157d0f61d097bd4804", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59b67ceb3b88d2dd88c8790b47d11de4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "eff66822782d106f03c0800c15129e6995eea01c", "commitAfterChange": "899768f2df905f3ba878d5719c34fb81d4ef08b5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic static void checkAnnotationValue(TypeBinding requiredType, TypeBinding annotationType, char[] memberName, Expression memberValue, Scope scope)", "signatureAfterChange": " \t \tpublic static void checkAnnotationValue(TypeBinding requiredType, TypeBinding annotationType, char[] memberName, Expression memberValue, Scope scope)", "diff": ["-\t\t\t\t\tif (memberValue.constant == NotAConstant) {", "+\t\t\t\t\tif (memberValue instanceof ArrayInitializer) {", "+\t\t\t\t\t\tArrayInitializer initializer = (ArrayInitializer) memberValue;", "+\t\t\t\t\t\tfinal Expression[] expressions = initializer.expressions;", "+\t\t\t\t\t\tif (expressions != null) {", "+\t\t\t\t\t\t\tfor (int i =0, max = expressions.length; i < max; i++) {", "+\t\t\t\t\t\t\t\tif (expressions[i].constant == NotAConstant) {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(annotationType, memberName, memberValue);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (memberValue.constant == NotAConstant) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e5a07eee98254d18b434d2e03c567f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MemberValuePair.java", "commitBeforeChange": "b46f7c1d50886c8465004da55aa2beffcafd18da", "commitAfterChange": "091aa6ea41d7d4886b300ecd529ccc8adcfe1c5b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "signatureAfterChange": " \t \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "diff": ["-\t\t\t\t\tif (!(this.value instanceof ClassLiteralAccess)) {", "+\t\t\t\t\tif (this.value instanceof ArrayInitializer) {", "+\t\t\t\t\t\tArrayInitializer initializer = (ArrayInitializer) this.value;", "+\t\t\t\t\t\tfinal Expression[] expressions = initializer.expressions;", "+\t\t\t\t\t\tif (expressions != null) {", "+\t\t\t\t\t\t\tfor (int i =0, max = expressions.length; i < max; i++) {", "+\t\t\t\t\t\t\t\tif (!(expressions[i] instanceof ClassLiteralAccess)) {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeClassLiteral(this.binding.declaringClass, this.name, expressions[i]);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (!(this.value instanceof ClassLiteralAccess)) {"]}], "num": 48342}
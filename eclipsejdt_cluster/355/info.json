{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "400d07c1897a862aaacece82d0676491", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "288cf7f17e21dbb11524678d80d3c9f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/JavaBuilder.java", "commitBeforeChange": "a80d6e1ac5018cdf219c02b60e35505f7b63da6a", "commitAfterChange": "a30424844cd83642e790887d1975613889f243cf", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r private IProject[] getRequiredProjects()", "signatureAfterChange": "\r private IProject[] getRequiredProjects()", "diff": ["-\tString[] projectNames;\r", "+\tArrayList projects = new ArrayList();\r", "-\t\tprojectNames = ((JavaProject)javaProject).projectPrerequisites(((JavaProject)javaProject).getExpandedClasspath(true));\r", "+\t\tIClasspathEntry[] entries = ((JavaProject) javaProject).getExpandedClasspath(true);\r", "+\t\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "+\t\t\tIClasspathEntry entry = JavaCore.getResolvedClasspathEntry(entries[i]);\r", "+\t\t\tif (entry != null && entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) {\r", "+\t\t\t\tIProject p = workspaceRoot.getProject(entry.getPath().lastSegment());\r", "+\t\t\t\tif (p != null && !projects.contains(p))\r", "+\t\t\t\t\tprojects.add(p);\r", "+\t\t\t}\r", "+\t\t}\r", "-\t}\r", "-\r", "-\tArrayList projects = new ArrayList();\r", "-\tfor (int i = 0; i < projectNames.length; ++i) {\r", "-\t\tIProject p = workspaceRoot.getProject(projectNames[i]);\r", "-\t\tif (p != null && !projects.contains(p))\r", "-\t\t\tprojects.add(p);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "355d0054a9e0dd8e6fff4f956638c546", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "4e300efc6879ebefc1e17424cda019b7c5ca9ad1", "commitAfterChange": "d836cbee8ecc949f19e7decf6adae6126ae2b267", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public void add(IJavaElement element) throws JavaModelException", "signatureAfterChange": "\r public void add(IJavaElement element) throws JavaModelException", "diff": ["-\t\tIJavaProject project = (IJavaProject)element;\r", "-\t\tthis.add(project, true, new Hashtable(2));\r", "+\t\tthis.add((IJavaProject)element, true, new Hashtable(2));\r", "-\t\tif (root.isArchive()) {\r", "-\t\t\tthis.add(root.getPath(), false);\r", "-\t\t} else {\r", "-\t\t\tIJavaElement[] children = root.getChildren();\r", "-\t\t\tfor (int i = 0, length = children.length; i < length; i++) {\r", "-\t\t\t\tthis.add(children[i].getUnderlyingResource(), false);\r", "-\t\t\t}\r", "-\t\t}\r", "+\t\tthis.add(root.getPath(), true);\r", "-\t\t\tthis.add(root.getPath(), false);\r", "+\t\t\tthis.add(root.getPath().append(new Path(element.getElementName().replace('.', '/'))), false);\r", "-\t\t\tthis.add(element.getUnderlyingResource(), false);\r", "+\t\t\tIResource resource = element.getUnderlyingResource();\r", "+\t\t\tif (resource != null && resource.isAccessible()) {\r", "+\t\t\t\tthis.add(resource.getFullPath(), false);\r", "+\t\t\t}\r", "-\t\tthis.add(element.getUnderlyingResource());\r", "-\t\t\r", "+\t\tIResource resource = element.getUnderlyingResource();\r", "+\t\tif (resource != null && resource.isAccessible()) {\r", "+\t\t\tthis.add(resource.getFullPath(), true);\r", "+\t\t}\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c296bf15b0359087bab5e7a73f6a61af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "e719dd5a3586c01e5265dc68f8e6023c180424cf", "commitAfterChange": "4e66475f9a73014d666c99c51fe059857a4663fa", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public void add(IResource element)", "signatureAfterChange": "\r public void add(IResource element, boolean addJarsAndSourceFolders)", "diff": ["+ */\r", "+public void add(IResource element, boolean addJarsAndSourceFolders) {\r", "-\tif (element instanceof IProject) {\r", "+\tif (addJarsAndSourceFolders && element instanceof IProject) {\r", "-\t\t\tIClasspathEntry[] entries = javaProject.getExpandedClasspath(true);\r", "+\t\t\t// add only external jars, internal jars (that are internal to the project)\r", "+\t\t\t// and source folders of the project\r", "+\t\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\r", "-\t\t\t\tthis.add(entry.getPath());\r", "+\t\t\t\tIPath path = entry.getPath();\r", "+\t\t\t\tswitch (entry.getEntryKind()) {\r", "+\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:\r", "+\t\t\t\t\t\tif (element.getFullPath().isPrefixOf(path) // jar internal to project \r", "+\t\t\t\t\t\t\t\t|| element.getWorkspace().getRoot().findMember(path) == null) { // jar external to workspace\r", "+\t\t\t\t\t\t\tthis.add(path);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE:\r", "+\t\t\t\t\t\tif (element.getFullPath().isPrefixOf(path)) { // source folder inside project\r", "+\t\t\t\t\t\t\tthis.add(path);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f162f1d47538b9872d2ca58c1dd11434", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "2ae41539e386d12d9e7c121e231730e370deda2f", "commitAfterChange": "05dd526dbb279df7b7e23a1d7ccb53d445943919", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tpublic void findTypes(char[] prefix, final ISearchRequestor storage)", "signatureAfterChange": "\r \tpublic void findTypes(char[] prefix, final ISearchRequestor storage)", "diff": ["-\t\t\tJavaSearchScope scope = new JavaSearchScope();\r", "-\t\t\tIWorkspaceRoot root = this.project.getUnderlyingResource().getWorkspace().getRoot();\r", "-\t\t\tIClasspathEntry[] entries = ((JavaProject)this.project).getExpandedClasspath(true);\r", "-\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "-\t\t\t\tIClasspathEntry entry = entries[i];\r", "-\t\t\t\tswitch (entry.getEntryKind()) {\r", "-\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:\r", "-\t\t\t\t\t\tscope.add(root.getFile(entry.getPath()), false);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT:\r", "-\t\t\t\t\t\tscope.add(root.getProject(entry.getPath().lastSegment()), false);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE:\r", "-\t\t\t\t\t\tIPath path = entry.getPath();\r", "-\t\t\t\t\t\tif (path.segmentCount() == 1) {\r", "-\t\t\t\t\t\t\t// project is source\r", "-\t\t\t\t\t\t\tscope.add(root.getProject(path.lastSegment()), false);\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t// regular source folder\r", "-\t\t\t\t\t\t\tscope.add(root.getFolder(path), false);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\t\r", "+\t\t\tIJavaSearchScope scope = searchEngine.createJavaSearchScope(new IJavaElement[] {this.project});\r", "+\r"]}], "num": 355}
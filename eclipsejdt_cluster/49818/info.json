{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e62e6774d404b702a2000c1abdffe15b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67d1fe8a998644c664f501fb99ce4545", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/TypeNameMatchRequestorWrapper.java", "commitBeforeChange": "6103603933b9abb7a19a9456ed675a4c209e82b8", "commitAfterChange": "f998c33e546ee692336106e200e590ff5865fc79", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access)", "signatureAfterChange": " public void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access)", "diff": ["+", "+\t// Get type", "+", "+\t\t// Accept match if the type has been found", "-\t\t\t\tthis.requestor.acceptTypeNameMatch(new JavaSearchTypeNameMatch(type, modifiers));", "+", "+\t\t\t\t// Create the match", "+\t\t\t\tfinal JavaSearchTypeNameMatch match = new JavaSearchTypeNameMatch(type, modifiers);", "+", "+\t\t\t\t// Update match accessibility", "+\t\t\t\tif(access != null) {", "+\t\t\t\t\tswitch (access.getProblemId()) {", "+\t\t\t\t\t\tcase IProblem.ForbiddenReference:", "+\t\t\t\t\t\t\tmatch.setAccessibility(IAccessRule.K_NON_ACCESSIBLE);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IProblem.DiscouragedReference:", "+\t\t\t\t\t\t\tmatch.setAccessibility(IAccessRule.K_DISCOURAGED);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\t// Accept match", "+\t\t\t\tthis.requestor.acceptTypeNameMatch(match);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f806af174e48f0a85b6de0ec80d41e8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "7f9e7745cf3f1c024406269afc8bec9564b2443c", "commitAfterChange": "f71ae6e6dfede90c4056a2e033197a9212bd23a2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void acceptAnnotation( \t\tchar[] packageName, \t\tchar[] annotationName, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "signatureAfterChange": " \tpublic void acceptAnnotation( \t\tchar[] packageName, \t\tchar[] annotationName, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "diff": ["-\t\tif(this.options.checkRestrictions && accessRestriction != null) return;", "+\t\tint accessibility = IAccessRule.K_ACCESSIBLE;", "+\t\tif(accessRestriction != null) {", "+\t\t\tswitch (accessRestriction.getProblemId()) {", "+\t\t\t\tcase IProblem.ForbiddenReference:", "+\t\t\t\t\tif(this.options.checkForbiddenReference) return;", "+\t\t\t\t\taccessibility = IAccessRule.K_NON_ACCESSIBLE;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IProblem.DiscouragedReference:", "+\t\t\t\t\tif(this.options.checkDiscouragedReference) return;", "+\t\t\t\t\taccessibility = IAccessRule.K_DISCOURAGED;", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "-\t\trelevance += computeRelevanceForRestrictions(accessRestriction != null);", "+\t\trelevance += computeRelevanceForRestrictions(accessibility);", "+\t\t\tproposal.setAccessibility(accessibility);"]}], "num": 49818}
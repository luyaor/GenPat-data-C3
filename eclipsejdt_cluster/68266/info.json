{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cde2aedb68a97fea1e802a88efc0374b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a398de0b0caba7ea9426b78b8222f4ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ConfigurableOption.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \r \tpublic ConfigurableOption(String id, Locale loc)", "signatureAfterChange": "\r public ConfigurableOption(\r \tString componentName, \r \tString optionName, \r \tLocale loc, \r \tint currentValueIndex)", "diff": ["+ */\r", "+public ConfigurableOption(\r", "+\tString componentName, \r", "+\tString optionName, \r", "+\tLocale loc, \r", "+\tint currentValueIndex) {\r", "-\tpublic ConfigurableOption(String id, Locale loc) {\r", "-\t\tthis.id = id;\r", "-\t\tthis.value = value;\r", "-\t\tthis.loc = loc;\r", "-\r", "-\t\tthis.componentName = id.substring(0,id.lastIndexOf('.'));\r", "-\r", "-\t\tResourceBundle bundle = null;\r", "-\t\tmissing = \"Missing ressources entries for\" + componentName + \" options\"; //$NON-NLS-2$ //$NON-NLS-1$\r", "-\t\ttry {\r", "-\t\t\tbundle = ResourceBundle.getBundle(componentName,loc); \r", "-\t\t} catch (MissingResourceException e) {\r", "-\t\t\tid = missing;\r", "-\t\t\tdefaultValue = missing;\r", "-\t\t\tcategory = missing;\r", "-\t\t\tname = missing;\r", "-\t\t\tdescription = missing;\r", "-\t\t\tpossibleValues = NoDiscreteValue;\r", "-\t\t}\r", "-\t\tif (bundle == null) return;\r", "-\t\ttry{\r", "-\t\t\tStringTokenizer tokenizer =\r", "-\t\t\t\tnew StringTokenizer(\r", "-\t\t\t\t\tbundle.getString(id + \".possibleValues\"), //$NON-NLS-1$\r", "-\t\t\t\t\t\"|\"); //$NON-NLS-1$\r", "-\t\t\tint numberOfValues = Integer.parseInt(tokenizer.nextToken());\r", "-\t\t\tif (numberOfValues == -1) {\r", "-\t\t\t\t// the possible value are not discrete\r", "-\t\t\t\tpossibleValues = NoDiscreteValue;\r", "-\t\t\t\t\r", "-\t\t\t\tString token = tokenizer.nextToken();\r", "-\t\t\t\ttype = token;\r", "-\t\t\t\tif(token.equals(STRING)){\r", "-\r", "-\t\t\t\t}\r", "-\t\t\t\telse if(token.equals(INT) && tokenizer.hasMoreTokens()){\r", "-\t\t\t\t\ttoken = tokenizer.nextToken();\r", "-\t\t\t\t\tif(!token.equals(\"no\")){ //$NON-NLS-1$\r", "-\t\t\t\t\t\tminExisting = true;\r", "-\t\t\t\t\t\tminInt = Integer.parseInt(token);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\ttoken = tokenizer.nextToken();\r", "-\t\t\t\t\tif(!token.equals(\"no\")){ //$NON-NLS-1$\r", "-\t\t\t\t\t\tmaxExisting = true;\r", "-\t\t\t\t\t\tmaxInt = Integer.parseInt(token);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\telse if(token.equals(FLOAT) && tokenizer.hasMoreTokens()){\r", "-\t\t\t\t\ttoken = tokenizer.nextToken();\r", "-\t\t\t\t\tif(!token.equals(\"no\")){ //$NON-NLS-1$\r", "-\t\t\t\t\t\tminExisting = true;\r", "-\t\t\t\t\t\tminFloat = Float.parseFloat(token);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\ttoken = tokenizer.nextToken();\r", "-\t\t\t\t\tif(!token.equals(\"no\")){ //$NON-NLS-1$\r", "-\t\t\t\t\t\tmaxExisting = true;\r", "-\t\t\t\t\t\tmaxFloat = Float.parseFloat(token);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\t\t\t\r", "-\t\t\t} else {\r", "-\t\t\t\t// possible value are discrete\r", "-\t\t\t\ttype = DISCRETE;\r", "-\t\t\t\tpossibleValues = new String[numberOfValues];\r", "-\t\t\t\tint index = 0;\r", "-\t\t\t\twhile (tokenizer.hasMoreTokens()) {\r", "-\t\t\t\t\tpossibleValues[index] = tokenizer.nextToken();\r", "-\t\t\t\t\tindex++;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t} catch (MissingResourceException e) {\r", "-\t\t\tpossibleValues = NoDiscreteValue;\r", "-\t\t\ttype = missing;\r", "-\t\t} catch (NoSuchElementException e) {\r", "-\t\t\tpossibleValues = NoDiscreteValue;\r", "-\t\t\ttype = missing;\r", "-\t\t} catch (NumberFormatException e) {\r", "-\t\t\tpossibleValues = NoDiscreteValue;\r", "-\t\t\ttype = missing;\r", "-\t\t}\r", "-\t\ttry{\r", "-\t\t\tif(possibleValues == NoDiscreteValue){\r", "-\t\t\t\tdefaultValue = bundle.getString(id + \".default\"); //$NON-NLS-1$\r", "-\t\t\t}\r", "-\t\t\telse{\r", "-\t\t\t\tdefaultValueIndex = Integer.parseInt(bundle.getString(id + \".default\")); //$NON-NLS-1$\r", "-\t\t\t}\r", "-\t\t} catch (MissingResourceException e) {\r", "-\t\t\tdefaultValue = missing;\r", "-\t\t} catch (NumberFormatException e) {\r", "-\t\t\tdefaultValueIndex = -1;\r", "-\t\t}\r", "-\t\ttry{\r", "-\t\t\torder = Integer.parseInt(bundle.getString(id + \".order\")); //$NON-NLS-1$\r", "-\t\t} catch (NumberFormatException e) {\r", "-\t\t\torder = -1;\r", "-\t\t} catch (MissingResourceException e) {\r", "-\t\t\torder = -1;\r", "-\t\t}\r", "-\t\ttry{\r", "-\t\t\tcategory = bundle.getString(id + \".category\"); //$NON-NLS-1$\r", "-\t\t} catch (MissingResourceException e) {\r", "-\t\t\tcategory = missing;\r", "-\t\t}\r", "-\t\ttry{\r", "-\t\t\tname = bundle.getString(id + \".name\"); //$NON-NLS-1$\r", "-\t\t} catch (MissingResourceException e) {\r", "-\t\t\tname = missing;\r", "-\t\t}\r", "-\t\ttry{\r", "-\t\t\tdescription = bundle.getString(id + \".description\"); //$NON-NLS-1$\r", "-\t\t} catch (MissingResourceException e) {\r", "-\t\t\tdescription = missing;\r", "-\t\t}\r", "-\t}\r", "+\tthis.componentName = componentName;\r", "+\tthis.currentValueIndex = currentValueIndex;\r", "+\tResourceBundle resource = null;\r", "+\ttry {\r", "+\t\tString location = componentName.substring(0, componentName.lastIndexOf('.'));\r", "+\t\tresource = ResourceBundle.getBundle(location + \".Options\"/*nonNLS*/, loc); \r", "+\t} catch (MissingResourceException e) {\r", "+\t\tcategory = \"Missing ressources entries for\"/*nonNLS*/ + componentName + \" options\"/*nonNLS*/;\r", "+\t\tname = \"Missing ressources entries for\"/*nonNLS*/ + componentName + \" options\"/*nonNLS*/;\r", "+\t\tdescription = \"Missing ressources entries for\"/*nonNLS*/ + componentName + \" options\"/*nonNLS*/;\r", "+\t\tpossibleValues = new String[0];\r", "+\t\tid = -1;\r", "+\tif (resource == null) return;\r", "+\ttry {\r", "+\t\tid = Integer.parseInt(resource.getString(optionName + \".number\"/*nonNLS*/)); \r", "+\t} catch (MissingResourceException e) {\r", "+\t\tid = -1;\r", "+\t} catch (NumberFormatException e) {\r", "+\t\tid = -1;\r", "+\t}\r", "+\ttry {\r", "+\t\tcategory = resource.getString(optionName + \".category\"/*nonNLS*/); \r", "+\t} catch (MissingResourceException e) {\r", "+\t\tcategory = \"Missing ressources entries for\"/*nonNLS*/ + componentName + \" options\"/*nonNLS*/;\r", "+\t}\r", "+\ttry {\r", "+\t\tname = resource.getString(optionName + \".name\"/*nonNLS*/); \r", "+\t} catch (MissingResourceException e) {\r", "+\t\tname = \"Missing ressources entries for\"/*nonNLS*/ + componentName + \" options\"/*nonNLS*/;\r", "+\t}\r", "+\ttry {\r", "+\t\tStringTokenizer tokenizer = new StringTokenizer(resource.getString(optionName + \".possibleValues\"/*nonNLS*/), \"|\"/*nonNLS*/);\r", "+\t\tint numberOfValues = Integer.parseInt(tokenizer.nextToken());\r", "+\t\tif(numberOfValues == -1){\r", "+\t\t\tpossibleValues = NoDiscreteValue;\r", "+\t\t} else {\r", "+\t\t\tpossibleValues = new String[numberOfValues];\r", "+\t\t\tint index = 0;\r", "+\t\t\twhile (tokenizer.hasMoreTokens()) {\r", "+\t\t\t\tpossibleValues[index] = tokenizer.nextToken();\r", "+\t\t\t\tindex++;\r", "+\t\t\t}\r", "+\t} catch (MissingResourceException e) {\r", "+\t\tpossibleValues = new String[0];\r", "+\t} catch (NoSuchElementException e) {\r", "+\t\tpossibleValues = new String[0];\r", "+\t} catch (NumberFormatException e) {\r", "+\t\tpossibleValues = new String[0];\r", "+\ttry {\r", "+\t\tdescription = resource.getString(optionName + \".description\"/*nonNLS*/); \r", "+\t} catch (MissingResourceException e) {\r", "+\t\tdescription = \"Missing ressources entries for\"/*nonNLS*/ + componentName + \" options\"/*nonNLS*/;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9c68e7bc7549a0e8783d6a07df2b251", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ConfigurableOption.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \r \tpublic ConfigurableOption(String id, Locale loc)", "signatureAfterChange": "\r public ConfigurableOption(\r \tString componentName, \r \tString optionName, \r \tLocale loc, \r \tint currentValueIndex)", "diff": ["+ */\r", "+public ConfigurableOption(\r", "+\tString componentName, \r", "+\tString optionName, \r", "+\tLocale loc, \r", "+\tint currentValueIndex) {\r", "-\tpublic ConfigurableOption(String id, Locale loc) {\r", "-\t\tthis.id = id;\r", "-\t\tthis.value = value;\r", "-\t\tthis.loc = loc;\r", "-\r", "-\t\tthis.componentName = id.substring(0,id.lastIndexOf('.'));\r", "-\r", "-\t\tResourceBundle bundle = null;\r", "-\t\tmissing = \"Missing ressources entries for\" + componentName + \" options\"; //$NON-NLS-2$ //$NON-NLS-1$\r", "-\t\ttry {\r", "-\t\t\tbundle = ResourceBundle.getBundle(componentName,loc); \r", "-\t\t} catch (MissingResourceException e) {\r", "-\t\t\tid = missing;\r", "-\t\t\tdefaultValue = missing;\r", "-\t\t\tcategory = missing;\r", "-\t\t\tname = missing;\r", "-\t\t\tdescription = missing;\r", "-\t\t\tpossibleValues = NoDiscreteValue;\r", "-\t\t}\r", "-\t\tif (bundle == null) return;\r", "-\t\ttry{\r", "-\t\t\tStringTokenizer tokenizer =\r", "-\t\t\t\tnew StringTokenizer(\r", "-\t\t\t\t\tbundle.getString(id + \".possibleValues\"), //$NON-NLS-1$\r", "-\t\t\t\t\t\"|\"); //$NON-NLS-1$\r", "-\t\t\tint numberOfValues = Integer.parseInt(tokenizer.nextToken());\r", "-\t\t\tif (numberOfValues == -1) {\r", "-\t\t\t\t// the possible value are not discrete\r", "-\t\t\t\tpossibleValues = NoDiscreteValue;\r", "-\t\t\t\t\r", "-\t\t\t\tString token = tokenizer.nextToken();\r", "-\t\t\t\ttype = token;\r", "-\t\t\t\tif(token.equals(STRING)){\r", "-\r", "-\t\t\t\t}\r", "-\t\t\t\telse if(token.equals(INT) && tokenizer.hasMoreTokens()){\r", "-\t\t\t\t\ttoken = tokenizer.nextToken();\r", "-\t\t\t\t\tif(!token.equals(\"no\")){ //$NON-NLS-1$\r", "-\t\t\t\t\t\tminExisting = true;\r", "-\t\t\t\t\t\tminInt = Integer.parseInt(token);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\ttoken = tokenizer.nextToken();\r", "-\t\t\t\t\tif(!token.equals(\"no\")){ //$NON-NLS-1$\r", "-\t\t\t\t\t\tmaxExisting = true;\r", "-\t\t\t\t\t\tmaxInt = Integer.parseInt(token);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\telse if(token.equals(FLOAT) && tokenizer.hasMoreTokens()){\r", "-\t\t\t\t\ttoken = tokenizer.nextToken();\r", "-\t\t\t\t\tif(!token.equals(\"no\")){ //$NON-NLS-1$\r", "-\t\t\t\t\t\tminExisting = true;\r", "-\t\t\t\t\t\tminFloat = Float.parseFloat(token);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\ttoken = tokenizer.nextToken();\r", "-\t\t\t\t\tif(!token.equals(\"no\")){ //$NON-NLS-1$\r", "-\t\t\t\t\t\tmaxExisting = true;\r", "-\t\t\t\t\t\tmaxFloat = Float.parseFloat(token);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\t\t\t\r", "-\t\t\t} else {\r", "-\t\t\t\t// possible value are discrete\r", "-\t\t\t\ttype = DISCRETE;\r", "-\t\t\t\tpossibleValues = new String[numberOfValues];\r", "-\t\t\t\tint index = 0;\r", "-\t\t\t\twhile (tokenizer.hasMoreTokens()) {\r", "-\t\t\t\t\tpossibleValues[index] = tokenizer.nextToken();\r", "-\t\t\t\t\tindex++;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t} catch (MissingResourceException e) {\r", "-\t\t\tpossibleValues = NoDiscreteValue;\r", "-\t\t\ttype = missing;\r", "-\t\t} catch (NoSuchElementException e) {\r", "-\t\t\tpossibleValues = NoDiscreteValue;\r", "-\t\t\ttype = missing;\r", "-\t\t} catch (NumberFormatException e) {\r", "-\t\t\tpossibleValues = NoDiscreteValue;\r", "-\t\t\ttype = missing;\r", "-\t\t}\r", "-\t\ttry{\r", "-\t\t\tif(possibleValues == NoDiscreteValue){\r", "-\t\t\t\tdefaultValue = bundle.getString(id + \".default\"); //$NON-NLS-1$\r", "-\t\t\t}\r", "-\t\t\telse{\r", "-\t\t\t\tdefaultValueIndex = Integer.parseInt(bundle.getString(id + \".default\")); //$NON-NLS-1$\r", "-\t\t\t}\r", "-\t\t} catch (MissingResourceException e) {\r", "-\t\t\tdefaultValue = missing;\r", "-\t\t} catch (NumberFormatException e) {\r", "-\t\t\tdefaultValueIndex = -1;\r", "-\t\t}\r", "-\t\ttry{\r", "-\t\t\torder = Integer.parseInt(bundle.getString(id + \".order\")); //$NON-NLS-1$\r", "-\t\t} catch (NumberFormatException e) {\r", "-\t\t\torder = -1;\r", "-\t\t} catch (MissingResourceException e) {\r", "-\t\t\torder = -1;\r", "-\t\t}\r", "-\t\ttry{\r", "-\t\t\tcategory = bundle.getString(id + \".category\"); //$NON-NLS-1$\r", "-\t\t} catch (MissingResourceException e) {\r", "-\t\t\tcategory = missing;\r", "-\t\t}\r", "-\t\ttry{\r", "-\t\t\tname = bundle.getString(id + \".name\"); //$NON-NLS-1$\r", "-\t\t} catch (MissingResourceException e) {\r", "-\t\t\tname = missing;\r", "-\t\t}\r", "-\t\ttry{\r", "-\t\t\tdescription = bundle.getString(id + \".description\"); //$NON-NLS-1$\r", "-\t\t} catch (MissingResourceException e) {\r", "-\t\t\tdescription = missing;\r", "-\t\t}\r", "-\t}\r", "+\tthis.componentName = componentName;\r", "+\tthis.currentValueIndex = currentValueIndex;\r", "+\tResourceBundle resource = null;\r", "+\ttry {\r", "+\t\tString location = componentName.substring(0, componentName.lastIndexOf('.'));\r", "+\t\tresource = ResourceBundle.getBundle(location + \".Options\"/*nonNLS*/, loc); \r", "+\t} catch (MissingResourceException e) {\r", "+\t\tcategory = \"Missing ressources entries for\"/*nonNLS*/ + componentName + \" options\"/*nonNLS*/;\r", "+\t\tname = \"Missing ressources entries for\"/*nonNLS*/ + componentName + \" options\"/*nonNLS*/;\r", "+\t\tdescription = \"Missing ressources entries for\"/*nonNLS*/ + componentName + \" options\"/*nonNLS*/;\r", "+\t\tpossibleValues = new String[0];\r", "+\t\tid = -1;\r", "+\tif (resource == null) return;\r", "+\ttry {\r", "+\t\tid = Integer.parseInt(resource.getString(optionName + \".number\"/*nonNLS*/)); \r", "+\t} catch (MissingResourceException e) {\r", "+\t\tid = -1;\r", "+\t} catch (NumberFormatException e) {\r", "+\t\tid = -1;\r", "+\t}\r", "+\ttry {\r", "+\t\tcategory = resource.getString(optionName + \".category\"/*nonNLS*/); \r", "+\t} catch (MissingResourceException e) {\r", "+\t\tcategory = \"Missing ressources entries for\"/*nonNLS*/ + componentName + \" options\"/*nonNLS*/;\r", "+\t}\r", "+\ttry {\r", "+\t\tname = resource.getString(optionName + \".name\"/*nonNLS*/); \r", "+\t} catch (MissingResourceException e) {\r", "+\t\tname = \"Missing ressources entries for\"/*nonNLS*/ + componentName + \" options\"/*nonNLS*/;\r", "+\t}\r", "+\ttry {\r", "+\t\tStringTokenizer tokenizer = new StringTokenizer(resource.getString(optionName + \".possibleValues\"/*nonNLS*/), \"|\"/*nonNLS*/);\r", "+\t\tint numberOfValues = Integer.parseInt(tokenizer.nextToken());\r", "+\t\tif(numberOfValues == -1){\r", "+\t\t\tpossibleValues = NoDiscreteValue;\r", "+\t\t} else {\r", "+\t\t\tpossibleValues = new String[numberOfValues];\r", "+\t\t\tint index = 0;\r", "+\t\t\twhile (tokenizer.hasMoreTokens()) {\r", "+\t\t\t\tpossibleValues[index] = tokenizer.nextToken();\r", "+\t\t\t\tindex++;\r", "+\t\t\t}\r", "+\t} catch (MissingResourceException e) {\r", "+\t\tpossibleValues = new String[0];\r", "+\t} catch (NoSuchElementException e) {\r", "+\t\tpossibleValues = new String[0];\r", "+\t} catch (NumberFormatException e) {\r", "+\t\tpossibleValues = new String[0];\r", "+\ttry {\r", "+\t\tdescription = resource.getString(optionName + \".description\"/*nonNLS*/); \r", "+\t} catch (MissingResourceException e) {\r", "+\t\tdescription = \"Missing ressources entries for\"/*nonNLS*/ + componentName + \" options\"/*nonNLS*/;\r", "+}\r"]}], "num": 68266}
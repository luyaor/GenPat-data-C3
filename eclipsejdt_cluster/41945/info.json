{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0844fca216648c6c2d81d7df37723d17", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d7820c29b9cb1f2f95c22ac3fccb3e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedSuperReference.java", "commitBeforeChange": "826aaa7d3dacd4ddad5f556a3ebb7318859595b5", "commitAfterChange": "86ee968d8acf90a0a75c72085f72a3416b02186d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  int findCompatibleEnclosing(ReferenceBinding enclosingType, TypeBinding type)", "signatureAfterChange": "  int findCompatibleEnclosing(ReferenceBinding enclosingType, TypeBinding type)", "diff": ["-\t\t\tthis.currentCompatibleType = supers[i];", "-\t\t\tif (this.currentCompatibleType.erasure() == type) {", "+\t\t\tif (supers[i].erasure() == type) {", "+\t\t\t\tthis.currentCompatibleType = supers[i];", "+\t\t\t} else if (supers[i].erasure().isCompatibleWith(type)) {", "+\t\t\t\tthis.currentCompatibleType = null;", "+\t\t\t\tthis.resolvedType = new ProblemReferenceBinding(supers[i].compoundName, supers[i], ProblemReasons.AttemptToBypassDirectSuper);", "+\t\treturn 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29e8a4ebc9986410155d61175cf94f2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java", "commitBeforeChange": "c06e07ca77c0b109ce7d4e6c3f60180a3777bc7d", "commitAfterChange": "a1d61f4860d08002c8a193d70dccc7a85c870208", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tint depth = 0;", "-\t\tthis.currentCompatibleType = scope.referenceType().binding;", "-\t\twhile (this.currentCompatibleType != null && this.currentCompatibleType != type) {", "-\t\t\tdepth++;", "-\t\t\tthis.currentCompatibleType = this.currentCompatibleType.isStatic() ? null : this.currentCompatibleType.enclosingType();", "-\t\t}", "+\t\tint depth = findCompatibleEnclosing(scope.referenceType().binding, type);"]}], "num": 41945}
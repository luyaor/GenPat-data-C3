{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "adeffad98bf581e4f76416122ccd3213", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55a1f1e81a1fe9290eaa1211fa2356a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java", "commitBeforeChange": "6665973e9a36116a8cb24b7143317e47a83a98f0", "commitAfterChange": "305123b230bcfd1f733969b7cd2c687b75857ff0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void bind(MethodScope scope, TypeBinding typeBinding, boolean used)", "signatureAfterChange": "  \tpublic void bind(MethodScope scope, TypeBinding typeBinding, boolean used)", "diff": ["+", "+\t\tcreateBinding(scope, typeBinding); // basically a no-op if createBinding() was called before", "-", "-\t\tif (this.binding == null) {", "-\t\t\tthis.binding = new LocalVariableBinding(this, typeBinding, this.modifiers, true);", "-\t\t} else if (!this.binding.type.isValidBinding()) {", "-\t\t\tAbstractMethodDeclaration methodDecl = scope.referenceMethod();", "-\t\t\tif (methodDecl != null) {", "-\t\t\t\tMethodBinding methodBinding = methodDecl.binding;", "-\t\t\t\tif (methodBinding != null) {", "-\t\t\t\t\tmethodBinding.tagBits |= TagBits.HasUnresolvedArguments;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tresolveAnnotations(scope, this.annotations, this.binding);", "-\t\tthis.binding.declaration = this;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c9cd7e32c146f3335800bc9bf54aa8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "5639522d8d54e9045b786862d610c6266638db42", "commitAfterChange": "27f0a8bf5e0182b2f55d23c88165e43a56aee13f", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": "  \tpublic void recordInnerClasses(TypeBinding binding)", "signatureAfterChange": "  \tpublic void recordInnerClasses(TypeBinding binding)", "diff": ["+\t\trecordInnerClasses(binding, false);", "+\t}", "-\t\t\tthis.innerClassesBindings = new HashSet(INNER_CLASSES_SIZE);", "-\t\tthis.innerClassesBindings.add(innerClass.erasure().unannotated());  // should not emit yet another inner class for Outer.@Inner Inner.", "-\t\t\tthis.innerClassesBindings.add(enclosingType.erasure().unannotated());"]}], "num": 4996}
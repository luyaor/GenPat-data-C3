{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c64c5a26f66a45d3c7ab585be781e6b2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "465627d9548869af22d87acd78ee24ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "c36806bf795aa69e23f027117b2ebc1cb99bee93", "commitAfterChange": "d627da8238aec48018bdf0d2b4bff905a4883256", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate boolean parseHref() throws InvalidInputException", "signatureAfterChange": " \tprivate boolean parseHref() throws InvalidInputException", "diff": ["+\t\t\t\t\t\t\t\t\t\t// Reset position: we want to rescan last token", "+\t\t\t\t\t\t\t\t\t\tthis.index = this.tokenPreviousPosition;", "+\t\t\t\t\t\t\t\t\t\tthis.scanner.currentPosition = this.tokenPreviousPosition;", "+\t\t\t\t\t\t\t\t\t\tthis.currentTokenType = -1;", "+\t\t\t\t\t\t\t\t\t\t// Signal syntax error", "+\t\t// Reset position: we want to rescan last token", "+\t\tthis.index = this.tokenPreviousPosition;", "+\t\tthis.scanner.currentPosition = this.tokenPreviousPosition;", "+\t\tthis.currentTokenType = -1;", "+\t\t// Signal syntax error"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f8a6abbd663deaba66bada79bb535f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "12f65faa0a3b984e9751d243a3eab6e6ab078ed7", "commitAfterChange": "36d2cf066100445cbe45dd4cf851204404f7d76f", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void initializeScanner(char[] compilationUnitSource)", "signatureAfterChange": " \tpublic void initializeScanner(char[] compilationUnitSource)", "diff": ["+\t\tthis.maxLines = this.lineEnds == null ? -1 : this.lineEnds.length - 1;", "+\t\tthis.scanner.lineEnds = this.lineEnds;", "+\t\tthis.scanner.linePtr = this.maxLines;", "+\t\t// Comment following line to de-activate new Javadoc formatter", "+\t\tinitFormatterCommentParser();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5271f340b3ce7a0897509cf8bfdaf6b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "ac2c3539b72e65a4a4e0b168769da151e63c5ff1", "commitAfterChange": "014710437062a15282800b8efb747a8973068ba8", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tprotected abstract void updateLineEnd();", "signatureAfterChange": " \tprotected void updateLineEnd()", "diff": ["-\tprotected abstract void initLineEnd();", "-\tprotected abstract void updateLineEnd();", "+\t */", "+\tprotected void updateLineEnd() {", "+\t\twhile (this.index > (this.lineEnd+1)) { // be sure to be on next line (lineEnd is still on the same line)", "+\t\t\tif (this.linePtr < this.lastLinePtr) {", "+\t\t\t\tthis.lineEnd = getLineEnd(++this.linePtr) - 1;", "+\t\t\t} else {", "+\t\t\t\tthis.lineEnd = this.endComment;", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tthis.lineStarted= false;", "+\t\t}", "+\t}"]}], "num": 2173}
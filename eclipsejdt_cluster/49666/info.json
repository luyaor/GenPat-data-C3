{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "717d721d54003222f2ff6312e37e3357", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a125f0933a7c10b3ed8c2bdf01260e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/BatchTestUtils.java", "commitBeforeChange": "bd118e51270d54e48ef1b8d76bf62d7f013d8051", "commitAfterChange": "6b4dc1e51882dc5aa6d555a3c8efd4361f0c4d13", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic static void init()", "signatureAfterChange": " \tpublic static void init()", "diff": ["-\t\tAssert.assertNotNull(\"No processor jar path set\", _processorJarPath);", "+\t\tjunit.framework.TestCase.assertNotNull(\"No processor jar path set\", _processorJarPath);", "-\t\tAssert.assertTrue(\"Couldn't find processor jar at \" + processorJar.getAbsolutePath(), processorJar.exists());", "+\t\tjunit.framework.TestCase.assertTrue(\"Couldn't find processor jar at \" + processorJar.getAbsolutePath(), processorJar.exists());", "-\t\t\tAssert.assertTrue(\"Eclipse compiler is not available\", false);", "+\t\t\tjunit.framework.TestCase.assertTrue(\"Eclipse compiler is not available\", false);", "-\t\tAssert.assertEquals(\"Only one compiler available\", 1, compilerCounter);", "-\t\tAssert.assertNotNull(\"No Eclipse compiler found\", _eclipseCompiler);", "+\t\tjunit.framework.TestCase.assertEquals(\"Only one compiler available\", 1, compilerCounter);", "+\t\tjunit.framework.TestCase.assertNotNull(\"No Eclipse compiler found\", _eclipseCompiler);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa5dcd40fabab950e3181521322ad114", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/BatchTestUtils.java", "commitBeforeChange": "870bb4f621dd0b8090426a7261d67a43a6dc9aa9", "commitAfterChange": "e50e209371b2a65df03cbc73d76285445e8c642a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic static void init()", "signatureAfterChange": " \tpublic static void init()", "diff": ["-\t\tAssert.assertNotNull(\"No processor jar path set\", _processorJarPath);", "+\t\tjunit.framework.TestCase.assertNotNull(\"No processor jar path set\", _processorJarPath);", "-\t\tAssert.assertTrue(\"Couldn't find processor jar at \" + processorJar.getAbsolutePath(), processorJar.exists());", "+\t\tjunit.framework.TestCase.assertTrue(\"Couldn't find processor jar at \" + processorJar.getAbsolutePath(), processorJar.exists());", "-\t\t\tAssert.assertTrue(\"Eclipse compiler is not available\", false);", "+\t\t\tjunit.framework.TestCase.assertTrue(\"Eclipse compiler is not available\", false);", "-\t\tAssert.assertEquals(\"Only one compiler available\", 1, compilerCounter);", "-\t\tAssert.assertNotNull(\"No Eclipse compiler found\", _eclipseCompiler);", "+\t\tjunit.framework.TestCase.assertEquals(\"Only one compiler available\", 1, compilerCounter);", "+\t\tjunit.framework.TestCase.assertNotNull(\"No Eclipse compiler found\", _eclipseCompiler);"]}], "num": 49666}
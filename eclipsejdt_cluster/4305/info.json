{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5cc456da729d8c4737e997aa60afb34b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dc4974575c865a15d469c00cdf42284", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public int literalIndexForNameAndType(char[] name, char[] signature)", "signatureAfterChange": " public int literalIndexForNameAndType(char[] name, char[] signature)", "diff": ["-\tint index;", "-\tif ((index = putInNameAndTypeCacheIfAbsent(name, signature, currentIndex)) < 0) {", "-\t\t// The entry doesn't exit yet", "-\t\tcurrentIndex++;", "-\t\tif ((index = -index) > 0xFFFF){", "-\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t}", "-\t\twriteU1(NameAndTypeTag);", "-\t\tint nameIndexOffset = this.currentOffset;", "-\t\tif (currentOffset + 4 >= poolContent.length) {", "-\t\t\tresizePoolContents(4);", "-\t\t}", "-\t\tcurrentOffset+=4;", "-\t\t", "-\t\tfinal int nameIndex = literalIndex(name);", "-\t\tfinal int typeIndex = literalIndex(signature);", "-\t\tpoolContent[nameIndexOffset++] = (byte) (nameIndex >> 8);", "-\t\tpoolContent[nameIndexOffset++] = (byte) nameIndex;", "-\t\tpoolContent[nameIndexOffset++] = (byte) (typeIndex >> 8);", "-\t\tpoolContent[nameIndexOffset] = (byte) typeIndex;", "-\t}", "-\treturn index;", "+    int index;", "+    if ((index = putInNameAndTypeCacheIfAbsent(name, signature, currentIndex)) < 0) {", "+        // The entry doesn't exit yet", "+        currentIndex++;", "+        if ((index = -index) > 0xFFFF){", "+            this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "+        }", "+        int length = this.offsets.length;", "+        if (length <= index) {", "+        \t// resize", "+            System.arraycopy(this.offsets, 0, (this.offsets = new int[index * 2]), 0, length);", "+        }", "+        this.offsets[index] = this.currentOffset;", "+        writeU1(NameAndTypeTag);", "+        int nameIndexOffset = this.currentOffset;", "+        if (currentOffset + 4 >= poolContent.length) {", "+            resizePoolContents(4);", "+        }", "+        currentOffset+=4;", "+", "+        final int nameIndex = literalIndex(name);", "+        final int typeIndex = literalIndex(signature);", "+        poolContent[nameIndexOffset++] = (byte) (nameIndex >> 8);", "+        poolContent[nameIndexOffset++] = (byte) nameIndex;", "+        poolContent[nameIndexOffset++] = (byte) (typeIndex >> 8);", "+        poolContent[nameIndexOffset] = (byte) typeIndex;", "+    }", "+    return index;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61f0fb12f57d4f71afad71e0f541790a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public int literalIndex(byte[] utf8encoding, char[] stringCharArray)", "signatureAfterChange": " public int literalIndex(byte[] utf8encoding, char[] stringCharArray)", "diff": ["-\tint index;", "-\tif ((index = UTF8Cache.putIfAbsent(stringCharArray, this.currentIndex)) < 0) {", "-\t\t// The entry doesn't exit yet", "-\t\tif ((index = -index)> 0xFFFF) {", "-\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t}", "-\t\tcurrentIndex++;", "-\t\t// Write the tag first", "-\t\twriteU1(Utf8Tag);", "-\t\tint utf8encodingLength = utf8encoding.length;", "-\t\tif (currentOffset + 2 + utf8encodingLength >= poolContent.length) {", "-\t\t\t// we need to resize the poolContent array because we won't have", "-\t\t\t// enough space to write the length", "-\t\t\tresizePoolContents(2 + utf8encodingLength);", "-\t\t}", "-\t\tpoolContent[currentOffset++] = (byte) (utf8encodingLength >> 8);", "-\t\tpoolContent[currentOffset++] = (byte) utf8encodingLength;", "-\t\t// add in once the whole byte array", "-\t\tSystem.arraycopy(utf8encoding, 0, poolContent, currentOffset, utf8encodingLength);", "-\t\tcurrentOffset += utf8encodingLength;", "-\t}", "-\treturn index;", "+    int index;", "+    if ((index = UTF8Cache.putIfAbsent(stringCharArray, this.currentIndex)) < 0) {", "+        // The entry doesn't exit yet", "+        if ((index = -index)> 0xFFFF) {", "+            this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "+        }", "+        currentIndex++;", "+        // Write the tag first", "+        int length = this.offsets.length;", "+        if (length <= index) {", "+        \t// resize", "+            System.arraycopy(this.offsets, 0, (this.offsets = new int[index * 2]), 0, length);", "+        }", "+        this.offsets[index] = this.currentOffset;", "+        writeU1(Utf8Tag);", "+        int utf8encodingLength = utf8encoding.length;", "+        if (currentOffset + 2 + utf8encodingLength >= poolContent.length) {", "+            // we need to resize the poolContent array because we won't have", "+            // enough space to write the length", "+            resizePoolContents(2 + utf8encodingLength);", "+        }", "+        poolContent[currentOffset++] = (byte) (utf8encodingLength >> 8);", "+        poolContent[currentOffset++] = (byte) utf8encodingLength;", "+        // add in once the whole byte array", "+        System.arraycopy(utf8encoding, 0, poolContent, currentOffset, utf8encodingLength);", "+        currentOffset += utf8encodingLength;", "+    }", "+    return index;"]}], "num": 4305}
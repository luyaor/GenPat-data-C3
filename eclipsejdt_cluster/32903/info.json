{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a18d8063fca9f68f15a0b133928ca7c5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46d258dba9e0beff1f600a88bd08d92e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "808ee1989aa546fef406f77c37a96f979df5219f", "commitAfterChange": "2528937997399f978f8c04c6800f46f957dbd27f", "methodNumberBeforeChange": 285, "methodNumberAfterChange": 293, "signatureBeforeChange": "  public void testBug110060_ConstructorPattern05() throws CoreException", "signatureAfterChange": " public void testBug110060_ConstructorPattern05() throws CoreException", "diff": ["-", "-\tsearch(\"Ax\", CONSTRUCTOR, ALL_OCCURRENCES, SearchPattern.R_CAMELCASE_MATCH);", "+\tsearch(\"Ax\", CONSTRUCTOR, ALL_OCCURRENCES, SearchPattern.R_CAMEL_CASE_MATCH);", "-\t\t\"src/b110060/AxA.java b110060.AxA() [AxA] EXACT_MATCH\\n\" +", "-\t\t\"src/b110060/AxxAyy.java b110060.AxxAyy() [AxxAyy] EXACT_MATCH\\n\" +", "-\t\t\"src/b110060/Test.java b110060.Test.axa [new AxA()] EXACT_MATCH\\n\" +", "-\t\t\"src/b110060/Test.java b110060.Test.axxayy [new AxxAyy()] EXACT_MATCH\"", "+\t\t\"\" // no match as prefix is not set"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50b11ecb26ca26cbe0a222f631c3e370", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java", "commitBeforeChange": "f7a3f976b2776b953199bf3c6716d25e2ddea03e", "commitAfterChange": "fbb76f52a30ee20f3d4a3f2f5f9a3d507821f378", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public void testBug425798()", "signatureAfterChange": " public void testBug425798()", "diff": ["-\trunNegativeTest( // TODO: for now we just want to prove absence of NPE, should, however, be a conform test, actually.", "+\trunConformTest(", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\"\t.collect(toMap(Annotation::annotationType,\\n\" + ", "-\t\t\"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The type of annotationType() from the type Annotation is Class<? extends Annotation>, this is incompatible with the descriptor's return type: Class<capture#3-of ? extends Annotation>\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b46dedd3a6b7396e7c57534890366d06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "a746953c3c39228e621101bf14cd960b61f268e5", "commitAfterChange": "8d9e4d82b7907a3f11b58a9fee1e77dc3999b852", "methodNumberBeforeChange": 265, "methodNumberAfterChange": 266, "signatureBeforeChange": " public void testBug110060_TypePattern09() throws CoreException", "signatureAfterChange": " public void testBug110060_TypePattern09() throws CoreException", "diff": ["-\tsearch(\"AA\", TYPE, REFERENCES, SearchPattern.R_CAMEL_CASE_MATCH | SearchPattern.R_CASE_SENSITIVE);", "+\tsearch(\"Aaa\", TYPE, REFERENCES, SearchPattern.R_CAMELCASE_MATCH | SearchPattern.R_CASE_SENSITIVE);", "+\t// Invalid camel case pattern => replace the camel case flag by prefix  match one keeping case sensitive", "-\t\t\"src/b110060/Test.java b110060.Test.a2 [AAa] EXACT_MATCH\\n\" + ", "-\t\t\"src/b110060/Test.java b110060.Test.a4 [AAxx] EXACT_MATCH\\n\" + ", "-\t\t\"src/b110060/Test.java b110060.Test.a5 [AxA] EXACT_MATCH\\n\" + ", "-\t\t\"src/b110060/Test.java b110060.Test.a6 [AxxAyy] EXACT_MATCH\"", "+\t\t\"src/b110060/Test.java b110060.Test.a1 [Aaa] EXACT_MATCH\""]}], "num": 32903}
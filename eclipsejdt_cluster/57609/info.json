{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d65c9b2c52866c46e5573e6ee74355f2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bbdea277c67b07161da7dfa7067453f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "cd6ca384f57ea36233e4caca220f18e53912b7cf", "commitAfterChange": "9ee33691ed28522cbc2852e39f3c0e623d310200", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private MethodBinding createMethod(IBinaryMethod method)", "signatureAfterChange": " private MethodBinding createMethod(IBinaryMethod method)", "diff": ["-\tint modifiers = method.getModifiers() | AccUnresolved;", "+\tint methodModifiers = method.getModifiers() | AccUnresolved;", "-\tchar[] signature = method.getMethodDescriptor();   // of the form (I[Ljava/jang/String;)V", "+\tchar[] methodSignature = method.getMethodDescriptor();   // of the form (I[Ljava/jang/String;)V", "-\twhile ((nextChar = signature[++index]) != ')') {", "+\twhile ((nextChar = methodSignature[++index]) != ')') {", "-\t\t\t\twhile ((nextChar = signature[++index]) != ';');", "+\t\t\t\twhile ((nextChar = methodSignature[++index]) != ';');", "-\t\t\twhile ((nextChar = signature[++end]) == '[');", "+\t\t\twhile ((nextChar = methodSignature[++end]) == '[');", "-\t\t\t\twhile ((nextChar = signature[++end]) != ';');", "+\t\t\t\twhile ((nextChar = methodSignature[++end]) != ';');", "-\t\t\t\tparameters[i - startIndex] = environment.getTypeFromSignature(signature, index, end);", "+\t\t\t\tparameters[i - startIndex] = environment.getTypeFromSignature(methodSignature, index, end);", "-\t\tbinding = new MethodBinding(modifiers, parameters, exceptions, this);", "+\t\tbinding = new MethodBinding(methodModifiers, parameters, exceptions, this);", "-\t\t\tmodifiers,", "+\t\t\tmethodModifiers,", "-\t\t\tenvironment.getTypeFromSignature(signature, index + 1, -1),   // index is currently pointing at the ')'", "+\t\t\tenvironment.getTypeFromSignature(methodSignature, index + 1, -1),   // index is currently pointing at the ')'"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e10f04a49729ea1aee569a81093bf51c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java", "commitBeforeChange": "6224a5dcda094820e09b86e019ae927259ff3273", "commitAfterChange": "24c681585ef2f4b155e3d0f5cb2c551e612e2484", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newElements, ArrayList childrenHandles, ArrayList typeParameterHandles)", "signatureAfterChange": " private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newElements, ArrayList childrenHandles, ArrayList typeParameterHandles)", "diff": ["+\t\tboolean useGenericSignature = true;", "-\t\tif (signature == null) signature = methodInfo.getMethodDescriptor();", "+\t\tif (signature == null) {", "+\t\t\tuseGenericSignature = false;", "+\t\t\tsignature = methodInfo.getMethodDescriptor();", "+\t\t}", "+\t\tString selector = new String(methodInfo.getSelector());", "+\t\tfinal boolean isConstructor = methodInfo.isConstructor();", "+\t\tif (isConstructor) {", "+\t\t\tselector = type.getElementName();", "+\t\t}", "-\t\t} catch (IllegalArgumentException e) {", "+\t\t\tif (isConstructor", "+\t\t\t\t\t&& useGenericSignature", "+\t\t\t\t\t&& type.isMember()", "+\t\t\t\t\t&& !Flags.isStatic(type.getFlags())) {", "+\t\t\t\tint length = pNames.length;", "+\t\t\t\tSystem.arraycopy(pNames, 0, (pNames = new String[length + 1]), 1, length);", "+\t\t\t\tchar[] descriptor = methodInfo.getMethodDescriptor();", "+\t\t\t\tfinal String[] parameterTypes = Signature.getParameterTypes(new String(descriptor));", "+\t\t\t\tpNames[0] = parameterTypes[0];", "+\t\t\t}", "+\t\t}catch (IllegalArgumentException e) {", "+\t\t\t// protect against malformed .class file (e.g. com/sun/crypto/provider/SunJCE_b.class has a 'a' generic signature)", "+\t\t\tsignature = methodInfo.getMethodDescriptor();", "+\t\t\tpNames = Signature.getParameterTypes(new String(signature));", "+\t\t} catch (JavaModelException e) {", "-\t\tString selector = new String(methodInfo.getSelector());", "-\t\tif (methodInfo.isConstructor()) {", "-\t\t\tselector =type.getElementName();", "-\t\t}"]}], "num": 57609}
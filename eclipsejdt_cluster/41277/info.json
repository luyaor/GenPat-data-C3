{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7b7cc0998dbb1d2bcd7e7a721a1a234", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3420d41eec44de38fca021cd9c9bf45b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "71df68ac6bbd7c5b4b673539241b9c1cc905574c", "commitAfterChange": "04c08732703d5f5e97b66e89468d2f87b7f84cff", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic IType findType(String typeName, String packageName, boolean partialMatch, int acceptFlags, boolean considerSecondaryTypes, boolean waitForIndexes, IProgressMonitor monitor)", "signatureAfterChange": " \tpublic IType findType(String typeName, String packageName, boolean partialMatch, int acceptFlags, boolean considerSecondaryTypes, boolean waitForIndexes, IProgressMonitor monitor)", "diff": ["-\t\tIJavaProject project = null;", "+\t\tHashSet projects = null;", "-\t\t\tif (considerSecondaryTypes && project == null) {", "-\t\t\t\tproject = packages[i].getJavaProject();", "+\t\t\tif (considerSecondaryTypes) {", "+\t\t\t\tif (projects == null) projects = new HashSet(3);", "+\t\t\t\tprojects.add(packages[i].getJavaProject());", "-\t\tif (considerSecondaryTypes && project != null) {", "-\t\t\ttype = findSecondaryType(packageName, typeName, project, waitForIndexes, monitor);", "+\t\tif (considerSecondaryTypes && projects != null) {", "+\t\t\tIterator allProjects = projects.iterator();", "+\t\t\twhile (type == null && allProjects.hasNext()) {", "+\t\t\t\ttype = findSecondaryType(packageName, typeName, (IJavaProject) allProjects.next(), waitForIndexes, monitor);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2c5d1ab320627134072cbfc711f4cd0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "859e3e60153dbd5b801c22eee34ae0a345494b4e", "commitAfterChange": "1252d6bab1f9d9bcd087d91685fabf29808e5435", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic Answer findType( \t\t\tString typeName,  \t\t\tString packageName,  \t\t\tboolean partialMatch,  \t\t\tint acceptFlags,  \t\t\tboolean considerSecondaryTypes,  \t\t\tboolean waitForIndexes,  \t\t\tboolean checkRestrictions, \t\t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic Answer findType( \t\t\tString typeName,  \t\t\tString packageName,  \t\t\tboolean partialMatch,  \t\t\tint acceptFlags,  \t\t\tboolean considerSecondaryTypes,  \t\t\tboolean waitForIndexes,  \t\t\tboolean checkRestrictions, \t\t\tIProgressMonitor monitor)", "diff": ["+\t\tIJavaProject javaProject = null;", "-\t\t\tif (considerSecondaryTypes) {", "-\t\t\t\tif (projects == null) projects = new HashSet(3);", "-\t\t\t\tprojects.add(packages[i].getJavaProject());", "+\t\t\telse if (suggestedAnswer == null && considerSecondaryTypes) {", "+\t\t\t\tif (javaProject == null) {", "+\t\t\t\t\tjavaProject = packages[i].getJavaProject();", "+\t\t\t\t} else if (projects == null)  {", "+\t\t\t\t\tif (!javaProject.equals(packages[i].getJavaProject())) {", "+\t\t\t\t\t\tprojects = new HashSet(3);", "+\t\t\t\t\t\tprojects.add(javaProject);", "+\t\t\t\t\t\tprojects.add(packages[i].getJavaProject());", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tprojects.add(packages[i].getJavaProject());", "+\t\t\t\t}", "-\t\tif (considerSecondaryTypes && projects != null) {", "-\t\t\tIterator allProjects = projects.iterator();", "-\t\t\twhile (type == null && allProjects.hasNext()) {", "-\t\t\t\ttype = findSecondaryType(packageName, typeName, (IJavaProject) allProjects.next(), waitForIndexes, monitor);", "+\t\tif (considerSecondaryTypes && javaProject != null) {", "+\t\t\tif (projects == null) {", "+\t\t\t\ttype = findSecondaryType(packageName, typeName, javaProject, waitForIndexes, monitor);", "+\t\t\t} else {", "+\t\t\t\tIterator allProjects = projects.iterator();", "+\t\t\t\twhile (type == null && allProjects.hasNext()) {", "+\t\t\t\t\ttype = findSecondaryType(packageName, typeName, (IJavaProject) allProjects.next(), waitForIndexes, monitor);", "+\t\t\t\t}"]}], "num": 41277}
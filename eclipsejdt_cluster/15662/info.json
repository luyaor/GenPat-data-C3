{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d487c79a89dae5b5520fbc6f141a1daa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13155f2cd0aceea80c4db6da26f5b87c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tpublic boolean visit( \t\tArrayTypeReference arrayTypeReference, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\t\tAnnotationTypeMemberDeclaration annotationTypeMemberDeclaration, \t\t\tClassScope scope)", "diff": ["+\t}", "+\tpublic boolean visit(", "+\t\t\tAnnotationTypeMemberDeclaration annotationTypeMemberDeclaration,", "+\t\t\tClassScope scope) {        ", "+        /*", "+         * Print comments to get proper line number", "+         */", "+        this.scribe.printComment();        ", "+        this.scribe.printModifiers(annotationTypeMemberDeclaration.annotations, this);", "+\t\tthis.scribe.space();", "+\t\t/*", "+\t\t * Print the method return type", "+\t\t */\t", "+\t\tfinal TypeReference returnType = annotationTypeMemberDeclaration.returnType;", "+\t\tfinal MethodScope annotationTypeMemberDeclarationScope = annotationTypeMemberDeclaration.scope;", "+\t\t", "+\t\tif (returnType != null) {", "+\t\t\treturnType.traverse(this, annotationTypeMemberDeclarationScope);", "+\t\t}", "+\t\t/*", "+\t\t * Print the method name", "+\t\t */", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true); ", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_annotation_type_member_declaration); ", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_parens_in_annotation_type_member_declaration); ", "+", "+\t\t/*", "+\t\t * Check for extra dimensions", "+\t\t */", "+\t\tint extraDimensions = annotationTypeMemberDeclaration.extendedDimensions;", "+\t\tif (extraDimensions != 0) {", "+\t\t\t for (int i = 0; i < extraDimensions; i++) {", "+\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "+\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "+\t\t\t }", "+\t\t}", "+", "+\t\tExpression defaultValue = annotationTypeMemberDeclaration.memberValue;", "+\t\tif (defaultValue != null) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNamedefault, true);", "+\t\t\tthis.scribe.space();", "+\t\t\tdefaultValue.traverse(this, (BlockScope) null);", "+\t\t}", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "+\t\tthis.scribe.printTrailingComment();", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33848ab3d12dff405cd23d078a5c348e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "7bf89e29c34a348a2ed388f7cdb6c1016941cf61", "commitAfterChange": "cd5adcef3921beea7df4f6703ab58225bdb4ec39", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tprivate void format(AnnotationTypeDeclaration annotationTypeDeclaration)", "signatureAfterChange": " \t \tprivate void format(TypeDeclaration typeDeclaration)", "diff": ["-\tprivate void format(AnnotationTypeDeclaration annotationTypeDeclaration) {", "-        /*", "-         * Print comments to get proper line number", "-         */", "-        this.scribe.printComment();", "-        final int line = this.scribe.line; ", "-        ", "-        this.scribe.printModifiers(annotationTypeDeclaration.annotations, this);", "-\t\t/*", "-\t\t * Type name", "-\t\t */", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameAT, this.preferences.insert_space_before_at_in_annotation_type_declaration);", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameinterface, this.preferences.insert_space_after_at_in_annotation_type_declaration); ", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true); ", "-", "-\t\t/*", "-\t\t * Type body", "-\t\t */", "-\t\tString annotation_type_declaration_brace = this.preferences.brace_position_for_annotation_type_declaration;", "-", "-        formatLeftCurlyBrace(line, annotation_type_declaration_brace);", "-\t\tformatTypeOpeningBrace(annotation_type_declaration_brace, this.preferences.insert_space_before_opening_brace_in_annotation_type_declaration, annotationTypeDeclaration);", "-\t\t", "-\t\tif (this.preferences.indent_body_declarations_compare_to_type_header) {", "-\t\t\tthis.scribe.indent();", "-\t\t}", "-", "-\t\tformatTypeMembers(annotationTypeDeclaration);", "-", "-\t\tthis.scribe.printComment();", "-\t\t", "-\t\tif (this.preferences.indent_body_declarations_compare_to_type_header) {", "-\t\t\tthis.scribe.unIndent();", "-\t\t}", "-\t\t", "-\t\tif (this.preferences.insert_new_line_in_empty_type_declaration) {", "-\t\t\tthis.scribe.printNewLine();", "-\t\t}", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);", "-\t\tthis.scribe.printTrailingComment();", "-\t\tif (annotation_type_declaration_brace.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "-\t\t\tthis.scribe.unIndent();", "-\t\t}", "-\t\tif (hasComments()) {", "-\t\t\tthis.scribe.printNewLine();", "-\t\t}", "-\t}", "+\t\t\tcase IGenericType.ANNOTATION_TYPE :", "+\t\t\t\tclass_declaration_brace = this.preferences.brace_position_for_annotation_type_declaration;", "+\t\t\t\tspace_before_opening_brace =  this.preferences.insert_space_before_opening_brace_in_annotation_type_declaration;", "+\t\t\t\tbreak;", "+\t\t\t\tbreak;", "+\t\t\tcase IGenericType.ANNOTATION_TYPE :", "+\t\t\t\t// TODO (olivier) might want to add an option for annotation type", "+\t\t\t\tindent_body_declarations_compare_to_header = this.preferences.indent_body_declarations_compare_to_type_header;", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase IGenericType.ANNOTATION_TYPE :", "+\t\t\t\t// TODO (olivier) might want an option for annotation type", "+\t\t\t\tif (this.preferences.insert_new_line_in_empty_type_declaration) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "860bf174428c6504e582773ab9e72913", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic TextEdit format(String string, ConstructorDeclaration constructorDeclaration)", "signatureAfterChange": " \t \tprivate void format(AnnotationTypeDeclaration annotationTypeDeclaration)", "diff": ["+\tprivate void format(AnnotationTypeDeclaration annotationTypeDeclaration) {", "+        /*", "+         * Print comments to get proper line number", "+         */", "+        this.scribe.printComment();", "+        final int line = this.scribe.line; ", "+        ", "+        this.scribe.printModifiers(annotationTypeDeclaration.annotations, this);", "+\t\t/*", "+\t\t * Type name", "+\t\t */", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameAT, this.preferences.insert_space_before_at_in_annotation_type_declaration);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameinterface, this.preferences.insert_space_after_at_in_annotation_type_declaration); ", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true); ", "+", "+\t\t/*", "+\t\t * Type body", "+\t\t */", "+\t\tString annotation_type_declaration_brace = this.preferences.brace_position_for_annotation_type_declaration;", "+", "+        formatLeftCurlyBrace(line, annotation_type_declaration_brace);", "+\t\tformatTypeOpeningBrace(annotation_type_declaration_brace, this.preferences.insert_space_before_opening_brace_in_annotation_type_declaration, annotationTypeDeclaration);", "+\t\t", "+\t\tif (this.preferences.indent_body_declarations_compare_to_type_header) {", "+\t\t\tthis.scribe.indent();", "+\t\t}", "+", "+\t\tformatTypeMembers(annotationTypeDeclaration);", "+", "+\t\tthis.scribe.printComment();", "+\t\t", "+\t\tif (this.preferences.indent_body_declarations_compare_to_type_header) {", "+\t\t\tthis.scribe.unIndent();", "+\t\t}", "+\t\t", "+\t\tif (this.preferences.insert_new_line_in_empty_type_declaration) {", "+\t\t\tthis.scribe.printNewLine();", "+\t\t}", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);", "+\t\tthis.scribe.printTrailingComment();", "+\t\tif (annotation_type_declaration_brace.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "+\t\t\tthis.scribe.unIndent();", "+\t\t}", "+\t\tif (hasComments()) {", "+\t\t\tthis.scribe.printNewLine();", "+\t\t}", "+\t}"]}], "num": 15662}
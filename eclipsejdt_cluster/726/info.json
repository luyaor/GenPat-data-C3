{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b010119f9163b91ac28a06dd1cebf6b6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38f656535469353adab7ae6f5e23160b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/PackageBinding.java", "commitBeforeChange": "9ca626bedc0237851594e44ef2cc849d0e315bfd", "commitAfterChange": "917862b43f0f61fc17faa68fa8a6509dfa2a089a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  public Binding getTypeOrPackage(char[] name)", "signatureAfterChange": "  public Binding getTypeOrPackage(char[] name)", "diff": ["-\t\treferenceBinding = (ReferenceBinding) BinaryTypeBinding.resolveType(referenceBinding, this.environment, false /* no raw conversion for now */);", "-\t\tif (referenceBinding.isNestedType())", "-\t\t\treturn new ProblemReferenceBinding(new char[][]{name}, referenceBinding, ProblemReasons.InternalNameProvided);", "-\t\treturn referenceBinding;", "+\t\tif ((referenceBinding.tagBits & TagBits.HasMissingType) == 0) {", "+\t\t\treferenceBinding = (ReferenceBinding) BinaryTypeBinding.resolveType(referenceBinding, this.environment, false /* no raw conversion for now */);", "+\t\t\tif (referenceBinding.isNestedType()) {", "+\t\t\t\treturn new ProblemReferenceBinding(new char[][]{name}, referenceBinding, ProblemReasons.InternalNameProvided);", "+\t\t\t}", "+\t\t\treturn referenceBinding;", "+\t\t}", "-\tif (packageBinding != null && packageBinding != LookupEnvironment.TheNotFoundPackage)", "+\tif (packageBinding != null && packageBinding != LookupEnvironment.TheNotFoundPackage) {", "-", "+\t}", "-\t\t\tif (referenceBinding.isNestedType())", "+\t\t\tif (referenceBinding.isNestedType()) {", "+\t\t\t}", "-\t\tif ((packageBinding = findPackage(name)) != null)", "+\t\tif ((packageBinding = findPackage(name)) != null) {", "+\t\t}", "+\t\tif (referenceBinding != null && referenceBinding != LookupEnvironment.TheNotFoundType) {", "+\t\t\treturn referenceBinding; // found cached missing type - check if package conflict", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acf662310ce0ed7ff43cdc4a5f2b00d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/PackageBinding.java", "commitBeforeChange": "4915e7337ff3d3a037d50fa25171594a7d1743a5", "commitAfterChange": "38fd702e92bc9dac5e95232940541493c9cc3922", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  public Binding getTypeOrPackage(char[] name)", "signatureAfterChange": "  public Binding getTypeOrPackage(char[] name)", "diff": ["+\t\treferenceBinding = (ReferenceBinding) BinaryTypeBinding.resolveType(referenceBinding, this.environment, false /* no raw conversion for now */);", "+\t\tif (referenceBinding.isNestedType()) {", "+\t\t\treturn new ProblemReferenceBinding(new char[][]{name}, referenceBinding, ProblemReasons.InternalNameProvided);", "+\t\t}", "-\t\t\treferenceBinding = (ReferenceBinding) BinaryTypeBinding.resolveType(referenceBinding, this.environment, false /* no raw conversion for now */);", "-\t\t\tif (referenceBinding.isNestedType()) {", "-\t\t\t\treturn new ProblemReferenceBinding(new char[][]{name}, referenceBinding, ProblemReasons.InternalNameProvided);", "-\t\t\t}", "+\t\t// referenceBinding is a MissingType, will return it if no package is found"]}], "num": 726}
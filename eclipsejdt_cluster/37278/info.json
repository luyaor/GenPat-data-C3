{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "409d9f5c36ffa93c583292cfc97e3502", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e4378aa7a5a1547348b1d4ff3b73ac9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "3a7eebe0921eeefbdbf1fe4891891b6335310197", "commitAfterChange": "e8aa72d0e85424c76c1185b7518db6803dde6255", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void generateLogicalOr(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateLogicalOr(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t */", "-\tpublic void generateLogicalOr(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {", "-\t\t\t", "-\t\tConstant condConst;", "-\t\tif ((left.implicitConversion & COMPILE_TYPE_MASK) == T_boolean) {", "-\t\t\tif ((condConst = left.optimizedBooleanConstant()) != Constant.NotAConstant) {", "-\t\t\t\tif (condConst.booleanValue() == true) {", "-\t\t\t\t\t// <something equivalent to true> | x", "-\t\t\t\t\tleft.generateCode(currentScope, codeStream, false);", "-\t\t\t\t\tright.generateCode(currentScope, codeStream, false);", "-\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\tcodeStream.iconst_1();", "-\t\t\t\t\t}", "-\t\t\t\t\t// reposition the endPC", "-\t\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "-\t\t\t\t} else {", "-\t\t\t\t\t// <something equivalent to false> | x", "-\t\t\t\t\tleft.generateCode(currentScope, codeStream, false);", "-\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t}", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tif ((condConst = right.optimizedBooleanConstant()) != Constant.NotAConstant) {", "-\t\t\t\tif (condConst.booleanValue() == true) {", "-\t\t\t\t\t// x | <something equivalent to true>", "-\t\t\t\t\tleft.generateCode(currentScope, codeStream, false);", "-\t\t\t\t\tright.generateCode(currentScope, codeStream, false);", "-\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\tcodeStream.iconst_1();", "-\t\t\t\t\t}", "-\t\t\t\t\t// reposition the endPC", "-\t\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "-\t\t\t\t} else {", "-\t\t\t\t\t// x | <something equivalent to false>", "-\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\tright.generateCode(currentScope, codeStream, false);", "-\t\t\t\t}", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t}", "-\t\t// default case", "-\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\tif (valueRequired) {", "-\t\t\tcodeStream.ior();", "-\t\t}", "-\t\t// reposition the endPC", "-\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "-\t}", "+ */", "+public void generateLogicalOr(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {", "+\tConstant condConst;", "+\tif ((this.left.implicitConversion & TypeIds.COMPILE_TYPE_MASK) == TypeIds.T_boolean) {", "+\t\tif ((condConst = this.left.optimizedBooleanConstant()) != Constant.NotAConstant) {", "+\t\t\tif (condConst.booleanValue() == true) {", "+\t\t\t\t// <something equivalent to true> | x", "+\t\t\t\tthis.left.generateCode(currentScope, codeStream, false);", "+\t\t\t\tthis.right.generateCode(currentScope, codeStream, false);", "+\t\t\t\tif (valueRequired) {", "+\t\t\t\t\tcodeStream.iconst_1();", "+\t\t\t\t}", "+\t\t\t\t// reposition the endPC", "+\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "+\t\t\t} else {", "+\t\t\t\t// <something equivalent to false> | x", "+\t\t\t\tthis.left.generateCode(currentScope, codeStream, false);", "+\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t\tif ((condConst = this.right.optimizedBooleanConstant()) != Constant.NotAConstant) {", "+\t\t\tif (condConst.booleanValue() == true) {", "+\t\t\t\t// x | <something equivalent to true>", "+\t\t\t\tthis.left.generateCode(currentScope, codeStream, false);", "+\t\t\t\tthis.right.generateCode(currentScope, codeStream, false);", "+\t\t\t\tif (valueRequired) {", "+\t\t\t\t\tcodeStream.iconst_1();", "+\t\t\t\t}", "+\t\t\t\t// reposition the endPC", "+\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "+\t\t\t} else {", "+\t\t\t\t// x | <something equivalent to false>", "+\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\tthis.right.generateCode(currentScope, codeStream, false);", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t// default case", "+\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\tif (valueRequired) {", "+\t\tcodeStream.ior();", "+\t}", "+\t// reposition the endPC", "+\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b581ac27947d8be21f01b44982c5678d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "3a7eebe0921eeefbdbf1fe4891891b6335310197", "commitAfterChange": "e8aa72d0e85424c76c1185b7518db6803dde6255", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void generateOptimizedLogicalXor( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tBranchLabel trueLabel, \t\tBranchLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " public void generateOptimizedLogicalXor(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired)", "diff": ["-\t */", "-\tpublic void generateOptimizedLogicalXor(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tBranchLabel trueLabel,", "-\t\tBranchLabel falseLabel,", "-\t\tboolean valueRequired) {", "-\t\t\t", "-\t\tConstant condConst;", "-\t\tif ((left.implicitConversion & COMPILE_TYPE_MASK) == T_boolean) {", "-\t\t\tif ((condConst = left.optimizedBooleanConstant()) != Constant.NotAConstant) {", "-\t\t\t\tif (condConst.booleanValue() == true) {", "-\t\t\t\t\t// <something equivalent to true> ^ x", "-\t\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\tfalse);", "-\t\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\tfalseLabel, // negating", "-\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t} else {", "-\t\t\t\t\t// <something equivalent to false> ^ x", "-\t\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\tfalse);", "-\t\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t}", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tif ((condConst = right.optimizedBooleanConstant()) != Constant.NotAConstant) {", "-\t\t\t\tif (condConst.booleanValue() == true) {", "-\t\t\t\t\t// x ^ <something equivalent to true>", "-\t\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\tfalseLabel, // negating", "-\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\tfalse);", "-\t\t\t\t} else {", "-\t\t\t\t\t// x ^ <something equivalent to false>", "-\t\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\tfalse);", "-\t\t\t\t}", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t}", "-\t\t// default case", "-\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\tif (valueRequired) {", "-\t\t\tcodeStream.ixor();", "-\t\t\tif (falseLabel == null) {", "-\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t// implicit falling through the FALSE case", "-\t\t\t\t\tcodeStream.ifne(trueLabel);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\t// implicit falling through the TRUE case", "-\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\tcodeStream.ifeq(falseLabel);", "-\t\t\t\t} else {", "-\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t// reposition the endPC", "-\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "-\t}", "+ */", "+public void generateOptimizedLogicalXor(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired) {", "+\tConstant condConst;", "+\tif ((this.left.implicitConversion & TypeIds.COMPILE_TYPE_MASK) == TypeIds.T_boolean) {", "+\t\tif ((condConst = this.left.optimizedBooleanConstant()) != Constant.NotAConstant) {", "+\t\t\tif (condConst.booleanValue() == true) {", "+\t\t\t\t// <something equivalent to true> ^ x", "+\t\t\t\tthis.left.generateOptimizedBoolean(", "+\t\t\t\t\tcurrentScope,", "+\t\t\t\t\tcodeStream,", "+\t\t\t\t\ttrueLabel,", "+\t\t\t\t\tfalseLabel,", "+\t\t\t\t\tfalse);", "+\t\t\t\tthis.right.generateOptimizedBoolean(", "+\t\t\t\t\tcurrentScope,", "+\t\t\t\t\tcodeStream,", "+\t\t\t\t\tfalseLabel, // negating", "+\t\t\t\t\ttrueLabel,", "+\t\t\t\t\tvalueRequired);", "+\t\t\t} else {", "+\t\t\t\t// <something equivalent to false> ^ x", "+\t\t\t\tthis.left.generateOptimizedBoolean(", "+\t\t\t\t\tcurrentScope,", "+\t\t\t\t\tcodeStream,", "+\t\t\t\t\ttrueLabel,", "+\t\t\t\t\tfalseLabel,", "+\t\t\t\t\tfalse);", "+\t\t\t\tthis.right.generateOptimizedBoolean(", "+\t\t\t\t\tcurrentScope,", "+\t\t\t\t\tcodeStream,", "+\t\t\t\t\ttrueLabel,", "+\t\t\t\t\tfalseLabel,", "+\t\t\t\t\tvalueRequired);", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t\tif ((condConst = this.right.optimizedBooleanConstant()) != Constant.NotAConstant) {", "+\t\t\tif (condConst.booleanValue() == true) {", "+\t\t\t\t// x ^ <something equivalent to true>", "+\t\t\t\tthis.left.generateOptimizedBoolean(", "+\t\t\t\t\tcurrentScope,", "+\t\t\t\t\tcodeStream,", "+\t\t\t\t\tfalseLabel, // negating", "+\t\t\t\t\ttrueLabel,", "+\t\t\t\t\tvalueRequired);", "+\t\t\t\tthis.right.generateOptimizedBoolean(", "+\t\t\t\t\tcurrentScope,", "+\t\t\t\t\tcodeStream,", "+\t\t\t\t\ttrueLabel,", "+\t\t\t\t\tfalseLabel,", "+\t\t\t\t\tfalse);", "+\t\t\t} else {", "+\t\t\t\t// x ^ <something equivalent to false>", "+\t\t\t\tthis.left.generateOptimizedBoolean(", "+\t\t\t\t\tcurrentScope,", "+\t\t\t\t\tcodeStream,", "+\t\t\t\t\ttrueLabel,", "+\t\t\t\t\tfalseLabel,", "+\t\t\t\t\tvalueRequired);", "+\t\t\t\tthis.right.generateOptimizedBoolean(", "+\t\t\t\t\tcurrentScope,", "+\t\t\t\t\tcodeStream,", "+\t\t\t\t\ttrueLabel,", "+\t\t\t\t\tfalseLabel,", "+\t\t\t\t\tfalse);", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t// default case", "+\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\tif (valueRequired) {", "+\t\tcodeStream.ixor();", "+\t\tif (falseLabel == null) {", "+\t\t\tif (trueLabel != null) {", "+\t\t\t\t// implicit falling through the FALSE case", "+\t\t\t\tcodeStream.ifne(trueLabel);", "+\t\t\t}", "+\t\t} else {", "+\t\t\t// implicit falling through the TRUE case", "+\t\t\tif (trueLabel == null) {", "+\t\t\t\tcodeStream.ifeq(falseLabel);", "+\t\t\t} else {", "+\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+\t\t\t}", "+\t\t}", "+\t}", "+\t// reposition the endPC", "+\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebce1b03b7b004f92cd43e7b45ef26b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "3a7eebe0921eeefbdbf1fe4891891b6335310197", "commitAfterChange": "e8aa72d0e85424c76c1185b7518db6803dde6255", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void generateLogicalAnd( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " public void generateLogicalAnd(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t */", "-\tpublic void generateLogicalAnd(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tboolean valueRequired) {", "-\t\t\t", "-\t\tConstant condConst;", "-\t\tif ((left.implicitConversion & COMPILE_TYPE_MASK) == T_boolean) {", "-\t\t\tif ((condConst = left.optimizedBooleanConstant()) != Constant.NotAConstant) {", "-\t\t\t\tif (condConst.booleanValue() == true) {", "-\t\t\t\t\t// <something equivalent to true> & x", "-\t\t\t\t\tleft.generateCode(currentScope, codeStream, false);", "-\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t} else {", "-\t\t\t\t\t// <something equivalent to false> & x", "-\t\t\t\t\tleft.generateCode(currentScope, codeStream, false);", "-\t\t\t\t\tright.generateCode(currentScope, codeStream, false);", "-\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\tcodeStream.iconst_0();", "-\t\t\t\t\t}", "-\t\t\t\t\t// reposition the endPC", "-\t\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "-\t\t\t\t}", "-\t\t\t\treturn;", "-\t\t\t} ", "-\t\t\tif ((condConst = right.optimizedBooleanConstant()) != Constant.NotAConstant) {", "-\t\t\t\tif (condConst.booleanValue() == true) {", "-\t\t\t\t\t// x & <something equivalent to true>", "-\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\tright.generateCode(currentScope, codeStream, false);", "-\t\t\t\t} else {", "-\t\t\t\t\t// x & <something equivalent to false>", "-\t\t\t\t\tleft.generateCode(currentScope, codeStream, false);", "-\t\t\t\t\tright.generateCode(currentScope, codeStream, false);", "-\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\tcodeStream.iconst_0();", "-\t\t\t\t\t}", "-\t\t\t\t\t// reposition the endPC", "-\t\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "-\t\t\t\t}", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t}", "-\t\t// default case", "-\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\tif (valueRequired) {", "-\t\t\tcodeStream.iand();", "-\t\t}", "-\t\t// reposition the endPC", "-\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "-\t}", "+ */", "+public void generateLogicalAnd(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {", "+\tConstant condConst;", "+\tif ((this.left.implicitConversion & TypeIds.COMPILE_TYPE_MASK) == TypeIds.T_boolean) {", "+\t\tif ((condConst = this.left.optimizedBooleanConstant()) != Constant.NotAConstant) {", "+\t\t\tif (condConst.booleanValue() == true) {", "+\t\t\t\t// <something equivalent to true> & x", "+\t\t\t\tthis.left.generateCode(currentScope, codeStream, false);", "+\t\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t// <something equivalent to false> & x", "+\t\t\t\tthis.left.generateCode(currentScope, codeStream, false);", "+\t\t\t\tthis.right.generateCode(currentScope, codeStream, false);", "+\t\t\t\tif (valueRequired) {", "+\t\t\t\t\tcodeStream.iconst_0();", "+\t\t\t\t}", "+\t\t\t\t// reposition the endPC", "+\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "+\t\t\t}", "+\t\t\treturn;", "+\t\t} ", "+\t\tif ((condConst = this.right.optimizedBooleanConstant()) != Constant.NotAConstant) {", "+\t\t\tif (condConst.booleanValue() == true) {", "+\t\t\t\t// x & <something equivalent to true>", "+\t\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\tthis.right.generateCode(currentScope, codeStream, false);", "+\t\t\t} else {", "+\t\t\t\t// x & <something equivalent to false>", "+\t\t\t\tthis.left.generateCode(currentScope, codeStream, false);", "+\t\t\t\tthis.right.generateCode(currentScope, codeStream, false);", "+\t\t\t\tif (valueRequired) {", "+\t\t\t\t\tcodeStream.iconst_0();", "+\t\t\t\t}", "+\t\t\t\t// reposition the endPC", "+\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t// default case", "+\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\tif (valueRequired) {", "+\t\tcodeStream.iand();", "+\t}", "+\t// reposition the endPC", "+\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "+}"]}], "num": 37278}
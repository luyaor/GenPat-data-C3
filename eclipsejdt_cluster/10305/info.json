{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "078daa3c9164a5b4afa634ec4f8e654f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f8b9396c093dc8174ac9be2758e0a1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "6d7da1254151724e22f25d1be0ba01cba8049f5e", "commitAfterChange": "31f5d8c3352dfd40743cbafcdc19d9f5e7640d54", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambda)", "signatureAfterChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambda)", "diff": ["-\t\torg.eclipse.jdt.internal.compiler.ast.Argument[] arguments = lambda.arguments;", "+\t\torg.eclipse.jdt.internal.compiler.ast.Argument[] arguments = lambda.arguments();", "-\t\tif (lambda.body instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {", "-\t\t\tlambdaExpression.setBody(convert((org.eclipse.jdt.internal.compiler.ast.Expression) lambda.body));", "+\t\tfinal org.eclipse.jdt.internal.compiler.ast.Statement body = lambda.body();", "+\t\tif (body instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {", "+\t\t\tlambdaExpression.setBody(convert((org.eclipse.jdt.internal.compiler.ast.Expression) body));", "-\t\t\tlambdaExpression.setBody(convert((org.eclipse.jdt.internal.compiler.ast.Block) lambda.body));", "+\t\t\tlambdaExpression.setBody(convert((org.eclipse.jdt.internal.compiler.ast.Block) body));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a053878d930bffa78fdcb2933eae0d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic Name convert(org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference reference)", "signatureAfterChange": "  \t \tpublic Annotation convert(org.eclipse.jdt.internal.compiler.ast.Annotation annotation)", "diff": ["-", "-\tpublic Name convert(org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference reference) {", "-\t\treturn convert(reference.qualification);", "-\t}", "+\t", "+\tpublic Annotation convert(org.eclipse.jdt.internal.compiler.ast.Annotation annotation) {", "+\t\tif (annotation instanceof org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation) annotation);", "+\t\t} else if (annotation instanceof org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation) annotation);", "+\t\t} else {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.NormalAnnotation) annotation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bf5067964939795c3e55414edaf7c2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 91, "signatureBeforeChange": " \t \tpublic Expression convertToExpression(org.eclipse.jdt.internal.compiler.ast.Statement statement)", "signatureAfterChange": " \t \tpublic Expression convertToExpression(org.eclipse.jdt.internal.compiler.ast.Statement statement)", "diff": ["-\t", "-\tpublic Expression convertToExpression(org.eclipse.jdt.internal.compiler.ast.Statement statement) {", "-\t\tif (statement instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.Expression) statement);", "-\t\t}", "-\t\t// unsupported", "-\t\tthrow new IllegalArgumentException(\"Not yet implemented: convert(\" + statement.getClass() + \")\");//$NON-NLS-1$//$NON-NLS-2$", "-\t}", "+\t", "+\tpublic Expression convertToExpression(org.eclipse.jdt.internal.compiler.ast.Statement statement) {", "+\t\tif (statement instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.Expression) statement);", "+\t\t} else {", "+\t\t\treturn null;", "+\t\t}", "+\t}"]}], "num": 10305}
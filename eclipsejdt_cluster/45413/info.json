{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a1f0e5b38d5360f28e2a9e92ac6ae47", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a45e3e6bc730c68f51a675144e065be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void test009() throws Exception", "signatureAfterChange": " \tprotected Map getCompilerOptions()", "diff": ["-\t// throws", "-\tpublic void test009() throws Exception {", "+\t// Enables the tests to run individually", "+\tprotected Map getCompilerOptions() {", "+\t\tMap defaultOptions = super.getCompilerOptions();", "+\t\tdefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_8);", "+\t\tdefaultOptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_8);", "+\t\tdefaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_8);", "+\t\treturn defaultOptions;", "+\t}", "-\t\t\t\t\"E.java\",", "-\t\t\t\t\"class E extends RuntimeException {\\n\" +", "-\t\t\t\t\"\tprivate static final long serialVersionUID = 1L;\\n\" +", "-\t\t\t\t\"E1.java\",", "-\t\t\t\t\"class E1 extends RuntimeException {\\n\" +", "-\t\t\t\t\"\tprivate static final long serialVersionUID = 1L;\\n\" +", "-\t\t\t\t\"E2.java\",", "-\t\t\t\t\"class E2 extends RuntimeException {\\n\" +", "-\t\t\t\t\"\tprivate static final long serialVersionUID = 1L;\\n\" +", "-\t\t\t\t\"\tvoid foo() throws @A(\\\"Hello, World!\\\") E, E1, @B @C('(') E2 {}\\n\" +", "-\t\t\t\"      #25 @A(\\n\" + ", "-\t\t\t\"        #26 value=\\\"Hello, World!\\\" (constant type)\\n\" + ", "-\t\t\t\"        target type = 0x16 THROWS\\n\" + ", "-\t\t\t\"        throws index = 0\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"      #28 @C(\\n\" + ", "-\t\t\t\"        #26 value=\\'(\\' (constant type)\\n\" + ", "-\t\t\t\"        target type = 0x16 THROWS\\n\" + ", "-\t\t\t\"        throws index = 2\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"    RuntimeInvisibleTypeAnnotations: \\n\" + ", "-\t\t\t\"      #23 @B(\\n\" + ", "-\t\t\t\"        target type = 0x16 THROWS\\n\" + ", "-\t\t\t\"        throws index = 2\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc7eb1b5f80fc0d6f232a3d9bfa88049", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "33b6ddc355225393e9c9a4c6f58c7187e9dd64c0", "commitAfterChange": "ac5139f97b2ef313a03ae57144bf0ffdd5bcb6f8", "methodNumberBeforeChange": 1082, "methodNumberAfterChange": 1082, "signatureBeforeChange": " public void test1054()", "signatureAfterChange": " public void test1054()", "diff": ["+\tMap customOptions = getCompilerOptions();", "+\t// check no unsafe type operation problem is issued", "+\tcustomOptions.put(CompilerOptions.OPTION_ReportUncheckedTypeOperation, CompilerOptions.IGNORE);", "+\tcustomOptions.put(CompilerOptions.OPTION_ReportRawTypeReference, CompilerOptions.IGNORE);", "-\t\t\"1. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\"\tClass clazz= X.class;\\n\" + ", "-\t\t\"\t^^^^^\\n\" + ", "-\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "-\t\t\"\tBar bar= clazz.getAnnotation(Bar.class);\\n\" + ", "-\t\t\"\t         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type safety: The method getAnnotation(Class) belongs to the raw type Class. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 11)\\n\" + ", "-\t", "-\tif (isJRELevel(AbstractCompilerTest.F_1_6|AbstractCompilerTest.F_1_7)) {", "-\t\texpectedOutput =", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"\tClass clazz= X.class;\\n\" + ", "-\t\t\t\"\t^^^^^\\n\" + ", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tBar bar= clazz.getAnnotation(Bar.class);\\n\" + ", "-\t\t\t\"\t         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method getAnnotation(Class) belongs to the raw type Class. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tBar bar= clazz.getAnnotation(Bar.class);\\n\" + ", "-\t\t\t\"\t         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from Annotation to Bar\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tMethod method= clazz.getMethod(\\\"bar\\\");\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method getMethod(String, Class...) belongs to the raw type Class. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\";", "-\t}", "-\t\t}, ", "-\t\texpectedOutput);", "+\t\t},", "+\t\texpectedOutput,", "+\t\tnull,", "+\t\ttrue,", "+\t\tcustomOptions);"]}], "num": 45413}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b747000e56883acc2d15c46dfcb627c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b1467d9eded54551339fec7180f9ce1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "1987bebfc0499fe07d643a641d2e74ff184f5cc7", "commitAfterChange": "2b6b723d87be49aecbb1b89e893d389af560ea10", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "  \tpublic List traverse(MethodBinding methodBinding, int maxLocals, byte[] bytecodes, int codeOffset, int codeLength, Map frames, boolean isClinit)", "signatureAfterChange": "  \tpublic List traverse(MethodBinding methodBinding, int maxLocals, byte[] bytecodes, int codeOffset, int codeLength, Map frames, boolean isClinit)", "diff": ["+\t\t\t\tcase Opcodes.OPC_invokedynamic:", "+\t\t\t\t\tindex = u2At(bytecodes, 1, pc);", "+\t\t\t\t\tnameAndTypeIndex = u2At(poolContents, 3,", "+\t\t\t\t\t\t\tconstantPoolOffsets[index]);", "+\t\t\t\t\tutf8index = u2At(poolContents, 3,", "+\t\t\t\t\t\t\tconstantPoolOffsets[nameAndTypeIndex]);", "+\t\t\t\t\tdescriptor = utf8At(poolContents,", "+\t\t\t\t\t\t\tconstantPoolOffsets[utf8index] + 3, u2At(", "+\t\t\t\t\t\t\t\t\tpoolContents, 1,", "+\t\t\t\t\t\t\t\t\tconstantPoolOffsets[utf8index]));", "+\t\t\t\t\tframe.numberOfStackItems -= getParametersCount(descriptor);", "+\t\t\t\t\treturnType = getReturnType(descriptor);", "+\t\t\t\t\tif (returnType.length == 1) {", "+\t\t\t\t\t\t// base type", "+\t\t\t\t\t\tswitch(returnType[0]) {", "+\t\t\t\t\t\t\tcase 'Z':", "+\t\t\t\t\t\t\t\tframe.addStackItem(TypeBinding.BOOLEAN);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 'B':", "+\t\t\t\t\t\t\t\tframe.addStackItem(TypeBinding.BYTE);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 'C':", "+\t\t\t\t\t\t\t\tframe.addStackItem(TypeBinding.CHAR);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 'D':", "+\t\t\t\t\t\t\t\tframe.addStackItem(TypeBinding.DOUBLE);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 'F':", "+\t\t\t\t\t\t\t\tframe.addStackItem(TypeBinding.FLOAT);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 'I':", "+\t\t\t\t\t\t\t\tframe.addStackItem(TypeBinding.INT);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 'J':", "+\t\t\t\t\t\t\t\tframe.addStackItem(TypeBinding.LONG);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 'S':", "+\t\t\t\t\t\t\t\tframe.addStackItem(TypeBinding.SHORT);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (returnType[0] == '[') {", "+\t\t\t\t\t\t\tframe.addStackItem(new VerificationTypeInfo(0, returnType));", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tframe.addStackItem(new VerificationTypeInfo(0, CharOperation.subarray(returnType, 1, returnType.length - 1)));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tpc += 5;", "+\t\t\t\t\tbreak;", "-\t\t\t\t\tthis.codeStream.methodDeclaration.scope.problemReporter().abortDueToInternalError(", "-\t\t\t\t\t\t\tMessages.bind(", "-\t\t\t\t\t\t\t\t\tMessages.abort_invalidOpcode,", "-\t\t\t\t\t\t\t\t\tnew Object[] {", "-\t\t\t\t\t\t\t\t\t\tnew Byte(opcode),", "-\t\t\t\t\t\t\t\t\t\tnew Integer(pc),", "-\t\t\t\t\t\t\t\t\t\tnew String(methodBinding.shortReadableName()),", "-\t\t\t\t\t\t\t\t\t}),", "-\t\t\t\t\t\t\tthis.codeStream.methodDeclaration);", "+\t\t\t\t\tif (this.codeStream.methodDeclaration != null) {", "+\t\t\t\t\t\tthis.codeStream.methodDeclaration.scope.problemReporter().abortDueToInternalError(", "+\t\t\t\t\t\t\t\tMessages.bind(", "+\t\t\t\t\t\t\t\t\t\tMessages.abort_invalidOpcode,", "+\t\t\t\t\t\t\t\t\t\tnew Object[] {", "+\t\t\t\t\t\t\t\t\t\t\t\tnew Byte(opcode),", "+\t\t\t\t\t\t\t\t\t\t\t\tnew Integer(pc),", "+\t\t\t\t\t\t\t\t\t\t\t\tnew String(methodBinding.shortReadableName()),", "+\t\t\t\t\t\t\t\t\t\t}),", "+\t\t\t\t\t\t\t\t\t\tthis.codeStream.methodDeclaration);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.codeStream.lambdaExpression.scope.problemReporter().abortDueToInternalError(", "+\t\t\t\t\t\t\t\tMessages.bind(", "+\t\t\t\t\t\t\t\t\t\tMessages.abort_invalidOpcode,", "+\t\t\t\t\t\t\t\t\t\tnew Object[] {", "+\t\t\t\t\t\t\t\t\t\t\t\tnew Byte(opcode),", "+\t\t\t\t\t\t\t\t\t\t\t\tnew Integer(pc),", "+\t\t\t\t\t\t\t\t\t\t\t\tnew String(methodBinding.shortReadableName()),", "+\t\t\t\t\t\t\t\t\t\t}),", "+\t\t\t\t\t\t\t\t\t\tthis.codeStream.lambdaExpression);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f0cd2ee6e8b77c5c3b8402e06cd78ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "1518d3ade03d9d9dfb08bcae5ab3261eea2b095b", "commitAfterChange": "4f8ce9c44083e58564232003d59f7f12a74c51b9", "methodNumberBeforeChange": 238, "methodNumberAfterChange": 238, "signatureBeforeChange": " \tprotected void tearDown() throws Exception", "signatureAfterChange": " \tprotected void tearDown() throws Exception", "diff": ["+\t\tif (JavaModelManager.DEBUG_302850) {", "+\t\t\tSystem.out.println(\"\t- Options before tear down:\");", "+\t\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "+\t\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "+\t\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t\t\tSystem.out.println(org.eclipse.jdt.core.tests.util.Util.indentString(new CompilerOptions(JavaCore.getOptions()).toString(), 2));", "+\t\t}", "+", "+", "+\t\tif (JavaModelManager.DEBUG_302850) {", "+\t\t\tSystem.out.println(\"\t- Options before comparison with defaults:\");", "+\t\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "+\t\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "+\t\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t\t\tSystem.out.println(org.eclipse.jdt.core.tests.util.Util.indentString(new CompilerOptions(JavaCore.getOptions()).toString(), 2));", "+\t\t\tSystem.out.println(\"\t- Default Options before comparison:\");", "+\t\t\tSystem.out.println(org.eclipse.jdt.core.tests.util.Util.indentString(new CompilerOptions(JavaCore.getDefaultOptions()).toString(), 2));", "+\t\t\tSystem.out.println(\"================================================================================\");", "+\t\t}", "+\t\t", "+\t\tJavaModelManager.DEBUG_302850 = false;"]}], "num": 5304}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b21faab42784ee821225048383d82c73", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19f3c640dcfee63d0cf771ba52d3c5d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "06cb2fb2cd016c5bb9806c77f9b924461e74f729", "commitAfterChange": "f722c144cbd3d9ea00d9fcbd08f20190051637e3", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 78, "signatureBeforeChange": " public void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " public void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\t\t\t\t\tswitch(token.charAt(0)) {", "+\t\t\t\t\t\t\tcase '+' :", "+\t\t\t\t\t\t\t\tisEnabling = true;", "+\t\t\t\t\t\t\t\ttoken = token.substring(1);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase '-' :", "+\t\t\t\t\t\t\t\tisEnabling = false;", "+\t\t\t\t\t\t\t\ttoken = token.substring(1);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "-\t\t\t\t\tif (tokenCounter == 0)", "+\t\t\t\t\tif (tokenCounter == 0) {", "+\t\t\t\t\t}", "+", "+\t", "+\tif (this.pendingErrors != null) {", "+\t\tfor (Iterator iterator = this.pendingErrors.iterator(); iterator.hasNext(); ) {", "+\t\t\tString message = (String) iterator.next();", "+\t\t\tthis.logger.logPendingError(message);", "+\t\t}", "+\t\tthis.pendingErrors = null;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3addc9f8478986d393c41453c0044772", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "e49387dc67d37e060d459ec8bca371fa0bf2a443", "commitAfterChange": "dc892c0e1acc8f29aa208cac93db1f34ba940595", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tprivate static TypeBinding[] resolveSubstituteConstraints(Scope scope, TypeVariableBinding[] typeVariables, TypeBinding[] substitutes, boolean considerEXTENDSConstraints, Map collectedSubstitutes)", "signatureAfterChange": " \t \tprivate static TypeBinding[] resolveSubstituteConstraints(Scope scope, TypeVariableBinding[] typeVariables, TypeBinding[] substitutes, boolean considerEXTENDSConstraints, Map collectedSubstitutes)", "diff": ["-//\t\t\t\t\t\t\tif (equalSubstitute == current) continue nextConstraint;", "+\t\t\t\t\t\t\tif (equalSubstitute == current) {", "+\t\t\t\t\t\t\t\t// try to find a better different match if any in subsequent equal candidates", "+\t\t\t\t\t\t\t\tfor (int k = j+1; k < equalLength; k++) {", "+\t\t\t\t\t\t\t\t\tequalSubstitute = equalSubstitutes[k];", "+\t\t\t\t\t\t\t\t\tif (equalSubstitute != current && equalSubstitute != null) {", "+\t\t\t\t\t\t\t\t\t\tsubstitutes[i] = equalSubstitute;", "+\t\t\t\t\t\t\t\t\t\tcontinue nextTypeParameter;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tsubstitutes[i] = current;", "+\t\t\t\t\t\t\t\tcontinue nextTypeParameter;", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e72324f645e2fa35fc8be2b47b8c2919", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "e60903fe9d1be9609e2d7018794b66ab39d77839", "commitAfterChange": "1cff9f79be5fd6fcc760af55214bca85f6dbdfe8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  void write(DataOutputStream out) throws IOException", "signatureAfterChange": "  void write(DataOutputStream out) throws IOException", "diff": ["- * int\t\t\tbuild number", "- * int\t\t\tlast structural build number", "+ * int\t\t\t\tbuild number", "+ * int\t\t\t\tlast structural build number", "- * int\t\t\tid", "+ * int\t\t\t\tid", "- * int\t\t\tid", "+ * int\t\t\t\tid", "-\t\t\t\tout.writeByte(3);", "-\t\t\t\tout.writeUTF(jar.relativePathname);", "-\t\t\t} else {", "-\t\t\t\tout.writeByte(4);", "+\t\t\t\tout.writeByte(3); // external jar", "+\t\t\t} else {", "+\t\t\t\tout.writeByte(4); // project relative jar", "+\t\t\t\tout.writeUTF(jar.relativePathname);", "- * int\t\t\tlast structural build number", "+ * int\t\t\t\tlast structural build number", "- * int\t\t\tinterned locator id", "+ * int\t\t\t\tinterned locator id"]}], "num": 67200}
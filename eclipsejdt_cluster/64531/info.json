{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "edc61292f2c3989c665d20cab6bd0ec9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e836c5db2371335d6c9a0e0a92ab9e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "66a68a77c79dc8161adf91226d8f791e46bc037a", "commitAfterChange": "7bdcf3d951d8bd1150c90600a140b9efc498e23b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate static char[] removePrefix(char[] name, char[][] prefixes)", "signatureAfterChange": " \t \tprivate static char[] removePrefix(char[] name, char[][] prefixes)", "diff": ["+\t\t\tint nameLength = name.length;", "-\t\t\t\tint max = prefix.length < name.length ? prefix.length : name.length;", "-\t\t\t\tint currLen = 0;", "-\t\t\t\tfor (; currLen < max; currLen++) {", "-\t\t\t\t\tif(Character.toLowerCase(prefix[currLen]) != Character.toLowerCase(name[currLen])) {", "-\t\t\t\t\t\tif (currLen > bestLength) {", "-\t\t\t\t\t\t\tbestLength = currLen;", "+\t\t\t\t", "+\t\t\t\tint prefixLength = prefix.length;", "+\t\t\t\tif(prefixLength <= nameLength) {", "+\t\t\t\t\tif(CharOperation.prefixEquals(prefix, name, false)) {", "+\t\t\t\t\t\tif (prefixLength > bestLength) {", "+\t\t\t\t\t\t\tbestLength = prefixLength;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tif(currLen == max && currLen > bestLength) {", "-\t\t\t\t\tbestLength = max;", "+\t\t\t\t} else {", "+\t\t\t\t\tint currLen = 0;", "+\t\t\t\t\tfor (; currLen < nameLength; currLen++) {", "+\t\t\t\t\t\tif(Character.toLowerCase(prefix[currLen]) != Character.toLowerCase(name[currLen])) {", "+\t\t\t\t\t\t\tif (currLen > bestLength) {", "+\t\t\t\t\t\t\t\tbestLength = currLen;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif(currLen == nameLength && currLen > bestLength) {", "+\t\t\t\t\t\tbestLength = currLen;", "+\t\t\t\t\t}", "-\t\t\t\tif(bestLength == name.length) {", "+\t\t\t\tif(bestLength == nameLength) {", "-\t\t\t\t\twithoutPrefixName = CharOperation.subarray(name, bestLength, name.length);", "+\t\t\t\t\twithoutPrefixName = CharOperation.subarray(name, bestLength, nameLength);", "+//\t\t", "+//\t\t", "+//\t\t// remove longer prefix", "+//\t\tchar[] withoutPrefixName = name;", "+//\t\tif (prefixes != null) {", "+//\t\t\tint bestLength = 0;", "+//\t\t\tfor (int i= 0; i < prefixes.length; i++) {", "+//\t\t\t\tchar[] prefix = prefixes[i];", "+//\t\t\t\tint max = prefix.length < name.length ? prefix.length : name.length;", "+//\t\t\t\tint currLen = 0;", "+//\t\t\t\tfor (; currLen < max; currLen++) {", "+//\t\t\t\t\tif(Character.toLowerCase(prefix[currLen]) != Character.toLowerCase(name[currLen])) {", "+//\t\t\t\t\t\tif (currLen > bestLength) {", "+//\t\t\t\t\t\t\tbestLength = currLen;", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t\tbreak;", "+//\t\t\t\t\t}", "+//\t\t\t\t}", "+//\t\t\t\tif(currLen == max && currLen > bestLength) {", "+//\t\t\t\t\tbestLength = max;", "+//\t\t\t\t}", "+//\t\t\t}", "+//\t\t\tif(bestLength > 0) {", "+//\t\t\t\tif(bestLength == name.length) {", "+//\t\t\t\t\twithoutPrefixName = CharOperation.NO_CHAR;", "+//\t\t\t\t} else {", "+//\t\t\t\t\twithoutPrefixName = CharOperation.subarray(name, bestLength, name.length);", "+//\t\t\t\t}", "+//\t\t\t}", "+//\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "823bc704c56b590fe6dc294796c6cf18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelOperation.java", "commitBeforeChange": "b12492ad0eb83de9816def47b0f6dea2ec7ff67f", "commitAfterChange": "0deabbafa4ad0926b565767fe8d2a589d68558ed", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 40, "signatureBeforeChange": " protected void makeWorkingCopiesConsistent(IJavaElementDelta[] deltas)", "signatureAfterChange": " \tprotected int lastActionWithID(String id)", "diff": ["- */", "-protected void makeWorkingCopiesConsistent(IJavaElementDelta[] deltas) {", "-\tfor (int i= 0; i < deltas.length; i++) {", "-\t\twalkDeltaMakingWorkingCopiesConsistent(deltas[i]);", "-\t}", "-}", "+\t * Returns -1 if not found.\r\t */", "+\tprotected int lastActionWithID(String id) {", "+\t\tint existing = -1;", "+\t\tfor (int i = this.actionsPtr; i >= 0; i--) {", "+\t\t\tif (this.actions[i].getID().equals(id)) {", "+\t\t\t\texisting = i;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\treturn existing;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9aa2c732490a84d8635a871b4e0693b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "0651b06c9d6db8817424c7ac08dd913576e01c68", "commitAfterChange": "7cbb85d7cd9ab8d5f95b2fdad2bd3c2d634b0bba", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public MethodBinding getHighestOverridenMethod()", "signatureAfterChange": " public MethodBinding getHighestOverridenMethod()", "diff": ["+    ReferenceBinding currentType = this.declaringClass;", "+    if (this.isConstructor()) {", "+    \tdo {", "+    \t\tMethodBinding superMethod = currentType.getExactConstructor(this.parameters);", "+    \t\tif (superMethod != null) {", "+    \t\t\tbestMethod = superMethod;", "+    \t\t}", "+    \t} while ((currentType = currentType.superclass()) != null);", "+    \treturn bestMethod;", "+    }", "-    ReferenceBinding currentType = this.declaringClass;", "-    boolean isConstructor = this.isConstructor();", "-\t\tMethodBinding superMethod = isConstructor ", "-\t\t\t? currentType.getExactConstructor(this.parameters)", "-\t\t\t: currentType.getExactMethod(this.selector, this.parameters, null);", "+\t\tMethodBinding superMethod = currentType.getExactMethod(this.selector, this.parameters, null);", "-\t\tMethodBinding superMethod = isConstructor ", "-\t\t\t? currentType.getExactConstructor(this.parameters)", "-\t\t\t: currentType.getExactMethod(this.selector, this.parameters, null);", "+\t\tMethodBinding superMethod = currentType.getExactMethod(this.selector, this.parameters, null);"]}], "num": 64531}
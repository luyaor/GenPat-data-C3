{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d616b20420ebf1a98b8147fb221249e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64133e8d7f2840b585d5fd8fe987c390", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r \tpublic void reportMethodDeclaration(\r \t\tAbstractMethodDeclaration methodDeclaration,\r \t\tchar[][] definingTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r public void reportMethodDeclaration(\r \tAbstractMethodDeclaration methodDeclaration, \r \tchar[][] definingTypeNames,\r \tint accuracy) throws CoreException", "diff": ["+ */\r", "+public void reportMethodDeclaration(\r", "+\tAbstractMethodDeclaration methodDeclaration, \r", "+\tchar[][] definingTypeNames,\r", "+\tint accuracy) throws CoreException {\r", "+\t\t\r", "+\t// create method handle\r", "+\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "+\t// compute source positions of the selector \r", "+\tScanner scanner = parser.scanner;\r", "+\tint nameSourceStart = methodDeclaration.sourceStart;\r", "+\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);\r", "+\ttry {\r", "+\t\tscanner.getNextToken();\r", "+\t} catch(InvalidInputException e) {\r", "+\tint nameSourceEnd = scanner.currentPosition-1;\r", "+\t// accept method declaration\r", "+\tthis.report(nameSourceStart, nameSourceEnd, method, accuracy);\r", "+}\r", "-\t */\r", "-\tpublic void reportMethodDeclaration(\r", "-\t\tAbstractMethodDeclaration methodDeclaration,\r", "-\t\tchar[][] definingTypeNames,\r", "-\t\tint accuracy)\r", "-\t\tthrows CoreException {\r", "-\r", "-\t\t// create method handle\r", "-\t\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "-\r", "-\t\t// compute source positions of the selector \r", "-\t\tScanner scanner = parser.scanner;\r", "-\t\tint nameSourceStart = methodDeclaration.sourceStart;\r", "-\t\tscanner.setSourceBuffer(\r", "-\t\t\tthis.potentialMatches[this.potentialMatchesIndex].getSource());\r", "-\t\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);\r", "-\t\t\tscanner.getNextToken();\r", "-\t\t} catch (InvalidInputException e) {\r", "-\t\tint nameSourceEnd = scanner.currentPosition - 1;\r", "-\r", "-\t\t// accept method declaration\r", "-\t\tthis.report(nameSourceStart, nameSourceEnd, method, accuracy);\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "798a156a8cece814a42d0c525459293a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r \tpublic void reportMethodDeclaration(\r \t\tAbstractMethodDeclaration methodDeclaration,\r \t\tchar[][] definingTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r public void reportMethodDeclaration(\r \tAbstractMethodDeclaration methodDeclaration, \r \tchar[][] definingTypeNames,\r \tint accuracy) throws CoreException", "diff": ["+ */\r", "+public void reportMethodDeclaration(\r", "+\tAbstractMethodDeclaration methodDeclaration, \r", "+\tchar[][] definingTypeNames,\r", "+\tint accuracy) throws CoreException {\r", "+\t\t\r", "+\t// create method handle\r", "+\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "+\t// compute source positions of the selector \r", "+\tScanner scanner = parser.scanner;\r", "+\tint nameSourceStart = methodDeclaration.sourceStart;\r", "+\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);\r", "+\ttry {\r", "+\t\tscanner.getNextToken();\r", "+\t} catch(InvalidInputException e) {\r", "+\tint nameSourceEnd = scanner.currentPosition-1;\r", "+\t// accept method declaration\r", "+\tthis.report(nameSourceStart, nameSourceEnd, method, accuracy);\r", "+}\r", "-\t */\r", "-\tpublic void reportMethodDeclaration(\r", "-\t\tAbstractMethodDeclaration methodDeclaration,\r", "-\t\tchar[][] definingTypeNames,\r", "-\t\tint accuracy)\r", "-\t\tthrows CoreException {\r", "-\r", "-\t\t// create method handle\r", "-\t\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "-\r", "-\t\t// compute source positions of the selector \r", "-\t\tScanner scanner = parser.scanner;\r", "-\t\tint nameSourceStart = methodDeclaration.sourceStart;\r", "-\t\tscanner.setSourceBuffer(\r", "-\t\t\tthis.potentialMatches[this.potentialMatchesIndex].getSource());\r", "-\t\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);\r", "-\t\t\tscanner.getNextToken();\r", "-\t\t} catch (InvalidInputException e) {\r", "-\t\tint nameSourceEnd = scanner.currentPosition - 1;\r", "-\r", "-\t\t// accept method declaration\r", "-\t\tthis.report(nameSourceStart, nameSourceEnd, method, accuracy);\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c589aee58d6f0f1940c24290a0492f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r \tpublic void reportMethodDeclaration(\r \t\tAbstractMethodDeclaration methodDeclaration,\r \t\tchar[][] definingTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r public void reportMethodDeclaration(\r \tAbstractMethodDeclaration methodDeclaration, \r \tchar[][] definingTypeNames,\r \tint accuracy) throws CoreException", "diff": ["+ */\r", "+public void reportMethodDeclaration(\r", "+\tAbstractMethodDeclaration methodDeclaration, \r", "+\tchar[][] definingTypeNames,\r", "+\tint accuracy) throws CoreException {\r", "+\t\t\r", "+\t// create method handle\r", "+\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "+\t// compute source positions of the selector \r", "+\tScanner scanner = parser.scanner;\r", "+\tint nameSourceStart = methodDeclaration.sourceStart;\r", "+\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);\r", "+\ttry {\r", "+\t\tscanner.getNextToken();\r", "+\t} catch(InvalidInputException e) {\r", "+\tint nameSourceEnd = scanner.currentPosition-1;\r", "+\t// accept method declaration\r", "+\tthis.report(nameSourceStart, nameSourceEnd, method, accuracy);\r", "+}\r", "-\t */\r", "-\tpublic void reportMethodDeclaration(\r", "-\t\tAbstractMethodDeclaration methodDeclaration,\r", "-\t\tchar[][] definingTypeNames,\r", "-\t\tint accuracy)\r", "-\t\tthrows CoreException {\r", "-\r", "-\t\t// create method handle\r", "-\t\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "-\r", "-\t\t// compute source positions of the selector \r", "-\t\tScanner scanner = parser.scanner;\r", "-\t\tint nameSourceStart = methodDeclaration.sourceStart;\r", "-\t\tscanner.setSourceBuffer(\r", "-\t\t\tthis.potentialMatches[this.potentialMatchesIndex].getSource());\r", "-\t\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);\r", "-\t\t\tscanner.getNextToken();\r", "-\t\t} catch (InvalidInputException e) {\r", "-\t\tint nameSourceEnd = scanner.currentPosition - 1;\r", "-\r", "-\t\t// accept method declaration\r", "-\t\tthis.report(nameSourceStart, nameSourceEnd, method, accuracy);\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdc7bccc86fe9369aa60be9637b30da9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r \tpublic void reportMethodDeclaration(\r \t\tAbstractMethodDeclaration methodDeclaration,\r \t\tchar[][] definingTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r public void reportMethodDeclaration(\r \tAbstractMethodDeclaration methodDeclaration, \r \tchar[][] definingTypeNames,\r \tint accuracy) throws CoreException", "diff": ["+ */\r", "+public void reportMethodDeclaration(\r", "+\tAbstractMethodDeclaration methodDeclaration, \r", "+\tchar[][] definingTypeNames,\r", "+\tint accuracy) throws CoreException {\r", "+\t\t\r", "+\t// create method handle\r", "+\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "+\t// compute source positions of the selector \r", "+\tScanner scanner = parser.scanner;\r", "+\tint nameSourceStart = methodDeclaration.sourceStart;\r", "+\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);\r", "+\ttry {\r", "+\t\tscanner.getNextToken();\r", "+\t} catch(InvalidInputException e) {\r", "+\tint nameSourceEnd = scanner.currentPosition-1;\r", "+\t// accept method declaration\r", "+\tthis.report(nameSourceStart, nameSourceEnd, method, accuracy);\r", "+}\r", "-\t */\r", "-\tpublic void reportMethodDeclaration(\r", "-\t\tAbstractMethodDeclaration methodDeclaration,\r", "-\t\tchar[][] definingTypeNames,\r", "-\t\tint accuracy)\r", "-\t\tthrows CoreException {\r", "-\r", "-\t\t// create method handle\r", "-\t\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "-\r", "-\t\t// compute source positions of the selector \r", "-\t\tScanner scanner = parser.scanner;\r", "-\t\tint nameSourceStart = methodDeclaration.sourceStart;\r", "-\t\tscanner.setSourceBuffer(\r", "-\t\t\tthis.potentialMatches[this.potentialMatchesIndex].getSource());\r", "-\t\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);\r", "-\t\t\tscanner.getNextToken();\r", "-\t\t} catch (InvalidInputException e) {\r", "-\t\tint nameSourceEnd = scanner.currentPosition - 1;\r", "-\r", "-\t\t// accept method declaration\r", "-\t\tthis.report(nameSourceStart, nameSourceEnd, method, accuracy);\r", "-\t}\r"]}], "num": 13250}
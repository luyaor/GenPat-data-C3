{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78043a59d12a163c33a3af3425b33b5e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "034bd157689d52c5c45b7c7923451bdd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "1d6fd3220a380be4db641e43b2002eb0a6f872ab", "commitAfterChange": "f5fccb9c727b0655636fe138af1c3a58b47300b1", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \r \r private void initializeBuilder() throws CoreException", "signatureAfterChange": " \r \r private void initializeBuilder() throws CoreException", "diff": ["-\t\r", "+\r", "-\tthis.resourceFilters = filterSequence != null && filterSequence.length() > 0\r", "+\tchar[][] filters = filterSequence != null && filterSequence.length() > 0\r", "+\tif (filters == null) {\r", "+\t\tthis.fileFilters = null;\r", "+\t\tthis.folderFilters = null;\r", "+\t} else {\r", "+\t\tint fileCount = 0, folderCount = 0;\r", "+\t\tfor (int i = 0, length = filters.length; i < length; i++) {\r", "+\t\t\tchar[] f = filters[i];\r", "+\t\t\tif (f[f.length - 1] == '/') folderCount++; else fileCount++;\r", "+\t\t}\r", "+\t\tthis.fileFilters = new char[fileCount][];\r", "+\t\tthis.folderFilters = new String[folderCount];\r", "+\t\tfor (int i = 0, length = filters.length; i < length; i++) {\r", "+\t\t\tchar[] f = filters[i];\r", "+\t\t\tif (f[f.length - 1] == '/')\r", "+\t\t\t\tfolderFilters[--folderCount] = new String(CharOperation.subarray(f, 0, f.length - 1));\r", "+\t\t\telse\r", "+\t\t\t\tfileFilters[--fileCount] = f;\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "034e0538e8783f3ffef4e9754f66f9f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Clinit.java", "commitBeforeChange": "f2468e3abae9ed1db235796d801e7dc64df652f1", "commitAfterChange": "b701269cf27e9d3bbdf6292c372ecccae76d0d54", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate void generateCode( \t\tClassScope classScope, \t\tClassFile classFile, \t\tint clinitOffset)", "signatureAfterChange": " \tprivate void generateCode( \t\tClassScope classScope, \t\tClassFile classFile, \t\tint clinitOffset)", "diff": ["-\t\t\t\tclassScope.enclosingSourceType(),", "+\t\t\t\t\tclassScope.enclosingSourceType(),", "-\t\tint enumCount = 0;", "-\t\tif (declaringType.fields != null) {", "-\t\t\tfor (int i = 0, max = declaringType.fields.length; i < max; i++) {", "-\t\t\t\tFieldDeclaration fieldDecl = declaringType.fields[i];", "-\t\t\t\tif (fieldDecl.isStatic()) {", "-\t\t\t\t\tfieldDecl.generateCode(staticInitializerScope, codeStream);", "-\t\t\t\t}", "-\t\t\t\tif (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "-\t\t\t\t\tenumCount++;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t// enum need to initialize $VALUES synthetic cache of enum constants", "-\t\tif (enumCount > 0) {", "-\t\t\tif (declaringType.fields != null) {", "-\t\t\t\t// $VALUES := new <EnumType>[<enumCount>]", "-\t\t\t\tcodeStream.generateInlinedValue(enumCount);", "-\t\t\t\tcodeStream.anewarray(declaringType.binding);", "-\t\t\t\tfor (int i = 0, max = declaringType.fields.length; i < max; i++) {", "-\t\t\t\t\tFieldDeclaration fieldDecl = declaringType.fields[i];", "-\t\t\t\t\t// $VALUES[i] = <enum-constant-i>", "-\t\t\t\t\tif (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "-\t\t\t\t\t\tcodeStream.dup();", "-\t\t\t\t\t\tcodeStream.generateInlinedValue(fieldDecl.binding.id);", "-\t\t\t\t\t\tcodeStream.getstatic(fieldDecl.binding);", "-\t\t\t\t\t\tcodeStream.aastore();", "+\t\tfinal FieldDeclaration[] fieldDeclarations = declaringType.fields;", "+\t\tif (declaringType.getKind() == IGenericType.ENUM) {", "+\t\t\tint enumCount = 0;", "+\t\t\tint notEnumConstants = 0;", "+\t\t\tif (fieldDeclarations != null) {", "+\t\t\t\tfor (int i = 0, max = fieldDeclarations.length; i < max; i++) {", "+\t\t\t\t\tFieldDeclaration fieldDecl = fieldDeclarations[i];", "+\t\t\t\t\tif (fieldDecl.isStatic()) {", "+\t\t\t\t\t\tif (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t\t\tfieldDecl.generateCode(staticInitializerScope, codeStream);", "+\t\t\t\t\t\t\tenumCount++;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tnotEnumConstants++;", "+\t\t\t\t\t\t}", "-\t\t\t\tcodeStream.putstatic(declaringType.enumValuesSyntheticfield);", "+\t\t\t}", "+\t\t\t// enum need to initialize $VALUES synthetic cache of enum constants", "+\t\t\tif (enumCount > 0) {", "+\t\t\t\tif (fieldDeclarations != null) {", "+\t\t\t\t\t// $VALUES := new <EnumType>[<enumCount>]", "+\t\t\t\t\tcodeStream.generateInlinedValue(enumCount);", "+\t\t\t\t\tcodeStream.anewarray(declaringType.binding);", "+\t\t\t\t\tfor (int i = 0, max = fieldDeclarations.length; i < max; i++) {", "+\t\t\t\t\t\tFieldDeclaration fieldDecl = fieldDeclarations[i];", "+\t\t\t\t\t\t// $VALUES[i] = <enum-constant-i>", "+\t\t\t\t\t\tif (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t\t\tcodeStream.dup();", "+\t\t\t\t\t\t\tcodeStream.generateInlinedValue(fieldDecl.binding.id);", "+\t\t\t\t\t\t\tcodeStream.getstatic(fieldDecl.binding);", "+\t\t\t\t\t\t\tcodeStream.aastore();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tcodeStream.putstatic(declaringType.enumValuesSyntheticfield);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (notEnumConstants != 0) {", "+\t\t\t\t// if fields that are not enum constants need to be generated (static initializer/static field)", "+\t\t\t\tfor (int i = 0, max = fieldDeclarations.length; i < max; i++) {", "+\t\t\t\t\tFieldDeclaration fieldDecl = fieldDeclarations[i];", "+\t\t\t\t\tif (fieldDecl.isStatic() && fieldDecl.getKind() != AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t\tfieldDecl.generateCode(staticInitializerScope, codeStream);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (fieldDeclarations != null) {", "+\t\t\t\tfor (int i = 0, max = fieldDeclarations.length; i < max; i++) {", "+\t\t\t\t\tFieldDeclaration fieldDecl = fieldDeclarations[i];", "+\t\t\t\t\tif (fieldDecl.isStatic()) {", "+\t\t\t\t\t\tfieldDecl.generateCode(staticInitializerScope, codeStream);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b95e6952d0aafe85dcd85ee08285b6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "a209f427039b5b4db27a67f609cb706801ba28e5", "commitAfterChange": "712689471fd4116d08552bca059239228ce897f6", "methodNumberBeforeChange": 256, "methodNumberAfterChange": 256, "signatureBeforeChange": " private void rejectIllegalTypeAnnotations(TypeReference typeReference)", "signatureAfterChange": " private void rejectIllegalTypeAnnotations(TypeReference typeReference)", "diff": ["-\trejectIllegalTypeAnnotations(typeReference, false);", "-}", "+\t\t\tproblemReporter().misplacedTypeAnnotations(misplacedAnnotations[0], misplacedAnnotations[misplacedAnnotations.length - 1]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22ae076ac8b8ec312c9e73d6131b75dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "77ac300d6d124e9b071b4e62fab3a583e6eecdc4", "commitAfterChange": "fbf658958d1eb066a4b5c16fdea253c3d8d5019c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\t\tfor (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {", "+\t\t\t\t\tExpression argument = this.arguments[i];", "+\t\t\t\t\tif (argumentTypes[i] instanceof PolyTypeBinding) {", "+\t\t\t\t\t\targument.setExpressionContext(INVOCATION_CONTEXT);", "+\t\t\t\t\t\targument.setExpectedType(this.binding.parameters[i]);", "+\t\t\t\t\t\targumentTypes[i] = argument.resolveType(scope);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\tfor (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {", "+\t\t\tExpression argument = this.arguments[i];", "+\t\t\tif (argumentTypes[i] instanceof PolyTypeBinding) {", "+\t\t\t\targument.setExpressionContext(INVOCATION_CONTEXT);", "+\t\t\t\targument.setExpectedType(inheritedBinding.parameters[i]);", "+\t\t\t\targumentTypes[i] = argument.resolveType(scope);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf8ff71e22bbe5fc6df20cc11afea25e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "b9f5397cd309be669493c56026e21ac3e80dadfb", "commitAfterChange": "e1c9e65754ffe72856bfc19d7da5eba548fc43bc", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": " public void initializeMaxLocals(MethodBinding methodBinding)", "signatureAfterChange": " public void initializeMaxLocals(MethodBinding methodBinding)", "diff": ["-\t\t\t", "+", "+", "+\t\t\t\tTypeBinding[] arguments;", "+\t\t\t\tif ((arguments = methodBinding.parameters) != null) {", "+\t\t\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "+\t\t\t\t\t\tfinal TypeBinding typeBinding = arguments[i];", "+\t\t\t\t\t\tframe.putLocal(resolvedPosition, new VerificationTypeInfo(typeBinding));", "+\t\t\t\t\t\tswitch(typeBinding.id) {", "+\t\t\t\t\t\t\tcase TypeIds.T_double :", "+\t\t\t\t\t\t\tcase TypeIds.T_long :", "+\t\t\t\t\t\t\t\tresolvedPosition += 2;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tresolvedPosition++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t} else {", "+\t\t\t\tTypeBinding[] arguments;", "+\t\t\t\tif ((arguments = methodBinding.parameters) != null) {", "+\t\t\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "+\t\t\t\t\t\tfinal TypeBinding typeBinding = arguments[i];", "+\t\t\t\t\t\tframe.putLocal(resolvedPosition, new VerificationTypeInfo(typeBinding));", "+\t\t\t\t\t\tswitch(typeBinding.id) {", "+\t\t\t\t\t\t\tcase TypeIds.T_double :", "+\t\t\t\t\t\t\tcase TypeIds.T_long :", "+\t\t\t\t\t\t\t\tresolvedPosition += 2;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tresolvedPosition++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t}", "-", "-\t\tTypeBinding[] arguments;", "-\t\tif ((arguments = methodBinding.parameters) != null) {", "-\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "-\t\t\t\tfinal TypeBinding typeBinding = arguments[i];", "-\t\t\t\tframe.putLocal(resolvedPosition, new VerificationTypeInfo(typeBinding));", "-\t\t\t\tswitch(typeBinding.id) {", "-\t\t\t\t\tcase TypeIds.T_double :", "-\t\t\t\t\tcase TypeIds.T_long :", "-\t\t\t\t\t\tresolvedPosition += 2;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tresolvedPosition++;", "+\t\t} else {", "+\t\t\tTypeBinding[] arguments;", "+\t\t\tif ((arguments = methodBinding.parameters) != null) {", "+\t\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "+\t\t\t\t\tfinal TypeBinding typeBinding = arguments[i];", "+\t\t\t\t\tframe.putLocal(resolvedPosition, new VerificationTypeInfo(typeBinding));", "+\t\t\t\t\tswitch(typeBinding.id) {", "+\t\t\t\t\t\tcase TypeIds.T_double :", "+\t\t\t\t\t\tcase TypeIds.T_long :", "+\t\t\t\t\t\t\tresolvedPosition += 2;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tresolvedPosition++;", "+\t\t\t\t\t}"]}], "num": 63277}
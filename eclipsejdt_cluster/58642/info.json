{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d43b0918fb38ee4e0a6df3e91b37c834", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51adb69623f89064fa8f0b9fa708e16d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\tif ((this.expression.implicitConversion & TypeIds.UNBOXING) != 0) {", "+\t\t\tif ((this.expression.implicitConversion & TypeIds.UNBOXING) != 0", "+\t\t\t\t\t|| (this.expression.resolvedType != null && this.expression.resolvedType.id == T_JavaLangString)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9817c8f636fc384469eaeb962581c37c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "9d652ce7c89dd14104c16f2c1f66d223a8b82d5f", "commitAfterChange": "88bd9c51ebfccd9b68ad18488d485e1a7c491cf8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \r \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": "\r \r \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["-\t\t\t\t\t\t&& (indexOfFirstFieldBinding > 1 || !fieldBinding.isStatic()))\r", "+\t\t\t\t\t\t&& (indexOfFirstFieldBinding > 1 || !fieldBinding.isStatic())\r", "+\t\t\t\t\t\t&& fieldBinding.declaringClass.id != T_Object)\r", "-\t\t\t\t\t&& (scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "+\t\t\t\t\t&& ((scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "+\t\t\t\t\t\t\t&& field.declaringClass.id != T_Object) //no change for Object fields (in case there was)\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acfa596cc2d31dca0bfcc89a59088dce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "471b30fcd9175fdd69611c88984722b9e0b5e4ee", "commitAfterChange": "1a356ccfb3b5b00256393a405276ebc654766b8b", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "signatureAfterChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "diff": ["-\t\t\t\t\tboolean insertSpace = previousToken == TerminalTokens.TokenNameWHITESPACE;", "+\t\t\t\t\tboolean insertSpace = previousToken == TerminalTokens.TokenNameWHITESPACE || (this.scanner.startPosition == textStart && this.column > firstColumn && !(firstText || isHtmlTag));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf39b4830078e08fe2eedc80d5abf8ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "78bbbeed8347e023a39893a354552d3196a82094", "commitAfterChange": "d7bf97b0906e6821b36f900e536d18f1ccdddff2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\t \t \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "\t \t \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\tif (this.binding.isVarargs()) {", "+\t\t// Handle some special cases up front and transform them into implicit lambdas.", "+\t\tif (this.binding.isVarargs() || (isConstructorReference() && this.receiverType.syntheticOuterLocalVariables() != null && currentScope.methodScope().isStatic)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e16dbaa7233f4cea4eebde8669f0a15e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "1987bebfc0499fe07d643a641d2e74ff184f5cc7", "commitAfterChange": "2b6b723d87be49aecbb1b89e893d389af560ea10", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \t \tprivate int generateLocalVariableTableAttribute(int code_length, boolean methodDeclarationIsStatic, boolean isSynthetic)", "signatureAfterChange": " \t \tprivate int generateLocalVariableTableAttribute(int code_length, boolean methodDeclarationIsStatic, boolean isSynthetic)", "diff": ["-\t\t\tdeclaringClassBinding = (SourceTypeBinding) this.codeStream.methodDeclaration.binding.declaringClass;", "+\t\t\tdeclaringClassBinding = (SourceTypeBinding) ", "+\t\t\t\t\t(this.codeStream.methodDeclaration != null ? this.codeStream.methodDeclaration.binding.declaringClass : this.codeStream.lambdaExpression.binding.declaringClass);"]}], "num": 58642}
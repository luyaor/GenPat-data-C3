{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "547be593a16481ed972df2968f316eac", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d49d3a08e6fe3ef22e3e6cda7b14038", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "70d26734867455ac1b14a226bd371e6f98a4d2ae", "commitAfterChange": "e72c40632f386c18405c37cebd5b66e2533b6c7e", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 56, "signatureBeforeChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "signatureAfterChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "diff": ["-\t\tString[] registeredContainerIDs = getRegisteredContainerIDs();", "-\t\tfor (int i = 0; i < registeredContainerIDs.length; i++) {", "-\t\t\tString containerID = registeredContainerIDs[i];", "-\t\t\tIterator projectIterator = this.containers.keySet().iterator();", "-\t\t\twhile (projectIterator.hasNext()){", "-\t\t\t\tIJavaProject project = (IJavaProject)projectIterator.next();", "-\t\t\t\tMap projectContainers = (Map)this.containers.get(project);", "-\t\t\t\tif (projectContainers != null){", "-\t\t\t\t\tIterator containerIterator = projectContainers.keySet().iterator();", "-\t\t\t\t\twhile (containerIterator.hasNext()){", "-\t\t\t\t\t\tIPath containerPath = (IPath)containerIterator.next();", "-\t\t\t\t\t\tif (containerPath.segment(0).equals(containerID)) { // registered container", "-\t\t\t\t\t\t\tprojectContainers.put(containerPath, null); // reset container value, but leave entry in Map", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\tcontainersReset(getRegisteredContainerIDs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b0924c77d76e299410ea1067cb26c65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "9edf0a990e69fc752ead21c476a00fb874aa8f40", "commitAfterChange": "a5351a8c92738db988d5e1c19e4b7b0af64944e3", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tpublic void fire()", "signatureAfterChange": "\r \tpublic void fire()", "diff": ["-\t\t\tIterator deltas= null;\r", "-\t\t\tif (fJavaModelDeltas.isEmpty()) {\r", "-\t\t\t\tdeltas= fResourceDeltas.iterator();\r", "-\t\t\t} else {\r", "-\t\t\t\tdeltas= fJavaModelDeltas.iterator();\r", "-\t\t\t}\r", "+\t\t\tthis.mergeDeltas();\r", "-\t\t\t\twhile (deltas.hasNext()) {\r", "-\t\t\t\t\tIJavaElementDelta delta= (IJavaElementDelta) deltas.next();\r", "-\t\t\t\t\tif (DeltaProcessor.VERBOSE){\r", "-\t\t\t\t\t\tSystem.out.println(\"FIRING Delta (\"+ Thread.currentThread()+\"):\"+ delta);//$NON-NLS-1$//$NON-NLS-2$\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tElementChangedEvent event= new ElementChangedEvent(delta);\r", "-\t\t\t\t\t// Clone the listeners since they could remove themselves when told about the event \r", "-\t\t\t\t\t// (eg. a type hierarchy becomes invalid (and thus it removes itself) when the type is removed\r", "-\t\t\t\t\tArrayList listeners= (ArrayList) fElementChangedListeners.clone();\r", "-\t\t\t\t\tfor (int i= 0; i < listeners.size(); i++) {\r", "-\t\t\t\t\t\tIElementChangedListener listener= (IElementChangedListener) listeners.get(i);\r", "-\t\t\t\t\t\tlistener.elementChanged(event);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "+\t\t\t\tthis.fire(fJavaModelDeltas);\r", "-\t\t\t\t// empty the queues\r", "-\t\t\t\tflush();\r", "+\t\t\t\t// empty the queue\r", "+\t\t\t\tfJavaModelDeltas= new ArrayList();\r"]}], "num": 34187}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00832c0b0961de47cb83da70260c37e0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "296bf2d8ff731ad8b12e40f1b570ec96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IntLiteral.java", "commitBeforeChange": "5807baa686a8511df55feae72000aab3575bbfc4", "commitAfterChange": "6486279fd39d7600a3c581a75f5a979b2834ec56", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void computeConstant()", "signatureAfterChange": "  public void computeConstant()", "diff": ["-\tif (this == One) {\t", "+\tif (this == One) {", "-\tif (this.source[0] == '0') {\t", "+\tif (this.source[0] == '0') {", "-\t\t\tthis.constant = IntConstant.fromValue(0); return ;", "+\t\t\tthis.constant = IntConstant.fromValue(0);", "+\t\t\treturn ;", "-\t\tif ((this.source[1] == 'x') || (this.source[1] == 'X')) {\t", "-\t\t\tshift = 4 ; j = 2; radix = 16;", "-\t\t} else {\t", "-\t\t\tshift = 3 ; j = 1; radix = 8;", "+\t\tif ((this.source[1] == 'x') || (this.source[1] == 'X')) {", "+\t\t\tshift = 4; j = 2; radix = 16;", "+\t\t} else if ((this.source[1] == 'b') || (this.source[1] == 'B')) {", "+\t\t\tshift = 1; j = 2; radix = 2;", "+\t\t} else {", "+\t\t\tshift = 3; j = 1; radix = 8;", "-\t\twhile (this.source[j]=='0')\t {\t", "-\t\t\tj++; //jump over redondant zero", "-\t\t\tif (j == length) {", "-\t\t\t\t//watch for 000000000000000000", "-\t\t\t\tthis.constant = IntConstant.fromValue(this.value = (int)computedValue);", "-\t\t\t\treturn;", "+\t\tif (j < length) {", "+\t\t\twhile (this.source[j]=='0') {", "+\t\t\t\tj++; //jump over redundant zero", "+\t\t\t\tif (j == length) {", "+\t\t\t\t\t//watch for 000000000000000000", "+\t\t\t\t\tthis.constant = IntConstant.fromValue(this.value = (int)computedValue);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "-\t\twhile (j<length) {\t", "-\t\t\tint digitValue ;", "-\t\t\tif ((digitValue = ScannerHelper.digit(this.source[j++],radix))\t< 0 ) {", "+\t\twhile (j < length) {", "+\t\t\tint digitValue;", "+\t\t\tchar currentChar = this.source[j++];", "+\t\t\tif (currentChar == '_') continue;", "+\t\t\tif ((digitValue = ScannerHelper.digit(currentChar,radix)) < 0 ) {", "-\t} else {\t", "+\t} else {", "-\t\tfor (int i = 0 ; i < length;i++) {\t", "+\t\tloop: for (int i = 0 ; i < length;i++) {\t", "+\t\t\tchar currentChar = this.source[i];", "+\t\t\tif (currentChar == '_') continue loop;", "-\t\t\tif ((digitValue = ScannerHelper.digit(this.source[i],10))\t< 0 ) {", "+\t\t\tif ((digitValue = ScannerHelper.digit(this.source[i],10)) < 0 ) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86aa8dfe2f4730eb47ccfa3050541d17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IntLiteral.java", "commitBeforeChange": "fa5828480ebc13512cc4c6649155f597883abe5f", "commitAfterChange": "dbadb98550952623b726dd998146fbf52c65b243", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void computeConstant()", "signatureAfterChange": "  public void computeConstant()", "diff": ["-\tif (this == One) {", "+\tif (this == One) {\t", "-\tif (this.source[0] == '0') {", "+\tif (this.source[0] == '0') {\t", "-\t\t\tthis.constant = IntConstant.fromValue(0);", "-\t\t\treturn ;", "+\t\t\tthis.constant = IntConstant.fromValue(0); return ;", "-\t\tif ((this.source[1] == 'x') || (this.source[1] == 'X')) {", "-\t\t\tshift = 4; j = 2; radix = 16;", "-\t\t} else if ((this.source[1] == 'b') || (this.source[1] == 'B')) {", "-\t\t\tshift = 1; j = 2; radix = 2;", "-\t\t} else {", "-\t\t\tshift = 3; j = 1; radix = 8;", "+\t\tif ((this.source[1] == 'x') || (this.source[1] == 'X')) {\t", "+\t\t\tshift = 4 ; j = 2; radix = 16;", "+\t\t} else {\t", "+\t\t\tshift = 3 ; j = 1; radix = 8;", "-\t\tif (j < length) {", "-\t\t\twhile (this.source[j]=='0') {", "-\t\t\t\tj++; //jump over redundant zero", "-\t\t\t\tif (j == length) {", "-\t\t\t\t\t//watch for 000000000000000000", "-\t\t\t\t\tthis.constant = IntConstant.fromValue(this.value = (int)computedValue);", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "+\t\twhile (this.source[j]=='0')\t {\t", "+\t\t\tj++; //jump over redondant zero", "+\t\t\tif (j == length) {", "+\t\t\t\t//watch for 000000000000000000", "+\t\t\t\tthis.constant = IntConstant.fromValue(this.value = (int)computedValue);", "+\t\t\t\treturn;", "-\t\twhile (j < length) {", "-\t\t\tint digitValue;", "-\t\t\tchar currentChar = this.source[j++];", "-\t\t\tif (currentChar == '_') continue;", "-\t\t\tif ((digitValue = ScannerHelper.digit(currentChar,radix)) < 0 ) {", "+\t\twhile (j<length) {\t", "+\t\t\tint digitValue ;", "+\t\t\tif ((digitValue = ScannerHelper.digit(this.source[j++],radix))\t< 0 ) {", "-\t} else {", "+\t} else {\t", "-\t\tloop: for (int i = 0 ; i < length;i++) {\t", "-\t\t\tchar currentChar = this.source[i];", "-\t\t\tif (currentChar == '_') continue loop;", "+\t\tfor (int i = 0 ; i < length;i++) {\t", "-\t\t\tif ((digitValue = ScannerHelper.digit(this.source[i],10)) < 0 ) {", "+\t\t\tif ((digitValue = ScannerHelper.digit(this.source[i],10))\t< 0 ) {"]}], "num": 13891}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dea0249f5756b95c63856dfbe3590132", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfcd4015a778870dd0185594ad1dd51c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "9311f01535700952280c267b61bac8e5f05b9f55", "commitAfterChange": "833acf9fd171cc3b88beb3f35c58318abd7b1b7c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tprotected void checkDisassembledClassFile(String fileName, String className, String source, String expectedOutput, int mode) throws ClassFormatException, IOException", "signatureAfterChange": " \tprotected void checkDisassembledClassFile(String fileName, String className, String expectedOutput, int mode)", "diff": ["-\t", "-\tprotected void checkDisassembledClassFile(String fileName, String className, String source, String expectedOutput, int mode) throws ClassFormatException, IOException {", "+\tprotected void checkDisassembledClassFile(String fileName, String className, String expectedOutput, int mode) {", "-\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(classFile);", "-\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "-\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", mode);", "+\t\tString result = null;", "+\t\ttry {", "+\t\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(classFile);", "+\t\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "+\t\t\tresult = disassembler.disassemble(classFileBytes, \"\\n\", mode);", "+\t\t} catch (IOException e) {", "+\t\t\te.printStackTrace();", "+\t\t\tassertTrue(\"Should not happen : \", false);", "+\t\t} catch (ClassFormatException e) {", "+\t\t\te.printStackTrace();", "+\t\t\tassertTrue(\"Should not happen : \", false);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3a222662be72ec8052edf0d51baee05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/FriendDependencyTests.java", "commitBeforeChange": "b98255ea12b09d2a9b7c2a33f6e9c53123da1aec", "commitAfterChange": "ea7357803f7625c89fd0063c616a1f7a28c12a8c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void internSimpleNames()", "signatureAfterChange": " public void testInternSimpleNames()", "diff": ["-public void internSimpleNames() {", "+public void testInternSimpleNames() {", "+", "+\ttry {", "+\t\tString className = \"org.eclipse.jdt.internal.core.builder.ReferenceCollection\";", "+\t\tClass clazz = Class.forName(className);", "+\t\t//org.eclipse.jdt.internal.core.JavaModelManager.getLastBuiltState(IProject, IProgressMonitor)", "+\t\tClass[] arguments = new Class[2];", "+\t\tString argumentClassName = \"org.eclipse.jdt.internal.core.builder.StringSet\";", "+\t\targuments[0] = Class.forName(argumentClassName);", "+\t\targuments[1] = Boolean.TYPE;", "+\t\tclazz.getDeclaredMethod(\"internSimpleNames\", arguments);", "+\t} catch (ClassNotFoundException e) {", "+\t\te.printStackTrace();", "+\t\tassertTrue(\"Should be there\", false);", "+\t} catch (SecurityException e) {", "+\t\te.printStackTrace();", "+\t\tassertTrue(\"Should be there\", false);", "+\t} catch (NoSuchMethodException e) {", "+\t\te.printStackTrace();", "+\t\tassertTrue(\"Should be there\", false);", "+\t} catch (IllegalArgumentException e) {", "+\t\te.printStackTrace();", "+\t\tassertTrue(\"Should be there\", false);", "+\t}", "+}"]}], "num": 3392}
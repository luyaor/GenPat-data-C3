{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b605be6ce663e2ae9fefd6149facaa5f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a2687157080673eed85b676771049d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "7c5ce51ab9852b3140988b8b19dd5e03d3c80c1a", "commitAfterChange": "d4dd0de089dce45488c113024a3b5103223cc934", "methodNumberBeforeChange": 133, "methodNumberAfterChange": 133, "signatureBeforeChange": " \tpublic boolean visit(UnaryExpression unaryExpression, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(UnaryExpression unaryExpression, BlockScope scope)", "diff": ["-\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\t}", "-\t\t\texpression.traverse(this, scope);", "-\t\t} else {", "-\t\t\texpression.traverse(this, scope);", "+\t\t} else if (expression instanceof UnaryExpression) {", "+\t\t\tUnaryExpression unaryExpression2 = (UnaryExpression) expression;", "+\t\t\tfinal int numberOfParensForExpression = (unaryExpression2.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\t\tif (numberOfParensForExpression == 0) {", "+\t\t\t\tint operatorValue2 = (unaryExpression2.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT;", "+\t\t\t\tswitch(operatorValue) {", "+\t\t\t\t\tcase OperatorIds.PLUS:", "+\t\t\t\t\t\tif (operatorValue2 == OperatorIds.PLUS) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OperatorIds.MINUS:", "+\t\t\t\t\t\tif (operatorValue2 == OperatorIds.MINUS) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\texpression.traverse(this, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5a046ed11c8ef201b4023a28b08af25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "78e374b409213aec91c1712e1973dd249f136b02", "commitAfterChange": "9bef3f15c43b07a14e76957980f62386b2bcee10", "methodNumberBeforeChange": 133, "methodNumberAfterChange": 133, "signatureBeforeChange": " \tpublic boolean visit(UnaryExpression unaryExpression, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(UnaryExpression unaryExpression, BlockScope scope)", "diff": ["-\t\tswitch((unaryExpression.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT) {", "+\t\tint operatorValue = (unaryExpression.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT;", "+\t\tswitch(operatorValue) {", "-\t\tunaryExpression.expression.traverse(this, scope);", "+\t\tExpression expression = unaryExpression.expression;", "+", "+\t\tif (expression instanceof PrefixExpression) {", "+\t\t\tPrefixExpression prefixExpression = (PrefixExpression) expression;", "+\t\t\tfinal int numberOfParensForExpression = (prefixExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\t\tif (numberOfParensForExpression == 0) {", "+\t\t\t\tswitch(operatorValue) {", "+\t\t\t\t\tcase OperatorIds.PLUS:", "+\t\t\t\t\t\tif (prefixExpression.operator == OperatorIds.PLUS) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OperatorIds.MINUS:", "+\t\t\t\t\t\tif (prefixExpression.operator == OperatorIds.MINUS) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\texpression.traverse(this, scope);", "+\t\t} else {", "+\t\t\texpression.traverse(this, scope);", "+\t\t}"]}], "num": 44139}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "593771a681f52b54cdc1e43515de9ef6", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cc5bf81578ea4b97ccff169ab2b7669", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "e8cc2a8f8e9efcff6e76a3ee15d5b53d1a958057", "commitAfterChange": "7e8c39a9e3d7dea3d8b022efbc3b049165785892", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate FieldDeclaration convert(SourceFieldElementInfo fiieldInfo, TypeDeclaration type, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate FieldDeclaration convert(SourceField fieldHandle, TypeDeclaration type, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\tprivate FieldDeclaration convert(SourceFieldElementInfo fiieldInfo, TypeDeclaration type, CompilationResult compilationResult) {", "+\tprivate FieldDeclaration convert(SourceField fieldHandle, TypeDeclaration type, CompilationResult compilationResult) throws JavaModelException {", "+\t\tSourceFieldElementInfo fieldInfo = (SourceFieldElementInfo) fieldHandle.getElementInfo();", "-\t\tint start = fiieldInfo.getNameSourceStart();", "-\t\tint end = fiieldInfo.getNameSourceEnd();", "+\t\tint start = fieldInfo.getNameSourceStart();", "+\t\tint end = fieldInfo.getNameSourceEnd();", "-\t\tfield.name = fiieldInfo.getName();", "+\t\tfield.name = fieldInfo.getName();", "-\t\tfield.declarationSourceStart = fiieldInfo.getDeclarationSourceStart();", "-\t\tfield.declarationSourceEnd = fiieldInfo.getDeclarationSourceEnd();", "-\t\tint modifiers = fiieldInfo.getModifiers();", "+\t\tfield.declarationSourceStart = fieldInfo.getDeclarationSourceStart();", "+\t\tfield.declarationSourceEnd = fieldInfo.getDeclarationSourceEnd();", "+\t\tint modifiers = fieldInfo.getModifiers();", "-\t\t\tfield.type = createTypeReference(fiieldInfo.getTypeName(), start, end);", "+\t\t\tfield.type = createTypeReference(fieldInfo.getTypeName(), start, end);", "+", "+\t\t/* convert annotations */", "+\t\tfield.annotations = convertAnnotations(fieldHandle);", "-\t\t\tchar[] initializationSource = fiieldInfo.getInitializationSource();", "+\t\t\tchar[] initializationSource = fieldInfo.getInitializationSource();", "-\t\t\tIJavaElement[] children = fiieldInfo.getChildren();", "+\t\t\tIJavaElement[] children = fieldInfo.getChildren();", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tTypeDeclaration anonymousLocalTypeDeclaration = convert((SourceTypeElementInfo)((JavaElement)localType).getElementInfo(), compilationResult);", "-\t\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(anonymousLocalTypeDeclaration);", "-\t\t\t\t\t\texpression.type = anonymousLocalTypeDeclaration.superclass;", "-\t\t\t\t\t\tanonymousLocalTypeDeclaration.superclass = null;", "-\t\t\t\t\t\tanonymousLocalTypeDeclaration.superInterfaces = null;", "-\t\t\t\t\t\tanonymousLocalTypeDeclaration.allocation = expression;", "-\t\t\t\t\t\tanonymousLocalTypeDeclaration.modifiers &= ~AccEnum; // remove tag in case this is the init of an enum constant", "-\t\t\t\t\t\texpressions[i] = expression;", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t// ignore", "-\t\t\t\t\t}", "+\t\t\t\t\tTypeDeclaration anonymousLocalTypeDeclaration = convert((SourceType) localType, compilationResult);", "+\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(anonymousLocalTypeDeclaration);", "+\t\t\t\t\texpression.type = anonymousLocalTypeDeclaration.superclass;", "+\t\t\t\t\tanonymousLocalTypeDeclaration.superclass = null;", "+\t\t\t\t\tanonymousLocalTypeDeclaration.superInterfaces = null;", "+\t\t\t\t\tanonymousLocalTypeDeclaration.allocation = expression;", "+\t\t\t\t\tanonymousLocalTypeDeclaration.modifiers &= ~AccEnum; // remove tag in case this is the init of an enum constant", "+\t\t\t\t\texpressions[i] = expression;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9342b61931834f5b06f9a293c873e29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "e8cc2a8f8e9efcff6e76a3ee15d5b53d1a958057", "commitAfterChange": "7e8c39a9e3d7dea3d8b022efbc3b049165785892", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeDeclaration convert(SourceTypeElementInfo typeInfo, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate TypeDeclaration convert(SourceType typeHandle, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\tprivate TypeDeclaration convert(SourceTypeElementInfo typeInfo, CompilationResult compilationResult) {", "+\tprivate TypeDeclaration convert(SourceType typeHandle, CompilationResult compilationResult) throws JavaModelException {", "+\t\tSourceTypeElementInfo typeInfo = (SourceTypeElementInfo) typeHandle.getElementInfo();", "-\t\t\tIType typeHandle = typeInfo.getHandle();", "-\t\t\ttry {", "-\t\t\t\tif (typeHandle.isAnonymous()) {", "-\t\t\t\t\ttype.name = TypeDeclaration.ANONYMOUS_EMPTY_NAME;", "-\t\t\t\t\ttype.bits |= ASTNode.AnonymousAndLocalMask;", "-\t\t\t\t} else {", "-\t\t\t\t\tif (typeHandle.isLocal()) {", "-\t\t\t\t\t\ttype.bits |= ASTNode.IsLocalTypeMASK;", "-\t\t\t\t\t}", "+\t\t\tif (typeHandle.isAnonymous()) {", "+\t\t\t\ttype.name = TypeDeclaration.ANONYMOUS_EMPTY_NAME;", "+\t\t\t\ttype.bits |= ASTNode.AnonymousAndLocalMask;", "+\t\t\t} else {", "+\t\t\t\tif (typeHandle.isLocal()) {", "+\t\t\t\t\ttype.bits |= ASTNode.IsLocalTypeMASK;", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// could not figure, assume toplevel", "+\t\t", "+\t\t/* convert annotations */", "+\t\ttype.annotations = convertAnnotations(typeHandle);", "-\t\t\tISourceType[] sourceMemberTypes = typeInfo.getMemberTypes();", "+\t\t\tSourceType[] sourceMemberTypes = typeInfo.getMemberTypeHandles();", "-\t\t\t\ttype.memberTypes[i] = convert((SourceTypeElementInfo) sourceMemberTypes[i], compilationResult);", "+\t\t\t\ttype.memberTypes[i] = convert(sourceMemberTypes[i], compilationResult);", "-\t\tISourceField[] sourceFields = null;", "+\t\tSourceField[] sourceFields = null;", "-\t\t\tsourceFields = typeInfo.getFields();", "+\t\t\tsourceFields = typeInfo.getFieldHandles();", "-\t\t\t\ttype.fields[i] = convert((SourceFieldElementInfo) sourceFields[index++], type, compilationResult);", "+\t\t\t\ttype.fields[i] = convert(sourceFields[index++], type, compilationResult);", "-\t\t\tISourceMethod[] sourceMethods = typeInfo.getMethods();", "+\t\t\tSourceMethod[] sourceMethods = typeInfo.getMethodHandles();", "-\t\t\t\tISourceMethod sourceMethod = sourceMethods[i];", "+\t\t\t\tSourceMethod sourceMethod = sourceMethods[i];", "-\t\t\t\tif ((sourceMethod.getModifiers() & Flags.AccAbstract) != 0) {", "+\t\t\t\tif ((sourceMethod.getFlags() & Flags.AccAbstract) != 0) {", "-\t\t\t\t\tAbstractMethodDeclaration method = convert((SourceMethodElementInfo) sourceMethod, compilationResult);", "+\t\t\t\t\tAbstractMethodDeclaration method = convert(sourceMethod, compilationResult);", "+\t}"]}], "num": 14066}
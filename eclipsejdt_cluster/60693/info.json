{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "13fe4271a794c91aabccd4fc0e1deac4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f75400accad6514bf247764ac3fd717", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "  \tpublic void validateNullAnnotation(long tagBits, TypeReference typeRef, Annotation[] annotations)", "signatureAfterChange": "  \tpublic void validateNullAnnotation(long tagBits, TypeReference typeRef, Annotation[] annotations)", "diff": ["-\t\tlong nullAnnotationTagBit = tagBits & (TagBits.AnnotationNonNull|TagBits.AnnotationNullable);", "+\t\tlong nullAnnotationTagBit = tagBits & (TagBits.AnnotationNullMASK);", "-\t\t\t\tchar[][] annotationName = (nullAnnotationTagBit == TagBits.AnnotationNonNull)", "-\t\t\t\t\t\t? environment().getNonNullAnnotationName()", "-\t\t\t\t\t\t: environment().getNullableAnnotationName();", "-\t\t\t\tproblemReporter().illegalAnnotationForBaseType(typeRef, annotations,", "-\t\t\t\t\t\tannotationName[annotationName.length-1], nullAnnotationTagBit);", "+\t\t\t\tproblemReporter().illegalAnnotationForBaseType(typeRef, annotations, nullAnnotationTagBit);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "295a2be25881fa94de14c5979d8fddf2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "037cfa6bf481cd6ec3ad222bceff2d82fb8a8179", "commitAfterChange": "30d1d48bfa7e296fbeab8a3626c28e1130f44500", "methodNumberBeforeChange": 564, "methodNumberAfterChange": 564, "signatureBeforeChange": "  public void nullityMismatchTypeArgument(TypeBinding typeVariable, TypeBinding typeArgument, ASTNode location)", "signatureAfterChange": "  public void nullityMismatchTypeArgument(TypeBinding typeVariable, TypeBinding typeArgument, ASTNode location)", "diff": ["-\tlong tagBits = typeVariable.tagBits & TagBits.AnnotationNullMASK;", "-\tchar[][] annotationName = tagBits == TagBits.AnnotationNonNull ? this.options.nonNullAnnotationName : this.options.nullableAnnotationName;", "-\t\tString.valueOf(typeVariable.readableName()),", "-\t\tString.valueOf(CharOperation.concatWith(annotationName, '.')),", "+\t\tString.valueOf(typeVariable.nullAnnotatedReadableName(this.options, false)),", "-\t\tString.valueOf(typeVariable.shortReadableName()),", "-\t\tString.valueOf(annotationName[annotationName.length-1]),", "+\t\tString.valueOf(typeVariable.nullAnnotatedReadableName(this.options, true)),"]}], "num": 60693}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0235c5c2595b50541326574e6c00da7c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51ef6ce986df154edca5a2b53e6b11c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "d4b8f1437bd894de59822a00977399b8af50c7a1", "commitAfterChange": "00e190bf5f96c54b05d4853702eef90ea6dc4747", "methodNumberBeforeChange": 241, "methodNumberAfterChange": 241, "signatureBeforeChange": " protected void reportSyntaxError(int act, int currentKind, int stateStackTop)", "signatureAfterChange": " protected void reportSyntaxError(int act, int currentKind, int stateStackTop)", "diff": ["-\t\tif ((length == 2)", "-\t\t\t&& (tokenName.equals(\";\")) //$NON-NLS-1$", "-\t\t\t&& (expectings[0] == \"++\") //$NON-NLS-1$", "-\t\t\t&& (expectings[1] == \"--\") //$NON-NLS-1$", "+\t\tif ((length == 14)", "+\t\t\t&& (expectings[0] == \"=\") //$NON-NLS-1$", "+\t\t\t&& (expectings[1] == \"*=\") //$NON-NLS-1$", "-\t\t\t// the ; is not the expected token ==> it ends a statement when an expression is not ended", "-\t\t\tproblemReporter().invalidExpressionAsStatement(expressionStack[expressionPtr]);", "+\t\t\t\tswitch(currentKind) {", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameSEMICOLON:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNamePLUS:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameMINUS:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameDIVIDE:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameREMAINDER:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameMULTIPLY:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameLEFT_SHIFT:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameRIGHT_SHIFT:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameUNSIGNED_RIGHT_SHIFT:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameLESS:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameGREATER:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameLESS_EQUAL:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameGREATER_EQUAL:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameEQUAL_EQUAL:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameNOT_EQUAL:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameXOR:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameAND:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameOR:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameOR_OR:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameAND_AND:", "+\t\t\t\t\t\t// the ; is not the expected token ==> it ends a statement when an expression is not ended", "+\t\t\t\t\t\tproblemReporter().invalidExpressionAsStatement(expressionStack[expressionPtr]);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameRBRACE :", "+\t\t\t\t\t\tproblemReporter().missingSemiColon(expressionStack[expressionPtr]);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tchar[] tokenSource;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\ttokenSource = this.scanner.getCurrentTokenSource();", "+\t\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\t\ttokenSource = new char[] {};", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tproblemReporter().parseError(", "+\t\t\t\t\t\t\tthis.scanner.startPosition, ", "+\t\t\t\t\t\t\tthis.scanner.currentPosition - 1, ", "+\t\t\t\t\t\t\ttokenSource, ", "+\t\t\t\t\t\t\ttokenName, ", "+\t\t\t\t\t\t\texpectings); ", "+\t\t\t\t\t\tthis.checkAndReportBracketAnomalies(problemReporter());", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e06b1f96c0d627cfc0205acbc84ccad7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "e489533002c2a8aea30eadfa50c303ea4823e94d", "commitAfterChange": "31362234b943750140a7714a1b76106b136f08fa", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "   \tprivate void rewriteModifiers(ASTNode parent, StructuralPropertyDescriptor property, int offset)", "signatureAfterChange": "   \tprivate void rewriteModifiers(ASTNode parent, StructuralPropertyDescriptor property, int offset)", "diff": ["-\t\t\t\t\tcase ITerminalSymbols.TokenNamepublic: keep= Modifier.isPublic(newModifiers); break;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameprotected: keep= Modifier.isProtected(newModifiers); break;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameprivate: keep= Modifier.isPrivate(newModifiers); break;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNamestatic: keep= Modifier.isStatic(newModifiers); break;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNamefinal: keep= Modifier.isFinal(newModifiers); break;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameabstract: keep= Modifier.isAbstract(newModifiers); break;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNamenative: keep= Modifier.isNative(newModifiers); break;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNamevolatile: keep= Modifier.isVolatile(newModifiers); break;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNamestrictfp: keep= Modifier.isStrictfp(newModifiers); break;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNametransient: keep= Modifier.isTransient(newModifiers); break;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNamesynchronized: keep= Modifier.isSynchronized(newModifiers); break;", "+\t\t\t\t\tcase TerminalTokens.TokenNamepublic: keep= Modifier.isPublic(newModifiers); break;", "+\t\t\t\t\tcase TerminalTokens.TokenNameprotected: keep= Modifier.isProtected(newModifiers); break;", "+\t\t\t\t\tcase TerminalTokens.TokenNameprivate: keep= Modifier.isPrivate(newModifiers); break;", "+\t\t\t\t\tcase TerminalTokens.TokenNamestatic: keep= Modifier.isStatic(newModifiers); break;", "+\t\t\t\t\tcase TerminalTokens.TokenNamefinal: keep= Modifier.isFinal(newModifiers); break;", "+\t\t\t\t\tcase TerminalTokens.TokenNameabstract: keep= Modifier.isAbstract(newModifiers); break;", "+\t\t\t\t\tcase TerminalTokens.TokenNamenative: keep= Modifier.isNative(newModifiers); break;", "+\t\t\t\t\tcase TerminalTokens.TokenNamevolatile: keep= Modifier.isVolatile(newModifiers); break;", "+\t\t\t\t\tcase TerminalTokens.TokenNamestrictfp: keep= Modifier.isStrictfp(newModifiers); break;", "+\t\t\t\t\tcase TerminalTokens.TokenNametransient: keep= Modifier.isTransient(newModifiers); break;", "+\t\t\t\t\tcase TerminalTokens.TokenNamesynchronized: keep= Modifier.isSynchronized(newModifiers); break;"]}], "num": 57504}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd02a637e9a729e8d64d10c0e7a9c9bd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7d67dba096ee71fe7eec9ce26ecebcc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/batch/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "9d4f7131389390a16a995494da191d8ab6c07c5a", "commitAfterChange": "aa852841b1dd73414418bf5fc5420a74b80d0cd9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void endVisit(SingleMemberAnnotation annotation, BlockScope scope)", "signatureAfterChange": "  \tpublic void endVisit(SingleMemberAnnotation annotation, BlockScope scope)", "diff": ["-}", "-public void endVisit(SingleMemberAnnotation annotation, BlockScope scope) {", "-\tASTNode.resolveAnnotations(scope, new Annotation[] { annotation}, this.currentBinding);", "-\tthis.collector.add(annotation.getCompilerAnnotation());", "-}", "+", "+\tpublic void endVisit(SingleMemberAnnotation annotation, BlockScope scope) {", "+\t\tASTNode.resolveAnnotations(scope, new Annotation[] { annotation }, this.currentBinding);", "+\t\tAnnotationBinding binding = annotation.getCompilerAnnotation();", "+\t\tTypeElement anno = (TypeElement)ElementFactory.newElement(binding.getAnnotationType()); ", "+\t\tElement element = ElementFactory.newElement(this.currentBinding);", "+\t\t_annoToElement.put(anno, element);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f37b85d9dc2c704dbb86d36c83a56684", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/batch/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "d6dbfc9ffdc536bf3813a7df3219c04027533b62", "commitAfterChange": "5074e3a9141b8db4c82ed56886d84586d3d2dbaa", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void endVisit(SingleMemberAnnotation annotation, BlockScope scope)", "signatureAfterChange": "  \tprivate void resolveAnnotations( \t\t\tBlockScope scope, \t\t\tAnnotation[] annotations, \t\t\tBinding currentBinding)", "diff": ["-", "-\tpublic void endVisit(SingleMemberAnnotation annotation, BlockScope scope) {", "-\t\tASTNode.resolveAnnotations(scope, new Annotation[] { annotation }, this.currentBinding);", "-\t\tAnnotationBinding binding = annotation.getCompilerAnnotation();", "-\t\tTypeElement anno = (TypeElement)ElementFactory.newElement(binding.getAnnotationType()); ", "-\t\tElement element = ElementFactory.newElement(this.currentBinding);", "-\t\t_annoToElement.put(anno, element);", "-\t}", "+\tprivate void resolveAnnotations(", "+\t\t\tBlockScope scope,", "+\t\t\tAnnotation[] annotations,", "+\t\t\tBinding currentBinding) {", "+\t\tASTNode.resolveAnnotations(scope, annotations, currentBinding);", "+\t\t", "+\t\tfor (Annotation annotation : annotations) {", "+\t\t\tAnnotationBinding binding = annotation.getCompilerAnnotation();", "+\t\t\tTypeElement anno = (TypeElement)ElementFactory.newElement(binding.getAnnotationType()); ", "+\t\t\tElement element = ElementFactory.newElement(currentBinding);", "+\t\t\t_annoToElement.put(anno, element);", "+\t\t}"]}], "num": 37859}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b6fe98a18eec2292ac7343a1b94878d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03439e528731f974ad4b23540cbb12c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "97881e1f65dad02c5fcba69e18ae3332573c3839", "commitAfterChange": "5ae43aadc33d93b5c6af6a0612729105eee79d4f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options, IProgressMonitor monitor)", "signatureAfterChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options, IProgressMonitor monitor)", "diff": ["+\t\tCodeSnippetParsingUtil codeSnippetParsingUtil = new CodeSnippetParsingUtil();", "-\t\t\t\tConstructorDeclaration constructorDeclaration = CodeSnippetParsingUtil.parseStatements(source, offset, length, options);", "+\t\t\t\tConstructorDeclaration constructorDeclaration = codeSnippetParsingUtil.parseStatements(source, offset, length, options);", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = CodeSnippetParsingUtil.parseExpression(source, offset, length, options);", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = codeSnippetParsingUtil.parseExpression(source, offset, length, options);", "-\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = CodeSnippetParsingUtil.parseClassBodyDeclarations(source, offset, length, options);", "+\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = codeSnippetParsingUtil.parseClassBodyDeclarations(source, offset, length, options);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "103b6bac16f2dcf7aa08ad7988a8e0be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "888ff915accf0f7dc08ba845bca467c94f1e290b", "commitAfterChange": "f69c200469412ca3b93e80844c6c1f4e077169ac", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 46, "signatureBeforeChange": " public IJavaElement findSharedWorkingCopy(IBufferFactory factory)", "signatureAfterChange": " public IJavaElement findSharedWorkingCopy(IBufferFactory factory)", "diff": ["- */", "-public IJavaElement findSharedWorkingCopy(IBufferFactory factory) {", "-", "-\t// if factory is null, default factory must be used", "-\tif (factory == null) factory = this.getBufferManager().getDefaultBufferFactory();", "-", "-\t// In order to be shared, working copies have to denote the same compilation unit ", "-\t// AND use the same buffer factory.", "-\t// Assuming there is a little set of buffer factories, then use a 2 level Map cache.", "-\tMap sharedWorkingCopies = JavaModelManager.getJavaModelManager().sharedWorkingCopies;", "-\t", "-\tMap perFactoryWorkingCopies = (Map) sharedWorkingCopies.get(factory);", "-\tif (perFactoryWorkingCopies == null) return null;", "-\treturn (WorkingCopy)perFactoryWorkingCopies.get(this);", "-}", "+ */", "+public IJavaElement findSharedWorkingCopy(IBufferFactory factory) {", "+", "+\t// if factory is null, default factory must be used", "+\tif (factory == null) factory = this.getBufferManager().getDefaultBufferFactory();", "+", "+\t// In order to be shared, working copies have to denote the same compilation unit ", "+\t// AND use the same buffer factory.", "+\t// Assuming there is a little set of buffer factories, then use a 2 level Map cache.", "+\tMap sharedWorkingCopies = JavaModelManager.getJavaModelManager().sharedWorkingCopies;", "+\t", "+\tCompilationUnitOwner workingCopyOwner = new DefaultCompilationUnitOwner(factory, null);", "+\tMap perFactoryWorkingCopies = (Map) sharedWorkingCopies.get(workingCopyOwner);", "+\tif (perFactoryWorkingCopies == null) return null;", "+\treturn (CompilationUnit)perFactoryWorkingCopies.get(this);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12b98ca3e9d0d9ae69c1b4f72cfa7bdf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "3ebd920b94628f11b4180b27539affa16ca37a1e", "commitAfterChange": "6fd5a71337c844e947bad843a59c326e734b5531", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void accept(ICompilationUnit sourceUnit)", "signatureAfterChange": " \tpublic void accept(ICompilationUnit sourceUnit)", "diff": ["+\t\t\t\tString count = String.valueOf(totalUnits + 1);", "-\t\t\t\t\t\t\tString.valueOf(totalUnits + 1),", "-\t\t\t\t\t\t\tString.valueOf(totalUnits + 1),", "+\t\t\t\t\t\t\tcount,", "+\t\t\t\t\t\t\tcount,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19dacc495a0ff3aa7f6b7f6c4d8c933e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java", "commitBeforeChange": "6d2932a6aeb509ef1ad4876d04513e51cb902c43", "commitAfterChange": "97c5ba1e2ab0811616d91adfc749054394adc907", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  protected void cleanOutputFolders() throws CoreException", "signatureAfterChange": "  protected void cleanOutputFolders() throws CoreException", "diff": ["+\t\tSimpleLookupTable duplicates = new SimpleLookupTable();", "-\t\t\t\tcopyExtraResourcesBack(sourceLocation, deleteAll);", "+\t\t\t\tcopyExtraResourcesBack(sourceLocation, duplicates);", "-\t\t\t\tcopyExtraResourcesBack(sourceLocation, deleteAll);", "+\t\t\t\tcopyExtraResourcesBack(sourceLocation, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b5785f923cf6ac21ee03050fc191fd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "e6216311ffab56ba03e084ce8ca3a0857f24301b", "commitAfterChange": "9cf9fd36cf0d3a6995c78921628703f8e713d766", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public boolean build(SimpleLookupTable deltas)", "signatureAfterChange": "  public boolean build(SimpleLookupTable deltas)", "diff": ["-\t\t\t\tClasspathLocation[] classFoldersAndJars = (ClasspathLocation[]) javaBuilder.binaryLocationsPerProject.get(keyTable[i]);", "+\t\t\t\tIProject p = (IProject) keyTable[i];", "+\t\t\t\tClasspathLocation[] classFoldersAndJars = (ClasspathLocation[]) javaBuilder.binaryLocationsPerProject.get(p);", "-\t\t\t\t\tif (!findAffectedSourceFiles(delta, classFoldersAndJars)) return false;", "+\t\t\t\t\tif (!findAffectedSourceFiles(delta, classFoldersAndJars, p)) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d20f50e0d20c57f6949b4f119858bcb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "d3f5bd830eedcf03b196318e3635f46ef21397eb", "commitAfterChange": "0afb6a8af8c4303e5dd78ba653e96f2baec6aaff", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "signatureAfterChange": " \t \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "diff": ["+\t\t\t\t\tchar[] sourceContents = sourceUnit.getContents();", "-\t\t\t\t\t\tsourceUnit.getContents(), ", "+\t\t\t\t\t\tsourceContents,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54de9adae61935841df6059e4e3cc632", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 26, "signatureBeforeChange": " protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, TypeBinding type)", "signatureAfterChange": " protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, TypeBinding type)", "diff": ["+ */", "+protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, TypeBinding type) {", "+\tif (type == null) return INACCURATE_MATCH;", "+", "+\tchar[] qualifiedPackageName = type.qualifiedPackageName();", "+\tchar[] qualifiedSourceName = type instanceof LocalTypeBinding", "+\t\t\t? CharOperation.concat(\"1\".toCharArray(), type.qualifiedSourceName(), '.') //$NON-NLS-1$", "+\t\t\t: type.qualifiedSourceName();", "+\tchar[] fullyQualifiedTypeName = qualifiedPackageName.length == 0", "+\t\t? qualifiedSourceName", "+\t\t: CharOperation.concat(qualifiedPackageName, qualifiedSourceName, '.');", "+\tif (this.matchesType(simpleNamePattern, qualificationPattern, fullyQualifiedTypeName))", "+\t\treturn ACCURATE_MATCH;", "+\treturn IMPOSSIBLE_MATCH;", "+}", "- */", "-protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, TypeBinding type) {", "-\tif (type == null) return INACCURATE_MATCH;", "-\tchar[] qualifiedPackageName = type.qualifiedPackageName();", "-\tchar[] qualifiedSourceName = ", "-\t\ttype instanceof LocalTypeBinding ?", "-\t\t\tCharOperation.concat(\"1\".toCharArray(), type.qualifiedSourceName(), '.') : //$NON-NLS-1$", "-\t\t\ttype.qualifiedSourceName();", "-\tif (this.matchesType(", "-\t\t\tsimpleNamePattern, ", "-\t\t\tqualificationPattern, ", "-\t\t\tqualifiedPackageName.length == 0 ? ", "-\t\t\t\tqualifiedSourceName : ", "-\t\t\t\tCharOperation.concat(qualifiedPackageName, qualifiedSourceName, '.'))) {", "-\t\treturn ACCURATE_MATCH;", "-\t} else {", "-\t\treturn IMPOSSIBLE_MATCH;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "568f3926336896d9d13c992386143e33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/runtime/J9VMLauncher.java", "commitBeforeChange": "4d55f350050ba4edf3b2412d978c3ac5196dfdab", "commitAfterChange": "5ecb122541edd5248d78fa71da4e765f09449a6c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public LocalVirtualMachine launch() throws TargetException", "signatureAfterChange": " public LocalVirtualMachine launch() throws TargetException", "diff": ["-\t\t\tproxyProcess= Runtime.getRuntime().exec(getProxyCommandLine());", "+\t\t\tString[] commandLine = getProxyCommandLine();", "+\t\t\t", "+\t\t\t// DEBUG", "+\t\t\t/*", "+\t\t\tfor (int i = 0; i < commandLine.length; i++) {", "+\t\t\t\tSystem.out.print(commandLine[i] + \" \");", "+\t\t\t}", "+\t\t\tSystem.out.println();", "+\t\t\t*/", "+", "+\t\t\tproxyProcess= Runtime.getRuntime().exec(commandLine);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "589a69526f0f6d5a4da0e5dfbb31d4e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "923b5fc879b7a986c0b6c447869a71be0fe4d71a", "commitAfterChange": "5820628dd8848f7e7f4aa6d50516afa15903d0f1", "methodNumberBeforeChange": 336, "methodNumberAfterChange": 336, "signatureBeforeChange": " public void test291_jar_ref_in_jar() throws Exception", "signatureAfterChange": " public void test291_jar_ref_in_jar() throws Exception", "diff": ["-\tassertTrue(ClasspathJar.MANIFEST_ANALYZER.analyzeManifestContents(", "+\tManifestAnalyzer analyzer = new ManifestAnalyzer();", "+\tassertTrue(analyzer.analyzeManifestContents(", "-\tList calledFileNames = ClasspathJar.MANIFEST_ANALYZER.getCalledFileNames();", "+\tList calledFileNames = analyzer.getCalledFileNames();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69107d9053cca8c2a831973b12f941cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/FactoryPath.java", "commitBeforeChange": "c87413f1c3fa777cce7cb1df06542ffdf2ba70ba", "commitAfterChange": "dbb59802bd05ea277b4706afb85d6b75d5bdff2a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic Map<FactoryContainer, Attributes> getEnabledContainers(IJavaProject jproj)", "signatureAfterChange": "  \tpublic Map<FactoryContainer, Attributes> getEnabledContainers(IJavaProject jproj)", "diff": ["-\t\t\t\tmap.put(entry.getKey(), attr);", "+\t\t\t\tAttributes attrClone = new Attributes(attr);", "+\t\t\t\tmap.put(entry.getKey(), attrClone);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "729f708ec0371a7e80fa348054611eb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java", "commitBeforeChange": "23bd27f0df8fef2c86453e5a48de14dcd7cbc8bc", "commitAfterChange": "ac5d768f94d33e7fd1851ce12d1ffa99f3774bb1", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic static byte[] getZipEntryByteContent(ZipEntry ze, ZipFile zip) \t\tthrows IOException", "signatureAfterChange": " \tpublic static byte[] getZipEntryByteContent(ZipEntry ze, ZipFile zip) \t\tthrows IOException", "diff": ["-\t\t\tstream = zip.getInputStream(ze);", "-\t\t\tif (stream == null) throw new IOException(\"Invalid zip entry name : \" + ze.getName()); //$NON-NLS-1$", "+\t\t\tInputStream inputStream = zip.getInputStream(ze);", "+\t\t\tif (inputStream == null) throw new IOException(\"Invalid zip entry name : \" + ze.getName()); //$NON-NLS-1$", "+\t\t\tstream = new BufferedInputStream(inputStream);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "740098c4009d160733c1573c38b61fcf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "859f7f1e14bcaa807f32fbeee774c9ffd3512393", "commitAfterChange": "3ad1026b0827c10e02b527a5b1b393bd809b3628", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " public boolean hasFineGrainChanges()", "signatureAfterChange": " public boolean hasFineGrainChanges()", "diff": ["-\treturn this.changeCollector != null && this.changeCollector.needsRefresh();", "+    ChangeCollector collector = this.changeCollector;", "+\treturn collector != null && collector.needsRefresh();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "792c3de3a14c314c8543e1c1e6658be5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "923b5fc879b7a986c0b6c447869a71be0fe4d71a", "commitAfterChange": "5820628dd8848f7e7f4aa6d50516afa15903d0f1", "methodNumberBeforeChange": 319, "methodNumberAfterChange": 319, "signatureBeforeChange": " public void test274_jar_ref_in_jar()", "signatureAfterChange": " public void test274_jar_ref_in_jar()", "diff": ["-\t\tassertFalse(ClasspathJar.MANIFEST_ANALYZER.analyzeManifestContents(", "+\t\tManifestAnalyzer analyzer = new ManifestAnalyzer();", "+\t\tassertFalse(analyzer.analyzeManifestContents("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8536b46b4397c05995084822e884a27a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "0c30c509f770e7e3596eca8733ca9dd62ac37742", "commitAfterChange": "e42deb57e6190d97c310bfecdaaf1fc0d7432060", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r \r \tpublic static CompilationUnitDeclaration resolve(\r \t\tchar[] source,\r \t\tString unitName,\r \t\tIJavaProject javaProject,\r \t\tIAbstractSyntaxTreeVisitor visitor)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \r \tpublic static CompilationUnitDeclaration resolve(\r \t\tchar[] source,\r \t\tString unitName,\r \t\tIJavaProject javaProject,\r \t\tIAbstractSyntaxTreeVisitor visitor)\r \t\tthrows JavaModelException", "diff": ["+\r", "+\t\t\tchar[][] expectedPackageName = null;\r", "-\t\t\t\t\tnew BasicCompilationUnit(source, unitName, encoding));\r", "+\t\t\t\t\tnew BasicCompilationUnit(source, expectedPackageName, unitName, encoding));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f0c1a37e1ec52fb065e145305263210", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AttachedJavadocTests.java", "commitBeforeChange": "721861559c25715968a033650bdf3115ad56483d", "commitAfterChange": "7560640d61f8673c0bdcc6e3d95d6a5f677e0190", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void test018() throws JavaModelException", "signatureAfterChange": " \tpublic void test018() throws JavaModelException", "diff": ["-\t\tIPackageFragment packageFragment = this.root.getPackageFragment(\"p1/p2\"); //$NON-NLS-1$", "+\t\tIPackageFragment packageFragment = this.root.getPackageFragment(\"p1/p2/p3\"); //$NON-NLS-1$", "-\t\t\tassertTrue(\"Wrong doc\", javadoc.indexOf(method.getElementName()) != -1);", "+\t\t\tfinal String selector = method.getElementName();", "+\t\t\tassertTrue(\"Wrong doc\", javadoc.indexOf(selector) != -1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f12606e1938b79e616c0cd43bd745a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic final ReferenceBinding getMemberType(char[] typeName, ReferenceBinding enclosingType)", "signatureAfterChange": " \tpublic final ReferenceBinding getMemberType(char[] typeName, ReferenceBinding enclosingType)", "diff": ["-\t\treturn new ProblemReferenceBinding(typeName, null, ProblemReasons.NotFound);", "+\t\tchar[][] compoundName = new char[][] { typeName };", "+\t\treturn new ProblemReferenceBinding(compoundName, null, ProblemReasons.NotFound);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a0fedf9c75556712ddaea07d4e70244", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "e67c77fc5e097eac99c8909bb016eff7011eb0ce", "commitAfterChange": "5d677f26e6a9dfca4bbd2cd8a965c43c4f46ed94", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": " public boolean encloses(IJavaElement element)", "signatureAfterChange": " public boolean encloses(IJavaElement element)", "diff": ["+\t\t// external or internal jar", "-\t\treturn indexOf(relativePath.toString(), rootPathToString) >= 0;", "+\t\treturn indexOf(rootPathToString, relativePath.toString()) >= 0;", "-\treturn this.indexOf(getPath(element, false/*full path*/).toString(), null) >= 0;", "+\t// resource in workspace", "+\tString fullResourcePathString = getPath(element, false/*full path*/).toString();", "+\treturn indexOf(fullResourcePathString) >= 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a073db2d0fd4fccd4ccabc02af5d6539", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "6945031c95ca0d70ac3adb24efe812a06855be13", "commitAfterChange": "7a9726508a1cf4124fc56e814b6b230c72a37501", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": " public ICompilationUnit getWorkingCopy(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public ICompilationUnit getWorkingCopy(IProgressMonitor monitor) throws JavaModelException", "diff": ["+\tWorkingCopyOwner workingCopyOwner = new DefaultWorkingCopyOwner();", "-\t\t\tnew DefaultWorkingCopyOwner());", "-\tBecomeWorkingCopyOperation op = new BecomeWorkingCopyOperation(workingCopy, null, null);", "+\t\t\tworkingCopyOwner);", "+\tBecomeWorkingCopyOperation op = new BecomeWorkingCopyOperation(workingCopy, getPath(), null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa11fa61b2ed3249e9622e148ec78eaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java", "commitBeforeChange": "a25651dc191f0d1d2a6fc08798efb53cc4ead5ea", "commitAfterChange": "63f857482ea644a55bc614627e136cecaed43201", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public List fetchLinkedJars(FileSystem.ClasspathSectionProblemReporter problemReporter)", "signatureAfterChange": "  public List fetchLinkedJars(FileSystem.ClasspathSectionProblemReporter problemReporter)", "diff": ["-", "-\t\t\tboolean success = MANIFEST_ANALYZER.analyzeManifestContents(reader);", "-\t\t\tList calledFileNames = MANIFEST_ANALYZER.getCalledFileNames();", "+\t\t\tManifestAnalyzer analyzer = new ManifestAnalyzer();", "+\t\t\tboolean success = analyzer.analyzeManifestContents(reader);", "+\t\t\tList calledFileNames = analyzer.getCalledFileNames();", "-\t\t\t\tif (!success ||", "-\t\t\t\t\t\tMANIFEST_ANALYZER.getClasspathSectionsCount() == 1 &&  calledFileNames == null) {", "+\t\t\t\tif (!success || analyzer.getClasspathSectionsCount() == 1 &&  calledFileNames == null) {", "-\t\t\t\t} else if (MANIFEST_ANALYZER.getClasspathSectionsCount() > 1) {", "+\t\t\t\t} else if (analyzer.getClasspathSectionsCount() > 1) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aaab6218f7914500e8b1430a4915ebc0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java", "commitBeforeChange": "c4112ab397da10b85cbb2a3f081c4c91ed7c7975", "commitAfterChange": "2077df1da6fa132fd5beb7d042b102e760cf8cbf", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  protected void rebuildTypesAffectedBySecondaryTypes()", "signatureAfterChange": "  protected void rebuildTypesAffectedBySecondaryTypes()", "diff": ["+\tStringSet rootNames = new StringSet(3);", "-\t\tthis.incrementalBuilder.addDependentsOf(path, false, qualifiedNames, simpleNames);", "+\t\tthis.incrementalBuilder.addDependentsOf(path, false, qualifiedNames, simpleNames, rootNames);", "+\t\trootNames,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad2ab7d529e8ad44896077cead883515", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "4023530b8d5c988976c197345abc8e579006447d", "commitAfterChange": "c9c0baa62a88d8fd391f30c7fc178b578e6eac4d", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \t \tprotected static URL getLibraryJavadocLocation(IClasspathEntry entry) throws JavaModelException", "signatureAfterChange": " \t \tprotected static URL getLibraryJavadocLocation(IClasspathEntry entry) throws JavaModelException", "diff": ["+\t\t\t\tfinal String value = attrib.getValue();", "-\t\t\t\t\treturn new URL(attrib.getValue());", "+\t\t\t\t\treturn new URL(value);", "-\t\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.CANNOT_RETRIEVE_ATTACHED_JAVADOC));", "+\t\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.CANNOT_RETRIEVE_ATTACHED_JAVADOC, value));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad3093740a0df882468b9c3bee77cc1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic IPackageFragment findPackageFragment0(IPath path)  \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IPackageFragment findPackageFragment0(IPath path)  \t\tthrows JavaModelException", "diff": ["-\t\treturn getNameLookup().findPackageFragment(path);", "+\t\tNameLookup lookup = newNameLookup((WorkingCopyOwner)null/*no need to look at working copies for pkgs*/);", "+\t\treturn lookup.findPackageFragment(path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae87d06058a9fb4241b3ef3739833b31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "1f4efb41a52f8c33e561047da4304f9fe9e90dc9", "commitAfterChange": "44b2c87051c4d9bbf37b4cf649be500c54102bf7", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 115, "signatureBeforeChange": " \tpublic boolean saveClasspath(IClasspathEntry[] newClasspath, IPath newOutputLocation) throws JavaModelException", "signatureAfterChange": " \tpublic boolean saveClasspath(IClasspathEntry[] newClasspath, IPath newOutputLocation) throws JavaModelException", "diff": ["-\t\tIClasspathEntry[] fileEntries = readClasspathFile(false /*don't create markers*/, false/*don't log problems*/);", "+\t\tMap unknownElements = new HashMap();", "+\t\tIClasspathEntry[] fileEntries = readClasspathFile(false /*don't create markers*/, false/*don't log problems*/, unknownElements);", "-\t\t\tsetSharedProperty(CLASSPATH_FILENAME, encodeClasspath(newClasspath, newOutputLocation, true));", "+\t\t\tsetSharedProperty(CLASSPATH_FILENAME, encodeClasspath(newClasspath, newOutputLocation, true, unknownElements));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5b51105ee9ab2a5d160f9037cdcd4d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "888ff915accf0f7dc08ba845bca467c94f1e290b", "commitAfterChange": "f69c200469412ca3b93e80844c6c1f4e077169ac", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic static IWorkingCopy[] getSharedWorkingCopies(IBufferFactory factory)", "signatureAfterChange": " \tpublic static IWorkingCopy[] getSharedWorkingCopies(IBufferFactory factory)", "diff": ["+", "-\t\tMap perFactoryWorkingCopies = (Map) sharedWorkingCopies.get(factory);", "+\t\tCompilationUnitOwner owner = new DefaultCompilationUnitOwner(factory, null);", "+\t\tMap perFactoryWorkingCopies = (Map) sharedWorkingCopies.get(owner);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5b803c1f5680e35953c66e511fb2611", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "90f475069422eaf687608d6a16c5ad551ef1d62a", "commitAfterChange": "632c999e08e0d335f4c76cc23605cf2574b176f6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public IPath computeIndexLocation(IPath containerPath)", "signatureAfterChange": " public IPath computeIndexLocation(IPath containerPath)", "diff": ["-\t\tchecksumCalculator.reset();", "+\t\tCRC32 checksumCalculator = new CRC32();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7795228a6bba5aa9c28a996c5a56857", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "6d83fb6ca20ffbf90b2c1395c89af9051ead6573", "commitAfterChange": "badeb0487ffc4d03b8894b177626763bdc461127", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, List invocations)", "signatureAfterChange": " \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, List invocations)", "diff": ["+\t\t\tTypeVariableBinding[] invocationVariables = invocation.typeVariables();", "-\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[j], invocation.typeVariables()[j], (ReferenceBinding) mec, j);", "+\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[j], invocationVariables[j], (ReferenceBinding) mec, j);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce1db34a33d70f29504988b0e354a1d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6021d67f030c85737aa105da719e9a09cfc30ed", "commitAfterChange": "47da1e1f50b1360a7b560d74dfe1c60303fec552", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 45, "signatureBeforeChange": " private void readParticipantsIndexNamesFile()", "signatureAfterChange": " private void readParticipantsIndexNamesFile()", "diff": ["-\t\t\t\t\t\tcontainers.put(new Path(new String(names[i])), new Path(new String(names[i+1])));", "+\t\t\t\t\t\tIndexLocation indexLocation = new FileIndexLocation(new File(new String(names[i])), true);", "+\t\t\t\t\t\tcontainers.put(indexLocation, new Path(new String(names[i+1])));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf43aa1f99a066d4da953811a9fd4abc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "723628e20cdcca3d7368991555fbb1e08f7222a1", "commitAfterChange": "daa096617d4294add6bd8531102c2906f3417dbb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected boolean computeChildren(OpenableElementInfo info) throws JavaModelException", "signatureAfterChange": " protected boolean computeChildren(OpenableElementInfo info) throws JavaModelException", "diff": ["-\t\t\tcomputeFolderChildren((IContainer) fResource, \"\", vChildren); //$NON-NLS-1$", "+\t\t\tchar[][] exclusionPatterns = getExclusionPatterns();", "+\t\t\tcomputeFolderChildren((IContainer) fResource, \"\", vChildren, exclusionPatterns); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0866ab3f8c06e04d6812c8f636322ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "5af3ec11c73ebd5f465c42ddba07188d87fc00f1", "commitAfterChange": "b246de6fdcd5a901a16dcaeba98ae727a49eb635", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": " public void testPackageDeclaration2() throws CoreException", "signatureAfterChange": " public void testPackageDeclaration2() throws CoreException", "diff": ["-", "+\tJavaSearchResultCollector packageCollector = new JavaSearchResultCollector(true);", "-\t\tthis.resultCollector);", "+\t\tpackageCollector);", "-\t\tthis.resultCollector);", "+\t\tpackageCollector);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6b7dc990cc302b129257fc8c28bbb46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "64daeb17943302da145ef115d15261de8d97b017", "commitAfterChange": "8c36621cf84c38f056b439d0f0ca65c3c7b433c1", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 93, "signatureBeforeChange": " \tpublic void saving(ISaveContext context) throws CoreException", "signatureAfterChange": " \tpublic void saving(ISaveContext context) throws CoreException", "diff": ["+\t\t\t\t\t\tIClasspathEntry[] entries = container.getClasspathEntries();", "-\t\t\t\t\t\t\t\tcontainer.getClasspathEntries(), ", "+\t\t\t\t\t\t\t\tentries, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dceb4b9ac33222b7f47164bf5e401524", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "0af096b2d34684a162b7a195205699b7a15a3c32", "commitAfterChange": "55eb63b50ad4a934502bfb435a017ff21ebaf8d8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options)", "signatureAfterChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options)", "diff": ["+\t\tCodeSnippetParsingUtil codeSnippetParsingUtil = new CodeSnippetParsingUtil();", "-\t\t\t\tConstructorDeclaration constructorDeclaration = CodeSnippetParsingUtil.parseStatements(source, offset, length, options, true);", "+\t\t\t\tConstructorDeclaration constructorDeclaration = codeSnippetParsingUtil.parseStatements(source, offset, length, options, true);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, block);", "+\t\t\t\t\trootNodeToCompilationUnit(ast, converter, block, codeSnippetParsingUtil);", "-\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast);", "+\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast, codeSnippetParsingUtil);", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = CodeSnippetParsingUtil.parseExpression(source, offset, length, options, true);", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = codeSnippetParsingUtil.parseExpression(source, offset, length, options, true);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, expression2);", "+\t\t\t\t\trootNodeToCompilationUnit(ast, converter, expression2, codeSnippetParsingUtil);", "-\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast);", "+\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast, codeSnippetParsingUtil);", "-\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = CodeSnippetParsingUtil.parseClassBodyDeclarations(source, offset, length, options, true);", "+\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = codeSnippetParsingUtil.parseClassBodyDeclarations(source, offset, length, options, true);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, typeDeclaration);", "+\t\t\t\t\trootNodeToCompilationUnit(ast, converter, typeDeclaration, codeSnippetParsingUtil);", "-\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast);", "+\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast, codeSnippetParsingUtil);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef794cf7d0b94c4d45cba7e57b43457f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "56a9175c699a97c4f5829633c2d7d19949853c53", "commitAfterChange": "0ad6fa96f39a5da9fa734cfddfc11be397e751d9", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " protected boolean isAffectedByOpenable(IJavaElementDelta delta, IJavaElement element)", "signatureAfterChange": " protected boolean isAffectedByOpenable(IJavaElementDelta delta, IJavaElement element)", "diff": ["-\t\t\t\tif (typeHasSupertype(type) ", "+\t\t\t\tString typeName = type.getElementName();", "+\t\t\t\tif (hasSupertype(typeName) ", "-\t\t\t\t\t|| this.missingTypes.contains(type.getElementName())) {", "+\t\t\t\t\t|| this.missingTypes.contains(typeName)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f36624ada19d28cb7e7e5ba1c07f8e82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "b17f0033873962e79cd540a0937b76249dec8a6c", "commitAfterChange": "360e136a8e044225071869fa38d7072ea1d3cdac", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void build(boolean computeSubtypes)", "signatureAfterChange": " public void build(boolean computeSubtypes)", "diff": ["-\t\t\tString[] allPossibleSubtypes = this.determinePossibleSubTypes(possibleSubtypesMonitor);", "+\t\t\tHashSet localTypes = new HashSet(10); // contains the paths that have potential subtypes that are local/anonymous types", "+\t\t\tString[] allPossibleSubtypes = this.determinePossibleSubTypes(localTypes, possibleSubtypesMonitor);", "-\t\t\t\tbuildFromPotentialSubtypes(allPossibleSubtypes, buildMonitor);", "+\t\t\t\tbuildFromPotentialSubtypes(allPossibleSubtypes, localTypes, buildMonitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f84f24759c64dc78675bdd1d9984a8a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "a81ccfc0bc8694879e3dd29554f4e34087f49572", "commitAfterChange": "090ebdc0744610fb4e5ac8b5b4731d3eafdb24fe", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate void runTest(boolean shouldCompileOK, String[] testFiles, String commandLine, \t\t\tString expectedOutOutputString, \t\t\tString expectedErrOutputString, \t\t\tboolean shouldFlushOutputDirectory)", "signatureAfterChange": " \tprivate void runTest(boolean shouldCompileOK, String[] testFiles, String commandLine, \t\t\tString expectedOutOutputString, \t\t\tString expectedErrOutputString, \t\t\tboolean shouldFlushOutputDirectory)", "diff": ["-\t\t\tcompileOK = batchCompiler.compile(Main.tokenize(commandLine));", "+\t\t\tfinal String[] tokenizeCommandLine = Main.tokenize(commandLine);", "+\t\t\tcompileOK = batchCompiler.compile(tokenizeCommandLine);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fff298f5456b03fd42d51ebf99782b24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/State.java", "commitBeforeChange": "4e88e1625bb1c2659a2ee4ba931e466f5126f9f4", "commitAfterChange": "075da32620f3ceb13a370a8be8550de2baf091f1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \r void remove(IPath filePath)", "signatureAfterChange": "\r \r void remove(IPath filePath)", "diff": ["-\treferences.removeKey(filePath.toString().toCharArray());\r", "+\tString locationToRemove = filePath.toString();\r", "+\treferences.removeKey(locationToRemove);\r", "+\ttypeLocations.removeValue(locationToRemove);\r"]}], "num": 30742}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "044423e17c607dccbc588612d5e1caf6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4da11b1c3e0b42d2dec579d8f58a217a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "4e0e44e12d531b0f9a299237d2e668d6176cd234", "commitAfterChange": "2156fedddc9b679afe1f45ef1e9d318ac4df4d9a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope)", "signatureAfterChange": " \t \tprivate TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope)", "diff": ["-\t\tTypeBinding[] argumentTypes = Binding.NO_PARAMETERS;", "+\t\tthis.argumentTypes = Binding.NO_PARAMETERS;", "-\t\t\targumentTypes = new TypeBinding[length];", "+\t\t\tthis.argumentTypes = new TypeBinding[length];", "-\t\t\t\tif ((argumentTypes[i] = argument.resolveType(scope)) == null){", "+\t\t\t\tif ((this.argumentTypes[i] = argument.resolveType(scope)) == null){", "-\t\t\t\t\t\tpseudoArgs[i] = argumentTypes[i] == null ? TypeBinding.NULL : argumentTypes[i]; // replace args with errors with null type", "+\t\t\t\t\t\tpseudoArgs[i] = this.argumentTypes[i] == null ? TypeBinding.NULL : this.argumentTypes[i]; // replace args with errors with null type", "-\t\t\t\tTypeBinding [] inferredTypes = inferElidedTypes((ParameterizedTypeBinding) receiverType, receiverType.enclosingType(), argumentTypes, scope);", "+\t\t\t\tTypeBinding [] inferredTypes = inferElidedTypes((ParameterizedTypeBinding) receiverType, receiverType.enclosingType(), this.argumentTypes, scope);", "-\t\t\tthis.binding = findConstructorBinding(scope, this, allocationType, argumentTypes);", "+\t\t\tthis.binding = findConstructorBinding(scope, this, allocationType, this.argumentTypes);", "-\t\t\t\tif (checkInvocationArguments(scope, null, allocationType, this.binding, this.arguments, argumentTypes, argsContainCast, this)) {", "+\t\t\t\tif (checkInvocationArguments(scope, null, allocationType, this.binding, this.arguments, this.argumentTypes, argsContainCast, this)) {", "-\t\t \t\tcheckTypeArgumentRedundancy((ParameterizedTypeBinding)receiverType, receiverType.enclosingType(), argumentTypes , scope);", "+\t\t \t\tcheckTypeArgumentRedundancy((ParameterizedTypeBinding)receiverType, receiverType.enclosingType(), this.argumentTypes , scope);", "-\t\tMethodBinding inheritedBinding = findConstructorBinding(scope, this, anonymousSuperclass, argumentTypes);", "+\t\tMethodBinding inheritedBinding = findConstructorBinding(scope, this, anonymousSuperclass, this.argumentTypes);", "-\t\t\tif (checkInvocationArguments(scope, null, anonymousSuperclass, inheritedBinding, this.arguments, argumentTypes, argsContainCast, this)) {", "+\t\t\tif (checkInvocationArguments(scope, null, anonymousSuperclass, inheritedBinding, this.arguments, this.argumentTypes, argsContainCast, this)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9897f5039bec4f682f0a83c51b0e7766", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "4e0e44e12d531b0f9a299237d2e668d6176cd234", "commitAfterChange": "2156fedddc9b679afe1f45ef1e9d318ac4df4d9a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tboolean receiverCast = false, argsContainCast = false;", "+\tboolean receiverCast = false;", "-\tboolean receiverIsType = this.receiver instanceof NameReference && (((NameReference) this.receiver).bits & Binding.TYPE) != 0;", "+\tthis.receiverIsType = this.receiver instanceof NameReference && (((NameReference) this.receiver).bits & Binding.TYPE) != 0;", "-\tTypeBinding[] argumentTypes = Binding.NO_PARAMETERS;", "-\t\targumentTypes = new TypeBinding[length];", "+\t\tthis.argumentTypes = new TypeBinding[length];", "-\t\t\t\targsContainCast = true;", "+\t\t\t\tthis.argsContainCast = true;", "-\t\t\tif ((argumentTypes[i] = argument.resolveType(scope)) == null){", "+\t\t\tif ((this.argumentTypes[i] = argument.resolveType(scope)) == null){", "-\t\t\t\t\tpseudoArgs[i] = argumentTypes[i] == null ? TypeBinding.NULL : argumentTypes[i]; // replace args with errors with null type", "+\t\t\t\t\tpseudoArgs[i] = this.argumentTypes[i] == null ? TypeBinding.NULL : this.argumentTypes[i]; // replace args with errors with null type", "-\t\tscope.problemReporter().errorNoMethodFor(this, this.actualReceiverType, argumentTypes);", "+\t\tscope.problemReporter().errorNoMethodFor(this, this.actualReceiverType, this.argumentTypes);", "-\tfindMethodBinding(scope, argumentTypes);", "+\tfindMethodBinding(scope);", "-\t\t\t\tscope.problemReporter().errorNoMethodFor(this, this.actualReceiverType, argumentTypes);", "+\t\t\t\tscope.problemReporter().errorNoMethodFor(this, this.actualReceiverType, this.argumentTypes);", "-\t\tif (receiverIsType) {", "+\t\tif (this.receiverIsType) {", "-\t\tif (!(this.receiver.isImplicitThis() || this.receiver.isSuper() || receiverIsType)) {", "+\t\tif (!(this.receiver.isImplicitThis() || this.receiver.isSuper() || this.receiverIsType)) {", "-\tif (checkInvocationArguments(scope, this.receiver, this.actualReceiverType, this.binding, this.arguments, argumentTypes, argsContainCast, this)) {", "+\tif (checkInvocationArguments(scope, this.receiver, this.actualReceiverType, this.binding, this.arguments, this.argumentTypes, this.argsContainCast, this)) {", "-\t\tscope.checkAppropriateMethodAgainstSupers(this.selector, this.binding, argumentTypes, this);", "+\t\tscope.checkAppropriateMethodAgainstSupers(this.selector, this.binding, this.argumentTypes, this);"]}], "num": 53906}
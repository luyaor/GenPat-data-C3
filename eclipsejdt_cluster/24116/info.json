{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5aea2d2d2ab74f6b21b79b12e763f4ea", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "206185dc911dd8d334794f356f434c00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic static IClasspathEntry elementDecode(Element element, IJavaProject project)", "signatureAfterChange": " \t \tpublic static IClasspathEntry elementDecode(Element element, IJavaProject project)", "diff": ["-\t\t\t\t} else { // another project", "-\t\t\t\t\treturn JavaCore.newProjectEntry(path, isExported);", "+\t\t\t\t} else { ", "+\t\t\t\t\tif (path.segmentCount() == 1) {", "+\t\t\t\t\t\t// another project", "+\t\t\t\t\t\treturn JavaCore.newProjectEntry(path, isExported);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// an invalid source folder", "+\t\t\t\t\t\treturn JavaCore.newSourceEntry(path, inclusionPatterns, exclusionPatterns, outputLocation);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0c1671c682028bfd8025ff4e546c369", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "2cd341bad3d6cd90122a971e94cc1f949b18fab9", "commitAfterChange": "a8d7be43bfc161eacb8a6eeeebcd9b16942cb7cf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic static IClasspathEntry elementDecode(Element element, IJavaProject project)", "signatureAfterChange": " \t \tpublic static IClasspathEntry elementDecode(Element element, IJavaProject project)", "diff": ["-\t\t// cleaning flag (optional)", "-\t\tboolean isCleaning = !element.getAttribute(\"cleaning\").equals(\"false\"); //$NON-NLS-1$ //$NON-NLS-2$", "-", "-\t\t\t\t\treturn JavaCore.newSourceEntry(path, exclusionPatterns, outputLocation, outputLocation != null && isCleaning);", "+\t\t\t\t\treturn JavaCore.newSourceEntry(path, exclusionPatterns, outputLocation);", "-\t\t\t\t\t\tisCleaning, // clean"]}], "num": 24116}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a148f91926f7797a9653f45e71d74b6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82015eac2294b47ae986aefae7538ddb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "63e1f1decc43a525e62efd06af41afe94624af82", "commitAfterChange": "75e4065d4db8d1c67a280c4b46e8853fada67561", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "signatureAfterChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "diff": ["-\t\t", "-\t\t// Get cached preferences if exist", "-\t\tJavaModelManager.PerProjectInfo perProjectInfo = null;", "-\t\tif (inheritJavaCoreOptions) {", "-\t\t\ttry {", "-\t\t\t\tperProjectInfo = getPerProjectInfo();", "-\t\t\t\tif (perProjectInfo.options != null) {", "-\t\t\t\t\treturn new Hashtable(perProjectInfo.options);", "-\t\t\t\t}", "-\t\t\t} catch (JavaModelException jme) {", "-\t\t\t\t// skip", "-\t\t\t}", "-\t\t}", "-\t\tIEclipsePreferences projectPreferences= getEclipsePreferences();", "-\t\tif (projectPreferences == null) return options; // cannot do better (non-Java project)", "+\t\t// Get project specific options", "+\t\tJavaModelManager.PerProjectInfo perProjectInfo = null;", "+\t\tHashtable projectOptions = null;", "-\t\t", "-\t\t// project cannot hold custom preferences set to their default, as it uses CUSTOM_DEFAULT_OPTION_VALUE", "-", "-\t\t// get custom preferences not set to their default", "-\t\t\tString[] propertyNames = projectPreferences.keys();", "-\t\t\tfor (int i = 0; i < propertyNames.length; i++){", "-\t\t\t\tString propertyName = propertyNames[i];", "-\t\t\t\tString value = projectPreferences.get(propertyName, null);", "-\t\t\t\tif (value != null && optionNames.contains(propertyName)){", "-\t\t\t\t\toptions.put(propertyName, value.trim());", "-\t\t\t\t}", "-\t\t\t}\t\t", "+\t\t\tperProjectInfo = getPerProjectInfo();", "+\t\t\tprojectOptions = perProjectInfo.options;", "+\t\t\tif (projectOptions == null) {", "+\t\t\t\t// get eclipse preferences", "+\t\t\t\tIEclipsePreferences projectPreferences= getEclipsePreferences();", "+\t\t\t\tif (projectPreferences == null) return options; // cannot do better (non-Java project)", "+\t\t\t\t// create project options", "+\t\t\t\tString[] propertyNames = projectPreferences.keys();", "+\t\t\t\tprojectOptions = new Hashtable(propertyNames.length);", "+\t\t\t\tfor (int i = 0; i < propertyNames.length; i++){", "+\t\t\t\t\tString propertyName = propertyNames[i];", "+\t\t\t\t\tString value = projectPreferences.get(propertyName, null);", "+\t\t\t\t\tif (value != null && optionNames.contains(propertyName)){", "+\t\t\t\t\t\tprojectOptions.put(propertyName, value.trim());", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t", "+\t\t\t\t// cache project options", "+\t\t\t\tperProjectInfo.options = projectOptions;", "+\t\t\t}", "+\t\t} catch (JavaModelException jme) {", "+\t\t\tprojectOptions = new Hashtable();", "-\t\t\t// nothing to do", "+\t\t\tprojectOptions = new Hashtable();", "-\t\t// Cache computed map", "-\t\tif (perProjectInfo != null) {", "-\t\t\tperProjectInfo.options = options;", "+\t\t// Inherit from JavaCore options if specified", "+\t\tif (inheritJavaCoreOptions) {", "+\t\t\tIterator propertyNames = projectOptions.keySet().iterator();", "+\t\t\twhile (propertyNames.hasNext()) {", "+\t\t\t\tString propertyName = (String) propertyNames.next();", "+\t\t\t\tString propertyValue = (String) perProjectInfo.options.get(propertyName);", "+\t\t\t\tif (propertyValue != null && optionNames.contains(propertyName)){", "+\t\t\t\t\toptions.put(propertyName, propertyValue.trim());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn options;", "-\t\treturn options;", "+\t\treturn projectOptions;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca2ddba4ad23cb88d0d66f3be59b46a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/PreferencesTests.java", "commitBeforeChange": "790443c8ea7a17aa25cb0c35c01196da99d52e04", "commitAfterChange": "d7ed279f5216d32337e674d05a19fd9c56f52744", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@SuppressWarnings(\"nls\") \tpublic void testSimpleConfigApi() throws Exception", "signatureAfterChange": " \t@SuppressWarnings(\"nls\") \tpublic void testSimpleConfigApi() throws Exception", "diff": ["+\t\tAptConfig.setEnabled(null, true);", "-\t\tAptConfig.setEnabled(jproj, true);", "-\t\tassertTrue(AptConfig.isEnabled(jproj));", "+\t\tassertTrue(AptConfig.isEnabled(null));", "+\t\tAptConfig.setEnabled(null, true);", "+\t\tAptConfig.setEnabled(jproj, false);", "+\t\tassertFalse(AptConfig.isEnabled(jproj));", "+\t\tassertTrue(AptConfig.isEnabled(null));", "+\t\tMap<String, String> wkspOpts = new HashMap<String, String>(3);", "+\t\twkspOpts.put(\"b\", \"bVal\");", "+\t\twkspOpts.put(\"another option\", \"and\\\\more \\\"punctuation!\\\"\");", "+\t\tAptConfig.setProcessorOptions(wkspOpts, null);", "+\t\tMap<String, String> retrievedWkspOpts = AptConfig.getRawProcessorOptions(null);", "+\t\tassertTrue(\"getRawProcessorOptions() should return the values set in setProcessorOptions()\", ", "+\t\t\t\twkspOpts.equals(retrievedWkspOpts));", "+", "+\t\tMap<String, String> projOpts = new HashMap<String, String>(3);", "+\t\tprojOpts.put(\"a\", \"aVal\");", "+\t\tprojOpts.put(\"with spaces\", \"value also has spaces\");", "+\t\tprojOpts.put(\"foo\", \"bar\");", "+\t\tAptConfig.setProcessorOptions(projOpts, jproj);", "+\t\tMap<String, String> retrievedProjOpts = AptConfig.getRawProcessorOptions(jproj);", "+\t\tassertTrue(\"getRawProcessorOptions() should return the values set in setProcessorOptions()\", ", "+\t\t\t\tprojOpts.equals(retrievedProjOpts));", "+", "+\t\twkspOpts.clear();", "+\t\twkspOpts.put(\"noodle\", \"nubble\");", "+\t\twkspOpts.put(\"spoo/mack\", \"wumpus\");", "+\t\tAptConfig.setProcessorOptions(wkspOpts, null);", "+\t\tretrievedWkspOpts = AptConfig.getRawProcessorOptions(null);", "+\t\tassertTrue(\"getRawProcessorOptions() should return the values set in setProcessorOptions()\", ", "+\t\t\t\twkspOpts.equals(retrievedWkspOpts));", "+", "+\t\tprojOpts.clear();", "+\t\tprojOpts.put(\"smurf\", \"more smurfs\\\\=bad\");", "+\t\tprojOpts.put(\"baz/quack\", \"quux\");", "+\t\tAptConfig.setProcessorOptions(projOpts, jproj);", "+\t\tretrievedProjOpts = AptConfig.getRawProcessorOptions(jproj);", "+\t\tassertTrue(\"getRawProcessorOptions() should return the values set in setProcessorOptions()\", ", "+\t\t\t\tprojOpts.equals(retrievedProjOpts));", "+", "-\t\tAptConfig.addProcessorOption(jproj, \"\", null); // should gracefully do nothing", "-\t\tAptConfig.addProcessorOption(jproj, null, \"spud\"); // should gracefully do nothing", "-\t\tAptConfig.removeProcessorOption(jproj, null);", "-\t\tAptConfig.removeProcessorOption(jproj, \"\");", "+\t\t", "+\t\tAptConfig.addProcessorOption(null, \"workspace option\", \"corresponding value\");", "+\t\tAptConfig.addProcessorOption(null, \"foo\", \"whatever\");", "+\t\tAptConfig.removeProcessorOption(null, \"foo\");", "+\t\toptions = AptConfig.getProcessorOptions(null);", "+\t\tassertFalse(options.containsKey(\"foo\"));", "+\t\tassertTrue(options.containsKey(\"workspace option\"));", "+\t\tAptConfig.removeProcessorOption(null, \"workspace option\");"]}], "num": 54365}
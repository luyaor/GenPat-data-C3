{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "447fe3b5db14e35372bdf95141961fcf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "532c87598c8712a57a0976cb70cda671", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "c099c1c915ea3c2425fc3259553c0cf5526a58b0", "commitAfterChange": "c712e524fc146f884a167061179343b82ef9e12d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private void computeInheritedMethods()", "signatureAfterChange": " private void computeInheritedMethods()", "diff": ["-\t\t\t\t\t\t// 30805 - non-visible (abstract) method still needs to be implemented even if similar method defined below (overridesPackageDefaultMethod) ", "-\t\t\t\t\t\tif (!(method.isDefault() && method.isAbstract() && (method.declaringClass.fPackage != type.fPackage))) { ", "-\t\t\t\t\t\t\tfor (int i = 0, length = existingMethods.length; i < length; i++)", "-\t\t\t\t\t\t\t\tif (method.returnType == existingMethods[i].returnType)", "-\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(existingMethods[i]))", "-\t\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\tfor (int i = 0, length = existingMethods.length; i < length; i++) {", "+\t\t\t\t\t\t\tMethodBinding existingMethod = existingMethods[i];", "+\t\t\t\t\t\t\tif (method.returnType == existingMethod.returnType", "+\t\t\t\t\t\t\t\t\t&& !(method.isDefault() // (31398,30805) keep non-visible default abstract, if no implementation exists in same package", "+\t\t\t\t\t\t\t\t\t\t\t\t&& method.isAbstract() ", "+\t\t\t\t\t\t\t\t\t\t\t\t&& method.declaringClass.fPackage != existingMethod.declaringClass.fPackage)", "+\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(existingMethod)) {", "+\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\tif (nonVisibleDefaultMethods != null)", "-\t\t\t\t\t\tfor (int i = 0; i < nonVisibleCount; i++)", "-\t\t\t\t\t\t\tif (method.returnType == nonVisibleDefaultMethods[i].returnType)", "-\t\t\t\t\t\t\t\tif (CharOperation.equals(method.selector, nonVisibleDefaultMethods[i].selector))", "-\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(nonVisibleDefaultMethods[i]))", "+\t\t\t\t\tif (nonVisibleDefaultMethods != null) {", "+\t\t\t\t\t\tfor (int i = 0; i < nonVisibleCount; i++) {", "+\t\t\t\t\t\t\tif (method.returnType == nonVisibleDefaultMethods[i].returnType", "+\t\t\t\t\t\t\t\t\t&& CharOperation.equals(method.selector, nonVisibleDefaultMethods[i].selector)", "+\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(nonVisibleDefaultMethods[i])) {", "-", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\t\tif (existingMethods == null)", "+\t\t\t\t\t\tif (existingMethods == null) {", "-\t\t\t\t\t\telse", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (nonVisibleDefaultMethods == null)", "+\t\t\t\t\t\tif (nonVisibleDefaultMethods == null) {", "-\t\t\t\t\t\telse if (nonVisibleCount == nonVisibleDefaultMethods.length)", "+\t\t\t\t\t\t} else if (nonVisibleCount == nonVisibleDefaultMethods.length) {", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (method.isAbstract() && !this.type.isAbstract()) // non visible abstract methods cannot be overridden so the type must be defined abstract", "+\t\t\t\t\t\tif (method.isAbstract() && !this.type.isAbstract()) { // non visible abstract methods cannot be overridden so the type must be defined abstract", "-", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (method.returnType == current[i].returnType) {", "-\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(current[i])) {", "-\t\t\t\t\t\t\t\t\t\tthis.problemReporter().overridesPackageDefaultMethod(current[i], method);", "-\t\t\t\t\t\t\t\t\t\tbreak foundMatch;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (method.returnType == current[i].returnType", "+\t\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(current[i])) {", "+\t\t\t\t\t\t\t\t\tthis.problemReporter().overridesPackageDefaultMethod(current[i], method);", "+\t\t\t\t\t\t\t\t\tbreak foundMatch;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f757ee0300136e657030cddeae93e80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "702e8c000f2670613f66a2fdca7428fa36da58d0", "commitAfterChange": "b3432509fb264a4e815030b82eeb1b66a7f45eaa", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void computeInheritedMethods()", "signatureAfterChange": " private void computeInheritedMethods()", "diff": ["-\t\t\t\t\t\t\tMethodBinding existingMethod = existingMethods[i];", "-\t\t\t\t\t\t\tif (method.returnType == existingMethod.returnType", "-\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(existingMethod)) {", "-\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\tif (method.isAbstract() // (31398,30805) report non-visible default abstract, if no implementation is available", "-\t\t\t\t\t\t\t\t\t\t\t\t&&  (method.isDefault() && method.declaringClass.fPackage != existingMethod.declaringClass.fPackage)) {", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\tif (method.returnType == existingMethods[i].returnType) {", "+\t\t\t\t\t\t\t\tif (method.areParametersEqual(existingMethods[i])) {", "+\t\t\t\t\t\t\t\t\tif (method.isDefault() && method.isAbstract() && method.declaringClass.fPackage != type.fPackage)", "+\t\t\t\t\t\t\t\t\t\tcheckDefaultAbstractMethod(method);", "+\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\tif (nonVisibleDefaultMethods != null) {", "-\t\t\t\t\t\tfor (int i = 0; i < nonVisibleCount; i++) {", "-\t\t\t\t\t\t\tif (method.returnType == nonVisibleDefaultMethods[i].returnType", "-\t\t\t\t\t\t\t\t\t&& CharOperation.equals(method.selector, nonVisibleDefaultMethods[i].selector)", "-\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(nonVisibleDefaultMethods[i])) {", "+\t\t\t\t\tif (nonVisibleDefaultMethods != null)", "+\t\t\t\t\t\tfor (int i = 0; i < nonVisibleCount; i++)", "+\t\t\t\t\t\t\tif (method.returnType == nonVisibleDefaultMethods[i].returnType)", "+\t\t\t\t\t\t\t\tif (CharOperation.equals(method.selector, nonVisibleDefaultMethods[i].selector))", "+\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(nonVisibleDefaultMethods[i]))", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!(method.isDefault() && (method.declaringClass.fPackage != type.fPackage))) { // ignore methods which have default visibility and are NOT defined in another package", "-\t\t\t\t\t\tif (existingMethods == null) {", "+", "+\t\t\t\t\tif (!(method.isDefault() && method.declaringClass.fPackage != type.fPackage)) { // ignore methods which have default visibility and are NOT defined in another package", "+\t\t\t\t\t\tif (existingMethods == null)", "-\t\t\t\t\t\t} else {", "+\t\t\t\t\t\telse", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (nonVisibleDefaultMethods == null) {", "+\t\t\t\t\t\tif (nonVisibleDefaultMethods == null)", "-\t\t\t\t\t\t} else if (nonVisibleCount == nonVisibleDefaultMethods.length) {", "+\t\t\t\t\t\telse if (nonVisibleCount == nonVisibleDefaultMethods.length)", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (method.isAbstract() && !this.type.isAbstract()) { // non visible abstract methods cannot be overridden so the type must be defined abstract", "+\t\t\t\t\t\tif (method.isAbstract() && !this.type.isAbstract()) // non visible abstract methods cannot be overridden so the type must be defined abstract", "-\t\t\t\t\t\t}", "+", "-\t\t\t\t\t\t\t\tif (method.returnType == current[i].returnType", "-\t\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(current[i])) {", "-\t\t\t\t\t\t\t\t\tthis.problemReporter().overridesPackageDefaultMethod(current[i], method);", "-\t\t\t\t\t\t\t\t\tbreak foundMatch;", "+\t\t\t\t\t\t\t\tif (method.returnType == current[i].returnType) {", "+\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(current[i])) {", "+\t\t\t\t\t\t\t\t\t\tthis.problemReporter().overridesPackageDefaultMethod(current[i], method);", "+\t\t\t\t\t\t\t\t\t\tbreak foundMatch;", "+\t\t\t\t\t\t\t\t\t}"]}], "num": 1224}
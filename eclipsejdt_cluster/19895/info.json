{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4baf1b6859576b5c928f58ccfe7679bc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "243f5b1f3c62755bbdec696ae84ce27a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator2.java", "commitBeforeChange": "8eff811a28d835d940585e1dd6e43b7e81d9c25c", "commitAfterChange": "ecd6b6b03e84e16fa2ef3316475695c9990930d4", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprotected boolean createHierarchyResolver()", "signatureAfterChange": " \tprotected boolean createHierarchyResolver(PotentialMatch[] potentialMatches)", "diff": ["-\tprotected boolean createHierarchyResolver() {", "+\tprotected boolean createHierarchyResolver(PotentialMatch[] potentialMatches) {", "-\t\t\t\tif (!focusType.isBinary()) {", "-\t\t\t\t\t// cache all types in the focus' compilation unit (even secondary types)", "-\t\t\t\t\tthis.accept((ICompilationUnit)focusType.getCompilationUnit());", "+\t\t\t\t// cache focus type if not a potential match", "+\t\t\t\tchar[][] compoundName = CharOperation.splitOn('.', focusType.getFullyQualifiedName().toCharArray());", "+\t\t\t\tboolean isPotentialMatch = false;", "+\t\t\t\tfor (int i = 0, length = potentialMatches.length; i < length; i++) {", "+\t\t\t\t\tif (CharOperation.equals(potentialMatches[i].compoundName, compoundName)) {", "+\t\t\t\t\t\tisPotentialMatch = true;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (!isPotentialMatch) {", "+\t\t\t\t\tif (focusType.isBinary()) {", "+\t\t\t\t\t\t// cache binary type", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tthis.cacheBinaryType(focusType);", "+\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// cache all types in the focus' compilation unit (even secondary types)", "+\t\t\t\t\t\tthis.accept((ICompilationUnit)focusType.getCompilationUnit());", "+\t\t\t\t\t}", "-\t\t\t\tchar[] fullyQualifiedName = focusType.getFullyQualifiedName().toCharArray();", "+\t\t\t\t// resolve focus type", "-\t\t\t\tif (this.hierarchyResolver.setFocusType(CharOperation.splitOn('.', fullyQualifiedName)) == null) {", "+\t\t\t\tif (this.hierarchyResolver.setFocusType(compoundName) == null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eee658b91d7fd67e5d94e0c35eb4b560", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Region.java", "commitBeforeChange": "71461454c011188604de602b101178a9fe2bbd9e", "commitAfterChange": "0bc13ec7a82e3d51d40616081c389f8948d01d76", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void add(IJavaElement element)", "signatureAfterChange": " public void add(IJavaElement element)", "diff": ["+\t\tif (element.getElementType() == IJavaElement.JAVA_PROJECT) {", "+\t\t\t// add jar roots as well so that jars don't rely on their parent to know ", "+\t\t\t// if they are contained in the region", "+\t\t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=146615)", "+\t\t\ttry {", "+\t\t\t\tIPackageFragmentRoot[] roots = ((IJavaProject) element).getPackageFragmentRoots();", "+\t\t\t\tfor (int i = 0, length = roots.length; i < length; i++) {", "+\t\t\t\t\tif (roots[i].isArchive() && !fRootElements.contains(roots[i]))", "+\t\t\t\t\t\tfRootElements.add(roots[i]);", "+\t\t\t\t}", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// project doesn't exist", "+\t\t\t}", "+\t\t}"]}], "num": 19895}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56ab693bd811b9676381ad44e3a6989f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06058baebef7d4ebd26f039a17eb0488", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "4334ae3c3edbbd7f696f2ecb0b69bc310c6a9029", "commitAfterChange": "5bbbd2a6cca56e147177ee2f5e5f3e4b4f043dee", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r \tpublic static IPath getClasspathVariable(String variableName)", "signatureAfterChange": "\r \tpublic static IPath getClasspathVariable(final String variableName)", "diff": ["-\tpublic static IPath getClasspathVariable(String variableName) {\r", "+\tpublic static IPath getClasspathVariable(final String variableName) {\r", "-\t\t\tClasspathVariableInitializer initializer = getClasspathVariableInitializer(variableName);\r", "+\t\t\tfinal ClasspathVariableInitializer initializer = getClasspathVariableInitializer(variableName);\r", "-\t\t\t\tinitializer.initialize(variableName);\r", "+\t\t\t\t// wrap initializer call with Safe runnable in case initializer would be causing some grief\r", "+\t\t\t\tPlatform.run(new ISafeRunnable() {\r", "+\t\t\t\t\tpublic void handleException(Throwable exception) {\r", "+\t\t\t\t\t\tUtil.log(exception, \"Exception occurred in classpath variable initializer: \"+initializer); //$NON-NLS-1$\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tpublic void run() throws Exception {\r", "+\t\t\t\t\t\tinitializer.initialize(variableName);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t});\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "158a55dfbb7a1740ba193ff4683938cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "d3a1d7d826df4253620b10fc59a69c9f41d35ed1", "commitAfterChange": "a5712ad1c74db6415d42ae5af5da692be3279bc4", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \t \tpublic IClasspathContainer getClasspathContainer(IPath containerPath, IJavaProject project) throws JavaModelException", "signatureAfterChange": " \t \tpublic IClasspathContainer getClasspathContainer(final IPath containerPath, final IJavaProject project) throws JavaModelException", "diff": ["-\tpublic IClasspathContainer getClasspathContainer(IPath containerPath, IJavaProject project) throws JavaModelException {", "+\tpublic IClasspathContainer getClasspathContainer(final IPath containerPath, final IJavaProject project) throws JavaModelException {", "-\t\t\t\treturn initializeAllContainers(project, containerPath);", "+\t\t\t\tcontainer = initializeAllContainers(project, containerPath);", "+\t\t\t} else {", "+\t\t\t\tcontainer = initializeContainer(project, containerPath);", "-\t\t\treturn initializeContainer(project, containerPath);", "+\t\t\tif (container == null) { // initializer failed to do its job: redirect to the failure container", "+\t\t\t\tClasspathContainerInitializer initializer = JavaCore.getClasspathContainerInitializer(containerPath.segment(0));", "+\t\t\t\tif (initializer == null) {", "+\t\t\t\t\t// create a dummy initializer and get the default failure container", "+\t\t\t\t\tcontainer = (new ClasspathContainerInitializer() {", "+\t\t\t\t\t\tpublic void initialize(IPath path, IJavaProject javaProject) throws CoreException {", "+\t\t\t\t\t\t\t// not used", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}).getFailureContainer(containerPath, project);", "+\t\t\t\t} else {", "+\t\t\t\t\tcontainer = initializer.getFailureContainer(containerPath, project);", "+\t\t\t\t}", "+\t\t\t\tif (container != null)", "+\t\t\t\t\tcontainerPut(project, containerPath, container);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3487523134b5f2d5f258168e484ed4e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "4334ae3c3edbbd7f696f2ecb0b69bc310c6a9029", "commitAfterChange": "5bbbd2a6cca56e147177ee2f5e5f3e4b4f043dee", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic static IClasspathContainer getClasspathContainer(IPath containerPath, IJavaProject project) throws JavaModelException", "signatureAfterChange": "\r \tpublic static IClasspathContainer getClasspathContainer(final IPath containerPath, final IJavaProject project) throws JavaModelException", "diff": ["-\tpublic static IClasspathContainer getClasspathContainer(IPath containerPath, IJavaProject project) throws JavaModelException {\r", "+\tpublic static IClasspathContainer getClasspathContainer(final IPath containerPath, final IJavaProject project) throws JavaModelException {\r", "-\t\t\tClasspathContainerInitializer initializer = JavaModelManager.getClasspathContainerInitializer(containerPath.segment(0));\r", "+\t\t\tfinal ClasspathContainerInitializer initializer = JavaModelManager.getClasspathContainerInitializer(containerPath.segment(0));\r", "-\t\t\t\t\t// activate initializer\r", "-\t\t\t\t\tinitializer.initialize(containerPath, project);\r", "+\t\t\t\t\t// wrap initializer call with Safe runnable in case initializer would be causing some grief\r", "+\t\t\t\t\tPlatform.run(new ISafeRunnable() {\r", "+\t\t\t\t\t\tpublic void handleException(Throwable exception) {\r", "+\t\t\t\t\t\t\tUtil.log(exception, \"Exception occurred in classpath container initializer: \"+initializer); //$NON-NLS-1$\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tpublic void run() throws Exception {\r", "+\t\t\t\t\t\t\tinitializer.initialize(containerPath, project);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t});\r", "-\t\t\t\t} catch (CoreException e){\r", "-\t\t\t\t\tthrow new JavaModelException(e);\r"]}], "num": 69250}
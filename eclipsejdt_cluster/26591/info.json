{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1343e35dd4da876786010878f14c3153", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a3dfb03c6d5625042d5e40f163fcfc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+\t\tthis.collection.checkNPE(currentScope, flowContext, flowInfo, true);", "-\t\tFlowInfo condInfo = flowInfo.copy().unconditionalInits().discardNullRelatedInitializations();", "-\t\tcondInfo = this.collection.analyseCode(scope, flowContext, condInfo);", "+\t\tFlowInfo condInfo = this.collection.analyseCode(scope, flowContext, flowInfo.copy());", "-\t\tLoopingFlowContext loopingContext = new LoopingFlowContext(flowContext, this, breakLabel, continueLabel, scope);", "-\t\tFlowInfo actionInfo = condInfo.initsWhenTrue().copy();", "+\t\tLoopingFlowContext loopingContext = ", "+\t\t\tnew LoopingFlowContext(flowContext, flowInfo, this, breakLabel, ", "+\t\t\t\tcontinueLabel, scope);", "+\t\tUnconditionalFlowInfo actionInfo = ", "+\t\t\tcondInfo.nullInfoLessUnconditionalCopy();", "-\t\t\t\tactionInfo = action.analyseCode(scope, loopingContext, actionInfo);", "+\t\t\t\tactionInfo = action.", "+\t\t\t\t\tanalyseCode(scope, loopingContext, actionInfo).", "+\t\t\t\t\tunconditionalCopy();", "-\t\t\texitBranch = condInfo.initsWhenFalse();", "-\t\t\texitBranch.addInitializationsFrom(flowInfo); // recover null inits from before condition analysis\t\t\t", "-\t\t\tif (!actionInfo.isReachable() && !loopingContext.initsOnContinue.isReachable()) {", "+\t\t\texitBranch = flowInfo.unconditionalCopy().", "+\t\t\t\taddInitializationsFrom(condInfo.initsWhenFalse()); ", "+\t\t\t// TODO (maxime) no need to test when false: can optimize (same for action being unreachable above) ", "+\t\t\tif ((actionInfo.tagBits & loopingContext.initsOnContinue.tagBits &", "+\t\t\t\t\tFlowInfo.UNREACHABLE) != 0) {", "-\t\t\t\tactionInfo = actionInfo.mergedWith(loopingContext.initsOnContinue.unconditionalInits());", "-\t\t\t\tloopingContext.complainOnDeferredChecks(scope, actionInfo);", "-\t\t\t\texitBranch.addPotentialInitializationsFrom(actionInfo.unconditionalInits());", "+\t\t\t\tactionInfo = actionInfo.mergedWith(loopingContext.initsOnContinue);", "+\t\t\t\tloopingContext.complainOnDeferredFinalChecks(scope, actionInfo);", "+\t\t\t\texitBranch.addPotentialInitializationsFrom(actionInfo);", "+\t\tloopingContext.complainOnDeferredNullChecks(currentScope, actionInfo);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9f04397f7baa0031594d43ffd31ea9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\t\t\t\t\tflowInfo.copy().unconditionalInits().discardNullRelatedInitializations())", "+\t\t\t\t\t\tflowInfo.nullInfoLessUnconditionalCopy())", "-\t\t\ttryBlockExit = !tryInfo.isReachable();", "+\t\t\ttryBlockExit = (tryInfo.tagBits & FlowInfo.UNREACHABLE) != 0;", "-\t\t\t\t\tflowInfo", "-\t\t\t\t\t\t.copy()", "-\t\t\t\t\t\t.unconditionalInits()", "+\t\t\t\t\tflowInfo.unconditionalCopy().", "+\t\t\t\t\t\taddPotentialInitializationsFrom(", "+\t\t\t\t\t\t\thandlingContext.initsOnException(", "+\t\t\t\t\t\t\t\tcaughtExceptionTypes[i]))", "-\t\t\t\t\t\t\thandlingContext.initsOnException(caughtExceptionTypes[i]).unconditionalInits())", "-\t\t\t\t\t\t.addPotentialInitializationsFrom(tryInfo.unconditionalInits())", "-\t\t\t\t\t\t.addPotentialInitializationsFrom(handlingContext.initsOnReturn);", "+\t\t\t\t\t\t\ttryInfo.nullInfoLessUnconditionalCopy())", "+\t\t\t\t\t\t\t// remove null info to protect point of ", "+\t\t\t\t\t\t\t// exception null info ", "+\t\t\t\t\t\t.addPotentialInitializationsFrom(", "+\t\t\t\t\t\t\thandlingContext.initsOnReturn.", "+\t\t\t\t\t\t\t\tnullInfoLessUnconditionalCopy());", "-\t\t\t\tcatchExits[i] = !catchInfo.isReachable();", "+\t\t\t\tcatchExits[i] = ", "+\t\t\t\t\t(catchInfo.tagBits & FlowInfo.UNREACHABLE) != 0;", "-\t\tfinallyContext.complainOnDeferredChecks(", "-\t\t\ttryInfo.isReachable() ", "-\t\t\t\t? (tryInfo.addPotentialInitializationsFrom(insideSubContext.initsOnReturn))", "-\t\t\t\t: insideSubContext.initsOnReturn, ", "+\t\tfinallyContext/* NN null with subRoutineStartLabel, which returns */.complainOnDeferredChecks( ", "+\t\t\t(tryInfo.tagBits & FlowInfo.UNREACHABLE) == 0 ", "+\t\t\t\t? flowInfo.unconditionalCopy().", "+\t\t\t\t\taddPotentialInitializationsFrom(tryInfo).", "+\t\t\t\t\t\t// lighten the influence of the try block, which may have ", "+\t\t\t\t\t\t// exited at any point", "+\t\t\t\t\taddPotentialInitializationsFrom(", "+\t\t\t\t\t\tinsideSubContext/* NN null with subRoutineStartLabel, which returns */.", "+\t\t\t\t\t\t\tinitsOnReturn)", "+\t\t\t\t: insideSubContext.initsOnReturn,"]}], "num": 26591}
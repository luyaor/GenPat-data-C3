{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac99737ccfb1d46e3c81ccbecb1d8e54", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a21b05c2a947e24376fb283242be471", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " \tpublic void test084()", "signatureAfterChange": " \tpublic void test084()", "diff": ["+\t\t\t\"\t             ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX x = new X((AX)null, (AX)null);\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX x = new X((AX)null, (AX)null);\\n\" + ", "+\t\t\t\"\t                       ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tAX a = new AX((AX)null);\\n\" + ", "+\t\t\t\"\t^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tAX a = new AX((AX)null);\\n\" + ", "+\t\t\t\"\t           ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tAX a = new AX((AX)null);\\n\" + ", "+\t\t\t\"\t               ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tAX a2 = new AX(null);\\n\" + ", "+\t\t\t\"\t^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"11. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tAX a2 = new AX(null);\\n\" + ", "+\t\t\t\"\t            ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"12. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"6. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"13. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"7. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\"14. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\t\"8. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\"15. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\t\"9. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\t\"16. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"17. WARNING in X.java (at line 22)\\n\" + ", "+\t\t\t\"\tvoid foo(AX rawAx){}\\n\" + ", "+\t\t\t\"\t         ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ed981d690d3b0cb6d08cde15060eccd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "ab13d6b1cdae7066b5bf55448172280f7137212e", "commitAfterChange": "b6aa1e7468e04a61e529b4c4b0b636e6819cd942", "methodNumberBeforeChange": 253, "methodNumberAfterChange": 253, "signatureBeforeChange": " \tpublic void test0245()", "signatureAfterChange": " \tpublic void test0245()", "diff": ["+\t\tif (this.complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\tthis.runNegativeTest(", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\t\"public class X <T> { \\n\" + ", "+\t\t\t\t\t\t\"        <G> T foo(G g) {\\n\" + ", "+\t\t\t\t\t\t\"            return null;\\n\" + ", "+\t\t\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\t\t\"        T bar(T t) {\\n\" + ", "+\t\t\t\t\t\t\"        \treturn zork;\\n\" + ", "+\t\t\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\t\t\"\\n\" + ", "+\t\t\t\t\t\t\"        public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\t\t\"                X rx = new X();\\n\" + ", "+\t\t\t\t\t\t\"                rx.<String>foo(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\t\t\"                rx.<String>bar(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\t\t\"}\\n\"", "+\t\t\t\t\t},", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\t\"\treturn zork;\\n\" + ", "+\t\t\t\t\t\"\t       ^^^^\\n\" + ", "+\t\t\t\t\t\"zork cannot be resolved\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\t\t\"\tX rx = new X();\\n\" + ", "+\t\t\t\t\t\"\t^\\n\" + ", "+\t\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\t\t\"\tX rx = new X();\\n\" + ", "+\t\t\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"4. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\t\t\"\trx.<String>foo(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\t\"\t           ^^^\\n\" + ", "+\t\t\t\t\t\"The method foo(Object) of raw type X is no longer generic; it cannot be parameterized with arguments <String>\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"5. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\t\t\"\trx.<String>bar(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\t\"\t           ^^^\\n\" + ", "+\t\t\t\t\t\"The method bar(Object) of type X is not generic; it cannot be parameterized with arguments <String>\\n\" + ", "+\t\t\t\t\t\"----------\\n\",", "+\t\t\t\t\tJavacTestOptions.EclipseHasABug.EclipseBug236242);", "+\t\t\treturn;", "+\t\t}", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X <T> { \\n\" +", "-\t\t\t\t\"\t<G> T foo(G g) {\\n\" +", "-\t\t\t\t\"\t\treturn null;\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"\t\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\tX rx = new X();\\n\" +", "-\t\t\t\t\"\t\trx.<String>foo(\\\"hello\\\");\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\\n\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 7)\\n\" +", "-\t\t\t\"\tX rx = new X();\\n\" +", "-\t\t\t\"\t^\\n\" +", "-\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 7)\\n\" +", "-\t\t\t\"\tX rx = new X();\\n\" +", "-\t\t\t\"\t           ^\\n\" +", "-\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 8)\\n\" +", "-\t\t\t\"\trx.<String>foo(\\\"hello\\\");\\n\" +", "-\t\t\t\"\t           ^^^\\n\" +", "-\t\t\t\"The method foo(Object) of raw type X is no longer generic; it cannot be parameterized with arguments <String>\\n\" +", "-\t\t\t\"----------\\n\",", "-\t\t\tJavacTestOptions.EclipseHasABug.EclipseBug236242);", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"public class X <T> { \\n\" + ", "+\t\t\t\t\t\"        <G> T foo(G g) {\\n\" + ", "+\t\t\t\t\t\"            return null;\\n\" + ", "+\t\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\t\"        T bar(T t) {\\n\" + ", "+\t\t\t\t\t\"        \treturn zork;\\n\" + ", "+\t\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\t\"\\n\" + ", "+\t\t\t\t\t\"        public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\t\"                X rx = new X();\\n\" + ", "+\t\t\t\t\t\"                rx.<String>foo(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\t\"                rx.<String>bar(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\t\"}\\n\"", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\treturn zork;\\n\" + ", "+\t\t\t\t\"\t       ^^^^\\n\" + ", "+\t\t\t\t\"zork cannot be resolved\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tX rx = new X();\\n\" + ", "+\t\t\t\t\"\t^\\n\" + ", "+\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tX rx = new X();\\n\" + ", "+\t\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\t\"\trx.<String>foo(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: The method foo(Object) belongs to the raw type X. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\t\"\trx.<String>bar(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: The method bar(Object) belongs to the raw type X. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"6. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\t\"\trx.<String>bar(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^\\n\" + ", "+\t\t\t\t\"Unused type arguments for the non generic method bar(Object) of type X; it should not be parameterized with arguments <String>\\n\" + ", "+\t\t\t\t\"----------\\n\",", "+\t\t\t\tJavacTestOptions.EclipseHasABug.EclipseBug236242);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cfa45e217e0e418119d1f9be6b8604e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "3255db62a2a31c2b7911a20dbb001663d6aa8d6e", "commitAfterChange": "446232cf1f35af48915a191f1c4500b94c6d46e0", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "\r \tpublic void test036() throws Exception", "signatureAfterChange": "\r \tpublic void test036() throws Exception", "diff": ["+\t\t\"\t                       ^^^^^^^^^\\n\" + \r", "+\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"3. ERROR in X.java (at line 3)\\n\" + \r", "+\t\t\"\tSystem.out.println(int @NonEmpty [] [] @NonEmpty @Empty [] [] @NonEmpty[].class); // illegal!\\n\" + \r", "-\t\t\"3. ERROR in X.java (at line 3)\\n\" + \r", "+\t\t\"4. ERROR in X.java (at line 3)\\n\" + \r", "+\t\t\"\tSystem.out.println(int @NonEmpty [] [] @NonEmpty @Empty [] [] @NonEmpty[].class); // illegal!\\n\" + \r", "+\t\t\"\t                                       ^^^^^^^^^\\n\" + \r", "+\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"5. ERROR in X.java (at line 3)\\n\" + \r", "+\t\t\"\tSystem.out.println(int @NonEmpty [] [] @NonEmpty @Empty [] [] @NonEmpty[].class); // illegal!\\n\" + \r", "+\t\t\"\t                                                 ^^^^^^\\n\" + \r", "+\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"6. ERROR in X.java (at line 3)\\n\" + \r", "-\t\t\"4. ERROR in X.java (at line 4)\\n\" + \r", "+\t\t\"7. ERROR in X.java (at line 3)\\n\" + \r", "+\t\t\"\tSystem.out.println(int @NonEmpty [] [] @NonEmpty @Empty [] [] @NonEmpty[].class); // illegal!\\n\" + \r", "+\t\t\"\t                                                              ^^^^^^^^^\\n\" + \r", "+\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"8. ERROR in X.java (at line 4)\\n\" + \r", "-\t\t\"5. ERROR in X.java (at line 4)\\n\" + \r", "+\t\t\"9. ERROR in X.java (at line 4)\\n\" + \r", "+\t\t\"\tSystem.out.println(X @NonEmpty [] [] @NonEmpty @Empty [] [] @NonEmpty[].class); // illegal!\\n\" + \r", "+\t\t\"\t                     ^^^^^^^^^\\n\" + \r", "+\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"10. ERROR in X.java (at line 4)\\n\" + \r", "-\t\t\"6. ERROR in X.java (at line 4)\\n\" + \r", "+\t\t\"11. ERROR in X.java (at line 4)\\n\" + \r", "+\t\t\"\tSystem.out.println(X @NonEmpty [] [] @NonEmpty @Empty [] [] @NonEmpty[].class); // illegal!\\n\" + \r", "+\t\t\"\t                                     ^^^^^^^^^\\n\" + \r", "+\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"12. ERROR in X.java (at line 4)\\n\" + \r", "+\t\t\"\tSystem.out.println(X @NonEmpty [] [] @NonEmpty @Empty [] [] @NonEmpty[].class); // illegal!\\n\" + \r", "+\t\t\"\t                                               ^^^^^^\\n\" + \r", "+\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"13. ERROR in X.java (at line 4)\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"14. ERROR in X.java (at line 4)\\n\" + \r", "+\t\t\"\tSystem.out.println(X @NonEmpty [] [] @NonEmpty @Empty [] [] @NonEmpty[].class); // illegal!\\n\" + \r", "+\t\t\"\t                                                            ^^^^^^^^^\\n\" + \r", "+\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c73aad8cc06e37296963aeff31fc091e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 251, "signatureBeforeChange": " \tpublic void test247()", "signatureAfterChange": " \tpublic void test247()", "diff": ["-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tMX<Class<? extends Object>> mx2 = new MX<Class>(); // wrong\\n\" + ", "+\t\t\t\"\t                                         ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tMX<? extends Class> mx5 = new MX<Class>(); // ok\\n\" + ", "+\t\t\t\"\t             ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tMX<? extends Class> mx5 = new MX<Class>(); // ok\\n\" + ", "+\t\t\t\"\t                                 ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tMX<? super Class> mx6 = new MX<Class>(); // ok\\n\" + ", "+\t\t\t\"\t           ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tMX<? super Class> mx6 = new MX<Class>(); // ok\\n\" + ", "+\t\t\t\"\t                               ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tMX<Class<? extends Class>> mx7 = new MX<Class<Class>>(); // wrong\\n\" + ", "+\t\t\t\"\t                   ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\t\"5. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"11. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tMX<Class<? extends Class>> mx7 = new MX<Class<Class>>(); // wrong\\n\" + ", "+\t\t\t\"\t                                              ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"12. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tMX<MX<? extends Class>> mx8 = new MX<MX<Class>>(); // wrong\\n\" + ", "+\t\t\t\"\t                ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"13. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"14. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tMX<MX<? extends Class>> mx8 = new MX<MX<Class>>(); // wrong\\n\" + ", "+\t\t\t\"\t                                        ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + "]}], "num": 5178}
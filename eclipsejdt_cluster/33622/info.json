{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "098e7c394570e12e17f96f10ee961d69", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b5873e355027856738ec93abe45f154", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java", "commitBeforeChange": "d85d39eaac6c50a092ebc71013caff6067946721", "commitAfterChange": "4113d4b15f909d9ae6a13dfdc1603db4b3835658", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void generateAnnotationInfo(JavaElement parent, HashMap newElements, IBinaryAnnotation annotationInfo)", "signatureAfterChange": " private void generateAnnotationInfo(JavaElement parent, HashMap newElements, IBinaryAnnotation annotationInfo, String memberValuePairName)", "diff": ["+}", "+private void generateAnnotationInfo(JavaElement parent, HashMap newElements, IBinaryAnnotation annotationInfo, String memberValuePairName) {", "-\tAnnotation annotation = new Annotation(parent, new String(typeName));", "+\tAnnotation annotation = new Annotation(parent, new String(typeName), memberValuePairName);", "+\twhile (newElements.containsKey(annotation)) {", "+\t\tannotation.occurrenceCount++;", "+\t}", "-\t\t\tgenerateAnnotationInfo(annotation, newElements, (IBinaryAnnotation) value);", "+\t\t\tgenerateAnnotationInfo(annotation, newElements, (IBinaryAnnotation) value, new String(pairs[i].getName()));", "+\t\t} else if (value instanceof Object[]) {", "+\t\t\t// if the value is an array, it can have no more than 1 dimension - no need to recurse", "+\t\t\tObject[] valueArray = (Object[]) value;", "+\t\t\tfor (int j = 0, valueArrayLength = valueArray.length; j < valueArrayLength; j++) {", "+\t\t\t\tObject nestedValue = valueArray[j];", "+\t\t\t\tif (nestedValue instanceof IBinaryAnnotation) {", "+\t\t\t\t\tgenerateAnnotationInfo(annotation, newElements, (IBinaryAnnotation) nestedValue, new String(pairs[i].getName()));", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5248067616d1c3d24ed1e0f63101ceb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MemberValuePairBinding.java", "commitBeforeChange": "65014b9edcd64bc51154fcb1b47074eec77a5977", "commitAfterChange": "7109b1b8695adc90efc89b381fbef11f66adc5d7", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic void toString(StringBuffer buffer)", "signatureAfterChange": "  \tstatic void appendValue(Object value, StringBuffer buffer)", "diff": ["+", "+\tstatic void appendValue(Object value, StringBuffer buffer) {", "+\t\tif (value instanceof Object[]) {", "+\t\t\tObject[] values = (Object[]) value;", "+\t\t\tbuffer.append('{');", "+\t\t\tfor (int i = 0, l = values.length; i < l; i++) {", "+\t\t\t\tif (i != 0)", "+\t\t\t\t\tbuffer.append(\", \"); //$NON-NLS-1$", "+\t\t\t\tappendValue(values[i], buffer);", "+\t\t\t}", "+\t\t\tbuffer.append('}');", "+\t\t} else if (value instanceof ITypeBinding) {", "+\t\t\tbuffer.append(((ITypeBinding) value).getName());", "+\t\t\tbuffer.append(\".class\"); //$NON-NLS-1$", "+\t\t} else {", "+\t\t\tbuffer.append(value);", "+\t\t}", "+\t}", "-", "-\tpublic void toString(StringBuffer buffer) {", "-\t\tDefaultValuePairBinding.appendValue(getValue(), buffer);"]}], "num": 33622}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4e3871827c8ee664a4d3d2e794517a58", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bec5674b4cec06c5319799cfbb92fd8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "f5bc1120f0fcf28d11610e258b1d706aac57c4e4", "commitAfterChange": "bd55e21e5b140501fd9b3488335aff5722719eed", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tpublic static IClasspathEntry newLibraryEntry( \t\t\tIPath path, \t\t\tIPath sourceAttachmentPath, \t\t\tIPath sourceAttachmentRootPath, \t\t\tIAccessRule[] accessRules, \t\t\tIClasspathAttribute[] extraAttributes, \t\t\tboolean isExported)", "signatureAfterChange": " \tpublic static IClasspathEntry newLibraryEntry( \t\t\tIPath path, \t\t\tIPath sourceAttachmentPath, \t\t\tIPath sourceAttachmentRootPath, \t\t\tIAccessRule[] accessRules, \t\t\tIClasspathAttribute[] extraAttributes, \t\t\tboolean isExported)", "diff": ["-\t\tif (!path.isAbsolute()) throw new ClasspathEntry.AssertionFailedException(\"Path for IClasspathEntry must be absolute: \" + path); //$NON-NLS-1$", "+\t\tboolean hasDotDot = ClasspathEntry.hasDotDot(path);", "+\t\tif (!hasDotDot && !path.isAbsolute()) throw new ClasspathEntry.AssertionFailedException(\"Path for IClasspathEntry must be absolute: \" + path); //$NON-NLS-1$", "-\t\t\tJavaProject.canonicalizedPath(path),", "+\t\t\thasDotDot ? path : JavaProject.canonicalizedPath(path),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa7f9bba78490ae2fcf5b99c5069fbe2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "be3b8398abdd134469cb25f74becb573498bac14", "commitAfterChange": "5c654dd7dd9bc98526f6c419699195d84517b84b", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " protected int resolveLevelForType(char[] simpleNamePattern, char[] qualificationPattern, TypeBinding binding)", "signatureAfterChange": " protected int resolveLevelForType(char[] simpleNamePattern, char[] qualificationPattern, TypeBinding binding)", "diff": ["-\t\t\treturn IMPOSSIBLE_MATCH;", "+\t\t\tboolean matchPattern = CharOperation.prefixEquals(qualifiedPattern, sourceName, this.isCaseSensitive);", "+\t\t\treturn matchPattern ? ACCURATE_MATCH : IMPOSSIBLE_MATCH;"]}], "num": 25549}
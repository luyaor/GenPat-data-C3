{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e75f13a7fff2c951895d2592d14ba873", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b7effbec5526b0c0f51216a0fc599dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayInitializer.java", "commitBeforeChange": "0371188bae8847b23acded54b847b2e6acb55e2f", "commitAfterChange": "70388ba5a3272ffd8da7da345ffb96bb25e84f31", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType)", "diff": ["-\t\t\t\t} else if (scope.isBoxingCompatibleWith(expressionType, elementType)", "-\t\t\t\t\t\t\t\t\t|| (expressionType.isBaseType()  // narrowing then boxing ?", "-\t\t\t\t\t\t\t\t\t\t\t&& scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5 // autoboxing", "-\t\t\t\t\t\t\t\t\t\t\t&& !elementType.isBaseType()", "-\t\t\t\t\t\t\t\t\t\t\t&& expression.isConstantValueOfTypeAssignableToType(expressionType, scope.environment().computeBoxingType(elementType)))) {", "+\t\t\t\t} else if (isBoxingCompatible(expressionType, elementType, expression, scope)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4443a0b85429fad6de117c23a8c582e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "c2d49e45d6b46322a9c25ee69257f9e70ab7b1fe", "commitAfterChange": "b94cfd6319609252fee755f36ab03ad2aedb4df4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void resolve(BlockScope scope)", "signatureAfterChange": "  public void resolve(BlockScope scope)", "diff": ["-\t} else if (scope.isBoxingCompatibleWith(expressionType, methodType)) {", "+\t} else if (scope.isBoxingCompatibleWith(expressionType, methodType)", "+\t\t\t\t\t\t|| (expressionType.isBaseType()  // narrowing then boxing ?", "+\t\t\t\t\t\t\t\t&& scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5 // autoboxing", "+\t\t\t\t\t\t\t\t&& !methodType.isBaseType()", "+\t\t\t\t\t\t\t\t&& this.expression.isConstantValueOfTypeAssignableToType(expressionType, scope.environment().computeBoxingType(methodType)))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5650d7efff1917c71b3e6104ab9acb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void resolve(MethodScope methScope)", "signatureAfterChange": " \tpublic void resolve(MethodScope methScope)", "diff": ["-\t\t\t\t\t\t\t\tif (superConstructor.areParametersEqual(methDecl.binding)) {", "+\t\t\t\t\t\t\t\tMethodBinding current = methDecl.binding;", "+\t\t\t\t\t\t\t\t// work 'against' better inference in 1.8 (otherwise comparing (G<T> with G<Object>) would fail):", "+\t\t\t\t\t\t\t\tif (methScope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8", "+\t\t\t\t\t\t\t\t\t&& current.typeVariables != Binding.NO_TYPE_VARIABLES) ", "+\t\t\t\t\t\t\t\t{", "+\t\t\t\t\t\t\t\t\tcurrent = current.asRawMethod(methScope.environment());", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (superConstructor.areParametersEqual(current)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db6009fc25936ad5909f49c4c9fcfd75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "0371188bae8847b23acded54b847b2e6acb55e2f", "commitAfterChange": "70388ba5a3272ffd8da7da345ffb96bb25e84f31", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public void resolve(BlockScope scope)", "signatureAfterChange": "  public void resolve(BlockScope scope)", "diff": ["-\t} else if (scope.isBoxingCompatibleWith(expressionType, methodType)", "-\t\t\t\t\t\t|| (expressionType.isBaseType()  // narrowing then boxing ?", "-\t\t\t\t\t\t\t\t&& scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5 // autoboxing", "-\t\t\t\t\t\t\t\t&& !methodType.isBaseType()", "-\t\t\t\t\t\t\t\t&& !methodType.isTypeVariable()", "-\t\t\t\t\t\t\t\t&& this.expression.isConstantValueOfTypeAssignableToType(expressionType, scope.environment().computeBoxingType(methodType)))) {", "+\t} else if (isBoxingCompatible(expressionType, methodType, this.expression, scope)) {"]}], "num": 11377}
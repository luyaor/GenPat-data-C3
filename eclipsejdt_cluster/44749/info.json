{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d704c0597604b05bc41e25a7e8d8da8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0470b97f9aa92be78d504cc744afe3c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SuperTypeTest.java", "commitBeforeChange": "0f169ffd6bca6fffad72427f729936c499395ec5", "commitAfterChange": "53a1646d9e191b8b912f757450cb4b809c88a6c3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void test013()", "signatureAfterChange": " public void test013()", "diff": ["-\t\t\"\t                       ^^^^\\n\" + ", "-\t\t\"Redundant superinterface List<E> for the type X<E>, already defined by Collection<E>\\n\" + ", "+\t\t\"\t                                ^^^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Collection<E> for the type X<E>, already defined by List<E>\\n\" + ", "-\t\t\"\t                                ^^^^^^^^^^\\n\" + ", "-\t\t\"Redundant superinterface Collection<E> for the type X<E>, already defined by Iterable<E>\\n\" + ", "+\t\t\"\t                                               ^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Iterable<E> for the type X<E>, already defined by Collection<E>\\n\" + ", "-\t\t\"\t                                      ^^^^\\n\" + ", "-\t\t\"Redundant superinterface List<E> for the type Y<E>, already defined by Collection<E>\\n\" + ", "+\t\t\"\t                       ^^^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Collection<E> for the type Y<E>, already defined by List<E>\\n\" + ", "-\t\t\"\t                                      ^^^^\\n\" + ", "-\t\t\"Redundant superinterface List<E> for the type XXX<E>, already defined by Iterable<E>\\n\" + ", "+\t\t\"\t                         ^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Iterable<E> for the type XXX<E>, already defined by List<E>\\n\" + ", "-\t\t\"\t                                               ^^^^^^^^^^\\n\" + ", "-\t\t\"Redundant superinterface Collection<E> for the type XXX<E>, already defined by Iterable<E>\\n\" + ", "+\t\t\"\t                         ^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Iterable<E> for the type XXX<E>, already defined by Collection<E>\\n\" + ", "-\t\t\"\t                            ^^^^\\n\" + ", "-\t\t\"Redundant superinterface List<Object> for the type Z, already defined by Collection<Object>\\n\" + ", "+\t\t\"\t                                          ^^^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Collection<Object> for the type Z, already defined by List<Object>\\n\" + ", "-\t\t\"\t                                                 ^^^^\\n\" + ", "-\t\t\"Redundant superinterface List<Object> for the type ZZ, already defined by Collection<Object>\\n\" + ", "+\t\t\"\t                             ^^^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Collection<Object> for the type ZZ, already defined by List<Object>\\n\" + ", "+\t\t\"----------\\n\",", "+\t\tJavacTestOptions.SKIP);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10b4770635642941b6189606033f6ccf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void test019()", "signatureAfterChange": " public void test019()", "diff": ["-\t\t\"     4  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"     4  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"     9  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [29]\\n\" + ", "+\t\t\"     9  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "-\t\t\"    13  astore [local_4]\\n\" + ", "+\t\t\"    13  astore 4\\n\" + ", "-\t\t\"    16  istore_2 [local_2]\\n\" + ", "-\t\t\"    17  aload [local_4]\\n\" + ", "+\t\t\"    16  istore_2\\n\" + ", "+\t\t\"    17  aload 4\\n\" + ", "-\t\t\"    20  istore_3 [local_3]\\n\" + ", "+\t\t\"    20  istore_3\\n\" + ", "-\t\t\"    24  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    24  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    29  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [29]\\n\" + ", "+\t\t\"    29  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "-\t\t\"    35  iload_2 [local_2]\\n\" + ", "-\t\t\"    36  iload_3 [local_3]\\n\" + ", "+\t\t\"    35  iload_2\\n\" + ", "+\t\t\"    36  iload_3\\n\" + ", "-\t\t\"    40  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    40  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    45  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [36]\\n\" + ", "+\t\t\"    45  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [36]\\n\" + ", "-\t\t\"        [pc: 0, pc: 49] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 4, pc: 49] local: tab index: 1 type: [I\\n\";", "+\t\t\"        [pc: 0, pc: 49] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 4, pc: 49] local: tab index: 1 type: int[]\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12351a5815db4f166023ee0acccdb8a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "  public void test051() throws JavaModelException", "signatureAfterChange": "  public void test051() throws JavaModelException", "diff": ["-\t\t\"clone[JAVADOC_METHOD_REF]{{@link #clone() }, Ljava.lang.Object;, ()Ljava.lang.Object;, clone, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"equals[JAVADOC_METHOD_REF]{{@link #equals(Object) }, Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"finalize[JAVADOC_METHOD_REF]{{@link #finalize() }, Ljava.lang.Object;, ()V, finalize, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"getClass[JAVADOC_METHOD_REF]{{@link #getClass() }, Ljava.lang.Object;, ()Ljava.lang.Class;, getClass, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"hashCode[JAVADOC_METHOD_REF]{{@link #hashCode() }, Ljava.lang.Object;, ()I, hashCode, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"method[JAVADOC_METHOD_REF]{{@link #method() }, Ljavadoc.text.BasicTestTextIns;, ()V, method, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"notify[JAVADOC_METHOD_REF]{{@link #notify() }, Ljava.lang.Object;, ()V, notify, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"notifyAll[JAVADOC_METHOD_REF]{{@link #notifyAll() }, Ljava.lang.Object;, ()V, notifyAll, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"paramMethod[JAVADOC_METHOD_REF]{{@link #paramMethod(String, boolean, Object) }, Ljavadoc.text.BasicTestTextIns;, (Ljava.lang.String;ZLjava.lang.Object;)V, paramMethod, (str, flag, obj), \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"toString[JAVADOC_METHOD_REF]{{@link #toString() }, Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long, int) }, Ljava.lang.Object;, (JI)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long) }, Ljava.lang.Object;, (J)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait() }, Ljava.lang.Object;, ()V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns() }, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+(JAVADOC_RELEVANCE+R_INLINE_TAG)+\"}\"", "+\t\t\"clone[JAVADOC_METHOD_REF]{{@link #clone()}, Ljava.lang.Object;, ()Ljava.lang.Object;, clone, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"equals[JAVADOC_METHOD_REF]{{@link #equals(Object)}, Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"finalize[JAVADOC_METHOD_REF]{{@link #finalize()}, Ljava.lang.Object;, ()V, finalize, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"getClass[JAVADOC_METHOD_REF]{{@link #getClass()}, Ljava.lang.Object;, ()Ljava.lang.Class;, getClass, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"hashCode[JAVADOC_METHOD_REF]{{@link #hashCode()}, Ljava.lang.Object;, ()I, hashCode, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"method[JAVADOC_METHOD_REF]{{@link #method()}, Ljavadoc.text.BasicTestTextIns;, ()V, method, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"notify[JAVADOC_METHOD_REF]{{@link #notify()}, Ljava.lang.Object;, ()V, notify, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"notifyAll[JAVADOC_METHOD_REF]{{@link #notifyAll()}, Ljava.lang.Object;, ()V, notifyAll, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"paramMethod[JAVADOC_METHOD_REF]{{@link #paramMethod(String, boolean, Object)}, Ljavadoc.text.BasicTestTextIns;, (Ljava.lang.String;ZLjava.lang.Object;)V, paramMethod, (str, flag, obj), \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"toString[JAVADOC_METHOD_REF]{{@link #toString()}, Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long, int)}, Ljava.lang.Object;, (JI)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long)}, Ljava.lang.Object;, (J)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait()}, Ljava.lang.Object;, ()V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns()}, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+(JAVADOC_RELEVANCE+R_INLINE_TAG)+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22d113ffbd1e385566448d17dee300e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": " public void testTypeRefGenericsTest12_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericsTest12_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/test12/Test.java test12.Test [public class Test extends S<\ufffd|Exception|\ufffd> {@44] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.foo(Test) [\t\tthis.<\ufffd|Exception|\ufffd>foo(null);@88] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.foo(Test) [\t\tsuper.<\ufffd|Exception|\ufffd>foo(null);@118] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.foo(Test) [\t\ttest.<\ufffd|RuntimeException|\ufffd>foo(null);@160] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tthis.<\ufffd|Object|\ufffd, RuntimeException, Test>bar(null);@222] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tthis.<Object, \ufffd|RuntimeException|\ufffd, Test>bar(null);@230] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tthis.<Object, RuntimeException, \ufffd|Test|\ufffd>bar(null);@248] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tsuper.<\ufffd|Object|\ufffd, RuntimeException, Test>bar(null);@273] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tsuper.<Object, \ufffd|RuntimeException|\ufffd, Test>bar(null);@281] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tsuper.<Object, RuntimeException, \ufffd|Test|\ufffd>bar(null);@299] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\ttest.<\ufffd|Object|\ufffd, RuntimeException, Test>bar(null);@336] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\ttest.<Object, \ufffd|RuntimeException|\ufffd, Test>bar(null);@344] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\ttest.<Object, RuntimeException, \ufffd|Test|\ufffd>bar(null);@362] EXACT_MATCH\\n\" +", "-\t\t\"src/test12/Test.java void test12.S.bar(S) [\t<T, U extends Exception, V extends S<\ufffd|R|\ufffd>>void bar(S s) {}@464] EXACT_MATCH\"", "+\t\t\"src/test12/Test.java test12.Test [public class Test extends S<!|Exception|!> {@44] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.foo(Test) [\t\tthis.<!|Exception|!>foo(null);@88] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.foo(Test) [\t\tsuper.<!|Exception|!>foo(null);@118] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.foo(Test) [\t\ttest.<!|RuntimeException|!>foo(null);@160] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tthis.<!|Object|!, RuntimeException, Test>bar(null);@222] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tthis.<Object, !|RuntimeException|!, Test>bar(null);@230] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tthis.<Object, RuntimeException, !|Test|!>bar(null);@248] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tsuper.<!|Object|!, RuntimeException, Test>bar(null);@273] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tsuper.<Object, !|RuntimeException|!, Test>bar(null);@281] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\tsuper.<Object, RuntimeException, !|Test|!>bar(null);@299] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\ttest.<!|Object|!, RuntimeException, Test>bar(null);@336] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\ttest.<Object, !|RuntimeException|!, Test>bar(null);@344] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.Test.bar(Test) [\t\ttest.<Object, RuntimeException, !|Test|!>bar(null);@362] EXACT_MATCH\\n\" +", "+\t\t\"src/test12/Test.java void test12.S.bar(S) [\t<T, U extends Exception, V extends S<!|R|!>>void bar(S s) {}@464] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3963f790d08d9b394df461c75e10ed24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic void testStringAnyStrings04() throws CoreException", "signatureAfterChange": " \tpublic void testStringAnyStrings04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [MemberGeneric] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [MemberGeneric] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Member] EXACT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Member] EXACT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c0abf1a88cee9e21e8cd45da161c46e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "  public void test052() throws JavaModelException", "signatureAfterChange": "  public void test052() throws JavaModelException", "diff": ["-\t\t\"clone[JAVADOC_METHOD_REF]{{@link #clone() }, Ljava.lang.Object;, ()Ljava.lang.Object;, clone, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"equals[JAVADOC_METHOD_REF]{{@link #equals(Object) }, Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"finalize[JAVADOC_METHOD_REF]{{@link #finalize() }, Ljava.lang.Object;, ()V, finalize, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"getClass[JAVADOC_METHOD_REF]{{@link #getClass() }, Ljava.lang.Object;, ()Ljava.lang.Class;, getClass, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"hashCode[JAVADOC_METHOD_REF]{{@link #hashCode() }, Ljava.lang.Object;, ()I, hashCode, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"method[JAVADOC_METHOD_REF]{{@link #method() }, Ljavadoc.text.BasicTestTextIns;, ()V, method, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"notify[JAVADOC_METHOD_REF]{{@link #notify() }, Ljava.lang.Object;, ()V, notify, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"notifyAll[JAVADOC_METHOD_REF]{{@link #notifyAll() }, Ljava.lang.Object;, ()V, notifyAll, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"paramMethod[JAVADOC_METHOD_REF]{{@link #paramMethod(String, boolean, Object) }, Ljavadoc.text.BasicTestTextIns;, (Ljava.lang.String;ZLjava.lang.Object;)V, paramMethod, (str, flag, obj), \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"toString[JAVADOC_METHOD_REF]{{@link #toString() }, Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long, int) }, Ljava.lang.Object;, (JI)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long) }, Ljava.lang.Object;, (J)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait() }, Ljava.lang.Object;, ()V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "-\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns() }, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+(JAVADOC_RELEVANCE+R_INLINE_TAG)+\"}\"", "+\t\t\"clone[JAVADOC_METHOD_REF]{{@link #clone()}, Ljava.lang.Object;, ()Ljava.lang.Object;, clone, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"equals[JAVADOC_METHOD_REF]{{@link #equals(Object)}, Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"finalize[JAVADOC_METHOD_REF]{{@link #finalize()}, Ljava.lang.Object;, ()V, finalize, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"getClass[JAVADOC_METHOD_REF]{{@link #getClass()}, Ljava.lang.Object;, ()Ljava.lang.Class;, getClass, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"hashCode[JAVADOC_METHOD_REF]{{@link #hashCode()}, Ljava.lang.Object;, ()I, hashCode, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"method[JAVADOC_METHOD_REF]{{@link #method()}, Ljavadoc.text.BasicTestTextIns;, ()V, method, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"notify[JAVADOC_METHOD_REF]{{@link #notify()}, Ljava.lang.Object;, ()V, notify, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"notifyAll[JAVADOC_METHOD_REF]{{@link #notifyAll()}, Ljava.lang.Object;, ()V, notifyAll, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"paramMethod[JAVADOC_METHOD_REF]{{@link #paramMethod(String, boolean, Object)}, Ljavadoc.text.BasicTestTextIns;, (Ljava.lang.String;ZLjava.lang.Object;)V, paramMethod, (str, flag, obj), \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"toString[JAVADOC_METHOD_REF]{{@link #toString()}, Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long, int)}, Ljava.lang.Object;, (JI)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait(long)}, Ljava.lang.Object;, (J)V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"wait[JAVADOC_METHOD_REF]{{@link #wait()}, Ljava.lang.Object;, ()V, wait, null, \"+this.positions+R_DICNRNSIT+\"}\\n\" + ", "+\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns()}, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+(JAVADOC_RELEVANCE+R_INLINE_TAG)+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "feb36f21e71fa69a56060fc7824b29af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 507, "methodNumberAfterChange": 507, "signatureBeforeChange": " \tpublic void test505()", "signatureAfterChange": " \tpublic void test505()", "diff": ["-\t\t\t\"    1  invokespecial java/lang/Object.<init>()V [13]\\n\" + ", "+\t\t\t\"    1  invokespecial java.lang.Object() [13]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: LX;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: LX<TE;>;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: X<E>\\n\" + ", "-\t\t\t\"     4  invokespecial X.<init>()V [22]\\n\" + ", "-\t\t\t\"     7  invokevirtual X.foo()V [25]\\n\" + ", "+\t\t\t\"     4  invokespecial X() [22]\\n\" + ", "+\t\t\t\"     7  invokevirtual X.foo() : void  [25]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 11] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 11] local: args index: 0 type: java.lang.String[]\\n\" + ", "-\t\t\t\"     5  invokespecial X$1.<init>(LX;)V [32]\\n\" + ", "-\t\t\t\"     8  invokevirtual X$1.run()V [35]\\n\" + ", "-\t\t\t\"    11  getstatic java/lang/System.out Ljava/io/PrintStream; [41]\\n\" + ", "+\t\t\t\"     5  invokespecial X$1(X) [32]\\n\" + ", "+\t\t\t\"     8  invokevirtual X$1.run() : void  [35]\\n\" + ", "+\t\t\t\"    11  getstatic java.lang.System.out : java.io.PrintStream [41]\\n\" + ", "-\t\t\t\"    15  getfield X.e LXA; [43]\\n\" + ", "+\t\t\t\"    15  getfield X.e : XA [43]\\n\" + ", "-\t\t\t\"    19  getstatic XB.CONST LXB; [49]\\n\" + ", "-\t\t\t\"    22  invokevirtual java/io/PrintStream.print(Ljava/lang/Object;)V [55]\\n\" + ", "+\t\t\t\"    19  getstatic XB.CONST : XB [49]\\n\" + ", "+\t\t\t\"    22  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [55]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 26] local: this index: 0 type: LX;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 26] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 26] local: this index: 0 type: LX<TE;>;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 26] local: this index: 0 type: X<E>\\n\" + "]}], "num": 44749}
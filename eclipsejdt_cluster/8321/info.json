{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17d319c4daf62a706d36aa4b2ccaa537", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "308c244a6926046797e8826ade8de770", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "c65657c3db5994a0f7c7d598e6c69a8e236f8125", "commitAfterChange": "4d22b6cee44bdb8aa24a4ca5266770881b141e50", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tIClassFile classFile, \t\tboolean resolveBindings)", "signatureAfterChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tIClassFile classFile, \t\tboolean resolveBindings)", "diff": ["-\t\t\tString source = null;", "+\t\t\tchar[] source = null;", "+\t\t\tString sourceString = null;", "-\t\t\t\tsource = classFile.getSource();", "+\t\t\t\tsourceString = classFile.getSource();", "-\t\t\tif (source == null) {", "+\t\t\tif (sourceString == null) {", "-\t\t\t\treturn AST.parseCompilationUnit(source.toCharArray());", "+\t\t\t\treturn AST.parseCompilationUnit(source);", "-\t\t\treturn AST.parseCompilationUnit(", "-\t\t\t\tsource.toCharArray(),", "-\t\t\t\tclassFile.getElementName(),", "-\t\t\t\tclassFile.getJavaProject());", "+\t\t\t", "+\t\t\tsource = sourceString.toCharArray();", "+\t\t\tStringBuffer buffer = new StringBuffer(\".java\"); //$NON-NLS-1$", "+\t\t\t", "+\t\t\tString classFileName = classFile.getElementName(); // this includes the trailing .class", "+\t\t\tbuffer.insert(0, classFileName.toCharArray(), 0, classFileName.indexOf('.'));", "+\t\t\tIJavaProject project = classFile.getJavaProject();", "+\t\t\ttry {", "+\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration =", "+\t\t\t\t\tCompilationUnitResolver.resolve(", "+\t\t\t\t\t\tsource,", "+\t\t\t\t\t\tCharOperation.splitOn('.', classFile.getType().getPackageFragment().getElementName().toCharArray()),", "+\t\t\t\t\t\tbuffer.toString(),", "+\t\t\t\t\t\tproject,", "+\t\t\t\t\t\tnew AbstractSyntaxTreeVisitorAdapter());", "+\t\t\t\tASTConverter converter = new ASTConverter(project.getOptions(true), true);", "+\t\t\t\tAST ast = new AST();", "+\t\t\t\tBindingResolver resolver = new DefaultBindingResolver(compilationUnitDeclaration.scope);", "+\t\t\t\tast.setBindingResolver(resolver);", "+\t\t\t\tconverter.setAST(ast);", "+\t\t\t", "+\t\t\t\tCompilationUnit cu = converter.convert(compilationUnitDeclaration, source);", "+\t\t\t\tcu.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);", "+\t\t\t\tresolver.storeModificationCount(ast.modificationCount());", "+\t\t\t\treturn cu;", "+\t\t\t} catch(JavaModelException e) {", "+\t\t\t\t/* if a JavaModelException is thrown trying to retrieve the name environment", "+\t\t\t\t * then we simply do a parsing without creating bindings.", "+\t\t\t\t * Therefore all binding resolution will return null.", "+\t\t\t\t */", "+\t\t\t\treturn parseCompilationUnit(source);\t\t\t", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "895520750248bd3f527a2c25ae24e31b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "69b02d68015b1f30ee38d1576a843274517957c7", "commitAfterChange": "c7a9edf536467451ba659d7e03ac6c483c5c0cfe", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate void complete(AstNode astNode, AstNode astNodeParent, Binding qualifiedBinding, Scope scope)", "signatureAfterChange": "  \tprivate void complete(AstNode astNode, AstNode astNodeParent, Binding qualifiedBinding, Scope scope)", "diff": ["-", "-\t\t// defaults... some nodes will change these", "+\t\t", "-\t\t\t//\t\tfindKeywords(token, modifiers, scope); // could be the start of a field, method or member type", "+\t\t\t", "+\t\t\tfindKeywordsForMember(token, field.modifiers);", "-\t\t\t\t", "+\t\t\t\tfindKeywordsForMember(token, method.modifiers);", "+\t\t\t", "-\t", "-\t\t\t\t\ttoken = ((CompletionOnSingleNameReference) astNode).token;", "+\t\t\t\t\tCompletionOnSingleNameReference singleNameReference = (CompletionOnSingleNameReference) astNode;", "+\t\t\t\t\ttoken = singleNameReference.token;", "-\t", "+\t\t\t\t\tfindKeywords(token, singleNameReference.possibleKeywords);", "+\t\t\t\t\tif(singleNameReference.canBeExplicitConstructor){", "+\t\t\t\t\t\tif(CharOperation.prefixEquals(token, Keywords.THIS, false)) {", "+\t\t\t\t\t\t\tReferenceBinding ref = scope.enclosingSourceType();", "+\t\t\t\t\t\t\tfindExplicitConstructors(Keywords.THIS, ref, (MethodScope)scope, singleNameReference);", "+\t\t\t\t\t\t} else if(CharOperation.prefixEquals(token, Keywords.SUPER, false)) {", "+\t\t\t\t\t\t\tReferenceBinding ref = scope.enclosingSourceType();", "+\t\t\t\t\t\t\tfindExplicitConstructors(Keywords.SUPER, ref.superclass(), (MethodScope)scope, singleNameReference);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\tMethodScope methodScope = null;", "+\t\t\t\t\t\t\t\t\tif((scope instanceof MethodScope && !((MethodScope)scope).isStatic)", "+\t\t\t\t\t\t\t\t\t\t|| ((methodScope = scope.enclosingMethodScope()) != null && !methodScope.isStatic)) {", "+\t\t\t\t\t\t\t\t\t\tfindKeywords(token, new char[][]{Keywords.THIS});", "+\t\t\t\t\t\t\t\t\t}", "-\t", "+\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\tfindKeywords(token, new char[][]{Keywords.NEW});", "+\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(astNode instanceof CompletionOnKeyword) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnKeyword keyword = (CompletionOnKeyword)astNode;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindKeywords(keyword.getToken(), keyword.getPossibleKeywords());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93ed44cd5dacbf0c3c0d02e8de98a641", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "ca1c70fe619bd146613895fa764af2d040529e30", "commitAfterChange": "0ae44cb94fd5970ee99a6625f01c4e21cfef9943", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r private boolean updateCurrentDeltaAndIndex(IResourceDelta delta, int elementType, IJavaProject project) throws JavaModelException", "signatureAfterChange": "\r private boolean updateCurrentDeltaAndIndex(IResourceDelta delta, int elementType, IJavaProject project) throws JavaModelException", "diff": ["-\t\t\t} else if (elementType == IJavaElement.JAVA_PROJECT\r", "-\t\t\t\t\t&& (flags & IResourceDelta.OPEN) != 0) {\r", "-\t\t\t\t// project has been opened or closed\r", "-\t\t\t\tIProject res = (IProject)delta.getResource();\r", "-\t\t\t\telement = this.createElement(res, elementType, project);\r", "-\t\t\t\tif (element == null) throw newInvalidElementType();\r", "-\t\t\t\tif (res.isOpen()) {\r", "-\t\t\t\t\tthis.elementOpened(element, delta);\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tthis.elementClosed(element, delta);\r", "+\t\t\t} else if (elementType == IJavaElement.JAVA_PROJECT) {\r", "+\t\t\t\tif ((flags & IResourceDelta.OPEN) != 0) {\r", "+\t\t\t\t\t// project has been opened or closed\r", "+\t\t\t\t\tIProject res = (IProject)delta.getResource();\r", "+\t\t\t\t\telement = this.createElement(res, elementType, project);\r", "+\t\t\t\t\tif (element == null) throw newInvalidElementType();\r", "+\t\t\t\t\tif (res.isOpen()) {\r", "+\t\t\t\t\t\tif (this.hasJavaNature(res)) {\r", "+\t\t\t\t\t\t\tthis.elementAdded(element, delta);\r", "+\t\t\t\t\t\t\tthis.indexManager.indexAll(res);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tJavaModel javaModel = JavaModelManager.getJavaModelManager().getJavaModel();\r", "+\t\t\t\t\t\tboolean wasJavaProject = javaModel.findJavaProject(res) != null;\r", "+\t\t\t\t\t\tif (wasJavaProject) {\r", "+\t\t\t\t\t\t\tthis.elementRemoved(element, delta);\r", "+\t\t\t\t\t\t\tthis.indexManager.removeIndex(res.getFullPath());\r", "+\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\treturn false; // when a project is open/closed don't process children\r", "-\t\t\t\tthis.updateIndex(element, delta);\r", "-\t\t\t\treturn false; // when a project is open/closed don't process children\r", "+\t\t\t\tif ((flags & IResourceDelta.DESCRIPTION) != 0) {\r", "+\t\t\t\t\tIProject res = (IProject)delta.getResource();\r", "+\t\t\t\t\tJavaModel javaModel = JavaModelManager.getJavaModelManager().getJavaModel();\r", "+\t\t\t\t\tboolean wasJavaProject = javaModel.findJavaProject(res) != null;\r", "+\t\t\t\t\tboolean isJavaProject = this.hasJavaNature(res);\r", "+\t\t\t\t\tif (wasJavaProject != isJavaProject) {\r", "+\t\t\t\t\t\t// project's nature has been added or removed\r", "+\t\t\t\t\t\telement = this.createElement(res, elementType, project);\r", "+\t\t\t\t\t\tif (element == null) throw newInvalidElementType();\r", "+\t\t\t\t\t\tif (isJavaProject) {\r", "+\t\t\t\t\t\t\tthis.elementAdded(element, delta);\r", "+\t\t\t\t\t\t\tthis.indexManager.indexAll(res);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tthis.elementRemoved(element, delta);\r", "+\t\t\t\t\t\t\tthis.indexManager.removeIndex(res.getFullPath());\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\treturn false; // when a project's nature is added/removed don't process children\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r"]}], "num": 8321}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee66ae6ce5fe72af28a4ef2cef0d4b22", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d77daddfab028f649296bb960bc0aab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ae391996f2ba5153face2dc96f44fbe25cc6cfcf", "commitAfterChange": "bd2d6cba91ea60af9a4818216d0ebbc8f0ef4bb2", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\t\t\t\t\t\tTypeBinding superType = original.declaringClass.findSuperTypeOriginatingFrom(original2.declaringClass.erasure());", "-\t\t\t\t\t\tif (superType == null)", "+", "+\t\t\t\t\t\toriginal2 = original.findOriginalInheritedMethod(original2);", "+\t\t\t\t\t\tif (original2 == null)", "-\t\t\t\t\t\t\tif (original2.declaringClass != superType) {", "-\t\t\t\t\t\t\t\t// must find inherited method with the same substituted variables", "-\t\t\t\t\t\t\t\tMethodBinding[] superMethods = ((ReferenceBinding) superType).getMethods(original2.selector, argumentTypes.length);", "-\t\t\t\t\t\t\t\tfor (int m = 0, l = superMethods.length; m < l; m++) {", "-\t\t\t\t\t\t\t\t\tif (superMethods[m].original() == original2) {", "-\t\t\t\t\t\t\t\t\t\toriginal2 = superMethods[m];", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b08384a6171f5a6466795166da8d17e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnMessageSend.java", "commitBeforeChange": "e2648f8b5ccbba51146261db3c629f21ae240071", "commitAfterChange": "080819febe201917c6d39d485bf6b0507c29f0c4", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tprivate MethodBinding findNonDefaultAbstractMethod(MethodBinding binding)", "signatureAfterChange": " \tprivate MethodBinding findNonDefaultAbstractMethod(MethodBinding methodBinding)", "diff": ["-\tprivate MethodBinding findNonDefaultAbstractMethod(MethodBinding binding) {", "+\tprivate MethodBinding findNonDefaultAbstractMethod(MethodBinding methodBinding) {", "-\t\tReferenceBinding[] itsInterfaces = binding.declaringClass.superInterfaces();", "+\t\tReferenceBinding[] itsInterfaces = methodBinding.declaringClass.superInterfaces();", "-\t\t\t\t\t\tMethodBinding[] methods = currentType.getMethods(binding.selector);;", "+\t\t\t\t\t\tMethodBinding[] methods = currentType.getMethods(methodBinding.selector);;", "-\t\t\t\t\t\t\t\tif(binding.areParametersEqual(methods[k])) {", "+\t\t\t\t\t\t\t\tif(methodBinding.areParametersEqual(methods[k])) {", "-\t\treturn binding;", "+\t\treturn methodBinding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6ccad8d973cbdaa7374c49d8737f353", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "7b084156620c5c922d11b27bd8e1266a04bb9736", "commitAfterChange": "b85e68b4448fd6d8525b5e65084449dd71c2c8ad", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["-\t\t\t\t\t\t\t\tMethodBinding[] castTypeMethods = getAllInheritedMethods((ReferenceBinding) castType);", "-\t\t\t\t\t\t\t\tMethodBinding[] expressionTypeMethods = getAllInheritedMethods((ReferenceBinding) expressionType);", "+\t\t\t\t\t\t\t\t// look at original methods rather than the parameterized variants at 1.4 to detect", "+\t\t\t\t\t\t\t\t// covariance. Otherwise when confronted with one raw type and one parameterized type,", "+\t\t\t\t\t\t\t\t// we could mistakenly detect covariance and scream foul. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=332744", "+\t\t\t\t\t\t\t\tMethodBinding[] castTypeMethods = getAllOriginalInheritedMethods((ReferenceBinding) castType);", "+\t\t\t\t\t\t\t\tMethodBinding[] expressionTypeMethods = getAllOriginalInheritedMethods((ReferenceBinding) expressionType);"]}], "num": 10923}
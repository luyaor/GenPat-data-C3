{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7cccc07d1042c839c060782b37373d1a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45e1d22dcf9baee421e030bfd6e5cfd8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "c62ecfd031507c11ea236866605fedd6f3a952c5", "commitAfterChange": "ded73445e8c5cf2db0a4abcc53e1680f02ae6cf7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  private static void setLogDir(File inputDir, int profiles, boolean verify) throws CoreException", "signatureAfterChange": "  private static void setLogDir(File inputDir, int profiles, boolean verify) throws CoreException", "diff": ["-\tFile logDir = new File(System.getProperty(\"logDir\"));", "-\tif (!logDir.exists()) {", "-\t\tif (!logDir.mkdirs()) {", "-\t\t\tSystem.err.println(\"Cannot create specified log directory: \"+logDir+\"!!!\");", "+\tFile rootLogDir = new File(System.getProperty(\"logDir\"));", "+\tif (!rootLogDir.exists()) {", "+\t\tif (!rootLogDir.mkdirs()) {", "+\t\t\tSystem.err.println(\"Cannot create specified log directory: \"+rootLogDir+\"!!!\");", "-\tlogDir = new File(logDir, ECLIPSE_VERSION);", "+\trootLogDir = new File(rootLogDir, ECLIPSE_VERSION);", "+\tString subRootDir;", "-\t\tlogDir = new File(logDir, \"tests\");", "-\t\tlogDir = new File(logDir, PATCH_BUG);", "-\t\tlogDir = new File(logDir, PATCH_VERSION);", "+\t\trootLogDir = new File(rootLogDir, \"tests\");", "+\t\trootLogDir = new File(rootLogDir, PATCH_BUG);", "+\t\tsubRootDir = PATCH_VERSION;", "-\t\tlogDir = new File(logDir, \"HEAD\");", "+\t\tsubRootDir = \"HEAD\";", "-\t\tlogDir = new File(logDir, ECLIPSE_MILESTONE);", "-\t\tlogDir = new File(logDir, JDT_CORE_VERSION);", "+\t\trootLogDir = new File(rootLogDir, ECLIPSE_MILESTONE);", "+\t\tsubRootDir = JDT_CORE_VERSION;", "+\tList subDirs = new ArrayList();", "-\t\tlogDir = new File(logDir, \"profiles\");", "-\t\tlogDir = setProfilesDir(profiles, logDir);", "+\t\tsubDirs.add(\"profiles\");", "+\t\tsetProfilesDir(profiles, subDirs);", "-\t\tlogDir = new File(new File(logDir, \"filter\"), FILES_FILTER.replace('?', '_').replace('*', '%'));", "+\t\tsubDirs.add(\"filter\");", "+\t\tsubDirs.add(FILES_FILTER.replace('?', '_').replace('*', '%'));", "-\tlogDir.mkdirs();", "+\tFile logDir = createDir(new File (rootLogDir, subRootDir), subDirs);", "-\t\tFile saveDir = new File(logDir, \"save\");", "-\t\tsaveDir.mkdir();", "+\t\tFile saveDir = new File(new File(rootLogDir, \"save\"), subRootDir);", "+\t\tsaveDir.mkdirs();", "-\t\t\tString newFileName = filePrefix+\"_\";", "-\t\t\tif (i<10) newFileName += \"0\";", "-\t\t\tnewFileName += i+\".txt\";", "-\t\t\tFile renamedFile = new File(saveDir, newFileName);", "+\t\t\tString dirN = Integer.toString(i);", "+\t\t\tif (i<10) dirN = \"0\" + dirN;", "+\t\t\tsaveDir = new File(saveDir, dirN);", "+\t\t\tlogDir = createDir(saveDir, subDirs);", "+\t\t\tFile renamedFile = new File(logDir, logFileName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b78b674001af12a01a2349760867678", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "37843798fe45653980f2b49b68c9aaf82a2a678a", "commitAfterChange": "113049ad9ea4e67ef301103493e4ca8a20365c97", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public static String[] getJavaClassLibs()", "signatureAfterChange": " public static String[] getJavaClassLibs()", "diff": ["-\tString jreDir = getJREDirectory();", "-\tfinal String osName = System.getProperty(\"os.name\");", "-\tif (jreDir == null) {", "-\t\treturn new String[] {};", "+    String jreDir = getJREDirectory();", "+    final String osName = System.getProperty(\"os.name\");", "+    if (jreDir == null) {", "+        return new String[] {};", "+    }", "+    if (osName.startsWith(\"Mac\")) {", "+        return new String[] {", "+            toNativePath(jreDir + \"/../Classes/classes.jar\")", "+        };", "+    }", "+    final String vmName = System.getProperty(\"java.vm.name\");", "+    if (\"J9\".equals(vmName)) {", "+        return new String[] {", "+            toNativePath(jreDir + \"/lib/jclMax/classes.zip\")", "+        };", "+    }", "+    ArrayList paths = new ArrayList();", "+    String[] jarsNames = new String[] {", "+    \t\t\"/lib/vm.jar\",", "+    \t\t\"/lib/rt.jar\",", "+    \t\t\"/lib/core.jar\",", "+    \t\t\"/lib/security.jar\",", "+    \t\t\"/lib/xml.jar\",", "+    \t\t\"/lib/graphics.jar\"", "+    };", "+    addJarEntries(jreDir, jarsNames, paths);", "+    String[] result = new String[paths.size()];", "+    paths.toArray(result);", "+    return result;", "+}", "-\tif (osName.startsWith(\"Mac\")) {", "-\t\treturn new String[] { toNativePath(jreDir + \"/../Classes/classes.jar\") };", "-\t}", "-\tfinal String vmName = System.getProperty(\"java.vm.name\");", "-\tif (\"J9\".equals(vmName)) {", "-\t\treturn new String[] { toNativePath(jreDir + \"/lib/jclMax/classes.zip\") };", "-\t}", "-\tFile file = new File(jreDir + \"/lib/rt.jar\");", "-\tif (file.exists()) {", "-\t\treturn new String[] {", "-\t\t\ttoNativePath(jreDir + \"/lib/rt.jar\")", "-\t\t};", "-\t}", "-\tfile = new File(jreDir + \"/lib/vm.jar\");", "-\tif (file.exists()) {", "-\t\t// The IBM J2SE 5.0 has put the java.lang classes in vm.jar.", "-\t\treturn new String[] { ", "-\t\t\ttoNativePath(jreDir + \"/lib/vm.jar\"),", "-\t\t\ttoNativePath(jreDir + \"/lib/core.jar\"),", "-\t\t\ttoNativePath(jreDir + \"/lib/security.jar\"),", "-\t\t\ttoNativePath(jreDir + \"/lib/graphics.jar\") };\t\t\t\t", "-\t}", "-\treturn new String[] { ", "-\t\ttoNativePath(jreDir + \"/lib/core.jar\"),", "-\t\ttoNativePath(jreDir + \"/lib/security.jar\"),", "-\t\ttoNativePath(jreDir + \"/lib/graphics.jar\")", "-\t};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a33dbd982cb3d7ae664c1b398b3e02c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultCommentMapper.java", "commitBeforeChange": "43c947b648b5a1fa1fb7d4f5ce5b7cea1d4fa7a2", "commitAfterChange": "eee151556fa5628da58c297d3e841df408f33c62", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tint storeLeadingComments(ASTNode node, int previousEnd, Scanner scanner)", "signatureAfterChange": " \tint storeLeadingComments(ASTNode node, int previousEnd)", "diff": ["-\tint storeLeadingComments(ASTNode node, int previousEnd, Scanner scanner) {", "+\tint storeLeadingComments(ASTNode node, int previousEnd) {", "-\t\tint previousEndLine = scanner.getLineNumber(previousEnd);", "-\t\tint nodeStartLine = scanner.getLineNumber(nodeStart);", "+\t\tint previousEndLine = this.scanner.getLineNumber(previousEnd);", "+\t\tint nodeStartLine = this.scanner.getLineNumber(nodeStart);", "-\t\tint idx = getCommentIndex(this.commentIndex, nodeStart, -1);", "+\t\tint idx = getCommentIndex(0, nodeStart, -1);", "-\t\t\tint commentLine = scanner.getLineNumber(commentStart);", "+\t\t\tint commentLine = this.scanner.getLineNumber(commentStart);", "-\t\t\t\tscanner.resetTo(end+1, previousStart);", "+\t\t\t\tthis.scanner.resetTo(end+1, previousStart);", "-\t\t\t\t\tint token = scanner.getNextToken();", "-\t\t\t\t\tif (token != TerminalTokens.TokenNameWHITESPACE || scanner.currentPosition != previousStart) {", "+\t\t\t\t\tint token = this.scanner.getNextToken();", "+\t\t\t\t\tif (token != TerminalTokens.TokenNameWHITESPACE || this.scanner.currentPosition != previousStart) {", "-\t\t\t\tchar[] gap = scanner.getCurrentIdentifierSource();", "+\t\t\t\tchar[] gap = this.scanner.getCurrentIdentifierSource();", "-\t\t\t\tscanner.resetTo(previousEnd, commentStart);", "+\t\t\t\tthis.scanner.resetTo(previousEnd, commentStart);", "-\t\t\t\t\twhile (scanner.currentPosition != commentStart) {", "-\t\t\t\t\t\tif (scanner.getNextToken() != TerminalTokens.TokenNameWHITESPACE) {", "-\t\t\t\t\t\t\tlastTokenEnd =  scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\twhile (this.scanner.currentPosition != commentStart) {", "+\t\t\t\t\t\tif (this.scanner.getNextToken() != TerminalTokens.TokenNameWHITESPACE) {", "+\t\t\t\t\t\t\tlastTokenEnd =  this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\tint lastTokenLine = scanner.getLineNumber(lastTokenEnd);", "+\t\t\t\tint lastTokenLine = this.scanner.getLineNumber(lastTokenEnd);", "-\t\t\t\twhile (startIdx<length && lastTokenLine == scanner.getLineNumber(this.comments[startIdx].getStartPosition()) && nodeStartLine != lastTokenLine) {", "+\t\t\t\twhile (startIdx<length && lastTokenLine == this.scanner.getLineNumber(this.comments[startIdx].getStartPosition()) && nodeStartLine != lastTokenLine) {", "-\t\t\t\tthis.commentIndex = endIdx;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c273476e587cac673d9c224f8a97553f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocAllocationExpression.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\tconstant = NotAConstant;", "+\t\tthis.constant = NotAConstant;", "-\t\t\tthis.resolvedType = type.resolveType((ClassScope)scope);", "+\t\t\tthis.resolvedType = this.type.resolveType((ClassScope)scope);", "-\t\t\tthis.resolvedType = type.resolveType((BlockScope)scope);", "+\t\t\tthis.resolvedType = this.type.resolveType((BlockScope)scope);", "-\t\tif (arguments != null) {", "+\t\tif (this.arguments != null) {", "-\t\t\tint length = arguments.length;", "+\t\t\tint length = this.arguments.length;", "-\t\t\t\tif (binding.declaringClass == null) {", "-\t\t\t\t\tbinding.declaringClass = allocationType;", "+\t\t\t\tif (this.binding.declaringClass == null) {", "+\t\t\t\t\tthis.binding.declaringClass = allocationType;", "-\t\t\t\tscope.problemReporter().invalidConstructor(this, binding);", "+\t\t\t\tscope.problemReporter().javadocInvalidConstructor(this, this.binding, scope.getModifiers());", "-\t\tif (isMethodUseDeprecated(binding, scope)) {", "-\t\t\tscope.problemReporter().deprecatedMethod(binding, this);", "-\t\t}", "-", "-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0; i < arguments.length; i++) {", "-\t\t\t\targuments[i].implicitWidening(binding.parameters[i], argumentTypes[i]);", "-\t\t\t}", "+\t\tif (isMethodUseDeprecated(this.binding, scope)) {", "+\t\t\tscope.problemReporter().javadocDeprecatedMethod(this.binding, this, scope.getModifiers());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf10900b5f5d4003347226e8bb058d13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "commitAfterChange": "e62068644543b99c745f832b9263b49ff6b3d0ba", "methodNumberBeforeChange": 536, "methodNumberAfterChange": 536, "signatureBeforeChange": " public void illegalReturnRedefinition(AbstractMethodDeclaration abstractMethodDecl, MethodBinding inheritedMethod, char[][] nonNullAnnotationName)", "signatureAfterChange": " public void illegalReturnRedefinition(AbstractMethodDeclaration abstractMethodDecl, MethodBinding inheritedMethod, char[][] nonNullAnnotationName)", "diff": ["-\tString[] arguments;", "-\tString[] argumentsShort;", "-\tif (this.options.useNullTypeAnnotations != Boolean.TRUE) {", "-\t\tStringBuilder returnType = new StringBuilder();", "+\tint problemId = IProblem.IllegalReturnNullityRedefinition;", "+\tStringBuilder returnType = new StringBuilder();", "+\tStringBuilder returnTypeShort = new StringBuilder();", "+\tif (this.options.usesNullTypeAnnotations()) {", "+\t\t// 1.8+", "+\t\tif (inheritedReturnType.isTypeVariable() && (inheritedReturnType.tagBits & TagBits.AnnotationNullMASK) == 0) {", "+\t\t\tproblemId = IProblem.IllegalReturnNullityRedefinitionFreeTypeVariable;", "+", "+\t\t\treturnType.append(inheritedReturnType.readableName());", "+\t\t\treturnTypeShort.append(inheritedReturnType.shortReadableName());", "+\t\t} else {", "+\t\t\treturnType.append(inheritedReturnType.nullAnnotatedReadableName(this.options, false));", "+\t\t\treturnTypeShort.append(inheritedReturnType.nullAnnotatedReadableName(this.options, true));", "+\t\t}", "+\t} else {", "+\t\t// 1.7-", "-\t\targuments = new String[] { methodSignature.toString(), returnType.toString() };", "-\t\treturnType = new StringBuilder();", "-\t\treturnType.append('@').append(nonNullAnnotationName[nonNullAnnotationName.length-1]);", "-\t\treturnType.append(' ').append(inheritedReturnType.shortReadableName());", "-\t\targumentsShort = new String[] { shortSignature.toString(), returnType.toString() };", "-\t} else {", "-\t\targuments = new String[] { methodSignature.toString(), ", "-\t\t\t\t\t\t\t\t\tString.valueOf(inheritedReturnType.nullAnnotatedReadableName(this.options, false))};", "-\t\targumentsShort = new String[] { shortSignature.toString(),", "-\t\t\t\t\t\t\t\t\tString.valueOf(inheritedReturnType.nullAnnotatedReadableName(this.options, true))};", "+\t\treturnTypeShort.append('@').append(nonNullAnnotationName[nonNullAnnotationName.length-1]);", "+\t\treturnTypeShort.append(' ').append(inheritedReturnType.shortReadableName());", "+\tString[] arguments = new String[] { methodSignature.toString(), returnType.toString() };", "+\tString[] argumentsShort = new String[] { shortSignature.toString(), returnTypeShort.toString() };", "-\t\t\tIProblem.IllegalReturnNullityRedefinition, ", "+\t\t\tproblemId, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd496e1b6409d999325510c1fea122d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "844b891620178c0b92403d6108fad8dcdac272df", "commitAfterChange": "f4f81968c0fa49af0ebd2fc1f35fb9113776c823", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void testDiscardWorkingCopy3() throws CoreException", "signatureAfterChange": " \tpublic void testDiscardWorkingCopy3() throws CoreException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\t\tworkingCopy = cu.getWorkingCopy(owner, null, null);", "-\t\t\tworkingCopy = cu.getWorkingCopy(owner, null, null);", "-\t\t\tworkingCopy = cu.getWorkingCopy(owner, null, null);", "-\t\t\tassertTrue(\"should be in working copy mode\", workingCopy.isWorkingCopy());", "-\t\t\tassertTrue(\"should be opened\", workingCopy.isOpen());", "-\t\t\tassertTrue(\"should exist\", workingCopy.exists());", "+\t\t\tthis.workingCopy = cu.getWorkingCopy(owner, null, null);", "+\t\t\tthis.workingCopy = cu.getWorkingCopy(owner, null, null);", "+\t\t\tthis.workingCopy = cu.getWorkingCopy(owner, null, null);", "+\t\t\tassertTrue(\"should be in working copy mode\", this.workingCopy.isWorkingCopy());", "+\t\t\tassertTrue(\"should be opened\", this.workingCopy.isOpen());", "+\t\t\tassertTrue(\"should exist\", this.workingCopy.exists());", "-\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t\tassertTrue(\"should still be in working copy mode (1)\", workingCopy.isWorkingCopy());", "-\t\t\tassertTrue(\"should still be opened\", workingCopy.isOpen());", "-\t\t\tassertTrue(\"should still exist\", workingCopy.exists());", "+\t\t\tthis.workingCopy.discardWorkingCopy();", "+\t\t\tassertTrue(\"should still be in working copy mode (1)\", this.workingCopy.isWorkingCopy());", "+\t\t\tassertTrue(\"should still be opened\", this.workingCopy.isOpen());", "+\t\t\tassertTrue(\"should still exist\", this.workingCopy.exists());", "-\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t\tassertTrue(\"should still be in working copy mode (2)\", workingCopy.isWorkingCopy());", "-\t\t\tassertTrue(\"should no longer be opened\", !workingCopy.isOpen());", "-\t\t\tassertTrue(\"should no longer exist\", !workingCopy.exists());", "+\t\t\tthis.workingCopy.discardWorkingCopy();", "+\t\t\tthis.workingCopy.discardWorkingCopy();", "+\t\t\tassertTrue(\"should still be in working copy mode (2)\", this.workingCopy.isWorkingCopy());", "+\t\t\tassertTrue(\"should no longer be opened\", !this.workingCopy.isOpen());", "+\t\t\tassertTrue(\"should no longer exist\", !this.workingCopy.exists());", "-\t\t\tif (workingCopy != null) {", "+\t\t\tif (this.workingCopy != null) {", "-\t\t\t\twhile (workingCopy.isWorkingCopy() && max-- > 0) {", "-\t\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t\t\twhile (this.workingCopy.isWorkingCopy() && max-- > 0) {", "+\t\t\t\t\tthis.workingCopy.discardWorkingCopy();"]}], "num": 52214}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "335da184dd38a63811c68b82e040fc5d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "261bdafebc4ad1d8bb80fef9cc5c0198", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowInfo.java", "commitBeforeChange": "e18b8152863f75de59815219afe0ab3ec946a798", "commitAfterChange": "5333a8d6e234b4d5bbcbee365cfa39aafade1032", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public static UnconditionalFlowInfo mergedOptimizedBranchesIfElse( \t\tFlowInfo initsWhenTrue, boolean isOptimizedTrue, \t\tFlowInfo initsWhenFalse, boolean isOptimizedFalse, \t\tboolean allowFakeDeadBranch, FlowInfo flowInfo, IfStatement ifStatement)", "signatureAfterChange": " public static UnconditionalFlowInfo mergedOptimizedBranchesIfElse( \t\tFlowInfo initsWhenTrue, boolean isOptimizedTrue, \t\tFlowInfo initsWhenFalse, boolean isOptimizedFalse, \t\tboolean allowFakeDeadBranch, FlowInfo flowInfo, IfStatement ifStatement, \t\tboolean reportDeadCodeInKnownPattern)", "diff": ["-\t\tboolean allowFakeDeadBranch, FlowInfo flowInfo, IfStatement ifStatement) {", "+\t\tboolean allowFakeDeadBranch, FlowInfo flowInfo, IfStatement ifStatement,", "+\t\tboolean reportDeadCodeInKnownPattern) {", "-\t\t\tmergedInfo = initsWhenFalse.setReachMode(FlowInfo.UNREACHABLE_OR_DEAD).", "-\t\t\t\tunconditionalInits();", "+\t\t\tif (!reportDeadCodeInKnownPattern) {", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=256796", "+\t\t\t\t// do not report code even after if-else as dead as a consequence of analysis done in known dead code pattern", "+\t\t\t\t// when the CompilerOptions$reportDeadCodeInTrivialIfStatement option is disabled", "+\t\t\t\tif (ifStatement.elseStatement == null) {", "+\t\t\t\t\tmergedInfo = flowInfo.unconditionalInits();", "+\t\t\t\t} else {", "+\t\t\t\t\tmergedInfo = initsWhenFalse.unconditionalInits();", "+\t\t\t\t\tif (initsWhenFalse != FlowInfo.DEAD_END) {", "+\t\t\t\t\t\t// let the definitely true status of known dead code pattern not affect the reachability", "+\t\t\t\t\t\tmergedInfo.setReachMode(flowInfo.reachMode());", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tmergedInfo = initsWhenFalse.setReachMode(FlowInfo.UNREACHABLE_OR_DEAD).", "+\t\t\t\t\tunconditionalInits();", "+\t\t\t}", "-\t\t\tmergedInfo = initsWhenTrue.setReachMode(FlowInfo.UNREACHABLE_OR_DEAD).", "-\t\t\t\tunconditionalInits();", "+\t\t\tif (!reportDeadCodeInKnownPattern) {", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=256796", "+\t\t\t\t// do not report code even after if-else as dead as a consequence of analysis done in known dead code pattern", "+\t\t\t\t// when the CompilerOptions$reportDeadCodeInTrivialIfStatement option is disabled", "+\t\t\t\tif (ifStatement.thenStatement == null) {", "+\t\t\t\t\tmergedInfo = flowInfo.unconditionalInits();", "+\t\t\t\t} else {", "+\t\t\t\t\tmergedInfo = initsWhenTrue.unconditionalInits();", "+\t\t\t\t\tif (initsWhenTrue != FlowInfo.DEAD_END) {", "+\t\t\t\t\t\t// let the definitely false status of known dead code pattern not affect the reachability", "+\t\t\t\t\t\tmergedInfo.setReachMode(flowInfo.reachMode());", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tmergedInfo = initsWhenTrue.setReachMode(FlowInfo.UNREACHABLE_OR_DEAD).", "+\t\t\t\t\tunconditionalInits();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55cef166a52f478faa31ac28f8ed163b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowInfo.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic static FlowInfo mergedOptimizedBranches(FlowInfo initsWhenTrue, boolean isOptimizedTrue, FlowInfo initsWhenFalse, boolean isOptimizedFalse, boolean allowFakeDeadBranch)", "signatureAfterChange": " public static UnconditionalFlowInfo mergedOptimizedBranches( \t\tFlowInfo initsWhenTrue, boolean isOptimizedTrue,  \t\tFlowInfo initsWhenFalse, boolean isOptimizedFalse,  \t\tboolean allowFakeDeadBranch)", "diff": ["-\t */", "-\tpublic static FlowInfo mergedOptimizedBranches(FlowInfo initsWhenTrue, boolean isOptimizedTrue, FlowInfo initsWhenFalse, boolean isOptimizedFalse, boolean allowFakeDeadBranch) {", "-\t\tFlowInfo mergedInfo;", "-\t\tif (isOptimizedTrue){", "-\t\t\tif (initsWhenTrue == FlowInfo.DEAD_END && allowFakeDeadBranch) {", "-\t\t\t\tmergedInfo = initsWhenFalse.setReachMode(FlowInfo.UNREACHABLE);", "-\t\t\t} else {", "-\t\t\t\tmergedInfo = initsWhenTrue.addPotentialInitializationsFrom(initsWhenFalse);", "-\t\t\t}", "-", "-\t\t} else if (isOptimizedFalse) {", "-\t\t\tif (initsWhenFalse == FlowInfo.DEAD_END && allowFakeDeadBranch) {", "-\t\t\t\tmergedInfo = initsWhenTrue.setReachMode(FlowInfo.UNREACHABLE);", "-\t\t\t} else {", "-\t\t\t\tmergedInfo = initsWhenFalse.addPotentialInitializationsFrom(initsWhenTrue);", "-\t\t\t}", "-", "-\t\t} else {", "-\t\t\tmergedInfo = initsWhenTrue.unconditionalInits().mergedWith(initsWhenFalse.unconditionalInits());", "+ */", "+public static UnconditionalFlowInfo mergedOptimizedBranches(", "+\t\tFlowInfo initsWhenTrue, boolean isOptimizedTrue, ", "+\t\tFlowInfo initsWhenFalse, boolean isOptimizedFalse, ", "+\t\tboolean allowFakeDeadBranch) {", "+\tUnconditionalFlowInfo mergedInfo;", "+\tif (isOptimizedTrue){", "+\t\tif (initsWhenTrue == FlowInfo.DEAD_END && allowFakeDeadBranch) {", "+\t\t\tmergedInfo = initsWhenFalse.setReachMode(FlowInfo.UNREACHABLE).", "+\t\t\t\tunconditionalInits();", "+\t\t} ", "+\t\telse {", "+\t\t\tmergedInfo = ", "+\t\t\t\tinitsWhenTrue.addPotentialInitializationsFrom(initsWhenFalse.", "+\t\t\t\t\tnullInfoLessUnconditionalCopy()).", "+\t\t\t\tunconditionalInits();", "-\t\treturn mergedInfo;", "+\t} ", "+\telse if (isOptimizedFalse) {", "+\t\tif (initsWhenFalse == FlowInfo.DEAD_END && allowFakeDeadBranch) {", "+\t\t\tmergedInfo = initsWhenTrue.setReachMode(FlowInfo.UNREACHABLE).", "+\t\t\t\tunconditionalInits();", "+\t\t} ", "+\t\telse {", "+\t\t\tmergedInfo = ", "+\t\t\t\tinitsWhenFalse.addPotentialInitializationsFrom(initsWhenTrue.", "+\t\t\t\t\tnullInfoLessUnconditionalCopy()).", "+\t\t\t\tunconditionalInits();", "+\t\t}", "+\t} ", "+\telse {", "+\t\tmergedInfo = initsWhenTrue.", "+\t\t\tmergedWith(initsWhenFalse.unconditionalInits());", "+\treturn mergedInfo;", "+}"]}], "num": 5265}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "951a9cad9869f1e91c8294b3c82aaeb9", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a77bb6504285206f1062802b79c535d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DOMFinder.java", "commitBeforeChange": "542bc03686c1982d51c01449da7cc4df74fbe14e", "commitAfterChange": "488811f5b30befaaae3f5995fcfa0b0505629e6e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic ASTNode search() throws JavaModelException", "signatureAfterChange": "  \tpublic ASTNode search() throws JavaModelException", "diff": ["-\t\tif (this.element instanceof IMember && !(this.element instanceof IInitializer))", "+\t\tif (this.element instanceof IMember && !(this.element instanceof IInitializer)", "+\t\t\t\t&& !(this.element instanceof LambdaMethod) && !(this.element instanceof org.eclipse.jdt.internal.core.LambdaExpression))", "-\t\telse if (this.element instanceof ITypeParameter)", "-\t\t\trange = ((ITypeParameter) this.element).getNameRange();", "+\t\telse if (this.element instanceof ITypeParameter || this.element instanceof ILocalVariable)", "+\t\t\trange = this.element.getNameRange();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73ceacae11c847f9793a6ec8f4d468b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "cbce30b9f59e4652d4bd8e53671da318f5703bbd", "commitAfterChange": "bb6274460011ae3e14410332fdec5a35eeffca9b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " protected void attachOrphanCompletionNode()", "signatureAfterChange": " protected void attachOrphanCompletionNode()", "diff": ["-\t\t\t\t\t&& ((this.expressionPtr > 0 && this.expressionStack[this.expressionPtr - 1] instanceof InstanceOfExpression)", "-\t\t\t\t\t\t|| (this.elementPtr >= 0 && this.elementObjectInfoStack[this.elementPtr] instanceof InstanceOfExpression)))", "+\t\t\t\t\t&& ((this.expressionPtr > 0 && stackHasInstanceOfExpression(this.expressionStack, this.expressionPtr - 1))", "+\t\t\t\t\t\t\t// In case of error in compilation unit, expression stack might not have instanceof exp, so try elementObjectInfoStack", "+\t\t\t\t\t\t|| (this.elementPtr >= 0 && stackHasInstanceOfExpression(this.elementObjectInfoStack, this.elementPtr))))"]}], "num": 30740}
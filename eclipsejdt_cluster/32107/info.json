{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69ab751d03d39830b840bc45b74c749a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "561762617d97518bcf345d3c505cb173", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "08c130b51e222d1dc818f74430195d7cc0d9ba9c", "commitAfterChange": "f44833f9e9c6c61508713666b8c272384401715c", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void selectType(char[] typeName, IType context) throws JavaModelException", "signatureAfterChange": " \tpublic void selectType(char[] typeName, IType context) throws JavaModelException", "diff": ["-\t\t\t\ttypeDeclaration = BinaryTypeConverter.buildTypeDeclaration(context, parsedUnit, result, typeNames);", "-\t\t\t\tparsedUnit.imports = BinaryTypeConverter.buildImports(typeNames, reader);", "+\t\t\t\t", "+\t\t\t\tBinaryTypeConverter converter = new BinaryTypeConverter(this.parser.problemReporter(), result, typeNames);", "+\t\t\t\ttypeDeclaration = converter.buildTypeDeclaration(context, parsedUnit);", "+\t\t\t\tparsedUnit.imports = converter.buildImports(reader);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6b10abee11c274a5f7b37e1e60a85fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java", "commitBeforeChange": "8758dd14429783f320e9886f9e8b83edae58524b", "commitAfterChange": "5d659b26c6aa5eb4fc698fe62dca975ceee0bdfd", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static IScanner createScanner(boolean tokenizeComments, boolean tokenizeWhiteSpace, boolean assertMode, boolean recordLineSeparator)", "signatureAfterChange": " \tpublic static IScanner createScanner(boolean tokenizeComments, boolean tokenizeWhiteSpace, boolean assertMode, boolean recordLineSeparator)", "diff": ["-\t\treturn createScanner(tokenizeComments, tokenizeWhiteSpace, assertMode, recordLineSeparator, false);", "-\t}", "+\t\tPublicScanner scanner = new PublicScanner(tokenizeComments, tokenizeWhiteSpace, false/*nls*/, assertMode /*assert*/, null/*taskTags*/, null/*taskPriorities*/);"]}], "num": 32107}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "076521f4ac2411286bcb8a209f3a816a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0335e37d00c3f47fe9dc2a2c5f41ea00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompoundAssignment.java", "commitBeforeChange": "67c70f0229b1ee30edee39ee40e49c055e5684f0", "commitAfterChange": "2d2c8e4351b8f7e6edd805ab55e60b91a4cccfa1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tboolean expressionIsCast = this.expression instanceof CastExpression;", "+\t\tif (expressionIsCast)", "+\t\t\tthis.expression.bits |= ASTNode.DisableUnnecessaryCastCheck; // will check later on", "+\t\tif (expressionIsCast)", "+\t\t\tCastExpression.checkNeedForArgumentCasts(scope, this.operator, result, this.lhs, originalLhsType.id, false, this.expression, originalExpressionType.id, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc6a741138696691156b9f62f7a54b02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif ((expressionIsCast = this.expression instanceof CastExpression) == true) this.expression.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\tif ((expressionIsCast = this.expression instanceof CastExpression) == true) this.expression.bits |= DisableUnnecessaryCastCheck; // will check later on"]}], "num": 49234}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e772810d65361f86c0d3413934d9428b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56100e83731e64d3b710b63eaac29004", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "6781b5445d9813f939573ded9d37ee82c9dbbd15", "commitAfterChange": "6989e5bb4ed8f3be37ea69298930332629e9b475", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " void computeInheritedMethods()", "signatureAfterChange": " void computeInheritedMethods()", "diff": ["-\tReferenceBinding superclass = (this.type.modifiers & IConstants.AccInterface) == 0", "-\t\t? this.type.superclass() // class or enum", "-\t\t: this.type.scope.getJavaLangObject(); // check interface methods against Object", "+\tReferenceBinding superclass = this.type.isInterface()", "+\t\t? this.type.scope.getJavaLangObject() // check interface methods against Object", "+\t\t: this.type.superclass(); // class or enum"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fccf9213406be3e1079af11b890d60cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "23973a4dd19826bd57b9766722e05471b8135157", "commitAfterChange": "8e499c7ba695862747987f5930cb4781e109836a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " void computeInheritedMethods()", "signatureAfterChange": " void computeInheritedMethods()", "diff": ["+void computeInheritedMethods() {", "+\tReferenceBinding superclass = (this.type.modifiers & IConstants.AccInterface) == 0", "+\t\t? this.type.superclass() // class or enum", "+\t\t: this.type.scope.getJavaLangObject(); // check interface methods against Object", "+\tcomputeInheritedMethods(superclass, type.superInterfaces());", "+}", "-void computeInheritedMethods() {", "-\tReferenceBinding[] itsInterfaces = type.superInterfaces();", "-\tReferenceBinding superType = (this.type.modifiers & IConstants.AccInterface) == 0", "-\t\t? this.type.superclass() // class or enum", "-\t\t: this.type.scope.getJavaLangObject(); // check interface methods against Object"]}], "num": 49448}
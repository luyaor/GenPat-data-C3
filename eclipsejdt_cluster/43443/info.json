{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de58feb7eee6c34590e86df654ad992b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7b910c3a83078dc25b03d54c82393a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "4582114353aa3904268b70cdd42dc3781becfb01", "commitAfterChange": "7b316625d96d66e552d608c4488c77581168d213", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprivate static int verifyPatternMatchRule(String stringPattern, int matchRule)", "signatureAfterChange": " public static int validateMatchRule(String stringPattern, int matchRule)", "diff": ["-\t */", "-\tprivate static int verifyPatternMatchRule(String stringPattern, int matchRule) {", "-\t", "-\t\t// Verify Regexp match rule", "-\t\tif ((matchRule & R_REGEXP_MATCH) != 0) {", "-\t\t\tif ((matchRule & R_PATTERN_MATCH) != 0 || (matchRule & R_PREFIX_MATCH) != 0 || (matchRule & R_CAMELCASE_MATCH) != 0) {", "-\t\t\t\treturn -1;", "-\t\t}", "-\t", "-\t\t// Verify Pattern match rule", "-\t\tif ((matchRule & R_PATTERN_MATCH) != 0) {", "-\t\t\tif ((matchRule & R_REGEXP_MATCH) != 0 || (matchRule & R_PREFIX_MATCH) != 0) {", "-\t\t\t\treturn -1;", "-\t\t\t}", "-\t\t\tint starIndex = stringPattern.indexOf('*');", "-\t\t\tint questionIndex = stringPattern.indexOf('?');", "-\t\t\tif (starIndex < 0 && questionIndex < 0) {", "-\t\t\t\t// No need to have pattern match", "-\t\t\t\tmatchRule &= ~R_PATTERN_MATCH;", "-\t\t\t\t// Remove Camel Case match when there's '*' or '?' characters", "-\t\t\t\tif ((matchRule & R_CAMELCASE_MATCH) != 0) {", "-\t\t\t\t\tmatchRule &= ~R_CAMELCASE_MATCH;", "-\t\t}", "-\t\t// Verify Camel Case match rule", "-\t\tif ((matchRule & R_CAMELCASE_MATCH) != 0) {", "-\t\t\t// Verify sting pattern compatibility", "-\t\t\tint length = stringPattern.length();", "-\t\t\tif (length > 1) {", "-\t\t\t\tint idx = 0;", "-\t\t\t\tchar ch = stringPattern.charAt(idx++);", "-\t\t\t\tif (Character.isJavaIdentifierStart(ch)) {", "-\t\t\t\t\tch = stringPattern.charAt(idx++);", "-\t\t\t\t\tif (Character.isUpperCase(ch)) {", "-\t\t\t\t\t\twhile (idx<length && Character.isUpperCase(stringPattern.charAt(idx))) {", "-\t\t\t\t\t\t\tidx++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\twhile (idx<length && (!Character.isUpperCase(ch=stringPattern.charAt(idx)) && Character.isJavaIdentifierPart(ch))) {", "-\t\t\t\t\t\t\tidx++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (idx != length) {", "-\t\t\t\t\t\t\tmatchRule &= ~R_CAMELCASE_MATCH;", "-\t\t\t\t\t\t\tmatchRule |= R_PREFIX_MATCH;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t// Verify bits compatibility", "-\t\t\tif ((matchRule & R_CAMELCASE_MATCH) != 0) {", "-\t\t\t\tif (matchRule == R_CAMELCASE_MATCH) {", "-\t\t\t\t\tmatchRule |= R_CASE_SENSITIVE;", "-\t\t\t\t} else if ((matchRule & R_PREFIX_MATCH) != 0) {", "-\t\t\t\t\tif ((matchRule & R_CASE_SENSITIVE) != 0) {", "-\t\t\t\t\t\t// This is equivalent to Camel Case match rule", "-\t\t\t\t\t\tmatchRule &= ~R_PREFIX_MATCH;", "-\t\t\t\t\t\tmatchRule &= ~R_CASE_SENSITIVE;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\treturn matchRule;", "+ */", "+public static int validateMatchRule(String stringPattern, int matchRule) {", "+", "+\t// Verify Regexp match rule", "+\tif ((matchRule & R_REGEXP_MATCH) != 0) {", "+\t\tif ((matchRule & R_PATTERN_MATCH) != 0 || (matchRule & R_PREFIX_MATCH) != 0 || (matchRule & R_CAMELCASE_MATCH) != 0) {", "+\t\t\treturn -1;", "+\t\t}", "+\t// Verify Pattern match rule", "+\tif ((matchRule & R_PATTERN_MATCH) != 0) {", "+\t\tif ((matchRule & R_PREFIX_MATCH) != 0) {", "+\t\t\tmatchRule &= ~R_PREFIX_MATCH;", "+\t\t}", "+\t\tint starIndex = stringPattern.indexOf('*');", "+\t\tint questionIndex = stringPattern.indexOf('?');", "+\t\tif (starIndex < 0 && questionIndex < 0) {", "+\t\t\t// No need to have pattern match", "+\t\t\tmatchRule &= ~R_PATTERN_MATCH;", "+\t\t} else {", "+\t\t\t// Remove Camel Case match when there's '*' or '?' characters", "+\t\t\tif ((matchRule & R_CAMELCASE_MATCH) != 0) {", "+\t\t\t\tmatchRule &= ~R_CAMELCASE_MATCH;", "+\t\t\t}", "+\t\t}", "+", "+\t// Verify Camel Case match rule", "+\tif ((matchRule & R_CAMELCASE_MATCH) != 0) {", "+\t\t// Verify sting pattern validity", "+\t\tint length = stringPattern.length();", "+\t\tboolean validCamelCase = false;", "+\t\tif (length > 1) {", "+\t\t\tint idx = 0;", "+\t\t\tchar ch = stringPattern.charAt(idx++);", "+\t\t\tif (Character.isJavaIdentifierStart(ch)) {", "+\t\t\t\tch = stringPattern.charAt(idx++);", "+\t\t\t\tif (Character.isUpperCase(ch)) {", "+\t\t\t\t\twhile (idx<length && Character.isUpperCase(stringPattern.charAt(idx))) {", "+\t\t\t\t\t\tidx++;", "+\t\t\t\t\t}", "+\t\t\t\t\twhile (idx<length && (!Character.isUpperCase(ch=stringPattern.charAt(idx)) && Character.isJavaIdentifierPart(ch))) {", "+\t\t\t\t\t\tidx++;", "+\t\t\t\t\t}", "+\t\t\t\t\tvalidCamelCase = idx == length;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t// Verify bits compatibility", "+\t\tif (validCamelCase) {", "+\t\t\tif ((matchRule & R_PREFIX_MATCH) != 0) {", "+\t\t\t\tif ((matchRule & R_CASE_SENSITIVE) != 0) {", "+\t\t\t\t\t// This is equivalent to Camel Case match rule", "+\t\t\t\t\tmatchRule &= ~R_PREFIX_MATCH;", "+\t\t\t\t\tmatchRule &= ~R_CASE_SENSITIVE;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tmatchRule &= ~R_CAMELCASE_MATCH;", "+\t\t\tif ((matchRule & R_PREFIX_MATCH) == 0) {", "+\t\t\t\tmatchRule |= R_PREFIX_MATCH;", "+\t\t\t\tmatchRule |= R_CASE_SENSITIVE;", "+\t\t\t}", "+\t\t}", "+\t}", "+\treturn matchRule;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd47b9735538eea21c062d24a8a30ad5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "a746953c3c39228e621101bf14cd960b61f268e5", "commitAfterChange": "8d9e4d82b7907a3f11b58a9fee1e77dc3999b852", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public static int validateMatchRule(String stringPattern, int matchRule)", "signatureAfterChange": " public static int validateMatchRule(String stringPattern, int matchRule)", "diff": ["-\t\t\t(matchRule & R_CAMEL_CASE_MATCH) != 0 || (matchRule & R_CAMELCASE_MATCH) != 0) {", "+\t\t\t(matchRule & R_CAMELCASE_MATCH) != 0 || (matchRule & R_CAMELCASE_SAME_PART_COUNT_MATCH) != 0) {", "+\t\t\t// regexp is not supported yet", "-\tint starIndex = stringPattern.indexOf('*');", "-\tint questionIndex = stringPattern.indexOf('?');", "-\tif (starIndex < 0 && questionIndex < 0) {", "-\t\t// reset pattern match flag if any", "-\t\tmatchRule &= ~R_PATTERN_MATCH;", "-\t} else {", "-\t\t// force Pattern rule", "-\t\tmatchRule |= R_PATTERN_MATCH;", "+\tif (stringPattern != null) {", "+\t\tint starIndex = stringPattern.indexOf('*');", "+\t\tint questionIndex = stringPattern.indexOf('?');", "+\t\tif (starIndex < 0 && questionIndex < 0) {", "+\t\t\t// reset pattern match flag if any", "+\t\t\tmatchRule &= ~R_PATTERN_MATCH;", "+\t\t} else {", "+\t\t\t// force Pattern rule", "+\t\t\tmatchRule |= R_PATTERN_MATCH;", "+\t\t}", "-\t\t// remove Camel Case and Prefix match flags if any", "+\t\t// reset other incompatible flags", "-\t\tmatchRule &= ~R_CAMEL_CASE_MATCH;", "+\t\tmatchRule &= ~R_CAMELCASE_SAME_PART_COUNT_MATCH;", "+\t\treturn matchRule;", "-\t// Verify Camel Case match rule", "-\tif ((matchRule & R_CAMEL_CASE_MATCH) != 0) {", "-\t\tmatchRule &= ~R_CAMELCASE_MATCH; // in case of some user specify both constants", "-\t\t// Verify sting pattern validity", "-\t\tint length = stringPattern.length();", "-\t\tboolean validCamelCase = true;", "-\t\tboolean uppercase = false;", "-\t\tfor (int i=0; i<length && validCamelCase; i++) {", "-\t\t\tchar ch = stringPattern.charAt(i);", "-\t\t\tvalidCamelCase = i==0 ? ScannerHelper.isJavaIdentifierStart(ch) : ScannerHelper.isJavaIdentifierPart(ch);", "-\t\t\t// at least one uppercase character is need in CamelCase pattern", "-\t\t\t// (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=136313)", "-\t\t\tif (!uppercase) uppercase = ScannerHelper.isUpperCase(ch);", "-\t\t}", "-\t\tvalidCamelCase = validCamelCase && uppercase;", "-\t\t// Verify flags compatibility", "+\t// Verify Camel Case", "+\tif ((matchRule & R_CAMELCASE_MATCH) != 0) {", "+\t\t// reset other incompatible flags", "+\t\tmatchRule &= ~R_CAMELCASE_SAME_PART_COUNT_MATCH;", "+\t\tmatchRule &= ~R_PREFIX_MATCH;", "+\t\t// validate camel case rule and modify it if not valid", "+\t\tboolean validCamelCase = validateCamelCasePattern(stringPattern);", "-\t\t\tmatchRule &= ~R_CAMEL_CASE_MATCH;", "+\t\t\tmatchRule &= ~R_CAMELCASE_MATCH;", "+\t\treturn matchRule;", "+\t}", "+\t", "+\t// Verify Camel Case with same count of parts", "+\tif ((matchRule & R_CAMELCASE_SAME_PART_COUNT_MATCH) != 0) {", "+\t\t// reset other incompatible flags", "+\t\tmatchRule &= ~R_PREFIX_MATCH;", "+\t\t// validate camel case rule and modify it if not valid", "+\t\tboolean validCamelCase = validateCamelCasePattern(stringPattern);", "+\t\tif (!validCamelCase) {", "+\t\t\tmatchRule &= ~R_CAMELCASE_SAME_PART_COUNT_MATCH;", "+\t\t}", "+\t\treturn matchRule;", "-\t// Verify deprecated Camel Case match rule for backward compatibility", "-\telse if ((matchRule & R_CAMELCASE_MATCH) != 0) {", "-\t\t// Verify sting pattern validity", "-\t\tint length = stringPattern.length();", "-\t\tboolean validCamelCase = true;", "-\t\tboolean uppercase = false;", "-\t\tfor (int i=0; i<length && validCamelCase; i++) {", "-\t\t\tchar ch = stringPattern.charAt(i);", "-\t\t\tvalidCamelCase = i==0 ? ScannerHelper.isJavaIdentifierStart(ch) : ScannerHelper.isJavaIdentifierPart(ch);", "-\t\t\t// at least one uppercase character is need in CamelCase pattern", "-\t\t\t// (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=136313)", "-\t\t\tif (!uppercase) uppercase = ScannerHelper.isUpperCase(ch);", "-\t\t}", "-\t\tvalidCamelCase = validCamelCase && uppercase;", "-\t\t// Verify flags compatibility", "-\t\tif (validCamelCase) {", "-\t\t\tif ((matchRule & R_PREFIX_MATCH) != 0) {", "-\t\t\t\tif ((matchRule & R_CASE_SENSITIVE) != 0) {", "-\t\t\t\t\t// This is equivalent to Camel Case match rule", "-\t\t\t\t\tmatchRule &= ~R_PREFIX_MATCH;", "-\t\t\t\t\tmatchRule &= ~R_CASE_SENSITIVE;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else {", "-\t\t\tmatchRule &= ~R_CAMELCASE_MATCH;", "-\t\t\tif ((matchRule & R_PREFIX_MATCH) == 0) {", "-\t\t\t\tmatchRule |= R_PREFIX_MATCH;", "-\t\t\t\tmatchRule |= R_CASE_SENSITIVE;", "-\t\t\t}", "-\t\t}", "-\t}", "+\t// Return the validated match rule (modified if necessary)"]}], "num": 43443}
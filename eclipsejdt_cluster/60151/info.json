{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9137a3bbadf23a8b85da97158695292e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71e13b2492ad56c2353864f7580e7cf7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5046f0da42323773845d7a3edf39df0b8c6a1944", "commitAfterChange": "80f69cca108e407e297e62382ba04bd29eb1703d", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 130, "signatureBeforeChange": " \t \tpublic ResolvedClasspath resolveClasspath(IClasspathEntry[] rawClasspath, boolean usePreviousSession, boolean resolveChainedLibraries) throws JavaModelException", "signatureAfterChange": "  \tpublic ResolvedClasspath resolveClasspath(IClasspathEntry[] rawClasspath, IClasspathEntry[] referencedEntries, boolean usePreviousSession, boolean resolveChainedLibraries) throws JavaModelException", "diff": ["+", "+\tpublic ResolvedClasspath resolveClasspath(IClasspathEntry[] rawClasspath, IClasspathEntry[] referencedEntries, boolean usePreviousSession, boolean resolveChainedLibraries) throws JavaModelException {", "+\t\tMap referencedEntriesMap = new HashMap();", "+\t\tList rawLibrariesPath = new ArrayList();", "+\t\t", "+\t\tif(resolveChainedLibraries) {", "+\t\t\tfor (int index = 0; index < rawClasspath.length; index++) {", "+\t\t\t\tIClasspathEntry currentEntry = rawClasspath[index]; ", "+\t\t\t\tif (currentEntry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "+\t\t\t\t\trawLibrariesPath.add(ClasspathEntry.resolveDotDot(currentEntry.getPath()));", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (referencedEntries != null) {", "+\t\t\t\t// The Set is required to keep the order intact while the referencedEntriesMap (Map)", "+\t\t\t\t// is used to map the referenced entries with path", "+\t\t\t\tLinkedHashSet referencedEntriesSet = new LinkedHashSet();", "+\t\t\t\tfor (int index = 0; index < referencedEntries.length; index++) {", "+\t\t\t\t\tIPath path = referencedEntries[index].getPath();", "+\t\t\t\t\tif (!rawLibrariesPath.contains(path) && referencedEntriesMap.get(path) == null) {", "+\t\t\t\t\t\treferencedEntriesMap.put(path, referencedEntries[index]);", "+\t\t\t\t\t\treferencedEntriesSet.add(referencedEntries[index]);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tresult.referencedEntries = new IClasspathEntry[referencedEntriesSet.size()];", "+\t\t\t\treferencedEntriesSet.toArray(result.referencedEntries);", "+\t\t\t}", "+\t\t}", "+\t\t", "-\t\t\t\t\t\tif (resolveChainedLibraries && resolvedEntry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "+\t\t\t\t\t\t// If the entry is already present in the rawReversetMap, it means the entry and the chained libraries", "+\t\t\t\t\t\t// have already been processed. So, skip it.", "+\t\t\t\t\t\tif (resolveChainedLibraries && resolvedEntry.getEntryKind() == IClasspathEntry.CPE_LIBRARY", "+\t\t\t\t\t\t\t\t\t\t\t\t\t&& result.rawReverseMap.get(resolvedEntry.getPath()) == null) {", "-\t\t\t\t\t\t\t\taddToResult(rawEntry, extraEntries[j], result, resolvedEntries, externalFoldersManager);", "+\t\t\t\t\t\t\t\tif (!rawLibrariesPath.contains(extraEntries[j].getPath())) {", "+\t\t\t\t\t\t\t\t\taddToResult(rawEntry, extraEntries[j], result, resolvedEntries, externalFoldersManager, referencedEntriesMap, true);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\taddToResult(rawEntry, resolvedEntry, result, resolvedEntries, externalFoldersManager);", "+\t\t\t\t\t\taddToResult(rawEntry, resolvedEntry, result, resolvedEntries, externalFoldersManager, referencedEntriesMap, false);", "-\t\t\t\t\t\t\tif (resolveChainedLibraries) {", "+\t\t\t\t\t\t\tif (resolveChainedLibraries && result.rawReverseMap.get(cEntry.getPath()) == null) {", "-\t\t\t\t\t\t\t\t\taddToResult(rawEntry, extraEntries[k], result, resolvedEntries, externalFoldersManager);", "+\t\t\t\t\t\t\t\t\tif (!rawLibrariesPath.contains(extraEntries[k].getPath())) {", "+\t\t\t\t\t\t\t\t\t\taddToResult(rawEntry, extraEntries[k], result, resolvedEntries, externalFoldersManager, referencedEntriesMap, true);", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\taddToResult(rawEntry, cEntry, result, resolvedEntries, externalFoldersManager);", "+\t\t\t\t\t\taddToResult(rawEntry, cEntry, result, resolvedEntries, externalFoldersManager, referencedEntriesMap, false);", "-\t\t\t\t\tif (resolveChainedLibraries) {", "+\t\t\t\t\tif (resolveChainedLibraries && result.rawReverseMap.get(resolvedEntry.getPath()) == null) {", "-\t\t\t\t\t\t\taddToResult(rawEntry, extraEntries[k], result, resolvedEntries, externalFoldersManager);", "+\t\t\t\t\t\t\tif (!rawLibrariesPath.contains(extraEntries[k].getPath())) {", "+\t\t\t\t\t\t\t\taddToResult(rawEntry, extraEntries[k], result, resolvedEntries, externalFoldersManager, referencedEntriesMap, true);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\taddToResult(rawEntry, resolvedEntry, result, resolvedEntries, externalFoldersManager);", "+\t\t\t\t\taddToResult(rawEntry, resolvedEntry, result, resolvedEntries, externalFoldersManager, referencedEntriesMap, false);", "-\t\t\t\t\taddToResult(rawEntry, resolvedEntry, result, resolvedEntries, externalFoldersManager);", "+\t\t\t\t\taddToResult(rawEntry, resolvedEntry, result, resolvedEntries, externalFoldersManager, referencedEntriesMap, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d33e3a36bafabcb0ab76cb50024bf0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "717a44c6b6c761be0c48243cde9dff6857a6db32", "commitAfterChange": "df9941361641a347d1ba4ee80fe7f9c7468ba17a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tprivate void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r \tprivate void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\tboolean didSpecifyTarget = false;\r", "-\t\t\t\t\t\tMain.bind(\"configure.duplicateCompliance\", currentArg));\r", "-\t\t\t\t\t//$NON-NLS-1$\r", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateCompliance\", currentArg));//$NON-NLS-1$\r", "-\t\t\t\tif (!didSpecifySourceLevel) {\r", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);\r", "-\t\t\t\t}\r", "-\t\t\t\tif (!didSpecifySourceLevel) {\r", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);\r", "-\t\t\t\t}\r", "+\t\t\t\tdidSpecifyTarget = true;\r", "+\t\t\t\t} else if (currentArg.equals(\"1.3\")) { //$NON-NLS-1$\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_3);\r", "+\t\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);\r", "+\t\t// check and set compliance/source/target compatibilities\r", "+\t\tif (!didSpecifyCompliance){\r", "+\t\t\t\tif (options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)){\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);\r", "+\t\t\t\t}\r", "+\t\t}\r", "+\t\tString compliance = (String)options.get(CompilerOptions.OPTION_Compliance);\r", "+\t\tif (CompilerOptions.VERSION_1_4.equals(compliance)){\r", "+\t\t\t\r", "+\t\t\t// default 1.4 settings\r", "+\t\t\tif (!didSpecifySourceLevel){\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);\r", "+\t\t\t}\r", "+\t\t\tif (!didSpecifyTarget){\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);\r", "+\t\t\t}\r", "+\t\t} else if (CompilerOptions.VERSION_1_3.equals(compliance)){\r", "+\r", "+\t\t\t// default 1.4 settings\r", "+\t\t\tif (!didSpecifySourceLevel){\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);\r", "+\t\t\t}\r", "+\t\t\tif (!didSpecifyTarget){\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t// compliance must be 1.4 if source is 1.4\r", "+\t\tif (options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)\r", "+\t\t\t\t&& !options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)){ \r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource14\", (String)options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$\r", "+\t\t}\r", "+\t\t\r", "+\t\t// target must be 1.4 if source is 1.4\r", "+\t\tif (options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)\r", "+\t\t\t\t&& !options.get(CompilerOptions.OPTION_TargetPlatform).equals(CompilerOptions.VERSION_1_4)){ \r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource14\", (String)options.get(CompilerOptions.OPTION_TargetPlatform))); //$NON-NLS-1$\r", "+\t\t}\r", "+\r"]}], "num": 60151}
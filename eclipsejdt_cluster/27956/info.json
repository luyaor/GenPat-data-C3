{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb2285248d6f6ee56217cc7aad7e2750", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c3f00ba6f84d83674589f07ee899d68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "commitAfterChange": "8f130374b1740d04a2a1a32967cf4d9130b4bd12", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": " public void test0413_while_unknown_field()", "signatureAfterChange": " public void test0413_while_unknown_field()", "diff": ["-\tthis.runNegativeTest(", "+\tthis.runConformTest(", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\"\to.toString();\\n\" + ", "-\t\t\"\t^\\n\" + ", "-\t\t\"Potential null pointer access: The field o may be null at this location\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b09f99d389a27eb51d7acfe53927f33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 434, "methodNumberAfterChange": 434, "signatureBeforeChange": "  \tpublic void test0423()", "signatureAfterChange": "  \tpublic void test0423()", "diff": ["-\t\tthis.runNegativeTest(", "+\t\tthis.runConformTest(", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 12)\\n\" +", "-\t\t\t\"\tfoo();\\n\" +", "-\t\t\t\"\t^^^\\n\" +", "-\t\t\t\"Bound mismatch: The generic method foo() of type X is not applicable for the arguments (). The inferred type X is not a valid substitute for the bounded parameter <U extends X & Runnable>\\n\" +", "-\t\t\t\"----------\\n\");", "+\t\t\t\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39fd7f9da5006e3183db03de1dc9aef6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d0b9fa49059380aa33c580ecd386773dc780db14", "commitAfterChange": "297d21321fa4e0f1df8ca75fc42ba95a96cc17a8", "methodNumberBeforeChange": 1072, "methodNumberAfterChange": 1072, "signatureBeforeChange": " public void test1044()", "signatureAfterChange": " public void test1044()", "diff": ["-//https://bugs.eclipse.org/bugs/show_bug.cgi?id=159214", "+//https://bugs.eclipse.org/bugs/show_bug.cgi?id=159214 - variation", "-\tthis.runNegativeTest(", "+\tthis.runConformTest(", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\"\tX<? extends Object> x;\\n\" + ", "-\t\t\"\t  ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Bound mismatch: The type ? extends Object is not a valid substitute for the bounded parameter <T extends Number> of the type X<T>\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51d824213619be512fda929555b2774c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 1414, "methodNumberAfterChange": 1414, "signatureBeforeChange": " public void test1380()", "signatureAfterChange": " public void test1380()", "diff": ["-\tthis.runNegativeTest(", "+\tthis.runConformTest(", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\tf();\\n\" + ", "-\t\t\t\"\t^\\n\" + ", "-\t\t\t\"Bound mismatch: The generic method f() of type X is not applicable for the arguments (). The inferred type Enum<Enum<E>> is not a valid substitute for the bounded parameter <E extends Enum<E>>\\n\" + ", "-\t\t\t\"----------\\n\");", "+\t\t\t\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "655993f8c25df8dd73f3930349cc7ea7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6de9512852d6a313c2efeeb72386871ba5a15d81", "commitAfterChange": "bdf1aa008887ee645c5354918f10478a9dc27f84", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": "\t\t\t\t  \tpublic void test091()", "signatureAfterChange": "\t\t\t\t  \tpublic void test091()", "diff": ["-\t\tthis.runNegativeTest(", "+\t\tthis.runConformTest(", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\"\tvoid foo(X<String>[] xs) {\\n\" + ", "-\t\t\"\t         ^\\n\" + ", "-\t\t\"An array of parameterized type X<String> is an invalid type\\n\" + ", "-\t\t\"----------\\n\");\t\t", "+\t\t\t\"\");\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "751e7cd5b14dfe89e271fe9e5ea3ed3a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c67ad5667d81e7ca8719e3b0faf6c7f2b84f03ce", "commitAfterChange": "55a2e1357c3327be6468ccea0fa1bd5884ed35ad", "methodNumberBeforeChange": 682, "methodNumberAfterChange": 682, "signatureBeforeChange": " public void test680()", "signatureAfterChange": " public void test680()", "diff": ["-\tthis.runNegativeTest(", "+\tthis.runConformTest(", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\"\tList<Store<K, ?, ? extends Key<K, ?, ?, ?>, ? extends State<?>>> stores;\\n\" + ", "-\t\t\"\t                 ^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Bound mismatch: The type ? extends Key<K,?,?,?> is not a valid substitute for the bounded parameter <C extends Key<A,B,C,D>> of the type Store<A,B,C,D>\\n\" + ", "-\t\t\"----------\\n\");", "-}", "+\t\t\"\");", "+}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82cd1715cd9d0803f7c52cfc7e2a62b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "332f2b4bbc61519d48f9e1634468f589fe6ec357", "commitAfterChange": "1dac44e6f5251febeac5322fb143c153ef780c6a", "methodNumberBeforeChange": 637, "methodNumberAfterChange": 637, "signatureBeforeChange": " \tpublic void test633()", "signatureAfterChange": " \tpublic void test633()", "diff": ["-\t    this.runNegativeTest(", "+\t    this.runConformTest(", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tlhs.add(rhs.get(0)); \\n\" + ", "-\t\t\t\"\t    ^^^\\n\" + ", "-\t\t\t\"The method add(capture-of ? super Object[]) in the type Vector<capture-of ? super Object[]> is not applicable for the arguments (Object[])\\n\" + ", "-\t\t\t\"----------\\n\");", "+\t\t\t\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8893eb7253e83cc90a49ce72489abd63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 1353, "methodNumberAfterChange": 1353, "signatureBeforeChange": " public void test1319()", "signatureAfterChange": " public void test1319()", "diff": ["-\tthis.runNegativeTest(", "+\tthis.runConformTest(", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 8)\\n\" +", "-\t\t\t\"\tnew X().foo2(\\\"HI\\\", null, null, null);\\n\" +", "-\t\t\t\"\t        ^^^^\\n\" +", "-\t\t\t\"Bound mismatch: The generic method foo2(String, U, T, W) of type X is not applicable for the arguments (String, null, null, null). The inferred type List<List<W>> is not a valid substitute for the bounded parameter <T extends List<U>>\\n\" +", "-\t\t\t\"----------\\n\");", "+\t\t\t\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99e198b46fc34564d8bf67bbface44c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 1354, "methodNumberAfterChange": 1354, "signatureBeforeChange": " public void test1320()", "signatureAfterChange": " public void test1320()", "diff": ["-\tthis.runNegativeTest(", "+\tthis.runConformTest(", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 8)\\n\" +", "-\t\t\t\"\tnew X().foo2(\\\"HI\\\", null, null, null);\\n\" +", "-\t\t\t\"\t        ^^^^\\n\" +", "-\t\t\t\"Bound mismatch: The generic method foo2(String, U, T, W) of type X is not applicable for the arguments (String, null, null, null). The inferred type List<List<W>> is not a valid substitute for the bounded parameter <T extends List<U>>\\n\" +", "-\t\t\t\"----------\\n\");", "+\t\t\t\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3f17f9a10d68f0f0260da5f70c5ca2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c67ad5667d81e7ca8719e3b0faf6c7f2b84f03ce", "commitAfterChange": "55a2e1357c3327be6468ccea0fa1bd5884ed35ad", "methodNumberBeforeChange": 681, "methodNumberAfterChange": 681, "signatureBeforeChange": " public void test679()", "signatureAfterChange": " public void test679()", "diff": ["-\tthis.runNegativeTest(", "+\tthis.runConformTest(", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\"\tStore<K, ? extends Key<K, ?>> store;\\n\" + ", "-\t\t\"\t         ^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Bound mismatch: The type ? extends Key<K,?> is not a valid substitute for the bounded parameter <B extends Key<A,B>> of the type Store<A,B>\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6a29f2f6e023dae3be6631df8a93926", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 1355, "methodNumberAfterChange": 1355, "signatureBeforeChange": " public void test1321()", "signatureAfterChange": " public void test1321()", "diff": ["-\tthis.runNegativeTest(", "+\tthis.runConformTest(", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 8)\\n\" +", "-\t\t\t\"\tnew X().foo2(\\\"HI\\\", null, null, null);\\n\" +", "-\t\t\t\"\t        ^^^^\\n\" +", "-\t\t\t\"Bound mismatch: The generic method foo2(String, U, T, W) of type X is not applicable for the arguments (String, null, null, null). The inferred type List<List<T>> is not a valid substitute for the bounded parameter <W extends List<U>>\\n\" +", "-\t\t\t\"----------\\n\");", "+\t\t\t\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bec3057a7575bfa21992add5936b9aec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c67ad5667d81e7ca8719e3b0faf6c7f2b84f03ce", "commitAfterChange": "55a2e1357c3327be6468ccea0fa1bd5884ed35ad", "methodNumberBeforeChange": 683, "methodNumberAfterChange": 683, "signatureBeforeChange": " public void test681()", "signatureAfterChange": " public void test681()", "diff": ["-\tthis.runNegativeTest(", "+\tthis.runConformTest(", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\"\tStore<E, ? extends Key<E, ?>> store2;\\n\" + ", "-\t\t\"\t         ^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Bound mismatch: The type ? extends Key<E,?> is not a valid substitute for the bounded parameter <K extends Key<E,K>> of the type Store<E,K>\\n\" + ", "-\t\t\"----------\\n\");", "-}", "+\t\t\"\");", "+}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cee7e3675a23a30bf0fca3e68c07e9d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "cb1176594034666f0f8d852dc8fc01987d54d11b", "commitAfterChange": "0096213f4b70c6196247b76dbfbdc7d2b6019590", "methodNumberBeforeChange": 762, "methodNumberAfterChange": 762, "signatureBeforeChange": " public void test756()", "signatureAfterChange": " public void test756()", "diff": ["-\tthis.runNegativeTest(", "+\tthis.runConformTest(", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\"\tX<?>.B[] b = new X<?>.B[1];\\r\\n\" + ", "-\t\t\"\t             ^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Cannot create a generic array of X<?>.B\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfd553b62d59f65cff1c07044181f34b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "a00b91e363390d5872f24709421a2a2b1249ea30", "commitAfterChange": "61bf91bb0112a7323235a8711e82564a6109221c", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void test027()", "signatureAfterChange": " \tpublic void test027()", "diff": ["-\t\tthis.runNegativeTest(", "+\t\tthis.runConformTest(", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\tclass Y<T> extends X<T> { void test(Object o) {} }\\r\\n\" + ", "-\t\t\t\"\t                               ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method test(Object) of type Y<T> has the same erasure as test(T) of type X<T> but does not override it\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t\t// no error unless you try to do a super send which then fails", "+\t\t\t\"\""]}], "num": 27956}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "857a33860387ad189a0f6715e1ab89d7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fb7ec6279928142d8996fd628fffab5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "65b4e15798189e35310112aac16988bcdf7eef0b", "commitAfterChange": "78b182da9e370f6f00f239fd2a2de8309bdf9aac", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": " \t \tprivate void disassemble(IInnerClassesAttribute innerClassesAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": " \t \tprivate void disassemble(IInnerClassesAttribute innerClassesAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["-\t\tfor (int i = 0; i < length - 1; i++) {", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tif (i != 0) {", "+\t\t\t\tbuffer.append(Messages.disassembler_comma);", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);\t\t\t\t", "+\t\t\t}", "-\t\t\tdecodeModifiersForInnerClasses(buffer, accessFlags);", "+\t\t\tdecodeModifiersForInnerClasses(buffer, accessFlags, true);", "-\t\t\t\t.append(Messages.disassembler_closeinnerclassentry) ", "-\t\t\t\t.append(Messages.disassembler_comma); ", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\t\t\t.append(Messages.disassembler_closeinnerclassentry);", "-\t\t// last entry", "-\t\tinnerClassesAttributeEntry = innerClassesAttributeEntries[length - 1];", "-\t\tinnerClassNameIndex = innerClassesAttributeEntry.getInnerClassNameIndex();", "-\t\touterClassNameIndex = innerClassesAttributeEntry.getOuterClassNameIndex();", "-\t\tinnerNameIndex = innerClassesAttributeEntry.getInnerNameIndex();", "-\t\taccessFlags = innerClassesAttributeEntry.getAccessFlags();", "-\t\tbuffer", "-\t\t\t.append(Messages.disassembler_openinnerclassentry) ", "-\t\t\t.append(Messages.disassembler_inner_class_info_name) ", "-\t\t\t.append(Messages.disassembler_constantpoolindex) ", "-\t\t\t.append(innerClassNameIndex);", "-\t\tif (innerClassNameIndex != 0) {", "-\t\t\tbuffer", "-\t\t\t\t.append(Messages.disassembler_space) ", "-\t\t\t\t.append(innerClassesAttributeEntry.getInnerClassName());", "-\t\t}", "-\t\tbuffer", "-\t\t\t.append(Messages.disassembler_comma) ", "-\t\t\t.append(Messages.disassembler_space) ", "-\t\t\t.append(Messages.disassembler_outer_class_info_name) ", "-\t\t\t.append(Messages.disassembler_constantpoolindex) ", "-\t\t\t.append(outerClassNameIndex);", "-\t\tif (outerClassNameIndex != 0) {", "-\t\t\tbuffer\t", "-\t\t\t\t.append(Messages.disassembler_space) ", "-\t\t\t\t.append(innerClassesAttributeEntry.getOuterClassName());", "-\t\t}", "-\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\tdumpTab(tabNumber, buffer);", "-\t\tbuffer.append(Messages.disassembler_space); ", "-\t\tbuffer", "-\t\t\t.append(Messages.disassembler_inner_name) ", "-\t\t\t.append(Messages.disassembler_constantpoolindex) ", "-\t\t\t.append(innerNameIndex);", "-\t\tif (innerNameIndex != 0) {", "-\t\t\tbuffer", "-\t\t\t\t.append(Messages.disassembler_space) ", "-\t\t\t\t.append(innerClassesAttributeEntry.getInnerName());", "-\t\t}", "-\t\tbuffer", "-\t\t\t.append(Messages.disassembler_comma) ", "-\t\t\t.append(Messages.disassembler_space) ", "-\t\t\t.append(Messages.disassembler_inner_accessflags) ", "-\t\t\t.append(accessFlags)", "-\t\t\t.append(Messages.disassembler_space); ", "-\t\tdecodeModifiersForInnerClasses(buffer, accessFlags);", "-\t\tbuffer.append(Messages.disassembler_closeinnerclassentry); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6b8d1c3ba8cb64f6736be1e7ead53cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "65b4e15798189e35310112aac16988bcdf7eef0b", "commitAfterChange": "78b182da9e370f6f00f239fd2a2de8309bdf9aac", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": " \t \tprivate void disassemble(ICodeAttribute codeAttribute, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": " \t \tprivate void disassemble(ICodeAttribute codeAttribute, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["-\t\t\tfor (int i = 0; i < exceptionTableLength - 1; i++) {", "+\t\t\tfor (int i = 0; i < exceptionTableLength; i++) {", "+\t\t\t\tif (i != 0) {", "+\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForExceptionAttribute + 1);", "+\t\t\t\t}", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForExceptionAttribute + 1);", "-\t\t\tIExceptionTableEntry exceptionTableEntry = exceptionTableEntries[exceptionTableLength - 1];", "-\t\t\tchar[] catchType;", "-\t\t\tif (exceptionTableEntry.getCatchTypeIndex() != 0) {", "-\t\t\t\tcatchType = exceptionTableEntry.getCatchType();", "-\t\t\t\tCharOperation.replace(catchType, '/', '.');", "-\t\t\t\tcatchType = returnClassName(catchType, '.', mode);", "-\t\t\t} else {", "-\t\t\t\tcatchType = ANY_EXCEPTION;", "-\t\t\t}", "-\t\t\tbuffer.append(Messages.bind(Messages.classfileformat_exceptiontableentry,", "-\t\t\t\tnew String[] {", "-\t\t\t\t\tInteger.toString(exceptionTableEntry.getStartPC()),", "-\t\t\t\t\tInteger.toString(exceptionTableEntry.getEndPC()),", "-\t\t\t\t\tInteger.toString(exceptionTableEntry.getHandlerPC()),", "-\t\t\t\t\tnew String(catchType)", "-\t\t\t\t}));", "-\t\t\tfor (int i = 0; i < lineAttributeLength - 1; i++) {", "+\t\t\tfor (int i = 0; i < lineAttributeLength; i++) {", "+\t\t\t\tif (i != 0) {", "+\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForLineAttribute + 1);", "+\t\t\t\t}", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForLineAttribute + 1);", "-\t\t\tbuffer.append(Messages.bind(Messages.classfileformat_linenumbertableentry,", "-\t\t\t\tnew String[] {", "-\t\t\t\t\tInteger.toString(lineattributesEntries[lineAttributeLength - 1][0]),", "-\t\t\t\t\tInteger.toString(lineattributesEntries[lineAttributeLength - 1][1])", "-\t\t\t\t}));", "-\t\t\tfor (int i = 0; i < localVariableAttributeLength - 1; i++) {", "+\t\t\tfor (int i = 0; i < localVariableAttributeLength; i++) {", "+\t\t\t\tif (i != 0) {", "+\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForLocalVariableAttribute + 1);", "+\t\t\t\t}", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForLocalVariableAttribute + 1);", "-\t\t\tILocalVariableTableEntry localVariableTableEntry = localVariableTableEntries[localVariableAttributeLength - 1];", "-\t\t\tint index= localVariableTableEntry.getIndex();", "-\t\t\tint startPC = localVariableTableEntry.getStartPC();", "-\t\t\tint length  = localVariableTableEntry.getLength();", "-\t\t\tfinal char[] typeName = Signature.toCharArray(localVariableTableEntry.getDescriptor());", "-\t\t\tCharOperation.replace(typeName, '/', '.');", "-\t\t\tbuffer.append(Messages.bind(Messages.classfileformat_localvariabletableentry,", "-\t\t\t\tnew String[] {", "-\t\t\t\t\tInteger.toString(startPC),", "-\t\t\t\t\tInteger.toString(startPC + length),", "-\t\t\t\t\tnew String(localVariableTableEntry.getName()),", "-\t\t\t\t\tInteger.toString(index),", "-\t\t\t\t\tnew String(returnClassName(typeName, '.', mode))", "-\t\t\t\t}));", "-\t\t\tfor (int i = 0; i < localVariableTypeTableLength - 1; i++) {", "+\t\t\tfor (int i = 0; i < localVariableTypeTableLength; i++) {", "+\t\t\t\tif (i != 0) {", "+\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForLocalVariableAttribute + 1);", "+\t\t\t\t}", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumberForLocalVariableAttribute + 1);", "-\t\t\tILocalVariableTypeTableEntry localVariableTypeTableEntry = localVariableTypeTableEntries[localVariableTypeTableLength - 1];", "-\t\t\tint index= localVariableTypeTableEntry.getIndex();", "-\t\t\tint startPC = localVariableTypeTableEntry.getStartPC();", "-\t\t\tint length  = localVariableTypeTableEntry.getLength();", "-\t\t\tfinal char[] typeName = Signature.toCharArray(localVariableTypeTableEntry.getSignature());", "-\t\t\tCharOperation.replace(typeName, '/', '.');", "-\t\t\tbuffer.append(Messages.bind(Messages.classfileformat_localvariabletableentry,", "-\t\t\t\tnew String[] {", "-\t\t\t\t\tInteger.toString(startPC),", "-\t\t\t\t\tInteger.toString(startPC + length),", "-\t\t\t\t\tnew String(localVariableTypeTableEntry.getName()),", "-\t\t\t\t\tInteger.toString(index),", "-\t\t\t\t\tnew String(returnClassName(typeName, '.', mode))", "-\t\t\t\t}));"]}], "num": 2590}
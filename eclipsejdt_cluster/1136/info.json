{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51c7b45043666f80f55f2e32b37f03aa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7259ace44e5efbe227cd39cd1751889b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModifyingResourceTests.java", "commitBeforeChange": "12bbec9151d1b613c62f44289e9e604128f21de0", "commitAfterChange": "cfad6931331ca38f2461ad24853dd9b6dfa652de", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": " protected IClasspathEntry[] createClasspath(String[] foldersAndPatterns, boolean hasInclusionPatterns, boolean hasExclusionPatterns)", "signatureAfterChange": " protected IClasspathEntry[] createClasspath(String projectName, String[] foldersAndPatterns)", "diff": ["-\treturn createClasspath(null, foldersAndPatterns, hasInclusionPatterns, hasExclusionPatterns);", "-}", "+ */", "+protected IClasspathEntry[] createClasspath(String projectName, String[] foldersAndPatterns) {", "+\tint length = foldersAndPatterns.length;", "+\tIClasspathEntry[] classpath = new IClasspathEntry[length/2];", "+\tfor (int i = 0; i < length; i+=2) {", "+\t\tString src = foldersAndPatterns[i];", "+\t\tString patterns = foldersAndPatterns[i+1];", "+\t\tStringTokenizer tokenizer = new StringTokenizer(patterns, \"|\");", "+\t\tint ruleCount =  tokenizer.countTokens();", "+\t\tIAccessRule[] accessRules = new IAccessRule[ruleCount];", "+\t\tint nonAccessibleRules = 0;", "+\t\tfor (int j = 0; j < ruleCount; j++) {", "+\t\t\tString rule = tokenizer.nextToken();", "+\t\t\tint kind;", "+\t\t\tif (rule.charAt(0) == '+') {", "+\t\t\t\tkind = IAccessRule.K_ACCESSIBLE;", "+\t\t\t} else {", "+\t\t\t\tkind = IAccessRule.K_NON_ACCESSIBLE;", "+\t\t\t\tnonAccessibleRules++;", "+\t\t\t}", "+\t\t\taccessRules[j] = JavaCore.newAccessRule(new Path(rule.substring(1)), kind);", "+\t\t}", "+", "+\t\tIPath folderPath = new Path(src);", "+\t\t\tclasspath[i/2] = JavaCore.newProjectEntry(folderPath, accessRules, true/*combine access restrictions*/, new IClasspathAttribute[0], false); ", "+\t\t\tIPath[] accessibleFiles = new IPath[ruleCount-nonAccessibleRules];", "+\t\t\tint accessibleIndex = 0;", "+\t\t\tIPath[] nonAccessibleFiles = new IPath[nonAccessibleRules];", "+\t\t\tint nonAccessibleIndex = 0;", "+\t\t\tfor (int j = 0; j < ruleCount; j++) {", "+\t\t\t\tIAccessRule accessRule = accessRules[i];", "+\t\t\t\tif (accessRule.getKind() == IAccessRule.K_ACCESSIBLE) ", "+\t\t\t\t\taccessibleFiles[accessibleIndex++] = accessRule.getPattern();", "+\t\t\t\telse", "+\t\t\t\t\tnonAccessibleFiles[nonAccessibleIndex++] = accessRule.getPattern();", "+\t\t\t}", "+\t\t\tclasspath[i/2] = JavaCore.newSourceEntry(folderPath, accessibleFiles, nonAccessibleFiles, null); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98ee9e17271947f4b604f0f0d3925810", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModifyingResourceTests.java", "commitBeforeChange": "cda1b15548fe8a60a0e333685b77168207ce463b", "commitAfterChange": "3e5cc2c42f4e1b7d5f4da0ff6228df838f56d815", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " protected IClasspathEntry[] createClasspath(String projectName, String[] foldersAndPatterns)", "signatureAfterChange": " protected IClasspathEntry[] createClasspath(String projectName, String[] foldersAndPatterns)", "diff": ["-\t\tStringTokenizer tokenizer = new StringTokenizer(patterns, \"|\");", "-\t\tint ruleCount =  tokenizer.countTokens();", "-\t\tIAccessRule[] accessRules = new IAccessRule[ruleCount];", "-\t\tint nonAccessibleRules = 0;", "-\t\tfor (int j = 0; j < ruleCount; j++) {", "-\t\t\tString rule = tokenizer.nextToken();", "-\t\t\tint kind;", "-\t\t\tif (rule.charAt(0) == '+') {", "-\t\t\t\tkind = IAccessRule.K_ACCESSIBLE;", "-\t\t\t} else {", "-\t\t\t\tkind = IAccessRule.K_NON_ACCESSIBLE;", "-\t\t\t\tnonAccessibleRules++;", "-\t\t\t}", "-\t\t\taccessRules[j] = JavaCore.newAccessRule(new Path(rule.substring(1)), kind);", "-\t\t}", "-", "-\t\tIPath folderPath = new Path(src);", "-\t\tif (projectName != null && folderPath.segmentCount() == 1 && !projectName.equals(folderPath.lastSegment())) {", "-\t\t\tclasspath[i/2] = JavaCore.newProjectEntry(folderPath, accessRules, true/*combine access restrictions*/, new IClasspathAttribute[0], false); ", "-\t\t} else {", "-\t\t\tIPath[] accessibleFiles = new IPath[ruleCount-nonAccessibleRules];", "-\t\t\tint accessibleIndex = 0;", "-\t\t\tIPath[] nonAccessibleFiles = new IPath[nonAccessibleRules];", "-\t\t\tint nonAccessibleIndex = 0;", "-\t\t\tfor (int j = 0; j < ruleCount; j++) {", "-\t\t\t\tIAccessRule accessRule = accessRules[i];", "-\t\t\t\tif (accessRule.getKind() == IAccessRule.K_ACCESSIBLE) ", "-\t\t\t\t\taccessibleFiles[accessibleIndex++] = accessRule.getPattern();", "-\t\t\t\telse", "-\t\t\t\t\tnonAccessibleFiles[nonAccessibleIndex++] = accessRule.getPattern();", "-\t\t\t}", "-\t\t\tclasspath[i/2] = JavaCore.newSourceEntry(folderPath, accessibleFiles, nonAccessibleFiles, null); ", "-\t\t}", "+\t\tclasspath[i/2] = createSourceEntry(projectName, src, patterns);"]}], "num": 1136}
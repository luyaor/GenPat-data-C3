{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b9e15a15def6f3720228e6f500a9ccd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9077c714ef34c6375b87e349e226844e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "bce0dbd9dd489d3038652b337b4b76bb1f2246a4", "commitAfterChange": "f04ae71cc7d18b0e34f184a3124e4f7f58dafcf3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": "  public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-\t\t\tFieldBinding codegenField = (((FieldBinding)this.binding).original());", "+\t\t\tFieldBinding fieldBinding = (FieldBinding)this.binding;", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=185682", "+\t\t\t// check if postIncrement is the only usage of a private field", "+\t\t\treportOnlyUselesslyReadPrivateField(currentScope, fieldBinding, valueRequired);", "+\t\t\tFieldBinding codegenField = fieldBinding.original();", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=185682", "+\t\t\t// check if postIncrement is the only usage of this local", "+\t\t\tReference.reportOnlyUselesslyReadLocal(currentScope, localBinding, valueRequired);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd5be69f24836b69909c2729c325eb36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\tpublic FlowInfo analyseCode(", "+public FlowInfo analyseCode(", "-", "-\t\treturn right", "-\t\t\t.analyseCode(", "-\t\t\t\tcurrentScope,", "-\t\t\t\tflowContext,", "-\t\t\t\tleft.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits())", "-\t\t\t.unconditionalInits();", "-\t}", "+\tleft.checkNPE(currentScope, flowContext, flowInfo, false /* skip String */);", "+\tflowInfo = left.analyseCode(currentScope, flowContext, flowInfo).", "+\t\tunconditionalInits();", "+\tright.checkNPE(currentScope, flowContext, flowInfo, false /* skip String */);", "+\treturn right.analyseCode(currentScope, flowContext, flowInfo).", "+\t\tunconditionalInits();", "+}"]}], "num": 55156}
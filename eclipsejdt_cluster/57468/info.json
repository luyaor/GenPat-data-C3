{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e612a18f3e189b53c44610e6d499948", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcdcc3f1d00730573658597d45213b55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LocalVariable.java", "commitBeforeChange": "18461e5d8d937f552ad2affe60f882ea5cf6986c", "commitAfterChange": "887e85023301ae4623fbf853a36078cfd9120d7a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprivate Object getAnnotationMemberValue(MemberValuePair memberValuePair, Expression expression, JavaElement parentElement)", "signatureAfterChange": " \tprivate Object getAnnotationMemberValue(MemberValuePair memberValuePair, Expression expression, JavaElement parentElement)", "diff": ["+\t\t} else if (expression instanceof UnaryExpression) {\t\t\t//to deal with negative numerals (see bug - 248312)", "+\t\t\tUnaryExpression unaryExpression = (UnaryExpression) expression;", "+\t\t\tif ((unaryExpression.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT == OperatorIds.MINUS) {", "+\t\t\t\tif (unaryExpression.expression instanceof Literal) {", "+\t\t\t\t\tLiteral subExpression = (Literal) unaryExpression.expression;", "+\t\t\t\t\tsubExpression.computeConstant();", "+\t\t\t\t\treturn Util.getNegativeAnnotationMemberValue(memberValuePair, subExpression.constant);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tmemberValuePair.valueKind = IMemberValuePair.K_UNKNOWN;", "+\t\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2f08e2c01084188ddc86ec4ce557027", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "18461e5d8d937f552ad2affe60f882ea5cf6986c", "commitAfterChange": "887e85023301ae4623fbf853a36078cfd9120d7a", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " protected Object getMemberValue(org.eclipse.jdt.internal.core.MemberValuePair memberValuePair, Expression expression)", "signatureAfterChange": " protected Object getMemberValue(org.eclipse.jdt.internal.core.MemberValuePair memberValuePair, Expression expression)", "diff": ["+\t} else if (expression instanceof UnaryExpression) {\t\t\t// to deal with negative numerals (see bug - 248312)", "+\t\tUnaryExpression unaryExpression = (UnaryExpression) expression;", "+\t\tif ((unaryExpression.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT == OperatorIds.MINUS) {", "+\t\t\tif (unaryExpression.expression instanceof Literal) {", "+\t\t\t\tLiteral subExpression = (Literal) unaryExpression.expression;", "+\t\t\t\tsubExpression.computeConstant();", "+\t\t\t\treturn Util.getNegativeAnnotationMemberValue(memberValuePair, subExpression.constant);", "+\t\t\t}", "+\t\t}", "+\t\tmemberValuePair.valueKind = IMemberValuePair.K_UNKNOWN;", "+\t\treturn null;", "+\t\tmemberValuePair.valueKind = IMemberValuePair.K_UNKNOWN;"]}], "num": 57468}
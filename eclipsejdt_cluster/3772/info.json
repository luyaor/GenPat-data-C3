{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cce1574e12d01e229ec3581f9afa5a63", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "232f244a9a6cb570de9e4a2d7343c8b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "70416b46b1375461a92d89ffa1cb077778dc6e86", "commitAfterChange": "0c53505dd9d8f221929a96f99e04ff55bfc4fc05", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void reportMethodDeclaration( \t\tAbstractMethodDeclaration methodDeclaration, \t\tIJavaElement parent, \t\tint accuracy) \t\tthrows CoreException", "signatureAfterChange": " \tpublic void reportMethodDeclaration( \t\tAbstractMethodDeclaration methodDeclaration, \t\tIJavaElement parent, \t\tint accuracy) \t\tthrows CoreException", "diff": ["-\t */", "-\tpublic void reportMethodDeclaration(", "-\t\tAbstractMethodDeclaration methodDeclaration,", "-\t\tIJavaElement parent,", "-\t\tint accuracy)", "-\t\tthrows CoreException {", "-", "-\t\tIJavaElement enclosingElement;", "-\t\tif (parent instanceof IType) {", "-\t\t\t// create method handle", "-\t\t\tenclosingElement = this.createMethodHandle(methodDeclaration, (IType)parent);", "-\t\t\tif (enclosingElement == null) return;", "-\t\t} else {", "-\t\t\tenclosingElement = parent;", "-\t\t}", "-", "-\t\t// compute source positions of the selector ", "-\t\tScanner scanner = parser.scanner;", "-\t\tint nameSourceStart = methodDeclaration.sourceStart;", "-\t\tscanner.setSource(", "-\t\t\tthis.currentMatchingOpenable.getSource());", "-\t\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);", "-\t\ttry {", "-\t\t\tscanner.getNextToken();", "-\t\t} catch (InvalidInputException e) {", "-\t\t}", "-\t\tint nameSourceEnd = scanner.currentPosition - 1;", "-", "-\t\t// accept method declaration", "-\t\tthis.report(nameSourceStart, nameSourceEnd, enclosingElement, accuracy);", "-\t}", "+\t */", "+\tpublic void reportMethodDeclaration(", "+\t\tAbstractMethodDeclaration methodDeclaration,", "+\t\tIJavaElement parent,", "+\t\tint accuracy)", "+\t\tthrows CoreException {", "+", "+\t\tIJavaElement enclosingElement;", "+\t\tif (parent instanceof IType) {", "+\t\t\t// create method handle", "+\t\t\tenclosingElement = this.createMethodHandle(methodDeclaration, (IType)parent);", "+\t\t\tif (enclosingElement == null) return;", "+\t\t} else {", "+\t\t\tenclosingElement = parent;", "+\t\t}", "+", "+\t\t// compute source positions of the selector ", "+\t\tScanner scanner = parser.scanner;", "+\t\tint nameSourceStart = methodDeclaration.sourceStart;", "+\t\tscanner.setSource(", "+\t\t\tthis.currentPotentialMatch.getContents());", "+\t\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);", "+\t\ttry {", "+\t\t\tscanner.getNextToken();", "+\t\t} catch (InvalidInputException e) {", "+\t\t}", "+\t\tint nameSourceEnd = scanner.currentPosition - 1;", "+", "+\t\t// accept method declaration", "+\t\tthis.report(nameSourceStart, nameSourceEnd, enclosingElement, accuracy);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "676a5761a23e3e9805223a6714324276", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void reportMethodDeclaration( \t\tAbstractMethodDeclaration methodDeclaration, \t\tIJavaElement parent, \t\tint accuracy) \t\tthrows CoreException", "signatureAfterChange": " public void reportMethodDeclaration(AbstractMethodDeclaration methodDeclaration, IJavaElement parent, int accuracy) throws CoreException", "diff": ["-\t */", "-\tpublic void reportMethodDeclaration(", "-\t\tAbstractMethodDeclaration methodDeclaration,", "-\t\tIJavaElement parent,", "-\t\tint accuracy)", "-\t\tthrows CoreException {", "-", "-\t\tIJavaElement enclosingElement;", "-\t\tif (parent instanceof IType) {", "-\t\t\t// create method handle", "-\t\t\tenclosingElement = this.createMethodHandle(methodDeclaration, (IType)parent);", "-\t\t\tif (enclosingElement == null) return;", "-\t\t} else {", "-\t\t\tenclosingElement = parent;", "-\t\t}", "-", "-\t\t// compute source positions of the selector ", "-\t\tScanner scanner = parser.scanner;", "-\t\tint nameSourceStart = methodDeclaration.sourceStart;", "-\t\tscanner.setSource(", "-\t\t\tthis.currentPotentialMatch.getContents());", "-\t\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);", "-\t\t\tscanner.getNextToken();", "-\t\tint nameSourceEnd = scanner.currentPosition - 1;", "-", "-\t\t// accept method declaration", "-\t\tthis.report(nameSourceStart, nameSourceEnd, enclosingElement, accuracy);", "-\t}", "+ */", "+public void reportMethodDeclaration(AbstractMethodDeclaration methodDeclaration, IJavaElement parent, int accuracy) throws CoreException {", "+\tIJavaElement enclosingElement;", "+\tif (parent instanceof IType) {", "+\t\t// create method handle", "+\t\tenclosingElement = createMethodHandle(methodDeclaration, (IType)parent);", "+\t\tif (enclosingElement == null) return;", "+\t} else {", "+\t\tenclosingElement = parent;", "+\t}", "+\t// compute source positions of the selector ", "+\tScanner scanner = parser.scanner;", "+\tint nameSourceStart = methodDeclaration.sourceStart;", "+\tscanner.setSource(this.currentPotentialMatch.getContents());", "+\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);", "+\ttry {", "+\t\tscanner.getNextToken();", "+\t} catch (InvalidInputException e) {", "+\tint nameSourceEnd = scanner.currentPosition - 1;", "+\t// accept method declaration", "+\treport(nameSourceStart, nameSourceEnd, enclosingElement, accuracy);", "+}"]}], "num": 3772}
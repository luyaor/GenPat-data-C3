{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ddc32dcfe52a5d45766c248aa8cc056", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "797cd4e573f206f45c7748b92aa57383", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "c539ab4170e4fe0d8578cc8fb0121c9a797f5894", "commitAfterChange": "44363e0012bf09a8a44565479ae5740426ed378a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+        this.depth = 0;", "-        ", "-        if (someMethod != null && someMethod.isValidBinding()) {", "+        int someMethodDepth = this.depth, anotherMethodDepth = 0;", "+    \tif (someMethod != null && someMethod.isValidBinding()) {", "+        \t\tthis.depth = 0;", "+        \t\tanotherMethodDepth = this.depth;", "+        \t\tthis.depth = 0;", "-", "-        this.binding = someMethod != null && someMethod.isValidBinding() ? someMethod : ", "-        \t\t\t\t\t\t\t\t\t\t\tanotherMethod != null && anotherMethod.isValidBinding() ? anotherMethod : null;", "+        ", "+        if (someMethod != null && someMethod.isValidBinding()) {", "+        \tthis.binding = someMethod;", "+        \tthis.bits &= ~ASTNode.DepthMASK;", "+        \tif (someMethodDepth > 0) {", "+        \t\tthis.bits |= (someMethodDepth & 0xFF) << ASTNode.DepthSHIFT;", "+        \t}", "+        } else if (anotherMethod != null && anotherMethod.isValidBinding()) {", "+        \tthis.binding = anotherMethod;", "+        \tthis.bits &= ~ASTNode.DepthMASK;", "+        \tif (anotherMethodDepth > 0) {", "+        \t\tthis.bits |= (anotherMethodDepth & 0xFF) << ASTNode.DepthSHIFT;", "+        \t}", "+        } else {", "+        \tthis.binding = null;", "+        \tthis.bits &= ~ASTNode.DepthMASK;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b74031bbd4bb55725faf8ef9c11af2e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "09d58a6e319cfeec520d29fd7c2c24967ab4e499", "commitAfterChange": "3f9786eb97e62b9a5f765764dcc08a631a4e6afe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tfinal char[] selector = this.method.token;", "-\t\t\tscope.problemReporter().errorNoMethodFor(this.lhs, lhsType, selector, descriptorParameters);", "+\t\t\tscope.problemReporter().errorNoMethodFor(this.lhs, lhsType, this.selector, descriptorParameters);", "-        MethodBinding someMethod = isMethodReference ? scope.getMethod(this.receiverType, selector, descriptorParameters, this) :", "+        MethodBinding someMethod = isMethodReference ? scope.getMethod(this.receiverType, this.selector, descriptorParameters, this) :", "-        \t\tanotherMethod = scope.getMethod(typeToSearch, selector, parameters, this);", "+        \t\tanotherMethod = scope.getMethod(typeToSearch, this.selector, parameters, this);", "-        this.method.binding = this.binding = someMethod != null && someMethod.isValidBinding() ? someMethod : ", "+        this.binding = someMethod != null && someMethod.isValidBinding() ? someMethod : ", "-        \tchar [] visibleName = isConstructorReference() ? this.receiverType.sourceName() : selector;", "+        \tchar [] visibleName = isConstructorReference() ? this.receiverType.sourceName() : this.selector;", "-    \t\t\tthis.method.binding = this.binding = null;", "+    \t\t\tthis.binding = null;"]}], "num": 57640}
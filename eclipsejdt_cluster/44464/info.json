{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ae9c8c6352a90d8e0fa124bf64e047a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6049061e900459106a510eff577688c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "  public TypeBinding convertEliminatingTypeVariables(TypeBinding originalType, ReferenceBinding genericType, int rank, Set eliminatedVariables)", "signatureAfterChange": " public ReferenceBinding[] convertToRawTypes(ReferenceBinding[] originalTypes, boolean forceErasure, boolean forceRawEnclosingType)", "diff": ["-public TypeBinding convertEliminatingTypeVariables(TypeBinding originalType, ReferenceBinding genericType, int rank, Set eliminatedVariables) {", "-\tif ((originalType.tagBits & TagBits.HasTypeVariable) != 0) {", "-\t\tswitch (originalType.kind()) {", "-\t\t\tcase Binding.ARRAY_TYPE :", "-\t\t\t\tArrayBinding originalArrayType = (ArrayBinding) originalType;", "-\t\t\t\tTypeBinding originalLeafComponentType = originalArrayType.leafComponentType;", "-\t\t\t\tTypeBinding substitute = convertEliminatingTypeVariables(originalLeafComponentType, genericType, rank, eliminatedVariables); // substitute could itself be array type", "-\t\t\t\tif (substitute != originalLeafComponentType) {", "-\t\t\t\t\treturn createArrayType(substitute.leafComponentType(), substitute.dimensions() + originalArrayType.dimensions());", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.PARAMETERIZED_TYPE :", "-\t\t\t\tParameterizedTypeBinding paramType = (ParameterizedTypeBinding) originalType;", "-\t\t\t\tReferenceBinding originalEnclosing = paramType.enclosingType();", "-\t\t\t\tReferenceBinding substitutedEnclosing = originalEnclosing;", "-\t\t\t\tif (originalEnclosing != null) {", "-\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) convertEliminatingTypeVariables(originalEnclosing, genericType, rank, eliminatedVariables);", "-\t\t\t\t}", "-\t\t\t\tTypeBinding[] originalArguments = paramType.arguments;", "-\t\t\t\tTypeBinding[] substitutedArguments = originalArguments;", "-\t\t\t\tfor (int i = 0, length = originalArguments == null ? 0 : originalArguments.length; i < length; i++) {", "-\t\t\t\t\tTypeBinding originalArgument = originalArguments[i];", "-\t\t\t\t\tTypeBinding substitutedArgument = convertEliminatingTypeVariables(originalArgument, paramType.genericType(), i, eliminatedVariables);", "-\t\t\t\t\tif (substitutedArgument != originalArgument) {", "-\t\t\t\t\t\tif (substitutedArguments == originalArguments) {", "-\t\t\t\t\t\t\tSystem.arraycopy(originalArguments, 0, substitutedArguments = new TypeBinding[length], 0, i);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tsubstitutedArguments[i] = substitutedArgument;", "-\t\t\t\t\t} else \tif (substitutedArguments != originalArguments) {", "-\t\t\t\t\t\tsubstitutedArguments[i] = originalArgument;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (originalEnclosing != substitutedEnclosing || originalArguments != substitutedArguments) {", "-\t\t\t\t\treturn createParameterizedType(paramType.genericType(), substitutedArguments, substitutedEnclosing);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.TYPE_PARAMETER :", "-\t\t\t\tif (eliminatedVariables != null && eliminatedVariables.contains(originalType)) {", "-\t\t\t\t\treturn createWildcard(genericType, rank, null, null, Wildcard.UNBOUND);", "-\t\t\t\t}", "-\t\t\t\tTypeVariableBinding variable = (TypeVariableBinding) originalType;", "-\t\t\t\tTypeBinding originalUpperBound = variable.upperBound();", "-\t\t\t\tif (eliminatedVariables == null) {", "-\t\t\t\t\teliminatedVariables = new HashSet(2);", "-\t\t\t\t}", "-\t\t\t\teliminatedVariables.add(variable);", "-\t\t\t\tTypeBinding substitutedUpperBound = convertEliminatingTypeVariables(originalUpperBound, genericType, rank, eliminatedVariables);", "-\t\t\t\teliminatedVariables.remove(variable);", "-\t\t\t\treturn createWildcard(genericType, rank, substitutedUpperBound, null, Wildcard.EXTENDS);", "-\t\t\tcase Binding.RAW_TYPE :", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.GENERIC_TYPE :", "-\t\t\t\tReferenceBinding currentType = (ReferenceBinding) originalType;", "-\t\t\t\toriginalEnclosing = currentType.enclosingType();", "-\t\t\t\tsubstitutedEnclosing = originalEnclosing;", "-\t\t\t\tif (originalEnclosing != null) {", "-\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) convertEliminatingTypeVariables(originalEnclosing, genericType, rank, eliminatedVariables);", "-\t\t\t\t}", "-\t\t\t\toriginalArguments = currentType.typeVariables();", "-\t\t\t\tsubstitutedArguments = originalArguments;", "-\t\t\t\tfor (int i = 0, length = originalArguments == null ? 0 : originalArguments.length; i < length; i++) {", "-\t\t\t\t\tTypeBinding originalArgument = originalArguments[i];", "-\t\t\t\t\tTypeBinding substitutedArgument = convertEliminatingTypeVariables(originalArgument, currentType, i, eliminatedVariables);", "-\t\t\t\t\tif (substitutedArgument != originalArgument) {", "-\t\t\t\t\t\tif (substitutedArguments == originalArguments) {", "-\t\t\t\t\t\t\tSystem.arraycopy(originalArguments, 0, substitutedArguments = new TypeBinding[length], 0, i);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tsubstitutedArguments[i] = substitutedArgument;", "-\t\t\t\t\t} else \tif (substitutedArguments != originalArguments) {", "-\t\t\t\t\t\tsubstitutedArguments[i] = originalArgument;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (originalEnclosing != substitutedEnclosing || originalArguments != substitutedArguments) {", "-\t\t\t\t\treturn createParameterizedType(genericType, substitutedArguments, substitutedEnclosing);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.WILDCARD_TYPE :", "-\t\t\t\tWildcardBinding wildcard = (WildcardBinding) originalType;", "-\t\t\t\tTypeBinding originalBound = wildcard.bound;", "-\t\t\t\tTypeBinding substitutedBound = originalBound;", "-\t\t\t\tif (originalBound != null) {", "-\t\t\t\t\tsubstitutedBound = convertEliminatingTypeVariables(originalBound, genericType, rank, eliminatedVariables);", "-\t\t\t\t\tif (substitutedBound != originalBound) {", "-\t\t\t\t\t\treturn createWildcard(wildcard.genericType, wildcard.rank, substitutedBound, null, wildcard.boundKind);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.INTERSECTION_TYPE :", "-\t\t\t\tWildcardBinding intersection = (WildcardBinding) originalType;", "-\t\t\t\toriginalBound = intersection.bound;", "-\t\t\t\tsubstitutedBound = originalBound;", "-\t\t\t\tif (originalBound != null) {", "-\t\t\t\t\tsubstitutedBound = convertEliminatingTypeVariables(originalBound, genericType, rank, eliminatedVariables);", "-\t\t\t\t}", "-\t\t\t\tTypeBinding[] originalOtherBounds = intersection.otherBounds;", "-\t\t\t\tTypeBinding[] substitutedOtherBounds = originalOtherBounds;", "-\t\t\t\tfor (int i = 0, length = originalOtherBounds == null ? 0 : originalOtherBounds.length; i < length; i++) {", "-\t\t\t\t\tTypeBinding originalOtherBound = originalOtherBounds[i];", "-\t\t\t\t\tTypeBinding substitutedOtherBound = convertEliminatingTypeVariables(originalOtherBound, genericType, rank, eliminatedVariables);", "-\t\t\t\t\tif (substitutedOtherBound != originalOtherBound) {", "-\t\t\t\t\t\tif (substitutedOtherBounds == originalOtherBounds) {", "-\t\t\t\t\t\t\tSystem.arraycopy(originalOtherBounds, 0, substitutedOtherBounds = new TypeBinding[length], 0, i);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tsubstitutedOtherBounds[i] = substitutedOtherBound;", "-\t\t\t\t\t} else \tif (substitutedOtherBounds != originalOtherBounds) {", "-\t\t\t\t\t\tsubstitutedOtherBounds[i] = originalOtherBound;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (substitutedBound != originalBound || substitutedOtherBounds != originalOtherBounds) {", "-\t\t\t\t\treturn createWildcard(intersection.genericType, intersection.rank, substitutedBound, substitutedOtherBounds, intersection.boundKind);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t}", "-\treturn originalType;", "-}", "+ */", "+public ReferenceBinding[] convertToRawTypes(ReferenceBinding[] originalTypes, boolean forceErasure, boolean forceRawEnclosingType) {", "+\tif (originalTypes == null) return null;", "+    ReferenceBinding[] convertedTypes = originalTypes;", "+    for (int i = 0, length = originalTypes.length; i < length; i++) {", "+        ReferenceBinding originalType = originalTypes[i];", "+        ReferenceBinding convertedType = (ReferenceBinding) convertToRawType(forceErasure ? originalType.erasure() : originalType, forceRawEnclosingType);", "+        if (convertedType != originalType) {        ", "+            if (convertedTypes == originalTypes) {", "+                System.arraycopy(originalTypes, 0, convertedTypes = new ReferenceBinding[length], 0, i);", "+            }", "+            convertedTypes[i] = convertedType;", "+        } else if (convertedTypes != originalTypes) {", "+            convertedTypes[i] = originalType;", "+        }", "+    }", "+    return convertedTypes;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b56c6ee9d9df849fc5fe640460a9977", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "a64919c0c4ec66879cf77662550d459f0b5a8477", "commitAfterChange": "ec3141ffcff3411a0e4abbb098ed096a885f0d97", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic void configurePluginDebugOptions()", "signatureAfterChange": "  \tpublic static void unregisterDebugOptionsListener()", "diff": ["-\t */", "-\tpublic void configurePluginDebugOptions(){", "-\t\tif(JavaCore.getPlugin().isDebugging()){", "-\t\t\tString option = Platform.getDebugOption(BUFFER_MANAGER_DEBUG);", "-\t\t\tif(option != null) BufferManager.VERBOSE = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(BUILDER_DEBUG);", "-\t\t\tif(option != null) JavaBuilder.DEBUG = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(COMPILER_DEBUG);", "-\t\t\tif(option != null) Compiler.DEBUG = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(BUILDER_STATS_DEBUG);", "-\t\t\tif(option != null) JavaBuilder.SHOW_STATS = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(COMPLETION_DEBUG);", "-\t\t\tif(option != null) CompletionEngine.DEBUG = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(CP_RESOLVE_DEBUG);", "-\t\t\tif(option != null) JavaModelManager.CP_RESOLVE_VERBOSE = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(CP_RESOLVE_ADVANCED_DEBUG);", "-\t\t\tif(option != null) JavaModelManager.CP_RESOLVE_VERBOSE_ADVANCED = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(CP_RESOLVE_FAILURE_DEBUG);", "-\t\t\tif(option != null) JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(DELTA_DEBUG);", "-\t\t\tif(option != null) DeltaProcessor.DEBUG = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(DELTA_DEBUG_VERBOSE);", "-\t\t\tif(option != null) DeltaProcessor.VERBOSE = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(DOM_AST_DEBUG);", "-\t\t\tif(option != null) SourceRangeVerifier.DEBUG = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(DOM_AST_DEBUG_THROW);", "-\t\t\tif(option != null) {", "-\t\t\t\tSourceRangeVerifier.DEBUG_THROW = option.equalsIgnoreCase(TRUE) ;", "-\t\t\t", "-\t\t\toption = Platform.getDebugOption(DOM_REWRITE_DEBUG);", "-\t\t\tif(option != null) RewriteEventStore.DEBUG = option.equalsIgnoreCase(TRUE) ;", "-\t\t\t", "-\t\t\toption = Platform.getDebugOption(HIERARCHY_DEBUG);", "-\t\t\tif(option != null) TypeHierarchy.DEBUG = option.equalsIgnoreCase(TRUE) ;", "-\t\t\toption = Platform.getDebugOption(INDEX_MANAGER_DEBUG);", "-\t\t\tif(option != null) JobManager.VERBOSE = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(INDEX_MANAGER_ADVANCED_DEBUG);", "-\t\t\tif(option != null) IndexManager.DEBUG = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(JAVAMODEL_DEBUG);", "-\t\t\tif(option != null) JavaModelManager.VERBOSE = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(JAVAMODELCACHE_DEBUG);", "-\t\t\tif(option != null) JavaModelCache.VERBOSE = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(POST_ACTION_DEBUG);", "-\t\t\tif(option != null) JavaModelOperation.POST_ACTION_VERBOSE = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(RESOLUTION_DEBUG);", "-\t\t\tif(option != null) NameLookup.VERBOSE = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(SEARCH_DEBUG);", "-\t\t\tif(option != null) BasicSearchEngine.VERBOSE = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(SELECTION_DEBUG);", "-\t\t\tif(option != null) SelectionEngine.DEBUG = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(ZIP_ACCESS_DEBUG);", "-\t\t\tif(option != null) JavaModelManager.ZIP_ACCESS_VERBOSE = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(SOURCE_MAPPER_DEBUG_VERBOSE);", "-\t\t\tif(option != null) SourceMapper.VERBOSE = option.equalsIgnoreCase(TRUE) ;", "-", "-\t\t\toption = Platform.getDebugOption(FORMATTER_DEBUG);", "-\t\t\tif(option != null) DefaultCodeFormatter.DEBUG = option.equalsIgnoreCase(TRUE) ;", "-\t\t}", "-", "-\t\t// configure performance options", "-\t\tif(PerformanceStats.ENABLED) {", "-\t\t\tCompletionEngine.PERF = PerformanceStats.isEnabled(COMPLETION_PERF);", "-\t\t\tSelectionEngine.PERF = PerformanceStats.isEnabled(SELECTION_PERF);", "-\t\t\tDeltaProcessor.PERF = PerformanceStats.isEnabled(DELTA_LISTENER_PERF);", "-\t\t\tJavaModelManager.PERF_VARIABLE_INITIALIZER = PerformanceStats.isEnabled(VARIABLE_INITIALIZER_PERF);", "-\t\t\tJavaModelManager.PERF_CONTAINER_INITIALIZER = PerformanceStats.isEnabled(CONTAINER_INITIALIZER_PERF);", "-\t\t\tReconcileWorkingCopyOperation.PERF = PerformanceStats.isEnabled(RECONCILE_PERF);", "-\t\t}", "+\tpublic static void unregisterDebugOptionsListener() {", "+\t\t// unregister debug options listener", "+\t\tDEBUG_REGISTRATION.unregister();", "+\t\tDEBUG_REGISTRATION = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b187fe2cf1f05eb7e5a2cc848b804770", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "signatureAfterChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "diff": ["-\t\tif (originalType == null) return null;", "-\t\tswitch (originalType.kind()) {", "-", "-\t\t\tcase Binding.TYPE_PARAMETER:", "-\t\t\t\treturn substitution.substitute((TypeVariableBinding) originalType);", "-", "-\t\t\tcase Binding.PARAMETERIZED_TYPE:", "-\t\t\t\tParameterizedTypeBinding originalParameterizedType = (ParameterizedTypeBinding) originalType;", "-\t\t\t\tReferenceBinding originalEnclosing = originalType.enclosingType();", "-\t\t\t\tReferenceBinding substitutedEnclosing = originalEnclosing;", "-\t\t\t\tif (originalEnclosing != null) {", "-\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) substitute(substitution, originalEnclosing);", "-\t\t\t\t\tif (isMemberTypeOfRaw(originalType, substitutedEnclosing))", "-\t\t\t\t\t\treturn originalParameterizedType.environment.createRawType(", "-\t\t\t\t\t\t\t\toriginalParameterizedType.genericType(), substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t}", "-\t\t\t\tTypeBinding[] originalArguments = originalParameterizedType.arguments;", "-\t\t\t\tTypeBinding[] substitutedArguments = originalArguments;", "-\t\t\t\tif (originalArguments != null) {", "-\t\t\t\t\tif (substitution.isRawSubstitution()) {", "-\t\t\t\t\t\treturn originalParameterizedType.environment.createRawType(originalParameterizedType.genericType(), substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t\t}", "-\t\t\t\t\tsubstitutedArguments = substitute(substitution, originalArguments);", "-\t\t\t\t}", "-\t\t\t\tif (substitutedArguments != originalArguments || substitutedEnclosing != originalEnclosing) { //$IDENTITY-COMPARISON$", "-\t\t\t\t\treturn originalParameterizedType.environment.createParameterizedType(", "-\t\t\t\t\t\t\toriginalParameterizedType.genericType(), substitutedArguments, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-", "-\t\t\tcase Binding.ARRAY_TYPE:", "-\t\t\t\tArrayBinding originalArrayType = (ArrayBinding) originalType;", "-\t\t\t\tTypeBinding originalLeafComponentType = originalArrayType.leafComponentType;", "-\t\t\t\tTypeBinding substitute = substitute(substitution, originalLeafComponentType); // substitute could itself be array type, TODO(Srikanth): need a test case.", "-\t\t\t\tif (substitute != originalLeafComponentType) { //$IDENTITY-COMPARISON$", "-\t\t\t\t\treturn originalArrayType.environment.createArrayType(substitute.leafComponentType(), substitute.dimensions() + originalType.dimensions(), originalType.getTypeAnnotations());", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-", "-\t\t\tcase Binding.WILDCARD_TYPE:", "-\t\t\tcase Binding.INTERSECTION_TYPE:", "-\t\t        WildcardBinding wildcard = (WildcardBinding) originalType;", "-\t\t        if (wildcard.boundKind != Wildcard.UNBOUND) {", "-\t\t\t        TypeBinding originalBound = wildcard.bound;", "-\t\t\t        TypeBinding substitutedBound = substitute(substitution, originalBound);", "-\t\t\t        TypeBinding[] originalOtherBounds = wildcard.otherBounds;", "-\t\t\t        TypeBinding[] substitutedOtherBounds = substitute(substitution, originalOtherBounds);", "-\t\t\t        if (substitutedBound != originalBound || originalOtherBounds != substitutedOtherBounds) { //$IDENTITY-COMPARISON$", "-\t\t\t        \tif (originalOtherBounds != null) {", "-\t\t\t        \t\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=347145: the constituent intersecting types have changed", "-\t\t\t        \t\t   in the last round of substitution. Reevaluate the composite intersection type, as there is a possibility", "-\t\t\t        \t\t   of the intersection collapsing into one of the constituents, the other being fully subsumed.", "-\t\t\t        \t\t*/", "-\t\t\t    \t\t\tTypeBinding [] bounds = new TypeBinding[1 + substitutedOtherBounds.length];", "-\t\t\t    \t\t\tbounds[0] = substitutedBound;", "-\t\t\t    \t\t\tSystem.arraycopy(substitutedOtherBounds, 0, bounds, 1, substitutedOtherBounds.length);", "-\t\t\t    \t\t\tTypeBinding[] glb = Scope.greaterLowerBound(bounds, null, substitution.environment()); // re-evaluate", "-\t\t\t    \t\t\tif (glb != null && glb != bounds) {", "-\t\t\t    \t\t\t\tsubstitutedBound = glb[0];", "-\t\t    \t\t\t\t\tif (glb.length == 1) {", "-\t\t\t    \t\t\t\t\tsubstitutedOtherBounds = null;", "-\t\t\t    \t\t\t\t} else {", "-\t\t\t    \t\t\t\t\tSystem.arraycopy(glb, 1, substitutedOtherBounds = new TypeBinding[glb.length - 1], 0, glb.length - 1);", "-\t\t\t    \t\t\t\t}", "-\t\t\t    \t\t\t}", "-\t\t\t        \t}", "-\t\t        \t\treturn wildcard.environment.createWildcard(wildcard.genericType, wildcard.rank, substitutedBound, substitutedOtherBounds, wildcard.boundKind, wildcard.getTypeAnnotations());", "-\t\t\t        }", "-\t\t        }", "-\t\t\t\tbreak;", "-", "-\t\t\tcase Binding.TYPE:", "-\t\t\t\tif (!originalType.isMemberType()) break;", "-\t\t\t\tReferenceBinding originalReferenceType = (ReferenceBinding) originalType;", "-\t\t\t\toriginalEnclosing = originalType.enclosingType();", "-\t\t\t\tsubstitutedEnclosing = originalEnclosing;", "-\t\t\t\tif (originalEnclosing != null) {", "-\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) substitute(substitution, originalEnclosing);", "-\t\t\t\t\tif (isMemberTypeOfRaw(originalType, substitutedEnclosing))", "-\t\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t}", "-", "-\t\t\t    // treat as if parameterized with its type variables (non generic type gets 'null' arguments)", "-\t\t\t\tif (substitutedEnclosing != originalEnclosing) { //$IDENTITY-COMPARISON$", "-\t\t\t\t\treturn substitution.isRawSubstitution()", "-\t\t\t\t\t\t? substitution.environment().createRawType(originalReferenceType, substitutedEnclosing, originalType.getTypeAnnotations())", "-\t\t\t\t\t\t:  substitution.environment().createParameterizedType(originalReferenceType, null, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.GENERIC_TYPE:", "-\t\t\t\toriginalReferenceType = (ReferenceBinding) originalType;", "-\t\t\t\toriginalEnclosing = originalType.enclosingType();", "-\t\t\t\tsubstitutedEnclosing = originalEnclosing;", "-\t\t\t\tif (originalEnclosing != null) {", "-\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) substitute(substitution, originalEnclosing);", "-\t\t\t\t\tif (isMemberTypeOfRaw(originalType, substitutedEnclosing))", "-\t\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t}", "-", "-\t\t\t\tif (substitution.isRawSubstitution()) {", "-\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t}", "-\t\t\t    // treat as if parameterized with its type variables (non generic type gets 'null' arguments)", "-\t\t\t\toriginalArguments = originalReferenceType.typeVariables();", "-\t\t\t\tsubstitutedArguments = substitute(substitution, originalArguments);", "-\t\t\t\treturn substitution.environment().createParameterizedType(originalReferenceType, substitutedArguments, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t}", "-\t\treturn originalType;", "-\t}", "+\t\treturn defaultSubstitutor.substitute(substitution, originalType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f464ff94d09eec49c438c7af6c014097", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c3c8917789b86ee8ba49ca3909bec03bf932cdc5", "commitAfterChange": "6e652c66c504914c1daaa584a7eee66b8e87dca4", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "signatureAfterChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "diff": ["+\t\tTypeBinding unannotatedOriginal = originalType.unannotated();", "+\t\tTypeBinding substitute = substitute0(substitution, unannotatedOriginal);", "+\t\tif (unannotatedOriginal == originalType)\t\t// no annotation => use naked substitute", "+\t\t\treturn substitute;", "+\t\telse if (substitute == unannotatedOriginal)\t\t// no substitution => re-use annotated type", "+\t\t\treturn originalType;", "+\t\telse \t\t\t\t\t\t\t\t\t\t\t// substitution and annotation: merge both", "+\t\t\treturn substitution.environment().copyAnnotations(originalType, substitute);", "+\t}"]}], "num": 44464}
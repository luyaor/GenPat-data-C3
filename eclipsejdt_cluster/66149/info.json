{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c6518d3573c7576a75e4326abceea9c6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05236ac0a12df01d483833c9969c48bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 257, "signatureBeforeChange": " \tpublic void testTryStatement()", "signatureAfterChange": " \tpublic void testTryStatement()", "diff": ["+\t/** @deprecated using deprecated code */", "+\t\tint level = this.ast.apiLevel();", "+\t\tif (level >= AST.JLS4) {", "+\t\t\tVariableDeclarationExpression vde1= this.ast.newVariableDeclarationExpression(this.W1);", "+\t\t\tvde1.setType(this.T1);", "+\t\t\tx1.resources().add(vde1);", "+\t\t\tVariableDeclarationExpression vde2= this.ast.newVariableDeclarationExpression(this.W2);", "+\t\t\tvde2.setType(this.T2);", "+\t\t\tx1.resources().add(vde2);", "+\t\t}", "-\t\tassertTrue(result.equals(\"[(sTY\"+this.B1S+\"[(cc\"+this.V1S+\"[(sBsB)]\"+\"cc)]\"+\"[(cc\"+this.V2S+\"[(sBsB)]\"+\"cc)]\"+\"[(sBsB)]\"+\"sTY)]\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$ //$NON-NLS-8$ //$NON-NLS-9$", "+\t\tassertEquals(\"[(sTY\"", "+\t\t\t\t+(level >= AST.JLS4 ? \"[(eVD\"+this.T1S+this.W1S+\"eVD)]\"+\"[(eVD\"+this.T2S+this.W2S+\"eVD)]\" : \"\")", "+\t\t\t\t+this.B1S+\"[(cc\"+this.V1S+\"[(sBsB)]\"+\"cc)]\"+\"[(cc\"+this.V2S+\"[(sBsB)]\"+\"cc)]\"+\"[(sBsB)]\"+\"sTY)]\", result); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$ //$NON-NLS-8$ //$NON-NLS-9$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b70a6602529f8ecbee982e77564f214e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompilerImpl.java", "commitBeforeChange": "f6d7e4c8ebdaaf8a904962804a027a09edc0c0d3", "commitAfterChange": "30e98d6cc084dfe1b207ffb7493b2de7b6cec8c4", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 33, "signatureBeforeChange": "  \t@Override \tprotected void setPaths(ArrayList bootclasspaths, \t\t\tString sourcepathClasspathArg, \t\t\tArrayList sourcepathClasspaths, \t\t\tArrayList classpaths, \t\t\tArrayList extdirsClasspaths, \t\t\tArrayList endorsedDirClasspaths, \t\t\tString customEncoding)", "signatureAfterChange": "  \t@Override \tprotected void setPaths(ArrayList bootclasspaths, \t\t\tString sourcepathClasspathArg, \t\t\tArrayList sourcepathClasspaths, \t\t\tArrayList classpaths, \t\t\tArrayList extdirsClasspaths, \t\t\tArrayList endorsedDirClasspaths, \t\t\tString customEncoding)", "diff": ["-\t\tArrayList<FileSystem.Classpath> fileSystemClasspaths = new ArrayList<FileSystem.Classpath>();", "-\t\tEclipseFileManager javaFileManager = null;", "+\t\tArrayList<FileSystem.Classpath> fileSystemClasspaths = new ArrayList<>();", "+\t\tEclipseFileManager eclipseJavaFileManager = null;", "+\t\tJavaFileManager javaFileManager = null;", "+\t\tboolean havePlatformPaths = false;", "+\t\tboolean haveClassPaths = false;", "-\t\t\tjavaFileManager = (EclipseFileManager) this.fileManager;", "+\t\t\teclipseJavaFileManager = (EclipseFileManager) this.fileManager;", "+\t\tjavaFileManager = this.fileManager;", "-\t\tif (javaFileManager != null) {", "-\t\t\tif ((javaFileManager.flags & EclipseFileManager.HAS_ENDORSED_DIRS) == 0", "-\t\t\t\t\t&& (javaFileManager.flags & EclipseFileManager.HAS_BOOTCLASSPATH) != 0) {", "+\t\tif (eclipseJavaFileManager != null) {", "+\t\t\tif ((eclipseJavaFileManager.flags & EclipseFileManager.HAS_ENDORSED_DIRS) == 0", "+\t\t\t\t\t&& (eclipseJavaFileManager.flags & EclipseFileManager.HAS_BOOTCLASSPATH) != 0) {", "-\t\t}", "-\t\tif (location != null) {", "-\t\t\tfor (File file : location) {", "-\t\t\t\tClasspath classpath = FileSystem.getClasspath(", "-\t\t\t\t\tfile.getAbsolutePath(),", "-\t\t\t\t\tnull,", "-\t\t\t\t\tnull);", "-\t\t\t\tif (classpath != null) {", "-\t\t\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\tif (location != null) {", "+\t\t\t\tfor (File file : location) {", "+\t\t\t\t\tClasspath classpath = FileSystem.getClasspath(", "+\t\t\t\t\t\tfile.getAbsolutePath(),", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull);", "+\t\t\t\t\tif (classpath != null) {", "+\t\t\t\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\t\t\t\thavePlatformPaths = true;", "+\t\t\t\t\t}", "+\t\t} else if (javaFileManager != null) {", "+\t\t\tClasspath classpath = new ClasspathJsr199(this.fileManager, StandardLocation.PLATFORM_CLASS_PATH);", "+\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\thavePlatformPaths = true;", "-\t\tif (javaFileManager != null) {", "-\t\t\tif ((javaFileManager.flags & EclipseFileManager.HAS_EXT_DIRS) == 0", "-\t\t\t\t\t&& (javaFileManager.flags & EclipseFileManager.HAS_BOOTCLASSPATH) != 0) {", "+\t\tif (eclipseJavaFileManager != null) {", "+\t\t\tif ((eclipseJavaFileManager.flags & EclipseFileManager.HAS_EXT_DIRS) == 0", "+\t\t\t\t\t&& (eclipseJavaFileManager.flags & EclipseFileManager.HAS_BOOTCLASSPATH) != 0) {", "-\t\t} else {", "-\t\t\tlocation = null;", "-\t\t}", "-\t\tif (location != null) {", "-\t\t\tfor (File file : location) {", "-\t\t\t\tClasspath classpath = FileSystem.getClasspath(", "+\t\t\tif (location != null) {", "+\t\t\t\tfor (File file : location) {", "+\t\t\t\t\tClasspath classpath = FileSystem.getClasspath(", "+\t\t\t\t\t\t\tfile.getAbsolutePath(),", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull);", "+\t\t\t\t\tif (classpath != null) {", "+\t\t\t\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tlocation = standardJavaFileManager.getLocation(StandardLocation.CLASS_PATH);", "+\t\t\tif (location != null) {", "+\t\t\t\tfor (File file : location) {", "+\t\t\t\t\tClasspath classpath = FileSystem.getClasspath(", "-\t\t\t\tif (classpath != null) {", "-\t\t\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\t\t\tif (classpath != null) {", "+\t\t\t\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\t\t\t\thaveClassPaths = true;", "+\t\t\t\t\t}", "-\t\t}", "-\t\tif (standardJavaFileManager != null) {", "-\t\t\tlocation = standardJavaFileManager.getLocation(StandardLocation.CLASS_PATH);", "-\t\t} else {", "-\t\t\tlocation = null;", "-\t\t}", "-\t\tif (location != null) {", "-\t\t\tfor (File file : location) {", "-\t\t\t\tClasspath classpath = FileSystem.getClasspath(", "-\t\t\t\t\tfile.getAbsolutePath(),", "-\t\t\t\t\tnull,", "-\t\t\t\t\tnull);", "-\t\t\t\tif (classpath != null) {", "-\t\t\t\t\tfileSystemClasspaths.add(classpath);", "-\t\t\t\t}", "+\t\t} else if (javaFileManager != null) {", "+\t\t\tClasspath classpath = null;", "+\t\t\tif (this.fileManager.hasLocation(StandardLocation.SOURCE_PATH)) {", "+\t\t\t\tclasspath = new ClasspathJsr199(this.fileManager, StandardLocation.SOURCE_PATH);", "+\t\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\tclasspath = new ClasspathJsr199(this.fileManager, StandardLocation.CLASS_PATH);", "+\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\thaveClassPaths = true;", "-\t\t\tfileSystemClasspaths.addAll(this.handleBootclasspath(null, null));", "-\t\t\tfileSystemClasspaths.addAll(this.handleClasspath(null, null));", "+\t\t\t// It appears to be necessary to handleBootclasspath() for IBM JVMs", "+\t\t\t// in order to have visibility to java.lang.String (not present in rt.jar).", "+\t\t\t// The jars returned by StandardFileManager.getLocation(PLATFORM_CLASS_PATH) are", "+\t\t\t// not sufficient to resolve all standard classes.", "+\t\t\tif (!havePlatformPaths) fileSystemClasspaths.addAll(this.handleBootclasspath(null, null));", "+\t\t\tif (!haveClassPaths) fileSystemClasspaths.addAll(this.handleClasspath(null, null));"]}], "num": 66149}
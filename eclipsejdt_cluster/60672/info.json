{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d66bcac79dc63015fc733f4eee5874a6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e5f9872739f6ca7711ed0f3db6620ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "8f261bb6c49278e86707910a4be5450c713c940a", "commitAfterChange": "b5977e771dcaa856815c805c4cdc6cf2a2c18650", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void complainOnDeferredNullChecks(BlockScope scope, FlowInfo callerFlowInfo)", "signatureAfterChange": " public void complainOnDeferredNullChecks(BlockScope scope, FlowInfo callerFlowInfo)", "diff": ["-\t\t\tExpression expression = this.nullReferences[i];", "+\t\t\tASTNode location = this.nullReferences[i];", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, location);", "+\t\t\t\t\tExpression expression = (Expression)location;", "-\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, expression);", "+\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, location);", "-\t\t\t\t\tthis.parent.recordNullityMismatch(scope, expression, flowInfo.nullStatus(local), this.expectedTypes[i]);", "+\t\t\t\t\tthis.parent.recordNullityMismatch(scope, (Expression)location, flowInfo.nullStatus(local), this.expectedTypes[i]);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase EXIT_RESOURCE:", "+\t\t\t\t\tif (local instanceof LocalVariableBinding) {", "+\t\t\t\t\t\tFakedTrackingVariable trackingVar = ((LocalVariableBinding) local).closeTracker;", "+\t\t\t\t\t\tif (trackingVar != null) {", "+\t\t\t\t\t\t\tif (trackingVar.hasDefinitelyNoResource(flowInfo)) {", "+\t\t\t\t\t\t\t\tcontinue; // no resource - no warning.", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (trackingVar.isClosedInFinallyOfEnclosing(scope)) {", "+\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (this.parent.recordExitAgainstResource(scope, flowInfo, trackingVar, location)) {", "+\t\t\t\t\t\t\t\tthis.nullReferences[i] = null;", "+\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\tthis.parent.recordUsingNullReference(scope, local, expression,", "+\t\t\tthis.parent.recordUsingNullReference(scope, local, location,", "-\t\t\tExpression expression = this.nullReferences[i];", "+\t\t\tASTNode location = this.nullReferences[i];", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, location);", "-\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, expression);", "+\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, location);", "+\t\t\t\t\tExpression expression = (Expression) location;", "-\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, expression);", "+\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, location);", "-\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, expression);", "+\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, location);", "-\t\t\t\t\t\tscope.problemReporter().nullityMismatch(expression, this.expectedTypes[i], nullStatus, annotationName);", "+\t\t\t\t\t\tscope.problemReporter().nullityMismatch((Expression) location, this.expectedTypes[i], nullStatus, annotationName);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase EXIT_RESOURCE:", "+\t\t\t\t\tnullStatus = flowInfo.nullStatus(local);", "+\t\t\t\t\tif (nullStatus != FlowInfo.NON_NULL && local instanceof LocalVariableBinding) {", "+\t\t\t\t\t\tFakedTrackingVariable closeTracker = ((LocalVariableBinding)local).closeTracker;", "+\t\t\t\t\t\tif (closeTracker != null) {", "+\t\t\t\t\t\t\tif (closeTracker.hasDefinitelyNoResource(flowInfo)) {", "+\t\t\t\t\t\t\t\tcontinue; // no resource - no warning.", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (closeTracker.isClosedInFinallyOfEnclosing(scope)) {", "+\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tnullStatus = closeTracker.findMostSpecificStatus(flowInfo, scope, null);", "+\t\t\t\t\t\t\tcloseTracker.recordErrorLocation(this.nullReferences[i], nullStatus);", "+\t\t\t\t\t\t\tcloseTracker.reportRecordedErrors(scope, nullStatus);", "+\t\t\t\t\t\t\tthis.nullReferences[i] = null;", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e7ad51c8c06fbdb0a8ee698c4011016", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "09f42f58bcdf2fa84ccd2b8b65f28ab3036222ca", "commitAfterChange": "57e8dd41219d846363c918d62edb5007994c5c79", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static boolean resolvePolyExpressionArguments(Invocation invocation, BlockScope scope, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "signatureAfterChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "diff": ["-\tpublic static boolean resolvePolyExpressionArguments(Invocation invocation, BlockScope scope, MethodBinding methodBinding, TypeBinding[] argumentTypes) {", "+\tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes) {", "-\t\tboolean hasUpdatedInner = false;", "+\t\t\tInferenceContext18 infCtx = null;", "+\t\t\tif (candidateMethod instanceof ParameterizedGenericMethodBinding) {", "+\t\t\t\tinfCtx = invocation.getInferenceContext((ParameterizedGenericMethodBinding) candidateMethod);", "+\t\t\t\tif (infCtx != null) {", "+\t\t\t\t\tif (!infCtx.hasFinished)", "+\t\t\t\t\t\treturn; // not yet ready for pushing type information down to arguments", "+\t\t\t\t\tvariableArity &= infCtx.isVarArgs(); // TODO: if no infCtx is available, do we have to re-check if this is a varargs invocation?", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "-\t\t\tfinal int parametersLength = parameters.length;", "-\t\t\tExpression [] arguments = invocation.arguments();", "+\t\t\tExpression[] innerArguments = invocation.arguments();", "+\t\t\tExpression [] arguments = innerArguments;", "-\t\t\t\tTypeBinding parameterType = i < parametersLength ? parameters[i] : variableArity ? parameters[parametersLength - 1] : null;", "+\t\t\t\tTypeBinding parameterType = InferenceContext18.getParameter(parameters, i, variableArity); ", "-\t\t\t\tif (variableArity && i >= parametersLength - 1)", "-\t\t\t\t\targument.tagAsEllipsisArgument();", "-\t\t\t\tupdatedArgumentType = updateExpression(scope, argument, argumentTypes[i], parameterType, invocation.hasInferenceFinished());", "-\t\t\t\tif (updatedArgumentType == POLY_ERROR) //$IDENTITY-COMPARISON$", "+\t\t\t\tif (argument instanceof LambdaExpression && ((LambdaExpression) argument).hasErrors())", "-\t\t\t\tif (problemReason != ProblemReasons.Ambiguous \t// preserve this error", "-\t\t\t\t\t\t&& updatedArgumentType != null\t\t\t\t\t// do we have a relevant update? ...", "-\t\t\t\t\t\t&& !(updatedArgumentType instanceof PolyTypeBinding)", "-\t\t\t\t\t\t&& TypeBinding.notEquals(updatedArgumentType, argumentTypes[i]))", "-\t\t\t\t{", "-\t\t\t\t\t// update the argumentTypes array (supposed to be owned by the calling method)", "-\t\t\t\t\t// in order to give better information into a second round of method lookup:", "-\t\t\t\t\targumentTypes[i] = updatedArgumentType;", "-\t\t\t\t\thasUpdatedInner = true;", "+", "+\t\t\t\tif (argument instanceof Invocation) {", "+\t\t\t\t\tInvocation innerInvocation = (Invocation)argument;", "+\t\t\t\t\tMethodBinding binding = innerInvocation.binding();", "+\t\t\t\t\tif (binding instanceof ParameterizedGenericMethodBinding) {", "+\t\t\t\t\t\tParameterizedGenericMethodBinding parameterizedMethod = (ParameterizedGenericMethodBinding) binding;", "+\t\t\t\t\t\tInferenceContext18 innerContext = innerInvocation.getInferenceContext(parameterizedMethod);", "+\t\t\t\t\t\tif (innerContext != null && !innerContext.hasFinished) {\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\targument.setExpectedType(parameterType);", "+\t\t\t\t\t\t\tTypeBinding[] innerArgumentTypes = null;", "+\t\t\t\t\t\t\tif (innerArguments != null) {", "+\t\t\t\t\t\t\t\tinnerArgumentTypes = new TypeBinding[innerArguments.length];", "+\t\t\t\t\t\t\t\tfor (int j = 0; j < innerArguments.length; j++)", "+\t\t\t\t\t\t\t\t\tinnerArgumentTypes[i] = innerArguments[i].resolvedType;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tMethodBinding improvedBinding = innerContext.inferInvocationType(innerInvocation, innerArgumentTypes, parameterizedMethod);", "+\t\t\t\t\t\t\tinnerInvocation.updateBindings(improvedBinding);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcontinue; // otherwise these have been dealt with during inner method lookup", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\tif (argument.isPolyExpression()) {", "+\t\t\t\t\t// poly expressions in an invocation context need to be resolved now:", "+\t\t\t\t\tupdatedArgumentType = argument.checkAgainstFinalTargetType(parameterType);", "+", "+\t\t\t\t\tif (problemReason == ProblemReasons.NoError // preserve errors", "+\t\t\t\t\t\t\t&& updatedArgumentType != null\t\t\t\t\t// do we have a relevant update? ...", "+\t\t\t\t\t\t\t&& !(updatedArgumentType instanceof PolyTypeBinding))", "+\t\t\t\t\t{", "+\t\t\t\t\t\t// update the argumentTypes array (supposed to be owned by the calling method)", "+\t\t\t\t\t\t// in order to give better information for subsequent checks", "+\t\t\t\t\t\targumentTypes[i] = updatedArgumentType;", "+\t\t\t\t\t}", "-\t\treturn hasUpdatedInner;", "-\t}"]}], "num": 60672}
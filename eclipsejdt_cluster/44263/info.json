{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d4fd99ae6ec6f53fe3206d737e0aa4c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d40a3586ed11d76207a4ab045cab8e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/impl/FormatterOptions.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r public void setOption(ConfigurableOption setting)", "signatureAfterChange": "\r public void setOption(ConfigurableOption setting)", "diff": ["-\t\r", "-\tString optionID = setting.getID();\r", "-\t\r", "-\tif(optionID.equals(OPTION_InsertNewlineBeforeOpeningBrace)){\r", "-\t\tsetNewLineBeforeOpeningBraceMode(setting.getValueIndex() == 0);\r", "-\t}else if(optionID.equals(OPTION_InsertNewlineInControlStatement)){\r", "-\t\tsetNewlineInControlStatementMode(setting.getValueIndex() == 0);\r", "-\t}else if(optionID.equals(OPTION_ClearAllBlankLines)){\r", "-\t\tsetClearAllBlankLinesMode(setting.getValueIndex() == 0);\r", "-\t}else if(optionID.equals(OPTION_InsertNewLineBetweenElseAndIf)){\r", "-\t\tsetCompactElseIfMode(setting.getValueIndex() == 1);\r", "-\t}else if(optionID.equals(OPTION_InsertNewLineInEmptyBlock)){\r", "-\t\tsetNewLineInEmptyBlockMode(setting.getValueIndex() == 0);\r", "-\t}else if(optionID.equals(OPTION_SplitLineExceedingLength)){\r", "-\t\ttry {\r", "-\t\t\tsetMaxLineLength(Integer.parseInt(setting.getValue()));\r", "-\t\t} catch(NumberFormatException e){\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_CompactAssignment)){\r", "-\t\tsetCompactAssignmentMode(setting.getValueIndex() == 0);\r", "-\t}else if(optionID.equals(OPTION_TabulationChar)){\r", "-\t\tsetIndentationUsesTab(setting.getValueIndex() == 0);\r", "-\t}else if(optionID.equals(OPTION_TabulationSize)){\r", "-\t\ttry {\r", "-\t\t\tsetTabSize(Integer.parseInt(setting.getValue()));\r", "-\t\t} catch(NumberFormatException e){\r", "-\t\t}\r", "+\r", "+\tswitch (setting.getID()) {\r", "+\t\tcase 1 : // insert blank line before opening brace\r", "+\t\t\tsetNewLineBeforeOpeningBraceMode(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 2 : // insert blank line behind keywords (ELSE, CATCH, FINALLY,...) in control statements\r", "+\t\t\tsetNewlineInControlStatementMode(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 3 : // flush all blank lines\r", "+\t\t\tsetClearAllBlankLinesMode(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 4 : // puts else if on the same line\r", "+\t\t\tsetCompactElseIfMode(setting.getCurrentValueIndex() == 0);\r", "+\t\tbreak;\r", "+\t\tcase 5 : // add a new line inside an empty block.\r", "+\t\t\tsetNewLineInEmptyBlockMode(setting.getCurrentValueIndex() == 0);\r", "+\t\tbreak;\r", "+\t\tcase 6 : // line splitting will occur when line exceeds this length (0 -> no splitting)\r", "+\t\t\tsetMaxLineLength(setting.getCurrentValueIndex());\r", "+\t\t\tbreak;\r", "+\t\tcase 7 : // if isTrue, assignments look like x= 12 (not like x = 12);\r", "+\t\t\tsetCompactAssignmentMode(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 9 : // should use tab or spaces to indent\r", "+\t\t\tsetIndentationUsesTab(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 10 : // amount of spaces for a tabulation\r", "+\t\t\tsetTabSize(setting.getCurrentValueIndex());\r", "+\t\t\tbreak;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b9ae4859d33b9a11614fc7844803f03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/impl/FormatterOptions.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r public void setOption(ConfigurableOption setting)", "signatureAfterChange": "\r public void setOption(ConfigurableOption setting)", "diff": ["-\t\r", "-\tString optionID = setting.getID();\r", "-\t\r", "-\tif(optionID.equals(OPTION_InsertNewlineBeforeOpeningBrace)){\r", "-\t\tsetNewLineBeforeOpeningBraceMode(setting.getValueIndex() == 0);\r", "-\t}else if(optionID.equals(OPTION_InsertNewlineInControlStatement)){\r", "-\t\tsetNewlineInControlStatementMode(setting.getValueIndex() == 0);\r", "-\t}else if(optionID.equals(OPTION_ClearAllBlankLines)){\r", "-\t\tsetClearAllBlankLinesMode(setting.getValueIndex() == 0);\r", "-\t}else if(optionID.equals(OPTION_InsertNewLineBetweenElseAndIf)){\r", "-\t\tsetCompactElseIfMode(setting.getValueIndex() == 1);\r", "-\t}else if(optionID.equals(OPTION_InsertNewLineInEmptyBlock)){\r", "-\t\tsetNewLineInEmptyBlockMode(setting.getValueIndex() == 0);\r", "-\t}else if(optionID.equals(OPTION_SplitLineExceedingLength)){\r", "-\t\ttry {\r", "-\t\t\tsetMaxLineLength(Integer.parseInt(setting.getValue()));\r", "-\t\t} catch(NumberFormatException e){\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_CompactAssignment)){\r", "-\t\tsetCompactAssignmentMode(setting.getValueIndex() == 0);\r", "-\t}else if(optionID.equals(OPTION_TabulationChar)){\r", "-\t\tsetIndentationUsesTab(setting.getValueIndex() == 0);\r", "-\t}else if(optionID.equals(OPTION_TabulationSize)){\r", "-\t\ttry {\r", "-\t\t\tsetTabSize(Integer.parseInt(setting.getValue()));\r", "-\t\t} catch(NumberFormatException e){\r", "-\t\t}\r", "+\r", "+\tswitch (setting.getID()) {\r", "+\t\tcase 1 : // insert blank line before opening brace\r", "+\t\t\tsetNewLineBeforeOpeningBraceMode(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 2 : // insert blank line behind keywords (ELSE, CATCH, FINALLY,...) in control statements\r", "+\t\t\tsetNewlineInControlStatementMode(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 3 : // flush all blank lines\r", "+\t\t\tsetClearAllBlankLinesMode(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 4 : // puts else if on the same line\r", "+\t\t\tsetCompactElseIfMode(setting.getCurrentValueIndex() == 0);\r", "+\t\tbreak;\r", "+\t\tcase 5 : // add a new line inside an empty block.\r", "+\t\t\tsetNewLineInEmptyBlockMode(setting.getCurrentValueIndex() == 0);\r", "+\t\tbreak;\r", "+\t\tcase 6 : // line splitting will occur when line exceeds this length (0 -> no splitting)\r", "+\t\t\tsetMaxLineLength(setting.getCurrentValueIndex());\r", "+\t\t\tbreak;\r", "+\t\tcase 7 : // if isTrue, assignments look like x= 12 (not like x = 12);\r", "+\t\t\tsetCompactAssignmentMode(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 9 : // should use tab or spaces to indent\r", "+\t\t\tsetIndentationUsesTab(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 10 : // amount of spaces for a tabulation\r", "+\t\t\tsetTabSize(setting.getCurrentValueIndex());\r", "+\t\t\tbreak;\r"]}], "num": 44263}
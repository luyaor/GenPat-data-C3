{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2bf7ad73efe3c4f2ac08a5472ced78c0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38e8e50a500e070a1c51f49a63cef4c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "c45031a708344453f01f911278a63ebae41b9cba", "commitAfterChange": "c49a7bd34f8c2781dba76984d24d83335183205f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tboolean analyseResources = currentScope.compilerOptions().analyseResourceLeaks;", "+\tCompilerOptions compilerOptions = currentScope.compilerOptions();", "+\tboolean analyseResources = compilerOptions.analyseResourceLeaks;", "-\tif (this.binding instanceof ParameterizedGenericMethodBinding && this.typeArguments != null) {", "-\t\tParameterizedGenericMethodBinding parameterizedBinding = (ParameterizedGenericMethodBinding) this.binding;", "-\t\tfor (int i = 0; i < this.typeArguments.length; i++)", "-\t\t\tparameterizedBinding.checkNullConstraints(currentScope, this.typeArguments[i], i);", "+\tif (compilerOptions.isAnnotationBasedNullAnalysisEnabled && compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\tif (this.binding instanceof ParameterizedGenericMethodBinding && this.typeArguments != null) {", "+\t\t\tTypeVariableBinding[] typeVariables = this.binding.original().typeVariables();", "+\t\t\tfor (int i = 0; i < this.typeArguments.length; i++)", "+\t\t\t\tthis.typeArguments[i].checkNullConstraints(currentScope, typeVariables, i);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e18e41f4f8c3f0bbad08ec2d2f9b29df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": "  public boolean isPolyExpression()", "signatureAfterChange": " public boolean isPolyExpression(MethodBinding resolutionCandidate)", "diff": ["-\t*/", "+/** Variant of isPolyExpression() to be used during type inference, when a resolution candidate exists. */", "+public boolean isPolyExpression(MethodBinding resolutionCandidate) {", "-\tif (this.binding != null && this.binding instanceof ParameterizedGenericMethodBinding) {", "-\t\tParameterizedGenericMethodBinding pgmb = (ParameterizedGenericMethodBinding) this.binding;", "-\t\treturn pgmb.inferredReturnType;", "+\tif (resolutionCandidate != null) {", "+\t\tif (resolutionCandidate instanceof ParameterizedGenericMethodBinding) {", "+\t\t\tParameterizedGenericMethodBinding pgmb = (ParameterizedGenericMethodBinding) resolutionCandidate;", "+\t\t\tif (pgmb.inferredReturnType)", "+\t\t\t\treturn true; // if already determined", "+\t\t} ", "+\t\tif (resolutionCandidate.returnType != null) {", "+\t\t\t// resolution may have prematurely instantiated the generic method, we need the original, though:", "+\t\t\tMethodBinding candidateOriginal = resolutionCandidate.original();", "+\t\t\treturn candidateOriginal.returnType.mentionsAny(candidateOriginal.typeVariables(), -1);", "+\t\t}"]}], "num": 69545}
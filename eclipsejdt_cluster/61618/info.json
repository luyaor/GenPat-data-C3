{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "20ecae25a7477425d49f556ee67777c2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bc29b1e8fb8133b95b4e7d4030d5642", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "45ea0c0963e46daaae31261dbb16943dd8fe31f9", "commitAfterChange": "2eac8e5fe7a3ec66583085fd9b264a552c7df520", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void makeConsistent(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public void makeConsistent(IProgressMonitor monitor) throws JavaModelException", "diff": ["-\tif (!isConsistent()) { // TODO: (jerome) this code isn't synchronized with regular opening of a working copy (should use getElementInfo)", "-\t\tsuper.makeConsistent(monitor);", "-\t\tif (monitor != null && monitor.isCanceled()) return;", "-\t\tif (this.problemRequestor != null && this.problemRequestor.isActive()){", "-\t\t\tthis.problemRequestor.beginReporting();", "-\t\t\tCompilationUnitProblemFinder.process(this, this.problemRequestor, monitor); ", "-\t\t\tthis.problemRequestor.endReporting();", "-\t\t}\t\t", "+\tthis.computeProblems = this.problemRequestor != null && this.problemRequestor.isActive();", "+", "+\tWorkingCopyElementInfo info = null;", "+\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\tsynchronized(manager){", "+\t\tif (isConsistent()) return;", "+", "+\t\t// create a new info and make it the current info", "+\t\tinfo = (WorkingCopyElementInfo)createElementInfo();", "+\t\tbuildStructure(info, monitor);", "+\t", "+\t// report problems outside the JavaModelManager lock", "+\tif (monitor != null && monitor.isCanceled()) return;", "+\treportProblemsIfNeeded(info);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec222c6c4eba852a9f643500ff27476a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "45ea0c0963e46daaae31261dbb16943dd8fe31f9", "commitAfterChange": "2eac8e5fe7a3ec66583085fd9b264a552c7df520", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void open(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public void open(IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\tsuper.open(monitor);", "-\t\t", "-\t\tif (monitor != null && monitor.isCanceled()) return;", "-\t\tif (this.problemRequestor != null && this.problemRequestor.isActive()){", "-\t\t\tthis.problemRequestor.beginReporting();", "-\t\t\tCompilationUnitProblemFinder.process(this, this.problemRequestor, monitor); ", "-\t\t\tthis.problemRequestor.endReporting();", "+\t\tthis.computeProblems = this.problemRequestor != null && this.problemRequestor.isActive();", "+", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tObject info = null;", "+\t\tsynchronized(manager) {", "+\t\t\tif (!isOpen()) {", "+\t\t\t\tinfo = openWhenClosed(monitor);", "+\t\t\t} else {", "+\t\t\t\tinfo = manager.getInfo(this);", "+\t\t\t}", "+", "+\t\t// report problems outside the JavaModelManager lock", "+\t\tif (monitor != null && monitor.isCanceled()) return;", "+\t\treportProblemsIfNeeded((WorkingCopyElementInfo)info);"]}], "num": 61618}
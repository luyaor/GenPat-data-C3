{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb839ca326b770e3715441be05a627de", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16fb6cb58627b81a135f24dff147c4dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/SubTypeSearchJob.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public boolean search(Index index, IProgressMonitor progressMonitor)", "signatureAfterChange": " public boolean search(Index index, IProgressMonitor progressMonitor)", "diff": ["- */", "-", "-\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "-", "-\tif (index == null) return COMPLETE;\t\t", "-\tIndexManager indexManager = JavaModelManager.getJavaModelManager().getIndexManager();", "-\tReadWriteMonitor monitor = indexManager.getMonitorFor(index);", "-\tif (monitor == null) return COMPLETE; // index got deleted since acquired", "+\tif (index == null) return COMPLETE;", "-\t\tmonitor.enterRead(); // ask permission to read", "-", "-\t\t/* if index has changed, commit these before querying */", "-\t\tif (index.hasChanged()){", "-\t\t\ttry {", "-\t\t\t\tmonitor.exitRead(); // free read lock", "-\t\t\t\tmonitor.enterWrite(); // ask permission to write", "-\t\t\t\tindexManager.saveIndex(index);", "-\t\t\t} catch(IOException e){", "-\t\t\t\treturn FAILED;", "-\t\t\t} finally {", "-\t\t\t\tmonitor.exitWriteEnterRead(); // finished writing and reacquire read permission", "-\t\t\t}", "+\t\tif (!indexes.includes(index)) {", "+\t\t\tindexes.add(index);", "+\t\t\tindex.startQuery();", "-\t\tlong start = System.currentTimeMillis();", "-", "-\t\tIndexInput input;", "-\t\tif ((input = (IndexInput) inputs.get(index)) == null){", "-\t\t\tinput = new BlocksIndexInput(index.getIndexFile());", "-\t\t\tinput.open();", "-\t\t\tinputs.put(index, input);", "-\t\t\t//System.out.println(\"Acquiring INPUT for \"+index);", "-\t\t}", "-\t\tpattern.findIndexMatches(input, requestor, this.participant, this.scope, progressMonitor);", "-\t\texecutionTime += System.currentTimeMillis() - start;", "-\t\treturn COMPLETE;", "-\t} catch(IOException e){", "+\t} catch (IOException e) {", "-\t} finally {", "-\t\tmonitor.exitRead(); // finished reading", "+\treturn super.search(index, progressMonitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b68fc655fd44b3fa75d725ac50452434", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "29d06747dc9924aaa37b6f5478bee32ae657345a", "commitAfterChange": "635d51c73a886e470d16e7ebb8d1b4a9177433d4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "signatureAfterChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "diff": ["+\t// The return value does not signify success or failure!", "-\t\t\tElementProc.reportError(\"getRootElements() returned null\");", "+\t\t\treportError(\"getRootElements() returned null\");", "-\t\t\t\tElementProc.reportError(\"Missing root element \" + name);", "+\t\t\t\treportError(\"Missing root element \" + name);", "-\t\t\tElementProc.reportError(\"Found extra root elements including \" + expectedRootElementNames.iterator().next());", "+\t\t\treportError(\"Found extra root elements including \" + expectedRootElementNames.iterator().next());", "-\t\t// Check some basic attributes", "-\t\tTypeElement elementIA = _elementUtils.getTypeElement(\"targets.model.pa.IA\");", "-\t\tif (elementIA == null) {", "-\t\t\tElementProc.reportError(\"element IA was not found\");", "-\t\t\treturn false;", "-\t\t}", "-\t\tTypeElement elementAB = _elementUtils.getTypeElement(\"targets.model.pb.AB\");", "-\t\tif (elementAB == null) {", "-\t\t\tElementProc.reportError(\"element AB was not found\");", "-\t\t\treturn false;", "-\t\t}", "-\t\tif (elementIA.getKind() != ElementKind.INTERFACE) {", "-\t\t\tElementProc.reportError(\"IA claims to not be an interface\");", "-\t\t\treturn false;", "-\t\t}", "-\t\tif (elementAB.getKind() != ElementKind.CLASS) {", "-\t\t\tElementProc.reportError(\"AB claims to not be a class\");", "+\t\tif (!collectElements()) {", "-\t\t// Can we look at what interfaces AB implements?", "-\t\tList<? extends TypeMirror> ABinterfaces = elementAB.getInterfaces();", "-\t\tif (null == ABinterfaces) {", "-\t\t\tElementProc.reportError(\"AB.getInterfaces() returned null\");", "+\t\tif (!examineABInterfaces()) {", "-\t\tboolean foundIAinterface = false;", "-\t\tfor (TypeMirror type : ABinterfaces) {", "-\t\t\tElement decl = _typeUtils.asElement(type);", "-\t\t\tif (null == decl) {", "-\t\t\t\tElementProc.reportError(\"One of AB's interfaces, \" + type.toString() + \", produced null from Types.asElement()\");", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tif (elementIA.equals(decl)) {", "-\t\t\t\tfoundIAinterface = true;", "-\t\t\t\tbreak;", "-\t\t\t}", "+\t\t", "+\t\tif (!examineDHierarchy()) {", "+\t\t\treturn false;", "-\t\tif (!foundIAinterface) {", "-\t\t\tElementProc.reportError(\"AB does not have IA as an interface\");", "+\t\t", "+\t\tif (!examineAMethodsAndFields()) {", "+\t\t\treturn false;", "+\t\t}", "+\t\t", "+\t\tif (!examinePBPackage()) {"]}], "num": 27727}
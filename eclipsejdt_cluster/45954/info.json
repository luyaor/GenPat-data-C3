{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c6fe8476c117c236a3b6085fc3cc19c5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0494bf77dfe9c549a471629831ab6a62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "16d2f227c83166edb0478b06ddca92e3871fed38", "commitAfterChange": "e914ff2196f00fd15aeda854332ebec940816655", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": "  public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["+public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo) {", "+\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) != 0) return;", "+\t// if constructor from parameterized type got found, use the original constructor at codegen time", "+\tthis.codegenBinding = this.binding.original();", "+", "+\tReferenceBinding declaringClass;", "+\tif (this.codegenBinding.isPrivate() && currentScope.enclosingSourceType() != (declaringClass = this.codegenBinding.declaringClass)) {", "+", "+\t\t// optionally, local type constructor can lose their private flag to ease emulation", "+\t\tif ((declaringClass.tagBits & (TagBits.IsAnonymousType|TagBits.IsLocalType)) != 0", "+\t\t\t\t&& currentScope.compilerOptions().isPrivateConstructorAccessChangingVisibility) {", "+\t\t\t// constructor will not be dumped as private, no emulation required thus", "+\t\t\tthis.codegenBinding.tagBits |= TagBits.ClearPrivateModifier;", "+\t\t\tsyntheticAccessor = ((SourceTypeBinding) declaringClass).addSyntheticMethod(this.codegenBinding, isSuperAccess());", "+\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);", "+}", "-\tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo) {", "-", "-\t\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0) {", "-", "-\t\t// if constructor from parameterized type got found, use the original constructor at codegen time", "-\t\tthis.codegenBinding = this.binding.original();", "-", "-\t\tReferenceBinding declaringClass;", "-\t\tif (this.codegenBinding.isPrivate() && currentScope.enclosingSourceType() != (declaringClass = this.codegenBinding.declaringClass)) {", "-", "-\t\t\t// optionally, local type constructor can lose their private flag to ease emulation", "-\t\t\tif ((declaringClass.tagBits & (TagBits.IsAnonymousType|TagBits.IsLocalType)) != 0", "-\t\t\t\t\t&& currentScope.compilerOptions().isPrivateConstructorAccessChangingVisibility) {", "-\t\t\t\t// constructor will not be dumped as private, no emulation required thus", "-\t\t\t\tthis.codegenBinding.modifiers |= ExtraCompilerModifiers.AccClearPrivateModifier;", "-\t\t\t} else {", "-\t\t\t\tsyntheticAccessor = ((SourceTypeBinding) declaringClass).addSyntheticMethod(this.codegenBinding, isSuperAccess());", "-\t\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48b0816e52dea712c0712bb540d4245d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-", "-\t\t// if constructor from parameterized type got found, use the original constructor at codegen time", "-\t\tthis.codegenBinding = this.binding.original();", "-\t\t", "-\t\t// perform some emulation work in case there is some and we are inside a local type only", "-\t\tif (binding.isPrivate() && accessMode != This) {", "-\t\t\tReferenceBinding declaringClass = this.codegenBinding.declaringClass;", "-\t\t\t// from 1.4 on, local type constructor can lose their private flag to ease emulation", "-\t\t\tif ((declaringClass.tagBits & TagBits.IsLocalType) != 0 \t&& currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4) {", "-\t\t\t\t// constructor will not be dumped as private, no emulation required thus", "-\t\t\t\tthis.codegenBinding.tagBits |= TagBits.ClearPrivateModifier;", "-\t\t\t} else {", "-\t\t\t\tsyntheticAccessor = ((SourceTypeBinding) declaringClass).addSyntheticMethod(this.codegenBinding, isSuperAccess());", "-\t\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);", "+\t\t\t// if constructor from parameterized type got found, use the original constructor at codegen time", "+\t\t\tthis.codegenBinding = this.binding.original();", "+\t\t\t", "+\t\t\t// perform some emulation work in case there is some and we are inside a local type only", "+\t\t\tif (this.binding.isPrivate() && this.accessMode != ExplicitConstructorCall.This) {", "+\t\t\t\tReferenceBinding declaringClass = this.codegenBinding.declaringClass;", "+\t\t\t\t// from 1.4 on, local type constructor can lose their private flag to ease emulation", "+\t\t\t\tif ((declaringClass.tagBits & TagBits.IsLocalType) != 0 \t&& currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4) {", "+\t\t\t\t\t// constructor will not be dumped as private, no emulation required thus", "+\t\t\t\t\tthis.codegenBinding.tagBits |= TagBits.ClearPrivateModifier;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.syntheticAccessor = ((SourceTypeBinding) declaringClass).addSyntheticMethod(this.codegenBinding, isSuperAccess());", "+\t\t\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);", "+\t\t\t\t}", "-\t\t}"]}], "num": 45954}
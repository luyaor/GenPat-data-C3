{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "86ed98b95d07acdace6344b51448e229", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bef1f2d282de3413e5fe25c739fac23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "4ec8463782f86806757a76ab2d360d5012825932", "commitAfterChange": "f7bc2ee5d62baf64b6f044f322b40cdaa75e5dcc", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic boolean visit(EnumDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(EnumDeclaration node)", "diff": ["-\t\tBodyDeclaration prev = null;", "-\t\tfor (Iterator it = node.bodyDeclarations().iterator(); it.hasNext(); ) {", "-\t\t\tBodyDeclaration d = (BodyDeclaration) it.next();", "-\t\t\tif (prev instanceof EnumConstantDeclaration) {", "-\t\t\t\t// enum constant declarations do not include punctuation", "-\t\t\t\tif (d instanceof EnumConstantDeclaration) {", "-\t\t\t\t\t// enum constant declarations are separated by commas", "-\t\t\t\t\tthis.buffer.append(\", \");//$NON-NLS-1$", "-\t\t\t\t} else {", "-\t\t\t\t\t// semicolon separates last enum constant declaration from ", "-\t\t\t\t\t// first class body declarations", "-\t\t\t\t\tthis.buffer.append(\"; \");//$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t}", "+\t\tfor (Iterator it = node.enumConstants().iterator(); it.hasNext(); ) {", "+\t\t\tEnumConstantDeclaration d = (EnumConstantDeclaration) it.next();", "-\t\t\tprev = d;", "+\t\t\t// enum constant declarations do not include punctuation", "+\t\t\tif (it.hasNext()) {", "+\t\t\t\t// enum constant declarations are separated by commas", "+\t\t\t\tthis.buffer.append(\", \");//$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "+\t\tif (!node.bodyDeclarations().isEmpty()) {", "+\t\t\tthis.buffer.append(\"; \");//$NON-NLS-1$", "+\t\t\tfor (Iterator it = node.bodyDeclarations().iterator(); it.hasNext(); ) {", "+\t\t\t\tBodyDeclaration d = (BodyDeclaration) it.next();", "+\t\t\t\td.accept(this);", "+\t\t\t\t// other body declarations include trailing punctuation", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40c96ab9db979d44689958e7164b7dcb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "34f546269a807fa0bb6d9e888ddcecff76991315", "commitAfterChange": "a81acda43dd9b6911662c8a0d3f12c4b0d2da4da", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tpublic static void performPreBuildCheck(\r \t\tIResourceDelta delta,\r \t\tIJavaElement parent)", "signatureAfterChange": "\r \tpublic void performPreBuildCheck(\r \t\tIResourceDelta delta,\r \t\tIJavaElement parent)", "diff": ["-\tpublic static void performPreBuildCheck(\r", "+\tpublic void performPreBuildCheck(\r", "+\r", "+\t\ttry {\r", "+\t\t\tif (!ResourcesPlugin.getWorkspace().isAutoBuilding()) {\r", "+\t\t\t\tIterator iterator = this.projectsToUpdate.iterator();\r", "+\t\t\t\twhile (iterator.hasNext()) {\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\tJavaProject project = (JavaProject)iterator.next();\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\t // force classpath marker refresh\r", "+\t\t\t\t\t\tIClasspathEntry[] resolvedClasspath = \r", "+\t\t\t\t\t\t\tproject.getResolvedClasspath(true, true);\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\t// update cycle markers\r", "+\t\t\t\t\t\tproject.updateCycleMarkers(resolvedClasspath);\r", "+\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t} finally {\r", "+\t\t\tthis.projectsToUpdate = new HashSet();\r", "+\t\t}\r", "-\t\t\t\tprocessChildren = true;\r", "-\t\t\t\tbreak;\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tif (((IProject) resource).hasNature(JavaCore.NATURE_ID)) {\r", "-\t\t\t\t\t\tJavaProject project = (JavaProject)JavaCore.create((IProject)resource);\r", "-\t\t\t\t\t\tif (!ResourcesPlugin.getWorkspace().isAutoBuilding()){\r", "-\t\t\t\t\t\t\tproject.getResolvedClasspath(true, true); // force marker refresh\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tprocessChildren = true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} catch (CoreException e) {\r", "-\t\t\t\t}\r", "+\t\t\t\tprocessChildren = true;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a1aaf96cfdc085e2731438c868cff8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic boolean visit(ArrayAccess node)", "signatureAfterChange": " \tpublic boolean visit(AnnotationTypeDeclaration node)", "diff": ["+\t */", "+\tpublic boolean visit(AnnotationTypeDeclaration node) {", "+\t\tif (node.getJavadoc() != null) {", "+\t\t\tnode.getJavadoc().accept(this);", "+\t\t}", "+\t\tprintModifiers(node.modifiers());", "+\t\tthis.buffer.append(\"@interface \");//$NON-NLS-1$", "+\t\tnode.getName().accept(this);", "+\t\tthis.buffer.append(\" {\");//$NON-NLS-1$", "+\t\tfor (Iterator it = node.bodyDeclarations().iterator(); it.hasNext(); ) {", "+\t\t\tBodyDeclaration d = (BodyDeclaration) it.next();", "+\t\t\td.accept(this);", "+\t\t}", "+\t\tthis.buffer.append(\"}\");//$NON-NLS-1$", "+\t\treturn false;", "+\t}"]}], "num": 8413}
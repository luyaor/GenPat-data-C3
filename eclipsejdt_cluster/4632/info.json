{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80ee5d38665bac7aef8b930b9ad2e020", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "121908b6bfc28ef1b8eb7590d8c3f8f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\tpublic FlowInfo analyseCode(", "+public FlowInfo analyseCode(", "-", "-\t\tflowInfo = receiver.analyseCode(currentScope, flowContext, flowInfo);", "-\t\treceiver.checkNullStatus(currentScope, flowContext, flowInfo, FlowInfo.NON_NULL);", "-\t\treturn position.analyseCode(currentScope, flowContext, flowInfo);", "-\t}", "+\treceiver.checkNPE(currentScope, flowContext, flowInfo, true);", "+\tflowInfo = receiver.analyseCode(currentScope, flowContext, flowInfo);", "+\treturn position.analyseCode(currentScope, flowContext, flowInfo);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13179d4e09d18cf4079d451d7045df45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java", "commitBeforeChange": "6c5ff7a40e06214003233124a78f91b46a0db4e6", "commitAfterChange": "abfab6e38455079c19f7f3fadcf15c77c144ade8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-", "-\tpublic FlowInfo analyseCode(", "-\t\tBlockScope currentScope,", "-\t\tFlowContext flowContext,", "-\t\tFlowInfo flowInfo) {", "-\t\tfor (int i = 0, max = dimensions.length; i < max; i++) {", "+\tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {", "+\t\tfor (int i = 0, max = this.dimensions.length; i < max; i++) {", "-\t\t\tif ((dim = dimensions[i]) != null) {", "+\t\t\tif ((dim = this.dimensions[i]) != null) {", "-\t\tif (initializer != null) {", "-\t\t\treturn initializer.analyseCode(currentScope, flowContext, flowInfo);", "+\t\tif (this.initializer != null) {", "+\t\t\treturn this.initializer.analyseCode(currentScope, flowContext, flowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cbb4be5cf998c1131d22b4844d8a7ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\tpublic FlowInfo analyseCode(", "+public FlowInfo analyseCode(", "-\t\t\t", "-\t\tif (((bits & OperatorMASK) >> OperatorSHIFT) == NOT) {", "-\t\t\treturn this.expression", "-\t\t\t\t.analyseCode(currentScope, flowContext, flowInfo)", "-\t\t\t\t.asNegatedCondition();", "-\t\t} else {", "-\t\t\treturn this.expression.analyseCode(currentScope, flowContext, flowInfo);", "-\t\t}", "+\tthis.expression.checkNPE(currentScope, flowContext, flowInfo, true);\t", "+\tif (((bits & OperatorMASK) >> OperatorSHIFT) == NOT) {", "+\t\treturn this.expression.", "+\t\t\tanalyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tasNegatedCondition();", "+\t} else {", "+\t\treturn this.expression.", "+\t\t\tanalyseCode(currentScope, flowContext, flowInfo);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60388d53d38e6c41eb580561c7f74a63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "973af06dbc6df022ac42e8e0a0c238581d8558f6", "commitAfterChange": "f61787e560ec300f4e60b2d9cc64378b38b8a03a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+", "+public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {", "+\tthis.exception.analyseCode(currentScope, flowContext, flowInfo);", "+\t// need to check that exception thrown is actually caught somewhere", "+\tflowContext.checkExceptionHandlers(this.exceptionType, this, flowInfo, currentScope);", "+\treturn FlowInfo.DEAD_END;", "+}", "-\tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {", "-", "-\t\texception.analyseCode(currentScope, flowContext, flowInfo);", "-\t\t// need to check that exception thrown is actually caught somewhere", "-\t\tflowContext.checkExceptionHandlers(exceptionType, this, flowInfo, currentScope);", "-\t\treturn FlowInfo.DEAD_END;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a20ee5c329fd8e2587c644e09b545ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-public FlowInfo analyseCode(", "-\t\tBlockScope currentScope,", "-\t\tFlowContext flowContext,", "-\t\tFlowInfo flowInfo) {", "-\treceiver.checkNPE(currentScope, flowContext, flowInfo);", "-\tflowInfo = receiver.analyseCode(currentScope, flowContext, flowInfo);", "-\treturn position.analyseCode(currentScope, flowContext, flowInfo);", "+public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {", "+\tthis.receiver.checkNPE(currentScope, flowContext, flowInfo);", "+\tflowInfo = this.receiver.analyseCode(currentScope, flowContext, flowInfo);", "+\treturn this.position.analyseCode(currentScope, flowContext, flowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd5be69f24836b69909c2729c325eb36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\tpublic FlowInfo analyseCode(", "+public FlowInfo analyseCode(", "-", "-\t\treturn right", "-\t\t\t.analyseCode(", "-\t\t\t\tcurrentScope,", "-\t\t\t\tflowContext,", "-\t\t\t\tleft.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits())", "-\t\t\t.unconditionalInits();", "-\t}", "+\tleft.checkNPE(currentScope, flowContext, flowInfo, false /* skip String */);", "+\tflowInfo = left.analyseCode(currentScope, flowContext, flowInfo).", "+\t\tunconditionalInits();", "+\tright.checkNPE(currentScope, flowContext, flowInfo, false /* skip String */);", "+\treturn right.analyseCode(currentScope, flowContext, flowInfo).", "+\t\tunconditionalInits();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f64da572f6309a6c7284e5f5e6214d12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean compoundAssignment)", "signatureAfterChange": "  public FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean compoundAssignment)", "diff": ["-\tpublic FlowInfo analyseAssignment(", "+public FlowInfo analyseAssignment(", "-", "-\t\tif (assignment.expression == null) {", "-\t\t\treturn analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "-\t\t}", "-\t\treturn assignment", "-\t\t\t.expression", "-\t\t\t.analyseCode(", "-\t\t\t\tcurrentScope,", "-\t\t\t\tflowContext,", "-\t\t\t\tanalyseCode(currentScope, flowContext, flowInfo).unconditionalInits())", "-\t\t\t.unconditionalInits();", "+\t// TODO (maxime) optimization: unconditionalInits is applied to all existing calls", "+\tif (assignment.expression == null) {", "+\t\treturn analyseCode(currentScope, flowContext, flowInfo);", "+\treturn assignment", "+\t\t.expression", "+\t\t.analyseCode(", "+\t\t\tcurrentScope,", "+\t\t\tflowContext,", "+\t\t\tanalyseCode(currentScope, flowContext, flowInfo).unconditionalInits());", "+}"]}], "num": 4632}
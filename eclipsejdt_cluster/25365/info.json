{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39f2a78f2c3e5e5ab8004ef4b8e19ae6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be4c5be1fbf779af4baf7d398c119c5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DocCommentParser.java", "commitBeforeChange": "12f65faa0a3b984e9751d243a3eab6e6ab078ed7", "commitAfterChange": "36d2cf066100445cbe45dd4cf851204404f7d76f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected void pushText(int start, int end)", "signatureAfterChange": " \tprotected void pushText(int start, int end)", "diff": ["+", "+\t\t// Create text element", "+", "+\t\t// Search previous tag on which to add the text element", "+", "+\t\t// If we're in a inline tag, then retrieve previous tag in its fragments", "+\t\tList fragments = previousTag.fragments();", "-\t\t\tif (previousTag.fragments().size() == 0) {", "+\t\t\tint size = fragments.size();", "+\t\t\tif (size == 0) {", "+\t\t\t\t// no existing fragment => just add the element", "-\t\t\t\tpreviousTag.fragments().add(inlineTag);", "+\t\t\t\tfragments.add(inlineTag);", "-\t\t\t\tASTNode inlineTag = (ASTNode) previousTag.fragments().get(previousTag.fragments().size()-1);", "-\t\t\t\tif (inlineTag.getNodeType() == ASTNode.TAG_ELEMENT) {", "-\t\t\t\t\tpreviousTag = (TagElement) inlineTag;", "+\t\t\t\t// If last fragment is a tag, then use it as previous tag", "+\t\t\t\tASTNode lastFragment = (ASTNode) fragments.get(size-1);", "+\t\t\t\tif (lastFragment.getNodeType() == ASTNode.TAG_ELEMENT) {", "+\t\t\t\t\tpreviousTag = (TagElement) lastFragment;", "+", "+\t\t// Add the text"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d998770991222fe6db9d2ae29517444c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "f572503b33f8e0751eefeb27f2e850cb8d8a1e45", "commitAfterChange": "a27853720807c9f08312ac89a14e56c7a4db493a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate CompilationUnitDeclaration convert(ISourceType[] sourceTypes, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \tprivate CompilationUnitDeclaration convert(ISourceType[] sourceTypes, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\t\tthis.cu = (ICompilationUnit) topLevelTypeInfo.getHandle().getCompilationUnit();", "+\t\torg.eclipse.jdt.core.ICompilationUnit cuHandle = topLevelTypeInfo.getHandle().getCompilationUnit();", "+\t\tthis.cu = (ICompilationUnit) cuHandle;", "-\t\tif (topLevelTypeInfo.getPackageName() != null", "-\t\t\t&& topLevelTypeInfo.getPackageName().length > 0)", "+\t\tchar[] packageName = cuHandle.getParent().getElementName().toCharArray();", "+\t\tif (packageName.length > 0)", "-\t\t\t\tcreateImportReference(topLevelTypeInfo.getPackageName(), start, end, false, AccDefault);", "+\t\t\t\tcreateImportReference(packageName, start, end, false, AccDefault);"]}], "num": 25365}
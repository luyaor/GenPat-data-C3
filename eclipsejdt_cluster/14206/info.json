{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "53ad1c6b2f9d13e05072be07883de172", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c5d185c7545cb8e03b2804dfd4d6bfb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "c539ab4170e4fe0d8578cc8fb0121c9a797f5894", "commitAfterChange": "44363e0012bf09a8a44565479ae5740426ed378a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t} else if (this.lhs.isSuper()) {", "-\t\t\tthis.binding = sourceType.addSyntheticSuperBridgeMethod(this.binding);", "+\t\t} else if (this.syntheticAccessor != null) {", "+\t\t\tif (this.lhs.isSuper() || isMethodReference())", "+\t\t\t\tthis.binding = this.syntheticAccessor;", "-\t\t\tbuffer.append(this.lhs.isSuper() ? sourceType.signature() : this.receiverType.signature());", "+\t\t\tif (this.lhs.isSuper()) {", "+\t\t\t\tif (this.lhs instanceof QualifiedSuperReference) {", "+\t\t\t\t\tQualifiedSuperReference qualifiedSuperReference = (QualifiedSuperReference) this.lhs;", "+\t\t\t\t\tTypeReference qualification = qualifiedSuperReference.qualification;", "+\t\t\t\t\tif (qualification.resolvedType.isInterface()) {", "+\t\t\t\t\t\tbuffer.append(sourceType.signature());", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbuffer.append(((QualifiedSuperReference) this.lhs).currentCompatibleType.signature());", "+\t\t\t\t\t}", "+\t\t\t\t} else { ", "+\t\t\t\t\tbuffer.append(sourceType.signature());", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tbuffer.append(this.receiverType.signature());", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ce94ccd29d0d44925a9654e794f7fe4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "f97b24f3f8e94d8f54a74d9a196551c56851e735", "commitAfterChange": "edd951b2efc6b8f7b24cb3f178fd99c174eb6c7a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic char[][] charBasedExclusionPatterns()", "signatureAfterChange": " \tpublic char[][] fulExclusionPatternChars()", "diff": ["-\t * Returns a char based representation of the exclusions patterns.\r\t */", "-\tpublic char[][] charBasedExclusionPatterns() {", "-\t\tint length = exclusionPatterns == null ? 0 : exclusionPatterns.length;", "-\t\tif (length == 0) return null;", "-\t\tchar[][] result = new char[length][];", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tresult[i] = exclusionPatterns[i].toCharArray();", "+\t * Returns a char based representation of the exclusions patterns full path.\r\t */", "+\tpublic char[][] fulExclusionPatternChars() {", "+", "+\t\tif (this.fullCharExclusionPatterns == UNINIT_PATTERNS) {", "+\t\t\tint length = this.exclusionPatterns.length;", "+\t\t\tthis.fullCharExclusionPatterns = new char[length][];", "+\t\t\tIPath prefixPath = path.removeTrailingSeparator();", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tIPath fullPath = prefixPath, pattern;", "+\t\t\t\tif (!(pattern = exclusionPatterns[i]).isAbsolute()) { // add leading ** to relative fragment", "+\t\t\t\t\tfullPath.append(\"**/\"); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tfullPath.append(pattern);", "+\t\t\t\tthis.fullCharExclusionPatterns[i] = fullPath.toString().toCharArray();", "+\t\t\t}", "-\t\treturn result;", "+\t\treturn this.fullCharExclusionPatterns;"]}], "num": 14206}
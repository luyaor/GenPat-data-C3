{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fffc151f240202f35e45b3f653d74bfc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10c74dc706d3039ea4ce37a5e406074b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "3413778e1bd5154fc1bb3b2fe41a2f5c159f06ae", "commitAfterChange": "b6700c6040587d6a407e0aa87172122e678ac070", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tprivate void disassemble(ICodeAttribute codeAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": "  \tprivate void disassemble(IAnnotationComponentValue annotationComponentValue, IConstantPool constantPool, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["+", "+\tprivate void disassemble(IAnnotationComponentValue annotationComponentValue, IConstantPool constantPool, StringBuffer buffer, String lineSeparator, int tabNumber) {", "+\t\tswitch(annotationComponentValue.getTag()) {", "+\t\t\tcase IAnnotationComponentValue.BYTE_TAG:", "+\t\t\tcase IAnnotationComponentValue.CHAR_TAG:", "+\t\t\tcase IAnnotationComponentValue.DOUBLE_TAG:", "+\t\t\tcase IAnnotationComponentValue.FLOAT_TAG:", "+\t\t\tcase IAnnotationComponentValue.INTEGER_TAG:", "+\t\t\tcase IAnnotationComponentValue.LONG_TAG:", "+\t\t\tcase IAnnotationComponentValue.SHORT_TAG:", "+\t\t\tcase IAnnotationComponentValue.BOOLEAN_TAG:", "+\t\t\tcase IAnnotationComponentValue.STRING_TAG:", "+\t\t\t\tIConstantPoolEntry constantPoolEntry = annotationComponentValue.getConstantValue();", "+\t\t\t\tString value = null;", "+\t\t\t\tswitch(constantPoolEntry.getKind()) {", "+\t\t\t\t\tcase IConstantPoolConstant.CONSTANT_Long :", "+\t\t\t\t\t\tvalue = constantPoolEntry.getLongValue() + \"L\"; //$NON-NLS-1$", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IConstantPoolConstant.CONSTANT_Float :", "+\t\t\t\t\t\tvalue = constantPoolEntry.getFloatValue() + \"f\"; //$NON-NLS-1$", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IConstantPoolConstant.CONSTANT_Double :", "+\t\t\t\t\t\tvalue = Double.toString(constantPoolEntry.getDoubleValue());", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IConstantPoolConstant.CONSTANT_Integer:", "+\t\t\t\t\t\tswitch(annotationComponentValue.getTag()) {", "+\t\t\t\t\t\t\tcase IAnnotationComponentValue.CHAR_TAG :", "+\t\t\t\t\t\t\t\tvalue = \"'\" + (char) constantPoolEntry.getIntegerValue() + \"'\"; //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase IAnnotationComponentValue.BOOLEAN_TAG :", "+\t\t\t\t\t\t\t\tvalue = constantPoolEntry.getIntegerValue() == 1 ? \"true\" : \"false\";//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase IAnnotationComponentValue.BYTE_TAG :", "+\t\t\t\t\t\t\t\tvalue = \"(byte) \" + constantPoolEntry.getIntegerValue(); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase IAnnotationComponentValue.SHORT_TAG :", "+\t\t\t\t\t\t\t\tvalue =  \"(short) \" + constantPoolEntry.getIntegerValue(); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase IAnnotationComponentValue.INTEGER_TAG :", "+\t\t\t\t\t\t\t\tvalue =  \"(int) \" + constantPoolEntry.getIntegerValue(); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IConstantPoolConstant.CONSTANT_String:", "+\t\t\t\t\t\tvalue = \"\\\"\" + decodeStringValue(constantPoolEntry.getStringValue()) + \"\\\"\";//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t}", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.annotationdefaultvalue\", value)); //$NON-NLS-1$", "+\t\t\t\tbreak;", "+\t\t\tcase IAnnotationComponentValue.ENUM_TAG:", "+\t\t\t\tfinal int enumConstantTypeNameIndex = annotationComponentValue.getEnumConstantTypeNameIndex();", "+\t\t\t\tconstantPoolEntry = annotationComponentValue.getEnumConstantTypeName();", "+\t\t\t\tfinal char[] typeName = CharOperation.replaceOnCopy(constantPoolEntry.getUtf8Value(), '/', '.');", "+\t\t\t\tfinal int enumConstantNameIndex = annotationComponentValue.getEnumConstantNameIndex();", "+\t\t\t\tconstantPoolEntry = annotationComponentValue.getEnumConstantName();", "+\t\t\t\tfinal char[] constantName = constantPoolEntry.getUtf8Value();", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.annotationenumvalue\", //$NON-NLS-1$", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\tInteger.toString(enumConstantTypeNameIndex),", "+\t\t\t\t\t\tInteger.toString(enumConstantNameIndex),", "+\t\t\t\t\t\tnew String(Signature.toCharArray(typeName)),", "+\t\t\t\t\t\tnew String(constantName)", "+\t\t\t\t})); //$NON-NLS-1$", "+\t\t\t\tbreak;", "+\t\t\tcase IAnnotationComponentValue.CLASS_TAG:", "+\t\t\t\tfinal int classIndex = annotationComponentValue.getClassInfoIndex();", "+\t\t\t\tconstantPoolEntry = annotationComponentValue.getClassInfo();", "+\t\t\t\tfinal char[] className = CharOperation.replaceOnCopy(constantPoolEntry.getUtf8Value(), '/', '.');", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.annotationclassvalue\", //$NON-NLS-1$", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\tInteger.toString(classIndex),", "+\t\t\t\t\t\tnew String(Signature.toCharArray(className))", "+\t\t\t\t})); //$NON-NLS-1$", "+\t\t\t\tbreak;", "+\t\t\tcase IAnnotationComponentValue.ANNOTATION_TAG:", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.annotationannotationvalue\")); //$NON-NLS-1$", "+\t\t\t\tIAnnotation annotation = annotationComponentValue.getAttributeValue();", "+\t\t\t\tdisassemble(annotation, constantPool, buffer, lineSeparator, tabNumber + 1);", "+\t\t\t\tbreak;", "+\t\t\tcase IAnnotationComponentValue.ARRAY_TAG:", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.annotationarrayvaluestart\")); //$NON-NLS-1$", "+\t\t\t\tfinal IAnnotationComponentValue[] annotationComponentValues = annotationComponentValue.getAnnotationComponentValues();", "+\t\t\t\tfor (int i = 0, max = annotationComponentValues.length; i < max; i++) {", "+\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\t\t\t\tdisassemble(annotationComponentValues[i], constantPool, buffer, lineSeparator, tabNumber + 1);", "+\t\t\t\t}", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.annotationarrayvalueend\")); //$NON-NLS-1$", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cea915d9328f152483b1a18aa8aa54b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprivate void disassemble(IStackMapFrame frame, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": " \t \tprivate void disassemble(IStackMapTableAttribute attribute, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["+\t", "+\tprivate void disassemble(IStackMapTableAttribute attribute, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber + 3);", "+\t\tint numberOfEntries = attribute.getNumberOfEntries();", "+\t\tfinal IStackMapFrame[] stackMapFrames = attribute.getStackMapFrame();", "+\t\tint absolutePC = -1;", "+\t\tfor (int j = 0; j < numberOfEntries; j++) {", "+\t\t\tif (j > 0) {", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 3);", "+\t\t\t}", "+\t\t\tfinal IStackMapFrame frame = stackMapFrames[j];", "+\t\t\t// disassemble each frame", "+\t\t\tint type = frame.getFrameType();", "+\t\t\tint offsetDelta = frame.getOffsetDelta();", "+\t\t\tif (absolutePC == -1) {", "+\t\t\t\tabsolutePC = offsetDelta;", "+\t\t\t} else {", "+\t\t\t\tabsolutePC += (offsetDelta + 1);", "+\t\t\t}", "+\t\t\tswitch(type) {", "+\t\t\t\tcase 247 : // SAME_LOCALS_1_STACK_ITEM_EXTENDED", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tMessages.bind(", "+\t\t\t\t\t\t\tMessages.disassembler_frame_same_locals_1_stack_item_extended,", "+\t\t\t\t\t\t\tInteger.toString(absolutePC),", "+\t\t\t\t\t\t\tdisassemble(frame.getStackItems(), mode)));", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 248 :", "+\t\t\t\tcase 249 :", "+\t\t\t\tcase 250:", "+\t\t\t\t\t// CHOP", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\t\tMessages.bind(", "+\t\t\t\t\t\t\t\tMessages.disassembler_frame_chop,", "+\t\t\t\t\t\t\t\tInteger.toString(absolutePC),", "+\t\t\t\t\t\t\t\tInteger.toString(251 - type)));", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 251 :", "+\t\t\t\t\t// SAME_FRAME_EXTENDED", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\t\tMessages.bind(", "+\t\t\t\t\t\t\t\tMessages.disassembler_frame_same_frame_extended,", "+\t\t\t\t\t\t\t\tInteger.toString(absolutePC)));", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 252 :", "+\t\t\t\tcase 253 :", "+\t\t\t\tcase 254 :", "+\t\t\t\t\t// APPEND", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\t\tMessages.bind(", "+\t\t\t\t\t\t\t\tMessages.disassembler_frame_append,", "+\t\t\t\t\t\t\t\tInteger.toString(absolutePC),", "+\t\t\t\t\t\t\t\tdisassemble(frame.getLocals(), mode)));", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 255 :", "+\t\t\t\t\t// FULL_FRAME", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\t\tMessages.bind(", "+\t\t\t\t\t\t\t\tMessages.disassembler_frame_full_frame,", "+\t\t\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\t\tInteger.toString(absolutePC),", "+\t\t\t\t\t\t\t\t\tInteger.toString(frame.getNumberOfLocals()),", "+\t\t\t\t\t\t\t\t\tdisassemble(frame.getLocals(), mode),", "+\t\t\t\t\t\t\t\t\tInteger.toString(frame.getNumberOfStackItems()),", "+\t\t\t\t\t\t\t\t\tdisassemble(frame.getStackItems(), mode),", "+\t\t\t\t\t\t\t\t\tdumpNewLineWithTabs(lineSeparator, tabNumber + 5)", "+\t\t\t\t\t\t\t\t}));", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tif (type <= 63) {", "+\t\t\t\t\t\t// SAME_FRAME", "+\t\t\t\t\t\toffsetDelta = type;", "+\t\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\t\t\tMessages.bind(", "+\t\t\t\t\t\t\t\t\tMessages.disassembler_frame_same_frame,", "+\t\t\t\t\t\t\t\t\tInteger.toString(absolutePC)));", "+\t\t\t\t\t} else if (type <= 127) {", "+\t\t\t\t\t\t// SAME_LOCALS_1_STACK_ITEM", "+\t\t\t\t\t\toffsetDelta = type - 64;", "+\t\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\t\t\tMessages.bind(", "+\t\t\t\t\t\t\t\t\tMessages.disassembler_frame_same_locals_1_stack_item,", "+\t\t\t\t\t\t\t\t\tInteger.toString(absolutePC),", "+\t\t\t\t\t\t\t\t\tdisassemble(frame.getStackItems(), mode)));", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "-\tprivate void disassemble(IStackMapFrame frame, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {", "-\t\t// disassemble each frame", "-\t\tint type = frame.getFrameType();", "-\t\tswitch(type) {", "-\t\t\tcase 247 : // SAME_LOCALS_1_STACK_ITEM_EXTENDED", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\tMessages.bind(", "-\t\t\t\t\t\tMessages.disassembler_frame_same_locals_1_stack_item_extended,", "-\t\t\t\t\t\tInteger.toString(frame.getOffsetDelta()),", "-\t\t\t\t\t\tdisassemble(frame.getStackItems(), lineSeparator, tabNumber + 1, mode)));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\t\tbreak;", "-\t\t\tcase 248 :", "-\t\t\tcase 249 :", "-\t\t\tcase 250:", "-\t\t\t\t// CHOP", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(", "-\t\t\t\t\t\t\tMessages.disassembler_frame_chop,", "-\t\t\t\t\t\t\tInteger.toString(frame.getOffsetDelta()),", "-\t\t\t\t\t\t\tInteger.toString(251 - type)));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\t\tbreak;", "-\t\t\tcase 251 :", "-\t\t\t\t// SAME_FRAME_EXTENDED", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(", "-\t\t\t\t\t\t\tMessages.disassembler_frame_same_frame_extended,", "-\t\t\t\t\t\t\tInteger.toString(frame.getOffsetDelta())));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\t\tbreak;", "-\t\t\tcase 252 :", "-\t\t\tcase 253 :", "-\t\t\tcase 254 :", "-\t\t\t\t// APPEND", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(", "-\t\t\t\t\t\t\tMessages.disassembler_frame_append,", "-\t\t\t\t\t\t\tInteger.toString(frame.getOffsetDelta()),", "-\t\t\t\t\t\t\tdisassemble(frame.getLocals(), lineSeparator, tabNumber + 1, mode)));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\t\tbreak;", "-\t\t\tcase 255 :", "-\t\t\t\t// FULL_FRAME", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(", "-\t\t\t\t\t\t\tMessages.disassembler_frame_full_frame,", "-\t\t\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\t\t\tInteger.toString(frame.getOffsetDelta()),", "-\t\t\t\t\t\t\t\tInteger.toString(frame.getNumberOfLocals()),", "-\t\t\t\t\t\t\t\tdisassemble(frame.getLocals(), lineSeparator, tabNumber + 1, mode),", "-\t\t\t\t\t\t\t\tInteger.toString(frame.getNumberOfStackItems()),", "-\t\t\t\t\t\t\t\tdisassemble(frame.getStackItems(), lineSeparator, tabNumber + 1, mode),", "-\t\t\t\t\t\t\t\tdumpNewLineWithTabs(lineSeparator, tabNumber + 2)", "-\t\t\t\t\t\t\t}));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\t\tbreak;", "-\t\t\tdefault:", "-\t\t\t\tif (type <= 63) {", "-\t\t\t\t\t// SAME_FRAME", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(", "-\t\t\t\t\t\t\t\tMessages.disassembler_frame_same_frame,", "-\t\t\t\t\t\t\t\tInteger.toString(type)));", "-\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\t\t} else if (type <= 127) {", "-\t\t\t\t\t// SAME_LOCALS_1_STACK_ITEM", "-\t\t\t\t\tbuffer.append(", "-\t\t\t\t\t\t\tMessages.bind(", "-\t\t\t\t\t\t\t\tMessages.disassembler_frame_same_locals_1_stack_item,", "-\t\t\t\t\t\t\t\tInteger.toString(type - 64),", "-\t\t\t\t\t\t\t\tdisassemble(frame.getStackItems(), lineSeparator, tabNumber + 1, mode)));", "-\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\t\t}", "-\t\t}", "-\t}"]}], "num": 50251}
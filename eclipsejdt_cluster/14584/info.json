{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42b80403dd17658fc600f6884326fe3d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e0b4481a230d992caa54224c63b3f44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "c79bfbeb67e4687c48de7885eb121ce1ea14c01f", "commitAfterChange": "ff61aa704b87289ea0c126beac8453107bd32bdf", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void testBug41018() throws CoreException", "signatureAfterChange": " \tpublic void testBug41018() throws CoreException", "diff": ["-\t\ttry {", "-\t\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b41018/A.java\",", "-\t\t\t\t\"package b41018;\\n\" +", "-\t\t\t\t\"public class A {\\n\" + ", "-\t\t\t\t\"\tprotected void anotherMethod() {\\n\" + ", "-\t\t\t\t\"\t\tmethodA(null);\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tprivate Object methodA(ClassB.InnerInterface arg3) {\\n\" + ", "-\t\t\t\t\"\t\treturn null;\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"class ClassB implements InterfaceB {\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"interface InterfaceB {\\n\" + ", "-\t\t\t\t\"\tinterface InnerInterface {\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\"", "-\t\t\t\t);", "-\t\t\tIType type = workingCopies[0].getType(\"A\");", "-\t\t\tIMethod method = type.getMethod(\"methodA\", new String[] { \"QClassB.InnerInterface;\" });", "-\t\t\tsearch(method, REFERENCES);", "-\t\t\tassertSearchResults(", "-\t\t\t\t\"src/b41018/A.java void b41018.A.anotherMethod() [methodA(null)] EXACT_MATCH\"", "+\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b41018/A.java\",", "+\t\t\t\"package b41018;\\n\" +", "+\t\t\t\"public class A {\\n\" + ", "+\t\t\t\"\tprotected void anotherMethod() {\\n\" + ", "+\t\t\t\"\t\tmethodA(null);\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tprivate Object methodA(ClassB.InnerInterface arg3) {\\n\" + ", "+\t\t\t\"\t\treturn null;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class ClassB implements InterfaceB {\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"interface InterfaceB {\\n\" + ", "+\t\t\t\"\tinterface InnerInterface {\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\"", "-\t\t}", "-\t\tfinally {", "-\t\t\tdiscardWorkingCopies(workingCopies);", "-\t\t}", "+\t\tIType type = workingCopies[0].getType(\"A\");", "+\t\tIMethod method = type.getMethod(\"methodA\", new String[] { \"QClassB.InnerInterface;\" });", "+\t\tsearch(method, REFERENCES);", "+\t\tassertSearchResults(", "+\t\t\t\"src/b41018/A.java void b41018.A.anotherMethod() [methodA(null)] EXACT_MATCH\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e5430b51981969cdc03efda7054dfc9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void testMethodReferenceBug80890() throws CoreException, JavaModelException", "signatureAfterChange": " \tpublic void testBug80890() throws CoreException, JavaModelException", "diff": ["-\t */", "-\tpublic void testMethodReferenceBug80890() throws CoreException, JavaModelException {", "-\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/bugs/A.java\",", "-\t\t\t\t\"package bugs;\\n\" + ", "+\t */", "+\tpublic void testBug80890() throws CoreException, JavaModelException {", "+\t\tICompilationUnit workingCopy = null;", "+\t\ttry {", "+\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b80890/A.java\",", "+\t\t\t\t\"package b80890;\\n\" + ", "-\t\t\tworkingCopy.commitWorkingCopy(true, null);\t// need to commit to index file", "-\t\t\tIJavaSearchScope scope = SearchEngine.createJavaSearchScope(new ICompilationUnit[] { workingCopy });", "-\t\t\tIMethod method = workingCopy.getType(\"A\").getMethods()[0];", "-\t\t\tsearch(method, REFERENCES, scope, this.resultCollector);", "-\t\t\tmethod = workingCopy.getType(\"A\").getMethods()[1];", "-\t\t\tsearch(method, REFERENCES, scope, this.resultCollector);", "+\t\t\tIType type = workingCopy.getType(\"A\");", "+\t\t\tIMethod method = type.getMethods()[0];", "+\t\t\tsearch(method, REFERENCES);", "+\t\t\tmethod = type.getMethods()[1];", "+\t\t\tsearch(method, REFERENCES);", "-\t\t\t\t\"src/bugs/A.java void bugs.B1.bar1() [foo(null)] POTENTIAL_MATCH\\n\" + ", "-\t\t\t\t\"src/bugs/A.java void bugs.B2.bar2() [foo(null)] POTENTIAL_MATCH\\n\" + ", "-\t\t\t\t\"src/bugs/A.java void bugs.B1.bar1() [foo(null)] POTENTIAL_MATCH\\n\" + ", "-\t\t\t\t\"src/bugs/A.java void bugs.B2.bar2() [foo(null)] POTENTIAL_MATCH\",", "+\t\t\t\t\"src/b80890/A.java void b80890.B1.bar1() [foo(null)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\t\"src/b80890/A.java void b80890.B2.bar2() [foo(null)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\t\"src/b80890/A.java void b80890.B1.bar1() [foo(null)] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\t\"src/b80890/A.java void b80890.B2.bar2() [foo(null)] POTENTIAL_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (workingCopy != null)", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b07c901db3646a88dbaf7ac1979fa3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void testMethodReferenceBug41018() throws CoreException", "signatureAfterChange": " \tpublic void testBug41018() throws CoreException", "diff": ["-\t */", "-\tpublic void testMethodReferenceBug41018() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs\", \"src\", \"b41018\", \"A.java\").getType(\"A\");", "-\t\tIMethod method = type.getMethod(\"methodA\", new String[] { \"QClassB.InnerInterface;\" });", "-\t//\tJavaSearchResultCollector resultCollector = new JavaSearchResultCollector();", "-\t\tsearch(", "-\t\t\tmethod, ", "-\t\t\tREFERENCES, ", "-\t\t\tgetJavaSearchScopeBugs(), ", "-\t\t\tthis.resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b41018/A.java void b41018.A.anotherMethod() [methodA(null)] EXACT_MATCH\",", "-\t\t\tthis.resultCollector);", "-\t}", "+\tpublic void testBug41018() throws CoreException {", "+\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b41018/A.java\",", "+\t\t\t\t\"package b41018;\\n\" +", "+\t\t\t\t\"public class A {\\n\" + ", "+\t\t\t\t\"\tprotected void anotherMethod() {\\n\" + ", "+\t\t\t\t\"\t\tmethodA(null);\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tprivate Object methodA(ClassB.InnerInterface arg3) {\\n\" + ", "+\t\t\t\t\"\t\treturn null;\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"class ClassB implements InterfaceB {\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"interface InterfaceB {\\n\" + ", "+\t\t\t\t\"\tinterface InnerInterface {\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\"", "+\t\t\t\t);", "+\t\t\tIType type = workingCopy.getType(\"A\");", "+\t\t\tIMethod method = type.getMethod(\"methodA\", new String[] { \"QClassB.InnerInterface;\" });", "+\t\t\tsearch(method, REFERENCES);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b41018/A.java void b41018.A.anotherMethod() [methodA(null)] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (workingCopy != null)", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d680f244ea7d1a54d3dc0fa63d2d4441", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void testMethodReferenceBug77093() throws CoreException", "signatureAfterChange": " \tpublic void testBug73112a() throws CoreException", "diff": ["-\t */", "-\tpublic void testMethodReferenceBug77093() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs/src/b77093/X.java\").getType(\"X\");", "-\t\tIMethod method = type.getMethod(\"foo\", new String[] {\"[QZ;\"});", "-\t\tsearch(method, REFERENCES, getJavaSearchScopeBugs(), resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b77093/X.java void b77093.X.bar() [foo(z_arrays[i])] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}", "+\t */", "+\tpublic void testBug73112a() throws CoreException {", "+\t\tICompilationUnit workingCopy = null;", "+\t\ttry {", "+\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b73112/A.java\",", "+\t\t\t\t\"package b73112;\\n\" + ", "+\t\t\t\t\"public class A {\\n\" + ", "+\t\t\t\t\"    int fieldA73112a = 1, fieldA73112b = new Integer(2).intValue(), fieldA73112c = fieldA73112a + fieldA73112b;\\n\" + ", "+\t\t\t\t\"    int fieldA73112d;\\n\" + ", "+\t\t\t\t\"    \\n\" + ", "+\t\t\t\t\"    public void method(){}\\n\" + ", "+\t\t\t\t\"}\\n\");", "+\t\t\t// search field references to first multiple field", "+\t\t\tsearch(", "+\t\t\t\t\"fieldA73112*\",", "+\t\t\t\tFIELD,", "+\t\t\t\tALL_OCCURRENCES,", "+\t\t\t\tgetJavaSearchScopeBugs(),", "+\t\t\t\tthis.resultCollector);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b73112/A.java b73112.A.fieldA73112a [fieldA73112a] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73112/A.java b73112.A.fieldA73112b [fieldA73112b] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73112/A.java b73112.A.fieldA73112c [fieldA73112c] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73112/A.java b73112.A.fieldA73112c [fieldA73112a] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73112/A.java b73112.A.fieldA73112c [fieldA73112b] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73112/A.java b73112.A.fieldA73112d [fieldA73112d] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (workingCopy != null)", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t}", "+\t}"]}], "num": 14584}
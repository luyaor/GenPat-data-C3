{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c94fb932f118f63768e20433f4ed9989", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f7b4204843280eef3d95b4a68115100", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/RewriteEventStore.java", "commitBeforeChange": "7183d81a2458b7a9ecc9004f74bf12b52ac2eafc", "commitAfterChange": "54eb6fa8730358fcf98285db139cf9edbd02f92a", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 48, "signatureBeforeChange": " \t \tpublic final CopySourceInfo markAsRangeCopySource(ASTNode parent, StructuralPropertyDescriptor property, ASTNode first, ASTNode last, boolean isMove)", "signatureAfterChange": " \t \tpublic final CopySourceInfo createRangeCopy(ASTNode parent, StructuralPropertyDescriptor childProperty, ASTNode first, ASTNode last, boolean isMove, ASTNode internalPlaceholder, ASTNode replacingNode, TextEditGroup editGroup)", "diff": ["-\tpublic final CopySourceInfo markAsRangeCopySource(ASTNode parent, StructuralPropertyDescriptor property, ASTNode first, ASTNode last, boolean isMove) {", "-\t\tCopySourceInfo copySource= new CopySourceInfo(parent, property, first, last, isMove);", "-\t\tassertNoOverlap(copySource);", "+\t", "+\tpublic final CopySourceInfo createRangeCopy(ASTNode parent, StructuralPropertyDescriptor childProperty, ASTNode first, ASTNode last, boolean isMove, ASTNode internalPlaceholder, ASTNode replacingNode, TextEditGroup editGroup) {", "+\t\tCopySourceInfo copyInfo= createCopySourceInfo(null, internalPlaceholder, isMove);", "+\t\tinternalPlaceholder.setProperty(INTERNAL_PLACEHOLDER_PROPERTY, internalPlaceholder);", "-\t\tif (this.rangeCopySources == null) {", "-\t\t\tthis.rangeCopySources= new ArrayList();", "-\t\t}", "-\t\tthis.rangeCopySources.add(copySource);", "-\t\treturn copySource;", "-\t}", "+\t\tNodeRangeInfo copyRangeInfo= new NodeRangeInfo(parent, childProperty, first, last, copyInfo, replacingNode, editGroup);", "+\t\t", "+\t\tif (this.nodeRangeInfos == null) {", "+\t\t\tthis.nodeRangeInfos= new HashMap();", "+\t\t}", "+\t\tPropertyLocation loc= new PropertyLocation(parent, childProperty);", "+\t\tList innerList= (List) this.nodeRangeInfos.get(loc);", "+\t\tif (innerList == null) {", "+\t\t\tinnerList= new ArrayList(2);", "+\t\t\tthis.nodeRangeInfos.put(loc, innerList);", "+\t\t} else {", "+\t\t\tassertNoOverlap(listEvent, indexFirst, indexLast, innerList);", "+\t\t}", "+\t\tinnerList.add(copyRangeInfo);", "+\t\t", "+\t\t", "+\t\treturn copyInfo;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91be1083f5baacd2205a8e36e2a513d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "a8c43fb1703bc9585d371b45c5bc751b66052e18", "commitAfterChange": "40ace06b6f9aaa2f71ebf049ffa37ed745fa6ef3", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 40, "signatureBeforeChange": " \t\t \t\tpublic final int rewriteList(ASTNode parent, StructuralPropertyDescriptor property, int startPos, String keyword)", "signatureAfterChange": " \t\t \t\tpublic final int rewriteList(ASTNode parent, StructuralPropertyDescriptor property, int offset, String keyword)", "diff": ["-\t\tpublic final int rewriteList(ASTNode parent, StructuralPropertyDescriptor property, int startPos, String keyword) {", "-\t\t\tfStartPos= startPos;", "-\t\t\tfList= getEvent(parent, property).getChildren();", "+\t\tpublic final int rewriteList(ASTNode parent, StructuralPropertyDescriptor property, int offset, String keyword) {", "+\t\t\tthis.startPos= offset;", "+\t\t\tthis.list= getEvent(parent, property).getChildren();", "-\t\t\tint total= fList.length;", "+\t\t\tint total= this.list.length;", "-\t\t\t\treturn fStartPos;", "+\t\t\t\treturn this.startPos;", "-\t\t\t\tint currMark= fList[i].getChangeKind();", "+\t\t\t\tint currMark= this.list[i].getChangeKind();", "-\t\t\t\t\t\tASTNode elem= (ASTNode) fList[i].getOriginalValue();", "+\t\t\t\t\t\tASTNode elem= (ASTNode) this.list[i].getOriginalValue();", "-\t\t\t\t\tTextEditGroup editGroup= getEditGroup(fList[0]); // first node is insert", "-\t\t\t\t\tdoTextInsert(startPos, keyword, editGroup);", "+\t\t\t\t\tTextEditGroup editGroup= getEditGroup(this.list[0]); // first node is insert", "+\t\t\t\t\tdoTextInsert(offset, keyword, editGroup);", "-\t\t\t\tcurrPos= startPos;", "+\t\t\t\tcurrPos= offset;", "-\t\t\t\tcurrPos= startPos;", "+\t\t\t\tcurrPos= offset;", "-\t\t\t\tRewriteEvent currEvent= fList[i];", "+\t\t\t\tRewriteEvent currEvent= this.list[i];", "-\t\t\t\t\t\t\tif (fList[nextIndex].getChangeKind() != RewriteEvent.INSERTED) {", "+\t\t\t\t\t\t\tif (this.list[nextIndex].getChangeKind() != RewriteEvent.INSERTED) {", "-\t\t\t\t\t} else if (fList[nextIndex].getChangeKind() != RewriteEvent.UNCHANGED) {", "+\t\t\t\t\t} else if (this.list[nextIndex].getChangeKind() != RewriteEvent.UNCHANGED) {"]}], "num": 38097}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2194baee7d6284e7481bd62d99151e53", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "139908b50d4d8ccf48469b37d67f2f34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/BuildNotifier.java", "commitBeforeChange": "c66df91fe4ef54ca3fc328225a1127f6072a0caf", "commitAfterChange": "05b313c1ebccd8136a07de8477552de6fc20b5e1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public void done()", "signatureAfterChange": "\r public void done()", "diff": ["-\tsubTask(\"Build done\");\r", "+\tsubTask(Util.bind(\"build.done\"/*nonNLS*/));\r", "-\t\tfBuildMonitor.endBuild(fIsBatch ? \"->End batch build\" : \"->End incremental build\");\r", "+\t\tfBuildMonitor.endBuild(fIsBatch ? Util.bind(\"build.endBatch\"/*nonNLS*/) : Util.bind(\"build.endIncremental\"/*nonNLS*/));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c91e8dc0530982adf63c50cdb782196", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "e22e3614eb69018940fae05b9e58858f8a672e01", "commitAfterChange": "56d8ad4b7df60e79a9ee98611feebac099c594f9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public static IStatus validateCompilationUnitName(String name)", "signatureAfterChange": "\r public static IStatus validateCompilationUnitName(String name)", "diff": ["-\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, \"Compilation unit name must not be null\", null);\r", "+\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.unit.nullName\"/*nonNLS*/), null);\r", "-\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, \"Compilation unit name must include the \\\".java\\\" suffix\", null);\r", "+\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.unit.notJavaName\"/*nonNLS*/), null);\r", "-\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, \"Compilation unit name must include the \\\".java\\\" suffix\", null);\r", "+\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.unit.notJavaName\"/*nonNLS*/), null);\r", "-\treturn new Status(IStatus.OK, JavaCore.PLUGIN_ID, -1, \"OK\", null);\r", "+\treturn new Status(IStatus.OK, JavaCore.PLUGIN_ID, -1, \"OK\"/*nonNLS*/, null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b144867ae46964c36e83c7a651f70781", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 61, "signatureBeforeChange": "\r \tprotected IClasspathEntry[] readPaths(String xmlClasspath) throws IOException", "signatureAfterChange": "\r \tprotected IClasspathEntry[] readPaths(String xmlClasspath) throws IOException", "diff": ["-\t\t\tthrow new IOException(\"bad format\");\r", "+\t\t\tthrow new IOException(Util.bind(\"file.badFormat\"/*nonNLS*/));\r", "-\t\t\tthrow new IOException(\"bad format\");\r", "+\t\t\tthrow new IOException(Util.bind(\"file.badFormat\"/*nonNLS*/));\r", "-\t\tif (!cpElement.getNodeName().equalsIgnoreCase(\"classpath\")) {\r", "-\t\t\tthrow new IOException(\"bad format\");\r", "+\t\tif (!cpElement.getNodeName().equalsIgnoreCase(\"classpath\"/*nonNLS*/)) {\r", "+\t\t\tthrow new IOException(Util.bind(\"file.badFormat\"/*nonNLS*/));\r", "-\t\t\t\tif (cpeElement.getNodeName().equalsIgnoreCase(\"classpathentry\")) {\r", "-\t\t\t\t\tString cpeElementKind = cpeElement.getAttribute(\"kind\");\r", "-\t\t\t\t\tString pathStr = cpeElement.getAttribute(\"path\");\r", "+\t\t\t\tif (cpeElement.getNodeName().equalsIgnoreCase(\"classpathentry\"/*nonNLS*/)) {\r", "+\t\t\t\t\tString cpeElementKind = cpeElement.getAttribute(\"kind\"/*nonNLS*/);\r", "+\t\t\t\t\tString pathStr = cpeElement.getAttribute(\"path\"/*nonNLS*/);\r", "-\t\t\t\t\tString sourceAttachmentPathStr = cpeElement.getAttribute(\"sourcepath\");\r", "-\t\t\t\t\tIPath sourceAttachmentPath = sourceAttachmentPathStr.equals(\"\") ? null : new Path(sourceAttachmentPathStr);\r", "-\t\t\t\t\tString sourceAttachmentRootPathStr = cpeElement.getAttribute(\"rootpath\");\r", "-\t\t\t\t\tIPath sourceAttachmentRootPath = sourceAttachmentRootPathStr.equals(\"\") ? null : new Path(sourceAttachmentRootPathStr);\r", "+\t\t\t\t\tString sourceAttachmentPathStr = cpeElement.getAttribute(\"sourcepath\"/*nonNLS*/);\r", "+\t\t\t\t\tIPath sourceAttachmentPath = sourceAttachmentPathStr.equals(\"\"/*nonNLS*/) ? null : new Path(sourceAttachmentPathStr);\r", "+\t\t\t\t\tString sourceAttachmentRootPathStr = cpeElement.getAttribute(\"rootpath\"/*nonNLS*/);\r", "+\t\t\t\t\tIPath sourceAttachmentRootPath = sourceAttachmentRootPathStr.equals(\"\"/*nonNLS*/) ? null : new Path(sourceAttachmentRootPathStr);\r"]}], "num": 10037}
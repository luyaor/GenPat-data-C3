{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "287223e051479faa9cbd92e9e806ed23", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5abd03dee2f8ffeae0ef6d7bfc1e27a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "d33b892acebec2bc1c5d62c55db84a184bb6f3b3", "commitAfterChange": "86ecd2ba171e241fbd6f2290ee8ff607c4ff535a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic ReferenceBinding findMemberType(char[] typeName, ReferenceBinding enclosingType)", "signatureAfterChange": " \tpublic ReferenceBinding findMemberType(char[] typeName, ReferenceBinding enclosingType)", "diff": ["-\t\tcompilationUnitScope().recordReference(enclosingType, typeName);", "+\t\tCompilationUnitScope unitScope = compilationUnitScope();", "+\t\tunitScope.recordReference(enclosingType, typeName);", "-\t\t\tcompilationUnitScope().recordTypeReference(memberType);", "+\t\t\tunitScope.recordTypeReference(memberType);", "-\t\t\tcompilationUnitScope().recordReference(currentType, typeName);", "+\t\t\tunitScope.recordReference(currentType, typeName);", "-\t\t\t\tcompilationUnitScope().recordTypeReference(memberType);", "+\t\t\t\tunitScope.recordTypeReference(memberType);", "-\t\t\t\t\t\tcompilationUnitScope().recordReference(anInterface, typeName);", "+\t\t\t\t\t\tunitScope.recordReference(anInterface, typeName);", "-\t\t\t\t\t\t\tcompilationUnitScope().recordTypeReference(memberType);", "+\t\t\t\t\t\t\tunitScope.recordTypeReference(memberType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b606ca454035d07738df20b6d7d510c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "f3bba67d7292a507e1b3691e11f35ff1c9658d01", "commitAfterChange": "5ba107df633d1beada69a1a39d8b4efe7c8b77f6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \tpublic MethodBinding findExactMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \tpublic MethodBinding findExactMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "diff": ["+\r", "+// replaces call to addTypeReference\r", "+\t\tcompilationUnitScope().recordTypeReference(receiverType);\r", "+// replaces call to addTypeReferences\r", "+\t\tcompilationUnitScope().recordReferences(argumentTypes);\r", "-\t\tMethodBinding exactMethod =\r", "-\t\t\treceiverType.getExactMethod(selector, argumentTypes);\r", "+\t\tMethodBinding exactMethod = receiverType.getExactMethod(selector, argumentTypes);\r", "+// replaces call to addTypeReferences\r", "+\t\t\tcompilationUnitScope().recordReferences(exactMethod.thrownExceptions);\r", "-\t\t\tif (receiverType.isInterface()\r", "-\t\t\t\t|| exactMethod.canBeSeenBy(receiverType, invocationSite, this))\r", "+\t\t\tif (receiverType.isInterface() || exactMethod.canBeSeenBy(receiverType, invocationSite, this))\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee330e59110f1f09e8830abc1a158bdf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "d33b892acebec2bc1c5d62c55db84a184bb6f3b3", "commitAfterChange": "86ecd2ba171e241fbd6f2290ee8ff607c4ff535a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["-\t\tcompilationUnitScope().recordTypeReferences(argumentTypes);", "+\t\tCompilationUnitScope unitScope = compilationUnitScope();", "+\t\tunitScope.recordTypeReferences(argumentTypes);", "-\t\t\tcompilationUnitScope().recordTypeReference(currentType);", "+\t\t\tunitScope.recordTypeReference(currentType);", "-\t\tboolean isCompliant14 = compilationUnitScope().environment.options.complianceLevel >= ClassFileConstants.JDK1_4;", "+\t\tboolean isCompliant14 = unitScope.environment.options.complianceLevel >= ClassFileConstants.JDK1_4;", "-\t\t\tcompilationUnitScope().recordTypeReference(currentType);", "+\t\t\tunitScope.recordTypeReference(currentType);", "-\t\t\t\t\tcompilationUnitScope().recordTypeReferences(matchingMethod.thrownExceptions);", "+\t\t\t\t\tunitScope.recordTypeReferences(matchingMethod.thrownExceptions);", "-\t\tif (compilationUnitScope().environment.options.sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\tif (unitScope.environment.options.sourceLevel >= ClassFileConstants.JDK1_5) {", "-\t\t\tcompilationUnitScope().recordTypeReferences(candidates[0].thrownExceptions);", "+\t\t\tunitScope.recordTypeReferences(candidates[0].thrownExceptions);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1e10c6649fec47508eed9f848b54b29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "1e824a6f76b10e480f47e7bb3a7a70a5562012eb", "commitAfterChange": "fe48a8c1d697b99a27b139ea7b4c9bd7c7eaf9aa", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r \tpublic ReferenceBinding findMemberType(char[] typeName, ReferenceBinding enclosingType)", "signatureAfterChange": "\r \tpublic ReferenceBinding findMemberType(char[] typeName, ReferenceBinding enclosingType)", "diff": ["-// replaces call to addTypeReference\r", "-\t\tcompilationUnitScope().addTypeReference(enclosingType);\r", "-// was the enclosing type not recorded 3 lines above?\r", "-\t\t\tcompilationUnitScope().addTypeReference(memberType);\r", "-// replaces call to addTypeReference\r", "-\t\t\tcompilationUnitScope().addTypeReference(currentType);\r", "-// was the superclass not recorded 3 lines above?\r", "-\t\t\t\tcompilationUnitScope().addTypeReference(memberType);\r", "-// replaces call to addTypeReference\r", "-\t\t\t\t\t\tcompilationUnitScope().addTypeReference(anInterface);\r", "-// was the interface not recorded 3 lines above?\r", "-\t\t\t\t\t\t\tcompilationUnitScope().addTypeReference(memberType);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f268c763430f84a5d6facc3186d49dc9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "f3bba67d7292a507e1b3691e11f35ff1c9658d01", "commitAfterChange": "5ba107df633d1beada69a1a39d8b4efe7c8b77f6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "diff": ["+\r", "-\t\tcompilationUnitScope().addTypeReference(currentType);\r", "+// replaces call to addTypeReference\r", "+\t\tcompilationUnitScope().recordTypeReference(receiverType);\r", "+\t\tcompilationUnitScope().addTypeReference(receiverType);\r", "+// replaces call to addTypeReferences\r", "+\t\tcompilationUnitScope().recordReferences(argumentTypes);\r", "+\r", "+\r", "-\t\t\treturn matchingMethod;\r", "-\t\t// may be null - have not checked arg types or visibility\r", "+\t\t\treturn matchingMethod; // may be null - have not checked arg types or visibility\r", "-\t\t\treturn (MethodBinding) found.elementAt(0);\r", "-\t\t// no good match so just use the first one found\r", "+\t\t\treturn (MethodBinding) found.elementAt(0); // no good match so just use the first one found\r", "+// replaces call to addTypeReferences\r", "+\t\t\tcompilationUnitScope().recordReferences(visible[0].thrownExceptions);\r"]}], "num": 28065}
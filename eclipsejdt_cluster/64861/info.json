{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68162ea30abcad473cbeebe10310698f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03d62609dfb5f4b66775f3038995bef2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "93ae272625cf7aea539e03a762b5190105386996", "commitAfterChange": "c6f78f890c1ca00b0157b632da091fae2c781833", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["+\t\t}", "+\t\tfinal Object indentationSizeOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENTATION_SIZE);", "+\t\tif (indentationSizeOption != null) {", "+\t\t\ttry {", "+\t\t\t\tthis.indentation_size = Integer.parseInt((String) indentationSizeOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.indentation_size = 4;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.indentation_size = 4;", "+\t\t\t}", "-\t\t\tthis.use_tab = JavaCore.TAB.equals(useTabOption);", "+\t\t\tif (JavaCore.TAB.equals(useTabOption)) {", "+\t\t\t\tthis.tab_char = TAB;", "+\t\t\t} else if (JavaCore.SPACE.equals(useTabOption)) {", "+\t\t\t\tthis.tab_char = SPACE;", "+\t\t\t} else {", "+\t\t\t\tthis.tab_char = MIXED;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cc19164efaa3b7eaf0d95e07e63d49d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "a069ec3e155df34e1c3faf73c5e321c7b4b692f7", "commitAfterChange": "6dea5cf1ef2d860c99ae96c566fbaac1cc8d1d31", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprotected void processAnnotations()", "signatureAfterChange": "  \tprotected void processAnnotations()", "diff": ["-\t\tint bottom = 0;", "+\t\tint bottom = this.annotationProcessorStartIndex;", "-\t\t\t\t// we reset the compiler in order to restart with the new units", "-\t\t\t\tinternalBeginToCompile(newUnits, newUnitSize);", "+\t\t\t\tICompilationUnit[] newProcessedUnits = (ICompilationUnit[]) newUnits.clone(); // remember new units in case a source type collision occurs", "+\t\t\t\ttry {", "+\t\t\t\t\tthis.lookupEnvironment.isProcessingAnnotations = true;", "+\t\t\t\t\tinternalBeginToCompile(newUnits, newUnitSize);", "+\t\t\t\t} catch (SourceTypeCollisionException e) {", "+\t\t\t\t\te.newAnnotationProcessorUnits = newProcessedUnits;", "+\t\t\t\t\tthrow e;", "+\t\t\t\t} finally {", "+\t\t\t\t\tthis.lookupEnvironment.isProcessingAnnotations = false;", "+\t\t\t\t\tthis.annotationProcessorManager.reset();", "+\t\t\t\t}", "-\t\t\tthis.annotationProcessorManager.reset();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "647cb9bd55bb06a6a85a2ef564d20747", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "cccf97ddc8d31aa1dd642dfd102a8527af08ce6d", "commitAfterChange": "a7d573a8838570508a56f06b38a60f2c878b1524", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprotected void processAnnotations()", "signatureAfterChange": "  \tprotected void processAnnotations()", "diff": ["-\t\t// one more loop to create possible resources", "-\t\t// this loop cannot create any java source files", "+\t\t", "-\t\t// TODO we might want to check if this loop created new units", "+\t\t// process potential units added in the final round see 329156 ", "+\t\tICompilationUnit[] newUnits = this.annotationProcessorManager.getNewUnits();", "+\t\tnewUnitSize = newUnits.length;", "+\t\tif (newUnitSize != 0) {", "+\t\t\tICompilationUnit[] newProcessedUnits = (ICompilationUnit[]) newUnits.clone(); // remember new units in case a source type collision occurs", "+\t\t\ttry {", "+\t\t\t\tthis.lookupEnvironment.isProcessingAnnotations = true;", "+\t\t\t\tinternalBeginToCompile(newUnits, newUnitSize);", "+\t\t\t} catch (SourceTypeCollisionException e) {", "+\t\t\t\te.newAnnotationProcessorUnits = newProcessedUnits;", "+\t\t\t\tthrow e;", "+\t\t\t} finally {", "+\t\t\t\tthis.lookupEnvironment.isProcessingAnnotations = false;", "+\t\t\t\tthis.annotationProcessorManager.reset();", "+\t\t\t}", "+\t\t} else {", "+\t\t\tthis.annotationProcessorManager.reset();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b24fdcfc9e6b9b54ab49745b1b0a2ddd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "fe7b697ca16cd240df01b1ad29e35b2693b4b160", "commitAfterChange": "68fbbc2b696126776a21b18e5e10fb30f89536f0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void commit(boolean force, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public void commit(boolean force, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\tCommitWorkingCopyOperation op= new CommitWorkingCopyOperation(this, force);", "-\trunOperation(op, monitor);", "+\tICompilationUnit original = (ICompilationUnit)this.getOriginalElement();", "+\tif (original.exists()) {", "+\t\tCommitWorkingCopyOperation op= new CommitWorkingCopyOperation(this, force);", "+\t\trunOperation(op, monitor);", "+\t} else {", "+\t\tIFile originalRes = (IFile)original.getResource();", "+\t\ttry {", "+\t\t\toriginalRes.create(", "+\t\t\t\tnew InputStream() {", "+\t\t\t\t\tpublic int read() throws IOException {", "+\t\t\t\t\t\treturn -1;", "+\t\t\t\t\t}", "+\t\t\t\t},", "+\t\t\t\tforce,", "+\t\t\t\tmonitor);", "+\t\t} catch (CoreException e) {", "+\t\t\tthrow new JavaModelException(e);", "+\t\t}", "+\t\toriginal.getBuffer().setContents(this.getContents());", "+\t\toriginal.save(monitor, force);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb0e3425b9ea12424a431fd6d0340431", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "a73c1b70646c33788c416636d54ca7b824b36c44", "commitAfterChange": "89bcdbe3377ffa239857ce6e220c3e9a2f048f0c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["-\t\tfinal Object tabSizeOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_TAB_SIZE);", "+\t\tfinal Object tabSizeOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_TAB_LENGTH);", "-\t\t\t\tthis.tab_size = Integer.parseInt((String) tabSizeOption);", "+\t\t\t\tthis.tab_length = Integer.parseInt((String) tabSizeOption);", "-\t\t\t\tthis.tab_size = 4;", "+\t\t\t\tthis.tab_length = this.indentation_size;", "-\t\t\t\tthis.tab_size = 4;", "+\t\t\t\tthis.tab_length = this.indentation_size;", "+\t\t\t}", "+\t\t} else {", "+\t\t\t// compatibility code", "+\t\t\tthis.tab_length = this.indentation_size;", "+\t\t}", "+\t\tfinal Object indentationSizeOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENTATION_SIZE);", "+\t\tif (indentationSizeOption != null) {", "+\t\t\ttry {", "+\t\t\t\tthis.indentation_size = Integer.parseInt((String) indentationSizeOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.indentation_size = this.tab_length;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.indentation_size = this.tab_length;", "+\t\t}", "+\t\tfinal Object snapToTabsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_SNAP_TO_TABS);", "+\t\tif (snapToTabsOption != null) {", "+\t\t\tthis.snapToTabs = DefaultCodeFormatterConstants.TRUE.equals(snapToTabsOption);"]}], "num": 64861}
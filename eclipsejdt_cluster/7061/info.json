{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "575dbc1dcf552a776a1a2688a0c9e5a9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45392672970c36ed4a27f860c62f2d09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "a9567e58ade978b67e4f2db4ee5fe35bc3c0d3fe", "commitAfterChange": "0b6f06d77f121375ae3494c8c329aad2cfc0a1a4", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " private void scanFieldForNullAnnotation(IBinaryField field, FieldBinding fieldBinding, boolean isEnum)", "signatureAfterChange": " private void scanFieldForNullAnnotation(IBinaryField field, FieldBinding fieldBinding, boolean isEnum, ITypeAnnotationWalker externalAnnotationWalker)", "diff": ["-private void scanFieldForNullAnnotation(IBinaryField field, FieldBinding fieldBinding, boolean isEnum) {", "+private void scanFieldForNullAnnotation(IBinaryField field, FieldBinding fieldBinding, boolean isEnum, ITypeAnnotationWalker externalAnnotationWalker) {", "-\tIBinaryAnnotation[] annotations = field.getAnnotations();", "+\tIBinaryAnnotation[] annotations = externalAnnotationWalker != ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER", "+\t\t\t\t\t\t\t\t\t\t\t? externalAnnotationWalker.getAnnotationsAtCursor(fieldBinding.type.id) ", "+\t\t\t\t\t\t\t\t\t\t\t: field.getAnnotations();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0f73011affb54be773b516e323dfd32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SyntheticFactoryMethodBinding.java", "commitBeforeChange": "ec64763fa4e57b4943311ee555e5ddce81854cf2", "commitAfterChange": "b0ee678b65f48d1cfab35972dd53d6bd85389446", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic ParameterizedMethodBinding applyTypeArgumentsOnConstructor(TypeBinding[] typeArguments)", "signatureAfterChange": " \tpublic ParameterizedMethodBinding applyTypeArgumentsOnConstructor(TypeBinding[] typeArguments, TypeBinding[] constructorTypeArguments)", "diff": ["-\t/** Apply the given type arguments on the (declaring class of the) actual constructor being represented by this factory method. */", "-\tpublic ParameterizedMethodBinding applyTypeArgumentsOnConstructor(TypeBinding[] typeArguments) {", "+\t*/", "+\tpublic ParameterizedMethodBinding applyTypeArgumentsOnConstructor(TypeBinding[] typeArguments, TypeBinding[] constructorTypeArguments) {", "-\t\t\t\treturn (ParameterizedMethodBinding) parameterizedMethod;", "+\t\t\t\treturn constructorTypeArguments.length > 0 ? this.environment.createParameterizedGenericMethod(parameterizedMethod, constructorTypeArguments) :", "+\t\t\t\t\t\t\t\t\t\t\t\t\t         (ParameterizedMethodBinding) parameterizedMethod;"]}], "num": 7061}
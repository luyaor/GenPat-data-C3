{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c091552057683b681f9ddd924bd6be63", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47c664ad5181b67ff6d85d64ff4bd6ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "91a5b49121a22c32ff81484145fe6ce15b755e81", "commitAfterChange": "16b9910572e7876db169469e4f3c509a31490ed4", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void resolve(Openable[] openables, HashSet localTypes, IProgressMonitor monitor)", "signatureAfterChange": " public void resolve(Openable[] openables, HashSet localTypes, IProgressMonitor monitor)", "diff": ["-\t\t\t\t\tif (!containsLocalType) {", "-\t\t\t\t\t\tparsedUnit = ", "-\t\t\t\t\t\t\tSourceTypeConverter.buildCompilationUnit(", "-\t\t\t\t\t\t\t\ttypeInfos, ", "-\t\t\t\t\t\t\t\tSourceTypeConverter.MEMBER_TYPE, // need member types", "-\t\t\t\t\t\t\t\t// no need for field initialization", "-\t\t\t\t\t\t\t\tthis.lookupEnvironment.problemReporter, ", "-\t\t\t\t\t\t\t\tresult);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tparsedUnit =", "-\t\t\t\t\t\t\tElementInfoConverter.buildCompilationUnit(", "-\t\t\t\t\t\t\t\ttypeInfos, ", "-\t\t\t\t\t\t\t\ttrue, // need local types", "-\t\t\t\t\t\t\t\tthis.lookupEnvironment.problemReporter, ", "-\t\t\t\t\t\t\t\tresult);", "-\t\t\t\t\t\tparsedUnit.bits |= ASTNode.HasAllMethodBodies;", "-\t\t\t\t\t}", "+\t\t\t\t\tint flags = !containsLocalType ", "+\t\t\t\t\t\t? SourceTypeConverter.MEMBER_TYPE ", "+\t\t\t\t\t\t: SourceTypeConverter.FIELD_AND_METHOD | SourceTypeConverter.MEMBER_TYPE | SourceTypeConverter.LOCAL_TYPE;", "+\t\t\t\t\tparsedUnit = ", "+\t\t\t\t\t\tSourceTypeConverter.buildCompilationUnit(", "+\t\t\t\t\t\t\ttypeInfos, ", "+\t\t\t\t\t\t\tflags,", "+\t\t\t\t\t\t\tthis.lookupEnvironment.problemReporter, ", "+\t\t\t\t\t\t\tresult);", "+\t\t\t\t\tif (containsLocalType) \tparsedUnit.bits |= ASTNode.HasAllMethodBodies;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62113c67d211c8179e64a2f9108a1e5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java", "commitBeforeChange": "75f702ac7a9f5b98d8daf289140c0d700af63244", "commitAfterChange": "31e3c66a70e3c9b69b47c38f0b44d65cff7cbfa3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic static IScanner createScanner(boolean tokenizeComments, boolean tokenizeWhiteSpace, boolean recordLineSeparator, String sourceLevel)", "signatureAfterChange": " \tpublic static IScanner createScanner(boolean tokenizeComments, boolean tokenizeWhiteSpace, boolean recordLineSeparator, String sourceLevel)", "diff": ["-\t\tif (JavaCore.VERSION_1_4.equals(sourceLevel)) {", "-\t\t\tscanner = new PublicScanner(tokenizeComments, tokenizeWhiteSpace, false/*nls*/, CompilerOptions.JDK1_4 /*assert*/, null/*taskTags*/, null/*taskPriorities*/);", "-\t\t} else {", "-\t\t\tscanner = new PublicScanner(tokenizeComments, tokenizeWhiteSpace, false/*nls*/, CompilerOptions.JDK1_3 /*assert*/, null/*taskTags*/, null/*taskPriorities*/);", "-\t\t}", "+\t\tlong level = CompilerOptions.versionToJdkLevel(sourceLevel);", "+\t\tif (level == 0) level = CompilerOptions.JDK1_3; // fault-tolerance", "+\t\tscanner = new PublicScanner(tokenizeComments, tokenizeWhiteSpace, false/*nls*/,level /*sourceLevel*/, null/*taskTags*/, null/*taskPriorities*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef6e222b380ffe64d2dd9c6b352eef5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "3817fb9be5d23e5c6f76a434da338233b90b5a46", "commitAfterChange": "8d9f700412e8d76f89db3ccd17a42191a013d35d", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 251, "signatureBeforeChange": " public void swap()", "signatureAfterChange": " public void swap()", "diff": ["-\tsuper.swap();", "-\ttry {", "-\t\tVerificationTypeInfo info = (VerificationTypeInfo) this.currentFrame.stackItems[this.currentFrame.numberOfStackItems - 1].clone();", "-\t\tVerificationTypeInfo info2 = (VerificationTypeInfo) this.currentFrame.stackItems[this.currentFrame.numberOfStackItems - 2].clone();", "-\t\tthis.currentFrame.stackItems[this.currentFrame.numberOfStackItems - 1] = info2;", "-\t\tthis.currentFrame.stackItems[this.currentFrame.numberOfStackItems - 2] = info;", "-\t} catch (CloneNotSupportedException e) {", "-\t\t// ignore", "-\t}", "+    super.swap();", "+    int numberOfStackItems = this.currentFrame.numberOfStackItems;", "+    if (numberOfStackItems >= 2) {", "+        try {", "+            VerificationTypeInfo info = (VerificationTypeInfo) this.currentFrame.stackItems[numberOfStackItems - 1].clone();", "+            VerificationTypeInfo info2 = (VerificationTypeInfo) this.currentFrame.stackItems[numberOfStackItems - 2].clone();", "+            this.currentFrame.stackItems[numberOfStackItems - 1] = info2;", "+            this.currentFrame.stackItems[numberOfStackItems - 2] = info;", "+        } catch (CloneNotSupportedException e) {", "+            // ignore", "+        }", "+    }"]}], "num": 53022}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d7c164fa3efb2389dfb134e19f91a8f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c94155e04d064138386d6e46a85ab28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRootInfo.java", "commitBeforeChange": "7ceb09d85452179b42407e05dd48c1ac5747d10a", "commitAfterChange": "cb8d9486d5e5f2bb20f5895e1cd434f7838ce4c6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " static Object[] computeFolderNonJavaResources(IPackageFragmentRoot root, IContainer folder, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "signatureAfterChange": " static Object[] computeFolderNonJavaResources(IPackageFragmentRoot root, IContainer folder, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "diff": ["-\tJavaProject project = (JavaProject) root.getJavaProject();", "-\t\tIClasspathEntry[] classpath = project.getResolvedClasspath();", "-\t\t\tString sourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);", "-\t\t\tString complianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\t// if package fragment root refers to folder in another IProject, then", "+\t\t\t// folder.getProject() is different than root.getJavaProject().getProject()", "+\t\t\t// use the other java project's options to verify the name", "+\t\t\tIJavaProject otherJavaProject = JavaCore.create(folder.getProject());", "+\t\t\tString sourceLevel = otherJavaProject.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\tString complianceLevel = otherJavaProject.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\tJavaProject javaProject = (JavaProject) root.getJavaProject();", "+\t\t\tIClasspathEntry[] classpath = javaProject.getResolvedClasspath();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b24ab15b2cd6ea24226a33b2db0f299", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRootInfo.java", "commitBeforeChange": "730ec55536b5ef142bbace222c0f6429c2cdd532", "commitAfterChange": "7b8b5171c862e2fd7e3a610686386f5127430137", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " static Object[] computeFolderNonJavaResources(IPackageFragmentRoot root, IContainer folder, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "signatureAfterChange": " static Object[] computeFolderNonJavaResources(IPackageFragmentRoot root, IContainer folder, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "diff": ["-\tJavaProject project = (JavaProject) root.getJavaProject();", "-\t\tIClasspathEntry[] classpath = project.getResolvedClasspath();", "-\t\t\tString sourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);", "-\t\t\tString complianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\t// if package fragment root refers to folder in another IProject, then", "+\t\t\t// folder.getProject() is different than root.getJavaProject().getProject()", "+\t\t\t// use the other java project's options to verify the name", "+\t\t\tIJavaProject otherJavaProject = JavaCore.create(folder.getProject());", "+\t\t\tString sourceLevel = otherJavaProject.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\tString complianceLevel = otherJavaProject.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\tJavaProject javaProject = (JavaProject) root.getJavaProject();", "+\t\t\tIClasspathEntry[] classpath = javaProject.getResolvedClasspath();"]}], "num": 5840}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d40a0185f21cd4d31665941e6fba100", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49a524a73aedd07d9a26b15cd8e8d0d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "ff4953718f4a4fa66bb0922d1821b22a0e2fdd84", "commitAfterChange": "b48f366c7cd622655a48ea734bdcd0016d20ec8b", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 68, "signatureBeforeChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "diff": ["+\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(typeParameter);", "+\t\t\t\tif (level != null && matchedClassContainer) {", "+\t\t\t\t\tif (level.intValue() > -1 && encloses(enclosingElement)) {", "+\t\t\t\t\t\tint offset = typeParameter.sourceStart;", "+\t\t\t\t\t\tSearchMatch match = this.patternLocator.newDeclarationMatch(typeParameter, enclosingElement, level.intValue(), typeParameter.sourceEnd-offset+1, this);", "+\t\t\t\t\t\treport(match);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(typeParameter.type);", "+\t\t\t\t\tlevel = (Integer) nodeSet.matchingNodes.removeKey(typeParameter.type);", "-\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(typeParameter.bounds[j]);", "+\t\t\t\t\t\tlevel = (Integer) nodeSet.matchingNodes.removeKey(typeParameter.bounds[j]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7bf5e79d705c1600a4c7f0e9a1394b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "5e6cea593f4be5a13a34ce02970d8b34d029a673", "commitAfterChange": "0473b4fed0787a43089ff37104916db5b418eb5b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope unused)", "signatureAfterChange": " \tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope unused)", "diff": ["-\t\t\tif ((typeDeclaration.bits & ASTNode.IsAnonymousTypeMASK) != 0) {\t\t\t\t", "-\t\t\t\treportMatching(typeDeclaration, enclosingElement, -1, nodeSet, occurrenceCount);", "+\t\t\tif (typeDeclaration.allocation == null || typeDeclaration.allocation.enumConstant == null) {", "+\t\t\t\tif ((typeDeclaration.bits & ASTNode.IsAnonymousTypeMASK) != 0) {\t\t\t\t", "+\t\t\t\t\treportMatching(typeDeclaration, enclosingElement, -1, nodeSet, occurrenceCount);", "+\t\t\t\t} else {", "+\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(typeDeclaration);", "+\t\t\t\t\treportMatching(typeDeclaration, enclosingElement, level != null ? level.intValue() : -1, nodeSet, occurrenceCount);", "+\t\t\t\t}", "-\t\t\t\treportMatching(typeDeclaration, enclosingElement, level != null ? level.intValue() : -1, nodeSet, occurrenceCount);", "+\t\t\t\tif (level != null) {", "+\t\t\t\t\tFieldDeclaration enumConstant = typeDeclaration.allocation.enumConstant;", "+\t\t\t\t\tint offset = enumConstant.sourceStart;", "+\t\t\t\t\tSearchMatch match = newDeclarationMatch(enclosingElement, level.intValue(), offset, enumConstant.sourceEnd-offset+1);", "+\t\t\t\t\treport(match);", "+\t\t\t\t}"]}], "num": 19801}
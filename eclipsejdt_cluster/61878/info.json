{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1c498e24dac4ce057dd18e744cb3b65", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d44ab3744a8334867f2ca1214def9e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldReferencePattern.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \tprivate boolean matches(NameReference nameRef, boolean resolve)", "signatureAfterChange": "\r private boolean matches(NameReference nameRef, boolean resolve)", "diff": ["-\t */\r", "-\tprivate boolean matches(NameReference nameRef, boolean resolve) {\r", "-\t\t// field name\r", "-\t\tboolean nameMatch = true;\r", "-\t\tif (this.name != null) {\r", "-\t\t\tif (nameRef instanceof SingleNameReference) {\r", "-\t\t\t\tnameMatch = matchesName(this.name, ((SingleNameReference) nameRef).token);\r", "+ */\r", "+private boolean matches(NameReference nameRef, boolean resolve) {\t\r", "+\t// field name\r", "+\tboolean nameMatch = true;\r", "+\tif (this.name != null) {\r", "+\t\tif (nameRef instanceof SingleNameReference) {\r", "+\t\t\tnameMatch = matchesName(this.name, ((SingleNameReference)nameRef).token);\r", "+\t\t} else { // QualifiedNameReference\r", "+\t\t\tnameMatch = false;\r", "+\t\t\tQualifiedNameReference qNameRef = (QualifiedNameReference)nameRef;\r", "+\t\t\tchar[][] tokens = qNameRef.tokens;\r", "+\t\t\tfor (int i = qNameRef.indexOfFirstFieldBinding-1, max = tokens.length; i < max && !nameMatch; i++){\r", "+\t\t\t\tif (i >= 0) nameMatch = matchesName(this.name, tokens[i]);\r", "+\t\t\t}\r", "+\t\t}\t\t\t\t\r", "+\t} \r", "+\tif (!nameMatch) return false;\r", "+\r", "+\tif (resolve){\t\r", "+\t\tBinding binding = nameRef.binding;\r", "+\t\tif (binding != null){\r", "+\t\t\tif (nameRef instanceof SingleNameReference){\r", "+\t\t\t\tif (binding instanceof FieldBinding){\r", "+\t\t\t\t\tif (!this.matches(nameRef.receiverType, false, (FieldBinding) binding)){\r", "+\t\t\t\t\t\treturn false;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\treturn false; // must be a field binding\r", "+\t\t\t\t}\r", "-\t\t\t\tnameMatch = false;\r", "-\t\t\t\tQualifiedNameReference qNameRef = (QualifiedNameReference) nameRef;\r", "-\t\t\t\tchar[][] tokens = qNameRef.tokens;\r", "-\t\t\t\tfor (int i = qNameRef.indexOfFirstFieldBinding - 1, max = tokens.length;\r", "-\t\t\t\t\ti < max && !nameMatch;\r", "-\t\t\t\t\ti++) {\r", "-\t\t\t\t\tif (i >= 0)\r", "-\t\t\t\t\t\tnameMatch = matchesName(this.name, tokens[i]);\r", "+\t\t\t\tQualifiedNameReference qNameRef = (QualifiedNameReference)nameRef;\r", "+\t\t\t\tTypeBinding receiverType = qNameRef.receiverType;\r", "+\t\t\t\tFieldBinding fieldBinding = null;\r", "+\t\t\t\tif (!(binding instanceof FieldBinding \r", "+\t\t\t\t\t\t&& matchesName(this.name, (fieldBinding = (FieldBinding)binding).name) \r", "+\t\t\t\t\t\t&& matches(receiverType, false, fieldBinding))){\r", "+\t\t\t\t\tif (binding instanceof VariableBinding){\r", "+\t\t\t\t\t\treceiverType = ((VariableBinding) binding).type;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tboolean otherMatch = false;\r", "+\t\t\t\t\tint otherMax = qNameRef.otherBindings == null ? 0 : qNameRef.otherBindings.length;\r", "+\t\t\t\t\tfor (int i = 0; i < otherMax && !otherMatch; i++){\r", "+\t\t\t\t\t\tFieldBinding otherBinding = qNameRef.otherBindings[i];\r", "+\t\t\t\t\t\tif (otherBinding == null) break;\r", "+\t\t\t\t\t\totherMatch = matchesName(this.name, otherBinding.name) && matches(receiverType, false, otherBinding);\r", "+\t\t\t\t\t\treceiverType = otherBinding.type;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif (!otherMatch) return false;\r", "-\t\tif (!nameMatch)\r", "-\t\t\treturn false;\r", "-\r", "-\t\tif (resolve) {\r", "-\t\t\tBinding binding = nameRef.binding;\r", "-\t\t\tif (binding != null) {\r", "-\t\t\t\tif (nameRef instanceof SingleNameReference) {\r", "-\t\t\t\t\tif (binding instanceof FieldBinding) {\r", "-\t\t\t\t\t\tif (!this.matches((FieldBinding) binding)) {\r", "-\t\t\t\t\t\t\treturn false;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\treturn false; // must be a field binding\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} else { // QualifiedNameReference\r", "-\t\t\t\t\tQualifiedNameReference qNameRef = (QualifiedNameReference) nameRef;\r", "-\t\t\t\t\tif (!(binding instanceof FieldBinding && matches((FieldBinding) binding))) {\r", "-\t\t\t\t\t\tboolean otherMatch = false;\r", "-\t\t\t\t\t\tint otherMax =\r", "-\t\t\t\t\t\t\tqNameRef.otherBindings == null ? 0 : qNameRef.otherBindings.length;\r", "-\t\t\t\t\t\tfor (int i = 0; i < otherMax && !otherMatch; i++) {\r", "-\t\t\t\t\t\t\totherMatch = matches(qNameRef.otherBindings[i]);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tif (!otherMatch)\r", "-\t\t\t\t\t\t\treturn false;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\treturn true;\r", "+\treturn true;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1270fa81c50fb57923c4209c73e201d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "4b1cb82b00b0f3c43755c37280deb732ae600c1a", "commitAfterChange": "1caf2b41c370e66c328190589dd64f01b35d7384", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void manageEnclosingInstanceAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " \tpublic void manageEnclosingInstanceAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\t\tif (!flowInfo.isReachable()) return;", "+ \t\tif (!flowInfo.isReachable()) return;", "-", "-\t\t\tnestedType.addSyntheticArgumentAndField(binding.enclosingType());\t", "+\t\t\tnestedType.addSyntheticArgumentAndField(nestedType.enclosingType());\t", "-\t\tif (binding.isAnonymousType()) { ", "-\t\t\tReferenceBinding superclassBinding = (ReferenceBinding)binding.superclass.erasure();", "+\t\tif (nestedType.isAnonymousType()) {", "+\t\t\tReferenceBinding superclassBinding = (ReferenceBinding)nestedType.superclass.erasure();", "+\t\t\t// From 1.5 on, provide access to enclosing instance synthetic constructor argument when declared inside constructor call", "+\t\t\t// only for direct anonymous type", "+\t\t\t//public class X {", "+\t\t\t//\tvoid foo() {}", "+\t\t\t//\tclass M {", "+\t\t\t//\t\tM(Object o) {}", "+\t\t\t//\t\tM() { this(new Object() { void baz() { foo(); }}); } // access to #foo() indirects through constructor synthetic arg: val$this$0", "+\t\t\t//\t}", "+\t\t\t//}", "+\t\t\tif (!methodScope.isStatic && methodScope.isConstructorCall && currentScope.environment().options.complianceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\t\tReferenceBinding enclosing = nestedType.enclosingType();", "+\t\t\t\tif (enclosing.isNestedType()) {", "+\t\t\t\t\tNestedTypeBinding nestedEnclosing = (NestedTypeBinding)enclosing;", "+//\t\t\t\t\tif (nestedEnclosing.findSuperTypeErasingTo(nestedEnclosing.enclosingType()) == null) { // only if not inheriting", "+\t\t\t\t\t\tSyntheticArgumentBinding syntheticEnclosingInstanceArgument = nestedEnclosing.getSyntheticArgument(nestedEnclosing.enclosingType(), true);", "+\t\t\t\t\t\tif (syntheticEnclosingInstanceArgument != null) {", "+\t\t\t\t\t\t\tnestedType.addSyntheticArgumentAndField(syntheticEnclosingInstanceArgument);\t", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+//\t\t\t\t}", "+\t\t\t}"]}], "num": 61878}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0a3588eaf54568bb214104cbee30190", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6caa121b909661a72921b3dba577d196", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "37468b15b5c10767a0d1f5bcf745b5635724272d", "commitAfterChange": "269c8c1f587787c02ae256af1e14f83a052a8b35", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 103, "signatureBeforeChange": " public void forbiddenReference(FieldBinding field, ASTNode location,  \t\tString messageTemplate, int problemId)", "signatureAfterChange": " public void forbiddenReference(FieldBinding field, ASTNode location,  \t\t byte classpathEntryType, String classpathEntryName, int problemId)", "diff": ["-\t\tString messageTemplate, int problemId) {", "+\t\t byte classpathEntryType, String classpathEntryName, int problemId) {", "+\tint severity = computeSeverity(problemId);", "+\tif (severity == ProblemSeverities.Ignore) return;", "+\t\tgetElaborationId(IProblem.ForbiddenReference, (byte) (FIELD_ACCESS | classpathEntryType)),", "-\t\t\tMessageFormat.format(messageTemplate, ", "-\t\t\t\tnew String[]{", "-\t\t\t\t\tnew String(field.shortReadableName()),", "-\t\t\t        new String(field.declaringClass.shortReadableName())})},", "+\t\t\tclasspathEntryName, ", "+\t\t\tnew String(field.shortReadableName()),", "+\t        new String(field.declaringClass.shortReadableName())},", "+\t    severity,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8e5430dc966e44293b19cfc4c7f8bb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "37468b15b5c10767a0d1f5bcf745b5635724272d", "commitAfterChange": "269c8c1f587787c02ae256af1e14f83a052a8b35", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 104, "signatureBeforeChange": " public void forbiddenReference(MethodBinding method, ASTNode location,  \t\tString messageTemplate, int problemId)", "signatureAfterChange": " public void forbiddenReference(MethodBinding method, ASTNode location,  \t\tbyte classpathEntryType, String classpathEntryName, int problemId)", "diff": ["-\t\tString messageTemplate, int problemId) {", "+\t\tbyte classpathEntryType, String classpathEntryName, int problemId) {", "+\tint severity = computeSeverity(problemId);", "+\tif (severity == ProblemSeverities.Ignore) return;\t", "+\t\t\tgetElaborationId(IProblem.ForbiddenReference, (byte) (CONSTRUCTOR_ACCESS | classpathEntryType)),", "-\t\t\t\tMessageFormat.format(messageTemplate,", "-\t\t\t\t\t\tnew String[]{new String(method.shortReadableName())})},", "+\t\t\t\tclasspathEntryName, ", "+\t\t\t\tnew String(method.shortReadableName())},", "+\t\t\tseverity,", "+\t\t\tgetElaborationId(IProblem.ForbiddenReference, (byte) (METHOD_ACCESS | classpathEntryType)),", "-\t\t\t\tMessageFormat.format(messageTemplate, ", "-\t\t\t\t\tnew String[]{", "-\t\t\t\t\t\tnew String(method.shortReadableName()),", "-\t\t\t\t        new String(method.declaringClass.shortReadableName())})},", "+\t\t\t\tclasspathEntryName, ", "+\t\t\t\tnew String(method.shortReadableName()),", "+\t\t        new String(method.declaringClass.shortReadableName())},", "+\t\t    severity,"]}], "num": 2271}
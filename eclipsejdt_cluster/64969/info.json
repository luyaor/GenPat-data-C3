{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "99b89364ed518a9514484e6f4cb5573b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64919efd91dc5e40b10fe5b987c74d1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "8975a4993759f4f0cb2d8fff2da5bbb83e0cb45e", "commitAfterChange": "cf2efa3dda03cbfe4678da60ea7973c079a8dcf8", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " public TypeReference createParameterizedQualifiedAssistTypeReference(char[][] previousIdentifiers, TypeReference[][] typeArguments, char[] assistName, long[] positions)", "signatureAfterChange": " public TypeReference createParameterizedQualifiedAssistTypeReference(char[][] previousIdentifiers, TypeReference[][] typeArguments, char[] assistName, TypeReference[] assistTypeArguments, long[] positions)", "diff": ["-public TypeReference createParameterizedQualifiedAssistTypeReference(char[][] previousIdentifiers, TypeReference[][] typeArguments, char[] assistName, long[] positions) {", "-\tswitch (topKnownElementKind(COMPLETION_OR_ASSIST_PARSER)) {", "-\t\tcase K_NEXT_TYPEREF_IS_EXCEPTION :", "-\t\t\treturn new CompletionOnParameterizedQualifiedTypeReference(", "-\t\t\t\tpreviousIdentifiers,", "-\t\t\t\ttypeArguments,", "-\t\t\t\tassistName,", "-\t\t\t\tpositions,", "-\t\t\t\tCompletionOnParameterizedQualifiedTypeReference.EXCEPTION);", "-\t\tcase K_NEXT_TYPEREF_IS_CLASS :", "-\t\t\treturn new CompletionOnParameterizedQualifiedTypeReference(", "-\t\t\t\tpreviousIdentifiers,", "-\t\t\t\ttypeArguments,", "-\t\t\t\tassistName,", "-\t\t\t\tpositions,", "-\t\t\t\tCompletionOnParameterizedQualifiedTypeReference.CLASS);", "-\t\tcase K_NEXT_TYPEREF_IS_INTERFACE :", "-\t\t\treturn new CompletionOnParameterizedQualifiedTypeReference(", "-\t\t\t\tpreviousIdentifiers,", "-\t\t\t\ttypeArguments,", "-\t\t\t\tassistName,", "-\t\t\t\tpositions,", "-\t\t\t\tCompletionOnParameterizedQualifiedTypeReference.INTERFACE);", "-\t\tdefault :", "-\t\t\treturn new CompletionOnParameterizedQualifiedTypeReference(", "-\t\t\t\tpreviousIdentifiers,", "-\t\t\t\ttypeArguments,", "-\t\t\t\tassistName,", "-\t\t\t\tpositions); ", "+public TypeReference createParameterizedQualifiedAssistTypeReference(char[][] previousIdentifiers, TypeReference[][] typeArguments, char[] assistName, TypeReference[] assistTypeArguments, long[] positions) {", "+\tboolean isParameterized = false;", "+\tfor (int i = 0; i < typeArguments.length; i++) {", "+\t\tif(typeArguments[i] != null) {", "+\t\t\tisParameterized = true;", "+\t\t}", "+\t}", "+\tif(!isParameterized) {", "+\t\treturn this.createQualifiedAssistTypeReference(previousIdentifiers, assistName, positions);", "+\t} else {", "+\t\tswitch (topKnownElementKind(COMPLETION_OR_ASSIST_PARSER)) {", "+\t\t\tcase K_NEXT_TYPEREF_IS_EXCEPTION :", "+\t\t\t\treturn new CompletionOnParameterizedQualifiedTypeReference(", "+\t\t\t\t\tpreviousIdentifiers,", "+\t\t\t\t\ttypeArguments,", "+\t\t\t\t\tassistName,", "+\t\t\t\t\tpositions,", "+\t\t\t\t\tCompletionOnParameterizedQualifiedTypeReference.EXCEPTION);", "+\t\t\tcase K_NEXT_TYPEREF_IS_CLASS :", "+\t\t\t\treturn new CompletionOnParameterizedQualifiedTypeReference(", "+\t\t\t\t\tpreviousIdentifiers,", "+\t\t\t\t\ttypeArguments,", "+\t\t\t\t\tassistName,", "+\t\t\t\t\tpositions,", "+\t\t\t\t\tCompletionOnParameterizedQualifiedTypeReference.CLASS);", "+\t\t\tcase K_NEXT_TYPEREF_IS_INTERFACE :", "+\t\t\t\treturn new CompletionOnParameterizedQualifiedTypeReference(", "+\t\t\t\t\tpreviousIdentifiers,", "+\t\t\t\t\ttypeArguments,", "+\t\t\t\t\tassistName,", "+\t\t\t\t\tpositions,", "+\t\t\t\t\tCompletionOnParameterizedQualifiedTypeReference.INTERFACE);", "+\t\t\tdefault :", "+\t\t\t\treturn new CompletionOnParameterizedQualifiedTypeReference(", "+\t\t\t\t\tpreviousIdentifiers,", "+\t\t\t\t\ttypeArguments,", "+\t\t\t\t\tassistName,", "+\t\t\t\t\tpositions); ", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8050b00636e9f49cb1719519123fddd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "c273134bf110ff6a8ee2009bd261955b7caa4081", "commitAfterChange": "a15857c78be035e31c0bb57b42d7b9ffa74cef8c", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 94, "signatureBeforeChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "diff": ["-\t\t\t\t\tif(methodBindings != null &&", "-\t\t\t\t\t\t\tmethodBindings.length == 1 &&", "+\t\t\t\t\tif (methodBindings != null &&", "+\t\t\t\t\t\t\tmethodBindings.length > 0 &&", "-\t\t\t\t\t\taddExpectedType(methodBindings[0].returnType, scope);", "+\t\t\t\t\t\tboolean canBeSingleMemberAnnotation = true;", "+\t\t\t\t\t\tdone : for (int i = 1; i < methodBindings.length; i++) {", "+\t\t\t\t\t\t\tif(methodBindings[i].getDefaultValue() == null) {", "+\t\t\t\t\t\t\t\tcanBeSingleMemberAnnotation = false;", "+\t\t\t\t\t\t\t\tbreak done;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (canBeSingleMemberAnnotation) {", "+\t\t\t\t\t\t\tthis.assistNodeCanBeSingleMemberAnnotation = canBeSingleMemberAnnotation;", "+\t\t\t\t\t\t\taddExpectedType(methodBindings[0].returnType, scope);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8c4c81536d125fcd9a7993d4b8c2d65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "100013bece0eb4f533563100e2e2c492eafe5eed", "commitAfterChange": "a836581cacf8d7a555ca92aa4df554df081b1e09", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["+\t\t\t\t\t\t\tint numberOfEnclosingType = 0;", "+\t\t\t\t\t\t\tfor (int i = 0, max = typeArguments.length; i < max; i++) {", "+\t\t\t\t\t\t\t\tif (typeArguments[i] != null) {", "+\t\t\t\t\t\t\t\t\tnumberOfEnclosingType++;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\trecordPendingNameScopeResolution(name);", "+\t\t\t\t\t\t\t\trecordPendingNameScopeResolution(simpleName);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\t\t\tthis.recordNodes(currentType, typeReference);"]}], "num": 64969}
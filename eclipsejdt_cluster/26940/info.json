{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a02d2befd27d46756f7ff83e635d43cc", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1db8e7450473da01523a53f75a76b0ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/DeclarationOfReferencedTypesPattern.java", "commitBeforeChange": "65674b7aa655a5c156f52d0b9b7eeb56e8bfec23", "commitAfterChange": "3043b7643a0760e0bf0e70d9da05eb1fd7cbd79c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": "\r protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["+\tthis.reportDeclaration(typeBinding, maxType, locator);\r", "+}\r", "-\t\t\t\tlocator.reportBinaryMatch(resource, type, info, accuracy);\r", "-\t\t\t\tlocator.report(resource, typeDecl.sourceStart, typeDecl.sourceEnd, type, accuracy);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c82b44e728c90d576ca1a803047914e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/TypeNameMatchRequestorWrapper.java", "commitBeforeChange": "b9b3b8c1fedf5d6daa213336839897b001a3416e", "commitAfterChange": "bdd2ddc06125eff9d34246fb7941b569e87e3115", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access)", "signatureAfterChange": " public void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access)", "diff": ["-\ttry {", "-\t\tIType type = null;", "-\t\tif (this.handleFactory != null) {", "-\t\t\tOpenable openable = this.handleFactory.createOpenable(path, this.scope);", "-\t\t\tif (openable == null) return;", "-\t\t\tswitch (openable.getElementType()) {", "-\t\t\t\tcase IJavaElement.COMPILATION_UNIT:", "-\t\t\t\t\tICompilationUnit cu = (ICompilationUnit) openable;", "-\t\t\t\t\tif (enclosingTypeNames != null && enclosingTypeNames.length > 0) {", "-\t\t\t\t\t\ttype = cu.getType(new String(enclosingTypeNames[0]));", "-\t\t\t\t\t\tfor (int j=1, l=enclosingTypeNames.length; j<l; j++) {", "-\t\t\t\t\t\t\ttype = type.getType(new String(enclosingTypeNames[j]));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\ttype = type.getType(new String(simpleTypeName));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\ttype = cu.getType(new String(simpleTypeName));", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IJavaElement.CLASS_FILE:", "-\t\t\t\t\ttype = ((IClassFile)openable).getType();", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t} else {", "-\t\t\tint separatorIndex= path.indexOf(IJavaSearchScope.JAR_FILE_ENTRY_SEPARATOR);", "-\t\t\ttype = separatorIndex == -1", "-\t\t\t\t? createTypeFromPath(path, new String(simpleTypeName), enclosingTypeNames)", "-\t\t\t\t: createTypeFromJar(path, separatorIndex);", "-\t\t}", "+\tIType type = getType(modifiers, packageName, simpleTypeName, enclosingTypeNames, path, access);", "+\t// Accept match if the type has been found", "+\tif (type != null) {", "+\t\t// hierarchy scopes require one more check:", "+\t\tif (!(this.scope instanceof HierarchyScope) || ((HierarchyScope)this.scope).enclosesFineGrained(type)) {", "-\t\t// Accept match if the type has been found", "-\t\tif (type != null) {", "-\t\t\t// hierarchy scopes require one more check:", "-\t\t\tif (!(this.scope instanceof HierarchyScope) || ((HierarchyScope)this.scope).enclosesFineGrained(type)) {", "+\t\t\t// Create the match", "+\t\t\tfinal JavaSearchTypeNameMatch match = new JavaSearchTypeNameMatch(type, modifiers);", "-\t\t\t\t// Create the match", "-\t\t\t\tfinal JavaSearchTypeNameMatch match = new JavaSearchTypeNameMatch(type, modifiers);", "-", "-\t\t\t\t// Update match accessibility", "-\t\t\t\tif(access != null) {", "-\t\t\t\t\tswitch (access.getProblemId()) {", "-\t\t\t\t\t\tcase IProblem.ForbiddenReference:", "-\t\t\t\t\t\t\tmatch.setAccessibility(IAccessRule.K_NON_ACCESSIBLE);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IProblem.DiscouragedReference:", "-\t\t\t\t\t\t\tmatch.setAccessibility(IAccessRule.K_DISCOURAGED);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "+\t\t\t// Update match accessibility", "+\t\t\tif(access != null) {", "+\t\t\t\tswitch (access.getProblemId()) {", "+\t\t\t\t\tcase IProblem.ForbiddenReference:", "+\t\t\t\t\t\tmatch.setAccessibility(IAccessRule.K_NON_ACCESSIBLE);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IProblem.DiscouragedReference:", "+\t\t\t\t\t\tmatch.setAccessibility(IAccessRule.K_DISCOURAGED);", "+\t\t\t\t\t\tbreak;", "-", "-\t\t\t\t// Accept match", "-\t\t\t\tthis.requestor.acceptTypeNameMatch(match);", "+\t\t\t// Accept match", "+\t\t\tthis.requestor.acceptTypeNameMatch(match);", "-\t} catch (JavaModelException e) {", "-\t\t// skip", "-}"]}], "num": 26940}
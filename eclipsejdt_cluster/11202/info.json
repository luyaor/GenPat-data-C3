{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e7b7b5a82cd5d270851b45a95e9cd5e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7a562df72cc3a0efb40ba097787c44f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "900392dc83f32684036212f916a5915ba3721662", "commitAfterChange": "adfa6eea97da9a8b8e860dcf2bcb64f1459b7350", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 33, "signatureBeforeChange": "  \tprivate String getBytesAsString(final byte[] bytes, final String lineSeparator, final int tabNumber)", "signatureAfterChange": "  \tprivate String disassemble(IVerificationTypeInfo[] infos, String lineSeparator, int tabNumber, int mode)", "diff": ["+\tprivate String disassemble(IVerificationTypeInfo[] infos, String lineSeparator, int tabNumber, int mode) {", "+\t\tStringBuffer buffer = new StringBuffer();", "+\t\tfor (int i = 0, max = infos.length; i < max; i++) {", "+\t\t\tif(i != 0) buffer.append(',');", "+\t\t\tswitch(infos[i].getTag()) {", "+\t\t\t\tcase IVerificationTypeInfo.ITEM_DOUBLE :", "+\t\t\t\t\tbuffer.append(\"double\"); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IVerificationTypeInfo.ITEM_FLOAT :", "+\t\t\t\t\tbuffer.append(\"float\"); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IVerificationTypeInfo.ITEM_INTEGER :", "+\t\t\t\t\tbuffer.append(\"int\"); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IVerificationTypeInfo.ITEM_LONG :", "+\t\t\t\t\tbuffer.append(\"long\"); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IVerificationTypeInfo.ITEM_NULL :", "+\t\t\t\t\tbuffer.append(\"null\"); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IVerificationTypeInfo.ITEM_OBJECT :", "+\t\t\t\t\tfinal char[] classTypeName = infos[i].getClassTypeName();", "+\t\t\t\t\tCharOperation.replace(classTypeName, '/', '.');", "+\t\t\t\t\tbuffer.append(returnClassName(classTypeName, '.', mode));", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IVerificationTypeInfo.ITEM_TOP :", "+\t\t\t\t\tbuffer.append(\"top\"); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IVerificationTypeInfo.ITEM_UNINITIALIZED :", "+\t\t\t\t\tbuffer.append(\"uninitialized\"); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IVerificationTypeInfo.ITEM_UNINITIALIZED_THIS :", "+\t\t\t\t\tbuffer.append(\"uninitialized_this\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "+\t\treturn String.valueOf(buffer);", "+\t}", "-\tprivate String getBytesAsString(final byte[] bytes, final String lineSeparator, final int tabNumber) {", "-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tNumberFormat format = NumberFormat.getInstance();", "-\t\tformat.setMaximumIntegerDigits(3);", "-\t\tformat.setMinimumIntegerDigits(3);", "-\t\tfinal int length = bytes.length;", "-\t\tif (length == 0) {", "-\t\t\treturn \"{}\"; //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tbuffer.append('{');", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\tString hexString = Integer.toHexString(bytes[0] & 0xFF);", "-\t\t\tswitch(hexString.length()) {", "-\t\t\t\tcase 1 :", "-\t\t\t\t\tbuffer.append('0');", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tbuffer.append(hexString).append(' ');", "-\t\t\thexString = Integer.toHexString(bytes[1] & 0xFF);", "-\t\t\tswitch(hexString.length()) {", "-\t\t\t\tcase 1 :", "-\t\t\t\t\tbuffer.append('0');", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tbuffer.append(hexString);", "-\t\t\tfor (int i = 2; i < length; i++) {", "-\t\t\t\tif ((i - 2) % 11 == 0) {", "-\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(' ');", "-\t\t\t\t}", "-\t\t\t\tfinal int currentByte = bytes[i] & 0xFF;", "-\t\t\t\thexString = Integer.toHexString(currentByte).toUpperCase();", "-\t\t\t\tswitch(hexString.length()) {", "-\t\t\t\t\tcase 1 :", "-\t\t\t\t\t\tbuffer.append('0');", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tbuffer.append(hexString).append('(').append(format.format(currentByte)).append(')');", "-\t\t\t}", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "-\t\t\tbuffer.append('}');", "-\t\t}", "-\t\treturn String.valueOf(buffer);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebb1b877be5ebc5ac15609cb6cb703e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/LRUCache.java", "commitBeforeChange": "7e5a64a2362b3dd1fe4f61f14dc42b1a838f26ec", "commitAfterChange": "0241b6a034ef8fa4f27f3bd260b936d3f2c0aea7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t\tpublic synchronized String printStats()", "signatureAfterChange": " \t\tpublic synchronized String printStats()", "diff": ["-\t\t\tint oldestCounter = getOldestTimestampCounter();", "-\t\t\tif (oldestCounter == 0) {", "+\t\t\tint numberOfElements = LRUCache.this.currentSpace;", "+\t\t\tif (numberOfElements == 0) {", "-\t\t\tlong currentTime = System.currentTimeMillis();", "-\t\t\tbuffer.append(\"Oldest element (\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(getAge(oldestCounter, currentTime));", "-\t\t\tbuffer.append(\" old):\\n\"); //$NON-NLS-1$", "-\t\t\tObject element = getOldestElement();", "-\t\t\tif (element instanceof JavaElement) {", "-\t\t\t\tbuffer.append(((JavaElement) element).toStringWithAncestors());", "-\t\t\t\tbuffer.append('\\n');", "-\t\t\t}", "-\t\t\tbuffer.append('\\n');", "-\t\t\tint lastCount = 0;", "-\t\t\tint increment = LRUCache.this.currentSpace / 5;", "+\t\t\tbuffer.append(\"Number of elements in cache: \"); //$NON-NLS-1$", "+\t\t\tbuffer.append(numberOfElements);", "+\t\t\t", "+\t\t\tfinal int numberOfGroups = 5;", "+\t\t\tint numberOfElementsPerGroup = numberOfElements / numberOfGroups;", "+\t\t\tbuffer.append(\"\\n(\"); //$NON-NLS-1$", "+\t\t\tbuffer.append(numberOfGroups);", "+\t\t\tbuffer.append(\" groups of \"); //$NON-NLS-1$", "+\t\t\tbuffer.append(numberOfElementsPerGroup);", "+\t\t\tbuffer.append(\" elements)\"); //$NON-NLS-1$", "+\t\t\tbuffer.append(\"\\n\\nAverage age:\"); //$NON-NLS-1$", "+\t\t\tint groupNumber = 1;", "+\t\t\tlong currentTime = System.currentTimeMillis();", "+\t\t\tlong accumulatedTime = 0;", "-\t\t\t\tif (++elementCounter - lastCount >= increment) {", "-\t\t\t\t\tbuffer.append(elementCounter);", "-\t\t\t\t\tbuffer.append(\" elements are at least \"); //$NON-NLS-1$", "-\t\t\t\t\tbuffer.append(getAge(entry.timestamp, currentTime));", "-\t\t\t\t\tbuffer.append(\" old\\n\"); //$NON-NLS-1$", "-\t\t\t\t\tlastCount = elementCounter;", "+\t\t\t\tlong timeStamps = getTimestamps(entry.timestamp);", "+\t\t\t\tif (timeStamps > 0) {", "+\t\t\t\t\taccumulatedTime += timeStamps;", "+\t\t\t\t\telementCounter++;", "+\t\t\t\t}", "+\t\t\t\tif (elementCounter >= numberOfElementsPerGroup && (groupNumber < numberOfGroups)) {", "+\t\t\t\t\tbuffer.append(\"\\nGroup \"); //$NON-NLS-1$", "+\t\t\t\t\tbuffer.append(groupNumber);", "+\t\t\t\t\tif (groupNumber == 1) {", "+\t\t\t\t\t\tbuffer.append(\" (oldest)\\t: \"); //$NON-NLS-1$", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbuffer.append(\"\\t\\t: \"); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tgroupNumber++;", "+\t\t\t\t\tbuffer.append(getAverageAge(accumulatedTime, elementCounter, currentTime));", "+\t\t\t\t\telementCounter = 0;", "+\t\t\t\t\taccumulatedTime = 0;", "-\t\t\tbuffer.append(LRUCache.this.currentSpace);", "-\t\t\tbuffer.append(\" elements are at least \"); //$NON-NLS-1$", "-\t\t\tbuffer.append(getAge(LRUCache.this.entryQueue.timestamp, currentTime));", "-\t\t\tbuffer.append(\" old\"); //$NON-NLS-1$", "+\t\t\tbuffer.append(\"\\nGroup \"); //$NON-NLS-1$", "+\t\t\tbuffer.append(numberOfGroups);", "+\t\t\tbuffer.append(\" (youngest)\\t: \"); //$NON-NLS-1$", "+\t\t\tbuffer.append(getAverageAge(accumulatedTime, elementCounter, currentTime));"]}], "num": 11202}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e78d0c7d0f50598743ee87a8321a3303", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f11d64427f17799b812bbfbfa862e61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "617fadfcdd9d3f85493c65c27088f408a3cd9c9d", "commitAfterChange": "b5a733b30758b3fb9ec3d527e7425b5399ba8dc0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \tpublic void checkExternalJarChanges(IJavaProject[] projects, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "\r \tpublic void checkExternalArchiveChanges(IJavaElement[] refreshedElements, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\tpublic void checkExternalJarChanges(IJavaProject[] projects, IProgressMonitor monitor) throws JavaModelException {\r", "+\tpublic void checkExternalArchiveChanges(IJavaElement[] refreshedElements, IProgressMonitor monitor) throws JavaModelException {\r", "-\t\t\tHashMap externalJARsStatus = new HashMap();\r", "-\t\t\t\r", "+\t\t\tHashMap externalArchivesStatus = new HashMap();\r", "+\t\t\t\r", "+\t\t\t// find JARs to refresh\r", "+\t\t\tHashSet archivePathsToRefresh = new HashSet();\r", "+\t\t\tfor (int i = 0, elementsLength = refreshedElements.length; i < elementsLength; i++){\r", "+\t\t\t\tIJavaElement element = refreshedElements[i];\r", "+\t\t\t\tswitch(element.getElementType()){\r", "+\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT :\r", "+\t\t\t\t\t\tarchivePathsToRefresh.add(element.getPath());\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase IJavaElement.JAVA_PROJECT :\r", "+\t\t\t\t\t\tIClasspathEntry[] classpath = ((IJavaProject) element).getResolvedClasspath(true);\r", "+\t\t\t\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++){\r", "+\t\t\t\t\t\t\tif (classpath[j].getEntryKind() == IClasspathEntry.CPE_LIBRARY){\r", "+\t\t\t\t\t\t\t\tarchivePathsToRefresh.add(classpath[j].getPath());\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase IJavaElement.JAVA_MODEL :\r", "+\t\t\t\t\t\tIJavaProject[] projects = manager.getJavaModel().getOldJavaProjectsList();\r", "+\t\t\t\t\t\tfor (int j = 0, projectsLength = projects.length; j < projectsLength; j++){\r", "+\t\t\t\t\t\t\tclasspath = ((IJavaProject) projects[j]).getResolvedClasspath(true);\r", "+\t\t\t\t\t\t\tfor (int k = 0, cpLength = classpath.length; k < cpLength; k++){\r", "+\t\t\t\t\t\t\t\tif (classpath[k].getEntryKind() == IClasspathEntry.CPE_LIBRARY){\r", "+\t\t\t\t\t\t\t\t\tarchivePathsToRefresh.add(classpath[k].getPath());\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\t// perform refresh\r", "-\t\t\tif (projects == null){\r", "-\t\t\t\tprojects = manager.getJavaModel().getOldJavaProjectsList();\r", "-\t\t\t}\t\t\t\r", "+\t\t\tIJavaProject[] projects = manager.getJavaModel().getOldJavaProjectsList();\r", "-\t\t\t\t\t\tString status = (String)externalJARsStatus.get(entryPath); \r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\tif (!archivePathsToRefresh.contains(entryPath)) continue; // not supposed to be refreshed\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\tString status = (String)externalArchivesStatus.get(entryPath); \r", "-\t\t\t\t\t\t\t\t\texternalJARsStatus.put(entryPath, EXTERNAL_JAR_REMOVED);\r", "+\t\t\t\t\t\t\t\t\texternalArchivesStatus.put(entryPath, EXTERNAL_JAR_REMOVED);\r", "-\t\t\t\t\t\t\t\t\t\texternalJARsStatus.put(entryPath, EXTERNAL_JAR_REMOVED);\r", "+\t\t\t\t\t\t\t\t\t\texternalArchivesStatus.put(entryPath, EXTERNAL_JAR_REMOVED);\r", "-\t\t\t\t\t\t\t\t\t\texternalJARsStatus.put(entryPath, EXTERNAL_JAR_CHANGED);\r", "+\t\t\t\t\t\t\t\t\t\texternalArchivesStatus.put(entryPath, EXTERNAL_JAR_CHANGED);\r", "-\t\t\t\t\t\t\t\t\t\texternalJARsStatus.put(entryPath, EXTERNAL_JAR_UNCHANGED);\r", "+\t\t\t\t\t\t\t\t\t\texternalArchivesStatus.put(entryPath, EXTERNAL_JAR_UNCHANGED);\r", "-\t\t\t\t\t\t\t\t\t\texternalJARsStatus.put(entryPath, EXTERNAL_JAR_UNCHANGED);\r", "+\t\t\t\t\t\t\t\t\t\texternalArchivesStatus.put(entryPath, EXTERNAL_JAR_UNCHANGED);\r", "-\t\t\t\t\t\t\t\t\t\texternalJARsStatus.put(entryPath, EXTERNAL_JAR_ADDED);\r", "+\t\t\t\t\t\t\t\t\t\texternalArchivesStatus.put(entryPath, EXTERNAL_JAR_ADDED);\r", "-\t\t\t\t\t\t\t\texternalJARsStatus.put(entryPath, INTERNAL_JAR_IGNORE);\r", "+\t\t\t\t\t\t\t\texternalArchivesStatus.put(entryPath, INTERNAL_JAR_IGNORE);\r", "-\t\t\t\t\t\tstatus = (String)externalJARsStatus.get(entryPath); \r", "+\t\t\t\t\t\tstatus = (String)externalArchivesStatus.get(entryPath); \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce789386a8b7f54714b354d0d8f954b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "f6037f3e0e76e18ea82dd93d13e55dc410583456", "commitAfterChange": "a5577117cb4a612450eddce3c0b20eb90f21cb89", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprivate boolean createExternalArchiveDelta(IProgressMonitor monitor)", "signatureAfterChange": " \tprivate boolean createExternalArchiveDelta(IProgressMonitor monitor)", "diff": ["-\t\t\t\t\tJavaProject project = (JavaProject) element;", "-\t\t\t\t\tif (!JavaProject.hasJavaNature(project.getProject())) {", "+\t\t\t\t\tJavaProject javaProject = (JavaProject) element;", "+\t\t\t\t\tif (!JavaProject.hasJavaNature(javaProject.getProject())) {", "-\t\t\t\t\t\tclasspath = project.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "+\t\t\t\t\t\tclasspath = javaProject.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "-\t\t\t\t\tIJavaProject[] projects;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tprojects = this.manager.getJavaModel().getOldJavaProjectsList();", "-\t\t\t\t\t} catch (JavaModelException e1) {", "-\t\t\t\t\t\t// cannot retrieve old projects list -> ignore", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t}", "-\t\t\t\t\tfor (int j = 0, projectsLength = projects.length; j < projectsLength; j++){", "-\t\t\t\t\t\tproject = (JavaProject) projects[j];", "-\t\t\t\t\t\tif (!JavaProject.hasJavaNature(project.getProject())) {", "+\t\t\t\t\tIterator projectNames = this.state.getOldJavaProjecNames().iterator();", "+\t\t\t\t\twhile (projectNames.hasNext()) {", "+\t\t\t\t\t\tString projectName = (String) projectNames.next();", "+\t\t\t\t\t\tIProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);", "+\t\t\t\t\t\tif (!JavaProject.hasJavaNature(project)) {", "+\t\t\t\t\t\tjavaProject = (JavaProject) JavaCore.create(project);", "-\t\t\t\t\t\t\tclasspath = project.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "+\t\t\t\t\t\t\tclasspath = javaProject.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "-\t\tIJavaProject[] projects;", "-\t\ttry {", "-\t\t\tprojects = this.manager.getJavaModel().getOldJavaProjectsList();", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// cannot retrieve old projects list -> give up", "-\t\t\treturn false;", "-\t\t}", "+\t\tIterator projectNames = this.state.getOldJavaProjecNames().iterator();", "-\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\twhile (projectNames.hasNext()) {", "-\t\t\tJavaProject project = (JavaProject) projects[i];", "-\t\t\tif (!JavaProject.hasJavaNature(project.getProject())) {", "+\t\t\tString projectName = (String) projectNames.next();", "+\t\t\tIProject project = wksRoot.getProject(projectName);", "+\t\t\tif (!JavaProject.hasJavaNature(project)) {", "+\t\t\tJavaProject javaProject = (JavaProject) JavaCore.create(project);", "-\t\t\t\tentries = project.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "+\t\t\t\tentries = javaProject.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "-\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)project.getPackageFragmentRoot(entryPath.toString());", "+\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) javaProject.getPackageFragmentRoot(entryPath.toString());", "-\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)project.getPackageFragmentRoot(entryPath.toString());", "+\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) javaProject.getPackageFragmentRoot(entryPath.toString());", "-\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)project.getPackageFragmentRoot(entryPath.toString());", "+\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) javaProject.getPackageFragmentRoot(entryPath.toString());"]}], "num": 50760}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3bb808df43a0fb006a761f382a6f9061", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f2362270d142eef23afa269e2d82633", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelOperation.java", "commitBeforeChange": "465d39fc0cb8ac60a1b9d098d2c75aab057cb4ee", "commitAfterChange": "0672a6103898dc8927891a504296eb1fa16ff5d7", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tprotected void postAction(IPostAction action, int insertionMode)", "signatureAfterChange": " \tprotected void postAction(IPostAction action, int insertionMode)", "diff": ["-\t\tif (outerMostOp.actions == null) {", "-\t\t\touterMostOp.actions = new IPostAction[1];", "-\t\t\touterMostOp.actions[0] = action;", "+\t\tIPostAction[] postActions = outerMostOp.actions;", "+\t\tif (postActions == null) {", "+\t\t\touterMostOp.actions = postActions = new IPostAction[1];", "+\t\t\tpostActions[0] = action;", "-\t\t\t\tcase REPLACE_LAST :", "-\t\t\t\t\tint existing = outerMostOp.lastActionWithID(id);", "-\t\t\t\t\tif (existing != -1) {", "-\t\t\t\t\t\touterMostOp.actions[existing] = action;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\touterMostOp.addAction(action);", "+\t\t\t\tcase REMOVEALL_APPEND :", "+\t\t\t\t\tint index = -1;", "+\t\t\t\t\twhile ((index = outerMostOp.firstActionWithID(id, index+1)) >= 0) {", "+\t\t\t\t\t\t// remove action[index]", "+\t\t\t\t\t\tSystem.arraycopy(postActions, index+1, postActions, index, outerMostOp.actionsPtr - index);", "+\t\t\t\t\t\tpostActions[outerMostOp.actionsPtr--] = null;", "+\t\t\t\t\touterMostOp.addAction(action);", "-\t\t\t\t\texisting = outerMostOp.lastActionWithID(id);", "-\t\t\t\t\tif (existing == -1) {", "+\t\t\t\t\tif (outerMostOp.firstActionWithID(id, 0) < 0) {", "-\t\t\t\tcase DEFAULT:", "+\t\t\t\tcase APPEND:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3c8c03ccc08acdf99068b7464ba6aa2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "c98abd1679793c741445024ae2ee115b37f6fe95", "commitAfterChange": "b2ee2f0e0ad1c5d61d4417df1a17fc01d93cc41f", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic void printComment(boolean insertNewLineAfterComment)", "signatureAfterChange": "  \tpublic void printComment()", "diff": ["-\tpublic void printComment(boolean insertNewLineAfterComment) {", "+\tpublic void printComment() {", "+\t\t\tboolean hasComment = false;", "+\t\t\tboolean hasLineComment = false;", "-\t\t\t\t\t\tpreserveEmptyLines(count);", "+\t\t\t\t\t\tif (count > 1) {", "+\t\t\t\t\t\t\tif (hasLineComment) {", "+\t\t\t\t\t\t\t\t// the line comment consumed of of the line break", "+\t\t\t\t\t\t\t\tpreserveEmptyLines(count + 1);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tpreserveEmptyLines(count);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (count == 1) {", "+\t\t\t\t\t\t\tif (hasLineComment) {", "+\t\t\t\t\t\t\t\tpreserveEmptyLines(1);", "+\t\t\t\t\t\t\t} else if (hasComment) {", "+\t\t\t\t\t\t\t\tprintNewLine();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;\t\t\t\t\t\t", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\thasLineComment = true;\t\t\t\t\t", "-\t\t\t\t\t\tif (insertNewLineAfterComment) {", "-\t\t\t\t\t\t\tthis.printNewLine();", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\thasLineComment = false;", "+\t\t\t\t\t\thasComment = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c602a8815252bc3437ea6ae930b337c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "c98abd1679793c741445024ae2ee115b37f6fe95", "commitAfterChange": "b2ee2f0e0ad1c5d61d4417df1a17fc01d93cc41f", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tpublic void printTrailingComment()", "signatureAfterChange": "  \tpublic void printTrailingComment()", "diff": ["-\t\t\tboolean hasCommentLine = false;", "-\t\t\twhile (!hasCommentLine && (this.currentToken = this.scanner.getNextToken()) != ITerminalSymbols.TokenNameEOF) {", "-\t\t\t\tswitch(this.currentToken) {", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameWHITESPACE :", "-\t\t\t\t\t\tint count = 0;", "-\t\t\t\t\t\tchar[] whiteSpaces = this.scanner.getCurrentTokenSource();", "-\t\t\t\t\t\tfor (int i = 0, max = whiteSpaces.length; i < max; i++) {", "-\t\t\t\t\t\t\tswitch(whiteSpaces[i]) {", "-\t\t\t\t\t\t\t\tcase '\\r' :", "-\t\t\t\t\t\t\t\t\tif ((i + 1) < max) {", "-\t\t\t\t\t\t\t\t\t\tif (whiteSpaces[i + 1] == '\\n') {", "-\t\t\t\t\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\tcase '\\n' :", "-\t\t\t\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\t\tif (count > 0) {", "-\t\t\t\t\t\t\tif (!hasCommentLine) {", "-\t\t\t\t\t\t\t\tpreserveEmptyLines(count);", "-\t\t\t\t\t\t\t\tthis.printNewLine();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_LINE :", "-\t\t\t\t\t\tthis.printCommentLine(this.scanner.getCurrentTokenSource(), this.scanner.getCurrentTokenStartPosition());", "-\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\t\thasCommentLine = true;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_BLOCK :", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_JAVADOC :", "-\t\t\t\t\t\tthis.printBlockComment(this.scanner.getRawTokenSource(), this.scanner.getCurrentTokenStartPosition());", "-\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault :", "-\t\t\t\t\t\tif (!hasCommentLine) {", "-\t\t\t\t\t\t\tthis.printNewLine();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition);", "-\t\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (InvalidInputException e) {", "-\t\t\tthrow new AbortFormatting(e);", "-\t\t}", "-\t}", "+\t\t\tboolean hasComment = false;", "+\t\t\tboolean hasLineComment = false;", "+\t\t\t\t\t\t\t\t\t\tcount++; ", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;\t\t\t\t\t\t", "+\t\t\t\t\t\tif (count > 1) {", "+\t\t\t\t\t\t\tif (hasLineComment) {", "+\t\t\t\t\t\t\t\tpreserveEmptyLines(count + 1);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tpreserveEmptyLines(count);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t} else if (count == 1) {", "+\t\t\t\t\t\t\tif (hasLineComment) {", "+\t\t\t\t\t\t\t\tpreserveEmptyLines(1);", "+\t\t\t\t\t\t\t} else if (hasComment) {", "+\t\t\t\t\t\t\t\tprintNewLine();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\thasLineComment = true;\t\t\t\t\t", "+\t\t\t\t\t\thasLineComment = false;", "+\t\t\t\t\t\thasComment = true;", "+\t\t\t\t\t\t// step back one token", "+\t\t\t\t\t\tprintNewLine();"]}], "num": 4971}
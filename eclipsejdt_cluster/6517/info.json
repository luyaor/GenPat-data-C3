{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e93b819ee209522ad7f0a0b57046fc3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "272036c2d865c34e8f3c82af39ffa3c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchAnnotationProcessorManager.java", "commitBeforeChange": "4c8a3ba34c720dda98e8d56ba71f0361efbe740b", "commitAfterChange": "c06cfa4791f8eb98381a7dd55dd6950dbcddf37c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void configure(Main batchCompiler, String[] commandLineArguments)", "signatureAfterChange": "  \t@Override \tpublic void configure(Object batchCompiler, String[] commandLineArguments)", "diff": ["-\tpublic void configure(Main batchCompiler, String[] commandLineArguments) {", "+\tpublic void configure(Object batchCompiler, String[] commandLineArguments) {", "-\t\tBatchProcessingEnvImpl processingEnv = new BatchProcessingEnvImpl(this, batchCompiler, commandLineArguments);", "+\t\tBatchProcessingEnvImpl processingEnv = new BatchProcessingEnvImpl(this, (Main) batchCompiler, commandLineArguments);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "947beecb1dea79c2ebd9ed6bbd7dcc8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "b6254fb64d881dcd86d8033c8a2a995ebecfe758", "commitAfterChange": "a9b4a96f89a5001ca6f786611e4b075147feb7c6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate static void checkAlternateBinding(BlockScope scope, Expression receiver, ReferenceBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] originalArgumentTypes, TypeBinding[] alternateArgumentTypes, final InvocationSite invocationSite)", "signatureAfterChange": "  \tprivate static void checkAlternateBinding(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] originalArgumentTypes, TypeBinding[] alternateArgumentTypes, final InvocationSite invocationSite)", "diff": ["-\tprivate static void checkAlternateBinding(BlockScope scope, Expression receiver, ReferenceBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] originalArgumentTypes, TypeBinding[] alternateArgumentTypes, final InvocationSite invocationSite) {", "+\tprivate static void checkAlternateBinding(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] originalArgumentTypes, TypeBinding[] alternateArgumentTypes, final InvocationSite invocationSite) {", "-\t\t\t\tbindingIfNoCast = scope.getConstructor(receiverType, alternateArgumentTypes, fakeInvocationSite);", "+\t\t\t\tbindingIfNoCast = scope.getConstructor((ReferenceBinding)receiverType, alternateArgumentTypes, fakeInvocationSite);"]}], "num": 6517}
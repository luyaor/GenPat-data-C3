{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3dc42620e636fe5c97c43eea96ce708", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "792a19dec151ccb5fa4172848c4ac49d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/IndexSummary.java", "commitBeforeChange": "eaed8b4c57bf985bb0b4f36634f058b94194b2e7", "commitAfterChange": "9b0b9be20fe15cfaaf5f2085fd6c89bedb4ddb87", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public int getFirstBlockLocationForPrefix(char[] prefix)", "signatureAfterChange": " public int getFirstBlockLocationForPrefix(char[] prefix)", "diff": ["-\treturn getFirstBlockLocationForPrefix(prefix, true);", "-}", "+\t\tint compare = CharOperation.compareWith(entry.word, prefix);", "+\t\t\tif (!CharOperation.prefixEquals(prefix, entry.word))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97c09da05c8498a1b1417e5d4e274244", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Clinit.java", "commitBeforeChange": "70e6cb7abc9d1f82b12c9182e5b9d5f442b62682", "commitAfterChange": "96e2d72045a6fecadbb495cf120a991e9af97b69", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate void generateCode( \t\tClassScope classScope, \t\tClassFile classFile, \t\tint clinitOffset)", "signatureAfterChange": " \tprivate void generateCode( \t\tClassScope classScope, \t\tClassFile classFile, \t\tint clinitOffset)", "diff": ["+\t\tint remainingFieldCount = 0;", "-\t\t\tint enumCount = 0;", "-\t\t\tint remainingFieldCount = 0;", "-\t\t\tif (fieldDeclarations != null) {", "+\t\t\tint enumCount = declaringType.enumConstantsCounter;", "+\t\t\tif (enumCount > ENUM_CONSTANTS_THRESHOLD) {", "+\t\t\t\t// generate synthetic methods to initialize all the enum constants", "+\t\t\t\tint begin = -1;", "+\t\t\t\tint count = 0;", "+\t\t\t\tif (fieldDeclarations != null) {", "+\t\t\t\t\tint max = fieldDeclarations.length;", "+\t\t\t\t\tfor (int i = 0; i < max; i++) {", "+\t\t\t\t\t\tFieldDeclaration fieldDecl = fieldDeclarations[i];", "+\t\t\t\t\t\tif (fieldDecl.isStatic()) {", "+\t\t\t\t\t\t\tif (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t\t\t\tif (begin == -1) {", "+\t\t\t\t\t\t\t\t\tbegin = i;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t\t\tif (count > ENUM_CONSTANTS_THRESHOLD) {", "+\t\t\t\t\t\t\t\t\tSyntheticMethodBinding syntheticMethod = declaringType.binding.addSyntheticMethodForEnumInitialization(begin, i);", "+\t\t\t\t\t\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, syntheticMethod, null /* default declaringClass */);", "+\t\t\t\t\t\t\t\t\tbegin = -1;", "+\t\t\t\t\t\t\t\t\tcount = 0;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (count != 0) {", "+\t\t\t\t\t\t// add last synthetic method", "+\t\t\t\t\t\tSyntheticMethodBinding syntheticMethod = declaringType.binding.addSyntheticMethodForEnumInitialization(begin, max);", "+\t\t\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, syntheticMethod, null /* default declaringClass */);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (fieldDeclarations != null) {", "-\t\t\t\t\t\t\tenumCount++;", "-\t\t\t\tfor (int i = 0, max = fieldDeclarations.length; i < max; i++) {", "+\t\t\t\tfor (int i = 0, max = fieldDeclarations.length; i < max && remainingFieldCount >= 0; i++) {", "-\t\t\t\t\t\t\tif (!fieldDecl.isStatic())", "+\t\t\t\t\t\t\tif (!fieldDecl.isStatic()) {", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tremainingFieldCount--;", "-\t\t\t\t\t\t\tif (!fieldDecl.binding.isStatic())", "+\t\t\t\t\t\t\tif (!fieldDecl.binding.isStatic()) {", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tremainingFieldCount--;"]}], "num": 56447}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c641b3d8b127243befbd80d280936764", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03525188c664478262a7acc2bbb30aed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "61910f9ffdfc607d31120af5ce39e6bf8d69bab0", "commitAfterChange": "3a10f90d587275b68cb248facf53e1ae26bb70b8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tboolean compile(String options, String[] sourceFileNames) throws IOException, InterruptedException", "signatureAfterChange": " \tlong compile(File directory, String options, String[] sourceFileNames, StringBuffer log) throws IOException, InterruptedException", "diff": ["-\tboolean compile(String options, String[] sourceFileNames) throws IOException, InterruptedException {", "+\t// exit value and the upper word is non-zero iff the error log has contents", "+\tlong compile(File directory, String options, String[] sourceFileNames, StringBuffer log) throws IOException, InterruptedException {", "+\t\tlong result = 0L;", "+\t\t// WORK classpath should depend on the compiler, not on the default runtime", "-\t\t\tcmdLine.append(' ');", "+\t\t\tcmdLine.append(this.classpath);", "+\t\t\tcmdLine.append(\". \");", "-\t\t\tcompileProcess = Runtime.getRuntime().exec(cmdLine.toString());", "-\t\t\tLogger errorLogger = new Logger(compileProcess.getErrorStream(), \"ERROR\");            ", "-\t\t\tint exitValue = compileProcess.waitFor(); // caveat: may never terminate under specific conditions", "+\t\t\tcompileProcess = Runtime.getRuntime().exec(cmdLine.toString(), null, directory);", "+\t\t\tLogger errorLogger = new Logger(compileProcess.getErrorStream(), ", "+\t\t\t\t\t\"ERROR\", log == null ? new StringBuffer() : log);", "+\t\t\terrorLogger.start();", "+\t\t\tint compilerResult = compileProcess.waitFor();", "+\t\t\tresult |= compilerResult; // caveat: may never terminate under specific conditions", "-\t\t\tif (exitValue != 0) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\t\treturn false;", "+\t\t\t\tresult |= ERROR_LOG_MASK;", "-\t\treturn true;", "-\t\t", "+\t\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de88c5866d635869084ae29ee76b6340", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "fa498df141f3a0a439a1af4d8d96a640dbb81cb5", "commitAfterChange": "8bcd9b87ed997ca91c95e87fd5639a0cef180234", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  private static void initDirectories(StringBuffer buffer)", "signatureAfterChange": "  private static void initDirectories(StringBuffer buffer)", "diff": ["-\t\tthrow new RuntimeException(INPUT_DIR+\" does not exist or is not a directory!\");", "+\t\tSystem.err.println(INPUT_DIR+\" does not exist or is not a directory!\");", "+\t\tSystem.exit(1);", "-\t\tint idx = dir.indexOf(',');", "-\t\tString outputDir;", "-\t\tif (idx < 0) {", "-\t\t\toutputDir = dir;", "-\t\t} else {", "-\t\t\toutputDir = dir.substring(0, idx);", "-\t\t\tif (dir.substring(idx+1).equals(\"clean\")) {", "+\t\tStringTokenizer tokenizer = new StringTokenizer(dir, \",\");", "+\t\tString outputDir = tokenizer.nextToken();", "+\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\tString token = tokenizer.nextToken();", "+\t\t\tif (token.equals(\"clean\")) {", "-\t\t\t\tthrow new RuntimeException(\"Reference can only be updated using a version (i.e. with a closed buildnotes_jdt-core.html)!\");", "+\t\t\t\tSystem.err.println(\"Reference can only be updated using a version (i.e. with a closed buildnotes_jdt-core.html)!\");", "+\t\t\t\tSystem.exit(1);"]}], "num": 67522}
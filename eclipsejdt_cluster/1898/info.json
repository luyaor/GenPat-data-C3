{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c778ca2355d71fe026b7cdc96ccde2f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ce2b4d6a031602f3e383570d0cade68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "9ebc56bbef98951afda94a11e400e1c39d8ba94d", "commitAfterChange": "ce91b2c4edecc0c98ec95a698ec9636f85dd8181", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope, boolean isExceptionOnAutoClose)", "signatureAfterChange": " public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope, boolean isExceptionOnAutoClose)", "diff": ["-\t\tif (traversedContext instanceof InsideSubRoutineFlowContext) {", "-\t\t\tASTNode node = traversedContext.associatedNode;", "-\t\t\tif (node instanceof TryStatement) {", "-\t\t\t\tTryStatement tryStatement = (TryStatement) node;", "-\t\t\t\tflowInfo.addInitializationsFrom(tryStatement.subRoutineInits); // collect inits", "+\t\tif (!isExceptionOnAutoClose) {", "+\t\t\tif (traversedContext instanceof InsideSubRoutineFlowContext) {", "+\t\t\t\tASTNode node = traversedContext.associatedNode;", "+\t\t\t\tif (node instanceof TryStatement) {", "+\t\t\t\t\tTryStatement tryStatement = (TryStatement) node;", "+\t\t\t\t\tflowInfo.addInitializationsFrom(tryStatement.subRoutineInits); // collect inits", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c71989ca0f7570213ad14de4588a8283", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "commitAfterChange": "cbaf155d59bae1aee7ec473c177014431f794c16", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void checkExceptionHandlers(TypeBinding[] raisedExceptions, ASTNode location, FlowInfo flowInfo, BlockScope scope)", "signatureAfterChange": "  public void checkExceptionHandlers(TypeBinding[] raisedExceptions, ASTNode location, FlowInfo flowInfo, BlockScope scope)", "diff": ["-\t\tif (((sub = traversedContext.subRoutine()) != null) && sub.isSubRoutineEscaping()) {", "+\t\tif (((sub = traversedContext.subroutine()) != null) && sub.isSubRoutineEscaping()) {", "-\t\tif (traversedContext.associatedNode instanceof TryStatement){", "-\t\t\tTryStatement tryStatement = (TryStatement) traversedContext.associatedNode;", "-\t\t\t\tflowInfo = flowInfo.addInitializationsFrom(tryStatement.subRoutineInits);", "-\t\t}", "+\t\t", "+\t\tif (traversedContext instanceof InsideSubRoutineFlowContext) {", "+\t\t\tASTNode node = traversedContext.associatedNode;", "+\t\t\tif (node instanceof TryStatement) {", "+\t\t\t\tTryStatement tryStatement = (TryStatement) node;", "+\t\t\t\tflowInfo.addInitializationsFrom(tryStatement.subRoutineInits); // collect inits\t\t\t", "+\t\t\t}", "+\t\t}\t\t", "-}"]}], "num": 1898}
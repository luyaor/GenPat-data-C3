{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "12fbba4ef8e7e68759552ad029afcb93", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38a1a65a209bde899e02b1b0f229b6de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "9aeeae6132d26ad37d31381105d033b5d7355109", "commitAfterChange": "bd6d2b237d7387fba1f23d192ad6b2abfbd96ace", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r \tpublic MethodBinding getImplicitMethod(\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \tpublic MethodBinding getImplicitMethod(\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "diff": ["-\t\t\t\t\tif (methodBinding == null && foundMethod == null) {\r", "+\t\t\t\t\tif (methodBinding == null) {\r", "-\t\t\t\t\t\t\t\t\tfuzzyProblem =\r", "-\t\t\t\t\t\t\t\t\t\tnew ProblemMethodBinding(methodBinding, selector, argumentTypes, NotFound);\r", "-\t\t\t\t\t\t\t\t} else if (\r", "-\t\t\t\t\t\t\t\t\t!methodBinding.canBeSeenBy(receiverType, invocationSite, classScope)) {\r", "+\t\t\t\t\t\t\t\t\tif (foundMethod == null || foundMethod.problemId() == NotVisible){\r", "+\t\t\t\t\t\t\t\t\t\t// inherited mismatch is reported directly, not looking at enclosing matches\r", "+\t\t\t\t\t\t\t\t\t\treturn new ProblemMethodBinding(methodBinding, selector, argumentTypes, NotFound);\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t// make the user qualify the method, likely wants the first inherited method (javac generates an ambiguous error instead)\r", "+\t\t\t\t\t\t\t\t\tfuzzyProblem = new ProblemMethodBinding(selector, argumentTypes, InheritedNameHidesEnclosingName);\r", "+\r", "+\t\t\t\t\t\t\t\t} else if (!methodBinding.canBeSeenBy(receiverType, invocationSite, classScope)) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e07fc113e5b8a8ed302e013fb0a7c692", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "c6b0ba0798e3e5869080431aec1d46cb3df138ed", "commitAfterChange": "0d803de6a1e9319f8fcdd3fdf5273a7bd463073e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic MethodBinding getImplicitMethod( \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding getImplicitMethod( \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\t\tif (foundMethod == null || foundMethod.problemId() == NotVisible)", "+\t\t\t\t\t\t\tif (foundMethod == null || foundMethod.problemId() == NotVisible) {", "-\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t\t// make the user qualify the method, likely wants the first inherited method (javac generates an ambiguous error instead)", "-\t\t\t\t\t\t\t\treturn new ProblemMethodBinding(", "-\t\t\t\t\t\t\t\t\tselector,", "-\t\t\t\t\t\t\t\t\targumentTypes,", "-\t\t\t\t\t\t\t\t\tInheritedNameHidesEnclosingName);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// make the user qualify the method, likely wants the first inherited method (javac generates an ambiguous error instead)", "+\t\t\t\t\t\t\treturn new ProblemMethodBinding(", "+\t\t\t\t\t\t\t\tselector,", "+\t\t\t\t\t\t\t\targumentTypes,", "+\t\t\t\t\t\t\t\tInheritedNameHidesEnclosingName);", "-"]}], "num": 19959}
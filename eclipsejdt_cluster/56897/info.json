{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "746d72eecced3a02682a80e372f9bd12", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a7cf61c27708fe810152542d78a34d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "0bd771375c18b7c83a5adef74657e35cf2c86ff3", "commitAfterChange": "5882e29154dfffe57fe4183f714dc74947e8e98d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprivate ASTNode internalCreateASTForKind()", "signatureAfterChange": " \tprivate ASTNode internalCreateASTForKind()", "diff": ["-\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = codeSnippetParsingUtil.parseClassBodyDeclarations(this.rawSource, this.sourceOffset, this.sourceLength, this.compilerOptions, true);", "+\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = codeSnippetParsingUtil.parseClassBodyDeclarations(this.rawSource, this.sourceOffset, this.sourceLength, this.compilerOptions, true, this.statementsRecovery);", "-\t\t\t\tif (nodes != null) {", "-\t\t\t\t\tTypeDeclaration typeDeclaration = converter.convert(nodes);", "-\t\t\t\t\ttypeDeclaration.setSourceRange(this.sourceOffset, this.sourceOffset + this.sourceLength);", "-\t\t\t\t\trootNodeToCompilationUnit(typeDeclaration.getAST(), compilationUnit, typeDeclaration, codeSnippetParsingUtil.recordedParsingInformation, null);", "-\t\t\t\t\tast.setDefaultNodeFlag(0);", "-\t\t\t\t\tast.setOriginalModificationCount(ast.modificationCount());", "-\t\t\t\t\treturn typeDeclaration;", "-\t\t\t\t} else {", "-\t\t\t\t\tCategorizedProblem[] problems = recordedParsingInformation.problems;", "-\t\t\t\t\tif (problems != null) {", "-\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\t\t\t\t}", "-\t\t\t\t\tast.setDefaultNodeFlag(0);", "-\t\t\t\t\tast.setOriginalModificationCount(ast.modificationCount());", "-\t\t\t\t\treturn compilationUnit;", "-\t\t\t\t}", "+\t\t\t\tTypeDeclaration typeDeclaration = converter.convert(nodes);", "+\t\t\t\ttypeDeclaration.setSourceRange(this.sourceOffset, this.sourceOffset + this.sourceLength);", "+\t\t\t\trootNodeToCompilationUnit(typeDeclaration.getAST(), compilationUnit, typeDeclaration, codeSnippetParsingUtil.recordedParsingInformation, null);", "+\t\t\t\tast.setDefaultNodeFlag(0);", "+\t\t\t\tast.setOriginalModificationCount(ast.modificationCount());", "+\t\t\t\treturn typeDeclaration;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbec575a63dff84a9882c5dc874d1085", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "57a39bffd481d99e266c1d932ca6a1e0a014c2f1", "commitAfterChange": "fa55650598792d02ad8b63316b23c9a28b441883", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprivate ASTNode internalCreateASTForKind()", "signatureAfterChange": " \tprivate ASTNode internalCreateASTForKind()", "diff": ["-\t\t\t\tTypeDeclaration typeDeclaration = converter.convert(nodes);", "-\t\t\t\ttypeDeclaration.setSourceRange(this.sourceOffset, this.sourceOffset + this.sourceLength);", "-\t\t\t\trootNodeToCompilationUnit(typeDeclaration.getAST(), compilationUnit, typeDeclaration, codeSnippetParsingUtil.recordedParsingInformation, null);", "-\t\t\t\tast.setDefaultNodeFlag(0);", "-\t\t\t\tast.setOriginalModificationCount(ast.modificationCount());", "-\t\t\t\treturn typeDeclaration;", "+\t\t\t\tif (nodes != null) {", "+\t\t\t\t\t// source has no syntax error or the statement recovery is enabled", "+\t\t\t\t\tTypeDeclaration typeDeclaration = converter.convert(nodes);", "+\t\t\t\t\ttypeDeclaration.setSourceRange(this.sourceOffset, this.sourceOffset + this.sourceLength);", "+\t\t\t\t\trootNodeToCompilationUnit(typeDeclaration.getAST(), compilationUnit, typeDeclaration, codeSnippetParsingUtil.recordedParsingInformation, null);", "+\t\t\t\t\tast.setDefaultNodeFlag(0);", "+\t\t\t\t\tast.setOriginalModificationCount(ast.modificationCount());", "+\t\t\t\t\treturn typeDeclaration;", "+\t\t\t\t} else {", "+\t\t\t\t\t// source has syntax error and the statement recovery is disabled", "+\t\t\t\t\tCategorizedProblem[] problems = recordedParsingInformation.problems;", "+\t\t\t\t\tif (problems != null) {", "+\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "+\t\t\t\t\t}", "+\t\t\t\t\tast.setDefaultNodeFlag(0);", "+\t\t\t\t\tast.setOriginalModificationCount(ast.modificationCount());", "+\t\t\t\t\treturn compilationUnit;", "+\t\t\t\t}"]}], "num": 56897}
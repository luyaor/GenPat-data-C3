{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bddaee235906be8393dd6288c010d970", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ad5ac3c85d94a3fcc90882a7e08c8a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "600cc6e957b3608b8d3c26027936fe87489e52d9", "commitAfterChange": "23ffb43b2ebb4c3a8ec95cae07baf3650cc30157", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public TypeBinding checkFieldAccess(BlockScope scope)", "signatureAfterChange": " public TypeBinding checkFieldAccess(BlockScope scope)", "diff": ["-\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(", "-\t\t\t\tthis,", "-\t\t\t\tfieldBinding);", "+\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, fieldBinding);", "-\t\t\treturn null;", "+\t\t\treturn fieldBinding.type;", "-\tconstant = FieldReference.getConstantFor(fieldBinding, true, this, scope, 0);", "+\tconstant = FieldReference.getConstantFor(fieldBinding, this, true, scope);", "+", "-\t//===============================================", "-\t//cycle are forbidden ONLY within the same class...why ?????? (poor javac....)", "-\t//Cycle can be done using cross class ref but not direct into a same class reference ????", "-\t//class A {\tstatic int k = B.k+1;}", "-\t//class B {\tstatic int k = A.k+2;}", "-\t//The k-cycle in this example is valid.", "-", "-\t//class C { static int k = k + 1 ;}", "-\t//here it is forbidden ! ????", "-\t//but the next one is valid !!!", "-\t//class C { static int k = C.k + 1;}", "-", "-\t//notice that the next one is also valid ?!?!", "-\t//class A {\tstatic int k = foo().k+1 ; static A foo(){return new A();}}", "-", "-\t//for all these reasons, the next piece of code is only here and not", "-\t//commun for all FieldRef and QualifiedNameRef....(i.e. in the getField(..) API.....", "-", "-\t//instance field may refer to forward static field, like in", "-\t//int i = staticI;", "-\t//static int staticI = 2 ;", "-", "-\tif (ms.enclosingSourceType() == fieldBinding.declaringClass", "+\tif ((this.bits & IsStrictlyAssignedMASK) == 0", "+\t\t&& ms.enclosingSourceType() == fieldBinding.declaringClass"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c722a8b44c0ad48225e758248e9bd0d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic TypeBinding checkFieldAccess(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding checkFieldAccess(BlockScope scope)", "diff": ["-\t\tif (!((FieldBinding) binding).isStatic()) {", "+\t\tMethodScope methodScope = scope.methodScope();", "+\t\tboolean isStatic = fieldBinding.isStatic();", "+\t\tif (!isStatic) {", "-\t\t\tif (scope.methodScope().isStatic) {", "+\t\t\tif (methodScope.isStatic) {", "-\t\t\t\tconstant = NotAConstant;", "+\t\t\t\tthis.constant = NotAConstant;", "-\t\tconstant = FieldReference.getConstantFor(fieldBinding, this, true, scope);", "+\t\tthis.constant = FieldReference.getConstantFor(fieldBinding, this, true, scope);", "-\t\tMethodScope ms = scope.methodScope();", "-\t\t\t&& ms.enclosingSourceType() == fieldBinding.declaringClass", "-\t\t\t&& ms.lastVisibleFieldID >= 0", "-\t\t\t&& fieldBinding.id >= ms.lastVisibleFieldID) {", "+\t\t\t&& methodScope.enclosingSourceType() == fieldBinding.declaringClass", "+\t\t\t&& methodScope.lastVisibleFieldID >= 0", "+\t\t\t&& fieldBinding.id >= methodScope.lastVisibleFieldID) {", "-\t\t\tif (!fieldBinding.isStatic() || ms.isStatic)", "-\t\t\t\tscope.problemReporter().forwardReference(this, 0, scope.enclosingSourceType());", "+\t\t\tif (!fieldBinding.isStatic() || methodScope.isStatic)", "+\t\t\t\tscope.problemReporter().forwardReference(this, 0, methodScope.enclosingSourceType());"]}], "num": 2049}
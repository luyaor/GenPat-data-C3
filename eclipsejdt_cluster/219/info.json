{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "99235b3e8b6cc8c97c16ed9ef74130d2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e43acf1aef4eef1af469721b3fd2c49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java", "commitBeforeChange": "581702d71a138ac97fe73cfd2b06cc855f39a496", "commitAfterChange": "d47f7e16ee9a06ebea0c1bfa73440fda6af0235f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected boolean computeChildren(OpenableElementInfo info) throws JavaModelException", "signatureAfterChange": " \tprotected boolean computeChildren(OpenableElementInfo info, Map newElements) throws JavaModelException", "diff": ["-\tprotected boolean computeChildren(OpenableElementInfo info) throws JavaModelException {", "+\tprotected boolean computeChildren(OpenableElementInfo info, Map newElements) throws JavaModelException {", "+\t\t", "-\t\tcomputeJarChildren((JarPackageFragmentRootInfo) info, vChildren);", "+\t\tfinal int JAVA = 0;", "+\t\tfinal int NON_JAVA = 1;", "+\t\tZipFile jar= null;", "+\t\ttry {", "+\t\t\tjar= getJar();", "+\t", "+\t\t\tHashMap packageFragToTypes= new HashMap();", "+\t", "+\t\t\t// always create the default package", "+\t\t\tpackageFragToTypes.put(IPackageFragment.DEFAULT_PACKAGE_NAME, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "+\t", "+\t\t\tfor (Enumeration e= jar.entries(); e.hasMoreElements();) {", "+\t\t\t\tZipEntry member= (ZipEntry) e.nextElement();", "+\t\t\t\tString entryName= member.getName();", "+\t", "+\t\t\t\tif (member.isDirectory()) {", "+\t\t\t\t\t", "+\t\t\t\t\tint last = entryName.length() - 1;", "+\t\t\t\t\tentryName= entryName.substring(0, last);", "+\t\t\t\t\tentryName= entryName.replace('/', '.');", "+\t", "+\t\t\t\t\t// add the package name & all of its parent packages", "+\t\t\t\t\twhile (true) {", "+\t\t\t\t\t\t// extract the package name", "+\t\t\t\t\t\tif (packageFragToTypes.containsKey(entryName)) break;", "+\t\t\t\t\t\tpackageFragToTypes.put(entryName, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tif ((last = entryName.lastIndexOf('.')) < 0) break;", "+\t\t\t\t\t\tentryName = entryName.substring(0, last);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t//store the class file / non-java rsc entry name to be cached in the appropriate package fragment", "+\t\t\t\t\t//zip entries only use '/'", "+\t\t\t\t\tint lastSeparator= entryName.lastIndexOf('/');", "+\t\t\t\t\tString packageName;", "+\t\t\t\t\tString fileName;", "+\t\t\t\t\tif (lastSeparator != -1) { //not in the default package", "+\t\t\t\t\t\tentryName= entryName.replace('/', '.');", "+\t\t\t\t\t\tfileName= entryName.substring(lastSeparator + 1);", "+\t\t\t\t\t\tpackageName= entryName.substring(0, lastSeparator);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfileName = entryName;", "+\t\t\t\t\t\tpackageName =  IPackageFragment.DEFAULT_PACKAGE_NAME;", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t// add the package name & all of its parent packages", "+\t\t\t\t\tString currentPackageName = packageName;", "+\t\t\t\t\twhile (true) {", "+\t\t\t\t\t\t// extract the package name", "+\t\t\t\t\t\tif (packageFragToTypes.containsKey(currentPackageName)) break;", "+\t\t\t\t\t\tpackageFragToTypes.put(currentPackageName, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tint last;", "+\t\t\t\t\t\tif ((last = currentPackageName.lastIndexOf('.')) < 0) break;", "+\t\t\t\t\t\tcurrentPackageName = currentPackageName.substring(0, last);", "+\t\t\t\t\t}", "+\t\t\t\t\t// add classfile info amongst children", "+\t\t\t\t\tArrayList[] children = (ArrayList[]) packageFragToTypes.get(packageName);", "+\t\t\t\t\tif (Util.isClassFileName(entryName)) {", "+\t\t\t\t\t\tif (children[JAVA] == EMPTY_LIST) children[JAVA] = new ArrayList();", "+\t\t\t\t\t\tchildren[JAVA].add(fileName);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (children[NON_JAVA] == EMPTY_LIST) children[NON_JAVA] = new ArrayList();", "+\t\t\t\t\t\tchildren[NON_JAVA].add(fileName);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t//loop through all of referenced packages, creating package fragments if necessary", "+\t\t\t// and cache the entry names in the infos created for those package fragments", "+\t\t\tIterator packages = packageFragToTypes.keySet().iterator();", "+\t\t\twhile (packages.hasNext()) {", "+\t\t\t\tString packName = (String) packages.next();", "+\t\t\t\t", "+\t\t\t\tArrayList[] entries= (ArrayList[]) packageFragToTypes.get(packName);", "+\t\t\t\tJarPackageFragment packFrag= (JarPackageFragment) getPackageFragment(packName);", "+\t\t\t\tJarPackageFragmentInfo fragInfo= (JarPackageFragmentInfo) packFrag.createElementInfo();", "+\t\t\t\tif (entries[0].size() > 0){", "+\t\t\t\t\tfragInfo.setEntryNames(entries[JAVA]);", "+\t\t\t\t}", "+\t\t\t\tint resLength= entries[NON_JAVA].size();", "+\t\t\t\tif (resLength == 0) {", "+\t\t\t\t\tpackFrag.computeNonJavaResources(NO_STRINGS, fragInfo, jar.getName());", "+\t\t\t\t} else {", "+\t\t\t\t\tString[] resNames= new String[resLength];", "+\t\t\t\t\tentries[NON_JAVA].toArray(resNames);", "+\t\t\t\t\tpackFrag.computeNonJavaResources(resNames, fragInfo, jar.getName());", "+\t\t\t\t}", "+\t\t\t\tpackFrag.computeChildren(fragInfo);", "+\t\t\t\tnewElements.put(packFrag, fragInfo);", "+\t\t\t\tvChildren.add(packFrag);", "+\t\t\t}", "+\t\t} catch (CoreException e) {", "+\t\t\tif (e instanceof JavaModelException) throw (JavaModelException)e;", "+\t\t\tthrow new JavaModelException(e);", "+\t\t} finally {", "+\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(jar);", "+\t\t}", "+", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b59fa8c3afac660b1115a447fb0d9eab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java", "commitBeforeChange": "d341317f75b9a87cb34c95bcadc8a79cf2e6761a", "commitAfterChange": "a7f1c6560d5eb4d7d0a892472094d38c8840f4ac", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r protected void computeJarChildren(JarPackageFragmentRootInfo info, ArrayList vChildren) throws JavaModelException", "signatureAfterChange": "\r protected void computeJarChildren(JarPackageFragmentRootInfo info, ArrayList vChildren) throws JavaModelException", "diff": ["+\tfinal int JAVA = 0;\r", "+\tfinal int NON_JAVA = 1;\r", "-\t\tpackageFragToTypes.put(IPackageFragment.DEFAULT_PACKAGE_NAME, new ArrayList[] { new ArrayList(), new ArrayList()\r", "-\t\t});\r", "+\t\tpackageFragToTypes.put(IPackageFragment.DEFAULT_PACKAGE_NAME, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });\r", "-\t\tArrayList[] temp;\r", "-\t\t\tString eName= member.getName();\r", "+\t\t\tString entryName= member.getName();\r", "+\r", "-\t\t\t\teName= eName.substring(0, eName.length() - 1);\r", "-\t\t\t\teName= eName.replace('/', '.');\r", "-\t\t\t\ttemp= (ArrayList[]) packageFragToTypes.get(eName);\r", "-\t\t\t\tif (temp == null) {\r", "-\t\t\t\t\ttemp= new ArrayList[] { new ArrayList(), new ArrayList()\r", "-\t\t\t\t };\r", "-\t\t\t\t\tpackageFragToTypes.put(eName, temp);\r", "+\t\t\t\t\r", "+\t\t\t\tint last = entryName.length() - 1;\r", "+\t\t\t\tentryName= entryName.substring(0, last);\r", "+\t\t\t\tentryName= entryName.replace('/', '.');\r", "+\r", "+\t\t\t\t// add the package name & all of its parent packages\r", "+\t\t\t\twhile (true) {\r", "+\t\t\t\t\t// extract the package name\r", "+\t\t\t\t\tif (packageFragToTypes.containsKey(entryName)) break;\r", "+\t\t\t\t\tpackageFragToTypes.put(entryName, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tif ((last = entryName.lastIndexOf('.')) < 0) break;\r", "+\t\t\t\t\tentryName = entryName.substring(0, last);\r", "-\t\t\t\tif (Util.isClassFileName(eName)) {\r", "-\t\t\t\t\t//only interested in class files\r", "-\t\t\t\t\t//store the class file entry name to be cached in the appropriate package fragment\r", "-\t\t\t\t\t//zip entries only use '/'\r", "-\t\t\t\t\tArrayList classTemp;\r", "-\t\t\t\t\tint lastSeparator= eName.lastIndexOf('/');\r", "-\t\t\t\t\tString key= IPackageFragment.DEFAULT_PACKAGE_NAME;\r", "-\t\t\t\t\tString value= eName;\r", "-\t\t\t\t\tif (lastSeparator != -1) {\r", "-\t\t\t\t\t\t//not in the default package\r", "-\t\t\t\t\t\teName= eName.replace('/', '.');\r", "-\t\t\t\t\t\tvalue= eName.substring(lastSeparator + 1);\r", "-\t\t\t\t\t\tkey= eName.substring(0, lastSeparator);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\ttemp= (ArrayList[]) packageFragToTypes.get(key);\r", "-\t\t\t\t\tif (temp == null) {\r", "-\t\t\t\t\t\t// build all package fragments in the key\r", "-\t\t\t\t\t\tlastSeparator= key.indexOf('.');\r", "-\t\t\t\t\t\twhile (lastSeparator > 0) {\r", "-\t\t\t\t\t\t\tString prefix= key.substring(0, lastSeparator);\r", "-\t\t\t\t\t\t\tif (packageFragToTypes.get(prefix) == null) {\r", "-\t\t\t\t\t\t\t\tpackageFragToTypes.put(prefix, new ArrayList[] { new ArrayList(), new ArrayList()\r", "-\t\t\t\t\t\t\t });\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tlastSeparator= key.indexOf('.', lastSeparator + 1);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tclassTemp= new ArrayList();\r", "-\t\t\t\t\t\tclassTemp.add(value);\r", "-\t\t\t\t\t\tpackageFragToTypes.put(key, new ArrayList[] {classTemp, new ArrayList()\r", "-\t\t\t\t\t });\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tclassTemp= temp[0];\r", "-\t\t\t\t\t\tclassTemp.add(value);\r", "-\t\t\t\t\t}\r", "+\t\t\t\t//store the class file / non-java rsc entry name to be cached in the appropriate package fragment\r", "+\t\t\t\t//zip entries only use '/'\r", "+\t\t\t\tint lastSeparator= entryName.lastIndexOf('/');\r", "+\t\t\t\tString packageName;\r", "+\t\t\t\tString fileName;\r", "+\t\t\t\tif (lastSeparator != -1) { //not in the default package\r", "+\t\t\t\t\tentryName= entryName.replace('/', '.');\r", "+\t\t\t\t\tfileName= entryName.substring(lastSeparator + 1);\r", "+\t\t\t\t\tpackageName= entryName.substring(0, lastSeparator);\r", "-\t\t\t\t\tArrayList resTemp;\r", "-\t\t\t\t\tint lastSeparator= eName.lastIndexOf('/');\r", "-\t\t\t\t\tString key= IPackageFragment.DEFAULT_PACKAGE_NAME;\r", "-\t\t\t\t\tString value= eName;\r", "-\t\t\t\t\tif (lastSeparator != -1) {\r", "-\t\t\t\t\t\t//not in the default package\r", "-\t\t\t\t\t\teName= eName.replace('/', '.');\r", "-\t\t\t\t\t\tkey= eName.substring(0, lastSeparator);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\ttemp= (ArrayList[]) packageFragToTypes.get(key);\r", "-\t\t\t\t\tif (temp == null) {\r", "-\t\t\t\t\t\t// build all package fragments in the key\r", "-\t\t\t\t\t\tlastSeparator= key.indexOf('.');\r", "-\t\t\t\t\t\twhile (lastSeparator > 0) {\r", "-\t\t\t\t\t\t\tString prefix= key.substring(0, lastSeparator);\r", "-\t\t\t\t\t\t\tif (packageFragToTypes.get(prefix) == null) {\r", "-\t\t\t\t\t\t\t\tpackageFragToTypes.put(prefix, new ArrayList[] { new ArrayList(), new ArrayList()\r", "-\t\t\t\t\t\t\t });\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tlastSeparator= key.indexOf('.', lastSeparator + 1);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tresTemp= new ArrayList();\r", "-\t\t\t\t\t\tresTemp.add(value);\r", "-\t\t\t\t\t\tpackageFragToTypes.put(key, new ArrayList[] { new ArrayList(), resTemp });\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tresTemp= temp[1];\r", "-\t\t\t\t\t\tresTemp.add(value);\r", "-\t\t\t\t\t}\r", "+\t\t\t\t\tfileName = entryName;\r", "+\t\t\t\t\tpackageName =  IPackageFragment.DEFAULT_PACKAGE_NAME;\r", "+\t\t\t\t}\r", "+\t\t\t\t\r", "+\t\t\t\t// add the package name & all of its parent packages\r", "+\t\t\t\tString currentPackageName = packageName;\r", "+\t\t\t\twhile (true) {\r", "+\t\t\t\t\t// extract the package name\r", "+\t\t\t\t\tif (packageFragToTypes.containsKey(currentPackageName)) break;\r", "+\t\t\t\t\tpackageFragToTypes.put(currentPackageName, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tint last;\r", "+\t\t\t\t\tif ((last = currentPackageName.lastIndexOf('.')) < 0) break;\r", "+\t\t\t\t\tcurrentPackageName = currentPackageName.substring(0, last);\r", "+\t\t\t\t}\r", "+\t\t\t\t// add classfile info amongst children\r", "+\t\t\t\tArrayList[] children = (ArrayList[]) packageFragToTypes.get(packageName);\r", "+\t\t\t\tif (Util.isClassFileName(entryName)) {\r", "+\t\t\t\t\tif (children[JAVA] == EMPTY_LIST) children[JAVA] = new ArrayList();\r", "+\t\t\t\t\tchildren[JAVA].add(fileName);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tif (children[NON_JAVA] == EMPTY_LIST) children[NON_JAVA] = new ArrayList();\r", "+\t\t\t\t\tchildren[NON_JAVA].add(fileName);\r", "-\t\t\tString packName= (String) packages.next();\r", "+\t\t\tString packName = (String) packages.next();\r", "+\t\t\t\r", "-\t\t\t\tfragInfo.setEntryNames(entries[0]);\r", "+\t\t\t\tfragInfo.setEntryNames(entries[JAVA]);\r", "-\t\t\tint resLength= entries[1].size();\r", "+\t\t\tint resLength= entries[NON_JAVA].size();\r", "-\t\t\t\tpackFrag.computeNonJavaResources(new String[] {}, fragInfo, jar.getName());\r", "+\t\t\t\tpackFrag.computeNonJavaResources(NO_STRINGS, fragInfo, jar.getName());\r", "-\t\t\t\tentries[1].toArray(resNames);\r", "+\t\t\t\tentries[NON_JAVA].toArray(resNames);\r"]}], "num": 219}
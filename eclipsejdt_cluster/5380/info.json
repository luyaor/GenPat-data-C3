{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9274209a09c5ee70b1b850df01d23e7f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30da722bab35a68c98c22781f80fb8f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "8580e60642e681a1d666f59f018926e08e2e8a62", "commitAfterChange": "e4335f612db86aa6e739c4af37c0425a42aadb90", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic boolean isMoreSpecificThan(Invocation invocation, MethodBinding m1, MethodBinding m2, boolean isVarArgs, boolean isVarArgs2)", "signatureAfterChange": " \tpublic boolean isMoreSpecificThan(MethodBinding m1, MethodBinding m2, boolean isVarArgs, boolean isVarArgs2)", "diff": ["-\tpublic boolean isMoreSpecificThan(Invocation invocation, MethodBinding m1, MethodBinding m2, boolean isVarArgs, boolean isVarArgs2) {", "+\tpublic boolean isMoreSpecificThan(MethodBinding m1, MethodBinding m2, boolean isVarArgs, boolean isVarArgs2) {", "-\t\tExpression[] arguments = invocation.arguments();", "+\t\tExpression[] arguments = this.invocationArguments;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd0b06a4391d4822e9fd865f0ca51e85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "d7bf97b0906e6821b36f900e536d18f1ccdddff2", "commitAfterChange": "dd10489904dda11a1b9c522a71a4705b9646605e", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding)", "signatureAfterChange": "  \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, Scope scope)", "diff": ["-\tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding) {", "+\tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, Scope scope) {", "-\t\tresolvePolyExpressionArguments(invocation, methodBinding, argumentTypes);", "+\t\tresolvePolyExpressionArguments(invocation, methodBinding, argumentTypes, scope);"]}], "num": 5380}
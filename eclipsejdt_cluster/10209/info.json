{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ff923b7c99124d4e3714780ad80ae72", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "044fd011e080d029675a78670d4fec27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 400, "methodNumberAfterChange": 400, "signatureBeforeChange": " public void test2011_flow_info()", "signatureAfterChange": " public void test2011_flow_info()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 24)\\n\" + ", "+\t\t\"\tif (o == null) { /* */ }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08147c1f27654ec801d2ce4c9ad51bf0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "c53fb291a849342748306e59b6959038f8ec1321", "commitAfterChange": "d5a32e245b27c645dcf70347396d7253765682d3", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 151, "signatureBeforeChange": " public void test146()", "signatureAfterChange": " public void test146()", "diff": ["+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tswitch (e) {\\n\" + ", "+\t\t\"\t        ^\\n\" + ", "+\t\t\"The switch on the enum type X.MyEnum should have a default case\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d67a160fb4bd34292d1b99e6c6285fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " public void test0070_type_reference()", "signatureAfterChange": " public void test0070_type_reference()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (c == null) {};\\n\" + ", "+\t\t\"\t               ^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18b819de16fb8f41ca693d6a96c5b63d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " public void test0061_method_call_guard()", "signatureAfterChange": " public void test0061_method_call_guard()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (o == null) {};\\n\" + ", "+\t\t\"\t               ^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "199372da7104539ab1fd1c818af8f961", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": " \tpublic void test107()", "signatureAfterChange": " \tpublic void test107()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tIterable<String> is = new ArrayList();\\n\" + ", "+\t\t\t\"\t                          ^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cfb561619d04e4eeb5017814ccd98f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 230, "methodNumberAfterChange": 230, "signatureBeforeChange": " \tpublic void test226()", "signatureAfterChange": " \tpublic void test226()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tObject x4= new X[0];\t \\n\" + ", "+\t\t\t\"\t               ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d7d86c810b1df6ebba418acd3d3bb35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "0660a80b4f83507ec084149491c197acba246b67", "commitAfterChange": "593a2bfc58d2fd5243ade8b5af13c44714cac2ea", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic void test025()", "signatureAfterChange": "  \tpublic void test025()", "diff": ["+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tabstract class Z implements X { public abstract X[] x(); }\\n\" + ", "+\t\t\t\"\t                                                ^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f560d098aeb09eba4df37e639459ce9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 149, "signatureBeforeChange": " public void test0426_while()", "signatureAfterChange": " public void test0426_while()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\"\tif (o == null) { /* */ }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20c947786672b17b56438a569e790d2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaRegressionTest.java", "commitBeforeChange": "40aba6682d4eea8f15f9ae037123e7cedc4a4ef3", "commitAfterChange": "ffcab3bbd38103e7f6861237d076c93f4488ed08", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void test449410()", "signatureAfterChange": " public void test449410()", "diff": ["+\t\"----------\\n\" + ", "+\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\"\t.forEach(entry -> test() ? bad() : returnType());\\n\" + ", "+\t\"\t                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\"Invalid expression as statement\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21eb0a2d89844dfa9e5396cbcf884e71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void test0006_final_local()", "signatureAfterChange": " public void test0006_final_local()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (o != null) { /* */ }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "234e92a633a078f8b8820286e30d5d47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "0d2bb4cd9a920a832985dcd25c76a6d09b85febf", "commitAfterChange": "9580475674d2dc0e975687220941c33b61d1b0ac", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \t \tpublic void test014()", "signatureAfterChange": " \t \tpublic void test014()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 16)\\n\" + ", "+\t\t\t\"\tclass EX extends Exception {\\n\" + ", "+\t\t\t\"\t      ^^\\n\" + ", "+\t\t\t\"The serializable class EX does not declare a static final serialVersionUID field of type long\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25ab7d7f4d6925a83ff7b62cb62e36b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "8f217d25322b885604d27f1ae4690e476bac378b", "commitAfterChange": "9cc20cb240e3ca7f459d6bee269a4e8a319e621d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void test011()", "signatureAfterChange": " \tpublic void test011()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in Test1.java (at line 4)\\n\" + ", "+\t\t\t\"\tvoid pickOne2(Test1<Integer,Integer> c) throws ExOne { c.pickOne((Comparable) \\\"test\\\"); }\\n\" + ", "+\t\t\t\"\t                                                                  ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b6c7110470b08a4a51a9914ec830f41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 145, "methodNumberAfterChange": 145, "signatureBeforeChange": " public void test0422_while()", "signatureAfterChange": " public void test0422_while()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tif (o == null) { /* */ }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2de20219fcd6be268267ceee9589d56c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 401, "methodNumberAfterChange": 401, "signatureBeforeChange": " public void test2012_flow_info()", "signatureAfterChange": " public void test2012_flow_info()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 24)\\n\" + ", "+\t\t\"\tif (o == null) { /* */ }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f9b6c001e04577b7cf29c01317c9be0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": " \tpublic void test037b()", "signatureAfterChange": " \tpublic void test037b()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in XX.java (at line 1)\\n\" +", "-\t\t\t\"\tpublic class XX implements I, J { public void foo(A<String> a) {} }\\n\" +", "-\t\t\t\"\t             ^^\\n\" +", "-\t\t\t\"The type XX must implement the inherited abstract method I.foo(A)\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in XX.java (at line 1)\\n\" +", "-\t\t\t\"\tpublic class XX implements I, J { public void foo(A<String> a) {} }\\n\" +", "-\t\t\t\"\t                                              ^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Name clash: The method foo(A<String>) of type XX has the same erasure as foo(A) of type I but does not override it\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in XX.java (at line 2)\\n\" +", "-\t\t\t\"\tclass YY implements J, I { public void foo(A<String> a) {} }\\n\" +", "-\t\t\t\"\t      ^^\\n\" +", "-\t\t\t\"The type YY must implement the inherited abstract method I.foo(A)\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in XX.java (at line 2)\\n\" +", "-\t\t\t\"\tclass YY implements J, I { public void foo(A<String> a) {} }\\n\" +", "-\t\t\t\"\t                                       ^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Name clash: The method foo(A<String>) of type YY has the same erasure as foo(A) of type I but does not override it\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in XX.java (at line 3)\\n\" +", "-\t\t\t\"\tclass ZZ implements K { public void foo(A<String> a) {} }\\n\" +", "-\t\t\t\"\t      ^^\\n\" +", "-\t\t\t\"The type ZZ must implement the inherited abstract method I.foo(A)\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. ERROR in XX.java (at line 3)\\n\" +", "-\t\t\t\"\tclass ZZ implements K { public void foo(A<String> a) {} }\\n\" +", "-\t\t\t\"\t                                    ^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Name clash: The method foo(A<String>) of type ZZ has the same erasure as foo(A) of type I but does not override it\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"7. WARNING in XX.java (at line 4)\\n\" +", "-\t\t\t\"\tinterface I { void foo(A a); }\\n\" +", "-\t\t\t\"\t                       ^\\n\" +", "-\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in XX.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class XX implements I, J { public void foo(A<String> a) {} }\\n\" + ", "+\t\t\t\"\t             ^^\\n\" + ", "+\t\t\t\"The type XX must implement the inherited abstract method I.foo(A)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in XX.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class XX implements I, J { public void foo(A<String> a) {} }\\n\" + ", "+\t\t\t\"\t                                              ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(A<String>) of type XX has the same erasure as foo(A) of type I but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in XX.java (at line 2)\\n\" + ", "+\t\t\t\"\tclass YY implements J, I { public void foo(A<String> a) {} }\\n\" + ", "+\t\t\t\"\t      ^^\\n\" + ", "+\t\t\t\"The type YY must implement the inherited abstract method I.foo(A)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in XX.java (at line 2)\\n\" + ", "+\t\t\t\"\tclass YY implements J, I { public void foo(A<String> a) {} }\\n\" + ", "+\t\t\t\"\t                                       ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(A<String>) of type YY has the same erasure as foo(A) of type I but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in XX.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass ZZ implements K { public void foo(A<String> a) {} }\\n\" + ", "+\t\t\t\"\t      ^^\\n\" + ", "+\t\t\t\"The type ZZ must implement the inherited abstract method I.foo(A)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in XX.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass ZZ implements K { public void foo(A<String> a) {} }\\n\" + ", "+\t\t\t\"\t                                    ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(A<String>) of type ZZ has the same erasure as foo(A) of type I but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in XX.java (at line 4)\\n\" + ", "+\t\t\t\"\tinterface I { void foo(A a); }\\n\" + ", "+\t\t\t\"\t                       ^\\n\" + ", "+\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in XX.java (at line 6)\\n\" + ", "+\t\t\t\"\tinterface K extends I { void foo(A<String> a); }\\n\" + ", "+\t\t\t\"\t                             ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(A<String>) of type K has the same erasure as foo(A) of type I but does not override it\\n\" + ", "-\t\t\t// XX/YY/ZZ is not abstract and does not override abstract method foo(A) in I"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31b96fc72c1f25f8c9f1789fd99f02da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic void test026()", "signatureAfterChange": "  \tpublic void test026()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\t@Override A test() { return super.test(); }\\n\" + ", "+\t\t\t\"\t          ^\\n\" + ", "+\t\t\t\"Type safety: A is a raw type. References to generic type A<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35b61cf3c5b1824be9a1005643605f32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " public void test0322_if_else()", "signatureAfterChange": " public void test0322_if_else()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tif (o == null) { /* */ }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3718d47ccc4fafb22728e956d43d4377", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "210b89134044d06a70fa2c472f5e9a859c41ba00", "commitAfterChange": "b268992d45d00cd5439bb032a6e5a5226c715e7e", "methodNumberBeforeChange": 144, "methodNumberAfterChange": 144, "signatureBeforeChange": " public void test139()", "signatureAfterChange": " public void test139()", "diff": ["+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\tabstract double eval2(double x, double y);\\n\" + ", "+\t\t\"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The method eval2 cannot be abstract in the enum constant MINUS\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "372a0aa15cb56d88d8c95c11c0199d27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LookupTest.java", "commitBeforeChange": "af33a2b5d21704fd80790ca573818492aac6d737", "commitAfterChange": "41ccef9e8155c1174c2b0163850e836fbe47f6af", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void test08()", "signatureAfterChange": " public void test08()", "diff": ["+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in p1\\\\A.java (at line 7)\\n\" + ", "+\t\t\"\tpublic void aTask() {System.out.println(A.this.success);}\\n\" + ", "+\t\t\"\t                                        ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The static field A.success should be accessed in a static way\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38d476f34782899c0882d409ba57900f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f4a4e733ec9a6ee8e5480938f7f746aa2704ad0d", "commitAfterChange": "f775b73fdbd5c38023656e438f9ccb262941721f", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "\t \t \tpublic void test0045()", "signatureAfterChange": "\t \t \tpublic void test0045()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic Z<T> var;\\n\" + ", "+\t\t\t\"\t         ^\\n\" + ", "+\t\t\t\"T cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a4c3b2fb67f957799fc66c3f46dd739", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "0660a80b4f83507ec084149491c197acba246b67", "commitAfterChange": "593a2bfc58d2fd5243ade8b5af13c44714cac2ea", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "     public void test111()", "signatureAfterChange": "     public void test111()", "diff": ["-            \"----------\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"9. WARNING in X.java (at line 41)\\n\" + ", "+    \t\t\"\tClass[] i = c.getInterfaces();\\n\" + ", "+    \t\t\"\t^^^^^\\n\" + ", "+    \t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c713616cc0c8b4a57233f57d1e99b73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a61562d7e56bcf68476db5393ae43445e5aee116", "commitAfterChange": "73e230db98e1a65780b6160021e4c8063d2276e3", "methodNumberBeforeChange": 724, "methodNumberAfterChange": 724, "signatureBeforeChange": " public void test0706()", "signatureAfterChange": " public void test0706()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tclass BB extends AA<CC> { <U> BB test() {return null;} }\\n\" + ", "+\t\t\t\"\t                                 ^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method test() of type BB has the same erasure as test() of type AA<T> but does not override it\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d060d1cd4395402d02c154d1a37a519", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 334, "methodNumberAfterChange": 334, "signatureBeforeChange": " public void test0956_assert_combined()", "signatureAfterChange": " public void test0956_assert_combined()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tif (o == null) { };\\n\" + ", "+\t\t\"\t               ^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d39c737347538d3f1ad4aab4e9e44d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " public void test0064_method_call_isolation()", "signatureAfterChange": " public void test0064_method_call_isolation()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (o == null) {/* empty */}\\n\" + ", "+\t\t\"\t               ^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f003afaaf36c4c9f68ece64d0a1f7a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DeprecatedTest.java", "commitBeforeChange": "2fdd800912ee4f65c51a2ec384533d1146c71af7", "commitAfterChange": "844f82aaef831e55c4827a65ccd98caed0cd08f3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void test003()", "signatureAfterChange": " public void test003()", "diff": ["-\t\t\"----------\\n\"\t);", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in p\\\\Top.java (at line 42)\\n\" + ", "+\t\t\"\tObject hello(){\\n\" + ", "+\t\t\"\t       ^^^^^^^\\n\" + ", "+\t\t\"The method hello() from the type new Top.StaticM1.StaticM2.NonStaticM3(){} is never used locally\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fd5cecf506f682e4f7ea47d5117224c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 617, "methodNumberAfterChange": 617, "signatureBeforeChange": " \tpublic void test613()", "signatureAfterChange": " \tpublic void test613()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in Map.java (at line 8)\\n\" + ", "-\t\t\t\"\tvoid a(Entry<String> e) { } // Entry<String> is illegal (eclipse accepts)\\n\" + ", "-\t\t\t\"\t       ^^^^^\\n\" + ", "-\t\t\t\"The member type Map.Entry<String> must be qualified with a parameterized type, since it is not static\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in Map.java (at line 9)\\n\" + ", "-\t\t\t\"\tvoid c(Map.Entry<String> e) { } // illegal (correctly flagged)\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^\\n\" + ", "-\t\t\t\"The member type Map.Entry<String> must be qualified with a parameterized type, since it is not static\\n\" + ", "-\t\t\t\"----------\\n\");", "+            \"----------\\n\" + ", "+    \t\t\"1. ERROR in Map.java (at line 8)\\n\" + ", "+    \t\t\"\tvoid a(Entry<String> e) { } // Entry<String> is illegal (eclipse accepts)\\n\" + ", "+    \t\t\"\t       ^^^^^\\n\" + ", "+    \t\t\"The member type Map.Entry<String> must be qualified with a parameterized type, since it is not static\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. ERROR in Map.java (at line 9)\\n\" + ", "+    \t\t\"\tvoid c(Map.Entry<String> e) { } // illegal (correctly flagged)\\n\" + ", "+    \t\t\"\t       ^^^^^^^^^\\n\" + ", "+    \t\t\"The member type Map.Entry<String> must be qualified with a parameterized type, since it is not static\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"3. WARNING in Map.java (at line 10)\\n\" + ", "+    \t\t\"\tvoid b(Entry e) { } // OK\\n\" + ", "+    \t\t\"\t       ^^^^^\\n\" + ", "+    \t\t\"Type safety: Map.Entry is a raw type. References to generic type Map<M>.Entry<E> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41b6ac39c1d9c4098416ab99c120d5d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "a7538ae82dbd33b3f26dec50ae8ce6f249c7a04f", "commitAfterChange": "f0ca1f9e3571a6c8cc7bcfc8fee3982374c51194", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void test037()", "signatureAfterChange": " \tpublic void test037()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\t\"\t* @param <T> Type parameter 2\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"2. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\t\"\t* @param <V> Type parameter 2\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"3. ERROR in X.java (at line 6)\\n\" +", "-\t\t\t\t\"\t* @param <U> Type parameter 1\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"4. ERROR in X.java (at line 10)\\n\" +", "-\t\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" +", "-\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "-\t\t\t\t\"----------\\n\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t* @param <T> Type parameter 2\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t* @param <V> Type parameter 2\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\t* @param <U> Type parameter 1\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" + ", "+\t\t\t\"\t                        ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Exceptions cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "432281839221c1aa9c236395e8af91d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "bb670e5ec8185e24981d836127d58e53e56c1ba8", "commitAfterChange": "83a5df02089ecb5f7e6df978c59083c15170780c", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 186, "signatureBeforeChange": " \tpublic void test0178()", "signatureAfterChange": " \tpublic void test0178()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\"\tif (t instanceof X<T>) {\\n\" +", "-\t\t\t\"\t    ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Cannot perform instanceof check against parameterized type X<T>. Use instead its raw form X since generic type information will be erased at runtime\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 6)\\n\" +", "-\t\t\t\"\t} else if (t instanceof X<String>) {\\n\" +", "-\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Cannot perform instanceof check against parameterized type X<String>. Use instead its raw form X since generic type information will be erased at runtime\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 10)\\n\" +", "-\t\t\t\"\t} else \tif (t instanceof T) {\\n\" +", "-\t\t\t\"\t       \t    ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Cannot perform instanceof check against type parameter T. Use instead its erasure Object since generic type information will be erased at runtime\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tif (t instanceof X<T>) {\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against parameterized type X<T>. Use instead its raw form X since generic type information will be erased at runtime\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\t} else if (t instanceof X<String>) {\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against parameterized type X<String>. Use instead its raw form X since generic type information will be erased at runtime\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\t} else \tif (t instanceof T) {\\n\" + ", "+\t\t\t\"\t       \t    ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against type parameter T. Use instead its erasure Object since generic type information will be erased at runtime\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\t} else if (t instanceof X) {\\n\" + ", "+\t\t\t\"\t                        ^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46c9e496f35cc334536f7650ccec7128", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 426, "methodNumberAfterChange": 426, "signatureBeforeChange": " \tpublic void test422()", "signatureAfterChange": " \tpublic void test422()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\treturn new X();\\n\" + ", "+\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eb63511cc01ce5109d3767e1fd51788", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "\t\t \tpublic void test111()", "signatureAfterChange": "\t\t \tpublic void test111()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tclass Y extends X implements AX {}\\n\" + ", "+\t\t\t\"\t                             ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50706a8f4ce06836fdb12b97fc182eda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "232201d6380e7830296a82a7b3422a333db36b2e", "commitAfterChange": "378f419edc5509790bbfa3083244109f6abafbe2", "methodNumberBeforeChange": 1279, "methodNumberAfterChange": 1279, "signatureBeforeChange": " public void test1245()", "signatureAfterChange": " public void test1245()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tstatic private class Private {}\\n\" + ", "+\t\t\"\t                     ^^^^^^^\\n\" + ", "+\t\t\"The type Secondary.Private is never used locally\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5910524c018de11248521be929bfde32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "149c538751123b079a5874a00aba83297561ab5c", "commitAfterChange": "7bd675acf4007077bf6bd84b82139719c7a8ca75", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void test037()", "signatureAfterChange": " \tpublic void test037()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\t\"\t* @param <T> Type parameter 2\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"2. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\t\"\t* @param <V> Type parameter 2\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"3. ERROR in X.java (at line 6)\\n\" +", "-\t\t\t\t\"\t* @param <U> Type parameter 1\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"4. ERROR in X.java (at line 10)\\n\" +", "-\t\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" +", "-\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "-\t\t\t\t\"----------\\n\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t* @param <T> Type parameter 2\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t* @param <V> Type parameter 2\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\t* @param <U> Type parameter 1\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" + ", "+\t\t\t\"\t                        ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Exceptions cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ab555a9d267f5e59e7300ba8784b30e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c80004d70ebe07235571e96c3ea452dbc7ba5394", "commitAfterChange": "70dd884582455dcf661aaade70c8faff4213db3a", "methodNumberBeforeChange": 256, "methodNumberAfterChange": 256, "signatureBeforeChange": " \tpublic void test0252()", "signatureAfterChange": " \tpublic void test0252()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\telement = (Set<X>) iter.next();\\n\" + ", "+\t\t\t\"\t          ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The cast from X to Set<X> is actually checking against the erased type Set\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f18097444d4dcbbb3df23ba2d3cac71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 58, "signatureBeforeChange": " \t \tpublic void test055()", "signatureAfterChange": " \t \tpublic void test055()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tfor(Integer i : bytes) {\\n\" + ", "+\t\t\t\"\t                ^^^^^\\n\" + ", "+\t\t\t\"The expression of type byte is boxed into Integer\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f24c5098d05106f96a92d3208723e37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "2385c0aeda6d8b742ca24edae81655117601babd", "commitAfterChange": "bfe1e5f410410e285c8a77b5130cabdbc82cde90", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "\r \tpublic void test0390882()", "signatureAfterChange": "\r \tpublic void test0390882()", "diff": ["+\t\t\t\t\"----------\\n\" + \r", "+\t\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + \r", "+\t\t\t\t\"\tpublic void foobar(@Marker java.lang.Integer arg) {}\\n\" + \r", "+\t\t\t\t\"\t                   ^^^^^^^\\n\" + \r", "+\t\t\t\t\"The annotation @Marker is disallowed for this location\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f786e5e20df75450eb2d9018fceb2fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  \tpublic void test039()", "signatureAfterChange": "  \tpublic void test039()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tvoid foo(L l){}\\n\" + ", "+\t\t\t\"\t         ^\\n\" + ", "+\t\t\t\"Type safety: L is a raw type. References to generic type L<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "600c6be8a6fc94e86b1c90c0fa65f9c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " public void test0067_method_call_invocation_target()", "signatureAfterChange": " public void test0067_method_call_invocation_target()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (o == null)  { /* */ }\\n\" + ", "+\t\t\"\t                ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "627d6acf001de568018c0ca0b5e22c9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "d35306cb5dcf7e4ac666fd0505f3086f50241fb2", "commitAfterChange": "3284f738bbf7a2dbd90434dea313c8629bed5722", "methodNumberBeforeChange": 179, "methodNumberAfterChange": 179, "signatureBeforeChange": " public void test401939c()", "signatureAfterChange": " public void test401939c()", "diff": ["+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\t\"\tgoo((x) -> {});\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66e22948f44573783891c11111205e82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic void test022()", "signatureAfterChange": "  \tpublic void test022()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in A.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass B extends A { @Override List getList() { return null; } }\\n\" + ", "+\t\t\t\"\t                              ^^^^\\n\" + ", "+\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6789ac8d5cc217e8b672d7e77a7c9838", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "0d2bb4cd9a920a832985dcd25c76a6d09b85febf", "commitAfterChange": "9580475674d2dc0e975687220941c33b61d1b0ac", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \t \tpublic void test024()", "signatureAfterChange": " \t \tpublic void test024()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tclass EX extends Exception {\\n\" + ", "+\t\t\t\"\t      ^^\\n\" + ", "+\t\t\t\"The serializable class EX does not declare a static final serialVersionUID field of type long\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ed78e3a8afc09f739dc81de3f5175c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " \tpublic void test101()", "signatureAfterChange": " \tpublic void test101()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 1)\\n\" + ", "-\t\t\t\"\tpublic class X <T extends String> {\\n\" + ", "-\t\t\t\"\t                          ^^^^^^\\n\" + ", "-\t\t\t\"The type parameter T should not be bounded by the final type String. Final types cannot be further extended\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tX<? extends AX> x = new X<AX<String>>(new AX<String>());\\n\" + ", "-\t\t\t\"\t  ^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Bound mismatch: The type ? extends AX is not a valid substitute for the bounded parameter <T extends String> of the type X<T>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tX<? extends AX> x = new X<AX<String>>(new AX<String>());\\n\" + ", "-\t\t\t\"\t                          ^^\\n\" + ", "-\t\t\t\"Bound mismatch: The type AX<String> is not a valid substitute for the bounded parameter <T extends String> of the type X<T>\\n\" + ", "-\t\t\t\"----------\\n\");\t\t", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 1)\\n\" + ", "+\t\t\"\tpublic class X <T extends String> {\\n\" + ", "+\t\t\"\t                          ^^^^^^\\n\" + ", "+\t\t\"The type parameter T should not be bounded by the final type String. Final types cannot be further extended\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tX<? extends AX> x = new X<AX<String>>(new AX<String>());\\n\" + ", "+\t\t\"\t  ^^^^^^^^^^^^\\n\" + ", "+\t\t\"Bound mismatch: The type ? extends AX is not a valid substitute for the bounded parameter <T extends String> of the type X<T>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tX<? extends AX> x = new X<AX<String>>(new AX<String>());\\n\" + ", "+\t\t\"\t                          ^^\\n\" + ", "+\t\t\"Bound mismatch: The type AX<String> is not a valid substitute for the bounded parameter <T extends String> of the type X<T>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\"\tx.t.foo(\\\"SUCCESS\\\");\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The method foo(Object) belongs to the raw type AX. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\"----------\\n\");\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f118125dcaf13cbce04545993646c6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 283, "methodNumberAfterChange": 283, "signatureBeforeChange": " \tpublic void test279()", "signatureAfterChange": " \tpublic void test279()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic Class getSomething() { return null; }\\n\" + ", "+\t\t\t\"\t       ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "772539647e15b60bb870f352ca355852", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "341ead40b71a0bffec0f8325f6b29d2b567caf8a", "commitAfterChange": "f5884fa8b0573c548eaeabaa37cd99c51e41fd3b", "methodNumberBeforeChange": 197, "methodNumberAfterChange": 197, "signatureBeforeChange": " public void test443467() throws Exception", "signatureAfterChange": " public void test443467() throws Exception", "diff": ["+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in BuildIdeMain.java (at line 9)\\n\" + ", "+\t\t\"\tfilter2.map(p -> new Pair<>(updateToFile.get(p), p->ideFiles.get(p)));\\n\" + ", "+\t\t\"\t                                                 ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The target type of this expression must be a functional interface\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7766eaf1393081218c1248366daf218e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 146, "methodNumberAfterChange": 146, "signatureBeforeChange": " public void test0423_while()", "signatureAfterChange": " public void test0423_while()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tif (o == null) { /* */ }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7775783688b1b6698ba7d8d4be08b941", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "d5a32e245b27c645dcf70347396d7253765682d3", "commitAfterChange": "562bd70d52b78a80d9ea0f036f9a91cfb91468db", "methodNumberBeforeChange": 347, "methodNumberAfterChange": 347, "signatureBeforeChange": " public void test0955_assert_combined()", "signatureAfterChange": " public void test0955_assert_combined()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\"\tif (o == null) { };\\n\" +", "-\t\t\"\t    ^\\n\" +", "-\t\t\"Null comparison always yields false: The variable o cannot be null at this location\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (o == null) { };\\n\" + ", "+\t\t\"\t    ^\\n\" + ", "+\t\t\"Null comparison always yields false: The variable o cannot be null at this location\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (o == null) { };\\n\" + ", "+\t\t\"\t               ^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78061a5e86bfc8080c64ff905742ae03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 372, "methodNumberAfterChange": 372, "signatureBeforeChange": " public void test1033()", "signatureAfterChange": " public void test1033()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"3. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\t{ /* */ }\\n\" + ", "+\t\t\"\t^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "788d113c325d136e519343743e062bd6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " public void test0082_shortcut_boolean_expression()", "signatureAfterChange": " public void test0082_shortcut_boolean_expression()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"3. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\"\tif (o == null) { /* */ }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d01d86d2f101ce244f74600e97e708c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "08c5b9004bde27fb4063ce300ce881966676fe74", "commitAfterChange": "28d58bf6eb942015446b8ffce8f446f86e9686d9", "methodNumberBeforeChange": 191, "methodNumberAfterChange": 191, "signatureBeforeChange": " public void test402609b()", "signatureAfterChange": " public void test402609b()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 18)\\n\" + ", "+\t\t\t\"\tf(super::foo);\\n\" + ", "+\t\t\t\"\t  ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot directly invoke the abstract method foo() for the type Y\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84882812776191da64104f17d82e13c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " public void test0042_autoboxing_literal()", "signatureAfterChange": " public void test0042_autoboxing_literal()", "diff": ["+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tif (i == null) {};\\n\" + ", "+\t\t\t\"\t               ^^\\n\" + ", "+\t\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84ccac167808d720006a40ae30a018c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": " public void test0320_if_else()", "signatureAfterChange": " public void test0320_if_else()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (o == null) { /* */ }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87318f856a6b655b74fd11e9f87ea552", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "149c538751123b079a5874a00aba83297561ab5c", "commitAfterChange": "7bd675acf4007077bf6bd84b82139719c7a8ca75", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void test037()", "signatureAfterChange": " \tpublic void test037()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\t\"\t* @param <T> Type parameter 2\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"2. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\t\"\t* @param <V> Type parameter 2\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"3. ERROR in X.java (at line 6)\\n\" +", "-\t\t\t\t\"\t* @param <U> Type parameter 1\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"4. ERROR in X.java (at line 10)\\n\" +", "-\t\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" +", "-\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "-\t\t\t\t\"----------\\n\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t* @param <T> Type parameter 2\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t* @param <V> Type parameter 2\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\t* @param <U> Type parameter 1\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" + ", "+\t\t\t\"\t                        ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Exceptions cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a7444cece93897e52fcb277a4627906", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "210b89134044d06a70fa2c472f5e9a859c41ba00", "commitAfterChange": "b268992d45d00cd5439bb032a6e5a5226c715e7e", "methodNumberBeforeChange": 148, "methodNumberAfterChange": 148, "signatureBeforeChange": " public void test143()", "signatureAfterChange": " public void test143()", "diff": ["+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tpublic abstract String a();\\n\" + ", "+\t\t\"\t                       ^^^\\n\" + ", "+\t\t\"The method a cannot be abstract in the enum constant A\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a8f0fc00d6862877363b3c11440cdb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 399, "methodNumberAfterChange": 399, "signatureBeforeChange": " public void test2010_flow_info()", "signatureAfterChange": " public void test2010_flow_info()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 21)\\n\" + ", "+\t\t\"\tif (o == null) { /* */ }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c1c634bb4cf60be74c0da85a2cabf5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 317, "methodNumberAfterChange": 317, "signatureBeforeChange": " public void test0801_switch()", "signatureAfterChange": " public void test0801_switch()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\"\tif(o == null) { /* */ }\\n\" + ", "+\t\t\"\t              ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91e512a9503e2bf32a6217fb4c111504", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LocalVariableTest.java", "commitBeforeChange": "973af06dbc6df022ac42e8e0a0c238581d8558f6", "commitAfterChange": "f61787e560ec300f4e60b2d9cc64378b38b8a03a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-//https://bugs.eclipse.org/bugs/show_bug.cgi?id=144426 - variation", "+//https://bugs.eclipse.org/bugs/show_bug.cgi?id=144858", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tint x = x = 1;\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^\\n\" + ", "+\t\t\t\"The assignment to variable x has no effect\\n\" + ", "+\t\t\t\"----------\\n\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9abb0662d908e95f87a231c5b1aa5982", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 721, "methodNumberAfterChange": 721, "signatureBeforeChange": " public void test715()", "signatureAfterChange": " public void test715()", "diff": ["+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\"\tComparable<String> c = (java.util.List)bar(5, 5.0);\\n\" + ", "+\t\t\"\t                        ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cd18d512ea3b17d69ba9ef7961c6f0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8f217d25322b885604d27f1ae4690e476bac378b", "commitAfterChange": "9cc20cb240e3ca7f459d6bee269a4e8a319e621d", "methodNumberBeforeChange": 722, "methodNumberAfterChange": 722, "signatureBeforeChange": " public void test0715()", "signatureAfterChange": " public void test0715()", "diff": ["+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\"\tComparable<String> c = (java.util.List)bar(5, 5.0);\\n\" + ", "+\t\t\"\t                        ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a67034e82fb4784afded980599a55abb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java", "commitBeforeChange": "09f42f58bcdf2fa84ccd2b8b65f28ab3036222ca", "commitAfterChange": "57e8dd41219d846363c918d62edb5007994c5c79", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " public void testReferenceExpressionInference3b()", "signatureAfterChange": " public void testReferenceExpressionInference3b()", "diff": ["+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tI<X,String> x2s = compose(this::bar, this::i2s);\\n\" + ", "+\t\t\"\t                                     ^^^^^^^^^\\n\" + ", "+\t\t\"The type X does not define i2s(Object) that is applicable here\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a84ddbcc192dc07ea8e9f0aeb7d579c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " public void test0083_shortcut_boolean_expression()", "signatureAfterChange": " public void test0083_shortcut_boolean_expression()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"3. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\"\tif (o == null) { /* */ }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8b8dffcbc6fbdf147b9cb7bc77209d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "17c3ff29c758ba3af32e32b7cf74f8bc1004af3b", "commitAfterChange": "3406cbdf1170bd7765ceb54091ffb987caaf1f67", "methodNumberBeforeChange": 1049, "methodNumberAfterChange": 1049, "signatureBeforeChange": " public void test1037()", "signatureAfterChange": " public void test1037()", "diff": ["+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tMap.Entry<?,? super Zork>\tentry;\\n\" + ", "+\t\t\"\t                    ^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adaf755a87df9f1aaa183ccabe73765e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " public void test0045_autoboxing_operator()", "signatureAfterChange": " public void test0045_autoboxing_operator()", "diff": ["+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tif (i == null) {}\\n\" + ", "+\t\t\t\"\t               ^^\\n\" + ", "+\t\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2c8b610bf0b6dfaf31a9ba30f4ed318", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8ef6b7b8e532d14c9997c45765bf4e2204efc621", "commitAfterChange": "23388d3d76ee00098475fa88c213b1440fe2c7c6", "methodNumberBeforeChange": 254, "methodNumberAfterChange": 254, "signatureBeforeChange": " \tpublic void test242()", "signatureAfterChange": " \tpublic void test242()", "diff": ["-\t// 69776 - variation: no unsafe type operation warning", "+\t// 69776 - variation: TODO (philippe) no unsafe type operation warning ?", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tfinal Class<? extends Object> clazz = (Class<? extends Object>) classes.get(\\\"test\\\");\\n\" + ", "+\t\t\"\t                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Unsafe type operation: The cast from Class to parameterized type Class<? extends Object> will not check conformance of type arguments at runtime\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3b010e135a9e12aeb34f930cc84e229", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void test050()", "signatureAfterChange": " \tpublic void test050()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass Y <T extends Y.M> extends Super {}\\n\" + ", "+\t\t\t\"\t                   ^^^\\n\" + ", "+\t\t\t\"Type safety: Y.M is a raw type. References to generic type Super.M should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5bac83cf0df955d8a718aa9935b3935", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": " public void test0313_if_else()", "signatureAfterChange": " public void test0313_if_else()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\"\tif (o == null) { /* */ }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6badb0366c032bc96b5062147ea43ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 622, "methodNumberAfterChange": 622, "signatureBeforeChange": " \tpublic void test618()", "signatureAfterChange": " \tpublic void test618()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in Map.java (at line 5)\\n\" + ", "-\t\t\t\"\tstatic void foo(Entry<String> e) { } // invalid static ref\\n\" + ", "-\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method foo cannot be declared static; static methods can only be declared in a static or top level type\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in Map.java (at line 5)\\n\" + ", "-\t\t\t\"\tstatic void foo(Entry<String> e) { } // invalid static ref\\n\" + ", "-\t\t\t\"\t                ^^^^^\\n\" + ", "-\t\t\t\"Cannot make a static reference to the non-static type Entry\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in Map.java (at line 8)\\n\" + ", "-\t\t\t\"\tEntry<String> entry; // invalid static ref\\n\" + ", "-\t\t\t\"\t^^^^^\\n\" + ", "-\t\t\t\"Cannot make a static reference to the non-static type Entry\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in Map.java (at line 11)\\n\" + ", "-\t\t\t\"\tvoid c(Map.Entry<String> e) { } // illegal \\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^\\n\" + ", "-\t\t\t\"The member type Map.Entry<String> must be qualified with a parameterized type, since it is not static\\n\" + ", "-\t\t\t\"----------\\n\");", "+            \"----------\\n\" + ", "+    \t\t\"1. ERROR in Map.java (at line 5)\\n\" + ", "+    \t\t\"\tstatic void foo(Entry<String> e) { } // invalid static ref\\n\" + ", "+    \t\t\"\t            ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+    \t\t\"The method foo cannot be declared static; static methods can only be declared in a static or top level type\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. ERROR in Map.java (at line 5)\\n\" + ", "+    \t\t\"\tstatic void foo(Entry<String> e) { } // invalid static ref\\n\" + ", "+    \t\t\"\t                ^^^^^\\n\" + ", "+    \t\t\"Cannot make a static reference to the non-static type Entry\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"3. ERROR in Map.java (at line 8)\\n\" + ", "+    \t\t\"\tEntry<String> entry; // invalid static ref\\n\" + ", "+    \t\t\"\t^^^^^\\n\" + ", "+    \t\t\"Cannot make a static reference to the non-static type Entry\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"4. ERROR in Map.java (at line 11)\\n\" + ", "+    \t\t\"\tvoid c(Map.Entry<String> e) { } // illegal \\n\" + ", "+    \t\t\"\t       ^^^^^^^^^\\n\" + ", "+    \t\t\"The member type Map.Entry<String> must be qualified with a parameterized type, since it is not static\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"5. WARNING in Map.java (at line 12)\\n\" + ", "+    \t\t\"\tvoid b(Entry e) { } // OK\\n\" + ", "+    \t\t\"\t       ^^^^^\\n\" + ", "+    \t\t\"Type safety: Map.Entry is a raw type. References to generic type Map<M>.Entry<E> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba9e58e54296a48c8401d3e1837c6da1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GrammarCoverageTests308.java", "commitBeforeChange": "b9ab827b0e2709263cd127badca5672535507466", "commitAfterChange": "5da340dfbdee6d0d431864522bf5ee4b7e53f3e4", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void test038() throws Exception", "signatureAfterChange": " \tpublic void test038() throws Exception", "diff": ["-\t\t\t\t\"----------\\n\");", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"2. ERROR in X.java (at line 12)\\n\" +", "+\t\t\t\t\"\ti = @Marker W<@Marker Integer>::<@Marker String> new;\\n\" +", "+\t\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t    \"The target type of this expression must be a functional interface\\n\" +", "+\t\t\t    \"----------\\n\"", "+\t\t\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc71c051c94426b4c6e125ee5dde5687", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 200, "methodNumberAfterChange": 200, "signatureBeforeChange": " public void test0506_try_finally()", "signatureAfterChange": " public void test0506_try_finally()", "diff": ["+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tif (o == null) { /* */ }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfea5650ea99c7827de1ceaaff3b1c93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 620, "methodNumberAfterChange": 620, "signatureBeforeChange": " \tpublic void test616()", "signatureAfterChange": " \tpublic void test616()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in Map.java (at line 9)\\n\" + ", "-\t\t\t\"\tvoid c(Map.Entry<String> e) { } // illegal (correctly flagged)\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^\\n\" + ", "-\t\t\t\"The member type Map.Entry<String> must be qualified with a parameterized type, since it is not static\\n\" + ", "-\t\t\t\"----------\\n\");", "+            \"----------\\n\" + ", "+    \t\t\"1. ERROR in Map.java (at line 9)\\n\" + ", "+    \t\t\"\tvoid c(Map.Entry<String> e) { } // illegal (correctly flagged)\\n\" + ", "+    \t\t\"\t       ^^^^^^^^^\\n\" + ", "+    \t\t\"The member type Map.Entry<String> must be qualified with a parameterized type, since it is not static\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. WARNING in Map.java (at line 10)\\n\" + ", "+    \t\t\"\tvoid b(Entry e) { } // OK\\n\" + ", "+    \t\t\"\t       ^^^^^\\n\" + ", "+    \t\t\"Type safety: Map.Entry is a raw type. References to generic type Map<M>.Entry<E> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c128dfa4c8da98b9a959acfbd4e84044", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "     public void test111()", "signatureAfterChange": "     public void test111()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"\tinterface Iface extends Ann {\\n\" + ", "-\t\t\t\"\t                        ^^^\\n\" + ", "-\t\t\t\"The annotation type Ann should not be used as a superinterface for Iface\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tabstract class Klass implements Ann {\\n\" + ", "-\t\t\t\"\t                                ^^^\\n\" + ", "-\t\t\t\"The annotation type Ann should not be used as a superinterface for Klass\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\t\"\tclass SubKlass extends Klass {\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^\\n\" + ", "-\t\t\t\"The type SubKlass must implement the inherited abstract method Ann.foo()\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 20)\\n\" + ", "-\t\t\t\"\tclass AnnImpl implements Ann {\\n\" + ", "-\t\t\t\"\t                         ^^^\\n\" + ", "-\t\t\t\"The annotation type Ann should not be used as a superinterface for AnnImpl\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 21)\\n\" + ", "-\t\t\t\"\tpublic boolean equals(Object obj) { return false; }\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method equals(Object) of type AnnImpl should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"6. WARNING in X.java (at line 22)\\n\" + ", "-\t\t\t\"\tpublic int hashCode() { return 0; }\\n\" + ", "-\t\t\t\"\t           ^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method hashCode() of type AnnImpl should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"7. WARNING in X.java (at line 23)\\n\" + ", "-\t\t\t\"\tpublic String toString() { return null; }\\n\" + ", "-\t\t\t\"\t              ^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method toString() of type AnnImpl should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "-\t\t\t\"----------\\n\");", "+            \"----------\\n\" + ", "+    \t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "+    \t\t\"\tinterface Iface extends Ann {\\n\" + ", "+    \t\t\"\t                        ^^^\\n\" + ", "+    \t\t\"The annotation type Ann should not be used as a superinterface for Iface\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "+    \t\t\"\tabstract class Klass implements Ann {\\n\" + ", "+    \t\t\"\t                                ^^^\\n\" + ", "+    \t\t\"The annotation type Ann should not be used as a superinterface for Klass\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "+    \t\t\"\tclass SubKlass extends Klass {\\n\" + ", "+    \t\t\"\t      ^^^^^^^^\\n\" + ", "+    \t\t\"The type SubKlass must implement the inherited abstract method Ann.foo()\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"4. WARNING in X.java (at line 20)\\n\" + ", "+    \t\t\"\tclass AnnImpl implements Ann {\\n\" + ", "+    \t\t\"\t                         ^^^\\n\" + ", "+    \t\t\"The annotation type Ann should not be used as a superinterface for AnnImpl\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"5. WARNING in X.java (at line 21)\\n\" + ", "+    \t\t\"\tpublic boolean equals(Object obj) { return false; }\\n\" + ", "+    \t\t\"\t               ^^^^^^^^^^^^^^^^^^\\n\" + ", "+    \t\t\"The method equals(Object) of type AnnImpl should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"6. WARNING in X.java (at line 22)\\n\" + ", "+    \t\t\"\tpublic int hashCode() { return 0; }\\n\" + ", "+    \t\t\"\t           ^^^^^^^^^^\\n\" + ", "+    \t\t\"The method hashCode() of type AnnImpl should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"7. WARNING in X.java (at line 23)\\n\" + ", "+    \t\t\"\tpublic String toString() { return null; }\\n\" + ", "+    \t\t\"\t              ^^^^^^^^^^\\n\" + ", "+    \t\t\"The method toString() of type AnnImpl should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"8. WARNING in X.java (at line 30)\\n\" + ", "+    \t\t\"\tClass c = SubKlass.class;\\n\" + ", "+    \t\t\"\t^^^^^\\n\" + ", "+    \t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c17793e0479e66ebe5e862cb1d6c59d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "3f665dc08ffa02e27b74efb0940c16f2120a11f8", "commitAfterChange": "307e2de84d078daed3099015a7ac89d980746b6b", "methodNumberBeforeChange": 750, "methodNumberAfterChange": 750, "signatureBeforeChange": " public void test0730()", "signatureAfterChange": " public void test0730()", "diff": ["-\t\t\"----------\\n\"", "-\t\t//TODO should be", "-//\t\t\"----------\\n\" + ", "-//\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-//\t\t\"\tZork z;\\n\" + ", "-//\t\t\"\t^^^^\\n\" + ", "-//\t\t\"Zork cannot be resolved to a type\\n\" + ", "-//\t\t\"----------\\n\" + ", "-//\t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "-//\t\t\"\tprivate SuperInterface< ? extends SuperInterface> x = null;\\n\" + ", "-//\t\t\"\t                                  ^^^^^^^^^^^^^^\\n\" + ", "-//\t\t\"X.SuperInterface is a raw type. References to generic type X.SuperInterface<A> should be parameterized\\n\" + ", "-//\t\t\"----------\\n\" + ", "-//\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "-//\t\t\"\t((SubInterface) this.x).getString();\\n\" + ", "-//\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-//\t\t\"Cannot cast from X.SuperInterface<capture#1-of ? extends X.SuperInterface> to X.SubInterface\\n\" + ", "-//\t\t\"----------\\n\"", "-\t\t);", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\"\t((SubInterface) this.x).getString();\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Cannot cast from X.SuperInterface<capture#1-of ? extends X.SuperInterface> to X.SubInterface\\n\" + ", "+\t\t\"----------\\n\"\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2f715f477097263f60ab85c7af9a3b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 364, "methodNumberAfterChange": 364, "signatureBeforeChange": "  public void test1025()", "signatureAfterChange": "  public void test1025()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\"\tif (o == null) return;\\n\" + ", "+\t\t\"\t               ^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3de19f6def75a6e0adceaf3ef5feb30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_5.java", "commitBeforeChange": "1c0c2bf77ea7eb024038ba5150fcc9eb4dd14084", "commitAfterChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " public void test046()", "signatureAfterChange": " public void test046()", "diff": ["+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tpublic abstract void foo();\\n\" + ", "+\t\t\"\t                     ^^^^^\\n\" + ", "+\t\t\"The method foo() of type Y should be tagged with @Override since it actually overrides a superclass method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c503190ed2d923259ca99e9af5656c91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GrammarCoverageTests308.java", "commitBeforeChange": "4e993a8d5cbdc7815c7050ad8787e1c566312d6a", "commitAfterChange": "7d431a6663c03691d383a66bc16841bb87e3308d", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void test038() throws Exception", "signatureAfterChange": " \tpublic void test038() throws Exception", "diff": ["-\t\t\t\t\"----------\\n\"", "-\t\t\t\t);", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\t\"\ti = @Marker W<@Marker Integer>::<@Marker String> new;\\n\" + ", "+\t\t\t\t\"\t                                  ^^^^^^\\n\" + ", "+\t\t\t\t\"Marker cannot be resolved to a type\\n\" + ", "+\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5aea6559310fd99dbce3c0539846e44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "0660a80b4f83507ec084149491c197acba246b67", "commitAfterChange": "593a2bfc58d2fd5243ade8b5af13c44714cac2ea", "methodNumberBeforeChange": 1045, "methodNumberAfterChange": 1045, "signatureBeforeChange": " public void test1033()", "signatureAfterChange": " public void test1033()", "diff": ["+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\tvoid bar2(Class... classes) {}\\n\" + ", "+\t\t\"\t          ^^^^^\\n\" + ", "+\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6ff2a408a73cbda57f8f6643f32df04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8f217d25322b885604d27f1ae4690e476bac378b", "commitAfterChange": "9cc20cb240e3ca7f459d6bee269a4e8a319e621d", "methodNumberBeforeChange": 315, "methodNumberAfterChange": 315, "signatureBeforeChange": " \tpublic void test0311()", "signatureAfterChange": " \tpublic void test0311()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tthis.foo((List)null);\\n\" + ", "+\t\t\t\"\t          ^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9cc0d7e6fd4f7994f233545af3aa485", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 315, "methodNumberAfterChange": 315, "signatureBeforeChange": " \tpublic void test311()", "signatureAfterChange": " \tpublic void test311()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tthis.foo((List)null);\\n\" + ", "+\t\t\t\"\t          ^^^^\\n\" + ", "+\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca66e94f21802f34617aa063599dfbbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 182, "methodNumberAfterChange": 182, "signatureBeforeChange": " \tpublic void test178()", "signatureAfterChange": " \tpublic void test178()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\t} else if (t instanceof X) {\\n\" + ", "+\t\t\t\"\t                        ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caefbf77685e3e0d9a891b2e22d93374", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " public void test0093_instanceof()", "signatureAfterChange": " public void test0093_instanceof()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (x == null) { /* */ }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5820ec528aa6e7eb202905c016e4fce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "1c0c2bf77ea7eb024038ba5150fcc9eb4dd14084", "commitAfterChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "methodNumberBeforeChange": 385, "methodNumberAfterChange": 385, "signatureBeforeChange": " \tpublic void test383()", "signatureAfterChange": " \tpublic void test383()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X extends Y implements I { public <T> void foo(Class<T> s) {} }\\n\" + ", "+\t\t\t\"\t                                                        ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The method foo(Class<T>) of type X should be tagged with @Override since it actually overrides a superclass method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d80e59e3e4a35298705163f1acabb790", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 577, "methodNumberAfterChange": 577, "signatureBeforeChange": " \tpublic void test573()", "signatureAfterChange": " \tpublic void test573()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tdoWithEnumClass((Class<Enum>) cl);\\n\" + ", "+\t\t\t\"\t                       ^^^^\\n\" + ", "+\t\t\t\"Type safety: Enum is a raw type. References to generic type Enum<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfb3366e0d5c2c8c83b426cd7decf804", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaRegressionTest.java", "commitBeforeChange": "40aba6682d4eea8f15f9ae037123e7cedc4a4ef3", "commitAfterChange": "ffcab3bbd38103e7f6861237d076c93f4488ed08", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void testBug463526()", "signatureAfterChange": " public void testBug463526()", "diff": ["+\t\"----------\\n\" + ", "+\t\"2. ERROR in Test.java (at line 4)\\n\" + ", "+\t\"\tr.accept((l) -> (doItOnTheClass(new Object())));\\n\" + ", "+\t\"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\"Invalid expression as statement\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2fb034c47dc28bc47fdaa2268d8db11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 362, "methodNumberAfterChange": 362, "signatureBeforeChange": "  public void test1023()", "signatureAfterChange": "  public void test1023()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\"\tif (o == null) return;\\n\" + ", "+\t\t\"\t               ^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3278afe1b390fc491a996f42ac146ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 250, "methodNumberAfterChange": 250, "signatureBeforeChange": " \tpublic void test246()", "signatureAfterChange": " \tpublic void test246()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tMX<Class<? extends Object>> mx2 = new MX<Class>();\\n\" + ", "+\t\t\t\"\t                                         ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e410ddc8197a7053431cd79bc5cb7e30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "a7538ae82dbd33b3f26dec50ae8ce6f249c7a04f", "commitAfterChange": "f0ca1f9e3571a6c8cc7bcfc8fee3982374c51194", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void test037()", "signatureAfterChange": " \tpublic void test037()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\t\"\t* @param <T> Type parameter 2\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"2. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\t\"\t* @param <V> Type parameter 2\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"3. ERROR in X.java (at line 6)\\n\" +", "-\t\t\t\t\"\t* @param <U> Type parameter 1\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"4. ERROR in X.java (at line 10)\\n\" +", "-\t\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" +", "-\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "-\t\t\t\t\"----------\\n\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t* @param <T> Type parameter 2\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t* @param <V> Type parameter 2\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\t* @param <U> Type parameter 1\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" + ", "+\t\t\t\"\t                        ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Exceptions cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7f043d9b5ba7ad04c41542f6695929d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 269, "methodNumberAfterChange": 269, "signatureBeforeChange": "\t\t \tpublic void test265()", "signatureAfterChange": "\t\t \tpublic void test265()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tXC<?> xcu2 = (XC<? extends X>) new X<E>();\t\t\t\t\t\t\\n\" + ", "+\t\t\t\"\t                           ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0d83c903fdcbb7b3fe9ee8b500d2f0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "75fd26922e4c1a3951587500ef0d4c4aec9b93ba", "commitAfterChange": "ec933200149b0beb2aa7f1482e62f6a573c5bd61", "methodNumberBeforeChange": 182, "methodNumberAfterChange": 182, "signatureBeforeChange": "     public void test176()", "signatureAfterChange": "     public void test176()", "diff": ["-    // https://bugs.eclipse.org/bugs/show_bug.cgi?id=97220", "+    // https://bugs.eclipse.org/bugs/show_bug.cgi?id=97220 - variation", "-            \"----------\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+    \t\t\"\t@SuppressWarnings({\\\"serial\\\", \\\"nls\\\"})\\n\" + ", "+    \t\t\"\t                   ^^^^^^^^\\n\" + ", "+    \t\t\"Unnecessary @SuppressWarnings(\\\"serial\\\")\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f30a7608d7cf776202df2803c010ee17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "1c0c2bf77ea7eb024038ba5150fcc9eb4dd14084", "commitAfterChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void test005()", "signatureAfterChange": " \tpublic void test005()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tprotected Object clone() { return this; }\\n\" + ", "+\t\t\t\"\t                 ^^^^^^^\\n\" + ", "+\t\t\t\"The method clone() of type X should be tagged with @Override since it actually overrides a superclass method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f34be415bb405eb7dbcb7c1f33a8271a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "1c0c2bf77ea7eb024038ba5150fcc9eb4dd14084", "commitAfterChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "methodNumberBeforeChange": 350, "methodNumberAfterChange": 350, "signatureBeforeChange": " \tpublic void test348()", "signatureAfterChange": " \tpublic void test348()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tpublic <T extends Exception> T bar(T t) { return t; }\\n\" + ", "+\t\t\t\"\t                               ^^^^^^^^\\n\" + ", "+\t\t\t\"The method bar(T) of type new X<R>(){} should be tagged with @Override since it actually overrides a superclass method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f374732d692096e6b065dc4cb1f6ef87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 398, "methodNumberAfterChange": 398, "signatureBeforeChange": " public void test2009_flow_info()", "signatureAfterChange": " public void test2009_flow_info()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\"\tif (o == null) { /* */ }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f638e3011e6f4f5c00bbe478731b7047", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 285, "methodNumberAfterChange": 285, "signatureBeforeChange": "\t \tpublic void test281()", "signatureAfterChange": "\t \tpublic void test281()", "diff": ["-\t\t\t\"\t                         ^^\\n\" +", "+\t\t\t\"\t                         ^^\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tinterface Y<T3 extends Comparable> {}\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f83fc9bdf00c3f9d3ba92b62833ce082", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "1c0c2bf77ea7eb024038ba5150fcc9eb4dd14084", "commitAfterChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void test019()", "signatureAfterChange": " \tpublic void test019()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\t\"\tpublic String toString() {\\n\" + ", "+\t\t\t\"\t              ^^^^^^^^^^\\n\" + ", "+\t\t\t\"The method toString() of type XY should be tagged with @Override since it actually overrides a superclass method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f97527dd655720ad0837218576108748", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 333, "methodNumberAfterChange": 333, "signatureBeforeChange": " public void test0955_assert_combined()", "signatureAfterChange": " public void test0955_assert_combined()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (o == null) { };\\n\" + ", "+\t\t\"\t               ^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fac9009b4708a0755811bca614cf38c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_3.java", "commitBeforeChange": "3307a3b21f8472cc998512e9e4cd5afdd4f17b52", "commitAfterChange": "b155f47580a90f694a899aae6d06a1ff29f450b8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void test011()", "signatureAfterChange": " public void test011()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in p1\\\\X.java (at line 5)\\n\" +", "-\t\t\"\twhile (false) System.out.println(\\\"unreachable\\\");\t\\n\" +", "-\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Unreachable code\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in p1\\\\X.java (at line 9)\\n\" +", "-\t\t\"\tfor (;false;) System.out.println(\\\"unreachable\\\");\t\\n\" +", "-\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Unreachable code\\n\" +", "-\t\t\"----------\\n\"", "-\t);", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in p1\\\\X.java (at line 5)\\n\" + ", "+\t\t\"\twhile (false) System.out.println(\\\"unreachable\\\");\t\\n\" + ", "+\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Unreachable code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in p1\\\\X.java (at line 9)\\n\" + ", "+\t\t\"\tfor (;false;) System.out.println(\\\"unreachable\\\");\t\\n\" + ", "+\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Unreachable code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in p1\\\\X.java (at line 11)\\n\" + ", "+\t\t\"\tif (false)System.out.println(\\\"unreachable\\\");\t\t\\n\" + ", "+\t\t\"\t          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + ", "+\t\t\"----------\\n\");"]}], "num": 10209}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5cd97850f40800e36b05637683654016", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ed632874a573095985f3ac860319e00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "e760e456d0e96ba9bce504014e582b9dbdf7e542", "commitAfterChange": "c67d112c20f07c2dcda11714ef23687a9781a753", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static void checkNeedForAssignedCast(BlockScope scope, TypeBinding expectedType, CastExpression rhs)", "signatureAfterChange": " public static void checkNeedForAssignedCast(BlockScope scope, TypeBinding expectedType, CastExpression rhs)", "diff": ["-\tif (scope.compilerOptions().getSeverity(CompilerOptions.UnnecessaryTypeCheck) == ProblemSeverities.Ignore) return;", "+\tCompilerOptions compilerOptions = scope.compilerOptions();", "+\tif (compilerOptions.getSeverity(CompilerOptions.UnnecessaryTypeCheck) == ProblemSeverities.Ignore) return;", "+\t\tif (compilerOptions.isAnnotationBasedNullAnalysisEnabled && compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\t\t// are null annotations compatible, too?", "+\t\t\tif (findNullTypeAnnotationMismatch(expectedType, castedExpressionType, -1) > 0)", "+\t\t\t\treturn; // already reported unchecked cast (nullness), say no more.", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38e8e50a500e070a1c51f49a63cef4c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "c45031a708344453f01f911278a63ebae41b9cba", "commitAfterChange": "c49a7bd34f8c2781dba76984d24d83335183205f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tboolean analyseResources = currentScope.compilerOptions().analyseResourceLeaks;", "+\tCompilerOptions compilerOptions = currentScope.compilerOptions();", "+\tboolean analyseResources = compilerOptions.analyseResourceLeaks;", "-\tif (this.binding instanceof ParameterizedGenericMethodBinding && this.typeArguments != null) {", "-\t\tParameterizedGenericMethodBinding parameterizedBinding = (ParameterizedGenericMethodBinding) this.binding;", "-\t\tfor (int i = 0; i < this.typeArguments.length; i++)", "-\t\t\tparameterizedBinding.checkNullConstraints(currentScope, this.typeArguments[i], i);", "+\tif (compilerOptions.isAnnotationBasedNullAnalysisEnabled && compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\tif (this.binding instanceof ParameterizedGenericMethodBinding && this.typeArguments != null) {", "+\t\t\tTypeVariableBinding[] typeVariables = this.binding.original().typeVariables();", "+\t\t\tfor (int i = 0; i < this.typeArguments.length; i++)", "+\t\t\t\tthis.typeArguments[i].checkNullConstraints(currentScope, typeVariables, i);", "+\t\t}"]}], "num": 7770}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c58c1ed50bac520d3ff7ceada95f318", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "804e868594f47ec2c0fff6a28502c7b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "eedafe9176d5ca60193623550822839844fd4aae", "commitAfterChange": "16a0328cb89c7e4d508e8edfc85e1af4879c13c7", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tIPath projectOutputLocation, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError, \t\tMap reverseMap) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tIPath projectOutputLocation, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError, \t\tMap rawReverseMap) \t\tthrows JavaModelException", "diff": ["-\t\tMap reverseMap) // can be null if not interested in reverse mapping", "+\t\tMap rawReverseMap) // can be null if not interested in reverse mapping", "-\t\t\t\t\t\tif (reverseMap != null && reverseMap.get(resolvedPath = resolvedEntry.getPath()) == null) reverseMap.put(resolvedPath , rawEntry);", "+\t\t\t\t\t\tif (rawReverseMap != null) {", "+\t\t\t\t\t\t\tif (rawReverseMap.get(resolvedPath = resolvedEntry.getPath()) == null) rawReverseMap.put(resolvedPath , rawEntry);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tIClasspathEntry cEntry = containerEntries[j];", "+\t\t\t\t\t\tClasspathEntry cEntry = (ClasspathEntry)containerEntries[j];", "-\t\t\t\t\t\t// if container is exported, then its nested entries must in turn be exported  (21749)", "-\t\t\t\t\t\tif (rawEntry.isExported()){", "-\t\t\t\t\t\t\tcEntry = new ClasspathEntry(cEntry.getContentKind(),", "-\t\t\t\t\t\t\t\tcEntry.getEntryKind(), cEntry.getPath(),", "-\t\t\t\t\t\t\t\tcEntry.getInclusionPatterns(), cEntry.getExclusionPatterns(), ", "-\t\t\t\t\t\t\t\tcEntry.getSourceAttachmentPath(), cEntry.getSourceAttachmentRootPath(), ", "-\t\t\t\t\t\t\t\tcEntry.getOutputLocation(), true); // duplicate container entry for tagging it as exported", "+\t\t\t\t\t\t// if container is exported or restricted, then its nested entries must in turn be exported  (21749) and/or propagate restrictions", "+\t\t\t\t\t\tcEntry = cEntry.combineWith(rawEntry);", "+\t\t\t\t\t\tif (rawReverseMap != null) {", "+\t\t\t\t\t\t\tif (rawReverseMap.get(resolvedPath = cEntry.getPath()) == null) rawReverseMap.put(resolvedPath , rawEntry);", "-\t\t\t\t\t\tif (reverseMap != null && reverseMap.get(resolvedPath = cEntry.getPath()) == null) reverseMap.put(resolvedPath, rawEntry);", "-\t\t\t\t\tif (reverseMap != null && reverseMap.get(resolvedPath = rawEntry.getPath()) == null) reverseMap.put(resolvedPath, rawEntry);", "+\t\t\t\t\tif (rawReverseMap != null) {", "+\t\t\t\t\t\tif (rawReverseMap.get(resolvedPath = rawEntry.getPath()) == null) rawReverseMap.put(resolvedPath , rawEntry);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c21e6209039c723e398189b98eec8f81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "3995ce68a52c60c01c40bfcd8efe0de9a7393fef", "commitAfterChange": "dc9db9c22a51b01cfbe75b8acac7c7a000432f1b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void tearDownSuite() throws Exception", "signatureAfterChange": " public void tearDownSuite() throws Exception", "diff": ["-\tbuffer1.append(\"Time measures:\").append(LINE_SEPARATOR);", "-\tbuffer1.append(\"\t- first format:\").append(LINE_SEPARATOR);", "-\tbuffer1.append(\"\t\t+ elapsed = \"+timeString(TIME_MEASURES.formatting[0])).append(LINE_SEPARATOR);", "-\tbuffer1.append(\"\t\t+ occurrences = \"+TIME_MEASURES.occurences[0]).append(LINE_SEPARATOR);", "-\tbuffer1.append(\"\t\t+ null output = \"+TIME_MEASURES.null_output[0]).append(LINE_SEPARATOR);", "-\tbuffer1.append(\"\t- repeated format:\").append(LINE_SEPARATOR);", "-\tfor (int i=1; i<FORMAT_REPEAT; i++) {", "-\t\tbuffer1.append(\"\t   n\ufffd \"+(i+1)).append(LINE_SEPARATOR);", "-\t\tbuffer1.append(\"\t\t+ elapsed = \"+timeString(TIME_MEASURES.formatting[i])).append(LINE_SEPARATOR);", "-\t\tbuffer1.append(\"\t\t+ occurrences = \"+TIME_MEASURES.occurences[i]).append(LINE_SEPARATOR);", "-\t\tbuffer1.append(\"\t\t+ null output = \"+TIME_MEASURES.null_output[i]).append(LINE_SEPARATOR);", "+\tbuffer1.append(\"Time measures:\");", "+\tif (CLEAN) {", "+\t\tbuffer1.append(\" cannot be done as the directory was cleaned!\");", "+\t\tbuffer1.append(LINE_SEPARATOR);", "+\t} else {", "+\t\tbuffer1.append(LINE_SEPARATOR);", "+\t\tfor (int i=0; i<FORMAT_REPEAT; i++) {", "+\t\t\tbuffer1.append(\"\t- \"+counterToString(i+1)).append(\" format:\").append(LINE_SEPARATOR);", "+\t\t\tbuffer1.append(\"\t\t+ elapsed = \"+timeString(TIME_MEASURES.formatting[i])).append(LINE_SEPARATOR);", "+\t\t\tbuffer1.append(\"\t\t+ occurrences = \"+TIME_MEASURES.occurences[i]).append(LINE_SEPARATOR);", "+\t\t\tbuffer1.append(\"\t\t+ null output = \"+TIME_MEASURES.null_output[i]).append(LINE_SEPARATOR);", "+\t\t}"]}], "num": 4561}
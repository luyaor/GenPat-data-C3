{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a01899d667716e7ee93298dc71f599ff", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c8c7b39b2512fddf76c844eb413693d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/TypeBindingTests308.java", "commitBeforeChange": "ee49c8f1081c02bdb311590036980191aff6a2f1", "commitAfterChange": "d3d6e8a120fcc21d2141655c16c3f72a3fe7aa82", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "\r \tpublic void testAnnotatedBinaryType5() throws CoreException, IOException", "signatureAfterChange": "\r \tpublic void testAnnotatedBinaryType5() throws CoreException, IOException", "diff": ["-\t\t\tassertEquals(\"Wrong type\", \"@T{ value = (int)1} Outer<@T{ value = (int)2} ? extends @T{ value = (int)3} String>.@T{ value = (int)4} Inner<@T{ value = (int)5} ? super @T{ value = (int)6} Integer> @T{ value = (int)8} [] @T{ value = (int)7} []\", type.toString());\t\t\r", "+\t\t\tassertEquals(\"Wrong type\", \"@T((int)1) Outer<@T((int)2) ? extends @T((int)3) String>.@T((int)4) Inner<@T((int)5) ? super @T((int)6) Integer> @T((int)8) [] @T((int)7) []\", type.toString());\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2f274b8929683df07425489c6c18124", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/TypeBindingTests308.java", "commitBeforeChange": "ee49c8f1081c02bdb311590036980191aff6a2f1", "commitAfterChange": "d3d6e8a120fcc21d2141655c16c3f72a3fe7aa82", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "\r \tpublic void testAnnotatedBinaryType2() throws CoreException, IOException", "signatureAfterChange": "\r \tpublic void testAnnotatedBinaryType2() throws CoreException, IOException", "diff": ["-\t\t\tassertEquals(\"Wrong type\", \"@Marker{ value = (String)\\\"Outer\\\"} Outer.@Marker{ value = (String)\\\"Middle\\\"} Middle.@Marker{ value = (String)\\\"Inner\\\"} Inner @Marker{ value = (String)\\\"Extended []\\\"} [] @Marker{ value = (String)\\\"Prefix []\\\"} []\", type.toString());\t\t\r", "+\t\t\tassertEquals(\"Wrong type\", \"@Marker((String)\\\"Outer\\\") Outer.@Marker((String)\\\"Middle\\\") Middle.@Marker((String)\\\"Inner\\\") Inner @Marker((String)\\\"Extended []\\\") [] @Marker((String)\\\"Prefix []\\\") []\", type.toString());\t\t\r"]}], "num": 20058}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c2f8a8677c2fe8e76757964eebfd3f35", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a692b9c3ba38fb680e53be1ae825dc6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "d7bf97b0906e6821b36f900e536d18f1ccdddff2", "commitAfterChange": "dd10489904dda11a1b9c522a71a4705b9646605e", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public MethodBinding binding(TypeBinding targetType)", "signatureAfterChange": " public MethodBinding binding(TypeBinding targetType, boolean reportErrors, Scope scope)", "diff": ["-public MethodBinding binding(TypeBinding targetType) {", "+public MethodBinding binding(TypeBinding targetType, boolean reportErrors, Scope scope) {", "-\t\tif (!resolvePart2(this.suspendedResolutionState))", "+\t\tif (!resolvePart2(this.suspendedResolutionState)) {", "+\t\t\tif (reportErrors && !this.suspendedResolutionState.hasReportedError) {", "+\t\t\t\tif (this.suspendedResolutionState.cannotInferDiamond)", "+\t\t\t\t\tscope.problemReporter().cannotInferElidedTypes(this);", "+\t\t\t\telse", "+\t\t\t\t\tscope.problemReporter().genericInferenceError(\"constructor is unexpectedly unresolved\", this); //$NON-NLS-1$", "+\t\t\t\tthis.suspendedResolutionState.hasReportedError = true;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (reportErrors && this.binding != null && !this.binding.isValidBinding()) {", "+\t\tif (this.binding.declaringClass == null)", "+\t\t\tthis.binding.declaringClass = (ReferenceBinding) this.resolvedType;", "+\t\tscope.problemReporter().invalidConstructor(this, this.binding);", "+\t\tthis.suspendedResolutionState.hasReportedError = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e89c07733986ec7fdd60c96f78512809", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "058521030c68f15c9e89da9672ee6010c8a54c82", "commitAfterChange": "ad3ff878b34a7bd9fdf182c96c6fcce95bcbf6a2", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": " protected void consumeNormalAnnotation(boolean isTypeAnnotation)", "signatureAfterChange": " protected void consumeNormalAnnotation(boolean isTypeAnnotation)", "diff": ["+\t\tif (this.expressionPtr >= 0 && this.expressionStack[this.expressionPtr] instanceof CompletionOnMarkerAnnotationName) {", "+\t\t\tAnnotation annotation = (Annotation)this.expressionStack[this.expressionPtr];", "+\t\t\tif(this.currentElement != null) {", "+\t\t\t\tannotationRecoveryCheckPoint(annotation.sourceStart, annotation.declarationSourceEnd);", "+\t\t\t\tif (this.currentElement instanceof RecoveredAnnotation) {", "+\t\t\t\t\tthis.currentElement = ((RecoveredAnnotation)this.currentElement).addAnnotation(annotation, this.identifierPtr);", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\tif(!this.statementRecoveryActivated &&", "+\t\t\t\t\tthis.options.sourceLevel < ClassFileConstants.JDK1_5 &&", "+\t\t\t\t\tthis.lastErrorEndPositionBeforeRecovery < this.scanner.currentPosition) {", "+\t\t\t\tproblemReporter().invalidUsageOfAnnotation(annotation);", "+\t\t\t}", "+\t\t\tthis.recordStringLiterals = true;", "+\t\t\treturn;", "+\t\t}"]}], "num": 50629}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2376ceb104755c802d28e20f90f57d30", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f90eea69e876470c87bca7c9af6c7a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "c986b0f978be08ca5c6279c4e65ad1a7f4c62b60", "commitAfterChange": "be7acf5c57ef3c4a15433f3f4f0191da4eed3774", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\t  \tpublic void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "signatureAfterChange": "\t  \tpublic void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "diff": ["+\t\t\tint operator = (operation.bits & OperatorMASK) >> OperatorSHIFT;", "-\t\t\t\tvariableReference.generateCompoundAssignment(currentScope, codeStream, syntheticAccessors == null ? null : syntheticAccessors[WRITE], operation.right, (operation.bits & OperatorMASK) >> OperatorSHIFT, operation.implicitConversion, valueRequired);", "+\t\t\t\tvariableReference.generateCompoundAssignment(currentScope, codeStream, syntheticAccessors == null ? null : syntheticAccessors[WRITE], operation.right, operator, operation.implicitConversion, valueRequired);", "+\t\t\t\tif (valueRequired) {", "+\t\t\t\t\tcodeStream.generateImplicitConversion(assignment.implicitConversion);", "+\t\t\t\t}\t\t\t\t", "-\t\t\t}", "-\t\t\tint operator = (operation.bits & OperatorMASK) >> OperatorSHIFT;", "+\t\t\t} ", "-\t\t\t\t&& ((operator == PLUS) || (operator == MULTIPLY)) // only commutative operations", "-\t\t\t\t&& ((variableReference = (SingleNameReference) operation.right).binding == binding)", "-\t\t\t\t&& (operation.left.constant != NotAConstant) // exclude non constant expressions, since could have side-effect", "-\t\t\t\t&& (((operation.left.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_JavaLangString) // exclude string concatenation which would occur backwards", "-\t\t\t\t&& (((operation.right.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_JavaLangString)) { // exclude string concatenation which would occur backwards", "+\t\t\t\t\t&& ((operator == PLUS) || (operator == MULTIPLY)) // only commutative operations", "+\t\t\t\t\t&& ((variableReference = (SingleNameReference) operation.right).binding == binding)", "+\t\t\t\t\t&& (operation.left.constant != NotAConstant) // exclude non constant expressions, since could have side-effect", "+\t\t\t\t\t&& (((operation.left.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_JavaLangString) // exclude string concatenation which would occur backwards", "+\t\t\t\t\t&& (((operation.right.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_JavaLangString)) { // exclude string concatenation which would occur backwards", "+\t\t\t\tif (valueRequired) {", "+\t\t\t\t\tcodeStream.generateImplicitConversion(assignment.implicitConversion);", "+\t\t\t\t}\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad8c7cab0b2b1ea51cbe2e710095f9f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "c986b0f978be08ca5c6279c4e65ad1a7f4c62b60", "commitAfterChange": "be7acf5c57ef3c4a15433f3f4f0191da4eed3774", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "signatureAfterChange": " public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "diff": ["+\t\tint operator = (operation.bits & OperatorMASK) >> OperatorSHIFT;", "-\t\t\tvariableReference.generateCompoundAssignment(currentScope, codeStream, this.syntheticAccessors == null ? null : this.syntheticAccessors[WRITE], operation.right, (operation.bits & OperatorMASK) >> OperatorSHIFT, operation.left.implicitConversion /*should be equivalent to no conversion*/, valueRequired);", "+\t\t\tvariableReference.generateCompoundAssignment(currentScope, codeStream, this.syntheticAccessors == null ? null : this.syntheticAccessors[WRITE], operation.right, operator, operation.implicitConversion, valueRequired);", "+\t\t\tif (valueRequired) {", "+\t\t\t\tcodeStream.generateImplicitConversion(assignment.implicitConversion);", "+\t\t\t}", "-\t\tint operator = (operation.bits & OperatorMASK) >> OperatorSHIFT;", "-\t\t\tvariableReference.generateCompoundAssignment(currentScope, codeStream, this.syntheticAccessors == null ? null : this.syntheticAccessors[WRITE], operation.left, operator, operation.right.implicitConversion /*should be equivalent to no conversion*/, valueRequired);", "+\t\t\tvariableReference.generateCompoundAssignment(currentScope, codeStream, this.syntheticAccessors == null ? null : this.syntheticAccessors[WRITE], operation.left, operator, operation.implicitConversion, valueRequired);", "+\t\t\tif (valueRequired) {", "+\t\t\t\tcodeStream.generateImplicitConversion(assignment.implicitConversion);", "+\t\t\t}"]}], "num": 57982}
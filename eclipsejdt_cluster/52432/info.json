{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9358531864aaeeea9c3711aed20f7897", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59145ac6bb6a8fc5cedb280f6a62abad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "deb4c75c2d37ac07e9432a3703c8ccb5941e4378", "commitAfterChange": "6f830ab191fdf0b1420d404c99dda8abb906fdd8", "methodNumberBeforeChange": 199, "methodNumberAfterChange": 199, "signatureBeforeChange": " \tpublic void test0185() throws JavaModelException", "signatureAfterChange": " \tpublic void test0185() throws JavaModelException", "diff": ["-\t\tfinal IProject project = getWorkspaceRoot().getProject(\"Converter15\");", "-\t\tIJavaProject javaProject = JavaCore.create(project);", "-\t\tHashtable options = (Hashtable) javaProject.getOptions(true);", "-\t\tHashtable newOptions = (Hashtable) javaProject.getOptions(true);", "-\t\ttry {", "-\t\t\tnewOptions.put(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION, JavaCore.WARNING);", "-\t\t\tJavaCore.setOptions(newOptions);", "-", "-\t\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "-\t    \tfinal String contents =", "-\t\t\t\t\"import java.util.ArrayList;\\n\" +", "-\t\t\t\t\"import java.util.List;\\n\" +", "-\t\t\t\t\"@SuppressWarnings(\\\"unchecked\\\")\\n\" +", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"\tList<String> ls = new ArrayList();\\n\" +", "-\t\t\t\t\"}\";", "-\t    \tASTNode node = buildAST(", "-\t    \t\t\tcontents,", "-\t    \t\t\tthis.workingCopy,", "-\t    \t\t\tfalse);", "-\t    \tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t    \tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t    \tassertProblemsSize(compilationUnit, 0);", "-\t\t} finally {", "-\t\t\tjavaProject.setOptions(options);", "-\t\t}", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "+    \tfinal String contents =", "+\t\t\t\"import java.util.ArrayList;\\n\" +", "+\t\t\t\"import java.util.List;\\n\" +", "+\t\t\t\"@SuppressWarnings(\\\"unchecked\\\")\\n\" +", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"\tList<String> ls = new ArrayList();\\n\" +", "+\t\t\t\"}\";", "+    \tASTNode node = buildAST(", "+    \t\t\tcontents,", "+    \t\t\tthis.workingCopy);", "+    \tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+    \tCompilationUnit compilationUnit = (CompilationUnit) node;", "+    \tassertProblemsSize(compilationUnit, 0);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6be41f99d3436de9dd700756bf17319b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceInitializer.java", "commitBeforeChange": "4aacf54f1474533e7059867be5e610243474fdfb", "commitAfterChange": "f07048bfc66e27fc594df4283a8ea1d279d49037", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic void initializeDefaultPreferences()", "signatureAfterChange": " \tpublic void initializeDefaultPreferences()", "diff": ["-        Map codeFormatterOptionsMap = DefaultCodeFormatterConstants.getEclipseDefaultSettings(); // code formatter defaults", "-        for (Iterator iter = codeFormatterOptionsMap.entrySet().iterator(); iter.hasNext();) {", "-            Map.Entry entry = (Map.Entry) iter.next();", "-            String optionName = (String) entry.getKey();", "-            defaultOptionsMap.put(optionName, entry.getValue());", "-            optionNames.add(optionName);", "-        }", "+\t\tformatterSettings(defaultOptionsMap, optionNames);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f28e319fbe4b808338ae3e264654796a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "c8221f5c580cd126f6de94fa93158a10785920e8", "commitAfterChange": "16e02dd1e5ecae00490885481270763dbd00d718", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\t\tsubInfo =", "+\t\t\tsubInfo = ", "+\t\t\tthis.subRoutineInits = subInfo;", "-", "-\t\t// propagate inits to enclosing subroutines", "-\t\tFlowInfo initsBeforeReturn = insideSubContext.initsOnReturn.copy().addInitializationsFrom(subInfo);", "-\t\tFlowContext traversedContext = insideSubContext.parent;", "-\t\twhile (traversedContext != null) {", "-\t\t\tAstNode sub = traversedContext.subRoutine();", "-\t\t\tif (sub != null && sub.cannotReturn()) break;//TODO: should move below next line?", "-\t\t\ttraversedContext.initsOnReturn().addInitializationsFrom(initsBeforeReturn);", "-\t\t\ttraversedContext = traversedContext.parent;", "-\t\t}", "-"]}], "num": 52432}
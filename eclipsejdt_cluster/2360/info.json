{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b325a34cd0de25ad725af0af75ddbb1b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "080af9aa0bbea36a86a280cae8ea5e36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "53a88facba099a7ef05d98b75f25800af60438f8", "commitAfterChange": "086132dd6f6e6011785d8d9b469716062157a8c1", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic final Binding getTypeOrPackage(char[][] compoundName)", "signatureAfterChange": " \tpublic final Binding getTypeOrPackage(char[][] compoundName)", "diff": ["-\t\t\t\tqualifiedType = this.createParameterizedType((ReferenceBinding)typeBinding.erasure(), null, qualifiedType);", "+\t\t\t\tqualifiedType = this.environment().createParameterizedType((ReferenceBinding)typeBinding.erasure(), null, qualifiedType);", "-\t\t\t\t\t? this.createParameterizedType(typeBinding, null, qualifiedType)", "+\t\t\t\t\t? this.environment().createParameterizedType(typeBinding, null, qualifiedType)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "341bc3bb788183c68230d671b2f0ad4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "ebf0740a88fe14f88af9807da3fc8260efdeeb0a", "commitAfterChange": "56cd7be7209c3b63ac72922c3a342e501721fcf5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["-\t\t\t\t\tTypeVariableBinding[] typeVariables = inheritedMethod.typeVariables;", "+\t\t\t\t\tTypeVariableBinding[] typeVariables = inheritedMethod.original().typeVariables;", "-\t\t\tTypeVariableBinding[] typeVariables = currentMethod.typeVariables;", "+\t\t\tTypeVariableBinding[] typeVariables = currentMethod.original().typeVariables;"]}], "num": 2360}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ead97d5d619db18c8d0fa349b1692b96", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a03d6d403732a4617ab93a0a93f56aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 239, "signatureBeforeChange": " protected void consumeImportDeclarationsopt()", "signatureAfterChange": " protected void consumeSingleStaticImportDeclarationName()", "diff": ["-}", "-protected void consumeImportDeclarationsopt() {", "-\t// ImportDeclarationsopt ::= ImportDeclarations", "-\tint length;", "-\tif ((length = this.astLengthStack[this.astLengthPtr--]) != 0) {", "-\t\tthis.astPtr -= length;", "-\t\tSystem.arraycopy(", "-\t\t\tthis.astStack,", "-\t\t\tthis.astPtr + 1,", "-\t\t\tthis.compilationUnit.imports = new ImportReference[length],", "-\t\t\t0,", "-\t\t\tlength);", "-\t}", "+}", "+protected void consumeSingleStaticImportDeclarationName() {", "+\t// SingleTypeImportDeclarationName ::= 'import' 'static' Name", "+\t/* push an ImportRef build from the last name ", "+\tstored in the identifier stack. */", "+", "+\tImportReference impt;", "+\tint length;", "+\tchar[][] tokens = new char[length = this.identifierLengthStack[this.identifierLengthPtr--]][];", "+\tthis.identifierPtr -= length;", "+\tlong[] positions = new long[length];", "+\tSystem.arraycopy(this.identifierStack, this.identifierPtr + 1, tokens, 0, length);", "+\tSystem.arraycopy(this.identifierPositionStack, this.identifierPtr + 1, positions, 0, length);", "+\tpushOnAstStack(impt = new ImportReference(tokens, positions, false, AccStatic));", "+", "+\tthis.modifiers = AccDefault;", "+\tthis.modifiersSourceStart = -1; // <-- see comment into modifiersFlag(int)", "+\tif (this.currentToken == TokenNameSEMICOLON){", "+\t\timpt.declarationSourceEnd = this.scanner.currentPosition - 1;", "+\t} else {", "+\t\timpt.declarationSourceEnd = impt.sourceEnd;", "+\t}", "+\timpt.declarationEnd = impt.declarationSourceEnd;", "+\t//this.endPosition is just before the ;", "+\timpt.declarationSourceStart = this.intStack[this.intPtr--];", "+\tif(this.options.sourceLevel < ClassFileConstants.JDK1_5 &&", "+\t\t\tthis.lastErrorEndPositionBeforeRecovery < this.scanner.currentPosition) {", "+\t\tthis.problemReporter().invalidUsageOfStaticImports(impt);", "+\t}", "+\t", "+\tif (this.currentElement != null){", "+\t\tthis.lastCheckPoint = impt.declarationSourceEnd+1;", "+\t\tthis.restartRecovery = true; // used to avoid branching back into the regular automaton\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9932001fb5518daaf27fd4ba07ad95da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AnnotationParser.java", "commitBeforeChange": "aabd59e4934a861167bc5ad69597bc9fd97e06dc", "commitAfterChange": "4ed2786f22dd00c9c1f7773433c3548c8c0f6fc3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tvoid parseQualifiedName() throws InvalidInputException", "signatureAfterChange": "  \tprivate TypeReference parseQualifiedName(boolean reset) throws InvalidInputException", "diff": ["-\t}", "-\tvoid parseQualifiedName() throws InvalidInputException {", "-\t\tnextToken: for (int iToken = 0;; iToken++) {", "-\t\t\tint token = readToken();", "-\t\t\tswitch (token) {", "-\t\t\t\t", "-\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "-\t\t\t\t\tif ((iToken % 2) > 0) break nextToken; // identifiers must be odd tokens", "-\t\t\t\t\tconsumeToken();", "-\t\t\t\t\tpushIdentifier();", "-\t\t\t\t\tif (iToken > 0) {", "-\t\t\t\t\t\tthis.identifierLengthStack[--this.identifierLengthPtr]++; // name . ident", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t\t", "-\t\t\t\tcase TerminalTokens.TokenNameDOT :", "-\t\t\t\t\tif ((iToken % 2) == 0) break nextToken; // dots must be even tokens", "-\t\t\t\t\tconsumeToken();", "-\t\t\t\t\tbreak;", "-\t\t\t\t\t", "-\t\t\t\tdefault :", "-\t\t\t\t\tbreak nextToken;", "-\t\t\t}", "+", "+\tprivate TypeReference parseQualifiedName(boolean reset) throws InvalidInputException {", "+", "+\t\t// Reset identifier stack if requested", "+\t\tif (reset) {", "+\t\t\tthis.identifierPtr = -1;", "+\t\t\tthis.identifierLengthPtr = -1;", "+\t\t}", "+", "+\t\t// Scan tokens", "+\t\tnextToken: for (int iToken=0; ; iToken++) {", "+\t\t\tint token = readToken();", "+\t\t\tswitch (token) {", "+\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "+\t\t\t\t\tif (((iToken % 2) > 0)) { // identifiers must be odd tokens", "+\t\t\t\t\t\tbreak nextToken;", "+\t\t\t\t\t}", "+\t\t\t\t\tpushIdentifier(iToken==0);", "+\t\t\t\t\tconsumeToken();", "+\t\t\t\t\tbreak;", "+\t\t\t\t\t", "+\t\t\t\tcase TerminalTokens.TokenNameDOT :", "+\t\t\t\t\tif ((iToken % 2) == 0) { // dots must be even tokens", "+\t\t\t\t\t\tthrow new InvalidInputException();", "+\t\t\t\t\t}", "+\t\t\t\t\tconsumeToken();", "+\t\t\t\t\tbreak;", "+", "+\t\t\t\tcase TerminalTokens.TokenNamevoid :", "+\t\t\t\tcase TerminalTokens.TokenNameboolean :", "+\t\t\t\tcase TerminalTokens.TokenNamebyte :", "+\t\t\t\tcase TerminalTokens.TokenNamechar :", "+\t\t\t\tcase TerminalTokens.TokenNamedouble :", "+\t\t\t\tcase TerminalTokens.TokenNamefloat :", "+\t\t\t\tcase TerminalTokens.TokenNameint :", "+\t\t\t\tcase TerminalTokens.TokenNamelong :", "+\t\t\t\tcase TerminalTokens.TokenNameshort :", "+\t\t\t\t\tif (iToken > 0) {", "+\t\t\t\t\t\tthrow new InvalidInputException();", "+\t\t\t\t\t}", "+\t\t\t\t\tpushIdentifier(true);", "+\t\t\t\t\tconsumeToken();", "+\t\t\t\t\tbreak nextToken;", "+", "+\t\t\t\tdefault :", "+\t\t\t\t\tif (iToken == 0) {", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "+\t\t\t\t\tif ((iToken % 2) == 0) { // dots must be followed by an identifier", "+\t\t\t\t\t\tthrow new InvalidInputException();", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak nextToken;", "+\t\t\t}", "+\t\t}", "+", "+\t\t// Build type reference from read tokens", "+\t\tTypeReference typeRef = null;", "+\t\tint size = this.identifierLengthStack[this.identifierLengthPtr--]; ", "+\t\tif (size == 1) { // Single Type ref", "+\t\t\ttypeRef =", "+\t\t\t\tnew AnnotationSingleTypeReference(", "+\t\t\t\t\tidentifierStack[this.identifierPtr],", "+\t\t\t\t\tidentifierPositionStack[this.identifierPtr],", "+\t\t\t\t\tthis.tagSourceStart,", "+\t\t\t\t\tthis.tagSourceEnd);", "+\t\t}", "+\t\telse if (size > 1) { // Qualified Type ref", "+\t\t\tchar[][] tokens = new char[size][];", "+\t\t\tSystem.arraycopy(this.identifierStack, this.identifierPtr-size+1, tokens, 0, size);", "+\t\t\tlong[] positions = new long[size];", "+\t\t\tSystem.arraycopy(this.identifierPositionStack, this.identifierPtr-size+1, positions, 0, size);", "+\t\t\ttypeRef = new AnnotationQualifiedTypeReference(tokens, positions, this.tagSourceStart, this.tagSourceEnd);", "+\t\t}", "+\t\tthis.identifierPtr -= size;", "+\t\treturn typeRef;"]}], "num": 16054}
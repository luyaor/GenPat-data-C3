{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e97a9197777844fda458057777fc8c3a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "390fe0790ff483fe1963fb39c6d2f8a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "b04af732a3a47936a23fd763b0f1a266fe2c010f", "commitAfterChange": "675036893efc507eeb48fc7f8ec7970945121ebd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprivate void reconcile(ReconcileContext reconcileContext, \t\t\t   IJavaProject javaProject)", "signatureAfterChange": " \t \tprivate void reconcile(final ReconcileContext reconcileContext, \t\t\t   IJavaProject javaProject)", "diff": ["-\tprivate void reconcile(ReconcileContext reconcileContext,", "+\tprivate void reconcile(final ReconcileContext reconcileContext,", "-\t\tReconcileProcessorEnv processorEnv = CompilationProcessorEnv", "-\t\t\t\t.newReconcileEnv(reconcileContext, javaProject);", "-\t\tdispatchToFileBasedProcessor(processorEnv);", "-\t\tfinal List<? extends CategorizedProblem> problemList = processorEnv", "-\t\t\t\t.getProblems();", "-\t\tfinal int numProblems = problemList.size();", "-\t\tif (numProblems > 0) {", "-\t\t\tfinal CategorizedProblem[] aptCatProblems = new CategorizedProblem[numProblems];", "-\t\t\treconcileContext.putProblems(", "+\t\tEnvCallback callback = new EnvCallback() {", "+\t\t\tpublic void run(AbstractCompilationEnv env) {", "+\t\t\t\t", "+\t\t\t\tdispatchToFileBasedProcessor(env);", "+\t\t\t\tfinal List<? extends CategorizedProblem> problemList = env.getProblems();", "+\t\t\t\tfinal int numProblems = problemList.size();", "+\t\t\t\tif (numProblems > 0) {", "+\t\t\t\t\tfinal CategorizedProblem[] aptCatProblems = new CategorizedProblem[numProblems];", "+\t\t\t\t\treconcileContext.putProblems(", "-\t\t}", "-\t\tprocessorEnv.close();", "+\t\t\t\t}", "+\t\t\t\tenv.close();", "+\t\t\t}", "+\t\t};", "+\t\t", "+\t\t// Construct a reconcile time environment. This will do invoke", "+\t\t// dispatch from inside the callback.", "+\t\tAbstractCompilationEnv.newReconcileEnv(reconcileContext, callback);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3950a53f34fd8a216d4e9b8012fd4081", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tprivate void reconcile(final ReconcileContext reconcileContext, \t\t\t   IJavaProject javaProject)", "signatureAfterChange": " \t \tprivate void reconcile(final ReconcileContext reconcileContext, \t\t\t   IJavaProject javaProject)", "diff": ["-\t\t\t\ttrace(\"runAPT: leaving early because there are no factories\", //$NON-NLS-1$", "+\t\t\t\ttrace(\"apt leaving project \" + javaProject.getProject() +  //$NON-NLS-1$", "+\t\t\t\t\t\t\" early because there are no factories\", //$NON-NLS-1$", "+\t\t\t//TODO: clean up generated working copies here?  I think not necessary. - WSH 10/06", "-", "-\t\tEnvCallback callback = new EnvCallback() {", "-\t\t\tpublic void run(AbstractCompilationEnv env) {", "-\t\t\t\t", "-\t\t\t\tdispatchToFileBasedProcessor(env);", "-\t\t\t\tfinal List<? extends CategorizedProblem> problemList = env.getProblems();", "-\t\t\t\tfinal int numProblems = problemList.size();", "-\t\t\t\tif (numProblems > 0) {", "-\t\t\t\t\tfinal CategorizedProblem[] aptCatProblems = new CategorizedProblem[numProblems];", "-\t\t\t\t\treconcileContext.putProblems(", "-\t\t\t\t\tAptPlugin.APT_COMPILATION_PROBLEM_MARKER, problemList", "-\t\t\t\t\t\t\t.toArray(aptCatProblems));", "-\t\t\t\t}", "-\t\t\t\tenv.close();", "-\t\t\t}", "-\t\t};", "-\t\t// Construct a reconcile time environment. This will do invoke", "+\t\t// Construct a reconcile time environment. This will invoke", "+\t\tGeneratedFileManager gfm = _aptProject.getGeneratedFileManager();", "+\t\tgfm.reconcileStarted();", "+\t\tEnvCallback callback = new ReconcileEnvCallback(reconcileContext, gfm);"]}], "num": 67086}
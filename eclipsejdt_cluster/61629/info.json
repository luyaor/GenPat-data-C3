{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b7da1f21590286080947fced970bc81", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0e92f0dac2e582016feb273873485d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public static char[][] getTypeArguments(char[] parameterizedTypeSignature) throws IllegalArgumentException", "signatureAfterChange": " public static char[][] getTypeArguments(char[] parameterizedTypeSignature) throws IllegalArgumentException", "diff": ["-\tint lastDot = CharOperation.lastIndexOf(C_DOT, parameterizedTypeSignature);", "-\tint start = lastDot == -1", "-\t\t? CharOperation.indexOf(C_GENERIC_START, parameterizedTypeSignature)", "-\t\t: CharOperation.indexOf(C_GENERIC_START, parameterizedTypeSignature, lastDot+1);", "-\tif (start == -1) ", "+\tint length = parameterizedTypeSignature.length;", "+\tif (length < 2 || parameterizedTypeSignature[length-2] != C_GENERIC_END)", "+\t\t// cannot have type arguments otherwise signature would end by \">;\"", "+\tint count = 1; // start to count generic end/start peers", "+\tint start = length - 2;", "+\twhile (start >= 0 && count > 0) {", "+\t\tswitch (parameterizedTypeSignature[--start]) {", "+\t\t\tcase C_GENERIC_START:", "+\t\t\t\tcount--;", "+\t\t\t\tbreak;", "+\t\t\tcase C_GENERIC_END:", "+\t\t\t\tcount++;", "+\t\t\t\tbreak;", "+\t\t}", "+\t}", "+\tif (start < 0) // invalid number of generic start/end", "+\t\tthrow new IllegalArgumentException();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c351c56b7a872f637e7125006ffc64bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "820e796a655cc430ae4ae3cd649830ad2aa11511", "commitAfterChange": "15e62f7752b5ba1cd51b3fafb5a3b0c9d1ba5891", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public static char[][] getThrownExceptionTypes(char[] methodSignature) throws IllegalArgumentException", "signatureAfterChange": " public static char[][] getThrownExceptionTypes(char[] methodSignature) throws IllegalArgumentException", "diff": ["-\tint paren = CharOperation.lastIndexOf(C_PARAM_END, methodSignature);", "-\tif (paren == -1) {", "+\tint exceptionStart = CharOperation.indexOf(C_EXCEPTION_START, methodSignature);", "+\tif (exceptionStart == -1) {", "+\t\tint paren = CharOperation.lastIndexOf(C_PARAM_END, methodSignature);", "+\t\tif (paren == -1) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\t// ignore return type", "+\t\texceptionStart = Util.scanTypeSignature(methodSignature, paren+1) + 1;", "+\t\tint length = methodSignature.length;", "+\t\tif (exceptionStart == length) return CharOperation.NO_CHAR_CHAR;", "-\t// ignore return type", "-\tint exceptionStart = Util.scanTypeSignature(methodSignature, paren+1) + 1;", "-\tif (exceptionStart == length) return CharOperation.NO_CHAR_CHAR;", "-\t", "-\tArrayList exceptionList = new ArrayList(1);", "+\tArrayList exceptionList = new ArrayList(1);", "+\t\tif (methodSignature[i] == C_EXCEPTION_START) {", "+\t\t\texceptionStart++;", "+\t\t\ti++;", "+\t\t} else {", "+\t\t\tthrow new IllegalArgumentException();\t\t\t", "+\t\t}"]}], "num": 61629}
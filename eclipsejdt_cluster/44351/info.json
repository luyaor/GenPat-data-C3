{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd497330d3c2e1ef5e6c96f90280e388", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51b9dcfebd595ac600aaf78d8a2f33e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "3bf35acff17939203d0d5587ed29c8b46be8de16", "commitAfterChange": "23369e8b9173bbdf5db5870d3fe0e4b41d69d610", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public int nullStatus(FlowInfo flowInfo)", "signatureAfterChange": "  public int nullStatus(FlowInfo flowInfo)", "diff": ["+\t// is there a chance of null? -> potentially null", "+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=133125", "+\tswitch (ifTrueNullStatus) {", "+\t\tcase FlowInfo.NULL:", "+\t\tcase FlowInfo.POTENTIALLY_NULL:", "+\t\t\treturn FlowInfo.POTENTIALLY_NULL;", "+\t}", "+\tswitch (ifFalseNullStatus) {", "+\t\tcase FlowInfo.NULL:", "+\t\tcase FlowInfo.POTENTIALLY_NULL:", "+\t\t\treturn FlowInfo.POTENTIALLY_NULL;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd55d0b57e04f1d2fee783ff6da21e9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "900c13d17fd147c187a2b319111ff0c850c4ae89", "commitAfterChange": "f02cc00df615ce0df96d2675e50465c713b4b942", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "  \tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny)", "signatureAfterChange": "  \tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny)", "diff": ["-\tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny){", "-\t\tprintComment(CodeFormatter.K_UNKNOWN);", "+\tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny) {", "+\t\t// Set brace flag, it's useful for the scribe while preserving line breaks", "+\t\tswitch (expectedTokenType) {", "+\t\t\tcase TerminalTokens.TokenNameRBRACE:", "+\t\t\tcase TerminalTokens.TokenNameLBRACE:", "+\t\t\t\tthis.formatBrace = true;", "+\t\t}", "-\t\t\tthis.currentToken = this.scanner.getNextToken();", "-\t\t\tif (expectedTokenType != this.currentToken) {", "-\t\t\t\tthrow new AbortFormatting(\"unexpected token type, expecting:\"+expectedTokenType+\", actual:\"+this.currentToken);//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\tprintComment(CodeFormatter.K_UNKNOWN);", "+\t\t\ttry {", "+\t\t\t\tthis.currentToken = this.scanner.getNextToken();", "+\t\t\t\tif (expectedTokenType != this.currentToken) {", "+\t\t\t\t\tthrow new AbortFormatting(\"unexpected token type, expecting:\"+expectedTokenType+\", actual:\"+this.currentToken);//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t}", "+\t\t\t\tprint(this.scanner.currentPosition - this.scanner.startPosition, considerSpaceIfAny);", "+\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\tthrow new AbortFormatting(e);", "-\t\t\tprint(this.scanner.currentPosition - this.scanner.startPosition, considerSpaceIfAny);", "-\t\t} catch (InvalidInputException e) {", "-\t\t\tthrow new AbortFormatting(e);", "+\t\t}", "+\t\tfinally {", "+\t\t\t// Flush brace flag", "+\t\t\tswitch (expectedTokenType) {", "+\t\t\t\tcase TerminalTokens.TokenNameRBRACE:", "+\t\t\t\tcase TerminalTokens.TokenNameLBRACE:", "+\t\t\t\t\tthis.formatBrace = false;", "+\t\t\t}"]}], "num": 44351}
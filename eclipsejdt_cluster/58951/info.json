{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8908d7a8a8091e2df45893956775c0a4", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b487aa494c04f84a318a58b99cad071", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "027a5942c1f8a8df8288ac0e347e39e4a0c4c335", "commitAfterChange": "16d018b1beaec2325e8b119cf0432c848cb2dd74", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void recordSuppressWarnings(CompilationResult compilationResult, int startSuppresss, int endSuppress, boolean isSuppressingWarnings)", "signatureAfterChange": " \t \tpublic void recordSuppressWarnings(Scope scope, int startSuppresss, int endSuppress, boolean isSuppressingWarnings)", "diff": ["-\tpublic void recordSuppressWarnings(CompilationResult compilationResult, int startSuppresss, int endSuppress, boolean isSuppressingWarnings) {", "+\tpublic void recordSuppressWarnings(Scope scope, int startSuppresss, int endSuppress, boolean isSuppressingWarnings) {", "-\t\t\t\t\t\t\tsuppressWarningIrritants |= CompilerOptions.warningTokenToIrritant(cst.stringValue());", "-\t\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "+\t\t\t\t\t\t\tlong irritant = CompilerOptions.warningTokenToIrritant(cst.stringValue());", "+\t\t\t\t\t\t\tif (irritant != 0) {", "+\t\t\t\t\t\t\t\tsuppressWarningIrritants |= irritant;", "+\t\t\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tscope.problemReporter().unhandledWarningToken(inits[j]);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tsuppressWarningIrritants |= CompilerOptions.warningTokenToIrritant(cst.stringValue());", "-\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "-\t\t\t\t\t}", "+\t\t\t\t\t\tlong irritant = CompilerOptions.warningTokenToIrritant(cst.stringValue());", "+\t\t\t\t\t\tif (irritant != 0) {", "+\t\t\t\t\t\t\tsuppressWarningIrritants |= irritant;", "+\t\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tscope.problemReporter().unhandledWarningToken(value);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}\t", "-\t\t\tcompilationResult.recordSuppressWarnings(suppressWarningIrritants, startSuppresss, endSuppress);", "+\t\t\tscope.referenceCompilationUnit().compilationResult.recordSuppressWarnings(suppressWarningIrritants, startSuppresss, endSuppress);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0db81e53356075b6f97e9b922df0ad9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "2923ed68c1f82d0e305a158b4c5d393b708481eb", "commitAfterChange": "78fb30efd0199bf293193efc0adbb492172aafcc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void recordSuppressWarnings(Scope scope, int startSuppresss, int endSuppress, boolean isSuppressingWarnings)", "signatureAfterChange": "  \tpublic void recordSuppressWarnings(Scope scope, int startSuppresss, int endSuppress, boolean isSuppressingWarnings)", "diff": ["-\t\tlong suppressWarningIrritants = 0;", "+\t\tIrritantSet suppressWarningIrritants = null;", "-\t\t\t\t\t\t\t\tlong irritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());", "-\t\t\t\t\t\t\t\tif (irritants != 0) {", "-\t\t\t\t\t\t\t\t\tif ((suppressWarningIrritants & irritants) == irritants) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().unusedWarningToken(inits[j]);", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tsuppressWarningIrritants |= irritants;", "+\t\t\t\t\t\t\t\tIrritantSet irritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());", "+\t\t\t\t\t\t\t\tif (irritants != null) {", "+\t\t\t\t\t\t\t\t\tif (suppressWarningIrritants == null) {", "+\t\t\t\t\t\t\t\t\t\tsuppressWarningIrritants = new IrritantSet(irritants);", "+\t\t\t\t\t\t\t\t\t} else if (suppressWarningIrritants.set(irritants) == null) {", "+\t\t\t\t\t\t\t\t\t\t\tscope.problemReporter().unusedWarningToken(inits[j]);", "-\t\t\t\t\t\tlong irritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());", "-\t\t\t\t\t\tif (irritants != 0) {", "-\t\t\t\t\t\t\tsuppressWarningIrritants |= irritants;", "+\t\t\t\t\t\tIrritantSet irritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());", "+\t\t\t\t\t\tif (irritants != null) {", "+\t\t\t\t\t\t\tsuppressWarningIrritants = new IrritantSet(irritants);", "+\t\t\t\t\t\t\t// TODO: should check for unused warning token against enclosing annotation as well ?", "-\t\tif (isSuppressingWarnings && suppressWarningIrritants != 0) {", "+\t\tif (isSuppressingWarnings && suppressWarningIrritants != null) {"]}], "num": 58951}
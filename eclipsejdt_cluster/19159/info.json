{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bbb91c4b567182344ab3f40d8bab4e0a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac0fd2b900bc851fd2c60733e32023a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CharacterLiteral.java", "commitBeforeChange": "b8e01a5f88277b60beb56a34c689a6b2ce9e09e8", "commitAfterChange": "9151e30fba5ea02221400c736d4de2dda06ec7ac", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \r \tpublic void setEscapedValue(String value)", "signatureAfterChange": " \r \tpublic void setEscapedValue(String value)", "diff": ["-\t\tif (value == null || value.length() < 3\r", "-\t\t|| !value.startsWith(\"\\'\") || ! value.endsWith(\"\\'\")) {//$NON-NLS-1$//$NON-NLS-2$\r", "+\t\tif (value == null) {\r", "+\t\t\tthrow new IllegalArgumentException();\r", "+\t\t}\r", "+\t\tScanner scanner = new Scanner();\r", "+\t\tchar[] source = value.toCharArray();\r", "+\t\tscanner.setSourceBuffer(source);\r", "+\t\tscanner.resetTo(0, source.length);\r", "+\t\ttry {\r", "+\t\t\tint tokenType = scanner.getNextToken();\r", "+\t\t\tswitch(tokenType) {\r", "+\t\t\t\tcase Scanner.TokenNameCharacterLiteral:\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tdefault:\r", "+\t\t\t\t\tthrow new IllegalArgumentException(\"Not a character literal\");\r", "+\t\t\t}\r", "+\t\t} catch(InvalidInputException e) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9f3ce55949696b3d0ff01c86f349f72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/StringLiteral.java", "commitBeforeChange": "b8e01a5f88277b60beb56a34c689a6b2ce9e09e8", "commitAfterChange": "9151e30fba5ea02221400c736d4de2dda06ec7ac", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \r \tpublic void setEscapedValue(String token)", "signatureAfterChange": " \r \tpublic void setEscapedValue(String token)", "diff": ["-\t\tif (token == null || token.length() < 2\r", "-\t\t|| !token.startsWith(\"\\\"\") || ! token.endsWith(\"\\\"\")) {//$NON-NLS-1$//$NON-NLS-2$\r", "+\t\tif (token == null) {\r", "+\t\t\tthrow new IllegalArgumentException(\"Not a string literal\");\r", "+\t\t}\r", "+\t\tScanner scanner = new Scanner();\r", "+\t\tchar[] source = token.toCharArray();\r", "+\t\tscanner.setSourceBuffer(source);\r", "+\t\tscanner.resetTo(0, source.length);\r", "+\t\ttry {\r", "+\t\t\tint tokenType = scanner.getNextToken();\r", "+\t\t\tswitch(tokenType) {\r", "+\t\t\t\tcase Scanner.TokenNameStringLiteral:\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tdefault:\r", "+\t\t\t\t\tthrow new IllegalArgumentException(\"Not a string literal\");\r", "+\t\t\t}\r", "+\t\t} catch(InvalidInputException e) {\r"]}], "num": 19159}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c365e65682f547d36b412cef25a71b1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c18e9a099982bb1852677efb54410b8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "12bbec9151d1b613c62f44289e9e604128f21de0", "commitAfterChange": "cfad6931331ca38f2461ad24853dd9b6dfa652de", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic boolean equals(Object object)", "signatureAfterChange": " \tpublic boolean equals(Object object)", "diff": ["-\t\tif (object instanceof IClasspathEntry) {", "-\t\t\tIClasspathEntry otherEntry = (IClasspathEntry) object;", "+\t\tif (object instanceof ClasspathEntry) {", "+\t\t\tClasspathEntry otherEntry = (ClasspathEntry) object;", "-\t\t\tif (!equalPatterns(this.accessibleFiles, otherEntry.getAccessibleFiles()))", "+\t\t\tAccessRuleSet otherRuleSet = otherEntry.getAccessRuleSet();", "+\t\t\tif (getAccessRuleSet() != null) {", "+\t\t\t\tif (!getAccessRuleSet().equals(otherRuleSet))", "+\t\t\t\t\treturn false;", "+\t\t\t} else if (otherRuleSet != null)", "-\t\t\tif (!equalPatterns(this.nonAccessibleFiles, otherEntry.getNonAccessibleFiles()))", "-\t\t\t\treturn false;", "-\t\t\tif (this.combineAccessRestrictions != otherEntry.combineAccessRestrictions())", "+\t\t\tif (this.combineAccessRules != otherEntry.combineAccessRules())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f39c53a1f616a7eeb31a1730b552be88", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "12bbec9151d1b613c62f44289e9e604128f21de0", "commitAfterChange": "cfad6931331ca38f2461ad24853dd9b6dfa652de", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void elementEncode(XMLWriter writer, IPath projectPath, boolean indent, boolean newLine)", "signatureAfterChange": " \tpublic void elementEncode(XMLWriter writer, IPath projectPath, boolean indent, boolean newLine)", "diff": ["-\t\tencodePatterns(this.accessibleFiles, TAG_ACCESSIBLE, parameters);", "-\t\tencodePatterns(this.nonAccessibleFiles, TAG_NONACCESSIBLE, parameters);", "-\t\tif (this.entryKind == CPE_PROJECT && !this.combineAccessRestrictions)", "-\t\t\tparameters.put(TAG_COMBINE_ACCESS_RESTRICTIONS, \"false\"); //$NON-NLS-1$", "+\t\tif (this.entryKind == CPE_PROJECT && !this.combineAccessRules)", "+\t\t\tparameters.put(TAG_COMBINE_ACCESS_RULES, \"false\"); //$NON-NLS-1$", "-\t\twriter.printTag(TAG_CLASSPATHENTRY, parameters, indent, newLine, !hasExtraAttributes /*close tag if no extra attributes*/);", "+\t\tboolean hasRestrictions = getAccessRuleSet() != null;", "+\t\twriter.printTag(TAG_CLASSPATHENTRY, parameters, indent, newLine, !hasExtraAttributes && !hasRestrictions /*close tag if no extra attributes and no restriction*/);", "-\t\tif (hasExtraAttributes) {", "+\t\tif (hasExtraAttributes)", "+\t", "+\t\tif (hasRestrictions)", "+\t\t\tencodeAccessRules(writer, indent, newLine);", "+", "+\t\tif (hasExtraAttributes || hasRestrictions)", "-\t\t\t", "-\t\t}"]}], "num": 11640}
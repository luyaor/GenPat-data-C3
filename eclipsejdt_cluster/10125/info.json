{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "93562352b007848258526faeb41fe664", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b564faa6c6252fa831fd4d6695b0e0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " \t \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\tFlowInfo result;", "-\t\t\t\t\treturn right.analyseCode(currentScope, flowContext, flowInfo);", "+\t\t\t\t\tresult = right.analyseCode(currentScope, flowContext, flowInfo);", "-\t\t\t\t\treturn right.analyseCode(currentScope, flowContext, flowInfo).asNegatedCondition();", "+\t\t\t\t\tresult = right.analyseCode(currentScope, flowContext, flowInfo).asNegatedCondition();", "-\t\t\t}", "-\t\t\tif ((right.constant != Constant.NotAConstant) && (right.constant.typeID() == T_boolean)) {", "+\t\t\t} ", "+\t\t\telse if ((right.constant != Constant.NotAConstant) && (right.constant.typeID() == T_boolean)) {", "-\t\t\t\t\t//  this is equivalent to the right argument inits ", "-\t\t\t\t\treturn left.analyseCode(currentScope, flowContext, flowInfo);", "+\t\t\t\t\t//  this is equivalent to the left argument inits ", "+\t\t\t\t\tresult = left.analyseCode(currentScope, flowContext, flowInfo);", "-\t\t\t\t\treturn left.analyseCode(currentScope, flowContext, flowInfo).asNegatedCondition();", "+\t\t\t\t\tresult = left.analyseCode(currentScope, flowContext, flowInfo).asNegatedCondition();", "+\t\t\t} ", "+\t\t\telse {", "+\t\t\t\tresult = right.analyseCode(", "+\t\t\t\t\tcurrentScope, flowContext, ", "+\t\t\t\t\tleft.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits()).unconditionalInits();", "-\t\t\treturn right.analyseCode(", "-\t\t\t\tcurrentScope, flowContext, ", "-\t\t\t\tleft.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits()).unconditionalInits();", "-\t\t\t\t\treturn right.analyseCode(currentScope, flowContext, flowInfo);", "+\t\t\t\t\tresult = right.analyseCode(currentScope, flowContext, flowInfo);", "-\t\t\t\t\treturn right.analyseCode(currentScope, flowContext, flowInfo).asNegatedCondition();", "+\t\t\t\t\tresult = right.analyseCode(currentScope, flowContext, flowInfo).asNegatedCondition();", "-\t\t\tif ((right.constant != Constant.NotAConstant) && (right.constant.typeID() == T_boolean)) {", "+\t\t\telse if ((right.constant != Constant.NotAConstant) && (right.constant.typeID() == T_boolean)) {", "-\t\t\t\t\treturn left.analyseCode(currentScope, flowContext, flowInfo);", "+\t\t\t\t\tresult = left.analyseCode(currentScope, flowContext, flowInfo);", "-\t\t\t\t\treturn left.analyseCode(currentScope, flowContext, flowInfo).asNegatedCondition();", "+\t\t\t\t\tresult = left.analyseCode(currentScope, flowContext, flowInfo).asNegatedCondition();", "+\t\t\t} ", "+\t\t\telse {", "+\t\t\t\tresult = right.analyseCode(", "+\t\t\t\t\tcurrentScope, flowContext, ", "+\t\t\t\t\tleft.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits()).", "+\t\t\t\t\t/* unneeded since we flatten it: asNegatedCondition(). */", "+\t\t\t\t\tunconditionalInits();", "-\t\t\treturn right.analyseCode(", "-\t\t\t\tcurrentScope, flowContext, ", "-\t\t\t\tleft.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits()).asNegatedCondition().unconditionalInits();", "+\t\tif (result instanceof UnconditionalFlowInfo && ", "+\t\t\t\t(result.tagBits & FlowInfo.UNREACHABLE) == 0) { // the flow info is flat", "+\t\t\tresult = FlowInfo.conditional(result, result.copy());", "+\t\t}", "+\t  checkNullComparison(currentScope, flowContext, result, result.initsWhenTrue(), result.initsWhenFalse());", "+\t  return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1f71c0b2cb0ad57e3cdf98ca91ce420", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "27cb685729108897cfc0c97dcf65ad20a5140572", "commitAfterChange": "65936b8e636fbd883761d22121fcd803835f1ea5", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tsynchronized ITypeBinding resolveWellKnownType(String name)", "signatureAfterChange": " \tsynchronized ITypeBinding resolveWellKnownType(String name)", "diff": ["+\t\tITypeBinding typeBinding = null;", "-\t\t\t\treturn this.getTypeBinding(Scope.getBaseType(name.toCharArray()));", "+\t\t\t\ttypeBinding = this.getTypeBinding(Scope.getBaseType(name.toCharArray()));", "-\t\t\t\treturn this.getTypeBinding(this.scope.getJavaLangObject());", "+\t\t\t\ttypeBinding = this.getTypeBinding(this.scope.getJavaLangObject());", "-\t\t\t\treturn this.getTypeBinding(this.scope.getJavaLangString());", "+\t\t\t\ttypeBinding = this.getTypeBinding(this.scope.getJavaLangString());", "-\t\t\t\treturn this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_STRINGBUFFER, 3));", "+\t\t\t\ttypeBinding = this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_STRINGBUFFER, 3));", "-\t\t\t\treturn this.getTypeBinding(this.scope.getJavaLangThrowable());", "+\t\t\t\ttypeBinding = this.getTypeBinding(this.scope.getJavaLangThrowable());", "-\t\t\t\treturn this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_EXCEPTION, 3));", "+\t\t\t\ttypeBinding = this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_EXCEPTION, 3));", "-\t\t\t\treturn this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_RUNTIMEEXCEPTION, 3));", "+\t\t\t\ttypeBinding = this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_RUNTIMEEXCEPTION, 3));", "-\t\t\t\treturn this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_ERROR, 3));", "+\t\t\t\ttypeBinding = this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_ERROR, 3));", "-\t\t\t\treturn this.getTypeBinding(this.scope.getJavaLangClass());", "+\t\t\t\ttypeBinding = this.getTypeBinding(this.scope.getJavaLangClass());", "-\t\t\t\treturn this.getTypeBinding(this.scope.getJavaLangCloneable());", "+\t\t\t\ttypeBinding = this.getTypeBinding(this.scope.getJavaLangCloneable());", "-\t\t\t\treturn this.getTypeBinding(this.scope.getJavaIoSerializable());", "+\t\t\t\ttypeBinding = this.getTypeBinding(this.scope.getJavaIoSerializable());", "-\t\t\t\treturn this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_BOOLEAN, 3));", "+\t\t\t\ttypeBinding = this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_BOOLEAN, 3));", "-\t\t\t\treturn this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_BYTE, 3));", "+\t\t\t\ttypeBinding = this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_BYTE, 3));", "-\t\t\t\treturn this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_CHARACTER, 3));", "+\t\t\t\ttypeBinding = this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_CHARACTER, 3));", "-\t\t\t\treturn this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_DOUBLE, 3));", "+\t\t\t\ttypeBinding = this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_DOUBLE, 3));", "-\t\t\t\treturn this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_FLOAT, 3));", "+\t\t\t\ttypeBinding = this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_FLOAT, 3));", "-\t\t\t\treturn this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_INTEGER, 3));", "+\t\t\t\ttypeBinding = this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_INTEGER, 3));", "-\t\t\t\treturn this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_LONG, 3));", "+\t\t\t\ttypeBinding = this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_LONG, 3));", "-\t\t\t\treturn this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_SHORT, 3));", "+\t\t\t\ttypeBinding = this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_SHORT, 3));", "-\t\t\t\treturn this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_VOID, 3));", "+\t\t\t\ttypeBinding = this.getTypeBinding(this.scope.getType(TypeConstants.JAVA_LANG_VOID, 3));", "+\t\tif (typeBinding != null && !typeBinding.isRecovered()) {", "+\t\t\treturn typeBinding;", "+\t\t}"]}], "num": 10125}
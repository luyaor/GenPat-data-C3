{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17bc3c0f9b444248d55bee96918e318c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16f662265835146dc3bd5d276a4fb201", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "7c40765982baa5c3ff8f0873ac85435c3d742d58", "commitAfterChange": "be1ab5866130739e4d5dea6be597450bab4d9fe1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprivate void computeAllRootPaths(IPackageFragmentRoot root)", "signatureAfterChange": " \t \tprivate synchronized void computeAllRootPaths(IType type)", "diff": ["-\tprivate void computeAllRootPaths(IPackageFragmentRoot root) {", "+\tprivate synchronized void computeAllRootPaths(IType type) {", "+\t\tif (this.areRootPathsComputed) {", "+\t\t\treturn;", "+\t\t}", "+\t\tIPackageFragmentRoot root = (IPackageFragmentRoot) type.getPackageFragment().getParent();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bab59b991565f1b8794a7dcb993870e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "09f42f58bcdf2fa84ccd2b8b65f28ab3036222ca", "commitAfterChange": "57e8dd41219d846363c918d62edb5007994c5c79", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(possible, argumentTypes, invocationSite);", "+\t\t\t\t\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(possible, argumentTypes, invocationSite, APPLICABILITY);", "-\t\t\t\t\tMethodBinding[] temp = new MethodBinding[visible.size];", "-\t\t\t\t\tvisible.copyInto(temp);", "-\t\t\t\t\tfoundMethod = mostSpecificMethodBinding(temp, temp.length, argumentTypes, invocationSite, null);", "+\t\t\t\t\tif (visible.size == 1) {", "+\t\t\t\t\t\tfoundMethod = (MethodBinding) visible.elementAt(0);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tMethodBinding[] temp = new MethodBinding[visible.size];", "+\t\t\t\t\t\tvisible.copyInto(temp);", "+\t\t\t\t\t\tfoundMethod = mostSpecificMethodBinding(temp, temp.length, argumentTypes, invocationSite, null);", "+\t\t\t\t\t}"]}], "num": 41032}
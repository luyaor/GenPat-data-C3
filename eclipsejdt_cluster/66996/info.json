{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32d33c9e4af7b81d78af42d57946fb01", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "373697b6481c13868efc20a480efece4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "875cc8d42787c90738d8dc077a25eb401e9e38f9", "commitAfterChange": "adfd584faf146517cb3e86f9f2b585f2851a3630", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " boolean areTypesEquivalent(TypeBinding one, TypeBinding two)", "signatureAfterChange": " boolean areMethodsEqual(MethodBinding one, MethodBinding substituteTwo)", "diff": ["-}", "-boolean areTypesEquivalent(TypeBinding one, TypeBinding two) {", "-\tif (one == two) return true;", "-\tif (!super.areTypesEqual(one.erasure(), two.erasure())) return false;", "+boolean areMethodsEqual(MethodBinding one, MethodBinding substituteTwo) {", "+\tTypeBinding[] oneParams = one.parameters;", "+\tTypeBinding[] twoParams = substituteTwo.parameters;", "+\tboolean checkParameters = false;", "+\tif (oneParams != twoParams) {", "+\t\tint length = oneParams.length;", "+\t\tif (length != twoParams.length) return false; // no match", "-\tif (one.isTypeVariable() && two.isTypeVariable()) {", "-\t\tTypeVariableBinding temp1 = (TypeVariableBinding) one;", "-\t\tTypeVariableBinding temp2 = (TypeVariableBinding) two;", "-\t\tif (temp1.rank != temp2.rank) return false;", "-\t\tif (!areTypesEquivalent(temp1.superclass, temp2.superclass)) return false;", "-\t\tReferenceBinding[] superInterfaces1 = temp1.superInterfaces;", "-\t\tReferenceBinding[] superInterfaces2 = temp2.superInterfaces;", "-\t\tif (superInterfaces1 != superInterfaces2) {", "-\t\t\tif (superInterfaces1 == null || superInterfaces2 == null) return false;", "-\t\t\tif (superInterfaces1.length != superInterfaces2.length) return false;", "-\t\t\tfor (int i = 0, l = superInterfaces1.length; i < l; i++)", "-\t\t\t\tif (!areTypesEquivalent(superInterfaces1[i], superInterfaces2[i])) return false;", "-\t\t}", "-\t}   ", "-\treturn true;", "-}", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tif (oneParams[i] != twoParams[i]) {", "+\t\t\t\tcheckParameters |= oneParams[i].leafComponentType().isParameterizedType();", "+\t\t\t\tif (!areTypesEqual(oneParams[i], twoParams[i])) {", "+\t\t\t\t\twhile (!checkParameters && ++i < length)", "+\t\t\t\t\t\tcheckParameters |= oneParams[i].leafComponentType().isParameterizedType();", "+\t\t\t\t\tif (checkParameters && one.areParameterErasuresEqual(substituteTwo)) // at least one parameter may cause a name clash", "+\t\t\t\t\t\tdetectNameClash(one, substituteTwo, true);", "+\t\t\t\t\treturn false; // no match but needed to check for a name clash", "+\treturn !detectNameClash(one, substituteTwo, checkParameters);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a08fc8404ff0d92882425b0c462c9736", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "f96cd0ecae0cba5d7e7fa39b67cc4c6c7e6eaa8e", "commitAfterChange": "67a18e4f65a6a995842d9a3b7571c2508b82d670", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  private MethodBinding findMethod(char[] methodDescriptor, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding findMethod(char[] methodDescriptor, char[][][] missingTypeNames)", "diff": ["+\tint paramStart = index;", "-", "-\tint startIndex = 0;", "-\t\tindex = 1;", "-\t\tint end = 0;   // first character is always '(' so skip it", "+\t\tindex = paramStart + 1;", "+\t\tint end = paramStart; // first character is always '(' so skip it", "-\t\t\tif (i >= startIndex) {   // skip the synthetic arg if necessary", "-\t\t\t\tparameters[i - startIndex] = this.environment.getTypeFromSignature(methodDescriptor, index, end, false, this, missingTypeNames);", "+\t\t\tTypeBinding param = this.environment.getTypeFromSignature(methodDescriptor, index, end, false, this, missingTypeNames);", "+\t\t\tif (param instanceof UnresolvedReferenceBinding) {", "+\t\t\t\tparam = resolveType(param, this.environment, true /* raw conversion */);", "+\t\t\tparameters[i] = param;", "-\treturn CharOperation.equals(selector, TypeConstants.INIT)", "-\t\t? this.enclosingType.getExactConstructor(parameters)", "-\t\t: this.enclosingType.getExactMethod(selector, parameters, null);", "+\tint parameterLength = parameters.length;", "+\tMethodBinding[] methods2 = this.enclosingType.getMethods(selector, parameterLength);", "+\t// find matching method using parameters", "+\tloop: for (int i = 0, max = methods2.length; i < max; i++) {", "+\t\tMethodBinding currentMethod = methods2[i];", "+\t\tTypeBinding[] parameters2 = currentMethod.parameters;", "+\t\tint currentMethodParameterLength = parameters2.length;", "+\t\tif (parameterLength == currentMethodParameterLength) {", "+\t\t\tfor (int j = 0; j < currentMethodParameterLength; j++) {", "+\t\t\t\tif (parameters[j] != parameters2[j] && parameters[j].erasure() != parameters2[j].erasure()) {", "+\t\t\t\t\tcontinue loop;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn currentMethod;", "+\t\t}", "+\t}", "+\treturn null;"]}], "num": 66996}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "edb5d7729671d8895a60f4da5bfeaeb0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c0cad18e879335c4fe4b0d6721952e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "8d86c45b7dbc1d8316194b358e7234e4491fa695", "commitAfterChange": "0305482ace5c5443f44c914a225574b12096815b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "diff": ["-\t            for (int i = 0, length = this.arguments.length; i < length; i++) {", "+\t            for (int i = 0, length = parameterizedType.arguments.length; i < length; i++) {", "+\t        } else if (equivalent.isParameterizedType() && otherEquivalent.isRawType()) {", "+\t        \tsubstitutes.clear(); // clear all variables to indicate raw generic method in the end"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a831473b2be3140f223750b7131b7a77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/SourceIndexer.java", "commitBeforeChange": "f940793ad6a8d5d0b9d6787ffa3657f56433791f", "commitAfterChange": "62f4198121495ae184573e68231f47c9011b5815", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate void purgeMethodStatements(TypeDeclaration type)", "signatureAfterChange": "  \tprivate void purgeMethodStatements(TypeDeclaration type)", "diff": ["-\t\tfor (int j = 0, length = methods.length; j < length; j++) {", "+\t\tfor (int j = 0, length = methods == null ? 0 : methods.length; j < length; j++) {", "-\t\t\tif ((method.bits & ASTNode.HasFunctionalInterfaceTypes) == 0) {", "+\t\t\tif (method != null && (method.bits & ASTNode.HasFunctionalInterfaceTypes) == 0) {"]}], "num": 67322}
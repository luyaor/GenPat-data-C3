{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c389fef9a29843c26cc53041817edd5e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "851f2ec7ec7a5aa6de626601af83f51b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "0ac384309d9e7a05eca3c3a40adf81679fddc64b", "commitAfterChange": "18c4df4230cb68ef623d8983c23bc0f9428a5b47", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic void rebindInnerPolies(BoundSet bounds, TypeBinding[] argumentTypes)", "signatureAfterChange": " \tpublic void rebindInnerPolies(BoundSet bounds, TypeBinding[] argumentTypes)", "diff": ["-\t\t\t\tTypeBinding varArgsType = inferenceKind == CHECK_VARARG ? ((ArrayBinding)innerParameters[innerParameters.length-1]).elementsType() : null; ", "+\t\t\t\tboolean isVarargs = (inferenceKind == CHECK_VARARG) && innerBinding.isVarargs();", "+\t\t\t\tTypeBinding varArgsType = isVarargs ? ((ArrayBinding)innerParameters[innerParameters.length-1]).elementsType() : null; "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "896d99738378015dfaee5f338c0234db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "225ea5653541f8a56d524334d3e9e6bb7fa18aa6", "commitAfterChange": "e67d1dc6830648c83fdb0e0b83b59925424638d8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\t\t\tboolean analyseResources = currentScope.compilerOptions().analyseResourceLeaks;", "-\t\t\t\t\t// if argument is an AutoCloseable insert info that it *may* be closed (by the target constructor, i.e.)", "-\t\t\t\t\tflowInfo = FakedTrackingVariable.markPassedToOutside(currentScope, this.arguments[i], flowInfo, false);", "+\t\t\t\t\tif (analyseResources) {", "+\t\t\t\t\t\t// if argument is an AutoCloseable insert info that it *may* be closed (by the target constructor, i.e.)", "+\t\t\t\t\t\tflowInfo = FakedTrackingVariable.markPassedToOutside(currentScope, this.arguments[i], flowInfo, false);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9372e9f9a7c030fdb7f3f66219270531", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "33eef2073f376aa3fd5d07ca099391b28b7ce6dc", "commitAfterChange": "74418c8468270552cc550f0a4d106149287e4ed4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void resolve(MethodScope methScope)", "signatureAfterChange": " \tpublic void resolve(MethodScope methScope)", "diff": ["-\t\tresolveParamTags(methScope, reportMissing);", "+\t\tboolean considerParamRefAsUsage = methScope.compilerOptions().reportUnusedParameterIncludeDocCommentReference;", "+\t\tresolveParamTags(methScope, reportMissing, considerParamRefAsUsage);", "-\t\t\tthis.invalidParameters[i].resolve(methScope, false);", "+\t\t\tthis.invalidParameters[i].resolve(methScope, false, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99881a765114d4b69ebb0de868e99c44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "3d1407281a9de06ef3da16640a6462b66a69a15f", "commitAfterChange": "d60153f38977c8d3c207bd95c4a9121cd05934cc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public ExceptionHandlingFlowContext( \t\tFlowContext parent, \t\tASTNode associatedNode, \t\tReferenceBinding[] handledExceptions, \t\tBlockScope scope, \t\tUnconditionalFlowInfo flowInfo)", "signatureAfterChange": " \t public ExceptionHandlingFlowContext( \t\tFlowContext parent, \t\tASTNode associatedNode, \t\tReferenceBinding[] handledExceptions, \t\tBlockScope scope, \t\tUnconditionalFlowInfo flowInfo)", "diff": ["+\tboolean reachUnchecked = !scope.compilerOptions().", "+\t\treportUnusedDeclaredThrownExceptionIncludeUncheckedExceptions;", "-\t\t\tthis.isReached[cacheIndex] |= bitMask;", "+\t\t\tif (reachUnchecked) {", "+\t\t\t\tthis.isReached[cacheIndex] |= bitMask;", "+\t\t\t}"]}], "num": 33635}
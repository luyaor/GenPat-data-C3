{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "119c5ffe14158fbd3f6f1e4f085cde25", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51261bee169e15aa6eb732ad2a845a25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "be3b8398abdd134469cb25f74becb573498bac14", "commitAfterChange": "5c654dd7dd9bc98526f6c419699195d84517b84b", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public boolean matchesName(char[] pattern, char[] name)", "signatureAfterChange": " public boolean matchesName(char[] pattern, char[] name)", "diff": ["-\t\t\t\tif (!isCamelCase && sameLength && matchFirstChar) {", "-\t\t\t\t\treturn CharOperation.equals(pattern, name, isCaseSensitive);", "+\t\t\t\tif (!isCamelCase) {", "+\t\t\t\t\tif (sameLength && matchFirstChar) {", "+\t\t\t\t\t\treturn CharOperation.equals(pattern, name, isCaseSensitive);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "-\t\t\t\tbreak;", "-", "+\t\t\t\t// fall through next case to match as prefix if camel case failed"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d53e1848983ff4aba1686c1a7d1898d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "be3b8398abdd134469cb25f74becb573498bac14", "commitAfterChange": "5c654dd7dd9bc98526f6c419699195d84517b84b", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " protected int matchNameValue(char[] pattern, char[] name)", "signatureAfterChange": " protected int matchNameValue(char[] pattern, char[] name)", "diff": ["-\t\t\tif (!this.isCamelCase && sameLength && matchFirstChar && CharOperation.equals(pattern, name, this.isCaseSensitive)) {", "-\t\t\t\treturn POSSIBLE_FULL_MATCH;", "+\t\t\tif (!this.isCamelCase) {", "+\t\t\t\tif (sameLength && matchFirstChar && CharOperation.equals(pattern, name, this.isCaseSensitive)) {", "+\t\t\t\t\treturn POSSIBLE_FULL_MATCH;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "-\t\t\tbreak;", "+\t\t\t// fall through next case to match as prefix if camel case failed"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9104ffc3c6cf5bec124bff10f206ca1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "be3b8398abdd134469cb25f74becb573498bac14", "commitAfterChange": "5c654dd7dd9bc98526f6c419699195d84517b84b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tboolean match(char patternTypeSuffix, char[] patternPkg, char[] patternTypeName, int matchRule, int typeKind, char[] pkg, char[] typeName)", "signatureAfterChange": "  \tboolean match(char patternTypeSuffix, char[] patternPkg, char[] patternTypeName, int matchRule, int typeKind, char[] pkg, char[] typeName)", "diff": ["-\t\t\t\t\tif (isCamelCase) return false;", "-\t\t\t\t\treturn matchFirstChar && CharOperation.equals(patternTypeName, typeName, isCaseSensitive);", "+\t\t\t\t\tif (!isCamelCase) {", "+\t\t\t\t\t\treturn matchFirstChar && CharOperation.equals(patternTypeName, typeName, isCaseSensitive);", "+\t\t\t\t\t}", "+\t\t\t\t\t// fall through next case to match as prefix if camel case failed"]}], "num": 31564}
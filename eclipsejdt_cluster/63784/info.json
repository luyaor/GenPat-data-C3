{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "168d60b81c9cb187a695b63f0bfe8438", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70e09b2b8ff65b7a4bf10af25827d883", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "8cf1dcdf2235b54b4116fb6f086a0d218e6b26f7", "commitAfterChange": "45fa88428d5d04389be0956547a1793c4e66bac3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "  public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\treceiver.generateCode(currentScope, codeStream, false);", "+\t\tthis.receiver.generateCode(currentScope, codeStream, false);", "-\t} else if ((bits & DepthMASK) != 0 && receiver.isImplicitThis()) { // outer access ?", "+\t} else if ((this.bits & ASTNode.DepthMASK) != 0 && this.receiver.isImplicitThis()) { // outer access ?", "-\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);\t\t", "+\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((this.bits & ASTNode.DepthMASK) >> ASTNode.DepthSHIFT);\t\t", "-\t\treceiver.generateCode(currentScope, codeStream, true);", "+\t\tthis.receiver.generateCode(currentScope, codeStream, true);", "-\tgenerateArguments(binding, arguments, currentScope, codeStream);", "+\tgenerateArguments(this.binding, this.arguments, currentScope, codeStream);", "-\tif (syntheticAccessor == null){", "+\tif (this.syntheticAccessor == null){", "-\t\t\tif( (receiver.isSuper()) || this.codegenBinding.isPrivate()){", "+\t\t\tif( (this.receiver.isSuper()) || this.codegenBinding.isPrivate()){", "-\t\tcodeStream.invokestatic(syntheticAccessor);", "+\t\tcodeStream.invokestatic(this.syntheticAccessor);", "-\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\tboolean isUnboxing = (implicitConversion & TypeIds.UNBOXING) != 0;", "+\t\tboolean isUnboxing = (this.implicitConversion & TypeIds.UNBOXING) != 0;", "-\t\tif (isUnboxing) codeStream.generateImplicitConversion(implicitConversion);", "+\t\tif (isUnboxing) codeStream.generateImplicitConversion(this.implicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc06830462b70c1f2068adc04dcd6556", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "5dba2fb9ff4a65e2ec3c984b606cb269bb911a06", "commitAfterChange": "de6638c19ddd648da6cdf9ca6437e426c1cc8e15", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\tif (constant != Constant.NotAConstant) {", "+\tif (this.constant != Constant.NotAConstant) {", "-\t\t\tcodeStream.generateConstant(constant, implicitConversion);", "+\t\t\tcodeStream.generateConstant(this.constant, this.implicitConversion);", "-\t\t\treceiver.generateCode(currentScope, codeStream, !isStatic);", "+\t\t\tthis.receiver.generateCode(currentScope, codeStream, !isStatic);", "-\t\t\tcodeStream.generateConstant(fieldConstant, implicitConversion);", "+\t\t\tcodeStream.generateConstant(fieldConstant, this.implicitConversion);", "-\t\t\t|| ((implicitConversion & TypeIds.UNBOXING) != 0)", "+\t\t\t|| ((this.implicitConversion & TypeIds.UNBOXING) != 0)", "-\t\treceiver.generateCode(currentScope, codeStream, !isStatic);", "+\t\tthis.receiver.generateCode(currentScope, codeStream, !isStatic);", "-\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\tif (syntheticAccessors == null || syntheticAccessors[READ] == null) {", "+\t\t\tif (this.syntheticAccessors == null || this.syntheticAccessors[FieldReference.READ] == null) {", "-\t\t\t\tcodeStream.invokestatic(syntheticAccessors[READ]);", "+\t\t\t\tcodeStream.invokestatic(this.syntheticAccessors[FieldReference.READ]);", "-\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\t\tboolean isUnboxing = (implicitConversion & TypeIds.UNBOXING) != 0;", "+\t\t\t\tboolean isUnboxing = (this.implicitConversion & TypeIds.UNBOXING) != 0;", "-\t\t\t\tif (isUnboxing) codeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\tif (isUnboxing) codeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\t\t\tMethodBinding accessor = syntheticAccessors == null ? null : syntheticAccessors[READ]; ", "+\t\t\t\t\tMethodBinding accessor = this.syntheticAccessors == null ? null : this.syntheticAccessors[FieldReference.READ]; ", "-\t\t\treceiver.generateCode(currentScope, codeStream, !isStatic);\t\t\t\t", "+\t\t\tthis.receiver.generateCode(currentScope, codeStream, !isStatic);\t\t\t\t"]}], "num": 63784}
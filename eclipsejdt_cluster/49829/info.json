{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c42422a344f0142fe5e27b345707171", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50a4f3192e34fd954d2e14677ca0fee4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "3585d9ff750517d96f094a12a4fb99e502636c59", "commitAfterChange": "59449ee231c1cab95a8f7ec24b57c991cddf580d", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tprivate char[][] findMethodParameterNames(MethodBinding method, char[][] parameterTypeNames)", "signatureAfterChange": " \tprivate char[][] findMethodParameterNames(MethodBinding method, char[][] parameterTypeNames)", "diff": ["-\t\t\t\tISourceMethod[] sourceMethods = sourceType.getMethods();", "+\t\t\t\tSourceMethod[] sourceMethods = ((SourceTypeElementInfo) sourceType).getMethodHandles();", "-\t\t\t\t\tISourceMethod sourceMethod = sourceMethods[i];", "-\t\t\t\t\tchar[][] argTypeNames = sourceMethod.getArgumentTypeNames();", "+\t\t\t\t\tSourceMethod sourceMethod = sourceMethods[i];", "+\t\t\t\t\tString[] argTypeSignatures = sourceMethod.getParameterTypes();", "-\t\t\t\t\tif(argTypeNames != null &&", "-\t\t\t\t\t\tCharOperation.equals(method.selector,sourceMethod.getSelector()) &&", "-\t\t\t\t\t\tCharOperation.equals(argTypeNames,parameterTypeNames)){", "-\t\t\t\t\t\tparameterNames = sourceMethod.getArgumentNames();", "-\t\t\t\t\t\tbreak;", "+\t\t\t\t\tif(argTypeSignatures != null &&", "+\t\t\t\t\t\tCharOperation.equals(method.selector,sourceMethod.getElementName().toCharArray()) &&", "+\t\t\t\t\t\tequalSignatures(parameterTypeNames, argTypeSignatures)){", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tparameterNames = ((SourceMethodElementInfo) sourceMethod.getElementInfo()).getArgumentNames();", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t// method doesn't exist: ignore", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0b38b27dd367a0adfc13dc040678cef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \t \tpublic EnumConstantDeclaration convert(EnumConstant enumConstant)", "signatureAfterChange": " \tpublic EnumConstantDeclaration convert(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration enumConstant)", "diff": ["-\tpublic EnumConstantDeclaration convert(EnumConstant enumConstant) {", "+\t// field is an enum constant", "+\tpublic EnumConstantDeclaration convert(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration enumConstant) {", "-\t\tint declarationSourceEnd = enumConstant.bodyEnd;", "-\t\tif ((enumConstant.modifiers & CompilerModifiers.AccSemicolonBody) == 0) {", "-\t\t\tint closingPosition = retrieveRightBrace(declarationSourceEnd, enumConstant.declarationSourceEnd);", "-\t\t\tenumConstantDeclaration.setSourceRange(declarationSourceStart, closingPosition - declarationSourceStart + 1);", "+\t\tint declarationSourceEnd = enumConstant.declarationSourceEnd;", "+\t\tif (enumConstant.initialization instanceof QualifiedAllocationExpression) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration anonymousType = ((QualifiedAllocationExpression) enumConstant.initialization).anonymousType;", "+\t\t\tif (anonymousType != null) {", "+\t\t\t\tint closingPosition = anonymousType.declarationSourceEnd;", "+\t\t\t\tenumConstantDeclaration.setSourceRange(declarationSourceStart, closingPosition - declarationSourceStart + 1);", "+\t\t\t\tbuildBodyDeclarations(anonymousType, enumConstantDeclaration);", "+\t\t\t}", "-\t\tbuildBodyDeclarations(enumConstant, enumConstantDeclaration);", "-\t\tfinal org.eclipse.jdt.internal.compiler.ast.Expression[] arguments = enumConstant.arguments;", "+\t\tfinal org.eclipse.jdt.internal.compiler.ast.Expression[] arguments = ((org.eclipse.jdt.internal.compiler.ast.AllocationExpression) enumConstant.initialization).arguments;", "-\t}"]}], "num": 49829}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7031cb208204f5c9d327f19c5dfef9ad", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0714def1813c9db83a0aa0270415a721", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "commitAfterChange": "af607e2e1ad6576e50200e327ea9acd540ed1ad7", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " protected void reportMatching(Annotation[] annotations, IJavaElement enclosingElement, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedContainer, boolean enclosesElement) throws CoreException", "signatureAfterChange": " protected void reportMatching(Annotation[] annotations, IJavaElement enclosingElement, IJavaElement[] otherElements, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedContainer, boolean enclosesElement) throws CoreException", "diff": ["-protected void reportMatching(Annotation[] annotations, IJavaElement enclosingElement, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedContainer, boolean enclosesElement) throws CoreException {", "+protected void reportMatching(Annotation[] annotations, IJavaElement enclosingElement, IJavaElement[] otherElements, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedContainer, boolean enclosesElement) throws CoreException {", "+\t\tIJavaElement localElement = null;", "-\t\t\tthis.patternLocator.matchReportReference(typeRef, enclosingElement, elementBinding, level.intValue(), this);", "+\t\t\tlocalElement = createHandle(annotationType, (IAnnotatable) enclosingElement);", "+\t\t\tthis.patternLocator.matchReportReference(typeRef, enclosingElement, localElement, otherElements, elementBinding, level.intValue(), this);", "-\t\t\t\tthis.patternLocator.matchReportReference(reference, enclosingElement, pair.binding, level.intValue(), this);", "+\t\t\t\tif (localElement == null) {", "+\t\t\t\t\tlocalElement = createHandle(annotationType, (IAnnotatable) enclosingElement);", "+\t\t\t\t}", "+\t\t\t\tthis.patternLocator.matchReportReference(reference, enclosingElement, localElement, otherElements, pair.binding, level.intValue(), this);", "-\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, elementBinding, level.intValue(), this);", "+\t\t\t\t\t\tif (localElement == null) {", "+\t\t\t\t\t\t\tlocalElement = createHandle(annotationType, (IAnnotatable) enclosingElement);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, localElement, otherElements, elementBinding, level.intValue(), this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec0dfcfe5d61ecab79a35b6b0f8272e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "8b61d97704a2b67ed3d29404b8692bdbf30b8b5d", "commitAfterChange": "7fa6d6b6f60d0d2345e743063241c3eb3452b00f", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "diff": ["-\t\tSearchMatch match = this.patternLocator.newDeclarationMatch(type, enclosingElement, accuracy, type.sourceEnd-offset+1, this);", "+\t\tSearchMatch match = this.patternLocator.newDeclarationMatch(type, enclosingElement, type.binding, accuracy, type.sourceEnd-offset+1, this);", "-\t\t\t\t\t\tSearchMatch match = this.patternLocator.newDeclarationMatch(typeParameter, enclosingElement, level.intValue(), typeParameter.sourceEnd-offset+1, this);", "+\t\t\t\t\t\tSearchMatch match = this.patternLocator.newDeclarationMatch(typeParameter, enclosingElement, type.binding, level.intValue(), typeParameter.sourceEnd-offset+1, this);", "-\t\t\t\t\t\tthis.patternLocator.matchReportReference(typeParameter.type, enclosingElement, level.intValue(), this);", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(typeParameter.type, enclosingElement, type.binding, level.intValue(), this);", "-\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(typeParameter.bounds[j], enclosingElement, level.intValue(), this);", "+\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(typeParameter.bounds[j], enclosingElement, type.binding, level.intValue(), this);", "-\t\t\t\tthis.patternLocator.matchReportReference(typeRef, enclosingElement, level.intValue(), this);", "+\t\t\t\tthis.patternLocator.matchReportReference(typeRef, enclosingElement, type.binding, level.intValue(), this);", "-\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, level.intValue(), this);", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, type.binding, level.intValue(), this);", "-\t\t\t\tthis.patternLocator.matchReportReference(superType, enclosingElement, level.intValue(), this);", "+\t\t\t\tthis.patternLocator.matchReportReference(superType, enclosingElement, type.binding, level.intValue(), this);", "-\t\t\treportMatchingSuper(superClass, enclosingElement, nodeSet, matchedClassContainer);", "+\t\t\treportMatchingSuper(superClass, enclosingElement, type.binding, nodeSet, matchedClassContainer);", "-\t\t\t\treportMatchingSuper(superInterfaces[i], enclosingElement, nodeSet, matchedClassContainer);", "+\t\t\t\treportMatchingSuper(superInterfaces[i], enclosingElement, type.binding, nodeSet, matchedClassContainer);"]}], "num": 71981}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f5f7f67f156b4de8554efab52ff77f0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "825350f308488585d7a4cd64da198b17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void test011b()", "signatureAfterChange": " \tpublic void test011b()", "diff": ["-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"Test1.java\",", "-\t\t\t\t\"public class Test1<AA, BB> {\\n\" +", "-\t\t\t\t\"\t<T extends Comparable<T>> void pickOne(T value) throws ExOne {}\\n\" +", "-\t\t\t\t\"\t<T> T pickOne(Comparable<T> value) throws ExTwo { return null;}\\n\" +", "-\t\t\t\t\"\tvoid pickOne2(Test1<Integer,Integer> c) throws ExOne { c.pickOne((Comparable) \\\"test\\\"); }\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class ExOne extends Exception {static final long serialVersionUID = 1;}\\n\" +", "-\t\t\t\t\"class ExTwo extends Exception {static final long serialVersionUID = 2;}\"", "-\t\t\t},", "+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in Test1.java (at line 2)\\n\" + ", "+\t\t\"\t<T extends Comparable<T>> void pickOne(T value) throws ExOne {}\\n\" + ", "+\t\t\"\t                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method pickOne(T) has the same erasure pickOne(Comparable<T>) as another method in type Test1<AA,BB>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in Test1.java (at line 3)\\n\" + ", "+\t\t\"\t<T> T pickOne(Comparable<T> value) throws ExTwo { return null;}\\n\" + ", "+\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method pickOne(Comparable<T>) has the same erasure pickOne(Comparable<T>) as another method in type Test1<AA,BB>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in Test1.java (at line 4)\\n\" + ", "+\t\t\"\tvoid pickOne2(Test1<Integer,Integer> c) throws ExOne { c.pickOne((Comparable) \\\"test\\\"); }\\n\" + ", "+\t\t\"\t                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation pickOne(Comparable) of the generic method pickOne(T) of type Test1<Integer,Integer>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in Test1.java (at line 4)\\n\" + ", "+\t\t\"\tvoid pickOne2(Test1<Integer,Integer> c) throws ExOne { c.pickOne((Comparable) \\\"test\\\"); }\\n\" + ", "+\t\t\"\t                                                                  ^^^^^^^^^^\\n\" + ", "+\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\":", "-\t\t\t\"----------\\n\"", "+\t\t\t\"----------\\n\";", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"Test1.java\",", "+\t\t\t\t\"public class Test1<AA, BB> {\\n\" +", "+\t\t\t\t\"\t<T extends Comparable<T>> void pickOne(T value) throws ExOne {}\\n\" +", "+\t\t\t\t\"\t<T> T pickOne(Comparable<T> value) throws ExTwo { return null;}\\n\" +", "+\t\t\t\t\"\tvoid pickOne2(Test1<Integer,Integer> c) throws ExOne { c.pickOne((Comparable) \\\"test\\\"); }\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class ExOne extends Exception {static final long serialVersionUID = 1;}\\n\" +", "+\t\t\t\t\"class ExTwo extends Exception {static final long serialVersionUID = 2;}\"", "+\t\t\t},", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c37390bcc8031b3d4c06abd2f5d1f22b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void test006()", "signatureAfterChange": " \tpublic void test006()", "diff": ["-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X<T> {\\n\" +", "-\t\t\t\t\"   void test() {\\n\" +", "-\t\t\t\t\"   \tnew Y<Object>().foo(\\\"X\\\");\\n\" +", "-\t\t\t\t\"   \tnew Y<Object>().foo2(\\\"X\\\");\\n\" +", "-\t\t\t\t\"   }\\n\" +", "-\t\t\t\t\"\t<U1> U1 foo(U1 t) {return null;}\\n\" +", "-\t\t\t\t\"\t<U2> U2 foo2(U2 t) {return null;}\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class Y<T2> extends X<T2> {\\n\" +", "-\t\t\t\t\"\tvoid foo(T2 t) {}\\n\" +", "-\t\t\t\t\"\t<U3> void foo2(T2 t) {}\\n\" +", "-\t\t\t\t\"}\\n\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" +", "+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\"\tnew Y<Object>().foo(\\\"X\\\");\\n\" + ", "+\t\t\"\t                ^^^\\n\" + ", "+\t\t\"The method foo(Object) is ambiguous for the type Y<Object>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tnew Y<Object>().foo2(\\\"X\\\");\\n\" + ", "+\t\t\"\t                ^^^^\\n\" + ", "+\t\t\"The method foo2(Object) is ambiguous for the type Y<Object>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\"\tvoid foo(T2 t) {}\\n\" + ", "+\t\t\"\t     ^^^^^^^^^\\n\" + ", "+\t\t\"Name clash: The method foo(T2) of type Y<T2> has the same erasure as foo(U1) of type X<T> but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\"\t<U3> void foo2(T2 t) {}\\n\" + ", "+\t\t\"\t          ^^^^^^^^^^\\n\" + ", "+\t\t\"Name clash: The method foo2(T2) of type Y<T2> has the same erasure as foo2(U2) of type X<T> but does not override it\\n\" + ", "+\t\t\"----------\\n\":", "+\t\t\t\"----------\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\t\"----------\\n\";", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X<T> {\\n\" +", "+\t\t\t\t\"   void test() {\\n\" +", "+\t\t\t\t\"   \tnew Y<Object>().foo(\\\"X\\\");\\n\" +", "+\t\t\t\t\"   \tnew Y<Object>().foo2(\\\"X\\\");\\n\" +", "+\t\t\t\t\"   }\\n\" +", "+\t\t\t\t\"\t<U1> U1 foo(U1 t) {return null;}\\n\" +", "+\t\t\t\t\"\t<U2> U2 foo2(U2 t) {return null;}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y<T2> extends X<T2> {\\n\" +", "+\t\t\t\t\"\tvoid foo(T2 t) {}\\n\" +", "+\t\t\t\t\"\t<U3> void foo2(T2 t) {}\\n\" +", "+\t\t\t\t\"}\\n\"", "+\t\t\t},", "+\t\t\texpectedCompilerLog"]}], "num": 47309}
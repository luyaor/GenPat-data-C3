{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3913b4daeaee7841d9348fc4cc57b4ff", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ca6a38faf6feb3b4ff35dd0f72f3568", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 116, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath(boolean ignoreUnresolvedEntry) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] resolveClasspath(IClasspathEntry[] rawClasspath) throws JavaModelException", "diff": ["-\t */", "-\tpublic IClasspathEntry[] getResolvedClasspath(boolean ignoreUnresolvedEntry)", "-\t\tthrows JavaModelException {", "-", "-\t\treturn ", "-\t\t\tgetResolvedClasspath(", "-\t\t\t\tignoreUnresolvedEntry, ", "-\t\t\t\tfalse, // don't generateMarkerOnError", "-\t\t\t\ttrue // returnResolutionInProgress", "-\t\t\t);", "-\t}", "+\t */", "+\tpublic IClasspathEntry[] resolveClasspath(IClasspathEntry[] rawClasspath) throws JavaModelException {", "+\t\tArrayList resolvedEntries = new ArrayList();", "+\t\tfor (int i = 0, length = rawClasspath.length; i < length; i++) {", "+\t\t\tIClasspathEntry rawEntry = rawClasspath[i];", "+\t\t\tswitch (rawEntry.getEntryKind()){", "+\t\t\t\tcase IClasspathEntry.CPE_VARIABLE:", "+\t\t\t\t\tIClasspathEntry resolvedEntry = null;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tresolvedEntry = JavaCore.getResolvedClasspathEntry(rawEntry);", "+\t\t\t\t\t} catch (AssertionFailedException e) {", "+\t\t\t\t\t\t// Catch the assertion failure", "+\t\t\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=55992", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (resolvedEntry != null)", "+\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IClasspathEntry.CPE_CONTAINER:", "+\t\t\t\t\tIClasspathContainer container = JavaCore.getClasspathContainer(rawEntry.getPath(), this);", "+\t\t\t\t\tif (container == null)", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tIClasspathEntry[] containerEntries = container.getClasspathEntries();", "+\t\t\t\t\tif (containerEntries == null) ", "+\t\t\t\t\t\tbreak;", "+", "+\t\t\t\t\t// container was bound", "+\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){", "+\t\t\t\t\t\tClasspathEntry cEntry = (ClasspathEntry) containerEntries[j];", "+\t\t\t\t\t\t// if container is exported or restricted, then its nested entries must in turn be exported  (21749) and/or propagate restrictions", "+\t\t\t\t\t\tcEntry = cEntry.combineWith((ClasspathEntry) rawEntry);", "+\t\t\t\t\t\tresolvedEntries.add(cEntry);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tresolvedEntries.add(rawEntry);", "+\t\t\t}", "+\t\t}", "+\t\tIClasspathEntry[] result = new IClasspathEntry[resolvedEntries.size()];", "+\t\tresolvedEntries.toArray(result);", "+\t\treturn result;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea988ce59c8fc5d1ee80a8988d2c88c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4f7bc7ed550fb18b593380689460147b32682704", "commitAfterChange": "67127a55a3347cdaa557fc79db09229324829608", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "diff": ["+\t", "+\t// report the type parameters", "+\tif (type.typeParameters != null) {", "+\t\tfor (int i=0, l=type.typeParameters.length; i<l; i++) {", "+\t\t\tTypeParameter typeParameter = type.typeParameters[i];", "+\t\t\tif (typeParameter != null) {", "+\t\t\t\tif (typeParameter.type != null) {", "+\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(typeParameter.type);", "+\t\t\t\t\tif (level != null && matchedClassContainer) {", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(typeParameter.type, enclosingElement, level.intValue(), this);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (typeParameter.bounds != null) {", "+\t\t\t\t\tfor (int j=0, b=typeParameter.bounds.length; j<b; j++) {", "+\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(typeParameter.bounds[j]);", "+\t\t\t\t\t\tif (level != null && matchedClassContainer) {", "+\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(typeParameter.bounds[j], enclosingElement, level.intValue(), this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+"]}], "num": 72473}
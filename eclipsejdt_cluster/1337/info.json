{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "73f6ee5c09b4790463da3699e647549f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3385c768e0de7e4bb2cb2852b6e3fc82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "344f41e4f3a0936f3d1a8dc22956abcf4bca93c4", "commitAfterChange": "2749db90d9b59a49ba8d955d8eddabda9be1d8ee", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 71, "signatureBeforeChange": " \tstatic boolean typeParametersMentioned(TypeBinding upperBound)", "signatureAfterChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards)", "diff": ["+\t\treturn getSingleAbstractMethod(scope, replaceWildcards, -1 /* do not capture */);", "+\t}\t", "-\t}", "-\tstatic boolean typeParametersMentioned(TypeBinding upperBound) {", "-\t\tclass MentionListener extends TypeBindingVisitor {", "-\t\t\tprivate boolean typeParametersMentioned = false;", "-\t\t\tpublic boolean visit(TypeVariableBinding typeVariable) {", "-\t\t\t\tthis.typeParametersMentioned = true;", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tpublic boolean typeParametersMentioned() {", "-\t\t\t\treturn this.typeParametersMentioned;", "-\t\t\t}", "-\t\t}", "-\t\tMentionListener mentionListener = new MentionListener();", "-\t\tTypeBindingVisitor.visit(mentionListener, upperBound);", "-\t\treturn mentionListener.typeParametersMentioned();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b60957e3ac8a259fbb9c46b9897b8cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "4ce841d6606c2c0b7f24c9925dd47ac216c52a6e", "commitAfterChange": "dd4ead302ceb5b95b74beecab83c5b580915aa31", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 51, "signatureBeforeChange": "  \tprivate void appendAnnotation(StringBuffer buffer, IAnnotation annotation) throws JavaModelException", "signatureAfterChange": "  \tprivate void appendAnnotation(StringBuffer buffer, IAnnotation annotation) throws JavaModelException", "diff": ["-\t\t\t\tIMemberValuePair member = members[i];", "-\t\t\t\tString name = member.getMemberName();", "-\t\t\t\tif (!\"value\".equals(name)) {", "-\t\t\t\t\tbuffer.append(name);", "-\t\t\t\t\tbuffer.append('=');", "-\t\t\t\t}", "-\t\t\t\tappendAnnotationMember(buffer, member);", "+\t\t\t\tappendAnnotationMember(buffer, members[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6296f472af7ebc1dda910f7797022cf3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java", "commitBeforeChange": "bde80cb4c6dc594b68058dfc07510ae933e7c446", "commitAfterChange": "3754f0e07e6224c8133a7fce9953f67b9a332603", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  protected void copyExtraResourcesBack(ClasspathMultiDirectory sourceLocation, final SimpleLookupTable duplicates) throws CoreException", "signatureAfterChange": "  protected void copyExtraResourcesBack(ClasspathMultiDirectory sourceLocation, final boolean deletedAll) throws CoreException", "diff": ["-protected void copyExtraResourcesBack(ClasspathMultiDirectory sourceLocation, final SimpleLookupTable duplicates) throws CoreException {", "+protected void copyExtraResourcesBack(ClasspathMultiDirectory sourceLocation, final boolean deletedAll) throws CoreException {", "-\tfinal boolean deletedAll = duplicates != null;", "-\t\t\t\t\t\t\t\tIPath p = (IPath) duplicates.get(copiedResource.getFullPath());", "-\t\t\t\t\t\t\t\tString id = p.removeFirstSegments(1).toString();", "-\t\t\t\t\t\t\t\tcreateErrorFor(resource, Util.bind(\"build.duplicateResource\", id)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t\t\tIResource originalResource = findOriginalResource(partialPath);", "+\t\t\t\t\t\t\t\tString id = originalResource.getFullPath().removeFirstSegments(1).toString();", "+\t\t\t\t\t\t\t\tcreateErrorFor(resource, Util.bind(\"build.duplicateResource\", id)); //$NON-NLS-1$", "-\t\t\t\t\t\tif (deletedAll)", "-\t\t\t\t\t\t\tduplicates.put(copiedResource.getFullPath(), resource.getFullPath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b211f13ec7d1757cc2da44082aae87d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java", "commitBeforeChange": "f681e9c0c3cc6c59d4593a72e3527dde2cae7215", "commitAfterChange": "1b6c294391226cfde58f43f4cff9ad65bab6672e", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 70, "signatureBeforeChange": "  \tpublic ASTNode runConversion(int astLevel, char[] source, String unitName, IJavaProject project, Map options)", "signatureAfterChange": " \t \tpublic ASTNode runConversion(int astLevel, char[] source, String unitName, IJavaProject project, Map options)", "diff": ["-\tpublic ASTNode runConversion(int astLevel, char[] source, String unitName, IJavaProject project, Map options) {", "-\t\tparser.setCompilerOptions(options);", "+\tpublic ASTNode runConversion(int astLevel, char[] source, String unitName, IJavaProject project, Map options) {", "+\t\treturn runConversion(astLevel, source, unitName, project, options, false);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1c1dd91016563440aba6a01fa791440", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "7bf89e29c34a348a2ed388f7cdb6c1016941cf61", "commitAfterChange": "cd5adcef3921beea7df4f6703ab58225bdb4ec39", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprotected void buildBodyDeclarations(org.eclipse.jdt.internal.compiler.ast.AnnotationTypeDeclaration typeDeclaration, AnnotationTypeDeclaration typeDecl)", "signatureAfterChange": " \t \tprotected void buildBodyDeclarations(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration, EnumConstantDeclaration enumConstantDeclaration)", "diff": ["-", "-\tprotected void buildBodyDeclarations(org.eclipse.jdt.internal.compiler.ast.AnnotationTypeDeclaration typeDeclaration, AnnotationTypeDeclaration typeDecl) {", "+\tprotected void buildBodyDeclarations(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration, EnumConstantDeclaration enumConstantDeclaration) {", "+\t\t// add body declaration in the lexical order", "+\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] members = typeDeclaration.memberTypes;", "+\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] fields = typeDeclaration.fields;", "+\t\torg.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] methods = typeDeclaration.methods;", "+\t\t", "+\t\tint fieldsLength = fields == null? 0 : fields.length;", "+\t\tint methodsLength = methods == null? 0 : methods.length;", "+\t\tint membersLength = members == null ? 0 : members.length;", "+\t\tint fieldsIndex = 0;", "+\t\tint methodsIndex = 0;", "+\t\tint membersIndex = 0;", "+\t\t", "+\t\twhile ((fieldsIndex < fieldsLength)", "+\t\t\t|| (membersIndex < membersLength)", "+\t\t\t|| (methodsIndex < methodsLength)) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration nextFieldDeclaration = null;", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration nextMethodDeclaration = null;", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration nextMemberDeclaration = null;", "+\t\t", "+\t\t\tint position = Integer.MAX_VALUE;", "+\t\t\tint nextDeclarationType = -1;", "+\t\t\tif (fieldsIndex < fieldsLength) {", "+\t\t\t\tnextFieldDeclaration = fields[fieldsIndex];", "+\t\t\t\tif (nextFieldDeclaration.declarationSourceStart < position) {", "+\t\t\t\t\tposition = nextFieldDeclaration.declarationSourceStart;", "+\t\t\t\t\tnextDeclarationType = 0; // FIELD", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (methodsIndex < methodsLength) {", "+\t\t\t\tnextMethodDeclaration = methods[methodsIndex];", "+\t\t\t\tif (nextMethodDeclaration.declarationSourceStart < position) {", "+\t\t\t\t\tposition = nextMethodDeclaration.declarationSourceStart;", "+\t\t\t\t\tnextDeclarationType = 1; // METHOD", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (membersIndex < membersLength) {", "+\t\t\t\tnextMemberDeclaration = members[membersIndex];", "+\t\t\t\tif (nextMemberDeclaration.declarationSourceStart < position) {", "+\t\t\t\t\tposition = nextMemberDeclaration.declarationSourceStart;", "+\t\t\t\t\tnextDeclarationType = 2; // MEMBER", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tswitch (nextDeclarationType) {", "+\t\t\t\tcase 0 :", "+\t\t\t\t\tif (nextFieldDeclaration.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t\tenumConstantDeclaration.bodyDeclarations().add(convert(nextFieldDeclaration));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcheckAndAddMultipleFieldDeclaration(fields, fieldsIndex, enumConstantDeclaration.bodyDeclarations());", "+\t\t\t\t\t}", "+\t\t\t\t\tfieldsIndex++;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 1 :", "+\t\t\t\t\tmethodsIndex++;", "+\t\t\t\t\tif (!nextMethodDeclaration.isDefaultConstructor() && !nextMethodDeclaration.isClinit()) {", "+\t\t\t\t\t\tenumConstantDeclaration.bodyDeclarations().add(convert(nextMethodDeclaration));", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 2 :", "+\t\t\t\t\tmembersIndex++;", "+\t\t\t\t\tenumConstantDeclaration.bodyDeclarations().add(convert(nextMemberDeclaration));", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\tconvert(typeDeclaration.javadoc, enumConstantDeclaration);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed5d72e9d9b9d214c107b2b09d2304b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "489bd6f4fff60ffd577633f636fc992ac578a001", "commitAfterChange": "a9a6659f6e9383ba6c2ef999e9385837a38140d0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic IPath addPackageFragmentRoot(IPath projectPath, String sourceFolderName, IPath[] patterns, boolean areExclusionPatterns, String specificOutputLocation) throws JavaModelException", "signatureAfterChange": " \tpublic IPath addPackageFragmentRoot(IPath projectPath, String sourceFolderName, IPath[] inclusionPatterns, IPath[] exclusionPatterns, String specificOutputLocation) throws JavaModelException", "diff": ["-\tpublic IPath addPackageFragmentRoot(IPath projectPath, String sourceFolderName, IPath[] patterns, boolean areExclusionPatterns, String specificOutputLocation) throws JavaModelException {", "+\tpublic IPath addPackageFragmentRoot(IPath projectPath, String sourceFolderName, IPath[] inclusionPatterns, IPath[] exclusionPatterns, String specificOutputLocation) throws JavaModelException {", "-\t\tIClasspathEntry entry;", "-\t\tif (areExclusionPatterns)", "-\t\t\t// exclusion patterns", "-\t\t\tentry = JavaCore.newSourceEntry(path, patterns == null ? new Path[0] : patterns, outputPath);", "-\t\telse", "-\t\t\t// inclusion patterns", "-\t\t\tentry = JavaCore.newSourceEntry(path, patterns == null ? new Path[0] : patterns, new Path[0], outputPath);", "+\t\tIClasspathEntry entry = JavaCore.newSourceEntry(", "+\t\t\tpath,", "+\t\t\tinclusionPatterns == null ? new Path[0] : inclusionPatterns,", "+\t\t\texclusionPatterns == null ? new Path[0] : exclusionPatterns,", "+\t\t\toutputPath);"]}], "num": 1337}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac659cbf13e07fea79bef2c61ea385e5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95c5e86d89b326856b324f29b359d72a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "c7a9edf536467451ba659d7e03ac6c483c5c0cfe", "commitAfterChange": "e6bf96fd82847410c46479a652f4e58f9a6dd052", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t} else { // really bad error ....", "+\t\t\t} else { ", "-\t\tif (binding.problemId() == ProblemReasons.NotFound){", "-\t\t\tthis.codegenBinding = this.binding = ((ProblemMethodBinding)binding).closestMatch;", "+\t\tif (binding instanceof ProblemMethodBinding){", "+\t\t\tMethodBinding closestMatch = ((ProblemMethodBinding)binding).closestMatch;", "+\t\t\tif (closestMatch != null) this.codegenBinding = this.binding = closestMatch;", "-\t\treturn null;", "+\t\treturn binding == null ? null : binding.returnType;", "-\t\t\treturn this.resolvedType = binding.returnType;", "-\t\t\treturn this.resolvedType = binding.returnType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acebd0d5f1a8d2d8bc51b72c7f6e0b0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "d7e7bb059880a6c87ea3290708d2d0a9f9e7ebe8", "commitAfterChange": "a415220ad0bdc743d286b40ccc481ededfe8132e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void generateOptimizedNonBooleanEqual(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "signatureAfterChange": " public void generateOptimizedNonBooleanEqual(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "diff": ["-\t\t// optimized case: x == null", "-\t\tif (right.constant == NullConstant.Default) {", "-\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\tif (valueRequired) {", "-\t\t\t\tif (falseLabel == null) {", "-\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\t// implicit falling through the FALSE case", "-\t\t\t\t\t\tcodeStream.ifnull(trueLabel);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// implicit falling through the TRUE case", "-\t\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\t\tcodeStream.ifnonnull(falseLabel);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t\t\treturn;", "-\t\t}", "-\t\t// optimized case: null == x", "-\t\tif (left.constant == NullConstant.Default) {", "-\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\tif (valueRequired) {", "-\t\t\t\tif (falseLabel == null) {", "-\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\t// implicit falling through the FALSE case", "-\t\t\t\t\t\tcodeStream.ifnull(trueLabel);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// implicit falling through the TRUE case", "-\t\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\t\tcodeStream.ifnonnull(falseLabel);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t\t\treturn;", "-\t\t}", "+\t// null cases", "+\t// optimized case: x == null", "+\tif (right instanceof NullLiteral) {", "+\t\tif (left instanceof NullLiteral) {", "+\t\t\t// null == null", "+\t\t\tif (valueRequired) {", "+\t\t\t\tif (falseLabel == null) {", "+\t\t\t\t\t// implicit falling through the FALSE case", "+\t\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t\tcodeStream.goto_(trueLabel);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\tif (valueRequired) {", "+\t\t\t\tif (falseLabel == null) {", "+\t\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t\t// implicit falling through the FALSE case", "+\t\t\t\t\t\tcodeStream.ifnull(trueLabel);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// implicit falling through the TRUE case", "+\t\t\t\t\tif (trueLabel == null) {", "+\t\t\t\t\t\tcodeStream.ifnonnull(falseLabel);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\treturn;", "+\t} else if (left instanceof NullLiteral) { // optimized case: null == x", "+\t\tright.generateCode(currentScope, codeStream, valueRequired);", "+\t\tif (valueRequired) {", "+\t\t\tif (falseLabel == null) {", "+\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t// implicit falling through the FALSE case", "+\t\t\t\t\tcodeStream.ifnull(trueLabel);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t// implicit falling through the TRUE case", "+\t\t\t\tif (trueLabel == null) {", "+\t\t\t\t\tcodeStream.ifnonnull(falseLabel);", "+\t\t\t\t} else {", "+\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\treturn;", "+\t}", "+"]}], "num": 58473}
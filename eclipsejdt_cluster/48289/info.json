{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5fdd19d7ab87d7d71cb8911d2e2afa66", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a2b2ea296f4411a55f8455726c001cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["-\tif (!method.isConstructor())", "-\t\tmethod.returnType = resolveType(method.returnType, this.environment, null, 0);", "-\tfor (int i = method.parameters.length; --i >= 0;)", "-\t\tmethod.parameters[i] = resolveType(method.parameters[i], this.environment, null, 0);", "-\tfor (int i = method.thrownExceptions.length; --i >= 0;)", "-\t\tmethod.thrownExceptions[i] = resolveType(method.thrownExceptions[i], this.environment, true);", "-\tfor (int i = method.typeVariables.length; --i >= 0;)", "+\tif (!method.isConstructor()) {", "+\t\tTypeBinding resolvedType = resolveType(method.returnType, this.environment, null, 0);", "+\t\tmethod.returnType = resolvedType;", "+\t\tif ((resolvedType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\tmethod.tagBits |= TagBits.HasMissingType;", "+\t\t}\t\t", "+\t}", "+\tfor (int i = method.parameters.length; --i >= 0;) {", "+\t\tTypeBinding resolvedType = resolveType(method.parameters[i], this.environment, null, 0);", "+\t\tmethod.parameters[i] = resolvedType;", "+\t\tif ((resolvedType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\tmethod.tagBits |= TagBits.HasMissingType;", "+\t\t}\t\t", "+\t}", "+\tfor (int i = method.thrownExceptions.length; --i >= 0;) {", "+\t\tReferenceBinding resolvedType = resolveType(method.thrownExceptions[i], this.environment, true);", "+\t\tmethod.thrownExceptions[i] = resolvedType;", "+\t\tif ((resolvedType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\tmethod.tagBits |= TagBits.HasMissingType;", "+\t\t}", "+\t}", "+\tfor (int i = method.typeVariables.length; --i >= 0;) {", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a475d925599840b062bfa74e5d54757d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "c7d3258ae74375a57da545fcb11a05d452eeaa7b", "commitAfterChange": "5b943f569ec21fd8ddfd3731a64d0bb21777935c", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["-\tif (!method.isConstructor())", "-\t\tmethod.returnType = resolveType(method.returnType, this.environment, null, 0);", "-\tfor (int i = method.parameters.length; --i >= 0;)", "-\t\tmethod.parameters[i] = resolveType(method.parameters[i], this.environment, null, 0);", "-\tfor (int i = method.thrownExceptions.length; --i >= 0;)", "-\t\tmethod.thrownExceptions[i] = resolveType(method.thrownExceptions[i], this.environment, true);", "+\tif (!method.isConstructor()) {", "+\t\tTypeBinding returnType = resolveType(method.returnType, this.environment, null, 0);", "+\t\tTypeBinding leafType = returnType.leafComponentType();", "+\t\tif (leafType instanceof ReferenceBinding && (((ReferenceBinding)leafType).modifiers & AccGenericSignature) != 0) {", "+\t\t\tmethod.modifiers |= AccGenericSignature;", "+\t\t}", "+\t\tmethod.returnType = returnType;", "+\t}", "+\tfor (int i = method.parameters.length; --i >= 0;) {", "+\t\tTypeBinding parameterType = resolveType(method.parameters[i], this.environment, null, 0);", "+\t\tTypeBinding leafType = parameterType.leafComponentType();", "+\t\tif (leafType instanceof ReferenceBinding && (((ReferenceBinding)leafType).modifiers & AccGenericSignature) != 0) {", "+\t\t\tmethod.modifiers |= AccGenericSignature;", "+\t\t}", "+\t\tmethod.parameters[i] = parameterType;", "+\t}", "+\tfor (int i = method.thrownExceptions.length; --i >= 0;) {", "+\t\tReferenceBinding thrownException = resolveType(method.thrownExceptions[i], this.environment, true);", "+\t\tif ((thrownException.modifiers & AccGenericSignature) != 0) {", "+\t\t\tmethod.modifiers |= AccGenericSignature;", "+\t\t}", "+\t\tmethod.thrownExceptions[i] = thrownException;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5197a60c2ecd2c2aa5ce07b574ed9cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "b13588c5f19043bc45d63f1aa5cc7ef676a48331", "commitAfterChange": "441c98a2dc857e42d41d176bd77fb4849041ae2b", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["-\tif (!method.isConstructor()) {", "-\t\tTypeBinding returnType = resolveType(method.returnType, this.environment, null, 0);", "-\t\tTypeBinding leafType = returnType.leafComponentType();", "-\t\tif (leafType instanceof ReferenceBinding && (((ReferenceBinding)leafType).modifiers & AccGenericSignature) != 0) {", "-\t\t\tmethod.modifiers |= AccGenericSignature;", "-\t\t}", "-\t\tmethod.returnType = returnType;", "-\t}", "-\tfor (int i = method.parameters.length; --i >= 0;) {", "-\t\tTypeBinding parameterType = resolveType(method.parameters[i], this.environment, null, 0);", "-\t\tTypeBinding leafType = parameterType.leafComponentType();", "-\t\tif (leafType instanceof ReferenceBinding && (((ReferenceBinding)leafType).modifiers & AccGenericSignature) != 0) {", "-\t\t\tmethod.modifiers |= AccGenericSignature;", "-\t\t}", "-\t\tmethod.parameters[i] = parameterType;", "-\t}", "-\tfor (int i = method.thrownExceptions.length; --i >= 0;) {", "-\t\tReferenceBinding thrownException = resolveType(method.thrownExceptions[i], this.environment, true);", "-\t\tif ((thrownException.modifiers & AccGenericSignature) != 0) {", "-\t\t\tmethod.modifiers |= AccGenericSignature;", "-\t\t}", "-\t\tmethod.thrownExceptions[i] = thrownException;", "-\t}", "+\tif (!method.isConstructor())", "+\t\tmethod.returnType = resolveType(method.returnType, this.environment, null, 0);", "+\tfor (int i = method.parameters.length; --i >= 0;)", "+\t\tmethod.parameters[i] = resolveType(method.parameters[i], this.environment, null, 0);", "+\tfor (int i = method.thrownExceptions.length; --i >= 0;)", "+\t\tmethod.thrownExceptions[i] = resolveType(method.thrownExceptions[i], this.environment, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6f37442d44885abbc746c63ba9ed7fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "7d377efa996fb82a3b5c1b0d3643171f071fe458", "commitAfterChange": "5725587b7e076e798174c1de3afdd9fd81ea2803", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tReferenceBinding resolve()", "signatureAfterChange": "  \tReferenceBinding resolve()", "diff": ["-\t    switch(this.boundKind) {", "-\t        case Wildcard.EXTENDS :", "-\t\t\t\tthis.bound = BinaryTypeBinding.resolveType(this.bound, this.environment, true /* raw conversion */);", "-\t        \tfor (int i = 0, length = this.otherBounds == null ? 0 : this.otherBounds.length; i < length; i++) {", "-\t\t\t\t\tthis.otherBounds[i]= BinaryTypeBinding.resolveType(this.bound, this.environment, true /* raw conversion */);", "-\t        \t}", "+\t\tswitch(this.boundKind) {", "+\t\t\tcase Wildcard.EXTENDS :", "+\t\t\t\tTypeBinding resolveType = BinaryTypeBinding.resolveType(this.bound, this.environment, true /* raw conversion */);", "+\t\t\t\tthis.bound = resolveType;", "+\t\t\t\tthis.tagBits |= resolveType.tagBits & TagBits.ContainsNestedTypeReferences;", "+\t\t\t\tfor (int i = 0, length = this.otherBounds == null ? 0 : this.otherBounds.length; i < length; i++) {", "+\t\t\t\t\tresolveType = BinaryTypeBinding.resolveType(this.otherBounds[i], this.environment, true /* raw conversion */);", "+\t\t\t\t\tthis.otherBounds[i]= resolveType;", "+\t\t\t\t\tthis.tagBits |= resolveType.tagBits & TagBits.ContainsNestedTypeReferences;", "+\t\t\t\t}", "-\t        case Wildcard.SUPER :", "-\t\t\t\tthis.bound = BinaryTypeBinding.resolveType(this.bound, this.environment, true /* raw conversion */);", "+\t\t\tcase Wildcard.SUPER :", "+\t\t\t\tresolveType = BinaryTypeBinding.resolveType(this.bound, this.environment, true /* raw conversion */);", "+\t\t\t\tthis.bound = resolveType;", "+\t\t\t\tthis.tagBits |= resolveType.tagBits & TagBits.ContainsNestedTypeReferences;", "-\t    }", "+\t\t}"]}], "num": 48289}
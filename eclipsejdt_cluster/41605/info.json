{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80b608afd864439eca3b9f1c1f2b77e5", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3889ac10c8df34a4758d289276b83050", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "afcefcc52a6e235f9ed640317727929d84135cf0", "commitAfterChange": "5ce294a787e58643d5e8115fe2ddfea119e53aa2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void generateCode(ClassScope classScope, ClassFile classFile)", "signatureAfterChange": " public void generateCode(ClassScope classScope, ClassFile classFile)", "diff": ["-\t */", "-\tpublic void generateCode(ClassScope classScope, ClassFile classFile) {", "-\t\tint problemResetPC = 0;", "-\t\tif (ignoreFurtherInvestigation) {", "-\t\t\tif (this.binding == null)", "-\t\t\t\treturn; // Handle methods with invalid signature or duplicates", "-\t\t\tint problemsLength;", "-\t\t\tCategorizedProblem[] problems =", "-\t\t\t\tscope.referenceCompilationUnit().compilationResult.getProblems();", "-\t\t\tCategorizedProblem[] problemsCopy = new CategorizedProblem[problemsLength = problems.length];", "-\t\t\tSystem.arraycopy(problems, 0, problemsCopy, 0, problemsLength);", "-\t\t\tclassFile.addProblemConstructor(this, binding, problemsCopy);", "-\t\t\treturn;", "-\t\t}", "-\t\ttry {", "-\t\t\tproblemResetPC = classFile.contentsOffset;", "-\t\t\tthis.internalGenerateCode(classScope, classFile);", "-\t\t} catch (AbortMethod e) {", "-\t\t\tif (e.compilationResult == CodeStream.RESTART_IN_WIDE_MODE) {", "-\t\t\t\t// a branch target required a goto_w, restart code gen in wide mode.", "-\t\t\t\ttry {", "-\t\t\t\t\tclassFile.contentsOffset = problemResetPC;", "-\t\t\t\t\tclassFile.methodCount--;", "-\t\t\t\t\tclassFile.codeStream.wideMode = true; // request wide mode ", "-\t\t\t\t\tthis.internalGenerateCode(classScope, classFile); // restart method generation", "-\t\t\t\t} catch (AbortMethod e2) {", "-\t\t\t\t\tint problemsLength;", "-\t\t\t\t\tCategorizedProblem[] problems =", "-\t\t\t\t\t\tscope.referenceCompilationUnit().compilationResult.getAllProblems();", "-\t\t\t\t\tCategorizedProblem[] problemsCopy = new CategorizedProblem[problemsLength = problems.length];", "-\t\t\t\t\tSystem.arraycopy(problems, 0, problemsCopy, 0, problemsLength);", "-\t\t\t\t\tclassFile.addProblemConstructor(this, binding, problemsCopy, problemResetPC);", "-\t\t\t} else {", "+ */", "+public void generateCode(ClassScope classScope, ClassFile classFile) {", "+\tint problemResetPC = 0;", "+\tif (this.ignoreFurtherInvestigation) {", "+\t\tif (this.binding == null)", "+\t\t\treturn; // Handle methods with invalid signature or duplicates", "+\t\tint problemsLength;", "+\t\tCategorizedProblem[] problems =", "+\t\t\tthis.scope.referenceCompilationUnit().compilationResult.getProblems();", "+\t\tCategorizedProblem[] problemsCopy = new CategorizedProblem[problemsLength = problems.length];", "+\t\tSystem.arraycopy(problems, 0, problemsCopy, 0, problemsLength);", "+\t\tclassFile.addProblemConstructor(this, this.binding, problemsCopy);", "+\t\treturn;", "+\t}", "+\ttry {", "+\t\tproblemResetPC = classFile.contentsOffset;", "+\t\tthis.internalGenerateCode(classScope, classFile);", "+\t} catch (AbortMethod e) {", "+\t\tif (e.compilationResult == CodeStream.RESTART_IN_WIDE_MODE) {", "+\t\t\t// a branch target required a goto_w, restart code gen in wide mode.", "+\t\t\ttry {", "+\t\t\t\tclassFile.contentsOffset = problemResetPC;", "+\t\t\t\tclassFile.methodCount--;", "+\t\t\t\tclassFile.codeStream.wideMode = true; // request wide mode ", "+\t\t\t\tthis.internalGenerateCode(classScope, classFile); // restart method generation", "+\t\t\t} catch (AbortMethod e2) {", "-\t\t\t\t\tscope.referenceCompilationUnit().compilationResult.getAllProblems();", "+\t\t\t\t\tthis.scope.referenceCompilationUnit().compilationResult.getAllProblems();", "-\t\t\t\tclassFile.addProblemConstructor(this, binding, problemsCopy, problemResetPC);", "+\t\t\t\tclassFile.addProblemConstructor(this, this.binding, problemsCopy, problemResetPC);", "-\t\t}", "-\t}", "+\t\t\tint problemsLength;", "+\t\t\tCategorizedProblem[] problems =", "+\t\t\t\tthis.scope.referenceCompilationUnit().compilationResult.getAllProblems();", "+\t\t\tCategorizedProblem[] problemsCopy = new CategorizedProblem[problemsLength = problems.length];", "+\t\t\tSystem.arraycopy(problems, 0, problemsCopy, 0, problemsLength);", "+\t\t\tclassFile.addProblemConstructor(this, this.binding, problemsCopy, problemResetPC);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e48700532a500f418f05c0e9ed65a901", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void generateCode(ClassScope classScope, ClassFile classFile)", "signatureAfterChange": " \tpublic void generateCode(ClassScope classScope, ClassFile classFile)", "diff": ["-\t\tif (ignoreFurtherInvestigation) {", "+\t\tif (this.ignoreFurtherInvestigation) {", "-\t\t\t\tscope.referenceCompilationUnit().compilationResult.getProblems();", "+\t\t\t\tthis.scope.referenceCompilationUnit().compilationResult.getProblems();", "-\t\t\tclassFile.addProblemMethod(this, binding, problemsCopy);", "+\t\t\tclassFile.addProblemMethod(this, this.binding, problemsCopy);", "-\t\t\t\t\t\tscope.referenceCompilationUnit().compilationResult.getAllProblems();", "+\t\t\t\t\t\tthis.scope.referenceCompilationUnit().compilationResult.getAllProblems();", "-\t\t\t\t\tclassFile.addProblemMethod(this, binding, problemsCopy, problemResetPC);", "+\t\t\t\t\tclassFile.addProblemMethod(this, this.binding, problemsCopy, problemResetPC);", "-\t\t\t\t\tscope.referenceCompilationUnit().compilationResult.getAllProblems();", "+\t\t\t\t\tthis.scope.referenceCompilationUnit().compilationResult.getAllProblems();", "-\t\t\t\tclassFile.addProblemMethod(this, binding, problemsCopy, problemResetPC);", "+\t\t\t\tclassFile.addProblemMethod(this, this.binding, problemsCopy, problemResetPC);"]}], "num": 41605}
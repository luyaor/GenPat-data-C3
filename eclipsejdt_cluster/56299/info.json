{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e01a2c96c1765a0ac1201f3f19b09b32", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00e2f27c2412dbf41431941b940cdabd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "64adb94de0734c7d5adfd2cb11839ed3d3641dfc", "commitAfterChange": "a12b1847e48d96ac5e805a907f4cf72bcc8b1f19", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 121, "signatureBeforeChange": " \t \tpublic synchronized void variablePut(String variableName, IPath variablePath)", "signatureAfterChange": " \t \tpublic synchronized void variablePut(String variableName, IPath variablePath)", "diff": ["-\t\t}", "-", "-\t\tString variableKey = CP_VARIABLE_PREFERENCES_PREFIX+variableName;", "-\t\tString variableString = variablePath == null ? CP_ENTRY_IGNORE : variablePath.toString();", "-\t\tgetInstancePreferences().put(variableKey, variableString);", "-\t\ttry {", "-\t\t\tgetInstancePreferences().flush();", "-\t\t} catch (BackingStoreException e) {", "-\t\t\t// ignore exception"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71984caf0ee497309baaca581d2947f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "2f0c7ec523954b9442b914a192aeb84937c76666", "commitAfterChange": "e1ce38065823480549fe152214755fa58b2884e3", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic static long getJdkLevel(Object targetLibrary)", "signatureAfterChange": " \tpublic static long getJdkLevel(Object targetLibrary)", "diff": ["-\t\t\t\tClassFileReader reader = null;", "-\t\t\t\tif (targetLibrary instanceof IFolder) {", "-\t\t\t\t\tIFile classFile = findFirstClassFile((IFolder) targetLibrary); // only internal classfolders are allowed", "-\t\t\t\t\tif (classFile != null) {", "-\t\t\t\t\t\tbyte[] bytes = Util.getResourceContentsAsByteArray(classFile);", "-\t\t\t\t\t\tIPath location = classFile.getLocation();", "-\t\t\t\t\t\treader = new ClassFileReader(bytes, location == null ? null : location.toString().toCharArray());", "+\t\t\tClassFileReader reader = null;", "+\t\t\tif (targetLibrary instanceof IFolder) {", "+\t\t\t\tIFile classFile = findFirstClassFile((IFolder) targetLibrary); // only internal classfolders are allowed", "+\t\t\t\tif (classFile != null)", "+\t\t\t\t\treader = Util.newClassFileReader(classFile);", "+\t\t\t} else {", "+\t\t\t\t// root is a jar file or a zip file", "+\t\t\t\tZipFile jar = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tIPath path = null;", "+\t\t\t\t\tif (targetLibrary instanceof IResource) {", "+\t\t\t\t\t\tpath = ((IResource)targetLibrary).getLocation();", "+\t\t\t\t\t} else if (targetLibrary instanceof File){", "+\t\t\t\t\t\tFile f = (File) targetLibrary;", "+\t\t\t\t\t\tif (!f.isDirectory()) {", "+\t\t\t\t\t\t\tpath = new Path(((File)targetLibrary).getPath());", "+\t\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// root is a jar file or a zip file", "-\t\t\t\t\tZipFile jar = null;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tIPath path = null;", "-\t\t\t\t\t\tif (targetLibrary instanceof IResource) {", "-\t\t\t\t\t\t\tpath = ((IResource)targetLibrary).getLocation();", "-\t\t\t\t\t\t} else if (targetLibrary instanceof File){", "-\t\t\t\t\t\t\tFile f = (File) targetLibrary;", "-\t\t\t\t\t\t\tif (!f.isDirectory()) {", "-\t\t\t\t\t\t\t\tpath = new Path(((File)targetLibrary).getPath());", "+\t\t\t\t\tif (path != null) {", "+\t\t\t\t\t\tjar = JavaModelManager.getJavaModelManager().getZipFile(path);", "+\t\t\t\t\t\tfor (Enumeration e= jar.entries(); e.hasMoreElements();) {", "+\t\t\t\t\t\t\tZipEntry member= (ZipEntry) e.nextElement();", "+\t\t\t\t\t\t\tString entryName= member.getName();", "+\t\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isClassFileName(entryName)) {", "+\t\t\t\t\t\t\t\treader = ClassFileReader.read(jar, entryName);", "+\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tif (path != null) {", "-\t\t\t\t\t\t\tjar = JavaModelManager.getJavaModelManager().getZipFile(path);", "-\t\t\t\t\t\t\tfor (Enumeration e= jar.entries(); e.hasMoreElements();) {", "-\t\t\t\t\t\t\t\tZipEntry member= (ZipEntry) e.nextElement();", "-\t\t\t\t\t\t\t\tString entryName= member.getName();", "-\t\t\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isClassFileName(entryName)) {", "-\t\t\t\t\t\t\t\t\treader = ClassFileReader.read(jar, entryName);", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\t// ignore", "-\t\t\t\t\t} finally {", "-\t\t\t\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(jar);", "+\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t// ignore", "+\t\t\t\t} finally {", "+\t\t\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(jar);", "-\t\t\t\tif (reader != null) {", "-\t\t\t\t\treturn reader.getVersion();", "-\t\t\t\t}", "-\t\t} catch(JavaModelException e) {", "+\t\t\t}", "+\t\t\tif (reader != null) {", "+\t\t\t\treturn reader.getVersion();", "+\t\t\t}", "+\t\t} catch (CoreException e) {"]}], "num": 56299}
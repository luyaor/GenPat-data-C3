{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b306ebdd37b55f73fa3713ca9826ae2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8122177472ac197d2c2fcd83df0b7f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5d2cd7f1076b45eee90e6733e80765abd1df3d6a", "commitAfterChange": "14e86a8141996732826e41cf3c8dd392bb1fd5ba", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void forceClasspathReload(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic void forceClasspathReload(IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\tflushClasspathProblemMarkers(false, true);", "-\t\t\tif (fileEntries == null)", "+\t\t\tif (fileEntries == null) {", "+\t\t\t}", "-\t\t\tif (getProject().isAccessible()) {", "-\t\t\t\tif (e.getJavaModelStatus().getException() instanceof CoreException) {", "-\t\t\t\t\t// happens if the .classpath could not be written to disk", "-\t\t\t\t\tcreateClasspathProblemMarker(new JavaModelStatus(", "-\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "-\t\t\t\t\t\t\tUtil.bind(\"classpath.couldNotWriteClasspathFile\", getElementName(), e.getMessage()))); //$NON-NLS-1$", "-\t\t\t\t} else {", "-\t\t\t\t\tcreateClasspathProblemMarker(new JavaModelStatus(", "-\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "-\t\t\t\t\t\t\tUtil.bind(\"classpath.invalidClasspathInClasspathFile\", getElementName(), e.getMessage()))); //$NON-NLS-1$", "-\t\t\t\t}\t\t\t", "+\t\t\tif (!ResourcesPlugin.getWorkspace().isTreeLocked()) {", "+\t\t\t\tif (getProject().isAccessible()) {", "+\t\t\t\t\tif (e.getJavaModelStatus().getException() instanceof CoreException) {", "+\t\t\t\t\t\t// happens if the .classpath could not be written to disk", "+\t\t\t\t\t\tcreateClasspathProblemMarker(new JavaModelStatus(", "+\t\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "+\t\t\t\t\t\t\t\tUtil.bind(\"classpath.couldNotWriteClasspathFile\", getElementName(), e.getMessage()))); //$NON-NLS-1$", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcreateClasspathProblemMarker(new JavaModelStatus(", "+\t\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "+\t\t\t\t\t\t\t\tUtil.bind(\"classpath.invalidClasspathInClasspathFile\", getElementName(), e.getMessage()))); //$NON-NLS-1$", "+\t\t\t\t\t}\t\t\t", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c33cd9b1fb441b18473ffb4c8488e886", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 111, "signatureBeforeChange": " \t \tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems, Map unknownElements)", "signatureAfterChange": " \tprivate IClasspathEntry[] readFileEntries(Map unkwownElements)", "diff": ["-\t", "-\tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems, Map unknownElements) {", "-", "-\t\ttry {", "-\t\t\tString xmlClasspath = getSharedProperty(CLASSPATH_FILENAME);", "-\t\t\tif (xmlClasspath == null) {", "-\t\t\t\tif (createMarker && this.project.isAccessible()) {", "-\t\t\t\t\t\tthis.createClasspathProblemMarker(new JavaModelStatus(", "-\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "-\t\t\t\t\t\t\tMessages.bind(Messages.classpath_cannotReadClasspathFile, this.getElementName()))); ", "-\t\t\t\t}", "-\t\t\t\treturn null;", "-\t\t\treturn decodeClasspath(xmlClasspath, createMarker, logProblems, unknownElements);", "-\t\t} catch(CoreException e) {", "-\t\t\t// file does not exist (or not accessible)", "-\t\t\tif (createMarker && this.project.isAccessible()) {", "-\t\t\t\t\tthis.createClasspathProblemMarker(new JavaModelStatus(", "-\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "-\t\t\t\t\t\tMessages.bind(Messages.classpath_cannotReadClasspathFile, this.getElementName()))); ", "-\t\t\tif (logProblems) {", "-\t\t\t\tUtil.log(e, ", "-\t\t\t\t\t\"Exception while retrieving \"+ this.getPath() //$NON-NLS-1$", "-\t\t\t\t\t+\"/.classpath, will revert to default classpath\"); //$NON-NLS-1$", "-\t\treturn null;", "+\t */", "+\tprivate IClasspathEntry[] readFileEntries(Map unkwownElements) {", "+\t\ttry {", "+\t\t\treturn readFileEntriesWithException(unkwownElements);", "+\t\t} catch (CoreException e) {", "+\t\t\tUtil.log(e, \"Exception while reading \" + getPath().append(JavaProject.CLASSPATH_FILENAME)); //$NON-NLS-1$", "+\t\t\treturn JavaProject.INVALID_CLASSPATH;", "+\t\t} catch (IOException e) {", "+\t\t\tUtil.log(e, \"Exception while reading \" + getPath().append(JavaProject.CLASSPATH_FILENAME)); //$NON-NLS-1$", "+\t\t\treturn JavaProject.INVALID_CLASSPATH;", "+\t\t} catch (AssertionFailedException e) {", "+\t\t\tUtil.log(e, \"Exception while reading \" + getPath().append(JavaProject.CLASSPATH_FILENAME)); //$NON-NLS-1$", "+\t\t\treturn JavaProject.INVALID_CLASSPATH;", "+\t\t}"]}], "num": 24760}
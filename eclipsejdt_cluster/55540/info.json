{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95b5afbfd5b5fe9c70ba6c0faa79f512", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5455f85736eaf66c4b993ede30789173", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "1c0c2bf77ea7eb024038ba5150fcc9eb4dd14084", "commitAfterChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "methodNumberBeforeChange": 386, "methodNumberAfterChange": 386, "signatureBeforeChange": " \tpublic void test384()", "signatureAfterChange": " \tpublic void test384()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\tClass<? extends String> foo() { return null; }\\r\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tClass<? extends String> foo() { return null; }\\n\" + ", "+\t\t\t\"\t                        ^^^^^\\n\" + ", "+\t\t\t\"The method foo() of type X should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tClass<? extends String> foo() { return null; }\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\tClass<? extends String>[] foo2() { return null; }\\r\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tClass<? extends String>[] foo2() { return null; }\\n\" + ", "+\t\t\t\"\t                          ^^^^^^\\n\" + ", "+\t\t\t\"The method foo2() of type X should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tClass<? extends String>[] foo2() { return null; }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f87460102e8145f480215c2c323e15b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 272, "methodNumberAfterChange": 272, "signatureBeforeChange": "\t\t \tpublic void test268()", "signatureAfterChange": "\t\t \tpublic void test268()", "diff": ["+\t\t\t\"\t          ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tArrayList<X> list = new ArrayList();\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tArrayList<X> list = new ArrayList();\\n\" + ", "+\t\t\t\"\t                        ^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\treturn list.toArray(new X[list.size()]);\\n\" + ", "+\t\t\t\"\t                        ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}], "num": 55540}
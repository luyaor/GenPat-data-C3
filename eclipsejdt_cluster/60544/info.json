{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45b812532e88771bb1ff278200ee80a6", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3238947ae0809ceb2586cf2c05e766bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "7a8c3dc423c0b39a0d91a8547c98a520bb9dee61", "commitAfterChange": "9f0ebc31be56acb3fbfdaeae5760bc6493eb0026", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \t \tpublic void test0017() throws JavaModelException", "signatureAfterChange": " \t \tpublic void test0017() throws JavaModelException", "diff": ["+\t\tList fragments = statement.fragments();", "+\t\tassertEquals(\"Wrong size\", 1,  fragments.size());", "+\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "+\t\tExpression initializer  = fragment.getInitializer();", "+\t\tassertNotNull(\"No initializer\", initializer);", "+\t\tITypeBinding binding = initializer.resolveTypeBinding();", "+\t\tassertNotNull(\"No binding\", binding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8e1fac67ba28f44ac9171b65627e61c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "38ba25f168c7acf635d77bba5aaaeec79c36b17a", "commitAfterChange": "ec02b9dda2c87a39ab62083bd3e65fe902c5bf37", "methodNumberBeforeChange": 236, "methodNumberAfterChange": 236, "signatureBeforeChange": " \tpublic void test0222() throws JavaModelException", "signatureAfterChange": " \tpublic void test0222() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Wrong size\", 1, statements.size());", "+\t\tassertEquals(\"Wrong size\", 2, statements.size());", "+\t\tStatement statement = (Statement) statements.get(1);", "+\t\tassertEquals(\"Not an enhanced for statement\", ASTNode.ENHANCED_FOR_STATEMENT, statement.getNodeType());", "+\t\tEnhancedForStatement forStatement = (EnhancedForStatement) statement;", "+\t\tExpression expression = forStatement.getExpression();", "+\t\tassertNotNull(\"No expression\", expression);", "+\t\tassertEquals(\"Not a method invocation\", ASTNode.METHOD_INVOCATION, expression.getNodeType());", "+\t\t"]}], "num": 60544}
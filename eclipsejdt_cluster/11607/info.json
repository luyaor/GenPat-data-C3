{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d623bd04a44584774f2586997b018d6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "063933b2495b9b06845513be25b4f249", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "28aa61d66b2a96d76f9d88da4d04bca3cbc0e8b8", "commitAfterChange": "dc6cfc95d2e4c607e420e7f9e33cff815caf4698", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate String[] createArrayOfString(String s)", "signatureAfterChange": "  \tprivate String[] createArrayOfString(String s)", "diff": ["-\t\tString delim = null;", "-\t\tint indexOfBackslashN = s.indexOf('\\n');", "-\t\tint indexOfBackslashR = s.indexOf('\\r');", "-\t\tif (indexOfBackslashN != -1) {", "-\t\t\tif (indexOfBackslashR != -1) {", "-\t\t\t\tdelim = \"\\r\\n\";", "-\t\t\t} else {", "-\t\t\t\tdelim = \"\\n\";", "-\t\t\t}", "-\t\t} else if (indexOfBackslashR != -1) {", "-\t\t\tdelim = \"\\r\";", "-\t\t} else {", "-\t\t\treturn new String[] {s};", "-\t\t}", "-\t\tint start = 0;", "-\t\tint index = s.indexOf(delim, start);", "-", "-\t\twhile (index != -1) {", "-\t\t\tarrayList.add(s.substring(start, index));", "-\t\t\tstart = index + delim.length();", "-\t\t\tindex = s.indexOf(delim, start);", "-\t\t}", "-\t\tif (s.endsWith(delim)) {", "-\t\t\tarrayList.add(\"\");", "+\t\tint start = 0;", "+\t\tchar[] source = s.toCharArray();", "+\t\tfor (int i = 0, max = source.length; i < max; i++) {", "+\t\t\tswitch(source[i]) {", "+\t\t\t\tcase '\\r':", "+\t\t\t\t\tarrayList.add(s.substring(start, i));", "+\t\t\t\t\tif ((i + 1) < max) {", "+\t\t\t\t\t\tif (source[i + 1] == '\\n') {", "+\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tstart = i + 1;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase '\\n' :", "+\t\t\t\t\tarrayList.add(s.substring(start, i));", "+\t\t\t\t\tstart = i + 1;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5029fc7ba8c339ce3dfba17dd2d21ffb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "e781f8e7f01bf193d5dc75f48e7e40aa2b3a1ff8", "commitAfterChange": "253b6e86274d6a434f078cf2295ba672e6b070f0", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "signatureAfterChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "diff": ["-", "-\t\tString fullName;", "-\t\tif (this.rootPath != null && !this.rootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {", "-\t\t\tfullName = this.rootPath + '/' + name;", "-\t\t} else {", "-\t\t\tfullName = name;", "+\t", "+\t\tchar[] source = null;", "+\t\tif (this.rootPath != null) {", "+\t\t\tsource = getSourceForRootPath(this.rootPath, name);", "-\t\tchar[] source = findSource(fullName);", "-\t\t\t// root path may just have been a hint: try recomputing it", "-\t\t\tString rootPath = this.computeRootPath();", "-\t\t\tString newFullName;", "-\t\t\tif (rootPath != null && !rootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {", "-\t\t\t\tif (rootPath.endsWith(\"/\")) { //$NON-NLS-1$", "-\t\t\t\t\tnewFullName = rootPath + name;", "-\t\t\t\t} else {", "-\t\t\t\t\tnewFullName = rootPath + '/' + name;", "+\t\t\t/*", "+\t\t\t * We should try all existing root paths. If none works, try to recompute it.", "+\t\t\t * If it still doesn't work, then return null", "+\t\t\t */", "+\t\t\tif (this.rootPaths != null) {", "+\t\t\t\tloop: for (Iterator iterator = this.rootPaths.iterator(); iterator.hasNext(); ) {", "+\t\t\t\t\tString currentRootPath = (String) iterator.next();", "+\t\t\t\t\tif (!currentRootPath.equals(this.rootPath)) {", "+\t\t\t\t\t\tsource = getSourceForRootPath(currentRootPath, name);", "+\t\t\t\t\t\tif (source != null) {", "+\t\t\t\t\t\t\t// remember right root path", "+\t\t\t\t\t\t\tthis.rootPath = currentRootPath;", "+\t\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tnewFullName = name;", "-\t\t\tif (!fullName.equals(newFullName)) {", "-\t\t\t\tsource = this.findSource(newFullName);", "-\t\t\t\tif (source != null) {", "-\t\t\t\t\t// remember right root path", "-\t\t\t\t\tthis.rootPath = rootPath;", "+\t\t\tif (source == null) {", "+\t\t\t\t// Try to recompute it and add the new root path to the rootPaths collection", "+\t\t\t\tString newRootPath = computeRootPath(name);", "+\t\t\t\tif (newRootPath != null) {", "+\t\t\t\t\tif (this.rootPaths == null) {", "+\t\t\t\t\t\tthis.rootPaths = new HashSet();", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.rootPaths.add(newRootPath);", "+\t\t\t\t\tthis.rootPath = newRootPath;", "+\t\t\t\t\tsource = getSourceForRootPath(newRootPath, name);"]}], "num": 11607}
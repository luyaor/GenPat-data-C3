{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a6073b26987b2f050b7763a59664ba01", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b142ce6ea027c4b6dcd432f5892efd20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "commitAfterChange": "8f130374b1740d04a2a1a32967cf4d9130b4bd12", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void analyseCode(ClassScope enclosingClassScope)", "signatureAfterChange": " public void analyseCode(ClassScope enclosingClassScope)", "diff": ["-\t\tinternalAnalyseCode(null, FlowInfo.initial(this.scope.outerMostClassScope().referenceType().maxFieldCount));", "+\t\t// propagate down the max field count", "+\t\tupdateMaxFieldCount();", "+\t\tinternalAnalyseCode(null, FlowInfo.initial(this.maxFieldCount));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c89b85cc3adb6eb2d088981b0cbdc4e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "0f16652d495864a2012fd0fc0ed568e6ea4bc1e1", "commitAfterChange": "6041a9141290a5f24fe2eae74d79755d86c6b388", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate boolean doesNotCompleteNormally()", "signatureAfterChange": "  \tprivate boolean doesNotCompleteNormally()", "diff": ["-\t\treturn this.body.analyseCode(this.scope, ", "+\t\ttry {", "+\t\t\treturn this.body.analyseCode(this.scope, ", "-\t\t\t\t\t\t\t\t\t UnconditionalFlowInfo.fakeInitializedFlowInfo(this.scope.outerMostMethodScope().analysisIndex, this.scope.referenceType().maxFieldCount)) == FlowInfo.DEAD_END; ", "+\t\t\t\t\t\t\t\t\t UnconditionalFlowInfo.fakeInitializedFlowInfo(this.scope.outerMostMethodScope().analysisIndex, this.scope.referenceType().maxFieldCount)) == FlowInfo.DEAD_END;", "+\t\t} catch (RuntimeException e) {", "+\t\t\tthis.scope.problemReporter().lambdaShapeComputationError(this);", "+\t\t\treturn this.valueCompatible;", "+\t\t}"]}], "num": 48812}
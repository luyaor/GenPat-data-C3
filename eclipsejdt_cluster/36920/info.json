{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9e9ed6a8a2e689075ed28c96504b13a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d0f66de693b84b6c5d95b5e94dd0132", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "a4e58088a1010e10b50ef0d8683567f65215eac1", "commitAfterChange": "e58a2ebf19f99fca487e8ddd26a3dd844cc59501", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "  protected void appendNullAnnotation(StringBuffer nameBuffer, CompilerOptions options)", "signatureAfterChange": "  protected void appendNullAnnotation(StringBuffer nameBuffer, CompilerOptions options)", "diff": ["-\t\t// restore applied null annotation from tagBits:", "-\t    if ((this.tagBits & TagBits.AnnotationNonNull) != 0) {", "-\t    \tchar[][] nonNullAnnotationName = options.nonNullAnnotationName;", "-\t\t\tnameBuffer.append('@').append(nonNullAnnotationName[nonNullAnnotationName.length-1]).append(' ');", "-\t    }", "-\t    if ((this.tagBits & TagBits.AnnotationNullable) != 0) {", "-\t    \tchar[][] nullableAnnotationName = options.nullableAnnotationName;", "-\t\t\tnameBuffer.append('@').append(nullableAnnotationName[nullableAnnotationName.length-1]).append(' ');", "-\t    }", "+\t\tif (options.usesNullTypeAnnotations()) {", "+\t\t\tfor (AnnotationBinding annotation : this.typeAnnotations) {", "+\t\t\t\tTypeBinding annotationType = annotation.getAnnotationType();", "+\t\t\t\tif (annotationType.id == TypeIds.T_ConfiguredAnnotationNonNull || annotation.type.id == TypeIds.T_ConfiguredAnnotationNullable) {", "+\t\t\t\t\tnameBuffer.append('@').append(annotationType.shortReadableName()).append(' ');", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\t// restore applied null annotation from tagBits:", "+\t\t    if ((this.tagBits & TagBits.AnnotationNonNull) != 0) {", "+\t\t    \tchar[][] nonNullAnnotationName = options.nonNullAnnotationName;", "+\t\t\t\tnameBuffer.append('@').append(nonNullAnnotationName[nonNullAnnotationName.length-1]).append(' ');", "+\t\t    }", "+\t\t    if ((this.tagBits & TagBits.AnnotationNullable) != 0) {", "+\t\t    \tchar[][] nullableAnnotationName = options.nullableAnnotationName;", "+\t\t\t\tnameBuffer.append('@').append(nullableAnnotationName[nullableAnnotationName.length-1]).append(' ');", "+\t\t    }", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd68c1b2ac64911900744a4cb4f3f9ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "c2e73e92d84b995d792bc11e9e3cc44e31128806", "commitAfterChange": "7530e9811f8e0b012d59fd23237f75cdb4977fd6", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "  private void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding)", "signatureAfterChange": "  private void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding)", "diff": ["-\tif (!this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled)", "-\t\treturn;", "-\tboolean useTypeAnnotations = this.environment.globalOptions.sourceLevel >= ClassFileConstants.JDK1_8;", "-\t// in 1.8 we only need @NonNullByDefault, see below and exit further down.", "-\tboolean explicitNullness = false;", "-\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNullByDefault;", "-\t\t\t\tif (useTypeAnnotations)", "-\t\t\t\t\tmethodBinding.defaultNullness = getNonNullByDefaultValue(annotations[i]);", "-\t\t\t}", "-\t\t\tif (!useTypeAnnotations && !explicitNullness) {", "-\t\t\t\tif (CharOperation.equals(typeName, nonNullAnnotationName)) {", "-\t\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNull;", "-\t\t\t\t\texplicitNullness = true;", "-\t\t\t\t} else if (CharOperation.equals(typeName, nullableAnnotationName)) {", "-\t\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNullable;", "-\t\t\t\t\texplicitNullness = true;", "-\t\t\t\t}", "+\t\t\t\tmethodBinding.defaultNullness = getNonNullByDefaultValue(annotations[i]);", "+\t\t\t\tif (methodBinding.defaultNullness == Binding.NULL_UNSPECIFIED_BY_DEFAULT)", "+\t\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNullUnspecifiedByDefault;", "+\t\t\t\telse if (methodBinding.defaultNullness != 0)", "+\t\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNullByDefault;", "+\t\t\t} else if (CharOperation.equals(typeName, nonNullAnnotationName)) {", "+\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNull;", "+\t\t\t} else if (CharOperation.equals(typeName, nullableAnnotationName)) {", "+\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNullable;", "-", "-\tif (useTypeAnnotations)", "-\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd71ff0e43cb5b76784fd0d4c597c6dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "c2e73e92d84b995d792bc11e9e3cc44e31128806", "commitAfterChange": "7530e9811f8e0b012d59fd23237f75cdb4977fd6", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "  private void evaluateNullAnnotations(long annotationTagBits)", "signatureAfterChange": "  private void evaluateNullAnnotations(long annotationTagBits)", "diff": ["-\tboolean isJdk18 = this.scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8;", "-\tif (isJdk18) {", "+\tboolean usesNullTypeAnnotations = this.scope.environment().usesNullTypeAnnotations();", "+\tif (usesNullTypeAnnotations) {", "-\t\t\t\tcheckRedundantNullnessDefaultRecurse(typeDecl, typeDecl.annotations, this.defaultNullness, isJdk18);", "+\t\t\t\tcheckRedundantNullnessDefaultRecurse(typeDecl, typeDecl.annotations, this.defaultNullness, true);", "-\t\t// transfer nullness info from tagBits to this.nullnessDefaultAnnotation", "+\t\t// transfer nullness info from tagBits to this.defaultNullness", "-\t\tif ((annotationTagBits & TagBits.AnnotationNullUnspecifiedByDefault) != 0)", "+\t\tif ((annotationTagBits & TagBits.AnnotationNullUnspecifiedByDefault) != 0) {", "-\t\telse if ((annotationTagBits & TagBits.AnnotationNonNullByDefault) != 0)", "+\t\t} else if ((annotationTagBits & TagBits.AnnotationNonNullByDefault) != 0) {", "+\t\t} else if (this.defaultNullness != 0) {", "+\t\t\t // NNBD with argument while NN & NU are SE5 annotations, revert to old default & encoding.", "+\t\t\tif (this.defaultNullness == NULL_UNSPECIFIED_BY_DEFAULT) {", "+\t\t\t\tannotationTagBits = TagBits.AnnotationNullUnspecifiedByDefault;", "+\t\t\t\tnewDefaultNullness = NULL_UNSPECIFIED_BY_DEFAULT;", "+\t\t\t} else {", "+\t\t\t\tannotationTagBits = TagBits.AnnotationNonNullByDefault;", "+\t\t\t\tnewDefaultNullness = NONNULL_BY_DEFAULT;", "+\t\t\t}", "+\t\t}"]}], "num": 36920}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c497cab15f4521bafd86e88785b742a1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fb7ec6279928142d8996fd628fffab5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "65b4e15798189e35310112aac16988bcdf7eef0b", "commitAfterChange": "78b182da9e370f6f00f239fd2a2de8309bdf9aac", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": " \t \tprivate void disassemble(IInnerClassesAttribute innerClassesAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": " \t \tprivate void disassemble(IInnerClassesAttribute innerClassesAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["-\t\tfor (int i = 0; i < length - 1; i++) {", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tif (i != 0) {", "+\t\t\t\tbuffer.append(Messages.disassembler_comma);", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);\t\t\t\t", "+\t\t\t}", "-\t\t\tdecodeModifiersForInnerClasses(buffer, accessFlags);", "+\t\t\tdecodeModifiersForInnerClasses(buffer, accessFlags, true);", "-\t\t\t\t.append(Messages.disassembler_closeinnerclassentry) ", "-\t\t\t\t.append(Messages.disassembler_comma); ", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\t\t\t.append(Messages.disassembler_closeinnerclassentry);", "-\t\t// last entry", "-\t\tinnerClassesAttributeEntry = innerClassesAttributeEntries[length - 1];", "-\t\tinnerClassNameIndex = innerClassesAttributeEntry.getInnerClassNameIndex();", "-\t\touterClassNameIndex = innerClassesAttributeEntry.getOuterClassNameIndex();", "-\t\tinnerNameIndex = innerClassesAttributeEntry.getInnerNameIndex();", "-\t\taccessFlags = innerClassesAttributeEntry.getAccessFlags();", "-\t\tbuffer", "-\t\t\t.append(Messages.disassembler_openinnerclassentry) ", "-\t\t\t.append(Messages.disassembler_inner_class_info_name) ", "-\t\t\t.append(Messages.disassembler_constantpoolindex) ", "-\t\t\t.append(innerClassNameIndex);", "-\t\tif (innerClassNameIndex != 0) {", "-\t\t\tbuffer", "-\t\t\t\t.append(Messages.disassembler_space) ", "-\t\t\t\t.append(innerClassesAttributeEntry.getInnerClassName());", "-\t\t}", "-\t\tbuffer", "-\t\t\t.append(Messages.disassembler_comma) ", "-\t\t\t.append(Messages.disassembler_space) ", "-\t\t\t.append(Messages.disassembler_outer_class_info_name) ", "-\t\t\t.append(Messages.disassembler_constantpoolindex) ", "-\t\t\t.append(outerClassNameIndex);", "-\t\tif (outerClassNameIndex != 0) {", "-\t\t\tbuffer\t", "-\t\t\t\t.append(Messages.disassembler_space) ", "-\t\t\t\t.append(innerClassesAttributeEntry.getOuterClassName());", "-\t\t}", "-\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\tdumpTab(tabNumber, buffer);", "-\t\tbuffer.append(Messages.disassembler_space); ", "-\t\tbuffer", "-\t\t\t.append(Messages.disassembler_inner_name) ", "-\t\t\t.append(Messages.disassembler_constantpoolindex) ", "-\t\t\t.append(innerNameIndex);", "-\t\tif (innerNameIndex != 0) {", "-\t\t\tbuffer", "-\t\t\t\t.append(Messages.disassembler_space) ", "-\t\t\t\t.append(innerClassesAttributeEntry.getInnerName());", "-\t\t}", "-\t\tbuffer", "-\t\t\t.append(Messages.disassembler_comma) ", "-\t\t\t.append(Messages.disassembler_space) ", "-\t\t\t.append(Messages.disassembler_inner_accessflags) ", "-\t\t\t.append(accessFlags)", "-\t\t\t.append(Messages.disassembler_space); ", "-\t\tdecodeModifiersForInnerClasses(buffer, accessFlags);", "-\t\tbuffer.append(Messages.disassembler_closeinnerclassentry); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e28e7b7e2567f108d4a77c49015aa36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "def990b8509828ed437909a92c80eeb89428931a", "commitAfterChange": "59f8b1366dc6dc4f5af017fd8d5242b930c185da", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "signatureAfterChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "diff": ["+\t\tfinal int accessFlags = classFileReader.getAccessFlags();", "+\t\tfinal boolean isEnum = (accessFlags & IModifierConstants.ACC_ENUM) != 0;", "-\t\tfinal int accessFlags = classFileReader.getAccessFlags();", "-\t\tif (innerClassesAttribute != null) {", "-\t\t\t// search the right entry", "-\t\t\tIInnerClassesAttributeEntry[] entries = innerClassesAttribute.getInnerClassAttributesEntries();", "-\t\t\tfor (int i = 0, max = entries.length; i < max ; i++) {", "-\t\t\t\tIInnerClassesAttributeEntry entry = entries[i];", "-\t\t\t\tchar[] innerClassName = entry.getInnerClassName();", "-\t\t\t\tif (innerClassName != null) {", "-\t\t\t\t\tif (CharOperation.equals(classFileReader.getClassName(), innerClassName)) {", "-\t\t\t\t\t\tdecodeModifiersForInnerClasses(buffer, entry.getAccessFlags());", "-\t\t\t\t\t\tdecoded = true;", "+\t\tif (isEnum && checkMode(mode, WORKING_COPY)) {", "+\t\t\tdecodeModifiersForType(buffer, accessFlags & IModifierConstants.ACC_PUBLIC);", "+\t\t} else {", "+\t\t\tif (innerClassesAttribute != null) {", "+\t\t\t\t// search the right entry", "+\t\t\t\tIInnerClassesAttributeEntry[] entries = innerClassesAttribute.getInnerClassAttributesEntries();", "+\t\t\t\tfor (int i = 0, max = entries.length; i < max ; i++) {", "+\t\t\t\t\tIInnerClassesAttributeEntry entry = entries[i];", "+\t\t\t\t\tchar[] innerClassName = entry.getInnerClassName();", "+\t\t\t\t\tif (innerClassName != null) {", "+\t\t\t\t\t\tif (CharOperation.equals(classFileReader.getClassName(), innerClassName)) {", "+\t\t\t\t\t\t\tdecodeModifiersForInnerClasses(buffer, entry.getAccessFlags());", "+\t\t\t\t\t\t\tdecoded = true;", "+\t\t\t\t\t\t}", "-\t\t}", "-\t\tif (!decoded) {", "-\t\t\tdecodeModifiersForType(buffer, accessFlags);", "-\t\t\tif (isSynthetic(classFileReader)) {", "-\t\t\t\tbuffer.append(\"synthetic\"); //$NON-NLS-1$", "-\t\t\t\tbuffer.append(Messages.disassembler_space); ", "+\t\t\tif (!decoded) {", "+\t\t\t\tdecodeModifiersForType(buffer, accessFlags);", "+\t\t\t\tif (isSynthetic(classFileReader)) {", "+\t\t\t\t\tbuffer.append(\"synthetic\"); //$NON-NLS-1$", "+\t\t\t\t\tbuffer.append(Messages.disassembler_space); ", "+\t\t\t\t}", "-\t\tif ((accessFlags & IModifierConstants.ACC_ENUM) != 0) {", "+\t\tif (isEnum) {", "-\t\t\tif (!isJavaLangObject(superclassName)) {", "+\t\t\tif (!isJavaLangObject(superclassName) && !isEnum) {", "-\t\tdisassembleTypeMembers(classFileReader, className, buffer, lineSeparator, 1, mode);", "+\t\tdisassembleTypeMembers(classFileReader, className, buffer, lineSeparator, 1, mode, isEnum);"]}], "num": 38724}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6660543c5391995ce9e30a35f30a8a1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0375af14cb24fccf568ff03c20f13423", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "cc8a107a5198e70183302629cda10fc958070914", "commitAfterChange": "f3976bead49aa4fe35942cb0c47266733b624403", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t\t\t\t\t\tif (((FieldBinding)binding).original().declaringClass == this.actualReceiverType.erasure()) {", "+\t\t\t\t\t\t\tif (((FieldBinding)binding).original().declaringClass == this.actualReceiverType.erasure()", "+\t\t\t\t\t\t\t\t\t&& ((implicitConversion & TypeIds.UNBOXING) == 0)) {", "-\t\t\t\t\t\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);\t\t\t", "+\t\t\t\t\t\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);", "+\t\t\t\t\t\t\tif ((implicitConversion & TypeIds.UNBOXING) != 0) {", "+\t\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!valueRequired) {", "+\t\t\t\t\t\tif (!valueRequired && ((implicitConversion & TypeIds.UNBOXING) == 0)) {", "+\t\t\t\t\t} else if ((implicitConversion & TypeIds.UNBOXING) != 0) {", "+", "+\t\t\t\t\t\t// outer local?", "+\t\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\t\t\t// outer local can be reached either through a synthetic arg or a synthetic field", "+\t\t\t\t\t\t\tVariableBinding[] path = currentScope.getEmulationPath(localBinding);", "+\t\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, localBinding, currentScope);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// regular local variable read", "+\t\t\t\t\t\t\tcodeStream.load(localBinding);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\t\t\tif ((localBinding.type == TypeBinding.LONG) || (localBinding.type == TypeBinding.DOUBLE)) {", "+\t\t\t\t\t\t\tcodeStream.pop2();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0403df5adc65684fc45eb768162fff52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 298, "methodNumberAfterChange": 265, "signatureBeforeChange": " protected void consumeInterfaceMethodDefault()", "signatureAfterChange": " protected void consumePushCombineModifiers()", "diff": ["+protected void consumePushCombineModifiers() {", "+\t// ModifiersWithDefault ::= Modifiersopt 'default' Modifiersopt'", "+\t// int stack on entry : ... Modifiers, ModifiersSourceStart, defaultSourceStart, defaultSourceEnd, Modifiers', Modifiers'SourceStart <<--- intPtr", "+\t// int stack on exit : ... combinedModifiers, combinedModifiersSourceStart <<--- intPtr", "+\t", "+\tthis.intPtr--; // pop modifiers'SourceStart, real location is with earlier block", "+\tint newModifiers = this.intStack[this.intPtr--] | ExtraCompilerModifiers.AccDefaultMethod; // pop modifiers", "+\tthis.intPtr -= 2; // pop location of 'default' keyword", "+\t", "+\tif ((this.intStack[this.intPtr - 1] & newModifiers) != 0) { // duplicate modifier(s) ?", "+\t\tnewModifiers |= ExtraCompilerModifiers.AccAlternateModifierProblem;", "+\t}", "+\tthis.intStack[this.intPtr - 1] |= newModifiers; // merge them in place", "+\t// Also fix number of annotations-modifiers:", "+\tthis.expressionLengthStack[this.expressionLengthPtr - 1] += this.expressionLengthStack[this.expressionLengthPtr--];", "+\tif (this.currentElement != null && this.annotationRecoveryActivated) {", "+\t\tthis.currentElement.addModifier(newModifiers, this.intStack[this.intPtr]);", "+\t}", "+}", "-}", "-protected void consumeInterfaceMethodDefault() {", "-\t// PushDefault ::= $empty", "-\t// Shift method co-ordinates past the default keyword.", "-\tAbstractMethodDeclaration md = (AbstractMethodDeclaration) this.astStack[this.astPtr];", "-\tmd.bodyStart = this.scanner.currentPosition;", "-\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ecc76bc2f454c99c61306e5ef75de2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayTypeReference.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic StringBuffer printExpression(int indent, StringBuffer output)", "signatureAfterChange": "  \tpublic StringBuffer printExpression(int indent, StringBuffer output)", "diff": ["+\t\t\t\tif (this.annotationsOnDimensions != null && this.annotationsOnDimensions[i] != null) {", "+\t\t\t\t\toutput.append(' ');", "+\t\t\t\t\tprintAnnotations(this.annotationsOnDimensions[i], output);", "+\t\t\t\t\toutput.append(' ');", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (this.annotationsOnDimensions != null && this.annotationsOnDimensions[this.dimensions - 1] != null) {", "+\t\t\t\toutput.append(' ');", "+\t\t\t\tprintAnnotations(this.annotationsOnDimensions[this.dimensions - 1], output);", "+\t\t\t\toutput.append(' ');", "+\t\t\t\tif (this.annotationsOnDimensions != null && this.annotationsOnDimensions[i] != null) {", "+\t\t\t\t\toutput.append(\" \"); //$NON-NLS-1$", "+\t\t\t\t\tprintAnnotations(this.annotationsOnDimensions[i], output);", "+\t\t\t\t\toutput.append(\" \"); //$NON-NLS-1$", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aaa4dcb92a6287d252928257e3d414d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayQualifiedTypeReference.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic StringBuffer printExpression(int indent, StringBuffer output)", "signatureAfterChange": "  \tpublic StringBuffer printExpression(int indent, StringBuffer output)", "diff": ["+", "+\t\t\t\tif (this.annotationsOnDimensions != null && this.annotationsOnDimensions[i] != null) {", "+\t\t\t\t\toutput.append(' ');", "+\t\t\t\t\tprintAnnotations(this.annotationsOnDimensions[i], output);", "+\t\t\t\t\toutput.append(' ');", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (this.annotationsOnDimensions != null && this.annotationsOnDimensions[this.dimensions - 1] != null) {", "+\t\t\t\toutput.append(' ');", "+\t\t\t\tprintAnnotations(this.annotationsOnDimensions[this.dimensions - 1], output);", "+\t\t\t\toutput.append(' ');", "+\t\t\t\tif (this.annotationsOnDimensions != null && this.annotationsOnDimensions[i] != null) {", "+\t\t\t\t\toutput.append(\" \"); //$NON-NLS-1$", "+\t\t\t\t\tprintAnnotations(this.annotationsOnDimensions[i], output);", "+\t\t\t\t\toutput.append(\" \"); //$NON-NLS-1$", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7a10658ba518685710d4d8a21c10cbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredType.java", "commitBeforeChange": "0534618c17c0b5f6c361eb5acf9c22731255984f", "commitAfterChange": "d85ef445439a7932d1fe7c7dafa9bf16e2d2dd51", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public TypeDeclaration updatedTypeDeclaration()", "signatureAfterChange": " public TypeDeclaration updatedTypeDeclaration()", "diff": ["-", "+\tint lastEnd = typeDeclaration.bodyStart;", "+\t\tif(memberTypeDeclarations[memberTypeDeclarations.length - 1].declarationSourceEnd > lastEnd) {", "+\t\t\tlastEnd = memberTypeDeclarations[memberTypeDeclarations.length - 1].declarationSourceEnd;", "+\t\t}", "+\t\tif(fieldDeclarations[fieldDeclarations.length - 1].declarationSourceEnd > lastEnd) {", "+\t\t\tlastEnd = fieldDeclarations[fieldDeclarations.length - 1].declarationSourceEnd;", "+\t\t}", "+\t\tif(methodDeclarations[methodDeclarations.length - 1].declarationSourceEnd > lastEnd) {", "+\t\t\tlastEnd = methodDeclarations[methodDeclarations.length - 1].declarationSourceEnd;", "+\t\t}", "+\tif(typeDeclaration.declarationSourceEnd == 0) {", "+\t\ttypeDeclaration.declarationSourceEnd = lastEnd;", "+\t\ttypeDeclaration.bodyEnd = lastEnd;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e77b15cb005a8ff95af99df9330d3dec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatter.java", "commitBeforeChange": "e6520c1e77e2f531562a5ecb5b56ab768c03d04f", "commitAfterChange": "c20a93f1a4de74304d3924bd744f9738c84aaf03", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \tprivate void flushBuffer()", "signatureAfterChange": "\r \tprivate void flushBuffer()", "diff": ["-\t\tupdateMappedPositions(scanner.startPosition);\t\r", "+\t\tint scannerSourceLength = scanner.source.length;\r", "+\t\tif (scanner.source[scannerSourceLength - 1] == '\\n' && \r", "+\t\t\tscanner.source[scannerSourceLength - 2] == '\\r') {\r", "+\t\t\t\tformattedSource.append(options.lineSeparatorSequence);\r", "+\t\t\t\tincreaseGlobalDelta(options.lineSeparatorSequence.length - 2);\r", "+\t\t} else if (scanner.source[scannerSourceLength - 1] == '\\n') {\r", "+\t\t\tformattedSource.append(options.lineSeparatorSequence);\r", "+\t\t\tincreaseGlobalDelta(options.lineSeparatorSequence.length - 1);\r", "+\t\t} else if (scanner.source[scannerSourceLength - 1] == '\\r') {\r", "+\t\t\tformattedSource.append(options.lineSeparatorSequence);\r", "+\t\t\tincreaseGlobalDelta(options.lineSeparatorSequence.length - 1);\r", "+\t\t}\r", "+\t\tupdateMappedPositions(scanner.startPosition);\r"]}], "num": 21571}
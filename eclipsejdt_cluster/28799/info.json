{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f43f97568577ef8683748edf3ce8c71e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07faa91362bec9b43ae3580eeebff9f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocAllocationExpression.java", "commitBeforeChange": "bd655e292f27be12899d4ef9049b7c8c31255fe5", "commitAfterChange": "b5bed3972356e8be51cd606b69a9491540b97af1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": "  \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\t} else if (this.binding instanceof ParameterizedMethodBinding) {", "-\t\t\tif (allocationType.isGenericType() || allocationType.isRawType() || allocationType.isParameterizedType()) {", "-\t\t\t\tMethodBinding exactMethod = scope.findExactMethod(allocationType, this.binding.selector, argumentTypes, this);", "-\t\t\t\tif (exactMethod == null) {", "-\t\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.binding.selector, argumentTypes, ProblemReasons.NotFound);", "-\t\t\t\t\tscope.problemReporter().javadocInvalidConstructor(this, problem, scope.getDeclarationModifiers());", "-\t\t\t\t}", "-\t\t\t}", "+//\t\t} else if (this.binding instanceof ParameterizedMethodBinding) {", "+//\t\t\tif (allocationType.isGenericType() || allocationType.isRawType() || allocationType.isParameterizedType()) {", "+//\t\t\t\tMethodBinding exactMethod = scope.getConstructor(allocationType, argumentTypes, this);", "+//\t\t\t\tif (exactMethod == null) {", "+//\t\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.binding.selector, argumentTypes, ProblemReasons.NotFound);", "+//\t\t\t\t\tscope.problemReporter().javadocInvalidConstructor(this, problem, scope.getDeclarationModifiers());", "+//\t\t\t\t}", "+//\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4af85a1c29c0e5e26a6071a31935ed6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocAllocationExpression.java", "commitBeforeChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "commitAfterChange": "2b6f2c5ab69f56c08d444fe8672c8fe1596db9c2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": "  \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t */", "-", "+\t", "-", "+\t", "+\t\tboolean hasTypeVarArgs = false;", "+\t\t\t\t} else if (!hasTypeVarArgs) {", "+\t\t\t\t\thasTypeVarArgs = argumentTypes[i].isTypeVariable();", "-", "+\t", "+\t\tthis.resolvedType = scope.convertToRawType(this.type.resolvedType);", "-", "+\t", "+\t\t} else if (hasTypeVarArgs) {", "+\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.binding.selector, argumentTypes, ProblemReasons.NotFound);", "+\t\t\tscope.problemReporter().javadocInvalidConstructor(this, problem, scope.getDeclarationModifiers());", "+\t\t} else if (this.binding instanceof ParameterizedMethodBinding) {", "+\t\t\tif (allocationType.isGenericType() || allocationType.isRawType() || allocationType.isParameterizedType()) {", "+\t\t\t\tMethodBinding exactMethod = scope.findExactMethod(allocationType, this.binding.selector, argumentTypes, this);", "+\t\t\t\tif (exactMethod == null) {", "+\t\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.binding.selector, argumentTypes, ProblemReasons.NotFound);", "+\t\t\t\t\tscope.problemReporter().javadocInvalidConstructor(this, problem, scope.getDeclarationModifiers());", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb4f8a7ab0fe34074098a32e10a80439", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocMessageSend.java", "commitBeforeChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "commitAfterChange": "2b6f2c5ab69f56c08d444fe8672c8fe1596db9c2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["+\t\t", "+\t\tboolean hasTypeVarArgs = false;", "+\t\t\t\t} else if (!hasTypeVarArgs) {", "+\t\t\t\t\thasTypeVarArgs = argumentTypes[i].isTypeVariable();", "+\t\tthis.actualReceiverType = scope.convertToRawType(this.receiver.resolvedType);", "+\t\t} else if (hasTypeVarArgs) {", "+\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.selector, argumentTypes, ProblemReasons.NotFound);", "+\t\t\tscope.problemReporter().javadocInvalidMethod(this, problem, scope.getDeclarationModifiers());", "+\t\t} else if (this.binding instanceof ParameterizedMethodBinding && this.actualReceiverType instanceof ReferenceBinding) {", "+\t\t\tReferenceBinding refBinding = (ReferenceBinding) this.actualReceiverType;", "+\t\t\tif (refBinding.isGenericType() || refBinding.isRawType() || refBinding.isParameterizedType()) {", "+\t\t\t\tMethodBinding exactMethod = scope.findExactMethod(refBinding, this.selector, argumentTypes, this);", "+\t\t\t\tif (exactMethod == null) {", "+\t\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.selector, argumentTypes, ProblemReasons.NotFound);", "+\t\t\t\t\tscope.problemReporter().javadocInvalidMethod(this, problem, scope.getDeclarationModifiers());", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 28799}
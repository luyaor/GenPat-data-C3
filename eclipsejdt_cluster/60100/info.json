{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba313d040cb690d2bd20cff900c1cc5a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ce2f03213269bd2a9f4d2c41f1fa788", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java", "commitBeforeChange": "fffe0226b316a10993369d727f8c3eea5e70ad6e", "commitAfterChange": "b9a24a44a980bf3229c906639157a97b45b07dd7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate Object[] computeNonJavaResources(JavaProject project)", "signatureAfterChange": " \tprivate Object[] computeNonJavaResources(JavaProject project)", "diff": ["+\t\tIPath projectOutput = null;", "-\t\t\tclasspath = project.getExpandedClasspath(true);", "+\t\t\tclasspath = project.getResolvedClasspath(true/*ignore unresolved variable*/);", "-\t\t\tbinIsProject = projectPath.equals(project.getOutputLocation());", "+\t\t\tprojectOutput = project.getOutputLocation();", "+\t\t\tbinIsProject = projectPath.equals(projectOutput);", "-\t\t\t\t\t\t// ignore this file if referred to on the build path", "-\t\t\t\t\t\tif (project.findPackageFragmentRoot0(resFullPath) == null) {", "-\t\t\t\t\t\t\t// ignore .java file if src == project", "-\t\t\t\t\t\t\tif (srcIsProject ", "-\t\t\t\t\t\t\t\t&& Util.isValidCompilationUnitName(resName)", "-\t\t\t\t\t\t\t\t&& !Util.isExcluded(res, exclusionPatterns)) {", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// ignore .class file if bin == project", "-\t\t\t\t\t\t\tif (binIsProject && Util.isValidClassFileName(resName)) {", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// else add non java resource", "-\t\t\t\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "-\t\t\t\t\t\t\t\t// resize", "-\t\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\t\tnonJavaResources,", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\t(nonJavaResources = new IResource[nonJavaResourcesCounter * 2]),", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tnonJavaResourcesCounter);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = res;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// ignore a jar file on the classpath", "+\t\t\t\t\t\tif (Util.isArchiveFileName(resName) && this.isClasspathEntryOrOutputLocation(resFullPath, classpath, projectOutput)) {", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t// ignore .java file if src == project", "+\t\t\t\t\t\tif (srcIsProject ", "+\t\t\t\t\t\t\t&& Util.isValidCompilationUnitName(resName)", "+\t\t\t\t\t\t\t&& !Util.isExcluded(res, exclusionPatterns)) {", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// ignore .class file if bin == project", "+\t\t\t\t\t\tif (binIsProject && Util.isValidClassFileName(resName)) {", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// else add non java resource", "+\t\t\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "+\t\t\t\t\t\t\t// resize", "+\t\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\t\tnonJavaResources,", "+\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t(nonJavaResources = new IResource[nonJavaResourcesCounter * 2]),", "+\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\tnonJavaResourcesCounter);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = res;", "-\t\t\t\t\t\tif (!this.isOutputLocation(resFullPath, classpath, project.getOutputLocation())", "-\t\t\t\t\t\t\t&& project.findPackageFragmentRoot0(resFullPath) == null", "-\t\t\t\t\t\t\t&& project.findPackageFragment0(resFullPath) == null) {", "-\t\t\t\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "-\t\t\t\t\t\t\t\t// resize", "-\t\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\t\tnonJavaResources,", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\t(nonJavaResources = new IResource[nonJavaResourcesCounter * 2]),", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tnonJavaResourcesCounter);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = res;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// ignore folders on the classpath or that correspond to an output location", "+\t\t\t\t\t\tif (this.isClasspathEntryOrOutputLocation(resFullPath, classpath, projectOutput)) {", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t// else add non java resource", "+\t\t\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "+\t\t\t\t\t\t\t// resize", "+\t\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\t\tnonJavaResources,", "+\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t(nonJavaResources = new IResource[nonJavaResourcesCounter * 2]),", "+\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\tnonJavaResourcesCounter);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = res;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a3675f4e10a80c3cb00f0891c3eb6a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "40c99687ccd3cd2f32c7182f6dd3a3815c599017", "commitAfterChange": "2e79ccb3e74d7d6d092288c2beec68b5a73c3ab5", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["+\t\tboolean foundProblemVisible = false;", "-\t\t\t\t\t\t\t\t\t\tif (foundProblem != null && foundProblem.problemId() != ProblemReasons.NotVisible)", "+\t\t\t\t\t\t\t\t\t\tif (foundProblemVisible) {", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (foundProblem == null || (foundProblem.problemId() == ProblemReasons.NotVisible && methodBinding.problemId() == ProblemReasons.NotFound))", "+\t\t\t\t\t\t\t\t\tif (foundProblem == null) {", "+\t\t\t\t\t\t\t\t\t} ", "+\t\t\t\t\t\t\t\t\tif (! foundProblemVisible && methodBinding.problemId() == ProblemReasons.NotFound) {", "+\t\t\t\t\t\t\t\t\t\tMethodBinding closestMatch = ((ProblemMethodBinding) methodBinding).closestMatch;", "+\t\t\t\t\t\t\t\t\t\tif (closestMatch != null && closestMatch.canBeSeenBy(receiverType, invocationSite, this)) {", "+\t\t\t\t\t\t\t\t\t\t\tfoundProblem = methodBinding; // hold onto the first not visible/found error and keep the second not found if first is not visible", "+\t\t\t\t\t\t\t\t\t\t\tfoundProblemVisible = true;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\tif (foundProblem.problemId() == ProblemReasons.NotFound) {", "-\t\t\t\t\tMethodBinding closestMatch = ((ProblemMethodBinding) foundProblem).closestMatch;", "-\t\t\t\t\tif (closestMatch != null && closestMatch.canBeSeenBy(invocationSite, this))", "-\t\t\t\t\t\treturn foundProblem; // visible method selectors take precedence", "+\t\t\t\tif (foundProblem.problemId() == ProblemReasons.NotFound && foundProblemVisible) {", "+\t\t\t\t\treturn foundProblem; // visible method selectors take precedence"]}], "num": 60100}
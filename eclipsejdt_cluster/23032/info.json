{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ec458a71d6200eed0a4169e5efd110d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27ebd5f1a401862f558b468a782e9f10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "928aec179e1479276b2375bc65b872f33f20053c", "commitAfterChange": "0fa533ec571379378fe7a91d47a48767af0bd523", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tprivate TypeBinding lowerUpperBound(TypeBinding[] types, List lubStack)", "signatureAfterChange": " \tprivate TypeBinding lowerUpperBound(TypeBinding[] types, List lubStack)", "diff": ["-\t\tint count = 0, last = -1;", "+\t\tint count = 0;", "-\t\t\tlast = i;", "-\t\t\tcount++;", "-\t\t\tmecs[i] = leastContainingInvocation(mec, (Set)invocations.get(mec), lubStack);", "-\t\t\tif (mec.isClass()) firstBound = mecs[i];", "+\t\t\tmec = leastContainingInvocation(mec, (Set)invocations.get(mec), lubStack);", "+\t\t\tif (mec == null) return null;", "+\t\t\tif (mec.isClass()) firstBound = mec;", "+\t\t\tmecs[count++] = mec; // recompact them to the front", "+", "-\t\t\tcase 1 : return mecs[last];", "+\t\t\tcase 1 : return mecs[0];", "+\t\t\tcase 2 : ", "+\t\t\t\tif (mecs[1].id == T_JavaLangObject) return mecs[0];", "+\t\t\t\tif (mecs[0].id == T_JavaLangObject) return mecs[1];", "-\t\tfor (int i = 0; i < length; i++) {", "+\t\tfor (int i = 0; i < count; i++) {", "-\t\t\tif (mec == null) continue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7dd1eb52550ee8377d92d54cdc1405c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "signatureAfterChange": " \tpublic MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "diff": ["-\t\tint selectorLength = selector.length;", "-\t\t\tnextMethod : for (int m = methods.length; --m >= 0;) {", "-\t\t\t\tMethodBinding method = methods[m];", "-\t\t\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "+\t\t\tlong range;", "+\t\t\tif ((range = ReferenceBinding.binarySearch(selector, this.methods)) >= 0) {", "+\t\t\t\tnextMethod: for (int imethod = (int)range, end = (int)(range >> 32); imethod <= end; imethod++) {", "+\t\t\t\t\tMethodBinding method = methods[imethod];\t\t\t", "-\t\t\t\t\t\tfor (int p = 0; p < argCount; p++)", "-\t\t\t\t\t\t\tif (toMatch[p] != argumentTypes[p])", "+\t\t\t\t\t\tfor (int iarg = 0; iarg < argCount; iarg++)", "+\t\t\t\t\t\t\tif (toMatch[iarg] != argumentTypes[iarg])"]}], "num": 23032}
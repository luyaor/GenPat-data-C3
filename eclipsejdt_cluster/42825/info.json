{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aaacf589cccfb8e6d838bd0488f74f84", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a9f911bfe0a7850e13e5136a9acbbba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "6665973e9a36116a8cb24b7143317e47a83a98f0", "commitAfterChange": "305123b230bcfd1f733969b7cd2c687b75857ff0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "signatureAfterChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "diff": ["+\t\tint rightStatus = this.right.nullStatus(flowInfo);", "+\t\tint leftStatus = this.left.nullStatus(flowInfo);", "+\t\t// check if either method is annotated @NonNull and compared to null:", "+\t\tif (leftStatus == FlowInfo.NON_NULL && rightStatus == FlowInfo.NULL) {", "+\t\t\tif (this.left instanceof MessageSend) { ", "+\t\t\t\tscope.problemReporter().messageSendRedundantCheckOnNonNull(((MessageSend) this.left).binding, this.left);", "+\t\t\t}", "+\t\t\t// TODO: handle all kinds of expressions (cf. also https://bugs.eclipse.org/364326)", "+\t\t} else if (leftStatus == FlowInfo.NULL && rightStatus == FlowInfo.NON_NULL) {", "+\t\t\tif (this.right instanceof MessageSend) {", "+\t\t\t\tscope.problemReporter().messageSendRedundantCheckOnNonNull(((MessageSend) this.right).binding, this.right);", "+\t\t\t}", "+\t\t\t// TODO: handle all kinds of expressions (cf. also https://bugs.eclipse.org/364326)", "+\t\t}", "-\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, this.right.nullStatus(flowInfo), this.left);", "+\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, rightStatus, this.left);", "-\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, this.left.nullStatus(flowInfo), this.right);", "+\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, leftStatus, this.right);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a25697f701376fa60d53a6a57c35e293", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "7a427b535373cc1f9194a5ea21753da0d79460d2", "commitAfterChange": "c9dd851a757195fe684b1a5b7f8f16cc8d3ff375", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void complainOnDeferredNullChecks(BlockScope scope, FlowInfo flowInfo)", "signatureAfterChange": " public void complainOnDeferredNullChecks(BlockScope scope, FlowInfo callerFlowInfo)", "diff": ["-public void complainOnDeferredNullChecks(BlockScope scope, FlowInfo flowInfo) {", "-\tfor (int i = 0 ; i < this.innerFlowContextsNb ; i++) {", "+public void complainOnDeferredNullChecks(BlockScope scope, FlowInfo callerFlowInfo) {", "+\tfor (int i = 0 ; i < this.innerFlowContextsCount ; i++) {", "-\tthis.innerFlowContextsNb = 0;", "-\tflowInfo = this.upstreamNullFlowInfo.", "-\t\taddPotentialNullInfoFrom(", "-\t\t\tflowInfo.unconditionalInitsWithoutSideEffect());", "+\tthis.innerFlowContextsCount = 0;", "+\tUnconditionalFlowInfo flowInfo = this.upstreamNullFlowInfo.", "+\t\taddPotentialNullInfoFrom(callerFlowInfo.unconditionalInitsWithoutSideEffect());", "+\t// propagate breaks", "+\tfor (int i = 0; i < this.breakTargetsCount; i++) {", "+\t\tthis.breakTargetContexts[i].initsOnBreak.addPotentialNullInfoFrom(flowInfo);", "+\t}"]}], "num": 42825}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6bb9c776a559b16dd12ceb1101724525", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ada8e59cb483eca2477f346f3c74bd7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "8a0b8147f0cecac2ce3556609ced767532ecf02f", "commitAfterChange": "f7ac9a023a19399b6d2bc4bf79cc66ebc7cf056e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate void verifyTypeReference(Expression reference, Expression typeReference, Scope scope, boolean source15, ReferenceBinding resolvedType, int modifiers)", "signatureAfterChange": "  \tprivate void verifyTypeReference(Expression reference, Expression typeReference, Scope scope, boolean source15, ReferenceBinding resolvedType, int modifiers)", "diff": ["-", "+\t\t\t", "-\t\t\t\tint depth = 0;", "+\t\t\t\t// rebuild and store (in reverse order) compound name to handle embedded inner class", "+\t\t\t\tint packageLength = topLevelType.fPackage.compoundName.length;", "+\t\t\t\tint depth = resolvedType.depth();", "+\t\t\t\tint idx = depth + packageLength;", "+\t\t\t\tchar[][] computedCompoundName = new char[idx+1][];", "+\t\t\t\tcomputedCompoundName[idx] = topLevelType.sourceName;", "-\t\t\t\t\tdepth++;", "+\t\t\t\t\tcomputedCompoundName[--idx] = topLevelType.sourceName;", "+\t\t\t\t", "+\t\t\t\t// add package information", "+\t\t\t\tfor (int i = packageLength; --i >= 0;) {", "+\t\t\t\t\tcomputedCompoundName[--idx] = topLevelType.fPackage.compoundName[i];", "+\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tif (scopeModifiers == -1) scopeModifiers = scope.getDeclarationModifiers();", "-\t\t\t\t\t\t\tscope.problemReporter().javadocInvalidMemberTypeQualification(typeReference.sourceStart, typeReference.sourceEnd, scopeModifiers);", "-\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t// search for corresponding import", "+\t\t\t\t\t\t\tboolean hasValidImport = false;", "+\t\t\t\t\t\t\tif (source15) {", "+\t\t\t\t\t\t\t\tCompilationUnitScope unitScope = topLevelScope.compilationUnitScope();", "+\t\t\t\t\t\t\t\tImportBinding[] imports = unitScope.imports;", "+\t\t\t\t\t\t\t\tint length = imports == null ? 0 : imports.length;", "+\t\t\t\t\t\t\t\tmainLoop: for (int i=0; i<length; i++) {", "+\t\t\t\t\t\t\t\t\tchar[][] compoundName = imports[i].compoundName;", "+\t\t\t\t\t\t\t\t\tint compoundNameLength = compoundName.length;", "+\t\t\t\t\t\t\t\t\tif ((imports[i].onDemand && compoundNameLength == computedCompoundName.length-1) ||", "+\t\t\t\t\t\t\t\t\t\t(compoundNameLength == computedCompoundName.length))", "+\t\t\t\t\t\t\t\t\t{", "+\t\t\t\t\t\t\t\t\t\tfor (int j = compoundNameLength; --j >= 0;) {", "+\t\t\t\t\t\t\t\t\t\t\tif (CharOperation.equals(imports[i].compoundName[j], computedCompoundName[j])) {", "+\t\t\t\t\t\t\t\t\t\t\t\tif (j == 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\thasValidImport = true;", "+\t\t\t\t\t\t\t\t\t\t\t\t\tbreak mainLoop;", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;\t", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (!hasValidImport) {", "+\t\t\t\t\t\t\t\t\tif (scopeModifiers == -1) scopeModifiers = scope.getDeclarationModifiers();", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().javadocInvalidMemberTypeQualification(typeReference.sourceStart, typeReference.sourceEnd, scopeModifiers);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (scopeModifiers == -1) scopeModifiers = scope.getDeclarationModifiers();", "+\t\t\t\t\t\t\t\tscope.problemReporter().javadocInvalidMemberTypeQualification(typeReference.sourceStart, typeReference.sourceEnd, scopeModifiers);", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcd437a47abe81afa001f73c413b8661", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprivate void verifyTypeReference(Expression reference, Scope scope, boolean source15, ReferenceBinding resolvedType)", "signatureAfterChange": "  \tprivate void verifyTypeReference(Expression reference, Expression typeReference, Scope scope, boolean source15, ReferenceBinding resolvedType, int modifiers)", "diff": ["-\tprivate void verifyTypeReference(Expression reference, Scope scope, boolean source15, ReferenceBinding resolvedType) {", "+\tprivate void verifyTypeReference(Expression reference, Expression typeReference, Scope scope, boolean source15, ReferenceBinding resolvedType, int modifiers) {", "+", "+\t\t\t// reference must have enough visibility to be used", "+\t\t\tif (!canBeSeen(scope.problemReporter().options.reportInvalidJavadocTagsVisibility, modifiers)) {", "+//\t\t\t\tif (scopeModifiers == -1) scopeModifiers = scope.getDeclarationModifiers();", "+\t\t\t\tscope.problemReporter().javadocHiddenReference(typeReference.sourceStart, reference.sourceEnd, scope, modifiers);", "+\t\t\t\treturn;", "+\t\t\t}", "+", "+\t\t\t// type reference must have enough visibility to be used", "+\t\t\tif (reference != typeReference) {", "+\t\t\t\tif (!canBeSeen(scope.problemReporter().options.reportInvalidJavadocTagsVisibility, resolvedType.modifiers)) {", "+//\t\t\t\t\tif (scopeModifiers == -1) scopeModifiers = scope.getDeclarationModifiers();", "+\t\t\t\t\tscope.problemReporter().javadocHiddenReference(typeReference.sourceStart, typeReference.sourceEnd, scope, resolvedType.modifiers);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t\t\tif (reference instanceof JavadocSingleTypeReference) {", "+\t\t\t\t\tif (typeReference instanceof JavadocSingleTypeReference) {", "-\t\t\t\t\t\t\tscope.problemReporter().javadocInvalidMemberTypeQualification(reference.sourceStart, reference.sourceEnd, scopeModifiers);", "+\t\t\t\t\t\t\tscope.problemReporter().javadocInvalidMemberTypeQualification(typeReference.sourceStart, typeReference.sourceEnd, scopeModifiers);", "+\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t} else if (reference instanceof JavadocQualifiedTypeReference) {", "-\t\t\t\t\t\tJavadocQualifiedTypeReference qualifiedTypeReference = (JavadocQualifiedTypeReference) reference;", "+\t\t\t\t\t}", "+\t\t\t\t\t/*", "+\t\t\t\t\tif (typeReference instanceof JavadocQualifiedTypeReference) {", "+\t\t\t\t\t\tJavadocQualifiedTypeReference qualifiedTypeReference = (JavadocQualifiedTypeReference) typeReference;", "-\t\t\t\t\t\t\tscope.problemReporter().javadocInvalidMemberTypeQualification(reference.sourceStart, reference.sourceEnd, scopeModifiers);", "+\t\t\t\t\t\t\tscope.problemReporter().javadocInvalidMemberTypeQualification(typeReference.sourceStart, typeReference.sourceEnd, scopeModifiers);", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t*/", "-\t\t\t}", "-", "-\t\t\t// reference must have enough visibility to be used", "-\t\t\tif (!canBeSeen(scope.problemReporter().options.reportInvalidJavadocTagsVisibility, resolvedType)) {", "-\t\t\t\tif (scopeModifiers == -1) scopeModifiers = scope.getDeclarationModifiers();", "-\t\t\t\tscope.problemReporter().javadocNotVisibleReference(reference.sourceStart, reference.sourceEnd, scopeModifiers);"]}], "num": 48867}
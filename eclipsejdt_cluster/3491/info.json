{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98901ffb7cafa9effa11880b5df5950f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faaedc14acac21bdea40a1e1c99b22d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest.java", "commitBeforeChange": "1666c32b249d36aa9547f4f66f511c5bb00d3d63", "commitAfterChange": "4e6bb96b0e120539a45cc4860f508bf12e097d37", "methodNumberBeforeChange": 162, "methodNumberAfterChange": 162, "signatureBeforeChange": " public void testBug453253()", "signatureAfterChange": " public void testBug454644()", "diff": ["-public void testBug453253() {", "+public void testBug454644() {", "-\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in example\\\\CollectionFactory.java (at line 42)\\n\" + ", "-\t\t\t\"\t@SuppressWarnings({ \\\"unchecked\\\", \\\"cast\\\" })\\n\" + ", "-\t\t\t\"\t                                 ^^^^^^\\n\" + ", "-\t\t\t\"Unnecessary @SuppressWarnings(\\\"cast\\\")\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in example\\\\CollectionFactory.java (at line 55)\\n\" + ", "-\t\t\t\"\treturn EnumSet.copyOf((EnumSet) collection);\\n\" + ", "-\t\t\t\"\t                       ^^^^^^^\\n\" + ", "-\t\t\t\"EnumSet is a raw type. References to generic type EnumSet<E> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in example\\\\CollectionFactory.java (at line 87)\\n\" + ", "-\t\t\t\"\treturn EnumSet.noneOf((Class) elementType);\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation noneOf(Class) of the generic method noneOf(Class<E>) of type EnumSet\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in example\\\\CollectionFactory.java (at line 87)\\n\" + ", "-\t\t\t\"\treturn EnumSet.noneOf((Class) elementType);\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The expression of type EnumSet needs unchecked conversion to conform to Collection<E>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. WARNING in example\\\\CollectionFactory.java (at line 87)\\n\" + ", "-\t\t\t\"\treturn EnumSet.noneOf((Class) elementType);\\n\" + ", "-\t\t\t\"\t                      ^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<E>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"6. WARNING in example\\\\CollectionFactory.java (at line 87)\\n\" + ", "-\t\t\t\"\treturn EnumSet.noneOf((Class) elementType);\\n\" + ", "-\t\t\t\"\t                       ^^^^^\\n\" + ", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"7. WARNING in example\\\\CollectionFactory.java (at line 94)\\n\" + ", "-\t\t\t\"\treturn (Collection<E>) collectionClass.newInstance();\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked cast from capture#13-of ? to Collection<E>\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t:", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in example\\\\CollectionFactory.java (at line 55)\\n\" + ", "-\t\t\t\"\treturn EnumSet.copyOf((EnumSet) collection);\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from EnumSet<Enum<Enum<E>>> to Collection<E>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in example\\\\CollectionFactory.java (at line 55)\\n\" + ", "-\t\t\t\"\treturn EnumSet.copyOf((EnumSet) collection);\\n\" + ", "-\t\t\t\"\t                       ^^^^^^^\\n\" + ", "-\t\t\t\"EnumSet is a raw type. References to generic type EnumSet<E> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in example\\\\CollectionFactory.java (at line 87)\\n\" + ", "-\t\t\t\"\treturn EnumSet.noneOf((Class) elementType);\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from EnumSet<Enum<Enum<E>>> to Collection<E>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in example\\\\CollectionFactory.java (at line 87)\\n\" + ", "-\t\t\t\"\treturn EnumSet.noneOf((Class) elementType);\\n\" + ", "-\t\t\t\"\t                       ^^^^^\\n\" + ", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. WARNING in example\\\\CollectionFactory.java (at line 94)\\n\" + ", "-\t\t\t\"\treturn (Collection<E>) collectionClass.newInstance();\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked cast from capture#13-of ? to Collection<E>\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t\t));", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in example\\\\CollectionFactory.java (at line 42)\\n\" + ", "+\t\t\"\t@SuppressWarnings({ \\\"unchecked\\\", \\\"cast\\\" })\\n\" + ", "+\t\t\"\t                                 ^^^^^^\\n\" + ", "+\t\t\"Unnecessary @SuppressWarnings(\\\"cast\\\")\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in example\\\\CollectionFactory.java (at line 55)\\n\" + ", "+\t\t\"\treturn EnumSet.copyOf((EnumSet) collection);\\n\" + ", "+\t\t\"\t                       ^^^^^^^\\n\" + ", "+\t\t\"EnumSet is a raw type. References to generic type EnumSet<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in example\\\\CollectionFactory.java (at line 87)\\n\" + ", "+\t\t\"\treturn EnumSet.noneOf((Class) elementType);\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation noneOf(Class) of the generic method noneOf(Class<E>) of type EnumSet\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in example\\\\CollectionFactory.java (at line 87)\\n\" + ", "+\t\t\"\treturn EnumSet.noneOf((Class) elementType);\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The expression of type EnumSet needs unchecked conversion to conform to Collection<E>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in example\\\\CollectionFactory.java (at line 87)\\n\" + ", "+\t\t\"\treturn EnumSet.noneOf((Class) elementType);\\n\" + ", "+\t\t\"\t                      ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ", "+\t\t? \"Type safety: The expression of type Class needs unchecked conversion to conform to Class<E>\\n\"", "+\t\t: \"Type safety: The expression of type Class needs unchecked conversion to conform to Class<Enum<Enum<E>>>\\n\") + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in example\\\\CollectionFactory.java (at line 87)\\n\" + ", "+\t\t\"\treturn EnumSet.noneOf((Class) elementType);\\n\" + ", "+\t\t\"\t                       ^^^^^\\n\" + ", "+\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. WARNING in example\\\\CollectionFactory.java (at line 94)\\n\" + ", "+\t\t\"\treturn (Collection<E>) collectionClass.newInstance();\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked cast from capture#13-of ? to Collection<E>\\n\" + ", "+\t\t\"----------\\n\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff150503a7ae5766b69bd4c3f08ebcc9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "4b71ef3be11b1e52d22d795d03898285bb112516", "commitAfterChange": "9966baba46edc3df548fabd09b133cadc0093ca6", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " public void test048()", "signatureAfterChange": " public void test048()", "diff": ["+\t// This test checks that the simple cases are OK", "+\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"interface I {\\n\" + ", "+\t\t\t\t\t\"\tvoid doit();\\n\" + ", "+\t\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\t\"  public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\t\"    int var = 2;\\n\" + ", "+\t\t\t\t\t\"    I x2 = () -> {\\n\" + ", "+\t\t\t\t\t\"      System.out.println(var); // Error: var is not effectively final\\n\" + ", "+\t\t\t\t\t\"    };\\n\" + ", "+\t\t\t\t\t\"    var=2;\\n\" + ", "+\t\t\t\t\t\"  }\\n\" + ", "+\t\t\t\t\t\"}\" ,", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tSystem.out.println(var); // Error: var is not effectively final\\n\" + ", "+\t\t\t\t\"\t                   ^^^\\n\" + ", "+\t\t\t\t\"Variable var is required to be final or effectively final\\n\" + ", "+\t\t\t\t\"----------\\n\");", "+}", "-\t\t\t\t\t\"    };\\n\" + ", "-\t\t\t\t\t\"      \\n\" + ", "-\t\t\t\t\"1. ERROR in X.java (at line 22)\\n\" + ", "-\t\t\t\t\"\tSystem.out.println(s2); // Error: var is not effectively final\\n\" + ", "-\t\t\t\t\"\t                   ^^\\n\" + ", "-\t\t\t\t\"The variable s2 must be must be final or effectively final if used in an inner class\\n\" + ", "-\t\t\t\t\"----------\\n\"", "-\t\t\t\t);"]}], "num": 3491}
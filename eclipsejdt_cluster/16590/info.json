{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60d4a04935c988aa72b6d16899554564", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bdd11ff139205e0e1d2a718195e3e78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "d6e67d4c8518637d8a6205904d99263fcf72b512", "commitAfterChange": "25c3603d7bf5d103d47b791d11767b16968f4a1d", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " public void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " public void configure(String[] argv) throws InvalidInputException", "diff": ["+\tfinal int INSIDE_PROCESSOR_PATH_start = 17;", "+\tfinal int INSIDE_PROCESSOR_start = 18;", "+\tfinal int INSIDE_S_start = 19;", "+\tthis.expandedCommandLine = newCommandLineArgs;", "+\t\t\t\t// annotation processing", "+\t\t\t\tif (currentArg.startsWith(\"-A\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-processorpath\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_PROCESSOR_PATH_start;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-processor\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_PROCESSOR_start;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-proc:only\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_GenerateClassFiles,", "+\t\t\t\t\t\tCompilerOptions.DISABLED);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-proc:none\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_Process_Annotations,", "+\t\t\t\t\t\tCompilerOptions.DISABLED);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-s\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_S_start;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-XprintProcessorInfo\") //$NON-NLS-1$", "+\t\t\t\t\t\t|| currentArg.equals(\"-XprintRounds\")) { //$NON-NLS-1$ ", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "-\t\t\t\t// continue; fall through on purpose", "+\t\t\t\tbreak;", "+\t\t\tcase INSIDE_PROCESSOR_PATH_start :", "+\t\t\t\t// nothing to do here. This is consumed again by the AnnotationProcessorManager", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_PROCESSOR_start :", "+\t\t\t\t// nothing to do here. This is consumed again by the AnnotationProcessorManager", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_S_start :", "+\t\t\t\t// nothing to do here. This is consumed again by the AnnotationProcessorManager", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;\t\t\t", "-\tif (filesCount != 0)", "+\tif (filesCount != 0) {", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe638a1d3f62abca6f263bda6c97df0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "fc25b1b826e7fad7f1da04ab9d452bc350b24919", "commitAfterChange": "19b4c669e6d8313d03dbcc8b595622002fe408a5", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " public void configure(String[] argv)", "signatureAfterChange": " public void configure(String[] argv)", "diff": ["+\t\t\t\tif (currentArg.startsWith(\"-nullAnnotations:\")) { //$NON-NLS-1$", "+\t\t\t\t\tStringTokenizer tokenizer =", "+\t\t\t\t\t\tnew StringTokenizer(currentArg.substring(\"-nullAnnotations:\".length()), \",\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\t\tString token = tokenizer.nextToken();", "+\t\t\t\t\t\tif (token.startsWith(\"nullable=\")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NullableAnnotationName, token.substring(\"nullable=\".length())); //$NON-NLS-1$", "+\t\t\t\t\t\t} else if (token.startsWith(\"nonnull=\")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NonNullAnnotationName, token.substring(\"nonnull=\".length())); //$NON-NLS-1$", "+\t\t\t\t\t\t} else if (token.equals(\"emulate\")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_EmulateNullAnnotationTypes, CompilerOptions.ENABLED);", "+\t\t\t\t\t\t} else if (token.equals(\"import\")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_DefaultImportNullAnnotationTypes, CompilerOptions.ENABLED);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthrow new IllegalArgumentException(", "+\t\t\t\t\t\t\t\tthis.bind(\"configure.unrecognized.nullannotation.option\", token)); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}"]}], "num": 16590}
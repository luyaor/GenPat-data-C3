{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2928dacba90f8e8237eed4af534c8d27", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44be200681f54ff47e7c2ddb6f34d941", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic IAnnotationBinding[] getAnnotations()", "signatureAfterChange": "  \tpublic IAnnotationBinding[] getAnnotations()", "diff": ["-\t\torg.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] internalAnnotations = this.binding.getAnnotations();", "-\t\t// the variable is not an enum constant nor a field nor an argument.", "-\t\tint length = internalAnnotations == null ? 0 : internalAnnotations.length;", "-\t\tIAnnotationBinding[] domInstances =", "-\t\t\tlength == 0 ? AnnotationBinding.NoAnnotations : new AnnotationBinding[length];", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tfinal IAnnotationBinding annotationInstance = this.resolver.getAnnotationInstance(internalAnnotations[i]);", "-\t\t\tif (annotationInstance == null) {// not resolving binding", "-\t\t\t\treturn AnnotationBinding.NoAnnotations;", "-\t\t\t}", "-\t\t\tdomInstances[i] = annotationInstance;", "+\t\tif (this.annotations != null) {", "+\t\t\treturn this.annotations;", "-\t\treturn domInstances;", "+\t\torg.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] internalAnnotations = this.binding.getAnnotations();", "+\t\tint length = internalAnnotations == null ? 0 : internalAnnotations.length;", "+\t\tif (length != 0) {", "+\t\t\tIAnnotationBinding[] tempAnnotations = new IAnnotationBinding[length];", "+\t\t\tint convertedAnnotationCount = 0;", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.AnnotationBinding internalAnnotation = internalAnnotations[i];", "+\t\t\t\tfinal IAnnotationBinding annotationInstance = this.resolver.getAnnotationInstance(internalAnnotation);", "+\t\t\t\tif (annotationInstance == null) {", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\ttempAnnotations[convertedAnnotationCount++] = annotationInstance;", "+\t\t\t}", "+\t\t\tif (convertedAnnotationCount != length) {", "+\t\t\t\tif (convertedAnnotationCount == 0) {", "+\t\t\t\t\treturn this.annotations = AnnotationBinding.NoAnnotations;", "+\t\t\t\t}", "+\t\t\t\tSystem.arraycopy(tempAnnotations, 0, (tempAnnotations = new IAnnotationBinding[convertedAnnotationCount]), 0, convertedAnnotationCount);", "+\t\t\t}", "+\t\t\treturn this.annotations = tempAnnotations;", "+\t\t}", "+\t\treturn this.annotations = AnnotationBinding.NoAnnotations;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fca0af6d1a02fb02b7a58493ec57cce9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDeltaBuilder.java", "commitBeforeChange": "ee7a9f184cb78c9a997b3d97c102d52d6cad8cc9", "commitAfterChange": "5ce130e25c355987e77b700c026948aca2c3cdd7", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 8, "signatureBeforeChange": " private void putElementInfo(IJavaElement element, JavaElementInfo info)", "signatureAfterChange": " private void findAnnotationChanges(IAnnotation[] oldAnnotations, IAnnotation[] newAnnotations, IJavaElement parent)", "diff": ["+private void findAnnotationChanges(IAnnotation[] oldAnnotations, IAnnotation[] newAnnotations, IJavaElement parent) {", "+\tArrayList annotationDeltas = null;", "+\tfor (int i = 0, length = newAnnotations.length; i < length; i++) {", "+\t\tIAnnotation newAnnotation = newAnnotations[i];", "+\t\tObject oldInfo = this.annotationInfos.remove(newAnnotation);", "+\t\tif (oldInfo == null) {", "+\t\t\tJavaElementDelta annotationDelta = new JavaElementDelta(newAnnotation);", "+\t\t\tannotationDelta.added();", "+\t\t\tif (annotationDeltas == null) annotationDeltas = new ArrayList();", "+\t\t\tannotationDeltas.add(annotationDelta);", "+\t\t\tcontinue;", "+\t\t} else {", "+\t\t\tAnnotationInfo newInfo = null;", "+\t\t\ttry { ", "+\t\t\t\tnewInfo = (AnnotationInfo) ((JavaElement) newAnnotation).getElementInfo();", "+\t\t\t} catch (JavaModelException npe) {", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tif (!Util.equalArraysOrNull(((AnnotationInfo) oldInfo).members, newInfo.members)) {", "+\t\t\t\tJavaElementDelta annotationDelta = new JavaElementDelta(newAnnotation);", "+\t\t\t\tannotationDelta.changed(IJavaElementDelta.F_CONTENT);", "+\t\t\t\tif (annotationDeltas == null) annotationDeltas = new ArrayList();", "+\t\t\t\tannotationDeltas.add(annotationDelta);", "+\t\t\t}\t\t", "+\t\t}", "+\t}", "+\tfor (int i = 0, length = oldAnnotations.length; i < length; i++) {", "+\t\tIAnnotation oldAnnotation = oldAnnotations[i];", "+\t\tif (this.annotationInfos.remove(oldAnnotation) != null) {", "+\t\t\tJavaElementDelta annotationDelta = new JavaElementDelta(oldAnnotation);", "+\t\t\tannotationDelta.removed();", "+\t\t\tif (annotationDeltas == null) annotationDeltas = new ArrayList();", "+\t\t\tannotationDeltas.add(annotationDelta);\t\t}", "+\t}", "+\tif (annotationDeltas == null)", "+\t\treturn;", "+\tint size = annotationDeltas.size();", "+\tif (size > 0) {", "+\t\tJavaElementDelta parentDelta = this.delta.changed(parent, IJavaElementDelta.F_ANNOTATIONS);", "+\t\tparentDelta.annotationDeltas = (IJavaElementDelta[]) annotationDeltas.toArray(new IJavaElementDelta[size]);", "+\t}", "+}", "-private void putElementInfo(IJavaElement element, JavaElementInfo info) {", "-\tthis.infos.put(element, info);", "-}"]}], "num": 39301}
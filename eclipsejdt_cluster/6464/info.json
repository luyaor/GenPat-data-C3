{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1188705485189294f63d3c9c881a86a7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ebe0281bd88520fb9284fefce984c3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "70e6cb7abc9d1f82b12c9182e5b9d5f442b62682", "commitAfterChange": "96e2d72045a6fecadbb495cf120a991e9af97b69", "methodNumberBeforeChange": 342, "methodNumberAfterChange": 342, "signatureBeforeChange": " protected void dispatchDeclarationIntoEnumDeclaration(int length)", "signatureAfterChange": " protected void dispatchDeclarationIntoEnumDeclaration(int length)", "diff": ["-      return;", "-   int[] flag = new int[length + 1]; //plus one -- see <HERE>", "-   int size1 = 0, size2 = 0, size3 = 0;", "-   TypeDeclaration enumDeclaration = (TypeDeclaration) this.astStack[this.astPtr - length];", "-   boolean hasAbstractMethods = false;", "-   for (int i = length - 1; i >= 0; i--) {", "-      ASTNode astNode = this.astStack[this.astPtr--];", "-      if (astNode instanceof AbstractMethodDeclaration) {", "-         //methods and constructors have been regrouped into one single list", "-         flag[i] = 2;", "-         size2++;", "-\t\tif (((AbstractMethodDeclaration) astNode).isAbstract()) {", "-\t\t\thasAbstractMethods = true;", "+\t\treturn;", "+\tint[] flag = new int[length + 1]; //plus one -- see <HERE>", "+\tint size1 = 0, size2 = 0, size3 = 0;", "+\tTypeDeclaration enumDeclaration = (TypeDeclaration) this.astStack[this.astPtr - length];", "+\tboolean hasAbstractMethods = false;", "+\tint enumConstantsCounter = 0;", "+\tfor (int i = length - 1; i >= 0; i--) {", "+\t\tASTNode astNode = this.astStack[this.astPtr--];", "+\t\tif (astNode instanceof AbstractMethodDeclaration) {", "+\t\t\t//methods and constructors have been regrouped into one single list", "+\t\t\tflag[i] = 2;", "+\t\t\tsize2++;", "+\t\t\tif (((AbstractMethodDeclaration) astNode).isAbstract()) {", "+\t\t\t\thasAbstractMethods = true;", "+\t\t\t}", "+\t\t} else if (astNode instanceof TypeDeclaration) {", "+\t\t\tflag[i] = 3;", "+\t\t\tsize3++;", "+\t\t} else if (astNode instanceof FieldDeclaration) {", "+\t\t\tflag[i] = 1;", "+\t\t\tsize1++;", "+\t\t\tif (((FieldDeclaration) astNode).getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\tenumConstantsCounter++;", "+\t\t\t}", "-      } else if (astNode instanceof TypeDeclaration) {", "-         flag[i] = 3;", "-         size3++;", "-      } else if (astNode instanceof FieldDeclaration) {", "-         flag[i] = 1;", "-         size1++;", "-//         if(astNode instanceof EnumConstant) {", "-//            EnumConstant constant = (EnumConstant) astNode;", "-//            ((AllocationExpression)constant.initialization).type = new SingleTypeReference(enumDeclaration.name,", "-//                  (((long) enumDeclaration.sourceStart) << 32) + enumDeclaration.sourceEnd);", "-//         }", "-      }", "-   }", "+\t}", "-   //arrays creation", "-   if (size1 != 0) {", "-      enumDeclaration.fields = new FieldDeclaration[size1];", "-   }", "-   if (size2 != 0) {", "-      enumDeclaration.methods = new AbstractMethodDeclaration[size2];", "-      if (hasAbstractMethods) enumDeclaration.bits |= ASTNode.HasAbstractMethods;", "-   }", "-   if (size3 != 0) {", "-      enumDeclaration.memberTypes = new TypeDeclaration[size3];", "-   }", "+\t//arrays creation", "+\tif (size1 != 0) {", "+\t\tenumDeclaration.fields = new FieldDeclaration[size1];", "+\t}", "+\tif (size2 != 0) {", "+\t\tenumDeclaration.methods = new AbstractMethodDeclaration[size2];", "+\t\tif (hasAbstractMethods) enumDeclaration.bits |= ASTNode.HasAbstractMethods;", "+\t}", "+\tif (size3 != 0) {", "+\t\tenumDeclaration.memberTypes = new TypeDeclaration[size3];", "+\t}", "-   //arrays fill up", "-   size1 = size2 = size3 = 0;", "-   int flagI = flag[0], start = 0;", "-   int length2;", "-   for (int end = 0; end <= length; end++) //<HERE> the plus one allows to", "-      {", "-      if (flagI != flag[end]) //treat the last element as a ended flag.....", "-         { //array copy", "-         switch (flagI) {", "-            case 1 :", "-               size1 += (length2 = end - start);", "-               System.arraycopy(", "-                  this.astStack,", "-                  this.astPtr + start + 1,", "-                  enumDeclaration.fields,", "-                  size1 - length2,", "-                  length2);", "-               break;", "-            case 2 :", "-               size2 += (length2 = end - start);", "-               System.arraycopy(", "-                  this.astStack,", "-                  this.astPtr + start + 1,", "-                  enumDeclaration.methods,", "-                  size2 - length2,", "-                  length2);", "-               break;", "-            case 3 :", "-               size3 += (length2 = end - start);", "-               System.arraycopy(", "-                  this.astStack,", "-                  this.astPtr + start + 1,", "-                  enumDeclaration.memberTypes,", "-                  size3 - length2,", "-                  length2);", "-               break;", "-         }", "-         flagI = flag[start = end];", "-      }", "-   }", "+\t//arrays fill up", "+\tsize1 = size2 = size3 = 0;", "+\tint flagI = flag[0], start = 0;", "+\tint length2;", "+\tfor (int end = 0; end <= length; end++) //<HERE> the plus one allows to", "+\t{", "+\t\tif (flagI != flag[end]) //treat the last element as a ended flag.....", "+\t\t{ //array copy", "+\t\t\tswitch (flagI) {", "+\t\t\t\tcase 1 :", "+\t\t\t\t\tsize1 += (length2 = end - start);", "+\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\tthis.astStack,", "+\t\t\t\t\t\t\tthis.astPtr + start + 1,", "+\t\t\t\t\t\t\tenumDeclaration.fields,", "+\t\t\t\t\t\t\tsize1 - length2,", "+\t\t\t\t\t\t\tlength2);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 2 :", "+\t\t\t\t\tsize2 += (length2 = end - start);", "+\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\tthis.astStack,", "+\t\t\t\t\t\t\tthis.astPtr + start + 1,", "+\t\t\t\t\t\t\tenumDeclaration.methods,", "+\t\t\t\t\t\t\tsize2 - length2,", "+\t\t\t\t\t\t\tlength2);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 3 :", "+\t\t\t\t\tsize3 += (length2 = end - start);", "+\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\tthis.astStack,", "+\t\t\t\t\t\t\tthis.astPtr + start + 1,", "+\t\t\t\t\t\t\tenumDeclaration.memberTypes,", "+\t\t\t\t\t\t\tsize3 - length2,", "+\t\t\t\t\t\t\tlength2);", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tflagI = flag[start = end];", "+\t\t}", "+\t}", "-   if (enumDeclaration.memberTypes != null) {", "-      for (int i = enumDeclaration.memberTypes.length - 1; i >= 0; i--) {", "-         enumDeclaration.memberTypes[i].enclosingType = enumDeclaration;", "-      }", "-   }}", "+\tif (enumDeclaration.memberTypes != null) {", "+\t\tfor (int i = enumDeclaration.memberTypes.length - 1; i >= 0; i--) {", "+\t\t\tenumDeclaration.memberTypes[i].enclosingType = enumDeclaration;", "+\t\t}", "+\t}", "+\tenumDeclaration.enumConstantsCounter = enumConstantsCounter;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ae40fa623a582d0951d5f17ba3c7e38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "74279995bc9de55baa31610924e4a7d414d52965", "commitAfterChange": "50b8b0acb5228e84131dfeba9c21f872ddd0e6e0", "methodNumberBeforeChange": 184, "methodNumberAfterChange": 184, "signatureBeforeChange": "\r  \r public int flushAnnotationsDefinedPriorTo(int position)", "signatureAfterChange": "\r  \r public int flushAnnotationsDefinedPriorTo(int position)", "diff": ["+\t// position can be located in the middle of a line break\r", "+\t// this is a bug on Windows platform only.\r", "+\t// http://dev.eclipse.org/bugs/show_bug.cgi?id=10557\r", "+\tchar[] source = scanner.source;\r", "+\t\r", "+\tif ((source[position] == '\\r')\r", "+\t    && ((position + 1) < source.length)\r", "+\t    && (source[position + 1] == '\\n')) {\r", "+\t\tposition++;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c05a4cbd17b8d0dc16062c11b288445", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/JDIStackFrame.java", "commitBeforeChange": "a6fd772365f64057a96db7d3c02cb2f36452002f", "commitAfterChange": "fd717590f19f4fbf1d2159dff4c0ba438edc5dea", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public boolean run(String codeSnippetClassName)", "signatureAfterChange": " public boolean run(String codeSnippetClassName)", "diff": ["+\t\t\tlong start = System.currentTimeMillis();", "+\t\t\t\t\tif (classes.size() == 0 && (System.currentTimeMillis()-start) > 10000) {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}"]}], "num": 6464}
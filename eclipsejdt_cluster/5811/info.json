{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e29edf8b909e57d9e3b95df9ffdb6178", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cb416c25f6732c80c91b5fba74fcb0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public ReferenceBinding[] superInterfaces()", "signatureAfterChange": "     public ReferenceBinding[] superInterfaces()", "diff": ["-\t\t\tTypeBinding superType = null;", "-\t\t\t\tsuperType = this.bound;", "+\t\t\t\tif (this.bound.isInterface()) {", "+\t\t\t\t\treturn new ReferenceBinding[]{ (ReferenceBinding)this.bound };", "+\t\t\t\t} else {", "+\t\t\t\t\treturn NoSuperInterfaces;", "+\t\t\t\t}", "-\t\t\t\tsuperType = this.typeVariable.firstBound; // TODO (philippe) shouldn't it retrieve variable superinterfaces ?", "+\t\t\t\treturn this.typeVariable.superInterfaces();", "-\t\t\tthis.superInterfaces = superType != null && superType.isInterface()", "-\t\t\t\t? new ReferenceBinding[] { (ReferenceBinding) superType }", "-\t\t\t\t: NoSuperInterfaces;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b40259d60dfbd4a942ec16eb86dd5405", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldReferencePattern.java", "commitBeforeChange": "8635a189d924741fc24bc4be873c4d30df46a524", "commitAfterChange": "903406128c19b4f927e6592cfb93facd59066f36", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r private int matchLevel(NameReference nameRef, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(NameReference nameRef, boolean resolve)", "diff": ["-\t\tboolean nameMatch = true;\r", "-\t\tif (this.name != null) {\r", "-\t\t\tif (nameRef instanceof SingleNameReference) {\r", "-\t\t\t\tnameMatch = this.matchesName(this.name, ((SingleNameReference)nameRef).token);\r", "-\t\t\t} else { // QualifiedNameReference\r", "-\t\t\t\tnameMatch = false;\r", "-\t\t\t\tQualifiedNameReference qNameRef = (QualifiedNameReference)nameRef;\r", "-\t\t\t\tchar[][] tokens = qNameRef.tokens;\r", "-\t\t\t\tfor (int i = qNameRef.indexOfFirstFieldBinding-1, max = tokens.length; i < max && !nameMatch; i++){\r", "-\t\t\t\t\tif (i >= 0) nameMatch = this.matchesName(this.name, tokens[i]);\r", "-\t\t\t\t}\r", "-\t\t\t}\t\t\t\t\r", "-\t\t} \r", "-\t\tif (nameMatch) {\r", "+\t\tif (this.name == null) {\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "+\t\t\tif (nameRef instanceof SingleNameReference) {\r", "+\t\t\t\tif (this.matchesName(this.name, ((SingleNameReference)nameRef).token)) {\r", "+\t\t\t\t\t// can only be a possible match since resolution is needed \r", "+\t\t\t\t\t// to find out if it is a field ref\r", "+\t\t\t\t\treturn POSSIBLE_MATCH;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t\t}\r", "+\t\t\t} else { // QualifiedNameReference\r", "+\t\t\t\tQualifiedNameReference qNameRef = (QualifiedNameReference)nameRef;\r", "+\t\t\t\tchar[][] tokens = qNameRef.tokens;\r", "+\t\t\t\tboolean matchOnFirstToken = false;\r", "+\t\t\t\tfor (int i = 0, max = tokens.length; i < max; i++){\r", "+\t\t\t\t\tif (this.matchesName(this.name, tokens[i])) {\r", "+\t\t\t\t\t\t// can only be a possible match since resolution is needed \r", "+\t\t\t\t\t\t// to find out if it is a field ref\r", "+\t\t\t\t\t\treturn POSSIBLE_MATCH;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t}\t\t\t\t\r", "+\t\t} \r"]}], "num": 5811}
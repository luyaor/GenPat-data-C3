{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e33b839af42969b9139c5ebce2574b4", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2103b170cc39085e9039996d07026948", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AND_AND_Expression.java", "commitBeforeChange": "861f1162953e56602b4d7507e52e1f13733854c4", "commitAfterChange": "e06aeb68bdedc96cd403845333a666ecc6a0a737", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tif (left.constant != NotAConstant) {\r", "-\t\tif (left.constant.booleanValue()) { //true && anything\r", "-\t\t\t// in this case only, we are sure that local inits performed in \r", "-\t\t\t// the argument <anything> will be executed even though it was \r", "-\t\t\t// a conditional operation\r", "-\t\t\tFlowInfo mergedInfo = right.analyseCode(currentScope, flowContext, flowInfo);\r", "-\t\t\tmergedInitStateIndex = currentScope.methodScope().recordInitializationStates(mergedInfo);\r", "-\t\t\treturn mergedInfo;\r", "-\t\t} else { //false && anything\r", "-\t\t\t// in this case only, we are sure that local inits performed in \r", "-\t\t\t// the argument <anything> will *not* be executed even though it \r", "-\t\t\t// was a conditional operation\r", "-\t\t\treturn flowInfo;\r", "-\t\t}\r", "-\t}\r", "-\tif (right.constant != NotAConstant) {\r", "-\t\tif (right.constant.booleanValue()) { // anything && true\r", "-\t\t\t// in this case only, we are sure that local inits performed in \r", "-\t\t\t// the argument <anything> will be executed even though it was \r", "-\t\t\t// a conditional operation\r", "+\r", "+\tConstant inlinedValue;\r", "+\tif ((inlinedValue = left.constant) == NotAConstant) inlinedValue = left.conditionalConstant();\r", "+\tif (inlinedValue != NotAConstant){\r", "+\t\tif (inlinedValue.booleanValue() == false){ \r", "+\t\t\t// FALSE && anything\r", "+\t\t\tright.analyseCode(currentScope, flowContext, mergedInfo.copy().markAsFakeReachable(true));\r", "-\t\t} else { // anything && false\r", "-\t\t\t// whatever is on the left, we will fail, so the result must merge the left inits when answering\r", "-\t\t\t// initsWhenFalse.\r", "-\t\t\t// the initsWhenTrue are undetermined, since this path will be fake reachable...\r", "-\t\t\tFlowInfo mergedInfo = left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();\r", "-\t\t\tmergedInitStateIndex = currentScope.methodScope().recordInitializationStates(mergedInfo);\r", "-\t\t\treturn mergedInfo;\t\t\t\r", "-\t\t}\r", "+\t\t} \r", "+\t} else {\r", "+\t\tif ((inlinedValue = right.constant) == NotAConstant) inlinedValue = right.conditionalConstant();\r", "-\r", "-\tFlowInfo leftInfo, rightInfo;\r", "-\tleftInfo = left.analyseCode(currentScope, flowContext, flowInfo);\r", "-\trightInfo = leftInfo.initsWhenTrue().copy();\r", "+\tif (inlinedValue != NotAConstant){\r", "+\t\t// TRUE && anything, anything && TRUE, anything && FALSE\r", "+\t\tFlowInfo mergedInfo = left.analyseCode(currentScope, flowContext, flowInfo);\r", "+\t\tmergedInfo = right.analyseCode(currentScope, flowContext, mergedInfo);\r", "+\t\tmergedInitStateIndex = currentScope.methodScope().recordInitializationStates(mergedInfo);\r", "+\t\treturn mergedInfo;\r", "+\t}\r", "+\tFlowInfo leftInfo = left.analyseCode(currentScope, flowContext, flowInfo);\r", "+\tFlowInfo rightInfo = leftInfo.initsWhenTrue().copy();\r", "-\tFlowInfo mergedInfo = FlowInfo.conditional(rightInfo.initsWhenTrue(), leftInfo.initsWhenFalse().unconditionalInits().mergedWith(rightInfo.initsWhenFalse().copy().unconditionalInits()));\r", "+\tFlowInfo mergedInfo = FlowInfo.conditional(\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\trightInfo.initsWhenTrue(), \r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tleftInfo.initsWhenFalse().unconditionalInits().mergedWith(rightInfo.initsWhenFalse().copy().unconditionalInits()));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b2171998f5ceecd683eb3f11be36da6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/OR_OR_Expression.java", "commitBeforeChange": "861f1162953e56602b4d7507e52e1f13733854c4", "commitAfterChange": "e06aeb68bdedc96cd403845333a666ecc6a0a737", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\r", "-\tif (left.constant != NotAConstant) {\r", "-\t\tif (!left.constant.booleanValue()) { // false || anything\r", "-\t\t\t// in this case only, we are sure that local inits performed in \r", "-\t\t\t// the argument <anything> will be executed even though it was \r", "-\t\t\t// a conditional operation\r", "-\t\t\treturn right.analyseCode(currentScope, flowContext, flowInfo);\r", "-\t\t} else { // true || anything\r", "-\t\t\t// in this case only, we are sure that local inits performed in \r", "-\t\t\t// the argument <anything> will *not* be executed even though it \r", "-\t\t\t// was a conditional operation\r", "-\t\t\treturn flowInfo;\r", "-\t\t}\r", "-\t}\r", "-\tif (right.constant != NotAConstant) {\r", "-\t\tif (right.constant.booleanValue()) { // anything || true\r", "-\t\t\t// whatever is on the left, we will succeed, so the result must merge the left inits when answering\r", "-\t\t\t// initsWhenTrue.\r", "-\t\t\t// the initsWhenFalse are undetermined, since this path will be fake reachable...\r", "-\t\t\tFlowInfo mergedInfo = left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();\r", "-\t\t\tmergedInitStateIndex = currentScope.methodScope().recordInitializationStates(mergedInfo);\r", "-\t\t\treturn mergedInfo;\t\t\t\r", "-\t\t} else { // anything || false\r", "-\t\t\t// ignore the right part\r", "+\t\r", "+\tConstant inlinedValue;\r", "+\tif ((inlinedValue = left.constant) == NotAConstant) inlinedValue = left.conditionalConstant();\r", "+\tif (inlinedValue != NotAConstant){\r", "+\t\tif (inlinedValue.booleanValue() == true){ \r", "+\t\t\t// TRUE || anything\r", "-\t\t\treturn mergedInfo;\t\t\t\r", "-\t\t}\r", "+\t\t\tright.analyseCode(currentScope, flowContext, mergedInfo.copy().markAsFakeReachable(true));\r", "+\t\t\treturn mergedInfo;\r", "+\t\t} \r", "+\t} else {\r", "+\t\tif ((inlinedValue = right.constant) == NotAConstant) inlinedValue = right.conditionalConstant();\r", "-\t\r", "-\tif (right.constant != NotAConstant) {\r", "-\t\t// anything && true/false\r", "-\t\t// in this case only, we are sure that local inits performed in \r", "-\t\t// the argument <anything> will be executed even though it was \r", "-\t\t// a conditional operation\r", "+\tif (inlinedValue != NotAConstant){\r", "+\t\t// FALSE || anything, anything || TRUE, anything || FALSE\r", "+\t\tmergedInfo = right.analyseCode(currentScope, flowContext, mergedInfo);\r", "-\r"]}], "num": 15807}
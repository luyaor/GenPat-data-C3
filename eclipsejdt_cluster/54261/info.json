{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aa2810a05a531fa4f14cbe70c55e4b51", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ef4838be1a1640604c4853f4abfe602", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "241d64f631bbf77014d4fbfc8f74f781b65e5c36", "commitAfterChange": "42e53b3c82f631cac5341438af4d88461f281652", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic void _testBug51617() throws JavaModelException", "signatureAfterChange": " \tpublic void testBug51617() throws JavaModelException", "diff": ["-\tpublic void _testBug51617() throws JavaModelException {", "+\tpublic void testBug51617() throws JavaModelException {", "+\t\tString [] unbound = { \"e\" };", "-\t\t\tassertNotNull(\"We should have a failure!\", this.failures);", "-\t\t\tassertEquals(\"We should have exactly one failure!\", 1, this.failures.size());", "-\t\t\t// TODO positions cannot be inlined (they will be different if compiled on Linux and run on Windows)", "-\t\t\tString expected = \"Test.java: Reference at <126> in '\\n * @exception e' should be bound!\";", "-\t\t\tString failure = (String) this.failures.remove(0);", "-\t\t\tassertEquals(\"We should have an unbound exception here!\", expected, failure);", "+\t\t\tint size = unbound.length;", "+\t\t\tfor (int i=0, f=0; i<size; i++) {", "+\t\t\t\tassertTrue(\"Invalid number of failures!\", this.failures.size()>f);", "+\t\t\t\tString failure = (String) this.failures.get(f);", "+\t\t\t\tString expected = \"Reference '\"+unbound[i]+\"' should be bound!\";", "+\t\t\t\tif (expected.equals(failure.substring(failure.indexOf(' ')+1))) {", "+\t\t\t\t\tthis.failures.remove(f);", "+\t\t\t\t} else {", "+\t\t\t\t\tf++;\t// skip offending failure", "+\t\t\t\t\ti--;\t// stay on expected string", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tthis.stopOnFailure = true;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2e451937074dfbfe1ae8b953fa2bc9f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/EncodingTests.java", "commitBeforeChange": "7dfdcc33c89bb2a137f9c84963dd6ab9ff74a661", "commitAfterChange": "f24c43070146ea63fd82e385697f695064b998f3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void test001() throws JavaModelException, CoreException", "signatureAfterChange": " \tpublic void test001() throws JavaModelException, CoreException, UnsupportedEncodingException", "diff": ["-\tpublic void test001() throws JavaModelException, CoreException {", "+\tpublic void test001() throws JavaModelException, CoreException, UnsupportedEncodingException {", "-\t\t// Get compilation unit and compare source", "+\t\t// Get source and compare with file contents", "-\t\tString encodedContents = new String (Util.getResourceContentsAsCharArray(this.utf8File, encoding));", "-\t\tassertEquals(\"Encoded UTF-8 source should have been decoded the same way!\", encodedContents, source);", "+\t\tString systemSource = org.eclipse.jdt.core.tests.util.Util.convertToIndependantLineDelimiter(source);", "+\t\tString encodedContents = new String (Util.getResourceContentsAsCharArray(this.utf8File));", "+\t\tencodedContents = org.eclipse.jdt.core.tests.util.Util.convertToIndependantLineDelimiter(encodedContents);", "+\t\tassertEquals(\"Encoded UTF-8 source should have been decoded the same way!\", encodedContents, systemSource);", "-\t\tbyte[] sourceBytes = null;", "-\t\ttry {", "-\t\t\tsourceBytes = source.getBytes(encoding);", "-\t\t} catch (UnsupportedEncodingException e) {", "-\t\t\tthrow new RuntimeException(e);", "-\t\t}", "+\t\tbyte[] sourceBytes = source.getBytes(encoding);"]}], "num": 54261}
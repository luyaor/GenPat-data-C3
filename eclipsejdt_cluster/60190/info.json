{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4260b771c2a697fc0ad3cdbd5f69f860", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "265a0ea858a5b2e7c70e47d0f5f09610", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AND_AND_Expression.java", "commitBeforeChange": "e5e6f9097f2c3bf7294bd658643d6be9f7aaa5ef", "commitAfterChange": "d00bc48524f3df289951f11fca95cb39820be47f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "signatureAfterChange": "\r \tpublic void generateOptimizedBoolean(\r \t\tBlockScope currentScope,\r \t\tCodeStream codeStream,\r \t\tLabel trueLabel,\r \t\tLabel falseLabel,\r \t\tboolean valueRequired)", "diff": ["- */\r", "-public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired) {\r", "-\tif ((constant != Constant.NotAConstant) && (constant.typeID() == T_boolean)) {\r", "-\t\tif (constant.booleanValue() == true) {\r", "-\t\t\t// constant == true\r", "-\t\t\t\tif (falseLabel == null) {\r", "-\t\t\t\t\t// implicit falling through the FALSE case\r", "-\t\t\t\t\tif (trueLabel != null) {\r", "-\t\t\t\t\t\tcodeStream.goto_(trueLabel);\r", "-\t\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\tif (valueRequired) {\r", "-\t\t\t\tif (falseLabel != null) {\r", "-\t\t\t\t\t// implicit falling through the TRUE case\r", "-\t\t\t\t\tif (trueLabel == null) {\r", "-\t\t\t\t\t\tcodeStream.goto_(falseLabel);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\treturn;\r", "-\tgenerateOptimizedConditionalAnd(currentScope, codeStream, trueLabel, falseLabel, valueRequired);\r", "-}\r", "+\t */\r", "+\tpublic void generateOptimizedBoolean(\r", "+\t\tBlockScope currentScope,\r", "+\t\tCodeStream codeStream,\r", "+\t\tLabel trueLabel,\r", "+\t\tLabel falseLabel,\r", "+\t\tboolean valueRequired) {\r", "+\t\tif ((constant != Constant.NotAConstant) && (constant.typeID() == T_boolean)) {\r", "+\t\t\tsuper.generateOptimizedBoolean(currentScope, codeStream, trueLabel, falseLabel, valueRequired);\r", "+\t\t\treturn;\r", "+\t\t}\r", "+\t\tint pc = codeStream.position;\r", "+\t\tConstant condConst;\r", "+\t\tif ((condConst = left.conditionalConstant()) != NotAConstant) {\r", "+\t\t\tif (condConst.booleanValue() == true) {\r", "+\t\t\t\t// <something equivalent to true> && x\r", "+\t\t\t\tleft.generateOptimizedBoolean(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tcodeStream,\r", "+\t\t\t\t\ttrueLabel,\r", "+\t\t\t\t\tfalseLabel,\r", "+\t\t\t\t\tfalse);\r", "+\t\t\t\tif (rightInitStateIndex != -1) {\r", "+\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);\r", "+\t\t\t\t}\r", "+\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);\r", "+\t\t\t\t\tright.generateOptimizedBoolean(\r", "+\t\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\t\tcodeStream,\r", "+\t\t\t\t\t\ttrueLabel,\r", "+\t\t\t\t\t\tfalseLabel,\r", "+\t\t\t\t\t\tvalueRequired);\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\t// <something equivalent to false> && x\r", "+\t\t\t\tleft.generateOptimizedBoolean(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tcodeStream,\r", "+\t\t\t\t\ttrueLabel,\r", "+\t\t\t\t\tfalseLabel,\r", "+\t\t\t\t\tfalse);\r", "+\t\t\t\tif (valueRequired) {\r", "+\t\t\t\t\tif ((bits & OnlyValueRequiredMASK) != 0) {\r", "+\t\t\t\t\t\tcodeStream.iconst_0();\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tif (falseLabel != null) {\r", "+\t\t\t\t\t\t\t// implicit falling through the TRUE case\r", "+\t\t\t\t\t\t\tcodeStream.goto_(falseLabel);\r", "+\t\t\t\t\t\t}\r", "+\t\t\tcodeStream.recordPositionsFrom(pc, this);\r", "+\t\t\tif (mergedInitStateIndex != -1) {\r", "+\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tmergedInitStateIndex);\r", "+\t\t\t}\r", "+\t\t\treturn;\r", "+\t\tif ((condConst = right.conditionalConstant()) != NotAConstant) {\r", "+\t\t\tif (condConst.booleanValue() == true) {\r", "+\t\t\t\t// x && <something equivalent to true>\r", "+\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);\r", "+\t\t\t\t\tleft.generateOptimizedBoolean(\r", "+\t\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\t\tcodeStream,\r", "+\t\t\t\t\t\ttrueLabel,\r", "+\t\t\t\t\t\tfalseLabel,\r", "+\t\t\t\t\t\tvalueRequired);\r", "+\t\t\t\t}\r", "+\t\t\t\tif (rightInitStateIndex != -1) {\r", "+\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);\r", "+\t\t\t\t}\r", "+\t\t\t\tright.generateOptimizedBoolean(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tcodeStream,\r", "+\t\t\t\t\ttrueLabel,\r", "+\t\t\t\t\tfalseLabel,\r", "+\t\t\t\t\tfalse);\r", "+\t\t\t} else {\r", "+\t\t\t\t// x && <something equivalent to false>\r", "+\t\t\t\tleft.generateOptimizedBoolean(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tcodeStream,\r", "+\t\t\t\t\ttrueLabel,\r", "+\t\t\t\t\tfalseLabel,\r", "+\t\t\t\t\tfalse);\r", "+\t\t\t\tif (rightInitStateIndex != -1) {\r", "+\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);\r", "+\t\t\t\t}\r", "+\t\t\t\tright.generateOptimizedBoolean(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tcodeStream,\r", "+\t\t\t\t\ttrueLabel,\r", "+\t\t\t\t\tfalseLabel,\r", "+\t\t\t\t\tfalse);\r", "+\t\t\t\tif (valueRequired) {\r", "+\t\t\t\t\tif ((bits & OnlyValueRequiredMASK) != 0) {\r", "+\t\t\t\t\t\tcodeStream.iconst_0();\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tif (falseLabel != null) {\r", "+\t\t\t\t\t\t\t// implicit falling through the TRUE case\r", "+\t\t\t\t\t\t\tcodeStream.goto_(falseLabel);\r", "+\t\t\t\t\t\t}\r", "+\t\t\tcodeStream.recordPositionsFrom(pc, this);\r", "+\t\t\tif (mergedInitStateIndex != -1) {\r", "+\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tmergedInitStateIndex);\r", "+\t\t\t}\r", "+\t\t\treturn;\r", "+\t\t}\r", "+\t\t// default case\r", "+\t\tif (falseLabel == null) {\r", "+\t\t\tif (trueLabel != null) {\r", "+\t\t\t\t// implicit falling through the FALSE case\r", "+\t\t\t\tLabel internalFalseLabel = new Label(codeStream);\r", "+\t\t\t\tleft.generateOptimizedBoolean(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tcodeStream,\r", "+\t\t\t\t\tnull,\r", "+\t\t\t\t\tinternalFalseLabel,\r", "+\t\t\t\t\ttrue);\r", "+\t\t\t\tif (rightInitStateIndex != -1) {\r", "+\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);\r", "+\t\t\t\t}\r", "+\t\t\t\tright.generateOptimizedBoolean(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tcodeStream,\r", "+\t\t\t\t\ttrueLabel,\r", "+\t\t\t\t\tnull,\r", "+\t\t\t\t\tvalueRequired);\r", "+\t\t\t\tinternalFalseLabel.place();\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\t// implicit falling through the TRUE case\r", "+\t\t\tif (trueLabel == null) {\r", "+\t\t\t\tleft.generateOptimizedBoolean(currentScope, codeStream, null, falseLabel, true);\r", "+\t\t\t\tif (rightInitStateIndex != -1) {\r", "+\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);\r", "+\t\t\t\t}\r", "+\t\t\t\tright.generateOptimizedBoolean(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tcodeStream,\r", "+\t\t\t\t\tnull,\r", "+\t\t\t\t\tfalseLabel,\r", "+\t\t\t\t\tvalueRequired);\r", "+\t\t\t} else {\r", "+\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur\r", "+\t\t\t}\r", "+\t\tif (mergedInitStateIndex != -1) {\r", "+\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(\r", "+\t\t\t\tcurrentScope,\r", "+\t\t\t\tmergedInitStateIndex);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60af2171c094adb26af4e1a10c2ad7bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/OR_OR_Expression.java", "commitBeforeChange": "e5e6f9097f2c3bf7294bd658643d6be9f7aaa5ef", "commitAfterChange": "d00bc48524f3df289951f11fca95cb39820be47f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "signatureAfterChange": "\r \tpublic void generateOptimizedBoolean(\r \t\tBlockScope currentScope,\r \t\tCodeStream codeStream,\r \t\tLabel trueLabel,\r \t\tLabel falseLabel,\r \t\tboolean valueRequired)", "diff": ["- */\r", "-public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired) {\r", "-\tif ((constant != Constant.NotAConstant) && (constant.typeID() == T_boolean)) {\r", "-\t\tif (constant.booleanValue() == true) {\r", "-\t\t\t// constant == true\r", "-\t\t\tif (valueRequired) {\r", "-\t\t\t\tif (falseLabel == null) {\r", "-\t\t\t\t\t// implicit falling through the FALSE case\r", "-\t\t\t\t\tif (trueLabel != null) {\r", "-\t\t\t\t\t\tcodeStream.goto_(trueLabel);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\tif (valueRequired) {\r", "-\t\t\t\tif (falseLabel != null) {\r", "-\t\t\t\t\t// implicit falling through the TRUE case\r", "-\t\t\t\t\tif (trueLabel == null) {\r", "-\t\t\t\t\t\tcodeStream.goto_(falseLabel);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\tcodeStream.recordPositionsFrom(pc, this);\r", "-\t\treturn;\r", "-\t}\r", "-\tgenerateOptimizedConditionalOr(currentScope, codeStream, trueLabel, falseLabel, valueRequired);\r", "-}\r", "+\t */\r", "+\tpublic void generateOptimizedBoolean(\r", "+\t\tBlockScope currentScope,\r", "+\t\tCodeStream codeStream,\r", "+\t\tLabel trueLabel,\r", "+\t\tLabel falseLabel,\r", "+\t\tboolean valueRequired) {\r", "+\t\tif ((constant != Constant.NotAConstant) && (constant.typeID() == T_boolean)) {\r", "+\t\t\tsuper.generateOptimizedBoolean(currentScope, codeStream, trueLabel, falseLabel, valueRequired);\r", "+\t\t\treturn;\r", "+\t\t}\r", "+\t\tint pc = codeStream.position;\r", "+\t\tConstant condConst;\r", "+\t\tif ((condConst = left.conditionalConstant()) != NotAConstant) {\r", "+\t\t\tif (condConst.booleanValue() == true) {\r", "+\t\t\t\t// <something equivalent to true> || x\r", "+\t\t\t\tleft.generateOptimizedBoolean(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tcodeStream,\r", "+\t\t\t\t\ttrueLabel,\r", "+\t\t\t\t\tfalseLabel,\r", "+\t\t\t\t\tfalse);\r", "+\t\t\t\tif (valueRequired) {\r", "+\t\t\t\t\tif ((bits & OnlyValueRequiredMASK) != 0) {\r", "+\t\t\t\t\t\tcodeStream.iconst_1();\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tif (trueLabel != null) {\r", "+\t\t\t\t\t\t\tcodeStream.goto_(trueLabel);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\t// <something equivalent to false> || x\r", "+\t\t\t\tleft.generateOptimizedBoolean(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tcodeStream,\r", "+\t\t\t\t\ttrueLabel,\r", "+\t\t\t\t\tfalseLabel,\r", "+\t\t\t\t\tfalse);\r", "+\t\t\t\tif (rightInitStateIndex != -1) {\r", "+\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);\r", "+\t\t\t\t}\r", "+\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);\r", "+\t\t\t\t\tright.generateOptimizedBoolean(\r", "+\t\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\t\tcodeStream,\r", "+\t\t\t\t\t\ttrueLabel,\r", "+\t\t\t\t\t\tfalseLabel,\r", "+\t\t\t\t\t\tvalueRequired);\r", "+\t\t\tcodeStream.recordPositionsFrom(pc, this);\r", "+\t\t\tif (mergedInitStateIndex != -1) {\r", "+\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tmergedInitStateIndex);\r", "+\t\t\t}\r", "+\t\t\treturn;\r", "+\t\t}\r", "+\t\tif ((condConst = right.conditionalConstant()) != NotAConstant) {\r", "+\t\t\tif (condConst.booleanValue() == true) {\r", "+\t\t\t\t// x || <something equivalent to true>\r", "+\t\t\t\tleft.generateOptimizedBoolean(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tcodeStream,\r", "+\t\t\t\t\ttrueLabel,\r", "+\t\t\t\t\tfalseLabel,\r", "+\t\t\t\t\tfalse);\r", "+\t\t\t\tif (rightInitStateIndex != -1) {\r", "+\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);\r", "+\t\t\t\t}\r", "+\t\t\t\tright.generateOptimizedBoolean(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tcodeStream,\r", "+\t\t\t\t\ttrueLabel,\r", "+\t\t\t\t\tfalseLabel,\r", "+\t\t\t\t\tfalse);\r", "+\t\t\t\tif (valueRequired) {\r", "+\t\t\t\t\tif ((bits & OnlyValueRequiredMASK) != 0) {\r", "+\t\t\t\t\t\tcodeStream.iconst_1();\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tif (trueLabel != null) {\r", "+\t\t\t\t\t\t\tcodeStream.goto_(trueLabel);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\t// x || <something equivalent to false>\r", "+\t\t\t\tif ((bits & OnlyValueRequiredMASK) != 0) {\r", "+\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tleft.generateOptimizedBoolean(\r", "+\t\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\t\tcodeStream,\r", "+\t\t\t\t\t\ttrueLabel,\r", "+\t\t\t\t\t\tfalseLabel,\r", "+\t\t\t\t\t\tvalueRequired);\r", "+\t\t\t\t}\r", "+\t\t\t\tif (rightInitStateIndex != -1) {\r", "+\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);\r", "+\t\t\t\t}\r", "+\t\t\t\tright.generateOptimizedBoolean(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tcodeStream,\r", "+\t\t\t\t\ttrueLabel,\r", "+\t\t\t\t\tfalseLabel,\r", "+\t\t\t\t\tfalse);\r", "+\t\t\tcodeStream.recordPositionsFrom(pc, this);\r", "+\t\t\tif (mergedInitStateIndex != -1) {\r", "+\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tmergedInitStateIndex);\r", "+\t\t\treturn;\r", "+\t\t}\r", "+\t\t// default case\r", "+\t\tif (falseLabel == null) {\r", "+\t\t\tif (trueLabel != null) {\r", "+\t\t\t\t// implicit falling through the FALSE case\r", "+\t\t\t\tleft.generateOptimizedBoolean(currentScope, codeStream, trueLabel, null, true);\r", "+\t\t\t\tright.generateOptimizedBoolean(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tcodeStream,\r", "+\t\t\t\t\ttrueLabel,\r", "+\t\t\t\t\tnull,\r", "+\t\t\t\t\tvalueRequired);\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\t// implicit falling through the TRUE case\r", "+\t\t\tif (trueLabel == null) {\r", "+\t\t\t\tLabel internalTrueLabel = new Label(codeStream);\r", "+\t\t\t\tleft.generateOptimizedBoolean(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tcodeStream,\r", "+\t\t\t\t\tinternalTrueLabel,\r", "+\t\t\t\t\tnull,\r", "+\t\t\t\t\ttrue);\r", "+\t\t\t\tif (rightInitStateIndex != -1) {\r", "+\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);\r", "+\t\t\t\t}\r", "+\t\t\t\tright.generateOptimizedBoolean(\r", "+\t\t\t\t\tcurrentScope,\r", "+\t\t\t\t\tcodeStream,\r", "+\t\t\t\t\tnull,\r", "+\t\t\t\t\tfalseLabel,\r", "+\t\t\t\t\tvalueRequired);\r", "+\t\t\t\tinternalTrueLabel.place();\r", "+\t\t\t} else {\r", "+\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur\r", "+\t\t\t}\r", "+\t\tif (mergedInitStateIndex != -1) {\r", "+\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(\r", "+\t\t\t\tcurrentScope,\r", "+\t\t\t\tmergedInitStateIndex);\r"]}], "num": 60190}
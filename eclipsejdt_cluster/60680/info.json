{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "545c690d957d6e45c1c7f84bd9c1e929", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b915b5724bd1282f3709a1ed4b46fc3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "8975a4993759f4f0cb2d8fff2da5bbb83e0cb45e", "commitAfterChange": "cf2efa3dda03cbfe4678da60ea7973c079a8dcf8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate boolean checkQualification(ASTNode node, char[] qualifiedPackageName, char[] qualifiedSourceName)", "signatureAfterChange": " \tprivate boolean checkTypeArgument(Scanner scanner, CheckState state) throws InvalidInputException", "diff": ["-\t}", "-\tprivate boolean checkQualification(ASTNode node, char[] qualifiedPackageName, char[] qualifiedSourceName) {", "-\t\tif (this.qualifiedSelection != null) {", "-\t\t\tif(node != null && node instanceof QualifiedTypeReference) {", "-\t\t\t\tchar[] tokens = CharOperation.concatWith(((QualifiedTypeReference) node).tokens, '.');", "-\t\t\t\tif(CharOperation.equals(tokens, this.qualifiedSelection)) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\tchar[] qualifiedTypeName = CharOperation.concat(qualifiedPackageName, qualifiedSourceName, '.');", "-\t\t\treturn CharOperation.equals(qualifiedTypeName, this.qualifiedSelection) ||", "-\t\t\t\t\tCharOperation.equals(qualifiedSourceName, this.qualifiedSelection);", "-\t\t}", "-\t\treturn true;", "+\tprivate boolean checkTypeArgument(Scanner scanner, CheckState state) throws InvalidInputException {", "+\t\tboolean expectingIdentifier = true;", "+\t\t", "+\t\tint token;", "+\t\tdo {", "+\t\t\ttoken = scanner.getNextToken();", "+\t", "+\t\t\tswitch(token) {", "+\t\t\t\tcase TerminalTokens.TokenNameDOT :", "+\t\t\t\t\tif (expectingIdentifier)", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\texpectingIdentifier = true;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "+\t\t\t\t\tif (!expectingIdentifier)", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\texpectingIdentifier = false;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase TerminalTokens.TokenNameCOMMA :", "+\t\t\t\t\tif (expectingIdentifier)", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\texpectingIdentifier = true;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase TerminalTokens.TokenNameLESS :", "+\t\t\t\t\tint oldDepth = state.depth;", "+\t\t\t\t\tstate.depth++;", "+\t\t\t\t\tif(checkTypeArgument(scanner, state)) {", "+\t\t\t\t\t\tif(state.depth < oldDepth) {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase TerminalTokens.TokenNameGREATER :", "+\t\t\t\t\tstate.depth--;", "+\t\t\t\t\treturn state.depth >= 0;", "+\t\t\t\tcase TerminalTokens.TokenNameRIGHT_SHIFT :", "+\t\t\t\t\tstate.depth-=2;", "+\t\t\t\t\treturn state.depth >= 0;", "+\t\t\t\tcase TerminalTokens.TokenNameUNSIGNED_RIGHT_SHIFT :", "+\t\t\t\t\tstate.depth-=3;", "+\t\t\t\t\treturn state.depth >= 0;", "+\t\t\t\tcase TerminalTokens.TokenNameQUESTION :\t", "+\t\t\t\t\ttoken = scanner.getNextToken();", "+\t\t\t\t\tif(token != TerminalTokens.TokenNameextends &&", "+\t\t\t\t\t\t\ttoken != TerminalTokens.TokenNamesuper) {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\ttoken = scanner.getNextToken();", "+\t\t\t\t\tif(token != TerminalTokens.TokenNameIdentifier)", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t", "+\t\t\t\t\texpectingIdentifier = false;", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\treturn false;", "+\t\t\t}", "+\t\t} while (token != TerminalTokens.TokenNameEOF);", "+\t\t", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c96d8d457d9a2a57ee276c60857b8b1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "6b22001068ed91ead38729b06cb63f4a79acaa87", "commitAfterChange": "09b2a60a289857be8b68f0bdade8ca62b9081359", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate boolean checkTypeArgument(Scanner scanner, CheckState state) throws InvalidInputException", "signatureAfterChange": " \tprivate boolean checkTypeArgument(Scanner scanner) throws InvalidInputException", "diff": ["-\tprivate boolean checkTypeArgument(Scanner scanner, CheckState state) throws InvalidInputException {", "-\t\tboolean expectingIdentifier = true;", "-\t\t", "+\tprivate boolean checkTypeArgument(Scanner scanner) throws InvalidInputException {", "+\t\tint depth = 1;", "+\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\tcase TerminalTokens.TokenNameDOT :", "-\t\t\t\t\tif (expectingIdentifier)", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\texpectingIdentifier = true;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "-\t\t\t\t\tif (!expectingIdentifier)", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\texpectingIdentifier = false;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase TerminalTokens.TokenNameCOMMA :", "-\t\t\t\t\tif (expectingIdentifier)", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\texpectingIdentifier = true;", "-\t\t\t\t\tbreak;", "-\t\t\t\t\tint oldDepth = state.depth;", "-\t\t\t\t\tstate.depth++;", "-\t\t\t\t\tif(checkTypeArgument(scanner, state)) {", "-\t\t\t\t\t\tif(state.depth < oldDepth) {", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "+\t\t\t\t\tdepth++;", "+\t\t\t\t\tbuffer.append(scanner.getCurrentTokenSource());", "-\t\t\t\t\tstate.depth--;", "-\t\t\t\t\treturn state.depth >= 0;", "-\t\t\t\tcase TerminalTokens.TokenNameRIGHT_SHIFT :", "-\t\t\t\t\tstate.depth-=2;", "-\t\t\t\t\treturn state.depth >= 0;", "-\t\t\t\tcase TerminalTokens.TokenNameUNSIGNED_RIGHT_SHIFT :", "-\t\t\t\t\tstate.depth-=3;", "-\t\t\t\t\treturn state.depth >= 0;", "-\t\t\t\tcase TerminalTokens.TokenNameQUESTION :\t", "-\t\t\t\t\ttoken = scanner.getNextToken();", "-\t\t\t\t\tif(token != TerminalTokens.TokenNameextends &&", "-\t\t\t\t\t\t\ttoken != TerminalTokens.TokenNamesuper) {", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\ttoken = scanner.getNextToken();", "-\t\t\t\t\tif(token != TerminalTokens.TokenNameIdentifier)", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t", "-\t\t\t\t\texpectingIdentifier = false;", "+\t\t\t\t\tdepth--;", "+\t\t\t\t\tbuffer.append(scanner.getCurrentTokenSource());", "-\t\t\t\tdefault:", "-\t\t\t\t\treturn false;", "+\t\t\t\tcase TerminalTokens.TokenNameRIGHT_SHIFT :", "+\t\t\t\t\tdepth-=2;", "+\t\t\t\t\tbuffer.append(scanner.getCurrentTokenSource());", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase TerminalTokens.TokenNameUNSIGNED_RIGHT_SHIFT :", "+\t\t\t\t\tdepth-=3;", "+\t\t\t\t\tbuffer.append(scanner.getCurrentTokenSource());", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase TerminalTokens.TokenNameextends :", "+\t\t\t\tcase TerminalTokens.TokenNamesuper :", "+\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\tbuffer.append(scanner.getCurrentTokenSource());", "+\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase TerminalTokens.TokenNameCOMMA :", "+\t\t\t\t\tif(depth == 1) {", "+\t\t\t\t\t\tint length = buffer.length();", "+\t\t\t\t\t\tchar[] typeRef = new char[length];", "+\t\t\t\t\t\tbuffer.getChars(0, length, typeRef, 0);", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tSignature.createTypeSignature(typeRef, true);", "+\t\t\t\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\t\t\t} catch(IllegalArgumentException e) {", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault :", "+\t\t\t\t\tbuffer.append(scanner.getCurrentTokenSource());", "+\t\t\t\t\tbreak;", "+\t\t\t\t", "-\t\t} while (token != TerminalTokens.TokenNameEOF);", "+\t\t\tif(depth < 0) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t} while (depth != 0 && token != TerminalTokens.TokenNameEOF);", "+\t\t", "+\t\tif(depth == 0) {", "+\t\t\tint length = buffer.length() - 1;", "+\t\t\tchar[] typeRef = new char[length];", "+\t\t\tbuffer.getChars(0, length, typeRef, 0);", "+\t\t\ttry {", "+\t\t\t\tSignature.createTypeSignature(typeRef, true);", "+\t\t\t\treturn true;", "+\t\t\t} catch(IllegalArgumentException e) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}"]}], "num": 60680}
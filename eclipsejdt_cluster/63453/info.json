{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b9aa989075edaa632762e5dfd1aba5a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5597e03d042b0612cef2f8c934c0bc75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "327b5dfd30eb7c1b7b8d5b92fb6531396634b894", "commitAfterChange": "3136665d2e655f6ccac7bdac4c22374ba8db8e83", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " public char[] getContents()", "signatureAfterChange": " public char[] getContents()", "diff": ["-\ttry {", "-\t\tIBuffer buffer = this.getBuffer();", "-\t\treturn buffer == null ? CharOperation.NO_CHAR : buffer.getCharacters();", "-\t} catch (JavaModelException e) {", "-\t\treturn CharOperation.NO_CHAR;", "+\tIBuffer buffer = getBufferManager().getBuffer(this);", "+\tif (buffer == null) {", "+\t\t// no need to force opening of CU to get the content", "+\t\t// also this cannot be a working copy, as its buffer is never closed while the working copy is alive", "+\t\ttry {", "+\t\t\treturn Util.getResourceContentsAsCharArray((IFile) getResource());", "+\t\t} catch (JavaModelException e) {", "+\t\t\treturn CharOperation.NO_CHAR;", "+\t\t}", "+\treturn buffer.getCharacters();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2faae79cbcdaeb6b4647d0297ae089f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "7b0f09fd73b49ba4dc507ba4a634d425ab3e92c2", "commitAfterChange": "90ccf89195ab29ecb5a569cf526f683aefa3263d", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "\r protected IBuffer openBuffer(IProgressMonitor pm) throws JavaModelException", "signatureAfterChange": "\r protected IBuffer openBuffer(IProgressMonitor pm) throws JavaModelException", "diff": ["-\tIBuffer buf = getBufferManager().openBuffer((IFile) getUnderlyingResource(), pm, this, isReadOnly());\r", "-\tbuf.addBufferChangedListener(this);\r", "-\treturn buf;\r", "+\t// create buffer\r", "+\tBufferManager bufManager = getBufferManager();\r", "+\tIBuffer buffer = bufManager.getDefaultBufferFactory().createBuffer(this);\r", "+\tbufManager.addBuffer(buffer);\r", "+\t\r", "+\t// set the buffer source\r", "+\tif (buffer != null && buffer.getCharacters() == null){\r", "+\t\tbuffer.setContents(Util.getResourceContentsAsCharArray((IFile)this.getResource()));\r", "+\t}\r", "+\t\t\t\r", "+\t// listen to buffer changes\r", "+\tbuffer.addBufferChangedListener(this);\r", "+\t\r", "+\treturn buffer;\r"]}], "num": 63453}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b280a77a816c9f1239ac8f0f3b0da0fc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b46441d85b3284ad8e0ba487077bbb2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "605463bb98397b59c78b7fc56ee33e7e22fd8367", "commitAfterChange": "7428bd3b18a16b1860e6a1a28fbc6cd63967fdc6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " protected void assertSourceEquals(String message, String expected, String actual)", "signatureAfterChange": " protected void assertSourceEquals(String message, String expected, String actual)", "diff": ["-\tactual = org.eclipse.jdt.core.tests.util.Util.convertToIndependantLineDelimiter(actual);", "+\tactual = Util.convertToIndependantLineDelimiter(actual);", "+\t\t\tif (IGNORE_WHITESPACES) {", "+\t\t\t\tString trimmedExpected = ModelTestsUtil.removeWhiteSpace(expected);", "+\t\t\t\tString trimmedActual= ModelTestsUtil.removeWhiteSpace(actual);", "+\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\t\tthis.spaceFailures++;", "+\t\t\t\t\tSystem.out.println(\"n\ufffd\"+this.spaceFailures+\": Different spaces than old formatter for \"+this.file.getName());", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t} else if (IGNORE_LINES_LEADING_WHITESPACES) {", "+\t\t\t\tString trimmedExpected = ModelTestsUtil.trimLinesLeadingWhitespaces(expected);", "+\t\t\t\tString trimmedActual= ModelTestsUtil.trimLinesLeadingWhitespaces(actual);", "+\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\t\tthis.spaceFailures++;", "+\t\t\t\t\tSystem.out.println(\"n\ufffd\"+this.spaceFailures+\": Different line leading spaces than old formatter for \"+this.file.getName());", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d99c9db884aac862fac289173cb74917", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "471b30fcd9175fdd69611c88984722b9e0b5e4ee", "commitAfterChange": "1a356ccfb3b5b00256393a405276ebc654766b8b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  String runFormatter(CodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length, String lineSeparator)", "signatureAfterChange": "  String runFormatter(CodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length, String lineSeparator)", "diff": ["-\t\t\t\t\t\tthis.spaceFailures++;", "-\t\t\t\t\t\tSystem.out.println(\"n\ufffd\"+this.spaceFailures+\": \"+counterString+\" formatting has different spaces than first one for \"+this.file.getName());", "+\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);", "-\t\t\t\t\t\tthis.spaceFailures++;", "-\t\t\t\t\t\tSystem.out.println(\"n\ufffd\"+this.spaceFailures+\": \"+counterString+\" formatting has different lines leading spaces than first one for \"+this.file.getName());", "+\t\t\t\t\t\tthis.leadingWhitespacesFailures.add(this.path);", "+\t\t\t\t\t\tthis.hasSpaceFailure = true;", "+\t\t\t\t\t\treturn result;", "+\t\t\t\t\t}", "+\t\t\t\t\tString compressedResult = ModelTestsUtil.removeWhiteSpace(result);", "+\t\t\t\t\tString compressedNewResult = ModelTestsUtil.removeWhiteSpace(newResult);", "+\t\t\t\t\tif (compressedResult.equals(compressedNewResult)) {", "+\t\t\t\t\t\tthis.whitespacesFailures.add(this.path);"]}], "num": 32975}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b953e915d6b2682a395ca3cf1488f1a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad58eec6749a73ca0abf76f415ee4c62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "b56e158886e2aa788170d58a91d156aead978bb2", "commitAfterChange": "49293b1e00b2d634f6e8ca0ca2462907a22f935a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate void processCompilationUnitResource(ICompilationUnit source, IPackageFragment dest) throws JavaModelException", "signatureAfterChange": " \tprivate void processCompilationUnitResource(ICompilationUnit source, IPackageFragment dest) throws JavaModelException", "diff": ["-\t\t// copy resource", "+\t\t// TODO (frederic) remove when bug 67606 will be fixed (bug 67823)", "+\t\t// store encoding (fix bug 66898)", "-\t\tString encoding = null;", "+\t\tString sourceEncoding = null;", "-\t\t\tencoding = sourceResource.getCharset();", "+\t\t\tsourceEncoding = sourceResource.getCharset(false);", "-\t\t\t// use no encoding", "+\t\t\t// no problem, use default encoding", "+\t\t// end todo", "+\t\t// copy resource", "-\t\t\t\t\t", "+\t\t\t\t\tString encoding = null;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\t// TODO (frederic) remove when bug 67606 will be fixed (bug 67823)", "+\t\t\t\t\t\t// fix bug 66898", "+\t\t\t\t\t\tif (sourceEncoding != null) destFile.setCharset(sourceEncoding);", "+\t\t\t\t\t\t// end todo", "+\t\t\t\t\t\tencoding = destFile.getCharset();", "+\t\t\t\t\t}", "+\t\t\t\t\tcatch (CoreException ce) {", "+\t\t\t\t\t\t// use no encoding", "+\t\t\t\t\t}", "+\t\t\t\t\tString encoding = null;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\t// TODO (frederic) remove when bug 67606 will be fixed (bug 67823)", "+\t\t\t\t\t\t// fix bug 66898", "+\t\t\t\t\t\tif (sourceEncoding != null) destFile.setCharset(sourceEncoding);", "+\t\t\t\t\t\t// end todo", "+\t\t\t\t\t\tencoding = destFile.getCharset();", "+\t\t\t\t\t}", "+\t\t\t\t\tcatch (CoreException ce) {", "+\t\t\t\t\t\t// use no encoding", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2ff744b2717be296d26bd092c787f94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/BinaryFileOutputStream.java", "commitBeforeChange": "7500727de4fcd9463cbf3fa6897680f7408a210c", "commitAfterChange": "b857987e664cb278638647fdea307afe81b34f28", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t@Override \tpublic void close() throws IOException", "signatureAfterChange": " \t \t@Override \tpublic void close() throws IOException", "diff": ["-\t\tInputStream contents = new ByteArrayInputStream(toByteArray());", "-\t\tif (!_file.exists()) {", "-\t\t\tsaveToDisk(contents, true);", "-\t\t\treturn;", "-\t\t}", "-\t\tboolean needToWriteData = true;", "+\t\tInputStream contents = null;", "-\t\t\t// Only write the contents if the data is different", "-\t\t\tInputStream in = new ByteArrayInputStream(toByteArray());", "-\t\t\tInputStream oldData = new BufferedInputStream(_file.getContents());", "-\t\t\tif (FileSystemUtil.compareStreams(in, oldData)) {", "-\t\t\t\tneedToWriteData = false;", "+\t\t\tcontents = new ByteArrayInputStream(toByteArray());", "+\t\t\tif (!_file.exists()) {", "+\t\t\t\tsaveToDisk(contents, true);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tboolean needToWriteData = true;", "+\t\t\tInputStream in = null;", "+\t\t\tInputStream oldData = null;", "+\t\t\ttry {", "+\t\t\t\t// Only write the contents if the data is different", "+\t\t\t\tin = new ByteArrayInputStream(toByteArray());", "+\t\t\t\toldData = new BufferedInputStream(_file.getContents());", "+\t\t\t\tif (FileSystemUtil.compareStreams(in, oldData)) {", "+\t\t\t\t\tneedToWriteData = false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcatch (CoreException ce) {", "+\t\t\t\t// Ignore -- couldn't read the old data, so assume it's different", "+\t\t\t}", "+\t\t\tfinally {", "+\t\t\t\ttry {", "+\t\t\t\t\tif (in != null) in.close(); ", "+\t\t\t\t} ", "+\t\t\t\tcatch (IOException ioe) {", "+\t\t\t\t}", "+\t\t\t\ttry {", "+\t\t\t\t\tif (oldData != null) oldData.close(); ", "+\t\t\t\t} ", "+\t\t\t\tcatch (IOException ioe) {", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (needToWriteData) {", "+\t\t\t\tcontents.reset();", "+\t\t\t\tsaveToDisk(contents, false);", "-\t\tcatch (CoreException ce) {", "-\t\t\t// Ignore -- couldn't read the old data, so assume it's different", "-\t\t}", "-\t\tif (needToWriteData) {", "-\t\t\tcontents.reset();", "-\t\t\tsaveToDisk(contents, false);", "+\t\tfinally {", "+\t\t\ttry {", "+\t\t\t\tif (contents != null) contents.close(); ", "+\t\t\t} ", "+\t\t\tcatch (IOException ioe) {", "+\t\t\t}"]}], "num": 918}
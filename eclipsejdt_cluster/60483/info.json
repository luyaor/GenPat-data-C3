{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58c143b7e5aafc05b8a3885aae31596c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b004ffa443f842fcd996e2ecf4be9f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "14f758abdbf93582152d632f97767b107ab4115d", "commitAfterChange": "8879b56fd07da9d038783d336704cc8af2052901", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws CoreException", "signatureAfterChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws CoreException", "diff": ["-\t\tIPath[] scopeProjectsAndJars = this.scope.enclosingProjectsAndJars();", "-\t\tint scopeLength = scopeProjectsAndJars.length;", "+\t\tboolean isWorkspaceScope = this.scope == JavaModelManager.getJavaModelManager().getWorkspaceScope();", "+\t\tIPath[] scopeProjectsAndJars =  isWorkspaceScope ? null : this.scope.enclosingProjectsAndJars();", "+\t\tint scopeLength = isWorkspaceScope ? 0 : scopeProjectsAndJars.length;", "+\t\tSimpleSet packages = new SimpleSet();", "-\t\t\tboolean found = false;", "-\t\t\tfor (int j=0; j<scopeLength; j++) {", "-\t\t\t\tif (projects[i].getPath().equals(scopeProjectsAndJars[j])) {", "-\t\t\t\t\tfound = true;", "-\t\t\t\t\tbreak;", "+\t\t\tif (!isWorkspaceScope) {", "+\t\t\t\tboolean found = false;", "+\t\t\t\tfor (int j=0; j<scopeLength; j++) {", "+\t\t\t\t\tif (javaProject.getPath().equals(scopeProjectsAndJars[j])) {", "+\t\t\t\t\t\tfound = true;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\tif (!found) continue;", "-\t\t\tif (!found) continue;", "+\t\t\t// Get all project package fragment names", "+\t\t\t// Report matches avoiding duplicate names", "-\t\t\t\tIResource resource = fragment.getResource();", "-\t\t\t\tif (resource == null) // case of a file in an external jar", "-\t\t\t\t\tresource = javaProject.getProject();", "-\t\t\t\ttry {", "-\t\t\t\t\tif (encloses(fragment)) {", "-\t\t\t\t\t\tSearchMatch match = new PackageDeclarationMatch(fragment, SearchMatch.A_ACCURATE, -1, -1, participant, resource);", "-\t\t\t\t\t\treport(match);", "+\t\t\t\tif (packages.addIfNotIncluded(fragment) == null) continue;", "+\t\t\t\tif (encloses(fragment)) {", "+\t\t\t\t\tIResource resource = fragment.getResource();", "+\t\t\t\t\tif (resource == null) // case of a file in an external jar", "+\t\t\t\t\t\tresource = javaProject.getProject();", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tif (encloses(fragment)) {", "+\t\t\t\t\t\t\tSearchMatch match = new PackageDeclarationMatch(fragment, SearchMatch.A_ACCURATE, -1, -1, participant, resource);", "+\t\t\t\t\t\t\treport(match);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\tthrow e;", "+\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\tthrow new JavaModelException(e);", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\tthrow e;", "-\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\tthrow new JavaModelException(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e034bd948e21ec8abc1c42b7a8563ae2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "5af3ec11c73ebd5f465c42ddba07188d87fc00f1", "commitAfterChange": "b246de6fdcd5a901a16dcaeba98ae727a49eb635", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws CoreException", "signatureAfterChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws CoreException", "diff": ["+\t\tIPath[] scopeProjectsAndJars = this.scope.enclosingProjectsAndJars();", "+\t\tint scopeLength = scopeProjectsAndJars.length;", "-\t\t\tIPackageFragmentRoot[] roots = null;", "-\t\t\ttry {", "-\t\t\t\troots = javaProject.getPackageFragmentRoots();", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// java project doesn't exist -> continue with next project (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=75561)", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\tfor (int j = 0, rootsLength = roots.length; j < rootsLength; j++) {", "-\t\t\t\tIJavaElement[] pkgs = null;", "-\t\t\t\ttry {", "-\t\t\t\t\tpkgs = roots[j].getChildren();", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t// pkg fragment root doesn't exist -> continue with next root (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=75561)", "-\t\t\t\t\tcontinue;", "+\t\t\t// Verify that project belongs to the scope", "+\t\t\tboolean found = false;", "+\t\t\tfor (int j=0; j<scopeLength; j++) {", "+\t\t\t\tif (projects[i].getPath().equals(scopeProjectsAndJars[j])) {", "+\t\t\t\t\tfound = true;", "+\t\t\t\t\tbreak;", "-\t\t\t\tfor (int k = 0, pksLength = pkgs.length; k < pksLength; k++) {", "-\t\t\t\t\tIPackageFragment pkg = (IPackageFragment) pkgs[k];", "-\t\t\t\t\tif (!pkg.exists()) continue; // package doesn't exist -> continue with next package (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=75561)", "-\t\t\t\t\tif (pkgPattern.matchesName(pkgPattern.pkgName, pkg.getElementName().toCharArray())) {", "-\t\t\t\t\t\tIResource resource = pkg.getResource();", "-\t\t\t\t\t\tif (resource == null) // case of a file in an external jar", "-\t\t\t\t\t\t\tresource = javaProject.getProject();", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tif (encloses(pkg)) {", "-\t\t\t\t\t\t\t\tSearchMatch match = new PackageDeclarationMatch(pkg, SearchMatch.A_ACCURATE, -1, -1, participant, resource);", "-\t\t\t\t\t\t\t\treport(match);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\tthrow e;", "-\t\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\t\tthrow new JavaModelException(e);", "-\t\t\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (!found) continue;", "+\t\t\tthis.nameLookup = ((JavaProject) projects[i]).newNameLookup(this.workingCopies);", "+\t\t\tIPackageFragment[] packageFragments = this.nameLookup.findPackageFragments(new String(pkgPattern.pkgName), true, true);", "+\t\t\tint pLength = packageFragments == null ? 0 : packageFragments.length;", "+\t\t\tfor (int p=0; p<pLength; p++) {", "+\t\t\t\tIPackageFragment fragment = packageFragments[p];", "+\t\t\t\tIResource resource = fragment.getResource();", "+\t\t\t\tif (resource == null) // case of a file in an external jar", "+\t\t\t\t\tresource = javaProject.getProject();", "+\t\t\t\ttry {", "+\t\t\t\t\tif (encloses(fragment)) {", "+\t\t\t\t\t\tSearchMatch match = new PackageDeclarationMatch(fragment, SearchMatch.A_ACCURATE, -1, -1, participant, resource);", "+\t\t\t\t\t\treport(match);", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\tthrow e;", "+\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\tthrow new JavaModelException(e);"]}], "num": 60483}
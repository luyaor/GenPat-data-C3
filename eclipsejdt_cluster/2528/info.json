{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf43fb9239f354d7d1be915b09646490", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41e0467f06fd522456bfd5174feae068", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "30b30e8c56b7e7a44eebf42932935c15fe10b232", "commitAfterChange": "06e44af1d1177a8820136cde1fbe3146b9563e7f", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tprotected void compile(String pluginID, String options, boolean log) throws IOException, CoreException", "signatureAfterChange": " \tprotected void compile(String pluginID, String options, boolean log, String[] srcPaths) throws IOException, CoreException", "diff": ["-\tprotected void compile(String pluginID, String options, boolean log) throws IOException, CoreException {", "+\tprotected void compile(String pluginID, String options, boolean log, String[] srcPaths) throws IOException, CoreException {", "-\t\tString sources = targetWorkspacePath;", "-//\t\tif (JavaCore.PLUGIN_ID.equals(pluginID)) sources += File.separator + \"compiler\";", "+\t\tString workspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath()+File.separator;", "+\t\tString binPath = File.separator+\"bin\"+File.pathSeparator;", "+\t\tString classpath = \" -cp \" +", "+\t\t\tworkspacePath+\"org.eclipse.osgi\" + binPath +", "+\t\t\tworkspacePath+\"org.eclipse.jface\" + binPath +", "+\t\t\tworkspacePath+\"org.eclipse.core.runtime\" + binPath +", "+\t\t\tworkspacePath+\"org.eclipse.core.resources\"+binPath +", "+\t\t\tworkspacePath+\"org.eclipse.text\"+binPath;", "+\t\tString sources = srcPaths == null ? \" \"+targetWorkspacePath : \"\";", "+\t\tif (srcPaths != null) {", "+\t\t\tfor (int i=0, l=srcPaths.length; i<l; i++) {", "+\t\t\t\tString path = workspacePath + pluginID + File.separator + srcPaths[i];", "+\t\t\t\tif (path.indexOf(\" \") > 0) {", "+\t\t\t\t\tpath = \"\\\"\" + path + \"\\\"\";", "+\t\t\t\t}", "+\t\t\t\tsources += \" \" + path;", "+\t\t\t}", "+\t\t}", "-\t\tfinal String cmdLine = sources + compliance + \" -g -preserveAllLocals \"+(options==null?\"\":options)+\" -d \" + COMPILER_OUTPUT_DIR + (log?\" -log \"+logFileName:\"\");", "+\t\tfinal String cmdLine = classpath + compliance + \" -g -preserveAllLocals \"+(options==null?\"\":options)+\" -d \" + COMPILER_OUTPUT_DIR + (log?\" -log \"+logFileName:\"\") + sources;", "+", "+\t\t// Clean writer", "+\t\terr = null;", "+\t\tout = null;", "+\t\terrStrWriter = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bea4025dc33fb174e431156111efa61e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java", "commitBeforeChange": "8f26d11c4ba332f2be7ec8dbf571250694ed7207", "commitAfterChange": "43a0c55f94ed86f30ef95f5f1ba26a35207a73d3", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tvoid basicMatch(ASTNode node)", "signatureAfterChange": " \tvoid basicMatch(ASTNode node)", "diff": ["-\t\tint count = nodeCount(node);", "+\t\tTestMatcher[] m = {", "+\t\t\tnew TestMatcher(),", "+\t\t\tnew TestMatcher(true),", "+\t\t\tnew TestMatcher(false)};", "+\t\tfor (int i = 0; i < m.length; i++) {", "+\t\t\t// check that matcher was called with right arguments", "+\t\t\t// and that matches succeed", "+\t\t\tTestMatcher m1 = m[i];", "+\t\t\tObject o1 = new Object();", "+\t\t\tm1.result = true;", "+\t\t\tboolean result = node.subtreeMatch(m1, o1);", "+\t\t\tassertTrue(m1.matchCalls == 1);", "+\t\t\tassertTrue(m1.receiverNode == node);", "+\t\t\tassertTrue(m1.otherNode == o1);", "+\t\t\tassertTrue(result == true);", "+\t\t}", "-\t\t// check that matcher was called with right arguments", "-\t\t// and that matches succeed", "-\t\tTestMatcher m1 = new TestMatcher();", "-\t\tObject o1 = new Object();", "-\t\tm1.result = true;", "-\t\tboolean result = node.subtreeMatch(m1, o1);", "-\t\tassertTrue(m1.matchCalls == 1);", "-\t\tassertTrue(m1.receiverNode == node);", "-\t\tassertTrue(m1.otherNode == o1);", "-\t\tassertTrue(result == true);", "+\t\tm = new TestMatcher[] {", "+\t\t\t\t\t\t\tnew TestMatcher(),", "+\t\t\t\t\t\t\tnew TestMatcher(true),", "+\t\t\t\t\t\t\tnew TestMatcher(false)};", "+\t\tfor (int i = 0; i < m.length; i++) {", "+\t\t\t// check that matcher was called with right arguments", "+\t\t\t// and that non-matches fail", "+\t\t\tTestMatcher m1 = m[i];", "+\t\t\tObject o1 = new Object();", "+\t\t\tm1.result = false;", "+\t\t\tboolean result = node.subtreeMatch(m1, o1);", "+\t\t\tassertTrue(m1.matchCalls == 1);", "+\t\t\tassertTrue(m1.receiverNode == node);", "+\t\t\tassertTrue(m1.otherNode == o1);", "+\t\t\tassertTrue(result == false);", "+\t\t}", "-\t\t// check that matcher was called with right arguments", "-\t\t// and that non-matches fail", "-\t\tm1 = new TestMatcher();", "-\t\to1 = new Object();", "-\t\tm1.result = false;", "-\t\tresult = node.subtreeMatch(m1, o1);", "-\t\tassertTrue(m1.matchCalls == 1);", "-\t\tassertTrue(m1.receiverNode == node);", "-\t\tassertTrue(m1.otherNode == o1);", "-\t\tassertTrue(result == false);", "+\t\t// check that ASTMatcher() default implementations delegate", "+\t\t{", "+\t\t\tint count = nodeCount(node, false); // ignore doc tags", "+\t\t\tTestMatcher m1 = new TestMatcher();", "+\t\t\tm1.superMatch = true;", "+\t\t\tboolean result = node.subtreeMatch(m1, node);", "+\t\t\tassertTrue(m1.matchCalls == count);", "+\t\t\tassertTrue(result == true);", "+\t\t}", "-\t\t// check that ASTMatcher default implementations delegate", "-\t\tm1 = new TestMatcher();", "-\t\tm1.superMatch = true;", "-\t\tresult = node.subtreeMatch(m1, node);", "-\t\tassertTrue(m1.matchCalls == count);", "-\t\tassertTrue(result == true);", "+\t\t// check that ASTMatcher(false) default implementations delegate", "+\t\t{", "+\t\t\tint count = nodeCount(node, false); // ignore doc tags", "+\t\t\tTestMatcher m1 = new TestMatcher(false);", "+\t\t\tm1.superMatch = true;", "+\t\t\tboolean result = node.subtreeMatch(m1, node);", "+\t\t\tassertTrue(m1.matchCalls == count);", "+\t\t\tassertTrue(result == true);", "+\t\t}", "+\t\t", "+\t\t// check that ASTMatcher(true) default implementations delegate", "+\t\t{", "+\t\t\tint count = nodeCount(node, true); // include doc tags", "+\t\t\tTestMatcher m1 = new TestMatcher(true);", "+\t\t\tm1.superMatch = true;", "+\t\t\tboolean result = node.subtreeMatch(m1, node);", "+\t\t\tassertTrue(m1.matchCalls == count);", "+\t\t\tassertTrue(result == true);", "+\t\t}"]}], "num": 2528}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b402a0ab113817926ae1da76e02dd241", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7635ddf918ef411748a78516b6628af4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "signatureAfterChange": "\r public void accept(ISourceType sourceType, PackageBinding packageBinding)", "diff": ["+ */\r", "+public void accept(ISourceType sourceType, PackageBinding packageBinding) {\r", "+\twhile (sourceType.getEnclosingType() != null) sourceType = sourceType.getEnclosingType();\r", "+\tCompilationResult result = new CompilationResult(sourceType.getFileName(), 1, 1); // need to hold onto this\r", "+\tCompilationUnitDeclaration unit =\r", "+\t\tSourceTypeConverter.buildCompilationUnit(sourceType, true, true, lookupEnvironment.problemReporter, result);\r", "+\tif (unit != null) {\r", "+\t\tthis.lookupEnvironment.buildTypeBindings(unit);\r", "+\t\tthis.lookupEnvironment.completeTypeBindings(unit, true);\r", "+\t}\r", "+}\r", "-\t */\r", "-\tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding) {\r", "-\t\tISourceType sourceType = sourceTypes[0];\r", "-\t\twhile (sourceType.getEnclosingType() != null)\r", "-\t\t\tsourceType = sourceType.getEnclosingType();\r", "-\t\tCompilationUnitDeclaration unit;\r", "-\t\tif (sourceType instanceof SourceTypeElementInfo) {\r", "-\t\t\t// get source\r", "-\t\t\tSourceTypeElementInfo elementInfo = (SourceTypeElementInfo) sourceType;\r", "-\t\t\tIType type = elementInfo.getHandle();\r", "-\t\t\t\tfinal IFile file = (IFile) type.getUnderlyingResource();\r", "-\t\t\t\tfinal char[] source = PotentialMatch.getContents(file);\r", "-\r", "-\t\t\t\t// get main type name\r", "-\t\t\t\tfinal String fileName = file.getFullPath().lastSegment();\r", "-\t\t\t\tfinal char[] mainTypeName =\r", "-\t\t\t\t\tfileName.substring(0, fileName.length() - 5).toCharArray();\r", "-\r", "-\t\t\t\t// source unit\r", "-\t\t\t\tICompilationUnit sourceUnit = new ICompilationUnit() {\r", "-\t\t\t\t\tpublic char[] getContents() {\r", "-\t\t\t\t\t\treturn source;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tpublic char[] getFileName() {\r", "-\t\t\t\t\t\treturn fileName.toCharArray();\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tpublic char[] getMainTypeName() {\r", "-\t\t\t\t\t\treturn mainTypeName;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t};\r", "-\r", "-\t\t\t\t// diet parse\r", "-\t\t\t\tCompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0);\r", "-\t\t\t\tunit = this.parser.dietParse(sourceUnit, compilationResult);\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\tunit = null;\r", "-\t\t} else {\r", "-\t\t\tCompilationResult result =\r", "-\t\t\t\tnew CompilationResult(sourceType.getFileName(), 0, 0);\r", "-\t\t\tunit =\r", "-\t\t\t\tSourceTypeConverter.buildCompilationUnit(\r", "-\t\t\t\t\tsourceTypes,\r", "-\t\t\t\t\ttrue,\r", "-\t\t\t\t\ttrue,\r", "-\t\t\t\t\tlookupEnvironment.problemReporter,\r", "-\t\t\t\t\tresult);\r", "-\t\tif (unit != null) {\r", "-\t\t\tthis.lookupEnvironment.buildTypeBindings(unit);\r", "-\t\t\tthis.lookupEnvironment.completeTypeBindings(unit, true);\r", "-\t\t\tthis.parsedUnits.put(sourceType.getQualifiedName(), unit);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bd6b2e6c8d602c2b25f2a126296f651", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "signatureAfterChange": "\r public void accept(ISourceType sourceType, PackageBinding packageBinding)", "diff": ["+ */\r", "+public void accept(ISourceType sourceType, PackageBinding packageBinding) {\r", "+\twhile (sourceType.getEnclosingType() != null) sourceType = sourceType.getEnclosingType();\r", "+\tCompilationResult result = new CompilationResult(sourceType.getFileName(), 1, 1); // need to hold onto this\r", "+\tCompilationUnitDeclaration unit =\r", "+\t\tSourceTypeConverter.buildCompilationUnit(sourceType, true, true, lookupEnvironment.problemReporter, result);\r", "+\tif (unit != null) {\r", "+\t\tthis.lookupEnvironment.buildTypeBindings(unit);\r", "+\t\tthis.lookupEnvironment.completeTypeBindings(unit, true);\r", "+\t}\r", "+}\r", "-\t */\r", "-\tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding) {\r", "-\t\tISourceType sourceType = sourceTypes[0];\r", "-\t\twhile (sourceType.getEnclosingType() != null)\r", "-\t\t\tsourceType = sourceType.getEnclosingType();\r", "-\t\tCompilationUnitDeclaration unit;\r", "-\t\tif (sourceType instanceof SourceTypeElementInfo) {\r", "-\t\t\t// get source\r", "-\t\t\tSourceTypeElementInfo elementInfo = (SourceTypeElementInfo) sourceType;\r", "-\t\t\tIType type = elementInfo.getHandle();\r", "-\t\t\t\tfinal IFile file = (IFile) type.getUnderlyingResource();\r", "-\t\t\t\tfinal char[] source = PotentialMatch.getContents(file);\r", "-\r", "-\t\t\t\t// get main type name\r", "-\t\t\t\tfinal String fileName = file.getFullPath().lastSegment();\r", "-\t\t\t\tfinal char[] mainTypeName =\r", "-\t\t\t\t\tfileName.substring(0, fileName.length() - 5).toCharArray();\r", "-\r", "-\t\t\t\t// source unit\r", "-\t\t\t\tICompilationUnit sourceUnit = new ICompilationUnit() {\r", "-\t\t\t\t\tpublic char[] getContents() {\r", "-\t\t\t\t\t\treturn source;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tpublic char[] getFileName() {\r", "-\t\t\t\t\t\treturn fileName.toCharArray();\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tpublic char[] getMainTypeName() {\r", "-\t\t\t\t\t\treturn mainTypeName;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t};\r", "-\r", "-\t\t\t\t// diet parse\r", "-\t\t\t\tCompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0);\r", "-\t\t\t\tunit = this.parser.dietParse(sourceUnit, compilationResult);\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\tunit = null;\r", "-\t\t} else {\r", "-\t\t\tCompilationResult result =\r", "-\t\t\t\tnew CompilationResult(sourceType.getFileName(), 0, 0);\r", "-\t\t\tunit =\r", "-\t\t\t\tSourceTypeConverter.buildCompilationUnit(\r", "-\t\t\t\t\tsourceTypes,\r", "-\t\t\t\t\ttrue,\r", "-\t\t\t\t\ttrue,\r", "-\t\t\t\t\tlookupEnvironment.problemReporter,\r", "-\t\t\t\t\tresult);\r", "-\t\tif (unit != null) {\r", "-\t\t\tthis.lookupEnvironment.buildTypeBindings(unit);\r", "-\t\t\tthis.lookupEnvironment.completeTypeBindings(unit, true);\r", "-\t\t\tthis.parsedUnits.put(sourceType.getQualifiedName(), unit);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e837ae700815c2de4c294dd39b74461b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "signatureAfterChange": "\r public void accept(ISourceType sourceType, PackageBinding packageBinding)", "diff": ["+ */\r", "+public void accept(ISourceType sourceType, PackageBinding packageBinding) {\r", "+\twhile (sourceType.getEnclosingType() != null) sourceType = sourceType.getEnclosingType();\r", "+\tCompilationResult result = new CompilationResult(sourceType.getFileName(), 1, 1); // need to hold onto this\r", "+\tCompilationUnitDeclaration unit =\r", "+\t\tSourceTypeConverter.buildCompilationUnit(sourceType, true, true, lookupEnvironment.problemReporter, result);\r", "+\tif (unit != null) {\r", "+\t\tthis.lookupEnvironment.buildTypeBindings(unit);\r", "+\t\tthis.lookupEnvironment.completeTypeBindings(unit, true);\r", "+\t}\r", "+}\r", "-\t */\r", "-\tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding) {\r", "-\t\tISourceType sourceType = sourceTypes[0];\r", "-\t\twhile (sourceType.getEnclosingType() != null)\r", "-\t\t\tsourceType = sourceType.getEnclosingType();\r", "-\t\tCompilationUnitDeclaration unit;\r", "-\t\tif (sourceType instanceof SourceTypeElementInfo) {\r", "-\t\t\t// get source\r", "-\t\t\tSourceTypeElementInfo elementInfo = (SourceTypeElementInfo) sourceType;\r", "-\t\t\tIType type = elementInfo.getHandle();\r", "-\t\t\t\tfinal IFile file = (IFile) type.getUnderlyingResource();\r", "-\t\t\t\tfinal char[] source = PotentialMatch.getContents(file);\r", "-\r", "-\t\t\t\t// get main type name\r", "-\t\t\t\tfinal String fileName = file.getFullPath().lastSegment();\r", "-\t\t\t\tfinal char[] mainTypeName =\r", "-\t\t\t\t\tfileName.substring(0, fileName.length() - 5).toCharArray();\r", "-\r", "-\t\t\t\t// source unit\r", "-\t\t\t\tICompilationUnit sourceUnit = new ICompilationUnit() {\r", "-\t\t\t\t\tpublic char[] getContents() {\r", "-\t\t\t\t\t\treturn source;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tpublic char[] getFileName() {\r", "-\t\t\t\t\t\treturn fileName.toCharArray();\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tpublic char[] getMainTypeName() {\r", "-\t\t\t\t\t\treturn mainTypeName;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t};\r", "-\r", "-\t\t\t\t// diet parse\r", "-\t\t\t\tCompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0);\r", "-\t\t\t\tunit = this.parser.dietParse(sourceUnit, compilationResult);\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\tunit = null;\r", "-\t\t} else {\r", "-\t\t\tCompilationResult result =\r", "-\t\t\t\tnew CompilationResult(sourceType.getFileName(), 0, 0);\r", "-\t\t\tunit =\r", "-\t\t\t\tSourceTypeConverter.buildCompilationUnit(\r", "-\t\t\t\t\tsourceTypes,\r", "-\t\t\t\t\ttrue,\r", "-\t\t\t\t\ttrue,\r", "-\t\t\t\t\tlookupEnvironment.problemReporter,\r", "-\t\t\t\t\tresult);\r", "-\t\tif (unit != null) {\r", "-\t\t\tthis.lookupEnvironment.buildTypeBindings(unit);\r", "-\t\t\tthis.lookupEnvironment.completeTypeBindings(unit, true);\r", "-\t\t\tthis.parsedUnits.put(sourceType.getQualifiedName(), unit);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe70fcf4e12971ea74f4bda7a7b705cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "161b33b1dd753a14c62dc5cb298555b7a8135f16", "commitAfterChange": "0af694b5a2455cea6ace262561a6329b05ee9c78", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "signatureAfterChange": "\r \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "diff": ["-\t\tCompilationUnitDeclaration unit = null;\r", "-\t\t\t\tfinal IFile file = (IFile) type.getUnderlyingResource();\r", "-\t\t\t\tfinal char[] source = Util.getResourceContentsAsCharArray(file);\r", "-\r", "-\t\t\t\t// get main type name\r", "-\t\t\t\tfinal String fileName = file.getFullPath().lastSegment();\r", "-\t\t\t\tfinal char[] mainTypeName =\r", "-\t\t\t\t\tfileName.substring(0, fileName.length() - 5).toCharArray();\r", "-\r", "-\t\t\t\t// source unit\r", "-\t\t\t\tICompilationUnit sourceUnit = new ICompilationUnit() {\r", "-\t\t\t\t\tpublic char[] getContents() {\r", "-\t\t\t\t\t\treturn source;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tpublic char[] getFileName() {\r", "-\t\t\t\t\t\treturn fileName.toCharArray();\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tpublic char[] getMainTypeName() {\r", "-\t\t\t\t\t\treturn mainTypeName;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t};\r", "-\r", "-\t\t\t\t// diet parse\r", "-\t\t\t\tMatchSet originalMatchSet = this.parser.matchSet;\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tthis.parser.matchSet = new MatchSet(this);\r", "-\t\t\t\t\tCompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0);\r", "-\t\t\t\t\tunit = this.parser.dietParse(sourceUnit, compilationResult);\r", "-\t\t\t\t} finally {\r", "-\t\t\t\t\tif (originalMatchSet == null) {\r", "-\t\t\t\t\t\tif (!this.parser.matchSet.isEmpty() \r", "-\t\t\t\t\t\t\t\t&& unit != null) {\r", "-\t\t\t\t\t\t\t// potential matches were found while initializing the search pattern\r", "-\t\t\t\t\t\t\t// from the lookup environment: add them in the list of potential matches\r", "-\t\t\t\t\t\t\tPotentialMatch potentialMatch = \r", "-\t\t\t\t\t\t\t\tnew PotentialMatch(\r", "-\t\t\t\t\t\t\t\t\tthis,\r", "-\t\t\t\t\t\t\t\t\tfile, \r", "-\t\t\t\t\t\t\t\t\t(CompilationUnit)type.getCompilationUnit(), \r", "-\t\t\t\t\t\t\t\t\tunit,\r", "-\t\t\t\t\t\t\t\t\tthis.parser.matchSet);\r", "-\t\t\t\t\t\t\tthis.addPotentialMatch(potentialMatch);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tthis.parser.matchSet = null;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tthis.parser.matchSet = originalMatchSet;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "+\t\t\t\tthis.buildBindings(type.getCompilationUnit());\r", "-\t\t\t\tunit = null;\r", "+\t\t\t\t// nothing we can do here: ignore\r", "-\t\t\tunit =\r", "+\t\t\tCompilationUnitDeclaration unit =\r", "-\t\t}\r", "-\r", "-\t\tif (unit != null) {\r"]}], "num": 6431}
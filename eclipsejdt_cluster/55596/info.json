{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be5b7249ed309e0658aa1af54010efda", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4dde6ffa4edb2dfb13e4bbf57e19b77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 429, "methodNumberAfterChange": 431, "signatureBeforeChange": " protected void parse()", "signatureAfterChange": " protected void parse()", "diff": ["+\tthis.unstackedAct = ERROR_ACTION;", "-", "-\t\tact = tAction(act, this.currentToken);", "+\t\tthis.unstackedAct = act = tAction(act, this.currentToken);", "-\t\t\t\tthis.hasError = true;  // looks incorrect for recovery case ?", "+\t\t\t\tthis.hasError = true;", "-\t\t\tint previousToken = this.currentToken;", "+\t\t\tthis.kurrentToken = this.currentToken;", "-\t\t\t\t\tif (act == ERROR_ACTION && previousToken != 0) this.lastErrorEndPosition = errorPos;", "+\t\t\t\t\tif (act == ERROR_ACTION && this.kurrentToken != 0) this.lastErrorEndPosition = errorPos;", "-\t\t\t\t\tbreak; // We presume the world is virgin so we can continue exactly from where we left off.", "-\t\t\t\tdefault:", "-\t\t\t\t\tthrow new IllegalStateException();", "+\t\t\t\t\tif (act == ERROR_ACTION) {", "+\t\t\t\t\t\tact = this.stack[this.stateStackTop--];", "+\t\t\t\t\t\tcontinue ProcessTerminals;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.currentToken = this.kurrentToken; // Gets trashed all over the place.", "+\t\t\t\t\t}", "+\t\t\t\t\t// FALL THROUGH.", "-\t\t\t\tthis.unstackedAct = act;", "-\t\t\t} finally {", "-\t\t\t\tthis.unstackedAct = ERROR_ACTION;", "-\t\t\t}", "+\t\t\t} ", "-\t\t\tact -= ERROR_ACTION;", "+\t\t\tthis.unstackedAct = act -= ERROR_ACTION;", "-\t\t\t\t\tthis.unstackedAct = act;", "-\t\t\t\t} finally {", "-\t\t\t\t\tthis.unstackedAct = ERROR_ACTION;", "+\t\t\tthis.unstackedAct = ntAction(this.stack[this.stateStackTop], lhs[act]);", "-\t\t\tact = ntAction(this.stack[this.stateStackTop], lhs[act]);", "+\t\t\tact = this.unstackedAct;", "+\tthis.unstackedAct = ERROR_ACTION;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f99554d8c8cbe288d1a54bf8bd570b0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "4f833be4365ac5abb1ac0cf3973cd75cbb0d7487", "commitAfterChange": "227e3d5fec0001fbc06115e3f3e6f09f357952e2", "methodNumberBeforeChange": 426, "methodNumberAfterChange": 427, "signatureBeforeChange": " protected void parse()", "signatureAfterChange": " protected void parse()", "diff": ["-\t\tif (act == ERROR_ACTION || (this.restartRecovery && !this.shouldDeferRecovery)) {", "-\t\t\tthis.shouldDeferRecovery = false;", "+\t\tif (act == ERROR_ACTION || this.restartRecovery) {", "-\t\t\t\tthis.hasError = true;", "+\t\t\t\tthis.hasError = true;  // looks incorrect for recovery case ?", "-\t\t\tif (resumeOnSyntaxError()) {", "-\t\t\t\tif (act == ERROR_ACTION && previousToken != 0) this.lastErrorEndPosition = errorPos;", "-\t\t\t\tact = START_STATE;", "-\t\t\t\tthis.stateStackTop = -1;", "-\t\t\t\tthis.currentToken = getFirstToken();", "-\t\t\t\tcontinue ProcessTerminals;", "+\t\t\tswitch (resumeOnSyntaxError()) {", "+\t\t\t\tcase HALT:", "+\t\t\t\t\tact = ERROR_ACTION;", "+\t\t\t\t\tbreak ProcessTerminals;", "+\t\t\t\tcase RESTART:", "+\t\t\t\t\tif (act == ERROR_ACTION && previousToken != 0) this.lastErrorEndPosition = errorPos;", "+\t\t\t\t\tact = START_STATE;", "+\t\t\t\t\tthis.stateStackTop = -1;", "+\t\t\t\t\tthis.currentToken = getFirstToken();", "+\t\t\t\t\tcontinue ProcessTerminals;", "+\t\t\t\tcase RESUME:", "+\t\t\t\t\tbreak; // We presume the world is virgin so we can continue exactly from where we left off.", "+\t\t\t\tdefault:", "+\t\t\t\t\tthrow new IllegalStateException();", "-\t\t\tact = ERROR_ACTION;", "-\t\t\tbreak ProcessTerminals;"]}], "num": 55596}
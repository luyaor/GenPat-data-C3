{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59588f5a7e88e9cdd2b82c57f3bb9d5f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "446d369124c283569d6421471dac226b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java", "commitBeforeChange": "95cf1c51bda98298c8465ff64b742f30d6302c1e", "commitAfterChange": "c061de6d65bf019fa9950896cd9e3724a43a4d46", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic boolean isProperType(boolean admitCapture18)", "signatureAfterChange": "  \tpublic boolean isProperType(boolean admitCapture18)", "diff": ["-\t\treturn admitCapture18;", "+\t\tif (!admitCapture18) ", "+\t\t\treturn false;", "+\t\tif (this.inRecursiveFunction)", "+\t\t\treturn true;", "+\t\tthis.inRecursiveFunction = true;", "+\t\ttry {", "+\t\t\tif (this.lowerBound != null && !this.lowerBound.isProperType(admitCapture18))", "+\t\t\t\treturn false;", "+\t\t\tif (this.upperBounds != null) {", "+\t\t\t\tfor (int i = 0; i < this.upperBounds.length; i++) {", "+\t\t\t\t\tif (!this.upperBounds[i].isProperType(admitCapture18))", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} finally {", "+\t\t\tthis.inRecursiveFunction = false;", "+\t\t}", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea987be3c682017a79b936a54cd88ef3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java", "commitBeforeChange": "ba102afaa27b3b6b63ee0fd01eab5a8d45f4d8a9", "commitAfterChange": "73100562c653e9756405c4478f78d4c46826e31a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic boolean isCompatibleWith(TypeBinding otherType, Scope captureScope)", "signatureAfterChange": "  \tpublic boolean isCompatibleWith(TypeBinding otherType, Scope captureScope)", "diff": ["-\t\tif (this.upperBounds != null) {", "-\t\t\tfor (int i = 0; i < this.upperBounds.length; i++) {", "-\t\t\t\tif (this.upperBounds[i].isCompatibleWith(otherType, captureScope))", "-\t\t\t\t\treturn true;", "+\t\tif (this.inRecursiveFunction)", "+\t\t\treturn true;", "+\t\tthis.inRecursiveFunction = true; ", "+\t\ttry {", "+\t\t\tif (this.upperBounds != null) {", "+\t\t\t\tfor (int i = 0; i < this.upperBounds.length; i++) {", "+\t\t\t\t\tif (this.upperBounds[i].isCompatibleWith(otherType, captureScope))", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\treturn super.isCompatibleWith(otherType, captureScope);", "+\t\t} finally {", "+\t\t\tthis.inRecursiveFunction = false;", "-\t\treturn super.isCompatibleWith(otherType, captureScope);"]}], "num": 49224}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9c27b6849b7f3aaf4e3f2364eb9203c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "271270b2de98f5c55307dac4e156f588", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ArrayType.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tASTNode clone0(AST target)", "signatureAfterChange": " \tASTNode clone0(AST target)", "diff": ["-\t\tArrayType result = new ArrayType(target);", "-\t\tresult.setSourceRange(getStartPosition(), getLength());", "-\t\tresult.setComponentType((Type) getComponentType().clone(target));", "-\t\tif (this.ast.apiLevel >= AST.JLS8) {", "-\t\t\tresult.annotations().addAll(", "-\t\t\t\t\tASTNode.copySubtrees(target, annotations()));", "+\t\tArrayType result;", "+\t\tif (this.ast.apiLevel < AST.JLS8) {", "+\t\t\tresult = new ArrayType(target);", "+\t\t\tresult.setComponentType((Type) getComponentType().clone(target));\t\t\t", "+\t\t} else {", "+\t\t\tresult = new ArrayType(target, 0);", "+\t\t\tresult.setElementType((Type) getElementType().clone(target));", "+\t\t\tresult.dimensions().addAll(", "+\t\t\t\t\tASTNode.copySubtrees(target, dimensions()));", "+\t\tresult.setSourceRange(getStartPosition(), getLength());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77c9265fefd3758e9a7b092dd937c889", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic ArrayType newArrayType(Type elementType, int dimensions)", "signatureAfterChange": " \tpublic ArrayType newArrayType(Type elementType, int dimensions)", "diff": ["-\t\tArrayType result = new ArrayType(this);", "-\t\tresult.setComponentType(elementType);", "-\t\tfor (int i = 2; i <= dimensions; i++) {", "-\t\t\tresult = newArrayType(result);", "+\t\tArrayType result;", "+\t\tif (this.apiLevel < AST.JLS8) {", "+\t\t\tresult = new ArrayType(this);", "+\t\t\tsetArrayComponentType(result, elementType);", "+\t\t\tfor (int i = 2; i <= dimensions; i++) {", "+\t\t\t\tresult = newArrayType(result);", "+\t\t\t}", "+\t\t\treturn result;", "+\t\t}", "+\t\t//level >= JLS8", "+\t\tif (elementType.isArrayType()) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tresult = new ArrayType(this);", "+\t\tresult.setElementType(elementType);", "+\t\t// index starting from 1 since there is a dimension already available by default.", "+\t\tfor (int i = 1; i < dimensions; ++i) {", "+\t\t\tresult.dimensions().add(new ExtraDimension(this));"]}], "num": 38340}
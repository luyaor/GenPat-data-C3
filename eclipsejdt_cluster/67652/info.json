{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e47e2754fb7406c47fc27fe040b6188f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "783b2a392e34f27ee8018fc2eec1c46e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 17, "signatureBeforeChange": " public TypeBinding resolveType(ClassScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(ClassScope scope)", "diff": ["-public TypeBinding resolveType(ClassScope scope) {", "-\t// handle the error here", "-\tthis.constant = Constant.NotAConstant;", "-\tif (this.resolvedType != null) // is a shared type reference which was already resolved", "-\t\treturn this.resolvedType.isValidBinding() ? this.resolvedType : null; // already reported error", "-\tTypeBinding type = this.resolvedType = getTypeBinding(scope);", "-\tif (type == null)", "-\t\treturn null; // detected cycle while resolving hierarchy\t", "-\tif (!type.isValidBinding()) {", "-\t\treportInvalidType(scope);", "-\t\treturn null;", "-\t}", "-\tif (type.isArrayType() && ((ArrayBinding) type).leafComponentType == TypeBinding.VOID) {", "-\t\tscope.problemReporter().cannotAllocateVoidArray(this);", "-\t\treturn null;", "-\t}\t", "-\tif (isTypeUseDeprecated(type, scope))", "-\t\treportDeprecatedType(type, scope);", "-\t", "-\ttype = scope.environment().convertToRawType(type, false /*do not force conversion of enclosing types*/);", "-\tif (type.leafComponentType().isRawType() ", "-\t\t\t&& (this.bits & ASTNode.IgnoreRawTypeCheck) == 0 ", "-\t\t\t&& scope.compilerOptions().getSeverity(CompilerOptions.RawTypeReference) != ProblemSeverities.Ignore) {", "-\t\tscope.problemReporter().rawTypeReference(this, type);", "-\t}\t\t\t", "-\treturn this.resolvedType = type;\t", "+public TypeBinding resolveType(ClassScope scope) {", "+\treturn internalResolveType(scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b06288eea98da85c671449250db46bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 16, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope, boolean checkBounds)", "signatureAfterChange": " \t public TypeBinding resolveType(BlockScope scope, boolean checkBounds)", "diff": ["-", "+\t", "-\t// handle the error here", "-\tthis.constant = Constant.NotAConstant;", "-\tif (this.resolvedType != null) // is a shared type reference which was already resolved", "-\t\treturn this.resolvedType.isValidBinding() ? this.resolvedType : null; // already reported error", "-", "-\tTypeBinding type = this.resolvedType = getTypeBinding(scope);", "-\tif (type == null)", "-\t\treturn null; // detected cycle while resolving hierarchy\t", "-\tif (!type.isValidBinding()) {", "-\t\treportInvalidType(scope);", "-\t\treturn null;", "-\t}", "-\tif (type.isArrayType() && ((ArrayBinding) type).leafComponentType == TypeBinding.VOID) {", "-\t\tscope.problemReporter().cannotAllocateVoidArray(this);", "-\t\treturn null;", "-\t}", "-", "-\tif (isTypeUseDeprecated(type, scope))", "-\t\treportDeprecatedType(type, scope);", "-\t", "-\ttype = scope.environment().convertToRawType(type, false /*do not force conversion of enclosing types*/);", "-\tif (type.leafComponentType().isRawType() ", "-\t\t\t&& (this.bits & ASTNode.IgnoreRawTypeCheck) == 0 ", "-\t\t\t&& scope.compilerOptions().getSeverity(CompilerOptions.RawTypeReference) != ProblemSeverities.Ignore) {\t", "-\t\tscope.problemReporter().rawTypeReference(this, type);", "-\t}\t\t\t", "-\treturn this.resolvedType = type;", "+\treturn internalResolveType(scope);"]}], "num": 67652}
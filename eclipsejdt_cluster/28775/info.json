{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e904ab04fea0d6438ee7452ea38debc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30f471510894e7106fa63dd93ee9d11e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java", "commitBeforeChange": "8bea847412c36874664a80a329bfe627deff5fa9", "commitAfterChange": "c4145c80a504c8681f4571ff2bd214b778e87107", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\tif (this.progressMonitor != null) {", "-\t\t\tif (this.progressMonitor.isCanceled()) ", "-\t\t\t\tthrow new OperationCanceledException();", "-\t\t\tthis.progressMonitor.beginTask(Messages.element_reconciling, 2); ", "-\t\t}", "-\t", "-\t\tCompilationUnit workingCopy = getWorkingCopy();", "-\t\tboolean wasConsistent = workingCopy.isConsistent();", "-\t\tIProblemRequestor problemRequestor = workingCopy.getPerWorkingCopyInfo();", "-\t\tthis.resolveBindings |= problemRequestor != null && problemRequestor.isActive();", "-\t\t", "-\t\t// create the delta builder (this remembers the current content of the cu)", "-\t\tthis.deltaBuilder = new JavaElementDeltaBuilder(workingCopy);", "-\t\t", "-\t\t// make working copy consistent if needed and compute AST if needed", "-\t\tmakeConsistent(workingCopy, problemRequestor);", "-\t\t", "-\t\t// notify reconcile participants", "-\t\tnotifyParticipants(workingCopy);", "-\t\t", "-\t\t// recreate ast if needed", "-\t\tif (this.ast == null && (this.astLevel > ICompilationUnit.NO_AST || this.resolveBindings))", "-\t\t\tmakeConsistent(workingCopy, problemRequestor);", "-\t", "-\t\t// report problems", "-\t\tif (this.problems != null && (this.forceProblemDetection || !wasConsistent)) {", "-\t\t\ttry {", "-\t\t\t\tproblemRequestor.beginReporting();", "-\t\t\t\tfor (Iterator iteraror = this.problems.values().iterator(); iteraror.hasNext();) {", "-\t\t\t\t\tCategorizedProblem[] categorizedProblems = (CategorizedProblem[]) iteraror.next();", "-\t\t\t\t\tif (categorizedProblems == null) continue;", "-\t\t\t\t\tfor (int i = 0, length = categorizedProblems.length; i < length; i++) {", "-\t\t\t\t\t\tCategorizedProblem problem = categorizedProblems[i];", "-\t\t\t\t\t\tif (JavaModelManager.VERBOSE){", "-\t\t\t\t\t\t\tSystem.out.println(\"PROBLEM FOUND while reconciling : \" + problem.getMessage());//$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (this.progressMonitor != null && this.progressMonitor.isCanceled()) break;", "-\t\t\t\t\t\tproblemRequestor.acceptProblem(problem);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} finally {", "-\t\t\t\tproblemRequestor.endReporting();", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\t// report delta", "+\t\tcheckCanceled();", "+\t\t\tbeginTask(Messages.element_reconciling, 2); ", "+\t", "+\t\t\tCompilationUnit workingCopy = getWorkingCopy();", "+\t\t\tboolean wasConsistent = workingCopy.isConsistent();", "+\t\t\tIProblemRequestor problemRequestor = workingCopy.getPerWorkingCopyInfo();", "+\t\t\tthis.resolveBindings |= problemRequestor != null && problemRequestor.isActive();", "+\t\t\t", "+\t\t\t// create the delta builder (this remembers the current content of the cu)", "+\t\t\tthis.deltaBuilder = new JavaElementDeltaBuilder(workingCopy);", "+\t\t\t", "+\t\t\t// make working copy consistent if needed and compute AST if needed", "+\t\t\tmakeConsistent(workingCopy, problemRequestor);", "+\t\t\t", "+\t\t\t// notify reconcile participants", "+\t\t\tnotifyParticipants(workingCopy);", "+\t\t\t", "+\t\t\t// recreate ast if needed", "+\t\t\tif (this.ast == null && (this.astLevel > ICompilationUnit.NO_AST || this.resolveBindings))", "+\t\t\t\tmakeConsistent(workingCopy, problemRequestor);", "+\t\t", "+\t\t\t// report problems", "+\t\t\tif (this.problems != null && (this.forceProblemDetection || !wasConsistent)) {", "+\t\t\t\ttry {", "+\t\t\t\t\tproblemRequestor.beginReporting();", "+\t\t\t\t\tfor (Iterator iteraror = this.problems.values().iterator(); iteraror.hasNext();) {", "+\t\t\t\t\t\tCategorizedProblem[] categorizedProblems = (CategorizedProblem[]) iteraror.next();", "+\t\t\t\t\t\tif (categorizedProblems == null) continue;", "+\t\t\t\t\t\tfor (int i = 0, length = categorizedProblems.length; i < length; i++) {", "+\t\t\t\t\t\t\tCategorizedProblem problem = categorizedProblems[i];", "+\t\t\t\t\t\t\tif (JavaModelManager.VERBOSE){", "+\t\t\t\t\t\t\t\tSystem.out.println(\"PROBLEM FOUND while reconciling : \" + problem.getMessage());//$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (this.progressMonitor != null && this.progressMonitor.isCanceled()) break;", "+\t\t\t\t\t\t\tproblemRequestor.acceptProblem(problem);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} finally {", "+\t\t\t\t\tproblemRequestor.endReporting();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\t// report delta", "-\t\t\tif (this.progressMonitor != null) this.progressMonitor.done();", "+\t\t\tdone();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2cce3e5a06ec2192016ed7864463341", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java", "commitBeforeChange": "54bfec2a779f774d0ec94918b11965f709f8eea7", "commitAfterChange": "07b0f1c60d56e715370df7f24af276bdb1cfa324", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\tif (this.progressMonitor != null){", "+\t\tif (this.progressMonitor != null) {", "-\t\tboolean wasConsistent = workingCopy.isConsistent();", "-\t\ttry {", "-\t\t\tif (!wasConsistent) {", "-\t\t\t\t// create the delta builder (this remembers the current content of the cu)", "-\t\t\t\tJavaElementDeltaBuilder deltaBuilder = new JavaElementDeltaBuilder(workingCopy);", "-\t\t\t\t", "-\t\t\t\t// update the element infos with the content of the working copy", "-\t\t\t\tthis.ast = workingCopy.makeConsistent(this.createAST, this.astLevel, this.progressMonitor);", "-\t\t\t\tdeltaBuilder.buildDeltas();", "-", "-\t\t\t\tif (progressMonitor != null) progressMonitor.worked(2);", "-\t\t\t", "-\t\t\t\t// register the deltas", "-\t\t\t\tJavaElementDelta delta = deltaBuilder.delta;", "-\t\t\t\tif (delta != null) {", "-\t\t\t\t\tdelta.changedAST(this.ast);", "-\t\t\t\t\taddReconcileDelta(workingCopy, delta);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\t// force problem detection? - if structure was consistent", "-\t\t\t\tif (this.forceProblemDetection) {", "-\t\t\t\t\tIProblemRequestor problemRequestor = workingCopy.getPerWorkingCopyInfo();", "-\t\t\t\t\tboolean computeProblems = JavaProject.hasJavaNature(workingCopy.getJavaProject().getProject()) && problemRequestor != null && problemRequestor.isActive();", "-\t\t\t\t\tif (computeProblems) {", "-\t\t\t\t\t    CompilationUnitDeclaration unit = null;", "-\t\t\t\t\t    try {", "-\t\t\t\t\t\t\tproblemRequestor.beginReporting();", "-\t\t\t\t\t\t\tchar[] contents = workingCopy.getContents();", "-\t\t\t\t\t\t\tunit = CompilationUnitProblemFinder.process(workingCopy, contents, this.workingCopyOwner, problemRequestor, this.createAST, this.progressMonitor);", "-\t\t\t\t\t\t\tproblemRequestor.endReporting();", "-\t\t\t\t\t\t\tif (progressMonitor != null) progressMonitor.worked(1);", "-\t\t\t\t\t\t\tif (this.createAST && unit != null) {", "-\t\t\t\t\t\t\t\tMap options = workingCopy.getJavaProject().getOptions(true);", "-\t\t\t\t\t\t\t\tthis.ast = AST.convertCompilationUnit(this.astLevel, unit, contents, options, true/*isResolved*/, workingCopy, this.progressMonitor);", "-\t\t\t\t\t\t\t\tJavaElementDelta delta = new JavaElementDelta(workingCopy);", "-\t\t\t\t\t\t\t\tdelta.changedAST(this.ast);", "-\t\t\t\t\t\t\t\taddReconcileDelta(workingCopy, delta);", "-\t\t\t\t\t\t\t\tif (progressMonitor != null) progressMonitor.worked(1);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t    } finally {", "-\t\t\t\t\t        if (unit != null) {", "-\t\t\t\t\t            unit.cleanUp();", "-\t\t\t\t\t        }", "-\t\t\t\t\t    }", "+\t\tIProblemRequestor problemRequestor = workingCopy.getPerWorkingCopyInfo();", "+\t\tthis.resolveBindings |= problemRequestor != null && problemRequestor.isActive();", "+\t\t", "+\t\t// create the delta builder (this remembers the current content of the cu)", "+\t\tthis.deltaBuilder = new JavaElementDeltaBuilder(workingCopy);", "+\t\t", "+\t\t// make working copy consistent if needed and compute AST if needed", "+\t\tmakeConsistent(workingCopy, problemRequestor);", "+\t\t", "+\t\t// notify reconcile participants", "+\t\tnotifyParticipants(workingCopy);", "+\t\t", "+\t\t// recreate ast if needed", "+\t\tif (this.ast == null && (this.astLevel > ICompilationUnit.NO_AST || this.resolveBindings))", "+\t\t\tmakeConsistent(workingCopy, problemRequestor);", "+\t", "+\t\t// report problems", "+\t\tif (this.problems != null) {", "+\t\t\ttry {", "+\t\t\t\tproblemRequestor.beginReporting();", "+\t\t\t\tfor (Iterator iteraror = problems.values().iterator(); iteraror.hasNext();) {", "+\t\t\t\t\tCategorizedProblem[] categorizedProblems = (CategorizedProblem[]) iteraror.next();", "+\t\t\t\t\tif (categorizedProblems == null) continue;", "+\t\t\t\t\tfor (int i = 0, length = categorizedProblems.length; i < length; i++) {", "+\t\t\t\t\t\tCategorizedProblem problem = categorizedProblems[i];", "+\t\t\t\t\t\tif (JavaModelManager.VERBOSE){", "+\t\t\t\t\t\t\tSystem.out.println(\"PROBLEM FOUND while reconciling : \" + problem.getMessage());//$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.progressMonitor != null && this.progressMonitor.isCanceled()) break;", "+\t\t\t\t\t\tproblemRequestor.acceptProblem(problem);", "+\t\t\t} finally {", "+\t\t\t\tproblemRequestor.endReporting();", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\t// report delta", "+\t\ttry {", "+\t\t\tJavaElementDelta delta = this.deltaBuilder.delta;", "+\t\t\tif (delta != null) {", "+\t\t\t\taddReconcileDelta(workingCopy, delta);", "-\t\t\tif (progressMonitor != null) progressMonitor.done();", "+\t\t\tif (this.progressMonitor != null) this.progressMonitor.done();"]}], "num": 28775}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39c84fa5ca2ffefd5d6d629c5ae2a964", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a684aba588b14b5ebf0aecd117d5ac9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "a68053c2948ee889fd2391b7d830587638604892", "commitAfterChange": "3a24c8e93f77a32dae59173b29a4fa366ce01a3a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  protected int matchLevel(ImportReference importRef)", "signatureAfterChange": "  protected int matchLevel(ImportReference importRef)", "diff": ["-\t\tif (matchesName(this.pattern.simpleName, tokens[tokens.length-1])) return ACCURATE_MATCH;", "+\t\tboolean onDemand = (importRef.bits & ASTNode.OnDemand) != 0;", "+\t\tfinal boolean isStatic = importRef.isStatic();", "+\t\tif (!isStatic && onDemand) {", "+\t\t\treturn IMPOSSIBLE_MATCH;", "+\t\t}", "+\t\tint length = tokens.length;", "+\t\tif (matchesName(this.pattern.simpleName, tokens[length-1])) {", "+\t\t\treturn ACCURATE_MATCH;", "+\t\t}", "+\t\tif (isStatic && !onDemand && length > 1) {", "+\t\t\tif (matchesName(this.pattern.simpleName, tokens[length-2])) {", "+\t\t\t\treturn ACCURATE_MATCH;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7745bcb4f9933b82856e42202c1e144c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "e4335f612db86aa6e739c4af37c0425a42aadb90", "commitAfterChange": "39f1f31087ae36f09c69d342ba90d4c2023a9fbb", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 106, "signatureBeforeChange": " \tprivate void runTest( \t\t\tboolean shouldFlushOutputDirectory, \t\t\tString[] testFiles, \t\t\tString[] dependantFiles, \t\t\tString[] classLibraries, \t\t\tMap customOptions, \t\t\tboolean performStatementsRecovery, \t\t\tICompilerRequestor customRequestor, \t\t\tboolean expectingCompilerErrors, \t\t\tString expectedCompilerLog, \t\t\tboolean forceExecution, \t\t\tString[] vmArguments, \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tfinal ASTVisitor visitor, \t\t\tJavacTestOptions javacTestOptions)", "signatureAfterChange": " \tprivate void runTest( \t\t\tboolean shouldFlushOutputDirectory, \t\t\tString[] testFiles, \t\t\tString[] dependantFiles, \t\t\tString[] classLibraries, \t\t\tMap customOptions, \t\t\tboolean performStatementsRecovery, \t\t\tICompilerRequestor customRequestor, \t\t\tboolean expectingCompilerErrors, \t\t\tString expectedCompilerLog, \t\t\tString[] alternateCompilerLogs, \t\t\tboolean forceExecution, \t\t\tString[] vmArguments, \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tfinal ASTVisitor visitor, \t\t\tJavacTestOptions javacTestOptions)", "diff": ["+\t\t\tString[] alternateCompilerLogs,", "+\t\t\tString[] alternatePlatformIndepentLogs = null;", "-\t\t\t\tcheckCompilerLog(testFiles, requestor,", "-\t\t\t\t\t\tUtil.convertToIndependantLineDelimiter(expectedCompilerLog), exception);", "+\t\t\t\talternatePlatformIndepentLogs = new String[] {Util.convertToIndependantLineDelimiter(expectedCompilerLog)};", "+\t\t\t} else if (alternateCompilerLogs != null) {", "+\t\t\t\talternatePlatformIndepentLogs = new String[alternateCompilerLogs.length];", "+\t\t\t\tfor (int i = 0; i < alternateCompilerLogs.length; i++)", "+\t\t\t\t\talternatePlatformIndepentLogs[i] = Util.convertToIndependantLineDelimiter(alternateCompilerLogs[i]);", "+\t\t\t}", "+\t\t\tif (alternatePlatformIndepentLogs != null) {", "+\t\t\t\tcheckCompilerLog(testFiles, requestor, alternatePlatformIndepentLogs, exception);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f67b9fbd4cef60cd9e418dc827f1b73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "900392dc83f32684036212f916a5915ba3721662", "commitAfterChange": "adfa6eea97da9a8b8e860dcf2bcb64f1459b7350", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   \tprivate void disassemble(StackMapTableAttribute attribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": "   \tprivate void disassemble(IStackMapTableAttribute attribute, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["-\tprivate void disassemble(StackMapTableAttribute attribute, StringBuffer buffer, String lineSeparator, int tabNumber) {", "+\tprivate void disassemble(IStackMapTableAttribute attribute, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {", "-\t\tbuffer.append(Messages.bind(Messages.disassembler_stackmaptableattributeheader,", "-\t\t\tnew String[] {", "-\t\t\t\tLong.toString(attribute.getAttributeLength()),", "-\t\t\t\tgetBytesAsString(attribute.getBytes(), lineSeparator, tabNumber)", "-\t\t\t}));", "+\t\tint numberOfEntries = attribute.getNumberOfEntries();", "+\t\tbuffer.append(Messages.bind(Messages.disassembler_stackmaptableattributeheader, Integer.toString(numberOfEntries)));", "+\t\tif (numberOfEntries != 0) {", "+\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "+\t\t\tfinal IStackMapFrame[] stackMapFrames = attribute.getStackMapFrame();", "+\t\t\tfor (int i = 0; i < numberOfEntries; i++) {", "+\t\t\t\tdisassemble(stackMapFrames[i], buffer, lineSeparator, tabNumber + 2, mode);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d84c30729871460a44615bff1918b946", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "3561a65aa6894682f3ea9a6665dee82b18c3d4bf", "commitAfterChange": "0b12d287970a543efa74b3f16f5eaa0f1a0fc0f9", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic ITypeBinding[] getTypeParameters()", "signatureAfterChange": " \tpublic ITypeBinding[] getTypeParameters()", "diff": ["-\t\t// TODO (olivier) missing implementation of J2SE 1.5 language feature", "+\t\tTypeVariableBinding[] typeVariableBindings = this.binding.typeVariables();", "+\t\tif (typeVariableBindings != null) {", "+\t\t\tint typeVariableBindingsLength = typeVariableBindings.length;", "+\t\t\tif (typeVariableBindingsLength != 0) {", "+\t\t\t\tITypeBinding[] typeParameters = new ITypeBinding[typeVariableBindingsLength];", "+\t\t\t\tfor (int i = 0; i < typeVariableBindingsLength; i++) {", "+\t\t\t\t\ttypeParameters[i] = this.resolver.getTypeBinding(typeVariableBindings[i]);", "+\t\t\t\t}", "+\t\t\t\treturn typeParameters;", "+\t\t\t}", "+\t\t}"]}], "num": 22306}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "979d57d8fa7a620fe3b400eab5186962", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b56de303d8bffbba2cb76ba7f91f354", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "b517ca5a77eafc00d4deecacb73aafd3e8e7344e", "commitAfterChange": "56f3bbb73aa99ee6555dd2c0907e97e8dc1e94d7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r protected void acceptSourceMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames)", "signatureAfterChange": "\r protected void acceptSourceMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames)", "diff": ["+\tIJavaElement[] matches = new IJavaElement[] {};\r", "-\t} catch (JavaModelException e) {\r", "-\t\treturn;\r", "-\t}\r", "-\tIJavaElement[] matches = new IJavaElement[] {};\r", "-\tfor (int i = 0; i < methods.length; i++) {\r", "-\t\tif (methods[i].getElementName().equals(name) && methods[i].getParameterTypes().length == parameterTypeNames.length) {\r", "-\t\t\tmatches = growAndAddToArray(matches, methods[i]);\r", "+\t\tfor (int i = 0; i < methods.length; i++) {\r", "+\t\t\tif (methods[i].getElementName().equals(name) && methods[i].getParameterTypes().length == parameterTypeNames.length) {\r", "+\t\t\t\tmatches = growAndAddToArray(matches, methods[i]);\r", "+\t\t\t}\r", "+\t} catch (JavaModelException e) {\r", "+\t\treturn; \r", "+\t\t// no match was actually found, but a method was originally given -> default constructor\r", "+\t\tfElements = growAndAddToArray(fElements, type);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "952e2a7ed0533fe458ef3ef06c23a878", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "14f89ca9b18a3480429e3f25bc68dd79b7e9f0db", "commitAfterChange": "eb21ce31e87e64ed6c3b487b0fe31d2556ab8015", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " protected void acceptSourceMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames)", "signatureAfterChange": " protected void acceptSourceMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames)", "diff": ["-\tIJavaElement[] matches = new IJavaElement[] {};", "-\t\t\t\tmatches = growAndAddToArray(matches, methods[i]);", "+\t\t\t\taddElement(methods[i]);", "-\tif (matches.length == 0) {", "+\tif (this.elementIndex == -1) {", "-\t\tfElements = growAndAddToArray(fElements, type);", "+\t\taddElement(type);", "-\tif (matches.length == 1) {", "-\t\tfElements = growAndAddToArray(fElements, matches[0]);", "+\tif (this.elementIndex == 0) {", "-\t\t\tSystem.out.print(matches[0].toString());", "+\t\t\tSystem.out.print(this.elements[0].toString());", "-\tfor (int i = 0; i < matches.length; i++) {", "+\tIJavaElement[] matches = this.elements;", "+\tint matchesIndex = this.elementIndex;", "+\tthis.elements = JavaElement.NO_ELEMENTS;", "+\tthis.elementIndex = -1;", "+\tfor (int i = 0; i <= matchesIndex; i++) {", "-\t\t\tfElements = growAndAddToArray(fElements, method);", "+\t\t\taddElement(method);"]}], "num": 60365}
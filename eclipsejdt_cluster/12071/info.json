{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c08cabd302ff68173ca8aaf0f3f022ab", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01fffb0a8863314bb5a4e645bee19af7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java", "commitBeforeChange": "d9396647e280a0cdb636c94fae9233a7a2475f6f", "commitAfterChange": "09617092d586fc57d56d7255b395176bf3d6b1e7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public boolean existsUsingJarTypeCache()", "signatureAfterChange": " public boolean existsUsingJarTypeCache()", "diff": ["-\t\t\t\tif (this.name.equals(((ClassFile) children[i]).name))", "+\t\t\t\tIJavaElement child = children[i];", "+\t\t\t\tif (child instanceof ClassFile && this.name.equals(((ClassFile) child).name))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34f815fcac298c0e37b7600407deaea4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "0cd2ec0cc17df9a2c93fa14bda90c3c975f93e2a", "commitAfterChange": "2cdf813f3765f1a625a06dc80ffdd010d35fb851", "methodNumberBeforeChange": 180, "methodNumberAfterChange": 180, "signatureBeforeChange": " public void invalidField(NameReference nameRef, FieldBinding field)", "signatureAfterChange": " public void invalidField(NameReference nameRef, FieldBinding field)", "diff": ["-\t\t\tif ((field.declaringClass.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\tTypeBinding declaringClass = field.declaringClass;", "+\t\t\tif (declaringClass != null && (declaringClass.tagBits & TagBits.HasMissingType) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d64d67722000e35e9c605841e26c30e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ExternalFoldersManager.java", "commitBeforeChange": "0a260cc9edb211b462b2737e9bb4eb163dfd14e6", "commitAfterChange": "0c3bd201dccc5efc84ffa6702bc8962ec77b16dc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   \tpublic static boolean isExternalFolderPath(IPath externalPath)", "signatureAfterChange": "   \tpublic static boolean isExternalFolderPath(IPath externalPath)", "diff": ["-\t\tif (ResourcesPlugin.getWorkspace().getRoot().getProject(externalPath.segment(0)).exists())", "+\t\tString firstSegment = externalPath.segment(0);", "+\t\tif (firstSegment != null && ResourcesPlugin.getWorkspace().getRoot().getProject(firstSegment).exists())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dc600050676023e93f0e33e2f7b793e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "4b1cb82b00b0f3c43755c37280deb732ae600c1a", "commitAfterChange": "1caf2b41c370e66c328190589dd64f01b35d7384", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic VariableBinding[] getEmulationPath(LocalVariableBinding outerLocalVariable)", "signatureAfterChange": " \tpublic VariableBinding[] getEmulationPath(LocalVariableBinding outerLocalVariable)", "diff": ["-\t\tif (currentMethodScope == outerLocalVariable.declaringScope.methodScope()) {", "+\t\tBlockScope variableScope = outerLocalVariable.declaringScope;", "+\t\tif (variableScope == null /*val$this$0*/ || currentMethodScope == variableScope.methodScope()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b42d6e37d1db68366932c74ef2186821", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "9b20617e51225c8d5ac488c75961e3c5635f1fde", "commitAfterChange": "7d0dc70a06e5d7fc5b4cc4afc7878115c48ed7ca", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["-\t\treturn candidates[0].declaringClass.isClass()", "+\t\tReferenceBinding declaringClass = candidates[0].declaringClass;", "+\t\treturn !declaringClass.isInterface()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea53746b688dea74af71958316bfb90e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "fb10f5b6f5b206adc99f69bee6a0a9b1052b5fcc", "commitAfterChange": "d7f3937eb856f99bfe441e00382ecd34ff8ecdb2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public boolean doesMethodOverride(MethodBinding one, MethodBinding two)", "signatureAfterChange": " public boolean doesMethodOverride(MethodBinding one, MethodBinding two)", "diff": ["-\treturn super.doesMethodOverride(one, computeSubstituteMethod(two, one));", "+\tMethodBinding sub = computeSubstituteMethod(two, one);", "+\treturn sub != null && super.doesMethodOverride(one, sub);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f04b0cb1aacc22207f9580b0f84868c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["-\t\tboolean isRawMemberInvocation = !method.isStatic() && !receiverType.isUnboundWildcard() && method.declaringClass.isRawType() && (method.hasSubstitutedParameters() || method.hasSubstitutedReturnType());", "+\t\tboolean isRawMemberInvocation = !method.isStatic() ", "+\t\t\t\t&& !receiverType.isUnboundWildcard() ", "+\t\t\t\t&& method.declaringClass.isRawType() ", "+\t\t\t\t&& (method.hasSubstitutedParameters() || method.hasSubstitutedReturnType());", "+\t\t", "-\t\t\t\tif (((ParameterizedGenericMethodBinding)method).isRaw && (method.hasSubstitutedParameters() || method.hasSubstitutedReturnType())) {", "+\t\t\t\tParameterizedGenericMethodBinding paramMethod = (ParameterizedGenericMethodBinding) method;", "+\t\t\t\tif (paramMethod.isUnchecked || (paramMethod.isRaw && (method.hasSubstitutedParameters() || method.hasSubstitutedReturnType()))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcb36c39ce756085e14c8c360356b1fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "0e20d11d5f4009893e0fca19bf811830e71df2de", "commitAfterChange": "00f870e4285788a00dfbd7e40c5fe24f5a9385cd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void match(MethodDeclaration node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public void match(MethodDeclaration node, MatchingNodeSet nodeSet)", "diff": ["-\tif (!matchesTypeReference(this.pattern.returnSimpleName, node.returnType)) return;", "+\tTypeReference returnType =  node.returnType;", "+\tif (returnType == null || !matchesTypeReference(this.pattern.returnSimpleName, returnType)) return;"]}], "num": 12071}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "987143d88a59ffa998ab18d5ec4e4992", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cbaeafb584d41f09d55e51aae5dbd12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMirrorImpl.java", "commitBeforeChange": "d10c3a13f9bf3e38045d73a77dc467fa13aa4633", "commitAfterChange": "dc0f545f068e33d369e4afe03a62ea04b3af5d6b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate Object convertJDTArrayToReflectionArray(Object jdtValue, TypeBinding jdtType, Class<?> expectedType)", "signatureAfterChange": " \tprivate Object convertJDTArrayToReflectionArray(Object jdtValue, TypeBinding jdtType, Class<?> expectedType)", "diff": ["-\t\tif (!jdtType.isArrayType() || !(jdtValue instanceof Object[])) {", "-\t\t\t// TODO: wrap solo element into one-length array", "+\t\tif (!jdtType.isArrayType()) {", "+\t\t\t// the compiler says that the type binding isn't an array type; this probably means", "+\t\t\t// that there's some sort of syntax error.", "+\t\tObject[] jdtArray;", "+\t\t// See bug 261969: it's legal to pass a solo element for an array-typed value", "+\t\tif (jdtValue != null && !(jdtValue instanceof Object[])) {", "+\t\t\t// Create an array of the expected type", "+\t\t\tjdtArray = (Object[]) Array.newInstance(jdtValue.getClass(), 1);", "+\t\t\tjdtArray[0] = jdtValue;", "+\t\t} else {", "+\t\t\tjdtArray = (Object[])jdtValue;", "+\t\t}", "-\t\tObject[] jdtArray = (Object[])jdtValue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86378ae53740f09747fc009ba1a7203f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "bf8799048d5495b91a8fa294acab7c1d6e6839ba", "commitAfterChange": "5194065a29db2efb6ca399235812dc2379a0b639", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \tpublic IMethod createMethodHandle(\r \t\tAbstractMethodDeclaration method,\r \t\tIType type)", "signatureAfterChange": "\r \tpublic IMethod createMethodHandle(\r \t\tAbstractMethodDeclaration method,\r \t\tIType type)", "diff": ["-\t\t\t\t\tif (sameParameters) return methodHandle;\r", "+\t\t\t\t\tif (sameParameters) {\r", "+\t\t\t\t\t\tIJavaProject project = type.getJavaProject();\r", "+\t\t\t\t\t\t// check if the method's project is the same as the type's project\r", "+\t\t\t\t\t\t// they could be different in the case of a jar shared by several projects\r", "+\t\t\t\t\t\t// (the handles are equals and thus the java model cache contains only one of them)\r", "+\t\t\t\t\t\t// see bug 7945 Search results not selected in external jar  \r", "+\t\t\t\t\t\tif (!project.equals(methodHandle.getJavaProject())) {\r", "+\t\t\t\t\t\t\treturn type.getMethod(selector, parameterTypes);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\treturn methodHandle;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r"]}], "num": 19052}
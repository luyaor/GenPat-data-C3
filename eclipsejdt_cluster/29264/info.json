{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "227d12e1ebba43041954113fc4ea6ce9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19b96ce6d2d81d51e1b24e046f549eef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "8eb843ef75292ca86ade9a64a79ec382d0e5f4fa", "commitAfterChange": "bc498b88d907a470b6f3dd533c50f2d8844848a6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "signatureAfterChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "diff": ["+    \tIPath workspaceRootPath = jproj.getProject().getWorkspace().getRoot().getLocation();", "+    \t", "-\t    \t\t\tclasspathSB.append(entry.getPath().toFile().getAbsolutePath());", "+\t    \t\t\tclasspathSB.append(entry.getPath().makeAbsolute().toOSString());", "-    \t\t\t\tsourcepathSB.append(entry.getPath().toFile().getAbsolutePath());", "+    \t\t\t\t// Sourcepath is a bit odd -- it's workspace-relative", "+    \t\t\t\tIPath sourcepath = entry.getPath();", "+    \t\t\t\tsourcepathSB.append(workspaceRootPath.append(sourcepath).toOSString());", "-    \t\toptions.put(\"-s\", getString(jproj, AptPreferenceConstants.APT_GENSRCDIR)); //$NON-NLS-1$", "-    \t\tString binDir = jproj.getOutputLocation().toString();", "-    \t\toptions.put(\"-d\", binDir); //$NON-NLS-1$", "+    \t\t", "+    \t\t// Get absolute path for generated source dir", "+    \t\tIFolder genSrcDir = jproj.getProject().getFolder(getGenSrcDir(jproj));", "+    \t\toptions.put(\"-s\", genSrcDir.getRawLocation().toOSString()); //$NON-NLS-1$", "+    \t\t", "+    \t\t// Absolute path for bin dir as well", "+    \t\tIPath binPath = jproj.getOutputLocation();", "+    \t\tIPath binDir = workspaceRootPath.append(binPath);", "+    \t\toptions.put(\"-d\", binDir.toOSString()); //$NON-NLS-1$", "+    \t\t", "+    \t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74f8e29435dd68c60162b2e4708e6cac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileMap.java", "commitBeforeChange": "f673a1d9c7172b796dd31cfa78dd0dad32318c9f", "commitAfterChange": "bd2b202132c8d4bb0e104bd05827a1b9231c9dc5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic synchronized void writeState()", "signatureAfterChange": " \tpublic synchronized void writeState()", "diff": ["+\t\t\t", "+\t\t\t// Number of generated files with attributes", "+\t\t\tout.writeInt(_flags.size());", "+\t\t\t", "+\t\t\t// for each generated file that has attributes...", "+\t\t\tfor (Entry<IFile, Set<Flags>> entry : _flags.entrySet()) {", "+\t\t\t\t// ...generated file name", "+\t\t\t\tout.writeUTF(convertIFileToPath(entry.getKey()));", "+\t\t\t\t", "+\t\t\t\tSet<Flags> flags = entry.getValue();", "+\t\t\t\t// ...number of attributes", "+\t\t\t\tout.writeInt(flags.size());", "+\t\t\t\tfor (Flags f : flags) {", "+\t\t\t\t\t// ...attribute name", "+\t\t\t\t\tout.writeUTF(f.name());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "-\t\t\tAptPlugin.log(ioe, \"Could not serialize APT dependencies\"); //$NON-NLS-1$", "+\t\t\tAptPlugin.logWarning(ioe, \"Could not serialize APT dependencies\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78d8363de3035965aacb593d37bc87be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "fea48c1ab8bc004e73a7488c630798836bc78025", "commitAfterChange": "62174cb60f573d7f957b7c7e696b97cad27f7ffe", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "signatureAfterChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "diff": ["-    \tMap<String,String> options;", "-    \toptions = getRawProcessorOptions(jproj);", "+    \tMap<String,String> rawOptions = getRawProcessorOptions(jproj);", "+    \t// map is large enough to also include the programmatically generated options", "+    \tMap<String, String> options = new HashMap<String, String>(rawOptions.size() + 6);", "+    \t", "+    \t// Resolve path metavariables like %ROOT%", "+    \tfor (Map.Entry<String, String> entry : rawOptions.entrySet()) {", "+    \t\tString resolvedValue = resolveVarPath(jproj, entry.getValue());", "+    \t\tString value = (resolvedValue == null) ? entry.getValue() : resolvedValue;", "+    \t\toptions.put(entry.getKey(), value);", "+    \t}", "+    \t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bfadb76e8f7528b65f1fe883378755f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java", "commitBeforeChange": "8f26d11c4ba332f2be7ec8dbf571250694ed7207", "commitAfterChange": "43a0c55f94ed86f30ef95f5f1ba26a35207a73d3", "methodNumberBeforeChange": 180, "methodNumberAfterChange": 182, "signatureBeforeChange": " \tpublic void testJavadoc()", "signatureAfterChange": " \tpublic void testJavadoc()", "diff": ["-\t\tTestVisitor v1 = new TestVisitor();", "-\t\tb.setLength(0);", "-\t\tx1.accept(v1);", "-\t\tString result = b.toString();", "-\t\tassertTrue((\"[(JD/**?*/\"+TAG1S+\"/**?*/JD)]\").equals(result)); //$NON-NLS-1$", "+\t\t", "+\t\t// ASTVisitor() does not visit doc tags", "+\t\t{", "+\t\t\tTestVisitor v1 = new TestVisitor();", "+\t\t\tb.setLength(0);", "+\t\t\tx1.accept(v1);", "+\t\t\tString result = b.toString();", "+\t\t\tassertTrue((\"[(JD/**?*//**?*/JD)]\").equals(result)); //$NON-NLS-1$", "+\t\t}", "+\t\t", "+\t\t// ASTVisitor(false) does not visit doc tags", "+\t\t{", "+\t\t\tTestVisitor v1 = new TestVisitor(false);", "+\t\t\tb.setLength(0);", "+\t\t\tx1.accept(v1);", "+\t\t\tString result = b.toString();", "+\t\t\tassertTrue((\"[(JD/**?*//**?*/JD)]\").equals(result)); //$NON-NLS-1$", "+\t\t}", "+\t\t", "+\t\t// ASTVisitor(true) does visit doc tags", "+\t\t{", "+\t\t\tTestVisitor v1 = new TestVisitor(true);", "+\t\t\tb.setLength(0);", "+\t\t\tx1.accept(v1);", "+\t\t\tString result = b.toString();", "+\t\t\tassertTrue((\"[(JD/**?*/\"+TAG1S+\"/**?*/JD)]\").equals(result)); //$NON-NLS-1$", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf50c6dbd70e6ed4a8435ce9a537cbb8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "75d0a1ab01324e0e0103ac2bd6c3bab256ea0d59", "commitAfterChange": "e4262ef08c6f8e26e57ca0c6211e0fdea3f40578", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic IJavaElement getJavaElement()", "signatureAfterChange": " \tpublic IJavaElement getJavaElement()", "diff": ["+\t\t} else if (referenceBinding.isTypeVariable()) {", "+\t\t\t// type parameter", "+\t\t\tBinding declaringElement = ((TypeVariableBinding) referenceBinding).declaringElement;", "+\t\t\tIBinding declaringTypeBinding = null;", "+\t\t\tif (declaringElement instanceof MethodBinding)", "+\t\t\t\tdeclaringTypeBinding = this.resolver.getMethodBinding((MethodBinding) declaringElement);", "+\t\t\telse", "+\t\t\t\tdeclaringTypeBinding = this.resolver.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) declaringElement);", "+\t\t\tIType declaringType = (IType) declaringTypeBinding.getJavaElement();", "+\t\t\treturn declaringType.getTypeParameter(new String(referenceBinding.sourceName()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f87944e60b9c851c35ac72363b9f23dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java", "commitBeforeChange": "0b7ebcdf7595a3c6ccfb57308dc2b92df6bd1e76", "commitAfterChange": "b424f11798c06795279cf3972c2371a98a94da86", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  protected void addAllSourceFiles(final ArrayList sourceFiles) throws CoreException", "signatureAfterChange": "  protected void addAllSourceFiles(final ArrayList sourceFiles) throws CoreException", "diff": ["+\t\tfinal int segmentCount = sourceLocation.sourceFolder.getFullPath().segmentCount();", "+\t\tfinal IContainer outputFolder = sourceLocation.binaryFolder;", "+\t\tfinal boolean isOutputFolder = sourceLocation.sourceFolder.equals(outputFolder);", "-\t\t\t\t\t\t\tif (isAlsoProject && isExcludedFromProject(proxy.requestFullPath())) return false;", "+\t\t\t\t\t\t\tIPath folderPath = null;", "+\t\t\t\t\t\t\tif (isAlsoProject)", "+\t\t\t\t\t\t\t\tif (isExcludedFromProject(folderPath = proxy.requestFullPath())) return false;", "+\t\t\t\t\t\t\tif (!isOutputFolder) {", "+\t\t\t\t\t\t\t\tif (folderPath == null)", "+\t\t\t\t\t\t\t\t\tfolderPath = proxy.requestFullPath();", "+\t\t\t\t\t\t\t\tcreateFolder(folderPath.removeFirstSegments(segmentCount), outputFolder);", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdb62c3911e9a2bcd7a063d58c94b6d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "1e8305535ff304200778a08eb6eb4025791a09c1", "commitAfterChange": "3388256fa80bf40daffa9f485d2674986c875b82", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tpublic boolean visit(SingleVariableDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(SingleVariableDeclaration node)", "diff": ["+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=391898", "+\t\t\t\tif (node.getAST().apiLevel() >= AST.JLS8) {", "+\t\t\t\t\tList annotations = node.varargsAnnotations();", "+\t\t\t\t\tif (annotations != null) {", "+\t\t\t\t\t\tthis.buffer.append(' ');\t\t\t\t\t\t", "+\t\t\t\t\t\tfor (Iterator it = annotations.iterator(); it.hasNext(); ) {", "+\t\t\t\t\t\t\tAnnotation annotation = (Annotation) it.next();", "+\t\t\t\t\t\t\tannotation.accept(this);", "+\t\t\t\t\t\t\tthis.buffer.append(' ');", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff2bdb091ae2afbbabbbad7c8f20b8c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ImportRewrite.java", "commitBeforeChange": "89bd64197a8c81d9353ca25ee2694b070255ceb5", "commitAfterChange": "8cc33a88b7e04cb90905b591a01c27e56af27e07", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": " final int findInImports(String qualifier, String name, int kind)", "signatureAfterChange": " final int findInImports(String qualifier, String name, int kind)", "diff": ["+\t\tif (this.filterImplicitImports && this.useContextToFilterImplicitImports) {", "+\t\t\tString fPackageName= this.compilationUnit.getParent().getElementName();", "+\t\t\tString mainTypeSimpleName= JavaCore.removeJavaLikeExtension(this.compilationUnit.getElementName());", "+\t\t\tString fMainTypeName= concatenateName(fPackageName, mainTypeSimpleName);", "+\t\t\tif (kind == ImportRewriteContext.KIND_TYPE", "+\t\t\t\t\t&& (qualifier.equals(fPackageName)", "+\t\t\t\t\t\t\t|| fMainTypeName.equals(concatenateName(qualifier, name))))", "+\t\t\t\treturn ImportRewriteContext.RES_NAME_FOUND;", "+\t\t}"]}], "num": 29264}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50badf9a963c4a44613b9d2e2a6e75f3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da8d36d1732581b6574d53cbc20723a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/BaseProcessorEnv.java", "commitBeforeChange": "80b216af2abfbc335ce04bf55fc463ba47e45873", "commitAfterChange": "8eb843ef75292ca86ade9a64a79ec382d0e5f4fa", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic static void getBinding(ASTNode node, List<IBinding> bindings)", "signatureAfterChange": "     protected void getDeclarations(ASTNode node, List<Declaration>decls)", "diff": ["-\tpublic static void getBinding(ASTNode node, List<IBinding> bindings)", "-\t{", "-\t\tif( node == null ) return;", "+    protected void getDeclarations(ASTNode node, List<Declaration>decls)", "+    {", "+    \tif( node == null ) return;", "+\t\t\t\tfinal EclipseDeclarationImpl decl; ", "-\t\t\t\t\tbindings.add(fieldBinding);", "+\t\t\t\t\tdecl = Factory.createDeclaration(fieldBinding, this);", "+\t\t\t\telse{", "+\t\t\t\t\tdecl = Factory.createDeclaration(frag, getFileForNode(frag), this);", "+\t\t\t\t}", "+\t\t\t\tif( decl != null )", "+\t\t\t\t\tdecls.add(decl);", "-        if(binding != null)", "-            bindings.add(binding);", "+\t\tfinal EclipseDeclarationImpl decl; ", "+\t\tif( binding != null )", "+\t\t\tdecl = Factory.createDeclaration(binding, this);", "+\t\telse{", "+\t\t\tdecl = Factory.createDeclaration(node, getFileForNode(node), this);", "+\t\t}", "+\t\tif( decl != null )", "+\t\t\tdecls.add( decl );", "+        ", "-\t}", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4107a6a5872bd7baa17fd35628d34a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/TestVerifier.java", "commitBeforeChange": "f874c6b5077c159b72bb8e4b8aad8ed303fb1894", "commitAfterChange": "71c4acdd0905e065690b5a7def2363cd736fd9d9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " private boolean checkBuffers(String errorString, String outputString, String sourceFileName, String expectedSuccessOutputString)", "signatureAfterChange": " private boolean checkBuffers(String outputString, String errorString,  \t\tString sourceFileName, String expectedOutputString, String expectedErrorStringStart)", "diff": ["-private boolean checkBuffers(String errorString, String outputString, String sourceFileName, String expectedSuccessOutputString) {", "-", "-\tif (errorString.trim().length() > 0) {", "-\t\tthis.failureReason =", "-\t\t\t\"Unexpected target error running resulting class file for \"", "-\t\t\t\t+ sourceFileName", "-\t\t\t\t+ \":\\n\"", "-\t\t\t\t+ errorString;", "-\t\treturn false;", "+private boolean checkBuffers(String outputString, String errorString, ", "+\t\tString sourceFileName, String expectedOutputString, String expectedErrorStringStart) {", "+\tString platformIndependantString;", "+\tif (expectedOutputString != null) {", "+\t\tplatformIndependantString = Util.convertToIndependantLineDelimiter(outputString.trim());", "+\t\tif (!Util.convertToIndependantLineDelimiter(expectedOutputString).equals(platformIndependantString)) {", "+\t\t\tSystem.out.println(Util.displayString(platformIndependantString, 2));", "+\t\t\tthis.failureReason =", "+\t\t\t\t\"Unexpected output running resulting class file for \"", "+\t\t\t\t\t+ sourceFileName", "+\t\t\t\t\t+ \":\\n\"", "+\t\t\t\t\t+ \"--[START]--\\n\"", "+\t\t\t\t\t+ outputString", "+\t\t\t\t\t+ \"---[END]---\\n\";", "+\t\t\treturn false;", "+\t\t}", "+\t}\t", "+\tif (expectedErrorStringStart != null) {", "+\t\tplatformIndependantString = Util.convertToIndependantLineDelimiter(errorString.trim());", "+\t\tif (expectedErrorStringStart.length() == 0 && platformIndependantString.length() > 0 ||", "+\t\t\t\t!platformIndependantString.startsWith(Util.convertToIndependantLineDelimiter(expectedErrorStringStart))) {", "+\t\t\t/*", "+\t\t\t * This is an opportunistic heuristic for error strings comparison:", "+\t\t\t * - null means skip test;", "+\t\t\t * - empty means exactly empty;", "+\t\t\t * - other means starts with.", "+\t\t\t * If this became insufficient, we could envision using specific", "+\t\t\t * matchers for specific needs.", "+\t\t\t */", "+\t\t\tSystem.out.println(Util.displayString(platformIndependantString, 2));", "+\t\t\tthis.failureReason =", "+\t\t\t\t\"Unexpected error running resulting class file for \"", "+\t\t\t\t\t+ sourceFileName", "+\t\t\t\t\t+ \":\\n\"", "+\t\t\t\t\t+ \"--[START]--\\n\"", "+\t\t\t\t\t+ errorString", "+\t\t\t\t\t+ \"---[END]---\\n\";", "+\t\t\treturn false;", "+\t\t}", "-\tString platformIndependantOutputString = Util.convertToIndependantLineDelimiter(outputString.trim());", "-\tif (expectedSuccessOutputString != null && !Util.convertToIndependantLineDelimiter(expectedSuccessOutputString).equals(platformIndependantOutputString)) {", "-\t\tSystem.out.println(Util.displayString(platformIndependantOutputString, 2));", "-\t\tthis.failureReason =", "-\t\t\t\"Unexpected output running resulting class file for \"", "-\t\t\t\t+ sourceFileName", "-\t\t\t\t+ \":\\n\"", "-\t\t\t\t+ \"--[START]--\\n\"", "-\t\t\t\t+ outputString", "-\t\t\t\t+ \"---[END]---\\n\";", "-\t\treturn false;", "-\t}", "-\t"]}], "num": 53599}
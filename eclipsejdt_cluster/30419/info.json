{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f85bb904120bb65b46c0e8cf3a2568d0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c73aad8cc06e37296963aeff31fc091e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 251, "signatureBeforeChange": " \tpublic void test247()", "signatureAfterChange": " \tpublic void test247()", "diff": ["-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tMX<Class<? extends Object>> mx2 = new MX<Class>(); // wrong\\n\" + ", "+\t\t\t\"\t                                         ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tMX<? extends Class> mx5 = new MX<Class>(); // ok\\n\" + ", "+\t\t\t\"\t             ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tMX<? extends Class> mx5 = new MX<Class>(); // ok\\n\" + ", "+\t\t\t\"\t                                 ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tMX<? super Class> mx6 = new MX<Class>(); // ok\\n\" + ", "+\t\t\t\"\t           ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tMX<? super Class> mx6 = new MX<Class>(); // ok\\n\" + ", "+\t\t\t\"\t                               ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tMX<Class<? extends Class>> mx7 = new MX<Class<Class>>(); // wrong\\n\" + ", "+\t\t\t\"\t                   ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\t\"5. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"11. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tMX<Class<? extends Class>> mx7 = new MX<Class<Class>>(); // wrong\\n\" + ", "+\t\t\t\"\t                                              ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"12. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tMX<MX<? extends Class>> mx8 = new MX<MX<Class>>(); // wrong\\n\" + ", "+\t\t\t\"\t                ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"13. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"14. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tMX<MX<? extends Class>> mx8 = new MX<MX<Class>>(); // wrong\\n\" + ", "+\t\t\t\"\t                                        ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd6192f9e8d53b404b0cd83df4e974b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "11d37ba24baa8a8d5177d1ba6ab1649342a0de47", "commitAfterChange": "3b53dc72aa60c63aafa5e63cea69df72f36f7346", "methodNumberBeforeChange": 246, "methodNumberAfterChange": 246, "signatureBeforeChange": " \tpublic void test0242()", "signatureAfterChange": " \tpublic void test0242()", "diff": ["+\t\t\t\t\"    @SuppressWarnings(\\\"unchecked\\\")\\n\" +", "+\t\t\t\t\"        final Class<? extends String> clazz2 = (Class<? extends String>) classes.get(\\\"test\\\");\\n\" + ", "+\t\t\t\t\"        final Class<String> clazz3 = (Class<String>) classes.get(\\\"test\\\");\\n\" + ", "-\t\t\t\t\"}\\n\",", "+\t\t\t\t\"}\", // =================", "-\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tprivate static final Map<String, Class> classes = new HashMap<String, Class>();\\n\" + ", "-\t\t\t\"\t                                 ^^^^^\\n\" + ", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tfinal Class<? extends Object> clazz = (Class<? extends Object>) classes.get(\\\"test\\\");\\n\" + ", "+\t\t\t\"\t                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The cast from Class to Class<? extends Object> is actually checking against the erased type Class\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tprivate static final Map<String, Class> classes = new HashMap<String, Class>();\\n\" + ", "-\t\t\t\"\t                                                                      ^^^^^\\n\" + ", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tfinal Class<? extends String> clazz2 = (Class<? extends String>) classes.get(\\\"test\\\");\\n\" + ", "+\t\t\t\"\t                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The cast from Class to Class<? extends String> is actually checking against the erased type Class\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tfinal Class<? extends String> clazz2 = (Class<? extends String>) classes.get(\\\"test\\\");\\n\" + ", "+\t\t\t\"\t                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from Class to Class<? extends String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tfinal Class<String> clazz3 = (Class<String>) classes.get(\\\"test\\\");\\n\" + ", "+\t\t\t\"\t                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The cast from Class to Class<String> is actually checking against the erased type Class\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tfinal Class<String> clazz3 = (Class<String>) classes.get(\\\"test\\\");\\n\" + ", "+\t\t\t\"\t                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from Class to Class<String>\\n\" + "]}], "num": 30419}
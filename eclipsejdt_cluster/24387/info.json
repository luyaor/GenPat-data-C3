{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "304f45bc8ce19b930a36ffbf547aa4ae", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58336ac9c295d8083ac77dde1d99b2ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "fcc72e46b744ea79a152e24a7ffac0f0901b7400", "commitAfterChange": "06a3d951c7ec6b39762293a6177f305ce0f3f22c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic IAnnotationBinding[] getAnnotations()", "signatureAfterChange": "  \tpublic IAnnotationBinding[] getAnnotations()", "diff": ["-\tpublic IAnnotationBinding[] getAnnotations() { ", "-\t\tIAnnotationBinding[] domInstances = AnnotationBinding.NoAnnotations;", "+\tpublic IAnnotationBinding[] getAnnotations() {", "+\t\tif (this.annotations != null) {", "+\t\t\treturn this.annotations;", "+\t\t}", "-\t\t\tif (length > 0) {", "-\t\t\t\tdomInstances = new AnnotationBinding[length];", "+\t\t\tif (length != 0) {", "+\t\t\t\tIAnnotationBinding[] domInstances = new IAnnotationBinding[length];", "+\t\t\t\treturn this.annotations = domInstances;", "-\t\treturn domInstances;", "+\t\treturn this.annotations = AnnotationBinding.NoAnnotations;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73510769fc16e45bba96dc53a950c0ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "0a6e9afa6be886f4e248dfc5524dc6feeca42dc2", "commitAfterChange": "64599d0a71b28e2b0fdb616b76390e8b8c0610c1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t} else if ((this.resolvedType = receiverType = ((SingleTypeReference) type).resolveTypeEnclosing(", "+\t\t\t} else if ((receiverType = ((SingleTypeReference) type).resolveTypeEnclosing(", "-\t\t\t\treturn receiverType;", "+\t\t\t\treturn this.resolvedType = receiverType;", "-\t\t\t\treturn receiverType;", "+\t\t\t\treturn this.resolvedType = receiverType;", "-\t\t\treturn receiverType;", "+\t\t\treturn this.resolvedType = receiverType;", "-\t\t\treturn receiverType;", "+\t\t\treturn this.resolvedType = receiverType;", "-\t\treturn anonymousType.binding; // 1.2 change", "+\t\treturn this.resolvedType = anonymousType.binding; // 1.2 change"]}], "num": 24387}
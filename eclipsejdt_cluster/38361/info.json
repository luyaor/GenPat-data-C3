{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72ccf6a6bf25f8c6ce9c98c0f7755149", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5136c1b2c30ab5fed2fbac673de2d214", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "7f9e7745cf3f1c024406269afc8bec9564b2443c", "commitAfterChange": "f71ae6e6dfede90c4056a2e033197a9212bd23a2", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tprivate void findFieldsAndMethods( \t\tchar[] token, \t\tTypeBinding receiverType, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "signatureAfterChange": "  \tprivate void findFieldsAndMethods( \t\tchar[] token, \t\tTypeBinding receiverType, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "diff": ["-\t\t\t\trelevance += computeRelevanceForRestrictions(false); // no access restriction for length field", "+\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for length field", "-\t\t\t\trelevance += computeRelevanceForRestrictions(false); // no access restriction for clone() method", "+\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for clone() method"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "beb8bb5e2ea640fc770c8a5c10ed7ac8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "7f9e7745cf3f1c024406269afc8bec9564b2443c", "commitAfterChange": "f71ae6e6dfede90c4056a2e033197a9212bd23a2", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType)", "signatureAfterChange": " \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType)", "diff": ["-\t\t\t\t\tboolean hasRestrictedAccess = false;", "-//\t\t\t\t\tboolean hasRestrictedAccess = constructor.declaringClass.hasRestrictedAccess();", "-//\t\t\t\t\tif(this.options.checkRestrictions && hasRestrictedAccess) continue next;", "-\t\t\t\t\t", "-\t\t\t\t\t\trelevance += computeRelevanceForRestrictions(hasRestrictedAccess);", "+\t\t\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE);", "-\t\t\t\t\t\trelevance += computeRelevanceForRestrictions(hasRestrictedAccess);", "+\t\t\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE);"]}], "num": 38361}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ac8e1bb72f3ccc09333bf2fc2636830", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "803b28dc112d14b68d49d7a46c7a1e8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTypeHierarchyTests.java", "commitBeforeChange": "4a0a176fc1f5079a22fc4d3de624f4e4a375deea", "commitAfterChange": "6a18c2222a1285809e9dd75483f3998190af8138", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void testPerSuperTypes() throws CoreException", "signatureAfterChange": " \tpublic void testPerSuperTypes() throws CoreException", "diff": ["-\t\ttagAsSummary(\"Type hierarchy\", true); // put in fingerprint", "-\t\tICompilationUnit unit = getCompilationUnit(\"org.eclipse.jdt.core\", \"org.eclipse.jdt.internal.compiler.parser\", \"Parser.java\");", "-\t\tassertNotNull(\"Parser not found!\", unit);", "+\t\tassertNotNull(\"Parser not found!\", PARSER_WORKING_COPY);", "-\t\tfor (int i=0; i<WARMUP_COUNT; i++) {", "-\t\t\tIType[] types = unit.getType(\"Parser\").newSupertypeHierarchy(null).getAllClasses();", "+\t\tfor (int i=0; i<10*WARMUP_COUNT; i++) { // More Warm up is required.", "+\t\t\tIType[] types = PARSER_WORKING_COPY.getType(\"Parser\").newSupertypeHierarchy(null).getAllClasses();", "-\t\t\t\tSystem.out.println(\"  - \"+INT_FORMAT.format(types.length)+\" all classes found in hierarchy.\");", "+\t\t\t\tSystem.out.println(\"  - \"+INT_FORMAT.format(types.length)+\" classes found in hierarchy.\");", "-\t\t\tunit.getType(\"Parser\").newSupertypeHierarchy(null).getAllClasses();", "+\t\t\tfor (int j =0; j < 20; j++) {", "+\t\t\t\tPARSER_WORKING_COPY.getType(\"Parser\").newSupertypeHierarchy(null).getAllClasses();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87f47f73ef907b1ef50d2abd576f24f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ImportRewriteAnalyzer.java", "commitBeforeChange": "8f02f136cbe78136799368817f7f67a803b6f2f4", "commitAfterChange": "8b56294ad1d64901f2a83c8ddc1f676cd682473f", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \t \tpublic MultiTextEdit getResultingEdits(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \t \tpublic MultiTextEdit getResultingEdits(IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\t", "-\t\t\tboolean useSpaceBetween= useSpaceBetweenGroups();", "-\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t", "-\t\t\t\tif (useSpaceBetween) {", "+\t\t\t\tif (this.spacesBetweenGroups > 0) {", "-\t\t\t\t\t\t\tstringsToInsert.add(lineDelim);", "+\t\t\t\t\t\t\tfor (int k= this.spacesBetweenGroups; k > 0; k--) {", "+\t\t\t\t\t\t\t\tstringsToInsert.add(lineDelim);", "+\t\t\t\t\t\t\t}"]}], "num": 480}
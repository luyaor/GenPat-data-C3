{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "91adc6d1e9849ddf46ddcd28eee78046", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0f5b9054e4c7e6141ff71c96ccbcb8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "1666c32b249d36aa9547f4f66f511c5bb00d3d63", "commitAfterChange": "4e6bb96b0e120539a45cc4860f508bf12e097d37", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic ParameterizedGenericMethodBinding(MethodBinding originalMethod, TypeBinding[] typeArguments, LookupEnvironment environment)", "signatureAfterChange": " \tpublic ParameterizedGenericMethodBinding(MethodBinding originalMethod, TypeBinding[] typeArguments, LookupEnvironment environment, boolean inferredWithUncheckConversion, boolean hasReturnProblem)", "diff": ["-\tpublic ParameterizedGenericMethodBinding(MethodBinding originalMethod, TypeBinding[] typeArguments, LookupEnvironment environment) {", "+\tpublic ParameterizedGenericMethodBinding(MethodBinding originalMethod, TypeBinding[] typeArguments, LookupEnvironment environment, boolean inferredWithUncheckConversion, boolean hasReturnProblem) {", "-\t    this.returnType = Scope.substitute(this, originalMethod.returnType);", "-\t    this.thrownExceptions = Scope.substitute(this, originalMethod.thrownExceptions);", "+\t    if (inferredWithUncheckConversion) { // JSL 18.5.2: \"If unchecked conversion was necessary...\"", "+\t    \tthis.returnType = getErasure18_5_2(originalMethod.returnType, environment, hasReturnProblem); // propagate simulation of Bug JDK_8026527", "+\t    \tthis.thrownExceptions = new ReferenceBinding[originalMethod.thrownExceptions.length];", "+\t    \tfor (int i = 0; i < originalMethod.thrownExceptions.length; i++) {", "+\t    \t\tthis.thrownExceptions[i] = (ReferenceBinding) getErasure18_5_2(originalMethod.thrownExceptions[i], environment, false); // no excuse for exceptions", "+\t\t\t}", "+\t    } else {", "+\t    \tthis.returnType = Scope.substitute(this, originalMethod.returnType);", "+\t    \tthis.thrownExceptions = Scope.substitute(this, originalMethod.thrownExceptions);", "+\t    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa6cac3d949d24979735c781c4e136ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "d25d8e2aefb1fe7881a3b669cacd403afc528b1a", "commitAfterChange": "c768bb705d25a055607160ce11d239f196ca5653", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  protected AbstractImageBuilder(JavaBuilder javaBuilder)", "signatureAfterChange": "  protected AbstractImageBuilder(JavaBuilder javaBuilder, boolean buildStarting, State newState)", "diff": ["-protected AbstractImageBuilder(JavaBuilder javaBuilder) {", "-\tthis.javaBuilder = javaBuilder;", "-\tthis.newState = new State(javaBuilder);", "-", "+protected AbstractImageBuilder(JavaBuilder javaBuilder, boolean buildStarting, State newState) {", "+\tthis.javaBuilder = javaBuilder;", "-\tthis.compiler = newCompiler();", "-\tthis.workQueue = new WorkQueue();", "-\tthis.problemSourceFiles = new ArrayList(3);", "+\tif (buildStarting) {", "+\t\tthis.newState = newState == null ? new State(javaBuilder) : newState;", "+\t\tthis.compiler = newCompiler();", "+\t\tthis.workQueue = new WorkQueue();", "+\t\tthis.problemSourceFiles = new ArrayList(3);", "+", "+\t\tif (this.javaBuilder.participants != null) {", "+\t\t\tfor (int i = 0, l = this.javaBuilder.participants.length; i < l; i++) {", "+\t\t\t\tif (this.javaBuilder.participants[i].isAnnotationProcessor()) {", "+\t\t\t\t\t// initialize this set so the builder knows to gather CUs that define Annotation types", "+\t\t\t\t\t// each Annotation processor participant is then asked to process these files AFTER", "+\t\t\t\t\t// the compile loop. The normal dependency loop will then recompile all affected types", "+\t\t\t\t\tthis.filesDeclaringAnnotation = new SimpleSet(1);", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 63852}
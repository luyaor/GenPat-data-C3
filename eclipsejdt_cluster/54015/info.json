{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2cc60da2b41f7d371302307023d166aa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f7460cc135a43f27ec1142269fc45b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "bcb46990486d868577608d099b51c359510600ab", "commitAfterChange": "76641371763d25b26245b79d3162c6759e069b9e", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " protected void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\tfor (int i=0, al=method.annotations.length; i<al; i++) {", "-\t\t\tTypeReference typeRef = method.annotations[i].type;", "-\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(typeRef);", "-\t\t\tif (level != null) {", "-\t\t\t\tif (enclosingElement == null)", "-\t\t\t\t\tenclosingElement = createHandle(method, parent);", "-\t\t\t\tthis.patternLocator.matchReportReference(typeRef, enclosingElement, method.binding, level.intValue(), this);", "-\t\t\t}", "+\t\tif (enclosingElement == null) {", "+\t\t\tenclosingElement = createHandle(method, parent);", "+\t\treportMatching(method.annotations, enclosingElement, method.binding, nodeSet, true, true);", "+\t\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e25edacfbc5477231f460a71be660f37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "bcb46990486d868577608d099b51c359510600ab", "commitAfterChange": "76641371763d25b26245b79d3162c6759e069b9e", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 68, "signatureBeforeChange": " protected void reportMatching(FieldDeclaration field, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(FieldDeclaration field, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\tfor (int i=0, al=field.annotations.length; i<al; i++) {", "-\t\t\tTypeReference typeRef = field.annotations[i].type;", "-\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(typeRef);", "-\t\t\tif (level != null) {", "-\t\t\t\tif (enclosingElement == null)", "-\t\t\t\t\tenclosingElement = createHandle(field, type, parent);", "-\t\t\t\tthis.patternLocator.matchReportReference(typeRef, enclosingElement, field.binding, level.intValue(), this);", "-\t\t\t}", "+\t\tif (enclosingElement == null) {", "+\t\t\tenclosingElement = createHandle(field, type, parent);", "+\t\treportMatching(field.annotations, enclosingElement, field.binding, nodeSet, true, true);"]}], "num": 54015}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5daa55676b760e354502099f131a3be6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e152018105f574c93f66c38b382e208", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "94cf6b4f7af3fd80bbff88619e21ee7974889ee5", "commitAfterChange": "fe32c2fb1206f9aa293286057591b6614ed5e3a2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t// generate condition", "-\t\tif (continueLabel != null) {", "-\t\t\tcontinueLabel.place();", "-\t\t\tcondition.generateOptimizedBoolean(", "-\t\t\t\tcurrentScope,", "-\t\t\t\tcodeStream,", "-\t\t\t\tactionLabel,", "-\t\t\t\tnull,", "-\t\t\t\ttrue);", "+\t\tConstant cst = condition.optimizedBooleanConstant();", "+\t\tboolean isConditionOptimizedFalse = cst != Constant.NotAConstant && cst.booleanValue() == false;\t\t", "+\t\tif (isConditionOptimizedFalse){", "+\t\t\tcondition.generateCode(currentScope, codeStream, false);", "+\t\t} else {", "+\t\t\t// generate condition", "+\t\t\tif (continueLabel != null) {", "+\t\t\t\tcontinueLabel.place();", "+\t\t\t\tcondition.generateOptimizedBoolean(", "+\t\t\t\t\tcurrentScope,", "+\t\t\t\t\tcodeStream,", "+\t\t\t\t\tactionLabel,", "+\t\t\t\t\tnull,", "+\t\t\t\t\ttrue);", "+\t\t\t}", "-\t\tbreakLabel.place();", "+\t\tif (breakLabel.hasForwardReferences())", "+\t\t\tbreakLabel.place();", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db5a3b34dc9235b02397069ec686fde3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "8a6b6162ae3ffaa7b5448bfc27d1bab3854207d2", "commitAfterChange": "5df75ce3074574b9ceea64411eeaa18313a445b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t}", "-\t// generate condition", "-\tConstant cst = this.condition.optimizedBooleanConstant();", "-\tboolean isConditionOptimizedFalse = cst != Constant.NotAConstant && cst.booleanValue() == false;", "-\tif (isConditionOptimizedFalse){", "-\t\tthis.condition.generateCode(currentScope, codeStream, false);", "-\t} else if (hasContinueLabel) {", "-\t\tthis.condition.generateOptimizedBoolean(", "-\t\t\tcurrentScope,", "-\t\t\tcodeStream,", "-\t\t\tactionLabel,", "-\t\t\tnull,", "-\t\t\ttrue);", "+\t\t// generate condition", "+\t\tConstant cst = this.condition.optimizedBooleanConstant();", "+\t\tboolean isConditionOptimizedFalse = cst != Constant.NotAConstant && cst.booleanValue() == false;", "+\t\tif (isConditionOptimizedFalse){", "+\t\t\tthis.condition.generateCode(currentScope, codeStream, false);", "+\t\t} else {", "+\t\t\tthis.condition.generateOptimizedBoolean(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tcodeStream,", "+\t\t\t\tactionLabel,", "+\t\t\t\tnull,", "+\t\t\t\ttrue);", "+\t\t}"]}], "num": 69602}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af255a0968063c7a713232f17022535b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c19da881a715b04b4e38765292e5d024", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "5076d5a6b44e81a2fe7fa937d2281dee72a83981", "commitAfterChange": "61c42f8b534ab4d093a587806abc001c702b4ad9", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void test033()", "signatureAfterChange": " \tpublic void test033()", "diff": ["-\t\t\t\t\"\tvoid f(boolean b, Object... o) {\\n\" + ", "-\t\t\t\t\"\t\tSystem.out.print(\\\"f(boolean, Object...)\\\");\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"\tvoid f(Object... o) {\\n\" + ", "-\t\t\t\t\"\t\tSystem.out.print(\\\"f(Object...)\\\");\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"\tvoid a(boolean b, Object... o) {System.out.print(1);}\\n\" + ", "+\t\t\t\t\"\tvoid a(Object... o) {System.out.print(2);}\\n\" + ", "-\t\t\t\t\"\t\tX a = new X();\\n\" + ", "-\t\t\t\t\"\t\ta.f(true);\\n\" + ", "-\t\t\t\t\"\t\ta.f(true, \\\"foobar\\\");\\n\" + ", "-\t\t\t\t\"\t\ta.f(\\\"foo\\\", \\\"bar\\\");\\n\" + ", "+\t\t\t\t\"\t\tX x = new X();\\n\" + ", "+\t\t\t\t\"\t\tx.a(true);\\n\" + ", "+\t\t\t\t\"\t\tx.a(true, \\\"foobar\\\");\\n\" + ", "+\t\t\t\t\"\t\tx.a(\\\"foo\\\", \\\"bar\\\");\\n\" + ", "-\t\t\t\"f(boolean, Object...)f(boolean, Object...)f(Object...)\");", "-\t}\t", "+\t\t\t\"112\");", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tvoid b(boolean b, Object... o) {}\\n\" + ", "+\t\t\t\t\"\tvoid b(Boolean... o) {}\\n\" + ", "+\t\t\t\t\"\tvoid c(boolean b, boolean b2, Object... o) {}\\n\" + ", "+\t\t\t\t\"\tvoid c(Boolean b, Object... o) {}\\n\" + ", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"\t\tX x = new X();\\n\" + ", "+\t\t\t\t\"\t\tx.b(true);\\n\" + ", "+\t\t\t\t\"\t\tx.b(true, false);\\n\" + ", "+\t\t\t\t\"\t\tx.c(true, true, true);\\n\" + ", "+\t\t\t\t\"\t\tx.c(Boolean.TRUE, Boolean.TRUE, Boolean.TRUE);\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 8)\\r\\n\" + ", "+\t\t\t\"\tx.b(true);\\r\\n\" + ", "+\t\t\t\"\t  ^\\n\" + ", "+\t\t\t\"The method b(boolean, Object[]) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 9)\\r\\n\" + ", "+\t\t\t\"\tx.b(true, false);\\r\\n\" + ", "+\t\t\t\"\t  ^\\n\" + ", "+\t\t\t\"The method b(boolean, Object[]) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 10)\\r\\n\" + ", "+\t\t\t\"\tx.c(true, true, true);\\r\\n\" + ", "+\t\t\t\"\t  ^\\n\" + ", "+\t\t\t\"The method c(boolean, boolean, Object[]) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 11)\\r\\n\" + ", "+\t\t\t\"\tx.c(Boolean.TRUE, Boolean.TRUE, Boolean.TRUE);\\r\\n\" + ", "+\t\t\t\"\t  ^\\n\" + ", "+\t\t\t\"The method c(boolean, boolean, Object[]) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd6192f9e8d53b404b0cd83df4e974b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "11d37ba24baa8a8d5177d1ba6ab1649342a0de47", "commitAfterChange": "3b53dc72aa60c63aafa5e63cea69df72f36f7346", "methodNumberBeforeChange": 246, "methodNumberAfterChange": 246, "signatureBeforeChange": " \tpublic void test0242()", "signatureAfterChange": " \tpublic void test0242()", "diff": ["+\t\t\t\t\"    @SuppressWarnings(\\\"unchecked\\\")\\n\" +", "+\t\t\t\t\"        final Class<? extends String> clazz2 = (Class<? extends String>) classes.get(\\\"test\\\");\\n\" + ", "+\t\t\t\t\"        final Class<String> clazz3 = (Class<String>) classes.get(\\\"test\\\");\\n\" + ", "-\t\t\t\t\"}\\n\",", "+\t\t\t\t\"}\", // =================", "-\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tprivate static final Map<String, Class> classes = new HashMap<String, Class>();\\n\" + ", "-\t\t\t\"\t                                 ^^^^^\\n\" + ", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tfinal Class<? extends Object> clazz = (Class<? extends Object>) classes.get(\\\"test\\\");\\n\" + ", "+\t\t\t\"\t                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The cast from Class to Class<? extends Object> is actually checking against the erased type Class\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tprivate static final Map<String, Class> classes = new HashMap<String, Class>();\\n\" + ", "-\t\t\t\"\t                                                                      ^^^^^\\n\" + ", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tfinal Class<? extends String> clazz2 = (Class<? extends String>) classes.get(\\\"test\\\");\\n\" + ", "+\t\t\t\"\t                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The cast from Class to Class<? extends String> is actually checking against the erased type Class\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tfinal Class<? extends String> clazz2 = (Class<? extends String>) classes.get(\\\"test\\\");\\n\" + ", "+\t\t\t\"\t                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from Class to Class<? extends String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tfinal Class<String> clazz3 = (Class<String>) classes.get(\\\"test\\\");\\n\" + ", "+\t\t\t\"\t                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The cast from Class to Class<String> is actually checking against the erased type Class\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tfinal Class<String> clazz3 = (Class<String>) classes.get(\\\"test\\\");\\n\" + ", "+\t\t\t\"\t                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from Class to Class<String>\\n\" + "]}], "num": 33406}
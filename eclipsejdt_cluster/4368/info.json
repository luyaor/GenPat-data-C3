{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "370a13c63f8595f3792cc1c06e44fddf", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ea44db2dcf5c167e53c19718f0bd8a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "0c3f0e73c9b880723c6ae1f54311b67b204648b1", "commitAfterChange": "50e0e7da8192eb9b9c5384858d97fb1be7728cb8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r \tprotected void seekQualifiedMemberTypes(String qualifiedName, IType type, boolean partialMatch, IJavaElementRequestor requestor)", "signatureAfterChange": "\r \tprotected void seekQualifiedMemberTypes(String qualifiedName, IType type, boolean partialMatch, IJavaElementRequestor requestor, int acceptFlags)", "diff": ["-\t */\r", "-\tprotected void seekQualifiedMemberTypes(String qualifiedName, IType type, boolean partialMatch, IJavaElementRequestor requestor) {\r", "-\t\tif (type == null)\r", "-\t\t\treturn;\r", "-\t\tIType[] types= null;\r", "-\t\ttry {\r", "-\t\t\ttypes= type.getTypes();\r", "-\t\t} catch (JavaModelException npe) {\r", "-\t\t\treturn; // the enclosing type is not present\r", "-\t\t}\r", "-\t\tString matchName= qualifiedName;\r", "-\t\tint index= qualifiedName.indexOf('$');\r", "-\t\tboolean nested= false;\r", "-\t\tif (index != -1) {\r", "-\t\t\tmatchName= qualifiedName.substring(0, index);\r", "-\t\t\tnested= true;\r", "-\t\t}\r", "-\t\tint length= types.length;\r", "-\t\tfor (int i= 0; i < length; i++) {\r", "-\t\t\tif (requestor.isCanceled())\r", "-\t\t\t\treturn;\r", "-\t\t\tIType memberType= types[i];\r", "-\t\t\tif (nameMatches(matchName, memberType, partialMatch))\r", "-\t\t\t\tif (nested) {\r", "-\t\t\t\t\tseekQualifiedMemberTypes(qualifiedName.substring(index + 1, qualifiedName.length()), memberType, partialMatch, requestor);\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\trequestor.acceptMemberType(memberType);\r", "-\t\t\t\t}\r", "-\t\t}\r", "-\t}\r", "+\t */\r", "+\tprotected void seekQualifiedMemberTypes(String qualifiedName, IType type, boolean partialMatch, IJavaElementRequestor requestor, int acceptFlags) {\r", "+\t\tif (type == null)\r", "+\t\t\treturn;\r", "+\t\tIType[] types= null;\r", "+\t\ttry {\r", "+\t\t\ttypes= type.getTypes();\r", "+\t\t} catch (JavaModelException npe) {\r", "+\t\t\treturn; // the enclosing type is not present\r", "+\t\t}\r", "+\t\tString matchName= qualifiedName;\r", "+\t\tint index= qualifiedName.indexOf('$');\r", "+\t\tboolean nested= false;\r", "+\t\tif (index != -1) {\r", "+\t\t\tmatchName= qualifiedName.substring(0, index);\r", "+\t\t\tnested= true;\r", "+\t\t}\r", "+\t\tint length= types.length;\r", "+\t\tfor (int i= 0; i < length; i++) {\r", "+\t\t\tif (requestor.isCanceled())\r", "+\t\t\t\treturn;\r", "+\t\t\tIType memberType= types[i];\r", "+\t\t\tif (nameMatches(matchName, memberType, partialMatch))\r", "+\t\t\t\tif (nested) {\r", "+\t\t\t\t\tseekQualifiedMemberTypes(qualifiedName.substring(index + 1, qualifiedName.length()), memberType, partialMatch, requestor, acceptFlags);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tif (acceptType(memberType, acceptFlags)) requestor.acceptMemberType(memberType);\r", "+\t\t\t\t}\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a36c0deaa9db3f4d34bf323e9a36353d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "aa717ce56e721f6ed4fc92594ba56da9f08c982e", "commitAfterChange": "5e93996c6b4562ee73fa5730afbd832d1574cd08", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  \tprivate void preserveEmptyLines(int count)", "signatureAfterChange": "  \tprivate void preserveEmptyLines(int count, int insertPosition)", "diff": ["-\tprivate void preserveEmptyLines(int count) {", "+\tprivate void preserveEmptyLines(int count, int insertPosition) {", "-\t\t\t\tthis.printEmptyLines(count);", "+\t\t\t\tthis.printEmptyLines(count, insertPosition);", "-\t\t\t\tthis.printEmptyLines(linesToPreserve);", "+\t\t\t\tthis.printEmptyLines(linesToPreserve, insertPosition);", "+\t\t\t} else {", "+\t\t\t\tprintNewLine(insertPosition);"]}], "num": 4368}
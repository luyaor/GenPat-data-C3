{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9bf619627fb98b436934868bbf6cee4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "943d100ab2299136e7a84ff80ea849ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "fe98ddbed4cd1f8bb449a78291ed05ed04f18196", "commitAfterChange": "afe1aa1e23ce83b573f50388f1a50d564fe4b851", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 113, "signatureBeforeChange": " \tpublic boolean visit( \t\t\tParameterizedSingleTypeReference parameterizedSingleTypeReference, \t\t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\t\tParameterizedSingleTypeReference parameterizedSingleTypeReference, \t\t\tClassScope scope)", "diff": ["+\t\tif (parameterizedSingleTypeReference.annotations != null) formatInlineAnnotations(parameterizedSingleTypeReference.annotations[0], false);", "-\t\tint dimensions = getDimensions();", "-\t\tif (dimensions != 0 && dimensions <= parameterizedSingleTypeReference.dimensions()) {", "-\t\t\tif (this.preferences.insert_space_before_opening_bracket_in_array_type_reference) {", "-\t\t\t\tthis.scribe.space();", "-\t\t\t}", "-\t\t\tfor (int i = 0; i < dimensions; i++) {", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "-\t\t\t\tif (this.preferences.insert_space_between_brackets_in_array_type_reference) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "-\t\t\t}", "-\t\t}", "+\t\tformatLeadingDimensions(parameterizedSingleTypeReference, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc39ff69c27225b2d490924914d3c404", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "fe98ddbed4cd1f8bb449a78291ed05ed04f18196", "commitAfterChange": "afe1aa1e23ce83b573f50388f1a50d564fe4b851", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 112, "signatureBeforeChange": " \tpublic boolean visit( \t\t\tParameterizedSingleTypeReference parameterizedSingleTypeReference, \t\t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\t\tParameterizedSingleTypeReference parameterizedSingleTypeReference, \t\t\tBlockScope scope)", "diff": ["+\t\tif (parameterizedSingleTypeReference.annotations != null) formatInlineAnnotations(parameterizedSingleTypeReference.annotations[0], false);", "-\t\tint dimensions = getDimensions();", "-\t\tif (dimensions != 0 && dimensions <= parameterizedSingleTypeReference.dimensions()) {", "-\t\t\tif (this.preferences.insert_space_before_opening_bracket_in_array_type_reference) {", "-\t\t\t\tthis.scribe.space();", "-\t\t\t}", "-\t\t\tfor (int i = 0; i < dimensions; i++) {", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "-\t\t\t\tif (this.preferences.insert_space_between_brackets_in_array_type_reference) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "-\t\t\t}", "-\t\t}", "+\t\tformatLeadingDimensions(parameterizedSingleTypeReference, false);"]}], "num": 48511}
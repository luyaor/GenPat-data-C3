{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1867be8a763cf3ddc7ea8a333d69bcee", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "862b2c785c8ec5743f939b4942e83f97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "83dc88df7a1508be17b764df4120ac8a34178f58", "commitAfterChange": "f428b70bc80bfdae47260a00a8636113b21b698c", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public boolean hasIncompatibleSuperType(ReferenceBinding otherType)", "signatureAfterChange": " public boolean hasIncompatibleSuperType(ReferenceBinding otherType)", "diff": ["-\t\tmatch = otherType.findSuperTypeWithSameErasure(currentType);", "+\t\tmatch = otherType.findSuperTypeOriginatingFrom(currentType);", "-\t\tmatch = otherType.findSuperTypeWithSameErasure(currentType);", "+\t\tmatch = otherType.findSuperTypeOriginatingFrom(currentType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef99b01572f5a357dd5b1627d89b7ae8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "83dc88df7a1508be17b764df4120ac8a34178f58", "commitAfterChange": "f428b70bc80bfdae47260a00a8636113b21b698c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, InferenceContext inferenceContext, int constraint)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, InferenceContext inferenceContext, int constraint)", "diff": ["-\t\t        actualEquivalent = actualType.findSuperTypeWithSameErasure(this.type);", "+\t\t        actualEquivalent = actualType.findSuperTypeOriginatingFrom(this.type);", "-\t\t        formalEquivalent = this.findSuperTypeWithSameErasure(actualType);", "+\t\t        formalEquivalent = this.findSuperTypeOriginatingFrom(actualType);"]}], "num": 53294}
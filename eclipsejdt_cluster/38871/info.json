{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d29b2fbe3501bef09a831f499ca3aaf", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b5eef01d3033f91ca2db20050c58bca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void testBug73336() throws CoreException", "signatureAfterChange": " \tpublic void testBug73336() throws CoreException", "diff": ["-\t\tICompilationUnit[] workingCopies = new ICompilationUnit[6];", "-\t\ttry {", "-\t\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "-\t\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/A.java\",", "-\t\t\t\t\"package b73336;\\n\" + ", "-\t\t\t\t\"public class A {}\\n\",", "-\t\t\t\towner", "-\t\t\t\t);", "-\t\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/AA.java\",", "-\t\t\t\t\"package b73336;\\n\" + ", "-\t\t\t\t\"public class AA extends A {}\\n\",", "-\t\t\t\towner,", "-\t\t\t\ttrue);", "-\t\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/B.java\",", "-\t\t\t\t\"package b73336;\\n\" + ", "-\t\t\t\t\"public class B extends X<A, A> {\\n\" + ", "-\t\t\t\t\"\t<T> void foo(T t) {}\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\towner,", "-\t\t\t\ttrue);", "-\t\t\tworkingCopies[3] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/C.java\",", "-\t\t\t\t\"package b73336;\\n\" + ", "-\t\t\t\t\"public class C implements I<A> {\\n\" + ", "-\t\t\t\t\"\tpublic void foo() {\\n\" + ", "-\t\t\t\t\"\t\tB b = new B();\\n\" + ", "-\t\t\t\t\"\t\tb.<A>foo(new A());\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\towner,", "-\t\t\t\ttrue\t);", "-\t\t\tworkingCopies[4] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/I.java\",", "-\t\t\t\t\"package b73336;\\n\" + ", "-\t\t\t\t\"public interface I<T>  {\\n\" + ", "-\t\t\t\t\"\tpublic void foo();\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\towner,", "-\t\t\t\ttrue\t);", "-\t\t\tworkingCopies[5] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/X.java\",", "-\t\t\t\t\"package b73336;\\n\" + ", "-\t\t\t\t\"public class X<T, U> {\\n\" + ", "-\t\t\t\t\"\t<V> void foo(V v) {}\\n\" + ", "-\t\t\t\t\"\tclass Member<T> {\\n\" + ", "-\t\t\t\t\"\t\tvoid foo() {}\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\towner,", "-\t\t\t\ttrue\t);", "-\t\t\t// search for first and second method should both return 2 inaccurate matches", "-\t\t\tIType type = workingCopies[0].getType(\"A\");", "-\t\t\tsearch(type,", "-\t\t\t\tREFERENCES,", "-\t\t\t\tgetJavaSearchScopeBugs(\"b73336\", false),", "-\t\t\t\tthis.resultCollector);", "-\t\t\tassertSearchResults(", "-\t\t\t\t\"src/b73336/AA.java b73336.AA [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336/B.java b73336.B [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336/B.java b73336.B [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336/C.java b73336.C [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336/C.java void b73336.C.foo() [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336/C.java void b73336.C.foo() [A] EXACT_MATCH\"", "-\t\t\t);", "-\t\t}", "-\t\tfinally {", "-\t\t\tdiscardWorkingCopies(workingCopies);", "-\t\t}", "+\t\tworkingCopies = new ICompilationUnit[6];", "+\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "+\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/A.java\",", "+\t\t\t\"package b73336;\\n\" + ", "+\t\t\t\"public class A {}\\n\",", "+\t\t\towner,", "+\t\t\ttrue);", "+\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/AA.java\",", "+\t\t\t\"package b73336;\\n\" + ", "+\t\t\t\"public class AA extends A {}\\n\",", "+\t\t\towner,", "+\t\t\ttrue);", "+\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/B.java\",", "+\t\t\t\"package b73336;\\n\" + ", "+\t\t\t\"public class B extends X<A, A> {\\n\" + ", "+\t\t\t\"\t<T> void foo(T t) {}\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\towner,", "+\t\t\ttrue);", "+\t\tworkingCopies[3] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/C.java\",", "+\t\t\t\"package b73336;\\n\" + ", "+\t\t\t\"public class C implements I<A> {\\n\" + ", "+\t\t\t\"\tpublic void foo() {\\n\" + ", "+\t\t\t\"\t\tB b = new B();\\n\" + ", "+\t\t\t\"\t\tb.<A>foo(new A());\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\towner,", "+\t\t\ttrue\t);", "+\t\tworkingCopies[4] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/I.java\",", "+\t\t\t\"package b73336;\\n\" + ", "+\t\t\t\"public interface I<T>  {\\n\" + ", "+\t\t\t\"\tpublic void foo();\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\towner,", "+\t\t\ttrue\t);", "+\t\tworkingCopies[5] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/X.java\",", "+\t\t\t\"package b73336;\\n\" + ", "+\t\t\t\"public class X<T, U> {\\n\" + ", "+\t\t\t\"\t<V> void foo(V v) {}\\n\" + ", "+\t\t\t\"\tclass Member<T> {\\n\" + ", "+\t\t\t\"\t\tvoid foo() {}\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\towner,", "+\t\t\ttrue\t);", "+\t\t// search for first and second method should both return 2 inaccurate matches", "+\t\tIType type = workingCopies[0].getType(\"A\");", "+\t\tsearch(type, REFERENCES); //, getJavaSearchScopeBugs(\"b73336\", false));", "+\t\tassertSearchResults(", "+\t\t\t\"src/b73336/AA.java b73336.AA [A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b73336/B.java b73336.B [A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b73336/B.java b73336.B [A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b73336/C.java b73336.C [A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b73336/C.java void b73336.C.foo() [A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b73336/C.java void b73336.C.foo() [A] EXACT_MATCH\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28277298a721599841bfbc06f9cafae5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void testBug74776() throws CoreException", "signatureAfterChange": " \tpublic void testBug74776() throws CoreException", "diff": ["-\t\tICompilationUnit[] workingCopies = new ICompilationUnit[3];", "-\t\ttry {", "-\t\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "-\t\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b74776/A.java\",", "-\t\t\t\t\"package b74776;\\n\" + ", "-\t\t\t\t\"public class A {\\n\" + ", "-\t\t\t\t\"\t/**\\n\" + ", "-\t\t\t\t\"\t * @deprecated Use {@link #foo(IRegion)} instead\\n\" + ", "-\t\t\t\t\"\t * @param r\\n\" + ", "-\t\t\t\t\"\t */\\n\" + ", "-\t\t\t\t\"\tvoid foo(Region r) {\\n\" + ", "-\t\t\t\t\"\t\tfoo((IRegion)r);\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tvoid foo(IRegion r) {\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\towner", "-\t\t\t\t);", "-\t\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b74776/IRegion.java\",", "-\t\t\t\t\"package b74776;\\n\" + ", "-\t\t\t\t\"public interface IRegion {\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\towner,", "-\t\t\t\ttrue);", "-\t\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b74776/Region.java\",", "-\t\t\t\t\"package b74776;\\n\" + ", "-\t\t\t\t\"public class Region implements IRegion {\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\towner,", "-\t\t\t\ttrue);", "-\t\t\t// search method references", "-\t\t\tIType type = workingCopies[0].getType(\"A\");", "-\t\t\tIMethod method = type.getMethod(\"foo\", new String[] { \"QRegion;\" });", "-\t\t\tsearch(method, REFERENCES);", "-\t\t\tassertSearchResults(\"\");", "-\t\t}", "-\t\tfinally {", "-\t\t\tdiscardWorkingCopies(workingCopies);", "-\t\t}", "+\t\tworkingCopies = new ICompilationUnit[3];", "+\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "+\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b74776/A.java\",", "+\t\t\t\"package b74776;\\n\" + ", "+\t\t\t\"public class A {\\n\" + ", "+\t\t\t\"\t/**\\n\" + ", "+\t\t\t\"\t * @deprecated Use {@link #foo(IRegion)} instead\\n\" + ", "+\t\t\t\"\t * @param r\\n\" + ", "+\t\t\t\"\t */\\n\" + ", "+\t\t\t\"\tvoid foo(Region r) {\\n\" + ", "+\t\t\t\"\t\tfoo((IRegion)r);\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tvoid foo(IRegion r) {\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\towner,", "+\t\t\ttrue);", "+\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b74776/IRegion.java\",", "+\t\t\t\"package b74776;\\n\" + ", "+\t\t\t\"public interface IRegion {\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\towner,", "+\t\t\ttrue);", "+\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b74776/Region.java\",", "+\t\t\t\"package b74776;\\n\" + ", "+\t\t\t\"public class Region implements IRegion {\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\towner,", "+\t\t\ttrue);", "+\t\t// search method references", "+\t\tIType type = workingCopies[0].getType(\"A\");", "+\t\tIMethod method = type.getMethod(\"foo\", new String[] { \"QRegion;\" });", "+\t\tsearch(method, REFERENCES);", "+\t\tassertSearchResults(\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4666d01b2ebd10428891faf9a3831ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void testBug73336c() throws CoreException", "signatureAfterChange": " \tpublic void testBug73336c() throws CoreException", "diff": ["-\t\tICompilationUnit[] workingCopies = new ICompilationUnit[4];", "-\t\ttry {", "-\t\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "-\t\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b73336c/A.java\",", "-\t\t\t\t\"package b73336c;\\n\" + ", "-\t\t\t\t\"public class A {}\\n\",", "-\t\t\t\towner", "-\t\t\t\t);", "-\t\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b73336c/B.java\",", "-\t\t\t\t\"package b73336c;\\n\" + ", "-\t\t\t\t\"public class B extends X<A, A> {\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\towner,", "-\t\t\t\ttrue);", "-\t\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b73336c/C.java\",", "-\t\t\t\t\"package b73336c;\\n\" + ", "-\t\t\t\t\"public class C implements X<A, A>.Interface<A>  {\\n\" + ", "-\t\t\t\t\"\tvoid bar() {}\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\towner,", "-\t\t\t\ttrue);", "-\t\t\tworkingCopies[3] = getWorkingCopy(\"/JavaSearchBugs/src/b73336c/X.java\",", "-\t\t\t\t\"package b73336c;\\n\" + ", "-\t\t\t\t\"public class X<T, U> {\\n\" + ", "-\t\t\t\t\"\tinterface Interface<V> {\\n\" + ", "-\t\t\t\t\"\t\tvoid bar();\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\towner,", "-\t\t\t\ttrue\t);", "-\t\t\t// search for first and second method should both return 2 inaccurate matches", "-\t\t\tIType type = workingCopies[0].getType(\"A\");", "-\t\t\tsearch(type,", "-\t\t\t\tREFERENCES,", "-\t\t\t\tgetJavaSearchScopeBugs(\"b73336c\", false), ", "-\t\t\t\tthis.resultCollector);", "-\t\t\tassertSearchResults(", "-\t\t\t\t\"src/b73336c/B.java b73336c.B [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336c/B.java b73336c.B [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336c/C.java b73336c.C [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336c/C.java b73336c.C [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336c/C.java b73336c.C [A] EXACT_MATCH\"", "-\t\t\t);", "-\t\t}", "-\t\tfinally {", "-\t\t\tdiscardWorkingCopies(workingCopies);", "-\t\t}", "+\t\tworkingCopies = new ICompilationUnit[4];", "+\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "+\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b73336c/A.java\",", "+\t\t\t\"package b73336c;\\n\" + ", "+\t\t\t\"public class A {}\\n\",", "+\t\t\towner,", "+\t\t\ttrue);", "+\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b73336c/B.java\",", "+\t\t\t\"package b73336c;\\n\" + ", "+\t\t\t\"public class B extends X<A, A> {\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\towner,", "+\t\t\ttrue);", "+\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b73336c/C.java\",", "+\t\t\t\"package b73336c;\\n\" + ", "+\t\t\t\"public class C implements X<A, A>.Interface<A>  {\\n\" + ", "+\t\t\t\"\tvoid bar() {}\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\towner,", "+\t\t\ttrue);", "+\t\tworkingCopies[3] = getWorkingCopy(\"/JavaSearchBugs/src/b73336c/X.java\",", "+\t\t\t\"package b73336c;\\n\" + ", "+\t\t\t\"public class X<T, U> {\\n\" + ", "+\t\t\t\"\tinterface Interface<V> {\\n\" + ", "+\t\t\t\"\t\tvoid bar();\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\towner,", "+\t\t\ttrue\t);", "+\t\t// search for first and second method should both return 2 inaccurate matches", "+\t\tIType type = workingCopies[0].getType(\"A\");", "+//\t\tsearch(type, REFERENCES, getJavaSearchScopeBugs(\"b73336c\", false));", "+\t\tsearch(type, REFERENCES); //, getJavaSearchScopeBugs(\"b73336\", false));", "+\t\tassertSearchResults(", "+\t\t\t\"src/b73336c/B.java b73336c.B [A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b73336c/B.java b73336c.B [A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b73336c/C.java b73336c.C [A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b73336c/C.java b73336c.C [A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b73336c/C.java b73336c.C [A] EXACT_MATCH\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d220d41c074c3cdc7a090e12c4b88694", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void testBug72866() throws CoreException", "signatureAfterChange": " \tpublic void testBug72866() throws CoreException", "diff": ["-\t\tICompilationUnit[] workingCopies = new ICompilationUnit[4];", "-\t\ttry {", "-\t\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "-\t\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b72866/A.java\",", "-\t\t\t\t\"package b72866;\\n\" + ", "-\t\t\t\t\"public abstract class A {\\n\" + ", "-\t\t\t\t\"\tpublic abstract void foo(V v);\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\towner", "-\t\t\t\t);", "-\t\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b72866/SX.java\",", "-\t\t\t\t\"package b72866;\\n\" + ", "-\t\t\t\t\"public class SX extends A {\\n\" + ", "-\t\t\t\t\"\tpublic void foo(V v) {\\n\" + ", "-\t\t\t\t\"\t    v.bar(this);\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\"\t,", "-\t\t\t\towner,", "-\t\t\t\ttrue);", "-\t\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b72866/V.java\",", "-\t\t\t\t\"package b72866;\\n\" + ", "-\t\t\t\t\"public class V {\\n\" + ", "-\t\t\t\t\"\tvoid bar(A a) {}\\n\" + ", "-\t\t\t\t\"\tvoid bar(X x) {}\\n\" + ", "-\t\t\t\t\"\tvoid bar(SX s) {}\\n\" + ", "-\t\t\t\t\"}\\n\"\t,", "-\t\t\t\towner,", "-\t\t\t\ttrue);", "-\t\t\tworkingCopies[3] = getWorkingCopy(\"/JavaSearchBugs/src/b72866/X.java\",", "-\t\t\t\t\"package b72866;\\n\" + ", "-\t\t\t\t\"public class X extends A {\\n\" + ", "-\t\t\t\t\"\tpublic void foo(V v) {\\n\" + ", "-\t\t\t\t\"\t    v.bar(this);\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\"\t,", "-\t\t\t\towner,", "-\t\t\t\ttrue\t);", "-\t\t\t// search for first and second method should both return 2 inaccurate matches", "-\t\t\tIType type = workingCopies[2].getType(\"V\");", "-\t\t\tIMethod method = type.getMethod(\"bar\", new String[] {\"QX;\"});", "-\t\t\tsearch(method, REFERENCES);", "-\t\t\tassertSearchResults(", "-\t\t\t\t\"src/b72866/X.java void b72866.X.foo(V) [bar(this)] EXACT_MATCH\"", "+\t\tworkingCopies = new ICompilationUnit[4];", "+\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "+\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b72866/A.java\",", "+\t\t\t\"package b72866;\\n\" + ", "+\t\t\t\"public abstract class A {\\n\" + ", "+\t\t\t\"\tpublic abstract void foo(V v);\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\towner,", "+\t\t\ttrue", "-\t\t}", "-\t\tfinally {", "-\t\t\tdiscardWorkingCopies(workingCopies);", "-\t\t}", "+\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b72866/SX.java\",", "+\t\t\t\"package b72866;\\n\" + ", "+\t\t\t\"public class SX extends A {\\n\" + ", "+\t\t\t\"\tpublic void foo(V v) {\\n\" + ", "+\t\t\t\"\t    v.bar(this);\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\"\t,", "+\t\t\towner,", "+\t\t\ttrue);", "+\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b72866/V.java\",", "+\t\t\t\"package b72866;\\n\" + ", "+\t\t\t\"public class V {\\n\" + ", "+\t\t\t\"\tvoid bar(A a) {}\\n\" + ", "+\t\t\t\"\tvoid bar(X x) {}\\n\" + ", "+\t\t\t\"\tvoid bar(SX s) {}\\n\" + ", "+\t\t\t\"}\\n\"\t,", "+\t\t\towner,", "+\t\t\ttrue);", "+\t\tworkingCopies[3] = getWorkingCopy(\"/JavaSearchBugs/src/b72866/X.java\",", "+\t\t\t\"package b72866;\\n\" + ", "+\t\t\t\"public class X extends A {\\n\" + ", "+\t\t\t\"\tpublic void foo(V v) {\\n\" + ", "+\t\t\t\"\t    v.bar(this);\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\"\t,", "+\t\t\towner,", "+\t\t\ttrue\t);", "+\t\tIType type = workingCopies[2].getType(\"V\");", "+\t\tIMethod method = type.getMethod(\"bar\", new String[] {\"QX;\"});", "+\t\tsearch(method, REFERENCES);", "+\t\tassertSearchResults(", "+\t\t\t\"src/b72866/X.java void b72866.X.foo(V) [bar(this)] EXACT_MATCH\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e05c4d20f00c4b94fedca4245b64b709", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void testBug73336b() throws CoreException", "signatureAfterChange": " \tpublic void testBug73336b() throws CoreException", "diff": ["-\t\tICompilationUnit[] workingCopies = new ICompilationUnit[4];", "-\t\ttry {", "-\t\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "-\t\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b73336b/A.java\",", "-\t\t\t\t\"package b73336b;\\n\" + ", "-\t\t\t\t\"public class A {}\\n\",", "-\t\t\t\towner", "-\t\t\t\t);", "-\t\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b73336b/B.java\",", "-\t\t\t\t\"package b73336b;\\n\" + ", "-\t\t\t\t\"public class B extends X<A, A> {\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\towner,", "-\t\t\t\ttrue);", "-\t\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b73336b/C.java\",", "-\t\t\t\t\"package b73336b;\\n\" + ", "-\t\t\t\t\"public class C extends X<A, A>.Member<A> {\\n\" + ", "-\t\t\t\t\"\tpublic C() {\\n\" + ", "-\t\t\t\t\"\t\tnew X<A, A>().super();\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\towner,", "-\t\t\t\ttrue);", "-\t\t\tworkingCopies[3] = getWorkingCopy(\"/JavaSearchBugs/src/b73336b/X.java\",", "-\t\t\t\t\"package b73336b;\\n\" + ", "-\t\t\t\t\"public class X<T, U> {\\n\" + ", "-\t\t\t\t\"\t<V> void foo(V v) {}\\n\" + ", "-\t\t\t\t\"\tclass Member<T> {\\n\" + ", "-\t\t\t\t\"\t\tvoid foo() {}\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\towner,", "-\t\t\t\ttrue\t);", "-\t\t\t// search for first and second method should both return 2 inaccurate matches", "-\t\t\tIType type = workingCopies[0].getType(\"A\");", "-\t\t\tsearch(type,", "-\t\t\t\tREFERENCES,", "-\t\t\t\tgetJavaSearchScopeBugs(\"b73336b\", false), ", "-\t\t\t\tthis.resultCollector);", "-\t\t\tassertSearchResults(", "-\t\t\t\t\"src/b73336b/B.java b73336b.B [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336b/B.java b73336b.B [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336b/C.java b73336b.C() [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336b/C.java b73336b.C() [A] EXACT_MATCH\"", "-\t\t\t);", "-\t\t}", "-\t\tfinally {", "-\t\t\tdiscardWorkingCopies(workingCopies);", "-\t\t}", "+\t\tworkingCopies = new ICompilationUnit[4];", "+\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "+\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b73336b/A.java\",", "+\t\t\t\"package b73336b;\\n\" + ", "+\t\t\t\"public class A {}\\n\",", "+\t\t\towner,", "+\t\t\ttrue);", "+\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b73336b/B.java\",", "+\t\t\t\"package b73336b;\\n\" + ", "+\t\t\t\"public class B extends X<A, A> {\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\towner,", "+\t\t\ttrue);", "+\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b73336b/C.java\",", "+\t\t\t\"package b73336b;\\n\" + ", "+\t\t\t\"public class C extends X<A, A>.Member<A> {\\n\" + ", "+\t\t\t\"\tpublic C() {\\n\" + ", "+\t\t\t\"\t\tnew X<A, A>().super();\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\towner,", "+\t\t\ttrue);", "+\t\tworkingCopies[3] = getWorkingCopy(\"/JavaSearchBugs/src/b73336b/X.java\",", "+\t\t\t\"package b73336b;\\n\" + ", "+\t\t\t\"public class X<T, U> {\\n\" + ", "+\t\t\t\"\t<V> void foo(V v) {}\\n\" + ", "+\t\t\t\"\tclass Member<T> {\\n\" + ", "+\t\t\t\"\t\tvoid foo() {}\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\towner,", "+\t\t\ttrue\t);", "+\t\t// search for first and second method should both return 2 inaccurate matches", "+\t\tIType type = workingCopies[0].getType(\"A\");", "+//\t\tsearch(type, REFERENCES, getJavaSearchScopeBugs(\"b73336b\", false));", "+\t\tsearch(type, REFERENCES); //, getJavaSearchScopeBugs(\"b73336\", false));", "+\t\tassertSearchResults(", "+\t\t\t\"src/b73336b/B.java b73336b.B [A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b73336b/B.java b73336b.B [A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b73336b/C.java b73336b.C() [A] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b73336b/C.java b73336b.C() [A] EXACT_MATCH\"", "+\t\t);"]}], "num": 38871}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f68dae5580e7589eb12dcc5a1a4cc588", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "010f157553d84c96a14be325bd6c52f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "562bd70d52b78a80d9ea0f036f9a91cfb91468db", "commitAfterChange": "e77c75055c6e55ba37ac2535228b20280659d48b", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " void scanTypeForNullDefaultAnnotation(IBinaryType binaryType)", "signatureAfterChange": " void scanTypeForNullDefaultAnnotation(IBinaryType binaryType, PackageBinding packageBinding, BinaryTypeBinding binaryBinding)", "diff": ["-void scanTypeForNullDefaultAnnotation(IBinaryType binaryType) {", "+void scanTypeForNullDefaultAnnotation(IBinaryType binaryType, PackageBinding packageBinding, BinaryTypeBinding binaryBinding) {", "+\tboolean isPackageInfo = CharOperation.equals(binaryBinding.sourceName(), TypeConstants.PACKAGE_INFO_NAME);", "-\t\t\tthis.tagBits |= annotationBit;", "-\t\t\tif (CharOperation.equals(this.sourceName(), TypeConstants.PACKAGE_INFO_NAME))", "-\t\t\t\tthis.getPackage().defaultNullness = nullness;", "-\t\t} else {", "-\t\t\tswitch (this.getPackage().defaultNullness) {", "-\t\t\t\tcase NONNULL_BY_DEFAULT : ", "-\t\t\t\t\tthis.tagBits |= TagBits.AnnotationNonNullByDefault;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase NULL_UNSPECIFIED_BY_DEFAULT :", "-\t\t\t\t\tthis.tagBits |= TagBits.AnnotationNullUnspecifiedByDefault;", "-\t\t\t\t\tbreak;", "-\t\t\t}", "+\t\t\tbinaryBinding.tagBits |= annotationBit;", "+\t\t\tif (isPackageInfo)", "+\t\t\t\tpackageBinding.defaultNullness = nullness;", "+\t\t\treturn;", "+\tif (isPackageInfo) {", "+\t\t// no default annotations found in package-info", "+\t\tpackageBinding.defaultNullness = Binding.NULL_UNSPECIFIED_BY_DEFAULT;", "+\t\treturn;", "+\t}", "+\tReferenceBinding enclosingTypeBinding = binaryBinding.enclosingType;", "+\tif (enclosingTypeBinding != null) {", "+\t\tif ((enclosingTypeBinding.tagBits & TagBits.AnnotationNonNullByDefault) != 0) {", "+\t\t\tbinaryBinding.tagBits |= TagBits.AnnotationNonNullByDefault;", "+\t\t\treturn;", "+\t\t} else if ((enclosingTypeBinding.tagBits & TagBits.AnnotationNullUnspecifiedByDefault) != 0) {", "+\t\t\tbinaryBinding.tagBits |= TagBits.AnnotationNullUnspecifiedByDefault;", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t// no annotation found on the type or its enclosing types", "+\t// check the package-info for default annotation if not already done before", "+\tif (packageBinding.defaultNullness == Binding.NO_NULL_DEFAULT && !isPackageInfo) {", "+\t\t// this will scan the annotations in package-info", "+\t\tReferenceBinding packageInfo = packageBinding.getType(TypeConstants.PACKAGE_INFO_NAME);", "+\t\tif (packageInfo == null) {", "+\t\t\tpackageBinding.defaultNullness = Binding.NULL_UNSPECIFIED_BY_DEFAULT;", "+\t\t}", "+\t}", "+\t// no @NonNullByDefault at type level, check containing package:", "+\tswitch (packageBinding.defaultNullness) {", "+\t\tcase Binding.NONNULL_BY_DEFAULT : ", "+\t\t\tbinaryBinding.tagBits |= TagBits.AnnotationNonNullByDefault;", "+\t\t\tbreak;", "+\t\tcase Binding.NULL_UNSPECIFIED_BY_DEFAULT :", "+\t\t\tbinaryBinding.tagBits |= TagBits.AnnotationNullUnspecifiedByDefault;", "+\t\t\tbreak;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "034ee87de836b2a8f04b7abe57ff56f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic ParameterizedGenericMethodBinding(MethodBinding originalMethod, TypeBinding[] typeArguments, LookupEnvironment environment)", "signatureAfterChange": " \tpublic ParameterizedGenericMethodBinding(MethodBinding originalMethod, TypeBinding[] typeArguments, LookupEnvironment environment)", "diff": ["+\t\tcheckMissingType: {", "+\t\t\tif ((this.tagBits & TagBits.HasMissingType) != 0) ", "+\t\t\t\tbreak checkMissingType;", "+\t\t\tif ((this.returnType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\tbreak checkMissingType;", "+\t\t\t}", "+\t\t\tfor (int i = 0, max = this.parameters.length; i < max; i++) {", "+\t\t\t\tif ((this.parameters[i].tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\t\tbreak checkMissingType;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tfor (int i = 0, max = this.thrownExceptions.length; i < max; i++) {", "+\t\t\t\tif ((this.thrownExceptions[i].tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\t\tbreak checkMissingType;", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "+\t\t}\t\t\t    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e2d4a3951f8c1215c76b4e13fc74d2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic ParameterizedMethodBinding(final ReferenceBinding declaringClass, MethodBinding originalMethod, char[][] alternateParamaterNames, final LookupEnvironment environment)", "signatureAfterChange": " \tpublic ParameterizedMethodBinding(final ReferenceBinding declaringClass, MethodBinding originalMethod, char[][] alternateParamaterNames, final LookupEnvironment environment)", "diff": ["+\t\tcheckMissingType: {", "+\t\t\tif ((this.tagBits & TagBits.HasMissingType) != 0) ", "+\t\t\t\tbreak checkMissingType;", "+\t\t\tif ((this.returnType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\tbreak checkMissingType;", "+\t\t\t}", "+\t\t\tfor (int i = 0, max = this.parameters.length; i < max; i++) {", "+\t\t\t\tif ((this.parameters[i].tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\t\tbreak checkMissingType;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tfor (int i = 0, max = this.thrownExceptions.length; i < max; i++) {", "+\t\t\t\tif ((this.thrownExceptions[i].tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\t\tbreak checkMissingType;", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "+\t\t}\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "562fb86aa6010cfb91bc909641ad6332", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/RawTypeBinding.java", "commitBeforeChange": "211eb968a7e76304f435bc3a2df40421403cc67d", "commitAfterChange": "1604cfae28d7a5fbf135c974f0085e046db607c7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic RawTypeBinding(ReferenceBinding type, ReferenceBinding enclosingType, LookupEnvironment environment)", "signatureAfterChange": " \tpublic RawTypeBinding(ReferenceBinding type, ReferenceBinding enclosingType, LookupEnvironment environment)", "diff": ["-\t\tif (enclosingType == null || (enclosingType.modifiers & ExtraCompilerModifiers.AccGenericSignature) == 0)", "+\t\tthis.tagBits &= ~TagBits.HasMissingType;", "+\t\tif ((type.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\tif (type instanceof MissingTypeBinding) {", "+\t\t\t\tthis.tagBits |= TagBits.HasMissingType;", "+\t\t\t} else if (type instanceof ParameterizedTypeBinding) {", "+\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) type;", "+\t\t\t\tif (parameterizedTypeBinding.genericType() instanceof MissingTypeBinding) {", "+\t\t\t\t\tthis.tagBits |= TagBits.HasMissingType;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (enclosingType != null && (enclosingType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\tif (enclosingType instanceof MissingTypeBinding) {", "+\t\t\t\tthis.tagBits |= TagBits.HasMissingType;", "+\t\t\t} else if (enclosingType instanceof ParameterizedTypeBinding) {", "+\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) enclosingType;", "+\t\t\t\tif (parameterizedTypeBinding.genericType() instanceof MissingTypeBinding) {", "+\t\t\t\t\tthis.tagBits |= TagBits.HasMissingType;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (enclosingType == null || (enclosingType.modifiers & ExtraCompilerModifiers.AccGenericSignature) == 0) {", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a2c64418caa01bf0b53ab32e9b456ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope, InferenceContext inferenceContext)", "signatureAfterChange": " \tprivate ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope, InferenceContext inferenceContext)", "diff": ["+\t\tcheckMissingType: {", "+\t\t\tif ((this.tagBits & TagBits.HasMissingType) != 0) ", "+\t\t\t\tbreak checkMissingType;", "+\t\t\tif ((this.returnType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\tbreak checkMissingType;", "+\t\t\t}", "+\t\t\tfor (int i = 0, max = this.parameters.length; i < max; i++) {", "+\t\t\t\tif ((this.parameters[i].tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\t\tbreak checkMissingType;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tfor (int i = 0, max = this.thrownExceptions.length; i < max; i++) {", "+\t\t\t\tif ((this.thrownExceptions[i].tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\t\tbreak checkMissingType;", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "+\t\t}\t\t\t    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a19a8dd4f3c53b5782d4487a4f5b47ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "a00b91e363390d5872f24709421a2a2b1249ea30", "commitAfterChange": "61bf91bb0112a7323235a8711e82564a6109221c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public boolean doesMethodOverride(MethodBinding one, MethodBinding two)", "signatureAfterChange": " public boolean doesMethodOverride(MethodBinding method, MethodBinding inheritedMethod)", "diff": ["-public boolean doesMethodOverride(MethodBinding one, MethodBinding two) {", "-\tMethodBinding sub = computeSubstituteMethod(two, one);", "-\treturn sub != null && super.doesMethodOverride(one, sub);", "+public boolean doesMethodOverride(MethodBinding method, MethodBinding inheritedMethod) {", "+\tif (doTypeVariablesClash(method, inheritedMethod)) return false;", "+\tif (areParametersEqual(method, inheritedMethod)) return true;", "+\tif (method.declaringClass == inheritedMethod.declaringClass) return false;", "+", "+\tTypeBinding[] params = method.parameters;", "+\tTypeBinding[] inheritedParams = inheritedMethod.parameters;", "+\tint length = params.length;", "+\tif (length != inheritedParams.length)", "+\t\treturn false;", "+", "+\t// also allow a method such as Number foo(Number) to override <U> T foo(T) where T extends Number", "+\tif (method.typeVariables != NoTypeVariables || !inheritedMethod.hasSubstitutedParameters())", "+\t\treturn false;", "+\tif (method.declaringClass.findSuperTypeWithSameErasure(inheritedMethod.declaringClass) == null)", "+\t\treturn false;", "+", "+\tfor (int i = 0; i < length; i++)", "+\t\tif (params[i] != inheritedParams[i].erasure())", "+\t\t\treturn false;", "+\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df27214153f24a5116e4d461922447b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "bacbe6f6e994ffc49a94960691c76bff97cb04d5", "commitAfterChange": "719705b20dc5e72fab3b2b50b669f9dfc58049aa", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t\t \tpublic boolean isCompatibleWith(final TypeBinding left, final Scope someScope)", "signatureAfterChange": " \t\t \tpublic boolean isCompatibleWith(final TypeBinding left, final Scope someScope)", "diff": ["-\t\treturn !squarePegInRoundHole(sam);", "+\t\tif (sam.returnType.id == TypeIds.T_void) {", "+\t\t\tif (!this.voidCompatible)", "+\t\t\t\treturn false;", "+\t\t} else {", "+\t\t\tif (!this.valueCompatible)", "+\t\t\t\treturn false;", "+\t\t}", "+\t\t", "+\t\tif (!isPertinentToApplicability())", "+\t\t\treturn true;", "+\t", "+\t\tExpression [] returnExpressions = this.resultExpressions;", "+\t\tfor (int i = 0, length = returnExpressions.length; i < length; i++) {", "+\t\t\tif (!returnExpressions[i].resolvedType.isCompatibleWith(sam.returnType))", "+\t\t\t\tif (sam.returnType.id != TypeIds.T_void || this.body instanceof Block)", "+\t\t\t\t\treturn false;", "+\t\t}", "+\t", "+\t\tTypeBinding [] samPararameterTypes = sam.parameters;", "+\t\tfor (int i = 0, length = samPararameterTypes.length; i < length; i++) { // lengths known to be equal.", "+\t\t\tif (TypeBinding.notEquals(samPararameterTypes[i], this.argumentTypes[i]))", "+\t\t\t\treturn false;", "+\t\t}", "+", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfc4bed6513250abea52043f0a5e76a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "42a1621789d59f5727f1b8d1d95ca930314df17c", "commitAfterChange": "9cca91c0d0e7e32a793396ca268d390a14ac4f6a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["+\t\t\tboolean isEnumSwitch = false;", "+\t\t\t\t\tisEnumSwitch = true;", "+\t\t\t// for enum switch, check if all constants are accounted for (if no default) ", "+\t\t\tif (isEnumSwitch && defaultCase == null ", "+\t\t\t\t\t&& scope.environment().options.getSeverity(CompilerOptions.IncompleteEnumSwitch) != ProblemSeverities.Ignore", "+\t\t\t\t\t&& caseCount != ((ReferenceBinding)expressionType).enumConstantCount()) {", "+\t\t\t\tFieldBinding[] enumFields = ((ReferenceBinding)expressionType.erasure()).fields();", "+\t\t\t\tfor (int i = 0, max = enumFields.length; i <max; i++) {", "+\t\t\t\t\tFieldBinding enumConstant = enumFields[i];", "+\t\t\t\t\tif ((enumConstant.modifiers & AccEnum) == 0) continue;", "+\t\t\t\t\tfindConstant : {", "+\t\t\t\t\t\tfor (int j = 0; j < caseCount; j++) {", "+\t\t\t\t\t\t\tif (enumConstant.id == this.constants[j]) break findConstant;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// enum constant did not get referenced from switch", "+\t\t\t\t\t\tscope.problemReporter().missingEnumConstantCase(this, enumConstant);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebe0317a34f506fc671ffee50c86bcdc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic ParameterizedMethodBinding(final ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod)", "signatureAfterChange": " \tpublic ParameterizedMethodBinding(final ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod)", "diff": ["+\t\tcheckMissingType: {", "+\t\t\tif ((this.tagBits & TagBits.HasMissingType) != 0) ", "+\t\t\t\tbreak checkMissingType;", "+\t\t\tif ((this.returnType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\tbreak checkMissingType;", "+\t\t\t}", "+\t\t\tfor (int i = 0, max = this.parameters.length; i < max; i++) {", "+\t\t\t\tif ((this.parameters[i].tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\t\tbreak checkMissingType;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tfor (int i = 0, max = this.thrownExceptions.length; i < max; i++) {", "+\t\t\t\tif ((this.thrownExceptions[i].tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\t\tbreak checkMissingType;", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "+\t\t}"]}], "num": 58389}
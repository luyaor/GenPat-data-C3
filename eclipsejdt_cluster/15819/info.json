{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e8f8a80b81b58d0f2a3ddde24e249d8c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a0539def1524d645429fd877f4d3c24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "7ba9ff29fe6b05ec0a2f58eaa1f5d3e68bb11101", "commitAfterChange": "427a01e331e57852efc472cca3a8360bd121fda9", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "  protected void resolveAnnotations(Scope scope)", "signatureAfterChange": "  protected void resolveAnnotations(Scope scope)", "diff": ["+\t\t\tlong tagBits = 0;", "-\t\t\tboolean shouldAnalyzeArrayNullAnnotations = scope.compilerOptions().isAnnotationBasedNullAnalysisEnabled && this instanceof ArrayTypeReference;", "+\t\t\tboolean evalNullAnnotations = scope.compilerOptions().isAnnotationBasedNullAnalysisEnabled;", "+\t\t\tboolean isArrayReference = this instanceof ArrayTypeReference && dimensions > 0;", "-\t\t\t\t\t\tif (shouldAnalyzeArrayNullAnnotations) {", "+\t\t\t\t\t\tif (evalNullAnnotations) {", "-\t\t\t\t\t\t\t\t\tif (tagBitsPerDimension == null)", "-\t\t\t\t\t\t\t\t\t\ttagBitsPerDimension = new long[dimensions+1]; // each dimension plus leaf component type at last position", "-\t\t\t\t\t\t\t\t\t// @NonNull Foo [][][] means the leaf component type is @NonNull:", "-\t\t\t\t\t\t\t\t\ttagBitsPerDimension[dimensions] = ((Annotation.TypeUseBinding)recipient).tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\t\t\t\tif (isArrayReference) {", "+\t\t\t\t\t\t\t\t\t\tif (tagBitsPerDimension == null)", "+\t\t\t\t\t\t\t\t\t\t\ttagBitsPerDimension = new long[dimensions+1]; // each dimension plus leaf component type at last position", "+\t\t\t\t\t\t\t\t\t\t// @NonNull Foo [][][] means the leaf component type is @NonNull:", "+\t\t\t\t\t\t\t\t\t\ttagBitsPerDimension[dimensions] = ((Annotation.TypeUseBinding)recipient).tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\ttagBits |= ((Annotation.TypeUseBinding)recipient).tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (shouldAnalyzeArrayNullAnnotations) {", "+\t\t\t\t\t\tif (evalNullAnnotations && isArrayReference) {", "-\t\t\tif (tagBitsPerDimension != null && this.resolvedType.isValidBinding()) {", "-\t\t\t\t// TODO(stephan): wouldn't it be more efficient to store the array bindings inside the type binding rather than the environment?", "-\t\t\t\t// cf. LocalTypeBinding.createArrayType()", "-\t\t\t\tthis.resolvedType = scope.environment().createArrayType(this.resolvedType.leafComponentType(), dimensions, tagBitsPerDimension);", "+\t\t\tif (this.resolvedType != null && this.resolvedType.isValidBinding()) {", "+\t\t\t\tif (isArrayReference) {", "+\t\t\t\t\tif (tagBitsPerDimension != null) {", "+\t\t\t\t\t\t// TODO(stephan): wouldn't it be more efficient to store the array bindings inside the type binding rather than the environment?", "+\t\t\t\t\t\t// cf. LocalTypeBinding.createArrayType()", "+\t\t\t\t\t\tthis.resolvedType = scope.environment().createArrayType(this.resolvedType.leafComponentType(), dimensions, tagBitsPerDimension);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (tagBits != 0) {", "+\t\t\t\t\t\tif (this.resolvedType instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\tthis.resolvedType = scope.environment().createAnnotatedType((ReferenceBinding) this.resolvedType, tagBits);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// TODO(stephan) report null annotation on non-reference type", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd58d5cd4fbb2be42dddc30953ea4727", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected int checkAssignmentAgainstNullAnnotation(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t\t\t\t   VariableBinding var, int nullStatus, Expression expression, TypeBinding providedType)", "signatureAfterChange": " protected int checkAssignmentAgainstNullAnnotation(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t\t\t\t   VariableBinding var, int nullStatus, Expression expression, TypeBinding providedType)", "diff": ["-\tint severity = 0;", "-\tif ((var.tagBits & TagBits.AnnotationNonNull) != 0", "-\t\t\t&& nullStatus != FlowInfo.NON_NULL) {", "-\t\tflowContext.recordNullityMismatch(currentScope, expression, providedType, var.type, nullStatus);", "+\tlong lhsTagBits = 0L;", "+\tboolean hasReported = false;", "+\tif (currentScope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8) {", "+\t\tlhsTagBits = var.tagBits & TagBits.AnnotationNullMASK;", "+\t} else {", "+\t\tlhsTagBits = var.type.tagBits & TagBits.AnnotationNullMASK;", "+\t\tint severity = findNullTypeAnnotationMismatch(var.type, providedType, nullStatus);", "+\t\tif (severity == 3) {", "+\t\t\tcurrentScope.problemReporter().nullityMismatchingTypeAnnotation(expression, providedType, var.type, severity);", "+\t\t\thasReported = true;", "+\t\t} else if (severity == 2) {", "+\t\t\tflowContext.recordNullityMismatch(currentScope, expression, providedType, var.type, nullStatus);", "+\t\t\thasReported = true;", "+\t\t}", "+\t}", "+\tif (lhsTagBits == TagBits.AnnotationNonNull && nullStatus != FlowInfo.NON_NULL) {", "+\t\tif (!hasReported)", "+\t\t\tflowContext.recordNullityMismatch(currentScope, expression, providedType, var.type, nullStatus);", "-\t} else if ((severity = findNullTypeAnnotationMismatch(var.type, providedType)) > 0) {", "-\t\tcurrentScope.problemReporter().nullityMismatchingTypeAnnotation(expression, providedType, var.type, severity==1, currentScope.environment());", "-\t} else if ((var.tagBits & TagBits.AnnotationNullable) != 0", "-\t\t\t&& nullStatus == FlowInfo.UNKNOWN) {\t// provided a legacy type?", "+\t} else if (lhsTagBits == TagBits.AnnotationNullable && nullStatus == FlowInfo.UNKNOWN) {\t// provided a legacy type?"]}], "num": 15819}
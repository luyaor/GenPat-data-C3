{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b56d5fdb1b5a4e304e80eeaf0a3e71d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cd9d5e52da104524d5c5b1874360144", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "9fb0bbe2a3801102d42dc2cab72c635ae1849ea0", "commitAfterChange": "906658ef6f48da220e1774c79e394ded35878c9f", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " protected void consumeBinaryExpression(int op)", "signatureAfterChange": " protected void consumeBinaryExpression(int op)", "diff": ["+\t\t\t\t\tint numberOfParens = (expr1.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\t\t\t\t\tif (numberOfParens != 0) {", "+\t\t\t\t\t\t\t// clear the bits on cursor and put them back on cursor.left", "+\t\t\t\t\t\t\tcursor.bits &= ~ASTNode.ParenthesizedMASK;", "+\t\t\t\t\t\t\tcursor.left.bits &= ~ASTNode.ParenthesizedMASK;", "+\t\t\t\t\t\t\tcursor.left.bits |= numberOfParens << ASTNode.ParenthesizedSHIFT;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (numberOfParens != 0) {", "+\t\t\t\t\t\t\t// clear the bits on cursor and put them back on cursor.left", "+\t\t\t\t\t\t\tcursor.bits &= ~ASTNode.ParenthesizedMASK;", "+\t\t\t\t\t\t\tcursor.left.bits &= ~ASTNode.ParenthesizedMASK;", "+\t\t\t\t\t\t\tcursor.left.bits |= numberOfParens << ASTNode.ParenthesizedSHIFT;", "+\t\t\t\t\t\t}", "-\t\t\t} else if (expr1 instanceof BinaryExpression && ", "-\t\t\t\t\t\t\t// single out the a + b case", "-\t\t\t\t\t\t((expr1.bits & ASTNode.OperatorMASK) >> ", "+\t\t\t} else if (expr1 instanceof BinaryExpression", "+\t\t\t\t\t&& ((expr1.bits & ASTNode.OperatorMASK) >> ", "+\t\t\t\t// single out the a + b case", "-\t\t\t\t\top);\t\t", "+\t\t\t\t\top);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "797cd4e573f206f45c7748b92aa57383", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "c539ab4170e4fe0d8578cc8fb0121c9a797f5894", "commitAfterChange": "44363e0012bf09a8a44565479ae5740426ed378a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+        this.depth = 0;", "-        ", "-        if (someMethod != null && someMethod.isValidBinding()) {", "+        int someMethodDepth = this.depth, anotherMethodDepth = 0;", "+    \tif (someMethod != null && someMethod.isValidBinding()) {", "+        \t\tthis.depth = 0;", "+        \t\tanotherMethodDepth = this.depth;", "+        \t\tthis.depth = 0;", "-", "-        this.binding = someMethod != null && someMethod.isValidBinding() ? someMethod : ", "-        \t\t\t\t\t\t\t\t\t\t\tanotherMethod != null && anotherMethod.isValidBinding() ? anotherMethod : null;", "+        ", "+        if (someMethod != null && someMethod.isValidBinding()) {", "+        \tthis.binding = someMethod;", "+        \tthis.bits &= ~ASTNode.DepthMASK;", "+        \tif (someMethodDepth > 0) {", "+        \t\tthis.bits |= (someMethodDepth & 0xFF) << ASTNode.DepthSHIFT;", "+        \t}", "+        } else if (anotherMethod != null && anotherMethod.isValidBinding()) {", "+        \tthis.binding = anotherMethod;", "+        \tthis.bits &= ~ASTNode.DepthMASK;", "+        \tif (anotherMethodDepth > 0) {", "+        \t\tthis.bits |= (anotherMethodDepth & 0xFF) << ASTNode.DepthSHIFT;", "+        \t}", "+        } else {", "+        \tthis.binding = null;", "+        \tthis.bits &= ~ASTNode.DepthMASK;", "+        }"]}], "num": 57319}
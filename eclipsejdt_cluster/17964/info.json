{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7faab2766551de6aab51a9a576504af3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e774da92e9c19daf30855e5c0662a08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "67da1da15e9afbcd33679f07597c706e7915cf4a", "commitAfterChange": "027fccb2c17e0f0d2b28705c6704af10fc8ce0aa", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\treturn vb.type;", "+\t\t\t\t\t\treturn this.expressionType = vb.type;", "-\t\t\t\t\treturn checkFieldAccess(scope);", "+\t\t\t\t\treturn this.expressionType = checkFieldAccess(scope);", "-\t\t\t\treturn (TypeBinding) binding;", "+\t\t\t\treturn this.expressionType = (TypeBinding) binding;", "-\treturn this.reportError(scope);", "+\treturn this.expressionType = this.reportError(scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67c58db80d388a2f1a5057375d25a1e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/Factory.java", "commitBeforeChange": "635d51c73a886e470d16e7ebb8d1b4a9177433d4", "commitAfterChange": "cf0af9789637850aa518ab1064a8b714c5c05a24", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic static TypeMirror newTypeMirror(Binding binding)", "signatureAfterChange": "  \tpublic static TypeMirror newTypeMirror(Binding binding)", "diff": ["-\t\t// TODO: fill in the rest of these", "+\t\t\t// For variables, return the type of the variable", "+\t\t\treturn newTypeMirror(((VariableBinding)binding).type);", "+\t\t\t", "+\t\t\t", "+\t\t\t", "+\t\t\treturn new ArrayTypeImpl((ArrayBinding)binding);", "+\t\t\t", "+\t\t\t// PrimitiveTypeImpl implements both PrimitiveType and NoType", "+\t\t\treturn new PrimitiveTypeImpl((BaseTypeBinding)binding);", "+\t\t\t", "+\t\t\t// TODO: fill in the rest of these"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c2bf9d3f23d76ffc259a4c0a78453a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKey.java", "commitBeforeChange": "09b2a60a289857be8b68f0bdade8ca62b9081359", "commitAfterChange": "159e8ad6d8421b49efbcfb424fe9327481d95b23", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t ParameterizedTypeBinding getParameterizedTypeBinding(ReferenceBinding genericType, ReferenceBinding enclosingType)", "signatureAfterChange": " \t ParameterizedTypeBinding getParameterizedTypeBinding(ReferenceBinding genericType, ReferenceBinding enclosingType)", "diff": ["-\t\t\treset();", "-\t\t\tBinding argument = getCompilerBinding();", "+\t \t\tTypeBinding argument;", "+\t \t\tif (this.scanner.isAtWildCardStart()) {", "+\t \t\t\targument = getWildCardBinding(genericType, i);", "+\t \t\t} else {", "+\t\t\t\treset();", "+\t\t\t\targument = (TypeBinding) getCompilerBinding();", "+\t \t\t}", "-\t\t\targuments[i] = (TypeBinding) argument;", "+\t\t\targuments[i] =argument;", "+\t \t\t", "-\t \tthis.scanner.index += 2;", "+\t \tthis.scanner.skipParametersEnd();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "951a31001034c2afaf2b5f6a7b62f6fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "67da1da15e9afbcd33679f07597c706e7915cf4a", "commitAfterChange": "027fccb2c17e0f0d2b28705c6704af10fc8ce0aa", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\treturn getOtherFieldBindings(scope);", "+\t\t\t\t\t\treturn this.expressionType = getOtherFieldBindings(scope);", "-\t\t\t\t\t\treturn getOtherFieldBindings(scope);", "+\t\t\t\t\t\treturn this.expressionType = getOtherFieldBindings(scope);", "-\t\t\t\t\treturn (TypeBinding) binding;", "+\t\t\t\t\treturn this.expressionType = (TypeBinding) binding;", "-\t\treturn this.reportError(scope);", "+\t\treturn this.expressionType = this.reportError(scope);"]}], "num": 17964}
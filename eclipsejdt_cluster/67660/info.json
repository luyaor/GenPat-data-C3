{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9af35dd76c75f7c1d488c1646397d9d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b187fe2cf1f05eb7e5a2cc848b804770", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "signatureAfterChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "diff": ["-\t\tif (originalType == null) return null;", "-\t\tswitch (originalType.kind()) {", "-", "-\t\t\tcase Binding.TYPE_PARAMETER:", "-\t\t\t\treturn substitution.substitute((TypeVariableBinding) originalType);", "-", "-\t\t\tcase Binding.PARAMETERIZED_TYPE:", "-\t\t\t\tParameterizedTypeBinding originalParameterizedType = (ParameterizedTypeBinding) originalType;", "-\t\t\t\tReferenceBinding originalEnclosing = originalType.enclosingType();", "-\t\t\t\tReferenceBinding substitutedEnclosing = originalEnclosing;", "-\t\t\t\tif (originalEnclosing != null) {", "-\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) substitute(substitution, originalEnclosing);", "-\t\t\t\t\tif (isMemberTypeOfRaw(originalType, substitutedEnclosing))", "-\t\t\t\t\t\treturn originalParameterizedType.environment.createRawType(", "-\t\t\t\t\t\t\t\toriginalParameterizedType.genericType(), substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t}", "-\t\t\t\tTypeBinding[] originalArguments = originalParameterizedType.arguments;", "-\t\t\t\tTypeBinding[] substitutedArguments = originalArguments;", "-\t\t\t\tif (originalArguments != null) {", "-\t\t\t\t\tif (substitution.isRawSubstitution()) {", "-\t\t\t\t\t\treturn originalParameterizedType.environment.createRawType(originalParameterizedType.genericType(), substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t\t}", "-\t\t\t\t\tsubstitutedArguments = substitute(substitution, originalArguments);", "-\t\t\t\t}", "-\t\t\t\tif (substitutedArguments != originalArguments || substitutedEnclosing != originalEnclosing) { //$IDENTITY-COMPARISON$", "-\t\t\t\t\treturn originalParameterizedType.environment.createParameterizedType(", "-\t\t\t\t\t\t\toriginalParameterizedType.genericType(), substitutedArguments, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-", "-\t\t\tcase Binding.ARRAY_TYPE:", "-\t\t\t\tArrayBinding originalArrayType = (ArrayBinding) originalType;", "-\t\t\t\tTypeBinding originalLeafComponentType = originalArrayType.leafComponentType;", "-\t\t\t\tTypeBinding substitute = substitute(substitution, originalLeafComponentType); // substitute could itself be array type, TODO(Srikanth): need a test case.", "-\t\t\t\tif (substitute != originalLeafComponentType) { //$IDENTITY-COMPARISON$", "-\t\t\t\t\treturn originalArrayType.environment.createArrayType(substitute.leafComponentType(), substitute.dimensions() + originalType.dimensions(), originalType.getTypeAnnotations());", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-", "-\t\t\tcase Binding.WILDCARD_TYPE:", "-\t\t\tcase Binding.INTERSECTION_TYPE:", "-\t\t        WildcardBinding wildcard = (WildcardBinding) originalType;", "-\t\t        if (wildcard.boundKind != Wildcard.UNBOUND) {", "-\t\t\t        TypeBinding originalBound = wildcard.bound;", "-\t\t\t        TypeBinding substitutedBound = substitute(substitution, originalBound);", "-\t\t\t        TypeBinding[] originalOtherBounds = wildcard.otherBounds;", "-\t\t\t        TypeBinding[] substitutedOtherBounds = substitute(substitution, originalOtherBounds);", "-\t\t\t        if (substitutedBound != originalBound || originalOtherBounds != substitutedOtherBounds) { //$IDENTITY-COMPARISON$", "-\t\t\t        \tif (originalOtherBounds != null) {", "-\t\t\t        \t\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=347145: the constituent intersecting types have changed", "-\t\t\t        \t\t   in the last round of substitution. Reevaluate the composite intersection type, as there is a possibility", "-\t\t\t        \t\t   of the intersection collapsing into one of the constituents, the other being fully subsumed.", "-\t\t\t        \t\t*/", "-\t\t\t    \t\t\tTypeBinding [] bounds = new TypeBinding[1 + substitutedOtherBounds.length];", "-\t\t\t    \t\t\tbounds[0] = substitutedBound;", "-\t\t\t    \t\t\tSystem.arraycopy(substitutedOtherBounds, 0, bounds, 1, substitutedOtherBounds.length);", "-\t\t\t    \t\t\tTypeBinding[] glb = Scope.greaterLowerBound(bounds, null, substitution.environment()); // re-evaluate", "-\t\t\t    \t\t\tif (glb != null && glb != bounds) {", "-\t\t\t    \t\t\t\tsubstitutedBound = glb[0];", "-\t\t    \t\t\t\t\tif (glb.length == 1) {", "-\t\t\t    \t\t\t\t\tsubstitutedOtherBounds = null;", "-\t\t\t    \t\t\t\t} else {", "-\t\t\t    \t\t\t\t\tSystem.arraycopy(glb, 1, substitutedOtherBounds = new TypeBinding[glb.length - 1], 0, glb.length - 1);", "-\t\t\t    \t\t\t\t}", "-\t\t\t    \t\t\t}", "-\t\t\t        \t}", "-\t\t        \t\treturn wildcard.environment.createWildcard(wildcard.genericType, wildcard.rank, substitutedBound, substitutedOtherBounds, wildcard.boundKind, wildcard.getTypeAnnotations());", "-\t\t\t        }", "-\t\t        }", "-\t\t\t\tbreak;", "-", "-\t\t\tcase Binding.TYPE:", "-\t\t\t\tif (!originalType.isMemberType()) break;", "-\t\t\t\tReferenceBinding originalReferenceType = (ReferenceBinding) originalType;", "-\t\t\t\toriginalEnclosing = originalType.enclosingType();", "-\t\t\t\tsubstitutedEnclosing = originalEnclosing;", "-\t\t\t\tif (originalEnclosing != null) {", "-\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) substitute(substitution, originalEnclosing);", "-\t\t\t\t\tif (isMemberTypeOfRaw(originalType, substitutedEnclosing))", "-\t\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t}", "-", "-\t\t\t    // treat as if parameterized with its type variables (non generic type gets 'null' arguments)", "-\t\t\t\tif (substitutedEnclosing != originalEnclosing) { //$IDENTITY-COMPARISON$", "-\t\t\t\t\treturn substitution.isRawSubstitution()", "-\t\t\t\t\t\t? substitution.environment().createRawType(originalReferenceType, substitutedEnclosing, originalType.getTypeAnnotations())", "-\t\t\t\t\t\t:  substitution.environment().createParameterizedType(originalReferenceType, null, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.GENERIC_TYPE:", "-\t\t\t\toriginalReferenceType = (ReferenceBinding) originalType;", "-\t\t\t\toriginalEnclosing = originalType.enclosingType();", "-\t\t\t\tsubstitutedEnclosing = originalEnclosing;", "-\t\t\t\tif (originalEnclosing != null) {", "-\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) substitute(substitution, originalEnclosing);", "-\t\t\t\t\tif (isMemberTypeOfRaw(originalType, substitutedEnclosing))", "-\t\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t}", "-", "-\t\t\t\tif (substitution.isRawSubstitution()) {", "-\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t}", "-\t\t\t    // treat as if parameterized with its type variables (non generic type gets 'null' arguments)", "-\t\t\t\toriginalArguments = originalReferenceType.typeVariables();", "-\t\t\t\tsubstitutedArguments = substitute(substitution, originalArguments);", "-\t\t\t\treturn substitution.environment().createParameterizedType(originalReferenceType, substitutedArguments, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t}", "-\t\treturn originalType;", "-\t}", "+\t\treturn defaultSubstitutor.substitute(substitution, originalType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f464ff94d09eec49c438c7af6c014097", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c3c8917789b86ee8ba49ca3909bec03bf932cdc5", "commitAfterChange": "6e652c66c504914c1daaa584a7eee66b8e87dca4", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "signatureAfterChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "diff": ["+\t\tTypeBinding unannotatedOriginal = originalType.unannotated();", "+\t\tTypeBinding substitute = substitute0(substitution, unannotatedOriginal);", "+\t\tif (unannotatedOriginal == originalType)\t\t// no annotation => use naked substitute", "+\t\t\treturn substitute;", "+\t\telse if (substitute == unannotatedOriginal)\t\t// no substitution => re-use annotated type", "+\t\t\treturn originalType;", "+\t\telse \t\t\t\t\t\t\t\t\t\t\t// substitution and annotation: merge both", "+\t\t\treturn substitution.environment().copyAnnotations(originalType, substitute);", "+\t}"]}], "num": 67660}
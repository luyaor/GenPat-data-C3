{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "73d7056d29bd33dbb7185403afef902b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0820c91be708c906a24cae1e4e524371", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "87c02024c35caa7b296fc7c28fa066d1219c7ebd", "commitAfterChange": "00ed17ebccd11fb6934f754c05c5ab1e0f58152f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public BinaryTypeBinding(PackageBinding packageBinding, IBinaryType binaryType, LookupEnvironment environment)", "signatureAfterChange": " public BinaryTypeBinding(PackageBinding packageBinding, IBinaryType binaryType, LookupEnvironment environment)", "diff": ["+\tthis(packageBinding, binaryType, environment, false);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "201e37d72cefa5b2209cf9319b580dde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "c2e73e92d84b995d792bc11e9e3cc44e31128806", "commitAfterChange": "7530e9811f8e0b012d59fd23237f75cdb4977fd6", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " private void scanTypeForNullDefaultAnnotation(IBinaryType binaryType, PackageBinding packageBinding, BinaryTypeBinding binaryBinding)", "signatureAfterChange": " private void scanTypeForNullDefaultAnnotation(IBinaryType binaryType, PackageBinding packageBinding)", "diff": ["-private void scanTypeForNullDefaultAnnotation(IBinaryType binaryType, PackageBinding packageBinding, BinaryTypeBinding binaryBinding) {", "+private void scanTypeForNullDefaultAnnotation(IBinaryType binaryType, PackageBinding packageBinding) {", "-\tboolean isPackageInfo = CharOperation.equals(binaryBinding.sourceName(), TypeConstants.PACKAGE_INFO_NAME);", "-\tboolean useTypeAnnotations = this.environment.globalOptions.sourceLevel >= ClassFileConstants.JDK1_8;", "+\tboolean isPackageInfo = CharOperation.equals(sourceName(), TypeConstants.PACKAGE_INFO_NAME);", "-\t\t\t\tIBinaryElementValuePair[] elementValuePairs = annotations[i].getElementValuePairs();", "-\t\t\t\tif (!useTypeAnnotations) {", "-\t\t\t\t\tif (elementValuePairs != null && elementValuePairs.length == 1) {", "-\t\t\t\t\t\tObject value = elementValuePairs[0].getValue();", "-\t\t\t\t\t\tif (value instanceof BooleanConstant", "-\t\t\t\t\t\t\t&& !((BooleanConstant)value).booleanValue())", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t// parameter is 'false': this means we cancel defaults from outer scopes:", "-\t\t\t\t\t\t\tannotationBit = TagBits.AnnotationNullUnspecifiedByDefault;", "-\t\t\t\t\t\t\tnullness = NULL_UNSPECIFIED_BY_DEFAULT;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// using NonNullByDefault we need to inspect the details of the value() attribute:", "-\t\t\t\t\tnullness = getNonNullByDefaultValue(annotations[i]);", "-\t\t\t\t\tif (nullness == NULL_UNSPECIFIED_BY_DEFAULT) {", "-\t\t\t\t\t\tannotationBit = TagBits.AnnotationNullUnspecifiedByDefault;", "-\t\t\t\t\t} else if (nullness != 0) {", "-\t\t\t\t\t\tannotationBit = TagBits.AnnotationNonNullByDefault;", "-\t\t\t\t\t}\t", "-\t\t\t\t\tthis.defaultNullness = nullness;", "-\t\t\t\t\tbreak;", "+\t\t\t\t// using NonNullByDefault we need to inspect the details of the value() attribute:", "+\t\t\t\tnullness = getNonNullByDefaultValue(annotations[i]);", "+\t\t\t\tif (nullness == NULL_UNSPECIFIED_BY_DEFAULT) {", "+\t\t\t\t\tannotationBit = TagBits.AnnotationNullUnspecifiedByDefault;", "+\t\t\t\t} else if (nullness != 0) {", "+\t\t\t\t\tannotationBit = TagBits.AnnotationNonNullByDefault;", "-\t\t\t\tannotationBit = TagBits.AnnotationNonNullByDefault;", "-\t\t\t\tnullness = NONNULL_BY_DEFAULT;", "+\t\t\t\tthis.defaultNullness = nullness;", "-\t\t\tbinaryBinding.tagBits |= annotationBit;", "+\t\t\tthis.tagBits |= annotationBit;", "-\t\tpackageBinding.defaultNullness = Binding.NULL_UNSPECIFIED_BY_DEFAULT;", "+\t\tpackageBinding.defaultNullness = Binding.NO_NULL_DEFAULT;", "-\tReferenceBinding enclosingTypeBinding = binaryBinding.enclosingType;", "+\tReferenceBinding enclosingTypeBinding = this.enclosingType;", "-\t\tif (useTypeAnnotations) {", "-\t\t\tbinaryBinding.defaultNullness = enclosingTypeBinding.getNullDefault();", "-\t\t\tif (binaryBinding.defaultNullness != 0) {", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t} else {", "-\t\t\tif ((enclosingTypeBinding.tagBits & TagBits.AnnotationNonNullByDefault) != 0) {", "-\t\t\t\tbinaryBinding.tagBits |= TagBits.AnnotationNonNullByDefault;", "-\t\t\t\treturn;", "-\t\t\t} else if ((enclosingTypeBinding.tagBits & TagBits.AnnotationNullUnspecifiedByDefault) != 0) {", "-\t\t\t\tbinaryBinding.tagBits |= TagBits.AnnotationNullUnspecifiedByDefault;", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t}", "+\t\tif (setNullDefault(enclosingTypeBinding.tagBits, enclosingTypeBinding.getNullDefault()))", "+\t\t\treturn;", "-\t\t\tpackageBinding.defaultNullness = Binding.NULL_UNSPECIFIED_BY_DEFAULT;", "+\t\t\tpackageBinding.defaultNullness = Binding.NO_NULL_DEFAULT;", "-\tif (useTypeAnnotations) {", "-\t\tbinaryBinding.defaultNullness = packageBinding.defaultNullness;", "-\t} else {", "-\t\tswitch (packageBinding.defaultNullness) {", "-\t\t\tcase Binding.NONNULL_BY_DEFAULT : ", "-\t\t\t\tbinaryBinding.tagBits |= TagBits.AnnotationNonNullByDefault;", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.NULL_UNSPECIFIED_BY_DEFAULT :", "-\t\t\t\tbinaryBinding.tagBits |= TagBits.AnnotationNullUnspecifiedByDefault;", "-\t\t\t\tbreak;", "-\t\t}", "+\tsetNullDefault(0L, packageBinding.defaultNullness);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86f913a7c10172d825cdb8cef923c346", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/CompletionProposal.java", "commitBeforeChange": "aebd50d4e7ed3a3654e44abaa502f380b7af3ace", "commitAfterChange": "7d7e44bec5cc73af8a58c1959acd433a7f2c6ded", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic char[][] findParameterNames(IProgressMonitor monitor)", "signatureAfterChange": " \tpublic char[][] findParameterNames(IProgressMonitor monitor)", "diff": ["-\t\tif (!this.parameterNamesComputed) {", "-\t\t\tthis.parameterNamesComputed = true;", "-", "-\t\t\tswitch(this.completionKind) {", "-\t\t\t\tcase ANONYMOUS_CLASS_DECLARATION:", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tthis.parameterNames = findMethodParameterNames(", "-\t\t\t\t\t\t\t\tthis.declarationPackageName,", "-\t\t\t\t\t\t\t\tthis.declarationTypeName,", "-\t\t\t\t\t\t\t\tCharOperation.lastSegment(this.declarationTypeName, '.'),", "-\t\t\t\t\t\t\t\tSignature.getParameterTypes(this.originalSignature == null ? this.signature : this.originalSignature));", "-\t\t\t\t\t} catch(IllegalArgumentException e) {", "-\t\t\t\t\t\t// protection for invalid signature", "-\t\t\t\t\t\tif(this.parameterTypeNames != null) {", "-\t\t\t\t\t\t\tthis.parameterNames =  createDefaultParameterNames(this.parameterTypeNames.length);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.parameterNames = null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase METHOD_REF:", "-\t\t\t\tcase METHOD_REF_WITH_CASTED_RECEIVER:", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tthis.parameterNames = findMethodParameterNames(", "-\t\t\t\t\t\t\t\tthis.declarationPackageName,", "-\t\t\t\t\t\t\t\tthis.declarationTypeName,", "-\t\t\t\t\t\t\t\tthis.name,", "-\t\t\t\t\t\t\t\tSignature.getParameterTypes(this.originalSignature == null ? this.signature : this.originalSignature));", "-\t\t\t\t\t} catch(IllegalArgumentException e) {", "-\t\t\t\t\t\t// protection for invalid signature", "-\t\t\t\t\t\tif(this.parameterTypeNames != null) {", "-\t\t\t\t\t\t\tthis.parameterNames =  createDefaultParameterNames(this.parameterTypeNames.length);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.parameterNames = null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase METHOD_DECLARATION:", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tthis.parameterNames = findMethodParameterNames(", "-\t\t\t\t\t\t\t\tthis.declarationPackageName,", "-\t\t\t\t\t\t\t\tthis.declarationTypeName,", "-\t\t\t\t\t\t\t\tthis.name,", "-\t\t\t\t\t\t\t\tSignature.getParameterTypes(this.originalSignature == null ? this.signature : this.originalSignature));", "-\t\t\t\t\t} catch(IllegalArgumentException e) {", "-\t\t\t\t\t\t// protection for invalid signature", "-\t\t\t\t\t\tif(this.parameterTypeNames != null) {", "-\t\t\t\t\t\t\tthis.parameterNames =  createDefaultParameterNames(this.parameterTypeNames.length);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.parameterNames = null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif(this.parameterNames != null) {", "-\t\t\t\t\t\tthis.updateCompletion = true;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\treturn this.parameterNames;", "+\t\treturn null; // default overridden by concrete implementation"]}], "num": 4824}
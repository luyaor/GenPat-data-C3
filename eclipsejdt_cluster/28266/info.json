{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9767f563ad46f48a3c1dd21e8f042aa7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cc708e89b846c7a3440e8d5e43b2908", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CommentsPreparator.java", "commitBeforeChange": "bd442b30672a7d31071cdbf23b509a80d715023a", "commitAfterChange": "260ff63e87f242ab982cdcea6ba42f866e16f101", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(TagElement node)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(TagElement node)", "diff": ["-\t\telse if (IMMUTABLE_TAGS.contains(tagName)) {", "-\t\t\tif (startIndex < endIndex)", "+\t\tif (node.isNested()) {", "+\t\t\tsubstituteWrapIfTouching(startIndex);", "+\t\t\tsubstituteWrapIfTouching(endIndex + 1);", "+\t\t\tif (IMMUTABLE_TAGS.contains(tagName) && startIndex < endIndex)", "-\t\t\tnoSubstituteWrapping(node.getStartPosition(), nodeEnd);", "-\t\t}", "-", "-\t\telse if (node.isNested()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e55bdee5b64259377c50e16257f725d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnresolvedReferenceBinding.java", "commitBeforeChange": "6a9c839afeea06e7dd97b023fa9c24def00f0f08", "commitAfterChange": "cf7db1b07f7da2723bd250cc64a7e16bec1c504d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " ReferenceBinding resolve(LookupEnvironment environment, boolean convertGenericToRawType)", "signatureAfterChange": " ReferenceBinding resolve(LookupEnvironment environment, boolean convertGenericToRawType)", "diff": ["-\t\tif (targetType != null && targetType != this) { // could not resolve any better, error was already reported against it", "-\t\t\tsetResolvedType(targetType, environment);", "-\t\t} else {", "-\t\t\tenvironment.problemReporter.isClassPathCorrect(this.compoundName, null);", "-\t\t\treturn null; // will not get here since the above error aborts the compilation", "+\t\tif (targetType == null || targetType == this) { // could not resolve any better, error was already reported against it", "+\t\t\t// create a proxy for the missing BinaryType", "+\t\t\ttargetType = environment.cacheMissingBinaryType(this.compoundName, null);", "+\t\tsetResolvedType(targetType, environment);"]}], "num": 28266}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df0e644e30be9c53b1a360b537da33f1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ffd0008842291a2b140324ff09bc68f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tIClassFile classFile, \t\tboolean resolveBindings, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tIClassFile classFile, \t\tboolean resolveBindings)", "diff": ["+", "+\t\tif (classFile == null) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tASTParser c = ASTParser.internalNewParser2();", "+\t\tc.setSource(classFile);", "+\t\tc.setResolveBindings(resolveBindings);", "+\t\tASTNode result = c.createAST(null);", "+\t\treturn (CompilationUnit) result;", "-\t\tif (owner == null) {", "-\t\t\towner = DefaultWorkingCopyOwner.PRIMARY;", "-\t\t}", "-\t\tchar[] source = null;", "-\t\tString sourceString = null;", "-\t\ttry {", "-\t\t\tsourceString = classFile.getSource();", "-\t\t} catch (JavaModelException e) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\tif (sourceString == null) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\tsource = sourceString.toCharArray();", "-\t\tif (!resolveBindings) {", "-\t\t\treturn AST.parseCompilationUnit(source);", "-\t\t}", "-\t\tStringBuffer buffer = new StringBuffer(SuffixConstants.SUFFIX_STRING_java);", "-\t\t", "-\t\tString classFileName = classFile.getElementName(); // this includes the trailing .class", "-\t\tbuffer.insert(0, classFileName.toCharArray(), 0, classFileName.indexOf('.'));", "-\t\tIJavaProject project = classFile.getJavaProject();", "-\t\tCompilationUnitDeclaration compilationUnitDeclaration = null;", "-\t\ttry {", "-\t\t\t// parse and resolve", "-\t\t\tcompilationUnitDeclaration =", "-\t\t\t\tCompilationUnitResolver.resolve(", "-\t\t\t\t\tsource,", "-\t\t\t\t\tCharOperation.splitOn('.', classFile.getType().getPackageFragment().getElementName().toCharArray()),", "-\t\t\t\t\tbuffer.toString(),", "-\t\t\t\t\tproject,", "-\t\t\t\t\tnull/*no node searcher*/,", "-\t\t\t\t\tfalse/*don't cleanup*/,", "-\t\t\t\t\towner,", "-\t\t\t\t\tmonitor);", "-\t\t\tASTConverter converter = new ASTConverter(project.getOptions(true), true, monitor);", "-\t\t\tAST ast = new AST();", "-\t\t\tBindingResolver resolver = new DefaultBindingResolver(compilationUnitDeclaration.scope);", "-\t\t\tast.setBindingResolver(resolver);", "-\t\t\tconverter.setAST(ast);", "-\t\t", "-\t\t\tCompilationUnit cu = converter.convert(compilationUnitDeclaration, source);", "-\t\t\tcu.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);", "-\t\t\tresolver.storeModificationCount(ast.modificationCount());", "-\t\t\treturn cu;", "-\t\t} catch(JavaModelException e) {", "-\t\t\t/* if a JavaModelException is thrown trying to retrieve the name environment", "-\t\t\t * then we simply do a parsing without creating bindings.", "-\t\t\t * Therefore all binding resolution will return null.", "-\t\t\t */", "-\t\t\treturn parseCompilationUnit(source);\t\t\t", "-\t\t} finally {", "-\t\t\tif (compilationUnitDeclaration != null) {", "-\t\t\t\tcompilationUnitDeclaration.cleanUp();", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb9f99d207830319c9247913b4d0b4a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void search(IWorkspace workspace, ISearchPattern searchPattern, IJavaSearchScope scope, IJavaSearchResultCollector resultCollector) throws JavaModelException", "signatureAfterChange": " \tpublic void search(IWorkspace workspace, ISearchPattern searchPattern, IJavaSearchScope scope, IJavaSearchResultCollector resultCollector) throws JavaModelException", "diff": ["- */", "-public void search(IWorkspace workspace, ISearchPattern searchPattern, IJavaSearchScope scope, IJavaSearchResultCollector resultCollector) throws JavaModelException {", "-\tlong start = -1;", "-\tif (VERBOSE) {", "-\t\tstart = System.currentTimeMillis();", "-\t\tSystem.out.println(\"Searching for \" + searchPattern + \" in \" + scope); //$NON-NLS-1$//$NON-NLS-2$", "-", "-\t/* search is starting */", "-\tresultCollector.aboutToStart();", "-", "-\tIProgressMonitor progressMonitor = resultCollector.getProgressMonitor();", "-\tMatchLocator matchLocator = null;", "-\ttry {\t", "-\t\tif (searchPattern == null) return;", "-", "-\t\t/* initialize progress monitor */", "-\t\tif (progressMonitor != null) {", "-\t\t\tprogressMonitor.beginTask(Util.bind(\"engine.searching\"), 100); //$NON-NLS-1$", "-\t\t}", "-", "-\t\t/* index search */", "-\t\tPathCollector pathCollector = new PathCollector();", "-\t\t", "-\t\t// In the case of a hierarchy scope make sure that the hierarchy is not computed.", "-\t\t// MatchLocator will filter out elements not in the hierarchy", "-\t\tSearchPattern pattern = (SearchPattern)searchPattern;", "-\t\tif (scope instanceof HierarchyScope) {", "-\t\t\t((HierarchyScope)scope).needsRefresh = false;", "-\t\t\tpattern.mustResolve = true; // force resolve to compute type bindings", "-\t\t}", "-", "-\t\tIndexManager indexManager = JavaModelManager.getJavaModelManager().getIndexManager();", "-\t\tmatchLocator = ", "-\t\t\tnew MatchLocator(", "-\t\t\t\tpattern, ", "-\t\t\t\tresultCollector, ", "-\t\t\t\tscope,", "-\t\t\t\tprogressMonitor == null ? null : new SubProgressMonitor(progressMonitor, 95)", "-\t\t);", "-", "-\t\tindexManager.performConcurrentJob(", "-\t\t\tnew PatternSearchJob(", "-\t\t\t\tpattern, ", "-\t\t\t\tscope, ", "-\t\t\t\tpathCollector, ", "-\t\t\t\tindexManager),", "-\t\t\tIJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH,", "-\t\t\tprogressMonitor == null ? null : new SubProgressMonitor(progressMonitor, 5));", "-\t\t\t", "-\t\t/* eliminating false matches and locating them */", "-\t\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "-\t\tmatchLocator.locateMatches(", "-\t\t\tpathCollector.getPaths(), ", "-\t\t\tworkspace,", "-\t\t\tworkingCopiesThatCanSeeFocus(pattern.focus, pattern.isPolymorphicSearch())", "-\t\t);", "-\t\t", "-", "-\t\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "-\t\t", "-\t\tmatchLocator.locatePackageDeclarations(workspace);", "-\t} finally {", "-\t\tif (progressMonitor != null) {", "-\t\t\tprogressMonitor.done();", "-\t\t}", "-", "-\t\t/* search has ended */", "-\t\tresultCollector.done();", "-\t\tif (VERBOSE) {", "-\t\t\tSystem.out.println(\"Total time: \" + (System.currentTimeMillis()-start) + \"ms\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tif (matchLocator != null) System.out.println(\"Time in result collector: \" + matchLocator.resultCollectorTime + \"ms\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t}", "-\t}", "-}", "+\t */", "+\tpublic void search(IWorkspace workspace, ISearchPattern searchPattern, IJavaSearchScope scope, IJavaSearchResultCollector resultCollector) throws JavaModelException {", "+\t\ttry {", "+\t\t\tsearch(", "+\t\t\t\t(SearchPattern)searchPattern, ", "+\t\t\t\tnew SearchParticipant[] {new JavaSearchParticipant(getWorkingCopies())}, ", "+\t\t\t\tscope, ", "+\t\t\t\tnew ResultCollectorAdapter(resultCollector), ", "+\t\t\t\tresultCollector.getProgressMonitor());", "+\t\t} catch (CoreException e) {", "+\t\t\tif (e instanceof JavaModelException) {", "+\t\t\t\tthrow (JavaModelException) e;", "+\t\t\t} else {", "+\t\t\t\tthrow new JavaModelException(e);", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 60795}
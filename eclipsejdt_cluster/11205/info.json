{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6187913e03edaddd6c40251e26c56863", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "305231601643ffc1b1ce713bdbbf00a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "8b0f83ab2fc2f0377aa0a160aaebc6cf11976024", "commitAfterChange": "841d4b99f7f88577aa004d23df8444d60d488b4b", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void traverse(ASTVisitor visitor, BlockScope blockScope)", "signatureAfterChange": " public void traverse(ASTVisitor visitor, BlockScope blockScope)", "diff": ["+ */", "+public void traverse(ASTVisitor visitor, BlockScope blockScope) {", "+\tif (this.ignoreFurtherInvestigation)", "+\t\treturn;", "+\ttry {", "+\t\tif (visitor.visit(this, blockScope)) {", "+\t\t\tif (this.annotations != null) {", "+\t\t\t\tint annotationsLength = this.annotations.length;", "+\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "+\t\t\t\t\tthis.annotations[i].traverse(visitor, this.scope);", "+\t\t\t}", "+\t\t\tif (this.superclass != null)", "+\t\t\t\tthis.superclass.traverse(visitor, this.scope);", "+\t\t\tif (this.superInterfaces != null) {", "+\t\t\t\tint length = this.superInterfaces.length;", "+\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\tthis.superInterfaces[i].traverse(visitor, this.scope);", "+\t\t\t}", "+\t\t\tif (this.typeParameters != null) {", "+\t\t\t\tint length = this.typeParameters.length;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tthis.typeParameters[i].traverse(visitor, this.scope);", "+\t\t\t\t}", "+\t\t\t}\t\t\t\t", "+\t\t\tif (this.memberTypes != null) {", "+\t\t\t\tint length = this.memberTypes.length;", "+\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\tthis.memberTypes[i].traverse(visitor, this.scope);", "+\t\t\t}", "+\t\t\tif (this.fields != null) {", "+\t\t\t\tint length = this.fields.length;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tFieldDeclaration field;", "+\t\t\t\t\tif ((field = this.fields[i]).isStatic()) {", "+\t\t\t\t\t\t// local type cannot have static fields", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfield.traverse(visitor, this.initializerScope);", "+\t\t\t\t\t}", "+\t\t\tif (this.methods != null) {", "+\t\t\t\tint length = this.methods.length;", "+\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\tthis.methods[i].traverse(visitor, this.scope);", "+\t\tvisitor.endVisit(this, blockScope);", "+\t} catch (AbortType e) {", "+\t\t// silent abort", "+}", "-\t */", "-\tpublic void traverse(ASTVisitor visitor, BlockScope blockScope) {", "-\t\tif (ignoreFurtherInvestigation)", "-\t\t\treturn;", "-\t\ttry {", "-\t\t\tif (visitor.visit(this, blockScope)) {", "-\t\t\t\tif (this.annotations != null) {", "-\t\t\t\t\tint annotationsLength = this.annotations.length;", "-\t\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "-\t\t\t\t\t\tthis.annotations[i].traverse(visitor, scope);", "-\t\t\t\t}", "-\t\t\t\tif (this.superclass != null)", "-\t\t\t\t\tthis.superclass.traverse(visitor, scope);", "-\t\t\t\tif (this.superInterfaces != null) {", "-\t\t\t\t\tint length = this.superInterfaces.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\t\t\tthis.superInterfaces[i].traverse(visitor, scope);", "-\t\t\t\t}", "-\t\t\t\tif (this.typeParameters != null) {", "-\t\t\t\t\tint length = this.typeParameters.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tthis.typeParameters[i].traverse(visitor, scope);", "-\t\t\t\t\t}", "-\t\t\t\t}\t\t\t\t", "-\t\t\t\tif (this.memberTypes != null) {", "-\t\t\t\t\tint length = this.memberTypes.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\t\t\tthis.memberTypes[i].traverse(visitor, scope);", "-\t\t\t\t}", "-\t\t\t\tif (this.fields != null) {", "-\t\t\t\t\tint length = this.fields.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tFieldDeclaration field;", "-\t\t\t\t\t\tif ((field = this.fields[i]).isStatic()) {", "-\t\t\t\t\t\t\t// local type cannot have static fields", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tfield.traverse(visitor, initializerScope);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (this.methods != null) {", "-\t\t\t\t\tint length = this.methods.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\t\t\tthis.methods[i].traverse(visitor, scope);", "-\t\t\t\t}", "-\t\t\tvisitor.endVisit(this, blockScope);", "-\t\t} catch (AbortType e) {", "-\t\t\t// silent abort"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53c76e0b12297c0d7d24b4eba615ff6f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "11c24986fc925cfc43f4c88e72e0daee39a1576b", "commitAfterChange": "55350d5af8386833b94a470ab6a0d389ee3fc665", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tprotected IJavaProject createJavaProject(final String projectName, final String[] sourceFolders, final String[] libraries, final String[] projects, final boolean[] exportedProjects, final String projectOutput, final String[] sourceOutputs, final String[][] inclusionPatterns, final String[][] exclusionPatterns, final String compliance) throws CoreException", "signatureAfterChange": " \tprotected IJavaProject createJavaProject( \t\t\tfinal String projectName, \t\t\tfinal String[] sourceFolders, \t\t\tfinal String[] libraries, \t\t\tfinal String[][] librariesInclusionPatterns, \t\t\tfinal String[][] librariesExclusionPatterns, \t\t\tfinal String[] projects, \t\t\tfinal String[][] projectsInclusionPatterns, \t\t\tfinal String[][] projectsExclusionPatterns, \t\t\tfinal boolean[] exportedProjects, \t\t\tfinal String projectOutput, \t\t\tfinal String[] sourceOutputs, \t\t\tfinal String[][] inclusionPatterns, \t\t\tfinal String[][] exclusionPatterns, \t\t\tfinal String compliance) throws CoreException", "diff": ["+\t}", "+\tprotected IJavaProject createJavaProject(", "+\t\t\tfinal String projectName,", "+\t\t\tfinal String[] sourceFolders,", "+\t\t\tfinal String[] libraries,", "+\t\t\tfinal String[][] librariesInclusionPatterns,", "+\t\t\tfinal String[][] librariesExclusionPatterns,", "+\t\t\tfinal String[] projects,", "+\t\t\tfinal String[][] projectsInclusionPatterns,", "+\t\t\tfinal String[][] projectsExclusionPatterns,", "+\t\t\tfinal boolean[] exportedProjects,", "+\t\t\tfinal String projectOutput,", "+\t\t\tfinal String[] sourceOutputs,", "+\t\t\tfinal String[][] inclusionPatterns,", "+\t\t\tfinal String[][] exclusionPatterns,", "+\t\t\tfinal String compliance) throws CoreException {", "+\t\t\t\t\t", "+//\t\t\t\t\t inclusion patterns", "+\t\t\t\t\tIPath[] inclusionPaths;", "+\t\t\t\t\tif (librariesInclusionPatterns == null) {", "+\t\t\t\t\t\tinclusionPaths = new IPath[0];", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tString[] patterns = librariesInclusionPatterns[i];", "+\t\t\t\t\t\tint length = patterns.length;", "+\t\t\t\t\t\tinclusionPaths = new IPath[length];", "+\t\t\t\t\t\tfor (int j = 0; j < length; j++) {", "+\t\t\t\t\t\t\tString inclusionPattern = patterns[j];", "+\t\t\t\t\t\t\tinclusionPaths[j] = new Path(inclusionPattern);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t// exclusion patterns", "+\t\t\t\t\tIPath[] exclusionPaths;", "+\t\t\t\t\tif (librariesExclusionPatterns == null) {", "+\t\t\t\t\t\texclusionPaths = new IPath[0];", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tString[] patterns = librariesExclusionPatterns[i];", "+\t\t\t\t\t\tint length = patterns.length;", "+\t\t\t\t\t\texclusionPaths = new IPath[length];", "+\t\t\t\t\t\tfor (int j = 0; j < length; j++) {", "+\t\t\t\t\t\t\tString exclusionPattern = patterns[j];", "+\t\t\t\t\t\t\texclusionPaths[j] = new Path(exclusionPattern);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\t\tentries[sourceLength+i] = JavaCore.newContainerEntry(new Path(lib));", "+\t\t\t\t\t\tentries[sourceLength+i] = JavaCore.newContainerEntry(", "+\t\t\t\t\t\t\t\tnew Path(lib),", "+\t\t\t\t\t\t\t\tinclusionPaths,", "+\t\t\t\t\t\t\t\texclusionPaths, false);", "-\t\t\t\t\t\tentries[sourceLength+i] = JavaCore.newLibraryEntry(libPath, null, null);", "+\t\t\t\t\t\tentries[sourceLength+i] = JavaCore.newLibraryEntry(", "+\t\t\t\t\t\t\t\tlibPath,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\tinclusionPaths,", "+\t\t\t\t\t\t\t\texclusionPaths,", "+\t\t\t\t\t\t\t\tfalse);", "-\t\t\t\t\tentries[sourceLength+libLength+i] = JavaCore.newProjectEntry(new Path(projects[i]), isExported);", "+\t\t\t\t\t", "+\t\t\t\t\t// inclusion patterns", "+\t\t\t\t\tIPath[] inclusionPaths;", "+\t\t\t\t\tif (projectsInclusionPatterns == null) {", "+\t\t\t\t\t\tinclusionPaths = new IPath[0];", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tString[] patterns = projectsInclusionPatterns[i];", "+\t\t\t\t\t\tint length = patterns.length;", "+\t\t\t\t\t\tinclusionPaths = new IPath[length];", "+\t\t\t\t\t\tfor (int j = 0; j < length; j++) {", "+\t\t\t\t\t\t\tString inclusionPattern = patterns[j];", "+\t\t\t\t\t\t\tinclusionPaths[j] = new Path(inclusionPattern);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t// exclusion patterns", "+\t\t\t\t\tIPath[] exclusionPaths;", "+\t\t\t\t\tif (projectsExclusionPatterns == null) {", "+\t\t\t\t\t\texclusionPaths = new IPath[0];", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tString[] patterns = projectsExclusionPatterns[i];", "+\t\t\t\t\t\tint length = patterns.length;", "+\t\t\t\t\t\texclusionPaths = new IPath[length];", "+\t\t\t\t\t\tfor (int j = 0; j < length; j++) {", "+\t\t\t\t\t\t\tString exclusionPattern = patterns[j];", "+\t\t\t\t\t\t\texclusionPaths[j] = new Path(exclusionPattern);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\tentries[sourceLength+libLength+i] =", "+\t\t\t\t\t\tJavaCore.newProjectEntry(", "+\t\t\t\t\t\t\t\tnew Path(projects[i]),", "+\t\t\t\t\t\t\t\tinclusionPaths,", "+\t\t\t\t\t\t\t\texclusionPaths,", "+\t\t\t\t\t\t\t\tisExported);"]}], "num": 11205}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2dcce9ae7eeac4bee01973b7cbffa950", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a645ff2c07fc340438b5e7f9e2cb4a53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "78c62e3a4157070f714848f4de312a55f14f5144", "commitAfterChange": "fb48e11da0ebe84c63fab7b3cb5afd39c0ba6101", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate static boolean checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType)", "signatureAfterChange": " \tprivate static boolean checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType)", "diff": ["-\t\tif (argumentType != NullBinding && parameterType.isWildcard() && ((WildcardBinding) parameterType).kind != Wildcard.SUPER)", "-\t\t    return true; // unsafeWildcardInvocation", "+\t\tif (argumentType != NullBinding && parameterType.isWildcard()) {", "+\t\t\tWildcardBinding wildcard = (WildcardBinding) parameterType;", "+\t\t\tif (wildcard.kind != Wildcard.SUPER && wildcard.otherBounds == null) // lub wildcards are tolerated", "+\t\t    \treturn true; // unsafeWildcardInvocation", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6d5d1eb7875c2759b43328ce2e1d43e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "2c4584c2d5b726b4cdc708e96ad6b04e53986107", "commitAfterChange": "107f362cb3526a7bf91d7e9a22a75cf0b6b560f8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["-\t\tboolean warnRawArgs = false, wildcardInvocation = false;", "+\t\tboolean warnRawArgs = false, unsafeWildcardInvocation = false;", "-\t\t\tif (parameterType.isWildcard() && argumentType != NullBinding) {", "-\t\t\t    wildcardInvocation = true;", "+\t\t\tif (argumentType != NullBinding && parameterType.isWildcard() && ((WildcardBinding)parameterType).kind != Wildcard.SUPER) {", "+\t\t\t    unsafeWildcardInvocation = true;", "-\t\tif (wildcardInvocation) {", "+\t\tif (unsafeWildcardInvocation) {"]}], "num": 48216}
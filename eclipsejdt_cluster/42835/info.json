{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc25125b741be3040549883d7a60d1b6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27ce7f66b4aa056ab87821035790ae76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "a7e924b1651a1b9026ccc6590ce8e03365836a1b", "commitAfterChange": "d3da1d109c57a90a2bd8342736abf401463d58e5", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " static Classpath getClasspath(String classpathName, String encoding, int mode, AccessRuleSet accessRuleSet)", "signatureAfterChange": " static Classpath getClasspath(String classpathName, String encoding, boolean isSourceOnly, AccessRuleSet accessRuleSet)", "diff": ["-static Classpath getClasspath(String classpathName, String encoding, int mode, AccessRuleSet accessRuleSet) {", "+static Classpath getClasspath(String classpathName, String encoding, boolean isSourceOnly, AccessRuleSet accessRuleSet) {", "-\t\t\tresult = new ClasspathDirectory(file, encoding, mode, accessRuleSet);", "+\t\t\tresult = new ClasspathDirectory(file, encoding, isSourceOnly ? ClasspathLocation.SOURCE : ClasspathLocation.SOURCE | ClasspathLocation.BINARY, accessRuleSet);", "-\t\t\tif (mode == ClasspathLocation.SOURCE) {", "-\t\t\t\t// will throw an IOException if file does not exist", "+\t\t\tif (isSourceOnly) {", "+\t\t\t\t// source only mode", "-\t\t\t\t// will throw an IOException if file does not exist", "+\t\t\t\t// class file only mode"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89469d3a9a44f6d988d0e808ab7f897f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "9247f5a1413614555183073da9b25dcae829dcbb", "commitAfterChange": "ec2243f132866e54d9401c9f64dee23249b2b464", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " static Classpath getClasspath(String classpathName, String encoding, \t\tint classpathDirectoryMode, AccessRuleSet accessRuleSet)", "signatureAfterChange": " static Classpath getClasspath(String classpathName, String encoding, int mode, AccessRuleSet accessRuleSet)", "diff": ["-static Classpath getClasspath(String classpathName, String encoding,", "-\t\tint classpathDirectoryMode, AccessRuleSet accessRuleSet) {", "+}", "+static Classpath getClasspath(String classpathName, String encoding, int mode, AccessRuleSet accessRuleSet) {", "-\t\t\tresult = new ClasspathDirectory(file, encoding,", "-\t\t\t\t\tclasspathDirectoryMode, accessRuleSet);", "+\t\t\tresult = new ClasspathDirectory(file, encoding, mode, accessRuleSet);", "-\t\t\tresult = new ClasspathJar(file, true, accessRuleSet);", "-\t\t\t// will throw an IOException if file does not exist", "+\t\t\tif (mode == ClasspathLocation.SOURCE) {", "+\t\t\t\t// will throw an IOException if file does not exist", "+\t\t\t\tresult = new ClasspathSourceJar(file, true, accessRuleSet, encoding);\t\t\t", "+\t\t\t} else {", "+\t\t\t\t// will throw an IOException if file does not exist", "+\t\t\t\tresult = new ClasspathJar(file, true, accessRuleSet);", "+\t\t\t}"]}], "num": 42835}
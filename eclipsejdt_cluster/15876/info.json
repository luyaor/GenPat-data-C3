{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ab852e99573250612c56c16f7a64f85", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b4eccf8422c1885557db2ee2276eec2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "8c93d4e99b8a943865cb7391e781eba5bb83dfc9", "commitAfterChange": "bd0edd7688142c1743cb6b10766dfc576040f113", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "signatureAfterChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "diff": ["-\t\t// check if either is a method annotated @NonNull and compared to null:", "+", "+\t\tboolean leftNonNullChecked = false;", "+\t\tboolean rightNonNullChecked = false;", "+", "+\t\t// check if either is a non-local expression known to be nonnull and compared to null, candidates are", "+\t\t// - method/field annotated @NonNull", "+\t\t// - allocation expression, some literals, this reference (see inside expressionNonNullComparison(..))", "+\t\tboolean checkForNull = ((this.bits & OperatorMASK) >> OperatorSHIFT) == EQUAL_EQUAL;", "-\t\t\tif (this.left instanceof MessageSend) { ", "-\t\t\t\tscope.problemReporter().messageSendRedundantCheckOnNonNull(((MessageSend) this.left).binding, this.left);", "-\t\t\t}", "-\t\t\t// TODO: handle all kinds of expressions (cf. also https://bugs.eclipse.org/364326)", "+\t\t\tleftNonNullChecked = scope.problemReporter().expressionNonNullComparison(this.left, checkForNull);", "-\t\t\tif (this.right instanceof MessageSend) {", "-\t\t\t\tscope.problemReporter().messageSendRedundantCheckOnNonNull(((MessageSend) this.right).binding, this.right);", "+\t\t\trightNonNullChecked = scope.problemReporter().expressionNonNullComparison(this.right, checkForNull);", "+\t\t}", "+\t\t", "+\t\tif (!leftNonNullChecked) {", "+\t\t\tVariableBinding var = this.left.variableBinding(scope);", "+\t\t\tif (var != null && (var.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, var, rightStatus, this.left);", "-\t\t\t// TODO: handle all kinds of expressions (cf. also https://bugs.eclipse.org/364326)", "+\t\t}", "+\t\tif (!rightNonNullChecked) {", "+\t\t\tVariableBinding var = this.right.variableBinding(scope);", "+\t\t\tif (var != null && (var.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, var, leftStatus, this.right);", "+\t\t\t}", "-\t\tVariableBinding var = this.left.variableBinding(scope);", "-\t\tif (var != null && (var.type.tagBits & TagBits.IsBaseType) == 0) {", "-\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, var, rightStatus, this.left);", "-\t\t}", "-\t\tvar = this.right.variableBinding(scope);", "-\t\tif (var != null && (var.type.tagBits & TagBits.IsBaseType) == 0) {", "-\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, var, leftStatus, this.right);", "+\t\tif (leftNonNullChecked || rightNonNullChecked) {", "+\t\t\t// above checks have not propagated unrechable into the corresponding branch, do it now:", "+\t\t\tif (checkForNull) {", "+\t\t\t\tinitsWhenTrue.setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "+\t\t\t} else {", "+\t\t\t\tinitsWhenFalse.setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6b7c6cf59c075debf6970c7cd2cc8ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "874e2c41609c64af417834df9af2e898d8dcf37a", "commitAfterChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "signatureAfterChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "diff": ["-", "-\t\tboolean leftNonNullChecked = false;", "-\t\tboolean rightNonNullChecked = false;", "-", "-\t\t// check if either is a non-local expression known to be nonnull and compared to null, candidates are", "-\t\t// - method/field annotated @NonNull", "-\t\t// - allocation expression, some literals, this reference (see inside expressionNonNullComparison(..))", "-\t\tboolean checkForNull = ((this.bits & OperatorMASK) >> OperatorSHIFT) == EQUAL_EQUAL;", "+\t\t// check if either is a method annotated @NonNull and compared to null:", "-\t\t\tleftNonNullChecked = scope.problemReporter().expressionNonNullComparison(this.left, checkForNull);", "+\t\t\tif (this.left instanceof MessageSend) { ", "+\t\t\t\tscope.problemReporter().messageSendRedundantCheckOnNonNull(((MessageSend) this.left).binding, this.left);", "+\t\t\t}", "+\t\t\t// TODO: handle all kinds of expressions (cf. also https://bugs.eclipse.org/364326)", "-\t\t\trightNonNullChecked = scope.problemReporter().expressionNonNullComparison(this.right, checkForNull);", "-\t\t}", "-\t\t", "-\t\tif (!leftNonNullChecked) {", "-\t\t\tVariableBinding var = this.left.variableBinding(scope);", "-\t\t\tif (var != null && (var.type.tagBits & TagBits.IsBaseType) == 0) {", "-\t\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, var, rightStatus, this.left);", "+\t\t\tif (this.right instanceof MessageSend) {", "+\t\t\t\tscope.problemReporter().messageSendRedundantCheckOnNonNull(((MessageSend) this.right).binding, this.right);", "-\t\t}", "-\t\tif (!rightNonNullChecked) {", "-\t\t\tVariableBinding var = this.right.variableBinding(scope);", "-\t\t\tif (var != null && (var.type.tagBits & TagBits.IsBaseType) == 0) {", "-\t\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, var, leftStatus, this.right);", "-\t\t\t}", "+\t\t\t// TODO: handle all kinds of expressions (cf. also https://bugs.eclipse.org/364326)", "-\t\tif (leftNonNullChecked || rightNonNullChecked) {", "-\t\t\t// above checks have not propagated unrechable into the corresponding branch, do it now:", "-\t\t\tif (checkForNull) {", "-\t\t\t\tinitsWhenTrue.setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t} else {", "-\t\t\t\tinitsWhenFalse.setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t}", "+\t\tVariableBinding var = this.left.variableBinding(scope);", "+\t\tif (var != null && (var.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, var, rightStatus, this.left);", "+\t\t}", "+\t\tvar = this.right.variableBinding(scope);", "+\t\tif (var != null && (var.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, var, leftStatus, this.right);"]}], "num": 15876}
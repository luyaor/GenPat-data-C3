{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc55d4b70970126883f7a1be3c1a6d88", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5856fad4cc1aa2df69fa616f4ea8f26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java", "commitBeforeChange": "2452619bb5034f0a0ba9b6e9747cd6db77b2eb53", "commitAfterChange": "8d4f2ebabb0e50507cab6ea5f17acab787cfb10b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static Test suiteForComplianceLevel(String complianceLevel, Class setupClass, ArrayList testClasses)", "signatureAfterChange": " \tprivate static Test buildComplianceSetupTestSuite(List testClasses, Class setupClass, String complianceLevel)", "diff": ["-\tpublic static Test suiteForComplianceLevel(String complianceLevel, Class setupClass, ArrayList testClasses) {", "-\t\tTestSuite suite;", "-\t\tif (testClasses.size() == 1) {", "-\t\t\tsuite = new TestSuite((Class)testClasses.get(0), complianceLevel);", "-\t\t} else {", "-\t\t\tsuite = new TestSuite(complianceLevel);", "-\t\t\tfor (int i = 0, length = testClasses.size(); i < length; i++) {", "-\t\t\t\tClass testClass = (Class)testClasses.get(i);", "-\t\t\t\tTestSuite innerSuite = new TestSuite(testClass);", "-\t\t\t\tsuite.addTest(innerSuite);", "-\t\t\t}", "-\t\t}", "+\t */", "+\tprivate static Test buildComplianceSetupTestSuite(List testClasses, Class setupClass, String complianceLevel) {", "+\t\tTestSuite complianceSuite = new TestSuite(complianceLevel);", "+\t\tfor (int i=0, m=testClasses.size(); i<m ; i++) {", "+\t\t\tClass testClass = (Class)testClasses.get(i);", "+\t\t\tTestSuite suite = new TestSuite(testClass.getName());", "+\t\t\tList tests = buildTestsList(testClass);", "+\t\t\tfor (int index=0, size=tests.size(); index<size; index++) {", "+\t\t\t\tsuite.addTest((Test)tests.get(index));", "+\t\t\t}", "+\t\t\tcomplianceSuite.addTest(suite);", "+\t\t}", "+\t", "-\t\t\tTest setUp = (Test)constructor.newInstance(new Object[]{suite, complianceLevel});", "+\t\t\tTest setUp = (Test)constructor.newInstance(new Object[]{complianceSuite, complianceLevel});", "-", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcf4ec78dc8162753abcfdf194f42268", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "9969e29f774930c96f440be8a722cc700768757e", "commitAfterChange": "b5db65bfc72bbc853a6a1cc971b563564ea182d8", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "diff": ["-\t\tIPath potentialNestedOutput = null;", "+\t\tIPath potentialNestedOutput = null; // for error reporting purpose", "-\t\tif (potentialNestedOutput != null && sourceEntryCount > outputCount-1) {", "+\t\tif (sourceEntryCount <= outputCount-1) {", "+\t\t    allowNestingInOutputLocations[0] = true;", "+\t\t} else if (potentialNestedOutput != null) {", "-\t\t", "+", "-\t\t\tboolean epStartsWithProject = entryPath.segment(0).toString().equals(projectName);", "-\t\t\tString entryPathMsg = epStartsWithProject ? entryPath.removeFirstSegments(1).toString() : entryPath.makeRelative().toString();", "+\t\t\tboolean isProjectRelative = entryPath.segment(0).toString().equals(projectName);", "+\t\t\tString entryPathMsg = isProjectRelative ? entryPath.removeFirstSegments(1).toString() : entryPath.makeRelative().toString();", "-\t\t\tint index;", "-\t\t\tif ((index = Util.indexOfEnclosingPath(entryPath, outputLocations, outputCount)) != -1) {", "-\t\t\t\tif (!allowNestingInOutputLocations[index]) {", "-\t\t\t\t\t// allow nesting in project's output if all source entries have a custom output", "-\t\t\t\t\tif (index != 0 || sourceEntryCount > outputCount - 1) {", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestEntryInOutput\", entryPath.makeRelative().toString(), outputLocations[index].makeRelative().toString())); //$NON-NLS-1$", "-\t\t\t\t\t}", "+\t\t    for (int j = 0; j < outputCount; j++){", "+\t\t        if (allowNestingInOutputLocations[j]) continue;", "+\t\t        IPath currentOutput = outputLocations[j];", "+\t\t\t\tif (currentOutput.isPrefixOf(entryPath)) {", "+\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestEntryInOutput\", entryPath.makeRelative().toString(), currentOutput.makeRelative().toString())); //$NON-NLS-1$", "-\t\t\t}", "+\t\t    }\t\t\t", "-\t\t\tboolean epStartsWithProject = entryPath.segment(0).toString().equals(projectName);", "-\t\t\tString entryPathMsg = epStartsWithProject ? entryPath.removeFirstSegments(1).toString() : entryPath.makeRelative().toString();", "+\t\t\tboolean isProjectRelative = entryPath.segment(0).toString().equals(projectName);", "+\t\t\tString entryPathMsg = isProjectRelative ? entryPath.removeFirstSegments(1).toString() : entryPath.makeRelative().toString();"]}], "num": 25391}
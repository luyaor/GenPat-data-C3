{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58993b9bede29b879cd0f07461d28875", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2def12eb740e77f04e94bfdb7d40570b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "0c8d3633f61f58e086a6550fc6a80c1ca119e1ce", "commitAfterChange": "b38764da707cc96f96750b2abc87c30eb0ae9f0a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   protected void buildStructure(OpenableElementInfo info, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "   protected void buildStructure(OpenableElementInfo info, IProgressMonitor monitor) throws JavaModelException", "diff": ["+\t// add the info for this at the end, to ensure that a getInfo cannot reply null in case the LRU cache needs", "+\t// to be flushed. Might lead to performance issues.", "+\t// see PR 1G2K5S7: ITPJCORE:ALL - NPE when accessing source for a binary type", "+\tJavaModelManager.getJavaModelManager().putInfo(this, info);\t", "+", "-\t\tCompilationUnitProblemFinder.process(this, problemRequestor, monitor);", "+\t\tCompilationUnitProblemFinder.process(this, problemRequestor, monitor); // TODO: is the JavaModel lock taken here ? Can run client code", "-\t", "-\t// add the info for this at the end, to ensure that a getInfo cannot reply null in case the LRU cache needs", "-\t// to be flushed. Might lead to performance issues.", "-\t// see PR 1G2K5S7: ITPJCORE:ALL - NPE when accessing source for a binary type", "-\tJavaModelManager.getJavaModelManager().putInfo(this, info);\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46b78b38a6e2ad22958c882d51826e96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "895b1bbc42bc6ec924c8066f964f04fd4701ee79", "commitAfterChange": "67975c44c978fcc3c550a5b5ce1ec6de6e5d9bb1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "signatureAfterChange": " void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "diff": ["+\t// must retrieve member types in case superclass/interfaces need them", "+\tthis.memberTypes = NoMemberTypes;", "+\tIBinaryNestedType[] memberTypeStructures = binaryType.getMemberTypes();", "+\tif (memberTypeStructures != null) {", "+\t\tint size = memberTypeStructures.length;", "+\t\tif (size > 0) {", "+\t\t\tthis.memberTypes = new ReferenceBinding[size];", "+\t\t\tfor (int i = 0; i < size; i++)", "+\t\t\t\t// attempt to find each member type if it exists in the cache (otherwise - resolve it when requested)", "+\t\t\t\tthis.memberTypes[i] = environment.getTypeFromConstantPoolName(memberTypeStructures[i].getName(), 0, -1, false);", "+\t\t\tthis.tagBits |= \tHasUnresolvedMemberTypes;", "+\t\t}", "+\t}", "+", "-\t\t}", "-\t}", "-", "-\tthis.memberTypes = NoMemberTypes;", "-\tIBinaryNestedType[] memberTypeStructures = binaryType.getMemberTypes();", "-\tif (memberTypeStructures != null) {", "-\t\tint size = memberTypeStructures.length;", "-\t\tif (size > 0) {", "-\t\t\tthis.memberTypes = new ReferenceBinding[size];", "-\t\t\tfor (int i = 0; i < size; i++)", "-\t\t\t\t// attempt to find each member type if it exists in the cache (otherwise - resolve it when requested)", "-\t\t\t\tthis.memberTypes[i] = environment.getTypeFromConstantPoolName(memberTypeStructures[i].getName(), 0, -1, false);", "-\t\t\tthis.tagBits |= \tHasUnresolvedMemberTypes;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eda73f70c8d9f3a999a5bd863fa70b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "cdf5de17c4b4894114475066d881b44fd2d1352d", "commitAfterChange": "08504ba476b411d63330d4820dcef9b3032013d3", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \r \r private void initializeBuilder() throws CoreException", "signatureAfterChange": " \r \r private void initializeBuilder() throws CoreException", "diff": ["+\t// Flush the existing external files cache if this is the beginning of a build cycle\r", "+\tString projectName = this.currentProject.getName();\r", "+\tif (builtProjects == null || builtProjects.contains(projectName)) {\r", "+\t\tJavaModel.flushExternalFileCache();\r", "+\t\tbuiltProjects = new ArrayList();\r", "+\t}\r", "+\tbuiltProjects.add(projectName);\r", "+\t\r", "-\r", "-\t// Flush the existing external files cache if this is the beginning of a build cycle\r", "-\tString projectName = this.currentProject.getName();\r", "-\tif (builtProjects == null || builtProjects.contains(projectName)) {\r", "-\t\tJavaModel.flushExternalFileCache();\r", "-\t\tbuiltProjects = new ArrayList();\r", "-\t}\r", "-\tbuiltProjects.add(projectName);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60777e1c858356da53c55b0a380bf24c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Flags.java", "commitBeforeChange": "15cb47257592351618c0f415edc117a6b315a803", "commitAfterChange": "e6029c8b1adfe1296ee554ed42f00e5a663cecbf", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic static String toString(int flags)", "signatureAfterChange": " \tpublic static String toString(int flags)", "diff": ["-\t\tif (isStatic(flags))", "-\t\t\tsb.append(\"static \"); //$NON-NLS-1$", "+\t\tif (isDefaultMethod(flags))", "+\t\t\tsb.append(\"default \"); //$NON-NLS-1$", "+\t\tif (isStatic(flags))", "+\t\t\tsb.append(\"static \"); //$NON-NLS-1$", "-\t\tif (isNative(flags))", "-\t\t\tsb.append(\"native \"); //$NON-NLS-1$", "+\t\tif (isNative(flags))", "+\t\t\tsb.append(\"native \"); //$NON-NLS-1$", "+\t\tif (isStrictfp(flags))", "+\t\t\tsb.append(\"strictfp \"); //$NON-NLS-1$", "-\t\tif (isStrictfp(flags))", "-\t\t\tsb.append(\"strictfp \"); //$NON-NLS-1$", "-\t\tif (isDefaultMethod(flags))", "-\t\t\tsb.append(\"default \"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "862788d7daf3f8483b83d51a2f9cd232", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyTests.java", "commitBeforeChange": "57e05ac5c8db0c06028159bb169607bae2e0ec84", "commitAfterChange": "93b35a5a711d0edb75c141799c4443c91fb39f10", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " public void testNonExistingCU() throws JavaModelException", "signatureAfterChange": " public void testNonExistingCU() throws JavaModelException", "diff": ["-\t\t// isBasedOn()", "-\t\tassertTrue(\"Working copy should not be based on original resource\", !copy.isBasedOn(cu.getResource()));", "-\t\t", "+", "+\t\t// isBasedOn()", "+\t\tassertTrue(\"Working copy should not be based on original resource\", !copy.isBasedOn(cu.getResource()));", "+\t\t"]}], "num": 73035}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "458b8500abec78c2e4d252240d98ced9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b0c3365349a130af78d22cfa50bcb99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "dbb21f9a082cc8b4fc9a756e4b7778384b3f408c", "commitAfterChange": "bbd2ac48b173a123c7419ce013244d878b152c22", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void tearDownSuite() throws Exception", "signatureAfterChange": " public void tearDownSuite() throws Exception", "diff": ["+\tif (OUTPUT_DIR != null) {", "+\t\tif (COMPARE) {", "+\t\t\tSystem.out.println(\"Comparison done with output files located in \"+OUTPUT_DIR);", "+\t\t}", "+\t}", "-\tint sFailures = this.failures.size();", "-\tint seFailures = this.expectedFailures.size();", "-\tint swFailures = this.whitespacesFailures.size();", "-\tint slwFailures = this.leadingWhitespacesFailures.size();", "-\tString failuresType = COMPARE != null ? \"than old formatter\" : \"when reformatting\";", "-\tif (sFailures > 0) {", "-\t\tSystem.out.println(sFailures+\" files has still different output while reformatting!\");", "-\t}", "-\tif (seFailures > 0) {", "-\t\tSystem.out.println(seFailures+\" files has still different output while reformatting due to old formatter bugs!\");", "-\t}", "-\tif (slwFailures == 0) {", "-\t\tSystem.out.println(\"No file has different line leading spaces \"+failuresType+\" :-)\");", "-\t} else {", "-\t\tSystem.out.println(slwFailures+\" files have different line leading spaces \"+failuresType+\"!\");", "-\t}", "-\tif (swFailures > 0) {", "-\t\tSystem.out.println(swFailures+\" files have different spaces \"+failuresType+\"!\");", "-\t}", "-\tif (this.changedHeaderFooter >0) {", "-\t\tSystem.out.println(this.changedHeaderFooter+\" differences in header/footer have been found\");", "-\t}", "-\tif (this.changedPreTags >0) {", "-\t\tSystem.out.println(this.changedPreTags+\" differences in <pre> tags (blank lines) have been found\");", "+\tint max = FAILURES.length;", "+\tfor (int i=0; i<max; i++) {", "+\t\tList failures = FAILURES[i].failures;", "+\t\tint size = failures.size();", "+\t\tif (size > 0) {", "+\t\t\tSystem.out.print(size);", "+\t\t\tSystem.out.print(\" file\");", "+\t\t\tif (size == 1) {", "+\t\t\t\tSystem.out.print(\" has \");", "+\t\t\t} else {", "+\t\t\t\tSystem.out.print(\"s have \");", "+\t\t\t}", "+\t\t\tSystem.out.print(FAILURES[i]);", "+\t\t\tSystem.out.println('!');", "+\t\t}", "-\tif (sFailures > 0) {", "-\t\tSystem.out.println(\"List of files with different output \"+failuresType+\":\");", "-\t\tfor (int i=0; i<sFailures; i++) {", "-\t\t\tSystem.out.println(\"\t- \"+this.failures.get(i));", "-\t\t}", "-\t}", "-\tif (seFailures > 0) {", "-\t\tSystem.out.println(\"List of files with different output \"+failuresType+\" (due to old formatter bugs):\");", "-\t\tfor (int i=0; i<seFailures; i++) {", "-\t\t\tSystem.out.println(\"\t- \"+this.expectedFailures.get(i));", "-\t\t}", "-\t}", "-\tif (slwFailures > 0) {", "-\t\tSystem.out.println(\"List of files with different line leading spaces \"+failuresType+\":\");", "-\t\tfor (int i=0; i<slwFailures; i++) {", "-\t\t\tSystem.out.println(\"\t- \"+this.leadingWhitespacesFailures.get(i));", "-\t\t}", "-\t}", "-\tif (swFailures > 0) {", "-\t\tSystem.out.println(\"List of files with different spaces \"+failuresType+\":\");", "-\t\tfor (int i=0; i<swFailures; i++) {", "-\t\t\tSystem.out.println(\"\t- \"+this.whitespacesFailures.get(i));", "+\tfor (int i=0; i<max; i++) {", "+\t\tList failures = FAILURES[i].failures;", "+\t\tint size = failures.size();", "+\t\tif (size > 0) {", "+\t\t\tSystem.out.println(\"List of file(s) with \"+FAILURES[i]+\":\");", "+\t\t\tfor (int j=0; j<size; j++) {", "+\t\t\t\tSystem.out.println(\"\t- \"+failures.get(j));", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d79a63f6093f31440700ec912b06e34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "50007b788c71b6aca4f5dbd4507152d8d8e0ca96", "commitAfterChange": "0d7bf900fea9cd1a54f008e97901ffa79f4d92cb", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t if (CompilerOptions.VERSION_1_4.equals(version)) {", "+\t\t\t// default is source 1.3 target 1.2 and compliance 1.4", "+\t\t\tif (CompilerOptions.VERSION_1_4.equals(version)) {", "+\t\tfinal Object sourceVersion = this.options.get(CompilerOptions.OPTION_Source);", "+\t\tfinal Object compliance = this.options.get(CompilerOptions.OPTION_Compliance);", "-\t\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Source)) >= ClassFileConstants.JDK1_6", "-\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_TargetPlatform)) < ClassFileConstants.JDK1_6){ ", "+\t\t\tfinal Object targetVersion = this.options.get(CompilerOptions.OPTION_TargetPlatform); ", "+\t\t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) >= ClassFileConstants.JDK1_6", "+\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(targetVersion) < ClassFileConstants.JDK1_6){ ", "-\t\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Source)) >= ClassFileConstants.JDK1_5", "-\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_TargetPlatform)) < ClassFileConstants.JDK1_5){ ", "+\t\t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) >= ClassFileConstants.JDK1_5", "+\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(targetVersion) < ClassFileConstants.JDK1_5){ ", "-\t   \t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Source)) >= ClassFileConstants.JDK1_4", "-\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_TargetPlatform)) < ClassFileConstants.JDK1_4){ ", "+\t   \t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) >= ClassFileConstants.JDK1_4", "+\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(targetVersion) < ClassFileConstants.JDK1_4){ ", "-\t\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_TargetPlatform))){ ", "+\t\t\tif (CompilerOptions.versionToJdkLevel(compliance) < CompilerOptions.versionToJdkLevel(targetVersion)){ ", "-\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_6)", "-\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_6) {", "+\t\tif (sourceVersion.equals(CompilerOptions.VERSION_1_6)", "+\t\t\t\t&& CompilerOptions.versionToJdkLevel(compliance) < ClassFileConstants.JDK1_6) {", "-\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_5)", "-\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_5) {", "+\t\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_5)", "+\t\t\t\t&& CompilerOptions.versionToJdkLevel(compliance) < ClassFileConstants.JDK1_5) {", "-\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)", "-\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_4) {", "+\t\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_4)", "+\t\t\t\t&& CompilerOptions.versionToJdkLevel(compliance) < ClassFileConstants.JDK1_4) {", "-\t\t\tif (this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\tif (compliance.equals(CompilerOptions.VERSION_1_3)) {", "-\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)) {", "-\t\t\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t} else if (compliance.equals(CompilerOptions.VERSION_1_4)) {", "+\t\t\t\tif (sourceVersion.equals(CompilerOptions.VERSION_1_3)) {", "-\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)) {", "+\t\t\t\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_4)) {", "-\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_5)) {", "-\t\t\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t} else if (compliance.equals(CompilerOptions.VERSION_1_5)) {", "+\t\t\t\tif (sourceVersion.equals(CompilerOptions.VERSION_1_3)) {", "-\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)) {", "+\t\t\t\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_4)) {", "-\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_5)) {", "+\t\t\t\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_5)) {", "-\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_6)) {", "-\t\t\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t} else if (compliance.equals(CompilerOptions.VERSION_1_6)) {", "+\t\t\t\tif (sourceVersion.equals(CompilerOptions.VERSION_1_3)) {", "-\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)) {", "+\t\t\t\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_4)) {", "-\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_5)) {", "+\t\t\t\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_5)) {", "-\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_6)) {", "+\t\t\t\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_6)) {"]}], "num": 55532}
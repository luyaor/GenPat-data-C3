{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d8a9b25f273100fc10d67ecb4247eac6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33e1e550df93bc9dcd527e1a84530d04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "3022496b74f0bbeccd974aa8b5d23fb3438cc799", "commitAfterChange": "0841b38e29c9b9a090c0d849b31ae1e8b6484d97", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tprivate void findLocalMethodDeclarations( \t\tchar[] methodName, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType)", "signatureAfterChange": " \tprivate void findLocalMethodDeclarations( \t\tchar[] methodName, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean exactMatch, \t\tReferenceBinding receiverType)", "diff": ["-\t\tboolean onlyStaticMethods,", "-\t\t\tif(method.isStatic()) {", "-\t\t\t\tif(receiverType.isAnonymousType()) continue next;", "-\t\t\t\t", "-\t\t\t\tif(receiverType.isMemberType() && !receiverType.isStatic()) continue next;", "-\t\t\t\t", "-\t\t\t\tif(receiverType.isLocalType()) continue next;", "-\t\t\t} else  {", "-\t\t\t\tif(onlyStaticMethods) continue next;", "-\t\t\t}", "+\t\t\tif(method.isStatic()) continue next;", "-\t\t\trelevance += computeRelevanceForStaticOveride(method.isStatic());", "+\t\t\trelevance += R_METHOD_OVERIDE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4645e8225d5dad3c055f0fc4a50672f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "c96ea754cbc1843e6373572c9a41527df8e971a2", "commitAfterChange": "b026aefdcbffec474ae6cafef5ea7136332c257c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private Binding findOnDemandImport(char[][] compoundName, boolean isStaticImport)", "signatureAfterChange": " private Binding findImport(char[][] compoundName, int length)", "diff": ["-private Binding findOnDemandImport(char[][] compoundName, boolean isStaticImport) {", "+private Binding findImport(char[][] compoundName, int length) {", "-\tint length = compoundName.length;", "-\t\tif (isStaticImport) {", "-\t\t\t// does look for inherited member types unlike non static imports", "-\t\t\ttype = findMemberType(name, type);", "-\t\t\tif (type == null || !type.isStatic())", "-\t\t\t\treturn new ProblemReferenceBinding(CharOperation.subarray(compoundName, 0, i), NotFound);", "-\t\t} else {", "-\t\t\t// does not look for inherited member types on purpose, only immediate members", "-\t\t\ttype = type.getMemberType(name);", "-\t\t\tif (type == null)", "-\t\t\t\treturn new ProblemReferenceBinding(CharOperation.subarray(compoundName, 0, i), NotFound);", "-\t\t}", "+\t\t// does not look for inherited member types on purpose, only immediate members", "+\t\ttype = type.getMemberType(name);", "+\t\tif (type == null)", "+\t\t\treturn new ProblemReferenceBinding(CharOperation.subarray(compoundName, 0, i), NotFound);"]}], "num": 19694}
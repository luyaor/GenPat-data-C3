{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e0b382a3575c27cea941106d28bc8d6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "deb8a2ceb19ea11dd338f76911c02901", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "4043b8a88c35a2c1612858cff67743727f25247b", "commitAfterChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void testMultipleWildcardUnboundStringPattern05() throws CoreException", "signatureAfterChange": "  \tpublic void testSingleParameterizedElementPattern01() throws CoreException", "diff": ["+\tpublic void testSingleParameterizedElementPattern01() throws CoreException {", "+\t\tICompilationUnit unit = getCompilationUnit(\"JavaSearch15/src/g1/t/s/ref/R1.java\");", "+\t\t// selected text is: \"Generic<Exception>\"", "+\t\tParameterizedSourceType type = selectParameterizedSourceType(unit, \"selected node->\"); //$NON-NLS-1$", "+\t\tIJavaSearchScope scope = getJavaSearchScope15(\"g1.t\", true /* add all subpackages */);", "+\t\tsearch(type, REFERENCES, scope, resultCollector);", "+\t\tassertSearchResults(", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_exc [Generic<Exception>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_wld [Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_thr [Generic<? extends Throwable>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_run [Generic<? super RuntimeException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [g1.t.s.def.Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_exc [g1.t.s.def.Generic<Exception>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_wld [g1.t.s.def.Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_thr [g1.t.s.def.Generic<? extends Throwable>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_run [g1.t.s.def.Generic<? super RuntimeException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic<Exception>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [g1.t.s.def.Generic<Exception>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [g1.t.s.def.Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [g1.t.s.def.Generic<? extends Throwable>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [g1.t.s.def.Generic<? super RuntimeException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic<Exception>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic<? extends Throwable>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [g1.t.s.def.Generic<Exception>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [g1.t.s.def.Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [g1.t.s.def.Generic<? extends Throwable>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [g1.t.s.def.Generic<? super RuntimeException>] EXACT_MATCH\",", "+\t\t\tresultCollector);", "+\t}", "-\t// TODO [search] try to have a better match selection", "-\t\tIJavaSearchScope scope = getJavaSearchScope15(\"g1.t\", true /* add all subpackages */);", "-\t\tsearch(\"Generic<?, ?, ?>.MemberGeneric\", TYPE, REFERENCES, scope, resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [MemberGeneric<Object, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric<Exception, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric<? extends Throwable, ? extends Exception, ? extends RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [MemberGeneric<Object, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric<Exception, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric<? extends Throwable, ? extends Exception, ? extends RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic.MemberGeneric] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef0de9d7326cfd42fd58f0df01f431fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "258488aa3b2262f0e872853fc9eb6924859897e3", "commitAfterChange": "f1b24eaca7583818fb45648b70a2b62fb1ff278d", "methodNumberBeforeChange": 175, "methodNumberAfterChange": 175, "signatureBeforeChange": " public void _test170()", "signatureAfterChange": " public void test170()", "diff": ["-public void _test170() {", "-\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\", // =================", "-\t\t\t\t\"public enum X {\\n\" + ", "-\t\t\t\t\"\tMonday(\\\"Mon\\\", X.OFFSET + 0),\\n\" + ", "-\t\t\t\t\"\tTuesday(\\\"Tue\\\", X.OFFSET + 1);\\n\" + ", "-\t\t\t\t\"\tpublic static final int OFFSET = 0;\\n\" + ", "-\t\t\t\t\"\tX(String abbr, int index) {}\\n\" + ", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\t\t\"\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\", // =================", "-\t\t\t},", "-\t\t\t\"SUCCESS\");", "+public void test170() {", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\", // =================", "+\t\t\t\"enum Days {\\n\" + ", "+\t\t\t\"    Monday(\\\"Mon\\\", Days.OFFSET + 0),    // should not complain\\n\" + ", "+\t\t\t\"    Tuesday(\\\"Tue\\\", Days.Wednesday.hashCode()),   // should complain since enum constant\\n\" + ", "+\t\t\t\"    Wednesday(\\\"Wed\\\", OFFSET + 2);   // should complain since unqualified\\n\" + ", "+\t\t\t\"    public static final int OFFSET = 0;  // cannot move this above, else more errors\\n\" + ", "+\t\t\t\"    Days(String abbr, int index) {\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"class X {\\n\" + ", "+\t\t\t\"    public static final int FOO = X.OFFSET + 0;\\n\" + ", "+\t\t\t\"    public static final int BAR = OFFSET + 1;\\n\" + ", "+\t\t\t\"    public static final int OFFSET = 0;  // cannot move this above, else more errors\\n\" + ", "+\t\t\t\"}\\n\", // =================", "+\t\t},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\"\tTuesday(\\\"Tue\\\", Days.Wednesday.hashCode()),   // should complain since enum constant\\n\" + ", "+\t\t\"\t                    ^^^^^^^^^\\n\" + ", "+\t\t\"Cannot reference a field before it is defined\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tWednesday(\\\"Wed\\\", OFFSET + 2);   // should complain since unqualified\\n\" + ", "+\t\t\"\t                 ^^^^^^\\n\" + ", "+\t\t\"Cannot reference a field before it is defined\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\"\tpublic static final int BAR = OFFSET + 1;\\n\" + ", "+\t\t\"\t                              ^^^^^^\\n\" + ", "+\t\t\"Cannot reference a field before it is defined\\n\" + ", "+\t\t\"----------\\n\");"]}], "num": 15194}
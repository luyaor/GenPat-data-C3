{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "632a49fb27e6e4d1d87ceb20eb46449c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32d39c01a1c925c89a503f8ee1e655ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "9685ea34715200abe2207a7a1bff9fe219445856", "commitAfterChange": "b3eba5f407c17f8e78303770c9c0ffb6bfab4118", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic Main(PrintWriter outWriter, PrintWriter errWriter, boolean systemExitWhenFinished)", "signatureAfterChange": "  \tpublic Main(PrintWriter outWriter, PrintWriter errWriter, boolean systemExitWhenFinished)", "diff": ["-\t\toptions = new Hashtable();", "-\t\toptions.put(", "-\t\t\tCompilerOptions.OPTION_LocalVariableAttribute,", "-\t\t\tCompilerOptions.DO_NOT_GENERATE);", "-\t\toptions.put(", "-\t\t\tCompilerOptions.OPTION_LineNumberAttribute,", "-\t\t\tCompilerOptions.GENERATE);", "-\t\toptions.put(", "-\t\t\tCompilerOptions.OPTION_SourceFileAttribute,", "-\t\t\tCompilerOptions.GENERATE);", "-\t\toptions.put(", "-\t\t\tCompilerOptions.OPTION_PreserveUnusedLocal,", "-\t\t\tCompilerOptions.OPTIMIZE_OUT);", "-\t\toptions.put(", "-\t\t\tCompilerOptions.OPTION_ReportUnreachableCode,", "-\t\t\tCompilerOptions.ERROR);", "-\t\toptions.put(CompilerOptions.OPTION_ReportInvalidImport, CompilerOptions.ERROR);", "-\t\toptions.put(", "-\t\t\tCompilerOptions.OPTION_ReportOverridingPackageDefaultMethod,", "-\t\t\tCompilerOptions.WARNING);", "-\t\toptions.put(", "-\t\t\tCompilerOptions.OPTION_ReportMethodWithConstructorName,", "-\t\t\tCompilerOptions.WARNING);", "-\t\toptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);", "-\t\toptions.put(", "-\t\t\tCompilerOptions.OPTION_ReportHiddenCatchBlock,", "-\t\t\tCompilerOptions.WARNING);", "-\t\toptions.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.IGNORE);", "-\t\toptions.put(", "-\t\t\tCompilerOptions.OPTION_ReportUnusedParameter,", "-\t\t\tCompilerOptions.IGNORE);", "-\t\toptions.put(", "-\t\t\tCompilerOptions.OPTION_ReportSyntheticAccessEmulation,", "-\t\t\tCompilerOptions.IGNORE);", "-\t\toptions.put(", "-\t\t\tCompilerOptions.OPTION_ReportNonExternalizedStringLiteral,", "-\t\t\tCompilerOptions.IGNORE);", "-\t\toptions.put(", "-\t\t\tCompilerOptions.OPTION_ReportAssertIdentifier,", "-\t\t\tCompilerOptions.IGNORE);", "-\t\toptions.put(", "-\t\t\tCompilerOptions.OPTION_Compliance,", "-\t\t\tCompilerOptions.VERSION_1_3);", "-\t\toptions.put(", "-\t\t\tCompilerOptions.OPTION_Source,", "-\t\t\tCompilerOptions.VERSION_1_3);", "-\t\toptions.put(", "-\t\t\tCompilerOptions.OPTION_TargetPlatform,", "-\t\t\tCompilerOptions.VERSION_1_1);", "-\t\toptions.put(", "-\t\t\tCompilerOptions.OPTION_ReportNoImplicitStringConversion,", "-\t\t\tCompilerOptions.WARNING);", "-\t\toptions.put(", "-\t\t\tCompilerOptions.OPTION_ReportStaticAccessReceiver,", "-\t\t\tCompilerOptions.WARNING);\t\t\t", "-\t\toptions.put(", "-\t\t\tCompilerOptions.OPTION_ReportIncompatibleNonInheritedInterfaceMethod,", "-\t\t\tCompilerOptions.WARNING);", "-\t\toptions.put(", "-\t\t\tCompilerOptions.OPTION_ReportUnusedPrivateMember,", "-\t\t\tCompilerOptions.IGNORE);", "+\t\tthis.options = getDefaultOptions();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80b2003315bcf7ddadb2674d16679885", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "c9f8678d902ff26bed49cb8c584175946154d27d", "commitAfterChange": "d1ebbec671e9a9d01699a83b7f5d2a928487175e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public static void compile(String commandLine, PrintWriter writer)", "signatureAfterChange": "\r public static void compile(String commandLine, PrintWriter writer)", "diff": ["-\tint count = 0;\r", "-\tString[] argv = new String[10];\r", "-\tint startIndex = 0;\r", "-\tint lastIndex = commandLine.indexOf('\"');\r", "-\tboolean insideQuotes = false;\r", "-\tboolean insideClasspath = false;\r", "-\tStringTokenizer tokenizer;\r", "-\twhile (lastIndex != -1) {\r", "-\t\tif (insideQuotes) {\r", "-\t\t\tif (count == argv.length) {\r", "-\t\t\t\tSystem.arraycopy(argv, 0, (argv = new String[count * 2]), 0, count);\r", "-\t\t\t}\r", "-\t\t\tif (insideClasspath) {\r", "-\t\t\t\targv[count-1] += commandLine.substring(startIndex, lastIndex);\r", "-\t\t\t\tinsideClasspath = false;\r", "-\t\t\t} else {\r", "-\t\t\t\targv[count++] = commandLine.substring(startIndex, lastIndex);\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\tString subCommandLine = commandLine.substring(startIndex, lastIndex);\r", "-\t\t\tif (subCommandLine.equals(File.pathSeparator)) {\r", "-\t\t\t\targv[count-1] += File.pathSeparator;\r", "-\t\t\t\tinsideClasspath = true;\r", "-\t\t\t} else {\r", "-\t\t\t\ttokenizer = new StringTokenizer(subCommandLine, File.pathSeparator + \" \"); //$NON-NLS-1$\r", "-\t\t\t\twhile (tokenizer.hasMoreTokens()) {\r", "-\t\t\t\t\tif (count == argv.length) {\r", "-\t\t\t\t\t\tSystem.arraycopy(argv, 0, (argv = new String[count * 2]), 0, count);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\targv[count++] = tokenizer.nextToken();\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tstartIndex = lastIndex + 1;\r", "-\t\tlastIndex = commandLine.indexOf('\"', startIndex);\r", "-\t\tinsideQuotes = !insideQuotes;\r", "-\t}\r", "-\tif (startIndex == 0) {\r", "-\t\ttokenizer = new StringTokenizer(commandLine);\r", "-\t\twhile (tokenizer.hasMoreTokens()) {\r", "-\t\t\tif (count == argv.length) {\r", "-\t\t\t\tSystem.arraycopy(argv, 0, (argv = new String[count * 2]), 0, count);\r", "-\t\t\t}\r", "-\t\t\targv[count++] = tokenizer.nextToken();\r", "-\t\t}\r", "-\t} else {\r", "-\t\tif (startIndex + 1 <= commandLine.length()) {\r", "-\t\t\tif (insideQuotes) {\r", "-\t\t\t\tif (count == argv.length) {\r", "-\t\t\t\t\tSystem.arraycopy(argv, 0, (argv = new String[count * 2]), 0, count);\r", "-\t\t\t\t}\r", "-\t\t\t\targv[count++] = commandLine.substring(startIndex, commandLine.length());\r", "-\t\t\t} else {\r", "-\t\t\t\ttokenizer = new StringTokenizer(commandLine.substring(startIndex, commandLine.length()), File.pathSeparator + \" \"); //$NON-NLS-1$\r", "-\t\t\t\twhile (tokenizer.hasMoreTokens()) {\r", "-\t\t\t\t\tif (count == argv.length) {\r", "-\t\t\t\t\t\tSystem.arraycopy(argv, 0, (argv = new String[count * 2]), 0, count);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\targv[count++] = tokenizer.nextToken();\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\tSystem.arraycopy(argv, 0, argv = new String[count], 0, count);\r", "-\tnew Main(writer, false).compile(argv);\r", "-}\r", "+\tnew Main(writer, false).compile(tokenize(commandLine));\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9398fcdcae86b2e1e0bbd3fc1d92aa3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "64c79aaade93cc6bf9061f58a0917e55ce5f44d7", "commitAfterChange": "0f30dd165e42ed7c89f5ae15972d54606f639fe9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t\tObject[] entries = options.entrySet().toArray();", "-\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "-\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "-\t\t\t\t\tif (!(entry.getKey() instanceof String))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tif (!(entry.getValue() instanceof String))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "-\t\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tdisableWarnings();", "-\t\t\t\t\tObject[] entries = options.entrySet().toArray();", "-\t\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "-\t\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "-\t\t\t\t\t\tif (!(entry.getKey() instanceof String))", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\tif (!(entry.getValue() instanceof String))", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "-\t\t\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\t\t\tdisableWarnings();", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportOverridingPackageDefaultMethod,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportMethodWithConstructorName,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportDeprecation, ", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportHiddenCatchBlock,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedLocal, ", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedParameter,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put( ", "-\t\t\t\t\tCompilerOptions.OPTION_ReportSyntheticAccessEmulation,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportNonExternalizedStringLiteral,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportAssertIdentifier,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedImport,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportStaticAccessReceiver,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportNoEffectAssignment,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportNoImplicitStringConversion,", "-\t\t\t\t\tCompilerOptions.IGNORE);\t\t\t\t", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportIncompatibleNonInheritedInterfaceMethod,", "-\t\t\t\t\tCompilerOptions.IGNORE);\t\t\t\t", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedPrivateMember,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportLocalVariableHiding,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportFieldHiding,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportSpecialParameterHidingField,", "-\t\t\t\t\tCompilerOptions.DISABLED);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportSuperfluousSemicolon,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_TaskTags,", "-\t\t\t\t\t\"\"); //$NON-NLS-1$", "+\t\t\t\tdisableWarnings();", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportStaticAccessReceiver,", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportNonStaticAccessToStatic,", "+\t\t\t\t\t\t\tCompilerOptions.WARNING);", "+\t\t\t\t\t} else if (token.equals(\"indirectStatic\")) { //$NON-NLS-1$", "+\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportIndirectStaticAccess,"]}], "num": 10229}
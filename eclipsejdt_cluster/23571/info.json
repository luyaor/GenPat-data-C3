{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b107b6d695aba2734c2b8d76fe058ed", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "009c397d9c84d8dfc681babbedc41c93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8f906774856d3fb8be48e8c1fa76527878a0f865", "commitAfterChange": "ecf6de5abf72d6130a58d26da044687c85216430", "methodNumberBeforeChange": 785, "methodNumberAfterChange": 785, "signatureBeforeChange": " public void test779()", "signatureAfterChange": " public void test779()", "diff": ["+\t", "+\tString expectedOutput =", "+\t\t\t\"  // Method descriptor #29 (I)Ljava/lang/Object;\\n\" + ", "+\t\t\t\"  // Stack: 2, Locals: 2\\n\" + ", "+\t\t\t\"  public bridge synthetic Object get(int arg);\\n\" + ", "+\t\t\t\"    0  aload_0\\n\" + ", "+\t\t\t\"    1  iload_1\\n\" + ", "+\t\t\t\"    2  invokevirtual X$1.get(int) : java.lang.String  [37]\\n\" + ", "+\t\t\t\"    5  areturn\\n\" + ", "+\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\"        [pc: 0, line: 1]\\n\";", "+\t", "+\t// check no unnecessary checkcast on bridge method for X$1", "+\ttry {", "+\t\tFile f = new File(OUTPUT_DIR + File.separator + \"X$1.class\");", "+\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);", "+\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "+\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", ClassFileBytesDisassembler.DETAILED);", "+\t\tint index = result.indexOf(expectedOutput);", "+\t\tif (index == -1 || expectedOutput.length() == 0) {", "+\t\t\tSystem.out.println(Util.displayString(result, 3));", "+\t\t}", "+\t\tif (index == -1) {", "+\t\t\tassertEquals(\"Wrong contents\", expectedOutput, result);", "+\t\t}", "+\t} catch (org.eclipse.jdt.core.util.ClassFormatException e) {", "+\t\tassertTrue(false);", "+\t} catch (IOException e) {", "+\t\tassertTrue(false);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87e1f99f77c98b78196e74069977a419", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "bfcf9b26d6e4144cb0c2640d02cc59095e635771", "commitAfterChange": "dcd57d09638877b63364224680d27d9dec37d5fa", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public void __test034()", "signatureAfterChange": " public void test037()", "diff": ["-public void __test034() { ", "+public void test037() { ", "-\t// TODO need to add disassembled code to check that the declaring class is ArrayList", "+", "+\tString expectedOutput =", "+\t\t\"  // Method descriptor #43 (Ljava/util/ArrayList;)V\\n\" + ", "+\t\t\"  // Signature: <T:Ljava/util/ArrayList<Ljava/lang/String;>;>(TT;)V\\n\" + ", "+\t\t\"  // Stack: 2, Locals: 3\\n\" + ", "+\t\t\"  public static void foo(ArrayList t);\\n\" + ", "+\t\t\"     0  aload_0 [t]\\n\" + ", "+\t\t\"     1  invokevirtual java.util.ArrayList.iterator() : java.util.Iterator [45]\\n\" + ", "+\t\t\"     4  astore_2\\n\" + ", "+\t\t\"     5  goto 25\\n\" + ", "+\t\t\"     8  aload_2\\n\" + ", "+\t\t\"     9  invokeinterface java.util.Iterator.next() : java.lang.Object [49] [nargs: 1]\\n\" + ", "+\t\t\"    14  checkcast java.lang.String [19]\\n\" + ", "+\t\t\"    17  astore_1 [s]\\n\" + ", "+\t\t\"    18  getstatic java.lang.System.out : java.io.PrintStream [55]\\n\" + ", "+\t\t\"    21  aload_1 [s]\\n\" + ", "+\t\t\"    22  invokevirtual java.io.PrintStream.print(java.lang.String) : void [61]\\n\" + ", "+\t\t\"    25  aload_2\\n\" + ", "+\t\t\"    26  invokeinterface java.util.Iterator.hasNext() : boolean [67] [nargs: 1]\\n\" + ", "+\t\t\"    31  ifne 8\\n\" + ", "+\t\t\"    34  return\\n\" + ", "+\t\t\"      Line numbers:\\n\" + ", "+\t\t\"        [pc: 0, line: 8]\\n\" + ", "+\t\t\"        [pc: 18, line: 9]\\n\" + ", "+\t\t\"        [pc: 25, line: 8]\\n\" + ", "+\t\t\"        [pc: 34, line: 10]\\n\" + ", "+\t\t\"      Local variable table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 35] local: t index: 0 type: java.util.ArrayList\\n\" + ", "+\t\t\"        [pc: 18, pc: 34] local: s index: 1 type: java.lang.String\\n\" + ", "+\t\t\"      Local variable type table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 35] local: t index: 0 type: T\\n\";", "+\t", "+\ttry {", "+\t\tFile f = new File(OUTPUT_DIR + File.separator + \"X.class\");", "+\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);", "+\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "+\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", ClassFileBytesDisassembler.DETAILED);", "+\t\tint index = result.indexOf(expectedOutput);", "+\t\tif (index == -1 || expectedOutput.length() == 0) {", "+\t\t\tSystem.out.println(Util.displayString(result, 3));", "+\t\t}", "+\t\tif (index == -1) {", "+\t\t\tassertEquals(\"Wrong contents\", expectedOutput, result);", "+\t\t}", "+\t} catch (org.eclipse.jdt.core.util.ClassFormatException e) {", "+\t\tassertTrue(false);", "+\t} catch (IOException e) {", "+\t\tassertTrue(false);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b23630a9822bfdead03046df55218bc9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "bfcf9b26d6e4144cb0c2640d02cc59095e635771", "commitAfterChange": "dcd57d09638877b63364224680d27d9dec37d5fa", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void __test033()", "signatureAfterChange": " public void test036()", "diff": ["-public void __test033() { ", "+public void test036() { ", "-\t// TODO need to add disassembled code to check that the declaring class is Iterable", "+\tString expectedOutput =", "+\t\t\"  // Method descriptor #37 (Ljava/lang/Runnable;)V\\n\" + ", "+\t\t\"  // Signature: <T::Ljava/lang/Runnable;:Ljava/lang/Iterable<Ljava/lang/String;>;>(TT;)V\\n\" + ", "+\t\t\"  // Stack: 2, Locals: 4\\n\" + ", "+\t\t\"  public void foo(Runnable t);\\n\" + ", "+\t\t\"     0  aload_1 [t]\\n\" + ", "+\t\t\"     1  invokeinterface java.lang.Iterable.iterator() : java.util.Iterator [39] [nargs: 1]\\n\" + ", "+\t\t\"     6  astore_3\\n\" + ", "+\t\t\"     7  goto 27\\n\" + ", "+\t\t\"    10  aload_3\\n\" + ", "+\t\t\"    11  invokeinterface java.util.Iterator.next() : java.lang.Object [43] [nargs: 1]\\n\" + ", "+\t\t\"    16  checkcast java.lang.String [18]\\n\" + ", "+\t\t\"    19  astore_2 [s]\\n\" + ", "+\t\t\"    20  getstatic java.lang.System.out : java.io.PrintStream [49]\\n\" + ", "+\t\t\"    23  aload_2 [s]\\n\" + ", "+\t\t\"    24  invokevirtual java.io.PrintStream.print(java.lang.String) : void [55]\\n\" + ", "+\t\t\"    27  aload_3\\n\" + ", "+\t\t\"    28  invokeinterface java.util.Iterator.hasNext() : boolean [61] [nargs: 1]\\n\" + ", "+\t\t\"    33  ifne 10\\n\" + ", "+\t\t\"    36  return\\n\" + ", "+\t\t\"      Line numbers:\\n\" + ", "+\t\t\"        [pc: 0, line: 7]\\n\" + ", "+\t\t\"        [pc: 20, line: 8]\\n\" + ", "+\t\t\"        [pc: 27, line: 7]\\n\" + ", "+\t\t\"        [pc: 36, line: 9]\\n\" + ", "+\t\t\"      Local variable table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 37] local: this index: 0 type: X\\n\" + ", "+\t\t\"        [pc: 0, pc: 37] local: t index: 1 type: java.lang.Runnable\\n\" + ", "+\t\t\"        [pc: 20, pc: 36] local: s index: 2 type: java.lang.String\\n\" + ", "+\t\t\"      Local variable type table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 37] local: t index: 1 type: T\\n\";", "+\t", "+\ttry {", "+\t\tFile f = new File(OUTPUT_DIR + File.separator + \"X.class\");", "+\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);", "+\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "+\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", ClassFileBytesDisassembler.DETAILED);", "+\t\tint index = result.indexOf(expectedOutput);", "+\t\tif (index == -1 || expectedOutput.length() == 0) {", "+\t\t\tSystem.out.println(Util.displayString(result, 3));", "+\t\t}", "+\t\tif (index == -1) {", "+\t\t\tassertEquals(\"Wrong contents\", expectedOutput, result);", "+\t\t}", "+\t} catch (org.eclipse.jdt.core.util.ClassFormatException e) {", "+\t\tassertTrue(false);", "+\t} catch (IOException e) {", "+\t\tassertTrue(false);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc386330b210a8d460d7f6c8580166f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6781b5445d9813f939573ded9d37ee82c9dbbd15", "commitAfterChange": "6989e5bb4ed8f3be37ea69298930332629e9b475", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": "\t\t \t \tpublic void test103()", "signatureAfterChange": " \tpublic void test103()", "diff": ["-\t", "+\t//https://bugs.eclipse.org/bugs/show_bug.cgi?id=85303", "-\t}\t\t\t", "+\t\tString expectedOutput =", "+\t\t\t\"  // Method descriptor  #25 ([Ljava/lang/String;)V\\n\" + ", "+\t\t\t\"  // Stack: 4, Locals: 2\\n\" + ", "+\t\t\t\"  public static void main(String[] args);\\n\" + ", "+\t\t\t\"     0  new X [2]\\n\" + ", "+\t\t\t\"     3  dup\\n\" + ", "+\t\t\t\"     4  new BX [27]\\n\" + ", "+\t\t\t\"     7  dup\\n\" + ", "+\t\t\t\"     8  invokespecial BX.<init>()V [28]\\n\" + ", "+\t\t\t\"    11  invokespecial X.<init>(LAX;)V [30]\\n\" + ", "+\t\t\t\"    14  astore_1 [x]\\n\" + ", "+\t\t\t\"    15  aload_1 [x]\\n\" + ", "+\t\t\t\"    16  getfield X.t LAX; [17]\\n\" + ", "+\t\t\t\"    19  checkcast BX [27]\\n\" + ", "+\t\t\t\"    22  ldc <String \\\"SUCC\\\"> [32]\\n\" + ", "+\t\t\t\"    24  invokevirtual BX.foo(Ljava/lang/Object;)V [36]\\n\" + ", "+\t\t\t\"    27  aload_1 [x]\\n\" + ", "+\t\t\t\"    28  getfield X.t LAX; [17]\\n\" + ", "+\t\t\t\"    31  checkcast BX [27]\\n\" + ", "+\t\t\t\"    34  ldc <String \\\"ESS\\\"> [38]\\n\" + ", "+\t\t\t\"    36  invokevirtual BX.bar(Ljava/lang/Object;)V [41]\\n\" + ", "+\t\t\t\"    39  return\\n\" + ", "+\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\"        [pc: 0, line: 7]\\n\" + ", "+\t\t\t\"        [pc: 15, line: 8]\\n\" + ", "+\t\t\t\"        [pc: 27, line: 9]\\n\" + ", "+\t\t\t\"        [pc: 39, line: 10]\\n\" + ", "+\t\t\t\"      Local variable table:\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 40] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "+\t\t\t\"        [pc: 15, pc: 40] local: x index: 1 type: LX;\\n\" + ", "+\t\t\t\"      Local variable type table:\\n\" + ", "+\t\t\t\"        [pc: 15, pc: 40] local: x index: 1 type: LX<+LBX;>;\\n\";", "+\t\t", "+\t\ttry {", "+\t\t\tFile f = new File(OUTPUT_DIR + File.separator + \"X.class\");", "+\t\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);", "+\t\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "+\t\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", ClassFileBytesDisassembler.DETAILED);", "+\t\t\tint index = result.indexOf(expectedOutput);", "+\t\t\tif (index == -1 || expectedOutput.length() == 0) {", "+\t\t\t\tSystem.out.println(Util.displayString(result, 3));", "+\t\t\t}", "+\t\t\tif (index == -1) {", "+\t\t\t\tassertEquals(\"Wrong contents\", expectedOutput, result);", "+\t\t\t}", "+\t\t} catch (org.eclipse.jdt.core.util.ClassFormatException e) {", "+\t\t\tassertTrue(false);", "+\t\t} catch (IOException e) {", "+\t\t\tassertTrue(false);", "+\t\t}", "+\t}"]}], "num": 23571}
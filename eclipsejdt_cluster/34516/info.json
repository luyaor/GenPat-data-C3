{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d7de72752682b668699275cda1e765d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8321b6005e9e778642472ce666e9b229", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java", "commitBeforeChange": "56d15386ff3f6926c8a8ed7999b62e707baad4f8", "commitAfterChange": "8813bb7624a5282a5772eab0a6afafea0971ade6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tProjectCache getProjectCache(JavaProject project)", "signatureAfterChange": " \t \tProjectCache getProjectCache(JavaProject project)", "diff": ["-\t\t\tHashMap otherRoots = JavaModelManager.getJavaModelManager().deltaState.otherRoots;", "-\t\t\tHashtableOfArrayToObject fragmentsCache = new HashtableOfArrayToObject();", "-\t\t\tfor (int i = 0, length = roots.length; i < length; i++) {", "+\t\t\tHashMap rootInfos = JavaModelManager.getJavaModelManager().deltaState.roots;", "+\t\t\tHashMap pkgFragmentsCaches = new HashMap();", "+\t\t\tint length = roots.length;", "+\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tIJavaElement[] frags = null;", "-\t\t\t\ttry {", "-\t\t\t\t\tif (root.isArchive() ", "-\t\t\t\t\t\t\t&& !root.isOpen() ", "-\t\t\t\t\t\t\t&& otherRoots.get(((JarPackageFragmentRoot) root).jarPath) == null/*only if jar belongs to 1 project (https://bugs.eclipse.org/bugs/show_bug.cgi?id=161175)*/) {", "-\t\t\t\t\t\tJarPackageFragmentRootInfo info = new JarPackageFragmentRootInfo();", "-\t\t\t\t\t\t((JarPackageFragmentRoot) root).computeChildren(info, new HashMap());", "-\t\t\t\t\t\tfrags = info.children;", "-\t\t\t\t\t} else ", "-\t\t\t\t\t\tfrags = root.getChildren();", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t// root doesn't exist: ignore", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tfor (int j = 0, length2 = frags.length; j < length2; j++) {", "-\t\t\t\t\tPackageFragment fragment= (PackageFragment) frags[j];", "-\t\t\t\t\tString[] pkgName = fragment.names;", "-\t\t\t\t\tObject existing = fragmentsCache.get(pkgName);", "-\t\t\t\t\tif (existing == null || existing == NO_ROOTS) {", "-\t\t\t\t\t\tfragmentsCache.put(pkgName, root);", "-\t\t\t\t\t\t// ensure super packages (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=119161)", "-\t\t\t\t\t\t// are also in the map", "-\t\t\t\t\t\taddSuperPackageNames(pkgName, fragmentsCache);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (existing instanceof PackageFragmentRoot) {", "-\t\t\t\t\t\t\tfragmentsCache.put(pkgName, new IPackageFragmentRoot[] {(PackageFragmentRoot) existing, root});", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tIPackageFragmentRoot[] entry= (IPackageFragmentRoot[]) existing;", "-\t\t\t\t\t\t\tIPackageFragmentRoot[] copy= new IPackageFragmentRoot[entry.length + 1];", "-\t\t\t\t\t\t\tSystem.arraycopy(entry, 0, copy, 0, entry.length);", "-\t\t\t\t\t\t\tcopy[entry.length]= root;", "-\t\t\t\t\t\t\tfragmentsCache.put(pkgName, copy);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\t\tDeltaProcessor.RootInfo rootInfo = (DeltaProcessor.RootInfo) rootInfos.get(root.getPath());", "+\t\t\t\tif (rootInfo == null || rootInfo.project.equals(project)) {", "+\t\t\t\t\t// compute fragment cache", "+\t\t\t\t\tHashSetOfArray fragmentsCache = new HashSetOfArray();", "+\t\t\t\t\tinitializePackageNames(root, fragmentsCache);", "+\t\t\t\t\tpkgFragmentsCaches.put(root, fragmentsCache);", "-\t\t\tcache = new ProjectCache(roots, fragmentsCache, reverseMap);", "+\t\t\t", "+\t\t\tcache = new ProjectCache(roots, reverseMap, pkgFragmentsCaches);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc6a921cae233b472c959d3d6ee39a97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java", "commitBeforeChange": "56d15386ff3f6926c8a8ed7999b62e707baad4f8", "commitAfterChange": "8813bb7624a5282a5772eab0a6afafea0971ade6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tNameLookup newNameLookup(JavaProject project, ICompilationUnit[] workingCopies)", "signatureAfterChange": " \tNameLookup newNameLookup(JavaProject project, ICompilationUnit[] workingCopies)", "diff": ["+\t\tHashtableOfArrayToObject allPkgFragmentsCache = cache.allPkgFragmentsCache;", "+\t\tif (allPkgFragmentsCache == null) {", "+\t\t\tHashMap rootInfos = JavaModelManager.getJavaModelManager().deltaState.roots;", "+\t\t\tIPackageFragmentRoot[] allRoots = cache.allPkgFragmentRootsCache;", "+\t\t\tint length = allRoots.length;", "+\t\t\tallPkgFragmentsCache = new HashtableOfArrayToObject();", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tIPackageFragmentRoot root = allRoots[i];", "+\t\t\t\tDeltaProcessor.RootInfo rootInfo = (DeltaProcessor.RootInfo) rootInfos.get(root.getPath());", "+\t\t\t\tJavaProject rootProject = rootInfo == null ? project : rootInfo.project;", "+\t\t\t\tHashSetOfArray fragmentsCache;", "+\t\t\t\tif (rootProject.equals(project)) {", "+\t\t\t\t\t// retrieve package fragments cache from this project", "+\t\t\t\t\tfragmentsCache = (HashSetOfArray) cache.pkgFragmentsCaches.get(root);", "+\t\t\t\t} else {", "+\t\t\t\t\t// retrieve package fragments  cache from the root's project", "+\t\t\t\t\tProjectCache rootProjectCache;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\trootProjectCache = rootProject.getProjectCache();", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t// project doesn't exit", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tfragmentsCache = (HashSetOfArray) rootProjectCache.pkgFragmentsCaches.get(root);", "+\t\t\t\t}", "+\t\t\t\tObject[][] set = fragmentsCache.set;", "+\t\t\t\tfor (int j = 0, length2 = set.length; j < length2; j++) {", "+\t\t\t\t\tString[] pkgName = (String[]) set[j];", "+\t\t\t\t\tif (pkgName == null)", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tObject existing = allPkgFragmentsCache.get(pkgName);", "+\t\t\t\t\tif (existing == null || existing == NO_ROOTS) {", "+\t\t\t\t\t\tallPkgFragmentsCache.put(pkgName, root);", "+\t\t\t\t\t\t// ensure super packages (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=119161)", "+\t\t\t\t\t\t// are also in the map", "+\t\t\t\t\t\taddSuperPackageNames(pkgName, allPkgFragmentsCache);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (existing instanceof PackageFragmentRoot) {", "+\t\t\t\t\t\t\tallPkgFragmentsCache.put(pkgName, new IPackageFragmentRoot[] {(PackageFragmentRoot) existing, root});", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) existing;", "+\t\t\t\t\t\t\tint rootLength = roots.length;", "+\t\t\t\t\t\t\tSystem.arraycopy(roots, 0, roots = new IPackageFragmentRoot[rootLength+1], 0, rootLength);", "+\t\t\t\t\t\t\troots[rootLength] = root;", "+\t\t\t\t\t\t\tallPkgFragmentsCache.put(pkgName, roots);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcache.allPkgFragmentsCache = allPkgFragmentsCache;", "+\t\t}"]}], "num": 34516}
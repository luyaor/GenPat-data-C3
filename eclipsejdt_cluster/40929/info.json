{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45a7f789650cd2fa3afb3ca91fe73437", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fdb37b208157facf09e5286b02b7fb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "f18746495477338a9b83fca4f673d973bc3b28e9", "commitAfterChange": "b7c75d5af8ed9aa46f28be9d8bc08449dc25dc4e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tprivate APTResult runAPT( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv)", "signatureAfterChange": " \t \tprivate APTResult runAPT( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv, \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<char[]> sourceForFiles)", "diff": ["+\t", "+\tprivate APTResult runAPT(", "+\t\t\tfinal List<AnnotationProcessorFactory> factories,", "+\t\t\tfinal ProcessorEnvImpl processorEnv,", "+\t\t\tfinal List<IFile> filesWithMissingType,", "+\t\t\tfinal List<char[]> sourceForFiles) ", "+\t{", "-\t\t*/", "+\t\t\t*/", "+\t\t\tfinal IFile[] files = processorEnv.getFiles();", "-\t\t\tfor( int i=0, len=_filesToProcess.length; i<len; i++ ){", "-\t\t\t\tfinal Set<IFile> genFiles = gfm.getGeneratedFilesForParent( _filesToProcess[i] );", "+\t\t\tfor( int i=0, len=files.length; i<len; i++ ){", "+\t\t\t\tfinal Set<IFile> genFiles = gfm.getGeneratedFilesForParent( files[i] );", "-\t\t\tif( shouldDispatchToBatchProcessor(factories, processorEnv) )", "-\t\t\t\trunAPTInMixedMode(factories, processorEnv);", "+\t\t\t", "+\t\t\tboolean mixedModeDispatch = shouldDispatchToBatchProcessor(factories, processorEnv);", "+\t\t\tif( mixedModeDispatch )", "+\t\t\t\trunAPTInMixedMode(factories, processorEnv, filesWithMissingType, sourceForFiles);", "-\t\t\t\trunAPTInFileBasedMode(factories, processorEnv);", "+\t\t\t\trunAPTInFileBasedMode(factories, processorEnv, filesWithMissingType, sourceForFiles);", "-\t\t\tfor( int i=0, len=_filesToProcess.length; i<len; i++ ){", "+\t\t\tfor( int i=0, len=files.length; i<len; i++ ){", "-\t\t\t\t\t\t\t_filesToProcess[i], ", "+\t\t\t\t\t\t\tfiles[i], ", "-\t\t\t}", "-\t\t\t", "+\t\t\t}\t\t", "-\t\t\t\t\t\t\t\t\t\t\t  processorEnv.getProblems(), processorEnv.getSourcePathChanged() );", "+\t\t\t\t\t\t\t\t\t\t\t  processorEnv.getProblems(), ", "+\t\t\t\t\t\t\t\t\t\t\t  processorEnv.getSourcePathChanged(),", "+\t\t\t\t\t\t\t\t\t\t\t  processorEnv.hasGeneratedClassFiles() || processorEnv.hasGeneratedSourceFiles());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "735bbf34652e64d4b9a54cfe90d46896", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "dafcaed018e710da1dd812dc260b3ece76bb3e1d", "commitAfterChange": "a28933ffb03bd99d79fd8fce531cad43e24a3c4c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tprivate APTResult runAPT( \t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tfinal ProcessorEnvImpl processorEnv, \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<ICompilationUnit> unitsForFiles, \t\t\tfinal int internalRound)", "signatureAfterChange": " \t \tprivate APTResult runAPT( \t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tfinal ProcessorEnvImpl processorEnv, \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<ICompilationUnit> unitsForFiles, \t\t\tfinal int internalRound)", "diff": ["-\t\t\tfinal Set<IFile> lastGeneratedFiles = new HashSet<IFile>();", "-\t\t\tfor( int i=0, len=files.length; i<len; i++ ){", "-\t\t\t\tfinal Set<IFile> genFiles = gfm.getGeneratedFilesForParent( files[i] );", "-\t\t\t\tif( genFiles != null )", "-\t\t\t\t\tlastGeneratedFiles.addAll(genFiles);", "+\t\t\tfinal Map<IFile,Set<IFile>> lastGeneratedFiles = new HashMap<IFile,Set<IFile>>();", "+\t\t\tfor( IFile parentIFile : files ){", "+\t\t\t\tlastGeneratedFiles.put(parentIFile, gfm.getGeneratedFilesForParent(parentIFile));", "-\t\t\tfinal Set<IFile> allGeneratedFiles = new HashSet<IFile>();", "-\t\t\tSet<IFile> modifiedFiles = new HashSet<IFile>();", "-\t\t\tMap<IFile, Boolean> filesMap = processorEnv.getGeneratedFiles();", "-\t\t\tfor (Map.Entry<IFile, Boolean> entry : filesMap.entrySet()) {", "-\t\t\t\tallGeneratedFiles.add(entry.getKey());", "-\t\t\t\tif (entry.getValue()) {", "-\t\t\t\t\tmodifiedFiles.add(entry.getKey());", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tfinal Map<IFile, Set<IFile>> allGeneratedFiles = processorEnv.getAllGeneratedFiles();", "+\t\t\tfinal Set<IFile> modifiedGeneratedFiles = processorEnv.getModifiedGeneratedFiles();", "-\t\t\tfor( int i=0, len=files.length; i<len; i++ ){", "+\t\t\tfor( IFile file : files ){", "+\t\t\t\tSet<IFile> generatedFiles = allGeneratedFiles.get(file);", "+\t\t\t\tif (generatedFiles == null)", "+\t\t\t\t\tgeneratedFiles = Collections.emptySet();", "-\t\t\t\t\t\t\tfiles[i], ", "+\t\t\t\t\t\t\tfile, ", "-\t\t\t\t\t\t\tlastGeneratedFiles, ", "-\t\t\t\t\t\t\tallGeneratedFiles, ", "+\t\t\t\t\t\t\tlastGeneratedFiles.get(file), ", "+\t\t\t\t\t\t\tgeneratedFiles, ", "-\t\t\tAPTResult result = new APTResult( modifiedFiles, ", "+\t\t\tAPTResult result = new APTResult( modifiedGeneratedFiles, "]}], "num": 40929}
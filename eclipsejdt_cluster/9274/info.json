{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dcef4ee08555dfbf7419a067778ba0f0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6e447d7d7e87ab5377a1694fb25afbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "5a243353f41a52ea072e05a758d642d784b6e03c", "commitAfterChange": "bf7283aec4274d8cf1ac48f5497946a29ebdedf2", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprivate void disassemble(IClassFileReader classFileReader, char[] className, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": " \tprivate void disassemble(IClassFileReader classFileReader, char[] className, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["+\t\tchar[] methodHeader = null;", "-\t\t\t\tbuffer.append(Signature.toCharArray(signature, returnClassName(className, '.', COMPACT), getParameterNames(methodDescriptor, codeAttribute, accessFlags) , !checkMode(mode, COMPACT), false, isVarArgs));", "+\t\t\t\tmethodHeader = Signature.toCharArray(signature, returnClassName(className, '.', COMPACT), getParameterNames(methodDescriptor, codeAttribute, accessFlags) , !checkMode(mode, COMPACT), false, isVarArgs);", "-\t\t\t\tbuffer.append(Signature.toCharArray(methodDescriptor, returnClassName(className, '.', COMPACT), getParameterNames(methodDescriptor, codeAttribute, accessFlags) , !checkMode(mode, COMPACT), false, isVarArgs));", "+\t\t\t\tmethodHeader = Signature.toCharArray(methodDescriptor, returnClassName(className, '.', COMPACT), getParameterNames(methodDescriptor, codeAttribute, accessFlags) , !checkMode(mode, COMPACT), false, isVarArgs);", "-\t\t\tbuffer.append(Messages.bind(Messages.classfileformat_clinitname));", "+\t\t\tmethodHeader = Messages.bind(Messages.classfileformat_clinitname).toCharArray();", "-\t\t\t\tbuffer.append(Signature.toCharArray(signature, methodInfo.getName(), getParameterNames(methodDescriptor, codeAttribute, accessFlags) , !checkMode(mode, COMPACT), true, isVarArgs));", "+\t\t\t\tmethodHeader = Signature.toCharArray(signature, methodInfo.getName(), getParameterNames(methodDescriptor, codeAttribute, accessFlags) , !checkMode(mode, COMPACT), true, isVarArgs);", "-\t\t\t\tbuffer.append(Signature.toCharArray(methodDescriptor, methodInfo.getName(), getParameterNames(methodDescriptor, codeAttribute, accessFlags) , !checkMode(mode, COMPACT), true, isVarArgs));", "+\t\t\t\tmethodHeader = Signature.toCharArray(methodDescriptor, methodInfo.getName(), getParameterNames(methodDescriptor, codeAttribute, accessFlags) , !checkMode(mode, COMPACT), true, isVarArgs);", "+\t\t}", "+\t\tif (checkMode(mode, DETAILED) && (runtimeInvisibleParameterAnnotationsAttribute != null || runtimeVisibleParameterAnnotationsAttribute != null)) {", "+\t\t\tIParameterAnnotation[] invisibleParameterAnnotations = null;", "+\t\t\tIParameterAnnotation[] visibleParameterAnnotations = null;", "+\t\t\tint length = -1;", "+\t\t\tif (runtimeInvisibleParameterAnnotationsAttribute != null) {", "+\t\t\t\tIRuntimeInvisibleParameterAnnotationsAttribute attribute = (IRuntimeInvisibleParameterAnnotationsAttribute) runtimeInvisibleParameterAnnotationsAttribute;", "+\t\t\t\tinvisibleParameterAnnotations = attribute.getParameterAnnotations();", "+\t\t\t\tlength = invisibleParameterAnnotations.length;", "+\t\t\t}", "+\t\t\tif (runtimeVisibleParameterAnnotationsAttribute != null) {", "+\t\t\t\tIRuntimeVisibleParameterAnnotationsAttribute attribute = (IRuntimeVisibleParameterAnnotationsAttribute) runtimeVisibleParameterAnnotationsAttribute;", "+\t\t\t\tvisibleParameterAnnotations = attribute.getParameterAnnotations();", "+\t\t\t\tlength = visibleParameterAnnotations.length;", "+\t\t\t}", "+\t\t\tint insertionPosition = CharOperation.indexOf('(', methodHeader) + 1;", "+\t\t\tint start = 0;", "+\t\t\tStringBuffer stringBuffer = new StringBuffer();", "+\t\t\tstringBuffer.append(methodHeader, 0, insertionPosition);", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tif (i > 0) {", "+\t\t\t\t\tstringBuffer.append(' ');", "+\t\t\t\t}", "+\t\t\t\tint stringBufferSize = stringBuffer.length();", "+\t\t\t\tif (runtimeVisibleParameterAnnotationsAttribute != null) {", "+\t\t\t\t\tdisassembleAsModifier((IRuntimeVisibleParameterAnnotationsAttribute) runtimeVisibleParameterAnnotationsAttribute, stringBuffer, i, lineSeparator, tabNumber, mode);", "+\t\t\t\t}", "+\t\t\t\tif (runtimeInvisibleParameterAnnotationsAttribute != null) {", "+\t\t\t\t\tif (stringBuffer.length() != stringBufferSize) {", "+\t\t\t\t\t\tstringBuffer.append(' ');", "+\t\t\t\t\t\tstringBufferSize = stringBuffer.length();", "+\t\t\t\t\t}", "+\t\t\t\t\tdisassembleAsModifier((IRuntimeInvisibleParameterAnnotationsAttribute) runtimeInvisibleParameterAnnotationsAttribute, stringBuffer, i, lineSeparator, tabNumber, mode);", "+\t\t\t\t}", "+\t\t\t\tif (i == 0 && stringBuffer.length() != stringBufferSize) {", "+\t\t\t\t\tstringBuffer.append(' ');", "+\t\t\t\t}", "+\t\t\t\tstart = insertionPosition;", "+\t\t\t\tinsertionPosition = CharOperation.indexOf(',', methodHeader, start + 1) + 1;", "+\t\t\t\tif (insertionPosition == 0) {", "+\t\t\t\t\tstringBuffer.append(methodHeader, start, methodHeader.length - start);", "+\t\t\t\t} else {", "+\t\t\t\t\tstringBuffer.append(methodHeader, start, insertionPosition - start);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbuffer.append(stringBuffer);", "+\t\t} else {", "+\t\t\tbuffer.append(methodHeader);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eda183b4deabbd2bd089118767f831a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "49c7e567a30e3d9cc1c4880ba35031661d2a5415", "commitAfterChange": "c9d2c7d4276b8b0f65a3b8bbfa4009e8632940f9", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 71, "signatureBeforeChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "signatureAfterChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "diff": ["-\t\tStringBuffer textBuffer = isHtmlTag ? new StringBuffer() : buffer;", "+\t\tStringBuffer tokensBuffer = new StringBuffer();", "-\t\t\t\tprintIndentationIfNecessary(textBuffer);", "+\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\t\t\t\tbuffer.append(' ');", "-\t\t\t\t\t\t\tthis.column++;", "+\t\t\t\t\t\t\ttokensBuffer.append(' ');", "-\t\t\t\t\t\tbuffer.append('\\'');", "-\t\t\t\t\t\tthis.column++;", "+\t\t\t\t\t\ttokensBuffer.append('\\'');", "-\t\t\t\t\t\t\t\tbuffer.append(' ');", "-\t\t\t\t\t\t\t\tthis.column++;", "+\t\t\t\t\t\t\t\ttokensBuffer.append(' ');", "-\t\t\t\t\t\tbuffer.append('\"');", "-\t\t\t\t\t\tthis.column++;", "+\t\t\t\t\t\ttokensBuffer.append('\"');", "+\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\tthis.column += tokensBuffer.length();", "+\t\t\t\t\ttokensBuffer.setLength(0);", "-\t\t\t\tthis.column += tokenLength;", "-\t    \t\tif (insertSpace) this.column++;", "-\t    \t\tint col = column; ", "+\t    \t\tint lastColumn = this.column + tokensBuffer.length() + tokenLength;", "+\t    \t\tif (insertSpace) lastColumn++;", "-\t    \t\t\tif (col > maxColumn)  {", "-\t    \t\t\t\tcol--; // new line gives an extra character", "+\t    \t\t\tif (lastColumn > maxColumn)  {", "+\t    \t\t\t\tlastColumn--; // new line gives an extra character", "-\t\t\t\tif (col > maxColumn) {", "+\t\t\t\tif (lastColumn > maxColumn) {", "-\t\t\t\t\tif (col == this.column) this.lastNumberOfNewLines++;", "+\t\t\t\t\tif (lastColumn == this.column) this.lastNumberOfNewLines++;", "-\t\t\t\t\tif (isHtmlTag && buffer != textBuffer) {", "-\t\t\t\t\t\tbuffer.append(textBuffer);", "-\t\t\t\t\t\ttextBuffer = buffer;", "-\t\t\t\t\t}", "-\t\t\t\t\ttextBuffer.append(this.scanner.source, tokenStart, tokenLength);", "+\t\t\t    \tif (tokensBuffer.length() > 0) {", "+\t\t\t    \t\tString tokensString = tokensBuffer.toString().trim();", "+\t\t\t\t\t\tbuffer.append(tokensString);", "+\t\t\t\t\t\tthis.column += tokensString.length();", "+\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t    \t}", "+\t\t\t\t\tbuffer.append(this.scanner.source, tokenStart, tokenLength);", "-\t\t\t\t\tif (insertSpace)  {", "-\t\t    \t\t\ttextBuffer.append(' ');", "-\t\t\t\t\t}", "-\t\t\t\t\ttextBuffer.append(this.scanner.source, tokenStart, tokenLength);", "+\t\t    \t\tif (insertSpace) {", "+\t\t    \t\t\ttokensBuffer.append(' ');", "+\t\t    \t\t}", "+\t\t\t\t\ttokensBuffer.append(this.scanner.source, tokenStart, tokenLength);", "-\t\t\tif (isHtmlTag && buffer != textBuffer) {", "-\t\t\t\tbuffer.append(textBuffer);", "+\t\t\t// Add remaining buffered tokens", "+\t\t\tif (tokensBuffer.length() > 0) {", "+\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\tthis.column += tokensBuffer.length();"]}], "num": 9274}
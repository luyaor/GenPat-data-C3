{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0b7d98ca3d25f7e25469c92dd05580e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be1401d6db7c0ccee21b618984b95b49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java", "commitBeforeChange": "1cd36da9dd049ac527dcab1976c08155d6c121b9", "commitAfterChange": "f2c2a11caa27156fb260986cef359f78136ce40c", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 104, "signatureBeforeChange": " \tpublic void test0502() throws JavaModelException", "signatureAfterChange": " \tpublic void test0502b() throws JavaModelException", "diff": ["-\tpublic void test0502() throws JavaModelException {", "-\t\t// test0502.A/0/i", "-\t\tASTNode declaringNode = unit.findDeclaringNode(localBinding.getKey());", "-\t\tassertEquals(\"Unexpected declaring node\", fragment, declaringNode); //$NON-NLS-1$", "-\t\t// test0502.A/0/0/j", "+\t */", "+\tpublic void test0502b() throws JavaModelException {", "+\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter\" , \"\", \"test0502\", \"A.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\t\tCompilationUnit unit = (CompilationUnit)runConversion(sourceUnit, true);", "+\t\t", "+\t\t// 'j' in 'then' block in initializer", "-\t\tvariableDeclarationStatement = (VariableDeclarationStatement) block.statements().get(0);", "-\t\tfragment = (VariableDeclarationFragment) variableDeclarationStatement.fragments().get(0);", "-\t\tlocalBinding = fragment.resolveBinding();", "-\t\tdeclaringNode = unit.findDeclaringNode(localBinding.getKey());", "-\t\tassertEquals(\"Unexpected declaring node\", fragment, declaringNode); //$NON-NLS-1$", "+\t\tVariableDeclarationStatement variableDeclarationStatement = (VariableDeclarationStatement) block.statements().get(0);", "+\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) variableDeclarationStatement.fragments().get(0);", "+\t\tIVariableBinding localBinding = fragment.resolveBinding();", "+\t\tassertEquals(\"Unexpected key\", \"test0502/A/0/0/j\", localBinding.getKey()); //$NON-NLS-1$", "+\t}\t", "-\t\t// test0502.A/foo()/i", "-\t\tvariableDeclarationStatement = (VariableDeclarationStatement)getASTNode(unit, 0, 1, 0);", "-\t\tfragment = (VariableDeclarationFragment) variableDeclarationStatement.fragments().get(0);", "-\t\tlocalBinding = fragment.resolveBinding();", "-\t\tdeclaringNode = unit.findDeclaringNode(localBinding.getKey());", "-\t\tassertEquals(\"Unexpected declaring node\", fragment, declaringNode); //$NON-NLS-1$", "-\t\t// test0502.A/foo()/0/j", "-\t\tifStatement = (IfStatement) getASTNode(unit, 0, 1, 1);", "-\t\tblock = (Block)ifStatement.getThenStatement();", "-\t\tvariableDeclarationStatement = (VariableDeclarationStatement) block.statements().get(0);", "-\t\tfragment = (VariableDeclarationFragment) variableDeclarationStatement.fragments().get(0);", "-\t\tlocalBinding = fragment.resolveBinding();", "-\t\tdeclaringNode = unit.findDeclaringNode(localBinding.getKey());", "-\t\tassertEquals(\"Unexpected declaring node\", fragment, declaringNode); //$NON-NLS-1$", "-\t\t// test0502.A/foo()/1/j", "-\t\tifStatement = (IfStatement) getASTNode(unit, 0, 1, 1);", "-\t\tblock = (Block)ifStatement.getElseStatement();", "-\t\tvariableDeclarationStatement = (VariableDeclarationStatement) block.statements().get(0);", "-\t\tfragment = (VariableDeclarationFragment) variableDeclarationStatement.fragments().get(0);", "-\t\tlocalBinding = fragment.resolveBinding();", "-\t\tdeclaringNode = unit.findDeclaringNode(localBinding.getKey());", "-\t\tassertEquals(\"Unexpected declaring node\", fragment, declaringNode); //$NON-NLS-1$", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3b24e1848f1af522328df47989e093a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "1dbf45ade1eaa8473579771e92825a7887776253", "commitAfterChange": "0fb8e6d8cd5771230b88c7189dc0d95f3a5da0e3", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tprivate void verifyComments(ICompilationUnit sourceUnit) throws JavaModelException", "signatureAfterChange": " \tprotected void verifyComments(ICompilationUnit unit) throws JavaModelException", "diff": ["-\tprivate void verifyComments(ICompilationUnit sourceUnit) throws JavaModelException {", "+\tprotected void verifyComments(ICompilationUnit unit) throws JavaModelException {", "-//\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter\" , \"src\", \"javadoc.test\"+testNbre, \"Test.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "-//\t\tassertNotNull(\"Test file Converter/src/javadoc/test\"+testNbre+\"/Test.java was not found!\", sourceUnit);", "+\t\tthis.sourceUnit = unit;", "-\t\tString fileName = sourceUnit.getElementName();", "-\t\tString sourceStr = sourceUnit.getSource();", "-\t\tIJavaProject project = sourceUnit.getJavaProject();", "+\t\tString sourceStr = this.sourceUnit.getSource();", "+\t\tIJavaProject project = this.sourceUnit.getJavaProject();", "-\t\tif (debug) {", "+\t\tif (problems) {", "-\t\t\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(sourceUnit, true); // resolve bindings", "-\t\t\t\tassertEquals(fileName+\": Unexpected problems\", 0, compilUnit.getProblems().length); //$NON-NLS-1$", "+\t\t\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(this.sourceUnit, true); // resolve bindings", "+\t\t\t\tassertEquals(this.prefix+\"Unexpected problems\", 0, compilUnit.getProblems().length); //$NON-NLS-1$", "-\t\t\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(sourceUnit, true); // resolve bindings", "+\t\t\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(this.sourceUnit, true); // resolve bindings", "-\t\tassertNotNull(fileName+\": Unexpected problems\", unitComments);", "+\t\tassertNotNull(this.prefix+\"Unexpected problems\", unitComments);", "-\t\tassertEquals(fileName+\": Wrong number of comments\", this.comments.size(), unitComments.length);", "+\t\tassertEquals(this.prefix+\"Wrong number of comments in source:\\n\"+sourceStr+\"\\n\", this.comments.size(), unitComments.length);", "+\t\t\t// Verify flattened content", "+\t\t\tString stringComment = (String) this.comments.get(i);", "+\t\t\tASTConverterJavadocFlattener printer = new ASTConverterJavadocFlattener(stringComment);", "+\t\t\tcomment.accept(printer);", "+\t\t\tString text = new String(source, comment.getStartPosition(), comment.getLength());", "+\t\t\tassertEquals(this.prefix+\"Flattened comment does NOT match source!\", stringComment, text);", "-\t\t\t\tassertEquals(fileName+\": Invalid tags number! \", tags.size(), allTags(docComment));", "+\t\t\t\tassertEquals(this.prefix+\"Invalid tags number in javadoc:\\n\"+docComment+\"\\n\", tags.size(), allTags(docComment));", "-\t\t\t} else {", "-\t\t\t\tString stringComment = (String) this.comments.get(i);", "-//\t\t\t\tASTConverterJavadocFlattener printer = new ASTConverterJavadocFlattener(stringComment);", "-//\t\t\t\tcomment.accept(printer);", "-\t\t\t\tString text = new String(source, comment.getStartPosition(), comment.getLength());", "-\t\t\t\tassertEquals(fileName+\": Flattened comment does NOT match source!\", stringComment, text);", "-\t\t\tif (debug) System.out.println(comment+\"\\nsuccessfully verified in \"+fileName);"]}], "num": 72951}
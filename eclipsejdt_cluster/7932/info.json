{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9f7da918bc381a2ec2456256215db067", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fec43c90efc37a543445bf0e09f0e96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "e0325c6422f39f597d14dd4c27ecf43875108a27", "commitAfterChange": "f389464fbe74a4e5c3adfde8847a7200db37d80c", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 54, "signatureBeforeChange": "  \tprotected void initByteArrays()", "signatureAfterChange": "  \tprotected void initByteArrays()", "diff": ["-\t\tLookupEnvironment env = this.referenceBinding.scope.environment();", "-\t\tsynchronized (env) {", "-\t\t\tif (env.sharedArraysUsed) {", "-\t\t\t\tthis.ownSharedArrays = false;", "-\t\t\t\tint members = referenceBinding.methods().length + referenceBinding.fields().length;", "-\t\t\t\tthis.header = new byte[INITIAL_HEADER_SIZE];", "-\t\t\t\tthis.contents = new byte[members < 15 ? INITIAL_CONTENTS_SIZE : INITIAL_HEADER_SIZE];", "-\t\t\t} else {", "-\t\t\t\tthis.ownSharedArrays = env.sharedArraysUsed = true;", "-\t\t\t\tthis.header = env.sharedClassFileHeader;", "-\t\t\t\tthis.contents = env.sharedClassFileContents;", "-\t\t\t}", "-\t\t}", "+\t\tint members = referenceBinding.methods().length + referenceBinding.fields().length;", "+\t\tthis.header = new byte[INITIAL_HEADER_SIZE];", "+\t\tthis.contents = new byte[members < 15 ? INITIAL_CONTENTS_SIZE : INITIAL_HEADER_SIZE];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c076b885eff7c37963ef226e83b3445e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "7e5be365074b33481ef62dd48f6cd0d39e341472", "commitAfterChange": "f36e322ad03d5099709a00be20eb1b709bb0eac1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["-\t\t\t// Report constructor parameter hiding another variable", "-\t\t\tif(optionID.equals(OPTION_ReportConstructorParameterHidingField)){", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= ConstructorParameterHidingField;", "-\t\t\t\t\tthis.warningThreshold &= ~ConstructorParameterHidingField;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~ConstructorParameterHidingField;", "-\t\t\t\t\tthis.warningThreshold |= ConstructorParameterHidingField;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~ConstructorParameterHidingField;", "-\t\t\t\t\tthis.warningThreshold &= ~ConstructorParameterHidingField;", "+\t\t\t// Report constructor/setter parameter hiding another field", "+\t\t\tif(optionID.equals(OPTION_ReportSpecialParameterHidingField)){", "+\t\t\t\tif (optionValue.equals(ENABLED)) {", "+\t\t\t\t\tthis.reportSpecialParameterHidingField = true;", "+\t\t\t\t} else if (optionValue.equals(DISABLED)) {", "+\t\t\t\t\tthis.reportSpecialParameterHidingField = false;"]}], "num": 7932}
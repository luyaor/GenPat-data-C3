{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea0602a4cdfe47b7075bafa4b721a99d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f757ee0300136e657030cddeae93e80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "702e8c000f2670613f66a2fdca7428fa36da58d0", "commitAfterChange": "b3432509fb264a4e815030b82eeb1b66a7f45eaa", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void computeInheritedMethods()", "signatureAfterChange": " private void computeInheritedMethods()", "diff": ["-\t\t\t\t\t\t\tMethodBinding existingMethod = existingMethods[i];", "-\t\t\t\t\t\t\tif (method.returnType == existingMethod.returnType", "-\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(existingMethod)) {", "-\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\tif (method.isAbstract() // (31398,30805) report non-visible default abstract, if no implementation is available", "-\t\t\t\t\t\t\t\t\t\t\t\t&&  (method.isDefault() && method.declaringClass.fPackage != existingMethod.declaringClass.fPackage)) {", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\tif (method.returnType == existingMethods[i].returnType) {", "+\t\t\t\t\t\t\t\tif (method.areParametersEqual(existingMethods[i])) {", "+\t\t\t\t\t\t\t\t\tif (method.isDefault() && method.isAbstract() && method.declaringClass.fPackage != type.fPackage)", "+\t\t\t\t\t\t\t\t\t\tcheckDefaultAbstractMethod(method);", "+\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\tif (nonVisibleDefaultMethods != null) {", "-\t\t\t\t\t\tfor (int i = 0; i < nonVisibleCount; i++) {", "-\t\t\t\t\t\t\tif (method.returnType == nonVisibleDefaultMethods[i].returnType", "-\t\t\t\t\t\t\t\t\t&& CharOperation.equals(method.selector, nonVisibleDefaultMethods[i].selector)", "-\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(nonVisibleDefaultMethods[i])) {", "+\t\t\t\t\tif (nonVisibleDefaultMethods != null)", "+\t\t\t\t\t\tfor (int i = 0; i < nonVisibleCount; i++)", "+\t\t\t\t\t\t\tif (method.returnType == nonVisibleDefaultMethods[i].returnType)", "+\t\t\t\t\t\t\t\tif (CharOperation.equals(method.selector, nonVisibleDefaultMethods[i].selector))", "+\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(nonVisibleDefaultMethods[i]))", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!(method.isDefault() && (method.declaringClass.fPackage != type.fPackage))) { // ignore methods which have default visibility and are NOT defined in another package", "-\t\t\t\t\t\tif (existingMethods == null) {", "+", "+\t\t\t\t\tif (!(method.isDefault() && method.declaringClass.fPackage != type.fPackage)) { // ignore methods which have default visibility and are NOT defined in another package", "+\t\t\t\t\t\tif (existingMethods == null)", "-\t\t\t\t\t\t} else {", "+\t\t\t\t\t\telse", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (nonVisibleDefaultMethods == null) {", "+\t\t\t\t\t\tif (nonVisibleDefaultMethods == null)", "-\t\t\t\t\t\t} else if (nonVisibleCount == nonVisibleDefaultMethods.length) {", "+\t\t\t\t\t\telse if (nonVisibleCount == nonVisibleDefaultMethods.length)", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (method.isAbstract() && !this.type.isAbstract()) { // non visible abstract methods cannot be overridden so the type must be defined abstract", "+\t\t\t\t\t\tif (method.isAbstract() && !this.type.isAbstract()) // non visible abstract methods cannot be overridden so the type must be defined abstract", "-\t\t\t\t\t\t}", "+", "-\t\t\t\t\t\t\t\tif (method.returnType == current[i].returnType", "-\t\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(current[i])) {", "-\t\t\t\t\t\t\t\t\tthis.problemReporter().overridesPackageDefaultMethod(current[i], method);", "-\t\t\t\t\t\t\t\t\tbreak foundMatch;", "+\t\t\t\t\t\t\t\tif (method.returnType == current[i].returnType) {", "+\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(current[i])) {", "+\t\t\t\t\t\t\t\t\t\tthis.problemReporter().overridesPackageDefaultMethod(current[i], method);", "+\t\t\t\t\t\t\t\t\t\tbreak foundMatch;", "+\t\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd3ae116348ce9f394ea50ebb27f11ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "d8bba06dba65d28b4ac0590368e9ea6b313bfaa8", "commitAfterChange": "e734477cf19ee0bbdf44ea8e0b55e663163c306b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean commentParse()", "signatureAfterChange": " \tprotected boolean commentParse()", "diff": ["-\t\t\tboolean pushText = (this.kind & TEXT_PARSE) != 0;", "-\t\t\t\t\t\t\t\t\tif (pushText) pushText(this.textStart, textEndPosition);", "+\t\t\t\t\t\t\t\t\tpushText(this.textStart, textEndPosition);", "-\t\t\t\t\t\t\t\t\t\tif (pushText) pushText(this.textStart, textEndPosition);", "+\t\t\t\t\t\t\t\t\t\tpushText(this.textStart, textEndPosition);", "-\t\t\t\t\t\t\t\tif (pushText) pushText(this.textStart, invalidTagLineEnd);", "+\t\t\t\t\t\t\t\tpushText(this.textStart, invalidTagLineEnd);", "-\t\t\t\t\t\t\t\tif (pushText) pushText(this.textStart, textEndPosition);", "+\t\t\t\t\t\t\t\tpushText(this.textStart, textEndPosition);", "-\t\t\t\t\t\t\tif (pushText) {", "-\t\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < textEndPosition) {", "-\t\t\t\t\t\t\t\t\tpushText(this.textStart, textEndPosition);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\trefreshInlineTagPosition(previousPosition);", "+\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < textEndPosition) {", "+\t\t\t\t\t\t\t\tpushText(this.textStart, textEndPosition);", "+\t\t\t\t\t\t\trefreshInlineTagPosition(previousPosition);", "-\t\t\t\t\t\t\tif (pushText) {", "-\t\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < textEndPosition) {", "-\t\t\t\t\t\t\t\t\tpushText(this.textStart, textEndPosition);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\trefreshInlineTagPosition(textEndPosition);", "+\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < textEndPosition) {", "+\t\t\t\t\t\t\t\tpushText(this.textStart, textEndPosition);", "+\t\t\t\t\t\t\trefreshInlineTagPosition(textEndPosition);", "-\t\t\t\t\t\t} else if (this.lineStarted) {", "+\t\t\t\t\t\t} else if (this.lineStarted && isDomParser) {", "-\t\t\t\tif (pushText) {", "-\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < textEndPosition) {", "-\t\t\t\t\t\tpushText(this.textStart, textEndPosition);", "-\t\t\t\t\t}", "-\t\t\t\t\trefreshInlineTagPosition(textEndPosition);", "+\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < textEndPosition) {", "+\t\t\t\t\tpushText(this.textStart, textEndPosition);", "+\t\t\t\trefreshInlineTagPosition(textEndPosition);", "-\t\t\t} else if (pushText && this.lineStarted && this.textStart != -1 && this.textStart <= textEndPosition) {", "+\t\t\t} else if (this.lineStarted && this.textStart != -1 && this.textStart <= textEndPosition) {"]}], "num": 46553}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "160426b9a35fd1ff407c65af07357253", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3692421c607435c808bf10f285d54ea1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "8d727318bdb50989688c39adc1cb443529cd92ed", "commitAfterChange": "0b996c62d78a14d0f0ee5313e3a85270bb3aeb0f", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tprotected String getURLContents(String docUrlValue, String defaultEncoding) throws JavaModelException", "signatureAfterChange": " \tprotected String getURLContents(String docUrlValue) throws JavaModelException", "diff": ["-\tprotected String getURLContents(String docUrlValue, String defaultEncoding) throws JavaModelException {", "+\tprotected String getURLContents(String docUrlValue) throws JavaModelException {", "+\t\tJarURLConnection connection2 = null;", "-\t\t\tString encoding = defaultEncoding;", "+\t\t\tURL docUrl = new URL(docUrlValue);", "+\t\t\tURLConnection connection = docUrl.openConnection();", "+\t\t\tif (connection instanceof JarURLConnection) {", "+\t\t\t\tconnection2 = (JarURLConnection) connection;", "+\t\t\t}", "+\t\t\tstream = new BufferedInputStream(connection.getInputStream());", "+\t\t\tString encoding = connection.getContentEncoding();", "+\t\t\tbyte[] contents = org.eclipse.jdt.internal.compiler.util.Util.getInputStreamAsByteArray(stream, connection.getContentLength());", "+\t\t\tif (encoding == null) {", "+\t\t\t\tint index = getIndexOf(contents, CONTENT_TYPE, 0);", "+\t\t\t\tif (index != -1) {", "+\t\t\t\t\tindex = getIndexOf(contents, CONTENT, index);", "+\t\t\t\t\tif (index != -1) {", "+\t\t\t\t\t\tint offset = index + CONTENT.length;", "+\t\t\t\t\t\tint index2 = getIndexOf(contents, CLOSING_DOUBLE_QUOTE, offset);", "+\t\t\t\t\t\tif (index2 != -1) {", "+\t\t\t\t\t\t\tfinal int charsetIndex = getIndexOf(contents, CHARSET, offset);", "+\t\t\t\t\t\t\tif (charsetIndex != -1) {", "+\t\t\t\t\t\t\t\tint start = charsetIndex + CHARSET.length;", "+\t\t\t\t\t\t\t\tencoding = new String(contents, start, index2 - start, \"UTF-8\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t// long time = System.currentTimeMillis();", "-\t\t\tURL docUrl = new URL(docUrlValue);", "-\t\t\tURLConnection connection = docUrl.openConnection();", "-\t\t\t// System.out.println(\"Time spent \" + (System.currentTimeMillis() - time) + \"ms for opening connection for \" + docUrlValue); //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t// time = System.currentTimeMillis();", "-\t\t\tif (\"jar\".equals(docUrl.getProtocol())) { //$NON-NLS-1$", "-\t\t\t\t// if jar protocol is using a cache, some file descriptors are left behind and the resource cannot be deleted", "-\t\t\t\tconnection.setUseCaches(false);", "-\t\t\t}", "-\t\t\tstream = new BufferedInputStream(connection.getInputStream());", "-\t\t\t// System.out.println(\"Time spent \" + (System.currentTimeMillis() - time) + \"ms for getting stream for \" + docUrlValue); //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t// time = System.currentTimeMillis();", "-\t\t\tchar[] contents = org.eclipse.jdt.internal.compiler.util.Util.getInputStreamAsCharArray(stream, -1, encoding);", "-\t\t\t// System.out.println(\"Time spent \" + (System.currentTimeMillis() - time) + \"ms for reading stream for \" + docUrlValue); //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\t// System.out.println(\"Size = \" + (contents.length / 1024) + \"kb\");//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\treturn String.valueOf(contents);", "-\t\t\t}", "+\t\t\t\tif (encoding != null) {", "+\t\t\t\t\treturn new String(contents, encoding);", "+\t\t\t\t} else {", "+\t\t\t\t\t// platform encoding is used", "+\t\t\t\t\treturn new String(contents);", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "-\t\t\t\t\t// ignore", "+\t\t\t\t\te.printStackTrace();", "+\t\t\tif (connection2 != null) {", "+\t\t\t\ttry {", "+\t\t\t\t\tconnection2.getJarFile().close();", "+\t\t\t\t} catch(IOException e) {", "+\t\t\t\t\te.printStackTrace();", "+\t\t\t\t}", "+ \t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6f6fa6d11857ed653a8ecc04e885e10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "b317a1e7ce5a7a6cc55cd1f344eea57539a2bc94", "commitAfterChange": "7eed6a96df74657d78e1bde1e5678b14a74d3ac5", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public String[] getParameterNames() throws JavaModelException", "signatureAfterChange": " public String[] getParameterNames() throws JavaModelException", "diff": ["-\t\tif (this.parameterNames == null) {", "-\t\t\t// try to see if we can retrieve the names from the attached javadoc", "-\t\t\tIBinaryMethod info = (IBinaryMethod) getElementInfo();", "-\t\t\tfinal int paramCount = Signature.getParameterCount(new String(info.getMethodDescriptor()));", "-\t\t\tif (paramCount != 0) {", "-\t\t\t\tString javadoc = this.getAttachedJavadoc(new NullProgressMonitor(), \"UTF-8\"); //$NON-NLS-1$", "-\t\t\t\tif (javadoc != null) {", "-\t\t\t\t\tfinal int indexOfOpenParen = javadoc.indexOf('(');", "-\t\t\t\t\tif (indexOfOpenParen != -1) {", "-\t\t\t\t\t\tfinal int indexOfClosingParen = javadoc.indexOf(')', indexOfOpenParen);", "-\t\t\t\t\t\tif (indexOfClosingParen != -1) {", "-\t\t\t\t\t\t\tfinal char[] paramsSource =", "-\t\t\t\t\t\t\t\tCharOperation.replace(", "-\t\t\t\t\t\t\t\t\tjavadoc.substring(indexOfOpenParen + 1, indexOfClosingParen).toCharArray(),", "-\t\t\t\t\t\t\t\t\t\"&nbsp;\".toCharArray(), //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\tnew char[] {' '});", "-\t\t\t\t\t\t\tfinal StringTokenizer tokenizer = new StringTokenizer(String.valueOf(paramsSource), \", \\n\\r\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\tint index = 0;", "-\t\t\t\t\t\t\tfinal ArrayList paramNames = new ArrayList(paramCount);", "-\t\t\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\t\t\t\tfinal String token = tokenizer.nextToken();", "-\t\t\t\t\t\t\t\tif ((index & 1) != 0) {", "-\t\t\t\t\t\t\t\t\t// if odd then this is a parameter name", "-\t\t\t\t\t\t\t\t\tparamNames.add(token);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tindex++;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (!paramNames.isEmpty()) {", "-\t\t\t\t\t\t\t\tthis.parameterNames = new String[paramNames.size()];", "-\t\t\t\t\t\t\t\tparamNames.toArray(this.parameterNames);", "-\t\t\t\t\t\t\t}", "-\t \t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}\t\t"]}], "num": 62265}
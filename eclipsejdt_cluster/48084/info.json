{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1af2ed73334de9d32375b898e478744", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "242a3480d9d94854e911d28d28036ec3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "40f76b3d0fb01a4a7fa1aad4b09c356c31458c94", "commitAfterChange": "323d52f789e646d704223fd3ac5d22c4e4efec25", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus)", "signatureAfterChange": " protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus)", "diff": ["-//return: severity: 0 = no problem; 1 = unchecked conversion; 2 = conflicting annotations", "+// nullStatus: we are only interested in NULL or NON_NULL, -1 indicates that we are in a recursion, where flow info is ignored", "-\t\t\t\t\t\t\tnullStatus = 0; // don't use beyond the outermost dimension", "+\t\t\t\t\t\t\tnullStatus = -1; // don't use beyond the outermost dimension", "-\t\tif (requiredBits == TagBits.AnnotationNullable)", "+\t\tif (requiredBits == TagBits.AnnotationNullable && nullStatus != -1) // at detail/recursion even nullable must be matched exactly", "-\t\t// TODO(stephan): descend into type parameters", "+\t\tif (severity < 3 && providedType.isParameterizedType()) { // TODO(stephan): handle providedType.isRaw()", "+\t\t\tTypeBinding[] requiredArguments = ((ParameterizedTypeBinding) requiredType).arguments;", "+\t\t\tTypeBinding[] providedArguments = ((ParameterizedTypeBinding) providedType).arguments;", "+\t\t\tif (requiredArguments != null && providedArguments != null && requiredArguments.length == providedArguments.length) {", "+\t\t\t\tfor (int i = 0; i < requiredArguments.length; i++) {", "+\t\t\t\t\tseverity = Math.max(severity, findNullTypeAnnotationMismatch(requiredArguments[i], providedArguments[i], -1));", "+\t\t\t\t\tif (severity == 2)", "+\t\t\t\t\t\treturn severity;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d834a8235b1b16d74a33997809d8f2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "0d0ece63676205621683728295e330e5d3ff8080", "commitAfterChange": "4548a7d90e8e4c11b66df276814b1cfc602d40e1", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment, boolean recurseInContainers)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment, boolean recurseInContainers)", "diff": ["-\t\t\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(resolvedResource.getFileExtension())) {", "+\t\t\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(resolvedResource.getName())) {", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalLibraryArchive\", entryPathMsg, projectName)); //$NON-NLS-1$", "-\t\t\t\t\t\tif (checkSourceAttachment ", "-\t\t\t\t\t\t\t&& sourceAttachment != null ", "-\t\t\t\t\t\t\t&& !sourceAttachment.isEmpty()", "-\t\t\t\t\t\t\t&& JavaModel.getTarget(workspaceRoot, sourceAttachment, true) == null){", "-\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceAttachment\", new String [] {sourceAttachment.toString(), path.makeRelative().toString(), projectName})); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "+\t\t\t\t\t    File file = (File) target;", "+\t\t\t\t\t    if (!file.isFile()) {", "+\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalExternalFolder\", path.toOSString(), projectName)); //$NON-NLS-1$", "+\t\t\t\t\t    } else if (!org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(file.getName())) {", "+\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalLibraryArchive\", path.toOSString(), projectName)); //$NON-NLS-1$", "+\t\t\t\t\t    } else if (checkSourceAttachment ", "+\t\t\t\t\t\t\t\t&& sourceAttachment != null ", "+\t\t\t\t\t\t\t\t&& !sourceAttachment.isEmpty()", "+\t\t\t\t\t\t\t\t&& JavaModel.getTarget(workspaceRoot, sourceAttachment, true) == null){", "+\t\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceAttachment\", new String [] {sourceAttachment.toString(), path.makeRelative().toString(), projectName})); //$NON-NLS-1$", "+\t\t\t\t\t    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "704eb33fa3b14ff4ab89c557abcbff4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "ea0c13f57ba1bc8fcf24d57a6ed1fca3a4943554", "commitAfterChange": "76fc29f1af4e9ec86970c2a456c7b7805a597ea2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, MethodBinding[] allInheritedMethods, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, MethodBinding[] allInheritedMethods, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["+", "+\t\tif (shouldComplain && useTypeAnnotations && srcMethod != null) {", "+\t\t\tTypeVariableBinding[] currentTypeVariables = currentMethod.typeVariables();", "+\t\t\tTypeVariableBinding[] inheritedTypeVariables = inheritedMethod.typeVariables();", "+\t\t\tif (currentTypeVariables != Binding.NO_TYPE_VARIABLES && currentTypeVariables.length == inheritedTypeVariables.length) {", "+\t\t\t\tfor (int i = 0; i < currentTypeVariables.length; i++) {", "+\t\t\t\t\tTypeVariableBinding inheritedVariable = inheritedTypeVariables[i];", "+\t\t\t\t\tif (NullAnnotationMatching.analyse(inheritedVariable, currentTypeVariables[i], null, null, -1, CheckMode.BOUND_CHECK).isAnyMismatch())", "+\t\t\t\t\t\tscope.problemReporter().cannotRedefineTypeArgumentNullity(inheritedVariable, inheritedMethod, srcMethod.typeParameters()[i]);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9452aa1d1a6ebd56d704d272226e81ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "2a762b85f858691a63d4547af177cc649d7b1329", "commitAfterChange": "7675c409a4b3b1e15b1cc476a0a66b988b5fb4a0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject javaProject, IClasspathEntry entry, boolean checkSourceAttachment)", "signatureAfterChange": "\r \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject javaProject, IClasspathEntry entry, boolean checkSourceAttachment)", "diff": ["+\t\t\t// container entry check\r", "+\t\t\tcase IClasspathEntry.CPE_CONTAINER :\r", "+\t\t\t\tif (path != null && path.segmentCount() >= 1){\r", "+\t\t\t\t\tIClasspathEntry[] containerEntries = javaProject.getResolvedClasspathContainer(path);\r", "+\t\t\t\t\tif (containerEntries == null){\r", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundContainerPath\", path.toString())); //$NON-NLS-1$\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tfor (int i = 0, length = containerEntries.length; i < length; i++){\r", "+\t\t\t\t\t\tIJavaModelStatus containerEntryStatus = validateClasspathEntry(javaProject, containerEntries[i], checkSourceAttachment);\r", "+\t\t\t\t\t\tif (!containerEntryStatus.isOK()){\r", "+\t\t\t\t\t\t\treturn containerEntryStatus;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalContainerPath\", path.toString()));\t\t\t\t\t //$NON-NLS-1$\r", "+\t\t\t\t}\r", "+\t\t\t\r"]}], "num": 48084}
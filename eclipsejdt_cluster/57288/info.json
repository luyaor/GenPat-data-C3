{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "754d74d475e49ceea9cb1b40bb7d6b09", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0749e7277fdaec73885a03adcac73def", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "0faf571a2b978290e761500f873fc8f116675788", "commitAfterChange": "16ea2a8daece1ce57aeee98ca0579c5d79d5f9c9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void abstractMethodMustBeImplemented(SourceTypeBinding type, MethodBinding abstractMethod)", "signatureAfterChange": " public void abstractMethodMustBeImplemented(SourceTypeBinding type, MethodBinding abstractMethod)", "diff": ["-\t\tnew String[] {", "-\t\t\tnew String(", "-\t\t\t\tCharOperation.concat(", "-\t\t\t\t\tabstractMethod.declaringClass.readableName(),", "-\t\t\t\t\tabstractMethod.readableName(),", "-\t\t\t\t\t'.'))},", "-\t\tnew String[] {", "-\t\t\tnew String(", "-\t\t\t\tCharOperation.concat(", "-\t\t\t\t\tabstractMethod.declaringClass.shortReadableName(),", "-\t\t\t\t\tabstractMethod.shortReadableName(),", "-\t\t\t\t\t'.'))},", "+\t\tnew String[] { ", "+\t\t        new String(abstractMethod.selector),", "+\t\t        typesAsString(abstractMethod.isVarargs(), abstractMethod.parameters, false), ", "+\t\t        new String(abstractMethod.declaringClass.readableName()), ", "+\t\t        new String(type.readableName()), ", "+\t\t},", "+\t\tnew String[] { ", "+\t\t        new String(abstractMethod.selector),", "+\t\t        typesAsString(abstractMethod.isVarargs(), abstractMethod.parameters, true), ", "+\t\t        new String(abstractMethod.declaringClass.shortReadableName()), ", "+\t\t        new String(type.shortReadableName()), ", "+\t\t},"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c1e34ac4f505e33ddbaf3ce03bff667", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "5bad0f0933acdc658d4e40a7d9becfd8568dd235", "commitAfterChange": "4316c760d5aabce67e5ab83fef96d7ef0cdbee57", "methodNumberBeforeChange": 539, "methodNumberAfterChange": 539, "signatureBeforeChange": "  public void cannotReferToAbstractMethod(ReferenceExpression expression, MethodBinding method)", "signatureAfterChange": "  public void incompatibleReturnType(ReferenceExpression expression, MethodBinding method, TypeBinding returnType)", "diff": ["-public void cannotReferToAbstractMethod(ReferenceExpression expression, MethodBinding method) {", "-\tTypeBinding receiverType = method.declaringClass;", "-\tchar [] selector = method.selector;", "+public void incompatibleReturnType(ReferenceExpression expression, MethodBinding method, TypeBinding returnType) {", "-\t", "-\tint id = IProblem.UndefinedMethod;", "-\tthis.handle(", "-\t\tid,", "-\t\tnew String[] { new String(receiverType.readableName()), new String(selector), buffer.toString() },", "-\t\tnew String[] { new String(receiverType.shortReadableName()), new String(selector), shortBuffer.toString() },", "-\t\texpression.sourceStart,", "-\t\texpression.sourceEnd);", "+\tString selector = new String(method.selector);", "+\tthis.handle(IProblem.IncompatibleMethodReference,", "+\t\t\tnew String[] { selector, buffer.toString(), new String(method.declaringClass.readableName()), new String(method.returnType.readableName()), new String(returnType.readableName())},", "+\t\t\tnew String[] { selector, shortBuffer.toString(), new String(method.declaringClass.shortReadableName()), new String(method.returnType.shortReadableName()), new String(returnType.shortReadableName())},", "+\t\t\texpression.sourceStart,", "+\t\t\texpression.sourceEnd);"]}], "num": 57288}
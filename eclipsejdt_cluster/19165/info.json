{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a6357efe0476a20b6cb74993e7d9a40", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42b952ccb452dcdcf5a67a650b45f1df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "32efda4ca470a8ccf71ee2d08eca76774c3b3fec", "commitAfterChange": "77de337a7cbdb0dc7d1999e30d4c1f21e5bcfdab", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " public void testBug118823() throws CoreException, InterruptedException, IOException", "signatureAfterChange": " public void testBug118823() throws CoreException, InterruptedException, IOException", "diff": ["-\t", "-\t// Class to listen for deltas on a compilation unit", "-\tclass TestDeltaListener implements IElementChangedListener {", "-\t\tString unitName;", "-\t\tboolean updated;", "-\t\tTestDeltaListener(ICompilationUnit cu) {", "-\t\t\tthis.unitName = cu.getElementName();", "-\t\t}", "-\t\tpublic void elementChanged(ElementChangedEvent event) {", "-\t\t\tif (isEventOnUnit((IJavaElementDelta)event.getSource())) {", "-\t\t\t\tthis.updated = true;", "-\t\t\t}", "-\t\t}", "-\t\tprivate boolean isEventOnUnit(IJavaElementDelta delta) {", "-\t\t\tIJavaElementDelta[] children = delta.getAffectedChildren();", "-\t\t\tif (children != null && children.length > 0) {", "-\t\t\t\tfor (int i=0, l=children.length; i<l ; i++) {", "-\t\t\t\t\tif (isEventOnUnit(children[i])) return true;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif (this.unitName.equals(delta.getElement().getElementName()) && delta.getKind() == IJavaElementDelta.CHANGED) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn false;", "-\t\t}", "-\t}", "-", "-\t// Start test", "-\t\tIJavaProject project = createJavaProject(\"P1\", new String[] {\"\"}, new String[] {\"JCL_LIB\"}, \"bin\");", "-\t\tString source1 = \"class Test {}\\n\";", "-\t\tIFile file = createFile(", "+\t\tcreateJavaProject(\"P1\", new String[] {\"\"}, new String[] {\"JCL_LIB\"}, \"bin\");", "+\t\tString source = \"class Test {}\\n\";", "+\t\tcreateFile(", "-\t\t\tsource1", "+\t\t\tsource", "-\t\tchar[] sourceChars = source1.toCharArray();", "+\t\tchar[] sourceChars = source.toCharArray();", "-", "-\t\t// Create delta listener on first working copy", "-\t\tTestDeltaListener dListener = new TestDeltaListener(this.workingCopies[0]);", "-\t\tJavaCore.addElementChangedListener(dListener);", "-\t\t// Delete first working copy file and recreate it with secondary outside eclipse", "-\t\tFile ioFile = file.getLocation().toFile();", "-\t\tioFile.delete();", "-\t\tsource1 = ", "+\t\t// Delete file and recreate it with secondary", "+\t\tfinal String source1 = ", "-\t\tUtil.createFile(ioFile.getCanonicalPath(), source1);", "-\t\tproject.getProject().refreshLocal(IResource.DEPTH_INFINITE, null);", "-", "-\t\t// Wait for deltas on updated working copy", "-\t\tint max = 0;", "-\t\twhile (!dListener.updated && max++ < 10) {", "-\t\t\tThread.sleep(100);", "-\t\t}", "-\t\tassertTrue(\"We should have compilation unit updated\", dListener.updated);", "+\t\tgetWorkspace().run(", "+\t\t\tnew IWorkspaceRunnable() {", "+\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "+\t\t\t\t\tdeleteFile(\"/P1/Test.java\");", "+\t\t\t\t\tcreateFile(", "+\t\t\t\t\t\t\"/P1/Test.java\", ", "+\t\t\t\t\t\tsource1", "+\t\t\t\t\t);", "+\t\t\t\t}", "+\t\t\t},", "+\t\t\tnull", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a74e744d6098a7ca96c409413c6a36ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ExtendedAnnotation.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic ExtendedAnnotation( \t\t\tbyte[] classFileBytes, \t\t\tIConstantPool constantPool, \t\t\tint offset) throws ClassFormatException", "signatureAfterChange": " \tpublic ExtendedAnnotation( \t\t\tbyte[] classFileBytes, \t\t\tIConstantPool constantPool, \t\t\tint offset) throws ClassFormatException", "diff": ["-\t\tint index = u2At(classFileBytes, 0, offset);", "+\t\t// Read target_type", "+\t\tint index = u1At(classFileBytes,0,offset);", "+\t\tthis.targetType = index;", "+\t\tthis.readOffset = 1;", "+\t\t", "+\t\treadTargetInfo(index, classFileBytes, constantPool, offset);", "+", "+\t\t// Read type_path", "+\t\tindex = u1At(classFileBytes, this.readOffset, offset);", "+\t\tthis.readOffset++;", "+\t\tint typePathEntryCount = index;", "+\t\tif (typePathEntryCount == 0) {", "+\t\t\tthis.typePath = NO_TYPEPATH;", "+\t\t} else {", "+\t\t\tthis.typePath = new int[typePathEntryCount][];", "+\t\t\tfor (int i = 0; i < typePathEntryCount; i++) {", "+\t\t\t\tint[] typePathEntry = (this.typePath[i] = new int[2]);", "+\t\t\t\ttypePathEntry[0] = u1At(classFileBytes, this.readOffset++, offset);", "+\t\t\t\ttypePathEntry[1] = u1At(classFileBytes, this.readOffset++, offset);", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\t// Read annotation", "+\t\tindex = u2At(classFileBytes, this.readOffset, offset);", "+\t\tthis.readOffset+=2;", "-\t\tfinal int length = u2At(classFileBytes, 2, offset);", "+\t\tfinal int length = u2At(classFileBytes, this.readOffset, offset);", "-\t\tthis.readOffset = 4;", "+\t\tthis.readOffset+=2;", "-\t\tindex = u1At(classFileBytes, this.readOffset, offset);", "-\t\tthis.readOffset++;", "-\t\tthis.targetType = index;", "-\t\tswitch(index) {", "-\t\t\tcase IExtendedAnnotationConstants.WILDCARD_BOUND :", "-\t\t\t\tthis.wildcardLocationType = u1At(classFileBytes, this.readOffset, offset);", "-\t\t\t\tthis.readOffset++;", "-\t\t\t\tinternalDecoding(this.wildcardLocationType, classFileBytes, constantPool, offset);", "-\t\t\t\t// copy the location back into the wildcard location", "-\t\t\t\tint size = this.locations.length;", "-\t\t\t\tSystem.arraycopy(this.locations, 0, (this.wildcardLocations = new int[size]), 0, size);", "-\t\t\t\tthis.locations = null;", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.WILDCARD_BOUND_GENERIC_OR_ARRAY :", "-\t\t\t\tthis.wildcardLocationType = u1At(classFileBytes, this.readOffset, offset);", "-\t\t\t\tthis.readOffset++;", "-\t\t\t\tinternalDecoding(this.wildcardLocationType, classFileBytes, constantPool, offset);", "-\t\t\t\tsize = this.locations.length;", "-\t\t\t\tSystem.arraycopy(this.locations, 0, (this.wildcardLocations = new int[size]), 0, size);", "-\t\t\t\tint locationLength = u2At(classFileBytes, this.readOffset, offset);", "-\t\t\t\tthis.readOffset += 2;", "-\t\t\t\tthis.locations = new int[locationLength];", "-\t\t\t\tfor (int i = 0; i < locationLength; i++) {", "-\t\t\t\t\tthis.locations[i] = u1At(classFileBytes, this.readOffset, offset);", "-\t\t\t\t\tthis.readOffset++;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tdefault:", "-\t\t\t\tinternalDecoding(index, classFileBytes, constantPool, offset);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acc579d44378e326cddc4359612b6140", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "1a8cfd60f35f9eb233d4395676551d0101e49aa3", "commitAfterChange": "acbc84bdd187bdb6c7f4afd96c97bfaa149e3ef9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean commentParse()", "signatureAfterChange": " \tprotected boolean commentParse()", "diff": ["-\t\t\tthis.spacePosition = -1;", "+\t\t\tthis.javadocTextEnd = this.javadocEnd - 2; // supposed text end, it will be refined later...", "+\t\t\tint textEndPosition = -1;", "+", "+\t\t\t\t// Store previous position and char", "-\t\t\t\t\t\t\t\tint textEndPosition = previousPosition;", "-\t\t\t\t\t\t\t\tif (isFormatterParser && ScannerHelper.isWhitespace(previousChar)) {", "-\t\t\t\t\t\t\t\t\ttextEndPosition = this.spacePosition;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tint textEndPosition = this.inlineTagStart;", "-\t\t\t\t\t\t\t\t\tif (isFormatterParser && this.spacePosition == (this.inlineTagStart-1)) {", "-\t\t\t\t\t\t\t\t\t\ttextEndPosition = this.spacePosition;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tint textEndPosition = invalidTagLineEnd;", "-\t\t\t\t\t\t\t\tif (isFormatterParser && ScannerHelper.isWhitespace(previousChar)) {", "-\t\t\t\t\t\t\t\t\ttextEndPosition = this.spacePosition;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (pushText) pushText(this.textStart, textEndPosition);", "+\t\t\t\t\t\t\t\tif (pushText) pushText(this.textStart, invalidTagLineEnd);", "+\t\t\t\t\t\t\t\t\ttextEndPosition = this.index;", "-\t\t\t\t\t\t} else if (verifText && this.tagValue == TAG_RETURN_VALUE && this.returnStatement != null) {", "-\t\t\t\t\t\t\trefreshReturnStatement();", "-\t\t\t\t\t\t} else if (isFormatterParser) {", "-\t\t\t\t\t\t\tif (this.textStart == -1) this.textStart = previousPosition;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\ttextEndPosition = this.index;", "+\t\t\t\t\t\t\tif (verifText && this.tagValue == TAG_RETURN_VALUE && this.returnStatement != null) {", "+\t\t\t\t\t\t\t\trefreshReturnStatement();", "+\t\t\t\t\t\t\t} else if (isFormatterParser) {", "+\t\t\t\t\t\t\t\tif (this.textStart == -1) this.textStart = previousPosition;", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tint textEndPosition = previousPosition;", "-\t\t\t\t\t\t\tif (isFormatterParser) {", "-\t\t\t\t\t\t\t\tif (ScannerHelper.isWhitespace(previousChar)) {", "-\t\t\t\t\t\t\t\t\ttextEndPosition = this.spacePosition;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tthis.spacePosition = previousPosition;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (isFormatterParser && !ScannerHelper.isWhitespace(previousChar)) {", "+\t\t\t\t\t\t\t\ttextEndPosition = previousPosition;", "-\t\t\t\t\t\t\t\tint textEndPosition = previousPosition;", "-\t\t\t\t\t\t\t\tif (isFormatterParser && ScannerHelper.isWhitespace(previousChar)) {", "-\t\t\t\t\t\t\t\t\ttextEndPosition = this.spacePosition;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\ttextEndPosition = this.index;", "-\t\t\t\t\t\t\t\tint textEndPosition = previousPosition;", "-\t\t\t\t\t\t\t\tif (isFormatterParser && ScannerHelper.isWhitespace(previousChar)) {", "-\t\t\t\t\t\t\t\t\ttextEndPosition = this.spacePosition;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\ttextEndPosition = this.index;", "+\t\t\t\t\t\t} else if (peekChar() != '@') {", "+\t\t\t\t\t\t\ttextEndPosition = this.index;", "-\t\t\t\t\t\t// Store first space position while formatting", "-\t\t\t\t\t\tif (isFormatterParser && !ScannerHelper.isWhitespace(previousChar)) {", "-\t\t\t\t\t\t\tthis.spacePosition = previousPosition;", "+\t\t\t\t\t\t// Do not include trailing spaces in text while formatting", "+\t\t\t\t\t\tif (isFormatterParser) {", "+\t\t\t\t\t\t\tif (!ScannerHelper.isWhitespace(previousChar)) {", "+\t\t\t\t\t\t\t\ttextEndPosition = previousPosition;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (this.lineStarted) {", "+\t\t\t\t\t\t\ttextEndPosition = this.index;", "-\t\t\t\t\t\t\tint endTextPosition = ScannerHelper.isWhitespace(previousChar) ? this.spacePosition : previousPosition;", "-\t\t\t\t\t\t\tif (parseHtmlTag(previousPosition, endTextPosition)) {", "+\t\t\t\t\t\t\tif (!ScannerHelper.isWhitespace(previousChar)) {", "+\t\t\t\t\t\t\t\ttextEndPosition = previousPosition;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (parseHtmlTag(previousPosition, textEndPosition)) {", "+\t\t\t\t\t\ttextEndPosition = this.index;", "-\t\t\t\t\tint textEndPosition = this.javadocTextEnd;", "-\t\t\t\t\tif (isFormatterParser && ScannerHelper.isWhitespace(previousChar)) {", "-\t\t\t\t\t\ttextEndPosition = this.spacePosition;", "-\t\t\t\t\t}", "-\t\t\t} else if (pushText && this.lineStarted && this.textStart != -1 && this.textStart <= this.javadocTextEnd) {", "-\t\t\t\tpushText(this.textStart, this.starPosition);", "+\t\t\t} else if (pushText && this.lineStarted && this.textStart != -1 && this.textStart <= textEndPosition) {", "+\t\t\t\tpushText(this.textStart, textEndPosition);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c88bb9e3735a98ba8cd4e82e2890e3a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "59f134d776625487d5c6b62a9862cfb00a070d3e", "commitAfterChange": "96b4864be18ed8951f75fa1c52f7e975191f2b07", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "signatureAfterChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "diff": ["-\t\t\tif (typeBinding.isInterface()) {", "+\t\t\t", "+\t\t\tif(typeBinding instanceof ProblemReferenceBinding) {", "+\t\t\t\ttypeBinding = ((ProblemReferenceBinding) typeBinding).original;", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (isLocal(typeBinding) && this.requestor instanceof SelectionRequestor) {", "-\t\t\t\tif (isLocal(typeBinding) && this.requestor instanceof SelectionRequestor) {", "-\t\t\t\t\tif(typeBinding.isParameterizedType() || typeBinding.isRawType()) {", "-\t\t\t\t\t\tcompleteLocalTypes(typeBinding);", "-\t\t\t\t\t}", "-\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalType(typeBinding);", "-\t\t\t\t} else {", "-\t\t\t\t\tchar[] genericTypeSignature = null;", "-\t\t\t\t\tif(typeBinding.isParameterizedType() || typeBinding.isRawType()) {", "-\t\t\t\t\t\tcompleteLocalTypes(typeBinding);", "-\t\t\t\t\t\tgenericTypeSignature = typeBinding.computeUniqueKey();", "-\t\t\t\t\t}", "+\t\t\t\tif(typeBinding.isParameterizedType() || typeBinding.isRawType()) {", "+\t\t\t\t\tcompleteLocalTypes(typeBinding);", "+\t\t\t\t}", "+\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalType(typeBinding);", "+\t\t\t} else {", "+\t\t\t\tthis.noProposal = false;", "+\t\t\t\t", "+\t\t\t\tchar[] genericTypeSignature = null;", "+\t\t\t\tif(typeBinding.isParameterizedType() || typeBinding.isRawType()) {", "+\t\t\t\t\tcompleteLocalTypes(typeBinding);", "+\t\t\t\t\tgenericTypeSignature = typeBinding.computeUniqueKey();", "+\t\t\t\t}", "+\t\t\t\tif (typeBinding.isAnnotationType()) {", "+\t\t\t\t\tthis.requestor.acceptAnnotation(", "+\t\t\t\t\t\ttypeBinding.qualifiedPackageName(),", "+\t\t\t\t\t\ttypeBinding.qualifiedSourceName(),", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tgenericTypeSignature,", "+\t\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\t\tthis.actualSelectionEnd);", "+\t\t\t\t} else if (typeBinding.isInterface()) {", "-\t\t\t\t}", "-\t\t\t} else if(typeBinding instanceof ProblemReferenceBinding){", "-\t\t\t\tReferenceBinding original = ((ProblemReferenceBinding) typeBinding).original;", "-\t\t\t\tif(original == null) return;", "-\t\t\t\tthis.noProposal = false;", "-\t\t\t\tif (isLocal(original) && this.requestor instanceof SelectionRequestor) {", "-\t\t\t\t\tif(original.isParameterizedType() || typeBinding.isRawType()) {", "-\t\t\t\t\t\tcompleteLocalTypes(original);", "-\t\t\t\t\t}", "-\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalType(original);", "-\t\t\t\t} else {", "-\t\t\t\t\tchar[] genericTypeSignature = null;", "-\t\t\t\t\tif(typeBinding.isParameterizedType() || typeBinding.isRawType()) {", "-\t\t\t\t\t\tcompleteLocalTypes(typeBinding);", "-\t\t\t\t\t\tgenericTypeSignature = typeBinding.computeUniqueKey();", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.requestor.acceptClass(", "-\t\t\t\t\t\toriginal.qualifiedPackageName(),", "-\t\t\t\t\t\toriginal.qualifiedSourceName(),", "+\t\t\t\t} else if (typeBinding.isEnum()) {", "+\t\t\t\t\tthis.requestor.acceptEnum(", "+\t\t\t\t\t\ttypeBinding.qualifiedPackageName(),", "+\t\t\t\t\t\ttypeBinding.qualifiedSourceName(),", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tthis.noProposal = false;", "-\t\t\t\tif (isLocal(typeBinding) && this.requestor instanceof SelectionRequestor) {", "-\t\t\t\t\tif(typeBinding.isParameterizedType() || typeBinding.isRawType()) {", "-\t\t\t\t\t\tcompleteLocalTypes(typeBinding);", "-\t\t\t\t\t}", "-\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalType(typeBinding);", "-\t\t\t\t\tchar[] genericTypeSignature = null;", "-\t\t\t\t\tif(typeBinding.isParameterizedType() || typeBinding.isRawType()) {", "-\t\t\t\t\t\tcompleteLocalTypes(typeBinding);", "-\t\t\t\t\t\tgenericTypeSignature = typeBinding.computeUniqueKey();", "-\t\t\t\t\t}", "+\t\t\t\t\tthis.noProposal = false;"]}], "num": 19165}
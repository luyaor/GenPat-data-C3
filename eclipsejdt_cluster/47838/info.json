{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bff5eb114613ac386b976b02d018c8ed", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e90c29abf7442d67aea581a84d39d29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "64616a6f18519098ffdabd24c6b6c1160055f504", "commitAfterChange": "f48daaa14cf07a3667867a949eef9fc4b96daafa", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic static final boolean equals( \t\tchar[] first, \t\tchar[] second, \t\tboolean isCaseSensitive)", "signatureAfterChange": " \tpublic static final boolean equals(char[] first, char[] second, int secondStart, int secondEnd)", "diff": ["+\t */", "+\tpublic static final boolean equals(char[] first, char[] second, int secondStart, int secondEnd) {", "+\t\tif (first == second)", "+\t\t\treturn true;", "+\t\tif (first == null || second == null)", "+\t\t\treturn false;", "+\t\tif (first.length != secondEnd - secondStart)", "+\t\t\treturn false;", "+", "+\t\tfor (int i = first.length; --i >= 0;)", "+\t\t\tif (first[i] != second[i+secondStart])", "+\t\t\t\treturn false;", "+\t\treturn true;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84fe610909bc0fc58306f38277ae3461", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "2077a29bc8cfe42c01e5c07aa5d0c90e2eceb36b", "commitAfterChange": "ba2b33c0750d6d7311c1eadcadc15015d0ae8f36", "methodNumberBeforeChange": 134, "methodNumberAfterChange": 136, "signatureBeforeChange": " \tprivate void trimWhiteSpacesAndComments(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "signatureAfterChange": " \tprivate int [] trimWhiteSpacesAndComments(int start, int end)", "diff": ["-\t\tint start = expression.sourceStart;", "-\t\tint end = expression.sourceEnd;", "+\t}", "+\tprivate int [] trimWhiteSpacesAndComments(int start, int end) {", "+\t\tint [] positions = new int[]{start, end};", "-\t\tint trimLeftPosition = expression.sourceStart;", "-\t\tint trimRightPosition = expression.sourceEnd;", "+\t\tint trimLeftPosition = start;", "+\t\tint trimRightPosition = end;", "-\t\t\t\t\t\texpression.sourceStart = trimLeftPosition;", "-\t\t\t\t\t\texpression.sourceEnd = trimRightPosition;", "-\t\t\t\t\t\treturn;", "+\t\t\t\t\t\tpositions[0] = trimLeftPosition;", "+\t\t\t\t\t\tpositions[1] = trimRightPosition;", "+\t\t\t\t\t\treturn positions;", "+\t\treturn positions;"]}], "num": 47838}
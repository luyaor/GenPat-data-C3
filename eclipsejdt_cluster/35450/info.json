{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dabfa416a56fcd893a091e53b04ef1a7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d6383ac6359748c10f14257d49c5ff6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "039fe9e46951f3ae4fb135033e62de597c68c2d9", "commitAfterChange": "9a2f6070469e990d6a98dbcb9b47ac6f4413a2cc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tList[] convertSource(char[] source)", "signatureAfterChange": " \tint allTags(Javadoc docComment)", "diff": ["-\tList[] convertSource(char[] source) {", "-\t\tList comments = new ArrayList();", "-\t\tList numbers = new ArrayList();", "-\t\tStringBuffer buffer = new StringBuffer(source.length);", "-\t\tboolean javadoc = false;", "-\t\tboolean star = false;", "-\t\tboolean firstTag = true;", "-\t\tint number = 0;", "-\t\t\tif (javadoc) {", "-\t\t\t\tif (star) {", "-\t\t\t\t\tif (source[i] == '/') {", "-\t\t\t\t\t\tjavadoc = false;", "-\t\t\t\t\t\tbuffer.append(\"\\n */\");", "-\t\t\t\t\t\tcomments.add(buffer.toString());", "-\t\t\t\t\t\tnumbers.add(new Integer(number));", "-\t\t\t\t\t\tbuffer = new StringBuffer(source.length);", "-\t\t\t\t\t\tnumber = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tbuffer.append('*');", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif (source[i] == '/' && source[i+1] == '*' && source[i+2] == '*') {", "-\t\t\t\t\tjavadoc = true;", "-\t\t\tif (javadoc) {", "-\t\t\t\tif (source[i] == '\\r' || source[i] == '\\n') {", "-\t\t\t\t\twhile (source[i] == '*' || Character.isWhitespace(source[i])) {", "-\t\t\t\t\t\tstar = source[i++] == '*';", "-\t\t\t\t\tif (star && source[i] == '/') {", "-\t\t\t\t\t\tjavadoc = false;", "-\t\t\t\t\t\tbuffer.append(\"\\n */\");", "-\t\t\t\t\t\tcomments.add(buffer.toString());", "-\t\t\t\t\t\tnumbers.add(new Integer(number));", "-\t\t\t\t\t\tbuffer = new StringBuffer(source.length);", "-\t\t\t\t\t\tnumber = 0;", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tif (firstTag) {", "-\t\t\t\t\t\tfirstTag = false;", "-\t\t\t\t\t\tbuffer.append(\" \\n * \");", "-\t\t\t\t\t\tnumber++;", "-\t\t\t\t\t} else if (source[i] == '@') {", "-\t\t\t\t\t\tbuffer.append(\"\\n * \");", "-\t\t\t\t\t\tnumber++;", "-\t\t\t\t} else {", "-\t\t\t\t\tstar = source[i] == '*';", "-\t\t\t\t}", "-\t\t\t\tif (!star) buffer.append(source[i]);", "-\t\tList[] lists = new List[2];", "-\t\tlists[0] = numbers;", "-\t\tlists[1] = comments;", "-\t\treturn lists;", "+\tint allTags(Javadoc docComment) {", "+\t\tint all = 0;", "+\t\t// Count main tags", "+\t\tIterator tags = docComment.tags().listIterator();", "+\t\twhile (tags.hasNext()) {", "+\t\t\tTagElement tagElement = (TagElement) tags.next();", "+\t\t\tif (tagElement.getTagName() != null) {", "+\t\t\t\tall++;", "+\t\t\t}", "+\t\t\tIterator fragments = tagElement.fragments().listIterator();", "+\t\t\twhile (fragments.hasNext()) {", "+\t\t\t\tASTNode node = (ASTNode) fragments.next();", "+\t\t\t\tif (node.getNodeType() == ASTNode.TAG_ELEMENT) {", "+\t\t\t\t\tall++;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn all;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b4f1eec34092804ca7ca82813c39638", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "fa78e4ce6e57928678189feff94d4c736b9ff2c4", "commitAfterChange": "0f248db43070dcf1bc4390d09f1d6625c113fc80", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["+", "+\t\t\t\t\tcase 'c':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_CATEGORY)) {", "+\t\t\t\t\t\t\tvalid = parseIdentifierTag();", "+\t\t\t\t\t\t\tthis.tagValue = TAG_CATEGORY_VALUE;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\tbreak;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'e':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_EXCEPTION)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_EXCEPTION_VALUE;", "+\t\t\t\t\t\t\tvalid = parseThrows();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 'p':", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_PARAM)) {", "-\t\t\t\t\t\t\tthis.tagValue = TAG_PARAM_VALUE;", "-\t\t\t\t\t\t\tvalid = parseParam();", "-\t\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 'e':", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_EXCEPTION)) {", "-\t\t\t\t\t\t\tthis.tagValue = TAG_EXCEPTION_VALUE;", "-\t\t\t\t\t\t\tvalid = parseThrows();", "-\t\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 's':", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_SEE)) {", "-\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "-\t\t\t\t\t\t\t\t// Cannot have @see inside inline comment", "-\t\t\t\t\t\t\t\tvalid = false;", "-\t\t\t\t\t\t\t\tif (this.sourceParser != null)", "-\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tthis.tagValue = TAG_SEE_VALUE;", "-\t\t\t\t\t\t\t\tvalid = parseReference();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\tbreak;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'p':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_PARAM)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_PARAM_VALUE;", "+\t\t\t\t\t\t\tvalid = parseParam();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 's':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_SEE)) {", "+\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "+\t\t\t\t\t\t\t\t// Cannot have @see inside inline comment", "+\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t\tif (this.sourceParser != null)", "+\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tthis.tagValue = TAG_SEE_VALUE;", "+\t\t\t\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\tbreak;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tcreateTag();", "+\t\t\t\t\t\tbreak;"]}], "num": 35450}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3dfc8cf662ebe0ac21e0d0ef1c6c0bc5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d7cdd0995ebf930e5ff114a38501550", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 27, "signatureBeforeChange": " public TypeReference getTypeReference(int dim)", "signatureAfterChange": " public TypeReference getTypeReference(int dim)", "diff": ["-\tint length;", "-\tif ((length = identifierLengthStack[identifierLengthPtr--]) == 1) {", "-\t\t// single variable reference", "+\tint length = identifierLengthStack[identifierLengthPtr--];", "+\tif (length < 0) { //flag for precompiled type reference on base types", "+\t\tTypeReference ref = TypeReference.baseTypeReference(-length, dim);", "+\t\tref.sourceStart = intStack[intPtr--];", "-\t\t\tSingleTypeReference ref = ", "-\t\t\t\tnew SingleTypeReference(", "-\t\t\t\t\tidentifierStack[identifierPtr], ", "-\t\t\t\t\tidentifierPositionStack[identifierPtr--]);", "-\t\t\tif (reportReferenceInfo) {", "-\t\t\t\trequestor.acceptTypeReference(ref.token, ref.sourceStart);", "-\t\t\t}", "-\t\t\treturn ref;", "+\t\t\tref.sourceEnd = intStack[intPtr--];", "-\t\t\tArrayTypeReference ref = ", "-\t\t\t\tnew ArrayTypeReference(", "-\t\t\t\t\tidentifierStack[identifierPtr], ", "-\t\t\t\t\tdim, ", "-\t\t\t\t\tidentifierPositionStack[identifierPtr--]); ", "+\t\t\tintPtr--; // no need to use this position as it is an array", "-\t\t\tif (reportReferenceInfo) {", "-\t\t\t\trequestor.acceptTypeReference(ref.token, ref.sourceStart);", "-\t\t\t}", "-\t\t\treturn ref;", "+\t\tif (reportReferenceInfo){", "+\t\t\t\trequestor.acceptTypeReference(ref.getParameterizedTypeName(), ref.sourceStart, ref.sourceEnd);", "+\t\t}", "+\t\treturn ref;", "-\t\tif (length < 0) { //flag for precompiled type reference on base types", "-\t\t\tTypeReference ref = TypeReference.baseTypeReference(-length, dim);", "-\t\t\tref.sourceStart = intStack[intPtr--];", "-\t\t\tif (dim == 0) {", "-\t\t\t\tref.sourceEnd = intStack[intPtr--];", "-\t\t\t} else {", "-\t\t\t\tintPtr--; // no need to use this position as it is an array", "-\t\t\t\tref.sourceEnd = endPosition;", "-\t\t\t}", "-\t\t\tif (reportReferenceInfo){", "-\t\t\t\t\trequestor.acceptTypeReference(ref.getTypeName(), ref.sourceStart, ref.sourceEnd);", "+\t\tint numberOfIdentifiers = this.genericsIdentifiersLengthStack[this.genericsIdentifiersLengthPtr--];", "+\t\tif (length != numberOfIdentifiers || this.genericsLengthStack[this.genericsLengthPtr] != 0) {", "+\t\t\t// generic type", "+\t\t\tTypeReference ref = getTypeReferenceForGenericType(dim, length, numberOfIdentifiers);", "+\t\t\tif (reportReferenceInfo) {", "+\t\t\t\tif (length == 1 && numberOfIdentifiers == 1) {", "+\t\t\t\t\tParameterizedSingleTypeReference parameterizedSingleTypeReference = (ParameterizedSingleTypeReference) ref;", "+\t\t\t\t\trequestor.acceptTypeReference(parameterizedSingleTypeReference.token, parameterizedSingleTypeReference.sourceStart);", "+\t\t\t\t} else {", "+\t\t\t\t\tParameterizedQualifiedTypeReference parameterizedQualifiedTypeReference = (ParameterizedQualifiedTypeReference) ref;", "+\t\t\t\t\trequestor.acceptTypeReference(parameterizedQualifiedTypeReference.tokens, parameterizedQualifiedTypeReference.sourceStart, parameterizedQualifiedTypeReference.sourceEnd);", "+\t\t\t\t}", "-\t\t} else { //Qualified variable reference", "+\t\t} else if (length == 1) {", "+\t\t\t// single variable reference", "+\t\t\tthis.genericsLengthPtr--; // pop the 0", "+\t\t\tif (dim == 0) {", "+\t\t\t\tSingleTypeReference ref = ", "+\t\t\t\t\tnew SingleTypeReference(", "+\t\t\t\t\t\tidentifierStack[identifierPtr], ", "+\t\t\t\t\t\tidentifierPositionStack[identifierPtr--]);", "+\t\t\t\tif (reportReferenceInfo) {", "+\t\t\t\t\trequestor.acceptTypeReference(ref.token, ref.sourceStart);", "+\t\t\t\t}", "+\t\t\t\treturn ref;", "+\t\t\t} else {", "+\t\t\t\tArrayTypeReference ref = ", "+\t\t\t\t\tnew ArrayTypeReference(", "+\t\t\t\t\t\tidentifierStack[identifierPtr], ", "+\t\t\t\t\t\tdim, ", "+\t\t\t\t\t\tidentifierPositionStack[identifierPtr--]); ", "+\t\t\t\tref.sourceEnd = endPosition;", "+\t\t\t\tif (reportReferenceInfo) {", "+\t\t\t\t\trequestor.acceptTypeReference(ref.token, ref.sourceStart);", "+\t\t\t\t}", "+\t\t\t\treturn ref;", "+\t\t\t}", "+\t\t} else {//Qualified variable reference", "+\t\t\tthis.genericsLengthPtr--;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1981c0e1974968c35907fe2d7f9817e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 201, "methodNumberAfterChange": 320, "signatureBeforeChange": " protected TypeReference getTypeReference(int dim)", "signatureAfterChange": " protected TypeReference getTypeReference(int dim)", "diff": ["-protected TypeReference getTypeReference(int dim) { /* build a Reference on a variable that may be qualified or not", "-This variable is a type reference and dim will be its dimensions*/", "+}", "+protected TypeReference getTypeReference(int dim) {", "+\t/* build a Reference on a variable that may be qualified or not", "+\t This variable is a type reference and dim will be its dimensions*/", "-\tint length;", "-\tif ((length = this.identifierLengthStack[this.identifierLengthPtr--]) == 1) {", "-\t\t// single variable reference", "+\tint length = this.identifierLengthStack[this.identifierLengthPtr--];", "+\tif (length < 0) { //flag for precompiled type reference on base types", "+\t\tref = TypeReference.baseTypeReference(-length, dim);", "+\t\tref.sourceStart = this.intStack[this.intPtr--];", "-\t\t\tref = ", "-\t\t\t\tnew SingleTypeReference(", "-\t\t\t\t\tthis.identifierStack[this.identifierPtr], ", "-\t\t\t\t\tthis.identifierPositionStack[this.identifierPtr--]); ", "+\t\t\tref.sourceEnd = this.intStack[this.intPtr--];", "-\t\t\tref = ", "-\t\t\t\tnew ArrayTypeReference(", "-\t\t\t\t\tthis.identifierStack[this.identifierPtr], ", "-\t\t\t\t\tdim, ", "-\t\t\t\t\tthis.identifierPositionStack[this.identifierPtr--]); ", "-\t\t\tref.sourceEnd = this.endPosition;\t\t\t", "+\t\t\tthis.intPtr--;", "+\t\t\tref.sourceEnd = this.endPosition;", "-\t\tif (length < 0) { //flag for precompiled type reference on base types", "-\t\t\tref = TypeReference.baseTypeReference(-length, dim);", "-\t\t\tref.sourceStart = this.intStack[this.intPtr--];", "+\t\tint numberOfIdentifiers = this.genericsIdentifiersLengthStack[this.genericsIdentifiersLengthPtr--];", "+\t\tif (length != numberOfIdentifiers || this.genericsLengthStack[this.genericsLengthPtr] != 0) {", "+\t\t\t// generic type", "+\t\t\tref = getTypeReferenceForGenericType(dim, length, numberOfIdentifiers);", "+\t\t} else if (length == 1) {", "+\t\t\t// single variable reference", "+\t\t\tthis.genericsLengthPtr--; // pop the 0", "-\t\t\t\tref.sourceEnd = this.intStack[this.intPtr--];", "+\t\t\t\tref = ", "+\t\t\t\t\tnew SingleTypeReference(", "+\t\t\t\t\t\tthis.identifierStack[this.identifierPtr], ", "+\t\t\t\t\t\tthis.identifierPositionStack[this.identifierPtr--]); ", "-\t\t\t\tthis.intPtr--;", "-\t\t\t\tref.sourceEnd = this.endPosition;", "+\t\t\t\tref = ", "+\t\t\t\t\tnew ArrayTypeReference(", "+\t\t\t\t\t\tthis.identifierStack[this.identifierPtr], ", "+\t\t\t\t\t\tdim, ", "+\t\t\t\t\t\tthis.identifierPositionStack[this.identifierPtr--]); ", "+\t\t\t\tref.sourceEnd = this.endPosition;\t\t\t", "-\t\t} else { //Qualified variable reference", "+\t\t} else {", "+\t\t\tthis.genericsLengthPtr--;", "+\t\t\t//Qualified variable reference"]}], "num": 4411}
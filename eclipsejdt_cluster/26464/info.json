{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa1db56eb580a16b13b24e2c3b21f1b8", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60315decbec45a11b449dbcbd1d139bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "8d889a3eb8b924cc60e70fa9d37c9ce9262cf8ad", "commitAfterChange": "ab08e2b1c40ffe64d8b5189480657f3b9f8c23fa", "methodNumberBeforeChange": 311, "methodNumberAfterChange": 311, "signatureBeforeChange": " public void test231_sourcepath_vs_classpath()", "signatureAfterChange": " public void test231_sourcepath_vs_classpath() throws IOException, InterruptedException", "diff": ["-// here, class file is newer than source file", "-public void test231_sourcepath_vs_classpath() {", "-\trunConformTest(", "-\t\tnew String[] {", "-\t\t\t\"src1/X.java\",", "-\t\t\t\"public class X {\\n\" +", "-\t\t\t\"}\\n\",", "-\t\t\t\"src2/X.java\",", "-\t\t\t\"public class X {\\n\" +", "-\t\t\t\"  Zork error;\\n\" +", "-\t\t\t\"}\\n\",", "-\t\t},", "-\t\t\"\\\"\" + OUTPUT_DIR +  File.separator + \"src1\" + File.separator + \"X.java\\\"\"", "-\t\t+ \" -proc:none -d \\\"\" + OUTPUT_DIR + File.separator + \"bin1\\\"\",", "-\t\t\"\",", "-\t\t\"\",", "-\t\ttrue);", "-\t// sourcepath preferred over classpath", "-\trunTest(", "-\t\tfalse /* shouldCompileOK */,", "-\t\tnew String[] { /* testFiles */", "-\t\t\t\"Y.java\",", "-\t\t\t\"public class Y {\\n\" +", "-\t\t\t\"  X x;\\n\" +", "-\t\t\t\"}\\n\",", "-\t\t},", "-\t\t\"\\\"\" + OUTPUT_DIR +  File.separator + \"Y.java\\\"\" /* commandLine */", "-\t\t+ \" -classpath \\\"\" + OUTPUT_DIR + File.separator + \"bin1\\\"\"", "-\t\t+ \" -sourcepath \\\"\" + OUTPUT_DIR + File.separator + \"src2\\\"\"", "-\t\t+ \" -proc:none -d \\\"\" + OUTPUT_DIR + \"\\\"\",", "-\t\t\"\" /* expectedOutOutputString */,", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/src2/X.java (at line 2)\\n\" + ", "-\t\t\"\tZork error;\\n\" + ", "-\t\t\"\t^^^^\\n\" + ", "-\t\t\"Zork cannot be resolved to a type\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"1 problem (1 error)\" /* expectedErrOutputString */,", "-\t\tfalse /* shouldFlushOutputDirectory */,", "-\t\tnull /* progress */);", "-}", "+// javac takes the source file if it is more recent than the class file", "+public void test231_sourcepath_vs_classpath() throws IOException, InterruptedException {", "+\t// compile into bin1", "+\trunConformTest(", "+\t\tnew String[] {", "+\t\t\t\"src1/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  public static final int CONST = 1;\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t},", "+\t\t\"\\\"\" + OUTPUT_DIR + File.separator + \"src1\" + File.separator + \"X.java\\\"\"", "+\t\t+ \" -proc:none -d \\\"\" + OUTPUT_DIR + File.separator + \"bin1\" + \"\\\"\",", "+\t\t\"\",", "+\t\t\"\",", "+\t\ttrue);", "+\t// ensure that source file is newer than class file (some file systems", "+\t// store the modification time at a second precision)", "+\tFile sourceFile = new File(OUTPUT_DIR + File.separator + \"src2\" + File.separator + \"X.java\"),", "+\t  classFile = new File(OUTPUT_DIR + File.separator + \"bin1\" + File.separator + \"X.class\");", "+\tnew File(OUTPUT_DIR + File.separator + \"src2\").mkdirs();", "+\tdo {", "+\t\tUtil.writeToFile(", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"}\\n\", ", "+\t\t\tsourceFile.getPath());", "+\t} while (classFile.lastModified() >= sourceFile.lastModified());", "+\t// compile with sourcepath and classpath: src2/X.java is preferred", "+\tString sourceFilePath = \"\\\"\" + OUTPUT_DIR +  File.separator + \"Y.java\\\"\";", "+\tString commonOptions = ", "+\t\t\" -classpath \\\"\" + OUTPUT_DIR + File.separator + \"bin1\" + \"\\\"\"", "+\t\t+ \" -sourcepath \\\"\" + OUTPUT_DIR + File.separator + \"src2\" + \"\\\"\"", "+\t\t+ \" -d \\\"\" + OUTPUT_DIR + File.separator + \"bin2\" + \"\\\"\";", "+\t// sourcepath preferred over classpath", "+\trunTest(", "+\t\tfalse /* shouldCompileOK */,", "+\t\tnew String[] { /* testFiles */", "+\t\t\t\"Y.java\",", "+\t\t\t\"public class Y {\\n\" +", "+\t\t\t\"  public static void main (String[] args) {\\n\" +", "+\t\t\t\"    System.out.println(X.CONST);\\n\" +", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t},", "+\t\tsourceFilePath + commonOptions + \" -proc:none \" /* commandLine */,", "+\t\t\"\" /* expectedOutOutputString */,", "+\t\t\"----------\\n\" +  /* expectedErrOutputString */", "+\t\t\"1. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/Y.java (at line 3)\\n\" + ", "+\t\t\"\tSystem.out.println(X.CONST);\\n\" + ", "+\t\t\"\t                   ^^^^^^^\\n\" + ", "+\t\t\"X.CONST cannot be resolved\\n\" + ", "+\t\t\"1 problem (1 error)\",", "+\tif (RUN_JAVAC) {", "+\t\tIterator javacCompilersIterator = javacCompilers.iterator();", "+\t\tString sourceFileNames[] = new String[] {sourceFilePath}; ", "+\t\twhile (javacCompilersIterator.hasNext()) {", "+\t\t\tJavacCompiler javacCompiler = (JavacCompiler) javacCompilersIterator.next();", "+\t\t\tassertFalse(javacCompiler.compile(", "+\t\t\t\t\tcommonOptions /* options */, ", "+\t\t\t\t\tsourceFileNames /* source file names */));", "+\t\t\t// compile fails as well", "+\t\t}", "+\t\tassertFalse(runJavac(commonOptions, new String[] {sourceFilePath}, OUTPUT_DIR));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71acad8baa757b53f920f17218e144e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "8d889a3eb8b924cc60e70fa9d37c9ce9262cf8ad", "commitAfterChange": "ab08e2b1c40ffe64d8b5189480657f3b9f8c23fa", "methodNumberBeforeChange": 314, "methodNumberAfterChange": 314, "signatureBeforeChange": " public void test234_sourcepath_vs_classpath()", "signatureAfterChange": " public void test234_sourcepath_vs_classpath() throws IOException, InterruptedException", "diff": ["-// we do not do this", "-public void test234_sourcepath_vs_classpath() {", "-\t// we find Z via sourcepath, javac wouldn't", "-\trunTest(", "-\t\ttrue /* shouldCompileOK */,", "-\t\tnew String[] { /* testFiles */", "-\t\t\t\"Y.java\",", "-\t\t\t\"public class Y {\\n\" +", "-\t\t\t\"  X x;\\n\" +", "-\t\t\t\"  Z z;\\n\" +", "-\t\t\t\"}\\n\",", "-\t\t\t\"src1/X.java\",", "-\t\t\t\"public class X {\\n\" +", "-\t\t\t\"}\\n\",", "-\t\t\t\"src2/Z.java\",", "-\t\t\t\"public class Z {\\n\" +", "-\t\t\t\"}\\n\",", "-\t\t},", "-\t\t\"\\\"\" + OUTPUT_DIR +  File.separator + \"Y.java\\\"\" /* commandLine */", "-\t\t+ \" -classpath \\\"\" + OUTPUT_DIR + File.separator + \"src2\\\"\"", "-\t\t+ \" -sourcepath \\\"\" + OUTPUT_DIR + File.separator + \"src1\\\"\"", "-\t\t+ \" -proc:none -d \\\"\" + OUTPUT_DIR + \"\\\"\",", "-\t\t\"\" /* expectedOutOutputString */,", "-\t\t\"\" /* expectedErrOutputString */,", "-\t\ttrue /* shouldFlushOutputDirectory */,", "-\t\tnull /* progress */);", "-\t// using only classpath, both ecj and javac find X and Z", "-\trunTest(", "-\t\ttrue /* shouldCompileOK */,", "-\t\tnull /* testFiles */,", "-\t\t\"\\\"\" + OUTPUT_DIR +  File.separator + \"Y.java\\\"\" /* commandLine */", "-\t\t+ \" -classpath \\\"\" + OUTPUT_DIR + File.separator + \"src2\\\"\"", "-\t\t+ \" -classpath \\\"\" + OUTPUT_DIR + File.separator + \"src1\\\"\"", "-\t\t+ \" -proc:none -d \\\"\" + OUTPUT_DIR + \"\\\"\",", "-\t\t\"\" /* expectedOutOutputString */,", "-\t\t\"\" /* expectedErrOutputString */,", "-\t\tfalse /* shouldFlushOutputDirectory */,", "-\t\tnull /* progress */);", "-}", "+// ecj goes on finding source files there", "+public void test234_sourcepath_vs_classpath() throws IOException, InterruptedException {", "+\tString commonOptions = \" -d \\\"\" + OUTPUT_DIR + File.separator + \"bin\\\"\" ", "+\t\t+ \" -sourcepath \\\"\" + OUTPUT_DIR + File.separator + \"src1\\\"\"", "+\t\t+ \" -classpath \\\"\" + OUTPUT_DIR + File.separator + \"src2\\\" \";", "+\tString sourceFilePath = \"\\\"\" + OUTPUT_DIR + File.separator + \"src3\" + File.separator + \"Z.java\\\"\";", "+\t// ecj compiles src1 and src2 source files as needed, regardless of their", "+\t// being on the sourcepath or the classpath", "+\trunTest(", "+\t\ttrue /* shouldCompileOK*/,", "+\t\tnew String[] { /* testFiles */", "+\t\t\t\"src1/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"}\\n\",", "+\t\t\t\"src2/Y.java\",", "+\t\t\t\"public class Y {\\n\" +", "+\t\t\t\"}\\n\",", "+\t\t\t\"src3/Z.java\",", "+\t\t\t\"public class Z {\\n\" +", "+\t\t\t\"  X x;\\n\" +", "+\t\t\t\"  Y y;\\n\" +", "+\t\t\t\"}\\n\",", "+\t\t},", "+\t\tsourceFilePath + \" -proc:none \" + commonOptions /* commandLine */,", "+\t\t\"\" /* expectedOutOutputString */,", "+\t\t\"\" /* expectedErrOutputString */,", "+\t\ttrue /* shouldFlushOutputDirectory */,", "+\t\tnull /* progress */);", "+\tif (RUN_JAVAC) {", "+\t\t// in contrast with test#232 when src1 is on the classpath, javac fails", "+\t\t// to find src1/X.java; this is because -sourcepath inhibits source files", "+\t\t// search in classpath directories", "+\t\tIterator javacCompilersIterator = javacCompilers.iterator();", "+\t\tString sourceFileNames[] = new String[] {sourceFilePath}; ", "+\t\twhile (javacCompilersIterator.hasNext()) {", "+\t\t\tJavacCompiler javacCompiler = (JavacCompiler) javacCompilersIterator.next();", "+\t\t\tassertFalse(javacCompiler.compile(", "+\t\t\t\t\tcommonOptions /* options */, ", "+\t\t\t\t\tsourceFileNames /* source file names */));", "+\t\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7dd1b6517e4e6f50491a008b0e62f8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "8d889a3eb8b924cc60e70fa9d37c9ce9262cf8ad", "commitAfterChange": "ab08e2b1c40ffe64d8b5189480657f3b9f8c23fa", "methodNumberBeforeChange": 313, "methodNumberAfterChange": 313, "signatureBeforeChange": " public void test233_repeated_classpath()", "signatureAfterChange": " public void test233_repeated_sourcepath() throws IOException, InterruptedException", "diff": ["-// keeps the last one", "-public void test233_repeated_classpath() {", "-\tString expectedLog =", "-\t\t\"[parsing    ---OUTPUT_DIR_PLACEHOLDER---/Y.java - #1/1]\\n\" + ", "-\t\t\"[reading    java/lang/Object.class]\\n\" + ", "-\t\t\"[analyzing  ---OUTPUT_DIR_PLACEHOLDER---/Y.java - #1/1]\\n\" + ", "-\t\t\"[parsing    ---OUTPUT_DIR_PLACEHOLDER---/src1/X.java - #2/2]\\n\" + ", "-\t\t\"[writing    Y.class - #1]\\n\" + ", "-\t\t\"[completed  ---OUTPUT_DIR_PLACEHOLDER---/Y.java - #1/2]\\n\" + ", "-\t\t\"[analyzing  ---OUTPUT_DIR_PLACEHOLDER---/src1/X.java - #2/2]\\n\" + ", "-\t\t\"[completed  ---OUTPUT_DIR_PLACEHOLDER---/src1/X.java - #2/2]\\n\" + ", "-\t\t\"[2 units compiled]\\n\" + ", "-\t\t\"[1 .class file generated]\\n\";", "-\trunConformTest(", "-\t\tnew String[] {", "-\t\t\t\"src1/X.java\",", "-\t\t\t\"public class X {\\n\" +", "-\t\t\t\"}\\n\",", "-\t\t\t\"src2/X.java\",", "-\t\t\t\"public class X {\\n\" +", "-\t\t\t\"  Zork error;\\n\" +", "-\t\t\t\"}\\n\",", "-\t\t\t\"Y.java\",", "-\t\t\t\"public class Y {\\n\" +", "-\t\t\t\"  X x;\\n\" +", "-\t\t\t\"}\\n\",", "-\t\t},", "-\t\t\"\\\"\" + OUTPUT_DIR +  File.separator + \"Y.java\\\"\"", "-\t\t+ \" -classpath \\\"\" + OUTPUT_DIR + File.separator + \"src1[-d none]\\\"\"", "-\t\t+ \" -classpath \\\"\" + OUTPUT_DIR + File.separator + \"src2\\\"\"", "-\t\t+ \" -verbose -proc:none\",", "-\t\texpectedLog,", "-\t\t\"\",", "-\t\ttrue);", "-\trunConformTest(", "-\t\tnull,", "-\t\t\"\\\"\" + OUTPUT_DIR +  File.separator + \"Y.java\\\"\"", "-\t\t+ \" -classpath \\\"\" + OUTPUT_DIR + File.separator + \"src1[-d none]\\\"\"", "-\t\t+ File.pathSeparator + \"\\\"\" + OUTPUT_DIR + File.separator + \"src2\\\"\"", "-\t\t+ \" -verbose -proc:none\",", "-\t\texpectedLog,", "-\t\t\"\",", "-\t\tfalse);", "-}", "+// only keeps the last one (and swallows the others silently)", "+public void test233_repeated_sourcepath() throws IOException, InterruptedException {", "+\tString commonOptions = \" -d \\\"\" + OUTPUT_DIR + \"\\\"\" ", "+\t\t+ \" -sourcepath \\\"\" + OUTPUT_DIR + File.separator + \"src1\\\"\"", "+\t\t+ \" -sourcepath \\\"\" + OUTPUT_DIR + File.separator + \"src2\\\"\";", "+\tString sourceFilePathZ = \"\\\"\" + OUTPUT_DIR + File.separator + \"src3\" + File.separator + \"Z.java\\\"\";", "+\tString sourceFilePathW = \"\\\"\" + OUTPUT_DIR + File.separator + \"src3\" + File.separator + \"W.java\\\"\";", "+\trunTest(", "+\t\tfalse /* shouldCompileOK */,", "+\t\tnew String[] { /* testFiles */", "+\t\t\t\"src1/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"}\\n\",", "+\t\t\t\"src2/Y.java\",", "+\t\t\t\"public class Y {\\n\" +", "+\t\t\t\"}\\n\",", "+\t\t\t\"src3/Z.java\",", "+\t\t\t\"public class Z {\\n\" +", "+\t\t\t\"  Y y;\\n\" +", "+\t\t\t\"}\\n\",", "+\t\t\t\"src3/W.java\",", "+\t\t\t\"public class W {\\n\" +", "+\t\t\t\"  X x;\\n\" +", "+\t\t\t\"  Y y;\\n\" +", "+\t\t\t\"}\\n\",", "+\t\t},", "+\t\tsourceFilePathZ + \" -proc:none \" + commonOptions /* commandLine */,", "+\t\t\"\" /* expectedOutOutputString */,", "+\t\t\"duplicate sourcepath specification: -sourcepath ---OUTPUT_DIR_PLACEHOLDER---/src2\\n\" /* expectedErrOutputString */,", "+\t\ttrue /* shouldFlushOutputDirectory */,", "+\t\tnull /* progress */);", "+\tif (RUN_JAVAC) {", "+\t\tIterator javacCompilersIterator = javacCompilers.iterator();", "+\t\tString sourceFileNamesZ[] = new String[] {sourceFilePathZ}; ", "+\t\tString sourceFileNamesW[] = new String[] {sourceFilePathW}; ", "+\t\twhile (javacCompilersIterator.hasNext()) {", "+\t\t\tJavacCompiler javacCompiler = (JavacCompiler) javacCompilersIterator.next();", "+\t\t\t// succeeds because it picks src2 up", "+\t\t\tassertTrue(javacCompiler.compile(", "+\t\t\t\t\tcommonOptions /* options */, ", "+\t\t\t\t\tsourceFileNamesZ /* source file names */));", "+\t\t\t// fails because it misses src1", "+\t\t\tassertFalse(javacCompiler.compile(", "+\t\t\t\t\tcommonOptions /* options */, ", "+\t\t\t\t\tsourceFileNamesW /* source file names */));", "+\t\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6fd97faeea16bd9c65cee42df1d8032", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "8d889a3eb8b924cc60e70fa9d37c9ce9262cf8ad", "commitAfterChange": "ab08e2b1c40ffe64d8b5189480657f3b9f8c23fa", "methodNumberBeforeChange": 315, "methodNumberAfterChange": 315, "signatureBeforeChange": " public void test235_classpath()", "signatureAfterChange": " public void test235_classpath() throws IOException, InterruptedException", "diff": ["-// in classpath order", "-public void test235_classpath() {", "-\trunTest(", "-\t\ttrue /* shouldCompileOK */,", "-\t\tnew String[] { /* testFiles */", "-\t\t\t\"Y.java\",", "-\t\t\t\"public class Y {\\n\" +", "-\t\t\t\"  X x;\\n\" +", "-\t\t\t\"}\\n\",", "-\t\t\t\"src1/X.java\",", "-\t\t\t\"public class X {\\n\" +", "-\t\t\t\"}\\n\",", "-\t\t\t\"src2/X.java\",", "-\t\t\t\"public class X {\\n\" +", "-\t\t\t\"  Zork z;\\n\" +", "-\t\t\t\"}\\n\",", "-\t\t},", "-\t\t\"\\\"\" + OUTPUT_DIR +  File.separator + \"Y.java\\\"\" /* commandLine */", "-\t\t+ \" -classpath \\\"\" + OUTPUT_DIR + File.separator + \"src1\\\"[-d \\\"\" + OUTPUT_DIR + File.separator + \"bin1\\\"]\"", "-\t\t+ \" -proc:none -d \\\"\" + OUTPUT_DIR + \"\\\"\",", "-\t\t\"\" /* expectedOutOutputString */,", "-\t\t\"\" /* expectedErrOutputString */,", "-\t\ttrue /* shouldFlushOutputDirectory */,", "-\t\tnull /* progress */);", "-\t// X.class found before X.java in classpath order entry", "-\trunTest(", "-\t\ttrue /* shouldCompileOK */,", "-\t\tnull,", "-\t\t\"\\\"\" + OUTPUT_DIR +  File.separator + \"Y.java\\\"\" /* commandLine */", "-\t\t+ \" -classpath \\\"\" + OUTPUT_DIR + File.separator + \"bin1\\\"\"", "-\t\t+ \" -classpath \\\"\" + OUTPUT_DIR + File.separator + \"src2\\\"\"", "-\t\t+ \" -verbose -proc:none -d \\\"\" + OUTPUT_DIR + \"\\\"\",", "-\t\t\"[parsing    ---OUTPUT_DIR_PLACEHOLDER---/Y.java - #1/1]\\n\" + ", "-\t\t\"[reading    java/lang/Object.class]\\n\" + ", "-\t\t\"[analyzing  ---OUTPUT_DIR_PLACEHOLDER---/Y.java - #1/1]\\n\" + ", "-\t\t\"[reading    X.class]\\n\" + ", "-\t\t\"[writing    Y.class - #1]\\n\" + ", "-\t\t\"[completed  ---OUTPUT_DIR_PLACEHOLDER---/Y.java - #1/1]\\n\" + ", "-\t\t\"[1 unit compiled]\\n\" + ", "-\t\t\"[1 .class file generated]\\n\" /* expectedOutOutputString */,", "-\t\t\"\" /* expectedErrOutputString */,", "-\t\tfalse /* shouldFlushOutputDirectory */,", "-\t\tnull /* progress */);", "-\t// X.java found before X.class in classpath order entry; javac would select", "-\t// X.class since it is more recent (except if using -Xprefer:source)", "-\trunTest(", "-\t\tfalse /* shouldCompileOK */,", "-\t\tnull,", "-\t\t\"\\\"\" + OUTPUT_DIR +  File.separator + \"Y.java\\\"\" /* commandLine */", "-\t\t+ \" -classpath \\\"\" + OUTPUT_DIR + File.separator + \"src2\\\"\"", "-\t\t+ \" -classpath \\\"\" + OUTPUT_DIR + File.separator + \"bin1\\\"\"", "-\t\t+ \" -verbose -proc:none -d \\\"\" + OUTPUT_DIR + \"\\\"\",", "-\t\t\"[parsing    ---OUTPUT_DIR_PLACEHOLDER---/Y.java - #1/1]\\n\" + ", "-\t\t\"[reading    java/lang/Object.class]\\n\" + ", "-\t\t\"[analyzing  ---OUTPUT_DIR_PLACEHOLDER---/Y.java - #1/1]\\n\" + ", "-\t\t\"[1 .class file generated]\\n\" /* expectedOutOutputString */,", "-\t\t\"1. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/src2/X.java (at line 2)\\n\" + ", "-\t\t\"\tZork z;\\n\" + ", "-\t\t\"\t^^^^\\n\" + ", "-\t\t\"Zork cannot be resolved to a type\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"1 problem (1 error)\" /* expectedErrOutputString */,", "+// in classpath order (non sourcepath involved here)", "+public void test235_classpath() throws IOException, InterruptedException {", "+\trunTest(", "+\t\ttrue /* shouldCompileOK*/,", "+\t\tnew String[] { /* testFiles */", "+\t\t\t\"src1/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  public static final int CONST = 1;\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\t\"src2/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"}\\n\",", "+\t\t},", "+\t\t\"\\\"\" + OUTPUT_DIR + File.separator + \"src1\" + File.separator + \"X.java\\\"\" /* commandLine */", "+\t\t+ \" -proc:none -d \\\"\" + OUTPUT_DIR + File.separator + \"bin1\" + \"\\\"\",", "+\t\t\"\" /* expectedOutOutputString */,", "+\t\t\"\" /* expectedErrOutputString */,", "+\t\ttrue /* shouldFlushOutputDirectory */,", "+\t\tnull /* progress */);", "+\t// ensure that class file is newer than source file (some file systems", "+\t// store the modification time at a second precision)", "+\tFile sourceFile = new File(OUTPUT_DIR + File.separator + \"src2\" + File.separator + \"X.java\"),", "+\t  classFile = new File(OUTPUT_DIR + File.separator + \"bin1\" + File.separator + \"X.class\");", "+\twhile (classFile.lastModified() <= sourceFile.lastModified()) {", "+\t\trunTest(", "+\t\t\ttrue /* shouldCompileOK*/,", "+\t\t\tnull /* testFiles */,", "+\t\t\t\"\\\"\" + OUTPUT_DIR +  File.separator + \"src1\" + File.separator + \"X.java\\\"\" /* commandLine */", "+\t\t\t+ \" -proc:none -d \\\"\" + OUTPUT_DIR + File.separator + \"bin1\" + \"\\\"\",", "+\t\t\t\"\" /* expectedOutOutputString */,", "+\t\t\t\"\" /* expectedErrOutputString */,", "+\t\t\tfalse /* shouldFlushOutputDirectory */,", "+\t\t\tnull /* progress */);", "+\t}", "+\t// compile with (buggy) src2 before (correct) bin1 in the classpath", "+\tString sourceFilePath = ", "+\t\t\"\\\"\" + OUTPUT_DIR + File.separator + \"Y.java\\\"\";", "+\tString commonOptions =", "+\t\t\" -classpath \\\"\" + OUTPUT_DIR + File.separator + \"src2\"", "+\t\t+ File.pathSeparator + OUTPUT_DIR + File.separator + \"bin1\\\"\"", "+\t\t+ \" -d \\\"\" + OUTPUT_DIR + File.separator + \"bin2\" + \"\\\"\";", "+\trunTest(", "+\t\tfalse /* shouldCompileOK*/,", "+\t\tnew String[] { /* testFiles */", "+\t\t\t\"Y.java\",", "+\t\t\t\"public class Y {\\n\" +", "+\t\t\t\"  public static void main (String[] args) {\\n\" +", "+\t\t\t\"    System.out.println(X.CONST);\\n\" +", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t},", "+\t\tsourceFilePath /* commandLine */", "+\t\t+ \" -proc:none \" + commonOptions,", "+\t\t\"\" /* expectedOutOutputString */,", "+\t\t\"----------\\n\" + /* expectedErrOutputString */", "+\t\t\"1. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/Y.java (at line 3)\\n\" + ", "+\t\t\"\tSystem.out.println(X.CONST);\\n\" + ", "+\t\t\"\t                   ^^^^^^^\\n\" + ", "+\t\t\"X.CONST cannot be resolved\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"1 problem (1 error)\",", "+\t\tfalse /* shouldFlushOutputDirectory */,", "+\t\tnull /* progress */);", "+\t// javac passes, using the most recent file amongst source and class files", "+\t// present on the classpath", "+\tif (RUN_JAVAC) {", "+\t\tIterator javacCompilersIterator = javacCompilers.iterator();", "+\t\tString sourceFileNames[] = new String[] {sourceFilePath}; ", "+\t\twhile (javacCompilersIterator.hasNext()) {", "+\t\t\tJavacCompiler javacCompiler = (JavacCompiler) javacCompilersIterator.next();", "+\t\t\tassertTrue(javacCompiler.compile(", "+\t\t\t\t\tcommonOptions /* options */, ", "+\t\t\t\t\tsourceFileNames /* source file names */));", "+\t\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec03b97bacf264e1f326083c520db838", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "8d889a3eb8b924cc60e70fa9d37c9ce9262cf8ad", "commitAfterChange": "ab08e2b1c40ffe64d8b5189480657f3b9f8c23fa", "methodNumberBeforeChange": 312, "methodNumberAfterChange": 312, "signatureBeforeChange": " public void test232_sourcepath_vs_classpath()", "signatureAfterChange": " public void test232_repeated_classpath() throws IOException, InterruptedException", "diff": ["-// file)", "-public void test232_sourcepath_vs_classpath() {", "-\trunConformTest(", "-\t\tnew String[] {", "-\t\t\t\"src1/X.java\",", "-\t\t\t\"public class X {\\n\" +", "-\t\t\t\"}\\n\",", "-\t\t},", "-\t\t\"\\\"\" + OUTPUT_DIR +  File.separator + \"src1\" + File.separator + \"X.java\\\"\"", "-\t\t+ \" -proc:none -d \\\"\" + OUTPUT_DIR + File.separator + \"bin1\\\"\",", "-\t\t\"\",", "-\t\t\"\",", "-\t\ttrue);", "-\t// sourcepath preferred over classpath", "-\trunTest(", "-\t\tfalse /* shouldCompileOK */,", "-\t\tnew String[] { /* testFiles */", "-\t\t\t\"Y.java\",", "-\t\t\t\"public class Y {\\n\" +", "-\t\t\t\"  X x;\\n\" +", "-\t\t\t\"}\\n\",", "-\t\t\t\"src2/X.java\",", "-\t\t\t\"public class X {\\n\" +", "-\t\t\t\"  Zork error;\\n\" +", "-\t\t\t\"}\\n\",", "-\t\t},", "-\t\t\"\\\"\" + OUTPUT_DIR +  File.separator + \"Y.java\\\"\" /* commandLine */", "-\t\t+ \" -classpath \\\"\" + OUTPUT_DIR + File.separator + \"bin1\\\"\"", "-\t\t+ \" -sourcepath \\\"\" + OUTPUT_DIR + File.separator + \"src2\\\"\"", "-\t\t+ \" -proc:none -d \\\"\" + OUTPUT_DIR + \"\\\"\",", "-\t\t\"\" /* expectedOutOutputString */,", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/src2/X.java (at line 2)\\n\" + ", "-\t\t\"\tZork error;\\n\" + ", "-\t\t\"\t^^^^\\n\" + ", "-\t\t\"Zork cannot be resolved to a type\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"1 problem (1 error)\" /* expectedErrOutputString */,", "-\t\tfalse /* shouldFlushOutputDirectory */,", "-\t\tnull /* progress */);", "-}", "+// only keeps the last one (and swallows the others silently)", "+public void test232_repeated_classpath() throws IOException, InterruptedException {", "+\tString commonOptions = \" -d \\\"\" + OUTPUT_DIR + File.separator + \"bin\" ", "+\t\t+ \"\\\" -classpath \\\"\" + OUTPUT_DIR + File.separator + \"src1\";", "+\tString combinedClasspathOptions = commonOptions + File.pathSeparator", "+\t\t+ OUTPUT_DIR + File.separator + \"src2\\\" \";", "+\tString splitClasspathOptions = commonOptions", "+\t\t+ \"\\\" -classpath \\\"\" + OUTPUT_DIR + File.separator + \"src2\\\" \";", "+\tString sourceFilePath = \"\\\"\" + OUTPUT_DIR + File.separator + \"src3\" + File.separator + \"Z.java\\\"\";", "+\t// ecj considers repeated classpath entries as if they were concatenated", "+\t// into one", "+\trunTest(", "+\t\ttrue /* shouldCompileOK*/,", "+\t\tnew String[] { /* testFiles */", "+\t\t\t\"src1/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"}\\n\",", "+\t\t\t\"src2/Y.java\",", "+\t\t\t\"public class Y {\\n\" +", "+\t\t\t\"}\\n\",", "+\t\t\t\"src3/Z.java\",", "+\t\t\t\"public class Z {\\n\" +", "+\t\t\t\"  X x;\\n\" +", "+\t\t\t\"  Y y;\\n\" +", "+\t\t\t\"}\\n\",", "+\t\t},", "+\t\tsourceFilePath + \" -proc:none \" + combinedClasspathOptions /* commandLine */,", "+\t\t\"\" /* expectedOutOutputString */,", "+\t\t\"\" /* expectedErrOutputString */,", "+\t\ttrue /* shouldFlushOutputDirectory */,", "+\t\tnull /* progress */);", "+\trunTest(", "+\t\ttrue /* shouldCompileOK*/,", "+\t\tnull /* testFiles */,", "+\t\tsourceFilePath + \" -proc:none \" + splitClasspathOptions /* commandLine */,", "+\t\t\"\" /* expectedOutOutputString */,", "+\t\t\"\" /* expectedErrOutputString */,", "+\t\tfalse /* shouldFlushOutputDirectory */,", "+\t\tnull /* progress */);", "+\tif (RUN_JAVAC) {", "+\t\t// javac skips all but the last classpath entry (which results into an", "+\t\t// error in the split case here)", "+\t\tIterator javacCompilersIterator = javacCompilers.iterator();", "+\t\tString sourceFileNames[] = new String[] {sourceFilePath}; ", "+\t\twhile (javacCompilersIterator.hasNext()) {", "+\t\t\tJavacCompiler javacCompiler = (JavacCompiler) javacCompilersIterator.next();", "+\t\t\tassertTrue(javacCompiler.compile(", "+\t\t\t\t\tcombinedClasspathOptions /* options */, ", "+\t\t\t\t\tsourceFileNames /* source file names */));", "+\t\t\tassertFalse(javacCompiler.compile(", "+\t\t\t\t\tsplitClasspathOptions /* options */, ", "+\t\t\t\t\tsourceFileNames /* source file names */));", "+\t\t}", "+\t}", "+}"]}], "num": 26464}
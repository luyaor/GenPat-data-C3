{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2cc543d1ef51881d16f1984bd819e355", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10d7fbd12e41348f971c6b28afa40d6f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0e9c92a289e8289e1100d3a271080a7d3143db00", "commitAfterChange": "c1f9e29ca5563a9d9eacc16150dd94aa203e5ff7", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 123, "signatureBeforeChange": " \tpublic void testBug82208_SearchAllTypeNames_INTERFACE() throws CoreException", "signatureAfterChange": " \tpublic void testBug92944_INTERFACE() throws CoreException", "diff": ["-\t}", "-\tpublic void testBug82208_SearchAllTypeNames_INTERFACE() throws CoreException {", "-\t\tresultCollector.showRule = true;", "-\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "-\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "-\t\tthis.discard = false;", "-\t\tTypeNameRequestor requestor =  new SearchTests.SearchTypeNameRequestor();", "-\t\tnew SearchEngine(this.workingCopies).searchAllTypeNames(", "-\t\t\tnull,", "-\t\t\tnull,", "-\t\t\tSearchPattern.R_PATTERN_MATCH, // case insensitive", "-\t\t\tINTERFACE,", "-\t\t\tgetJavaSearchScopeBugs(),", "-\t\t\trequestor,", "-\t\t\tIJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH,", "-\t\t\tnull", "-\t\t);", "-\t\tassertSearchResults(", "-\t\t\t\"Unexpected all type names\",", "-\t\t\t\"b82208.B82208_I\\n\" + ", "-\t\t\t\"java.io.Serializable\\n\" + ", "-\t\t\t\"java.lang.Comparable\\n\" +", "-\t\t\t\"java.lang.annotation.Annotation\", // Annotation is an interface in java.lang", "-\t\t\trequestor);", "-\t}", "+\t}", "+\tpublic void testBug92944_INTERFACE() throws CoreException {", "+\t\tresultCollector.showRule = true;", "+\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "+\t\tassertEquals(\"Problem in tests processing\", 1, workingCopies.length);", "+\t\tthis.discard = false;", "+\t\tTypeNameRequestor requestor =  new SearchTests.SearchTypeNameRequestor();", "+\t\tnew SearchEngine(this.workingCopies).searchAllTypeNames(", "+\t\t\tnull,", "+\t\t\tnull,", "+\t\t\tSearchPattern.R_PATTERN_MATCH, // case insensitive", "+\t\t\tINTERFACE,", "+\t\t\tgetJavaSearchScopeBugs(),", "+\t\t\trequestor,", "+\t\t\tIJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH,", "+\t\t\tnull", "+\t\t);", "+\t\tassertSearchResults(", "+\t\t\t\"Unexpected all type names\",", "+\t\t\t\"b92944.B92944_I\\n\" + ", "+\t\t\t\"java.io.Serializable\\n\" + ", "+\t\t\t\"java.lang.Comparable\\n\" +", "+\t\t\t\"java.lang.annotation.Annotation\", // Annotation is an interface in java.lang", "+\t\t\trequestor);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8905922e1c1017be7d442d26fe0e1b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "c2673608acb4322092a3f06755b8abd4c15cab30", "commitAfterChange": "5f1e0ca52efa5c66e342b62d896831ba23629eba", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate void waitUntilReadyToSearch() throws IOException, CoreException", "signatureAfterChange": " \tpublic void testPerfSearchAllTypeNames() throws CoreException", "diff": ["-\t */", "-\tprivate void waitUntilReadyToSearch() throws IOException, CoreException {", "-\t\tIndexManager indexManager = JavaModelManager.getJavaModelManager().getIndexManager();", "-\t\tIJob doNothing = new IJob() {", "-\t\t\t/**", "-\t\t\t * Answer true if the job belongs to a given family (tag)", "-\t\t\t */", "-\t\t\tpublic boolean belongsTo(String jobFamily) {", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\t/**", "-\t\t\t * Asks this job to cancel its execution. The cancellation", "-\t\t\t * can take an undertermined amount of time.", "-\t\t\t */", "-\t\t\tpublic void cancel() {", "-\t\t\t\t// nothing to cancel", "-\t\t\t}", "-\t\t\t/**", "-\t\t\t * Ensures that this job is ready to run.", "-\t\t\t */", "-\t\t\tpublic void ensureReadyToRun() {", "-\t\t\t\t// always ready to do nothing", "-\t\t\t}", "-\t\t\t/**", "-\t\t\t * Execute the current job, answer whether it was successful.", "-\t\t\t */", "-\t\t\tpublic boolean execute(IProgressMonitor progress) {", "-\t\t\t\t// always succeed to do nothing", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t};", "-\t\tif (DEBUG) System.out.print(\"Wait until ready to search...\"); //$NON-NLS-1$", "-\t\tindexManager.performConcurrentJob(doNothing, IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH, null);", "-\t\tif (DEBUG) {", "-\t\t\tif (indexManager.awaitingJobsCount() == 0)", "-\t\t\t\tSystem.out.println(\"done\"); //$NON-NLS-1$", "-\t\t\telse", "-\t\t\t\tSystem.err.println(\" KO: remaining jobs=\"+indexManager.awaitingJobsCount()); //$NON-NLS-1$", "-\t\t}", "-\t}", "+\t}", "+\tpublic void testPerfSearchAllTypeNames() throws CoreException {", "+\t\ttagAsSummary(\"Search All Type Names\", Dimension.CPU_TIME);", "+\t\tTypeNameRequestor requestor = new TypeNameRequestor();", "+\t\tstartMeasuring();", "+\t\tnew SearchEngine().searchAllTypeNames(", "+\t\t\tnull,", "+\t\t\tnull,", "+\t\t\tSearchPattern.R_PATTERN_MATCH | SearchPattern.R_CASE_SENSITIVE,", "+\t\t\tIJavaSearchConstants.TYPE,", "+\t\t\tSEARCH_SCOPE, ", "+\t\t\trequestor,", "+\t\t\tWAIT_UNTIL_READY_TO_SEARCH,", "+\t\t\tnull);", "+\t\tstopMeasuring();", "+\t\tcommitMeasurements();", "+\t\tassertPerformance();", "+\t\t// store counter", "+\t\tALL_TYPES_NAMES = requestor.count;", "+\t}"]}], "num": 13876}
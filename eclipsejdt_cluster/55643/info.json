{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e855456302014b7e316c0d2b09eab35", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3451ad2116d751044da55425feb8c42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "9fa6af97d766131e3b6c16f61e2580f151e09b14", "commitAfterChange": "f9fa136a7bc8b0dc9f16e62f62f223a268cdfdb0", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void completeCodeAttributeForClinit(int codeAttributeOffset)", "signatureAfterChange": " \tpublic void completeCodeAttributeForClinit(int codeAttributeOffset)", "diff": ["-\t\tint exceptionHandlersNumber = codeStream.exceptionHandlersNumber;", "+\t\tint exceptionHandlersNumber = codeStream.exceptionHandlersCounter;", "-\t\tfor (int i = 0; i < exceptionHandlersNumber; i++) {", "+\t\tfor (int i = 0, max = codeStream.exceptionHandlersIndex; i < max; i++) {", "-\t\t\tint start = exceptionHandler.start;", "-\t\t\tthis.contents[localContentsOffset++] = (byte) (start >> 8);", "-\t\t\tthis.contents[localContentsOffset++] = (byte) start;", "-\t\t\tint end = exceptionHandler.end;", "-\t\t\tthis.contents[localContentsOffset++] = (byte) (end >> 8);", "-\t\t\tthis.contents[localContentsOffset++] = (byte) end;", "-\t\t\tint handlerPC = exceptionHandler.position;", "-\t\t\tthis.contents[localContentsOffset++] = (byte) (handlerPC >> 8);", "-\t\t\tthis.contents[localContentsOffset++] = (byte) handlerPC;", "-\t\t\tif (exceptionHandler.exceptionType == null) {", "-\t\t\t\t// any exception handler", "-\t\t\t\tthis.contents[localContentsOffset++] = 0;", "-\t\t\t\tthis.contents[localContentsOffset++] = 0;", "-\t\t\t} else {", "-\t\t\t\tint nameIndex;", "-\t\t\t\tif (exceptionHandler.exceptionType == BaseTypes.NullBinding) {", "-\t\t\t\t\t/* represents denote ClassNotFoundException, see class literal access*/", "-\t\t\t\t\tnameIndex = constantPool.literalIndexForJavaLangClassNotFoundException();", "+\t\t\tif (exceptionHandler != null) {", "+\t\t\t\tint start = exceptionHandler.start;", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) (start >> 8);", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) start;", "+\t\t\t\tint end = exceptionHandler.end;", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) (end >> 8);", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) end;", "+\t\t\t\tint handlerPC = exceptionHandler.position;", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) (handlerPC >> 8);", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) handlerPC;", "+\t\t\t\tif (exceptionHandler.exceptionType == null) {", "+\t\t\t\t\t// any exception handler", "+\t\t\t\t\tthis.contents[localContentsOffset++] = 0;", "+\t\t\t\t\tthis.contents[localContentsOffset++] = 0;", "-\t\t\t\t\tnameIndex = constantPool.literalIndex(exceptionHandler.exceptionType);", "+\t\t\t\t\tint nameIndex;", "+\t\t\t\t\tif (exceptionHandler.exceptionType == BaseTypes.NullBinding) {", "+\t\t\t\t\t\t/* represents denote ClassNotFoundException, see class literal access*/", "+\t\t\t\t\t\tnameIndex = constantPool.literalIndexForJavaLangClassNotFoundException();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tnameIndex = constantPool.literalIndex(exceptionHandler.exceptionType);", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (nameIndex >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) nameIndex;", "-\t\t\t\tthis.contents[localContentsOffset++] = (byte) (nameIndex >> 8);", "-\t\t\t\tthis.contents[localContentsOffset++] = (byte) nameIndex;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4e6e76df86d101c9a616fbe8ba87ce2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "9fa6af97d766131e3b6c16f61e2580f151e09b14", "commitAfterChange": "f9fa136a7bc8b0dc9f16e62f62f223a268cdfdb0", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void completeCodeAttribute(int codeAttributeOffset)", "signatureAfterChange": " \tpublic void completeCodeAttribute(int codeAttributeOffset)", "diff": ["-\t\tint exceptionHandlersNumber = codeStream.exceptionHandlersNumber;", "+\t\tint exceptionHandlersNumber = codeStream.exceptionHandlersCounter;", "-\t\tfor (int i = 0; i < exceptionHandlersNumber; i++) {", "+\t\tfor (int i = 0, max = codeStream.exceptionHandlersIndex; i < max; i++) {", "-\t\t\tint start = exceptionHandler.start;", "-\t\t\tthis.contents[localContentsOffset++] = (byte) (start >> 8);", "-\t\t\tthis.contents[localContentsOffset++] = (byte) start;", "-\t\t\tint end = exceptionHandler.end;", "-\t\t\tthis.contents[localContentsOffset++] = (byte) (end >> 8);", "-\t\t\tthis.contents[localContentsOffset++] = (byte) end;", "-\t\t\tint handlerPC = exceptionHandler.position;", "-\t\t\tthis.contents[localContentsOffset++] = (byte) (handlerPC >> 8);", "-\t\t\tthis.contents[localContentsOffset++] = (byte) handlerPC;", "-\t\t\tif (exceptionHandler.exceptionType == null) {", "-\t\t\t\t// any exception handler", "-\t\t\t\tthis.contents[localContentsOffset++] = 0;", "-\t\t\t\tthis.contents[localContentsOffset++] = 0;", "-\t\t\t} else {", "-\t\t\t\tint nameIndex;", "-\t\t\t\tif (exceptionHandler.exceptionType == BaseTypes.NullBinding) {", "-\t\t\t\t\t/* represents ClassNotFoundException, see class literal access*/", "-\t\t\t\t\tnameIndex = constantPool.literalIndexForJavaLangClassNotFoundException();", "+\t\t\tif (exceptionHandler != null) {", "+\t\t\t\tint start = exceptionHandler.start;", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) (start >> 8);", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) start;", "+\t\t\t\tint end = exceptionHandler.end;", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) (end >> 8);", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) end;", "+\t\t\t\tint handlerPC = exceptionHandler.position;", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) (handlerPC >> 8);", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) handlerPC;", "+\t\t\t\tif (exceptionHandler.exceptionType == null) {", "+\t\t\t\t\t// any exception handler", "+\t\t\t\t\tthis.contents[localContentsOffset++] = 0;", "+\t\t\t\t\tthis.contents[localContentsOffset++] = 0;", "-\t\t\t\t\tnameIndex = constantPool.literalIndex(exceptionHandler.exceptionType);", "+\t\t\t\t\tint nameIndex;", "+\t\t\t\t\tif (exceptionHandler.exceptionType == BaseTypes.NullBinding) {", "+\t\t\t\t\t\t/* represents ClassNotFoundException, see class literal access*/", "+\t\t\t\t\t\tnameIndex = constantPool.literalIndexForJavaLangClassNotFoundException();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tnameIndex = constantPool.literalIndex(exceptionHandler.exceptionType);", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (nameIndex >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) nameIndex;", "-\t\t\t\tthis.contents[localContentsOffset++] = (byte) (nameIndex >> 8);", "-\t\t\t\tthis.contents[localContentsOffset++] = (byte) nameIndex;"]}], "num": 55643}
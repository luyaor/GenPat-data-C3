{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68e177cd1c43a1986db9ad60050b430b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee19369a281fc93914798b6e127afd82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/DocumentElementParser.java", "commitBeforeChange": "5a64717913d84cfb4164c8c518f717f18f92060c", "commitAfterChange": "39c618471b3ea47080d3f5012ddba5a7f73be788", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void checkAnnotation()", "signatureAfterChange": " public void checkAnnotation()", "diff": ["+\tint commentPtr = scanner.commentPtr;", "-\tfound : {", "-\t\tif ((lastAnnotationIndex = scanner.commentPtr) >= 0) { //look for @deprecated", "-\t\t\tscanner.commentPtr = -1;", "-\t\t\t// reset the comment stack, since not necessary after having checked", "-\t\t\tint commentSourceStart = scanner.commentStarts[lastAnnotationIndex];", "-\t\t\t// javadoc only (non javadoc comment have negative end positions.)", "-\t\t\tif (scanner.commentStops[lastAnnotationIndex] < 0) {", "-\t\t\t\tbreak found;", "-\t\t\t}", "-\t\t\tint commentSourceEnd = scanner.commentStops[lastAnnotationIndex] - 1;", "-\t\t\t//stop is one over", "-\t\t\tchar[] comment = scanner.source;", "-\t\t\tdeprecated =", "-\t\t\t\tcheckDeprecation(", "-\t\t\t\t\tcommentSourceStart,", "-\t\t\t\t\tcommentSourceEnd,", "-\t\t\t\t\tcomment);", "-\t\t\tbreak found;", "+\tnextComment : for (lastAnnotationIndex = scanner.commentPtr; lastAnnotationIndex >= 0; lastAnnotationIndex--){", "+\t\t//look for @deprecated into the first javadoc comment preceeding the declaration", "+\t\tint commentSourceStart = scanner.commentStarts[lastAnnotationIndex];", "+\t\t// javadoc only (non javadoc comment have negative end positions.)", "+\t\tif (modifiersSourceStart != -1 && modifiersSourceStart < commentSourceStart) {", "+\t\t\tcontinue nextComment;", "+\t\tif (scanner.commentStops[lastAnnotationIndex] < 0) {", "+\t\t\tcontinue nextComment;", "+\t\t}", "+\t\tint commentSourceEnd = scanner.commentStops[lastAnnotationIndex] - 1; //stop is one over", "+\t\tchar[] comment = scanner.source;", "+", "+\t\tdeprecated =", "+\t\t\tcheckDeprecation(", "+\t\t\t\tcommentSourceStart,", "+\t\t\t\tcommentSourceEnd,", "+\t\t\t\tcomment);", "+\t\tbreak nextComment;", "-\tif (lastAnnotationIndex >= 0) {", "+\tif (commentPtr >= 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0e546c40bf131adb5257d02606fbd40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "c10286277f9239e3088b8d188b41d6fe94e627af", "commitAfterChange": "0537003e571cfeb53f220f7f5e8c40a8ad99bcc6", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r public void checkAnnotation()", "signatureAfterChange": "\r public void checkAnnotation()", "diff": ["+\tboolean checkDeprecated = false;\r", "-\tfound : {\r", "-\t\tif ((lastAnnotationIndex = scanner.commentPtr) >= 0) { //look for @deprecated\r", "-\t\t\tint commentSourceStart = scanner.commentStarts[lastAnnotationIndex];\r", "-\t\t\t// javadoc only (non javadoc comment have negative end positions.)\r", "-\t\t\tint commentSourceEnd = scanner.commentStops[lastAnnotationIndex] - 1; //stop is one over\r", "-\t\t\tchar[] comment = scanner.source;\r", "-\r", "-\t\t\tfor (int i = commentSourceStart + 3; i < commentSourceEnd - 10; i++) {\r", "-\t\t\t\tif ((comment[i] == '@') \r", "-\t\t\t\t\t&& (comment[i + 1] == 'd')\r", "-\t\t\t\t\t&& (comment[i + 2] == 'e')\r", "-\t\t\t\t\t&& (comment[i + 3] == 'p')\r", "-\t\t\t\t\t&& (comment[i + 4] == 'r')\r", "-\t\t\t\t\t&& (comment[i + 5] == 'e')\r", "-\t\t\t\t\t&& (comment[i + 6] == 'c')\r", "-\t\t\t\t\t&& (comment[i + 7] == 'a')\r", "-\t\t\t\t\t&& (comment[i + 8] == 't')\r", "-\t\t\t\t\t&& (comment[i + 9] == 'e')\r", "-\t\t\t\t\t&& (comment[i + 10] == 'd')) {\r", "-\t\t\t\t\t// ensure the tag is properly ended: either followed by a space, a tab, line end or asterisk.\r", "-\t\t\t\t\tint nextPos = i+11;\r", "-\t\t\t\t\tdeprecated = (comment[nextPos] == ' ') || (comment[nextPos] == '\\t') || (comment[nextPos] == '\\n') || (comment[nextPos] == '\\r') || (comment[nextPos] == '*');\r", "-\t\t\t\t\tbreak found;\r", "-\t\t\t\t}\r", "+\tfound : for (lastAnnotationIndex = scanner.commentPtr; lastAnnotationIndex >= 0; ){\r", "+\t\t//look for @deprecated into the first javadoc comment preceeding the declaration\r", "+\t\tint commentSourceStart = scanner.commentStarts[lastAnnotationIndex];\r", "+\t\t// javadoc only (non javadoc comment have negative end positions.)\r", "+\t\tif (modifiersSourceStart != -1 && modifiersSourceStart < commentSourceStart) {\r", "+\t\t\tif (lastAnnotationIndex-- >= 0) {\r", "+\t\t\t\tcontinue;\r", "+\t\t\t} else {\r", "+\t\t\t\treturn;\r", "+\t\tif (scanner.commentStops[lastAnnotationIndex] < 0) {\r", "+\t\t\tbreak found;\r", "+\t\t}\r", "+\t\tcheckDeprecated = true;\r", "+\t\tint commentSourceEnd = scanner.commentStops[lastAnnotationIndex] - 1; //stop is one over\r", "+\t\tchar[] comment = scanner.source;\r", "+\r", "+\t\tfor (int i = commentSourceStart + 3; i < commentSourceEnd - 10; i++) {\r", "+\t\t\tif ((comment[i] == '@') \r", "+\t\t\t\t&& (comment[i + 1] == 'd')\r", "+\t\t\t\t&& (comment[i + 2] == 'e')\r", "+\t\t\t\t&& (comment[i + 3] == 'p')\r", "+\t\t\t\t&& (comment[i + 4] == 'r')\r", "+\t\t\t\t&& (comment[i + 5] == 'e')\r", "+\t\t\t\t&& (comment[i + 6] == 'c')\r", "+\t\t\t\t&& (comment[i + 7] == 'a')\r", "+\t\t\t\t&& (comment[i + 8] == 't')\r", "+\t\t\t\t&& (comment[i + 9] == 'e')\r", "+\t\t\t\t&& (comment[i + 10] == 'd')) {\r", "+\t\t\t\t// ensure the tag is properly ended: either followed by a space, a tab, line end or asterisk.\r", "+\t\t\t\tint nextPos = i+11;\r", "+\t\t\t\tdeprecated = (comment[nextPos] == ' ') || (comment[nextPos] == '\\t') || (comment[nextPos] == '\\n') || (comment[nextPos] == '\\r') || (comment[nextPos] == '*');\r", "+\t\t\t\tbreak found;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tbreak found;\r", "-\tif (lastAnnotationIndex >= 0) {\r", "-\t\tmodifiersSourceStart = scanner.commentStarts[scanner.commentPtr]; \r", "-\t\tscanner.commentPtr = -1; // reset the comment stack, since not necessary after having checked\r", "+\tif (lastAnnotationIndex >= 0 && checkDeprecated) {\r", "+\t\tmodifiersSourceStart = scanner.commentStarts[lastAnnotationIndex]; \r", "+\tscanner.commentPtr = -1; // reset the comment stack, since not necessary after having checked\r"]}], "num": 61193}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09b988b35f37e2c2a223e5d7182924fd", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ae06cc81c793702ca978f4870c3016c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic void locateMatches(String[] filePaths, IWorkspace workspace)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic void locateMatches(String[] filePaths, IWorkspace workspace)\r \t\tthrows JavaModelException", "diff": ["+\t\t\tJavaProject javaProject = null;\r", "-\t\t\t\tJavaProject javaProject = (JavaProject) openable.getJavaProject();\r", "+\t\t\t\tjavaProject = (JavaProject) openable.getJavaProject();\r", "-\t\t\t\t\t\tthis.locateMatches();\r", "+\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\tthis.locateMatches();\r", "+\t\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t\t\tif (e.getException() instanceof CoreException) {\r", "+\t\t\t\t\t\t\t\tthrow e;\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t// problem with classpath in this project -> skip it\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "-\t\t\tthis.locateMatches();\r", "+\t\t\ttry {\r", "+\t\t\t\tthis.locateMatches();\r", "+\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\tif (e.getException() instanceof CoreException) {\r", "+\t\t\t\t\tthrow e;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// problem with classpath in last project -> skip it\r", "+\t\t\t\t}\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2cf146eeab03873b2b9dd3787221294", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  private IClasspathEntry findSourceAttachmentRecommendation()", "signatureAfterChange": "  private IClasspathEntry findSourceAttachmentRecommendation()", "diff": ["-\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();", "-\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, entry.getSourceAttachmentPath(), true);", "+\t\t\t\tObject target = JavaModel.getTarget(entry.getSourceAttachmentPath(), true);", "-\t\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, entry.getSourceAttachmentPath(), true);", "+\t\t\t\t\tObject target = JavaModel.getTarget(entry.getSourceAttachmentPath(), true);", "-\t\t\t\t\t\tif (file.isFile()) {", "-\t\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(file.getName())){", "-\t\t\t\t\t\t\t\treturn entry;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// external directory", "+\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(file.getName())){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b66458509480093eac68b9f8e7889af0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/HierarchyScope.java", "commitBeforeChange": "917b34c1f7a37af6e7b13390e833b19783e10d19", "commitAfterChange": "2a40159dff47fb0e9026a9eb6e050f6d14cc5873", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tprivate void buildResourceVector() throws JavaModelException", "signatureAfterChange": "\r \tprivate void buildResourceVector() throws JavaModelException", "diff": ["+\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();\r", "+\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, jar.getPath(), true);\r", "-\t\t\t\tZipFile zipFile = null;\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tzipFile = jar.getJar();\r", "-\t\t\t\t\tzipFileName = zipFile.getName();\r", "-\t\t\t\t} catch (CoreException e) {\r", "-\t\t\t\t\tthrow new JavaModelException(e);\r", "-\t\t\t\t} finally {\r", "-\t\t\t\t\tif (zipFile != null) {\r", "-\t\t\t\t\t\ttry {\r", "-\t\t\t\t\t\t\tzipFile.close();\r", "-\t\t\t\t\t\t} catch (IOException e) {\r", "-\t\t\t\t\t\t\t// ignore \r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "+\t\t\t\tif (target instanceof IFile) {\r", "+\t\t\t\t\tzipFileName = ((IFile)target).getLocation().toOSString();\r", "+\t\t\t\t} else if (target instanceof File) {\r", "+\t\t\t\t\tzipFileName = ((File)target).getPath();\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tcontinue; // unknown target\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8473ca4dfda462385f5998bc87a8c8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "ff3d786f8b733e34cd64f8ef3efff230a2dbff42", "commitAfterChange": "d8e17e252326ade78baaea3eb05d18d16eaf07ae", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "signatureAfterChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "diff": ["-\t\t//add the root path if specified", "-\t\tif (!this.rootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {", "+\t\tif (this.rootPath != null && !this.rootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {", "+\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t\t\tzip = getZip();", "+\t\t\t\tzip = manager.getZipFile(this.sourcePath);", "-\t\t\t\t\tbyte[] bytes = null;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tbytes = Util.getZipEntryByteContent(entry, zip);", "-\t\t\t\t\t} catch (IOException e) {", "-\t\t\t\t\t}", "-\t\t\t\t\tif (bytes != null) {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tsource = Util.bytesToChar(bytes, this.encoding);", "-\t\t\t\t\t\t} catch (IOException e) {", "-\t\t\t\t\t\t\tsource = null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\t\t\tsource = readSource(entry, zip);", "-\t\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(zip);", "+\t\t\t\tmanager.closeZipFile(zip); // handle null case"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e88465c420a2189c2168fd0065641335", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment, boolean recurseInContainers)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment, boolean recurseInContainers)", "diff": ["-\t\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, path, true);", "+\t\t\t\t\tObject target = JavaModel.getTarget(path, true);", "-\t\t\t\t\t\t\t\t\t\t&& JavaModel.getTarget(workspaceRoot, sourceAttachment, true) == null){", "+\t\t\t\t\t\t\t\t\t\t&& JavaModel.getTarget(sourceAttachment, true) == null){", "-\t\t\t\t\t\t\t\t\t&& JavaModel.getTarget(workspaceRoot, sourceAttachment, true) == null){", "+\t\t\t\t\t\t\t\t\t&& JavaModel.getTarget(sourceAttachment, true) == null){", "-\t\t\t\t\t\t\t\t&& JavaModel.getTarget(workspaceRoot, sourceAttachment, true) == null){", "+\t\t\t\t\t\t\t\t&& JavaModel.getTarget(sourceAttachment, true) == null){", "-\t\t\t\t\tif (!projectPath.isPrefixOf(path) || JavaModel.getTarget(workspaceRoot, path, true) == null){", "+\t\t\t\t\tif (!projectPath.isPrefixOf(path) || JavaModel.getTarget(path, true) == null){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fea2f8e5eedc111d239cca053755c0d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java", "commitBeforeChange": "82631a98caad8b28e9cefb217339d51e64ef47f9", "commitAfterChange": "c2534be63510215f41ecb7f37ff96548973f1992", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r \tprotected QualifiedName getSourceAttachmentPropertyName() throws JavaModelException", "signatureAfterChange": "\r \tprotected QualifiedName getSourceAttachmentPropertyName() throws JavaModelException", "diff": ["-\t\tZipFile jarFile = null;\r", "-\t\ttry {\r", "-\t\t\tjarFile = getJar();\r", "-\t\t\treturn new QualifiedName(JavaCore.PLUGIN_ID, \"sourceattachment: \" + jarFile.getName()); //$NON-NLS-1$\r", "-\t\t} catch (CoreException e) {\r", "-\t\t\tthrow new JavaModelException(e);\r", "-\t\t} finally {\r", "-\t\t\ttry {\r", "-\t\t\t\tif (jarFile != null && JavaModelManager.getJavaModelManager().zipFiles == null) {\r", "-\t\t\t\t\tjarFile.close();\r", "-\t\t\t\t}\r", "-\t\t\t} catch(IOException e) {\r", "-\t\t\t\t// ignore \r", "-\t\t\t}\r", "-\t\t}\r", "+\t\tString jarPath = fResource == null ? fJarPath.toOSString() : fResource.getLocation().toOSString();\r", "+\t\treturn new QualifiedName(JavaCore.PLUGIN_ID, \"sourceattachment: \" + jarPath); //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffc82cdce6314d7be36f19d6681e7dd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void computePackageFragmentRoots( \t\tIClasspathEntry resolvedEntry, \t\tObjectVector accumulatedRoots,  \t\tHashSet rootIDs,  \t\tIClasspathEntry referringEntry, \t\tboolean checkExistency, \t\tboolean retrieveExportedRoots, \t\tMap rootToResolvedEntries) throws JavaModelException", "signatureAfterChange": " \tpublic void computePackageFragmentRoots( \t\tIClasspathEntry resolvedEntry, \t\tObjectVector accumulatedRoots,  \t\tHashSet rootIDs,  \t\tIClasspathEntry referringEntry, \t\tboolean checkExistency, \t\tboolean retrieveExportedRoots, \t\tMap rootToResolvedEntries) throws JavaModelException", "diff": ["-\t\t\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, entryPath, checkExistency);", "+\t\t\t\t\t\tObject target = JavaModel.getTarget(entryPath, checkExistency);", "-\t\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, entryPath, checkExistency);", "+\t\t\t\t\tObject target = JavaModel.getTarget(entryPath, checkExistency);", "-\t\t\t\t\t\troot = getPackageFragmentRoot((IResource) target);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// external target - only JARs allowed", "+\t\t\t\t\t\troot = getPackageFragmentRoot((IResource) target, entryPath);", "+\t\t\t\t\t} else if (target instanceof File) {", "+\t\t\t\t\t\t// external target", "+\t\t\t\t\t\t} else if (((File) target).isDirectory()) {", "+\t\t\t\t\t\t\troot = new ExternalPackageFragmentRoot(entryPath, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffce112b6e2e4de7ede8daccd9a6f281", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "f1d83e37dc72ba6d2676594fd1c64161817b3d74", "commitAfterChange": "50c8fc7c21507137e2b63d15c742a120cb954eef", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate void removeMissingFactoryJars(IJavaProject jproj, Map<FactoryContainer, Attributes> containers)", "signatureAfterChange": " \tprivate void removeMissingFactoryJars(IJavaProject jproj, Map<FactoryContainer, Attributes> containers)", "diff": ["-\t\t\t\tURL url = null;", "-\t\t\t\ttry {", "-\t\t\t\t\turl = ((JarFactoryContainer)fc).getJarFileURL();", "-\t\t\t\t\t// Open the jar to see if it exists - else we'll enter a build marker.", "-\t\t\t\t\t// TODO: we might want to move the \"exists()\" method into JarFactoryContainer,", "-\t\t\t\t\t// and implement it more like ClasspathEntry.validateClasspathEntry().", "-\t\t\t\t\tInputStream is = url.openStream();", "-\t\t\t\t\tis.close();", "-\t\t\t\t} catch (IOException e) {", "+\t\t\t\tFile file = ((JarFactoryContainer)fc).getJarFile();", "+\t\t\t\tif (!file.exists()) {", "-\t\t\t\t\tString jarName = (url != null) ? url.toString() : fc.getId();", "-\t\t\t\t\treportMissingFactoryJar( jarName, jproj );", "+\t\t\t\t\treportMissingFactoryJar( file.toString(), jproj );"]}], "num": 3481}
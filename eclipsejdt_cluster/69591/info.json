{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c8083ce66905307ae36cbfac89deea2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d87cae2c6ea4676b9df82f3c8092fb28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/FilerImpl.java", "commitBeforeChange": "64db8d36b73417ee83ea1a6d91baaefe7d3848b0", "commitAfterChange": "706bf7889f5a9b55b080bd919d03ab5ee97600fa", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public OutputStream createClassFile(String name) throws IOException", "signatureAfterChange": "     public OutputStream createClassFile(String name) throws IOException", "diff": ["-        throw new UnsupportedOperationException( \"Not Yet Implemented\" ); //$NON-NLS-1$", "+    \tGeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager( _env.getProject() );", "+    \tFile f = null;", "+    \t", "+    \ttry ", "+    \t{", "+    \t\tf = gfm.getGeneratedSourceFolderOutputLocation();", "+    \t}", "+    \tcatch ( Exception e )", "+    \t{", "+    \t\t// TODO - stop throwing this exception", "+    \t\tAptPlugin.log(e, \"Failure getting the output file\"); //$NON-NLS-1$", "+    \t\tthrow new IOException();", "+    \t}", "+    \t", "+    \tf = new File( f, name.replace( '.', File.separatorChar ) + \".class\" ); //$NON-NLS-1$", "+  ", "+        // REVIEW: for no apparent reason it is sometimes necessary to create the", "+        // parent dir, else an IOException occurs creating f..", "+        File p = f.getParentFile();", "+        FileSystemUtil.mkdirs( p );", "+    \t", "+        return new FileOutputStream( f );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f076eaafcc5eedd9838c37f06d996eb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/CodeFormatterApplication.java", "commitBeforeChange": "7d879fb1ebcea4aeee6c7768254a09d17ebfe5f5", "commitAfterChange": "c2646812d22906feca88c2f52911ca7c4eae2299", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate File[] processCommandLine(String[] argsArray)", "signatureAfterChange": "  \tprivate File[] processCommandLine(String[] argsArray)", "diff": ["-\t\t\t\t\t\tdisplayHelp(Messages.bind(Messages.CommandLineErrorFile, currentArg));", "+\t\t\t\t\t\tString canonicalPath;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tcanonicalPath = file.getCanonicalPath();", "+\t\t\t\t\t\t} catch(IOException e2) {", "+\t\t\t\t\t\t\tcanonicalPath = file.getAbsolutePath();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tString errorMsg = file.isAbsolute()?", "+\t\t\t\t\t\t\t\t\t\t  Messages.bind(Messages.CommandLineErrorFile, canonicalPath):", "+\t\t\t\t\t\t\t\t\t\t  Messages.bind(Messages.CommandLineErrorFileTryFullPath, canonicalPath);", "+\t\t\t\t\t\tdisplayHelp(errorMsg);"]}], "num": 69591}
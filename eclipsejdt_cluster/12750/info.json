{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8a3c590a1600b68a1dada43d43d73c2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8eae444a0e4e9ef812329436e43e53f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "58e1f97a6c11cbf99287f2cc95bb245d2faf2bd1", "commitAfterChange": "e33ceacdb6e9b17f29de3a23e3df28f1c6bec162", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\tif ((argv == null) || (argv.length == 0))", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.noSourceFile\")); //$NON-NLS-1$", "+\t\tif ((argv == null) || (argv.length == 0)) {", "+\t\t\tprintUsage();", "+\t\t\treturn;", "+\t\t}", "+\t\t// expand the command line if necessary", "+\t\tboolean needExpansion = false;", "+\t\tloop: for (int i = 0; i < argCount; i++) {", "+\t\t\t\tif (argv[i].startsWith(\"@\")) {", "+\t\t\t\t\tneedExpansion = true;", "+\t\t\t\t\tbreak loop;", "+\t\t\t\t}", "+\t\t}", "+", "+\t\tString[] newCommandLineArgs = null;", "+\t\tif (needExpansion) {", "+\t\t\tnewCommandLineArgs = new String[argCount];", "+\t\t\tindex = 0;", "+\t\t\tfor (int i = 0; i < argCount; i++) {", "+\t\t\t\tString[] newArgs = null;", "+\t\t\t\tString arg = argv[i].trim();", "+\t\t\t\tif (arg.startsWith(\"@\")) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tLineNumberReader reader = new LineNumberReader(new StringReader(new String(Util.getFileCharContent(new File(arg.substring(1)), null))));", "+\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\t\tString line;", "+\t\t\t\t\t\twhile((line = reader.readLine()) != null) {", "+\t\t\t\t\t\t\tbuffer.append(line).append(\" \");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tnewArgs = tokenize(buffer.toString());", "+\t\t\t\t\t} catch(IOException e) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tMain.bind(\"configure.invalidexpansionargumentname\", arg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (newArgs != null) {", "+\t\t\t\t\tint newCommandLineArgsLength = newCommandLineArgs.length;", "+\t\t\t\t\tint newArgsLength = newArgs.length;", "+\t\t\t\t\tSystem.arraycopy(newCommandLineArgs, 0, (newCommandLineArgs = new String[newCommandLineArgsLength + newArgsLength - 1]), 0, index);", "+\t\t\t\t\tSystem.arraycopy(newArgs, 0, newCommandLineArgs, index, newArgsLength);", "+\t\t\t\t\tindex += newArgsLength;", "+\t\t\t\t} else {", "+\t\t\t\t\tnewCommandLineArgs[index++] = arg;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tindex = -1;", "+\t\t} else {", "+\t\t\tnewCommandLineArgs = argv;", "+\t\t\tfor (int i = 0; i < argCount; i++) {", "+\t\t\t\tnewCommandLineArgs[i] = newCommandLineArgs[i].trim();", "+\t\t\t}", "+\t\t}", "+\t\targCount = newCommandLineArgs.length;", "-\t\t\tcurrentArg = argv[index].trim();", "+\t\t\tcurrentArg = newCommandLineArgs[index];", "-\t\tif (filenames == null)", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.noSource\")); //$NON-NLS-1$", "+\t\tif (filenames == null) {", "+\t\t\tprintUsage();", "+\t\t\treturn;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7cb0d8ca326c163bca0479209c4b7ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "2f2916c1fb13d22701e433ffbb1a51f9e96c2bc4", "commitAfterChange": "a47d03faa1d7f04a91914573d6a6cca4eff80427", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 42, "signatureBeforeChange": "\r \tprivate static void updateVariableValue(\r \t\tString variableName,\r \t\tIPath path,\r \t\tIProgressMonitor monitor)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \tprivate static void updateVariableValues(\r \t\tString[] variableNames,\r \t\tIPath[] variablePaths,\r \t\tIProgressMonitor monitor) throws JavaModelException", "diff": ["-\tprivate static void updateVariableValue(\r", "-\t\tString variableName,\r", "-\t\tIPath path,\r", "-\t\tIProgressMonitor monitor)\r", "-\t\tthrows JavaModelException {\r", "+\tprivate static void updateVariableValues(\r", "+\t\tString[] variableNames,\r", "+\t\tIPath[] variablePaths,\r", "+\t\tIProgressMonitor monitor) throws JavaModelException {\r", "+\t\tif (monitor != null && monitor.isCanceled()) return;\r", "+\t\t\r", "+\t\tint varLength = variableNames.length;\r", "+\t\t\r", "-\t\ttry {\r", "-\t\t\tIJavaModel model = manager.getJavaModel();\r", "-\t\t\tif (model != null) {\r", "-\t\t\t\tIJavaProject[] projects = model.getJavaProjects();\r", "-\t\t\t\tnextProject : for (int i = 0, max = projects.length; i < max; i++) {\r", "-\t\t\t\t\tIClasspathEntry[] entries = projects[i].getRawClasspath();\r", "-\t\t\t\t\tfor (int j = 0, cplength = entries.length; j < cplength; j++) {\r", "-\t\t\t\t\t\tIClasspathEntry oldEntry = entries[j];\r", "-\t\t\t\t\t\tif (oldEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE) {\r", "+\t\tIJavaModel model = manager.getJavaModel();\r", "+\r", "+\t\t// filter out unmodified variables\r", "+\t\tint discardCount = 0;\r", "+\t\tfor (int i = 0; i < varLength; i++){\r", "+\t\t\tIPath oldPath = (IPath)Variables.get(variableNames[i]);\r", "+\t\t\tif (oldPath != null && oldPath.equals(variablePaths[i])){\r", "+\t\t\t\tvariableNames[i] = null;\r", "+\t\t\t\tdiscardCount++;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (discardCount > 0){\r", "+\t\t\tif (discardCount == varLength) return;\r", "+\t\t\tint changedLength = varLength - discardCount;\r", "+\t\t\tString[] changedVariableNames = new String[changedLength];\r", "+\t\t\tIPath[] changedVariablePaths = new IPath[changedLength];\r", "+\t\t\tfor (int i = 0, index = 0; i < varLength; i++){\r", "+\t\t\t\tif (variableNames[i] != null){\r", "+\t\t\t\t\tchangedVariableNames[index] = variableNames[i];\r", "+\t\t\t\t\tchangedVariablePaths[index] = variablePaths[i];\r", "+\t\t\t\t\tindex++;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tvariableNames = changedVariableNames;\r", "+\t\t\tvariablePaths = changedVariablePaths;\r", "+\t\t\tvarLength = changedLength;\r", "+\t\t}\r", "+\t\t\r", "+\t\tif (monitor != null && monitor.isCanceled()) return;\r", "+\r", "+\t\tif (model != null) {\r", "+\t\t\tIJavaProject[] projects = model.getJavaProjects();\r", "+\t\t\tnextProject : for (int i = 0, projectLength = projects.length; i < projectLength; i++){\r", "+\t\t\t\tIJavaProject project = projects[i];\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t// check to see if any of the modified variables is present on the classpath\r", "+\t\t\t\tIClasspathEntry[] classpath = project.getRawClasspath();\r", "+\t\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++){\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tIClasspathEntry entry = classpath[j];\r", "+\t\t\t\t\tfor (int k = 0; k < varLength; k++){\r", "+\r", "+\t\t\t\t\t\tString variableName = variableNames[k];\t\t\t\t\t\t\r", "+\t\t\t\t\t\tif (entry.getEntryKind() ==  IClasspathEntry.CPE_VARIABLE){\r", "+\r", "-\t\t\t\t\t\t\tif (oldEntry.getPath().segment(0).equals(variableName)\r", "-\t\t\t\t\t\t\t\t|| ((sourcePath = oldEntry.getSourceAttachmentPath()) != null\r", "-\t\t\t\t\t\t\t\t\t&& sourcePath.segment(0).equals(variableName))\r", "-\t\t\t\t\t\t\t\t|| ((sourceRootPath = oldEntry.getSourceAttachmentRootPath()) != null\r", "-\t\t\t\t\t\t\t\t\t&& sourceRootPath.segment(0).equals(variableName))) {\r", "-\t\t\t\t\t\t\t\taffectedProjects.put(projects[i], ((JavaProject)projects[i]).getExpandedClasspath(true));\r", "+\t\t\t\t\t\t\tif (entry.getPath().segment(0).equals(variableName)\r", "+\t\t\t\t\t\t\t\t\t\t|| ((sourcePath = entry.getSourceAttachmentPath()) != null\t&& sourcePath.segment(0).equals(variableName))\r", "+\t\t\t\t\t\t\t\t\t\t|| ((sourceRootPath = entry.getSourceAttachmentRootPath()) != null\t&& sourceRootPath.segment(0).equals(variableName))) {\r", "+\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\taffectedProjects.put(project, ((JavaProject)project).getExpandedClasspath(true));\r", "-\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\r", "-\t\t} catch (JavaModelException e) {\r", "-\t\tif (path == null) {\r", "-\t\t\tVariables.remove(variableName);\r", "-\t\t} else {\r", "-\t\t\t// new variable value is assigned\r", "-\t\t\tVariables.put(variableName, path);\r", "+\t\t// update variables\r", "+\t\tfor (int i = 0; i < varLength; i++){\r", "+\t\t\tIPath path = variablePaths[i];\r", "+\t\t\tif (path == null) {\r", "+\t\t\t\tVariables.remove(variableNames[i]);\r", "+\t\t\t} else {\r", "+\t\t\t\t// new variable value is assigned\r", "+\t\t\t\tVariables.put(variableNames[i], path);\r", "+\t\t\t}\r", "+\t\t\t\t\r", "+\t\t// update affected project classpaths\r", "+\r", "+\t\t\t\t\tif (monitor != null && monitor.isCanceled()) return;\r", "+\r"]}], "num": 12750}
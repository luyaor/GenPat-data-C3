{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a6c841354739afd31e0b678b17abf70", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27937cf594c14459934abf43500f5133", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 950, "methodNumberAfterChange": 950, "signatureBeforeChange": " public void test0926()", "signatureAfterChange": " public void test0926()", "diff": ["-\trunNegativeTest(", "-\t\t// test directory preparation", "-\t\tnew String[] { /* test files */", "-\t\t\t\"X.java\",", "+\tString xSource =", "-\t\t\t\"\\n\" +", "+\t\t\t\"\t@SuppressWarnings(\\\"null\\\")\\n\" +", "-\t\t\t\"}\\n\"", "-\t\t},", "-\t\t// compiler results", "-\t\t\"----------\\n\" + /* expected compiler log */", "-\t\t\"1. ERROR in X.java (at line 6)\\n\" +", "-\t\t\"\tRESULT = NonTerminalSourcePart.create(Tuple.create(true, t.value().fst()));\\n\" +", "-\t\t\"\t         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from NonTerminalSourcePart<Tuple<Boolean,capture#3-of ? extends Term>> to NonTerminalSourcePart<? extends Tuple<Boolean,Term>>\\n\" +", "-\t\t\"----------\\n\",", "-\t\t// javac options", "-\t\tJavacTestOptions.JavacHasABug.JavacBug6557661 /* javac test options */);", "+\t\t\t\"}\\n\";", "+\tif (this.complianceLevel < ClassFileConstants.JDK1_8) {", "+\t\trunNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\txSource", "+\t\t\t},", "+\t\t\t// compiler results", "+\t\t\t\"----------\\n\" + /* expected compiler log */", "+\t\t\t\"1. ERROR in X.java (at line 6)\\n\" +", "+\t\t\t\"\tRESULT = NonTerminalSourcePart.create(Tuple.create(true, t.value().fst()));\\n\" +", "+\t\t\t\"\t         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"Type mismatch: cannot convert from NonTerminalSourcePart<Tuple<Boolean,capture#3-of ? extends Term>> to NonTerminalSourcePart<? extends Tuple<Boolean,Term>>\\n\" +", "+\t\t\t\"----------\\n\",", "+\t\t\t// javac options", "+\t\t\tJavacTestOptions.JavacHasABug.JavacBug6557661 /* javac test options */);\t\t", "+\t} else {", "+\t\trunConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\txSource", "+\t\t\t});", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95cbb60630ac6913ea5c6f3bf7408ad1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "74d118e989117eba0163f0f707314197db0891af", "commitAfterChange": "43cdae5117454d896e9e9cf435f63b0b509e3a4c", "methodNumberBeforeChange": 210, "methodNumberAfterChange": 211, "signatureBeforeChange": " public void testBug418235()", "signatureAfterChange": " public void testBug418235()", "diff": ["-    runNegativeTestWithLibs(", "+\tString[] testFiles = ", "-                    \"GenericInterface.java\",", "+                    \"GenericInterface.java\", ", "-            },", "-            \"----------\\n\" + ", "-            \"1. ERROR in Implementation.java (at line 6)\\n\" + ", "-    \t\t\"\tpublic Object doSomethingGeneric(Object o) {\\n\" + ", "-    \t\t\"\t                                 ^^^^^^\\n\" + ", "-            \"Illegal redefinition of parameter o, inherited method from GenericInterface<Object> does not constrain this parameter\\n\" + ", "-            \"----------\\n\");", "+\t\t\t};", "+\tif (this.complianceLevel < ClassFileConstants.JDK1_8) {", "+\t    runNegativeTestWithLibs(", "+\t            testFiles,", "+\t            \"----------\\n\" + ", "+\t            \"1. ERROR in Implementation.java (at line 6)\\n\" + ", "+\t    \t\t\"\tpublic Object doSomethingGeneric(Object o) {\\n\" + ", "+\t    \t\t\"\t                                 ^^^^^^\\n\" + ", "+\t            \"Illegal redefinition of parameter o, inherited method from GenericInterface<Object> does not constrain this parameter\\n\" + ", "+\t            \"----------\\n\");", "+\t} else {", "+\t\t// in 1.8 the nullness default also affects the type argument <Object> from which T is instantiated to '@NonNull Object'", "+\t\trunConformTestWithLibs(", "+\t\t\t\ttestFiles, getCompilerOptions(), \"\");", "+\t}", "+}"]}], "num": 54371}
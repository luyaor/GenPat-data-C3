{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f35b0f1664724409d48ce4bc33a616a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "210fee7e001cf2fa82927da2bd895cc2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "8afd21953e47be8b32f67426ff6c8fccdc4344ec", "commitAfterChange": "4f38af3b3961bb6a0ca928b2461195fd32bd6838", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public String[] getParameterNames() throws JavaModelException", "signatureAfterChange": " public String[] getParameterNames() throws JavaModelException", "diff": ["+\t\t// don't try to look for javadoc for synthetic methods", "+\t\tint modifiers = this.getFlags();", "+\t\tif ((modifiers & ClassFileConstants.AccSynthetic) != 0) {", "+\t\t\treturn this.parameterNames = getRawParameterNames(paramCount);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d46cfdf5801394d16c7d634b1b86a35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "7d7797539ceb0e305089090de2ead51ebf92aa21", "commitAfterChange": "bf1b15113f19bebe8799f253fba2c98750e6b32c", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " \tprivate void runTest( \t\t\tboolean shouldFlushOutputDirectory,  \t\t\tString[] testFiles, \t\t\tString[] classLibraries, \t\t\tMap customOptions, \t\t\tboolean performStatementsRecovery, \t\t\tICompilerRequestor customRequestor, \t\t\tboolean expectingCompilerErrors, \t\t\tString expectedCompilerLog, \t\t\tboolean forceExecution, \t\t\tString[] vmArguments, \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tJavacTestOptions javacTestOptions)", "signatureAfterChange": " \tprivate void runTest( \t\t\tboolean shouldFlushOutputDirectory,  \t\t\tString[] testFiles, \t\t\tString[] classLibraries, \t\t\tMap customOptions, \t\t\tboolean performStatementsRecovery, \t\t\tICompilerRequestor customRequestor, \t\t\tboolean expectingCompilerErrors, \t\t\tString expectedCompilerLog, \t\t\tboolean forceExecution, \t\t\tString[] vmArguments, \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tJavacTestOptions javacTestOptions)", "diff": ["+\t\t// complain early in RUN_JAVAC mode (avoid to do it else until we've fixed all tests)", "+\t\tif (RUN_JAVAC && testFiles != null && (testFiles.length % 2) != 0) {", "+\t\t\tfail(\"odd number of strings in testFiles\");", "+\t\t}"]}], "num": 52223}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7843ecd488348ccff27c3e6b7971a917", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1821f4aae6d7590c26276970a5b969df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "157332f94bb78b232425437b7f038d0e6c9bbfc2", "commitAfterChange": "7935a9b598fa65f4010dcaa4ea82e60362171faa", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["+\t\t\t\t\t\tboolean isUnicode = false;", "+\t\t\t\t\t\t\tisUnicode = true;", "-\t\t\t\t\t\t\t\tfor (int lookAhead = 0; lookAhead < 50; lookAhead++) {", "-\t\t\t\t\t\t\t\t\tif (this.currentPosition + lookAhead == this.source.length)", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tif (this.source[this.currentPosition + lookAhead] == '\\n')", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tif (this.source[this.currentPosition + lookAhead] == '\\\"') {", "-\t\t\t\t\t\t\t\t\t\tthis.currentPosition += lookAhead + 1;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tif (isUnicode) {", "+\t\t\t\t\t\t\t\t\tint start = this.currentPosition;", "+\t\t\t\t\t\t\t\t\tfor (int lookAhead = 0; lookAhead < 50; lookAhead++) {", "+\t\t\t\t\t\t\t\t\t\tif (this.currentPosition >= this.eofPosition) {", "+\t\t\t\t\t\t\t\t\t\t\tthis.currentPosition = start;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\') && (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t\t\t\t\tisUnicode = true;", "+\t\t\t\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tisUnicode = false;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (!isUnicode && this.currentCharacter == '\\n') {", "+\t\t\t\t\t\t\t\t\t\t\tthis.currentPosition--; // set current position on new line character", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (this.currentCharacter == '\\\"') {", "+\t\t\t\t\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_CHAR_IN_STRING);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tthis.currentPosition--; // set current position on new line character", "-\t\t\t\t\t\t\t\trecordComment(false);", "+\t\t\t\t\t\t\t\trecordComment(TokenNameCOMMENT_LINE);", "-\t\t\t\t\t\t\t\trecordComment(false);", "+\t\t\t\t\t\t\t\trecordComment(TokenNameCOMMENT_LINE);", "-\t\t\t\t\t\t\t\trecordComment(isJavadoc);", "+\t\t\t\t\t\t\t\tint token = isJavadoc ? TokenNameCOMMENT_JAVADOC : TokenNameCOMMENT_BLOCK;", "+\t\t\t\t\t\t\t\trecordComment(token);", "+\t\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\t\t\treturn token;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c649758eff33d3c5ea038f9b13f5144", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "b5f52b933f5dbf69d9431edbd5df70af243469ad", "commitAfterChange": "85d2a7b9a06730da2ba0f0da62a72256b6006740", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["+\t\t\t\t\t\tboolean isUnicode = false;", "+\t\t\t\t\t\t\tisUnicode = true;", "-\t\t\t\t\t\t\t\tfor (int lookAhead = 0; lookAhead < 50; lookAhead++) {", "-\t\t\t\t\t\t\t\t\tif (this.currentPosition + lookAhead == this.source.length)", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tif (this.source[this.currentPosition + lookAhead] == '\\n')", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tif (this.source[this.currentPosition + lookAhead] == '\\\"') {", "-\t\t\t\t\t\t\t\t\t\tthis.currentPosition += lookAhead + 1;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tif (isUnicode) {", "+\t\t\t\t\t\t\t\t\tint start = this.currentPosition;", "+\t\t\t\t\t\t\t\t\tfor (int lookAhead = 0; lookAhead < 50; lookAhead++) {", "+\t\t\t\t\t\t\t\t\t\tif (this.currentPosition >= this.eofPosition) {", "+\t\t\t\t\t\t\t\t\t\t\tthis.currentPosition = start;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\') && (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t\t\t\t\tisUnicode = true;", "+\t\t\t\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tisUnicode = false;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (!isUnicode && this.currentCharacter == '\\n') {", "+\t\t\t\t\t\t\t\t\t\t\tthis.currentPosition--; // set current position on new line character", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (this.currentCharacter == '\\\"') {", "+\t\t\t\t\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_CHAR_IN_STRING);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tthis.currentPosition--; // set current position on new line character"]}], "num": 7860}
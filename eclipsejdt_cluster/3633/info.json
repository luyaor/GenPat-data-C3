{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30ac4ec1c69e93afc5830acffcdf5965", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00213ce6276db01e225f253e324aa4c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "5292c15945b50fef548808f853ce39423b5670f2", "commitAfterChange": "e32dbbc9904e1f7eb4c6e79a7595e742217638b3", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 69, "signatureBeforeChange": "  \tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block)", "signatureAfterChange": "  \tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block, boolean textOnNewLine)", "diff": ["-\tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block) {", "+\tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block, boolean textOnNewLine) {", "-\t\tboolean indentRootTags = this.formatter.preferences.comment_indent_root_tags && !block.isDescription();", "-\t\tboolean indentParamTag = this.formatter.preferences.comment_indent_parameter_description && block.isParamTag();", "-\t\tStringBuffer indentationBuffer = null;", "-\t\tif (indentRootTags) {", "-\t\t\tint indentLevel = this.indentationLevel;", "-\t\t\tint indentations = this.numberOfIndentations;", "-\t\t\tthis.numberOfIndentations += (BLOCK_LINE_PREFIX_LENGTH / this.indentationSize) + 1;", "-\t\t\tthis.indentationLevel = this.numberOfIndentations * this.indentationSize;", "-\t\t\tint currentColumn = this.column;", "-\t\t\tthis.column = firstColumn;", "-\t\t\tif (indentParamTag) {", "-\t\t\t\tthis.indentationLevel += this.indentationSize;", "-\t\t\t\tthis.numberOfIndentations++;", "-\t\t\t}", "-\t\t\tprintIndentationIfNecessary(indentationBuffer = new StringBuffer());", "-\t\t\tthis.column = currentColumn;", "-\t\t\tthis.indentationLevel = indentLevel;", "-\t\t\tthis.numberOfIndentations = indentations;", "-\t\t}", "+\t\tStringBuffer indentationBuffer = printJavadocIndentationBuffer(block, firstColumn);", "-\t\tboolean textOnNewLine = (text == block.nodes[0] && ((!block.isInlined() && block.isParamTag() && this.formatter.preferences.comment_insert_new_line_for_parameter) || !block.hasTextOnTagLine())) || text.linesBefore > 0;", "-\t\t\t\tboolean wasHtmlTag = false;", "+\t\t\t\tint nodeKind = 0; // text break", "+\t\t\t\t\tif (newLines == 0) {", "+\t\t\t\t\t\tnewLines = printJavadocBlockNodesNewLines(block, node, previousEnd);", "+\t\t\t\t\t}", "-\t\t\t\t\t\t\tlinesAfter = printJavadocHtmlTag(htmlTag, block);", "+\t\t\t\t\t\t\tlinesAfter = printJavadocHtmlTag(htmlTag, block, textOnNewLine);", "+\t\t\t\t\t\tnodeKind = 1; // text", "+\t\t\t\t\t\tnodeKind = 2; // block", "-\t\t\t\t\twasHtmlTag = true;", "-\t\t\t\t\tif (clearBlankLines) {", "+\t\t\t\t\tif (clearBlankLines && linesGap > 1) {", "-\t\t\t\t\t\tif (idx==0 || (idx==max && ((text.htmlIndexes[max] & JAVADOC_TAGS_ID_MASK) == htmlTagID)) || (idx < max && wasHtmlTag && (text.htmlIndexes[idx-1] & JAVADOC_TAGS_ID_MASK) != JAVADOC_IMMUTABLE_TAGS_ID)) {", "+\t\t\t\t\t\tif (idx==0 || (idx==max && ((text.htmlIndexes[max] & JAVADOC_TAGS_ID_MASK) == htmlTagID)) || (idx < max && nodeKind==1 && (text.htmlIndexes[idx-1] & JAVADOC_TAGS_ID_MASK) != JAVADOC_IMMUTABLE_TAGS_ID)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a08f266b22cfdb56353042cb412b184", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 250, "signatureBeforeChange": " protected void consumeCastExpressionLL1WithTypeAnnotations()", "signatureAfterChange": " private void rejectIllegalLeadingTypeAnnotations(TypeReference typeReference)", "diff": ["-protected void consumeCastExpressionLL1WithTypeAnnotations() {", "-\t// CastExpression ::= '(' Modifiers Name ')' InsideCastExpressionLL1 UnaryExpressionNotPlusMinus", "-\t// Expression is used in order to make the grammar LL1", "-", "-\t//optimize push/pop", "-", "-\t// pop the expression", "-\tExpression expression = this.expressionStack[this.expressionPtr--];", "-\tthis.expressionLengthPtr--;", "-\t// pop the type reference", "-\tTypeReference typeReference = (TypeReference) this.expressionStack[this.expressionPtr--];", "-\tthis.expressionLengthPtr--;", "-\t", "-\tint length;", "-\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "-\t\ttypeReference.annotations = new Annotation[typeReference.getAnnotatableLevels()][];", "-\t\tSystem.arraycopy(", "-\t\t\t\tthis.expressionStack,", "-\t\t\t\t(this.expressionPtr -= length) + 1,", "-\t\t\t\ttypeReference.annotations[0] = new Annotation[length],", "-\t\t\t\t0,", "-\t\t\t\tlength);", "-\t\tint typeReferenceSourceStart = typeReference.annotations[0][0].sourceStart;", "-\t\tif (this.modifiersSourceStart < typeReferenceSourceStart) {", "-\t\t\ttypeReferenceSourceStart = this.modifiersSourceStart;", "-\t\t}", "-\t\ttypeReference.sourceStart = typeReferenceSourceStart;", "-\t\ttypeReference.bits |= ASTNode.HasTypeAnnotations;", "-\t}", "-\tExpression cast;", "-\tpushOnExpressionStack(cast = new CastExpression(expression, typeReference));", "-\t// pop the two positions for left and right parenthesis ", "-\tupdateSourcePosition(cast);", "-\tcast.sourceEnd = expression.sourceEnd;", "-\tif (this.modifiers != ClassFileConstants.AccDefault) {", "-\t\tproblemReporter().invalidLocationForModifiers(typeReference);", "-\t}", "-\tresetModifiers();", "-}", "+}", "+private void rejectIllegalLeadingTypeAnnotations(TypeReference typeReference) {", "+\t// Reject misplaced annotations prefixed to a type reference; Used when the grammar is permissive enough to allow them in the first place.", "+\tAnnotation [][]  annotations = typeReference.annotations;", "+\tif (annotations != null && annotations[0] != null) {", "+\t\tproblemReporter().misplacedTypeAnnotations(annotations[0][0], annotations[0][annotations[0].length - 1]);", "+\t\tannotations[0] = null;  // don't complain further.", "+\t}", "+}"]}], "num": 3633}
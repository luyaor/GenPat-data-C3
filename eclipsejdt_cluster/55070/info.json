{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9521285192335c8be6ad6a9486e145f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bf6c75fe6ee1ed9739df323624f064b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Requestor.java", "commitBeforeChange": "9ca5fa129e003b71c76c933d9b76010e0a23b71b", "commitAfterChange": "d86670742691fd07e39a2dd80f7e11e37621edc5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void acceptResult(CompilationResult compilationResult)", "signatureAfterChange": " public void acceptResult(CompilationResult compilationResult)", "diff": ["-\t\t\tif (problems[i] != null) {", "+\t\t\tDefaultProblem problem = (DefaultProblem) problems[i];", "+\t\t\tif (problem != null) {", "-\t\t\t\tbuffer.append(problemCount + (problems[i].isError() ? \". ERROR\" : \". WARNING\"));", "-\t\t\t\tbuffer.append(\" in \" + new String(problems[i].getOriginatingFileName()).replace('/', '\\\\'));", "+\t\t\t\tbuffer.append(problemCount + (problem.isError() ? \". ERROR\" : \". WARNING\"));", "+\t\t\t\tbuffer.append(\" in \" + new String(problem.getOriginatingFileName()).replace('/', '\\\\'));", "-\t\t\t\t\tbuffer.append(((DefaultProblem)problems[i]).errorReportSource(unitSource));", "+\t\t\t\t\tbuffer.append(problem.errorReportSource(unitSource));", "-\t\t\t\t\tbuffer.append(problems[i].getMessage());", "+\t\t\t\t\tif (showCategory) {", "+\t\t\t\t\t\tString category = problem.getInternalCategoryMessage();", "+\t\t\t\t\t\tif (category != null) {", "+\t\t\t\t\t\t\tbuffer.append(\"[@cat:\").append(category).append(\"] \");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (showWarningToken) {", "+\t\t\t\t\t\tlong irritant = ProblemReporter.getIrritant(problem.getID());", "+\t\t\t\t\t\tif (irritant != 0) {", "+\t\t\t\t\t\t\tString warningToken = CompilerOptions.warningTokenFromIrritant(irritant);", "+\t\t\t\t\t\t\tif (warningToken != null) {", "+\t\t\t\t\t\t\t\tbuffer.append(\"[@sup:\").append(warningToken).append(\"] \");", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tbuffer.append(problem.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd8898d576d4802ea4692b2580ee9e5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java", "commitBeforeChange": "a8d9477532d4953ddbbeff7907775085b3a4bf13", "commitAfterChange": "c862962851317aa4f8381f94c14dfd8552af8943", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \t@Override \tpublic List<? extends VariableElement> getParameters()", "signatureAfterChange": "  \t@Override \tpublic List<? extends VariableElement> getParameters()", "diff": ["-\t\tif (0 == binding.parameters.length) {", "-\t\t\treturn Collections.emptyList();", "+\t\tint length = binding.parameters == null ? 0 : binding.parameters.length;", "+\t\tif (0 != length) {", "+\t\t\tAbstractMethodDeclaration methodDeclaration = binding.sourceMethod();", "+\t\t\tList<VariableElement> params = new ArrayList<VariableElement>(length);", "+\t\t\tif (methodDeclaration != null) {", "+\t\t\t\tfor (Argument argument : methodDeclaration.arguments) {", "+\t\t\t\t\tVariableElement param = new VariableElementImpl(argument.binding);", "+\t\t\t\t\tparams.add(param);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t// binary method", "+\t\t\t\tint i = 0;", "+\t\t\t\tfor (TypeBinding typeBinding : binding.parameters) {", "+\t\t\t\t\tStringBuilder builder = new StringBuilder(\"arg\");//$NON-NLS-1$", "+\t\t\t\t\tbuilder.append(i);", "+\t\t\t\t\tVariableElement param = new VariableElementImpl(new LocalVariableBinding(String.valueOf(builder).toCharArray(), typeBinding, 0, true));", "+\t\t\t\t\tparams.add(param);", "+\t\t\t\t\ti++;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn Collections.unmodifiableList(params);", "-\t\tList<VariableElement> params = new ArrayList<VariableElement>(binding.parameters.length);", "-\t\tfor (TypeBinding paramBinding : binding.parameters) {", "-\t\t\tVariableElement param = new VariableElementImpl(paramBinding);", "-\t\t\tparams.add(param);", "-\t\t}", "-\t\treturn Collections.unmodifiableList(params);", "+\t\treturn Collections.emptyList();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e83eb2b3d67222af7d148f3a3eb6a2d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "commitAfterChange": "6fea7eafdd413dccff31028f8da1f1ac6859e6fe", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "signatureAfterChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "diff": ["-    \tIPath workspaceRootPath = jproj.getProject().getWorkspace().getRoot().getLocation();", "+    \tIWorkspaceRoot root = jproj.getProject().getWorkspace().getRoot();", "-\t    \t\t\tclasspathSB.append(entry.getPath().makeAbsolute().toOSString());", "+\t    \t\t\tIPath cpPath = entry.getPath();", "+\t    \t\t\t", "+\t    \t\t\tIResource res = root.findMember(cpPath);", "+\t    \t\t\t", "+\t    \t\t\t// If res is null, the path is absolute (it's an external jar)", "+\t    \t\t\tif (res == null) {", "+\t    \t\t\t\tclasspathSB.append(cpPath.toOSString());", "+\t    \t\t\t}", "+\t    \t\t\telse {", "+\t    \t\t\t\t// It's relative", "+\t    \t\t\t\tclasspathSB.append(res.getLocation().toOSString());", "+\t    \t\t\t}", "-    \t\t\t\t\tsourcepathSB.append(File.separatorChar);", "+    \t\t\t\t\tsourcepathSB.append(File.pathSeparatorChar);", "-    \t\t\t\t// Sourcepath is a bit odd -- it's workspace-relative", "-    \t\t\t\tIPath sourcepath = entry.getPath();", "-    \t\t\t\tsourcepathSB.append(workspaceRootPath.append(sourcepath).toOSString());", "+    \t\t\t\t", "+    \t\t\t\tsourcepathSB.append(root.findMember(entry.getPath()).getLocation().toOSString());", "-    \t\toptions.put(\"-classpath\",classpathSB.toString()); //$NON-NLS-1$", "+    \t\toptions.put(\"-classpath\",classpathSB.toString()); //$NON-NLS-1$    \t\t", "-    \t\toptions.put(\"-s\", genSrcDir.getRawLocation().toOSString()); //$NON-NLS-1$", "+    \t\tString genSrcDirString = genSrcDir.getRawLocation().toOSString();", "+    \t\toptions.put(\"-s\", genSrcDirString); //$NON-NLS-1$", "-    \t\tIPath binDir = workspaceRootPath.append(binPath);", "-    \t\toptions.put(\"-d\", binDir.toOSString()); //$NON-NLS-1$", "+    \t\tIResource binPathResource = root.findMember(binPath);", "+    \t\tString binDirString;", "+    \t\tif (binPathResource != null) {", "+    \t\t\tbinDirString = root.findMember(binPath).getLocation().toOSString();", "+    \t\t}", "+    \t\telse {", "+    \t\t\tbinDirString = binPath.toOSString();", "+    \t\t}", "+    \t\toptions.put(\"-d\", binDirString); //$NON-NLS-1$"]}], "num": 55070}
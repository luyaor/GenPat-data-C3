{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e79cecdda10c98cc83403938841d55b3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8209ef05781559055a2d65b7b55d5680", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "82adc87bce1ed4088802638154568eeec8ab8e88", "commitAfterChange": "b1c69f20f23ddb575225e5b5cb5d470714f41aad", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic void addBound(TypeBound bound, LookupEnvironment environment)", "signatureAfterChange": "  \tpublic void addBound(TypeBound bound, LookupEnvironment environment)", "diff": ["-\t\tThreeSets three = this.boundsPerVariable.get(bound.left);", "+\t\tInferenceVariable variable = bound.left.prototype();", "+\t\tThreeSets three = this.boundsPerVariable.get(variable);", "-\t\t\tthis.boundsPerVariable.put(bound.left, (three = new ThreeSets()));", "+\t\t\tthis.boundsPerVariable.put(variable, (three = new ThreeSets()));", "-\t\t\tthree.setInstantiation(typeBinding, bound.left, environment);", "+\t\t\tthree.setInstantiation(typeBinding, variable, environment);", "-\t\t\tInferenceVariable rightIV = (InferenceVariable) bound.right;", "+\t\t\tInferenceVariable rightIV = (InferenceVariable) bound.right.prototype();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eb8df0f08dedb4fe05f68e3dd304437", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "8f906774856d3fb8be48e8c1fa76527878a0f865", "commitAfterChange": "ecf6de5abf72d6130a58d26da044687c85216430", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": " public void generateSyntheticBodyForMethodAccess(SyntheticMethodBinding accessMethod)", "signatureAfterChange": " public void generateSyntheticBodyForMethodAccess(SyntheticMethodBinding accessMethod)", "diff": ["-\t\t\tif (targetMethod.returnType != accessMethod.returnType)", "-\t\t\t\tthis.checkcast(accessMethod.returnType); // for bridge methods", "+\t\t\tTypeBinding accessErasure = accessMethod.returnType.erasure();", "+\t\t\tif (!targetMethod.returnType.isCompatibleWith(accessErasure))", "+\t\t\t\tthis.checkcast(accessErasure); // for bridge methods"]}], "num": 18889}
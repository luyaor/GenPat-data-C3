{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c8401cbdc26338dff0b97f018ed9a611", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "422b957e5b6a98f2b551f7e15bc8df8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["+\t\t\tboolean isStringSwitch = false;", "+\t\t\t\t\t} else if (upperScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_7 && expressionType.id == TypeIds.T_JavaLangString) {", "+\t\t\t\t\t\tisStringSwitch = true;", "+\t\t\t\t\t\tbreak checkType;", "-\t\t\t\tthis.constants = new int[length];", "-\t\t\t\tCaseStatement[] duplicateCaseStatements = null;", "-\t\t\t\tint duplicateCaseStatementsCounter = 0;", "+\t\t\t\tif (!isStringSwitch) {", "+\t\t\t\t\tthis.constants = new int[length];", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.stringConstants = new String[length];", "+\t\t\t\t}", "-\t\t\t\t\t\tint key = constant.intValue();", "-\t\t\t\t\t\t//----check for duplicate case statement------------", "-\t\t\t\t\t\tfor (int j = 0; j < counter; j++) {", "-\t\t\t\t\t\t\tif (this.constants[j] == key) {", "-\t\t\t\t\t\t\t\tfinal CaseStatement currentCaseStatement = (CaseStatement) statement;", "-\t\t\t\t\t\t\t\tif (duplicateCaseStatements == null) {", "-\t\t\t\t\t\t\t\t\tthis.scope.problemReporter().duplicateCase(this.cases[j]);", "-\t\t\t\t\t\t\t\t\tthis.scope.problemReporter().duplicateCase(currentCaseStatement);", "-\t\t\t\t\t\t\t\t\tduplicateCaseStatements = new CaseStatement[length];", "-\t\t\t\t\t\t\t\t\tduplicateCaseStatements[duplicateCaseStatementsCounter++] = this.cases[j];", "-\t\t\t\t\t\t\t\t\tduplicateCaseStatements[duplicateCaseStatementsCounter++] = currentCaseStatement;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tboolean found = false;", "-\t\t\t\t\t\t\t\t\tsearchReportedDuplicate: for (int k = 2; k < duplicateCaseStatementsCounter; k++) {", "-\t\t\t\t\t\t\t\t\t\tif (duplicateCaseStatements[k] == statement) {", "-\t\t\t\t\t\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\t\t\t\t\t\tbreak searchReportedDuplicate;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (!found) {", "-\t\t\t\t\t\t\t\t\t\tthis.scope.problemReporter().duplicateCase(currentCaseStatement);", "-\t\t\t\t\t\t\t\t\t\tduplicateCaseStatements[duplicateCaseStatementsCounter++] = currentCaseStatement;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!isStringSwitch) {", "+\t\t\t\t\t\t\tint key = constant.intValue();", "+\t\t\t\t\t\t\t//----check for duplicate case statement------------", "+\t\t\t\t\t\t\tfor (int j = 0; j < counter; j++) {", "+\t\t\t\t\t\t\t\tif (this.constants[j] == key) {", "+\t\t\t\t\t\t\t\t\treportDuplicateCase((CaseStatement) statement, this.cases[j], length);", "+\t\t\t\t\t\t\tthis.constants[counter++] = key;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tString key = constant.stringValue();", "+\t\t\t\t\t\t\t//----check for duplicate case statement------------", "+\t\t\t\t\t\t\tfor (int j = 0; j < counter; j++) {", "+\t\t\t\t\t\t\t\tif (this.stringConstants[j].equals(key)) {", "+\t\t\t\t\t\t\t\t\treportDuplicateCase((CaseStatement) statement, this.cases[j], length);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.stringConstants[counter++] = key;\t\t\t", "-\t\t\t\t\t\tthis.constants[counter++] = key;", "-\t\t\t\t\tSystem.arraycopy(this.constants, 0, this.constants = new int[counter], 0, counter);", "+\t\t\t\t\tif (!isStringSwitch) {", "+\t\t\t\t\t\tSystem.arraycopy(this.constants, 0, this.constants = new int[counter], 0, counter);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tSystem.arraycopy(this.stringConstants, 0, this.stringConstants = new String[counter], 0, counter);", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (isStringSwitch) {", "+\t\t\t\tthis.dispatchStringCopy  = new LocalVariableBinding(SecretStringVariableName, upperScope.getJavaLangString(), ClassFileConstants.AccDefault, false);", "+\t\t\t\tupperScope.addLocalVariable(this.dispatchStringCopy);", "+\t\t\t\tthis.dispatchStringCopy.setConstant(Constant.NotAConstant);", "+\t\t\t\tthis.dispatchStringCopy.useFlag = LocalVariableBinding.USED;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85699fa9dd71c0edfdc83de9a9d9c20c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "b1348e3d0230a581c7eb25acd6ec072853b12bb0", "commitAfterChange": "f3728b24e0fe129a3644e987b967023e3f656958", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \tpublic void enterClass(\r \t\tint declarationStart,\r \t\tint modifiers,\r \t\tchar[] name,\r \t\tint nameSourceStart,\r \t\tint nameSourceEnd,\r \t\tchar[] superclass,\r \t\tchar[][] superinterfaces)", "signatureAfterChange": "\r \tpublic void enterClass(\r \t\tint declarationStart,\r \t\tint modifiers,\r \t\tchar[] name,\r \t\tint nameSourceStart,\r \t\tint nameSourceEnd,\r \t\tchar[] superclass,\r \t\tchar[][] superinterfaces)", "diff": ["+\t\t\tSystem.arraycopy(\r", "+\t\t\t\tthis.fMemberName,\r", "+\t\t\t\t0,\r", "+\t\t\t\tthis.fMemberName = new String[this.typeDepth * 2],\r", "+\t\t\t\t0,\r", "+\t\t\t\tthis.typeDepth);\r", "+\t\t\tSystem.arraycopy(\r", "+\t\t\t\tthis.fMemberDeclarationStart,\r", "+\t\t\t\t0,\r", "+\t\t\t\tthis.fMemberDeclarationStart = new int[this.typeDepth * 2],\r", "+\t\t\t\t0,\r", "+\t\t\t\tthis.typeDepth);\t\t\t\t\t\t\t\r", "+\t\t\tSystem.arraycopy(\r", "+\t\t\t\tthis.fMemberNameRange,\r", "+\t\t\t\t0,\r", "+\t\t\t\tthis.fMemberNameRange = new SourceRange[this.typeDepth * 2],\r", "+\t\t\t\t0,\r", "+\t\t\t\tthis.typeDepth);\r", "+\t\t\tSystem.arraycopy(\r", "+\t\t\t\tthis.fMethodParameterTypes,\r", "+\t\t\t\t0,\r", "+\t\t\t\tthis.fMethodParameterTypes = new char[this.typeDepth * 2][][],\r", "+\t\t\t\t0,\r", "+\t\t\t\tthis.typeDepth);\t\t\t\t\t\r", "-\t\tthis.types[typeDepth] = this.getType(new String(name));\r", "+\t\tif (name.length == 0) {\r", "+\t\t\tthis.anonymousCounter++;\r", "+\t\t\tif (this.anonymousCounter == this.anonymousClassName) {\r", "+\t\t\t\tthis.types[typeDepth] = this.getType(fType.getElementName());\r", "+\t\t\t} else {\r", "+\t\t\t\tthis.types[typeDepth] = this.getType(new String(name));\t\t\t\t\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\tthis.types[typeDepth] = this.getType(new String(name));\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e2c3ca77ff6e2c6d9741f14d9c9ac1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionJavadocParser.java", "commitBeforeChange": "eb1301b98f2da1fb78fff513bcf414717fc53a5b", "commitAfterChange": "3707a04a590722ca1140d7955ba0f8b75fc66814", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected Object createTypeReference(int primitiveToken)", "signatureAfterChange": " \tprotected Object createTypeReference(int primitiveToken)", "diff": ["-\t\t\tif (this.identifierStack[this.identifierPtr] == CompletionScanner.EmptyCompletionIdentifier) {", "-\t\t\t\treturn null;", "-\t\t\t}", "-\t\t\t// See if completion is in qualification", "-\t\t\tint size = nbIdentifiers;", "-\t\t\tif (this.tagSourceStart <= this.cursorLocation && this.cursorLocation <= this.tagSourceEnd) {", "-\t\t\t\tfor (size=0; size<nbIdentifiers; size++) {", "-\t\t\t\t\tint start = (int) (this.identifierPositionStack[size] >>> 32);", "-\t\t\t\t\tint end = (int) this.identifierPositionStack[size];", "-\t\t\t\t\tif (start <= this.cursorLocation && this.cursorLocation <= end) {", "-\t\t\t\t\t\tsize++;", "-\t\t\t\t\t\tbreak;", "+\t\t\tfor (int i=startPtr; i<this.identifierPtr; i++) {", "+\t\t\t\tint start = (int) (this.identifierPositionStack[i] >>> 32);", "+\t\t\t\tint end = (int) this.identifierPositionStack[i];", "+\t\t\t\tif (start <= this.cursorLocation && this.cursorLocation <= end) {", "+\t\t\t\t\tif (i == startPtr) {", "+\t\t\t\t\t\tthis.completionNode = new CompletionOnJavadocSingleTypeReference(", "+\t\t\t\t\t\t\t\t\tthis.identifierStack[startPtr],", "+\t\t\t\t\t\t\t\t\tthis.identifierPositionStack[startPtr],", "+\t\t\t\t\t\t\t\t\tthis.tagSourceStart,", "+\t\t\t\t\t\t\t\t\tthis.tagSourceEnd);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tchar[][] tokens = new char[i][];", "+\t\t\t\t\t\tSystem.arraycopy(this.identifierStack, startPtr, tokens, 0, i);", "+\t\t\t\t\t\tlong[] positions = new long[i+1];", "+\t\t\t\t\t\tSystem.arraycopy(this.identifierPositionStack, startPtr, positions, 0, i+1);", "+\t\t\t\t\t\tthis.completionNode = new CompletionOnJavadocQualifiedTypeReference(tokens, this.identifierStack[i], positions, this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\tbreak;", "-\t\t\t", "-\t\t\t// Copy only tokens necessary for completion", "-\t\t\tchar[][] tokens = new char[size-1][];", "-\t\t\tSystem.arraycopy(this.identifierStack, startPtr, tokens, 0, size-1);", "-\t\t\tlong[] positions = new long[size];", "-\t\t\tSystem.arraycopy(this.identifierPositionStack, startPtr, positions, 0, size);", "-\t\t\tthis.completionNode = new CompletionOnJavadocQualifiedTypeReference(tokens, this.identifierStack[this.identifierPtr], positions, this.tagSourceStart, this.tagSourceEnd);", "+\t\t\tif (this.completionNode == null) {", "+\t\t\t\tchar[][] tokens = new char[nbIdentifiers-1][];", "+\t\t\t\tSystem.arraycopy(this.identifierStack, startPtr, tokens, 0, nbIdentifiers-1);", "+\t\t\t\tlong[] positions = new long[nbIdentifiers];", "+\t\t\t\tSystem.arraycopy(this.identifierPositionStack, startPtr, positions, 0, nbIdentifiers);", "+\t\t\t\tthis.completionNode = new CompletionOnJavadocQualifiedTypeReference(tokens, this.identifierStack[this.identifierPtr], positions, this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed94687ef0627d4da5e983f3df9a6c89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "9156e33be70429042b1d72217c4197f996fdfb3a", "commitAfterChange": "0bbc1f10f38c090526549c38a7d30ff164b71a76", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void checkTaskTag(int commentStart, int commentEnd)", "signatureAfterChange": " public void checkTaskTag(int commentStart, int commentEnd)", "diff": ["-\tif (this.taskCount > 0 && this.taskPositions[this.taskCount-1][0] >= commentStart) {", "+\tif (this.foundTaskCount > 0 && this.foundTaskPositions[this.foundTaskCount-1][0] >= commentStart) {", "+\t\tchar[] tag = null;", "+\t\tchar[] priority = null;", "-\t\t\tchar[] tag = this.taskTags[itag];", "+\t\t\ttag = this.taskTags[itag];", "+\t\t\tpriority = ", "+\t\t\t\tthis.taskPriorities != null && itag < this.taskPriorities.length ?", "+\t\t\t\tthis.taskPriorities[itag] :", "+\t\t\t\tnull;", "-\t\tint msgStart = i; // to exlude tag use:   int msgStart = nextPos;", "+\t\tint msgStart = nextPos;", "-\t\twhile (source[msgStart] == ' ' && msgStart <= end) msgStart++;", "-\t\twhile (source[end] == ' ' && start <= end) end--;", "+\t\twhile (CharOperation.isWhitespace(source[msgStart]) && msgStart <= end) msgStart++;", "+\t\twhile (CharOperation.isWhitespace(source[end]) && msgStart <= end) end--;", "-\t\tif (this.taskMessages == null){", "-\t\t\tthis.taskMessages = new char[5][];", "-\t\t\tthis.taskPositions = new int[5][];", "-\t\t} else if (this.taskCount == this.taskMessages.length) {", "-\t\t\tSystem.arraycopy(this.taskMessages, 0, this.taskMessages = new char[this.taskCount*2][], 0, this.taskCount);", "-\t\t\tSystem.arraycopy(this.taskPositions, 0, this.taskPositions = new int[this.taskCount*2][], 0, this.taskCount);", "+\t\tif (this.foundTaskTags == null){", "+\t\t\tthis.foundTaskTags = new char[5][];", "+\t\t\tthis.foundTaskMessages = new char[5][];", "+\t\t\tthis.foundTaskPriorities = new char[5][];", "+\t\t\tthis.foundTaskPositions = new int[5][];", "+\t\t} else if (this.foundTaskCount == this.foundTaskTags.length) {", "+\t\t\tSystem.arraycopy(this.foundTaskTags, 0, this.foundTaskTags = new char[this.foundTaskCount*2][], 0, this.foundTaskCount);", "+\t\t\tSystem.arraycopy(this.foundTaskMessages, 0, this.foundTaskMessages = new char[this.foundTaskCount*2][], 0, this.foundTaskCount);", "+\t\t\tSystem.arraycopy(this.foundTaskPriorities, 0, this.foundTaskPriorities = new char[this.foundTaskCount*2][], 0, this.foundTaskCount);", "+\t\t\tSystem.arraycopy(this.foundTaskPositions, 0, this.foundTaskPositions = new int[this.foundTaskCount*2][], 0, this.foundTaskCount);", "-\t\tthis.taskMessages[this.taskCount] = message;", "-\t\tthis.taskPositions[this.taskCount] = new int[]{ start, end };", "-\t\tthis.taskCount++;", "+\t\tthis.foundTaskTags[this.foundTaskCount] = tag;", "+\t\tthis.foundTaskMessages[this.foundTaskCount] = message;", "+\t\tthis.foundTaskPriorities[this.foundTaskCount] = priority;", "+\t\tthis.foundTaskPositions[this.foundTaskCount] = new int[]{ start, end };", "+\t\tthis.foundTaskCount++;"]}], "num": 6052}
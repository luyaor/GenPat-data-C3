{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a31999e2b1f18b2c30d9633a7e43430", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b47e3d6a882c70f4fe181413fbcdb76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic ICompilationUnit getWorkingCopy(String fileName, String source) throws JavaModelException", "signatureAfterChange": " \tpublic ICompilationUnit getWorkingCopy(String fileName, String source) throws JavaModelException", "diff": ["+\t\tIPath folder = new Path(fileName).removeLastSegments(1);", "-\t\t\tcreateFolder(new Path(fileName).removeLastSegments(1));", "+\t\t\tcreateFolder(folder);", "-\t\treturn super.getWorkingCopy(fileName, source, true/*compute problems*/);", "+\t\tICompilationUnit workingCopy = super.getWorkingCopy(fileName, source, true/*compute problems*/);", "+\t\tworkingCopy.commitWorkingCopy(true, null);\t// need to commit to index file", "+\t\treturn workingCopy;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f86deba2219642de8cc49205de8e605c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "c7a8b7fd1ce23a51c71adbc13895e1e7353a4cf1", "commitAfterChange": "60d259d5b1e0ff710248aa3b7ae16581d3024e86", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate ReferenceBinding findGroundTargetType(BlockScope blockScope, TypeBinding targetType, boolean argumentTypesElided)", "signatureAfterChange": "  \tprivate ReferenceBinding findGroundTargetType(BlockScope blockScope, TypeBinding targetType, boolean argumentTypesElided)", "diff": ["-\t\t\t\tif (!argumentTypesElided)", "-\t\t\t\t\treturn new InferenceContext18(blockScope).inferFunctionalInterfaceParameterization(this, blockScope, withWildCards);", "-\t\t\t\telse", "+\t\t\t\tif (!argumentTypesElided) {", "+\t\t\t\t\tInferenceContext18 freshInferenceContext = new InferenceContext18(blockScope);", "+\t\t\t\t\tReferenceBinding inferredType = freshInferenceContext.inferFunctionalInterfaceParameterization(this, blockScope, withWildCards);", "+\t\t\t\t\tfreshInferenceContext.cleanUp();", "+\t\t\t\t\treturn inferredType;", "+\t\t\t\t} else {", "+\t\t\t\t}"]}], "num": 41953}
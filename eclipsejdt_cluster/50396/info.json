{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "16550da5315d7ab2440e3f410dd20e00", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47fb13b7a83197720761646e10ee0fbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "64e4eae71ee86f06dc3577f50fab8cad8599bd65", "commitAfterChange": "99d41ca529f3c8f860aeae6b4e02a522baae9a88", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope)", "signatureAfterChange": " \t \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope)", "diff": ["-\t\t\t\t\tfindVariablesAndMethods(", "-\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t(CompletionOnSingleNameReference) astNode,", "-\t\t\t\t\t\tscope);", "-\t\t\t\t\t// can be the start of a qualified type name", "-\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "-\t\t\t\t\tfindKeywords(this.completionToken, singleNameReference.possibleKeywords);", "-\t\t\t\t\tif(astNodeParent instanceof SwitchStatement) {", "+\t\t\t\t\tSwitchStatement switchStatement = astNodeParent instanceof SwitchStatement ? (SwitchStatement) astNodeParent : null;", "+\t\t\t\t\tif(switchStatement != null", "+\t\t\t\t\t\t\t&& switchStatement.expression.resolvedType != null", "+\t\t\t\t\t\t\t&& switchStatement.expression.resolvedType.isEnum()) {", "-\t\t\t\t\t}", "-\t\t\t\t\tif(singleNameReference.canBeExplicitConstructor){", "-\t\t\t\t\t\tif(CharOperation.prefixEquals(this.completionToken, Keywords.THIS, false)) {", "-\t\t\t\t\t\t\tReferenceBinding ref = scope.enclosingSourceType();", "-\t\t\t\t\t\t\tfindExplicitConstructors(Keywords.THIS, ref, (MethodScope)scope, singleNameReference);", "-\t\t\t\t\t\t} else if(CharOperation.prefixEquals(this.completionToken, Keywords.SUPER, false)) {", "-\t\t\t\t\t\t\tReferenceBinding ref = scope.enclosingSourceType();", "-\t\t\t\t\t\t\tfindExplicitConstructors(Keywords.SUPER, ref.superclass(), (MethodScope)scope, singleNameReference);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfindVariablesAndMethods(", "+\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t(CompletionOnSingleNameReference) astNode,", "+\t\t\t\t\t\t\tscope);", "+\t\t\t\t\t\t// can be the start of a qualified type name", "+\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t\tfindKeywords(this.completionToken, singleNameReference.possibleKeywords);", "+\t\t\t\t\t\tif(singleNameReference.canBeExplicitConstructor){", "+\t\t\t\t\t\t\tif(CharOperation.prefixEquals(this.completionToken, Keywords.THIS, false)) {", "+\t\t\t\t\t\t\t\tReferenceBinding ref = scope.enclosingSourceType();", "+\t\t\t\t\t\t\t\tfindExplicitConstructors(Keywords.THIS, ref, (MethodScope)scope, singleNameReference);", "+\t\t\t\t\t\t\t} else if(CharOperation.prefixEquals(this.completionToken, Keywords.SUPER, false)) {", "+\t\t\t\t\t\t\t\tReferenceBinding ref = scope.enclosingSourceType();", "+\t\t\t\t\t\t\t\tfindExplicitConstructors(Keywords.SUPER, ref.superclass(), (MethodScope)scope, singleNameReference);", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "895520750248bd3f527a2c25ae24e31b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "69b02d68015b1f30ee38d1576a843274517957c7", "commitAfterChange": "c7a9edf536467451ba659d7e03ac6c483c5c0cfe", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate void complete(AstNode astNode, AstNode astNodeParent, Binding qualifiedBinding, Scope scope)", "signatureAfterChange": "  \tprivate void complete(AstNode astNode, AstNode astNodeParent, Binding qualifiedBinding, Scope scope)", "diff": ["-", "-\t\t// defaults... some nodes will change these", "+\t\t", "-\t\t\t//\t\tfindKeywords(token, modifiers, scope); // could be the start of a field, method or member type", "+\t\t\t", "+\t\t\tfindKeywordsForMember(token, field.modifiers);", "-\t\t\t\t", "+\t\t\t\tfindKeywordsForMember(token, method.modifiers);", "+\t\t\t", "-\t", "-\t\t\t\t\ttoken = ((CompletionOnSingleNameReference) astNode).token;", "+\t\t\t\t\tCompletionOnSingleNameReference singleNameReference = (CompletionOnSingleNameReference) astNode;", "+\t\t\t\t\ttoken = singleNameReference.token;", "-\t", "+\t\t\t\t\tfindKeywords(token, singleNameReference.possibleKeywords);", "+\t\t\t\t\tif(singleNameReference.canBeExplicitConstructor){", "+\t\t\t\t\t\tif(CharOperation.prefixEquals(token, Keywords.THIS, false)) {", "+\t\t\t\t\t\t\tReferenceBinding ref = scope.enclosingSourceType();", "+\t\t\t\t\t\t\tfindExplicitConstructors(Keywords.THIS, ref, (MethodScope)scope, singleNameReference);", "+\t\t\t\t\t\t} else if(CharOperation.prefixEquals(token, Keywords.SUPER, false)) {", "+\t\t\t\t\t\t\tReferenceBinding ref = scope.enclosingSourceType();", "+\t\t\t\t\t\t\tfindExplicitConstructors(Keywords.SUPER, ref.superclass(), (MethodScope)scope, singleNameReference);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\tMethodScope methodScope = null;", "+\t\t\t\t\t\t\t\t\tif((scope instanceof MethodScope && !((MethodScope)scope).isStatic)", "+\t\t\t\t\t\t\t\t\t\t|| ((methodScope = scope.enclosingMethodScope()) != null && !methodScope.isStatic)) {", "+\t\t\t\t\t\t\t\t\t\tfindKeywords(token, new char[][]{Keywords.THIS});", "+\t\t\t\t\t\t\t\t\t}", "-\t", "+\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\tfindKeywords(token, new char[][]{Keywords.NEW});", "+\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(astNode instanceof CompletionOnKeyword) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnKeyword keyword = (CompletionOnKeyword)astNode;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindKeywords(keyword.getToken(), keyword.getPossibleKeywords());"]}], "num": 50396}
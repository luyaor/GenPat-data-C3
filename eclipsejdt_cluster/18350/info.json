{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "402f87530942a386a9bbac033b190584", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8798a4b59b2f49f39e5c43f0824abc32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java", "commitBeforeChange": "9f0a8c5111f4ca83a2831649c5d20d5f6b66d712", "commitAfterChange": "4ce841d6606c2c0b7f24c9925dd47ac216c52a6e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(CompilationUnit workingCopy) throws JavaModelException", "signatureAfterChange": " \tpublic org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(CompilationUnit workingCopy) throws JavaModelException", "diff": ["-\t\t\t\t\tthis.deltaBuilder.delta = new JavaElementDelta(workingCopy);", "+\t\t\t\t\tif (this.deltaBuilder.delta == null) {", "+\t\t\t\t\t\tthis.deltaBuilder.delta = new JavaElementDelta(workingCopy);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7190d5d79d0477c52e9d46e0b9e984c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "d92419d7d90bedd902391c7e83696cf6304867ae", "commitAfterChange": "5a71e292125f730be1fbb909dc68614ec3d003c5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate CompilationUnitDeclaration convert(ISourceType[] sourceTypes, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \tprivate CompilationUnitDeclaration convert(ISourceType[] sourceTypes, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\t\t\t// if more than 10 annotations, diet parse as this is faster", "-\t\t\treturn new Parser(this.problemReporter, true).dietParse(this.cu, compilationResult);", "+\t\t\t// If more than 10 annotations, diet parse as this is faster, but not if", "+\t\t\t// the client wants local and anonymous types to be converted (https://bugs.eclipse.org/bugs/show_bug.cgi?id=254738) ", "+\t\t\tif ((this.flags & LOCAL_TYPE) == 0) {", "+\t\t\t\treturn new Parser(this.problemReporter, true).dietParse(this.cu, compilationResult);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8d687a4b4657056df13f4ed32685c28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchSet.java", "commitBeforeChange": "aa7a65081771999e54f29a295541444307143029", "commitAfterChange": "34da8d24b2615f4b61dd942ff1ae7f24195e0b5d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void reportMatching(CompilationUnitDeclaration unit) throws CoreException", "signatureAfterChange": " public void reportMatching(CompilationUnitDeclaration unit) throws CoreException", "diff": ["+\t\t\t\t", "+\t\t\t\t// import ref cannot be in the hirarchy of a type", "+\t\t\t\tif (this.locator.hierarchyResolver != null) continue;", "+\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b80d3e06684d839d62f5d9cf2cac699c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "9c382b975bd859fabf0a4e2e50d8235074d1b233", "commitAfterChange": "4e96c3149b06a18db826fbf0e9331240092b91b0", "methodNumberBeforeChange": 429, "methodNumberAfterChange": 429, "signatureBeforeChange": "  public void recoveryExitFromVariable()", "signatureAfterChange": "  public void recoveryExitFromVariable()", "diff": ["-", "-\t\t\tint end = ((RecoveredField)this.currentElement).fieldDeclaration.sourceEnd;", "-\t\t\tthis.currentElement.updateSourceEndIfNecessary(end);", "-\t\t\tthis.currentElement = this.currentElement.parent;", "+\t\t\t// Do not move focus to parent if we are still inside an array initializer", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=292087 ", "+\t\t\tif (this.currentElement.bracketBalance <= 0) {", "+\t\t\t\tint end = ((RecoveredField)this.currentElement).fieldDeclaration.sourceEnd;", "+\t\t\t\tthis.currentElement.updateSourceEndIfNecessary(end);", "+\t\t\t\tthis.currentElement = this.currentElement.parent;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2c433e36aabef8aa6e76ce3d976b0c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SortElementBuilder.java", "commitBeforeChange": "f050f87591d1c8154cd5eacd6c4d7ce13e0152ec", "commitAfterChange": "8489b083cc8fc64f748e7613689c23a558afad07", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tpublic void exitField(int initializationStart, int declarationEnd, int declarationSourceEnd)", "signatureAfterChange": " \tpublic void exitField(int initializationStart, int declarationEnd, int declarationSourceEnd)", "diff": ["-\t\tSortElement element = this.currentElement.children[this.currentElement.children_count - 1];", "-\t\tif (element.id == SortJavaElement.MULTIPLE_FIELD) {", "-\t\t\tSortMultipleFielDeclaration multipleFielDeclaration = (SortMultipleFielDeclaration) element;", "-\t\t\tmultipleFielDeclaration.innerFields[multipleFielDeclaration.fieldCounter - 1].declarationSourceEnd = normalizedDeclarationSourceEnd;", "-\t\t\tmultipleFielDeclaration.sourceEnd = normalizedDeclarationSourceEnd;", "+\t\tif (this.currentElement.children != null) {", "+\t\t\tSortElement element = this.currentElement.children[this.currentElement.children_count - 1];", "+\t\t\tif (element.id == SortJavaElement.MULTIPLE_FIELD) {", "+\t\t\t\tSortMultipleFielDeclaration multipleFielDeclaration = (SortMultipleFielDeclaration) element;", "+\t\t\t\tmultipleFielDeclaration.innerFields[multipleFielDeclaration.fieldCounter - 1].declarationSourceEnd = normalizedDeclarationSourceEnd;", "+\t\t\t\tmultipleFielDeclaration.sourceEnd = normalizedDeclarationSourceEnd;", "+\t\t\t}"]}], "num": 18350}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23ceff959e5838876647e7f31541ce2d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64127acbcef25538759a39378020c0f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "6665973e9a36116a8cb24b7143317e47a83a98f0", "commitAfterChange": "305123b230bcfd1f733969b7cd2c687b75857ff0", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\tscope.problemReporter().forwardReference(this, this.indexOfFirstFieldBinding-1, fieldBinding);", "+\t\t\t\t\t\tif ((this.bits & IsMemberValueReference) != 0 && fieldBinding.id == methodScope.lastVisibleFieldID) {", "+\t\t\t\t\t\t\t// false alarm, location is NOT a field initializer but the value in a memberValuePair", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tscope.problemReporter().forwardReference(this, this.indexOfFirstFieldBinding-1, fieldBinding);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cde023441c8fd7f0b405f6de902a477", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "39389abe47a577c54c69522deb2432e5ac3e85f5", "commitAfterChange": "9e239639a34ee1dd1828902e14637119d5365d1c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, Expression receiver, ReferenceBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] argumentTypes, final InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, Expression receiver, ReferenceBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] argumentTypes, final InvocationSite invocationSite)", "diff": ["+ \t\t\t\t// narrowing conversion on base type may change value, thus necessary", "+\t\t\t\tif ((argument.bits & UnnecessaryCastMask) == 0 && argument.resolvedType.isBaseType()) {", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}\t\t"]}], "num": 37136}
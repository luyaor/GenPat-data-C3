{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7641d4eb05db2ec1a47585ea4597033", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d36fb358fbd2b9624fe490ded304585", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/NamingConventions.java", "commitBeforeChange": "64e9473f82af48ea4e5b2ff0272cf87fb1916f12", "commitAfterChange": "1612764cac82755ece5bb371b617dba233a98e7f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t\tpublic void acceptNameWithPrefixAndSuffix(char[] name)", "signatureAfterChange": " \t\tpublic void acceptNameWithPrefixAndSuffix(char[] name, boolean isFirstPrefix, boolean isFirstSuffix)", "diff": ["-\t\tpublic void acceptNameWithPrefixAndSuffix(char[] name) {", "-\t\t\tint length = prefixAndSuffixResults.length;", "-\t\t\tif(length == prefixAndSuffixResultsCount) {", "-\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\tprefixAndSuffixResults,", "-\t\t\t\t\t0,", "-\t\t\t\t\tprefixAndSuffixResults = new char[length * 2][],", "-\t\t\t\t\t0,", "-\t\t\t\t\tlength);", "+\t\tpublic void acceptNameWithPrefixAndSuffix(char[] name, boolean isFirstPrefix, boolean isFirstSuffix) {", "+\t\t\tif(isFirstPrefix && isFirstSuffix) {", "+\t\t\t\tint length = firstPrefixAndFirstSuffixResults.length;", "+\t\t\t\tif(length == firstPrefixAndFirstSuffixResultsCount) {", "+\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\tfirstPrefixAndFirstSuffixResults,", "+\t\t\t\t\t\t0,", "+\t\t\t\t\t\tfirstPrefixAndFirstSuffixResults = new char[length * 2][],", "+\t\t\t\t\t\t0,", "+\t\t\t\t\t\tlength);", "+\t\t\t\t}", "+\t\t\t\tfirstPrefixAndFirstSuffixResults[firstPrefixAndFirstSuffixResultsCount++] = name;\t\t\t", "+\t\t\t} else if (isFirstPrefix) {", "+\t\t\t\tint length = firstPrefixAndSuffixResults.length;", "+\t\t\t\tif(length == firstPrefixAndSuffixResultsCount) {", "+\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\tfirstPrefixAndSuffixResults,", "+\t\t\t\t\t\t0,", "+\t\t\t\t\t\tfirstPrefixAndSuffixResults = new char[length * 2][],", "+\t\t\t\t\t\t0,", "+\t\t\t\t\t\tlength);", "+\t\t\t\t}", "+\t\t\t\tfirstPrefixAndSuffixResults[firstPrefixAndSuffixResultsCount++] = name;", "+\t\t\t} else if(isFirstSuffix) {", "+\t\t\t\tint length = prefixAndFirstSuffixResults.length;", "+\t\t\t\tif(length == prefixAndFirstSuffixResultsCount) {", "+\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\tprefixAndFirstSuffixResults,", "+\t\t\t\t\t\t0,", "+\t\t\t\t\t\tprefixAndFirstSuffixResults = new char[length * 2][],", "+\t\t\t\t\t\t0,", "+\t\t\t\t\t\tlength);", "+\t\t\t\t}", "+\t\t\t\tprefixAndFirstSuffixResults[prefixAndFirstSuffixResultsCount++] = name;", "+\t\t\t} else {", "+\t\t\t\tint length = prefixAndSuffixResults.length;", "+\t\t\t\tif(length == prefixAndSuffixResultsCount) {", "+\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\tprefixAndSuffixResults,", "+\t\t\t\t\t\t0,", "+\t\t\t\t\t\tprefixAndSuffixResults = new char[length * 2][],", "+\t\t\t\t\t\t0,", "+\t\t\t\t\t\tlength);", "+\t\t\t\t}", "+\t\t\t\tprefixAndSuffixResults[prefixAndSuffixResultsCount++] = name;", "-\t\t\tprefixAndSuffixResults[prefixAndSuffixResultsCount++] = name;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bfc7efba5cac514cc63033241b4cba9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["+\tMethodBinding[] resolvedMethods = this.methods;", "-\t\t\t\tthis.methods[i] = null; // unable to resolve parameters", "+\t\t\t\t// do not alter original method array until resolution is over, due to reentrance (143259)", "+\t\t\t\tif (resolvedMethods == this.methods) {", "+\t\t\t\t\tSystem.arraycopy(this.methods, 0, resolvedMethods = new MethodBinding[length], 0, length);", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tresolvedMethods[i] = null; // unable to resolve parameters", "-\t\t\tMethodBinding method = this.methods[i];", "+\t\t\tMethodBinding method = resolvedMethods[i];", "-\t\t\t\tMethodBinding method2 = this.methods[j];", "+\t\t\t\tMethodBinding method2 = resolvedMethods[j];", "-\t\t\t\t\t\tthis.methods[i] = null;", "+\t\t\t\t\t\t// do not alter original method array until resolution is over, due to reentrance (143259)", "+\t\t\t\t\t\tif (resolvedMethods == this.methods) {", "+\t\t\t\t\t\t\tSystem.arraycopy(this.methods, 0, resolvedMethods = new MethodBinding[length], 0, length);", "+\t\t\t\t\t\t}\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\tresolvedMethods[i] = null;", "-\t\t\t\t\tthis.methods[j] = null;", "+\t\t\t\t\t// do not alter original method array until resolution is over, due to reentrance (143259)", "+\t\t\t\t\tif (resolvedMethods == this.methods) {", "+\t\t\t\t\t\tSystem.arraycopy(this.methods, 0, resolvedMethods = new MethodBinding[length], 0, length);", "+\t\t\t\t\t}\t\t\t\t\t\t\t", "+\t\t\t\t\tresolvedMethods[j] = null;", "-\t\t\t\tmethod.sourceMethod().binding = null;", "-\t\t\t\tthis.methods[i] = null;", "+\t\t\t\tmethodDecl = method.sourceMethod();", "+\t\t\t\tif (methodDecl != null) {", "+\t\t\t\t\tmethodDecl.binding = null;", "+\t\t\t\t}", "+\t\t\t\t// do not alter original method array until resolution is over, due to reentrance (143259)", "+\t\t\t\tif (resolvedMethods == this.methods) {", "+\t\t\t\t\tSystem.arraycopy(this.methods, 0, resolvedMethods = new MethodBinding[length], 0, length);", "+\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\tresolvedMethods[i] = null;", "-\t\t\tint newSize = this.methods.length - failed;", "+\t\t\tint newSize = resolvedMethods.length - failed;", "-\t\t\t\tfor (int i = 0, j = 0, length = this.methods.length; i < length; i++)", "-\t\t\t\t\tif (this.methods[i] != null)", "-\t\t\t\t\t\tnewMethods[j++] = this.methods[i];", "+\t\t\t\tfor (int i = 0, j = 0, length = resolvedMethods.length; i < length; i++)", "+\t\t\t\t\tif (resolvedMethods[i] != null)", "+\t\t\t\t\t\tnewMethods[j++] = resolvedMethods[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64e3a04cd57f150ce67358d6f5452db7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "f8eb13111e85058d6a3b96c5e3a0a3762548a3d5", "commitAfterChange": "3a282cd8b7c83e96465ddc9983742da9604c6a89", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void enterTypeParameter(int declarationStart, char[] name, int nameSourceStart, int nameSourceEnd, char[][] typeParameterBounds)", "signatureAfterChange": " public void enterTypeParameter(int declarationStart, char[] name, int nameSourceStart, int nameSourceEnd, char[][] typeParameterBounds)", "diff": ["-\tparentInfo.addChild(handle);", "+\tif (parentInfo instanceof SourceTypeElementInfo) {", "+\t\tSourceTypeElementInfo elementInfo = (SourceTypeElementInfo) parentInfo;", "+\t\tITypeParameter[] typeParameters = elementInfo.typeParameters;", "+\t\tint length = typeParameters.length;", "+\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new ITypeParameter[length+1], 0, length);", "+\t\ttypeParameters[length] = handle;", "+\t\telementInfo.typeParameters = typeParameters;", "+\t} else {", "+\t\tSourceMethodElementInfo elementInfo = (SourceMethodElementInfo) parentInfo;", "+\t\tITypeParameter[] typeParameters = elementInfo.typeParameters;", "+\t\tint length = typeParameters.length;", "+\t\tSystem.arraycopy(typeParameters, 0, typeParameters = new ITypeParameter[length+1], 0, length);", "+\t\ttypeParameters[length] = handle;", "+\t\telementInfo.typeParameters = typeParameters;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fab3b863b9aa1a3c8733156dc879ed8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "01cd32eca444bcd6948bb1f985568a530753506d", "commitAfterChange": "0b99e59f5b8c33dba4fea6bb15ed5a9967aeb172", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tpublic static void suggestVariableNames( \t\t\tint variableKind, \t\t\tint baseNameKind, \t\t\tchar[] baseName, \t\t\tIJavaProject javaProject, \t\t\tint dim, \t\t\tchar[] internalPrefix, \t\t\tchar[][] excluded, \t\t\tboolean evaluateDefault, \t\t\tINamingRequestor requestor)", "signatureAfterChange": "  \tpublic static void suggestVariableNames( \t\t\tint variableKind, \t\t\tint baseNameKind, \t\t\tchar[] baseName, \t\t\tIJavaProject javaProject, \t\t\tint dim, \t\t\tchar[] internalPrefix, \t\t\tchar[][] excluded, \t\t\tboolean evaluateDefault, \t\t\tINamingRequestor requestor)", "diff": ["-\t\t\t\t\t\tSystem.arraycopy(tempName, 0, tempName = new char[length + 2], 0, length);", "-\t\t\t\t\t\ttempName[length-1] = 'I';", "-\t\t\t\t\t\ttempName[length] = 'E';", "-\t\t\t\t\t\ttempName[length+1] = 'S';", "+\t\t\t\t\t\tboolean precededByAVowel = false;", "+\t\t\t\t\t\tif(tempName.length > 1) {", "+\t\t\t\t\t\t\tswitch (tempName[length-2]) {", "+\t\t\t\t\t\t\t\tcase 'A':", "+\t\t\t\t\t\t\t\tcase 'E':", "+\t\t\t\t\t\t\t\tcase 'I':", "+\t\t\t\t\t\t\t\tcase 'O':", "+\t\t\t\t\t\t\t\tcase 'U':", "+\t\t\t\t\t\t\t\t\tprecededByAVowel = true;", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (precededByAVowel) {", "+\t\t\t\t\t\t\tSystem.arraycopy(tempName, 0, tempName = new char[length + 1], 0, length);", "+\t\t\t\t\t\t\ttempName[length] = 'S';", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tSystem.arraycopy(tempName, 0, tempName = new char[length + 2], 0, length);", "+\t\t\t\t\t\t\ttempName[length-1] = 'I';", "+\t\t\t\t\t\t\ttempName[length] = 'E';", "+\t\t\t\t\t\t\ttempName[length+1] = 'S';", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tSystem.arraycopy(tempName, 0, tempName = new char[length + 2], 0, length);", "-\t\t\t\t\t\ttempName[length-1] = 'i';", "-\t\t\t\t\t\ttempName[length] = 'e';", "-\t\t\t\t\t\ttempName[length+1] = 's';", "+\t\t\t\t\t\tboolean precededByAVowel = false;", "+\t\t\t\t\t\tif(tempName.length > 1) {", "+\t\t\t\t\t\t\tswitch (tempName[length-2]) {", "+\t\t\t\t\t\t\t\tcase 'a':", "+\t\t\t\t\t\t\t\tcase 'e':", "+\t\t\t\t\t\t\t\tcase 'i':", "+\t\t\t\t\t\t\t\tcase 'o':", "+\t\t\t\t\t\t\t\tcase 'u':", "+\t\t\t\t\t\t\t\t\tprecededByAVowel = true;", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (precededByAVowel) {", "+\t\t\t\t\t\t\tSystem.arraycopy(tempName, 0, tempName = new char[length + 1], 0, length);", "+\t\t\t\t\t\t\ttempName[length] = 's';", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tSystem.arraycopy(tempName, 0, tempName = new char[length + 2], 0, length);", "+\t\t\t\t\t\t\ttempName[length-1] = 'i';", "+\t\t\t\t\t\t\ttempName[length] = 'e';", "+\t\t\t\t\t\t\ttempName[length+1] = 's';", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf00175eb287905bb454b925a760de04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "9fb010ce7afa327f224b8f5c358d67cd81a71eb3", "commitAfterChange": "06b5c10c4e48c5c78350c25c25116efbbb7c209c", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 74, "signatureBeforeChange": " public static ITypeHierarchy load(IType type, InputStream input) throws JavaModelException", "signatureAfterChange": " public static ITypeHierarchy load(IType type, InputStream input) throws JavaModelException", "diff": ["+\t\tint length;", "-\t\tint length = 0;", "+\t\t// read project", "+\t\tlength = 0;", "+\t\twhile((b = (byte)input.read()) != SEPARATOR1) {", "+\t\t\tif(bytes.length == length) {", "+\t\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length*2], 0, length);;", "+\t\t\t}", "+\t\t\tbytes[length++]=(byte)b;", "+\t\t}", "+\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length], 0, length);", "+\t\tif(length > 0) {", "+\t\t\ttypeHierarchy.project = (IJavaProject)JavaCore.create(new String(bytes));", "+\t\t\ttypeHierarchy.scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {typeHierarchy.project});", "+\t\t} else {", "+\t\t\ttypeHierarchy.project = null;", "+\t\t\ttypeHierarchy.scope = SearchEngine.createWorkspaceScope();", "+\t\t}", "+\t\tlength = 0;", "+\t\tbytes = new byte[10];", "-\t\t// read project", "-//\t\ttypeHierarchy.scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {project});", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4a2fcada4eca68753323255f777eb6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "27b04348f6378e421a1a2788716e3b7fc8643774", "commitAfterChange": "f91a77f7dbbae615b9ce90f64f6be8f6d8a36ad5", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "\r \t\r \tprivate char[][] computeNames(char[] sourceName, boolean forArray)", "signatureAfterChange": "\r \t\r \tprivate char[][] computeNames(char[] sourceName, boolean forArray)", "diff": ["-\t\t\t\t\t\tSystem.arraycopy(name, 0, name = new char[length + 1], 0, length);\r", "-\t\t\t\t\t\tname[length] = 's';\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\t\r", "+\t\t\t\t\t\tif (name[length-1] == 's'){\r", "+\t\t\t\t\t\t\tSystem.arraycopy(name, 0, name = new char[length + 2], 0, length);\r", "+\t\t\t\t\t\t\tname[length] = 'e';\r", "+\t\t\t\t\t\t\tname[length+1] = 's';\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tSystem.arraycopy(name, 0, name = new char[length + 1], 0, length);\r", "+\t\t\t\t\t\t\tname[length] = 's';\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\t\t\t\t\t\r", "-\t\t\tnames[nameCount++] = CharOperation.toLowerCase(sourceName);\r", "+\t\t\tchar[] name = CharOperation.toLowerCase(sourceName);\r", "+\t\t\tif(forArray) {\r", "+\t\t\t\tint length = name.length;\r", "+\t\t\t\tif (name[length-1] == 's'){\r", "+\t\t\t\t\tSystem.arraycopy(name, 0, name = new char[length + 2], 0, length);\r", "+\t\t\t\t\tname[length] = 'e';\r", "+\t\t\t\t\tname[length+1] = 's';\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tSystem.arraycopy(name, 0, name = new char[length + 1], 0, length);\r", "+\t\t\t\t\tname[length] = 's';\r", "+\t\t\t\t}\r", "+\t\t\t}\t\t\t\t\t\r", "+\t\t\tnames[nameCount++] = name;\r", "+\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d561e54163ace141a16e14ebf6fbacf3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "cf8dccca7e26bf94e36e8f031d2a4ef316542d45", "commitAfterChange": "ce73e795e17fb13da77192ae5025c50ccc7665fe", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprivate void disassemble(IClassFileReader classFileReader, char[] className, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": " \tprivate void disassemble(IClassFileReader classFileReader, char[] className, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tint parameterNamesLength = parameterNames.length;", "+\t\t\t\t\tif (length < parameterNamesLength) {", "+\t\t\t\t\t\tSystem.arraycopy(invisibleParameterAnnotations, 0, (invisibleParameterAnnotations = new IParameterAnnotation[parameterNamesLength]), 1, length);", "+\t\t\t\t\t\tlength = parameterNamesLength;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tint parameterNamesLength = parameterNames.length;", "+\t\t\t\t\tif (length < parameterNamesLength) {", "+\t\t\t\t\t\tSystem.arraycopy(visibleParameterAnnotations, 0, (visibleParameterAnnotations = new IParameterAnnotation[parameterNamesLength]), 1, length);", "+\t\t\t\t\t\tlength = parameterNamesLength;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\tif (runtimeVisibleParameterAnnotationsAttribute != null) {", "-\t\t\t\t\tdisassembleAsModifier((IRuntimeVisibleParameterAnnotationsAttribute) runtimeVisibleParameterAnnotationsAttribute, stringBuffer, i, lineSeparator, tabNumber, mode);", "+\t\t\t\tif (visibleParameterAnnotations != null) {", "+\t\t\t\t\tdisassembleAsModifier(visibleParameterAnnotations, stringBuffer, i, lineSeparator, tabNumber, mode);", "-\t\t\t\tif (runtimeInvisibleParameterAnnotationsAttribute != null) {", "+\t\t\t\tif (invisibleParameterAnnotations != null) {", "-\t\t\t\t\tdisassembleAsModifier((IRuntimeInvisibleParameterAnnotationsAttribute) runtimeInvisibleParameterAnnotationsAttribute, stringBuffer, i, lineSeparator, tabNumber, mode);", "+\t\t\t\t\tdisassembleAsModifier(invisibleParameterAnnotations, stringBuffer, i, lineSeparator, tabNumber, mode);"]}], "num": 38455}
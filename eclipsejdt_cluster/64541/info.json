{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "535882bde64c5e5abd63633881c316e1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62f6d7b78d0d9accf35ffc087584e6c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "09c9d84aad79985551ce918cbcc33cdee71ab4e2", "commitAfterChange": "0f631524aef87d3ee7b5140c20a85cb2799ddd71", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public RecoveredElement buildInitialRecoveryState()", "signatureAfterChange": " public RecoveredElement buildInitialRecoveryState()", "diff": ["+\t", "+\tif (this.statementRecoveryActivated) {", "+\t\tif (this.pendingRecoveredType != null &&", "+\t\t\t\tthis.scanner.startPosition - 1 <= this.pendingRecoveredType.declarationSourceEnd) {", "+\t\t\t// Add the pending type to the AST if this type isn't already added in the AST.", "+\t\t\telement = element.add(this.pendingRecoveredType, 0);\t\t\t\t", "+\t\t\tthis.lastCheckPoint = this.pendingRecoveredType.declarationSourceEnd + 1;", "+\t\t\tthis.pendingRecoveredType = null;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88d0ec277fafd5474cf7248a3a143b4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "09c9d84aad79985551ce918cbcc33cdee71ab4e2", "commitAfterChange": "0f631524aef87d3ee7b5140c20a85cb2799ddd71", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " protected void consumeAssignment()", "signatureAfterChange": " protected void consumeAssignment()", "diff": ["+\t\t\t\t", "+\tif (this.pendingRecoveredType != null) {", "+\t\t// Used only in statements recovery.", "+\t\t// This is not a real assignment but a placeholder for an existing anonymous type.", "+\t\t// The assignment must be replace by the anonymous type.", "+\t\tif (this.pendingRecoveredType.allocation != null &&", "+\t\t\t\tthis.scanner.startPosition - 1 <= this.pendingRecoveredType.declarationSourceEnd) {", "+\t\t\tthis.expressionStack[this.expressionPtr] = this.pendingRecoveredType.allocation;", "+\t\t\tthis.pendingRecoveredType = null;", "+\t\t\treturn;", "+\t\t}", "+\t\tthis.pendingRecoveredType = null;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "955327b833d9c37743d45816740557a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "09c9d84aad79985551ce918cbcc33cdee71ab4e2", "commitAfterChange": "0f631524aef87d3ee7b5140c20a85cb2799ddd71", "methodNumberBeforeChange": 263, "methodNumberAfterChange": 263, "signatureBeforeChange": " protected void consumeStatementBreak()", "signatureAfterChange": " protected void consumeStatementBreak()", "diff": ["+\t", "+\tif (this.pendingRecoveredType != null) {", "+\t\t// Used only in statements recovery.", "+\t\t// This is not a real break statement but a placeholder for an existing local type.", "+\t\t// The break statement must be replace by the local type.", "+\t\tif (this.pendingRecoveredType.allocation == null &&", "+\t\t\t\tthis.endPosition <= this.pendingRecoveredType.declarationSourceEnd) {", "+\t\t\tthis.astStack[this.astPtr] = this.pendingRecoveredType;", "+\t\t\tthis.pendingRecoveredType = null;", "+\t\t\treturn;", "+\t\t}", "+\t\tthis.pendingRecoveredType = null;", "+\t}"]}], "num": 64541}
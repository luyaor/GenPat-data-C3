{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79c55ffc13550186324c38e8e049fa68", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b5130424c9b4e378b18722071b8fac4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodDeclarationPattern.java", "commitBeforeChange": "8032392aee6168afb7d9361a5e7c32ded0b6567a", "commitAfterChange": "af7c555b94268663ad75bc44adea174c67a820bf", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public boolean matchesBinary(Object binaryInfo, Object enclosingBinaryInfo)", "signatureAfterChange": " public boolean matchesBinary(Object binaryInfo, Object enclosingBinaryInfo)", "diff": ["-\t", "-\t// selector", "-\tif (!this.matchesName(this.selector, method.getSelector()))", "-\t\treturn false;", "+\tif (!this.matchesName(this.selector, method.getSelector())) return false;", "-\tIBinaryType declaringType = (IBinaryType)enclosingBinaryInfo;", "-\tif (declaringType != null) {", "+\tif (enclosingBinaryInfo != null && (this.declaringSimpleName != null || this.declaringQualification != null)) {", "+\t\tIBinaryType declaringType = (IBinaryType)enclosingBinaryInfo;", "-\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringTypeName)) {", "+\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringTypeName))", "-\t\t}", "-\tString methodDescriptor = new String(method.getMethodDescriptor()).replace('/', '.');", "-", "-\t// look at return type only if declaring type is not specified", "-\tif (this.declaringSimpleName == null) {", "-\t\tString returnTypeSignature = Signature.toString(Signature.getReturnType(methodDescriptor));", "-\t\tif (!this.matchesType(this.returnSimpleName, this.returnQualification, returnTypeSignature.toCharArray())) {", "-\t\t\treturn false;", "-\t\t}", "-\t}", "-\t\t", "-\tif (parameterCount > -1) {", "-\t\tString[] arguments = Signature.getParameterTypes(methodDescriptor);", "-\t\tint argumentCount = arguments.length;", "-\t\tif (parameterCount != argumentCount)", "-\t\t\treturn false;", "-\t\tfor (int i = 0; i < parameterCount; i++) {", "-\t\t\tchar[] qualification = this.parameterQualifications[i];", "-\t\t\tchar[] type = this.parameterSimpleNames[i];", "-\t\t\tif (!this.matchesType(type, qualification, Signature.toString(arguments[i]).toCharArray()))", "+\tif (parameterCount > -1 || this.declaringSimpleName == null) {", "+\t\tString methodDescriptor = new String(method.getMethodDescriptor()).replace('/', '.');", "+", "+\t\tif (parameterCount > -1) {", "+\t\t\tString[] arguments = Signature.getParameterTypes(methodDescriptor);", "+\t\t\tint argumentCount = arguments.length;", "+\t\t\tif (parameterCount != argumentCount) return false;", "+\t\t\tfor (int i = 0; i < parameterCount; i++) {", "+\t\t\t\tchar[] qualification = this.parameterQualifications[i];", "+\t\t\t\tchar[] type = this.parameterSimpleNames[i];", "+\t\t\t\tif (!this.matchesType(type, qualification, Signature.toString(arguments[i]).toCharArray()))", "+\t\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}", "+", "+\t\t// look at return type only if declaring type is not specified", "+\t\tif (this.declaringSimpleName == null) {", "+\t\t\tString returnTypeSignature = Signature.toString(Signature.getReturnType(methodDescriptor));", "+\t\t\tif (!this.matchesType(this.returnSimpleName, this.returnQualification, returnTypeSignature.toCharArray())) {", "+\t\t\t}", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0f712a8b7e9a8da38532f8c144c0547", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 9, "signatureBeforeChange": " public abstract String getPatternName();", "signatureAfterChange": " public boolean matchesBinary(Object binaryInfo, Object enclosingBinaryInfo)", "diff": ["-}", "-public abstract String getPatternName();", "+ */", "+public boolean matchesBinary(Object binaryInfo, Object enclosingBinaryInfo) {", "+\tif (!this.findDeclarations) return false; // only relevant when finding declarations", "+\tif (!(binaryInfo instanceof IBinaryMethod)) return false;", "+", "+\tIBinaryMethod method = (IBinaryMethod) binaryInfo;", "+\tif (!matchesName(this.selector, method.getSelector())) return false;", "+", "+\t// declaring type", "+\tif (enclosingBinaryInfo != null && (this.declaringSimpleName != null || this.declaringQualification != null)) {", "+\t\tIBinaryType declaringType = (IBinaryType) enclosingBinaryInfo;", "+\t\tchar[] declaringTypeName = (char[]) declaringType.getName().clone();", "+\t\tCharOperation.replace(declaringTypeName, '/', '.');", "+\t\tif (!matchesType(this.declaringSimpleName, this.declaringQualification, declaringTypeName))", "+\t\t\treturn false;", "+\t}", "+", "+\t// parameter types", "+\tboolean checkReturnType = this.declaringSimpleName == null && (this.returnSimpleName != null || this.returnQualification != null);", "+\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;", "+\tif (checkReturnType || parameterCount > -1) {", "+\t\tString methodDescriptor = new String(method.getMethodDescriptor()).replace('/', '.');", "+", "+\t\t// look at return type only if declaring type is not specified", "+\t\tif (checkReturnType) {", "+\t\t\tString returnTypeSignature = Signature.toString(Signature.getReturnType(methodDescriptor));", "+\t\t\tif (!matchesType(this.returnSimpleName, this.returnQualification, returnTypeSignature.toCharArray()))", "+\t\t\t\treturn false;", "+\t\t}", "+", "+\t\tif (parameterCount > -1) {", "+\t\t\tString[] arguments = Signature.getParameterTypes(methodDescriptor);", "+\t\t\tif (parameterCount != arguments.length) return false;", "+\t\t\tfor (int i = 0; i < parameterCount; i++)", "+\t\t\t\tif (!matchesType(this.parameterSimpleNames[i], this.parameterQualifications[i], Signature.toString(arguments[i]).toCharArray()))", "+\t\t\t\t\treturn false;", "+\t\t}"]}], "num": 19178}
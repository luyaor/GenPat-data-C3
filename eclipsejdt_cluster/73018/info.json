{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a52d6a1a404f45cdced5f165625cb39", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3beac7b713dfcb91bedb22082e419216", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "4f833be4365ac5abb1ac0cf3973cd75cbb0d7487", "commitAfterChange": "227e3d5fec0001fbc06115e3f3e6f09f357952e2", "methodNumberBeforeChange": 290, "methodNumberAfterChange": 291, "signatureBeforeChange": "  protected void consumeTypeElidedLambdaParameter(boolean parenthesized)", "signatureAfterChange": "  protected void consumeTypeElidedLambdaParameter(boolean parenthesized)", "diff": ["-\t", "-\tthis.identifierLengthPtr--;", "-\tchar[] identifierName = this.identifierStack[this.identifierPtr];", "-\tlong namePositions = this.identifierPositionStack[this.identifierPtr--];", "-\tArgument arg =", "-\t\tnew Argument(", "-\t\t\tidentifierName,", "-\t\t\tnamePositions,", "-\t\t\tnull, // elided type", "-\t\t\tClassFileConstants.AccDefault,", "-\t\t\ttrue);", "-\targ.declarationSourceStart = (int) (namePositions >>> 32);", "+\tArgument arg = typeElidedArgument();", "-\tpushOnAstStack(arg);", "+\t\tLambdaExpression lambda;", "+\t\tpushOnAstStack(lambda = new LambdaExpression(this.compilationUnit.compilationResult, this instanceof AssistParser));", "+\t\tlambda.sourceStart = arg.declarationSourceStart;", "+\tpushOnAstStack(arg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d744e39e92761e7af8e4a4baadc2a76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "2414c381d9fba720a3b5b2375f506f068b4616ba", "commitAfterChange": "888d5cb313019c8c62b5cbd42b139e8dc64793b3", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 63, "signatureBeforeChange": " public void addUnknownRef(NameReference nameRef)", "signatureAfterChange": " public void addUnknownRef(NameReference nameRef)", "diff": ["-\tif (this.unknownRefs.length == this.unknownRefsCounter) {", "-\t\t// resize", "-\t\tSystem.arraycopy(", "-\t\t\tthis.unknownRefs,", "-\t\t\t0,", "-\t\t\t(this.unknownRefs = new NameReference[this.unknownRefsCounter * 2]),", "-\t\t\t0,", "-\t\t\tthis.unknownRefsCounter);", "+\t// Note that:", "+\t// - the only requestor interested in references is the SourceIndexerRequestor", "+\t// - a name reference can become a type reference only during the cast case, it is then tagged later with the Binding.TYPE bit", "+\t// However since the indexer doesn't make the distinction between name reference and type reference, there is no need", "+\t// to report a type reference in the SourceElementParser.", "+\t// This gained 3.7% in the indexing performance test.", "+\tif (nameRef instanceof SingleNameReference) {", "+\t\trequestor.acceptUnknownReference(((SingleNameReference) nameRef).token, nameRef.sourceStart);", "+\t} else {", "+\t\t//QualifiedNameReference", "+\t\trequestor.acceptUnknownReference(((QualifiedNameReference) nameRef).tokens, nameRef.sourceStart, nameRef.sourceEnd);", "-\tthis.unknownRefs[this.unknownRefsCounter++] = nameRef;"]}], "num": 73018}
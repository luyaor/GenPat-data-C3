{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc24956468f4bdd164a2ae6b028bf6f3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7dad9b5ddfff634d6550d26058ff2887", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/RoundDispatcher.java", "commitBeforeChange": "600d3eda20c6510ad5218c514ac30249f7b449a9", "commitAfterChange": "f3c706bfa8df1589d5835736528d83fcc35878b8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate void handleProcessor(ProcessorInfo pi)", "signatureAfterChange": " \tprivate void handleProcessor(ProcessorInfo pi)", "diff": ["-\t\t\t\tif (pi._processor.process(annotationsToProcess, _roundEnv)) {", "+\t\t\t\tboolean claimed = pi._processor.process(annotationsToProcess, _roundEnv);", "+\t\t\t\tif (null != _traceProcessorInfo && !_roundEnv.processingOver()) {", "+\t\t\t\t\tStringBuilder sb = new StringBuilder();", "+\t\t\t\t\tsb.append(\"Processor \"); //$NON-NLS-1$", "+\t\t\t\t\tsb.append(pi._processor.getClass().getName());", "+\t\t\t\t\tsb.append(\" matches [\"); //$NON-NLS-1$", "+\t\t\t\t\tIterator<TypeElement> i = annotationsToProcess.iterator();", "+\t\t\t\t\tboolean hasNext = i.hasNext();", "+\t\t\t\t\twhile (hasNext) {", "+\t\t\t\t\t\tsb.append(i.next());", "+\t\t\t\t\t\thasNext = i.hasNext();", "+\t\t\t\t\t\tif (hasNext) {", "+\t\t\t\t\t\t\tsb.append(' ');", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tsb.append(\"] and returns \"); //$NON-NLS-1$", "+\t\t\t\t\tsb.append(claimed);", "+\t\t\t\t\t_traceProcessorInfo.println(sb.toString());", "+\t\t\t\t}", "+\t\t\t\tif (claimed) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd672a9765b4e7190768722ff4085015", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/batch/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java", "commitBeforeChange": "98f970f58fc61208a8cdd52e3b9981ef32c5937b", "commitAfterChange": "29a8044fc706583901ff89364d428dff04f6a567", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t@Override \tpublic void printMessage(Kind kind, CharSequence msg, Element e, \t\t\tAnnotationMirror a, AnnotationValue v)", "signatureAfterChange": " \t@Override \tpublic void printMessage(Kind kind, CharSequence msg, Element e, \t\t\tAnnotationMirror a, AnnotationValue v)", "diff": ["-\t\tSystem.err.println(\"APT says: \" + kind + \" \" + msg + \" on element \" + e + ", "-\t\t\t\t\" at annotation \" + a + \" on value \" + v);", "+\t\tStringBuilder sb = new StringBuilder();", "+\t\tfinal String space = \" \"; //$NON-NLS-1$", "+\t\tsb.append(\"APT says:\"); //$NON-NLS-1$", "+\t\tif (kind != null) {", "+\t\t\tsb.append(space);", "+\t\t\tsb.append(kind);", "+\t\t}", "+\t\tif (msg != null) {", "+\t\t\tsb.append(space);", "+\t\t\tsb.append(msg);", "+\t\t}", "+\t\tif (e != null) {", "+\t\t\tsb.append(\" on element \"); //$NON-NLS-1$", "+\t\t\tsb.append(e);", "+\t\t}", "+\t\tif (a != null) {", "+\t\t\tsb.append(\" at annotation \"); //$NON-NLS-1$", "+\t\t\tsb.append(a);", "+\t\t}", "+\t\tif (v != null) {", "+\t\t\tsb.append(\" on value \"); //$NON-NLS-1$", "+\t\t\tsb.append(v);", "+\t\t}", "+\t\tSystem.err.println(sb.toString());"]}], "num": 58040}
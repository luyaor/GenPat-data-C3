{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0872bf6ea46dca61fcd9ad2fb1ed0cf2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f1e448834ae4dde608db9d525fb5683", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "009f20126c1d3488d55fd03939439082cc2b8500", "commitAfterChange": "221d108d3944a4b3be482e01878be27efb774a39", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["-", "+\tfinal boolean reportUnavoidableGenericTypeProblems = this.scope.compilerOptions().reportUnavoidableGenericTypeProblems;", "-\t\t\tTypeBinding parameterType = arg.type.resolveType(methodDecl.scope, true /* check bounds*/);", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=322817", "+\t\t\tboolean deferRawTypeCheck = !reportUnavoidableGenericTypeProblems && (arg.type.bits & ASTNode.IgnoreRawTypeCheck) == 0;", "+\t\t\tTypeBinding parameterType;", "+\t\t\tif (deferRawTypeCheck) {", "+\t\t\t\targ.type.bits |= ASTNode.IgnoreRawTypeCheck;", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tparameterType = arg.type.resolveType(methodDecl.scope, true /* check bounds*/);", "+\t\t\t} finally {", "+\t\t\t\tif (deferRawTypeCheck) { ", "+\t\t\t\t\targ.type.bits &= ~ASTNode.IgnoreRawTypeCheck;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t", "-\t\t\tTypeBinding methodType = returnType.resolveType(methodDecl.scope, true /* check bounds*/);", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=322817", "+\t\t\tboolean deferRawTypeCheck = !reportUnavoidableGenericTypeProblems && (returnType.bits & ASTNode.IgnoreRawTypeCheck) == 0;", "+\t\t\tTypeBinding methodType;", "+\t\t\tif (deferRawTypeCheck) {", "+\t\t\t\treturnType.bits |= ASTNode.IgnoreRawTypeCheck;", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tmethodType = returnType.resolveType(methodDecl.scope, true /* check bounds*/);", "+\t\t\t} finally {", "+\t\t\t\tif (deferRawTypeCheck) { ", "+\t\t\t\t\treturnType.bits &= ~ASTNode.IgnoreRawTypeCheck;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b571316d564bae48249b0e9206ba15ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "390e166678e0fa49ec55a0c44a3dd31625f6e21a", "commitAfterChange": "9ea60639cd404b75c69d97f9c48097cabdf417fc", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tsynchronized IBinding resolveName(Name name)", "signatureAfterChange": " \tsynchronized IBinding resolveName(Name name)", "diff": ["-\t\t\t\ttry {", "-\t\t\t\t\tbinding = this.scope.getImport(CharOperation.subarray(importReference.tokens, 0, indexInImportReference), true, importReference.isStatic());", "-\t\t\t\t} catch (RuntimeException e) {", "-\t\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=53357", "+\t\t\t\tif (importReferenceLength == indexInImportReference) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tbinding = this.scope.getImport(CharOperation.subarray(importReference.tokens, 0, indexInImportReference), importReference.onDemand, importReference.isStatic());", "+\t\t\t\t\t} catch (RuntimeException e) {", "+\t\t\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=53357", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tbinding = this.scope.getImport(CharOperation.subarray(importReference.tokens, 0, indexInImportReference), true, importReference.isStatic());", "+\t\t\t\t\t} catch (RuntimeException e) {", "+\t\t\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=53357", "+\t\t\t\t\t}", "+\t\t\t\t\t} else if (binding instanceof org.eclipse.jdt.internal.compiler.lookup.FieldBinding) {", "+\t\t\t\t\t\t// it is a type", "+\t\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.FieldBinding)binding);\t\t\t\t\t\t", "+\t\t\t\t\t} else if (binding instanceof org.eclipse.jdt.internal.compiler.lookup.MethodBinding) {", "+\t\t\t\t\t\t// it is a type", "+\t\t\t\t\t\treturn this.getMethodBinding((org.eclipse.jdt.internal.compiler.lookup.MethodBinding)binding);\t\t\t\t\t\t"]}], "num": 28623}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ba82b057a10b6a74bbd4f7acd37b2b7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "514cd13aa3321d30e4d4ff80e2fe8c7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "commitAfterChange": "cbaf155d59bae1aee7ec473c177014431f794c16", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void complainIfUnusedExceptionHandlers( \t\tBlockScope scope, \t\tTryStatement tryStatement)", "signatureAfterChange": "  public void complainIfUnusedExceptionHandlers(BlockScope scope,TryStatement tryStatement)", "diff": ["-\t", "-\tpublic void complainIfUnusedExceptionHandlers(", "-\t\tBlockScope scope,", "-\t\tTryStatement tryStatement) {", "-\t\t// report errors for unreachable exception handlers", "-\t\tfor (int i = 0, count = handledExceptions.length; i < count; i++) {", "-\t\t\tint index = indexes.get(handledExceptions[i]);", "-\t\t\tint cacheIndex = index / BitCacheSize;", "-\t\t\tint bitMask = 1 << (index % BitCacheSize);", "-\t\t\tif ((isReached[cacheIndex] & bitMask) == 0) {", "-\t\t\t\tscope.problemReporter().unreachableCatchBlock(", "-\t\t\t\t\thandledExceptions[index],", "+", "+public void complainIfUnusedExceptionHandlers(BlockScope scope,TryStatement tryStatement) {", "+\t// report errors for unreachable exception handlers", "+\tfor (int i = 0, count = this.handledExceptions.length; i < count; i++) {", "+\t\tint index = this.indexes.get(this.handledExceptions[i]);", "+\t\tint cacheIndex = index / ExceptionHandlingFlowContext.BitCacheSize;", "+\t\tint bitMask = 1 << (index % ExceptionHandlingFlowContext.BitCacheSize);", "+\t\tif ((this.isReached[cacheIndex] & bitMask) == 0) {", "+\t\t\tscope.problemReporter().unreachableCatchBlock(", "+\t\t\t\tthis.handledExceptions[index],", "+\t\t\t\ttryStatement.catchArguments[index].type);", "+\t\t} else {", "+\t\t\tif ((this.isNeeded[cacheIndex] & bitMask) == 0) {", "+\t\t\t\tscope.problemReporter().hiddenCatchBlock(", "+\t\t\t\t\tthis.handledExceptions[index],", "-\t\t\t} else {", "-\t\t\t\tif ((isNeeded[cacheIndex] & bitMask) == 0) {", "-\t\t\t\t\tscope.problemReporter().hiddenCatchBlock(", "-\t\t\t\t\t\thandledExceptions[index],", "-\t\t\t\t\t\ttryStatement.catchArguments[index].type);", "-\t\t\t\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1db6df6cc3b6a39fe8dc8384fcbe3ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "commitAfterChange": "cbaf155d59bae1aee7ec473c177014431f794c16", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic void recordHandlingException( \t\tReferenceBinding exceptionType, \t\tUnconditionalFlowInfo flowInfo, \t\tTypeBinding raisedException, \t\tASTNode invocationSite, \t\tboolean wasAlreadyDefinitelyCaught)", "signatureAfterChange": " \t public void recordHandlingException( \t\tReferenceBinding exceptionType, \t\tUnconditionalFlowInfo flowInfo, \t\tTypeBinding raisedException, \t\tASTNode invocationSite, \t\tboolean wasAlreadyDefinitelyCaught)", "diff": ["-\tpublic void recordHandlingException(", "+\t", "+public void recordHandlingException(", "-\t\t\t", "-\t\tint index = indexes.get(exceptionType);", "-\t\t// if already flagged as being reached (unchecked exception handler)", "-\t\tint cacheIndex = index / BitCacheSize;", "-\t\tint bitMask = 1 << (index % BitCacheSize);", "-\t\tif (!wasAlreadyDefinitelyCaught) {", "-\t\t\tthis.isNeeded[cacheIndex] |= bitMask;", "-\t\t}", "-\t\tthis.isReached[cacheIndex] |= bitMask;", "-\t\tinitsOnExceptions[index] =", "-\t\t\t(initsOnExceptions[index].tagBits & FlowInfo.UNREACHABLE) == 0 ?", "-\t\t\t\tinitsOnExceptions[index].mergedWith(flowInfo):", "-\t\t\t\tflowInfo.unconditionalCopy();", "+\tint index = this.indexes.get(exceptionType);", "+\t// if already flagged as being reached (unchecked exception handler)", "+\tint cacheIndex = index / ExceptionHandlingFlowContext.BitCacheSize;", "+\tint bitMask = 1 << (index % ExceptionHandlingFlowContext.BitCacheSize);", "+\tif (!wasAlreadyDefinitelyCaught) {", "+\t\tthis.isNeeded[cacheIndex] |= bitMask;", "+\tthis.isReached[cacheIndex] |= bitMask;", "+\tthis.initsOnExceptions[index] =", "+\t\t(this.initsOnExceptions[index].tagBits & FlowInfo.UNREACHABLE) == 0 ?", "+\t\t\tthis.initsOnExceptions[index].mergedWith(flowInfo):", "+\t\t\tflowInfo.unconditionalCopy();", "+}"]}], "num": 9072}
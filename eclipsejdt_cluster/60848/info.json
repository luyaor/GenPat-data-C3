{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f9d9fb63877b75c354f71d70e82cd64e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdecd75bfe4a3aed5e4dca7954d47d91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "6d986f90e46cead3f7ad9cda57050210e9706675", "commitAfterChange": "267a4d5e2c999ddd91f8f8fabb0312930f048c1a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t\tif (getNextChar('\\\\'))", "+\t\t\t\t\tif (getNextChar('\\\\')) {", "+\t\t\t\t\t\tif (this.unicodeAsBackSlash) {", "+\t\t\t\t\t\t\t// consume next character", "+\t\t\t\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\') && (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\t\t\tunicodeStore();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.currentCharacter = this.source[this.currentPosition++];", "+\t\t\t\t\t\t}", "-\t\t\t\t\telse { // consume next character", "+\t\t\t\t\t} else { // consume next character", "-\t\t\t\t\t\t\t\tint escapeSize = this.currentPosition;", "-\t\t\t\t\t\t\t\tboolean backSlashAsUnicodeInString = this.unicodeAsBackSlash;", "-\t\t\t\t\t\t\t\t//scanEscapeCharacter make a side effect on this value and we need the previous value few lines down this one", "-\t\t\t\t\t\t\t\tscanEscapeCharacter();", "-\t\t\t\t\t\t\t\tescapeSize = this.currentPosition - escapeSize;", "-\t\t\t\t\t\t\t\tif (this.withoutUnicodePtr == 0) {", "-\t\t\t\t\t\t\t\t\t//buffer all the entries that have been left aside....", "-\t\t\t\t\t\t\t\t    unicodeInitializeBuffer(this.currentPosition - escapeSize - 1 - this.startPosition);", "-\t\t\t\t\t\t\t\t    unicodeStore();", "-\t\t\t\t\t\t\t\t} else { //overwrite the / in the buffer", "-\t\t\t\t\t\t\t\t\tthis.withoutUnicodePtr--; // unicode store will increment", "-\t\t\t\t\t\t\t\t    unicodeStore();", "-\t\t\t\t\t\t\t\t\tif (backSlashAsUnicodeInString) { //there are TWO \\ in the stream where only one is correct", "+\t\t\t\t\t\t\t\tif (this.unicodeAsBackSlash) {", "+\t\t\t\t\t\t\t\t\tthis.withoutUnicodePtr--;", "+\t\t\t\t\t\t\t\t\t// consume next character", "+\t\t\t\t\t\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\') && (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tif (this.withoutUnicodePtr == 0) {", "+\t\t\t\t\t\t\t\t\t\tunicodeInitializeBuffer(this.currentPosition - this.startPosition);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tthis.withoutUnicodePtr --;", "+\t\t\t\t\t\t\t\t\tthis.currentCharacter = this.source[this.currentPosition++];", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t// we need to compute the escape character in a separate buffer", "+\t\t\t\t\t\t\t\tscanEscapeCharacter();", "+\t\t\t\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\t\t\tunicodeStore();", "+\t\t\t\t\t\t\t\tint previous;", "-\t", "+", "+\t\t\t\t\t\t\t\tprevious = this.currentPosition;", "+\t\t\t\t\t\t\t\tint firstTag = 0;", "-\t\t\t\t\t\t\t\t\tstar = this.currentCharacter == '*';", "+\t\t\t\t\t\t\t\t\tswitch (this.currentCharacter) {", "+\t\t\t\t\t\t\t\t\t\tcase '*':", "+\t\t\t\t\t\t\t\t\t\t\tstar = true;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase '@':", "+\t\t\t\t\t\t\t\t\t\t\tif (firstTag == 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\tfirstTag = previous;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t// fall through default case to set star to false", "+\t\t\t\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\t\t\t\tstar = false;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tprevious = this.currentPosition;", "+\t\t\t\t\t\t\t\tthis.commentTagStarts[this.commentPtr] = firstTag;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6c85aae05833812465b0392415455fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "6d986f90e46cead3f7ad9cda57050210e9706675", "commitAfterChange": "267a4d5e2c999ddd91f8f8fabb0312930f048c1a", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public final void jumpOverMethodBody()", "signatureAfterChange": " public final void jumpOverMethodBody()", "diff": ["+\t\t\t\t\t\t\t\tif (this.unicodeAsBackSlash) {", "+\t\t\t\t\t\t\t\t\t// consume next character", "+\t\t\t\t\t\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\') && (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\t\t\t\t\tunicodeStore();", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tthis.currentCharacter = this.source[this.currentPosition++];", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (this.unicodeAsBackSlash) {", "+\t\t\t\t\t\t\t\t\t\t// consume next character", "+\t\t\t\t\t\t\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\') && (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\tunicodeStore();", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tthis.currentCharacter = this.source[this.currentPosition++];", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tint previous;", "+\t\t\t\t\t\t\t\tprevious = this.currentPosition;", "+\t\t\t\t\t\t\t\tint firstTag = 0;", "-\t\t\t\t\t\t\t\t\tstar = this.currentCharacter == '*';", "+\t\t\t\t\t\t\t\t\tswitch (this.currentCharacter) {", "+\t\t\t\t\t\t\t\t\t\tcase '*':", "+\t\t\t\t\t\t\t\t\t\t\tstar = true;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase '@':", "+\t\t\t\t\t\t\t\t\t\t\tif (firstTag == 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\tfirstTag = previous;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t// fall through default case to set star to false", "+\t\t\t\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\t\t\t\tstar = false;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tprevious = this.currentPosition;", "+\t\t\t\t\t\t\t\tthis.commentTagStarts[this.commentPtr] = firstTag;"]}], "num": 60848}
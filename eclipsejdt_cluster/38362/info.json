{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a7b80efe7f0db266a8cbce7a9375fd5b", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "077c845165f5eca9fb9a4c1c584cd5cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "6100c16f42a61b4785fb3431eabdff7008e0822d", "commitAfterChange": "ae1f54f274fcbc3fe4d90b39f8d538bfd84fcc06", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " boolean areReturnTypesEqual(MethodBinding one, MethodBinding substituteTwo)", "signatureAfterChange": " boolean areReturnTypesEqual(MethodBinding one, MethodBinding substituteTwo)", "diff": ["-\tif (one.returnType == substituteTwo.returnType) return true;", "-", "-\t// short is compatible with int, but as far as covariance is concerned, its not", "-\tif (one.returnType.isBaseType()) return false;", "-", "-\tif (!one.declaringClass.isInterface()) {", "-\t\tif (one.declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\t\treturn substituteTwo.returnType.isCompatibleWith(one.returnType); // interface methods inherit from Object", "-\t\treturn one.returnType.isCompatibleWith(substituteTwo.returnType);", "-\t}", "-", "-\t// check for methods from Object, every interface inherits from Object", "-\tif (substituteTwo.declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\treturn one.returnType.isCompatibleWith(substituteTwo.returnType);", "-", "-\t// both are interfaces, see if they're related", "-\tif (one.declaringClass.implementsInterface(substituteTwo.declaringClass, true))", "-\t\treturn one.returnType.isCompatibleWith(substituteTwo.returnType);", "-\tif (substituteTwo.declaringClass.implementsInterface(one.declaringClass, true))", "-\t\treturn substituteTwo.returnType.isCompatibleWith(one.returnType);", "-", "-\t// unrelated interfaces... one must be a subtype of the other", "-\treturn one.returnType.isCompatibleWith(substituteTwo.returnType)", "-\t\t|| substituteTwo.returnType.isCompatibleWith(one.returnType);", "+\treturn areReturnTypesCompatible(one, substituteTwo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4e9eed80c3b1d7bcf608496ed309a47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " boolean areReturnTypesCompatible0(MethodBinding one, MethodBinding two)", "signatureAfterChange": " boolean areReturnTypesCompatible0(MethodBinding one, MethodBinding two)", "diff": ["-\tif (!one.declaringClass.isInterface()) {", "-\t\tif (one.declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\t\treturn two.returnType.isCompatibleWith(one.returnType); // interface methods inherit from Object", "-\t\treturn one.returnType.isCompatibleWith(two.returnType);", "-\t}", "+\tif (!one.declaringClass.isInterface() && one.declaringClass.id == TypeIds.T_JavaLangObject)", "+\t\treturn two.returnType.isCompatibleWith(one.returnType); // interface methods inherit from Object", "-\t// check for methods from Object, every interface inherits from Object", "-\tif (two.declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\treturn one.returnType.isCompatibleWith(two.returnType);", "-", "-\t// both are interfaces, see if they're related", "-\tif (one.declaringClass.implementsInterface(two.declaringClass, true))", "-\t\treturn one.returnType.isCompatibleWith(two.returnType);", "-\tif (two.declaringClass.implementsInterface(one.declaringClass, true))", "-\t\treturn two.returnType.isCompatibleWith(one.returnType);", "-", "-\t// unrelated interfaces... one must be a subtype of the other", "-\treturn one.returnType.isCompatibleWith(two.returnType)", "-\t\t|| two.returnType.isCompatibleWith(one.returnType);", "+\treturn one.returnType.isCompatibleWith(two.returnType);"]}], "num": 38362}
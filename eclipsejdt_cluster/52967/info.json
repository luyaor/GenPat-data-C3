{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e17e8e2cfccb307b997734e1df14bcb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e782ca997008b9c5b5eb6489152a057", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JSR308SpecSnippetTests.java", "commitBeforeChange": "7089fcfd703b096f125599a900905c00e15535fa", "commitAfterChange": "ef77db37669242a4bac152127ea8ae67d10be39c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void test011() throws Exception", "signatureAfterChange": " \t \tpublic void test011() throws Exception", "diff": ["-\tpublic void test011() throws Exception { // WILL FAIL WHEN https://bugs.eclipse.org/bugs/show_bug.cgi?id=415397 IS FIXED.", "+\t", "+\tpublic void test011() throws Exception {", "-\t\t\t\t\"import java.util.List;\\n\" +", "+\t\t\t\t\"import java.util.*;\\n\" +", "+\t\t\t\t\"import java.io.*;\\n\" +", "-\t\t\t\t\"@interface Immutable {}\\n\" +", "+\t\t\t\t\"@interface Immutable { int value() default 0; }\\n\" +", "-\t\t\t\t\"\tList<@Immutable ? extends Comparable<X>> x;\\n\" +", "+\t\t\t\t\"\tList<@Immutable ? extends Comparable<X>> a;\\n\" +", "+\t\t\t\t\"\tList<? extends @Immutable Comparable<X>> b;\\n\" +", "+\t\t\t\t\"\tList<@Immutable(1) ? extends @Immutable(2) Comparable<X>> c;\\n\" +", "+\t\t\t\t\"\tMap<@Immutable(1) ? extends Comparable<X>,@Immutable(2) ? extends @Immutable(3) Serializable> d;\\n\" +", "+\t\t// javac b100", "+\t\t// Field a:", "+\t\t//   RuntimeInvisibleTypeAnnotations:", "+\t\t//    0: #9(): FIELD, location=[TYPE_ARGUMENT(0)]", "+\t\t// Field b:", "+\t\t//   RuntimeInvisibleTypeAnnotations:", "+\t\t//    0: #9(): FIELD, location=[TYPE_ARGUMENT(0), WILDCARD]", "+\t\t// Field c:", "+\t\t//   RuntimeInvisibleTypeAnnotations:", "+\t\t//    0: #9(#12=I#13): FIELD, location=[TYPE_ARGUMENT(0)]", "+\t\t//    1: #9(#12=I#14): FIELD, location=[TYPE_ARGUMENT(0), WILDCARD]", "+\t\t// Field d:", "+\t\t//   RuntimeInvisibleTypeAnnotations:", "+\t\t//    0: #9(#12=I#13): FIELD, location=[TYPE_ARGUMENT(0)]", "+\t\t//    1: #9(#12=I#14): FIELD, location=[TYPE_ARGUMENT(1)]", "+\t\t//    2: #9(#12=I#18): FIELD, location=[TYPE_ARGUMENT(1), WILDCARD]", "+\t\t\t\t\"// Compiled from X.java (version 1.8 : 52.0, super bit)\\n\" + ", "-\t\t\t\t\"    constant #5 utf8: \\\"x\\\"\\n\" + ", "+\t\t\t\t\"    constant #5 utf8: \\\"a\\\"\\n\" + ", "-\t\t\t\t\"    constant #9 utf8: \\\"<init>\\\"\\n\" + ", "-\t\t\t\t\"    constant #10 utf8: \\\"()V\\\"\\n\" + ", "-\t\t\t\t\"    constant #11 utf8: \\\"Code\\\"\\n\" + ", "-\t\t\t\t\"    constant #12 method_ref: #3.#13 java/lang/Object.<init> ()V\\n\" + ", "-\t\t\t\t\"    constant #13 name_and_type: #9.#10 <init> ()V\\n\" + ", "-\t\t\t\t\"    constant #14 utf8: \\\"LineNumberTable\\\"\\n\" + ", "-\t\t\t\t\"    constant #15 utf8: \\\"LocalVariableTable\\\"\\n\" + ", "-\t\t\t\t\"    constant #16 utf8: \\\"this\\\"\\n\" + ", "-\t\t\t\t\"    constant #17 utf8: \\\"LX;\\\"\\n\" + ", "-\t\t\t\t\"    constant #18 utf8: \\\"SourceFile\\\"\\n\" + ", "-\t\t\t\t\"    constant #19 utf8: \\\"X.java\\\"\\n\" + ", "+\t\t\t\t\"    constant #9 utf8: \\\"RuntimeInvisibleTypeAnnotations\\\"\\n\" + ", "+\t\t\t\t\"    constant #10 utf8: \\\"LImmutable;\\\"\\n\" + ", "+\t\t\t\t\"    constant #11 utf8: \\\"b\\\"\\n\" + ", "+\t\t\t\t\"    constant #12 utf8: \\\"c\\\"\\n\" + ", "+\t\t\t\t\"    constant #13 utf8: \\\"value\\\"\\n\" + ", "+\t\t\t\t\"    constant #14 integer: 1\\n\" + ", "+\t\t\t\t\"    constant #15 integer: 2\\n\" + ", "+\t\t\t\t\"    constant #16 utf8: \\\"d\\\"\\n\" + ", "+\t\t\t\t\"    constant #17 utf8: \\\"Ljava/util/Map;\\\"\\n\" + ", "+\t\t\t\t\"    constant #18 utf8: \\\"Ljava/util/Map<+Ljava/lang/Comparable<LX;>;+Ljava/io/Serializable;>;\\\"\\n\" + ", "+\t\t\t\t\"    constant #19 integer: 3\\n\" + ", "+\t\t\t\t\"    constant #20 utf8: \\\"<init>\\\"\\n\" + ", "+\t\t\t\t\"    constant #21 utf8: \\\"()V\\\"\\n\" + ", "+\t\t\t\t\"    constant #22 utf8: \\\"Code\\\"\\n\" + ", "+\t\t\t\t\"    constant #23 method_ref: #3.#24 java/lang/Object.<init> ()V\\n\" + ", "+\t\t\t\t\"    constant #24 name_and_type: #20.#21 <init> ()V\\n\" + ", "+\t\t\t\t\"    constant #25 utf8: \\\"LineNumberTable\\\"\\n\" + ", "+\t\t\t\t\"    constant #26 utf8: \\\"LocalVariableTable\\\"\\n\" + ", "+\t\t\t\t\"    constant #27 utf8: \\\"this\\\"\\n\" + ", "+\t\t\t\t\"    constant #28 utf8: \\\"LX;\\\"\\n\" + ", "+\t\t\t\t\"    constant #29 utf8: \\\"SourceFile\\\"\\n\" + ", "+\t\t\t\t\"    constant #30 utf8: \\\"X.java\\\"\\n\" + ", "-\t\t\t\t\"  java.util.List x;\\n\" + ", "+\t\t\t\t\"  java.util.List a;\\n\" + ", "+\t\t\t\t\"    RuntimeInvisibleTypeAnnotations: \\n\" + ", "+\t\t\t\t\"      #10 @Immutable(\\n\" + ", "+\t\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\t\"        location = [TYPE_ARGUMENT(0)]\\n\" + ", "+\t\t\t\t\"      )\\n\" + ", "-\t\t\t\t\"  // Method descriptor #10 ()V\\n\" + ", "+\t\t\t\t\"  // Field descriptor #6 Ljava/util/List;\\n\" + ", "+\t\t\t\t\"  // Signature: Ljava/util/List<+Ljava/lang/Comparable<LX;>;>;\\n\" + ", "+\t\t\t\t\"  java.util.List b;\\n\" + ", "+\t\t\t\t\"    RuntimeInvisibleTypeAnnotations: \\n\" + ", "+\t\t\t\t\"      #10 @Immutable(\\n\" + ", "+\t\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\t\"        location = [TYPE_ARGUMENT(0), WILDCARD]\\n\" + ", "+\t\t\t\t\"      )\\n\" + ", "+\t\t\t\t\"  \\n\" + ", "+\t\t\t\t\"  // Field descriptor #6 Ljava/util/List;\\n\" + ", "+\t\t\t\t\"  // Signature: Ljava/util/List<+Ljava/lang/Comparable<LX;>;>;\\n\" + ", "+\t\t\t\t\"  java.util.List c;\\n\" + ", "+\t\t\t\t\"    RuntimeInvisibleTypeAnnotations: \\n\" + ", "+\t\t\t\t\"      #10 @Immutable(\\n\" + ", "+\t\t\t\t\"        #13 value=(int) 1 (constant type)\\n\" + ", "+\t\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\t\"        location = [TYPE_ARGUMENT(0)]\\n\" + ", "+\t\t\t\t\"      )\\n\" + ", "+\t\t\t\t\"      #10 @Immutable(\\n\" + ", "+\t\t\t\t\"        #13 value=(int) 2 (constant type)\\n\" + ", "+\t\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\t\"        location = [TYPE_ARGUMENT(0), WILDCARD]\\n\" + ", "+\t\t\t\t\"      )\\n\" + ", "+\t\t\t\t\"  \\n\" + ", "+\t\t\t\t\"  // Field descriptor #17 Ljava/util/Map;\\n\" + ", "+\t\t\t\t\"  // Signature: Ljava/util/Map<+Ljava/lang/Comparable<LX;>;+Ljava/io/Serializable;>;\\n\" + ", "+\t\t\t\t\"  java.util.Map d;\\n\" + ", "+\t\t\t\t\"    RuntimeInvisibleTypeAnnotations: \\n\" + ", "+\t\t\t\t\"      #10 @Immutable(\\n\" + ", "+\t\t\t\t\"        #13 value=(int) 1 (constant type)\\n\" + ", "+\t\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\t\"        location = [TYPE_ARGUMENT(0)]\\n\" + ", "+\t\t\t\t\"      )\\n\" + ", "+\t\t\t\t\"      #10 @Immutable(\\n\" + ", "+\t\t\t\t\"        #13 value=(int) 2 (constant type)\\n\" + ", "+\t\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\t\"        location = [TYPE_ARGUMENT(1)]\\n\" + ", "+\t\t\t\t\"      )\\n\" + ", "+\t\t\t\t\"      #10 @Immutable(\\n\" + ", "+\t\t\t\t\"        #13 value=(int) 3 (constant type)\\n\" + ", "+\t\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\t\"        location = [TYPE_ARGUMENT(1), WILDCARD]\\n\" + ", "+\t\t\t\t\"      )\\n\" + ", "+\t\t\t\t\"  \\n\" + ", "+\t\t\t\t\"  // Method descriptor #21 ()V\\n\" + ", "-\t\t\t\t\"    1  invokespecial java.lang.Object() [12]\\n\" + ", "+\t\t\t\t\"    1  invokespecial java.lang.Object() [23]\\n\" + ", "-\t\t\t\t\"        [pc: 0, line: 6]\\n\" + ", "+\t\t\t\t\"        [pc: 0, line: 7]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6cab37249627b992f3838ed6690e355", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "17c3ff29c758ba3af32e32b7cf74f8bc1004af3b", "commitAfterChange": "3406cbdf1170bd7765ceb54091ffb987caaf1f67", "methodNumberBeforeChange": 1048, "methodNumberAfterChange": 1048, "signatureBeforeChange": " public void test1036()", "signatureAfterChange": " public void test1036()", "diff": ["-\t\t\"7. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"7. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tMap<Zork,Zork>.Entry<List<Zork>,List<Zork>>\tentry;\\n\" + ", "+\t\t\"\t                     ^^^^\\n\" + ", "+\t\t\"List cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"8. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tMap<Zork,Zork>.Entry<List<Zork>,List<Zork>>\tentry;\\n\" + ", "+\t\t\"\t                          ^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"9. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tMap<Zork,Zork>.Entry<List<Zork>,List<Zork>>\tentry;\\n\" + ", "+\t\t\"\t                                ^^^^\\n\" + ", "+\t\t\"List cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"10. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tMap<Zork,Zork>.Entry<List<Zork>,List<Zork>>\tentry;\\n\" + ", "+\t\t\"\t                                     ^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"11. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\"8. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"12. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tjaavaa.util.Map<Zork,Zork>.Entry<List<Zork>,List<Zork>>\tentry2;\\n\" + ", "+\t\t\"\t                ^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"13. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tjaavaa.util.Map<Zork,Zork>.Entry<List<Zork>,List<Zork>>\tentry2;\\n\" + ", "+\t\t\"\t                     ^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"14. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tjaavaa.util.Map<Zork,Zork>.Entry<List<Zork>,List<Zork>>\tentry2;\\n\" + ", "+\t\t\"\t                                 ^^^^\\n\" + ", "+\t\t\"List cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"15. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tjaavaa.util.Map<Zork,Zork>.Entry<List<Zork>,List<Zork>>\tentry2;\\n\" + ", "+\t\t\"\t                                      ^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"16. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tjaavaa.util.Map<Zork,Zork>.Entry<List<Zork>,List<Zork>>\tentry2;\\n\" + ", "+\t\t\"\t                                            ^^^^\\n\" + ", "+\t\t\"List cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"17. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tjaavaa.util.Map<Zork,Zork>.Entry<List<Zork>,List<Zork>>\tentry2;\\n\" + ", "+\t\t\"\t                                                 ^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"18. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\"9. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\"19. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\"10. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\"20. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\"11. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\"21. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\"12. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\"22. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\"13. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"23. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\"14. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"24. ERROR in X.java (at line 11)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3054870b8c9acf79be20e804ffbf209", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 231, "methodNumberAfterChange": 231, "signatureBeforeChange": " \tpublic void test227()", "signatureAfterChange": " \tpublic void test227()", "diff": ["-\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tList list() { return null; }\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 7)\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tvoid m3() { Collection c = null; List l = (List<X>)c; } // unsafe cast\\n\" + ", "+\t\t\t\"\t            ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tvoid m3() { Collection c = null; List l = (List<X>)c; } // unsafe cast\\n\" + ", "+\t\t\t\"\t                                 ^^^^\\n\" + ", "+\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"6. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tvoid m4() { Collection c = null; List l = (List<?>)c; } // ok\\n\" + ", "+\t\t\t\"\t            ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tvoid m4() { Collection c = null; List l = (List<?>)c; } // ok\\n\" + ", "+\t\t\t\"\t                                 ^^^^\\n\" + ", "+\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"11. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tvoid m5() { List c = null; List l = (Collection<X>)c; } // type mismatch\\n\" + ", "+\t\t\t\"\t            ^^^^\\n\" + ", "+\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"12. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tvoid m5() { List c = null; List l = (Collection<X>)c; } // type mismatch\\n\" + ", "+\t\t\t\"\t                           ^^^^\\n\" + ", "+\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"13. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"7. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"14. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\t\"8. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"15. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tvoid m6() { List c = null; List l = (Collection<?>)c; } // type mismatch\\n\" + ", "+\t\t\t\"\t            ^^^^\\n\" + ", "+\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"16. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tvoid m6() { List c = null; List l = (Collection<?>)c; } // type mismatch\\n\" + ", "+\t\t\t\"\t                           ^^^^\\n\" + ", "+\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"17. WARNING in X.java (at line 11)\\n\" + ", "-\t\t\t\"9. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"18. ERROR in X.java (at line 11)\\n\" + "]}], "num": 52967}
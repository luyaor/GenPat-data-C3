{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bbfe2d7222911285c7e96ae105d1143f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8131f7ecf0c063cbca460e1e0adb9fca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "cdc74d3ea8b9c1ba927b31b4a06700c40fc47e90", "commitAfterChange": "a280ef02cf77778b4b6e5e943f20717b92bc3418", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t} else if ((expressionType != TypeBinding.NULL && expressionType.isBaseType()) // disallow autoboxing", "-\t\t\t|| !checkCastTypesCompatibility(scope, checkedType, expressionType, null)) {", "-\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, checkedType);", "+\t} else if (checkedType.isValidBinding()) {", "+\t\t// if not a valid binding, an error has already been reported for unresolved type", "+\t\tif ((expressionType != TypeBinding.NULL && expressionType.isBaseType()) // disallow autoboxing", "+\t\t\t\t|| !checkCastTypesCompatibility(scope, checkedType, expressionType, null)) {", "+\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, checkedType);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b74a0d44240805e66a3d635bd3b3ea3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "2364afdbec314daa8d0b5edfe834ccbfea646954", "commitAfterChange": "5ccdb7e247bbbd1f8f7142380f221525938bf5a9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t} else if ((expressionType != TypeBinding.NULL && expressionType.isBaseType()) // disallow autoboxing", "-\t\t\t|| !checkCastTypesCompatibility(scope, checkedType, expressionType, null)) {", "-\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, checkedType);", "+\t} else if (checkedType.isValidBinding()) {", "+\t\t// if not a valid binding, an error has already been reported for unresolved type", "+\t\tif ((expressionType != TypeBinding.NULL && expressionType.isBaseType()) // disallow autoboxing", "+\t\t\t\t|| !checkCastTypesCompatibility(scope, checkedType, expressionType, null)) {", "+\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, checkedType);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea8aa22022bbe4891e43c36cea789d92", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "11204112fa5839fef68c4b511b3aece9ba6627e4", "commitAfterChange": "cefc7f3f8677282aa49e610700500999ffcaffcb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tif (expressionType != null && checkedType != null && NullAnnotationMatching.analyse(checkedType, expressionType, -1).isAnyMismatch()) {", "-\t\tscope.problemReporter().nullAnnotationUnsupportedLocation(this.type);", "+\tif (expressionType != null && checkedType != null && checkedType.hasNullTypeAnnotations()) {", "+\t\t// don't complain if the entire operation is redundant anyway", "+\t\tif (!expressionType.isCompatibleWith(checkedType) || NullAnnotationMatching.analyse(checkedType, expressionType, -1).isAnyMismatch())", "+\t\t\tscope.problemReporter().nullAnnotationUnsupportedLocation(this.type);"]}], "num": 42004}
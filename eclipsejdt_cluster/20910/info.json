{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a3ec2b44862ef684c58f47b75d7e624", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01d401a4e79c6f136204d02765f2e8a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "4087231d30a4b358686cbbdca168b3172502840a", "commitAfterChange": "067ce26834c5540d672d2cb2c57759092eacbb7c", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "\r public boolean hasStructuralChanges(byte[] newBytes)", "signatureAfterChange": "\r public boolean hasStructuralChanges(byte[] newBytes)", "diff": ["-\t\t\tint matchCounter = 0;\r", "-\t\t\t\tfor (int j = 0; j < newInterfacesLength; j++) {\r", "-\t\t\t\t\tif (CharOperation.equals(this.interfaceNames[i], newInterfacesNames[j])) {\r", "-\t\t\t\t\t\tmatchCounter++;\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t}\r", "+\t\t\t\tif (!CharOperation.equals(this.interfaceNames[i], newInterfacesNames[i])) {\r", "+\t\t\t\t\treturn true;\r", "-\t\t\t}\r", "-\t\t\tif (matchCounter != this.interfacesCount) {\r", "-\t\t\t\treturn true;\r", "-\t\tif (otherFieldInfos != null) {\r", "-\t\t\tArrays.sort(this.fields);\r", "-\t\t\tArrays.sort(otherFieldInfos);\r", "+\t\tif (otherFieldInfosLength != 0) {\r", "+//\t\t\tArrays.sort(this.fields);\r", "+//\t\t\tArrays.sort(otherFieldInfos);\r", "+\t\t\t\t\tif (!otherFieldInfo.hasConstant()) {\r", "+\t\t\t\t\t\treturn true;\r", "+\t\t\t\t\t}\r", "-\t\tif (otherMethodInfos != null) {\r", "-\t\t\tArrays.sort(this.methods);\r", "-\t\t\tArrays.sort(otherMethodInfos);\r", "+\t\tif (otherMethodInfosLength != 0) {\r", "+//\t\t\tArrays.sort(this.methods);\r", "+//\t\t\tArrays.sort(otherMethodInfos);\r", "-\t\t\t\t\tint matchCounter = 0;\r", "-\t\t\t\t\t\tfor (int j = 0; j < otherThrownExceptionsLength; j++) {\r", "-\t\t\t\t\t\t\tif (CharOperation.equals(currentThrownExceptions[k], otherThrownExceptions[j])) {\r", "-\t\t\t\t\t\t\t\tmatchCounter++;\r", "-\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tif (!CharOperation.equals(currentThrownExceptions[k], otherThrownExceptions[k])) {\r", "+\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (matchCounter != currentThrownExceptionsLength) {\r", "-\t\t\t\t\t\treturn true;\r", "+\t\t// Member types\r", "+\t\tInnerClassInfo[] currentMemberTypes = (InnerClassInfo[]) this.getMemberTypes();\r", "+\t\tInnerClassInfo[] otherMemberTypes = (InnerClassInfo[]) newClassFile.getMemberTypes();\r", "+\t\tint currentMemberTypeLength = currentMemberTypes == null ? 0 : currentMemberTypes.length;\r", "+\t\tint otherMemberTypeLength = otherMemberTypes == null ? 0 : otherMemberTypes.length;\r", "+\t\tif (currentMemberTypeLength != otherMemberTypeLength) {\r", "+\t\t\treturn true;\r", "+\t\t}\r", "+\t\tif (currentMemberTypeLength != 0) {\r", "+\t\t\tfor (int i = 0; i < currentMemberTypeLength; i++) {\r", "+\t\t\t\tif (!CharOperation.equals(currentMemberTypes[i].getName(), otherMemberTypes[i].getName())\r", "+\t\t\t\t\t|| currentMemberTypes[i].getModifiers() != otherMemberTypes[i].getModifiers()) {\r", "+\t\t\t\t\t\treturn true;\r", "+\t\t\t\t}\r", "+\t\t\t}\t\t\t\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a409c3d24f80b89b0ad266af0b411251", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ImportRewrite.java", "commitBeforeChange": "ee7d00c6fce3f5ac075ad1ae838556503fe6ca33", "commitAfterChange": "42a20f90363fe2e676c07d56364d6cc6b90a9458", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 49, "signatureBeforeChange": "  \tprivate Type createType(ITypeBinding binding, ITypeBinding bindingPoint, AST ast, ImportRewriteContext context)", "signatureAfterChange": "  \tprivate Type createBaseType(AST ast, ImportRewriteContext context, ITypeBinding normalizedBinding)", "diff": ["-\tprivate Type createType(ITypeBinding binding, ITypeBinding bindingPoint, AST ast, ImportRewriteContext context) {", "-\t\tString str = addImport(bindingPoint, context);", "-\t\tint dotIndex = str != null ? str.lastIndexOf('.') : -1;", "-\t\tType qualifier = null;", "-\t\tif (dotIndex != -1) {", "-\t\t\tchar buf [] = new char [dotIndex];", "-\t\t\tfor (int i = 0; i < dotIndex; ++i)", "-\t\t\t\tbuf[i] = str.charAt(i);", "-\t\t\tstr = new String(buf);", "-\t\t\tqualifier = ast.newSimpleType(ast.newName(str));", "-\t\t}", "-\t\treturn createType(binding, bindingPoint, ast, qualifier, context);", "-\t}", "+\tprivate Type createBaseType(AST ast, ImportRewriteContext context, ITypeBinding normalizedBinding) {", "+\t\tType type;", "+\t\tIAnnotationBinding annotationBinding [] = normalizedBinding.getTypeAnnotations();", "+\t\tboolean annotsPresent = annotationBinding != null && annotationBinding.length > 0;", "+\t\tString qualifiedName= getRawQualifiedName(normalizedBinding);", "+\t\tString res = qualifiedName.length() > 0 ? internalAddImport(qualifiedName, context) : getRawName(normalizedBinding);", "+\t", "+\t\tif (annotsPresent) {", "+\t\t\tint dotIndex = res != null ? res.lastIndexOf('.') : -1;", "+\t\t\tif (dotIndex > 0) {", "+\t\t\t\tName nameQualifier = ast.newName(res.substring(0, dotIndex));", "+\t\t\t\tSimpleName simpleName = ast.newSimpleName(res.substring(dotIndex + 1));", "+\t\t\t\ttype = ast.newNameQualifiedType(nameQualifier, simpleName);", "+\t\t\t} else {", "+\t\t\t\ttype = ast.newSimpleType(ast.newName(res));", "+\t\t\t}", "+\t\t\tannotateList(((AnnotatableType) type).annotations(), annotationBinding, ast, context);", "+\t\t\ttype = ast.newSimpleType(ast.newName(res));"]}], "num": 20910}
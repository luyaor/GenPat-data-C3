{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "139180a6655eb3b2295b2ddb5399e815", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c708df919b9c1ed04588dbac980444e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "67da1da15e9afbcd33679f07597c706e7915cf4a", "commitAfterChange": "027fccb2c17e0f0d2b28705c6704af10fc8ce0aa", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 43, "signatureBeforeChange": " private boolean containsCompletionNode(AstNode ast)", "signatureAfterChange": " protected void consumeUnaryExpression(int op, boolean post)", "diff": ["- */", "-private boolean containsCompletionNode(AstNode ast) {", "-\tif (this.assistNode == null || ast instanceof Literal) {", "-\t\treturn false;", "-\t}", "-\tif (this.assistNode == ast) {", "-\t\treturn true;", "-\t}", "-\tif (ast instanceof Reference || ast instanceof TypeReference) {", "-\t\treturn ast == this.assistNode;", "-\t}", "-\tif (ast instanceof Assignment) {", "-\t\tAssignment assign = (Assignment)ast;", "-\t\treturn containsCompletionNode(assign.lhs) || containsCompletionNode(assign.expression);", "-\t}", "-\tif (ast instanceof UnaryExpression) {", "-\t\tUnaryExpression unary = (UnaryExpression)ast;", "-\t\treturn containsCompletionNode(unary.expression);", "-\t}", "-\tif (ast instanceof BinaryExpression) {", "-\t\tBinaryExpression binary = (BinaryExpression)ast;", "-\t\treturn containsCompletionNode(binary.left) || containsCompletionNode(binary.right);", "-\t}", "-\tif (ast instanceof InstanceOfExpression) {", "-\t\tInstanceOfExpression instanceOfExpr = (InstanceOfExpression)ast;", "-\t\treturn containsCompletionNode(instanceOfExpr.expression) || containsCompletionNode(instanceOfExpr.type);", "-\t}", "-\tif (ast instanceof ConditionalExpression) {", "-\t\tConditionalExpression conditional = (ConditionalExpression)ast;", "-\t\treturn containsCompletionNode(conditional.condition) || containsCompletionNode(conditional.valueIfTrue) || containsCompletionNode(conditional.valueIfFalse);", "-\t}", "-\tif (ast instanceof AllocationExpression) {", "-\t\tAllocationExpression alloc = (AllocationExpression)ast;", "-\t\treturn containsCompletionNode(alloc.type);", "-\t}", "-\tif (ast instanceof CastExpression) {", "-\t\tCastExpression cast = (CastExpression)ast;", "-\t\treturn containsCompletionNode(cast.expression) || containsCompletionNode(cast.type);", "-\t}", "-\tif (ast instanceof ExplicitConstructorCall) {", "-\t\tExplicitConstructorCall call = (ExplicitConstructorCall)ast;", "-\t\tExpression[] arguments = call.arguments;", "-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0; i < arguments.length; i++) {", "-\t\t\t\tif (containsCompletionNode(arguments[i])) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn false;", "-\t\t}", "-\t}", "-\treturn false;", "+protected void consumeUnaryExpression(int op, boolean post) {", "+\tsuper.consumeUnaryExpression(op, post);", "+\tpopElement(K_OPERATOR);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92ca596de2ad7a0f6d2cd4cd9dcdae6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "d6f7167f4afb524879e19470b64afa63044861f9", "commitAfterChange": "4e186bd542905b91d524cb97547ff04b594b342a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void completionIdentifierCheck()", "signatureAfterChange": " public void completionIdentifierCheck()", "diff": ["-\ttry {", "-\t\t// no need to go further if we found a non empty completion node", "-\t\t// (we still need to store labels though)", "-\t\tif (this.assistNode != null) {", "-\t\t\t// however inside an invocation, the completion identifier may already have been consumed into an empty name ", "-\t\t\t// completion, so this check should be before we check that we are at the cursor location", "-\t\t\tif (!isEmptyNameCompletion() || checkInvocation()) return;", "-\t\t}", "-", "-\t\t// no need to check further if we are not at the cursor location", "-\t\tif (this.indexOfAssistIdentifier() < 0) return;", "-", "-\t\tif (checkClassInstanceCreation()) return;", "-\t\tif (checkCatchClause()) return;", "-\t\tif (checkMemberAccess()) return;", "-\t\tif (checkClassLiteralAccess()) return;", "-\t\tif (checkInstanceofKeyword()) return;", "-\t\t", "-\t\t// if the completion was not on an empty name, it can still be inside an invocation (eg. this.fred(\"abc\"[cursor])", "-\t\t// (NB: Put this check before checkNameCompletion() because the selector of the invocation can be on the identifier stack)", "-\t\tif (checkInvocation()) return;", "-", "-\t\tif (checkNameCompletion()) return;", "-\t} finally {", "+\t// no need to go further if we found a non empty completion node", "+\t// (we still need to store labels though)", "+\tif (this.assistNode != null) {", "+\t\t// however inside an invocation, the completion identifier may already have been consumed into an empty name ", "+\t\t// completion, so this check should be before we check that we are at the cursor location", "+\t\tif (!isEmptyNameCompletion() || checkInvocation()) return;", "+", "+\t// no need to check further if we are not at the cursor location", "+\tif (this.indexOfAssistIdentifier() < 0) return;", "+", "+\tif (checkClassInstanceCreation()) return;", "+\tif (checkCatchClause()) return;", "+\tif (checkMemberAccess()) return;", "+\tif (checkClassLiteralAccess()) return;", "+\tif (checkInstanceofKeyword()) return;", "+\t", "+\t// if the completion was not on an empty name, it can still be inside an invocation (eg. this.fred(\"abc\"[cursor])", "+\t// (NB: Put this check before checkNameCompletion() because the selector of the invocation can be on the identifier stack)", "+\tif (checkInvocation()) return;", "+", "+\tif (checkNameCompletion()) return;"]}], "num": 37960}
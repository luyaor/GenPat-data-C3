{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09e98575d5fb2a4db6c5cc45b5a4a3fa", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "355d0054a9e0dd8e6fff4f956638c546", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "4e300efc6879ebefc1e17424cda019b7c5ca9ad1", "commitAfterChange": "d836cbee8ecc949f19e7decf6adae6126ae2b267", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public void add(IJavaElement element) throws JavaModelException", "signatureAfterChange": "\r public void add(IJavaElement element) throws JavaModelException", "diff": ["-\t\tIJavaProject project = (IJavaProject)element;\r", "-\t\tthis.add(project, true, new Hashtable(2));\r", "+\t\tthis.add((IJavaProject)element, true, new Hashtable(2));\r", "-\t\tif (root.isArchive()) {\r", "-\t\t\tthis.add(root.getPath(), false);\r", "-\t\t} else {\r", "-\t\t\tIJavaElement[] children = root.getChildren();\r", "-\t\t\tfor (int i = 0, length = children.length; i < length; i++) {\r", "-\t\t\t\tthis.add(children[i].getUnderlyingResource(), false);\r", "-\t\t\t}\r", "-\t\t}\r", "+\t\tthis.add(root.getPath(), true);\r", "-\t\t\tthis.add(root.getPath(), false);\r", "+\t\t\tthis.add(root.getPath().append(new Path(element.getElementName().replace('.', '/'))), false);\r", "-\t\t\tthis.add(element.getUnderlyingResource(), false);\r", "+\t\t\tIResource resource = element.getUnderlyingResource();\r", "+\t\t\tif (resource != null && resource.isAccessible()) {\r", "+\t\t\t\tthis.add(resource.getFullPath(), false);\r", "+\t\t\t}\r", "-\t\tthis.add(element.getUnderlyingResource());\r", "-\t\t\r", "+\t\tIResource resource = element.getUnderlyingResource();\r", "+\t\tif (resource != null && resource.isAccessible()) {\r", "+\t\t\tthis.add(resource.getFullPath(), true);\r", "+\t\t}\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d14642e6e7b2242727b334d08598e688", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "b17f0033873962e79cd540a0937b76249dec8a6c", "commitAfterChange": "360e136a8e044225071869fa38d7072ea1d3cdac", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": " private void rememberWithMemberTypes(TypeDeclaration typeDeclaration, HierarchyType enclosingType, ICompilationUnit unit)", "signatureAfterChange": " private void remember(IType type, ReferenceBinding typeBinding)", "diff": ["-}", "-private void rememberWithMemberTypes(TypeDeclaration typeDeclaration, HierarchyType enclosingType, ICompilationUnit unit) {", "-", "-\tif (typeDeclaration.binding == null) return;", "-", "-\t// simple super class name", "-\tchar[] superclassName = null;", "-\tTypeReference superclass = typeDeclaration.superclass;", "-\tif (superclass != null) {", "-\t\tchar[][] typeName = superclass.getTypeName();", "-\t\tsuperclassName = typeName == null ? null : typeName[typeName.length-1];", "-\t}", "-\t", "-\t// simple super interface names", "-\tchar[][] superInterfaceNames = null;", "-\tTypeReference[] superInterfaces = typeDeclaration.superInterfaces;", "-\tif (superInterfaces != null) {", "-\t\tint length = superInterfaces.length;", "-\t\tsuperInterfaceNames = new char[length][];", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tTypeReference superInterface = superInterfaces[i];", "-\t\t\tchar[][] typeName = superInterface.getTypeName();", "-\t\t\tsuperInterfaceNames[i] = typeName[typeName.length-1];", "+private void remember(IType type, ReferenceBinding typeBinding) {", "+\tif (((CompilationUnit)type.getCompilationUnit()).isOpen()) {", "+\t\ttry {", "+\t\t\tIGenericType genericType = (IGenericType)((JavaElement)type).getElementInfo();", "+\t\t\tremember(genericType, typeBinding);", "+\t\t} catch (JavaModelException e) {", "+\t\t\t// cannot happen since element is open", "+\t\t\treturn;", "+\t} else {", "+\t\tif (typeBinding == null) return;", "+\t\t", "+\t\tTypeDeclaration typeDeclaration = ((SourceTypeBinding)typeBinding).scope.referenceType();", "+\t", "+\t\t// simple super class name", "+\t\tchar[] superclassName = null;", "+\t\tTypeReference superclass = typeDeclaration.superclass;", "+\t\tif (superclass != null) {", "+\t\t\tchar[][] typeName = superclass.getTypeName();", "+\t\t\tsuperclassName = typeName == null ? null : typeName[typeName.length-1];", "+\t\t}", "+\t\t", "+\t\t// simple super interface names", "+\t\tchar[][] superInterfaceNames = null;", "+\t\tTypeReference[] superInterfaces = typeDeclaration.superInterfaces;", "+\t\tif (superInterfaces != null) {", "+\t\t\tint length = superInterfaces.length;", "+\t\t\tsuperInterfaceNames = new char[length][];", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tTypeReference superInterface = superInterfaces[i];", "+\t\t\t\tchar[][] typeName = superInterface.getTypeName();", "+\t\t\t\tsuperInterfaceNames[i] = typeName[typeName.length-1];", "+\t\t\t}", "+\t\t}", "+\t", "+\t\tHierarchyType hierarchyType = new HierarchyType(", "+\t\t\ttype, ", "+\t\t\t!typeDeclaration.isInterface(),", "+\t\t\ttypeDeclaration.name,", "+\t\t\ttypeDeclaration.binding.modifiers,", "+\t\t\tsuperclassName,", "+\t\t\tsuperInterfaceNames);", "+\t\tremember(hierarchyType, typeDeclaration.binding);", "-\tHierarchyType hierarchyType = new HierarchyType(", "-\t\tenclosingType, ", "-\t\t!typeDeclaration.isInterface(),", "-\t\ttypeDeclaration.name,", "-\t\ttypeDeclaration.binding.modifiers,", "-\t\tsuperclassName,", "-\t\tsuperInterfaceNames,", "-\t\tunit);", "-\tremember(hierarchyType, typeDeclaration.binding);", "-", "-\t// propagate into member types", "-\tif (typeDeclaration.memberTypes == null) return;", "-\tMemberTypeDeclaration[] memberTypes = typeDeclaration.memberTypes;", "-\tfor (int i = 0, max = memberTypes.length; i < max; i++){", "-\t\trememberWithMemberTypes(memberTypes[i], hierarchyType, unit);", "-\t}"]}], "num": 47880}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f361465c9940eb329a0fb09ea43283b0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ee2518538ae5359da22a2f181945e21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "c24dd4a6433aff50a05b02ec21c21c751e37f0b2", "commitAfterChange": "7a427b535373cc1f9194a5ea21753da0d79460d2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \t \tpublic void resolve(BlockScope scope)", "diff": ["+\t\t\t\t// fault-tolerance", "+\t\t\t\tif (this.qualification != null) {", "+\t\t\t\t\tthis.qualification.resolveType(scope);", "+\t\t\t\t}", "+\t\t\t\tif (this.typeArguments != null) {", "+\t\t\t\t\tfor (int i = 0, max = this.typeArguments.length; i < max; i++) {", "+\t\t\t\t\t\tthis.typeArguments[i].resolveType(scope, true /* check bounds*/);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (this.arguments != null) {", "+\t\t\t\t\tfor (int i = 0, max = this.arguments.length; i < max; i++) {", "+\t\t\t\t\t\tthis.arguments[i].resolveType(scope);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec293e446ee73c4b3bce2cf2c106160c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayInitializer.java", "commitBeforeChange": "c941a64be2d9c708421a59ecb1ed6ad7ef276757", "commitAfterChange": "ce382d177319340f48603e8b03d1c9f19b8aacae", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType)", "diff": ["-\t\t}", "+\t\t\t// fault-tolerance - resolve other expressions as well", "+\t\t\tfor (int i = 1, length = this.expressions.length; i < length; i++) {", "+\t\t\t\texpression = this.expressions[i];", "+\t\t\t\tif (expression != null) {", "+\t\t\t\t\texpression.resolveType(scope)\t;", "+\t\t\t\t}", "+\t\t\t}\t\t}", "-\t\t}", "-\t\t// fault-tolerance - resolve other expressions as well", "-\t\tfor (int i = 1, length = this.expressions.length; i < length; i++) {", "-\t\t\tExpression expression = this.expressions[i];", "-\t\t\tif (expression != null) {", "-\t\t\t\texpression.resolveType(scope)\t;", "-\t\t\t}"]}], "num": 10833}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "012039a319d8dff06c3e0fccfee5bc32", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8657494d53dd5450e6858b00e8e16b64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java", "commitBeforeChange": "b268992d45d00cd5439bb032a6e5a5226c715e7e", "commitAfterChange": "d0459bbe3de583182ccfa94cd18ee163b3577c2f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tpublic void resolve()", "signatureAfterChange": "  \tpublic void resolve()", "diff": ["-\t\t\t// resolve annotations if any", "-\t\t\tif (this.currentPackage!= null && this.currentPackage.annotations != null) {", "+\t\t\t// resolve annotations if any, skip this step if we don't have a valid scope due to an earlier error. (bug 252555)", "+\t\t\tif (this.currentPackage!= null && this.currentPackage.annotations != null && syntheticTypeDeclaration.staticInitializerScope != null) {", "-\t\t\t * resolve javadoc package if any", "-\t\t\t * we do it now and the javadoc in the fake type won't be resolved", "+\t\t\t * resolve javadoc package if any, skip this step if we don't have a valid scope due to an earlier error (bug 252555)", "+\t\t\t * we do it now as the javadoc in the fake type won't be resolved. The peculiar usage of MethodScope to resolve the", "+\t\t\t * package level javadoc is because the CU level resolve method\tis a NOP to mimic Javadoc's behavior and can't be used", "+\t\t\t * as such.", "-\t\t\tif (this.javadoc != null) {", "+\t\t\tif (this.javadoc != null && syntheticTypeDeclaration.staticInitializerScope != null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee668e7d09aad0f0242ecc5fa86eb52c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java", "commitBeforeChange": "a348185fc1394ba62b163286d4e293f1fc3fd0c0", "commitAfterChange": "65ed763b9d706d338d2d71213ef4b79f1a7dfcf5", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic void traverse( \t\tASTVisitor visitor, \t\tCompilationUnitScope unitScope)", "signatureAfterChange": "  \tpublic void traverse( \t\tASTVisitor visitor, \t\tCompilationUnitScope unitScope)", "diff": ["+\t\t\t\tboolean isPackageInfo = isPackageInfo();", "+\t\t\t\tif (this.types != null && isPackageInfo) {", "+\t\t            // resolve synthetic type declaration", "+\t\t\t\t\tfinal TypeDeclaration syntheticTypeDeclaration = types[0];", "+\t\t\t\t\t// resolve javadoc package if any", "+\t\t\t\t\tfinal MethodScope classScope = syntheticTypeDeclaration.staticInitializerScope;", "+\t\t\t\t\tif (this.javadoc != null) {", "+\t\t\t\t\t\tthis.javadoc.traverse(visitor, classScope);", "+\t\t\t\t\t}", "+\t\t\t\t\tfinal Annotation[] annotations = this.currentPackage.annotations;", "+\t\t\t\t\tif (annotations != null) {", "+\t\t\t\t\t\tint annotationsLength = annotations.length;", "+\t\t\t\t\t\tfor (int i = 0; i < annotationsLength; i++) {", "+\t\t\t\t\t\t\tannotations[i].traverse(visitor, classScope);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 46193}
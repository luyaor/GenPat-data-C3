{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79060338cce84d86e09ea235cdab256f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "069286c6ed781267ebfeb032e9b4a352", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "56deec95b605b537ffff269849519a3683e4c597", "commitAfterChange": "6322417321b9f92594d494c76f96624badb58aae", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \tpublic Compiler(\r \t\tINameEnvironment environment,\r \t\tIErrorHandlingPolicy policy,\r \t\tMap settings,\r \t\tICompilerRequestor requestor,\r \t\tIProblemFactory problemFactory)", "signatureAfterChange": "\r \tpublic Compiler(\r \t\tINameEnvironment environment,\r \t\tIErrorHandlingPolicy policy,\r \t\tMap settings,\r \t\tfinal ICompilerRequestor requestor,\r \t\tIProblemFactory problemFactory)", "diff": ["-\t\tICompilerRequestor requestor,\r", "+\t\tfinal ICompilerRequestor requestor,\r", "-\t\tthis.requestor = requestor;\r", "+\t\t\r", "+\t\t// wrap requestor in DebugRequestor if one is specified\r", "+\t\tif(DebugRequestor == null) {\r", "+\t\t\tthis.requestor = requestor;\r", "+\t\t} else {\r", "+\t\t\tthis.requestor = new ICompilerRequestor(){\r", "+\t\t\t\tpublic void acceptResult(CompilationResult result){\r", "+\t\t\t\t\tif (DebugRequestor.isActive()){\r", "+\t\t\t\t\t\tDebugRequestor.acceptDebugResult(result);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\trequestor.acceptResult(result);\r", "+\t\t\t\t}\r", "+\t\t\t};\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f0033d266d5e8a7c3ec960ef2b845e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "ca6b9d0c30532dfcf3c83a4cab5bd96f7d5deacc", "commitAfterChange": "9506194ecd38aa227915d4452e8097fba7bd6231", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \t \tprivate boolean setUpperBounds(CaptureBinding18 typeVariable, TypeBinding[] substitutedUpperBounds)", "signatureAfterChange": " \t \tprivate boolean setUpperBounds(CaptureBinding18 typeVariable, TypeBinding[] substitutedUpperBounds)", "diff": ["-\t\t\tArrays.sort(glbs, new Comparator() {", "-\t\t\t\tpublic int compare(Object o1, Object o2) {", "-\t\t\t\t\tint i1 = ((TypeBinding)o1).id, i2 = ((TypeBinding)o2).id; ", "-\t\t\t\t\treturn (i1>i2 ? -1 : (i1==i2 ? 0 : 1));", "-\t\t\t\t}", "-\t\t\t});", "+\t\t\tsortTypes(glbs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2149ce669d42e4d8ba3dc35c1ccd82cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "commitAfterChange": "dd2d999bb92f1e106218a30e477eebe8f58b2e19", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \t \tprivate boolean setUpperBounds(CaptureBinding18 typeVariable, TypeBinding[] substitutedUpperBounds)", "signatureAfterChange": " \t \tprivate boolean setUpperBounds(CaptureBinding18 typeVariable, TypeBinding[] substitutedUpperBounds)", "diff": ["+\t\t\t// for deterministic results sort this array by id:", "+\t\t\tArrays.sort(glbs, new Comparator() {", "+\t\t\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\t\t\tint i1 = ((TypeBinding)o1).id, i2 = ((TypeBinding)o2).id; ", "+\t\t\t\t\treturn (i1>i2 ? -1 : (i1==i2 ? 0 : 1));", "+\t\t\t\t}", "+\t\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a7cd7c730c4acc04b77e135b7a8ec48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceImplTests.java", "commitBeforeChange": "a892813e8b7a5d041e5d0d3d868b173ea1f47ce5", "commitAfterChange": "b077f1ec27f6f9c95317db4e5e225319a96f87d5", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 77, "signatureBeforeChange": "  private static void reinitializeFromComputedValues(String source, String target)", "signatureAfterChange": "  private static void reinitializeFromComputedValues(String source, String target)", "diff": ["-\tNullReferenceImplTests.State[] transitiveClosure = computeTransitiveClosure();", "+\tNullReferenceImplTests.State[] transitiveClosure = computeTransitiveClosure(); // need for initialization?", "+\ttransitiveClosure = addSymbolicStates(transitiveClosure); // don't rely on reachibility alone, since we don't cover all operations in these tests.", "+\tArrays.sort(transitiveClosure, new Comparator() {", "+\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\treturn new Integer(((State)o1).value).compareTo(new Integer(((State)o2).value));", "+\t\t}", "+\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bb224abb667b251c7731bcec9d5d22d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/EvaluationContext.java", "commitBeforeChange": "523f72b860e1c5f7334e13e5c75a18826c7ae1a0", "commitAfterChange": "d5627341503c684b35efd505dd3662e10e508037", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void evaluateVariables(INameEnvironment environment, Map options, IRequestor requestor, IProblemFactory problemFactory) throws InstallException", "signatureAfterChange": " public void evaluateVariables(INameEnvironment environment, Map options, IRequestor requestor, IProblemFactory problemFactory) throws InstallException", "diff": ["+\t\t\t// Sort classes so that enclosing types are cached before nested types", "+\t\t\t// otherwise an AbortCompilation is thrown in 1.5 mode since the enclosing type", "+\t\t\t// is needed to resolve a nested type", "+\t\t\tUtil.sort(classes, new Util.Comparer() {", "+\t\t\t\tpublic int compare(Object a, Object b) {", "+\t\t\t\t\tif (a == b) return 0;", "+\t\t\t\t\tClassFile enclosing = ((ClassFile) a).enclosingClassFile;", "+\t\t\t\t\twhile (enclosing != null) {", "+\t\t\t\t\t\tif (enclosing == b)", "+\t\t\t\t\t\t\treturn 1;", "+\t\t\t\t\t\tenclosing = enclosing.enclosingClassFile;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn -1;", "+\t\t\t\t}", "+\t\t\t});", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88b923a4982e2313d5dca44a6f4e4dc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "d301ae6c8664bf4508fc0872f1c0859eec725cae", "commitAfterChange": "1516301359d43aec61a19794e49b793ac0d752cf", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 89, "signatureBeforeChange": " \tprivate void runTest( \t\t\tboolean shouldFlushOutputDirectory, \t\t\tString[] testFiles, \t\t\tString[] classLibraries, \t\t\tMap customOptions, \t\t\tboolean performStatementsRecovery, \t\t\tICompilerRequestor customRequestor, \t\t\tboolean expectingCompilerErrors, \t\t\tString expectedCompilerLog, \t\t\tboolean forceExecution, \t\t\tString[] vmArguments, \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tJavacTestOptions javacTestOptions)", "signatureAfterChange": " \tprivate void runTest( \t\t\tboolean shouldFlushOutputDirectory, \t\t\tString[] testFiles, \t\t\tString[] classLibraries, \t\t\tMap customOptions, \t\t\tboolean performStatementsRecovery, \t\t\tICompilerRequestor customRequestor, \t\t\tboolean expectingCompilerErrors, \t\t\tString expectedCompilerLog, \t\t\tboolean forceExecution, \t\t\tString[] vmArguments, \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tfinal ASTVisitor visitor, \t\t\tJavacTestOptions javacTestOptions)", "diff": ["+\t\t\tfinal ASTVisitor visitor,", "-\t\t\t\tgetProblemFactory());", "+\t\t\t\tgetProblemFactory()) {", "+\t\t\t\tpublic void process(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, int i) {", "+\t\t\t\t\tsuper.process(unit, i);", "+\t\t\t\t\tif (visitor != null) {", "+\t\t\t\t\t\tunit.traverse(visitor, unit.scope);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2a18c83d07e8ef305d9f1f8ee22a027", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "2d5bf798c418b8695f77d20c6c74012fdb9b40b0", "commitAfterChange": "e3d875263ee12404bb21dc7fcef95c903c7f1b24", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic Problem[] getProblemsFor(IPath path, String additionalMarkerType)", "signatureAfterChange": " \tpublic Problem[] getProblemsFor(IPath path, String additionalMarkerType)", "diff": ["+\t\t\tArrays.sort(result, new Comparator() {", "+\t\t\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\t\t\treturn o1.toString().compareTo(o2.toString());", "+\t\t\t\t}", "+\t\t\t});"]}], "num": 31107}
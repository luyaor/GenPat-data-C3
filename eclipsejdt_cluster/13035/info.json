{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be0570d1cdef05fdb6cb9ad42766a143", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1da32b9a5b66d5bd4d85723e99962588", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java", "commitBeforeChange": "5c425f0313d8071b22df908d5cdd417ee9951a22", "commitAfterChange": "3c1fddff6d397917a4f2c0ea6ea46a4e7420b00d", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \t@Override \tTypeBinding substituteInferenceVariable(InferenceVariable var, TypeBinding substituteType)", "signatureAfterChange": "  \t@Override \tTypeBinding substituteInferenceVariable(InferenceVariable var, TypeBinding substituteType)", "diff": ["-\t\tTypeBinding substitutedWildcard = this.wildcard.substituteInferenceVariable(var, substituteType);", "-\t\tif (substitutedWildcard != this.wildcard) {  //$IDENTITY-COMPARISON$", "-\t\t\tCaptureBinding substitute = (CaptureBinding) clone(enclosingType());", "-\t\t    substitute.wildcard = (WildcardBinding) substitutedWildcard;", "-\t\t    if (this.lowerBound != null)", "-\t\t    \tsubstitute.lowerBound = this.lowerBound.substituteInferenceVariable(var, substituteType);", "-\t\t    if (this.firstBound != null)", "-\t\t    \tsubstitute.firstBound = this.firstBound.substituteInferenceVariable(var, substituteType);", "-\t\t    if (this.superclass != null)", "-\t\t    \tsubstitute.superclass = (ReferenceBinding) this.superclass.substituteInferenceVariable(var, substituteType);", "-\t\t    if (this.superInterfaces != null) {", "-\t\t    \tint length = this.superInterfaces.length;", "-\t\t    \tsubstitute.superInterfaces = new ReferenceBinding[length];", "-\t\t    \tfor (int i = 0; i < length; i++)", "-\t\t    \t\tsubstitute.superInterfaces[i] = (ReferenceBinding) this.superInterfaces[i].substituteInferenceVariable(var, substituteType);", "-\t\t    }", "-\t\t    return substitute;", "+\t\tif (this.pendingSubstitute != null)", "+\t\t\treturn this.pendingSubstitute;", "+\t\ttry {", "+\t\t\tTypeBinding substitutedWildcard = this.wildcard.substituteInferenceVariable(var, substituteType);", "+\t\t\tif (substitutedWildcard != this.wildcard) {  //$IDENTITY-COMPARISON$", "+\t\t\t\tCaptureBinding substitute = (CaptureBinding) clone(enclosingType());", "+\t\t\t    substitute.wildcard = (WildcardBinding) substitutedWildcard;", "+\t\t\t    this.pendingSubstitute = substitute;", "+\t\t\t    if (this.lowerBound != null)", "+\t\t\t    \tsubstitute.lowerBound = this.lowerBound.substituteInferenceVariable(var, substituteType);", "+\t\t\t    if (this.firstBound != null)", "+\t\t\t    \tsubstitute.firstBound = this.firstBound.substituteInferenceVariable(var, substituteType);", "+\t\t\t    if (this.superclass != null)", "+\t\t\t    \tsubstitute.superclass = (ReferenceBinding) this.superclass.substituteInferenceVariable(var, substituteType);", "+\t\t\t    if (this.superInterfaces != null) {", "+\t\t\t    \tint length = this.superInterfaces.length;", "+\t\t\t    \tsubstitute.superInterfaces = new ReferenceBinding[length];", "+\t\t\t    \tfor (int i = 0; i < length; i++)", "+\t\t\t    \t\tsubstitute.superInterfaces[i] = (ReferenceBinding) this.superInterfaces[i].substituteInferenceVariable(var, substituteType);", "+\t\t\t    }", "+\t\t\t    return substitute;", "+\t\t\t}", "+\t\t\treturn this;", "+\t\t} finally {", "+\t\t\tthis.pendingSubstitute = null;", "-\t\treturn this;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0954f9520cc41d746dd6fcd728fba26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java", "commitBeforeChange": "df4a3da6e8d30ada6824d136133377b3a37cfebb", "commitAfterChange": "644c4d9043a8634631a6c37637807f9484dbb1d4", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \t@Override \tTypeBinding substituteInferenceVariable(InferenceVariable var, TypeBinding substituteType)", "signatureAfterChange": "  \t@Override \tTypeBinding substituteInferenceVariable(InferenceVariable var, TypeBinding substituteType)", "diff": ["-\t\tTypeBinding newWildcard = this.wildcard.substituteInferenceVariable(var, substituteType);", "-\t\tif (newWildcard != this.wildcard) {  //$IDENTITY-COMPARISON$", "-\t\t\tCaptureBinding newCapture = new CaptureBinding((WildcardBinding) newWildcard, this.sourceType, this.position, this.cud, this.captureID);", "-\t\t    newCapture.id = this.id; // there is no need really to add this to the derived types, just equate the type system ids and the capture ids.", "-\t\t\treturn newCapture;", "+\t\tTypeBinding substitutedWildcard = this.wildcard.substituteInferenceVariable(var, substituteType);", "+\t\tif (substitutedWildcard != this.wildcard) {  //$IDENTITY-COMPARISON$", "+\t\t\tCaptureBinding substitute = (CaptureBinding) clone(enclosingType());", "+\t\t    substitute.wildcard = (WildcardBinding) substitutedWildcard;", "+\t\t    if (this.lowerBound != null)", "+\t\t    \tsubstitute.lowerBound = this.lowerBound.substituteInferenceVariable(var, substituteType);", "+\t\t    if (this.firstBound != null)", "+\t\t    \tsubstitute.firstBound = this.firstBound.substituteInferenceVariable(var, substituteType);", "+\t\t    if (this.superclass != null)", "+\t\t    \tsubstitute.superclass = (ReferenceBinding) this.superclass.substituteInferenceVariable(var, substituteType);", "+\t\t    if (this.superInterfaces != null) {", "+\t\t    \tint length = this.superInterfaces.length;", "+\t\t    \tsubstitute.superInterfaces = new ReferenceBinding[length];", "+\t\t    \tfor (int i = 0; i < length; i++)", "+\t\t    \t\tsubstitute.superInterfaces[i] = (ReferenceBinding) this.superInterfaces[i].substituteInferenceVariable(var, substituteType);", "+\t\t    }", "+\t\t    return substitute;"]}], "num": 13035}
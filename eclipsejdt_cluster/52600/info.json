{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a76ebe781a14fd417ecb9fe14e5016c2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "168b81df764f1a06a8d620367b4d8db0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "0dc7155c5e6d95f70a9aded517c1b54b5c1563f1", "commitAfterChange": "f6b4d99cbdd9c3e7eddd18da23b2ebc6b500e5e0", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "  \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Set invocations, List lubStack)", "signatureAfterChange": "  \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Object invocationData, List lubStack)", "diff": ["-\tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Set invocations, List lubStack) {", "-\t\tif (invocations == null) return mec; // no alternate invocation", "-\t\tint length = invocations.size();", "-\t\tIterator iter = invocations.iterator();", "-\t\tif (length == 1) return (TypeBinding) iter.next();", "+\tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Object invocationData, List lubStack) {", "+\t\tif (invocationData == null) return mec; // no alternate invocation", "+\t\tif (invocationData instanceof TypeBinding) { // only one invocation, simply return it (array only allocated if more than one)", "+\t\t\treturn (TypeBinding) invocationData;", "+\t\t}", "+\t\tTypeBinding[] invocations = (TypeBinding[]) invocationData;", "-\t\twhile (iter.hasNext()) {", "-\t\t\tTypeBinding invocation = ((TypeBinding)iter.next()).leafComponentType();", "+\t\tfor (int i = 0, length = invocations.length; i < length; i++) {", "+\t\t\tTypeBinding invocation = invocations[i].leafComponentType();", "-\t\t\t\t\tfor (int i = 0; i < argLength; i++) {", "-\t\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[i], invocationVariables[i], (ReferenceBinding) mec, i, lubStack);", "+\t\t\t\t\tfor (int j = 0; j < argLength; j++) {", "+\t\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[j], invocationVariables[j], (ReferenceBinding) mec, j, lubStack);", "-\t\t\t\t\t\tbestArguments[i] = bestArgument;", "+\t\t\t\t\t\tbestArguments[j] = bestArgument;", "-\t\t\t\t\tfor (int i = 0; i < argLength; i++) {", "-\t\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[i], parameterizedType.arguments[i], (ReferenceBinding) mec, i, lubStack);", "+\t\t\t\t\tfor (int j = 0; j < argLength; j++) {", "+\t\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[j], parameterizedType.arguments[j], (ReferenceBinding) mec, j, lubStack);", "-\t\t\t\t\t\tbestArguments[i] = bestArgument;", "+\t\t\t\t\t\tbestArguments[j] = bestArgument;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83121e0fa9bec32ff93182f9d65bcac8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "78c62e3a4157070f714848f4de312a55f14f5144", "commitAfterChange": "fb48e11da0ebe84c63fab7b3cb5afd39c0ba6101", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, List invocations)", "signatureAfterChange": " \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Set invocations, List lubStack)", "diff": ["-\tprivate TypeBinding leastContainingInvocation(TypeBinding mec, List invocations) {", "+\tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Set invocations, List lubStack) {", "-\t\tif (length == 0) return mec;", "-\t\tif (length == 1) return (TypeBinding) invocations.get(0);", "+\t\tIterator iter = invocations.iterator();", "+\t\tif (length == 1) return (TypeBinding) iter.next();", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tTypeBinding invocation = (TypeBinding)invocations.get(i);", "+\t\twhile (iter.hasNext()) {", "+\t\t\tTypeBinding invocation = (TypeBinding)iter.next();", "-\t\t\t\tfor (int j = 0; j < argLength; j++) {", "-\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[j], invocationVariables[j], (ReferenceBinding) mec, j);", "+\t\t\t\tfor (int i = 0; i < argLength; i++) {", "+\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[i], invocationVariables[i], (ReferenceBinding) mec, i, lubStack);", "-\t\t\t\t\tbestArguments[j] = bestArgument;", "+\t\t\t\t\tbestArguments[i] = bestArgument;", "-\t\t\t\tfor (int j = 0; j < argLength; j++) {", "-\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[j], parameterizedType.arguments[j], (ReferenceBinding) mec, j);", "+\t\t\t\tfor (int i = 0; i < argLength; i++) {", "+\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[i], parameterizedType.arguments[i], (ReferenceBinding) mec, i, lubStack);", "-\t\t\t\t\tbestArguments[j] = bestArgument;", "+\t\t\t\t\tbestArguments[i] = bestArgument;"]}], "num": 52600}
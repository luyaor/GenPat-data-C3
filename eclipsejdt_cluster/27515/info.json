{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e578e9f972a86a81ae89a155e84794a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67158a9348d2597781d880af1bdef9f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "82e3492687fb385a8a9ba6c56e1f6d491dc8d79a", "commitAfterChange": "0b30f6ac807cc8aa14a5978d1dd305dd71baedda", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprotected void verifyComments(String testNbre) throws JavaModelException", "signatureAfterChange": " \tprivate void verifyComments(String testNbre, boolean flattened) throws JavaModelException", "diff": ["-\tprotected void verifyComments(String testNbre) throws JavaModelException {", "+\tprivate void verifyComments(String testNbre, boolean flattened) throws JavaModelException {", "-\t\t// Verify comments positions", "-//\t\tEnumeration commentStrings = commentsInfo.keys();", "-//\t\tEnumeration commentTags = commentsInfo.elements();", "+\t\t// Verify comments positions and bindings", "-//\t\t\tint start = unitComments[i].getStartPosition();", "-//\t\t\tassertEquals(\"Comment at position \"+start+\" does NOT match source!\", comment, sourceStr.substring(start, start+unitComments[i].getLength()));", "-\t\t\t\tassertEquals(\"Flattened javadoc does NOT match source!\", comment, docComment.toString());", "-\t\t\t\tverifyFragmentsPositions(docComment, source);", "+\t\t\t\tif (flattened) {", "+\t\t\t\t\tassertEquals(\"Flattened javadoc does NOT match source!\", comment, docComment.toString());", "+\t\t\t\t}", "+\t\t\t\tverifyPositions(docComment, source);", "-\t\t/* Verify each javadoc", "+\t\t/* Verify each javadoc: not implemented yet"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8db4170497c4def1aeabdc31e6843a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/AptPlugin.java", "commitBeforeChange": "21b06b1f77b7fda7b2358e6e2d335e77a6ac8125", "commitAfterChange": "b397fbf1ef2684ee73e7617091ec4c7be38fc011", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t \tpublic static AptProject getAptProject(IJavaProject javaProject)", "signatureAfterChange": " \t \tprivate static AptProject getAptProject(IJavaProject javaProject, boolean create)", "diff": ["-\tpublic static AptProject getAptProject(IJavaProject javaProject) {", "-\t\tsynchronized (PROJECT_MAP) {", "+\t", "+\tprivate static AptProject getAptProject(IJavaProject javaProject, boolean create){", "+\t\tsynchronized(PROJECT_MAP){", "-\t\t\telse {", "-\t\t\t\taptProject = new AptProject(javaProject);", "-\t\t\t\tPROJECT_MAP.put(javaProject, aptProject);", "-\t\t\t\treturn aptProject;", "+\t\t\telse{", "+\t\t\t\tif( create ){", "+\t\t\t\t\taptProject = new AptProject(javaProject);", "+\t\t\t\t\tPROJECT_MAP.put(javaProject, aptProject);", "+\t\t\t\t\treturn aptProject;", "+\t\t\t\t}", "+\t\t\t\telse", "+\t\t\t\t\treturn null;"]}], "num": 27515}
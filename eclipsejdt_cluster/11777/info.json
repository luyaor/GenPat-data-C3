{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e2889175c590129d95738bde6039a2e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "589186768c4abadad84ebf7ea8ce7996", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java", "commitBeforeChange": "52e9a16e0c24b173f31a03d11485ff960e6a0dcd", "commitAfterChange": "27a8493469003d6c94e8c4364d8cf032d45d2d80", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic Object getConstantValue()", "signatureAfterChange": " \tpublic Object getConstantValue()", "diff": ["-\t\t// TODO (olivier) - review implementation and add tests", "-\t\tif (c != Constant.NotAConstant) {", "-\t\t\tswitch (c.typeID()) {", "-\t\t\t\tcase TypeIds.T_boolean:", "-\t\t\t\t\treturn Boolean.valueOf(c.booleanValue());", "-\t\t\t\tcase TypeIds.T_byte:", "-\t\t\t\t\treturn new Byte(c.byteValue());", "-\t\t\t\tcase TypeIds.T_char:", "-\t\t\t\t\treturn new Character(c.charValue());", "-\t\t\t\tcase TypeIds.T_double:", "-\t\t\t\t\treturn new Double(c.doubleValue());", "-\t\t\t\tcase TypeIds.T_float:", "-\t\t\t\t\treturn new Float(c.floatValue());", "-\t\t\t\tcase TypeIds.T_int:", "-\t\t\t\t\treturn new Integer(c.intValue());", "-\t\t\t\tcase TypeIds.T_long:", "-\t\t\t\t\treturn new Long(c.longValue());", "-\t\t\t\tcase TypeIds.T_short:", "-\t\t\t\t\treturn new Short(c.shortValue());", "-\t\t\t\tcase TypeIds.T_String:", "-\t\t\t\t\treturn c.stringValue();", "-\t\t\t}", "+\t\tswitch (c.typeID()) {", "+\t\t\tcase TypeIds.T_boolean:", "+\t\t\t\treturn Boolean.valueOf(c.booleanValue());", "+\t\t\tcase TypeIds.T_byte:", "+\t\t\t\treturn new Byte(c.byteValue());", "+\t\t\tcase TypeIds.T_char:", "+\t\t\t\treturn new Character(c.charValue());", "+\t\t\tcase TypeIds.T_double:", "+\t\t\t\treturn new Double(c.doubleValue());", "+\t\t\tcase TypeIds.T_float:", "+\t\t\t\treturn new Float(c.floatValue());", "+\t\t\tcase TypeIds.T_int:", "+\t\t\t\treturn new Integer(c.intValue());", "+\t\t\tcase TypeIds.T_long:", "+\t\t\t\treturn new Long(c.longValue());", "+\t\t\tcase TypeIds.T_short:", "+\t\t\t\treturn new Short(c.shortValue());", "+\t\t\tcase TypeIds.T_String:", "+\t\t\t\treturn c.stringValue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "597d5cd1e39ca9575ee1684ae54d98d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationValueImpl.java", "commitBeforeChange": "82fb6745d0f2bc2c9b5e4740da70b2e364d6955a", "commitAfterChange": "c295624cf25dea9fdc929a62413bd288dbeb35d7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Override \tpublic <R, P> R accept(AnnotationValueVisitor<R, P> v, P p)", "signatureAfterChange": "  \t@SuppressWarnings(\"unchecked\" \t@Override \tpublic <R, P> R accept(AnnotationValueVisitor<R, P> v, P p)", "diff": ["+\t@SuppressWarnings(\"unchecked\") // Need to cast Object _value to a List<AnnotationValue>", "-\t\treturn v.visit(this, p);", "+\t\tswitch (_kind) {", "+\t\tcase TypeIds.T_boolean:", "+\t\t\treturn v.visitBoolean((Boolean)_value, p);", "+\t\tcase TypeIds.T_byte:", "+\t\t\treturn v.visitByte((Byte)_value, p);", "+\t\tcase TypeIds.T_char:", "+\t\t\treturn v.visitChar((Character)_value, p);", "+\t\tcase TypeIds.T_double:", "+\t\t\treturn v.visitDouble((Double)_value, p);", "+\t\tcase TypeIds.T_float:", "+\t\t\treturn v.visitFloat((Float)_value, p);", "+\t\tcase TypeIds.T_int:", "+\t\t\treturn v.visitInt((Integer)_value, p);", "+\t\tcase TypeIds.T_JavaLangString:", "+\t\t\treturn v.visitString((String)_value, p);", "+\t\tcase TypeIds.T_long:", "+\t\t\treturn v.visitLong((Long)_value, p);", "+\t\tcase TypeIds.T_short:", "+\t\t\treturn v.visitShort((Short)_value, p);", "+\t\tcase T_EnumConstant:", "+\t\t\treturn v.visitEnumConstant((VariableElement)_value, p);", "+\t\tcase T_ClassObject:", "+\t\t\treturn v.visitType((TypeMirror)_value, p);", "+\t\tcase T_AnnotationMirror:", "+\t\t\treturn v.visitAnnotation((AnnotationMirror)_value, p);", "+\t\tcase T_ArrayType:", "+\t\t\treturn v.visitArray((List<AnnotationValue>)_value, p);", "+\t\tdefault:", "+\t\t\treturn null;", "+\t\t}"]}], "num": 11777}
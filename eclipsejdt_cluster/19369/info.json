{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3762d795200a02d571aef213614a969", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "182214b65513a7daef601b0e7d0a17e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "cbbc77bad29ab0935f23d7976e8f3a83a2098569", "commitAfterChange": "218bf9e76765a0b6d9236837b12cba562b6c4513", "methodNumberBeforeChange": 264, "methodNumberAfterChange": 264, "signatureBeforeChange": " public void test117()", "signatureAfterChange": " public void test117()", "diff": ["-\tif (this.complianceLevel.compareTo(COMPLIANCE_1_5) >= 0) {", "-    \tMap options = this.getCompilerOptions();", "-    \toptions.put(CompilerOptions.OPTION_ReportOverridingMethodWithoutSuperInvocation, CompilerOptions.ERROR);", "-    \tthis.runNegativeTest(", "-    \t\tnew String[] {", "-    \t\t\t\"X.java\",", "-    \t\t\t\"class Y {\\n\" + ", "-    \t\t\t\"  Object foo() {\\n\" +", "-    \t\t\t\"     return null;\\n\" +", "-    \t\t\t\"  }\\n\" + ", "-    \t\t\t\"}\\n\" + ", "-    \t\t\t\"public class X extends Y {\\n\" + ", "-    \t\t\t\"  @Override\\n\" +", "-    \t\t\t\"  Object foo() {\\n\" +", "-    \t\t\t\"     return new Y() {\\n\" +", "-       \t\t\t\"         @Override\\n\" +", "-    \t\t\t\"         Object foo() {\\n\" +", "-    \t\t\t\"            return null;\\n\" +", "-    \t\t\t\"         }\\n\" +", "-    \t\t\t\"     };\" +", "-    \t\t\t\"  }\\n\" + ", "-    \t\t\t\"}\"", "-    \t\t},", "-    \t\t\"----------\\n\" + ", "-    \t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "-    \t\t\"\tObject foo() {\\n\" + ", "-    \t\t\"\t       ^^^^^\\n\" + ", "-    \t\t\"The method X.foo() is overriding a method without making a super invocation\\n\" + ", "-    \t\t\"----------\\n\" + ", "-    \t\t\"2. ERROR in X.java (at line 11)\\n\" + ", "-    \t\t\"\tObject foo() {\\n\" + ", "-    \t\t\"\t       ^^^^^\\n\" + ", "-    \t\t\"The method new Y(){}.foo() is overriding a method without making a super invocation\\n\" + ", "-    \t\t\"----------\\n\",", "-    \t\tnull,", "-    \t\ttrue,", "-    \t\toptions", "-    \t);", "-\t}", "+\tMap options = this.getCompilerOptions();", "+\toptions.put(CompilerOptions.OPTION_ReportOverridingMethodWithoutSuperInvocation, CompilerOptions.ERROR);", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"class Y {\\n\" + ", "+\t\t\t\"  Object foo() {\\n\" +", "+\t\t\t\"     return null;\\n\" +", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"public class X extends Y {\\n\" + ", "+\t\t\t\"  @Override\\n\" +", "+\t\t\t\"  Object foo() {\\n\" +", "+\t\t\t\"     return new Y() {\\n\" +", "+   \t\t\t\"         @Override\\n\" +", "+\t\t\t\"         Object foo() {\\n\" +", "+\t\t\t\"            return null;\\n\" +", "+\t\t\t\"         }\\n\" +", "+\t\t\t\"     };\" +", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\"", "+\t\t},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\tObject foo() {\\n\" + ", "+\t\t\"\t       ^^^^^\\n\" + ", "+\t\t\"The method X.foo() is overriding a method without making a super invocation\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"\tObject foo() {\\n\" + ", "+\t\t\"\t       ^^^^^\\n\" + ", "+\t\t\"The method new Y(){}.foo() is overriding a method without making a super invocation\\n\" + ", "+\t\t\"----------\\n\",", "+\t\tnull,", "+\t\ttrue,", "+\t\toptions", "+\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed4a5a24d2aba6f46d578ad431be713e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "cbbc77bad29ab0935f23d7976e8f3a83a2098569", "commitAfterChange": "218bf9e76765a0b6d9236837b12cba562b6c4513", "methodNumberBeforeChange": 262, "methodNumberAfterChange": 262, "signatureBeforeChange": " public void test115()", "signatureAfterChange": " public void test115()", "diff": ["-\tif (this.complianceLevel.compareTo(COMPLIANCE_1_5) >= 0) {", "-    \tMap options = this.getCompilerOptions();", "-    \toptions.put(CompilerOptions.OPTION_ReportOverridingMethodWithoutSuperInvocation, CompilerOptions.ERROR);", "-    \tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-    \t\t\t\"class Y {\\n\" + ", "-    \t\t\t\"  void foo() {}\\n\" + ", "-    \t\t\t\"}\\n\" + ", "-    \t\t\t\"public class X extends Y {\\n\" + ", "-    \t\t\t\"  @Override\\n\" +", "-    \t\t\t\"  void foo() {\\n\" + ", "-    \t\t\t\"    super.foo();\\n\" + ", "-    \t\t\t\"  }\\n\" + ", "-    \t\t\t\"}\"", "-\t\t\t},", "-\t\t\t\"\",", "-\t\t\tnull,", "-\t\t\ttrue,", "-\t\t\tnull,", "-\t\t\toptions,", "-\t\t\tnull", "-\t\t);", "-\t}", "+\tMap options = this.getCompilerOptions();", "+\toptions.put(CompilerOptions.OPTION_ReportOverridingMethodWithoutSuperInvocation, CompilerOptions.ERROR);", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"class Y {\\n\" + ", "+\t\t\t\"  void foo() {}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"public class X extends Y {\\n\" + ", "+\t\t\t\"  @Override\\n\" +", "+\t\t\t\"  void foo() {\\n\" + ", "+\t\t\t\"    super.foo();\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\"", "+\t\t},", "+\t\t\"\",", "+\t\tnull,", "+\t\ttrue,", "+\t\tnull,", "+\t\toptions,", "+\t\tnull", "+\t);"]}], "num": 19369}
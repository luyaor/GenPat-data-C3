{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f28acc716291c663f5faf361175c49f7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1305b1453de8e13f4aecbb5b8c273b21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "030eb4fda54a6751c1b822374d11bd8e8163881c", "commitAfterChange": "ec1201be6eb9490fec9fdaa6f4ea5d677aacc407", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void addAttributes()", "signatureAfterChange": " \tpublic void addAttributes()", "diff": ["-\t\t\t// check that there is enough space to write all the bytes for the field info corresponding", "-\t\t\t// to the @fieldBinding", "-\t\t\tif (this.contentsOffset + 8 >= this.contents.length) {", "-\t\t\t\tresizeContents(8);", "-\t\t\t}", "-\t\t\tint sourceAttributeNameIndex =", "-\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.SourceName);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (sourceAttributeNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) sourceAttributeNameIndex;", "-\t\t\t// The length of a source file attribute is 2. This is a fixed-length", "-\t\t\t// attribute", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 2;", "-\t\t\t// write the source file name", "-\t\t\tint fileNameIndex = this.constantPool.literalIndex(fullFileName.toCharArray());", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (fileNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) fileNameIndex;", "-\t\t\tattributesNumber++;", "+\t\t\tattributesNumber += generateSourceAttribute(fullFileName);", "-\t\t\tif (this.contentsOffset + 6 >= this.contents.length) {", "-\t\t\t\tresizeContents(6);", "-\t\t\t}", "-\t\t\tint deprecatedAttributeNameIndex =", "-\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.DeprecatedName);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (deprecatedAttributeNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) deprecatedAttributeNameIndex;", "-\t\t\t// the length of a deprecated attribute is equals to 0", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tattributesNumber++;", "+\t\t\tattributesNumber += generateDeprecatedAttribute();", "-\t\t\t// check that there is enough space to write all the bytes for the field info corresponding", "-\t\t\t// to the @fieldBinding", "-\t\t\tif (this.contentsOffset + 8 >= this.contents.length) {", "-\t\t\t\tresizeContents(8);", "-\t\t\t}", "-\t\t\tint signatureAttributeNameIndex =", "-\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.SignatureName);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (signatureAttributeNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) signatureAttributeNameIndex;", "-\t\t\t// the length of a signature attribute is equals to 2", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 2;", "-\t\t\tint signatureIndex =", "-\t\t\t\tthis.constantPool.literalIndex(genericSignature);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (signatureIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) signatureIndex;", "-\t\t\tattributesNumber++;", "+\t\t\tattributesNumber += generateSignatureAttribute(genericSignature);", "-\t\t\tif (this.contentsOffset + 10 >= this.contents.length) {", "-\t\t\t\tresizeContents(10);", "-\t\t\t}", "-\t\t\tint enclosingMethodAttributeNameIndex =", "-\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.EnclosingMethodName);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (enclosingMethodAttributeNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) enclosingMethodAttributeNameIndex;", "-\t\t\t// the length of a signature attribute is equals to 2", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 4;", "-", "-\t\t\tint enclosingTypeIndex = this.constantPool.literalIndexForType(this.referenceBinding.enclosingType().constantPoolName());", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (enclosingTypeIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) enclosingTypeIndex;", "-\t\t\tbyte methodIndexByte1 = 0;", "-\t\t\tbyte methodIndexByte2 = 0;", "-\t\t\tif (this.referenceBinding instanceof LocalTypeBinding) {", "-\t\t\t\tMethodBinding methodBinding = ((LocalTypeBinding) this.referenceBinding).enclosingMethod;", "-\t\t\t\tif (methodBinding != null) {", "-\t\t\t\t\tint enclosingMethodIndex = this.constantPool.literalIndexForNameAndType(methodBinding.selector, methodBinding.signature(this));", "-\t\t\t\t\tmethodIndexByte1 = (byte) (enclosingMethodIndex >> 8);", "-\t\t\t\t\tmethodIndexByte2 = (byte) enclosingMethodIndex;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tthis.contents[this.contentsOffset++] = methodIndexByte1;", "-\t\t\tthis.contents[this.contentsOffset++] = methodIndexByte2;", "-\t\t\tattributesNumber++;", "+\t\t\tattributesNumber += generateEnclosingMethodAttribute();", "-\t\t\t// add an attribute for inconsistent hierarchy", "-\t\t\tif (this.contentsOffset + 6 >= this.contents.length) {", "-\t\t\t\tresizeContents(6);", "-\t\t\t}", "-\t\t\tint inconsistentHierarchyNameIndex =", "-\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.InconsistentHierarchy);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (inconsistentHierarchyNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) inconsistentHierarchyNameIndex;", "-\t\t\t// the length of an inconsistent hierarchy attribute is equals to 0", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tattributesNumber++;", "+\t\t\tattributesNumber += generateHierarchyInconsistentAttribute();", "-\t\t\t// Generate the inner class attribute", "-\t\t\tint exSize = 8 * numberOfInnerClasses + 8;", "-\t\t\tif (exSize + this.contentsOffset >= this.contents.length) {", "-\t\t\t\tresizeContents(exSize);", "-\t\t\t}", "-\t\t\t// Now we now the size of the attribute and the number of entries", "-\t\t\t// attribute name", "-\t\t\tint attributeNameIndex =", "-\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.InnerClassName);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (attributeNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) attributeNameIndex;", "-\t\t\tint value = (numberOfInnerClasses << 3) + 2;", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (value >> 24);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (value >> 16);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (value >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) value;", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (numberOfInnerClasses >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) numberOfInnerClasses;", "-\t\t\tfor (int i = 0; i < numberOfInnerClasses; i++) {", "-\t\t\t\tReferenceBinding innerClass = innerClasses[i];", "-\t\t\t\tint accessFlags = innerClass.getAccessFlags();", "-\t\t\t\tint innerClassIndex = this.constantPool.literalIndexForType(innerClass.constantPoolName());", "-\t\t\t\t// inner class index", "-\t\t\t\tthis.contents[this.contentsOffset++] = (byte) (innerClassIndex >> 8);", "-\t\t\t\tthis.contents[this.contentsOffset++] = (byte) innerClassIndex;", "-\t\t\t\t// outer class index: anonymous and local have no outer class index", "-\t\t\t\tif (innerClass.isMemberType()) {", "-\t\t\t\t\t// member or member of local", "-\t\t\t\t\tint outerClassIndex = this.constantPool.literalIndexForType(innerClass.enclosingType().constantPoolName());", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = (byte) (outerClassIndex >> 8);", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = (byte) outerClassIndex;", "-\t\t\t\t} else {", "-\t\t\t\t\t// equals to 0 if the innerClass is not a member type", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\t\t}", "-\t\t\t\t// name index", "-\t\t\t\tif (!innerClass.isAnonymousType()) {", "-\t\t\t\t\tint nameIndex = this.constantPool.literalIndex(innerClass.sourceName());", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = (byte) (nameIndex >> 8);", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = (byte) nameIndex;", "-\t\t\t\t} else {", "-\t\t\t\t\t// equals to 0 if the innerClass is an anonymous type", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\t\t}", "-\t\t\t\t// access flag", "-\t\t\t\tif (innerClass.isAnonymousType()) {", "-\t\t\t\t\taccessFlags &= ~ClassFileConstants.AccFinal;", "-\t\t\t\t} else if (innerClass.isMemberType() && innerClass.isInterface()) {", "-\t\t\t\t\taccessFlags |= ClassFileConstants.AccStatic; // implicitely static", "-\t\t\t\t}", "-\t\t\t\tthis.contents[this.contentsOffset++] = (byte) (accessFlags >> 8);", "-\t\t\t\tthis.contents[this.contentsOffset++] = (byte) accessFlags;", "-\t\t\t}", "-\t\t\tattributesNumber++;", "+\t\t\tattributesNumber += generateInnerClassAttribute(numberOfInnerClasses, innerClasses);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb9fbb140c31e027b4abda8dec08dee0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "b87572492983319fd5b985b86ee02375e95b060e", "commitAfterChange": "a11817dc899a9de9f005482307f896959bfddcb6", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t     public void setEclipseDefaultSettings()", "signatureAfterChange": " \t     public void setEclipseDefaultSettings()", "diff": ["-        this.alignment_for_arguments_in_allocation_expression = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_arguments_in_enum_constant = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_arguments_in_explicit_constructor_call = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_arguments_in_method_invocation = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_arguments_in_qualified_allocation_expression = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_binary_expression = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_compact_if = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_conditional_expression = Alignment.M_NEXT_PER_LINE_SPLIT;", "-        this.alignment_for_expressions_in_array_initializer = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_multiple_fields = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_parameters_in_constructor_declaration = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_parameters_in_method_declaration = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_selector_in_method_invocation = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_superclass_in_type_declaration = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_superinterfaces_in_enum_declaration = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_superinterfaces_in_type_declaration = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_throws_clause_in_constructor_declaration = Alignment.M_COMPACT_SPLIT;", "-        this.alignment_for_throws_clause_in_method_declaration = Alignment.M_COMPACT_SPLIT;", "-        this.align_type_members_on_columns = false;", "-        this.brace_position_for_annotation_type_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.brace_position_for_anonymous_type_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.brace_position_for_array_initializer = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.brace_position_for_block = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.brace_position_for_block_in_case = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.brace_position_for_constructor_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.brace_position_for_enum_constant = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.brace_position_for_enum_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.brace_position_for_method_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.brace_position_for_type_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.brace_position_for_switch = DefaultCodeFormatterConstants.END_OF_LINE;", "-        this.comment_clear_blank_lines = true;", "-        this.comment_format = true;", "-        this.comment_format_header = false;", "-        this.comment_format_html = true;", "-        this.comment_format_source = true;", "-        this.comment_indent_parameter_description = true;", "-        this.comment_indent_root_tags = true;", "-        this.comment_insert_empty_line_before_root_tags = true;", "-        this.comment_insert_new_line_for_parameter = true;", "-        this.comment_line_length = 80;", "-        this.continuation_indentation = 2;", "-        this.continuation_indentation_for_array_initializer = 2;", "-        this.blank_lines_after_imports = 1;", "-        this.blank_lines_after_package = 1;", "-        this.blank_lines_before_field = 1;", "-        this.blank_lines_before_first_class_body_declaration = 0;", "-        this.blank_lines_before_imports = 1;", "-        this.blank_lines_before_member_type = 1;", "-        this.blank_lines_before_method = 1;", "-        this.blank_lines_before_new_chunk = 1;", "-        this.blank_lines_before_package = 0;", "-        this.blank_lines_between_type_declarations = 1;", "-        this.blank_lines_at_beginning_of_method_body = 0;", "-        this.indent_statements_compare_to_block = true;", "-        this.indent_statements_compare_to_body = true;", "-        this.indent_body_declarations_compare_to_enum_constant_header = true;", "-        this.indent_body_declarations_compare_to_enum_declaration_header = true;", "-        this.indent_body_declarations_compare_to_type_header = true;", "-        this.indent_breaks_compare_to_cases = true;", "-        this.indent_switchstatements_compare_to_cases = true;", "-        this.indent_switchstatements_compare_to_switch = false;", "-        this.indentation_size = 4;", "-        this.insert_new_line_after_annotation = true;", "-        this.insert_new_line_after_opening_brace_in_array_initializer = false;", "-        this.insert_new_line_at_end_of_file_if_missing = false;", "-        this.insert_new_line_before_catch_in_try_statement = false;", "-        this.insert_new_line_before_closing_brace_in_array_initializer = false;", "-        this.insert_new_line_before_else_in_if_statement = false;", "-        this.insert_new_line_before_finally_in_try_statement = false;", "-        this.insert_new_line_before_while_in_do_statement = false;", "-        this.insert_new_line_in_empty_anonymous_type_declaration = true;", "-        this.insert_new_line_in_empty_block = true;", "-        this.insert_new_line_in_empty_enum_constant = true;", "-        this.insert_new_line_in_empty_enum_declaration = true;", "-        this.insert_new_line_in_empty_method_body = true;", "-        this.insert_new_line_in_empty_type_declaration = true;", "-        this.insert_space_after_and_in_type_parameter = true;", "-        this.insert_space_after_assignment_operator = true;", "-        this.insert_space_after_at_in_annotation = false;", "-        this.insert_space_after_at_in_annotation_type_declaration = false;", "-        this.insert_space_after_binary_operator = true;", "-        this.insert_space_after_closing_angle_bracket_in_type_arguments = true;", "-        this.insert_space_after_closing_angle_bracket_in_type_parameters = true;", "-        this.insert_space_after_closing_paren_in_cast = true;", "-        this.insert_space_after_closing_brace_in_block = true;", "-        this.insert_space_after_colon_in_assert = true;", "-        this.insert_space_after_colon_in_case = true;", "-        this.insert_space_after_colon_in_conditional = true;", "-        this.insert_space_after_colon_in_for = true;", "-        this.insert_space_after_colon_in_labeled_statement = true;", "-        this.insert_space_after_comma_in_allocation_expression = true;", "-        this.insert_space_after_comma_in_annotation = true;", "-        this.insert_space_after_comma_in_array_initializer = true;", "-        this.insert_space_after_comma_in_constructor_declaration_parameters = true;", "-        this.insert_space_after_comma_in_constructor_declaration_throws = true;", "-        this.insert_space_after_comma_in_enum_constant_arguments = true;", "-        this.insert_space_after_comma_in_enum_declarations = true;", "-        this.insert_space_after_comma_in_explicit_constructor_call_arguments = true;", "-        this.insert_space_after_comma_in_for_increments = true;", "-        this.insert_space_after_comma_in_for_inits = true;", "-        this.insert_space_after_comma_in_method_invocation_arguments = true;", "-        this.insert_space_after_comma_in_method_declaration_parameters = true;", "-        this.insert_space_after_comma_in_method_declaration_throws = true;", "-        this.insert_space_after_comma_in_multiple_field_declarations = true;", "-        this.insert_space_after_comma_in_multiple_local_declarations = true;", "-        this.insert_space_after_comma_in_parameterized_type_reference = true;", "-        this.insert_space_after_comma_in_superinterfaces = true;", "-        this.insert_space_after_comma_in_type_arguments = true;", "-        this.insert_space_after_comma_in_type_parameters = true;", "-        this.insert_space_after_ellipsis = true;", "-        this.insert_space_after_opening_angle_bracket_in_parameterized_type_reference = false;", "-        this.insert_space_after_opening_angle_bracket_in_type_arguments = false;", "-        this.insert_space_after_opening_angle_bracket_in_type_parameters = false;", "-        this.insert_space_after_opening_bracket_in_array_allocation_expression = false;", "-        this.insert_space_after_opening_bracket_in_array_reference = false;", "-        this.insert_space_after_opening_brace_in_array_initializer = true;", "-        this.insert_space_after_opening_paren_in_annotation = false;", "-        this.insert_space_after_opening_paren_in_cast = false;", "-        this.insert_space_after_opening_paren_in_catch = false;", "-        this.insert_space_after_opening_paren_in_constructor_declaration = false;", "-        this.insert_space_after_opening_paren_in_enum_constant = false;", "-        this.insert_space_after_opening_paren_in_for = false;", "-        this.insert_space_after_opening_paren_in_if = false;", "-        this.insert_space_after_opening_paren_in_method_declaration = false;", "-        this.insert_space_after_opening_paren_in_method_invocation = false;", "-        this.insert_space_after_opening_paren_in_parenthesized_expression = false;", "-        this.insert_space_after_opening_paren_in_switch = false;", "-        this.insert_space_after_opening_paren_in_synchronized = false;", "-        this.insert_space_after_opening_paren_in_while = false;", "-        this.insert_space_after_postfix_operator = false;", "-        this.insert_space_after_prefix_operator = false;", "-        this.insert_space_after_question_in_conditional = true;", "-        this.insert_space_after_question_in_wilcard = false;", "-        this.insert_space_after_semicolon_in_for = true;", "-        this.insert_space_after_unary_operator = false;", "-        this.insert_space_before_and_in_type_parameter = true;", "-        this.insert_space_before_at_in_annotation_type_declaration = true;", "-        this.insert_space_before_assignment_operator = true;", "-        this.insert_space_before_binary_operator = true;", "-        this.insert_space_before_closing_angle_bracket_in_parameterized_type_reference = false;", "-        this.insert_space_before_closing_angle_bracket_in_type_arguments = false;", "-        this.insert_space_before_closing_angle_bracket_in_type_parameters = false;", "-        this.insert_space_before_closing_brace_in_array_initializer = true;", "-        this.insert_space_before_closing_bracket_in_array_allocation_expression = false;", "-        this.insert_space_before_closing_bracket_in_array_reference = false;", "-        this.insert_space_before_closing_paren_in_annotation = false;", "-        this.insert_space_before_closing_paren_in_cast = false;", "-        this.insert_space_before_closing_paren_in_catch = false;", "-        this.insert_space_before_closing_paren_in_constructor_declaration = false;", "-        this.insert_space_before_closing_paren_in_enum_constant = false;", "-        this.insert_space_before_closing_paren_in_for = false;", "-        this.insert_space_before_closing_paren_in_if = false;", "-        this.insert_space_before_closing_paren_in_method_declaration = false;", "-        this.insert_space_before_closing_paren_in_method_invocation = false;", "-        this.insert_space_before_closing_paren_in_parenthesized_expression = false;", "-        this.insert_space_before_closing_paren_in_switch = false;", "-        this.insert_space_before_closing_paren_in_synchronized = false;", "-        this.insert_space_before_closing_paren_in_while = false;", "-        this.insert_space_before_colon_in_assert = true;", "-        this.insert_space_before_colon_in_case = false;", "-        this.insert_space_before_colon_in_conditional = true;", "-        this.insert_space_before_colon_in_default = false;", "-        this.insert_space_before_colon_in_for = true;", "-        this.insert_space_before_colon_in_labeled_statement = false;", "-        this.insert_space_before_comma_in_allocation_expression = false;", "-        this.insert_space_before_comma_in_array_initializer = false;", "-        this.insert_space_before_comma_in_constructor_declaration_parameters = false;", "-        this.insert_space_before_comma_in_constructor_declaration_throws = false;", "-        this.insert_space_before_comma_in_enum_constant_arguments = false;", "-        this.insert_space_before_comma_in_enum_declarations = false;", "-        this.insert_space_before_comma_in_explicit_constructor_call_arguments = false;", "-        this.insert_space_before_comma_in_for_increments = false;", "-        this.insert_space_before_comma_in_for_inits = false;", "-        this.insert_space_before_comma_in_method_invocation_arguments = false;", "-        this.insert_space_before_comma_in_method_declaration_parameters = false;", "-        this.insert_space_before_comma_in_method_declaration_throws = false;", "-        this.insert_space_before_comma_in_multiple_field_declarations = false;", "-        this.insert_space_before_comma_in_multiple_local_declarations = false;", "-        this.insert_space_before_comma_in_parameterized_type_reference = false;", "-        this.insert_space_before_comma_in_superinterfaces = false;", "-        this.insert_space_before_comma_in_type_arguments = false;", "-        this.insert_space_before_comma_in_type_parameters = false;", "-        this.insert_space_before_ellipsis = false;", "-        this.insert_space_before_opening_angle_bracket_in_parameterized_type_reference = false;", "-        this.insert_space_before_opening_angle_bracket_in_type_arguments = false;", "-        this.insert_space_before_opening_angle_bracket_in_type_parameters = false;", "-        this.insert_space_before_opening_brace_in_annotation_type_declaration = true;", "-        this.insert_space_before_opening_brace_in_anonymous_type_declaration = true;", "-        this.insert_space_before_opening_brace_in_array_initializer = true;", "-        this.insert_space_before_opening_brace_in_block = true;", "-        this.insert_space_before_opening_brace_in_constructor_declaration = true;", "-        this.insert_space_before_opening_brace_in_enum_constant = true;", "-        this.insert_space_before_opening_brace_in_enum_declaration = true;", "-        this.insert_space_before_opening_brace_in_method_declaration = true;", "-        this.insert_space_before_opening_brace_in_switch = true;", "-        this.insert_space_before_opening_brace_in_type_declaration = true;", "-        this.insert_space_before_opening_bracket_in_array_allocation_expression = false;", "-        this.insert_space_before_opening_bracket_in_array_reference = false;", "-        this.insert_space_before_opening_bracket_in_array_type_reference = false;", "-        this.insert_space_before_opening_paren_in_annotation = false;", "-        this.insert_space_before_opening_paren_in_annotation_type_member_declaration = false;", "-        this.insert_space_before_opening_paren_in_catch = true;", "-        this.insert_space_before_opening_paren_in_constructor_declaration = false;", "-        this.insert_space_before_opening_paren_in_enum_constant = false;", "-        this.insert_space_before_opening_paren_in_for = true;", "-        this.insert_space_before_opening_paren_in_if = true;", "-        this.insert_space_before_opening_paren_in_method_invocation = false;", "-        this.insert_space_before_opening_paren_in_method_declaration = false;", "-        this.insert_space_before_opening_paren_in_switch = true;", "-        this.insert_space_before_opening_paren_in_synchronized = true;", "-        this.insert_space_before_opening_paren_in_parenthesized_expression = false;", "-        this.insert_space_before_opening_paren_in_while = true;", "-        this.insert_space_before_postfix_operator = false;", "-        this.insert_space_before_prefix_operator = false;", "-        this.insert_space_before_question_in_conditional = true;", "-        this.insert_space_before_question_in_wilcard = false;", "-        this.insert_space_before_semicolon = false;", "-        this.insert_space_before_semicolon_in_for = false;", "-        this.insert_space_before_unary_operator = false;", "-        this.insert_space_between_brackets_in_array_type_reference = false;", "-        this.insert_space_between_empty_braces_in_array_initializer = false;", "-        this.insert_space_between_empty_brackets_in_array_allocation_expression = false;", "-        this.insert_space_between_empty_parens_in_annotation_type_member_declaration = false;", "-        this.insert_space_between_empty_parens_in_constructor_declaration = false;", "-        this.insert_space_between_empty_parens_in_enum_constant = false;", "-        this.insert_space_between_empty_parens_in_method_declaration = false;", "-        this.insert_space_between_empty_parens_in_method_invocation = false;", "-        this.compact_else_if = true;", "-        this.keep_guardian_clause_on_one_line = false;", "-        this.keep_else_statement_on_same_line = false;", "-        this.keep_empty_array_initializer_on_one_line = false;", "-        this.keep_simple_if_on_one_line = false;", "-        this.keep_then_statement_on_same_line = false;", "-        this.number_of_empty_lines_to_preserve = 1;", "-        this.put_empty_statement_on_new_line = true;", "-        this.tab_size = 4;", "-        this.page_width = 80;", "+        setJavaConventionsSettings();", "+        this.tab_size = 4;"]}], "num": 18484}
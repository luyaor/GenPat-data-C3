{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe6432da12ea3aa7468d079acebc2220", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7be3fce9d8bb9fbfc2c11975e4d43c1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "3a7eebe0921eeefbdbf1fe4891891b6335310197", "commitAfterChange": "e8aa72d0e85424c76c1185b7518db6803dde6255", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void computeConstant(BlockScope scope, int leftId, int rightId)", "signatureAfterChange": "  public void computeConstant(BlockScope scope, int leftId, int rightId)", "diff": ["-\tpublic void computeConstant(BlockScope scope, int leftId, int rightId) {", "-", "-\t\t//compute the constant when valid", "-\t\tif ((this.left.constant != Constant.NotAConstant)", "-\t\t\t&& (this.right.constant != Constant.NotAConstant)) {", "-\t\t\ttry {", "-\t\t\t\tthis.constant =", "-\t\t\t\t\tConstant.computeConstantOperation(", "-\t\t\t\t\t\tthis.left.constant,", "-\t\t\t\t\t\tleftId,", "-\t\t\t\t\t\t(this.bits & OperatorMASK) >> OperatorSHIFT,", "-\t\t\t\t\t\tthis.right.constant,", "-\t\t\t\t\t\trightId);", "-\t\t\t} catch (ArithmeticException e) {", "-\t\t\t\tthis.constant = Constant.NotAConstant;", "-\t\t\t\t// 1.2 no longer throws an exception at compile-time", "-\t\t\t\t//scope.problemReporter().compileTimeConstantThrowsArithmeticException(this);", "-\t\t\t}", "-\t\t} else {", "+public void computeConstant(BlockScope scope, int leftId, int rightId) {", "+\t//compute the constant when valid", "+\tif ((this.left.constant != Constant.NotAConstant)", "+\t\t&& (this.right.constant != Constant.NotAConstant)) {", "+\t\ttry {", "+\t\t\tthis.constant =", "+\t\t\t\tConstant.computeConstantOperation(", "+\t\t\t\t\tthis.left.constant,", "+\t\t\t\t\tleftId,", "+\t\t\t\t\t(this.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT,", "+\t\t\t\t\tthis.right.constant,", "+\t\t\t\t\trightId);", "+\t\t} catch (ArithmeticException e) {", "-\t\t\t//add some work for the boolean operators & |  ", "-\t\t\tthis.optimizedBooleanConstant(", "-\t\t\t\tleftId,", "-\t\t\t\t(this.bits & OperatorMASK) >> OperatorSHIFT,", "-\t\t\t\trightId);", "+\t\t\t// 1.2 no longer throws an exception at compile-time", "+\t\t\t//scope.problemReporter().compileTimeConstantThrowsArithmeticException(this);", "+\t} else {", "+\t\tthis.constant = Constant.NotAConstant;", "+\t\t//add some work for the boolean operators & |  ", "+\t\tthis.optimizedBooleanConstant(", "+\t\t\tleftId,", "+\t\t\t(this.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT,", "+\t\t\trightId);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1042b787c6f0c9ccbfec6ecfbbac48b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java", "commitBeforeChange": "d7e7bb059880a6c87ea3290708d2d0a9f9e7ebe8", "commitAfterChange": "a415220ad0bdc743d286b40ccc481ededfe8132e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding expressionTb = expression.resolveType(scope);", "-\t\tif (expressionTb == null) {", "-\t\t\tconstant = NotAConstant;", "+\t\t", "+\t\tTypeBinding expressionType = this.expression.resolveType(scope);", "+\t\tif (expressionType == null) {", "+\t\t\tthis.constant = NotAConstant;", "-\t\tint expressionId = expressionTb.id;", "+\t\tint expressionId = expressionType.id;", "-\t\t\tconstant = NotAConstant;", "-\t\t\tscope.problemReporter().invalidOperator(this, expressionTb);", "+\t\t\tthis.constant = NotAConstant;", "+\t\t\tscope.problemReporter().invalidOperator(this, expressionType);", "-\t\texpression.implicitConversion = result >>> 12;", "-\t\tbits |= result & 0xF;", "+\t\tthis.expression.implicitConversion = result >>> 12;", "+\t\tthis.bits |= result & 0xF;", "-\t\t\t\tconstant = Constant.NotAConstant;", "+\t\t\t\tthis.constant = Constant.NotAConstant;", "-\t\t\t\t\tscope.problemReporter().invalidOperator(this, expressionTb);", "+\t\t\t\t\tscope.problemReporter().invalidOperator(this, expressionType);", "-\t\tif (expression.constant != Constant.NotAConstant) {", "-\t\t\tconstant =", "+\t\tif (this.expression.constant != Constant.NotAConstant) {", "+\t\t\tthis.constant =", "-\t\t\t\t\texpression.constant,", "+\t\t\t\t\tthis.expression.constant,", "-\t\t\tconstant = Constant.NotAConstant;", "+\t\t\tthis.constant = Constant.NotAConstant;", "-\t\t\t\tConstant cst = expression.conditionalConstant();", "-\t\t\t\tif (cst.typeID() == T_boolean)", "-\t\t\t\t\toptimizedBooleanConstant = Constant.fromValue(!cst.booleanValue());", "+\t\t\t\tConstant cst = expression.optimizedBooleanConstant();", "+\t\t\t\tif (cst != Constant.NotAConstant) ", "+\t\t\t\t\tthis.optimizedBooleanConstant = Constant.fromValue(!cst.booleanValue());"]}], "num": 38296}
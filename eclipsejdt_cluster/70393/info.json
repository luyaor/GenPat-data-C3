{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "716590201f8d7582618e687bd00a05f6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f61069ff5c18a3c534d9c0695697b6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "43ba239664019dd489061a00645e975e2ecd1a6c", "commitAfterChange": "a19171d5a6cc8e94c6df1651af7a51cd6da24781", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["-\t\t\tif (expressionType == null)", "-\t\t\t\treturn;", "-\t\t\texpression.computeConversion(upperScope, expressionType, expressionType);", "-\t\t\tcheckType: {", "-\t\t\t\tif (expressionType.isBaseType()) {", "-\t\t\t\t\tif (expression.isConstantValueOfTypeAssignableToType(expressionType, IntBinding))", "+\t\t\tif (expressionType != null) {", "+\t\t\t\texpression.computeConversion(upperScope, expressionType, expressionType);", "+\t\t\t\tcheckType: {", "+\t\t\t\t\tif (expressionType.isBaseType()) {", "+\t\t\t\t\t\tif (expression.isConstantValueOfTypeAssignableToType(expressionType, IntBinding))", "+\t\t\t\t\t\t\tbreak checkType;", "+\t\t\t\t\t\tif (expressionType.isCompatibleWith(IntBinding))", "+\t\t\t\t\t\t\tbreak checkType;", "+\t\t\t\t\t} else if (expressionType.isEnum()) {", "+\t\t\t\t\t\tisEnumSwitch = true;", "-\t\t\t\t\tif (expressionType.isCompatibleWith(IntBinding))", "+\t\t\t\t\t} else if (upperScope.isBoxingCompatibleWith(expressionType, IntBinding)) {", "+\t\t\t\t\t\texpression.computeConversion(upperScope, IntBinding, expressionType);", "-\t\t\t\t} else if (expressionType.isEnum()) {", "-\t\t\t\t\tisEnumSwitch = true;", "-\t\t\t\t\tbreak checkType;", "-\t\t\t\t} else if (upperScope.isBoxingCompatibleWith(expressionType, IntBinding)) {", "-\t\t\t\t\texpression.computeConversion(upperScope, IntBinding, expressionType);", "-\t\t\t\t\tbreak checkType;", "+\t\t\t\t\t}", "+\t\t\t\t\tupperScope.problemReporter().incorrectSwitchType(expression, expressionType);", "+\t\t\t\t\texpressionType = null; // fault-tolerance: ignore type mismatch from constants from hereon", "-\t\t\t\tupperScope.problemReporter().incorrectSwitchType(expression, expressionType);", "-\t\t\t\t// TODO (philippe) could keep analyzing switch statements in case of error", "-\t\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3991e001d41b499dda7ca9225959cfaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "557b942f819d62ffe9419db1ce92c3e011ea65a9", "commitAfterChange": "566dfe9d75afc609e513171bfa949df8ee32e8da", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic final void areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": "  \tpublic final void areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "diff": ["-\t\t// see specifications p.68", "+\t\t// see specifications 5.5", "-\t\t", "+", "+\t\t// identity conversion cannot be performed upfront, due to side-effects", "+\t\t// like constant propagation", "+\t\t\t\t", "-\t\t\t\tif (Scope.areTypesCompatible(expressionType, castType)", "+\t\t\t\tif (expressionType.isCompatibleWith(castType)", "-\t\tif (expressionType == NullBinding) ", "+\t\tif (expressionType == NullBinding) {", "+\t\t\t//\tif (castType.isArrayType()){ // 26903 - need checkcast when casting null to array type", "+\t\t\t//\t\tneedRuntimeCheckcast = true;", "+\t\t\t//\t}", "-", "+\t\t}", "+\t\t\tif (castType == expressionType) return; // identity conversion", "+", "-\t\t\t} else if (", "-\t\t\t\tcastType.isClass()) { // ----- (castType.isClass) expressionType.isClass ------", "-\t\t\t\tif (Scope.areTypesCompatible(expressionType, castType)){ // no runtime error", "+\t\t\t} else if (castType.isClass()) { // ----- (castType.isClass) expressionType.isClass ------", "+\t\t\t\tif (expressionType.isCompatibleWith(castType)){ // no runtime error", "-\t\t\t\tif (Scope.areTypesCompatible(castType, expressionType)) {", "+\t\t\t\tif (castType.isCompatibleWith(expressionType)) {", "-\t\t\t\t\tif (Scope.areTypesCompatible(expressionType, castType)) ", "+\t\t\t\t\tif (expressionType.isCompatibleWith(castType)) ", "-\t\t\t\tif (!Scope.areTypesCompatible(castType, expressionType)) {", "+\t\t\t\tif (!castType.isCompatibleWith(expressionType)) {", "-\t\t\tif (castType != expressionType", "-\t\t\t\t\t&& (Scope.compareTypes(castType, expressionType) == NotRelated)) {", "+\t\t\tif (castType == expressionType) return; // identity conversion", "+\t\t\tif (Scope.compareTypes(castType, expressionType) == NotRelated) {", "-\t\t\treturn;"]}], "num": 70393}
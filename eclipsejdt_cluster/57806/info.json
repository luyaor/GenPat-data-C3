{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "183f675598bd606adabc652ba9b4c7c5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b23be7c4eb249337470eebaaf378e71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized)", "signatureAfterChange": " ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames)", "diff": ["-", "-ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized) {", "+ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames) {", "-", "-\treturn getTypeFromCompoundName(compoundName, isParameterized);", "+\tboolean wasMissingType = false;", "+\tif (missingTypeNames != null) {", "+\t\tfor (int i = 0, max = missingTypeNames.length; i < max; i++) {", "+\t\t\tif (CharOperation.equals(compoundName, missingTypeNames[i])) {", "+\t\t\t\twasMissingType = true;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t}", "+\treturn getTypeFromCompoundName(compoundName, isParameterized, wasMissingType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c504c8b44e3fb3896839796a4e9d3d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "86284f2db6c7ac41b63c1766c9b7b3a016d95a9a", "commitAfterChange": "c8d8bdad35a9dc8d924116cabb6dd00986cff218", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["+\tif (castType.isIntersectionCastType()) {", "+\t\tReferenceBinding [] intersectingTypes = castType.getIntersectingTypes();", "+\t\tfor (int i = 0, length = intersectingTypes.length; i < length; i++) {", "+\t\t\tif (!checkCastTypesCompatibility(scope, intersectingTypes[i], expressionType, expression))", "+\t\t\t\treturn false;", "+\t\t}", "+\t\treturn true;", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4660509863c38e7a8946c9678535cc05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "b0ee678b65f48d1cfab35972dd53d6bd85389446", "commitAfterChange": "5a11933bf440021c4c92ce580c9967dadb549d6e", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public TypeBinding findSuperTypeOriginatingFrom(TypeBinding otherType)", "signatureAfterChange": " public TypeBinding findSuperTypeOriginatingFrom(TypeBinding otherType)", "diff": ["+\t\t\tbreak;", "+\t\tcase Binding.INTERSECTION_CAST_TYPE:", "+\t\t\tIntersectionCastTypeBinding ictb = (IntersectionCastTypeBinding) this;", "+\t\t\tReferenceBinding[] intersectingTypes = ictb.getIntersectingTypes();", "+\t\t\tfor (int i = 0, length = intersectingTypes.length; i < length; i++) {", "+\t\t\t\tTypeBinding superType = intersectingTypes[i].findSuperTypeOriginatingFrom(otherType);", "+\t\t\t\tif (superType != null)", "+\t\t\t\t\treturn superType;", "+\t\t\t}", "+\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c17d7906c91b3a7c29432440bd2255e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "6d8869e83e824d8000b96c2ed573e9ea9d8e9f2a", "commitAfterChange": "06dea349a5876369dde1ba5c7bc9bc2244a1f242", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  public void checkcast(TypeBinding typeBinding)", "signatureAfterChange": "  public void checkcast(TypeBinding typeBinding)", "diff": ["-\tthis.countLabels = 0;", "-\tif (this.classFileOffset + 2 >= this.bCodeStream.length) {", "-\t\tresizeByteArray();", "+\t/* We use a slightly sub-optimal generation for intersection casts by resorting to a runtime cast for every intersecting type, but in", "+\t   reality this should not matter. In its intended use form such as (I & Serializable) () -> {}, no cast is emitted at all", "+\t*/", "+\tTypeBinding [] types = typeBinding instanceof IntersectionCastTypeBinding ? typeBinding.getIntersectingTypes() : new TypeBinding [] { typeBinding };", "+\tfor (int i = types.length - 1; i >=0; i--) {", "+\t\tthis.countLabels = 0;", "+\t\tif (this.classFileOffset + 2 >= this.bCodeStream.length) {", "+\t\t\tresizeByteArray();", "+\t\t}", "+\t\tthis.position++;", "+\t\tthis.bCodeStream[this.classFileOffset++] = Opcodes.OPC_checkcast;", "+\t\twriteUnsignedShort(this.constantPool.literalIndexForType(types[i]));", "-\tthis.position++;", "-\tthis.bCodeStream[this.classFileOffset++] = Opcodes.OPC_checkcast;", "-\twriteUnsignedShort(this.constantPool.literalIndexForType(typeBinding));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc07f9f870a966775c1a43e06ad19662", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "6cea394a74122bc3b2f5fee1a70c7921f0e635d8", "commitAfterChange": "c0d8ddbb4b72e166c7dc81eb807bc47fd1beaa74", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate int getTypeArguments(ParameterizedQualifiedTypeReference typeReference)", "signatureAfterChange": " \tprivate int getTypeCount(ParameterizedQualifiedTypeReference typeReference)", "diff": ["-\tprivate int getTypeArguments(ParameterizedQualifiedTypeReference typeReference) {", "+\tprivate int getTypeCount(ParameterizedQualifiedTypeReference typeReference) {", "-\t\tfor (int i = 0, max = typeArguments.length; i < max; i++) {", "-\t\t\tif ((typeArguments[i] != null) || (value != 0)) {", "+\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[][] typeAnnotations = typeReference.annotations;", "+\t\tint length = typeReference.tokens.length;\t", "+\t\tfor (int i = 0; i < length; ++i) {", "+\t\t\tif (value != 0 || (typeArguments != null && typeArguments[i] != null) ||", "+\t\t\t\t(typeAnnotations != null && typeAnnotations[i] != null )) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de2c5d8a9f82a835d9e92443e7e3b7e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "e560c4f056e8f81d7e6811700478b4a331f39a81", "commitAfterChange": "82fb6745d0f2bc2c9b5e4740da70b2e364d6955a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static void createProblemType( \t\tTypeDeclaration typeDeclaration, \t\tCompilationResult unitResult)", "signatureAfterChange": " \tpublic static void createProblemType( \t\tTypeDeclaration typeDeclaration, \t\tCompilationResult unitResult)", "diff": ["+\t\tif (typeBinding.hasMemberTypes()) {", "+\t\t\t// see bug 180109", "+\t\t\tReferenceBinding[] members = typeBinding.memberTypes;", "+\t\t\tfor (int i = 0, l = members.length; i < l; i++)", "+\t\t\t\tclassFile.recordInnerClasses(members[i]);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edbf69ca8cb4d490cb84ac8e79cab6a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "146009e38675deb85b2aa23f66e92f2f13172cf7", "commitAfterChange": "08b9d40dde0b005b87b207f8d02b5899cde7b397", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["-", "+\t\tcase Binding.INTERSECTION_CAST_TYPE:", "+\t\t\tReferenceBinding [] intersectingTypes = expressionType.getIntersectingTypes();", "+\t\t\tfor (int i = 0, length = intersectingTypes.length; i < length; i++) {", "+\t\t\t\tif (checkCastTypesCompatibility(scope, castType, intersectingTypes[i], expression))", "+\t\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef969b50893be8dad6a2f7a180e6b8b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java", "commitBeforeChange": "4582114353aa3904268b70cdd42dc3781becfb01", "commitAfterChange": "7b316625d96d66e552d608c4488c77581168d213", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static boolean isMatch(char[] pattern, char[] word, int matchRule)", "signatureAfterChange": "  public static boolean isMatch(char[] pattern, char[] word, int matchRule)", "diff": ["+\tif (pattern.length == 0) return matchRule != SearchPattern.R_EXACT_MATCH;", "+\tif (word.length == 0) return (matchRule & SearchPattern.R_PATTERN_MATCH) != 0 && pattern.length == 1 && pattern[0] == '*';"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdf5609ca2f4965b542ccf60be7c0d7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "6376828719de1b35fb16828dd60ac530e949608a", "commitAfterChange": "2a2667223f1903b9c183c60ab8e7003c7b66502a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public BinaryTypeBinding(PackageBinding packageBinding, IBinaryType binaryType, LookupEnvironment environment)", "signatureAfterChange": "   public BinaryTypeBinding(PackageBinding packageBinding, IBinaryType binaryType, LookupEnvironment environment)", "diff": ["-\tthis.typeVariables = NoTypeVariables;", "+", "+\tchar[] typeSignature = environment.options.sourceLevel >= ClassFileConstants.JDK1_5 ? binaryType.getGenericSignature() : null;", "+\tthis.typeVariables = typeSignature != null && typeSignature.length > 0 && typeSignature[0] == '<'", "+\t\t? null // is initialized in cachePartsFrom (called from LookupEnvironment.createBinaryTypeFrom())... must set to null so isGenericType() answers true", "+\t\t: NoTypeVariables;"]}], "num": 57806}
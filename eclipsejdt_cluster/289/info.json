{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a1c4d217613a92a1ac742ab1ca63103", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "426fd9429883cde985d30aff402984e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFlattener.java", "commitBeforeChange": "28a0f94188bd26e1014d346f5919c1c6d87c7904", "commitAfterChange": "8a2a28b44267beff0fdfbe7d6582425d224ea02d", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic boolean visit(MethodDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(LambdaExpression node)", "diff": ["+\t */", "+\tpublic boolean visit(LambdaExpression node) {", "+\t\tboolean hasParentheses = getBooleanAttribute(node, LambdaExpression.PARENTHESES_PROPERTY);", "+\t\tif (!hasParentheses) {", "+\t\t\tList parameters = getChildList(node, LambdaExpression.PARAMETERS_PROPERTY);", "+\t\t\thasParentheses = !(parameters.size() == 1 && parameters.get(0) instanceof VariableDeclarationFragment);", "+\t\t}", "+", "+\t\tif (hasParentheses)", "+\t\t\tthis.result.append('(');", "+\t\tvisitList(node, LambdaExpression.PARAMETERS_PROPERTY, String.valueOf(','));", "+\t\tif (hasParentheses)", "+\t\t\tthis.result.append(')');", "+\t\tthis.result.append(\"->\"); //$NON-NLS-1$", "+\t\tgetChildNode(node, LambdaExpression.BODY_PROPERTY).accept(this);", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3d3a6eb384c54540e0037526e4f9e27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "3c7abdea60e3dea7a9b2b822e92d260aea9179a7", "commitAfterChange": "85d82ef92c86e257cfcb71c0ec95b6b64432a5cb", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic boolean visit(IfStatement node)", "signatureAfterChange": " \tpublic boolean visit(LambdaExpression node)", "diff": ["+\t */", "+\tpublic boolean visit(LambdaExpression node) {", "+\t\tboolean hasParentheses = node.hasParentheses();", "+\t\tif (hasParentheses)", "+\t\t\tthis.buffer.append('(');", "+\t\tIterator it = node.parameters().iterator();", "+\t\tboolean hasNext = it.hasNext();", "+\t\twhile (hasNext) {", "+\t\t\tVariableDeclaration  variableDeclaration = (VariableDeclaration) it.next();", "+\t\t\tvariableDeclaration.accept(this);", "+\t\t\tif ((hasNext = it.hasNext()) == true)", "+\t\t\t\tthis.buffer.append(',');", "+\t\t}", "+\t\tif (hasParentheses) ", "+\t\t\tthis.buffer.append(')');\t", "+\t\tthis.buffer.append(\" -> \"); //$NON-NLS-1$", "+\t\tnode.getBody().accept(this);", "+\t\treturn false;", "+\t}"]}], "num": 289}
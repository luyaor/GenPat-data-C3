{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54d425e1b96b304c9822d6b72d186380", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15465f77d492838f2e135393166929e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic MethodBinding getConstructor(ReferenceBinding receiverType, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": "  \tpublic MethodBinding getConstructor(ReferenceBinding receiverType, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\tif (methodBinding != null && methodBinding.canBeSeenBy(invocationSite, this))", "+\t\t\tif (methodBinding != null && methodBinding.canBeSeenBy(invocationSite, this)) {", "+\t\t\t    // targeting a non generic constructor with type arguments ?", "+\t\t\t    if (invocationSite.genericTypeArguments() != null)", "+\t\t\t    \tmethodBinding = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);\t\t\t\t", "+\t\t\t}", "-\t\t\tfor (int i = 0, length = methods.length; i < length; i++)", "-\t\t\t\tif (areParametersAssignable(methods[i].parameters, argumentTypes))", "-\t\t\t\t\tcompatible[compatibleIndex++] = methods[i];", "-\t\t\tif (compatibleIndex == 0)", "-\t\t\t\treturn new ProblemMethodBinding(", "-\t\t\t\t\tConstructorDeclaration.ConstantPoolName,", "-\t\t\t\t\targumentTypes,", "-\t\t\t\t\tNotFound);", "+\t\t\tMethodBinding problemMethod = null;", "+\t\t\tfor (int i = 0, length = methods.length; i < length; i++) {", "+\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methods[i], argumentTypes, invocationSite);", "+\t\t\t\tif (compatibleMethod != null) {", "+\t\t\t\t\tif (compatibleMethod.isValidBinding())", "+\t\t\t\t\t\tcompatible[compatibleIndex++] = compatibleMethod;", "+\t\t\t\t\telse if (problemMethod == null)", "+\t\t\t\t\t\tproblemMethod = compatibleMethod;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (compatibleIndex == 0) {", "+\t\t\t\tif (problemMethod == null)", "+\t\t\t\t\treturn new ProblemMethodBinding(ConstructorDeclaration.ConstantPoolName, argumentTypes, NotFound);", "+\t\t\t\treturn problemMethod;", "+\t\t\t}", "-\t\t\treturn mostSpecificClassMethodBinding(visible, visibleIndex);", "+\t\t\treturn mostSpecificClassMethodBinding(visible, visibleIndex, invocationSite);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "392c3792aebf623cd7eac652a693ab38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "59140085e82a007301fe719ac3a015cad7f7cf84", "commitAfterChange": "848c4ddf1895eb24711ea8c54b1168746cb07972", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic MethodBinding getConstructor( \t\tReferenceBinding receiverType, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic boolean isBlockScope()", "diff": ["-\t */", "-\tpublic MethodBinding getConstructor(", "-\t\tReferenceBinding receiverType,", "-\t\tTypeBinding[] argumentTypes,", "-\t\tInvocationSite invocationSite) {", "-", "-\t\tcompilationUnitScope().recordTypeReference(receiverType);", "-\t\tcompilationUnitScope().recordTypeReferences(argumentTypes);", "-\t\tMethodBinding methodBinding = receiverType.getExactConstructor(argumentTypes);", "-\t\tif (methodBinding != null) {", "-\t\t\tif (methodBinding.canBeSeenBy(invocationSite, this))", "-\t\t\t\treturn methodBinding;", "-\t\t}", "-\t\tMethodBinding[] methods =", "-\t\t\treceiverType.getMethods(ConstructorDeclaration.ConstantPoolName);", "-\t\tif (methods == NoMethods) {", "-\t\t\treturn new ProblemMethodBinding(", "-\t\t\t\tConstructorDeclaration.ConstantPoolName,", "-\t\t\t\targumentTypes,", "-\t\t\t\tNotFound);", "-\t\t}", "-\t\tMethodBinding[] compatible = new MethodBinding[methods.length];", "-\t\tint compatibleIndex = 0;", "-\t\tfor (int i = 0, length = methods.length; i < length; i++)", "-\t\t\tif (areParametersAssignable(methods[i].parameters, argumentTypes))", "-\t\t\t\tcompatible[compatibleIndex++] = methods[i];", "-\t\tif (compatibleIndex == 0)", "-\t\t\treturn new ProblemMethodBinding(", "-\t\t\t\tConstructorDeclaration.ConstantPoolName,", "-\t\t\t\targumentTypes,", "-\t\t\t\tNotFound);", "-\t\t// need a more descriptive error... cannot convert from X to Y", "-", "-\t\tMethodBinding[] visible = new MethodBinding[compatibleIndex];", "-\t\tint visibleIndex = 0;", "-\t\tfor (int i = 0; i < compatibleIndex; i++) {", "-\t\t\tMethodBinding method = compatible[i];", "-\t\t\tif (method.canBeSeenBy(invocationSite, this))", "-\t\t\t\tvisible[visibleIndex++] = method;", "-\t\t}", "-\t\tif (visibleIndex == 1)", "-\t\t\treturn visible[0];", "-\t\tif (visibleIndex == 0)", "-\t\t\treturn new ProblemMethodBinding(", "-\t\t\t\tcompatible[0],", "-\t\t\t\tConstructorDeclaration.ConstantPoolName,", "-\t\t\t\tcompatible[0].parameters,", "-\t\t\t\tNotVisible);", "-\t\treturn mostSpecificClassMethodBinding(visible, visibleIndex);", "-\t}", "+\t */", "+\tpublic boolean isBlockScope() {", "+\t\treturn true;", "+\t}"]}], "num": 69942}
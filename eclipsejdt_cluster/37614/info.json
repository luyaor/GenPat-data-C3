{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e883495eecc06681e0b93ceca23b4174", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7128eba11a4cb886182027ad09f07a98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "af652d9d40e3e30a14ccbd2056144782592afc53", "commitAfterChange": "3dca78ae937ad139f018c4ddaaa87c3fe26600ed", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tpublic boolean tIsMoreSpecific(TypeBinding t, TypeBinding s)", "signatureAfterChange": " \t \tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t)", "diff": ["-\tpublic boolean tIsMoreSpecific(TypeBinding t, TypeBinding s) {", "+\tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t) {", "-\t\t\t\tthis.valueIfTrue.tIsMoreSpecific(t, s) && this.valueIfFalse.tIsMoreSpecific(t, s):", "-\t\t\t\tsuper.tIsMoreSpecific(t, s);", "+\t\t\t\tthis.valueIfTrue.sIsMoreSpecific(s, t) && this.valueIfFalse.sIsMoreSpecific(s, t):", "+\t\t\t\tsuper.sIsMoreSpecific(s, t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efafed0a7da0689b35e0c2121540b848", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "003491686c72056382b17a1410bd6c4b2d79bf5e", "commitAfterChange": "4d06a4f56325db8a10e4906ef01b4abfaea21af7", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\t\t\t\tnext:", "-\t\t\t\t\tfor (int j = 0; j < visibleSize; j++) {", "-\t\t\t\t\t\tfinal TypeBinding[] mbjParameters = visible[j].parameters;", "-\t\t\t\t\t\tfinal int mbjParametersLength = mbjParameters.length;", "-\t\t\t\t\t\tTypeBinding t = i < mbjParametersLength ? mbjParameters[i] : mbjParameters[mbjParametersLength - 1];", "-\t\t\t\t\t\tboolean tIsMoreSpecific = false;", "-\t\t\t\t\t\tfor (int k = 0; k < visibleSize; k++) {", "-\t\t\t\t\t\t\tif (j == k) continue;", "-\t\t\t\t\t\t\tfinal TypeBinding[] mbkParameters = visible[k].parameters;", "-\t\t\t\t\t\t\tfinal int mbkParametersLength = mbkParameters.length;", "-\t\t\t\t\t\t\tTypeBinding s = i < mbkParametersLength ? mbkParameters[i] : mbkParameters[mbkParametersLength - 1];", "-\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(t, s))", "-\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\tif (!argumentType.sIsMoreSpecific(t,s)) ", "-\t\t\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t\t\ttIsMoreSpecific = true;", "+\t\t\t\t", "+\t\t\t\tfor (int j = 0; j < visibleSize; j++) {", "+\t\t\t\t\tfinal TypeBinding[] mbjParameters = visible[j].parameters;", "+\t\t\t\t\tfinal int mbjParametersLength = mbjParameters.length;", "+\t\t\t\t\tTypeBinding s = i < mbjParametersLength ? mbjParameters[i] : mbjParameters[mbjParametersLength - 1];", "+\t\t\t\t\tboolean sIsMoreSpecific = true;", "+\t\t\t\t\tfor (int k = 0; k < visibleSize; k++) {", "+\t\t\t\t\t\tif (j == k) continue;", "+\t\t\t\t\t\tfinal TypeBinding[] mbkParameters = visible[k].parameters;", "+\t\t\t\t\t\tfinal int mbkParametersLength = mbkParameters.length;", "+\t\t\t\t\t\tTypeBinding t = i < mbkParametersLength ? mbkParameters[i] : mbkParameters[mbkParametersLength - 1];", "+\t\t\t\t\t\tif (TypeBinding.equalsEquals(s, t))", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tif (!argumentType.sIsMoreSpecific(s,t)) { ", "+\t\t\t\t\t\t\tsIsMoreSpecific = false;", "+\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tif (tIsMoreSpecific)", "-\t\t\t\t\t\t\tmoreSpecific[count++] = visible[j];", "+\t\t\t\t\tif (sIsMoreSpecific)", "+\t\t\t\t\t\tmoreSpecific[count++] = visible[j];", "+\t\t\t\t}"]}], "num": 37614}
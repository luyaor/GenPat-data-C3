{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6eb4bbdf44ad8c73ba3881cb6b79931d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8955a1214c1f2a705d5a922a3e2b3cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/old/CodeFormatter.java", "commitBeforeChange": "9732313dc2a96c40c1dcb07b3005257940924d1e", "commitAfterChange": "4f033227ea2ad83f24b29ebc3efd698a3b482dc9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic String format(String string, int indentLevel, int[] positions, String lineSeparator)", "signatureAfterChange": " \t \tpublic String format(String string, int indentLevel, int[] positions, String lineSeparator)", "diff": ["-\t\tif (JavaCore.INSERT.equals(this.options.get(JavaCore.FORMATTER_NEWLINE_OPENING_BRACE))) {", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ANONYMOUS_TYPE_DECLARATION, DefaultCodeFormatterConstants.NEXT_LINE);", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_BLOCK, DefaultCodeFormatterConstants.NEXT_LINE);", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_CONSTRUCTOR_DECLARATION, DefaultCodeFormatterConstants.NEXT_LINE);", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_METHOD_DECLARATION, DefaultCodeFormatterConstants.NEXT_LINE);", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_SWITCH, DefaultCodeFormatterConstants.NEXT_LINE);", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_TYPE_DECLARATION, DefaultCodeFormatterConstants.NEXT_LINE);", "-\t\t} else {", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ANONYMOUS_TYPE_DECLARATION, DefaultCodeFormatterConstants.END_OF_LINE);", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_BLOCK, DefaultCodeFormatterConstants.END_OF_LINE);", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_CONSTRUCTOR_DECLARATION, DefaultCodeFormatterConstants.END_OF_LINE);", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_METHOD_DECLARATION, DefaultCodeFormatterConstants.END_OF_LINE);", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_SWITCH, DefaultCodeFormatterConstants.END_OF_LINE);", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_TYPE_DECLARATION, DefaultCodeFormatterConstants.END_OF_LINE);", "+\t\tObject formatterNewLineOpeningBrace = this.options.get(JavaCore.FORMATTER_NEWLINE_OPENING_BRACE);", "+\t\tif (formatterNewLineOpeningBrace != null) {", "+\t\t\tif (JavaCore.INSERT.equals(formatterNewLineOpeningBrace)) {", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ANONYMOUS_TYPE_DECLARATION, DefaultCodeFormatterConstants.NEXT_LINE);", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_BLOCK, DefaultCodeFormatterConstants.NEXT_LINE);", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_CONSTRUCTOR_DECLARATION, DefaultCodeFormatterConstants.NEXT_LINE);", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_METHOD_DECLARATION, DefaultCodeFormatterConstants.NEXT_LINE);", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_SWITCH, DefaultCodeFormatterConstants.NEXT_LINE);", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_TYPE_DECLARATION, DefaultCodeFormatterConstants.NEXT_LINE);", "+\t\t\t} else {", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ANONYMOUS_TYPE_DECLARATION, DefaultCodeFormatterConstants.END_OF_LINE);", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_BLOCK, DefaultCodeFormatterConstants.END_OF_LINE);", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_CONSTRUCTOR_DECLARATION, DefaultCodeFormatterConstants.END_OF_LINE);", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_METHOD_DECLARATION, DefaultCodeFormatterConstants.END_OF_LINE);", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_SWITCH, DefaultCodeFormatterConstants.END_OF_LINE);", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_TYPE_DECLARATION, DefaultCodeFormatterConstants.END_OF_LINE);", "+\t\t\t}", "-\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ARRAY_INITIALIZER, DefaultCodeFormatterConstants.END_OF_LINE);", "-\t\tif (JavaCore.INSERT.equals(this.options.get(JavaCore.FORMATTER_NEWLINE_CONTROL))) {", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_CONTROL_STATEMENTS, JavaCore.INSERT);", "-\t\t} else {", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_CONTROL_STATEMENTS, JavaCore.DO_NOT_INSERT);", "+\t\tObject formatterNewLineControl = this.options.get(JavaCore.FORMATTER_NEWLINE_CONTROL);", "+\t\tif (formatterNewLineControl != null) {", "+\t\t\tif (JavaCore.INSERT.equals(formatterNewLineControl)) {", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_CONTROL_STATEMENTS, JavaCore.INSERT);", "+\t\t\t} else {", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_CONTROL_STATEMENTS, JavaCore.DO_NOT_INSERT);", "+\t\t\t}", "-\t\t\t", "-\t\tif (JavaCore.PRESERVE_ONE.equals(this.options.get(JavaCore.FORMATTER_CLEAR_BLANK_LINES))) {", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_EMPTY_LINES_TO_PRESERVE, \"1\"); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_EMPTY_LINES_TO_PRESERVE, \"0\"); //$NON-NLS-1$", "+\t\tObject formatterClearBlankLines = this.options.get(JavaCore.FORMATTER_CLEAR_BLANK_LINES);", "+\t\tif (formatterClearBlankLines != null) {", "+\t\t\tif (JavaCore.PRESERVE_ONE.equals(formatterClearBlankLines)) {", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_EMPTY_LINES_TO_PRESERVE, \"1\"); //$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_EMPTY_LINES_TO_PRESERVE, \"0\"); //$NON-NLS-1$", "+\t\t\t}", "-\t\tif (JavaCore.INSERT.equals(this.options.get(JavaCore.FORMATTER_NEWLINE_ELSE_IF))) {", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_COMPACT_ELSE_IF, DefaultCodeFormatterConstants.FALSE);", "-\t\t} else {", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_COMPACT_ELSE_IF, DefaultCodeFormatterConstants.TRUE);", "+\t\tObject formatterNewLineElseIf = this.options.get(JavaCore.FORMATTER_NEWLINE_ELSE_IF);", "+\t\tif (formatterNewLineElseIf != null) {", "+\t\t\tif (JavaCore.INSERT.equals(formatterNewLineElseIf)) {", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_COMPACT_ELSE_IF, DefaultCodeFormatterConstants.FALSE);", "+\t\t\t} else {", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_COMPACT_ELSE_IF, DefaultCodeFormatterConstants.TRUE);", "+\t\t\t}", "-\t\tif (JavaCore.INSERT.equals(this.options.get(JavaCore.FORMATTER_NEWLINE_EMPTY_BLOCK))) {", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_BLOCK, JavaCore.INSERT);", "-\t\t} else {", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_BLOCK, JavaCore.DO_NOT_INSERT);", "+\t\tObject formatterNewLineEmptyBlock = this.options.get(JavaCore.FORMATTER_NEWLINE_EMPTY_BLOCK);", "+\t\tif (formatterNewLineEmptyBlock != null) {", "+\t\t\tif (JavaCore.INSERT.equals(formatterNewLineEmptyBlock)) {", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_BLOCK, JavaCore.INSERT);", "+\t\t\t} else {", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_BLOCK, JavaCore.DO_NOT_INSERT);", "+\t\t\t}", "-\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_LINE_SPLIT, this.options.get(JavaCore.FORMATTER_LINE_SPLIT));", "-\t\tif (JavaCore.COMPACT.equals(this.options.get(JavaCore.FORMATTER_COMPACT_ASSIGNMENT))) {", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ASSIGNMENT_OPERATOR, JavaCore.DO_NOT_INSERT);", "-\t\t} else {", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ASSIGNMENT_OPERATOR, JavaCore.INSERT);", "+\t\tObject formatterCompactAssignment = this.options.get(JavaCore.FORMATTER_COMPACT_ASSIGNMENT);", "+\t\tif (formatterCompactAssignment != null) {", "+\t\t\tif (JavaCore.COMPACT.equals(formatterCompactAssignment)) {", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ASSIGNMENT_OPERATOR, JavaCore.DO_NOT_INSERT);", "+\t\t\t} else {", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ASSIGNMENT_OPERATOR, JavaCore.INSERT);", "+\t\t\t}", "+\t\t}", "+\t\tif (this.options.get(JavaCore.FORMATTER_SPACE_CASTEXPRESSION) != null) {", "+\t\t\tif (JavaCore.INSERT.equals(this.options.get(JavaCore.FORMATTER_SPACE_CASTEXPRESSION))) {", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_CLOSING_PAREN_IN_CAST, JavaCore.INSERT);", "+\t\t\t} else {", "+\t\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_CLOSING_PAREN_IN_CAST, JavaCore.DO_NOT_INSERT);", "+\t\t\t}", "-\t\tif (JavaCore.INSERT.equals(this.options.get(JavaCore.FORMATTER_SPACE_CASTEXPRESSION))) {", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_CLOSING_PAREN_IN_CAST, JavaCore.INSERT);", "-\t\t} else {", "-\t\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_CLOSING_PAREN_IN_CAST, JavaCore.DO_NOT_INSERT);", "-\t\t}", "-", "+\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_LINE_SPLIT, this.options.get(JavaCore.FORMATTER_LINE_SPLIT));", "+\t\tnewOptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ARRAY_INITIALIZER, DefaultCodeFormatterConstants.END_OF_LINE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb183dccbc6969d155d1f99b98d2c932", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "2d0b70991183be97a67695fa28c23b0cb3fbbdbf", "commitAfterChange": "4daf5798806511c91f97f95283d45690e7f165fa", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "signatureAfterChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "diff": ["-", "+\t", "-", "+\t", "-", "+\t", "-", "+\t", "-", "+\t", "-", "+\t", "-", "+\t", "-", "+\t", "+\t\t\tint remainingAttributesLength = length;", "+\t\t\tif (innerClassesAttribute != null) {", "+\t\t\t\tremainingAttributesLength--;", "+\t\t\t}", "+\t\t\tif (enclosingMethodAttribute != null) {", "+\t\t\t\tremainingAttributesLength--;", "+\t\t\t}", "+\t\t\tif (sourceAttribute != null) {", "+\t\t\t\tremainingAttributesLength--;", "+\t\t\t}", "+\t\t\tif (signatureAttribute != null) {", "+\t\t\t\tremainingAttributesLength--;", "+\t\t\t}", "+\t\t\tif (bootstrapMethods != null) {", "+\t\t\t\tremainingAttributesLength--;", "+\t\t\t}", "+\t\t\tif (innerClassesAttribute != null", "+\t\t\t\t\t|| enclosingMethodAttribute != null", "+\t\t\t\t\t|| bootstrapMethods != null", "+\t\t\t\t\t|| remainingAttributesLength != 0) {", "+\t\t\t\t// this test is to ensure we don't insert more than one line separator", "+\t\t\t\tif (buffer.lastIndexOf(lineSeparator) != buffer.length() - lineSeparator.length()) {", "+\t\t\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 38928}
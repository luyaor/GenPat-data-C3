{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c557b4ce5e3162a21e8c6b6e1af545f", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23b5df8b7d6f230818496642d3b66f81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java", "commitBeforeChange": "ad2281f1520933e65d479408c685e1055d82a8b2", "commitAfterChange": "90329a8061aecf116ef817e3a00ea13f48a88e85", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t@Override \tpublic PrimitiveType unboxedType(TypeMirror t)", "signatureAfterChange": "  \t@Override \tpublic PrimitiveType unboxedType(TypeMirror t)", "diff": ["-\t */", "-\t\t// TODO Auto-generated method stub", "-\t\treturn null;", "+\t\tif (!(((TypeMirrorImpl)t)._binding instanceof ReferenceBinding)) {", "+\t\t\t// Not an unboxable type - could be primitive, array, not a type at all, etc.", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tReferenceBinding boxed = (ReferenceBinding)((TypeMirrorImpl)t)._binding;", "+\t\tTypeBinding unboxed = _env.getLookupEnvironment().computeBoxingType(boxed);", "+\t\tif (unboxed.kind() != Binding.BASE_TYPE) {", "+\t\t\t// No boxing conversion was found", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\treturn Factory.getPrimitiveType((BaseTypeBinding)unboxed);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3e7d37f156ced93e46b9133217a3c03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java", "commitBeforeChange": "ad2281f1520933e65d479408c685e1055d82a8b2", "commitAfterChange": "90329a8061aecf116ef817e3a00ea13f48a88e85", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t@Override \tpublic boolean isSubtype(TypeMirror t1, TypeMirror t2)", "signatureAfterChange": " \t@Override \tpublic boolean isSubtype(TypeMirror t1, TypeMirror t2)", "diff": ["-\t\t// TODO Auto-generated method stub", "-\t\treturn false;", "+\t\tif (!(t1 instanceof TypeMirrorImpl) || !(t2 instanceof TypeMirrorImpl)) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tif (t1 == t2) {", "+\t\t\treturn true;", "+\t\t}", "+\t\tBinding b1 = ((TypeMirrorImpl)t1).binding();", "+\t\tBinding b2 = ((TypeMirrorImpl)t2).binding();", "+\t\tif (b1 == b2) {", "+\t\t\treturn true;", "+\t\t}", "+\t\tif (!(b1 instanceof TypeBinding) || !(b2 instanceof TypeBinding)) {", "+\t\t\t// package, method, import, etc.", "+\t\t\treturn false;", "+\t\t}", "+\t\tif (b1.kind() == Binding.BASE_TYPE || b2.kind() == Binding.BASE_TYPE) {", "+\t\t\tif (b1.kind() != b2.kind()) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\telse {", "+\t\t\t\t// for primitives, compatibility implies subtype", "+\t\t\t\treturn ((TypeBinding)b1).isCompatibleWith((TypeBinding)b2);", "+\t\t\t}", "+\t\t}", "+\t\t// TODO: array types and reference types", "+\t\tthrow new UnsupportedOperationException(\"NYI\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfb5b9b3fad08a89b757c209c5999c76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java", "commitBeforeChange": "ad2281f1520933e65d479408c685e1055d82a8b2", "commitAfterChange": "90329a8061aecf116ef817e3a00ea13f48a88e85", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t@Override \tpublic boolean isAssignable(TypeMirror t1, TypeMirror t2)", "signatureAfterChange": " \t@Override \tpublic boolean isAssignable(TypeMirror t1, TypeMirror t2)", "diff": ["-\t\t// TODO Auto-generated method stub", "-\t\treturn false;", "+\t\tif (!(t1 instanceof TypeMirrorImpl) || !(t2 instanceof TypeMirrorImpl)) {", "+\t\t\treturn false; ", "+\t\t}", "+\t\tBinding b1 = ((TypeMirrorImpl)t1).binding();", "+\t\tBinding b2 = ((TypeMirrorImpl)t2).binding();", "+\t\tif (!(b1 instanceof TypeBinding) || !(b2 instanceof TypeBinding)) {", "+\t\t\t// package, method, import, etc.", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\treturn ((TypeBinding)b1).isCompatibleWith((TypeBinding)b2);"]}], "num": 15096}
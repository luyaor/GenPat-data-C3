{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00fcf622d52e90dfdd43ff56a3f2fcea", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0c42ff65a8f3584e663f75f8907cb7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "ff631898e70c231ca3f430b6da5ddffa76a39046", "commitAfterChange": "7761d564c309e9bb972f365080b377af9fa0d4c2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (valueIfTrueType.isBaseType()) {", "+\t\t\tTypeBinding unboxedLeftType = valueIfTrueType.isBaseType() ? valueIfTrueType : env.computeBoxingType(valueIfTrueType);", "+\t\t\tTypeBinding unboxedRightType = valueIfFalseType.isBaseType() ? valueIfFalseType : env.computeBoxingType(valueIfFalseType);", "+\t\t\tif (unboxedLeftType.isNumericType() && unboxedRightType.isNumericType()) {", "+\t\t\t\tvalueIfTrueType = unboxedLeftType;", "+\t\t\t\tvalueIfFalseType = unboxedRightType;", "+\t\t\t} else if (valueIfTrueType.isBaseType()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7613306f3e07cd493fec3404f25e5ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "9f6007a11f2d0f4bad899b1cbfaf9d942b43a451", "commitAfterChange": "b6ef8906908f58bf234a11b3c3bc9c9b1d585dcc", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["+\t\t\t\t\t\tif (levelj == VARARGS_COMPATIBLE && levelk == VARARGS_COMPATIBLE) {", "+\t\t\t\t\t\t\tTypeBinding s = InferenceContext18.getParameter(mbjParameters, argumentTypes.length, true);", "+\t\t\t\t\t\t\tTypeBinding t = InferenceContext18.getParameter(mbkParameters, argumentTypes.length, true);", "+\t\t\t\t\t\t\tif (TypeBinding.notEquals(s, t) && t.isSubtypeOf(s))", "+\t\t\t\t\t\t\t\tcontinue nextJ;", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb5f3b55640454c394b9d88632934b12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "332f2b4bbc61519d48f9e1634468f589fe6ec357", "commitAfterChange": "1dac44e6f5251febeac5322fb143c153ef780c6a", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Set invocations, List lubStack)", "signatureAfterChange": " \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Set invocations, List lubStack)", "diff": ["+", "+\t\t// if mec is an array type, intersect invocation leaf component types, then promote back to array", "+\t\tint dim = mec.dimensions();", "+\t\tmec = mec.leafComponentType();", "+\t\t", "-\t\t\tTypeBinding invocation = (TypeBinding)iter.next();", "+\t\t\tTypeBinding invocation = ((TypeBinding)iter.next()).leafComponentType();", "-\t\t\t\t\treturn invocation; // raw type is taking precedence", "+\t\t\t\t\treturn dim == 0 ? invocation : environment().createArrayType(invocation, dim); // raw type is taking precedence", "-\t\treturn environment().createParameterizedType((ReferenceBinding) mec.erasure(), bestArguments, mec.enclosingType());", "+\t\tTypeBinding least = environment().createParameterizedType((ReferenceBinding) mec.erasure(), bestArguments, mec.enclosingType());", "+\t\treturn dim == 0 ? least : environment().createArrayType(least, dim);"]}], "num": 66594}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c1eab38eb74f8150cba6a86ec788f59", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ba485fb92d0f8fcc112208dfdd8b819", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "\r \tpublic void reportReference(\r \t\tAstNode reference,\r \t\tTypeDeclaration typeDeclaration,\r \t\tFieldDeclaration fieldDeclaration,\r \t\tchar[][] definingTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r public void reportReference(\r \tAstNode reference,\r \tTypeDeclaration typeDeclaration,\r \tFieldDeclaration fieldDeclaration, \r \tchar[][] definingTypeNames, \r \tint accuracy) throws CoreException", "diff": ["+ */\r", "+public void reportReference(\r", "+\tAstNode reference,\r", "+\tTypeDeclaration typeDeclaration,\r", "+\tFieldDeclaration fieldDeclaration, \r", "+\tchar[][] definingTypeNames, \r", "+\tint accuracy) throws CoreException {\r", "+\tif (fieldDeclaration.isField()) {\r", "+\t\t// create defining field handle\r", "+\t\tIField field = this.createFieldHandle(fieldDeclaration, definingTypeNames);\r", "+\t\r", "+\t\tif (reference instanceof QualifiedNameReference || reference instanceof QualifiedTypeReference) {\r", "+\t\t\tthis.pattern.matchReportReference((AstNode)reference, field, accuracy, this);\r", "+\t\t} else if (reference instanceof MessageSend) { // message ref are starting at the selector start\r", "+\t\t\tthis.report((int)(((MessageSend)reference).nameSourcePosition >> 32), reference.sourceEnd, field, accuracy);\r", "+\t\t\tthis.report(reference.sourceStart, reference.sourceEnd, field, accuracy);\r", "+\t\t}\r", "+\t} else { // initializer\r", "+\t\t// create defining initializer\r", "+\t\tIInitializer initializer = this.createInitializerHandle(typeDeclaration, fieldDeclaration, definingTypeNames);\r", "+\t\t\r", "+\t\t// accept reference\r", "+\t\tif (reference instanceof QualifiedNameReference || reference instanceof QualifiedTypeReference) {\r", "+\t\t\tthis.pattern.matchReportReference((AstNode)reference, initializer, accuracy, this);\r", "+\t\t} else if (reference instanceof MessageSend) { // message ref are starting at the selector start\r", "+\t\t\tthis.report((int)(((MessageSend)reference).nameSourcePosition >> 32), reference.sourceEnd, initializer, accuracy);\r", "+\t\t} else {\r", "+\t\t\tthis.report(reference.sourceStart, reference.sourceEnd, initializer, accuracy);\r", "+}\r", "-\t */\r", "-\tpublic void reportReference(\r", "-\t\tAstNode reference,\r", "-\t\tTypeDeclaration typeDeclaration,\r", "-\t\tFieldDeclaration fieldDeclaration,\r", "-\t\tchar[][] definingTypeNames,\r", "-\t\tint accuracy)\r", "-\t\tthrows CoreException {\r", "-\t\tif (fieldDeclaration.isField()) {\r", "-\t\t\t// create defining field handle\r", "-\t\t\tIField field = this.createFieldHandle(fieldDeclaration, definingTypeNames);\r", "-\r", "-\t\t\t// accept reference\r", "-\t\t\tif (reference instanceof QualifiedNameReference\r", "-\t\t\t\t|| reference instanceof QualifiedTypeReference) {\r", "-\t\t\t\tthis.pattern.matchReportReference((AstNode) reference, field, accuracy, this);\r", "-\t\t\t} else {\r", "-\t\t\t\tthis.report(reference.sourceStart, reference.sourceEnd, field, accuracy);\r", "-\t\t\t}\r", "-\t\t} else { // initializer\r", "-\t\t\t// create defining initializer\r", "-\t\t\tIInitializer initializer =\r", "-\t\t\t\tthis.createInitializerHandle(\r", "-\t\t\t\t\ttypeDeclaration,\r", "-\t\t\t\t\tfieldDeclaration,\r", "-\t\t\t\t\tdefiningTypeNames);\r", "-\r", "-\t\t\t// accept reference\r", "-\t\t\tif (reference instanceof QualifiedNameReference\r", "-\t\t\t\t|| reference instanceof QualifiedTypeReference) {\r", "-\t\t\t\tthis.pattern.matchReportReference(\r", "-\t\t\t\t\t(AstNode) reference,\r", "-\t\t\t\t\tinitializer,\r", "-\t\t\t\t\taccuracy,\r", "-\t\t\t\t\tthis);\r", "-\t\t\t} else {\r", "-\t\t\t\tthis.report(reference.sourceStart, reference.sourceEnd, initializer, accuracy);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c9674093069103e0ee33f73211fb5c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "484bb49f20ab3dfdc1bd0aad8e6eff3ac06b3aff", "commitAfterChange": "cfd501694f5288c5b2d25d4e0376aabc070087d8", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["+\t\t\t\tif (methodDecl == null) {", "+\t\t\t\t\tmethodDecl = method.sourceMethod(); // cannot be retrieved after binding is lost & may still be null if method is special", "+\t\t\t\t\tif (methodDecl != null && methodDecl.binding != null) { // ensure its a valid user defined method", "+\t\t\t\t\t\tif (isEnumSpecialMethod)", "+\t\t\t\t\t\t\tthis.scope.problemReporter().duplicateEnumSpecialMethod(this, methodDecl);", "+\t\t\t\t\t\telse", "+\t\t\t\t\t\t\tthis.scope.problemReporter().duplicateMethodInType(this, methodDecl, method.areParametersEqual(method2));", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\t\tif (isEnumSpecialMethod) {", "+\t\t\t\t\tif (isEnumSpecialMethod)", "-\t\t\t\t\t} else {", "+\t\t\t\t\telse", "-\t\t\t\t\t}"]}], "num": 56570}
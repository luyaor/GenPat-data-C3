{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "967e5f3d12cf0a6093762deca0f2e7c4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05acae26066d8ca1ea980b0791394d5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "7757a5934fde86433c9c42221d6117d1b7f29e23", "commitAfterChange": "0bbfe267fb7eaaa77628088e8cdbd841ddb40de5", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic static Test suite(Class evaluationTestClass, String suiteName)", "signatureAfterChange": " \tpublic static Test suite(Class evaluationTestClass, String suiteName)", "diff": ["-\t\treturn suite(evaluationTestClass, suiteName, 3);", "-\t}", "+\t\t// Init suite with class name", "+\t\tList tests = new ArrayList();", "+\t\tConstructor constructor = null;", "+\t\t\t// Get class constructor", "+\t\t\tconstructor = evaluationTestClass.getConstructor(paramTypes);", "+\t\t}", "+\t\tcatch (Exception e) {", "+\t\t\t// cannot get constructor, skip suite", "+\t\t\treturn suite;", "+\t\t}", "+", "+\t\t// Get all tests from \"test%\" methods", "+\t\tMethod[] methods = evaluationTestClass.getMethods();", "+\t\tfor (int m = 0, max = methods.length; m < max; m++) {", "+\t\t\ttry {", "+\t\t\t\tif (methods[m].getModifiers() == 1 /* public */ &&", "+\t\t\t\t\tmethods[m].getName().startsWith(\"test\")) { //$NON-NLS-1$", "+\t\t\t\t\tString methName = methods[m].getName();", "+\t\t\t\t\tObject[] params = {methName};", "+\t\t\t\t\t// tests names subset", "+\t\t\t\t\tif (testsNames != null) {", "+\t\t\t\t\t\tfor (int i = 0, imax= testsNames.length; i<imax; i++) {", "+\t\t\t\t\t\t\tif (testsNames[i].equals(methName) || testsNames[i].equals(methName.substring(4))) {", "+\t\t\t\t\t\t\t\ttests.add(methName);", "+\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t// look for test number", "+\t\t\t\t\tif (methName.length()>4 && Character.isDigit(methName.charAt(4))) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t// get test number", "+\t\t\t\t\t\t\tint n = 4;", "+\t\t\t\t\t\t\twhile (methName.charAt(n) == '0') n++;", "+\t\t\t\t\t\t\tint num = Integer.parseInt(methName.substring(n));", "+\t\t\t\t\t\t\t// tests numbers subset", "+\t\t\t\t\t\t\tif (testsNumbers != null && !tests.contains(methName)) {", "+\t\t\t\t\t\t\t\tfor (int i = 0; i < testsNumbers.length; i++) {", "+\t\t\t\t\t\t\t\t\tif (testsNumbers[i] == num) {", "+\t\t\t\t\t\t\t\t\t\ttests.add(methName);", "+\t\t\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// tests range subset", "+\t\t\t\t\t\t\tif (testsRange != null && testsRange.length == 2 && !tests.contains(methName)) {", "+\t\t\t\t\t\t\t\tif ((testsRange[0]==-1 || num>=testsRange[0]) && (testsRange[1]==-1 || num<=testsRange[1])) {", "+\t\t\t\t\t\t\t\t\ttests.add(methName);", "+\t\t\t\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t\t\t\tSystem.out.println(\"Method \"+methods[m]+\" has an invalid number format: \"+e.getMessage());", "+\t\t\t\t\t// no subset, add all tests", "+\t\t\t\t\tif (testsNames==null && testsNumbers==null &&testsRange==null) {", "+\t\t\tcatch (Exception e) {", "+\t\t\t\tSystem.out.println(\"Method \"+methods[m]+\" removed from suite due to exception: \"+e.getMessage());", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2de706656c6a26e09efac9071c7b2dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "3c4337082bfd6cd03c12a697c9ff074574c40dcb", "commitAfterChange": "62673bfe33e35621438dc115dd9c632f8333785c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic static Test buildTestSuite(Class evaluationTestClass, String suiteName)", "signatureAfterChange": "  \tpublic static Test buildTestSuite(Class evaluationTestClass, String suiteName)", "diff": ["-\t\treturn buildTestSuite(evaluationTestClass, null, suiteName); //$NON-NLS-1$", "-\t}", "+\t\t\t\t\tif (testsPrefix == null && testsNames == null && testsNumbers == null && testsRange == null) {", "+\t\t\t\t\tif (testsPrefix == null || methName.startsWith(testsPrefix)) {", "+\t\t\t\t\t\tint numStart = testsPrefix==null ? 4 /* test */ : testsPrefix.length();"]}], "num": 8204}
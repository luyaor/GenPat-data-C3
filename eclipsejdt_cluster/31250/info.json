{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd2a4b6e0518152ed9dc28d777095e0b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4faba200109544e0acd73d07f731ccb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "3861d4cfff200f4a20f9b2846cf8819b2fe85539", "commitAfterChange": "1ab7b833f2e8fe1eaa17a4c72f8b9580f4ae1592", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected void matchReportImportRef(ImportReference importRef, Binding binding, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportImportRef(ImportReference importRef, Binding binding, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["+\t// return if this is not necessary to report", "+\tif (this.pattern.isParameterized() && !this.isEquivalentMatch &&!this.isErasureMatch) {", "+\t\treturn;", "+\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6213e54d179575cf3a132d1a594986e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "009f20126c1d3488d55fd03939439082cc2b8500", "commitAfterChange": "221d108d3944a4b3be482e01878be27efb774a39", "methodNumberBeforeChange": 417, "methodNumberAfterChange": 417, "signatureBeforeChange": " public void unsafeTypeConversion(Expression expression, TypeBinding expressionType, TypeBinding expectedType)", "signatureAfterChange": " public void unsafeTypeConversion(Expression expression, TypeBinding expressionType, TypeBinding expectedType)", "diff": ["+\tif (!this.options.reportUnavoidableGenericTypeProblems && expression.forcedToBeRaw(this.referenceContext)) {", "+\t\treturn;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f32259310b0bb5dc690822b142314505", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "203954a19427f44b197aa09593f6f49177e09606", "commitAfterChange": "3ed9acfe644f3aa92ee72abfaf147fb3ef3a87d3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " protected void matchReportImportRef(ImportReference importRef, Binding binding, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportImportRef(ImportReference importRef, Binding binding, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["+}", "-\t\tint lastIndex = importRef.tokens.length - 1;", "+\t\tint lastIndex = importRef.tokens.length - 1;", "+\t\tif (importRef.isStatic() && !importRef.onDemand && !typeBinding.isMemberType()) {", "+\t\t\t// for field static import, do not use last token", "+\t\t\tlastIndex--;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb7af1691ecfe424a899e037eea28a72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "649631b834e755f12bf40b9c916ce9dfc765a8d0", "commitAfterChange": "19a679a95bc1c8afc10cb50ce5a617f6914888ae", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tprivate void findMemberTypes( \t\tchar[] typeName, \t\tReferenceBinding[] memberTypes, \t\tObjectVector typesFound, \t\tReferenceBinding receiverType, \t\tSourceTypeBinding invocationType, \t\tboolean staticOnly, \t\tboolean staticFieldsAndMethodOnly, \t\tboolean fromStaticImport, \t\tboolean checkQualification, \t\tScope scope, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems)", "signatureAfterChange": " \tprivate void findMemberTypes( \t\tchar[] typeName, \t\tReferenceBinding[] memberTypes, \t\tObjectVector typesFound, \t\tReferenceBinding receiverType, \t\tSourceTypeBinding invocationType, \t\tboolean staticOnly, \t\tboolean staticFieldsAndMethodOnly, \t\tboolean fromStaticImport, \t\tboolean checkQualification, \t\tScope scope, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems)", "diff": ["+\t\t\t", "+\t\t\tif (this.insideQualifiedReference &&", "+\t\t\t\t\treceiverType.isParameterizedType() &&", "+\t\t\t\t\tmemberType.isStatic()) {", "+\t\t\t\tcontinue next;", "+\t\t\t}"]}], "num": 31250}
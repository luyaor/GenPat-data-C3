{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4de5a725c4bf74d894b8006553fcd71b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37e4757cac4a2837448f90d7b5a3a8ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementsImpl.java", "commitBeforeChange": "9221731a3d20320a45d9e6a6337379d8a431c366", "commitAfterChange": "a209bfa947ecc1f9f7050d0d851a03f725813152", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t@Override \tpublic String getConstantExpression(Object value)", "signatureAfterChange": " \t@Override \tpublic String getConstantExpression(Object value)", "diff": ["-\t\t\treturn String.valueOf(value)+'f';", "+\t\t\tStringBuilder builder = new StringBuilder();", "+\t\t\tbuilder.append(value).append('f');", "+\t\t\treturn String.valueOf(builder);", "-\t\t\treturn String.valueOf(value)+'L';", "+\t\t\tStringBuilder builder = new StringBuilder();", "+\t\t\tbuilder.append(value).append('L');", "+\t\t\treturn String.valueOf(builder);", "+\t\t} else if (value instanceof Short) {", "+\t\t\tStringBuilder builder = new StringBuilder();", "+\t\t\tbuilder.append(\"(short)\").append(value); //$NON-NLS-1$", "+\t\t\treturn String.valueOf(builder);", "+\t\t} else if (value instanceof Byte) {", "+\t\t\tStringBuilder builder = new StringBuilder();", "+\t\t\tbuilder.append(\"(byte)0x\"); //$NON-NLS-1$", "+\t\t\tint intValue = ((Byte) value).byteValue();", "+\t\t\tString hexString = Integer.toHexString(intValue & 0xFF);", "+\t\t\tif (hexString.length() < 2) {", "+\t\t\t\tbuilder.append('0');", "+\t\t\t}", "+\t\t\tbuilder.append(hexString);", "+\t\t\treturn String.valueOf(builder);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2a65dc0399c898db9a2845639e1e9d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 4, "signatureBeforeChange": " private static void buildFileForReadableName( \tString file, \tchar[] newLhs, \tchar[] newNonTerminalIndex, \tString[] newName, \tString[] tokens) throws java.io.IOException", "signatureAfterChange": " private static void buildFileForReadableName( \tString file, \tchar[] newLhs, \tchar[] newNonTerminalIndex, \tString[] newName, \tString[] tokens) throws java.io.IOException", "diff": ["-\tfor (int i = 0; i < tokens.length; i = i + 2) {", "-\t\tint index = newNonTerminalIndex[newLhs[Integer.parseInt(tokens[i])]];", "-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tif(!alreadyAdded[index]) {", "-\t\t\talreadyAdded[index] = true;", "-\t\t\tbuffer.append(newName[index]);", "-\t\t\tbuffer.append('=');", "-\t\t\tbuffer.append(tokens[i+1].trim());", "-\t\t\tbuffer.append('\\n');", "-\t\t\tentries.add(String.valueOf(buffer));", "+\tfor (int i = 0; i < tokens.length; i = i + 3) {", "+\t\tif(\"1\".equals(tokens[i])) { //$NON-NLS-1$", "+\t\t\tint index = newNonTerminalIndex[newLhs[Integer.parseInt(tokens[i + 1])]];", "+\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\tif(!alreadyAdded[index]) {", "+\t\t\t\talreadyAdded[index] = true;", "+\t\t\t\tbuffer.append(newName[index]);", "+\t\t\t\tbuffer.append('=');", "+\t\t\t\tbuffer.append(tokens[i+2].trim());", "+\t\t\t\tbuffer.append('\\n');", "+\t\t\t\tentries.add(String.valueOf(buffer));", "+\t\t\t}"]}], "num": 57406}
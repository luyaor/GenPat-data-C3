{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5cb089a489deef62b650af8787b139a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af249074890e4b477a23fac8c50513b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodDeclarationPattern.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r protected boolean matches(AstNode node, boolean resolve)", "signatureAfterChange": "\r public int matchLevel(AstNode node, boolean resolve)", "diff": ["- */\r", "-protected boolean matches(AstNode node, boolean resolve) {\r", "-\tif (!(node instanceof MethodDeclaration)) return false;\r", "-\r", "-\tMethodDeclaration method = (MethodDeclaration)node;\r", "-\t\r", "-\t// selector\r", "-\tif (!this.matchesName(this.selector, method.selector))\r", "-\t\treturn false;\r", "-\r", "-\t// declaring type\r", "-\tMethodBinding binding = method.binding;\r", "-\tif (resolve && binding != null) {\r", "-\t\tReferenceBinding declaringType = binding.declaringClass;\r", "-\t\tif (declaringType != null) {\r", "-\t\t\tif (!binding.isStatic() && !binding.isPrivate()) {\r", "-\t\t\t\tif (!this.matchesAsSubtype(declaringType, this.declaringSimpleName, this.declaringQualification))\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t} else {\r", "-\t\t\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringType))\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\r", "-\t// return type\r", "-\tif (this.returnQualification == null) {\r", "-\t\tif (this.returnSimpleName != null) {\r", "-\t\t\tTypeReference methodReturnType = method.returnType;\r", "-\t\t\tif (methodReturnType != null) {\r", "-\t\t\t\tchar[][] methodReturnTypeName = methodReturnType.getTypeName();\r", "-\t\t\t\tchar[] sourceName = this.toArrayName(\r", "-\t\t\t\t\tmethodReturnTypeName[methodReturnTypeName.length-1], \r", "-\t\t\t\t\tmethodReturnType.dimensions());\r", "-\t\t\t\tif (!this.matchesName(this.returnSimpleName, sourceName))\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t} else {\r", "-\t\tif (resolve \r", "-\t\t\t\t&& binding != null \r", "-\t\t\t\t&& !this.matchesType(this.returnSimpleName, this.returnQualification, binding.returnType))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\t\t\r", "-\t// parameter types\r", "-\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\tif (parameterCount > -1) {\r", "-\t\tint argumentCount = method.arguments == null ? 0 : method.arguments.length;\r", "-\t\tif (parameterCount != argumentCount)\r", "-\t\t\treturn false;\r", "-\t\r", "-\t\tif (resolve && binding != null) {\r", "-\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "-\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "-\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "-\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\r", "-\treturn true;\r", "-}\r", "+ */\r", "+public int matchLevel(AstNode node, boolean resolve) {\r", "+\tif (!(node instanceof MethodDeclaration)) return IMPOSSIBLE_MATCH;\r", "+\r", "+\tMethodDeclaration method = (MethodDeclaration)node;\r", "+\r", "+\tif (resolve) {\r", "+\t\treturn this.matchLevel(method.binding);\r", "+\t} else {\r", "+\t\t// selector\r", "+\t\tif (!this.matchesName(this.selector, method.selector))\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\t\t// return type\r", "+\t\tTypeReference methodReturnType = method.returnType;\r", "+\t\tif (methodReturnType != null) {\r", "+\t\t\tchar[][] methodReturnTypeName = methodReturnType.getTypeName();\r", "+\t\t\tchar[] sourceName = this.toArrayName(\r", "+\t\t\t\tmethodReturnTypeName[methodReturnTypeName.length-1], \r", "+\t\t\t\tmethodReturnType.dimensions());\r", "+\t\t\tif (!this.matchesName(this.returnSimpleName, sourceName))\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\t\t\t\r", "+\t\t// parameter types\r", "+\t\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\t\tif (parameterCount > -1) {\r", "+\t\t\tint argumentCount = method.arguments == null ? 0 : method.arguments.length;\r", "+\t\t\tif (parameterCount != argumentCount)\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\r", "+\t\treturn POSSIBLE_MATCH;\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bab40731d8671a56f8773514ad36d69c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldLocator.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected int matchField(FieldBinding field, boolean matchName)", "signatureAfterChange": " protected int matchField(FieldBinding field, boolean matchName)", "diff": ["-\tint typeLevel = resolveLevelForType(fieldPattern.typeSimpleName, fieldPattern.typeQualification, field.type);", "-\t", "-\t\t// SEARCH_15 (frederic) Specific field pattern verification for generics (not fully tested yet...)", "-\t\tif (typeLevel == IMPOSSIBLE_MATCH) {", "-\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t}", "-\t\tTypeBinding typeBinding = field.type;", "-\t\tif (typeBinding != null) {", "-\t\t\tboolean isParameterized = typeBinding.isParameterizedType();", "-\t\t\tboolean isRawType = typeBinding.isRawType();", "-\t\t\tif (fieldPattern.typeNames== null) {", "-\t\t\t\tif (isParameterized && !isRawType) return IMPOSSIBLE_MATCH;", "-\t\t\t} else {", "-\t\t\t\tif (!isParameterized) return IMPOSSIBLE_MATCH;", "-\t\t\t\tParameterizedTypeBinding paramTypeBinding = (ParameterizedTypeBinding) typeBinding;", "-\t\t\t\tif (paramTypeBinding.arguments == null) {", "-\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t\t\t}", "-\t\t\t\tint length = fieldPattern.typeNames.length;", "-\t\t\t\tif (paramTypeBinding.arguments.length != length) return IMPOSSIBLE_MATCH;", "-\t\t\t\tfor (int i= 0; i<length; i++) {", "-\t\t\t\t\tchar[] argType = fieldPattern.typeNames[i];", "-\t\t\t\t\tTypeBinding argTypeBinding = paramTypeBinding.arguments[i];", "-\t\t\t\t\tif (!CharOperation.equals(argType, argTypeBinding.shortReadableName(), fieldPattern.isCaseSensitive) &&", "-\t\t\t\t\t\t!CharOperation.equals(argType, argTypeBinding.readableName(), fieldPattern.isCaseSensitive)) {", "-\t\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t/* Try to pull-up generics verification in PatternLocator?", "-\t\tint typeLevel = resolveLevelForType(", "-\t\t\t\tfieldPattern.typeSimpleName,", "-\t\t\t\tfieldPattern.typeQualification,", "-\t\t\t\tfieldPattern.typeNames,", "-\t\t\t\tfieldPattern.mustResolve(),", "-\t\t\t\ttrue // parameterized,", "-\t\t\t\tfield.type);", "-\t\t*/", "-\t\t// end", "+\t// get real field binding", "+\tFieldBinding fieldBinding = field;", "+\tif (field instanceof ParameterizedFieldBinding) {", "+\t\tfieldBinding = ((ParameterizedFieldBinding) field).originalField;", "+\t}", "+\tint typeLevel = resolveLevelForType(fieldBinding.type);"]}], "num": 50891}
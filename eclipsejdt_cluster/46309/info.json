{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "082b280bd3e970ca86cc9afcfa45034d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01a92a599958037a2087760a8cbdb4bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 164, "methodNumberAfterChange": 287, "signatureBeforeChange": " public void incrementTemp(LocalVariableBinding localBinding, int value)", "signatureAfterChange": " public void optimizeBranch(int oldPosition, Label lbl)", "diff": ["-}", "-public void incrementTemp(LocalVariableBinding localBinding, int value) {", "-\tif (value == (short) value) {", "-\t\tthis.iinc(localBinding.resolvedPosition, value);", "-\t\treturn;", "-\t}", "-\tload(localBinding);", "-\tthis.ldc(value);", "-\tthis.iadd();", "-\tstore(localBinding, false);", "-}", "+public void optimizeBranch(int oldPosition, Label lbl) {", "+\tfor (int i = 0; i < this.countLabels; i++) {", "+\t\tLabel label = this.labels[i];", "+\t\tif (oldPosition == label.position) {", "+\t\t\tlabel.position = position;", "+\t\t\tif (label instanceof CaseLabel) {", "+\t\t\t\tint offset = position - ((CaseLabel) label).instructionPosition;", "+\t\t\t\tfor (int j = 0; j < label.forwardReferenceCount; j++) {", "+\t\t\t\t\tint forwardPosition = label.forwardReferences[j];", "+\t\t\t\t\tthis.writeWidePosition(forwardPosition, offset);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tfor (int j = 0; j < label.forwardReferenceCount; j++) {", "+\t\t\t\t\tfinal int forwardReference = label.forwardReferences[j];", "+\t\t\t\t\tthis.writePosition(lbl, forwardReference);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f5343861b06739be3337eef23ce87fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "bffd05273174fba670489cd637d40ac2a4d0913b", "commitAfterChange": "5cda6ee5d9726ecd4c3800dc98f96b9913f2498c", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "\r private boolean isAffectedByPackageFragmentRoot(IJavaElementDelta delta, IJavaElement element)", "signatureAfterChange": "\r private boolean isAffectedByPackageFragmentRoot(IJavaElementDelta delta, IJavaElement element)", "diff": ["-\t\t\treturn fProjectRegion.contains(element);\r", "+\t\t\treturn this.projectRegion.contains(element);\r", "-\t\t\tif ((delta.getFlags() & IJavaElementDelta.F_REMOVED_FROM_CLASSPATH) > 0 || (delta.getFlags() & IJavaElementDelta.F_CONTENT) > 0) {\r", "+\t\t\tint flags = delta.getFlags();\r", "+\t\t\tif ((flags & IJavaElementDelta.F_ADDED_TO_CLASSPATH) > 0) {\r", "+\t\t\t\t// check if the root is in the classpath of one of the projects of this hierarchy\r", "+\t\t\t\tif (this.projectRegion != null) {\r", "+\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)element;\r", "+\t\t\t\t\tIPath rootPath = root.getPath();\r", "+\t\t\t\t\tIJavaElement[] elements = this.projectRegion.getElements();\r", "+\t\t\t\t\tfor (int i = 0; i < elements.length; i++) {\r", "+\t\t\t\t\t\tIJavaProject project = (IJavaProject)elements[i];\r", "+\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\tIClasspathEntry[] classpath = project.getResolvedClasspath(true);\r", "+\t\t\t\t\t\t\tfor (int j = 0; j < classpath.length; j++) {\r", "+\t\t\t\t\t\t\t\tIClasspathEntry entry = classpath[j];\r", "+\t\t\t\t\t\t\t\tif (entry.getPath().equals(rootPath)) {\r", "+\t\t\t\t\t\t\t\t\treturn true;\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t\t\t// igmore this project\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tif ((flags & IJavaElementDelta.F_REMOVED_FROM_CLASSPATH) > 0 || (flags & IJavaElementDelta.F_CONTENT) > 0) {\r", "-\t\t\t\tIJavaElement[] pkgs = fPackageRegion.getElements();\r", "+\t\t\t\tIJavaElement[] pkgs = this.packageRegion.getElements();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f24e24a3fbab242784720698b86db1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "e0a0631e6ad0dd184a0c6f7c90e330e7c7d93f89", "commitAfterChange": "d88d614055e9f2e19d665c38a6f8afb7405f3375", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic static char[][] getJavaLikeExtensions()", "signatureAfterChange": " \tpublic static char[][] getJavaLikeExtensions()", "diff": ["-\t\t\tJAVA_LIKE_EXTENSIONS = new char[][] {SuffixConstants.SUFFIX_java, SuffixConstants.SUFFIX_JAVA};", "+\t\t\t\t", "+\t\t\tPlugin jdtCorePlugin = JavaCore.getPlugin();", "+\t\t\tif (jdtCorePlugin == null) return null;", "+\t", "+\t\t\tArrayList fileExtensionsList = new ArrayList(5);", "+\t\t\tfileExtensionsList.add(SuffixConstants.SUFFIX_java);", "+\t\t\tIExtensionPoint extension = Platform.getExtensionRegistry().getExtensionPoint(JavaCore.PLUGIN_ID, JavaModelManager.EXTRA_JAVA_LIKE_FILE_EXTENSIONS_EXTPOINT_ID);", "+\t\t\tif (extension != null) {", "+\t\t\t\tIExtension[] extensions =  extension.getExtensions();", "+\t\t\t\tfor(int i = 0; i < extensions.length; i++){", "+\t\t\t\t\tIConfigurationElement [] configElements = extensions[i].getConfigurationElements();", "+\t\t\t\t\tfor(int j = 0; j < configElements.length; j++){", "+\t\t\t\t\t\tString fileExtensionAttribute = configElements[j].getAttribute(\"extension\"); //$NON-NLS-1$", "+\t\t\t\t\t\tif (fileExtensionAttribute != null) fileExtensionsList.add(('.' + fileExtensionAttribute).toCharArray());", "+\t\t\t\t\t}", "+\t\t\t\t}\t", "+\t\t\t}", "+\t\t\tJAVA_LIKE_EXTENSIONS = new char[fileExtensionsList.size()][];", "+\t\t\tfileExtensionsList.toArray(JAVA_LIKE_EXTENSIONS);", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7eb0e5e9e413b34972419c319a257397", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "8f838ccefdcacadaac662cb88a80fdb1a3657843", "commitAfterChange": "658041315da1052ce94c7e1b37be530cbc4e1f1d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, int nullStatus, CheckMode mode)", "signatureAfterChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, int nullStatus, CheckMode mode)", "diff": ["+\t\tif (mode == CheckMode.BOUND_CHECK && requiredType instanceof TypeVariableBinding) {", "+\t\t\t// during bound check against a type variable check the provided type against all upper bounds:", "+\t\t\tTypeBinding superClass = requiredType.superclass();", "+\t\t\tif (superClass != null && superClass.hasNullTypeAnnotations()) {", "+\t\t\t\tNullAnnotationMatching status = analyse(superClass, providedType, null, nullStatus, mode);", "+\t\t\t\tseverity = Math.max(severity, status.severity);", "+\t\t\t\tif (severity == 2)", "+\t\t\t\t\treturn new NullAnnotationMatching(severity, nullStatus, superTypeHint);", "+\t\t\t}", "+\t\t\tTypeBinding[] superInterfaces = requiredType.superInterfaces();", "+\t\t\tif (superInterfaces != null) {", "+\t\t\t\tfor (int i = 0; i < superInterfaces.length; i++) {", "+\t\t\t\t\tif (superInterfaces[i].hasNullTypeAnnotations()) {", "+\t\t\t\t\t\tNullAnnotationMatching status = analyse(superInterfaces[i], providedType, null, nullStatus, mode);", "+\t\t\t\t\t\tseverity = Math.max(severity, status.severity);", "+\t\t\t\t\t\tif (severity == 2)", "+\t\t\t\t\t\t\treturn new NullAnnotationMatching(severity, nullStatus, superTypeHint);\t\t\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-\t\t\tlong requiredBits = requiredNullTagBits(requiredType);", "+\t\t\tlong requiredBits = requiredNullTagBits(requiredType, mode);", "-\t\t\t\tseverity = computeNullProblemSeverity(requiredBits, providedBits, nullStatus, mode == CheckMode.OVERRIDE && nullStatus == -1);", "+\t\t\t\tint s = computeNullProblemSeverity(requiredBits, providedBits, nullStatus, mode == CheckMode.OVERRIDE && nullStatus == -1);", "+\t\t\t\tseverity = Math.max(severity, s);"]}], "num": 46309}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "925b23ef5bd319b70427da8ae47c3959", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "676f94b34ec1178aea0523ef289500c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "204dbb0f962baec45cc155adc0f25897806fc936", "commitAfterChange": "8d7962f9f430b3236797be4f077716228c08370e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void resolve(MethodScope initializationScope)", "signatureAfterChange": " \t \tpublic void resolve(MethodScope initializationScope)", "diff": ["-\t\t\t\t\tthis.binding.constant = Constant.NotAConstant;", "+\t\t\t\t\tthis.binding.setConstant(Constant.NotAConstant);", "-\t\t\t\t\tthis.binding.constant = Constant.NotAConstant;", "+\t\t\t\t\tthis.binding.setConstant(Constant.NotAConstant);", "-\t\t\t\t\t\t\tthis.binding.constant =", "-\t\t\t\t\t\t\t\tthis.initialization.constant.castTo(", "-\t\t\t\t\t\t\t\t\t(this.binding.type.id << 4) + this.initialization.constant.typeID());", "+\t\t\t\t\t\t\tthis.binding.setConstant(this.initialization.constant.castTo((this.binding.type.id << 4) + this.initialization.constant.typeID()));", "-\t\t\t\t\t\tthis.binding.constant = NotAConstant;", "+\t\t\t\t\t\tthis.binding.setConstant(NotAConstant);", "-\t\t\t\tif (this.binding.constant == null)", "-\t\t\t\t\tthis.binding.constant = Constant.NotAConstant;", "+\t\t\t\tif (this.binding.constant() == null)", "+\t\t\t\t\tthis.binding.setConstant(Constant.NotAConstant);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0fea0d39438ccb17f64b40f42c3042e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "38590129939501d58d89738289276afaa02e2706", "commitAfterChange": "0a902f02dbe85869aef1b7ecd659a6f0a0c2a6cf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public final void computeConstant(TypeBinding leftTb, TypeBinding rightTb)", "signatureAfterChange": "\r public final void computeConstant(TypeBinding leftTb, TypeBinding rightTb)", "diff": ["-public final void computeConstant(TypeBinding leftTb, TypeBinding rightTb){\r", "-\r", "-\tif ( (left.constant != NotAConstant) && (right.constant != NotAConstant) )\r", "-\t{\tconstant = Constant.computeConstantOperationEQUAL_EQUAL(left.constant,rightTb.id,EQUAL_EQUAL,right.constant,rightTb.id);\r", "+public final void computeConstant(TypeBinding leftTb, TypeBinding rightTb) {\r", "+\tif ((left.constant != NotAConstant) && (right.constant != NotAConstant)) {\r", "+\t\tconstant =\r", "+\t\t\tConstant.computeConstantOperationEQUAL_EQUAL(\r", "+\t\t\t\tleft.constant,\r", "+\t\t\t\trightTb.id,\r", "+\t\t\t\tEQUAL_EQUAL,\r", "+\t\t\t\tright.constant,\r", "+\t\t\t\trightTb.id);\r", "-\t\t\tconstant = Constant.fromValue(! constant.booleanValue()) ;}\r", "-\telse\r", "-\t\tconstant = NotAConstant ;\r", "+\t\t\tconstant = Constant.fromValue(!constant.booleanValue());\r", "+\t} else {\r", "+\t\tconstant = NotAConstant;\r", "+\t}\r"]}], "num": 60751}
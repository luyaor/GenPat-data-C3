{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00aac87783b7c133990507d361974a39", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07ed8fb7955c672f8586abfc2317dc97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "2a2935d5ba546500d563cc08921b53e5b286cdf8", "commitAfterChange": "2d9dc5098273e0e95832d81d735d2d77249738ef", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tIType findSecondaryType(String typeName, IPackageFragment pkg, boolean partialMatch, final int acceptFlags)", "signatureAfterChange": " \tprivate IType findSecondaryType(String packageName, String typeName, IJavaProject project)", "diff": ["+\t */", "+\tprivate IType findSecondaryType(String packageName, String typeName, IJavaProject project) {", "+\t\tif (VERBOSE) {", "+\t\t\tUtil.verbose(\"NameLookup FIND SECONDARY TYPES:\"); //$NON-NLS-1$", "+\t\t\tUtil.verbose(\" -> pkg name: \" + packageName);  //$NON-NLS-1$", "+\t\t\tUtil.verbose(\" -> type name: \" + typeName);  //$NON-NLS-1$", "+\t\t\tUtil.verbose(\" -> projects: \"+project.getElementName()); //$NON-NLS-1$", "+\t\t}", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\ttry {", "+\t\t\tIJavaProject javaProject = project;", "+\t\t\tHashMap secondaryTypePaths = manager.getSecondaryTypes(javaProject);", "+\t\t\tif (secondaryTypePaths.size() > 0) {", "+\t\t\t\tHashMap types = (HashMap) secondaryTypePaths.get(packageName==null?\"\":packageName); //$NON-NLS-1$", "+\t\t\t\tif (types != null && types.size() > 0) {", "+\t\t\t\t\tIType type = (IType) types.get(typeName);", "+\t\t\t\t\tif (type != null) {", "+\t\t\t\t\t\treturn type;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tcatch (JavaModelException jme) {", "+\t\t\t// give up", "+\t\t}", "+\t\treturn null;", "+\t}", "-\t// TODO (kent) enable once index support is in", "-\tIType findSecondaryType(String typeName, IPackageFragment pkg, boolean partialMatch, final int acceptFlags) {", "-\t\ttry {", "-\t\t\tfinal ArrayList paths = new ArrayList();", "-\t\t\tTypeNameRequestor nameRequestor = new TypeNameRequestor() {", "-\t\t\t\tpublic void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path) {", "-\t\t\t\t\tif (enclosingTypeNames == null || enclosingTypeNames.length == 0) { // accept only top level types", "-\t\t\t\t\t\tint kind = modifiers & (ClassFileConstants.AccInterface|ClassFileConstants.AccEnum|ClassFileConstants.AccAnnotation);", "-\t\t\t\t\t\tswitch (kind) {", "-\t\t\t\t\t\t\tcase ClassFileConstants.AccAnnotation:", "-\t\t\t\t\t\t\tcase ClassFileConstants.AccAnnotation|ClassFileConstants.AccInterface:", "-\t\t\t\t\t\t\t\tif ((acceptFlags & ACCEPT_ANNOTATIONS) != 0) paths.add(path);", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase ClassFileConstants.AccEnum:", "-\t\t\t\t\t\t\t\tif ((acceptFlags & ACCEPT_ENUMS) != 0) paths.add(path);", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase ClassFileConstants.AccInterface:", "-\t\t\t\t\t\t\t\tif ((acceptFlags & ACCEPT_INTERFACES) != 0) paths.add(path);", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\tif ((acceptFlags & ACCEPT_CLASSES) != 0) paths.add(path);", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t};", "-", "-\t\t\tint matchMode = partialMatch ? SearchPattern.R_PREFIX_MATCH : SearchPattern.R_EXACT_MATCH;", "-\t\t\tint matchRule = !partialMatch ? matchMode | SearchPattern.R_CASE_SENSITIVE : matchMode;", "-\t\t\tnew SearchEngine().searchAllTypeNames(", "-\t\t\t\tpkg.getElementName().toCharArray(),", "-\t\t\t\ttypeName.toCharArray(),", "-\t\t\t\tmatchRule,", "-\t\t\t\tIJavaSearchConstants.TYPE,", "-\t\t\t\tSearchEngine.createJavaSearchScope(new IJavaElement[] {pkg}, false),", "-\t\t\t\tnameRequestor,", "-\t\t\t\tIJavaSearchConstants.CANCEL_IF_NOT_READY_TO_SEARCH,", "-\t\t\t\tnull);", "-", "-\t\t\tif (!paths.isEmpty()) {", "-\t\t\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\t\t\t\tfor (int i = 0, l = paths.size(); i < l; i++) {", "-\t\t\t\t\tString pathname = (String) paths.get(i);", "-\t\t\t\t\tif (org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(pathname)) {", "-\t\t\t\t\t\tIFile file = workspace.getRoot().getFile(new Path(pathname));", "-\t\t\t\t\t\tICompilationUnit unit = JavaCore.createCompilationUnitFrom(file);", "-\t\t\t\t\t\treturn unit.getType(typeName);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// ignore", "-\t\t} catch (OperationCanceledException ignore) {", "-\t\t\t// ignore", "-\t\t}", "-\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0a30ea19d734587211fe1bc782bc425", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "ad3220b4b434313891b223270deb616283ce8051", "commitAfterChange": "c0a30fbd56f0faf040945ca7720c23f3dd404282", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tprivate static void resolvedChainedLibraries(IPath jarPath, HashSet visited, ArrayList result)", "signatureAfterChange": " \t \tprivate static void resolvedChainedLibraries(IPath jarPath, HashSet visited, ArrayList result)", "diff": ["-\t\tObject target = JavaModel.getTarget(jarPath, true/*check existence, otherwise the manifest cannot be read*/);", "-\t\tif (target instanceof IFile || target instanceof File) {", "-\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t\tZipFile zip = null;", "-\t\t\tBufferedReader reader = null;", "-\t\t\ttry {", "-\t\t\t\tzip = manager.getZipFile(jarPath);", "-\t\t\t\tZipEntry manifest =\tzip.getEntry(\"META-INF/MANIFEST.MF\"); //$NON-NLS-1$", "-\t\t\t\tif (manifest != null) { // non-null implies regular file", "-\t\t\t\t\treader = new BufferedReader(new InputStreamReader(zip.getInputStream(manifest)));", "-\t\t\t\t\tManifestAnalyzer analyzer = new ManifestAnalyzer();", "-\t\t\t\t\tboolean success = analyzer.analyzeManifestContents(reader);", "-\t\t\t\t\tList calledFileNames = analyzer.getCalledFileNames();", "-\t\t\t\t\tif (!success || analyzer.getClasspathSectionsCount() == 1 && calledFileNames == null) {", "-\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "-\t\t\t\t\t\t\tUtil.verbose(\"Invalid Class-Path header in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t} else if (analyzer.getClasspathSectionsCount() > 1) {", "-\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "-\t\t\t\t\t\t\tUtil.verbose(\"Multiple Class-Path headers in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn;", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tif (manager.isNonChainingJar(jarPath))", "+\t\t\treturn;", "+\t\tList calledFileNames = getCalledFileNames(jarPath);", "+\t\tif (calledFileNames == null) {", "+\t\t\tmanager.addNonChainingJar(jarPath);", "+\t\t} else {", "+\t\t\tIterator calledFilesIterator = calledFileNames.iterator();", "+\t\t\tIPath directoryPath = jarPath.removeLastSegments(1);", "+\t\t\twhile (calledFilesIterator.hasNext()) {", "+\t\t\t\tString calledFileName = (String) calledFilesIterator.next();", "+\t\t\t\tif (!directoryPath.isValidPath(calledFileName)) {", "+\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "+\t\t\t\t\t\tUtil.verbose(\"Invalid Class-Path entry \" + calledFileName + \" in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\tif (calledFileNames != null) {", "-\t\t\t\t\t\tIterator calledFilesIterator = calledFileNames.iterator();", "-\t\t\t\t\t\tIPath directoryPath = jarPath.removeLastSegments(1);", "-\t\t\t\t\t\twhile (calledFilesIterator.hasNext()) {", "-\t\t\t\t\t\t\tString calledFileName = (String) calledFilesIterator.next();", "-\t\t\t\t\t\t\tif (!directoryPath.isValidPath(calledFileName)) {", "-\t\t\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "-\t\t\t\t\t\t\t\t\tUtil.verbose(\"Invalid Class-Path entry \" + calledFileName + \" in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tIPath calledJar = directoryPath.append(new Path(calledFileName));", "-\t\t\t\t\t\t\t\tresolvedChainedLibraries(calledJar, visited, result);", "-\t\t\t\t\t\t\t\tresult.add(calledJar);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\t// not a zip file", "-\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "-\t\t\t\t\tUtil.verbose(\"Could not read Class-Path header in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$", "-\t\t\t\t\te.printStackTrace();", "-\t\t\t\t}", "-\t\t\t} catch (IOException e) {", "-\t\t\t\t// not a zip file", "-\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "-\t\t\t\t\tUtil.verbose(\"Could not read Class-Path header in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$", "-\t\t\t\t\te.printStackTrace();", "-\t\t\t\t}", "-\t\t\t} finally {", "-\t\t\t\tmanager.closeZipFile(zip);", "-\t\t\t\tif (reader != null) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\treader.close();", "-\t\t\t\t\t} catch (IOException e) {", "-\t\t\t\t\t\t// best effort", "-\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tIPath calledJar = directoryPath.append(new Path(calledFileName));", "+\t\t\t\t\tresolvedChainedLibraries(calledJar, visited, result);", "+\t\t\t\t\tresult.add(calledJar);"]}], "num": 32803}
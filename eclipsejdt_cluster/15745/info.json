{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1323814af01b3bbac9dd171677f7645", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9471a40fb969f28f76e6784e7f529f34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "7cc08fd6458164ad4911bfd35d3157c5667751d0", "commitAfterChange": "d790a2ca8d6b4d448bd19ba6c16b13d5ab5db43f", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "diff": ["+\t\tIJavaModelStatus cachedStatus = null;", "-\t\t\t\tif (output == null) continue; // 36465 - for 2.0 backward compatibility, only check specific output locations (the default can still coincidate)", "-\t\t\t\t// if (output == null) output = projectOutputLocation; // if no specific output, still need to check using default output (this line would check default output)", "+\t\t\t\tif (output == null) output = projectOutputLocation; // if no specific output, still need to check using default output (this line would check default output)", "-\t\t\t\t\t// Build some common strings for status message", "-\t\t\t\t\tboolean opStartsWithProject = projectName.equals(otherEntry.getPath().segment(0));", "-\t\t\t\t\tString otherPathMsg = opStartsWithProject ? otherEntry.getPath().removeFirstSegments(1).toString() : otherEntry.getPath().makeRelative().toString();", "-", "-\t\t\t\t\t\t\tif (otherEntry.getPath().equals(output)) {", "-\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Messages.bind(Messages.classpath_cannotUseDistinctSourceFolderAsOutput, new String[] {entryPathMsg, otherPathMsg, projectName}));", "+\t\t\t\t\t\t\t// Bug 287164 : Report errors of overlapping output locations only if the user sets the corresponding preference.", "+\t\t\t\t\t\t\t// The check is required for backward compatibility with bug-fix 36465.", "+\t\t\t\t\t\t\tString option = javaProject.getOption(JavaCore.CORE_OUTPUT_LOCATION_OVERLAPPING_ANOTHER_SOURCE, true);", "+\t\t\t\t\t\t\tif (otherEntry.getPath().equals(output) ", "+\t\t\t\t\t\t\t\t\t&& !JavaCore.IGNORE.equals(option)) {", "+\t\t\t\t\t\t\t\tboolean opStartsWithProject = projectName.equals(otherEntry.getPath().segment(0));", "+\t\t\t\t\t\t\t\tString otherPathMsg = opStartsWithProject ? otherEntry.getPath().removeFirstSegments(1).toString() : otherEntry.getPath().makeRelative().toString();", "+\t\t\t\t\t\t\t\tif (JavaCore.ERROR.equals(option)) {", "+\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(IStatus.ERROR, IJavaModelStatusConstants.OUTPUT_LOCATION_OVERLAPPING_ANOTHER_SOURCE, ", "+\t\t\t\t\t\t\t\t\t\t\tMessages.bind(Messages.classpath_cannotUseDistinctSourceFolderAsOutput, new String[] {", "+\t\t\t\t\t\t\t\t\t\t\tentryPathMsg, otherPathMsg, projectName }));", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (cachedStatus == null) {", "+\t\t\t\t\t\t\t\t\t// Note that the isOK() is being overridden to return true. This is an exceptional scenario", "+\t\t\t\t\t\t\t\t\tcachedStatus = new JavaModelStatus(IStatus.OK, IJavaModelStatusConstants.OUTPUT_LOCATION_OVERLAPPING_ANOTHER_SOURCE, ", "+\t\t\t\t\t\t\t\t\t\tMessages.bind(Messages.classpath_cannotUseDistinctSourceFolderAsOutput, new String[] {", "+\t\t\t\t\t\t\t\t\t\tentryPathMsg, otherPathMsg, projectName })){", "+\t\t\t\t\t\t\t\t\t\tpublic boolean isOK() {", "+\t\t\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t};", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (otherEntry.getPath().equals(output)) {", "+\t\t\t\t\t\t\tif (output != projectOutputLocation && otherEntry.getPath().equals(output)) {", "+\t\t\t\t\t\t\t\tboolean opStartsWithProject = projectName.equals(otherEntry.getPath().segment(0));", "+\t\t\t\t\t\t\t\tString otherPathMsg = opStartsWithProject ? otherEntry.getPath().removeFirstSegments(1).toString() : otherEntry.getPath().makeRelative().toString();", "+", "+\t\t// NOTE: The above code that checks for IJavaModelStatusConstants.OUTPUT_LOCATION_OVERLAPPING_ANOTHER_SOURCE, can be configured to return", "+\t\t// a WARNING status and hence should be at the end of this validation method. Any other code that might return a more severe ERROR should be ", "+\t\t// inserted before the mentioned code.", "+\t\tif (cachedStatus != null) return cachedStatus;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e33e1efd4e7b1ae367dd057f7a3719b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "9c377922fe401713f5937bb475dd1fc1bedb4d8f", "commitAfterChange": "6a9a7eb1601e3179b18eecef90d5d4fdfbc52bfa", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "diff": ["+\t\tString projectName = javaProject.getElementName();", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DISABLED_CP_EXCLUSION_PATTERNS, resolvedEntry.getPath());", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DISABLED_CP_EXCLUSION_PATTERNS, javaProject, resolvedEntry.getPath());", "-\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DISABLED_CP_MULTIPLE_OUTPUT_LOCATIONS, resolvedEntry.getPath());", "+\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DISABLED_CP_MULTIPLE_OUTPUT_LOCATIONS, javaProject, resolvedEntry.getPath());", "+\t\t\t", "+\t\t\t// Build some common strings for status message", "+\t\t\tboolean epStartsWithProject = entryPath.segment(0).toString().equals(projectName);", "+\t\t\tString entryPathMsg = epStartsWithProject ? entryPath.removeFirstSegments(1).toString() : entryPath.makeRelative().toString();", "-\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION, Util.bind(\"classpath.duplicateEntryPath\", entryPath.makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION, Util.bind(\"classpath.duplicateEntryPath\", entryPathMsg, projectName)); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestEntryInLibrary\", new String[] {entryPath.makeRelative().toString(), otherEntry.getPath().makeRelative().toString()})); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestEntryInLibrary\", entryPath.makeRelative().toString(), otherEntry.getPath().makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t// Build some common strings for status message", "+\t\t\tboolean epStartsWithProject = entryPath.segment(0).toString().equals(projectName);", "+\t\t\tString entryPathMsg = epStartsWithProject ? entryPath.removeFirstSegments(1).toString() : entryPath.makeRelative().toString();", "+\t", "+", "+\t\t\t\t\t// Build some common strings for status message", "+\t\t\t\t\tboolean opStartsWithProject = otherEntry.getPath().segment(0).toString().equals(projectName);", "+\t\t\t\t\tString otherPathMsg = opStartsWithProject ? otherEntry.getPath().removeFirstSegments(1).toString() : otherEntry.getPath().makeRelative().toString();", "+\t", "-\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotUseDistinctSourceFolderAsOutput\", entryPath.makeRelative().toString(), otherEntry.getPath().makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotUseDistinctSourceFolderAsOutput\", new String[] {entryPathMsg, otherPathMsg, projectName})); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotUseLibraryAsOutput\", entryPath.makeRelative().toString(), otherEntry.getPath().makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotUseLibraryAsOutput\", new String[] {entryPathMsg, otherPathMsg, projectName})); //$NON-NLS-1$"]}], "num": 15745}
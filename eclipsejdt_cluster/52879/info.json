{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51f7b3fabb7a3f7155a242d6dda5e563", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89457f3226417e0c9786c6926aff436f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "98f970f58fc61208a8cdd52e3b9981ef32c5937b", "commitAfterChange": "29a8044fc706583901ff89364d428dff04f6a567", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tprivate AnnotationProcessorFactory loadFactoryFromClassLoader( String factoryName, ClassLoader cl, IJavaProject jproj )", "signatureAfterChange": " \t \tprivate List<IServiceFactory> loadJava6FactoryClasses(  \t\t\tFactoryContainer fc, ClassLoader classLoader, IJavaProject jproj ) \t\t\tthrows IOException", "diff": ["-\tprivate AnnotationProcessorFactory loadFactoryFromClassLoader( String factoryName, ClassLoader cl, IJavaProject jproj )", "+\tprivate List<IServiceFactory> loadJava6FactoryClasses( ", "+\t\t\tFactoryContainer fc, ClassLoader classLoader, IJavaProject jproj )", "+\t\t\tthrows IOException", "-\t\tAnnotationProcessorFactory f = null;", "-\t\ttry", "+\t\tMap<String, String> factoryNames = fc.getFactoryNames();", "+\t\tList<IServiceFactory> factories = new ArrayList<IServiceFactory>(); ", "+\t\tfor ( Entry<String, String> entry : factoryNames.entrySet() )", "-\t\t\tClass<?> c = cl.loadClass( factoryName );", "-\t\t\tf = (AnnotationProcessorFactory)c.newInstance();", "+\t\t\tif (AptPlugin.JAVA6_FACTORY_NAME.equals(entry.getValue())) {", "+\t\t\t\tString factoryName = entry.getKey();", "+\t\t\t\tIServiceFactory factory = null;", "+\t\t\t\tif ( fc.getType() == FactoryType.PLUGIN ) {", "+\t\t\t\t\tfactory = FactoryPluginManager.getJava6FactoryFromPlugin( factoryName );", "+\t\t\t\t}", "+\t\t\t\telse {", "+\t\t\t\t\tClass<?> clazz;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tclazz = classLoader.loadClass(factoryName);", "+\t\t\t\t\t\tfactory = new ClassServiceFactory(clazz);", "+\t\t\t\t\t} catch (ClassNotFoundException e) {", "+\t\t\t\t\t\tAptPlugin.log(e, \"Unable to load annotation processor \" + factoryName); //$NON-NLS-1$", "+\t\t\t\t\t\treportFailureToLoadFactory(factoryName, jproj);", "+\t\t\t\t\t} ", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif ( factory != null )", "+\t\t\t\t\tfactories.add( factory );", "+\t\t\t}", "-\t\tcatch( Exception e )", "-\t\t{", "-\t\t\tAptPlugin.log(e, \"Failed to load \" + factoryName); //$NON-NLS-1$", "-\t\t\treportFailureToLoadFactory(factoryName, jproj);", "-\t\t}", "-\t\tcatch ( NoClassDefFoundError ncdfe )", "-\t\t{", "-\t\t\tAptPlugin.log(ncdfe, \"Failed to load \" + factoryName); //$NON-NLS-1$", "-\t\t\treportFailureToLoadFactory(factoryName, jproj);", "-\t\t}", "-\t\treturn f;", "+\t\treturn factories;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a790ab5fb1e616dfbff1b2939499ca82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "b18b012adcc471e2280a6e20faa4d2a33f1db69a", "commitAfterChange": "5bb01926d23a6cf003d0d521691c391ac08b77a7", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate void disassemble(IFieldInfo fieldInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": " \tprivate void disassemble(IFieldInfo fieldInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["-\t\tdecodeModifiersForField(buffer, fieldInfo.getAccessFlags());", "-\t\tCharOperation.replace(fieldDescriptor, '/', '.');", "-\t\tbuffer.append(Signature.toCharArray(fieldDescriptor));", "+\t\tIClassFileAttribute classFileAttribute = Util.getAttribute(fieldInfo, IAttributeNamesConstants.SIGNATURE);", "+\t\tISignatureAttribute signatureAttribute = (ISignatureAttribute) classFileAttribute;", "+\t\tif (mode == DETAILED) {", "+\t\t\tbuffer", "+\t\t\t\t.append(Util.bind(\"disassembler.begincommentline\")) //$NON-NLS-1$", "+\t\t\t\t.append(Util.bind(\"classfileformat.fieldddescriptor\")) //$NON-NLS-1$", "+\t\t\t\t.append(Util.bind(\"classfileformat.fielddescriptorindex\")) //$NON-NLS-1$", "+\t\t\t\t.append(fieldInfo.getDescriptorIndex())", "+\t\t\t\t.append(Util.bind(\"disassembler.space\")) //$NON-NLS-1$", "+\t\t\t\t.append(fieldDescriptor);", "+\t\t\tif (fieldInfo.isDeprecated()) {", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.deprecated\"));//$NON-NLS-1$", "+\t\t\t}", "+\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\t\tif (signatureAttribute != null) {", "+\t\t\t\tbuffer", "+\t\t\t\t\t.append(Util.bind(\"disassembler.begincommentline\"))\t //$NON-NLS-1$", "+\t\t\t\t\t.append(Util.bind(\"disassembler.signatureattributeheader\")) //$NON-NLS-1$", "+\t\t\t\t\t.append(signatureAttribute.getSignature());", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\t\t}", "+\t\t}", "+\t\tdecodeModifiersForField(buffer, fieldInfo.getAccessFlags());", "+\t\tif (fieldInfo.isSynthetic()) {", "+\t\t\tbuffer.append(\"synthetic\"); //$NON-NLS-1$", "+\t\t\tbuffer.append(Util.bind(\"disassembler.space\")); //$NON-NLS-1$", "+\t\t}", "+\t\tbuffer.append(getSignatureForField(fieldDescriptor));", "-\t\tIClassFileAttribute[] attributes = fieldInfo.getAttributes();", "-\t\tint length = attributes.length;", "-\t\tif (length != 0) {", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tIClassFileAttribute attribute = attributes[i];", "-\t\t\t\tif (attribute != constantValueAttribute) {", "-\t\t\t\t\tdisassemble(attribute, buffer, lineSeparator, tabNumber);", "+\t\tif (mode == DETAILED) {", "+\t\t\tIClassFileAttribute[] attributes = fieldInfo.getAttributes();", "+\t\t\tint length = attributes.length;", "+\t\t\tif (length != 0) {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tIClassFileAttribute attribute = attributes[i];", "+\t\t\t\t\tif (attribute != constantValueAttribute", "+\t\t\t\t\t\t&& attribute != signatureAttribute", "+\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.DEPRECATED)", "+\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.SYNTHETIC)) {", "+\t\t\t\t\t\tdisassemble(attribute, buffer, lineSeparator, tabNumber);", "+\t\t\t\t\t}", "-\t\tif (mode == ClassFileBytesDisassembler.DETAILED) {", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "-\t\t\tCharOperation.replace(fieldDescriptor, '.', '/');", "-\t\t\tbuffer", "-\t\t\t\t.append(Util.bind(\"disassembler.commentstart\")) //$NON-NLS-1$", "-\t\t\t\t.append(Util.bind(\"classfileformat.fieldddescriptor\")) //$NON-NLS-1$", "-\t\t\t\t.append(Util.bind(\"classfileformat.fielddescriptorindex\")) //$NON-NLS-1$", "-\t\t\t\t.append(fieldInfo.getDescriptorIndex())", "-\t\t\t\t.append(Util.bind(\"disassembler.space\")) //$NON-NLS-1$", "-\t\t\t\t.append(fieldDescriptor)", "-\t\t\t\t.append(Util.bind(\"disassembler.commentend\")); //$NON-NLS-1$", "-\t\t}", "-\t\twriteNewLine(buffer, lineSeparator, tabNumber);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af25b397caef2dddc015b3e7a6ec60b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "b18b012adcc471e2280a6e20faa4d2a33f1db69a", "commitAfterChange": "5bb01926d23a6cf003d0d521691c391ac08b77a7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate void disassemble(IClassFileReader classFileReader, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": " \tprivate void disassemble(IClassFileReader classFileReader, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["-\t\tICodeAttribute codeAttribute = methodInfo.getCodeAttribute();", "+\t\tICodeAttribute codeAttribute = methodInfo.getCodeAttribute();", "-\t\tif (mode == ClassFileBytesDisassembler.DETAILED) {", "-\t\t\tCharOperation.replace(methodDescriptor, '.', '/');", "+\t\tIClassFileAttribute classFileAttribute = Util.getAttribute(methodInfo, IAttributeNamesConstants.SIGNATURE);", "+\t\tISignatureAttribute signatureAttribute = (ISignatureAttribute) classFileAttribute;", "+\t\tif (mode == DETAILED) {", "-\t\t\t\t.append(Util.bind(\"disassembler.commentstart\")) //$NON-NLS-1$", "+\t\t\t\t.append(Util.bind(\"disassembler.begincommentline\")) //$NON-NLS-1$", "-\t\t\t\t.append(methodDescriptor)", "-\t\t\t\t.append(Util.bind(\"disassembler.commentend\")); //$NON-NLS-1$", "+\t\t\t\t.append(methodDescriptor);", "+\t\t\tif (methodInfo.isDeprecated()) {", "+\t\t\t\tbuffer.append(Util.bind(\"disassembler.deprecated\"));//$NON-NLS-1$", "+\t\t\t}\t\t\t", "+\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\t\tif (signatureAttribute != null) {", "+\t\t\t\tbuffer", "+\t\t\t\t\t.append(Util.bind(\"disassembler.begincommentline\"))\t //$NON-NLS-1$", "+\t\t\t\t\t.append(Util.bind(\"disassembler.signatureattributeheader\")) //$NON-NLS-1$", "+\t\t\t\t\t.append(signatureAttribute.getSignature());", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\t\t}", "+\t\t\tif (codeAttribute != null) {", "+\t\t\t\tbuffer", "+\t\t\t\t\t.append(Util.bind(\"disassembler.begincommentline\")) //$NON-NLS-1$", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.maxStack\")) //$NON-NLS-1$", "+\t\t\t\t\t.append(codeAttribute.getMaxStack())", "+\t\t\t\t\t.append(Util.bind(\"disassembler.comma\"))//$NON-NLS-1$", "+\t\t\t\t\t.append(Util.bind(\"disassembler.space\"))//$NON-NLS-1$", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.maxLocals\")) //$NON-NLS-1$", "+\t\t\t\t\t.append(codeAttribute.getMaxLocals());", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\t\t}", "-\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\tif (methodInfo.isSynthetic()) {", "+\t\t\tbuffer.append(\"synthetic\"); //$NON-NLS-1$", "+\t\t\tbuffer.append(Util.bind(\"disassembler.space\")); //$NON-NLS-1$", "+\t\t}", "-\t\t\t\t\t.append(Util.bind(\"disassembler.comma\")); //$NON-NLS-1$", "+\t\t\t\t\t.append(Util.bind(\"disassembler.comma\"))//$NON-NLS-1$", "+\t\t\t\t\t.append(Util.bind(\"disassembler.space\")); //$NON-NLS-1$", "-\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "-\t\tIClassFileAttribute[] attributes = methodInfo.getAttributes();", "-\t\tint length = attributes.length;", "-\t\tif (length != 0) {", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tIClassFileAttribute attribute = attributes[i];", "-\t\t\t\tif ((attribute != codeAttribute) && (attribute != exceptionAttribute)) {", "-\t\t\t\t\tdisassemble(attribute, buffer, lineSeparator, tabNumber);", "-\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\tif (mode == DETAILED) {", "+\t\t\tIClassFileAttribute[] attributes = methodInfo.getAttributes();", "+\t\t\tint length = attributes.length;", "+\t\t\tif (length != 0) {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tIClassFileAttribute attribute = attributes[i];", "+\t\t\t\t\tif (attribute != codeAttribute", "+\t\t\t\t\t\t\t&& attribute != exceptionAttribute", "+\t\t\t\t\t\t\t&& attribute != signatureAttribute", "+\t\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.DEPRECATED)", "+\t\t\t\t\t\t\t&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.SYNTHETIC)) {", "+\t\t\t\t\t\tdisassemble(attribute, buffer, lineSeparator, tabNumber);", "+\t\t\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\t\t\t\t}", "-\t\t}", "-\t\tif (codeAttribute != null) {", "-\t\t\tdisassemble(codeAttribute, buffer, lineSeparator, tabNumber);", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\t\tif (codeAttribute != null) {", "+\t\t\t\tdisassemble(codeAttribute, buffer, lineSeparator, tabNumber);", "+\t\t\t}"]}], "num": 52879}
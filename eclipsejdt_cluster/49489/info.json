{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb64d71d9870640017b32290a84f3b99", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26b679847b375c8f7cc8a696277ad936", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java", "commitBeforeChange": "e74a7e922535396e598f77f6ca74363a6e6d0498", "commitAfterChange": "5132501fe32bc39d29df0ef5b05cc4e551a24910", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tpublic boolean isPertinentToApplicability(TypeVariableBinding typeVariable, MethodBinding method)", "signatureAfterChange": " \t \tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding method)", "diff": ["-\tpublic boolean isPertinentToApplicability(TypeVariableBinding typeVariable, MethodBinding method) {", "-\t\tif (method != null) { // when called from type inference", "-\t\t\tif (typeVariable.declaringElement == method)", "-\t\t\t\treturn false;", "-\t\t\tif (method.isConstructor() && typeVariable.declaringElement == method.declaringClass)", "-\t\t\t\treturn false;", "-\t\t} else { // for internal calls", "-\t\t\tif (typeVariable.declaringElement instanceof MethodBinding)", "-\t\t\t\treturn false;", "-\t\t}", "-\t\treturn true;", "-\t}", "+\t\tif (targetType instanceof TypeVariableBinding) {", "+\t\t\tTypeVariableBinding typeVariable = (TypeVariableBinding) targetType;", "+\t\t\tif (method != null) { // when called from type inference", "+\t\t\t\tif (typeVariable.declaringElement == method)", "+\t\t\t\t\treturn false;", "+\t\t\t\tif (method.isConstructor() && typeVariable.declaringElement == method.declaringClass)", "+\t\t\t\t\treturn false;", "+\t\t\t} else { // for internal calls", "+\t\t\t\tif (typeVariable.declaringElement instanceof MethodBinding)", "+\t\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62c9c633dd8083a4faa80e65c5679bcb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "cbe2b622e81a27ceffd382724966e1dd065a9d5c", "commitAfterChange": "5f8bc31fdd9227264ffdb0d653c171e78b54416c", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding method)", "signatureAfterChange": "  \tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding method)", "diff": ["-\t\tif (targetType instanceof TypeVariableBinding) {", "-\t\t\tif (method != null) { // when called from type inference", "-\t\t\t\tif (((TypeVariableBinding)targetType).declaringElement == method)", "-\t\t\t\t\treturn false;", "-\t\t\t\tif (method.isConstructor() && ((TypeVariableBinding)targetType).declaringElement == method.declaringClass)", "-\t\t\t\t\treturn false;", "-\t\t\t} else { // for internal calls", "-\t\t\t\tTypeVariableBinding typeVariable = (TypeVariableBinding) targetType;", "-\t\t\t\tif (typeVariable.declaringElement instanceof MethodBinding)", "-\t\t\t\t\treturn false;", "-\t\t\t}", "-\t\t}", "+\t\tif (!super.isPertinentToApplicability(targetType, method))", "+\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de684a1305dcd7c83b604e3fa5beb7f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding method)", "signatureAfterChange": " \t \tpublic boolean isPertinentToApplicability(TypeVariableBinding typeVariable, MethodBinding method)", "diff": ["-\tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding method) {", "-\t\tif (targetType instanceof TypeVariableBinding) {", "-\t\t\tif (method != null) { // when called from type inference", "-\t\t\t\tif (((TypeVariableBinding)targetType).declaringElement == method)", "-\t\t\t\t\treturn false;", "-\t\t\t\tif (method.isConstructor() && ((TypeVariableBinding)targetType).declaringElement == method.declaringClass)", "-\t\t\t\t\treturn false;", "-\t\t\t} else { // for internal calls", "-\t\t\t\tTypeVariableBinding typeVariable = (TypeVariableBinding) targetType;", "-\t\t\t\tif (typeVariable.declaringElement instanceof MethodBinding)", "-\t\t\t\t\treturn false;", "-\t\t\t}", "+\t", "+\tpublic boolean isPertinentToApplicability(TypeVariableBinding typeVariable, MethodBinding method) {", "+\t\tif (method != null) { // when called from type inference", "+\t\t\tif (typeVariable.declaringElement == method)", "+\t\t\t\treturn false;", "+\t\t\tif (method.isConstructor() && typeVariable.declaringElement == method.declaringClass)", "+\t\t\t\treturn false;", "+\t\t} else { // for internal calls", "+\t\t\tif (typeVariable.declaringElement instanceof MethodBinding)", "+\t\t\t\treturn false;", "+\t\treturn true;", "+\t}"]}], "num": 49489}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2bb8ee62964ccccf054286de29fcdf28", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4effe03cf908de7acd0f3fbf56c52fae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "671178f1f1111f921cebcc377164efed75b9cfcb", "commitAfterChange": "635d7e113ce40e25df072667fd17a7c3dd9b4152", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " \t \tprivate void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement)", "signatureAfterChange": " \t \tprivate void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement)", "diff": ["-\t\t\t\t\tmemberRef.setQualifier(convert((org.eclipse.jdt.internal.compiler.ast.TypeReference) fieldRef.receiver));", "+\t\t\t\t\trecordName(memberRef.getQualifier(), fieldRef.receiver);", "+\t\t\t\tName name = methodRef.getName();", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(node.getStartPosition());", "+\t\t\t\tint start = name.getStartPosition();", "+\t\t\t\t// get compiler node and record nodes", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(start);", "-\t\t\t\t\trecordNodes(methodRef.getName(), compilerNode);", "+\t\t\t\t\trecordNodes(name, compilerNode);", "-\t\t\t\t\t\tmethodRef.setQualifier(convert(typeRef));", "+\t\t\t\t\t\trecordName(methodRef.getQualifier(), typeRef);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t// Resolve parameters", "+\t\t\t\tIterator parameters = methodRef.parameters().listIterator();", "+\t\t\t\twhile (parameters.hasNext()) {", "+\t\t\t\t\tMethodRefParameter param = (MethodRefParameter) parameters.next();", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = (org.eclipse.jdt.internal.compiler.ast.Expression) javadoc.getNodeStartingAt(param.getStartPosition());", "+\t\t\t\t\tif (expression != null) {", "+\t\t\t\t\t\trecordNodes(param, expression);", "+\t\t\t\t\t\tif (expression instanceof JavadocArgumentExpression) {", "+\t\t\t\t\t\t\tJavadocArgumentExpression argExpr = (JavadocArgumentExpression) expression;", "+\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference typeRef = argExpr.argument.type;", "+\t\t\t\t\t\t\trecordNodes(param.getType(), typeRef);", "+\t\t\t\t\t\t\tif (param.getType().isSimpleType()) {", "+\t\t\t\t\t\t\t\tSimpleType type = (SimpleType)param.getType();", "+\t\t\t\t\t\t\t\trecordName(type.getName(), typeRef);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "-\t\t\t\tif (compilerNode != null) {", "-\t\t\t\t\tif (compilerNode instanceof org.eclipse.jdt.internal.compiler.ast.TypeReference) {", "-//\t\t\t\t\t\tconvert((org.eclipse.jdt.internal.compiler.ast.TypeReference) compilerNode);", "-\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference typeRef = (org.eclipse.jdt.internal.compiler.ast.TypeReference) compilerNode;", "-\t\t\t\t\t\tName name = (Name) node;", "-\t\t\t\t\t\tif (name.isQualifiedName()) {", "-\t\t\t\t\t\t\tSimpleName simpleName = null;", "-\t\t\t\t\t\t\twhile (name.isQualifiedName()) {", "-\t\t\t\t\t\t\t\tsimpleName = ((QualifiedName) name).getName();", "-\t\t\t\t\t\t\t\trecordNodes(simpleName, typeRef);", "-\t\t\t\t\t\t\t\tname = ((QualifiedName) name).getQualifier();", "-\t\t\t\t\t\t\t\trecordNodes(name, typeRef);", "-\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t\tsimpleName = ((QualifiedName) name).getName();", "-//\t\t\t\t\t\t\trecordNodes(simpleName, typeRef);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\trecordNodes(node, compilerNode);", "-\t\t\t\t}", "+\t\t\t\trecordName((Name) node, compilerNode);", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db7f1a5129cd873d51a356210525db56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "99b0ee0a94dea46a82c44b5f56daa5fcb74d2ad6", "commitAfterChange": "039fe9e46951f3ae4fb135033e62de597c68c2d9", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " \t \tprivate void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement)", "signatureAfterChange": " \t \tprivate void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement)", "diff": ["-\t\t\t\tName name = ((MemberRef)node).getName();", "+\t\t\t\tMemberRef memberRef = (MemberRef) node;", "+\t\t\t\tName name = memberRef.getName();", "+\t\t\t\t// get compiler node and record nodes", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(start);", "-\t\t\t\tif (compilerNode != null) {", "-\t\t\t\t\trecordNodes(node, compilerNode);", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.JavadocFieldReference fieldRef = (org.eclipse.jdt.internal.compiler.ast.JavadocFieldReference) javadoc.getNodeStartingAt(start);", "+\t\t\t\tif (fieldRef != null) {", "+\t\t\t\t\trecordNodes(name, fieldRef);", "+\t\t\t\t\trecordNodes(node, fieldRef);", "-\t\t\t} else if (node.getNodeType() == ASTNode.METHOD_REF ||", "-\t\t\t\t\tnode.getNodeType() == ASTNode.SIMPLE_NAME ||", "+\t\t\t\t// Replace qualifier to have all nodes recorded", "+\t\t\t\tif (memberRef.getQualifier() != null) {", "+\t\t\t\t\tmemberRef.setQualifier(convert((org.eclipse.jdt.internal.compiler.ast.TypeReference) fieldRef.receiver));", "+\t\t\t\t}", "+\t\t\t} else if (node.getNodeType() == ASTNode.METHOD_REF) {", "+\t\t\t\tMethodRef methodRef = (MethodRef) node;", "+\t\t\t\t// get compiler node and record nodes", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(node.getStartPosition());", "+\t\t\t\tif (compilerNode != null) {", "+\t\t\t\t\trecordNodes(methodRef.getName(), compilerNode);", "+\t\t\t\t\trecordNodes(methodRef, compilerNode);", "+\t\t\t\t}", "+\t\t\t\t// Replace qualifier to have all nodes recorded", "+\t\t\t\tif (methodRef.getQualifier() != null) {", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference typeRef = null;", "+\t\t\t\t\tif (compilerNode instanceof org.eclipse.jdt.internal.compiler.ast.JavadocAllocationExpression) {", "+\t\t\t\t\t\ttypeRef = ((org.eclipse.jdt.internal.compiler.ast.JavadocAllocationExpression)compilerNode).type;", "+\t\t\t\t\t} ", "+\t\t\t\t\telse if (compilerNode instanceof org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend) {", "+\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = ((org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend)compilerNode).receiver;", "+\t\t\t\t\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.TypeReference) {", "+\t\t\t\t\t\t\ttypeRef = (org.eclipse.jdt.internal.compiler.ast.TypeReference) expression;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (typeRef != null) {", "+\t\t\t\t\t\tmethodRef.setQualifier(convert(typeRef));", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (node.getNodeType() == ASTNode.SIMPLE_NAME ||", "+\t\t\t\t\tif (compilerNode instanceof org.eclipse.jdt.internal.compiler.ast.TypeReference) {", "+//\t\t\t\t\t\tconvert((org.eclipse.jdt.internal.compiler.ast.TypeReference) compilerNode);", "+\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference typeRef = (org.eclipse.jdt.internal.compiler.ast.TypeReference) compilerNode;", "+\t\t\t\t\t\tName name = (Name) node;", "+\t\t\t\t\t\tif (name.isQualifiedName()) {", "+\t\t\t\t\t\t\tSimpleName simpleName = null;", "+\t\t\t\t\t\t\twhile (name.isQualifiedName()) {", "+\t\t\t\t\t\t\t\tsimpleName = ((QualifiedName) name).getName();", "+\t\t\t\t\t\t\t\trecordNodes(simpleName, typeRef);", "+\t\t\t\t\t\t\t\tname = ((QualifiedName) name).getQualifier();", "+\t\t\t\t\t\t\t\trecordNodes(name, typeRef);", "+\t\t\t\t\t\t\t}", "+//\t\t\t\t\t\t\tsimpleName = ((QualifiedName) name).getName();", "+//\t\t\t\t\t\t\trecordNodes(simpleName, typeRef);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}], "num": 22640}
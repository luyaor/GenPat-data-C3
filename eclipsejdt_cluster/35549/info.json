{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3b961b12b52ee2c10d88527f06cfe2a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e9775a7a37ce020f7444c05e1b79658", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "d32dbe370312bc68ef5b59c6268bfdfcda839b17", "commitAfterChange": "4b84620f8d71e6de7e42a2050aa5360e2143f846", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\tif (existingVariable instanceof LocalVariableBinding && this.hiddenVariableDepth == 0) {", "-\t\t\t\tscope.problemReporter().redefineLocal(this);", "+\t\t\tboolean localExists = existingVariable instanceof LocalVariableBinding; ", "+\t\t\tif (localExists && (this.bits & ASTNode.ShadowsOuterLocal) != 0 && scope.isLambdaSubscope()) {", "+\t\t\t\t\tscope.problemReporter().lambdaRedeclaresLocal(this);", "+\t\t\t} else if (localExists && this.hiddenVariableDepth == 0) {", "+\t\t\t\t\tscope.problemReporter().redefineLocal(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77557096b4866f952d9bd5b61131734d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "220cfdcea7bcdf14f7b578cffa489f3aeae3828a", "commitAfterChange": "d1752db0fdb22200a0abc280c6604c3cd3de8e50", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void resolve(BlockScope blockScope)", "signatureAfterChange": " public void resolve(BlockScope blockScope)", "diff": ["-\t\t\t\t\t\t&& (((LocalTypeBinding) existingType).scope.methodScope() == blockScope.methodScope() || blockScope.isLambdaSubscope())) {", "+\t\t\t\t\t\t&& ((LocalTypeBinding) existingType).scope.methodScope() == blockScope.methodScope()) {", "+\t\t\t} else if (existingType instanceof LocalTypeBinding && blockScope.isLambdaSubscope()", "+\t\t\t\t\t&& blockScope.enclosingLambdaScope().enclosingMethodScope() == ((LocalTypeBinding) existingType).scope.methodScope()) {", "+\t\t\t\tblockScope.problemReporter().duplicateNestedType(this);"]}], "num": 35549}
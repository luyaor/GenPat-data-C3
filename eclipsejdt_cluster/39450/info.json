{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b90d7cd59ae9c78f0bcdc864092ca669", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "398a5041616f254f2c7878fb7c844096", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  protected boolean findSourceFiles(IResourceDelta delta) throws CoreException", "signatureAfterChange": "  protected boolean findSourceFiles(IResourceDelta delta) throws CoreException", "diff": ["-\tfor (int i = 0, length = sourceFolders.length; i < length; i++) {", "-\t\tIResourceDelta sourceDelta = delta.findMember(sourceFolders[i].getProjectRelativePath());", "+\tfor (int i = 0, l = sourceLocations.length; i < l; i++) {", "+\t\tClasspathMultiDirectory md = sourceLocations[i];", "+\t\tIResourceDelta sourceDelta = delta.findMember(md.sourceFolder.getProjectRelativePath());", "-\t\t\tint segmentCount = sourceFolders[i].getLocation().segmentCount();", "+\t\t\tint segmentCount = sourceDelta.getFullPath().segmentCount();", "-\t\t\tfor (int c = 0, clength = children.length; c < clength; c++)", "-\t\t\t\tfindSourceFiles(children[c], segmentCount);", "+\t\t\tfor (int j = 0, m = children.length; j < m; j++)", "+\t\t\t\tfindSourceFiles(children[j], md, segmentCount);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81ca85eabdcc5d6f5e98168348c5b5a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "  public FieldBinding getField(char[] fieldName, boolean needResolve)", "signatureAfterChange": " public FieldBinding getField(char[] fieldName, boolean needResolve)", "diff": ["+// NOTE: the type of a field of a source type is resolved when needed", "-\tfor (int f = fields.length; --f >= 0;) {", "-\t\tFieldBinding field = fields[f];", "+\tfor (int i = 0, length = fields.length; i < length; i++) {", "+\t\tFieldBinding field = fields[i];", "-\t\t\tif (resolveTypeFor(field) != null)", "-\t\t\t\treturn field;", "-", "-\t\t\tint newSize = fields.length - 1;", "-\t\t\tif (newSize == 0) {", "-\t\t\t\tfields = NoFields;", "-\t\t\t} else {", "-\t\t\t\tFieldBinding[] newFields = new FieldBinding[newSize];", "-\t\t\t\tSystem.arraycopy(fields, 0, newFields, 0, f);", "-\t\t\t\tSystem.arraycopy(fields, f + 1, newFields, f, newSize - f);", "-\t\t\t\tfields = newFields;", "+\t\t\tFieldBinding result = null;", "+\t\t\ttry {", "+\t\t\t\tresult = resolveTypeFor(field);", "+\t\t\t\treturn result;", "+\t\t\t} finally {", "+\t\t\t\tif (result == null) {", "+\t\t\t\t\t// ensure fields are consistent reqardless of the error", "+\t\t\t\t\tint newSize = fields.length - 1;", "+\t\t\t\t\tif (newSize == 0) {", "+\t\t\t\t\t\tfields = NoFields;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tFieldBinding[] newFields = new FieldBinding[newSize];", "+\t\t\t\t\t\tSystem.arraycopy(fields, 0, newFields, 0, i);", "+\t\t\t\t\t\tSystem.arraycopy(fields, i + 1, newFields, i, newSize - i);", "+\t\t\t\t\t\tfields = newFields;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\treturn null;"]}], "num": 39450}
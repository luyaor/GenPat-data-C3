{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a5c4d8d3629137106767f1c67f980282", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc5c90e08047a7ae72ba6c161026d0a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeInputFileObject.java", "commitBeforeChange": "9fba4e7dd11006e339abd70df0a4cf770da6d0e9", "commitAfterChange": "33487cc981d428d38caef48b42bdb5a92d78e5bf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t@Override \tpublic CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException", "signatureAfterChange": " \t@Override \tpublic CharSequence getCharContent(boolean ignoreEncodingErrors) \t\t\tthrows IOException", "diff": ["-\tpublic CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {", "-\t\t// Use buffer size at least as big as the default size of the", "-\t\t// BufferedReader returned by openReader(), to reduce redundant", "-\t\t// copying.  See BufferedReader.read1() for details.", "-\t\tchar[] buffer = new char[8192];", "-\t\tStringWriter w = new StringWriter();", "-\t\tReader r = openReader(ignoreEncodingErrors);", "+\tpublic CharSequence getCharContent(boolean ignoreEncodingErrors)", "+\t\t\tthrows IOException {", "-\t\t\tint read = -1;", "-\t\t\twhile ((read = r.read(buffer)) != -1) {", "-\t\t\t\tw.write(buffer, 0, read);", "-\t\t\t}", "+\t\t\tchar[] chars = Util.getResourceContentsAsCharArray(this._file);", "+\t\t\treturn new String(chars);", "+\t\t} catch (CoreException e) {", "+\t\t\tthrow new IOException(e);", "-\t\tfinally {", "-\t\t\tr.close();", "-\t\t}", "-\t\treturn w.getBuffer();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d16fe52faf3c6d567da42e5684bd3c7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeInputFileObject.java", "commitBeforeChange": "7515dcbf0b2425523d6c7872cb12027c7c83661e", "commitAfterChange": "521b10019026729ea6f37775e2b59ebaf2f70e3f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t@Override \tpublic CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException", "signatureAfterChange": " \t@Override \tpublic CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException", "diff": ["-\t\t//TODO", "-\t\tthrow new UnsupportedOperationException(\"Not yet implemented\");", "+\t\t// Use buffer size at least as big as the default size of the", "+\t\t// BufferedReader returned by openReader(), to reduce redundant", "+\t\t// copying.  See BufferedReader.read1() for details.", "+\t\tchar[] buffer = new char[8192];", "+\t\tStringWriter w = new StringWriter();", "+\t\tReader r = openReader(ignoreEncodingErrors);", "+\t\ttry {", "+\t\t\tint read = -1;", "+\t\t\twhile ((read = r.read(buffer)) != -1) {", "+\t\t\t\tw.write(buffer, 0, read);", "+\t\t\t}", "+\t\t}", "+\t\tfinally {", "+\t\t\tr.close();", "+\t\t}", "+\t\treturn w.getBuffer();"]}], "num": 44861}
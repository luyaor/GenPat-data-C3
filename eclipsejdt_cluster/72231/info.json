{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47e2cd2ce31048e83fdbf9e112f07b4d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "742cb0dbbe52e82f792f1f375aeda30c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 18, "signatureBeforeChange": " protected int getPosition()", "signatureAfterChange": " public int[] getFramePositions()", "diff": ["-}", "-protected int getPosition() {", "-    // need to record a new stack frame at this position", "-    int pos = super.getPosition();", "-    this.framePositions.add(new Integer(this.position));", "-    storeStackMapFrame();", "-    return pos;", "-}", "+}", "+public int[] getFramePositions() {", "+\tSet set = this.framePositions.keySet();", "+\tint size = set.size();", "+\tint[] positions = new int[size];", "+\tint n = 0;", "+\tfor (Iterator iterator = set.iterator(); iterator.hasNext(); ) {", "+\t\tpositions[n++] = ((Integer) iterator.next()).intValue();", "+\t}", "+\tArrays.sort(positions);", "+//  System.out.print('[');", "+//  for (int n = 0; n < size; n++) {", "+//  \tif (n != 0) System.out.print(',');", "+//  \tSystem.out.print(positions[n]);", "+//  }", "+//  System.out.println(']');", "+\treturn positions;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e01ffa74615c874a50cd580640b0b654", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "535178e6ff3c7be5f5cdc90d8a470557840e3a3e", "commitAfterChange": "cdbb23d25684170107e611f9ad2770f482d2dd3b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private final static void buildFile(String filename, List listToDump) throws java.io.IOException", "signatureAfterChange": " private final static void buildFile(String filename, List listToDump)", "diff": ["-private final static void buildFile(String filename, List listToDump) throws java.io.IOException {", "-\tBufferedWriter writer = new BufferedWriter(new FileWriter(filename));", "-\tfor (Iterator iterator = listToDump.iterator(); iterator.hasNext(); ) {", "-\t\twriter.write(String.valueOf(iterator.next()));", "+private final static void buildFile(String filename, List listToDump) {", "+\tBufferedWriter writer = null;", "+\ttry {", "+\t\twriter = new BufferedWriter(new FileWriter(filename));", "+    \tfor (Iterator iterator = listToDump.iterator(); iterator.hasNext(); ) {", "+    \t\twriter.write(String.valueOf(iterator.next()));", "+    \t}", "+    \twriter.flush();", "+\t} catch(IOException e) {", "+\t\tif (writer != null) {", "+        \ttry {", "+\t\t\t\twriter.close();", "+\t\t\t} catch (IOException e1) {", "+\t\t\t\t// ignore", "+\t\t\t}", "+\t\t}", "-\twriter.flush();", "-\twriter.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbbbd2557b70304e32954c6786ef1696", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompiler.java", "commitBeforeChange": "46ea3b2fef612e233f18c1fb6cfcae1d94121264", "commitAfterChange": "b8315251ffb02e48cefcddb514a7641a6c9516c4", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic CompilationTask getTask(Writer out, \t\t\tJavaFileManager fileManager, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener, \t\t\tIterable<String> options, \t\t\tIterable<String> classes, \t\t\tIterable<? extends JavaFileObject> compilationUnits)", "signatureAfterChange": " \tpublic CompilationTask getTask(Writer out, \t\t\tJavaFileManager fileManager, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener, \t\t\tIterable<String> options, \t\t\tIterable<String> classes, \t\t\tIterable<? extends JavaFileObject> compilationUnits)", "diff": ["-\t\tthis.fileManager = fileManager;", "+\t\tif (fileManager != null) {", "+\t\t\tthis.fileManager = fileManager;", "+\t\t} else {", "+\t\t\tthis.fileManager = this.getStandardFileManager(diagnosticListener, null, null);", "+\t\t}", "-\t\tfor (Iterator<String> iterator = options.iterator(); iterator.hasNext(); ) {", "-\t\t\tfileManager.handleOption(iterator.next(), iterator);", "-\t\t}", "-\t\t", "-\t\tfor (String option : options) {", "-\t\t\tallOptions.add(option);", "+\t\tif (options != null) {", "+    \t\tfor (Iterator<String> iterator = options.iterator(); iterator.hasNext(); ) {", "+    \t\t\tthis.fileManager.handleOption(iterator.next(), iterator);", "+    \t\t}", "+    \t\tfor (String option : options) {", "+    \t\t\tallOptions.add(option);", "+    \t\t}"]}], "num": 72231}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb8f14cf93ee5d725852dd8b1483efc1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c51cee6b22d5f4ec4022d288b917526", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a17a9082800c426c4984b5ef76877aab1c8e09e6", "commitAfterChange": "efd527bb42c9215375b4d1cf91326767eee94a32", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "signatureAfterChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "diff": ["+\t\tfinal boolean sourceLevel18 = this.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8;", "+\t\t\tnext:", "+\t\t\t\t\t\tif (sourceLevel18) {", "+\t\t\t\t\t\t\tfor (int j = 0; j < startFoundSize; j++) {", "+\t\t\t\t\t\t\t\tMethodBinding concreteMethod = (MethodBinding) found.elementAt(j);", "+\t\t\t\t\t\t\t\tif (concreteMethod != null && environment().methodVerifier().areMethodsCompatible(concreteMethod, compatibleMethod))", "+\t\t\t\t\t\t\t\t\tcontinue next; // can skip this method since concreteMethod overrides it", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "757702151fd6c77f08305d5cdfadf8c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ae391996f2ba5153face2dc96f44fbe25cc6cfcf", "commitAfterChange": "bd2d6cba91ea60af9a4818216d0ebbc8f0ef4bb2", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "signatureAfterChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "diff": ["-\t\t\t\t\t\tif (concreteMatch != null && concreteMatch.declaringClass.findSuperTypeOriginatingFrom(compatibleMethod.declaringClass) != null)", "-\t\t\t\t\t\t\tif (environment().methodVerifier().isParameterSubsignature(concreteMatch.original(), compatibleMethod.original()))", "-\t\t\t\t\t\t\t\tcontinue; // can skip this method since concreteMatch overrides it", "+\t\t\t\t\t\tif (concreteMatch != null && environment().methodVerifier().doesMethodOverride(concreteMatch, compatibleMethod))", "+\t\t\t\t\t\t\tcontinue; // can skip this method since concreteMatch overrides it"]}], "num": 61515}
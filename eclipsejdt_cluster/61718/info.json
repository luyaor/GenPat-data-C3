{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de6ec396ed9388832d7de2f71e82273e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "300598ac2ad14dbc27479b37ca9bcebb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "1af62c8ac8c29f055bb8404d4de6ad60e868f8c4", "commitAfterChange": "1c68a970a8cbd8bfa2174955d5c78e149d7e6268", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 71, "signatureBeforeChange": "     void addMarker(final IResource resource, Map<String, Object> markerAttrs)", "signatureAfterChange": "     void addProblem(IFile resource,         \t\t        int start,      \t\t\t\tint end,                     APTProblem.Severity severity,                      String msg,                      int line)", "diff": ["-\t */", "-    void addMarker(final IResource resource, Map<String, Object> markerAttrs)", "+     */", "+    void addProblem(IFile resource, ", "+       \t\t        int start, ", "+    \t\t\t\tint end,", "+                    APTProblem.Severity severity, ", "+                    String msg, ", "+                    int line)", "-\t\t_markerInfos.add( new MarkerInfo(resource, markerAttrs) );", "+    \t// not going to post any markers to resource outside of the one we are currently ", "+    \t// processing during reconcile phase.", "+    \tif( _phase == Phase.RECONCILE && resource != null && !resource.equals(_file) )", "+    \t\treturn;", "+    \tif(resource == null)", "+    \t\tresource = _file;", "+    \tfinal APTProblem newProblem = ", "+        \tnew APTProblem(getUniqueProblemId(), msg, severity, resource, start, end, line);", "+    \tList<IProblem> problems = _allProblems.get(resource);", "+    \tif( problems == null ){", "+    \t\tproblems = new ArrayList<IProblem>(4);", "+    \t\t_allProblems.put(resource, problems);    \t\t", "+    \t}", "+    \tproblems.add(newProblem);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57dd4d079627150c5affc78b12dea8e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "c031ab550e0c935f0d3bdde7460740acefcf0f31", "commitAfterChange": "95caafe5d5c2d961ca8fd355b42818fe4745ffb5", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected IMethodBinding getMethodBinding(org.eclipse.jdt.internal.compiler.lookup.MethodBinding methodBinding)", "signatureAfterChange": " \tprotected IMethodBinding getMethodBinding(org.eclipse.jdt.internal.compiler.lookup.MethodBinding methodBinding)", "diff": ["+\t\tif (methodBinding != null && !methodBinding.isValidBinding()) {", "+\t\t\t/*", "+\t\t\t * http://dev.eclipse.org/bugs/show_bug.cgi?id=23597\r\t\t\t */", "+\t\t\tProblemMethodBinding problemMethodBinding = (ProblemMethodBinding) methodBinding;", "+\t\t\tif (methodBinding.problemId() == ProblemReasons.NotVisible) {", "+\t\t\t\tReferenceBinding declaringClass = methodBinding.declaringClass;", "+\t\t\t\tif (declaringClass != null) {", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding exactBinding = declaringClass.getExactMethod(methodBinding.selector, methodBinding.parameters);", "+\t\t\t\t\tif (exactBinding != null) {", "+\t\t\t\t\t\tIMethodBinding binding = (IMethodBinding) this.compilerBindingsToASTBindings.get(methodBinding);", "+\t\t\t\t\t\tif (binding != null) {", "+\t\t\t\t\t\t\treturn binding;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbinding = new MethodBinding(this, exactBinding);", "+\t\t\t\t\t\tthis.compilerBindingsToASTBindings.put(methodBinding, binding);", "+\t\t\t\t\t\treturn binding;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 61718}
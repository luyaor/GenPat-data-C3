{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1070254249b73c5385a8fdb7599000e8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "308c244a6926046797e8826ade8de770", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "c65657c3db5994a0f7c7d598e6c69a8e236f8125", "commitAfterChange": "4d22b6cee44bdb8aa24a4ca5266770881b141e50", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tIClassFile classFile, \t\tboolean resolveBindings)", "signatureAfterChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tIClassFile classFile, \t\tboolean resolveBindings)", "diff": ["-\t\t\tString source = null;", "+\t\t\tchar[] source = null;", "+\t\t\tString sourceString = null;", "-\t\t\t\tsource = classFile.getSource();", "+\t\t\t\tsourceString = classFile.getSource();", "-\t\t\tif (source == null) {", "+\t\t\tif (sourceString == null) {", "-\t\t\t\treturn AST.parseCompilationUnit(source.toCharArray());", "+\t\t\t\treturn AST.parseCompilationUnit(source);", "-\t\t\treturn AST.parseCompilationUnit(", "-\t\t\t\tsource.toCharArray(),", "-\t\t\t\tclassFile.getElementName(),", "-\t\t\t\tclassFile.getJavaProject());", "+\t\t\t", "+\t\t\tsource = sourceString.toCharArray();", "+\t\t\tStringBuffer buffer = new StringBuffer(\".java\"); //$NON-NLS-1$", "+\t\t\t", "+\t\t\tString classFileName = classFile.getElementName(); // this includes the trailing .class", "+\t\t\tbuffer.insert(0, classFileName.toCharArray(), 0, classFileName.indexOf('.'));", "+\t\t\tIJavaProject project = classFile.getJavaProject();", "+\t\t\ttry {", "+\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration =", "+\t\t\t\t\tCompilationUnitResolver.resolve(", "+\t\t\t\t\t\tsource,", "+\t\t\t\t\t\tCharOperation.splitOn('.', classFile.getType().getPackageFragment().getElementName().toCharArray()),", "+\t\t\t\t\t\tbuffer.toString(),", "+\t\t\t\t\t\tproject,", "+\t\t\t\t\t\tnew AbstractSyntaxTreeVisitorAdapter());", "+\t\t\t\tASTConverter converter = new ASTConverter(project.getOptions(true), true);", "+\t\t\t\tAST ast = new AST();", "+\t\t\t\tBindingResolver resolver = new DefaultBindingResolver(compilationUnitDeclaration.scope);", "+\t\t\t\tast.setBindingResolver(resolver);", "+\t\t\t\tconverter.setAST(ast);", "+\t\t\t", "+\t\t\t\tCompilationUnit cu = converter.convert(compilationUnitDeclaration, source);", "+\t\t\t\tcu.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);", "+\t\t\t\tresolver.storeModificationCount(ast.modificationCount());", "+\t\t\t\treturn cu;", "+\t\t\t} catch(JavaModelException e) {", "+\t\t\t\t/* if a JavaModelException is thrown trying to retrieve the name environment", "+\t\t\t\t * then we simply do a parsing without creating bindings.", "+\t\t\t\t * Therefore all binding resolution will return null.", "+\t\t\t\t */", "+\t\t\t\treturn parseCompilationUnit(source);\t\t\t", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ffd0008842291a2b140324ff09bc68f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tIClassFile classFile, \t\tboolean resolveBindings, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tIClassFile classFile, \t\tboolean resolveBindings)", "diff": ["+", "+\t\tif (classFile == null) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tASTParser c = ASTParser.internalNewParser2();", "+\t\tc.setSource(classFile);", "+\t\tc.setResolveBindings(resolveBindings);", "+\t\tASTNode result = c.createAST(null);", "+\t\treturn (CompilationUnit) result;", "-\t\tif (owner == null) {", "-\t\t\towner = DefaultWorkingCopyOwner.PRIMARY;", "-\t\t}", "-\t\tchar[] source = null;", "-\t\tString sourceString = null;", "-\t\ttry {", "-\t\t\tsourceString = classFile.getSource();", "-\t\t} catch (JavaModelException e) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\tif (sourceString == null) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\tsource = sourceString.toCharArray();", "-\t\tif (!resolveBindings) {", "-\t\t\treturn AST.parseCompilationUnit(source);", "-\t\t}", "-\t\tStringBuffer buffer = new StringBuffer(SuffixConstants.SUFFIX_STRING_java);", "-\t\t", "-\t\tString classFileName = classFile.getElementName(); // this includes the trailing .class", "-\t\tbuffer.insert(0, classFileName.toCharArray(), 0, classFileName.indexOf('.'));", "-\t\tIJavaProject project = classFile.getJavaProject();", "-\t\tCompilationUnitDeclaration compilationUnitDeclaration = null;", "-\t\ttry {", "-\t\t\t// parse and resolve", "-\t\t\tcompilationUnitDeclaration =", "-\t\t\t\tCompilationUnitResolver.resolve(", "-\t\t\t\t\tsource,", "-\t\t\t\t\tCharOperation.splitOn('.', classFile.getType().getPackageFragment().getElementName().toCharArray()),", "-\t\t\t\t\tbuffer.toString(),", "-\t\t\t\t\tproject,", "-\t\t\t\t\tnull/*no node searcher*/,", "-\t\t\t\t\tfalse/*don't cleanup*/,", "-\t\t\t\t\towner,", "-\t\t\t\t\tmonitor);", "-\t\t\tASTConverter converter = new ASTConverter(project.getOptions(true), true, monitor);", "-\t\t\tAST ast = new AST();", "-\t\t\tBindingResolver resolver = new DefaultBindingResolver(compilationUnitDeclaration.scope);", "-\t\t\tast.setBindingResolver(resolver);", "-\t\t\tconverter.setAST(ast);", "-\t\t", "-\t\t\tCompilationUnit cu = converter.convert(compilationUnitDeclaration, source);", "-\t\t\tcu.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);", "-\t\t\tresolver.storeModificationCount(ast.modificationCount());", "-\t\t\treturn cu;", "-\t\t} catch(JavaModelException e) {", "-\t\t\t/* if a JavaModelException is thrown trying to retrieve the name environment", "-\t\t\t * then we simply do a parsing without creating bindings.", "-\t\t\t * Therefore all binding resolution will return null.", "-\t\t\t */", "-\t\t\treturn parseCompilationUnit(source);\t\t\t", "-\t\t} finally {", "-\t\t\tif (compilationUnitDeclaration != null) {", "-\t\t\t\tcompilationUnitDeclaration.cleanUp();", "-\t\t\t}", "-\t\t}"]}], "num": 11961}
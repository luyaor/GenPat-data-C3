{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "296ed0ba03d5af1be16ac70bbc11e45f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc9bb6177b72670a8b5078d6e9b7cb32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "1cc3b3e7a0647f40743545ab9e305d8f4bd58bbd", "commitAfterChange": "9e14e700eaf4553e71d5d5792e1c8a3558660da3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t\t\t\tpublic void acceptResult(CompilationResult result)", "signatureAfterChange": " \tpublic Compiler( \t\t\tINameEnvironment environment, \t\t\tIErrorHandlingPolicy policy, \t\t\tMap settings, \t\t\tfinal ICompilerRequestor requestor, \t\t\tIProblemFactory problemFactory, \t\t\tboolean parseLiteralExpressionsAsConstants, \t\t\tboolean storeAnnotations, \t\t\tboolean statementsRecovery)", "diff": ["-\t\t\tthis.requestor = new ICompilerRequestor(){", "-\t\t\t\tpublic void acceptResult(CompilationResult result){", "-\t\t\t\t\tif (DebugRequestor.isActive()){", "-\t\t\t\t\t\tDebugRequestor.acceptDebugResult(result);", "-\t\t\t\t\t}", "-\t\t\t\t\trequestor.acceptResult(result);", "-\t\t\t\t}", "+\t\t\tINameEnvironment environment,", "+\t\t\tIErrorHandlingPolicy policy,", "+\t\t\tMap settings,", "+\t\t\tfinal ICompilerRequestor requestor,", "+\t\t\tIProblemFactory problemFactory,", "+\t\t\tboolean parseLiteralExpressionsAsConstants,", "+\t\t\tboolean storeAnnotations,", "+\t\t\tboolean statementsRecovery) {", "+\t\tthis(environment, policy, settings,\trequestor, problemFactory, ", "+\t\t\t\tnull, // default ", "+\t\t\t\tparseLiteralExpressionsAsConstants, storeAnnotations, statementsRecovery, true);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc3025129568870d7a9710675dab3292", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "c99e3bd7df24eb7b0133eb18cfef3f12a0f60a4d", "commitAfterChange": "639c767e46ba1affc29fe53d2703bf4af137793b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate Compiler( \t\t\tINameEnvironment environment, \t\t\tIErrorHandlingPolicy policy, \t\t\tMap settings, \t\t\tfinal ICompilerRequestor requestor, \t\t\tIProblemFactory problemFactory, \t\t\tPrintWriter out, \t\t\tboolean parseLiteralExpressionsAsConstants, \t\t\tboolean storeAnnotations, \t\t\tboolean flag, \t\t\tboolean statementsRecovery)", "signatureAfterChange": " \tpublic Compiler( \t\t\tINameEnvironment environment, \t\t\tIErrorHandlingPolicy policy, \t\t\tCompilerOptions options, \t\t\tfinal ICompilerRequestor requestor, \t\t\tIProblemFactory problemFactory, \t\t\tPrintWriter out)", "diff": ["-\tprivate Compiler(", "+\tpublic Compiler(", "-\t\t\tMap settings,", "+\t\t\tCompilerOptions options,", "-\t\t\tPrintWriter out,", "-\t\t\tboolean parseLiteralExpressionsAsConstants,", "-\t\t\tboolean storeAnnotations,", "-\t\t\tboolean flag,", "-\t\t\tboolean statementsRecovery) {", "-", "-\t\t// create a problem handler given a handling policy", "-\t\tthis.options = new CompilerOptions(settings);", "-\t\tthis.options.performStatementsRecovery = statementsRecovery;", "-\t\tif (flag) { // boolean parameters are significant, pass them down", "-\t\t\tthis.options.parseLiteralExpressionsAsConstants = parseLiteralExpressionsAsConstants;", "-\t\t\tthis.options.storeAnnotations = storeAnnotations;", "-\t\t}", "+\t\t\tPrintWriter out) {", "+\t\t", "+\t\tthis.options = options;"]}], "num": 58449}
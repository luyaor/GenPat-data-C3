{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b4f2e733a78d735065770a4ba790d73", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99aefe4585e712cb7e8323090cb7f777", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public StringBuffer printStatement(int indent, StringBuffer output)", "signatureAfterChange": "  public StringBuffer printStatement(int indent, StringBuffer output)", "diff": ["-\tprintIndent(indent, output).append(\"try \\n\"); //$NON-NLS-1$", "+\tint length = this.resources.length;", "+\tprintIndent(indent, output).append(\"try\" + (length == 0 ? \"\\n\" : \" (\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\tfor (int i = 0; i < length; i++) {", "+\t\tthis.resources[i].printAsExpression(0, output);", "+\t\tif (i != length - 1) {", "+\t\t\toutput.append(\";\\n\"); //$NON-NLS-1$", "+\t\t\tprintIndent(indent + 2, output);", "+\t\t}", "+\t}", "+\tif (length > 0) {", "+\t\toutput.append(\")\\n\"); //$NON-NLS-1$", "+\t}", "-\t\t\t\tthis.catchArguments[i].print(0, output).append(\") \"); //$NON-NLS-1$", "+\t\t\t\tthis.catchArguments[i].print(0, output).append(\")\\n\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8476227570f146e427fa56013992ca2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/MarkedASTFlattener.java", "commitBeforeChange": "ff1eb602a8aea39b1e15b206441aadf76bfaa984", "commitAfterChange": "dc5ee42cb3e5694c60c3a1f62c20766cb3cb2274", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic void process(CompilationUnit cu, AbstractASTTests.MarkerInfo mf)", "signatureAfterChange": " \t \tpublic void process(CompilationUnit cu, AbstractASTTests.MarkerInfo mf)", "diff": ["+\t\tint length = mf.astStarts.length;", "+\t\tthis.foundNodeFromMarker = new boolean[length];", "+\t\t", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tif (!this.foundNodeFromMarker[i]) {", "+\t\t\t\tthis.markedNodesBuffer.append('\\n');", "+\t\t\t\tthis.markedNodesBuffer.append(String.valueOf(i + 1));", "+\t\t\t\tthis.markedNodesBuffer.append(':');", "+\t\t\t\tthis.markedNodesBuffer.append(NO_CORRESPONDING_NODE);", "+\t\t\t}", "+\t\t}"]}], "num": 39023}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d4dbf03a3fdb8d27be6b45cdd72f4e12", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40e5c0ffd61d9f5ce0305070040c86d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/FieldInfo.java", "commitBeforeChange": "6279337ba7a56fe0ba602068e82284092e08edd4", "commitAfterChange": "a3974de2e53f4a7f6384d82823b901bd516b0970", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public Object getWrappedConstantValue() throws ClassFormatException", "signatureAfterChange": " public Object getWrappedConstantValue() throws ClassFormatException", "diff": ["-\t\t\tConstant constant = getConstant();", "-\t\t\tswitch (constant.typeID()) {", "+\t\t\tConstant fieldConstant = getConstant();", "+\t\t\tswitch (fieldConstant.typeID()) {", "-\t\t\t\t\tthis.wrappedConstantValue = new Integer(constant.intValue());", "+\t\t\t\t\tthis.wrappedConstantValue = new Integer(fieldConstant.intValue());", "-\t\t\t\t\tthis.wrappedConstantValue = new Byte(constant.byteValue());", "+\t\t\t\t\tthis.wrappedConstantValue = new Byte(fieldConstant.byteValue());", "-\t\t\t\t\tthis.wrappedConstantValue = new Short(constant.shortValue());", "+\t\t\t\t\tthis.wrappedConstantValue = new Short(fieldConstant.shortValue());", "-\t\t\t\t\tthis.wrappedConstantValue = new Character(constant.charValue());", "+\t\t\t\t\tthis.wrappedConstantValue = new Character(fieldConstant.charValue());", "-\t\t\t\t\tthis.wrappedConstantValue = new Float(constant.floatValue());", "+\t\t\t\t\tthis.wrappedConstantValue = new Float(fieldConstant.floatValue());", "-\t\t\t\t\tthis.wrappedConstantValue = new Double(constant.doubleValue());", "+\t\t\t\t\tthis.wrappedConstantValue = new Double(fieldConstant.doubleValue());", "-\t\t\t\t\tthis.wrappedConstantValue = new Boolean(constant.booleanValue());", "+\t\t\t\t\tthis.wrappedConstantValue = new Boolean(fieldConstant.booleanValue());", "-\t\t\t\t\tthis.wrappedConstantValue = new Long(constant.longValue());", "+\t\t\t\t\tthis.wrappedConstantValue = new Long(fieldConstant.longValue());", "-\t\t\t\t\tthis.wrappedConstantValue = constant.stringValue();", "+\t\t\t\t\tthis.wrappedConstantValue = fieldConstant.stringValue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57c8c016671fa338ee5294fd44a997fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "204dbb0f962baec45cc155adc0f25897806fc936", "commitAfterChange": "8d7962f9f430b3236797be4f077716228c08370e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void addFieldInfo(FieldBinding fieldBinding)", "signatureAfterChange": " \tpublic void addFieldInfo(FieldBinding fieldBinding)", "diff": ["-\t\tif (fieldBinding.constant != Constant.NotAConstant){", "+\t\tif (fieldBinding.isConstantValue()){", "-\t\t\tswitch (fieldBinding.constant.typeID()) {", "+\t\t\tConstant fieldConstant = fieldBinding.constant();", "+\t\t\tswitch (fieldConstant.typeID()) {", "-\t\t\t\t\t\tconstantPool.literalIndex(fieldBinding.constant.booleanValue() ? 1 : 0);", "+\t\t\t\t\t\tconstantPool.literalIndex(fieldConstant.booleanValue() ? 1 : 0);", "-\t\t\t\t\t\tconstantPool.literalIndex(fieldBinding.constant.intValue());", "+\t\t\t\t\t\tconstantPool.literalIndex(fieldConstant.intValue());", "-\t\t\t\t\t\tconstantPool.literalIndex(fieldBinding.constant.floatValue());", "+\t\t\t\t\t\tconstantPool.literalIndex(fieldConstant.floatValue());", "-\t\t\t\t\t\tconstantPool.literalIndex(fieldBinding.constant.doubleValue());", "+\t\t\t\t\t\tconstantPool.literalIndex(fieldConstant.doubleValue());", "-\t\t\t\t\t\tconstantPool.literalIndex(fieldBinding.constant.longValue());", "+\t\t\t\t\t\tconstantPool.literalIndex(fieldConstant.longValue());", "-\t\t\t\t\t\t\t((StringConstant) fieldBinding.constant).stringValue());", "+\t\t\t\t\t\t\t((StringConstant) fieldConstant).stringValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "809aabe2505de9422d776b407a7e51c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "34ee213dde08a7453eec3b2a2a0e314e1d2814a6", "commitAfterChange": "7350d2407528c733101203f94e4081cd258cb05c", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " public void generateConstant(Constant constant, int implicitConversionCode)", "signatureAfterChange": " public void generateConstant(Constant constant, int implicitConversionCode)", "diff": ["-\tif (targetTypeID != 0) {", "-\t\tswitch (targetTypeID) {", "-\t\t\tcase TypeIds.T_boolean :", "-\t\t\t\tgenerateInlinedValue(constant.booleanValue());", "-\t\t\t\tbreak;", "-\t\t\tcase TypeIds.T_char :", "-\t\t\t\tgenerateInlinedValue(constant.charValue());", "-\t\t\t\tbreak;", "-\t\t\tcase TypeIds.T_byte :", "-\t\t\t\tgenerateInlinedValue(constant.byteValue());", "-\t\t\t\tbreak;", "-\t\t\tcase TypeIds.T_short :", "-\t\t\t\tgenerateInlinedValue(constant.shortValue());", "-\t\t\t\tbreak;", "-\t\t\tcase TypeIds.T_int :", "-\t\t\t\tgenerateInlinedValue(constant.intValue());", "-\t\t\t\tbreak;", "-\t\t\tcase TypeIds.T_long :", "-\t\t\t\tgenerateInlinedValue(constant.longValue());", "-\t\t\t\tbreak;", "-\t\t\tcase TypeIds.T_float :", "-\t\t\t\tgenerateInlinedValue(constant.floatValue());", "-\t\t\t\tbreak;", "-\t\t\tcase TypeIds.T_double :", "-\t\t\t\tgenerateInlinedValue(constant.doubleValue());", "-\t\t\t\tbreak;", "-\t\t\tcase TypeIds.T_JavaLangString :", "-\t\t\t\tldc(constant.stringValue());", "-\t\t}", "-\t} else {", "-\t\tldc(constant.stringValue());", "+\tif (targetTypeID == 0) targetTypeID = constant.typeID(); // use default constant type", "+\tswitch (targetTypeID) {", "+\t\tcase TypeIds.T_boolean :", "+\t\t\tgenerateInlinedValue(constant.booleanValue());", "+\t\t\tbreak;", "+\t\tcase TypeIds.T_char :", "+\t\t\tgenerateInlinedValue(constant.charValue());", "+\t\t\tbreak;", "+\t\tcase TypeIds.T_byte :", "+\t\t\tgenerateInlinedValue(constant.byteValue());", "+\t\t\tbreak;", "+\t\tcase TypeIds.T_short :", "+\t\t\tgenerateInlinedValue(constant.shortValue());", "+\t\t\tbreak;", "+\t\tcase TypeIds.T_int :", "+\t\t\tgenerateInlinedValue(constant.intValue());", "+\t\t\tbreak;", "+\t\tcase TypeIds.T_long :", "+\t\t\tgenerateInlinedValue(constant.longValue());", "+\t\t\tbreak;", "+\t\tcase TypeIds.T_float :", "+\t\t\tgenerateInlinedValue(constant.floatValue());", "+\t\t\tbreak;", "+\t\tcase TypeIds.T_double :", "+\t\t\tgenerateInlinedValue(constant.doubleValue());", "+\t\t\tbreak;", "+\t\tcase TypeIds.T_JavaLangString :", "+\t\t\tldc(constant.stringValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bae7287180ceae0f8c008641b3a2fbc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/FieldInfo.java", "commitBeforeChange": "b9853bf41cff827b9d9db35c185e2e1a189aee4a", "commitAfterChange": "35e826e1adf840e339aa800d2a004ceb418099b6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public Object getWrappedConstantValue() throws ClassFormatException", "signatureAfterChange": "\r public Object getWrappedConstantValue() throws ClassFormatException", "diff": ["-\tint attributesCount = u2At(6);\r", "-\tint readOffset = 8;\r", "-\tfor (int i = 0; i < attributesCount; i++) {\r", "-\t\tint utf8Offset = constantPoolOffsets[u2At(8)] - structOffset;\r", "-\t\tchar[] attributeName = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));\r", "-\t\tif (CharOperation\r", "-\t\t\t.equals(attributeName, ConstantValueName)) {\r", "-\t\t\t// read the right constant\r", "-\t\t\tint relativeOffset = constantPoolOffsets[u2At(14)] - structOffset;\r", "-\t\t\tswitch (u1At(relativeOffset)) {\r", "-\t\t\t\tcase IntegerTag :\r", "-\t\t\t\t\treturn new Integer(i4At(relativeOffset + 1));\r", "-\t\t\t\tcase FloatTag :\r", "-\t\t\t\t\treturn new Float(floatAt(relativeOffset + 1));\r", "-\t\t\t\tcase DoubleTag :\r", "-\t\t\t\t\treturn new Double(doubleAt(relativeOffset + 1));\r", "-\t\t\t\tcase LongTag :\r", "-\t\t\t\t\treturn new Long(i8At(relativeOffset + 1));\r", "-\t\t\t\tcase StringTag :\r", "-\t\t\t\t\tutf8Offset = constantPoolOffsets[u2At(relativeOffset + 1)] - structOffset;\r", "-\t\t\t\t\treturn String.valueOf(utf8At(utf8Offset + 3, u2At(utf8Offset + 1)));\r", "+\tif (this.wrappedConstantValue == null) {\r", "+\t\tif (hasConstant()) {\r", "+\t\t\tConstant constant = getConstant();\r", "+\t\t\tswitch (constant.typeID()) {\r", "+\t\t\t\tcase T_int :\r", "+\t\t\t\t\tthis.wrappedConstantValue = new Integer(constant.intValue());\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase T_byte :\r", "+\t\t\t\t\tthis.wrappedConstantValue = new Byte(constant.byteValue());\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase T_short :\r", "+\t\t\t\t\tthis.wrappedConstantValue = new Short(constant.shortValue());\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase T_char :\r", "+\t\t\t\t\tthis.wrappedConstantValue = new Character(constant.charValue());\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase T_float :\r", "+\t\t\t\t\tthis.wrappedConstantValue = new Float(constant.floatValue());\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase T_double :\r", "+\t\t\t\t\tthis.wrappedConstantValue = new Double(constant.doubleValue());\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase T_boolean :\r", "+\t\t\t\t\tthis.wrappedConstantValue = new Boolean(constant.booleanValue());\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase T_long :\r", "+\t\t\t\t\tthis.wrappedConstantValue = new Long(constant.longValue());\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase T_String :\r", "+\t\t\t\t\tthis.wrappedConstantValue = constant.stringValue();\r", "-\t\treadOffset += (6 + u4At(readOffset + 2));\r", "-\treturn null;\r", "+\treturn this.wrappedConstantValue;\r"]}], "num": 24333}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aacbfd4b72575594d49c40344288d101", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "030bd4b5658fb3e9a9191a4285c50bf2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CommitWorkingCopyOperation.java", "commitBeforeChange": "945eb913d05c9d087ac6ab6e78eee774a46bbd75", "commitAfterChange": "32ce57e29f2dabec8de78773be20ab77c7edc1a5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\t\tCompilationUnit copy = (CompilationUnit)getCompilationUnit();", "-\t\t\tICompilationUnit original = copy.getPrimary();", "+\t\t\tCompilationUnit workingCopy = (CompilationUnit)getCompilationUnit();", "+\t\t\tICompilationUnit primary = workingCopy.getPrimary();", "-\t\t\t", "-\t\t\tif (!original.isOpen()) {", "+\t\t\tif (!primary.isOpen()) {", "-\t\t\t\toriginal.open(null);", "+\t\t\t\tprimary.open(null);", "-\t\t\tif (Util.isExcluded(original)) {", "+\t\t\tif (Util.isExcluded(primary)) {", "-\t\t\t\tdeltaBuilder = new JavaElementDeltaBuilder(original);", "+\t\t\t\tdeltaBuilder = new JavaElementDeltaBuilder(primary);", "-\t\t\tIBuffer originalBuffer = original.getBuffer();", "-\t\t\tif (originalBuffer == null) return;", "-\t\t\tchar[] originalContents = originalBuffer.getCharacters();", "+\t\t\tIBuffer primaryBuffer = primary.getBuffer();", "+\t\t\tif (primaryBuffer == null) return;", "+\t\t\tchar[] primaryContents = primaryBuffer.getCharacters();", "-\t\t\t\tIBuffer copyBuffer = copy.getBuffer();", "-\t\t\t\tif (copyBuffer == null) return;", "-\t\t\t\toriginalBuffer.setContents(copyBuffer.getCharacters());", "-\t\t\t\toriginal.save(fMonitor, fForce);", "-\t\t\t\tthis.setAttribute(HAS_MODIFIED_RESOURCE_ATTR, TRUE); ", "+\t\t\t\tIBuffer workingCopyBuffer = workingCopy.getBuffer();", "+\t\t\t\tif (workingCopyBuffer == null) return;", "+\t\t\t\tprimaryBuffer.setContents(workingCopyBuffer.getCharacters());", "+\t\t\t\tprimary.save(fMonitor, fForce);", "+\t\t\t\tsetAttribute(HAS_MODIFIED_RESOURCE_ATTR, TRUE); ", "-\t\t\t\t\toriginalBuffer.setContents(originalContents);", "+\t\t\t\t\tprimaryBuffer.setContents(primaryContents);", "-\t\t\tcopy.updateTimeStamp((CompilationUnit)original);", "-\t\t\tcopy.makeConsistent(this);", "+\t\t\tworkingCopy.updateTimeStamp((CompilationUnit)primary);", "+\t\t\tworkingCopy.makeConsistent(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6927cf48a0853cb453094dcdedb6bd57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CommitWorkingCopyOperation.java", "commitBeforeChange": "ce626f2cf20b80f05d6e3be2ff345a0d4ffc18b5", "commitAfterChange": "57bbae793b080e332ffbe7d9a1eee58929157c9e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["+\t\t\tboolean isPrimary = workingCopy.isPrimary();", "-\t\t\t", "+\t\t\t\t", "-\t\t\t\tif (!primary.isOpen()) {", "+\t\t\t\tif (!isPrimary && !primary.isOpen()) {", "-\t\t\t\t// creates the delta builder (this remembers the content of the cu)\t", "-\t\t\t\tif (!Util.isExcluded(primary)) {", "+\t\t\t\t// creates the delta builder (this remembers the content of the cu) if:", "+\t\t\t\t// - it is not excluded", "+\t\t\t\t// - and it is not a primary or it is a non-consistent primary", "+\t\t\t\tif (!Util.isExcluded(workingCopy) && (!isPrimary || !workingCopy.isConsistent())) {", "-\t\t\t\tif (primaryBuffer == null) return;", "-\t\t\t\tchar[] primaryContents = primaryBuffer.getCharacters();", "-\t\t\t\tboolean hasSaved = false;", "-\t\t\t\ttry {", "-\t\t\t\t\tIBuffer workingCopyBuffer = workingCopy.getBuffer();", "-\t\t\t\t\tif (workingCopyBuffer == null) return;", "-\t\t\t\t\tprimaryBuffer.setContents(workingCopyBuffer.getCharacters());", "+\t\t\t\tif (!isPrimary) {", "+\t\t\t\t\tif (primaryBuffer == null) return;", "+\t\t\t\t\tchar[] primaryContents = primaryBuffer.getCharacters();", "+\t\t\t\t\tboolean hasSaved = false;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tIBuffer workingCopyBuffer = workingCopy.getBuffer();", "+\t\t\t\t\t\tif (workingCopyBuffer == null) return;", "+\t\t\t\t\t\tprimaryBuffer.setContents(workingCopyBuffer.getCharacters());", "+\t\t\t\t\t\tprimaryBuffer.save(fMonitor, fForce);", "+\t\t\t\t\t\tprimary.makeConsistent(this);", "+\t\t\t\t\t\thasSaved = true;", "+\t\t\t\t\t} finally {", "+\t\t\t\t\t\tif (!hasSaved){", "+\t\t\t\t\t\t\t// restore original buffer contents since something went wrong", "+\t\t\t\t\t\t\tprimaryBuffer.setContents(primaryContents);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// for a primary working copy no need to set the content of the buffer again", "-\t\t\t\t\thasSaved = true;", "-\t\t\t\t} finally {", "-\t\t\t\t\tif (!hasSaved){", "-\t\t\t\t\t\t// restore original buffer contents since something went wrong", "-\t\t\t\t\t\tprimaryBuffer.setContents(primaryContents);", "-\t\t\t\t\t}"]}], "num": 31395}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84f578426e2bb062d2eb88a005168c02", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38f2d4590cb14bb3ff29639a855a6e8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "d5153db1b78be1240488c00ed97be6f8d4f85142", "commitAfterChange": "703ea70d31fea8142c2f0c6536ccedc3e7344670", "methodNumberBeforeChange": 259, "methodNumberAfterChange": 261, "signatureBeforeChange": " public void testBug304081b() throws Exception", "signatureAfterChange": " public void testBug305037() throws Exception", "diff": ["- */", "-public void testBug304081b() throws Exception {", "-\tFile libDir = null;", "-\ttry {", "-", "-\t\tIJavaProject proj = this.createJavaProject(\"P\", new String[] {}, \"bin\");", "-\t\tIClasspathEntry[] classpath = new IClasspathEntry[1];", "-\t\tlibDir = new File(proj.getResource().getLocation().toPortableString());", "-\t\tFile libJar = new File(libDir, \"container.jar\");", "-\t\t", "-\t\taddLibrary(proj, \"container.jar\", null, new String[0], ", "-\t\t\t\tnew String[] {", "-\t\t\t\t\t\"META-INF/MANIFEST.MF\",", "-\t\t\t\t\t\"Manifest-Version: 1.0\\n\" +", "-\t\t\t\t\t\"Class-Path: lib1.jar\\n\",", "-\t\t\t\t},", "-\t\t\t\tJavaCore.VERSION_1_4);", "-\t\tcreateFile(\"/P/lib1.jar\", \"\");", "-\t\t", "-\t\tClasspathContainerInitializer initializer= JavaCore.getClasspathContainerInitializer(JavaCore.USER_LIBRARY_CONTAINER_ID);", "-\t\tString libraryName = \"TestUserLibrary\";", "-\t\tIPath containerPath = new Path(JavaCore.USER_LIBRARY_CONTAINER_ID);", "-\t\tUserLibraryClasspathContainer containerSuggestion = new UserLibraryClasspathContainer(libraryName);", "-\t\tinitializer.requestClasspathContainerUpdate(containerPath.append(libraryName), null, containerSuggestion);", "-", "-\t\tIEclipsePreferences preferences = new InstanceScope().getNode(JavaCore.PLUGIN_ID);", "-\t\tString propertyName = JavaModelManager.CP_USERLIBRARY_PREFERENCES_PREFIX+\"TestUserLibrary\";", "-\t\tStringBuffer propertyValue = new StringBuffer(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n<userlibrary systemlibrary=\\\"false\\\" version=\\\"1\\\">\\r\\n<archive\");", "-\t\tpropertyValue.append(\" path=\\\"\" + libJar.getAbsolutePath());", "-\t\tpropertyValue.append(\"\\\"/>\\r\\n</userlibrary>\\r\\n\");", "-\t\tpreferences.put(propertyName, propertyValue.toString());", "-\t\tpreferences.flush();\t", "-\t\t", "-\t\tclasspath[0] = JavaCore.newContainerEntry(containerSuggestion.getPath());", "-\t\t", "-\t\tproj.setRawClasspath(classpath, null);", "-\t\twaitForAutoBuild();", "-\t\tIProject project = getWorkspaceRoot().getProject(\"P\");", "-\t\tIResource resource = project.getFile(\"container.jar\");", "-\t\tassertTrue(proj.isOnClasspath(resource));", "-\t\tIJavaElement element = proj.getPackageFragmentRoot(resource);", "-\t\tassertTrue(proj.isOnClasspath(element));", "-", "-\t\tresource = project.getFile(\"lib1.jar\");", "-\t\tassertTrue(proj.isOnClasspath(resource));", "-\t\telement = proj.getPackageFragmentRoot(resource);", "-\t\tassertTrue(proj.isOnClasspath(element));", "-\t\t", "-\t} finally {", "-\t\tthis.deleteProject(\"P\");", "-\t}", "-}", "+ */", "+public void testBug305037() throws Exception {", "+\tFile libDir = null;", "+\ttry {", "+", "+\t\tIJavaProject proj = this.createJavaProject(\"P\", new String[] {}, \"bin\");", "+\t\tIPath libPath = proj.getResource().getLocation();", "+\t\tJavaCore.setClasspathVariable(\"MyVar\", libPath, null);", "+\t\tlibDir = new File(libPath.toPortableString());", "+\t\tIClasspathEntry[] classpath = new IClasspathEntry[1];", "+\t\tFile libJar = new File(libDir, \"variable.jar\");", "+\t\tlibJar.createNewFile();", "+\t\t", "+\t\taddLibrary(proj, \"variable.jar\", null, new String[0], ", "+\t\t\t\tnew String[] {", "+\t\t\t\t\"META-INF/MANIFEST.MF\",", "+\t\t\t\t\"Manifest-Version: 1.0\\n\" +", "+\t\t\t\t\"Class-Path: lib1.jar\\n\",", "+\t\t\t},", "+\t\t\tJavaCore.VERSION_1_4); ", "+", "+\t\tcreateFile(\"/P/lib1.jar\", \"\");", "+\t\t", "+\t\tclasspath = proj.getResolvedClasspath(true);", "+\t\tassertClasspathEquals(classpath, ", "+\t\t\t\t\"/P/lib1.jar[CPE_LIBRARY][K_BINARY][isExported:true]\\n\" + ", "+\t\t\t\t\"/P/variable.jar[CPE_LIBRARY][K_BINARY][isExported:true]\");", "+\t\t", "+\t\tIClasspathEntry[] chains = JavaCore.getReferencedClasspathEntries(classpath[1], null);", "+\t\tassertClasspathEquals(chains, \"/P/lib1.jar[CPE_LIBRARY][K_BINARY][isExported:true]\");", "+\t\t((ClasspathEntry)chains[0]).sourceAttachmentPath = new Path(\"/P/efg.zip\");", "+\t\t((ClasspathEntry)chains[0]).sourceAttachmentRootPath = new Path(\"/src2\");", "+", "+\t\tIClasspathAttribute javadocLoc = JavaCore.newClasspathAttribute(\"javadoc_location\", \"/P/efg.zip\");", "+\t\t((ClasspathEntry)chains[0]).extraAttributes = new IClasspathAttribute[]{javadocLoc};", "+\t\t", "+\t\tproj.setRawClasspath(proj.getRawClasspath(), chains, proj.getOutputLocation(), null);", "+\t\tclasspath = proj.getResolvedClasspath(true);", "+\t\tassertClasspathEquals(classpath, ", "+\t\t\t\t\"/P/lib1.jar[CPE_LIBRARY][K_BINARY][sourcePath:/P/efg.zip][rootPath:/src2][isExported:true][attributes:javadoc_location=/P/efg.zip]\\n\" + ", "+\t\t\t\t\"/P/variable.jar[CPE_LIBRARY][K_BINARY][isExported:true]\");", "+\t} finally {", "+\t\tthis.deleteProject(\"P\");", "+\t\tJavaCore.removeClasspathVariable(\"MyVar\", null);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aacc3f22ec0c77f737b90a0ac5d7e88d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/UtilTest.java", "commitBeforeChange": "0f549220f498cda7c86a65324f594a6b8e8c2616", "commitAfterChange": "17fcd420e0756889bcaffeff4cf983b2cff84a3e", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 68, "signatureBeforeChange": " public void test65()", "signatureAfterChange": " public void test65()", "diff": ["-\tassertTrue(\"Camel pattern matching failure-1\",", "-\t\t\tCharOperation.camelCaseMatch(\"iSCDCo\".toCharArray(), \"invokeStringConcatenationDefaultConstructor\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-2\",", "-\t\t\t!CharOperation.camelCaseMatch(\"inVOke\".toCharArray(), \"invokeStringConcatenationDefaultConstructor\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-3\",", "-\t\t\tCharOperation.camelCaseMatch(\"i\".toCharArray(), \"invokeStringConcatenationDefaultConstructor\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-4\",", "-\t\t\t!CharOperation.camelCaseMatch(\"I\".toCharArray(), \"invokeStringConcatenationDefaultConstructor\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-5\",", "-\t\t\t!CharOperation.camelCaseMatch(\"iStringCD\".toCharArray(), \"invokeStringConcatenationDefaultConstructor\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-6\",", "-\t\t\tCharOperation.camelCaseMatch(\"NPE\".toCharArray(), \"NullPointerException/java.lang\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-7\",", "-\t\t\t!CharOperation.camelCaseMatch(\"NPE\".toCharArray(), \"NullPointer/lang.Exception\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-8\",", "-\t\t\tCharOperation.camelCaseMatch(\"NPE\".toCharArray(), \"Null_Pointer$Exception\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-9\",", "-\t\t\tCharOperation.camelCaseMatch(\"NPE\".toCharArray(), \"Null1Pointer2Exception\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-10\",", "-\t\t\t!CharOperation.camelCaseMatch(\"NPE\".toCharArray(), \"Null.Pointer.Exception\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-11\",", "-\t\t\t!CharOperation.camelCaseMatch(\"NPE\".toCharArray(), \"aNullPointerException\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-12\",", "-\t\t\tCharOperation.camelCaseMatch(\"nullP\".toCharArray(), \"nullPointerException\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-13\",", "-\t\t\tCharOperation.camelCaseMatch(\"nP\".toCharArray(), \"nullPointerException\".toCharArray()));", "+\tassertCamelCase(\"iSCDCo\", \"invokeStringConcatenationDefaultConstructor\", true/* should match */);", "+\tassertCamelCase(\"inVOke\", \"invokeStringConcatenationDefaultConstructor\", false/* should not match */);", "+\tassertCamelCase(\"i\", \"invokeStringConcatenationDefaultConstructor\", true/* should match */);", "+\tassertCamelCase(\"I\", \"invokeStringConcatenationDefaultConstructor\", false/* should not match */);", "+\tassertCamelCase(\"iStringCD\", \"invokeStringConcatenationDefaultConstructor\", true/* should match */);", "+\tassertCamelCase(\"NPE\", \"NullPointerException/java.lang\", true/* should match */);", "+\tassertCamelCase(\"NPE\", \"NullPointer/lang.Exception\", false/* should not match */);", "+\tassertCamelCase(\"NPE\", \"Null_Pointer$Exception\", true/* should match */);", "+\tassertCamelCase(\"NPE\", \"Null1Pointer2Exception\", true/* should match */);", "+\tassertCamelCase(\"NPE\", \"Null.Pointer.Exception\", false/* should not match */);", "+\tassertCamelCase(\"NPE\", \"aNullPointerException\", false/* should not match */);", "+\tassertCamelCase(\"nullP\", \"nullPointerException\", true/* should match */);", "+\tassertCamelCase(\"nP\", \"nullPointerException\", true/* should match */);", "+\t// Verify that there were no unexpected results", "+    assertTrue(this.camelCaseErrors.toString(), this.camelCaseErrors.length()==0);", "+}"]}], "num": 61239}
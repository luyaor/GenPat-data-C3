{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71cb9fe50da7bd759e2c0f989166f67b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ca07400a41dd05c68fbf00fd6e1921f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "d5bf24a5adf23d2657a6e779176b2c9b14138ec2", "commitAfterChange": "fe650c9f34b5f46aea24c9c914c82b1f8d0ec026", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \tpublic void discardJobs(String jobFamily)", "signatureAfterChange": "\r \tpublic void discardJobs(String jobFamily)", "diff": ["-\t\t\t// wait until current job has completed\r", "-\t\t\twhile (thread != null && executing) {\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tThread.currentThread().sleep(50);\r", "-\t\t\t\t} catch (InterruptedException e) {\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tif (i == jobStart) {\r", "+\t\t\t\t\t\t// request a cancel and wait until current job has accepted the cancel\r", "+\t\t\t\t\t\tcurrentJob.cancel();\r", "+\t\t\t\t\t\twhile (thread != null && executing){\r", "+\t\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\t\tThread.currentThread().sleep(50);\r", "+\t\t\t\t\t\t\t} catch(InterruptedException e){\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "972907b645454b173b92ba49b9a7cd60", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "ae9c2f31a90b47398d8d35cc3e43c6bf47ddbbd7", "commitAfterChange": "8963c675854a4d25e2dd13b9b3101b015fe978eb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public void discardJobsUntilNextProjectAddition(String jobFamily)", "signatureAfterChange": "\r public void discardJobsUntilNextProjectAddition(String jobFamily)", "diff": ["-\t\t// wait until current active job has finished\r", "-\t\twhile (thread != null && executing){\r", "-\t\t\ttry {\r", "-\t\t\t\tThread.currentThread().sleep(50);\r", "-\t\t\t} catch(InterruptedException e){\r", "+\t\t// cancel current job if it belongs to the given family\r", "+\t\tIJob currentJob = this.currentJob();\r", "+\t\tif (currentJob != null \r", "+\t\t\t\t&& (jobFamily == null || currentJob.belongsTo(jobFamily))) {\r", "+\r", "+\t\t\tcurrentJob.cancel();\r", "+\t\t\r", "+\t\t\t// wait until current active job has finished\r", "+\t\t\twhile (thread != null && executing){\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tThread.currentThread().sleep(50);\r", "+\t\t\t\t} catch(InterruptedException e){\r", "+\t\t\t\t}\r", "-\t\t\tfor (int i = jobStart+1; i <= jobEnd; i++){\r", "-\t\t\t\tIJob currentJob = awaitingJobs[i];\r", "+\t\t\tfor (int i = jobStart; i <= jobEnd; i++){\r", "+\t\t\t\tcurrentJob = awaitingJobs[i];\r", "+\t\t\t\tif (currentJob == null) continue;\r"]}], "num": 39217}
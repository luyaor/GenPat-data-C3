{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "367e1460de6e69ec0306155b8a3e6849", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1379e3bfc32f41d2def570187decb11d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/ReferenceCollection.java", "commitBeforeChange": "39745a85705361f7e5b8ca890f80a07d85799adc", "commitAfterChange": "9ce2d699e0d21b200d57773c8cb35525d3ffa98d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \r boolean includes(char[][][] qualifiedNames, char[][] simpleNames)", "signatureAfterChange": "\r \r boolean includes(char[][][] qualifiedNames, char[][] simpleNames)", "diff": ["-\t}\r", "-\tfor (int i = 0, l = simpleNames.length; i < l; i++) {\r", "-\t\tif (includes(simpleNames[i])) {\r", "-\t\t\tif (qualifiedNames == null) {\r", "+\t} else if (qualifiedNames == null) {\r", "+\t\tfor (int i = 0, l = simpleNames.length; i < l; i++) {\r", "+\t\t\tif (includes(simpleNames[i])) {\r", "-\t\t\tfor (int j = 0, m = qualifiedNames.length; j < m; j++) {\r", "-\t\t\t\tchar[][] qualifiedName = qualifiedNames[j];\r", "-\t\t\t\tif (qualifiedName.length == 1 ? includes(qualifiedName[0]) : includes(qualifiedName)) {\r", "-\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "-\t\t\t\t\t\tSystem.out.println(\"  found match in \" + CharOperation.toString(qualifiedName) //$NON-NLS-1$\r", "-\t\t\t\t\t\t\t+ \" to \" + new String(simpleNames[i])); //$NON-NLS-1$\r", "-\t\t\t\t\treturn true;\r", "+\t\t}\r", "+\t} else {\r", "+\t\tfor (int i = 0, l = simpleNames.length; i < l; i++) {\r", "+\t\t\tif (includes(simpleNames[i])) {\r", "+\t\t\t\tfor (int j = 0, m = qualifiedNames.length; j < m; j++) {\r", "+\t\t\t\t\tchar[][] qualifiedName = qualifiedNames[j];\r", "+\t\t\t\t\tif (qualifiedName.length == 1 ? includes(qualifiedName[0]) : includes(qualifiedName)) {\r", "+\t\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\t\t\t\t\tSystem.out.println(\"  found match in \" + CharOperation.toString(qualifiedName) //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t\t+ \" to \" + new String(simpleNames[i])); //$NON-NLS-1$\r", "+\t\t\t\t\t\treturn true;\r", "+\t\t\t\t\t}\r", "+\t\t\t\treturn false;\r", "-\t\t\treturn false;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32cedadd2c664f1c5a6fee7f165ffacd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/HierarchyResolver.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r public void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "signatureAfterChange": "\r \r public void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "diff": ["-\t\trememberWithMemberTypes(sourceTypes[0], unit.types[0].binding);\r", "+\t\tfor (int i = 0, length = sourceTypes.length; i < length; i++) {\r", "+\t\t\trememberWithMemberTypes(sourceTypes[i], unit.types[i].binding);\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5087c8808425ff3a6392f8ecce5ced6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/NameEnvironment.java", "commitBeforeChange": "2a40159dff47fb0e9026a9eb6e050f6d14cc5873", "commitAfterChange": "16d59225e6af39e0fab503daf43d023ad86472cf", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \r public void reset()", "signatureAfterChange": "\r \r public void cleanup()", "diff": ["-public void reset() {\r", "+public void cleanup() {\r", "+\tfor (int i = 0, length = classpathLocations.length; i < length; i++){\r", "+\t\tclasspathLocations[i].cleanup();\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74f039be1692148913d9b146b3d6584e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodPattern.java", "commitBeforeChange": "e370ba439679a26bb04e9b77917c8e22a1b8aa06", "commitAfterChange": "90d481edc9060cc498a8f085b08186108312e37b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " protected boolean mustResolve()", "signatureAfterChange": " protected boolean mustResolve()", "diff": ["-\tif (parameterSimpleNames != null && parameterSimpleNames.length > 0) return true;", "+\tif (parameterSimpleNames != null)", "+\t\tfor (int i = 0, max = parameterSimpleNames.length; i < max; i++)", "+\t\t\tif (parameterQualifications[i] != null) return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80116a7b0bcc7740018c89758de8cc7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "70a53d5204889b0c58ec5456c0d1f369bcb8e6de", "commitAfterChange": "622a559c923758dc3f8dea6b74aa6c2ecba62dd5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void checkExternalArchiveChanges(IJavaElement[] refreshedElements, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic void checkExternalArchiveChanges(IJavaElement[] refreshedElements, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\tthis.refreshedElements = refreshedElements;", "-\t\t\tthis.refreshedElementsSize = refreshedElements.length;", "+\t\t\tfor (int i = 0, length = refreshedElements.length; i < length; i++) {", "+\t\t\t\tthis.addForRefresh(refreshedElements[i]);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ded1f579ac1d5bcd771bd69cc069e67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "1bbf6829c6402d0f53696d4b580f3a63e05d532a", "commitAfterChange": "f6928a3e7ff4d633032250ff1eeb28d81a4173fb", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " \tpublic static int writeUTF(OutputStream out, char[] str) throws IOException", "signatureAfterChange": " \tpublic static int writeUTF(OutputStream out, char[] str) throws IOException", "diff": ["-\t\tfor (int i= 0; i < strlen; i++) {", "-\t\t\tint c= str[i];", "-\t\t\tif ((c >= 0x0001) && (c <= 0x007F)) {", "-\t\t\t\tout.write(c);", "-\t\t\t} else if (c > 0x07FF) {", "-\t\t\t\tout.write(0xE0 | ((c >> 12) & 0x0F));", "-\t\t\t\tout.write(0x80 | ((c >> 6) & 0x3F));", "-\t\t\t\tout.write(0x80 | ((c >> 0) & 0x3F));", "-\t\t\t} else {", "-\t\t\t\tout.write(0xC0 | ((c >> 6) & 0x1F));", "-\t\t\t\tout.write(0x80 | ((c >> 0) & 0x3F));", "+\t\tif (strlen == utflen) {", "+\t\t\tfor (int i= 0; i < strlen; i++)", "+\t\t\t\tout.write(str[i]);", "+\t\t} else {", "+\t\t\tfor (int i= 0; i < strlen; i++) {", "+\t\t\t\tint c= str[i];", "+\t\t\t\tif ((c >= 0x0001) && (c <= 0x007F)) {", "+\t\t\t\t\tout.write(c);", "+\t\t\t\t} else if (c > 0x07FF) {", "+\t\t\t\t\tout.write(0xE0 | ((c >> 12) & 0x0F));", "+\t\t\t\t\tout.write(0x80 | ((c >> 6) & 0x3F));", "+\t\t\t\t\tout.write(0x80 | ((c >> 0) & 0x3F));", "+\t\t\t\t} else {", "+\t\t\t\t\tout.write(0xC0 | ((c >> 6) & 0x1F));", "+\t\t\t\t\tout.write(0x80 | ((c >> 0) & 0x3F));", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf41dcb563c7cce702826fe5d3860df2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "efe1773a267b3bdb803164d9b413b69c3685878f", "commitAfterChange": "0376a8916bf0d47726d1ecccdbf4f7791bd5714e", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards)", "signatureAfterChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards)", "diff": ["-\t\t\tif (typeParameters[i].boundCheck(null, types[i], scope) != TypeConstants.OK)", "-\t\t\t\treturn this.singleAbstractMethod = new ProblemMethodBinding(TypeConstants.ANONYMOUS_METHOD, null, ProblemReasons.NotAWellFormedParameterizedType);", "-\t\tReferenceBinding declaringType = scope.environment().createParameterizedType(genericType, types, genericType.enclosingType());", "-\t\tdeclaringType = (ReferenceBinding) declaringType.findSuperTypeOriginatingFrom(theAbstractMethod.declaringClass);", "-\t\tMethodBinding [] choices = declaringType.getMethods(theAbstractMethod.selector);", "+\t\tParameterizedTypeBinding declaringType = scope.environment().createParameterizedType(genericType, types, genericType.enclosingType());", "+\t\tfor (int i = 0, length = typeParameters.length; i < length; i++) {", "+\t\t\tif (typeParameters[i].boundCheck(declaringType, types[i], scope) != TypeConstants.OK)", "+\t\t\t\treturn this.singleAbstractMethod = new ProblemMethodBinding(TypeConstants.ANONYMOUS_METHOD, null, ProblemReasons.NotAWellFormedParameterizedType);\t\t\t", "+\t\t}", "+\t\tReferenceBinding substitutedDeclaringType = (ReferenceBinding) declaringType.findSuperTypeOriginatingFrom(theAbstractMethod.declaringClass);", "+\t\tMethodBinding [] choices = substitutedDeclaringType.getMethods(theAbstractMethod.selector);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c74e34b37fe01e230c2c480f7d87bd87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTestsRequestor2.java", "commitBeforeChange": "80080d1e96379be6c9c99ed84d6a5c9d17d9a3c6", "commitAfterChange": "ae07afa33c5a0a665d213062189be9e8f0f95c54", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic void allowAllRequiredProposals()", "signatureAfterChange": " \t \tpublic void allowAllRequiredProposals()", "diff": ["-\t\t\tthis.setAllowsRequiredProposals(i, true);", "+\t\t\tfor (int j = CompletionProposal.ANONYMOUS_CLASS_DECLARATION; j <= CompletionProposal.JAVADOC_INLINE_TAG; j++) {", "+\t\t\t\tthis.setAllowsRequiredProposals(i, j, true);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4a8dcd37824f55c8a0a1c4185eff4f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment2.java", "commitBeforeChange": "b736a4b7b5e36e43e9911cb920eaa27b719a1739", "commitAfterChange": "f7ef9224b59ac5e8fd98d69dbf74c94b4c3ba7fe", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void cleanup()", "signatureAfterChange": "  public void cleanup()", "diff": ["-\tthis.nameEnvironment.cleanup();", "+\tfor (int i = 0, length = this.locations.length; i < length; i++) {", "+\t\tthis.locations[i].cleanup();", "+\t}"]}], "num": 39643}
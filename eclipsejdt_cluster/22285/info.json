{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76210891031c90cc39dee97b230cd3ca", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20463f4f02d9ea9387ae6dc09c62edef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "74ceca813d8e9be557353622cfb1779e5fa562ad", "commitAfterChange": "2d7d544af40c78aee4e80de194acd385e8eab51a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 13, "signatureBeforeChange": " void checkMethods()", "signatureAfterChange": " void checkMethods()", "diff": ["-\t\t\t\twhile (index >= 0) matchingInherited[index--] = null; // clear the previous contents of the matching methods", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcheckForNameClash(currentMethod, inheritedMethod);", "-\t\t\t\tif (index >= 0)", "+\t\t\t\tif (index >= 0) {", "+\t\t\t\t\twhile (index >= 0) matchingInherited[index--] = null; // clear the contents of the matching methods", "+\t\t\t\t}", "-\t\t\twhile (index >= 0) matchingInherited[index--] = null; // clear the previous contents of the matching methods", "-\t\t\tif (inheritedMethod != null) {", "-\t\t\t\tmatchingInherited[++index] = inheritedMethod;", "-\t\t\t\tfor (int j = i + 1; j < length; j++) {", "-\t\t\t\t\tMethodBinding otherInheritedMethod = inherited[j];", "-\t\t\t\t\tif (canSkipInheritedMethods(inheritedMethod, otherInheritedMethod))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\totherInheritedMethod = computeSubstituteMethod(otherInheritedMethod, inheritedMethod);", "-\t\t\t\t\tif (otherInheritedMethod != null) {", "-\t\t\t\t\t\tif (areMethodsEqual(inheritedMethod, otherInheritedMethod)) {", "-\t\t\t\t\t\t\tmatchingInherited[++index] = otherInheritedMethod;", "-\t\t\t\t\t\t\tinherited[j] = null; // do not want to find it again", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcheckForInheritedNameClash(inheritedMethod, otherInheritedMethod);", "-\t\t\t\t\t\t}", "+\t\t\tif (inheritedMethod == null) continue;", "+", "+\t\t\tmatchingInherited[++index] = inheritedMethod;", "+\t\t\tfor (int j = i + 1; j < length; j++) {", "+\t\t\t\tMethodBinding otherInheritedMethod = inherited[j];", "+\t\t\t\tif (canSkipInheritedMethods(inheritedMethod, otherInheritedMethod))", "+\t\t\t\t\tcontinue;", "+\t\t\t\totherInheritedMethod = computeSubstituteMethod(otherInheritedMethod, inheritedMethod);", "+\t\t\t\tif (otherInheritedMethod != null) {", "+\t\t\t\t\tif (areMethodsEqual(inheritedMethod, otherInheritedMethod)) {", "+\t\t\t\t\t\tmatchingInherited[++index] = otherInheritedMethod;", "+\t\t\t\t\t\tinherited[j] = null; // do not want to find it again", "+\t\t\tif (index == -1) continue;", "-\t\t\telse if (mustImplementAbstractMethods && index == 0 && matchingInherited[0].isAbstract())", "+\t\t\telse if (mustImplementAbstractMethods && matchingInherited[0].isAbstract())", "+\t\t\twhile (index >= 0) matchingInherited[index--] = null; // clear the contents of the matching methods"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c08b47df009d0b1e61a7b641ab064205", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "875cc8d42787c90738d8dc077a25eb401e9e38f9", "commitAfterChange": "adfd584faf146517cb3e86f9f2b585f2851a3630", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": " void checkMethods()", "signatureAfterChange": " void checkMethods()", "diff": ["-\t\t\t\t\tif (inheritedMethod != null && areParametersEqual(currentMethod, inheritedMethod)) {", "-\t\t\t\t\t\tmatchingInherited[++index] = inheritedMethod;", "-\t\t\t\t\t\tinherited[j] = null; // do not want to find it again", "+\t\t\t\t\tif (inheritedMethod != null) {", "+\t\t\t\t\t\tinheritedMethod = computeSubstituteMethod(inheritedMethod, currentMethod);", "+\t\t\t\t\t\tif (areMethodsEqual(currentMethod, inheritedMethod)) {", "+\t\t\t\t\t\t\tmatchingInherited[++index] = inheritedMethod;", "+\t\t\t\t\t\t\tinherited[j] = null; // do not want to find it again", "+\t\t\t\t\t\t}", "-\t\t\t\t\tthis.checkAgainstInheritedMethods(currentMethod, matchingInherited, index + 1); // pass in the length of matching", "+\t\t\t\t\tcheckAgainstInheritedMethods(currentMethod, matchingInherited, index + 1); // pass in the length of matching", "-\t\t\t\t\tif (inherited[j] != null && areParametersEqual(inheritedMethod, inherited[j])) {", "-\t\t\t\t\t\tmatchingInherited[++index] = inherited[j];", "-\t\t\t\t\t\tinherited[j] = null; // do not want to find it again", "+\t\t\t\t\tMethodBinding otherInheritedMethod = inherited[j];", "+\t\t\t\t\tif (otherInheritedMethod != null && otherInheritedMethod.declaringClass != inheritedMethod.declaringClass) { // must be from a different class for their params to be equal", "+\t\t\t\t\t\totherInheritedMethod = computeSubstituteMethod(otherInheritedMethod, inheritedMethod);", "+\t\t\t\t\t\tif (areMethodsEqual(inheritedMethod, otherInheritedMethod)) {", "+\t\t\t\t\t\t\tmatchingInherited[++index] = otherInheritedMethod;", "+\t\t\t\t\t\t\tinherited[j] = null; // do not want to find it again", "+\t\t\t\t\t\t}", "-\t\t\t\tthis.checkInheritedMethods(matchingInherited, index + 1); // pass in the length of matching", "+\t\t\t\tcheckInheritedMethods(matchingInherited, index + 1); // pass in the length of matching"]}], "num": 22285}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "12840b073a74f911f2aa83e04227d178", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12a6b5d35098073d89b0a4509a4647c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "9d6421c97941435b71726699128d0343d2af1a6d", "commitAfterChange": "f6b352b97c4d3f236828cd9dab83777ae77d4959", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError) \t\tthrows JavaModelException", "diff": ["+\t\tIJavaModelStatus status;", "-", "+\t\t\tstatus = null;", "+\t\t\t", "-\t\t\tIJavaModelStatus status = null;", "+\t\tif (generateMarkerOnError) {", "+\t\t\tstatus = JavaConventions.validateClasspath(this, resolvedPath, this.getOutputLocation());", "+\t\t\tif (!status.isOK()) createClasspathProblemMarker(status);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "291be77c007becfee382c399f344a9f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "96e2d72045a6fecadbb495cf120a991e9af97b69", "commitAfterChange": "9d06351462e8164b333844c4c86806d2dc639a02", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "signatureAfterChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "diff": ["+\t\tboolean isFieldBeingCompletedStatic = false;", "+\t\t\t\t\t\tisFieldBeingCompletedStatic = field.isStatic();", "+\t\t\t\t\t\tisFieldBeingCompletedStatic = field.isStatic();", "-\t\t\t\tcontinue next;", "+\t\t\t\t// Though, if field is static, then it can be still be proposed", "+\t\t\t\tif (!field.isStatic()) { ", "+\t\t\t\t\tcontinue next;", "+\t\t\t\t} else if (isFieldBeingCompletedStatic) {", "+\t\t\t\t\t// static fields can't be proposed before they are actually declared if the ", "+\t\t\t\t\t// field currently being declared is also static", "+\t\t\t\t\tcontinue next;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b434a1eb245666ec0614e9a61cc61c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "677a836f47702c9ed24988d8383d3f7010ff685a", "commitAfterChange": "0a7fc1c9a9ceeb5ade5b44471ddedfcb9232e687", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r public static IStatus validatePackageName(String name)", "signatureAfterChange": "\r public static IStatus validatePackageName(String name)", "diff": ["+\tIWorkspace workspace = ResourcesPlugin.getWorkspace();\r", "+\t\tstatus = workspace.validateName(typeName, IResource.FOLDER);\r", "+\t\tif (!status.isOK()) {\r", "+\t\t\treturn status;\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8384b85a4e176a5f91bb5af22dcb6d44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ExternalFoldersManager.java", "commitBeforeChange": "a459b929580ed24aca3f7b0d472a44d268457863", "commitAfterChange": "b2722f79d7079ad40437241bb3fc822329e41c51", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t\tRefreshJob(Vector externalFolders)", "signatureAfterChange": " \t\tRefreshJob(Vector externalFolders)", "diff": ["+\t\t\t// bug 476059: don't interrupt autobuild by using rule and system flag.", "+\t\t\tsetSystem(true);", "+\t\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "+\t\t\tsetRule(workspace.getRuleFactory().refreshRule(workspace.getRoot()));"]}], "num": 1727}
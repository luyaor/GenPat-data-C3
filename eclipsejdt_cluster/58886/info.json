{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "88e49e42c6fdfd9a9eda4b618f10cd8f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01050ae64a8da19d03d8c6d7c78951c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DocCommentParser.java", "commitBeforeChange": "c4891fe70e58ba287a7bbc2f099afcf753974e95", "commitAfterChange": "f50252d848b2855a0e3b480a92607978678762ce", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["+\t\tchar[] tagName = this.scanner.getCurrentIdentifierSource();", "-\t\tint tk = token;", "-\t\tchar pc = peekChar();", "-\t\ttagNameToken: while (tk != TerminalTokens.TokenNameEOF) {", "-\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\ttoken = tk;", "-\t\t\t// !, \", #, %, &, ', -, :, <, >, * chars and spaces are not allowed in tag names", "-\t\t\tswitch (pc) {", "-\t\t\t\tcase '}':", "-\t\t\t\tcase '!':", "-\t\t\t\tcase '#':", "-\t\t\t\tcase '%':", "-\t\t\t\tcase '&':", "-\t\t\t\tcase '\\'':", "-\t\t\t\tcase '\"':", "-\t\t\t\tcase ':':", "-\t\t\t\t// case '-': allowed in tag names as this character is often used in doclets (bug 68087)", "-\t\t\t\tcase '<':", "-\t\t\t\tcase '>':", "-\t\t\t\tcase '*': // break for '*' as this is perhaps the end of comment (bug 65288)", "-\t\t\t\t\tbreak tagNameToken;", "-\t\t\t\tdefault:", "-\t\t\t\t\tif (pc == ' ' || Character.isWhitespace(pc)) break tagNameToken;", "+\t\tif (this.scanner.currentCharacter != ' ' && !Character.isWhitespace(this.scanner.currentCharacter)) {", "+\t\t\ttagNameToken: while (token != TerminalTokens.TokenNameEOF && this.index < this.scanner.eofPosition) {", "+\t\t\t\tint length = tagName.length;", "+\t\t\t\t// !, \", #, %, &, ', -, :, <, >, * chars and spaces are not allowed in tag names", "+\t\t\t\tswitch (this.scanner.currentCharacter) {", "+\t\t\t\t\tcase '}':", "+\t\t\t\t\tcase '*': // break for '*' as this is perhaps the end of comment (bug 65288)", "+\t\t\t\t\tcase '!':", "+\t\t\t\t\tcase '#':", "+\t\t\t\t\tcase '%':", "+\t\t\t\t\tcase '&':", "+\t\t\t\t\tcase '\\'':", "+\t\t\t\t\tcase '\"':", "+\t\t\t\t\tcase ':':", "+\t\t\t\t\tcase '<':", "+\t\t\t\t\tcase '>':", "+\t\t\t\t\t\tbreak tagNameToken;", "+\t\t\t\t\tcase '-': // allowed in tag names as this character is often used in doclets (bug 68087)", "+\t\t\t\t\t\tSystem.arraycopy(tagName, 0, tagName = new char[length+1], 0, length);", "+\t\t\t\t\t\ttagName[length] = this.scanner.currentCharacter;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tif (this.scanner.currentCharacter == ' ' || Character.isWhitespace(this.scanner.currentCharacter)) {", "+\t\t\t\t\t\t\tbreak tagNameToken;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\ttoken = readTokenAndConsume();", "+\t\t\t\t\t\tchar[] ident = this.scanner.getCurrentIdentifierSource();", "+\t\t\t\t\t\tSystem.arraycopy(tagName, 0, tagName = new char[length+ident.length], 0, length);", "+\t\t\t\t\t\tSystem.arraycopy(ident, 0, tagName, length, ident.length);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\tthis.scanner.getNextChar();", "+\t\t\t\tthis.index = this.scanner.currentPosition;", "-\t\t\ttk = readTokenAndConsume();", "-\t\t\tpc = peekChar();", "-\t\tint length = this.tagSourceEnd-this.tagSourceStart+1;", "-\t\tchar[] tag = new char[length];", "-\t\tSystem.arraycopy(this.source, this.tagSourceStart, tag, 0, length);", "+\t\tint length = tagName.length;", "-\t\t\t\tswitch (tag[0]) {", "+\t\t\t\tswitch (tagName[0]) {", "+\t\t\t\t\tcase 'c':", "+\t\t\t\t\t\tif (length == TAG_CATEGORY_LENGTH && CharOperation.equals(TAG_CATEGORY, tagName)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_CATEGORY_VALUE;", "+\t\t\t\t\t\t\tvalid = parseIdentifierTag(false); // TODO (frederic) reconsider parameter value when @category will be significant in spec", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\t\t\t\tcreateTag();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "+\t\t\t\t\t\tif (length == TAG_DEPRECATED_LENGTH && CharOperation.equals(TAG_DEPRECATED, tagName)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_INHERITDOC)) {", "+\t\t\t\t\t\tif (length == TAG_INHERITDOC_LENGTH && CharOperation.equals(TAG_INHERITDOC, tagName)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_PARAM)) {", "+\t\t\t\t\t\tif (length == TAG_PARAM_LENGTH && CharOperation.equals(TAG_PARAM, tagName)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_EXCEPTION)) {", "+\t\t\t\t\t\tif (length == TAG_EXCEPTION_LENGTH && CharOperation.equals(TAG_EXCEPTION, tagName)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_SEE)) {", "+\t\t\t\t\t\tif (length == TAG_SEE_LENGTH && CharOperation.equals(TAG_SEE, tagName)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_LINK)) {", "+\t\t\t\t\t\tif (length == TAG_LINK_LENGTH && CharOperation.equals(TAG_LINK, tagName)) {", "-\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_LINKPLAIN)) {", "+\t\t\t\t\t\t} else if (length == TAG_LINKPLAIN_LENGTH && CharOperation.equals(TAG_LINKPLAIN, tagName)) {", "-\t\t\t\t\t\tif (this.sourceLevel >= ClassFileConstants.JDK1_5 && CharOperation.equals(tag, TAG_VALUE)) {", "+\t\t\t\t\t\tif (this.sourceLevel >= ClassFileConstants.JDK1_5 && length == TAG_VALUE_LENGTH && CharOperation.equals(TAG_VALUE, tagName)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70baca8126c11de0d7d17f032623cb39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "ab74babcdf0f89ee66e36b91189c0d301a4da95d", "commitAfterChange": "66a4221dd418603b7f2bc6722d99e4e300585ef1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprotected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "signatureAfterChange": " \tprotected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "diff": ["+\t\t\tint length = this.identifierLengthStack[0];\t// may be > 0 for inner class constructor reference", "-\t\t\t\tisConstructor = CharOperation.equals(this.identifierStack[0], name);", "+\t\t\t\tisConstructor = CharOperation.equals(this.identifierStack[length-1], name);", "-\t\t\t\tchar[] name = null;", "-\t\t\t\t\tname = ((JavadocSingleTypeReference)typeRef).token;", "+\t\t\t\t\tchar[] name = ((JavadocSingleTypeReference)typeRef).token;", "+\t\t\t\t\tisConstructor = CharOperation.equals(this.identifierStack[length-1], name);", "-\t\t\t\t\tname = tokens[tokens.length-1];", "+\t\t\t\t\tint last = tokens.length-1;", "+\t\t\t\t\tisConstructor = CharOperation.equals(this.identifierStack[length-1], tokens[last]);", "+\t\t\t\t\tif (isConstructor) {", "+\t\t\t\t\t\tboolean valid = true;", "+\t\t\t\t\t\tif (valid) {", "+\t\t\t\t\t\t\tfor (int i=0; i<length-1 && valid; i++) {", "+\t\t\t\t\t\t\t\tvalid = CharOperation.equals(this.identifierStack[i], tokens[i]);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!valid) {", "+\t\t\t\t\t\t\tif (this.reportProblems) {", "+\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidConstructorQualification(this.memberStart+1, this.scanner.getCurrentTokenEndPosition());", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\tisConstructor = CharOperation.equals(this.identifierStack[0], name);", "-\t\t\t\t\tJavadocAllocationExpression alloc = new JavadocAllocationExpression(this.identifierPositionStack[0]);", "-\t\t\t\t\talloc.type = typeRef;", "-\t\t\t\t\talloc.tagValue = this.tagValue;", "-\t\t\t\t\talloc.sourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t\treturn alloc;", "+\t\t\t\t\tJavadocAllocationExpression allocation = new JavadocAllocationExpression(this.identifierPositionStack[length-1]);", "+\t\t\t\t\tallocation.type = typeRef;", "+\t\t\t\t\tallocation.tagValue = this.tagValue;", "+\t\t\t\t\tallocation.sourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\tif (length == 1) {", "+\t\t\t\t\t\tallocation.qualification = new char[][] { this.identifierStack[0] };", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tSystem.arraycopy(this.identifierStack, 0, allocation.qualification = new char[length][], 0, length);", "+\t\t\t\t\t}", "+\t\t\t\t\tallocation.memberStart = this.memberStart;", "+\t\t\t\t\treturn allocation;", "-\t\t\t\t\tJavadocMessageSend msg = new JavadocMessageSend(this.identifierStack[0], this.identifierPositionStack[0]);", "+\t\t\t\t\tJavadocMessageSend msg = new JavadocMessageSend(this.identifierStack[length-1], this.identifierPositionStack[length-1]);", "-\t\t\t\t\tJavadocAllocationExpression alloc = new JavadocAllocationExpression(this.identifierPositionStack[0]);", "-\t\t\t\t\talloc.arguments = expressions;", "-\t\t\t\t\talloc.type = typeRef;", "-\t\t\t\t\talloc.tagValue = this.tagValue;", "-\t\t\t\t\talloc.sourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t\treturn alloc;", "+\t\t\t\t\tJavadocAllocationExpression allocation = new JavadocAllocationExpression(this.identifierPositionStack[length-1]);", "+\t\t\t\t\tallocation.arguments = expressions;", "+\t\t\t\t\tallocation.type = typeRef;", "+\t\t\t\t\tallocation.tagValue = this.tagValue;", "+\t\t\t\t\tallocation.sourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\tif (length == 1) {", "+\t\t\t\t\t\tallocation.qualification = new char[][] { this.identifierStack[0] };", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tSystem.arraycopy(this.identifierStack, 0, allocation.qualification = new char[length][], 0, length);", "+\t\t\t\t\t}", "+\t\t\t\t\tallocation.memberStart = this.memberStart;", "+\t\t\t\t\treturn allocation;", "-\t\t\t\t\tJavadocMessageSend msg = new JavadocMessageSend(this.identifierStack[0], this.identifierPositionStack[0], expressions);", "+\t\t\t\t\tJavadocMessageSend msg = new JavadocMessageSend(this.identifierStack[length-1], this.identifierPositionStack[length-1], expressions);"]}], "num": 58886}
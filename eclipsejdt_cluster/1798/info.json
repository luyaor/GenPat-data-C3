{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "873f46e7f679618631c5bbe3278b969a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e821d375f91b5270ec09bcf97103d8cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java", "commitBeforeChange": "13b501923d975b39fcf9769686302cfbbf5a49d6", "commitAfterChange": "006d0d2bcd46f9eeb26a0d3ca2d5e66e5408265f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " public boolean getNextCharAsJavaIdentifierPart()", "signatureAfterChange": " public final void getNextUnicodeChar() throws InvalidInputException", "diff": ["- */", "-public boolean getNextCharAsJavaIdentifierPart() {", "-\tif (this.currentPosition >= this.source.length) // handle the obvious case upfront", "-\t\treturn false;", "-", "-\tint temp = this.currentPosition;", "-\ttry {", "-\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "-\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t//-------------unicode traitement ------------", "-\t\t\tint c1, c2, c3, c4;", "-\t\t\tint unicodeSize = 6;", "-\t\t\tthis.currentPosition++;", "-\t\t\twhile (this.source[this.currentPosition] == 'u') {", "-\t\t\t\tthis.currentPosition++;", "-\t\t\t\tunicodeSize++;", "-\t\t\t}", "-", "-\t\t\tif (((c1 = Character.getNumericValue(this.source[this.currentPosition++])) > 15", "-\t\t\t\t|| c1 < 0)", "-\t\t\t\t|| ((c2 = Character.getNumericValue(this.source[this.currentPosition++])) > 15 || c2 < 0)", "-\t\t\t\t|| ((c3 = Character.getNumericValue(this.source[this.currentPosition++])) > 15 || c3 < 0)", "-\t\t\t\t|| ((c4 = Character.getNumericValue(this.source[this.currentPosition++])) > 15 || c4 < 0)) {", "-\t\t\t\tthis.currentPosition = temp;", "-\t\t\t\treturn false;", "-\t\t\t}", "-", "-\t\t\tthis.currentCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "-\t\t\tif (!Character.isJavaIdentifierPart(this.currentCharacter)) {", "-\t\t\t\tthis.currentPosition = temp;", "-\t\t\t\treturn false;", "-\t\t\t}", "-", "-\t\t\t//need the unicode buffer", "-\t\t\tif (this.withoutUnicodePtr == 0) {", "-\t\t\t\t//buffer all the entries that have been left aside....", "-\t\t\t\tunicodeInitializeBuffer(this.currentPosition - unicodeSize - this.startPosition);", "-\t\t\t}", "-\t\t\tif (temp < this.cursorLocation && this.cursorLocation < this.currentPosition-1){", "-\t\t\t\tthrow new InvalidCursorLocation(InvalidCursorLocation.NO_COMPLETION_INSIDE_UNICODE);", "-\t\t\t}", "-\t\t\t// store the current unicode, only if we did not pass the cursor location", "-\t\t\t// Note: this does not handle cases where the cursor is in the middle of a unicode", "-\t\t\tif ((this.completionIdentifier != null)", "-\t\t\t\t|| (this.startPosition <= this.cursorLocation+1 && this.cursorLocation >= this.currentPosition-1)){", "-\t\t\t    unicodeStoreAt(++this.withoutUnicodePtr);", "-\t\t\t}", "-\t\t\treturn true;", "-\t\t} //-------------end unicode traitement--------------", "-\t\telse {", "-\t\t\tif (!Character.isJavaIdentifierPart(this.currentCharacter)) {", "-\t\t\t\tthis.currentPosition = temp;", "-\t\t\t\treturn false;", "-\t\t\t}", "-", "-\t\t\tif (this.withoutUnicodePtr != 0){", "-\t\t\t\t// store the current unicode, only if we did not pass the cursor location", "-\t\t\t\t// Note: this does not handle cases where the cursor is in the middle of a unicode", "-\t\t\t\tif ((this.completionIdentifier != null)", "-\t\t\t\t\t\t|| (this.startPosition <= this.cursorLocation+1 && this.cursorLocation >= this.currentPosition-1)){", "-\t\t\t\t    unicodeStoreAt(++this.withoutUnicodePtr);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn true;", "-\t\t}", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\tthis.currentPosition = temp;", "-\t\treturn false;", "-\t}", "-}", "+public final void getNextUnicodeChar() throws InvalidInputException {", "+\tint temp = this.currentPosition;", "+\tsuper.getNextUnicodeChar();", "+\tif (temp < this.cursorLocation && this.cursorLocation < this.currentPosition-1){", "+\t\tthrow new InvalidCursorLocation(InvalidCursorLocation.NO_COMPLETION_INSIDE_UNICODE);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e883c10cfe2bd42282fdfda8ef1695ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "ba388ee53170dee91fb2402f317f8b352855c459", "commitAfterChange": "d043ef6776b1e3fad1bb618496ee2a48a9410e4b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["-\t\tthis.scope = new MethodScope(blockScope, this, blockScope.methodScope().isStatic);", "-\t\t\tif (this.body instanceof Block) {", "-\t\t\t\t// Gather shape information for potential applicability analysis.", "-\t\t\t\tASTVisitor visitor = new ASTVisitor() {", "-\t\t\t\t\tprivate boolean valueReturnSeen = false;", "-\t\t\t\t\tprivate boolean voidReturnSeen = false;", "-\t\t\t\t\tprivate boolean throwSeen = false;", "-\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope dontCare) {", "-\t\t\t\t\t\tif (returnStatement.expression != null) {", "-\t\t\t\t\t\t\tLambdaExpression.this.returnExpressionsTally++;", "-\t\t\t\t\t\t\tthis.valueReturnSeen = true;", "-\t\t\t\t\t\t\tLambdaExpression.this.voidCompatible = false;", "-\t\t\t\t\t\t\tLambdaExpression.this.valueCompatible = !this.voidReturnSeen;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.voidReturnSeen = true;", "-\t\t\t\t\t\t\tLambdaExpression.this.valueCompatible = false;", "-\t\t\t\t\t\t\tLambdaExpression.this.voidCompatible = !this.valueReturnSeen;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn false; // should not analyze any nested lambda returns.", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic boolean visit(TypeDeclaration declaration, BlockScope dontCare) {", "-\t\t\t\t\t\treturn false;  // do not analyze inner local types so as not to confuse returns from there.", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic boolean visit(LambdaExpression lambda, BlockScope dontCare) {", "-\t\t\t\t\t\treturn LambdaExpression.this == lambda;  // do not analyze any inner lambdas so as not to confuse returns from there.", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic boolean visit(ThrowStatement throwStatement, BlockScope dontCare) {", "-\t\t\t\t\t\tthis.throwSeen  = true;", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic void endVisit(LambdaExpression expression, BlockScope dontCare) {", "-\t\t\t\t\t\tif (LambdaExpression.this == expression) {", "-\t\t\t\t\t\t\tif (!this.voidReturnSeen && !this.valueReturnSeen && this.throwSeen) {  // () -> { throw new Exception(); } is value compatible.", "-\t\t\t\t\t\t\t\tBlock block = (Block) LambdaExpression.this.body;", "-\t\t\t\t\t\t\t\tfinal Statement[] statements = block.statements;", "-\t\t\t\t\t\t\t\tfinal int statementsLength = statements == null ? 0 : statements.length;", "-\t\t\t\t\t\t\t\tStatement ultimateStatement = statementsLength == 0 ? null : statements[statementsLength - 1];", "-\t\t\t\t\t\t\t\tLambdaExpression.this.valueCompatible = ultimateStatement instanceof ThrowStatement;", "-\t\t\t\t\t\t\t\tLambdaExpression.this.shapeAnalysisComplete = LambdaExpression.this.valueCompatible;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tLambdaExpression.this.shapeAnalysisComplete = true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t};", "-\t\t\t\tthis.traverse(visitor, blockScope);", "-\t\t\t} else {", "-\t\t\t\tExpression expression = (Expression) this.body;", "-\t\t\t\tthis.voidCompatible = expression.statementExpression();", "-\t\t\t\tthis.valueCompatible = true;", "-\t\t\t\tthis.returnExpressionsTally = 1;", "-\t\t\t\tthis.shapeAnalysisComplete = true;", "-\t\t\t}\t", "+\t\t\tthis.resultExpressions = new SimpleLookupTable();", "-\t\t}", "+\t\t} ", "+\t\t", "+\t\tthis.scope = new MethodScope(blockScope, this, blockScope.methodScope().isStatic);"]}], "num": 1798}
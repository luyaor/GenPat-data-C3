{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a6179d3e7a019af4bfd45bd70e0499f1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afc6fea1323c885cfb96684efa36c758", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "6a9c839afeea06e7dd97b023fa9c24def00f0f08", "commitAfterChange": "cf7db1b07f7da2723bd250cc64a7e16bec1c504d", "methodNumberBeforeChange": 199, "methodNumberAfterChange": 199, "signatureBeforeChange": " public void isClassPathCorrect(char[][] wellKnownTypeName, CompilationUnitDeclaration compUnitDecl)", "signatureAfterChange": " public void isClassPathCorrect(char[][] wellKnownTypeName, CompilationUnitDeclaration compUnitDecl, Object location)", "diff": ["-public void isClassPathCorrect(char[][] wellKnownTypeName, CompilationUnitDeclaration compUnitDecl) {", "+public void isClassPathCorrect(char[][] wellKnownTypeName, CompilationUnitDeclaration compUnitDecl, Object location) {", "+\tint start = 0, end = 0;", "+\tif (location != null) {", "+\t\tif (location instanceof InvocationSite) {", "+\t\t\tInvocationSite site = (InvocationSite) location;", "+\t\t\tstart = site.sourceStart();", "+\t\t\tend = site.sourceEnd();", "+\t\t} else if (location instanceof ASTNode) {", "+\t\t\tASTNode node = (ASTNode) location;", "+\t\t\tstart = node.sourceStart();", "+\t\t\tend = node.sourceEnd();", "+\t\t}", "+\t}", "-\t\tProblemSeverities.AbortCompilation | ProblemSeverities.Error | ProblemSeverities.Fatal,", "-\t\t0,", "-\t\t0);", "+\t\tstart,", "+\t\tend);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eceb999c5f11de61bb214c6f1f70129d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "364abd1fe47d562f576cb6b54a083094e0671f23", "commitAfterChange": "1b555425db41a9eb4fba300521a43b3ff494a42f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static MethodBinding checkForContraditions( \t\t\tfinal MethodBinding method, final InvocationSite invocationSite, final Scope scope)", "signatureAfterChange": " \tpublic static MethodBinding checkForContradictions( \t\t\tfinal MethodBinding method, final Object location, final Scope scope)", "diff": ["-\tpublic static MethodBinding checkForContraditions(", "-\t\t\tfinal MethodBinding method, final InvocationSite invocationSite, final Scope scope) {", "+\tpublic static MethodBinding checkForContradictions(", "+\t\t\tfinal MethodBinding method, final Object location, final Scope scope) {", "+\t\tint start = 0, end = 0;", "+\t\tif (location instanceof InvocationSite) {", "+\t\t\tstart = ((InvocationSite) location).sourceStart();", "+\t\t\tend = ((InvocationSite) location).sourceEnd();", "+\t\t} else if (location instanceof ASTNode) {", "+\t\t\tstart = ((ASTNode) location).sourceStart;", "+\t\t\tend = ((ASTNode) location).sourceEnd;", "+\t\t}", "-\t\t\tscope.problemReporter().contradictoryNullAnnotationsInferred(method, invocationSite);", "+\t\t\tscope.problemReporter().contradictoryNullAnnotationsInferred(method, start, end, location instanceof FunctionalExpression);", "-\t\tif (invocationSite instanceof Invocation)", "-\t\t\targuments = ((Invocation)invocationSite).arguments();", "+\t\tif (location instanceof Invocation)", "+\t\t\targuments = ((Invocation)location).arguments();", "-\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotationsInferred(method, invocationSite);", "+\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotationsInferred(method, start, end, location instanceof FunctionalExpression);"]}], "num": 44846}
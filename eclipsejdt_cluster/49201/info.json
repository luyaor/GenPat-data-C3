{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21907a012fd4f89971e9fb5e24b55127", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37c6d59eaed217a755cb418db29b08e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \t \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\t\t: VoidBinding;", "+\t\t\t\t: TypeBinding.VOID;", "-\t\tif (methodType == VoidBinding) {", "+\t\tif (methodType == TypeBinding.VOID) {", "-\t\tif (expressionType == VoidBinding) {", "+\t\tif (expressionType == TypeBinding.VOID) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e277e30205f88187a33cd7c8210ca3ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetReturnStatement.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void generateStoreSaveValueIfNecessary(CodeStream codeStream)", "signatureAfterChange": " public void generateStoreSaveValueIfNecessary(CodeStream codeStream)", "diff": ["-\tif (this.expression == null || this.expression.resolvedType == VoidBinding) { // expressionType == VoidBinding if code snippet is the expression \"System.out.println()\"", "+\tif (this.expression == null || this.expression.resolvedType == TypeBinding.VOID) { // expressionType == VoidBinding if code snippet is the expression \"System.out.println()\"", "-\t\tcodeStream.generateClassLiteralAccessForType(VoidBinding, null);", "+\t\tcodeStream.generateClassLiteralAccessForType(TypeBinding.VOID, null);", "-\t\tif (this.expression.resolvedType.isBaseType() && this.expression.resolvedType != NullBinding) { ", "+\t\tif (this.expression.resolvedType.isBaseType() && this.expression.resolvedType != TypeBinding.NULL) { "]}], "num": 49201}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b56544b4d001c0283ff0633cd085783", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "449bf7a44b22fdd6a32b7d0848d8a24a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java", "commitBeforeChange": "1d27ab4a3d73ff8313e5972d7d4f96a23b370614", "commitAfterChange": "b25ed407ef1d09375524d9c9e824c1c1084b119b", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void setProperty(String propertyName, Object data)", "signatureAfterChange": " \tpublic void setProperty(String propertyName, Object data)", "diff": ["-\t\tif (property1 == null) {", "+\t\tif (this.property1 == null) {", "-\t\t\tproperty1 = propertyName;", "-\t\t\tproperty2 = data;", "+\t\t\tthis.property1 = propertyName;", "+\t\t\tthis.property2 = data;", "-\t\tif (property1 instanceof String) {", "+\t\tif (this.property1 instanceof String) {", "-\t\t\tif (propertyName.equals(property1)) {", "+\t\t\tif (propertyName.equals(this.property1)) {", "-\t\t\t\tproperty2 = data;", "+\t\t\t\tthis.property2 = data;", "-\t\t\t\t\tproperty1 = null;", "-\t\t\t\t\tproperty2 = null;", "+\t\t\t\t\tthis.property1 = null;", "+\t\t\t\t\tthis.property2 = null;", "-\t\t\tm.put(property1, property2);", "+\t\t\tm.put(this.property1, this.property2);", "-\t\t\tproperty1 = m;", "-\t\t\tproperty2 = null;", "+\t\t\tthis.property1 = m;", "+\t\t\tthis.property2 = null;", "-\t\tHashMap m = (HashMap) property1;", "+\t\tHashMap m = (HashMap) this.property1;", "-\t\t\t\tproperty1 = entries[0].getKey();", "-\t\t\t\tproperty2 = entries[0].getValue();", "+\t\t\t\tthis.property1 = entries[0].getKey();", "+\t\t\t\tthis.property2 = entries[0].getValue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b1c6cc14b583ea27eb1a789227954eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "2b5adfd5bdf5a370e30eef7cf60813025897bdd3", "commitAfterChange": "6c719f0e5c9d00da68797ddc3b13bec6943a8d9c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  protected void decodeIndexEntry(IEntryResult entryResult)", "signatureAfterChange": " protected void decodeIndexEntry(IEntryResult entryResult)", "diff": ["- protected void decodeIndexEntry(IEntryResult entryResult){", "-", "+protected void decodeIndexEntry(IEntryResult entryResult){", "-\tdecodedSuperSimpleName = CharOperation.subarray(word, slash+1, slash = CharOperation.indexOf(SEPARATOR, word, slash+1));", "+\tthis.decodedSuperSimpleName = CharOperation.subarray(word, slash + 1, slash = CharOperation.indexOf(SEPARATOR, word, slash + 1));", "-\tslash = CharOperation.indexOf(SEPARATOR, word, slash+1);", "-\tif (slash == oldSlash+1){ // could not have been known at index time", "-\t\tdecodedSuperQualification = null;", "-\t} else {", "-\t\tdecodedSuperQualification = CharOperation.subarray(word, oldSlash+1, slash);", "-\t}", "-\tdecodedSuperClassOrInterface = word[slash+1];", "+\tslash = CharOperation.indexOf(SEPARATOR, word, slash + 1);", "+\tthis.decodedSuperQualification = (slash == oldSlash + 1)", "+\t\t? null // could not have been known at index time", "+\t\t: CharOperation.subarray(word, oldSlash + 1, slash);", "+\tthis.decodedSuperClassOrInterface = word[slash + 1];", "-\tdecodedSimpleName = CharOperation.subarray(word, slash+1, slash = CharOperation.indexOf(SEPARATOR, word, slash+1));", "+\tthis.decodedSimpleName = CharOperation.subarray(word, slash + 1, slash = CharOperation.indexOf(SEPARATOR, word, slash + 1));", "-\tslash = CharOperation.indexOf(SEPARATOR, word, slash+1);", "-\tif (slash == oldSlash+1){ // could not have been known at index time", "-\t\tdecodedEnclosingTypeName = null;", "+\tslash = CharOperation.indexOf(SEPARATOR, word, slash + 1);", "+\tif (slash == oldSlash + 1) { // could not have been known at index time", "+\t\tthis.decodedEnclosingTypeName = null;", "-\t\tif (slash == oldSlash+2 && word[oldSlash+1] == ONE_ZERO[0]) {", "-\t\t\tdecodedEnclosingTypeName = ONE_ZERO;", "-\t\t} else {", "-\t\t\tdecodedEnclosingTypeName = CharOperation.subarray(word, oldSlash+1, slash);", "-\t\t}", "+\t\tthis.decodedEnclosingTypeName = (slash == oldSlash + 2 && word[oldSlash + 1] == ONE_ZERO[0])", "+\t\t\t? ONE_ZERO", "+\t\t\t: CharOperation.subarray(word, oldSlash + 1, slash);", "-\tslash = CharOperation.indexOf(SEPARATOR, word, slash+1);", "-\tif (slash == oldSlash+1){ // could not have been known at index time", "-\t\tdecodedQualification = null;", "-\t} else {", "-\t\tdecodedQualification = CharOperation.subarray(word, oldSlash+1, slash);", "-\t}", "-\t", "-\tdecodedClassOrInterface = word[slash+1];", "-\tdecodedModifiers = word[slash+2]; // implicit cast to int type", "+\tslash = CharOperation.indexOf(SEPARATOR, word, slash + 1);", "+\tthis.decodedQualification = (slash == oldSlash + 1)", "+\t\t? null // could not have been known at index time", "+\t\t: CharOperation.subarray(word, oldSlash + 1, slash);", "+\tthis.decodedClassOrInterface = word[slash + 1];", "+\tthis.decodedModifiers = word[slash + 2]; // implicit cast to int type"]}], "num": 70685}
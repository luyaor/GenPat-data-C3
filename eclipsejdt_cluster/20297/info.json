{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "672f1c57b6d0d0bb74ae73c5519910b7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99b6f8c569fecf91b885b162a7508d60", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ConstantTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void test009()", "signatureAfterChange": " public void test009()", "diff": ["-\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"     3  ldc <String \\\"1\\\"> [23]\\n\" + ", "-\t\t\"     5  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"     3  ldc <String \\\"1\\\"> [22]\\n\" + ", "+\t\t\"     5  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + ", "-\t\t\"    21  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    24  ldc <String \\\"2\\\"> [31]\\n\" + ", "-\t\t\"    26  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "-\t\t\"    29  new java.lang.StringBuffer [33]\\n\" + ", "+\t\t\"    21  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    24  ldc <String \\\"2\\\"> [30]\\n\" + ", "+\t\t\"    26  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + ", "+\t\t\"    29  new java.lang.StringBuffer [32]\\n\" + ", "-\t\t\"    33  ldc <String \\\"[\\\"> [35]\\n\" + ", "-\t\t\"    35  invokespecial java.lang.StringBuffer(java.lang.String) [37]\\n\" + ", "+\t\t\"    33  ldc <String \\\"[\\\"> [34]\\n\" + ", "+\t\t\"    35  invokespecial java.lang.StringBuffer(java.lang.String) [36]\\n\" + ", "-\t\t\"    39  invokevirtual java.lang.StringBuffer.append(java.lang.Object) : java.lang.StringBuffer  [41]\\n\" + ", "-\t\t\"    42  ldc <String \\\"]\\\"> [43]\\n\" + ", "-\t\t\"    44  invokevirtual java.lang.StringBuffer.append(java.lang.String) : java.lang.StringBuffer  [46]\\n\" + ", "-\t\t\"    47  invokevirtual java.lang.StringBuffer.toString() : java.lang.String  [50]\\n\" + ", "-\t\t\"    50  ldc <String \\\"[null]\\\"> [52]\\n\" + ", "+\t\t\"    39  invokevirtual java.lang.StringBuffer.append(java.lang.Object) : java.lang.StringBuffer [38]\\n\" + ", "+\t\t\"    42  ldc <String \\\"]\\\"> [42]\\n\" + ", "+\t\t\"    44  invokevirtual java.lang.StringBuffer.append(java.lang.String) : java.lang.StringBuffer [44]\\n\" + ", "+\t\t\"    47  invokevirtual java.lang.StringBuffer.toString() : java.lang.String [47]\\n\" + ", "+\t\t\"    50  ldc <String \\\"[null]\\\"> [51]\\n\" + ", "-\t\t\"    61  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    64  ldc <String \\\"3\\\"> [54]\\n\" + ", "-\t\t\"    66  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"    61  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    64  ldc <String \\\"3\\\"> [53]\\n\" + ", "+\t\t\"    66  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + ", "-\t\t\"    75  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    78  ldc <String \\\"4\\\"> [56]\\n\" + ", "-\t\t\"    80  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "-\t\t\"    83  ldc <String \\\"aaa\\\"> [58]\\n\" + ", "+\t\t\"    75  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    78  ldc <String \\\"4\\\"> [55]\\n\" + ", "+\t\t\"    80  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + ", "+\t\t\"    83  ldc <String \\\"aaa\\\"> [57]\\n\" + ", "-\t\t\"    86  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    89  ldc <String \\\"5\\\"> [60]\\n\" + ", "-\t\t\"    91  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [63]\\n\" + ", "+\t\t\"    86  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    89  ldc <String \\\"5\\\"> [59]\\n\" + ", "+\t\t\"    91  invokevirtual java.io.PrintStream.println(java.lang.String) : void [61]\\n\" + ", "-\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"     3  ldc <String \\\"1\\\"> [23]\\n\" + ", "-\t\t\"     5  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"     3  ldc <String \\\"1\\\"> [22]\\n\" + ", "+\t\t\"     5  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + ", "-\t\t\"    21  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    24  ldc <String \\\"2\\\"> [31]\\n\" + ", "-\t\t\"    26  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "-\t\t\"    29  new java.lang.StringBuilder [33]\\n\" + ", "+\t\t\"    21  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    24  ldc <String \\\"2\\\"> [30]\\n\" + ", "+\t\t\"    26  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + ", "+\t\t\"    29  new java.lang.StringBuilder [32]\\n\" + ", "-\t\t\"    33  ldc <String \\\"[\\\"> [35]\\n\" + ", "-\t\t\"    35  invokespecial java.lang.StringBuilder(java.lang.String) [37]\\n\" + ", "+\t\t\"    33  ldc <String \\\"[\\\"> [34]\\n\" + ", "+\t\t\"    35  invokespecial java.lang.StringBuilder(java.lang.String) [36]\\n\" + ", "-\t\t\"    39  invokevirtual java.lang.StringBuilder.append(java.lang.Object) : java.lang.StringBuilder  [41]\\n\" + ", "-\t\t\"    42  ldc <String \\\"]\\\"> [43]\\n\" + ", "-\t\t\"    44  invokevirtual java.lang.StringBuilder.append(java.lang.String) : java.lang.StringBuilder  [46]\\n\" + ", "-\t\t\"    47  invokevirtual java.lang.StringBuilder.toString() : java.lang.String  [50]\\n\" + ", "-\t\t\"    50  ldc <String \\\"[null]\\\"> [52]\\n\" + ", "+\t\t\"    39  invokevirtual java.lang.StringBuilder.append(java.lang.Object) : java.lang.StringBuilder [38]\\n\" + ", "+\t\t\"    42  ldc <String \\\"]\\\"> [42]\\n\" + ", "+\t\t\"    44  invokevirtual java.lang.StringBuilder.append(java.lang.String) : java.lang.StringBuilder [44]\\n\" + ", "+\t\t\"    47  invokevirtual java.lang.StringBuilder.toString() : java.lang.String [47]\\n\" + ", "+\t\t\"    50  ldc <String \\\"[null]\\\"> [51]\\n\" + ", "-\t\t\"    61  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    64  ldc <String \\\"3\\\"> [54]\\n\" + ", "-\t\t\"    66  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"    61  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    64  ldc <String \\\"3\\\"> [53]\\n\" + ", "+\t\t\"    66  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + ", "-\t\t\"    75  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    78  ldc <String \\\"4\\\"> [56]\\n\" + ", "-\t\t\"    80  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "-\t\t\"    83  ldc <String \\\"aaa\\\"> [58]\\n\" + ", "+\t\t\"    75  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    78  ldc <String \\\"4\\\"> [55]\\n\" + ", "+\t\t\"    80  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + ", "+\t\t\"    83  ldc <String \\\"aaa\\\"> [57]\\n\" + ", "-\t\t\"    86  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    89  ldc <String \\\"5\\\"> [60]\\n\" + ", "-\t\t\"    91  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [63]\\n\" + ", "+\t\t\"    86  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    89  ldc <String \\\"5\\\"> [59]\\n\" + ", "+\t\t\"    91  invokevirtual java.io.PrintStream.println(java.lang.String) : void [61]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3941c6e666757205fa2870f1da3a8df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " public void testTypeRefGenericAll02() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAll02() throws CoreException", "diff": ["-\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1 [\tTest<A, ? extends B, ? super C> field = new \ufffd|Test|\ufffd<A, Z<String>, X<String>> () {@91] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.x [\t\t\ufffd|X|\ufffd<String> x;@128] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.x [\t\tX<\ufffd|String|\ufffd> x;@130] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\t\ufffd|Test|\ufffd<A, B, C> t;@143] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<\ufffd|A|\ufffd, B, C> t;@148] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<A, \ufffd|B|\ufffd, C> t;@151] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<A, B, \ufffd|C|\ufffd> t;@154] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\ufffd|Test|\ufffd<X<Y<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@162] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<\ufffd|X|\ufffd<Y<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@167] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<\ufffd|Y|\ufffd<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@169] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<\ufffd|Z|\ufffd<String>>>, Y<Z<String>>, Z<String>> bar() {@171] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<\ufffd|String|\ufffd>>>, Y<Z<String>>, Z<String>> bar() {@173] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, \ufffd|Y|\ufffd<Z<String>>, Z<String>> bar() {@184] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<\ufffd|Z|\ufffd<String>>, Z<String>> bar() {@186] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<\ufffd|String|\ufffd>>, Z<String>> bar() {@188] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<String>>, \ufffd|Z|\ufffd<String>> bar() {@198] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<String>>, Z<\ufffd|String|\ufffd>> bar() {@200] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new \ufffd|Test|\ufffd<X<Y<Z<String>>>, Y<Z<String>>, Z<String>>();@231] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<\ufffd|X|\ufffd<Y<Z<String>>>, Y<Z<String>>, Z<String>>();@236] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<\ufffd|Y|\ufffd<Z<String>>>, Y<Z<String>>, Z<String>>();@238] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<\ufffd|Z|\ufffd<String>>>, Y<Z<String>>, Z<String>>();@240] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<\ufffd|String|\ufffd>>>, Y<Z<String>>, Z<String>>();@242] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, \ufffd|Y|\ufffd<Z<String>>, Z<String>>();@253] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<\ufffd|Z|\ufffd<String>>, Z<String>>();@255] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<\ufffd|String|\ufffd>>, Z<String>>();@257] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<String>>, \ufffd|Z|\ufffd<String>>();@267] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<String>>, Z<\ufffd|String|\ufffd>>();@269] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<\ufffd|A|\ufffd, Z<String>, X<String>> () {@96] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, \ufffd|Z|\ufffd<String>, X<String>> () {@99] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<\ufffd|String|\ufffd>, X<String>> () {@101] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<String>, \ufffd|X|\ufffd<String>> () {@110] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<String>, X<\ufffd|String|\ufffd>> () {@112] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\t\ufffd|Test|\ufffd<A, ? extends B, ? super C> field = new Test<A, Z<String>, X<String>> () {@47] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<\ufffd|A|\ufffd, ? extends B, ? super C> field = new Test<A, Z<String>, X<String>> () {@52] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends \ufffd|B|\ufffd, ? super C> field = new Test<A, Z<String>, X<String>> () {@65] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super \ufffd|C|\ufffd> field = new Test<A, Z<String>, X<String>> () {@76] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\t\ufffd|Test|\ufffd<? super A, B, ? extends C> foo(Test<? extends A, ? super B, C> param) {@290] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super \ufffd|A|\ufffd, B, ? extends C> foo(Test<? extends A, ? super B, C> param) {@303] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, \ufffd|B|\ufffd, ? extends C> foo(Test<? extends A, ? super B, C> param) {@306] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends \ufffd|C|\ufffd> foo(Test<? extends A, ? super B, C> param) {@319] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(\ufffd|Test|\ufffd<? extends A, ? super B, C> param) {@326] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends \ufffd|A|\ufffd, ? super B, C> param) {@341] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends A, ? super \ufffd|B|\ufffd, C> param) {@352] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends A, ? super B, \ufffd|C|\ufffd> param) {@355] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.C [class C extends \ufffd|X|\ufffd<String> {}@426] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.C [class C extends X<\ufffd|String|\ufffd> {}@428] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Y [class Y<S> extends \ufffd|A|\ufffd {}@472] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Z [class Z<P> extends \ufffd|B|\ufffd {}@496] EXACT_MATCH\"", "+\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1 [\tTest<A, ? extends B, ? super C> field = new !|Test|!<A, Z<String>, X<String>> () {@91] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.x [\t\t!|X|!<String> x;@128] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.x [\t\tX<!|String|!> x;@130] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\t!|Test|!<A, B, C> t;@143] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<!|A|!, B, C> t;@148] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<A, !|B|!, C> t;@151] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<A, B, !|C|!> t;@154] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t!|Test|!<X<Y<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@162] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<!|X|!<Y<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@167] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<!|Y|!<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@169] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<!|Z|!<String>>>, Y<Z<String>>, Z<String>> bar() {@171] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<!|String|!>>>, Y<Z<String>>, Z<String>> bar() {@173] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, !|Y|!<Z<String>>, Z<String>> bar() {@184] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<!|Z|!<String>>, Z<String>> bar() {@186] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<!|String|!>>, Z<String>> bar() {@188] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<String>>, !|Z|!<String>> bar() {@198] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<String>>, Z<!|String|!>> bar() {@200] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new !|Test|!<X<Y<Z<String>>>, Y<Z<String>>, Z<String>>();@231] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<!|X|!<Y<Z<String>>>, Y<Z<String>>, Z<String>>();@236] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<!|Y|!<Z<String>>>, Y<Z<String>>, Z<String>>();@238] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<!|Z|!<String>>>, Y<Z<String>>, Z<String>>();@240] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<!|String|!>>>, Y<Z<String>>, Z<String>>();@242] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, !|Y|!<Z<String>>, Z<String>>();@253] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<!|Z|!<String>>, Z<String>>();@255] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<!|String|!>>, Z<String>>();@257] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<String>>, !|Z|!<String>>();@267] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<String>>, Z<!|String|!>>();@269] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<!|A|!, Z<String>, X<String>> () {@96] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, !|Z|!<String>, X<String>> () {@99] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<!|String|!>, X<String>> () {@101] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<String>, !|X|!<String>> () {@110] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<String>, X<!|String|!>> () {@112] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\t!|Test|!<A, ? extends B, ? super C> field = new Test<A, Z<String>, X<String>> () {@47] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<!|A|!, ? extends B, ? super C> field = new Test<A, Z<String>, X<String>> () {@52] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends !|B|!, ? super C> field = new Test<A, Z<String>, X<String>> () {@65] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super !|C|!> field = new Test<A, Z<String>, X<String>> () {@76] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\t!|Test|!<? super A, B, ? extends C> foo(Test<? extends A, ? super B, C> param) {@290] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super !|A|!, B, ? extends C> foo(Test<? extends A, ? super B, C> param) {@303] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, !|B|!, ? extends C> foo(Test<? extends A, ? super B, C> param) {@306] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends !|C|!> foo(Test<? extends A, ? super B, C> param) {@319] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(!|Test|!<? extends A, ? super B, C> param) {@326] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends !|A|!, ? super B, C> param) {@341] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends A, ? super !|B|!, C> param) {@352] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends A, ? super B, !|C|!> param) {@355] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.C [class C extends !|X|!<String> {}@426] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.C [class C extends X<!|String|!> {}@428] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Y [class Y<S> extends !|A|! {}@472] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Z [class Z<P> extends !|B|! {}@496] EXACT_MATCH\""]}], "num": 20297}
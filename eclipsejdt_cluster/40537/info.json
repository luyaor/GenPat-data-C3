{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9eec129b766f6a71c4674753c727c9a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fce2f32989da8f8741e435fe428cfab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "c62484c76d34e1754fa4fc8cfcdf45889f18f642", "commitAfterChange": "41800ceef1e22df640004021a2ad024169ee7b90", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic ZipFile getZipFile(IPath path) throws CoreException", "signatureAfterChange": " \tpublic ZipFile getZipFile(IPath path) throws CoreException", "diff": ["-\t\tsynchronized(this.zipFiles) { // TODO: (jerome) use PerThreadObject which does synchronization", "-\t\t\tThread currentThread = Thread.currentThread();", "-\t\t\tHashMap map = null;", "-\t\t\tZipFile zipFile;", "-\t\t\tif ((map = (HashMap)this.zipFiles.get(currentThread)) != null ", "-\t\t\t\t\t&& (zipFile = (ZipFile)map.get(path)) != null) {", "-\t\t\t\t\t", "-\t\t\t\treturn zipFile;", "+\t\tHashMap map;", "+\t\tZipFile zipFile;", "+\t\tif ((map = (HashMap)this.zipFiles.getCurrent()) != null ", "+\t\t\t\t&& (zipFile = (ZipFile)map.get(path)) != null) {", "+\t\t\t\t", "+\t\t\treturn zipFile;", "+\t\t}", "+\t\tString fileSystemPath= null;", "+\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();", "+\t\tIResource file = root.findMember(path);", "+\t\tif (file != null) {", "+\t\t\t// internal resource", "+\t\t\tIPath location;", "+\t\t\tif (file.getType() != IResource.FILE || (location = file.getLocation()) == null) {", "+\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "-\t\t\tString fileSystemPath= null;", "-\t\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();", "-\t\t\tIResource file = root.findMember(path);", "-\t\t\tif (file != null) {", "-\t\t\t\t// internal resource", "-\t\t\t\tIPath location;", "-\t\t\t\tif (file.getType() != IResource.FILE || (location = file.getLocation()) == null) {", "-\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tfileSystemPath= location.toOSString();", "-\t\t\t} else {", "-\t\t\t\t// external resource", "-\t\t\t\tfileSystemPath= path.toOSString();", "+\t\t\tfileSystemPath= location.toOSString();", "+\t\t} else {", "+\t\t\t// external resource", "+\t\t\tfileSystemPath= path.toOSString();", "+\t\t}", "+", "+\t\ttry {", "+\t\t\tif (ZIP_ACCESS_VERBOSE) {", "+\t\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [JavaModelManager.getZipFile(IPath)] Creating ZipFile on \" + fileSystemPath ); //$NON-NLS-1$ //$NON-NLS-2$", "-\t", "-\t\t\ttry {", "-\t\t\t\tif (ZIP_ACCESS_VERBOSE) {", "-\t\t\t\t\tSystem.out.println(\"(\" + currentThread + \") [JavaModelManager.getZipFile(IPath)] Creating ZipFile on \" + fileSystemPath ); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t}", "-\t\t\t\tzipFile = new ZipFile(fileSystemPath);", "-\t\t\t\tif (map != null) {", "-\t\t\t\t\tmap.put(path, zipFile);", "-\t\t\t\t}", "-\t\t\t\treturn zipFile;", "-\t\t\t} catch (IOException e) {", "-\t\t\t\tthrow new CoreException(new Status(Status.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"status.IOException\"), e)); //$NON-NLS-1$", "+\t\t\tzipFile = new ZipFile(fileSystemPath);", "+\t\t\tif (map != null) {", "+\t\t\t\tmap.put(path, zipFile);", "+\t\t\treturn zipFile;", "+\t\t} catch (IOException e) {", "+\t\t\tthrow new CoreException(new Status(Status.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"status.IOException\"), e)); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9d1ee5946a35d663a1982022baa37f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "c62484c76d34e1754fa4fc8cfcdf45889f18f642", "commitAfterChange": "41800ceef1e22df640004021a2ad024169ee7b90", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void cacheZipFiles()", "signatureAfterChange": " \tpublic void cacheZipFiles()", "diff": ["-\t\tsynchronized(this.zipFiles) {", "-\t\t\tThread currentThread = Thread.currentThread();", "-\t\t\tif (this.zipFiles.get(currentThread) != null) return;", "-\t\t\tthis.zipFiles.put(currentThread, new HashMap());", "-\t\t}", "+\t\tif (this.zipFiles.getCurrent() != null) return;", "+\t\tthis.zipFiles.setCurrent(new HashMap());"]}], "num": 40537}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac274aabd87e6ee21721a5ead6f79606", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d52bfb06645f992dc896c0d8cf520ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "8b61d97704a2b67ed3d29404b8692bdbf30b8b5d", "commitAfterChange": "7fa6d6b6f60d0d2345e743063241c3eb3452b00f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope unused)", "signatureAfterChange": " \tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope unused)", "diff": ["-\t\t\t\t\treportMatching(typeDeclaration, enclosingElement, -1, nodeSet, occurrenceCount);", "+\t\t\t\t\treportMatching(typeDeclaration, this.enclosingElement, -1, nodeSet, occurrenceCount);", "-\t\t\t\t\treportMatching(typeDeclaration, enclosingElement, level != null ? level.intValue() : -1, nodeSet, occurrenceCount);", "+\t\t\t\t\treportMatching(typeDeclaration, this.enclosingElement, level != null ? level.intValue() : -1, nodeSet, occurrenceCount);", "-\t\t\t\t\tSearchMatch match = newDeclarationMatch(enclosingElement, level.intValue(), offset, enumConstant.sourceEnd-offset+1);", "+\t\t\t\t\tSearchMatch match = newDeclarationMatch(this.enclosingElement, this.enclosingElementBinding, level.intValue(), offset, enumConstant.sourceEnd-offset+1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34b17fa41cdf3274b31f1c16000552ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "2b1a4f1476591cddf4ad07ba4b472e9b549bf125", "commitAfterChange": "ee4f2eae50cec6e4a22bccc913270fde4c8840e5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope unused)", "signatureAfterChange": " \tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope unused)", "diff": ["-\t\t\tString simpleName;", "+\t\t\tchar[] simpleName;", "-\t\t\t\tsimpleName = \"\"; //$NON-NLS-1$", "+\t\t\t\tsimpleName = CharOperation.NO_CHAR;", "-\t\t\t\tsimpleName = new String(typeDeclaration.name);", "+\t\t\t\tsimpleName = typeDeclaration.name;", "-\t\t\tInteger occurrenceCount = (Integer)occurrencesCounts.get(simpleName);", "-\t\t\tif (occurrenceCount == null) {", "-\t\t\t\toccurrenceCount = new Integer(1);", "+\t\t\tint occurrenceCount = occurrencesCounts.get(simpleName);", "+\t\t\tif (occurrenceCount == HashtableOfIntValues.NO_VALUE) {", "+\t\t\t\toccurrenceCount = 1;", "-\t\t\t\toccurrenceCount = new Integer(occurrenceCount.intValue()+1);", "+\t\t\t\toccurrenceCount = occurrenceCount + 1;", "-\t\t\t\treportMatching(typeDeclaration, enclosingElement, -1, nodeSet, occurrenceCount.intValue());", "+\t\t\t\treportMatching(typeDeclaration, enclosingElement, -1, nodeSet, occurrenceCount);", "-\t\t\t\treportMatching(typeDeclaration, enclosingElement, level != null ? level.intValue() : -1, nodeSet, occurrenceCount.intValue());", "+\t\t\t\treportMatching(typeDeclaration, enclosingElement, level != null ? level.intValue() : -1, nodeSet, occurrenceCount);"]}], "num": 15788}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "90ab2c13e17623ba4c987130050e4dd5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c22422db13b9b8bc3029117eb4ef9e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "07f2a3d76611d11852367ea136a6272990449122", "commitAfterChange": "b51487a3e769c1faf54930e906289a243b81936a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": " \t\t\t\t\t\tpublic void handleException(Throwable exception)", "signatureAfterChange": "  \tpublic void notifyListeners(IJavaElementDelta deltaToNotify, int eventType, IElementChangedListener[] listeners, int[] listenerMask, int listenerCount)", "diff": ["+", "+\tpublic void notifyListeners(IJavaElementDelta deltaToNotify, int eventType, IElementChangedListener[] listeners, int[] listenerMask, int listenerCount) {", "+\t\tfinal ElementChangedEvent extraEvent = new ElementChangedEvent(deltaToNotify, eventType);", "+\t\tfor (int i= 0; i < listenerCount; i++) {", "+\t\t\tif ((listenerMask[i] & eventType) != 0){", "+\t\t\t\tfinal IElementChangedListener listener = listeners[i];", "+\t\t\t\tif (DeltaProcessor.VERBOSE) {", "+\t\t\t\t\tSystem.out.println(\"Listener #\" + (i+1) + \"=\" + listener.toString());//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t// wrap callbacks with Safe runnable for subsequent listeners to be called when some are causing grief", "+\t\t\t\tPlatform.run(new ISafeRunnable() {", "+\t\t\t\t\tpublic void handleException(Throwable exception) {", "+\t\t\t\t\t\tUtil.log(exception, \"Exception occurred in listener of Java element change notification\"); //$NON-NLS-1$", "+\t\t\t\t\tpublic void run() throws Exception {", "+\t\t\t\t\t\tlistener.elementChanged(extraEvent);", "-\t\t\t\t\tPlatform.run(new ISafeRunnable() {", "-\t\t\t\t\t\tpublic void handleException(Throwable exception) {", "-\t\t\t\t\t\t\tUtil.log(exception, \"Exception occurred in listener of Java element change notification\"); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "+\t\t\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bfd013b5481832c8a6ed370cffd1624", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "5e37111f16a5b67ba28515808a13a4062d45b23e", "commitAfterChange": "45a31ddc243181df16e6406f1b70f955ef191113", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected void generateClasspathChangeDeltas( \t\tIClasspathEntry[] oldResolvedPath, \t\tIClasspathEntry[] newResolvedPath, \t\tJavaModelManager manager, \t\tJavaProject project)", "signatureAfterChange": " \tprotected void generateClasspathChangeDeltas( \t\tIClasspathEntry[] oldResolvedPath, \t\tIClasspathEntry[] newResolvedPath, \t\tJavaModelManager manager, \t\tfinal JavaProject project)", "diff": ["-\t\tJavaProject project) {", "+\t\tfinal JavaProject project) {", "-\t\tIndexManager indexManager = manager.getIndexManager();", "+\t\tfinal IndexManager indexManager = manager.getIndexManager();", "-\t\t\t\t\tindexManager.removeSourceFolderFromIndex(project, oldResolvedPath[i].getPath());", "+\t\t\t\t\tfinal IPath path = oldResolvedPath[i].getPath();", "+\t\t\t\t\tpostAction(new IPostAction() {", "+\t\t\t\t\t\tpublic String getID() {", "+\t\t\t\t\t\t\treturn path.toString();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tpublic void run() throws JavaModelException {", "+\t\t\t\t\t\t\tindexManager.removeSourceFolderFromIndex(project, path);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}, ", "+\t\t\t\t\tREMOVEALL_APPEND);", "-\t\t\t\t\t\t\tIPath newPath = newResolvedPath[i].getPath();", "+\t\t\t\t\t\t\tfinal IPath newPath = newResolvedPath[i].getPath();", "-\t\t\t\t\t\t\t\tindexManager.indexLibrary(newPath, project.getProject());", "+\t\t\t\t\t\t\t\tpostAction(new IPostAction() {", "+\t\t\t\t\t\t\t\t\tpublic String getID() {", "+\t\t\t\t\t\t\t\t\t\treturn newPath.toString();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tpublic void run() throws JavaModelException {", "+\t\t\t\t\t\t\t\t\t\tindexManager.indexLibrary(newPath, project.getProject());", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}, ", "+\t\t\t\t\t\t\t\tREMOVEALL_APPEND);", "-\t\t\t\t\t\t\tindexManager.indexSourceFolder(project, newResolvedPath[i].getPath());", "+\t\t\t\t\t\t\tfinal IPath path = newResolvedPath[i].getPath();", "+\t\t\t\t\t\t\tpostAction(new IPostAction() {", "+\t\t\t\t\t\t\t\tpublic String getID() {", "+\t\t\t\t\t\t\t\t\treturn path.toString();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tpublic void run() throws JavaModelException {", "+\t\t\t\t\t\t\t\t\tindexManager.indexSourceFolder(project, path);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}, ", "+\t\t\t\t\t\t\tREMOVEALL_APPEND);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "402e749dbd4ff8f37a156057383d63b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "6632fac0c771203cc103a56018cc2f91e75619c9", "commitAfterChange": "f8a259eeb25169743c68697d7031864dfd97118c", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tpublic void startup() throws CoreException", "signatureAfterChange": " \tpublic void startup() throws CoreException", "diff": ["-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tfinal JavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "+\t\t\tfinal IWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\t\t\t// process deltas since last activated", "-\t\t\tISavedState savedState = workspace.addSaveParticipant(this, manager);", "-\t\t\tif (savedState != null) {", "-\t\t\t\t// the event type coming from the saved state is always POST_AUTO_BUILD", "-\t\t\t\t// force it to be POST_CHANGE so that the delta processor can handle it", "-\t\t\t\tmanager.deltaState.eventType = IResourceChangeEvent.POST_CHANGE;", "-\t\t\t\tsavedState.processResourceChangeEvents(manager.deltaState);", "-\t\t\t}", "+\t\t\t// process deltas since last activated in indexer thread so that indexes are up-to-date.", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=38658", "+\t\t\tmanager.getIndexManager().request(", "+\t\t\t\tnew IJob() {", "+\t\t\t\t\tpublic boolean belongsTo(String jobFamily) {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\tpublic void cancel() {", "+\t\t\t\t\t\t// ignore", "+\t\t\t\t\t}", "+\t\t\t\t\tpublic void ensureReadyToRun() {", "+\t\t\t\t\t\t// ignore", "+\t\t\t\t\t}", "+\t\t\t\t\tpublic boolean execute(IProgressMonitor progress) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t// add save participant and process delta atomically", "+\t\t\t\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=59937", "+\t\t\t\t\t\t\tworkspace.run(", "+\t\t\t\t\t\t\t\tnew IWorkspaceRunnable() {", "+\t\t\t\t\t\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "+\t\t\t\t\t\t\t\t\t\tISavedState savedState = workspace.addSaveParticipant(JavaCore.this, manager);", "+\t\t\t\t\t\t\t\t\t\tif (savedState != null) {", "+\t\t\t\t\t\t\t\t\t\t\t// the event type coming from the saved state is always POST_AUTO_BUILD", "+\t\t\t\t\t\t\t\t\t\t\t// force it to be POST_CHANGE so that the delta processor can handle it", "+\t\t\t\t\t\t\t\t\t\t\tmanager.deltaState.getDeltaProcessor().overridenEventType = IResourceChangeEvent.POST_CHANGE;", "+\t\t\t\t\t\t\t\t\t\t\tsavedState.processResourceChangeEvents(manager.deltaState);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t},", "+\t\t\t\t\t\t\t\tnull); // no progress monitor", "+\t\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\t\tUtil.log(e, \"Could not process saved state delta\"); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "427d1a115092dc24cb7059a1d0022c6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "376d52c1cdc65e12a1dbf449737ba06d2101c4f4", "commitAfterChange": "7f3c64574901f5a013fb7527a4bb25411dd2afcf", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType) {", "+\tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType) {", "-\t\tboolean useTiebreakMethod = invocationSite.genericTypeArguments() == null;", "+\t\tInvocationSite tieBreakInvocationSite = new InvocationSite() {", "+\t\t\tpublic TypeBinding[] genericTypeArguments() { return null; } // ignore genericTypeArgs", "+\t\t\tpublic boolean isSuperAccess() { return invocationSite.isSuperAccess(); }", "+\t\t\tpublic boolean isTypeAccess() { return invocationSite.isTypeAccess(); }", "+\t\t\tpublic void setActualReceiverType(ReferenceBinding actualReceiverType) { /* ignore */}", "+\t\t\tpublic void setDepth(int depth) { /* ignore */}", "+\t\t\tpublic void setFieldIndex(int depth) { /* ignore */}", "+\t\t\tpublic int sourceStart() { return invocationSite.sourceStart(); }", "+\t\t\tpublic int sourceEnd() { return invocationSite.sourceStart(); }", "+\t\t};", "-\t\t\t\tMethodBinding tiebreakMethod = useTiebreakMethod ? current.tiebreakMethod() : current;", "+\t\t\t\tMethodBinding tiebreakMethod = current.tiebreakMethod();", "-\t\t\t\t\tMethodBinding acceptable = computeCompatibleMethod(methodToTest, tiebreakMethod.parameters, invocationSite);", "+\t\t\t\t\tMethodBinding acceptable = computeCompatibleMethod(methodToTest, tiebreakMethod.parameters, tieBreakInvocationSite);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74240a464b83b55b21ee6bc845ba951b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "bb4e6bac07124b460a049d2b185093478c4f0c72", "commitAfterChange": "9cf59650b85352257b29d89bc6a53254086661f7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t\t \t\tprivate CompilationParticipant[] getRegisteredParticipants()", "signatureAfterChange": " \t\t \t\tprivate CompilationParticipant[] getRegisteredParticipants()", "diff": ["-\t\t\tArrayList participants = new ArrayList();", "+\t\t\tfinal ArrayList participants = new ArrayList();", "-\t\t\t\t\tfor(int k = 0; k < configElements.length; k++){", "-\t\t\t\t\t\tString elementName = configElements[k].getName();", "+\t\t\t\t\tfor(int k = 0; k < configElements.length; k++) {", "+\t\t\t\t\t\tfinal IConfigurationElement configElement = configElements[k];", "+\t\t\t\t\t\tString elementName =configElement.getName();", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tObject execExt = configElements[j].createExecutableExtension(\"class\"); //$NON-NLS-1$ ", "-\t\t\t\t\t\t\tif (execExt instanceof CompilationParticipant){", "-\t\t\t\t\t\t\t\tparticipants.add(execExt);", "+\t\t\t\t\t\tPlatform.run(new ISafeRunnable() {", "+\t\t\t\t\t\t\tpublic void handleException(Throwable exception) {", "+\t\t\t\t\t\t\t\tUtil.log(exception, \"Exception occurred while creating compilation participant\"); //$NON-NLS-1$", "-\t\t\t\t\t\t} catch(CoreException e) {", "-\t\t\t\t\t\t\t// executable extension could not be created: ignore this participant", "-\t\t\t\t\t\t\tUtil.log(e, \"Unexpected exception trying to instanciate compilation participant\"); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tpublic void run() throws Exception {", "+\t\t\t\t\t\t\t\tObject execExt = configElement.createExecutableExtension(\"class\"); //$NON-NLS-1$ ", "+\t\t\t\t\t\t\t\tif (execExt instanceof CompilationParticipant) {", "+\t\t\t\t\t\t\t\t\tparticipants.add(execExt);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t});", "-\t\t\tthis.registeredParticipants = new CompilationParticipant[size];", "-\t\t\tparticipants.toArray(this.registeredParticipants);", "-\t\t\treturn this.registeredParticipants;", "+\t\t\tCompilationParticipant[] result = new CompilationParticipant[size];", "+\t\t\tparticipants.toArray(result);", "+\t\t\tfor (int i = 0; i < size; i++) {", "+\t\t\t\tfinal CompilationParticipant participant = result[i];", "+\t\t\t\tPlatform.run(new ISafeRunnable() {", "+\t\t\t\t\tpublic void handleException(Throwable exception) {", "+\t\t\t\t\t\tUtil.log(exception, \"Exception occurred while configuring compilation participant\"); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tpublic void run() throws Exception {", "+\t\t\t\t\t\tparticipant.configure(participants);", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t}", "+\t\t\tsize = participants.size();", "+\t\t\tif (size != result.length)", "+\t\t\t\tresult = new CompilationParticipant[size];", "+\t\t\tparticipants.toArray(result);", "+\t\t\treturn this.registeredParticipants = result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bd6306d65d99028107e45da9d3ba57a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "691d3660a9e0208e3415b1156e7bd00c06b188c3", "commitAfterChange": "3a400ea31a60e9929f0d87b15c40a2e2624aa23a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void resourceChanged(IResourceChangeEvent event)", "signatureAfterChange": "  \tpublic void resourceChanged(final IResourceChangeEvent event)", "diff": ["-\tpublic void resourceChanged(IResourceChangeEvent event) {", "+", "+\tpublic void resourceChanged(final IResourceChangeEvent event) {", "+\t\tboolean isPostChange = event.getType() == IResourceChangeEvent.POST_CHANGE;", "+\t\tif (isPostChange) {", "+\t\t\tfor (int i = 0; i < this.preResourceChangeListenerCount; i++) {", "+\t\t\t\t// wrap callbacks with Safe runnable for subsequent listeners to be called when some are causing grief", "+\t\t\t\tfinal IResourceChangeListener listener = this.preResourceChangeListeners[i];", "+\t\t\t\tPlatform.run(new ISafeRunnable() {", "+\t\t\t\t\tpublic void handleException(Throwable exception) {", "+\t\t\t\t\t\tUtil.log(exception, \"Exception occurred in listener of pre Java resource change notification\"); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tpublic void run() throws Exception {", "+\t\t\t\t\t\tlistener.resourceChanged(event);", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t}", "+\t\t}", "-\t\t\tif (event.getType() == IResourceChangeEvent.POST_CHANGE) {", "+\t\t\tif (isPostChange) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a9247232ae573eaa2578a93373af9e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "a216b7a3c34bd18a3c5423aaf9bc759d76b8f068", "commitAfterChange": "7bfaf51af3984cd537f4166827c50facf345b0dc", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tpublic void fire(JavaElementDelta customDelta, int originalEventType)", "signatureAfterChange": "\r \tpublic void fire(JavaElementDelta customDelta, int originalEventType)", "diff": ["-\t\t\t\tElementChangedEvent extraEvent = new ElementChangedEvent(deltaToNotify, ElementChangedEvent.PRE_AUTO_BUILD);\r", "+\t\t\t\tfinal ElementChangedEvent extraEvent = new ElementChangedEvent(deltaToNotify, ElementChangedEvent.PRE_AUTO_BUILD);\r", "-\t\t\t\t\t\tlisteners[i].elementChanged(extraEvent);\r", "+\t\t\t\t\t\tfinal IElementChangedListener listener = listeners[i];\r", "+\t\t\t\t\t\t// wrap callbacks with Safe runnable for subsequent listeners to be called when some are causing grief\r", "+\t\t\t\t\t\tPlatform.run(new ISafeRunnable() {\r", "+\t\t\t\t\t\t\tpublic void handleException(Throwable exception) {\r", "+\t\t\t\t\t\t\t\tUtil.log(exception, \"Exception occurred in listener of Java element change notification\"); //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tpublic void run() throws Exception {\r", "+\t\t\t\t\t\t\t\tlistener.elementChanged(extraEvent);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t});\r", "-\t\t\tElementChangedEvent event = new ElementChangedEvent(deltaToNotify, eventType);\r", "+\t\t\tfinal ElementChangedEvent event = new ElementChangedEvent(deltaToNotify, eventType);\r", "-\t\t\t\t\tlisteners[i].elementChanged(event);\r", "+\t\t\t\t\t// wrap callbacks with Safe runnable for subsequent listeners to be called when some are causing grief\r", "+\t\t\t\t\tfinal IElementChangedListener listener = listeners[i];\r", "+\t\t\t\t\tPlatform.run(new ISafeRunnable() {\r", "+\t\t\t\t\t\tpublic void handleException(Throwable exception) {\r", "+\t\t\t\t\t\t\tUtil.log(exception, \"Exception occurred in listener of Java element change notification\"); //$NON-NLS-1$\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tpublic void run() throws Exception {\r", "+\t\t\t\t\t\t\tlistener.elementChanged(event);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t});\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95e38e4a55186ab87907dc4e62e51bf4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "9b8497af1cbd77526a4fa45b99ed631f29570c0f", "commitAfterChange": "e2827e126b55e7ef1923fa3efec0a2ea0aba2477", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t\t\t\t \t\tpublic CompilationParticipant[] getCompilationParticipants(IJavaProject project)", "signatureAfterChange": " \t\t\t\t \t\tpublic CompilationParticipant[] getCompilationParticipants(IJavaProject project)", "diff": ["-\t\t\tCompilationParticipant[] participants = getRegisteredParticipants();", "-\t\t\tif (participants == NO_PARTICIPANTS)", "+\t\t\tfinal Object[][] participantsPerSource = getRegisteredParticipants();", "+\t\t\tif (participantsPerSource == NO_PARTICIPANTS)", "+\t\t\tString sourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true/*inherit options*/);", "+\t\t\tfinal int sourceLevelIndex = indexForSourceLevel(sourceLevel);", "+\t\t\tfinal Object[] participants = participantsPerSource[sourceLevelIndex];", "-\t\t\t\tCompilationParticipant participant = participants[i];", "-\t\t\t\tif (participant.isActive(project))", "+\t\t\t\tif (participants[i] instanceof IConfigurationElement) {", "+\t\t\t\t\tfinal IConfigurationElement configElement = (IConfigurationElement) participants[i];", "+\t\t\t\t\tfinal int participantIndex = i;", "+\t\t\t\t\tPlatform.run(new ISafeRunnable() {", "+\t\t\t\t\t\tpublic void handleException(Throwable exception) {", "+\t\t\t\t\t\t\tUtil.log(exception, \"Exception occurred while creating compilation participant\"); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tpublic void run() throws Exception {", "+\t\t\t\t\t\t\tObject executableExtension = configElement.createExecutableExtension(\"class\"); //$NON-NLS-1$ ", "+\t\t\t\t\t\t\tfor (int j = sourceLevelIndex; j < MAX_SOURCE_LEVEL; j++)", "+\t\t\t\t\t\t\t\tparticipantsPerSource[j][participantIndex] = executableExtension;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t});", "+\t\t\t\t} ", "+\t\t\t\tCompilationParticipant participant = (CompilationParticipant) participants[i];", "+\t\t\t\tif (participant != null && participant.isActive(project))"]}], "num": 18800}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6c8916099ea08ea80f1033872965d1e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b32aaa27ee2d587e390448e76aa7200", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "10234afdc4f5690ec37e139071f618abb52d00b8", "commitAfterChange": "8aa3c69cecd84b3c2c3bfd8031419f42f6bb2e8f", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic boolean isSubTypeCompatible(ITypeBinding type)", "signatureAfterChange": " \tpublic boolean isSubTypeCompatible(ITypeBinding type)", "diff": ["-\t\tif (this == type) return true;", "-\t\tif (this.binding.isBaseType()) return false;", "-\t\tTypeBinding other = (TypeBinding) type;", "-\t\tif (other.binding.isBaseType()) return false;", "-\t\treturn this.binding.isCompatibleWith(other.binding);", "+\t\ttry {", "+\t\t\tif (this == type) return true;", "+\t\t\tif (this.binding.isBaseType()) return false;", "+\t\t\tTypeBinding other = (TypeBinding) type;", "+\t\t\tif (other.binding.isBaseType()) return false;", "+\t\t\treturn this.binding.isCompatibleWith(other.binding);", "+\t\t} catch (AbortCompilation e) {", "+\t\t\t// don't surface internal exception to clients", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=143013", "+\t\t\treturn false;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27f8eb5c0379cc6d51feaa1457a47256", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "10234afdc4f5690ec37e139071f618abb52d00b8", "commitAfterChange": "8aa3c69cecd84b3c2c3bfd8031419f42f6bb2e8f", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic boolean isAssignmentCompatible(ITypeBinding type)", "signatureAfterChange": " \tpublic boolean isAssignmentCompatible(ITypeBinding type)", "diff": ["-\t\tif (this == type) return true;", "-\t\tTypeBinding other = (TypeBinding) type;", "-\t\tScope scope = this.resolver.scope();", "-\t\tif (scope == null) return false;", "-\t\treturn this.binding.isCompatibleWith(other.binding) || scope.isBoxingCompatibleWith(this.binding, other.binding);", "+\t\ttry {", "+\t\t\tif (this == type) return true;", "+\t\t\tTypeBinding other = (TypeBinding) type;", "+\t\t\tScope scope = this.resolver.scope();", "+\t\t\tif (scope == null) return false;", "+\t\t\treturn this.binding.isCompatibleWith(other.binding) || scope.isBoxingCompatibleWith(this.binding, other.binding);", "+\t\t} catch (AbortCompilation e) {", "+\t\t\t// don't surface internal exception to clients", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=143013", "+\t\t\treturn false;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "291598556ff0904b9f8be0209cb034ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "10234afdc4f5690ec37e139071f618abb52d00b8", "commitAfterChange": "8aa3c69cecd84b3c2c3bfd8031419f42f6bb2e8f", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic boolean isCastCompatible(ITypeBinding type)", "signatureAfterChange": " \tpublic boolean isCastCompatible(ITypeBinding type)", "diff": ["-\t\tExpression expression = new Expression() {", "-\t\t\tpublic StringBuffer printExpression(int indent,StringBuffer output) {", "-\t\t\t\treturn null;", "-\t\t\t}", "-\t\t};", "-\t\tScope scope = this.resolver.scope();", "-\t\tif (scope == null) return false;", "-\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding expressionType = ((TypeBinding) type).binding;", "-\t\t// simulate capture in case checked binding did not properly get extracted from a reference", "-\t\texpressionType = expressionType.capture(scope, 0);", "-\t\treturn expression.checkCastTypesCompatibility(scope, this.binding, expressionType, null);", "+\t\ttry {", "+\t\t\tExpression expression = new Expression() {", "+\t\t\t\tpublic StringBuffer printExpression(int indent,StringBuffer output) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t};", "+\t\t\tScope scope = this.resolver.scope();", "+\t\t\tif (scope == null) return false;", "+\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding expressionType = ((TypeBinding) type).binding;", "+\t\t\t// simulate capture in case checked binding did not properly get extracted from a reference", "+\t\t\texpressionType = expressionType.capture(scope, 0);", "+\t\t\treturn expression.checkCastTypesCompatibility(scope, this.binding, expressionType, null);", "+\t\t} catch (AbortCompilation e) {", "+\t\t\t// don't surface internal exception to clients", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=143013", "+\t\t\treturn false;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6612c86a959658206f76d368387a7c43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "10234afdc4f5690ec37e139071f618abb52d00b8", "commitAfterChange": "8aa3c69cecd84b3c2c3bfd8031419f42f6bb2e8f", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic boolean overrides(IMethodBinding overridenMethod)", "signatureAfterChange": " \tpublic boolean overrides(IMethodBinding overridenMethod)", "diff": ["-\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding overridenCompilerBinding = ((MethodBinding) overridenMethod).binding;", "-\t\tif (this.binding == overridenCompilerBinding) ", "-\t\t\treturn false;", "-\t\tchar[] selector = this.binding.selector;", "-\t\tif (!CharOperation.equals(selector, overridenCompilerBinding.selector))", "-\t\t\treturn false;", "-\t\tTypeBinding match = this.binding.declaringClass.findSuperTypeWithSameErasure(overridenCompilerBinding.declaringClass);", "-\t\tif (!(match instanceof ReferenceBinding)) return false;", "-\t\t", "-\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding[] superMethods = ((ReferenceBinding)match).getMethods(selector);", "-\t\tfor (int i = 0, length = superMethods.length; i < length; i++) {", "-\t\t\tif (superMethods[i].original() == overridenCompilerBinding) {", "-\t\t\t\tLookupEnvironment lookupEnvironment = this.resolver.lookupEnvironment();", "-\t\t\t\tif (lookupEnvironment == null) return false;", "-\t\t\t\tMethodVerifier methodVerifier = lookupEnvironment.methodVerifier();", "-\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding superMethod = superMethods[i];", "-\t\t\t\treturn !superMethod.isPrivate() ", "-\t\t\t\t\t&& !(superMethod.isDefault() && (superMethod.declaringClass.getPackage()) != this.binding.declaringClass.getPackage())", "-\t\t\t\t\t&& methodVerifier.doesMethodOverride(this.binding, superMethod);", "+\t\ttry {", "+\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding overridenCompilerBinding = ((MethodBinding) overridenMethod).binding;", "+\t\t\tif (this.binding == overridenCompilerBinding) ", "+\t\t\t\treturn false;", "+\t\t\tchar[] selector = this.binding.selector;", "+\t\t\tif (!CharOperation.equals(selector, overridenCompilerBinding.selector))", "+\t\t\t\treturn false;", "+\t\t\tTypeBinding match = this.binding.declaringClass.findSuperTypeWithSameErasure(overridenCompilerBinding.declaringClass);", "+\t\t\tif (!(match instanceof ReferenceBinding)) return false;", "+\t\t\t", "+\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding[] superMethods = ((ReferenceBinding)match).getMethods(selector);", "+\t\t\tfor (int i = 0, length = superMethods.length; i < length; i++) {", "+\t\t\t\tif (superMethods[i].original() == overridenCompilerBinding) {", "+\t\t\t\t\tLookupEnvironment lookupEnvironment = this.resolver.lookupEnvironment();", "+\t\t\t\t\tif (lookupEnvironment == null) return false;", "+\t\t\t\t\tMethodVerifier methodVerifier = lookupEnvironment.methodVerifier();", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding superMethod = superMethods[i];", "+\t\t\t\t\treturn !superMethod.isPrivate() ", "+\t\t\t\t\t\t&& !(superMethod.isDefault() && (superMethod.declaringClass.getPackage()) != this.binding.declaringClass.getPackage())", "+\t\t\t\t\t\t&& methodVerifier.doesMethodOverride(this.binding, superMethod);", "+\t\t\t\t}", "+\t\t\treturn false;", "+\t\t} catch (AbortCompilation e) {", "+\t\t\t// don't surface internal exception to clients", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=143013", "+\t\t\treturn false;", "-\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1eee87e1c10606cd33310b0fd711d87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "10234afdc4f5690ec37e139071f618abb52d00b8", "commitAfterChange": "8aa3c69cecd84b3c2c3bfd8031419f42f6bb2e8f", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \t \tpublic boolean isSubsignature(IMethodBinding otherMethod)", "signatureAfterChange": " \t \tpublic boolean isSubsignature(IMethodBinding otherMethod)", "diff": ["-\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding other = ((MethodBinding) otherMethod).binding;", "-\t\tif (!CharOperation.equals(this.binding.selector, other.selector))", "+\t\ttry {", "+\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding other = ((MethodBinding) otherMethod).binding;", "+\t\t\tif (!CharOperation.equals(this.binding.selector, other.selector))", "+\t\t\t\treturn false;", "+\t\t\treturn this.binding.areParameterErasuresEqual(other) && this.binding.areTypeVariableErasuresEqual(other);", "+\t\t} catch (AbortCompilation e) {", "+\t\t\t// don't surface internal exception to clients", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=143013", "-\t\treturn this.binding.areParameterErasuresEqual(other) && this.binding.areTypeVariableErasuresEqual(other);", "+\t\t}"]}], "num": 68282}
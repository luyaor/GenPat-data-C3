{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29827b3f7db800ca15e28b6bf0dbf32e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9952107db2974aec1c2d420d7903a76a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchPattern.java", "commitBeforeChange": "1203ec285e9510454e7eee6b9217d8d694a24e95", "commitAfterChange": "fe9d56739c7ee5a42ad73e908441932d571ee55b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tchar[][] extractMethodArguments(IMethod method)", "signatureAfterChange": " \tchar[][] extractMethodArguments(IMethod method)", "diff": ["-\t\tString[] argumentsSignatures = null;", "-\t\tBindingKey key;", "-\t\tif (method.isResolved() && (key = new BindingKey(method.getKey())).isParameterizedMethod()) {", "-\t\t\targumentsSignatures = key.getTypeArguments();", "-\t\t} else {", "-\t\t\ttry {", "-\t\t\t\tITypeParameter[] parameters = method.getTypeParameters();", "-\t\t\t\tif (parameters != null) {", "-\t\t\t\t\tint length = parameters.length;", "-\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\tchar[][] arguments = new char[length][];", "-\t\t\t\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\t\t\t\targuments[i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn arguments;", "+", "+\t\t// Use bind key if the element is resolved", "+\t\tif (method.isResolved()) {", "+\t\t\tBindingKey bindingKey = new BindingKey(method.getKey());", "+\t\t\tif (bindingKey.isParameterizedMethod()) {", "+\t\t\t\tString[] argumentsSignatures = bindingKey.getTypeArguments();", "+\t\t\t\tint length = argumentsSignatures.length;", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tchar[][] methodArguments = new char[length][];", "+\t\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\t\tmethodArguments[i] = argumentsSignatures[i].toCharArray();", "+\t\t\t\t\t\tCharOperation.replace(methodArguments[i], new char[] { '$', '/' }, '.');", "+\t\t\t\t\treturn methodArguments;", "-\t\t\t}", "-\t\t\tcatch (JavaModelException jme) {", "-\t\t\t\t// do nothing", "-", "-\t\t// Parameterized method", "-\t\tif (argumentsSignatures != null) {", "-\t\t\tint length = argumentsSignatures.length;", "-\t\t\tif (length > 0) {", "-\t\t\t\tchar[][] methodArguments = new char[length][];", "-\t\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\t\tmethodArguments[i] = argumentsSignatures[i].toCharArray();", "-\t\t\t\t\tCharOperation.replace(methodArguments[i], new char[] { '$', '/' }, '.');", "+\t\t", "+\t\t// Try to get the argument using the JavaModel info", "+\t\ttry {", "+\t\t\tITypeParameter[] parameters = method.getTypeParameters();", "+\t\t\tif (parameters != null) {", "+\t\t\t\tint length = parameters.length;", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tchar[][] arguments = new char[length][];", "+\t\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\t\targuments[i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();", "+\t\t\t\t\t}", "+\t\t\t\t\treturn arguments;", "-\t\t\t\treturn methodArguments;", "+\t\t}", "+\t\tcatch (JavaModelException jme) {", "+\t\t\t// do nothing"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0a5f1cb597de870e0f7737e32c06212", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchPattern.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tchar[][] extractMethodArguments(IMethod method)", "signatureAfterChange": " \tchar[][] extractMethodArguments(IMethod method)", "diff": ["-\t\t\t\tint length = parameters==null ? 0 : parameters.length;", "-\t\t\t\tif (length > 0) {", "-\t\t\t\t\tchar[][] arguments = new char[length][];", "-\t\t\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\t\t\targuments[i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();", "+\t\t\t\tif (parameters != null) {", "+\t\t\t\t\tint length = parameters.length;", "+\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\tchar[][] arguments = new char[length][];", "+\t\t\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\t\t\targuments[i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn arguments;", "-\t\t\t\t\treturn arguments;", "-\t\tint length = argumentsSignatures==null ? 0 : argumentsSignatures.length;", "-\t\tif (length > 0) {", "-\t\t\tchar[][] methodArguments = new char[length][];", "-\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\tmethodArguments[i] = argumentsSignatures[i].toCharArray();", "-\t\t\t\tCharOperation.replace(methodArguments[i], new char[] { '$', '/' }, '.');", "+\t\tif (argumentsSignatures != null) {", "+\t\t\tint length = argumentsSignatures.length;", "+\t\t\tif (length > 0) {", "+\t\t\t\tchar[][] methodArguments = new char[length][];", "+\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\tmethodArguments[i] = argumentsSignatures[i].toCharArray();", "+\t\t\t\t\tCharOperation.replace(methodArguments[i], new char[] { '$', '/' }, '.');", "+\t\t\t\t}", "+\t\t\t\treturn methodArguments;", "-\t\t\treturn methodArguments;"]}], "num": 24546}
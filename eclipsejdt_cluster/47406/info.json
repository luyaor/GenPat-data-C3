{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63f90dcea0b1158fc0b443ae860cd42c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10177b3d90d900966c1c230f5335d49e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/OR_OR_Expression.java", "commitBeforeChange": "e5e6f9097f2c3bf7294bd658643d6be9f7aaa5ef", "commitAfterChange": "d00bc48524f3df289951f11fca95cb39820be47f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "\r \tpublic void generateCode(\r \t\tBlockScope currentScope,\r \t\tCodeStream codeStream,\r \t\tboolean valueRequired)", "diff": ["- */\r", "-public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {\r", "-\tint pc = codeStream.position;\r", "-\tLabel falseLabel, endLabel;\r", "-\tif (constant != Constant.NotAConstant) {\r", "-\t\tif (valueRequired)\r", "-\t\t\tcodeStream.generateConstant(constant, implicitConversion);\r", "-\t\tcodeStream.recordPositionsFrom(pc, this);\r", "-\t\treturn;\r", "-\t}\r", "-\tbits |= OnlyValueRequiredMASK;\r", "-\tgenerateOptimizedConditionalOr(currentScope, codeStream, null, (falseLabel = new Label(codeStream)), valueRequired);\r", "-\t/*  improving code gen for such a case:\t\tboolean b = i < 0 || true; \r", "-\t * since the label has never been used, we have the inlined value on the stack. */\r", "-\tif (falseLabel.hasForwardReferences()) {\r", "-\t\tif (valueRequired) {\r", "-\t\t\tcodeStream.iconst_1();\r", "-\t\t\tif ((bits & ValueForReturnMASK) != 0) {\r", "-\t\t\t\tcodeStream.ireturn();\r", "-\t\t\t\tfalseLabel.place();\r", "-\t\t\t\tcodeStream.iconst_0();\r", "-\t\t\t} else {\r", "-\t\t\t\tcodeStream.goto_(endLabel = new Label(codeStream));\r", "-\t\t\t\tcodeStream.decrStackSize(1);\r", "-\t\t\t\tfalseLabel.place();\r", "-\t\t\t\tcodeStream.iconst_0();\r", "-\t\t\t\tendLabel.place();\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\tfalseLabel.place();\r", "-\t\t}\r", "-\t}\r", "-\tif (valueRequired) {\r", "-\t\tcodeStream.generateImplicitConversion(implicitConversion);\r", "-\t}\r", "-\tcodeStream.recordPositionsFrom(pc, this);\r", "-}\r", "+\t */\r", "+\tpublic void generateCode(\r", "+\t\tBlockScope currentScope,\r", "+\t\tCodeStream codeStream,\r", "+\t\tboolean valueRequired) {\r", "+\t\tLabel falseLabel, endLabel;\r", "+\t\tif (constant != Constant.NotAConstant) {\r", "+\t\t\tif (valueRequired)\r", "+\t\t\t\tcodeStream.generateConstant(constant, implicitConversion);\r", "+\t\t\tcodeStream.recordPositionsFrom(pc, this);\r", "+\t\t\treturn;\r", "+\t\tbits |= OnlyValueRequiredMASK;\r", "+\t\tgenerateOptimizedBoolean(\r", "+\t\t\tcurrentScope,\r", "+\t\t\tcodeStream,\r", "+\t\t\tnull,\r", "+\t\t\t(falseLabel = new Label(codeStream)),\r", "+\t\t\tvalueRequired);\r", "+\t\t/*  improving code gen for such a case:\t\tboolean b = i < 0 || true; \r", "+\t\t * since the label has never been used, we have the inlined value on the stack. */\r", "+\t\tif (falseLabel.hasForwardReferences()) {\r", "+\t\t\t\tcodeStream.iconst_1();\r", "+\t\t\t\tif ((bits & ValueForReturnMASK) != 0) {\r", "+\t\t\t\t\tcodeStream.ireturn();\r", "+\t\t\t\t\tfalseLabel.place();\r", "+\t\t\t\t\tcodeStream.iconst_0();\r", "+\t\t\t\t\tcodeStream.goto_(endLabel = new Label(codeStream));\r", "+\t\t\t\t\tcodeStream.decrStackSize(1);\r", "+\t\t\t\t\tfalseLabel.place();\r", "+\t\t\t\t\tcodeStream.iconst_0();\r", "+\t\t\t\t\tendLabel.place();\r", "+\t\t\t\tfalseLabel.place();\r", "+\t\t}\r", "+\t\tif (valueRequired) {\r", "+\t\t\tcodeStream.generateImplicitConversion(implicitConversion);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5803b3518d292f81c030fc527f2677db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AND_AND_Expression.java", "commitBeforeChange": "e5e6f9097f2c3bf7294bd658643d6be9f7aaa5ef", "commitAfterChange": "d00bc48524f3df289951f11fca95cb39820be47f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "\r \tpublic void generateCode(\r \t\tBlockScope currentScope,\r \t\tCodeStream codeStream,\r \t\tboolean valueRequired)", "diff": ["- */\r", "-public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {\r", "-\tint pc = codeStream.position;\r", "-\tLabel falseLabel, endLabel;\r", "-\tif (constant != Constant.NotAConstant) {\r", "-\t\t// inlined value\r", "-\t\tif (valueRequired)\r", "-\t\t\tcodeStream.generateConstant(constant, implicitConversion);\r", "-\t\tcodeStream.recordPositionsFrom(pc, this);\r", "-\t\treturn;\r", "-\t}\r", "-\tbits |= OnlyValueRequiredMASK;\r", "-\tgenerateOptimizedConditionalAnd(currentScope, codeStream, null, (falseLabel = new Label(codeStream)), valueRequired);\r", "-\t/* improving code gen for such a case: boolean b = i < 0 && false\r", "-\t * since the label has never been used, we have the inlined value on the stack. */\r", "-\tif (falseLabel.hasForwardReferences()) {\r", "-\t\tif (valueRequired) {\r", "-\t\t\tcodeStream.iconst_1();\r", "-\t\t\tif ((bits & ValueForReturnMASK) != 0) {\r", "-\t\t\t\tcodeStream.ireturn();\r", "-\t\t\t\tfalseLabel.place();\r", "-\t\t\t\tcodeStream.iconst_0();\r", "-\t\t\t} else {\r", "-\t\t\t\tcodeStream.goto_(endLabel = new Label(codeStream));\r", "-\t\t\t\tcodeStream.decrStackSize(1);\r", "-\t\t\t\tfalseLabel.place();\r", "-\t\t\t\tcodeStream.iconst_0();\r", "-\t\t\t\tendLabel.place();\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\tfalseLabel.place();\r", "-\t\t}\r", "-\t}\r", "-\tif (valueRequired) {\r", "-\t\tcodeStream.generateImplicitConversion(implicitConversion);\r", "-\t}\r", "-\tcodeStream.recordPositionsFrom(pc, this);\r", "-}\r", "+\t */\r", "+\tpublic void generateCode(\r", "+\t\tBlockScope currentScope,\r", "+\t\tCodeStream codeStream,\r", "+\t\tboolean valueRequired) {\r", "+\t\t\t\r", "+\t\tLabel falseLabel, endLabel;\r", "+\t\tif (constant != Constant.NotAConstant) {\r", "+\t\t\t// inlined value\r", "+\t\t\tif (valueRequired)\r", "+\t\t\t\tcodeStream.generateConstant(constant, implicitConversion);\r", "+\t\t\tcodeStream.recordPositionsFrom(pc, this);\r", "+\t\t\treturn;\r", "+\t\t}\r", "+\t\tbits |= OnlyValueRequiredMASK;\r", "+\t\tgenerateOptimizedBoolean(\r", "+\t\t\tcurrentScope,\r", "+\t\t\tcodeStream,\r", "+\t\t\tnull,\r", "+\t\t\t(falseLabel = new Label(codeStream)),\r", "+\t\t\tvalueRequired);\r", "+\t\t/* improving code gen for such a case: boolean b = i < 0 && false\r", "+\t\t * since the label has never been used, we have the inlined value on the stack. */\r", "+\t\tif (falseLabel.hasForwardReferences()) {\r", "+\t\t\t\tcodeStream.iconst_1();\r", "+\t\t\t\tif ((bits & ValueForReturnMASK) != 0) {\r", "+\t\t\t\t\tcodeStream.ireturn();\r", "+\t\t\t\t\tfalseLabel.place();\r", "+\t\t\t\t\tcodeStream.iconst_0();\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tcodeStream.goto_(endLabel = new Label(codeStream));\r", "+\t\t\t\t\tcodeStream.decrStackSize(1);\r", "+\t\t\t\t\tfalseLabel.place();\r", "+\t\t\t\t\tcodeStream.iconst_0();\r", "+\t\t\t\t\tendLabel.place();\r", "+\t\t\t} else {\r", "+\t\t\t\tfalseLabel.place();\r", "+\t\tif (valueRequired) {\r", "+\t\t\tcodeStream.generateImplicitConversion(implicitConversion);\r", "+\t\t}\r"]}], "num": 47406}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6071db9812369d765b880cca900d4579", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e1e35bad8608858a2ec26483af06773", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": " public void generateSyntheticBodyForEnumValueOf(SyntheticMethodBinding methodBinding)", "signatureAfterChange": " public void generateSyntheticBodyForEnumValueOf(SyntheticMethodBinding methodBinding)", "diff": ["-\tClassScope scope = ((SourceTypeBinding)methodBinding.declaringClass).scope;", "-\tFieldBinding enumValuesSyntheticfield = scope.referenceContext.enumValuesSyntheticfield;", "-\tBranchLabel loopCond = new BranchLabel(this);", "-\tBranchLabel loopStart = new BranchLabel(this);", "-\tBranchLabel wrongConstant = new BranchLabel(this);", "-", "-\tthis.getstatic(enumValuesSyntheticfield);", "-\tthis.dup();", "-\tthis.astore_1();", "-\tthis.arraylength();", "-\tthis.istore_2();", "-\tthis.goto_(loopCond);", "-\tloopStart.place();", "+\tthis.ldc(methodBinding.declaringClass);", "-\tthis.aload_1();", "-\tthis.iload_2();", "-\tthis.aaload();", "-\tthis.dup();", "-\tthis.astore_3();", "-\tthis.invokeJavaLangEnumname(this.classFile.referenceBinding);", "-\tthis.invokeStringEquals();", "-\tthis.ifeq(wrongConstant);", "-\tthis.aload_3();", "+\tthis.invokeJavaLangEnumvalueOf();", "+\tthis.checkcast(methodBinding.declaringClass);", "-\twrongConstant.place();", "-\tloopCond.place();", "-\tthis.iinc(2, -1);\t\t", "-\tthis.iload_2();", "-\tthis.ifge(loopStart);", "-\tthis.newJavaLangIllegalArgumentException();", "-\tthis.dup();", "-\tthis.aload_0();", "-\tthis.invokeJavaLangIllegalArgumentExceptionStringConstructor();", "-\tthis.athrow();", "-}", "+}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "721532040add320de8dbe514bb92c283", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "4c1d4b601e686baad6c5a6a92ddbbebe0b64a62d", "commitAfterChange": "efbaf5f01b1dd1c4f8135936aa48ce411ca71c6c", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic boolean visit(Block block, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(Block block, BlockScope scope)", "diff": ["-\t", "-\t\tString block_brace_position = this.preferences.brace_position_for_block;", "-\t\tformatOpeningBrace(block_brace_position, this.preferences.insert_space_before_opening_brace_in_block);", "-\t\tfinal Statement[] statements = block.statements;", "-\t\tif (statements != null) {", "-\t\t\tthis.scribe.printNewLine();", "-\t\t\tif (this.preferences.indent_statements_compare_to_block) {", "-\t\t\t\tthis.scribe.indent();", "-\t\t\t}", "-\t\t\tformatStatements(scope, statements, true);", "-\t\t\tthis.scribe.printComment();", "-\t", "-\t\t\tif (this.preferences.indent_statements_compare_to_block) {", "-\t\t\t\tthis.scribe.unIndent();", "-\t\t\t}", "-\t\t} else if (this.preferences.insert_new_line_in_empty_block) {", "-\t\t\tthis.scribe.printNewLine();", "-\t\t\tif (this.preferences.indent_statements_compare_to_block) {", "-\t\t\t\tthis.scribe.indent();", "-\t\t\t}", "-\t\t\tthis.scribe.printComment();", "-\t", "-\t\t\tif (this.preferences.indent_statements_compare_to_block) {", "-\t\t\t\tthis.scribe.unIndent();", "-\t\t\t}", "-\t\t} else {", "-\t\t\tif (this.preferences.indent_statements_compare_to_block) {", "-\t\t\t\tthis.scribe.indent();", "-\t\t\t}", "-\t\t\tthis.scribe.printComment();", "-\t", "-\t\t\tif (this.preferences.indent_statements_compare_to_block) {", "-\t\t\t\tthis.scribe.unIndent();", "-\t\t\t}", "-\t\t}", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);", "-\t\tthis.scribe.printTrailingComment();", "-\t\tif (DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED.equals(block_brace_position)) {", "-\t\t\tthis.scribe.unIndent();", "-\t\t}\t\t", "-\t\treturn false;\t", "+\t\tformatBlock(block, scope, this.preferences.brace_position_for_block, this.preferences.insert_space_before_opening_brace_in_block);\t", "+\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcaf0dcef3daf004547bcbc22285f7c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "874e2c41609c64af417834df9af2e898d8dcf37a", "commitAfterChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public FlowInfo analyseCode(MethodScope initializationScope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo declaringClassFlowInfo, FlowInfo fieldResetInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(MethodScope initializationScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-public FlowInfo analyseCode(MethodScope initializationScope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo declaringClassFlowInfo, FlowInfo fieldResetInfo) {", "-\t// fieldResetInfo: in this info we collect all information required for UnconditionalFlowInfo.resetNullInfoForFields:", "-\t// - which fields should never reset their null status? (constants and @NonNull)", "-\t// - for other fields: to what status should it be reset at each MessageSend? (unknown or pot.null)", "+public FlowInfo analyseCode(MethodScope initializationScope, FlowContext flowContext, FlowInfo flowInfo) {", "-\tboolean isConstant = this.binding.isFinal() && this.binding.isStatic();", "-\tboolean includeFieldsInNullAnalysis = initializationScope.compilerOptions().includeFieldsInNullAnalysis;", "-\t\tif (isConstant && includeFieldsInNullAnalysis) {", "+\t\tif (this.binding.isFinal() && this.binding.isStatic()) {", "+//\t\t\tthis.binding.setNullStatusForStaticFinalField(nullStatus);", "-\t}", "-\tif (isConstant && includeFieldsInNullAnalysis) {", "-\t\t// never reset null status for constants", "-\t\tfieldResetInfo.updateConstantFieldsMask(this.binding);", "-\t}", "-\tlong tagBits = this.binding.tagBits;", "-\tif ((tagBits & TagBits.AnnotationNonNull) != 0) {", "-\t\tif (this.initialization != null) {", "-\t\t\tint nullStatus = this.initialization.nullStatus(flowInfo);", "-\t\t\t// check against annotation @NonNull:", "-\t\t\tif (nullStatus != FlowInfo.NON_NULL) {", "-\t\t\t\tchar[][] annotationName = initializationScope.environment().getNonNullAnnotationName();", "-\t\t\t\tinitializationScope.problemReporter().nullityMismatch(this.initialization, this.binding.type, nullStatus, annotationName);", "-\t\t\t}", "-\t\t}", "-\t\t// record nonnull for use by methods:", "-\t\tdeclaringClassFlowInfo.markAsDefinitelyNonNull(this.binding);", "-", "-\t\t// tell resetNullInfoForFields not to update this field's status", "-\t\tfieldResetInfo.updateConstantFieldsMask(this.binding);", "-\t} else if ((tagBits & TagBits.AnnotationNullable) != 0) {", "-\t\t// record pot.null for use by methods:", "-\t\tdeclaringClassFlowInfo.resetNullInfo(this.binding);", "-\t\tdeclaringClassFlowInfo.markPotentiallyNullBit(this.binding);", "-", "-\t\t// tell resetNullInfoForFields to reset this field to pot.null:", "-\t\t// (note that this info is ineffective if the field is also constant)", "-\t\tfieldResetInfo.resetNullInfo(this.binding);", "-\t\tfieldResetInfo.markPotentiallyNullBit(this.binding);", "-\t} else if (!isConstant && includeFieldsInNullAnalysis) {", "-\t\t// tell resetNullInfoForFields to reset this field to def.unknown:", "-\t\tfieldResetInfo.markAsDefinitelyUnknown(this.binding);"]}], "num": 13343}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "afef9906bcefb610b5dbd7f8d7ffc09d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07feefd74f1e4a22a04f18c5aa1dd512", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaSearchTests.java", "commitBeforeChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "commitAfterChange": "af607e2e1ad6576e50200e327ea9acd540ed1ad7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t\tprotected void append(IField field) throws JavaModelException", "signatureAfterChange": " \t\tprotected void append(IAnnotation annotation) throws JavaModelException", "diff": ["+\t\tprotected void append(IAnnotation annotation) throws JavaModelException {", "+\t\t\tline.append(\"@\");", "+\t\t\tline.append(annotation.getElementName());", "+\t\t\tline.append('(');", "+\t\t\tIMemberValuePair[] pairs = annotation.getMemberValuePairs();", "+\t\t\tint length = pairs == null ? 0 : pairs.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tline.append(pairs[i].getMemberName());", "+\t\t\t\tline.append('=');", "+\t\t\t\tObject value = pairs[i].getValue();", "+\t\t\t\tswitch (pairs[i].getValueKind()) {", "+\t\t\t\t\tcase IMemberValuePair.K_CLASS:", "+\t\t\t\t\t\tline.append(value);", "+\t\t\t\t\t\tline.append(\".class\");", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tline.append(value);", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tline.append(')');", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3918dbb7a79fc84b91502f6b74d3a25a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/IncrementalImageBuilder.java", "commitBeforeChange": "4338f1a4587c82218a7d04fd414f807b13e3b40e", "commitAfterChange": "a6355ed8a952db69dc06abd606ccc2ecc5f494cd", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \r protected void findSourceFiles(IResourceDelta sourceDelta, int sourceFolderSegmentCount) throws CoreException", "signatureAfterChange": "\r \r protected void findSourceFiles(IResourceDelta sourceDelta, int sourceFolderSegmentCount) throws CoreException", "diff": ["-\t\t\t\t\t\tnewState.remove(location);\r", "+\t\t\t\t\t\tchar[][] additionalTypeNames = newState.getAdditionalTypeNamesFor(location.toString());\r", "+\t\t\t\t\t\tif (additionalTypeNames != null) {\r", "+\t\t\t\t\t\t\tfor (int i = 0, length = additionalTypeNames.length; i < length; i++) {\r", "+\t\t\t\t\t\t\t\ttypePath = typePath.removeLastSegments(1).append(new String(additionalTypeNames[i]));\r", "+\t\t\t\t\t\t\t\tclassFile = outputFolder.getFile(typePath.addFileExtension(JavaBuilder.CLASS_EXTENSION));\r", "+\t\t\t\t\t\t\t\tif (classFile.exists()) {\r", "+\t\t\t\t\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Deleting class file of removed file \" + typePath); //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t\t\tclassFile.delete(true, null);\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\taddDependentsOf(typePath, true);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tnewState.remove(location);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c36c26d39d3f4a8d4b505e25fa528b15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "d3d92e370789aaaed8a46c804d74e3cb2b4bb167", "commitAfterChange": "07061c09a4baa11ac0a53e425e478493f3662bd4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \t \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\tcodeStream.invokeDynamic(invokeDynamicNumber, 0, 1, TypeConstants.ANONYMOUS_METHOD, CharOperation.concat(\"()\".toCharArray(), this.descriptor.declaringClass.signature())); //$NON-NLS-1$", "+\t\tStringBuffer signature = new StringBuffer();", "+\t\tsignature.append('(');", "+\t\tfor (int i = 0, length = this.outerLocalVariables == null ? 0 : this.outerLocalVariables.length; i < length; i++) {", "+\t\t\tsignature.append(this.outerLocalVariables[i].type.signature());", "+\t\t\tLocalVariableBinding capturedOuterLocal = this.outerLocalVariables[i].actualOuterLocalVariable;", "+\t\t\tVariableBinding[] path = currentScope.getEmulationPath(capturedOuterLocal);", "+\t\t\tcodeStream.generateOuterAccess(path, this, capturedOuterLocal, currentScope);", "+\t\t}", "+\t\tsignature.append(')');", "+\t\tsignature.append(this.descriptor.declaringClass.signature());", "+\t\tcodeStream.invokeDynamic(invokeDynamicNumber, this.outerLocalVariablesSlotSize, 1, TypeConstants.ANONYMOUS_METHOD, signature.toString().toCharArray());"]}], "num": 40758}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70a3b8300c10c07562863d6d9d378d7c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0266ad1faeb411ebd87cd5b0ea938d85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public int match(MethodDeclaration node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(MethodDeclaration node, MatchingNodeSet nodeSet)", "diff": ["-\t\tfor (int i = 0; i < argsLength; i++) {", "-\t\t\tif (!matchesTypeReference(this.pattern.parameterSimpleNames[i], ((Argument) args[i]).type)) return IMPOSSIBLE_MATCH;", "+\t\t// Disable filter on argument syntax to allow generic type search.", "+\t\t// (see  bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=79990)", "+\t\tif (!this.pattern.mustResolveGeneric) {", "+\t\t\tfor (int i = 0; i < argsLength; i++) {", "+\t\t\t\tif (!matchesTypeReference(this.pattern.parameterSimpleNames[i], ((Argument) args[i]).type)) return IMPOSSIBLE_MATCH;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e0b6e17b80a6a939ac335d2d594189a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "5faa7869071c4610856ff5c18e064a7882c6ef15", "commitAfterChange": "0d04687b56af18c0d3597efa62c9f67d3fdc3a51", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic String getBinaryName()", "signatureAfterChange": " \tpublic String getBinaryName()", "diff": ["-\t\tif (this.binding.isTypeVariable()) {", "+\t\tif (this.binding.isCapture()) {", "+\t\t\treturn null; // no binary name for capture binding", "+\t\t} else if (this.binding.isTypeVariable()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "918a39f8f1ad133e016e6871d5798c1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "commitAfterChange": "495498c492866181dc63a6039b81ee18c37f454c", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 62, "signatureBeforeChange": " \t \tprivate void parseMethod()", "signatureAfterChange": " \t \tprivate void parseMethod()", "diff": ["-\t\tparseFlags();", "+\t \tif (this.scanner.isAtThrownStart()) {", "+\t\t\tparseThrownExceptions();", "+\t \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8d83ce57f4bcf653f6bbe9ce7f47e6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "b64a02b9e712c55c420cd8321afb668d733edebf", "commitAfterChange": "010dc9e8d593c0ba9b4912ff35db0ecfac142eab", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+        \tif (methodExceptions[i].isUncheckedException(true)) {", "+        \t\tcontinue next;", "+    \t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6fdcd3e61f2308f85b1f1fc5f0b9120", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "9db26c7bea8b081f74e04400ef73e415034114ae", "commitAfterChange": "3ee5245339c28c9f118b2d56a8158cb4aa75c312", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic String getSeverityString(int irritant)", "signatureAfterChange": "  \tpublic String getSeverityString(int irritant)", "diff": ["+\t\tif (this.infoThreshold.isSet(irritant)) {", "+\t\t\treturn INFO;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c935e6a771fedac9e8008f9f83010e84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "2a23c62d5a3b74783613a638cca640e487db040a", "commitAfterChange": "79c4ba61903262b42e2a1f500afb283891f6e429", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "diff": ["-\t\tfor (int i = 0, l = allInheritedMethods == null ? 0 : allInheritedMethods.length; i < l; i++) {", "-\t\t\tif (allInheritedMethods[i] != null && detectInheritedNameClash(originalInherited, allInheritedMethods[i].original()))", "-\t\t\t\treturn;", "+\t\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=322001. We used to unconditionally check here", "+\t\t   for name clashes between the overridden inherited method and all other \"non-matching\"", "+\t\t   inherited methods with the same method selector here. ", "+\t\t   ", "+\t\t   This makes no sense when the current type is concrete as the overridden method has been", "+\t\t   effectively replaced and is hidden in the current class and cannot contribute to a clash.", "+\t\t   The overriding method or the bridge may collide with an inherited method, but that is being", "+\t\t   checked elsewhere. ", "+\t\t   ", "+\t\t   As a matter of fact, this is true even for abstract types, but we do retain the name clash", "+\t\t   check for abstract types here for compatibility with javac.", "+\t\t   ", "+\t\t   See also https://bugs.eclipse.org/bugs/show_bug.cgi?id=293615 for a very similar issue.", "+\t\t*/", "+\t\tif (this.type.isAbstract()) { ", "+\t\t\tfor (int i = 0, l = allInheritedMethods == null ? 0 : allInheritedMethods.length; i < l; i++) {", "+\t\t\t\tif (allInheritedMethods[i] != null && detectInheritedNameClash(originalInherited, allInheritedMethods[i].original()))", "+\t\t\t\t\treturn;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9e582c895a9a2b076b87ffd11f0bb7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "cd83686e68c77b8d85a1807425ed1f45ea502c65", "commitAfterChange": "03133f50b3df27cb3ba8b788b2de65bd0ed4ca93", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic String getQualifiedName()", "signatureAfterChange": " \tpublic String getQualifiedName()", "diff": ["+\t\t\t\tif (this.binding.isLocalType()) {", "+\t\t\t\t\treturn NO_NAME;", "+\t\t\t\t}", "-"]}], "num": 72652}
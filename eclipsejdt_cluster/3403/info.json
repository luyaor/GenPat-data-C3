{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ef2ad1142afd3e4229f9950724ac340", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c40b95e924460902f3243d225380e6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "5f4e9c737df9b212364b9e892d0039c92ce2476a", "commitAfterChange": "3a2d8fc091b6c143de1eaab0e407d9046bc0425f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r private void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r private void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.debugLocalVariable\"/*nonNLS*/,0);\r", "-\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.debugLineNumber\"/*nonNLS*/,0);\r", "-\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.debugSourceFile\"/*nonNLS*/,0);\r", "+\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LocalVariableAttribute, 0);\r", "+\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LineNumberAttribute, 0);\r", "+\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_SourceFileAttribute, 0);\r", "-\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.debugLocalVariable\"/*nonNLS*/,1);\r", "-\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.debugLineNumber\"/*nonNLS*/,1);\r", "-\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.debugSourceFile\"/*nonNLS*/,1);\r", "+\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LocalVariableAttribute, 1);\r", "+\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LineNumberAttribute, 1);\r", "+\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_SourceFileAttribute, 1);\t\t\t\t\r", "-\t\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.debugLocalVariable\"/*nonNLS*/,0);\r", "+\t\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LocalVariableAttribute, 0);\r", "-\t\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.debugLineNumber\"/*nonNLS*/,0);\r", "+\t\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LineNumberAttribute, 0);\r", "-\t\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.debugSourceFile\"/*nonNLS*/,0);\r", "+\t\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_SourceFileAttribute, 0);\r", "-\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemMethodWithConstructorName\"/*nonNLS*/,2);\r", "-\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemOverridingPackageDefaultMethod\"/*nonNLS*/,2);\r", "-\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemHiddenCatchBlock\"/*nonNLS*/,2);\r", "-\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemDeprecation\"/*nonNLS*/,2);\r", "-\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemUnusedLocal\"/*nonNLS*/,2);\r", "-\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemUnusedParameter\"/*nonNLS*/,2);\r", "-\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemSyntheticAccessEmulation\"/*nonNLS*/,2);\r", "-\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemNonExternalizedStringLiteral\"/*nonNLS*/,2);\r", "-\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemAssertIdentifier\"/*nonNLS*/,2);\r", "+\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportMethodWithConstructorName, 2);\r", "+\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, 2);\r", "+\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportHiddenCatchBlock, 2);\r", "+\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportDeprecation, 2);\r", "+\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedLocal, 2);\r", "+\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedParameter, 2);\r", "+\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, 2);\r", "+\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, 2);\r", "+\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportAssertIdentifier, 2);\r", "-\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemMethodWithConstructorName\"/*nonNLS*/,1);\r", "+\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportMethodWithConstructorName, 1);\r", "-\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemOverridingPackageDefaultMethod\"/*nonNLS*/,1);\r", "+\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, 1);\r", "-\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemHiddenCatchBlock\"/*nonNLS*/,1);\r", "+\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportHiddenCatchBlock, 1);\r", "-\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemDeprecation\"/*nonNLS*/,1);\r", "+\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportDeprecation, 1);\r", "-\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemUnusedLocal\"/*nonNLS*/,1);\r", "+\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedLocal, 1);\r", "-\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemUnusedParameter\"/*nonNLS*/,1);\r", "+\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedParameter, 1);\r", "-\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemSyntheticAccessEmulation\"/*nonNLS*/,1);\r", "+\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, 1);\r", "-\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemNonExternalizedStringLiteral\"/*nonNLS*/,1);\r", "+\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, 1);\r", "-\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemAssertIdentifier\"/*nonNLS*/,1);\r", "+\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportAssertIdentifier/*nonNLS*/, 1);\r", "-\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.codegenUnusedLocal\"/*nonNLS*/,0);\r", "+\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_PreserveUnusedLocal, 0);\r", "-\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.codegenTargetPlatform\"/*nonNLS*/,0);\r", "+\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_TargetPlatform, 0);\r", "-\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.codegenTargetPlatform\"/*nonNLS*/,1);\r", "+\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_TargetPlatform, 1);\r", "-\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.source\"/*nonNLS*/,0);\r", "+\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_Source, 0);\r", "-\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.source\"/*nonNLS*/,1);\r", "+\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_Source, 1);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f47a502c8878630e23db350bc451c7c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "f42341fc3c101c2629e12855523aa5e5c667e8ab", "commitAfterChange": "fc6d96b34b996ca454401b8df9f47cbdd05258ef", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r private void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r private void configure(String[] argv) throws InvalidInputException", "diff": ["+\tfinal int InsideSource = 32;\r", "-\tfinal int SourceOption = 32;\r", "-\tboolean noWarnOptionInUsed = false;\r", "+\tboolean noWarnOptionInUsed = false;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.equals(\"-source\"/*nonNLS*/)) {\r", "+\t\t\tmode = InsideSource;\r", "-\t\t\timportProblemIsError = false;\r", "+\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemInvalidImport\"/*nonNLS*/,2);\r", "-\t\t\tdebugMask = 0; // reinitialize the default value\r", "-\t\t\t\tdebugMask = CompilerOptions.Lines | CompilerOptions.Vars | CompilerOptions.Source;\r", "+\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.debugLocalVariable\"/*nonNLS*/,0);\r", "+\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.debugLineNumber\"/*nonNLS*/,0);\r", "+\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.debugSourceFile\"/*nonNLS*/,0);\r", "+\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.debugLocalVariable\"/*nonNLS*/,1);\r", "+\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.debugLineNumber\"/*nonNLS*/,1);\r", "+\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.debugSourceFile\"/*nonNLS*/,1);\r", "-\t\t\t\t\t\tdebugMask |= CompilerOptions.Vars;\r", "+\t\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.debugLocalVariable\"/*nonNLS*/,0);\r", "-\t\t\t\t\t\tdebugMask |= CompilerOptions.Lines;\r", "+\t\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.debugLineNumber\"/*nonNLS*/,0);\r", "-\t\t\t\t\t\tdebugMask |= CompilerOptions.Source;\r", "+\t\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.debugSourceFile\"/*nonNLS*/,0);\r", "+\t\t\tnoWarn = true;\r", "-\t\t\tmode = Default;\r", "-\t\t\twarningMask = TemporaryWarning; // reinitialize the default value (still see TemporaryWarning)\t\t\r", "+\t\t\tmode = Default;\t\t\r", "-\t\t\t\twarningMask = TemporaryWarning; // reinitialize the default value (still see TemporaryWarning)\r", "+\t\t\t\tnoWarn = true;\r", "-\t\t\twarningMask = 0; // reinitialize the default value\t\t\t\t\r", "+\r", "+\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemMethodWithConstructorName\"/*nonNLS*/,2);\r", "+\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemOverridingPackageDefaultMethod\"/*nonNLS*/,2);\r", "+\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemHiddenCatchBlock\"/*nonNLS*/,2);\r", "+\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemDeprecation\"/*nonNLS*/,2);\r", "+\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemUnusedLocal\"/*nonNLS*/,2);\r", "+\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemUnusedParameter\"/*nonNLS*/,2);\r", "+\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemSyntheticAccessEmulation\"/*nonNLS*/,2);\r", "+\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemNonExternalizedStringLiteral\"/*nonNLS*/,2);\r", "+\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemAssertIdentifier\"/*nonNLS*/,2);\r", "+\t\t\t\r", "-\t\t\t\t\twarningMask |= CompilerOptions.MethodWithConstructorName;\r", "+\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemMethodWithConstructorName\"/*nonNLS*/,1);\r", "-\t\t\t\t\twarningMask |= CompilerOptions.OverriddenPackageDefaultMethod;\r", "+\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemOverridingPackageDefaultMethod\"/*nonNLS*/,1);\r", "-\t\t\t\t\twarningMask |= CompilerOptions.MaskedCatchBlock;\r", "+\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemHiddenCatchBlock\"/*nonNLS*/,1);\r", "-\t\t\t\t\twarningMask |= CompilerOptions.UsingDeprecatedAPI;\r", "+\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemDeprecation\"/*nonNLS*/,1);\r", "-\t\t\t\t\twarningMask |= CompilerOptions.UnusedLocalVariable;\r", "+\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemUnusedLocal\"/*nonNLS*/,1);\r", "-\t\t\t\t\twarningMask |= CompilerOptions.UnusedArgument;\r", "+\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemUnusedParameter\"/*nonNLS*/,1);\r", "-\t\t\t\t\twarningMask |= CompilerOptions.AccessEmulation;\r", "+\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemSyntheticAccessEmulation\"/*nonNLS*/,1);\r", "-\t\t\t\t\twarningMask |= CompilerOptions.NonExternalizedString;\r", "+\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemNonExternalizedStringLiteral\"/*nonNLS*/,1);\r", "-\t\t\t\t\twarningMask |= CompilerOptions.AssertUsedAsAnIdentifier;\r", "+\t\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemAssertIdentifier\"/*nonNLS*/,1);\r", "-\t\t\tpreserveAllLocalVariables = true;\r", "+\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.codegenUnusedLocal\"/*nonNLS*/,0);\r", "-\t\tif (currentArg.equals(\"-source\"/*nonNLS*/)) {\r", "-\t\t\tmode = SourceOption;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\t\r", "-\t\tif (mode == SourceOption) {\r", "-\t\t\tif (currentArg.equals(\"1.4\"/*nonNLS*/)) {\r", "-\t\t\t\tassertMode = true;\r", "-\t\t\t} else if (currentArg.equals(\"1.3\"/*nonNLS*/)) {\r", "-\t\t\t\tassertMode = false;\r", "-\t\t\t} else {\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.sourceOption\"/*nonNLS*/,currentArg));\r", "-\t\t\t}\r", "-\t\t\tmode = Default;\t\t\t\r", "-\t\t\tcontinue;\r", "-\t\t}\t\t\r", "-\t\t\t\ttargetJDK = CompilerOptions.JDK1_1;\r", "+\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.codegenTargetPlatform\"/*nonNLS*/,0);\r", "-\t\t\t\ttargetJDK = CompilerOptions.JDK1_2;\r", "+\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.codegenTargetPlatform\"/*nonNLS*/,1);\r", "+\t\t\t}\r", "+\t\t\tmode = Default;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (mode == InsideSource){\r", "+\t\t\tif (currentArg.equals(\"1.3\"/*nonNLS*/)) {\r", "+\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.source\"/*nonNLS*/,0);\r", "+\t\t\t} else if (currentArg.equals(\"1.4\"/*nonNLS*/)) {\r", "+\t\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.source\"/*nonNLS*/,1);\r", "+\t\t\t} else {\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.source\"/*nonNLS*/,currentArg));\r", "+\tif(noWarn){\r", "+\t\tfor(int i = 0; i < problemOption.length ; i++){\r", "+\t\t\tfor(int j = 0 ; j < options.length ; j++){\r", "+\t\t\t\tif(options[j].getID().equals(problemOption[i]) && options[j].getValueIndex() == 1){\r", "+\t\t\t\t\toptions[j].setValueIndex(2);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r"]}], "num": 3403}
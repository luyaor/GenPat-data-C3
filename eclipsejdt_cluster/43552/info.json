{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58210b24296113a62eeb9cc206689be0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ba59adbf0c7a78921e185da3e0d2d6f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "037e016f273f6cb8c7cfb305cfc86199e4a2172f", "commitAfterChange": "afc1e4846bc636d931af46ddbcc6782cb35abd8f", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic boolean visit( \t\tCompilationUnitDeclaration compilationUnitDeclaration, \t\tCompilationUnitScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tCompilationUnitDeclaration compilationUnitDeclaration, \t\tCompilationUnitScope scope)", "diff": ["+\t\t// fake new line to handle empty lines before package declaration or import declarations", "+\t\tthis.scribe.lastNumberOfNewLines = 1;", "-\t\t\t\t// add a fake new line to add potential blank lines", "-\t\t\t\tint blankLinesBeforePackage = this.preferences.blank_lines_before_package;", "-\t\t\t\tif (blankLinesBeforePackage > 0) {", "-\t\t\t\t\tthis.scribe.printEmptyLines(blankLinesBeforePackage);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tint blankLinesBeforePackage = this.preferences.blank_lines_before_package;", "-\t\t\t\tif (blankLinesBeforePackage > 0) {", "-\t\t\t\t\tthis.scribe.printEmptyLines(blankLinesBeforePackage - 1);", "-\t\t\t\t}", "+\t\t\tint blankLinesBeforePackage = this.preferences.blank_lines_before_package;", "+\t\t\tif (blankLinesBeforePackage > 0) {", "+\t\t\t\tthis.scribe.printEmptyLines(blankLinesBeforePackage);", "+\t\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fac1f3b70f26c4024918ed645497232", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "b08e7596febaa49e23faa81f4a4f9ae399c9aefb", "commitAfterChange": "24cf10e27c63373d484417e95718811352f381da", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic DefaultCodeFormatter(DefaultCodeFormatterOptions defaultCodeFormatterOptions, Map options)", "signatureAfterChange": "  \tpublic DefaultCodeFormatter(DefaultCodeFormatterOptions defaultCodeFormatterOptions, Map options)", "diff": ["-\t\tif (options == null) {", "-\t\t\toptions = JavaCore.getOptions();", "-\t\t}", "-\t\tthis.options = options;", "+\t\t\tthis.options = options;", "-\t\t\tif (defaultCodeFormatterOptions != null) {", "-\t\t\t\tthis.preferences.set(defaultCodeFormatterOptions.getMap());", "-\t\t\t}", "+\t\t\tthis.options = JavaCore.getOptions();", "-\t\t\tif (defaultCodeFormatterOptions != null) {", "-\t\t\t\tthis.preferences.set(defaultCodeFormatterOptions.getMap());", "-\t\t\t}", "+\t\t}", "+\t\tthis.defaultCompilerOptions = getDefaultCompilerOptions();", "+\t\tif (defaultCodeFormatterOptions != null) {", "+\t\t\tthis.preferences.set(defaultCodeFormatterOptions.getMap());"]}], "num": 43552}
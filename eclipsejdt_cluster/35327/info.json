{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b76f948f97bbcfd53afd795f9c073e87", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c27789ae2b32d3bf92186df88aa28ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "b1ce5a863ad0a541f80dd0793ff207f1e4ecf677", "commitAfterChange": "72d60854091bd7e8a5aafafdfea62cc297a3eb41", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic static Test buildTestSuite(Class evaluationTestClass, String testPrefix, String suiteName)", "signatureAfterChange": "  \tpublic static Test buildTestSuite(Class evaluationTestClass, String testPrefix, String suiteName)", "diff": ["-\t\tfor (int m = 0, max = methods.length; m < max; m++) {", "+\t\tnextMethod: for (int m = 0, max = methods.length; m < max; m++) {", "-\t\t\t\t\tint numStart = testPrefix.length();", "-\t\t\t\t\t// tests names subset", "-\t\t\t\t\tif (testsNames != null) {", "-\t\t\t\t\t\tfor (int i = 0, imax= testsNames.length; i<imax; i++) {", "-\t\t\t\t\t\t\tif (testsNames[i].equals(methName) || testsNames[i].equals(methName.substring(numStart))) {", "-\t\t\t\t\t\t\t\ttests.add(methName);", "-\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\t// no prefix, no subsets => add method", "+\t\t\t\t\tif (testPrefix == null && testsNames == null && testsNumbers == null && testsRange == null) {", "+\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "+\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t// look for test number", "-\t\t\t\t\tif (methName.startsWith(testPrefix) && Character.isDigit(methName.charAt(numStart))) {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t// get test number", "-\t\t\t\t\t\t\tint n = numStart;", "-\t\t\t\t\t\t\twhile (methName.charAt(n) == '0') n++;", "-\t\t\t\t\t\t\tint num = Integer.parseInt(methName.substring(n));", "-\t\t\t\t\t\t\t// tests numbers subset", "-\t\t\t\t\t\t\tif (testsNumbers != null && !tests.contains(methName)) {", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < testsNumbers.length; i++) {", "-\t\t\t\t\t\t\t\t\tif (testsNumbers[i] == num) {", "-\t\t\t\t\t\t\t\t\t\ttests.add(methName);", "-\t\t\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// tests range subset", "-\t\t\t\t\t\t\tif (testsRange != null && testsRange.length == 2 && !tests.contains(methName)) {", "-\t\t\t\t\t\t\t\tif ((testsRange[0]==-1 || num>=testsRange[0]) && (testsRange[1]==-1 || num<=testsRange[1])) {", "+\t\t\t\t\t// no prefix or method matches prefix", "+\t\t\t\t\tif (testPrefix == null || methName.startsWith(testPrefix)) {", "+\t\t\t\t\t\tint numStart = testPrefix==null ? 4 /* test */ : testPrefix.length();", "+\t\t\t\t\t\t// tests names subset", "+\t\t\t\t\t\tif (testsNames != null) {", "+\t\t\t\t\t\t\tfor (int i = 0, imax= testsNames.length; i<imax; i++) {", "+\t\t\t\t\t\t\t\tif (testsNames[i].equals(methName) || testsNames[i].equals(methName.substring(numStart))) {", "+\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t} catch (NumberFormatException e) {", "-\t\t\t\t\t\t\tSystem.out.println(\"Method \"+methods[m]+\" has an invalid number format: \"+e.getMessage());", "-\t\t\t\t\t}", "-\t\t\t\t\t// no subset, add all tests", "-\t\t\t\t\tif (testsNames==null && testsNumbers==null &&testsRange==null) {", "-\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "+\t\t\t\t\t\t// look for test number", "+\t\t\t\t\t\tint length = methName.length();", "+\t\t\t\t\t\tif (numStart < length) {", "+\t\t\t\t\t\t\t// get test number", "+\t\t\t\t\t\t\twhile (numStart<length && !Character.isDigit(methName.charAt(numStart))) numStart++; // skip to first digit", "+\t\t\t\t\t\t\twhile (numStart<length && methName.charAt(numStart) == '0') numStart++; // skip to first non-nul digit", "+\t\t\t\t\t\t\tint n = numStart;", "+\t\t\t\t\t\t\twhile (n<length && Character.isDigit(methName.charAt(n))) n++; // skip to next non-digit", "+\t\t\t\t\t\t\tif (n>numStart && n <= length) {", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\tint num = Integer.parseInt(methName.substring(numStart, n));", "+\t\t\t\t\t\t\t\t\t// tests numbers subset", "+\t\t\t\t\t\t\t\t\tif (testsNumbers != null && !tests.contains(methName)) {", "+\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < testsNumbers.length; i++) {", "+\t\t\t\t\t\t\t\t\t\t\tif (testsNumbers[i] == num) {", "+\t\t\t\t\t\t\t\t\t\t\t\ttests.add(methName);", "+\t\t\t\t\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "+\t\t\t\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t// tests range subset", "+\t\t\t\t\t\t\t\t\tif (testsRange != null && testsRange.length == 2 && !tests.contains(methName)) {", "+\t\t\t\t\t\t\t\t\t\tif ((testsRange[0]==-1 || num>=testsRange[0]) && (testsRange[1]==-1 || num<=testsRange[1])) {", "+\t\t\t\t\t\t\t\t\t\t\ttests.add(methName);", "+\t\t\t\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "+\t\t\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t\t\t\t\t\tSystem.out.println(\"Method \"+methods[m]+\" has an invalid number format: \"+e.getMessage());", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+", "+\t\t\t\t\t\t// no subset, add all tests", "+\t\t\t\t\t\tif (testsNames==null && testsNumbers==null && testsRange==null) {", "+\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bec95b9bb58f902e58c1c0e727528a09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "33cf2c285ddb9d801a508bfb1e7446c0a204b2e0", "commitAfterChange": "74a2e94cebab14bcc7fbeac54bdb9333b5128dbe", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic static Test buildTestSuite(Class evaluationTestClass, String suiteName)", "signatureAfterChange": "  \tpublic static Test buildTestSuite(Class evaluationTestClass, String suiteName)", "diff": ["-\t\t// Init suite with class name", "-\t\tList tests = new ArrayList();", "-\t\tConstructor constructor = null;", "-\t\ttry {", "-\t\t\t// Get class constructor", "-\t\t\tClass[] paramTypes = new Class[] { String.class };", "-\t\t\tconstructor = evaluationTestClass.getConstructor(paramTypes);", "-\t\t}", "-\t\tcatch (Exception e) {", "-\t\t\t// cannot get constructor, skip suite", "-\t\t\treturn suite;", "-\t\t}", "-", "-\t\t// Get all tests from \"test%\" methods", "-\t\tMethod[] methods = evaluationTestClass.getDeclaredMethods();", "-\t\tnextMethod: for (int m = 0, max = methods.length; m < max; m++) {", "-\t\t\ttry {", "-\t\t\t\tif (Flags.isPublic(methods[m].getModifiers()) &&", "-\t\t\t\t\tmethods[m].getName().startsWith(\"test\")) {", "-\t\t\t\t\tString methName = methods[m].getName();", "-\t\t\t\t\tObject[] params = {methName};", "-\t\t\t\t\t// no prefix, no subsets => add method", "-\t\t\t\t\tif (TESTS_PREFIX == null && TESTS_NAMES == null && TESTS_NUMBERS == null && TESTS_RANGE == null) {", "-\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "-\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t}", "-\t\t\t\t\t// no prefix or method matches prefix", "-\t\t\t\t\tif (TESTS_PREFIX == null || methName.startsWith(TESTS_PREFIX)) {", "-\t\t\t\t\t\tint numStart = TESTS_PREFIX==null ? 4 /* test */ : TESTS_PREFIX.length();", "-\t\t\t\t\t\t// tests names subset", "-\t\t\t\t\t\tif (TESTS_NAMES != null) {", "-\t\t\t\t\t\t\tfor (int i = 0, imax= TESTS_NAMES.length; i<imax; i++) {", "-\t\t\t\t\t\t\t\tif (TESTS_NAMES[i].equals(methName) || TESTS_NAMES[i].equals(methName.substring(numStart))) {", "-\t\t\t\t\t\t\t\t\ttests.add(methName);", "-\t\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "-\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// look for test number", "-\t\t\t\t\t\tint length = methName.length();", "-\t\t\t\t\t\tif (numStart < length) {", "-\t\t\t\t\t\t\t// get test number", "-\t\t\t\t\t\t\twhile (numStart<length && !Character.isDigit(methName.charAt(numStart))) numStart++; // skip to first digit", "-\t\t\t\t\t\t\twhile (numStart<length && methName.charAt(numStart) == '0') numStart++; // skip to first non-nul digit", "-\t\t\t\t\t\t\tint n = numStart;", "-\t\t\t\t\t\t\twhile (n<length && Character.isDigit(methName.charAt(n))) n++; // skip to next non-digit", "-\t\t\t\t\t\t\tif (n>numStart && n <= length) {", "-\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\tint num = Integer.parseInt(methName.substring(numStart, n));", "-\t\t\t\t\t\t\t\t\t// tests numbers subset", "-\t\t\t\t\t\t\t\t\tif (TESTS_NUMBERS != null && !tests.contains(methName)) {", "-\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < TESTS_NUMBERS.length; i++) {", "-\t\t\t\t\t\t\t\t\t\t\tif (TESTS_NUMBERS[i] == num) {", "-\t\t\t\t\t\t\t\t\t\t\t\ttests.add(methName);", "-\t\t\t\t\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "-\t\t\t\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t// tests range subset", "-\t\t\t\t\t\t\t\t\tif (TESTS_RANGE != null && TESTS_RANGE.length == 2 && !tests.contains(methName)) {", "-\t\t\t\t\t\t\t\t\t\tif ((TESTS_RANGE[0]==-1 || num>=TESTS_RANGE[0]) && (TESTS_RANGE[1]==-1 || num<=TESTS_RANGE[1])) {", "-\t\t\t\t\t\t\t\t\t\t\ttests.add(methName);", "-\t\t\t\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "-\t\t\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t} catch (NumberFormatException e) {", "-\t\t\t\t\t\t\t\t\tSystem.out.println(\"Method \"+methods[m]+\" has an invalid number format: \"+e.getMessage());", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-", "-\t\t\t\t\t\t// no subset, add all tests", "-\t\t\t\t\t\tif (TESTS_NAMES==null && TESTS_NUMBERS==null && TESTS_RANGE==null) {", "-\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcatch (Exception e) {", "-\t\t\t\tSystem.out.println(\"Method \"+methods[m]+\" removed from suite due to exception: \"+e.getMessage());", "-\t\t\t}", "+\t\tList tests = buildTestsList(evaluationTestClass);", "+\t\tfor (int index=0, size=tests.size(); index<size; index++) {", "+\t\t\tsuite.addTest((Test)tests.get(index));"]}], "num": 35327}
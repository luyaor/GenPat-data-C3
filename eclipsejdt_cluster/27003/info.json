{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23912a97fbfcfc09c5713bbc69061b72", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bd3744a050b2a656bf75106f54ac05d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "874e2c41609c64af417834df9af2e898d8dcf37a", "commitAfterChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " private void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " private void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-", "-\t// start assembling info for reseting field info by UnconditionalFlowInfo.resetNullInfoForFields():", "-\tClassScope enclosingClassScope = this.scope.enclosingClassScope();", "-\tUnconditionalFlowInfo fieldResetInfo = (enclosingClassScope != null)", "-\t\t\t? (UnconditionalFlowInfo) enclosingClassScope.fieldResetFlowInfo.copy()", "-\t\t\t: FlowInfo.initial(((UnconditionalFlowInfo)staticFieldInfo).maxFieldCount);", "-\tthis.scope.fieldResetFlowInfo = fieldResetInfo;", "-", "-\t\t\t\tstaticFieldInfo = field.analyseCode(this.staticInitializerScope, staticInitializerContext, staticFieldInfo, flowInfo, fieldResetInfo);", "+\t\t\t\tstaticFieldInfo = field.analyseCode(this.staticInitializerScope, staticInitializerContext, staticFieldInfo);", "+\t\t\t\tif (field.binding != null && this.scope.compilerOptions().includeFieldsInNullAnalysis", "+\t\t\t\t\t\t&& ((field.binding.modifiers & ClassFileConstants.AccFinal) != 0)) {", "+\t\t\t\t\t// we won't reset null Info for constant fields", "+\t\t\t\t\tstaticFieldInfo.updateConstantFieldsMask(field.binding);", "+\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// make null info from static field visible for non-static @NonNull fields, too.", "-\t\t\t\t\tnonStaticFieldInfo.addNullInfoFrom(staticFieldInfo);", "-\t\t\t\tnonStaticFieldInfo = field.analyseCode(this.initializerScope, initializerContext, nonStaticFieldInfo, flowInfo, fieldResetInfo);", "+\t\t\t\tnonStaticFieldInfo = field.analyseCode(this.initializerScope, initializerContext, nonStaticFieldInfo);", "-\t\t\tflowInfo.addConstantFieldsMask(fieldResetInfo);\t// prevent resetting null info for constant fields inside methods", "-\t\t\tflowInfo.resetNullInfoForFields(fieldResetInfo);\t// only preserve null info for constant fields", "+\t\t\tflowInfo.addConstantFieldsMask(staticFieldUnconditionalInfo);\t// prevent resetting null info for constant fields inside methods", "+\t\t\tflowInfo.resetNullInfoForFields();\t// only preserve null info for constant fields", "-\t\t\tconstructorInfo.addConstantFieldsMask(fieldResetInfo); // prevent resetting null info for constant fields inside c'tor too", "+\t\t\tconstructorInfo.addConstantFieldsMask(staticFieldUnconditionalInfo); // prevent resetting null info for constant fields inside c'tor too"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "285c3ad5bdb8d298c22dd326f64cff91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "2b899d5709db9c6865f7da76d74928892a056b7b", "commitAfterChange": "1cce623392dc2abad468b342ade5233f38d20f6c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void resolveStatements(ClassScope upperScope)", "signatureAfterChange": " \tpublic void resolveStatements(ClassScope upperScope)", "diff": ["-/*", "-\t\t// checking for recursive constructor call (protection)", "-\t\tif (!ignoreFurtherInvestigation && constructorCall == null){", "-\t\t\tconstructorCall = new ExplicitConstructorCall(ExplicitConstructorCall.ImplicitSuper);", "-\t\t\tconstructorCall.sourceStart = sourceStart;", "-\t\t\tconstructorCall.sourceEnd = sourceEnd;", "-\t\t}", "-*/", "+", "-\t\tif (constructorCall != null) {", "+\t\tif (this.constructorCall != null) {", "-\t\t\tif (binding != null", "-\t\t\t\t&& binding.declaringClass.id == T_Object", "-\t\t\t\t&& constructorCall.accessMode != ExplicitConstructorCall.This) {", "-\t\t\t\t\tif (constructorCall.accessMode == ExplicitConstructorCall.Super) {", "-\t\t\t\t\t\tscope.problemReporter().cannotUseSuperInJavaLangObject(constructorCall);", "+\t\t\tif (this.binding != null", "+\t\t\t\t&& this.binding.declaringClass.id == T_Object", "+\t\t\t\t&& this.constructorCall.accessMode != ExplicitConstructorCall.This) {", "+\t\t\t\t\tif (this.constructorCall.accessMode == ExplicitConstructorCall.Super) {", "+\t\t\t\t\t\tscope.problemReporter().cannotUseSuperInJavaLangObject(this.constructorCall);", "-\t\t\t\t\tconstructorCall = null;", "+\t\t\t\t\tthis.constructorCall = null;", "-\t\t\t\tconstructorCall.resolve(scope);", "+\t\t\t\tthis.constructorCall.resolve(this.scope);", "-", "-\t\t// indirect reference: increment target constructor reference count", "-\t\tif (constructorCall != null){", "-\t\t\tif (constructorCall.binding != null", "-\t\t\t\t&& !constructorCall.isSuperAccess()", "-\t\t\t\t&& constructorCall.binding.isValidBinding()) {", "-\t\t\t\t((ConstructorDeclaration)", "-\t\t\t\t\t\t(upperScope.referenceContext.declarationOf(constructorCall.binding))).referenceCount++;", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c58e8f302c83a73bbaf8df7abb67ae88", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "8b2f544bc2c01b972e8c0734076c17a325ac4120", "commitAfterChange": "cedc325f2a935c759cba1f1e5e6c7415bee87a4f", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic void resolveReceiver()", "signatureAfterChange": "  \tpublic void resolveReceiver()", "diff": ["-\t\tif (this.arguments != null && this.arguments.length > 0) {", "-\t\t\tif (this.arguments[0].isReceiver()) {", "-\t\t\t\tReceiver receiver = (Receiver) this.arguments[0];", "+\t\tif (this.receiver == null) return;", "-\t\t\t\tTypeBinding resolvedReceiverType = receiver.type.resolvedType;", "-\t\t\t\tif (this.binding == null || resolvedReceiverType == null || !resolvedReceiverType.isValidBinding())", "-\t\t\t\t\treturn;", "+\t\tTypeBinding resolvedReceiverType = this.receiver.type.resolvedType;", "+\t\tif (this.binding == null || resolvedReceiverType == null || !resolvedReceiverType.isValidBinding()) {", "+\t\t\treturn;", "+\t\t}", "-\t\t\t\tReferenceBinding declaringClass = this.binding.declaringClass;", "-\t\t\t\t/* neither static methods nor methods in anonymous types can have explicit 'this' */", "-\t\t\t\tif (this.isStatic() || declaringClass.isAnonymousType()) {", "-\t\t\t\t\tthis.scope.problemReporter().disallowedThisParameter(receiver);", "-\t\t\t\t\treturn; // No need to do further validation", "-\t\t\t\t}", "+\t\tReferenceBinding declaringClass = this.binding.declaringClass;", "+\t\t/* neither static methods nor methods in anonymous types can have explicit 'this' */", "+\t\tif (this.isStatic() || declaringClass.isAnonymousType()) {", "+\t\t\tthis.scope.problemReporter().disallowedThisParameter(this.receiver);", "+\t\t\treturn; // No need to do further validation", "+\t\t}", "-\t\t\t\tReferenceBinding enclosingReceiver = this.scope.enclosingReceiverType();", "-\t\t\t\tif (this.isConstructor()) {", "-\t\t\t\t\t/* Only non static member types or local types can declare explicit 'this' params in constructors */", "-\t\t\t\t\tif (declaringClass.isStatic()", "-\t\t\t\t\t\t\t|| (declaringClass.tagBits & (TagBits.IsLocalType | TagBits.IsMemberType)) == 0) { /* neither member nor local type */", "-\t\t\t\t\t\tthis.scope.problemReporter().disallowedThisParameter(receiver);", "-\t\t\t\t\t\treturn; // No need to do further validation", "-\t\t\t\t\t}", "-\t\t\t\t\tenclosingReceiver = enclosingReceiver.enclosingType();", "-\t\t\t\t}", "-", "-\t\t\t\tif (enclosingReceiver != resolvedReceiverType) {", "-\t\t\t\t\tthis.scope.problemReporter().illegalTypeForExplicitThis(receiver, enclosingReceiver);", "-\t\t\t\t}", "-", "-\t\t\t\tif ((receiver.qualifyingName == null) ? this.isConstructor() : !isQualifierValidForType(receiver.qualifyingName.getName(), enclosingReceiver)) {", "-\t\t\t\t\tthis.scope.problemReporter().illegalQualifierForExplicitThis(receiver, enclosingReceiver);\t\t\t\t\t", "-\t\t\t\t}", "+\t\tReferenceBinding enclosingReceiver = this.scope.enclosingReceiverType();", "+\t\tif (this.isConstructor()) {", "+\t\t\t/* Only non static member types or local types can declare explicit 'this' params in constructors */", "+\t\t\tif (declaringClass.isStatic()", "+\t\t\t\t\t|| (declaringClass.tagBits & (TagBits.IsLocalType | TagBits.IsMemberType)) == 0) { /* neither member nor local type */", "+\t\t\t\tthis.scope.problemReporter().disallowedThisParameter(this.receiver);", "+\t\t\t\treturn; // No need to do further validation", "+\t\t\tenclosingReceiver = enclosingReceiver.enclosingType();", "+\t\t}", "+", "+\t\tif (enclosingReceiver != resolvedReceiverType) {", "+\t\t\tthis.scope.problemReporter().illegalTypeForExplicitThis(this.receiver, enclosingReceiver);", "+\t\t}", "+", "+\t\tif ((this.receiver.qualifyingName == null) ? this.isConstructor() : !isQualifierValidForType(this.receiver.qualifyingName.getName(), enclosingReceiver)) {", "+\t\t\tthis.scope.problemReporter().illegalQualifierForExplicitThis(this.receiver, enclosingReceiver);\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3d7425225a877f2e064ca616f79094e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "6dcea7f92f6d51021ec146f3cbf4e000acdf0623", "commitAfterChange": "ab65f9958c4ed5b3b45ee13b8e88b17d2c86ad3d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void initializeRoots()", "signatureAfterChange": "  \tpublic synchronized void initializeRoots()", "diff": ["-\tpublic void initializeRoots() {", "+\tpublic synchronized void initializeRoots() {", "+\t\t// remember roots infos as old roots infos", "+\t\tthis.oldRoots = this.roots == null ? new Hashtable() : this.roots;", "+\t\tthis.oldOtherRoots = this.otherRoots == null ? new Hashtable() : this.otherRoots;", "-\t\tHashtable newRoots = null;", "-\t\tHashtable newOtherRoots = null;", "-\t\tHashtable newSourceAttachments = null;", "-\t\tif (this.rootsAreStale) {", "+\t\tif (!this.rootsAreStale) return;", "-\t\t\tnewRoots = new Hashtable();", "-\t\t\tnewOtherRoots = new Hashtable();", "-\t\t\tnewSourceAttachments = new Hashtable();", "-\t", "-\t\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "-\t\t\tIJavaProject[] projects;", "+\t\tthis.roots = new Hashtable();", "+\t\tthis.otherRoots = new Hashtable();", "+\t\tthis.sourceAttachments = new Hashtable();", "+\t\t", "+\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "+\t\tIJavaProject[] projects;", "+\t\ttry {", "+\t\t\tprojects = model.getJavaProjects();", "+\t\t} catch (JavaModelException e) {", "+\t\t\t// nothing can be done", "+\t\t\treturn;", "+\t\t}", "+\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\tIJavaProject project = projects[i];", "+\t\t\tIClasspathEntry[] classpath;", "-\t\t\t\tprojects = model.getJavaProjects();", "+\t\t\t\tclasspath = project.getResolvedClasspath(true);", "-\t\t\t\t// nothing can be done", "-\t\t\t\treturn;", "+\t\t\t\t// continue with next project", "+\t\t\t\tcontinue;", "-\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\t\tIJavaProject project = projects[i];", "-\t\t\t\tIClasspathEntry[] classpath;", "+\t\t\tfor (int j= 0, classpathLength = classpath.length; j < classpathLength; j++) {", "+\t\t\t\tIClasspathEntry entry = classpath[j];", "+\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "+\t\t\t\t", "+\t\t\t\t// root path", "+\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\tif (this.roots.get(path) == null) {", "+\t\t\t\t\tthis.roots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars()));", "+\t\t\t\t} else {", "+\t\t\t\t\tArrayList rootList = (ArrayList)this.otherRoots.get(path);", "+\t\t\t\t\tif (rootList == null) {", "+\t\t\t\t\t\trootList = new ArrayList();", "+\t\t\t\t\t\tthis.otherRoots.put(path, rootList);", "+\t\t\t\t\t}", "+\t\t\t\t\trootList.add(new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars()));", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t// source attachment path", "+\t\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_LIBRARY) continue;", "+\t\t\t\tQualifiedName qName = new QualifiedName(JavaCore.PLUGIN_ID, \"sourceattachment: \" + path.toOSString()); //$NON-NLS-1$;", "+\t\t\t\tString propertyString = null;", "-\t\t\t\t\tclasspath = project.getResolvedClasspath(true);", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t// continue with next project", "+\t\t\t\t\tpropertyString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(qName);", "+\t\t\t\t} catch (CoreException e) {", "-\t\t\t\tfor (int j= 0, classpathLength = classpath.length; j < classpathLength; j++) {", "-\t\t\t\t\tIClasspathEntry entry = classpath[j];", "-\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "-\t\t\t\t\t", "-\t\t\t\t\t// root path", "-\t\t\t\t\tIPath path = entry.getPath();", "-\t\t\t\t\tif (newRoots.get(path) == null) {", "-\t\t\t\t\t\tnewRoots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars()));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tArrayList rootList = (ArrayList)newOtherRoots.get(path);", "-\t\t\t\t\t\tif (rootList == null) {", "-\t\t\t\t\t\t\trootList = new ArrayList();", "-\t\t\t\t\t\t\tnewOtherRoots.put(path, rootList);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\trootList.add(new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars()));", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\t// source attachment path", "-\t\t\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_LIBRARY) continue;", "-\t\t\t\t\tQualifiedName qName = new QualifiedName(JavaCore.PLUGIN_ID, \"sourceattachment: \" + path.toOSString()); //$NON-NLS-1$;", "-\t\t\t\t\tString propertyString = null;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tpropertyString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(qName);", "-\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t}", "-\t\t\t\t\tIPath sourceAttachmentPath;", "-\t\t\t\t\tif (propertyString != null) {", "-\t\t\t\t\t\tint index= propertyString.lastIndexOf(PackageFragmentRoot.ATTACHMENT_PROPERTY_DELIMITER);", "-\t\t\t\t\t\tsourceAttachmentPath = (index < 0) ?  new Path(propertyString) : new Path(propertyString.substring(0, index));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tsourceAttachmentPath = entry.getSourceAttachmentPath();", "-\t\t\t\t\t}", "-\t\t\t\t\tif (sourceAttachmentPath != null) {", "-\t\t\t\t\t\tnewSourceAttachments.put(sourceAttachmentPath, path);", "-\t\t\t\t\t}", "+\t\t\t\tIPath sourceAttachmentPath;", "+\t\t\t\tif (propertyString != null) {", "+\t\t\t\t\tint index= propertyString.lastIndexOf(PackageFragmentRoot.ATTACHMENT_PROPERTY_DELIMITER);", "+\t\t\t\t\tsourceAttachmentPath = (index < 0) ?  new Path(propertyString) : new Path(propertyString.substring(0, index));", "+\t\t\t\t} else {", "+\t\t\t\t\tsourceAttachmentPath = entry.getSourceAttachmentPath();", "+\t\t\t\t}", "+\t\t\t\tif (sourceAttachmentPath != null) {", "+\t\t\t\t\tthis.sourceAttachments.put(sourceAttachmentPath, path);", "-\t\tsynchronized(this) {", "-\t\t\tif (this.rootsAreStale) { // double check again", "-\t\t\t\tthis.oldRoots = this.roots == null ? new Hashtable() : this.roots;", "-\t\t\t\tthis.oldOtherRoots = this.otherRoots == null ? new Hashtable() : this.otherRoots;\t\t\t", "-\t\t\t\tif (newRoots != null) {", "-\t\t\t\t\tthis.roots = newRoots;", "-\t\t\t\t\tthis.otherRoots = newOtherRoots;", "-\t\t\t\t\tthis.sourceAttachments = newSourceAttachments;", "-\t\t\t\t\tthis.rootsAreStale = false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\tthis.rootsAreStale = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc4dedd0627bc060d9d4b394a708cb0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "commitAfterChange": "a502b956779c4dac7f761502999cc6d149ba7556", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t\tthis.logger.printlnErr(Main.bind(\"configure.noClasspath\")); //$NON-NLS-1$", "+\t\t\t\tthis.logger.logNoClasspath(); //$NON-NLS-1$", "-\t\t\t\tthis.logger.printlnErr(Main.bind(\"configure.requiresJDK1.2orAbove\")); //$NON-NLS-1$", "+\t\t\t\tthis.logger.logWrongJDK(); //$NON-NLS-1$", "-\t\t\ttry {", "-\t\t\t\tthis.logger.setLog(new PrintWriter(new FileOutputStream(this.log, false)));", "-\t\t\t} catch (IOException e) {", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.cannotOpenLog\")); //$NON-NLS-1$", "-\t\t\t}", "+\t\t\tthis.logger.setLog(this.log);", "-\t\t\t\tthis.logger.printlnErr(Main.bind(\"configure.incorrectClasspath\", this.classpaths[i])); //$NON-NLS-1$", "+\t\t\t\tthis.logger.logIncorrectClasspath(this.classpaths[i]); //$NON-NLS-1$", "-\t\t\t\t\tif (!didSpecifySource) this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);", "-\t\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);", "+\t\t\t\tif (!didSpecifySource) this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);", "+\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);", "-\t\t\t\t\tif (!didSpecifySource) this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);", "-\t\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "+\t\t\t\tif (!didSpecifySource) this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);", "+\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "-\t\t\t\t\tif (!didSpecifySource) this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_5);", "-\t\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "+\t\t\t\tif (!didSpecifySource) this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_5);", "+\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "-\t\t\t\t\tif (!didSpecifyCompliance) this.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\t\t\tif (!didSpecifyCompliance) this.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "+\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "-\t\t\t\t\tif (!didSpecifyCompliance) this.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "-\t\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "+\t\t\t\tif (!didSpecifyCompliance) this.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "+\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "-\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), (String)this.options.get(CompilerOptions.OPTION_TargetPlatform))); //$NON-NLS-1$", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), (String)this.options.get(CompilerOptions.OPTION_TargetPlatform))); //$NON-NLS-1$", "-", "+\t\tthis.logger.logCommandLineArguments(newCommandLineArgs);", "+\t\tthis.logger.logOptions(this.options);", "+\t\tthis.logger.logClasspath(this.classpaths);"]}], "num": 27003}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4febaa4011753bf7221271ea30729b1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c71588da4d23db8b2b1ab2d455431c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "31d915ea88712a08a053d81dbaa3f51ee5d00b1e", "commitAfterChange": "6a649f40f31b6ce7e5ab331634b9ef2be77ed006", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int elementType, IJavaProject currentProject)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(\r \t\tIResourceDelta delta, \r \t\tint elementType, \r \t\tIJavaProject currentProject,\r \t\tIPath currentOutput,\r \t\tboolean currentProjIsOutput)", "diff": ["-\tprotected boolean traverseDelta(IResourceDelta delta, int elementType, IJavaProject currentProject) {\r", "-\r", "+\tprotected boolean traverseDelta(\r", "+\t\tIResourceDelta delta, \r", "+\t\tint elementType, \r", "+\t\tIJavaProject currentProject,\r", "+\t\tIPath currentOutput,\r", "+\t\tboolean currentProjIsOutput) {\r", "+\t\t\t\r", "+\t\t}\r", "+\t\t\r", "+\t\t// get the project's output location\r", "+\t\tif (currentOutput == null) {\r", "+\t\t\ttry {\r", "+\t\t\t\tIJavaProject proj =\r", "+\t\t\t\t\tcurrentProject == null ?\r", "+\t\t\t\t\t\t(IJavaProject)this.createElement(res.getProject(), IJavaElement.JAVA_PROJECT, null) :\r", "+\t\t\t\t\t\tcurrentProject;\r", "+\t\t\t\tif (proj != null) {\r", "+\t\t\t\t\tcurrentOutput = proj.getOutputLocation();\r", "+\t\t\t\t\tcurrentProjIsOutput = proj.getProject().getFullPath().equals(currentOutput);\r", "+\t\t\t\t}\r", "+\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t}\r", "+\t\t\t\t// filter out changes in output location\r", "+\t\t\t\tif (currentProjIsOutput) {\r", "+\t\t\t\t\t// case of proj=src\r", "+\t\t\t\t\tif (childType == IJavaElement.CLASS_FILE) {\r", "+\t\t\t\t\t\tcontinue;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\t// case of .class file under project and no source folder\r", "+\t\t\t\t\tif (childType == IJavaElement.JAVA_PROJECT \r", "+\t\t\t\t\t\t&& childRes instanceof IFile \r", "+\t\t\t\t\t\t&& Util.isValidClassFileName(childRes.getName())) {\r", "+\t\t\t\t\t\tcontinue;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else if (currentOutput != null && currentOutput.isPrefixOf(childPath)) {\r", "+\t\t\t\t\tcontinue;\r", "+\t\t\t\t}\r", "+\t\t\t\t\r", "-\t\t\t\t\t|| !this.traverseDelta(child, childType, (currentProject == null && isPkgFragmentRoot) ? projectOfRoot : currentProject)) {\r", "+\t\t\t\t\t|| !this.traverseDelta(child, childType, (currentProject == null && isPkgFragmentRoot) ? projectOfRoot : currentProject, currentOutput, currentProjIsOutput)) {\r", "-\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, projectOfRoot);\r", "+\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, projectOfRoot, null, false);\r", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {\r", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "956139e866d7dd1b866ecad97ab42fed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tprivate boolean isResFilteredFromOutput(OutputsInfo info, IResource res, int elementType)", "signatureAfterChange": " \tprivate boolean isResFilteredFromOutput(RootInfo rootInfo, OutputsInfo info, IResource res, int elementType)", "diff": ["-\tprivate boolean isResFilteredFromOutput(OutputsInfo info, IResource res, int elementType) {", "+\tprivate boolean isResFilteredFromOutput(RootInfo rootInfo, OutputsInfo info, IResource res, int elementType) {", "+\t\t\tJavaProject javaProject = null;", "+\t\t\tString sourceLevel = null;", "+\t\t\tString complianceLevel = null;", "-\t\t\t\t\t\tif (elementType == IJavaElement.JAVA_PROJECT ", "-\t\t\t\t\t\t\t\t&& res instanceof IFile ", "-\t\t\t\t\t\t\t\t&& Util.isValidClassFileName(res.getName())) {", "-\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\tif (elementType == IJavaElement.JAVA_PROJECT && res instanceof IFile) {", "+\t\t\t\t\t\t\tif (sourceLevel == null) {", "+\t\t\t\t\t\t\t\t// Get java project to use its source and compliance levels", "+\t\t\t\t\t\t\t\tjavaProject = rootInfo == null ?", "+\t\t\t\t\t\t\t\t\t(JavaProject)this.createElement(res.getProject(), IJavaElement.JAVA_PROJECT, null) :", "+\t\t\t\t\t\t\t\t\trootInfo.project;", "+\t\t\t\t\t\t\t\tif (javaProject == null) {", "+\t\t\t\t\t\t\t\t\t// Cannot get any project => use workspace options", "+\t\t\t\t\t\t\t\t\tsourceLevel = this.manager.getOption(JavaCore.COMPILER_SOURCE);", "+\t\t\t\t\t\t\t\t\tcomplianceLevel = this.manager.getOption(JavaCore.COMPILER_COMPLIANCE);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tsourceLevel = javaProject.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\t\t\t\t\t\t\tcomplianceLevel = javaProject.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (Util.isValidClassFileName(res.getName(), sourceLevel, complianceLevel)) {", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t}"]}], "num": 25022}
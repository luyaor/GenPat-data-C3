{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4f8d4ce2d3094aff5b47e8127ca3e4b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73d7d0637a5e0d583a1e0c6969624cad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "4f899ed65a6db0134a5169430983a39f00dbaf4c", "commitAfterChange": "302ba575da16bb6fb5610129dd618d637661239d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods)", "diff": ["-\t\t\t} else {", "+\t\t\t} else if (inheritedMethod.isPublic() || !type.isInterface()) {", "+\t\t\t\t// interface I { @Override Object clone(); } does not override Object#clone()", "-\t\t\tif (!areReturnTypesCompatible(currentMethod, inheritedMethod))", "+\t\t\tif (!areReturnTypesCompatible(currentMethod, inheritedMethod)", "+\t\t\t\t\t&& (currentMethod.returnType.tagBits & TagBits.HasMissingType) == 0) {", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe6a875b57eb171269dc4849e552e060", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "4dc6b4bed72d0096965db7b9cb9d69c5b9b30263", "commitAfterChange": "8d5f38796ff956b29c38731a60eb368c73ac43a2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "diff": ["+\t\t// but cannot ignore an overridden inherited method completely when it comes to checking for bridge methods", "-\t\tmethods = closestMethods;", "-\t\tlength = index;", "-\t}", "-", "-\tif (!checkInheritedReturnTypes(methods, length))", "+\t\tif (!checkInheritedReturnTypes(closestMethods, index))", "+\t\t\treturn;", "+\t} else if (!checkInheritedReturnTypes(methods, length)) {", "+\t}"]}], "num": 20292}
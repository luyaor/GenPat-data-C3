{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23b34241cf7b7ccb162e1b2078f96443", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a0cd08a24d08d8f79f22ba8aa046887", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MemberValuePair.java", "commitBeforeChange": "e7fead4adac4e5d682bbdf8cb7aaa3f524aab927", "commitAfterChange": "3f60ba6c4328b89dbfaef12feb628451b43d7879", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "signatureAfterChange": "  \tpublic void resolveTypeExpecting(final BlockScope scope, final TypeBinding requiredType)", "diff": ["-\tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType) {", "+\tpublic void resolveTypeExpecting(final BlockScope scope, final TypeBinding requiredType) {", "-\t\tTypeBinding valueType;", "+\t\tfinal TypeBinding valueType;", "-\t\tTypeBinding leafType = requiredType.leafComponentType();", "-\t\tif (!(this.value.isConstantValueOfTypeAssignableToType(valueType, requiredType)", "-\t\t\t\t|| valueType.isCompatibleWith(requiredType))) {", "-", "-\t\t\tif (!(requiredType.isArrayType()", "-\t\t\t\t\t&& requiredType.dimensions() == 1", "-\t\t\t\t\t&& (this.value.isConstantValueOfTypeAssignableToType(valueType, leafType)", "-\t\t\t\t\t\t\t|| valueType.isCompatibleWith(leafType)))) {", "-", "-\t\t\t\tif (leafType.isAnnotationType() && !valueType.isAnnotationType()) {", "-\t\t\t\t\tscope.problemReporter().annotationValueMustBeAnnotation(this.binding.declaringClass, this.name, this.value, leafType);", "+\t\tfinal TypeBinding leafType = requiredType.leafComponentType();", "+\t\t// the next check may need deferring:", "+\t\tfinal boolean[] shouldExit = new boolean[1];", "+\t\tRunnable check = new Runnable() {", "+\t\t\t@Override", "+\t\t\tpublic void run() {", "+\t\t\t\tif (!(MemberValuePair.this.value.isConstantValueOfTypeAssignableToType(valueType, requiredType)", "+\t\t\t\t\t\t|| valueType.isCompatibleWith(requiredType))) {", "+\t\t\t\t\tif (!(requiredType.isArrayType()", "+\t\t\t\t\t\t\t&& requiredType.dimensions() == 1", "+\t\t\t\t\t\t\t&& (MemberValuePair.this.value.isConstantValueOfTypeAssignableToType(valueType, leafType)", "+\t\t\t\t\t\t\t\t\t|| valueType.isCompatibleWith(leafType)))) {", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tif (leafType.isAnnotationType() && !valueType.isAnnotationType()) {", "+\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeAnnotation(MemberValuePair.this.binding.declaringClass,", "+\t\t\t\t\t\t\t\t\tMemberValuePair.this.name, MemberValuePair.this.value, leafType);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tscope.problemReporter().typeMismatchError(valueType, requiredType, MemberValuePair.this.value, null);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tshouldExit[0] = true; // TODO may allow to proceed to find more errors at once", "+\t\t\t\t\t}", "-\t\t\t\t\tscope.problemReporter().typeMismatchError(valueType, requiredType, this.value, null);", "+\t\t\t\t\tscope.compilationUnitScope().recordTypeConversion(requiredType.leafComponentType(), valueType.leafComponentType());", "+\t\t\t\t\tMemberValuePair.this.value.computeConversion(scope, requiredType, valueType);", "-\t\t\t\treturn; // may allow to proceed to find more errors at once", "-\t\t} else {", "-\t\t\tscope.compilationUnitScope().recordTypeConversion(requiredType.leafComponentType(), valueType.leafComponentType());", "-\t\t\tthis.value.computeConversion(scope, requiredType, valueType);", "+\t\t};", "+\t\t// ... now or later?", "+\t\tif (!scope.deferCheck(check)) {", "+\t\t\tcheck.run();", "+\t\t\tif (shouldExit[0])", "+\t\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "980e24d32c534ba68f9410f91812d0ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope scope)", "diff": ["-\t\tTypeBinding typeBinding = type.resolveType(scope);", "+\t\tTypeBinding variableType = type.resolveType(scope);", "-\t\tif (typeBinding != null) {", "-\t\t\tif (typeBinding == VoidBinding) {", "+\t\tif (variableType != null) {", "+\t\t\tif (variableType == VoidBinding) {", "-\t\t\tif (typeBinding.isArrayType() && ((ArrayBinding) typeBinding).leafComponentType == VoidBinding) {", "+\t\t\tif (variableType.isArrayType() && ((ArrayBinding) variableType).leafComponentType == VoidBinding) {", "-\t\t\tbinding = new LocalVariableBinding(this, typeBinding, modifiers, false);", "+\t\t\tbinding = new LocalVariableBinding(this, variableType, modifiers, false);", "-\t\tif (typeBinding == null) {", "+\t\tif (variableType == null) {", "-\t\t\t\tTypeBinding initializationType = initialization.resolveTypeExpecting(scope, typeBinding);", "+\t\t\t\tTypeBinding initializationType = initialization.resolveTypeExpecting(scope, variableType);", "-\t\t\t\t\tinitialization.implicitWidening(typeBinding, initializationType);", "+\t\t\t\t\tinitialization.computeConversion(scope, variableType, initializationType);", "-\t\t\t\tTypeBinding initializationType = initialization.resolveType(scope);", "+\t\t\t    this.initialization.setExpectedType(variableType);", "+\t\t\t\tTypeBinding initializationType = this.initialization.resolveType(scope);", "-\t\t\t\t\tif (initialization.isConstantValueOfTypeAssignableToType(initializationType, typeBinding)", "-\t\t\t\t\t\t|| (typeBinding.isBaseType() && BaseTypeBinding.isWidening(typeBinding.id, initializationType.id))", "-\t\t\t\t\t\t|| initializationType.isCompatibleWith(typeBinding))", "-\t\t\t\t\t\tinitialization.implicitWidening(typeBinding, initializationType);", "-\t\t\t\t\telse", "-\t\t\t\t\t\tscope.problemReporter().typeMismatchError(initializationType, typeBinding, this);", "+\t\t\t\t\tif (initialization.isConstantValueOfTypeAssignableToType(initializationType, variableType)", "+\t\t\t\t\t\t|| (variableType.isBaseType() && BaseTypeBinding.isWidening(variableType.id, initializationType.id))", "+\t\t\t\t\t\t|| initializationType.isCompatibleWith(variableType)) {", "+\t\t\t\t\t\tthis.initialization.computeConversion(scope, variableType, initializationType);", "+\t\t\t\t\t\tif (initializationType.isRawType() && (variableType.isParameterizedType() || variableType.isGenericType())) {", "+\t\t\t\t\t\t\t    scope.problemReporter().unsafeRawAssignment(this.initialization, initializationType, variableType);", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tscope.problemReporter().typeMismatchError(initializationType, variableType, this);", "+\t\t\t\t\t}", "-\t\t\t\t\t\t? initialization.constant.castTo((typeBinding.id << 4) + initialization.constant.typeID())", "+\t\t\t\t\t\t? initialization.constant.castTo((variableType.id << 4) + initialization.constant.typeID())"]}], "num": 3179}
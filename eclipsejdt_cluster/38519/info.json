{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3b3a0b5dbcec02050805a2a583fca8c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49c5b074fe060b5f03b4cd507e9ddb28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "76a2ec884825e9edb380555c61500f23750ece32", "commitAfterChange": "0dc9f4a7cc769fd0c2e397d6cc32c352b61f03b4", "methodNumberBeforeChange": 393, "methodNumberAfterChange": 393, "signatureBeforeChange": " public void unnecessaryTypeArgumentsForMethodInvocation(MessageSend messageSend)", "signatureAfterChange": " public void unnecessaryTypeArgumentsForMethodInvocation(MethodBinding method, TypeBinding[] genericTypeArguments, TypeReference[] typeArguments)", "diff": ["-public void unnecessaryTypeArgumentsForMethodInvocation(MessageSend messageSend) {", "-\tMethodBinding method = messageSend.binding;", "-\tTypeBinding[] genericTypeArguments = messageSend.genericTypeArguments;", "+public void unnecessaryTypeArgumentsForMethodInvocation(MethodBinding method, TypeBinding[] genericTypeArguments, TypeReference[] typeArguments) {", "+\tString methodName = method.isConstructor()", "+\t\t? new String(method.declaringClass.shortReadableName())", "+\t\t: new String(method.selector);", "-\t\tIProblem.UnusedTypeArgumentsForMethodInvocation,", "+\t\t\tmethod.isConstructor()", "+\t\t\t\t? IProblem.UnusedTypeArgumentsForConstructorInvocation", "+\t\t\t\t: IProblem.UnusedTypeArgumentsForMethodInvocation,", "-\t\t        new String(method.selector),", "+\t\t\t\tmethodName,", "-\t\t        new String(method.selector),", "+\t\t\t\tmethodName,", "-\t\tmessageSend.typeArguments[0].sourceStart,", "-\t\tmessageSend.typeArguments[messageSend.typeArguments.length-1].sourceEnd);\t\t", "+\t\ttypeArguments[0].sourceStart,", "+\t\ttypeArguments[typeArguments.length-1].sourceEnd);\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6866989b8de5a51c4254f3466628877", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "5d7b0ed4ccf6dc91337d9ac62f14ae585f547855", "commitAfterChange": "e706e02e84b0ab73a5fa0bab5675fe627a8c0157", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 188, "signatureBeforeChange": " public void booleanMethodThrowingException(MethodDeclaration methodDecl)", "signatureAfterChange": " public void uncommentedEmptyBlock(Block block)", "diff": ["-public void booleanMethodThrowingException(MethodDeclaration methodDecl) {", "-\tMethodBinding method = methodDecl.binding;", "-\tthis.handle(", "-\t\tIProblem.BooleanMethodThrowingException,", "-\t\tnew String[] {", "-\t\t\tnew String(method.declaringClass.readableName()),", "-\t\t\tnew String(method.selector),", "-\t\t\tparametersAsString(method)", "-\t\t }, ", "-\t\tnew String[] {", "-\t\t\tnew String(method.declaringClass.shortReadableName()),", "-\t\t\tnew String(method.selector),", "-\t\t\tparametersAsShortString(method)", "-\t\t }, ", "-\t\tmethodDecl.sourceStart,", "-\t\tmethodDecl.sourceEnd);", "-}", "+public void uncommentedEmptyBlock(Block block) {", "+\tString[] arguments = new String[] {};", "+\tthis.handle(", "+\t\tIProblem.UncommentedEmptyBlock,", "+\t\targuments,", "+\t\targuments,", "+\t\tblock.sourceStart,", "+\t\tblock.sourceEnd);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd4db24ce7da7121db28dc38319493bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "7a5fa6d4e7beb7ad1bc8fa652ccd4c2cc1dd4339", "commitAfterChange": "89483d0e271e99c67b18df19eba41f6a1cf15383", "methodNumberBeforeChange": 163, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void predicateThrowingException(MethodDeclaration methodDecl)", "signatureAfterChange": " public void booleanMethodThrowingException(MethodDeclaration methodDecl)", "diff": ["+public void booleanMethodThrowingException(MethodDeclaration methodDecl) {", "+\tMethodBinding method = methodDecl.binding;", "+\tthis.handle(", "+\t\tIProblem.BooleanMethodThrowingException,", "+\t\tnew String[] {", "+\t\t\tnew String(method.declaringClass.readableName()),", "+\t\t\tnew String(method.selector),", "+\t\t\tparametersAsString(method)", "+\t\t }, ", "+\t\tnew String[] {", "+\t\t\tnew String(method.declaringClass.shortReadableName()),", "+\t\t\tnew String(method.selector),", "+\t\t\tparametersAsShortString(method)", "+\t\t }, ", "+\t\tmethodDecl.sourceStart,", "+\t\tmethodDecl.sourceEnd);", "+}", "-}", "-public void predicateThrowingException(MethodDeclaration methodDecl) {", "-\tMethodBinding method = methodDecl.binding;", "-\tthis.handle(", "-\t\tIProblem.PredicateThrowingException,", "-\t\tnew String[] {", "-\t\t\tnew String(method.declaringClass.readableName()),", "-\t\t\tnew String(method.selector),", "-\t\t\tparametersAsString(method)", "-\t\t }, ", "-\t\tnew String[] {", "-\t\t\tnew String(method.declaringClass.shortReadableName()),", "-\t\t\tnew String(method.selector),", "-\t\t\tparametersAsShortString(method)", "-\t\t }, ", "-\t\tmethodDecl.sourceStart,", "-\t\tmethodDecl.sourceEnd);"]}], "num": 38519}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "beb873a37379dd49a9e24b844053977e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a6073e931691e5195dba42e08e04e27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "24ecdaaa88a3d3df53c6657b56b1c35a02f254d7", "commitAfterChange": "b77d2ea3108de5650fdc8f1f0c9f51bf7203159f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tprotected void seekTypesInSourcePackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "signatureAfterChange": " \tprotected void seekTypesInSourcePackage( \t\t\tString name,  \t\t\tIPackageFragment pkg,  \t\t\tint firstDot,  \t\t\tboolean partialMatch,  \t\t\tString topLevelTypeName,  \t\t\tint acceptFlags, \t\t\tIJavaElementRequestor requestor)", "diff": ["-\tprotected void seekTypesInSourcePackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor) {", "+\tprotected void seekTypesInSourcePackage(", "+\t\t\tString name, ", "+\t\t\tIPackageFragment pkg, ", "+\t\t\tint firstDot, ", "+\t\t\tboolean partialMatch, ", "+\t\t\tString topLevelTypeName, ", "+\t\t\tint acceptFlags,", "+\t\t\tIJavaElementRequestor requestor) {", "-\t\t\t\tint firstDot = name.indexOf('.');", "-\t\t\t\tString topLevelTypeName = firstDot == -1 ? name : name.substring(0, firstDot);", "-\t\t\t\t", "-\t\t\t\t// look in unitsToLookInside first", "-\t\t\t\tHashMap typeMap = (HashMap) (this.unitsToLookInside == null ? null : this.unitsToLookInside.get(pkg));", "-\t\t\t\tif (typeMap != null) {", "-\t\t\t\t\tObject object = typeMap.get(topLevelTypeName);", "-\t\t\t\t\tif (object instanceof IType) {", "-\t\t\t\t\t\tIType type = getMemberType((IType) object, name, firstDot);", "-\t\t\t\t\t\tif (acceptType(type, acceptFlags, true/*a source type*/)) {", "-\t\t\t\t\t\t\trequestor.acceptType(type);", "-\t\t\t\t\t\t\treturn; // don't continue with compilation unit", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else if (object instanceof IType[]) {", "-\t\t\t\t\t\tIType[] topLevelTypes = (IType[]) object;", "-\t\t\t\t\t\tfor (int i = 0, length = topLevelTypes.length; i < length; i++) {", "-\t\t\t\t\t\t\tif (requestor.isCanceled())", "-\t\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t\tIType type = getMemberType(topLevelTypes[i], name, firstDot);", "-\t\t\t\t\t\t\tif (acceptType(type, acceptFlags, true/*a source type*/)) {", "-\t\t\t\t\t\t\t\trequestor.acceptType(type);", "-\t\t\t\t\t\t\t\treturn; // return the first one", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t// look in compilation units", "-\t\t\t\tString prefix = name.toLowerCase();", "-\t\t\t\tint firstDot = prefix.indexOf('.');", "-\t\t\t\t", "-\t\t\t\t// look in unitsToLookInside first", "-\t\t\t\tHashMap typeMap = (HashMap) (this.unitsToLookInside == null ? null : this.unitsToLookInside.get(pkg));", "-\t\t\t\tif (typeMap != null) {", "-\t\t\t\t\tIterator iterator = typeMap.values().iterator();", "-\t\t\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\t\t\tif (requestor.isCanceled())", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\tObject object = iterator.next();", "-\t\t\t\t\t\tif (object instanceof IType) {", "-\t\t\t\t\t\t\tseekTypesInTopLevelType(prefix, firstDot, (IType) object, requestor, acceptFlags);", "-\t\t\t\t\t\t} else if (object instanceof IType[]) {", "-\t\t\t\t\t\t\tIType[] topLevelTypes = (IType[]) object;", "-\t\t\t\t\t\t\tfor (int i = 0, length = topLevelTypes.length; i < length; i++)", "-\t\t\t\t\t\t\t\tseekTypesInTopLevelType(prefix, firstDot, topLevelTypes[i], requestor, acceptFlags);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t// look in compilation units", "-\t\t\t\t\tString cuPrefix = firstDot == -1 ? prefix : prefix.substring(0, firstDot);", "+\t\t\t\t\tString cuPrefix = firstDot == -1 ? name : name.substring(0, firstDot);", "-\t\t\t\t\t\t\t\tseekTypesInTopLevelType(prefix, firstDot, types[j], requestor, acceptFlags);", "+\t\t\t\t\t\t\t\tseekTypesInTopLevelType(name, firstDot, types[j], requestor, acceptFlags);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ce4e31fd376d351c3d8e9c6544db5bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "3a5fcda14833c30c433021580cbaac3b7d8e9113", "commitAfterChange": "493886e55be15953b837fd1face3355603b485b8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " private boolean canSeeFocus(IPath projectOrJarPath)", "signatureAfterChange": " private boolean canSeeFocus(IPath projectOrJarPath)", "diff": ["-\tif (this.searchScope instanceof JavaWorkspaceScope) return true;", "+\t// if (this.searchScope instanceof JavaWorkspaceScope) return true;", "+\treturn canSeeFocus(getProjectOrJar(this.focus), projectOrJarPath);", "+}", "-\t\twhile (!(this.focus instanceof IJavaProject) && !(this.focus instanceof JarPackageFragmentRoot)) {", "-\t\t\tthis.focus = this.focus.getParent();", "-\t\t}", "-\t\tIJavaModel model = this.focus.getJavaModel();", "-\t\tIJavaProject project = this.getJavaProject(projectOrJarPath, model);", "-\t\tif (this.focus instanceof JarPackageFragmentRoot) {", "-\t\t\tJarPackageFragmentRoot jar = (JarPackageFragmentRoot)this.focus;", "-\t\t\t\treturn this.haveSameParent(projectOrJarPath, jarPath, model); ", "-\t\t\tIJavaProject focusProject = (IJavaProject)this.focus;"]}], "num": 14361}
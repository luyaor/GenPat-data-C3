{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8aed0ee3ccd86bb61f9238ddf16e206e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4be5f04d0c8c5dc09014cc0c61e04821", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InnerEmulationTest.java", "commitBeforeChange": "b0e4bc3e5157dbec051001d4b36efba6d30a5b39", "commitAfterChange": "5a1b6ed1ac22ef15e82cc14b2b59be4383e1ddc7", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " public void test078()", "signatureAfterChange": " public void test078()", "diff": ["-\tif (options.sourceLevel < ClassFileConstants.JDK1_5) {", "+\tif (options.sourceLevel <= ClassFileConstants.JDK1_3) {", "+\t\t\t\"\tvoid foo() { System.out.println(X.this);\t} \\n\" + ", "+\t\t\t\"\t                                ^^^^^^\\n\" + ", "+\t\t\t\"No enclosing instance of the type X is accessible in scope\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t\treturn;", "+\t}", "+\tif (options.sourceLevel <= ClassFileConstants.JDK1_4) {", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\t\\n\"+", "+\t\t\t\t\"\tX(Object o){\t\\n\"+", "+\t\t\t\t\"\t\tclass A { \t\\n\"+", "+\t\t\t\t\"\t\t\tprivate A() {\t\\n\"+ // implicit enclosing instance in non-static context", "+\t\t\t\t\"\t\t\t}\t\\n\"+", "+\t\t\t\t\"\t\t}\t\\n\"+", "+\t\t\t\t\"\t\tclass B extends X {\t\\n\"+", "+\t\t\t\t\"\t\t\tB() {\t\\n\"+", "+\t\t\t\t\"\t\t\t\tsuper(new A(){\t\\n\"+", "+\t\t\t\t\"\t\t\t\t\tvoid foo() { System.out.println(X.this);\t} \\n\"+", "+\t\t\t\t\"\t\t\t\t});\t\\n\"+", "+\t\t\t\t\"\t\t\t}\t\\n\"+", "+\t\t\t\t\"\t\t}\t\\n\"+", "+\t\t\t\t\"\t}\t\\n\"+", "+\t\t\t\t\"} \t\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tsuper(new A(){\t\\n\" + ", "+\t\t\t\"\t\t\t\t\tvoid foo() { System.out.println(X.this);\t} \\n\" + ", "+\t\t\t\"\t\t\t\t});\t\\n\" + ", "+\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"No enclosing instance of type X is available due to some intermediate constructor invocation\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tvoid foo() { System.out.println(X.this);\t} \\n\" + ", "+\t\t\t\"\t     ^^^^^\\n\" + ", "+\t\t\t\"The method foo() from the type new A(){} is never used locally\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 10)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60bc4875507c1fd91a695299f79aba81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "6f52e55dfcdb3767d3e0659e7f3cf8875e7f6b50", "commitAfterChange": "41a140d5041f3071881a473fd0061cff7116544d", "methodNumberBeforeChange": 329, "methodNumberAfterChange": 329, "signatureBeforeChange": " public void test179()", "signatureAfterChange": " public void test179()", "diff": ["+\tif (this.complianceLevel <= ClassFileConstants.JDK1_5) {", "+\t\tthis.runNegativeTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"interface Adaptable {\\n\" + ", "+\t\t\t\t\t\"\tpublic Object getAdapter(Class clazz);\t\\n\" + ", "+\t\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\t\"\\n\" + ", "+\t\t\t\t\t\"public class X implements Adaptable {\\n\" + ", "+\t\t\t\t\t\"\t@Override\\n\" + ", "+\t\t\t\t\t\"\tpublic Object getAdapter(Class<?> clazz) {\\n\" + ", "+\t\t\t\t\t\"\t\treturn null;\\n\" + ", "+\t\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\t\"}\\n\"", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\tpublic Object getAdapter(Class clazz);\t\\n\" + ", "+\t\t\t\t\"\t                         ^^^^^\\n\" + ", "+\t\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tpublic class X implements Adaptable {\\n\" + ", "+\t\t\t\t\"\t             ^\\n\" + ", "+\t\t\t\t\"The type X must implement the inherited abstract method Adaptable.getAdapter(Class)\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tpublic Object getAdapter(Class<?> clazz) {\\n\" + ", "+\t\t\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Name clash: The method getAdapter(Class<?>) of type X has the same erasure as getAdapter(Class) of type Adaptable but does not override it\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tpublic Object getAdapter(Class<?> clazz) {\\n\" + ", "+\t\t\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"The method getAdapter(Class<?>) of type X must override a superclass method\\n\" + ", "+\t\t\t\t\"----------\\n\");", "+\t\treturn;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "926281f5eb9a00b252b51942403daaf1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "677bf3763b6e383c756f5ca8cbbd80c6dec30c1f", "commitAfterChange": "c06e07ca77c0b109ce7d4e6c3f60180a3777bc7d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void _test009()", "signatureAfterChange": " \tpublic void test009()", "diff": ["-\t//https://bugs.eclipse.org/bugs/show_bug.cgi?id=123943 - case 2", "-\tpublic void _test009() {", "+\t// see also Bug 399567 - [1.8] Different error message from the reference compiler", "+\tpublic void test009() {", "+\t\tString[] testFiles = ", "+\t\t\t\tnew String[] {", "+\t\t\t\t\"T.java\",", "+\t\t\t\t\"import java.util.*;\\n\" +", "+\t\t\t\t\t\t\"public class T {\\n\" +", "+\t\t\t\t\t\t\"   void test() {\\n\" +", "+\t\t\t\t\t\t\"   \tOrderedSet<String> os = null;\\n\" +", "+\t\t\t\t\t\t\"   \tos.add(\\\"hello\\\");\\n\" +", "+\t\t\t\t\t\t\"   \tOrderedSet<Integer> os2 = null;\\n\" +", "+\t\t\t\t\t\t\"   \tos2.add(1);\\n\" +", "+\t\t\t\t\t\t\"   }\\n\" +", "+\t\t\t\t\t\t\"}\\n\" +", "+\t\t\t\t\t\t\"interface OrderedSet<E> extends List<E>, Set<E> { boolean add(E o); }\\n\"", "+\t\t};", "+\t\tif (!IS_JRE_8 || this.complianceLevel < ClassFileConstants.JDK1_8)", "+\t\t\tthis.runConformTest(testFiles, \"\");", "+\t\telse", "+\t\t\tthis.runNegativeTest(", "+\t\t\t\ttestFiles,", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t  \"1. WARNING in T.java (at line 5)\\n\" + ", "+\t\t\t  \"\tos.add(\\\"hello\\\");\\n\" + ", "+\t\t\t  \"\t^^\\n\" + ", "+\t\t\t  \"Null pointer access: The variable os can only be null at this location\\n\" + ", "+\t\t\t  \"----------\\n\" + ", "+\t\t\t  \"2. WARNING in T.java (at line 7)\\n\" + ", "+\t\t\t  \"\tos2.add(1);\\n\" + ", "+\t\t\t  \"\t^^^\\n\" + ", "+\t\t\t  \"Null pointer access: The variable os2 can only be null at this location\\n\" + ", "+\t\t\t  \"----------\\n\" + ", "+\t\t\t  \"3. ERROR in T.java (at line 10)\\n\" + ", "+\t\t\t  \"\tinterface OrderedSet<E> extends List<E>, Set<E> { boolean add(E o); }\\n\" + ", "+\t\t\t  \"\t          ^^^^^^^^^^\\n\" + ", "+\t\t\t  \"Duplicate methods named stream with the parameters () and () are inherited from the types Set<E> and List<E>\\n\" + ", "+\t\t\t  \"----------\\n\" + ", "+\t\t\t  \"4. ERROR in T.java (at line 10)\\n\" + ", "+\t\t\t  \"\tinterface OrderedSet<E> extends List<E>, Set<E> { boolean add(E o); }\\n\" + ", "+\t\t\t  \"\t          ^^^^^^^^^^\\n\" + ", "+\t\t\t  \"Duplicate methods named parallelStream with the parameters () and () are inherited from the types Set<E> and List<E>\\n\" + ", "+\t\t\t  \"----------\\n\");", "+\t}", "-\t\t\t\t\"}\" +", "-\t\t\t\t\"interface OrderedSet<E> extends List<E>, Set<E> { boolean add(E o); }\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f84cf9445625e8d648b986e60121be0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "ab13d6b1cdae7066b5bf55448172280f7137212e", "commitAfterChange": "b6aa1e7468e04a61e529b4c4b0b636e6819cd942", "methodNumberBeforeChange": 352, "methodNumberAfterChange": 352, "signatureBeforeChange": " \tpublic void test0344()", "signatureAfterChange": " \tpublic void test0344()", "diff": ["+\t\tif (this.complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\tthis.runNegativeTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"import java.io.IOException;\\n\" +", "+\t\t\t\t\t\"\\n\" +", "+\t\t\t\t\t\"public abstract class X<T extends Runnable> {\\n\" +", "+\t\t\t\t\t\"\t\\n\" +", "+\t\t\t\t\t\"\tpublic abstract <T extends Exception> T bar(T t);\\n\" +", "+\t\t\t\t\t\"\\n\" +", "+\t\t\t\t\t\"\tstatic void foo(X x) {\\n\" +", "+\t\t\t\t\t\"\t\tx.<Exception>bar(null);\\n\" +", "+\t\t\t\t\t\"\t\t\\n\" +", "+\t\t\t\t\t\"\t\tclass R implements Runnable {\\n\" +", "+\t\t\t\t\t\"\t\t\tpublic void run() {\\n\" +", "+\t\t\t\t\t\"\t\t\t}\\n\" +", "+\t\t\t\t\t\"\t\t}\\n\" +", "+\t\t\t\t\t\"\t\tX<R> xr = new X<R>(){  \\n\" +", "+\t\t\t\t\t\"\t\t\tpublic <T> T bar(T t) { \\n\" +", "+\t\t\t\t\t\"\t\t\t\treturn t; \\n\" +", "+\t\t\t\t\t\"\t\t\t}\\n\" +", "+\t\t\t\t\t\"\t\t};\\n\" +", "+\t\t\t\t\t\"\t\tIOException e = xr.bar(new IOException());\\n\" +", "+\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\"}\\n\"", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tpublic abstract <T extends Exception> T bar(T t);\\n\" + ", "+\t\t\t\t\"\t                 ^\\n\" + ", "+\t\t\t\t\"The type parameter T is hiding the type T\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tstatic void foo(X x) {\\n\" + ", "+\t\t\t\t\"\t                ^\\n\" + ", "+\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tx.<Exception>bar(null);\\n\" + ", "+\t\t\t\t\"\t             ^^^\\n\" + ", "+\t\t\t\t\"The method bar(Exception) of raw type X is no longer generic; it cannot be parameterized with arguments <Exception>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\t\"\tX<R> xr = new X<R>(){  \\n\" + ", "+\t\t\t\t\"\t              ^^^^^^\\n\" + ", "+\t\t\t\t\"The type new X<R>(){} must implement the inherited abstract method X<R>.bar(T)\\n\" + ", "+\t\t\t\t\"----------\\n\");", "+\t\t\treturn;", "+\t\t}", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"import java.io.IOException;\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"public abstract class X<T extends Runnable> {\\n\" +", "-\t\t\t\t\"\t\\n\" +", "-\t\t\t\t\"\tpublic abstract <T extends Exception> T bar(T t);\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"\tstatic void foo(X x) {\\n\" +", "-\t\t\t\t\"\t\tx.<Exception>bar(null);\\n\" +", "-\t\t\t\t\"\t\t\\n\" +", "-\t\t\t\t\"\t\tclass R implements Runnable {\\n\" +", "-\t\t\t\t\"\t\t\tpublic void run() {\\n\" +", "-\t\t\t\t\"\t\t\t}\\n\" +", "-\t\t\t\t\"\t\t}\\n\" +", "-\t\t\t\t\"\t\tX<R> xr = new X<R>(){  \\n\" +", "-\t\t\t\t\"\t\t\tpublic <T> T bar(T t) { \\n\" +", "-\t\t\t\t\"\t\t\t\treturn t; \\n\" +", "-\t\t\t\t\"\t\t\t}\\n\" +", "-\t\t\t\t\"\t\t};\\n\" +", "-\t\t\t\t\"\t\tIOException e = xr.bar(new IOException());\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\\n\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 5)\\n\" +", "-\t\t\t\"\tpublic abstract <T extends Exception> T bar(T t);\\n\" +", "-\t\t\t\"\t                 ^\\n\" +", "-\t\t\t\"The type parameter T is hiding the type T\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 7)\\n\" +", "-\t\t\t\"\tstatic void foo(X x) {\\n\" +", "-\t\t\t\"\t                ^\\n\" +", "-\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 8)\\n\" +", "-\t\t\t\"\tx.<Exception>bar(null);\\n\" +", "-\t\t\t\"\t             ^^^\\n\" +", "-\t\t\t\"The method bar(Exception) of raw type X is no longer generic; it cannot be parameterized with arguments <Exception>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 14)\\n\" +", "-\t\t\t\"\tX<R> xr = new X<R>(){  \\n\" +", "-\t\t\t\"\t              ^^^^^^\\n\" +", "-\t\t\t\"The type new X<R>(){} must implement the inherited abstract method X<R>.bar(T)\\n\" +", "-\t\t\t\"----------\\n\");", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"import java.io.IOException;\\n\" +", "+\t\t\t\t\t\"\\n\" +", "+\t\t\t\t\t\"public abstract class X<T extends Runnable> {\\n\" +", "+\t\t\t\t\t\"\t\\n\" +", "+\t\t\t\t\t\"\tpublic abstract <T extends Exception> T bar(T t);\\n\" +", "+\t\t\t\t\t\"\\n\" +", "+\t\t\t\t\t\"\tstatic void foo(X x) {\\n\" +", "+\t\t\t\t\t\"\t\tx.<Exception>bar(null);\\n\" +", "+\t\t\t\t\t\"\t\t\\n\" +", "+\t\t\t\t\t\"\t\tclass R implements Runnable {\\n\" +", "+\t\t\t\t\t\"\t\t\tpublic void run() {\\n\" +", "+\t\t\t\t\t\"\t\t\t}\\n\" +", "+\t\t\t\t\t\"\t\t}\\n\" +", "+\t\t\t\t\t\"\t\tX<R> xr = new X<R>(){  \\n\" +", "+\t\t\t\t\t\"\t\t\tpublic <T> T bar(T t) { \\n\" +", "+\t\t\t\t\t\"\t\t\t\treturn t; \\n\" +", "+\t\t\t\t\t\"\t\t\t}\\n\" +", "+\t\t\t\t\t\"\t\t};\\n\" +", "+\t\t\t\t\t\"\t\tIOException e = xr.bar(new IOException());\\n\" +", "+\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\"}\\n\"", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tpublic abstract <T extends Exception> T bar(T t);\\n\" + ", "+\t\t\t\t\"\t                 ^\\n\" + ", "+\t\t\t\t\"The type parameter T is hiding the type T\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tstatic void foo(X x) {\\n\" + ", "+\t\t\t\t\"\t                ^\\n\" + ", "+\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tx.<Exception>bar(null);\\n\" + ", "+\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: The method bar(Exception) belongs to the raw type X. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\t\"\tX<R> xr = new X<R>(){  \\n\" + ", "+\t\t\t\t\"\t              ^^^^^^\\n\" + ", "+\t\t\t\t\"The type new X<R>(){} must implement the inherited abstract method X<R>.bar(T)\\n\" + ", "+\t\t\t\t\"----------\\n\");\t\t"]}], "num": 45721}
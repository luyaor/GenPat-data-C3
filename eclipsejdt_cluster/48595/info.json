{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e097daf1968e7682a00ca7b6a611b2c3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d3276674ec0884e3a29b357a35b180d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "9dbcebbcaf11825267cb12e7ee6eb7bd73431114", "commitAfterChange": "f7b0e495847f4cba5d393348688e14a6dd333c0e", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 73, "signatureBeforeChange": "  \tprotected int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments)", "signatureAfterChange": "  \tprotected int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments)", "diff": ["-\t\tint lastIndex = argLength;", "+", "+\t\tLookupEnvironment env = environment();", "+\t\tif (env.options.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\tif (paramLength != argLength)", "+\t\t\t\treturn NOT_COMPATIBLE;", "+\t\t\tfor (int i = 0; i < argLength; i++) {", "+\t\t\t\tTypeBinding param = parameters[i];", "+\t\t\t\tTypeBinding arg = arguments[i];", "+\t\t\t\tif (arg != param && !arg.isCompatibleWith(param))", "+\t\t\t\t\treturn NOT_COMPATIBLE;", "+\t\t\t}", "+\t\t\treturn COMPATIBLE;", "+\t\t}", "+", "+\t\tint lastIndex = argLength;", "-\t\t\t\tif (param != arg && !arg.isCompatibleWith(param)) {", "-\t\t\t\t\tif (isBoxingCompatibleWith(arg, param)) {", "-\t\t\t\t\t\tlevel = AUTOBOX_COMPATIBLE; // autoboxing support needed", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// expect X[], called with X", "+\t\t\t\tif (param != arg) {", "+\t\t\t\t\tlevel = parameterCompatibilityLevel(arg, param, env);", "+\t\t\t\t\tif (level == NOT_COMPATIBLE) {", "+\t\t\t\t\t\t// expect X[], is it called with X", "-\t\t\t\t\t\tif (!arg.isCompatibleWith(param) && !isBoxingCompatibleWith(arg, param))", "+\t\t\t\t\t\tif (parameterCompatibilityLevel(arg, param, env) == NOT_COMPATIBLE)", "-\t\t\t\t\t\tif (param != arg && !arg.isCompatibleWith(param) && !isBoxingCompatibleWith(arg, param))", "+\t\t\t\t\t\tif (param != arg && parameterCompatibilityLevel(arg, param, env) == NOT_COMPATIBLE)", "-\t\t\tif (arg != param && !arg.isCompatibleWith(param)) {", "-\t\t\t\tif (!isBoxingCompatibleWith(arg, param))", "+\t\t\tif (arg != param) {", "+\t\t\t\tint newLevel = parameterCompatibilityLevel(arg, param, env);", "+\t\t\t\tif (newLevel == NOT_COMPATIBLE)", "-\t\t\t\tlevel = AUTOBOX_COMPATIBLE; // autoboxing support needed", "+\t\t\t\tif (newLevel > level)", "+\t\t\t\t\tlevel = newLevel;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9468d08add33a8393ae553ae610b18fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "6214978e7f95991a58a94c92ca3aaa2f1fb276e7", "commitAfterChange": "e51ee3261ac6e39dfe94f9022da64a162a2b4dbc", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public MethodBinding getHighestOverridenMethod()", "signatureAfterChange": " public MethodBinding getHighestOverridenMethod(LookupEnvironment environment)", "diff": ["-public MethodBinding getHighestOverridenMethod() {", "+public MethodBinding getHighestOverridenMethod(LookupEnvironment environment) {", "+    MethodVerifier verifier = environment.methodVerifier();", "-\t\tMethodBinding superMethod = currentType.getExactMethod(this.selector, this.parameters, null);", "-\t\tif (superMethod != null) {", "-\t\t\tbestMethod = superMethod;", "+\t\tMethodBinding[] superMethods = currentType.getMethods(this.selector);", "+\t\tfor (int i = 0, length = superMethods.length; i < length; i++) {", "+\t\t\tif (verifier.doesMethodOverride(this, superMethods[i])) {", "+\t\t\t\tbestMethod = superMethods[i];", "+\t\t\t\tbreak;", "+\t\t\t}", "-\t\tMethodBinding superMethod = currentType.getExactMethod(this.selector, this.parameters, null);", "-\t\tif (superMethod != null) {", "-\t\t\tbestMethod = superMethod;", "-\t\t}\t\t", "+\t\tMethodBinding[] superMethods = currentType.getMethods(this.selector);", "+\t\tfor (int j = 0, length = superMethods.length; j < length; j++) {", "+\t\t\tMethodBinding superMethod = superMethods[j];", "+\t\t\tif (verifier.doesMethodOverride(this, superMethod)) {", "+\t\t\t\tTypeBinding bestReturnType = bestMethod.returnType;", "+\t\t\t\tif (bestReturnType == superMethod.returnType", "+\t\t\t\t\t\t|| bestMethod.returnType.findSuperTypeOriginatingFrom(superMethod.returnType) != null) {", "+\t\t\t\t\tbestMethod = superMethod;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}"]}], "num": 48595}
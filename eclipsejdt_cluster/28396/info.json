{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "edba0f93526aca5967e10b118684fae7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a76e21e22b71d253c5f87116e1fbc3a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "cc14d854a3fa69314da90ab7678179e0d094cf79", "commitAfterChange": "6af4efbab58f035254265067f1eb9b624da61900", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " protected void consumeCastExpressionWithNameArray()", "signatureAfterChange": " protected void consumeCastExpressionWithNameArray()", "diff": ["-\t", "-\t// handle type arguments", "-\tpushOnGenericsLengthStack(0);", "-\tpushOnGenericsIdentifiersLengthStack(identifierLengthStack[identifierLengthPtr]);", "-\t", "-\texpressionStack[expressionPtr] = cast = new CastExpression(exp = expressionStack[expressionPtr], castType = getTypeReference(intStack[intPtr--]));", "+\t\t", "+\texpressionPtr--;", "+\texpressionLengthPtr--;", "+\texpressionStack[expressionPtr] = cast = new CastExpression(exp = expressionStack[expressionPtr+1], castType = this.expressionStack[this.expressionPtr]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7159e07cbae2da02fa1ccfd614da345", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " protected void consumeCastExpression()", "signatureAfterChange": " protected void consumeCastExpression()", "diff": ["-\t//intStack : posOfLeftParen dim posOfRightParen", "+\t//this.intStack : posOfLeftParen dim posOfRightParen", "-\tint end = intStack[intPtr--];", "-\texpressionStack[expressionPtr] = cast = new CastExpression(exp = expressionStack[expressionPtr], castType = getTypeReference(intStack[intPtr--]));", "+\tint end = this.intStack[this.intPtr--];", "+\tthis.expressionStack[this.expressionPtr] = cast = new CastExpression(exp = this.expressionStack[this.expressionPtr], castType = getTypeReference(this.intStack[this.intPtr--]));", "-\tcastType.sourceStart = (cast.sourceStart = intStack[intPtr--]) + 1;", "+\tcastType.sourceStart = (cast.sourceStart = this.intStack[this.intPtr--]) + 1;"]}], "num": 28396}
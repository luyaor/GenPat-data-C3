{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8732546671e9ce3c772af0b7ab2e28f7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2c9fba6e7031476092a2e2612ef3162", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "7c88f2dadd58695e598a3974e188a04cef737b59", "commitAfterChange": "2b2558e135d8cf28881c72150997538d00c643b3", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tprivate int generateRuntimeAnnotations(final Annotation[] annotations)", "signatureAfterChange": " \tprivate int generateRuntimeAnnotations(final Annotation[] annotations)", "diff": ["-\t\tint annotationAttributeOffset = contentsOffset;", "-\t\tif (contentsOffset + 8 >= contents.length) {", "-\t\t\tresizeContents(8);", "-\t\t}", "-\t\tint runtimeInvisibleAnnotationsAttributeNameIndex =", "-\t\t\tconstantPool.literalIndex(AttributeNamesConstants.RuntimeInvisibleAnnotationsName);", "-\t\tcontents[contentsOffset++] = (byte) (runtimeInvisibleAnnotationsAttributeNameIndex >> 8);", "-\t\tcontents[contentsOffset++] = (byte) runtimeInvisibleAnnotationsAttributeNameIndex;", "-\t\tint attributeLengthOffset = contentsOffset;", "-\t\tcontentsOffset += 4; // leave space for the attribute length", "-", "-\t\tint annotationsLengthOffset = contentsOffset;", "-\t\tcontentsOffset += 2; // leave space for the annotations length", "-\t\tint sourceAnnotationsCounter = 0;", "+\t\t", "-\t\t\t\tint currentOffset = this.contentsOffset;", "-\t\t\t\tgenerateAnnotation(annotation, currentOffset);", "-\t\t\t\tif (currentOffset != this.contentsOffset) {", "-\t\t\t\t\tinvisibleAnnotationsCounter++;", "-\t\t\t\t}", "+\t\t\t\tinvisibleAnnotationsCounter++;", "-\t\t\t} else {", "-\t\t\t\t// source annotation", "-\t\t\t\tsourceAnnotationsCounter++;", "-\t\t", "+", "+\t\t\tint annotationAttributeOffset = contentsOffset;", "+\t\t\tif (contentsOffset + 10 >= contents.length) {", "+\t\t\t\tresizeContents(10);", "+\t\t\t}", "+\t\t\tint runtimeInvisibleAnnotationsAttributeNameIndex =", "+\t\t\t\tconstantPool.literalIndex(AttributeNamesConstants.RuntimeInvisibleAnnotationsName);", "+\t\t\tcontents[contentsOffset++] = (byte) (runtimeInvisibleAnnotationsAttributeNameIndex >> 8);", "+\t\t\tcontents[contentsOffset++] = (byte) runtimeInvisibleAnnotationsAttributeNameIndex;", "+\t\t\tint attributeLengthOffset = contentsOffset;", "+\t\t\tcontentsOffset += 4; // leave space for the attribute length", "+\t", "+\t\t\tint annotationsLengthOffset = contentsOffset;", "+\t\t\tcontentsOffset += 2; // leave space for the annotations length", "+\t\t", "+\t\t\tloop: for (int i = 0; i < length; i++) {", "+\t\t\t\tif (invisibleAnnotationsCounter == 0) break loop;", "+\t\t\t\tAnnotation annotation = annotations[i];", "+\t\t\t\tif (isRuntimeInvisible(annotation)) {", "+\t\t\t\t\tgenerateAnnotation(annotation, annotationAttributeOffset);", "+\t\t\t\t\tinvisibleAnnotationsCounter--;", "+\t\t\t\t\tif (this.contentsOffset == annotationAttributeOffset) {", "+\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (contentsOffset != annotationAttributeOffset) {", "+\t\t\t\tint attributeLength = contentsOffset - attributeLengthOffset - 4;", "+\t\t\t\tcontents[attributeLengthOffset++] = (byte) (attributeLength >> 24);", "+\t\t\t\tcontents[attributeLengthOffset++] = (byte) (attributeLength >> 16);", "+\t\t\t\tcontents[attributeLengthOffset++] = (byte) (attributeLength >> 8);", "+\t\t\t\tcontents[attributeLengthOffset++] = (byte) attributeLength;\t\t\t", "+\t\t\t\tattributesNumber++;", "+\t\t\t} else {\t\t", "+\t\t\t\tcontentsOffset = annotationAttributeOffset;", "+\t\t\t}", "+\t\t}", "+\t", "+\t\tif (visibleAnnotationsCounter != 0) {", "+\t\t\tint annotationAttributeOffset = contentsOffset;", "+\t\t\tif (contentsOffset + 10 >= contents.length) {", "+\t\t\t\tresizeContents(10);", "+\t\t\t}", "+\t\t\tint runtimeVisibleAnnotationsAttributeNameIndex =", "+\t\t\t\tconstantPool.literalIndex(AttributeNamesConstants.RuntimeVisibleAnnotationsName);", "+\t\t\tcontents[contentsOffset++] = (byte) (runtimeVisibleAnnotationsAttributeNameIndex >> 8);", "+\t\t\tcontents[contentsOffset++] = (byte) runtimeVisibleAnnotationsAttributeNameIndex;", "+\t\t\tint attributeLengthOffset = contentsOffset;", "+\t\t\tcontentsOffset += 4; // leave space for the attribute length", "+\t", "+\t\t\tint annotationsLengthOffset = contentsOffset;", "+\t\t\tcontentsOffset += 2; // leave space for the annotations length", "+\t\t", "+\t\t\tcontents[annotationsLengthOffset++] = (byte) (visibleAnnotationsCounter >> 8);", "+\t\t\tcontents[annotationsLengthOffset++] = (byte) visibleAnnotationsCounter;", "+", "+\t\t\tloop: for (int i = 0; i < length; i++) {", "+\t\t\t\tif (visibleAnnotationsCounter == 0) break loop;", "+\t\t\t\tAnnotation annotation = annotations[i];", "+\t\t\t\tif (isRuntimeVisible(annotation)) {", "+\t\t\t\t\tvisibleAnnotationsCounter--;", "+\t\t\t\t\tgenerateAnnotation(annotation, annotationAttributeOffset);", "+\t\t\t\t\tif (this.contentsOffset == annotationAttributeOffset) {", "+\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\t\t} else {", "-\t\t\tcontentsOffset = annotationAttributeOffset;", "-\t\t", "-\t\tif (visibleAnnotationsCounter != 0) {", "-\t\t\tannotationAttributeOffset = contentsOffset;", "-\t\t\tif (contentsOffset + 8 >= contents.length) {", "-\t\t\t\tresizeContents(8);", "+\t\treturn attributesNumber;", "+\t}", "-\t\t\tint runtimeVisibleAnnotationsAttributeNameIndex =", "-\t\t\t\tconstantPool.literalIndex(AttributeNamesConstants.RuntimeVisibleAnnotationsName);", "-\t\t\tcontents[contentsOffset++] = (byte) (runtimeVisibleAnnotationsAttributeNameIndex >> 8);", "-\t\t\tcontents[contentsOffset++] = (byte) runtimeVisibleAnnotationsAttributeNameIndex;", "-\t\t\tattributeLengthOffset = contentsOffset;", "-\t\t\tannotationsLengthOffset = contentsOffset;", "-\t\t\tcontentsOffset += 2; // leave space for the annotations length", "-\t\t\tint counter = 0;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tAnnotation annotation = annotations[i];", "-\t\t\t\tif (isRuntimeVisible(annotation)) {", "-\t\t\t\t\tint currentOffset = this.contentsOffset;", "-\t\t\t\t\tgenerateAnnotation(annotation, currentOffset);", "-\t\t\t\t\tif (currentOffset != this.contentsOffset) {", "-\t\t\t\t\t\tcounter++;", "-\t\t\t\t\t}", "-\t\t\t\t\tvisibleAnnotationsCounter--;", "-\t\t\t\t\tif (visibleAnnotationsCounter == 0) {", "-\t\t\t\t\t\tbreak;", "-\t\t\tif (counter != 0) {", "-\t\t\t\tcontents[annotationsLengthOffset++] = (byte) (counter >> 8);", "-\t\t\t\tcontents[annotationsLengthOffset++] = (byte) counter;", "-\t", "-\t\t\t\tif (contentsOffset != annotationAttributeOffset) {", "-\t\t\t\t\tint attributeLength = contentsOffset - attributeLengthOffset - 4;", "-\t\t\t\t\tcontents[attributeLengthOffset++] = (byte) (attributeLength >> 24);", "-\t\t\t\t\tcontents[attributeLengthOffset++] = (byte) (attributeLength >> 16);", "-\t\t\t\t\tcontents[attributeLengthOffset++] = (byte) (attributeLength >> 8);", "-\t\t\t\t\tcontents[attributeLengthOffset++] = (byte) attributeLength;\t\t\t", "-\t\t\t\t\tattributesNumber++;", "-\t\t\t\t} else {", "-\t\t\t\t\tcontentsOffset = annotationAttributeOffset;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb39dc24a34ad0bd1dc904b623adcdb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "1b80cae94595518122618b458eed60915f76d171", "commitAfterChange": "92d6141bb346285ff13c588faa5a059cb9f83b3d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["-\t\tBlockScope tryScope = new BlockScope(scope);", "+\t\tBlockScope tryScope = new BlockScope(this.scope);", "-\t\tif (finallyBlock != null) {", "-\t\t\tif (finallyBlock.isEmptyBlock()) {", "-\t\t\t\tif ((finallyBlock.bits & UndocumentedEmptyBlock) != 0) {", "-\t\t\t\t\tscope.problemReporter().undocumentedEmptyBlock(finallyBlock.sourceStart, finallyBlock.sourceEnd);", "+\t\tif (this.finallyBlock != null) {", "+\t\t\tif (this.finallyBlock.isEmptyBlock()) {", "+\t\t\t\tif ((this.finallyBlock.bits & ASTNode.UndocumentedEmptyBlock) != 0) {", "+\t\t\t\t\tthis.scope.problemReporter().undocumentedEmptyBlock(this.finallyBlock.sourceStart, this.finallyBlock.sourceEnd);", "-\t\t\t\tfinallyScope = new BlockScope(scope, false); // don't add it yet to parent scope", "+\t\t\t\tfinallyScope = new BlockScope(this.scope, false); // don't add it yet to parent scope", "-\t\t\t\tMethodScope methodScope = scope.methodScope();", "+\t\t\t\tMethodScope methodScope = this.scope.methodScope();", "-\t\t\t\t\t\tnew LocalVariableBinding(SecretReturnName, upperScope.getJavaLangObject(), ClassFileConstants.AccDefault, false);", "-\t\t\t\t\tfinallyScope.addLocalVariable(returnAddressVariable);", "+\t\t\t\t\t\tnew LocalVariableBinding(TryStatement.SecretReturnName, upperScope.getJavaLangObject(), ClassFileConstants.AccDefault, false);", "+\t\t\t\t\tfinallyScope.addLocalVariable(this.returnAddressVariable);", "-\t\t\t\t\tnew LocalVariableBinding(SecretAnyHandlerName, scope.getJavaLangThrowable(), ClassFileConstants.AccDefault, false);", "+\t\t\t\t\tnew LocalVariableBinding(TryStatement.SecretAnyHandlerName, this.scope.getJavaLangThrowable(), ClassFileConstants.AccDefault, false);", "-\t\t\t\t\t\tif (methodReturnType.id != T_void) {", "+\t\t\t\t\t\tif (methodReturnType.id != TypeIds.T_void) {", "-\t\t\t\t\t\t\t\t\tSecretLocalDeclarationName,", "+\t\t\t\t\t\t\t\t\tTryStatement.SecretLocalDeclarationName,", "-\t\t\t\tfinallyBlock.resolveUsing(finallyScope);", "+\t\t\t\tthis.finallyBlock.resolveUsing(finallyScope);", "-\t\t\t\tfinallyScope.shiftScopes = new BlockScope[catchArguments == null ? 1 : catchArguments.length+1];", "+\t\t\t\tfinallyScope.shiftScopes = new BlockScope[this.catchArguments == null ? 1 : this.catchArguments.length+1];", "-\t\t\t\tBlockScope catchScope = new BlockScope(scope);", "+\t\t\t\tBlockScope catchScope = new BlockScope(this.scope);", "-\t\t\t\tif ((argumentTypes[i] = catchArguments[i].resolveForCatch(catchScope)) == null) {", "+\t\t\t\tif ((argumentTypes[i] = this.catchArguments[i].resolveForCatch(catchScope)) == null) {", "-\t\t\t\tcatchBlocks[i].resolveUsing(catchScope);", "+\t\t\t\tthis.catchBlocks[i].resolveUsing(catchScope);", "-\t\t\t\tcaughtExceptionTypes[i] = (ReferenceBinding) argumentTypes[i];", "+\t\t\t\tthis.caughtExceptionTypes[i] = (ReferenceBinding) argumentTypes[i];", "-\t\t\t\t\tif (caughtExceptionTypes[i].isCompatibleWith(argumentTypes[j])) {", "-\t\t\t\t\t\tscope.problemReporter().wrongSequenceOfExceptionTypesError(this, caughtExceptionTypes[i], i, argumentTypes[j]);", "+\t\t\t\t\tif (this.caughtExceptionTypes[i].isCompatibleWith(argumentTypes[j])) {", "+\t\t\t\t\t\tthis.scope.problemReporter().wrongSequenceOfExceptionTypesError(this, this.caughtExceptionTypes[i], i, argumentTypes[j]);", "-\t\t\tcaughtExceptionTypes = new ReferenceBinding[0];", "+\t\t\tthis.caughtExceptionTypes = new ReferenceBinding[0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fce3657611e4ddfcd8d376ec27e24d87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "f6209e22cd3c6ef55e09617e84e4b61166bfdc34", "commitAfterChange": "e3b61331087882f47093048d6298d97548b68615", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic String toString(int tab)", "signatureAfterChange": "  \tpublic StringBuffer printStatement(int indent, StringBuffer output)", "diff": ["+\tpublic StringBuffer printStatement(int indent, StringBuffer output) {", "+", "+\t\tprintIndent(indent, output);", "+\t\tif (qualification != null) qualification.printExpression(0, output).append('.');", "+\t\tif (accessMode == This) {", "+\t\t\toutput.append(\"this(\"); //$NON-NLS-1$", "+\t\t} else {", "+\t\t\toutput.append(\"super(\"); //$NON-NLS-1$", "+\t\t}", "+\t\tif (arguments != null) {", "+\t\t\tfor (int i = 0; i < arguments.length; i++) {", "+\t\t\t\tif (i > 0) output.append(\", \"); //$NON-NLS-1$", "+\t\t\t\targuments[i].printExpression(0, output);", "+\t\t\t}", "+\t\t}", "+\t\treturn output.append(\");\"); //$NON-NLS-1$", "+\t}", "-", "-\tpublic String toString(int tab) {", "-", "-\t\tString s = tabString(tab);", "-\t\tif (qualification != null)", "-\t\t\ts = s + qualification.toStringExpression() + \".\"; //$NON-NLS-1$", "-\t\tif (accessMode == This) {", "-\t\t\ts = s + \"this(\"; //$NON-NLS-1$", "-\t\t} else {", "-\t\t\ts = s + \"super(\"; //$NON-NLS-1$", "-\t\t}", "-\t\tif (arguments != null)", "-\t\t\tfor (int i = 0; i < arguments.length; i++) {", "-\t\t\t\ts = s + arguments[i].toStringExpression();", "-\t\t\t\tif (i != arguments.length - 1)", "-\t\t\t\t\ts = s + \", \"; //$NON-NLS-1$", "-\t\t\t}", "-\t\ts = s + \")\"; //$NON-NLS-1$", "-\t\treturn s;"]}], "num": 67781}
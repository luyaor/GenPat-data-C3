{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28dd539a892f62c3060d7b2a0e3c2a02", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17e97c2b96060f32d5ceebd7627a572a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "a4c87b85ad074ebb6b6f76117f9e2f37a165a84d", "commitAfterChange": "4464f32c1c4717c63fedbced19c6da0d541eee99", "methodNumberBeforeChange": 613, "methodNumberAfterChange": 613, "signatureBeforeChange": " public void testBug286379c() throws CoreException", "signatureAfterChange": " public void testBug286379c() throws CoreException", "diff": ["-\tSystem.out.println(\"Forbidden reference at the start of the test is \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\tSystem.out.println(\"================================================================================\");", "+\tSystem.out.println(\"Starting test JavaSearchBugTests.testBug286379c()...\");", "+\tSystem.out.println(\"\t- Options at test start:\");", "+\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "+\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "+\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\tSystem.out.println(\"Forbidden reference before first exit \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t\tSystem.out.println(\"\t- Options before first exit:\");", "+\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "+\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "+\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\tSystem.out.println(\"Forbidden reference after first restart \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t\tSystem.out.println(\"\t- Options after first restart:\");", "+\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "+\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "+\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\tSystem.out.println(\"Forbidden reference before second exit \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t\tSystem.out.println(\"\t- Options before second exit:\");", "+\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "+\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "+\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\tSystem.out.println(\"Forbidden reference after second restart \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t\tSystem.out.println(\"\t- Options after second restart:\");", "+\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "+\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "+\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t\tSystem.out.println(\"\t- Options after search:\");", "+\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "+\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "+\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t\tSystem.out.println(\"\t- Options at test end:\");", "+\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "+\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "+\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t\tSystem.out.println(\"================================================================================\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78549818ab66c10474ba2b1d48b63697", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTestsRequestor.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void acceptType(char[] packageName, char[] typeName, char[] completionName, int completionStart, int completionEnd, int relevance)", "signatureAfterChange": " \tpublic void accept(CompletionProposal proposal)", "diff": ["- */", "-public void acceptType(char[] packageName, char[] typeName, char[] completionName, int completionStart, int completionEnd, int relevance) {", "-\tfElements.addElement(new String(typeName));", "-\tfCompletions.addElement(new String(completionName));", "-\tfRelevances.addElement(String.valueOf(relevance));", "-\tfCompletionStart.addElement(String.valueOf(completionStart));", "-\tfCompletionEnd.addElement(String.valueOf(completionEnd));", "-\tif (fDebug)", "-\t\tSystem.out.println(\"type \" + new String(typeName));", "-}", "+\t}", "+\tpublic void accept(CompletionProposal proposal) {", "+\t\tchar[] typeName = null;", "+\t\tswitch(proposal.getKind()) {", "+\t\t\tcase CompletionProposal.ANONYMOUS_CLASS_DECLARATION :", "+\t\t\t\ttypeName = Signature.getSignatureSimpleName(proposal.getDeclarationSignature());", "+\t\t\t\tfElements.addElement(new String(typeName));", "+\t\t\t\tthis.acceptCommon(proposal);", "+\t\t\t\tif (fDebug)", "+\t\t\t\t\tSystem.out.println(\"anonymous type \" + new String(typeName));", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase CompletionProposal.TYPE_REF :", "+\t\t\t\tif((proposal.getFlags() & Flags.AccEnum) != 0) {", "+\t\t\t\t\t", "+\t\t\t\t} else if((proposal.getFlags() & Flags.AccInterface) != 0) {", "+\t\t\t\t\ttypeName = Signature.getSignatureSimpleName(proposal.getSignature());", "+\t\t\t\t\tfElements.addElement(new String(typeName));", "+\t\t\t\t\tthis.acceptCommon(proposal);", "+\t\t\t\t\tif (fDebug)", "+\t\t\t\t\t\tSystem.out.println(\"Interface \" + new String(typeName));", "+\t\t\t\t} else {", "+\t\t\t\t\ttypeName = Signature.getSignatureSimpleName(proposal.getSignature());", "+\t\t\t\t\tfElements.addElement(new String(typeName));", "+\t\t\t\t\tthis.acceptCommon(proposal);", "+\t\t\t\t\tif (fDebug) {", "+\t\t\t\t\t\tif(Signature.getTypeSignatureKind(proposal.getSignature()) == Signature.TYPE_VARIABLE_SIGNATURE) {", "+\t\t\t\t\t\t\tSystem.out.println(\"type parameter \" + new String(typeName));", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tSystem.out.println(\"Class \" + new String(typeName));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase CompletionProposal.FIELD_REF :", "+\t\t\t\tfElements.addElement(new String(proposal.getName()));", "+\t\t\t\tthis.acceptCommon(proposal);", "+\t\t\t\tif (fDebug)", "+\t\t\t\t\tSystem.out.println(\"Field \" + new String(proposal.getName()));", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase CompletionProposal.KEYWORD:", "+\t\t\t\tfElements.addElement(new String(proposal.getName()));", "+\t\t\t\tthis.acceptCommon(proposal);", "+\t\t\t\tif (fDebug)", "+\t\t\t\t\tSystem.out.println(\"Keyword \" + new String(proposal.getName()));", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase CompletionProposal.LABEL_REF:", "+\t\t\t\tfElements.addElement(new String(proposal.getName()));", "+\t\t\t\tthis.acceptCommon(proposal);", "+\t\t\t\tif (fDebug)", "+\t\t\t\t\tSystem.out.println(\"Label \" + new String(proposal.getName()));", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase CompletionProposal.LOCAL_VARIABLE_REF:", "+\t\t\t\tfElements.addElement(new String(proposal.getName()));", "+\t\t\t\tthis.acceptCommon(proposal);", "+\t\t\t\tif (fDebug)", "+\t\t\t\t\tSystem.out.println(\"Local variable \" + new String(proposal.getName()));", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase CompletionProposal.METHOD_REF:", "+\t\t\t\tfElements.addElement(new String(proposal.getName()));", "+\t\t\t\tthis.acceptCommon(proposal);", "+\t\t\t\tif (fDebug)", "+\t\t\t\t\tSystem.out.println(\"method \" + new String(proposal.getName()));", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase CompletionProposal.METHOD_DECLARATION:", "+\t\t\t\tfElements.addElement(new String(proposal.getName()));", "+\t\t\t\tthis.acceptCommon(proposal);", "+\t\t\t\tif (fDebug)", "+\t\t\t\t\tSystem.out.println(\"method declaration \" + new String(proposal.getName()));", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase CompletionProposal.PACKAGE_REF:", "+\t\t\t\tfElements.addElement(new String(proposal.getDeclarationSignature()));", "+\t\t\t\tthis.acceptCommon(proposal);", "+\t\t\t\tif (fDebug)", "+\t\t\t\t\tSystem.out.println(\"package \" + new String(proposal.getDeclarationSignature()));", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase CompletionProposal.VARIABLE_DECLARATION:", "+\t\t\t\tfElements.addElement(new String(proposal.getName()));", "+\t\t\t\tthis.acceptCommon(proposal);", "+\t\t\t\tif (fDebug)", "+\t\t\t\t\tSystem.out.println(\"variable name \" + new String(proposal.getName()));", "+\t\t\t\tbreak;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4dc44fe41d6c2dcbd280efd5bc4d02a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "416bf44f74a0795b6b6bec20a356ce5017d1b9d5", "commitAfterChange": "724250dda70a6e8357696d4ee32f28e4f44952f6", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 114, "signatureBeforeChange": " public void generateBoxingConversion(int unboxedTypeID)", "signatureAfterChange": " public void generateBoxingConversion(int unboxedTypeID)", "diff": ["-\tswitch (unboxedTypeID) {", "-\t\tcase T_byte :", "-\t\t\t// invokestatic: Byte.valueOf(byte)", "-\t\t\tthis.invoke(", "-\t\t\t\tOPC_invokestatic,", "-\t\t\t\t1, // argCount", "-\t\t\t\t1, // return type size", "-\t\t\t\tConstantPool.JavaLangByteConstantPoolName,", "-\t\t\t\tConstantPool.ValueOf,", "-\t\t\t\tConstantPool.byteByteSignature);", "-\t\t\tbreak;", "-\t\tcase T_short :", "-\t\t\t// invokestatic: Short.valueOf(short)", "-\t\t\tthis.invoke(", "-\t\t\t\tOPC_invokestatic,", "-\t\t\t\t1, // argCount", "-\t\t\t\t1, // return type size", "-\t\t\t\tConstantPool.JavaLangShortConstantPoolName,", "-\t\t\t\tConstantPool.ValueOf,", "-\t\t\t\tConstantPool.shortShortSignature);", "-\t\t\tbreak;", "-\t\tcase T_char :", "-\t\t\t// invokestatic: Character.valueOf(char)", "-\t\t\tthis.invoke(", "-\t\t\t\tOPC_invokestatic,", "-\t\t\t\t1, // argCount", "-\t\t\t\t1, // return type size", "-\t\t\t\tConstantPool.JavaLangCharacterConstantPoolName,", "-\t\t\t\tConstantPool.ValueOf,", "-\t\t\t\tConstantPool.charCharacterSignature);", "-\t\t\tbreak;", "-\t\tcase T_int :", "-\t\t\t// invokestatic: Integer.valueOf(int)", "-\t\t\tthis.invoke(", "-\t\t\t\tOPC_invokestatic,", "-\t\t\t\t1, // argCount", "-\t\t\t\t1, // return type size", "-\t\t\t\tConstantPool.JavaLangIntegerConstantPoolName,", "-\t\t\t\tConstantPool.ValueOf,", "-\t\t\t\tConstantPool.IntIntegerSignature);", "-\t\t\tbreak;", "-\t\tcase T_long :", "-\t\t\t// invokestatic: Long.valueOf(long)", "-\t\t\tthis.invoke(", "-\t\t\t\tOPC_invokestatic,", "-\t\t\t\t2, // argCount", "-\t\t\t\t1, // return type size", "-\t\t\t\tConstantPool.JavaLangLongConstantPoolName,", "-\t\t\t\tConstantPool.ValueOf,", "-\t\t\t\tConstantPool.longLongSignature);", "-\t\t\tbreak;", "-\t\tcase T_float :", "-\t\t\t// invokestatic: Float.valueOf(float)", "-\t\t\tthis.invoke(", "-\t\t\t\tOPC_invokestatic,", "-\t\t\t\t1, // argCount", "-\t\t\t\t1, // return type size", "-\t\t\t\tConstantPool.JavaLangFloatConstantPoolName,", "-\t\t\t\tConstantPool.ValueOf,", "-\t\t\t\tConstantPool.floatFloatSignature);", "-\t\t\tbreak;", "-\t\tcase T_double :", "-\t\t\t// invokestatic: Double.valueOf(double)", "-\t\t\tthis.invoke(", "-\t\t\t\tOPC_invokestatic,", "-\t\t\t\t2, // argCount", "-\t\t\t\t1, // return type size", "-\t\t\t\tConstantPool.JavaLangDoubleConstantPoolName,", "-\t\t\t\tConstantPool.ValueOf,", "-\t\t\t\tConstantPool.doubleDoubleSignature);", "-\t\t\tbreak;", "-\t\tcase T_boolean :", "-\t\t\t// invokestatic: Boolean.valueOf(boolean)", "-\t\t\tthis.invoke(", "-\t\t\t\tOPC_invokestatic,", "-\t\t\t\t1, // argCount", "-\t\t\t\t1, // return type size", "-\t\t\t\tConstantPool.JavaLangBooleanConstantPoolName,", "-\t\t\t\tConstantPool.ValueOf,", "-\t\t\t\tConstantPool.booleanBooleanSignature);", "-\t}", "+    switch (unboxedTypeID) {", "+        case T_byte :", "+            if (this.targetLevel >= ClassFileConstants.JDK1_5) {", "+    \t\t\tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Byte.valueOf(byte)\"); //$NON-NLS-1$", "+               // invokestatic: Byte.valueOf(byte)", "+                this.invoke(", "+                    OPC_invokestatic,", "+                    1, // argCount", "+                    1, // return type size", "+                    ConstantPool.JavaLangByteConstantPoolName,", "+                    ConstantPool.ValueOf,", "+                    ConstantPool.byteByteSignature);", "+            } else {", "+               // new Byte( byte )", "+    \t\t\tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Byte(byte)\"); //$NON-NLS-1$", "+                newWrapperFor(unboxedTypeID);", "+                dup_x1();", "+                swap();", "+                this.invoke(", "+                    OPC_invokespecial,", "+                    1, // argCount", "+                    0, // return type size", "+                    ConstantPool.JavaLangByteConstantPoolName,", "+                    ConstantPool.Init,", "+                    ConstantPool.ByteConstrSignature);", "+            }       ", "+            break;", "+        case T_short :", "+            if ( this.targetLevel >= ClassFileConstants.JDK1_5 ) {", "+                // invokestatic: Short.valueOf(short)", "+    \t\t\tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Short.valueOf(short)\"); //$NON-NLS-1$", "+                this.invoke(", "+                    OPC_invokestatic,", "+                    1, // argCount", "+                    1, // return type size", "+                    ConstantPool.JavaLangShortConstantPoolName,", "+                    ConstantPool.ValueOf,", "+                    ConstantPool.shortShortSignature);", "+            } else {", "+                // new Short(short)", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Short(short)\"); //$NON-NLS-1$", "+            \tnewWrapperFor(unboxedTypeID);                ", "+                dup_x1();", "+                swap();             ", "+                this.invoke(", "+                    OPC_invokespecial,", "+                    1, // argCount", "+                    0, // return type size", "+                    ConstantPool.JavaLangShortConstantPoolName,", "+                    ConstantPool.Init,", "+                    ConstantPool.ShortConstrSignature);     ", "+            }", "+            break;", "+        case T_char :", "+            if ( this.targetLevel >= ClassFileConstants.JDK1_5 ) {", "+                // invokestatic: Character.valueOf(char)", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Character.valueOf(char)\"); //$NON-NLS-1$", "+                this.invoke(", "+                    OPC_invokestatic,", "+                    1, // argCount", "+                    1, // return type size", "+                    ConstantPool.JavaLangCharacterConstantPoolName,", "+                    ConstantPool.ValueOf,", "+                    ConstantPool.charCharacterSignature);", "+            } else {", "+                // new Char( char )", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Character(char)\"); //$NON-NLS-1$", "+                newWrapperFor(unboxedTypeID);", "+                dup_x1();", "+                swap();", "+                this.invoke(", "+                    OPC_invokespecial,", "+                    1, // argCount", "+                    0, // return type size", "+                    ConstantPool.JavaLangCharacterConstantPoolName,", "+                    ConstantPool.Init,", "+                    ConstantPool.CharConstrSignature);", "+            }       ", "+            break;", "+        case T_int :             ", "+            if (this.targetLevel >= ClassFileConstants.JDK1_5) {", "+                // invokestatic: Integer.valueOf(int)", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Integer.valueOf(int)\"); //$NON-NLS-1$", "+                this.invoke(", "+                    OPC_invokestatic,", "+                    1, // argCount", "+                    1, // return type size", "+                    ConstantPool.JavaLangIntegerConstantPoolName,", "+                    ConstantPool.ValueOf,", "+                    ConstantPool.IntIntegerSignature);", "+            } else {", "+                // new Integer(int)", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Integer(int)\"); //$NON-NLS-1$", "+                newWrapperFor(unboxedTypeID);", "+                dup_x1();", "+                swap();             ", "+                this.invoke(", "+                    OPC_invokespecial,", "+                    1, // argCount", "+                    0, // return type size", "+                    ConstantPool.JavaLangIntegerConstantPoolName,", "+                    ConstantPool.Init,", "+                    ConstantPool.IntConstrSignature);", "+            }", "+            break;", "+        case T_long :", "+            if (this.targetLevel >= ClassFileConstants.JDK1_5) { ", "+                // invokestatic: Long.valueOf(long)", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Long.valueOf(long)\"); //$NON-NLS-1$", "+                this.invoke(", "+                    OPC_invokestatic,", "+                    2, // argCount", "+                    1, // return type size", "+                    ConstantPool.JavaLangLongConstantPoolName,", "+                    ConstantPool.ValueOf,", "+                    ConstantPool.longLongSignature);", "+            } else {", "+                // new Long( long )", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Long(long)\"); //$NON-NLS-1$", "+                newWrapperFor(unboxedTypeID);", "+                dup_x2();", "+                dup_x2();", "+                pop();", "+                this.invoke(", "+                    OPC_invokespecial,", "+                    2, // argCount", "+                    0, // return type size", "+                    ConstantPool.JavaLangLongConstantPoolName,", "+                    ConstantPool.Init,", "+                    ConstantPool.LongConstrSignature);", "+            }                   ", "+            break;", "+        case T_float :", "+            if ( this.targetLevel >= ClassFileConstants.JDK1_5 ) {", "+                // invokestatic: Float.valueOf(float)", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Float.valueOf(float)\"); //$NON-NLS-1$", "+                this.invoke(", "+                    OPC_invokestatic,", "+                    1, // argCount", "+                    1, // return type size", "+                    ConstantPool.JavaLangFloatConstantPoolName,", "+                    ConstantPool.ValueOf,", "+                    ConstantPool.floatFloatSignature);", "+            } else {", "+                // new Float(float)", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Float(float)\"); //$NON-NLS-1$", "+                newWrapperFor(unboxedTypeID);", "+                dup_x1();", "+                swap();             ", "+                this.invoke(", "+                    OPC_invokespecial,", "+                    1, // argCount", "+                    0, // return type size", "+                    ConstantPool.JavaLangFloatConstantPoolName,", "+                    ConstantPool.Init,", "+                    ConstantPool.FloatConstrSignature);", "+            }       ", "+            break;", "+        case T_double :", "+            if ( this.targetLevel >= ClassFileConstants.JDK1_5 ) { ", "+                // invokestatic: Double.valueOf(double)", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Double.valueOf(double)\"); //$NON-NLS-1$", "+                this.invoke(", "+                    OPC_invokestatic,", "+                    2, // argCount", "+                    1, // return type size", "+                    ConstantPool.JavaLangDoubleConstantPoolName,", "+                    ConstantPool.ValueOf,", "+                    ConstantPool.doubleDoubleSignature);", "+            } else {", "+                // new Double( double )", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Double(double)\"); //$NON-NLS-1$", "+            \tnewWrapperFor(unboxedTypeID);                ", "+                dup_x2();", "+                dup_x2();", "+                pop();", "+                ", "+                this.invoke(", "+                    OPC_invokespecial,", "+                    2, // argCount", "+                    0, // return type size", "+                    ConstantPool.JavaLangDoubleConstantPoolName,", "+                    ConstantPool.Init,", "+                    ConstantPool.DoubleConstrSignature);", "+            }       ", "+            ", "+            break;  ", "+        case T_boolean :", "+            if ( this.targetLevel >= ClassFileConstants.JDK1_5 ) {", "+                // invokestatic: Boolean.valueOf(boolean)", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Boolean.valueOf(boolean)\"); //$NON-NLS-1$", "+                this.invoke(", "+                    OPC_invokestatic,", "+                    1, // argCount", "+                    1, // return type size", "+                    ConstantPool.JavaLangBooleanConstantPoolName,", "+                    ConstantPool.ValueOf,", "+                    ConstantPool.booleanBooleanSignature);", "+            } else {", "+                // new Boolean(boolean)", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Boolean(boolean)\"); //$NON-NLS-1$", "+                newWrapperFor(unboxedTypeID);", "+                dup_x1();", "+                swap();             ", "+                this.invoke(", "+                    OPC_invokespecial,", "+                    1, // argCount", "+                    0, // return type size", "+                    ConstantPool.JavaLangBooleanConstantPoolName,", "+                    ConstantPool.Init,", "+                    ConstantPool.BooleanConstrSignature);", "+            }", "+    }"]}], "num": 514}
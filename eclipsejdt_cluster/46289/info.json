{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1fabcbfc2b0ebcc061b1cb0800fad5fd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63c4e24103e12a4fad019948ee5f40e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "d81e6de27221b2caec858658787abf55d91a925e", "commitAfterChange": "cfb9e308b9934bc0d4a17e2d4604db46f20af164", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic Object reduce(InferenceContext18 inferenceContext)", "signatureAfterChange": " \tpublic Object reduce(InferenceContext18 inferenceContext)", "diff": ["-\t\t\t\treturn new ConstraintTypeFormula(sPrime, this.right, COMPATIBLE, this.isSoft);", "+\t\t\t\treturn ConstraintTypeFormula.create(sPrime, this.right, COMPATIBLE, this.isSoft);", "-\t\t\t\treturn new ConstraintTypeFormula(this.left, tPrime, SAME, this.isSoft);", "+\t\t\t\treturn ConstraintTypeFormula.create(this.left, tPrime, SAME, this.isSoft);", "-\t\t\treturn new ConstraintTypeFormula(this.left, this.right, SUBTYPE, this.isSoft);", "+\t\t\treturn ConstraintTypeFormula.create(this.left, this.right, SUBTYPE, this.isSoft);", "-\t\t\t\t\treturn new ConstraintTypeFormula(this.left, this.right, SAME, this.isSoft);\t\t\t\t\t\t", "+\t\t\t\t\treturn ConstraintTypeFormula.create(this.left, this.right, SAME, this.isSoft);\t\t\t\t\t\t", "-\t\t\t\t\t\treturn new ConstraintTypeFormula(this.left, t.bound, SUBTYPE, this.isSoft);", "+\t\t\t\t\t\treturn ConstraintTypeFormula.create(this.left, t.bound, SUBTYPE, this.isSoft);", "-\t\t\t\t\t\t\t\treturn new ConstraintTypeFormula(inferenceContext.object, t.bound, SUBTYPE, this.isSoft);", "+\t\t\t\t\t\t\t\treturn ConstraintTypeFormula.create(inferenceContext.object, t.bound, SUBTYPE, this.isSoft);", "-\t\t\t\t\t\t\t\treturn new ConstraintTypeFormula(s.bound, t.bound, SUBTYPE, this.isSoft);", "+\t\t\t\t\t\t\t\treturn ConstraintTypeFormula.create(s.bound, t.bound, SUBTYPE, this.isSoft);", "-\t\t\t\t\t\t\t\treturn new ConstraintTypeFormula(inferenceContext.object, t.bound, SAME, this.isSoft);", "+\t\t\t\t\t\t\t\treturn ConstraintTypeFormula.create(inferenceContext.object, t.bound, SAME, this.isSoft);", "-\t\t\t\t\t\treturn new ConstraintTypeFormula(t.bound, this.left, SUBTYPE, this.isSoft);", "+\t\t\t\t\t\treturn ConstraintTypeFormula.create(t.bound, this.left, SUBTYPE, this.isSoft);", "-\t\t\t\t\t\t\treturn new ConstraintTypeFormula(t.bound, s.bound, SUBTYPE, this.isSoft);", "+\t\t\t\t\t\t\treturn ConstraintTypeFormula.create(t.bound, s.bound, SUBTYPE, this.isSoft);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d55e2994d45b924a407cfa05ae7dfad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "9506194ecd38aa227915d4452e8097fba7bd6231", "commitAfterChange": "27a13e874a8de3a8e74e5e1ab65479e9dace8b8c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic Object reduce(InferenceContext18 inferenceContext)", "signatureAfterChange": " \tpublic Object reduce(InferenceContext18 inferenceContext)", "diff": ["-\t\t\t\treturn new ConstraintTypeFormula(sPrime, this.right, COMPATIBLE);", "+\t\t\t\treturn new ConstraintTypeFormula(sPrime, this.right, COMPATIBLE, this.isSoft);", "-\t\t\t\treturn new ConstraintTypeFormula(this.left, tPrime, COMPATIBLE);", "+\t\t\t\treturn new ConstraintTypeFormula(this.left, tPrime, COMPATIBLE, this.isSoft);", "-\t\t\t\t\tif (gs != null && gs.isRawType())", "+\t\t\t\t\tif (gs != null && gs.leafComponentType().isRawType())", "-\t\t\treturn new ConstraintTypeFormula(this.left, this.right, SUBTYPE);", "+\t\t\treturn new ConstraintTypeFormula(this.left, this.right, SUBTYPE, this.isSoft);", "-\t\t\t\t\treturn new ConstraintTypeFormula(this.left, this.right, SAME);\t\t\t\t\t\t", "+\t\t\t\t\treturn new ConstraintTypeFormula(this.left, this.right, SAME, this.isSoft);\t\t\t\t\t\t", "-\t\t\t\t\t\treturn new ConstraintTypeFormula(this.left, t.bound, SUBTYPE);", "+\t\t\t\t\t\treturn new ConstraintTypeFormula(this.left, t.bound, SUBTYPE, this.isSoft);", "-\t\t\t\t\t\t\treturn new ConstraintTypeFormula(s.bound, t.bound, SUBTYPE);", "+\t\t\t\t\t\t\treturn new ConstraintTypeFormula(s.bound, t.bound, SUBTYPE, this.isSoft);", "-\t\t\t\t\t\treturn new ConstraintTypeFormula(t.bound, this.left, SUBTYPE);", "+\t\t\t\t\t\treturn new ConstraintTypeFormula(t.bound, this.left, SUBTYPE, this.isSoft);", "-\t\t\t\t\t\t\treturn new ConstraintTypeFormula(t.bound, s.bound, SUBTYPE);", "+\t\t\t\t\t\t\treturn new ConstraintTypeFormula(t.bound, s.bound, SUBTYPE, this.isSoft);"]}], "num": 46289}
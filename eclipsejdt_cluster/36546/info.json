{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0f5917fef9c7b655b30d52893e80f16", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01be427d53dc680fe5838e3190f6b083", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "db82ddad284f32cf411bd6c2865030a9b9d54b1b", "commitAfterChange": "52e515933df6ccd1319d11147552ac110018c2a9", "methodNumberBeforeChange": 252, "methodNumberAfterChange": 252, "signatureBeforeChange": " public void _testBug300136a() throws Exception", "signatureAfterChange": " public void testBug300136a() throws Exception", "diff": ["-// TODO (Jay) Enable when bug 301529 will be fixed", "-public void _testBug300136a() throws Exception {", "+public void testBug300136a() throws Exception {", "+\t\tIPath libPath = new Path(\"/lib/tmp.jar\");", "+\t\tJavaCore.setClasspathVariables(", "+\t\t\t\tnew String[] {\"INVALID_LIB\",},", "+\t\t\t\tnew IPath[] {libPath},", "+\t\t\t\tnull);", "+\t\t", "-\t\t\t\t\"    <classpathentry  kind=\\\"var\\\" path=\\\"TEST_LIB\\\" />\\n\" +", "+\t\t\t\t\"    <classpathentry  kind=\\\"var\\\" path=\\\"INVALID_LIB\\\" />\\n\" +", "-\t\t\t\t\"Project \\'P\\' is missing required library: \\'\\\\lib\\\\tmp.jar\\'\\n\" + ", "+\t\t\t\t\"Project \\'P\\' is missing required library: \\'\" + libPath.toOSString() + \"'\\n\" + ", "+\t\tJavaCore.removeClasspathVariable(\"INVALID_LIB\", null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50d150e03a7d521696050a5d97738ae5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 219, "methodNumberAfterChange": 219, "signatureBeforeChange": " \tpublic void setUpJCLClasspathVariables(String compliance) throws JavaModelException, IOException", "signatureAfterChange": " \tpublic void setUpJCLClasspathVariables(String compliance) throws JavaModelException, IOException", "diff": ["-\t\tif (\"1.5\".equals(compliance)) {", "+\t\tif (\"1.5\".equals(compliance) || \"1.6\".equals(compliance)) {", "-\t\t\t\t\tnew IPath[] {getExternalJCLPath(compliance), getExternalJCLSourcePath(compliance), getExternalJCLRootSourcePath()},", "+\t\t\t\t\tnew IPath[] {getExternalJCLPath(\"1.5\"), getExternalJCLSourcePath(\"1.5\"), getExternalJCLRootSourcePath()},", "-\t\t} else {", "+\t\t} else if (\"1.7\".equals(compliance)) {", "+\t\t\tif (JavaCore.getClasspathVariable(\"JCL17_LIB\") == null) {", "+\t\t\t\tsetupExternalJCL(\"jclMin1.7\");", "+\t\t\t\tJavaCore.setClasspathVariables(", "+\t\t\t\t\tnew String[] {\"JCL17_LIB\", \"JCL17_SRC\", \"JCL_SRCROOT\"},", "+\t\t\t\t\tnew IPath[] {getExternalJCLPath(\"1.7\"), getExternalJCLSourcePath(\"1.7\"), getExternalJCLRootSourcePath()},", "+\t\t\t\t\tnull);", "+\t\t\t}", "+\t\t}else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dfcb4d42d28d5cd60ff0d6f47e32461", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "44beb229da7acf29f8209404ea1120f9422c2f4a", "commitAfterChange": "c539ab4170e4fe0d8578cc8fb0121c9a797f5894", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public SyntheticMethodBinding addSyntheticMethod(LambdaExpression lambda)", "signatureAfterChange": " public SyntheticMethodBinding addSyntheticMethod(LambdaExpression lambda)", "diff": ["-\tSyntheticMethodBinding lambdaMethod = new SyntheticMethodBinding(lambda, CharOperation.concat(TypeConstants.ANONYMOUS_METHOD, Integer.toString(this.lambdaOrdinal++).toCharArray()), this);", "-\tSyntheticMethodBinding[] accessors = new SyntheticMethodBinding[2]; ", "-\tthis.synthetics[SourceTypeBinding.METHOD_EMUL].put(lambda, accessors);", "-\taccessors[0] = lambdaMethod;", "+\t", "+\tSyntheticMethodBinding lambdaMethod = null;", "+\tSyntheticMethodBinding[] lambdaMethods = (SyntheticMethodBinding[]) this.synthetics[SourceTypeBinding.METHOD_EMUL].get(lambda);", "+\tif (lambdaMethods == null) {", "+\t\tlambdaMethod = new SyntheticMethodBinding(lambda, CharOperation.concat(TypeConstants.ANONYMOUS_METHOD, Integer.toString(this.lambdaOrdinal++).toCharArray()), this);", "+\t\tthis.synthetics[SourceTypeBinding.METHOD_EMUL].put(lambda, lambdaMethods = new SyntheticMethodBinding[1]);", "+\t\tlambdaMethods[0] = lambdaMethod;", "+\t} else {", "+\t\tlambdaMethod = lambdaMethods[0];", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7dbe85cab714dc011bcefae4328132dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "9a76fb8f9434ae4b71dc267e686b050759ff3536", "commitAfterChange": "e5d54da7cf77d6614acfbbcede23df9b9dad68f9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " protected void storeProblemsFor(IResource resource, IProblem[] problems) throws CoreException", "signatureAfterChange": " protected void storeProblemsFor(IResource resource, IProblem[] problems) throws CoreException", "diff": ["+\t", "+\t\t\t\tbreak;", "-\t\tIMarker marker = resource.createMarker(JavaBuilder.ProblemMarkerTag);", "-\t\tmarker.setAttributes(", "-\t\t\tnew String[] {IMarker.MESSAGE, IMarker.SEVERITY, IJavaModelMarker.ID, IMarker.CHAR_START, IMarker.CHAR_END, IMarker.LINE_NUMBER, IJavaModelMarker.ARGUMENTS},", "-\t\t\tnew Object[] { ", "-\t\t\t\tproblem.getMessage(),", "-\t\t\t\tnew Integer(problem.isError() ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING), ", "-\t\t\t\tnew Integer(id),", "-\t\t\t\tnew Integer(problem.getSourceStart()),", "-\t\t\t\tnew Integer(problem.getSourceEnd() + 1),", "-\t\t\t\tnew Integer(problem.getSourceLineNumber()),", "-\t\t\t\tUtil.getProblemArgumentsForMarker(problem.getArguments())", "-\t\t\t});", "-", "+\t\tIMarker marker;", "+\t\tif (id != IProblem.Task) {", "+\t\t\tmarker = resource.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);", "+\t\t\tmarker.setAttributes(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\tIMarker.MESSAGE, ", "+\t\t\t\t\tIMarker.SEVERITY, ", "+\t\t\t\t\tIJavaModelMarker.ID, ", "+\t\t\t\t\tIMarker.CHAR_START, ", "+\t\t\t\t\tIMarker.CHAR_END, ", "+\t\t\t\t\tIMarker.LINE_NUMBER, ", "+\t\t\t\t\tIJavaModelMarker.ARGUMENTS},", "+\t\t\t\tnew Object[] { ", "+\t\t\t\t\tproblem.getMessage(),", "+\t\t\t\t\tnew Integer(problem.isError() ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING), ", "+\t\t\t\t\tnew Integer(id),", "+\t\t\t\t\tnew Integer(problem.getSourceStart()),", "+\t\t\t\t\tnew Integer(problem.getSourceEnd() + 1),", "+\t\t\t\t\tnew Integer(problem.getSourceLineNumber()),", "+\t\t\t\t\tUtil.getProblemArgumentsForMarker(problem.getArguments())", "+\t\t\t\t});", "+\t\t} else {", "+\t\t\tmarker = resource.createMarker(IJavaModelMarker.TASK_MARKER);", "+\t\t\tmarker.setAttributes(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\tIMarker.MESSAGE, ", "+\t\t\t\t\tIMarker.PRIORITY, ", "+\t\t\t\t\tIMarker.DONE, ", "+\t\t\t\t\tIMarker.CHAR_START, ", "+\t\t\t\t\tIMarker.CHAR_END, ", "+\t\t\t\t\tIMarker.LINE_NUMBER},", "+\t\t\t\tnew Object[] { ", "+\t\t\t\t\tproblem.getMessage(),", "+\t\t\t\t\tnew Integer(IMarker.PRIORITY_NORMAL),", "+\t\t\t\t\tnew Boolean(false),", "+\t\t\t\t\tnew Integer(problem.getSourceStart()),", "+\t\t\t\t\tnew Integer(problem.getSourceEnd() + 1),", "+\t\t\t\t\tnew Integer(problem.getSourceLineNumber()),", "+\t\t\t\t});", "+\t\t}", "+\t\t"]}], "num": 36546}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f55cfc9d9f6652bb5aa295c7124b9e19", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dd4f150b56acd55f3f5f4061f540f71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 133, "signatureBeforeChange": " protected void consumeEnterVariable()", "signatureAfterChange": " protected void consumeEnterVariable()", "diff": ["+\t\t\t// consume annotations", "+\t\t\tint length;", "+\t\t\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "+\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\tthis.expressionStack, ", "+\t\t\t\t\t(this.expressionPtr -= length) + 1, ", "+\t\t\t\t\tdeclaration.annotations = new Annotation[length], ", "+\t\t\t\t\t0, ", "+\t\t\t\t\tlength); ", "+\t\t\t}\t", "-\t\t\t", "+\t\t\t// consume annotations", "+\t\t\tint length;", "+\t\t\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "+\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\tthis.expressionStack, ", "+\t\t\t\t\t(this.expressionPtr -= length) + 1, ", "+\t\t\t\t\tdeclaration.annotations = new Annotation[length], ", "+\t\t\t\t\t0, ", "+\t\t\t\t\tlength); ", "+\t\t\t}\t\t\t", "-\t\t//on the identifierLengthStack there is the information about the type....", "+\t\t//on the this.identifierLengthStack there is the information about the type...."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57bd3d0d432d6296ebb2b81f57dc1348", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 154, "signatureBeforeChange": " protected void consumeFormalParameter()", "signatureAfterChange": " protected void consumeFormalParameter(boolean isVarArgs)", "diff": ["-protected void consumeFormalParameter() {", "+protected void consumeFormalParameter(boolean isVarArgs) {", "-\tastStack : ", "-\tidentifierStack : type identifier", "-\tintStack : dim dim", "+\tthis.astStack : ", "+\tthis.identifierStack : type identifier", "+\tthis.intStack : dim dim", "-\tastStack : Argument", "-\tidentifierStack :  ", "-\tintStack :  ", "+\tthis.astStack : Argument", "+\tthis.identifierStack :  ", "+\tthis.intStack :  ", "-\t\t\tthis.intStack[this.intPtr + 1] & ~AccDeprecated); // modifiers", "+\t\t\tthis.intStack[this.intPtr + 1] & ~AccDeprecated,", "+\t\t\tisVarArgs); // modifiers", "+\t// consume annotations", "+\tint length;", "+\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.expressionStack, ", "+\t\t\t(this.expressionPtr -= length) + 1, ", "+\t\t\targ.annotations = new Annotation[length], ", "+\t\t\t0, ", "+\t\t\tlength); ", "+\t}", "-\t/* if incomplete method header, listLength counter will not have been reset,", "+\t/* if incomplete method header, this.listLength counter will not have been reset,", "+\t", "+\tif(isVarArgs &&", "+\t\t\toptions.sourceLevel < ClassFileConstants.JDK1_5 &&", "+\t\t\tthis.lastErrorEndPositionBeforeRecovery < this.scanner.currentPosition) {", "+\t\tthis.problemReporter().invalidUsageOfVarargs(arg);", "+\t}"]}], "num": 19277}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a9a003ddc0597711114219b058953cb2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a93e7d51072653310c5df3fc6c82d6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "3b4394afa293384076b51eeac920f3d24cc5f8bc", "commitAfterChange": "8fb88598900ff0c1072aa7669424703dbc139194", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic static Test suite(Class evaluationTestClass, String suiteName)", "signatureAfterChange": " \tpublic static Test suite(Class evaluationTestClass, String suiteName)", "diff": ["-\t\treturn suite(evaluationTestClass, suiteName, 3);", "-\t}", "+\t\t\t\t\tObject[] params = {\"test\" + methNameFormat.format(testsNumbers[i])};", "+\t\t\t\t\t\tObject[] params = {\"test\" + methNameFormat.format(i)};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93a79f7a0ead13754504536757f07ae7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "62963aabc698cdd12bc1bf2bd37eac8d72bccd2f", "commitAfterChange": "4e65c4119dadcaa4c5efef86f1373d469b137c02", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void initializeIndexLocations()", "signatureAfterChange": " private void initializeIndexLocations()", "diff": ["-\t", "-\tArrayList requiredIndexKeys = new ArrayList();", "-\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();", "-\tIJavaElement projectOrJarFocus = MatchLocator.projectOrJarFocus(this.pattern);", "-\tboolean isPolymorphicSearch = this.pattern == null ? false : MatchLocator.isPolymorphicSearch(this.pattern);", "-\tfor (int i = 0; i < projectsAndJars.length; i++) {", "-\t\tIPath location;", "-\t\tIPath path = projectsAndJars[i];", "-\t\tif ((!root.getProject(path.lastSegment()).exists()) // if project does not exist", "-\t\t\t&& path.segmentCount() > 1", "-\t\t\t&& ((location = root.getFile(path).getLocation()) == null", "-\t\t\t\t|| !new java.io.File(location.toOSString()).exists()) // and internal jar file does not exist", "-\t\t\t&& !new java.io.File(path.toOSString()).exists()) { // and external jar file does not exist", "-\t\t\t\tcontinue;", "-\t\t}", "-\t\tif (projectOrJarFocus == null || canSeeFocus(projectOrJarFocus, isPolymorphicSearch, path)) {", "-\t\t\tif (requiredIndexKeys.indexOf(path) == -1) {", "-\t\t\t\trequiredIndexKeys.add(new Path(manager.computeIndexLocation(path)));", "+\tSimpleSet locations = new SimpleSet();", "+\tIJavaElement focus = MatchLocator.projectOrJarFocus(this.pattern);", "+\tif (focus == null) {", "+\t\tfor (int i = 0; i < projectsAndJars.length; i++)", "+\t\t\tlocations.add(manager.computeIndexLocation(projectsAndJars[i]));", "+\t} else {", "+\t\ttry {", "+\t\t\t// find the projects from projectsAndJars that see the focus then walk those projects looking for the jars from projectsAndJars", "+\t\t\tint length = projectsAndJars.length;", "+\t\t\tJavaProject[] projectsCanSeeFocus = new JavaProject[length];", "+\t\t\tSimpleSet visitedProjects = new SimpleSet(length);", "+\t\t\tint projectIndex = 0;", "+\t\t\tSimpleSet jarsToCheck = new SimpleSet(length);", "+\t\t\tIClasspathEntry[] focusEntries = null;", "+\t\t\tif (this.pattern != null && MatchLocator.isPolymorphicSearch(this.pattern)) { // isPolymorphicSearch", "+\t\t\t\tJavaProject focusProject = focus instanceof JarPackageFragmentRoot ? (JavaProject) focus.getParent() : (JavaProject) focus;", "+\t\t\t\tfocusEntries = focusProject.getExpandedClasspath(true);", "+\t\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tIPath path = projectsAndJars[i];", "+\t\t\t\tJavaProject project = (JavaProject) getJavaProject(path, model);", "+\t\t\t\tif (project != null) {", "+\t\t\t\t\tvisitedProjects.add(project);", "+\t\t\t\t\tif (canSeeFocus(focus, project, focusEntries)) {", "+\t\t\t\t\t\tlocations.add(manager.computeIndexLocation(path));", "+\t\t\t\t\t\tprojectsCanSeeFocus[projectIndex++] = project;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tjarsToCheck.add(path);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < projectIndex && jarsToCheck.elementSize > 0; i++) {", "+\t\t\t\tIClasspathEntry[] entries = projectsCanSeeFocus[i].getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "+\t\t\t\tfor (int j = entries.length; --j >= 0;) {", "+\t\t\t\t\tIClasspathEntry entry = entries[j];", "+\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "+\t\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\t\tif (jarsToCheck.includes(path)) {", "+\t\t\t\t\t\t\tlocations.add(manager.computeIndexLocation(entry.getPath()));", "+\t\t\t\t\t\t\tjarsToCheck.remove(path);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// jar files can be included in the search scope without including one of the projects that references them, so scan all projects that have not been visited", "+\t\t\tif (jarsToCheck.elementSize > 0) {", "+\t\t\t\tIJavaProject[] allProjects = model.getJavaProjects();", "+\t\t\t\tfor (int i = 0, l = allProjects.length; i < l && jarsToCheck.elementSize > 0; i++) {", "+\t\t\t\t\tJavaProject project = (JavaProject) allProjects[i];", "+\t\t\t\t\tif (!visitedProjects.includes(project)) {", "+\t\t\t\t\t\tIClasspathEntry[] entries = project.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "+\t\t\t\t\t\tfor (int j = entries.length; --j >= 0;) {", "+\t\t\t\t\t\t\tIClasspathEntry entry = entries[j];", "+\t\t\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "+\t\t\t\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\t\t\t\tif (jarsToCheck.includes(path)) {", "+\t\t\t\t\t\t\t\t\tlocations.add(manager.computeIndexLocation(entry.getPath()));", "+\t\t\t\t\t\t\t\t\tjarsToCheck.remove(path);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (JavaModelException e) {", "+\t\t\t// ignored", "-\tthis.indexLocations = new IPath[requiredIndexKeys.size()];", "-\trequiredIndexKeys.toArray(this.indexLocations);", "+", "+\tthis.indexLocations = new IPath[locations.elementSize];", "+\tObject[] values = locations.values;", "+\tint count = 0;", "+\tfor (int i = values.length; --i >= 0;)", "+\t\tif (values[i] != null)", "+\t\t\tthis.indexLocations[count++] = new Path((String) values[i]);"]}], "num": 30773}
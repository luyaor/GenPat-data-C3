{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "657ee54a01c2de4a4412d1fbbe446951", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29c4af1e92af6cee2a65d5b953aa4a24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void complainIfUnusedExceptionHandlers(BlockScope scope,TryStatement tryStatement)", "signatureAfterChange": "  public void complainIfUnusedExceptionHandlers(BlockScope scope,TryStatement tryStatement)", "diff": ["-\tfor (int i = 0, count = this.handledExceptions.length; i < count; i++) {", "-\t\tint index = this.indexes.get(this.handledExceptions[i]);", "+\tfor (int index = 0, count = this.handledExceptions.length; index < count; index++) {", "-\t\t\t\ttryStatement.catchArguments[index].type);", "+\t\t\t\tgetExceptionType(index));", "-\t\t\t\t\ttryStatement.catchArguments[index].type);", "+\t\t\t\t\tgetExceptionType(index));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36dd0d97067de63c762b7de62acecf8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "2e6208b474943da0d15504b38c04138726b9852a", "commitAfterChange": "59ef64b6878c0cb93ca98a4324eecb50f2d5a305", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic static IJavaSearchScope createJavaSearchScope(IJavaElement[] elements, int includeMask)", "signatureAfterChange": " \tpublic static IJavaSearchScope createJavaSearchScope(IJavaElement[] elements, int includeMask)", "diff": ["-\t\ttry {", "-\t\t\tfor (int i = 0, length = elements.length; i < length; i++) {", "-\t\t\t\tIJavaElement element = elements[i];", "-\t\t\t\tif (element != null) {", "+\t\tfor (int i = 0, length = elements.length; i < length; i++) {", "+\t\t\tIJavaElement element = elements[i];", "+\t\t\tif (element != null) {", "+\t\t\t\ttry {", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t// ignore", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// ignore"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb62d0384bf56091b0b8242f55af7ee2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/WordEntryHashedArray.java", "commitBeforeChange": "d526689e114a98ebebe123efd0dcd0120fba7837", "commitAfterChange": "ce24a5d9555160594cb6f5c271f026aa914032e9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public WordEntry[] asArray()", "signatureAfterChange": "  public WordEntry[] asArray()", "diff": ["-\tfor (int i = 0, j = 0, length = elements.length; i < length; i++) {", "+\tint count = 0;", "+\tfor (int i = 0, length = elements.length; i < length; i++) {", "-\t\tif (current != null) array[j++] = current;", "+\t\tif (current != null)", "+\t\t\tarray[count++] = current;", "+\tif (count < array.length) // add a little protection because of 40950", "+\t\tSystem.arraycopy(array, 0, array = new WordEntry[count], 0, count);"]}], "num": 64188}
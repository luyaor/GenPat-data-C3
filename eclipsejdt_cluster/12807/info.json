{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e75b948c41327ea3bc8ac7ecf125a19", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d0250014b7fcc7281e70e3064ae87cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "655865cd2962a92267f3475c9e5593885ca91441", "commitAfterChange": "f0e250f13749e7272bf06a2b15756605f80d1c3b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " protected void consumeBinaryExpression(int op)", "signatureAfterChange": " protected void consumeBinaryExpression(int op)", "diff": ["-\tBinaryExpression exp = (BinaryExpression) expressionStack[expressionPtr];", "-\tif(assistNode != null && exp.right == assistNode) {", "-\t\tassistNodeParent = exp;", "+\tif(expressionStack[expressionPtr] instanceof BinaryExpression) {", "+\t\tBinaryExpression exp = (BinaryExpression) expressionStack[expressionPtr];", "+\t\tif(assistNode != null && exp.right == assistNode) {", "+\t\t\tassistNodeParent = exp;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "450367cd09ecf342b8525eb62a2b7194", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "df5d9d5ec101b754aa7670df0792b53f6f3f73d0", "commitAfterChange": "cbb53b020eb8f2caef12392ab027078e6626eb25", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tprivate void computeExpectedTypes(AstNode parent, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(AstNode parent, Scope scope)", "diff": ["-\t\t\t", "-\t\t\tReferenceBinding binding = (ReferenceBinding)messageSend.receiverType;", "-\t\t\tboolean isStatic = messageSend.receiver.isTypeReference();", "-\t\t\t", "-\t\t\twhile(binding != null) {\t", "-\t\t\t\tcomputeExpectedTypesForMessageSend(", "-\t\t\t\t\tbinding,", "-\t\t\t\t\tmessageSend.selector,", "-\t\t\t\t\tmessageSend.arguments,", "-\t\t\t\t\t(ReferenceBinding)messageSend.receiverType,", "-\t\t\t\t\tscope,", "-\t\t\t\t\tmessageSend,", "-\t\t\t\t\tisStatic);", "-\t\t\t\tcomputeExpectedTypesForMessageSendForInterface(", "-\t\t\t\t\tbinding,", "-\t\t\t\t\tmessageSend.selector,", "-\t\t\t\t\tmessageSend.arguments,", "-\t\t\t\t\t(ReferenceBinding)messageSend.receiverType,", "-\t\t\t\t\tscope,", "-\t\t\t\t\tmessageSend,", "-\t\t\t\t\tisStatic);", "-\t\t\t\tbinding = binding.superclass();", "+", "+\t\t\tif(messageSend.receiverType instanceof ReferenceBinding) {", "+\t\t\t\tReferenceBinding binding = (ReferenceBinding)messageSend.receiverType;", "+\t\t\t\tboolean isStatic = messageSend.receiver.isTypeReference();", "+\t\t\t\t", "+\t\t\t\twhile(binding != null) {\t", "+\t\t\t\t\tcomputeExpectedTypesForMessageSend(", "+\t\t\t\t\t\tbinding,", "+\t\t\t\t\t\tmessageSend.selector,", "+\t\t\t\t\t\tmessageSend.arguments,", "+\t\t\t\t\t\t(ReferenceBinding)messageSend.receiverType,", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tmessageSend,", "+\t\t\t\t\t\tisStatic);", "+\t\t\t\t\tcomputeExpectedTypesForMessageSendForInterface(", "+\t\t\t\t\t\tbinding,", "+\t\t\t\t\t\tmessageSend.selector,", "+\t\t\t\t\t\tmessageSend.arguments,", "+\t\t\t\t\t\t(ReferenceBinding)messageSend.receiverType,", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tmessageSend,", "+\t\t\t\t\t\tisStatic);", "+\t\t\t\t\tbinding = binding.superclass();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57c3c623f790cc3b18c8e1c8a3eabf32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "00a3f3c32948c64188954cac2f1e0a1305db911b", "commitAfterChange": "0e78b746cfa482737ebf9f2bfe960064121903d6", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tif (this.actualReceiverType instanceof InferenceVariable) {", "+\t\t\treturn null; // not yet ready for resolving", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6060f993736033105e8281281aad36b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Member.java", "commitBeforeChange": "06cedbd8bd184e3f34c939385e2cbddd9e3aedca", "commitAfterChange": "0d09a2966f3cebfb8d6601000e2b64259fed7dd8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public int getFlags() throws JavaModelException", "signatureAfterChange": " public int getFlags() throws JavaModelException", "diff": ["+\tif (this.parent instanceof LambdaExpression)", "+\t\treturn 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "726d6a6b0047bcf4449942b41fdcb667", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "0e2d9a71d6773265a96182a660f0578d3bf2fa9b", "commitAfterChange": "8a55616a15f0e12ee24162781746f45ed8c24b78", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r private boolean canSeeFocus(IPath projectOrJarPath)", "signatureAfterChange": "\r private boolean canSeeFocus(IPath projectOrJarPath)", "diff": ["+\t// if it is a workspace scope, focus is visible from everywhere\r", "+\tif (this.searchScope instanceof JavaWorkspaceScope) return true;\r", "+\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a15082e334c0460d18de83d76730408d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "dc77cb172c0128b4f7cc2d542080aeb45e16857f", "commitAfterChange": "03aab1ff69aae2de16de283aaf6df2cafa77af82", "methodNumberBeforeChange": 467, "methodNumberAfterChange": 467, "signatureBeforeChange": " public void unnecessaryCast(CastExpression castExpression)", "signatureAfterChange": " public void unnecessaryCast(CastExpression castExpression)", "diff": ["+\tif (castExpression.expression instanceof FunctionalExpression)", "+\t\treturn;"]}], "num": 12807}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7fd2a1e1308c39c8dd61448b93597b2f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2825b69a89b728d54280be73b4bbbe2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java", "commitBeforeChange": "8308fbb078e8e036c815675ec6bbbcc0aa49f4d3", "commitAfterChange": "e9cd393d27e7dcc4d1e8856bf858c025f0164f22", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \r \tpublic FlowInfo analyseCode(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo)", "signatureAfterChange": "\r \r \tpublic FlowInfo analyseCode(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo)", "diff": ["+\t\tConstant constant = assertExpression.constant;\r", "+\t\tif (constant != NotAConstant && constant.booleanValue() == true) {\r", "+\t\t\treturn flowInfo;\r", "+\t\t}\r", "+\r", "-\t\t// add the assert support in the clinit\r", "-\t\r", "+\t\t// assertion might throw AssertionError (unchecked), which can have consequences in term of\r", "+\t\t// definitely assigned variables (depending on caught exception in the context)\r", "+\t\t// DISABLED - AssertionError is unchecked, try statements are already protected against these.\r", "+\t\t//flowContext.checkExceptionHandlers(currentScope.getJavaLangAssertionError(), this, assertInfo, currentScope);\r", "+\r", "-\t\t\r", "-\t\tConstant constant = assertExpression.constant;\r", "-\t\t\r", "-\t\tif (constant != NotAConstant && constant.booleanValue() == true) {\r", "-\t\t\treturn flowInfo;\r", "-\t\t}\r", "+\r", "+\t\t// add the assert support in the clinit\r", "+\t\t\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91bd8d07a7bda059148d32f4bf993c6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java", "commitBeforeChange": "54c5b1474818cda0f867a0315ddd797ab8dee3b6", "commitAfterChange": "b34ccb2dc96540b2cffbd4b546572f89b3d40916", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tConstant constant = assertExpression.constant;", "-\t\tif (constant != NotAConstant && constant.booleanValue() == true) {", "-\t\t\treturn flowInfo;", "-\t\t}", "-", "-\t\tFlowInfo assertInfo = flowInfo.copy();", "+\t\tFlowInfo assertInfo = assertExpression.analyseCode(currentScope, flowContext, flowInfo.copy()).unconditionalInits();", "-\t\t\tassertInfo = exceptionArgument.analyseCode(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tflowContext,", "-\t\t\t\t\t\tassertExpression.analyseCode(currentScope, flowContext, assertInfo).unconditionalInits())", "-\t\t\t\t\t.unconditionalInits();", "-\t\t} else {", "-\t\t\tassertInfo = assertExpression.analyseCode(currentScope, flowContext, assertInfo).unconditionalInits();", "+\t\t\tassertInfo = exceptionArgument.analyseCode(currentScope, flowContext, assertInfo);", "-\t\t// assertion might throw AssertionError (unchecked), which can have consequences in term of", "-\t\t// definitely assigned variables (depending on caught exception in the context)", "-\t\t// DISABLED - AssertionError is unchecked, try statements are already protected against these.", "-\t\t//flowContext.checkExceptionHandlers(currentScope.getJavaLangAssertionError(), this, assertInfo, currentScope);", "-", "-\t\t// only retain potential initializations", "-\t\tflowInfo.addPotentialInitializationsFrom(assertInfo.unconditionalInits());", "-", "-\t\t\t\t\t", "-\t\treturn flowInfo;", "+", "+\t\tFlowInfo mergedInfo = flowInfo.mergedWith(assertInfo.unconditionalInits());", "+\t\treturn mergedInfo;"]}], "num": 43283}
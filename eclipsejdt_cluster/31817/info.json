{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8e29b85b9fd3d9b04c610db703bdfbc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc54ac5dd690ef93bb82fc0c1dc78ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "972c7f1c4d5a8249e6cf0bbf33078118344b368a", "commitAfterChange": "9dd546ec0d84bb4ff147ae28c2586a5ed0820cc6", "methodNumberBeforeChange": 271, "methodNumberAfterChange": 271, "signatureBeforeChange": " protected void consumeRule(int act)", "signatureAfterChange": " protected void consumeRule(int act)", "diff": ["-    case 218 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclaration ::= MethodHeader MethodBody\"); }  //$NON-NLS-1$", "-\t\t    consumeInvalidMethodDeclaration();  ", "+    case 217 : if (DEBUG) { System.out.println(\"PushDefault ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeInterfaceMethodDefault();  ", "-    case 219 : if (DEBUG) { System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader...\"); }  //$NON-NLS-1$", "+    case 219 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclaration ::= MethodHeader default...\"); }  //$NON-NLS-1$", "+\t\t    consumeInterfaceMethodDeclaration(true);  ", "+\t\t\tbreak;", "+ ", "+    case 220 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclaration ::= MethodHeader MethodBody\"); }  //$NON-NLS-1$", "+\t\t    consumeInterfaceMethodDeclaration(false);  ", "+\t\t\tbreak;", "+ ", "+    case 221 : if (DEBUG) { System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader...\"); }  //$NON-NLS-1$", "-    case 220 : if (DEBUG) { System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader...\"); }  //$NON-NLS-1$", "+    case 222 : if (DEBUG) { System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader...\"); }  //$NON-NLS-1$", "-    case 231 : if (DEBUG) { System.out.println(\"PushLeftBrace ::=\"); }  //$NON-NLS-1$", "+    case 233 : if (DEBUG) { System.out.println(\"PushLeftBrace ::=\"); }  //$NON-NLS-1$", "-    case 232 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace ,opt RBRACE\"); }  //$NON-NLS-1$", "+    case 234 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace ,opt RBRACE\"); }  //$NON-NLS-1$", "-    case 233 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$", "+    case 235 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$", "-    case 234 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$", "+    case 236 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$", "-    case 236 : if (DEBUG) { System.out.println(\"VariableInitializers ::= VariableInitializers COMMA...\"); }  //$NON-NLS-1$", "+    case 238 : if (DEBUG) { System.out.println(\"VariableInitializers ::= VariableInitializers COMMA...\"); }  //$NON-NLS-1$", "-    case 237 : if (DEBUG) { System.out.println(\"Block ::= OpenBlock LBRACE BlockStatementsopt RBRACE\"); }  //$NON-NLS-1$", "+    case 239 : if (DEBUG) { System.out.println(\"Block ::= OpenBlock LBRACE BlockStatementsopt RBRACE\"); }  //$NON-NLS-1$", "-    case 238 : if (DEBUG) { System.out.println(\"OpenBlock ::=\"); }  //$NON-NLS-1$", "+    case 240 : if (DEBUG) { System.out.println(\"OpenBlock ::=\"); }  //$NON-NLS-1$", "-    case 240 : if (DEBUG) { System.out.println(\"BlockStatements ::= BlockStatements BlockStatement\"); }  //$NON-NLS-1$", "+    case 242 : if (DEBUG) { System.out.println(\"BlockStatements ::= BlockStatements BlockStatement\"); }  //$NON-NLS-1$", "-    case 244 : if (DEBUG) { System.out.println(\"BlockStatement ::= InterfaceDeclaration\"); }  //$NON-NLS-1$", "+    case 246 : if (DEBUG) { System.out.println(\"BlockStatement ::= InterfaceDeclaration\"); }  //$NON-NLS-1$", "-    case 245 : if (DEBUG) { System.out.println(\"BlockStatement ::= AnnotationTypeDeclaration\"); }  //$NON-NLS-1$", "+    case 247 : if (DEBUG) { System.out.println(\"BlockStatement ::= AnnotationTypeDeclaration\"); }  //$NON-NLS-1$", "-    case 246 : if (DEBUG) { System.out.println(\"BlockStatement ::= EnumDeclaration\"); }  //$NON-NLS-1$", "+    case 248 : if (DEBUG) { System.out.println(\"BlockStatement ::= EnumDeclaration\"); }  //$NON-NLS-1$", "-    case 247 : if (DEBUG) { System.out.println(\"LocalVariableDeclarationStatement ::=...\"); }  //$NON-NLS-1$", "+    case 249 : if (DEBUG) { System.out.println(\"LocalVariableDeclarationStatement ::=...\"); }  //$NON-NLS-1$", "-    case 248 : if (DEBUG) { System.out.println(\"LocalVariableDeclaration ::= Type PushModifiers...\"); }  //$NON-NLS-1$", "+    case 250 : if (DEBUG) { System.out.println(\"LocalVariableDeclaration ::= Type PushModifiers...\"); }  //$NON-NLS-1$", "-    case 249 : if (DEBUG) { System.out.println(\"LocalVariableDeclaration ::= Modifiers Type...\"); }  //$NON-NLS-1$", "+    case 251 : if (DEBUG) { System.out.println(\"LocalVariableDeclaration ::= Modifiers Type...\"); }  //$NON-NLS-1$", "-    case 250 : if (DEBUG) { System.out.println(\"PushModifiers ::=\"); }  //$NON-NLS-1$", "+    case 252 : if (DEBUG) { System.out.println(\"PushModifiers ::=\"); }  //$NON-NLS-1$", "-    case 251 : if (DEBUG) { System.out.println(\"PushModifiersForHeader ::=\"); }  //$NON-NLS-1$", "+    case 253 : if (DEBUG) { System.out.println(\"PushModifiersForHeader ::=\"); }  //$NON-NLS-1$", "-    case 252 : if (DEBUG) { System.out.println(\"PushRealModifiers ::=\"); }  //$NON-NLS-1$", "+    case 254 : if (DEBUG) { System.out.println(\"PushRealModifiers ::=\"); }  //$NON-NLS-1$", "-    case 279 : if (DEBUG) { System.out.println(\"EmptyStatement ::= SEMICOLON\"); }  //$NON-NLS-1$", "+    case 281 : if (DEBUG) { System.out.println(\"EmptyStatement ::= SEMICOLON\"); }  //$NON-NLS-1$", "-    case 280 : if (DEBUG) { System.out.println(\"LabeledStatement ::= Label COLON Statement\"); }  //$NON-NLS-1$", "+    case 282 : if (DEBUG) { System.out.println(\"LabeledStatement ::= Label COLON Statement\"); }  //$NON-NLS-1$", "-    case 281 : if (DEBUG) { System.out.println(\"LabeledStatementNoShortIf ::= Label COLON...\"); }  //$NON-NLS-1$", "+    case 283 : if (DEBUG) { System.out.println(\"LabeledStatementNoShortIf ::= Label COLON...\"); }  //$NON-NLS-1$", "-    case 282 : if (DEBUG) { System.out.println(\"Label ::= Identifier\"); }  //$NON-NLS-1$", "+    case 284 : if (DEBUG) { System.out.println(\"Label ::= Identifier\"); }  //$NON-NLS-1$", "-     case 283 : if (DEBUG) { System.out.println(\"ExpressionStatement ::= StatementExpression SEMICOLON\"); }  //$NON-NLS-1$", "+     case 285 : if (DEBUG) { System.out.println(\"ExpressionStatement ::= StatementExpression SEMICOLON\"); }  //$NON-NLS-1$", "-    case 292 : if (DEBUG) { System.out.println(\"IfThenStatement ::= if LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "+    case 294 : if (DEBUG) { System.out.println(\"IfThenStatement ::= if LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "-    case 293 : if (DEBUG) { System.out.println(\"IfThenElseStatement ::= if LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "+    case 295 : if (DEBUG) { System.out.println(\"IfThenElseStatement ::= if LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "-    case 294 : if (DEBUG) { System.out.println(\"IfThenElseStatementNoShortIf ::= if LPAREN Expression...\"); }  //$NON-NLS-1$", "+    case 296 : if (DEBUG) { System.out.println(\"IfThenElseStatementNoShortIf ::= if LPAREN Expression...\"); }  //$NON-NLS-1$", "-    case 295 : if (DEBUG) { System.out.println(\"SwitchStatement ::= switch LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "+    case 297 : if (DEBUG) { System.out.println(\"SwitchStatement ::= switch LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "-    case 296 : if (DEBUG) { System.out.println(\"SwitchBlock ::= LBRACE RBRACE\"); }  //$NON-NLS-1$", "+    case 298 : if (DEBUG) { System.out.println(\"SwitchBlock ::= LBRACE RBRACE\"); }  //$NON-NLS-1$", "-    case 299 : if (DEBUG) { System.out.println(\"SwitchBlock ::= LBRACE SwitchBlockStatements...\"); }  //$NON-NLS-1$", "+    case 301 : if (DEBUG) { System.out.println(\"SwitchBlock ::= LBRACE SwitchBlockStatements...\"); }  //$NON-NLS-1$", "-    case 301 : if (DEBUG) { System.out.println(\"SwitchBlockStatements ::= SwitchBlockStatements...\"); }  //$NON-NLS-1$", "+    case 303 : if (DEBUG) { System.out.println(\"SwitchBlockStatements ::= SwitchBlockStatements...\"); }  //$NON-NLS-1$", "-    case 302 : if (DEBUG) { System.out.println(\"SwitchBlockStatement ::= SwitchLabels BlockStatements\"); }  //$NON-NLS-1$", "+    case 304 : if (DEBUG) { System.out.println(\"SwitchBlockStatement ::= SwitchLabels BlockStatements\"); }  //$NON-NLS-1$", "-    case 304 : if (DEBUG) { System.out.println(\"SwitchLabels ::= SwitchLabels SwitchLabel\"); }  //$NON-NLS-1$", "+    case 306 : if (DEBUG) { System.out.println(\"SwitchLabels ::= SwitchLabels SwitchLabel\"); }  //$NON-NLS-1$", "-     case 305 : if (DEBUG) { System.out.println(\"SwitchLabel ::= case ConstantExpression COLON\"); }  //$NON-NLS-1$", "+     case 307 : if (DEBUG) { System.out.println(\"SwitchLabel ::= case ConstantExpression COLON\"); }  //$NON-NLS-1$", "-     case 306 : if (DEBUG) { System.out.println(\"SwitchLabel ::= default COLON\"); }  //$NON-NLS-1$", "+     case 308 : if (DEBUG) { System.out.println(\"SwitchLabel ::= default COLON\"); }  //$NON-NLS-1$", "-    case 307 : if (DEBUG) { System.out.println(\"WhileStatement ::= while LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "+    case 309 : if (DEBUG) { System.out.println(\"WhileStatement ::= while LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "-    case 308 : if (DEBUG) { System.out.println(\"WhileStatementNoShortIf ::= while LPAREN Expression...\"); }  //$NON-NLS-1$", "+    case 310 : if (DEBUG) { System.out.println(\"WhileStatementNoShortIf ::= while LPAREN Expression...\"); }  //$NON-NLS-1$", "-    case 309 : if (DEBUG) { System.out.println(\"DoStatement ::= do Statement while LPAREN Expression...\"); }  //$NON-NLS-1$", "+    case 311 : if (DEBUG) { System.out.println(\"DoStatement ::= do Statement while LPAREN Expression...\"); }  //$NON-NLS-1$", "-    case 310 : if (DEBUG) { System.out.println(\"ForStatement ::= for LPAREN ForInitopt SEMICOLON...\"); }  //$NON-NLS-1$", "+    case 312 : if (DEBUG) { System.out.println(\"ForStatement ::= for LPAREN ForInitopt SEMICOLON...\"); }  //$NON-NLS-1$", "-    case 311 : if (DEBUG) { System.out.println(\"ForStatementNoShortIf ::= for LPAREN ForInitopt...\"); }  //$NON-NLS-1$", "+    case 313 : if (DEBUG) { System.out.println(\"ForStatementNoShortIf ::= for LPAREN ForInitopt...\"); }  //$NON-NLS-1$", "-    case 312 : if (DEBUG) { System.out.println(\"ForInit ::= StatementExpressionList\"); }  //$NON-NLS-1$", "+    case 314 : if (DEBUG) { System.out.println(\"ForInit ::= StatementExpressionList\"); }  //$NON-NLS-1$", "-    case 316 : if (DEBUG) { System.out.println(\"StatementExpressionList ::= StatementExpressionList...\"); }  //$NON-NLS-1$", "+    case 318 : if (DEBUG) { System.out.println(\"StatementExpressionList ::= StatementExpressionList...\"); }  //$NON-NLS-1$", "-    case 317 : if (DEBUG) { System.out.println(\"AssertStatement ::= assert Expression SEMICOLON\"); }  //$NON-NLS-1$", "+    case 319 : if (DEBUG) { System.out.println(\"AssertStatement ::= assert Expression SEMICOLON\"); }  //$NON-NLS-1$", "-    case 318 : if (DEBUG) { System.out.println(\"AssertStatement ::= assert Expression COLON Expression\"); }  //$NON-NLS-1$", "+    case 320 : if (DEBUG) { System.out.println(\"AssertStatement ::= assert Expression COLON Expression\"); }  //$NON-NLS-1$", "-    case 319 : if (DEBUG) { System.out.println(\"BreakStatement ::= break SEMICOLON\"); }  //$NON-NLS-1$", "+    case 321 : if (DEBUG) { System.out.println(\"BreakStatement ::= break SEMICOLON\"); }  //$NON-NLS-1$", "-    case 320 : if (DEBUG) { System.out.println(\"BreakStatement ::= break Identifier SEMICOLON\"); }  //$NON-NLS-1$", "+    case 322 : if (DEBUG) { System.out.println(\"BreakStatement ::= break Identifier SEMICOLON\"); }  //$NON-NLS-1$", "-    case 321 : if (DEBUG) { System.out.println(\"ContinueStatement ::= continue SEMICOLON\"); }  //$NON-NLS-1$", "+    case 323 : if (DEBUG) { System.out.println(\"ContinueStatement ::= continue SEMICOLON\"); }  //$NON-NLS-1$", "-    case 322 : if (DEBUG) { System.out.println(\"ContinueStatement ::= continue Identifier SEMICOLON\"); }  //$NON-NLS-1$", "+    case 324 : if (DEBUG) { System.out.println(\"ContinueStatement ::= continue Identifier SEMICOLON\"); }  //$NON-NLS-1$", "-    case 323 : if (DEBUG) { System.out.println(\"ReturnStatement ::= return Expressionopt SEMICOLON\"); }  //$NON-NLS-1$", "+    case 325 : if (DEBUG) { System.out.println(\"ReturnStatement ::= return Expressionopt SEMICOLON\"); }  //$NON-NLS-1$", "-    case 324 : if (DEBUG) { System.out.println(\"ThrowStatement ::= throw Expression SEMICOLON\"); }  //$NON-NLS-1$", "+    case 326 : if (DEBUG) { System.out.println(\"ThrowStatement ::= throw Expression SEMICOLON\"); }  //$NON-NLS-1$", "-    case 325 : if (DEBUG) { System.out.println(\"SynchronizedStatement ::= OnlySynchronized LPAREN...\"); }  //$NON-NLS-1$", "+    case 327 : if (DEBUG) { System.out.println(\"SynchronizedStatement ::= OnlySynchronized LPAREN...\"); }  //$NON-NLS-1$", "-    case 326 : if (DEBUG) { System.out.println(\"OnlySynchronized ::= synchronized\"); }  //$NON-NLS-1$", "+    case 328 : if (DEBUG) { System.out.println(\"OnlySynchronized ::= synchronized\"); }  //$NON-NLS-1$", "-    case 327 : if (DEBUG) { System.out.println(\"TryStatement ::= try TryBlock Catches\"); }  //$NON-NLS-1$", "+    case 329 : if (DEBUG) { System.out.println(\"TryStatement ::= try TryBlock Catches\"); }  //$NON-NLS-1$", "-    case 328 : if (DEBUG) { System.out.println(\"TryStatement ::= try TryBlock Catchesopt Finally\"); }  //$NON-NLS-1$", "+    case 330 : if (DEBUG) { System.out.println(\"TryStatement ::= try TryBlock Catchesopt Finally\"); }  //$NON-NLS-1$", "-    case 329 : if (DEBUG) { System.out.println(\"TryStatementWithResources ::= try ResourceSpecification\"); }  //$NON-NLS-1$", "+    case 331 : if (DEBUG) { System.out.println(\"TryStatementWithResources ::= try ResourceSpecification\"); }  //$NON-NLS-1$", "-    case 330 : if (DEBUG) { System.out.println(\"TryStatementWithResources ::= try ResourceSpecification\"); }  //$NON-NLS-1$", "+    case 332 : if (DEBUG) { System.out.println(\"TryStatementWithResources ::= try ResourceSpecification\"); }  //$NON-NLS-1$", "-    case 331 : if (DEBUG) { System.out.println(\"ResourceSpecification ::= LPAREN Resources ;opt RPAREN\"); }  //$NON-NLS-1$", "+    case 333 : if (DEBUG) { System.out.println(\"ResourceSpecification ::= LPAREN Resources ;opt RPAREN\"); }  //$NON-NLS-1$", "-    case 332 : if (DEBUG) { System.out.println(\";opt ::=\"); }  //$NON-NLS-1$", "+    case 334 : if (DEBUG) { System.out.println(\";opt ::=\"); }  //$NON-NLS-1$", "-    case 333 : if (DEBUG) { System.out.println(\";opt ::= SEMICOLON\"); }  //$NON-NLS-1$", "+    case 335 : if (DEBUG) { System.out.println(\";opt ::= SEMICOLON\"); }  //$NON-NLS-1$", "-    case 334 : if (DEBUG) { System.out.println(\"Resources ::= Resource\"); }  //$NON-NLS-1$", "+    case 336 : if (DEBUG) { System.out.println(\"Resources ::= Resource\"); }  //$NON-NLS-1$", "-    case 335 : if (DEBUG) { System.out.println(\"Resources ::= Resources TrailingSemiColon Resource\"); }  //$NON-NLS-1$", "+    case 337 : if (DEBUG) { System.out.println(\"Resources ::= Resources TrailingSemiColon Resource\"); }  //$NON-NLS-1$", "-    case 336 : if (DEBUG) { System.out.println(\"TrailingSemiColon ::= SEMICOLON\"); }  //$NON-NLS-1$", "+    case 338 : if (DEBUG) { System.out.println(\"TrailingSemiColon ::= SEMICOLON\"); }  //$NON-NLS-1$", "-    case 337 : if (DEBUG) { System.out.println(\"Resource ::= Type PushModifiers VariableDeclaratorId...\"); }  //$NON-NLS-1$", "+    case 339 : if (DEBUG) { System.out.println(\"Resource ::= Type PushModifiers VariableDeclaratorId...\"); }  //$NON-NLS-1$", "-    case 338 : if (DEBUG) { System.out.println(\"Resource ::= Modifiers Type PushRealModifiers...\"); }  //$NON-NLS-1$", "+    case 340 : if (DEBUG) { System.out.println(\"Resource ::= Modifiers Type PushRealModifiers...\"); }  //$NON-NLS-1$", "-    case 340 : if (DEBUG) { System.out.println(\"ExitTryBlock ::=\"); }  //$NON-NLS-1$", "+    case 342 : if (DEBUG) { System.out.println(\"ExitTryBlock ::=\"); }  //$NON-NLS-1$", "-    case 342 : if (DEBUG) { System.out.println(\"Catches ::= Catches CatchClause\"); }  //$NON-NLS-1$", "+    case 344 : if (DEBUG) { System.out.println(\"Catches ::= Catches CatchClause\"); }  //$NON-NLS-1$", "-    case 343 : if (DEBUG) { System.out.println(\"CatchClause ::= catch LPAREN CatchFormalParameter RPAREN\"); }  //$NON-NLS-1$", "+    case 345 : if (DEBUG) { System.out.println(\"CatchClause ::= catch LPAREN CatchFormalParameter RPAREN\"); }  //$NON-NLS-1$", "-    case 345 : if (DEBUG) { System.out.println(\"PushLPAREN ::= LPAREN\"); }  //$NON-NLS-1$", "+    case 347 : if (DEBUG) { System.out.println(\"PushLPAREN ::= LPAREN\"); }  //$NON-NLS-1$", "-    case 346 : if (DEBUG) { System.out.println(\"PushRPAREN ::= RPAREN\"); }  //$NON-NLS-1$", "+    case 348 : if (DEBUG) { System.out.println(\"PushRPAREN ::= RPAREN\"); }  //$NON-NLS-1$", "-    case 351 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= this\"); }  //$NON-NLS-1$", "+    case 353 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= this\"); }  //$NON-NLS-1$", "-    case 352 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Expression_NotName...\"); }  //$NON-NLS-1$", "+    case 354 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Expression_NotName...\"); }  //$NON-NLS-1$", "-    case 353 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Name PushRPAREN\"); }  //$NON-NLS-1$", "+    case 355 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Name PushRPAREN\"); }  //$NON-NLS-1$", "-    case 356 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT this\"); }  //$NON-NLS-1$", "+    case 358 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT this\"); }  //$NON-NLS-1$", "-    case 357 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT super\"); }  //$NON-NLS-1$", "+    case 359 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT super\"); }  //$NON-NLS-1$", "-    case 358 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT class\"); }  //$NON-NLS-1$", "+    case 360 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT class\"); }  //$NON-NLS-1$", "-    case 359 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name Dims DOT class\"); }  //$NON-NLS-1$", "+    case 361 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name Dims DOT class\"); }  //$NON-NLS-1$", "-    case 360 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PrimitiveType Dims DOT class\"); }  //$NON-NLS-1$", "+    case 362 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PrimitiveType Dims DOT class\"); }  //$NON-NLS-1$", "-    case 361 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PrimitiveType DOT class\"); }  //$NON-NLS-1$", "+    case 363 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PrimitiveType DOT class\"); }  //$NON-NLS-1$", "-    case 364 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "+    case 369 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name COLON_COLON...\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceExpressionNameForm();  ", "+\t\t\tbreak;", "+ ", "+    case 370 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name...\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceExpressionTypeForm(false);  ", "+\t\t\tbreak;", "+ ", "+    case 371 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name...\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceExpressionTypeForm(true);  ", "+\t\t\tbreak;", "+ ", "+    case 372 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Primary COLON_COLON...\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceExpressionPrimaryForm();  ", "+\t\t\tbreak;", "+ ", "+    case 373 : if (DEBUG) { System.out.println(\"NonWildTypeArgumentsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyTypeArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 375 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeIdentifierOrNew(false);  ", "+\t\t\tbreak;", "+ ", "+    case 376 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= new\"); }  //$NON-NLS-1$", "+\t\t    consumeIdentifierOrNew(true);  ", "+\t\t\tbreak;", "+ ", "+    case 377 : if (DEBUG) { System.out.println(\"LambdaExpression ::= LambdaParameters ARROW LambdaBody\"); }  //$NON-NLS-1$", "+\t\t    consumeLambdaExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 378 : if (DEBUG) { System.out.println(\"LambdaParameters ::= Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeElidedLambdaParameter(false);  ", "+\t\t\tbreak;", "+ ", "+    case 382 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameterList ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeFormalParameterList();  ", "+\t\t\tbreak;", "+ ", "+    case 383 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameter ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeElidedLambdaParameter(true);  ", "+\t\t\tbreak;", "+ ", "+    case 386 : if (DEBUG) { System.out.println(\"ElidedLeftBraceAndReturn ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeElidedLeftBraceAndReturn();  ", "+\t\t\tbreak;", "+ ", "+    case 387 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "-    case 365 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "+    case 388 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "-    case 366 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "+    case 389 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "-    case 367 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+    case 390 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-    case 368 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+    case 391 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-    case 369 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "+    case 392 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "-    case 370 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "+    case 393 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "-    case 371 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "+    case 394 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "-    case 372 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "+    case 395 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "-    case 373 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 396 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 375 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 398 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 376 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 399 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 378 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 401 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 380 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "+    case 403 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "-    case 381 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "+    case 404 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "-    case 382 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "+    case 405 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "-    case 383 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 406 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 384 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "+    case 407 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "-    case 385 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 408 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 386 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 409 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 388 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "+    case 411 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "-     case 390 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 413 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-     case 391 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "+     case 414 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "-     case 394 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 417 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-    case 395 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "+    case 418 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "-    case 396 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "+    case 419 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "-    case 397 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+    case 420 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-    case 398 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 421 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 399 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 422 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 400 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 423 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 401 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 424 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 402 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 425 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 403 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "+    case 426 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "-    case 404 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "+    case 427 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "-    case 405 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "+    case 428 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "-    case 407 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "+    case 430 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "-    case 410 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "+    case 433 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "-    case 411 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "+    case 434 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "-    case 412 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "+    case 435 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "-    case 415 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 438 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 416 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 439 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 418 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 441 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 419 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 442 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 421 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "+    case 444 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "-    case 422 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "+    case 445 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "-    case 424 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "+    case 447 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "-    case 425 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 448 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 426 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 449 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 427 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "+    case 450 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "-    case 428 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\"); }  //$NON-NLS-1$", "+    case 451 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\"); }  //$NON-NLS-1$", "-    case 429 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "+    case 452 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "-    case 430 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "+    case 453 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "-    case 431 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "+    case 454 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "-    case 432 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "+    case 455 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "-    case 434 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "+    case 457 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-    case 435 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "+    case 458 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-    case 436 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "+    case 459 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-    case 438 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "+    case 461 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "-    case 439 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "+    case 462 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "-    case 441 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 464 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 442 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 465 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 443 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 466 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 445 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "+    case 468 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "-    case 446 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "+    case 469 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "-    case 447 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "+    case 470 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "-    case 448 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "+    case 471 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "-    case 450 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "+    case 473 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "-    case 452 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "+    case 475 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-    case 453 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "+    case 476 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "-    case 455 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "+    case 478 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "-    case 457 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "+    case 480 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "-    case 459 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "+    case 482 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "-    case 461 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "+    case 484 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "-    case 463 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "+    case 486 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 465 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "+    case 488 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 468 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "+    case 491 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "-    case 470 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "+    case 493 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "-    case 471 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "+    case 494 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "-    case 472 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "+    case 495 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "-    case 473 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "+    case 496 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "-    case 474 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "+    case 497 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "-    case 475 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "+    case 498 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "-    case 476 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "+    case 499 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "-    case 477 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+    case 500 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-    case 478 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+    case 501 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-    case 479 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+    case 502 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-    case 480 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "+    case 503 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "-    case 481 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "+    case 504 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "-    case 482 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "+    case 505 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "-    case 486 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "+    case 506 : if (DEBUG) { System.out.println(\"Expression ::= AssignmentExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 509 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "-    case 491 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 514 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 492 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+    case 515 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-     case 493 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "+     case 516 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "-    case 494 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "+    case 517 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "-    case 495 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "+    case 518 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "-     case 497 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "+     case 520 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "-     case 499 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "+     case 522 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "-    case 503 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "+    case 526 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "-     case 507 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+     case 530 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-     case 508 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+     case 531 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-    case 509 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "+    case 532 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "-     case 510 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "+     case 533 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "-     case 512 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "+     case 535 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "-     case 516 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "+     case 539 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "-     case 518 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "+     case 541 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "-     case 519 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "+     case 542 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "-     case 520 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "+     case 543 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "-     case 521 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "+     case 544 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "-     case 522 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "+     case 545 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "-     case 523 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "+     case 546 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "-     case 524 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "+     case 547 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "-     case 525 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "+     case 548 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "-    case 527 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "+    case 550 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "-    case 528 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+    case 551 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-    case 529 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "+    case 552 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "-    case 530 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "+    case 553 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "-    case 531 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "+    case 554 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "-    case 532 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+    case 555 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-    case 533 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "+    case 556 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "-    case 535 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "+    case 558 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "-    case 536 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 559 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 538 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "+    case 561 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "-    case 539 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "+    case 562 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "-    case 540 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "+    case 563 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "-    case 541 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "+    case 564 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "-    case 542 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "+    case 565 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "-    case 543 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 566 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 544 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "+    case 567 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "-    case 545 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 568 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 546 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "+    case 569 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "-    case 547 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+    case 570 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-    case 548 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+    case 571 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-    case 550 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+    case 573 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-    case 552 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "+    case 575 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "-    case 553 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "+    case 576 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "-    case 557 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "+    case 580 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "-    case 558 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+    case 581 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-    case 560 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+    case 583 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-    case 563 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 586 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 564 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+    case 587 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-    case 566 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+    case 589 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-    case 569 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 592 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 570 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "+    case 593 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "-    case 571 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "+    case 594 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "-    case 572 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "+    case 595 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "-    case 573 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "+    case 596 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "-    case 574 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "+    case 597 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "-    case 575 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "+    case 598 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "-    case 576 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "+    case 599 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "-    case 577 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "+    case 600 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "-    case 578 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 601 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 579 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "+    case 602 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "-    case 580 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "+    case 603 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "-    case 581 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "+    case 604 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "-    case 582 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 605 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 583 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "+    case 606 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "-    case 584 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "+    case 607 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "-    case 585 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "+    case 608 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "-    case 586 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= Identifier\"); }  //$NON-NLS-1$", "+    case 609 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= Identifier\"); }  //$NON-NLS-1$", "-    case 587 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "+    case 610 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "-    case 589 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+    case 612 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-    case 591 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 614 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 592 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 615 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 594 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+    case 617 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-    case 595 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "+    case 618 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "-    case 597 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+    case 620 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-    case 598 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "+    case 621 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "-    case 599 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 622 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 600 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 623 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 602 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+    case 625 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-    case 603 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "+    case 626 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "-    case 609 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 632 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 610 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 633 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 613 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "+    case 636 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "-    case 614 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "+    case 637 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "-    case 617 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 640 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 618 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "+    case 641 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "-    case 619 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 642 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 620 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "+    case 643 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "-    case 621 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 644 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 622 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "+    case 645 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "-    case 624 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 647 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 625 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "+    case 648 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "-    case 626 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 649 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 627 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "+    case 650 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "-    case 629 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 652 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-    case 630 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 653 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 631 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 654 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-    case 632 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 655 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 633 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 656 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-    case 634 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 657 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 636 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 659 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "-    case 637 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "+    case 660 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "-    case 638 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 661 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "-    case 639 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "+    case 662 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "-    case 640 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 663 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 641 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "+    case 664 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "-    case 642 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 665 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 643 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "+    case 666 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "-    case 645 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "+    case 668 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "-    case 646 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 669 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 648 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 671 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 649 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "+    case 672 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-    case 650 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 673 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 651 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "+    case 674 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "-    case 653 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "+    case 676 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "-    case 654 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "+    case 677 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "-    case 656 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 679 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 657 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "+    case 680 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "-    case 659 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 682 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 660 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "+    case 683 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "-    case 662 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 685 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 663 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "+    case 686 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "-    case 665 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 688 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 666 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "+    case 689 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "-    case 668 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 691 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 669 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "+    case 692 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "-    case 673 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+    case 696 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-    case 674 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+    case 697 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-    case 675 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "+    case 698 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "-    case 676 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "+    case 699 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "-    case 677 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "+    case 700 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "-    case 678 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 701 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 680 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 703 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 681 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+    case 704 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-    case 683 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "+    case 706 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "-    case 684 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "+    case 707 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "-    case 685 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 708 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 686 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "+    case 709 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "-    case 687 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "+    case 710 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "-    case 688 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 711 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 689 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 712 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 697 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "+    case 720 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "-    case 698 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 721 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 699 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "+    case 722 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "-    case 702 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "+    case 725 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "-    case 703 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "+    case 726 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "-    case 704 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 727 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 705 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 728 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 707 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "+    case 730 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "-    case 710 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "+    case 733 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-    case 711 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "+    case 734 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-    case 712 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "+    case 735 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-    case 713 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "+    case 736 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-    case 714 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "+    case 737 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "-    case 716 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "+    case 739 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "-    case 717 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "+    case 740 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "-    case 718 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "+    case 741 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "-    case 719 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 742 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 720 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "+    case 743 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "-    case 721 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 744 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 722 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 745 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 723 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 746 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e52f772e641112e192efc662b4bf6cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "c53e368d261f2341743baa1024157841e94f1882", "commitAfterChange": "c0fbf538c56e049473d6298631299cfef92195c1", "methodNumberBeforeChange": 271, "methodNumberAfterChange": 271, "signatureBeforeChange": " protected void consumeRule(int act)", "signatureAfterChange": " protected void consumeRule(int act)", "diff": ["-    case 218 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclaration ::= MethodHeader MethodBody\"); }  //$NON-NLS-1$", "-\t\t    consumeInvalidMethodDeclaration();  ", "+    case 217 : if (DEBUG) { System.out.println(\"PushDefault ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeInterfaceMethodDefault();  ", "-    case 219 : if (DEBUG) { System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader...\"); }  //$NON-NLS-1$", "+    case 219 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclaration ::= MethodHeader default...\"); }  //$NON-NLS-1$", "+\t\t    consumeInterfaceMethodDeclaration(true);  ", "+\t\t\tbreak;", "+ ", "+    case 220 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclaration ::= MethodHeader MethodBody\"); }  //$NON-NLS-1$", "+\t\t    consumeInterfaceMethodDeclaration(false);  ", "+\t\t\tbreak;", "+ ", "+    case 221 : if (DEBUG) { System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader...\"); }  //$NON-NLS-1$", "-    case 220 : if (DEBUG) { System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader...\"); }  //$NON-NLS-1$", "+    case 222 : if (DEBUG) { System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader...\"); }  //$NON-NLS-1$", "-    case 231 : if (DEBUG) { System.out.println(\"PushLeftBrace ::=\"); }  //$NON-NLS-1$", "+    case 233 : if (DEBUG) { System.out.println(\"PushLeftBrace ::=\"); }  //$NON-NLS-1$", "-    case 232 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace ,opt RBRACE\"); }  //$NON-NLS-1$", "+    case 234 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace ,opt RBRACE\"); }  //$NON-NLS-1$", "-    case 233 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$", "+    case 235 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$", "-    case 234 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$", "+    case 236 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$", "-    case 236 : if (DEBUG) { System.out.println(\"VariableInitializers ::= VariableInitializers COMMA...\"); }  //$NON-NLS-1$", "+    case 238 : if (DEBUG) { System.out.println(\"VariableInitializers ::= VariableInitializers COMMA...\"); }  //$NON-NLS-1$", "-    case 237 : if (DEBUG) { System.out.println(\"Block ::= OpenBlock LBRACE BlockStatementsopt RBRACE\"); }  //$NON-NLS-1$", "+    case 239 : if (DEBUG) { System.out.println(\"Block ::= OpenBlock LBRACE BlockStatementsopt RBRACE\"); }  //$NON-NLS-1$", "-    case 238 : if (DEBUG) { System.out.println(\"OpenBlock ::=\"); }  //$NON-NLS-1$", "+    case 240 : if (DEBUG) { System.out.println(\"OpenBlock ::=\"); }  //$NON-NLS-1$", "-    case 240 : if (DEBUG) { System.out.println(\"BlockStatements ::= BlockStatements BlockStatement\"); }  //$NON-NLS-1$", "+    case 242 : if (DEBUG) { System.out.println(\"BlockStatements ::= BlockStatements BlockStatement\"); }  //$NON-NLS-1$", "-    case 244 : if (DEBUG) { System.out.println(\"BlockStatement ::= InterfaceDeclaration\"); }  //$NON-NLS-1$", "+    case 246 : if (DEBUG) { System.out.println(\"BlockStatement ::= InterfaceDeclaration\"); }  //$NON-NLS-1$", "-    case 245 : if (DEBUG) { System.out.println(\"BlockStatement ::= AnnotationTypeDeclaration\"); }  //$NON-NLS-1$", "+    case 247 : if (DEBUG) { System.out.println(\"BlockStatement ::= AnnotationTypeDeclaration\"); }  //$NON-NLS-1$", "-    case 246 : if (DEBUG) { System.out.println(\"BlockStatement ::= EnumDeclaration\"); }  //$NON-NLS-1$", "+    case 248 : if (DEBUG) { System.out.println(\"BlockStatement ::= EnumDeclaration\"); }  //$NON-NLS-1$", "-    case 247 : if (DEBUG) { System.out.println(\"LocalVariableDeclarationStatement ::=...\"); }  //$NON-NLS-1$", "+    case 249 : if (DEBUG) { System.out.println(\"LocalVariableDeclarationStatement ::=...\"); }  //$NON-NLS-1$", "-    case 248 : if (DEBUG) { System.out.println(\"LocalVariableDeclaration ::= Type PushModifiers...\"); }  //$NON-NLS-1$", "+    case 250 : if (DEBUG) { System.out.println(\"LocalVariableDeclaration ::= Type PushModifiers...\"); }  //$NON-NLS-1$", "-    case 249 : if (DEBUG) { System.out.println(\"LocalVariableDeclaration ::= Modifiers Type...\"); }  //$NON-NLS-1$", "+    case 251 : if (DEBUG) { System.out.println(\"LocalVariableDeclaration ::= Modifiers Type...\"); }  //$NON-NLS-1$", "-    case 250 : if (DEBUG) { System.out.println(\"PushModifiers ::=\"); }  //$NON-NLS-1$", "+    case 252 : if (DEBUG) { System.out.println(\"PushModifiers ::=\"); }  //$NON-NLS-1$", "-    case 251 : if (DEBUG) { System.out.println(\"PushModifiersForHeader ::=\"); }  //$NON-NLS-1$", "+    case 253 : if (DEBUG) { System.out.println(\"PushModifiersForHeader ::=\"); }  //$NON-NLS-1$", "-    case 252 : if (DEBUG) { System.out.println(\"PushRealModifiers ::=\"); }  //$NON-NLS-1$", "+    case 254 : if (DEBUG) { System.out.println(\"PushRealModifiers ::=\"); }  //$NON-NLS-1$", "-    case 279 : if (DEBUG) { System.out.println(\"EmptyStatement ::= SEMICOLON\"); }  //$NON-NLS-1$", "+    case 281 : if (DEBUG) { System.out.println(\"EmptyStatement ::= SEMICOLON\"); }  //$NON-NLS-1$", "-    case 280 : if (DEBUG) { System.out.println(\"LabeledStatement ::= Label COLON Statement\"); }  //$NON-NLS-1$", "+    case 282 : if (DEBUG) { System.out.println(\"LabeledStatement ::= Label COLON Statement\"); }  //$NON-NLS-1$", "-    case 281 : if (DEBUG) { System.out.println(\"LabeledStatementNoShortIf ::= Label COLON...\"); }  //$NON-NLS-1$", "+    case 283 : if (DEBUG) { System.out.println(\"LabeledStatementNoShortIf ::= Label COLON...\"); }  //$NON-NLS-1$", "-    case 282 : if (DEBUG) { System.out.println(\"Label ::= Identifier\"); }  //$NON-NLS-1$", "+    case 284 : if (DEBUG) { System.out.println(\"Label ::= Identifier\"); }  //$NON-NLS-1$", "-     case 283 : if (DEBUG) { System.out.println(\"ExpressionStatement ::= StatementExpression SEMICOLON\"); }  //$NON-NLS-1$", "+     case 285 : if (DEBUG) { System.out.println(\"ExpressionStatement ::= StatementExpression SEMICOLON\"); }  //$NON-NLS-1$", "-    case 292 : if (DEBUG) { System.out.println(\"IfThenStatement ::= if LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "+    case 294 : if (DEBUG) { System.out.println(\"IfThenStatement ::= if LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "-    case 293 : if (DEBUG) { System.out.println(\"IfThenElseStatement ::= if LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "+    case 295 : if (DEBUG) { System.out.println(\"IfThenElseStatement ::= if LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "-    case 294 : if (DEBUG) { System.out.println(\"IfThenElseStatementNoShortIf ::= if LPAREN Expression...\"); }  //$NON-NLS-1$", "+    case 296 : if (DEBUG) { System.out.println(\"IfThenElseStatementNoShortIf ::= if LPAREN Expression...\"); }  //$NON-NLS-1$", "-    case 295 : if (DEBUG) { System.out.println(\"SwitchStatement ::= switch LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "+    case 297 : if (DEBUG) { System.out.println(\"SwitchStatement ::= switch LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "-    case 296 : if (DEBUG) { System.out.println(\"SwitchBlock ::= LBRACE RBRACE\"); }  //$NON-NLS-1$", "+    case 298 : if (DEBUG) { System.out.println(\"SwitchBlock ::= LBRACE RBRACE\"); }  //$NON-NLS-1$", "-    case 299 : if (DEBUG) { System.out.println(\"SwitchBlock ::= LBRACE SwitchBlockStatements...\"); }  //$NON-NLS-1$", "+    case 301 : if (DEBUG) { System.out.println(\"SwitchBlock ::= LBRACE SwitchBlockStatements...\"); }  //$NON-NLS-1$", "-    case 301 : if (DEBUG) { System.out.println(\"SwitchBlockStatements ::= SwitchBlockStatements...\"); }  //$NON-NLS-1$", "+    case 303 : if (DEBUG) { System.out.println(\"SwitchBlockStatements ::= SwitchBlockStatements...\"); }  //$NON-NLS-1$", "-    case 302 : if (DEBUG) { System.out.println(\"SwitchBlockStatement ::= SwitchLabels BlockStatements\"); }  //$NON-NLS-1$", "+    case 304 : if (DEBUG) { System.out.println(\"SwitchBlockStatement ::= SwitchLabels BlockStatements\"); }  //$NON-NLS-1$", "-    case 304 : if (DEBUG) { System.out.println(\"SwitchLabels ::= SwitchLabels SwitchLabel\"); }  //$NON-NLS-1$", "+    case 306 : if (DEBUG) { System.out.println(\"SwitchLabels ::= SwitchLabels SwitchLabel\"); }  //$NON-NLS-1$", "-     case 305 : if (DEBUG) { System.out.println(\"SwitchLabel ::= case ConstantExpression COLON\"); }  //$NON-NLS-1$", "+     case 307 : if (DEBUG) { System.out.println(\"SwitchLabel ::= case ConstantExpression COLON\"); }  //$NON-NLS-1$", "-     case 306 : if (DEBUG) { System.out.println(\"SwitchLabel ::= default COLON\"); }  //$NON-NLS-1$", "+     case 308 : if (DEBUG) { System.out.println(\"SwitchLabel ::= default COLON\"); }  //$NON-NLS-1$", "-    case 307 : if (DEBUG) { System.out.println(\"WhileStatement ::= while LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "+    case 309 : if (DEBUG) { System.out.println(\"WhileStatement ::= while LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "-    case 308 : if (DEBUG) { System.out.println(\"WhileStatementNoShortIf ::= while LPAREN Expression...\"); }  //$NON-NLS-1$", "+    case 310 : if (DEBUG) { System.out.println(\"WhileStatementNoShortIf ::= while LPAREN Expression...\"); }  //$NON-NLS-1$", "-    case 309 : if (DEBUG) { System.out.println(\"DoStatement ::= do Statement while LPAREN Expression...\"); }  //$NON-NLS-1$", "+    case 311 : if (DEBUG) { System.out.println(\"DoStatement ::= do Statement while LPAREN Expression...\"); }  //$NON-NLS-1$", "-    case 310 : if (DEBUG) { System.out.println(\"ForStatement ::= for LPAREN ForInitopt SEMICOLON...\"); }  //$NON-NLS-1$", "+    case 312 : if (DEBUG) { System.out.println(\"ForStatement ::= for LPAREN ForInitopt SEMICOLON...\"); }  //$NON-NLS-1$", "-    case 311 : if (DEBUG) { System.out.println(\"ForStatementNoShortIf ::= for LPAREN ForInitopt...\"); }  //$NON-NLS-1$", "+    case 313 : if (DEBUG) { System.out.println(\"ForStatementNoShortIf ::= for LPAREN ForInitopt...\"); }  //$NON-NLS-1$", "-    case 312 : if (DEBUG) { System.out.println(\"ForInit ::= StatementExpressionList\"); }  //$NON-NLS-1$", "+    case 314 : if (DEBUG) { System.out.println(\"ForInit ::= StatementExpressionList\"); }  //$NON-NLS-1$", "-    case 316 : if (DEBUG) { System.out.println(\"StatementExpressionList ::= StatementExpressionList...\"); }  //$NON-NLS-1$", "+    case 318 : if (DEBUG) { System.out.println(\"StatementExpressionList ::= StatementExpressionList...\"); }  //$NON-NLS-1$", "-    case 317 : if (DEBUG) { System.out.println(\"AssertStatement ::= assert Expression SEMICOLON\"); }  //$NON-NLS-1$", "+    case 319 : if (DEBUG) { System.out.println(\"AssertStatement ::= assert Expression SEMICOLON\"); }  //$NON-NLS-1$", "-    case 318 : if (DEBUG) { System.out.println(\"AssertStatement ::= assert Expression COLON Expression\"); }  //$NON-NLS-1$", "+    case 320 : if (DEBUG) { System.out.println(\"AssertStatement ::= assert Expression COLON Expression\"); }  //$NON-NLS-1$", "-    case 319 : if (DEBUG) { System.out.println(\"BreakStatement ::= break SEMICOLON\"); }  //$NON-NLS-1$", "+    case 321 : if (DEBUG) { System.out.println(\"BreakStatement ::= break SEMICOLON\"); }  //$NON-NLS-1$", "-    case 320 : if (DEBUG) { System.out.println(\"BreakStatement ::= break Identifier SEMICOLON\"); }  //$NON-NLS-1$", "+    case 322 : if (DEBUG) { System.out.println(\"BreakStatement ::= break Identifier SEMICOLON\"); }  //$NON-NLS-1$", "-    case 321 : if (DEBUG) { System.out.println(\"ContinueStatement ::= continue SEMICOLON\"); }  //$NON-NLS-1$", "+    case 323 : if (DEBUG) { System.out.println(\"ContinueStatement ::= continue SEMICOLON\"); }  //$NON-NLS-1$", "-    case 322 : if (DEBUG) { System.out.println(\"ContinueStatement ::= continue Identifier SEMICOLON\"); }  //$NON-NLS-1$", "+    case 324 : if (DEBUG) { System.out.println(\"ContinueStatement ::= continue Identifier SEMICOLON\"); }  //$NON-NLS-1$", "-    case 323 : if (DEBUG) { System.out.println(\"ReturnStatement ::= return Expressionopt SEMICOLON\"); }  //$NON-NLS-1$", "+    case 325 : if (DEBUG) { System.out.println(\"ReturnStatement ::= return Expressionopt SEMICOLON\"); }  //$NON-NLS-1$", "-    case 324 : if (DEBUG) { System.out.println(\"ThrowStatement ::= throw Expression SEMICOLON\"); }  //$NON-NLS-1$", "+    case 326 : if (DEBUG) { System.out.println(\"ThrowStatement ::= throw Expression SEMICOLON\"); }  //$NON-NLS-1$", "-    case 325 : if (DEBUG) { System.out.println(\"SynchronizedStatement ::= OnlySynchronized LPAREN...\"); }  //$NON-NLS-1$", "+    case 327 : if (DEBUG) { System.out.println(\"SynchronizedStatement ::= OnlySynchronized LPAREN...\"); }  //$NON-NLS-1$", "-    case 326 : if (DEBUG) { System.out.println(\"OnlySynchronized ::= synchronized\"); }  //$NON-NLS-1$", "+    case 328 : if (DEBUG) { System.out.println(\"OnlySynchronized ::= synchronized\"); }  //$NON-NLS-1$", "-    case 327 : if (DEBUG) { System.out.println(\"TryStatement ::= try TryBlock Catches\"); }  //$NON-NLS-1$", "+    case 329 : if (DEBUG) { System.out.println(\"TryStatement ::= try TryBlock Catches\"); }  //$NON-NLS-1$", "-    case 328 : if (DEBUG) { System.out.println(\"TryStatement ::= try TryBlock Catchesopt Finally\"); }  //$NON-NLS-1$", "+    case 330 : if (DEBUG) { System.out.println(\"TryStatement ::= try TryBlock Catchesopt Finally\"); }  //$NON-NLS-1$", "-    case 329 : if (DEBUG) { System.out.println(\"TryStatementWithResources ::= try ResourceSpecification\"); }  //$NON-NLS-1$", "+    case 331 : if (DEBUG) { System.out.println(\"TryStatementWithResources ::= try ResourceSpecification\"); }  //$NON-NLS-1$", "-    case 330 : if (DEBUG) { System.out.println(\"TryStatementWithResources ::= try ResourceSpecification\"); }  //$NON-NLS-1$", "+    case 332 : if (DEBUG) { System.out.println(\"TryStatementWithResources ::= try ResourceSpecification\"); }  //$NON-NLS-1$", "-    case 331 : if (DEBUG) { System.out.println(\"ResourceSpecification ::= LPAREN Resources ;opt RPAREN\"); }  //$NON-NLS-1$", "+    case 333 : if (DEBUG) { System.out.println(\"ResourceSpecification ::= LPAREN Resources ;opt RPAREN\"); }  //$NON-NLS-1$", "-    case 332 : if (DEBUG) { System.out.println(\";opt ::=\"); }  //$NON-NLS-1$", "+    case 334 : if (DEBUG) { System.out.println(\";opt ::=\"); }  //$NON-NLS-1$", "-    case 333 : if (DEBUG) { System.out.println(\";opt ::= SEMICOLON\"); }  //$NON-NLS-1$", "+    case 335 : if (DEBUG) { System.out.println(\";opt ::= SEMICOLON\"); }  //$NON-NLS-1$", "-    case 334 : if (DEBUG) { System.out.println(\"Resources ::= Resource\"); }  //$NON-NLS-1$", "+    case 336 : if (DEBUG) { System.out.println(\"Resources ::= Resource\"); }  //$NON-NLS-1$", "-    case 335 : if (DEBUG) { System.out.println(\"Resources ::= Resources TrailingSemiColon Resource\"); }  //$NON-NLS-1$", "+    case 337 : if (DEBUG) { System.out.println(\"Resources ::= Resources TrailingSemiColon Resource\"); }  //$NON-NLS-1$", "-    case 336 : if (DEBUG) { System.out.println(\"TrailingSemiColon ::= SEMICOLON\"); }  //$NON-NLS-1$", "+    case 338 : if (DEBUG) { System.out.println(\"TrailingSemiColon ::= SEMICOLON\"); }  //$NON-NLS-1$", "-    case 337 : if (DEBUG) { System.out.println(\"Resource ::= Type PushModifiers VariableDeclaratorId...\"); }  //$NON-NLS-1$", "+    case 339 : if (DEBUG) { System.out.println(\"Resource ::= Type PushModifiers VariableDeclaratorId...\"); }  //$NON-NLS-1$", "-    case 338 : if (DEBUG) { System.out.println(\"Resource ::= Modifiers Type PushRealModifiers...\"); }  //$NON-NLS-1$", "+    case 340 : if (DEBUG) { System.out.println(\"Resource ::= Modifiers Type PushRealModifiers...\"); }  //$NON-NLS-1$", "-    case 340 : if (DEBUG) { System.out.println(\"ExitTryBlock ::=\"); }  //$NON-NLS-1$", "+    case 342 : if (DEBUG) { System.out.println(\"ExitTryBlock ::=\"); }  //$NON-NLS-1$", "-    case 342 : if (DEBUG) { System.out.println(\"Catches ::= Catches CatchClause\"); }  //$NON-NLS-1$", "+    case 344 : if (DEBUG) { System.out.println(\"Catches ::= Catches CatchClause\"); }  //$NON-NLS-1$", "-    case 343 : if (DEBUG) { System.out.println(\"CatchClause ::= catch LPAREN CatchFormalParameter RPAREN\"); }  //$NON-NLS-1$", "+    case 345 : if (DEBUG) { System.out.println(\"CatchClause ::= catch LPAREN CatchFormalParameter RPAREN\"); }  //$NON-NLS-1$", "-    case 345 : if (DEBUG) { System.out.println(\"PushLPAREN ::= LPAREN\"); }  //$NON-NLS-1$", "+    case 347 : if (DEBUG) { System.out.println(\"PushLPAREN ::= LPAREN\"); }  //$NON-NLS-1$", "-    case 346 : if (DEBUG) { System.out.println(\"PushRPAREN ::= RPAREN\"); }  //$NON-NLS-1$", "+    case 348 : if (DEBUG) { System.out.println(\"PushRPAREN ::= RPAREN\"); }  //$NON-NLS-1$", "-    case 351 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= this\"); }  //$NON-NLS-1$", "+    case 353 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= this\"); }  //$NON-NLS-1$", "-    case 352 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Expression_NotName...\"); }  //$NON-NLS-1$", "+    case 354 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Expression_NotName...\"); }  //$NON-NLS-1$", "-    case 353 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Name PushRPAREN\"); }  //$NON-NLS-1$", "+    case 355 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Name PushRPAREN\"); }  //$NON-NLS-1$", "-    case 356 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT this\"); }  //$NON-NLS-1$", "+    case 358 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT this\"); }  //$NON-NLS-1$", "-    case 357 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT super\"); }  //$NON-NLS-1$", "+    case 359 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT super\"); }  //$NON-NLS-1$", "-    case 358 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT class\"); }  //$NON-NLS-1$", "+    case 360 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT class\"); }  //$NON-NLS-1$", "-    case 359 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name Dims DOT class\"); }  //$NON-NLS-1$", "+    case 361 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name Dims DOT class\"); }  //$NON-NLS-1$", "-    case 360 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PrimitiveType Dims DOT class\"); }  //$NON-NLS-1$", "+    case 362 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PrimitiveType Dims DOT class\"); }  //$NON-NLS-1$", "-    case 361 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PrimitiveType DOT class\"); }  //$NON-NLS-1$", "+    case 363 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PrimitiveType DOT class\"); }  //$NON-NLS-1$", "-    case 364 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "+    case 369 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name COLON_COLON...\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceExpressionNameForm();  ", "+\t\t\tbreak;", "+ ", "+    case 370 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name...\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceExpressionTypeForm(false);  ", "+\t\t\tbreak;", "+ ", "+    case 371 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name...\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceExpressionTypeForm(true);  ", "+\t\t\tbreak;", "+ ", "+    case 372 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Primary COLON_COLON...\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceExpressionPrimaryForm();  ", "+\t\t\tbreak;", "+ ", "+    case 373 : if (DEBUG) { System.out.println(\"NonWildTypeArgumentsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyTypeArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 375 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeIdentifierOrNew(false);  ", "+\t\t\tbreak;", "+ ", "+    case 376 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= new\"); }  //$NON-NLS-1$", "+\t\t    consumeIdentifierOrNew(true);  ", "+\t\t\tbreak;", "+ ", "+    case 377 : if (DEBUG) { System.out.println(\"LambdaExpression ::= LambdaParameters ARROW LambdaBody\"); }  //$NON-NLS-1$", "+\t\t    consumeLambdaExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 378 : if (DEBUG) { System.out.println(\"LambdaParameters ::= Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeElidedLambdaParameter(false);  ", "+\t\t\tbreak;", "+ ", "+    case 382 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameterList ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeFormalParameterList();  ", "+\t\t\tbreak;", "+ ", "+    case 383 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameter ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeElidedLambdaParameter(true);  ", "+\t\t\tbreak;", "+ ", "+    case 386 : if (DEBUG) { System.out.println(\"ElidedLeftBraceAndReturn ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeElidedLeftBraceAndReturn();  ", "+\t\t\tbreak;", "+ ", "+    case 387 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "-    case 365 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "+    case 388 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "-    case 366 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "+    case 389 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "-    case 367 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+    case 390 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-    case 368 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+    case 391 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-    case 369 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "+    case 392 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "-    case 370 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "+    case 393 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "-    case 371 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "+    case 394 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "-    case 372 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "+    case 395 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "-    case 373 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 396 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 375 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 398 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 376 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 399 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 378 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 401 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 380 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "+    case 403 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "-    case 381 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "+    case 404 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "-    case 382 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "+    case 405 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "-    case 383 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 406 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 384 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "+    case 407 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "-    case 385 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 408 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 386 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 409 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 388 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "+    case 411 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "-     case 390 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 413 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-     case 391 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "+     case 414 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "-     case 394 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 417 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-    case 395 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "+    case 418 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "-    case 396 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "+    case 419 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "-    case 397 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+    case 420 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-    case 398 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 421 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 399 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 422 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 400 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 423 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 401 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 424 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 402 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 425 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 403 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "+    case 426 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "-    case 404 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "+    case 427 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "-    case 405 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "+    case 428 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "-    case 407 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "+    case 430 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "-    case 410 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "+    case 433 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "-    case 411 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "+    case 434 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "-    case 412 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "+    case 435 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "-    case 415 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 438 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 416 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 439 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 418 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 441 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 419 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 442 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 421 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "+    case 444 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "-    case 422 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "+    case 445 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "-    case 424 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "+    case 447 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "-    case 425 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 448 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 426 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 449 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 427 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "+    case 450 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "-    case 428 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\"); }  //$NON-NLS-1$", "+    case 451 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\"); }  //$NON-NLS-1$", "-    case 429 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "+    case 452 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "-    case 430 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "+    case 453 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "-    case 431 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "+    case 454 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "-    case 432 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "+    case 455 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "-    case 434 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "+    case 457 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-    case 435 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "+    case 458 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-    case 436 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "+    case 459 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-    case 438 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "+    case 461 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "-    case 439 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "+    case 462 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "-    case 441 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 464 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 442 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 465 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 443 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 466 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 445 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "+    case 468 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "-    case 446 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "+    case 469 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "-    case 447 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "+    case 470 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "-    case 448 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "+    case 471 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "-    case 450 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "+    case 473 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "-    case 452 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "+    case 475 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-    case 453 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "+    case 476 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "-    case 455 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "+    case 478 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "-    case 457 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "+    case 480 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "-    case 459 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "+    case 482 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "-    case 461 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "+    case 484 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "-    case 463 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "+    case 486 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 465 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "+    case 488 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 468 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "+    case 491 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "-    case 470 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "+    case 493 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "-    case 471 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "+    case 494 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "-    case 472 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "+    case 495 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "-    case 473 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "+    case 496 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "-    case 474 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "+    case 497 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "-    case 475 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "+    case 498 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "-    case 476 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "+    case 499 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "-    case 477 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+    case 500 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-    case 478 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+    case 501 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-    case 479 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+    case 502 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-    case 480 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "+    case 503 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "-    case 481 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "+    case 504 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "-    case 482 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "+    case 505 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "-    case 486 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "+    case 506 : if (DEBUG) { System.out.println(\"Expression ::= AssignmentExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 509 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "-    case 491 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 514 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 492 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+    case 515 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-     case 493 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "+     case 516 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "-    case 494 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "+    case 517 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "-    case 495 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "+    case 518 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "-     case 497 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "+     case 520 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "-     case 499 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "+     case 522 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "-    case 503 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "+    case 526 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "-     case 507 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+     case 530 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-     case 508 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+     case 531 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-    case 509 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "+    case 532 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "-     case 510 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "+     case 533 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "-     case 512 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "+     case 535 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "-     case 516 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "+     case 539 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "-     case 518 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "+     case 541 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "-     case 519 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "+     case 542 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "-     case 520 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "+     case 543 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "-     case 521 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "+     case 544 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "-     case 522 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "+     case 545 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "-     case 523 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "+     case 546 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "-     case 524 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "+     case 547 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "-     case 525 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "+     case 548 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "-    case 527 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "+    case 550 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "-    case 528 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+    case 551 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-    case 529 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "+    case 552 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "-    case 530 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "+    case 553 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "-    case 531 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "+    case 554 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "-    case 532 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+    case 555 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-    case 533 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "+    case 556 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "-    case 535 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "+    case 558 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "-    case 536 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 559 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 538 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "+    case 561 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "-    case 539 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "+    case 562 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "-    case 540 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "+    case 563 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "-    case 541 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "+    case 564 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "-    case 542 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "+    case 565 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "-    case 543 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 566 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 544 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "+    case 567 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "-    case 545 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 568 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 546 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "+    case 569 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "-    case 547 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+    case 570 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-    case 548 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+    case 571 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-    case 550 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+    case 573 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-    case 552 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "+    case 575 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "-    case 553 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "+    case 576 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "-    case 557 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "+    case 580 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "-    case 558 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+    case 581 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-    case 560 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+    case 583 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-    case 563 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 586 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 564 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+    case 587 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-    case 566 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+    case 589 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-    case 569 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 592 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 570 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "+    case 593 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "-    case 571 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "+    case 594 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "-    case 572 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "+    case 595 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "-    case 573 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "+    case 596 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "-    case 574 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "+    case 597 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "-    case 575 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "+    case 598 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "-    case 576 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "+    case 599 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "-    case 577 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "+    case 600 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "-    case 578 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 601 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 579 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "+    case 602 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "-    case 580 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "+    case 603 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "-    case 581 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "+    case 604 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "-    case 582 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 605 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 583 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "+    case 606 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "-    case 584 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "+    case 607 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "-    case 585 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "+    case 608 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "-    case 586 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= Identifier\"); }  //$NON-NLS-1$", "+    case 609 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= Identifier\"); }  //$NON-NLS-1$", "-    case 587 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "+    case 610 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "-    case 589 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+    case 612 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-    case 591 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 614 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 592 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 615 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 594 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+    case 617 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-    case 595 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "+    case 618 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "-    case 597 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+    case 620 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-    case 598 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "+    case 621 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "-    case 599 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 622 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 600 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 623 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 602 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+    case 625 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-    case 603 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "+    case 626 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "-    case 609 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 632 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 610 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 633 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 613 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "+    case 636 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "-    case 614 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "+    case 637 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "-    case 617 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 640 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 618 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "+    case 641 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "-    case 619 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 642 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 620 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "+    case 643 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "-    case 621 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 644 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 622 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "+    case 645 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "-    case 624 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 647 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 625 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "+    case 648 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "-    case 626 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 649 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 627 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "+    case 650 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "-    case 629 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 652 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-    case 630 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 653 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 631 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 654 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-    case 632 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 655 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 633 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 656 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-    case 634 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 657 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 636 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 659 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "-    case 637 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "+    case 660 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "-    case 638 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 661 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "-    case 639 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "+    case 662 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "-    case 640 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 663 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 641 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "+    case 664 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "-    case 642 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 665 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 643 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "+    case 666 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "-    case 645 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "+    case 668 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "-    case 646 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 669 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 648 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 671 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 649 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "+    case 672 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-    case 650 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 673 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 651 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "+    case 674 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "-    case 653 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "+    case 676 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "-    case 654 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "+    case 677 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "-    case 656 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 679 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 657 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "+    case 680 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "-    case 659 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 682 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 660 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "+    case 683 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "-    case 662 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 685 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 663 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "+    case 686 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "-    case 665 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 688 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 666 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "+    case 689 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "-    case 668 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 691 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 669 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "+    case 692 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "-    case 673 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+    case 696 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-    case 674 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+    case 697 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-    case 675 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "+    case 698 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "-    case 676 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "+    case 699 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "-    case 677 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "+    case 700 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "-    case 678 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 701 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 680 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 703 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 681 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+    case 704 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-    case 683 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "+    case 706 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "-    case 684 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "+    case 707 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "-    case 685 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 708 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 686 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "+    case 709 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "-    case 687 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "+    case 710 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "-    case 688 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 711 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 689 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 712 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 697 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "+    case 720 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "-    case 698 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 721 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 699 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "+    case 722 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "-    case 702 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "+    case 725 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "-    case 703 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "+    case 726 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "-    case 704 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 727 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 705 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 728 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 707 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "+    case 730 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "-    case 710 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "+    case 733 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-    case 711 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "+    case 734 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-    case 712 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "+    case 735 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-    case 713 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "+    case 736 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-    case 714 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "+    case 737 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "-    case 716 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "+    case 739 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "-    case 717 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "+    case 740 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "-    case 718 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "+    case 741 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "-    case 719 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 742 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 720 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "+    case 743 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "-    case 721 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 744 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 722 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 745 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 723 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 746 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a2729433fc57141b29bbd504a781313", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java", "commitBeforeChange": "263d5090059fdde1fe0ad777198fe1aa5d325a3a", "commitAfterChange": "e933d7cecbab3959fae37cfd5312f4a1c4e994da", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["+\tint whiteStart = 0;", "-\t\t\tint whiteStart = this.currentPosition;", "-\t\t\tboolean isWhiteSpace;", "+\t\t\twhiteStart = this.currentPosition;", "+\t\t\tboolean isWhiteSpace, hasWhiteSpaces = false;", "+\t\t\tint offset = 0;", "-\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "-\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\tboolean checkIfUnicode = false;", "+\t\t\t\ttry {", "+\t\t\t\t\tcheckIfUnicode = ((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u');", "+\t\t\t\t} catch(IndexOutOfBoundsException e) {", "+\t\t\t\t\tif (this.tokenizeWhiteSpace && (whiteStart != this.currentPosition - 1)) {", "+\t\t\t\t\t\t// reposition scanner in case we are interested by spaces as tokens", "+\t\t\t\t\t\tthis.currentPosition--;", "+\t\t\t\t\t\tthis.startPosition = whiteStart;", "+\t\t\t\t\t\treturn TokenNameWHITESPACE;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (this.currentPosition > this.eofPosition) {", "+\t\t\t\t\t\t/* might be completing at eof (e.g. behind a dot) */", "+\t\t\t\t\t\tif (this.completionIdentifier == null && ", "+\t\t\t\t\t\t\tthis.startPosition == this.cursorLocation + 1){", "+\t\t\t\t\t\t\t// compute end of empty identifier.", "+\t\t\t\t\t\t\t// if the empty identifier is at the start of a next token the end of", "+\t\t\t\t\t\t\t// empty identifier is the end of the next token (eg. \"<empty token>next\").", "+\t\t\t\t\t\t \twhile(getNextCharAsJavaIdentifierPart()){/*empty*/}", "+\t\t\t\t\t\t \tthis.endOfEmptyToken = this.currentPosition - 1;", "+\t\t\t\t\t\t\tthis.currentPosition = this.startPosition; // for being detected as empty free identifier", "+\t\t\t\t\t\t\treturn TokenNameIdentifier;", "+\t\t\t\t\t\t}\t", "+\t\t\t\t\t\treturn TokenNameEOF;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (checkIfUnicode) {", "+\t\t\t\t\toffset = 6;", "-\t\t\t\t\tif (this.recordLineSeparator", "-\t\t\t\t\t\t&& ((this.currentCharacter == '\\r') || (this.currentCharacter == '\\n')))", "-\t\t\t\t\t\tpushLineSeparator();", "+\t\t\t\t\toffset = 1;", "+\t\t\t\t\tif ((this.currentCharacter == '\\r') || (this.currentCharacter == '\\n')) {", "+\t\t\t\t\t\t//checkNonExternalizedString();", "+\t\t\t\t\t\tif (this.recordLineSeparator) {", "+\t\t\t\t\t\t\tpushLineSeparator();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.currentLine = null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (isWhiteSpace) {", "+\t\t\t\t\thasWhiteSpaces = true;", "-\t\t\tif (this.tokenizeWhiteSpace && (whiteStart != this.currentPosition - 1)) {", "+\t\t\tif (this.tokenizeWhiteSpace && hasWhiteSpaces) {", "-\t\t\t\tthis.currentPosition--;", "+\t\t\t\tthis.currentPosition-=offset;", "+\t\t\t\tcase '@' :", "+\t\t\t\t\treturn TokenNameAT;", "-\t\t\t\t    }", "-\t\t\t\t\tif (getNextCharAsDigit())", "+\t\t\t\t    }\t\t\t\t\t", "+\t\t\t\t\tif (getNextCharAsDigit()) {", "-\t\t\t\t\treturn TokenNameDOT;", "+\t\t\t\t\t}", "+\t\t\t\t\tint temp = this.currentPosition;", "+\t\t\t\t\tif (getNextChar('.')) {", "+\t\t\t\t\t\tif (getNextChar('.')) {", "+\t\t\t\t\t\t\treturn TokenNameELLIPSIS;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.currentPosition = temp;", "+\t\t\t\t\t\t\treturn TokenNameDOT;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.currentPosition = temp;", "+\t\t\t\t\t\treturn TokenNameDOT;", "+\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.returnOnlyGreater) {", "+\t\t\t\t\t\t\treturn TokenNameGREATER;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "-\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\tboolean checkIfUnicode = false;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tcheckIfUnicode = ((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u');", "+\t\t\t\t\t\t} catch(IndexOutOfBoundsException e) {", "+\t\t\t\t\t\t\tthis.currentPosition--;", "+\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_CHARACTER_CONSTANT);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (checkIfUnicode) {", "+\t\t\t\t\t\tboolean isUnicode = false;", "+\t\t\t\t\t\t\tisUnicode = true;", "-\t\t\t\t\t\t\t\tfor (int lookAhead = 0; lookAhead < 50; lookAhead++) {", "-\t\t\t\t\t\t\t\t\tif (this.currentPosition + lookAhead == this.source.length)", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tif (this.source[this.currentPosition + lookAhead] == '\\n')", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tif (this.source[this.currentPosition + lookAhead] == '\\\"') {", "-\t\t\t\t\t\t\t\t\t\tthis.currentPosition += lookAhead + 1;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tif (isUnicode) {", "+\t\t\t\t\t\t\t\t\tint start = this.currentPosition;", "+\t\t\t\t\t\t\t\t\tfor (int lookAhead = 0; lookAhead < 50; lookAhead++) {", "+\t\t\t\t\t\t\t\t\t\tif (this.currentPosition >= this.eofPosition) {", "+\t\t\t\t\t\t\t\t\t\t\tthis.currentPosition = start;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\') && (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t\t\t\t\tisUnicode = true;", "+\t\t\t\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tisUnicode = false;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (!isUnicode && this.currentCharacter == '\\n') {", "+\t\t\t\t\t\t\t\t\t\t\tthis.currentPosition--; // set current position on new line character", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (this.currentCharacter == '\\\"') {", "+\t\t\t\t\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_CHAR_IN_STRING);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tthis.currentPosition--; // set current position on new line character", "+\t\t\t\t\t\tthis.currentPosition--;", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t//get the next char ", "-\t\t\t\t\t\t\t\tthis.lastCommentLinePosition = this.currentPosition;", "-\t\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "-\t\t\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\t\t\t\t//-------------unicode traitement ------------", "-\t\t\t\t\t\t\t\t\tint c1 = 0, c2 = 0, c3 = 0, c4 = 0;", "-\t\t\t\t\t\t\t\t\tthis.currentPosition++;", "-\t\t\t\t\t\t\t\t\twhile (this.source[this.currentPosition] == 'u') {", "-\t\t\t\t\t\t\t\t\t\tthis.currentPosition++;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif ((c1 = Character.getNumericValue(this.source[this.currentPosition++])) > 15", "-\t\t\t\t\t\t\t\t\t\t|| c1 < 0", "-\t\t\t\t\t\t\t\t\t\t|| (c2 = Character.getNumericValue(this.source[this.currentPosition++])) > 15", "-\t\t\t\t\t\t\t\t\t\t|| c2 < 0", "-\t\t\t\t\t\t\t\t\t\t|| (c3 = Character.getNumericValue(this.source[this.currentPosition++])) > 15", "-\t\t\t\t\t\t\t\t\t\t|| c3 < 0", "-\t\t\t\t\t\t\t\t\t\t|| (c4 = Character.getNumericValue(this.source[this.currentPosition++])) > 15", "-\t\t\t\t\t\t\t\t\t\t|| c4 < 0) {", "-\t\t\t\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_UNICODE_ESCAPE);", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tthis.currentCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-", "-\t\t\t\t\t\t\t\t//handle the \\\\u case manually into comment", "-\t\t\t\t\t\t\t\tif (this.currentCharacter == '\\\\') {", "-\t\t\t\t\t\t\t\t\tif (this.source[this.currentPosition] == '\\\\')", "-\t\t\t\t\t\t\t\t\t\tthis.currentPosition++;", "-\t\t\t\t\t\t\t\t} //jump over the \\\\", "-\t\t\t\t\t\t\t\twhile (this.currentCharacter != '\\r' && this.currentCharacter != '\\n') {", "-\t\t\t\t\t\t\t\t\t//get the next char ", "-\t\t\t\t\t\t\t\t\tthis.lastCommentLinePosition = this.currentPosition;", "-\t\t\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "-\t\t\t\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\t\t\t\t\t//-------------unicode traitement ------------", "-\t\t\t\t\t\t\t\t\t\tint c1 = 0, c2 = 0, c3 = 0, c4 = 0;", "-\t\t\t\t\t\t\t\t\t\tthis.currentPosition++;", "-\t\t\t\t\t\t\t\t\t\twhile (this.source[this.currentPosition] == 'u') {", "-\t\t\t\t\t\t\t\t\t\t\tthis.currentPosition++;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif ((c1 = Character.getNumericValue(this.source[this.currentPosition++])) > 15", "-\t\t\t\t\t\t\t\t\t\t\t|| c1 < 0", "-\t\t\t\t\t\t\t\t\t\t\t|| (c2 = Character.getNumericValue(this.source[this.currentPosition++])) > 15", "-\t\t\t\t\t\t\t\t\t\t\t|| c2 < 0", "-\t\t\t\t\t\t\t\t\t\t\t|| (c3 = Character.getNumericValue(this.source[this.currentPosition++])) > 15", "-\t\t\t\t\t\t\t\t\t\t\t|| c3 < 0", "-\t\t\t\t\t\t\t\t\t\t\t|| (c4 = Character.getNumericValue(this.source[this.currentPosition++])) > 15", "-\t\t\t\t\t\t\t\t\t\t\t|| c4 < 0) {", "-\t\t\t\t\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_UNICODE_ESCAPE);", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tthis.currentCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t//handle the \\\\u case manually into comment", "-\t\t\t\t\t\t\t\t\tif (this.currentCharacter == '\\\\') {", "-\t\t\t\t\t\t\t\t\t\tif (this.source[this.currentPosition] == '\\\\')", "-\t\t\t\t\t\t\t\t\t\t\tthis.currentPosition++;", "-\t\t\t\t\t\t\t\t\t} //jump over the \\\\", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\trecordComment(TokenNameCOMMENT_LINE);", "-\t\t\t\t\t\t\t\tif (this.startPosition <= this.cursorLocation && this.cursorLocation < this.currentPosition-1){", "-\t\t\t\t\t\t\t\t\tthrow new InvalidCursorLocation(InvalidCursorLocation.NO_COMPLETION_INSIDE_COMMENT);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (this.recordLineSeparator && ((this.currentCharacter == '\\r') || (this.currentCharacter == '\\n'))) {", "-\t\t\t\t\t\t\t\t\tpushLineSeparator();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (this.tokenizeComments) {", "-\t\t\t\t\t\t\t\t\tthis.currentPosition--; // reset one character behind", "-\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} catch (IndexOutOfBoundsException e) {", "-\t\t\t\t\t\t\t\trecordComment(TokenNameCOMMENT_LINE);", "-\t\t\t\t\t\t\t\tif (this.taskTags != null) checkTaskTag(this.startPosition, this.currentPosition-1);", "-\t\t\t\t\t\t\t\tif (this.tokenizeComments) {", "-\t\t\t\t\t\t\t\t\tthis.currentPosition--; // reset one character behind", "-\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (test > 0) { //traditional and javadoc comment", "-\t\t\t\t\t\t\tboolean isJavadoc = false, star = false;", "-\t\t\t\t\t\t\t// consume next character", "-\t\t\t\t\t\t\tthis.unicodeAsBackSlash = false;", "-\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "-\t\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "-\t\t\t\t\t\t\t\t    this.unicodeStoreAt(++this.withoutUnicodePtr);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-", "-\t\t\t\t\t\t\tif (this.currentCharacter == '*') {", "-\t\t\t\t\t\t\t\tisJavadoc = true;", "-\t\t\t\t\t\t\t\tstar = true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (this.recordLineSeparator", "-\t\t\t\t\t\t\t\t&& ((this.currentCharacter == '\\r') || (this.currentCharacter == '\\n')))", "-\t\t\t\t\t\t\t\tpushLineSeparator();", "+\t\t\t\t\t\t\tthis.lastCommentLinePosition = this.currentPosition;", "+", "-\t\t\t\t\t\t\t\t// empty comment is not a javadoc /**/", "-\t\t\t\t\t\t\t\tif (this.currentCharacter == '/') { ", "-\t\t\t\t\t\t\t\t\tisJavadoc = false;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t//loop until end of comment */ ", "-\t\t\t\t\t\t\t\twhile ((this.currentCharacter != '/') || (!star)) {", "-\t\t\t\t\t\t\t\t\tif (this.recordLineSeparator", "-\t\t\t\t\t\t\t\t\t\t&& ((this.currentCharacter == '\\r') || (this.currentCharacter == '\\n')))", "-\t\t\t\t\t\t\t\t\t\tpushLineSeparator();", "-\t\t\t\t\t\t\t\t\tstar = this.currentCharacter == '*';", "-\t\t\t\t\t\t\t\t\t//get next char", "+\t\t\t\t\t\t\t\tboolean isUnicode = false;", "+\t\t\t\t\t\t\t\twhile (this.currentCharacter != '\\r' && this.currentCharacter != '\\n') {", "+\t\t\t\t\t\t\t\t\tthis.lastCommentLinePosition = this.currentPosition;", "+\t\t\t\t\t\t\t\t\t//get the next char ", "+\t\t\t\t\t\t\t\t\tisUnicode = false;", "+\t\t\t\t\t\t\t\t\t\tisUnicode = true;", "+\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t * We need to completely consume the line break", "+\t\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\t\tif (this.currentCharacter == '\\r'", "+\t\t\t\t\t\t\t\t   && this.source.length > this.currentPosition) {", "+\t\t\t\t\t\t\t\t   \tif (this.source[this.currentPosition] == '\\n') {", "+\t\t\t\t\t\t\t\t\t\tthis.currentPosition++;", "+\t\t\t\t\t\t\t\t\t\tthis.currentCharacter = '\\n';", "+\t\t\t\t\t\t\t\t   \t} else if ((this.source[this.currentPosition] == '\\\\')", "+\t\t\t\t\t\t\t\t\t\t&& (this.source[this.currentPosition + 1] == 'u')) {", "+\t\t\t\t\t\t\t\t\t\tisUnicode = true;", "+\t\t\t\t\t\t\t\t\t\tchar unicodeChar;", "+\t\t\t\t\t\t\t\t\t\tint index = this.currentPosition + 1;", "+\t\t\t\t\t\t\t\t\t\tindex++;", "+\t\t\t\t\t\t\t\t\t\twhile (this.source[index] == 'u') {", "+\t\t\t\t\t\t\t\t\t\t\tindex++;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t//-------------unicode traitement ------------", "+\t\t\t\t\t\t\t\t\t\tint c1 = 0, c2 = 0, c3 = 0, c4 = 0;", "+\t\t\t\t\t\t\t\t\t\tif ((c1 = Character.getNumericValue(this.source[index++])) > 15", "+\t\t\t\t\t\t\t\t\t\t\t|| c1 < 0", "+\t\t\t\t\t\t\t\t\t\t\t|| (c2 = Character.getNumericValue(this.source[index++])) > 15", "+\t\t\t\t\t\t\t\t\t\t\t|| c2 < 0", "+\t\t\t\t\t\t\t\t\t\t\t|| (c3 = Character.getNumericValue(this.source[index++])) > 15", "+\t\t\t\t\t\t\t\t\t\t\t|| c3 < 0", "+\t\t\t\t\t\t\t\t\t\t\t|| (c4 = Character.getNumericValue(this.source[index++])) > 15", "+\t\t\t\t\t\t\t\t\t\t\t|| c4 < 0) {", "+\t\t\t\t\t\t\t\t\t\t\tthis.currentPosition = index;", "+\t\t\t\t\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_UNICODE_ESCAPE);", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tunicodeChar = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (unicodeChar == '\\n') {", "+\t\t\t\t\t\t\t\t\t\t\tthis.currentPosition = index;", "+\t\t\t\t\t\t\t\t\t\t\tthis.currentCharacter = '\\n';", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t   \t}", "+\t\t\t\t\t\t\t\trecordComment(TokenNameCOMMENT_LINE);", "+\t\t\t\t\t\t\t\tif (this.startPosition <= this.cursorLocation && this.cursorLocation < this.currentPosition-1){", "+\t\t\t\t\t\t\t\t\tthrow new InvalidCursorLocation(InvalidCursorLocation.NO_COMPLETION_INSIDE_COMMENT);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (this.taskTags != null) checkTaskTag(this.startPosition, this.currentPosition);", "+\t\t\t\t\t\t\t\tif ((this.currentCharacter == '\\r') || (this.currentCharacter == '\\n')) {", "+\t\t\t\t\t\t\t\t\t//checkNonExternalizedString();", "+\t\t\t\t\t\t\t\t\tif (this.recordLineSeparator) {", "+\t\t\t\t\t\t\t\t\t\tif (isUnicode) {", "+\t\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tthis.currentLine = null;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (this.tokenizeComments) {", "+\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} catch (IndexOutOfBoundsException e) {", "+\t\t\t\t\t\t\t\tthis.currentPosition--;", "+\t\t\t\t\t\t\t\trecordComment(TokenNameCOMMENT_LINE);", "+\t\t\t\t\t\t\t\tif (this.taskTags != null) checkTaskTag(this.startPosition, this.currentPosition);", "+\t\t\t\t\t\t\t\tif (this.tokenizeComments) {", "+\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tthis.currentPosition++;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (test > 0) { //traditional and javadoc comment", "+\t\t\t\t\t\t\ttry { //get the next char", "+\t\t\t\t\t\t\t\tboolean isJavadoc = false, star = false;", "+\t\t\t\t\t\t\t\tboolean isUnicode = false;", "+\t\t\t\t\t\t\t\t// consume next character", "+\t\t\t\t\t\t\t\tthis.unicodeAsBackSlash = false;", "+\t\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t\t\t\t\tisUnicode = true;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tisUnicode = false;", "+\t\t\t\t\t\t\t\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\t\t\t    this.unicodeStoreAt(++this.withoutUnicodePtr);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t", "+\t\t\t\t\t\t\t\tif (this.currentCharacter == '*') {", "+\t\t\t\t\t\t\t\t\tisJavadoc = true;", "+\t\t\t\t\t\t\t\t\tstar = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif ((this.currentCharacter == '\\r') || (this.currentCharacter == '\\n')) {", "+\t\t\t\t\t\t\t\t\t//checkNonExternalizedString();", "+\t\t\t\t\t\t\t\t\tif (this.recordLineSeparator) {", "+\t\t\t\t\t\t\t\t\t\tif (!isUnicode) {", "+\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tthis.currentLine = null;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tisUnicode = false;", "+\t\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t\t\t//-------------unicode traitement ------------", "+\t\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t\t\t\t\tisUnicode = true;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tisUnicode = false;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t//handle the \\\\u case manually into comment", "+\t\t\t\t\t\t\t\tif (this.currentCharacter == '\\\\') {", "+\t\t\t\t\t\t\t\t\tif (this.source[this.currentPosition] == '\\\\')", "+\t\t\t\t\t\t\t\t\t\tthis.currentPosition++;", "+\t\t\t\t\t\t\t\t} //jump over the \\\\", "+\t\t\t\t\t\t\t\t// empty comment is not a javadoc /**/", "+\t\t\t\t\t\t\t\tif (this.currentCharacter == '/') { ", "+\t\t\t\t\t\t\t\t\tisJavadoc = false;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t//loop until end of comment */ ", "+\t\t\t\t\t\t\t\twhile ((this.currentCharacter != '/') || (!star)) {", "+\t\t\t\t\t\t\t\t\tif ((this.currentCharacter == '\\r') || (this.currentCharacter == '\\n')) {", "+\t\t\t\t\t\t\t\t\t\t//checkNonExternalizedString();", "+\t\t\t\t\t\t\t\t\t\tif (this.recordLineSeparator) {", "+\t\t\t\t\t\t\t\t\t\t\tif (!isUnicode) {", "+\t\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tthis.currentLine = null;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tstar = this.currentCharacter == '*';", "+\t\t\t\t\t\t\t\t\t//get next char", "+\t\t\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t\t\t\t//-------------unicode traitement ------------", "+\t\t\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t\t\t\t\t\tisUnicode = true;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tisUnicode = false;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t//handle the \\\\u case manually into comment", "+\t\t\t\t\t\t\t\t\tif (this.currentCharacter == '\\\\') {", "+\t\t\t\t\t\t\t\t\t\tif (this.source[this.currentPosition] == '\\\\')", "+\t\t\t\t\t\t\t\t\t\t\tthis.currentPosition++;", "+\t\t\t\t\t\t\t\t\t} //jump over the \\\\", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (this.taskTags != null) checkTaskTag(this.startPosition, this.currentPosition);", "+\t\t\t\t\t\t\t\tthis.currentPosition--;", "-\t\t\t\t\tif (Character.isDigit(this.currentCharacter))", "+\t\t\t\t\tif (isDigit(this.currentCharacter)) {", "+\t\t\t\t\t}", "-\t\t// eof reached", "+\t\tif (this.tokenizeWhiteSpace && (whiteStart != this.currentPosition - 1)) {", "+\t\t\t// reposition scanner in case we are interested by spaces as tokens", "+\t\t\tthis.currentPosition--;", "+\t\t\tthis.startPosition = whiteStart;", "+\t\t\treturn TokenNameWHITESPACE;", "+\t\t}"]}], "num": 31817}
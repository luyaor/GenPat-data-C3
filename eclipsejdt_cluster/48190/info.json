{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3fbf5df006c8ba63b32be2a58ec885bf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "144073824f056a1bbaec0415569fbc44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 341, "methodNumberAfterChange": 320, "signatureBeforeChange": " String testCodedValueOf(long[] data)", "signatureAfterChange": " public void test1503()", "diff": ["+// encoding validation", "+public void test1503() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  void foo(Object o, int i, boolean b, Object u) {\\n\" +", "+\t\t\t\"    if (b) {\\n\" +", "+\t\t\t\"      o = u;\\n\" +", "+\t\t\t\"    } else {\\n\" +", "+\t\t\t\"      o = new Object();\\n\" +", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    o.toString();\\n\" + ", "+\t\t\t\"    switch (i) {\\n\" + ", "+\t\t\t\"      case 0:\\n\" +", "+\t\t\t\"        if (b) {\\n\" +", "+\t\t\t\"          o = u;\\n\" +", "+\t\t\t\"        } else {\\n\" +", "+\t\t\t\"          o = new Object();\\n\" +", "+\t\t\t\"        }\\n\" +", "+\t\t\t\"        break;\\n\" + ", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"    if (o == null) { /* empty */ }\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"\");", "+}", "-// only works for info coded on bit 0 - least significant", "-String testCodedValueOf(long[] data) {", "-\tStringBuffer result = new StringBuffer(4);", "-\tfor (int i = 0; i < data.length; i++) {", "-\t\tresult.append(data[i] == 0 ? '0' : '1');", "-\t}", "-\treturn result.toString();", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e51616a4c05ea554d69d7ce147719ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 342, "methodNumberAfterChange": 319, "signatureBeforeChange": "  String testStringValueOf(long[] data)", "signatureAfterChange": " public void test1502()", "diff": ["+// encoding validation", "+public void test1502() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  void foo(Object o, int i, boolean b, Object u) {\\n\" +", "+\t\t\t\"    if (b) {\\n\" +", "+\t\t\t\"      o = u;\\n\" +", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    o.toString();\\n\" + ", "+\t\t\t\"    switch (i) {\\n\" + ", "+\t\t\t\"      case 0:\\n\" +", "+\t\t\t\"        if (b) {\\n\" +", "+\t\t\t\"          o = u;\\n\" +", "+\t\t\t\"        } else {\\n\" +", "+\t\t\t\"          o = new Object();\\n\" +", "+\t\t\t\"        }\\n\" +", "+\t\t\t\"        break;\\n\" + ", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"    if (o == null) { /* empty */ }\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"\");", "+}", "-", "-String testStringValueOf(long[] data) {", "-\tStringBuffer result = new StringBuffer(9);", "-\tresult.append('{');", "-\tfor (int j = 0; j < 4; j++) {", "-\t\tif (j > 0) {", "-\t\t\tresult.append(',');", "-\t\t}", "-\t\tresult.append(data[j]);", "-\t}", "-\tresult.append('}');", "-\treturn result.toString();", "-}"]}], "num": 48190}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a2bc64338b0342e5bdae61c7002dd52", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ef713d35528f8d49f66679dabc48ae4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "ec8e689e69ce65d5a3f127f9c7126c4bebdd7b60", "commitAfterChange": "c922c60b9bc5fcda7fb9f2a477eba6f8f95a6cf9", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic static void resolve( \t\tASTRequestor requestor, \t\tint apiLevel, \t\tMap options, \t\tIJavaProject javaProject, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "signatureAfterChange": "  \tpublic static void resolve( \t\tICompilationUnit[] compilationUnits, \t\tString[] bindingKeys, \t\tASTRequestor requestor, \t\tint apiLevel, \t\tMap options, \t\tIJavaProject javaProject, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "diff": ["+\t\tICompilationUnit[] compilationUnits,", "+\t\tString[] bindingKeys,", "-\t\t\tresolver.resolve(requestor, apiLevel, options, owner, monitor);", "+\t\t\tresolver.resolve(compilationUnits, bindingKeys, requestor, apiLevel, options, owner, monitor);", "-\t\t\tparse(requestor, apiLevel, options, monitor);", "+\t\t\tparse(compilationUnits, requestor, apiLevel, options, monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "defaad25d65f0e0952deb20f45def82c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "0f841a0360389f0f91aef636ca6531276c4a074d", "commitAfterChange": "4e57894c46e6fdc6da393db7e5519e070814fd68", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic static void resolve( \t\tICompilationUnit[] compilationUnits, \t\tString[] bindingKeys, \t\tASTRequestor requestor, \t\tint apiLevel, \t\tMap options, \t\tIJavaProject javaProject, \t\tWorkingCopyOwner owner, \t\tboolean statementsRecovery, \t\tIProgressMonitor monitor)", "signatureAfterChange": "  \tpublic static void resolve( \t\tICompilationUnit[] compilationUnits, \t\tString[] bindingKeys, \t\tASTRequestor requestor, \t\tint apiLevel, \t\tMap options, \t\tIJavaProject javaProject, \t\tWorkingCopyOwner owner, \t\tint flags, \t\tIProgressMonitor monitor)", "diff": ["-\t\tboolean statementsRecovery,", "+\t\tint flags,", "-\t", "+", "-\t\t\t\t\tgetCompilerOptions(options, statementsRecovery),", "+\t\t\t\t\tgetCompilerOptions(options, (flags & ICompilationUnit.ENABLE_STATEMENTS_RECOVERY) != 0),", "-\t\t\t\t\tproblemFactory, ", "+\t\t\t\t\tproblemFactory,", "-\t\t\tresolver.resolve(compilationUnits, bindingKeys, requestor, apiLevel, options, owner);", "+\t\t\tresolver.resolve(compilationUnits, bindingKeys, requestor, apiLevel, options, owner, flags);", "-\t\t\tparse(compilationUnits, requestor, apiLevel, options, monitor);", "+\t\t\tparse(compilationUnits, requestor, apiLevel, options, flags, monitor);"]}], "num": 55589}
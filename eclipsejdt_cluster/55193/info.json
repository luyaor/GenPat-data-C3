{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1999253cfa2383eb237ac48f351703aa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20a935c536f2e6251c2cfe1bbaf63cbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AnnotationParser.java", "commitBeforeChange": "73e6c55b6cebcb032c8128286708483f86167b64", "commitAfterChange": "5326f4925981afee39790c88bc133bd18e542033", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate AnnotationMessageSend parseArguments(TypeReference receiver) throws InvalidInputException", "signatureAfterChange": "  \tprivate AnnotationMessageSend parseArguments(TypeReference receiver) throws InvalidInputException", "diff": ["-\t\t\tint argStart = this.scanner.getCurrentTokenStartPosition();", "+\t\t\tint argStart = typeRef.sourceStart;", "+\t\t\tint argEnd = typeRef.sourceEnd;", "+\t\t\t\targEnd = this.scanner.getCurrentTokenEndPosition();", "-", "+\t\t\t", "-\t\t\t\tAnnotationArgumentExpression expr = new AnnotationArgumentExpression(name, argStart, this.scanner", "-\t\t\t\t\t\t.getCurrentTokenStartPosition()", "-\t\t\t\t\t\t- 1, typeRef);", "+\t\t\t\tAnnotationArgumentExpression expr = new AnnotationArgumentExpression(name, argStart, argEnd, typeRef);", "-\t\t\t\tAnnotationArgumentExpression expr = new AnnotationArgumentExpression(name,", "-\t\t\t\t\t\targStart,", "-\t\t\t\t\t\tthis.scanner.getCurrentTokenStartPosition()- 1,", "-\t\t\t\t\t\ttypeRef);", "+\t\t\t\tAnnotationArgumentExpression expr = new AnnotationArgumentExpression(name, argStart, argEnd, typeRef);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b36fa46c2069e9eda89ba38215527883", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "165d2ee0a4a374ec3dbb0f3df780db24664ac692", "commitAfterChange": "146dc3b7afcca724ac2ba30b2cbb382c047a5a77", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "signatureAfterChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "diff": ["-\t\t\t// Read possible array declaration", "+\t\t\t// Read possible additional type info", "+\t\t\tboolean isVarargs = false;", "+\t\t\t\t// array declaration", "+\t\t\t} else if (readToken() == TerminalTokens.TokenNameELLIPSIS) {", "+\t\t\t\t// ellipsis declaration", "+\t\t\t\tint dimStart = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\tdimPositions[dim++] = (((long) dimStart) << 32) + this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\tconsumeToken();", "+\t\t\t\tisVarargs = true;", "-\t\t\t\tObject argument = createArgumentReference(name, dim, typeRef, dimPositions, argNamePos);", "+\t\t\t\tObject argument = createArgumentReference(name, dim, isVarargs, typeRef, dimPositions, argNamePos);", "-\t\t\t\tObject argument = createArgumentReference(name, dim, typeRef, dimPositions, argNamePos);", "+\t\t\t\tObject argument = createArgumentReference(name, dim, isVarargs, typeRef, dimPositions, argNamePos);"]}], "num": 55193}
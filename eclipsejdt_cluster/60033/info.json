{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bcc0f49e69f622b7a78d20184d6c21ef", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "858eb19aa5e8098fd4fd1139e3f902ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java", "commitBeforeChange": "30087d59ff5bea89d3392799267963cf724c3b0a", "commitAfterChange": "b08badd66fa6a6f7b4561ee1019c14e2a696043e", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " protected IBuffer openBuffer(IProgressMonitor pm) throws JavaModelException", "signatureAfterChange": " protected IBuffer openBuffer(IProgressMonitor pm) throws JavaModelException", "diff": ["+\t\treturn mapSource(mapper);", "+\t} else if (!checkAutomaticSourceMapping) {", "+\t\t/*", "+\t\t * We try to see if we can automatically attach a source", "+\t\t * source files located inside the same folder than its .class file", "+\t\t * See bug 36510.", "+\t\t */", "+\t\tPackageFragmentRoot root = getPackageFragmentRoot();", "+\t\tif (root.isArchive()) {", "+\t\t\t// root is a jar file or a zip file", "+\t\t\tString elementName = getElementName();", "+\t\t\tStringBuffer sourceFileName = new StringBuffer(elementName.substring(0, elementName.lastIndexOf('.')));", "+\t\t\tsourceFileName.append(Util.SUFFIX_java);", "+\t\t\tJarPackageFragmentRoot jarPackageFragmentRoot = (JarPackageFragmentRoot) root;", "+\t\t\tZipFile jar = null;", "+\t\t\ttry {", "+\t\t\t\tjar = jarPackageFragmentRoot.getJar();", "+\t\t\t\tIPackageFragment packageFragment = (IPackageFragment) getParent();", "+\t\t\t\tZipEntry zipEntry = null;", "+\t\t\t\tif (packageFragment.isDefaultPackage()) {", "+\t\t\t\t\tzipEntry = jar.getEntry(sourceFileName.toString());", "+\t\t\t\t} else {", "+\t\t\t\t\tzipEntry = jar.getEntry(getParent().getElementName() + '/' + sourceFileName.toString());", "+\t\t\t\t}", "+\t\t\t\tif (zipEntry != null) {", "+\t\t\t\t\t// found a source file", "+\t\t\t\t\tcheckAutomaticSourceMapping = true;", "+\t\t\t\t\troot.attachSource(root.getPath(), null, null);", "+\t\t\t\t\tSourceMapper sourceMapper = getSourceMapper();", "+\t\t\t\t\tif (sourceMapper != null) {", "+\t\t\t\t\t\treturn mapSource(sourceMapper);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\tif (e instanceof JavaModelException) throw (JavaModelException)e;", "+\t\t\t\tthrow new JavaModelException(e);", "+\t\t\t} finally {", "+\t\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(jar);", "+\t\t\t}", "+\t\t} else {", "+\t\t\t// Attempts to find the corresponding java file", "+\t\t\tString qualifiedName = getType().getFullyQualifiedName();", "+\t\t\tNameLookup lookup = ((JavaProject) getJavaProject()).getNameLookup();", "+\t\t\tICompilationUnit cu = lookup.findCompilationUnit(qualifiedName);", "+\t\t\tif (cu != null) {", "+\t\t\t\treturn cu.getBuffer();", "+\t\t\t} else\t{", "+\t\t\t\t// root is a class folder", "+\t\t\t\tIPath sourceFilePath = getPath().removeFileExtension().addFileExtension(\"java\");", "+\t\t\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "+\t\t\t\tif (workspace == null) {", "+\t\t\t\t\tcheckAutomaticSourceMapping = true; // we don't want to check again", "+\t\t\t\t\treturn null; // workaround for http://bugs.eclipse.org/bugs/show_bug.cgi?id=34069", "+\t\t\t\t}", "+\t\t\t\tif (JavaModel.getTarget(", "+\t\t\t\t\t\tworkspace.getRoot(),", "+\t\t\t\t\t\tsourceFilePath.makeRelative(), // ensure path is relative (see http://dev.eclipse.org/bugs/show_bug.cgi?id=22517)", "+\t\t\t\t\t\ttrue) != null) {", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t// found a source file", "+\t\t\t\t\t // we don't need to check again. The source will be attached.", "+\t\t\t\t\tcheckAutomaticSourceMapping = true;", "+\t\t\t\t\troot.attachSource(root.getPath(), null, null);", "+\t\t\t\t\tSourceMapper sourceMapper = getSourceMapper();", "+\t\t\t\t\tif (sourceMapper != null) {", "+\t\t\t\t\t\treturn mapSource(sourceMapper);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\treturn null;", "+}", "-\t} else {", "-\t\t// Attempts to find the corresponding java file", "-\t\tString qualifiedName = getType().getFullyQualifiedName();", "-\t\tNameLookup lookup = ((JavaProject) getJavaProject()).getNameLookup();", "-\t\tICompilationUnit cu = lookup.findCompilationUnit(qualifiedName);", "-\t\tif (cu != null) {", "-\t\t\treturn cu.getBuffer();", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2c99604a89efc7fc2a87631c8a5e2ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java", "commitBeforeChange": "e6db618a9b62756ea5188d8fdad9bb0c157f5516", "commitAfterChange": "265fce71e12d88a397c49e9793a330fd01dcb78a", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " protected IBuffer openBuffer(IProgressMonitor pm, Object info) throws JavaModelException", "signatureAfterChange": " protected IBuffer openBuffer(IProgressMonitor pm, Object info) throws JavaModelException", "diff": ["-\t\treturn mapSource(mapper);", "-\t} else if (!this.checkAutomaticSourceMapping) {", "-\t\t/*", "-\t\t * We try to see if we can automatically attach a source", "-\t\t * source files located inside the same folder than its .class file", "-\t\t * See bug 36510.", "-\t\t */", "-\t\tPackageFragmentRoot root = getPackageFragmentRoot();", "-\t\tif (root.isArchive()) {", "-\t\t\t// root is a jar file or a zip file", "-\t\t\tString elementName = getElementName();", "-\t\t\tString sourceFileWithoutExtension = elementName.substring(0, elementName.lastIndexOf('.'));", "-\t\t\tJarPackageFragmentRoot jarPackageFragmentRoot = (JarPackageFragmentRoot) root;", "-\t\t\tZipFile jar = null;", "-\t\t\ttry {", "-\t\t\t\tjar = jarPackageFragmentRoot.getJar();", "-\t\t\t\tString[] pkgName = ((PackageFragment) getParent()).names;", "-\t\t\t\tchar[][] javaLikeExtensions = Util.getJavaLikeExtensions();", "-\t\t\t\tfor (int i = 0, length = javaLikeExtensions.length; i < length; i++) {", "-\t\t\t\t\tStringBuffer entryName = new StringBuffer();", "-\t\t\t\t\tfor (int j = 0, pkgNameLength = pkgName.length; j < pkgNameLength; j++) {", "-\t\t\t\t\t\tentryName.append(pkgName[j]);", "-\t\t\t\t\t\tentryName.append('/');", "-\t\t\t\t\t}", "-\t\t\t\t\tentryName.append(sourceFileWithoutExtension);", "-\t\t\t\t\tentryName.append('.');", "-\t\t\t\t\tentryName.append(javaLikeExtensions[i]);", "-\t\t\t\t\tZipEntry zipEntry = jar.getEntry(entryName.toString());", "-\t\t\t\t\tif (zipEntry != null) {", "-\t\t\t\t\t\t// found a source file", "-\t\t\t\t\t\tthis.checkAutomaticSourceMapping = true;", "-\t\t\t\t\t\troot.attachSource(root.getPath(), null, null);", "-\t\t\t\t\t\tSourceMapper sourceMapper = getSourceMapper();", "-\t\t\t\t\t\tif (sourceMapper != null) {", "-\t\t\t\t\t\t\treturn mapSource(sourceMapper);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\tif (e instanceof JavaModelException) throw (JavaModelException)e;", "-\t\t\t\tthrow new JavaModelException(e);", "-\t\t\t} finally {", "-\t\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(jar);", "-\t\t\t}", "-\t\t} else {", "-\t\t\t// Attempts to find the corresponding java file", "-\t\t\tString qualifiedName = getType().getFullyQualifiedName();", "-\t\t\tNameLookup lookup = ((JavaProject) getJavaProject()).newNameLookup(DefaultWorkingCopyOwner.PRIMARY);", "-\t\t\tICompilationUnit cu = lookup.findCompilationUnit(qualifiedName);", "-\t\t\tif (cu != null) {", "-\t\t\t\treturn cu.getBuffer();", "-\t\t\t} else\t{", "-\t\t\t\t// root is a class folder", "-\t\t\t\t", "-\t\t\t\tIContainer pkgFolder = (IContainer) getParent().getResource();", "-\t\t\t\tIResource[] files = null;", "-\t\t\t\ttry {", "-\t\t\t\t\tfiles = pkgFolder.members();", "-\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\tthrow new JavaModelException(e);", "-\t\t\t\t}", "-\t\t\t\tIResource sourceFile = null;", "-\t\t\t\tString classFileName = getElementName();", "-\t\t\t\tString simpleName = classFileName.substring(0, classFileName.lastIndexOf('.'));", "-\t\t\t\tfor (int i = 0, length = files.length; i < length; i++) {", "-\t\t\t\t\tIResource resource = files[i];", "-\t\t\t\t\tif (resource.getType() == IResource.FILE ", "-\t\t\t\t\t\t\t&& Util.equalsIgnoreJavaLikeExtension(resource.getName(), simpleName)) {", "-\t\t\t\t\t\tsourceFile = resource;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (sourceFile != null) {", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t// found a source file", "-\t\t\t\t\t // we don't need to check again. The source will be attached.", "-\t\t\t\t\tthis.checkAutomaticSourceMapping = true;", "-\t\t\t\t\troot.attachSource(root.getPath(), null, null);", "-\t\t\t\t\tSourceMapper sourceMapper = getSourceMapper();", "-\t\t\t\t\tif (sourceMapper != null) {", "-\t\t\t\t\t\treturn mapSource(sourceMapper);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\treturn mapSource(mapper, info instanceof IBinaryType ? (IBinaryType) info : null);"]}], "num": 60033}
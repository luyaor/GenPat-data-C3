{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55f1409300390d264db765607805b4dc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6292c6435633b9b257d74e14451b733a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionRequestorWrapper.java", "commitBeforeChange": "dee57778319ecddc17299fb2d002d4a5a28d0bbb", "commitAfterChange": "5fd533c8760a35e551d2642335bb8a6be55dd0a9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic void accept(CompletionProposal proposal)", "signatureAfterChange": " \t \tpublic void accept(CompletionProposal proposal)", "diff": ["-\t\t\t\t\t\t\t\tproposal.getPackageName(),", "+\t\t\t\t\t\t\t\tproposal.getPackageName() == null ? CharOperation.NO_CHAR : proposal.getPackageName(),", "-\t\t\t\t\t\t\t\tproposal.getPackageName(),", "+\t\t\t\t\t\t\t\tproposal.getPackageName() == null ? CharOperation.NO_CHAR : proposal.getPackageName(),", "-\t\t\t\t\t\t\tproposal.getDeclarationPackageName(),", "-\t\t\t\t\t\t\tproposal.getDeclarationTypeName(),", "+\t\t\t\t\t\t\tproposal.getDeclarationPackageName() == null ? CharOperation.NO_CHAR : proposal.getDeclarationPackageName(),", "+\t\t\t\t\t\t\tproposal.getDeclarationTypeName() == null ? CharOperation.NO_CHAR : proposal.getDeclarationTypeName(),", "-\t\t\t\t\t\t\tproposal.getPackageName(),", "-\t\t\t\t\t\t\tproposal.getTypeName(),", "+\t\t\t\t\t\t\tproposal.getPackageName() == null ? CharOperation.NO_CHAR : proposal.getPackageName(),", "+\t\t\t\t\t\t\tproposal.getTypeName() == null ? CharOperation.NO_CHAR : proposal.getTypeName(),", "-\t\t\t\t\t\t\tproposal.findParameterNames(null),", "+\t\t\t\t\t\t\tproposal.findParameterNames(null) == null ? CharOperation.NO_CHAR_CHAR : proposal.findParameterNames(null),", "-\t\t\t\t\t\t\tproposal.getDeclarationPackageName(),", "-\t\t\t\t\t\t\tproposal.getDeclarationTypeName(),", "+\t\t\t\t\t\t\tproposal.getDeclarationPackageName() == null ? CharOperation.NO_CHAR : proposal.getDeclarationPackageName(),", "+\t\t\t\t\t\t\tproposal.getDeclarationTypeName() == null ? CharOperation.NO_CHAR : proposal.getDeclarationTypeName(),", "-\t\t\t\t\t\t\tproposal.findParameterNames(null),", "-\t\t\t\t\t\t\tproposal.getPackageName(),", "-\t\t\t\t\t\t\tproposal.getTypeName(),", "+\t\t\t\t\t\t\tproposal.findParameterNames(null) == null ? CharOperation.NO_CHAR_CHAR : proposal.findParameterNames(null),", "+\t\t\t\t\t\t\tproposal.getPackageName() == null ? CharOperation.NO_CHAR : proposal.getPackageName(),", "+\t\t\t\t\t\t\tproposal.getTypeName() == null ? CharOperation.NO_CHAR : proposal.getTypeName(),", "-\t\t\t\t\t\t\tproposal.findParameterNames(null),", "+\t\t\t\t\t\t\tproposal.findParameterNames(null) == null ? CharOperation.NO_CHAR_CHAR : proposal.findParameterNames(null),", "-\t\t\t\t\t\t\tproposal.findParameterNames(null),", "+\t\t\t\t\t\t\tproposal.findParameterNames(null) == null ? CharOperation.NO_CHAR_CHAR : proposal.findParameterNames(null),", "-\t\t\t\t\t\t\tproposal.findParameterNames(null),", "+\t\t\t\t\t\t\tproposal.findParameterNames(null) == null ? CharOperation.NO_CHAR_CHAR : proposal.findParameterNames(null),", "-\t\t\t\t\t\tproposal.findParameterNames(null),", "+\t\t\t\t\t\tproposal.findParameterNames(null) == null ? CharOperation.NO_CHAR_CHAR : proposal.findParameterNames(null),", "-\t\t\t\t\t\t\tproposal.getPackageName(),", "+\t\t\t\t\t\t\tproposal.getPackageName() == null ? CharOperation.NO_CHAR : proposal.getPackageName(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3b3f5c145b170dcbc7d6089c35ebb5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ScannerTest.java", "commitBeforeChange": "e9740a5d5d266d4ab1f1481408252eab08091df9", "commitAfterChange": "c0b7ec7ac86ca976e8dafca35f37afdb3d3303ce", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic void test061()", "signatureAfterChange": " \tpublic void test061()", "diff": ["-\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=383062", "+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=387146", "+\t\tIScanner scanner = ToolFactory.createScanner(", "+\t\t\t\ttrue,", "+\t\t\t\ttrue,", "+\t\t\t\ttrue,", "+\t\t\t\tJavaCore.VERSION_1_4,", "+\t\t\t\tJavaCore.VERSION_1_4);", "+\t\tfinal char[] source = \"case 1:\\nsynchronized (someLock){}\\n//$FALL-THROUGH$\\ncase 2:\".toCharArray();", "+\t\tscanner.setSource(source);", "+\t\tscanner.resetTo(0, source.length - 1);", "+\t\ttry {", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNamecase, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameWHITESPACE, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameIntegerLiteral, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameCOLON, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameWHITESPACE, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNamesynchronized, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameWHITESPACE, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameLPAREN, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameIdentifier, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameRPAREN, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameLBRACE, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameRBRACE, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameWHITESPACE, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameCOMMENT_LINE, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNamecase, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameWHITESPACE, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameIntegerLiteral, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameCOLON, scanner.getNextToken());", "+\t\t} catch (InvalidInputException e) {", "+\t\t\tassertTrue(\"Should not fail with InvalidInputException\", false);", "+\t\t}", "+\t}"]}], "num": 18637}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf3f7634fb6ac5ec1a49b2071ed0b19a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b1379aede8e4d1aa0bb63a7e6c35c6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExternalAnnotations18Test.java", "commitBeforeChange": "48a2d2499344bebca223a2f8c964ed5900cd0012", "commitAfterChange": "6c085192f8ca1a30dcc3f8eecf0c1b2085d19f7e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void test1() throws CoreException, InterruptedException", "signatureAfterChange": " \tpublic void test1FullBuild() throws Exception", "diff": ["-\t/** Perform full build. */", "-\tpublic void test1() throws CoreException, InterruptedException {", "-\t\tthis.project.getProject().build(IncrementalProjectBuilder.FULL_BUILD, null);", "-\t\tIMarker[] markers = this.project.getProject().findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, false, IResource.DEPTH_INFINITE);", "+\t/** Perform full build. */", "+\tpublic void test1FullBuild() throws Exception {", "+\t\tsetupJavaProject(\"Test1\");", "+\t\tthis.project.getProject().build(IncrementalProjectBuilder.FULL_BUILD, null);", "+\t\tIMarker[] markers = this.project.getProject().findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, false, IResource.DEPTH_INFINITE);", "+\t\tassertNoMarkers(markers);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b87ed856dcc20921306452335867fb48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests.java", "commitBeforeChange": "c5d1291515e72a1b02e2dba658336524eb7964dc", "commitAfterChange": "5c7f45483ff98aea12080f74206c0fab992839fd", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void testResolveInvalidResolve() throws JavaModelException", "signatureAfterChange": " public void testResolveInvalidResolve() throws JavaModelException", "diff": ["-\t} catch (JavaModelException jme) {", "-\t\tassertTrue(\"Incorrect status on the JavaModelException\", jme.getStatus().getCode() == IJavaModelStatusConstants.INDEX_OUT_OF_BOUNDS);", "+\t} catch (Assert.AssertionFailedException e) {", "+\t\tassertEquals(\"Incorrect message on assertion failure\", \"Assertion failed; selected range (-1, 9) is not located in supplied source range (0, 36)\", e.getMessage());"]}], "num": 32049}
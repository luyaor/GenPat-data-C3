{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "92fba3d09eaa253ca654a45ca60fdbda", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "398e29e3b54ce9e4a46a8cdfc2a8dacb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "635645f64cc3986d85427716b6b1431b69a73db1", "commitAfterChange": "52bf936fc576c8beae0884d140c2c4a36e852ace", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 87, "signatureBeforeChange": " public void _testBug238210_block() throws JavaModelException", "signatureAfterChange": " public void testBug238210_X03() throws JavaModelException", "diff": ["-public void _testBug238210_block() throws JavaModelException {", "-\t\t\"public class BlockCommentTestCase {\\n\" + ", "-\t\t\"    public void someGeneratedMethod() {\\n\" + ", "-\t\t\"        /*\\n\" + ", "-\t\t\"         * protected-region-start_[id=_14_0_1_3dd20592_1202209856234_914658_24183_someGeneratedMethod]\\n\" + ", "-\t\t\"         * some manually written code\\n\" + ", "-\t\t\"         * protected-region-end_[id=_14_0_1_3dd20592_1202209856234_914658_24183_someGeneratedMethod]\\n\" + ", "-\t\t\"         */\\n\" + ", "-\t\t\"    }\\n\" + ", "-\t\t\"public class BlockCommentTestCase {\\n\" + ", "-\t\t\"\tpublic void someGeneratedMethod() {\\n\" + ", "-\t\t\"\t\t/*\\n\" + ", "-\t\t\"\t\t * protected-region-start_[id=_14_0_1_3dd20592_1202209856234_914658_24183_someGeneratedMethod]\\n\" + ", "-\t\t\"\t\t * some manually written code\\n\" + ", "-\t\t\"\t\t * protected-region-end_[id=_14_0_1_3dd20592_1202209856234_914658_24183_someGeneratedMethod]\\n\" + ", "-\t\t\"\t\t */\\n\" + ", "+// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=239130", "+public void testBug238210_X03() throws JavaModelException {", "+\t\t\"package eclipse30;\\n\" + ", "+\t\t\"public class X03 {\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"\t\\n\" + ", "+\t\t\"\t/**\\n\" + ", "+\t\t\"\t * @see org.eclipse.jdt.internal.debug.core.breakpoints.JavaBreakpoint#handleBreakpointEvent(com.sun.jdi.event.Event, org.eclipse.jdt.internal.debug.core.model.JDIDebugTarget, org.eclipse.jdt.internal.debug.core.model.JDIThread)\\n\" + ", "+\t\t\"\t * \\n\" + ", "+\t\t\"\t * (From referenced JavaDoc:\\n\" + ", "+\t\t\"\t * \tReturns whethers the thread should be resumed\\n\" + ", "+\t\t\"\t */\\n\" + ", "+\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"package eclipse30;\\n\" + ", "+\t\t\"public class X03 {\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"\t/**\\n\" + ", "+\t\t\"\t * @see org.eclipse.jdt.internal.debug.core.breakpoints.JavaBreakpoint#handleBreakpointEvent(com.sun.jdi.event.Event,\\n\" + ", "+\t\t\"\t *      org.eclipse.jdt.internal.debug.core.model.JDIDebugTarget,\\n\" + ", "+\t\t\"\t *      org.eclipse.jdt.internal.debug.core.model.JDIThread) (From\\n\" + ", "+\t\t\"\t *      referenced JavaDoc: Returns whethers the thread should be resumed\\n\" + ", "+\t\t\"\t */\\n\" + ", "+\t\t\"\tvoid foo() {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db229f88138694da232ed3bef686fd7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "2983d3633c9053bd045273bd23ce63a7c14ea4ff", "commitAfterChange": "57d40c75b9b8c61099e8f565aa04e357409c253c", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " public void test048()", "signatureAfterChange": " public void test048()", "diff": ["-\t\t\"  // Method descriptor #15 ([I)V\\n\" + ", "+\t\t\"  // Method descriptor #15 (Ljava/util/List;)V\\n\" + ", "+\t\t\"  // Signature: (Ljava/util/List<Ljava/lang/String;>;)V\\n\" + ", "-\t\t\"  void foo3(int[] array);\\n\" + ", "-\t\t\"     0  aload_1 [array]\\n\" + ", "-\t\t\"     1  dup\\n\" + ", "-\t\t\"     2  astore_3\\n\" + ", "-\t\t\"     3  arraylength\\n\" + ", "-\t\t\"     4  ifeq 18\\n\" + ", "+\t\t\"  void foo3(java.util.List ls);\\n\" + ", "+\t\t\"     0  aload_1 [ls]\\n\" + ", "+\t\t\"     1  invokeinterface java.util.List.iterator() : java.util.Iterator [18] [nargs: 1]\\n\" + ", "+\t\t\"     6  astore_3\\n\" + ", "-\t\t\"     8  iconst_0\\n\" + ", "-\t\t\"     9  iaload\\n\" + ", "-\t\t\"    10  istore_2 [i]\\n\" + ", "-\t\t\"    11  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\"    14  iload_2 [i]\\n\" + ", "-\t\t\"    15  invokevirtual java.io.PrintStream.println(int) : void [22]\\n\" + ", "-\t\t\"    18  return\\n\" + ", "+\t\t\"     8  invokeinterface java.util.Iterator.hasNext() : boolean [24] [nargs: 1]\\n\" + ", "+\t\t\"    13  ifeq 33\\n\" + ", "+\t\t\"    16  aload_3\\n\" + ", "+\t\t\"    17  invokeinterface java.util.Iterator.next() : java.lang.Object [30] [nargs: 1]\\n\" + ", "+\t\t\"    22  checkcast java.lang.String [34]\\n\" + ", "+\t\t\"    25  astore_2 [s]\\n\" + ", "+\t\t\"    26  getstatic java.lang.System.out : java.io.PrintStream [36]\\n\" + ", "+\t\t\"    29  aload_2 [s]\\n\" + ", "+\t\t\"    30  invokevirtual java.io.PrintStream.println(java.lang.String) : void [42]\\n\" + ", "+\t\t\"    33  return\\n\" + ", "-\t\t\"        [pc: 11, line: 4]\\n\" + ", "-\t\t\"        [pc: 18, line: 7]\\n\" + ", "+\t\t\"        [pc: 26, line: 4]\\n\" + ", "+\t\t\"        [pc: 33, line: 7]\\n\" + ", "-\t\t\"        [pc: 0, pc: 19] local: this index: 0 type: X\\n\" + ", "-\t\t\"        [pc: 0, pc: 19] local: array index: 1 type: int[]\\n\" + ", "-\t\t\"        [pc: 11, pc: 18] local: i index: 2 type: int\\n\";", "+\t\t\"        [pc: 0, pc: 34] local: this index: 0 type: X\\n\" + ", "+\t\t\"        [pc: 0, pc: 34] local: ls index: 1 type: java.util.List\\n\" + ", "+\t\t\"        [pc: 26, pc: 33] local: s index: 2 type: java.lang.String\\n\" + ", "+\t\t\"      Local variable type table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 34] local: ls index: 1 type: java.util.List<java.lang.String>\\n\";"]}], "num": 2306}
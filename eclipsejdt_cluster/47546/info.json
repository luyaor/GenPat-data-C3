{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7255eeb5235c25997e37717b8dbc0cb2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4991a4992c177e8d5090bd2cff89f38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tpublic APTResult getResult()", "signatureAfterChange": " \tprivate void reportResult( \t\t\tICompilationParticipantResult curResult, \t\t\tSet<IFile> lastGeneratedFiles, \t\t\tSet<IFile> generatedFiles, \t\t\tSet<IFile> modifiedGeneratedFiles, \t\t\tList<? extends CategorizedProblem> problems, \t\t\tSet<String> deps, \t\t\tGeneratedFileManager gfm,  \t\t\tProcessorEnvImpl processorEnv)", "diff": ["-\tpublic APTResult getResult() { return _result; }", "+\t */", "+\tprivate void reportResult(", "+\t\t\tICompilationParticipantResult curResult,", "+\t\t\tSet<IFile> lastGeneratedFiles,", "+\t\t\tSet<IFile> generatedFiles,", "+\t\t\tSet<IFile> modifiedGeneratedFiles,", "+\t\t\tList<? extends CategorizedProblem> problems,", "+\t\t\tSet<String> deps,", "+\t\t\tGeneratedFileManager gfm, ", "+\t\t\tProcessorEnvImpl processorEnv){", "+\t\t", "+\t\t", "+\t\tif (lastGeneratedFiles == null)", "+\t\t\tlastGeneratedFiles = Collections.emptySet();", "+\t\tif (generatedFiles == null )", "+\t\t\tgeneratedFiles = Collections.emptySet();", "+\t\tfinal IFile file = curResult.getFile();", "+\t\t// figure out exactly what got deleted", "+\t\tfinal Set<IFile> deletedFiles = cleanupNoLongerGeneratedFiles( ", "+\t\t\t\tfile, ", "+\t\t\t\tlastGeneratedFiles, ", "+\t\t\t\tgeneratedFiles, ", "+\t\t\t\tgfm,", "+\t\t\t\tprocessorEnv,", "+\t\t\t\tnull);", "+\t\t// report newly created or modified generated files", "+\t\tint numNewFiles = modifiedGeneratedFiles.size();", "+\t\tif( numNewFiles > 0 ){", "+\t\t\tfinal IFile[] newFilesArray = new IFile[numNewFiles];", "+\t\t\tcurResult.recordAddedGeneratedFiles(modifiedGeneratedFiles.toArray(newFilesArray));", "+\t\t}", "+\t\t", "+\t\t// report deleted file.", "+\t\tint numDeletedFiles = deletedFiles.size();", "+\t\tif(numDeletedFiles > 0){", "+\t\t\tfinal IFile[] deletedFilesArray = new IFile[numDeletedFiles];", "+\t\t\tcurResult.recordDeletedGeneratedFiles(deletedFiles.toArray(deletedFilesArray));", "+\t\t}", "+\t\t", "+\t\t// report problems", "+\t\tfinal int numProblems = problems.size();", "+\t\tif( numProblems > 0 ){", "+\t\t\tfinal CategorizedProblem[] catProblemsArray = new CategorizedProblem[numProblems];", "+\t\t\tcurResult.recordNewProblems(problems.toArray(catProblemsArray));", "+\t\t}", "+\t\t", "+\t\t// report dependency", "+\t\tfinal int numDeps = deps.size();", "+\t\tif( numDeps > 0 ){", "+\t\t\tfinal String[] depsArray = new String[numDeps];", "+\t\t\tcurResult.recordDependencies(deps.toArray(depsArray));", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2b2e4a70640aa655fbca720ef94b635", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java", "commitBeforeChange": "db77467719df6aeaa20c37834dfc19f40472f458", "commitAfterChange": "1a085f6923332d813470a8d5ddda1ced463837b2", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic boolean overrides(ExecutableElement overridden, TypeElement type)", "signatureAfterChange": " \tpublic boolean overrides(ExecutableElement overridden, TypeElement type)", "diff": ["-\t\tthrow new UnsupportedOperationException(\"NYI: overrides(...)\"); //$NON-NLS-1$", "+\t\tMethodBinding overriddenBinding = (MethodBinding)((ExecutableElementImpl) overridden)._binding;", "+\t\tReferenceBinding overriderContext = (ReferenceBinding)((TypeElementImpl)type)._binding;", "+\t\tif ((MethodBinding)_binding == overriddenBinding)", "+\t\t\treturn false;", "+\t\tif (overriddenBinding.isPrivate()) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tchar[] selector = ((MethodBinding)_binding).selector;", "+\t\tif (!CharOperation.equals(selector, overriddenBinding.selector))", "+\t\t\treturn false;", "+\t\t", "+\t\t// Construct a binding to the equivalent of this (the overrider) as it would be inherited by 'type'.", "+\t\t// Can only do this if 'type' is descended from the overrider.", "+\t\t// Second clause of the AND is required to match a peculiar javac behavior.", "+\t\tif (null == overriderContext.findSuperTypeWithSameErasure(((MethodBinding)_binding).declaringClass) &&", "+\t\t\t\tnull == ((MethodBinding)_binding).declaringClass.findSuperTypeWithSameErasure(overriderContext)) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tMethodBinding overriderBinding = new MethodBinding((MethodBinding)_binding, overriderContext);", "+\t\tif (overriderBinding.isPrivate()) {", "+\t\t\t// a private method can never override another method.  The other method would either be", "+\t\t\t// private itself, in which case it would not be visible; or this would be a restriction ", "+\t\t\t// of access, which is a compile-time error.", "+\t\t\treturn false;", "+\t\t}", "+\t\t", "+\t\tTypeBinding match = overriderBinding.declaringClass.findSuperTypeWithSameErasure(overriddenBinding.declaringClass);", "+\t\tif (!(match instanceof ReferenceBinding)) return false;", "+", "+\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding[] superMethods = ((ReferenceBinding)match).getMethods(selector);", "+\t\tfor (int i = 0, length = superMethods.length; i < length; i++) {", "+\t\t\tif (superMethods[i].original() == overriddenBinding) {", "+\t\t\t\tLookupEnvironment lookupEnvironment = _env.getLookupEnvironment();", "+\t\t\t\tif (lookupEnvironment == null) return false;", "+\t\t\t\tMethodVerifier methodVerifier = lookupEnvironment.methodVerifier();", "+\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding superMethod = superMethods[i];", "+\t\t\t\treturn !superMethod.isPrivate()", "+\t\t\t\t\t&& !(superMethod.isDefault() && (superMethod.declaringClass.getPackage()) != overriderBinding.declaringClass.getPackage())", "+\t\t\t\t\t&& methodVerifier.doesMethodOverride(overriderBinding, superMethod);", "+\t\t\t}", "+\t\t}", "+\t\treturn false;"]}], "num": 47546}
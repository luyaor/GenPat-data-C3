{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a728fd0152bdf1e67782e0518c484892", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d490c0804c31d326ac43dd026b5b7a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "ac2c3539b72e65a4a4e0b168769da151e63c5ff1", "commitAfterChange": "014710437062a15282800b8efb747a8973068ba8", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " \tprivate void setDeprecatedComment(Javadoc javadocComment, char[] contents)", "signatureAfterChange": "   \tprivate Comment createComment(int[] positions)", "diff": ["-\t */", "-\tprivate void setDeprecatedComment(Javadoc javadocComment, char[] contents) {", "-\t\tjavadocComment.setComment(new String(contents));", "+", "+\tprivate Comment createComment(int[] positions) {", "+\t\t// Create comment node", "+\t\tComment comment = null;", "+\t\tint start = positions[0];", "+\t\tint end = positions[1];", "+\t\tif (positions[1]>0) { // Javadoc comments have positive end position", "+\t\t\tthis.ast.newJavadoc();", "+\t\t\tDocCommentParser docParser = new DocCommentParser(this.ast, this.scanner);", "+\t\t\tJavadoc docComment = docParser.parse(positions);", "+//\t\t\tString contents = new String(this.compilationUnitSource, start, end - start + 1);", "+//\t\t\tjavadoc.parseComment(contents);", "+\t\t\tif (docComment == null) return null;", "+\t\t\tcomment = docComment;", "+\t\t} else {", "+\t\t\tend = -end;", "+\t\t\tif (positions[0]>0) { // Block comment have positive start position", "+\t\t\t\tcomment = this.ast.newBlockComment();", "+\t\t\t} else { // Line comment have negative start and end position", "+\t\t\t\tstart = -start;", "+\t\t\t\tcomment = this.ast.newLineComment();", "+\t\t\t}", "+\t\t\tcomment.setSourceRange(start, end - start);", "+\t\t}", "+\t\treturn comment;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4d270efed74724a7b09f8a8665eacb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "8376377bee92e0d16cfa404c8d1e948dcf5be147", "commitAfterChange": "0a6cb9139841c5f6143bc94201bfcbd6024601de", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tprivate OutputInfo outputInfo(RootInfo rootInfo, IResource res)", "signatureAfterChange": " \tprivate OutputsInfo outputsInfo(RootInfo rootInfo, IResource res)", "diff": ["-\tprivate OutputInfo outputInfo(RootInfo rootInfo, IResource res) {", "+\tprivate OutputsInfo outputsInfo(RootInfo rootInfo, IResource res) {", "-\t\t\t\tIPath output = proj.getOutputLocation();", "+\t\t\t\tIPath projectOutput = proj.getOutputLocation();", "-\t\t\t\tif (proj.getProject().getFullPath().equals(output)){ // case of proj==bin==src", "-\t\t\t\t\ttraverseMode = SOURCE;", "+\t\t\t\tif (proj.getProject().getFullPath().equals(projectOutput)){ // case of proj==bin==src", "+\t\t\t\t\treturn new OutputsInfo(new IPath[] {projectOutput}, new int[] {SOURCE}, 1);", "-\t\t\t\t\t// check case of src==bin", "+\t\t\t\t\tIPath[] outputs = new IPath[classpath.length+1];", "+\t\t\t\t\tint[] traverseModes = new int[classpath.length+1];", "+\t\t\t\t\tint outputCount = 1;", "+\t\t\t\t\toutputs[0] = projectOutput;", "+\t\t\t\t\ttraverseModes[0] = traverseMode;", "-\t\t\t\t\t\tif (entry.getPath().equals(output)) {", "-\t\t\t\t\t\t\ttraverseMode = (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) ? SOURCE : BINARY;", "+\t\t\t\t\t\tIPath entryPath = entry.getPath();", "+\t\t\t\t\t\tIPath output = entry.getOutputLocation();", "+\t\t\t\t\t\tif (output != null) {", "+\t\t\t\t\t\t\toutputs[outputCount] = output;", "+\t\t\t\t\t\t\t// check case of src==bin", "+\t\t\t\t\t\t\tif (entryPath.equals(output)) {", "+\t\t\t\t\t\t\t\ttraverseModes[outputCount++] = (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) ? SOURCE : BINARY;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\ttraverseModes[outputCount++] = IGNORE;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// check case of src==bin", "+\t\t\t\t\t\tif (entryPath.equals(projectOutput)) {", "+\t\t\t\t\t\t\ttraverseModes[0] = (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) ? SOURCE : BINARY;", "+\t\t\t\t\treturn new OutputsInfo(outputs, traverseModes, outputCount);", "-\t\t\t\treturn new OutputInfo(output, traverseMode);"]}], "num": 71808}
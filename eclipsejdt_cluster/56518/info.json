{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1a2b9b1553d3d1b4d8d39b41ea407602", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a39ff49bfdd1bb31be5fe117e6b73c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "5b5d83d3544b223e577e7fddd59f42874f12eb50", "commitAfterChange": "506e2d5158ee9e3f20923d60e6333977bd5c1cb0", "methodNumberBeforeChange": 245, "methodNumberAfterChange": 245, "signatureBeforeChange": " \tpublic void _test0229() throws JavaModelException", "signatureAfterChange": " \tpublic void test0229() throws JavaModelException", "diff": ["-\tpublic void _test0229() throws JavaModelException {", "+\tpublic void test0229() throws JavaModelException {", "-       \tfinal String key = BindingKey.createTypeBindingKey(\"java.util.Collection\");", "+       \tfinal String key = BindingKey.createParameterizedTypeBindingKey(", "+       \t     \"Ljava/util/Collection<TE;>;\", new String[] {});", "-    \t// type binding2 is seen as a raw type", "-    \t// collectionTypeBinding is seen as a generic type", "+    \tassertTrue(\"Not a raw type\", collectionTypeBinding.isRawType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0f20f5be7f25e4675f2d388ccb43dde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "6908ed269579bdf5bd73625206374e9ed19646b4", "commitAfterChange": "bea7b508525f70d680963772996546f2bcf8018f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void _test0004() throws JavaModelException", "signatureAfterChange": " \tpublic void test0004() throws JavaModelException", "diff": ["-\tpublic void _test0004() throws JavaModelException {", "+\tpublic void test0004() throws JavaModelException {", "-\t\tCompilationUnit cu = (CompilationUnit) buildAST(contents, this.workingCopy);", "-\t\tTypeDeclaration typedeclaration = (TypeDeclaration) getASTNode(cu, 0);", "-\t\tArrayType type = (ArrayType) ((ParameterizedType) typedeclaration.superInterfaceTypes().get(0)).typeArguments().get(0);", "+\t\tArrayType type = (ArrayType) buildAST(contents, this.workingCopy);"]}], "num": 56518}
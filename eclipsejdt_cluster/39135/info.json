{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe9d5b7f0e23134eac2985da06fe10b1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11c237b73753a1587f1e858c3d0310d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "8a64589617f7b80b7f12bb3f773ab58c605663c7", "commitAfterChange": "6585c7471e2cc73387fb0d652a600f2678de9051", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tprivate void format(TypeDeclaration typeDeclaration)", "signatureAfterChange": " \t \tprivate void format(TypeDeclaration typeDeclaration)", "diff": ["+\tprivate void format(TypeDeclaration typeDeclaration){", "+\t\tthis.scribe.printModifiers();", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameinterface, true); ", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameclass, true); ", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true); ", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameextends, true);", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameextends, true);", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameimplements, true);", "+\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_superinterfaces);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);", "-", "-\tprivate void format(TypeDeclaration typeDeclaration){", "-\t\tthis.formatLastTypeDeclaration(typeDeclaration);", "+\t\tif (hasComments()) {", "+\t\t\tthis.scribe.printNewLine();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "510eaf991202e0e5d69ee85c8502247c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "0bd771375c18b7c83a5adef74657e35cf2c86ff3", "commitAfterChange": "5882e29154dfffe57fe4183f714dc74947e8e98d", "methodNumberBeforeChange": 388, "methodNumberAfterChange": 388, "signatureBeforeChange": " public ASTNode[] parseClassBodyDeclarations(char[] source, int offset, int length, CompilationUnitDeclaration unit)", "signatureAfterChange": " public ASTNode[] parseClassBodyDeclarations(char[] source, int offset, int length, CompilationUnitDeclaration unit)", "diff": ["+\tboolean oldDiet = this.diet;", "-\tthis.referenceContext = unit;", "+\tTypeDeclaration referenceContextTypeDeclaration = new TypeDeclaration(unit.compilationResult);", "+\treferenceContextTypeDeclaration.name = Util.EMPTY_STRING.toCharArray();", "+\treferenceContextTypeDeclaration.fields = new FieldDeclaration[0];", "+\tunit.types = new TypeDeclaration[1];", "+\tunit.types[0] = referenceContextTypeDeclaration;", "+\tthis.referenceContext = unit;", "+\t\tthis.diet = true;", "+\t} finally {", "+\t\tthis.diet = oldDiet;", "+\tASTNode[] result = null;", "-\t\treturn null;", "+\t\tif (!this.options.performMethodsFullRecovery && !this.options.performStatementsRecovery) {", "+\t\t\treturn null;", "+\t\t}", "+\t\t// collect all body declaration inside the compilation unit except the default constructor", "+\t\tfinal List bodyDeclarations = new ArrayList();", "+\t\tASTVisitor visitor = new ASTVisitor() {", "+\t\t\tpublic boolean visit(MethodDeclaration methodDeclaration, ClassScope scope) {", "+\t\t\t\tif (!methodDeclaration.isDefaultConstructor()) {", "+\t\t\t\t\tbodyDeclarations.add(methodDeclaration);", "+\t\t\t\t}", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tpublic boolean visit(FieldDeclaration fieldDeclaration, MethodScope scope) {", "+\t\t\t\tbodyDeclarations.add(fieldDeclaration);", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tpublic boolean visit(TypeDeclaration memberTypeDeclaration, ClassScope scope) {", "+\t\t\t\tbodyDeclarations.add(memberTypeDeclaration);", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t};", "+\t\tunit.ignoreFurtherInvestigation = false;", "+\t\tunit.traverse(visitor, unit.scope);", "+\t\tunit.ignoreFurtherInvestigation = true;", "+\t\tresult = (ASTNode[]) bodyDeclarations.toArray(new ASTNode[bodyDeclarations.size()]);", "+\t} else {", "+\t\tint astLength;", "+\t\tif (this.astLengthPtr > -1 && (astLength = this.astLengthStack[this.astLengthPtr--]) != 0) {", "+\t\t\tresult = new ASTNode[astLength];", "+\t\t\tthis.astPtr -= astLength;", "+\t\t\tSystem.arraycopy(this.astStack, this.astPtr + 1, result, 0, astLength);", "+\t\t}", "-\tint astLength;", "-\tif (this.astLengthPtr > -1 && (astLength = this.astLengthStack[this.astLengthPtr--]) != 0) {", "-\t\tASTNode[] result = new ASTNode[astLength];", "-\t\tthis.astPtr -= astLength;", "-\t\tSystem.arraycopy(this.astStack, this.astPtr + 1, result, 0, astLength);", "-\t\treturn result;", "+\tboolean containsInitializers = false;", "+\tTypeDeclaration typeDeclaration = null;", "+\tfor (int i = 0, max = result.length; i< max; i++) {", "+\t\t// parse each class body declaration", "+\t\tASTNode node = result[i];", "+\t\tif (node instanceof TypeDeclaration) {", "+\t\t\t((TypeDeclaration) node).parseMethods(this, unit);", "+\t\t} else if (node instanceof AbstractMethodDeclaration) {", "+\t\t\t((AbstractMethodDeclaration) node).parseStatements(this, unit);", "+\t\t} else if (node instanceof FieldDeclaration) {", "+\t\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) node;", "+\t\t\tswitch(fieldDeclaration.getKind()) {", "+\t\t\t\tcase AbstractVariableDeclaration.INITIALIZER:", "+\t\t\t\t\tcontainsInitializers = true;", "+\t\t\t\t\tif (typeDeclaration == null) {", "+\t\t\t\t\t\ttypeDeclaration = referenceContextTypeDeclaration;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (typeDeclaration.fields == null) {", "+\t\t\t\t\t\ttypeDeclaration.fields = new FieldDeclaration[1];", "+\t\t\t\t\t\ttypeDeclaration.fields[0] = fieldDeclaration;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint length2 = typeDeclaration.fields.length;", "+\t\t\t\t\t\tFieldDeclaration[] temp = new FieldDeclaration[length2 + 1];", "+\t\t\t\t\t\tSystem.arraycopy(typeDeclaration.fields, 0, temp, 0, length2);", "+\t\t\t\t\t\ttemp[length2] = fieldDeclaration;", "+\t\t\t\t\t\ttypeDeclaration.fields = temp;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\tif (this.lastAct == ERROR_ACTION && (!this.options.performMethodsFullRecovery && !this.options.performStatementsRecovery)) {", "+\t\t\treturn null;", "+\t\t}", "-\treturn null;", "+\tif (containsInitializers) {", "+\t\tFieldDeclaration[] fieldDeclarations = typeDeclaration.fields;", "+\t\tfor (int i = 0, max = fieldDeclarations.length; i < max; i++) {", "+\t\t\t((Initializer) fieldDeclarations[i]).parseStatements(this, typeDeclaration , unit);", "+\t\t\tif (this.lastAct == ERROR_ACTION && (!this.options.performMethodsFullRecovery && !this.options.performStatementsRecovery)) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t}", "+\t}", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9804c22e0a7d2fc34a045e39776289a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void attachOrphanCompletionNode()", "signatureAfterChange": " protected void attachOrphanCompletionNode()", "diff": ["+\tif(this.currentElement instanceof RecoveredType || this.currentElement instanceof RecoveredMethod) {", "+\t\tif(this.currentElement instanceof RecoveredType) {", "+\t\t\tRecoveredType recoveredType = (RecoveredType)this.currentElement;", "+\t\t\tif(recoveredType.foundOpeningBrace && this.genericsPtr > -1) {", "+\t\t\t\tif(this.genericsStack[this.genericsPtr] instanceof TypeParameter) {", "+\t\t\t\t\tTypeParameter typeParameter = (TypeParameter) this.genericsStack[this.genericsPtr];", "+\t\t\t\t\tthis.currentElement.add(new CompletionOnMethodTypeParameter(new TypeParameter[]{typeParameter},this.compilationUnit.compilationResult()), 0);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tif ((!isInsideMethod() && !isInsideFieldInitialization())) { ", "+\t\t\tif(this.genericsPtr > -1 && this.genericsLengthPtr > -1 && this.genericsIdentifiersLengthPtr > -1) {", "+\t\t\t\tint kind = topKnownElementKind(COMPLETION_OR_ASSIST_PARSER);", "+\t\t\t\tint info = topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER);", "+\t\t\t\tif(kind == K_BINARY_OPERATOR && info == LESS) {", "+\t\t\t\t\tthis.consumeTypeArguments();", "+\t\t\t\t}", "+\t\t\t\tint numberOfIdentifiers = this.genericsIdentifiersLengthStack[this.genericsIdentifiersLengthPtr];", "+\t\t\t\tint genPtr = this.genericsPtr;", "+\t\t\t\tdone : for(int i = 0; i < numberOfIdentifiers; i++){", "+\t\t\t\t\tint length = this.genericsLengthStack[this.genericsLengthPtr - i];", "+\t\t\t\t\tfor(int j = 0; j < length; j++) {", "+\t\t\t\t\t\tASTNode node = this.genericsStack[genPtr - j];", "+\t\t\t\t\t\tCompletionNodeDetector detector = new CompletionNodeDetector(this.assistNode, node);", "+\t\t\t\t\t\tif(detector.containsCompletionNode()) {", "+\t\t\t\t\t\t\tif(node == this.assistNode){", "+\t\t\t\t\t\t\t\tif(this.identifierLengthPtr > -1 &&\tthis.identifierLengthStack[this.identifierLengthPtr]!= 0) {", "+\t\t\t\t\t\t\t\t\tTypeReference ref = this.getTypeReference(0);", "+\t\t\t\t\t\t\t\t\tthis.assistNodeParent = ref;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tthis.assistNodeParent = detector.getCompletionNodeParent();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak done;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tgenPtr -= length;", "+\t\t\t\t}", "+\t\t\t\tif(this.assistNodeParent != null && this.assistNodeParent instanceof TypeReference) {", "+\t\t\t\t\tif(this.currentElement instanceof RecoveredType) {", "+\t\t\t\t\t\tthis.currentElement = this.currentElement.add(new CompletionOnFieldType((TypeReference)this.assistNodeParent, false), 0);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.currentElement = this.currentElement.add((TypeReference)this.assistNodeParent, 0);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\t}", "+\t", "+\tif(this.genericsPtr > -1) {", "+\t\tASTNode node = this.genericsStack[this.genericsPtr];", "+\t\tCompletionNodeDetector detector = new CompletionNodeDetector(this.assistNode, node);", "+\t\tif(detector.containsCompletionNode()) {", "+\t\t\t/* check for completion at the beginning of method body", "+\t\t\t\tbehind an invalid signature", "+\t\t\t */", "+\t\t\tRecoveredMethod method = this.currentElement.enclosingMethod();", "+\t\t\tif (method != null){", "+\t\t\t\tAbstractMethodDeclaration methodDecl = method.methodDeclaration;", "+\t\t\t\tif ((methodDecl.bodyStart == methodDecl.sourceEnd+1) // was missing opening brace", "+\t\t\t\t\t&& (this.scanner.getLineNumber(node.sourceStart) == this.scanner.getLineNumber(methodDecl.sourceEnd))){", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif(node == this.assistNode){", "+\t\t\t\tbuildMoreGenericsCompletionContext(node);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d40b8478cfa10792531aeefb0b92a7e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "50acefc2048260070d2acf9418003e0db6eb34ad", "commitAfterChange": "92852bca9a4e0ceab73bc2cba44652396852b1a5", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "signatureAfterChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "diff": ["-\t\t\t\t// (TODO) enable new formatter", "-\t\t\t\treturn null;", "+\t\t\t\tASTParser parser = ASTParser.newParser(AST.JLS3);", "+\t\t\t\tparser.setSource(source.toCharArray());", "+\t\t\t\tparser.setKind(ASTParser.K_EXPRESSION);", "+\t\t\t\tparser.setCompilerOptions(getDefaultCompilerOptions());", "+\t\t\t\tparser.setResolveBindings(false);", "+\t\t\t\tparser.setUnitName(\"\"); //$NON-NLS-1$", "+\t\t\t\torg.eclipse.jdt.core.dom.ASTNode node = parser.createAST(null);", "+\t\t\t\tif (node.getNodeType() == org.eclipse.jdt.core.dom.ASTNode.COMPILATION_UNIT) return null;", "+\t\t\t\tif (lineSeparator != null) {", "+\t\t\t\t\tthis.preferences.line_separator = lineSeparator;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.preferences.line_separator = System.getProperty(\"line.separator\"); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tthis.preferences.initial_indentation_level = indentationLevel;", "+", "+\t\t\t\tthis.newCodeFormatter2 = new CodeFormatterVisitor2(this.preferences, this.options, offset, length, (CompilationUnit) node.getRoot());", "+\t\t\t\t", "+\t\t\t\tTextEdit textEdit = this.newCodeFormatter2.format(source, (org.eclipse.jdt.core.dom.Expression) node);", "+\t\t\t\treturn textEdit;", "-\t\t\t\t// (TODO) enable new formatter", "-\t\t\t\treturn null;", "+\t\t\t\tASTParser parser = ASTParser.newParser(AST.JLS3);", "+\t\t\t\tparser.setSource(source.toCharArray());", "+\t\t\t\tparser.setKind(ASTParser.K_CLASS_BODY_DECLARATIONS);", "+\t\t\t\tparser.setCompilerOptions(getDefaultCompilerOptions());", "+\t\t\t\tparser.setResolveBindings(false);", "+\t\t\t\tparser.setUnitName(\"\"); //$NON-NLS-1$", "+\t\t\t\torg.eclipse.jdt.core.dom.ASTNode node = parser.createAST(null);", "+\t\t\t\tif (lineSeparator != null) {", "+\t\t\t\t\tthis.preferences.line_separator = lineSeparator;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.preferences.line_separator = System.getProperty(\"line.separator\"); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tthis.preferences.initial_indentation_level = indentationLevel;", "+", "+\t\t\t\tthis.newCodeFormatter2 = new CodeFormatterVisitor2(this.preferences, this.options, offset, length, (CompilationUnit) node.getRoot());", "+\t\t\t\treturn this.newCodeFormatter2.format(source, (AbstractTypeDeclaration) node);", "-\t\t\t\t// (TODO) enable new formatter", "-\t\t\t\treturn null;", "+\t\t\t\tASTParser parser = ASTParser.newParser(AST.JLS3);", "+\t\t\t\tparser.setSource(source.toCharArray());", "+\t\t\t\tparser.setKind(ASTParser.K_STATEMENTS);", "+\t\t\t\tparser.setCompilerOptions(getDefaultCompilerOptions());", "+\t\t\t\tparser.setResolveBindings(false);", "+\t\t\t\tparser.setUnitName(\"\"); //$NON-NLS-1$", "+\t\t\t\torg.eclipse.jdt.core.dom.ASTNode node = parser.createAST(null);", "+\t\t\t\tif (lineSeparator != null) {", "+\t\t\t\t\tthis.preferences.line_separator = lineSeparator;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.preferences.line_separator = System.getProperty(\"line.separator\"); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tthis.preferences.initial_indentation_level = indentationLevel;", "+", "+\t\t\t\tthis.newCodeFormatter2 = new CodeFormatterVisitor2(this.preferences, this.options, offset, length, (CompilationUnit) node.getRoot());", "+\t\t\t\t", "+\t\t\t\treturn this.newCodeFormatter2.format(source, (Block) node);", "-\t\t\t// (TODO) enable new formatter", "-\t\t\treturn null;", "+\t\t\tASTParser parser = ASTParser.newParser(AST.JLS3);", "+\t\t\tparser.setSource(source.toCharArray());", "+\t\t\tparser.setKind(ASTParser.K_COMPILATION_UNIT);", "+\t\t\tparser.setCompilerOptions(getDefaultCompilerOptions());", "+\t\t\tparser.setResolveBindings(false);", "+\t\t\tparser.setUnitName(\"\"); //$NON-NLS-1$", "+\t\t\torg.eclipse.jdt.core.dom.ASTNode node = parser.createAST(null);", "+\t\t\tif (lineSeparator != null) {", "+\t\t\t\tthis.preferences.line_separator = lineSeparator;", "+\t\t\t} else {", "+\t\t\t\tthis.preferences.line_separator = System.getProperty(\"line.separator\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tthis.preferences.initial_indentation_level = indentationLevel;", "+", "+\t\t\tthis.newCodeFormatter2 = new CodeFormatterVisitor2(this.preferences, this.options, offset, length, (CompilationUnit) node.getRoot());", "+\t\t\treturn this.newCodeFormatter2.format(source, (CompilationUnit) node);"]}], "num": 39135}
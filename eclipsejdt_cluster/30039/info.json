{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2749b3855c60671adc1414086be7bb06", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19f3c640dcfee63d0cf771ba52d3c5d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "06cb2fb2cd016c5bb9806c77f9b924461e74f729", "commitAfterChange": "f722c144cbd3d9ea00d9fcbd08f20190051637e3", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 78, "signatureBeforeChange": " public void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " public void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\t\t\t\t\tswitch(token.charAt(0)) {", "+\t\t\t\t\t\t\tcase '+' :", "+\t\t\t\t\t\t\t\tisEnabling = true;", "+\t\t\t\t\t\t\t\ttoken = token.substring(1);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase '-' :", "+\t\t\t\t\t\t\t\tisEnabling = false;", "+\t\t\t\t\t\t\t\ttoken = token.substring(1);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "-\t\t\t\t\tif (tokenCounter == 0)", "+\t\t\t\t\tif (tokenCounter == 0) {", "+\t\t\t\t\t}", "+", "+\t", "+\tif (this.pendingErrors != null) {", "+\t\tfor (Iterator iterator = this.pendingErrors.iterator(); iterator.hasNext(); ) {", "+\t\t\tString message = (String) iterator.next();", "+\t\t\tthis.logger.logPendingError(message);", "+\t\t}", "+\t\tthis.pendingErrors = null;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e4d2e86ddcda5ed7510aaa91944eb07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "82e3492687fb385a8a9ba6c56e1f6d491dc8d79a", "commitAfterChange": "0b30f6ac807cc8aa14a5978d1dd305dd71baedda", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected void verifyBindings(TagElement tagElement)", "signatureAfterChange": " \tprivate void verifyBindings(TagElement tagElement)", "diff": ["-\tprotected void verifyBindings(TagElement tagElement) {", "+\tprivate void verifyBindings(TagElement tagElement) {", "-\t\t\t\t\tverifyName(name.getQualifier());", "+\t\t\t\t\tverifyNameBindings(name.getQualifier());", "-\t\t\t\t\t\tverifyName(memberRef.getQualifier());", "+\t\t\t\t\t\tverifyNameBindings(memberRef.getQualifier());", "-\t\t\t\t\t\tverifyName(methodRef.getQualifier());", "-\t\t\t\t\t\tverifyParameters(methodRef.parameters());", "+\t\t\t\t\t\tverifyNameBindings(methodRef.getQualifier());", "+\t\t\t\t\t\tIterator parameters = methodRef.parameters().listIterator();", "+\t\t\t\t\t\twhile (parameters.hasNext()) {", "+\t\t\t\t\t\t\tMethodRefParameter param = (MethodRefParameter) parameters.next();", "+\t\t\t\t\t\t\tassertNotNull(param.getType()+\" binding was not found!\", param.getType().resolveBinding());", "+\t\t\t\t\t\t\tif (param.getType().isSimpleType()) {", "+\t\t\t\t\t\t\t\tverifyNameBindings(((SimpleType)param.getType()).getName());", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t//\tDo not verify parameter name as no binding is expected for them", "+\t\t\t\t\t\t}"]}], "num": 30039}
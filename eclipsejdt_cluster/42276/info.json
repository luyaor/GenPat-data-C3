{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "034fee2cc6d6ac5777cd567e889b0984", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c1134fa8843fe85f2f4504cdcc9d3e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "e589570c4bd9e6c5ed804728bca5f124c9938845", "commitAfterChange": "876d1e29545f3823ab6b6c14229362303cd9cc00", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "signatureAfterChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "diff": ["-\t// if an inheritedMethod has been 'replaced' by a supertype's method then skip it", "-", "+\t// if an inheritedMethod has been 'replaced' by a supertype's method then skip it, however", "+    // see usage of canOverridingMethodDifferInErasure below.", "-\tboolean allSuperclassesAreAbstract = true;", "-\t    if (allSuperclassesAreAbstract) {", "-\t\t    if (superType.isAbstract()) {", "-\t\t\t\t// only need to include superinterfaces if immediate superclasses are abstract", "-\t\t\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "-\t\t\t\t\tif (interfacesToVisit == null) {", "-\t\t\t\t\t\tinterfacesToVisit = itsInterfaces;", "-\t\t\t\t\t\tnextPosition = interfacesToVisit.length;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tint itsLength = itsInterfaces.length;", "-\t\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "-\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "-\t\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "-\t\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "-\t\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "-\t\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "-\t\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t// We used to only include superinterfaces if immediate superclasses are abstract", "+\t\t// but that is problematic. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=302358", "+\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "+\t\t\tif (interfacesToVisit == null) {", "+\t\t\t\tinterfacesToVisit = itsInterfaces;", "+\t\t\t\tnextPosition = interfacesToVisit.length;", "-\t\t\t    allSuperclassesAreAbstract = false;", "+\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "+\t\t\t\t}", "-\t\t\t\t\tif (existingMethod.declaringClass != inheritedMethod.declaringClass && areMethodsCompatible(existingMethod, inheritedMethod)) {", "+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=302358, skip inherited method only if any overriding version", "+\t\t\t\t\t// in a subclass is guaranteed to have the same erasure as an existing method.", "+\t\t\t\t\tif (existingMethod.declaringClass != inheritedMethod.declaringClass && areMethodsCompatible(existingMethod, inheritedMethod) && !canOverridingMethodDifferInErasure(existingMethod, inheritedMethod)) {", "+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=302358, skip inherited method only if any overriding version", "+\t\t\t\t\t// in a subclass is guaranteed to have the same erasure as an existing method.", "-\t\t\t\t\t\tif (isInterfaceMethodImplemented(inheritedMethod, existingMethods[e], superType))", "+\t\t\t\t\t\tif (isInterfaceMethodImplemented(inheritedMethod, existingMethods[e], superType) && !canOverridingMethodDifferInErasure(existingMethods[e], inheritedMethod))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "521ea0afaaaef0f92f2a66ff5e773679", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "973af06dbc6df022ac42e8e0a0c238581d8558f6", "commitAfterChange": "f61787e560ec300f4e60b2d9cc64378b38b8a03a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 59, "signatureBeforeChange": " public ReferenceBinding findSuperTypeErasingTo(int wellKnownErasureID, boolean erasureIsClass)", "signatureAfterChange": " public boolean isThrowable()", "diff": ["- */", "-public ReferenceBinding findSuperTypeErasingTo(int wellKnownErasureID, boolean erasureIsClass) {", "-", "-    // do not allow type variables to match with erasures for free", "-    if (this.id == wellKnownErasureID || (!isTypeVariable() && !isIntersectionType()  && erasure().id == wellKnownErasureID)) return this;", "-", "-    ReferenceBinding currentType = this;", "-    // iterate superclass to avoid recording interfaces if searched supertype is class", "-    if (erasureIsClass) {", "-\t\twhile ((currentType = currentType.superclass()) != null) { ", "-\t\t\tif (currentType.id == wellKnownErasureID || (!currentType.isTypeVariable() && !currentType.isIntersectionType() && currentType.erasure().id == wellKnownErasureID))", "-\t\t\t\treturn currentType;", "-\t\t}    ", "-\t\treturn null;", "-    }", "-\tReferenceBinding[] interfacesToVisit = null;", "-\tint nextPosition = 0;", "-\tdo {", "-\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();", "-\t\t// be resilient to unitialized interfaces (144976)", "-\t\tif (itsInterfaces != null && itsInterfaces != Binding.NO_SUPERINTERFACES) { // null check for extra resilience (144976)", "-\t\t\tif (interfacesToVisit == null) {", "-\t\t\t\tinterfacesToVisit = itsInterfaces;", "-\t\t\t\tnextPosition = interfacesToVisit.length;", "-\t\t\t} else {", "-\t\t\t\tint itsLength = itsInterfaces.length;", "-\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "-\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "-\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "-\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "-\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "-\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "-\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t} while ((currentType = currentType.superclass()) != null);", "-\t\t\t", "-\tfor (int i = 0; i < nextPosition; i++) {", "-\t\tcurrentType = interfacesToVisit[i];", "-\t\tif (currentType.id == wellKnownErasureID || (!currentType.isTypeVariable() && !currentType.isIntersectionType() && currentType.erasure().id == wellKnownErasureID))", "-\t\t\treturn currentType;", "-", "-\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();", "-\t\tif (itsInterfaces != null && itsInterfaces != Binding.NO_SUPERINTERFACES) {", "-\t\t\tint itsLength = itsInterfaces.length;", "-\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "-\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "-\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "-\t\t\t\tReferenceBinding next = itsInterfaces[a];", "-\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "-\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "-\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "-\t\t\t}", "-\t\t}", "-\t}", "-\treturn null;", "-}", "+ */", "+public boolean isThrowable() {", "+\tReferenceBinding current = this;", "+\tdo {", "+\t\tswitch (current.id) {", "+\t\t\tcase TypeIds.T_JavaLangThrowable :", "+\t\t\tcase TypeIds.T_JavaLangError :", "+\t\t\tcase TypeIds.T_JavaLangRuntimeException :", "+\t\t\tcase TypeIds.T_JavaLangException :", "+\t\t\t\treturn true;", "+\t\t}", "+\t} while ((current = current.superclass()) != null);", "+\treturn false;", "+}"]}], "num": 42276}
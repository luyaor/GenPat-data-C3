{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec7a44596b897032256a745b45b1add3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e87d6f5e86f3d2a351c7bf7bd093715", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "e67d1dc6830648c83fdb0e0b83b59925424638d8", "commitAfterChange": "4817a4bde9db799e7a793068d64037f59bfa521f", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 47, "signatureBeforeChange": " private TypeBinding findDefaultNullness(Scope currentScope, LookupEnvironment environment)", "signatureAfterChange": " private int findNonNullDefault(Scope currentScope, LookupEnvironment environment)", "diff": ["-private TypeBinding findDefaultNullness(Scope currentScope, LookupEnvironment environment) {", "+private int findNonNullDefault(Scope currentScope, LookupEnvironment environment) {", "-\tTypeBinding annotationBinding;", "-\t\t\t\t\tannotationBinding = environment.getNullAnnotationBindingFromDefault(referenceMethod.binding.tagBits, true/*resolve*/);", "-\t\t\t\t\tif (annotationBinding != null)", "-\t\t\t\t\t\treturn annotationBinding;", "+\t\t\t\t\tlong methodTagBits = referenceMethod.binding.tagBits;", "+\t\t\t\t\tif ((methodTagBits & TagBits.AnnotationNonNullByDefault) != 0)", "+\t\t\t\t\t\treturn NONNULL_BY_DEFAULT;", "+\t\t\t\t\tif ((methodTagBits & TagBits.AnnotationNullUnspecifiedByDefault) != 0)", "+\t\t\t\t\t\treturn NULL_UNSPECIFIED_BY_DEFAULT;", "-\t\t\t\t\tannotationBinding = currentType.getNullnessDefaultAnnotation();", "-\t\t\t\t\tif (annotationBinding != null)", "-\t\t\t\t\t\treturn annotationBinding;", "+\t\t\t\t\tint foundDefaultNullness = currentType.defaultNullness;", "+\t\t\t\t\tif (foundDefaultNullness != NO_NULL_DEFAULT) {", "+\t\t\t\t\t\treturn foundDefaultNullness;", "+\t\t\t\t\t}", "-\t\tannotationBinding = currentType.getPackage().getNullnessDefaultAnnotation(this.scope);", "-\t\tif (annotationBinding != null)", "-\t\t\treturn annotationBinding;", "+\t\tint foundDefaultNullness = currentType.getPackage().defaultNullness;", "+\t\tif (foundDefaultNullness != NO_NULL_DEFAULT) {", "+\t\t\treturn foundDefaultNullness;", "+\t\t}", "-\tlong defaultNullness = environment.globalOptions.defaultNonNullness;", "-\tif (defaultNullness != 0) {", "-\t\t// we have a default, so we need an annotation type to record this during compile and in the byte code", "-\t\tannotationBinding = environment.getNullAnnotationBinding(defaultNullness, true/*resolve*/);", "-\t\tif (annotationBinding != null)", "-\t\t\treturn annotationBinding;", "-", "-\t\t// on this branch default was not defined using an annotation, thus annotation type can still be missing", "-\t\tif (defaultNullness == TagBits.AnnotationNonNull)", "-\t\t\tthis.scope.problemReporter().missingNullAnnotationType(environment.getNonNullAnnotationName());", "-\t\telse", "-\t\t\tthis.scope.problemReporter().abortDueToInternalError(\"Illegal default nullness value: \"+defaultNullness); //$NON-NLS-1$", "-\t\t// reset default to avoid duplicate errors:", "-\t\tenvironment.globalOptions.defaultNonNullness = 0;", "-\t}", "-\treturn null;", "+\tif (environment.globalOptions.defaultNonNullness == TagBits.AnnotationNonNull)", "+\t\treturn NONNULL_BY_DEFAULT;", "+\treturn NO_NULL_DEFAULT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adc637005f7258a4fcd9864b1f933306", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "6781b5445d9813f939573ded9d37ee82c9dbbd15", "commitAfterChange": "6989e5bb4ed8f3be37ea69298930332629e9b475", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["-\tif (this.delegateThis != null) {", "-\t\tif (this.binding.declaringClass != this.delegateThis.type", "-\t\t\t&& this.binding.declaringClass != null", "-\t\t\t&& !this.binding.isConstantValue()", "-\t\t\t&& ((currentScope.environment().options.targetJDK >= ClassFileConstants.JDK1_2 ", "-\t\t\t\t\t&& !this.binding.isStatic()", "-\t\t\t\t\t&& this.binding.declaringClass.id != T_JavaLangObject) // no change for Object fields (if there was any)", "-\t\t\t\t|| !this.codegenBinding.declaringClass.canBeSeenBy(currentScope))){", "-\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(this.codegenBinding, (ReferenceBinding)this.delegateThis.type.erasure());", "+\tTypeBinding someReceiverType = this.delegateThis != null ? this.delegateThis.type : this.receiverType;", "+\tif (this.binding.declaringClass != someReceiverType", "+\t\t\t&& !someReceiverType.isArrayType()", "+\t\t\t&& this.binding.declaringClass != null // array.length", "+\t\t\t&& !this.binding.isConstantValue()) {", "+\t", "+\t\tCompilerOptions options = currentScope.environment().options;", "+\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "+\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !receiver.isImplicitThis() || !this.codegenBinding.isStatic())", "+\t\t\t\t&& this.binding.declaringClass.id != T_JavaLangObject) // no change for Object fields", "+\t\t\t|| !this.binding.declaringClass.canBeSeenBy(currentScope)) {", "+", "+\t\t\tthis.codegenBinding =", "+\t\t\t\tcurrentScope.enclosingSourceType().getUpdatedFieldBinding(", "+\t\t\t\t\tthis.codegenBinding,", "+\t\t\t\t\t(ReferenceBinding) someReceiverType.erasure());", "-\t} else if (this.binding.declaringClass != this.receiverType", "-\t\t&& !this.receiverType.isArrayType()", "-\t\t&& this.binding.declaringClass != null // array.length", "-\t\t&& !this.binding.isConstantValue()", "-\t\t&& ((currentScope.environment().options.targetJDK >= ClassFileConstants.JDK1_2", "-\t\t\t\t&& this.binding.declaringClass.id != T_JavaLangObject) //no change for Object fields (in case there was)", "-\t\t\t|| !this.codegenBinding.declaringClass.canBeSeenBy(currentScope))){", "-\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(this.codegenBinding, (ReferenceBinding) this.receiverType.erasure());", "-\t}", "+\t}\t"]}], "num": 10453}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "01b3ffda1d2c05ab9b2ca6c6f4ab5e0f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2716242da07dbff98a123d434611c8cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "da9e30a8d441a1da42a289d2606f77eaa8d811d1", "commitAfterChange": "ba5344094af5a10113083e490b48587602f0a697", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t public HierarchyResolver( \tINameEnvironment nameEnvironment, \tIErrorHandlingPolicy policy, \tMap settings, \tIHierarchyRequestor requestor, \tIProblemFactory problemFactory)", "signatureAfterChange": " \t public HierarchyResolver(INameEnvironment nameEnvironment, Map settings, IHierarchyRequestor requestor, IProblemFactory problemFactory)", "diff": ["-public HierarchyResolver(", "-\tINameEnvironment nameEnvironment,", "-\tIErrorHandlingPolicy policy,", "-\tMap settings,", "-\tIHierarchyRequestor requestor,", "-\tIProblemFactory problemFactory) {", "-", "-\t// create a problem handler given a handling policy", "-\toptions = settings == null ? new CompilerOptions() : new CompilerOptions(settings);", "-\tProblemReporter problemReporter = new ProblemReporter(policy, options, problemFactory);", "-\tthis.lookupEnvironment = new LookupEnvironment(this, options, problemReporter, nameEnvironment);", "-\tthis.requestor = requestor;", "-", "-\tthis.typeIndex = -1;", "-\tthis.typeModels = new IGenericType[5];", "-\tthis.typeBindings = new ReferenceBinding[5];", "-}", "+\t// create a problem handler with the 'exit after all problems' handling policy", "+\toptions = settings == null ? new CompilerOptions() : new CompilerOptions(settings);", "+\tIErrorHandlingPolicy policy = DefaultErrorHandlingPolicies.exitAfterAllProblems();", "+\tProblemReporter problemReporter = new ProblemReporter(policy, options, problemFactory);", "+", "+\tthis.initialize(", "+\t\tnew LookupEnvironment(this, options, problemReporter, nameEnvironment),", "+\t\trequestor);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44f6ba46aba1201d42ddc78070808580", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \tpublic Compiler(\r \t\tINameEnvironment environment,\r \t\tIErrorHandlingPolicy policy,\r \t\tConfigurableOption[] settings,\r \t\tICompilerRequestor requestor,\r \t\tIProblemFactory problemFactory)", "signatureAfterChange": "\r public Compiler(\r \tINameEnvironment environment, \r \tIErrorHandlingPolicy policy, \r \tConfigurableOption[] settings, \r \tICompilerRequestor requestor, \r \tIProblemFactory problemFactory)", "diff": ["-\t */\r", "-\tpublic Compiler(\r", "-\t\tINameEnvironment environment,\r", "-\t\tIErrorHandlingPolicy policy,\r", "-\t\tConfigurableOption[] settings,\r", "-\t\tICompilerRequestor requestor,\r", "-\t\tIProblemFactory problemFactory) {\r", "+ */\r", "+public Compiler(\r", "+\tINameEnvironment environment, \r", "+\tIErrorHandlingPolicy policy, \r", "+\tConfigurableOption[] settings, \r", "+\tICompilerRequestor requestor, \r", "+\tIProblemFactory problemFactory) {\r", "-\t\t// create a problem handler given a handling policy\r", "-\t\tthis.options = new CompilerOptions(settings);\r", "-\t\tthis.requestor = requestor;\r", "-\t\tthis.problemReporter =\r", "-\t\t\tnew ProblemReporter(policy, this.options, problemFactory);\r", "-\t\tthis.lookupEnvironment =\r", "-\t\t\tnew LookupEnvironment(this, options, problemReporter, environment);\r", "-\t\tthis.parser =\r", "-\t\t\tnew Parser(\r", "-\t\t\t\tproblemReporter, \r", "-\t\t\t\tthis.options.parseLiteralExpressionsAsConstants, \r", "-\t\t\t\tthis.options.getAssertMode());\r", "-\t}\r", "+\t// create a problem handler given a handling policy\r", "+\tthis.options = new CompilerOptions(settings);\r", "+\tthis.requestor = requestor;\r", "+\tthis.problemReporter = \r", "+\t\tnew ProblemReporter(\r", "+\t\t\tpolicy, \r", "+\t\t\tthis.options, \r", "+\t\t\tproblemFactory);\r", "+\tthis.lookupEnvironment = new LookupEnvironment(this, options, problemReporter, environment);\r", "+\tthis.parser = \r", "+\t\tnew Parser(problemReporter, this.options.parseLiteralExpressionsAsConstants); \r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a24e6f078ba605f5c22f63d2d7b7e73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \tpublic Compiler(\r \t\tINameEnvironment environment,\r \t\tIErrorHandlingPolicy policy,\r \t\tConfigurableOption[] settings,\r \t\tICompilerRequestor requestor,\r \t\tIProblemFactory problemFactory)", "signatureAfterChange": "\r public Compiler(\r \tINameEnvironment environment, \r \tIErrorHandlingPolicy policy, \r \tConfigurableOption[] settings, \r \tICompilerRequestor requestor, \r \tIProblemFactory problemFactory)", "diff": ["-\t */\r", "-\tpublic Compiler(\r", "-\t\tINameEnvironment environment,\r", "-\t\tIErrorHandlingPolicy policy,\r", "-\t\tConfigurableOption[] settings,\r", "-\t\tICompilerRequestor requestor,\r", "-\t\tIProblemFactory problemFactory) {\r", "+ */\r", "+public Compiler(\r", "+\tINameEnvironment environment, \r", "+\tIErrorHandlingPolicy policy, \r", "+\tConfigurableOption[] settings, \r", "+\tICompilerRequestor requestor, \r", "+\tIProblemFactory problemFactory) {\r", "-\t\t// create a problem handler given a handling policy\r", "-\t\tthis.options = new CompilerOptions(settings);\r", "-\t\tthis.requestor = requestor;\r", "-\t\tthis.problemReporter =\r", "-\t\t\tnew ProblemReporter(policy, this.options, problemFactory);\r", "-\t\tthis.lookupEnvironment =\r", "-\t\t\tnew LookupEnvironment(this, options, problemReporter, environment);\r", "-\t\tthis.parser =\r", "-\t\t\tnew Parser(\r", "-\t\t\t\tproblemReporter, \r", "-\t\t\t\tthis.options.parseLiteralExpressionsAsConstants, \r", "-\t\t\t\tthis.options.getAssertMode());\r", "-\t}\r", "+\t// create a problem handler given a handling policy\r", "+\tthis.options = new CompilerOptions(settings);\r", "+\tthis.requestor = requestor;\r", "+\tthis.problemReporter = \r", "+\t\tnew ProblemReporter(\r", "+\t\t\tpolicy, \r", "+\t\t\tthis.options, \r", "+\t\t\tproblemFactory);\r", "+\tthis.lookupEnvironment = new LookupEnvironment(this, options, problemReporter, environment);\r", "+\tthis.parser = \r", "+\t\tnew Parser(problemReporter, this.options.parseLiteralExpressionsAsConstants); \r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81046c3db3c8159b5c3d9a0d2168590a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \tpublic Compiler(\r \t\tINameEnvironment environment,\r \t\tIErrorHandlingPolicy policy,\r \t\tConfigurableOption[] settings,\r \t\tICompilerRequestor requestor,\r \t\tIProblemFactory problemFactory)", "signatureAfterChange": "\r public Compiler(\r \tINameEnvironment environment, \r \tIErrorHandlingPolicy policy, \r \tConfigurableOption[] settings, \r \tICompilerRequestor requestor, \r \tIProblemFactory problemFactory)", "diff": ["-\t */\r", "-\tpublic Compiler(\r", "-\t\tINameEnvironment environment,\r", "-\t\tIErrorHandlingPolicy policy,\r", "-\t\tConfigurableOption[] settings,\r", "-\t\tICompilerRequestor requestor,\r", "-\t\tIProblemFactory problemFactory) {\r", "+ */\r", "+public Compiler(\r", "+\tINameEnvironment environment, \r", "+\tIErrorHandlingPolicy policy, \r", "+\tConfigurableOption[] settings, \r", "+\tICompilerRequestor requestor, \r", "+\tIProblemFactory problemFactory) {\r", "-\t\t// create a problem handler given a handling policy\r", "-\t\tthis.options = new CompilerOptions(settings);\r", "-\t\tthis.requestor = requestor;\r", "-\t\tthis.problemReporter =\r", "-\t\t\tnew ProblemReporter(policy, this.options, problemFactory);\r", "-\t\tthis.lookupEnvironment =\r", "-\t\t\tnew LookupEnvironment(this, options, problemReporter, environment);\r", "-\t\tthis.parser =\r", "-\t\t\tnew Parser(\r", "-\t\t\t\tproblemReporter, \r", "-\t\t\t\tthis.options.parseLiteralExpressionsAsConstants, \r", "-\t\t\t\tthis.options.getAssertMode());\r", "-\t}\r", "+\t// create a problem handler given a handling policy\r", "+\tthis.options = new CompilerOptions(settings);\r", "+\tthis.requestor = requestor;\r", "+\tthis.problemReporter = \r", "+\t\tnew ProblemReporter(\r", "+\t\t\tpolicy, \r", "+\t\t\tthis.options, \r", "+\t\t\tproblemFactory);\r", "+\tthis.lookupEnvironment = new LookupEnvironment(this, options, problemReporter, environment);\r", "+\tthis.parser = \r", "+\t\tnew Parser(problemReporter, this.options.parseLiteralExpressionsAsConstants); \r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec76144d964e429b6d21b45d972e35b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \tpublic Compiler(\r \t\tINameEnvironment environment,\r \t\tIErrorHandlingPolicy policy,\r \t\tConfigurableOption[] settings,\r \t\tICompilerRequestor requestor,\r \t\tIProblemFactory problemFactory)", "signatureAfterChange": "\r public Compiler(\r \tINameEnvironment environment, \r \tIErrorHandlingPolicy policy, \r \tConfigurableOption[] settings, \r \tICompilerRequestor requestor, \r \tIProblemFactory problemFactory)", "diff": ["-\t */\r", "-\tpublic Compiler(\r", "-\t\tINameEnvironment environment,\r", "-\t\tIErrorHandlingPolicy policy,\r", "-\t\tConfigurableOption[] settings,\r", "-\t\tICompilerRequestor requestor,\r", "-\t\tIProblemFactory problemFactory) {\r", "+ */\r", "+public Compiler(\r", "+\tINameEnvironment environment, \r", "+\tIErrorHandlingPolicy policy, \r", "+\tConfigurableOption[] settings, \r", "+\tICompilerRequestor requestor, \r", "+\tIProblemFactory problemFactory) {\r", "-\t\t// create a problem handler given a handling policy\r", "-\t\tthis.options = new CompilerOptions(settings);\r", "-\t\tthis.requestor = requestor;\r", "-\t\tthis.problemReporter =\r", "-\t\t\tnew ProblemReporter(policy, this.options, problemFactory);\r", "-\t\tthis.lookupEnvironment =\r", "-\t\t\tnew LookupEnvironment(this, options, problemReporter, environment);\r", "-\t\tthis.parser =\r", "-\t\t\tnew Parser(\r", "-\t\t\t\tproblemReporter, \r", "-\t\t\t\tthis.options.parseLiteralExpressionsAsConstants, \r", "-\t\t\t\tthis.options.getAssertMode());\r", "-\t}\r", "+\t// create a problem handler given a handling policy\r", "+\tthis.options = new CompilerOptions(settings);\r", "+\tthis.requestor = requestor;\r", "+\tthis.problemReporter = \r", "+\t\tnew ProblemReporter(\r", "+\t\t\tpolicy, \r", "+\t\t\tthis.options, \r", "+\t\t\tproblemFactory);\r", "+\tthis.lookupEnvironment = new LookupEnvironment(this, options, problemReporter, environment);\r", "+\tthis.parser = \r", "+\t\tnew Parser(problemReporter, this.options.parseLiteralExpressionsAsConstants); \r", "+}\r"]}], "num": 59822}
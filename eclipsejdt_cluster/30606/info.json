{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2273ca5f26b3205461f826520aca420", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eeb1a5fb415f04c0e90f3a1c2995e70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "7b815bfaa3b1a804bb04e149d3fdcdeccff01e22", "commitAfterChange": "f447e8419317d96ca676850de75b170e4276d1fc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t", "-\t\t\tif (this.originalValueIfTrueType.kind() == Binding.POLY_TYPE || this.originalValueIfFalseType.kind() == Binding.POLY_TYPE) {", "-\t\t\t\tthis.isPolyExpression = true;", "+", "+\t\t\tif (isPolyExpression()) {", "+\t\t\t}", "+", "+\t\t\tif (this.originalValueIfTrueType.kind() == Binding.POLY_TYPE || this.originalValueIfFalseType.kind() == Binding.POLY_TYPE) {", "-\t\t\tif (valueIfTrueType != null && !valueIfTrueType.isCompatibleWith(this.expectedType, scope)) {", "-\t\t\t\tscope.problemReporter().typeMismatchError(valueIfTrueType, this.expectedType, this.valueIfTrue, null);", "+\t\t\tif (valueIfTrueType != null) {", "+\t\t\t\tif (!valueIfTrueType.isCompatibleWith(this.expectedType, scope)) {", "+\t\t\t\t\tscope.problemReporter().typeMismatchError(valueIfTrueType, this.expectedType, this.valueIfTrue, null);", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.valueIfTrue.computeConversion(scope, this.expectedType, this.originalValueIfTrueType);\t", "+\t\t\t\t}", "-\t\t\tif (valueIfFalseType != null && !valueIfFalseType.isCompatibleWith(this.expectedType, scope)) {", "-\t\t\t\tscope.problemReporter().typeMismatchError(valueIfFalseType, this.expectedType, this.valueIfFalse, null);", "+\t\t\tif (valueIfFalseType != null) {", "+\t\t\t\tif (!valueIfFalseType.isCompatibleWith(this.expectedType, scope)) {", "+\t\t\t\t\tscope.problemReporter().typeMismatchError(valueIfFalseType, this.expectedType, this.valueIfFalse, null);", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.valueIfFalse.computeConversion(scope, this.expectedType, this.originalValueIfFalseType);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "657a7d18a132622df7555ab2d7b8ab9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "a0fd6dae6dbb696f05ef352cad9852f287a5aeec", "commitAfterChange": "3f1cbb254c604c7416bb668e3ca0c2f6d90b8afc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "signatureAfterChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "diff": ["+\t\tif (!invocation.innersNeedUpdate())", "+\t\t\treturn;", "-\t\t\t\t\tif (infCtx.stepCompleted < InferenceContext18.TYPE_INFERRED)", "-\t\t\t\t\t\treturn; // not yet ready for pushing type information down to arguments", "+\t\t\t\t\tif (infCtx.stepCompleted != InferenceContext18.TYPE_INFERRED) {", "+\t\t\t\t\t\t// only work in the exact state of TYPE_INFERRED", "+\t\t\t\t\t\t// - below we're not yet ready", "+\t\t\t\t\t\t// - above we're already done-done", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "-\t\t\t\t\t\tif (innerContext != null && innerContext.stepCompleted < InferenceContext18.TYPE_INFERRED) {\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\targument.setExpectedType(parameterType);", "-\t\t\t\t\t\t\tMethodBinding improvedBinding = innerContext.inferInvocationType(innerInvocation, parameterizedMethod);", "-\t\t\t\t\t\t\tinnerInvocation.updateBindings(improvedBinding);", "+\t\t\t\t\t\tif (innerContext != null) {", "+\t\t\t\t\t\t\tif (innerContext.stepCompleted < InferenceContext18.TYPE_INFERRED) {", "+\t\t\t\t\t\t\t\targument.setExpectedType(parameterType);", "+\t\t\t\t\t\t\t\tMethodBinding improvedBinding = innerContext.inferInvocationType(innerInvocation, parameterizedMethod);", "+\t\t\t\t\t\t\t\tinnerInvocation.updateBindings(improvedBinding);", "+\t\t\t\t\t\t\t\t// TODO need to report invalidMethod if !improvedBinding.isValidBinding() ?", "+\t\t\t\t\t\t\t} else if (innerContext.stepCompleted < InferenceContext18.BINDINGS_UPDATED) {", "+\t\t\t\t\t\t\t\tinnerContext.rebindInnerPolies(parameterizedMethod, innerInvocation);", "+\t\t\t\t\t\t\t}", "+\t\tinvocation.innerUpdateDone();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c87656a31a4ed4f7fe7de78eac798314", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "78b182da9e370f6f00f239fd2a2de8309bdf9aac", "commitAfterChange": "197b39bd97634f2d50539573e68e08ab73d7c718", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "  public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t// outer access ?", "-\tif (!isStatic && ((bits & DepthMASK) != 0) && receiver.isImplicitThis()){", "+\tif (isStatic) {", "+\t\treceiver.generateCode(currentScope, codeStream, false);", "+\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t} else if ((bits & DepthMASK) != 0 && receiver.isImplicitThis()) { // outer access ?", "-\t\treceiver.generateCode(currentScope, codeStream, !isStatic);", "+\t\treceiver.generateCode(currentScope, codeStream, true);", "+\t\tif (this.receiverGenericCast != null) ", "+\t\t\tcodeStream.checkcast(this.receiverGenericCast);", "+\t\t"]}], "num": 30606}
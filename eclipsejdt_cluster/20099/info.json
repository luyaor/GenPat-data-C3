{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee41eb08df7e3768f21b01c18fc1c3f9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08c781ca4a69dbff045bd60c1cf5974d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "5e4ea8ac03b51c08067ab35c8af60e3999ca1301", "commitAfterChange": "aaea57f144ce91db666531c49de57c996bd81422", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " protected void reportMatchingSuper(TypeReference superReference, IJavaElement enclosingElement, MatchingNodeSet nodeSet, boolean matchedClassContainer) throws CoreException", "signatureAfterChange": " protected void reportMatchingSuper(TypeReference superReference, IJavaElement enclosingElement, MatchingNodeSet nodeSet, boolean matchedClassContainer) throws CoreException", "diff": ["-\tif (superReference instanceof ParameterizedSingleTypeReference) {", "-\t\tTypeReference[] typeArguments = ((ParameterizedSingleTypeReference)superReference).typeArguments;", "-\t\tif (typeArguments != null && typeArguments.length > 0) {", "-\t\t\tnodes = nodeSet.matchingNodes(superReference.sourceStart, typeArguments[typeArguments.length-1].sourceEnd);", "-\t\t}", "-\t} else if (superReference instanceof ParameterizedQualifiedTypeReference) {", "-\t\tTypeReference[][] typeArguments = ((ParameterizedQualifiedTypeReference)superReference).typeArguments;", "-\t\tif (typeArguments != null && typeArguments.length > 0) {", "-\t\t\tTypeReference[] lastTypeArgs = typeArguments[typeArguments.length-1];", "-\t\t\tint end = superReference.sourceEnd;", "-\t\t\tif (lastTypeArgs != null && lastTypeArgs.length > 0 && lastTypeArgs[lastTypeArgs.length-1].sourceEnd > end) {", "-\t\t\t\tend = lastTypeArgs[lastTypeArgs.length-1].sourceEnd;", "-\t\t\t}", "-\t\t\tnodes = nodeSet.matchingNodes(superReference.sourceStart, end);", "-\t\t}", "+\tif (superReference instanceof ParameterizedSingleTypeReference || superReference instanceof ParameterizedQualifiedTypeReference) {", "+\t\tlong lastTypeArgumentInfo = findLastTypeArgumentInfo(superReference);", "+\t\tnodes = nodeSet.matchingNodes(superReference.sourceStart, (int)lastTypeArgumentInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b531d61c4e27b13258267145e1f9da44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "08c5b9004bde27fb4063ce300ce881966676fe74", "commitAfterChange": "28d58bf6eb942015446b8ffce8f446f86e9686d9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\tif ((this.binding = scope.getConstructor(receiverType, argumentTypes, this)).isValidBinding()) {", "-\t\t\t\tif (polyExpressionSeen) {", "-\t\t\t\t\tboolean variableArity = this.binding.isVarargs();", "-\t\t\t\t\tfinal TypeBinding[] parameters = this.binding.parameters;", "-\t\t\t\t\tfinal int parametersLength = parameters.length;", "-\t\t\t\t\tfor (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {", "-\t\t\t\t\t\tExpression argument = this.arguments[i];", "-\t\t\t\t\t\tTypeBinding parameterType = i < parametersLength ? parameters[i] : parameters[parametersLength - 1];", "-\t\t\t\t\t\tif (argumentTypes[i] instanceof PolyTypeBinding) {", "-\t\t\t\t\t\t\targument.setExpressionContext(INVOCATION_CONTEXT);", "-\t\t\t\t\t\t\tif (variableArity && i >= parametersLength - 1)", "-\t\t\t\t\t\t\t\targument.tagAsEllipsisArgument();", "-\t\t\t\t\t\t\targument.setExpectedType(parameterType);", "-\t\t\t\t\t\t\targumentTypes[i] = argument.resolveType(scope);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\tthis.binding = scope.getConstructor(receiverType, argumentTypes, this);", "+\t\t\tif (polyExpressionSeen && polyExpressionsHaveErrors(scope, this.binding, this.arguments, argumentTypes))", "+\t\t\t\treturn;", "+\t\t\tif (this.binding.isValidBinding()) {"]}], "num": 20099}
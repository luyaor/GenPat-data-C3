{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65c557b728d7ed49292c56be377e8dfb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "580c2fded4e49ef8905ec0fe8046be29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "c4891fe70e58ba287a7bbc2f099afcf753974e95", "commitAfterChange": "f50252d848b2855a0e3b480a92607978678762ce", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprotected boolean parseParam() throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseParam() throws InvalidInputException", "diff": ["-//\t\tthis.scanner.tokenizeLineSeparator = true;", "-\t\tint token = readToken();", "-\t\tif (token != TerminalTokens.TokenNameWHITESPACE) {", "+\t\tif (this.scanner.currentCharacter != ' ' && !Character.isWhitespace(this.scanner.currentCharacter)) {", "+\t\tint token = -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1df141c1cc7c7a7507eb453b0e3b7ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "3c1df96cd104b0fc430e4dc2bba86da9035261e4", "commitAfterChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tprivate void buildMethods()", "signatureAfterChange": " \t \tprivate void buildMethods()", "diff": ["-\t\t", "-\t\t// iterate the method declarations to create the bindings", "-\t\tint bindingCount;", "-\t\tAbstractMethodDeclaration[] methods = referenceContext.methods;", "-\t\tint size = methods == null ? 0 : methods.length;", "-\t\tif (isEnum) {", "-\t\t\t// reserve 2 slots for special enum methods: #values() and #valueOf(String)", "-\t\t\tbindingCount = 2;", "-\t\t} else {", "-\t\t\tif (size == 0) {", "-\t\t\t\treferenceContext.binding.methods = NoMethods;", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tbindingCount = 0;", "+\t\tif (referenceContext.methods == null && !isEnum) {", "+\t\t\treferenceContext.binding.methods = NoMethods;", "+\t\t\treturn;", "+\t\t// iterate the method declarations to create the bindings", "+\t\tAbstractMethodDeclaration[] methods = referenceContext.methods;", "+\t\tint size = methods == null ? 0 : methods.length;", "-\t\tMethodBinding[] methodBindings = new MethodBinding[(clinitIndex == -1 ? size : size - 1) + bindingCount/*reserve room for special enum methods*/];", "+", "+\t\tint count = isEnum ? 2 : 0; // reserve 2 slots for special enum methods: #values() and #valueOf(String)", "+\t\tMethodBinding[] methodBindings = new MethodBinding[(clinitIndex == -1 ? size : size - 1) + count];", "-\t\t\t\t\tmethodBindings[bindingCount++] = methodBinding;", "+\t\t\t\t\tmethodBindings[count++] = methodBinding;", "-\t\tif (bindingCount != methodBindings.length)", "-\t\t\tSystem.arraycopy(methodBindings, 0, methodBindings = new MethodBinding[bindingCount], 0, bindingCount);", "+\t\tif (count != methodBindings.length)", "+\t\t\tSystem.arraycopy(methodBindings, 0, methodBindings = new MethodBinding[count], 0, count);"]}], "num": 35922}
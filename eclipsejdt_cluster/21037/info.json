{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd6b2a54eb5c2a3748ec66beb19008eb", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48790e6d881c86e4c821f91897415dd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "f74cac509deaf512c7535f38357f0bf074e0e26d", "commitAfterChange": "4f8754b531ef7a0f61f91d095d8127db2debc51a", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 38, "signatureBeforeChange": "  \tprivate void disassemble(IConstantPool constantPool, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": "  \tprivate void disassemble(IConstantPool constantPool, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["+", "+\t\t\tString[] methodDescription;", "+\t\t\t\t\tmethodDescription = methodDescription(constantPoolEntry);", "-\t\t\t\t\t\t\t\t\tnew String(constantPoolEntry.getClassName()),", "-\t\t\t\t\t\t\t\t\tnew String(constantPoolEntry.getMethodName()),", "-\t\t\t\t\t\t\t\t\tnew String(constantPoolEntry.getMethodDescriptor())}));", "+\t\t\t\t\t\t\t\t\tmethodDescription[0], methodDescription[1], methodDescription[2]}));", "+\t\t\t\t\tmethodDescription = methodDescription(constantPoolEntry);", "-\t\t\t\t\t\t\t\t\tnew String(constantPoolEntry.getClassName()),", "-\t\t\t\t\t\t\t\t\tnew String(constantPoolEntry.getMethodName()),", "-\t\t\t\t\t\t\t\t\tnew String(constantPoolEntry.getMethodDescriptor())}));", "+\t\t\t\t\t\t\t\t\tmethodDescription[0], methodDescription[1], methodDescription[2]}));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4bb3f987c07fbb1056222aa2908973c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/ExternalAnnotationUtil.java", "commitBeforeChange": "34f724a9738d7636a75842e2910c694725115548", "commitAfterChange": "9b49fc6edec0d13e82a14df97219e6ae294f74cc", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tprivate static String updateMethodReturnType(String newReturnType, String oldSignature, MergeStrategy mergeStrategy)", "signatureAfterChange": " \tpublic static String[] annotateType(String originalSignature, String annotatedType, MergeStrategy mergeStrategy)", "diff": ["-", "-\tprivate static String updateMethodReturnType(String newReturnType, String oldSignature, MergeStrategy mergeStrategy) {", "-\t\tStringBuffer buf = new StringBuffer();", "-\t\tassert oldSignature.charAt(0) == '(' : \"signature must start with '('\"; //$NON-NLS-1$", "-\t\tint close = oldSignature.indexOf(')');", "-\t\tbuf.append(oldSignature, 0, close+1);", "-\t\tupdateType(buf, oldSignature.substring(close+1).toCharArray(), newReturnType.toCharArray(), mergeStrategy);", "-\t\treturn buf.toString();", "-\t}", "+\t */", "+\tpublic static String[] annotateType(String originalSignature, String annotatedType, MergeStrategy mergeStrategy)", "+\t{", "+\t\tString[] result = new String[4]; // prefix, orig, replacement, postfix", "+\t\tStringBuffer buf;", "+\t\tresult[0] = \"\"; //$NON-NLS-1$", "+\t\tbuf = new StringBuffer();", "+\t\tresult[1] = originalSignature;", "+\t\tupdateType(buf, originalSignature.toCharArray(), annotatedType.toCharArray(), mergeStrategy);", "+\t\tresult[2] = buf.toString();", "+\t\tresult[3] = \"\"; //$NON-NLS-1$", "+\t\treturn result;", "+\t}"]}], "num": 21037}
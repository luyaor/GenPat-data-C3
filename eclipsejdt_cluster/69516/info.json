{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f4dd39d18bd5ea8c13e0bc2f57f146f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03bf4b75043bab0508525a824bc49782", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "fb8f376e81332a8e2eb0b6ab7b009417715a2326", "commitAfterChange": "504159d7229f244fe60c96f9b15d6167193a85b6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\t} else if (", "-\t\t\t\tcastType.isClass()) {", "+\t\t\t} else if (castType.isTypeVariable()) {", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "+\t\t\t\tif (match == null) {", "+\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t\t}", "+\t\t\t\t// recursively on the type variable upper bound", "+\t\t\t\treturn checkCastTypesCompatibility(", "+\t\t\t\t\tscope,", "+\t\t\t\t\tcastType.erasure(),", "+\t\t\t\t\texpressionType,", "+\t\t\t\t\texpression);", "+\t\t\t} else if (castType.isClass()) {", "-\t", "+\t\tif (expressionType.isTypeVariable() || expressionType.isWildcard()) {", "+\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "+\t\t\tif (match != null) {", "+\t\t\t\ttagAsUnnecessaryCast(scope, castType);", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\t// recursively on the type variable upper bound", "+\t\t\treturn checkCastTypesCompatibility(", "+\t\t\t\tscope,", "+\t\t\t\tcastType,", "+\t\t\t\texpressionType.erasure(),", "+\t\t\t\texpression);", "+\t\t}", "+\t\t", "+\t\t\t} else if (castType.isTypeVariable()) {", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "+\t\t\t\tif (match == null) {", "+\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t\t}", "+\t\t\t\t// recursively on the type variable upper bound", "+\t\t\t\treturn checkCastTypesCompatibility(", "+\t\t\t\t\tscope,", "+\t\t\t\t\tcastType.erasure(),", "+\t\t\t\t\texpressionType,", "+\t\t\t\t\texpression);", "-\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo(castType.isTypeVariable() ? (ReferenceBinding)castType : (ReferenceBinding)castType.erasure());", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "-\t\t\t\t\tif (!castType.isTypeVariable() || (((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure()) == null)) {", "-\t\t\t\t\t\ttagAsNeedCheckCast();", "-\t\t\t\t\t}", "+\t\t\t\t\ttagAsNeedCheckCast();", "-\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo(castType.isTypeVariable() ? (ReferenceBinding)castType : (ReferenceBinding)castType.erasure());", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "-\t\t\t\t\tif (!castType.isTypeVariable() || (((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure()) == null)) {", "-\t\t\t\t\t\ttagAsNeedCheckCast();", "-\t\t\t\t\t}", "+\t\t\t\t\ttagAsNeedCheckCast();", "+\t\t} else if (castType.isTypeVariable()) {", "+\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "+\t\t\tif (match == null) {", "+\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t}", "+\t\t\t// recursively on the type variable upper bound", "+\t\t\treturn checkCastTypesCompatibility(", "+\t\t\t\tscope,", "+\t\t\t\tcastType.erasure(),", "+\t\t\t\texpressionType,", "+\t\t\t\texpression);", "-\t\t\t\tTypeBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo(expressionType.isTypeVariable() ? (ReferenceBinding)expressionType : (ReferenceBinding)expressionType.erasure());", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "-\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo(castType.isTypeVariable() ? (ReferenceBinding)castType : (ReferenceBinding)castType.erasure());", "+\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "-\t\t\t\tif (!castType.isTypeVariable() || (((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure()) == null)) {", "-\t\t\t\t\ttagAsNeedCheckCast();", "-\t\t\t\t}", "+\t\t\t\ttagAsNeedCheckCast();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0435a4ad6deabd290ea39e11028bf5ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "058f4956c302999db0dab277cf91883f2d016e2b", "commitAfterChange": "27d9d524a3b624cfc1260a727d1dfb92d53ae22a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\t\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\t\tscope,", "-\t\t\t\t\t((ArrayBinding) castType).elementsType(),", "-\t\t\t\t\texprElementType,", "-\t\t\t\t\texpression);", "+\t\t\t\treturn checkCastTypesCompatibility(scope, ((ArrayBinding) castType).elementsType(), exprElementType, expression);", "-\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "-\t\t\t\tif (match == null) {", "-\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t\tif (expressionType instanceof ReferenceBinding) {", "+\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "+\t\t\t\t\tif (match == null) {", "+\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, null, true);", "-\t\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\t\tscope,", "-\t\t\t\t\tcastType.erasure(),", "-\t\t\t\t\texpressionType,", "-\t\t\t\t\texpression);", "+\t\t\t\treturn checkCastTypesCompatibility(scope, castType.erasure(), expressionType, expression);", "-\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "-\t\t\tif (match != null) {", "-\t\t\t\ttagAsUnnecessaryCast(scope, castType);", "-\t\t\t\treturn true;", "+\t\t\tif (castType instanceof ReferenceBinding) {", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "+\t\t\t\tif (match != null) {", "+\t\t\t\t\ttagAsUnnecessaryCast(scope, castType);", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "-\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\tscope,", "-\t\t\t\tcastType,", "-\t\t\t\texpressionType.erasure(),", "-\t\t\t\texpression);", "+\t\t\treturn checkCastTypesCompatibility(scope, castType, expressionType.erasure(), expression);", "-\t\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\t\tscope,", "-\t\t\t\t\tcastType.erasure(),", "-\t\t\t\t\texpressionType,", "-\t\t\t\t\texpression);", "+\t\t\t\treturn checkCastTypesCompatibility(scope, castType.erasure(), expressionType, expression);", "-\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\tscope,", "-\t\t\t\tcastType.erasure(),", "-\t\t\t\texpressionType,", "-\t\t\t\texpression);", "+\t\t\treturn checkCastTypesCompatibility(scope, castType.erasure(), expressionType, expression);", "-\t\t\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\t\t\t\t\treportIllegalCast(scope, castType, expressionType);"]}], "num": 69516}
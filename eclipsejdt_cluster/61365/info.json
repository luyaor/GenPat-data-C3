{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8558d18d4603659dbe1f82a40da5d1fd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7322bc398938ca7b52f1078e17c6fad3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TestAll.java", "commitBeforeChange": "eb6e95d2e72868c1b8f5265e2dbaeedc501822a8", "commitAfterChange": "69622d139cf7be8059928288f19c2f5b2d55bdc5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": " public static Test suite()", "diff": ["-\t\tstandardTests.add(Compliance_1_3.class);", "-\t\tall.addTest(AbstractCompilerTest.suiteForComplianceLevel(AbstractCompilerTest.COMPLIANCE_1_3, RegressionTestSetup.class, standardTests));", "+\t    ArrayList tests_1_3 = (ArrayList)standardTests.clone();", "+\t\ttests_1_3.add(Compliance_1_3.class);", "+\t\tall.addTest(AbstractCompilerTest.suiteForComplianceLevel(AbstractCompilerTest.COMPLIANCE_1_3, RegressionTestSetup.class, tests_1_3));", "-\t\tstandardTests.remove(Compliance_1_3.class);", "-\t\tstandardTests.add(AssertionTest.class);", "-\t\tstandardTests.add(Compliance_1_4.class);\t", "-\t\tall.addTest(AbstractCompilerTest.suiteForComplianceLevel(AbstractCompilerTest.COMPLIANCE_1_4, RegressionTestSetup.class, standardTests));", "+\t    ArrayList tests_1_4 = (ArrayList)standardTests.clone();", "+\t\ttests_1_4.add(AssertionTest.class);", "+\t\ttests_1_4.add(Compliance_1_4.class);", "+\t\tall.addTest(AbstractCompilerTest.suiteForComplianceLevel(AbstractCompilerTest.COMPLIANCE_1_4, RegressionTestSetup.class, tests_1_4));", "-\t\tall.addTest(AbstractCompilerTest.suiteForComplianceLevel(AbstractCompilerTest.COMPLIANCE_1_5, RegressionTestSetup.class, standardTests));", "+\t    ArrayList tests_1_5 = (ArrayList)standardTests.clone();", "+\t\tall.addTest(AbstractCompilerTest.suiteForComplianceLevel(AbstractCompilerTest.COMPLIANCE_1_5, RegressionTestSetup.class, tests_1_5));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0b38b27dd367a0adfc13dc040678cef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \t \tpublic EnumConstantDeclaration convert(EnumConstant enumConstant)", "signatureAfterChange": " \tpublic EnumConstantDeclaration convert(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration enumConstant)", "diff": ["-\tpublic EnumConstantDeclaration convert(EnumConstant enumConstant) {", "+\t// field is an enum constant", "+\tpublic EnumConstantDeclaration convert(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration enumConstant) {", "-\t\tint declarationSourceEnd = enumConstant.bodyEnd;", "-\t\tif ((enumConstant.modifiers & CompilerModifiers.AccSemicolonBody) == 0) {", "-\t\t\tint closingPosition = retrieveRightBrace(declarationSourceEnd, enumConstant.declarationSourceEnd);", "-\t\t\tenumConstantDeclaration.setSourceRange(declarationSourceStart, closingPosition - declarationSourceStart + 1);", "+\t\tint declarationSourceEnd = enumConstant.declarationSourceEnd;", "+\t\tif (enumConstant.initialization instanceof QualifiedAllocationExpression) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration anonymousType = ((QualifiedAllocationExpression) enumConstant.initialization).anonymousType;", "+\t\t\tif (anonymousType != null) {", "+\t\t\t\tint closingPosition = anonymousType.declarationSourceEnd;", "+\t\t\t\tenumConstantDeclaration.setSourceRange(declarationSourceStart, closingPosition - declarationSourceStart + 1);", "+\t\t\t\tbuildBodyDeclarations(anonymousType, enumConstantDeclaration);", "+\t\t\t}", "-\t\tbuildBodyDeclarations(enumConstant, enumConstantDeclaration);", "-\t\tfinal org.eclipse.jdt.internal.compiler.ast.Expression[] arguments = enumConstant.arguments;", "+\t\tfinal org.eclipse.jdt.internal.compiler.ast.Expression[] arguments = ((org.eclipse.jdt.internal.compiler.ast.AllocationExpression) enumConstant.initialization).arguments;", "-\t}"]}], "num": 61365}
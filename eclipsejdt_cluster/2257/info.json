{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5dae53cf58afb79de4a358c3feb35ae2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a77e296af42260d9b97c8fb1ac78f45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "881da43b7e0b2ca5798e9c55f57054ccdaa23c6e", "commitAfterChange": "be760997ffe69084a7c4bd4d1ab81289e2452d86", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean commentParse()", "signatureAfterChange": " \tprotected boolean commentParse()", "diff": ["+\t\t\t\twhile (peekChar() == '*') {", "+\t\t\t\t\tnextCharacter = readChar(); // read all contiguous '*'", "+\t\t\t\t}", "-\t\t\t\t\t\tthis.starPosition = previousPosition;", "-\t\t\t\t\t\tif (isDomParser || isFormatterParser) {", "-\t\t\t\t\t\t\tif (lineHasStar && !this.lineStarted) {", "-\t\t\t\t\t\t\t\tthis.lineStarted = true;", "-\t\t\t\t\t\t\t\tthis.textStart = previousPosition;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (!this.lineStarted) {", "-\t\t\t\t\t\t\t\tlineHasStar = true;", "+\t\t\t\t\t\tif (previousChar != '*') {", "+\t\t\t\t\t\t\tthis.starPosition = previousPosition;", "+\t\t\t\t\t\t\tif (isDomParser || isFormatterParser) {", "+\t\t\t\t\t\t\t\tif (lineHasStar && !this.lineStarted) {", "+\t\t\t\t\t\t\t\t\tthis.lineStarted = true;", "+\t\t\t\t\t\t\t\t\tthis.textStart = previousPosition;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (!this.lineStarted) {", "+\t\t\t\t\t\t\t\t\tlineHasStar = true;", "+\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b5c5a2d026ce3a3df478b09b98bb902", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "0fcefa7fbabab6abdc9873690eec58ebe54b0ec5", "commitAfterChange": "98fac88fd0da38b66efb43921b50db56cf129025", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprotected void pushText(int start, int end)", "signatureAfterChange": " \tprotected void pushText(int start, int end)", "diff": ["-\t\t// compiler does not matter of text", "+\t\tif (this.currentAstPtr != -2 && this.returnStatement != null) {", "+\t\t\tint position = this.index;", "+\t\t\tthis.index = start;", "+\t\t\tboolean empty = true;", "+\t\t\tboolean star = false;", "+\t\t\tchar ch = readChar();", "+\t\t\tif (Character.isWhitespace(ch) || start>(this.tagSourceEnd+1)) {", "+\t\t\t\twhile (this.index <= end && empty) {", "+\t\t\t\t\tif (!star) {", "+\t\t\t\t\t\tempty = Character.isWhitespace(ch) || ch == '*';", "+\t\t\t\t\t\tstar = ch == '*';", "+\t\t\t\t\t} else if (ch != '*') {", "+\t\t\t\t\t\tempty = false;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tch = readChar();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t((JavadocReturnStatement)this.returnStatement).empty = empty;", "+\t\t\tthis.index = position;", "+\t\t\tif (this.currentAstPtr != this.astPtr) {", "+\t\t\t\tthis.currentAstPtr = -2;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a86bd1aea540cf2917b6afcfee34bce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "f88c1fe220ded26227925e3745e5515c08409c5d", "commitAfterChange": "8f896a654035e16596d9bc3a2404427ff7b3145b", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tprivate boolean complete( \t\t\tASTNode astNode, \t\t\tASTNode astNodeParent, \t\t\tASTNode enclosingNode, \t\t\tCompilationUnitDeclaration compilationUnitDeclaration, \t\t\tBinding qualifiedBinding, \t\t\tScope scope, \t\t\tboolean insideTypeAnnotation)", "signatureAfterChange": "  \tprivate boolean complete( \t\t\tASTNode astNode, \t\t\tASTNode astNodeParent, \t\t\tASTNode enclosingNode, \t\t\tCompilationUnitDeclaration compilationUnitDeclaration, \t\t\tBinding qualifiedBinding, \t\t\tScope scope, \t\t\tboolean insideTypeAnnotation)", "diff": ["-\t\t\t\t\tthis.findEnumConstant(this.completionToken, (SwitchStatement) astNodeParent);", "+\t\t\t\t\tthis.findEnumConstantsFromSwithStatement(this.completionToken, (SwitchStatement) astNodeParent);", "+\t\t\t\tif (this.expectedTypesPtr > -1) {", "+\t\t\t\t\tthis.assistNodeIsEnum = true;", "+\t\t\t\t\tdone : for (int i = 0; i <= this.expectedTypesPtr; i++) {", "+\t\t\t\t\t\tif (!this.expectedTypes[i].isEnum()) {", "+\t\t\t\t\t\t\tthis.assistNodeIsEnum = false;", "+\t\t\t\t\t\t\tbreak done;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\t\t\tif (this.expectedTypesPtr > -1) {", "+\t\t\t\t\t\t\tthis.assistNodeIsEnum = true;", "+\t\t\t\t\t\t\tdone : for (int i = 0; i <= this.expectedTypesPtr; i++) {", "+\t\t\t\t\t\t\t\tif (!this.expectedTypes[i].isEnum()) {", "+\t\t\t\t\t\t\t\t\tthis.assistNodeIsEnum = false;", "+\t\t\t\t\t\t\t\t\tbreak done;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "703b86e24c27bd87593964a8664b9c21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AnnotationParser.java", "commitBeforeChange": "6dc12c8b864920cd49413602075b8cd92ac189eb", "commitAfterChange": "02b069812d9eccf18b607ccee2550a6bb0833132", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tchar[] readIdentifier()", "signatureAfterChange": " \tchar[] readIdentifier()", "diff": ["-\t\ttry {", "-\t\t\tthis.scanner.currentCharacter = this.currentCharacter;", "-\t\t\tthis.scanner.startPosition = this.startPosition;", "-\t\t\tthis.scanner.currentPosition = this.currentPosition;", "-\t\t\t", "-\t\t\tint token = this.scanner.scanIdentifierOrKeyword();\t\t", "-\t\t\tif (token == TerminalTokens.TokenNameIdentifier) {", "-\t\t\t\tidentifier = this.scanner.getCurrentIdentifierSource();", "-\t\t\t}", "-\t\t} catch (InvalidInputException e) {", "-\t\t\t// ignore", "+\t\tthis.scanner.currentCharacter = this.currentCharacter;", "+\t\tthis.scanner.startPosition = this.startPosition;", "+\t\tthis.scanner.currentPosition = this.currentPosition;", "+\t\t", "+\t\tint token = this.scanner.scanIdentifierOrKeyword();\t\t", "+\t\tif (token == TerminalTokens.TokenNameIdentifier) {", "+\t\t\tidentifier = this.scanner.getCurrentIdentifierSource();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8793a80e09e2b2ad7042e3d236417561", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "af7c555b94268663ad75bc44adea174c67a820bf", "commitAfterChange": "5f14954289dcfe3aa64cd723a9ea9807dea33e05", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " \tprivate void retrieveRightBraceOrSemiColonPosition(ASTNode node)", "signatureAfterChange": " \tprivate int retrieveRightBraceOrSemiColonPosition(MethodDeclaration node, AbstractMethodDeclaration methodDeclaration)", "diff": ["-\tprivate void retrieveRightBraceOrSemiColonPosition(ASTNode node) {", "+\tprivate int retrieveRightBraceOrSemiColonPosition(MethodDeclaration node, AbstractMethodDeclaration methodDeclaration) {", "-\t\tscanner.resetTo(start, this.compilationUnitSource.length);", "+\t\tscanner.resetTo(start, methodDeclaration.declarationSourceEnd);", "-\t\t\t\t\t\t\tnode.setSourceRange(start, scanner.currentPosition - start);", "-\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\treturn scanner.currentPosition;", "-\t\t\t\t\t\t\tnode.setSourceRange(start, scanner.currentPosition - start);", "-\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\treturn scanner.currentPosition;", "+\t\treturn -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96cecba1a3c0e599c76999b5505333bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "fd83708e4f6c48e5f68b55d90ce222d8723ca6ce", "commitAfterChange": "021024113df1ed1521b5c1d778d9acee5b820c39", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": "\r \tprivate void retrieveRightBraceOrSemiColonPosition(ASTNode node)", "signatureAfterChange": "\r \tprivate void retrieveRightBraceOrSemiColonPosition(ASTNode node)", "diff": ["-\t\tint length = node.getLength();\r", "-\t\tint end = start + length;\r", "-\t\tscanner.resetTo(end, this.compilationUnitSource.length);\r", "+\t\tscanner.resetTo(start, this.compilationUnitSource.length);\r", "+\t\t\tint braceCounter = 0;\r", "-\t\t\t\t\tcase Scanner.TokenNameSEMICOLON :\r", "+\t\t\t\t\tcase Scanner.TokenNameLBRACE :\r", "+\t\t\t\t\t\tbraceCounter++;\r", "+\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\tnode.setSourceRange(start, scanner.currentPosition - start);\r", "-\t\t\t\t\t\treturn;\r", "+\t\t\t\t\t\tbraceCounter--;\r", "+\t\t\t\t\t\tif (braceCounter == 0) {\r", "+\t\t\t\t\t\t\tnode.setSourceRange(start, scanner.currentPosition - start);\r", "+\t\t\t\t\t\t\treturn;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase Scanner.TokenNameSEMICOLON :\r", "+\t\t\t\t\t\tif (braceCounter == 0) {\r", "+\t\t\t\t\t\t\tnode.setSourceRange(start, scanner.currentPosition - start);\r", "+\t\t\t\t\t\t\treturn;\r", "+\t\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9908d23784b98276954374c6dffcf026", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SimpleName.java", "commitBeforeChange": "bbb21a5affc4d3b9808e8ab897f64d3b1e68b6b2", "commitAfterChange": "e57c1379bf2ab200d310135306edb2776411f753", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void setIdentifier(String identifier)", "signatureAfterChange": "  \tpublic void setIdentifier(String identifier)", "diff": ["-\t\tscanner.resetTo(0, length);", "+\t\tscanner.resetTo(0, length - 1);", "-\t\t\tint tokenType = scanner.getNextToken();", "-\t\t\tswitch(tokenType) {", "-\t\t\t\tcase TerminalTokens.TokenNameIdentifier:", "-\t\t\t\t\tif (scanner.getCurrentTokenEndPosition() != length - 1) {", "-\t\t\t\t\t\t// this is the case when there is only one identifier see 87849", "-\t\t\t\t\t\tthrow new IllegalArgumentException();", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault:", "-\t\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\tint tokenType = scanner.scanIdentifier();", "+\t\t\tif (tokenType != TerminalTokens.TokenNameIdentifier) {", "+\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\t}", "+\t\t\tif (scanner.currentPosition != length) {", "+\t\t\t\t// this is the case when there is only one identifier see 87849", "+\t\t\t\tthrow new IllegalArgumentException();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a6861399b6804e6c88a55874dbebfe2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "4633cdd34bc32c9ec930b454d5e4ef42024a77f4", "commitAfterChange": "aa223e9a2138470a8d88d3629dbe1cb95c932c69", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "diff": ["-\t\t\t// Init", "-\t\t\tthis.index = javadocStart +3;", "-\t\t\tthis.endComment = javadocEnd - 2;", "+\t\t\t// Init scanner position", "+\t\t\tthis.scanner.resetTo(javadocStart, javadocEnd);", "+\t\t\tthis.endComment = javadocEnd;", "+\t\t\tthis.index = javadocStart;", "+\t\t\treadChar(); // starting '/'", "+\t\t\tint charPosition = this.index;", "+\t\t\treadChar(); // first '*'", "+\t\t\tchar nextCharacter= readChar(); // second '*'", "+\t\t\t", "+\t\t\t// Init local variables", "-\t\t\tthis.scanner.resetTo(this.index, this.endComment);", "-\t\t\tthis.lineEnd = (this.linePtr == this.lastLinePtr) ? this.endComment : javadocStart + 3;", "+\t\t\tthis.lineEnd = (this.linePtr == this.lastLinePtr) ? this.endComment : javadocStart;", "-\t\t\tchar nextCharacter= 0, previousChar;", "-\t\t\tint charPosition = -1;", "+\t\t\tchar previousChar = 0;", "+\t\t\t", "+\t\t\t\tif (this.index >= this.endComment) {", "+\t\t\t\t\tbreak;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abffaa47ff209bd13b7537fe20430aaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "3f75c9397ff53f65021c19499da76d98c9e23550", "commitAfterChange": "d3a9da1814717a2c18ee252440a7a4915c82ca4d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprotected boolean parseParam() throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseParam() throws InvalidInputException", "diff": ["-\t\t\tif (!isCompletionParser) this.scanner.currentPosition = start;", "-\t\t\tthis.index = start;", "+\t\t\tif (!isCompletionParser) {", "+\t\t\t\tthis.scanner.currentPosition = start;", "+\t\t\t\tthis.index = start;", "+\t\t\t}", "-\t\t\t\t\tthis.scanner.currentPosition = start;", "-\t\t\t\t\tthis.index = start;", "+\t\t\t\t\tif (!isCompletionParser) {", "+\t\t\t\t\t\tthis.scanner.currentPosition = start;", "+\t\t\t\t\t\tthis.index = start;", "+\t\t\t\t\t}", "-\t\t\t\t\t\tthis.scanner.currentPosition = start;", "-\t\t\t\t\t\tthis.index = start;", "+\t\t\t\t\t\tif (!isCompletionParser) {", "+\t\t\t\t\t\t\tthis.scanner.currentPosition = start;", "+\t\t\t\t\t\t\tthis.index = start;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.scanner.currentPosition = start;", "-\t\t\t\t\t\tthis.index = start;", "+\t\t\t\t\t\tif (!isCompletionParser) {", "+\t\t\t\t\t\t\tthis.scanner.currentPosition = start;", "+\t\t\t\t\t\t\tthis.index = start;", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b34c69f94624d49726a8ccbc038923a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "cee242bcb21b999953c5459d6b40de2d782355f3", "commitAfterChange": "de0ba5a5e09b42f4671d55cb69260aca34e3da86", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate Object parseMember(Object receiver) throws InvalidInputException", "signatureAfterChange": " \tprivate Object parseMember(Object receiver) throws InvalidInputException", "diff": ["+\t\t\t// Look for next token to know whether it's a field or method reference", "+", "-\t\t\tif (this.currentTokenType != -1) {", "-\t\t\t\tthis.index = previousPosition;", "-\t\t\t\tthis.scanner.currentPosition = previousPosition;", "-\t\t\t\tthis.currentTokenType = -1;", "+\t\t\tthis.index = previousPosition;", "+\t\t\tthis.scanner.currentPosition = previousPosition;", "+\t\t\tthis.currentTokenType = -1;", "+", "+\t\t\t// Verify character(s) after identifier (expecting space or end comment)", "+\t\t\tif (!verifySpaceOrEndComment()) {", "+\t\t\t\tint end = this.starPosition == -1 ? this.lineEnd : this.starPosition;", "+\t\t\t\tif (this.source[end]=='\\n') end--;", "+\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocMalformedSeeReference(start, end);", "+\t\t\t\treturn null;", "-\t\tend = start > end ? getEndPosition() : end;", "+\t\tend = start > end ? start : end;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b85f9abf3735673f0471b9ae9e53f8d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionJavadocParser.java", "commitBeforeChange": "c4891fe70e58ba287a7bbc2f099afcf753974e95", "commitAfterChange": "f50252d848b2855a0e3b480a92607978678762ce", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tprotected int readTokenAndConsume() throws InvalidInputException", "signatureAfterChange": " \tprotected int readToken() throws InvalidInputException", "diff": ["-\tprotected int readTokenAndConsume() throws InvalidInputException {", "-\t\tint token = super.readTokenAndConsume();", "-\t\tif (token == TerminalTokens.TokenNameIdentifier) {", "-\t\t\tif (this.scanner.currentPosition == this.scanner.startPosition) {", "-\t\t\t\tthis.scanner.getCurrentIdentifierSource();", "-\t\t\t}", "+\tprotected int readToken() throws InvalidInputException {", "+\t\tint token = super.readToken();", "+\t\tif (token == TerminalTokens.TokenNameIdentifier && this.scanner.currentPosition == this.scanner.startPosition) {", "+\t\t\t// Scanner is looping on empty token => read it... ", "+\t\t\tthis.scanner.getCurrentIdentifierSource();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e63a2a3d241fa82814562b4495e4b2cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "7a73f29da5ea73cce41fc54b0fc3ad302149f476", "commitAfterChange": "01023454337af8ada2f5699e5de8fcd7a8d40840", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 123, "signatureBeforeChange": " \tprotected int retrieveEndOfElementTypeNamePosition(int start, int end)", "signatureAfterChange": " \tprotected int[] retrieveEndOfElementTypeNamePosition(int start, int end)", "diff": ["-\tprotected int retrieveEndOfElementTypeNamePosition(int start, int end) {", "+\tprotected int[] retrieveEndOfElementTypeNamePosition(int start, int end) {", "+\t\tboolean isAnnotation = false;", "+\t\t\t\t\tcase TerminalTokens.TokenNameAT:", "+\t\t\t\t\t\tisAnnotation = true;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tif (isAnnotation) {", "+\t\t\t\t\t\t\tisAnnotation = false;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t//$FALL-THROUGH$", "-\t\t\t\t\t\treturn this.scanner.currentPosition - 1;", "+\t\t\t\t\t\treturn new int[]{this.scanner.startPosition, this.scanner.currentPosition - 1};", "-\t\treturn -1;", "+\t\treturn new int[]{-1, -1};"]}], "num": 2257}
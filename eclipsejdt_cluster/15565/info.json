{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b9b078c2d3d1dadeea4bf539800f604", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4b162018ce376d01615df2a89659d5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "9506194ecd38aa227915d4452e8097fba7bd6231", "commitAfterChange": "27a13e874a8de3a8e74e5e1ab65479e9dace8b8c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "signatureAfterChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "diff": ["-\t\t\treturn new TypeBound((InferenceVariable)subCandidate, superCandidate, SUBTYPE);", "+\t\t\treturn new TypeBound((InferenceVariable)subCandidate, superCandidate, SUBTYPE, this.isSoft);", "-\t\t\treturn new TypeBound((InferenceVariable)superCandidate, subCandidate, SUPERTYPE); // normalize to have variable on LHS", "+\t\t\treturn new TypeBound((InferenceVariable)superCandidate, subCandidate, SUPERTYPE, this.isSoft); // normalize to have variable on LHS", "-\t\t\t\t\treturn new ConstraintTypeFormula(sPrime, tPrime, SUBTYPE);", "+\t\t\t\t\treturn new ConstraintTypeFormula(sPrime, tPrime, SUBTYPE, this.isSoft);", "-\t\t\t\t\treturn new ConstraintTypeFormula(subCandidate, variable.bound, SUBTYPE);", "+\t\t\t\t\treturn new ConstraintTypeFormula(subCandidate, variable.bound, SUBTYPE, this.isSoft);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5dfe9165eccfe31088f232dab480650", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "c14c8093a10c10363866e505a62237c9c62b679e", "commitAfterChange": "bc58ceae1b3691095e4db8bfcb9f2192eeaf077d", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tprivate BoundSet resolve(InferenceVariable[] toResolve) throws InferenceFailureException", "signatureAfterChange": " \tprivate BoundSet resolve(InferenceVariable[] toResolve) throws InferenceFailureException", "diff": ["-\t\t\t\t\t\t\t\ttmpBoundSet.addBound(new TypeBound(variable, lub, ReductionResult.SAME));", "+\t\t\t\t\t\t\t\ttmpBoundSet.addBound(new TypeBound(variable, lub, ReductionResult.SAME), this.environment);", "-\t\t\t\t\t\t\t\t\ttmpBoundSet.addBound(new TypeBound(variable, runtimeException, ReductionResult.SAME));", "+\t\t\t\t\t\t\t\t\ttmpBoundSet.addBound(new TypeBound(variable, runtimeException, ReductionResult.SAME), this.environment);", "-\t\t\t\t\t\t\t\t\ttmpBoundSet.addBound(new TypeBound(variable, glb, ReductionResult.SAME));", "+\t\t\t\t\t\t\t\t\ttmpBoundSet.addBound(new TypeBound(variable, glb, ReductionResult.SAME), this.environment);", "-\t\t\t\t\t\ttmpBoundSet.addBound(new TypeBound(variable, zsj, ReductionResult.SAME));", "+\t\t\t\t\t\ttmpBoundSet.addBound(new TypeBound(variable, zsj, ReductionResult.SAME), this.environment);"]}], "num": 15565}
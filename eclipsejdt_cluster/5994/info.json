{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f75e2ab110292b0d902fc58d74491729", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0bf4dc5de5d858795858e4a95b312de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "9a828b6f308f1048d5448d6c6f9c881639322d34", "commitAfterChange": "5028738b115a56f3f04beb6089ff2c05854751f1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " public static char[] createMethodSignature(char[][] parameterTypes, char[] returnType)", "signatureAfterChange": " public static char[] createMethodSignature( \t\tchar[][] parameterTypes, \t\tchar[] returnType, \t\tchar[][] formalTypeParameters, \t\tchar[][] thrownExceptions)", "diff": ["-\tint parameterTypesLength = parameterTypes.length;", "-\tint parameterLength = 0;", "-\tfor (int i = 0; i < parameterTypesLength; i++) {", "-\t\tparameterLength += parameterTypes[i].length;", "-\t\t", "-\t}", "-\tint returnTypeLength = returnType.length;", "-\tchar[] result = new char[1 + parameterLength + 1 + returnTypeLength];", "-\tresult[0] = C_PARAM_START;", "-\tint index = 1;", "-\tfor (int i = 0; i < parameterTypesLength; i++) {", "-\t\tchar[] parameterType = parameterTypes[i];", "-\t\tint length = parameterType.length;", "-\t\tSystem.arraycopy(parameterType, 0, result, index, length);", "-\t\tindex += length;", "-\t}", "-\tresult[index] = C_PARAM_END;", "-\tSystem.arraycopy(returnType, 0, result, index+1, returnTypeLength);", "-\treturn result;", "+ */", "+public static char[] createMethodSignature(", "+\t\tchar[][] parameterTypes,", "+\t\tchar[] returnType,", "+\t\tchar[][] formalTypeParameters,", "+\t\tchar[][] thrownExceptions) {", "+\tint formalTypeParameterCount = formalTypeParameters.length;", "+\tint formalTypeLength = 0;", "+\tfor (int i = 0; i < formalTypeParameterCount; i++) {", "+\t\tformalTypeLength += formalTypeParameters[i].length;", "+\t}", "+\tint parameterTypesCount = parameterTypes.length;", "+\tint parameterLength = 0;", "+\tfor (int i = 0; i < parameterTypesCount; i++) {", "+\t\tparameterLength += parameterTypes[i].length;", "+\t}", "+\tint returnTypeLength = returnType.length;", "+\tint thrownExceptionsCount = thrownExceptions.length;", "+\tint exceptionsLength = 0;", "+\tfor (int i = 0; i < thrownExceptionsCount; i++) {", "+\t\texceptionsLength += thrownExceptions[i].length;", "+\t}", "+\tint extras = 2; // \"(\" and \")\"", "+\tif (formalTypeParameterCount > 0) {", "+\t\textras += 2;   // \"<\" and \">\"", "+\t}", "+\tif (thrownExceptionsCount > 0) {", "+\t\textras += thrownExceptionsCount;   // one \"^\" per", "+\t}", "+\tchar[] result = new char[extras+ formalTypeLength + parameterLength + returnTypeLength + exceptionsLength];", "+\tint index = 0;", "+\tif (formalTypeParameterCount > 0) {", "+\t\tresult[index++] = C_GENERIC_START;", "+\t\tfor (int i = 0; i < formalTypeParameterCount; i++) {", "+\t\t\tchar[] formalTypeParameter = formalTypeParameters[i];", "+\t\t\tint length = formalTypeParameter.length;", "+\t\t\tSystem.arraycopy(formalTypeParameter, 0, result, index, length);", "+\t\t\tindex += length;", "+\t\t}", "+\t\tresult[index++] = C_GENERIC_END;", "+\t}", "+\tresult[index++] = C_PARAM_START;", "+\tfor (int i = 0; i < parameterTypesCount; i++) {", "+\t\tchar[] parameterType = parameterTypes[i];", "+\t\tint length = parameterType.length;", "+\t\tSystem.arraycopy(parameterType, 0, result, index, length);", "+\t\tindex += length;", "+\t}", "+\tresult[index++] = C_PARAM_END;", "+\tSystem.arraycopy(returnType, 0, result, index, returnTypeLength);", "+\tindex += returnTypeLength;", "+\tif (thrownExceptionsCount > 0) {", "+\t\tfor (int i = 0; i < thrownExceptionsCount; i++) {", "+\t\t\tresult[index++] = C_THROWS;", "+\t\t\tchar[] thrownException = thrownExceptions[i];", "+\t\t\tint length = thrownException.length;", "+\t\t\tSystem.arraycopy(thrownException, 0, result, index, length);", "+\t\t\tindex += length;", "+\t\t}", "+\t}", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da5b8265888166aaf01f18a84351f3a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": " public static char[] createMethodSignature( \t\tchar[][] parameterTypes, \t\tchar[] returnType, \t\tchar[][] formalTypeParameters, \t\tchar[][] thrownExceptions)", "signatureAfterChange": " public static char[] createMethodSignature(char[][] parameterTypes, char[] returnType)", "diff": ["-public static char[] createMethodSignature(", "-\t\tchar[][] parameterTypes,", "-\t\tchar[] returnType,", "-\t\tchar[][] formalTypeParameters,", "-\t\tchar[][] thrownExceptions) {", "-\tint formalTypeParameterCount = formalTypeParameters.length;", "-\tint formalTypeLength = 0;", "-\tfor (int i = 0; i < formalTypeParameterCount; i++) {", "-\t\tformalTypeLength += formalTypeParameters[i].length;", "-\t}", "-\tint parameterTypesCount = parameterTypes.length;", "+public static char[] createMethodSignature(char[][] parameterTypes, char[] returnType) {", "+\tint parameterTypesLength = parameterTypes.length;", "-\tfor (int i = 0; i < parameterTypesCount; i++) {", "+\tfor (int i = 0; i < parameterTypesLength; i++) {", "+\t\t", "-\tint thrownExceptionsCount = thrownExceptions.length;", "-\tint exceptionsLength = 0;", "-\tfor (int i = 0; i < thrownExceptionsCount; i++) {", "-\t\texceptionsLength += thrownExceptions[i].length;", "-\t}", "-\tint extras = 2; // \"(\" and \")\"", "-\tif (formalTypeParameterCount > 0) {", "-\t\textras += 2;   // \"<\" and \">\"", "-\t}", "-\tif (thrownExceptionsCount > 0) {", "-\t\textras += thrownExceptionsCount;   // one \"^\" per", "-\t}", "-\tchar[] result = new char[extras+ formalTypeLength + parameterLength + returnTypeLength + exceptionsLength];", "-\tint index = 0;", "-\tif (formalTypeParameterCount > 0) {", "-\t\tresult[index++] = C_GENERIC_START;", "-\t\tfor (int i = 0; i < formalTypeParameterCount; i++) {", "-\t\t\tchar[] formalTypeParameter = formalTypeParameters[i];", "-\t\t\tint length = formalTypeParameter.length;", "-\t\t\tSystem.arraycopy(formalTypeParameter, 0, result, index, length);", "-\t\t\tindex += length;", "-\t\t}", "-\t\tresult[index++] = C_GENERIC_END;", "-\t}", "-\tresult[index++] = C_PARAM_START;", "-\tfor (int i = 0; i < parameterTypesCount; i++) {", "+\tchar[] result = new char[1 + parameterLength + 1 + returnTypeLength];", "+\tresult[0] = C_PARAM_START;", "+\tint index = 1;", "+\tfor (int i = 0; i < parameterTypesLength; i++) {", "-\tresult[index++] = C_PARAM_END;", "-\tSystem.arraycopy(returnType, 0, result, index, returnTypeLength);", "-\tindex += returnTypeLength;", "-\tif (thrownExceptionsCount > 0) {", "-\t\tfor (int i = 0; i < thrownExceptionsCount; i++) {", "-\t\t\tresult[index++] = C_THROWS;", "-\t\t\tchar[] thrownException = thrownExceptions[i];", "-\t\t\tint length = thrownException.length;", "-\t\t\tSystem.arraycopy(thrownException, 0, result, index, length);", "-\t\t\tindex += length;", "-\t\t}", "-\t}", "+\tresult[index] = C_PARAM_END;", "+\tSystem.arraycopy(returnType, 0, result, index+1, returnTypeLength);"]}], "num": 5994}
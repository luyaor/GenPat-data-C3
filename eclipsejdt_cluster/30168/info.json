{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d4f212a9de049e126c23d7e1114ab21", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "326cc47dbd50f157f926919538474483", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6e8c555a7d6f504d4ea246c591d5bb3f080d438", "commitAfterChange": "3316f207e855c46fb5e805791239fa37620ca8c4", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": " public synchronized Index recreateIndex(IPath containerPath)", "signatureAfterChange": " public synchronized Index recreateIndex(IPath containerPath)", "diff": ["-\t\tString indexLocation = computeIndexLocation(containerPath);", "-\t\t", "-\t\tIndex index = (Index) this.indexes.get(indexLocation);", "+\t\tIPath indexLocation = computeIndexLocation(containerPath);", "+\t\tIndex index = getIndex(indexLocation);", "-\t\tindex = new Index(indexLocation, containerPathString, false /*reuse index file*/);", "+\t\tindex = new Index(indexLocation.toOSString(), containerPathString, false /*reuse index file*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33b36084f3b297bf827a100ed17d0498", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6e8c555a7d6f504d4ea246c591d5bb3f080d438", "commitAfterChange": "3316f207e855c46fb5e805791239fa37620ca8c4", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 23, "signatureBeforeChange": " private void rebuildIndex(String indexLocation, IPath containerPath)", "signatureAfterChange": " private void rebuildIndex(IPath indexLocation, IPath containerPath)", "diff": ["-private void rebuildIndex(String indexLocation, IPath containerPath) {", "+private void rebuildIndex(IPath indexLocation, IPath containerPath) {", "-\t\tUtil.verbose(\"-> request to rebuild index: \"+indexLocation+\" path: \"+containerPath.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tUtil.verbose(\"-> request to rebuild index: \"+indexLocation+\" path: \"+containerPath); //$NON-NLS-1$ //$NON-NLS-2$", "-\t} else if (target instanceof java.io.File) {", "+\t} else if (target instanceof File) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8efbccb5aba65a4bafdff9a2ace50c04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "3d4c80327c4bd6f61a1ef852d9f8cb11ff6d9d62", "commitAfterChange": "a00d0694a5797c69eb50145f1a65c73c676a067b", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tpublic org.eclipse.jdt.core.dom.NullLiteral convert(org.eclipse.jdt.internal.compiler.ast.NullLiteral expression)", "signatureAfterChange": "  \tpublic NullLiteral convert(org.eclipse.jdt.internal.compiler.ast.NullLiteral expression)", "diff": ["-\tpublic org.eclipse.jdt.core.dom.NullLiteral convert(org.eclipse.jdt.internal.compiler.ast.NullLiteral expression) {", "-\t\torg.eclipse.jdt.core.dom.NullLiteral literal = this.ast.newNullLiteral();", "+\tpublic NullLiteral convert(org.eclipse.jdt.internal.compiler.ast.NullLiteral expression) {", "+\t\tfinal NullLiteral literal = new NullLiteral(this.ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cec85884ac100c72f701ad62239618ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RenameTests.java", "commitBeforeChange": "97b330eb505dfca0980041926ec66a0261a5be5c", "commitAfterChange": "d3580136581144eb64c8a6ff7ec886b58a1ec764", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public void testRenameWorkingCopy() throws JavaModelException", "signatureAfterChange": " public void testRenameWorkingCopy() throws JavaModelException", "diff": ["-\tIWorkingCopy copy = null;", "+\tICompilationUnit copy = null;", "-\t\tcopy = (IWorkingCopy) this.cu.getWorkingCopy();", "-\t\trenameNegative((IJavaElement)copy, \"NewX\", false, IJavaModelStatusConstants.INVALID_ELEMENT_TYPES);", "+\t\tcopy = this.cu.getWorkingCopy(null);", "+\t\trenameNegative(copy, \"NewX\", false, IJavaModelStatusConstants.INVALID_ELEMENT_TYPES);", "-\t\tif (copy != null) copy.destroy();", "+\t\tif (copy != null) copy.discardWorkingCopy();"]}], "num": 30168}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4febcad2701084b694751b2af4f7e7e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8704ae3910935ae8c015ca340886436a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "e73037ff248454bfb7965c3990814d5ef5cb4620", "commitAfterChange": "cafb328a42240bc62f70f6b130384a29f0e8d16a", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tprivate void computeExpectedTypes(AstNode parent, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(AstNode parent, Scope scope)", "diff": ["+\t\t} else if(parent instanceof OperatorExpression) {", "+\t\t\tint operator = (parent.bits & AstNode.OperatorMASK) >> AstNode.OperatorSHIFT;", "+\t\t\tif(parent instanceof ConditionalExpression) {", "+\t\t\t\t// for future use", "+\t\t\t} else if(parent instanceof InstanceOfExpression) {", "+\t\t\t\tInstanceOfExpression e = (InstanceOfExpression) parent;", "+\t\t\t\tTypeBinding binding = e.expression.resolvedType;", "+\t\t\t\tif(binding != null){", "+\t\t\t\t\taddExpectedType(binding);", "+\t\t\t\t\texpectedTypesFilter = SUBTYPE | SUPERTYPE;", "+\t\t\t\t}", "+\t\t\t} else if(parent instanceof BinaryExpression) {", "+\t\t\t\tswitch(operator) {", "+\t\t\t\t\tcase OperatorIds.PLUS :", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ShortBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.IntBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.LongBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.FloatBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.DoubleBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.CharBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ByteBinding);", "+\t\t\t\t\t\taddExpectedType(scope.getJavaLangString());", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OperatorIds.AND_AND :", "+\t\t\t\t\tcase OperatorIds.OR_OR :", "+\t\t\t\t\tcase OperatorIds.XOR :", "+\t\t\t\t\t\taddExpectedType(BaseTypes.BooleanBinding);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault :", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ShortBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.IntBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.LongBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.FloatBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.DoubleBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.CharBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ByteBinding);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t} else if(parent instanceof UnaryExpression) {", "+\t\t\t\tswitch(operator) {", "+\t\t\t\t\tcase OperatorIds.NOT :", "+\t\t\t\t\t\taddExpectedType(BaseTypes.BooleanBinding);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OperatorIds.TWIDDLE :", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ShortBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.IntBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.LongBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.CharBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ByteBinding);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OperatorIds.PLUS :", "+\t\t\t\t\tcase OperatorIds.MINUS :", "+\t\t\t\t\tcase OperatorIds.PLUS_PLUS :", "+\t\t\t\t\tcase OperatorIds.MINUS_MINUS :", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ShortBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.IntBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.LongBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.FloatBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.DoubleBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.CharBinding);", "+\t\t\t\t\t\taddExpectedType(BaseTypes.ByteBinding);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d03566893ea678e52a0d9412029a35b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "34f79b507663962f5a8b34c6546e7cf80423bb0b", "commitAfterChange": "0b3c372cd8063a26d1eaf5c9a3c9657a40eb4a99", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic static IClasspathEntry getResolvedClasspathEntry(IClasspathEntry entry)", "signatureAfterChange": " \tpublic static IClasspathEntry getResolvedClasspathEntry(IClasspathEntry entry)", "diff": ["-\t\treturn JavaModelManager.getJavaModelManager().getResolvedClasspathEntry(entry, false/*don't use previous session value*/);", "+", "+\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_VARIABLE)", "+\t\t\treturn entry;", "+", "+\t\tIPath resolvedPath = JavaCore.getResolvedVariablePath(entry.getPath());", "+\t\tif (resolvedPath == null)", "+\t\t\treturn null;", "+", "+\t\tObject target = JavaModel.getTarget(resolvedPath, false);", "+\t\tif (target == null)", "+\t\t\treturn null;", "+", "+\t\t// inside the workspace", "+\t\tif (target instanceof IResource) {", "+\t\t\tIResource resolvedResource = (IResource) target;", "+\t\t\tswitch (resolvedResource.getType()) {", "+", "+\t\t\t\tcase IResource.PROJECT :", "+\t\t\t\t\t// internal project", "+\t\t\t\t\treturn JavaCore.newProjectEntry(", "+\t\t\t\t\t\t\tresolvedPath,", "+\t\t\t\t\t\t\tentry.getAccessRules(),", "+\t\t\t\t\t\t\tentry.combineAccessRules(),", "+\t\t\t\t\t\t\tentry.getExtraAttributes(),", "+\t\t\t\t\t\t\tentry.isExported());", "+\t\t\t\tcase IResource.FILE :", "+\t\t\t\t\t// internal binary archive", "+\t\t\t\t\treturn JavaCore.newLibraryEntry(", "+\t\t\t\t\t\t\tresolvedPath,", "+\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentPath()),", "+\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()),", "+\t\t\t\t\t\t\tentry.getAccessRules(),", "+\t\t\t\t\t\t\tentry.getExtraAttributes(),", "+\t\t\t\t\t\t\tentry.isExported());", "+\t\t\t\tcase IResource.FOLDER :", "+\t\t\t\t\t// internal binary folder", "+\t\t\t\t\treturn JavaCore.newLibraryEntry(", "+\t\t\t\t\t\t\tresolvedPath,", "+\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentPath()),", "+\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()),", "+\t\t\t\t\t\t\tentry.getAccessRules(),", "+\t\t\t\t\t\t\tentry.getExtraAttributes(),", "+\t\t\t\t\t\t\tentry.isExported());", "+\t\t\t}", "+\t\t}", "+\t\tif (target instanceof File) {", "+\t\t\tFile externalFile = JavaModel.getFile(target);", "+\t\t\tif (externalFile != null) {", "+\t\t\t\t// external binary archive", "+\t\t\t\treturn JavaCore.newLibraryEntry(", "+\t\t\t\t\t\tresolvedPath,", "+\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentPath()),", "+\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()),", "+\t\t\t\t\t\tentry.getAccessRules(),", "+\t\t\t\t\t\tentry.getExtraAttributes(),", "+\t\t\t\t\t\tentry.isExported());", "+\t\t\t} else { ", "+\t\t\t\t// non-existing file", "+\t\t\t\tif (resolvedPath.isAbsolute()){", "+\t\t\t\t\treturn JavaCore.newLibraryEntry(", "+\t\t\t\t\t\t\tresolvedPath,", "+\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentPath()),", "+\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()),", "+\t\t\t\t\t\t\tentry.getAccessRules(),", "+\t\t\t\t\t\t\tentry.getExtraAttributes(),", "+\t\t\t\t\t\t\tentry.isExported());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} ", "+\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea20ac501e5fc515ac2c3c8db85a3e3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 416, "methodNumberAfterChange": 503, "signatureBeforeChange": " \tASTNode oneOfEach(AST target)", "signatureAfterChange": " \tASTNode oneOfEach(AST target)", "diff": ["-\t", "+", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tEnumDeclaration ed = target.newEnumDeclaration();", "+\t\t\ttd.bodyDeclarations().add(ed);\t", "+\t\t\tEnumConstantDeclaration ec = target.newEnumConstantDeclaration();", "+\t\t\ted.bodyDeclarations().add(ec);\t", "+\t\t}", "+\t\t", "-\t\tvariableDeclarationFragment.setInitializer(qn);", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tSimpleType st = target.newSimpleType(qn);", "+\t\t\tQualifiedType qt = target.newQualifiedType(st, target.newSimpleName(\"x\")); //$NON-NLS-1$", "+\t\t\tWildcardType wt = target.newWildcardType();", "+\t\t\tParameterizedType pmt = target.newParameterizedType(target.newSimpleName(\"y\")); //$NON-NLS-1$", "+\t\t\tpmt.typeArguments().add(wt);", "+\t\t\tpmt.typeArguments().add(qt);", "+\t\t\tmd.setReturnType2(pmt);", "+\t\t}", "+\t\t", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tEnhancedForStatement foreachStatement = target.newEnhancedForStatement();", "+\t\t\tb.statements().add(foreachStatement);", "+\t\t}", "+\t\t// annotations", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tAnnotationTypeDeclaration atd = target.newAnnotationTypeDeclaration();", "+\t\t\tcu.types().add(atd);", "+\t\t\tatd.bodyDeclarations().add(target.newAnnotationTypeMemberDeclaration());", "+\t\t\ttd.modifiers().add(target.newMarkerAnnotation());", "+\t\t\ttd.modifiers().add(target.newSingleMemberAnnotation());", "+\t\t\tNormalAnnotation an0 = target.newNormalAnnotation();", "+\t\t\ttd.modifiers().add(an0);", "+\t\t\tan0.values().add(target.newMemberValuePair());", "+\t\t\ttd.modifiers().add(target.newModifier(Modifier.ModifierKeyword.PRIVATE_KEYWORD));", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f91d71235024ca28ddd6e7b42cfeb5d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTRecoveryPropagator.java", "commitBeforeChange": "51c6ca3e4dfed3078a1640da7a2ab7f26c899e0a", "commitAfterChange": "de8aa9940086fe152901aa168536f30670945804", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void endVisit(Block node)", "signatureAfterChange": "  \tpublic void endVisit(Block node)", "diff": ["+\t\tint level = node.getAST().apiLevel;", "+\t\t", "+\t\tList statements = node.statements();", "+\t\tnext : for (int i = 0, max = statements.size(); i < max; i++) {", "+\t\t\tASTNode statement = (ASTNode) statements.get(i);", "+\t\t\tif (statement.getNodeType() == ASTNode.VARIABLE_DECLARATION_STATEMENT) {", "+\t\t\t\tVariableDeclarationStatement variableDeclarationStatement =  (VariableDeclarationStatement) statement;", "+\t\t\t\t", "+\t\t\t\tif (level == AST.JLS2_INTERNAL) {", "+\t\t\t\t\tif (variableDeclarationStatement.getModifiers() != Modifier.NONE) {", "+\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (level >= AST.JLS3_INTERNAL) {", "+\t\t\t\t\tif (variableDeclarationStatement.modifiers().size() != 0) {", "+\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tType type = variableDeclarationStatement.getType();", "+\t\t\t\tif (type.getNodeType() != ASTNode.SIMPLE_TYPE) {", "+\t\t\t\t\tcontinue next;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tList fragments = variableDeclarationStatement.fragments();", "+\t\t\t\tif (fragments.size() == 1) {", "+\t\t\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "+\t\t\t\t\t", "+\t\t\t\t\tSimpleName simpleName = fragment.getName();", "+\t\t\t\t\tif (CharOperation.equals(RecoveryScanner.FAKE_IDENTIFIER, simpleName.getIdentifier().toCharArray())) {", "+\t\t\t\t\t\tSimpleType simpleType = (SimpleType) type;", "+\t\t\t\t\t\tName name = simpleType.getName();", "+\t\t\t\t\t\tname.setParent(null, null);", "+\t\t\t\t\t\tname.setFlags(name.getFlags() | ASTNode.RECOVERED);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tfinal ExpressionStatement stmt = new ExpressionStatement(name.getAST());", "+\t\t\t\t\t\tstmt.setExpression(name);", "+\t\t\t\t\t\tstmt.setSourceRange(variableDeclarationStatement.getStartPosition(), variableDeclarationStatement.getLength());", "+\t\t\t\t\t\tstmt.setFlags(stmt.getFlags() | ASTNode.RECOVERED);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tstatements.add(i, stmt);", "+\t\t\t\t\t\tstatements.remove(variableDeclarationStatement);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t"]}], "num": 21464}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "12aa0a28423d660960c7f19eaf240714", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "560fc17d3f988394d20203a6dfb8998d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "signatureAfterChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "diff": ["+\t\tObject typeRef = null;", "+\t\tint dim = 0;", "+\t\tboolean isVarargs = false;", "+\t\tlong[] dimPositions = new long[20]; // assume that there won't be more than 20 dimensions...", "+\t\tchar[] name = null;", "+\t\tlong argNamePos = -1;", "-\t\t\tObject typeRef;", "+\t\t\t\t} else if (this.kind == COMPLETION_PARSER) {", "+\t\t\t\t\tObject methodRef = createMethodReference(receiver, arguments);", "+\t\t\t\t\treturn invalidSyntax(INVALID_NO_ARGUMENT, new Object[] { methodRef });", "+\t\t\t}", "+\t\t\tif (this.kind == COMPLETION_PARSER && this.index >= this.scanner.eofPosition) {", "+\t\t\t\tObject argument = createArgumentReference(null, 0, false, typeRef, null, 0);", "+\t\t\t\treturn invalidSyntax(INVALID_ARGUMENTS, new Object[] { receiver, arguments, argument });", "-\t\t\tint dim = 0;", "-\t\t\tboolean isVarargs = false;", "-\t\t\tlong[] dimPositions = new long[20]; // assume that there won't be more than 20 dimensions...", "+\t\t\tdim = 0;", "+\t\t\tisVarargs = false;", "-\t\t\tlong argNamePos = -1;", "+\t\t\targNamePos = -1;", "-\t\t\tchar[] name = argName == null ? new char[0] : argName;", "+\t\t\tname = argName == null ? CharOperation.NO_CHAR : argName;", "+\t\t\t} else if (this.kind == COMPLETION_PARSER) {", "+\t\t\t\tObject argument = createArgumentReference(name, dim, isVarargs, typeRef, dimPositions, argNamePos);", "+\t\t\t\treturn invalidSyntax(INVALID_ARGUMENTS, new Object[] { receiver, arguments, argument });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e86e4a450cf605017e3f21a18ea2279", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "f97912416c5f4661289c43d63ee763608220be3f", "commitAfterChange": "e5efe07482ca39d7bb013c10359ef31d2cc33138", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "signatureAfterChange": " \tprotected Object parseArguments(Object receiver) throws InvalidInputException", "diff": ["-\tprivate Object parseArguments(Object receiver) throws InvalidInputException {", "+\tprotected Object parseArguments(Object receiver) throws InvalidInputException {", "-\t\t\t\t} else if (this.kind == COMPLETION_PARSER) {", "-\t\t\t\t\tObject methodRef = createMethodReference(receiver, arguments);", "-\t\t\t\t\treturn invalidSyntax(INVALID_NO_ARGUMENT, new Object[] { methodRef });", "-\t\t\t}", "-\t\t\tif (this.kind == COMPLETION_PARSER && this.index >= this.scanner.eofPosition) {", "-\t\t\t\tObject argument = createArgumentReference(null, 0, false, typeRef, null, 0);", "-\t\t\t\treturn invalidSyntax(INVALID_ARGUMENTS, new Object[] { receiver, arguments, argument });", "-\t\t\t} else if (this.kind == COMPLETION_PARSER) {", "-\t\t\t\tObject argument = createArgumentReference(name, dim, isVarargs, typeRef, dimPositions, argNamePos);", "-\t\t\t\treturn invalidSyntax(INVALID_ARGUMENTS, new Object[] { receiver, arguments, argument });"]}], "num": 3189}
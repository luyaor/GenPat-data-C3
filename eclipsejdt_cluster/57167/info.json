{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e60ba912220c10479510184889f5af9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0526d91974cf4b6f18a871a96ab482eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "c0fbf538c56e049473d6298631299cfef92195c1", "commitAfterChange": "2f34b689f6a84d6509b412aba1f08255f656bb4e", "methodNumberBeforeChange": 271, "methodNumberAfterChange": 271, "signatureBeforeChange": " protected void consumeRule(int act)", "signatureAfterChange": " protected void consumeRule(int act)", "diff": ["-    case 373 : if (DEBUG) { System.out.println(\"NonWildTypeArgumentsopt ::=\"); }  //$NON-NLS-1$", "+    case 373 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= super COLON_COLON...\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceExpressionSuperForm();  ", "+\t\t\tbreak;", "+ ", "+    case 374 : if (DEBUG) { System.out.println(\"NonWildTypeArgumentsopt ::=\"); }  //$NON-NLS-1$", "-    case 375 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= Identifier\"); }  //$NON-NLS-1$", "+    case 376 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= Identifier\"); }  //$NON-NLS-1$", "-    case 376 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= new\"); }  //$NON-NLS-1$", "+    case 377 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= new\"); }  //$NON-NLS-1$", "-    case 377 : if (DEBUG) { System.out.println(\"LambdaExpression ::= LambdaParameters ARROW LambdaBody\"); }  //$NON-NLS-1$", "+    case 378 : if (DEBUG) { System.out.println(\"LambdaExpression ::= LambdaParameters ARROW LambdaBody\"); }  //$NON-NLS-1$", "-    case 378 : if (DEBUG) { System.out.println(\"LambdaParameters ::= Identifier\"); }  //$NON-NLS-1$", "+    case 379 : if (DEBUG) { System.out.println(\"LambdaParameters ::= Identifier\"); }  //$NON-NLS-1$", "-    case 382 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameterList ::=...\"); }  //$NON-NLS-1$", "+    case 383 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameterList ::=...\"); }  //$NON-NLS-1$", "-    case 383 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameter ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+    case 384 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameter ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-    case 386 : if (DEBUG) { System.out.println(\"ElidedLeftBraceAndReturn ::=\"); }  //$NON-NLS-1$", "+    case 387 : if (DEBUG) { System.out.println(\"ElidedLeftBraceAndReturn ::=\"); }  //$NON-NLS-1$", "-    case 387 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "+    case 388 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "-    case 388 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "+    case 389 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "-    case 389 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "+    case 390 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "-    case 390 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+    case 391 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-    case 391 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "-\t\t\tbreak;", "- ", "-    case 392 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "+    case 392 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "+\t\t\tbreak;", "+ ", "+    case 394 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "-    case 394 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "+    case 395 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "-    case 395 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "+    case 396 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "-    case 396 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 397 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 398 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 399 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 399 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 400 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 401 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 402 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 403 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "+    case 404 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "-    case 404 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "+    case 405 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "-    case 405 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "+    case 406 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "-    case 406 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 407 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 407 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "+    case 408 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "-    case 408 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 409 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 409 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 410 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 411 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "+    case 412 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "-     case 413 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 414 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-     case 414 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "+     case 415 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "-     case 417 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 418 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-    case 418 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "+    case 419 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "-    case 419 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "+    case 420 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "-    case 420 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+    case 421 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-    case 421 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 422 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 422 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 423 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 423 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 424 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 424 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 425 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 425 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 426 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 426 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "+    case 427 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "-    case 427 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "+    case 428 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "-    case 428 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "+    case 429 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "-    case 430 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "+    case 431 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "-    case 433 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "+    case 434 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "-    case 434 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "+    case 435 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "-    case 435 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "+    case 436 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "-    case 438 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 439 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 439 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 440 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 441 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 442 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 442 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 443 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 444 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "+    case 445 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "-    case 445 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "+    case 446 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "-    case 447 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "+    case 448 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "-    case 448 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 449 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 449 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 450 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 450 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "+    case 451 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "-    case 451 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\"); }  //$NON-NLS-1$", "+    case 452 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\"); }  //$NON-NLS-1$", "-    case 452 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "+    case 453 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "-    case 453 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "+    case 454 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "-    case 454 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "+    case 455 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "-    case 455 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "+    case 456 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "-    case 457 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "+\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 461 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 462 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 464 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 465 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 466 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 468 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS);  ", "-\t\t\tbreak;", "- ", "-    case 469 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER);  ", "-\t\t\tbreak;", "- ", "-    case 470 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 471 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 473 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "-\t\t    consumeInstanceOfExpression();  ", "-\t\t\tbreak;", "- ", "-    case 475 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 476 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 478 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND);  ", "-\t\t\tbreak;", "- ", "-    case 480 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.XOR);  ", "-\t\t\tbreak;", "- ", "-    case 482 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR);  ", "-\t\t\tbreak;", "- ", "-    case 484 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND_AND);  ", "-\t\t\tbreak;", "- ", "-    case 486 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR_OR);  ", "-\t\t\tbreak;", "- ", "-    case 488 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  ", "-\t\t\tbreak;", "- ", "-    case 491 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignment();  ", "-\t\t\tbreak;", "- ", "-    case 493 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "-\t\t    ignoreExpressionAssignment(); ", "-\t\t\tbreak;", "- ", "-    case 494 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 495 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 496 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(DIVIDE);  ", "-\t\t\tbreak;", "- ", "-    case 497 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 498 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 499 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 500 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 501 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 502 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 503 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(AND);  ", "-\t\t\tbreak;", "- ", "-    case 504 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(XOR);  ", "-\t\t\tbreak;", "- ", "-    case 505 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(OR);  ", "-\t\t\tbreak;", "- ", "-    case 506 : if (DEBUG) { System.out.println(\"Expression ::= AssignmentExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeExpression();  ", "-\t\t\tbreak;", "- ", "-    case 509 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyExpression();  ", "-\t\t\tbreak;", "- ", "-    case 514 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyClassBodyDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-    case 515 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassBodyDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-     case 516 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeDefaultModifiers();  ", "-\t\t\tbreak;", "- ", "-    case 517 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "-\t\t    consumeModifiers();  ", "-\t\t\tbreak;", "- ", "-    case 518 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyBlockStatementsopt();  ", "-\t\t\tbreak;", "- ", "-     case 520 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyDimsopt();  ", "-\t\t\tbreak;", "- ", "-     case 522 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyArgumentListopt();  ", "-\t\t\tbreak;", "- ", "-    case 526 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeFormalParameterListopt();  ", "-\t\t\tbreak;", "- ", "-     case 530 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyInterfaceMemberDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-     case 531 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-\t\t    consumeInterfaceMemberDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-    case 532 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeNestedType();  ", "-\t\t\tbreak;", "-", "-     case 533 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyForInitopt();  ", "-\t\t\tbreak;", "- ", "-     case 535 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyForUpdateopt();  ", "-\t\t\tbreak;", "- ", "-     case 539 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyCatchesopt();  ", "-\t\t\tbreak;", "- ", "-     case 541 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumDeclaration();  ", "-\t\t\tbreak;", "- ", "-     case 542 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeader();  ", "-\t\t\tbreak;", "- ", "-     case 543 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeaderName();  ", "-\t\t\tbreak;", "- ", "-     case 544 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeaderNameWithTypeParameters();  ", "-\t\t\tbreak;", "- ", "-     case 545 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyNoConstants();  ", "-\t\t\tbreak;", "- ", "-     case 546 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyNoConstants();  ", "-\t\t\tbreak;", "- ", "-     case 547 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyWithConstants();  ", "-\t\t\tbreak;", "- ", "-     case 548 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyWithConstants();  ", "-\t\t\tbreak;", "- ", "-    case 550 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstants();  ", "-\t\t\tbreak;", "- ", "-    case 551 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantHeaderName();  ", "-\t\t\tbreak;", "- ", "-    case 552 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantHeader();  ", "-\t\t\tbreak;", "- ", "-    case 553 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantWithClassBody();  ", "-\t\t\tbreak;", "- ", "-    case 554 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantNoClassBody();  ", "-\t\t\tbreak;", "- ", "-    case 555 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 556 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyArguments();  ", "-\t\t\tbreak;", "- ", "-    case 558 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumDeclarations();  ", "-\t\t\tbreak;", "- ", "-    case 559 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyEnumDeclarations();  ", "-\t\t\tbreak;", "- ", "-    case 561 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatement();  ", "-\t\t\tbreak;", "- ", "-    case 562 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatement();  ", "-\t\t\tbreak;", "- ", "-    case 563 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeaderInit(false);  ", "-\t\t\tbreak;", "- ", "-    case 564 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeaderInit(true);  ", "-\t\t\tbreak;", "- ", "-    case 565 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeader();  ", "-\t\t\tbreak;", "- ", "-    case 566 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeImportDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 567 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "-\t\t    consumeSingleStaticImportDeclarationName();  ", "-\t\t\tbreak;", "- ", "-    case 568 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeImportDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 569 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "-\t\t    consumeStaticImportOnDemandDeclarationName();  ", "-\t\t\tbreak;", "- ", "-    case 570 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 571 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-\t\t    consumeOnlyTypeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 573 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList1();  ", "-\t\t\tbreak;", "- ", "-    case 575 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList();  ", "-\t\t\tbreak;", "- ", "-    case 576 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgument();  ", "-\t\t\tbreak;", "- ", "-    case 580 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType1();  ", "-\t\t\tbreak;", "- ", "-    case 581 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentReferenceType1();  ", "-\t\t\tbreak;", "- ", "-    case 583 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList2();  ", "-\t\t\tbreak;", "- ", "-    case 586 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType2();  ", "-\t\t\tbreak;", "- ", "-    case 587 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentReferenceType2();  ", "-\t\t\tbreak;", "- ", "-    case 589 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList3();  ", "-\t\t\tbreak;", "- ", "-    case 592 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType3();  ", "-\t\t\tbreak;", "- ", "-    case 593 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard();  ", "-\t\t\tbreak;", "- ", "-    case 594 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardWithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 595 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBoundsExtends();  ", "-\t\t\tbreak;", "- ", "-    case 596 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBoundsSuper();  ", "-\t\t\tbreak;", "- ", "-    case 597 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard1();  ", "-\t\t\tbreak;", "- ", "-    case 598 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard1WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 599 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds1Extends();  ", "-\t\t\tbreak;", "- ", "-    case 600 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds1Super();  ", "-\t\t\tbreak;", "- ", "-    case 601 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard2();  ", "-\t\t\tbreak;", "- ", "-    case 602 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard2WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 603 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds2Extends();  ", "-\t\t\tbreak;", "- ", "-    case 604 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds2Super();  ", "-\t\t\tbreak;", "- ", "-    case 605 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard3();  ", "-\t\t\tbreak;", "- ", "-    case 606 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard3WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 607 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds3Extends();  ", "-\t\t\tbreak;", "- ", "-    case 608 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds3Super();  ", "-\t\t\tbreak;", "- ", "-    case 609 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterHeader();  ", "-\t\t\tbreak;", "- ", "-    case 610 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameters();  ", "-\t\t\tbreak;", "- ", "-    case 612 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterList();  ", "-\t\t\tbreak;", "- ", "-    case 614 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterWithExtends();  ", "-\t\t\tbreak;", "- ", "-    case 615 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterWithExtendsAndBounds();  ", "-\t\t\tbreak;", "- ", "-    case 617 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBoundList();  ", "-\t\t\tbreak;", "- ", "-    case 618 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBound();  ", "-\t\t\tbreak;", "- ", "-    case 620 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterList1();  ", "-\t\t\tbreak;", "- ", "-    case 621 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1();  ", "-\t\t\tbreak;", "- ", "-    case 622 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1WithExtends();  ", "-\t\t\tbreak;", "- ", "-    case 623 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1WithExtendsAndBounds();  ", "-\t\t\tbreak;", "- ", "-    case 625 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBoundList1();  ", "-\t\t\tbreak;", "- ", "-    case 626 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBound1();  ", "-\t\t\tbreak;", "- ", "-    case 632 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 633 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 636 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);  ", "-\t\t\tbreak;", "- ", "-    case 637 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.NOT);  ", "-\t\t\tbreak;", "- ", "-    case 640 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 641 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 642 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 643 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.DIVIDE);  ", "-\t\t\tbreak;", "- ", "-    case 644 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 460 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-    case 645 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 647 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 462 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "-    case 648 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 649 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 463 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "-    case 650 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 652 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 465 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 653 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 654 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 466 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 655 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 656 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 467 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 657 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 659 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 469 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "-    case 660 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS);  ", "-\t\t\tbreak;", "- ", "-    case 661 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 470 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "-    case 662 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER);  ", "-\t\t\tbreak;", "- ", "-    case 663 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 471 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "-    case 664 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 665 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 472 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "-    case 666 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 668 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "-\t\t    consumeInstanceOfExpressionWithName();  ", "-\t\t\tbreak;", "- ", "-    case 669 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 474 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "-    case 671 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 476 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-    case 672 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpressionWithName(OperatorIds.EQUAL_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 673 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 477 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "-    case 674 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpressionWithName(OperatorIds.NOT_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 676 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "+    case 479 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "-    case 677 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.AND);  ", "-\t\t\tbreak;", "- ", "-    case 679 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 481 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "-    case 680 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.XOR);  ", "-\t\t\tbreak;", "- ", "-    case 682 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 483 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "-    case 683 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.OR);  ", "-\t\t\tbreak;", "- ", "-    case 685 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 485 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "-    case 686 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.AND_AND);  ", "-\t\t\tbreak;", "- ", "-    case 688 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 487 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 689 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.OR_OR);  ", "-\t\t\tbreak;", "- ", "-    case 691 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 489 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 692 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "+    case 492 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignment();  ", "+\t\t\tbreak;", "+ ", "+    case 494 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "+\t\t    ignoreExpressionAssignment(); ", "+\t\t\tbreak;", "+ ", "+    case 495 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 496 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(MULTIPLY);  ", "+\t\t\tbreak;", "+ ", "+    case 497 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(DIVIDE);  ", "+\t\t\tbreak;", "+ ", "+    case 498 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(REMAINDER);  ", "+\t\t\tbreak;", "+ ", "+    case 499 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 500 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 501 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(LEFT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 502 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 503 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 504 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(AND);  ", "+\t\t\tbreak;", "+ ", "+    case 505 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(XOR);  ", "+\t\t\tbreak;", "+ ", "+    case 506 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(OR);  ", "+\t\t\tbreak;", "+ ", "+    case 507 : if (DEBUG) { System.out.println(\"Expression ::= AssignmentExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 510 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 515 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyClassBodyDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+    case 516 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+\t\t    consumeClassBodyDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 517 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeDefaultModifiers();  ", "+\t\t\tbreak;", "+ ", "+    case 518 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "+\t\t    consumeModifiers();  ", "+\t\t\tbreak;", "+ ", "+    case 519 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyBlockStatementsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 521 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyDimsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 523 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyArgumentListopt();  ", "+\t\t\tbreak;", "+ ", "+    case 527 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeFormalParameterListopt();  ", "+\t\t\tbreak;", "+ ", "+     case 531 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyInterfaceMemberDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 532 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+\t\t    consumeInterfaceMemberDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+    case 533 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeNestedType();  ", "+\t\t\tbreak;", "+", "+     case 534 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyForInitopt();  ", "+\t\t\tbreak;", "+ ", "+     case 536 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyForUpdateopt();  ", "+\t\t\tbreak;", "+ ", "+     case 540 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyCatchesopt();  ", "+\t\t\tbreak;", "+ ", "+     case 542 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumDeclaration();  ", "+\t\t\tbreak;", "+ ", "+     case 543 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeader();  ", "+\t\t\tbreak;", "+ ", "+     case 544 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeaderName();  ", "+\t\t\tbreak;", "+ ", "+     case 545 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeaderNameWithTypeParameters();  ", "+\t\t\tbreak;", "+ ", "+     case 546 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyNoConstants();  ", "+\t\t\tbreak;", "+ ", "+     case 547 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyNoConstants();  ", "+\t\t\tbreak;", "+ ", "+     case 548 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyWithConstants();  ", "+\t\t\tbreak;", "+ ", "+     case 549 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyWithConstants();  ", "+\t\t\tbreak;", "+ ", "+    case 551 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstants();  ", "+\t\t\tbreak;", "+ ", "+    case 552 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantHeaderName();  ", "+\t\t\tbreak;", "+ ", "+    case 553 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 554 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantWithClassBody();  ", "+\t\t\tbreak;", "+ ", "+    case 555 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantNoClassBody();  ", "+\t\t\tbreak;", "+ ", "+    case 556 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+\t\t    consumeArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 557 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 559 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumDeclarations();  ", "+\t\t\tbreak;", "+ ", "+    case 560 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyEnumDeclarations();  ", "+\t\t\tbreak;", "+ ", "+    case 562 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatement();  ", "+\t\t\tbreak;", "+ ", "+    case 563 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatement();  ", "+\t\t\tbreak;", "+ ", "+    case 564 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeaderInit(false);  ", "+\t\t\tbreak;", "+ ", "+    case 565 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeaderInit(true);  ", "+\t\t\tbreak;", "+ ", "+    case 566 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 567 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeImportDeclaration();  ", "+\t\t\tbreak;", "+ ", "+    case 568 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "+\t\t    consumeSingleStaticImportDeclarationName();  ", "+\t\t\tbreak;", "+ ", "+    case 569 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeImportDeclaration();  ", "+\t\t\tbreak;", "+ ", "+    case 570 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "+\t\t    consumeStaticImportOnDemandDeclarationName();  ", "+\t\t\tbreak;", "+ ", "+    case 571 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 572 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+\t\t    consumeOnlyTypeArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 574 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList1();  ", "+\t\t\tbreak;", "+ ", "+    case 576 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList();  ", "+\t\t\tbreak;", "+ ", "+    case 577 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgument();  ", "+\t\t\tbreak;", "+ ", "+    case 581 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType1();  ", "+\t\t\tbreak;", "+ ", "+    case 582 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentReferenceType1();  ", "+\t\t\tbreak;", "+ ", "+    case 584 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList2();  ", "+\t\t\tbreak;", "+ ", "+    case 587 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType2();  ", "+\t\t\tbreak;", "+ ", "+    case 588 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentReferenceType2();  ", "+\t\t\tbreak;", "+ ", "+    case 590 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList3();  ", "+\t\t\tbreak;", "+ ", "+    case 593 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType3();  ", "+\t\t\tbreak;", "+ ", "+    case 594 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard();  ", "+\t\t\tbreak;", "+ ", "+    case 595 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardWithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 596 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBoundsExtends();  ", "+\t\t\tbreak;", "+ ", "+    case 597 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBoundsSuper();  ", "+\t\t\tbreak;", "+ ", "+    case 598 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard1();  ", "+\t\t\tbreak;", "+ ", "+    case 599 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard1WithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 600 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds1Extends();  ", "+\t\t\tbreak;", "+ ", "+    case 601 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds1Super();  ", "+\t\t\tbreak;", "+ ", "+    case 602 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard2();  ", "+\t\t\tbreak;", "+ ", "+    case 603 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard2WithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 604 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds2Extends();  ", "+\t\t\tbreak;", "+ ", "+    case 605 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds2Super();  ", "+\t\t\tbreak;", "+ ", "+    case 606 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard3();  ", "+\t\t\tbreak;", "+ ", "+    case 607 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard3WithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 608 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds3Extends();  ", "+\t\t\tbreak;", "+ ", "+    case 609 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds3Super();  ", "+\t\t\tbreak;", "+ ", "+    case 610 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 611 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameters();  ", "+\t\t\tbreak;", "+ ", "+    case 613 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterList();  ", "+\t\t\tbreak;", "+ ", "+    case 615 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterWithExtends();  ", "+\t\t\tbreak;", "+ ", "+    case 616 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterWithExtendsAndBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 618 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBoundList();  ", "+\t\t\tbreak;", "+ ", "+    case 619 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBound();  ", "+\t\t\tbreak;", "+ ", "+    case 621 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterList1();  ", "+\t\t\tbreak;", "+ ", "+    case 622 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1();  ", "+\t\t\tbreak;", "+ ", "+    case 623 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1WithExtends();  ", "+\t\t\tbreak;", "+ ", "+    case 624 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1WithExtendsAndBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 626 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBoundList1();  ", "+\t\t\tbreak;", "+ ", "+    case 627 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBound1();  ", "+\t\t\tbreak;", "+ ", "+    case 633 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 634 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 637 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);  ", "+\t\t\tbreak;", "+ ", "+    case 638 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.NOT);  ", "+\t\t\tbreak;", "+ ", "+    case 641 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "+\t\t\tbreak;", "+ ", "+    case 642 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.MULTIPLY);  ", "+\t\t\tbreak;", "+ ", "+    case 643 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "+\t\t\tbreak;", "+ ", "+    case 644 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.DIVIDE);  ", "+\t\t\tbreak;", "+ ", "+    case 645 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);  ", "+\t\t\tbreak;", "+ ", "+    case 646 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.REMAINDER);  ", "+\t\t\tbreak;", "+ ", "+    case 648 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 649 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 650 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 651 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 653 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 654 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LEFT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 655 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 656 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 657 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 658 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 660 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LESS);  ", "+\t\t\tbreak;", "+ ", "+    case 661 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS);  ", "+\t\t\tbreak;", "+ ", "+    case 662 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER);  ", "+\t\t\tbreak;", "+ ", "+    case 663 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER);  ", "+\t\t\tbreak;", "+ ", "+    case 664 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 665 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 666 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 667 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 669 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "+\t\t    consumeInstanceOfExpressionWithName();  ", "+\t\t\tbreak;", "+ ", "+    case 670 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeInstanceOfExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 672 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 673 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpressionWithName(OperatorIds.EQUAL_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 674 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 675 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpressionWithName(OperatorIds.NOT_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 677 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.AND);  ", "+\t\t\tbreak;", "+ ", "+    case 678 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.AND);  ", "+\t\t\tbreak;", "+ ", "+    case 680 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.XOR);  ", "+\t\t\tbreak;", "+ ", "+    case 681 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.XOR);  ", "+\t\t\tbreak;", "+ ", "+    case 683 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.OR);  ", "+\t\t\tbreak;", "+ ", "+    case 684 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.OR);  ", "+\t\t\tbreak;", "+ ", "+    case 686 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.AND_AND);  ", "+\t\t\tbreak;", "+ ", "+    case 687 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.AND_AND);  ", "+\t\t\tbreak;", "+ ", "+    case 689 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.OR_OR);  ", "+\t\t\tbreak;", "+ ", "+    case 690 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.OR_OR);  ", "+\t\t\tbreak;", "+ ", "+    case 692 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  ", "+\t\t\tbreak;", "+ ", "+    case 693 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "-    case 696 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+    case 697 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-    case 697 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  ", "-\t\t\tbreak;", "- ", "-    case 698 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "+    case 698 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  ", "+\t\t\tbreak;", "+ ", "+    case 700 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "-    case 700 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "+    case 701 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "-    case 701 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 702 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 703 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 704 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 704 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+    case 705 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-    case 706 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "+    case 707 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "-    case 707 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "+    case 708 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "-    case 708 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 709 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 709 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "+    case 710 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "-    case 710 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "+    case 711 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "-    case 711 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 712 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 712 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 713 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 720 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "+    case 721 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "-    case 721 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 722 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 722 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "+    case 723 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "-    case 725 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "+    case 726 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "-    case 726 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "+    case 727 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "-    case 727 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 728 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 728 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 729 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 730 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "+    case 731 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "-\t\t\tbreak;", "- ", "-    case 733 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeMemberValueArrayInitializer() ;  ", "-\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "+\t\t    consumeMemberValueArrayInitializer() ;  ", "-    case 737 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "+    case 737 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "+\t\t\tbreak;", "+ ", "+    case 738 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "-    case 739 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "+    case 740 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "-    case 740 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "+    case 741 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "-    case 741 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "+    case 742 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "-    case 742 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 743 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 743 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "+    case 744 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "-    case 744 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 745 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 745 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 746 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 746 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 747 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "141b926408c1e90dd02764816cec5ae9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "b6c213d292f2a14fc7e944fa6a9473734abc07ab", "commitAfterChange": "23bd27f0df8fef2c86453e5a48de14dcd7cbc8bc", "methodNumberBeforeChange": 261, "methodNumberAfterChange": 261, "signatureBeforeChange": " protected void consumeRule(int act)", "signatureAfterChange": " protected void consumeRule(int act)", "diff": ["-// This method is part of an automatic generation : do NOT edit-modify", "+// This method is part of an automatic generation : do NOT edit-modify  ", "-\t\t    consumePrimitiveType();", "+\t\t    consumePrimitiveType();  ", "-", "+ ", "-\t\t    consumeReferenceType();", "+\t\t    consumeReferenceType();   ", "-", "+ ", "-\t\t    consumeClassOrInterfaceName();", "+\t\t    consumeClassOrInterfaceName();   ", "-", "+ ", "-\t\t    consumeClassOrInterface();", "+\t\t    consumeClassOrInterface();   ", "-", "+ ", "-\t\t    consumeGenericType();", "+\t\t    consumeGenericType();   ", "-", "+ ", "-\t\t    consumeArrayTypeWithTypeArgumentsName();", "+\t\t    consumeArrayTypeWithTypeArgumentsName();   ", "-", "+ ", "-\t\t    consumePrimitiveArrayType();", "+\t\t    consumePrimitiveArrayType();   ", "-", "+ ", "-\t\t    consumeNameArrayType();", "+\t\t    consumeNameArrayType();   ", "-", "+ ", "-\t\t    consumeGenericTypeNameArrayType();", "+\t\t    consumeGenericTypeNameArrayType();   ", "-", "+ ", "-\t\t    consumeGenericTypeArrayType();", "+\t\t    consumeGenericTypeArrayType();   ", "-", "+ ", "-\t\t    consumeQualifiedName();", "+\t\t    consumeQualifiedName();  ", "-", "+ ", "-\t\t    consumeCompilationUnit();", "+\t\t    consumeCompilationUnit();  ", "-", "+ ", "-\t\t    consumeInternalCompilationUnit();", "+\t\t    consumeInternalCompilationUnit();  ", "-", "+ ", "-\t\t    consumeInternalCompilationUnit();", "+\t\t    consumeInternalCompilationUnit();  ", "-", "+ ", "-\t\t    consumeInternalCompilationUnitWithTypes();", "+\t\t    consumeInternalCompilationUnitWithTypes();  ", "-", "+ ", "-\t\t    consumeInternalCompilationUnitWithTypes();", "+\t\t    consumeInternalCompilationUnitWithTypes();  ", "-", "+ ", "-\t\t    consumeInternalCompilationUnit();", "+\t\t    consumeInternalCompilationUnit();  ", "-", "+ ", "-\t\t    consumeInternalCompilationUnitWithTypes();", "+\t\t    consumeInternalCompilationUnitWithTypes();  ", "-", "+ ", "-\t\t    consumeInternalCompilationUnitWithTypes();", "+\t\t    consumeInternalCompilationUnitWithTypes();  ", "-", "+ ", "-\t\t    consumeEmptyInternalCompilationUnit();", "+\t\t    consumeEmptyInternalCompilationUnit();  ", "-", "+ ", "-\t\t    consumeReduceImports();", "+\t\t    consumeReduceImports();  ", "-", "+ ", "-\t\t    consumeEnterCompilationUnit();", "+\t\t    consumeEnterCompilationUnit();  ", "-", "+ ", "-\t\t    consumeCatchHeader();", "+\t\t    consumeCatchHeader();  ", "-", "+ ", "-\t\t    consumeImportDeclarations();", "+\t\t    consumeImportDeclarations();  ", "-", "+ ", "-\t\t    consumeTypeDeclarations();", "+\t\t    consumeTypeDeclarations();  ", "-", "+ ", "-\t\t     consumePackageDeclaration();", "+\t\t     consumePackageDeclaration();  ", "-", "+ ", "-\t\t     consumePackageDeclarationNameWithModifiers();", "+\t\t     consumePackageDeclarationNameWithModifiers();  ", "-", "+ ", "-\t\t     consumePackageDeclarationName();", "+\t\t     consumePackageDeclarationName();  ", "-", "+ ", "-\t\t     consumePackageComment();", "+\t\t     consumePackageComment();  ", "-", "+ ", "-\t\t    consumeImportDeclaration();", "+\t\t    consumeImportDeclaration();  ", "-", "+ ", "-\t\t    consumeSingleTypeImportDeclarationName();", "+\t\t    consumeSingleTypeImportDeclarationName();  ", "-", "+ ", "-\t\t    consumeImportDeclaration();", "+\t\t    consumeImportDeclaration();  ", "-", "+ ", "-\t\t    consumeTypeImportOnDemandDeclarationName();", "+\t\t    consumeTypeImportOnDemandDeclarationName();  ", "-", "+ ", "-\t\t    consumeEmptyTypeDeclaration();", "+\t\t    consumeEmptyTypeDeclaration();  ", "-", "+ ", "-\t\t    consumeModifiers2();", "+\t\t    consumeModifiers2();  ", "-", "+ ", "-\t\t    consumeAnnotationAsModifier();", "+\t\t    consumeAnnotationAsModifier();  ", "-", "+ ", "-\t\t    consumeClassDeclaration();", "+\t\t    consumeClassDeclaration();  ", "-", "+ ", "-\t\t    consumeClassHeader();", "+\t\t    consumeClassHeader();  ", "-", "+ ", "-\t\t    consumeTypeHeaderNameWithTypeParameters();", "+\t\t    consumeTypeHeaderNameWithTypeParameters();  ", "-", "+ ", "-\t\t    consumeClassHeaderName1();", "+\t\t    consumeClassHeaderName1();  ", "-", "+ ", "-\t\t    consumeClassHeaderExtends();", "+\t\t    consumeClassHeaderExtends();  ", "-", "+ ", "-\t\t    consumeClassHeaderImplements();", "+\t\t    consumeClassHeaderImplements();  ", "-", "+ ", "-\t\t    consumeInterfaceTypeList();", "+\t\t    consumeInterfaceTypeList();  ", "-", "+ ", "-\t\t    consumeInterfaceType();", "+\t\t    consumeInterfaceType();  ", "-", "+ ", "-\t\t    consumeClassBodyDeclarations();", "+\t\t    consumeClassBodyDeclarations();  ", "-", "+ ", "-\t\t    consumeClassBodyDeclaration();", "+\t\t    consumeClassBodyDeclaration();  ", "-", "+ ", "-\t\t    consumeDiet();", "+\t\t    consumeDiet();  ", "-\t\t    consumeClassBodyDeclaration();", "+\t\t    consumeClassBodyDeclaration();  ", "-", "+ ", "-\t\t    consumeCreateInitializer();", "+\t\t    consumeCreateInitializer();  ", "-\t\t    consumeEmptyTypeDeclaration();", "+\t\t    consumeEmptyTypeDeclaration();  ", "-\t\t    consumeFieldDeclaration();", "+\t\t    consumeFieldDeclaration();  ", "-", "+ ", "-\t\t    consumeVariableDeclarators();", "+\t\t    consumeVariableDeclarators();  ", "-", "+ ", "-\t\t    consumeEnterVariable();", "+\t\t    consumeEnterVariable();  ", "-", "+ ", "-\t\t    consumeExitVariableWithInitialization();", "+\t\t    consumeExitVariableWithInitialization();  ", "-", "+ ", "-\t\t    consumeExitVariableWithoutInitialization();", "+\t\t    consumeExitVariableWithoutInitialization();  ", "-", "+ ", "-\t\t    consumeForceNoDiet();", "+\t\t    consumeForceNoDiet();  ", "-", "+ ", "-\t\t    consumeRestoreDiet();", "+\t\t    consumeRestoreDiet();  ", "-", "+ ", "-  consumeMethodDeclaration(true);", "+  consumeMethodDeclaration(true);   ", "-", "+ ", "-  consumeMethodDeclaration(false);", "+  consumeMethodDeclaration(false);  ", "-", "+ ", "-\t\t    consumeMethodHeader();", "+\t\t    consumeMethodHeader();  ", "-", "+ ", "-\t\t    consumeMethodHeaderNameWithTypeParameters(false);", "+\t\t    consumeMethodHeaderNameWithTypeParameters(false);  ", "-", "+ ", "-\t\t    consumeMethodHeaderName(false);", "+\t\t    consumeMethodHeaderName(false);  ", "-", "+ ", "-\t\t    consumeMethodHeaderRightParen();", "+\t\t    consumeMethodHeaderRightParen();  ", "-", "+ ", "-\t\t    consumeMethodHeaderExtendedDims();", "+\t\t    consumeMethodHeaderExtendedDims();  ", "-", "+ ", "-\t\t    consumeMethodHeaderThrowsClause();", "+\t\t    consumeMethodHeaderThrowsClause();  ", "-", "+ ", "-\t\t    consumeConstructorHeader();", "+\t\t    consumeConstructorHeader();  ", "-", "+ ", "-\t\t    consumeConstructorHeaderNameWithTypeParameters();", "+\t\t    consumeConstructorHeaderNameWithTypeParameters();  ", "-", "+ ", "-\t\t    consumeConstructorHeaderName();", "+\t\t    consumeConstructorHeaderName();  ", "-", "+ ", "-\t\t    consumeFormalParameterList();", "+\t\t    consumeFormalParameterList();  ", "-", "+ ", "-\t\t    consumeFormalParameter(false);", "+\t\t    consumeFormalParameter(false);  ", "-", "+ ", "-\t\t    consumeFormalParameter(true);", "+\t\t    consumeFormalParameter(true);  ", "-", "+ ", "-\t\t    consumeClassTypeList();", "+\t\t    consumeClassTypeList();  ", "-", "+ ", "-\t\t    consumeClassTypeElt();", "+\t\t    consumeClassTypeElt();  ", "-", "+ ", "-\t\t    consumeMethodBody();", "+\t\t    consumeMethodBody();  ", "-", "+ ", "-\t\t    consumeNestedMethod();", "+\t\t    consumeNestedMethod();  ", "-", "+ ", "-\t\t    consumeStaticInitializer();", "+\t\t    consumeStaticInitializer();  ", "-\t\t    consumeStaticOnly();", "+\t\t    consumeStaticOnly();  ", "-", "+ ", "-\t\t    consumeConstructorDeclaration() ;", "+\t\t    consumeConstructorDeclaration() ;  ", "-", "+ ", "-\t\t    consumeInvalidConstructorDeclaration() ;", "+\t\t    consumeInvalidConstructorDeclaration() ;  ", "-", "+ ", "-\t\t    consumeExplicitConstructorInvocation(0, THIS_CALL);", "+\t\t    consumeExplicitConstructorInvocation(0, THIS_CALL);  ", "-", "+ ", "-\t\t    consumeExplicitConstructorInvocationWithTypeArguments(0,THIS_CALL);", "+\t\t    consumeExplicitConstructorInvocationWithTypeArguments(0,THIS_CALL);  ", "-", "+ ", "-\t\t    consumeExplicitConstructorInvocation(0,SUPER_CALL);", "+\t\t    consumeExplicitConstructorInvocation(0,SUPER_CALL);  ", "-", "+ ", "-\t\t    consumeExplicitConstructorInvocationWithTypeArguments(0,SUPER_CALL);", "+\t\t    consumeExplicitConstructorInvocationWithTypeArguments(0,SUPER_CALL);  ", "-", "+ ", "-\t\t    consumeExplicitConstructorInvocation(1, SUPER_CALL);", "+\t\t    consumeExplicitConstructorInvocation(1, SUPER_CALL);  ", "-", "+ ", "-\t\t    consumeExplicitConstructorInvocationWithTypeArguments(1, SUPER_CALL);", "+\t\t    consumeExplicitConstructorInvocationWithTypeArguments(1, SUPER_CALL);  ", "-", "+ ", "-\t\t    consumeExplicitConstructorInvocation(2, SUPER_CALL);", "+\t\t    consumeExplicitConstructorInvocation(2, SUPER_CALL);  ", "-", "+ ", "-\t\t    consumeExplicitConstructorInvocationWithTypeArguments(2, SUPER_CALL);", "+\t\t    consumeExplicitConstructorInvocationWithTypeArguments(2, SUPER_CALL);  ", "-", "+ ", "-\t\t    consumeExplicitConstructorInvocation(1, THIS_CALL);", "+\t\t    consumeExplicitConstructorInvocation(1, THIS_CALL);  ", "-", "+ ", "-\t\t    consumeExplicitConstructorInvocationWithTypeArguments(1, THIS_CALL);", "+\t\t    consumeExplicitConstructorInvocationWithTypeArguments(1, THIS_CALL);  ", "-", "+ ", "-\t\t    consumeExplicitConstructorInvocation(2, THIS_CALL);", "+\t\t    consumeExplicitConstructorInvocation(2, THIS_CALL);  ", "-", "+ ", "-\t\t    consumeExplicitConstructorInvocationWithTypeArguments(2, THIS_CALL);", "+\t\t    consumeExplicitConstructorInvocationWithTypeArguments(2, THIS_CALL);  ", "-", "+ ", "-\t\t    consumeInterfaceDeclaration();", "+\t\t    consumeInterfaceDeclaration();  ", "-", "+ ", "-\t\t    consumeInterfaceHeader();", "+\t\t    consumeInterfaceHeader();  ", "-", "+ ", "-\t\t    consumeTypeHeaderNameWithTypeParameters();", "+\t\t    consumeTypeHeaderNameWithTypeParameters();  ", "-", "+ ", "-\t\t    consumeInterfaceHeaderName1();", "+\t\t    consumeInterfaceHeaderName1();  ", "-", "+ ", "-\t\t    consumeInterfaceHeaderExtends();", "+\t\t    consumeInterfaceHeaderExtends();  ", "-", "+ ", "-\t\t    consumeInterfaceMemberDeclarations();", "+\t\t    consumeInterfaceMemberDeclarations();  ", "-", "+ ", "-\t\t    consumeEmptyTypeDeclaration();", "+\t\t    consumeEmptyTypeDeclaration();  ", "-", "+ ", "-\t\t    consumeInvalidMethodDeclaration();", "+\t\t    consumeInvalidMethodDeclaration();  ", "-", "+ ", "-\t\t    consumeInvalidConstructorDeclaration(true);", "+\t\t    consumeInvalidConstructorDeclaration(true);   ", "-", "+ ", "-\t\t    consumeInvalidConstructorDeclaration(false);", "+\t\t    consumeInvalidConstructorDeclaration(false);   ", "-", "+ ", "-\t\t    consumePushLeftBrace();", "+\t\t    consumePushLeftBrace();  ", "-", "+ ", "-\t\t    consumeEmptyArrayInitializer();", "+\t\t    consumeEmptyArrayInitializer();  ", "-", "+ ", "-\t\t    consumeArrayInitializer();", "+\t\t    consumeArrayInitializer();  ", "-", "+ ", "-\t\t    consumeArrayInitializer();", "+\t\t    consumeArrayInitializer();  ", "-", "+ ", "-\t\t    consumeVariableInitializers();", "+\t\t    consumeVariableInitializers();  ", "-", "+ ", "-\t\t    consumeBlock();", "+\t\t    consumeBlock();  ", "-", "+ ", "-\t\t    consumeOpenBlock() ;", "+\t\t    consumeOpenBlock() ;  ", "-", "+ ", "-\t\t    consumeBlockStatements() ;", "+\t\t    consumeBlockStatements() ;  ", "-", "+ ", "-\t\t    consumeInvalidInterfaceDeclaration();", "+\t\t    consumeInvalidInterfaceDeclaration();  ", "-", "+ ", "-\t\t    consumeInvalidAnnotationTypeDeclaration();", "+\t\t    consumeInvalidAnnotationTypeDeclaration();  ", "-", "+ ", "-\t\t    consumeInvalidEnumDeclaration();", "+\t\t    consumeInvalidEnumDeclaration();  ", "-", "+ ", "-\t\t    consumeLocalVariableDeclarationStatement();", "+\t\t    consumeLocalVariableDeclarationStatement();  ", "-", "+ ", "-\t\t    consumeLocalVariableDeclaration();", "+\t\t    consumeLocalVariableDeclaration();  ", "-", "+ ", "-\t\t    consumeLocalVariableDeclaration();", "+\t\t    consumeLocalVariableDeclaration();  ", "-", "+ ", "-\t\t    consumePushModifiers();", "+\t\t    consumePushModifiers();  ", "-", "+ ", "-\t\t    consumePushModifiersForHeader();", "+\t\t    consumePushModifiersForHeader();  ", "-", "+ ", "-\t\t    consumePushRealModifiers();", "+\t\t    consumePushRealModifiers();  ", "-", "+ ", "-\t\t    consumeEmptyStatement();", "+\t\t    consumeEmptyStatement();  ", "-", "+ ", "-\t\t    consumeStatementLabel() ;", "+\t\t    consumeStatementLabel() ;  ", "-", "+ ", "-\t\t    consumeStatementLabel() ;", "+\t\t    consumeStatementLabel() ;  ", "-", "+ ", "-\t\t    consumeLabel() ;", "+\t\t    consumeLabel() ;  ", "-", "+ ", "-\t\t    consumeExpressionStatement();", "+\t\t    consumeExpressionStatement();  ", "-", "+ ", "-\t\t    consumeStatementIfNoElse();", "+\t\t    consumeStatementIfNoElse();  ", "-", "+ ", "-\t\t    consumeStatementIfWithElse();", "+\t\t    consumeStatementIfWithElse();  ", "-", "+ ", "-\t\t    consumeStatementIfWithElse();", "+\t\t    consumeStatementIfWithElse();  ", "-", "+ ", "-\t\t    consumeStatementSwitch() ;", "+\t\t    consumeStatementSwitch() ;  ", "-", "+ ", "-\t\t    consumeEmptySwitchBlock() ;", "+\t\t    consumeEmptySwitchBlock() ;  ", "-", "+ ", "-\t\t    consumeSwitchBlock() ;", "+\t\t    consumeSwitchBlock() ;  ", "-", "+ ", "-\t\t    consumeSwitchBlockStatements() ;", "+\t\t    consumeSwitchBlockStatements() ;  ", "-", "+ ", "-\t\t    consumeSwitchBlockStatement() ;", "+\t\t    consumeSwitchBlockStatement() ;  ", "-", "+ ", "-\t\t    consumeSwitchLabels() ;", "+\t\t    consumeSwitchLabels() ;  ", "-", "+ ", "-\t\t    consumeCaseLabel();", "+\t\t    consumeCaseLabel();  ", "-", "+ ", "-\t\t    consumeDefaultLabel();", "+\t\t    consumeDefaultLabel();  ", "-", "+ ", "-\t\t    consumeStatementWhile() ;", "+\t\t    consumeStatementWhile() ;  ", "-", "+ ", "-\t\t    consumeStatementWhile() ;", "+\t\t    consumeStatementWhile() ;  ", "-", "+ ", "-\t\t    consumeStatementDo() ;", "+\t\t    consumeStatementDo() ;  ", "-", "+ ", "-\t\t    consumeStatementFor() ;", "+\t\t    consumeStatementFor() ;  ", "-", "+ ", "-\t\t    consumeStatementFor() ;", "+\t\t    consumeStatementFor() ;  ", "-", "+ ", "-\t\t    consumeForInit() ;", "+\t\t    consumeForInit() ;  ", "-", "+ ", "-\t\t    consumeStatementExpressionList() ;", "+\t\t    consumeStatementExpressionList() ;  ", "-", "+ ", "-\t\t    consumeSimpleAssertStatement() ;", "+\t\t    consumeSimpleAssertStatement() ;  ", "-", "+ ", "-\t\t    consumeAssertStatement() ;", "+\t\t    consumeAssertStatement() ;  ", "-", "+ ", "-\t\t    consumeStatementBreak() ;", "+\t\t    consumeStatementBreak() ;  ", "-", "+ ", "-\t\t    consumeStatementBreakWithLabel() ;", "+\t\t    consumeStatementBreakWithLabel() ;  ", "-", "+ ", "-\t\t    consumeStatementContinue() ;", "+\t\t    consumeStatementContinue() ;  ", "-", "+ ", "-\t\t    consumeStatementContinueWithLabel() ;", "+\t\t    consumeStatementContinueWithLabel() ;  ", "-", "+ ", "-\t\t    consumeStatementReturn() ;", "+\t\t    consumeStatementReturn() ;  ", "-", "+ ", "-\t\t    consumeStatementThrow();", "+\t\t    consumeStatementThrow();  ", "-", "+ ", "-\t\t    consumeStatementSynchronized();", "+\t\t    consumeStatementSynchronized();  ", "-", "+ ", "-\t\t    consumeOnlySynchronized();", "+\t\t    consumeOnlySynchronized();  ", "-", "+ ", "-\t\t    consumeStatementTry(false);", "+\t\t    consumeStatementTry(false);  ", "-", "+ ", "-\t\t    consumeStatementTry(true);", "+\t\t    consumeStatementTry(true);  ", "-", "+ ", "-\t\t    consumeExitTryBlock();", "+\t\t    consumeExitTryBlock();  ", "-", "+ ", "-\t\t    consumeCatches();", "+\t\t    consumeCatches();  ", "-", "+ ", "-\t\t    consumeStatementCatch() ;", "+\t\t    consumeStatementCatch() ;  ", "-", "+ ", "-\t\t    consumeLeftParen();", "+\t\t    consumeLeftParen();  ", "-", "+ ", "-\t\t    consumeRightParen();", "+\t\t    consumeRightParen();  ", "-", "+ ", "-\t\t    consumePrimaryNoNewArrayThis();", "+\t\t    consumePrimaryNoNewArrayThis();  ", "-", "+ ", "-\t\t    consumePrimaryNoNewArray();", "+\t\t    consumePrimaryNoNewArray();  ", "-", "+ ", "-\t\t    consumePrimaryNoNewArrayWithName();", "+\t\t    consumePrimaryNoNewArrayWithName();  ", "-", "+ ", "-\t\t    consumePrimaryNoNewArrayNameThis();", "+\t\t    consumePrimaryNoNewArrayNameThis();  ", "-", "+ ", "-\t\t    consumePrimaryNoNewArrayNameSuper();", "+\t\t    consumePrimaryNoNewArrayNameSuper();  ", "-", "+ ", "-\t\t    consumePrimaryNoNewArrayName();", "+\t\t    consumePrimaryNoNewArrayName();  ", "-", "+ ", "-\t\t    consumePrimaryNoNewArrayArrayType();", "+\t\t    consumePrimaryNoNewArrayArrayType();  ", "-", "+ ", "-\t\t    consumePrimaryNoNewArrayPrimitiveArrayType();", "+\t\t    consumePrimaryNoNewArrayPrimitiveArrayType();  ", "-", "+ ", "-\t\t    consumePrimaryNoNewArrayPrimitiveType();", "+\t\t    consumePrimaryNoNewArrayPrimitiveType();  ", "-", "+ ", "-\t\t    consumeAllocationHeader();", "+\t\t    consumeAllocationHeader();  ", "-", "+ ", "-\t\t    consumeClassInstanceCreationExpressionWithTypeArguments();", "+\t\t    consumeClassInstanceCreationExpressionWithTypeArguments();  ", "-", "+ ", "-\t\t    consumeClassInstanceCreationExpression();", "+\t\t    consumeClassInstanceCreationExpression();  ", "-", "+ ", "-\t\t    consumeClassInstanceCreationExpressionQualifiedWithTypeArguments() ;", "+\t\t    consumeClassInstanceCreationExpressionQualifiedWithTypeArguments() ;  ", "-", "+ ", "-\t\t    consumeClassInstanceCreationExpressionQualified() ;", "+\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "-", "+ ", "-\t\t    consumeClassInstanceCreationExpressionQualified() ;", "+\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "-", "+ ", "-\t\t    consumeClassInstanceCreationExpressionQualifiedWithTypeArguments() ;", "+\t\t    consumeClassInstanceCreationExpressionQualifiedWithTypeArguments() ;  ", "-", "+ ", "-\t\t    consumeClassInstanceCreationExpressionName() ;", "+\t\t    consumeClassInstanceCreationExpressionName() ;  ", "-", "-    case 353 : if (DEBUG) { System.out.println(\"ClassBodyopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeClassBodyopt();", "+ ", "+    case 353 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeClassBodyopt();  ", "-", "-    case 355 : if (DEBUG) { System.out.println(\"EnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEnterAnonymousClassBody();", "+ ", "+    case 355 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEnterAnonymousClassBody(false);  ", "-", "-    case 357 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "-\t\t    consumeArgumentList();", "+ ", "+    case 356 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeClassBodyopt();  ", "-", "-    case 358 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayCreationHeader();", "+ ", "+    case 358 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEnterAnonymousClassBody(true);  ", "-", "-    case 359 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayCreationHeader();", "+ ", "+    case 360 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "+\t\t    consumeArgumentList();  ", "-", "-    case 360 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayCreationExpressionWithoutInitializer();", "+ ", "+    case 361 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "+\t\t    consumeArrayCreationHeader();  ", "-", "-    case 361 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayCreationExpressionWithInitializer();", "+ ", "+    case 362 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "+\t\t    consumeArrayCreationHeader();  ", "-", "-    case 362 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayCreationExpressionWithoutInitializer();", "+ ", "+    case 363 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+\t\t    consumeArrayCreationExpressionWithoutInitializer();  ", "-", "-    case 363 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayCreationExpressionWithInitializer();", "+ ", "+    case 364 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "+\t\t    consumeArrayCreationExpressionWithInitializer();  ", "-", "-    case 365 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "-\t\t    consumeDimWithOrWithOutExprs();", "+ ", "+    case 365 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+\t\t    consumeArrayCreationExpressionWithoutInitializer();  ", "-", "-     case 367 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-\t\t    consumeDimWithOrWithOutExpr();", "+ ", "+    case 366 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+\t\t    consumeArrayCreationExpressionWithInitializer();  ", "-", "-     case 368 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "-\t\t    consumeDims();", "+ ", "+    case 368 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "+\t\t    consumeDimWithOrWithOutExprs();  ", "-", "-     case 371 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-\t\t    consumeOneDimLoop();", "+ ", "+     case 370 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+\t\t    consumeDimWithOrWithOutExpr();  ", "-", "-    case 372 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeFieldAccess(false);", "+ ", "+     case 371 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "+\t\t    consumeDims();  ", "-", "-    case 373 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeFieldAccess(true);", "+ ", "+     case 374 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+\t\t    consumeOneDimLoop();  ", "-", "-    case 374 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodInvocationName();", "+ ", "+    case 375 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeFieldAccess(false);  ", "-", "-    case 375 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodInvocationNameWithTypeArguments();", "+ ", "+    case 376 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeFieldAccess(true);  ", "-", "-    case 376 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodInvocationPrimaryWithTypeArguments();", "+ ", "+    case 377 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+\t\t    consumeMethodInvocationName();  ", "-", "-    case 377 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodInvocationPrimary();", "+ ", "+    case 378 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+\t\t    consumeMethodInvocationNameWithTypeArguments();  ", "-", "-    case 378 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodInvocationSuperWithTypeArguments();", "+ ", "+    case 379 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+\t\t    consumeMethodInvocationPrimaryWithTypeArguments();  ", "-", "-    case 379 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodInvocationSuper();", "+ ", "+    case 380 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+\t\t    consumeMethodInvocationPrimary();  ", "-", "-    case 380 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayAccess(true);", "+ ", "+    case 381 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+\t\t    consumeMethodInvocationSuperWithTypeArguments();  ", "-", "-    case 381 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayAccess(false);", "+ ", "+    case 382 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+\t\t    consumeMethodInvocationSuper();  ", "-", "-    case 382 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayAccess(false);", "+ ", "+    case 383 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "+\t\t    consumeArrayAccess(true);  ", "-", "-    case 384 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "-\t\t    consumePostfixExpression();", "+ ", "+    case 384 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "+\t\t    consumeArrayAccess(false);  ", "-", "-    case 387 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.PLUS,true);", "+ ", "+    case 385 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "+\t\t    consumeArrayAccess(false);  ", "-", "-    case 388 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.MINUS,true);", "+ ", "+    case 387 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "+\t\t    consumePostfixExpression();  ", "-", "-    case 389 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "-\t\t    consumePushPosition();", "+ ", "+    case 390 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.PLUS,true);  ", "-", "-    case 392 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.PLUS);", "+ ", "+    case 391 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.MINUS,true);  ", "-", "-    case 393 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.MINUS);", "+ ", "+    case 392 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "+\t\t    consumePushPosition();  ", "-", "-    case 395 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.PLUS,false);", "+ ", "+    case 395 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.PLUS);  ", "-", "-    case 396 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.MINUS,false);", "+ ", "+    case 396 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.MINUS);  ", "-", "-    case 398 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);", "+ ", "+    case 398 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.PLUS,false);  ", "-", "-    case 399 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.NOT);", "+ ", "+    case 399 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.MINUS,false);  ", "-", "-    case 401 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "-\t\t    consumeCastExpressionWithPrimitiveType();", "+ ", "+    case 401 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);  ", "-", "-    case 402 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-\t\t    consumeCastExpressionWithGenericsArray();", "+ ", "+    case 402 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.NOT);  ", "-", "-    case 403 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-\t\t    consumeCastExpressionWithQualifiedGenericsArray();", "+ ", "+    case 404 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "+\t\t    consumeCastExpressionWithPrimitiveType();  ", "-", "-    case 404 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "-\t\t    consumeCastExpressionLL1();", "+ ", "+    case 405 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+\t\t    consumeCastExpressionWithGenericsArray();  ", "-", "-    case 405 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\"); }  //$NON-NLS-1$", "-\t\t    consumeCastExpressionWithNameArray();", "+ ", "+    case 406 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+\t\t    consumeCastExpressionWithQualifiedGenericsArray();  ", "-", "-    case 406 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "-\t\t    consumeOnlyTypeArgumentsForCastExpression();", "+ ", "+    case 407 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "+\t\t    consumeCastExpressionLL1();  ", "-", "-    case 407 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeInsideCastExpression();", "+ ", "+    case 408 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\"); }  //$NON-NLS-1$", "+\t\t    consumeCastExpressionWithNameArray();  ", "-", "-    case 408 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeInsideCastExpressionLL1();", "+ ", "+    case 409 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "+\t\t    consumeOnlyTypeArgumentsForCastExpression();  ", "-", "-    case 409 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeInsideCastExpressionWithQualifiedGenerics();", "+ ", "+    case 410 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeInsideCastExpression();  ", "-", "-    case 411 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);", "+ ", "+    case 411 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeInsideCastExpressionLL1();  ", "-", "-    case 412 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);", "+ ", "+    case 412 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeInsideCastExpressionWithQualifiedGenerics();  ", "-", "-    case 413 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);", "+ ", "+    case 414 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-", "-    case 415 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.PLUS);", "+ ", "+    case 415 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "-", "-    case 416 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MINUS);", "+ ", "+    case 416 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);  ", "-", "-    case 418 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);", "+ ", "+    case 418 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.PLUS);  ", "-", "-    case 419 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);", "+ ", "+    case 419 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.MINUS);  ", "-", "-    case 420 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);", "+ ", "+    case 421 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);  ", "-", "-    case 422 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS);", "+ ", "+    case 422 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  ", "-", "-    case 423 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER);", "+ ", "+    case 423 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "-", "-    case 424 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);", "+ ", "+    case 425 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LESS);  ", "-", "-    case 425 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);", "+ ", "+    case 426 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER);  ", "-", "-    case 427 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "-\t\t    consumeInstanceOfExpression();", "+ ", "+    case 427 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);  ", "-", "-    case 429 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);", "+ ", "+    case 428 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);  ", "-", "-    case 430 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);", "+ ", "+    case 430 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "+\t\t    consumeInstanceOfExpression();  ", "-", "-    case 432 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND);", "+ ", "+    case 432 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  ", "-", "-    case 434 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.XOR);", "+ ", "+    case 433 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);  ", "-", "-    case 436 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR);", "+ ", "+    case 435 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.AND);  ", "-", "-    case 438 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND_AND);", "+ ", "+    case 437 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.XOR);  ", "-", "-    case 440 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR_OR);", "+ ", "+    case 439 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.OR);  ", "-", "-    case 442 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;", "+ ", "+    case 441 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.AND_AND);  ", "-", "-    case 445 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignment();", "+ ", "+    case 443 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.OR_OR);  ", "-", "-    case 447 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "-\t\t    ignoreExpressionAssignment();", "+ ", "+    case 445 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "+\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  ", "-", "-    case 448 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(EQUAL);", "+ ", "+    case 448 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignment();  ", "-", "-    case 449 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(MULTIPLY);", "+ ", "+    case 450 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "+\t\t    ignoreExpressionAssignment(); ", "-", "-    case 450 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(DIVIDE);", "+ ", "+    case 451 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(EQUAL);  ", "-", "-    case 451 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(REMAINDER);", "+ ", "+    case 452 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(MULTIPLY);  ", "-", "-    case 452 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(PLUS);", "+ ", "+    case 453 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(DIVIDE);  ", "-", "-    case 453 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(MINUS);", "+ ", "+    case 454 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(REMAINDER);  ", "-", "-    case 454 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(LEFT_SHIFT);", "+ ", "+    case 455 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(PLUS);  ", "-", "-    case 455 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(RIGHT_SHIFT);", "+ ", "+    case 456 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(MINUS);  ", "-", "-    case 456 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);", "+ ", "+    case 457 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(LEFT_SHIFT);  ", "-", "-    case 457 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(AND);", "+ ", "+    case 458 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(RIGHT_SHIFT);  ", "-", "-    case 458 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(XOR);", "+ ", "+    case 459 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);  ", "-", "-    case 459 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(OR);", "+ ", "+    case 460 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(AND);  ", "-", "-    case 463 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyExpression();", "+ ", "+    case 461 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(XOR);  ", "-", "-    case 468 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyClassBodyDeclarationsopt();", "+ ", "+    case 462 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(OR);  ", "-", "-    case 469 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassBodyDeclarationsopt();", "+ ", "+    case 466 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyExpression();  ", "-", "-     case 470 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeDefaultModifiers();", "+ ", "+    case 471 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyClassBodyDeclarationsopt();  ", "-", "-    case 471 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "-\t\t    consumeModifiers();", "+ ", "+    case 472 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+\t\t    consumeClassBodyDeclarationsopt();  ", "-", "-    case 472 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyBlockStatementsopt();", "+ ", "+     case 473 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeDefaultModifiers();  ", "-", "-     case 474 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyDimsopt();", "+ ", "+    case 474 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "+\t\t    consumeModifiers();  ", "-", "-     case 476 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyArgumentListopt();", "+ ", "+    case 475 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyBlockStatementsopt();  ", "-", "-    case 480 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeFormalParameterListopt();", "+ ", "+     case 477 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyDimsopt();  ", "-", "-     case 484 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyInterfaceMemberDeclarationsopt();", "+ ", "+     case 479 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyArgumentListopt();  ", "-", "-     case 485 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-\t\t    consumeInterfaceMemberDeclarationsopt();", "+ ", "+    case 483 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeFormalParameterListopt();  ", "-", "-    case 486 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeNestedType();", "+ ", "+     case 487 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyInterfaceMemberDeclarationsopt();  ", "-", "-     case 487 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyForInitopt();", "+ ", "+     case 488 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+\t\t    consumeInterfaceMemberDeclarationsopt();  ", "-", "-     case 489 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyForUpdateopt();", "+ ", "+    case 489 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeNestedType();  ", "-     case 493 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyCatchesopt();", "+     case 490 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyForInitopt();  ", "-", "-     case 495 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumDeclaration();", "+ ", "+     case 492 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyForUpdateopt();  ", "-", "-     case 496 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeader();", "+ ", "+     case 496 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyCatchesopt();  ", "-", "-     case 497 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeaderName();", "+ ", "+     case 498 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumDeclaration();  ", "-", "-     case 498 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeaderNameWithTypeParameters();", "+ ", "+     case 499 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeader();  ", "-", "-     case 499 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyNoConstants();", "+ ", "+     case 500 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeaderName();  ", "-", "-     case 500 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyNoConstants();", "+ ", "+     case 501 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeaderNameWithTypeParameters();  ", "-", "-     case 501 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyWithConstants();", "+ ", "+     case 502 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyNoConstants();  ", "-", "-     case 502 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyWithConstants();", "+ ", "+     case 503 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyNoConstants();  ", "-", "-    case 504 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstants();", "+ ", "+     case 504 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyWithConstants();  ", "-", "-    case 505 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantHeaderName();", "+ ", "+     case 505 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyWithConstants();  ", "-", "-    case 506 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantHeader();", "+ ", "+    case 507 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstants();  ", "-", "-    case 507 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantWithClassBody();", "+ ", "+    case 508 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantHeaderName();  ", "-", "-    case 508 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantNoClassBody();", "+ ", "+    case 509 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantHeader();  ", "-", "-    case 509 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeArguments();", "+ ", "+    case 510 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantWithClassBody();  ", "-", "-    case 510 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyArguments();", "+ ", "+    case 511 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantNoClassBody();  ", "-", "-    case 512 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumDeclarations();", "+ ", "+    case 512 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+\t\t    consumeArguments();  ", "-", "-    case 513 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyEnumDeclarations();", "+ ", "+    case 513 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyArguments();  ", "-", "-    case 515 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatement();", "+ ", "+    case 515 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumDeclarations();  ", "-", "-    case 516 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatement();", "+ ", "+    case 516 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyEnumDeclarations();  ", "-", "-    case 517 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeaderInit(false);", "+ ", "+    case 518 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatement();  ", "-", "-    case 518 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeaderInit(true);", "+ ", "+    case 519 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatement();  ", "-", "-    case 519 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeader();", "+ ", "+    case 520 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeaderInit(false);  ", "-", "-    case 520 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeImportDeclaration();", "-\t\t\tbreak;", "-", "-    case 521 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "-\t\t    consumeSingleStaticImportDeclarationName();", "+ ", "+    case 521 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeaderInit(true);  ", "-", "-    case 522 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeImportDeclaration();", "+ ", "+    case 522 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeader();  ", "-", "-    case 523 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "-\t\t    consumeStaticImportOnDemandDeclarationName();", "+ ", "+    case 523 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeImportDeclaration();  ", "-", "-    case 524 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArguments();", "+ ", "+    case 524 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "+\t\t    consumeSingleStaticImportDeclarationName();  ", "-", "-    case 525 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-\t\t    consumeOnlyTypeArguments();", "+ ", "+    case 525 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeImportDeclaration();  ", "-", "-    case 527 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList1();", "+ ", "+    case 526 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "+\t\t    consumeStaticImportOnDemandDeclarationName();  ", "-", "-    case 529 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList();", "+ ", "+    case 527 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArguments();  ", "-", "-    case 530 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgument();", "+ ", "+    case 528 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+\t\t    consumeOnlyTypeArguments();  ", "-", "-    case 534 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType1();", "+ ", "+    case 530 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList1();  ", "-", "-    case 535 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentReferenceType1();", "+ ", "+    case 532 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList();  ", "-", "-    case 537 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList2();", "+ ", "+    case 533 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgument();  ", "-", "-    case 540 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType2();", "+ ", "+    case 537 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType1();  ", "-", "-    case 541 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentReferenceType2();", "+ ", "+    case 538 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentReferenceType1();  ", "-", "-    case 543 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList3();", "+ ", "+    case 540 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList2();  ", "-", "-    case 546 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType3();", "+ ", "+    case 543 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType2();  ", "-", "-    case 547 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard();", "+ ", "+    case 544 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentReferenceType2();  ", "-", "-    case 548 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardWithBounds();", "+ ", "+    case 546 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList3();  ", "-", "-    case 549 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBoundsExtends();", "+ ", "+    case 549 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType3();  ", "-", "-    case 550 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBoundsSuper();", "+ ", "+    case 550 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard();  ", "-", "-    case 551 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard1();", "+ ", "+    case 551 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardWithBounds();  ", "-", "-    case 552 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard1WithBounds();", "+ ", "+    case 552 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBoundsExtends();  ", "-", "-    case 553 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds1Extends();", "+ ", "+    case 553 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBoundsSuper();  ", "-", "-    case 554 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds1Super();", "+ ", "+    case 554 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard1();  ", "-", "-    case 555 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard2();", "+ ", "+    case 555 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard1WithBounds();  ", "-", "-    case 556 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard2WithBounds();", "+ ", "+    case 556 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds1Extends();  ", "-", "-    case 557 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds2Extends();", "+ ", "+    case 557 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds1Super();  ", "-", "-    case 558 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds2Super();", "+ ", "+    case 558 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard2();  ", "-", "-    case 559 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard3();", "+ ", "+    case 559 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard2WithBounds();  ", "-", "-    case 560 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard3WithBounds();", "+ ", "+    case 560 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds2Extends();  ", "-", "-    case 561 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds3Extends();", "+ ", "+    case 561 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds2Super();  ", "-", "-    case 562 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds3Super();", "+ ", "+    case 562 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard3();  ", "-", "-    case 563 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterHeader();", "+ ", "+    case 563 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard3WithBounds();  ", "-", "-    case 564 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameters();", "+ ", "+    case 564 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds3Extends();  ", "-", "-    case 566 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterList();", "+ ", "+    case 565 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds3Super();  ", "-", "-    case 568 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterWithExtends();", "+ ", "+    case 566 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterHeader();  ", "-", "-    case 569 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterWithExtendsAndBounds();", "+ ", "+    case 567 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameters();  ", "-", "-    case 571 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBoundList();", "+ ", "+    case 569 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterList();  ", "-", "-    case 572 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBound();", "+ ", "+    case 571 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterWithExtends();  ", "-", "-    case 574 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterList1();", "+ ", "+    case 572 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterWithExtendsAndBounds();  ", "-", "-    case 575 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1();", "+ ", "+    case 574 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBoundList();  ", "-", "-    case 576 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1WithExtends();", "+ ", "+    case 575 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBound();  ", "-", "-    case 577 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1WithExtendsAndBounds();", "+ ", "+    case 577 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterList1();  ", "-", "-    case 579 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBoundList1();", "+ ", "+    case 578 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1();  ", "-", "-    case 580 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBound1();", "+ ", "+    case 579 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1WithExtends();  ", "-", "-    case 586 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.PLUS);", "+ ", "+    case 580 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1WithExtendsAndBounds();  ", "-", "-    case 587 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.MINUS);", "+ ", "+    case 582 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBoundList1();  ", "-", "-    case 590 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);", "+ ", "+    case 583 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBound1();  ", "-", "-    case 591 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.NOT);", "+ ", "+    case 589 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.PLUS);  ", "-", "-    case 594 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);", "+ ", "+    case 590 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.MINUS);  ", "-", "-    case 595 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.MULTIPLY);", "+ ", "+    case 593 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);  ", "-", "-    case 596 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);", "+ ", "+    case 594 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.NOT);  ", "-", "-    case 597 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.DIVIDE);", "+ ", "+    case 597 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-", "-    case 598 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);", "+ ", "+    case 598 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.MULTIPLY);  ", "-", "-    case 599 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.REMAINDER);", "+ ", "+    case 599 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "-", "-    case 601 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.PLUS);", "+ ", "+    case 600 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.DIVIDE);  ", "-", "-    case 602 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.PLUS);", "+ ", "+    case 601 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);  ", "-", "-    case 603 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MINUS);", "+ ", "+    case 602 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.REMAINDER);  ", "-", "-    case 604 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.MINUS);", "+ ", "+    case 604 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.PLUS);  ", "-", "-    case 606 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);", "+ ", "+    case 605 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.PLUS);  ", "-", "-    case 607 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LEFT_SHIFT);", "+ ", "+    case 606 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.MINUS);  ", "-", "-    case 608 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);", "+ ", "+    case 607 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.MINUS);  ", "-", "-    case 609 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.RIGHT_SHIFT);", "+ ", "+    case 609 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);  ", "-", "-    case 610 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);", "+ ", "+    case 610 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LEFT_SHIFT);  ", "-", "-    case 611 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.UNSIGNED_RIGHT_SHIFT);", "+ ", "+    case 611 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  ", "-", "-    case 613 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS);", "+ ", "+    case 612 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.RIGHT_SHIFT);  ", "-", "-    case 614 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS);", "+ ", "+    case 613 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "-", "-    case 615 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER);", "+ ", "+    case 614 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "-", "-    case 616 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER);", "+ ", "+    case 616 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LESS);  ", "-", "-    case 617 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);", "+ ", "+    case 617 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS);  ", "-", "-    case 618 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS_EQUAL);", "+ ", "+    case 618 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER);  ", "-", "-    case 619 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);", "+ ", "+    case 619 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER);  ", "-", "-    case 620 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER_EQUAL);", "+ ", "+    case 620 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);  ", "-", "-    case 622 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "-\t\t    consumeInstanceOfExpressionWithName();", "+ ", "+    case 621 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS_EQUAL);  ", "-", "-    case 623 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeInstanceOfExpression();", "+ ", "+    case 622 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);  ", "-", "-    case 625 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);", "+ ", "+    case 623 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER_EQUAL);  ", "-", "-    case 626 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpressionWithName(OperatorIds.EQUAL_EQUAL);", "+ ", "+    case 625 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "+\t\t    consumeInstanceOfExpressionWithName();  ", "-", "-    case 627 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);", "+ ", "+    case 626 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeInstanceOfExpression();  ", "-", "-    case 628 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpressionWithName(OperatorIds.NOT_EQUAL);", "+ ", "+    case 628 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  ", "-", "-    case 630 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND);", "+ ", "+    case 629 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpressionWithName(OperatorIds.EQUAL_EQUAL);  ", "-", "-    case 631 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.AND);", "+ ", "+    case 630 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);  ", "-", "-    case 633 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.XOR);", "+ ", "+    case 631 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpressionWithName(OperatorIds.NOT_EQUAL);  ", "-", "-    case 634 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.XOR);", "+ ", "+    case 633 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.AND);  ", "-", "-    case 636 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR);", "+ ", "+    case 634 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.AND);  ", "-", "-    case 637 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.OR);", "+ ", "+    case 636 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.XOR);  ", "-", "-    case 639 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND_AND);", "+ ", "+    case 637 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.XOR);  ", "-", "-    case 640 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.AND_AND);", "+ ", "+    case 639 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.OR);  ", "-", "-    case 642 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR_OR);", "+ ", "+    case 640 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.OR);  ", "-", "-    case 643 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.OR_OR);", "+ ", "+    case 642 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.AND_AND);  ", "-", "-    case 645 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;", "+ ", "+    case 643 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.AND_AND);  ", "-", "-    case 646 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "-\t\t    consumeConditionalExpressionWithName(OperatorIds.QUESTIONCOLON) ;", "+ ", "+    case 645 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.OR_OR);  ", "-", "-    case 650 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeDeclarationHeaderName() ;", "+ ", "+    case 646 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.OR_OR);  ", "-", "-    case 651 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;", "+ ", "+    case 648 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  ", "-", "-    case 652 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;", "+ ", "+    case 649 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "+\t\t    consumeConditionalExpressionWithName(OperatorIds.QUESTIONCOLON) ;  ", "-", "-    case 653 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeDeclarationHeaderName() ;", "+ ", "+    case 653 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+\t\t    consumeAnnotationTypeDeclarationHeaderName() ;  ", "-", "-    case 654 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeDeclarationHeader() ;", "+ ", "+    case 654 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  ", "-", "-    case 655 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeDeclaration() ;", "+ ", "+    case 655 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "+\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  ", "-", "-    case 657 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyAnnotationTypeMemberDeclarationsopt() ;", "+ ", "+    case 656 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "+\t\t    consumeAnnotationTypeDeclarationHeaderName() ;  ", "-", "-    case 658 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeMemberDeclarationsopt() ;", "+ ", "+    case 657 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeAnnotationTypeDeclarationHeader() ;  ", "-", "-    case 660 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeMemberDeclarations() ;", "+ ", "+    case 658 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeAnnotationTypeDeclaration() ;  ", "-", "-    case 661 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodHeaderNameWithTypeParameters(true);", "+ ", "+    case 660 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyAnnotationTypeMemberDeclarationsopt() ;  ", "-", "-    case 662 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodHeaderName(true);", "+ ", "+    case 661 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+\t\t    consumeAnnotationTypeMemberDeclarationsopt() ;  ", "-", "-    case 663 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyMethodHeaderDefaultValue() ;", "+ ", "+    case 663 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeAnnotationTypeMemberDeclarations() ;  ", "-", "-    case 664 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodHeaderDefaultValue();", "+ ", "+    case 664 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "+\t\t    consumeMethodHeaderNameWithTypeParameters(true);  ", "-", "-    case 665 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodHeader();", "+ ", "+    case 665 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+\t\t    consumeMethodHeaderName(true);  ", "-", "-    case 666 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeMemberDeclaration() ;", "+ ", "+    case 666 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyMethodHeaderDefaultValue() ;  ", "-", "-    case 674 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationName() ;", "+ ", "+    case 667 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "+\t\t    consumeMethodHeaderDefaultValue();  ", "-", "-    case 675 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-\t\t    consumeNormalAnnotation() ;", "+ ", "+    case 668 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "+\t\t    consumeMethodHeader();  ", "-", "-    case 676 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyMemberValuePairsopt() ;", "+ ", "+    case 669 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeAnnotationTypeMemberDeclaration() ;  ", "-", "-    case 679 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeMemberValuePairs() ;", "+ ", "+    case 677 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "+\t\t    consumeAnnotationName() ;  ", "-", "-    case 680 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "-\t\t    consumeMemberValuePair() ;", "+ ", "+    case 678 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+\t\t    consumeNormalAnnotation() ;  ", "-", "-    case 681 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEnterMemberValue() ;", "+ ", "+    case 679 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyMemberValuePairsopt() ;  ", "-", "-    case 682 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeExitMemberValue() ;", "+ ", "+    case 682 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeMemberValuePairs() ;  ", "-", "-    case 684 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "-\t\t    consumeMemberValueAsName() ;", "+ ", "+    case 683 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "+\t\t    consumeMemberValuePair() ;  ", "-", "-    case 687 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeMemberValueArrayInitializer() ;", "+ ", "+    case 684 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEnterMemberValue() ;  ", "-", "-    case 688 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeMemberValueArrayInitializer() ;", "+ ", "+    case 685 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeExitMemberValue() ;  ", "-", "-    case 689 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyMemberValueArrayInitializer() ;", "+ ", "+    case 687 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "+\t\t    consumeMemberValueAsName() ;  ", "-", "+ ", "-\t\t    consumeEmptyMemberValueArrayInitializer() ;", "+\t\t    consumeMemberValueArrayInitializer() ;  ", "-", "-    case 691 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEnterMemberValueArrayInitializer() ;", "+ ", "+    case 691 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeMemberValueArrayInitializer() ;  ", "-", "-    case 693 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "-\t\t    consumeMemberValues() ;", "+ ", "+    case 692 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "-", "-    case 694 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "-\t\t    consumeMarkerAnnotation() ;", "+ ", "+    case 693 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "-", "-    case 695 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "-\t\t    consumeSingleMemberAnnotationMemberValue() ;", "+ ", "+    case 694 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEnterMemberValueArrayInitializer() ;  ", "-", "-    case 696 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-\t\t    consumeSingleMemberAnnotation() ;", "+ ", "+    case 696 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "+\t\t    consumeMemberValues() ;  ", "-", "-    case 697 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "-\t\t    consumeRecoveryMethodHeaderNameWithTypeParameters();", "+ ", "+    case 697 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "+\t\t    consumeMarkerAnnotation() ;  ", "-", "-    case 698 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-\t\t    consumeRecoveryMethodHeaderName();", "+ ", "+    case 698 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "+\t\t    consumeSingleMemberAnnotationMemberValue() ;  ", "-", "-    case 699 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodHeader();", "+ ", "+    case 699 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+\t\t    consumeSingleMemberAnnotation() ;  ", "-", "-    case 700 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodHeader();", "+ ", "+    case 700 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "+\t\t    consumeRecoveryMethodHeaderNameWithTypeParameters();  ", "-", "+ ", "+    case 701 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+\t\t    consumeRecoveryMethodHeaderName();  ", "+\t\t\tbreak;", "+ ", "+    case 702 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+\t\t    consumeMethodHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 703 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+\t\t    consumeMethodHeader();  ", "+\t\t\tbreak;", "+ "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "226333642221bb5e822617354f817a28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "6a1671aa7ea88fc01c83297c32d40152115e2623", "commitAfterChange": "fff49fd0bdbee760e61edee27f88554273119578", "methodNumberBeforeChange": 271, "methodNumberAfterChange": 271, "signatureBeforeChange": " protected void consumeRule(int act)", "signatureAfterChange": " protected void consumeRule(int act)", "diff": ["-    case 373 : if (DEBUG) { System.out.println(\"NonWildTypeArgumentsopt ::=\"); }  //$NON-NLS-1$", "+    case 373 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= super COLON_COLON...\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceExpressionSuperForm();  ", "+\t\t\tbreak;", "+ ", "+    case 374 : if (DEBUG) { System.out.println(\"NonWildTypeArgumentsopt ::=\"); }  //$NON-NLS-1$", "-    case 375 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= Identifier\"); }  //$NON-NLS-1$", "+    case 376 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= Identifier\"); }  //$NON-NLS-1$", "-    case 376 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= new\"); }  //$NON-NLS-1$", "+    case 377 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= new\"); }  //$NON-NLS-1$", "-    case 377 : if (DEBUG) { System.out.println(\"LambdaExpression ::= LambdaParameters ARROW LambdaBody\"); }  //$NON-NLS-1$", "+    case 378 : if (DEBUG) { System.out.println(\"LambdaExpression ::= LambdaParameters ARROW LambdaBody\"); }  //$NON-NLS-1$", "-    case 378 : if (DEBUG) { System.out.println(\"LambdaParameters ::= Identifier\"); }  //$NON-NLS-1$", "+    case 379 : if (DEBUG) { System.out.println(\"LambdaParameters ::= Identifier\"); }  //$NON-NLS-1$", "-    case 382 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameterList ::=...\"); }  //$NON-NLS-1$", "+    case 383 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameterList ::=...\"); }  //$NON-NLS-1$", "-    case 383 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameter ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+    case 384 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameter ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-    case 385 : if (DEBUG) { System.out.println(\"LambdaBody ::= NestedType NestedMethod LBRACE...\"); }  //$NON-NLS-1$", "+    case 386 : if (DEBUG) { System.out.println(\"LambdaBody ::= NestedType NestedMethod LBRACE...\"); }  //$NON-NLS-1$", "-    case 386 : if (DEBUG) { System.out.println(\"ElidedLeftBraceAndReturn ::=\"); }  //$NON-NLS-1$", "+    case 387 : if (DEBUG) { System.out.println(\"ElidedLeftBraceAndReturn ::=\"); }  //$NON-NLS-1$", "-    case 387 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "+    case 388 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "-    case 388 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "+    case 389 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "-    case 389 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "+    case 390 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "-    case 390 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+    case 391 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-    case 391 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "-\t\t\tbreak;", "- ", "-    case 392 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "+    case 392 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "+\t\t\tbreak;", "+ ", "+    case 394 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "-    case 394 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "+    case 395 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "-    case 395 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "+    case 396 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "-    case 396 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 397 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 398 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 399 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 399 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 400 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 401 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 402 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 403 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "+    case 404 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "-    case 404 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "+    case 405 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "-    case 405 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "+    case 406 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "-    case 406 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 407 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 407 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "+    case 408 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "-    case 408 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 409 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 409 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 410 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 411 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "+    case 412 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "-     case 413 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 414 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-     case 414 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "+     case 415 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "-     case 417 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 418 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-    case 418 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "+    case 419 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "-    case 419 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "+    case 420 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "-    case 420 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+    case 421 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-    case 421 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 422 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 422 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 423 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 423 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 424 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 424 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 425 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 425 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 426 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 426 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "+    case 427 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "-    case 427 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "+    case 428 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "-    case 428 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "+    case 429 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "-    case 430 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "+    case 431 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "-    case 433 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "+    case 434 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "-    case 434 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "+    case 435 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "-    case 435 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "+    case 436 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "-    case 438 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 439 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 439 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 440 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 441 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 442 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 442 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 443 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 444 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "+    case 445 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "-    case 445 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "+    case 446 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "-    case 447 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "+    case 448 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "-    case 448 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 449 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 449 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 450 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 450 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "+    case 451 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "-    case 451 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\"); }  //$NON-NLS-1$", "+    case 452 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\"); }  //$NON-NLS-1$", "-    case 452 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "+    case 453 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "-    case 453 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "+    case 454 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "-    case 454 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "+    case 455 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "-    case 455 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "+    case 456 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "-    case 457 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "+\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 461 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 462 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 464 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 465 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 466 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 468 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS);  ", "-\t\t\tbreak;", "- ", "-    case 469 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER);  ", "-\t\t\tbreak;", "- ", "-    case 470 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 471 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 473 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "-\t\t    consumeInstanceOfExpression();  ", "-\t\t\tbreak;", "- ", "-    case 475 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 476 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 478 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND);  ", "-\t\t\tbreak;", "- ", "-    case 480 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.XOR);  ", "-\t\t\tbreak;", "- ", "-    case 482 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR);  ", "-\t\t\tbreak;", "- ", "-    case 484 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND_AND);  ", "-\t\t\tbreak;", "- ", "-    case 486 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR_OR);  ", "-\t\t\tbreak;", "- ", "-    case 488 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  ", "-\t\t\tbreak;", "- ", "-    case 491 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignment();  ", "-\t\t\tbreak;", "- ", "-    case 493 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "-\t\t    ignoreExpressionAssignment(); ", "-\t\t\tbreak;", "- ", "-    case 494 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 495 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 496 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(DIVIDE);  ", "-\t\t\tbreak;", "- ", "-    case 497 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 498 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 499 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 500 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 501 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 502 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 503 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(AND);  ", "-\t\t\tbreak;", "- ", "-    case 504 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(XOR);  ", "-\t\t\tbreak;", "- ", "-    case 505 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(OR);  ", "-\t\t\tbreak;", "- ", "-    case 506 : if (DEBUG) { System.out.println(\"Expression ::= AssignmentExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeExpression();  ", "-\t\t\tbreak;", "- ", "-    case 509 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyExpression();  ", "-\t\t\tbreak;", "- ", "-    case 514 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyClassBodyDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-    case 515 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassBodyDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-     case 516 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeDefaultModifiers();  ", "-\t\t\tbreak;", "- ", "-    case 517 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "-\t\t    consumeModifiers();  ", "-\t\t\tbreak;", "- ", "-    case 518 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyBlockStatementsopt();  ", "-\t\t\tbreak;", "- ", "-     case 520 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyDimsopt();  ", "-\t\t\tbreak;", "- ", "-     case 522 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyArgumentListopt();  ", "-\t\t\tbreak;", "- ", "-    case 526 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeFormalParameterListopt();  ", "-\t\t\tbreak;", "- ", "-     case 530 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyInterfaceMemberDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-     case 531 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-\t\t    consumeInterfaceMemberDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-    case 532 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeNestedType();  ", "-\t\t\tbreak;", "-", "-     case 533 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyForInitopt();  ", "-\t\t\tbreak;", "- ", "-     case 535 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyForUpdateopt();  ", "-\t\t\tbreak;", "- ", "-     case 539 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyCatchesopt();  ", "-\t\t\tbreak;", "- ", "-     case 541 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumDeclaration();  ", "-\t\t\tbreak;", "- ", "-     case 542 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeader();  ", "-\t\t\tbreak;", "- ", "-     case 543 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeaderName();  ", "-\t\t\tbreak;", "- ", "-     case 544 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeaderNameWithTypeParameters();  ", "-\t\t\tbreak;", "- ", "-     case 545 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyNoConstants();  ", "-\t\t\tbreak;", "- ", "-     case 546 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyNoConstants();  ", "-\t\t\tbreak;", "- ", "-     case 547 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyWithConstants();  ", "-\t\t\tbreak;", "- ", "-     case 548 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyWithConstants();  ", "-\t\t\tbreak;", "- ", "-    case 550 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstants();  ", "-\t\t\tbreak;", "- ", "-    case 551 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantHeaderName();  ", "-\t\t\tbreak;", "- ", "-    case 552 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantHeader();  ", "-\t\t\tbreak;", "- ", "-    case 553 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantWithClassBody();  ", "-\t\t\tbreak;", "- ", "-    case 554 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantNoClassBody();  ", "-\t\t\tbreak;", "- ", "-    case 555 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 556 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyArguments();  ", "-\t\t\tbreak;", "- ", "-    case 558 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumDeclarations();  ", "-\t\t\tbreak;", "- ", "-    case 559 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyEnumDeclarations();  ", "-\t\t\tbreak;", "- ", "-    case 561 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatement();  ", "-\t\t\tbreak;", "- ", "-    case 562 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatement();  ", "-\t\t\tbreak;", "- ", "-    case 563 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeaderInit(false);  ", "-\t\t\tbreak;", "- ", "-    case 564 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeaderInit(true);  ", "-\t\t\tbreak;", "- ", "-    case 565 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeader();  ", "-\t\t\tbreak;", "- ", "-    case 566 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeImportDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 567 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "-\t\t    consumeSingleStaticImportDeclarationName();  ", "-\t\t\tbreak;", "- ", "-    case 568 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeImportDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 569 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "-\t\t    consumeStaticImportOnDemandDeclarationName();  ", "-\t\t\tbreak;", "- ", "-    case 570 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 571 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-\t\t    consumeOnlyTypeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 573 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList1();  ", "-\t\t\tbreak;", "- ", "-    case 575 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList();  ", "-\t\t\tbreak;", "- ", "-    case 576 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgument();  ", "-\t\t\tbreak;", "- ", "-    case 580 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType1();  ", "-\t\t\tbreak;", "- ", "-    case 581 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentReferenceType1();  ", "-\t\t\tbreak;", "- ", "-    case 583 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList2();  ", "-\t\t\tbreak;", "- ", "-    case 586 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType2();  ", "-\t\t\tbreak;", "- ", "-    case 587 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentReferenceType2();  ", "-\t\t\tbreak;", "- ", "-    case 589 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList3();  ", "-\t\t\tbreak;", "- ", "-    case 592 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType3();  ", "-\t\t\tbreak;", "- ", "-    case 593 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard();  ", "-\t\t\tbreak;", "- ", "-    case 594 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardWithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 595 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBoundsExtends();  ", "-\t\t\tbreak;", "- ", "-    case 596 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBoundsSuper();  ", "-\t\t\tbreak;", "- ", "-    case 597 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard1();  ", "-\t\t\tbreak;", "- ", "-    case 598 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard1WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 599 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds1Extends();  ", "-\t\t\tbreak;", "- ", "-    case 600 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds1Super();  ", "-\t\t\tbreak;", "- ", "-    case 601 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard2();  ", "-\t\t\tbreak;", "- ", "-    case 602 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard2WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 603 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds2Extends();  ", "-\t\t\tbreak;", "- ", "-    case 604 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds2Super();  ", "-\t\t\tbreak;", "- ", "-    case 605 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard3();  ", "-\t\t\tbreak;", "- ", "-    case 606 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard3WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 607 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds3Extends();  ", "-\t\t\tbreak;", "- ", "-    case 608 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds3Super();  ", "-\t\t\tbreak;", "- ", "-    case 609 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterHeader();  ", "-\t\t\tbreak;", "- ", "-    case 610 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameters();  ", "-\t\t\tbreak;", "- ", "-    case 612 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterList();  ", "-\t\t\tbreak;", "- ", "-    case 614 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterWithExtends();  ", "-\t\t\tbreak;", "- ", "-    case 615 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterWithExtendsAndBounds();  ", "-\t\t\tbreak;", "- ", "-    case 617 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBoundList();  ", "-\t\t\tbreak;", "- ", "-    case 618 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBound();  ", "-\t\t\tbreak;", "- ", "-    case 620 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterList1();  ", "-\t\t\tbreak;", "- ", "-    case 621 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1();  ", "-\t\t\tbreak;", "- ", "-    case 622 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1WithExtends();  ", "-\t\t\tbreak;", "- ", "-    case 623 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1WithExtendsAndBounds();  ", "-\t\t\tbreak;", "- ", "-    case 625 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBoundList1();  ", "-\t\t\tbreak;", "- ", "-    case 626 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBound1();  ", "-\t\t\tbreak;", "- ", "-    case 632 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 633 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 636 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);  ", "-\t\t\tbreak;", "- ", "-    case 637 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.NOT);  ", "-\t\t\tbreak;", "- ", "-    case 640 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 641 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 642 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 643 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.DIVIDE);  ", "-\t\t\tbreak;", "- ", "-    case 644 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 460 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-    case 645 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 647 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 462 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "-    case 648 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 649 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 463 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "-    case 650 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 652 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 465 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 653 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 654 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 466 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 655 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 656 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 467 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 657 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 659 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 469 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "-    case 660 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS);  ", "-\t\t\tbreak;", "- ", "-    case 661 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 470 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "-    case 662 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER);  ", "-\t\t\tbreak;", "- ", "-    case 663 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 471 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "-    case 664 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 665 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 472 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "-    case 666 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 668 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "-\t\t    consumeInstanceOfExpressionWithName();  ", "-\t\t\tbreak;", "- ", "-    case 669 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 474 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "-    case 671 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 476 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-    case 672 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpressionWithName(OperatorIds.EQUAL_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 673 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 477 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "-    case 674 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpressionWithName(OperatorIds.NOT_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 676 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "+    case 479 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "-    case 677 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.AND);  ", "-\t\t\tbreak;", "- ", "-    case 679 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 481 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "-    case 680 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.XOR);  ", "-\t\t\tbreak;", "- ", "-    case 682 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 483 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "-    case 683 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.OR);  ", "-\t\t\tbreak;", "- ", "-    case 685 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 485 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "-    case 686 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.AND_AND);  ", "-\t\t\tbreak;", "- ", "-    case 688 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 487 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 689 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.OR_OR);  ", "-\t\t\tbreak;", "- ", "-    case 691 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 489 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 692 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "+    case 492 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignment();  ", "+\t\t\tbreak;", "+ ", "+    case 494 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "+\t\t    ignoreExpressionAssignment(); ", "+\t\t\tbreak;", "+ ", "+    case 495 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 496 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(MULTIPLY);  ", "+\t\t\tbreak;", "+ ", "+    case 497 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(DIVIDE);  ", "+\t\t\tbreak;", "+ ", "+    case 498 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(REMAINDER);  ", "+\t\t\tbreak;", "+ ", "+    case 499 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 500 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 501 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(LEFT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 502 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 503 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 504 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(AND);  ", "+\t\t\tbreak;", "+ ", "+    case 505 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(XOR);  ", "+\t\t\tbreak;", "+ ", "+    case 506 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(OR);  ", "+\t\t\tbreak;", "+ ", "+    case 507 : if (DEBUG) { System.out.println(\"Expression ::= AssignmentExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 510 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 515 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyClassBodyDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+    case 516 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+\t\t    consumeClassBodyDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 517 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeDefaultModifiers();  ", "+\t\t\tbreak;", "+ ", "+    case 518 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "+\t\t    consumeModifiers();  ", "+\t\t\tbreak;", "+ ", "+    case 519 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyBlockStatementsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 521 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyDimsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 523 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyArgumentListopt();  ", "+\t\t\tbreak;", "+ ", "+    case 527 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeFormalParameterListopt();  ", "+\t\t\tbreak;", "+ ", "+     case 531 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyInterfaceMemberDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 532 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+\t\t    consumeInterfaceMemberDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+    case 533 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeNestedType();  ", "+\t\t\tbreak;", "+", "+     case 534 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyForInitopt();  ", "+\t\t\tbreak;", "+ ", "+     case 536 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyForUpdateopt();  ", "+\t\t\tbreak;", "+ ", "+     case 540 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyCatchesopt();  ", "+\t\t\tbreak;", "+ ", "+     case 542 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumDeclaration();  ", "+\t\t\tbreak;", "+ ", "+     case 543 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeader();  ", "+\t\t\tbreak;", "+ ", "+     case 544 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeaderName();  ", "+\t\t\tbreak;", "+ ", "+     case 545 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeaderNameWithTypeParameters();  ", "+\t\t\tbreak;", "+ ", "+     case 546 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyNoConstants();  ", "+\t\t\tbreak;", "+ ", "+     case 547 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyNoConstants();  ", "+\t\t\tbreak;", "+ ", "+     case 548 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyWithConstants();  ", "+\t\t\tbreak;", "+ ", "+     case 549 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyWithConstants();  ", "+\t\t\tbreak;", "+ ", "+    case 551 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstants();  ", "+\t\t\tbreak;", "+ ", "+    case 552 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantHeaderName();  ", "+\t\t\tbreak;", "+ ", "+    case 553 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 554 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantWithClassBody();  ", "+\t\t\tbreak;", "+ ", "+    case 555 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantNoClassBody();  ", "+\t\t\tbreak;", "+ ", "+    case 556 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+\t\t    consumeArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 557 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 559 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumDeclarations();  ", "+\t\t\tbreak;", "+ ", "+    case 560 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyEnumDeclarations();  ", "+\t\t\tbreak;", "+ ", "+    case 562 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatement();  ", "+\t\t\tbreak;", "+ ", "+    case 563 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatement();  ", "+\t\t\tbreak;", "+ ", "+    case 564 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeaderInit(false);  ", "+\t\t\tbreak;", "+ ", "+    case 565 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeaderInit(true);  ", "+\t\t\tbreak;", "+ ", "+    case 566 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 567 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeImportDeclaration();  ", "+\t\t\tbreak;", "+ ", "+    case 568 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "+\t\t    consumeSingleStaticImportDeclarationName();  ", "+\t\t\tbreak;", "+ ", "+    case 569 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeImportDeclaration();  ", "+\t\t\tbreak;", "+ ", "+    case 570 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "+\t\t    consumeStaticImportOnDemandDeclarationName();  ", "+\t\t\tbreak;", "+ ", "+    case 571 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 572 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+\t\t    consumeOnlyTypeArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 574 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList1();  ", "+\t\t\tbreak;", "+ ", "+    case 576 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList();  ", "+\t\t\tbreak;", "+ ", "+    case 577 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgument();  ", "+\t\t\tbreak;", "+ ", "+    case 581 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType1();  ", "+\t\t\tbreak;", "+ ", "+    case 582 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentReferenceType1();  ", "+\t\t\tbreak;", "+ ", "+    case 584 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList2();  ", "+\t\t\tbreak;", "+ ", "+    case 587 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType2();  ", "+\t\t\tbreak;", "+ ", "+    case 588 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentReferenceType2();  ", "+\t\t\tbreak;", "+ ", "+    case 590 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList3();  ", "+\t\t\tbreak;", "+ ", "+    case 593 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType3();  ", "+\t\t\tbreak;", "+ ", "+    case 594 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard();  ", "+\t\t\tbreak;", "+ ", "+    case 595 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardWithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 596 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBoundsExtends();  ", "+\t\t\tbreak;", "+ ", "+    case 597 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBoundsSuper();  ", "+\t\t\tbreak;", "+ ", "+    case 598 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard1();  ", "+\t\t\tbreak;", "+ ", "+    case 599 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard1WithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 600 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds1Extends();  ", "+\t\t\tbreak;", "+ ", "+    case 601 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds1Super();  ", "+\t\t\tbreak;", "+ ", "+    case 602 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard2();  ", "+\t\t\tbreak;", "+ ", "+    case 603 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard2WithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 604 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds2Extends();  ", "+\t\t\tbreak;", "+ ", "+    case 605 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds2Super();  ", "+\t\t\tbreak;", "+ ", "+    case 606 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard3();  ", "+\t\t\tbreak;", "+ ", "+    case 607 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard3WithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 608 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds3Extends();  ", "+\t\t\tbreak;", "+ ", "+    case 609 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds3Super();  ", "+\t\t\tbreak;", "+ ", "+    case 610 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 611 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameters();  ", "+\t\t\tbreak;", "+ ", "+    case 613 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterList();  ", "+\t\t\tbreak;", "+ ", "+    case 615 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterWithExtends();  ", "+\t\t\tbreak;", "+ ", "+    case 616 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterWithExtendsAndBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 618 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBoundList();  ", "+\t\t\tbreak;", "+ ", "+    case 619 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBound();  ", "+\t\t\tbreak;", "+ ", "+    case 621 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterList1();  ", "+\t\t\tbreak;", "+ ", "+    case 622 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1();  ", "+\t\t\tbreak;", "+ ", "+    case 623 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1WithExtends();  ", "+\t\t\tbreak;", "+ ", "+    case 624 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1WithExtendsAndBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 626 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBoundList1();  ", "+\t\t\tbreak;", "+ ", "+    case 627 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBound1();  ", "+\t\t\tbreak;", "+ ", "+    case 633 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 634 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 637 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);  ", "+\t\t\tbreak;", "+ ", "+    case 638 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.NOT);  ", "+\t\t\tbreak;", "+ ", "+    case 641 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "+\t\t\tbreak;", "+ ", "+    case 642 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.MULTIPLY);  ", "+\t\t\tbreak;", "+ ", "+    case 643 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "+\t\t\tbreak;", "+ ", "+    case 644 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.DIVIDE);  ", "+\t\t\tbreak;", "+ ", "+    case 645 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);  ", "+\t\t\tbreak;", "+ ", "+    case 646 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.REMAINDER);  ", "+\t\t\tbreak;", "+ ", "+    case 648 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 649 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 650 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 651 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 653 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 654 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LEFT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 655 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 656 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 657 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 658 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 660 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LESS);  ", "+\t\t\tbreak;", "+ ", "+    case 661 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS);  ", "+\t\t\tbreak;", "+ ", "+    case 662 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER);  ", "+\t\t\tbreak;", "+ ", "+    case 663 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER);  ", "+\t\t\tbreak;", "+ ", "+    case 664 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 665 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 666 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 667 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 669 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "+\t\t    consumeInstanceOfExpressionWithName();  ", "+\t\t\tbreak;", "+ ", "+    case 670 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeInstanceOfExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 672 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 673 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpressionWithName(OperatorIds.EQUAL_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 674 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 675 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpressionWithName(OperatorIds.NOT_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 677 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.AND);  ", "+\t\t\tbreak;", "+ ", "+    case 678 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.AND);  ", "+\t\t\tbreak;", "+ ", "+    case 680 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.XOR);  ", "+\t\t\tbreak;", "+ ", "+    case 681 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.XOR);  ", "+\t\t\tbreak;", "+ ", "+    case 683 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.OR);  ", "+\t\t\tbreak;", "+ ", "+    case 684 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.OR);  ", "+\t\t\tbreak;", "+ ", "+    case 686 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.AND_AND);  ", "+\t\t\tbreak;", "+ ", "+    case 687 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.AND_AND);  ", "+\t\t\tbreak;", "+ ", "+    case 689 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.OR_OR);  ", "+\t\t\tbreak;", "+ ", "+    case 690 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.OR_OR);  ", "+\t\t\tbreak;", "+ ", "+    case 692 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  ", "+\t\t\tbreak;", "+ ", "+    case 693 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "-    case 696 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+    case 697 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-    case 697 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  ", "-\t\t\tbreak;", "- ", "-    case 698 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "+    case 698 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  ", "+\t\t\tbreak;", "+ ", "+    case 700 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "-    case 700 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "+    case 701 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "-    case 701 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 702 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 703 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 704 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 704 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+    case 705 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-    case 706 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "+    case 707 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "-    case 707 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "+    case 708 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "-    case 708 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 709 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 709 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "+    case 710 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "-    case 710 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "+    case 711 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "-    case 711 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 712 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 712 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 713 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 720 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "+    case 721 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "-    case 721 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 722 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 722 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "+    case 723 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "-    case 725 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "+    case 726 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "-    case 726 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "+    case 727 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "-    case 727 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 728 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 728 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 729 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 730 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "+    case 731 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "-\t\t\tbreak;", "- ", "-    case 733 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeMemberValueArrayInitializer() ;  ", "-\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "+\t\t    consumeMemberValueArrayInitializer() ;  ", "-    case 737 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "+    case 737 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "+\t\t\tbreak;", "+ ", "+    case 738 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "-    case 739 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "+    case 740 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "-    case 740 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "+    case 741 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "-    case 741 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "+    case 742 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "-    case 742 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 743 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 743 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "+    case 744 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "-    case 744 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 745 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 745 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 746 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 746 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 747 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "576945d61bfbc8e5fa93b67670b6e977", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "4aad5ecac35ca209670b9451440a1afdf2df9be9", "commitAfterChange": "8b5de8ec91e61f4a356d85095c8fc08ae222fe3a", "methodNumberBeforeChange": 271, "methodNumberAfterChange": 271, "signatureBeforeChange": " protected void consumeRule(int act)", "signatureAfterChange": "\r protected void consumeRule(int act)", "diff": ["-// This method is part of an automatic generation : do NOT edit-modify", "-protected void consumeRule(int act) {", "-  switch ( act ) {", "-    case 30 : if (DEBUG) { System.out.println(\"Type ::= PrimitiveType\"); }  //$NON-NLS-1$", "-\t\t    consumePrimitiveType();  ", "-\t\t\tbreak;", "- ", "-    case 44 : if (DEBUG) { System.out.println(\"ReferenceType ::= ClassOrInterfaceType\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType();  ", "-\t\t\tbreak;", "- ", "-    case 48 : if (DEBUG) { System.out.println(\"ClassOrInterface ::= Name\"); }  //$NON-NLS-1$", "-\t\t    consumeClassOrInterfaceName();  ", "-\t\t\tbreak;", "- ", "-    case 49 : if (DEBUG) { System.out.println(\"ClassOrInterface ::= GenericType DOT Name\"); }  //$NON-NLS-1$", "-\t\t    consumeClassOrInterface();  ", "-\t\t\tbreak;", "- ", "-    case 50 : if (DEBUG) { System.out.println(\"GenericType ::= ClassOrInterface TypeArguments\"); }  //$NON-NLS-1$", "-\t\t    consumeGenericType();  ", "-\t\t\tbreak;", "- ", "-    case 51 : if (DEBUG) { System.out.println(\"GenericType ::= ClassOrInterface LESS GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeGenericTypeWithDiamond();  ", "-\t\t\tbreak;", "- ", "-    case 52 : if (DEBUG) { System.out.println(\"ArrayTypeWithTypeArgumentsName ::= GenericType DOT Name\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayTypeWithTypeArgumentsName();  ", "-\t\t\tbreak;", "- ", "-    case 53 : if (DEBUG) { System.out.println(\"ArrayType ::= PrimitiveType Dims\"); }  //$NON-NLS-1$", "-\t\t    consumePrimitiveArrayType();  ", "-\t\t\tbreak;", "- ", "-    case 54 : if (DEBUG) { System.out.println(\"ArrayType ::= Name Dims\"); }  //$NON-NLS-1$", "-\t\t    consumeNameArrayType();  ", "-\t\t\tbreak;", "- ", "-    case 55 : if (DEBUG) { System.out.println(\"ArrayType ::= ArrayTypeWithTypeArgumentsName Dims\"); }  //$NON-NLS-1$", "-\t\t    consumeGenericTypeNameArrayType();  ", "-\t\t\tbreak;", "- ", "-    case 56 : if (DEBUG) { System.out.println(\"ArrayType ::= GenericType Dims\"); }  //$NON-NLS-1$", "-\t\t    consumeGenericTypeArrayType();  ", "-\t\t\tbreak;", "- ", "-    case 61 : if (DEBUG) { System.out.println(\"QualifiedName ::= Name DOT SimpleName\"); }  //$NON-NLS-1$", "-\t\t    consumeQualifiedName();  ", "-\t\t\tbreak;", "- ", "-    case 62 : if (DEBUG) { System.out.println(\"CompilationUnit ::= EnterCompilationUnit...\"); }  //$NON-NLS-1$", "-\t\t    consumeCompilationUnit();  ", "-\t\t\tbreak;", "- ", "-    case 63 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= PackageDeclaration\"); }  //$NON-NLS-1$", "-\t\t    consumeInternalCompilationUnit();  ", "-\t\t\tbreak;", "- ", "-    case 64 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= PackageDeclaration...\"); }  //$NON-NLS-1$", "-\t\t    consumeInternalCompilationUnit();  ", "-\t\t\tbreak;", "- ", "-    case 65 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= PackageDeclaration...\"); }  //$NON-NLS-1$", "-\t\t    consumeInternalCompilationUnitWithTypes();  ", "-\t\t\tbreak;", "- ", "-    case 66 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= PackageDeclaration...\"); }  //$NON-NLS-1$", "-\t\t    consumeInternalCompilationUnitWithTypes();  ", "-\t\t\tbreak;", "- ", "-    case 67 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= ImportDeclarations...\"); }  //$NON-NLS-1$", "-\t\t    consumeInternalCompilationUnit();  ", "-\t\t\tbreak;", "- ", "-    case 68 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= TypeDeclarations\"); }  //$NON-NLS-1$", "-\t\t    consumeInternalCompilationUnitWithTypes();  ", "-\t\t\tbreak;", "- ", "-    case 69 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= ImportDeclarations...\"); }  //$NON-NLS-1$", "-\t\t    consumeInternalCompilationUnitWithTypes();  ", "-\t\t\tbreak;", "- ", "-    case 70 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyInternalCompilationUnit();  ", "-\t\t\tbreak;", "- ", "-    case 71 : if (DEBUG) { System.out.println(\"ReduceImports ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeReduceImports();  ", "-\t\t\tbreak;", "- ", "-    case 72 : if (DEBUG) { System.out.println(\"EnterCompilationUnit ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEnterCompilationUnit();  ", "-\t\t\tbreak;", "- ", "-    case 88 : if (DEBUG) { System.out.println(\"CatchHeader ::= catch LPAREN CatchFormalParameter RPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeCatchHeader();  ", "-\t\t\tbreak;", "- ", "-    case 90 : if (DEBUG) { System.out.println(\"ImportDeclarations ::= ImportDeclarations...\"); }  //$NON-NLS-1$", "-\t\t    consumeImportDeclarations();  ", "-\t\t\tbreak;", "- ", "-    case 92 : if (DEBUG) { System.out.println(\"TypeDeclarations ::= TypeDeclarations TypeDeclaration\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeDeclarations();  ", "-\t\t\tbreak;", "- ", "-    case 93 : if (DEBUG) { System.out.println(\"PackageDeclaration ::= PackageDeclarationName SEMICOLON\"); }  //$NON-NLS-1$", "-\t\t    consumePackageDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 94 : if (DEBUG) { System.out.println(\"PackageDeclarationName ::= Modifiers package...\"); }  //$NON-NLS-1$", "-\t\t    consumePackageDeclarationNameWithModifiers();  ", "-\t\t\tbreak;", "- ", "-    case 95 : if (DEBUG) { System.out.println(\"PackageDeclarationName ::= PackageComment package Name\"); }  //$NON-NLS-1$", "-\t\t    consumePackageDeclarationName();  ", "-\t\t\tbreak;", "- ", "-    case 96 : if (DEBUG) { System.out.println(\"PackageComment ::=\"); }  //$NON-NLS-1$", "-\t\t    consumePackageComment();  ", "-\t\t\tbreak;", "- ", "-    case 101 : if (DEBUG) { System.out.println(\"SingleTypeImportDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeImportDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 102 : if (DEBUG) { System.out.println(\"SingleTypeImportDeclarationName ::= import Name\"); }  //$NON-NLS-1$", "-\t\t    consumeSingleTypeImportDeclarationName();  ", "-\t\t\tbreak;", "- ", "-    case 103 : if (DEBUG) { System.out.println(\"TypeImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeImportDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 104 : if (DEBUG) { System.out.println(\"TypeImportOnDemandDeclarationName ::= import Name DOT...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeImportOnDemandDeclarationName();  ", "-\t\t\tbreak;", "- ", "-     case 107 : if (DEBUG) { System.out.println(\"TypeDeclaration ::= SEMICOLON\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyTypeDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 111 : if (DEBUG) { System.out.println(\"Modifiers ::= Modifiers Modifier\"); }  //$NON-NLS-1$", "-\t\t    consumeModifiers2();  ", "-\t\t\tbreak;", "- ", "-    case 123 : if (DEBUG) { System.out.println(\"Modifier ::= Annotation\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationAsModifier();  ", "-\t\t\tbreak;", "- ", "-    case 124 : if (DEBUG) { System.out.println(\"ClassDeclaration ::= ClassHeader ClassBody\"); }  //$NON-NLS-1$", "-\t\t    consumeClassDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 125 : if (DEBUG) { System.out.println(\"ClassHeader ::= ClassHeaderName ClassHeaderExtendsopt...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassHeader();  ", "-\t\t\tbreak;", "- ", "-    case 126 : if (DEBUG) { System.out.println(\"ClassHeaderName ::= ClassHeaderName1 TypeParameters\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeHeaderNameWithTypeParameters();  ", "-\t\t\tbreak;", "- ", "-    case 128 : if (DEBUG) { System.out.println(\"ClassHeaderName1 ::= Modifiersopt class Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeClassHeaderName1();  ", "-\t\t\tbreak;", "- ", "-    case 129 : if (DEBUG) { System.out.println(\"ClassHeaderExtends ::= extends ClassType\"); }  //$NON-NLS-1$", "-\t\t    consumeClassHeaderExtends();  ", "-\t\t\tbreak;", "- ", "-    case 130 : if (DEBUG) { System.out.println(\"ClassHeaderImplements ::= implements InterfaceTypeList\"); }  //$NON-NLS-1$", "-\t\t    consumeClassHeaderImplements();  ", "-\t\t\tbreak;", "- ", "-    case 132 : if (DEBUG) { System.out.println(\"InterfaceTypeList ::= InterfaceTypeList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeInterfaceTypeList();  ", "-\t\t\tbreak;", "- ", "-    case 133 : if (DEBUG) { System.out.println(\"InterfaceType ::= ClassOrInterfaceType\"); }  //$NON-NLS-1$", "-\t\t    consumeInterfaceType();  ", "-\t\t\tbreak;", "- ", "-    case 136 : if (DEBUG) { System.out.println(\"ClassBodyDeclarations ::= ClassBodyDeclarations...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassBodyDeclarations();  ", "-\t\t\tbreak;", "- ", "-    case 140 : if (DEBUG) { System.out.println(\"ClassBodyDeclaration ::= Diet NestedMethod...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassBodyDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 141 : if (DEBUG) { System.out.println(\"Diet ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeDiet();  ", "-\t\t\tbreak;", "-", "-    case 142 : if (DEBUG) { System.out.println(\"Initializer ::= Diet NestedMethod CreateInitializer...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassBodyDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 143 : if (DEBUG) { System.out.println(\"CreateInitializer ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeCreateInitializer();  ", "-\t\t\tbreak;", "-", "-    case 150 : if (DEBUG) { System.out.println(\"ClassMemberDeclaration ::= SEMICOLON\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyTypeDeclaration();  ", "-\t\t\tbreak;", "-", "-    case 153 : if (DEBUG) { System.out.println(\"FieldDeclaration ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-\t\t    consumeFieldDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 155 : if (DEBUG) { System.out.println(\"VariableDeclarators ::= VariableDeclarators COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeVariableDeclarators();  ", "-\t\t\tbreak;", "- ", "-    case 158 : if (DEBUG) { System.out.println(\"EnterVariable ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEnterVariable();  ", "-\t\t\tbreak;", "- ", "-    case 159 : if (DEBUG) { System.out.println(\"ExitVariableWithInitialization ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeExitVariableWithInitialization();  ", "-\t\t\tbreak;", "- ", "-    case 160 : if (DEBUG) { System.out.println(\"ExitVariableWithoutInitialization ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeExitVariableWithoutInitialization();  ", "-\t\t\tbreak;", "- ", "-    case 161 : if (DEBUG) { System.out.println(\"ForceNoDiet ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeForceNoDiet();  ", "-\t\t\tbreak;", "- ", "-    case 162 : if (DEBUG) { System.out.println(\"RestoreDiet ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeRestoreDiet();  ", "-\t\t\tbreak;", "- ", "-    case 167 : if (DEBUG) { System.out.println(\"MethodDeclaration ::= MethodHeader MethodBody\"); }  //$NON-NLS-1$", "-\t\t    // set to true to consume a method with a body", "- consumeMethodDeclaration(true);  ", "-\t\t\tbreak;", "- ", "-    case 168 : if (DEBUG) { System.out.println(\"AbstractMethodDeclaration ::= MethodHeader SEMICOLON\"); }  //$NON-NLS-1$", "-\t\t    // set to false to consume a method without body", "- consumeMethodDeclaration(false);  ", "-\t\t\tbreak;", "- ", "-    case 169 : if (DEBUG) { System.out.println(\"MethodHeader ::= MethodHeaderName FormalParameterListopt\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodHeader();  ", "-\t\t\tbreak;", "- ", "-    case 170 : if (DEBUG) { System.out.println(\"MethodHeaderName ::= Modifiersopt TypeParameters Type...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodHeaderNameWithTypeParameters(false);  ", "-\t\t\tbreak;", "- ", "-    case 171 : if (DEBUG) { System.out.println(\"MethodHeaderName ::= Modifiersopt Type Identifier LPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodHeaderName(false);  ", "-\t\t\tbreak;", "- ", "-    case 172 : if (DEBUG) { System.out.println(\"MethodHeaderRightParen ::= RPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodHeaderRightParen();  ", "-\t\t\tbreak;", "- ", "-    case 173 : if (DEBUG) { System.out.println(\"MethodHeaderExtendedDims ::= Dimsopt\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodHeaderExtendedDims();  ", "-\t\t\tbreak;", "- ", "-    case 174 : if (DEBUG) { System.out.println(\"MethodHeaderThrowsClause ::= throws ClassTypeList\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodHeaderThrowsClause();  ", "-\t\t\tbreak;", "- ", "-    case 175 : if (DEBUG) { System.out.println(\"ConstructorHeader ::= ConstructorHeaderName...\"); }  //$NON-NLS-1$", "-\t\t    consumeConstructorHeader();  ", "-\t\t\tbreak;", "- ", "-    case 176 : if (DEBUG) { System.out.println(\"ConstructorHeaderName ::= Modifiersopt TypeParameters...\"); }  //$NON-NLS-1$", "-\t\t    consumeConstructorHeaderNameWithTypeParameters();  ", "-\t\t\tbreak;", "- ", "-    case 177 : if (DEBUG) { System.out.println(\"ConstructorHeaderName ::= Modifiersopt Identifier LPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeConstructorHeaderName();  ", "-\t\t\tbreak;", "- ", "-    case 179 : if (DEBUG) { System.out.println(\"FormalParameterList ::= FormalParameterList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeFormalParameterList();  ", "-\t\t\tbreak;", "- ", "-    case 180 : if (DEBUG) { System.out.println(\"FormalParameter ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-\t\t    consumeFormalParameter(false);  ", "-\t\t\tbreak;", "- ", "-    case 181 : if (DEBUG) { System.out.println(\"FormalParameter ::= Modifiersopt Type ELLIPSIS...\"); }  //$NON-NLS-1$", "-\t\t    consumeFormalParameter(true);  ", "-\t\t\tbreak;", "- ", "-    case 182 : if (DEBUG) { System.out.println(\"CatchFormalParameter ::= Modifiersopt CatchType...\"); }  //$NON-NLS-1$", "-\t\t    consumeCatchFormalParameter();  ", "-\t\t\tbreak;", "- ", "-    case 183 : if (DEBUG) { System.out.println(\"CatchType ::= UnionType\"); }  //$NON-NLS-1$", "-\t\t    consumeCatchType();  ", "-\t\t\tbreak;", "- ", "-    case 184 : if (DEBUG) { System.out.println(\"UnionType ::= Type\"); }  //$NON-NLS-1$", "-\t\t    consumeUnionTypeAsClassType();  ", "-\t\t\tbreak;", "- ", "-    case 185 : if (DEBUG) { System.out.println(\"UnionType ::= UnionType OR Type\"); }  //$NON-NLS-1$", "-\t\t    consumeUnionType();  ", "-\t\t\tbreak;", "- ", "-    case 187 : if (DEBUG) { System.out.println(\"ClassTypeList ::= ClassTypeList COMMA ClassTypeElt\"); }  //$NON-NLS-1$", "-\t\t    consumeClassTypeList();  ", "-\t\t\tbreak;", "- ", "-    case 188 : if (DEBUG) { System.out.println(\"ClassTypeElt ::= ClassType\"); }  //$NON-NLS-1$", "-\t\t    consumeClassTypeElt();  ", "-\t\t\tbreak;", "- ", "-    case 189 : if (DEBUG) { System.out.println(\"MethodBody ::= NestedMethod LBRACE BlockStatementsopt...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodBody();  ", "-\t\t\tbreak;", "- ", "-    case 190 : if (DEBUG) { System.out.println(\"NestedMethod ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeNestedMethod();  ", "-\t\t\tbreak;", "- ", "-    case 191 : if (DEBUG) { System.out.println(\"StaticInitializer ::= StaticOnly Block\"); }  //$NON-NLS-1$", "-\t\t    consumeStaticInitializer();  ", "-\t\t\tbreak;", "-", "-    case 192 : if (DEBUG) { System.out.println(\"StaticOnly ::= static\"); }  //$NON-NLS-1$", "-\t\t    consumeStaticOnly();  ", "-\t\t\tbreak;", "- ", "-    case 193 : if (DEBUG) { System.out.println(\"ConstructorDeclaration ::= ConstructorHeader MethodBody\"); }  //$NON-NLS-1$", "-\t\t    consumeConstructorDeclaration() ;  ", "-\t\t\tbreak;", "- ", "-    case 194 : if (DEBUG) { System.out.println(\"ConstructorDeclaration ::= ConstructorHeader SEMICOLON\"); }  //$NON-NLS-1$", "-\t\t    consumeInvalidConstructorDeclaration() ;  ", "-\t\t\tbreak;", "- ", "-    case 195 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= this LPAREN...\"); }  //$NON-NLS-1$", "-\t\t    consumeExplicitConstructorInvocation(0, THIS_CALL);  ", "-\t\t\tbreak;", "- ", "-    case 196 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= OnlyTypeArguments this\"); }  //$NON-NLS-1$", "-\t\t    consumeExplicitConstructorInvocationWithTypeArguments(0,THIS_CALL);  ", "-\t\t\tbreak;", "- ", "-    case 197 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= super LPAREN...\"); }  //$NON-NLS-1$", "-\t\t    consumeExplicitConstructorInvocation(0,SUPER_CALL);  ", "-\t\t\tbreak;", "- ", "-    case 198 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-\t\t    consumeExplicitConstructorInvocationWithTypeArguments(0,SUPER_CALL);  ", "-\t\t\tbreak;", "- ", "-    case 199 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT super...\"); }  //$NON-NLS-1$", "-\t\t    consumeExplicitConstructorInvocation(1, SUPER_CALL);  ", "-\t\t\tbreak;", "- ", "-    case 200 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT...\"); }  //$NON-NLS-1$", "-\t\t    consumeExplicitConstructorInvocationWithTypeArguments(1, SUPER_CALL);  ", "-\t\t\tbreak;", "- ", "-    case 201 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Name DOT super LPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeExplicitConstructorInvocation(2, SUPER_CALL);  ", "-\t\t\tbreak;", "- ", "-    case 202 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Name DOT...\"); }  //$NON-NLS-1$", "-\t\t    consumeExplicitConstructorInvocationWithTypeArguments(2, SUPER_CALL);  ", "-\t\t\tbreak;", "- ", "-    case 203 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT this...\"); }  //$NON-NLS-1$", "-\t\t    consumeExplicitConstructorInvocation(1, THIS_CALL);  ", "-\t\t\tbreak;", "- ", "-    case 204 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT...\"); }  //$NON-NLS-1$", "-\t\t    consumeExplicitConstructorInvocationWithTypeArguments(1, THIS_CALL);  ", "-\t\t\tbreak;", "- ", "-    case 205 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Name DOT this LPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeExplicitConstructorInvocation(2, THIS_CALL);  ", "-\t\t\tbreak;", "- ", "-    case 206 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Name DOT...\"); }  //$NON-NLS-1$", "-\t\t    consumeExplicitConstructorInvocationWithTypeArguments(2, THIS_CALL);  ", "-\t\t\tbreak;", "- ", "-    case 207 : if (DEBUG) { System.out.println(\"InterfaceDeclaration ::= InterfaceHeader InterfaceBody\"); }  //$NON-NLS-1$", "-\t\t    consumeInterfaceDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 208 : if (DEBUG) { System.out.println(\"InterfaceHeader ::= InterfaceHeaderName...\"); }  //$NON-NLS-1$", "-\t\t    consumeInterfaceHeader();  ", "-\t\t\tbreak;", "- ", "-    case 209 : if (DEBUG) { System.out.println(\"InterfaceHeaderName ::= InterfaceHeaderName1...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeHeaderNameWithTypeParameters();  ", "-\t\t\tbreak;", "- ", "-    case 211 : if (DEBUG) { System.out.println(\"InterfaceHeaderName1 ::= Modifiersopt interface...\"); }  //$NON-NLS-1$", "-\t\t    consumeInterfaceHeaderName1();  ", "-\t\t\tbreak;", "- ", "-    case 212 : if (DEBUG) { System.out.println(\"InterfaceHeaderExtends ::= extends InterfaceTypeList\"); }  //$NON-NLS-1$", "-\t\t    consumeInterfaceHeaderExtends();  ", "-\t\t\tbreak;", "- ", "-    case 215 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeInterfaceMemberDeclarations();  ", "-\t\t\tbreak;", "- ", "-    case 216 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclaration ::= SEMICOLON\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyTypeDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 218 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclaration ::= MethodHeader MethodBody\"); }  //$NON-NLS-1$", "-\t\t    consumeInvalidMethodDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 219 : if (DEBUG) { System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader...\"); }  //$NON-NLS-1$", "-\t\t    consumeInvalidConstructorDeclaration(true);  ", "-\t\t\tbreak;", "- ", "-    case 220 : if (DEBUG) { System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader...\"); }  //$NON-NLS-1$", "-\t\t    consumeInvalidConstructorDeclaration(false);  ", "-\t\t\tbreak;", "- ", "-    case 231 : if (DEBUG) { System.out.println(\"PushLeftBrace ::=\"); }  //$NON-NLS-1$", "-\t\t    consumePushLeftBrace();  ", "-\t\t\tbreak;", "- ", "-    case 232 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace ,opt RBRACE\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyArrayInitializer();  ", "-\t\t\tbreak;", "- ", "-    case 233 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayInitializer();  ", "-\t\t\tbreak;", "- ", "-    case 234 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayInitializer();  ", "-\t\t\tbreak;", "- ", "-    case 236 : if (DEBUG) { System.out.println(\"VariableInitializers ::= VariableInitializers COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeVariableInitializers();  ", "-\t\t\tbreak;", "- ", "-    case 237 : if (DEBUG) { System.out.println(\"Block ::= OpenBlock LBRACE BlockStatementsopt RBRACE\"); }  //$NON-NLS-1$", "-\t\t    consumeBlock();  ", "-\t\t\tbreak;", "- ", "-    case 238 : if (DEBUG) { System.out.println(\"OpenBlock ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeOpenBlock() ;  ", "-\t\t\tbreak;", "- ", "-    case 240 : if (DEBUG) { System.out.println(\"BlockStatements ::= BlockStatements BlockStatement\"); }  //$NON-NLS-1$", "-\t\t    consumeBlockStatements() ;  ", "-\t\t\tbreak;", "- ", "-    case 244 : if (DEBUG) { System.out.println(\"BlockStatement ::= InterfaceDeclaration\"); }  //$NON-NLS-1$", "-\t\t    consumeInvalidInterfaceDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 245 : if (DEBUG) { System.out.println(\"BlockStatement ::= AnnotationTypeDeclaration\"); }  //$NON-NLS-1$", "-\t\t    consumeInvalidAnnotationTypeDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 246 : if (DEBUG) { System.out.println(\"BlockStatement ::= EnumDeclaration\"); }  //$NON-NLS-1$", "-\t\t    consumeInvalidEnumDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 247 : if (DEBUG) { System.out.println(\"LocalVariableDeclarationStatement ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeLocalVariableDeclarationStatement();  ", "-\t\t\tbreak;", "- ", "-    case 248 : if (DEBUG) { System.out.println(\"LocalVariableDeclaration ::= Type PushModifiers...\"); }  //$NON-NLS-1$", "-\t\t    consumeLocalVariableDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 249 : if (DEBUG) { System.out.println(\"LocalVariableDeclaration ::= Modifiers Type...\"); }  //$NON-NLS-1$", "-\t\t    consumeLocalVariableDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 250 : if (DEBUG) { System.out.println(\"PushModifiers ::=\"); }  //$NON-NLS-1$", "-\t\t    consumePushModifiers();  ", "-\t\t\tbreak;", "- ", "-    case 251 : if (DEBUG) { System.out.println(\"PushModifiersForHeader ::=\"); }  //$NON-NLS-1$", "-\t\t    consumePushModifiersForHeader();  ", "-\t\t\tbreak;", "- ", "-    case 252 : if (DEBUG) { System.out.println(\"PushRealModifiers ::=\"); }  //$NON-NLS-1$", "-\t\t    consumePushRealModifiers();  ", "-\t\t\tbreak;", "- ", "-    case 279 : if (DEBUG) { System.out.println(\"EmptyStatement ::= SEMICOLON\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyStatement();  ", "-\t\t\tbreak;", "- ", "-    case 280 : if (DEBUG) { System.out.println(\"LabeledStatement ::= Label COLON Statement\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementLabel() ;  ", "-\t\t\tbreak;", "- ", "-    case 281 : if (DEBUG) { System.out.println(\"LabeledStatementNoShortIf ::= Label COLON...\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementLabel() ;  ", "-\t\t\tbreak;", "- ", "-    case 282 : if (DEBUG) { System.out.println(\"Label ::= Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeLabel() ;  ", "-\t\t\tbreak;", "- ", "-     case 283 : if (DEBUG) { System.out.println(\"ExpressionStatement ::= StatementExpression SEMICOLON\"); }  //$NON-NLS-1$", "-\t\t    consumeExpressionStatement();  ", "-\t\t\tbreak;", "- ", "-    case 292 : if (DEBUG) { System.out.println(\"IfThenStatement ::= if LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementIfNoElse();  ", "-\t\t\tbreak;", "- ", "-    case 293 : if (DEBUG) { System.out.println(\"IfThenElseStatement ::= if LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementIfWithElse();  ", "-\t\t\tbreak;", "- ", "-    case 294 : if (DEBUG) { System.out.println(\"IfThenElseStatementNoShortIf ::= if LPAREN Expression...\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementIfWithElse();  ", "-\t\t\tbreak;", "- ", "-    case 295 : if (DEBUG) { System.out.println(\"SwitchStatement ::= switch LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementSwitch() ;  ", "-\t\t\tbreak;", "- ", "-    case 296 : if (DEBUG) { System.out.println(\"SwitchBlock ::= LBRACE RBRACE\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptySwitchBlock() ;  ", "-\t\t\tbreak;", "- ", "-    case 299 : if (DEBUG) { System.out.println(\"SwitchBlock ::= LBRACE SwitchBlockStatements...\"); }  //$NON-NLS-1$", "-\t\t    consumeSwitchBlock() ;  ", "-\t\t\tbreak;", "- ", "-    case 301 : if (DEBUG) { System.out.println(\"SwitchBlockStatements ::= SwitchBlockStatements...\"); }  //$NON-NLS-1$", "-\t\t    consumeSwitchBlockStatements() ;  ", "-\t\t\tbreak;", "- ", "-    case 302 : if (DEBUG) { System.out.println(\"SwitchBlockStatement ::= SwitchLabels BlockStatements\"); }  //$NON-NLS-1$", "-\t\t    consumeSwitchBlockStatement() ;  ", "-\t\t\tbreak;", "- ", "-    case 304 : if (DEBUG) { System.out.println(\"SwitchLabels ::= SwitchLabels SwitchLabel\"); }  //$NON-NLS-1$", "-\t\t    consumeSwitchLabels() ;  ", "-\t\t\tbreak;", "- ", "-     case 305 : if (DEBUG) { System.out.println(\"SwitchLabel ::= case ConstantExpression COLON\"); }  //$NON-NLS-1$", "-\t\t    consumeCaseLabel();  ", "-\t\t\tbreak;", "- ", "-     case 306 : if (DEBUG) { System.out.println(\"SwitchLabel ::= default COLON\"); }  //$NON-NLS-1$", "-\t\t    consumeDefaultLabel();  ", "-\t\t\tbreak;", "- ", "-    case 307 : if (DEBUG) { System.out.println(\"WhileStatement ::= while LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementWhile() ;  ", "-\t\t\tbreak;", "- ", "-    case 308 : if (DEBUG) { System.out.println(\"WhileStatementNoShortIf ::= while LPAREN Expression...\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementWhile() ;  ", "-\t\t\tbreak;", "- ", "-    case 309 : if (DEBUG) { System.out.println(\"DoStatement ::= do Statement while LPAREN Expression...\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementDo() ;  ", "-\t\t\tbreak;", "- ", "-    case 310 : if (DEBUG) { System.out.println(\"ForStatement ::= for LPAREN ForInitopt SEMICOLON...\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementFor() ;  ", "-\t\t\tbreak;", "- ", "-    case 311 : if (DEBUG) { System.out.println(\"ForStatementNoShortIf ::= for LPAREN ForInitopt...\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementFor() ;  ", "-\t\t\tbreak;", "- ", "-    case 312 : if (DEBUG) { System.out.println(\"ForInit ::= StatementExpressionList\"); }  //$NON-NLS-1$", "-\t\t    consumeForInit() ;  ", "-\t\t\tbreak;", "- ", "-    case 316 : if (DEBUG) { System.out.println(\"StatementExpressionList ::= StatementExpressionList...\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementExpressionList() ;  ", "-\t\t\tbreak;", "- ", "-    case 317 : if (DEBUG) { System.out.println(\"AssertStatement ::= assert Expression SEMICOLON\"); }  //$NON-NLS-1$", "-\t\t    consumeSimpleAssertStatement() ;  ", "-\t\t\tbreak;", "- ", "-    case 318 : if (DEBUG) { System.out.println(\"AssertStatement ::= assert Expression COLON Expression\"); }  //$NON-NLS-1$", "-\t\t    consumeAssertStatement() ;  ", "-\t\t\tbreak;", "- ", "-    case 319 : if (DEBUG) { System.out.println(\"BreakStatement ::= break SEMICOLON\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementBreak() ;  ", "-\t\t\tbreak;", "- ", "-    case 320 : if (DEBUG) { System.out.println(\"BreakStatement ::= break Identifier SEMICOLON\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementBreakWithLabel() ;  ", "-\t\t\tbreak;", "- ", "-    case 321 : if (DEBUG) { System.out.println(\"ContinueStatement ::= continue SEMICOLON\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementContinue() ;  ", "-\t\t\tbreak;", "- ", "-    case 322 : if (DEBUG) { System.out.println(\"ContinueStatement ::= continue Identifier SEMICOLON\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementContinueWithLabel() ;  ", "-\t\t\tbreak;", "- ", "-    case 323 : if (DEBUG) { System.out.println(\"ReturnStatement ::= return Expressionopt SEMICOLON\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementReturn() ;  ", "-\t\t\tbreak;", "- ", "-    case 324 : if (DEBUG) { System.out.println(\"ThrowStatement ::= throw Expression SEMICOLON\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementThrow();  ", "-\t\t\tbreak;", "- ", "-    case 325 : if (DEBUG) { System.out.println(\"SynchronizedStatement ::= OnlySynchronized LPAREN...\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementSynchronized();  ", "-\t\t\tbreak;", "- ", "-    case 326 : if (DEBUG) { System.out.println(\"OnlySynchronized ::= synchronized\"); }  //$NON-NLS-1$", "-\t\t    consumeOnlySynchronized();  ", "-\t\t\tbreak;", "- ", "-    case 327 : if (DEBUG) { System.out.println(\"TryStatement ::= try TryBlock Catches\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementTry(false, false);  ", "-\t\t\tbreak;", "- ", "-    case 328 : if (DEBUG) { System.out.println(\"TryStatement ::= try TryBlock Catchesopt Finally\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementTry(true, false);  ", "-\t\t\tbreak;", "- ", "-    case 329 : if (DEBUG) { System.out.println(\"TryStatementWithResources ::= try ResourceSpecification\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementTry(false, true);  ", "-\t\t\tbreak;", "- ", "-    case 330 : if (DEBUG) { System.out.println(\"TryStatementWithResources ::= try ResourceSpecification\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementTry(true, true);  ", "-\t\t\tbreak;", "- ", "-    case 331 : if (DEBUG) { System.out.println(\"ResourceSpecification ::= LPAREN Resources ;opt RPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeResourceSpecification();  ", "-\t\t\tbreak;", "- ", "-    case 332 : if (DEBUG) { System.out.println(\";opt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeResourceOptionalTrailingSemiColon(false);  ", "-\t\t\tbreak;", "- ", "-    case 333 : if (DEBUG) { System.out.println(\";opt ::= SEMICOLON\"); }  //$NON-NLS-1$", "-\t\t    consumeResourceOptionalTrailingSemiColon(true);  ", "-\t\t\tbreak;", "- ", "-    case 334 : if (DEBUG) { System.out.println(\"Resources ::= Resource\"); }  //$NON-NLS-1$", "-\t\t    consumeSingleResource();  ", "-\t\t\tbreak;", "- ", "-    case 335 : if (DEBUG) { System.out.println(\"Resources ::= Resources TrailingSemiColon Resource\"); }  //$NON-NLS-1$", "-\t\t    consumeMultipleResources();  ", "-\t\t\tbreak;", "- ", "-    case 336 : if (DEBUG) { System.out.println(\"TrailingSemiColon ::= SEMICOLON\"); }  //$NON-NLS-1$", "-\t\t    consumeResourceOptionalTrailingSemiColon(true);  ", "-\t\t\tbreak;", "- ", "-    case 337 : if (DEBUG) { System.out.println(\"Resource ::= Type PushModifiers VariableDeclaratorId...\"); }  //$NON-NLS-1$", "-\t\t    consumeResourceAsLocalVariableDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 338 : if (DEBUG) { System.out.println(\"Resource ::= Modifiers Type PushRealModifiers...\"); }  //$NON-NLS-1$", "-\t\t    consumeResourceAsLocalVariableDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 340 : if (DEBUG) { System.out.println(\"ExitTryBlock ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeExitTryBlock();  ", "-\t\t\tbreak;", "- ", "-    case 342 : if (DEBUG) { System.out.println(\"Catches ::= Catches CatchClause\"); }  //$NON-NLS-1$", "-\t\t    consumeCatches();  ", "-\t\t\tbreak;", "- ", "-    case 343 : if (DEBUG) { System.out.println(\"CatchClause ::= catch LPAREN CatchFormalParameter RPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeStatementCatch() ;  ", "-\t\t\tbreak;", "- ", "-    case 345 : if (DEBUG) { System.out.println(\"PushLPAREN ::= LPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeLeftParen();  ", "-\t\t\tbreak;", "- ", "-    case 346 : if (DEBUG) { System.out.println(\"PushRPAREN ::= RPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeRightParen();  ", "-\t\t\tbreak;", "- ", "-    case 351 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= this\"); }  //$NON-NLS-1$", "-\t\t    consumePrimaryNoNewArrayThis();  ", "-\t\t\tbreak;", "- ", "-    case 352 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Expression_NotName...\"); }  //$NON-NLS-1$", "-\t\t    consumePrimaryNoNewArray();  ", "-\t\t\tbreak;", "- ", "-    case 353 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Name PushRPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumePrimaryNoNewArrayWithName();  ", "-\t\t\tbreak;", "- ", "-    case 356 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT this\"); }  //$NON-NLS-1$", "-\t\t    consumePrimaryNoNewArrayNameThis();  ", "-\t\t\tbreak;", "- ", "-    case 357 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT super\"); }  //$NON-NLS-1$", "-\t\t    consumePrimaryNoNewArrayNameSuper();  ", "-\t\t\tbreak;", "- ", "-    case 358 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT class\"); }  //$NON-NLS-1$", "-\t\t    consumePrimaryNoNewArrayName();  ", "-\t\t\tbreak;", "- ", "-    case 359 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name Dims DOT class\"); }  //$NON-NLS-1$", "-\t\t    consumePrimaryNoNewArrayArrayType();  ", "-\t\t\tbreak;", "- ", "-    case 360 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PrimitiveType Dims DOT class\"); }  //$NON-NLS-1$", "-\t\t    consumePrimaryNoNewArrayPrimitiveArrayType();  ", "-\t\t\tbreak;", "- ", "-    case 361 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PrimitiveType DOT class\"); }  //$NON-NLS-1$", "-\t\t    consumePrimaryNoNewArrayPrimitiveType();  ", "-\t\t\tbreak;", "- ", "-    case 364 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "-\t\t    consumeAllocationHeader();  ", "-\t\t\tbreak;", "- ", "-    case 365 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassInstanceCreationExpressionWithTypeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 366 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType LPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeClassInstanceCreationExpression();  ", "-\t\t\tbreak;", "- ", "-    case 367 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassInstanceCreationExpressionQualifiedWithTypeArguments() ;  ", "-\t\t\tbreak;", "- ", "-    case 368 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "-\t\t\tbreak;", "- ", "-    case 369 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "-\t\t\tbreak;", "- ", "-    case 370 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassInstanceCreationExpressionQualifiedWithTypeArguments() ;  ", "-\t\t\tbreak;", "- ", "-    case 371 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "-\t\t    consumeClassInstanceCreationExpressionName() ;  ", "-\t\t\tbreak;", "- ", "-    case 372 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeClassBodyopt();  ", "-\t\t\tbreak;", "- ", "-    case 374 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEnterAnonymousClassBody(false);  ", "-\t\t\tbreak;", "- ", "-    case 375 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeClassBodyopt();  ", "-\t\t\tbreak;", "- ", "-    case 377 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEnterAnonymousClassBody(true);  ", "-\t\t\tbreak;", "- ", "-    case 379 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "-\t\t    consumeArgumentList();  ", "-\t\t\tbreak;", "- ", "-    case 380 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayCreationHeader();  ", "-\t\t\tbreak;", "- ", "-    case 381 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayCreationHeader();  ", "-\t\t\tbreak;", "- ", "-    case 382 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayCreationExpressionWithoutInitializer();  ", "-\t\t\tbreak;", "- ", "-    case 383 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayCreationExpressionWithInitializer();  ", "-\t\t\tbreak;", "- ", "-    case 384 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayCreationExpressionWithoutInitializer();  ", "-\t\t\tbreak;", "- ", "-    case 385 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayCreationExpressionWithInitializer();  ", "-\t\t\tbreak;", "- ", "-    case 387 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "-\t\t    consumeDimWithOrWithOutExprs();  ", "-\t\t\tbreak;", "- ", "-     case 389 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-\t\t    consumeDimWithOrWithOutExpr();  ", "-\t\t\tbreak;", "- ", "-     case 390 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "-\t\t    consumeDims();  ", "-\t\t\tbreak;", "- ", "-     case 393 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-\t\t    consumeOneDimLoop();  ", "-\t\t\tbreak;", "- ", "-    case 394 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeFieldAccess(false);  ", "-\t\t\tbreak;", "- ", "-    case 395 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeFieldAccess(true);  ", "-\t\t\tbreak;", "- ", "-    case 396 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodInvocationName();  ", "-\t\t\tbreak;", "- ", "-    case 397 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodInvocationNameWithTypeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 398 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodInvocationPrimaryWithTypeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 399 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodInvocationPrimary();  ", "-\t\t\tbreak;", "- ", "-    case 400 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodInvocationSuperWithTypeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 401 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodInvocationSuper();  ", "-\t\t\tbreak;", "- ", "-    case 402 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayAccess(true);  ", "-\t\t\tbreak;", "- ", "-    case 403 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayAccess(false);  ", "-\t\t\tbreak;", "- ", "-    case 404 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayAccess(false);  ", "-\t\t\tbreak;", "- ", "-    case 406 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "-\t\t    consumePostfixExpression();  ", "-\t\t\tbreak;", "- ", "-    case 409 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.PLUS,true);  ", "-\t\t\tbreak;", "- ", "-    case 410 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.MINUS,true);  ", "-\t\t\tbreak;", "- ", "-    case 411 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "-\t\t    consumePushPosition();  ", "-\t\t\tbreak;", "- ", "-    case 414 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 415 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 417 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.PLUS,false);  ", "-\t\t\tbreak;", "- ", "-    case 418 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.MINUS,false);  ", "-\t\t\tbreak;", "- ", "-    case 420 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);  ", "-\t\t\tbreak;", "- ", "-    case 421 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.NOT);  ", "-\t\t\tbreak;", "- ", "-    case 423 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "-\t\t    consumeCastExpressionWithPrimitiveType();  ", "-\t\t\tbreak;", "- ", "-    case 424 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-\t\t    consumeCastExpressionWithGenericsArray();  ", "-\t\t\tbreak;", "- ", "-    case 425 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-\t\t    consumeCastExpressionWithQualifiedGenericsArray();  ", "-\t\t\tbreak;", "- ", "-    case 426 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "-\t\t    consumeCastExpressionLL1();  ", "-\t\t\tbreak;", "- ", "-    case 427 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\"); }  //$NON-NLS-1$", "-\t\t    consumeCastExpressionWithNameArray();  ", "-\t\t\tbreak;", "- ", "-    case 428 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "-\t\t    consumeOnlyTypeArgumentsForCastExpression();  ", "-\t\t\tbreak;", "- ", "-    case 429 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeInsideCastExpression();  ", "-\t\t\tbreak;", "- ", "-    case 430 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeInsideCastExpressionLL1();  ", "-\t\t\tbreak;", "- ", "-    case 431 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeInsideCastExpressionWithQualifiedGenerics();  ", "-\t\t\tbreak;", "- ", "-    case 433 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 434 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "-\t\t\tbreak;", "- ", "-    case 435 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 437 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 438 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 440 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 441 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 442 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 444 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS);  ", "-\t\t\tbreak;", "- ", "-    case 445 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER);  ", "-\t\t\tbreak;", "- ", "-    case 446 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 447 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 449 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "-\t\t    consumeInstanceOfExpression();  ", "-\t\t\tbreak;", "- ", "-    case 451 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 452 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 454 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND);  ", "-\t\t\tbreak;", "- ", "-    case 456 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.XOR);  ", "-\t\t\tbreak;", "- ", "-    case 458 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR);  ", "-\t\t\tbreak;", "- ", "-    case 460 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND_AND);  ", "-\t\t\tbreak;", "- ", "-    case 462 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR_OR);  ", "-\t\t\tbreak;", "- ", "-    case 464 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  ", "-\t\t\tbreak;", "- ", "-    case 467 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignment();  ", "-\t\t\tbreak;", "- ", "-    case 469 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "-\t\t    ignoreExpressionAssignment(); ", "-\t\t\tbreak;", "- ", "-    case 470 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 471 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 472 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(DIVIDE);  ", "-\t\t\tbreak;", "- ", "-    case 473 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 474 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 475 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 476 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 477 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 478 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 479 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(AND);  ", "-\t\t\tbreak;", "- ", "-    case 480 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(XOR);  ", "-\t\t\tbreak;", "- ", "-    case 481 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(OR);  ", "-\t\t\tbreak;", "- ", "-    case 485 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyExpression();  ", "-\t\t\tbreak;", "- ", "-    case 490 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyClassBodyDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-    case 491 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassBodyDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-     case 492 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeDefaultModifiers();  ", "-\t\t\tbreak;", "- ", "-    case 493 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "-\t\t    consumeModifiers();  ", "-\t\t\tbreak;", "- ", "-    case 494 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyBlockStatementsopt();  ", "-\t\t\tbreak;", "- ", "-     case 496 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyDimsopt();  ", "-\t\t\tbreak;", "- ", "-     case 498 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyArgumentListopt();  ", "-\t\t\tbreak;", "- ", "-    case 502 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeFormalParameterListopt();  ", "-\t\t\tbreak;", "- ", "-     case 506 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyInterfaceMemberDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-     case 507 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-\t\t    consumeInterfaceMemberDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-    case 508 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeNestedType();  ", "-\t\t\tbreak;", "-", "-     case 509 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyForInitopt();  ", "-\t\t\tbreak;", "- ", "-     case 511 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyForUpdateopt();  ", "-\t\t\tbreak;", "- ", "-     case 515 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyCatchesopt();  ", "-\t\t\tbreak;", "- ", "-     case 517 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumDeclaration();  ", "-\t\t\tbreak;", "- ", "-     case 518 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeader();  ", "-\t\t\tbreak;", "- ", "-     case 519 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeaderName();  ", "-\t\t\tbreak;", "- ", "-     case 520 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeaderNameWithTypeParameters();  ", "-\t\t\tbreak;", "- ", "-     case 521 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyNoConstants();  ", "-\t\t\tbreak;", "- ", "-     case 522 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyNoConstants();  ", "-\t\t\tbreak;", "- ", "-     case 523 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyWithConstants();  ", "-\t\t\tbreak;", "- ", "-     case 524 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyWithConstants();  ", "-\t\t\tbreak;", "- ", "-    case 526 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstants();  ", "-\t\t\tbreak;", "- ", "-    case 527 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantHeaderName();  ", "-\t\t\tbreak;", "- ", "-    case 528 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantHeader();  ", "-\t\t\tbreak;", "- ", "-    case 529 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantWithClassBody();  ", "-\t\t\tbreak;", "- ", "-    case 530 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantNoClassBody();  ", "-\t\t\tbreak;", "- ", "-    case 531 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 532 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyArguments();  ", "-\t\t\tbreak;", "- ", "-    case 534 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumDeclarations();  ", "-\t\t\tbreak;", "- ", "-    case 535 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyEnumDeclarations();  ", "-\t\t\tbreak;", "- ", "-    case 537 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatement();  ", "-\t\t\tbreak;", "- ", "-    case 538 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatement();  ", "-\t\t\tbreak;", "- ", "-    case 539 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeaderInit(false);  ", "-\t\t\tbreak;", "- ", "-    case 540 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeaderInit(true);  ", "-\t\t\tbreak;", "- ", "-    case 541 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeader();  ", "-\t\t\tbreak;", "- ", "-    case 542 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeImportDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 543 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "-\t\t    consumeSingleStaticImportDeclarationName();  ", "-\t\t\tbreak;", "- ", "-    case 544 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeImportDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 545 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "-\t\t    consumeStaticImportOnDemandDeclarationName();  ", "-\t\t\tbreak;", "- ", "-    case 546 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 547 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-\t\t    consumeOnlyTypeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 549 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList1();  ", "-\t\t\tbreak;", "- ", "-    case 551 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList();  ", "-\t\t\tbreak;", "- ", "-    case 552 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgument();  ", "-\t\t\tbreak;", "- ", "-    case 556 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType1();  ", "-\t\t\tbreak;", "- ", "-    case 557 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentReferenceType1();  ", "-\t\t\tbreak;", "- ", "-    case 559 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList2();  ", "-\t\t\tbreak;", "- ", "-    case 562 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType2();  ", "-\t\t\tbreak;", "- ", "-    case 563 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentReferenceType2();  ", "-\t\t\tbreak;", "- ", "-    case 565 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList3();  ", "-\t\t\tbreak;", "- ", "-    case 568 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType3();  ", "-\t\t\tbreak;", "- ", "-    case 569 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard();  ", "-\t\t\tbreak;", "- ", "-    case 570 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardWithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 571 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBoundsExtends();  ", "-\t\t\tbreak;", "- ", "-    case 572 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBoundsSuper();  ", "-\t\t\tbreak;", "- ", "-    case 573 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard1();  ", "-\t\t\tbreak;", "- ", "-    case 574 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard1WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 575 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds1Extends();  ", "-\t\t\tbreak;", "- ", "-    case 576 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds1Super();  ", "-\t\t\tbreak;", "- ", "-    case 577 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard2();  ", "-\t\t\tbreak;", "- ", "-    case 578 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard2WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 579 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds2Extends();  ", "-\t\t\tbreak;", "- ", "-    case 580 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds2Super();  ", "-\t\t\tbreak;", "- ", "-    case 581 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard3();  ", "-\t\t\tbreak;", "- ", "-    case 582 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard3WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 583 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds3Extends();  ", "-\t\t\tbreak;", "- ", "-    case 584 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds3Super();  ", "-\t\t\tbreak;", "- ", "-    case 585 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterHeader();  ", "-\t\t\tbreak;", "- ", "-    case 586 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameters();  ", "-\t\t\tbreak;", "- ", "-    case 588 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterList();  ", "-\t\t\tbreak;", "- ", "-    case 590 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterWithExtends();  ", "-\t\t\tbreak;", "- ", "-    case 591 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterWithExtendsAndBounds();  ", "-\t\t\tbreak;", "- ", "-    case 593 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBoundList();  ", "-\t\t\tbreak;", "- ", "-    case 594 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBound();  ", "-\t\t\tbreak;", "- ", "-    case 596 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterList1();  ", "-\t\t\tbreak;", "- ", "-    case 597 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1();  ", "-\t\t\tbreak;", "- ", "-    case 598 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1WithExtends();  ", "-\t\t\tbreak;", "- ", "-    case 599 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1WithExtendsAndBounds();  ", "-\t\t\tbreak;", "- ", "-    case 601 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBoundList1();  ", "-\t\t\tbreak;", "- ", "-    case 602 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBound1();  ", "-\t\t\tbreak;", "- ", "-    case 608 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 609 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 612 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);  ", "-\t\t\tbreak;", "- ", "-    case 613 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.NOT);  ", "-\t\t\tbreak;", "- ", "-    case 616 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 617 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 618 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "-\t\t\tbreak;", "- ", "-    case 619 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.DIVIDE);  ", "-\t\t\tbreak;", "- ", "-    case 620 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 621 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 623 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 624 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 625 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 626 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 628 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 629 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 630 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 631 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 632 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 633 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 635 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS);  ", "-\t\t\tbreak;", "- ", "-    case 636 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS);  ", "-\t\t\tbreak;", "- ", "-    case 637 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER);  ", "-\t\t\tbreak;", "- ", "-    case 638 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER);  ", "-\t\t\tbreak;", "- ", "-    case 639 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 640 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 641 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 642 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 644 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "-\t\t    consumeInstanceOfExpressionWithName();  ", "-\t\t\tbreak;", "- ", "-    case 645 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeInstanceOfExpression();  ", "-\t\t\tbreak;", "- ", "-    case 647 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 648 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpressionWithName(OperatorIds.EQUAL_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 649 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 650 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpressionWithName(OperatorIds.NOT_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 652 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND);  ", "-\t\t\tbreak;", "- ", "-    case 653 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.AND);  ", "-\t\t\tbreak;", "- ", "-    case 655 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.XOR);  ", "-\t\t\tbreak;", "- ", "-    case 656 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.XOR);  ", "-\t\t\tbreak;", "- ", "-    case 658 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR);  ", "-\t\t\tbreak;", "- ", "-    case 659 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.OR);  ", "-\t\t\tbreak;", "- ", "-    case 661 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND_AND);  ", "-\t\t\tbreak;", "- ", "-    case 662 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.AND_AND);  ", "-\t\t\tbreak;", "- ", "-    case 664 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR_OR);  ", "-\t\t\tbreak;", "- ", "-    case 665 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.OR_OR);  ", "-\t\t\tbreak;", "- ", "-    case 667 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  ", "-\t\t\tbreak;", "- ", "-    case 668 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "-\t\t    consumeConditionalExpressionWithName(OperatorIds.QUESTIONCOLON) ;  ", "-\t\t\tbreak;", "- ", "-    case 672 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeDeclarationHeaderName() ;  ", "-\t\t\tbreak;", "- ", "-    case 673 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  ", "-\t\t\tbreak;", "- ", "-    case 674 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  ", "-\t\t\tbreak;", "- ", "-    case 675 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeDeclarationHeaderName() ;  ", "-\t\t\tbreak;", "- ", "-    case 676 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeDeclarationHeader() ;  ", "-\t\t\tbreak;", "- ", "-    case 677 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeDeclaration() ;  ", "-\t\t\tbreak;", "- ", "-    case 679 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyAnnotationTypeMemberDeclarationsopt() ;  ", "-\t\t\tbreak;", "- ", "-    case 680 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeMemberDeclarationsopt() ;  ", "-\t\t\tbreak;", "- ", "-    case 682 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeMemberDeclarations() ;  ", "-\t\t\tbreak;", "- ", "-    case 683 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodHeaderNameWithTypeParameters(true);  ", "-\t\t\tbreak;", "- ", "-    case 684 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodHeaderName(true);  ", "-\t\t\tbreak;", "- ", "-    case 685 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyMethodHeaderDefaultValue() ;  ", "-\t\t\tbreak;", "- ", "-    case 686 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodHeaderDefaultValue();  ", "-\t\t\tbreak;", "- ", "-    case 687 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodHeader();  ", "-\t\t\tbreak;", "- ", "-    case 688 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeMemberDeclaration() ;  ", "-\t\t\tbreak;", "- ", "-    case 696 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationName() ;  ", "-\t\t\tbreak;", "- ", "-    case 697 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-\t\t    consumeNormalAnnotation() ;  ", "-\t\t\tbreak;", "- ", "-    case 698 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyMemberValuePairsopt() ;  ", "-\t\t\tbreak;", "- ", "-    case 701 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeMemberValuePairs() ;  ", "-\t\t\tbreak;", "- ", "-    case 702 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "-\t\t    consumeMemberValuePair() ;  ", "-\t\t\tbreak;", "- ", "-    case 703 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEnterMemberValue() ;  ", "-\t\t\tbreak;", "- ", "-    case 704 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeExitMemberValue() ;  ", "-\t\t\tbreak;", "- ", "-    case 706 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "-\t\t    consumeMemberValueAsName() ;  ", "-\t\t\tbreak;", "- ", "-    case 709 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeMemberValueArrayInitializer() ;  ", "-\t\t\tbreak;", "- ", "-    case 710 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeMemberValueArrayInitializer() ;  ", "-\t\t\tbreak;", "- ", "-    case 711 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "-\t\t\tbreak;", "- ", "-    case 712 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "-\t\t\tbreak;", "- ", "-    case 713 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEnterMemberValueArrayInitializer() ;  ", "-\t\t\tbreak;", "- ", "-    case 715 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "-\t\t    consumeMemberValues() ;  ", "-\t\t\tbreak;", "- ", "-    case 716 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "-\t\t    consumeMarkerAnnotation() ;  ", "-\t\t\tbreak;", "- ", "-    case 717 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "-\t\t    consumeSingleMemberAnnotationMemberValue() ;  ", "-\t\t\tbreak;", "- ", "-    case 718 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-\t\t    consumeSingleMemberAnnotation() ;  ", "-\t\t\tbreak;", "- ", "-    case 719 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "-\t\t    consumeRecoveryMethodHeaderNameWithTypeParameters();  ", "-\t\t\tbreak;", "- ", "-    case 720 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-\t\t    consumeRecoveryMethodHeaderName();  ", "-\t\t\tbreak;", "- ", "-    case 721 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodHeader();  ", "-\t\t\tbreak;", "- ", "-    case 722 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodHeader();  ", "-\t\t\tbreak;", "- ", "-\t}", "+// This method is part of an automatic generation : do NOT edit-modify\r", "+protected void consumeRule(int act) {\r", "+  switch ( act ) {\r", "+    case 30 : if (DEBUG) { System.out.println(\"Type ::= PrimitiveType\"); }  //$NON-NLS-1$\r", "+\t\t    consumePrimitiveType();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 44 : if (DEBUG) { System.out.println(\"ReferenceType ::= ClassOrInterfaceType\"); }  //$NON-NLS-1$\r", "+\t\t    consumeReferenceType();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 48 : if (DEBUG) { System.out.println(\"ClassOrInterface ::= Name\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassOrInterfaceName();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 49 : if (DEBUG) { System.out.println(\"ClassOrInterface ::= GenericType DOT Name\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassOrInterface();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 50 : if (DEBUG) { System.out.println(\"GenericType ::= ClassOrInterface TypeArguments\"); }  //$NON-NLS-1$\r", "+\t\t    consumeGenericType();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 51 : if (DEBUG) { System.out.println(\"GenericType ::= ClassOrInterface LESS GREATER\"); }  //$NON-NLS-1$\r", "+\t\t    consumeGenericTypeWithDiamond();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 52 : if (DEBUG) { System.out.println(\"ArrayTypeWithTypeArgumentsName ::= GenericType DOT Name\"); }  //$NON-NLS-1$\r", "+\t\t    consumeArrayTypeWithTypeArgumentsName();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 53 : if (DEBUG) { System.out.println(\"ArrayType ::= PrimitiveType Dims\"); }  //$NON-NLS-1$\r", "+\t\t    consumePrimitiveArrayType();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 54 : if (DEBUG) { System.out.println(\"ArrayType ::= Name Dims\"); }  //$NON-NLS-1$\r", "+\t\t    consumeNameArrayType();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 55 : if (DEBUG) { System.out.println(\"ArrayType ::= ArrayTypeWithTypeArgumentsName Dims\"); }  //$NON-NLS-1$\r", "+\t\t    consumeGenericTypeNameArrayType();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 56 : if (DEBUG) { System.out.println(\"ArrayType ::= GenericType Dims\"); }  //$NON-NLS-1$\r", "+\t\t    consumeGenericTypeArrayType();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 61 : if (DEBUG) { System.out.println(\"QualifiedName ::= Name DOT SimpleName\"); }  //$NON-NLS-1$\r", "+\t\t    consumeQualifiedName();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 62 : if (DEBUG) { System.out.println(\"CompilationUnit ::= EnterCompilationUnit...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeCompilationUnit();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 63 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= PackageDeclaration\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInternalCompilationUnit();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 64 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= PackageDeclaration...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInternalCompilationUnit();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 65 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= PackageDeclaration...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInternalCompilationUnitWithTypes();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 66 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= PackageDeclaration...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInternalCompilationUnitWithTypes();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 67 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= ImportDeclarations...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInternalCompilationUnit();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 68 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= TypeDeclarations\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInternalCompilationUnitWithTypes();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 69 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= ImportDeclarations...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInternalCompilationUnitWithTypes();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 70 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyInternalCompilationUnit();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 71 : if (DEBUG) { System.out.println(\"ReduceImports ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeReduceImports();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 72 : if (DEBUG) { System.out.println(\"EnterCompilationUnit ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnterCompilationUnit();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 88 : if (DEBUG) { System.out.println(\"CatchHeader ::= catch LPAREN CatchFormalParameter RPAREN\"); }  //$NON-NLS-1$\r", "+\t\t    consumeCatchHeader();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 90 : if (DEBUG) { System.out.println(\"ImportDeclarations ::= ImportDeclarations...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeImportDeclarations();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 92 : if (DEBUG) { System.out.println(\"TypeDeclarations ::= TypeDeclarations TypeDeclaration\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeDeclarations();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 93 : if (DEBUG) { System.out.println(\"PackageDeclaration ::= PackageDeclarationName SEMICOLON\"); }  //$NON-NLS-1$\r", "+\t\t    consumePackageDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 94 : if (DEBUG) { System.out.println(\"PackageDeclarationName ::= Modifiers package...\"); }  //$NON-NLS-1$\r", "+\t\t    consumePackageDeclarationNameWithModifiers();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 95 : if (DEBUG) { System.out.println(\"PackageDeclarationName ::= PackageComment package Name\"); }  //$NON-NLS-1$\r", "+\t\t    consumePackageDeclarationName();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 96 : if (DEBUG) { System.out.println(\"PackageComment ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumePackageComment();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 101 : if (DEBUG) { System.out.println(\"SingleTypeImportDeclaration ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeImportDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 102 : if (DEBUG) { System.out.println(\"SingleTypeImportDeclarationName ::= import Name\"); }  //$NON-NLS-1$\r", "+\t\t    consumeSingleTypeImportDeclarationName();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 103 : if (DEBUG) { System.out.println(\"TypeImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeImportDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 104 : if (DEBUG) { System.out.println(\"TypeImportOnDemandDeclarationName ::= import Name DOT...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeImportOnDemandDeclarationName();  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 107 : if (DEBUG) { System.out.println(\"TypeDeclaration ::= SEMICOLON\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyTypeDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 111 : if (DEBUG) { System.out.println(\"Modifiers ::= Modifiers Modifier\"); }  //$NON-NLS-1$\r", "+\t\t    consumeModifiers2();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 123 : if (DEBUG) { System.out.println(\"Modifier ::= Annotation\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAnnotationAsModifier();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 124 : if (DEBUG) { System.out.println(\"ClassDeclaration ::= ClassHeader ClassBody\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 125 : if (DEBUG) { System.out.println(\"ClassHeader ::= ClassHeaderName ClassHeaderExtendsopt...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassHeader();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 126 : if (DEBUG) { System.out.println(\"ClassHeaderName ::= ClassHeaderName1 TypeParameters\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeHeaderNameWithTypeParameters();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 128 : if (DEBUG) { System.out.println(\"ClassHeaderName1 ::= Modifiersopt class Identifier\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassHeaderName1();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 129 : if (DEBUG) { System.out.println(\"ClassHeaderExtends ::= extends ClassType\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassHeaderExtends();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 130 : if (DEBUG) { System.out.println(\"ClassHeaderImplements ::= implements InterfaceTypeList\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassHeaderImplements();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 132 : if (DEBUG) { System.out.println(\"InterfaceTypeList ::= InterfaceTypeList COMMA...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInterfaceTypeList();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 133 : if (DEBUG) { System.out.println(\"InterfaceType ::= ClassOrInterfaceType\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInterfaceType();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 136 : if (DEBUG) { System.out.println(\"ClassBodyDeclarations ::= ClassBodyDeclarations...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassBodyDeclarations();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 140 : if (DEBUG) { System.out.println(\"ClassBodyDeclaration ::= Diet NestedMethod...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassBodyDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 141 : if (DEBUG) { System.out.println(\"Diet ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeDiet();  \r", "+\t\t\tbreak;\r", "+\r", "+    case 142 : if (DEBUG) { System.out.println(\"Initializer ::= Diet NestedMethod CreateInitializer...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassBodyDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 143 : if (DEBUG) { System.out.println(\"CreateInitializer ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeCreateInitializer();  \r", "+\t\t\tbreak;\r", "+\r", "+    case 150 : if (DEBUG) { System.out.println(\"ClassMemberDeclaration ::= SEMICOLON\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyTypeDeclaration();  \r", "+\t\t\tbreak;\r", "+\r", "+    case 153 : if (DEBUG) { System.out.println(\"FieldDeclaration ::= Modifiersopt Type...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeFieldDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 155 : if (DEBUG) { System.out.println(\"VariableDeclarators ::= VariableDeclarators COMMA...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeVariableDeclarators();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 158 : if (DEBUG) { System.out.println(\"EnterVariable ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnterVariable();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 159 : if (DEBUG) { System.out.println(\"ExitVariableWithInitialization ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeExitVariableWithInitialization();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 160 : if (DEBUG) { System.out.println(\"ExitVariableWithoutInitialization ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeExitVariableWithoutInitialization();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 161 : if (DEBUG) { System.out.println(\"ForceNoDiet ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeForceNoDiet();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 162 : if (DEBUG) { System.out.println(\"RestoreDiet ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeRestoreDiet();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 167 : if (DEBUG) { System.out.println(\"MethodDeclaration ::= MethodHeader MethodBody\"); }  //$NON-NLS-1$\r", "+\t\t    // set to true to consume a method with a body\r", "+ consumeMethodDeclaration(true);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 168 : if (DEBUG) { System.out.println(\"AbstractMethodDeclaration ::= MethodHeader SEMICOLON\"); }  //$NON-NLS-1$\r", "+\t\t    // set to false to consume a method without body\r", "+ consumeMethodDeclaration(false);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 169 : if (DEBUG) { System.out.println(\"MethodHeader ::= MethodHeaderName FormalParameterListopt\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMethodHeader();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 170 : if (DEBUG) { System.out.println(\"MethodHeaderName ::= Modifiersopt TypeParameters Type...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMethodHeaderNameWithTypeParameters(false);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 171 : if (DEBUG) { System.out.println(\"MethodHeaderName ::= Modifiersopt Type Identifier LPAREN\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMethodHeaderName(false);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 172 : if (DEBUG) { System.out.println(\"MethodHeaderRightParen ::= RPAREN\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMethodHeaderRightParen();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 173 : if (DEBUG) { System.out.println(\"MethodHeaderExtendedDims ::= Dimsopt\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMethodHeaderExtendedDims();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 174 : if (DEBUG) { System.out.println(\"MethodHeaderThrowsClause ::= throws ClassTypeList\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMethodHeaderThrowsClause();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 175 : if (DEBUG) { System.out.println(\"ConstructorHeader ::= ConstructorHeaderName...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeConstructorHeader();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 176 : if (DEBUG) { System.out.println(\"ConstructorHeaderName ::= Modifiersopt TypeParameters...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeConstructorHeaderNameWithTypeParameters();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 177 : if (DEBUG) { System.out.println(\"ConstructorHeaderName ::= Modifiersopt Identifier LPAREN\"); }  //$NON-NLS-1$\r", "+\t\t    consumeConstructorHeaderName();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 179 : if (DEBUG) { System.out.println(\"FormalParameterList ::= FormalParameterList COMMA...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeFormalParameterList();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 180 : if (DEBUG) { System.out.println(\"FormalParameter ::= Modifiersopt Type...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeFormalParameter(false);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 181 : if (DEBUG) { System.out.println(\"FormalParameter ::= Modifiersopt Type ELLIPSIS...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeFormalParameter(true);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 182 : if (DEBUG) { System.out.println(\"CatchFormalParameter ::= Modifiersopt CatchType...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeCatchFormalParameter();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 183 : if (DEBUG) { System.out.println(\"CatchType ::= UnionType\"); }  //$NON-NLS-1$\r", "+\t\t    consumeCatchType();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 184 : if (DEBUG) { System.out.println(\"UnionType ::= Type\"); }  //$NON-NLS-1$\r", "+\t\t    consumeUnionTypeAsClassType();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 185 : if (DEBUG) { System.out.println(\"UnionType ::= UnionType OR Type\"); }  //$NON-NLS-1$\r", "+\t\t    consumeUnionType();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 187 : if (DEBUG) { System.out.println(\"ClassTypeList ::= ClassTypeList COMMA ClassTypeElt\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassTypeList();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 188 : if (DEBUG) { System.out.println(\"ClassTypeElt ::= ClassType\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassTypeElt();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 189 : if (DEBUG) { System.out.println(\"MethodBody ::= NestedMethod LBRACE BlockStatementsopt...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMethodBody();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 190 : if (DEBUG) { System.out.println(\"NestedMethod ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeNestedMethod();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 191 : if (DEBUG) { System.out.println(\"StaticInitializer ::= StaticOnly Block\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStaticInitializer();  \r", "+\t\t\tbreak;\r", "+\r", "+    case 192 : if (DEBUG) { System.out.println(\"StaticOnly ::= static\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStaticOnly();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 193 : if (DEBUG) { System.out.println(\"ConstructorDeclaration ::= ConstructorHeader MethodBody\"); }  //$NON-NLS-1$\r", "+\t\t    consumeConstructorDeclaration() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 194 : if (DEBUG) { System.out.println(\"ConstructorDeclaration ::= ConstructorHeader SEMICOLON\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInvalidConstructorDeclaration() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 195 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= this LPAREN...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeExplicitConstructorInvocation(0, THIS_CALL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 196 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= OnlyTypeArguments this\"); }  //$NON-NLS-1$\r", "+\t\t    consumeExplicitConstructorInvocationWithTypeArguments(0,THIS_CALL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 197 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= super LPAREN...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeExplicitConstructorInvocation(0,SUPER_CALL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 198 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= OnlyTypeArguments...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeExplicitConstructorInvocationWithTypeArguments(0,SUPER_CALL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 199 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT super...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeExplicitConstructorInvocation(1, SUPER_CALL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 200 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeExplicitConstructorInvocationWithTypeArguments(1, SUPER_CALL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 201 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Name DOT super LPAREN\"); }  //$NON-NLS-1$\r", "+\t\t    consumeExplicitConstructorInvocation(2, SUPER_CALL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 202 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Name DOT...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeExplicitConstructorInvocationWithTypeArguments(2, SUPER_CALL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 203 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT this...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeExplicitConstructorInvocation(1, THIS_CALL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 204 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeExplicitConstructorInvocationWithTypeArguments(1, THIS_CALL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 205 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Name DOT this LPAREN\"); }  //$NON-NLS-1$\r", "+\t\t    consumeExplicitConstructorInvocation(2, THIS_CALL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 206 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Name DOT...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeExplicitConstructorInvocationWithTypeArguments(2, THIS_CALL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 207 : if (DEBUG) { System.out.println(\"InterfaceDeclaration ::= InterfaceHeader InterfaceBody\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInterfaceDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 208 : if (DEBUG) { System.out.println(\"InterfaceHeader ::= InterfaceHeaderName...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInterfaceHeader();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 209 : if (DEBUG) { System.out.println(\"InterfaceHeaderName ::= InterfaceHeaderName1...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeHeaderNameWithTypeParameters();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 211 : if (DEBUG) { System.out.println(\"InterfaceHeaderName1 ::= Modifiersopt interface...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInterfaceHeaderName1();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 212 : if (DEBUG) { System.out.println(\"InterfaceHeaderExtends ::= extends InterfaceTypeList\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInterfaceHeaderExtends();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 215 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarations ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInterfaceMemberDeclarations();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 216 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclaration ::= SEMICOLON\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyTypeDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 218 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclaration ::= MethodHeader MethodBody\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInvalidMethodDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 219 : if (DEBUG) { System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInvalidConstructorDeclaration(true);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 220 : if (DEBUG) { System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInvalidConstructorDeclaration(false);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 231 : if (DEBUG) { System.out.println(\"PushLeftBrace ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumePushLeftBrace();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 232 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace ,opt RBRACE\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyArrayInitializer();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 233 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeArrayInitializer();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 234 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeArrayInitializer();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 236 : if (DEBUG) { System.out.println(\"VariableInitializers ::= VariableInitializers COMMA...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeVariableInitializers();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 237 : if (DEBUG) { System.out.println(\"Block ::= OpenBlock LBRACE BlockStatementsopt RBRACE\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBlock();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 238 : if (DEBUG) { System.out.println(\"OpenBlock ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeOpenBlock() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 240 : if (DEBUG) { System.out.println(\"BlockStatements ::= BlockStatements BlockStatement\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBlockStatements() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 244 : if (DEBUG) { System.out.println(\"BlockStatement ::= InterfaceDeclaration\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInvalidInterfaceDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 245 : if (DEBUG) { System.out.println(\"BlockStatement ::= AnnotationTypeDeclaration\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInvalidAnnotationTypeDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 246 : if (DEBUG) { System.out.println(\"BlockStatement ::= EnumDeclaration\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInvalidEnumDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 247 : if (DEBUG) { System.out.println(\"LocalVariableDeclarationStatement ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeLocalVariableDeclarationStatement();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 248 : if (DEBUG) { System.out.println(\"LocalVariableDeclaration ::= Type PushModifiers...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeLocalVariableDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 249 : if (DEBUG) { System.out.println(\"LocalVariableDeclaration ::= Modifiers Type...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeLocalVariableDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 250 : if (DEBUG) { System.out.println(\"PushModifiers ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumePushModifiers();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 251 : if (DEBUG) { System.out.println(\"PushModifiersForHeader ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumePushModifiersForHeader();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 252 : if (DEBUG) { System.out.println(\"PushRealModifiers ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumePushRealModifiers();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 279 : if (DEBUG) { System.out.println(\"EmptyStatement ::= SEMICOLON\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyStatement();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 280 : if (DEBUG) { System.out.println(\"LabeledStatement ::= Label COLON Statement\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementLabel() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 281 : if (DEBUG) { System.out.println(\"LabeledStatementNoShortIf ::= Label COLON...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementLabel() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 282 : if (DEBUG) { System.out.println(\"Label ::= Identifier\"); }  //$NON-NLS-1$\r", "+\t\t    consumeLabel() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 283 : if (DEBUG) { System.out.println(\"ExpressionStatement ::= StatementExpression SEMICOLON\"); }  //$NON-NLS-1$\r", "+\t\t    consumeExpressionStatement();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 292 : if (DEBUG) { System.out.println(\"IfThenStatement ::= if LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementIfNoElse();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 293 : if (DEBUG) { System.out.println(\"IfThenElseStatement ::= if LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementIfWithElse();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 294 : if (DEBUG) { System.out.println(\"IfThenElseStatementNoShortIf ::= if LPAREN Expression...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementIfWithElse();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 295 : if (DEBUG) { System.out.println(\"SwitchStatement ::= switch LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementSwitch() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 296 : if (DEBUG) { System.out.println(\"SwitchBlock ::= LBRACE RBRACE\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptySwitchBlock() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 299 : if (DEBUG) { System.out.println(\"SwitchBlock ::= LBRACE SwitchBlockStatements...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeSwitchBlock() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 301 : if (DEBUG) { System.out.println(\"SwitchBlockStatements ::= SwitchBlockStatements...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeSwitchBlockStatements() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 302 : if (DEBUG) { System.out.println(\"SwitchBlockStatement ::= SwitchLabels BlockStatements\"); }  //$NON-NLS-1$\r", "+\t\t    consumeSwitchBlockStatement() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 304 : if (DEBUG) { System.out.println(\"SwitchLabels ::= SwitchLabels SwitchLabel\"); }  //$NON-NLS-1$\r", "+\t\t    consumeSwitchLabels() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 305 : if (DEBUG) { System.out.println(\"SwitchLabel ::= case ConstantExpression COLON\"); }  //$NON-NLS-1$\r", "+\t\t    consumeCaseLabel();  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 306 : if (DEBUG) { System.out.println(\"SwitchLabel ::= default COLON\"); }  //$NON-NLS-1$\r", "+\t\t    consumeDefaultLabel();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 307 : if (DEBUG) { System.out.println(\"WhileStatement ::= while LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementWhile() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 308 : if (DEBUG) { System.out.println(\"WhileStatementNoShortIf ::= while LPAREN Expression...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementWhile() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 309 : if (DEBUG) { System.out.println(\"DoStatement ::= do Statement while LPAREN Expression...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementDo() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 310 : if (DEBUG) { System.out.println(\"ForStatement ::= for LPAREN ForInitopt SEMICOLON...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementFor() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 311 : if (DEBUG) { System.out.println(\"ForStatementNoShortIf ::= for LPAREN ForInitopt...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementFor() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 312 : if (DEBUG) { System.out.println(\"ForInit ::= StatementExpressionList\"); }  //$NON-NLS-1$\r", "+\t\t    consumeForInit() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 316 : if (DEBUG) { System.out.println(\"StatementExpressionList ::= StatementExpressionList...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementExpressionList() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 317 : if (DEBUG) { System.out.println(\"AssertStatement ::= assert Expression SEMICOLON\"); }  //$NON-NLS-1$\r", "+\t\t    consumeSimpleAssertStatement() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 318 : if (DEBUG) { System.out.println(\"AssertStatement ::= assert Expression COLON Expression\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAssertStatement() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 319 : if (DEBUG) { System.out.println(\"BreakStatement ::= break SEMICOLON\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementBreak() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 320 : if (DEBUG) { System.out.println(\"BreakStatement ::= break Identifier SEMICOLON\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementBreakWithLabel() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 321 : if (DEBUG) { System.out.println(\"ContinueStatement ::= continue SEMICOLON\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementContinue() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 322 : if (DEBUG) { System.out.println(\"ContinueStatement ::= continue Identifier SEMICOLON\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementContinueWithLabel() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 323 : if (DEBUG) { System.out.println(\"ReturnStatement ::= return Expressionopt SEMICOLON\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementReturn() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 324 : if (DEBUG) { System.out.println(\"ThrowStatement ::= throw Expression SEMICOLON\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementThrow();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 325 : if (DEBUG) { System.out.println(\"SynchronizedStatement ::= OnlySynchronized LPAREN...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementSynchronized();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 326 : if (DEBUG) { System.out.println(\"OnlySynchronized ::= synchronized\"); }  //$NON-NLS-1$\r", "+\t\t    consumeOnlySynchronized();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 327 : if (DEBUG) { System.out.println(\"TryStatement ::= try TryBlock Catches\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementTry(false, false);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 328 : if (DEBUG) { System.out.println(\"TryStatement ::= try TryBlock Catchesopt Finally\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementTry(true, false);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 329 : if (DEBUG) { System.out.println(\"TryStatementWithResources ::= try ResourceSpecification\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementTry(false, true);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 330 : if (DEBUG) { System.out.println(\"TryStatementWithResources ::= try ResourceSpecification\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementTry(true, true);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 331 : if (DEBUG) { System.out.println(\"ResourceSpecification ::= LPAREN Resources ;opt RPAREN\"); }  //$NON-NLS-1$\r", "+\t\t    consumeResourceSpecification();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 332 : if (DEBUG) { System.out.println(\";opt ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeResourceOptionalTrailingSemiColon(false);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 333 : if (DEBUG) { System.out.println(\";opt ::= SEMICOLON\"); }  //$NON-NLS-1$\r", "+\t\t    consumeResourceOptionalTrailingSemiColon(true);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 334 : if (DEBUG) { System.out.println(\"Resources ::= Resource\"); }  //$NON-NLS-1$\r", "+\t\t    consumeSingleResource();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 335 : if (DEBUG) { System.out.println(\"Resources ::= Resources TrailingSemiColon Resource\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMultipleResources();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 336 : if (DEBUG) { System.out.println(\"TrailingSemiColon ::= SEMICOLON\"); }  //$NON-NLS-1$\r", "+\t\t    consumeResourceOptionalTrailingSemiColon(true);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 337 : if (DEBUG) { System.out.println(\"Resource ::= Type PushModifiers VariableDeclaratorId...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeResourceAsLocalVariableDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 338 : if (DEBUG) { System.out.println(\"Resource ::= Modifiers Type PushRealModifiers...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeResourceAsLocalVariableDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 340 : if (DEBUG) { System.out.println(\"ExitTryBlock ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeExitTryBlock();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 342 : if (DEBUG) { System.out.println(\"Catches ::= Catches CatchClause\"); }  //$NON-NLS-1$\r", "+\t\t    consumeCatches();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 343 : if (DEBUG) { System.out.println(\"CatchClause ::= catch LPAREN CatchFormalParameter RPAREN\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStatementCatch() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 345 : if (DEBUG) { System.out.println(\"PushLPAREN ::= LPAREN\"); }  //$NON-NLS-1$\r", "+\t\t    consumeLeftParen();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 346 : if (DEBUG) { System.out.println(\"PushRPAREN ::= RPAREN\"); }  //$NON-NLS-1$\r", "+\t\t    consumeRightParen();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 351 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= this\"); }  //$NON-NLS-1$\r", "+\t\t    consumePrimaryNoNewArrayThis();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 352 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Expression_NotName...\"); }  //$NON-NLS-1$\r", "+\t\t    consumePrimaryNoNewArray();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 353 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Name PushRPAREN\"); }  //$NON-NLS-1$\r", "+\t\t    consumePrimaryNoNewArrayWithName();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 356 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT this\"); }  //$NON-NLS-1$\r", "+\t\t    consumePrimaryNoNewArrayNameThis();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 357 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT super\"); }  //$NON-NLS-1$\r", "+\t\t    consumePrimaryNoNewArrayNameSuper();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 358 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT class\"); }  //$NON-NLS-1$\r", "+\t\t    consumePrimaryNoNewArrayName();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 359 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name Dims DOT class\"); }  //$NON-NLS-1$\r", "+\t\t    consumePrimaryNoNewArrayArrayType();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 360 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PrimitiveType Dims DOT class\"); }  //$NON-NLS-1$\r", "+\t\t    consumePrimaryNoNewArrayPrimitiveArrayType();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 361 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PrimitiveType DOT class\"); }  //$NON-NLS-1$\r", "+\t\t    consumePrimaryNoNewArrayPrimitiveType();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 364 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAllocationHeader();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 365 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassInstanceCreationExpressionWithTypeArguments();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 366 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassInstanceCreationExpression();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 367 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassInstanceCreationExpressionQualifiedWithTypeArguments() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 368 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassInstanceCreationExpressionQualified() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 369 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassInstanceCreationExpressionQualified() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 370 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassInstanceCreationExpressionQualifiedWithTypeArguments() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 371 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnterInstanceCreationArgumentList();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 372 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassInstanceCreationExpressionName() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 373 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassBodyopt();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 375 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnterAnonymousClassBody(false);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 376 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassBodyopt();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 378 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnterAnonymousClassBody(true);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 380 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$\r", "+\t\t    consumeArgumentList();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 381 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeArrayCreationHeader();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 382 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeArrayCreationHeader();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 383 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeArrayCreationExpressionWithoutInitializer();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 384 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$\r", "+\t\t    consumeArrayCreationExpressionWithInitializer();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 385 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeArrayCreationExpressionWithoutInitializer();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 386 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeArrayCreationExpressionWithInitializer();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 388 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeDimWithOrWithOutExprs();  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 390 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$\r", "+\t\t    consumeDimWithOrWithOutExpr();  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 391 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$\r", "+\t\t    consumeDims();  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 394 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$\r", "+\t\t    consumeOneDimLoop();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 395 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$\r", "+\t\t    consumeFieldAccess(false);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 396 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$\r", "+\t\t    consumeFieldAccess(true);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 397 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMethodInvocationName();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 398 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMethodInvocationNameWithTypeArguments();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 399 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMethodInvocationPrimaryWithTypeArguments();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 400 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMethodInvocationPrimary();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 401 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMethodInvocationSuperWithTypeArguments();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 402 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMethodInvocationSuper();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 403 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$\r", "+\t\t    consumeArrayAccess(true);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 404 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeArrayAccess(false);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 405 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeArrayAccess(false);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 407 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$\r", "+\t\t    consumePostfixExpression();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 410 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$\r", "+\t\t    consumeUnaryExpression(OperatorIds.PLUS,true);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 411 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeUnaryExpression(OperatorIds.MINUS,true);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 412 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumePushPosition();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 415 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$\r", "+\t\t    consumeUnaryExpression(OperatorIds.PLUS);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 416 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$\r", "+\t\t    consumeUnaryExpression(OperatorIds.MINUS);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 418 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeUnaryExpression(OperatorIds.PLUS,false);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 419 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeUnaryExpression(OperatorIds.MINUS,false);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 421 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 422 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeUnaryExpression(OperatorIds.NOT);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 424 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeCastExpressionWithPrimitiveType();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 425 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeCastExpressionWithGenericsArray();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 426 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeCastExpressionWithQualifiedGenericsArray();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 427 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeCastExpressionLL1();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 428 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeCastExpressionWithNameArray();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 429 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$\r", "+\t\t    consumeOnlyTypeArgumentsForCastExpression();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 430 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInsideCastExpression();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 431 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInsideCastExpressionLL1();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 432 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInsideCastExpressionWithQualifiedGenerics();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 434 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 435 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 436 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 438 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.PLUS);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 439 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.MINUS);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 441 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 442 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 443 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 445 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.LESS);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 446 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 447 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 448 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 450 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInstanceOfExpression();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 452 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 453 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 455 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.AND);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 457 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.XOR);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 459 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.OR);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 461 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.AND_AND);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 463 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.OR_OR);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 465 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 468 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAssignment();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 470 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$\r", "+\t\t    ignoreExpressionAssignment(); \r", "+\t\t\tbreak;\r", "+ \r", "+    case 471 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAssignmentOperator(EQUAL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 472 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAssignmentOperator(MULTIPLY);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 473 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAssignmentOperator(DIVIDE);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 474 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAssignmentOperator(REMAINDER);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 475 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAssignmentOperator(PLUS);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 476 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAssignmentOperator(MINUS);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 477 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAssignmentOperator(LEFT_SHIFT);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 478 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAssignmentOperator(RIGHT_SHIFT);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 479 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 480 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAssignmentOperator(AND);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 481 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAssignmentOperator(XOR);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 482 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAssignmentOperator(OR);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 486 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyExpression();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 491 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyClassBodyDeclarationsopt();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 492 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeClassBodyDeclarationsopt();  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 493 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeDefaultModifiers();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 494 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$\r", "+\t\t    consumeModifiers();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 495 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyBlockStatementsopt();  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 497 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyDimsopt();  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 499 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyArgumentListopt();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 503 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeFormalParameterListopt();  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 507 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyInterfaceMemberDeclarationsopt();  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 508 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInterfaceMemberDeclarationsopt();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 509 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeNestedType();  \r", "+\t\t\tbreak;\r", "+\r", "+     case 510 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyForInitopt();  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 512 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyForUpdateopt();  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 516 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyCatchesopt();  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 518 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnumDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 519 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnumHeader();  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 520 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnumHeaderName();  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 521 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnumHeaderNameWithTypeParameters();  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 522 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnumBodyNoConstants();  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 523 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnumBodyNoConstants();  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 524 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnumBodyWithConstants();  \r", "+\t\t\tbreak;\r", "+ \r", "+     case 525 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnumBodyWithConstants();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 527 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnumConstants();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 528 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnumConstantHeaderName();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 529 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnumConstantHeader();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 530 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnumConstantWithClassBody();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 531 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnumConstantNoClassBody();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 532 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$\r", "+\t\t    consumeArguments();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 533 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyArguments();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 535 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnumDeclarations();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 536 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyEnumDeclarations();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 538 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnhancedForStatement();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 539 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnhancedForStatement();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 540 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnhancedForStatementHeaderInit(false);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 541 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnhancedForStatementHeaderInit(true);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 542 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnhancedForStatementHeader();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 543 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeImportDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 544 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$\r", "+\t\t    consumeSingleStaticImportDeclarationName();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 545 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeImportDeclaration();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 546 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeStaticImportOnDemandDeclarationName();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 547 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeArguments();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 548 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$\r", "+\t\t    consumeOnlyTypeArguments();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 550 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeArgumentList1();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 552 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeArgumentList();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 553 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeArgument();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 557 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$\r", "+\t\t    consumeReferenceType1();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 558 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeArgumentReferenceType1();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 560 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeArgumentList2();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 563 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$\r", "+\t\t    consumeReferenceType2();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 564 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeArgumentReferenceType2();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 566 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeArgumentList3();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 569 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$\r", "+\t\t    consumeReferenceType3();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 570 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$\r", "+\t\t    consumeWildcard();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 571 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$\r", "+\t\t    consumeWildcardWithBounds();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 572 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$\r", "+\t\t    consumeWildcardBoundsExtends();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 573 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$\r", "+\t\t    consumeWildcardBoundsSuper();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 574 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$\r", "+\t\t    consumeWildcard1();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 575 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$\r", "+\t\t    consumeWildcard1WithBounds();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 576 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$\r", "+\t\t    consumeWildcardBounds1Extends();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 577 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$\r", "+\t\t    consumeWildcardBounds1Super();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 578 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$\r", "+\t\t    consumeWildcard2();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 579 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$\r", "+\t\t    consumeWildcard2WithBounds();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 580 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$\r", "+\t\t    consumeWildcardBounds2Extends();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 581 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$\r", "+\t\t    consumeWildcardBounds2Super();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 582 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$\r", "+\t\t    consumeWildcard3();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 583 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$\r", "+\t\t    consumeWildcard3WithBounds();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 584 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$\r", "+\t\t    consumeWildcardBounds3Extends();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 585 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$\r", "+\t\t    consumeWildcardBounds3Super();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 586 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= Identifier\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeParameterHeader();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 587 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeParameters();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 589 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeParameterList();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 591 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeParameterWithExtends();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 592 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeParameterWithExtendsAndBounds();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 594 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAdditionalBoundList();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 595 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAdditionalBound();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 597 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeParameterList1();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 598 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeParameter1();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 599 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeParameter1WithExtends();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 600 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeTypeParameter1WithExtendsAndBounds();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 602 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAdditionalBoundList1();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 603 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAdditionalBound1();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 609 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeUnaryExpression(OperatorIds.PLUS);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 610 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeUnaryExpression(OperatorIds.MINUS);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 613 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 614 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$\r", "+\t\t    consumeUnaryExpression(OperatorIds.NOT);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 617 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 618 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.MULTIPLY);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 619 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 620 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.DIVIDE);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 621 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 622 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.REMAINDER);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 624 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.PLUS);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 625 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.PLUS);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 626 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.MINUS);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 627 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.MINUS);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 629 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 630 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LEFT_SHIFT);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 631 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 632 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.RIGHT_SHIFT);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 633 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 634 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.UNSIGNED_RIGHT_SHIFT);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 636 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.LESS);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 637 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 638 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 639 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 640 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 641 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS_EQUAL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 642 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 643 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER_EQUAL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 645 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInstanceOfExpressionWithName();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 646 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeInstanceOfExpression();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 648 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 649 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEqualityExpressionWithName(OperatorIds.EQUAL_EQUAL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 650 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 651 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEqualityExpressionWithName(OperatorIds.NOT_EQUAL);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 653 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.AND);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 654 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.AND);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 656 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.XOR);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 657 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.XOR);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 659 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.OR);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 660 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.OR);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 662 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.AND_AND);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 663 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.AND_AND);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 665 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpression(OperatorIds.OR_OR);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 666 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.OR_OR);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 668 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 669 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeConditionalExpressionWithName(OperatorIds.QUESTIONCOLON) ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 673 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAnnotationTypeDeclarationHeaderName() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 674 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 675 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 676 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAnnotationTypeDeclarationHeaderName() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 677 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAnnotationTypeDeclarationHeader() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 678 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAnnotationTypeDeclaration() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 680 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyAnnotationTypeMemberDeclarationsopt() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 681 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAnnotationTypeMemberDeclarationsopt() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 683 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAnnotationTypeMemberDeclarations() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 684 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMethodHeaderNameWithTypeParameters(true);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 685 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMethodHeaderName(true);  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 686 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyMethodHeaderDefaultValue() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 687 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMethodHeaderDefaultValue();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 688 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMethodHeader();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 689 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAnnotationTypeMemberDeclaration() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 697 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$\r", "+\t\t    consumeAnnotationName() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 698 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeNormalAnnotation() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 699 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyMemberValuePairsopt() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 702 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMemberValuePairs() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 703 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMemberValuePair() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 704 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnterMemberValue() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 705 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeExitMemberValue() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 707 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMemberValueAsName() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 710 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMemberValueArrayInitializer() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 711 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMemberValueArrayInitializer() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 712 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyMemberValueArrayInitializer() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 713 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEmptyMemberValueArrayInitializer() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 714 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$\r", "+\t\t    consumeEnterMemberValueArrayInitializer() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 716 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMemberValues() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 717 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMarkerAnnotation() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 718 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$\r", "+\t\t    consumeSingleMemberAnnotationMemberValue() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 719 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeSingleMemberAnnotation() ;  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 720 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$\r", "+\t\t    consumeRecoveryMethodHeaderNameWithTypeParameters();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 721 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeRecoveryMethodHeaderName();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 722 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMethodHeader();  \r", "+\t\t\tbreak;\r", "+ \r", "+    case 723 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$\r", "+\t\t    consumeMethodHeader();  \r", "+\t\t\tbreak;\r", "+ \r", "+\t}\r", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d7fdeb3c2b9699b2dc325e9da593374", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "4c7ffc8f979360df3ec8695cb788c31f631aece3", "commitAfterChange": "e2b84708e7e9f1a0476422497e11c18bab983558", "methodNumberBeforeChange": 246, "methodNumberAfterChange": 245, "signatureBeforeChange": " protected void consumeRule(int act)", "signatureAfterChange": " protected void consumeRule(int act)", "diff": ["-    case 351 : if (DEBUG) { System.out.println(\"ClassBodySimpleNameopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeClassBodyopt();  ", "-\t\t\tbreak;", "- ", "-    case 353 : if (DEBUG) { System.out.println(\"EnterAnonymousClassBodySimpleName ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEnterAnonymousClassBodySimpleName();  ", "-\t\t\tbreak;", "- ", "-    case 354 : if (DEBUG) { System.out.println(\"EnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 351 : if (DEBUG) { System.out.println(\"EnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 356 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "+    case 353 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "-    case 357 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "+    case 354 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "-    case 358 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "+    case 355 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "-    case 359 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 356 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 360 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "+    case 357 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "-    case 361 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 358 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 362 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 359 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 364 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "+    case 361 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "-     case 366 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 363 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-     case 367 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "+     case 364 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "-     case 370 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 367 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-    case 371 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "+    case 368 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "-    case 372 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "+    case 369 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "-    case 373 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+    case 370 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-    case 374 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 371 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 375 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 372 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 376 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 373 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 377 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 374 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 378 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 375 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 379 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "+    case 376 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "-    case 380 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "+    case 377 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "-    case 381 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "+    case 378 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "-    case 383 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "+    case 380 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "-    case 386 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "+    case 383 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "-    case 387 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "+    case 384 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "-    case 388 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "+    case 385 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "-    case 391 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 388 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 392 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 389 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 394 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 391 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 395 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 392 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 397 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "+    case 394 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "-    case 398 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "+    case 395 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "-    case 400 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "+    case 397 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "-    case 401 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 398 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 402 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 399 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 403 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "+    case 400 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "-    case 404 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\"); }  //$NON-NLS-1$", "+    case 401 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\"); }  //$NON-NLS-1$", "-    case 405 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "+    case 402 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "-    case 406 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "+    case 403 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "-    case 407 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "+    case 404 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "-    case 408 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "+    case 405 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "-    case 410 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "+    case 407 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-    case 411 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "+    case 408 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-    case 412 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "+    case 409 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-    case 414 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "+    case 411 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "-    case 415 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "+    case 412 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "-    case 417 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 414 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 418 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 415 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 419 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 416 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 421 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "+    case 418 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "-    case 422 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "+    case 419 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "-    case 423 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "+    case 420 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "-    case 424 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "+    case 421 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "-    case 426 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "+    case 423 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "-    case 428 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "+    case 425 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-    case 429 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "+    case 426 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "-    case 431 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "+    case 428 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "-    case 433 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "+    case 430 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "-    case 435 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "+    case 432 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "-    case 437 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "+    case 434 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "-    case 439 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "+    case 436 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 441 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "+    case 438 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 444 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "+    case 441 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "-    case 446 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "+    case 443 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "-    case 447 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "+    case 444 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "-    case 448 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "+    case 445 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "-    case 449 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "+    case 446 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "-    case 450 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "+    case 447 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "-    case 451 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "+    case 448 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "-    case 452 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "+    case 449 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "-    case 453 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+    case 450 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-    case 454 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+    case 451 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-    case 455 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+    case 452 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-    case 456 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "+    case 453 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "-    case 457 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "+    case 454 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "-    case 458 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "+    case 455 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "-    case 462 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "+    case 459 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "-    case 467 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 464 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 468 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+    case 465 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-     case 469 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "+     case 466 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "-    case 470 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "+    case 467 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "-    case 471 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "+    case 468 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "-     case 473 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "+     case 470 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "-     case 475 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "+     case 472 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "-    case 479 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "+    case 476 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "-     case 483 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+     case 480 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-     case 484 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+     case 481 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-    case 485 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "+    case 482 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "-     case 486 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "+     case 483 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "-     case 488 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "+     case 485 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "-     case 492 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "+     case 489 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "-     case 494 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "+     case 491 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "-     case 495 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "+     case 492 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "-     case 496 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "+     case 493 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "-     case 497 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "+     case 494 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "-     case 498 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "+     case 495 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "-     case 499 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "+     case 496 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "-     case 500 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "+     case 497 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "-    case 502 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "+    case 499 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "-    case 503 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+    case 500 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-    case 504 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "+    case 501 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "-    case 505 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "+    case 502 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "-    case 506 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "+    case 503 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "-    case 507 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+    case 504 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-    case 508 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "+    case 505 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "-    case 510 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "+    case 507 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "-    case 511 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 508 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 513 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "+    case 510 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "-    case 514 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "+    case 511 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "-    case 515 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "+    case 512 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "-    case 516 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::= for LPAREN Modifiers Type\"); }  //$NON-NLS-1$", "+    case 513 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::= for LPAREN Modifiers Type\"); }  //$NON-NLS-1$", "-    case 517 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 514 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 518 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "+    case 515 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "-    case 519 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 516 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 520 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "+    case 517 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "-    case 521 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+    case 518 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-    case 522 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+    case 519 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-    case 524 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+    case 521 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-    case 526 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "+    case 523 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "-    case 527 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "+    case 524 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "-    case 531 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "+    case 528 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "-    case 532 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+    case 529 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-    case 534 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+    case 531 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-    case 537 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 534 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 538 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+    case 535 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-    case 540 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+    case 537 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-    case 543 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 540 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 544 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "+    case 541 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "-    case 545 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "+    case 542 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "-    case 546 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "+    case 543 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "-    case 547 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "+    case 544 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "-    case 548 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "+    case 545 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "-    case 549 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "+    case 546 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "-    case 550 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "+    case 547 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "-    case 551 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "+    case 548 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "-    case 552 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 549 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 553 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "+    case 550 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "-    case 554 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "+    case 551 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "-    case 555 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "+    case 552 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "-    case 556 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 553 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 557 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "+    case 554 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "-    case 558 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "+    case 555 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "-    case 559 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "+    case 556 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "-    case 560 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= Identifier\"); }  //$NON-NLS-1$", "+    case 557 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= Identifier\"); }  //$NON-NLS-1$", "-    case 561 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "+    case 558 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "-    case 563 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+    case 560 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-    case 565 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 562 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 566 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 563 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 568 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+    case 565 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-    case 569 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "+    case 566 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "-    case 571 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+    case 568 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-    case 572 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "+    case 569 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "-    case 573 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 570 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 574 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 571 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 576 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+    case 573 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-    case 577 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "+    case 574 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "-    case 583 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 580 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 584 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 581 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 587 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "+    case 584 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "-    case 588 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "+    case 585 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "-    case 591 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 588 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 592 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "+    case 589 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "-    case 593 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 590 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 594 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "+    case 591 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "-    case 595 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 592 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 596 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "+    case 593 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "-    case 598 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 595 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 599 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "+    case 596 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "-    case 600 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 597 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 601 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "+    case 598 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "-    case 603 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 600 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-    case 604 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 601 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 605 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 602 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-    case 606 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 603 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 607 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 604 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-    case 608 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 605 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 610 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 607 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "-    case 611 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "+    case 608 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "-    case 612 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 609 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "-    case 613 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "+    case 610 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "-    case 614 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 611 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 615 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "+    case 612 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "-    case 616 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 613 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 617 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "+    case 614 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "-    case 619 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "+    case 616 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "-    case 620 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 617 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 622 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 619 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 623 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "+    case 620 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-    case 624 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 621 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 625 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "+    case 622 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "-    case 627 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "+    case 624 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "-    case 628 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "+    case 625 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "-    case 630 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 627 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 631 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "+    case 628 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "-    case 633 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 630 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 634 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "+    case 631 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "-    case 636 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 633 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 637 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "+    case 634 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "-    case 639 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 636 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 640 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "+    case 637 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "-    case 642 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 639 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 643 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "+    case 640 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "-    case 647 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+    case 644 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-    case 648 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "+    case 645 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "-    case 649 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "+    case 646 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "-    case 650 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 647 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 652 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 649 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 655 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "+    case 652 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "-    case 656 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "+    case 653 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "-    case 657 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 654 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 658 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "+    case 655 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "-    case 659 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "+    case 656 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "-    case 660 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 657 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 661 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 658 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 669 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "+    case 666 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "-    case 670 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 667 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 671 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "+    case 668 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "-    case 674 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "+    case 671 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "-    case 675 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL MemberValue\"); }  //$NON-NLS-1$", "+    case 672 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL MemberValue\"); }  //$NON-NLS-1$", "-    case 677 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "+    case 674 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "+    case 677 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$", "+\t\t    consumeMemberValueArrayInitializer() ;  ", "+\t\t\tbreak;", "+ ", "+    case 678 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$", "+\t\t    consumeMemberValueArrayInitializer() ;  ", "+\t\t\tbreak;", "+ ", "+    case 679 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "+\t\t\tbreak;", "+ ", "-\t\t    consumeMemberValueArrayInitializer() ;  ", "-\t\t\tbreak;", "- ", "-    case 681 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$", "-\t\t    consumeMemberValueArrayInitializer() ;  ", "-\t\t\tbreak;", "- ", "-    case 682 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$", "-    case 683 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "-\t\t\tbreak;", "- ", "-    case 685 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "+    case 682 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "-    case 686 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "+    case 683 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "-    case 687 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 684 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 688 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "+    case 685 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "-    case 689 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 686 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 690 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 687 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 691 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 688 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "931cf582cf5669f724ca91c2a1b38cdc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "b8b3839a1d01bd0c34b76a834d303ec2a9c448d9", "commitAfterChange": "62a40ae820eb3f4d9fe13acbfcd6c17882e53721", "methodNumberBeforeChange": 281, "methodNumberAfterChange": 281, "signatureBeforeChange": " protected void consumeRule(int act)", "signatureAfterChange": " protected void consumeRule(int act)", "diff": ["-\t\t    consumeReferenceExpressionTypeForm(true, true);  ", "+\t\t    consumeReferenceExpressionTypeForm(true);  ", "-    case 395 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name Dims COLON_COLON...\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceExpressionTypeForm(false, true);  ", "+    case 395 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name Dimsopt COLON_COLON...\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceExpressionTypeForm(false);  ", "-    case 396 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name COLON_COLON...\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceExpressionTypeForm(false, false);  ", "-\t\t\tbreak;", "- ", "-    case 397 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name BeginTypeArguments...\"); }  //$NON-NLS-1$", "+    case 396 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name BeginTypeArguments...\"); }  //$NON-NLS-1$", "-    case 398 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Primary COLON_COLON...\"); }  //$NON-NLS-1$", "+    case 397 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Primary COLON_COLON...\"); }  //$NON-NLS-1$", "-    case 399 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= super COLON_COLON...\"); }  //$NON-NLS-1$", "+    case 398 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= super COLON_COLON...\"); }  //$NON-NLS-1$", "-    case 400 : if (DEBUG) { System.out.println(\"NonWildTypeArgumentsopt ::=\"); }  //$NON-NLS-1$", "+    case 399 : if (DEBUG) { System.out.println(\"NonWildTypeArgumentsopt ::=\"); }  //$NON-NLS-1$", "-    case 402 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= Identifier\"); }  //$NON-NLS-1$", "+    case 401 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= Identifier\"); }  //$NON-NLS-1$", "-    case 403 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= new\"); }  //$NON-NLS-1$", "+    case 402 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= new\"); }  //$NON-NLS-1$", "-    case 404 : if (DEBUG) { System.out.println(\"LambdaExpression ::= LambdaParameters ARROW LambdaBody\"); }  //$NON-NLS-1$", "+    case 403 : if (DEBUG) { System.out.println(\"LambdaExpression ::= LambdaParameters ARROW LambdaBody\"); }  //$NON-NLS-1$", "-    case 405 : if (DEBUG) { System.out.println(\"LambdaParameters ::= Identifier\"); }  //$NON-NLS-1$", "+    case 404 : if (DEBUG) { System.out.println(\"LambdaParameters ::= Identifier\"); }  //$NON-NLS-1$", "-    case 410 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameterList ::=...\"); }  //$NON-NLS-1$", "+    case 409 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameterList ::=...\"); }  //$NON-NLS-1$", "-    case 411 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameter ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+    case 410 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameter ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-    case 413 : if (DEBUG) { System.out.println(\"LambdaBody ::= NestedType NestedMethod LBRACE...\"); }  //$NON-NLS-1$", "+    case 412 : if (DEBUG) { System.out.println(\"LambdaBody ::= NestedType NestedMethod LBRACE...\"); }  //$NON-NLS-1$", "-    case 414 : if (DEBUG) { System.out.println(\"ElidedLeftBraceAndReturn ::=\"); }  //$NON-NLS-1$", "+    case 413 : if (DEBUG) { System.out.println(\"ElidedLeftBraceAndReturn ::=\"); }  //$NON-NLS-1$", "-    case 415 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "+    case 414 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "-    case 416 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "+    case 415 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "-    case 417 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "+    case 416 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "-    case 418 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+    case 417 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-    case 419 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+    case 418 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "+\t\t\tbreak;", "+ ", "+    case 419 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "-\t\t\tbreak;", "- ", "-    case 421 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "-    case 422 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "+    case 421 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "-    case 423 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "+    case 422 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "-    case 424 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 423 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 426 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 425 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 427 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 426 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 429 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 428 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 431 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "+    case 430 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "-    case 432 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "+    case 431 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "-    case 433 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "+    case 432 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "-    case 434 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 433 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 435 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "+    case 434 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "-    case 436 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 435 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 437 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 436 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 439 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "+    case 438 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "-     case 441 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= TypeAnnotationsopt LBRACKET...\"); }  //$NON-NLS-1$", "+     case 440 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= TypeAnnotationsopt LBRACKET...\"); }  //$NON-NLS-1$", "-     case 442 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "+     case 441 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "-     case 445 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 444 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-     case 446 : if (DEBUG) { System.out.println(\"OneDimLoop ::= TypeAnnotations LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 445 : if (DEBUG) { System.out.println(\"OneDimLoop ::= TypeAnnotations LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-    case 447 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "+    case 446 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "-    case 448 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "+    case 447 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "-    case 449 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+    case 448 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-    case 450 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 449 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 451 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 450 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 452 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 451 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 453 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 452 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 454 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 453 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 455 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "+    case 454 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "-    case 456 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "+    case 455 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "-    case 457 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "+    case 456 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "-    case 459 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "+    case 458 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "-    case 462 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "+    case 461 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "-    case 463 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "+    case 462 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "-    case 464 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "+    case 463 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "-    case 467 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 466 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 468 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 467 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 470 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 469 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 471 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 470 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 473 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "+    case 472 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "-    case 474 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "+    case 473 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "-    case 476 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "+    case 475 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "-    case 477 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 476 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 478 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 477 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 479 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "+    case 478 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "-    case 480 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\"); }  //$NON-NLS-1$", "+    case 479 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\"); }  //$NON-NLS-1$", "-    case 481 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "+    case 480 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "-    case 482 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "+    case 481 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "-    case 483 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "+    case 482 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "-    case 484 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "+    case 483 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "-    case 486 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "+    case 485 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "+\t\t\tbreak;", "+ ", "+    case 486 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "-\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "-\t\t\tbreak;", "- ", "-    case 488 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-    case 490 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "+    case 489 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "-    case 491 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "+    case 490 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "-    case 493 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 492 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 494 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 493 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 495 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 494 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 497 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "+    case 496 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "-    case 498 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "+    case 497 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "-    case 499 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "+    case 498 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "-    case 500 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "+    case 499 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "-    case 502 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "+    case 501 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "-    case 504 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "+    case 503 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-    case 505 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "+    case 504 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "-    case 507 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "+    case 506 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "-    case 509 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "+    case 508 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "-    case 511 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "+    case 510 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "-    case 513 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "+    case 512 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "-    case 515 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "+    case 514 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 517 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "+    case 516 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 520 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "+    case 519 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "-    case 522 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "+    case 521 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "-    case 523 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "+    case 522 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "-    case 524 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "+    case 523 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "-    case 525 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "+    case 524 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "-    case 526 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "+    case 525 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "-    case 527 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "+    case 526 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "-    case 528 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "+    case 527 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "-    case 529 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+    case 528 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-    case 530 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+    case 529 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-    case 531 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+    case 530 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-    case 532 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "+    case 531 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "-    case 533 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "+    case 532 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "-    case 534 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "+    case 533 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "-    case 535 : if (DEBUG) { System.out.println(\"Expression ::= AssignmentExpression\"); }  //$NON-NLS-1$", "+    case 534 : if (DEBUG) { System.out.println(\"Expression ::= AssignmentExpression\"); }  //$NON-NLS-1$", "-    case 538 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "+    case 537 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "-    case 543 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 542 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 544 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+    case 543 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-     case 545 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "+     case 544 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "-    case 546 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "+    case 545 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "-    case 547 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "+    case 546 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "-     case 549 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "+     case 548 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "-     case 551 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "+     case 550 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "-    case 555 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "+    case 554 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "-     case 559 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+     case 558 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-     case 560 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+     case 559 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-    case 561 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "+    case 560 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "-     case 562 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "+     case 561 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "-     case 564 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "+     case 563 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "-     case 568 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "+     case 567 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "-     case 570 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "+     case 569 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "-     case 571 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "+     case 570 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "-     case 572 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "+     case 571 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "-     case 573 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "+     case 572 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "-     case 574 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "+     case 573 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "-     case 575 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "+     case 574 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "-     case 576 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "+     case 575 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "-     case 577 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "+     case 576 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "-    case 579 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "+    case 578 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "-    case 580 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+    case 579 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-    case 581 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "+    case 580 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "-    case 582 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "+    case 581 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "-    case 583 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "+    case 582 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "-    case 584 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+    case 583 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-    case 585 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "+    case 584 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "-    case 587 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "+    case 586 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "-    case 588 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 587 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 590 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "+    case 589 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "-    case 591 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "+    case 590 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "-    case 592 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "+    case 591 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "-    case 593 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "+    case 592 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "-    case 594 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "+    case 593 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "-    case 595 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 594 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 596 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "+    case 595 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "-    case 597 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 596 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 598 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "+    case 597 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "-    case 599 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+    case 598 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-    case 600 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+    case 599 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-    case 602 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+    case 601 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-    case 604 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "+    case 603 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "-    case 605 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "+    case 604 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "-    case 609 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "+    case 608 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "-    case 610 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+    case 609 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-    case 612 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+    case 611 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-    case 615 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 614 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 616 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+    case 615 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-    case 618 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+    case 617 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-    case 621 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 620 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 622 : if (DEBUG) { System.out.println(\"Wildcard ::= TypeAnnotationsopt QUESTION\"); }  //$NON-NLS-1$", "+    case 621 : if (DEBUG) { System.out.println(\"Wildcard ::= TypeAnnotationsopt QUESTION\"); }  //$NON-NLS-1$", "-    case 623 : if (DEBUG) { System.out.println(\"Wildcard ::= TypeAnnotationsopt QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "+    case 622 : if (DEBUG) { System.out.println(\"Wildcard ::= TypeAnnotationsopt QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "-    case 624 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "+    case 623 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "-    case 625 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "+    case 624 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "-    case 626 : if (DEBUG) { System.out.println(\"Wildcard1 ::= TypeAnnotationsopt QUESTION GREATER\"); }  //$NON-NLS-1$", "+    case 625 : if (DEBUG) { System.out.println(\"Wildcard1 ::= TypeAnnotationsopt QUESTION GREATER\"); }  //$NON-NLS-1$", "-    case 627 : if (DEBUG) { System.out.println(\"Wildcard1 ::= TypeAnnotationsopt QUESTION...\"); }  //$NON-NLS-1$", "+    case 626 : if (DEBUG) { System.out.println(\"Wildcard1 ::= TypeAnnotationsopt QUESTION...\"); }  //$NON-NLS-1$", "-    case 628 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "+    case 627 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "-    case 629 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "+    case 628 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "-    case 630 : if (DEBUG) { System.out.println(\"Wildcard2 ::= TypeAnnotationsopt QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 629 : if (DEBUG) { System.out.println(\"Wildcard2 ::= TypeAnnotationsopt QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 631 : if (DEBUG) { System.out.println(\"Wildcard2 ::= TypeAnnotationsopt QUESTION...\"); }  //$NON-NLS-1$", "+    case 630 : if (DEBUG) { System.out.println(\"Wildcard2 ::= TypeAnnotationsopt QUESTION...\"); }  //$NON-NLS-1$", "-    case 632 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "+    case 631 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "-    case 633 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "+    case 632 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "-    case 634 : if (DEBUG) { System.out.println(\"Wildcard3 ::= TypeAnnotationsopt QUESTION...\"); }  //$NON-NLS-1$", "+    case 633 : if (DEBUG) { System.out.println(\"Wildcard3 ::= TypeAnnotationsopt QUESTION...\"); }  //$NON-NLS-1$", "-    case 635 : if (DEBUG) { System.out.println(\"Wildcard3 ::= TypeAnnotationsopt QUESTION...\"); }  //$NON-NLS-1$", "+    case 634 : if (DEBUG) { System.out.println(\"Wildcard3 ::= TypeAnnotationsopt QUESTION...\"); }  //$NON-NLS-1$", "-    case 636 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "+    case 635 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "-    case 637 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "+    case 636 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "-    case 638 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= TypeAnnotationsopt Identifier\"); }  //$NON-NLS-1$", "+    case 637 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= TypeAnnotationsopt Identifier\"); }  //$NON-NLS-1$", "-    case 639 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "+    case 638 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "-    case 641 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+    case 640 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-    case 643 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 642 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 644 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 643 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 646 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+    case 645 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-    case 647 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "+    case 646 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "-    case 649 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+    case 648 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-    case 650 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "+    case 649 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "-    case 651 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 650 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 652 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 651 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 654 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+    case 653 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-    case 655 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "+    case 654 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "-    case 661 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 660 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 662 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 661 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 665 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "+    case 664 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "-    case 666 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "+    case 665 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "-    case 669 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 668 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 670 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "+    case 669 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "-    case 671 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 670 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 672 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "+    case 671 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "-    case 673 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 672 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 674 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "+    case 673 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "-    case 676 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 675 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 677 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "+    case 676 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "-    case 678 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 677 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 679 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "+    case 678 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "-    case 681 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 680 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-    case 682 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 681 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 683 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 682 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-    case 684 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 683 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 685 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 684 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-    case 686 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 685 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 688 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 687 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "-    case 689 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "+    case 688 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "-    case 690 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 689 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "-    case 691 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "+    case 690 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "-    case 692 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 691 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 693 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "+    case 692 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "-    case 694 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 693 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 695 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "+    case 694 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "-    case 697 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "+    case 696 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "-    case 698 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 697 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 700 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 699 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 701 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "+    case 700 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-    case 702 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 701 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 703 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "+    case 702 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "-    case 705 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "+    case 704 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "-    case 706 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "+    case 705 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "-    case 708 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 707 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 709 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "+    case 708 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "-    case 711 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 710 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 712 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "+    case 711 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "-    case 714 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 713 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 715 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "+    case 714 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "-    case 717 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 716 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 718 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "+    case 717 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "-    case 720 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 719 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 721 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "+    case 720 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "-    case 725 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+    case 724 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-    case 726 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+    case 725 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  ", "+\t\t\tbreak;", "+ ", "+    case 726 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  ", "-\t\t\tbreak;", "- ", "-    case 728 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "-    case 729 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "+    case 728 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "-    case 730 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 729 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 732 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 731 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 733 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+    case 732 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-    case 735 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "+    case 734 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "-    case 736 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "+    case 735 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "-    case 737 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 736 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 738 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "+    case 737 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "-    case 739 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "+    case 738 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "-    case 740 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 739 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 741 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 740 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 749 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT UnannotatableName\"); }  //$NON-NLS-1$", "+    case 748 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT UnannotatableName\"); }  //$NON-NLS-1$", "-    case 750 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 749 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 751 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "+    case 750 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "-    case 754 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "+    case 753 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "-    case 755 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "+    case 754 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "-    case 756 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 755 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 757 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 756 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 759 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "+    case 758 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "+\t\t\tbreak;", "+ ", "+    case 761 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeMemberValueArrayInitializer() ;  ", "-\t\t    consumeMemberValueArrayInitializer() ;  ", "+\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "-    case 765 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "-\t\t\tbreak;", "- ", "-    case 766 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "+    case 765 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "-    case 768 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "+    case 767 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "-    case 769 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "+    case 768 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "-    case 770 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "+    case 769 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "-    case 771 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 770 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 772 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "+    case 771 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "-    case 773 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 772 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 774 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 773 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 775 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 774 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d40b6d9b11239526eb4fac221b41eab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "047abe40ab7a5a9de6bfd3b315d2a8df0c72490c", "commitAfterChange": "6c444918609822229a1ad11436ec5fe99d77e005", "methodNumberBeforeChange": 271, "methodNumberAfterChange": 271, "signatureBeforeChange": " protected void consumeRule(int act)", "signatureAfterChange": " protected void consumeRule(int act)", "diff": ["-    case 373 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= super COLON_COLON...\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceExpressionSuperForm();  ", "-\t\t\tbreak;", "- ", "-    case 374 : if (DEBUG) { System.out.println(\"NonWildTypeArgumentsopt ::=\"); }  //$NON-NLS-1$", "+    case 373 : if (DEBUG) { System.out.println(\"NonWildTypeArgumentsopt ::=\"); }  //$NON-NLS-1$", "-    case 376 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= Identifier\"); }  //$NON-NLS-1$", "+    case 375 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= Identifier\"); }  //$NON-NLS-1$", "-    case 377 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= new\"); }  //$NON-NLS-1$", "+    case 376 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= new\"); }  //$NON-NLS-1$", "-    case 378 : if (DEBUG) { System.out.println(\"LambdaExpression ::= LambdaParameters ARROW LambdaBody\"); }  //$NON-NLS-1$", "+    case 377 : if (DEBUG) { System.out.println(\"LambdaExpression ::= LambdaParameters ARROW LambdaBody\"); }  //$NON-NLS-1$", "-    case 379 : if (DEBUG) { System.out.println(\"LambdaParameters ::= Identifier\"); }  //$NON-NLS-1$", "+    case 378 : if (DEBUG) { System.out.println(\"LambdaParameters ::= Identifier\"); }  //$NON-NLS-1$", "-    case 383 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameterList ::=...\"); }  //$NON-NLS-1$", "+    case 382 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameterList ::=...\"); }  //$NON-NLS-1$", "-    case 384 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameter ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+    case 383 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameter ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-    case 387 : if (DEBUG) { System.out.println(\"ElidedLeftBraceAndReturn ::=\"); }  //$NON-NLS-1$", "+    case 385 : if (DEBUG) { System.out.println(\"LambdaBody ::= NestedType NestedMethod LBRACE...\"); }  //$NON-NLS-1$", "+\t\t    consumeBlock();  ", "+\t\t\tbreak;", "+ ", "+    case 386 : if (DEBUG) { System.out.println(\"ElidedLeftBraceAndReturn ::=\"); }  //$NON-NLS-1$", "-    case 388 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "+    case 387 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "-    case 389 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "+    case 388 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "-    case 390 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "+    case 389 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "-    case 391 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+    case 390 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-    case 392 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+    case 391 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "+\t\t\tbreak;", "+ ", "+    case 392 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "-\t\t\tbreak;", "- ", "-    case 394 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "-    case 395 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "+    case 394 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "-    case 396 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "+    case 395 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "-    case 397 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 396 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 399 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 398 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 400 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 399 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 402 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 401 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 404 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "+    case 403 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "-    case 405 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "+    case 404 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "-    case 406 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "+    case 405 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "-    case 407 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 406 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 408 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "+    case 407 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "-    case 409 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 408 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 410 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 409 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 412 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "+    case 411 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "-     case 414 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 413 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-     case 415 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "+     case 414 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "-     case 418 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 417 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-    case 419 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "+    case 418 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "-    case 420 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "+    case 419 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "-    case 421 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+    case 420 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-    case 422 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 421 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 423 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 422 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 424 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 423 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 425 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 424 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 426 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 425 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 427 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "+    case 426 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "-    case 428 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "+    case 427 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "-    case 429 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "+    case 428 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "-    case 431 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "+    case 430 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "-    case 434 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "+    case 433 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "-    case 435 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "+    case 434 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "-    case 436 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "+    case 435 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "-    case 439 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 438 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 440 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 439 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 442 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 441 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 443 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 442 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 445 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "+    case 444 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "-    case 446 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "+    case 445 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "-    case 448 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "+    case 447 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "-    case 449 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 448 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 450 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 449 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 451 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "+    case 450 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "-    case 452 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\"); }  //$NON-NLS-1$", "+    case 451 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\"); }  //$NON-NLS-1$", "-    case 453 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "+    case 452 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "-    case 454 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "+    case 453 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "-    case 455 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "+    case 454 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "-    case 456 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "+    case 455 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "-    case 458 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "+    case 457 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "+\t\t\tbreak;", "+ ", "+    case 458 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "-\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "-\t\t\tbreak;", "- ", "-    case 460 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-    case 462 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "+    case 461 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "-    case 463 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "+    case 462 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "-    case 465 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 464 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 466 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 465 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 467 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 466 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 469 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "+    case 468 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "-    case 470 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "+    case 469 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "-    case 471 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "+    case 470 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "-    case 472 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "+    case 471 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "-    case 474 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "+    case 473 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "-    case 476 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "+    case 475 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-    case 477 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "+    case 476 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "-    case 479 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "+    case 478 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "-    case 481 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "+    case 480 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "-    case 483 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "+    case 482 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "-    case 485 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "+    case 484 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "-    case 487 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "+    case 486 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 489 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "+    case 488 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 492 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "+    case 491 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "-    case 494 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "+    case 493 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "-    case 495 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "+    case 494 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "-    case 496 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "+    case 495 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "-    case 497 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "+    case 496 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "-    case 498 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "+    case 497 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "-    case 499 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "+    case 498 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "-    case 500 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "+    case 499 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "-    case 501 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+    case 500 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-    case 502 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+    case 501 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-    case 503 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+    case 502 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-    case 504 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "+    case 503 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "-    case 505 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "+    case 504 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "-    case 506 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "+    case 505 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "-    case 507 : if (DEBUG) { System.out.println(\"Expression ::= AssignmentExpression\"); }  //$NON-NLS-1$", "+    case 506 : if (DEBUG) { System.out.println(\"Expression ::= AssignmentExpression\"); }  //$NON-NLS-1$", "-    case 510 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "+    case 509 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "-    case 515 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 514 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 516 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+    case 515 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-     case 517 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "+     case 516 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "-    case 518 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "+    case 517 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "-    case 519 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "+    case 518 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "-     case 521 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "+     case 520 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "-     case 523 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "+     case 522 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "-    case 527 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "+    case 526 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "-     case 531 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+     case 530 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-     case 532 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+     case 531 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-    case 533 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "+    case 532 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "-     case 534 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "+     case 533 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "-     case 536 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "+     case 535 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "-     case 540 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "+     case 539 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "-     case 542 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "+     case 541 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "-     case 543 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "+     case 542 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "-     case 544 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "+     case 543 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "-     case 545 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "+     case 544 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "-     case 546 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "+     case 545 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "-     case 547 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "+     case 546 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "-     case 548 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "+     case 547 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "-     case 549 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "+     case 548 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "-    case 551 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "+    case 550 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "-    case 552 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+    case 551 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-    case 553 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "+    case 552 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "-    case 554 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "+    case 553 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "-    case 555 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "+    case 554 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "-    case 556 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+    case 555 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-    case 557 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "+    case 556 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "-    case 559 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "+    case 558 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "-    case 560 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 559 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 562 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "+    case 561 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "-    case 563 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "+    case 562 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "-    case 564 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "+    case 563 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "-    case 565 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "+    case 564 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "-    case 566 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "+    case 565 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "-    case 567 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 566 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 568 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "+    case 567 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "-    case 569 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 568 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 570 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "+    case 569 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "-    case 571 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+    case 570 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-    case 572 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+    case 571 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-    case 574 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+    case 573 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-    case 576 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "+    case 575 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "-    case 577 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "+    case 576 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "-    case 581 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "+    case 580 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "-    case 582 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+    case 581 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-    case 584 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+    case 583 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-    case 587 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 586 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 588 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+    case 587 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-    case 590 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+    case 589 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-    case 593 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 592 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 594 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "+    case 593 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "-    case 595 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "+    case 594 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "-    case 596 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "+    case 595 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "-    case 597 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "+    case 596 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "-    case 598 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "+    case 597 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "-    case 599 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "+    case 598 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "-    case 600 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "+    case 599 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "-    case 601 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "+    case 600 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "-    case 602 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 601 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 603 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "+    case 602 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "-    case 604 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "+    case 603 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "-    case 605 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "+    case 604 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "-    case 606 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 605 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 607 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "+    case 606 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "-    case 608 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "+    case 607 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "-    case 609 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "+    case 608 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "-    case 610 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= Identifier\"); }  //$NON-NLS-1$", "+    case 609 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= Identifier\"); }  //$NON-NLS-1$", "-    case 611 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "+    case 610 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "-    case 613 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+    case 612 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-    case 615 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 614 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 616 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 615 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 618 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+    case 617 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-    case 619 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "+    case 618 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "-    case 621 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+    case 620 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-    case 622 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "+    case 621 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "-    case 623 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 622 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 624 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 623 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 626 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+    case 625 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-    case 627 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "+    case 626 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "-    case 633 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 632 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 634 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 633 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 637 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "+    case 636 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "-    case 638 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "+    case 637 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "-    case 641 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 640 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 642 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "+    case 641 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "-    case 643 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 642 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 644 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "+    case 643 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "-    case 645 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 644 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 646 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "+    case 645 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "-    case 648 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 647 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 649 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "+    case 648 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "-    case 650 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 649 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 651 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "+    case 650 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "-    case 653 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 652 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-    case 654 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 653 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 655 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 654 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-    case 656 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 655 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 657 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 656 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-    case 658 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 657 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 660 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 659 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "-    case 661 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "+    case 660 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "-    case 662 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 661 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "-    case 663 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "+    case 662 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "-    case 664 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 663 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 665 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "+    case 664 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "-    case 666 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 665 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 667 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "+    case 666 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "-    case 669 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "+    case 668 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "-    case 670 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 669 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 672 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 671 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 673 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "+    case 672 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-    case 674 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 673 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 675 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "+    case 674 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "-    case 677 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "+    case 676 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "-    case 678 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "+    case 677 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "-    case 680 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 679 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 681 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "+    case 680 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "-    case 683 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 682 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 684 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "+    case 683 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "-    case 686 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 685 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 687 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "+    case 686 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "-    case 689 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 688 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 690 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "+    case 689 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "-    case 692 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 691 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 693 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "+    case 692 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "-    case 697 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+    case 696 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-    case 698 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+    case 697 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  ", "+\t\t\tbreak;", "+ ", "+    case 698 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  ", "-\t\t\tbreak;", "- ", "-    case 700 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "-    case 701 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "+    case 700 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "-    case 702 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 701 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 704 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 703 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 705 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+    case 704 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-    case 707 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "+    case 706 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "-    case 708 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "+    case 707 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "-    case 709 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 708 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 710 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "+    case 709 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "-    case 711 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "+    case 710 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "-    case 712 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 711 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 713 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 712 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 721 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "+    case 720 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "-    case 722 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 721 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 723 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "+    case 722 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "-    case 726 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "+    case 725 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "-    case 727 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "+    case 726 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "-    case 728 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 727 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 729 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 728 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 731 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "+    case 730 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "+\t\t\tbreak;", "+ ", "+    case 733 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeMemberValueArrayInitializer() ;  ", "-\t\t    consumeMemberValueArrayInitializer() ;  ", "+\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "-    case 737 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "-\t\t\tbreak;", "- ", "-    case 738 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "+    case 737 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "-    case 740 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "+    case 739 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "-    case 741 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "+    case 740 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "-    case 742 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "+    case 741 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "-    case 743 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 742 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 744 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "+    case 743 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "-    case 745 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 744 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 746 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 745 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 747 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 746 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d8ec1933c6fed32ee77c2f62da44fe9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "01bd53f266d07ca177ff8e7fb927b7206b4c562d", "commitAfterChange": "591b3befccafa73608a18aec511ef48a3ca050bb", "methodNumberBeforeChange": 285, "methodNumberAfterChange": 286, "signatureBeforeChange": " protected void consumeRule(int act)", "signatureAfterChange": " protected void consumeRule(int act)", "diff": ["-    case 412 : if (DEBUG) { System.out.println(\"LambdaParameters ::= Identifier\"); }  //$NON-NLS-1$", "+    case 412 : if (DEBUG) { System.out.println(\"NestedLambda ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeNestedLambda();  ", "+\t\t\tbreak;", "+ ", "+    case 413 : if (DEBUG) { System.out.println(\"LambdaParameters ::= Identifier NestedLambda\"); }  //$NON-NLS-1$", "-    case 418 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameterList ::=...\"); }  //$NON-NLS-1$", "+    case 419 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameterList ::=...\"); }  //$NON-NLS-1$", "-    case 419 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameter ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+    case 420 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameter ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-    case 421 : if (DEBUG) { System.out.println(\"LambdaBody ::= NestedType NestedMethod LBRACE...\"); }  //$NON-NLS-1$", "-\t\t    consumeBlock();  ", "-\t\t\tbreak;", "- ", "-    case 422 : if (DEBUG) { System.out.println(\"ElidedLeftBraceAndReturn ::=\"); }  //$NON-NLS-1$", "+    case 423 : if (DEBUG) { System.out.println(\"ElidedLeftBraceAndReturn ::=\"); }  //$NON-NLS-1$", "-    case 423 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "+    case 424 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "-    case 424 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "+    case 425 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "-    case 425 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "+    case 426 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "-    case 426 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+    case 427 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-    case 427 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "-\t\t\tbreak;", "- ", "-    case 428 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "+    case 428 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "+\t\t\tbreak;", "+ ", "+    case 430 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "-    case 430 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "+    case 431 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "-    case 431 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "+    case 432 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "-    case 432 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 433 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 434 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 435 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 435 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 436 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 437 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 438 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 439 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "+    case 440 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "-    case 440 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "+    case 441 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "-    case 441 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "+    case 442 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "-    case 442 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 443 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 443 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "+    case 444 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "-    case 444 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 445 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 445 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 446 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 447 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "+    case 448 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "-     case 449 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= TypeAnnotationsopt LBRACKET...\"); }  //$NON-NLS-1$", "+     case 450 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= TypeAnnotationsopt LBRACKET...\"); }  //$NON-NLS-1$", "-     case 450 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "+     case 451 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "-     case 453 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 454 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-     case 454 : if (DEBUG) { System.out.println(\"OneDimLoop ::= TypeAnnotations LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 455 : if (DEBUG) { System.out.println(\"OneDimLoop ::= TypeAnnotations LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-    case 455 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "+    case 456 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "-    case 456 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "+    case 457 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "-    case 457 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+    case 458 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-    case 458 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 459 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 459 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 460 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 460 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 461 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 461 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 462 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 462 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 463 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 463 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "+    case 464 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "-    case 464 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "+    case 465 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "-    case 465 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "+    case 466 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "-    case 467 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "+    case 468 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "-    case 470 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "+    case 471 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "-    case 471 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "+    case 472 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "-    case 472 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "+    case 473 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "-    case 475 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 476 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 476 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 477 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 478 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 479 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 479 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 480 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 481 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "+    case 482 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "-    case 482 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "+    case 483 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "-    case 484 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "+    case 485 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "-    case 485 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 486 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 486 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 487 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 487 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "+    case 488 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "-    case 488 : if (DEBUG) { System.out.println(\"CastExpression ::= BeginIntersectionCast PushLPAREN...\"); }  //$NON-NLS-1$", "+    case 489 : if (DEBUG) { System.out.println(\"CastExpression ::= BeginIntersectionCast PushLPAREN...\"); }  //$NON-NLS-1$", "-    case 489 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims...\"); }  //$NON-NLS-1$", "+    case 490 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims...\"); }  //$NON-NLS-1$", "-    case 490 : if (DEBUG) { System.out.println(\"AdditionalBoundsListOpt ::=\"); }  //$NON-NLS-1$", "+    case 491 : if (DEBUG) { System.out.println(\"AdditionalBoundsListOpt ::=\"); }  //$NON-NLS-1$", "-    case 494 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "+    case 495 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "-    case 495 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "+    case 496 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "-    case 496 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "+    case 497 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "-    case 497 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1WithBounds ::=\"); }  //$NON-NLS-1$", "+    case 498 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1WithBounds ::=\"); }  //$NON-NLS-1$", "-    case 498 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "+    case 499 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "-    case 500 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "+\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 504 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 505 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 507 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 508 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 509 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 511 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS);  ", "-\t\t\tbreak;", "- ", "-    case 512 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER);  ", "-\t\t\tbreak;", "- ", "-    case 513 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 514 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 516 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "-\t\t    consumeInstanceOfExpression();  ", "-\t\t\tbreak;", "- ", "-    case 518 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 519 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 521 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND);  ", "-\t\t\tbreak;", "- ", "-    case 523 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.XOR);  ", "-\t\t\tbreak;", "- ", "-    case 525 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR);  ", "-\t\t\tbreak;", "- ", "-    case 527 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND_AND);  ", "-\t\t\tbreak;", "- ", "-    case 529 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR_OR);  ", "-\t\t\tbreak;", "- ", "-    case 531 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  ", "-\t\t\tbreak;", "- ", "-    case 534 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignment();  ", "-\t\t\tbreak;", "- ", "-    case 536 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "-\t\t    ignoreExpressionAssignment(); ", "-\t\t\tbreak;", "- ", "-    case 537 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 538 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 539 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(DIVIDE);  ", "-\t\t\tbreak;", "- ", "-    case 540 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 541 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 542 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 543 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 544 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 545 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 546 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(AND);  ", "-\t\t\tbreak;", "- ", "-    case 547 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(XOR);  ", "-\t\t\tbreak;", "- ", "-    case 548 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(OR);  ", "-\t\t\tbreak;", "- ", "-    case 549 : if (DEBUG) { System.out.println(\"Expression ::= AssignmentExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeExpression();  ", "-\t\t\tbreak;", "- ", "-    case 552 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyExpression();  ", "-\t\t\tbreak;", "- ", "-    case 557 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyClassBodyDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-    case 558 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassBodyDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-     case 559 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeDefaultModifiers();  ", "-\t\t\tbreak;", "- ", "-    case 560 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "-\t\t    consumeModifiers();  ", "-\t\t\tbreak;", "- ", "-    case 561 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyBlockStatementsopt();  ", "-\t\t\tbreak;", "- ", "-     case 563 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyDimsopt();  ", "-\t\t\tbreak;", "- ", "-     case 565 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyArgumentListopt();  ", "-\t\t\tbreak;", "- ", "-    case 569 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeFormalParameterListopt();  ", "-\t\t\tbreak;", "- ", "-     case 573 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyInterfaceMemberDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-     case 574 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-\t\t    consumeInterfaceMemberDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-    case 575 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeNestedType();  ", "-\t\t\tbreak;", "-", "-     case 576 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyForInitopt();  ", "-\t\t\tbreak;", "- ", "-     case 578 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyForUpdateopt();  ", "-\t\t\tbreak;", "- ", "-     case 582 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyCatchesopt();  ", "-\t\t\tbreak;", "- ", "-     case 584 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumDeclaration();  ", "-\t\t\tbreak;", "- ", "-     case 585 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeader();  ", "-\t\t\tbreak;", "- ", "-     case 586 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeaderName();  ", "-\t\t\tbreak;", "- ", "-     case 587 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeaderNameWithTypeParameters();  ", "-\t\t\tbreak;", "- ", "-     case 588 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyNoConstants();  ", "-\t\t\tbreak;", "- ", "-     case 589 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyNoConstants();  ", "-\t\t\tbreak;", "- ", "-     case 590 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyWithConstants();  ", "-\t\t\tbreak;", "- ", "-     case 591 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyWithConstants();  ", "-\t\t\tbreak;", "- ", "-    case 593 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstants();  ", "-\t\t\tbreak;", "- ", "-    case 594 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantHeaderName();  ", "-\t\t\tbreak;", "- ", "-    case 595 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantHeader();  ", "-\t\t\tbreak;", "- ", "-    case 596 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantWithClassBody();  ", "-\t\t\tbreak;", "- ", "-    case 597 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantNoClassBody();  ", "-\t\t\tbreak;", "- ", "-    case 598 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 599 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyArguments();  ", "-\t\t\tbreak;", "- ", "-    case 601 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumDeclarations();  ", "-\t\t\tbreak;", "- ", "-    case 602 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyEnumDeclarations();  ", "-\t\t\tbreak;", "- ", "-    case 604 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatement();  ", "-\t\t\tbreak;", "- ", "-    case 605 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatement();  ", "-\t\t\tbreak;", "- ", "-    case 606 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeaderInit(false);  ", "-\t\t\tbreak;", "- ", "-    case 607 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeaderInit(true);  ", "-\t\t\tbreak;", "- ", "-    case 608 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeader();  ", "-\t\t\tbreak;", "- ", "-    case 609 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeImportDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 610 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "-\t\t    consumeSingleStaticImportDeclarationName();  ", "-\t\t\tbreak;", "- ", "-    case 611 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeImportDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 612 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "-\t\t    consumeStaticImportOnDemandDeclarationName();  ", "-\t\t\tbreak;", "- ", "-    case 613 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 614 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-\t\t    consumeOnlyTypeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 616 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList1();  ", "-\t\t\tbreak;", "- ", "-    case 618 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList();  ", "-\t\t\tbreak;", "- ", "-    case 619 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgument();  ", "-\t\t\tbreak;", "- ", "-    case 623 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType1();  ", "-\t\t\tbreak;", "- ", "-    case 624 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentReferenceType1();  ", "-\t\t\tbreak;", "- ", "-    case 626 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList2();  ", "-\t\t\tbreak;", "- ", "-    case 629 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType2();  ", "-\t\t\tbreak;", "- ", "-    case 630 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentReferenceType2();  ", "-\t\t\tbreak;", "- ", "-    case 632 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList3();  ", "-\t\t\tbreak;", "- ", "-    case 635 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType3();  ", "-\t\t\tbreak;", "- ", "-    case 636 : if (DEBUG) { System.out.println(\"Wildcard ::= TypeAnnotationsopt QUESTION\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard();  ", "-\t\t\tbreak;", "- ", "-    case 637 : if (DEBUG) { System.out.println(\"Wildcard ::= TypeAnnotationsopt QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardWithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 638 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBoundsExtends();  ", "-\t\t\tbreak;", "- ", "-    case 639 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBoundsSuper();  ", "-\t\t\tbreak;", "- ", "-    case 640 : if (DEBUG) { System.out.println(\"Wildcard1 ::= TypeAnnotationsopt QUESTION GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard1();  ", "-\t\t\tbreak;", "- ", "-    case 641 : if (DEBUG) { System.out.println(\"Wildcard1 ::= TypeAnnotationsopt QUESTION...\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard1WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 642 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds1Extends();  ", "-\t\t\tbreak;", "- ", "-    case 643 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds1Super();  ", "-\t\t\tbreak;", "- ", "-    case 644 : if (DEBUG) { System.out.println(\"Wildcard2 ::= TypeAnnotationsopt QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard2();  ", "-\t\t\tbreak;", "- ", "-    case 645 : if (DEBUG) { System.out.println(\"Wildcard2 ::= TypeAnnotationsopt QUESTION...\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard2WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 646 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds2Extends();  ", "-\t\t\tbreak;", "- ", "-    case 647 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds2Super();  ", "-\t\t\tbreak;", "- ", "-    case 648 : if (DEBUG) { System.out.println(\"Wildcard3 ::= TypeAnnotationsopt QUESTION...\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard3();  ", "-\t\t\tbreak;", "- ", "-    case 649 : if (DEBUG) { System.out.println(\"Wildcard3 ::= TypeAnnotationsopt QUESTION...\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard3WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 650 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds3Extends();  ", "-\t\t\tbreak;", "- ", "-    case 651 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds3Super();  ", "-\t\t\tbreak;", "- ", "-    case 652 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= TypeAnnotationsopt Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterHeader();  ", "-\t\t\tbreak;", "- ", "-    case 653 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameters();  ", "-\t\t\tbreak;", "- ", "-    case 655 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterList();  ", "-\t\t\tbreak;", "- ", "-    case 657 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterWithExtends();  ", "-\t\t\tbreak;", "- ", "-    case 658 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterWithExtendsAndBounds();  ", "-\t\t\tbreak;", "- ", "-    case 660 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBoundList();  ", "-\t\t\tbreak;", "- ", "-    case 661 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBound();  ", "-\t\t\tbreak;", "- ", "-    case 663 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterList1();  ", "-\t\t\tbreak;", "- ", "-    case 664 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1();  ", "-\t\t\tbreak;", "- ", "-    case 665 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1WithExtends();  ", "-\t\t\tbreak;", "- ", "-    case 666 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1WithExtendsAndBounds();  ", "-\t\t\tbreak;", "- ", "-    case 668 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBoundList1();  ", "-\t\t\tbreak;", "- ", "-    case 669 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBound1();  ", "-\t\t\tbreak;", "- ", "-    case 675 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 676 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 679 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);  ", "-\t\t\tbreak;", "- ", "-    case 680 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.NOT);  ", "-\t\t\tbreak;", "- ", "-    case 683 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 684 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 685 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 686 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.DIVIDE);  ", "-\t\t\tbreak;", "- ", "-    case 687 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 503 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-    case 688 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 690 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 505 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "-    case 691 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 692 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 506 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "-    case 693 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 695 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 508 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 696 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 697 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 509 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 698 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 699 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 510 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 700 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 702 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 512 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "-    case 703 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS);  ", "-\t\t\tbreak;", "- ", "-    case 704 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 513 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "-    case 705 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER);  ", "-\t\t\tbreak;", "- ", "-    case 706 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 514 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "-    case 707 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 708 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 515 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "-    case 709 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 711 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "-\t\t    consumeInstanceOfExpressionWithName();  ", "-\t\t\tbreak;", "- ", "-    case 712 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 517 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "-    case 714 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 519 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-    case 715 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpressionWithName(OperatorIds.EQUAL_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 716 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 520 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "-    case 717 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpressionWithName(OperatorIds.NOT_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 719 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "+    case 522 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "-    case 720 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.AND);  ", "-\t\t\tbreak;", "- ", "-    case 722 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 524 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "-    case 723 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.XOR);  ", "-\t\t\tbreak;", "- ", "-    case 725 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 526 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "-    case 726 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.OR);  ", "-\t\t\tbreak;", "- ", "-    case 728 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 528 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "-    case 729 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.AND_AND);  ", "-\t\t\tbreak;", "- ", "-    case 731 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 530 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 732 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.OR_OR);  ", "-\t\t\tbreak;", "- ", "-    case 734 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 532 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 735 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "+    case 535 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignment();  ", "+\t\t\tbreak;", "+ ", "+    case 537 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "+\t\t    ignoreExpressionAssignment(); ", "+\t\t\tbreak;", "+ ", "+    case 538 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 539 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(MULTIPLY);  ", "+\t\t\tbreak;", "+ ", "+    case 540 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(DIVIDE);  ", "+\t\t\tbreak;", "+ ", "+    case 541 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(REMAINDER);  ", "+\t\t\tbreak;", "+ ", "+    case 542 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 543 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 544 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(LEFT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 545 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 546 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 547 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(AND);  ", "+\t\t\tbreak;", "+ ", "+    case 548 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(XOR);  ", "+\t\t\tbreak;", "+ ", "+    case 549 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(OR);  ", "+\t\t\tbreak;", "+ ", "+    case 550 : if (DEBUG) { System.out.println(\"Expression ::= AssignmentExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 553 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 558 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyClassBodyDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+    case 559 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+\t\t    consumeClassBodyDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 560 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeDefaultModifiers();  ", "+\t\t\tbreak;", "+ ", "+    case 561 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "+\t\t    consumeModifiers();  ", "+\t\t\tbreak;", "+ ", "+    case 562 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyBlockStatementsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 564 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyDimsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 566 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyArgumentListopt();  ", "+\t\t\tbreak;", "+ ", "+    case 570 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeFormalParameterListopt();  ", "+\t\t\tbreak;", "+ ", "+     case 574 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyInterfaceMemberDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 575 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+\t\t    consumeInterfaceMemberDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+    case 576 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeNestedType();  ", "+\t\t\tbreak;", "+", "+     case 577 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyForInitopt();  ", "+\t\t\tbreak;", "+ ", "+     case 579 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyForUpdateopt();  ", "+\t\t\tbreak;", "+ ", "+     case 583 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyCatchesopt();  ", "+\t\t\tbreak;", "+ ", "+     case 585 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumDeclaration();  ", "+\t\t\tbreak;", "+ ", "+     case 586 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeader();  ", "+\t\t\tbreak;", "+ ", "+     case 587 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeaderName();  ", "+\t\t\tbreak;", "+ ", "+     case 588 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeaderNameWithTypeParameters();  ", "+\t\t\tbreak;", "+ ", "+     case 589 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyNoConstants();  ", "+\t\t\tbreak;", "+ ", "+     case 590 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyNoConstants();  ", "+\t\t\tbreak;", "+ ", "+     case 591 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyWithConstants();  ", "+\t\t\tbreak;", "+ ", "+     case 592 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyWithConstants();  ", "+\t\t\tbreak;", "+ ", "+    case 594 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstants();  ", "+\t\t\tbreak;", "+ ", "+    case 595 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantHeaderName();  ", "+\t\t\tbreak;", "+ ", "+    case 596 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 597 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantWithClassBody();  ", "+\t\t\tbreak;", "+ ", "+    case 598 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantNoClassBody();  ", "+\t\t\tbreak;", "+ ", "+    case 599 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+\t\t    consumeArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 600 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 602 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumDeclarations();  ", "+\t\t\tbreak;", "+ ", "+    case 603 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyEnumDeclarations();  ", "+\t\t\tbreak;", "+ ", "+    case 605 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatement();  ", "+\t\t\tbreak;", "+ ", "+    case 606 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatement();  ", "+\t\t\tbreak;", "+ ", "+    case 607 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeaderInit(false);  ", "+\t\t\tbreak;", "+ ", "+    case 608 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeaderInit(true);  ", "+\t\t\tbreak;", "+ ", "+    case 609 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 610 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeImportDeclaration();  ", "+\t\t\tbreak;", "+ ", "+    case 611 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "+\t\t    consumeSingleStaticImportDeclarationName();  ", "+\t\t\tbreak;", "+ ", "+    case 612 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeImportDeclaration();  ", "+\t\t\tbreak;", "+ ", "+    case 613 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "+\t\t    consumeStaticImportOnDemandDeclarationName();  ", "+\t\t\tbreak;", "+ ", "+    case 614 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 615 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+\t\t    consumeOnlyTypeArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 617 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList1();  ", "+\t\t\tbreak;", "+ ", "+    case 619 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList();  ", "+\t\t\tbreak;", "+ ", "+    case 620 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgument();  ", "+\t\t\tbreak;", "+ ", "+    case 624 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType1();  ", "+\t\t\tbreak;", "+ ", "+    case 625 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentReferenceType1();  ", "+\t\t\tbreak;", "+ ", "+    case 627 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList2();  ", "+\t\t\tbreak;", "+ ", "+    case 630 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType2();  ", "+\t\t\tbreak;", "+ ", "+    case 631 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentReferenceType2();  ", "+\t\t\tbreak;", "+ ", "+    case 633 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList3();  ", "+\t\t\tbreak;", "+ ", "+    case 636 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType3();  ", "+\t\t\tbreak;", "+ ", "+    case 637 : if (DEBUG) { System.out.println(\"Wildcard ::= TypeAnnotationsopt QUESTION\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard();  ", "+\t\t\tbreak;", "+ ", "+    case 638 : if (DEBUG) { System.out.println(\"Wildcard ::= TypeAnnotationsopt QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardWithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 639 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBoundsExtends();  ", "+\t\t\tbreak;", "+ ", "+    case 640 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBoundsSuper();  ", "+\t\t\tbreak;", "+ ", "+    case 641 : if (DEBUG) { System.out.println(\"Wildcard1 ::= TypeAnnotationsopt QUESTION GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard1();  ", "+\t\t\tbreak;", "+ ", "+    case 642 : if (DEBUG) { System.out.println(\"Wildcard1 ::= TypeAnnotationsopt QUESTION...\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard1WithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 643 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds1Extends();  ", "+\t\t\tbreak;", "+ ", "+    case 644 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds1Super();  ", "+\t\t\tbreak;", "+ ", "+    case 645 : if (DEBUG) { System.out.println(\"Wildcard2 ::= TypeAnnotationsopt QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard2();  ", "+\t\t\tbreak;", "+ ", "+    case 646 : if (DEBUG) { System.out.println(\"Wildcard2 ::= TypeAnnotationsopt QUESTION...\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard2WithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 647 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds2Extends();  ", "+\t\t\tbreak;", "+ ", "+    case 648 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds2Super();  ", "+\t\t\tbreak;", "+ ", "+    case 649 : if (DEBUG) { System.out.println(\"Wildcard3 ::= TypeAnnotationsopt QUESTION...\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard3();  ", "+\t\t\tbreak;", "+ ", "+    case 650 : if (DEBUG) { System.out.println(\"Wildcard3 ::= TypeAnnotationsopt QUESTION...\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard3WithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 651 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds3Extends();  ", "+\t\t\tbreak;", "+ ", "+    case 652 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds3Super();  ", "+\t\t\tbreak;", "+ ", "+    case 653 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= TypeAnnotationsopt Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 654 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameters();  ", "+\t\t\tbreak;", "+ ", "+    case 656 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterList();  ", "+\t\t\tbreak;", "+ ", "+    case 658 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterWithExtends();  ", "+\t\t\tbreak;", "+ ", "+    case 659 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterWithExtendsAndBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 661 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBoundList();  ", "+\t\t\tbreak;", "+ ", "+    case 662 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBound();  ", "+\t\t\tbreak;", "+ ", "+    case 664 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterList1();  ", "+\t\t\tbreak;", "+ ", "+    case 665 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1();  ", "+\t\t\tbreak;", "+ ", "+    case 666 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1WithExtends();  ", "+\t\t\tbreak;", "+ ", "+    case 667 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1WithExtendsAndBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 669 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBoundList1();  ", "+\t\t\tbreak;", "+ ", "+    case 670 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBound1();  ", "+\t\t\tbreak;", "+ ", "+    case 676 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 677 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 680 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);  ", "+\t\t\tbreak;", "+ ", "+    case 681 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.NOT);  ", "+\t\t\tbreak;", "+ ", "+    case 684 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "+\t\t\tbreak;", "+ ", "+    case 685 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.MULTIPLY);  ", "+\t\t\tbreak;", "+ ", "+    case 686 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "+\t\t\tbreak;", "+ ", "+    case 687 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.DIVIDE);  ", "+\t\t\tbreak;", "+ ", "+    case 688 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);  ", "+\t\t\tbreak;", "+ ", "+    case 689 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.REMAINDER);  ", "+\t\t\tbreak;", "+ ", "+    case 691 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 692 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 693 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 694 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 696 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 697 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LEFT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 698 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 699 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 700 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 701 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 703 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LESS);  ", "+\t\t\tbreak;", "+ ", "+    case 704 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS);  ", "+\t\t\tbreak;", "+ ", "+    case 705 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER);  ", "+\t\t\tbreak;", "+ ", "+    case 706 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER);  ", "+\t\t\tbreak;", "+ ", "+    case 707 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 708 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 709 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 710 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 712 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "+\t\t    consumeInstanceOfExpressionWithName();  ", "+\t\t\tbreak;", "+ ", "+    case 713 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeInstanceOfExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 715 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 716 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpressionWithName(OperatorIds.EQUAL_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 717 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 718 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpressionWithName(OperatorIds.NOT_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 720 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.AND);  ", "+\t\t\tbreak;", "+ ", "+    case 721 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.AND);  ", "+\t\t\tbreak;", "+ ", "+    case 723 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.XOR);  ", "+\t\t\tbreak;", "+ ", "+    case 724 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.XOR);  ", "+\t\t\tbreak;", "+ ", "+    case 726 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.OR);  ", "+\t\t\tbreak;", "+ ", "+    case 727 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.OR);  ", "+\t\t\tbreak;", "+ ", "+    case 729 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.AND_AND);  ", "+\t\t\tbreak;", "+ ", "+    case 730 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.AND_AND);  ", "+\t\t\tbreak;", "+ ", "+    case 732 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.OR_OR);  ", "+\t\t\tbreak;", "+ ", "+    case 733 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.OR_OR);  ", "+\t\t\tbreak;", "+ ", "+    case 735 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  ", "+\t\t\tbreak;", "+ ", "+    case 736 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "-    case 739 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+    case 740 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-    case 740 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  ", "-\t\t\tbreak;", "- ", "-    case 741 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "+    case 741 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  ", "+\t\t\tbreak;", "+ ", "+    case 743 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "-    case 743 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "+    case 744 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "-    case 744 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 745 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 746 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 747 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 747 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+    case 748 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-    case 749 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "+    case 750 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "-    case 750 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "+    case 751 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "-    case 751 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 752 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 752 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "+    case 753 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "-    case 753 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "+    case 754 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "-    case 754 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 755 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 755 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 756 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 763 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT UnannotatableName\"); }  //$NON-NLS-1$", "+    case 764 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT UnannotatableName\"); }  //$NON-NLS-1$", "-    case 764 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 765 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 765 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "+    case 766 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "-    case 768 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "+    case 769 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "-    case 769 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "+    case 770 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "-    case 770 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 771 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 771 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 772 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 773 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "+    case 774 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "-\t\t\tbreak;", "- ", "-    case 776 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeMemberValueArrayInitializer() ;  ", "-\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "+\t\t    consumeMemberValueArrayInitializer() ;  ", "-    case 780 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "+    case 780 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "+\t\t\tbreak;", "+ ", "+    case 781 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "-    case 782 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "+    case 783 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "-    case 783 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "+    case 784 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "-    case 784 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "+    case 785 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "-    case 785 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 786 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 786 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "+    case 787 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "-    case 787 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 788 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 788 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= ModifiersWithDefault...\"); }  //$NON-NLS-1$", "+    case 789 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= ModifiersWithDefault...\"); }  //$NON-NLS-1$", "-    case 789 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= ModifiersWithDefault Type\"); }  //$NON-NLS-1$", "+    case 790 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= ModifiersWithDefault Type\"); }  //$NON-NLS-1$", "-\t\t\tbreak;", "- ", "-    case 790 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "-\t\t    consumeMethodHeader();  ", "+\t\t    consumeMethodHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 792 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b655642a30d0abdd238d29292e7d8926", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "86284f2db6c7ac41b63c1766c9b7b3a016d95a9a", "commitAfterChange": "c8d8bdad35a9dc8d924116cabb6dd00986cff218", "methodNumberBeforeChange": 283, "methodNumberAfterChange": 284, "signatureBeforeChange": " protected void consumeRule(int act)", "signatureAfterChange": " protected void consumeRule(int act)", "diff": ["-    case 33 : if (DEBUG) { System.out.println(\"Type ::= PrimitiveType\"); }  //$NON-NLS-1$", "+    case 34 : if (DEBUG) { System.out.println(\"Type ::= PrimitiveType\"); }  //$NON-NLS-1$", "-    case 47 : if (DEBUG) { System.out.println(\"ReferenceType ::= ClassOrInterfaceType\"); }  //$NON-NLS-1$", "+    case 48 : if (DEBUG) { System.out.println(\"ReferenceType ::= ClassOrInterfaceType\"); }  //$NON-NLS-1$", "-    case 51 : if (DEBUG) { System.out.println(\"ClassOrInterface ::= Name\"); }  //$NON-NLS-1$", "+    case 52 : if (DEBUG) { System.out.println(\"ClassOrInterface ::= Name\"); }  //$NON-NLS-1$", "-    case 52 : if (DEBUG) { System.out.println(\"ClassOrInterface ::= GenericType DOT Name\"); }  //$NON-NLS-1$", "+    case 53 : if (DEBUG) { System.out.println(\"ClassOrInterface ::= GenericType DOT Name\"); }  //$NON-NLS-1$", "-    case 53 : if (DEBUG) { System.out.println(\"GenericType ::= ClassOrInterface TypeArguments\"); }  //$NON-NLS-1$", "+    case 54 : if (DEBUG) { System.out.println(\"GenericType ::= ClassOrInterface TypeArguments\"); }  //$NON-NLS-1$", "-    case 54 : if (DEBUG) { System.out.println(\"GenericType ::= ClassOrInterface LESS GREATER\"); }  //$NON-NLS-1$", "+    case 55 : if (DEBUG) { System.out.println(\"GenericType ::= ClassOrInterface LESS GREATER\"); }  //$NON-NLS-1$", "-    case 55 : if (DEBUG) { System.out.println(\"ArrayTypeWithTypeArgumentsName ::= GenericType DOT Name\"); }  //$NON-NLS-1$", "+    case 56 : if (DEBUG) { System.out.println(\"ArrayTypeWithTypeArgumentsName ::= GenericType DOT Name\"); }  //$NON-NLS-1$", "-    case 56 : if (DEBUG) { System.out.println(\"ArrayType ::= PrimitiveType Dims\"); }  //$NON-NLS-1$", "+    case 57 : if (DEBUG) { System.out.println(\"ArrayType ::= PrimitiveType Dims\"); }  //$NON-NLS-1$", "-    case 57 : if (DEBUG) { System.out.println(\"ArrayType ::= Name Dims\"); }  //$NON-NLS-1$", "+    case 58 : if (DEBUG) { System.out.println(\"ArrayType ::= Name Dims\"); }  //$NON-NLS-1$", "-    case 58 : if (DEBUG) { System.out.println(\"ArrayType ::= ArrayTypeWithTypeArgumentsName Dims\"); }  //$NON-NLS-1$", "+    case 59 : if (DEBUG) { System.out.println(\"ArrayType ::= ArrayTypeWithTypeArgumentsName Dims\"); }  //$NON-NLS-1$", "-    case 59 : if (DEBUG) { System.out.println(\"ArrayType ::= GenericType Dims\"); }  //$NON-NLS-1$", "+    case 60 : if (DEBUG) { System.out.println(\"ArrayType ::= GenericType Dims\"); }  //$NON-NLS-1$", "-    case 61 : if (DEBUG) { System.out.println(\"Name ::= SimpleName\"); }  //$NON-NLS-1$", "+    case 62 : if (DEBUG) { System.out.println(\"Name ::= SimpleName\"); }  //$NON-NLS-1$", "-    case 66 : if (DEBUG) { System.out.println(\"UnannotatableName ::= UnannotatableName DOT SimpleName\"); }  //$NON-NLS-1$", "+    case 67 : if (DEBUG) { System.out.println(\"UnannotatableName ::= UnannotatableName DOT SimpleName\"); }  //$NON-NLS-1$", "-    case 67 : if (DEBUG) { System.out.println(\"QualifiedName ::= Name DOT SimpleName\"); }  //$NON-NLS-1$", "+    case 68 : if (DEBUG) { System.out.println(\"QualifiedName ::= Name DOT SimpleName\"); }  //$NON-NLS-1$", "-    case 68 : if (DEBUG) { System.out.println(\"QualifiedName ::= Name DOT TypeAnnotations SimpleName\"); }  //$NON-NLS-1$", "+    case 69 : if (DEBUG) { System.out.println(\"QualifiedName ::= Name DOT TypeAnnotations SimpleName\"); }  //$NON-NLS-1$", "-    case 69 : if (DEBUG) { System.out.println(\"TypeAnnotationsopt ::=\"); }  //$NON-NLS-1$", "+    case 70 : if (DEBUG) { System.out.println(\"TypeAnnotationsopt ::=\"); }  //$NON-NLS-1$", "-     case 73 : if (DEBUG) { System.out.println(\"TypeAnnotations0 ::= TypeAnnotations0 TypeAnnotation\"); }  //$NON-NLS-1$", "+     case 74 : if (DEBUG) { System.out.println(\"TypeAnnotations0 ::= TypeAnnotations0 TypeAnnotation\"); }  //$NON-NLS-1$", "-     case 74 : if (DEBUG) { System.out.println(\"TypeAnnotation ::= NormalTypeAnnotation\"); }  //$NON-NLS-1$", "+     case 75 : if (DEBUG) { System.out.println(\"TypeAnnotation ::= NormalTypeAnnotation\"); }  //$NON-NLS-1$", "-     case 75 : if (DEBUG) { System.out.println(\"TypeAnnotation ::= MarkerTypeAnnotation\"); }  //$NON-NLS-1$", "+     case 76 : if (DEBUG) { System.out.println(\"TypeAnnotation ::= MarkerTypeAnnotation\"); }  //$NON-NLS-1$", "-     case 76 : if (DEBUG) { System.out.println(\"TypeAnnotation ::= SingleMemberTypeAnnotation\"); }  //$NON-NLS-1$", "+     case 77 : if (DEBUG) { System.out.println(\"TypeAnnotation ::= SingleMemberTypeAnnotation\"); }  //$NON-NLS-1$", "-    case 77 : if (DEBUG) { System.out.println(\"TypeAnnotationName ::= AT308 UnannotatableName\"); }  //$NON-NLS-1$", "+    case 78 : if (DEBUG) { System.out.println(\"TypeAnnotationName ::= AT308 UnannotatableName\"); }  //$NON-NLS-1$", "-    case 78 : if (DEBUG) { System.out.println(\"NormalTypeAnnotation ::= TypeAnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 79 : if (DEBUG) { System.out.println(\"NormalTypeAnnotation ::= TypeAnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 79 : if (DEBUG) { System.out.println(\"MarkerTypeAnnotation ::= TypeAnnotationName\"); }  //$NON-NLS-1$", "+    case 80 : if (DEBUG) { System.out.println(\"MarkerTypeAnnotation ::= TypeAnnotationName\"); }  //$NON-NLS-1$", "-    case 80 : if (DEBUG) { System.out.println(\"SingleMemberTypeAnnotation ::= TypeAnnotationName LPAREN\"); }  //$NON-NLS-1$", "+    case 81 : if (DEBUG) { System.out.println(\"SingleMemberTypeAnnotation ::= TypeAnnotationName LPAREN\"); }  //$NON-NLS-1$", "-    case 81 : if (DEBUG) { System.out.println(\"RejectTypeAnnotations ::=\"); }  //$NON-NLS-1$", "+    case 82 : if (DEBUG) { System.out.println(\"RejectTypeAnnotations ::=\"); }  //$NON-NLS-1$", "-    case 82 : if (DEBUG) { System.out.println(\"PushZeroTypeAnnotations ::=\"); }  //$NON-NLS-1$", "+    case 83 : if (DEBUG) { System.out.println(\"PushZeroTypeAnnotations ::=\"); }  //$NON-NLS-1$", "-    case 83 : if (DEBUG) { System.out.println(\"VariableDeclaratorIdOrThis ::= this\"); }  //$NON-NLS-1$", "+    case 84 : if (DEBUG) { System.out.println(\"VariableDeclaratorIdOrThis ::= this\"); }  //$NON-NLS-1$", "-    case 84 : if (DEBUG) { System.out.println(\"VariableDeclaratorIdOrThis ::= UnannotatableName DOT this\"); }  //$NON-NLS-1$", "+    case 85 : if (DEBUG) { System.out.println(\"VariableDeclaratorIdOrThis ::= UnannotatableName DOT this\"); }  //$NON-NLS-1$", "-    case 85 : if (DEBUG) { System.out.println(\"VariableDeclaratorIdOrThis ::= VariableDeclaratorId\"); }  //$NON-NLS-1$", "+    case 86 : if (DEBUG) { System.out.println(\"VariableDeclaratorIdOrThis ::= VariableDeclaratorId\"); }  //$NON-NLS-1$", "-    case 86 : if (DEBUG) { System.out.println(\"CompilationUnit ::= EnterCompilationUnit...\"); }  //$NON-NLS-1$", "+    case 87 : if (DEBUG) { System.out.println(\"CompilationUnit ::= EnterCompilationUnit...\"); }  //$NON-NLS-1$", "-    case 87 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= PackageDeclaration\"); }  //$NON-NLS-1$", "-\t\t    consumeInternalCompilationUnit();  ", "-\t\t\tbreak;", "- ", "-    case 88 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= PackageDeclaration...\"); }  //$NON-NLS-1$", "+    case 88 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= PackageDeclaration\"); }  //$NON-NLS-1$", "-\t\t    consumeInternalCompilationUnitWithTypes();  ", "+\t\t    consumeInternalCompilationUnit();  ", "-    case 91 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= ImportDeclarations...\"); }  //$NON-NLS-1$", "+    case 91 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= PackageDeclaration...\"); }  //$NON-NLS-1$", "+\t\t    consumeInternalCompilationUnitWithTypes();  ", "+\t\t\tbreak;", "+ ", "+    case 92 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= ImportDeclarations...\"); }  //$NON-NLS-1$", "-    case 92 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= TypeDeclarations\"); }  //$NON-NLS-1$", "+    case 93 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= TypeDeclarations\"); }  //$NON-NLS-1$", "-    case 93 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= ImportDeclarations...\"); }  //$NON-NLS-1$", "+    case 94 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::= ImportDeclarations...\"); }  //$NON-NLS-1$", "-    case 94 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::=\"); }  //$NON-NLS-1$", "+    case 95 : if (DEBUG) { System.out.println(\"InternalCompilationUnit ::=\"); }  //$NON-NLS-1$", "-    case 95 : if (DEBUG) { System.out.println(\"ReduceImports ::=\"); }  //$NON-NLS-1$", "+    case 96 : if (DEBUG) { System.out.println(\"ReduceImports ::=\"); }  //$NON-NLS-1$", "-    case 96 : if (DEBUG) { System.out.println(\"EnterCompilationUnit ::=\"); }  //$NON-NLS-1$", "+    case 97 : if (DEBUG) { System.out.println(\"EnterCompilationUnit ::=\"); }  //$NON-NLS-1$", "-    case 112 : if (DEBUG) { System.out.println(\"CatchHeader ::= catch LPAREN CatchFormalParameter RPAREN\"); }  //$NON-NLS-1$", "+    case 113 : if (DEBUG) { System.out.println(\"CatchHeader ::= catch LPAREN CatchFormalParameter RPAREN\"); }  //$NON-NLS-1$", "-    case 114 : if (DEBUG) { System.out.println(\"ImportDeclarations ::= ImportDeclarations...\"); }  //$NON-NLS-1$", "+    case 115 : if (DEBUG) { System.out.println(\"ImportDeclarations ::= ImportDeclarations...\"); }  //$NON-NLS-1$", "-    case 116 : if (DEBUG) { System.out.println(\"TypeDeclarations ::= TypeDeclarations TypeDeclaration\"); }  //$NON-NLS-1$", "+    case 117 : if (DEBUG) { System.out.println(\"TypeDeclarations ::= TypeDeclarations TypeDeclaration\"); }  //$NON-NLS-1$", "-    case 117 : if (DEBUG) { System.out.println(\"PackageDeclaration ::= PackageDeclarationName SEMICOLON\"); }  //$NON-NLS-1$", "+    case 118 : if (DEBUG) { System.out.println(\"PackageDeclaration ::= PackageDeclarationName SEMICOLON\"); }  //$NON-NLS-1$", "-    case 118 : if (DEBUG) { System.out.println(\"PackageDeclarationName ::= Modifiers package...\"); }  //$NON-NLS-1$", "+    case 119 : if (DEBUG) { System.out.println(\"PackageDeclarationName ::= Modifiers package...\"); }  //$NON-NLS-1$", "-    case 119 : if (DEBUG) { System.out.println(\"PackageDeclarationName ::= PackageComment package Name\"); }  //$NON-NLS-1$", "+    case 120 : if (DEBUG) { System.out.println(\"PackageDeclarationName ::= PackageComment package Name\"); }  //$NON-NLS-1$", "-    case 120 : if (DEBUG) { System.out.println(\"PackageComment ::=\"); }  //$NON-NLS-1$", "+    case 121 : if (DEBUG) { System.out.println(\"PackageComment ::=\"); }  //$NON-NLS-1$", "-    case 125 : if (DEBUG) { System.out.println(\"SingleTypeImportDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 126 : if (DEBUG) { System.out.println(\"SingleTypeImportDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 126 : if (DEBUG) { System.out.println(\"SingleTypeImportDeclarationName ::= import Name...\"); }  //$NON-NLS-1$", "+    case 127 : if (DEBUG) { System.out.println(\"SingleTypeImportDeclarationName ::= import Name...\"); }  //$NON-NLS-1$", "-    case 127 : if (DEBUG) { System.out.println(\"TypeImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 128 : if (DEBUG) { System.out.println(\"TypeImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 128 : if (DEBUG) { System.out.println(\"TypeImportOnDemandDeclarationName ::= import Name DOT...\"); }  //$NON-NLS-1$", "+    case 129 : if (DEBUG) { System.out.println(\"TypeImportOnDemandDeclarationName ::= import Name DOT...\"); }  //$NON-NLS-1$", "-     case 131 : if (DEBUG) { System.out.println(\"TypeDeclaration ::= SEMICOLON\"); }  //$NON-NLS-1$", "+     case 132 : if (DEBUG) { System.out.println(\"TypeDeclaration ::= SEMICOLON\"); }  //$NON-NLS-1$", "-    case 135 : if (DEBUG) { System.out.println(\"Modifiers ::= Modifiers Modifier\"); }  //$NON-NLS-1$", "+    case 136 : if (DEBUG) { System.out.println(\"Modifiers ::= Modifiers Modifier\"); }  //$NON-NLS-1$", "-    case 147 : if (DEBUG) { System.out.println(\"Modifier ::= Annotation\"); }  //$NON-NLS-1$", "+    case 148 : if (DEBUG) { System.out.println(\"Modifier ::= Annotation\"); }  //$NON-NLS-1$", "-    case 148 : if (DEBUG) { System.out.println(\"ClassDeclaration ::= ClassHeader ClassBody\"); }  //$NON-NLS-1$", "+    case 149 : if (DEBUG) { System.out.println(\"ClassDeclaration ::= ClassHeader ClassBody\"); }  //$NON-NLS-1$", "-    case 149 : if (DEBUG) { System.out.println(\"ClassHeader ::= ClassHeaderName ClassHeaderExtendsopt...\"); }  //$NON-NLS-1$", "+    case 150 : if (DEBUG) { System.out.println(\"ClassHeader ::= ClassHeaderName ClassHeaderExtendsopt...\"); }  //$NON-NLS-1$", "-    case 150 : if (DEBUG) { System.out.println(\"ClassHeaderName ::= ClassHeaderName1 TypeParameters\"); }  //$NON-NLS-1$", "+    case 151 : if (DEBUG) { System.out.println(\"ClassHeaderName ::= ClassHeaderName1 TypeParameters\"); }  //$NON-NLS-1$", "-    case 152 : if (DEBUG) { System.out.println(\"ClassHeaderName1 ::= Modifiersopt class Identifier\"); }  //$NON-NLS-1$", "+    case 153 : if (DEBUG) { System.out.println(\"ClassHeaderName1 ::= Modifiersopt class Identifier\"); }  //$NON-NLS-1$", "-    case 153 : if (DEBUG) { System.out.println(\"ClassHeaderExtends ::= extends ClassType\"); }  //$NON-NLS-1$", "+    case 154 : if (DEBUG) { System.out.println(\"ClassHeaderExtends ::= extends ClassType\"); }  //$NON-NLS-1$", "-    case 154 : if (DEBUG) { System.out.println(\"ClassHeaderImplements ::= implements InterfaceTypeList\"); }  //$NON-NLS-1$", "+    case 155 : if (DEBUG) { System.out.println(\"ClassHeaderImplements ::= implements InterfaceTypeList\"); }  //$NON-NLS-1$", "-    case 156 : if (DEBUG) { System.out.println(\"InterfaceTypeList ::= InterfaceTypeList COMMA...\"); }  //$NON-NLS-1$", "+    case 157 : if (DEBUG) { System.out.println(\"InterfaceTypeList ::= InterfaceTypeList COMMA...\"); }  //$NON-NLS-1$", "-    case 157 : if (DEBUG) { System.out.println(\"InterfaceType ::= ClassOrInterfaceType\"); }  //$NON-NLS-1$", "+    case 158 : if (DEBUG) { System.out.println(\"InterfaceType ::= ClassOrInterfaceType\"); }  //$NON-NLS-1$", "-    case 160 : if (DEBUG) { System.out.println(\"ClassBodyDeclarations ::= ClassBodyDeclarations...\"); }  //$NON-NLS-1$", "+    case 161 : if (DEBUG) { System.out.println(\"ClassBodyDeclarations ::= ClassBodyDeclarations...\"); }  //$NON-NLS-1$", "-    case 164 : if (DEBUG) { System.out.println(\"ClassBodyDeclaration ::= Diet NestedMethod...\"); }  //$NON-NLS-1$", "+    case 165 : if (DEBUG) { System.out.println(\"ClassBodyDeclaration ::= Diet NestedMethod...\"); }  //$NON-NLS-1$", "-    case 165 : if (DEBUG) { System.out.println(\"Diet ::=\"); }  //$NON-NLS-1$", "+    case 166 : if (DEBUG) { System.out.println(\"Diet ::=\"); }  //$NON-NLS-1$", "-    case 166 : if (DEBUG) { System.out.println(\"Initializer ::= Diet NestedMethod CreateInitializer...\"); }  //$NON-NLS-1$", "+    case 167 : if (DEBUG) { System.out.println(\"Initializer ::= Diet NestedMethod CreateInitializer...\"); }  //$NON-NLS-1$", "-    case 167 : if (DEBUG) { System.out.println(\"CreateInitializer ::=\"); }  //$NON-NLS-1$", "+    case 168 : if (DEBUG) { System.out.println(\"CreateInitializer ::=\"); }  //$NON-NLS-1$", "-    case 174 : if (DEBUG) { System.out.println(\"ClassMemberDeclaration ::= SEMICOLON\"); }  //$NON-NLS-1$", "+    case 175 : if (DEBUG) { System.out.println(\"ClassMemberDeclaration ::= SEMICOLON\"); }  //$NON-NLS-1$", "-    case 177 : if (DEBUG) { System.out.println(\"FieldDeclaration ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 178 : if (DEBUG) { System.out.println(\"FieldDeclaration ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 179 : if (DEBUG) { System.out.println(\"VariableDeclarators ::= VariableDeclarators COMMA...\"); }  //$NON-NLS-1$", "+    case 180 : if (DEBUG) { System.out.println(\"VariableDeclarators ::= VariableDeclarators COMMA...\"); }  //$NON-NLS-1$", "-    case 182 : if (DEBUG) { System.out.println(\"EnterVariable ::=\"); }  //$NON-NLS-1$", "+    case 183 : if (DEBUG) { System.out.println(\"EnterVariable ::=\"); }  //$NON-NLS-1$", "-    case 183 : if (DEBUG) { System.out.println(\"ExitVariableWithInitialization ::=\"); }  //$NON-NLS-1$", "+    case 184 : if (DEBUG) { System.out.println(\"ExitVariableWithInitialization ::=\"); }  //$NON-NLS-1$", "-    case 184 : if (DEBUG) { System.out.println(\"ExitVariableWithoutInitialization ::=\"); }  //$NON-NLS-1$", "+    case 185 : if (DEBUG) { System.out.println(\"ExitVariableWithoutInitialization ::=\"); }  //$NON-NLS-1$", "-    case 185 : if (DEBUG) { System.out.println(\"ForceNoDiet ::=\"); }  //$NON-NLS-1$", "+    case 186 : if (DEBUG) { System.out.println(\"ForceNoDiet ::=\"); }  //$NON-NLS-1$", "-    case 186 : if (DEBUG) { System.out.println(\"RestoreDiet ::=\"); }  //$NON-NLS-1$", "+    case 187 : if (DEBUG) { System.out.println(\"RestoreDiet ::=\"); }  //$NON-NLS-1$", "-    case 191 : if (DEBUG) { System.out.println(\"MethodDeclaration ::= MethodHeader MethodBody\"); }  //$NON-NLS-1$", "+    case 192 : if (DEBUG) { System.out.println(\"MethodDeclaration ::= MethodHeader MethodBody\"); }  //$NON-NLS-1$", "-    case 192 : if (DEBUG) { System.out.println(\"AbstractMethodDeclaration ::= MethodHeader SEMICOLON\"); }  //$NON-NLS-1$", "+    case 193 : if (DEBUG) { System.out.println(\"AbstractMethodDeclaration ::= MethodHeader SEMICOLON\"); }  //$NON-NLS-1$", "-    case 193 : if (DEBUG) { System.out.println(\"MethodHeader ::= MethodHeaderName FormalParameterListopt\"); }  //$NON-NLS-1$", "+    case 194 : if (DEBUG) { System.out.println(\"MethodHeader ::= MethodHeaderName FormalParameterListopt\"); }  //$NON-NLS-1$", "-    case 194 : if (DEBUG) { System.out.println(\"MethodHeaderName ::= Modifiersopt TypeParameters Type...\"); }  //$NON-NLS-1$", "+    case 195 : if (DEBUG) { System.out.println(\"MethodHeaderName ::= Modifiersopt TypeParameters Type...\"); }  //$NON-NLS-1$", "-    case 195 : if (DEBUG) { System.out.println(\"MethodHeaderName ::= Modifiersopt Type Identifier LPAREN\"); }  //$NON-NLS-1$", "+    case 196 : if (DEBUG) { System.out.println(\"MethodHeaderName ::= Modifiersopt Type Identifier LPAREN\"); }  //$NON-NLS-1$", "-    case 196 : if (DEBUG) { System.out.println(\"MethodHeaderRightParen ::= RPAREN\"); }  //$NON-NLS-1$", "+    case 197 : if (DEBUG) { System.out.println(\"MethodHeaderRightParen ::= RPAREN\"); }  //$NON-NLS-1$", "-    case 197 : if (DEBUG) { System.out.println(\"MethodHeaderExtendedDims ::= Dimsopt\"); }  //$NON-NLS-1$", "+    case 198 : if (DEBUG) { System.out.println(\"MethodHeaderExtendedDims ::= Dimsopt\"); }  //$NON-NLS-1$", "-    case 198 : if (DEBUG) { System.out.println(\"MethodHeaderThrowsClause ::= throws ClassTypeList\"); }  //$NON-NLS-1$", "+    case 199 : if (DEBUG) { System.out.println(\"MethodHeaderThrowsClause ::= throws ClassTypeList\"); }  //$NON-NLS-1$", "-    case 199 : if (DEBUG) { System.out.println(\"ConstructorHeader ::= ConstructorHeaderName...\"); }  //$NON-NLS-1$", "+    case 200 : if (DEBUG) { System.out.println(\"ConstructorHeader ::= ConstructorHeaderName...\"); }  //$NON-NLS-1$", "-    case 200 : if (DEBUG) { System.out.println(\"ConstructorHeaderName ::= Modifiersopt TypeParameters...\"); }  //$NON-NLS-1$", "+    case 201 : if (DEBUG) { System.out.println(\"ConstructorHeaderName ::= Modifiersopt TypeParameters...\"); }  //$NON-NLS-1$", "-    case 201 : if (DEBUG) { System.out.println(\"ConstructorHeaderName ::= Modifiersopt Identifier LPAREN\"); }  //$NON-NLS-1$", "+    case 202 : if (DEBUG) { System.out.println(\"ConstructorHeaderName ::= Modifiersopt Identifier LPAREN\"); }  //$NON-NLS-1$", "-    case 203 : if (DEBUG) { System.out.println(\"FormalParameterList ::= FormalParameterList COMMA...\"); }  //$NON-NLS-1$", "+    case 204 : if (DEBUG) { System.out.println(\"FormalParameterList ::= FormalParameterList COMMA...\"); }  //$NON-NLS-1$", "-    case 204 : if (DEBUG) { System.out.println(\"FormalParameter ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 205 : if (DEBUG) { System.out.println(\"FormalParameter ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 205 : if (DEBUG) { System.out.println(\"FormalParameter ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 206 : if (DEBUG) { System.out.println(\"FormalParameter ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 206 : if (DEBUG) { System.out.println(\"FormalParameter ::= Modifiersopt Type AT308DOTDOTDOT...\"); }  //$NON-NLS-1$", "+    case 207 : if (DEBUG) { System.out.println(\"FormalParameter ::= Modifiersopt Type AT308DOTDOTDOT...\"); }  //$NON-NLS-1$", "-    case 207 : if (DEBUG) { System.out.println(\"CatchFormalParameter ::= Modifiersopt CatchType...\"); }  //$NON-NLS-1$", "+    case 208 : if (DEBUG) { System.out.println(\"CatchFormalParameter ::= Modifiersopt CatchType...\"); }  //$NON-NLS-1$", "-    case 208 : if (DEBUG) { System.out.println(\"CatchType ::= UnionType\"); }  //$NON-NLS-1$", "+    case 209 : if (DEBUG) { System.out.println(\"CatchType ::= UnionType\"); }  //$NON-NLS-1$", "-    case 209 : if (DEBUG) { System.out.println(\"UnionType ::= Type\"); }  //$NON-NLS-1$", "+    case 210 : if (DEBUG) { System.out.println(\"UnionType ::= Type\"); }  //$NON-NLS-1$", "-    case 210 : if (DEBUG) { System.out.println(\"UnionType ::= UnionType OR Type\"); }  //$NON-NLS-1$", "+    case 211 : if (DEBUG) { System.out.println(\"UnionType ::= UnionType OR Type\"); }  //$NON-NLS-1$", "-    case 212 : if (DEBUG) { System.out.println(\"ClassTypeList ::= ClassTypeList COMMA ClassTypeElt\"); }  //$NON-NLS-1$", "+    case 213 : if (DEBUG) { System.out.println(\"ClassTypeList ::= ClassTypeList COMMA ClassTypeElt\"); }  //$NON-NLS-1$", "-    case 213 : if (DEBUG) { System.out.println(\"ClassTypeElt ::= ClassType\"); }  //$NON-NLS-1$", "+    case 214 : if (DEBUG) { System.out.println(\"ClassTypeElt ::= ClassType\"); }  //$NON-NLS-1$", "-    case 214 : if (DEBUG) { System.out.println(\"MethodBody ::= NestedMethod LBRACE BlockStatementsopt...\"); }  //$NON-NLS-1$", "+    case 215 : if (DEBUG) { System.out.println(\"MethodBody ::= NestedMethod LBRACE BlockStatementsopt...\"); }  //$NON-NLS-1$", "-    case 215 : if (DEBUG) { System.out.println(\"NestedMethod ::=\"); }  //$NON-NLS-1$", "+    case 216 : if (DEBUG) { System.out.println(\"NestedMethod ::=\"); }  //$NON-NLS-1$", "-    case 216 : if (DEBUG) { System.out.println(\"StaticInitializer ::= StaticOnly Block\"); }  //$NON-NLS-1$", "+    case 217 : if (DEBUG) { System.out.println(\"StaticInitializer ::= StaticOnly Block\"); }  //$NON-NLS-1$", "-    case 217 : if (DEBUG) { System.out.println(\"StaticOnly ::= static\"); }  //$NON-NLS-1$", "+    case 218 : if (DEBUG) { System.out.println(\"StaticOnly ::= static\"); }  //$NON-NLS-1$", "-    case 218 : if (DEBUG) { System.out.println(\"ConstructorDeclaration ::= ConstructorHeader MethodBody\"); }  //$NON-NLS-1$", "+    case 219 : if (DEBUG) { System.out.println(\"ConstructorDeclaration ::= ConstructorHeader MethodBody\"); }  //$NON-NLS-1$", "-    case 219 : if (DEBUG) { System.out.println(\"ConstructorDeclaration ::= ConstructorHeader SEMICOLON\"); }  //$NON-NLS-1$", "+    case 220 : if (DEBUG) { System.out.println(\"ConstructorDeclaration ::= ConstructorHeader SEMICOLON\"); }  //$NON-NLS-1$", "-    case 220 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= this LPAREN...\"); }  //$NON-NLS-1$", "+    case 221 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= this LPAREN...\"); }  //$NON-NLS-1$", "-    case 221 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= OnlyTypeArguments this\"); }  //$NON-NLS-1$", "+    case 222 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= OnlyTypeArguments this\"); }  //$NON-NLS-1$", "-    case 222 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= super LPAREN...\"); }  //$NON-NLS-1$", "+    case 223 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= super LPAREN...\"); }  //$NON-NLS-1$", "-    case 223 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 224 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 224 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT super...\"); }  //$NON-NLS-1$", "+    case 225 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT super...\"); }  //$NON-NLS-1$", "-    case 225 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT...\"); }  //$NON-NLS-1$", "+    case 226 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT...\"); }  //$NON-NLS-1$", "-    case 226 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Name DOT super LPAREN\"); }  //$NON-NLS-1$", "+    case 227 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Name DOT super LPAREN\"); }  //$NON-NLS-1$", "-    case 227 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Name DOT...\"); }  //$NON-NLS-1$", "+    case 228 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Name DOT...\"); }  //$NON-NLS-1$", "-    case 228 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT this...\"); }  //$NON-NLS-1$", "+    case 229 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT this...\"); }  //$NON-NLS-1$", "-    case 229 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT...\"); }  //$NON-NLS-1$", "+    case 230 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT...\"); }  //$NON-NLS-1$", "-    case 230 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Name DOT this LPAREN\"); }  //$NON-NLS-1$", "+    case 231 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Name DOT this LPAREN\"); }  //$NON-NLS-1$", "-    case 231 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Name DOT...\"); }  //$NON-NLS-1$", "+    case 232 : if (DEBUG) { System.out.println(\"ExplicitConstructorInvocation ::= Name DOT...\"); }  //$NON-NLS-1$", "-    case 232 : if (DEBUG) { System.out.println(\"InterfaceDeclaration ::= InterfaceHeader InterfaceBody\"); }  //$NON-NLS-1$", "+    case 233 : if (DEBUG) { System.out.println(\"InterfaceDeclaration ::= InterfaceHeader InterfaceBody\"); }  //$NON-NLS-1$", "-    case 233 : if (DEBUG) { System.out.println(\"InterfaceHeader ::= InterfaceHeaderName...\"); }  //$NON-NLS-1$", "+    case 234 : if (DEBUG) { System.out.println(\"InterfaceHeader ::= InterfaceHeaderName...\"); }  //$NON-NLS-1$", "-    case 234 : if (DEBUG) { System.out.println(\"InterfaceHeaderName ::= InterfaceHeaderName1...\"); }  //$NON-NLS-1$", "+    case 235 : if (DEBUG) { System.out.println(\"InterfaceHeaderName ::= InterfaceHeaderName1...\"); }  //$NON-NLS-1$", "-    case 236 : if (DEBUG) { System.out.println(\"InterfaceHeaderName1 ::= Modifiersopt interface...\"); }  //$NON-NLS-1$", "+    case 237 : if (DEBUG) { System.out.println(\"InterfaceHeaderName1 ::= Modifiersopt interface...\"); }  //$NON-NLS-1$", "-    case 237 : if (DEBUG) { System.out.println(\"InterfaceHeaderExtends ::= extends InterfaceTypeList\"); }  //$NON-NLS-1$", "+    case 238 : if (DEBUG) { System.out.println(\"InterfaceHeaderExtends ::= extends InterfaceTypeList\"); }  //$NON-NLS-1$", "-    case 240 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "+    case 241 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "-    case 241 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclaration ::= SEMICOLON\"); }  //$NON-NLS-1$", "+    case 242 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclaration ::= SEMICOLON\"); }  //$NON-NLS-1$", "-    case 242 : if (DEBUG) { System.out.println(\"PushDefault ::=\"); }  //$NON-NLS-1$", "+    case 243 : if (DEBUG) { System.out.println(\"PushDefault ::=\"); }  //$NON-NLS-1$", "-    case 244 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclaration ::= MethodHeader default...\"); }  //$NON-NLS-1$", "+    case 245 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclaration ::= MethodHeader default...\"); }  //$NON-NLS-1$", "-    case 245 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclaration ::= MethodHeader MethodBody\"); }  //$NON-NLS-1$", "+    case 246 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclaration ::= MethodHeader MethodBody\"); }  //$NON-NLS-1$", "-    case 246 : if (DEBUG) { System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader...\"); }  //$NON-NLS-1$", "+    case 247 : if (DEBUG) { System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader...\"); }  //$NON-NLS-1$", "-    case 247 : if (DEBUG) { System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader...\"); }  //$NON-NLS-1$", "+    case 248 : if (DEBUG) { System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader...\"); }  //$NON-NLS-1$", "-    case 258 : if (DEBUG) { System.out.println(\"PushLeftBrace ::=\"); }  //$NON-NLS-1$", "+    case 259 : if (DEBUG) { System.out.println(\"PushLeftBrace ::=\"); }  //$NON-NLS-1$", "-    case 259 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace ,opt RBRACE\"); }  //$NON-NLS-1$", "+    case 260 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace ,opt RBRACE\"); }  //$NON-NLS-1$", "-\t\t\tbreak;", "- ", "-    case 260 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$", "-\t\t    consumeArrayInitializer();  ", "-    case 263 : if (DEBUG) { System.out.println(\"VariableInitializers ::= VariableInitializers COMMA...\"); }  //$NON-NLS-1$", "+    case 262 : if (DEBUG) { System.out.println(\"ArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$", "+\t\t    consumeArrayInitializer();  ", "+\t\t\tbreak;", "+ ", "+    case 264 : if (DEBUG) { System.out.println(\"VariableInitializers ::= VariableInitializers COMMA...\"); }  //$NON-NLS-1$", "-    case 264 : if (DEBUG) { System.out.println(\"Block ::= OpenBlock LBRACE BlockStatementsopt RBRACE\"); }  //$NON-NLS-1$", "+    case 265 : if (DEBUG) { System.out.println(\"Block ::= OpenBlock LBRACE BlockStatementsopt RBRACE\"); }  //$NON-NLS-1$", "-    case 265 : if (DEBUG) { System.out.println(\"OpenBlock ::=\"); }  //$NON-NLS-1$", "+    case 266 : if (DEBUG) { System.out.println(\"OpenBlock ::=\"); }  //$NON-NLS-1$", "-    case 267 : if (DEBUG) { System.out.println(\"BlockStatements ::= BlockStatements BlockStatement\"); }  //$NON-NLS-1$", "+    case 268 : if (DEBUG) { System.out.println(\"BlockStatements ::= BlockStatements BlockStatement\"); }  //$NON-NLS-1$", "-    case 271 : if (DEBUG) { System.out.println(\"BlockStatement ::= InterfaceDeclaration\"); }  //$NON-NLS-1$", "+    case 272 : if (DEBUG) { System.out.println(\"BlockStatement ::= InterfaceDeclaration\"); }  //$NON-NLS-1$", "-    case 272 : if (DEBUG) { System.out.println(\"BlockStatement ::= AnnotationTypeDeclaration\"); }  //$NON-NLS-1$", "+    case 273 : if (DEBUG) { System.out.println(\"BlockStatement ::= AnnotationTypeDeclaration\"); }  //$NON-NLS-1$", "-    case 273 : if (DEBUG) { System.out.println(\"BlockStatement ::= EnumDeclaration\"); }  //$NON-NLS-1$", "+    case 274 : if (DEBUG) { System.out.println(\"BlockStatement ::= EnumDeclaration\"); }  //$NON-NLS-1$", "-    case 274 : if (DEBUG) { System.out.println(\"LocalVariableDeclarationStatement ::=...\"); }  //$NON-NLS-1$", "+    case 275 : if (DEBUG) { System.out.println(\"LocalVariableDeclarationStatement ::=...\"); }  //$NON-NLS-1$", "-    case 275 : if (DEBUG) { System.out.println(\"LocalVariableDeclaration ::= Type PushModifiers...\"); }  //$NON-NLS-1$", "+    case 276 : if (DEBUG) { System.out.println(\"LocalVariableDeclaration ::= Type PushModifiers...\"); }  //$NON-NLS-1$", "-    case 276 : if (DEBUG) { System.out.println(\"LocalVariableDeclaration ::= Modifiers Type...\"); }  //$NON-NLS-1$", "+    case 277 : if (DEBUG) { System.out.println(\"LocalVariableDeclaration ::= Modifiers Type...\"); }  //$NON-NLS-1$", "-    case 277 : if (DEBUG) { System.out.println(\"PushModifiers ::=\"); }  //$NON-NLS-1$", "+    case 278 : if (DEBUG) { System.out.println(\"PushModifiers ::=\"); }  //$NON-NLS-1$", "-    case 278 : if (DEBUG) { System.out.println(\"PushModifiersForHeader ::=\"); }  //$NON-NLS-1$", "+    case 279 : if (DEBUG) { System.out.println(\"PushModifiersForHeader ::=\"); }  //$NON-NLS-1$", "-    case 279 : if (DEBUG) { System.out.println(\"PushRealModifiers ::=\"); }  //$NON-NLS-1$", "+    case 280 : if (DEBUG) { System.out.println(\"PushRealModifiers ::=\"); }  //$NON-NLS-1$", "-    case 306 : if (DEBUG) { System.out.println(\"EmptyStatement ::= SEMICOLON\"); }  //$NON-NLS-1$", "+    case 307 : if (DEBUG) { System.out.println(\"EmptyStatement ::= SEMICOLON\"); }  //$NON-NLS-1$", "-    case 307 : if (DEBUG) { System.out.println(\"LabeledStatement ::= Label COLON Statement\"); }  //$NON-NLS-1$", "+    case 308 : if (DEBUG) { System.out.println(\"LabeledStatement ::= Label COLON Statement\"); }  //$NON-NLS-1$", "-    case 308 : if (DEBUG) { System.out.println(\"LabeledStatementNoShortIf ::= Label COLON...\"); }  //$NON-NLS-1$", "+    case 309 : if (DEBUG) { System.out.println(\"LabeledStatementNoShortIf ::= Label COLON...\"); }  //$NON-NLS-1$", "-    case 309 : if (DEBUG) { System.out.println(\"Label ::= Identifier\"); }  //$NON-NLS-1$", "+    case 310 : if (DEBUG) { System.out.println(\"Label ::= Identifier\"); }  //$NON-NLS-1$", "-     case 310 : if (DEBUG) { System.out.println(\"ExpressionStatement ::= StatementExpression SEMICOLON\"); }  //$NON-NLS-1$", "+     case 311 : if (DEBUG) { System.out.println(\"ExpressionStatement ::= StatementExpression SEMICOLON\"); }  //$NON-NLS-1$", "-    case 319 : if (DEBUG) { System.out.println(\"IfThenStatement ::= if LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "+    case 320 : if (DEBUG) { System.out.println(\"IfThenStatement ::= if LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "-    case 320 : if (DEBUG) { System.out.println(\"IfThenElseStatement ::= if LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "+    case 321 : if (DEBUG) { System.out.println(\"IfThenElseStatement ::= if LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "-    case 321 : if (DEBUG) { System.out.println(\"IfThenElseStatementNoShortIf ::= if LPAREN Expression...\"); }  //$NON-NLS-1$", "+    case 322 : if (DEBUG) { System.out.println(\"IfThenElseStatementNoShortIf ::= if LPAREN Expression...\"); }  //$NON-NLS-1$", "-    case 322 : if (DEBUG) { System.out.println(\"SwitchStatement ::= switch LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "+    case 323 : if (DEBUG) { System.out.println(\"SwitchStatement ::= switch LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "-    case 323 : if (DEBUG) { System.out.println(\"SwitchBlock ::= LBRACE RBRACE\"); }  //$NON-NLS-1$", "+    case 324 : if (DEBUG) { System.out.println(\"SwitchBlock ::= LBRACE RBRACE\"); }  //$NON-NLS-1$", "-    case 326 : if (DEBUG) { System.out.println(\"SwitchBlock ::= LBRACE SwitchBlockStatements...\"); }  //$NON-NLS-1$", "+    case 327 : if (DEBUG) { System.out.println(\"SwitchBlock ::= LBRACE SwitchBlockStatements...\"); }  //$NON-NLS-1$", "-    case 328 : if (DEBUG) { System.out.println(\"SwitchBlockStatements ::= SwitchBlockStatements...\"); }  //$NON-NLS-1$", "+    case 329 : if (DEBUG) { System.out.println(\"SwitchBlockStatements ::= SwitchBlockStatements...\"); }  //$NON-NLS-1$", "-    case 329 : if (DEBUG) { System.out.println(\"SwitchBlockStatement ::= SwitchLabels BlockStatements\"); }  //$NON-NLS-1$", "+    case 330 : if (DEBUG) { System.out.println(\"SwitchBlockStatement ::= SwitchLabels BlockStatements\"); }  //$NON-NLS-1$", "-    case 331 : if (DEBUG) { System.out.println(\"SwitchLabels ::= SwitchLabels SwitchLabel\"); }  //$NON-NLS-1$", "+    case 332 : if (DEBUG) { System.out.println(\"SwitchLabels ::= SwitchLabels SwitchLabel\"); }  //$NON-NLS-1$", "-     case 332 : if (DEBUG) { System.out.println(\"SwitchLabel ::= case ConstantExpression COLON\"); }  //$NON-NLS-1$", "+     case 333 : if (DEBUG) { System.out.println(\"SwitchLabel ::= case ConstantExpression COLON\"); }  //$NON-NLS-1$", "-     case 333 : if (DEBUG) { System.out.println(\"SwitchLabel ::= default COLON\"); }  //$NON-NLS-1$", "+     case 334 : if (DEBUG) { System.out.println(\"SwitchLabel ::= default COLON\"); }  //$NON-NLS-1$", "-    case 334 : if (DEBUG) { System.out.println(\"WhileStatement ::= while LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "+    case 335 : if (DEBUG) { System.out.println(\"WhileStatement ::= while LPAREN Expression RPAREN...\"); }  //$NON-NLS-1$", "-    case 335 : if (DEBUG) { System.out.println(\"WhileStatementNoShortIf ::= while LPAREN Expression...\"); }  //$NON-NLS-1$", "+    case 336 : if (DEBUG) { System.out.println(\"WhileStatementNoShortIf ::= while LPAREN Expression...\"); }  //$NON-NLS-1$", "-    case 336 : if (DEBUG) { System.out.println(\"DoStatement ::= do Statement while LPAREN Expression...\"); }  //$NON-NLS-1$", "+    case 337 : if (DEBUG) { System.out.println(\"DoStatement ::= do Statement while LPAREN Expression...\"); }  //$NON-NLS-1$", "-    case 337 : if (DEBUG) { System.out.println(\"ForStatement ::= for LPAREN ForInitopt SEMICOLON...\"); }  //$NON-NLS-1$", "+    case 338 : if (DEBUG) { System.out.println(\"ForStatement ::= for LPAREN ForInitopt SEMICOLON...\"); }  //$NON-NLS-1$", "-    case 338 : if (DEBUG) { System.out.println(\"ForStatementNoShortIf ::= for LPAREN ForInitopt...\"); }  //$NON-NLS-1$", "+    case 339 : if (DEBUG) { System.out.println(\"ForStatementNoShortIf ::= for LPAREN ForInitopt...\"); }  //$NON-NLS-1$", "-    case 339 : if (DEBUG) { System.out.println(\"ForInit ::= StatementExpressionList\"); }  //$NON-NLS-1$", "+    case 340 : if (DEBUG) { System.out.println(\"ForInit ::= StatementExpressionList\"); }  //$NON-NLS-1$", "-    case 343 : if (DEBUG) { System.out.println(\"StatementExpressionList ::= StatementExpressionList...\"); }  //$NON-NLS-1$", "+    case 344 : if (DEBUG) { System.out.println(\"StatementExpressionList ::= StatementExpressionList...\"); }  //$NON-NLS-1$", "-    case 344 : if (DEBUG) { System.out.println(\"AssertStatement ::= assert Expression SEMICOLON\"); }  //$NON-NLS-1$", "+    case 345 : if (DEBUG) { System.out.println(\"AssertStatement ::= assert Expression SEMICOLON\"); }  //$NON-NLS-1$", "-    case 345 : if (DEBUG) { System.out.println(\"AssertStatement ::= assert Expression COLON Expression\"); }  //$NON-NLS-1$", "+    case 346 : if (DEBUG) { System.out.println(\"AssertStatement ::= assert Expression COLON Expression\"); }  //$NON-NLS-1$", "-    case 346 : if (DEBUG) { System.out.println(\"BreakStatement ::= break SEMICOLON\"); }  //$NON-NLS-1$", "+    case 347 : if (DEBUG) { System.out.println(\"BreakStatement ::= break SEMICOLON\"); }  //$NON-NLS-1$", "-    case 347 : if (DEBUG) { System.out.println(\"BreakStatement ::= break Identifier SEMICOLON\"); }  //$NON-NLS-1$", "+    case 348 : if (DEBUG) { System.out.println(\"BreakStatement ::= break Identifier SEMICOLON\"); }  //$NON-NLS-1$", "-    case 348 : if (DEBUG) { System.out.println(\"ContinueStatement ::= continue SEMICOLON\"); }  //$NON-NLS-1$", "+    case 349 : if (DEBUG) { System.out.println(\"ContinueStatement ::= continue SEMICOLON\"); }  //$NON-NLS-1$", "-    case 349 : if (DEBUG) { System.out.println(\"ContinueStatement ::= continue Identifier SEMICOLON\"); }  //$NON-NLS-1$", "+    case 350 : if (DEBUG) { System.out.println(\"ContinueStatement ::= continue Identifier SEMICOLON\"); }  //$NON-NLS-1$", "-    case 350 : if (DEBUG) { System.out.println(\"ReturnStatement ::= return Expressionopt SEMICOLON\"); }  //$NON-NLS-1$", "+    case 351 : if (DEBUG) { System.out.println(\"ReturnStatement ::= return Expressionopt SEMICOLON\"); }  //$NON-NLS-1$", "-    case 351 : if (DEBUG) { System.out.println(\"ThrowStatement ::= throw Expression SEMICOLON\"); }  //$NON-NLS-1$", "+    case 352 : if (DEBUG) { System.out.println(\"ThrowStatement ::= throw Expression SEMICOLON\"); }  //$NON-NLS-1$", "-    case 352 : if (DEBUG) { System.out.println(\"SynchronizedStatement ::= OnlySynchronized LPAREN...\"); }  //$NON-NLS-1$", "+    case 353 : if (DEBUG) { System.out.println(\"SynchronizedStatement ::= OnlySynchronized LPAREN...\"); }  //$NON-NLS-1$", "-    case 353 : if (DEBUG) { System.out.println(\"OnlySynchronized ::= synchronized\"); }  //$NON-NLS-1$", "+    case 354 : if (DEBUG) { System.out.println(\"OnlySynchronized ::= synchronized\"); }  //$NON-NLS-1$", "-    case 354 : if (DEBUG) { System.out.println(\"TryStatement ::= try TryBlock Catches\"); }  //$NON-NLS-1$", "+    case 355 : if (DEBUG) { System.out.println(\"TryStatement ::= try TryBlock Catches\"); }  //$NON-NLS-1$", "-    case 355 : if (DEBUG) { System.out.println(\"TryStatement ::= try TryBlock Catchesopt Finally\"); }  //$NON-NLS-1$", "+    case 356 : if (DEBUG) { System.out.println(\"TryStatement ::= try TryBlock Catchesopt Finally\"); }  //$NON-NLS-1$", "-    case 356 : if (DEBUG) { System.out.println(\"TryStatementWithResources ::= try ResourceSpecification\"); }  //$NON-NLS-1$", "+    case 357 : if (DEBUG) { System.out.println(\"TryStatementWithResources ::= try ResourceSpecification\"); }  //$NON-NLS-1$", "-    case 357 : if (DEBUG) { System.out.println(\"TryStatementWithResources ::= try ResourceSpecification\"); }  //$NON-NLS-1$", "+    case 358 : if (DEBUG) { System.out.println(\"TryStatementWithResources ::= try ResourceSpecification\"); }  //$NON-NLS-1$", "-    case 358 : if (DEBUG) { System.out.println(\"ResourceSpecification ::= LPAREN Resources ;opt RPAREN\"); }  //$NON-NLS-1$", "+    case 359 : if (DEBUG) { System.out.println(\"ResourceSpecification ::= LPAREN Resources ;opt RPAREN\"); }  //$NON-NLS-1$", "-    case 359 : if (DEBUG) { System.out.println(\";opt ::=\"); }  //$NON-NLS-1$", "+    case 360 : if (DEBUG) { System.out.println(\";opt ::=\"); }  //$NON-NLS-1$", "-    case 360 : if (DEBUG) { System.out.println(\";opt ::= SEMICOLON\"); }  //$NON-NLS-1$", "+    case 361 : if (DEBUG) { System.out.println(\";opt ::= SEMICOLON\"); }  //$NON-NLS-1$", "-    case 361 : if (DEBUG) { System.out.println(\"Resources ::= Resource\"); }  //$NON-NLS-1$", "+    case 362 : if (DEBUG) { System.out.println(\"Resources ::= Resource\"); }  //$NON-NLS-1$", "-    case 362 : if (DEBUG) { System.out.println(\"Resources ::= Resources TrailingSemiColon Resource\"); }  //$NON-NLS-1$", "+    case 363 : if (DEBUG) { System.out.println(\"Resources ::= Resources TrailingSemiColon Resource\"); }  //$NON-NLS-1$", "-    case 363 : if (DEBUG) { System.out.println(\"TrailingSemiColon ::= SEMICOLON\"); }  //$NON-NLS-1$", "+    case 364 : if (DEBUG) { System.out.println(\"TrailingSemiColon ::= SEMICOLON\"); }  //$NON-NLS-1$", "-    case 364 : if (DEBUG) { System.out.println(\"Resource ::= Type PushModifiers VariableDeclaratorId...\"); }  //$NON-NLS-1$", "+    case 365 : if (DEBUG) { System.out.println(\"Resource ::= Type PushModifiers VariableDeclaratorId...\"); }  //$NON-NLS-1$", "-    case 365 : if (DEBUG) { System.out.println(\"Resource ::= Modifiers Type PushRealModifiers...\"); }  //$NON-NLS-1$", "+    case 366 : if (DEBUG) { System.out.println(\"Resource ::= Modifiers Type PushRealModifiers...\"); }  //$NON-NLS-1$", "-    case 367 : if (DEBUG) { System.out.println(\"ExitTryBlock ::=\"); }  //$NON-NLS-1$", "+    case 368 : if (DEBUG) { System.out.println(\"ExitTryBlock ::=\"); }  //$NON-NLS-1$", "-    case 369 : if (DEBUG) { System.out.println(\"Catches ::= Catches CatchClause\"); }  //$NON-NLS-1$", "+    case 370 : if (DEBUG) { System.out.println(\"Catches ::= Catches CatchClause\"); }  //$NON-NLS-1$", "-    case 370 : if (DEBUG) { System.out.println(\"CatchClause ::= catch LPAREN CatchFormalParameter RPAREN\"); }  //$NON-NLS-1$", "+    case 371 : if (DEBUG) { System.out.println(\"CatchClause ::= catch LPAREN CatchFormalParameter RPAREN\"); }  //$NON-NLS-1$", "-    case 372 : if (DEBUG) { System.out.println(\"PushLPAREN ::= LPAREN\"); }  //$NON-NLS-1$", "+    case 373 : if (DEBUG) { System.out.println(\"PushLPAREN ::= LPAREN\"); }  //$NON-NLS-1$", "-    case 373 : if (DEBUG) { System.out.println(\"PushRPAREN ::= RPAREN\"); }  //$NON-NLS-1$", "+    case 374 : if (DEBUG) { System.out.println(\"PushRPAREN ::= RPAREN\"); }  //$NON-NLS-1$", "-    case 378 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= this\"); }  //$NON-NLS-1$", "+    case 379 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= this\"); }  //$NON-NLS-1$", "-    case 379 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Expression_NotName...\"); }  //$NON-NLS-1$", "+    case 380 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Expression_NotName...\"); }  //$NON-NLS-1$", "-    case 380 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Name PushRPAREN\"); }  //$NON-NLS-1$", "+    case 381 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Name PushRPAREN\"); }  //$NON-NLS-1$", "-    case 383 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT this\"); }  //$NON-NLS-1$", "+    case 384 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT this\"); }  //$NON-NLS-1$", "-    case 384 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT super\"); }  //$NON-NLS-1$", "+    case 385 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT super\"); }  //$NON-NLS-1$", "-    case 385 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT class\"); }  //$NON-NLS-1$", "+    case 386 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name DOT class\"); }  //$NON-NLS-1$", "-    case 386 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name Dims DOT class\"); }  //$NON-NLS-1$", "+    case 387 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= Name Dims DOT class\"); }  //$NON-NLS-1$", "-    case 387 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PrimitiveType Dims DOT class\"); }  //$NON-NLS-1$", "+    case 388 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PrimitiveType Dims DOT class\"); }  //$NON-NLS-1$", "-    case 388 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PrimitiveType DOT class\"); }  //$NON-NLS-1$", "+    case 389 : if (DEBUG) { System.out.println(\"PrimaryNoNewArray ::= PrimitiveType DOT class\"); }  //$NON-NLS-1$", "-    case 394 : if (DEBUG) { System.out.println(\"ReferenceExpressionTypeArgumentsAndTrunk0 ::=...\"); }  //$NON-NLS-1$", "+    case 395 : if (DEBUG) { System.out.println(\"ReferenceExpressionTypeArgumentsAndTrunk0 ::=...\"); }  //$NON-NLS-1$", "-    case 395 : if (DEBUG) { System.out.println(\"ReferenceExpressionTypeArgumentsAndTrunk0 ::=...\"); }  //$NON-NLS-1$", "+    case 396 : if (DEBUG) { System.out.println(\"ReferenceExpressionTypeArgumentsAndTrunk0 ::=...\"); }  //$NON-NLS-1$", "-    case 396 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= PrimitiveType Dims COLON_COLON\"); }  //$NON-NLS-1$", "+    case 397 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= PrimitiveType Dims COLON_COLON\"); }  //$NON-NLS-1$", "-    case 397 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name Dimsopt COLON_COLON...\"); }  //$NON-NLS-1$", "+    case 398 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name Dimsopt COLON_COLON...\"); }  //$NON-NLS-1$", "-    case 398 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name BeginTypeArguments...\"); }  //$NON-NLS-1$", "+    case 399 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name BeginTypeArguments...\"); }  //$NON-NLS-1$", "-    case 399 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Primary COLON_COLON...\"); }  //$NON-NLS-1$", "+    case 400 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Primary COLON_COLON...\"); }  //$NON-NLS-1$", "-    case 400 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= super COLON_COLON...\"); }  //$NON-NLS-1$", "+    case 401 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= super COLON_COLON...\"); }  //$NON-NLS-1$", "-    case 401 : if (DEBUG) { System.out.println(\"NonWildTypeArgumentsopt ::=\"); }  //$NON-NLS-1$", "+    case 402 : if (DEBUG) { System.out.println(\"NonWildTypeArgumentsopt ::=\"); }  //$NON-NLS-1$", "-    case 403 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= Identifier\"); }  //$NON-NLS-1$", "+    case 404 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= Identifier\"); }  //$NON-NLS-1$", "-    case 404 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= new\"); }  //$NON-NLS-1$", "+    case 405 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= new\"); }  //$NON-NLS-1$", "-    case 405 : if (DEBUG) { System.out.println(\"LambdaExpression ::= LambdaParameters ARROW LambdaBody\"); }  //$NON-NLS-1$", "+    case 406 : if (DEBUG) { System.out.println(\"LambdaExpression ::= LambdaParameters ARROW LambdaBody\"); }  //$NON-NLS-1$", "-    case 406 : if (DEBUG) { System.out.println(\"LambdaParameters ::= Identifier\"); }  //$NON-NLS-1$", "+    case 407 : if (DEBUG) { System.out.println(\"LambdaParameters ::= Identifier\"); }  //$NON-NLS-1$", "-    case 414 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameterList ::=...\"); }  //$NON-NLS-1$", "+    case 413 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameterList ::=...\"); }  //$NON-NLS-1$", "-    case 415 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameter ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+    case 414 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameter ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-    case 417 : if (DEBUG) { System.out.println(\"LambdaBody ::= NestedType NestedMethod LBRACE...\"); }  //$NON-NLS-1$", "+    case 416 : if (DEBUG) { System.out.println(\"LambdaBody ::= NestedType NestedMethod LBRACE...\"); }  //$NON-NLS-1$", "-    case 418 : if (DEBUG) { System.out.println(\"ElidedLeftBraceAndReturn ::=\"); }  //$NON-NLS-1$", "+    case 417 : if (DEBUG) { System.out.println(\"ElidedLeftBraceAndReturn ::=\"); }  //$NON-NLS-1$", "-    case 419 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "+    case 418 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "-    case 420 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "+    case 419 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "-    case 421 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "+    case 420 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "-    case 422 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+    case 421 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-    case 423 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+    case 422 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "+\t\t\tbreak;", "+ ", "+    case 423 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "-\t\t\tbreak;", "- ", "-    case 425 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "-    case 426 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "+    case 425 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "-    case 427 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "+    case 426 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "-    case 428 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 427 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 430 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 429 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 431 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 430 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 433 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 432 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 435 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "+    case 434 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "-    case 436 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "+    case 435 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "-    case 437 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "+    case 436 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "-    case 438 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 437 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 439 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "+    case 438 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "-    case 440 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 439 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 441 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 440 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 443 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "+    case 442 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "-     case 445 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= TypeAnnotationsopt LBRACKET...\"); }  //$NON-NLS-1$", "+     case 444 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= TypeAnnotationsopt LBRACKET...\"); }  //$NON-NLS-1$", "-     case 446 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "+     case 445 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "-     case 449 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 448 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-     case 450 : if (DEBUG) { System.out.println(\"OneDimLoop ::= TypeAnnotations LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 449 : if (DEBUG) { System.out.println(\"OneDimLoop ::= TypeAnnotations LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-    case 451 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "+    case 450 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "-    case 452 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "+    case 451 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "-    case 453 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+    case 452 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-    case 454 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 453 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 455 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 454 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 456 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 455 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 457 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 456 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 458 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 457 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 459 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "+    case 458 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "-    case 460 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "+    case 459 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "-    case 461 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "+    case 460 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "-    case 463 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "+    case 462 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "-    case 466 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "+    case 465 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "-    case 467 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "+    case 466 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "-    case 468 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "+    case 467 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "-    case 471 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 470 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 472 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 471 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 474 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 473 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 475 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 474 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 477 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "+    case 476 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "-    case 478 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "+    case 477 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "-    case 480 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "+    case 479 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "-    case 481 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 480 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 482 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 481 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 483 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "+    case 482 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "-    case 484 : if (DEBUG) { System.out.println(\"CastExpression ::= BeginIntersectionCast PushLPAREN...\"); }  //$NON-NLS-1$", "+    case 483 : if (DEBUG) { System.out.println(\"CastExpression ::= BeginIntersectionCast PushLPAREN...\"); }  //$NON-NLS-1$", "-    case 485 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims...\"); }  //$NON-NLS-1$", "+    case 484 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims...\"); }  //$NON-NLS-1$", "-    case 486 : if (DEBUG) { System.out.println(\"AdditionalBoundsListOpt ::=\"); }  //$NON-NLS-1$", "+    case 485 : if (DEBUG) { System.out.println(\"AdditionalBoundsListOpt ::=\"); }  //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b903f0ca31fe553cf825c25c33752840", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "9dd546ec0d84bb4ff147ae28c2586a5ed0820cc6", "commitAfterChange": "43c17a731c922446eef721655f4150b14e96c8c9", "methodNumberBeforeChange": 271, "methodNumberAfterChange": 271, "signatureBeforeChange": " protected void consumeRule(int act)", "signatureAfterChange": " protected void consumeRule(int act)", "diff": ["-    case 373 : if (DEBUG) { System.out.println(\"NonWildTypeArgumentsopt ::=\"); }  //$NON-NLS-1$", "+    case 373 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= super COLON_COLON...\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceExpressionSuperForm();  ", "+\t\t\tbreak;", "+ ", "+    case 374 : if (DEBUG) { System.out.println(\"NonWildTypeArgumentsopt ::=\"); }  //$NON-NLS-1$", "-    case 375 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= Identifier\"); }  //$NON-NLS-1$", "+    case 376 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= Identifier\"); }  //$NON-NLS-1$", "-    case 376 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= new\"); }  //$NON-NLS-1$", "+    case 377 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= new\"); }  //$NON-NLS-1$", "-    case 377 : if (DEBUG) { System.out.println(\"LambdaExpression ::= LambdaParameters ARROW LambdaBody\"); }  //$NON-NLS-1$", "+    case 378 : if (DEBUG) { System.out.println(\"LambdaExpression ::= LambdaParameters ARROW LambdaBody\"); }  //$NON-NLS-1$", "-    case 378 : if (DEBUG) { System.out.println(\"LambdaParameters ::= Identifier\"); }  //$NON-NLS-1$", "+    case 379 : if (DEBUG) { System.out.println(\"LambdaParameters ::= Identifier\"); }  //$NON-NLS-1$", "-    case 382 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameterList ::=...\"); }  //$NON-NLS-1$", "+    case 383 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameterList ::=...\"); }  //$NON-NLS-1$", "-    case 383 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameter ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+    case 384 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameter ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-    case 386 : if (DEBUG) { System.out.println(\"ElidedLeftBraceAndReturn ::=\"); }  //$NON-NLS-1$", "+    case 387 : if (DEBUG) { System.out.println(\"ElidedLeftBraceAndReturn ::=\"); }  //$NON-NLS-1$", "-    case 387 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "+    case 388 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "-    case 388 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "+    case 389 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "-    case 389 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "+    case 390 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "-    case 390 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+    case 391 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-    case 391 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "-\t\t\tbreak;", "- ", "-    case 392 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "+    case 392 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "+\t\t\tbreak;", "+ ", "+    case 394 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "-    case 394 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "+    case 395 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "-    case 395 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "+    case 396 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "-    case 396 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 397 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 398 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 399 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 399 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 400 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 401 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 402 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 403 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "+    case 404 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "-    case 404 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "+    case 405 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new PrimitiveType...\"); }  //$NON-NLS-1$", "-    case 405 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "+    case 406 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "-    case 406 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 407 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 407 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "+    case 408 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType\"); }  //$NON-NLS-1$", "-    case 408 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 409 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 409 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 410 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 411 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "+    case 412 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "-     case 413 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 414 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-     case 414 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "+     case 415 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "-     case 417 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 418 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-    case 418 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "+    case 419 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "-    case 419 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "+    case 420 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "-    case 420 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+    case 421 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-    case 421 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 422 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 422 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 423 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 423 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 424 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 424 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 425 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 425 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 426 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 426 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "+    case 427 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "-    case 427 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "+    case 428 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "-    case 428 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "+    case 429 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "-    case 430 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "+    case 431 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "-    case 433 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "+    case 434 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "-    case 434 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "+    case 435 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "-    case 435 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "+    case 436 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "-    case 438 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 439 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 439 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 440 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 441 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 442 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 442 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 443 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 444 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "+    case 445 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "-    case 445 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "+    case 446 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "-    case 447 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "+    case 448 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "-    case 448 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 449 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 449 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 450 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 450 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "+    case 451 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name PushRPAREN...\"); }  //$NON-NLS-1$", "-    case 451 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\"); }  //$NON-NLS-1$", "+    case 452 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\"); }  //$NON-NLS-1$", "-    case 452 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "+    case 453 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "-    case 453 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "+    case 454 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "-    case 454 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "+    case 455 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "-    case 455 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "+    case 456 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "-    case 457 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "+\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 461 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 462 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 464 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 465 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 466 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 468 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS);  ", "-\t\t\tbreak;", "- ", "-    case 469 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER);  ", "-\t\t\tbreak;", "- ", "-    case 470 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 471 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 473 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "-\t\t    consumeInstanceOfExpression();  ", "-\t\t\tbreak;", "- ", "-    case 475 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 476 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 478 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND);  ", "-\t\t\tbreak;", "- ", "-    case 480 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.XOR);  ", "-\t\t\tbreak;", "- ", "-    case 482 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR);  ", "-\t\t\tbreak;", "- ", "-    case 484 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND_AND);  ", "-\t\t\tbreak;", "- ", "-    case 486 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR_OR);  ", "-\t\t\tbreak;", "- ", "-    case 488 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  ", "-\t\t\tbreak;", "- ", "-    case 491 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignment();  ", "-\t\t\tbreak;", "- ", "-    case 493 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "-\t\t    ignoreExpressionAssignment(); ", "-\t\t\tbreak;", "- ", "-    case 494 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 495 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 496 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(DIVIDE);  ", "-\t\t\tbreak;", "- ", "-    case 497 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 498 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 499 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 500 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 501 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 502 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 503 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(AND);  ", "-\t\t\tbreak;", "- ", "-    case 504 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(XOR);  ", "-\t\t\tbreak;", "- ", "-    case 505 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(OR);  ", "-\t\t\tbreak;", "- ", "-    case 506 : if (DEBUG) { System.out.println(\"Expression ::= AssignmentExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeExpression();  ", "-\t\t\tbreak;", "- ", "-    case 509 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyExpression();  ", "-\t\t\tbreak;", "- ", "-    case 514 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyClassBodyDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-    case 515 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassBodyDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-     case 516 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeDefaultModifiers();  ", "-\t\t\tbreak;", "- ", "-    case 517 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "-\t\t    consumeModifiers();  ", "-\t\t\tbreak;", "- ", "-    case 518 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyBlockStatementsopt();  ", "-\t\t\tbreak;", "- ", "-     case 520 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyDimsopt();  ", "-\t\t\tbreak;", "- ", "-     case 522 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyArgumentListopt();  ", "-\t\t\tbreak;", "- ", "-    case 526 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeFormalParameterListopt();  ", "-\t\t\tbreak;", "- ", "-     case 530 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyInterfaceMemberDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-     case 531 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-\t\t    consumeInterfaceMemberDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-    case 532 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeNestedType();  ", "-\t\t\tbreak;", "-", "-     case 533 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyForInitopt();  ", "-\t\t\tbreak;", "- ", "-     case 535 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyForUpdateopt();  ", "-\t\t\tbreak;", "- ", "-     case 539 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyCatchesopt();  ", "-\t\t\tbreak;", "- ", "-     case 541 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumDeclaration();  ", "-\t\t\tbreak;", "- ", "-     case 542 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeader();  ", "-\t\t\tbreak;", "- ", "-     case 543 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeaderName();  ", "-\t\t\tbreak;", "- ", "-     case 544 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeaderNameWithTypeParameters();  ", "-\t\t\tbreak;", "- ", "-     case 545 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyNoConstants();  ", "-\t\t\tbreak;", "- ", "-     case 546 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyNoConstants();  ", "-\t\t\tbreak;", "- ", "-     case 547 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyWithConstants();  ", "-\t\t\tbreak;", "- ", "-     case 548 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyWithConstants();  ", "-\t\t\tbreak;", "- ", "-    case 550 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstants();  ", "-\t\t\tbreak;", "- ", "-    case 551 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantHeaderName();  ", "-\t\t\tbreak;", "- ", "-    case 552 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantHeader();  ", "-\t\t\tbreak;", "- ", "-    case 553 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantWithClassBody();  ", "-\t\t\tbreak;", "- ", "-    case 554 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantNoClassBody();  ", "-\t\t\tbreak;", "- ", "-    case 555 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 556 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyArguments();  ", "-\t\t\tbreak;", "- ", "-    case 558 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumDeclarations();  ", "-\t\t\tbreak;", "- ", "-    case 559 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyEnumDeclarations();  ", "-\t\t\tbreak;", "- ", "-    case 561 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatement();  ", "-\t\t\tbreak;", "- ", "-    case 562 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatement();  ", "-\t\t\tbreak;", "- ", "-    case 563 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeaderInit(false);  ", "-\t\t\tbreak;", "- ", "-    case 564 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeaderInit(true);  ", "-\t\t\tbreak;", "- ", "-    case 565 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeader();  ", "-\t\t\tbreak;", "- ", "-    case 566 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeImportDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 567 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "-\t\t    consumeSingleStaticImportDeclarationName();  ", "-\t\t\tbreak;", "- ", "-    case 568 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeImportDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 569 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "-\t\t    consumeStaticImportOnDemandDeclarationName();  ", "-\t\t\tbreak;", "- ", "-    case 570 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 571 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-\t\t    consumeOnlyTypeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 573 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList1();  ", "-\t\t\tbreak;", "- ", "-    case 575 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList();  ", "-\t\t\tbreak;", "- ", "-    case 576 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgument();  ", "-\t\t\tbreak;", "- ", "-    case 580 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType1();  ", "-\t\t\tbreak;", "- ", "-    case 581 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentReferenceType1();  ", "-\t\t\tbreak;", "- ", "-    case 583 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList2();  ", "-\t\t\tbreak;", "- ", "-    case 586 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType2();  ", "-\t\t\tbreak;", "- ", "-    case 587 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentReferenceType2();  ", "-\t\t\tbreak;", "- ", "-    case 589 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList3();  ", "-\t\t\tbreak;", "- ", "-    case 592 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType3();  ", "-\t\t\tbreak;", "- ", "-    case 593 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard();  ", "-\t\t\tbreak;", "- ", "-    case 594 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardWithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 595 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBoundsExtends();  ", "-\t\t\tbreak;", "- ", "-    case 596 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBoundsSuper();  ", "-\t\t\tbreak;", "- ", "-    case 597 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard1();  ", "-\t\t\tbreak;", "- ", "-    case 598 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard1WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 599 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds1Extends();  ", "-\t\t\tbreak;", "- ", "-    case 600 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds1Super();  ", "-\t\t\tbreak;", "- ", "-    case 601 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard2();  ", "-\t\t\tbreak;", "- ", "-    case 602 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard2WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 603 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds2Extends();  ", "-\t\t\tbreak;", "- ", "-    case 604 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds2Super();  ", "-\t\t\tbreak;", "- ", "-    case 605 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard3();  ", "-\t\t\tbreak;", "- ", "-    case 606 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard3WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 607 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds3Extends();  ", "-\t\t\tbreak;", "- ", "-    case 608 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds3Super();  ", "-\t\t\tbreak;", "- ", "-    case 609 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterHeader();  ", "-\t\t\tbreak;", "- ", "-    case 610 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameters();  ", "-\t\t\tbreak;", "- ", "-    case 612 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterList();  ", "-\t\t\tbreak;", "- ", "-    case 614 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterWithExtends();  ", "-\t\t\tbreak;", "- ", "-    case 615 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterWithExtendsAndBounds();  ", "-\t\t\tbreak;", "- ", "-    case 617 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBoundList();  ", "-\t\t\tbreak;", "- ", "-    case 618 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBound();  ", "-\t\t\tbreak;", "- ", "-    case 620 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterList1();  ", "-\t\t\tbreak;", "- ", "-    case 621 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1();  ", "-\t\t\tbreak;", "- ", "-    case 622 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1WithExtends();  ", "-\t\t\tbreak;", "- ", "-    case 623 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1WithExtendsAndBounds();  ", "-\t\t\tbreak;", "- ", "-    case 625 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBoundList1();  ", "-\t\t\tbreak;", "- ", "-    case 626 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBound1();  ", "-\t\t\tbreak;", "- ", "-    case 632 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 633 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 636 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);  ", "-\t\t\tbreak;", "- ", "-    case 637 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.NOT);  ", "-\t\t\tbreak;", "- ", "-    case 640 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 641 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 642 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 643 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.DIVIDE);  ", "-\t\t\tbreak;", "- ", "-    case 644 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 460 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-    case 645 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 647 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 462 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "-    case 648 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 649 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 463 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "-    case 650 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 652 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 465 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 653 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 654 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 466 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 655 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 656 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 467 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 657 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 659 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 469 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "-    case 660 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS);  ", "-\t\t\tbreak;", "- ", "-    case 661 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 470 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "-    case 662 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER);  ", "-\t\t\tbreak;", "- ", "-    case 663 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 471 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "-    case 664 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 665 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 472 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "-    case 666 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 668 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "-\t\t    consumeInstanceOfExpressionWithName();  ", "-\t\t\tbreak;", "- ", "-    case 669 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 474 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "-    case 671 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 476 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-    case 672 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpressionWithName(OperatorIds.EQUAL_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 673 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 477 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "-    case 674 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpressionWithName(OperatorIds.NOT_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 676 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "+    case 479 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "-    case 677 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.AND);  ", "-\t\t\tbreak;", "- ", "-    case 679 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 481 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "-    case 680 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.XOR);  ", "-\t\t\tbreak;", "- ", "-    case 682 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 483 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "-    case 683 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.OR);  ", "-\t\t\tbreak;", "- ", "-    case 685 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 485 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "-    case 686 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.AND_AND);  ", "-\t\t\tbreak;", "- ", "-    case 688 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 487 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 689 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.OR_OR);  ", "-\t\t\tbreak;", "- ", "-    case 691 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 489 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 692 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "+    case 492 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignment();  ", "+\t\t\tbreak;", "+ ", "+    case 494 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "+\t\t    ignoreExpressionAssignment(); ", "+\t\t\tbreak;", "+ ", "+    case 495 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 496 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(MULTIPLY);  ", "+\t\t\tbreak;", "+ ", "+    case 497 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(DIVIDE);  ", "+\t\t\tbreak;", "+ ", "+    case 498 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(REMAINDER);  ", "+\t\t\tbreak;", "+ ", "+    case 499 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 500 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 501 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(LEFT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 502 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 503 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 504 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(AND);  ", "+\t\t\tbreak;", "+ ", "+    case 505 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(XOR);  ", "+\t\t\tbreak;", "+ ", "+    case 506 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(OR);  ", "+\t\t\tbreak;", "+ ", "+    case 507 : if (DEBUG) { System.out.println(\"Expression ::= AssignmentExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 510 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 515 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyClassBodyDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+    case 516 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+\t\t    consumeClassBodyDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 517 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeDefaultModifiers();  ", "+\t\t\tbreak;", "+ ", "+    case 518 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "+\t\t    consumeModifiers();  ", "+\t\t\tbreak;", "+ ", "+    case 519 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyBlockStatementsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 521 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyDimsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 523 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyArgumentListopt();  ", "+\t\t\tbreak;", "+ ", "+    case 527 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeFormalParameterListopt();  ", "+\t\t\tbreak;", "+ ", "+     case 531 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyInterfaceMemberDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 532 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+\t\t    consumeInterfaceMemberDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+    case 533 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeNestedType();  ", "+\t\t\tbreak;", "+", "+     case 534 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyForInitopt();  ", "+\t\t\tbreak;", "+ ", "+     case 536 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyForUpdateopt();  ", "+\t\t\tbreak;", "+ ", "+     case 540 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyCatchesopt();  ", "+\t\t\tbreak;", "+ ", "+     case 542 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumDeclaration();  ", "+\t\t\tbreak;", "+ ", "+     case 543 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeader();  ", "+\t\t\tbreak;", "+ ", "+     case 544 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeaderName();  ", "+\t\t\tbreak;", "+ ", "+     case 545 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeaderNameWithTypeParameters();  ", "+\t\t\tbreak;", "+ ", "+     case 546 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyNoConstants();  ", "+\t\t\tbreak;", "+ ", "+     case 547 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyNoConstants();  ", "+\t\t\tbreak;", "+ ", "+     case 548 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyWithConstants();  ", "+\t\t\tbreak;", "+ ", "+     case 549 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyWithConstants();  ", "+\t\t\tbreak;", "+ ", "+    case 551 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstants();  ", "+\t\t\tbreak;", "+ ", "+    case 552 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantHeaderName();  ", "+\t\t\tbreak;", "+ ", "+    case 553 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 554 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantWithClassBody();  ", "+\t\t\tbreak;", "+ ", "+    case 555 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantNoClassBody();  ", "+\t\t\tbreak;", "+ ", "+    case 556 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+\t\t    consumeArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 557 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 559 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumDeclarations();  ", "+\t\t\tbreak;", "+ ", "+    case 560 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyEnumDeclarations();  ", "+\t\t\tbreak;", "+ ", "+    case 562 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatement();  ", "+\t\t\tbreak;", "+ ", "+    case 563 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatement();  ", "+\t\t\tbreak;", "+ ", "+    case 564 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeaderInit(false);  ", "+\t\t\tbreak;", "+ ", "+    case 565 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeaderInit(true);  ", "+\t\t\tbreak;", "+ ", "+    case 566 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 567 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeImportDeclaration();  ", "+\t\t\tbreak;", "+ ", "+    case 568 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "+\t\t    consumeSingleStaticImportDeclarationName();  ", "+\t\t\tbreak;", "+ ", "+    case 569 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeImportDeclaration();  ", "+\t\t\tbreak;", "+ ", "+    case 570 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "+\t\t    consumeStaticImportOnDemandDeclarationName();  ", "+\t\t\tbreak;", "+ ", "+    case 571 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 572 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+\t\t    consumeOnlyTypeArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 574 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList1();  ", "+\t\t\tbreak;", "+ ", "+    case 576 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList();  ", "+\t\t\tbreak;", "+ ", "+    case 577 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgument();  ", "+\t\t\tbreak;", "+ ", "+    case 581 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType1();  ", "+\t\t\tbreak;", "+ ", "+    case 582 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentReferenceType1();  ", "+\t\t\tbreak;", "+ ", "+    case 584 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList2();  ", "+\t\t\tbreak;", "+ ", "+    case 587 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType2();  ", "+\t\t\tbreak;", "+ ", "+    case 588 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentReferenceType2();  ", "+\t\t\tbreak;", "+ ", "+    case 590 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList3();  ", "+\t\t\tbreak;", "+ ", "+    case 593 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType3();  ", "+\t\t\tbreak;", "+ ", "+    case 594 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard();  ", "+\t\t\tbreak;", "+ ", "+    case 595 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardWithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 596 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBoundsExtends();  ", "+\t\t\tbreak;", "+ ", "+    case 597 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBoundsSuper();  ", "+\t\t\tbreak;", "+ ", "+    case 598 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard1();  ", "+\t\t\tbreak;", "+ ", "+    case 599 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard1WithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 600 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds1Extends();  ", "+\t\t\tbreak;", "+ ", "+    case 601 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds1Super();  ", "+\t\t\tbreak;", "+ ", "+    case 602 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard2();  ", "+\t\t\tbreak;", "+ ", "+    case 603 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard2WithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 604 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds2Extends();  ", "+\t\t\tbreak;", "+ ", "+    case 605 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds2Super();  ", "+\t\t\tbreak;", "+ ", "+    case 606 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard3();  ", "+\t\t\tbreak;", "+ ", "+    case 607 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard3WithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 608 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds3Extends();  ", "+\t\t\tbreak;", "+ ", "+    case 609 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds3Super();  ", "+\t\t\tbreak;", "+ ", "+    case 610 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 611 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameters();  ", "+\t\t\tbreak;", "+ ", "+    case 613 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterList();  ", "+\t\t\tbreak;", "+ ", "+    case 615 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterWithExtends();  ", "+\t\t\tbreak;", "+ ", "+    case 616 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterWithExtendsAndBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 618 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBoundList();  ", "+\t\t\tbreak;", "+ ", "+    case 619 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBound();  ", "+\t\t\tbreak;", "+ ", "+    case 621 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterList1();  ", "+\t\t\tbreak;", "+ ", "+    case 622 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1();  ", "+\t\t\tbreak;", "+ ", "+    case 623 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1WithExtends();  ", "+\t\t\tbreak;", "+ ", "+    case 624 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1WithExtendsAndBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 626 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBoundList1();  ", "+\t\t\tbreak;", "+ ", "+    case 627 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBound1();  ", "+\t\t\tbreak;", "+ ", "+    case 633 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 634 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 637 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);  ", "+\t\t\tbreak;", "+ ", "+    case 638 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.NOT);  ", "+\t\t\tbreak;", "+ ", "+    case 641 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "+\t\t\tbreak;", "+ ", "+    case 642 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.MULTIPLY);  ", "+\t\t\tbreak;", "+ ", "+    case 643 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "+\t\t\tbreak;", "+ ", "+    case 644 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.DIVIDE);  ", "+\t\t\tbreak;", "+ ", "+    case 645 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);  ", "+\t\t\tbreak;", "+ ", "+    case 646 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.REMAINDER);  ", "+\t\t\tbreak;", "+ ", "+    case 648 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 649 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 650 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 651 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 653 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 654 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LEFT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 655 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 656 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 657 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 658 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 660 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LESS);  ", "+\t\t\tbreak;", "+ ", "+    case 661 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS);  ", "+\t\t\tbreak;", "+ ", "+    case 662 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER);  ", "+\t\t\tbreak;", "+ ", "+    case 663 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER);  ", "+\t\t\tbreak;", "+ ", "+    case 664 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 665 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 666 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 667 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 669 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "+\t\t    consumeInstanceOfExpressionWithName();  ", "+\t\t\tbreak;", "+ ", "+    case 670 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeInstanceOfExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 672 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 673 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpressionWithName(OperatorIds.EQUAL_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 674 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 675 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpressionWithName(OperatorIds.NOT_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 677 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.AND);  ", "+\t\t\tbreak;", "+ ", "+    case 678 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.AND);  ", "+\t\t\tbreak;", "+ ", "+    case 680 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.XOR);  ", "+\t\t\tbreak;", "+ ", "+    case 681 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.XOR);  ", "+\t\t\tbreak;", "+ ", "+    case 683 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.OR);  ", "+\t\t\tbreak;", "+ ", "+    case 684 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.OR);  ", "+\t\t\tbreak;", "+ ", "+    case 686 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.AND_AND);  ", "+\t\t\tbreak;", "+ ", "+    case 687 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.AND_AND);  ", "+\t\t\tbreak;", "+ ", "+    case 689 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.OR_OR);  ", "+\t\t\tbreak;", "+ ", "+    case 690 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.OR_OR);  ", "+\t\t\tbreak;", "+ ", "+    case 692 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  ", "+\t\t\tbreak;", "+ ", "+    case 693 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "-    case 696 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+    case 697 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-    case 697 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  ", "-\t\t\tbreak;", "- ", "-    case 698 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "+    case 698 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  ", "+\t\t\tbreak;", "+ ", "+    case 700 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "-    case 700 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "+    case 701 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "-    case 701 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 702 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 703 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 704 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 704 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+    case 705 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-    case 706 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "+    case 707 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "-    case 707 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "+    case 708 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "-    case 708 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 709 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 709 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "+    case 710 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "-    case 710 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "+    case 711 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "-    case 711 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 712 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 712 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 713 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 720 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "+    case 721 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "-    case 721 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 722 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 722 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "+    case 723 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "-    case 725 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "+    case 726 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "-    case 726 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "+    case 727 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "-    case 727 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 728 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 728 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 729 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 730 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "+    case 731 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "-\t\t\tbreak;", "- ", "-    case 733 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeMemberValueArrayInitializer() ;  ", "-\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "+\t\t    consumeMemberValueArrayInitializer() ;  ", "-    case 737 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "+    case 737 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "+\t\t\tbreak;", "+ ", "+    case 738 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "-    case 739 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "+    case 740 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "-    case 740 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "+    case 741 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "-    case 741 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "+    case 742 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "-    case 742 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 743 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 743 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "+    case 744 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "-    case 744 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 745 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 745 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 746 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 746 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 747 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$"]}], "num": 57167}
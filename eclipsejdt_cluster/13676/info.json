{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "769eecb54605260dc7bf6d1cd3f2948a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b05edad01e6a2be07ab43bb6df33b470", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "a13ea647a4f4bc5437bbde0cf7788256ede6cc96", "commitAfterChange": "1ab17a7eba14d35875267cc7b416da000a14dc1e", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "  \tpublic void recordInnerClasses(TypeBinding binding)", "signatureAfterChange": "  \tpublic void recordInnerClasses(TypeBinding binding)", "diff": ["-\t\tthis.innerClassesBindings.add(innerClass.erasure().unannotated());  // should not emit yet another inner class for Outer.@Inner Inner.", "+\t\tthis.innerClassesBindings.add(innerClass.erasure().unannotated(false));  // should not emit yet another inner class for Outer.@Inner Inner.", "-\t\t\tthis.innerClassesBindings.add(enclosingType.erasure().unannotated());", "+\t\t\tthis.innerClassesBindings.add(enclosingType.erasure().unannotated(false));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db04ffea6cfaa4777b74e4a0fd4ea41c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "7bcf1741dcb918f3307ee7d52f0450e52fdd3029", "commitAfterChange": "8913fe5c78a14de5e97c4d6b801f5ed8424bf8a8", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "  \tpublic void recordInnerClasses(TypeBinding binding)", "signatureAfterChange": "  \tpublic void recordInnerClasses(TypeBinding binding)", "diff": ["-\t\tthis.innerClassesBindings.add(innerClass.erasure().unannotated(false));  // should not emit yet another inner class for Outer.@Inner Inner.", "+\t\tthis.innerClassesBindings.add(innerClass.erasure().unannotated());  // should not emit yet another inner class for Outer.@Inner Inner.", "-\t\t\tthis.innerClassesBindings.add(enclosingType.erasure().unannotated(false));", "+\t\t\tthis.innerClassesBindings.add(enclosingType.erasure().unannotated());"]}], "num": 13676}
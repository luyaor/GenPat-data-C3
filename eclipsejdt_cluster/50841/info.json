{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c63a75a9bbb797d92b93950cc3efa2b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15074c30ab8c28d309573f3bef6d029f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "16e3cfb0a84cb0cd2c8901e2eb0295b42a63a54e", "commitAfterChange": "ab21422ac410052acb8d938b526b4111358a1452", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " \tpublic boolean visit(NormalAnnotation annotation, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(NormalAnnotation annotation, BlockScope scope)", "diff": ["-\t\t\tfor (int i = 0; i < length - 1; i++) {", "-\t\t\t\tmemberValuePairs[i].traverse(this, scope);", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_annotation);", "-\t\t\t\tif (this.preferences.insert_space_after_comma_in_annotation) {", "-\t\t\t\t\tthis.scribe.space();", "+\t\t\tAlignment annotationAlignment = this.scribe.createAlignment(", "+\t\t\t\t\t\"annotationMemberValuePairs\",//$NON-NLS-1$", "+\t\t\t\t\tthis.preferences.alignment_for_arguments_in_annotation,", "+\t\t\t\t\tlength,", "+\t\t\t\t\tthis.scribe.scanner.currentPosition);", "+\t\t\tthis.scribe.enterAlignment(annotationAlignment);", "+\t\t\tboolean ok = false;", "+\t\t\tdo {", "+\t\t\t\ttry {", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_annotation);", "+\t\t\t\t\t\t\tthis.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.scribe.alignFragment(annotationAlignment, i);", "+\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_annotation) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tmemberValuePairs[i].traverse(this, scope);", "+\t\t\t\t\t}", "+\t\t\t\t\tok = true;", "+\t\t\t\t} catch (AlignmentException e) {", "+\t\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t}", "-\t\t\tmemberValuePairs[length - 1].traverse(this, scope);", "+\t\t\t} while (!ok);", "+\t\t\tthis.scribe.exitAlignment(annotationAlignment, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7385cfa656f9667381eebcedef8140e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 110, "signatureBeforeChange": " \tpublic boolean visit(SwitchStatement switchStatement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(NormalAnnotation annotation, BlockScope scope)", "diff": ["+\tpublic boolean visit(NormalAnnotation annotation, BlockScope scope) {", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameAT);", "+\t\tif (this.preferences.insert_space_after_at_in_annotation) {", "+\t\t\tthis.scribe.space();", "+\t\tthis.scribe.printQualifiedReference(annotation.sourceEnd);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_annotation);", "+\t\tif (this.preferences.insert_space_after_opening_paren_in_annotation) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\tMemberValuePair[] memberValuePairs = annotation.memberValuePairs;", "+\t\tif (memberValuePairs != null) {", "+\t\t\tint length = memberValuePairs.length;", "+\t\t\tfor (int i = 0; i < length - 1; i++) {", "+\t\t\t\tmemberValuePairs[i].traverse(this, scope);", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_annotation);", "+\t\t\t\tif (this.preferences.insert_space_after_comma_in_annotation) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\tmemberValuePairs[length - 1].traverse(this, scope);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_annotation);", "+\t\treturn false;", "+\t}"]}], "num": 50841}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72f52ad7b844e71db782826edf541956", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17c2a26abb3e2004c1f943de4b24a409", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " private IGenericType[] findSuperInterfaces(IGenericType type, ReferenceBinding typeBinding)", "signatureAfterChange": " private IGenericType[] findSuperInterfaces(IGenericType type, ReferenceBinding typeBinding)", "diff": ["-\t\tchar[] simpleName = lastSeparator == -1 ? superInterfaceName : CharOperation.subarray(superInterfaceName, lastSeparator+1, superInterfaceName.length);", "+\t\tint start = lastSeparator + 1; ", "+\t\tint end = superInterfaceName.length;", "-\t\tint start = CharOperation.lastIndexOf('$', simpleName) + 1;", "-\t\tif (start != 0) {", "-\t\t\tint nameLength = simpleName.length - start;", "-\t\t\tSystem.arraycopy(simpleName, start, simpleName = new char[nameLength], 0, nameLength);", "-\t\t}", "+\t\tint lastDollar = CharOperation.lastIndexOf('$', superInterfaceName, start);", "+\t\tif (lastDollar != -1) start = lastDollar + 1;", "+\t\t", "+\t\t// case of a parameterized type -> take the first part", "+\t\tint genericStart = CharOperation.indexOf(Signature.C_GENERIC_START, superInterfaceName, start);", "+\t\tif (genericStart != -1) end = genericStart;", "+\t\t", "+\t\tchar[] simpleName = CharOperation.subarray(superInterfaceName, start, end);", "-\t\t\tReferenceBinding interfaceBinding = interfaceBindings[bindingIndex];", "+\t\t\tReferenceBinding interfaceBinding = (ReferenceBinding) interfaceBindings[bindingIndex].erasure();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2f720d8bc5811d411127bc8b2ae8a45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t \tvoid formatSource(String source, String formattedOutput, int kind, int indentationLevel, boolean repeat)", "signatureAfterChange": " \t \tvoid formatSource(String source, String formattedOutput, int kind, int indentationLevel, boolean repeat)", "diff": ["-\t\t\tIRegion[] regions =  new Region[10];", "-\t\t\tint idx = 0;", "+\t\t\tArrayList<IRegion> regions =  new ArrayList<>();", "-\t\t\t\tregions[idx++] = new Region(regionStart-delta, regionEnd-(regionStart+2));", "+\t\t\t\tregions.add(new Region(regionStart-delta, regionEnd-(regionStart+2)));", "-\t\t\tif (idx == 1) {", "+\t\t\tif (regions.size() == 1) {", "-\t\t\t\tresult = runFormatter(codeFormatter(), newSource, kind, indentationLevel, regions[0].getOffset(), regions[0].getLength(), LINE_SEPARATOR, repeat);", "+\t\t\t\tresult = runFormatter(codeFormatter(), newSource, kind, indentationLevel, regions.get(0).getOffset(), regions.get(0).getLength(), LINE_SEPARATOR, repeat);", "-\t\t\t\tSystem.arraycopy(regions, 0, regions = new Region[idx], 0, idx);", "-\t\t\t\tresult = runFormatter(codeFormatter(), newSource, kind, indentationLevel, regions, LINE_SEPARATOR);", "+\t\t\t\tIRegion[] regionsArray = regions.toArray(new IRegion[regions.size()]);", "+\t\t\t\tresult = runFormatter(codeFormatter(), newSource, kind, indentationLevel, regionsArray, LINE_SEPARATOR);"]}], "num": 50748}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b6a5bee14e7d4bf295c49a6289083d6", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76a04798a15a8c10aa1b52be1f479e23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "7e61b3f01f8b2328acee556fdc4ddf75c1702dd3", "commitAfterChange": "f98c9e376d07d0e65cfd307c772db2eeb92af6b9", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic boolean dependsOnResolutionOf(InferenceVariable alpha, InferenceVariable beta)", "signatureAfterChange": " \tpublic boolean dependsOnResolutionOf(InferenceVariable alpha, InferenceVariable beta)", "diff": ["+\t\tboolean betaIsInCaptureLhs = false;", "-\t\t\t\t\tfor (int j = 0; j < g.arguments.length; j++) {", "-\t\t\t\t\t\tTypeBinding aj = g.arguments[j];", "-\t\t\t\t\t\tif (aj == beta) //$IDENTITY-COMPARISON$ InferenceVariable", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "+\t\t\t\t\t// An inference variable \u03b1 appearing on the left-hand side of a bound of the form G<..., \u03b1, ...> = capture(G<...>)", "+\t\t\t\t\t// depends on the resolution of every other inference variable mentioned in this bound (on both sides of the = sign).", "-\t\t\t\t\treturn false;", "+\t\t\t\t\tif (g.mentionsAny(new TypeBinding[]{beta}, i)) // exclude itself ", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t} else if (g.arguments[i] == beta) { //$IDENTITY-COMPARISON$ InferenceVariable", "+\t\t\t\t\tbetaIsInCaptureLhs = true;", "-", "-\t\tThreeSets sets = (ThreeSets) this.boundsPerVariable.get(alpha);", "-\t\tif (sets != null && sets.hasDependency(beta))", "-\t\t\treturn true;", "-\t\tsets = (ThreeSets) this.boundsPerVariable.get(beta);", "-\t\tif (sets != null && sets.hasDependency(alpha))", "-\t\t\treturn true;", "-", "+\t\tif (betaIsInCaptureLhs) { // swap \u03b1 and \u03b2 in the rule text to cover \"then \u03b2 depends on the resolution of \u03b1\"", "+\t\t\tThreeSets sets = (ThreeSets) this.boundsPerVariable.get(beta);", "+\t\t\tif (sets != null && sets.hasDependency(alpha))", "+\t\t\t\treturn true;", "+\t\t} else {", "+\t\t\tThreeSets sets = (ThreeSets) this.boundsPerVariable.get(alpha);", "+\t\t\tif (sets != null && sets.hasDependency(beta))", "+\t\t\t\treturn true;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dec96164a8090d089fe29c283229253a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5266b947a41bc87e33ca243d2f06d621c5b35d8c", "commitAfterChange": "5b0c62f0c85cc7c393266b52408d3bd3c14d0ef5", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic IClasspathEntry getClasspathEntryFor(IPath path) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry getClasspathEntryFor(IPath path) throws JavaModelException", "diff": ["-\tpublic IClasspathEntry getClasspathEntryFor(IPath path)", "-\t\tthrows JavaModelException {", "-", "-\t\tIClasspathEntry[] entries = getExpandedClasspath();", "-\t\tfor (int i = 0; i < entries.length; i++) {", "-\t\t\tif (entries[i].getPath().equals(path)) {", "-\t\t\t\treturn entries[i];", "-\t\t\t}", "-\t\t}", "-\t\treturn null;", "+\tpublic IClasspathEntry getClasspathEntryFor(IPath path) throws JavaModelException {", "+\t\tgetResolvedClasspath(); // force resolution", "+\t\tPerProjectInfo perProjectInfo = getPerProjectInfo();", "+\t\tif (perProjectInfo == null)", "+\t\t\treturn null;", "+\t\tMap rootPathToResolvedEntries = perProjectInfo.rootPathToResolvedEntries;", "+\t\tif (rootPathToResolvedEntries == null)", "+\t\t\treturn null;", "+\t\treturn (IClasspathEntry) rootPathToResolvedEntries.get(path);"]}], "num": 29102}
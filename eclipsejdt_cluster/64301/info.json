{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "febb1349b1bff092c8c15d84b7d2785e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c115973ce843e2e42c275815fdedfb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "ef3c2078d9cee48378a186a3e9a6e61cb6a67acc", "commitAfterChange": "18c98a5a751096350077436fcf968eb63364ccb9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-", "-\t\t} else if (((ReferenceBinding) receiverType).isFinal()) {", "-\t\t\tif (this.anonymousType != null) {", "-\t\t\t\tif (!receiverType.isEnum()) {", "-\t\t\t\t\tscope.problemReporter().anonymousClassCannotExtendFinalClass(this.type, receiverType);", "-\t\t\t\t\thasError = true;", "-\t\t\t\t}", "-\t\t\t} else if (!receiverType.canBeInstantiated()) {", "-\t\t\t\tscope.problemReporter().cannotInstantiate(this.type, receiverType);", "-\t\t\t\treturn this.resolvedType = receiverType;", "-\t\t\t}", "+\t\t\t\tReferenceBinding referenceReceiver = (ReferenceBinding) receiverType;", "-\t\t\t\tthis.binding = scope.findMethod((ReferenceBinding) receiverType, TypeConstants.INIT, pseudoArgs, this);", "+\t\t\t\tthis.binding = scope.findMethod(referenceReceiver, TypeConstants.INIT, pseudoArgs, this);", "-\t\t\t\t", "+\t\t\t\tif (this.anonymousType != null) {", "+\t\t\t\t\t// insert anonymous type in scope (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=210070)", "+\t\t\t\t\tscope.addAnonymousType(this.anonymousType, referenceReceiver);", "+\t\t\t\t\tthis.anonymousType.resolve(scope);", "+\t\t\t\t\treturn this.resolvedType = this.anonymousType.binding;", "+\t\t\t\t}", "-", "-\t\tif (receiverType.isTypeVariable()) {", "-\t\t\treceiverType = new ProblemReferenceBinding(receiverType.sourceName(), (ReferenceBinding)receiverType, ProblemReasons.IllegalSuperTypeVariable);", "-\t\t\tscope.problemReporter().invalidType(this, receiverType);", "+\t\tReferenceBinding superType = (ReferenceBinding) receiverType;", "+\t\tif (superType.isTypeVariable()) {", "+\t\t\tsuperType = new ProblemReferenceBinding(superType.sourceName(), superType, ProblemReasons.IllegalSuperTypeVariable);", "+\t\t\tscope.problemReporter().invalidType(this, superType);", "-\t\t} else if (this.type != null && receiverType.isEnum()) { // tolerate enum constant body", "-\t\t\tscope.problemReporter().cannotInstantiate(this.type, receiverType);", "-\t\t\treturn this.resolvedType = receiverType;", "+\t\t} else if (this.type != null && superType.isEnum()) { // tolerate enum constant body", "+\t\t\tscope.problemReporter().cannotInstantiate(this.type, superType);", "+\t\t\treturn this.resolvedType = superType;", "-\t\tthis.superTypeBinding = receiverType.isInterface() ? scope.getJavaLangObject() : (ReferenceBinding) receiverType;", "+\t\tReferenceBinding anonymousSuperclass = superType.isInterface() ? scope.getJavaLangObject() : superType;", "-\t\tscope.addAnonymousType(this.anonymousType, (ReferenceBinding) receiverType);", "-\t\tthis.anonymousType.resolve(scope);\t\t", "-\t\tif (this.superTypeBinding.erasure().id == TypeIds.T_JavaLangEnum) {", "-\t\t\tscope.problemReporter().cannotExtendEnum(this.anonymousType.binding, this.type, this.superTypeBinding);", "-\t\t}", "-\t\t", "-\t\tif ((receiverType.tagBits & TagBits.HasDirectWildcard) != 0) {", "-\t\t\tscope.problemReporter().superTypeCannotUseWildcard(this.anonymousType.binding, this.type, receiverType);", "-\t\t}\t\t", "+\t\tscope.addAnonymousType(this.anonymousType, superType);", "+\t\tthis.anonymousType.resolve(scope);\t", "+\t\t\t", "-\t\tMethodBinding inheritedBinding = scope.getConstructor(this.superTypeBinding, argumentTypes, this);", "+\t\tthis.resolvedType = this.anonymousType.binding; // 1.2 change", "+\t\tif ((this.resolvedType.tagBits & TagBits.HierarchyHasProblems) != 0) {", "+\t\t\treturn null; // stop secondary errors", "+\t\t}", "+\t\tMethodBinding inheritedBinding = scope.getConstructor(anonymousSuperclass, argumentTypes, this);", "-\t\t\t\tinheritedBinding.declaringClass = this.superTypeBinding;", "+\t\t\t\tinheritedBinding.declaringClass = anonymousSuperclass;", "-\t\t\treturn this.resolvedType = this.anonymousType.binding;", "+\t\t\treturn this.resolvedType;", "-\t\t\t\tscope.problemReporter().unnecessaryEnclosingInstanceSpecification(this.enclosingInstance, (ReferenceBinding)receiverType);", "-\t\t\t\treturn this.resolvedType = this.anonymousType.binding;", "+\t\t\t\tscope.problemReporter().unnecessaryEnclosingInstanceSpecification(this.enclosingInstance, superType);", "+\t\t\t\treturn this.resolvedType;", "-\t\t\t\treturn this.resolvedType = this.anonymousType.binding;", "+\t\t\t\treturn this.resolvedType;", "-\t\tif (this.arguments != null)", "-\t\t\tcheckInvocationArguments(scope, null, this.superTypeBinding, inheritedBinding, this.arguments, argumentTypes, argsContainCast, this);", "-", "+\t\tif (this.arguments != null) {", "+\t\t\tcheckInvocationArguments(scope, null, anonymousSuperclass, inheritedBinding, this.arguments, argumentTypes, argsContainCast, this);", "+\t\t}", "-\t\treturn this.resolvedType = this.anonymousType.binding; // 1.2 change", "+\t\treturn this.resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3b60cb827a86a150c87caed13c1574f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "133e081382658fdf4b2c93257a825d3355922192", "commitAfterChange": "4e700a9e3cdab5cede60d95c3f4cde7257971ca3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tconstant = Constant.NotAConstant;", "+\t\tthis.constant = Constant.NotAConstant;", "-\t\tif (enclosingInstance != null) {", "-\t\t\tif (enclosingInstance instanceof CastExpression) {", "-\t\t\t\tenclosingInstance.bits |= DisableUnnecessaryCastCheck; // will check later on", "+\t\tif (this.enclosingInstance != null) {", "+\t\t\tif (this.enclosingInstance instanceof CastExpression) {", "+\t\t\t\tthis.enclosingInstance.bits |= ASTNode.DisableUnnecessaryCastCheck; // will check later on", "-\t\t\tif ((enclosingInstanceType = enclosingInstance.resolveType(scope)) == null){", "+\t\t\tif ((enclosingInstanceType = this.enclosingInstance.resolveType(scope)) == null){", "-\t\t\t\t\tenclosingInstance);", "+\t\t\t\t\tthis.enclosingInstance);", "-\t\t\t} else if (type instanceof QualifiedTypeReference) {", "-\t\t\t\tscope.problemReporter().illegalUsageOfQualifiedTypeReference((QualifiedTypeReference)type);", "+\t\t\t} else if (this.type instanceof QualifiedTypeReference) {", "+\t\t\t\tscope.problemReporter().illegalUsageOfQualifiedTypeReference((QualifiedTypeReference)this.type);", "-\t\t\t\treceiverType = ((SingleTypeReference) type).resolveTypeEnclosing(scope, (ReferenceBinding) enclosingInstanceType);", "+\t\t\t\treceiverType = ((SingleTypeReference) this.type).resolveTypeEnclosing(scope, (ReferenceBinding) enclosingInstanceType);", "-\t\t\t\t\tCastExpression.checkNeedForEnclosingInstanceCast(scope, enclosingInstance, enclosingInstanceType, receiverType);", "+\t\t\t\t\tCastExpression.checkNeedForEnclosingInstanceCast(scope, this.enclosingInstance, enclosingInstanceType, receiverType);", "-\t\t\t\t\tscope.problemReporter().anonymousClassCannotExtendFinalClass(type, receiverType);", "+\t\t\t\t\tscope.problemReporter().anonymousClassCannotExtendFinalClass(this.type, receiverType);", "-\t\t\t\tscope.problemReporter().cannotInstantiate(type, receiverType);", "+\t\t\t\tscope.problemReporter().cannotInstantiate(this.type, receiverType);", "-\t\tif (arguments != null) {", "-\t\t\tint length = arguments.length;", "+\t\tif (this.arguments != null) {", "+\t\t\tint length = this.arguments.length;", "-\t\t\t\t\targument.bits |= DisableUnnecessaryCastCheck; // will check later on", "+\t\t\t\t\targument.bits |= ASTNode.DisableUnnecessaryCastCheck; // will check later on", "-\t\t\t\tscope.problemReporter().cannotInstantiate(type, receiverType);", "+\t\t\t\tscope.problemReporter().cannotInstantiate(this.type, receiverType);", "-\t\t\t\tif (isMethodUseDeprecated(binding, scope, true)) {", "+\t\t\t\tif (isMethodUseDeprecated(this.binding, scope, true)) {", "-\t\t\t\tcheckInvocationArguments(scope, null, allocationType, binding, this.arguments, argumentTypes, argsContainCast, this);", "+\t\t\t\tcheckInvocationArguments(scope, null, allocationType, this.binding, this.arguments, argumentTypes, argsContainCast, this);", "-\t\t\t\tenclosingInstance.computeConversion(scope, expectedType, enclosingInstanceType);", "+\t\t\t\tthis.enclosingInstance.computeConversion(scope, expectedType, enclosingInstanceType);", "-\t\t} else if (type != null && receiverType.isEnum()) { // tolerate enum constant body", "-\t\t\tscope.problemReporter().cannotInstantiate(type, receiverType);", "+\t\t} else if (this.type != null && receiverType.isEnum()) { // tolerate enum constant body", "+\t\t\tscope.problemReporter().cannotInstantiate(this.type, receiverType);", "-\t\tif (this.superTypeBinding.erasure().id == T_JavaLangEnum) {", "+\t\tif (this.superTypeBinding.erasure().id == TypeIds.T_JavaLangEnum) {", "-\t\t\tscope.problemReporter().superTypeCannotUseWildcard(anonymousType.binding, this.type, receiverType);", "+\t\t\tscope.problemReporter().superTypeCannotUseWildcard(this.anonymousType.binding, this.type, receiverType);", "-\t\t\treturn this.resolvedType = anonymousType.binding;", "+\t\t\treturn this.resolvedType = this.anonymousType.binding;", "-\t\tif (enclosingInstance != null) {", "+\t\tif (this.enclosingInstance != null) {", "-\t\t\t\tscope.problemReporter().unnecessaryEnclosingInstanceSpecification(enclosingInstance, (ReferenceBinding)receiverType);", "-\t\t\t\treturn this.resolvedType = anonymousType.binding;", "+\t\t\t\tscope.problemReporter().unnecessaryEnclosingInstanceSpecification(this.enclosingInstance, (ReferenceBinding)receiverType);", "+\t\t\t\treturn this.resolvedType = this.anonymousType.binding;", "-\t\t\t\tscope.problemReporter().typeMismatchError(enclosingInstanceType, targetEnclosing, enclosingInstance);", "-\t\t\t\treturn this.resolvedType = anonymousType.binding;", "+\t\t\t\tscope.problemReporter().typeMismatchError(enclosingInstanceType, targetEnclosing, this.enclosingInstance);", "+\t\t\t\treturn this.resolvedType = this.anonymousType.binding;", "-\t\t\tenclosingInstance.computeConversion(scope, targetEnclosing, enclosingInstanceType);", "+\t\t\tthis.enclosingInstance.computeConversion(scope, targetEnclosing, enclosingInstanceType);", "-\t\tbinding = anonymousType.createDefaultConstructorWithBinding(inheritedBinding);", "-\t\treturn this.resolvedType = anonymousType.binding; // 1.2 change", "+\t\tthis.binding = this.anonymousType.createDefaultConstructorWithBinding(inheritedBinding);", "+\t\treturn this.resolvedType = this.anonymousType.binding; // 1.2 change"]}], "num": 64301}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a89818c89df37bfa2dcc807e5c0f1680", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d5ffffcd0cd6e4b76f5559519b691ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "2314c16241660b35014c2f51be7d9e9dcaef9a58", "commitAfterChange": "ceea24195947a1526b56f97d57fd4f7128a7bbd1", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void test002() throws CoreException", "signatureAfterChange": " \tpublic void test002() throws CoreException", "diff": ["-\t\tICompilationUnit[] workingCopies = null;", "-\t\ttry {", "-\t\t\tMarkerInfo[] markerInfos = createMarkerInfos(new String[] {", "-\t\t\t\t\"/P/p1/X.java\",", "-\t\t\t\t\"package p1;\\n\" +", "-\t\t\t\t\"public class X extends /*start*/Y/*end*/ {\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\t\"/P/p1/Y.java\",", "-\t\t\t\t\"package p1;\\n\" +", "-\t\t\t\t\"/*start*/public class Y {\\n\" +", "-\t\t\t\t\"}/*end*/\",", "-\t\t\t});", "-\t\t\tworkingCopies = createWorkingCopies(markerInfos, this.owner);", "-\t\t\tTestASTRequestor requestor = new TestASTRequestor();", "-\t\t\tresolveASTs(workingCopies, requestor);", "-\t\t\t", "-\t\t\tassertASTNodesEqual(", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"public class X extends Y {\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"public class Y {\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\",", "-\t\t\t\trequestor.asts", "-\t\t\t);", "-\t\t\t", "-\t\t\t// compare the bindings coming from the 2 ASTs", "-\t\t\tType superX = (Type) findNode((CompilationUnit) requestor.asts.get(0), markerInfos[0]);", "-\t\t\tTypeDeclaration typeY = (TypeDeclaration) findNode((CompilationUnit) requestor.asts.get(1), markerInfos[1]);", "-\t\t\tIBinding superXBinding = superX.resolveBinding();", "-\t\t\tIBinding typeYBinding = typeY.resolveBinding();", "-\t\t\tassertTrue(\"Super of X and Y should be the same\", superXBinding == typeYBinding);", "-\t\t} finally {", "-\t\t\tdiscardWorkingCopies(workingCopies);", "-\t\t}", "+\t\tMarkerInfo[] markerInfos = createMarkerInfos(new String[] {", "+\t\t\t\"/P/p1/X.java\",", "+\t\t\t\"package p1;\\n\" +", "+\t\t\t\"public class X extends /*start*/Y/*end*/ {\\n\" +", "+\t\t\t\"}\",", "+\t\t\t\"/P/p1/Y.java\",", "+\t\t\t\"package p1;\\n\" +", "+\t\t\t\"/*start*/public class Y {\\n\" +", "+\t\t\t\"}/*end*/\",", "+\t\t});", "+\t\tthis.workingCopies = createWorkingCopies(markerInfos, this.owner);", "+\t\tTestASTRequestor requestor = new TestASTRequestor();", "+\t\tresolveASTs(this.workingCopies, requestor);", "+\t\t", "+\t\tassertASTNodesEqual(", "+\t\t\t\"package p1;\\n\" + ", "+\t\t\t\"public class X extends Y {\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"package p1;\\n\" + ", "+\t\t\t\"public class Y {\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\",", "+\t\t\trequestor.asts", "+\t\t);", "+\t\t", "+\t\t// compare the bindings coming from the 2 ASTs", "+\t\tType superX = (Type) findNode((CompilationUnit) requestor.asts.get(0), markerInfos[0]);", "+\t\tTypeDeclaration typeY = (TypeDeclaration) findNode((CompilationUnit) requestor.asts.get(1), markerInfos[1]);", "+\t\tIBinding superXBinding = superX.resolveBinding();", "+\t\tIBinding typeYBinding = typeY.resolveBinding();", "+\t\tassertTrue(\"Super of X and Y should be the same\", superXBinding == typeYBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76e8a8819c6b8ae07f20621c0702f6d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompilationUnitTests.java", "commitBeforeChange": "eebfb231fd7e6ee98747d5335cf2b140503ced34", "commitAfterChange": "a3c940c9ba4fb947ed601c181e38c98afc79ec41", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void testDeprecatedFlag10() throws CoreException", "signatureAfterChange": " public void testDeprecatedFlag10() throws CoreException", "diff": ["-\tcreateFolder(\"/P/src/p2\");", "-", "-\tcreateFile(", "-\t\t\t\"/P/src/p2/package-info.java\",", "-\t\t\t\"@java.lang.Deprecated package p2;\\n\"", "-\t\t);", "+\ttry {", "+\t\tcreateFolder(\"/P/src/p2\");", "-\t// workaround for missing type in jclMin:", "-\tcreateFolder(\"/P/src/java/lang\");", "-\tcreateFile(", "-\t\t\t\"/P/src/java/lang/Deprecated.java\",", "-\t\t\t\"package java.lang;\\n\" +", "-\t\t\t\"@Retention(RetentionPolicy.RUNTIME)\\n\" + ", "-\t\t\t\"public @interface Deprecated {\\n\" + ", "-\t\t\t\"}\\n\"", "-\t\t);", "-", "-\tcreateFile(\"/P/src/p2/C.java\", ", "-\t\t\t\"package p2;\\n\" +", "-\t\t\t\"public class C {}\\n\");", "-", "-\tcreateFile(\"/P/src/p/D.java\", ", "-\t\t\t\"package p;\\n\" +", "-\t\t\t\"public class D extends p2.C {}\\n\");", "-\tICompilationUnit cuD = getCompilationUnit(\"/P/src/p/D.java\");", "+\t\tcreateFile(", "+\t\t\t\t\"/P/src/p2/package-info.java\",", "+\t\t\t\t\"@java.lang.Deprecated package p2;\\n\"", "+\t\t\t);", "+\t\t", "+\t\t// workaround for missing type in jclMin:", "+\t\tcreateFolder(\"/P/src/java/lang\");", "+\t\tcreateFile(", "+\t\t\t\t\"/P/src/java/lang/Deprecated.java\",", "+\t\t\t\t\"package java.lang;\\n\" +", "+\t\t\t\t\"@Retention(RetentionPolicy.RUNTIME)\\n\" + ", "+\t\t\t\t\"public @interface Deprecated {\\n\" + ", "+\t\t\t\t\"}\\n\"", "+\t\t\t);", "-\tASTParser parser = ASTParser.newParser(AST.JLS3);", "-\tparser.setProject(this.testProject);", "-\tparser.setSource(cuD);", "-\tparser.setResolveBindings(true);", "-\torg.eclipse.jdt.core.dom.CompilationUnit cuAST = (org.eclipse.jdt.core.dom.CompilationUnit) parser.createAST(null);", "-\tIProblem[] problems = cuAST.getProblems();", "-\tassertEquals(\"Should have 1 problem\", 1, problems.length);", "-\tassertEquals(\"Should have a deprecation warning\", \"The type C is deprecated\", problems[0].getMessage());", "+\t\tcreateFile(\"/P/src/p2/C.java\", ", "+\t\t\t\t\"package p2;\\n\" +", "+\t\t\t\t\"public class C {}\\n\");", "+\t", "+\t\tcreateFile(\"/P/src/p/D.java\", ", "+\t\t\t\t\"package p;\\n\" +", "+\t\t\t\t\"public class D extends p2.C {}\\n\");", "+\t\tICompilationUnit cuD = getCompilationUnit(\"/P/src/p/D.java\");", "+\t\t", "+\t\tASTParser parser = ASTParser.newParser(AST.JLS3);", "+\t\tparser.setProject(this.testProject);", "+\t\tparser.setSource(cuD);", "+\t\tparser.setResolveBindings(true);", "+\t\torg.eclipse.jdt.core.dom.CompilationUnit cuAST = (org.eclipse.jdt.core.dom.CompilationUnit) parser.createAST(null);", "+\t\tIProblem[] problems = cuAST.getProblems();", "+\t\tassertEquals(\"Should have 1 problem\", 1, problems.length);", "+\t\tassertEquals(\"Should have a deprecation warning\", \"The type C is deprecated\", problems[0].getMessage());", "+\t} finally {", "+\t\tdeleteFile(\"/P/src/p/D.java\");", "+\t\tdeleteFolder(\"/P/src/p2\");", "+\t\tdeleteFolder(\"/P/src/java/lang\");", "+\t}", "+}"]}], "num": 22668}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f6aaa171f0f5dbef94c48747c0757fb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eb9786fc2761028641b5cf28d006627", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "e6021d67f030c85737aa105da719e9a09cfc30ed", "commitAfterChange": "47da1e1f50b1360a7b560d74dfe1c60303fec552", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": " DiskIndex mergeWith(MemoryIndex memoryIndex) throws IOException", "signatureAfterChange": " DiskIndex mergeWith(MemoryIndex memoryIndex) throws IOException", "diff": ["+\tif (this.indexLocation == null) {", "+\t\tthrow new IOException(\"Pre-built index file not writeable\");  //$NON-NLS-1$", "+\t}", "-\t\tDiskIndex newDiskIndex = new DiskIndex(this.indexFile.getPath());", "+\t\tDiskIndex newDiskIndex = new DiskIndex(this.indexLocation);", "-", "-\tDiskIndex newDiskIndex = new DiskIndex(this.indexFile.getPath() + \".tmp\"); //$NON-NLS-1$", "+\tFile oldIndexFile = this.indexLocation.getIndexFile();", "+\tDiskIndex newDiskIndex = new DiskIndex(new FileIndexLocation(new File(oldIndexFile.getPath() + \".tmp\"))); //$NON-NLS-1$", "+\tFile newIndexFile = newDiskIndex.indexLocation.getIndexFile();", "-\t\tnewDiskIndex.initializeFrom(this, newDiskIndex.indexFile);", "-\t\tFileOutputStream stream = new FileOutputStream(newDiskIndex.indexFile, false);", "+\t\tnewDiskIndex.initializeFrom(this, newIndexFile);", "+\t\tFileOutputStream stream = new FileOutputStream(newIndexFile, false);", "-\t\tif (this.indexFile.exists() && !this.indexFile.delete()) {", "+\t\tif (oldIndexFile.exists() && !oldIndexFile.delete()) {", "-\t\t\t\tSystem.out.println(\"mergeWith - Failed to delete \" + this.indexFile); //$NON-NLS-1$", "-\t\t\tthrow new IOException(\"Failed to delete index file \" + this.indexFile); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"mergeWith - Failed to delete \" + this.indexLocation); //$NON-NLS-1$", "+\t\t\tthrow new IOException(\"Failed to delete index file \" + this.indexLocation); //$NON-NLS-1$", "-\t\tif (!newDiskIndex.indexFile.renameTo(this.indexFile)) {", "+\t\tif (!newIndexFile.renameTo(oldIndexFile)) {", "-\t\t\t\tSystem.out.println(\"mergeWith - Failed to rename \" + this.indexFile); //$NON-NLS-1$", "-\t\t\tthrow new IOException(\"Failed to rename index file \" + this.indexFile); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"mergeWith - Failed to rename \" + this.indexLocation); //$NON-NLS-1$", "+\t\t\tthrow new IOException(\"Failed to rename index file \" + this.indexLocation); //$NON-NLS-1$", "-\t\tif (newDiskIndex.indexFile.exists() && !newDiskIndex.indexFile.delete())", "+\t\tif (newIndexFile.exists() && !newIndexFile.delete())", "-\t\t\t\tSystem.out.println(\"mergeWith - Failed to delete temp index \" + newDiskIndex.indexFile); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"mergeWith - Failed to delete temp index \" + newDiskIndex.indexLocation); //$NON-NLS-1$", "-\tnewDiskIndex.indexFile = this.indexFile;", "+\tnewDiskIndex.indexLocation = this.indexLocation;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4565b63e6d3e5e1dc31f034dc75c202", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "67be753fec1b8f88653e28d3d4d4837dd29cdece", "commitAfterChange": "c76b87d837ed14384819cb84439501329f23edce", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tIBinding resolveName(Name name)", "signatureAfterChange": "\r \tIBinding resolveName(Name name)", "diff": ["-\t\t// retrieve the old ast node\r", "-\t\tif (name.getParent() instanceof PackageDeclaration) {\r", "-\t\t\treturn resolveNameForPackageDeclaration(name);\r", "+\t\tASTNode parent = name.getParent();\r", "+\t\tif (parent instanceof MethodInvocation\r", "+\t\t\t|| parent instanceof SuperMethodInvocation) {\r", "+\t\t\treturn internalResolveNameForMethodInvocation(name);\r", "-\t\tif (name.getParent() instanceof ImportDeclaration) {\r", "-\t\t\treturn null;\r", "+\t\tif (parent instanceof FieldAccess\r", "+\t\t   || parent instanceof SuperFieldAccess) {\r", "+\t\t\treturn internalResolveNameForFieldAccess(name);\r", "-\t\tAstNode node = (AstNode) this.newAstToOldAst.get(name);\r", "-\t\tif (node instanceof NameReference || node == null) {\r", "-\t\t\treturn resolveNameForNameReference(name, node);\r", "+\t\tif (parent instanceof PackageDeclaration) {\r", "+\t\t\treturn internalResolveNameForPackageDeclaration(name);\r", "-\t\tif (node instanceof MessageSend) {\r", "-\t\t\treturn resolveNameForMessageSend(name, node);\r", "+\t\tif (parent instanceof SimpleType) {\r", "+\t\t\treturn internalResolveNameForSimpleType(name);\r", "+\t\t}\r", "+\t\tif (parent instanceof ThisExpression) {\r", "+\t\t\treturn internalResolveNameForThisExpression(name);\r", "+\t\t}\r", "+\t\tif (name instanceof QualifiedName) {\r", "+\t\t\treturn internalResolveNameForQualifiedName(name);\r", "+\t\t}\r", "+\t\tif (name instanceof SimpleName) {\r", "+\t\t\treturn internalResolveNameForSimpleName(name);\r"]}], "num": 47213}
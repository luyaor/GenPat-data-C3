{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c2c192b2800341b0c29bf0b1992c921", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24ed7e63a9d481898892c9b5e2aa4670", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "c67ad5667d81e7ca8719e3b0faf6c7f2b84f03ce", "commitAfterChange": "55a2e1357c3327be6468ccea0fa1bd5884ed35ad", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void checkBounds(ReferenceBinding type, Scope scope, int index)", "signatureAfterChange": " \tpublic void checkBounds(ReferenceBinding type, Scope scope, int index)", "diff": ["-\t\t\t\tfor (int i = 0, argLength = typeVariables.length; i < argLength; i++)", "-\t\t\t\t    if (typeVariables[i].boundCheck(parameterizedType, argTypes[i])  != TypeConstants.OK)", "-\t\t\t\t\t\tscope.problemReporter().typeMismatchError(argTypes[i], typeVariables[i], currentType, this.typeArguments[index][i]);", "+\t\t\t\tparameterizedType.boundCheck(scope, this.typeArguments[index]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fa0e7c55b9e5c1b325a1b0ebec84e27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "c67ad5667d81e7ca8719e3b0faf6c7f2b84f03ce", "commitAfterChange": "55a2e1357c3327be6468ccea0fa1bd5884ed35ad", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "diff": ["-// TODO (philippe)\tif ((this.bits & ASTNode.IsSuperType) != 0)", "-\t\t\t\tfor (int i = 0; i < argLength; i++)", "-\t\t\t\t    if (typeVariables[i].boundCheck(parameterizedType, argTypes[i]) != TypeConstants.OK)", "-\t\t\t\t\t\tscope.problemReporter().typeMismatchError(argTypes[i], typeVariables[i], currentType, this.typeArguments[i]);", "+\t\t\t\tparameterizedType.boundCheck(scope, this.typeArguments);"]}], "num": 55783}
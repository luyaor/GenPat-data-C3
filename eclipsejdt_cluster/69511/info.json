{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5e88e39602d41213ee6f64f72c61838", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41adcd106b0fde7ca8ff116b2be9dccb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\t  \tpublic boolean search(Index index, IProgressMonitor progressMonitor)", "signatureAfterChange": "\t public boolean search(Index index, IProgressMonitor progressMonitor)", "diff": ["-", "-\tpublic boolean search(Index index, IProgressMonitor progressMonitor) {", "-", "-\t\tif (progressMonitor != null && progressMonitor.isCanceled())", "-\t\t\tthrow new OperationCanceledException();", "-", "-//\t\t\tSystem.out.println(\"SANITY CHECK: search job using obsolete index: [\"+index+ \"] instead of: [\"+inMemIndex+\"]\");", "-\t\tif (index == null)", "-\t\t\treturn COMPLETE;", "-\t\tIndexManager indexManager = JavaModelManager.getJavaModelManager().getIndexManager();", "-\t\tReadWriteMonitor monitor = indexManager.getMonitorFor(index);", "-\t\tif (monitor == null)", "-\t\t\treturn COMPLETE; // index got deleted since acquired", "-\t\ttry {", "-\t\t\tmonitor.enterRead(); // ask permission to read", "-", "-\t\t\t/* if index has changed, commit these before querying */", "-\t\t\tif (index.hasChanged()) {", "-\t\t\t\ttry {", "-\t\t\t\t\tmonitor.exitRead(); // free read lock", "-\t\t\t\t\tmonitor.enterWrite(); // ask permission to write", "-\t\t\t\t\tindexManager.saveIndex(index);", "-\t\t\t\t} catch (IOException e) {", "-\t\t\t\t\treturn FAILED;", "-\t\t\t\t} finally {", "-\t\t\t\t\tmonitor.exitWriteEnterRead(); // finished writing and reacquire read permission", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tlong start = System.currentTimeMillis();", "-\t\t\tpattern.findIndexMatches(", "-\t\t\t\tindex,", "-\t\t\t\trequestor,", "-\t\t\t\tthis.participant,", "-\t\t\t\tthis.scope,", "-\t\t\t\tprogressMonitor);", "-\t\t\texecutionTime += System.currentTimeMillis() - start;", "-\t\t\treturn COMPLETE;", "-\t\t} catch (IOException e) {", "-\t\t\treturn FAILED;", "-\t\t} finally {", "-\t\t\tmonitor.exitRead(); // finished reading", "-\t\t}", "+}\t", "+public boolean search(Index index, IProgressMonitor progressMonitor) {", "+\tif (index == null) return COMPLETE;", "+\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "+", "+\tReadWriteMonitor monitor = index.monitor;", "+\tif (monitor == null) return COMPLETE; // index got deleted since acquired", "+\ttry {", "+\t\tmonitor.enterRead(); // ask permission to read", "+\t\tlong start = System.currentTimeMillis();", "+\t\tpattern.findIndexMatches(index, requestor, this.participant, this.scope, progressMonitor);", "+\t\texecutionTime += System.currentTimeMillis() - start;", "+\t\treturn COMPLETE;", "+\t} catch (IOException e) {", "+\t\tif (e instanceof java.io.EOFException)", "+\t\t\te.printStackTrace();", "+\t\treturn FAILED;", "+\t} finally {", "+\t\tmonitor.exitRead(); // finished reading"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdd9a984a4d82fa61acabd5d2ee0c77c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Problem.java", "commitBeforeChange": "bbf4c65896774d7094a1b0af184fa5e65fff430e", "commitAfterChange": "88a272a79e1a01de59a7879ee7d861a289fe8315", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t \tpublic int compareTo(Object o)", "signatureAfterChange": " \t \tpublic int compareTo(Object o)", "diff": ["-\t\tProblem problem = (Problem) o;", "-\t\tif (!(this.getLocation().equals(problem.getLocation()))) {", "-\t\t\treturn this.getLocation().compareTo(problem.getLocation());", "+\t\tif(o instanceof Problem){", "+\t\t\tProblem problem = (Problem) o;", "+\t\t\t/* Replace initial implementation with toString() comparison otherwise the problems order may change", "+\t\t\t * when different VM are used (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=213570)...", "+\t\t\tif (!(this.getLocation().equals(problem.getLocation()))) {", "+\t\t\t\treturn this.getLocation().compareTo(problem.getLocation());", "+\t\t\t}", "+\t\t\tif (this.getStart() < problem.getStart()) {", "+\t\t\t\treturn -1;", "+\t\t\t}", "+\t\t\tif (this.getEnd() < problem.getEnd()) {", "+\t\t\t\treturn -1;", "+\t\t\t}", "+\t\t\treturn this.getMessage().compareTo(problem.getMessage());", "+\t\t\t*/", "+\t\t\treturn this.toString().compareTo(problem.toString());", "-\t\tif (this.getStart() < problem.getStart()) {", "-\t\t\treturn -1;", "-\t\t}", "-\t\tif (this.getEnd() < problem.getEnd()) {", "-\t\t\treturn -1;", "-\t\t}", "-\t\treturn this.getMessage().compareTo(problem.getMessage());", "+\t\treturn -1;"]}], "num": 69511}
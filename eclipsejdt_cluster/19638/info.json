{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd72b3f42e9c29bf3284ecee727f595a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b61cdeec7487094f3bbddc7599760e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": "  public void markAsComparedEqualToNonNull(LocalVariableBinding local)", "signatureAfterChange": "  public void markAsComparedEqualToNull(LocalVariableBinding local)", "diff": ["-\t\t\tif (((mask = 1L << position) & // leave assigned non null unchanged ", "-\t\t\t\t\tthis.nullAssignmentStatusBit1 &", "-\t\t\t\t\t~this.nullAssignmentStatusBit2 &", "-\t\t\t\t\t~this.nullAssignmentValueBit1 &", "-\t\t\t\t\tthis.nullAssignmentValueBit2) == 0) {", "-\t\t\t\t// set protected non null", "-\t\t\t\tthis.nullAssignmentStatusBit1 |= mask;", "-\t\t\t\tthis.nullAssignmentStatusBit2 |= mask;", "-\t\t\t\t // clear potential null", "-\t\t\t\tthis.nullAssignmentValueBit1 &= ~mask;", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 19) {", "-\t\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "-\t\t\t\t}", "-\t\t\tif (coverageTestFlag && coverageTestId == 20) {", "-\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 21) {", "-\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 21\"); //$NON-NLS-1$", "-\t\t\t\t\tif (coverageTestFlag && coverageTestId == 22) {", "-\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 22\"); //$NON-NLS-1$", "-\t\t\tif (((mask = 1L << (position % BitCacheSize)) & ", "-\t\t\t\t\tthis.extra[2][vectorIndex] &", "-\t\t\t\t\t~this.extra[3][vectorIndex] &", "-\t\t\t\t\t~this.extra[4][vectorIndex] &", "-\t\t\t\t\tthis.extra[5][vectorIndex]) == 0) {", "-\t\t\t\tthis.extra[2][vectorIndex] |= mask;", "-\t\t\t\tthis.extra[3][vectorIndex] |= mask;", "-\t\t\t\tthis.extra[4][vectorIndex] &= ~mask;", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 23) {", "-\t\t\t\t\tthis.extra[5][vectorIndex] = ~0;", "-\t\t\t\t}", "+\t\tlong mask;", "+\t\t\tif (((mask = 1L << position) & this.nullBit1) != 0) {", "+  \t\t\t  \tif ((mask  ", "+  \t\t\t  \t\t& (~this.nullBit2 | this.nullBit3", "+  \t\t\t  \t\t\t| ~this.nullBit4)) != 0) {", "+  \t\t\t  \t  \tthis.nullBit4 &= ~mask;", "+  \t\t\t  \t}", "+\t\t\t} else if ((mask & this.nullBit4) != 0) {", "+\t\t\t  \t  this.nullBit3 &= ~mask;", "+\t\t\t} else {", "+    \t\t\tif ((mask & this.nullBit2) != 0) {", "+    \t\t\t  \tthis.nullBit3 &= ~mask;", "+      \t\t\t  \tthis.nullBit4 |= mask;", "+    \t\t\t} else {", "+    \t\t\t  \tthis.nullBit3 |= mask;", "+    \t\t\t}", "+\t\t\tthis.nullBit1 |= mask;", "+\t\t\tthis.nullBit2 |= mask; ", "+\t\t\tif (coverageTestFlag && coverageTestId == 19) {", "+\t\t\t  \tthis.nullBit4 = ~0;", "+\t\t\t\tif (coverageTestFlag && coverageTestId == 20) {", "+\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 20\"); //$NON-NLS-1$", "+\t\t\t\t\tif (coverageTestFlag && coverageTestId == 21) {", "+\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 21\"); //$NON-NLS-1$", "+\t\t\tif ((mask & this.extra[1 + 1][vectorIndex]) != 0) {", "+  \t\t\t  \tif ((mask  ", "+  \t\t\t  \t\t& (~this.extra[2 + 1][vectorIndex] | this.extra[3 + 1][vectorIndex]", "+  \t\t\t  \t\t\t| ~this.extra[4 + 1][vectorIndex])) != 0) {", "+  \t\t\t  \t  \tthis.extra[4 + 1][vectorIndex] &= ~mask;", "+  \t\t\t  \t}", "+\t\t\t} else if ((mask & this.extra[4 + 1][vectorIndex]) != 0) {", "+\t\t\t  \t  this.extra[3 + 1][vectorIndex] &= ~mask;", "+\t\t\t} else {", "+    \t\t\tif ((mask & this.extra[2 + 1][vectorIndex]) != 0) {", "+    \t\t\t  \tthis.extra[3 + 1][vectorIndex] &= ~mask;", "+      \t\t\t  \tthis.extra[4 + 1][vectorIndex] |= mask;", "+    \t\t\t} else {", "+    \t\t\t  \tthis.extra[3 + 1][vectorIndex] |= mask;", "+    \t\t\t}", "+\t\t\tthis.extra[1 + 1][vectorIndex] |= mask;", "+\t\t\tthis.extra[2 + 1][vectorIndex] |= mask; "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a8ac38925fdb75673ec9658ea56fc4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "8c93d4e99b8a943865cb7391e781eba5bb83dfc9", "commitAfterChange": "bd0edd7688142c1743cb6b10766dfc576040f113", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "  public void resetNullInfoForFields()", "signatureAfterChange": "  public void resetNullInfoForFields(UnconditionalFlowInfo fieldResetFlow)", "diff": ["-public void resetNullInfoForFields() {", "+public void resetNullInfoForFields(UnconditionalFlowInfo fieldResetFlow) {", "-\t\tmask |= this.constantFieldsMask;", "+\t\tmask |= fieldResetFlow.constantFieldsMask;", "-\t\tthis.nullBit1 |= ~mask;", "-\t\tthis.nullBit2 &= mask;", "-\t\tthis.nullBit3 &= mask;", "-\t\tthis.nullBit4 |= ~mask;", "+\t\tthis.nullBit1 = (this.nullBit1 & mask) | fieldResetFlow.nullBit1;", "+\t\tthis.nullBit2 = (this.nullBit2 & mask) | fieldResetFlow.nullBit2;", "+\t\tthis.nullBit3 = (this.nullBit3 & mask) | fieldResetFlow.nullBit3;", "+\t\tthis.nullBit4 = (this.nullBit4 & mask) | fieldResetFlow.nullBit4;", "+", "-\t\t\tif (this.extraConstantFieldMask != null){", "-\t\t\t\tfor (int vectorIndex = 0; vectorIndex < this.extra[2].length; vectorIndex++) {", "-\t\t\t\t    if (vectorIndex >= this.extraConstantFieldMask.length) {", "+\t\t\tfor (int vectorIndex = 0; vectorIndex < this.extra[2].length; vectorIndex++) {", "+\t\t\t\tif (fieldResetFlow.extraConstantFieldMask != null) {", "+\t\t\t\t    if (vectorIndex >= fieldResetFlow.extraConstantFieldMask.length) {", "-\t\t\t\t    \t\tmask = ((-1 << localsStartOffset) | this.extraConstantFieldMask[vectorIndex]);", "+\t\t\t\t    \t\tmask = ((-1 << localsStartOffset) | fieldResetFlow.extraConstantFieldMask[vectorIndex]);", "-\t\t\t\t    \t\tmask = 0L | this.extraConstantFieldMask[vectorIndex];", "+\t\t\t\t    \t\tmask = 0L | fieldResetFlow.extraConstantFieldMask[vectorIndex];", "-\t\t\t\t\tthis.extra[2][vectorIndex]", "-\t\t\t\t\t    |= ~mask;", "-\t\t\t\t\tthis.extra[3][vectorIndex] &= mask;", "-\t\t\t\t\tthis.extra[4][vectorIndex] &= mask;", "-\t\t\t\t\tthis.extra[5][vectorIndex] |= ~mask;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (vectorIndex == localsStartIndex) {", "+\t\t\t\t\t\t// some locals, some fields at this vectorIndex", "+\t\t\t\t\t\tmask = -1L << localsStartOffset;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// all fields here", "+\t\t\t\t\t\tmask = 0L;", "+\t\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\t// no constant fields", "-\t\t\t\tfor (int vectorIndex = 0; vectorIndex < this.extra[2].length; vectorIndex++) {", "-\t\t\t\t    if (vectorIndex == localsStartIndex) {", "-\t\t\t\t    \t// some locals, some fields at this vectorIndex", "-\t\t\t\t    \tmask = -1L << localsStartOffset;", "-\t\t\t\t    } else {", "-\t\t\t\t    \t// all fields here", "-\t\t\t\t    \tmask = 0L;", "-\t\t\t\t    }", "-\t\t\t\t\tthis.extra[2][vectorIndex]", "-\t\t\t\t\t    |= ~mask;", "-\t\t\t\t\tthis.extra[3][vectorIndex] &= mask;", "-\t\t\t\t\tthis.extra[4][vectorIndex] &= mask;", "-\t\t\t\t\tthis.extra[5][vectorIndex] |= ~mask;", "-\t\t\t\t}", "+\t\t\t    long reset1, reset2, reset3, reset4;", "+\t\t\t    if (fieldResetFlow.extra != null && fieldResetFlow.extra[2].length > vectorIndex) {", "+\t\t\t    \treset1 = fieldResetFlow.extra[2][vectorIndex];", "+\t\t\t    \treset2 = fieldResetFlow.extra[3][vectorIndex];", "+\t\t\t    \treset3 = fieldResetFlow.extra[4][vectorIndex];", "+\t\t\t    \treset4 = fieldResetFlow.extra[5][vectorIndex];", "+\t\t\t    } else {", "+\t\t\t    \t// no status recorded in fieldResetFlow, use def unknown instead:", "+\t\t\t    \treset1 = reset4 = 1;", "+\t\t\t    \treset2 = reset3 = 0;", "+\t\t\t    }", "+\t\t\t\tthis.extra[2][vectorIndex] = (this.extra[2][vectorIndex] & mask) | reset1;", "+\t\t\t\tthis.extra[3][vectorIndex] = (this.extra[3][vectorIndex] & mask) | reset2;", "+\t\t\t\tthis.extra[4][vectorIndex] = (this.extra[4][vectorIndex] & mask) | reset3;", "+\t\t\t\tthis.extra[5][vectorIndex] = (this.extra[5][vectorIndex] & mask) | reset4;"]}], "num": 19638}
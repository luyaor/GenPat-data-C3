{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0eb4518917c41ef072e1cc922697b2f4", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f3b5f6e4cca9bbd4d02d3dd6685cbb8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": " private void createMethods(IBinaryMethod[] iMethods)", "signatureAfterChange": " private void createMethods(IBinaryMethod[] iMethods, boolean checkGenericSignatures)", "diff": ["-private void createMethods(IBinaryMethod[] iMethods) {", "+private void createMethods(IBinaryMethod[] iMethods, boolean checkGenericSignatures) {", "-\t\t\tthis.methods[i] = createMethod(iMethods[i]);", "+\t\t\tthis.methods[i] = createMethod(iMethods[i], checkGenericSignatures);", "-\t\t\t\tthis.methods[index++] = createMethod(iMethods[i]);", "+\t\t\t\tthis.methods[index++] = createMethod(iMethods[i], checkGenericSignatures);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7287057f1782f28e21a9cac27f41cdb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "c034bd636fcbe7458aee7e3c8ba8b77bfc8eae5d", "commitAfterChange": "de999e56650ff75f1f51c6a66896ec4473dc6602", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " private void createMethods(IBinaryMethod[] iMethods, boolean checkGenericSignatures)", "signatureAfterChange": " private void createMethods(IBinaryMethod[] iMethods, long sourceLevel)", "diff": ["-private void createMethods(IBinaryMethod[] iMethods, boolean checkGenericSignatures) {", "+private void createMethods(IBinaryMethod[] iMethods, long sourceLevel) {", "-\t\t\tthis.methods[i] = createMethod(iMethods[i], checkGenericSignatures);", "+\t\t\tthis.methods[i] = createMethod(iMethods[i], sourceLevel);", "-\t\t\t\tthis.methods[index++] = createMethod(iMethods[i], checkGenericSignatures);", "+\t\t\t\tthis.methods[index++] = createMethod(iMethods[i], sourceLevel);"]}], "num": 22515}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98014a88f752c2f7979ffc208aff51eb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "009bc3519260598725eafe6bb4a34523", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 73, "signatureBeforeChange": " \tprivate void findTypeParameters(char[] token, Scope scope)", "signatureAfterChange": " \tprivate void findTypeParameters(char[] token, Scope scope)", "diff": ["-\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\t\t\t\t//proposal.setDeclarationSignature(null);", "-\t\t\t\t\t\tproposal.setSignature(getSignature(typeParameter.binding));", "-\t\t\t\t\t\t//proposal.setPackageName(null);", "-\t\t\t\t\t\tproposal.setTypeName(typeParameter.name);", "-\t\t\t\t\t\tproposal.setCompletion(typeParameter.name);", "-\t\t\t\t\t\tproposal.setFlags(typeParameter.modifiers);", "-\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tcreateTypeParameterProposal(typeParameter, relevance);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9237b5605bc7d059e67d78ab87068ece", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 70, "signatureBeforeChange": " \t \tprivate void findNestedTypes( \t\tchar[] typeName, \t\tSourceTypeBinding currentType, \t\tScope scope, \t\tboolean proposeAllMemberTypes, \t\tObjectVector typesFound)", "signatureAfterChange": " \t \tprivate void findNestedTypes( \t\tchar[] typeName, \t\tSourceTypeBinding currentType, \t\tScope scope, \t\tboolean proposeAllMemberTypes, \t\tObjectVector typesFound)", "diff": ["-\t\t\t\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\t\t\t\t\t\t\tproposal.setDeclarationSignature(localType.qualifiedPackageName());", "-\t\t\t\t\t\t\t\t\tproposal.setSignature(getSignature(localType));", "-\t\t\t\t\t\t\t\t\tproposal.setPackageName(localType.qualifiedPackageName());", "-\t\t\t\t\t\t\t\t\tproposal.setTypeName(localType.sourceName);", "-\t\t\t\t\t\t\t\t\tproposal.setCompletion(localType.sourceName);", "-\t\t\t\t\t\t\t\t\tproposal.setFlags(localType.modifiers);", "-\t\t\t\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tcreateTypeProposal(localType, localType.sourceName, IAccessRule.K_ACCESSIBLE, localType.sourceName, relevance);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d98707268804bba807dc75f35e71a27a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tprivate void findMemberTypes( \t\tchar[] typeName, \t\tReferenceBinding[] memberTypes, \t\tObjectVector typesFound, \t\tReferenceBinding receiverType, \t\tSourceTypeBinding invocationType, \t\tboolean staticOnly, \t\tboolean fromStaticImport, \t\tboolean checkQualification)", "signatureAfterChange": " \tprivate void findMemberTypes( \t\tchar[] typeName, \t\tReferenceBinding[] memberTypes, \t\tObjectVector typesFound, \t\tReferenceBinding receiverType, \t\tSourceTypeBinding invocationType, \t\tboolean staticOnly, \t\tboolean fromStaticImport, \t\tboolean checkQualification)", "diff": ["-\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\t\tproposal.setDeclarationSignature(memberType.qualifiedPackageName());", "-\t\t\t\tproposal.setSignature(getSignature(memberType));", "-\t\t\t\tproposal.setPackageName(memberType.qualifiedPackageName());", "-\t\t\t\tproposal.setTypeName(memberType.qualifiedSourceName());", "-\t\t\t\tproposal.setCompletion(completionName);", "-\t\t\t\tproposal.setFlags(memberType.modifiers);", "-\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\tif(DEBUG) {", "-\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t}", "+\t\t\t\tcreateTypeProposal(memberType, memberType.qualifiedSourceName(), IAccessRule.K_ACCESSIBLE, completionName, relevance);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e09056872932fdb4c0e1253636777284", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \t \tprivate void findImportsOfMemberTypes(char[] typeName,\tReferenceBinding ref, boolean onlyStatic)", "signatureAfterChange": " \t \tprivate void findImportsOfMemberTypes(char[] typeName,\tReferenceBinding ref, boolean onlyStatic)", "diff": ["-\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\t\tproposal.setDeclarationSignature(memberType.qualifiedPackageName());", "-\t\t\t\tproposal.setSignature(getSignature(memberType));", "-\t\t\t\tproposal.setPackageName(memberType.qualifiedPackageName());", "-\t\t\t\tproposal.setTypeName(memberType.qualifiedSourceName());", "-\t\t\t\tproposal.setCompletion(completionName);", "-\t\t\t\tproposal.setFlags(memberType.modifiers);", "-\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\tif(DEBUG) {", "-\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t}", "+\t\t\t\tcreateTypeProposal(memberType, memberType.qualifiedSourceName(), IAccessRule.K_ACCESSIBLE, completionName, relevance);"]}], "num": 2565}
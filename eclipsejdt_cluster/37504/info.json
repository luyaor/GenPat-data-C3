{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a416076a2b0c28e526c6d092b0f7302d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "092eb04568ee1c6a915318a384f795b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "6c99bc8cccc31ec35bab7668144f72ce20b25c55", "commitAfterChange": "1085bccef53454390873585341983a219f17d63b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " protected IJavaElement createHandle(AbstractVariableDeclaration variableDeclaration, IJavaElement parent)", "signatureAfterChange": " protected IJavaElement createHandle(AbstractVariableDeclaration variableDeclaration, IJavaElement parent)", "diff": ["-\t\t\treturn new LocalVariable((JavaElement)parent,", "-\t\t\t\tnew String(variableDeclaration.name),", "-\t\t\t\tvariableDeclaration.declarationSourceStart,", "-\t\t\t\tvariableDeclaration.declarationSourceEnd,", "-\t\t\t\tvariableDeclaration.sourceStart,", "-\t\t\t\tvariableDeclaration.sourceEnd,", "-\t\t\t\tnew String(variableDeclaration.type.resolvedType.signature()),", "-\t\t\t\tvariableDeclaration.annotations", "-\t\t\t);", "+\t\t\tif (variableDeclaration.type.resolvedType != null) {", "+\t\t\t\treturn new LocalVariable((JavaElement)parent,", "+\t\t\t\t\tnew String(variableDeclaration.name),", "+\t\t\t\t\tvariableDeclaration.declarationSourceStart,", "+\t\t\t\t\tvariableDeclaration.declarationSourceEnd,", "+\t\t\t\t\tvariableDeclaration.sourceStart,", "+\t\t\t\t\tvariableDeclaration.sourceEnd,", "+\t\t\t\t\tnew String(variableDeclaration.type.resolvedType.signature()),", "+\t\t\t\t\tvariableDeclaration.annotations", "+\t\t\t\t);", "+\t\t\t}", "-\t\t\treturn new LocalVariable((JavaElement)parent,", "-\t\t\t\tnew String(variableDeclaration.name),", "-\t\t\t\tvariableDeclaration.declarationSourceStart,", "-\t\t\t\tvariableDeclaration.declarationSourceEnd,", "-\t\t\t\tvariableDeclaration.sourceStart,", "-\t\t\t\tvariableDeclaration.sourceEnd,", "-\t\t\t\tnew String(variableDeclaration.type.resolvedType.signature()),", "-\t\t\t\tvariableDeclaration.annotations", "-\t\t\t);", "+\t\t\tif (variableDeclaration.type.resolvedType != null) {", "+\t\t\t\treturn new LocalVariable((JavaElement)parent,", "+\t\t\t\t\tnew String(variableDeclaration.name),", "+\t\t\t\t\tvariableDeclaration.declarationSourceStart,", "+\t\t\t\t\tvariableDeclaration.declarationSourceEnd,", "+\t\t\t\t\tvariableDeclaration.sourceStart,", "+\t\t\t\t\tvariableDeclaration.sourceEnd,", "+\t\t\t\t\tnew String(variableDeclaration.type.resolvedType.signature()),", "+\t\t\t\t\tvariableDeclaration.annotations", "+\t\t\t\t);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2043e243f6a1b777e4c848b4fb5eb1fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "68485325d2a928948507d26c14877d852a16310f", "commitAfterChange": "e4951059665fca165a9958caf9b1f64b79cc20d4", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition, int pos, ITypeRoot root)", "signatureAfterChange": " \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition, int pos, ITypeRoot root)", "diff": ["+\t\t\t\t\tif (this.requestor.isExtendedContextRequired()) context.setExtended();", "+\t\t\t\tif (this.requestor.isExtendedContextRequired()) context.setExtended();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "462043b359fc90919692a8401085b054", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "bc36c6c80fea8051d7058a5b477375cffbc00908", "commitAfterChange": "6f60569d194de3bca836674a443f538feb4384aa", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tprivate void findImports(CompletionOnImportReference importReference)", "signatureAfterChange": "  \tprivate void findImports(CompletionOnImportReference importReference)", "diff": ["-\t\tthis.nameEnvironment.findPackages(importName, this);", "-\t\tthis.nameEnvironment.findTypes(importName, this);", "+\t\tif(!this.requestor.isIgnored(CompletionProposal.PACKAGE_REF)) {", "+\t\t\tthis.nameEnvironment.findPackages(importName, this);", "+\t\t}", "+\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\tthis.nameEnvironment.findTypes(importName, this);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4dc9d9728fdc4240d1c8276cb6a41ee0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "b403a2607b7ef83661a12f868d28bb3536fb7ef8", "commitAfterChange": "7d3413f2e54a1d74c024c68815343b32316b40c7", "methodNumberBeforeChange": 167, "methodNumberAfterChange": 167, "signatureBeforeChange": " public NameReference createSingleAssistNameReference(char[] assistName, long position)", "signatureAfterChange": " public NameReference createSingleAssistNameReference(char[] assistName, long position)", "diff": ["-", "-\t\t\t\tkeywords[count++]= Keywords.ASSERT;", "+\t\t\t\tif (this.options.complianceLevel >= ClassFileConstants.JDK1_4) {", "+\t\t\t\t\tkeywords[count++]= Keywords.ASSERT;", "+\t\t\t\t}", "-", "-\t\t\t\t\tkeywords[count++]= Keywords.ASSERT;", "+\t\t\t\t\tif (this.options.complianceLevel >= ClassFileConstants.JDK1_4) {", "+\t\t\t\t\t\tkeywords[count++]= Keywords.ASSERT;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "507e1d209638bf2c6d7f241d04a5b068", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "5c36b7e0aa0c251d5747709bb3d5cee0d8720542", "commitAfterChange": "4373339abc26cbdf894a7449a045a0ef65f6f3f9", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " private void updateRoots(IPath containerPath, IResourceDelta containerDelta)", "signatureAfterChange": " private void updateRoots(IPath containerPath, IResourceDelta containerDelta)", "diff": ["-\t\t\tthis.updateCurrentDeltaAndIndex(rootDelta, IJavaElement.PACKAGE_FRAGMENT_ROOT, rootInfo);", "+", "+\t\t\tif (!rootInfo.project.getPath().isPrefixOf(path)) { // only consider roots that are not included in the container", "+\t\t\t\tthis.updateCurrentDeltaAndIndex(rootDelta, IJavaElement.PACKAGE_FRAGMENT_ROOT, rootInfo);", "+\t\t\t}", "+\t\t\t", "-\t\t\t\t\tthis.updateCurrentDeltaAndIndex(rootDelta, IJavaElement.PACKAGE_FRAGMENT_ROOT, rootInfo);", "+\t\t\t\t\tif (!rootInfo.project.getPath().isPrefixOf(path)) { // only consider roots that are not included in the container", "+\t\t\t\t\t\tthis.updateCurrentDeltaAndIndex(rootDelta, IJavaElement.PACKAGE_FRAGMENT_ROOT, rootInfo);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dd4be0246ed322eee55715833c5eb00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "bc36c6c80fea8051d7058a5b477375cffbc00908", "commitAfterChange": "6f60569d194de3bca836674a443f538feb4384aa", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  \tprivate void findTypesAndSubpackages( \t\tchar[] token, \t\tPackageBinding packageBinding)", "signatureAfterChange": "  \tprivate void findTypesAndSubpackages( \t\tchar[] token, \t\tPackageBinding packageBinding)", "diff": ["+\t\tboolean proposeType = !this.requestor.isIgnored(CompletionProposal.TYPE_REF);", "+\t\t", "-\t\tif (this.unitScope != null) {", "+\t\tif (proposeType && this.unitScope != null) {", "-\t\tthis.nameEnvironment.findTypes(qualifiedName, this);", "-\t\tthis.nameEnvironment.findPackages(qualifiedName, this);", "+\t\tif(proposeType) {", "+\t\t\tthis.nameEnvironment.findTypes(qualifiedName, this);", "+\t\t}", "+\t\tif(!this.requestor.isIgnored(CompletionProposal.PACKAGE_REF)) {", "+\t\t\tthis.nameEnvironment.findPackages(qualifiedName, this);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8707c5128fd9347c5d7742dc494257af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "bc36c6c80fea8051d7058a5b477375cffbc00908", "commitAfterChange": "6f60569d194de3bca836674a443f538feb4384aa", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tprivate void findFieldsAndMethods( \t\tchar[] token, \t\tTypeBinding receiverType, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "signatureAfterChange": "  \tprivate void findFieldsAndMethods( \t\tchar[] token, \t\tTypeBinding receiverType, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "diff": ["+\t\tboolean proposeField = !this.requestor.isIgnored(CompletionProposal.FIELD_REF);", "+\t\tboolean proposeMethod = !this.requestor.isIgnored(CompletionProposal.METHOD_REF);", "+\t\t", "-\t\t\tif (token.length <= lengthField.length", "+\t\t\tif (proposeField", "+\t\t\t\t&& token.length <= lengthField.length", "-\t\t\tif (token.length <= cloneMethod.length", "+\t\t\tif (proposeMethod", "+\t\t\t\t&& token.length <= cloneMethod.length", "-\t\tfindFields(", "-\t\t\ttoken,", "-\t\t\t(ReferenceBinding) receiverType,", "-\t\t\tscope,", "-\t\t\tnew ObjectVector(),", "-\t\t\tnew ObjectVector(),", "-\t\t\tfalse,", "-\t\t\tinvocationSite,", "-\t\t\tinvocationScope,", "-\t\t\timplicitCall,", "-\t\t\ttrue);", "+\t\tif(proposeField) {", "+\t\t\tfindFields(", "+\t\t\t\ttoken,", "+\t\t\t\t(ReferenceBinding) receiverType,", "+\t\t\t\tscope,", "+\t\t\t\tnew ObjectVector(),", "+\t\t\t\tnew ObjectVector(),", "+\t\t\t\tfalse,", "+\t\t\t\tinvocationSite,", "+\t\t\t\tinvocationScope,", "+\t\t\t\timplicitCall,", "+\t\t\t\ttrue);", "+\t\t}", "-\t\tfindMethods(", "-\t\t\ttoken,", "-\t\t\tnull,", "-\t\t\t(ReferenceBinding) receiverType,", "-\t\t\tscope,", "-\t\t\tmethodsFound,", "-\t\t\tfalse,", "-\t\t\tfalse,", "-\t\t\tfalse,", "-\t\t\tinvocationSite,", "-\t\t\tinvocationScope,", "-\t\t\timplicitCall,", "-\t\t\tsuperCall,", "-\t\t\ttrue);", "+\t\tif(proposeMethod) {", "+\t\t\tfindMethods(", "+\t\t\t\ttoken,", "+\t\t\t\tnull,", "+\t\t\t\t(ReferenceBinding) receiverType,", "+\t\t\t\tscope,", "+\t\t\t\tmethodsFound,", "+\t\t\t\tfalse,", "+\t\t\t\tfalse,", "+\t\t\t\tfalse,", "+\t\t\t\tinvocationSite,", "+\t\t\t\tinvocationScope,", "+\t\t\t\timplicitCall,", "+\t\t\t\tsuperCall,", "+\t\t\t\ttrue);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "966701cf003a1739ec3484c9ebd7da7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "3817fb9be5d23e5c6f76a434da338233b90b5a46", "commitAfterChange": "8d9f700412e8d76f89db3ccd17a42191a013d35d", "methodNumberBeforeChange": 164, "methodNumberAfterChange": 164, "signatureBeforeChange": " public void invokespecial(MethodBinding methodBinding)", "signatureAfterChange": " public void invokespecial(MethodBinding methodBinding)", "diff": ["-\tsuper.invokespecial(methodBinding);", "-\tint argCount = 0;", "-\tif (methodBinding.isConstructor()) {", "-\t\tfinal ReferenceBinding declaringClass = methodBinding.declaringClass;", "-\t\tif (declaringClass.isNestedType()) {", "-\t\t\t// enclosing instances", "-\t\t\tTypeBinding[] syntheticArgumentTypes = declaringClass.syntheticEnclosingInstanceTypes();", "-\t\t\tif (syntheticArgumentTypes != null) {", "-\t\t\t\targCount += syntheticArgumentTypes.length;", "-\t\t\t}", "-\t\t\t// outer local variables", "-\t\t\tSyntheticArgumentBinding[] syntheticArguments = declaringClass.syntheticOuterLocalVariables();", "-\t\t\tif (syntheticArguments != null) {", "-\t\t\t\targCount += syntheticArguments.length;", "-\t\t\t}", "-\t\t} else if (declaringClass.isEnum()) {", "-\t\t\targCount += 2;", "-\t\t}", "-\t\targCount += methodBinding.parameters.length;", "-\t\tthis.currentFrame.numberOfStackItems -= argCount;", "-\t\tthis.currentFrame.initializeReceiver();", "-\t\tthis.currentFrame.numberOfStackItems--; // remove the top of stack", "-\t} else {", "-\t\targCount = 1;", "-\t\targCount += methodBinding.parameters.length;", "-\t\tthis.currentFrame.numberOfStackItems -= argCount;", "-\t\tif (methodBinding.returnType != TypeBinding.VOID) {", "-\t\t\tthis.currentFrame.addStackItem(methodBinding.returnType);", "-\t\t}", "-\t}", "+    super.invokespecial(methodBinding);", "+    int argCount = 0;", "+    if (methodBinding.isConstructor()) {", "+        final ReferenceBinding declaringClass = methodBinding.declaringClass;", "+        if (declaringClass.isNestedType()) {", "+            // enclosing instances", "+            TypeBinding[] syntheticArgumentTypes = declaringClass.syntheticEnclosingInstanceTypes();", "+            if (syntheticArgumentTypes != null) {", "+                argCount += syntheticArgumentTypes.length;", "+            }", "+            // outer local variables", "+            SyntheticArgumentBinding[] syntheticArguments = declaringClass.syntheticOuterLocalVariables();", "+            if (syntheticArguments != null) {", "+                argCount += syntheticArguments.length;", "+            }", "+        } else if (declaringClass.isEnum()) {", "+            argCount += 2;", "+        }", "+        argCount += methodBinding.parameters.length;", "+        if (this.currentFrame.numberOfStackItems >= (argCount + 1)) {", "+\t        this.currentFrame.numberOfStackItems -= argCount;", "+\t        this.currentFrame.initializeReceiver();", "+\t        this.currentFrame.numberOfStackItems--; // remove the top of stack", "+        }", "+    } else {", "+        argCount = 1;", "+        argCount += methodBinding.parameters.length;", "+        if (this.currentFrame.numberOfStackItems >= argCount) {", "+        \tthis.currentFrame.numberOfStackItems -= argCount;", "+        }        ", "+        if (methodBinding.returnType != TypeBinding.VOID) {", "+            this.currentFrame.addStackItem(methodBinding.returnType);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c98006c100bb174a57b4b53cc82800b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "77836ca10e63c4cff711846bf5f574464b5f7be2", "commitAfterChange": "d22034c63daa5881c612553572d647160bcd5446", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 186, "signatureBeforeChange": "  \tprivate void findTypesAndSubpackages( \t\tchar[] token, \t\tPackageBinding packageBinding, \t\tScope scope)", "signatureAfterChange": "  \tprivate void findTypesAndSubpackages( \t\tchar[] token, \t\tPackageBinding packageBinding, \t\tScope scope)", "diff": ["+\t\t\t\t", "+\t\t\t\tif (isForbidden(sourceType)) continue;", "+\t\t\t\tif (this.assistNodeIsClass && sourceType.isInterface()) continue;", "+\t\t\t\tif (this.assistNodeIsInterface && sourceType.isClass()) continue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f008b972c40efd6a17f86baf1fe0c25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "ca9dbce3d563d28e984f1680d988cb68608c75f8", "commitAfterChange": "aec4b3fea7801d56d112291851d497436c0f9c81", "methodNumberBeforeChange": 256, "methodNumberAfterChange": 256, "signatureBeforeChange": " \tpublic void testJavadoc()", "signatureAfterChange": " \tpublic void testJavadoc()", "diff": ["-\t\tassertTrue(x.getComment().startsWith(\"/**\")); //$NON-NLS-1$", "-\t\tassertTrue(x.getComment().endsWith(\"*/\")); //$NON-NLS-1$", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tassertTrue(x.getComment().startsWith(\"/**\")); //$NON-NLS-1$", "+\t\t\tassertTrue(x.getComment().endsWith(\"*/\")); //$NON-NLS-1$", "+\t\t}", "-\t\tfinal String[] samples =", "-\t\t\t{ ", "-\t\t\t  \"/** Hello there */\", //$NON-NLS-1$", "-\t\t\t  \"/**\\n * Line 1\\n * Line 2\\n */\", //$NON-NLS-1$", "-\t\t\t  \"/***/\", //$NON-NLS-1$", "-\t\t\t};", "-\t\tfor (int i = 0; i < samples.length; i++) {\t\t\t", "-\t\t\tpreviousCount = ast.modificationCount();", "-\t\t\tx.setComment(samples[i]);", "-\t\t\tassertTrue(ast.modificationCount() > previousCount);", "-\t\t\tassertTrue(samples[i].equals(x.getComment()));", "-\t\t}", "-", "-\t\tfinal String[] badSamples =", "-\t\t\t{ ", "-\t\t\t  null,", "-\t\t\t  \"\", //$NON-NLS-1$", "-\t\t\t  \"/* */\", //$NON-NLS-1$", "-\t\t\t  \"/**\", //$NON-NLS-1$", "-\t\t\t  \"*/\", //$NON-NLS-1$", "-\t\t\t};", "-", "-\t\t// check that property cannot be set to clearly illegal things", "-\t\tfor (int i = 0; i < badSamples.length; i++) {\t\t\t", "-\t\t\ttry {", "-\t\t\t\tx.setComment(badSamples[i]);", "-\t\t\t\tassertTrue(false);", "-\t\t\t} catch (RuntimeException e) {", "-\t\t\t\t// pass", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tfinal String[] samples =", "+\t\t\t\t{ ", "+\t\t\t\t  \"/** Hello there */\", //$NON-NLS-1$", "+\t\t\t\t  \"/**\\n * Line 1\\n * Line 2\\n */\", //$NON-NLS-1$", "+\t\t\t\t  \"/***/\", //$NON-NLS-1$", "+\t\t\t\t};", "+\t\t\tfor (int i = 0; i < samples.length; i++) {\t\t\t", "+\t\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\t\tx.setComment(samples[i]);", "+\t\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\t\tassertTrue(samples[i].equals(x.getComment()));", "+\t\t\t}", "+\t", "+\t\t\tfinal String[] badSamples =", "+\t\t\t\t{ ", "+\t\t\t\t  null,", "+\t\t\t\t  \"\", //$NON-NLS-1$", "+\t\t\t\t  \"/* */\", //$NON-NLS-1$", "+\t\t\t\t  \"/**\", //$NON-NLS-1$", "+\t\t\t\t  \"*/\", //$NON-NLS-1$", "+\t\t\t\t};", "+\t", "+\t\t\t// check that property cannot be set to clearly illegal things", "+\t\t\tfor (int i = 0; i < badSamples.length; i++) {\t\t\t", "+\t\t\t\ttry {", "+\t\t\t\t\tx.setComment(badSamples[i]);", "+\t\t\t\t\tassertTrue(false);", "+\t\t\t\t} catch (RuntimeException e) {", "+\t\t\t\t\t// pass", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "beb212f9a76100c08735f7e1d9169fbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BuildNotifier.java", "commitBeforeChange": "2e8c81b48304c9e33747060a2a7fcd8295c64afe", "commitAfterChange": "50125dca81221f803e384aaa4267a637e226f1c2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " protected void updateProblemCounts(IMarker[] oldProblems, IProblem[] newProblems)", "signatureAfterChange": " protected void updateProblemCounts(IMarker[] oldProblems, IProblem[] newProblems)", "diff": ["+\t\t\tif (newProblem.getID() == IProblem.Task) continue; // skip task", "+\t\t\t\t\tif (pb.getID() == IProblem.Task) continue; // skip task"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c25ec8d5d022d0ae1840789ab1f18c32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IfStatement.java", "commitBeforeChange": "070966ca55be72602fa720505dfcb68967b43193", "commitAfterChange": "10086836e4f826e9bd87f9a69b1b37eccf968f1e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\tif (!(this.thenStatement instanceof Block))", "+\t\t\tflowContext.expireNullCheckedFieldInfo();", "+\t\tif (!(this.elseStatement instanceof Block))", "+\t\t\tflowContext.expireNullCheckedFieldInfo();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6a59d70faebac78f9e460b38e02cd43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "57e8dd41219d846363c918d62edb5007994c5c79", "commitAfterChange": "a6d23e686845a8f3a37751a7b350298fb34c87e5", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards)", "signatureAfterChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards)", "diff": ["-    \t\t\t\t\tint len = 2 + (otherUBounds != null ? otherUBounds.length : 0) + otherBBounds.length;", "+    \t\t\t\t\tint len = 1 + (otherUBounds != null ? otherUBounds.length : 0) + otherBBounds.length;", "+    \t\t\t\t\tif (typeParameters[i].firstBound != null)", "+    \t\t\t\t\t\tlen++;", "-\t    \t\t\t\t\tallBounds[idx++] = (ReferenceBinding) typeParameters[i].firstBound;", "+\t    \t\t\t\t\tif (typeParameters[i].firstBound != null)", "+\t    \t\t\t\t\t\tallBounds[idx++] = (ReferenceBinding) typeParameters[i].firstBound;"]}], "num": 37504}
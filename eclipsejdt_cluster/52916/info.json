{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9aa2ce2463f97d701060a21e25a9f22", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "461020222caa5bdf56bebe25f8289a9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "cfdd662bec42f5d5e062111a13d87bd30fa87cbf", "commitAfterChange": "ce2215557e2b55228ab19316810e1219b5a4a097", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tprivate static void resolvedChainedLibraries(IPath jarPath, HashSet visited, ArrayList result)", "signatureAfterChange": " \t \tprivate static void resolvedChainedLibraries(IPath jarPath, HashSet visited, ArrayList result)", "diff": ["-\t\t\t\t\t\tUtil.log(IStatus.WARNING, \"Invalid Class-Path header in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$", "+\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "+\t\t\t\t\t\t\tUtil.verbose(\"Invalid Class-Path header in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tUtil.log(IStatus.WARNING, \"Multiple Class-Path headers in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$", "+\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "+\t\t\t\t\t\t\tUtil.verbose(\"Multiple Class-Path headers in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tUtil.log(IStatus.WARNING, \"Invalid Class-Path entry \" + calledFileName + \" in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "+\t\t\t\t\t\t\t\t\tUtil.verbose(\"Invalid Class-Path entry \" + calledFileName + \" in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "+\t\t\t\t\tUtil.verbose(\"Could not read Class-Path header in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$", "+\t\t\t\t\te.printStackTrace();", "+\t\t\t\t}", "-\t\t\t\tUtil.log(e, \"Could not read Class-Path header in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$", "+\t\t\t\t// not a zip file", "+\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "+\t\t\t\t\tUtil.verbose(\"Could not read Class-Path header in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$", "+\t\t\t\t\te.printStackTrace();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee20d0b9dd571d99b3c58fb9d8766f57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "3a5401b27a838fcf33757f0b2ef8214fd68d66ea", "commitAfterChange": "e788af814a64e70ab3a9cd6cb10f201dff372018", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "signatureAfterChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "diff": ["+\t\t\t\t\tExpression[] exprs;", "-\t\t\t\t\t\tExpression body = (Expression)lambda.body();", "-\t\t\t\t\t\tresult.add(new ConstraintExpressionFormula(body, r, COMPATIBLE));", "+\t\t\t\t\t\texprs = new Expression[] {(Expression)lambda.body()};", "-\t\t\t\t\t\tExpression[] exprs = lambda.resultExpressions();", "-\t\t\t\t\t\tfor (int i = 0; i < exprs.length; i++) {", "-\t\t\t\t\t\t\tresult.add(new ConstraintExpressionFormula(exprs[i], r, COMPATIBLE));", "+\t\t\t\t\t\texprs = lambda.resultExpressions();", "+\t\t\t\t\t}", "+\t\t\t\t\tfor (int i = 0; i < exprs.length; i++) {", "+\t\t\t\t\t\tExpression expr = exprs[i];", "+\t\t\t\t\t\tif (r.isProperType(true) && expr.resolvedType != null) {", "+\t\t\t\t\t\t\tTypeBinding exprType = expr.resolvedType;", "+\t\t\t\t\t\t\t// \"not compatible in an assignment context with R\"?", "+\t\t\t\t\t\t\tif (!(expr.isConstantValueOfTypeAssignableToType(exprType, r)", "+\t\t\t\t\t\t\t\t\t|| exprType.isCompatibleWith(r)))", "+\t\t\t\t\t\t\t\treturn FALSE;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tresult.add(new ConstraintExpressionFormula(expr, r, COMPATIBLE));"]}], "num": 52916}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c741e8319ed18346ecd8072264882ed", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fc72b59b58242b79b00cac9de568396", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "2fdac50d0a994a41e3b73d3202a0de983b014e1d", "commitAfterChange": "5291cd66203d5d42725b1c4b5cba50a5232bc244", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static void setUserLibraries(String[] newNames, UserLibrary[] newLibs, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \t \tpublic synchronized void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)", "diff": ["-\t */", "-\tpublic static void setUserLibraries(String[] newNames, UserLibrary[] newLibs, IProgressMonitor monitor) throws JavaModelException {", "-\t\tAssert.isTrue(newNames.length == newLibs.length, \"names and libraries should have the same length\"); //$NON-NLS-1$", "-\t\t", "-\t\tif (monitor == null) {", "-\t\t\tmonitor= new NullProgressMonitor();", "-\t\t}", "-\t\t", "-\t\ttry {", "-\t\t\tmonitor.beginTask(\"\", newNames.length);\t//$NON-NLS-1$", "-\t\t\tint last= newNames.length - 1;", "-\t\t\tfor (int i= 0; i < newLibs.length; i++) {", "-\t\t\t\tinternalSetUserLibrary(newNames[i], newLibs[i], i == last, true, new SubProgressMonitor(monitor, 1));", "-\t\t\t}", "-\t\t} finally {", "-\t\t\tmonitor.done();", "-\t\t}", "-\t}", "+\t", "+\tpublic synchronized void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)  {", "+\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "+\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "+\t\ttry {", "+\t\t\tString propertyValue = UserLibrary.serialize(entries, isSystemLibrary);", "+\t\t\tinstancePreferences.put(propertyName, propertyValue); // sends out a PreferenceChangeEvent (see preferenceChange(...))", "+\t\t} catch (IOException e) {", "+\t\t\tUtil.log(e, \"Exception while serializing user library \" + libName); //$NON-NLS-1$", "+\t\t\treturn;", "+\t\t}", "+\t\ttry {", "+\t\t\tinstancePreferences.flush();", "+\t\t} catch (BackingStoreException e) {", "+\t\t\tUtil.log(e, \"Exception while saving user library \" + libName); //$NON-NLS-1$", "+\t\t}", "+\t\t// this.userLibraries was updated during the PreferenceChangeEvent (see preferenceChange(...))", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcddc1dd5824e0e86aeb380aae7bc545", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptUtil.java", "commitBeforeChange": "c1f8b23725dd7ea4b476b40485a277dac1e772a8", "commitAfterChange": "9aadd271aa6b9408f381dcc08f67ae2c31958a0a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t \tpublic static boolean hasAnnotationInstance( char[] source )", "signatureAfterChange": " \tpublic static AnnotationProcessorFactory getFactoryForAnnotation( \t\t\tfinal String fullyQualifiedAnnotation, \t\t\tfinal IProject project)", "diff": ["+\tpublic static AnnotationProcessorFactory getFactoryForAnnotation(", "+\t\t\tfinal String fullyQualifiedAnnotation,", "+\t\t\tfinal IProject project) {", "-\t", "-\tpublic static boolean hasAnnotationInstance( char[] source ) {", "-\t\ttry {\t\t", "-\t\t\tif ( source == null )", "-\t\t\t\treturn false;", "-\t\t\tIScanner scanner = ToolFactory.createScanner( ", "-\t\t\t\tfalse, false, false, JavaCore.VERSION_1_5 );", "-\t\t\tscanner.setSource( source );", "-\t\t\tint token = scanner.getNextToken();", "-\t\t\twhile ( token != ITerminalSymbols.TokenNameEOF ) {", "-\t\t\t\ttoken = scanner.getNextToken();", "-\t\t\t\tif ( token == ITerminalSymbols.TokenNameAT )", "-\t\t\t\t{", "-\t\t\t\t\t//", "-\t\t\t\t\t// found an @ sign, see if next token is \"interface\"", "-\t\t\t\t\t// @interface is an annotation decl and not an annotation", "-\t\t\t\t\t// instance.  ", "-\t\t\t\t\t//", "-\t\t\t\t\ttoken = scanner.getNextToken();", "-\t\t\t\t\tif ( token != ITerminalSymbols.TokenNameinterface )", "-\t\t\t\t\t\treturn true;", "+\t\t// TODO: go to config for project to pull out factories", "+\t\tList<AnnotationProcessorFactory> allFactories = ", "+\t\t\tAptCompilationParticipant.getInstance().getAllFactories();", "+\t\t", "+\t\tfor (AnnotationProcessorFactory factory : allFactories) {", "+\t\t\tCollection<String> supportedAnnos = factory.supportedAnnotationTypes();", "+\t\t\tfor (String anno : supportedAnnos) {", "+\t\t\t\tif (anno.equals(fullyQualifiedAnnotation)) {", "+\t\t\t\t\treturn factory;", "+\t\t\t\t}", "+\t\t\t\telse if (\"*\".equals(anno)) {", "+\t\t\t\t\t\treturn factory;", "+\t\t\t\t}", "+\t\t\t\telse if (anno.endsWith(\"*\")) {", "+\t\t\t\t\tfinal String prefix = anno.substring(0,", "+\t\t\t\t\t\t\tanno.length() - 2);", "+\t\t\t\t\tif (fullyQualifiedAnnotation.startsWith(prefix)) {", "+\t\t\t\t\t\treturn factory;", "+\t\t\t\t\t}", "-\t\t\treturn false;", "-\t\tcatch( InvalidInputException iie )", "-\t\t{", "-\t\t\t// lex error, so report false", "-\t\t\treturn false;", "-\t\t}", "-\t\tcatch( Exception e )", "-\t\t{", "-\t\t\t// TODO:  deal with this exception", "-\t\t\te.printStackTrace();", "-\t\t\treturn false;", "-\t\t}", "-\t}", "+\t\treturn null;"]}], "num": 46152}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc779459e06f968c05449d5d55801918", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b8acb3e918d31a1956b1a598618dacf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 69, "signatureBeforeChange": "  \tprotected void assertSearchResults(String message, String expected, Object collector)", "signatureAfterChange": " \tpublic void testBug84727b() throws CoreException", "diff": ["-\tprotected void assertSearchResults(String message, String expected, Object collector) {", "-\t\tString actual = collector.toString();", "-\t\tif (!expected.equals(actual)) {", "-\t\t\tif (this.displayName) System.out.println(getName()+\" expected result is:\");", "-\t\t\tSystem.out.println(displayString(actual, this.tabs));", "-\t\t}", "-\t\tassertEquals(", "-\t\t\tmessage,", "-\t\t\texpected,", "-\t\t\tactual", "-\t\t);", "-\t}", "+\t}", "+\tpublic void testBug84727b() throws CoreException {", "+\t\tresultCollector.showRule = true;", "+\t\tassertNotNull(\"Problem in tests processing\", workingCopies);", "+\t\tassertEquals(\"Problem in tests processing\", 3, workingCopies.length);", "+\t\tIMethod[] methods = workingCopies[0].getType(\"A\").getMethods();", "+\t\tassertEquals(\"Invalid number of methods\", 2, methods.length);", "+\t\tsearch(methods[1], REFERENCES);", "+\t\tassertSearchResults(", "+\t\t\t\"src/b84727/X.java void b84727.X.foo() [getXYZ(\\\"\\\")] EXACT_MATCH\"", "+\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d74e19c6412946a1bba5f2e874cd7ab2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "76b281521e0c88d7bc9fbeb2c963d7e6c8914ee3", "commitAfterChange": "e4873234bb7d47f3f866e994a2466da3b0ee585f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic ParameterizedGenericMethodBinding getInvocationTypeInferenceSolution(MethodBinding method, Invocation site, TypeBinding targetType)", "signatureAfterChange": " \tpublic MethodBinding inferInvocationType(Invocation invocation, ParameterizedGenericMethodBinding method)", "diff": ["-\tpublic ParameterizedGenericMethodBinding getInvocationTypeInferenceSolution(MethodBinding method, Invocation site, TypeBinding targetType) {", "-\t\t// start over from a previous candidate but discard its type variable instantiations", "-\t\t// TODO: should we retain any instantiations of type variables not owned by the method? ", "-\t\tBoundSet result = null;", "-\t\ttry {", "-\t\t\tresult = inferInvocationType(this.currentBounds, targetType, site, method);", "-\t\t} catch (InferenceFailureException e) {", "-\t\t\treturn null;", "+\tpublic /*@NonNull*/ MethodBinding inferInvocationType(Invocation invocation, ParameterizedGenericMethodBinding method) {", "+\t\tTypeBinding[] argumentTypes = null;", "+\t\tExpression[] arguments = invocation.arguments();", "+\t\tif (arguments != null) {", "+\t\t\targumentTypes = new TypeBinding[arguments.length];", "+\t\t\tfor (int i = 0; i < arguments.length; i++)", "+\t\t\t\targumentTypes[i] = arguments[i].resolvedType;", "-\t\tif (result != null) {", "-\t\t\tTypeBinding[] solutions = getSolutions(method.typeVariables(), site, result);", "-\t\t\tif (solutions != null) {", "-\t\t\t\tParameterizedGenericMethodBinding substituteMethod = this.environment.createParameterizedGenericMethod(method, solutions);", "-\t\t\t\tsite.registerInferenceContext(substituteMethod, this);", "-\t\t\t\treturn substituteMethod;", "-\t\t\t}", "-\t\t}", "-\t\treturn null;", "+\t\treturn inferInvocationType(invocation, argumentTypes, method);"]}], "num": 39505}
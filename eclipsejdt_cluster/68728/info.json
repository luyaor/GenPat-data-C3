{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f4c39a5730251bd950a8bae2e62bc2b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3260cc55468af3a77bbe8c5a6fb38147", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "4020c98214bab208cbde4dc18107a41e64955fa0", "commitAfterChange": "ee8bf0fe9fa07676924688b12f84c7853a8f35be", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void resolve(Openable[] openables, HashSet localTypes, IProgressMonitor monitor)", "signatureAfterChange": " public void resolve(Openable[] openables, HashSet localTypes, IProgressMonitor monitor)", "diff": ["-\t\tBinaryTypeBinding focusBinaryBinding = null;", "+\t\tReferenceBinding focusBinaryBinding = null;", "+\t\t", "+\t\t// if no potential subtype was a real subtype of the binary focus type, no need to go further", "+\t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=54043)", "+\t\tif (focusBinaryBinding == null && focus != null && focus.isBinary()) {", "+\t\t\tchar[] fullyQualifiedName = focus.getFullyQualifiedName().toCharArray();", "+\t\t\tfocusBinaryBinding = this.lookupEnvironment.getCachedType(CharOperation.splitOn('.', fullyQualifiedName));", "+\t\t\tif (focusBinaryBinding == null) return;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aac4065086192895217fcd507ec311de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "diff": ["-\t\t\t\t\tif (disableExclusionPatterns && resolvedEntry.getExclusionPatterns() != null && resolvedEntry.getExclusionPatterns().length > 0) {", "+\t\t\t\t\tif (disableExclusionPatterns &&", "+\t\t\t\t\t        ((resolvedEntry.getInclusionPatterns() != null && resolvedEntry.getInclusionPatterns().length > 0) ", "+\t\t\t\t\t        || (resolvedEntry.getExclusionPatterns() != null && resolvedEntry.getExclusionPatterns().length > 0))) {", "-\t\t\t\t\t\tchar[][] exclusionPatterns;", "+\t\t\t\t\t\tchar[][] inclusionPatterns, exclusionPatterns;", "-\t\t\t\t\t\t\t\t&& !Util.isExcluded(entryPath.append(\"*\"), exclusionPatterns = ((ClasspathEntry)otherEntry).fullExclusionPatternChars())) { //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t&& !Util.isExcluded(entryPath.append(\"*\"), inclusionPatterns = ((ClasspathEntry)otherEntry).fullInclusionPatternChars(), exclusionPatterns = ((ClasspathEntry)otherEntry).fullExclusionPatternChars(), false)) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tif (Util.isExcluded(entryPath, exclusionPatterns)) {", "+\t\t\t\t\t\t\tif (Util.isExcluded(entryPath, inclusionPatterns, exclusionPatterns, false)) {", "+\t\t    char[][] inclusionPatterns = ((ClasspathEntry)entry).fullInclusionPatternChars();", "-\t\t\t\t    if (kind != IClasspathEntry.CPE_SOURCE || !Util.isExcluded(currentOutput, exclusionPatterns)) {", "+\t\t\t\t    if (kind != IClasspathEntry.CPE_SOURCE || !Util.isExcluded(currentOutput, inclusionPatterns, exclusionPatterns, true)) {"]}], "num": 68728}
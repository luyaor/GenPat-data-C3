{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94df508d6f992f4208cc08b23420413f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8be74d23075f9782e35f8384ca38246", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r public boolean initializeFromLookupEnvironment(LookupEnvironment env)", "signatureAfterChange": "\r public boolean initializeFromLookupEnvironment(LookupEnvironment env)", "diff": ["- */\r", "-public boolean initializeFromLookupEnvironment(LookupEnvironment env) {\r", "-\treturn \r", "-\t\tthis.leftPattern.initializeFromLookupEnvironment(env)\r", "-\t\t|| this.rightPattern.initializeFromLookupEnvironment(env);\r", "-}\r", "+ */\r", "+public boolean initializeFromLookupEnvironment(LookupEnvironment env) {\r", "+\r", "+\t// need to perform both operand initialization due to side-effects.\r", "+\tboolean leftInit = this.leftPattern.initializeFromLookupEnvironment(env);\r", "+\tboolean rightInit = this.rightPattern.initializeFromLookupEnvironment(env);\r", "+\treturn leftInit || rightInit;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e50038c27829ae26179adc8b4171e54b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "commitAfterChange": "d63e77a4f3e59d96dada738a65e836b17108f62c", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tprivate void verifyBindings(TagElement tagElement)", "signatureAfterChange": " \tprivate void verifyBindings(TagElement tagElement)", "diff": ["-\t\t\t\t\t\tassumeNotNull(this.prefix+\"\"+methodRef.getName()+\" binding was not found!\", methodRef.getName().resolveBinding());", "-\t\t\t\t\t\tverifyNameBindings(methodRef.getQualifier());", "+\t\t\t\t\t\tIBinding methNameBinding = methodRef.getName().resolveBinding();", "+\t\t\t\t\t\tName methodQualifier = methodRef.getQualifier();", "+\t\t\t\t\t\t// TODO (frederic) Replace the two following lines by commented block when bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=62650 will be fixed", "+\t\t\t\t\t\tassumeNotNull(this.prefix+\"\"+methodRef.getName()+\" binding was not found!\",methNameBinding);", "+\t\t\t\t\t\tverifyNameBindings(methodQualifier);", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\tif (methodQualifier == null) {", "+\t\t\t\t\t\t\tif (methNameBinding == null) {", "+\t\t\t\t\t\t\t\tchar firstChar = methodRef.getName().getIdentifier().charAt(0);", "+\t\t\t\t\t\t\t\tif (Character.isUpperCase(firstChar)) {", "+\t\t\t\t\t\t\t\t\t// assume that selector starting with uppercase is for constructor => signal that binding is null", "+\t\t\t\t\t\t\t\t\tSystem.out.println(this.prefix+\"Binding for selector of  '\"+methodRef+\"' is null.\");", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (methNameBinding.getName().equals(methodRef.getName().getIdentifier())) { // binding is not null only for constructor", "+\t\t\t\t\t\t\t\t\tassumeNotNull(this.prefix+\"\"+methodRef.getName()+\" binding was not found!\",methNameBinding);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tassumeNull(this.prefix+\"\"+methodRef.getName()+\" binding should be null!\", methNameBinding);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tSimpleName methodSimpleType = null;", "+\t\t\t\t\t\t\tif (methodQualifier.isQualifiedName()) {", "+\t\t\t\t\t\t\t\tmethodSimpleType = ((QualifiedName)methodQualifier).getName();", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tmethodSimpleType = (SimpleName) methodQualifier;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (methodSimpleType.getIdentifier().equals(methodRef.getName().getIdentifier())) { // binding is not null only for constructor", "+\t\t\t\t\t\t\t\tassumeNotNull(this.prefix+\"\"+methodRef.getName()+\" binding was not found!\",methNameBinding);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tassumeNull(this.prefix+\"\"+methodRef.getName()+\" binding should be null!\", methNameBinding);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tverifyNameBindings(methodRef.getQualifier());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t*/"]}], "num": 35420}
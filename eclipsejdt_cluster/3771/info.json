{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1443226cd2b3d4f8be494931fc9dd05e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e876131798bf697e4e01b49a695c78c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "fa04bcc7aeac1403aeb17877212985395c1541ca", "commitAfterChange": "3e7e5500dc18d43a1ac0267b7313ca1e65635b34", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public char[][][] collect() throws JavaModelException", "signatureAfterChange": " public char[][][] collect() throws JavaModelException", "diff": ["-\t\t\t\tCompilationUnitDeclaration parsedUnit = buildBindings(unit);", "-\t\t\t\tif (parsedUnit != null)", "-\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);", "+\t\t\t\tSourceType sourceType = (SourceType) this.type;", "+\t\t\t\tboolean isTopLevelOrMember = sourceType.getOuterMostLocalContext() == null;", "+\t\t\t\tCompilationUnitDeclaration parsedUnit = buildBindings(unit, isTopLevelOrMember);", "+\t\t\t\tif (parsedUnit != null) {", "+\t\t\t\t\tTypeDeclaration typeDecl = new ASTNodeFinder(parsedUnit).findType(this.type);", "+\t\t\t\t\tif (typeDecl != null && typeDecl.binding != null) ", "+\t\t\t\t\t\tcollectSuperTypeNames(typeDecl.binding);", "+\t\t\t\t}", "-\t\t\t\t\tCompilationUnitDeclaration parsedUnit = buildBindings(unit);", "+\t\t\t\t\tCompilationUnitDeclaration parsedUnit = buildBindings(unit, true /*only toplevel and member types are visible to the focus type*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f266d8d229353045e205b258a1110d53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tprivate boolean isOnClasspath(IPath path)", "signatureAfterChange": " \tpublic boolean isOnClasspath(IResource resource)", "diff": ["-\tprivate boolean isOnClasspath(IPath path) {", "+\t */", "+\tpublic boolean isOnClasspath(IResource resource) {", "+\t\tIPath exactPath = resource.getFullPath();", "+\t\tIPath path = exactPath;", "+\t\t", "+\t\t// ensure that folders are only excluded if all of their children are excluded", "+\t\tboolean isFolderPath = resource.getType() == IResource.FOLDER;", "+\t\t", "-\t\t\tif (entry.getPath().isPrefixOf(path) ", "-\t\t\t\t\t&& !Util.isExcluded(path, ((ClasspathEntry)entry).fullExclusionPatternChars())) {", "+\t\t\tIPath entryPath = entry.getPath();", "+\t\t\tif (entryPath.equals(exactPath)) { // package fragment roots must match exactly entry pathes (no exclusion there)", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tif (entryPath.isPrefixOf(path) ", "+\t\t\t\t\t&& !Util.isExcluded(path, ((ClasspathEntry)entry).fullInclusionPatternChars(), ((ClasspathEntry)entry).fullExclusionPatternChars(), isFolderPath)) {", "-\t}"]}], "num": 3771}
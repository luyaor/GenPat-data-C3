{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a2c8a5cfec9f1bd3c7e9b1489b387bf", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30515f5f421532442df223fe2ee456fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic IBinaryType getBinaryInfo(org.eclipse.jdt.internal.core.ClassFile classFile, IResource resource) throws CoreException", "signatureAfterChange": " public IBinaryType getBinaryInfo(ClassFile classFile, IResource resource) throws CoreException", "diff": ["-\t}", "-\tpublic IBinaryType getBinaryInfo(org.eclipse.jdt.internal.core.ClassFile classFile, IResource resource) throws CoreException {", "-\t\tBinaryType binaryType = (BinaryType)classFile.getType();", "-\t\tif (classFile.isOpen()) {", "-\t\t\t// reuse the info from the java model cache", "-\t\t\treturn (IBinaryType)binaryType.getElementInfo();", "-\t\t} else {", "-\t\t\t// create a temporary info", "-\t\t\tIBinaryType info;", "-\t\t\ttry {", "-\t\t\t\tIJavaElement pkg = classFile.getParent();", "-\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)pkg.getParent();", "-\t\t\t\tif (root.isArchive()) {", "-\t\t\t\t\t// class file in a jar", "-\t\t\t\t\tString pkgPath = pkg.getElementName().replace('.', '/');", "-\t\t\t\t\tString classFilePath = ", "-\t\t\t\t\t\t(pkgPath.length() > 0) ?", "-\t\t\t\t\t\t\tpkgPath + \"/\" + classFile.getElementName() : //$NON-NLS-1$", "-\t\t\t\t\t\t\tclassFile.getElementName();", "-\t\t\t\t\tZipFile zipFile = null;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tzipFile = ((JarPackageFragmentRoot)root).getJar();", "-\t\t\t\t\t\tinfo = org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.read(", "-\t\t\t\t\t\t\tzipFile,", "-\t\t\t\t\t\t\tclassFilePath);", "-\t\t\t\t\t} finally {", "-\t\t\t\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(zipFile);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// class file in a directory", "-\t\t\t\t\tString osPath = resource.getLocation().toOSString();", "-\t\t\t\t\tinfo = org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.read(osPath);", "-\t\t\t\t}", "-\t\t\t\treturn info;", "-\t\t\t} catch (org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException e) {", "-\t\t\t\t//e.printStackTrace();", "-\t\t\t\treturn null;", "-\t\t\t} catch (java.io.IOException e) {", "-\t\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "-\t\t\t}", "-\t\t}", "-\t}", "+}", "+public IBinaryType getBinaryInfo(ClassFile classFile, IResource resource) throws CoreException {", "+\tBinaryType binaryType = (BinaryType) classFile.getType();", "+\tif (classFile.isOpen())", "+\t\treturn (IBinaryType) binaryType.getElementInfo(); // reuse the info from the java model cache", "+", "+\t// create a temporary info", "+\tIBinaryType info;", "+\ttry {", "+\t\tIJavaElement pkg = classFile.getParent();", "+\t\tPackageFragmentRoot root = (PackageFragmentRoot) pkg.getParent();", "+\t\tif (root.isArchive()) {", "+\t\t\t// class file in a jar", "+\t\t\tString pkgPath = pkg.getElementName().replace('.', '/');", "+\t\t\tString classFilePath = pkgPath.length() > 0", "+\t\t\t\t? pkgPath + \"/\" + classFile.getElementName() //$NON-NLS-1$", "+\t\t\t\t: classFile.getElementName();", "+\t\t\tZipFile zipFile = null;", "+\t\t\ttry {", "+\t\t\t\tzipFile = ((JarPackageFragmentRoot) root).getJar();", "+\t\t\t\tinfo = ClassFileReader.read(zipFile, classFilePath);", "+\t\t\t} finally {", "+\t\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(zipFile);", "+\t\t\t}", "+\t\t} else {", "+\t\t\t// class file in a directory", "+\t\t\tString osPath = resource.getLocation().toOSString();", "+\t\t\tinfo = ClassFileReader.read(osPath);", "+\t\t}", "+\t\treturn info;", "+\t} catch (ClassFormatException e) {", "+\t\t//e.printStackTrace();", "+\t\treturn null;", "+\t} catch (java.io.IOException e) {", "+\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c3555bf7d56b5ce0bb521b6c4e808e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingOpenable.java", "commitBeforeChange": "be89ab2e0ec1e398e3b0603a492d22c9815a6eef", "commitAfterChange": "0460b2dc122bab8976f113fd5dfefdda9aaa1649", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r private void locateMatchesInClassFile() throws CoreException, JavaModelException", "signatureAfterChange": "\r private void locateMatchesInClassFile() throws CoreException, JavaModelException", "diff": ["-\tBinaryType binaryType = (BinaryType)classFile.getType();\r", "-\tIBinaryType info;\r", "-\tif (classFile.isOpen()) {\r", "-\t\t// reuse the info from the java model cache\r", "-\t\tinfo = (IBinaryType)binaryType.getRawInfo();\r", "-\t} else {\r", "-\t\t// create a temporary info\r", "-\t\ttry {\r", "-\t\t\tIJavaElement pkg = classFile.getParent();\r", "-\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)pkg.getParent();\r", "-\t\t\tif (root.isArchive()) {\r", "-\t\t\t\t// class file in a jar\r", "-\t\t\t\tString pkgPath = pkg.getElementName().replace('.', '/');\r", "-\t\t\t\tString classFilePath = \r", "-\t\t\t\t\t(pkgPath.length() > 0) ?\r", "-\t\t\t\t\t\tpkgPath + \"/\" + classFile.getElementName() : //$NON-NLS-1$\r", "-\t\t\t\t\t\tclassFile.getElementName();\r", "-\t\t\t\tZipFile zipFile = null;\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tzipFile = ((JarPackageFragmentRoot)root).getJar();\r", "-\t\t\t\t\tinfo = org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.read(\r", "-\t\t\t\t\t\tzipFile,\r", "-\t\t\t\t\t\tclassFilePath);\r", "-\t\t\t\t} finally {\r", "-\t\t\t\t\tif (zipFile != null) {\r", "-\t\t\t\t\t\ttry {\r", "-\t\t\t\t\t\t\tzipFile.close();\r", "-\t\t\t\t\t\t} catch (IOException e) {\r", "-\t\t\t\t\t\t\t// ignore \r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t} else {\r", "-\t\t\t\t// class file in a directory\r", "-\t\t\t\tString osPath = this.resource.getFullPath().toOSString();\r", "-\t\t\t\tinfo = org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.read(osPath);\r", "-\t\t\t}\r", "-\t\t} catch (org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException e) {\r", "-\t\t\t//e.printStackTrace();\r", "-\t\t\treturn;\r", "-\t\t} catch (java.io.IOException e) {\r", "-\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);\r", "-\t\t}\r", "-\t}\r", "+\tIBinaryType info = this.locator.getBinaryInfo(classFile, this.resource);\r", "+\tBinaryType binaryType = (BinaryType)classFile.getType();\r"]}], "num": 15080}
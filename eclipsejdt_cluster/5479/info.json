{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9c9ce4215082172921ce22fee4cc17c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32eb0f23130b6e8436be0243d7f512f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 83, "signatureBeforeChange": "  \tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration)", "signatureAfterChange": "  \tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration)", "diff": ["-\t\tif (typeDeclaration instanceof EnumConstant) {", "+\t\tif (typeDeclaration.getKind() == IGenericType.ENUM) {", "-\t\t\t\treturn convert((EnumConstant) typeDeclaration);", "-\t\t\t}", "-\t\t}", "-\t\tif (typeDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.EnumDeclaration) {", "-\t\t\tif (this.ast.apiLevel == AST.JLS2) {", "-\t\t\t\treturn null;", "-\t\t\t} else {", "-\t\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.EnumDeclaration) typeDeclaration);", "+\t\t\t\treturn convertToEnumDeclaration(typeDeclaration);", "-\t\ttypeDecl.setInterface(typeDeclaration.isInterface());", "+\t\ttypeDecl.setInterface(typeDeclaration.getKind() == IGenericType.INTERFACE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5da44761a7f4dc69c6a8bf70b2041f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AnnotationSingleNameReference.java", "commitBeforeChange": "0d08aa661af23c77dec180adb0e2d54bc237084f", "commitAfterChange": "5eb7cf53adf1de05482e3d2eb14b8fd35c6f4286", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope scope)", "diff": ["-\t\tBinding existingVariable = scope.getBinding(token, BindingIds.VARIABLE, this, true /*resolve*/);", "-\t\tif (existingVariable != null && existingVariable.isValidBinding()){", "-\t\t\tif (existingVariable instanceof VariableBinding) {", "-\t\t\t\tif (existingVariable instanceof LocalVariableBinding) {", "-\t\t\t\t\tLocalVariableBinding local = (LocalVariableBinding) existingVariable;", "-\t\t\t\t\tif (local.isArgument) {", "-\t\t\t\t\t\tthis.binding = local;", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} ", "+\t\tLocalVariableBinding variableBinding = scope.findVariable(token);", "+\t\tif (variableBinding != null && variableBinding.isValidBinding() && variableBinding.isArgument) {", "+\t\t\tthis.binding = variableBinding;", "+\t\t\treturn;"]}], "num": 5479}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f2705a4a9bb6e15e6b0bf82fa8a1c7bb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a5e422254ba7e0e66d008b3d18dc721", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "1585d95aacd546d0fef8e25ddee2f5a6f64f7c62", "commitAfterChange": "bcf6d39cea27ed7bf3bf85709bd7e60dc5605058", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": " public void generateConstant(Constant constant, int implicitConversionCode)", "signatureAfterChange": " public void generateConstant(Constant constant, int implicitConversionCode)", "diff": ["-\tint targetTypeID = implicitConversionCode >> 4;", "-\tswitch (targetTypeID) {", "-\t\tcase T_boolean :", "-\t\t\tgenerateInlinedValue(constant.booleanValue());", "-\t\t\tbreak;", "-\t\tcase T_char :", "-\t\t\tgenerateInlinedValue(constant.charValue());", "-\t\t\tbreak;", "-\t\tcase T_byte :", "-\t\t\tgenerateInlinedValue(constant.byteValue());", "-\t\t\tbreak;", "-\t\tcase T_short :", "-\t\t\tgenerateInlinedValue(constant.shortValue());", "-\t\t\tbreak;", "-\t\tcase T_int :", "-\t\t\tgenerateInlinedValue(constant.intValue());", "-\t\t\tbreak;", "-\t\tcase T_long :", "-\t\t\tgenerateInlinedValue(constant.longValue());", "-\t\t\tbreak;", "-\t\tcase T_float :", "-\t\t\tgenerateInlinedValue(constant.floatValue());", "-\t\t\tbreak;", "-\t\tcase T_double :", "-\t\t\tgenerateInlinedValue(constant.doubleValue());", "-\t\t\tbreak;", "-\t\tdefault : //String or Object", "-\t\t\tldc(constant.stringValue());", "+\tif ((implicitConversionCode & BOXING) != 0) {", "+\t\t// need to box the constant", "+\t\tfinal int typeId = implicitConversionCode & IMPLICIT_CONVERSION_MASK;", "+\t\tswitch (typeId) {", "+\t\t\tcase T_JavaLangBoolean :", "+\t\t\t\tgenerateInlinedValue(constant.booleanValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_JavaLangCharacter :", "+\t\t\t\tgenerateInlinedValue(constant.charValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_JavaLangByte :", "+\t\t\t\tgenerateInlinedValue(constant.byteValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_JavaLangShort :", "+\t\t\t\tgenerateInlinedValue(constant.shortValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_JavaLangInteger :", "+\t\t\t\tgenerateInlinedValue(constant.intValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_JavaLangLong :", "+\t\t\t\tgenerateInlinedValue(constant.longValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_JavaLangFloat :", "+\t\t\t\tgenerateInlinedValue(constant.floatValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_JavaLangDouble :", "+\t\t\t\tgenerateInlinedValue(constant.doubleValue());", "+\t\t\t\tbreak;", "+\t\t}", "+\t\t// need boxing", "+\t\tgenerateBoxingConversion(typeId);", "+\t\treturn;", "+\t}", "+\t", "+\t// FIXME (olivier) how can this ever occur ? unboxing a primitive type constant ?!?", "+\tif ((implicitConversionCode & UNBOXING) != 0) {", "+\t\t// need to unbox the constant", "+\t\tfinal int typeId = implicitConversionCode & COMPILE_TYPE_MASK;", "+\t\tswitch (typeId) {", "+\t\t\tcase T_boolean :", "+\t\t\t\tgenerateInlinedValue(constant.booleanValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_char :", "+\t\t\t\tgenerateInlinedValue(constant.charValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_byte :", "+\t\t\t\tgenerateInlinedValue(constant.byteValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_short :", "+\t\t\t\tgenerateInlinedValue(constant.shortValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_int :", "+\t\t\t\tgenerateInlinedValue(constant.intValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_long :", "+\t\t\t\tgenerateInlinedValue(constant.longValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_float :", "+\t\t\t\tgenerateInlinedValue(constant.floatValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_double :", "+\t\t\t\tgenerateInlinedValue(constant.doubleValue());", "+\t\t\t\tbreak;", "+\t\t}", "+\t\t// need unboxing", "+\t\tgenerateUnboxingConversion(typeId);", "+\t}", "+\tint targetTypeID = (implicitConversionCode & IMPLICIT_CONVERSION_MASK) >> 4;", "+\tif (targetTypeID != 0) {", "+\t\tswitch (targetTypeID) {", "+\t\t\tcase T_boolean :", "+\t\t\t\tgenerateInlinedValue(constant.booleanValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_char :", "+\t\t\t\tgenerateInlinedValue(constant.charValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_byte :", "+\t\t\t\tgenerateInlinedValue(constant.byteValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_short :", "+\t\t\t\tgenerateInlinedValue(constant.shortValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_int :", "+\t\t\t\tgenerateInlinedValue(constant.intValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_long :", "+\t\t\t\tgenerateInlinedValue(constant.longValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_float :", "+\t\t\t\tgenerateInlinedValue(constant.floatValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_double :", "+\t\t\t\tgenerateInlinedValue(constant.doubleValue());", "+\t\t\t\tbreak;", "+\t\t\tcase T_String :", "+\t\t\t\tldc(constant.stringValue());", "+\t\t}", "+\t} else {", "+\t\tldc(constant.stringValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be6d4d443f2d23abef2a6efa407b4bf9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/Constant.java", "commitBeforeChange": "3c07df5b27f3cc9bb0f32fc7f0a08746454bdc9d", "commitAfterChange": "6de7ced9858f2246a9379efd0dd8834bcae6044c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   \tpublic static final Constant computeConstantOperation(Constant left, int leftId, int operator, Constant right, int rightId)", "signatureAfterChange": "   \tpublic static final Constant computeConstantOperation(Constant left, int leftId, int operator, Constant right, int rightId)", "diff": ["-\t\t\tcase AND\t\t: return computeConstantOperationAND\t\t(left,leftId,operator,right,rightId);", "-\t\t\tcase AND_AND\t: return computeConstantOperationAND_AND\t(left,leftId,operator,right,rightId);", "-\t\t\tcase DIVIDE \t: return computeConstantOperationDIVIDE\t\t(left,leftId,operator,right,rightId);", "-\t\t\tcase GREATER\t: return computeConstantOperationGREATER\t(left,leftId,operator,right,rightId);", "-\t\t\tcase GREATER_EQUAL\t: return computeConstantOperationGREATER_EQUAL(left,leftId,operator,right,rightId);", "-\t\t\tcase LEFT_SHIFT\t: return computeConstantOperationLEFT_SHIFT\t(left,leftId,operator,right,rightId);", "-\t\t\tcase LESS\t\t: return computeConstantOperationLESS\t\t(left,leftId,operator,right,rightId);", "-\t\t\tcase LESS_EQUAL\t: return computeConstantOperationLESS_EQUAL\t(left,leftId,operator,right,rightId);", "-\t\t\tcase MINUS\t\t: return computeConstantOperationMINUS\t\t(left,leftId,operator,right,rightId);", "-\t\t\tcase MULTIPLY\t: return computeConstantOperationMULTIPLY\t(left,leftId,operator,right,rightId);", "-\t\t\tcase OR\t\t\t: return computeConstantOperationOR\t\t\t(left,leftId,operator,right,rightId);", "-\t\t\tcase OR_OR\t\t: return computeConstantOperationOR_OR\t\t(left,leftId,operator,right,rightId);", "-\t\t\tcase PLUS\t\t: return computeConstantOperationPLUS\t\t(left,leftId,operator,right,rightId);", "-\t\t\tcase REMAINDER\t: return computeConstantOperationREMAINDER\t(left,leftId,operator,right,rightId);", "-\t\t\tcase RIGHT_SHIFT: return computeConstantOperationRIGHT_SHIFT(left,leftId,operator,right,rightId);", "-\t\t\tcase UNSIGNED_RIGHT_SHIFT: return computeConstantOperationUNSIGNED_RIGHT_SHIFT(left,leftId,operator,right,rightId);", "-\t\t\tcase XOR\t\t: return computeConstantOperationXOR\t\t(left,leftId,operator,right,rightId);", "+\t\t\tcase AND\t\t: return computeConstantOperationAND\t\t(left,leftId,right,rightId);", "+\t\t\tcase AND_AND\t: return computeConstantOperationAND_AND\t(left,leftId,right,rightId);", "+\t\t\tcase DIVIDE \t: return computeConstantOperationDIVIDE\t\t(left,leftId,right,rightId);", "+\t\t\tcase GREATER\t: return computeConstantOperationGREATER\t(left,leftId,right,rightId);", "+\t\t\tcase GREATER_EQUAL\t: return computeConstantOperationGREATER_EQUAL(left,leftId,right,rightId);", "+\t\t\tcase LEFT_SHIFT\t: return computeConstantOperationLEFT_SHIFT\t(left,leftId,right,rightId);", "+\t\t\tcase LESS\t\t: return computeConstantOperationLESS\t\t(left,leftId,right,rightId);", "+\t\t\tcase LESS_EQUAL\t: return computeConstantOperationLESS_EQUAL\t(left,leftId,right,rightId);", "+\t\t\tcase MINUS\t\t: return computeConstantOperationMINUS\t\t(left,leftId,right,rightId);", "+\t\t\tcase MULTIPLY\t: return computeConstantOperationMULTIPLY\t(left,leftId,right,rightId);", "+\t\t\tcase OR\t\t\t: return computeConstantOperationOR\t\t\t(left,leftId,right,rightId);", "+\t\t\tcase OR_OR\t\t: return computeConstantOperationOR_OR\t\t(left,leftId,right,rightId);", "+\t\t\tcase PLUS\t\t: return computeConstantOperationPLUS\t\t(left,leftId,right,rightId);", "+\t\t\tcase REMAINDER\t: return computeConstantOperationREMAINDER\t(left,leftId,right,rightId);", "+\t\t\tcase RIGHT_SHIFT: return computeConstantOperationRIGHT_SHIFT(left,leftId,right,rightId);", "+\t\t\tcase UNSIGNED_RIGHT_SHIFT: return computeConstantOperationUNSIGNED_RIGHT_SHIFT(left,leftId,right,rightId);", "+\t\t\tcase XOR\t\t: return computeConstantOperationXOR\t\t(left,leftId,right,rightId);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebf569a492dc77cdc73a1e370d23a0a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/Constant.java", "commitBeforeChange": "8970b012a4c030df2da75433f5a255c033afe448", "commitAfterChange": "c6ea2a72647dce31af35c91712fb9d7b45a7c96d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t\t \tpublic static final Constant computeConstantOperationPLUS(Constant left, int leftId, Constant right, int rightId)", "signatureAfterChange": " \t\t \tpublic static final Constant computeConstantOperationPLUS(Constant left, int leftId, Constant right, int rightId)", "diff": ["-\t\t\t\t\tcase T_char :\treturn Constant.fromValue(left.stringValue() + right.stringValue());", "-\t\t\t\t\tcase T_float:\treturn Constant.fromValue(left.stringValue() + right.stringValue());", "-\t\t\t\t\tcase T_double:\treturn Constant.fromValue(left.stringValue() + right.stringValue());", "-\t\t\t\t\tcase T_byte:\treturn Constant.fromValue(left.stringValue() + right.stringValue());", "-\t\t\t\t\tcase T_short:\treturn Constant.fromValue(left.stringValue() + right.stringValue());", "-\t\t\t\t\tcase T_int:\t\treturn Constant.fromValue(left.stringValue() + right.stringValue());", "-\t\t\t\t\tcase T_long:\treturn Constant.fromValue(left.stringValue() + right.stringValue());", "+\t\t\t\t\tcase T_char :\treturn Constant.fromValue(left.stringValue() + String.valueOf(right.charValue()));", "+\t\t\t\t\tcase T_float:\treturn Constant.fromValue(left.stringValue() + String.valueOf(right.floatValue()));", "+\t\t\t\t\tcase T_double:\treturn Constant.fromValue(left.stringValue() + String.valueOf(right.doubleValue()));", "+\t\t\t\t\tcase T_byte:\treturn Constant.fromValue(left.stringValue() + String.valueOf(right.byteValue()));", "+\t\t\t\t\tcase T_short:\treturn Constant.fromValue(left.stringValue() + String.valueOf(right.shortValue()));", "+\t\t\t\t\tcase T_int:\t\treturn Constant.fromValue(left.stringValue() + String.valueOf(right.intValue()));", "+\t\t\t\t\tcase T_long:\treturn Constant.fromValue(left.stringValue() + String.valueOf(right.longValue()));", "-\t\t\t\t\tcase T_boolean:\treturn Constant.fromValue(left.stringValue() + right.stringValue());", "+\t\t\t\t\tcase T_boolean:\treturn Constant.fromValue(left.stringValue() + right.booleanValue());", "-\t\t\tcase T_null :", "-\t\t\t\tswitch (rightId){", "-\t\t\t\t\tcase T_char :\treturn Constant.fromValue(left.stringValue() + right.stringValue());", "-\t\t\t\t\tcase T_float:\treturn Constant.fromValue(left.stringValue() + right.stringValue());", "-\t\t\t\t\tcase T_double:\treturn Constant.fromValue(left.stringValue() + right.stringValue());", "-\t\t\t\t\tcase T_byte:\treturn Constant.fromValue(left.stringValue() + right.stringValue());", "-\t\t\t\t\tcase T_short:\treturn Constant.fromValue(left.stringValue() + right.stringValue());", "-\t\t\t\t\tcase T_int:\t\treturn Constant.fromValue(left.stringValue() + right.stringValue());", "-\t\t\t\t\tcase T_long:\treturn Constant.fromValue(left.stringValue() + right.stringValue());", "-\t\t\t\t\tcase T_JavaLangString:\treturn Constant.fromValue(left.stringValue() + right.stringValue()); ", "-\t\t\t\t}", "-\t\t\t\t", "+//\t\t\tcase T_null :", "+//\t\t\t\tswitch (rightId){", "+//\t\t\t\t\tcase T_char :\treturn Constant.fromValue(left.stringValue() + String.valueOf(right.charValue()));", "+//\t\t\t\t\tcase T_float:\treturn Constant.fromValue(left.stringValue() + String.valueOf(right.floatValue()));", "+//\t\t\t\t\tcase T_double:\treturn Constant.fromValue(left.stringValue() + String.valueOf(right.doubleValue()));", "+//\t\t\t\t\tcase T_byte:\treturn Constant.fromValue(left.stringValue() + String.valueOf(right.byteValue()));", "+//\t\t\t\t\tcase T_short:\treturn Constant.fromValue(left.stringValue() + String.valueOf(right.shortValue()));", "+//\t\t\t\t\tcase T_int:\t\treturn Constant.fromValue(left.stringValue() + String.valueOf(right.intValue()));", "+//\t\t\t\t\tcase T_long:\treturn Constant.fromValue(left.stringValue() + String.valueOf(right.longValue()));", "+//\t\t\t\t\tcase T_JavaLangString:\treturn Constant.fromValue(left.stringValue() + right.stringValue()); ", "+//\t\t\t\t\tcase T_boolean:\treturn Constant.fromValue(left.stringValue() + right.booleanValue());", "+//\t\t\t\t}\t\t\t\t"]}], "num": 28894}
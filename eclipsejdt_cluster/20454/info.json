{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fbd7870c2a303a9d97fea66607440744", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "254a9fdbe19102c8f9382506712dc751", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public TypeReferencePattern(char[] qualification, char[] simpleName, char[][] typeNames, boolean fromJavaElement, int[] wildcards, int matchRule)", "signatureAfterChange": " public TypeReferencePattern(char[] qualification, char[] simpleName, char[] signature, boolean fromJavaElement, int matchRule)", "diff": ["-public TypeReferencePattern(char[] qualification, char[] simpleName, char[][] typeNames, boolean fromJavaElement, int[] wildcards, int matchRule) {", "+public TypeReferencePattern(char[] qualification, char[] simpleName, char[] signature, boolean fromJavaElement, int matchRule) {", "-\tif (typeNames != null) {", "-\t\t// store type arguments as is even if patter is not case sensitive", "-\t\tthis.typeNames= typeNames;", "-\t\tthis.typeBindings = new TypeBinding[typeNames.length];", "+\tif (signature != null) {", "+\t\tthis.typeSignature = signature;", "+\t\tCharOperation.replace(this.typeSignature, '/', '.');", "-\tthis.wildcards = wildcards;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f80bb059e608e4d2c0c99fc2198e1b4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldPattern.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public FieldPattern( \tboolean findDeclarations, \tboolean readAccess, \tboolean writeAccess, \tchar[] name,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] typeQualification,  \tchar[] typeSimpleName, \tchar[][] typeNames, \tint[] wildcards, \tint matchRule)", "signatureAfterChange": " public FieldPattern( \tboolean findDeclarations, \tboolean readAccess, \tboolean writeAccess, \tchar[] name,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] typeQualification,  \tchar[] typeSimpleName, \tchar[] signature, \tint matchRule)", "diff": ["-\tchar[][] typeNames,", "-\tint[] wildcards,", "+\tchar[] signature,", "-\tif (typeNames != null) {", "-\t\tthis.typeNames= typeNames;", "-\t\tthis.typeBindings = new TypeBinding[typeNames.length];", "+\tif (signature != null) {", "+\t\tthis.typeSignature = signature;", "+\t\tCharOperation.replace(this.typeSignature, '/', '.');", "-\tthis.wildcards = wildcards;"]}], "num": 20454}
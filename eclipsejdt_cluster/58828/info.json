{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a37bf3d65f6084efa6990032e77dd86", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bcecf0dd10eb214b732ae5a2bcf7de1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "9201dfdd65456845c29d6dc3323aadc8322279d6", "commitAfterChange": "c8ca8bc0ed355b1996bc738eb2798ac55ee50894", "methodNumberBeforeChange": 288, "methodNumberAfterChange": 289, "signatureBeforeChange": " protected void consumeLambdaExpression()", "signatureAfterChange": " protected void consumeLambdaExpression()", "diff": ["-protected void consumeLambdaExpression() {", "-\t", "-\t// LambdaExpression ::= LambdaParameters '->' LambdaBody", "-\tthis.astLengthPtr--; \t// pop length for LambdaBody (always 1)", "-\tStatement body = (Statement) this.astStack[this.astPtr--];", "-\tif (body instanceof Block) {", "-\t\tthis.nestedType--; \t// matching NestedType in \"LambdaBody ::= NestedType NestedMethod  '{' BlockStatementsopt '}'\"", "-\t\tthis.intPtr--; \t\t// position after '{' pushed during consumeNestedMethod()", "-\t\tif (this.options.ignoreMethodBodies) {", "-\t\t\tbody = new Block(0);", "-\t\t}", "-\t}", "-\tLambdaExpression lexp = new LambdaExpression(this.compilationUnit.compilationResult, arguments, body, false);", "-\tthis.intPtr--;  // ')' position, discard for now.", "-\tlexp.sourceEnd = body.sourceEnd;", "+}", "+protected void consumeLambdaExpression() {", "+\t", "+\t// LambdaExpression ::= LambdaHeader LambdaBody", "+", "+\tthis.astLengthPtr--; \t// pop length for LambdaBody (always 1)", "+\tStatement body = (Statement) this.astStack[this.astPtr--];", "+\tif (body instanceof Block) {", "+\t\tthis.nestedType--; \t// matching NestedType in \"LambdaBody ::= NestedType NestedMethod  '{' BlockStatementsopt '}'\"", "+\t\tthis.intPtr--; \t\t// position after '{' pushed during consumeNestedMethod()", "+\t\tif (this.options.ignoreMethodBodies) {", "+\t\t\tbody = new Block(0);", "+\t\t}", "+\t}", "+", "+\tLambdaExpression lexp = (LambdaExpression) this.astStack[this.astPtr--];", "+\tthis.astLengthPtr--;", "+\tlexp.body = body;", "+\tlexp.sourceEnd = body.sourceEnd;", "+\t", "-\tpushOnExpressionStack(lexp);", "-\tthis.listLength = 0; // reset this.listLength after having read all parameters"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3dcb36becaf41ee918c3ef9dfc0576d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMember.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private IAnnotation getAnnotation(IBinaryAnnotation binaryAnnotation)", "signatureAfterChange": " private IAnnotation getAnnotation(char[][] annotationName)", "diff": ["-private IAnnotation getAnnotation(IBinaryAnnotation binaryAnnotation) {", "-\tIBinaryElementValuePair[] binaryElementValuePairs = binaryAnnotation.getElementValuePairs();", "-\tint pairsLength = binaryElementValuePairs.length;", "-\tfinal IMemberValuePair[] members;", "-\tif (pairsLength == 0) {", "-\t\tmembers = Annotation.NO_MEMBER_VALUE_PAIRS;", "-\t} else {", "-\t\tmembers = new IMemberValuePair[pairsLength];", "-\t\tfor (int i = 0; i < pairsLength; i++) {", "-\t\t\tIBinaryElementValuePair binaryElementValuePair = binaryElementValuePairs[i];", "-\t\t\tMemberValuePair memberValuePair = new MemberValuePair(new String(binaryElementValuePair.getName()));", "-\t\t\tmemberValuePair.value = getMemberValue(memberValuePair, binaryElementValuePair.getValue());", "-\t\t\tmembers[i] = memberValuePair;", "-\t\t}", "-\t}", "-\tchar[] typeName = org.eclipse.jdt.core.Signature.toCharArray(CharOperation.replaceOnCopy(binaryAnnotation.getTypeName(), '/', '.'));", "-\treturn new Annotation(this, new String(typeName)) {", "-\t\tpublic IMemberValuePair[] getMemberValuePairs() throws JavaModelException {", "-\t\t\treturn members;", "-\t\t}", "-\t};", "+private IAnnotation getAnnotation(char[][] annotationName) {", "+\treturn new Annotation(this, new String(CharOperation.concatWith(annotationName, '.')));"]}], "num": 58828}
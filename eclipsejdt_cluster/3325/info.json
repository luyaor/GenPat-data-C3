{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ea30b21b7c68e85c89917ea48bfe27e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44fe6e94ff6b18b730369a5ad078be43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "df84bc0b0e74080458b4e3f35c6e77ec6fed2587", "commitAfterChange": "2bb013de372e754bf58118fac6dab82d5a5c9625", "methodNumberBeforeChange": 210, "methodNumberAfterChange": 210, "signatureBeforeChange": " protected void consumeLocalVariableDeclarationStatement()", "signatureAfterChange": " protected void consumeLocalVariableDeclarationStatement()", "diff": ["+\t", "+\tint variableDeclaratorsCounter = this.astLengthStack[this.astLengthPtr];", "+\tif (variableDeclaratorsCounter == 1) {", "+\t\tLocalDeclaration localDeclaration = (LocalDeclaration) this.astStack[this.astPtr];", "+\t\tif (localDeclaration.isRecoveredFromLoneIdentifier()) {", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=430336, [1.8][compiler] Bad syntax error recovery: Lonely identifier should be variable name, not type", "+\t\t\t// Mutate foo $missing; into foo = $missing$; ", "+\t\t\tExpression left;", "+\t\t\tif (localDeclaration.type instanceof QualifiedTypeReference) {", "+\t\t\t\tQualifiedTypeReference qtr = (QualifiedTypeReference) localDeclaration.type;", "+\t\t\t\tleft = new QualifiedNameReference(qtr.tokens, qtr.sourcePositions, 0, 0);", "+\t\t\t} else {", "+\t\t\t\tleft = new SingleNameReference(localDeclaration.type.getLastToken(), 0L);", "+\t\t\t}", "+\t\t\tleft.sourceStart = localDeclaration.type.sourceStart;", "+\t\t\tleft.sourceEnd = localDeclaration.type.sourceEnd;", "+\t\t\t", "+\t\t\tExpression right = new SingleNameReference(localDeclaration.name, 0L);", "+\t\t\tright.sourceStart = localDeclaration.sourceStart;", "+\t\t\tright.sourceEnd = localDeclaration.sourceEnd;", "+\t\t\t", "+\t\t\tAssignment assignment = new Assignment(left, right, 0);", "+\t\t\tint end = this.endStatementPosition;", "+\t\t\tassignment.sourceEnd = (end == localDeclaration.sourceEnd) ? ++end : end; ", "+\t\t\tassignment.statementEnd = end;", "+\t\t\tthis.astStack[this.astPtr] = assignment;", "+\t\t\t", "+\t\t\t// also massage recovery scanner data.", "+\t\t\tif (this.recoveryScanner != null) {", "+\t\t\t\tRecoveryScannerData data = this.recoveryScanner.getData();", "+\t\t\t\tint position = data.insertedTokensPtr;", "+\t\t\t\twhile (position > 0) {", "+\t\t\t\t\tif (data.insertedTokensPosition[position] != data.insertedTokensPosition[position - 1])", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tposition--;", "+\t\t\t\t}", "+\t\t\t\tthis.recoveryScanner.insertTokenAhead(TerminalTokens.TokenNameEQUAL, position);", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (this.currentElement != null) {", "+\t\t\t\tthis.lastCheckPoint = assignment.sourceEnd + 1;", "+\t\t\t\tthis.currentElement = this.currentElement.add(assignment, 0);", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t}", "-\tint variableDeclaratorsCounter = this.astLengthStack[this.astLengthPtr];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a660c8e21285e62152f784b146497628", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "1b98b39107e931dc0893df1da7a410cad5cc4745", "commitAfterChange": "9635fd418f2d5b55fe3d3dc4ccb7797a5daf3a53", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void attachOrphanCompletionNode()", "signatureAfterChange": " protected void attachOrphanCompletionNode()", "diff": ["+\t\t\t\t\t} else if (expression instanceof QualifiedNameReference) {", "+\t\t\t\t\t\tMemberValuePair valuePair =", "+\t\t\t\t\t\t\tnew MemberValuePair(VALUE, expression.sourceStart, expression.sourceEnd, expression);", "+\t\t\t\t\t\tbuildMoreAnnotationCompletionContext(valuePair);", "+\t\t\t\t} else {", "+\t\t\t\t\tint index;", "+\t\t\t\t\tif((index = lastIndexOfElement(K_ATTRIBUTE_VALUE_DELIMITER)) != -1) {", "+\t\t\t\t\t\tint attributeIndentifierPtr = this.elementInfoStack[index];", "+\t\t\t\t\t\tint identLengthPtr = this.identifierLengthPtr;", "+\t\t\t\t\t\tint identPtr = this.identifierPtr;", "+\t\t\t\t\t\twhile (attributeIndentifierPtr < identPtr) {", "+\t\t\t\t\t\t\tidentPtr -= this.identifierLengthStack[identLengthPtr--];", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tif(attributeIndentifierPtr != identPtr) return;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tthis.identifierLengthPtr = identLengthPtr;", "+\t\t\t\t\t\tthis.identifierPtr = identPtr;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tthis.identifierLengthPtr--;", "+\t\t\t\t\t\tMemberValuePair memberValuePair = new MemberValuePair(", "+\t\t\t\t\t\t\t\tthis.identifierStack[this.identifierPtr--],", "+\t\t\t\t\t\t\t\texpression.sourceStart,", "+\t\t\t\t\t\t\t\texpression.sourceEnd,", "+\t\t\t\t\t\t\t\texpression);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tbuildMoreAnnotationCompletionContext(memberValuePair);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tCompletionNodeDetector detector =  new CompletionNodeDetector(this.assistNode, expression);", "+\t\t\t\tif(detector.containsCompletionNode()) {", "+\t\t\t\t\tMemberValuePair valuePair =", "+\t\t\t\t\t\tnew MemberValuePair(VALUE, expression.sourceStart, expression.sourceEnd, expression);", "+\t\t\t\t\tbuildMoreAnnotationCompletionContext(valuePair);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tif (this.astPtr > -1) {", "+\t\t\tASTNode node = this.astStack[this.astPtr];", "+\t\t\tif(node instanceof MemberValuePair) {", "+\t\t\t\tMemberValuePair memberValuePair = (MemberValuePair) node;", "+\t\t\t\tCompletionNodeDetector detector =  new CompletionNodeDetector(this.assistNode, memberValuePair);", "+\t\t\t\tif(detector.containsCompletionNode()) {", "+\t\t\t\t\tbuildMoreAnnotationCompletionContext(memberValuePair);", "+\t\t\t\t\tthis.assistNodeParent = detector.getCompletionNodeParent();", "+\t\t\t\t\treturn;", "-\tif ((!isInsideMethod() && !isInsideFieldInitialization())) { ", "+\tif ((!isInsideMethod() && !isInsideFieldInitialization() && !isInsideAttributeValue())) { "]}], "num": 3325}
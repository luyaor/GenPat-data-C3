{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "626a3e4915a6dccb791faf0e67058e83", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33b88206c954a952f4a6531a61c1ee73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  public MethodBinding getImplicitMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": "  public MethodBinding getImplicitMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\t\tif (!areParametersAssignable(methodBinding.parameters, argumentTypes)) {", "+\t    \t    MethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "+\t\t\t\tif (compatibleMethod == null) {", "-\t\t\t\t} else if (!canBeSeenByForCodeSnippet(methodBinding, receiverType, invocationSite, this)) {\t", "-\t\t\t\t\t// using <classScope> instead of <this> for visibility check does grant all access to innerclass", "-\t\t\t\t\tfuzzyProblem = new ProblemMethodBinding(selector, argumentTypes, methodBinding.declaringClass, NotVisible);", "+\t\t\t\t} else {", "+\t\t\t\t    methodBinding = compatibleMethod;", "+\t\t\t\t    if (!canBeSeenByForCodeSnippet(methodBinding, receiverType, invocationSite, this)) {\t", "+\t\t\t\t\t\t// using <classScope> instead of <this> for visibility check does grant all access to innerclass", "+\t\t\t\t\t\tfuzzyProblem = new ProblemMethodBinding(methodBinding, selector, argumentTypes, NotVisible);", "+\t\t\t\t    }", "-\t\t\t\t\tinsideProblem = new ProblemMethodBinding(methodBinding.selector, methodBinding.parameters, NonStaticReferenceInConstructorInvocation);", "+\t\t\t\t\tinsideProblem = new ProblemMethodBinding(methodBinding, methodBinding.selector, methodBinding.parameters, NonStaticReferenceInConstructorInvocation);", "-\t\t\t\t\tinsideProblem = new ProblemMethodBinding(methodBinding.selector, methodBinding.parameters, NonStaticReferenceInStaticContext);", "+\t\t\t\t\tinsideProblem = new ProblemMethodBinding(methodBinding, methodBinding.selector, methodBinding.parameters, NonStaticReferenceInStaticContext);", "-\t\t\t\t\treturn new ProblemMethodBinding(methodBinding.selector, methodBinding.parameters, InheritedNameHidesEnclosingName);", "+\t\t\t\t\treturn new ProblemMethodBinding(methodBinding, methodBinding.selector, methodBinding.parameters, InheritedNameHidesEnclosingName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39738dc138c5afbdc1921507e6eacccc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 45, "signatureBeforeChange": "  \tpublic MethodBinding getMethod(TypeBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": "  \tpublic MethodBinding getMethod(TypeBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\t\tif (!areParametersAssignable(methodBinding.parameters, argumentTypes))", "-\t\t\t\t\treturn new ProblemMethodBinding(", "-\t\t\t\t\t\tmethodBinding,", "-\t\t\t\t\t\tselector,", "-\t\t\t\t\t\targumentTypes,", "-\t\t\t\t\t\tNotFound);", "+\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "+\t\t\t\tif (compatibleMethod == null)", "+\t\t\t\t\treturn new ProblemMethodBinding(methodBinding, selector, argumentTypes, NotFound);", "+\t\t\t\tif (!compatibleMethod.isValidBinding())", "+\t\t\t\t\treturn compatibleMethod;", "+\t", "+\t\t\t\tmethodBinding = compatibleMethod;", "-\t\t\t\t\treturn new ProblemMethodBinding(", "-\t\t\t\t\t\tmethodBinding,", "-\t\t\t\t\t\tselector,", "-\t\t\t\t\t\tmethodBinding.parameters,", "-\t\t\t\t\t\tNotVisible);", "+\t\t\t\t\treturn new ProblemMethodBinding( methodBinding, selector, methodBinding.parameters, NotVisible);", "-\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ffefdf7c26587086c018968ff43c827", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public MethodBinding findMethodForArray(ArrayBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " public MethodBinding findMethodForArray(ArrayBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\tif (!areParametersAssignable(methodBinding.parameters, argumentTypes))", "+\t    MethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "+\t    if (compatibleMethod == null)", "+\t    methodBinding = compatibleMethod;", "-\t\t\treturn new ProblemMethodBinding(selector, methodBinding.parameters, methodBinding.declaringClass, NotVisible);", "+\t\t\treturn new ProblemMethodBinding(methodBinding, selector, methodBinding.parameters, NotVisible);"]}], "num": 1620}
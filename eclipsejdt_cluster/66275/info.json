{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b239ce07ec7ff4b7dd4639c5349d90a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d80b231d7affd557b1fd30c606603e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "5da4268a6e911ad3865241747a8e9714544fc990", "commitAfterChange": "1e8305535ff304200778a08eb6eb4025791a09c1", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " void checkMethods()", "signatureAfterChange": " abstract void checkMethods();", "diff": ["-void checkMethods() {", "+abstract void checkMethods();", "-\t\t\t\tcheckInheritedMethods(matchingInherited, index + 1); // pass in the length of matching"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "747e229e2d91c8f8b6a1cd21c94cafd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "b9bb6123c3e4c0567c677af33c7c0e8037ba4975", "commitAfterChange": "4dd974a226271180ff02d909a12722017f80ff3a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " void checkMethods()", "signatureAfterChange": " abstract void checkMethods();", "diff": ["-void checkMethods() {", "-\tboolean mustImplementAbstractMethods = mustImplementAbstractMethods();", "-\tboolean skipInheritedMethods = mustImplementAbstractMethods && canSkipInheritedMethods(); // have a single concrete superclass so only check overridden methods", "-\tboolean isOrEnclosedByPrivateType = this.type.isOrEnclosedByPrivateType();", "-\tchar[][] methodSelectors = this.inheritedMethods.keyTable;", "-\tnextSelector : for (int s = methodSelectors.length; --s >= 0;) {", "-\t\tif (methodSelectors[s] == null) continue nextSelector;", "-", "-\t\tMethodBinding[] current = (MethodBinding[]) this.currentMethods.get(methodSelectors[s]);", "-\t\tMethodBinding[] inherited = (MethodBinding[]) this.inheritedMethods.valueTable[s];", "-\t\t", "-\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=296660, if current type is exposed,", "-\t\t// inherited methods of super classes are too. current != null case handled below.", "-\t\tif (current == null && !isOrEnclosedByPrivateType) {", "-\t\t\tint length = inherited.length;", "-\t\t\tfor (int i = 0; i < length; i++){", "-\t\t\t\tinherited[i].original().modifiers |= ExtraCompilerModifiers.AccLocallyUsed;", "-\t\t\t}", "-\t\t}", "-", "-\t\tif (current == null && skipInheritedMethods)", "-\t\t\tcontinue nextSelector;", "-", "-\t\tif (inherited.length == 1 && current == null) { // handle the common case", "-\t\t\tif (mustImplementAbstractMethods && inherited[0].isAbstract())", "-\t\t\t\tcheckAbstractMethod(inherited[0]);", "-\t\t\tcontinue nextSelector;", "-\t\t}", "-", "-\t\tint index = -1;", "-\t\tMethodBinding[] matchingInherited = new MethodBinding[inherited.length];", "-\t\tif (current != null) {", "-\t\t\tfor (int i = 0, length1 = current.length; i < length1; i++) {", "-\t\t\t\tMethodBinding currentMethod = current[i];", "-\t\t\t\tfor (int j = 0, length2 = inherited.length; j < length2; j++) {", "-\t\t\t\t\tMethodBinding inheritedMethod = computeSubstituteMethod(inherited[j], currentMethod);", "-\t\t\t\t\tif (inheritedMethod != null) {", "-\t\t\t\t\t\tif (isParameterSubsignature(currentMethod, inheritedMethod)) {", "-\t\t\t\t\t\t\tmatchingInherited[++index] = inheritedMethod;", "-\t\t\t\t\t\t\tinherited[j] = null; // do not want to find it again", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (index >= 0) {", "-\t\t\t\t\tcheckAgainstInheritedMethods(currentMethod, matchingInherited, index + 1, inherited); // pass in the length of matching", "-\t\t\t\t\twhile (index >= 0) matchingInherited[index--] = null; // clear the contents of the matching methods", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-", "-\t\tfor (int i = 0, length = inherited.length; i < length; i++) {", "-\t\t\tMethodBinding inheritedMethod = inherited[i];", "-\t\t\tif (inheritedMethod == null) continue;", "-\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=296660, if current type is exposed,", "-\t\t\t// inherited methods of super classes are too. current == null case handled already.", "-\t\t\tif (!isOrEnclosedByPrivateType && current != null) {", "-\t\t\t\tinheritedMethod.original().modifiers |= ExtraCompilerModifiers.AccLocallyUsed;", "-\t\t\t}", "-\t\t\tmatchingInherited[++index] = inheritedMethod;", "-\t\t\tfor (int j = i + 1; j < length; j++) {", "-\t\t\t\tMethodBinding otherInheritedMethod = inherited[j];", "-\t\t\t\tif (canSkipInheritedMethods(inheritedMethod, otherInheritedMethod))", "-\t\t\t\t\tcontinue;", "-\t\t\t\totherInheritedMethod = computeSubstituteMethod(otherInheritedMethod, inheritedMethod);", "-\t\t\t\tif (otherInheritedMethod != null) {", "-\t\t\t\t\tif (isParameterSubsignature(inheritedMethod, otherInheritedMethod)) {", "-\t\t\t\t\t\tmatchingInherited[++index] = otherInheritedMethod;", "-\t\t\t\t\t\tinherited[j] = null; // do not want to find it again", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (index == -1) continue;", "-\t\t\tif (index > 0)", "-\t\t\t\tcheckInheritedMethods(matchingInherited, index + 1); // pass in the length of matching", "-\t\t\telse if (mustImplementAbstractMethods && matchingInherited[0].isAbstract())", "-\t\t\t\tcheckAbstractMethod(matchingInherited[0]);", "-\t\t\twhile (index >= 0) matchingInherited[index--] = null; // clear the contents of the matching methods", "-\t\t}", "-\t}", "-}", "+abstract void checkMethods();"]}], "num": 66275}
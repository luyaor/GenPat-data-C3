{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed41cfafb5767dd74456c7770d29fd2d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a88ea03f2500f6f798a84fb3e7a0dd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SyntheticAccessMethodBinding.java", "commitBeforeChange": "3a463f275914c0b0458a281ec5dc56963f900bba", "commitAfterChange": "377a3fde6f55f6083922d74da518425af8bf8632", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void initializeMethodAccessor(MethodBinding targetMethod, boolean isSuperAccess, ReferenceBinding declaringClass)", "signatureAfterChange": " \tpublic void initializeMethodAccessor(MethodBinding targetMethod, boolean isSuperAccess, ReferenceBinding declaringClass)", "diff": ["-", "-public void initializeMethodAccessor(MethodBinding targetMethod, boolean isSuperAccess, ReferenceBinding declaringClass) {", "-\t", "-\tthis.targetMethod = targetMethod;", "-\tthis.modifiers = AccDefault | AccStatic | AccSynthetic;", "-\tSourceTypeBinding declaringSourceType = (SourceTypeBinding) declaringClass;", "-\tSyntheticAccessMethodBinding[] knownAccessMethods = declaringSourceType.syntheticAccessMethods();", "-\tint methodId = knownAccessMethods == null ? 0 : knownAccessMethods.length;", "-\tthis.index = methodId;", "-", "-\tthis.selector = CharOperation.concat(AccessMethodPrefix, String.valueOf(methodId).toCharArray());", "-\tthis.returnType = targetMethod.returnType;", "-\tthis.accessType = isSuperAccess ? SuperMethodAccess : MethodAccess;", "-\t", "-\tif (targetMethod.isStatic()) {", "-\t\tthis.parameters = targetMethod.parameters;", "-\t} else {", "-\t\tthis.parameters = new TypeBinding[targetMethod.parameters.length + 1];", "-\t\tthis.parameters[0] = declaringSourceType;", "-\t\tSystem.arraycopy(targetMethod.parameters, 0, this.parameters, 1, targetMethod.parameters.length);", "-\t}", "-\tthis.thrownExceptions = targetMethod.thrownExceptions;", "-\tthis.declaringClass = declaringSourceType;", "-", "-\t// check for method collision", "-\tboolean needRename;", "-\tdo {", "-\t\tcheck : {", "-\t\t\tneedRename = false;", "-\t\t\t// check for collision with known methods", "-\t\t\tMethodBinding[] methods = declaringSourceType.methods;", "-\t\t\tfor (int i = 0, length = methods.length; i < length; i++) {", "-\t\t\t\tif (this.selector == methods[i].selector && this.areParametersEqual(methods[i])) {", "-\t\t\t\t\tneedRename = true;", "-\t\t\t\t\tbreak check;", "-\t\t\t// check for collision with synthetic accessors", "-\t\t\tif (knownAccessMethods != null) {", "-\t\t\t\tfor (int i = 0, length = knownAccessMethods.length; i < length; i++) {", "-\t\t\t\t\tif (knownAccessMethods[i] == null) continue;", "-\t\t\t\t\tif (this.selector == knownAccessMethods[i].selector && this.areParametersEqual(methods[i])) {", "+\t */", "+\tpublic void initializeMethodAccessor(MethodBinding targetMethod, boolean isSuperAccess, ReferenceBinding declaringClass) {", "+\t\t", "+\t\tthis.targetMethod = targetMethod;", "+\t\tthis.modifiers = AccDefault | AccStatic | AccSynthetic;", "+\t\tSourceTypeBinding declaringSourceType = (SourceTypeBinding) declaringClass;", "+\t\tSyntheticAccessMethodBinding[] knownAccessMethods = declaringSourceType.syntheticAccessMethods();", "+\t\tint methodId = knownAccessMethods == null ? 0 : knownAccessMethods.length;", "+\t\tthis.index = methodId;", "+\t", "+\t\tthis.selector = CharOperation.concat(AccessMethodPrefix, String.valueOf(methodId).toCharArray());", "+\t\tthis.returnType = targetMethod.returnType;", "+\t\tthis.accessType = isSuperAccess ? SuperMethodAccess : MethodAccess;", "+\t\t", "+\t\tif (targetMethod.isStatic()) {", "+\t\t\tthis.parameters = targetMethod.parameters;", "+\t\t} else {", "+\t\t\tthis.parameters = new TypeBinding[targetMethod.parameters.length + 1];", "+\t\t\tthis.parameters[0] = declaringSourceType;", "+\t\t\tSystem.arraycopy(targetMethod.parameters, 0, this.parameters, 1, targetMethod.parameters.length);", "+\t\t}", "+\t\tthis.thrownExceptions = targetMethod.thrownExceptions;", "+\t\tthis.declaringClass = declaringSourceType;", "+\t", "+\t\t// check for method collision", "+\t\tboolean needRename;", "+\t\tdo {", "+\t\t\tcheck : {", "+\t\t\t\tneedRename = false;", "+\t\t\t\t// check for collision with known methods", "+\t\t\t\tMethodBinding[] methods = declaringSourceType.methods;", "+\t\t\t\tfor (int i = 0, length = methods.length; i < length; i++) {", "+\t\t\t\t\tif (this.selector == methods[i].selector && this.areParametersEqual(methods[i])) {", "+\t\t\t\t// check for collision with synthetic accessors", "+\t\t\t\tif (knownAccessMethods != null) {", "+\t\t\t\t\tfor (int i = 0, length = knownAccessMethods.length; i < length; i++) {", "+\t\t\t\t\t\tif (knownAccessMethods[i] == null) continue;", "+\t\t\t\t\t\tif (this.selector == knownAccessMethods[i].selector && this.areParametersEqual(knownAccessMethods[i])) {", "+\t\t\t\t\t\t\tneedRename = true;", "+\t\t\t\t\t\t\tbreak check;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t}", "-\t\tif (needRename) { // retry with a selector & a growing methodId", "-\t\t\tthis.selector(CharOperation.concat(AccessMethodPrefix, String.valueOf(++methodId).toCharArray()));", "-\t\t}", "-\t} while (needRename);", "-", "-\t// retrieve sourceStart position for the target method for line number attributes", "-\tAbstractMethodDeclaration[] methodDecls = declaringSourceType.scope.referenceContext.methods;", "-\tif (methodDecls != null) {", "-\t\tfor (int i = 0, length = methodDecls.length; i < length; i++) {", "-\t\t\tif (methodDecls[i].binding == targetMethod) {", "-\t\t\t\tthis.sourceStart = methodDecls[i].sourceStart;", "-\t\t\t\treturn;", "+\t\t\tif (needRename) { // retry with a selector & a growing methodId", "+\t\t\t\tthis.selector(CharOperation.concat(AccessMethodPrefix, String.valueOf(++methodId).toCharArray()));", "+\t\t\t}", "+\t\t} while (needRename);", "+\t", "+\t\t// retrieve sourceStart position for the target method for line number attributes", "+\t\tAbstractMethodDeclaration[] methodDecls = declaringSourceType.scope.referenceContext.methods;", "+\t\tif (methodDecls != null) {", "+\t\t\tfor (int i = 0, length = methodDecls.length; i < length; i++) {", "+\t\t\t\tif (methodDecls[i].binding == targetMethod) {", "+\t\t\t\t\tthis.sourceStart = methodDecls[i].sourceStart;", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e544492f519de3d4d4ca6c9916f9f5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SyntheticAccessMethodBinding.java", "commitBeforeChange": "3a463f275914c0b0458a281ec5dc56963f900bba", "commitAfterChange": "377a3fde6f55f6083922d74da518425af8bf8632", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void initializeConstructorAccessor(MethodBinding targetConstructor)", "signatureAfterChange": " \t public void initializeConstructorAccessor(MethodBinding targetConstructor)", "diff": ["- */", "- public void initializeConstructorAccessor(MethodBinding targetConstructor) {", "-", "-\tthis.targetMethod = targetConstructor;", "-\tthis.modifiers = AccDefault | AccSynthetic;", "-\tSourceTypeBinding sourceType = ", "-\t\t(SourceTypeBinding) targetConstructor.declaringClass; ", "-\tSyntheticAccessMethodBinding[] knownAccessMethods = ", "-\t\tsourceType.syntheticAccessMethods(); ", "-\tthis.index = knownAccessMethods == null ? 0 : knownAccessMethods.length;", "-", "-\tthis.selector = targetConstructor.selector;", "-\tthis.returnType = targetConstructor.returnType;", "-\tthis.accessType = ConstructorAccess;", "-\tthis.parameters = new TypeBinding[targetConstructor.parameters.length + 1];", "-\tSystem.arraycopy(", "-\t\ttargetConstructor.parameters, ", "-\t\t0, ", "-\t\tthis.parameters, ", "-\t\t0, ", "-\t\ttargetConstructor.parameters.length); ", "-\tparameters[targetConstructor.parameters.length] = ", "-\t\ttargetConstructor.declaringClass; ", "-\tthis.thrownExceptions = targetConstructor.thrownExceptions;", "-\tthis.declaringClass = sourceType;", "-", "-\t// check for method collision", "-\tboolean needRename;", "-\tdo {", "-\t\tcheck : {", "-\t\t\tneedRename = false;", "-\t\t\t// check for collision with known methods", "-\t\t\tMethodBinding[] methods = sourceType.methods;", "-\t\t\tfor (int i = 0, length = methods.length; i < length; i++) {", "-\t\t\t\tif (this.selector == methods[i].selector", "-\t\t\t\t\t&& this.areParametersEqual(methods[i])) {", "-\t\t\t\t\tneedRename = true;", "-\t\t\t\t\tbreak check;", "-\t\t\t// check for collision with synthetic accessors", "-\t\t\tif (knownAccessMethods != null) {", "-\t\t\t\tfor (int i = 0, length = knownAccessMethods.length; i < length; i++) {", "-\t\t\t\t\tif (knownAccessMethods[i] == null)", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tif (this.selector == knownAccessMethods[i].selector", "+\t */", "+\t public void initializeConstructorAccessor(MethodBinding targetConstructor) {", "+\t", "+\t\tthis.targetMethod = targetConstructor;", "+\t\tthis.modifiers = AccDefault | AccSynthetic;", "+\t\tSourceTypeBinding sourceType = ", "+\t\t\t(SourceTypeBinding) targetConstructor.declaringClass; ", "+\t\tSyntheticAccessMethodBinding[] knownAccessMethods = ", "+\t\t\tsourceType.syntheticAccessMethods(); ", "+\t\tthis.index = knownAccessMethods == null ? 0 : knownAccessMethods.length;", "+\t", "+\t\tthis.selector = targetConstructor.selector;", "+\t\tthis.returnType = targetConstructor.returnType;", "+\t\tthis.accessType = ConstructorAccess;", "+\t\tthis.parameters = new TypeBinding[targetConstructor.parameters.length + 1];", "+\t\tSystem.arraycopy(", "+\t\t\ttargetConstructor.parameters, ", "+\t\t\t0, ", "+\t\t\tthis.parameters, ", "+\t\t\t0, ", "+\t\t\ttargetConstructor.parameters.length); ", "+\t\tparameters[targetConstructor.parameters.length] = ", "+\t\t\ttargetConstructor.declaringClass; ", "+\t\tthis.thrownExceptions = targetConstructor.thrownExceptions;", "+\t\tthis.declaringClass = sourceType;", "+\t", "+\t\t// check for method collision", "+\t\tboolean needRename;", "+\t\tdo {", "+\t\t\tcheck : {", "+\t\t\t\tneedRename = false;", "+\t\t\t\t// check for collision with known methods", "+\t\t\t\tMethodBinding[] methods = sourceType.methods;", "+\t\t\t\tfor (int i = 0, length = methods.length; i < length; i++) {", "+\t\t\t\t\tif (this.selector == methods[i].selector", "-\t\t\t}", "-\t\t}", "-\t\tif (needRename) { // retry with a new extra argument", "-\t\t\tint length = this.parameters.length;", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.parameters, ", "-\t\t\t\t0, ", "-\t\t\t\tthis.parameters = new TypeBinding[length + 1], ", "-\t\t\t\t0, ", "-\t\t\t\tlength); ", "-\t\t\tthis.parameters[length] = this.declaringClass;", "-\t\t}", "-\t} while (needRename);", "-", "-\t// retrieve sourceStart position for the target method for line number attributes", "-\tAbstractMethodDeclaration[] methodDecls = ", "-\t\tsourceType.scope.referenceContext.methods; ", "-\tif (methodDecls != null) {", "-\t\tfor (int i = 0, length = methodDecls.length; i < length; i++) {", "-\t\t\tif (methodDecls[i].binding == targetConstructor) {", "-\t\t\t\tthis.sourceStart = methodDecls[i].sourceStart;", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t}", "-\t}", "-}", "+\t\t\t\t// check for collision with synthetic accessors", "+\t\t\t\tif (knownAccessMethods != null) {", "+\t\t\t\t\tfor (int i = 0, length = knownAccessMethods.length; i < length; i++) {", "+\t\t\t\t\t\tif (knownAccessMethods[i] == null)", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tif (this.selector == knownAccessMethods[i].selector", "+\t\t\t\t\t\t\t&& this.areParametersEqual(knownAccessMethods[i])) {", "+\t\t\t\t\t\t\tneedRename = true;", "+\t\t\t\t\t\t\tbreak check;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\tif (needRename) { // retry with a new extra argument", "+\t\t\t\tint length = this.parameters.length;", "+\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\tthis.parameters, ", "+\t\t\t\t\t0, ", "+\t\t\t\t\tthis.parameters = new TypeBinding[length + 1], ", "+\t\t\t\t\t0, ", "+\t\t\t\t\tlength); ", "+\t\t\t\tthis.parameters[length] = this.declaringClass;", "+\t\t\t}", "+\t\t} while (needRename);", "+\t", "+\t\t// retrieve sourceStart position for the target method for line number attributes", "+\t\tAbstractMethodDeclaration[] methodDecls = ", "+\t\t\tsourceType.scope.referenceContext.methods; ", "+\t\tif (methodDecls != null) {", "+\t\t\tfor (int i = 0, length = methodDecls.length; i < length; i++) {", "+\t\t\t\tif (methodDecls[i].binding == targetConstructor) {", "+\t\t\t\t\tthis.sourceStart = methodDecls[i].sourceStart;", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 48768}
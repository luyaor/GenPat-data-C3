{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8fcb7efe1b9609cfb4dbd2ce0e263112", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03d7034ed0b32d0480b0d09711e9ccce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "48b439005b4e27b9edf7ac75008df6663dca3609", "commitAfterChange": "db94ada762c25cbafb7604978ccc4fc3df281550", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  String runFormatter(CodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length, String lineSeparator, boolean repeat)", "signatureAfterChange": "  String runFormatter(CodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length, String lineSeparator, boolean repeat)", "diff": ["+\tlong timeStart = System.currentTimeMillis();", "+\tif (FAILURES != null) { // Comparison has started", "+\t\tTIME_MEASURES.formatting[0] += System.currentTimeMillis() - timeStart;", "+\t\tTIME_MEASURES.occurences[0]++;", "+\t\tif (edit == null) TIME_MEASURES.null_output[0]++;", "+\t}", "-\tint count = 1;", "+\tint count = 0;", "-\twhile (count++ < FORMAT_REPEAT) {", "+\twhile (++count < FORMAT_REPEAT) {", "+\t\ttimeStart = System.currentTimeMillis();", "+\t\tif (FAILURES != null) { // Comparison has started", "+\t\t\tTIME_MEASURES.formatting[count] += System.currentTimeMillis() - timeStart;", "+\t\t\tTIME_MEASURES.occurences[count]++;", "+\t\t\tif (edit == null) TIME_MEASURES.null_output[count]++;", "+\t\t}", "-\t\t\tString counterString = counterToString(count-1);", "+\t\t\tString counterString = counterToString(count);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6d063e67cb8a1b2e335a5c1127f1ca2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "cdcc121135bdcb6cbbcb767fccb9989ea1bced40", "commitAfterChange": "0f55e5c1ee44e416670818a5019084934c587b76", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void run()", "signatureAfterChange": " \tpublic void run()", "diff": ["-\t\t\t\t\tif ((job = currentJob()) == null) {", "-\t\t\t\t\t\tif (idlingStart < 0)", "-\t\t\t\t\t\t\tidlingStart = System.currentTimeMillis();", "-\t\t\t\t\t\tnotifyIdle(System.currentTimeMillis() - idlingStart);", "-\t\t\t\t\t\tThread.sleep(500);", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tidlingStart = -1;", "+\t\t\t\t\tsynchronized (this) {", "+\t\t\t\t\t\tif ((job = currentJob()) == null) {", "+\t\t\t\t\t\t\tif (idlingStart < 0)", "+\t\t\t\t\t\t\t\tidlingStart = System.currentTimeMillis();", "+\t\t\t\t\t\t\tnotifyIdle(System.currentTimeMillis() - idlingStart);", "+\t\t\t\t\t\t\tthis.wait(); // wait until a new job is posted", "+\t\t\t\t\t\t\tThread.sleep(500); // delay before processing the new job, allow some time for the active thread to finish", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tidlingStart = -1;", "+\t\t\t\t\t\t}"]}], "num": 26919}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf5d7d04f647a294addfa8122149e038", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d76068ab267f6b2d98d3ec9f14c72898", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/APTProblem.java", "commitBeforeChange": "57c6f1028b04692f68dfd108df673050b30e07bb", "commitAfterChange": "60307c1e2e6ef1d38cf313e756af798e2166cf66", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tAPTProblem(final String msg,  \t\t\t   final Severity severity,  \t\t\t   final IFile file,  \t\t\t   final int startingOffset, \t\t\t   final int endingOffset, \t\t\t   final int line, \t\t\t   final String[] arguments)", "signatureAfterChange": " \t \tAPTProblem(final String msg,  \t\t\t   final Severity severity,  \t\t\t   final IFile file,  \t\t\t   final int startingOffset, \t\t\t   final int endingOffset, \t\t\t   final int line, \t\t\t   final String[] arguments, \t\t\t   boolean isNonReconcile)", "diff": ["-\t\t\t   final String[] arguments){", "+\t\t\t   final String[] arguments,", "+\t\t\t   boolean isNonReconcile){", "+\t\t_markerType = isNonReconcile ? AptPlugin.APT_NONRECONCILE_COMPILATION_PROBLEM_MARKER : AptPlugin.APT_COMPILATION_PROBLEM_MARKER;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d933dabd03f2079ddd44a057ff2777cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "e40a14518c878498ad39595017fa5c41fd3a84fd", "commitAfterChange": "0db36dd259a6320ea4c536f5dd076aa73d4d8836", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate IFile getIFileForTypeName( String typeName, IJavaProject javaProject, IProgressMonitor progressMonitor ) \t    throws CoreException", "signatureAfterChange": " \tprivate IFile getIFileForTypeName( String typeName, IJavaProject javaProject, boolean create, IProgressMonitor progressMonitor) \t    throws CoreException", "diff": ["-\tprivate IFile getIFileForTypeName( String typeName, IJavaProject javaProject, IProgressMonitor progressMonitor )", "+\tprivate IFile getIFileForTypeName( String typeName, IJavaProject javaProject, boolean create, IProgressMonitor progressMonitor)", "-\t\tIFolder folder = ensureGeneratedSourceFolder( javaProject, progressMonitor );", "+\t\tIFolder folder;", "+\t\tif ( create )", "+\t\t\tfolder = ensureGeneratedSourceFolder( javaProject, progressMonitor );", "+\t\telse", "+\t\t\tfolder = getGeneratedSourceFolder();", "-\t\t\tif ( !folder.exists() )", "+\t\t\tif ( create && !folder.exists() )"]}], "num": 31027}
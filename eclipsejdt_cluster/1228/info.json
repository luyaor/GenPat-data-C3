{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df60a552e410df504d4c66073e0a395e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76fac7eecbc93aa1596c0b5f71503775", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "34b4972480c62fc99b17d4728db2648e98460b52", "commitAfterChange": "a234173ab4d645c8990c97cafa00ec82ce0a909f", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 96, "signatureBeforeChange": " public void test_annotation_import_007()", "signatureAfterChange": " public void test_missing_default_annotation_01()", "diff": ["-// using nullness defaulting to nonnull, missing annotation types, no longer a problem", "-public void test_annotation_import_007() {", "-\tMap customOptions = getCompilerOptions();", "-\tcustomOptions.put(JavaCore.COMPILER_PB_NULL_SPECIFICATION_INSUFFICIENT_INFO, JavaCore.ERROR);", "-\tcustomOptions.put(JavaCore.COMPILER_NULLABLE_ANNOTATION_NAME, \"org.foo.MayBeNull\");", "-\tcustomOptions.put(JavaCore.COMPILER_NONNULL_ANNOTATION_NAME, \"org.foo.MustNotBeNull\");", "-\tcustomOptions.put(JavaCore.COMPILER_NONNULL_IS_DEFAULT, JavaCore.ENABLED);", "-\trunConformTestWithLibs(", "-\t\tnew String[] {", "-\t\t\t\"Lib.java\",", "-\t\t\t\"public class Lib {\\n\" +", "-\t\t\t\"    Object getObject() { return new Object(); }\\n\" +", "-\t\t\t\"}\\n\",", "-\t\t\t\"X.java\",", "-\t\t\t\"public class X {\\n\" +", "-\t\t\t\"    Object getObject(Lib l) {\\n\" +", "-\t\t\t\"        return l.getObject();\\n\" +", "-\t\t\t\"    }\\n\" +", "-\t\t\t\"}\\n\"", "-\t\t},", "-\t\tcustomOptions,", "-\t\t\"\");", "-}", "+// test missing default nullness annotation for types in default package", "+public void test_missing_default_annotation_01() {", "+\tcustomOptions.put(JavaCore.COMPILER_PB_MISSING_NONNULL_BY_DEFAULT_ANNOTATION, JavaCore.ERROR);", "+\trunNegativeTestWithLibs(", "+\t\t\t\"Lib.java\",", "+\t\t\t\"public class Lib {\\n\" +", "+\t\t\t\"    Object getObject() { return new Object(); }\\n\" +", "+\t\t\t\"}\\n\",", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"\t class XInner{}\\n\" +  // don't warn for inner types", "+\t\t\t\"    Object getObject(Lib l) {\\n\" +", "+\t\t\t\"        return l.getObject();\\n\" +", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"}\\n\"", "+\t\t},", "+\t\tcustomOptions,", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in Lib.java (at line 1)\\n\" + ", "+\t\t\"\tpublic class Lib {\\n\" + ", "+\t\t\"\t             ^^^\\n\" + ", "+\t\t\"A default nullness annotation has not been specified for the type Lib\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\"\tpublic class X {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"A default nullness annotation has not been specified for the type X\\n\" + ", "+\t\t\"----------\\n\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b1a637b02dd08aca44742a834943111", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "285d9f55145724991833663a691553a09e2c72de", "commitAfterChange": "b36a137cc1f0fb3b34ff097a37fce4ecbf12fde7", "methodNumberBeforeChange": 915, "methodNumberAfterChange": 915, "signatureBeforeChange": " public void test0895()", "signatureAfterChange": " public void test0895()", "diff": ["+\tif (this.complianceLevel < ClassFileConstants.JDK1_7) {\t", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\", // =================", "+\t\t\t\t\"interface I {}\\n\" + ", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"    Object o = new <Object> I() {};\\n\" + ", "+\t\t\t\t\"}\\n\" ,", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tObject o = new <Object> I() {};\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The constructor Object() of type Object is not generic; it cannot be parameterized with arguments <Object>\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t\treturn;", "+\t}", "-\t\tnew String[] {", "-\t\t\t\"X.java\", // =================", "-\t\t\t\"interface I {}\\n\" + ", "-\t\t\t\"public class X {\\n\" + ", "-\t\t\t\"    Object o = new <Object> I() {};\\n\" + ", "-\t\t\t\"}\\n\" ,", "-\t\t},", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\"\tObject o = new <Object> I() {};\\n\" + ", "-\t\t\"\t           ^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The constructor Object() of type Object is not generic; it cannot be parameterized with arguments <Object>\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\", // =================", "+\t\t\t\t\"interface I {}\\n\" + ", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"    Object o = new <Object> I() {};\\n\" + ", "+\t\t\t\t\"}\\n\" ,", "+\t\t\t\t\"Y.java\",", "+\t\t\t\t\"class Y extends Zork {}\\n\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tObject o = new <Object> I() {};\\n\" + ", "+\t\t\t\"\t                ^^^^^^\\n\" + ", "+\t\t\t\"Unused type arguments for the non generic constructor Object() of type Object; it should not be parameterized with arguments <Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in Y.java (at line 1)\\n\" + ", "+\t\t\t\"\tclass Y extends Zork {}\\n\" + ", "+\t\t\t\"\t                ^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\");"]}], "num": 1228}
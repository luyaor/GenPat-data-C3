{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08e3bb94b1f5e9aef5cf560b6c50904e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c3dbc5cd806da358a848c0d8fc2b85c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "e57673ef79fc8a78dd18b62f70acff1a24c8bce9", "commitAfterChange": "eb6fea9292986a112a3d78c8e49c94f6ad299981", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean checkDeprecation(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tpublic boolean checkDeprecation(int javadocStart, int javadocEnd)", "diff": ["-\t\t\t\t\tint start = line == firstLineNumber", "+\t\t\t\t\tint lineStart = line == firstLineNumber", "-\t\t\t\t\tthis.index = start;", "+\t\t\t\t\tthis.index = lineStart;", "-\t\t\t\t\twhile (this.index < this.lineEnd) {", "-\t\t\t\t\t\tchar nextCharacter = readChar(); // consider unicodes", "-\t\t\t\t\t\tif  (nextCharacter == '@') {", "-\t\t\t\t\t\t\tif ((readChar() == 'd') &&", "-\t\t\t\t\t\t\t\t(readChar() == 'e') &&", "-\t\t\t\t\t\t\t\t(readChar() == 'p') &&", "-\t\t\t\t\t\t\t\t(readChar() == 'r') &&", "-\t\t\t\t\t\t\t\t(readChar() == 'e') &&", "-\t\t\t\t\t\t\t\t(readChar() == 'c') &&", "-\t\t\t\t\t\t\t\t(readChar() == 'a') &&", "-\t\t\t\t\t\t\t\t(readChar() == 't') &&", "-\t\t\t\t\t\t\t\t(readChar() == 'e') &&", "-\t\t\t\t\t\t\t\t(readChar() == 'd'))", "-\t\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t\t// ensure the tag is properly ended: either followed by a space, a tab, line end or asterisk.", "-\t\t\t\t\t\t\t\tnextCharacter = readChar();", "-\t\t\t\t\t\t\t\tif (Character.isWhitespace(nextCharacter) || nextCharacter == '*') {", "-\t\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tbreak; // skip to next line", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else if (nextCharacter != '*' && !Character.isWhitespace(nextCharacter)) {", "-\t\t\t\t\t\t\tbreak; // skip to next line", "+\t\t\t\t\tnextCharacter : while (this.index < this.lineEnd) {", "+\t\t\t\t\t\tchar c = readChar(); // consider unicodes", "+\t\t\t\t\t\tswitch (c) {", "+\t\t\t\t\t\t    default : ", "+\t\t\t\t\t\t        if (Character.isWhitespace(c)) {", "+\t\t\t\t\t\t            continue nextCharacter;", "+\t\t\t\t\t\t        }", "+\t\t\t\t\t\t        break;", "+\t\t\t\t\t\t    case '*' :", "+\t\t\t\t\t\t        continue nextCharacter;", "+\t\t\t\t\t\t    case '@' :", "+\t\t\t\t\t\t        if ((readChar() == 'd') && (readChar() == 'e') &&", "+\t\t\t\t\t\t\t\t\t\t(readChar() == 'p') && (readChar() == 'r') &&", "+\t\t\t\t\t\t\t\t\t\t(readChar() == 'e') && (readChar() == 'c') &&", "+\t\t\t\t\t\t\t\t\t\t(readChar() == 'a') && (readChar() == 't') &&", "+\t\t\t\t\t\t\t\t\t\t(readChar() == 'e') && (readChar() == 'd')) {", "+\t\t\t\t\t\t\t\t\t// ensure the tag is properly ended: either followed by a space, a tab, line end or asterisk.", "+\t\t\t\t\t\t\t\t\tc = readChar();", "+\t\t\t\t\t\t\t\t\tif (Character.isWhitespace(c) || c == '*') {", "+\t\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t        }", "+\t\t\t        \tcontinue nextLine;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b14c37ca7f374c606fa41610d99d9f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "b87d35812b101296bb4ba9a7686e261bcb057a01", "commitAfterChange": "c42247da660bcfab8e817bd9dcc03bba195edcbf", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private int adaptEdit(OptimizedReplaceEdit[] sortedEdits, int start, int regionStart, int regionEnd)", "signatureAfterChange": "     private int adaptEdit(OptimizedReplaceEdit[] sortedEdits, int start, int regionStart, int regionEnd)", "diff": ["-\t\t\t\t\t    \t\twhile (idx < length) {", "+\t\t\t\t\t    \t\tloop: while (idx < length) {", "-\t\t\t\t\t    \t\t\tif (ch == '\\n') {", "-\t\t\t\t\t    \t\t\t\tlinesCount--;", "-\t\t\t\t\t    \t\t\t\tif (linesCount == 0) {", "-\t\t\t\t\t    \t\t\t\t\tidx++;", "+\t\t\t\t\t    \t\t\tswitch (ch) {", "+\t\t\t\t\t    \t\t\t\tcase '\\n':", "+\t\t\t\t\t\t    \t\t\t\tlinesCount--;", "+\t\t\t\t\t\t    \t\t\t\tif (linesCount == 0) {", "+\t\t\t\t\t\t    \t\t\t\t\tidx++;", "+\t\t\t\t\t\t    \t\t\t\t\tbreak loop;", "+\t\t\t\t\t\t    \t\t\t\t}", "+\t\t\t\t\t\t    \t\t\t\tbreak;", "+\t\t\t\t\t    \t\t\t\tcase '\\r':", "+\t\t\t\t\t    \t\t\t\tcase ' ':", "+\t\t\t\t\t    \t\t\t\tcase '\\t':", "-\t\t\t\t\t    \t\t\t\t}", "-\t\t\t\t\t    \t\t\t}", "-\t\t\t\t\t    \t\t\telse if (ch != '\\r') {", "-\t\t\t\t\t    \t\t\t\tbreak;", "+\t\t\t\t\t    \t\t\t\tdefault:", "+\t\t\t\t\t    \t\t\t\t\tbreak loop;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9021dd7d2be7f6c5ec562a93cf8af5c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "0d8b14fcdd186ef07894db465104582e473b32af", "commitAfterChange": "cb1176594034666f0f8d852dc8fc01987d54d11b", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \t   \tpublic void resolve()", "signatureAfterChange": " \t   \tpublic void resolve()", "diff": ["-\t\t\tif (kind() == IGenericType.ANNOTATION_TYPE_DECL) {", "-\t\t\t\tif (this.superclass != null) {", "-\t\t\t\t\tthis.scope.problemReporter().annotationTypeDeclarationCannotHaveSuperclass(this);", "-\t\t\t\t}", "-\t\t\t\tif (this.superInterfaces != null) {", "-\t\t\t\t\tthis.scope.problemReporter().annotationTypeDeclarationCannotHaveSuperinterfaces(this);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t// check enum abstract methods", "-\t\t\tif (kind() == IGenericType.ENUM_DECL && this.binding.isAbstract()) {", "-\t\t\t\tif (!hasEnumConstants || hasEnumConstantsWithoutBody) {", "-\t\t\t\t\tfor (int i = 0, count = this.methods.length; i < count; i++) {", "-\t\t\t\t\t\tfinal AbstractMethodDeclaration methodDeclaration = this.methods[i];", "-\t\t\t\t\t\tif (methodDeclaration.isAbstract() && methodDeclaration.binding != null) {", "-\t\t\t\t\t\t\tthis.scope.problemReporter().enumAbstractMethodMustBeImplemented(methodDeclaration);", "+\t\t\tswitch(kind(this.modifiers)) {", "+\t\t\t\tcase TypeDeclaration.ANNOTATION_TYPE_DECL :", "+\t\t\t\t\tif (this.superclass != null) {", "+\t\t\t\t\t\tthis.scope.problemReporter().annotationTypeDeclarationCannotHaveSuperclass(this);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (this.superInterfaces != null) {", "+\t\t\t\t\t\tthis.scope.problemReporter().annotationTypeDeclarationCannotHaveSuperinterfaces(this);", "+\t\t\t\t\t}\t\t", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase TypeDeclaration.ENUM_DECL :", "+\t\t\t\t\t// check enum abstract methods", "+\t\t\t\t\tif (this.binding.isAbstract()) {", "+\t\t\t\t\t\tif (!hasEnumConstants || hasEnumConstantsWithoutBody) {", "+\t\t\t\t\t\t\tfor (int i = 0, count = this.methods.length; i < count; i++) {", "+\t\t\t\t\t\t\t\tfinal AbstractMethodDeclaration methodDeclaration = this.methods[i];", "+\t\t\t\t\t\t\t\tif (methodDeclaration.isAbstract() && methodDeclaration.binding != null) {", "+\t\t\t\t\t\t\t\t\tthis.scope.problemReporter().enumAbstractMethodMustBeImplemented(methodDeclaration);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9c716b2feb0a0d9ddf3c3091849155a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "c0f9d8b84abc89ce64134386f4c44ab56579df25", "commitAfterChange": "9ba8652d2cebf2117416af5e39a70e172556117b", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " private static int appendTypeArgumentSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer)", "signatureAfterChange": " private static int appendTypeArgumentSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer)", "diff": ["-\tif (c == C_STAR) {", "-\t\tbuffer.append('?');", "-\t\treturn start;", "-\t}", "-\tif (c == '+') {", "-\t\tbuffer.append(\"? extends \"); //$NON-NLS-1$", "-\t\treturn appendTypeSignature(string, start + 1, fullyQualifyTypeNames, buffer);", "-\t} else if (c == '-') {", "-\t\tbuffer.append(\"? super \"); //$NON-NLS-1$", "-\t\treturn appendTypeSignature(string, start + 1, fullyQualifyTypeNames, buffer);", "-\t} else {", "-\t\treturn appendTypeSignature(string, start, fullyQualifyTypeNames, buffer);", "+\tswitch(c) {", "+\t\tcase C_STAR :", "+\t\t\tbuffer.append('?');", "+\t\t\treturn start;", "+\t\tcase '+' :", "+\t\t\tbuffer.append(\"? extends \"); //$NON-NLS-1$", "+\t\t\treturn appendTypeSignature(string, start + 1, fullyQualifyTypeNames, buffer);", "+\t\tcase '-' :", "+\t\t\tbuffer.append(\"? super \"); //$NON-NLS-1$", "+\t\t\treturn appendTypeSignature(string, start + 1, fullyQualifyTypeNames, buffer);", "+\t\tdefault :", "+\t\t\treturn appendTypeSignature(string, start, fullyQualifyTypeNames, buffer);"]}], "num": 58794}
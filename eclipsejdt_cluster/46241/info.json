{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44be8a14b0a4dab04a0103bf155b5c39", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "163097d6a97953aa82b6f1b6a4102946", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "commitAfterChange": "cbaf155d59bae1aee7ec473c177014431f794c16", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t */", "-\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream) {", "-\t\tif ((bits & IsReachable) == 0) {", "-\t\t\treturn;", "-\t\t}", "-\t\tint pc = codeStream.position;", "-\t\t// generate the expression", "-\t\tif ((this.expression != null) && (this.expression.constant == Constant.NotAConstant)) {", "-\t\t\tthis.expression.generateCode(currentScope, codeStream, needValue()); // no value needed if non-returning subroutine", "-\t\t\tgenerateStoreSaveValueIfNecessary(codeStream);", "-\t\t}", "-\t\t", "-\t\t// generation of code responsible for invoking the finally blocks in sequence", "-\t\tif (subroutines != null) {", "-\t\t\tfor (int i = 0, max = subroutines.length; i < max; i++) {", "-\t\t\t\tSubRoutineStatement sub = subroutines[i];", "-\t\t\t\tsub.generateSubRoutineInvocation(currentScope, codeStream);", "-\t\t\t\tif (sub.isSubRoutineEscaping()) {", "-\t\t\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t\t\t\t\t\tSubRoutineStatement.reenterAnyExceptionHandlers(subroutines, i, codeStream);", "-\t\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\tsub.exitAnyExceptionHandler();", "-\t\t\t}", "-\t\t}", "-\t\tif (saveValueVariable != null) codeStream.load(saveValueVariable);", "-\t\t", "-\t\tif ((this.expression != null) && (this.expression.constant != Constant.NotAConstant)) {", "-\t\t\tcodeStream.generateConstant(this.expression.constant, this.expression.implicitConversion);", "-\t\t\tgenerateStoreSaveValueIfNecessary(codeStream);\t\t", "-\t\t}", "-\t\t// output the suitable return bytecode or wrap the value inside a descriptor for doits", "-\t\tthis.generateReturnBytecode(codeStream);", "-\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t\tSubRoutineStatement.reenterAnyExceptionHandlers(subroutines, -1, codeStream);", "-\t}", "+ */", "+public void generateCode(BlockScope currentScope, CodeStream codeStream) {", "+\tif ((this.bits & ASTNode.IsReachable) == 0) {", "+\t\treturn;", "+\t}", "+\tint pc = codeStream.position;", "+\tboolean alreadyGeneratedExpression = false;", "+\t// generate the expression", "+\tif ((this.expression != null) && (this.expression.constant == Constant.NotAConstant) && !(this.expression instanceof NullLiteral)) {", "+\t\talreadyGeneratedExpression = true;", "+\t\tthis.expression.generateCode(currentScope, codeStream, needValue()); // no value needed if non-returning subroutine", "+\t\tgenerateStoreSaveValueIfNecessary(codeStream);", "+\t}", "+\t", "+\t// generation of code responsible for invoking the finally blocks in sequence", "+\tif (this.subroutines != null) {", "+\t\tObject reusableJSRTarget = this.expression == null ? (Object)TypeBinding.VOID : this.expression.reusableJSRTarget();", "+\t\tfor (int i = 0, max = this.subroutines.length; i < max; i++) {", "+\t\t\tSubRoutineStatement sub = this.subroutines[i];", "+\t\t\tboolean didEscape = sub.generateSubRoutineInvocation(currentScope, codeStream, reusableJSRTarget);", "+\t\t\tif (didEscape) {", "+\t\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t\t\t\tSubRoutineStatement.reenterAllExceptionHandlers(this.subroutines, i, codeStream);", "+\t\t\t\t\treturn;", "+\t\t}", "+\t}", "+\tif (this.saveValueVariable != null) {", "+\t\tcodeStream.load(this.saveValueVariable);", "+\t}", "+\tif (this.expression != null && !alreadyGeneratedExpression) {", "+\t\tthis.expression.generateCode(currentScope, codeStream, true);", "+\t\tgenerateStoreSaveValueIfNecessary(codeStream);\t", "+\t}", "+\t// output the suitable return bytecode or wrap the value inside a descriptor for doits", "+\tthis.generateReturnBytecode(codeStream);", "+\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\tSubRoutineStatement.reenterAllExceptionHandlers(this.subroutines, -1, codeStream);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f101120eb12feb4c23374b7d7855e0e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "babe82af3726a6979eb5da4c747f51906154b2bc", "commitAfterChange": "fab4ac0c2a45db58d02407ad5972d843c8dba1e6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream) {", "-", "-\t\tif ((bits & IsReachable) == 0) {", "-\t\t\treturn;", "-\t\t}", "-\t\tint pc = codeStream.position;", "-", "-\t\t// labels management", "-\t\tBranchLabel actionLabel = new BranchLabel(codeStream);", "-\t\tif (action != null) actionLabel.tagBits |= BranchLabel.USED;", "-\t\tactionLabel.place();", "-\t\tbreakLabel.initialize(codeStream);", "-\t\tif (continueLabel != null) {", "-\t\t\tcontinueLabel.initialize(codeStream);", "-\t\t}", "-", "-\t\t// generate action", "-\t\tif (action != null) {", "-\t\t\taction.generateCode(currentScope, codeStream);", "-\t\t}", "-\t\tConstant cst = condition.optimizedBooleanConstant();", "-\t\tboolean isConditionOptimizedFalse = cst != Constant.NotAConstant && cst.booleanValue() == false;\t\t", "-\t\tif (isConditionOptimizedFalse){", "-\t\t\tcondition.generateCode(currentScope, codeStream, false);", "-\t\t} else {", "-\t\t\t// generate condition", "-\t\t\tif (continueLabel != null) {", "-\t\t\t\tcontinueLabel.place();", "-\t\t\t\tcondition.generateOptimizedBoolean(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\tactionLabel,", "-\t\t\t\t\tnull,", "-\t\t\t\t\ttrue);", "-\t\t\t}", "-\t\t}", "-\t\t// May loose some local variable initializations : affecting the local variable attributes", "-\t\tif (mergedInitStateIndex != -1) {", "-\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);", "-\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);", "-\t\t}", "-\t\tif (breakLabel.forwardReferenceCount > 0) {", "-\t\t\tbreakLabel.place();", "-\t\t}", "-", "-\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+ */", "+public void generateCode(BlockScope currentScope, CodeStream codeStream) {", "+\tif ((this.bits & ASTNode.IsReachable) == 0) {", "+\t\treturn;", "+\t}", "+\tint pc = codeStream.position;", "+", "+\t// labels management", "+\tBranchLabel actionLabel = new BranchLabel(codeStream);", "+\tif (this.action != null) actionLabel.tagBits |= BranchLabel.USED;", "+\tactionLabel.place();", "+\tthis.breakLabel.initialize(codeStream);", "+\tboolean hasContinueLabel = this.continueLabel != null;", "+\tif (hasContinueLabel) {", "+\t\tthis.continueLabel.initialize(codeStream);", "+\t}", "+", "+\t// generate action", "+\tif (this.action != null) {", "+\t\tthis.action.generateCode(currentScope, codeStream);", "+\t}", "+\t// continue label (135602)", "+\tif (hasContinueLabel) {", "+\t\tthis.continueLabel.place();", "+\t}", "+\t// generate condition", "+\tConstant cst = this.condition.optimizedBooleanConstant();", "+\tboolean isConditionOptimizedFalse = cst != Constant.NotAConstant && cst.booleanValue() == false;\t\t", "+\tif (isConditionOptimizedFalse){", "+\t\tthis.condition.generateCode(currentScope, codeStream, false);", "+\t} else if (hasContinueLabel) {", "+\t\tthis.condition.generateOptimizedBoolean(", "+\t\t\tcurrentScope,", "+\t\t\tcodeStream,", "+\t\t\tactionLabel,", "+\t\t\tnull,", "+\t\t\ttrue);", "+\t}", "+\t// May loose some local variable initializations : affecting the local variable attributes", "+\tif (this.mergedInitStateIndex != -1) {", "+\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.mergedInitStateIndex);", "+\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.mergedInitStateIndex);", "+\t}", "+\tif (this.breakLabel.forwardReferenceCount > 0) {", "+\t\tthis.breakLabel.place();", "+\t}", "+", "+\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+}"]}], "num": 46241}
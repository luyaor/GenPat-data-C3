{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a120b1cc4d22f01578239771120e0c2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "039a04ac4bb03694152e971433d91da3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "f0bddbf5866cee7c180b234585e87d39e8347897", "commitAfterChange": "ff694ce7a74c47a5570dced3ee759d3447a7dd0f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic synchronized void request(IJob job)", "signatureAfterChange": "  \tpublic synchronized void request(IJob job)", "diff": ["-\t\t\tthis.jobEnd -= this.jobStart;", "-\t\t\tSystem.arraycopy(this.awaitingJobs, this.jobStart, this.awaitingJobs = new IJob[size * 2], 0, this.jobEnd);", "+\t\t\tthis.jobEnd -= this.jobStart; // jobEnd now equals the number of jobs", "+\t\t\tif (this.jobEnd < 50 && this.jobEnd < this.jobStart) {", "+\t\t\t\t// plenty of free space in the queue so shift the remaining jobs to the beginning instead of growing it", "+\t\t\t\tSystem.arraycopy(this.awaitingJobs, this.jobStart, this.awaitingJobs, 0, this.jobEnd);", "+\t\t\t\tfor (int i = this.jobStart; i < size; i++)", "+\t\t\t\t\tthis.awaitingJobs[i] = null;", "+\t\t\t} else {", "+\t\t\t\tSystem.arraycopy(this.awaitingJobs, this.jobStart, this.awaitingJobs = new IJob[size * 2], 0, this.jobEnd);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d42026a2a18020de0b0f5009cee723d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "7daf62bc284b30571754ce8d7fd5c3a7c9740dcb", "commitAfterChange": "b8c9923212bd9598e5d2ca68e0dc316b81a3eccb", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t \tpublic synchronized void request(IJob job)", "signatureAfterChange": " \t \tpublic synchronized void request(IJob job)", "diff": ["-\t\tint size = awaitingJobs.length;", "-\t\tif (++jobEnd == size) { // when growing, relocate jobs starting at position 0", "-\t\t\tjobEnd -= jobStart;", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tawaitingJobs,", "-\t\t\t\tjobStart,", "-\t\t\t\t(awaitingJobs = new IJob[size * 2]),", "-\t\t\t\t0,", "-\t\t\t\tjobEnd);", "-\t\t\tjobStart = 0;", "+\t\tint size = this.awaitingJobs.length;", "+\t\tif (++this.jobEnd == size) { // when growing, relocate jobs starting at position 0", "+\t\t\tthis.jobEnd -= this.jobStart;", "+\t\t\tSystem.arraycopy(this.awaitingJobs, this.jobStart, this.awaitingJobs = new IJob[size * 2], 0, this.jobEnd);", "+\t\t\tthis.jobStart = 0;", "-\t\tawaitingJobs[jobEnd] = job;", "+\t\tthis.awaitingJobs[this.jobEnd] = job;", "-\t\tthis.notifyAll(); // wake up the background thread if it is waiting", "+\t\tnotifyAll(); // wake up the background thread if it is waiting"]}], "num": 7452}
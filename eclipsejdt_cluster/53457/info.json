{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f320db729836d35e1022dce46a13d569", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2056d507ffa552ff5bb215e4712670fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic static SearchPattern createPattern(IJavaElement element, int limitTo)", "signatureAfterChange": " \tpublic static SearchPattern createPattern(IJavaElement element, int limitTo)", "diff": ["+\t\t\t\tint[] wildcards = null;", "-\t\t\t\t\t// SEARCH_15 (start)", "-\t\t\t\t\t\tif ((typeNames = Signature.getTypeArguments(typeSignature)) != null) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\ttypeNames = Signature.getTypeArguments(typeSignature);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcatch (IllegalArgumentException iae) {", "+\t\t\t\t\t\t\t// do nothing", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (typeNames != null) {", "+\t\t\t\t\t\t\twildcards = new int[length];", "-\t\t\t\t\t\t\t\ttypeNames[i] = Signature.toCharArray(typeNames[i]);", "+\t\t\t\t\t\t\t\tchar[] typeName = typeNames[i];", "+\t\t\t\t\t\t\t\tswitch (typeName[0]) {", "+\t\t\t\t\t\t\t\t\tcase Signature.C_STAR:", "+\t\t\t\t\t\t\t\t\t\twildcards[i] = Wildcard.UNBOUND;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase Signature.C_EXTENDS:", "+\t\t\t\t\t\t\t\t\t\twildcards[i] = Wildcard.EXTENDS;", "+\t\t\t\t\t\t\t\t\t\ttypeNames[i] = Signature.toCharArray(CharOperation.subarray(typeName, 1, typeName.length));", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase Signature.C_SUPER:", "+\t\t\t\t\t\t\t\t\t\twildcards[i] = Wildcard.SUPER;", "+\t\t\t\t\t\t\t\t\t\ttypeNames[i] = Signature.toCharArray(CharOperation.subarray(typeName, 1, typeName.length));", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\t\t\twildcards[i] = -1;", "+\t\t\t\t\t\t\t\t\t\ttypeNames[i] = Signature.toCharArray(typeName);", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t// end", "-\t\t\t\t\t\ttypeSimpleName = CharOperation.subarray(typeErasure, 0, lastDot + 1);", "+\t\t\t\t\t\ttypeSimpleName = CharOperation.subarray(typeErasure, lastDot + 1, typeErasure.length);", "+\t\t\t\t\t\t\t\twildcards,", "+\t\t\t\t\t\t\t\twildcards,", "+\t\t\t\t\t\t\t\twildcards,", "+\t\t\t\t\t\t\t\twildcards,", "+\t\t\t\t\t\t\t\twildcards,", "-\t\t\t\t\t\t\t// SEARCH_15 (start)", "-\t\t\t\t\t\t\t// end", "-\t\t\t\t\t\t\t// SEARCH_15 (start)", "-\t\t\t\t\t\t\t// end"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd82e419922d59bfd1f93e4aa4b94329", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tpublic static String getSignature(Binding binding)", "signatureAfterChange": " \t \tpublic static char[] getSignature(Binding binding)", "diff": ["-\tpublic static String getSignature(Binding binding) {", "-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tappendSignature(binding, buffer);", "-\t\treturn buffer.toString();", "-\t}", "+\tpublic static char[] getSignature(Binding binding) {", "+\t\tchar[] result = null;", "+\t\t\t\tTypeBinding typeBinding = (TypeBinding)binding;", "+\t\t\t\tif(typeBinding.isLocalType()) {", "+\t\t\t\t\tLocalTypeBinding localTypeBinding = (LocalTypeBinding)typeBinding;", "+\t\t\t\t\tif(localTypeBinding.isAnonymousType()) {", "+\t\t\t\t\t\ttypeBinding = localTypeBinding.superclass();", "+\t\t\t\t\t\tlocalTypeBinding.setConstantPoolName(typeBinding.sourceName());", "+\t\t\t\tresult = typeBinding.genericTypeSignature();", "+\t\t\t\tbreak;", "+\t\t\tcase BindingIds.METHOD:", "+\t\t\t\tMethodBinding methodBinding = (MethodBinding)binding;", "+\t\t\t\tint oldMod = methodBinding.modifiers;", "+\t\t\t\t//TODO remove the next line when method from binary type will be able to generate generic siganute", "+\t\t\t\tmethodBinding.modifiers |= CompilerModifiers.AccGenericSignature;", "+\t\t\t\tresult = methodBinding.genericSignature(); ", "+\t\t\t\tif(result == null) {", "+\t\t\t\t\tresult = methodBinding.signature();", "+\t\t\t\t}", "+\t\t\t\tmethodBinding.modifiers = oldMod;", "+\t\tresult = CharOperation.replaceOnCopy(result, '/', '.');", "+\t\treturn result;"]}], "num": 53457}
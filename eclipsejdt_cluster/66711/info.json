{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ede8577e16a3b7d3791f8124f4bbad3d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2858e0609ac0ccfcfa0aafd7c54244cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "9a9af4e642a47932f3bfeeec13330339dcc48de3", "commitAfterChange": "c3ad34ec44b228feb09e91ff5ac00fc774236d05", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " boolean doTypeVariablesClash(MethodBinding one, MethodBinding substituteTwo)", "signatureAfterChange": " boolean doTypeVariablesClash(MethodBinding one, MethodBinding substituteTwo)", "diff": ["-\tTypeBinding[] currentVars = one.typeVariables;", "-\tTypeBinding[] inheritedVars = substituteTwo.original().typeVariables;", "-\treturn currentVars.length != inheritedVars.length && currentVars.length > 0;", "+\treturn one.typeVariables.length > 0 && !one.areTypeVariableErasuresEqual(substituteTwo.original());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "341bc3bb788183c68230d671b2f0ad4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "ebf0740a88fe14f88af9807da3fc8260efdeeb0a", "commitAfterChange": "56cd7be7209c3b63ac72922c3a342e501721fcf5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["-\t\t\t\t\tTypeVariableBinding[] typeVariables = inheritedMethod.typeVariables;", "+\t\t\t\t\tTypeVariableBinding[] typeVariables = inheritedMethod.original().typeVariables;", "-\t\t\tTypeVariableBinding[] typeVariables = currentMethod.typeVariables;", "+\t\t\tTypeVariableBinding[] typeVariables = currentMethod.original().typeVariables;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4912203010bbfa2d6a91e4c7ca746d27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "0b29e3e291fcb69cbd668b09f597694d50edc0fe", "commitAfterChange": "710ea956533eb69ff7d09c9dabc60911e72310bd", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["-\t\t\t\t\t\t\tif (!method.areTypeVariableErasuresEqual(method2))", "-\t\t\t\t\t\t\t\tif (method.typeVariables != NoTypeVariables && method2.typeVariables != NoTypeVariables)", "+\t\t\t\t\t\t\tif (method.typeVariables != NoTypeVariables && method2.typeVariables != NoTypeVariables)", "+\t\t\t\t\t\t\t\tif (!method.areTypeVariableErasuresEqual(method2))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64176cfc6a9eaca1b56aae4e58335107", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t\tpublic TypeBinding substitute(TypeVariableBinding typeVariable)", "signatureAfterChange": " \t\tpublic TypeBinding substitute(TypeVariableBinding typeVariable)", "diff": ["-\t\t\tif (typeVariable.rank >= this.variables.length || this.variables[typeVariable.rank] != typeVariable) {   // not kosher, don't touch.", "+\t\t\tif (typeVariable.rank >= this.variables.length || TypeBinding.notEquals(this.variables[typeVariable.rank], typeVariable)) {   // not kosher, don't touch."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "711191a6326553bb90cc791b0b7e9798", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "6516571b08ef2b8a3ca79436b6faa225bea91656", "commitAfterChange": "553757ef1f28345589d7d0245754e73b7e50c2fd", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " boolean doTypeVariablesClash(MethodBinding one, MethodBinding substituteTwo)", "signatureAfterChange": " boolean doTypeVariablesClash(MethodBinding one, MethodBinding substituteTwo)", "diff": ["-\treturn currentVars.length != inheritedVars.length", "-\t\t&& currentVars.length > 0 && inheritedVars.length > 0; // must match unless all are replaced", "-//\t\t&& currentVars.length > 0;", "+\treturn currentVars.length != inheritedVars.length && currentVars.length > 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bdaa5da2964976f7764cc8fb31c1004", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "8816a21753c2d607b8868597ac43f18ef7dd2d50", "commitAfterChange": "3af20c8fa9116cf8e52dcf498c1b4eea06f21754", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic void inferFromExpectedType(TypeBinding expectedType, Scope scope)", "signatureAfterChange": " \t \tpublic void inferFromExpectedType(TypeBinding expectedType, Scope scope)", "diff": ["-\t    TypeVariableBinding[] originalVariables = this.original().typeVariables;", "+\t    TypeVariableBinding[] originalVariables = this.originalMethod.typeVariables; // immediate parent (could be a parameterized method)", "-\t\tthis.returnType = this.substitute(this.returnType);", "+\t\tthis.returnType = Scope.substitute(this, this.returnType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91fde266c316e477280fd689a291a2a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "fb10f5b6f5b206adc99f69bee6a0a9b1052b5fcc", "commitAfterChange": "d7f3937eb856f99bfe441e00382ecd34ff8ecdb2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " MethodBinding computeSubstituteMethod(MethodBinding inheritedMethod, MethodBinding currentMethod)", "signatureAfterChange": " MethodBinding computeSubstituteMethod(MethodBinding inheritedMethod, MethodBinding currentMethod)", "diff": ["+\tif (currentMethod.parameters.length != inheritedMethod.parameters.length) return null; // no match", "-\tTypeVariableBinding[] inheritedTypeVariables = inheritedMethod.typeVariables();", "+\tTypeVariableBinding[] inheritedTypeVariables = inheritedMethod.typeVariables;", "-\tTypeVariableBinding[] typeVariables = currentMethod == null ? NoTypeVariables : currentMethod.typeVariables;", "-", "+\tTypeVariableBinding[] typeVariables = currentMethod.typeVariables;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "929ff1964ed586f67d065c0d96cded5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "e560c4f056e8f81d7e6811700478b4a331f39a81", "commitAfterChange": "82fb6745d0f2bc2c9b5e4740da70b2e364d6955a", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " protected void updateMatch(ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, boolean patternHasTypeParameters, int depth, MatchLocator locator)", "signatureAfterChange": " protected void updateMatch(ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, boolean patternHasTypeParameters, int depth, MatchLocator locator)", "diff": ["-\tboolean isRaw = parameterizedBinding.isRawType()|| (argumentsBindings==null && parameterizedBinding.type.isGenericType());", "+\tboolean isRaw = parameterizedBinding.isRawType()|| (argumentsBindings==null && parameterizedBinding.genericType().isGenericType());", "-\t\t\tTypeVariableBinding[] typeVariables = parameterizedBinding.type.typeVariables();", "+\t\t\tTypeVariableBinding[] typeVariables = parameterizedBinding.genericType().typeVariables();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4c3ed5fae64cfec53287e4eb8017afb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private MethodBinding createMethod(IBinaryMethod method, long sourceLevel)", "signatureAfterChange": " private MethodBinding createMethod(IBinaryMethod method, long sourceLevel)", "diff": ["-\tReferenceBinding[] exceptions = NoExceptions;", "-\tTypeBinding[] parameters = NoParameters;", "-\tTypeVariableBinding[] typeVars = NoTypeVariables;", "+\tReferenceBinding[] exceptions = Binding.NO_EXCEPTIONS;", "+\tTypeBinding[] parameters = Binding.NO_PARAMETERS;", "+\tTypeVariableBinding[] typeVars = Binding.NO_TYPE_VARIABLES;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbc737e8f4b383659bc9382ef118fee9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "6eb32d06a01a4c0cd88aa5091b2c41c8c1c0f654", "commitAfterChange": "e2f0c62f19f84a64c659ab6f8501b4d7ba65723d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "diff": ["+\t\tTypeVariableBinding[] typeVariables = method.typeVariables;", "-\t\t\t&& genericTypeArguments == null)", "+\t\t\t&& genericTypeArguments == null", "+\t\t\t&& typeVariables == NoTypeVariables)", "-\t\tTypeVariableBinding[] typeVariables = method.typeVariables;"]}], "num": 66711}
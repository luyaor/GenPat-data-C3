{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9bccb689ebc4f7b1053f7b6cc1129245", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cef41aee772e4cfb72b152060ae5088", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "6180586710a957df9f07a8a5503c93267544711b", "commitAfterChange": "2bf8d876e4d66bd0fa9172a177289e82abf5e2a4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \tpublic boolean performConcurrentJob(\r \t\tIJob searchJob,\r \t\tint waitingPolicy,\r \t\tIProgressMonitor progress)", "signatureAfterChange": "\r \tpublic boolean performConcurrentJob(\r \t\tIJob searchJob,\r \t\tint waitingPolicy,\r \t\tIProgressMonitor progress)", "diff": ["-\t\t\tSystem.out.println(\"-> performing concurrent job (\"+ Thread.currentThread()+\"): START - \" + searchJob); //$NON-NLS-1$//$NON-NLS-2$\r", "+\t\t\tJobManager.log(\"STARTING concurrent job - \" + searchJob); //$NON-NLS-1$\r", "-\t\t\t\t\t\tSystem.out.println(\r", "-\t\t\t\t\t\t\t\"-> performing concurrent job (\"+ Thread.currentThread()+\"): NOT READY - ForceImmediate - \" + searchJob);//$NON-NLS-1$//$NON-NLS-2$\r", "+\t\t\t\t\t\tJobManager.log(\"-> NOT READY - Forcing immediate - \" + searchJob);//$NON-NLS-1$\r", "-\t\t\t\t\t\tif (VERBOSE)\r", "-\t\t\t\t\t\t\tSystem.out.println(\"-> performing concurrent job (\"+ Thread.currentThread()+\"): END - \" + searchJob); //$NON-NLS-1$//$NON-NLS-2$\r", "+\t\t\t\t\tif (VERBOSE)\r", "+\t\t\t\t\t\tJobManager.log(\"DONE concurrent job - \" + searchJob); //$NON-NLS-1$\r", "-\t\t\t\t\t\tSystem.out.println(\r", "-\t\t\t\t\t\t\t\"-> performing concurrent job (\"+ Thread.currentThread()+\"): NOT READY - CancelIfNotReady - \" + searchJob); //$NON-NLS-1$//$NON-NLS-2$\r", "+\t\t\t\t\t\tJobManager.log(\"-> NOT READY - Cancelling - \" + searchJob); //$NON-NLS-1$\r", "+\t\t\t\t\tif (VERBOSE)\r", "+\t\t\t\t\t\tJobManager.log(\"CANCELLED concurrent job - \" + searchJob); //$NON-NLS-1$\r", "-\t\t\t\t\t\t\t\t\tSystem.out.println(\r", "-\t\t\t\t\t\t\t\t\t\t\"-> performing concurrent job (\"+ Thread.currentThread()+\"): NOT READY - WaitUntilReady - \" + searchJob);//$NON-NLS-1$//$NON-NLS-2$\r", "+\t\t\t\t\t\t\t\t\tJobManager.log(\"-> NOT READY - Waiting until ready - \" + searchJob);//$NON-NLS-1$\r", "-\t\t\tSystem.out.println(\"-> performing concurrent job (\"+ Thread.currentThread()+\"): END - \" + searchJob); //$NON-NLS-1$//$NON-NLS-2$\r", "+\t\t\tJobManager.log(\"DONE concurrent job - \" + searchJob); //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffd04a65df5c3c8ef2b9d70643cf6fae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "182357267e3a6e8da6ab4039239adfa51c4ddc26", "commitAfterChange": "174f89aae07a92e58011875516697182fd7f3ebd", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \tpublic boolean performConcurrentJob(\r \t\tIJob searchJob,\r \t\tint waitingPolicy,\r \t\tIProgressMonitor progress)", "signatureAfterChange": "\r \tpublic boolean performConcurrentJob(\r \t\tIJob searchJob,\r \t\tint waitingPolicy,\r \t\tIProgressMonitor progress)", "diff": ["-\t\t\t\t\twhile ((awaitingWork = awaitingJobsCount()) > 0) {\r", "-\t\t\t\t\t\tif (subProgress != null && subProgress.isCanceled())\r", "-\t\t\t\t\t\t\tthrow new OperationCanceledException();\r", "-\t\t\t\t\t\tcurrentJob = currentJob();\r", "-\t\t\t\t\t\t// currentJob can be null when jobs have been added to the queue but job manager is not enabled\r", "-\t\t\t\t\t\tif (currentJob != null && currentJob != previousJob) {\r", "-\t\t\t\t\t\t\tif (VERBOSE)\r", "-\t\t\t\t\t\t\t\tSystem.out.println(\r", "-\t\t\t\t\t\t\t\t\t\"-> performing concurrent job (\"+ Thread.currentThread()+\"): NOT READY - WaitUntilReady - \" + searchJob);//$NON-NLS-1$//$NON-NLS-2$\r", "-\t\t\t\t\t\t\tif (subProgress != null) {\r", "-\t\t\t\t\t\t\t\tsubProgress.subTask(\r", "-\t\t\t\t\t\t\t\t\tUtil.bind(\"manager.filesToIndex\", Integer.toString(awaitingWork))); //$NON-NLS-1$\r", "-\t\t\t\t\t\t\t\tsubProgress.worked(1);\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tpreviousJob = currentJob;\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\tsynchronized(this) {\r", "+\t\t\t\t\t\t\tthis.awaitingClients++;\r", "-\t\t\t\t\t\ttry {\r", "-\t\t\t\t\t\t\tThread.currentThread().sleep(50);\r", "-\t\t\t\t\t\t} catch (InterruptedException e) {\r", "+\t\t\t\t\t\twhile ((awaitingWork = awaitingJobsCount()) > 0) {\r", "+\t\t\t\t\t\t\tif (subProgress != null && subProgress.isCanceled())\r", "+\t\t\t\t\t\t\t\tthrow new OperationCanceledException();\r", "+\t\t\t\t\t\t\tcurrentJob = currentJob();\r", "+\t\t\t\t\t\t\t// currentJob can be null when jobs have been added to the queue but job manager is not enabled\r", "+\t\t\t\t\t\t\tif (currentJob != null && currentJob != previousJob) {\r", "+\t\t\t\t\t\t\t\tif (VERBOSE)\r", "+\t\t\t\t\t\t\t\t\tSystem.out.println(\r", "+\t\t\t\t\t\t\t\t\t\t\"-> performing concurrent job (\"+ Thread.currentThread()+\"): NOT READY - WaitUntilReady - \" + searchJob);//$NON-NLS-1$//$NON-NLS-2$\r", "+\t\t\t\t\t\t\t\tif (subProgress != null) {\r", "+\t\t\t\t\t\t\t\t\tsubProgress.subTask(\r", "+\t\t\t\t\t\t\t\t\t\tUtil.bind(\"manager.filesToIndex\", Integer.toString(awaitingWork))); //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t\t\tsubProgress.worked(1);\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\tpreviousJob = currentJob;\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\t\tThread.currentThread().sleep(50);\r", "+\t\t\t\t\t\t\t} catch (InterruptedException e) {\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} finally {\r", "+\t\t\t\t\t\tsynchronized(this) {\r", "+\t\t\t\t\t\t\tthis.awaitingClients--;\r"]}], "num": 1243}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "207f3ede91081c39554c4d6108bace95", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "061313541a3c9c523e1ab0ed8111a52a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "9a099ab7eaca6de468f171f604d52045eb064822", "commitAfterChange": "245938f53ddff468739c34085f55dc93baea5c7e", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "  \tprotected void setUp() throws Exception", "signatureAfterChange": "  \tprotected void setUp() throws Exception", "diff": ["+\t\tString previousClassName = CURRENT_CLASS_NAME;", "+\t\tif (isFirst()) {", "+\t\t\tIPath dir = new Path(Util.getOutputDirectory());", "+\t\t\tif (previousClassName != null) {", "+\t\t\t\t// Minimize resilient files by removing previous test class global output dir", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(previousClassName, \".\");", "+\t\t\t\tIPath previousDir = dir;", "+\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\tpreviousDir = previousDir.append(tokenizer.nextToken());", "+\t\t\t\t}", "+\t\t\t\tUtil.rmdir(new File(previousDir.toOSString()));", "+\t\t\t}", "+\t\t\tStringTokenizer tokenizer = new StringTokenizer(CURRENT_CLASS_NAME, \".\");", "+\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\tdir = dir.append(tokenizer.nextToken());", "+\t\t\t}", "+\t\t\tOUTPUT_DIR =  dir.append(\"output\").toOSString();", "+\t\t\tSOURCE_DIRECTORY = dir.append(\"source\").toOSString();", "+\t\t\tJAVAC_OUTPUT_DIR = dir.append(\"javac\").toOSString();", "+\t\t}", "+", "-\t\t\tif (!getClass().getName().equals(CURRENT_CLASS_NAME)) {", "+\t\t\tif (isFirst()) {", "-\t        Logger versionLogger = new Logger(compileProcess.getErrorStream(), \"\");", "-\t        // PREMATURE implement consistent error policy", "-\t        versionLogger.start();", "-\t        compileProcess.waitFor();", "+\t\t\t        Logger versionLogger = new Logger(compileProcess.getErrorStream(), \"\");", "+\t\t\t        // PREMATURE implement consistent error policy", "+\t\t\t        versionLogger.start();", "+\t\t\t        compileProcess.waitFor();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d571db511844370affc0f520eac169b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AttachSourceTests.java", "commitBeforeChange": "ff3d786f8b733e34cd64f8ef3efff230a2dbff42", "commitAfterChange": "d8e17e252326ade78baaea3eb05d18d16eaf07ae", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void testAttachSource() throws CoreException", "signatureAfterChange": " public void testDetectRootPath() throws JavaModelException", "diff": ["-public void testAttachSource() throws CoreException {", "-\tthis.attachSource(this.root, \"/AttachSourceTests/attachsrc.zip\", null);", "+ */", "+public void testDetectRootPath() throws JavaModelException {", "+\tIJavaProject project = getJavaProject(\"AttachSourceTests\");", "+\tIFile jar = (IFile) project.getProject().findMember(\"attach2.jar\");", "+\tIFile srcZip=(IFile) project.getProject().findMember(\"attach2src.zip\");", "+\tIPackageFragmentRoot root = project.getPackageFragmentRoot(jar);", "+\troot.attachSource(srcZip.getFullPath(), null, null);", "+", "+\t// ensure root path is detected", "+\tIPath rootSAPath= root.getSourceAttachmentRootPath();", "+\tassertEquals(\"Unexpected source attachment root path for \" + root.getPath(), \"src/nested\", rootSAPath.toString());", "+\t", "+\t// ensure source can be retrieved", "+\tIClassFile cf = root.getPackageFragment(\"x.y\").getClassFile(\"B.class\");", "+\tassertTrue(\"source code does not exist for the entire attached compilation unit\", cf.getSource() != null);", "+\t", "+\t// ensure root path is recomputed", "+\troot.close();", "+\tcf = root.getPackageFragment(\"x.y\").getClassFile(\"B.class\");", "+\tassertTrue(\"source code does not exist for the entire attached compilation unit\", cf.getSource() != null);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ed74839ccb54a3695cf7621531120f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelStatus.java", "commitBeforeChange": "9c377922fe401713f5937bb475dd1fc1bedb4d8f", "commitAfterChange": "6a9a7eb1601e3179b18eecef90d5d4fdfbc52bfa", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic String getMessage()", "signatureAfterChange": " \tpublic String getMessage()", "diff": ["-\t\t\t\t\treturn Util.bind(\"classpath.unboundContainerPath\", description); //$NON-NLS-1$", "+\t\t\t\t\treturn Util.bind(\"classpath.unboundContainerPath\", description, javaProject.getElementName()); //$NON-NLS-1$", "-\t\t\t\t\treturn Util.bind(\"classpath.invalidContainer\", description); //$NON-NLS-1$", "+\t\t\t\t\treturn Util.bind(\"classpath.invalidContainer\", description, javaProject.getElementName()); //$NON-NLS-1$", "-\t\t\t\t\treturn Util.bind(\"classpath.unboundVariablePath\", path.makeRelative().toString()); //$NON-NLS-1$", "+\t\t\t\tjavaProject = (IJavaProject)elements[0];", "+\t\t\t\treturn Util.bind(\"classpath.unboundVariablePath\", path.makeRelative().toString(), javaProject.getElementName()); //$NON-NLS-1$", "-\t\t\t\t\tjavaProject = (IJavaProject)elements[0];", "-\t\t\t\t\treturn Util.bind(\"classpath.cycle\", javaProject.getElementName()); //$NON-NLS-1$", "+\t\t\t\tjavaProject = (IJavaProject)elements[0];", "+\t\t\t\treturn Util.bind(\"classpath.cycle\", javaProject.getElementName()); //$NON-NLS-1$", "-\t\t\t\t\treturn Util.bind(\"classpath.disabledExclusionPatterns\", path.makeRelative().toString()); //$NON-NLS-1$", "+\t\t\t\tjavaProject = (IJavaProject)elements[0];", "+\t\t\t\tString projectName = javaProject.getElementName();", "+\t\t\t\tIPath newPath = path;", "+\t\t\t\tif (path.segment(0).toString().equals(projectName)) {", "+\t\t\t\t\tnewPath = path.removeFirstSegments(1);", "+\t\t\t\t}", "+\t\t\t\treturn Util.bind(\"classpath.disabledExclusionPatterns\", newPath.makeRelative().toString(), projectName); //$NON-NLS-1$", "-\t\t\t\t\treturn Util.bind(\"classpath.disabledMultipleOutputLocations\", path.makeRelative().toString()); //$NON-NLS-1$", "+\t\t\t\tjavaProject = (IJavaProject)elements[0];", "+\t\t\t\tprojectName = javaProject.getElementName();", "+\t\t\t\tnewPath = path;", "+\t\t\t\tif (path.segment(0).toString().equals(projectName)) {", "+\t\t\t\t\tnewPath = path.removeFirstSegments(1);", "+\t\t\t\t}", "+\t\t\t\treturn Util.bind(\"classpath.disabledMultipleOutputLocations\", newPath.makeRelative().toString(), projectName); //$NON-NLS-1$", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f03788bb2e62c75c3f1aa86fbed2a27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "e0259efe596fb3e88871acf616821dc2f984a25a", "commitAfterChange": "6ccbe6e7a1eb8a287ad2e183536fbec86fa90b93", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test0040() throws JavaModelException", "signatureAfterChange": " \tpublic void test0040() throws JavaModelException", "diff": ["+\t\tASTNode node = getASTNode(compilationUnit, 0, 0);", "+\t\tassertEquals(\"Not a method declaration\", ASTNode.METHOD_DECLARATION, node.getNodeType());", "+\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) node;", "+\t\tList typeParameters = methodDeclaration.typeParameters();", "+\t\tassertEquals(\"wrong size\", 1, typeParameters.size());", "+\t\tTypeParameter parameter = (TypeParameter) typeParameters.get(0);", "+\t\tIBinding binding = parameter.resolveBinding();", "+\t\tassertNotNull(\"No binding\", binding);", "+\t\tassertEquals(\"wrong type\", IBinding.TYPE, binding.getKind());", "+\t\tassertEquals(\"wrong key\", \"T:test0040/A/test0040.Tfoo()\", binding.getKey());", "+\t\tType returnType = methodDeclaration.getReturnType2();", "+\t\tIBinding binding2 = returnType.resolveBinding();", "+\t\tassertNotNull(\"No binding\", binding2);", "+\t\tassertEquals(\"wrong type\", IBinding.TYPE, binding2.getKind());", "+\t\tassertEquals(\"wrong key\", \"T:test0040/A/test0040.Tfoo()\", binding2.getKey());\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52d08029e00141f0154c32933856a6eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "4b3b23614cfca32dd53fa7e699914bb6d6883a79", "commitAfterChange": "497b69b47b38f18098b3c3fae687e15309c6bbc5", "methodNumberBeforeChange": 234, "methodNumberAfterChange": 234, "signatureBeforeChange": " \tpublic void test0220() throws JavaModelException", "signatureAfterChange": " \tpublic void test0220() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Wrong size\", 0, body.statements().size());", "-\t\tassertTrue(\"Not recovered\", isRecovered(body));", "+\t\tList statements = body.statements();", "+\t\tassertEquals(\"Wrong size\", 1, statements.size());", "+\t\tassertTrue(\"Recovered\", !isRecovered(body));", "+\t\t", "+\t\tStatement statement = (Statement)statements.get(0);", "+\t\tassertEquals(\"Not an enhanced for statement\", ASTNode.ENHANCED_FOR_STATEMENT, statement.getNodeType());", "+\t\tEnhancedForStatement enhancedForStatement = (EnhancedForStatement) statement;", "+\t\tStatement forBody = enhancedForStatement.getBody();", "+\t\tassertNotNull(\"No body\", forBody);", "+\t\tassertEquals(\"Not a block\", ASTNode.BLOCK, forBody.getNodeType());", "+\t\t", "+\t\tstatements = ((Block)forBody).statements();", "+\t\tassertEquals(\"Wrong size\", 1, statements.size());", "+\t\tstatement = (Statement)statements.get(0);", "+\t\tassertEquals(\"Not an try statement\", ASTNode.TRY_STATEMENT, statement.getNodeType());", "+\t\tTryStatement tryStatement = (TryStatement) statement;", "+\t\tBlock finallyBlock = tryStatement.getFinally();", "+\t\tassertNotNull(\"No finally block\", finallyBlock);", "+\t\tassertTrue(\"Not recovered\", isRecovered(finallyBlock));", "+\t\t", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "757867f8479ed6e6a1a73436298007f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTestAST3_2.java", "commitBeforeChange": "0d655eb7c5734b22e978a732e9dc70711c6565d1", "commitAfterChange": "e8e6bc5be64017fb64d9068aa06ee69d945c7195", "methodNumberBeforeChange": 214, "methodNumberAfterChange": 214, "signatureBeforeChange": " \tpublic void _test0580() throws JavaModelException", "signatureAfterChange": " \tpublic void test0580() throws JavaModelException", "diff": ["-\tpublic void _test0580() throws JavaModelException {", "+\tpublic void test0580() throws JavaModelException {", "+\t\t\tString source = \"package p;\\n\" +", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"\td String[][]tab;\\n\" +", "+\t\t\t\"}\";", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"\td\\n\" +", "-\t\t\t\t\"\t\\n\" +", "-\t\t\t\t\"\tString[][]tab;\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\tworkingCopy);", "+\t\t\t\tsource,", "+\t\t\t\tworkingCopy,", "+\t\t\t\tfalse);", "+\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\t\tnode = getASTNode(compilationUnit, 0, 0);", "+\t\t\tassertEquals(\"wrong type\", ASTNode.FIELD_DECLARATION, node.getNodeType());", "+\t\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) node;", "+\t\t\tcheckSourceRange(fieldDeclaration, \"d String[][]\", source.toCharArray());", "+\t\t\tType type = fieldDeclaration.getType();", "+\t\t\tassertTrue(\"Not a simple type\", type.isSimpleType());", "+\t\t\tList fragments = fieldDeclaration.fragments();", "+\t\t\tassertEquals(\"Wrong size\", 1, fragments.size());", "+\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "+\t\t\tassertEquals(\"Wrong extended dimensions\", 2, fragment.getExtraDimensions());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7961778436351d6fc3a16f8dc2699908", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java", "commitBeforeChange": "6eb04387ef3ee5335f206eb99b3c936de2847d3d", "commitAfterChange": "b01f0952648a27a3dbc985907cc5ced8ba10ed91", "methodNumberBeforeChange": 213, "methodNumberAfterChange": 213, "signatureBeforeChange": " \tpublic void test0608() throws CoreException", "signatureAfterChange": " \tpublic void test0608() throws CoreException", "diff": ["-\t\t\tASTNode cu = buildAST(null, workingCopy, false, true);", "-\t\t\tassertNotNull(\"Should get an AST\", cu);", "+\t\t\tASTNode node = buildAST(null, workingCopy, false, true);", "+\t\t\tassertNotNull(\"Should get an AST\", node);", "+\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\t\tnode = getASTNode((CompilationUnit) node, 0, 0, 0);", "+\t\t\tassertEquals(\"Not a for statement\", ASTNode.FOR_STATEMENT, node.getNodeType());", "+\t\t\tForStatement forStatement = (ForStatement) node;", "+\t\t\tList initializers = forStatement.initializers();", "+\t\t\tassertEquals(\"Wrong size\", 1, initializers.size());", "+\t\t\tVariableDeclarationExpression expression = (VariableDeclarationExpression) initializers.get(0);", "+\t\t\tList fragments = expression.fragments();", "+\t\t\tassertEquals(\"Wrong size\", 1, fragments.size());", "+\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "+\t\t\tassertEquals(\"Wrong name\", \"i\", fragment.getName().getIdentifier());", "+\t\t\tassertTrue(\"Should be a recovered fragment\", isRecovered(expression));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88fe963248ed9713304859dbdcb47186", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java", "commitBeforeChange": "1e3d7a95c39c7aac1cb5e09a719efdb30a9bf701", "commitAfterChange": "1df126b77b08d354ebfd5eda6a44830d9266b61e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate JavaElement getUnresolvedJavaElement()", "signatureAfterChange": "  \tprivate JavaElement getUnresolvedJavaElement()", "diff": ["+\t\tint modifiers = 0;", "-\t\t\tSimpleName simpleName = ((SingleVariableDeclaration) localVar).getName();", "+\t\t\tfinal SingleVariableDeclaration singleVariableDeclaration = (SingleVariableDeclaration) localVar;", "+\t\t\tSimpleName simpleName = singleVariableDeclaration.getName();", "+\t\t\tmodifiers = singleVariableDeclaration.getModifiers();", "+\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) localVar;", "+\t\t\tfinal ASTNode parent = fragment.getParent();", "+\t\t\tswitch (parent.getNodeType()) {", "+\t\t\t\tcase ASTNode.VARIABLE_DECLARATION_EXPRESSION :", "+\t\t\t\t\tVariableDeclarationExpression expression = (VariableDeclarationExpression) parent;", "+\t\t\t\t\tmodifiers = expression.getModifiers();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ASTNode.VARIABLE_DECLARATION_STATEMENT :", "+\t\t\t\t\tVariableDeclarationStatement statement = (VariableDeclarationStatement) parent;", "+\t\t\t\t\tmodifiers = statement.getModifiers();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ASTNode.FIELD_DECLARATION :", "+\t\t\t\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) parent;", "+\t\t\t\t\tmodifiers = fieldDeclaration.getModifiers();", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\tfinal LocalVariableBinding localVariableBinding = (LocalVariableBinding) this.binding;", "-\t\t\tReferenceContext referenceContext = ((LocalVariableBinding) this.binding).declaringScope.referenceContext();", "+\t\t\tReferenceContext referenceContext = localVariableBinding.declaringScope.referenceContext();", "-\t\treturn new LocalVariable(parent, localVar.getName().getIdentifier(), sourceStart, sourceEnd, nameStart, nameStart+nameLength-1, new String(typeSig), ((LocalVariableBinding) this.binding).declaration.annotations);", "+\t\treturn new LocalVariable(", "+\t\t\t\tparent,", "+\t\t\t\tlocalVar.getName().getIdentifier(),", "+\t\t\t\tsourceStart,", "+\t\t\t\tsourceEnd,", "+\t\t\t\tnameStart,", "+\t\t\t\tnameStart+nameLength-1,", "+\t\t\t\tnew String(typeSig),", "+\t\t\t\tlocalVariableBinding.declaration.annotations,", "+\t\t\t\tmodifiers,", "+\t\t\t\t(localVariableBinding.tagBits & TagBits.IsArgument) != 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cdddb0125da8f7510fbc423cf3ba486", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/PreferencesTests.java", "commitBeforeChange": "6a39aeee024a65d73e9084e99bead655e3ded072", "commitAfterChange": "30a0d8b166ac2fa2854a231544dfecb8e382982a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void testFactoryPathEncodingAndDecoding() throws Exception", "signatureAfterChange": " \t \tpublic void testFactoryPathEncodingAndDecoding() throws Exception", "diff": ["-\t\tMap<FactoryContainer, Boolean> factories = new LinkedHashMap<FactoryContainer, Boolean>();", "-\t\tFactoryContainer jarFactory = FactoryPath.newExtJarFactoryContainer(new File(\"C:/test.jar\")); //$NON-NLS-1$", "-\t\tFactoryContainer pluginFactory = FactoryPath.getPluginFactoryContainer(\"org.eclipse.jdt.apt.tests\"); //$NON-NLS-1$", "-\t\tfactories.put(jarFactory, true);", "-\t\tfactories.put(pluginFactory, false);", "+\t\tMap<FactoryContainer, FactoryPath.Attributes> factories = new LinkedHashMap<FactoryContainer, FactoryPath.Attributes>();", "+\t\tFactoryContainer jarFactory1 = FactoryPathUtil.newExtJarFactoryContainer(new File(\"C:/test1.jar\")); //$NON-NLS-1$", "+\t\tFactoryPath.Attributes jarFPA1 = new FactoryPath.Attributes(true, false);", "+\t\tFactoryContainer jarFactory2 = FactoryPathUtil.newExtJarFactoryContainer(new File(\"C:/test2.jar\")); //$NON-NLS-1$", "+\t\tFactoryPath.Attributes jarFPA2 = new FactoryPath.Attributes(true, true);", "+\t\tFactoryContainer pluginFactory = FactoryPathUtil.getPluginFactoryContainer(\"org.eclipse.jdt.apt.tests\"); //$NON-NLS-1$", "+\t\tFactoryPath.Attributes pluginFPA = new FactoryPath.Attributes(false, false);", "+\t\tfactories.put(jarFactory1, jarFPA1);", "+\t\tfactories.put(jarFactory2, jarFPA2);", "+\t\tfactories.put(pluginFactory, pluginFPA);", "-\t\tassertEquals(2, factories.size());", "+\t\tassertEquals(3, factories.size());", "-\t\tfor (Map.Entry<FactoryContainer, Boolean> entry : factories.entrySet()) {", "+\t\tfor (Map.Entry<FactoryContainer, FactoryPath.Attributes> entry : factories.entrySet()) {", "-\t\t\tif (index == 0) {", "-\t\t\t\t// jar", "+\t\t\tswitch (index) {", "+\t\t\tcase 0:", "+\t\t\t\t// jar1", "-\t\t\t\tassertEquals(Boolean.TRUE, entry.getValue());", "-\t\t\t}", "-\t\t\telse {", "+\t\t\t\tassertTrue(entry.getValue().isEnabled());", "+\t\t\t\tassertFalse(entry.getValue().runInBatchMode());", "+\t\t\t\tbreak;", "+\t\t\tcase 1:", "+\t\t\t\t// jar2", "+\t\t\t\tassertEquals(FactoryType.EXTJAR, container.getType());", "+\t\t\t\tassertTrue(entry.getValue().isEnabled());", "+\t\t\t\tassertTrue(entry.getValue().runInBatchMode());", "+\t\t\t\tbreak;", "+\t\t\tcase 2:", "-\t\t\t\tassertEquals(Boolean.FALSE, entry.getValue());", "+\t\t\t\tassertFalse(entry.getValue().isEnabled());", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tfail(\"FactoryPath had an unexpected number of entries: \" + (index + 1));", "-\t\t\t", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b49f835633740bb9d942542e5d087af1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "43bf4677e87b76a460506f46871dac9cbe16b176", "commitAfterChange": "f13a740e3b814a194962fd0ef85df91efde745be", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tprivate void findLocalMethodDeclarations( \t\tchar[] methodName, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType)", "signatureAfterChange": " \tprivate void findLocalMethodDeclarations( \t\tchar[] methodName, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType)", "diff": ["-\t\t\tchar[][] parameterTypeNames = new char[length][];", "+\t\t\tchar[][] parameterFullTypeNames = new char[length][];", "-\t\t\t\tparameterTypeNames[i] = type.qualifiedSourceName();", "+\t\t\t\tparameterFullTypeNames[i] = type.qualifiedSourceName();", "-\t\t\tchar[][] parameterNames = findMethodParameterNames(method,parameterTypeNames);", "+\t\t\tchar[][] parameterNames = findMethodParameterNames(method,parameterFullTypeNames);", "-\t\t\t\tchar[] returnTypeName = method.returnType.qualifiedSourceName();", "-\t\t\t\tif(mustQualifyType(returnPackageName, returnTypeName)) {", "-\t\t\t\t\tcompletion.append(CharOperation.concat(returnPackageName, returnTypeName,'.'));", "+\t\t\t\tchar[] returnFullTypeName = method.returnType.qualifiedSourceName();", "+\t\t\t\t", "+\t\t\t\tTypeBinding returnLeafType = method.returnType.leafComponentType();", "+\t\t\t\tif(!returnLeafType.isBaseType() && mustQualifyType(", "+\t\t\t\t\t\treturnPackageName,", "+\t\t\t\t\t\treturnLeafType.sourceName(),", "+\t\t\t\t\t\treturnLeafType.isMemberType() ? returnLeafType.enclosingType().qualifiedSourceName() : null,", "+\t\t\t\t\t\t((ReferenceBinding)returnLeafType).modifiers)) {", "+\t\t\t\t\tcompletion.append(CharOperation.concat(returnPackageName, returnFullTypeName,'.'));", "-\t\t\t\t\tif(mustQualifyType(parameterPackageNames[i], parameterTypeNames[i])){", "-\t\t\t\t\t\tcompletion.append(CharOperation.concat(parameterPackageNames[i], parameterTypeNames[i], '.'));", "+\t\t\t\t\tTypeBinding type = method.parameters[i];", "+\t\t\t\t\tTypeBinding leafType = type.leafComponentType();", "+\t\t\t\t\tif(!leafType.isBaseType() && mustQualifyType(", "+\t\t\t\t\t\t\tparameterPackageNames[i],", "+\t\t\t\t\t\t\tleafType.sourceName(),", "+\t\t\t\t\t\t\tleafType.isMemberType() ? leafType.enclosingType().qualifiedSourceName() : null,", "+\t\t\t\t\t\t\t((ReferenceBinding)leafType).modifiers)){", "+\t\t\t\t\t\tcompletion.append(CharOperation.concat(parameterPackageNames[i], parameterFullTypeNames[i], '.'));", "-\t\t\t\t\t\tcompletion.append(parameterTypeNames[i]);", "+\t\t\t\t\t\tcompletion.append(parameterFullTypeNames[i]);", "-\t\t\t\t\t\tchar[] exceptionTypeName = exception.qualifiedSourceName();", "+\t\t\t\t\t\tchar[] exceptionFullTypeName = exception.qualifiedSourceName();", "-\t\t\t\t\t\tif(mustQualifyType(exceptionPackageName, exceptionTypeName)){", "-\t\t\t\t\t\t\tcompletion.append(CharOperation.concat(exceptionPackageName, exceptionTypeName, '.'));", "+\t\t\t\t\t\tif(mustQualifyType(", "+\t\t\t\t\t\t\t\texceptionPackageName,", "+\t\t\t\t\t\t\t\texception.sourceName,", "+\t\t\t\t\t\t\t\texception.isMemberType() ? exception.enclosingType().qualifiedSourceName() : null,", "+\t\t\t\t\t\t\t\texception.modifiers)){", "+\t\t\t\t\t\t\tcompletion.append(CharOperation.concat(exceptionPackageName, exceptionFullTypeName, '.'));", "-\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\tproposal.setParameterTypeNames(parameterFullTypeNames);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de80d9899de3dc96a202683e75cedd68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/CompilerInvocationTests.java", "commitBeforeChange": "8ae6a032b744da62a95176b1af816f0bc6d501e7", "commitAfterChange": "e5d1651827919c7582ba9351a3db777b316a27e0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tCompilerInvocationTestsArguments( \t\t\tStandardJavaFileManager standardJavaFileManager,  \t\t\tList<String> options, \t\t\tString[] fileNames)", "signatureAfterChange": " public void _test022_output_streams() throws IOException", "diff": ["-\tString[] fileNames;", "-\tCompilerInvocationTestsArguments(", "-\t\t\tStandardJavaFileManager standardJavaFileManager, ", "-\t\t\tList<String> options,", "-\t\t\tString[] fileNames) {", "-\t\tthis.standardJavaFileManager = standardJavaFileManager;", "-\t\tthis.options = options;", "-\t\tthis.fileNames = fileNames;", "-\t}", "+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=236814", "+public void _test022_output_streams() throws IOException {", "+\tByteArrayOutputStream ", "+\t\t\toutBuffer = new ByteArrayOutputStream(),", "+\t\t\terrBuffer = new ByteArrayOutputStream();", "+\tPrintStream ", "+\t\tsystemOut = System.out,", "+\t\tsystemErr = System.err;", "+\tSystem.setOut(new PrintStream(outBuffer));", "+\tSystem.setErr(new PrintStream(errBuffer));", "+\tCompilationTask task = COMPILER.getTask(", "+\t\tnull, ", "+\t\tJAVAC_COMPILER.getStandardFileManager(null /* diagnosticListener */, null /* locale */, null /* charset */), ", "+\t\tnew CompilerInvocationDiagnosticListener(new PrintWriter(errBuffer)), ", "+\t\tArrays.asList(\"-v\"), null, null);", "+\ttry {", "+\tassertTrue(task.call());", "+\tassertTrue(outBuffer.toString().isEmpty());", "+\tassertTrue(errBuffer.toString().startsWith(\"Eclipse Java Compiler\"));", "+\t} finally {", "+\t\tSystem.setOut(systemOut);", "+\t\tSystem.setErr(systemErr);", "+\t}", "+}"]}], "num": 38783}
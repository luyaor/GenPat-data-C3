{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b6a8e6bfdf3fda8de3e8ebee9f3d4f5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64127acbcef25538759a39378020c0f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "6665973e9a36116a8cb24b7143317e47a83a98f0", "commitAfterChange": "305123b230bcfd1f733969b7cd2c687b75857ff0", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\tscope.problemReporter().forwardReference(this, this.indexOfFirstFieldBinding-1, fieldBinding);", "+\t\t\t\t\t\tif ((this.bits & IsMemberValueReference) != 0 && fieldBinding.id == methodScope.lastVisibleFieldID) {", "+\t\t\t\t\t\t\t// false alarm, location is NOT a field initializer but the value in a memberValuePair", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tscope.problemReporter().forwardReference(this, this.indexOfFirstFieldBinding-1, fieldBinding);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "643881ef2525dd128779d08f849e3fff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 399, "methodNumberAfterChange": 399, "signatureBeforeChange": " private void syntaxError( \tint id, \tint startPosition, \tint endPosition, \tint currentKind, \tchar[] currentTokenSource, \tString errorTokenName, \tString expectedToken)", "signatureAfterChange": " private void syntaxError( \tint id, \tint startPosition, \tint endPosition, \tint currentKind, \tchar[] currentTokenSource, \tString errorTokenName, \tString expectedToken)", "diff": ["+\tif (currentKind == TerminalTokens.TokenNameAT && expectedToken != null && expectedToken.equals(\"@\")) { //$NON-NLS-1$", "+\t\t// In the diagnose parser case, we don't have the wherewithal to discriminate when we should hand out @308 vs @. So we always answer @.", "+\t\t// We should silently recover so swallow the message.", "+\t\treturn;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9726a3b8eaead80ca7a1efa973d4ef34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "61742b7a485fa965b2f7b05fc8eadc51ecd60a49", "commitAfterChange": "d304d5cd9d0c4f90c63a024d76dece50501ce7a8", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": "  \tprivate int computeRelevanceForExpectingType(TypeBinding proposalType)", "signatureAfterChange": "  \tprivate int computeRelevanceForExpectingType(TypeBinding proposalType)", "diff": ["+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=271296", "+\t\t\t// If there is at least one expected type, then void proposal types attract a degraded relevance.  ", "+\t\t\tif (proposalType == TypeBinding.VOID && this.expectedTypesPtr >=0) {", "+\t\t\t\treturn R_VOID;", "+\t\t\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b7c1f9aa7700c17c35674b7ba481f2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "b137d0dc3d778fdf17bf399f75162f5540280907", "commitAfterChange": "d8e69f227e827dbe3259786dfcb6f8240d21a93d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["-", "+\t", "+\t// check that it is not excluded (https://bugs.eclipse.org/bugs/show_bug.cgi?id=138577)", "+\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isExcluded(this)) ", "+\t\tthrow newNotPresentException();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cde023441c8fd7f0b405f6de902a477", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "39389abe47a577c54c69522deb2432e5ac3e85f5", "commitAfterChange": "9e239639a34ee1dd1828902e14637119d5365d1c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, Expression receiver, ReferenceBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] argumentTypes, final InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, Expression receiver, ReferenceBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] argumentTypes, final InvocationSite invocationSite)", "diff": ["+ \t\t\t\t// narrowing conversion on base type may change value, thus necessary", "+\t\t\t\tif ((argument.bits & UnnecessaryCastMask) == 0 && argument.resolvedType.isBaseType()) {", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3f63b3bd838f890718a7983377ecb66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "0a55ac8235041f1a397ebbc048aec017b90b34f8", "commitAfterChange": "a9ee2df3848b37b13b74a0d6fb58548ce231875e", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "\t \t \tprivate boolean isValidEdit(OptimizedReplaceEdit edit)", "signatureAfterChange": "\t \t \tprivate boolean isValidEdit(OptimizedReplaceEdit edit)", "diff": ["+\t\t} else if (editOffset == this.scannerEndPosition && editOffset == this.textRegionEnd + 1) {", "+\t\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e68d594e8c59eb0459014e5e9f6bc5b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "4a9e81e0cc6daa6012c6270605219e05cb35a33d", "commitAfterChange": "b0d0325dfb965a2c15932e4737e1e47a197d7d43", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["+\t\t\t\telse if (leafType == TypeBinding.VOID && methodDecl.annotations != null)", "+\t\t\t\t\trejectTypeAnnotatedVoidMethod(methodDecl);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f54a4318241febb71ba5b1461a32b626", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "06764b62b785bb80863f600397b49c0f2e884a4d", "commitAfterChange": "57f884c272281a5aa1631c056927fac25c267ffd", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite, boolean tiebreakingVarargsMethods)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite, boolean tiebreakingVarargsMethods)", "diff": ["+\t\t} else if (typeVariables == Binding.NO_TYPE_VARIABLES && method instanceof PolyParameterizedGenericMethodBinding) {", "+\t\t\treturn method;"]}], "num": 29386}
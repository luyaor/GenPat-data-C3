{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29806acf2966080e1db39fd8b95af75c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "241da3a1f06aaaab689dc9ae2aa794dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "b4f075361126213edb4ab60051081d2143c229e2", "commitAfterChange": "69dd720d7e21bd212bdb2302822b71e51f298515", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tprotected void updateProjectReferencesIfNecessary() throws JavaModelException", "signatureAfterChange": " \tprotected void updateProjectReferencesIfNecessary() throws JavaModelException", "diff": ["-\t\tJavaProject jproject = getProject();", "-\t\tString[] oldRequired = jproject.projectPrerequisites(this.oldResolvedPath);", "+\t\tString[] oldRequired = this.project.projectPrerequisites(this.oldResolvedPath);", "-\t\t\tthis.newResolvedPath = jproject.getResolvedClasspath(this.newRawPath, null, true, true, null/*no reverse map*/);", "+\t\t\tthis.newResolvedPath = this.project.getResolvedClasspath(this.newRawPath, null, true, true, null/*no reverse map*/);", "-\t\tString[] newRequired = jproject.projectPrerequisites(this.newResolvedPath);", "+\t\tString[] newRequired = this.project.projectPrerequisites(this.newResolvedPath);", "-\t\t\tIProject project = jproject.getProject();", "-\t\t\tIProjectDescription description = project.getDescription();", "+\t\t\tIProject projectResource = this.project.getProject();", "+\t\t\tIProjectDescription description = projectResource.getDescription();", "-\t\t\tIWorkspaceRoot wksRoot = project.getWorkspace().getRoot();", "+\t\t\tIWorkspaceRoot wksRoot = projectResource.getWorkspace().getRoot();", "-\t\t\tproject.setDescription(description, this.fMonitor);", "+\t\t\tprojectResource.setDescription(description, this.fMonitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fa4b6500c11902a29128a892fcafdb8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateImportOperation.java", "commitBeforeChange": "c0cfa9f664d75c79503ecc83f280f59badb8f337", "commitAfterChange": "02030da0528a8fcbd0cf47635fdec2fbb50668ef", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected ASTNode generateElementAST(ASTRewrite rewriter, IDocument document, ICompilationUnit cu) throws JavaModelException", "signatureAfterChange": " protected ASTNode generateElementAST(ASTRewrite rewriter, IDocument document, ICompilationUnit cu) throws JavaModelException", "diff": ["-\t// split import name into individual fragments", "-\tchar[][] charFragments = CharOperation.splitOn('.', this.importName.toCharArray());", "+\t// split import name into individual fragments, checking for on demand imports", "+\tboolean onDemand = this.importName.endsWith(\"*\"); //$NON-NLS-1$", "+\tchar[][] charFragments = CharOperation.splitOn('.', this.importName.toCharArray(), 0, onDemand ? this.importName.length()-2 : this.importName.length());", "-\t// check whether on demand", "-\tboolean onDemand;", "-\tif (charFragments[length-1].length == 1 && charFragments[length-1][0] == '*') {", "-\t\tonDemand = true;", "-\t\tlength--;", "-\t} else {", "-\t\tonDemand = false;", "-\t}"]}], "num": 29014}
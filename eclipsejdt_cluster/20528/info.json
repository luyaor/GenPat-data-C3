{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "118c71380e5214b5d912e1e4cefb4962", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37508c684c62ef783a9a48f405981322", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "c96f0431a191223f1b7e442938146a0d27b19982", "commitAfterChange": "3ac4d9928664d8b2cb8d3b728d56e045557dffad", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public ClassFileReader(byte[] classFileBytes, char[] fileName, boolean fullyInitialize) throws ClassFormatException", "signatureAfterChange": " public ClassFileReader(byte[] classFileBytes, char[] fileName, boolean fullyInitialize) throws ClassFormatException", "diff": ["+\t} catch(ClassFormatException e) {", "+\t\tthrow e;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7a0299b9588882dadd706e1a765531b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "535178e6ff3c7be5f5cdc90d8a470557840e3a3e", "commitAfterChange": "cdbb23d25684170107e611f9ad2770f482d2dd3b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static void writeToDisk( \t\tboolean generatePackagesStructure, \t\tString outputPath, \t\tString relativeFileName, \t\tClassFile classFile) \t\tthrows IOException", "signatureAfterChange": " \tpublic static void writeToDisk( \t\tboolean generatePackagesStructure, \t\tString outputPath, \t\tString relativeFileName, \t\tClassFile classFile) throws IOException", "diff": ["-\t\tClassFile classFile)", "-\t\tthrows IOException {", "+\t\tClassFile classFile) throws IOException {", "-\t\tif (generatePackagesStructure) {", "-\t\t\toutput = new BufferedOutputStream(", "-\t\t\t\tnew FileOutputStream(", "-\t\t\t\t\t\tnew File(buildAllDirectoriesInto(outputPath, relativeFileName))));", "-\t\t} else {", "-\t\t\tString fileName = null;", "-\t\t\tchar fileSeparatorChar = File.separatorChar;", "-\t\t\tString fileSeparator = File.separator;", "-\t\t\t// First we ensure that the outputPath exists", "-\t\t\toutputPath = outputPath.replace('/', fileSeparatorChar);", "-\t\t\t// To be able to pass the mkdirs() method we need to remove the extra file separator at the end of the outDir name", "-\t\t\tint indexOfPackageSeparator = relativeFileName.lastIndexOf(fileSeparatorChar);", "-\t\t\tif (indexOfPackageSeparator == -1) {", "-\t\t\t\tif (outputPath.endsWith(fileSeparator)) {", "-\t\t\t\t\tfileName = outputPath + relativeFileName;", "-\t\t\t\t} else {", "-\t\t\t\t\tfileName = outputPath + fileSeparator + relativeFileName;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tint length = relativeFileName.length();", "-\t\t\t\tif (outputPath.endsWith(fileSeparator)) {", "-\t\t\t\t\tfileName = outputPath + relativeFileName.substring(indexOfPackageSeparator + 1, length);", "-\t\t\t\t} else {", "-\t\t\t\t\tfileName = outputPath + fileSeparator + relativeFileName.substring(indexOfPackageSeparator + 1, length);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\toutput = new BufferedOutputStream(", "-\t\t\t\tnew FileOutputStream(", "-\t\t\t\t\t\tnew File(fileName)));", "-\t\t}", "+    \tif (generatePackagesStructure) {", "+    \t\toutput = new BufferedOutputStream(", "+    \t\t\tnew FileOutputStream(", "+    \t\t\t\t\tnew File(buildAllDirectoriesInto(outputPath, relativeFileName))));", "+    \t} else {", "+    \t\tString fileName = null;", "+    \t\tchar fileSeparatorChar = File.separatorChar;", "+    \t\tString fileSeparator = File.separator;", "+    \t\t// First we ensure that the outputPath exists", "+    \t\toutputPath = outputPath.replace('/', fileSeparatorChar);", "+    \t\t// To be able to pass the mkdirs() method we need to remove the extra file separator at the end of the outDir name", "+    \t\tint indexOfPackageSeparator = relativeFileName.lastIndexOf(fileSeparatorChar);", "+    \t\tif (indexOfPackageSeparator == -1) {", "+    \t\t\tif (outputPath.endsWith(fileSeparator)) {", "+    \t\t\t\tfileName = outputPath + relativeFileName;", "+    \t\t\t} else {", "+    \t\t\t\tfileName = outputPath + fileSeparator + relativeFileName;", "+    \t\t\t}", "+    \t\t} else {", "+    \t\t\tint length = relativeFileName.length();", "+    \t\t\tif (outputPath.endsWith(fileSeparator)) {", "+    \t\t\t\tfileName = outputPath + relativeFileName.substring(indexOfPackageSeparator + 1, length);", "+    \t\t\t} else {", "+    \t\t\t\tfileName = outputPath + fileSeparator + relativeFileName.substring(indexOfPackageSeparator + 1, length);", "+    \t\t\t}", "+    \t\t}", "+    \t\toutput = new BufferedOutputStream(", "+    \t\t\tnew FileOutputStream(", "+    \t\t\t\t\tnew File(fileName)));", "+    \t}", "+\t\t\t// if no IOException occured, output cannot be null", "-\t\t} finally {", "+\t\t} catch(IOException e) {", "+\t\t\tthrow e;", "+\t\t} finally {"]}], "num": 20528}
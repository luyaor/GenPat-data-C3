{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c25f506366201ab91f92bb9fff8a95fe", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02dbecba5072271540d545b8bf6bfdbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/VariableLocator.java", "commitBeforeChange": "7d7a110acd7fb43dd9a0120381db3995104a56b1", "commitAfterChange": "c7a7e4e108b0e3c57db4a9ecb9572c48f5ebfb8b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public int match(Expression node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(Expression node, MatchingNodeSet nodeSet)", "diff": ["+\t\t\tchar[] lastToken = null;", "-\t\t\tnodeSet.removePossibleMatch(lhs);", "-\t\t\tnodeSet.removeTrustedMatch(lhs);", "+\t\t\tif (lhs instanceof QualifiedNameReference) {", "+\t\t\t\tchar[][] tokens = ((QualifiedNameReference)lhs).tokens;", "+\t\t\t\tlastToken = tokens[tokens.length-1];", "+\t\t\t}", "+\t\t\tif (lastToken == null || matchesName(this.pattern.name, lastToken)) {", "+\t\t\t\tnodeSet.removePossibleMatch(lhs);", "+\t\t\t\tnodeSet.removeTrustedMatch(lhs);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bc7a195ce0d4dfe51ccd4ddddc78c6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public String[] getExceptionTypes() throws JavaModelException", "signatureAfterChange": " public String[] getExceptionTypes() throws JavaModelException", "diff": ["-\t\tchar[][] eTypeNames = info.getExceptionTypeNames();", "-\t\tif (eTypeNames == null || eTypeNames.length == 0) {", "-\t\t\tthis.exceptionTypes = NO_TYPES;", "-\t\t} else {", "-\t\t\teTypeNames = ClassFile.translatedNames(eTypeNames);", "-\t\t\tthis.exceptionTypes = new String[eTypeNames.length];", "-\t\t\tfor (int j = 0, length = eTypeNames.length; j < length; j++) {", "-\t\t\t\t// 1G01HRY: ITPJCORE:WINNT - method.getExceptionType not in correct format", "-\t\t\t\tint nameLength = eTypeNames[j].length;", "-\t\t\t\tchar[] convertedName = new char[nameLength + 2];", "-\t\t\t\tSystem.arraycopy(eTypeNames[j], 0, convertedName, 1, nameLength);", "-\t\t\t\tconvertedName[0] = 'L';", "-\t\t\t\tconvertedName[nameLength + 1] = ';';", "-\t\t\t\tthis.exceptionTypes[j] = new String(convertedName);", "+\t\tchar[] genericSignature = info.getGenericSignature();", "+\t\tif (genericSignature != null) {", "+\t\t\tchar[] dotBasedSignature = CharOperation.replaceOnCopy(genericSignature, '/', '.');", "+\t\t\tthis.exceptionTypes = Signature.getThrownExceptionTypes(new String(dotBasedSignature));", "+\t\t}", "+\t\tif (this.exceptionTypes == null || this.exceptionTypes.length == 0) {", "+\t\t\tchar[][] eTypeNames = info.getExceptionTypeNames();", "+\t\t\tif (eTypeNames == null || eTypeNames.length == 0) {", "+\t\t\t\tthis.exceptionTypes = NO_TYPES;", "+\t\t\t} else {", "+\t\t\t\teTypeNames = ClassFile.translatedNames(eTypeNames);", "+\t\t\t\tthis.exceptionTypes = new String[eTypeNames.length];", "+\t\t\t\tfor (int j = 0, length = eTypeNames.length; j < length; j++) {", "+\t\t\t\t\t// 1G01HRY: ITPJCORE:WINNT - method.getExceptionType not in correct format", "+\t\t\t\t\tint nameLength = eTypeNames[j].length;", "+\t\t\t\t\tchar[] convertedName = new char[nameLength + 2];", "+\t\t\t\t\tSystem.arraycopy(eTypeNames[j], 0, convertedName, 1, nameLength);", "+\t\t\t\t\tconvertedName[0] = 'L';", "+\t\t\t\t\tconvertedName[nameLength + 1] = ';';", "+\t\t\t\t\tthis.exceptionTypes[j] = new String(convertedName);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c05663a52eb0716e7aae563b1e10a043", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "02d4f1049999a6639faf6572ec12176fbdb0f122", "commitAfterChange": "fecb7356870e11bfa0606dab85da0b88f89888ac", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tprivate boolean checkExpression(Expression expri, TypeBinding[] u, TypeBinding r1, TypeBinding[] v, TypeBinding r2)  \t\t\tthrows InferenceFailureException", "signatureAfterChange": "  \tprivate boolean checkExpression(Expression expri, TypeBinding[] u, TypeBinding r1, TypeBinding[] v, TypeBinding r2)  \t\t\tthrows InferenceFailureException", "diff": ["+\t\t\tif (CONSIDER_NUM_ARGS_OF_IMPLICIT_LAMBDA_DURING_18_5_4) {", "+\t\t\t\tif (expri instanceof LambdaExpression) { // implicitly types", "+\t\t\t\t\tArgument[] arguments = ((LambdaExpression)expri).arguments;", "+\t\t\t\t\tint count = arguments != null ? arguments.length : 0;", "+\t\t\t\t\tif (count == u.length && count != v.length)", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 42697}
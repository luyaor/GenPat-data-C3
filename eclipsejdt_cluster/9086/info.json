{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e22b00c3957ba18c66f2cfa6e77af55", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52d08029e00141f0154c32933856a6eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "4b3b23614cfca32dd53fa7e699914bb6d6883a79", "commitAfterChange": "497b69b47b38f18098b3c3fae687e15309c6bbc5", "methodNumberBeforeChange": 234, "methodNumberAfterChange": 234, "signatureBeforeChange": " \tpublic void test0220() throws JavaModelException", "signatureAfterChange": " \tpublic void test0220() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Wrong size\", 0, body.statements().size());", "-\t\tassertTrue(\"Not recovered\", isRecovered(body));", "+\t\tList statements = body.statements();", "+\t\tassertEquals(\"Wrong size\", 1, statements.size());", "+\t\tassertTrue(\"Recovered\", !isRecovered(body));", "+\t\t", "+\t\tStatement statement = (Statement)statements.get(0);", "+\t\tassertEquals(\"Not an enhanced for statement\", ASTNode.ENHANCED_FOR_STATEMENT, statement.getNodeType());", "+\t\tEnhancedForStatement enhancedForStatement = (EnhancedForStatement) statement;", "+\t\tStatement forBody = enhancedForStatement.getBody();", "+\t\tassertNotNull(\"No body\", forBody);", "+\t\tassertEquals(\"Not a block\", ASTNode.BLOCK, forBody.getNodeType());", "+\t\t", "+\t\tstatements = ((Block)forBody).statements();", "+\t\tassertEquals(\"Wrong size\", 1, statements.size());", "+\t\tstatement = (Statement)statements.get(0);", "+\t\tassertEquals(\"Not an try statement\", ASTNode.TRY_STATEMENT, statement.getNodeType());", "+\t\tTryStatement tryStatement = (TryStatement) statement;", "+\t\tBlock finallyBlock = tryStatement.getFinally();", "+\t\tassertNotNull(\"No finally block\", finallyBlock);", "+\t\tassertTrue(\"Not recovered\", isRecovered(finallyBlock));", "+\t\t", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88fe963248ed9713304859dbdcb47186", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java", "commitBeforeChange": "1e3d7a95c39c7aac1cb5e09a719efdb30a9bf701", "commitAfterChange": "1df126b77b08d354ebfd5eda6a44830d9266b61e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate JavaElement getUnresolvedJavaElement()", "signatureAfterChange": "  \tprivate JavaElement getUnresolvedJavaElement()", "diff": ["+\t\tint modifiers = 0;", "-\t\t\tSimpleName simpleName = ((SingleVariableDeclaration) localVar).getName();", "+\t\t\tfinal SingleVariableDeclaration singleVariableDeclaration = (SingleVariableDeclaration) localVar;", "+\t\t\tSimpleName simpleName = singleVariableDeclaration.getName();", "+\t\t\tmodifiers = singleVariableDeclaration.getModifiers();", "+\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) localVar;", "+\t\t\tfinal ASTNode parent = fragment.getParent();", "+\t\t\tswitch (parent.getNodeType()) {", "+\t\t\t\tcase ASTNode.VARIABLE_DECLARATION_EXPRESSION :", "+\t\t\t\t\tVariableDeclarationExpression expression = (VariableDeclarationExpression) parent;", "+\t\t\t\t\tmodifiers = expression.getModifiers();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ASTNode.VARIABLE_DECLARATION_STATEMENT :", "+\t\t\t\t\tVariableDeclarationStatement statement = (VariableDeclarationStatement) parent;", "+\t\t\t\t\tmodifiers = statement.getModifiers();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ASTNode.FIELD_DECLARATION :", "+\t\t\t\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) parent;", "+\t\t\t\t\tmodifiers = fieldDeclaration.getModifiers();", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\tfinal LocalVariableBinding localVariableBinding = (LocalVariableBinding) this.binding;", "-\t\t\tReferenceContext referenceContext = ((LocalVariableBinding) this.binding).declaringScope.referenceContext();", "+\t\t\tReferenceContext referenceContext = localVariableBinding.declaringScope.referenceContext();", "-\t\treturn new LocalVariable(parent, localVar.getName().getIdentifier(), sourceStart, sourceEnd, nameStart, nameStart+nameLength-1, new String(typeSig), ((LocalVariableBinding) this.binding).declaration.annotations);", "+\t\treturn new LocalVariable(", "+\t\t\t\tparent,", "+\t\t\t\tlocalVar.getName().getIdentifier(),", "+\t\t\t\tsourceStart,", "+\t\t\t\tsourceEnd,", "+\t\t\t\tnameStart,", "+\t\t\t\tnameStart+nameLength-1,", "+\t\t\t\tnew String(typeSig),", "+\t\t\t\tlocalVariableBinding.declaration.annotations,", "+\t\t\t\tmodifiers,", "+\t\t\t\t(localVariableBinding.tagBits & TagBits.IsArgument) != 0);"]}], "num": 9086}
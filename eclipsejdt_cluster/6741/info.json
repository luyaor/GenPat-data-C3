{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e55d2824fa8d451447691524fb85391", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b3586a8e0307ec1ebb17525c3e89752", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "7837c22c77d5de1a45545030033be1e2b2970468", "commitAfterChange": "eaed8b4c57bf985bb0b4f36634f058b94194b2e7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public synchronized IIndex getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing)", "signatureAfterChange": " public synchronized IIndex getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing)", "diff": ["-\t\t\t\t\tif (VERBOSE)", "-\t\t\t\t\t\tJobManager.verbose(\"-> cannot reuse existing index: \"+indexName+\" path: \"+path.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\trebuildIndex(indexName, path);", "-\t\t\t\t\treturn null;", "+\t\t\t\t\tif (currentIndexState != REBUILDING_STATE) { // rebuild index if existing file is corrupt, unless the index is already being rebuilt", "+\t\t\t\t\t\tif (VERBOSE)", "+\t\t\t\t\t\t\tJobManager.verbose(\"-> cannot reuse existing index: \"+indexName+\" path: \"+path.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\trebuildIndex(indexName, path);", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tindex = null; // will fall thru to createIfMissing & create a empty index for the rebuild all job to populate", "+\t\t\t\t\t}", "-\t\t\tif (currentIndexState == SAVED_STATE) { // rebuild index if existing file is missing or corrupt", "+\t\t\tif (currentIndexState == SAVED_STATE) { // rebuild index if existing file is missing"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a60ddb638db8be5b612760eeb57fcbbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e0e148cd6b9c732819785b1a6035a4b2d3b71b69", "commitAfterChange": "e8d8994ddc9e43f92485e51c19ef36ea93b3771d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public synchronized Index recreateIndex(IPath path)", "signatureAfterChange": " public synchronized Index recreateIndex(IPath containerPath)", "diff": ["-public synchronized Index recreateIndex(IPath path) {", "+public synchronized Index recreateIndex(IPath containerPath) {", "-\t\tIndex index = (Index) this.indexes.get(path);", "+\t\t// Path is already canonical", "+\t\tString indexLocation = computeIndexLocation(containerPath);", "+\t\t", "+\t\tIndex index = (Index) this.indexes.get(indexLocation);", "-\t\t// Path is already canonical", "-\t\tString indexPath = computeIndexName(path);", "-\t\t\tUtil.verbose(\"-> recreating index: \"+indexPath+\" for path: \"+path.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tindex = new Index(indexPath, \"Index for \" + path.toOSString(), false /*reuse index file*/); //$NON-NLS-1$", "-\t\tindexes.put(path, index);", "+\t\t\tUtil.verbose(\"-> recreating index: \"+indexLocation+\" for path: \"+containerPath.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tindex = new Index(indexLocation, \"Index for \" + containerPath.toOSString(), false /*reuse index file*/); //$NON-NLS-1$", "+\t\tthis.indexes.put(indexLocation, index);", "-\t\t\tUtil.verbose(\"-> failed to recreate index for path: \"+path.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tUtil.verbose(\"-> failed to recreate index for path: \"+containerPath.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$"]}], "num": 6741}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe757dece2b232ef96d5736c039b49c9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ae619da500e44f15be87ae40b4c5087", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e0e148cd6b9c732819785b1a6035a4b2d3b71b69", "commitAfterChange": "e8d8994ddc9e43f92485e51c19ef36ea93b3771d", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void saveIndex(Index index) throws IOException", "signatureAfterChange": " public void saveIndex(Index index) throws IOException", "diff": ["-\tString indexName = index.getIndexFile().getPath();", "+\tString indexLocation = index.getIndexFile().getPath();", "-\t\tObject indexPath = indexNames.keyForValue(indexName);", "-\t\tif (indexPath != null) {", "+\t\tObject containerPath = this.indexLocations.keyForValue(indexLocation);", "+\t\tif (containerPath != null) {", "-\t\t\t\t\tif (((IndexRequest) job).containerPath.equals(indexPath)) return;", "+\t\t\t\t\tif (((IndexRequest) job).containerPath.equals(containerPath)) return;", "-\tupdateIndexState(indexName, SAVED_STATE);", "+\tupdateIndexState(indexLocation, SAVED_STATE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4e4f6d7417ba4bfb31ca1a15dc95e37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6e8c555a7d6f504d4ea246c591d5bb3f080d438", "commitAfterChange": "3316f207e855c46fb5e805791239fa37620ca8c4", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": " public void saveIndex(Index index) throws IOException", "signatureAfterChange": " public void saveIndex(Index index) throws IOException", "diff": ["-\t// TODO should use getJavaPluginWorkingLocation()+index simple name to avoid bugs such as https://bugs.eclipse.org/bugs/show_bug.cgi?id=62267", "-\tString indexLocation = index.getIndexFile().getPath();", "-\tif (this.jobEnd > this.jobStart) {", "-\t\tObject containerPath = this.indexLocations.keyForValue(indexLocation);", "-\t\tif (containerPath != null) {", "-\t\t\tsynchronized(this) {", "-\t\t\t\tfor (int i = this.jobEnd; i > this.jobStart; i--) { // skip the current job", "-\t\t\t\t\tIJob job = this.awaitingJobs[i];", "-\t\t\t\t\tif (job instanceof IndexRequest)", "-\t\t\t\t\t\tif (((IndexRequest) job).containerPath.equals(containerPath)) return;", "-\t\t\t\t}", "+\tsynchronized (this) {", "+\t\tIPath containerPath = new Path(index.containerPath);", "+\t\tif (this.jobEnd > this.jobStart) {", "+\t\t\tfor (int i = this.jobEnd; i > this.jobStart; i--) { // skip the current job", "+\t\t\t\tIJob job = this.awaitingJobs[i];", "+\t\t\t\tif (job instanceof IndexRequest)", "+\t\t\t\t\tif (((IndexRequest) job).containerPath.equals(containerPath)) return;", "+\t\tIPath indexLocation = computeIndexLocation(containerPath);", "+\t\tupdateIndexState(indexLocation, SAVED_STATE);", "-\tupdateIndexState(indexLocation, SAVED_STATE);"]}], "num": 45421}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29c058036e9ae6a1ca1967c4ab05e0a5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6913b4df3fde76f405df2bbd0bc98100", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "e7fbe3d2e46c3f4c5a40be9178ef6e8a36680f90", "commitAfterChange": "01f17876d50bd632100cd19774bf74ad112ea3f6", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void testDeleteMultipleMembersFromVariousCUs() throws CoreException", "signatureAfterChange": " public void testDeleteMultipleMembersFromVariousCUs() throws CoreException", "diff": ["-\tcreateFolder(\"P/a/b/c\");", "-\tcreateFile(", "-\t\t\"P/a/b/c/X.java\",", "-\t\t\"package a.b.c;\\n\" +", "-\t\t\"import java.util.Vector;\\n\" +", "-\t\t\"import java.util.Enumeration;\\n\" +", "-\t\t\"public class X {\\n\" +", "-\t\t\"  public static void main(String[] args) {\\n\" +", "-\t\t\"    System.out.println(\\\"Hello World\\\");\\n\" +", "-\t\t\"  }\\n\" +", "-\t\t\"  static class Bar {\\n\" +", "-\t\t\"    private final java.lang.String test = \\\"testminor\\\";\\n\" +", "-\t\t\"    public Bar() {\\n\" +", "-\t\t\"      super();\\n\" +", "-\t\t\"    }\\n\" +", "-\t\t\"    private void test() {\\n\" +", "-\t\t\"    }\\n\" +", "-\t\t\"  }\\n\" +", "-\t\t\"}\"", "-\t);", "-\tcreateFile(", "-\t\t\"P/a/b/Y.java\",", "-\t\t\"package a.b;\\n\" +", "-\t\t\"public class Y {\\n\" +", "-\t\t\"  int foo;\\n\" +", "-\t\t\"  public static void main(String[] args) {\\n\" +", "-\t\t\"    System.out.println(\\\"Hello World\\\");\\n\" +", "-\t\t\"  }\\n\" +", "-\t\t\"}\"", "-\t);", "-\t", "-\t// elements to be deleted:", "-\t// from a/b/c/X.java:", "-\t//   java.util.Vector", "-\t//\t  main", "-\t//   Bar (inner type)", "-\t//\t    Bar (constructor)", "-\t//\t    test", "-\t//   Bar (inner type, same as above)", "-", "-\t// from a/b/Y.java", "-\t//   foo", "-\t//   main", "-\t", "-\tICompilationUnit cuX = getCompilationUnit(\"P/a/b/c/X.java\");", "-\tIType typeX = cuX.getType(\"X\");", "-\tIType typeBar = typeX.getType(\"Bar\");", "-", "-\tIJavaElement[] toBeDeleted = new IJavaElement[8];", "-\ttoBeDeleted[0] = cuX.getImport(\"java.util.Vector\");", "-\ttoBeDeleted[1] = typeX.getMethod(\"main\", new String[] {\"[QString;\"});", "-\ttoBeDeleted[2] = typeBar;", "-\ttoBeDeleted[3] = typeBar.getMethod(\"Bar\", new String[] {});", "-\ttoBeDeleted[4] = typeBar.getMethod(\"test\", new String[] {});", "-\ttoBeDeleted[5] = typeBar;", "-\t", "-\tICompilationUnit cuY = getCompilationUnit(\"P/a/b/Y.java\");", "-\tIType typeY = cuY.getType(\"Y\");", "-\t", "-\ttoBeDeleted[6] = typeY.getField(\"foo\");", "-\ttoBeDeleted[7] = typeY.getMethod(\"main\", new String[] {\"[QString;\"});", "-\t", "+\t\tcreateFolder(\"P/a/b/c\");", "+\t\tcreateFile(", "+\t\t\t\"P/a/b/c/X.java\",", "+\t\t\t\"package a.b.c;\\n\" +", "+\t\t\t\"import java.util.Vector;\\n\" +", "+\t\t\t\"import java.util.Enumeration;\\n\" +", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  public static void main(String[] args) {\\n\" +", "+\t\t\t\"    System.out.println(\\\"Hello World\\\");\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"  static class Bar {\\n\" +", "+\t\t\t\"    private final java.lang.String test = \\\"testminor\\\";\\n\" +", "+\t\t\t\"    public Bar() {\\n\" +", "+\t\t\t\"      super();\\n\" +", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"    private void test() {\\n\" +", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tcreateFile(", "+\t\t\t\"P/a/b/Y.java\",", "+\t\t\t\"package a.b;\\n\" +", "+\t\t\t\"public class Y {\\n\" +", "+\t\t\t\"  int foo;\\n\" +", "+\t\t\t\"  public static void main(String[] args) {\\n\" +", "+\t\t\t\"    System.out.println(\\\"Hello World\\\");\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\t", "+\t\t// elements to be deleted:", "+\t\t// from a/b/c/X.java:", "+\t\t//   java.util.Vector", "+\t\t//\t  main", "+\t\t//   Bar (inner type)", "+\t\t//\t    Bar (constructor)", "+\t\t//\t    test", "+\t\t//   Bar (inner type, same as above)", "+\t", "+\t\t// from a/b/Y.java", "+\t\t//   foo", "+\t\t//   main", "+\t\t", "+\t\tICompilationUnit cuX = getCompilationUnit(\"P/a/b/c/X.java\");", "+\t\tIType typeX = cuX.getType(\"X\");", "+\t\tIType typeBar = typeX.getType(\"Bar\");", "+\t", "+\t\tIJavaElement[] toBeDeleted = new IJavaElement[8];", "+\t\ttoBeDeleted[0] = cuX.getImport(\"java.util.Vector\");", "+\t\ttoBeDeleted[1] = typeX.getMethod(\"main\", new String[] {\"[QString;\"});", "+\t\ttoBeDeleted[2] = typeBar;", "+\t\ttoBeDeleted[3] = typeBar.getMethod(\"Bar\", new String[] {});", "+\t\ttoBeDeleted[4] = typeBar.getMethod(\"test\", new String[] {});", "+\t\ttoBeDeleted[5] = typeBar;", "+\t\t", "+\t\tICompilationUnit cuY = getCompilationUnit(\"P/a/b/Y.java\");", "+\t\tIType typeY = cuY.getType(\"Y\");", "+\t\t", "+\t\ttoBeDeleted[6] = typeY.getField(\"foo\");", "+\t\ttoBeDeleted[7] = typeY.getMethod(\"main\", new String[] {\"[QString;\"});", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a410edb37cf4a2702551baa977e1ff82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "260ff63e87f242ab982cdcea6ba42f866e16f101", "commitAfterChange": "dbbd3644c027d320da3467fe824f2184d78d4b17", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": " public void testBug468127_0001() throws CoreException", "signatureAfterChange": " public void testBug468127_0001() throws CoreException", "diff": ["+\t\taddLibraryEntry(project, \"/JavaSearchBugs/lib/b468127.jar\", false);", "-\t\tString libSource = \"final class MyDistinctOps {\\n\" +", "-\t\t\t\t\"    static <T> MyStatefulOp<T> makeRef() {\\n\" +", "-\t\t\t\t\"        return new MyStatefulOp<T>() {\\n\" +", "-\t\t\t\t\"\t\t\t@SuppressWarnings(\\\"unused\\\")\\n\" +", "-\t\t\t\t\"\t\t\t@Override\\n\" +", "-\t\t\t\t\"\t\t \tvoid opEvaluateParallel() {\\n\" +", "-\t\t\t\t\"                TerminalOp<T, Void> forEachOp = ForEachOps.makeRef(t -> {}, false);\\n\" +", "-\t\t\t\t\"\t\t\t}\\n\" +", "-\t\t\t\t\"    @SuppressWarnings({ \\\"unchecked\\\", \\\"rawtypes\\\", \\\"unused\\\" })\\n\" +", "-\t\t\t\t\"\t MySink<T> opWrapSink(MySink<T> sink) {\\n\" +", "-\t\t\t\t\"           return new MySink.ChainedReference(sink) {\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"\t\t\t\t@Override\\n\" +", "-\t\t\t\t\"\t\t\t\tpublic void accept(Object t) {\\n\" +", "-\t\t\t\t\"                     downstream.accept(t);\t\t\t\t\t\\n\" +", "-\t\t\t\t\"\t\t\t\t}\\n\" +", "-\t\t\t\t\"            };\\n\" +", "-\t\t\t\t\"        }\\n\" +", "-\t\t\t\t\"        };\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"interface TerminalOp<E_IN, R> {}\\n\" +", "-\t\t\t\t\"final static class ForEachOps {\\n\" +", "-\t\t\t\t\"    public static <T> TerminalOp<T, Void> makeRef(IY<? super T> action,\\n\" +", "-\t\t\t\t\"                                                  boolean ordered) {\\n\" +", "-\t\t\t\t\"    \treturn null;\\n\" +", "-\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"abstract static class MyStatefulOp<T> {\\n\" +", "-\t\t\t\t\"\tabstract void opEvaluateParallel();\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"interface MySink<T> extends IY<T> {\\n\" +", "-\t\t\t\t\"    static abstract class ChainedReference<T, E_OUT> implements MySink<T> {\\n\" +", "-\t\t\t\t\"    protected final MySink<T> downstream;\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"    public ChainedReference(MySink<T> downstream) {\\n\" +", "-\t\t\t\t\"        this.downstream = downstream;\\n\" +", "-\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"}\\n\";", "-", "-\t\tString iy = \"@FunctionalInterface\\n\" +", "-\t\t\t\t\t\"public interface IY<T> {\\n\" +", "-\t\t\t\t\t\"  public void accept(T t);\\n\" +", "-\t\t\t\t\t\"}\\n\";\t", "-\t\ttry {", "-\t\t\tString jarFileName = \"lib468127.jar\";", "-\t\t\tString srcZipName = \"lib468127.src.zip\";", "-\t\t\tcreateLibrary(project, jarFileName, srcZipName, new String[] {\"IY.java\", iy, \"MyDistinctOps.java\",libSource},", "-\t\t\t\t\tnew String[0], JavaCore.VERSION_1_8);", "-\t\t\tIFile srcZip=(IFile) project.getProject().findMember(srcZipName);", "-\t\t\tIFile jar = (IFile) project.getProject().findMember(jarFileName);", "-\t\t\tJarPackageFragmentRoot root = (JarPackageFragmentRoot) project.getPackageFragmentRoot(jar);", "-\t\t\troot.attachSource(srcZip.getFullPath(), null, null);", "-\t\t\twaitUntilIndexesReady();", "-", "-\t\t\tSearchPattern pattern = SearchPattern.createPattern(\"IY.accept(T)\", METHOD, REFERENCES, ERASURE_RULE);", "-\t\t\tsearch(pattern, SearchEngine.createJavaSearchScope(new IJavaElement[] { project }, IJavaSearchScope.APPLICATION_LIBRARIES | IJavaSearchScope.SOURCES), this.resultCollector);", "-\t\t\tassertSearchResults(", "-\t\t\t\t\t\"src/X.java void X.main(String[]) [accept(0)] EXACT_MATCH\\n\" + ", "-\t\t\t\t\t\"lib468127.jar void <anonymous>.accept(java.lang.Object) EXACT_MATCH\");", "-\t\t} catch (IOException e) {", "-\t\t\te.printStackTrace();", "-\t\t}", "+\t\twaitUntilIndexesReady();", "+\t\t", "+\t\tSearchPattern pattern = SearchPattern.createPattern(\"IY.accept(T)\", METHOD, REFERENCES, ERASURE_RULE);", "+\t\tsearch(pattern, SearchEngine.createJavaSearchScope(new IJavaElement[] { project }, IJavaSearchScope.APPLICATION_LIBRARIES | IJavaSearchScope.SOURCES), this.resultCollector);", "+\t\tassertSearchResults(", "+\t\t\t\t\"src/X.java void X.main(String[]) [accept(0)] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"lib/b468127.jar void <anonymous>.accept(java.lang.Object) EXACT_MATCH\");"]}], "num": 18835}
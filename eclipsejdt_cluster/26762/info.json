{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ebef33d0835f718032d34e9eadc749b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83bf6be01874e92354d09b8867d6e47c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "5b4b5a81d63f2a4115a13f4d0d483f456163707a", "commitAfterChange": "6b3cf19570292f4957aecb9401f641fdbfac5985", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "signatureAfterChange": " \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "diff": ["-\t\t\t\t\t\tif (oType == eType || oType.isCompatibleWith(eType))", "-\t\t\t\t\t\t\treturn true; // special case to choose between 2 varargs methods when the last arg is Object[]", "+\t\t\t\t\t\tif (CompilerOptions.tolerateIllegalAmbiguousVarargsInvocation && this.compilerOptions().complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\t\t\t\t\tif (oneParam == eType || oneParam.isCompatibleWith(eType))", "+\t\t\t\t\t\t\t\treturn true; // special case to choose between 2 varargs methods when the last arg is Object[]", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (oType == eType || oType.isCompatibleWith(eType))", "+\t\t\t\t\t\t\t\treturn true; // special case to choose between 2 varargs methods when the last arg is Object[]", "+\t\t\t\t\t\t}", "+\t\t\tif (CompilerOptions.tolerateIllegalAmbiguousVarargsInvocation && this.compilerOptions().complianceLevel < ClassFileConstants.JDK1_7 && ", "+\t\t\t\t\toneParamsLength > twoParamsLength) {", "+\t\t\t\t// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or (Integer, int...)", "+\t\t\t\tif (((ArrayBinding) twoParams[twoParamsLength - 1]).elementsType().id != TypeIds.T_JavaLangObject)", "+\t\t\t\t\treturn false;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87855dd53829a217df496f3f850f4c34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "9119a1906c2bdf97ef9722a343397a64998ed131", "commitAfterChange": "28a527aa646605138ee088f966d41bc12493ed40", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "signatureAfterChange": " \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "diff": ["-\t\t\t\t\t\tif (oType == eType || oType.isCompatibleWith(eType))", "-\t\t\t\t\t\t\treturn true; // special case to choose between 2 varargs methods when the last arg is Object[]", "+\t\t\t\t\t\tif (CompilerOptions.tolerateIllegalAmbiguousVarargsInvocation && this.compilerOptions().complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\t\t\t\t\tif (oneParam == eType || oneParam.isCompatibleWith(eType))", "+\t\t\t\t\t\t\t\treturn true; // special case to choose between 2 varargs methods when the last arg is Object[]", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (oType == eType || oType.isCompatibleWith(eType))", "+\t\t\t\t\t\t\t\treturn true; // special case to choose between 2 varargs methods when the last arg is Object[]", "+\t\t\t\t\t\t}", "+\t\t\tif (CompilerOptions.tolerateIllegalAmbiguousVarargsInvocation && this.compilerOptions().complianceLevel < ClassFileConstants.JDK1_7 && ", "+\t\t\t\t\toneParamsLength > twoParamsLength) {", "+\t\t\t\t// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or (Integer, int...)", "+\t\t\t\tif (((ArrayBinding) twoParams[twoParamsLength - 1]).elementsType().id != TypeIds.T_JavaLangObject)", "+\t\t\t\t\treturn false;", "+\t\t\t}"]}], "num": 26762}
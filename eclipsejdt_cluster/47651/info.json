{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9eac4f07a9488b08d4fd2be555d0eb8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9780b2c0cda447644fa3e54798e5833b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "d81e6de27221b2caec858658787abf55d91a925e", "commitAfterChange": "cfb9e308b9934bc0d4a17e2d4604db46f20af164", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tstatic boolean inferPolyInvocationType(InferenceContext18 inferenceContext, InvocationSite invocationSite, TypeBinding targetType, MethodBinding method)  \t\t\t\tthrows InferenceFailureException", "signatureAfterChange": "  \tstatic boolean inferPolyInvocationType(InferenceContext18 inferenceContext, InvocationSite invocationSite, TypeBinding targetType, MethodBinding method)  \t\t\t\tthrows InferenceFailureException", "diff": ["-\t\t\t\tConstraintTypeFormula newConstraint = new ConstraintTypeFormula(erasure, targetType, COMPATIBLE);", "+\t\t\t\tConstraintTypeFormula newConstraint = ConstraintTypeFormula.create(erasure, targetType, COMPATIBLE);", "-\t\t\t\tConstraintTypeFormula newConstraint = new ConstraintTypeFormula(gbeta, targetType, COMPATIBLE);", "+\t\t\t\tConstraintTypeFormula newConstraint = ConstraintTypeFormula.create(gbeta, targetType, COMPATIBLE);", "-\t\t\t\t\tConstraintTypeFormula newConstraint = new ConstraintTypeFormula(u, targetType, COMPATIBLE);", "+\t\t\t\t\tConstraintTypeFormula newConstraint = ConstraintTypeFormula.create(u, targetType, COMPATIBLE);", "-\t\t\tConstraintTypeFormula newConstraint = new ConstraintTypeFormula(rTheta, targetType, COMPATIBLE);", "+\t\t\tConstraintTypeFormula newConstraint = ConstraintTypeFormula.create(rTheta, targetType, COMPATIBLE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd038e7146f96f48a20156cdce37a629", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "d81e6de27221b2caec858658787abf55d91a925e", "commitAfterChange": "cfb9e308b9934bc0d4a17e2d4604db46f20af164", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate Object reduceReferenceExpressionCompatibility(ReferenceExpression reference, InferenceContext18 inferenceContext)", "signatureAfterChange": "  \tprivate Object reduceReferenceExpressionCompatibility(ReferenceExpression reference, InferenceContext18 inferenceContext)", "diff": ["-\t\t\t\tnewConstraints.add(new ConstraintTypeFormula(p[0], reference.lhs.resolvedType, COMPATIBLE));", "+\t\t\t\tnewConstraints.add(ConstraintTypeFormula.create(p[0], reference.lhs.resolvedType, COMPATIBLE));", "-\t\t\t\tnewConstraints.add(new ConstraintTypeFormula(p[i], pPrime[i-offset], COMPATIBLE));", "+\t\t\t\tnewConstraints.add(ConstraintTypeFormula.create(p[i], pPrime[i-offset], COMPATIBLE));", "-\t\t\t\tnewConstraints.add(new ConstraintTypeFormula(rPrime, r, COMPATIBLE));", "+\t\t\t\tnewConstraints.add(ConstraintTypeFormula.create(rPrime, r, COMPATIBLE));", "-\t\t\treturn new ConstraintTypeFormula(rPrime, r, COMPATIBLE, this.isSoft);", "+\t\t\treturn ConstraintTypeFormula.create(rPrime, r, COMPATIBLE, this.isSoft);"]}], "num": 47651}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "657132939cb680af7ef89fc0c1d32bc6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85c3a94bbf66bfb027d8e97caa4f5667", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/ExternalAnnotationUtil.java", "commitBeforeChange": "34f724a9738d7636a75842e2910c694725115548", "commitAfterChange": "9b49fc6edec0d13e82a14df97219e6ae294f74cc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate static String addAnnotationsTo(String newSignature, String oldSignature, MergeStrategy mergeStategy)", "signatureAfterChange": " \tpublic static String extractGenericTypeSignature(ITypeBinding type)", "diff": ["+\t */", "+\tpublic static String extractGenericTypeSignature(ITypeBinding type) {", "+\t\tString key = type.getKey();", "+\t\tif (type.isTypeVariable()) {", "+\t\t\tint colon= key.indexOf(':');", "+\t\t\tif (colon > -1)", "+\t\t\t\treturn key.substring(colon+1); // cut of unwanted declaring type prefix", "+\t\t}", "+\t\treturn key;", "-\tprivate static String addAnnotationsTo(String newSignature, String oldSignature, MergeStrategy mergeStategy) {", "-\t\t// TODO: consider rewrite using updateType() below", "-\t\tStringBuffer buf = new StringBuffer();", "-\t\tassert newSignature.charAt(0) == '(' : \"signature must start with '('\"; //$NON-NLS-1$", "-\t\tassert oldSignature.charAt(0) == '(' : \"signature must start with '('\"; //$NON-NLS-1$", "-\t\tbuf.append('(');", "-\t\tSignatureWrapper wrapperNew = new SignatureWrapper(newSignature.toCharArray(), true); // when using annotations we must be at 1.5+", "-\t\twrapperNew.start = 1;", "-\t\tSignatureWrapper wrapperOld = new SignatureWrapper(oldSignature.toCharArray(), true);", "-\t\twrapperOld.start = 1;", "-\t\twhile (!wrapperNew.atEnd() && !wrapperOld.atEnd()) {", "-\t\t\tint startNew = wrapperNew.start;", "-\t\t\tint startOld = wrapperOld.start;", "-\t\t\tif (wrapperNew.signature[startNew] == ')') {", "-\t\t\t\tif (wrapperOld.signature[startOld] != ')')", "-\t\t\t\t\tthrow new IllegalArgumentException(\"Structural difference between signatures \"+newSignature+\" and \"+oldSignature);  //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\tstartNew = ++wrapperNew.start;", "-\t\t\t\tstartOld = ++wrapperOld.start;", "-\t\t\t\tbuf.append(')');", "-\t\t\t}\t\t\t", "-\t\t\tint endNew = wrapperNew.computeEnd();", "-\t\t\tint endOld = wrapperOld.computeEnd();", "-\t\t\tint lenNew = endNew-startNew+1;", "-\t\t\tint lenOld = endOld-startOld+1;", "-\t\t\t // TODO detailed comparison / merging:", "-\t\t\tif (lenNew == lenOld) {", "-\t\t\t\tswitch (mergeStategy) {", "-\t\t\t\t\tcase OVERWRITE_ANNOTATIONS:", "-\t\t\t\t\t\tbuf.append(wrapperNew.signature, startNew, lenNew);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase ADD_ANNOTATIONS:", "-\t\t\t\t\t\tbuf.append(wrapperOld.signature, startOld, lenOld);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t//$CASES-OMITTED$ should only be called with the two strategies handled above", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tJavaCore.getJavaCore().getLog().log(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Unexpected value for enum MergeStrategy\")); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t} else if (lenNew > lenOld) {", "-\t\t\t\tbuf.append(wrapperNew.signature, startNew, lenNew);", "-\t\t\t} else {\t\t\t\t", "-\t\t\t\tbuf.append(wrapperOld.signature, startOld, lenOld);", "-\t\t\t}", "-\t\t}", "-\t\treturn buf.toString();", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbb9c7e9810830e9b90da8747fe3a7ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/ExternalAnnotationUtil.java", "commitBeforeChange": "34f724a9738d7636a75842e2910c694725115548", "commitAfterChange": "9b49fc6edec0d13e82a14df97219e6ae294f74cc", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate static String updateParameterType(String newParameterType, int paramIdx, String oldSignature, MergeStrategy mergeStrategy)", "signatureAfterChange": "  \tprivate static String updateSignature(String originalSignature, String annotatedSignature, int updatePosition, MergeStrategy mergeStrategy)", "diff": ["+", "+\tprivate static String updateSignature(String originalSignature, String annotatedSignature, int updatePosition, MergeStrategy mergeStrategy) {", "+\t\tStringBuffer buf = new StringBuffer();", "+\t\tString signatureToReplace;", "+\t\tString postfix = null;", "+\t\tswitch (updatePosition) {", "+\t\t\tcase POSITION_FULL_SIGNATURE:", "+\t\t\t\tsignatureToReplace = originalSignature;", "+\t\t\t\tbreak;", "+\t\t\tcase POSITION_RETURN_TYPE:", "+\t\t\t\tassert originalSignature.charAt(0) == '(' : \"signature must start with '('\"; //$NON-NLS-1$", "+\t\t\t\tint close = originalSignature.indexOf(')');", "+\t\t\t\tbuf.append(originalSignature, 0, close+1);", "+\t\t\t\tsignatureToReplace = originalSignature.substring(close+1);", "+\t\t\t\tbreak;", "+\t\t\tdefault: // parameter", "+\t\t\t\tSignatureWrapper wrapper = new SignatureWrapper(originalSignature.toCharArray(), true, true); // may already contain annotations", "+\t\t\t\twrapper.start = 1;", "+\t\t\t\tfor (int i = 0; i < updatePosition; i++)", "+\t\t\t\t\twrapper.start = wrapper.computeEnd() + 1;", "+\t\t\t\tint start = wrapper.start;", "+\t\t\t\tint end = wrapper.computeEnd();", "+\t\t\t\tend = wrapper.skipAngleContents(end);", "+\t\t\t\tbuf.append(originalSignature, 0, start);", "+\t\t\t\tsignatureToReplace = originalSignature.substring(start, end+1);", "+\t\t\t\tpostfix = originalSignature.substring(end+1, originalSignature.length());", "+\t\t}", "+\t\tupdateType(buf, signatureToReplace.toCharArray(), annotatedSignature.toCharArray(), mergeStrategy);", "+\t\tif (postfix != null)", "+\t\t\tbuf.append(postfix);", "+\t\treturn buf.toString();", "-", "-\tprivate static String updateParameterType(String newParameterType, int paramIdx, String oldSignature, MergeStrategy mergeStrategy) {", "-\t\tStringBuffer buf = new StringBuffer();", "-", "-\t\tSignatureWrapper wrapper = new SignatureWrapper(oldSignature.toCharArray(), true, true); // may already contain annotations", "-\t\twrapper.start = 1;", "-\t\tfor (int i = 0; i < paramIdx; i++)", "-\t\t\twrapper.start = wrapper.computeEnd() + 1;", "-\t\tint start = wrapper.start;", "-\t\tint end = wrapper.computeEnd();", "-\t\tend = wrapper.skipAngleContents(end);", "-\t\tbuf.append(oldSignature, 0, start);", "-\t\tupdateType(buf, oldSignature.substring(start, end+1).toCharArray(), newParameterType.toCharArray(), mergeStrategy);", "-\t\tbuf.append(oldSignature, end+1, oldSignature.length());", "-\t\treturn buf.toString();", "-\t}"]}], "num": 27814}
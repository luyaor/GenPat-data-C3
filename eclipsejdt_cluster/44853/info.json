{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa31091ad7e11500b923ccd8f6e5f32d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e222dee625b263223947ff5b286a626", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 308, "methodNumberAfterChange": 308, "signatureBeforeChange": " public void unsafeRawInvocation(ASTNode location, TypeBinding receiverType, MethodBinding method)", "signatureAfterChange": " public void unsafeRawInvocation(ASTNode location, MethodBinding rawMethod)", "diff": ["-public void unsafeRawInvocation(ASTNode location, TypeBinding receiverType, MethodBinding method) {", "-    if (method.isConstructor()) {", "+public void unsafeRawInvocation(ASTNode location, MethodBinding rawMethod) {", "+    if (rawMethod.isConstructor()) {", "-\t\t\t\tnew String(receiverType.readableName()),", "-\t\t\t\ttypesAsString(method.original().isVarargs(), method.original().parameters, false),", "-\t\t\t\tnew String(receiverType.erasure().readableName()),", "+\t\t\t\tnew String(rawMethod.declaringClass.readableName()),", "+\t\t\t\ttypesAsString(rawMethod.original().isVarargs(), rawMethod.parameters, false),", "+\t\t\t\tnew String(rawMethod.declaringClass.erasure().readableName()),", "-\t\t\t\tnew String(receiverType.shortReadableName()),", "-\t\t\t\ttypesAsString(method.original().isVarargs(), method.original().parameters, true),", "-\t\t\t\tnew String(receiverType.erasure().shortReadableName()),", "+\t\t\t\tnew String(rawMethod.declaringClass.shortReadableName()),", "+\t\t\t\ttypesAsString(rawMethod.original().isVarargs(), rawMethod.parameters, true),", "+\t\t\t\tnew String(rawMethod.declaringClass.erasure().shortReadableName()),", "-\t\t\t\tnew String(method.selector),", "-\t\t\t\ttypesAsString(method.original().isVarargs(), method.original().parameters, false),", "-\t\t\t\tnew String(receiverType.readableName()),", "-\t\t\t\tnew String(receiverType.erasure().readableName()),", "+\t\t\t\tnew String(rawMethod.selector),", "+\t\t\t\ttypesAsString(rawMethod.original().isVarargs(), rawMethod.parameters, false),", "+\t\t\t\tnew String(rawMethod.declaringClass.readableName()),", "+\t\t\t\tnew String(rawMethod.declaringClass.erasure().readableName()),", "-\t\t\t\tnew String(method.selector),", "-\t\t\t\ttypesAsString(method.original().isVarargs(), method.original().parameters, true),", "-\t\t\t\tnew String(receiverType.shortReadableName()),", "-\t\t\t\tnew String(receiverType.erasure().shortReadableName()),", "+\t\t\t\tnew String(rawMethod.selector),", "+\t\t\t\ttypesAsString(rawMethod.original().isVarargs(), rawMethod.parameters, true),", "+\t\t\t\tnew String(rawMethod.declaringClass.shortReadableName()),", "+\t\t\t\tnew String(rawMethod.declaringClass.erasure().shortReadableName()),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ae8a3ce314a27761b8ec770021f10cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "e6e8c555a7d6f504d4ea246c591d5bb3f080d438", "commitAfterChange": "3316f207e855c46fb5e805791239fa37620ca8c4", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 14, "signatureBeforeChange": " DiskIndex mergeWith(MemoryIndex memoryIndex) throws IOException", "signatureAfterChange": " DiskIndex mergeWith(MemoryIndex memoryIndex) throws IOException", "diff": ["-\t\tDiskIndex newDiskIndex = new DiskIndex(this.fileName);", "+\t\tDiskIndex newDiskIndex = new DiskIndex(this.indexFile.getPath());", "-\tDiskIndex newDiskIndex = new DiskIndex(this.fileName + \".tmp\"); //$NON-NLS-1$", "-\tFile newIndexFile = newDiskIndex.getIndexFile();", "+\tDiskIndex newDiskIndex = new DiskIndex(this.indexFile.getPath() + \".tmp\"); //$NON-NLS-1$", "-\t\tnewDiskIndex.initializeFrom(this, newIndexFile);", "-\t\tDataOutputStream stream = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(newIndexFile, false), 2048));", "+\t\tnewDiskIndex.initializeFrom(this, newDiskIndex.indexFile);", "+\t\tDataOutputStream stream = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(newDiskIndex.indexFile, false), 2048));", "-\t\t\t\t\t\t\t(HashtableOfObject) memoryIndex.docsToReferences.get(names[i]),", "-\t\t\t\t\t\t\t((Integer) integerPositions[i]).intValue());", "+\t\t\t\t\t\t\t(HashtableOfObject) memoryIndex.docsToReferences.get(names[i]), ((Integer) integerPositions[i]).intValue());", "-\t\tFile old = getIndexFile();", "-\t\tif (old.exists() && !old.delete()) {", "+\t\tif (this.indexFile.exists() && !this.indexFile.delete()) {", "-\t\t\t\tSystem.out.println(\"mergeWith - Failed to delete \" + this.fileName); //$NON-NLS-1$", "-\t\t\tthrow new IOException(\"Failed to delete index file \" + this.fileName); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"mergeWith - Failed to delete \" + this.indexFile); //$NON-NLS-1$", "+\t\t\tthrow new IOException(\"Failed to delete index file \" + this.indexFile); //$NON-NLS-1$", "-\t\tif (!newIndexFile.renameTo(old)) {", "+\t\tif (!newDiskIndex.indexFile.renameTo(this.indexFile)) {", "-\t\t\t\tSystem.out.println(\"mergeWith - Failed to rename \" + this.fileName); //$NON-NLS-1$", "-\t\t\tthrow new IOException(\"Failed to rename index file \" + this.fileName); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"mergeWith - Failed to rename \" + this.indexFile); //$NON-NLS-1$", "+\t\t\tthrow new IOException(\"Failed to rename index file \" + this.indexFile); //$NON-NLS-1$", "-\t\tif (newIndexFile.exists() && !newIndexFile.delete())", "+\t\tif (newDiskIndex.indexFile.exists() && !newDiskIndex.indexFile.delete())", "-\t\t\t\tSystem.out.println(\"mergeWith - Failed to delete temp index \" + newDiskIndex.fileName); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"mergeWith - Failed to delete temp index \" + newDiskIndex.indexFile); //$NON-NLS-1$", "-\tnewDiskIndex.fileName = this.fileName;", "+\tnewDiskIndex.indexFile = this.indexFile;"]}], "num": 44853}
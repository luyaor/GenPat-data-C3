{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d42c264e0198205fc862797617c634b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf5db8afd60edc1d59d0d81c84644ab9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java", "commitBeforeChange": "4cd7b0042adaa5239f354bb5b89cc98c811b7e1c", "commitAfterChange": "e6a94071ba1347cd79bc7467e3bac32c94398042", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  protected void rebuildTypesAffectedBySecondaryTypes()", "signatureAfterChange": "  protected void rebuildTypesAffectedBySecondaryTypes()", "diff": ["-\tfor (int i = this.secondaryTypes.size(); --i >=0;) {", "-\t\tchar[] secondaryTypeName = (char[]) this.secondaryTypes.get(i);", "+\tint count = this.secondaryTypes.size();", "+\tStringSet qualifiedNames = new StringSet(count * 2);", "+\tStringSet simpleNames = new StringSet(count);", "+\twhile (--count >=0) {", "+\t\tchar[] secondaryTypeName = (char[]) this.secondaryTypes.get(count);", "-\t\tthis.incrementalBuilder.addDependentsOf(path, false);", "+\t\tthis.incrementalBuilder.addDependentsOf(path, false, qualifiedNames, simpleNames);", "-\t\tthis.incrementalBuilder.qualifiedStrings,", "-\t\tthis.incrementalBuilder.simpleStrings,", "+\t\tqualifiedNames,", "+\t\tsimpleNames,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c54fa920149ec4c34d2b043aa75d3642", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "23ab511ee7d420cbed39a636881d71e5078414f0", "commitAfterChange": "30e561e018599c00e9be20fc1a036a6166bf2a12", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void generateOptimizedLogicalOr( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedLogicalOr( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "diff": ["+\t\t\t\t\tLabel internalFalseLabel = new Label(codeStream);", "-\t\t\t\t\t\tfalseLabel,", "+\t\t\t\t\t\tinternalFalseLabel,", "+\t\t\t\t\tinternalFalseLabel.place();", "+\t\t\t\t\tLabel internalFalseLabel = new Label(codeStream);", "-\t\t\t\t\t\tfalseLabel,", "+\t\t\t\t\t\tinternalFalseLabel,", "+\t\t\t\t\tinternalFalseLabel.place();"]}], "num": 15403}
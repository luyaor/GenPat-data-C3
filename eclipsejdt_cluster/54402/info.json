{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac2e9636e4c4d9ffaf9a5f11b4d72558", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4f5d4a776722af5b73526aa35935da9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java", "commitBeforeChange": "9c3c9a68123a2dba6c0a481afee1d6f36fcdd02a", "commitAfterChange": "c00079358eb2e0feded1f86b5088b09215957a9d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic final TypeBinding getUnannotatedType(TypeBinding type)", "signatureAfterChange": " \tpublic final TypeBinding getUnannotatedType(TypeBinding type)", "diff": ["-\t\tif (type.isUnresolvedType() && CharOperation.indexOf('$', type.sourceName()) > 0)", "-\t\t\ttype = BinaryTypeBinding.resolveType(type, this.environment, true); // to ensure unique id assignment (when enclosing type is parameterized, inner type is also) ", "+\t\tif (type.isUnresolvedType() && CharOperation.indexOf('$', type.sourceName()) > 0) {", "+\t\t\tboolean mayTolerateMissingType = this.environment.mayTolerateMissingType;", "+\t\t\tthis.environment.mayTolerateMissingType = true;", "+\t\t\ttry {", "+\t\t\t\ttype = BinaryTypeBinding.resolveType(type, this.environment, true); // to ensure unique id assignment (when enclosing type is parameterized, inner type is also) ", "+\t\t\t} finally {", "+\t\t\t\tthis.environment.mayTolerateMissingType = mayTolerateMissingType;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d83764acaa49b330b55194903eb2d83a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "5f660283883cb036f6f2660e9305988c653cd514", "commitAfterChange": "0a2561a9f4fa2cd8d6a7920515eebbf8940cc034", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " protected void process(PossibleMatch possibleMatch, boolean bindingsWereCreated) throws CoreException", "signatureAfterChange": " protected void process(PossibleMatch possibleMatch, boolean bindingsWereCreated) throws CoreException", "diff": ["-\t\t\t\tif (info != null)", "-\t\t\t\t\tnew ClassFileMatchLocator().locateMatches(this, classFile, info);", "+\t\t\t\tif (info != null) {", "+\t\t\t\t\tboolean mayBeGeneric = this.patternLocator.mayBeGeneric;", "+\t\t\t\t\tthis.patternLocator.mayBeGeneric = false; // there's no longer generics in class files", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tnew ClassFileMatchLocator().locateMatches(this, classFile, info);", "+\t\t\t\t\t}", "+\t\t\t\t\tfinally {", "+\t\t\t\t\t\tthis.patternLocator.mayBeGeneric = mayBeGeneric;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 54402}
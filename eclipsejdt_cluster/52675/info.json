{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2bd3f8c8ad630c01635b49ce539eac3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8379a881c1b02ba4ce92c20b9793da7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java", "commitBeforeChange": "dfcfcaedc8372b070ca684decc611420969812d4", "commitAfterChange": "9bef32a39642c351ad08557498e432fc6a29aeb4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void finalizeProblems()", "signatureAfterChange": "  \tpublic void finalizeProblems()", "diff": ["-\t\t\t\t\t\t\t\t\t\t\t\tlong irritant = CompilerOptions.warningTokenToIrritant(cst.stringValue());", "-\t\t\t\t\t\t\t\t\t\t\t\tif (irritant != 0 && (foundIrritants[iSuppress] & irritant) == 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\tlong tokenIrritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());", "+\t\t\t\t\t\t\t\t\t\t\t\tif (tokenIrritants != 0 ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& ~tokenIrritants != 0 // no complaint against @SuppressWarnings(\"all\")", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& options.getSeverity(tokenIrritants) != ProblemSeverities.Ignore // if irritant is effectevely enabled", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& (foundIrritants[iSuppress] & tokenIrritants) == 0) { // if irritant had no matching problem", "-\t\t\t\t\t\t\t\t\t\tlong irritant = CompilerOptions.warningTokenToIrritant(cst.stringValue());", "-\t\t\t\t\t\t\t\t\t\tif (irritant != 0 && (foundIrritants[iSuppress] & irritant) == 0) {", "+\t\t\t\t\t\t\t\t\t\tlong tokenIrritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());", "+\t\t\t\t\t\t\t\t\t\tif (tokenIrritants != 0 ", "+\t\t\t\t\t\t\t\t\t\t\t\t&& ~tokenIrritants != 0 // no complaint against @SuppressWarnings(\"all\")", "+\t\t\t\t\t\t\t\t\t\t\t\t&& options.getSeverity(tokenIrritants) != ProblemSeverities.Ignore // if irritant is effectevely enabled", "+\t\t\t\t\t\t\t\t\t\t\t\t&& (foundIrritants[iSuppress] & tokenIrritants) == 0) { // if irritant had no matching problem"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0db81e53356075b6f97e9b922df0ad9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "2923ed68c1f82d0e305a158b4c5d393b708481eb", "commitAfterChange": "78fb30efd0199bf293193efc0adbb492172aafcc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void recordSuppressWarnings(Scope scope, int startSuppresss, int endSuppress, boolean isSuppressingWarnings)", "signatureAfterChange": "  \tpublic void recordSuppressWarnings(Scope scope, int startSuppresss, int endSuppress, boolean isSuppressingWarnings)", "diff": ["-\t\tlong suppressWarningIrritants = 0;", "+\t\tIrritantSet suppressWarningIrritants = null;", "-\t\t\t\t\t\t\t\tlong irritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());", "-\t\t\t\t\t\t\t\tif (irritants != 0) {", "-\t\t\t\t\t\t\t\t\tif ((suppressWarningIrritants & irritants) == irritants) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().unusedWarningToken(inits[j]);", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tsuppressWarningIrritants |= irritants;", "+\t\t\t\t\t\t\t\tIrritantSet irritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());", "+\t\t\t\t\t\t\t\tif (irritants != null) {", "+\t\t\t\t\t\t\t\t\tif (suppressWarningIrritants == null) {", "+\t\t\t\t\t\t\t\t\t\tsuppressWarningIrritants = new IrritantSet(irritants);", "+\t\t\t\t\t\t\t\t\t} else if (suppressWarningIrritants.set(irritants) == null) {", "+\t\t\t\t\t\t\t\t\t\t\tscope.problemReporter().unusedWarningToken(inits[j]);", "-\t\t\t\t\t\tlong irritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());", "-\t\t\t\t\t\tif (irritants != 0) {", "-\t\t\t\t\t\t\tsuppressWarningIrritants |= irritants;", "+\t\t\t\t\t\tIrritantSet irritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());", "+\t\t\t\t\t\tif (irritants != null) {", "+\t\t\t\t\t\t\tsuppressWarningIrritants = new IrritantSet(irritants);", "+\t\t\t\t\t\t\t// TODO: should check for unused warning token against enclosing annotation as well ?", "-\t\tif (isSuppressingWarnings && suppressWarningIrritants != 0) {", "+\t\tif (isSuppressingWarnings && suppressWarningIrritants != null) {"]}], "num": 52675}
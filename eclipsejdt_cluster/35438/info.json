{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8be2b702d93a8d6de1fdb2d15b779719", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e2234a16ba9431d4e1016a06c87053d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRootInfo.java", "commitBeforeChange": "c09e95424aee3fa583749f78830353a794128164", "commitAfterChange": "c7b59a28aedb68eaaa1a4a3fd7cd0012ca10b3f9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " private Object[] computeFolderNonJavaResources(JavaProject project, IContainer folder, char[][] exclusionPatterns) throws JavaModelException", "signatureAfterChange": " static Object[] computeFolderNonJavaResources(JavaProject project, IContainer folder, char[][] exclusionPatterns) throws JavaModelException", "diff": ["-private Object[] computeFolderNonJavaResources(JavaProject project, IContainer folder, char[][] exclusionPatterns) throws JavaModelException {", "+static Object[] computeFolderNonJavaResources(JavaProject project, IContainer folder, char[][] exclusionPatterns) throws JavaModelException {", "-\t\tfor (int i = 0, max = members.length; i < max; i++) {", "+\t\tnextResource: for (int i = 0, max = members.length; i < max; i++) {", "-\t\t\tif (Util.isExcluded(member, exclusionPatterns)) continue;", "-\t\t\tif (member.getType() == IResource.FILE) {", "-\t\t\t\tString fileName = member.getName();", "-\t\t\t\tif (!Util.isValidCompilationUnitName(fileName) && !Util.isValidClassFileName(fileName)) {", "+\t\t\tswitch (member.getType()) {", "+\t\t\t\tcase IResource.FILE :", "+\t\t\t\t\tString fileName = member.getName();", "+\t\t\t\t\tif (Util.isValidCompilationUnitName(fileName) && !Util.isExcluded(member, exclusionPatterns)) ", "+\t\t\t\t\t\tcontinue nextResource;", "+\t\t\t\t\tif (Util.isValidClassFileName(fileName)) ", "+\t\t\t\t\t\tcontinue nextResource;", "-\t\t\t\t\tif (project.findPackageFragmentRoot0(member.getFullPath()) == null) {", "-\t\t\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "-\t\t\t\t\t\t\t// resize", "-\t\t\t\t\t\t\tSystem.arraycopy(nonJavaResources, 0, (nonJavaResources = new IResource[nonJavaResourcesCounter * 2]), 0, nonJavaResourcesCounter);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = member;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else if (member.getType() == IResource.FOLDER) {", "-\t\t\t\tif (!Util.isValidFolderNameForPackage(member.getName())) {", "-\t\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "-\t\t\t\t\t\t// resize", "-\t\t\t\t\t\tSystem.arraycopy(nonJavaResources, 0, (nonJavaResources = new IResource[nonJavaResourcesCounter * 2]), 0, nonJavaResourcesCounter);", "-\t\t\t\t\t}", "-\t\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = member;", "-\t\t\t\t}", "+\t\t\t\t\tif (Util.isArchiveFileName(fileName) && project.findPackageFragmentRoot0(member.getFullPath()) != null) ", "+\t\t\t\t\t\tcontinue nextResource;", "+\t\t\t\t\tbreak;", "+", "+\t\t\t\tcase IResource.FOLDER :", "+\t\t\t\t\tif (Util.isValidFolderNameForPackage(member.getName()) && !Util.isExcluded(member, exclusionPatterns)) ", "+\t\t\t\t\t\tcontinue nextResource;", "+\t\t\t\t\tbreak;", "+\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "+\t\t\t\t// resize", "+\t\t\t\tSystem.arraycopy(nonJavaResources, 0, (nonJavaResources = new IResource[nonJavaResourcesCounter * 2]), 0, nonJavaResourcesCounter);", "+\t\t\t}", "+\t\t\tnonJavaResources[nonJavaResourcesCounter++] = member;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e1505bbf9fb928b835b11b6ce69f9bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "12bbec9151d1b613c62f44289e9e604128f21de0", "commitAfterChange": "cfad6931331ca38f2461ad24853dd9b6dfa652de", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic static IClasspathEntry elementDecode(Element element, IJavaProject project)", "signatureAfterChange": " \t \tpublic static IClasspathEntry elementDecode(Element element, IJavaProject project)", "diff": ["-\t\t// accessible files patterns (optional)", "-\t\tIPath[] accessibleFiles = decodePatterns(element, TAG_ACCESSIBLE);", "-\t\tif (accessibleFiles == null) accessibleFiles = inclusionPatterns; // backward compatible", "+\t\t// access rules (optional)", "+\t\tIAccessRule[] accessRules = decodeAccessRules(element);", "-\t\t// non accessible files patterns (optional)", "-\t\tIPath[] nonAccessibleFiles = decodePatterns(element, TAG_NONACCESSIBLE);", "-\t\tif (nonAccessibleFiles == null) nonAccessibleFiles = exclusionPatterns; // backward compatible", "-\t\t", "-\t\t// combine access restrictions (optional)", "-\t\tboolean combineAccessRestrictions = !element.getAttribute(TAG_COMBINE_ACCESS_RESTRICTIONS).equals(\"false\"); //$NON-NLS-1$", "+\t\t// backward compatibility", "+\t\tif (accessRules == null) {", "+\t\t\taccessRules = getAccessRules(inclusionPatterns, exclusionPatterns);", "+\t\t}", "+", "+\t\t// combine access rules (optional)", "+\t\tboolean combineAccessRestrictions = !element.getAttribute(TAG_COMBINE_ACCESS_RULES).equals(\"false\"); //$NON-NLS-1$", "+\t\tIClasspathEntry entry = null;", "-\t\t\t\treturn JavaCore.newProjectEntry(", "+\t\t\t\tentry = JavaCore.newProjectEntry(", "-\t\t\t\t\t\t\t\t\t\t\t\taccessibleFiles,", "-\t\t\t\t\t\t\t\t\t\t\t\tnonAccessibleFiles,", "+\t\t\t\t\t\t\t\t\t\t\t\taccessRules,", "-\t\t\t\t", "+\t\t\t\tbreak;\t\t\t\t", "-\t\t\t\treturn JavaCore.newLibraryEntry(", "+\t\t\t\tentry = JavaCore.newLibraryEntry(", "-\t\t\t\t\t\t\t\t\t\t\t\taccessibleFiles,", "-\t\t\t\t\t\t\t\t\t\t\t\tnonAccessibleFiles,", "+\t\t\t\t\t\t\t\t\t\t\t\taccessRules,", "-\t\t\t\t", "+\t\t\t\tbreak;", "-\t\t\t\t\t\treturn JavaCore.newProjectEntry(", "+\t\t\t\t\t\tentry = JavaCore.newProjectEntry(", "-\t\t\t\t\t\t\t\t\t\t\t\taccessibleFiles,", "-\t\t\t\t\t\t\t\t\t\t\t\tnonAccessibleFiles,", "+\t\t\t\t\t\t\t\t\t\t\t\taccessRules,", "-", "+\t\t\t\tbreak;", "-\t\t\t\treturn JavaCore.newVariableEntry(", "+\t\t\t\tentry = JavaCore.newVariableEntry(", "-\t\t\t\t\t\taccessibleFiles,", "-\t\t\t\t\t\tnonAccessibleFiles,", "+\t\t\t\t\t\taccessRules,", "-\t\t\t\t", "+\t\t\t\tbreak;", "-\t\t\t\treturn JavaCore.newContainerEntry(", "+\t\t\t\tentry = JavaCore.newContainerEntry(", "-\t\t\t\t\t\taccessibleFiles,", "-\t\t\t\t\t\tnonAccessibleFiles,", "+\t\t\t\t\t\taccessRules,", "-", "+\t\t\t\tbreak;", "-\t\t\t\t\t\tINCLUDE_ALL, ", "-\t\t\t\t\t\tEXCLUDE_NONE,", "+\t\t\t\t\t\tnull,", "+\t\treturn entry;"]}], "num": 35438}
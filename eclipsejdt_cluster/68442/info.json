{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ac76d15941cc961e905ecc75692dacd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d162c296ca758a95b22ce2a73e35b77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic StringBuffer printExpression(int indent, StringBuffer output)", "signatureAfterChange": "  \tpublic StringBuffer printExpression(int indent, StringBuffer output)", "diff": ["+\t\tif (typeArguments != null) {", "+\t\t\toutput.append('<');//$NON-NLS-1$", "+\t\t\tint max = typeArguments.length - 1;", "+\t\t\tfor (int j = 0; j < max; j++) {", "+\t\t\t\ttypeArguments[j].print(0, output);", "+\t\t\t\toutput.append(\", \");//$NON-NLS-1$", "+\t\t\t}", "+\t\t\ttypeArguments[max].print(0, output);", "+\t\t\toutput.append('>');", "+\t\t}\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f4013b68264fe9692d23d675f01ae9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic StringBuffer printStatement(int indent, StringBuffer output)", "signatureAfterChange": "  \tpublic StringBuffer printStatement(int indent, StringBuffer output)", "diff": ["+\t\tif (typeArguments != null) {", "+\t\t\toutput.append('<');//$NON-NLS-1$", "+\t\t\tint max = typeArguments.length - 1;", "+\t\t\tfor (int j = 0; j < max; j++) {", "+\t\t\t\ttypeArguments[j].print(0, output);", "+\t\t\t\toutput.append(\", \");//$NON-NLS-1$", "+\t\t\t}", "+\t\t\ttypeArguments[max].print(0, output);", "+\t\t\toutput.append('>');", "+\t\t}\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b46f3c01092e231984d4a702be7c72e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic StringBuffer printExpression(int indent, StringBuffer output)", "signatureAfterChange": "  \tpublic StringBuffer printExpression(int indent, StringBuffer output)", "diff": ["+\t\tif (typeArguments != null) {", "+\t\t\toutput.append('<');//$NON-NLS-1$", "+\t\t\tint max = typeArguments.length - 1;", "+\t\t\tfor (int j = 0; j < max; j++) {", "+\t\t\t\ttypeArguments[j].print(0, output);", "+\t\t\t\toutput.append(\", \");//$NON-NLS-1$", "+\t\t\t}", "+\t\t\ttypeArguments[max].print(0, output);", "+\t\t\toutput.append('>');", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b759059784f94ffe0a43272f85814221", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic StringBuffer print(int tab, StringBuffer output)", "signatureAfterChange": "  \tpublic StringBuffer print(int tab, StringBuffer output)", "diff": ["+\t\t", "+\t\tTypeParameter[] typeParams = typeParameters();", "+\t\tif (typeParams != null) {", "+\t\t\toutput.append('<');//$NON-NLS-1$", "+\t\t\tint max = typeParams.length - 1;", "+\t\t\tfor (int j = 0; j < max; j++) {", "+\t\t\t\ttypeParams[j].print(0, output);", "+\t\t\t\toutput.append(\", \");//$NON-NLS-1$", "+\t\t\t}", "+\t\t\ttypeParams[max].print(0, output);", "+\t\t\toutput.append('>');", "+\t\t}", "+\t\t"]}], "num": 68442}
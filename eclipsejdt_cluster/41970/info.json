{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "99b23623258ccbdcb239b11c38b00d16", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40d923a25c8f809d778674cbf91ed0d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/FileSystemUtil.java", "commitBeforeChange": "b32e19a51dc51c8f48a8148ad21af35d765d650d", "commitAfterChange": "b9048812dd88e4e03993f3f1485c45b1b5d06172", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "            public static void makeDerivedParentFolders (IContainer container) throws CoreException", "signatureAfterChange": "            public static void makeDerivedParentFolders (IContainer container) throws CoreException", "diff": ["-\t\tif ((container instanceof IFolder) && !container.exists()) {", "-\t\t\tmakeDerivedParentFolders(container.getParent());", "-\t\t\t((IFolder) container).create(true, true, null);", "-\t\t\tcontainer.setDerived(true);", "-\t\t}", "+    \t// synchronize the \"does it exist - if not, create it\" sequence.", "+    \tsynchronized(container.getProject()) {", "+\t\t\tif ((container instanceof IFolder) && !container.exists()) {", "+\t\t\t\tmakeDerivedParentFolders(container.getParent());", "+\t\t    \ttry {", "+\t\t    \t\t((IFolder)container).create(true, true, null);", "+\t\t    \t}", "+\t\t    \tcatch (CoreException e) {", "+\t\t    \t\t// Ignore race condition where another thread created the folder at the", "+\t\t    \t\t// same time, causing checkDoesNotExist() to throw within create(). ", "+\t\t    \t\tif (!container.exists()) {", "+\t\t    \t\t\tthrow e;", "+\t\t    \t\t}", "+\t\t    \t}", "+\t\t\t\tcontainer.setDerived(true);", "+\t\t\t}", "+    \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a08e80344e80b8666bec0c3157aa012", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "fe7b697ca16cd240df01b1ad29e35b2693b4b160", "commitAfterChange": "68fbbc2b696126776a21b18e5e10fb30f89536f0", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  protected boolean generateInfos(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": "  protected boolean generateInfos(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["-\t\t\tunitInfo.fTimestamp = ((IFile) original.getUnderlyingResource()).getModificationStamp();", "-\t\t\tif(unitInfo.fTimestamp == IResource.NULL_STAMP){", "-\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_RESOURCE));", "+\t\t\ttry {", "+\t\t\t\tunitInfo.fTimestamp = ((IFile) original.getUnderlyingResource()).getModificationStamp();", "+\t\t\t\tif(unitInfo.fTimestamp == IResource.NULL_STAMP){", "+\t\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_RESOURCE));", "+\t\t\t\t}", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// if original element does not exit, ignore", "+\t\t\t\tif (!e.getJavaModelStatus().isDoesNotExist()) {", "+\t\t\t\t\tthrow e;", "+\t\t\t\t}"]}], "num": 41970}
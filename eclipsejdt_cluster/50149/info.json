{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f1aa9efc5eeecd65ba6af87eefaa4259", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e76786a73d1e6947b294a5938d1f68f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "db9be76de74b56d6d850bf6fc58da2f76b6cafdd", "commitAfterChange": "08d03106dd01075a6d73c7857f8d76a79176b45d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic synchronized void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)", "signatureAfterChange": "  \tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)", "diff": ["-\tpublic synchronized void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)  {", "-\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "-\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "-\t\ttry {", "-\t\t\tString propertyValue = UserLibrary.serialize(entries, isSystemLibrary);", "-\t\t\tinstancePreferences.put(propertyName, propertyValue); // sends out a PreferenceChangeEvent (see preferenceChange(...))", "-\t\t} catch (IOException e) {", "-\t\t\tUtil.log(e, \"Exception while serializing user library \" + libName); //$NON-NLS-1$", "-\t\t\treturn;", "-\t\t}", "-\t\ttry {", "-\t\t\tinstancePreferences.flush();", "-\t\t} catch (BackingStoreException e) {", "-\t\t\tUtil.log(e, \"Exception while saving user library \" + libName); //$NON-NLS-1$", "+\tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)  {", "+\t\tsynchronized (this.userLibraries) {", "+\t\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "+\t\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "+\t\t\ttry {", "+\t\t\t\tString propertyValue = UserLibrary.serialize(entries, isSystemLibrary);", "+\t\t\t\tinstancePreferences.put(propertyName, propertyValue); // sends out a PreferenceChangeEvent (see preferenceChange(...))", "+\t\t\t} catch (IOException e) {", "+\t\t\t\tUtil.log(e, \"Exception while serializing user library \" + libName); //$NON-NLS-1$", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tinstancePreferences.flush();", "+\t\t\t} catch (BackingStoreException e) {", "+\t\t\t\tUtil.log(e, \"Exception while saving user library \" + libName); //$NON-NLS-1$", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f469000b64153055783c23090d770da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "eb71a6569553cf8d8553685f6e99ee5bc278eacc", "commitAfterChange": "15e3a9fc2ecd5761f01e0bac254435a2b7c9efda", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)", "signatureAfterChange": "  \tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)", "diff": ["-\tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary) {", "-\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "-\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX + libName;", "-\t\ttry {", "-\t\t\tString propertyValue = UserLibrary.serialize(entries, isSystemLibrary);", "-\t\t\tinstancePreferences.put(propertyName, propertyValue); // sends out a PreferenceChangeEvent (see", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// preferenceChange(...))", "-\t\t} catch (IOException e) {", "-\t\t\tUtil.log(e, \"Exception while serializing user library \" + libName); //$NON-NLS-1$", "-\t\t\treturn;", "+\tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)  {", "+\t\tsynchronized (this.userLibraries) {", "+\t\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "+\t\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "+\t\t\ttry {", "+\t\t\t\tString propertyValue = UserLibrary.serialize(entries, isSystemLibrary);", "+\t\t\t\tinstancePreferences.put(propertyName, propertyValue); // sends out a PreferenceChangeEvent (see preferenceChange(...))", "+\t\t\t} catch (IOException e) {", "+\t\t\t\tUtil.log(e, \"Exception while serializing user library \" + libName); //$NON-NLS-1$", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tinstancePreferences.flush();", "+\t\t\t} catch (BackingStoreException e) {", "+\t\t\t\tUtil.log(e, \"Exception while saving user library \" + libName); //$NON-NLS-1$", "+\t\t\t}", "-\t\ttry {", "-\t\t\tinstancePreferences.flush();", "-\t\t} catch (BackingStoreException e) {", "-\t\t\tUtil.log(e, \"Exception while saving user library \" + libName); //$NON-NLS-1$", "-\t\t}", "-\t\t// No need to lock this.userLibraries since SetContainerOperation uses ISchedulingRule now.", "+\t\t// this.userLibraries was updated during the PreferenceChangeEvent (see preferenceChange(...))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57538ea884ffc5c29027d5eb71196a48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "db9be76de74b56d6d850bf6fc58da2f76b6cafdd", "commitAfterChange": "08d03106dd01075a6d73c7857f8d76a79176b45d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic synchronized void removeUserLibrary(String libName)", "signatureAfterChange": "  \tpublic void removeUserLibrary(String libName)", "diff": ["-\tpublic synchronized void removeUserLibrary(String libName)  {", "-\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "-\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "-\t\tinstancePreferences.remove(propertyName);", "-\t\ttry {", "-\t\t\tinstancePreferences.flush();", "-\t\t} catch (BackingStoreException e) {", "-\t\t\tUtil.log(e, \"Exception while removing user library \" + libName); //$NON-NLS-1$", "+\tpublic void removeUserLibrary(String libName)  {", "+\t\tsynchronized (this.userLibraries) {", "+\t\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "+\t\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "+\t\t\tinstancePreferences.remove(propertyName);", "+\t\t\ttry {", "+\t\t\t\tinstancePreferences.flush();", "+\t\t\t} catch (BackingStoreException e) {", "+\t\t\t\tUtil.log(e, \"Exception while removing user library \" + libName); //$NON-NLS-1$", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adf6c8552c1718fa28a84bde086eb803", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "eb71a6569553cf8d8553685f6e99ee5bc278eacc", "commitAfterChange": "15e3a9fc2ecd5761f01e0bac254435a2b7c9efda", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void removeUserLibrary(String libName)", "signatureAfterChange": "  \tpublic void removeUserLibrary(String libName)", "diff": ["-\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "-\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "-\t\tinstancePreferences.remove(propertyName);", "-\t\ttry {", "-\t\t\tinstancePreferences.flush();", "-\t\t} catch (BackingStoreException e) {", "-\t\t\tUtil.log(e, \"Exception while removing user library \" + libName); //$NON-NLS-1$", "+\t\tsynchronized (this.userLibraries) {", "+\t\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "+\t\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "+\t\t\tinstancePreferences.remove(propertyName);", "+\t\t\ttry {", "+\t\t\t\tinstancePreferences.flush();", "+\t\t\t} catch (BackingStoreException e) {", "+\t\t\t\tUtil.log(e, \"Exception while removing user library \" + libName); //$NON-NLS-1$", "+\t\t\t}", "-\t\t// No need to lock this.userLibraries since SetContainerOperation uses ISchedulingRule now.", "+\t\t// this.userLibraries was updated during the PreferenceChangeEvent (see preferenceChange(...))"]}], "num": 50149}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31d6c4f1a6e7f75f6cd548fffb567fe7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebc967d41512013988d45c1203ffb744", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "7c5e971605e3df9f80c39caf6a5dabceeb49148b", "commitAfterChange": "ffe39da04df0f3a3dcc2e15c0353857438ce8e35", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 130, "signatureBeforeChange": " protected void consumeEmptyStatement()", "signatureAfterChange": " protected void consumeEmptyStatement()", "diff": ["-\tif (this.scanner.source[this.endStatementPosition] == ';') {", "+\tchar[] source = this.scanner.source;", "+\tif (source[this.endStatementPosition] == ';') {", "-\t\t// we have a Unicode for the ';' (/u003B)", "-\t\tpushOnAstStack(new EmptyStatement(this.endStatementPosition - 5, this.endStatementPosition));", "+\t\tif(source.length > 5) {", "+\t\t\tint c1 = 0, c2 = 0, c3 = 0, c4 = 0;", "+\t\t\tint pos = this.endStatementPosition - 4;", "+\t\t\twhile (source[pos] == 'u') {", "+\t\t\t\tpos--;", "+\t\t\t}", "+\t\t\tif (source[pos] == '\\\\' &&", "+\t\t\t\t\t!((c1 = Character.getNumericValue(source[this.endStatementPosition - 3])) > 15", "+\t\t\t\t\t\t|| c1 < 0", "+\t\t\t\t\t\t|| (c2 = Character.getNumericValue(source[this.endStatementPosition - 2])) > 15", "+\t\t\t\t\t\t|| c2 < 0", "+\t\t\t\t\t\t|| (c3 = Character.getNumericValue(source[this.endStatementPosition - 1])) > 15", "+\t\t\t\t\t\t|| c3 < 0", "+\t\t\t\t\t\t|| (c4 = Character.getNumericValue(source[this.endStatementPosition])) > 15", "+\t\t\t\t\t\t|| c4 < 0) &&", "+\t\t\t\t\t((char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4)) == ';'){", "+\t\t\t\t// we have a Unicode for the ';' (/u003B)", "+\t\t\t\tpushOnAstStack(new EmptyStatement(pos, this.endStatementPosition));", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "+\t\tpushOnAstStack(new EmptyStatement(this.endStatementPosition, this.endStatementPosition));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3820c473c91b4785d80d32cf329ab98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "d7e050c27656f3c655cbceb92a53dfdd3a265d24", "commitAfterChange": "36dbe4a61ccd2e283322ec353cff1f83cf809e44", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["+\tint whiteStart = 0;", "-\t\t\tint whiteStart = currentPosition;", "+\t\t\twhiteStart = currentPosition;", "-\t\t\t\t\t\t\tint endPositionForLineComment = 0;", "-\t\t\t\t\t\t\t\tif (isUnicode) {", "-\t\t\t\t\t\t\t\t\tendPositionForLineComment = currentPosition - 6;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tendPositionForLineComment = currentPosition - 1;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t * We need to completely consume the line break\r\t\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\t\tif (currentCharacter == '\\r'", "+\t\t\t\t\t\t\t\t   && source.length > currentPosition) {", "+\t\t\t\t\t\t\t\t   \tif (source[currentPosition] == '\\n') {", "+\t\t\t\t\t\t\t\t\t\tcurrentPosition++;", "+\t\t\t\t\t\t\t\t\t\tcurrentCharacter = '\\n';", "+\t\t\t\t\t\t\t\t   \t} else if (((currentCharacter = source[currentPosition]) == '\\\\')", "+\t\t\t\t\t\t\t\t\t\t&& (source[currentPosition + 1] == 'u')) {", "+\t\t\t\t\t\t\t\t\t\tisUnicode = true;\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t//-------------unicode traitement ------------", "+\t\t\t\t\t\t\t\t\t\tint c1 = 0, c2 = 0, c3 = 0, c4 = 0;", "+\t\t\t\t\t\t\t\t\t\tif ((c1 = Character.getNumericValue(source[currentPosition+2])) > 15", "+\t\t\t\t\t\t\t\t\t\t\t|| c1 < 0", "+\t\t\t\t\t\t\t\t\t\t\t|| (c2 = Character.getNumericValue(source[currentPosition+3])) > 15", "+\t\t\t\t\t\t\t\t\t\t\t|| c2 < 0", "+\t\t\t\t\t\t\t\t\t\t\t|| (c3 = Character.getNumericValue(source[currentPosition+4])) > 15", "+\t\t\t\t\t\t\t\t\t\t\t|| c3 < 0", "+\t\t\t\t\t\t\t\t\t\t\t|| (c4 = Character.getNumericValue(source[currentPosition+5])) > 15", "+\t\t\t\t\t\t\t\t\t\t\t|| c4 < 0) {", "+\t\t\t\t\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_UNICODE_ESCAPE);", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tcurrentCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (currentCharacter == '\\n') {", "+\t\t\t\t\t\t\t\t\t\t\tcurrentPosition+=6;", "+\t\t\t\t\t\t\t\t\t\t\tcurrentCharacter = '\\n';", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t   \t}", "-\t\t\t\t\t\t\t\t\tif (!isUnicode) {", "-\t\t\t\t\t\t\t\t\t\tcurrentPosition = endPositionForLineComment; // reset one character behind", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} catch (IndexOutOfBoundsException e) { //an eof will them be generated", "-\t\t\t\t\t\t\t\t\tif (tokenizeComments) {", "-\t\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind", "-\t\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} catch (IndexOutOfBoundsException e) {", "+\t\t\t\t\t\t\t\t/* ", "+\t\t\t\t\t\t\t\t * a line comment needs to be followed by a line break to be valid\r\t\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\t\tthrow new InvalidInputException(UNTERMINATED_COMMENT);", "+\t\tif (tokenizeWhiteSpace && (whiteStart != currentPosition - 1)) {", "+\t\t\t// reposition scanner in case we are interested by spaces as tokens", "+\t\t\tcurrentPosition--;", "+\t\t\tstartPosition = whiteStart;", "+\t\t\treturn TokenNameWHITESPACE;", "+\t\t}"]}], "num": 52987}
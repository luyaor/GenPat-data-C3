{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2090f645e41c73045af8496a1222aa2f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "073d9349d2858f00999f782257832610", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java", "commitBeforeChange": "44b2ae0b9ea2797846c8f36e5cf3be1acaab875d", "commitAfterChange": "0492d8e41c1aba4d81d43f5d644f4506ed10c8ab", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 123, "signatureBeforeChange": " public void testBug435767()", "signatureAfterChange": " public void testBug435767()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in DummyClass.java (at line 18)\\n\" + ", "-\t\t\"\t.collect(Collectors.toMap(path -> this.getKey(path), path -> this.getValue(path))));\\n\" + ", "-\t\t\"\t                                       ^^^^^^\\n\" + ", "-\t\t\"The method getKey(String) in the type DummyClass is not applicable for the arguments (Object)\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in DummyClass.java (at line 18)\\n\" + ", "-\t\t\"\t.collect(Collectors.toMap(path -> this.getKey(path), path -> this.getValue(path))));\\n\" + ", "-\t\t\"\t                                                                  ^^^^^^^^\\n\" + ", "-\t\t\"The method getValue(String) in the type DummyClass is not applicable for the arguments (Object)\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bdb15249db42698aee231cab61338cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "d35306cb5dcf7e4ac666fd0505f3086f50241fb2", "commitAfterChange": "3284f738bbf7a2dbd90434dea313c8629bed5722", "methodNumberBeforeChange": 230, "methodNumberAfterChange": 230, "signatureBeforeChange": " public void test422489b()", "signatureAfterChange": " public void test422489b()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\t\"\tgoo((x, y) -> { return x[0] += 1; });\\n\" + ", "-\t\t\t\"\t^^^\\n\" + ", "-\t\t\t\"The method goo(J) is ambiguous for the type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\t\"\tgoo((x, y) -> { return x[0] += 1; });\\n\" + ", "-\t\t\t\"\t                       ^^^^\\n\" + ", "-\t\t\t\"The type of the expression must be an array type but it resolved to int\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\t\"\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cbe58dca4536017fe0f22205fd8ee7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "786bdcb54629de0c38fe45d8c9c539f76fe7da89", "commitAfterChange": "0f2bcb9853eb25fef3d26daa6737dcdc0dcad109", "methodNumberBeforeChange": 222, "methodNumberAfterChange": 222, "signatureBeforeChange": " \tpublic void test077a()", "signatureAfterChange": " \tpublic void test077a()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in I.java (at line 8)\\n\" +", "-\t\t\t\"\tinterface P extends L, M, N {}\\n\" +", "-\t\t\t\"\t          ^\\n\" +", "-\t\t\t\"The return type is incompatible with N.getI(), M.getI()\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in I.java (at line 10)\\n\" +", "-\t\t\t\"\tabstract class Y implements L, M, N {}\\n\" +", "-\t\t\t\"\t               ^\\n\" +", "-\t\t\t\"The return type is incompatible with N.getI(), M.getI()\\n\" +", "-\t\t\t\"----------\\n\"", "+\t\t\t\"\"", "+// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=241821", "+// Now if 1 of 3 methods is acceptable to the other 2 then no error is reported"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a48bdcd015fc605abe7991149b23201e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/RuntimeTests.java", "commitBeforeChange": "cf2dbfa7390fdf694445ca5f429966b0a9fbce95", "commitAfterChange": "f9a4225018848764cfc1723dc3aa2afabd642ddb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void _test0600_reflection()", "signatureAfterChange": " public void _test0600_reflection()", "diff": ["-// **", "-\t\t\"SUCCESS\\n\" + ", "-\t\t\"FAILURE: Class X can not access a member of class p.Z with modifiers \\\"public\\\"\\n\" + ", "-\t\t\"java.lang.IllegalAccessException: Class X can not access a member of class p.Z with modifiers \\\"public\\\"\\n\" + ", "-\t\t\"\tat sun.reflect.Reflection.ensureMemberAccess(Reflection.java:65)\\n\" + ", "-\t\t\"\tat java.lang.reflect.Method.invoke(Method.java:588)\\n\" + ", "-\t\t\"\tat X.main(X.java:9)\\n\" + ", "-\t\t\"\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\n\" + ", "-\t\t\"\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\\n\" + ", "-\t\t\"\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\\n\" + ", "-\t\t\"\tat java.lang.reflect.Method.invoke(Method.java:597)\\n\" + ", "-\t\t\"\tat\"", "+\t\t\"SUCCESS\\nSUCCESS\""]}], "num": 50073}
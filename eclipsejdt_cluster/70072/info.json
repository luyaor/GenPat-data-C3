{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7985558eada45a9b6c626894c28b3fb7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d2a37fc1c764eeb9400e68e632d6e2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic boolean match(ArrayType node, Object other)", "signatureAfterChange": " \tpublic boolean match(ArrayType node, Object other)", "diff": ["-\t\tswitch(node.getAST().apiLevel) {", "-\t\t\tcase AST.JLS2_INTERNAL :", "-\t\t\tcase AST.JLS3_INTERNAL :", "-\t\t\tcase AST.JLS4:", "-\t\t\t\treturn safeSubtreeMatch(node.getComponentType(), o.getComponentType());", "-\t\t\tdefault:", "-\t\t\t\treturn safeSubtreeMatch(node.getComponentType(), o.getComponentType()) &&", "-\t\t\t\t\t\tsafeSubtreeListMatch(node.annotations(), o.annotations());", "-\t\t}", "-\t}", "+\t\tint level = node.getAST().apiLevel;", "+\t\treturn safeSubtreeMatch(node.getComponentType(), o.getComponentType())", "+\t\t\t\t&& (level >= AST.JLS8 ? safeSubtreeListMatch(node.annotations(), o.annotations()) : true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6561c876824deead2c4a6c77b5bff454", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic boolean match(SimpleType node, Object other)", "signatureAfterChange": " \tpublic boolean match(SimpleType node, Object other)", "diff": ["-\t\tswitch(node.getAST().apiLevel) {", "-\t\t\tcase AST.JLS2_INTERNAL :", "-\t\t\tcase AST.JLS3_INTERNAL :", "-\t\t\tcase AST.JLS4:", "-\t\t\t\treturn safeSubtreeMatch(node.getName(), o.getName());", "-\t\t\tdefault:", "-\t\t\t\treturn (safeSubtreeMatch(node.getName(), o.getName())) &&", "-\t\t\t\t\t\tsafeSubtreeListMatch(node.annotations(), o.annotations());", "-\t\t}", "+\t\tint level = node.getAST().apiLevel;", "+\t\treturn (level >= AST.JLS8 ? safeSubtreeListMatch(node.annotations(), o.annotations()) : true)", "+\t\t\t\t&& safeSubtreeMatch(node.getName(), o.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82c7196d5c786cf390baaf6942b2142d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DefaultBytecodeVisitor.java", "commitBeforeChange": "5a02e3ef9eebbbfbf5479e7ec13a8eec010013e9", "commitAfterChange": "b525c03916a55b82c2a2a3976eed083d2d68c216", "methodNumberBeforeChange": 208, "methodNumberAfterChange": 208, "signatureBeforeChange": " \t \tprivate void appendGetArrayType(int atype)", "signatureAfterChange": " \t \tprivate void appendGetArrayType(int atype)", "diff": ["-\t\t\t\tthis.buffer.append(Util.bind(\"classfileformat.newarrayboolean\")); //$NON-NLS-1$", "+\t\t\t\tthis.buffer.append(\"boolean\"); //$NON-NLS-1$", "-\t\t\t\tthis.buffer.append(Util.bind(\"classfileformat.newarraychar\")); //$NON-NLS-1$", "+\t\t\t\tthis.buffer.append(\"char\"); //$NON-NLS-1$", "-\t\t\t\tthis.buffer.append(Util.bind(\"classfileformat.newarrayfloat\")); //$NON-NLS-1$", "+\t\t\t\tthis.buffer.append(\"float\"); //$NON-NLS-1$", "-\t\t\t\tthis.buffer.append(Util.bind(\"classfileformat.newarraydouble\")); //$NON-NLS-1$", "+\t\t\t\tthis.buffer.append(\"double\"); //$NON-NLS-1$", "-\t\t\t\tthis.buffer.append(Util.bind(\"classfileformat.newarraybyte\")); //$NON-NLS-1$", "+\t\t\t\tthis.buffer.append(\"byte\"); //$NON-NLS-1$", "-\t\t\t\tthis.buffer.append(Util.bind(\"classfileformat.newarrayshort\")); //$NON-NLS-1$", "+\t\t\t\tthis.buffer.append(\"short\"); //$NON-NLS-1$", "-\t\t\t\tthis.buffer.append(Util.bind(\"classfileformat.newarrayint\")); //$NON-NLS-1$", "+\t\t\t\tthis.buffer.append(\"int\"); //$NON-NLS-1$", "-\t\t\t\tthis.buffer.append(Util.bind(\"classfileformat.newarraylong\")); //$NON-NLS-1$", "+\t\t\t\tthis.buffer.append(\"long\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "960cffef19451dcdd8792b0c93fa9302", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "7183d81a2458b7a9ecc9004f74bf12b52ac2eafc", "commitAfterChange": "54eb6fa8730358fcf98285db139cf9edbd02f92a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tfinal TextEdit getCopySourceEdit(CopySourceInfo info)", "signatureAfterChange": " \t \tfinal TextEdit getCopySourceEdit(CopySourceInfo info)", "diff": ["-\t\t\tint start, end;", "-\t\t\tif (info.getStartNode() == info.getEndNode()) {", "-\t\t\t\tSourceRange range= getExtendedRange(info.getStartNode());", "-\t\t\t\tstart= range.getStartPosition();", "-\t\t\t\tend= start + range.getLength();", "-\t\t\t} else {", "-\t\t\t\tstart= getExtendedOffset(info.getStartNode());", "-\t\t\t\tend= getExtendedEnd(info.getEndNode());", "-\t\t\t}", "+\t\t\tSourceRange range= getExtendedRange(info.getNode());", "+\t\t\tint start= range.getStartPosition();", "+\t\t\tint end= start + range.getLength();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d68043d2a6204fbc50b9d5c006bfcd7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "5a02e3ef9eebbbfbf5479e7ec13a8eec010013e9", "commitAfterChange": "b525c03916a55b82c2a2a3976eed083d2d68c216", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tprivate void decodeModifiersForField(StringBuffer buffer, int accessFlags)", "signatureAfterChange": "  \tprivate void decodeModifiersForField(StringBuffer buffer, int accessFlags)", "diff": ["-\t\t\tbuffer.append(Util.bind(\"classfileformat.acc_final\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(\"final\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"classfileformat.acc_private\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(\"private\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"classfileformat.acc_protected\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(\"protected\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"classfileformat.acc_public\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(\"public\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"classfileformat.acc_static\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(\"static\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"classfileformat.acc_transient\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(\"transient\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"classfileformat.acc_volatile\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(\"volatile\"); //$NON-NLS-1$"]}], "num": 70072}
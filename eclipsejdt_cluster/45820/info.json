{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1f8cd85e5e5db98701d0028aa895813", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d31786c13562d0b84d2dcd9275dbc3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void test028()", "signatureAfterChange": " public void test028()", "diff": ["-\t\t\"      0  new java/util/ArrayList [17]\\n\" + ", "+\t\t\"      0  new java.util.ArrayList [17]\\n\" + ", "-\t\t\"      4  invokespecial java/util/ArrayList.<init>()V [18]\\n\" + ", "+\t\t\"      4  invokespecial java.util.ArrayList() [18]\\n\" + ", "-\t\t\"      9  new java/util/ArrayList [17]\\n\" + ", "+\t\t\"      9  new java.util.ArrayList [17]\\n\" + ", "-\t\t\"     13  invokespecial java/util/ArrayList.<init>()V [18]\\n\" + ", "-\t\t\"     16  invokevirtual java/util/ArrayList.add(Ljava/lang/Object;)Z [22]\\n\" + ", "+\t\t\"     13  invokespecial java.util.ArrayList() [18]\\n\" + ", "+\t\t\"     16  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean  [22]\\n\" + ", "-\t\t\"     22  invokevirtual java/util/ArrayList.get(I)Ljava/lang/Object; [26]\\n\" + ", "-\t\t\"     25  checkcast java/util/ArrayList [17]\\n\" + ", "+\t\t\"     22  invokevirtual java.util.ArrayList.get(int) : java.lang.Object  [26]\\n\" + ", "+\t\t\"     25  checkcast java.util.ArrayList [17]\\n\" + ", "-\t\t\"     30  invokevirtual java/util/ArrayList.add(Ljava/lang/Object;)Z [22]\\n\" + ", "+\t\t\"     30  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean  [22]\\n\" + ", "-\t\t\"     36  invokevirtual java/util/ArrayList.get(I)Ljava/lang/Object; [26]\\n\" + ", "-\t\t\"     39  checkcast java/util/ArrayList [17]\\n\" + ", "+\t\t\"     36  invokevirtual java.util.ArrayList.get(int) : java.lang.Object  [26]\\n\" + ", "+\t\t\"     39  checkcast java.util.ArrayList [17]\\n\" + ", "-\t\t\"     44  invokevirtual java/util/ArrayList.add(Ljava/lang/Object;)Z [22]\\n\" + ", "+\t\t\"     44  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean  [22]\\n\" + ", "-\t\t\"     50  invokevirtual java/util/ArrayList.get(I)Ljava/lang/Object; [26]\\n\" + ", "-\t\t\"     53  checkcast java/util/ArrayList [17]\\n\" + ", "+\t\t\"     50  invokevirtual java.util.ArrayList.get(int) : java.lang.Object  [26]\\n\" + ", "+\t\t\"     53  checkcast java.util.ArrayList [17]\\n\" + ", "-\t\t\"     58  invokevirtual java/util/ArrayList.add(Ljava/lang/Object;)Z [22]\\n\" + ", "+\t\t\"     58  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean  [22]\\n\" + ", "-\t\t\"     63  new java/util/ArrayList [17]\\n\" + ", "+\t\t\"     63  new java.util.ArrayList [17]\\n\" + ", "-\t\t\"     67  invokespecial java/util/ArrayList.<init>()V [18]\\n\" + ", "-\t\t\"     70  invokevirtual java/util/ArrayList.add(Ljava/lang/Object;)Z [22]\\n\" + ", "+\t\t\"     67  invokespecial java.util.ArrayList() [18]\\n\" + ", "+\t\t\"     70  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean  [22]\\n\" + ", "-\t\t\"     76  invokevirtual java/util/ArrayList.get(I)Ljava/lang/Object; [26]\\n\" + ", "-\t\t\"     79  checkcast java/util/ArrayList [17]\\n\" + ", "+\t\t\"     76  invokevirtual java.util.ArrayList.get(int) : java.lang.Object  [26]\\n\" + ", "+\t\t\"     79  checkcast java.util.ArrayList [17]\\n\" + ", "-\t\t\"     84  invokevirtual java/util/ArrayList.add(Ljava/lang/Object;)Z [22]\\n\" + ", "+\t\t\"     84  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean  [22]\\n\" + ", "-\t\t\"     90  invokevirtual java/util/ArrayList.get(I)Ljava/lang/Object; [26]\\n\" + ", "-\t\t\"     93  checkcast java/util/ArrayList [17]\\n\" + ", "+\t\t\"     90  invokevirtual java.util.ArrayList.get(int) : java.lang.Object  [26]\\n\" + ", "+\t\t\"     93  checkcast java.util.ArrayList [17]\\n\" + ", "-\t\t\"     98  invokevirtual java/util/ArrayList.add(Ljava/lang/Object;)Z [22]\\n\" + ", "+\t\t\"     98  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean  [22]\\n\" + ", "-\t\t\"    104  invokevirtual java/util/ArrayList.get(I)Ljava/lang/Object; [26]\\n\" + ", "-\t\t\"    107  checkcast java/util/ArrayList [17]\\n\" + ", "+\t\t\"    104  invokevirtual java.util.ArrayList.get(int) : java.lang.Object  [26]\\n\" + ", "+\t\t\"    107  checkcast java.util.ArrayList [17]\\n\" + ", "-\t\t\"    112  invokevirtual java/util/ArrayList.add(Ljava/lang/Object;)Z [22]\\n\" + ", "+\t\t\"    112  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean  [22]\\n\" + ", "-\t\t\"    123  invokevirtual java/util/ArrayList.get(I)Ljava/lang/Object; [26]\\n\" + ", "-\t\t\"    126  checkcast java/util/ArrayList [17]\\n\" + ", "-\t\t\"    129  invokevirtual java/util/ArrayList.iterator()Ljava/util/Iterator; [38]\\n\" + ", "-\t\t\"    132  astore [local_4]\\n\" + ", "+\t\t\"    123  invokevirtual java.util.ArrayList.get(int) : java.lang.Object  [26]\\n\" + ", "+\t\t\"    126  checkcast java.util.ArrayList [17]\\n\" + ", "+\t\t\"    129  invokevirtual java.util.ArrayList.iterator() : java.util.Iterator  [38]\\n\" + ", "+\t\t\"    132  astore 4\\n\" + ", "-\t\t\"    137  aload [local_4]\\n\" + ", "-\t\t\"    139  invokeinterface java/util/Iterator.next()Ljava/lang/Object; [44] [nargs: 1]\\n\" + ", "-\t\t\"    144  checkcast java/lang/String [46]\\n\" + ", "+\t\t\"    137  aload 4\\n\" + ", "+\t\t\"    139  invokeinterface java.util.Iterator.next() : java.lang.Object  [44] [nargs: 1]\\n\" + ", "+\t\t\"    144  checkcast java.lang.String [46]\\n\" + ", "-\t\t\"    148  getstatic java/lang/System.out Ljava/io/PrintStream; [52]\\n\" + ", "+\t\t\"    148  getstatic java.lang.System.out : java.io.PrintStream [52]\\n\" + ", "-\t\t\"    152  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [58]\\n\" + ", "-\t\t\"    155  aload [local_4]\\n\" + ", "-\t\t\"    157  invokeinterface java/util/Iterator.hasNext()Z [62] [nargs: 1]\\n\" + ", "+\t\t\"    152  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [58]\\n\" + ", "+\t\t\"    155  aload 4\\n\" + ", "+\t\t\"    157  invokeinterface java.util.Iterator.hasNext() : boolean  [62] [nargs: 1]\\n\" + ", "-\t\t\"    170  invokevirtual java/util/ArrayList.size()I [66]\\n\" + ", "+\t\t\"    170  invokevirtual java.util.ArrayList.size() : int  [66]\\n\" + ", "-\t\t\"        [pc: 0, pc: 177] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 8, pc: 177] local: slist index: 1 type: Ljava/util/ArrayList;\\n\" + ", "-\t\t\"        [pc: 118, pc: 176] local: i index: 2 type: I\\n\" + ", "-\t\t\"        [pc: 148, pc: 165] local: s index: 3 type: Ljava/lang/String;\\n\" + ", "+\t\t\"        [pc: 0, pc: 177] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 8, pc: 177] local: slist index: 1 type: java.util.ArrayList\\n\" + ", "+\t\t\"        [pc: 118, pc: 176] local: i index: 2 type: int\\n\" + ", "+\t\t\"        [pc: 148, pc: 165] local: s index: 3 type: java.lang.String\\n\" + ", "-\t\t\"        [pc: 8, pc: 177] local: slist index: 1 type: Ljava/util/ArrayList<Ljava/util/ArrayList<Ljava/lang/String;>;>;\\n\";", "+\t\t\"        [pc: 8, pc: 177] local: slist index: 1 type: java.util.ArrayList<java.util.ArrayList<java.lang.String>>\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad7c670207f4622e222734ffbcf1775a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "f1fdf8c7fa5a7bd0ac48906a553cf841bede7cc3", "commitAfterChange": "390339e621ed8e3fdf0ba59eebe114d75a12ab27", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic String toString()", "signatureAfterChange": "  \tpublic String toString()", "diff": ["-\t\tbuf.append(\"\\n-local variables debug attributes: \").append((produceDebugAttributes & Vars) != 0 ? \"ON\" : \" OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-line number debug attributes: \").append((produceDebugAttributes & Lines) != 0 ? \"ON\" : \" OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-source debug attributes: \").append((produceDebugAttributes & Source) != 0 ? \"ON\" : \" OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-preserve all local variables: \").append(preserveAllLocalVariables ? \"ON\" : \" OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-unreachable code: \").append(getSeverityString(UnreachableCode)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-import problem: \").append(getSeverityString(ImportProblem)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n--method with constructor name: \").append(getSeverityString(MethodWithConstructorName)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-overridden package default method: \").append(getSeverityString(OverriddenPackageDefaultMethod)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-deprecation: \").append(getSeverityString(UsingDeprecatedAPI)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-masked catch block: \").append(getSeverityString(MaskedCatchBlock)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-unused local variable: \").append(getSeverityString(UnusedLocalVariable)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-unused parameter: \").append(getSeverityString(UnusedArgument)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-unused import: \").append(getSeverityString(UnusedImport)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-synthetic access emulation: \").append(getSeverityString(AccessEmulation)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-assignment with no effect: \").append(getSeverityString(NoEffectAssignment)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-non externalized string: \").append(getSeverityString(NonExternalizedString)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-static access receiver: \").append(getSeverityString(NonStaticAccessToStatic)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-indirect static access: \").append(getSeverityString(IndirectStaticAccess)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-incompatible non inherited interface method: \").append(getSeverityString(IncompatibleNonInheritedInterfaceMethod)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-unused private member: \").append(getSeverityString(UnusedPrivateMember)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-local variable hiding another variable: \").append(getSeverityString(LocalVariableHiding)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-field hiding another variable: \").append(getSeverityString(FieldHiding)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-possible accidental boolean assignment: \").append(getSeverityString(AccidentalBooleanAssign)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-superfluous semicolon: \").append(getSeverityString(SuperfluousSemicolon)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-uncommented empty block: \").append(getSeverityString(UndocumentedEmptyBlock)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-unnecessary type check: \").append(getSeverityString(UnnecessaryTypeCheck)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-invalid annotation: \").append(getSeverityString(InvalidAnnotation)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-finally block not completing normally: \").append(getSeverityString(FinallyBlockNotCompleting)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-unused declared thrown exception: \").append(getSeverityString(UnusedDeclaredThrownException)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-JDK compliance level: \"+ versionFromJdkLevel(complianceLevel)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-JDK source level: \"+ versionFromJdkLevel(sourceLevel)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-JDK target level: \"+ versionFromJdkLevel(targetJDK)); //$NON-NLS-1$", "-\t\tbuf.append(\"\\n-private constructor access: \").append(isPrivateConstructorAccessChangingVisibility ? \"extra argument\" : \"make default access\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-verbose : \").append(verbose ? \"ON\" : \"OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-produce reference info : \").append(produceReferenceInfo ? \"ON\" : \"OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-parse literal expressions as constants : \").append(parseLiteralExpressionsAsConstants ? \"ON\" : \"OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-encoding : \").append(defaultEncoding == null ? \"<default>\" : defaultEncoding); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tbuf.append(\"\\n-task tags: \").append(this.taskTags == null ? \"\" : new String(CharOperation.concatWith(this.taskTags,',')));  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tbuf.append(\"\\n-task priorities : \").append(this.taskPriorites == null ? \"\" : new String(CharOperation.concatWith(this.taskPriorites,','))); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tbuf.append(\"\\n-report deprecation inside deprecated code : \").append(reportDeprecationInsideDeprecatedCode ? \"ENABLED\" : \"DISABLED\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-report unused parameter when implementing abstract method : \").append(reportUnusedParameterWhenImplementingAbstract ? \"ENABLED\" : \"DISABLED\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-report unused parameter when overriding concrete method : \").append(reportUnusedParameterWhenOverridingConcrete ? \"ENABLED\" : \"DISABLED\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tbuf.append(\"\\n-report constructor/setter parameter hiding existing field : \").append(reportSpecialParameterHidingField ? \"ENABLED\" : \"DISABLED\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- local variables debug attributes: \").append((produceDebugAttributes & Vars) != 0 ? \"ON\" : \" OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- line number debug attributes: \").append((produceDebugAttributes & Lines) != 0 ? \"ON\" : \" OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- source debug attributes: \").append((produceDebugAttributes & Source) != 0 ? \"ON\" : \" OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- preserve all local variables: \").append(preserveAllLocalVariables ? \"ON\" : \" OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- unreachable code: \").append(getSeverityString(UnreachableCode)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- import problem: \").append(getSeverityString(ImportProblem)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- method with constructor name: \").append(getSeverityString(MethodWithConstructorName)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- overridden package default method: \").append(getSeverityString(OverriddenPackageDefaultMethod)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- deprecation: \").append(getSeverityString(UsingDeprecatedAPI)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- masked catch block: \").append(getSeverityString(MaskedCatchBlock)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- unused local variable: \").append(getSeverityString(UnusedLocalVariable)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- unused parameter: \").append(getSeverityString(UnusedArgument)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- unused import: \").append(getSeverityString(UnusedImport)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- synthetic access emulation: \").append(getSeverityString(AccessEmulation)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- assignment with no effect: \").append(getSeverityString(NoEffectAssignment)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- non externalized string: \").append(getSeverityString(NonExternalizedString)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- static access receiver: \").append(getSeverityString(NonStaticAccessToStatic)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- indirect static access: \").append(getSeverityString(IndirectStaticAccess)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- incompatible non inherited interface method: \").append(getSeverityString(IncompatibleNonInheritedInterfaceMethod)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- unused private member: \").append(getSeverityString(UnusedPrivateMember)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- local variable hiding another variable: \").append(getSeverityString(LocalVariableHiding)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- field hiding another variable: \").append(getSeverityString(FieldHiding)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- possible accidental boolean assignment: \").append(getSeverityString(AccidentalBooleanAssign)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- superfluous semicolon: \").append(getSeverityString(SuperfluousSemicolon)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- uncommented empty block: \").append(getSeverityString(UndocumentedEmptyBlock)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- unnecessary type check: \").append(getSeverityString(UnnecessaryTypeCheck)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- invalid annotation: \").append(getSeverityString(InvalidAnnotation)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- finally block not completing normally: \").append(getSeverityString(FinallyBlockNotCompleting)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- unused declared thrown exception: \").append(getSeverityString(UnusedDeclaredThrownException)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- JDK compliance level: \"+ versionFromJdkLevel(complianceLevel)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- JDK source level: \"+ versionFromJdkLevel(sourceLevel)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- JDK target level: \"+ versionFromJdkLevel(targetJDK)); //$NON-NLS-1$", "+\t\tbuf.append(\"\\n\\t- private constructor access: \").append(isPrivateConstructorAccessChangingVisibility ? \"extra argument\" : \"make default access\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- verbose : \").append(verbose ? \"ON\" : \"OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- produce reference info : \").append(produceReferenceInfo ? \"ON\" : \"OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- parse literal expressions as constants : \").append(parseLiteralExpressionsAsConstants ? \"ON\" : \"OFF\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- encoding : \").append(defaultEncoding == null ? \"<default>\" : defaultEncoding); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tbuf.append(\"\\n\\t- task tags: \").append(this.taskTags == null ? \"\" : new String(CharOperation.concatWith(this.taskTags,',')));  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tbuf.append(\"\\n\\t- task priorities : \").append(this.taskPriorites == null ? \"\" : new String(CharOperation.concatWith(this.taskPriorites,','))); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tbuf.append(\"\\n\\t- report deprecation inside deprecated code : \").append(reportDeprecationInsideDeprecatedCode ? \"ENABLED\" : \"DISABLED\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- report unused parameter when implementing abstract method : \").append(reportUnusedParameterWhenImplementingAbstract ? \"ENABLED\" : \"DISABLED\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- report unused parameter when overriding concrete method : \").append(reportUnusedParameterWhenOverridingConcrete ? \"ENABLED\" : \"DISABLED\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tbuf.append(\"\\n\\t- report constructor/setter parameter hiding existing field : \").append(reportSpecialParameterHidingField ? \"ENABLED\" : \"DISABLED\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$"]}], "num": 45820}
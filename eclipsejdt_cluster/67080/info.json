{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c934b90b6967dc71eaea370ee4300f55", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29e93e07a38e3dc0d32833e158f94239", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleTypeReference.java", "commitBeforeChange": "f670a12d7a86101c01370f88073e79ca2cb2abf6", "commitAfterChange": "027433d18c80815de3076b7fd489422a48401f1a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprotected TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": " \tprotected TypeBinding getTypeBinding(Scope scope)", "diff": ["+\t\t} else if (this.resolvedType instanceof LocalTypeBinding) {", "+\t\t\tLocalTypeBinding localType = (LocalTypeBinding) this.resolvedType;", "+\t\t\tMethodScope methodScope = scope.methodScope();", "+\t\t\tif (methodScope != null && !methodScope.isStatic) {", "+\t\t\t\tmethodScope.tagAsAccessingEnclosingInstanceStateOf(localType, false /* ! type variable access */);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81c5f4d2f9824b10a7a97c4c54d6369b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "888ff915accf0f7dc08ba845bca467c94f1e290b", "commitAfterChange": "f69c200469412ca3b93e80844c6c1f4e077169ac", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 92, "signatureBeforeChange": " public void restore () throws JavaModelException", "signatureAfterChange": " public void restore() throws JavaModelException", "diff": ["- */", "-public void restore () throws JavaModelException {", "+ */", "+public void restore() throws JavaModelException {", "+", "+\tif (!isWorkingCopy()) return;", "+", "+\tCompilationUnit original = (CompilationUnit) getOriginalElement();", "+\tIBuffer buffer = this.getBuffer();", "+\tif (buffer == null) return;", "+\tbuffer.setContents(original.getContents());", "+\tupdateTimeStamp(original);", "+\tmakeConsistent(null);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85ae138757ab225814a26d5b9edfc2ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["+\tif (this.expression instanceof MessageSend) {", "+\t\tMessageSend messageSend = (MessageSend) this.expression;", "+\t\tMethodBinding methodBinding = messageSend.binding;", "+\t\tif (methodBinding != null && methodBinding.isPolymorphic()) {", "+\t\t\tmessageSend.binding = scope.environment().updatePolymorphicMethodReturnType((PolymorphicMethodBinding) methodBinding, castType);", "+\t\t\texpressionType = castType;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8b8e2ebeec1c54f98d03694f691d535", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "ad076ac3457d21950247155079c8bac974a24116", "commitAfterChange": "04bf0a24cb6eb3c1af3b526b67b8a2d1449e58da", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 32, "signatureBeforeChange": " \t \tpublic void searchDeclarations(IJavaElement enclosingElement, SearchRequestor requestor, SearchPattern pattern, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \t \tpublic void searchDeclarations(IJavaElement enclosingElement, SearchRequestor requestor, SearchPattern pattern, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\tIResource resource = this.getResource(enclosingElement);", "+\t\tIResource resource = enclosingElement.getResource();", "+\t\tif (enclosingElement instanceof IMember) {", "+\t\t\tIMember member = (IMember) enclosingElement;", "+\t\t\tICompilationUnit cu = member.getCompilationUnit();", "+\t\t\tif (cu != null) {", "+\t\t\t\tresource = cu.getResource();", "+\t\t\t} else if (member.isBinary()) {", "+\t\t\t\t// binary member resource cannot be used as this", "+\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=148215", "+\t\t\t\tresource = null;", "+\t\t\t}", "+\t\t}"]}], "num": 67080}
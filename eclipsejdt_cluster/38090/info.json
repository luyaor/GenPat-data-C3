{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a043f00659713bc65bdf33c287a8324", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cbfcc3b0be69da870b14db4a980e407", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ImportRewrite.java", "commitBeforeChange": "ee7d00c6fce3f5ac075ad1ae838556503fe6ca33", "commitAfterChange": "42a20f90363fe2e676c07d56364d6cc6b90a9458", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 51, "signatureBeforeChange": "  \tprivate Type createType(Type currentType, ITypeBinding binding, AST ast, ImportRewriteContext context)", "signatureAfterChange": "  \tprivate Type internalAddImport(ITypeBinding binding, AST ast, ImportRewriteContext context, Type currentType, boolean getBase)", "diff": ["-\tprivate Type createType(Type currentType, ITypeBinding binding, AST ast, ImportRewriteContext context) {", "-", "-\t\tif (binding.isPrimitive()) {", "-\t\t\treturn ast.newPrimitiveType(PrimitiveType.toCode(binding.getName()));", "-\t\t}", "-", "-\t\tITypeBinding normalizedBinding = normalizeTypeBinding(binding);", "-\t\tif (normalizedBinding == null) {", "-\t\t\treturn ast.newSimpleType(ast.newSimpleName(\"invalid\")); //$NON-NLS-1$", "-\t\t}", "-", "-\t\tif (normalizedBinding.isTypeVariable()) {", "-\t\t\tif (currentType != null) {", "-\t\t\t\treturn ast.newQualifiedType(currentType, ast.newSimpleName(binding.getName()));", "-\t\t\t}", "-\t\t\treturn ast.newSimpleType(ast.newSimpleName(binding.getName()));", "-\t\t}", "-", "-\t\tif (normalizedBinding.isWildcardType()) {", "-\t\t\tWildcardType wcType = ast.newWildcardType();", "-\t\t\tITypeBinding bound = normalizedBinding.getBound();", "-\t\t\tif (bound != null && !bound.isWildcardType() && !bound.isCapture()) {", "-\t\t\t\tType boundType = createType(bound, null, ast, (Type) null, context);", "-\t\t\t\twcType.setBound(boundType, normalizedBinding.isUpperbound());", "-\t\t\t}", "-\t\t\treturn wcType;", "-\t\t}", "-", "-\t\tif (normalizedBinding.isArray()) {", "-\t\t\tType elementType = createType(currentType, normalizedBinding.getElementType(), ast, context);", "-\t\t\treturn ast.newArrayType(elementType, normalizedBinding.getDimensions());", "-\t\t}", "-", "-\t\tif (normalizedBinding.isParameterizedType()) {", "-\t\t\tITypeBinding[] typeArguments = normalizedBinding.getTypeArguments();", "-\t\t\tif (typeArguments.length > 0) {", "-\t\t\t\tType erasureType = currentType == null ? (Type) ast.newSimpleType(ast.newName(getRawName(normalizedBinding))) :", "-\t\t\t\t\t\t\t(Type) ast.newQualifiedType(currentType, ast.newSimpleName(getRawName(normalizedBinding)));", "-\t\t\t\tParameterizedType paramType = ast.newParameterizedType(erasureType);", "-\t\t\t\tList arguments = paramType.typeArguments();", "-\t\t\t\tfor (int i = 0; i < typeArguments.length; i++) {", "-\t\t\t\t\tITypeBinding curr = typeArguments[i];", "-\t\t\t\t\tif (containsNestedCapture(curr, false)) { // see bug 103044", "-\t\t\t\t\t\targuments.add(ast.newWildcardType());", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\targuments.add(addImport(curr, ast, context));", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn paramType;", "-", "-\t\tif (currentType != null) {", "-\t\t\tif (currentType instanceof AnnotatableType) {", "-\t\t\t\tAnnotatableType annotatableType = (AnnotatableType) currentType;", "-\t\t\t\tList annotations = annotatableType.annotations();", "-\t\t\t\tif (annotations == null || annotations.size() == 0) {", "-\t\t\t\t\tName qualifierName = ast.newName(currentType.toString());", "-\t\t\t\t\treturn ast.newNameQualifiedType(qualifierName, ast.newSimpleName(getRawName(normalizedBinding)));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn ast.newQualifiedType(currentType, ast.newSimpleName(getRawName(normalizedBinding)));", "-\t\t}", "-\t\treturn ast.newSimpleType(ast.newName(getRawName(normalizedBinding)));", "+\tprivate Type internalAddImport(ITypeBinding binding, AST ast, ImportRewriteContext context, Type currentType, boolean getBase) {", "+\t\tType type = null;", "+\t\tITypeBinding normalizedBinding = null;", "+\t\t", "+\t\tif (binding.isPrimitive()) {", "+\t\t\ttype = ast.newPrimitiveType(PrimitiveType.toCode(binding.getName()));", "+\t\t\tnormalizedBinding= binding;", "+\t\t} else {", "+\t\t\tnormalizedBinding= normalizeTypeBinding(binding);", "+\t\t\tif (normalizedBinding == null) {", "+\t\t\t\ttype = ast.newSimpleType(ast.newSimpleName(\"invalid\")); //$NON-NLS-1$", "+\t\t\t} else if (normalizedBinding.isTypeVariable()) {", "+\t\t\t\t\t// no import", "+\t\t\t\ttype = ast.newSimpleType(ast.newSimpleName(binding.getName()));", "+\t\t\t} else if (normalizedBinding.isWildcardType()) {", "+\t\t\t\tWildcardType wcType= ast.newWildcardType();", "+\t\t\t\tITypeBinding bound= normalizedBinding.getBound();", "+\t\t\t\tif (bound != null && !bound.isWildcardType() && !bound.isCapture()) { // bug 96942", "+\t\t\t\t\tType boundType= addImport(bound, ast, context);", "+\t\t\t\t\twcType.setBound(boundType, normalizedBinding.isUpperbound());", "+\t\t\t\t}", "+\t\t\t\ttype = wcType;", "+\t\t\t} else if (normalizedBinding.isArray()) {", "+\t\t\t\tType elementType= addImport(normalizedBinding.getElementType(), ast, context);", "+\t\t\t\ttype = getArrayType(elementType, ast, context, normalizedBinding);", "+\t\t\t}", "+", "+\t\tif (type != null) {", "+\t\t\treturn annotateType(normalizedBinding, ast, context, type);", "+\t\t}", "+", "+\t\tif (getBase) {", "+\t\t\ttype = createBaseType(ast, context, normalizedBinding);", "+\t\t} else  {", "+\t\t\ttype = currentType != null ? (Type) ast.newQualifiedType(currentType, ast.newSimpleName(getRawName(normalizedBinding))) : ", "+\t\t\t\tast.newSimpleType(ast.newName(getRawName(normalizedBinding)));", "+\t\t\ttype = annotateType(normalizedBinding, ast, context, type);", "+\t\t}", "+", "+\t\tITypeBinding[] typeArguments = normalizedBinding.getTypeArguments();", "+\t\tif (typeArguments.length > 0) {", "+\t\t\tParameterizedType paramType = ast.newParameterizedType(type);", "+\t\t\tList arguments = paramType.typeArguments();", "+\t\t\tfor (int i = 0; i < typeArguments.length; i++) {", "+\t\t\t\tITypeBinding curr = typeArguments[i];", "+\t\t\t\tif (containsNestedCapture(curr, false)) { // see bug 103044", "+\t\t\t\t\targuments.add(ast.newWildcardType());", "+\t\t\t\t} else {", "+\t\t\t\t\targuments.add(addImport(curr, ast, context));", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\ttype = paramType;", "+\t\t}", "+\t\treturn type;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccd981e2ace0f99ce33bc87db0bee0bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/BaseProcessorEnv.java", "commitBeforeChange": "e5dee4f66ab3257e0d9e4e34690323cf2d5f7c21", "commitAfterChange": "ba7f55d89dcf40f0d2718397b348f39209d50c3a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \t \tprivate void initPrimitives(final IJavaProject project)", "signatureAfterChange": " \t \tprivate void initPrimitives(final AST ast)", "diff": ["-\tprivate void initPrimitives(final IJavaProject project)", "+\tprivate void initPrimitives(final AST ast)", "-\t\tclass PrimitiveBindingRequestor extends ASTRequestor", "-\t\t{", "-\t\t\tpublic void acceptBinding(String bindingKey, IBinding binding)", "-\t\t\t{", "-\t\t\t\tif( binding.getKind() == IBinding.TYPE ){", "-\t\t\t\t\tif( ITypeConstants.BOOLEAN.equals(binding.getName()) ) ", "-\t\t\t\t\t\t_primitives[0] = new PrimitiveTypeImpl( (ITypeBinding)binding );", "-\t\t\t\t\telse if( ITypeConstants.BYTE.equals(binding.getName()) )", "-\t\t\t\t\t\t_primitives[1] = new PrimitiveTypeImpl( (ITypeBinding)binding );", "-\t\t\t\t\telse if( ITypeConstants.CHAR.equals(binding.getName()) )", "-\t\t\t\t\t\t_primitives[2] = new PrimitiveTypeImpl( (ITypeBinding)binding );", "-\t\t\t\t\telse if( ITypeConstants.DOUBLE.equals(binding.getName()) ) ", "-\t\t\t\t\t\t_primitives[3] = new PrimitiveTypeImpl( (ITypeBinding)binding );", "-\t\t\t\t\telse if( ITypeConstants.FLOAT.equals(binding.getName()) ) ", "-\t\t\t\t\t\t_primitives[4] = new PrimitiveTypeImpl( (ITypeBinding)binding );", "-\t\t\t\t\telse if( ITypeConstants.INT.equals(binding.getName()) ) ", "-\t\t\t\t\t\t_primitives[5] = new PrimitiveTypeImpl( (ITypeBinding)binding );", "-\t\t\t\t\telse if( ITypeConstants.LONG.equals(binding.getName()) ) ", "-\t\t\t\t\t\t_primitives[6] = new PrimitiveTypeImpl( (ITypeBinding)binding );", "-\t\t\t\t\telse if( ITypeConstants.SHORT.equals(binding.getName()) ) ", "-\t\t\t\t\t\t_primitives[7] = new PrimitiveTypeImpl( (ITypeBinding)binding );", "-\t\t\t\t\telse if( ITypeConstants.VOID.equals(binding.getName()) ) ", "-\t\t\t\t\t\t_voidType = new VoidTypeImpl( (ITypeBinding)binding );", "-\t\t\t\t\telse", "-\t\t\t\t\t\tSystem.err.println(\"got unexpected type \" + binding.getName()); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\telse", "-\t\t\t\t\tSystem.err.println(\"got unexpected binding \" + binding.getClass().getName() + binding );  //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-", "-\t\tfinal String[] keys = { BindingKey.createTypeBindingKey(ITypeConstants.BOOLEAN),", "-\t\t\t\tBindingKey.createTypeBindingKey(ITypeConstants.BYTE),", "-\t\t\t\tBindingKey.createTypeBindingKey(ITypeConstants.CHAR),", "-\t\t\t\tBindingKey.createTypeBindingKey(ITypeConstants.DOUBLE),", "-\t\t\t\tBindingKey.createTypeBindingKey(ITypeConstants.FLOAT),", "-\t\t\t\tBindingKey.createTypeBindingKey(ITypeConstants.INT),", "-\t\t\t\tBindingKey.createTypeBindingKey(ITypeConstants.LONG),", "-\t\t\t\tBindingKey.createTypeBindingKey(ITypeConstants.SHORT),", "-\t\t\t\tBindingKey.createTypeBindingKey(ITypeConstants.VOID)};", "-", "-\t\tfinal PrimitiveBindingRequestor requestor = new PrimitiveBindingRequestor();", "-\t\tfinal ASTParser parser = ASTParser.newParser(AST.JLS3);", "-\t\tparser.setProject(project);", "-\t\tparser.setResolveBindings(true);", "-\t\tparser.createASTs(NO_UNIT, keys, requestor, null);", "+\t\t// boolean", "+\t\tITypeBinding binding = ast.resolveWellKnownType(ITypeConstants.BOOLEAN);\t\t", "+\t\tif( binding == null )", "+\t\t\tthrow new IllegalStateException(\"fail to locate \" + ITypeConstants.BOOLEAN); //$NON-NLS-1$", "+\t\t_primitives[BOOLEAN_INDEX] = new PrimitiveTypeImpl(binding);\t\t", "+\t\t// byte", "+\t\tbinding = ast.resolveWellKnownType(ITypeConstants.BYTE);", "+\t\tif( binding == null )", "+\t\t\tthrow new IllegalStateException(\"fail to locate \" + ITypeConstants.BYTE); //$NON-NLS-1$", "+\t\t_primitives[BYTE_INDEX] = new PrimitiveTypeImpl(binding);", "+\t\t// char", "+\t\tbinding = ast.resolveWellKnownType(ITypeConstants.CHAR);", "+\t\tif( binding == null )", "+\t\t\tthrow new IllegalStateException(\"fail to locate \" + ITypeConstants.BYTE); //$NON-NLS-1$", "+\t\t_primitives[CHAR_INDEX] = new PrimitiveTypeImpl(binding);", "+\t\t// double", "+\t\tbinding = ast.resolveWellKnownType(ITypeConstants.DOUBLE);", "+\t\tif( binding == null )", "+\t\t\tthrow new IllegalStateException(\"fail to locate \" + ITypeConstants.BYTE); //$NON-NLS-1$", "+\t\t_primitives[DOUBLE_INDEX] = new PrimitiveTypeImpl(binding);", "+\t\t// float", "+\t\tbinding = ast.resolveWellKnownType(ITypeConstants.FLOAT);", "+\t\tif( binding == null )", "+\t\t\tthrow new IllegalStateException(\"fail to locate \" + ITypeConstants.BYTE); //$NON-NLS-1$", "+\t\t_primitives[FLOAT_INDEX] = new PrimitiveTypeImpl(binding);", "+\t\t// int", "+\t\tbinding = ast.resolveWellKnownType(ITypeConstants.INT);", "+\t\tif( binding == null )", "+\t\t\tthrow new IllegalStateException(\"fail to locate \" + ITypeConstants.BYTE); //$NON-NLS-1$", "+\t\t_primitives[INT_INDEX] = new PrimitiveTypeImpl(binding);", "+\t\t// long", "+\t\tbinding = ast.resolveWellKnownType(ITypeConstants.LONG);", "+\t\tif( binding == null )", "+\t\t\tthrow new IllegalStateException(\"fail to locate \" + ITypeConstants.BYTE); //$NON-NLS-1$", "+\t\t_primitives[LONG_INDEX] = new PrimitiveTypeImpl(binding);", "+\t\t// short", "+\t\tbinding = ast.resolveWellKnownType(ITypeConstants.SHORT);", "+\t\tif( binding == null )", "+\t\t\tthrow new IllegalStateException(\"fail to locate \" + ITypeConstants.BYTE); //$NON-NLS-1$", "+\t\t_primitives[SHORT_INDEX] = new PrimitiveTypeImpl(binding);", "+\t\t// void", "+\t\tbinding = ast.resolveWellKnownType(ITypeConstants.VOID);", "+\t\tif( binding == null )", "+\t\t\tthrow new IllegalStateException(\"fail to locate \" + ITypeConstants.BYTE); //$NON-NLS-1$", "+\t\t_voidType = new VoidTypeImpl(binding);"]}], "num": 38090}
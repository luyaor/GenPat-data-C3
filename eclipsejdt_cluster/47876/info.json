{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45222e9023b321e0b80bdf985ec4e75b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c59d61b104e7e9c300754b5b06fbb0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "14eef462fbaf0bab3c247296c2a42a1fdc4f58a6", "commitAfterChange": "40ec9af01314d5e3524995c03a17726a02c7901e", "methodNumberBeforeChange": 213, "methodNumberAfterChange": 213, "signatureBeforeChange": "  private boolean isKeyword(int token)", "signatureAfterChange": "  private boolean isKeyword(int token)", "diff": ["-\t\tcase Scanner.TokenNameabstract:", "-\t\tcase Scanner.TokenNameassert:", "-\t\tcase Scanner.TokenNamebyte:", "-\t\tcase Scanner.TokenNamebreak:", "-\t\tcase Scanner.TokenNameboolean:", "-\t\tcase Scanner.TokenNamecase:", "-\t\tcase Scanner.TokenNamechar:", "-\t\tcase Scanner.TokenNamecatch:", "-\t\tcase Scanner.TokenNameclass:", "-\t\tcase Scanner.TokenNamecontinue:", "-\t\tcase Scanner.TokenNamedo:", "-\t\tcase Scanner.TokenNamedouble:", "-\t\tcase Scanner.TokenNamedefault:", "-\t\tcase Scanner.TokenNameelse:", "-\t\tcase Scanner.TokenNameextends:", "-\t\tcase Scanner.TokenNamefor:", "-\t\tcase Scanner.TokenNamefinal:", "-\t\tcase Scanner.TokenNamefloat:", "-\t\tcase Scanner.TokenNamefalse:", "-\t\tcase Scanner.TokenNamefinally:", "-\t\tcase Scanner.TokenNameif:", "-\t\tcase Scanner.TokenNameint:", "-\t\tcase Scanner.TokenNameimport:", "-\t\tcase Scanner.TokenNameinterface:", "-\t\tcase Scanner.TokenNameimplements:", "-\t\tcase Scanner.TokenNameinstanceof:", "-\t\tcase Scanner.TokenNamelong:", "-\t\tcase Scanner.TokenNamenew:", "-\t\tcase Scanner.TokenNamenull:", "-\t\tcase Scanner.TokenNamenative:", "-\t\tcase Scanner.TokenNamepublic:", "-\t\tcase Scanner.TokenNamepackage:", "-\t\tcase Scanner.TokenNameprivate:", "-\t\tcase Scanner.TokenNameprotected:", "-\t\tcase Scanner.TokenNamereturn:", "-\t\tcase Scanner.TokenNameshort:", "-\t\tcase Scanner.TokenNamesuper:", "-\t\tcase Scanner.TokenNamestatic:", "-\t\tcase Scanner.TokenNameswitch:", "-\t\tcase Scanner.TokenNamestrictfp:", "-\t\tcase Scanner.TokenNamesynchronized:", "-\t\tcase Scanner.TokenNametry:", "-\t\tcase Scanner.TokenNamethis:", "-\t\tcase Scanner.TokenNametrue:", "-\t\tcase Scanner.TokenNamethrow:", "-\t\tcase Scanner.TokenNamethrows:", "-\t\tcase Scanner.TokenNametransient:", "-\t\tcase Scanner.TokenNamevoid:", "-\t\tcase Scanner.TokenNamevolatile:", "-\t\tcase Scanner.TokenNamewhile:", "+\t\tcase TerminalTokens.TokenNameabstract:", "+\t\tcase TerminalTokens.TokenNameassert:", "+\t\tcase TerminalTokens.TokenNamebyte:", "+\t\tcase TerminalTokens.TokenNamebreak:", "+\t\tcase TerminalTokens.TokenNameboolean:", "+\t\tcase TerminalTokens.TokenNamecase:", "+\t\tcase TerminalTokens.TokenNamechar:", "+\t\tcase TerminalTokens.TokenNamecatch:", "+\t\tcase TerminalTokens.TokenNameclass:", "+\t\tcase TerminalTokens.TokenNamecontinue:", "+\t\tcase TerminalTokens.TokenNamedo:", "+\t\tcase TerminalTokens.TokenNamedouble:", "+\t\tcase TerminalTokens.TokenNamedefault:", "+\t\tcase TerminalTokens.TokenNameelse:", "+\t\tcase TerminalTokens.TokenNameextends:", "+\t\tcase TerminalTokens.TokenNamefor:", "+\t\tcase TerminalTokens.TokenNamefinal:", "+\t\tcase TerminalTokens.TokenNamefloat:", "+\t\tcase TerminalTokens.TokenNamefalse:", "+\t\tcase TerminalTokens.TokenNamefinally:", "+\t\tcase TerminalTokens.TokenNameif:", "+\t\tcase TerminalTokens.TokenNameint:", "+\t\tcase TerminalTokens.TokenNameimport:", "+\t\tcase TerminalTokens.TokenNameinterface:", "+\t\tcase TerminalTokens.TokenNameimplements:", "+\t\tcase TerminalTokens.TokenNameinstanceof:", "+\t\tcase TerminalTokens.TokenNamelong:", "+\t\tcase TerminalTokens.TokenNamenew:", "+\t\tcase TerminalTokens.TokenNamenull:", "+\t\tcase TerminalTokens.TokenNamenative:", "+\t\tcase TerminalTokens.TokenNamepublic:", "+\t\tcase TerminalTokens.TokenNamepackage:", "+\t\tcase TerminalTokens.TokenNameprivate:", "+\t\tcase TerminalTokens.TokenNameprotected:", "+\t\tcase TerminalTokens.TokenNamereturn:", "+\t\tcase TerminalTokens.TokenNameshort:", "+\t\tcase TerminalTokens.TokenNamesuper:", "+\t\tcase TerminalTokens.TokenNamestatic:", "+\t\tcase TerminalTokens.TokenNameswitch:", "+\t\tcase TerminalTokens.TokenNamestrictfp:", "+\t\tcase TerminalTokens.TokenNamesynchronized:", "+\t\tcase TerminalTokens.TokenNametry:", "+\t\tcase TerminalTokens.TokenNamethis:", "+\t\tcase TerminalTokens.TokenNametrue:", "+\t\tcase TerminalTokens.TokenNamethrow:", "+\t\tcase TerminalTokens.TokenNamethrows:", "+\t\tcase TerminalTokens.TokenNametransient:", "+\t\tcase TerminalTokens.TokenNamevoid:", "+\t\tcase TerminalTokens.TokenNamevolatile:", "+\t\tcase TerminalTokens.TokenNamewhile:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4d882f68f08f4c12d9a71414449bd5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "980e2ed65938249223128b7fd8d8778c9eb3b8a3", "commitAfterChange": "929a0b3bf0dc89629d94cc4afbe6066815008f9f", "methodNumberBeforeChange": 211, "methodNumberAfterChange": 211, "signatureBeforeChange": "  private boolean isKeyword(char[] tokenSource)", "signatureAfterChange": "  private boolean isKeyword(int token)", "diff": ["-private boolean isKeyword(char[] tokenSource) {", "-\t/*", "-\t * This code is heavily grammar dependant", "-\t */", "-", "-\tif (tokenSource == null) {", "-\t\treturn false;", "-\t}", "-\ttry {", "-\t\tScanner scanner = new Scanner();", "-\t\tscanner.setSource(tokenSource);", "-\t\tint token = scanner.getNextToken();", "-\t\tchar[] currentKeyword;", "-\t\ttry {", "-\t\t\tcurrentKeyword = scanner.getCurrentIdentifierSource();", "-\t\t} catch (ArrayIndexOutOfBoundsException e) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tint nextToken= scanner.getNextToken();", "-\t\tif (nextToken == TerminalTokens.TokenNameEOF", "-\t\t\t&& scanner.startPosition == scanner.source.length) { // to handle case where we had an ArrayIndexOutOfBoundsException ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t     // while reading the last token", "-\t\t\tswitch(token) {", "-\t\t\t\tcase Scanner.TokenNameERROR:", "-\t\t\t\t\tif (CharOperation.equals(\"goto\".toCharArray(), currentKeyword) ||CharOperation.equals(\"const\".toCharArray(), currentKeyword)) { //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\tcase Scanner.TokenNameabstract:", "-\t\t\t\tcase Scanner.TokenNameassert:", "-\t\t\t\tcase Scanner.TokenNamebyte:", "-\t\t\t\tcase Scanner.TokenNamebreak:", "-\t\t\t\tcase Scanner.TokenNameboolean:", "-\t\t\t\tcase Scanner.TokenNamecase:", "-\t\t\t\tcase Scanner.TokenNamechar:", "-\t\t\t\tcase Scanner.TokenNamecatch:", "-\t\t\t\tcase Scanner.TokenNameclass:", "-\t\t\t\tcase Scanner.TokenNamecontinue:", "-\t\t\t\tcase Scanner.TokenNamedo:", "-\t\t\t\tcase Scanner.TokenNamedouble:", "-\t\t\t\tcase Scanner.TokenNamedefault:", "-\t\t\t\tcase Scanner.TokenNameelse:", "-\t\t\t\tcase Scanner.TokenNameextends:", "-\t\t\t\tcase Scanner.TokenNamefor:", "-\t\t\t\tcase Scanner.TokenNamefinal:", "-\t\t\t\tcase Scanner.TokenNamefloat:", "-\t\t\t\tcase Scanner.TokenNamefalse:", "-\t\t\t\tcase Scanner.TokenNamefinally:", "-\t\t\t\tcase Scanner.TokenNameif:", "-\t\t\t\tcase Scanner.TokenNameint:", "-\t\t\t\tcase Scanner.TokenNameimport:", "-\t\t\t\tcase Scanner.TokenNameinterface:", "-\t\t\t\tcase Scanner.TokenNameimplements:", "-\t\t\t\tcase Scanner.TokenNameinstanceof:", "-\t\t\t\tcase Scanner.TokenNamelong:", "-\t\t\t\tcase Scanner.TokenNamenew:", "-\t\t\t\tcase Scanner.TokenNamenull:", "-\t\t\t\tcase Scanner.TokenNamenative:", "-\t\t\t\tcase Scanner.TokenNamepublic:", "-\t\t\t\tcase Scanner.TokenNamepackage:", "-\t\t\t\tcase Scanner.TokenNameprivate:", "-\t\t\t\tcase Scanner.TokenNameprotected:", "-\t\t\t\tcase Scanner.TokenNamereturn:", "-\t\t\t\tcase Scanner.TokenNameshort:", "-\t\t\t\tcase Scanner.TokenNamesuper:", "-\t\t\t\tcase Scanner.TokenNamestatic:", "-\t\t\t\tcase Scanner.TokenNameswitch:", "-\t\t\t\tcase Scanner.TokenNamestrictfp:", "-\t\t\t\tcase Scanner.TokenNamesynchronized:", "-\t\t\t\tcase Scanner.TokenNametry:", "-\t\t\t\tcase Scanner.TokenNamethis:", "-\t\t\t\tcase Scanner.TokenNametrue:", "-\t\t\t\tcase Scanner.TokenNamethrow:", "-\t\t\t\tcase Scanner.TokenNamethrows:", "-\t\t\t\tcase Scanner.TokenNametransient:", "-\t\t\t\tcase Scanner.TokenNamevoid:", "-\t\t\t\tcase Scanner.TokenNamevolatile:", "-\t\t\t\tcase Scanner.TokenNamewhile:", "-\t\t\t\t\treturn true;", "-\t\t\t\tdefault: ", "-\t\t\t\t\treturn false;", "-\t\t\t}", "-\t\t} else {", "-\t\t\treturn false;", "+private boolean isKeyword(int token) {", "+\t\tswitch(token) {", "+\t\t\tcase Scanner.TokenNameabstract:", "+\t\t\tcase Scanner.TokenNameassert:", "+\t\t\tcase Scanner.TokenNamebyte:", "+\t\t\tcase Scanner.TokenNamebreak:", "+\t\t\tcase Scanner.TokenNameboolean:", "+\t\t\tcase Scanner.TokenNamecase:", "+\t\t\tcase Scanner.TokenNamechar:", "+\t\t\tcase Scanner.TokenNamecatch:", "+\t\t\tcase Scanner.TokenNameclass:", "+\t\t\tcase Scanner.TokenNamecontinue:", "+\t\t\tcase Scanner.TokenNamedo:", "+\t\t\tcase Scanner.TokenNamedouble:", "+\t\t\tcase Scanner.TokenNamedefault:", "+\t\t\tcase Scanner.TokenNameelse:", "+\t\t\tcase Scanner.TokenNameextends:", "+\t\t\tcase Scanner.TokenNamefor:", "+\t\t\tcase Scanner.TokenNamefinal:", "+\t\t\tcase Scanner.TokenNamefloat:", "+\t\t\tcase Scanner.TokenNamefalse:", "+\t\t\tcase Scanner.TokenNamefinally:", "+\t\t\tcase Scanner.TokenNameif:", "+\t\t\tcase Scanner.TokenNameint:", "+\t\t\tcase Scanner.TokenNameimport:", "+\t\t\tcase Scanner.TokenNameinterface:", "+\t\t\tcase Scanner.TokenNameimplements:", "+\t\t\tcase Scanner.TokenNameinstanceof:", "+\t\t\tcase Scanner.TokenNamelong:", "+\t\t\tcase Scanner.TokenNamenew:", "+\t\t\tcase Scanner.TokenNamenull:", "+\t\t\tcase Scanner.TokenNamenative:", "+\t\t\tcase Scanner.TokenNamepublic:", "+\t\t\tcase Scanner.TokenNamepackage:", "+\t\t\tcase Scanner.TokenNameprivate:", "+\t\t\tcase Scanner.TokenNameprotected:", "+\t\t\tcase Scanner.TokenNamereturn:", "+\t\t\tcase Scanner.TokenNameshort:", "+\t\t\tcase Scanner.TokenNamesuper:", "+\t\t\tcase Scanner.TokenNamestatic:", "+\t\t\tcase Scanner.TokenNameswitch:", "+\t\t\tcase Scanner.TokenNamestrictfp:", "+\t\t\tcase Scanner.TokenNamesynchronized:", "+\t\t\tcase Scanner.TokenNametry:", "+\t\t\tcase Scanner.TokenNamethis:", "+\t\t\tcase Scanner.TokenNametrue:", "+\t\t\tcase Scanner.TokenNamethrow:", "+\t\t\tcase Scanner.TokenNamethrows:", "+\t\t\tcase Scanner.TokenNametransient:", "+\t\t\tcase Scanner.TokenNamevoid:", "+\t\t\tcase Scanner.TokenNamevolatile:", "+\t\t\tcase Scanner.TokenNamewhile:", "+\t\t\t\treturn true;", "+\t\t\tdefault: ", "+\t\t\t\treturn false;", "-\tcatch (InvalidInputException e) {", "-\t\treturn false;", "-\t}", "-\t", "-}"]}], "num": 47876}
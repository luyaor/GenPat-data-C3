{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e63e3668107c5fddb77bd606777cbe9b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ee2518538ae5359da22a2f181945e21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "c24dd4a6433aff50a05b02ec21c21c751e37f0b2", "commitAfterChange": "7a427b535373cc1f9194a5ea21753da0d79460d2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \t \tpublic void resolve(BlockScope scope)", "diff": ["+\t\t\t\t// fault-tolerance", "+\t\t\t\tif (this.qualification != null) {", "+\t\t\t\t\tthis.qualification.resolveType(scope);", "+\t\t\t\t}", "+\t\t\t\tif (this.typeArguments != null) {", "+\t\t\t\t\tfor (int i = 0, max = this.typeArguments.length; i < max; i++) {", "+\t\t\t\t\t\tthis.typeArguments[i].resolveType(scope, true /* check bounds*/);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (this.arguments != null) {", "+\t\t\t\t\tfor (int i = 0, max = this.arguments.length; i < max; i++) {", "+\t\t\t\t\t\tthis.arguments[i].resolveType(scope);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "777b0fde268e4c5f3ea1902061626030", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "bb58594beea7321f1a2a3673bab3e26af89ead20", "commitAfterChange": "7376fb10956e4a03cc528e86b634b5ca73ef755b", "methodNumberBeforeChange": 296, "methodNumberAfterChange": 296, "signatureBeforeChange": " public void updateLastRecordedEndPC(int pos)", "signatureAfterChange": " public void updateLastRecordedEndPC(Scope scope, int pos)", "diff": ["-public void updateLastRecordedEndPC(int pos) {", "+ */", "+public void updateLastRecordedEndPC(Scope scope, int pos) {", "-\tupdateLocalVariablesAttribute(pos);", "-}", "+\tif (this.generateLocalVariableTableAttributes) {", "+\t\tfor (int i = 0, max = this.locals.length; i < max; i++) {", "+\t\t\tLocalVariableBinding local = this.locals[i];", "+\t\t\tif (local != null && local.declaringScope == scope && local.initializationCount > 0) {", "+\t\t\t\t\tlocal.initializationPCs[((local.initializationCount - 1) << 1) + 1] = this.position;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c81f7de2ae0383049789d6c6b63cbbe8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "e1b169e81e77457e606284ca99eb647f32044188", "commitAfterChange": "3aabc067e22084d59ef0ea59b0d58e1085dede4c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t)", "signatureAfterChange": " \t \tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t)", "diff": ["-\t\t", "+\t\tif (r2.findSuperTypeOriginatingFrom(r1) != null)", "+\t\t\treturn false;", "+\t\tint i;", "-\t\t\tfor (int i = 0; i < returnExpressionsLength; i++) {", "+\t\t\tfor (i = 0; i < returnExpressionsLength; i++) {", "-\t\t\treturn true;", "+\t\t\tif (i == returnExpressionsLength)", "+\t\t\t\treturn true;", "-\t\tif (returnExpressionsLength == 0)", "-\t\t\treturn false;", "-\t\t", "-\t\tsSam = s.getSingleAbstractMethod(this.enclosingScope);", "-\t\tfor (int i = 0; i < returnExpressionsLength; i++) {", "-\t\t\tExpression resultExpression = returnExpressions[i];", "-\t\t\tif (!resultExpression.sIsMoreSpecific(sSam.returnType, tSam.returnType))", "-\t\t\t\treturn false;", "+\t\tif (!r1.isBaseType() && r2.isBaseType()) {", "+\t\t\tfor (i = 0; i < returnExpressionsLength; i++) {", "+\t\t\t\tif (returnExpressions[i].resolvedType.isBaseType())", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (i == returnExpressionsLength)", "+\t\t\t\treturn true;", "-\t\treturn true;", "+\t\tif (r1.isFunctionalInterface(this.enclosingScope) && r2.isFunctionalInterface(this.enclosingScope)) {", "+\t\t\tfor (i = 0; i < returnExpressionsLength; i++) {", "+\t\t\t\tExpression resultExpression = returnExpressions[i];", "+\t\t\t\tif (!resultExpression.sIsMoreSpecific(r1, r2))", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (i != 0 && i == returnExpressionsLength)", "+\t\t\t\treturn true;", "+\t\t}", "+\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d102e38d2efb3b5e28e5e86637c8fe1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "ade133e0ba99ce8f261b5dbbb001561f152f4db8", "commitAfterChange": "a6c0426e8a97e5c69fdac3bea072af18fea82d0e", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic static IPath resolveDotDot(IPath path)", "signatureAfterChange": " \tpublic static IPath resolveDotDot(IPath reference, IPath path)", "diff": ["-\tpublic static IPath resolveDotDot(IPath path) {", "+\tpublic static IPath resolveDotDot(IPath reference, IPath path) {", "-\t\tIPath workspaceLocation = null;", "-\t\tfor (int i = 0, length = path.segmentCount(); i < length; i++) {", "-\t\t\tString segment = path.segment(i);", "-\t\t\tif (DOT_DOT.equals(segment)) {", "-\t\t\t\tif (newPath == null) {", "-\t\t\t\t\tif (i == 0) {", "-\t\t\t\t\t\tworkspaceLocation = workspaceRoot.getLocation();", "-\t\t\t\t\t\tnewPath = workspaceLocation;", "+\t\tIPath workspaceLocation = workspaceRoot.getLocation();", "+\t\tif (reference == null || workspaceLocation.isPrefixOf(reference)) {", "+\t\t\tfor (int i = 0, length = path.segmentCount(); i < length; i++) {", "+\t\t\t\tString segment = path.segment(i);", "+\t\t\t\tif (DOT_DOT.equals(segment)) {", "+\t\t\t\t\tif (newPath == null) {", "+\t\t\t\t\t\tif (i == 0) {", "+\t\t\t\t\t\t\tnewPath = workspaceLocation;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tnewPath = path.removeFirstSegments(i);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tnewPath = path.removeFirstSegments(i);", "+\t\t\t\t\t\tif (newPath.segmentCount() > 0) {", "+\t\t\t\t\t\t\tnewPath = newPath.removeLastSegments(1);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tnewPath = workspaceLocation;", "+\t\t\t\t\t\t}", "-\t\t\t\t} else {", "+\t\t\t\t} else if (newPath != null) {", "+\t\t\t\t\tif (newPath.equals(workspaceLocation) && workspaceRoot.getProject(segment).isAccessible()) {", "+\t\t\t\t\t\tnewPath = new Path(segment).makeAbsolute();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tnewPath = newPath.append(segment);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\telse {", "+\t\t\tfor (int i = 0, length = path.segmentCount(); i < length; i++) {", "+\t\t\t\tString segment = path.segment(i);", "+\t\t\t\tif (DOT_DOT.equals(segment)) {", "+\t\t\t\t\tif (newPath == null){", "+\t\t\t\t\t\tnewPath = reference;", "+\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tworkspaceLocation = workspaceRoot.getLocation();", "-\t\t\t\t\t\tnewPath = workspaceLocation;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else if (newPath != null) {", "-\t\t\t\tif (newPath.equals(workspaceLocation) && workspaceRoot.getProject(segment).isAccessible()) {", "-\t\t\t\t\tnewPath = new Path(segment).makeAbsolute();", "-\t\t\t\t} else {", "+\t \t\t\t\t}", "+\t\t\t\t} else if (newPath != null) {", "-\t\t\t\t}", "+\t \t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d998d4af722bd622c6b52b26bfaf3063", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "39787fb323b3f06bf37a085118b28347f6a17b39", "commitAfterChange": "0cc61e9905c3f603dab789f6a44abfa63094212c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void addDefinitelyAssignedVariables(Scope scope, int initStateIndex)", "signatureAfterChange": " public void addDefinitelyAssignedVariables(Scope scope, int initStateIndex)", "diff": ["-\tfor (int i = 0; i < visibleLocalsCount; i++) {", "+\tloop: for (int i = 0; i < visibleLocalsCount; i++) {", "-\t\t\tif (isDefinitelyAssigned(scope, initStateIndex, localBinding)) {", "+\t\t\tboolean isDefinitelyAssigned = isDefinitelyAssigned(scope, initStateIndex, localBinding);", "+\t\t\tif (!isDefinitelyAssigned) {", "+\t\t\t\tif (this.stateIndexes != null) {", "+\t\t\t\t\tfor (int j = 0, max = this.stateIndexesCounter; j < max; j++) {", "+\t\t\t\t\t\tif (isDefinitelyAssigned(scope, this.stateIndexes[j], localBinding)) {", "+\t\t\t\t\t\t\tcurrentFrame.putLocal(localBinding.resolvedPosition, new VerificationTypeInfo(localBinding.type));", "+\t\t\t\t\t\t\tif ((localBinding.initializationCount == 0) || (localBinding.initializationPCs[((localBinding.initializationCount - 1) << 1) + 1] != -1)) {", "+\t\t\t\t\t\t\t\t/* There are two cases:", "+\t\t\t\t\t\t\t\t * 1) there is no initialization interval opened ==> add an opened interval", "+\t\t\t\t\t\t\t\t * 2) there is already some initialization intervals but the last one is closed ==> add an opened interval", "+\t\t\t\t\t\t\t\t * An opened interval means that the value at localBinding.initializationPCs[localBinding.initializationCount - 1][1]", "+\t\t\t\t\t\t\t\t * is equals to -1.", "+\t\t\t\t\t\t\t\t * initializationPCs is a collection of pairs of int:", "+\t\t\t\t\t\t\t\t * \tfirst value is the startPC and second value is the endPC. -1 one for the last value means that the interval", "+\t\t\t\t\t\t\t\t * \tis not closed yet.", "+\t\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\t\tlocalBinding.recordInitializationStartPC(position);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tcontinue loop;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tcurrentFrame.putLocal(localBinding.resolvedPosition, new VerificationTypeInfo(localBinding.type));", "-\t\t\t\t\tcurrentFrame.putLocal(localBinding.resolvedPosition, new VerificationTypeInfo(localBinding.type));", "+\t\t\t\t\tlocalBinding.recordInitializationStartPC(position);", "-\tsuper.addDefinitelyAssignedVariables(scope, initStateIndex);"]}], "num": 42829}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "010a9d82025fe12f6df1b5ca69fe3c9e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cfa21f21f0e9dfd30e19211da7c4d33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "c775c1d0f23881553fb0e260a70314c10cea2026", "commitAfterChange": "05b6d0de9346f14e62c144050801c846baf33bc9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public final boolean canBeSeenBy(ReferenceBinding receiverType, ReferenceBinding invocationType)", "signatureAfterChange": "  public final boolean canBeSeenBy(ReferenceBinding receiverType, ReferenceBinding invocationType)", "diff": ["-\t\tReferenceBinding currentType = invocationType;", "-\t\tReferenceBinding declaringClass = enclosingType(); // protected types always have an enclosing one", "+\t\tTypeBinding currentType = invocationType.erasure();", "+\t\tTypeBinding declaringClass = enclosingType().erasure(); // protected types always have an enclosing one"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "188fe8426d6ef1129bcd5b08318b0b42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "fe6515e9c139811aa2eb665a085a3308b2e99fb0", "commitAfterChange": "647dfd947cd75acfba9ec1f3f1ed629ee1c122c7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public final boolean canBeSeenBy(Scope scope)", "signatureAfterChange": " public final boolean canBeSeenBy(Scope scope)", "diff": ["-\t\tTypeBinding currentType = invocationType.erasure();", "-\t\tTypeBinding declaringClass = enclosingType().erasure(); // protected types always have an enclosing one", "+\t\tTypeBinding declaringClass = enclosingType(); // protected types always have an enclosing one", "+\t\tdeclaringClass = declaringClass.erasure();// erasure cannot be null", "+\t\tTypeBinding currentType = invocationType.erasure();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7029b081506aba56add62cb4890f3128", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "c775c1d0f23881553fb0e260a70314c10cea2026", "commitAfterChange": "05b6d0de9346f14e62c144050801c846baf33bc9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public final boolean canBeSeenBy(Scope scope)", "signatureAfterChange": " public final boolean canBeSeenBy(Scope scope)", "diff": ["-\t\tReferenceBinding currentType = invocationType;", "-\t\tReferenceBinding declaringClass = enclosingType(); // protected types always have an enclosing one", "+\t\tTypeBinding currentType = invocationType.erasure();", "+\t\tTypeBinding declaringClass = enclosingType().erasure(); // protected types always have an enclosing one", "-\t\t\tif (declaringClass.isSuperclassOf(currentType)) return true;", "+\t\t\tif (currentType.findSuperTypeOriginatingFrom(declaringClass) != null) return true;"]}], "num": 32409}
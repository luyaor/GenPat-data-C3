{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3993ad423e4427f910a03102f0390ce", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1270a0da19314d7d01fd452f2e4e5f85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public FieldBinding getField(char[] fieldName, boolean needResolve)", "signatureAfterChange": " public FieldBinding getField(char[] fieldName, boolean needResolve)", "diff": ["-// NOTE: the type of a field of a binary type is resolved when needed", "+//NOTE: the type of a field of a binary type is resolved when needed", "-\tint fieldLength = fieldName.length;", "-\tfor (int f = fields.length; --f >= 0;) {", "-\t\tchar[] name = fields[f].name;", "-\t\tif (name.length == fieldLength && CharOperation.equals(name, fieldName))", "-\t\t\treturn needResolve ? resolveTypeFor(fields[f]) : fields[f];", "+\t// lazily sort fields", "+\tif ((this.tagBits & TagBits.AreFieldsSorted) == 0) {", "+\t\tint length = this.fields.length;", "+\t\tif (length > 1) \tReferenceBinding.sortFields(this.fields, 0, length - 1);", "+\t\tthis.tagBits |= TagBits.AreFieldsSorted;", "+\t}\t\t", "+\tFieldBinding field = ReferenceBinding.binarySearch(fieldName, this.fields);", "+\tif (field != null) {", "+\t\treturn needResolve ? resolveTypeFor(field) : field;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41bb870cf3b4bd98c5d93405c6d6664c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "e91a03d6ffd76cb11afae070200dbbbe73ce30b0", "commitAfterChange": "1ea5f94648ece67f779d3f9547f2c42cabdfedc2", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic UnconditionalFlowInfo mergedWith(UnconditionalFlowInfo otherInits)", "signatureAfterChange": " \tpublic UnconditionalFlowInfo mergedWith(UnconditionalFlowInfo otherInits)", "diff": ["-\t\tif (this == DeadEnd) return otherInits;", "-\t\tif (otherInits == DeadEnd) return this;", "+\t\tif (this == DEAD_END) return otherInits;", "+\t\tif (otherInits == DEAD_END) return this;", "-\t\tif (!otherInits.isFakeReachable())", "-\t\t\tmarkAsFakeReachable(false);", "+\t\tthis.reachMode &= otherInits.reachMode;", "-\t\tdefiniteInits &= otherInits.definiteInits;", "+\t\tthis.definiteInits &= otherInits.definiteInits;", "-\t\tpotentialInits |= otherInits.potentialInits;", "+\t\tthis.potentialInits |= otherInits.potentialInits;", "-\t\tif (extraDefiniteInits != null) {", "+\t\tif (this.extraDefiniteInits != null) {", "-\t\t\t\tif ((length = extraDefiniteInits.length) < (otherLength = otherInits.extraDefiniteInits.length)) {", "+\t\t\t\tif ((length = this.extraDefiniteInits.length) < (otherLength = otherInits.extraDefiniteInits.length)) {", "-\t\t\t\t\tSystem.arraycopy(extraDefiniteInits, 0, (extraDefiniteInits = new long[otherLength]), 0, length);", "-\t\t\t\t\tSystem.arraycopy(extraPotentialInits, 0, (extraPotentialInits = new long[otherLength]), 0, length);", "+\t\t\t\t\tSystem.arraycopy(this.extraDefiniteInits, 0, (this.extraDefiniteInits = new long[otherLength]), 0, length);", "+\t\t\t\t\tSystem.arraycopy(this.extraPotentialInits, 0, (this.extraPotentialInits = new long[otherLength]), 0, length);", "-\t\t\t\t\t\textraDefiniteInits[i] &= otherInits.extraDefiniteInits[i];", "-\t\t\t\t\t\textraPotentialInits[i] |= otherInits.extraPotentialInits[i++];", "+\t\t\t\t\t\tthis.extraDefiniteInits[i] &= otherInits.extraDefiniteInits[i];", "+\t\t\t\t\t\tthis.extraPotentialInits[i] |= otherInits.extraPotentialInits[i++];", "-\t\t\t\t\t\textraPotentialInits[i] = otherInits.extraPotentialInits[i++];", "+\t\t\t\t\t\tthis.extraPotentialInits[i] = otherInits.extraPotentialInits[i++];", "-\t\t\t\t\t\textraDefiniteInits[i] &= otherInits.extraDefiniteInits[i];", "-\t\t\t\t\t\textraPotentialInits[i] |= otherInits.extraPotentialInits[i++];", "+\t\t\t\t\t\tthis.extraDefiniteInits[i] &= otherInits.extraDefiniteInits[i];", "+\t\t\t\t\t\tthis.extraPotentialInits[i] |= otherInits.extraPotentialInits[i++];", "-\t\t\t\t\t\textraDefiniteInits[i++] = 0;", "+\t\t\t\t\t\tthis.extraDefiniteInits[i++] = 0;", "-\t\t\t\tint i = 0, length = extraDefiniteInits.length;", "+\t\t\t\tint i = 0, length = this.extraDefiniteInits.length;", "-\t\t\t\t\textraDefiniteInits[i++] = 0;", "+\t\t\t\t\tthis.extraDefiniteInits[i++] = 0;", "-\t\t\t\textraDefiniteInits = new long[otherLength = otherInits.extraDefiniteInits.length];", "-\t\t\t\tSystem.arraycopy(otherInits.extraPotentialInits, 0, (extraPotentialInits = new long[otherLength]), 0, otherLength);", "+\t\t\t\tthis.extraDefiniteInits = new long[otherLength = otherInits.extraDefiniteInits.length];", "+\t\t\t\tSystem.arraycopy(otherInits.extraPotentialInits, 0, (this.extraPotentialInits = new long[otherLength]), 0, otherLength);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fbb1030d8cd45da804d718b4ecd2bac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "70416b46b1375461a92d89ffa1cb077778dc6e86", "commitAfterChange": "0c53505dd9d8f221929a96f99e04ff55bfc4fc05", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void initialize(JavaProject project) throws JavaModelException", "signatureAfterChange": " \tpublic void initialize(JavaProject project, PotentialMatch[] potentialMatches) throws JavaModelException", "diff": ["+\t */", "+\tpublic void initialize(JavaProject project, PotentialMatch[] potentialMatches) throws JavaModelException {", "+\t\t// create name environment", "+\t\tif (this.nameEnvironment != null) { // cleanup", "+\t\t\tthis.nameEnvironment.cleanup();", "+\t\t}", "+\t\tif (potentialMatches.length == 1) {", "+\t\t\t// if only one potential match, a file name environment costs too much,", "+\t\t\t// so use the existing searchable  environment which will populate the java model", "+\t\t\t// only for this potential match and its required types.", "+\t\t\tthis.nameEnvironment = project.getSearchableNameEnvironment();", "+\t\t} else {", "+\t\t\tthis.nameEnvironment = new JavaSearchNameEnvironment2(project);", "+\t\t}", "+", "-\t\tCompilerOptions options = new CompilerOptions(project.getOptions(true));", "+\t\tthis.options = new CompilerOptions(project.getOptions(true));", "-\t\t\t\toptions,", "+\t\t\t\tthis.options,", "-\t\t\tnew LookupEnvironment(this, options, problemReporter, this.nameEnvironment);", "+\t\t\tnew LookupEnvironment(this, this.options, problemReporter, this.nameEnvironment);", "-\t\tthis.parser = new MatchLocatorParser(problemReporter, options.sourceLevel);", "-\t\t", "-\t\t// reset parsed units (they could hold onto obsolete bindings: see bug 16052)", "-\t\tMatchingOpenable[] openables = this.matchingOpenables.getMatchingOpenables(project.getPackageFragmentRoots());", "-\t\tfor (int i = 0, length = openables.length; i < length; i++) {", "-\t\t\tMatchingOpenable matchingOpenable = openables[i];", "-\t\t\tmatchingOpenable.reset();", "-\t\t}", "-\t\tthis.parsedUnits = new HashtableOfObject(10);", "-\t\t", "+\t\tthis.parser = new MatchLocatorParser(problemReporter, this.options.sourceLevel);", "+\t\t\t\t", "-\t}", "+\t\t", "+\t\t// initialize queue of units", "+\t\tthis.totalUnits = 0;", "+\t\tint maxUnits = potentialMatches.length;", "+\t\tthis.unitsToProcess = new CompilationUnitDeclaration[maxUnits];", "+\t\tthis.matchesToProcess = new PotentialMatch[maxUnits];", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee1760a6f4f9f7140cc0232fffd760a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "1fd4391b9d956e4b222e75746a12248fe673ae09", "commitAfterChange": "0ac06ace387f6f7ca79dcd41a12a6564b157c4e4", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 41, "signatureBeforeChange": "  \t\tpublic void printStats(Main main)", "signatureAfterChange": "  \t\tpublic void printStats()", "diff": ["-\t\tpublic void printStats(Main main) {", "-\t\t\tfinal boolean isTimed = main.timing;", "+\t\tpublic void printStats() {", "+\t\t\tfinal boolean isTimed = this.main.timing;", "-\t\t\t\tlong time = System.currentTimeMillis() - main.startTime;", "-\t\t\t\tthis.logTiming(time, main.lineCount);", "-\t\t\t\tif (main.times != null) {", "-\t\t\t\t\tmain.times[main.timesCounter++] = time;", "+\t\t\t\tlong time = System.currentTimeMillis() - this.main.startTime;", "+\t\t\t\tthis.logTiming(time, this.main.lineCount);", "+\t\t\t\tif (this.main.times != null) {", "+\t\t\t\t\tthis.main.times[this.main.timesCounter++] = time;", "-\t\t\tif (main.globalProblemsCount > 0) {", "-\t\t\t\tthis.logProblemsSummary(main.globalProblemsCount, main.globalErrorsCount, main.globalWarningsCount, main.globalTasksCount);", "+\t\t\tif (this.main.globalProblemsCount > 0) {", "+\t\t\t\tthis.logProblemsSummary(this.main.globalProblemsCount, this.main.globalErrorsCount, this.main.globalWarningsCount, main.globalTasksCount);", "-\t\t\tif (main.exportedClassFilesCounter != 0", "-\t\t\t\t\t&& (main.showProgress || isTimed || main.verbose)) {", "-\t\t\t\tthis.logNumberOfClassFilesGenerated(main.exportedClassFilesCounter);", "+\t\t\tif (this.main.exportedClassFilesCounter != 0", "+\t\t\t\t\t&& (this.main.showProgress || isTimed || this.main.verbose)) {", "+\t\t\t\tthis.logNumberOfClassFilesGenerated(this.main.exportedClassFilesCounter);", "+\t\t}"]}], "num": 27637}
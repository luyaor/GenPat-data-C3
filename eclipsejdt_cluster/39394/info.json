{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de93672b3cc337fd6747487caf79f493", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0682dd696165b67adb6443b3320203f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "c2534be63510215f41ecb7f37ff96548973f1992", "commitAfterChange": "77d85541d24733f3664c470fa5493217e4a31a94", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "\r \r \tprivate INameEnvironment getNameEnvironment(JavaProject project) throws JavaModelException", "signatureAfterChange": "\r \r \tprivate INameEnvironment getNameEnvironment(JavaProject project) throws JavaModelException", "diff": ["-\t\t\tObject target = JavaModel.getTarget(workspaceRoot, path, false);\r", "-\t\t\tif (target instanceof IResource) {\r", "-\t\t\t\tclasspathNames[i] = ((IResource)target).getLocation().toOSString();\r", "-\t\t\t} else {\r", "+\t\t\tif (root.isArchive()) {\r", "+\t\t\t\t// pass in a relative path (for internal jar) as this is what is needed by FileNamewEnviroment.getZipFile(File)\r", "+\t\t\t} else {\r", "+\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, path, false);\r", "+\t\t\t\tif (target instanceof IResource) {\r", "+\t\t\t\t\tclasspathNames[i] = ((IResource)target).getLocation().toOSString();\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tclasspathNames[i] = path.toOSString();\r", "+\t\t\t\t}\r", "-\t\treturn new FileSystem(classpathNames, new String[0], encoding);\r", "+\t\treturn new FileNameEnvironment(classpathNames, encoding);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce74d77f1413946d39bffb6efcc1581c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4c834daaadbd8c680a6fcccd31170f229344d7e", "commitAfterChange": "9afcaef5b1b73c3a14828e7dccbe0110d44ea231", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   \tprivate INameEnvironment getNameEnvironment(JavaProject project) throws JavaModelException", "signatureAfterChange": "   \tprivate INameEnvironment getNameEnvironment(JavaProject project) throws JavaModelException", "diff": ["-\t\tIPackageFragmentRoot[] roots = project.getAllPackageFragmentRoots();", "-\t\tint length = roots.length;", "-\t\tString[] classpathNames = new String[length];", "-\t\tint rootModes[] = new int[length];", "-\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tIPackageFragmentRoot root = roots[i];", "-\t\t\tIPath path = root.getPath();", "-\t\t\trootModes[i] = (root.getKind() == IPackageFragmentRoot.K_SOURCE)  ? ClasspathDirectory.SOURCE : ClasspathDirectory.BINARY;", "-\t\t\tif (root.isArchive()) {", "-\t\t\t\t// pass in a relative path (for internal jar) as this is what is needed by FileNamewEnviroment.getZipFile(File)", "-\t\t\t\tclasspathNames[i] = path.toOSString();", "-\t\t\t} else {", "-\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, path, false);", "-\t\t\t\tif (target instanceof IResource) {", "-\t\t\t\t\tclasspathNames[i] = ((IResource)target).getLocation().toOSString();", "-\t\t\t\t} else {", "-\t\t\t\t\tclasspathNames[i] = path.toOSString();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t"]}], "num": 39394}
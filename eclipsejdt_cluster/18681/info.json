{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1792dc37a13dd85f0e6272c73331b5d6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36e0c27ac8c2ebaf26c63fef8f4a06a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodDeclarationPattern.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public boolean matches(Binding binding)", "signatureAfterChange": "\r public int matchLevel(Binding binding)", "diff": ["- */\r", "-public boolean matches(Binding binding) {\r", "-\tif (!(binding instanceof MethodBinding)) return false;\r", "-\r", "-\tMethodBinding method = (MethodBinding)binding;\r", "-\t\r", "-\t// selector\r", "-\tif (!this.matchesName(this.selector, method.selector))\r", "-\t\treturn false;\r", "-\r", "-\t// declaring type\r", "-\tReferenceBinding declaringType = method.declaringClass;\r", "-\tif (declaringType != null) {\r", "-\t\tif (!method.isStatic() && !method.isPrivate()) {\r", "-\t\t\tif (!this.matchesAsSubtype(declaringType, this.declaringSimpleName, this.declaringQualification))\r", "-\t\t\t\treturn false;\r", "-\t\t} else {\r", "-\t\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringType))\r", "-\t\t\t\treturn false;\r", "-\t\t}\r", "-\t}\r", "-\r", "-\t// return type\r", "-\tif (!this.matchesType(this.returnSimpleName, this.returnQualification, method.returnType)) {\r", "-\t\treturn false;\r", "-\t}\r", "-\t\t\r", "-\t// parameter types\r", "-\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\tif (parameterCount > -1) {\r", "-\t\tint argumentCount = method.parameters == null ? 0 : method.parameters.length;\r", "-\t\tif (parameterCount != argumentCount)\r", "-\t\t\treturn false;\r", "-\t\tfor (int i = 0; i < parameterCount; i++) {\r", "-\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "-\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "-\t\t\tif (!this.matchesType(type, qualification, method.parameters[i]))\r", "-\t\t\t\treturn false;\r", "-\t\t}\r", "-\t}\r", "-\r", "-\treturn true;\r", "+ */\r", "+public int matchLevel(Binding binding) {\r", "+\tif (binding == null) return INACCURATE_MATCH;\r", "+\tif (!(binding instanceof MethodBinding)) return IMPOSSIBLE_MATCH;\r", "+\tint level;\r", "+\r", "+\tMethodBinding method = (MethodBinding)binding;\r", "+\t\r", "+\t// selector\r", "+\tif (!this.matchesName(this.selector, method.selector))\r", "+\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\t// declaring type\r", "+\tReferenceBinding declaringType = method.declaringClass;\r", "+\tif (!method.isStatic() && !method.isPrivate()) {\r", "+\t\tlevel = this.matchLevelAsSubtype(declaringType, this.declaringSimpleName, this.declaringQualification);\r", "+\t} else {\r", "+\t\tlevel = this.matchLevelForType(this.declaringSimpleName, this.declaringQualification, declaringType);\r", "+\t}\r", "+\tif (level == IMPOSSIBLE_MATCH) {\r", "+\t\treturn IMPOSSIBLE_MATCH;\r", "+\t}\r", "+\r", "+\t// return type\r", "+\tint newLevel = this.matchLevelForType(this.returnSimpleName, this.returnQualification, method.returnType);\r", "+\tswitch (newLevel) {\r", "+\t\tcase IMPOSSIBLE_MATCH:\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\tcase ACCURATE_MATCH: // keep previous level\r", "+\t\t\tbreak;\r", "+\t\tdefault: // ie. INACCURATE_MATCH\r", "+\t\t\tlevel = newLevel;\r", "+\t\t\tbreak;\r", "+\t}\r", "+\t\t\r", "+\t// parameter types\r", "+\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\tif (parameterCount > -1) {\r", "+\t\tint argumentCount = method.parameters == null ? 0 : method.parameters.length;\r", "+\t\tif (parameterCount != argumentCount)\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\tfor (int i = 0; i < parameterCount; i++) {\r", "+\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "+\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "+\t\t\tnewLevel = this.matchLevelForType(type, qualification, method.parameters[i]);\r", "+\t\t\tswitch (newLevel) {\r", "+\t\t\t\tcase IMPOSSIBLE_MATCH:\r", "+\t\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t\tcase ACCURATE_MATCH: // keep previous level\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tdefault: // ie. INACCURATE_MATCH\r", "+\t\t\t\t\tlevel = newLevel;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\r", "+\treturn level;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ab0b488809ff680abb38f2ea2179b94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodDeclarationPattern.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public boolean matches(Binding binding)", "signatureAfterChange": "\r public int matchLevel(Binding binding)", "diff": ["- */\r", "-public boolean matches(Binding binding) {\r", "-\tif (!(binding instanceof MethodBinding)) return false;\r", "-\r", "-\tMethodBinding method = (MethodBinding)binding;\r", "-\t\r", "-\t// selector\r", "-\tif (!this.matchesName(this.selector, method.selector))\r", "-\t\treturn false;\r", "-\r", "-\t// declaring type\r", "-\tReferenceBinding declaringType = method.declaringClass;\r", "-\tif (declaringType != null) {\r", "-\t\tif (!method.isStatic() && !method.isPrivate()) {\r", "-\t\t\tif (!this.matchesAsSubtype(declaringType, this.declaringSimpleName, this.declaringQualification))\r", "-\t\t\t\treturn false;\r", "-\t\t} else {\r", "-\t\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringType))\r", "-\t\t\t\treturn false;\r", "-\t\t}\r", "-\t}\r", "-\r", "-\t// return type\r", "-\tif (!this.matchesType(this.returnSimpleName, this.returnQualification, method.returnType)) {\r", "-\t\treturn false;\r", "-\t}\r", "-\t\t\r", "-\t// parameter types\r", "-\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\tif (parameterCount > -1) {\r", "-\t\tint argumentCount = method.parameters == null ? 0 : method.parameters.length;\r", "-\t\tif (parameterCount != argumentCount)\r", "-\t\t\treturn false;\r", "-\t\tfor (int i = 0; i < parameterCount; i++) {\r", "-\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "-\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "-\t\t\tif (!this.matchesType(type, qualification, method.parameters[i]))\r", "-\t\t\t\treturn false;\r", "-\t\t}\r", "-\t}\r", "-\r", "-\treturn true;\r", "+ */\r", "+public int matchLevel(Binding binding) {\r", "+\tif (binding == null) return INACCURATE_MATCH;\r", "+\tif (!(binding instanceof MethodBinding)) return IMPOSSIBLE_MATCH;\r", "+\tint level;\r", "+\r", "+\tMethodBinding method = (MethodBinding)binding;\r", "+\t\r", "+\t// selector\r", "+\tif (!this.matchesName(this.selector, method.selector))\r", "+\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\t// declaring type\r", "+\tReferenceBinding declaringType = method.declaringClass;\r", "+\tif (!method.isStatic() && !method.isPrivate()) {\r", "+\t\tlevel = this.matchLevelAsSubtype(declaringType, this.declaringSimpleName, this.declaringQualification);\r", "+\t} else {\r", "+\t\tlevel = this.matchLevelForType(this.declaringSimpleName, this.declaringQualification, declaringType);\r", "+\t}\r", "+\tif (level == IMPOSSIBLE_MATCH) {\r", "+\t\treturn IMPOSSIBLE_MATCH;\r", "+\t}\r", "+\r", "+\t// return type\r", "+\tint newLevel = this.matchLevelForType(this.returnSimpleName, this.returnQualification, method.returnType);\r", "+\tswitch (newLevel) {\r", "+\t\tcase IMPOSSIBLE_MATCH:\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\tcase ACCURATE_MATCH: // keep previous level\r", "+\t\t\tbreak;\r", "+\t\tdefault: // ie. INACCURATE_MATCH\r", "+\t\t\tlevel = newLevel;\r", "+\t\t\tbreak;\r", "+\t}\r", "+\t\t\r", "+\t// parameter types\r", "+\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\tif (parameterCount > -1) {\r", "+\t\tint argumentCount = method.parameters == null ? 0 : method.parameters.length;\r", "+\t\tif (parameterCount != argumentCount)\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\tfor (int i = 0; i < parameterCount; i++) {\r", "+\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "+\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "+\t\t\tnewLevel = this.matchLevelForType(type, qualification, method.parameters[i]);\r", "+\t\t\tswitch (newLevel) {\r", "+\t\t\t\tcase IMPOSSIBLE_MATCH:\r", "+\t\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t\tcase ACCURATE_MATCH: // keep previous level\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tdefault: // ie. INACCURATE_MATCH\r", "+\t\t\t\t\tlevel = newLevel;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\r", "+\treturn level;\r", "+}\r"]}], "num": 18681}
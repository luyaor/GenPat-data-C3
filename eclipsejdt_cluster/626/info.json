{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0408faffca64a8872e6b6804ebe9c429", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26bb00b3fd64440b6a5c2ee8be563956", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchPattern.java", "commitBeforeChange": "db0d99936b529038f502f3c42e4c67fa5380c5bc", "commitAfterChange": "5988789db77abec94d1b8a17fd42ed09f795c5be", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tchar[][] extractMethodArguments(IMethod method)", "signatureAfterChange": " \tchar[][] extractMethodArguments(IMethod method)", "diff": ["-\t\tif (method.isParameterized()) {", "-\t\t\targumentsSignatures = new BindingKey(method.getKey()).getTypeArguments();", "+\t\tBindingKey key;", "+\t\tif (method.isResolved() && (key = new BindingKey(method.getKey())).isParameterizedType()) {", "+\t\t\targumentsSignatures = key.getTypeArguments();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3a6c67f921e0f27539d795f32adff1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodPattern.java", "commitBeforeChange": "db0d99936b529038f502f3c42e4c67fa5380c5bc", "commitAfterChange": "5988789db77abec94d1b8a17fd42ed09f795c5be", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public MethodPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] selector,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] returnQualification,  \tchar[] returnSimpleName, \tString returnSignature, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tboolean varargs, \tIMethod method, \tint matchRule)", "signatureAfterChange": " public MethodPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] selector,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] returnQualification,  \tchar[] returnSimpleName, \tString returnSignature, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tboolean varargs, \tIMethod method, \tint matchRule)", "diff": ["-\tif (method.isParameterized()) {", "-\t\tgenericDeclaringTypeSignature = new BindingKey(method.getKey()).getDeclaringTypeSignature();", "+\tBindingKey key;", "+\tif (method.isResolved() && (key = new BindingKey(method.getKey())).isParameterizedType()) {", "+\t\tgenericDeclaringTypeSignature = key.getDeclaringTypeSignature();"]}], "num": 626}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc9b456e29e2ae5274906abef17ae486", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d05ac598a68603cd2b2114295b6334f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\tif (constant != NotAConstant) {", "+\tif (this.constant != NotAConstant) {", "-\t\t\tcodeStream.generateConstant(constant, implicitConversion);", "+\t\t\tcodeStream.generateConstant(this.constant, this.implicitConversion);", "-\t\tswitch (bits & RestrictiveFlagMASK) {", "+\t\tswitch (this.bits & RestrictiveFlagMASK) {", "-\t\t\t\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "+\t\t\t\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "+\t\t\t\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((this.bits & DepthMASK) >> DepthSHIFT);", "-\t\t\t\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "-\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\t\t\t\tcodeStream.generateConstant(fieldBinding.constant, implicitConversion);", "+\t\t\t\t\t\tcodeStream.generateConstant(fieldBinding.constant, this.implicitConversion);", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "-\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbfe38833dc2f212d237eed66fda878b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\tswitch (bits & RestrictiveFlagMASK) {", "+\tswitch (this.bits & RestrictiveFlagMASK) {", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "+\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "+\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((this.bits & DepthMASK) >> DepthSHIFT);", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "-\tif ((operationTypeID = implicitConversion >> 4) == T_String || operationTypeID == T_Object) {", "+\tif ((operationTypeID = this.implicitConversion >> 4) == T_String || operationTypeID == T_Object) {", "-\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\tcodeStream.generateConstant(expression.constant, implicitConversion);\t\t\t", "+\t\t\tcodeStream.generateConstant(expression.constant, this.implicitConversion);\t\t\t", "-\tswitch (bits & RestrictiveFlagMASK) {", "+\tswitch (this.bits & RestrictiveFlagMASK) {"]}], "num": 40381}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b45be25401a3be726001efc494af6a2e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f3bbcf5fc4858d5e94f3771776faaf6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchPattern.java", "commitBeforeChange": "562f566c1c2b8bfedaad7117a5b53ae2f781bec9", "commitAfterChange": "b11449e69404728ca4b19e3cce8d08756ffe4f52", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tchar[][] extractMethodArguments(IMethod method)", "signatureAfterChange": " \tchar[][] extractMethodArguments(IMethod method)", "diff": ["+\t\tString[] argumentsSignatures = null;", "-\t\t\treturn Util.extractMethodArguments(((ParameterizedSourceMethod)method).uniqueKey);", "+\t\t\targumentsSignatures = ((ParameterizedSourceMethod)method).genericTypeArgumentsSignatures;", "-\t\t\treturn Util.extractMethodArguments(((ParameterizedBinaryMethod)method).uniqueKey);", "+\t\t\targumentsSignatures = ((ParameterizedBinaryMethod)method).genericTypeArgumentsSignatures;", "+", "+\t\t// Parameterized method", "+\t\tint length = argumentsSignatures==null ? 0 : argumentsSignatures.length;", "+\t\tif (length > 0) {", "+\t\t\tchar[][] methodArguments = new char[length][];", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tmethodArguments[i] = argumentsSignatures[i].toCharArray();", "+\t\t\t\tCharOperation.replace(methodArguments[i], new char[] { '$', '/' }, '.');", "+\t\t\t}", "+\t\t\treturn methodArguments;", "+\t\t}", "+\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e4d2ebc16ad30a28dcb6c4acc98da31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "79230cd7762a4c67bbe12b2445e22b464f420455", "commitAfterChange": "0e2b95cbd8acd25a30eff4aa5a4e5b34fa13b0c5", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \tpublic boolean performConcurrentJob(\r \t\tIJob searchJob,\r \t\tint waitingPolicy,\r \t\tIProgressMonitor progress)", "signatureAfterChange": "\r \tpublic boolean performConcurrentJob(\r \t\tIJob searchJob,\r \t\tint waitingPolicy,\r \t\tIProgressMonitor progress)", "diff": ["+\t\tint concurrentJobWork = 100;\r", "-\t\t\t\t\t\tstatus = searchJob.execute(progress);\r", "+\t\t\t\t\t\tstatus = searchJob.execute(progress == null ? null : new SubProgressMonitor(progress, concurrentJobWork));\r", "+\t\t\t\t\tIProgressMonitor subProgress = null;\r", "+\t\t\t\t\tint totalWork = this.awaitingJobsCount();\r", "+\t\t\t\t\tif (progress != null && totalWork > 0) {\r", "+\t\t\t\t\t\tsubProgress = new SubProgressMonitor(progress, 50);\r", "+\t\t\t\t\t\tsubProgress.beginTask(\"\", totalWork); //$NON-NLS-1$\r", "+\t\t\t\t\t\tconcurrentJobWork = 50;\r", "+\t\t\t\t\t}\r", "-\t\t\t\t\t\tif (progress != null && progress.isCanceled())\r", "+\t\t\t\t\t\tif (subProgress != null && subProgress.isCanceled())\r", "-\t\t\t\t\t\t\tif (progress != null) {\r", "-\t\t\t\t\t\t\t\tprogress.subTask(\r", "+\t\t\t\t\t\t\tif (subProgress != null) {\r", "+\t\t\t\t\t\t\t\tsubProgress.subTask(\r", "+\t\t\t\t\t\t\t\tsubProgress.worked(1);\r", "+\t\t\t\t\tif (subProgress != null) {\r", "+\t\t\t\t\t\tsubProgress.done();\r", "+\t\t\t\t\t}\r", "-\t\tstatus = searchJob.execute(progress);\r", "+\t\tstatus = searchJob.execute(progress == null ? null : new SubProgressMonitor(progress, concurrentJobWork));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e26baa2ce266a5e30183a7e12dc548b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "12bbec9151d1b613c62f44289e9e604128f21de0", "commitAfterChange": "cfad6931331ca38f2461ad24853dd9b6dfa652de", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 25, "signatureBeforeChange": "  private void writeRestriction(AccessRestriction restriction, DataOutputStream out) throws IOException", "signatureAfterChange": "  private void writeRestriction(AccessRuleSet accessRuleSet, DataOutputStream out) throws IOException", "diff": ["-private void writeRestriction(AccessRestriction restriction, DataOutputStream out) throws IOException {", "-\tif (restriction == null) {", "-\t\tout.writeBoolean(false);", "+private void writeRestriction(AccessRuleSet accessRuleSet, DataOutputStream out) throws IOException {", "+\tif (accessRuleSet == null) {", "+\t\tout.writeInt(0);", "-\t\tout.writeBoolean(true);", "-\t\tout.writeUTF(restriction.getMessageTemplate());", "-\t\twriteNames(restriction.getInclusionPatterns(), out); // inclusion patterns come first, see readRestriction()", "-\t\twriteNames(restriction.getExclusionPatterns(), out);", "-\t\t// skip the AccessRestriction.furtherRestriction until we decide if it will be used", "+\t\tAccessRule[] accessRules = accessRuleSet.getAccessRules();", "+\t\tint length = accessRules.length;", "+\t\tout.writeInt(length);", "+\t\tif (length != 0) { ", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tAccessRule accessRule = accessRules[i];", "+\t\t\t\twriteName(accessRule.pattern, out);", "+\t\t\t\tout.writeInt(accessRule.severity);", "+\t\t\t}", "+\t\t\tout.writeUTF(accessRuleSet.messageTemplate);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb2154af8c5527d85618eb19ba90741f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTestsRequestor2.java", "commitBeforeChange": "22519abd3f3558e92c5b78ac9ce9558a4e196050", "commitAfterChange": "c562fe63284003e0aa645013eaaa286d657e4cee", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprotected void appendProposal(CompletionProposal proposal, StringBuffer buffer)", "signatureAfterChange": "  \tprotected void appendProposal(CompletionProposal proposal, StringBuffer buffer)", "diff": ["+\t\tif(this.showParamterNames) {", "+\t\t\tchar[][] parameterNames = proposal.findParameterNames(null);", "+\t\t\tbuffer.append(\", \");", "+\t\t\tif(parameterNames == null || parameterNames.length <= 0) {", "+\t\t\t\tbuffer.append(NULL_LITERAL);", "+\t\t\t} else {", "+\t\t\t\tbuffer.append(\"(\");", "+\t\t\t\tfor (int i = 0; i < parameterNames.length; i++) {", "+\t\t\t\t\tif(i > 0) buffer.append(\", \");", "+\t\t\t\t\tbuffer.append(parameterNames[i]);", "+\t\t\t\t}", "+\t\t\t\tbuffer.append(\")\");", "+\t\t\t}", "+\t\t}"]}], "num": 3421}
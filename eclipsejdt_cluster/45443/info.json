{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "38d75d014691f4ae8701cc390ac01587", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0019f1ed936ec4d28d0f8e5ff4aa03c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "b0ef9fb2ef2f8b6f0b35895401c98f1788e21821", "commitAfterChange": "723dd30d7e194152eb04fb9ae54682c59941aaad", "methodNumberBeforeChange": 201, "methodNumberAfterChange": 201, "signatureBeforeChange": " \tpublic void testEnumConstantDeclaration()", "signatureAfterChange": " \tpublic void testEnumConstantDeclaration()", "diff": ["-\t\tassertTrue(x.bodyDeclarations().size()== 0);", "-\t\t// TODO (jeem) - after 3.1 M4 remove mention of bodyDeclarations", "-\t\tgenericPropertyListTest(x, x.bodyDeclarations(),", "-\t\t  new Property(\"BodyDeclarations\", true, BodyDeclaration.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tTypeDeclaration result = targetAst.newTypeDeclaration();", "-\t\t\t\tif (parented) {", "-\t\t\t\t\tCompilationUnit cu = targetAst.newCompilationUnit();", "-\t\t\t\t\tcu.types().add(result);", "-\t\t\t\t}", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t\tpublic ASTNode wrap() {", "-\t\t\t\tEnumConstantDeclaration s1 = x.getAST().newEnumConstantDeclaration();", "-\t\t\t\ts1.bodyDeclarations().add(x);", "-\t\t\t\treturn s1;", "-\t\t\t}", "-\t\t\tpublic void unwrap() {", "-\t\t\t\tEnumConstantDeclaration s1 = (EnumConstantDeclaration) x.getParent();", "-\t\t\t\ts1.bodyDeclarations().remove(x);", "-\t\t\t}", "-\t\t});", "-\t\t", "-\t\t// check that TypeDeclarations in body are classified correctly", "-\t\tx.bodyDeclarations().clear();", "-\t\tTypeDeclaration t1 = ast.newTypeDeclaration();", "-\t\tx.bodyDeclarations().add(t1);", "-", "-\t\tassertTrue(t1.isLocalTypeDeclaration() == false);", "-\t\tassertTrue(t1.isMemberTypeDeclaration() == true);", "-\t\tassertTrue(t1.isPackageMemberTypeDeclaration() == false);", "-\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57c4beb2fa1e3af53b28f6d91f55e92d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "dfc91d56806c456b9b3ccf18b7180e0ffe937730", "commitAfterChange": "b2cc128bda23f9f1345b0f7e7b16cc0855af3cea", "methodNumberBeforeChange": 184, "methodNumberAfterChange": 184, "signatureBeforeChange": " \tpublic void testJavadoc()", "signatureAfterChange": " \tpublic void testJavadoc()", "diff": ["-\t\tassertTrue(x.fragments().isEmpty());", "+\t\tassertTrue(x.tags().isEmpty());", "-\t\t// check that fragments() can handle TagElement", "-\t\tgenericPropertyListTest(x, x.fragments(),", "-\t\t  new Property(\"Fragments\", true, TagElement.class) { //$NON-NLS-1$", "+\t\tgenericPropertyListTest(x, x.tags(),", "+\t\t  new Property(\"Tags\", true, TagElement.class) { //$NON-NLS-1$", "-\t\t\t\t\tparent.fragments().add(result);", "+\t\t\t\t\tparent.tags().add(result);", "+\t\t\t\t\ttargetAst.newTextElement(),", "+\t\t\t\t\ttargetAst.newMethodRef()", "-\t\t\t}", "-\t\t});", "-\t\t// check that fragments() can handle Name", "-\t\tgenericPropertyListTest(x, x.fragments(),", "-\t\t  new Property(\"Fragments\", true, Name.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tSimpleName result = targetAst.newSimpleName(\"foo\"); //$NON-NLS-1$", "-\t\t\t\tif (parented) {", "-\t\t\t\t\ttargetAst.newExpressionStatement(result);", "-\t\t\t\t}", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t});", "-\t\t// check that fragments() can handle TextElement", "-\t\tgenericPropertyListTest(x, x.fragments(),", "-\t\t  new Property(\"Fragments\", true, TextElement.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tTextElement result = targetAst.newTextElement();", "-\t\t\t\tif (parented) {", "-\t\t\t\t\tJavadoc parent = targetAst.newJavadoc();", "-\t\t\t\t\tparent.fragments().add(result);", "-\t\t\t\t}", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t});", "-\t\t// check that fragments() can handle MethodRef", "-\t\tgenericPropertyListTest(x, x.fragments(),", "-\t\t  new Property(\"Fragments\", true, MethodRef.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tMethodRef result = targetAst.newMethodRef();", "-\t\t\t\tif (parented) {", "-\t\t\t\t\tJavadoc parent = targetAst.newJavadoc();", "-\t\t\t\t\tparent.fragments().add(result);", "-\t\t\t\t}", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t});", "-\t\t// check that fragments() can handle MemberRef", "-\t\tgenericPropertyListTest(x, x.fragments(),", "-\t\t  new Property(\"Fragments\", true, MemberRef.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tMemberRef result = targetAst.newMemberRef();", "-\t\t\t\tif (parented) {", "-\t\t\t\t\tJavadoc parent = targetAst.newJavadoc();", "-\t\t\t\t\tparent.fragments().add(result);", "-\t\t\t\t}", "-\t\t\t\treturn result;"]}], "num": 45443}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1b49983c623241b010851b83ff55ec3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33b63a0b2c442318e8c19cc52d250b6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\t  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "signatureAfterChange": "\t  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "diff": ["-\t\tTypeBinding tb = type.resolveTypeExpecting(scope, scope.getJavaLangThrowable());", "-\t\tif (tb == null)", "+\t\tTypeBinding exceptionType = this.type.resolveType(scope);", "+\t\tif (exceptionType == null) return null;", "+\t\tif (exceptionType.isGenericType() || exceptionType.isParameterizedType()) {", "+\t\t\tscope.problemReporter().invalidParameterizedExceptionType(exceptionType, this);", "-", "+\t\t}", "+\t\tTypeBinding throwable = scope.getJavaLangThrowable();", "+\t\tif (!exceptionType.isCompatibleWith(throwable)) {", "+\t\t\tscope.problemReporter().typeMismatchError(exceptionType, throwable, this);", "+\t\t\treturn null;", "+\t\t}", "+\t\t", "-\t\tbinding = new LocalVariableBinding(this, tb, modifiers, false); // argument decl, but local var  (where isArgument = false)", "+\t\tbinding = new LocalVariableBinding(this, exceptionType, modifiers, false); // argument decl, but local var  (where isArgument = false)", "-\t\treturn tb;", "+\t\treturn exceptionType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39e57b3398c319a0027aa01885f005c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "diff": ["-\t\t\t\tcase Binding.ARRAY_TYPE :", "-\t\t\t\t\tif (((ArrayBinding) exceptionType).leafComponentType == TypeBinding.VOID) {", "-\t\t\t\t\t\tscope.problemReporter().variableTypeCannotBeVoidArray(this);", "-\t\t\t\t\t\thasError = true;", "-\t\t\t\t\t\t// fall thru to create the variable - avoids additional errors because the variable is missing", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-", "-\t\tthis.binding = new LocalVariableBinding(this, exceptionType, this.modifiers, false); // argument decl, but local var  (where isArgument = false)", "+\t\t", "+\t\tif ((this.type.bits & ASTNode.IsUnionType) != 0) {", "+\t\t\tthis.binding = new CatchParameterBinding(this, exceptionType, this.modifiers | ClassFileConstants.AccFinal, false); // argument decl, but local var  (where isArgument = false)", "+\t\t\tthis.binding.tagBits |= TagBits.MultiCatchParameter;", "+\t\t} else {", "+\t\t\tthis.binding = new CatchParameterBinding(this, exceptionType, this.modifiers, false); // argument decl, but local var  (where isArgument = false)", "+\t\t}"]}], "num": 21035}
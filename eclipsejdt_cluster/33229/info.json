{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "579053423d9ee7828465dff4f29d66eb", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f3264b7af3d7ca9734b45c97ad703d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "87dd132b690b39c22112692b2510e01020cf3c19", "commitAfterChange": "cf29dd30719608417591dd031afb88e7a13d5f98", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate static Map getOptions(IJavaProject jproject)", "signatureAfterChange": " \tprivate static Map getOptions(IJavaProject jproject)", "diff": ["-\t */", "-\tprivate static Map getOptions(IJavaProject jproject) {", "-\t\tMap options = _optionsMaps.get(jproject);", "-\t\tif (null != options) {", "-\t\t\treturn options;", "-\t\t}", "-\t\t// We didn't already have an options map for this project, so create one.", "-\t\toptions = new HashMap(AptPreferenceConstants.NSETTINGS);", "-", "-\t\t// First load workspace-wide, then overlay per-project options if possible.", "-\t\tloadWorkspaceOptions(options);", "-\t\tif (jproject.getProject() != null) {", "-\t\t\tIScopeContext context = new ProjectScope(jproject.getProject());", "-\t\t\tfinal IEclipsePreferences eclipsePreferences = context.getNode(AptPlugin.PLUGIN_ID);", "-\t\t\ttry {", "-\t\t\t\tfor (String s : eclipsePreferences.keys()) {", "-\t\t\t\t\toptions.put(s, eclipsePreferences.get(s, \"\"));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcatch (BackingStoreException e) {", "-\t\t\t\t// TODO", "-\t\t\t\te.printStackTrace();", "-\t\treturn options;", "+\t */", "+\tprivate static Map getOptions(IJavaProject jproject) {", "+\t\tMap options = _optionsMaps.get(jproject);", "+\t\tif (null != options) {", "+\t\t\treturn options;", "+\t\t}", "+\t\t// We didn't already have an options map for this project, so create one.", "+\t\tIPreferencesService service = Platform.getPreferencesService();", "+\t\t// Don't need to do this, because it's the default-default already:", "+\t\t//service.setDefaultLookupOrder(AptPlugin.PLUGIN_ID, null, lookupOrder);", "+\t\toptions = new HashMap(AptPreferenceConstants.NSETTINGS);", "+\t\tif (jproject != null) {", "+\t\t\tIScopeContext projContext = new ProjectScope(jproject.getProject());", "+\t\t\tIScopeContext[] contexts = new IScopeContext[] { projContext };", "+\t\t\tfor (String optionName : AptPreferenceConstants.OPTION_NAMES) {", "+\t\t\t\tString val = service.getString(AptPlugin.PLUGIN_ID, optionName, null, contexts);", "+\t\t\t\tif (val != null) {", "+\t\t\t\t\toptions.put(optionName, val);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\telse {", "+\t\t\t// TODO: do we need to handle this case?", "+\t\t\treturn null;", "+\t\t}", "+\t\t", "+\t\treturn options;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dabdbfae1365481c47157692013380ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/SubTypeSearchJob.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void closeAll()", "signatureAfterChange": " public void finished()", "diff": ["-public void closeAll(){", "-", "-\tIterator openedInputs = inputs.values().iterator();", "-\twhile (openedInputs.hasNext()){", "-\t\tIndexInput input = (IndexInput) openedInputs.next();", "-\t\ttry {", "-\t\t\tinput.close();", "-\t\t} catch(IOException e){", "-\t\t\t// ignore", "-\t\t}", "+public void finished() {", "+\ttry {", "+\t\tObject[] values = this.indexes.values;", "+\t\tfor (int i = 0, l = values.length; i < l; i++)", "+\t\t\tif (values[i] != null)", "+\t\t\t\t((Index) values[i]).stopQuery();", "+\t} catch(IOException e) {", "+\t\t// ignore"]}], "num": 33229}
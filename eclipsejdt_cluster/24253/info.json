{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f515ba606207dad1d5fdb5ae6c60148b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b8e89d47ffb3f38a9b74437daea4056", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "8975a4993759f4f0cb2d8fff2da5bbb83e0cb45e", "commitAfterChange": "cf2efa3dda03cbfe4678da60ea7973c079a8dcf8", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 43, "signatureBeforeChange": " protected TypeReference getAssistTypeReferenceForGenericType(int dim, int identifierLength, int numberOfIdentifiers)", "signatureAfterChange": " protected TypeReference getAssistTypeReferenceForGenericType(int dim, int identifierLength, int numberOfIdentifiers)", "diff": ["-\t\tint length = this.genericsLengthStack[this.genericsLengthPtr--];", "-\t\tthis.genericsPtr -= length;", "+//\t\tint length = this.genericsLengthStack[this.genericsLengthPtr--];", "+//\t\tthis.genericsPtr -= length;", "+//\t\tlong[] positions = new long[identifierLength];", "+//\t\tSystem.arraycopy(", "+//\t\t\tidentifierPositionStack, ", "+//\t\t\tidentifierPtr, ", "+//\t\t\tpositions, ", "+//\t\t\t0, ", "+//\t\t\tidentifierLength); ", "+//\t\t", "+//\t\tthis.identifierPtr--;", "+//\t\tTypeReference reference = this.createSingleAssistTypeReference(", "+//\t\t\t\t\t\t\t\t\t\tassistIdentifier(), ", "+//\t\t\t\t\t\t\t\t\t\tpositions[0]);", "+//\t\tthis.assistNode = reference;", "+//\t\tthis.lastCheckPoint = reference.sourceEnd + 1;", "+//\t\treturn reference;", "+\t\t", "+\t\tint currentTypeArgumentsLength = this.genericsLengthStack[this.genericsLengthPtr--];", "+\t\tTypeReference[] typeArguments = new TypeReference[currentTypeArgumentsLength];", "+\t\tthis.genericsPtr -= currentTypeArgumentsLength;", "+\t\tSystem.arraycopy(this.genericsStack, this.genericsPtr + 1, typeArguments, 0, currentTypeArgumentsLength);", "-\t\tTypeReference reference = this.createSingleAssistTypeReference(", "-\t\t\t\t\t\t\t\t\t\tassistIdentifier(), ", "-\t\t\t\t\t\t\t\t\t\tpositions[0]);", "+\t\t\t\t", "+\t\tTypeReference reference = this.createParameterizedSingleAssistTypeReference(", "+\t\t\t\ttypeArguments,", "+\t\t\t\tassistIdentifier(),", "+\t\t\t\tpositions[0]);", "+\t\t", "-\t\treference = this.createSingleAssistTypeReference(assistIdentifier(), positions[0]);", "+\t\tif(typeArguments[0] != null && typeArguments[0].length > 0) {", "+\t\t\treference = this.createParameterizedSingleAssistTypeReference(typeArguments[0], assistIdentifier(), positions[0]);", "+\t\t} else {", "+\t\t\treference = this.createSingleAssistTypeReference(assistIdentifier(), positions[0]);", "+\t\t}", "+\t\tTypeReference[] assistTypeArguments = typeArguments[realLength];", "-\t\tif(isParameterized) {", "-\t\t\treference = this.createParameterizedQualifiedAssistTypeReference(tokens, typeArguments, assistIdentifier(), positions);", "+\t\tif(isParameterized || (assistTypeArguments != null && assistTypeArguments.length > 0)) {", "+\t\t\treference = this.createParameterizedQualifiedAssistTypeReference(tokens, typeArguments, assistIdentifier(), assistTypeArguments, positions);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1e4ca0c02d162811bfe9b63e8ee098b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "signatureAfterChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "diff": ["+\t\t\t        \tif (originalOtherBounds != null) {", "+\t\t\t        \t\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=347145: the constituent intersecting types have changed", "+\t\t\t        \t\t   in the last round of substitution. Reevaluate the composite intersection type, as there is a possibility", "+\t\t\t        \t\t   of the intersection collapsing into one of the constituents, the other being fully subsumed.", "+\t\t\t        \t\t*/", "+\t\t\t    \t\t\tTypeBinding [] bounds = new TypeBinding[1 + substitutedOtherBounds.length];", "+\t\t\t    \t\t\tbounds[0] = substitutedBound;", "+\t\t\t    \t\t\tSystem.arraycopy(substitutedOtherBounds, 0, bounds, 1, substitutedOtherBounds.length);", "+\t\t\t    \t\t\tTypeBinding[] glb = Scope.greaterLowerBound(bounds); // re-evaluate", "+\t\t\t    \t\t\tif (glb != null && glb != bounds) {", "+\t\t\t    \t\t\t\tsubstitutedBound = glb[0];", "+\t\t    \t\t\t\t\tif (glb.length == 1) {", "+\t\t\t    \t\t\t\t\tsubstitutedOtherBounds = null;", "+\t\t\t    \t\t\t\t} else {", "+\t\t\t    \t\t\t\t\tSystem.arraycopy(glb, 1, substitutedOtherBounds = new TypeBinding[glb.length - 1], 0, glb.length - 1);", "+\t\t\t    \t\t\t\t}", "+\t\t\t    \t\t\t}", "+\t\t\t        \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa0d59fabde94148a3e5e8037a568a89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "bf4fd359c98503d2401041bd16d54a83079f69fe", "commitAfterChange": "7183d81a2458b7a9ecc9004f74bf12b52ac2eafc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void initializeRoots()", "signatureAfterChange": " \t \tpublic void initializeRoots()", "diff": ["+\t\tHashMap newProjectDependencies = null;", "+\t\t\t\tnewProjectDependencies = new HashMap();", "-\t\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "+\t\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) {", "+\t\t\t\t\t\t\tIJavaProject key = model.getJavaProject(entry.getPath().segment(0)); // TODO (jerome) reuse handle", "+\t\t\t\t\t\t\tIJavaProject[] dependents = (IJavaProject[]) newProjectDependencies.get(key);", "+\t\t\t\t\t\t\tif (dependents == null) {", "+\t\t\t\t\t\t\t\tdependents = new IJavaProject[] {project};", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tint dependentsLength = dependents.length;", "+\t\t\t\t\t\t\t\tSystem.arraycopy(dependents, 0, dependents = new IJavaProject[dependentsLength+1], 0, dependentsLength);", "+\t\t\t\t\t\t\t\tdependents[dependentsLength] = project;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tnewProjectDependencies.put(key, dependents);", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t}", "+\t\t\t\tthis.projectDependencies = newProjectDependencies;"]}], "num": 24253}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b4b6162f5ec40e7afbd09133ccb0e7d6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c91737d0ab2ed8c0acee945ca513466", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "8ccc356ea70c89dd0a418b24439637ae7cd87c8c", "commitAfterChange": "c048fce959a3a4ebd7c0630c7412f50074f43462", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, Assignment assignment, boolean isCompound)", "signatureAfterChange": " \tpublic FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, Assignment assignment, boolean isCompound)", "diff": ["+\t\tboolean isReachable = flowInfo.isReachable();", "-\t\t\t\t\tif (flowInfo.isReachable()) {", "+\t\t\t\t\tif (isReachable) {", "-\t\t\t\t\t\tif (isCompound || !localBinding.isBlankFinal()){", "+\t\t\t\t\t\t// tolerate assignment to final local in unreachable code (45674)", "+\t\t\t\t\t\tif ((isReachable && isCompound) || !localBinding.isBlankFinal()){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fc4de4f35ec9ac4d1313699b6192ae6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CommitWorkingCopyOperation.java", "commitBeforeChange": "13339b25c29cc4b9ea6b7ce4a71651aba59c8369", "commitAfterChange": "07dd8ecd589d6b51658c610216662216898a885f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\t\t", "-\t\t\tif (isPrimary || (root.isOnClasspath() && resource.isAccessible() && Util.isValidCompilationUnitName(workingCopy.getElementName()))) {", "+\t\t\tboolean isIncluded = !Util.isExcluded(workingCopy);", "+\t\t\tif (isPrimary || (root.isOnClasspath() && isIncluded && resource.isAccessible() && Util.isValidCompilationUnitName(workingCopy.getElementName()))) {", "-\t\t\t\tif (!Util.isExcluded(workingCopy) && (!isPrimary || !workingCopy.isConsistent())) {", "+\t\t\t\tif (isIncluded && (!isPrimary || !workingCopy.isConsistent())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63810375adf8caf946bb654f2129de64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "57bd7f827fb4e26e2f4fcfb421451c18e4a1d09f", "commitAfterChange": "6eea20ade3a92e767b892a10ecaadeddc013ba12", "methodNumberBeforeChange": 526, "methodNumberAfterChange": 526, "signatureBeforeChange": " public void nullityMismatchIsNull(Expression expression, TypeBinding requiredType)", "signatureAfterChange": " public void nullityMismatchIsNull(Expression expression, TypeBinding requiredType)", "diff": ["-\tif (requiredType.isTypeVariable() && !requiredType.hasNullTypeAnnotations())", "+\tboolean below18 = this.options.sourceLevel < ClassFileConstants.JDK1_8;", "+\tif (!below18 && requiredType.isTypeVariable() && !requiredType.hasNullTypeAnnotations())", "-\tif (this.options.sourceLevel < ClassFileConstants.JDK1_8) {", "+\tif (below18) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "710bf076ecba30c38297c6d7b9845888", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "  void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding)", "signatureAfterChange": "  void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding)", "diff": ["-\tif (this.environment.globalOptions.sourceLevel >= ClassFileConstants.JDK1_8) {", "-\t\t// FIXME(stephan): the following code could be used as a stop-gap measure to hook type annotation tagBits into our existing analysis:", "-//\t\tmethodBinding.tagBits |= (methodBinding.returnType.tagBits & TagBits.AnnotationNullMASK);", "-//\t\tTypeBinding[] parameters = methodBinding.parameters;", "-//\t\tint numVisibleParams = parameters.length;", "-//\t\tfor (int j = 0; j < numVisibleParams; j++) {", "-//\t\t\tif ((parameters[j].tagBits & TagBits.AnnotationNonNull) != 0) {", "-//\t\t\t\tif (methodBinding.parameterNonNullness == null)", "-//\t\t\t\t\tmethodBinding.parameterNonNullness = new Boolean[numVisibleParams];", "-//\t\t\t\tmethodBinding.parameterNonNullness[j] = Boolean.TRUE;", "-//\t\t\t\tbreak;", "-//\t\t\t} else if ((parameters[j].tagBits & TagBits.AnnotationNullable) != 0) {", "-//\t\t\t\tif (methodBinding.parameterNonNullness == null)", "-//\t\t\t\t\tmethodBinding.parameterNonNullness = new Boolean[numVisibleParams];", "-//\t\t\t\tmethodBinding.parameterNonNullness[j] = Boolean.FALSE;", "-//\t\t\t\tbreak;", "-//\t\t\t}", "-//\t\t}", "-\t\t// END", "-\t\treturn; // not using method.tagBits and parameterNonNullness when we have type annotations.", "-\t}", "+\tboolean useTypeAnnotations = this.environment.globalOptions.sourceLevel >= ClassFileConstants.JDK1_8;", "+\t// in 1.8 we only need @NonNullByDefault, see below and exit further down.", "-\t\t\tif (!explicitNullness && CharOperation.equals(typeName, nonNullAnnotationName)) {", "-\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNull;", "-\t\t\t\texplicitNullness = true;", "-\t\t\t}", "-\t\t\tif (!explicitNullness && CharOperation.equals(typeName, nullableAnnotationName)) {", "-\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNullable;", "-\t\t\t\texplicitNullness = true;", "+\t\t\tif (!useTypeAnnotations) {", "+\t\t\t\tif (!explicitNullness && CharOperation.equals(typeName, nonNullAnnotationName)) {", "+\t\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNull;", "+\t\t\t\t\texplicitNullness = true;", "+\t\t\t\t}", "+\t\t\t\tif (!explicitNullness && CharOperation.equals(typeName, nullableAnnotationName)) {", "+\t\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNullable;", "+\t\t\t\t\texplicitNullness = true;", "+\t\t\t\t}", "+\tif (useTypeAnnotations)", "+\t\treturn;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b4fc3e5770e18bd34bed8e69d2e538d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "105e13630a8bb467bc36445e7061e963f615f79b", "commitAfterChange": "c76d746cb37ee26e445adfa9082cf0532abc2efb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected boolean buildStructure(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["+\t\tboolean createAST = info instanceof ASTHolderCUInfo;", "-\t\t\tcompilationUnitDeclaration = CompilationUnitProblemFinder.process(unit, this, contents, parser, this.owner, perWorkingCopyInfo, false/*don't cleanup cu*/, pm);", "+\t\t\tcompilationUnitDeclaration = CompilationUnitProblemFinder.process(unit, this, contents, parser, this.owner, perWorkingCopyInfo, !createAST/*reset env if not creating AST*/, pm);", "-\t\tif (info instanceof ASTHolderCUInfo) {", "+\t\tif (createAST) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca17ea85dced088dfdb8e0be80482572", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "1f46f03f7f5f04f6bc966056a230ee9598644f53", "commitAfterChange": "2e03e339691d753c1881e1aa64060e3db202f70f", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tprotected boolean traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "signatureAfterChange": " \tprotected boolean traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "diff": ["+\t\t\t\tboolean isNestedRoot = rootInfo != null && childRootInfo != null;", "-\t\t\t\t\t\t&& childRootInfo == null) { // do not treat as non-java rsc in rootInfo if nested root (childRootInfo)", "+\t\t\t\t\t\t&& !isNestedRoot) { // do not treat as non-java rsc if nested root"]}], "num": 15649}
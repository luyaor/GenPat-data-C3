{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "10d679f954b77c1d70f08f9fcac5ae57", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "339401ba33e1c76d17adb49d60812621", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "51c6ca3e4dfed3078a1640da7a2ab7f26c899e0a", "commitAfterChange": "de8aa9940086fe152901aa168536f30670945804", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate int addFieldAttributes(FieldBinding fieldBinding, int fieldAttributeOffset)", "signatureAfterChange": "  \tprivate int addFieldAttributes(FieldBinding fieldBinding, int fieldAttributeOffset)", "diff": ["+\t\t\t\tList allTypeAnnotationContexts = new ArrayList();", "+\t\t\t\tint invisibleTypeAnnotationsCounter = 0;", "+\t\t\t\tint visibleTypeAnnotationsCounter = 0;", "+\t\t\t\t\tif ((this.produceAttributes & ClassFileConstants.ATTR_TYPE_ANNOTATION) != 0) {", "+\t\t\t\t\t\tif ((fieldDeclaration.bits & ASTNode.HasTypeAnnotations) != 0) {", "+\t\t\t\t\t\t\tfieldDeclaration.getAllAnnotationContexts(AnnotationTargetTypeConstants.FIELD, allTypeAnnotationContexts);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tTypeReference fieldType = fieldDeclaration.type;", "+\t\t\t\tif (fieldType != null ", "+\t\t\t\t\t\t&& ((this.produceAttributes & ClassFileConstants.ATTR_TYPE_ANNOTATION) != 0)", "+\t\t\t\t\t\t&& ((fieldType.bits & ASTNode.HasTypeAnnotations) != 0)) {", "+\t\t\t\t\tfieldType.getAllAnnotationContexts(AnnotationTargetTypeConstants.FIELD, allTypeAnnotationContexts);", "+\t\t\t\t}", "+\t\t\t\tint size = allTypeAnnotationContexts.size();", "+\t\t\t\tif (size != 0) {", "+\t\t\t\t\tAnnotationContext[] allTypeAnnotationContextsArray = new AnnotationContext[size];", "+\t\t\t\t\tallTypeAnnotationContexts.toArray(allTypeAnnotationContextsArray);", "+\t\t\t\t\tfor (int i = 0, max = allTypeAnnotationContextsArray.length; i < max; i++) {", "+\t\t\t\t\t\tAnnotationContext annotationContext = allTypeAnnotationContextsArray[i];", "+\t\t\t\t\t\tif ((annotationContext.visibility & AnnotationContext.INVISIBLE) != 0) {", "+\t\t\t\t\t\t\tinvisibleTypeAnnotationsCounter++;", "+\t\t\t\t\t\t\tallTypeAnnotationContexts.add(annotationContext);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tvisibleTypeAnnotationsCounter++;", "+\t\t\t\t\t\t\tallTypeAnnotationContexts.add(annotationContext);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tattributesNumber += generateRuntimeTypeAnnotations(", "+\t\t\t\t\t\t\tallTypeAnnotationContextsArray,", "+\t\t\t\t\t\t\tvisibleTypeAnnotationsCounter,", "+\t\t\t\t\t\t\tinvisibleTypeAnnotationsCounter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37fb2b849eb49d008e49df7e04e2e859", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/FieldInfo.java", "commitBeforeChange": "21d3c1ac784a9ef78a64389e4df817ec0452ce19", "commitAfterChange": "2c4adf2736a9a7ce066a42070aabd3f4b1ddf5af", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static FieldInfo createField(byte classFileBytes[], int offsets[], int offset)", "signatureAfterChange": "  public static FieldInfo createField(byte classFileBytes[], int offsets[], int offset)", "diff": ["-\tAnnotationInfo[] annotations = fieldInfo.readAttributes();", "-\tif (annotations == null)", "-\t\treturn fieldInfo;", "-\treturn new FieldInfoWithAnnotation(fieldInfo, annotations);", "+\t", "+\tint attributesCount = fieldInfo.u2At(6);", "+\tint readOffset = 8;", "+\tAnnotationInfo[] annotations = null;", "+\tTypeAnnotationInfo[] typeAnnotations = null;", "+\tfor (int i = 0; i < attributesCount; i++) {", "+\t\t// check the name of each attribute", "+\t\tint utf8Offset = fieldInfo.constantPoolOffsets[fieldInfo.u2At(readOffset)] - fieldInfo.structOffset;", "+\t\tchar[] attributeName = fieldInfo.utf8At(utf8Offset + 3, fieldInfo.u2At(utf8Offset + 1));", "+\t\tif (attributeName.length > 0) {", "+\t\t\tswitch(attributeName[0]) {", "+\t\t\t\tcase 'S' :", "+\t\t\t\t\tif (CharOperation.equals(AttributeNamesConstants.SignatureName, attributeName))", "+\t\t\t\t\t\tfieldInfo.signatureUtf8Offset = fieldInfo.constantPoolOffsets[fieldInfo.u2At(readOffset + 6)] - fieldInfo.structOffset;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 'R' :", "+\t\t\t\t\tAnnotationInfo[] decodedAnnotations = null;", "+\t\t\t\t\tTypeAnnotationInfo[] decodedTypeAnnotations = null;", "+\t\t\t\t\tif (CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeVisibleAnnotationsName)) {", "+\t\t\t\t\t\tdecodedAnnotations = fieldInfo.decodeAnnotations(readOffset, true);", "+\t\t\t\t\t} else if (CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeInvisibleAnnotationsName)) {", "+\t\t\t\t\t\tdecodedAnnotations = fieldInfo.decodeAnnotations(readOffset, false);", "+\t\t\t\t\t} else if (CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeVisibleTypeAnnotationsName)) {", "+\t\t\t\t\t\tdecodedTypeAnnotations = fieldInfo.decodeTypeAnnotations(readOffset, true);", "+\t\t\t\t\t} else if (CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeInvisibleTypeAnnotationsName)) {", "+\t\t\t\t\t\tdecodedTypeAnnotations = fieldInfo.decodeTypeAnnotations(readOffset, false);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (decodedAnnotations != null) {", "+\t\t\t\t\t\tif (annotations == null) {", "+\t\t\t\t\t\t\tannotations = decodedAnnotations;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint length = annotations.length;", "+\t\t\t\t\t\t\tAnnotationInfo[] combined = new AnnotationInfo[length + decodedAnnotations.length];", "+\t\t\t\t\t\t\tSystem.arraycopy(annotations, 0, combined, 0, length);", "+\t\t\t\t\t\t\tSystem.arraycopy(decodedAnnotations, 0, combined, length, decodedAnnotations.length);", "+\t\t\t\t\t\t\tannotations = combined;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (decodedTypeAnnotations != null) {", "+\t\t\t\t\t\tif (typeAnnotations == null) {", "+\t\t\t\t\t\t\ttypeAnnotations = decodedTypeAnnotations;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint length = typeAnnotations.length;", "+\t\t\t\t\t\t\tTypeAnnotationInfo[] combined = new TypeAnnotationInfo[length + decodedTypeAnnotations.length];", "+\t\t\t\t\t\t\tSystem.arraycopy(typeAnnotations, 0, combined, 0, length);", "+\t\t\t\t\t\t\tSystem.arraycopy(decodedTypeAnnotations, 0, combined, length, decodedTypeAnnotations.length);", "+\t\t\t\t\t\t\ttypeAnnotations = combined;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treadOffset += (6 + fieldInfo.u4At(readOffset + 2));", "+\t}", "+\tfieldInfo.attributeBytes = readOffset;", "+\t", "+\tif (typeAnnotations != null)", "+\t\treturn new FieldInfoWithTypeAnnotation(fieldInfo, annotations, typeAnnotations);", "+\tif (annotations != null)", "+\t\treturn new FieldInfoWithAnnotation(fieldInfo, annotations);", "+\treturn fieldInfo;"]}], "num": 61984}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee064bc32bbb8d9c99047afe4e5c4796", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b45bdac012eb41c9ab6524094bac6d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "7ba9ff29fe6b05ec0a2f58eaa1f5d3e68bb11101", "commitAfterChange": "427a01e331e57852efc472cca3a8360bd121fda9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "diff": ["+\tTypeAnnotationWalker walker = (sourceLevel >= ClassFileConstants.JDK1_8 && this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) ?", "+\t\t\tTypeAnnotationWalker.create(method) : TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER;", "-\t\t\t\t\tparameters[i - startIndex] = this.environment.getTypeFromSignature(methodDescriptor, index, end, false, this, missingTypeNames);", "+\t\t\t\t\tparameters[i - startIndex] = this.environment.getTypeFromSignature(methodDescriptor, index, end, false, this, missingTypeNames, walker.toMethodParameter((short)i));", "-\t\t\treturnType = this.environment.getTypeFromSignature(methodDescriptor, index + 1, -1, false, this, missingTypeNames);   // index is currently pointing at the ')'", "+\t\t\treturnType = this.environment.getTypeFromSignature(methodDescriptor, index + 1, -1, false, this, missingTypeNames, walker.toMethodReturn());   // index is currently pointing at the ')'", "-\t\t\ttypeVars = createTypeVariables(wrapper, false, missingTypeNames);", "+\t\t\ttypeVars = createTypeVariables(wrapper, false, missingTypeNames, walker, false/*class*/);", "+// \t\tNote(stephan): currently the compiler is not interested in retrieving receiver annotations, here is how we would do it:", "+//\t\tIBinaryAnnotation[] receiverAnnotations = walker.toReceiver().getAnnotationsAtCursor();", "+\t\t", "+\t\t\t\tshort rank = 0;", "-\t\t\t\t\ttypes.add(this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames));", "+\t\t\t\t\ttypes.add(this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames, walker.toMethodParameter(rank++)));", "-\t\treturnType = this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames);", "+\t\treturnType = this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames, walker.toMethodReturn());", "+\t\t\tint excRank = 0;", "-\t\t\t\ttypes.add(this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames));", "+\t\t\t\ttypes.add(this.environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames,", "+\t\t\t\t\twalker.toThrows(excRank++)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d50553fab3cd59fd68fb74ef30d6fff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " private MethodBinding createMethod(IBinaryMethod method, long sourceLevel)", "signatureAfterChange": " private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "diff": ["-private MethodBinding createMethod(IBinaryMethod method, long sourceLevel) {", "+private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames) {", "-\t\t\t\t\tparameters[i - startIndex] = environment.getTypeFromSignature(methodDescriptor, index, end, false, this);", "+\t\t\t\t\tparameters[i - startIndex] = environment.getTypeFromSignature(methodDescriptor, index, end, false, this, missingTypeNames);", "-\t\t\t\t\t\tparamAnnotations[i - startIndex] = createAnnotations(method.getParameterAnnotations(i), this.environment);", "+\t\t\t\t\t\tparamAnnotations[i - startIndex] = createAnnotations(method.getParameterAnnotations(i), this.environment, missingTypeNames);", "-\t\t\t\t\texceptions[i] = environment.getTypeFromConstantPoolName(exceptionTypes[i], 0, -1, false);", "+\t\t\t\t\texceptions[i] = environment.getTypeFromConstantPoolName(exceptionTypes[i], 0, -1, false, missingTypeNames);", "-\t\t\treturnType = environment.getTypeFromSignature(methodDescriptor, index + 1, -1, false, this);   // index is currently pointing at the ')'", "+\t\t\treturnType = environment.getTypeFromSignature(methodDescriptor, index + 1, -1, false, this, missingTypeNames);   // index is currently pointing at the ')'", "-\t\t\ttypeVars = createTypeVariables(wrapper, false);", "+\t\t\ttypeVars = createTypeVariables(wrapper, false, missingTypeNames);", "-\t\t\t\t\ttypes.add(environment.getTypeFromTypeSignature(wrapper, typeVars, this));", "+\t\t\t\t\ttypes.add(environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames));", "-\t\t\t\t\t\tparamAnnotations[i] = createAnnotations(method.getParameterAnnotations(i), this.environment);", "+\t\t\t\t\t\tparamAnnotations[i] = createAnnotations(method.getParameterAnnotations(i), this.environment, missingTypeNames);", "-\t\treturnType = environment.getTypeFromTypeSignature(wrapper, typeVars, this);", "+\t\treturnType = environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames);", "-\t\t\t\ttypes.add(environment.getTypeFromTypeSignature(wrapper, typeVars, this));", "+\t\t\t\ttypes.add(environment.getTypeFromTypeSignature(wrapper, typeVars, this, missingTypeNames));", "-\t\t\t\t\t\texceptions[i] = environment.getTypeFromConstantPoolName(exceptionTypes[i], 0, -1, false);", "+\t\t\t\t\t\texceptions[i] = environment.getTypeFromConstantPoolName(exceptionTypes[i], 0, -1, false, missingTypeNames);", "-\t\t\tcreateAnnotations(method.getAnnotations(), this.environment),", "+\t\t\tcreateAnnotations(method.getAnnotations(), this.environment, missingTypeNames),", "-\t\t\tisAnnotationType() ? convertMemberValue(method.getDefaultValue(), this.environment) : null);", "+\t\t\tisAnnotationType() ? convertMemberValue(method.getDefaultValue(), this.environment, missingTypeNames) : null);"]}], "num": 22755}
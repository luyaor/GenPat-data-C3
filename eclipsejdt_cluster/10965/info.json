{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a71cedd3191e156ffb3551ed6bbc646", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3297567e3a02d4de6a1d207f062a0089", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "c2258f3a34b02ad7356115c6022b2790f990bcd4", "commitAfterChange": "b114726e6672732b572036987107a1d4de90980d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void evaluateWithExpectedDisplayString(char[] codeSnippet, char[] displayString)", "signatureAfterChange": " \tpublic void evaluateWithExpectedDisplayString(Map compilerOptions, char[] codeSnippet, char[] displayString)", "diff": ["+\tpublic void evaluateWithExpectedDisplayString(Map compilerOptions, char[] codeSnippet, char[] displayString) {", "+\t\tRequestor requestor = new Requestor();", "+\t\ttry {", "+\t\t\tcontext.evaluate(codeSnippet, getEnv(), compilerOptions, requestor, getProblemFactory());", "+\t\t} catch (InstallException e) {", "+\t\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "+\t\t}", "+\t\tif (requestor.resultIndex != 0) {", "+\t\t\tfor (int i = 0; i < requestor.resultIndex; i++) {", "+\t\t\t\tSystem.out.println(\"unexpected result[\" + i + \"]: \" + requestor.results[i]);", "+\t\t\t}", "+\t\t}", "+\t\tassertTrue(\"Unexpected result\", requestor.resultIndex == 0);", "+\t\tEvaluationResult result = requestor.results[0];", "+\t\tassertTrue(\"Has problem\", !result.hasProblems());", "+\t\tassertTrue(\"Empty problem list\", result.getProblems().length == 0);", "+\t\tif (displayString == null) {", "+\t\t\tassertTrue(\"Has value\", !result.hasValue());", "+\t\t} else {", "+\t\t\tassertTrue(\"Has value\", result.hasValue());", "+\t\t\tassertEquals(\"Evaluation type\", EvaluationResult.T_CODE_SNIPPET, result.getEvaluationType());", "+\t\t\t//assertEquals(\"Evaluation id\", codeSnippet, result.getEvaluationID());", "+\t\t\tassertEquals(\"Value display string\", displayString, result.getValueDisplayString());", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3574a821fb81b526fb885d5cbf5a3b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 25, "signatureBeforeChange": " protected void installVariables(final int expectedNumber)", "signatureAfterChange": " \tprotected void installVariables(final int expectedNumber)", "diff": ["- */", "-protected void installVariables(final int expectedNumber) {", "-\tclass InstallRequestor extends Requestor {", "-\t\tint count = 0;", "-\t\tpublic void acceptResult(EvaluationResult result) {", "-\t\t\tassertTrue(\"Has problems\", !result.hasProblems());", "-\t\t\tassertTrue(\"Has value\", result.hasValue());", "-\t\t\tthis.count++;", "-\tInstallRequestor installRequestor = new InstallRequestor();", "-\ttry {", "-\t\tcontext.evaluateVariables(getEnv(), getOptions(), installRequestor, getProblemFactory());", "-\t} catch (InstallException e) {", "-\t\tassertTrue(\"Target exception: \" + e.getMessage(), false);", "-\t}", "-\tassertEquals(\"Number of installed variables\", expectedNumber, installRequestor.count);", "-}", "+\t */", "+\tprotected void installVariables(final int expectedNumber) {", "+\t\tclass InstallRequestor extends Requestor {", "+\t\t\tint count = 0;", "+\t\t\tpublic void acceptResult(EvaluationResult result) {", "+\t\t\t\tassertTrue(\"Has problems\", !result.hasProblems());", "+\t\t\t\tassertTrue(\"Has value\", result.hasValue());", "+\t\t\t\tthis.count++;", "+\t\t\t}", "+\t\t}", "+", "+\t\tInstallRequestor installRequestor = new InstallRequestor();", "+\t\ttry {", "+\t\t\tcontext.evaluateVariables(getEnv(), getCompilerOptions(), installRequestor, getProblemFactory());", "+\t\t} catch (InstallException e) {", "+\t\t\tassertTrue(\"Target exception: \" + e.getMessage(), false);", "+\t\t}", "+\t\tassertEquals(\"Number of installed variables\", expectedNumber, installRequestor.count);", "+\t}"]}], "num": 10965}
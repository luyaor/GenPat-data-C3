{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "011f09f32705735bd6b8cd5e82e28d26", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51b25283ed818d433a1b9ab7f6ddeb07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 109, "signatureBeforeChange": " \tpublic void setOptions(Map newOptions)", "signatureAfterChange": " \tpublic void setOptions(Map newOptions)", "diff": ["-\t\tPreferences preferences = getPreferences();", "-\t\tif (newOptions != null){", "-\t\t\tIterator keys = newOptions.keySet().iterator();", "-\t\t\twhile (keys.hasNext()){", "-\t\t\t\tString key = (String)keys.next();", "-\t\t\t\tif (!JavaModelManager.getJavaModelManager().optionNames.contains(key)) continue; // unrecognized option", "-\t\t\t\t// no filtering for encoding (custom encoding for project is allowed)", "-\t\t\t\tString value = (String)newOptions.get(key);", "-\t\t\t\tpreferences.setDefault(key, CUSTOM_DEFAULT_OPTION_VALUE); // empty string isn't the default (26251)", "-\t\t\t\tpreferences.setValue(key, value);", "+\t\tIEclipsePreferences projectPreferences = getEclipsePreferences();", "+\t\ttry {", "+\t\t\tif (newOptions == null){", "+\t\t\t\tprojectPreferences.clear();", "+\t\t\t} else {", "+\t\t\t\tIterator keys = newOptions.keySet().iterator();", "+\t\t\t\twhile (keys.hasNext()){", "+\t\t\t\t\tString key = (String)keys.next();", "+\t\t\t\t\tif (!JavaModelManager.getJavaModelManager().optionNames.contains(key)) continue; // unrecognized option", "+\t\t\t\t\t// no filtering for encoding (custom encoding for project is allowed)", "+\t\t\t\t\tString value = (String)newOptions.get(key);", "+\t\t\t\t\tprojectPreferences.put(key, value);", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t// reset to default all options not in new map", "+\t\t\t\t// @see https://bugs.eclipse.org/bugs/show_bug.cgi?id=26255", "+\t\t\t\t// @see https://bugs.eclipse.org/bugs/show_bug.cgi?id=49691", "+\t\t\t\tString[] pNames = projectPreferences.keys();", "+\t\t\t\tint ln = pNames.length;", "+\t\t\t\tfor (int i=0; i<ln; i++) {", "+\t\t\t\t\tString key = pNames[i];", "+\t\t\t\t\tif (!newOptions.containsKey(key)) {", "+\t\t\t\t\t\tprojectPreferences.remove(key); // old preferences => remove from preferences table", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t}", "-\t\t\t", "-\t\t// reset to default all options not in new map", "-\t\t// @see https://bugs.eclipse.org/bugs/show_bug.cgi?id=26255", "-\t\t// @see https://bugs.eclipse.org/bugs/show_bug.cgi?id=49691", "-\t\tString[] pNames = preferences.propertyNames();", "-\t\tint ln = pNames.length;", "-\t\tfor (int i=0; i<ln; i++) {", "-\t\t\tString key = pNames[i];", "-\t\t\tif (newOptions == null || !newOptions.containsKey(key)) {", "-\t\t\t\tpreferences.setToDefault(key); // set default => remove from preferences table", "-\t\t\t}", "-\t\t}", "-\t\t// persist options", "-\t\tsavePreferences(preferences);\t", "+\t\t\t// persist options", "+\t\t\tprojectPreferences.flush();", "+\t\t\tif (newOptions == null) {", "+\t\t\t\t// Uncache preferences", "+\t\t\t\tJavaModelManager.getJavaModelManager().resetProjectPreferences(this);", "+\t\t\t}", "+\t\t} catch (BackingStoreException e) {", "+\t\t\t// problem with pref store - quietly ignore", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67890a312071d25d0116529400b6fcd2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic static void setOptions(Hashtable newOptions)", "signatureAfterChange": " \tpublic static void setOptions(Hashtable newOptions)", "diff": ["-\t\t// see #initializeDefaultPluginPreferences() for changing default settings", "-\t\tPreferences preferences = getPlugin().getPluginPreferences();", "+\t\ttry {", "+\t\t\tIEclipsePreferences defaultPreferences = getDefaultPreferences();", "+\t\t\tIEclipsePreferences instancePreferences = getInstancePreferences();", "-\t\tif (newOptions == null){", "-\t\t\tnewOptions = JavaCore.getDefaultOptions();", "-\t\t}", "-\t\tEnumeration keys = newOptions.keys();", "-\t\twhile (keys.hasMoreElements()){", "-\t\t\tString key = (String)keys.nextElement();", "-\t\t\tif (!JavaModelManager.getJavaModelManager().optionNames.contains(key)) continue; // unrecognized option", "-\t\t\tif (key.equals(CORE_ENCODING)) continue; // skipped, contributed by resource prefs", "-\t\t\tString value = (String)newOptions.get(key);", "-\t\t\tpreferences.setValue(key, value);", "-\t\t}", "+\t\t\tif (newOptions == null){", "+\t\t\t\tinstancePreferences.clear();", "+\t\t\t} else {", "+\t\t\t\tEnumeration keys = newOptions.keys();", "+\t\t\t\twhile (keys.hasMoreElements()){", "+\t\t\t\t\tString key = (String)keys.nextElement();", "+\t\t\t\t\tif (!JavaModelManager.getJavaModelManager().optionNames.contains(key)) continue; // unrecognized option", "+\t\t\t\t\tif (key.equals(CORE_ENCODING)) continue; // skipped, contributed by resource prefs", "+\t\t\t\t\tString value = (String)newOptions.get(key);", "+\t\t\t\t\tString defaultValue = defaultPreferences.get(key, null);", "+\t\t\t\t\tif (defaultValue != null && defaultValue.equals(value)) {", "+\t\t\t\t\t\tinstancePreferences.remove(key);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tinstancePreferences.put(key, value);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\t\t// persist options", "-\t\tgetPlugin().savePluginPreferences();", "+\t\t\t// persist options", "+\t\t\tinstancePreferences.flush();", "+\t\t} catch (BackingStoreException e) {", "+\t\t\t// fails silently", "+\t\t}"]}], "num": 27988}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27f523984a3db274606be58903e532e3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60ab97f456209b9906ee2a0b9c01169e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "b6af6dcd9d59b97edc4052f4f7dbcdc0b2982ddb", "commitAfterChange": "9d7258bf3ad30f4e44cac31c46a6f0a185b84bcd", "methodNumberBeforeChange": 296, "methodNumberAfterChange": 296, "signatureBeforeChange": " public void recordPositionsFrom(int startPC, int sourcePos)", "signatureAfterChange": " public void recordPositionsFrom(int startPC, int sourcePos)", "diff": ["-\tint newLine = ClassFile.searchLineNumber(lineSeparatorPositions, sourcePos);", "+\tint lineNumber = ClassFile.searchLineNumber(lineSeparatorPositions, sourcePos);", "-\t\tif (pcToSourceMap[pcToSourceMapSize - 1] != newLine) {", "+\t\tif (pcToSourceMap[pcToSourceMapSize - 1] != lineNumber) {", "-\t\t\t\t\tint existingEntryIndex = indexOfSameLineEntrySincePC(startPC, newLine); // index for PC", "+\t\t\t\t\tint existingEntryIndex = indexOfSameLineEntrySincePC(startPC, lineNumber); // index for PC", "-\t\t\t\t\t} else if (insertionIndex < 1 || pcToSourceMap[insertionIndex - 1] != newLine) {", "+\t\t\t\t\t} else if (insertionIndex < 1 || pcToSourceMap[insertionIndex - 1] != lineNumber) {", "-\t\t\t\t\t\tpcToSourceMap[insertionIndex] = newLine;", "+\t\t\t\t\t\tpcToSourceMap[insertionIndex] = lineNumber;", "-\t\t\t\t\tpcToSourceMap[pcToSourceMapSize++] = newLine;", "+\t\t\t\t\tpcToSourceMap[pcToSourceMapSize++] = lineNumber;", "-\t\t\t\tpcToSourceMap[pcToSourceMapSize++] = newLine;", "+\t\t\t\tpcToSourceMap[pcToSourceMapSize++] = lineNumber;", "-\t\t\t\t\tif (!((insertionIndex > 1) && (pcToSourceMap[insertionIndex - 1] == newLine))) {", "+\t\t\t\t\tif (!((insertionIndex > 1) && (pcToSourceMap[insertionIndex - 1] == lineNumber))) {", "-\t\t\t\t\t\t\tpcToSourceMap[insertionIndex] = newLine;\t\t\t\t\t\t", "+\t\t\t\t\t\t\tpcToSourceMap[insertionIndex] = lineNumber;\t\t\t\t\t\t", "-\t\tpcToSourceMap[pcToSourceMapSize++] = newLine;", "+\t\tpcToSourceMap[pcToSourceMapSize++] = lineNumber;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "659570bacbd809a8b47df88dce06b719", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "48d8b25fe48652384eaea784beaca4f2d5a7f1f1", "commitAfterChange": "d2bbe758aa36ed261c3b0452e9226ce41cb1f1bd", "methodNumberBeforeChange": 265, "methodNumberAfterChange": 265, "signatureBeforeChange": " public void recordPositionsFrom(int startPC, int sourcePos)", "signatureAfterChange": " public void recordPositionsFrom(int startPC, int sourcePos)", "diff": ["-\t\t\t\t\tif ((pcToSourceMapSize > 4) && (pcToSourceMap[pcToSourceMapSize - 4] > startPC)) {", "-\t\t\t\t\t\tSystem.arraycopy(pcToSourceMap, insertionIndex, pcToSourceMap, insertionIndex + 2, pcToSourceMapSize - 2 - insertionIndex);", "-\t\t\t\t\t\tpcToSourceMap[insertionIndex++] = startPC;", "-\t\t\t\t\t\tpcToSourceMap[insertionIndex] = newLine;\t\t\t\t\t\t", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tpcToSourceMap[pcToSourceMapSize - 2] = startPC;", "+\t\t\t\t\t/* First we need to check if at the insertion position there is not an existing entry", "+\t\t\t\t\t * that includes the one we want to insert. This is the case if pcToSourceMap[insertionIndex - 1] == newLine.", "+\t\t\t\t\t * In this case we don't want to change the table. If not, we want to insert a new entry. Prior to insertion", "+\t\t\t\t\t * we want to check if it is worth doing an arraycopy. If not we simply update the recorded pc.", "+\t\t\t\t\t */", "+\t\t\t\t\tif (!((insertionIndex > 1) && (pcToSourceMap[insertionIndex - 1] == newLine))) {", "+\t\t\t\t\t\tif ((pcToSourceMapSize > 4) && (pcToSourceMap[pcToSourceMapSize - 4] > startPC)) {", "+\t\t\t\t\t\t\tSystem.arraycopy(pcToSourceMap, insertionIndex, pcToSourceMap, insertionIndex + 2, pcToSourceMapSize - 2 - insertionIndex);", "+\t\t\t\t\t\t\tpcToSourceMap[insertionIndex++] = startPC;", "+\t\t\t\t\t\t\tpcToSourceMap[insertionIndex] = newLine;\t\t\t\t\t\t", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tpcToSourceMap[pcToSourceMapSize - 2] = startPC;", "+\t\t\t\t\t\t}"]}], "num": 67526}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be0413db6d583e7b39eb2bf6fe0b931a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ffc3a8cd7225f9f3c17ffafb4a0168a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 24, "signatureBeforeChange": " \t \tprivate static ICompilationUnit[] createICUsFrom(final IFile[] files)", "signatureAfterChange": " \t \tprivate CompilationUnit[] createASTsFrom(IFile[] files)", "diff": ["+\t", "+\tprivate CompilationUnit[] createASTsFrom(IFile[] files){", "+\t\tif( files == null || files.length == 0 )", "+\t\t\treturn NO_AST_UNITs;", "+\t\tfinal int len = files.length;", "+\t\tfinal ICompilationUnit[] units = new ICompilationUnit[len];", "+\t\tfor( int i=0; i<len; i++ ){", "+\t\t\t// may return null if creation failed. this may occur if", "+\t\t\t// the file does not exists.", "+\t\t\tunits[i] = JavaCore.createCompilationUnitFrom(files[i]);", "+\t\t}", "+\t\treturn createASTs(_javaProject, units);", "+\t}", "-\tprivate static ICompilationUnit[] createICUsFrom(final IFile[] files){", "-\t\tfinal int len = files.length;", "-\t\tif( len == 0 )", "-\t\t\treturn NO_UNIT;", "-\t\tfinal ICompilationUnit[] units = new ICompilationUnit[len];", "-\t\tfor( int i=0; i<len; i++ ){", "-\t\t\tunits[i] = JavaCore.createCompilationUnitFrom(files[i]);", "-\t\t}", "-\t\treturn units;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98577f125b6d7873e6863dff72f1a5c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "30d1d48bfa7e296fbeab8a3626c28e1130f44500", "commitAfterChange": "8f838ccefdcacadaac662cb88a80fdb1a3657843", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, int nullStatus, boolean strict)", "signatureAfterChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, int nullStatus, CheckMode mode)", "diff": ["-\tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, int nullStatus, boolean strict) {", "+\tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, int nullStatus, CheckMode mode) {", "-\t\t\t\t\t\t\tseverity = Math.max(severity, computeNullProblemSeverity(requiredBits, providedBits, nullStatus, strict));", "+\t\t\t\t\t\t\tseverity = Math.max(severity, computeNullProblemSeverity(requiredBits, providedBits, nullStatus, mode == CheckMode.OVERRIDE));", "-\t\t\t\tseverity = computeNullProblemSeverity(requiredBits, providedBits, nullStatus, strict && nullStatus == -1);", "+\t\t\t\tseverity = computeNullProblemSeverity(requiredBits, providedBits, nullStatus, mode == CheckMode.OVERRIDE && nullStatus == -1);", "-\t\t\t\t\t\t\tNullAnnotationMatching status = analyse(requiredArguments[i], providedArguments[i], providedArgSubstitute, -1, strict);", "+\t\t\t\t\t\t\tNullAnnotationMatching status = analyse(requiredArguments[i], providedArguments[i], providedArgSubstitute, -1, mode);", "-\t\t\t\t\tNullAnnotationMatching status = analyse(requiredEnclosing, providedEnclosing, providedEnclSubstitute, -1, strict);", "+\t\t\t\t\tNullAnnotationMatching status = analyse(requiredEnclosing, providedEnclosing, providedEnclSubstitute, -1, mode);"]}], "num": 14295}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c60c2f79901b68f2e2075470417d64a0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f844d9f643eced1ed0c4f069306bd6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ClasspathSourceDirectory.java", "commitBeforeChange": "fe905e29a608f61f2afe181f4c1e4e27bb2b95dc", "commitAfterChange": "53a7cfa9bf2a3a1ade921d716dbdc58a4bfc35d4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public NameEnvironmentAnswer findClass(String sourceFileName, String qualifiedPackageName, String qualifiedSourceFileName)", "signatureAfterChange": "   public NameEnvironmentAnswer findClass(String sourceFileWithoutExtension, String qualifiedPackageName, String qualifiedSourceFileWithoutExtension)", "diff": ["-public NameEnvironmentAnswer findClass(String sourceFileName, String qualifiedPackageName, String qualifiedSourceFileName) {", "-\tif (!doesFileExist(sourceFileName, qualifiedPackageName)) return null; // most common case", "-", "-\tString fullSourcePath = this.sourceLocation + qualifiedSourceFileName;", "-\tIPath path = new Path(qualifiedSourceFileName);", "-\tIFile file = this.sourceFolder.getFile(path);", "-\tString fileEncoding = this.encoding;", "-\ttry {", "-\t\tfileEncoding = file.getCharset();", "+public NameEnvironmentAnswer findClass(String sourceFileWithoutExtension, String qualifiedPackageName, String qualifiedSourceFileWithoutExtension) {", "+\t", "+\tfor (int i = 0, length = Util.JAVA_LIKE_EXTENSIONS.length; i < length; i++) {", "+\t\tString extension = new String(Util.JAVA_LIKE_EXTENSIONS[i]);", "+\t\tString sourceFileName = sourceFileWithoutExtension + extension;", "+\t\tif (!doesFileExist(sourceFileName, qualifiedPackageName)) continue; // most common case", "+\t", "+\t\tString qualifiedSourceFileName = qualifiedSourceFileWithoutExtension + extension;", "+\t\tString fullSourcePath = this.sourceLocation + qualifiedSourceFileName;", "+\t\tIPath path = new Path(qualifiedSourceFileName);", "+\t\tIFile file = this.sourceFolder.getFile(path);", "+\t\tString fileEncoding = this.encoding;", "+\t\ttry {", "+\t\t\tfileEncoding = file.getCharset();", "+\t\t}", "+\t\tcatch (CoreException ce) {", "+\t\t\t// let use default encoding", "+\t\t}", "+\t\treturn new NameEnvironmentAnswer(new CompilationUnit(null, fullSourcePath, fileEncoding));", "-\tcatch (CoreException ce) {", "-\t\t// let use default encoding", "-\t}", "-\treturn new NameEnvironmentAnswer(new CompilationUnit(null, fullSourcePath, fileEncoding));", "+\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef13e78f85d3cf072dfd9d341e862593", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tif (this.annotationsOnDimensions != null) {", "+\t\t\tfor (int i = 0, max = this.annotationsOnDimensions.length; i < max; i++) {", "+\t\t\t\tAnnotation[] annotations = this.annotationsOnDimensions[i];", "+\t\t\t\tresolveAnnotations(scope, annotations, new Annotation.TypeUseBinding(Binding.TYPE_USE));", "+\t\t\t}", "+\t\t}"]}], "num": 68291}
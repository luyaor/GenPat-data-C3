{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "10e4e3f59cc895bbdb0c6c6bfc97d5bd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae5aaa279e34ba841709d7f0c0aa1cff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 43, "signatureBeforeChange": " protected void consumeCatchFormalParameter(boolean isVarArgs)", "signatureAfterChange": " protected void consumeCatchFormalParameter()", "diff": ["+}", "+protected void consumeCatchFormalParameter() {", "+\tif (this.indexOfAssistIdentifier() < 0) {", "+\t\tsuper.consumeCatchFormalParameter();", "+\t\tif (this.pendingAnnotation != null) {", "+\t\t\tthis.pendingAnnotation.potentialAnnotatedNode = this.astStack[this.astPtr];", "+\t\t\tthis.pendingAnnotation = null;", "+\t\t}", "+\t} else {", "+\t\tthis.identifierLengthPtr--;", "+\t\tchar[] identifierName = this.identifierStack[this.identifierPtr];", "+\t\tlong namePositions = this.identifierPositionStack[this.identifierPtr--];", "+\t\tthis.intPtr--; // dimension from the variabledeclaratorid", "+\t\tTypeReference type = (TypeReference) this.astStack[this.astPtr--];", "+\t\tthis.intPtr -= 2;", "+\t\tCompletionOnArgumentName arg =", "+\t\t\tnew CompletionOnArgumentName(", "+\t\t\t\tidentifierName,", "+\t\t\t\tnamePositions,", "+\t\t\t\ttype,", "+\t\t\t\tthis.intStack[this.intPtr + 1] & ~ClassFileConstants.AccDeprecated); // modifiers", "+\t\targ.bits &= ~ASTNode.IsArgument;", "+\t\t// consume annotations", "+\t\tint length;", "+\t\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tthis.expressionStack,", "+\t\t\t\t(this.expressionPtr -= length) + 1,", "+\t\t\t\targ.annotations = new Annotation[length],", "+\t\t\t\t0,", "+\t\t\t\tlength);", "+\t\t}", "+", "+\t\targ.isCatchArgument = topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_BETWEEN_CATCH_AND_RIGHT_PAREN;", "+\t\tpushOnAstStack(arg);", "+", "+\t\tthis.assistNode = arg;", "+\t\tthis.lastCheckPoint = (int) namePositions;", "+\t\tthis.isOrphanCompletionNode = true;", "+", "+\t\t/* if incomplete method header, listLength counter will not have been reset,", "+\t\t\tindicating that some arguments are available on the stack */", "+\t\tthis.listLength++;", "+\t}", "-protected void consumeCatchFormalParameter(boolean isVarArgs) {", "-\tif (this.indexOfAssistIdentifier() < 0) {", "-\t\tsuper.consumeCatchFormalParameter(isVarArgs);", "-\t\tif (this.pendingAnnotation != null) {", "-\t\t\tthis.pendingAnnotation.potentialAnnotatedNode = this.astStack[this.astPtr];", "-\t\t\tthis.pendingAnnotation = null;", "-\t\t}", "-\t} else {", "-", "-\t\tthis.identifierLengthPtr--;", "-\t\tchar[] identifierName = this.identifierStack[this.identifierPtr];", "-\t\tlong namePositions = this.identifierPositionStack[this.identifierPtr--];", "-\t\tint extendedDimensions = this.intStack[this.intPtr--];", "-\t\tint endOfEllipsis = 0;", "-\t\tif (isVarArgs) {", "-\t\t\tendOfEllipsis = this.intStack[this.intPtr--];", "-\t\t}", "-\t\tint firstDimensions = this.intStack[this.intPtr--];", "-\t\tfinal int typeDimensions = firstDimensions + extendedDimensions;", "-\t\tTypeReference type = getTypeReference(typeDimensions);", "-\t\tif (isVarArgs) {", "-\t\t\ttype = copyDims(type, typeDimensions + 1);", "-\t\t\tif (extendedDimensions == 0) {", "-\t\t\t\ttype.sourceEnd = endOfEllipsis;", "-\t\t\t}", "-\t\t\ttype.bits |= ASTNode.IsVarArgs; // set isVarArgs", "-\t\t}", "-\t\tthis.intPtr -= 2;", "-\t\tCompletionOnArgumentName arg =", "-\t\t\tnew CompletionOnArgumentName(", "-\t\t\t\tidentifierName,", "-\t\t\t\tnamePositions,", "-\t\t\t\ttype,", "-\t\t\t\tthis.intStack[this.intPtr + 1] & ~ClassFileConstants.AccDeprecated); // modifiers", "-\t\targ.bits &= ~ASTNode.IsArgument;", "-\t\t// consume annotations", "-\t\tint length;", "-\t\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.expressionStack,", "-\t\t\t\t(this.expressionPtr -= length) + 1,", "-\t\t\t\targ.annotations = new Annotation[length],", "-\t\t\t\t0,", "-\t\t\t\tlength);", "-\t\t}", "-", "-\t\targ.isCatchArgument = topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_BETWEEN_CATCH_AND_RIGHT_PAREN;", "-\t\tpushOnAstStack(arg);", "-", "-\t\tthis.assistNode = arg;", "-\t\tthis.lastCheckPoint = (int) namePositions;", "-\t\tthis.isOrphanCompletionNode = true;", "-", "-\t\t/* if incomplete method header, listLength counter will not have been reset,", "-\t\t\tindicating that some arguments are available on the stack */", "-\t\tthis.listLength++;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd834bc98055732fea160b7f7395e7bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/DocumentElementParser.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void consumeCatchFormalParameter(boolean isVarArgs)", "signatureAfterChange": " protected void consumeCatchFormalParameter()", "diff": ["+protected void consumeCatchFormalParameter() {", "+\t// FormalParameter ::= Type VariableDeclaratorId ==> false", "+\t// FormalParameter ::= Modifiers Type VariableDeclaratorId ==> true", "+\t/*", "+\tastStack :", "+\tidentifierStack : type identifier", "+\tintStack : dim dim", "+\t ==>", "+\tastStack : Argument", "+\tidentifierStack :", "+\tintStack :", "+\t*/", "+", "+\tthis.identifierLengthPtr--;", "+\tchar[] parameterName = this.identifierStack[this.identifierPtr];", "+\tlong namePositions = this.identifierPositionStack[this.identifierPtr--];", "+\tthis.intPtr--; // dimension from the variabledeclaratorid", "+\tTypeReference type = (TypeReference) this.astStack[this.astPtr--];", "+\tthis.intPtr -= 3;", "+\tArgument arg =", "+\t\tnew Argument(", "+\t\t\tparameterName,", "+\t\t\tnamePositions,", "+\t\t\ttype,", "+\t\t\tthis.intStack[this.intPtr + 1]);// modifiers", "+\targ.bits &= ~ASTNode.IsArgument;", "+\t// consume annotations", "+\tint length;", "+\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.expressionStack,", "+\t\t\t(this.expressionPtr -= length) + 1,", "+\t\t\targ.annotations = new Annotation[length],", "+\t\t\t0,", "+\t\t\tlength);", "+\t}", "+\tpushOnAstStack(arg);", "+\tthis.intArrayPtr--;", "+}", "-}", "-protected void consumeCatchFormalParameter(boolean isVarArgs) {", "-\t// FormalParameter ::= Type VariableDeclaratorId ==> false", "-\t// FormalParameter ::= Modifiers Type VariableDeclaratorId ==> true", "-\t/*", "-\tastStack :", "-\tidentifierStack : type identifier", "-\tintStack : dim dim", "-\t ==>", "-\tastStack : Argument", "-\tidentifierStack :", "-\tintStack :", "-\t*/", "-", "-\tthis.identifierLengthPtr--;", "-\tchar[] parameterName = this.identifierStack[this.identifierPtr];", "-\tlong namePositions = this.identifierPositionStack[this.identifierPtr--];", "-\tint extendedDimensions = this.intStack[this.intPtr--];", "-\tint endOfEllipsis = 0;", "-\tif (isVarArgs) {", "-\t\tendOfEllipsis = this.intStack[this.intPtr--];", "-\t}", "-\tint firstDimensions = this.intStack[this.intPtr--];", "-\tfinal int typeDimensions = firstDimensions + extendedDimensions;", "-\tTypeReference type = getTypeReference(typeDimensions);", "-\tif (isVarArgs) {", "-\t\ttype = copyDims(type, typeDimensions + 1);", "-\t\tif (extendedDimensions == 0) {", "-\t\t\ttype.sourceEnd = endOfEllipsis;", "-\t\t}", "-\t\ttype.bits |= ASTNode.IsVarArgs; // set isVarArgs", "-\t}", "-\tthis.intPtr -= 3;", "-\tArgument arg =", "-\t\tnew Argument(", "-\t\t\tparameterName,", "-\t\t\tnamePositions,", "-\t\t\ttype,", "-\t\t\tthis.intStack[this.intPtr + 1]);// modifiers", "-\targ.bits &= ~ASTNode.IsArgument;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd953af2679af504976316d225c844b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 13, "signatureBeforeChange": " protected void consumeCatchFormalParameter(boolean isVarArgs)", "signatureAfterChange": " protected void consumeCatchFormalParameter()", "diff": ["+protected void consumeCatchFormalParameter() {", "+\tif (this.indexOfAssistIdentifier() < 0) {", "+\t\tsuper.consumeCatchFormalParameter();", "+\t\tif((!this.diet || this.dietInt != 0) && this.astPtr > -1) {", "+\t\t\tArgument argument = (Argument) this.astStack[this.astPtr];", "+\t\t\tif(argument.type == this.assistNode) {", "+\t\t\t\tthis.isOrphanCompletionNode = true;", "+\t\t\t\tthis.restartRecovery\t= true;\t// force to restart in recovery mode", "+\t\t\t\tthis.lastIgnoredToken = -1;", "+\t\t\t}", "+\t\t}", "+\t} else {", "+\t\tthis.identifierLengthPtr--;", "+\t\tchar[] identifierName = this.identifierStack[this.identifierPtr];", "+\t\tlong namePositions = this.identifierPositionStack[this.identifierPtr--];", "+\t\tthis.intPtr--; // dimension from the variabledeclaratorid", "+\t\tTypeReference type = (TypeReference) this.astStack[this.astPtr--];", "+\t\tint modifierPositions = this.intStack[this.intPtr--];", "+\t\tthis.intPtr--;", "+\t\tArgument arg =", "+\t\t\tnew SelectionOnArgumentName(", "+\t\t\t\tidentifierName,", "+\t\t\t\tnamePositions,", "+\t\t\t\ttype,", "+\t\t\t\tthis.intStack[this.intPtr + 1] & ~ClassFileConstants.AccDeprecated); // modifiers", "+\t\targ.bits &= ~ASTNode.IsArgument;", "+\t\targ.declarationSourceStart = modifierPositions;", "+", "+\t\t// consume annotations", "+\t\tint length;", "+\t\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tthis.expressionStack,", "+\t\t\t\t(this.expressionPtr -= length) + 1,", "+\t\t\t\targ.annotations = new Annotation[length],", "+\t\t\t\t0,", "+\t\t\t\tlength);", "+\t\t}", "+", "+\t\tpushOnAstStack(arg);", "+", "+\t\tthis.assistNode = arg;", "+\t\tthis.lastCheckPoint = (int) namePositions;", "+\t\tthis.isOrphanCompletionNode = true;", "+", "+\t\tif (!this.diet){", "+\t\t\tthis.restartRecovery\t= true;\t// force to restart in recovery mode", "+\t\t\tthis.lastIgnoredToken = -1;", "+\t\t}", "+", "+\t\t/* if incomplete method header, listLength counter will not have been reset,", "+\t\t\tindicating that some arguments are available on the stack */", "+\t\tthis.listLength++;", "+\t}", "+}", "-}", "-protected void consumeCatchFormalParameter(boolean isVarArgs) {", "-\tif (this.indexOfAssistIdentifier() < 0) {", "-\t\tsuper.consumeCatchFormalParameter(isVarArgs);", "-\t\tif((!this.diet || this.dietInt != 0) && this.astPtr > -1) {", "-\t\t\tArgument argument = (Argument) this.astStack[this.astPtr];", "-\t\t\tif(argument.type == this.assistNode) {", "-\t\t\t\tthis.isOrphanCompletionNode = true;", "-\t\t\t\tthis.restartRecovery\t= true;\t// force to restart in recovery mode", "-\t\t\t\tthis.lastIgnoredToken = -1;", "-\t\t\t}", "-\t\t}", "-\t} else {", "-\t\tthis.identifierLengthPtr--;", "-\t\tchar[] identifierName = this.identifierStack[this.identifierPtr];", "-\t\tlong namePositions = this.identifierPositionStack[this.identifierPtr--];", "-\t\tint extendedDimensions = this.intStack[this.intPtr--];", "-\t\tint endOfEllipsis = 0;", "-\t\tif (isVarArgs) {", "-\t\t\tendOfEllipsis = this.intStack[this.intPtr--];", "-\t\t}", "-\t\tint firstDimensions = this.intStack[this.intPtr--];", "-\t\tfinal int typeDimensions = firstDimensions + extendedDimensions;", "-\t\tTypeReference type = getTypeReference(typeDimensions);", "-\t\tif (isVarArgs) {", "-\t\t\ttype = copyDims(type, typeDimensions + 1);", "-\t\t\tif (extendedDimensions == 0) {", "-\t\t\t\ttype.sourceEnd = endOfEllipsis;", "-\t\t\t}", "-\t\t\ttype.bits |= ASTNode.IsVarArgs; // set isVarArgs", "-\t\t}", "-\t\tint modifierPositions = this.intStack[this.intPtr--];", "-\t\tthis.intPtr--;", "-\t\tArgument arg =", "-\t\t\tnew SelectionOnArgumentName(", "-\t\t\t\tidentifierName,", "-\t\t\t\tnamePositions,", "-\t\t\t\ttype,", "-\t\t\t\tthis.intStack[this.intPtr + 1] & ~ClassFileConstants.AccDeprecated); // modifiers", "-\t\targ.bits &= ~ASTNode.IsArgument;"]}], "num": 66495}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32dcb2013abadef8427c8ea8b5076411", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cad13d70583a83f711390a84eb38f32c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "6a9c839afeea06e7dd97b023fa9c24def00f0f08", "commitAfterChange": "cf7db1b07f7da2723bd250cc64a7e16bec1c504d", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 20, "signatureBeforeChange": " protected void storeProblemsFor(SourceFile sourceFile, CategorizedProblem[] problems) throws CoreException", "signatureAfterChange": " protected void storeProblemsFor(SourceFile sourceFile, CategorizedProblem[] problems) throws CoreException", "diff": ["+\t // once a classpath error is found, ignore all other problems for this project so the user can see the main error", "+\t// but still try to compile as many source files as possible to help the case when the base libraries are in source", "+\tif (!this.keepStoringProblemMarkers) return; // only want the one error recorded on this source file", "-\tString missingClassFile = null;", "+", "+\t\t// handle missing classfile situation", "-\t\t\tJavaBuilder.removeProblemsAndTasksFor(javaBuilder.currentProject); // make this the only problem for this project", "-\t\t\tString[] args = problem.getArguments();", "-\t\t\tmissingClassFile = args[0];", "+\t\t\tString missingClassfileName = problem.getArguments()[0];", "+\t\t\tif (JavaBuilder.DEBUG)", "+\t\t\t\tSystem.out.println(Messages.bind(Messages.build_incompleteClassPath, missingClassfileName));", "+\t\t\tboolean isInvalidClasspathError = JavaCore.ERROR.equals(javaBuilder.javaProject.getOption(JavaCore.CORE_INCOMPLETE_CLASSPATH, true));", "+\t\t\t// insert extra classpath problem, and make it the only problem for this project (optional)", "+\t\t\tif (isInvalidClasspathError && JavaCore.ABORT.equals(javaBuilder.javaProject.getOption(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH, true))) {", "+\t\t\t\tJavaBuilder.removeProblemsAndTasksFor(javaBuilder.currentProject); // make this the only problem for this project", "+\t\t\t\tthis.keepStoringProblemMarkers = false;", "+\t\t\t}", "+\t\t\tIMarker marker = this.javaBuilder.currentProject.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);", "+\t\t\tmarker.setAttribute(IMarker.MESSAGE, Messages.bind(Messages.build_incompleteClassPath, missingClassfileName)); ", "+\t\t\tmarker.setAttribute(IMarker.SEVERITY, isInvalidClasspathError ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING);", "+\t\t\tmarker.setAttribute(IJavaModelMarker.CATEGORY_ID, CategorizedProblem.CAT_BUILDPATH);", "+\t\t\tmarker.setAttribute(IMarker.GENERATED_BY, JavaBuilder.GENERATED_BY);", "+\t\t\t// even if we're not keeping more markers, still fall through rest of the problem reporting, so that offending", "+\t\t\t// IsClassPathCorrect problem gets recorded since it may help locate the offending reference", "-\t\t", "+", "-\t\t\t\t|| (managedProblem = managedMarkerTypes.contains(markerType))) {\t\t\t", "+\t\t\t\t|| (managedProblem = managedMarkerTypes.contains(markerType))) {", "-\t\t\t", "+", "+", "+\t\t\tif (!this.keepStoringProblemMarkers) return; // only want the one error recorded on this source file", "-\t\tif (missingClassFile != null)", "-\t\t\tthrow new MissingClassFileException(missingClassFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e610fc79691484d14cf03fd2cfb81b05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "a9fc88e66080e1f53be7d1d3e6e899cec4143f11", "commitAfterChange": "df511f7d8700bc6fecb763badf839262e3c7877a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r public IMarker[] reconcile() throws JavaModelException", "signatureAfterChange": " \r public IMarker[] reconcile() throws JavaModelException", "diff": ["- */\r", "+ */ \r", "-\tthis.reconcile(null);\r", "-\t// report syntax problems\r", "-\treturn null;\r", "-/* DISABLED because of 1GAJJ3A: ITPJUI:WINNT - Deadlock in Java Editor\r", "-\ttry {\r", "-\t\tWorkingCopyElementInfo info = (WorkingCopyElementInfo)JavaModelManager.getJavaModelManager().getInfo(this);\r", "-\t\tIProblem[] problems = info.problems;\r", "-\t\tint length; \r", "-\t\tIResource resource = getOriginalElement().getUnderlyingResource();\r", "-\t\t\r", "-\t\t// flush previous markers first\r", "-\t\tIMarker[] markers = resource.findMarkers(IJavaModelMarker.TRANSIENT_PROBLEM, true,  IResource.DEPTH_ONE);\r", "-\t\tresource.getWorkspace().deleteMarkers(markers);\r", "+\t// create the delta builder (this remembers the current content of the cu)\r", "+\tJavaElementDeltaBuilder deltaBuilder = new JavaElementDeltaBuilder(this);\r", "-\t\t// create markers if needed\r", "-\t\tif (problems == null || (length = problems.length) == 0) return null;\r", "-\t\tmarkers = new IMarker[length];\r", "-\t\tfor (int i = 0; i < length; i++) {\r", "-\t\t\tIProblem problem = problems[i];\r", "-\t\t\tIMarker marker = resource.createMarker(IJavaModelMarker.TRANSIENT_PROBLEM);\r", "-\t\t\tmarker.setAttribute(IJavaModelMarker.ID, problem.getID());\r", "-\t\t\tmarker.setAttribute(IJavaModelMarker.CHAR_START, problem.getSourceStart());\r", "-\t\t\tmarker.setAttribute(IJavaModelMarker.CHAR_END, problem.getSourceEnd() + 1);\r", "-\t\t\tmarker.setAttribute(IJavaModelMarker.LINE_NUMBER, problem.getSourceLineNumber());\r", "-\t\t\tmarker.setAttribute(IMarker.LOCATION, \"#\" + problem.getSourceLineNumber());\r", "-\t\t\tmarker.setAttribute(IMarker.MESSAGE, problem.getMessage());\r", "-\t\t\tmarker.setAttribute(IMarker.PRIORITY, (problem.isWarning() ? IMarker.PRIORITY_LOW : IMarker.PRIORITY_HIGH));\r", "-\t\t\tmarkers[i] = marker;\r", "+\t// update the element infos with the content of the working copy\r", "+\tif (this.problemRequestor != null) this.problemRequestor.clear();\r", "+\tthis.makeConsistent(this.problemRequestor, this.problemRequestor != null, null);\r", "+\t//if (this.problemRequestor != null) this.problemRequestor.done();\r", "+\r", "+\t// build the deltas\r", "+\tdeltaBuilder.buildDeltas();\r", "+\t\r", "+\t// fire the deltas\r", "+\tboolean shouldFire = false;\r", "+\tJavaModelManager manager = null;\r", "+\tif (deltaBuilder.delta != null) {\r", "+\t\tmanager = (JavaModelManager)JavaModelManager.getJavaModelManager();\r", "+\t\tif (deltaBuilder.delta.getAffectedChildren().length > 0) {\r", "+\t\t\tmanager.registerJavaModelDelta(deltaBuilder.delta);\r", "+\t\t\tshouldFire = true;\r", "-\t\treturn markers;\r", "-\t} catch (CoreException e) {\r", "-\t\tthrow new JavaModelException(e);\r", "-*/\r", "+\tif (shouldFire) manager.fire();\r", "+\r", "+\treturn null;\r"]}], "num": 65890}
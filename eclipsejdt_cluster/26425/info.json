{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "20a0aa2bb6441c8ead3c81cf8e95c09d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02765ff613b86ac38d31c0ecd420db05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "b02ef903578f41e659cbb04f9863bd51747ead57", "commitAfterChange": "8705ef991c725584b4e12ac387833b82c80cbc08", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " public void reconcile( \tboolean forceProblemDetection, \tWorkingCopyOwner workingCopyOwner, \tIProgressMonitor monitor) \tthrows JavaModelException", "signatureAfterChange": " public void reconcile( \tboolean forceProblemDetection, \tWorkingCopyOwner workingCopyOwner, \tIProgressMonitor monitor) \tthrows JavaModelException", "diff": ["-\t\t\tlookup = ((JavaProject)getJavaProject()).getNameLookup();", "-\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(workingCopyOwner, true/*add primary WCs*/);", "-\t\t\tlookup.setUnitsToLookInside(workingCopies);", "+\t\t\ttry {", "+\t\t\t\tlookup = ((JavaProject)getJavaProject()).getNameLookup();", "+\t\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(workingCopyOwner, true/*add primary WCs*/);", "+\t\t\t\tlookup.setUnitsToLookInside(workingCopies);", "+\t\t\t} catch(JavaModelException e) {", "+\t\t\t\t// simple project may not find its namelookup, simply ignore working copies (41583)", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35ce4ebc74e9ad583e9c1676b33f1fe3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "a4db13e870f0b638631acdc0b5496aeab206e505", "commitAfterChange": "6d89cdcefa6c4f6d9f7e2a6ec2f2469cf8fc5bab", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic IMethodBinding[] getDeclaredMethods()", "signatureAfterChange": " \tpublic IMethodBinding[] getDeclaredMethods()", "diff": ["-\t\tif (this.binding.isClass() || this.binding.isInterface()) {", "-\t\t\tReferenceBinding referenceBinding = (ReferenceBinding) this.binding;", "-\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding[] methods = referenceBinding.methods();", "-\t\t\tint length = methods.length;", "-\t\t\tint removeSyntheticsCounter = 0;", "-\t\t\tIMethodBinding[] newMethods = new IMethodBinding[length];", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding methodBinding = methods[i];", "-\t\t\t\tif (!shouldBeRemoved(methodBinding)) { ", "-\t\t\t\t\tnewMethods[removeSyntheticsCounter++] = this.resolver.getMethodBinding(methodBinding);", "+\t\ttry {", "+\t\t\tif (this.binding.isClass() || this.binding.isInterface()) {", "+\t\t\t\tReferenceBinding referenceBinding = (ReferenceBinding) this.binding;", "+\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding[] methods = referenceBinding.methods();", "+\t\t\t\tint length = methods.length;", "+\t\t\t\tint removeSyntheticsCounter = 0;", "+\t\t\t\tIMethodBinding[] newMethods = new IMethodBinding[length];", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding methodBinding = methods[i];", "+\t\t\t\t\tif (!shouldBeRemoved(methodBinding)) { ", "+\t\t\t\t\t\tnewMethods[removeSyntheticsCounter++] = this.resolver.getMethodBinding(methodBinding);", "+\t\t\t\t\t}", "+\t\t\t\tif (removeSyntheticsCounter != length) {", "+\t\t\t\t\tSystem.arraycopy(newMethods, 0, (newMethods = new IMethodBinding[removeSyntheticsCounter]), 0, removeSyntheticsCounter);", "+\t\t\t\t}", "+\t\t\t\treturn newMethods;", "-\t\t\tif (removeSyntheticsCounter != length) {", "-\t\t\t\tSystem.arraycopy(newMethods, 0, (newMethods = new IMethodBinding[removeSyntheticsCounter]), 0, removeSyntheticsCounter);", "-\t\t\t}", "-\t\t\treturn newMethods;", "-\t\t} else {", "-\t\t\treturn NO_METHOD_BINDINGS;", "+\t\t} catch (AbortCompilation e) {", "+\t\t\t// in case a method cannot be resolvable due to missing jars on the classpath", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=57871", "+\t\treturn NO_METHOD_BINDINGS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "408bb438f4c86d3c03c0d208c82be3e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "94923d3acfa7fb7266e9eb4199d83aab0f8b9fca", "commitAfterChange": "3300bd0a2560c278ec7d1063d301ade85a3f2d14", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "  private boolean isInterface(IType type) throws JavaModelException", "signatureAfterChange": "  private boolean isInterface(IType type)", "diff": ["-private boolean isInterface(IType type) throws JavaModelException {", "+private boolean isInterface(IType type) {", "-\t\treturn type.isInterface();", "+\t\ttry {", "+\t\t\treturn type.isInterface();", "+\t\t} catch (JavaModelException e) {", "+\t\t\treturn false;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6619eebc56961fdcfb1a77e578d9e14a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "a4db13e870f0b638631acdc0b5496aeab206e505", "commitAfterChange": "6d89cdcefa6c4f6d9f7e2a6ec2f2469cf8fc5bab", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic ITypeBinding[] getDeclaredTypes()", "signatureAfterChange": " \tpublic ITypeBinding[] getDeclaredTypes()", "diff": ["-\t\tif (this.binding.isClass() || this.binding.isInterface()) {", "-\t\t\tReferenceBinding referenceBinding = (ReferenceBinding) this.binding;", "-\t\t\tReferenceBinding[] members = referenceBinding.memberTypes();", "-\t\t\tint length = members.length;", "-\t\t\tITypeBinding[] newMembers = new ITypeBinding[length];", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tnewMembers[i] = this.resolver.getTypeBinding(members[i]);", "+\t\ttry {", "+\t\t\tif (this.binding.isClass() || this.binding.isInterface()) {", "+\t\t\t\tReferenceBinding referenceBinding = (ReferenceBinding) this.binding;", "+\t\t\t\tReferenceBinding[] members = referenceBinding.memberTypes();", "+\t\t\t\tint length = members.length;", "+\t\t\t\tITypeBinding[] newMembers = new ITypeBinding[length];", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tnewMembers[i] = this.resolver.getTypeBinding(members[i]);", "+\t\t\t\t}", "+\t\t\t\treturn newMembers;", "-\t\t\treturn newMembers;", "-\t\t} else {", "-\t\t\treturn NO_TYPE_BINDINGS;", "+\t\t} catch (AbortCompilation e) {", "+\t\t\t// in case a member types cannot be resolvable due to missing jars on the classpath", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=57871", "+\t\treturn NO_TYPE_BINDINGS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ea6332f2f932e3d102862a44351178b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "480bd4c12ce02b942d6c4f0771fb76bf589234f5", "commitAfterChange": "ce2c87f60c7bf0abdf832c7e10d53fc443b08819", "methodNumberBeforeChange": 230, "methodNumberAfterChange": 230, "signatureBeforeChange": "  \tpublic void setOptions(Hashtable newOptions)", "signatureAfterChange": "  \tpublic void setOptions(Hashtable newOptions)", "diff": ["-\t\ttry {", "-\t\t\t\tinstancePreferences.clear();", "+\t\t\t\ttry {", "+\t\t\t\t\tinstancePreferences.clear();", "+\t\t\t\t} catch(BackingStoreException e) {", "+\t\t\t\t\t// ignore", "+\t\t\t\t}", "+\t\t\t\ttry {", "+\t\t\t\t\t// persist options", "+\t\t\t\t\tinstancePreferences.flush();", "+\t\t\t\t} catch(BackingStoreException e) {", "+\t\t\t\t\t// ignore", "+\t\t\t\t}", "-", "-\t\t\t// persist options", "-\t\t\tinstancePreferences.flush();", "-", "-\t\t} catch (BackingStoreException e) {", "-\t\t\t// ignore", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87145b3bb510d03ce4e345495fcdbad1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/HierarchyResolver.java", "commitBeforeChange": "d0b15899df1f9280c6214b28bf60d05d46965f2f", "commitAfterChange": "ae4e1468dcab2309d598ce4f269715a26e1a2200", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r public void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "signatureAfterChange": "\r public void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "diff": ["-\t\tlookupEnvironment.buildTypeBindings(unit);\r", "-\t\trememberWithMemberTypes(sourceType, unit.types[0].binding);\r", "-\t\tlookupEnvironment.completeTypeBindings(unit, false);\r", "+\t\ttry {\r", "+\t\t\tlookupEnvironment.buildTypeBindings(unit);\r", "+\t\t\trememberWithMemberTypes(sourceType, unit.types[0].binding);\r", "+\t\t\tlookupEnvironment.completeTypeBindings(unit, false);\r", "+\t\t} catch (AbortCompilation e) {\r", "+\t\t\t// missing 'java.lang' package: ignore\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92960122d91d5b5714209887737de34e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "7a1dacef9de595b353accf1696d435bf269b527f", "commitAfterChange": "b14ecb9470662b23addd99b5801b067f2e1d219f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic Object getElementInfo() throws JavaModelException", "signatureAfterChange": " \tpublic Object getElementInfo() throws JavaModelException", "diff": ["-\t\t\tproject.getResolvedClasspath(true); // trigger all possible container/variable initialization outside the model lock", "+\t\t\ttry {", "+\t\t\t\tproject.getResolvedClasspath(true); // trigger all possible container/variable initialization outside the model lock", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// project is not accessible or is not a java project", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96011ac7a983af16ba53a2e70e0eb31e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "a4db13e870f0b638631acdc0b5496aeab206e505", "commitAfterChange": "6d89cdcefa6c4f6d9f7e2a6ec2f2469cf8fc5bab", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic IVariableBinding[] getDeclaredFields()", "signatureAfterChange": " \tpublic IVariableBinding[] getDeclaredFields()", "diff": ["-\t\tif (this.binding.isClass() || this.binding.isInterface()) {", "-\t\t\tReferenceBinding referenceBinding = (ReferenceBinding) this.binding;", "-\t\t\tFieldBinding[] fields = referenceBinding.fields();", "-\t\t\tint length = fields.length;", "-\t\t\tIVariableBinding[] newFields = new IVariableBinding[length];", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tnewFields[i] = this.resolver.getVariableBinding(fields[i]);", "+\t\ttry {", "+\t\t\tif (this.binding.isClass() || this.binding.isInterface()) {", "+\t\t\t\tReferenceBinding referenceBinding = (ReferenceBinding) this.binding;", "+\t\t\t\tFieldBinding[] fields = referenceBinding.fields();", "+\t\t\t\tint length = fields.length;", "+\t\t\t\tIVariableBinding[] newFields = new IVariableBinding[length];", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tnewFields[i] = this.resolver.getVariableBinding(fields[i]);", "+\t\t\t\t}", "+\t\t\t\treturn newFields;", "-\t\t\treturn newFields;", "-\t\t} else {", "-\t\t\treturn NO_VARIABLE_BINDINGS;", "+\t\t} catch (AbortCompilation e) {", "+\t\t\t// in case a field cannot be resolvable due to missing jars on the classpath", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=57871", "+\t\treturn NO_VARIABLE_BINDINGS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98d58c0753370ccf5de266464e658535", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Initializer.java", "commitBeforeChange": "94923d3acfa7fb7266e9eb4199d83aab0f8b9fca", "commitAfterChange": "3300bd0a2560c278ec7d1063d301ade85a3f2d14", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected boolean equalsDOMNode(IDOMNode node) throws JavaModelException", "signatureAfterChange": " protected boolean equalsDOMNode(IDOMNode node)", "diff": ["-protected boolean equalsDOMNode(IDOMNode node) throws JavaModelException {", "+protected boolean equalsDOMNode(IDOMNode node) {", "-\t\treturn node.getContents().trim().equals(getSource());", "+\t\ttry {", "+\t\t\treturn node.getContents().trim().equals(getSource());", "+\t\t} catch (JavaModelException e) {", "+\t\t\treturn false;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a20b06df707c033688535591078cc533", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "78d5fdc50f5f830e3ca4f4da638f4848345c75c3", "commitAfterChange": "5f34da72aa868f837d52fa66e496232b2184cada", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "  \tpublic void parse(boolean pauseAfterFullyQualifiedName)", "signatureAfterChange": "  \tpublic void parse(boolean pauseAfterFullyQualifiedName)", "diff": ["-\t\tif (!this.parsingPaused) {", "-\t\t\t// fully qualified name", "-\t\t\tparseFullyQualifiedName();", "-\t\t\tif (pauseAfterFullyQualifiedName) {", "-\t\t\t\tthis.parsingPaused = true;", "+\t\ttry {", "+\t\t\tif (!this.parsingPaused) {", "+\t\t\t\t// fully qualified name", "+\t\t\t\tparseFullyQualifiedName();", "+\t\t\t\tif (pauseAfterFullyQualifiedName) {", "+\t\t\t\t\tthis.parsingPaused = true;", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (!hasTypeName()) {", "+\t\t\t\tconsumeKey();", "-\t\t}", "-\t\tif (!hasTypeName()) {", "-\t\t\tconsumeKey();", "-\t\t\treturn;", "-\t\t}", "-\t\tconsumeTopLevelType();", "-\t\tparseSecondaryType();", "-\t\tparseInnerType();", "-\t\t", "-\t\tif (this.scanner.isAtParametersStart()) {", "-\t\t\tthis.scanner.skipParametersStart();", "-\t\t\tif (this.scanner.isAtTypeParameterStart())\t{\t\t", "-\t\t\t\t// generic type", "-\t\t\t\tparseGenericType();", "-\t\t\t \t// skip \";>\"", "-\t\t\t \tthis.scanner.skipParametersEnd();", "-\t\t\t\t// local type in generic type", "-\t\t\t\tparseInnerType();", "-\t\t\t} else if (this.scanner.isAtTypeArgumentStart())", "-\t\t\t\t// parameterized type", "-\t\t\t\tparseParameterizedType(null/*top level type or member type with raw enclosing type*/, false/*no raw*/);", "-\t\t\telse if (this.scanner.isAtRawTypeEnd())", "-\t\t\t\t// raw type", "-\t\t\t\tparseRawType();", "-\t\t} else {", "-\t\t\t// non-generic type", "-\t\t\tconsumeNonGenericType();", "-\t\t}", "-\t\t", "-\t\tconsumeType();", "-\t\tthis.scanner.skipTypeEnd();", "-\t\t", "-\t\tif (this.scanner.isAtFieldOrMethodStart()) {", "-\t\t\tswitch (this.scanner.nextToken()) {", "- \t\t\t\tcase Scanner.FIELD:", "- \t\t\t\t\tparseField();", "- \t\t\t\t\treturn;", "- \t\t\t\tcase Scanner.METHOD:", "- \t\t\t\t\tparseMethod();", "- \t\t\t\t\tif (this.scanner.isAtLocalVariableStart()) {", "- \t\t\t\t\t\tparseLocalVariable();", "- \t\t\t\t\t} else if (this.scanner.isAtTypeVariableStart()) {", "-\t\t\t\t\t\tparseTypeVariable();", "-\t\t\t\t\t}", "-\t\t\t \t\tbreak;", "- \t\t\t\tdefault:", "- \t\t\t\t\tmalformedKey();", "- \t\t\t\t\treturn;", "+\t\t\tconsumeTopLevelType();", "+\t\t\tparseSecondaryType();", "+\t\t\tparseInnerType();", "+\t\t\t", "+\t\t\tif (this.scanner.isAtParametersStart()) {", "+\t\t\t\tthis.scanner.skipParametersStart();", "+\t\t\t\tif (this.scanner.isAtTypeParameterStart())\t{\t\t", "+\t\t\t\t\t// generic type", "+\t\t\t\t\tparseGenericType();", "+\t\t\t\t \t// skip \";>\"", "+\t\t\t\t \tthis.scanner.skipParametersEnd();", "+\t\t\t\t\t// local type in generic type", "+\t\t\t\t\tparseInnerType();", "+\t\t\t\t} else if (this.scanner.isAtTypeArgumentStart())", "+\t\t\t\t\t// parameterized type", "+\t\t\t\t\tparseParameterizedType(null/*top level type or member type with raw enclosing type*/, false/*no raw*/);", "+\t\t\t\telse if (this.scanner.isAtRawTypeEnd())", "+\t\t\t\t\t// raw type", "+\t\t\t\t\tparseRawType();", "+\t\t\t} else {", "+\t\t\t\t// non-generic type", "+\t\t\t\tconsumeNonGenericType();", "-\t\t} else if (this.scanner.isAtTypeVariableStart()) {", "-\t\t\tparseTypeVariable();", "-\t\t} else if (this.scanner.isAtWildcardStart()) {", "-\t\t\tparseWildcard();", "-\t\t} else if (this.scanner.isAtTypeWithCaptureStart()) {", "-\t\t\tparseTypeWithCapture();", "+\t\t\t", "+\t\t\tconsumeType();", "+\t\t\tthis.scanner.skipTypeEnd();", "+\t\t\t", "+\t\t\tif (this.scanner.isAtFieldOrMethodStart()) {", "+\t\t\t\tswitch (this.scanner.nextToken()) {", "+\t\t\t\t\tcase Scanner.FIELD:", "+\t\t\t\t\t\tparseField();", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\tcase Scanner.METHOD:", "+\t\t\t\t\t\tparseMethod();", "+\t\t\t\t\t\tif (this.scanner.isAtLocalVariableStart()) {", "+\t\t\t\t\t\t\tparseLocalVariable();", "+\t\t\t\t\t\t} else if (this.scanner.isAtTypeVariableStart()) {", "+\t\t\t\t\t\t\tparseTypeVariable();", "+\t\t\t\t\t\t}", "+\t\t\t\t \t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tmalformedKey();", "+\t\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t} else if (this.scanner.isAtTypeVariableStart()) {", "+\t\t\t\tparseTypeVariable();", "+\t\t\t} else if (this.scanner.isAtWildcardStart()) {", "+\t\t\t\tparseWildcard();", "+\t\t\t} else if (this.scanner.isAtTypeWithCaptureStart()) {", "+\t\t\t\tparseTypeWithCapture();", "+\t\t\t}", "+\t\t\t", "+\t\t\tconsumeKey();", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t\t// the given key was illegal", "-\t\t", "-\t\tconsumeKey();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b56a298cfbb45bbfa11e230ee92c3c36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "94923d3acfa7fb7266e9eb4199d83aab0f8b9fca", "commitAfterChange": "3300bd0a2560c278ec7d1063d301ade85a3f2d14", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " protected boolean equalsDOMNode(IDOMNode node) throws JavaModelException", "signatureAfterChange": " protected boolean equalsDOMNode(IDOMNode node)", "diff": ["-protected boolean equalsDOMNode(IDOMNode node) throws JavaModelException {", "+protected boolean equalsDOMNode(IDOMNode node) {", "-\t\t\t// iterate through all the types inside the receiver and see if one of them can fit", "-\t\t\tIType[] types = getTypes();", "-\t\t\tString typeNodeName = nodeName.substring(0, nodeName.indexOf(SUFFIX_STRING_java));", "-\t\t\tfor (int i = 0, max = types.length; i < max; i++) {", "-\t\t\t\tif (types[i].getElementName().equals(typeNodeName)) {", "-\t\t\t\t\treturn true;", "+\t\t\ttry {", "+\t\t\t\t// iterate through all the types inside the receiver and see if one of them can fit", "+\t\t\t\tIType[] types = getTypes();", "+\t\t\t\tString typeNodeName = nodeName.substring(0, nodeName.indexOf(SUFFIX_STRING_java));", "+\t\t\t\tfor (int i = 0, max = types.length; i < max; i++) {", "+\t\t\t\t\tif (types[i].getElementName().equals(typeNodeName)) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7dc0aae16ec31658bf9cbd1da367012", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "38a03f4a6ca5ac226800e839ace067011b0c8e36", "commitAfterChange": "401741901c1ade4b3d799ecafbb31ae68193cd46", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public String[] getParameterNames() throws JavaModelException", "signatureAfterChange": " public String[] getParameterNames() throws JavaModelException", "diff": ["- \t\t\tjavadocContents = extractJavadoc(declaringType, javadocContents);", "+ \t\t\ttry {", "+ \t\t\t\tjavadocContents = extractJavadoc(declaringType, javadocContents);", "+ \t\t\t} catch(JavaModelException e) {", "+ \t\t\t\t// ignore", "+ \t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5e153aef63beab71682bfad7712fa4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMethod.java", "commitBeforeChange": "94923d3acfa7fb7266e9eb4199d83aab0f8b9fca", "commitAfterChange": "3300bd0a2560c278ec7d1063d301ade85a3f2d14", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected boolean equalsDOMNode(IDOMNode node) throws JavaModelException", "signatureAfterChange": " protected boolean equalsDOMNode(IDOMNode node)", "diff": ["-protected boolean equalsDOMNode(IDOMNode node) throws JavaModelException {", "+protected boolean equalsDOMNode(IDOMNode node) {", "-\t\tIDOMMethod m = (IDOMMethod)node;", "-\t\tif (isConstructor()) {", "-\t\t\treturn ", "-\t\t\t\t(m.isConstructor() || m.getName().equals(this.getElementName()) /* case of a constructor that is being renamed */) ", "-\t\t\t\t\t&& signatureEquals(m);", "-\t\t} else {", "-\t\t\treturn super.equalsDOMNode(node) && signatureEquals(m);", "+\t\ttry {", "+\t\t\tIDOMMethod m = (IDOMMethod)node;", "+\t\t\tif (isConstructor()) {", "+\t\t\t\treturn ", "+\t\t\t\t\t(m.isConstructor() || m.getName().equals(this.getElementName()) /* case of a constructor that is being renamed */) ", "+\t\t\t\t\t\t&& signatureEquals(m);", "+\t\t\t} else {", "+\t\t\t\treturn super.equalsDOMNode(node) && signatureEquals(m);", "+\t\t\t}", "+\t\t} catch (JavaModelException e) {", "+\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8c4b564e81338109b6b62ac71d1d061", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "a4db13e870f0b638631acdc0b5496aeab206e505", "commitAfterChange": "6d89cdcefa6c4f6d9f7e2a6ec2f2469cf8fc5bab", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic ITypeBinding getDeclaringClass()", "signatureAfterChange": " \tpublic ITypeBinding getDeclaringClass()", "diff": ["-\t\t\treturn this.resolver.getTypeBinding(referenceBinding.enclosingType());", "-\t\t} else {", "-\t\t\treturn null;", "+\t\t\ttry {", "+\t\t\t\treturn this.resolver.getTypeBinding(referenceBinding.enclosingType());", "+\t\t\t} catch (AbortCompilation e) {", "+\t\t\t\t// in case the enclosing type cannot be resolvable due to missing jars on the classpath", "+\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=57871", "+\t\t\t}", "+\t\treturn null;"]}], "num": 26425}
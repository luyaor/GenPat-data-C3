{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "91d2e16d86994d934ebee0d334267c26", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08551fc82d6e4fef60a3e56b7e6c6100", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d8c14903c81b7c2ca516eae920d045e03057aeed", "commitAfterChange": "9b26efa81a6e381ed8487b9883db0ad019b470e0", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r \tpublic void locateMatches(String[] filePaths, IWorkspace workspace, IWorkingCopy[] workingCopies)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic void locateMatches(String[] filePaths, IWorkspace workspace, IWorkingCopy[] workingCopies)\r \t\tthrows JavaModelException", "diff": ["+\t\tthis.matchingOpenables = new MatchingOpenableSet();\r", "-\t\tthis.matchingOpenables = new MatchingOpenableSet();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aff44c231444d08cc27dec73cd5260a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "d7c285a09f8cde2ba05e7f838f10ce545b90c736", "commitAfterChange": "7e5c821becbfd893dc049f65559e27ad95e7a9ea", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\r", "+\t// analyse the anonymous nested type\r", "+\tif (anonymousType != null) {\r", "+\t\tflowInfo = anonymousType.analyseCode(currentScope, flowContext, flowInfo);\r", "+\t}\r", "+\r", "-\t// analyse the anonymous nested type\r", "-\tif (anonymousType != null) {\r", "-\t\tflowInfo = anonymousType.analyseCode(currentScope, flowContext, flowInfo);\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d121c83929316c05baa47d492efbeb7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/AbstractImageBuilder.java", "commitBeforeChange": "06bdd90ec7e06ca246dfe4e05efc41d151db72d4", "commitAfterChange": "2b9df464fe844bb540314d6f9bc7e8d8d047b8ca", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \r protected AbstractImageBuilder(JavaBuilder javaBuilder)", "signatureAfterChange": "\r \r protected AbstractImageBuilder(JavaBuilder javaBuilder)", "diff": ["+\tthis.newState = new State(javaBuilder);\r", "-\tthis.newState = new State(javaBuilder);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e68c2397705505dbcf52b7d30f1f4cbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "3be493b980c5d01d07e272306dca9c1749e3ec67", "commitAfterChange": "22fe7881d62ac8282d4b2bebd6f328050922ffe5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r \tpublic FlowInfo analyseCode(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo)", "signatureAfterChange": "\r \r \tpublic FlowInfo analyseCode(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo)", "diff": ["+\r", "+\t\tflowInfo = condition.analyseCode(currentScope, flowContext, flowInfo);\r", "+\r", "-\t\t// notice that the receiver investigation is not performed in the previous case, since there is\r", "-\t\t// not a chance it is worth trying to check anything on a constant expression.\r", "-\t\tflowInfo = condition.analyseCode(currentScope, flowContext, flowInfo);\r"]}], "num": 51065}
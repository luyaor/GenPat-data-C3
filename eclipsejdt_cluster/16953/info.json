{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f6136403e094b0bc8897436db072b3e5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32d3b9d819412afd908bfaf3c86f3753", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "a2a25daab3f792071cba7e3d51c3d2abf00c6c2a", "commitAfterChange": "8bffc680730baeb75a0764c02d5d9479eee4502e", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tpublic boolean reduceWithEqualityConstraints(TypeBinding[] p, TypeBinding[] q)", "signatureAfterChange": "  \tpublic boolean reduceWithEqualityConstraints(TypeBinding[] p, TypeBinding[] q)", "diff": ["+", "+\tpublic boolean reduceWithEqualityConstraints(TypeBinding[] p, TypeBinding[] q) {", "+\t\tif (p != null) {", "+\t\t\tfor (int i = 0; i < p.length; i++) {", "+\t\t\t\ttry {", "+\t\t\t\t\tif (!this.reduceAndIncorporate(new ConstraintTypeFormula(p[i], q[i], ReductionResult.SAME)))", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t} catch (InferenceFailureException e) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-", "-\tpublic boolean reduceWithEqualityConstraints(TypeBinding[] p, TypeBinding[] q) {", "-\t\tfor (int i = 0; i < p.length; i++) {", "-\t\t\ttry {", "-\t\t\t\tif (!this.reduceAndIncorporate(new ConstraintTypeFormula(p[i], q[i], ReductionResult.SAME)))", "-\t\t\t\t\treturn false;", "-\t\t\t} catch (InferenceFailureException e) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t}", "-\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea987be3c682017a79b936a54cd88ef3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java", "commitBeforeChange": "ba102afaa27b3b6b63ee0fd01eab5a8d45f4d8a9", "commitAfterChange": "73100562c653e9756405c4478f78d4c46826e31a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic boolean isCompatibleWith(TypeBinding otherType, Scope captureScope)", "signatureAfterChange": "  \tpublic boolean isCompatibleWith(TypeBinding otherType, Scope captureScope)", "diff": ["-\t\tif (this.upperBounds != null) {", "-\t\t\tfor (int i = 0; i < this.upperBounds.length; i++) {", "-\t\t\t\tif (this.upperBounds[i].isCompatibleWith(otherType, captureScope))", "-\t\t\t\t\treturn true;", "+\t\tif (this.inRecursiveFunction)", "+\t\t\treturn true;", "+\t\tthis.inRecursiveFunction = true; ", "+\t\ttry {", "+\t\t\tif (this.upperBounds != null) {", "+\t\t\t\tfor (int i = 0; i < this.upperBounds.length; i++) {", "+\t\t\t\t\tif (this.upperBounds[i].isCompatibleWith(otherType, captureScope))", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\treturn super.isCompatibleWith(otherType, captureScope);", "+\t\t} finally {", "+\t\t\tthis.inRecursiveFunction = false;", "-\t\treturn super.isCompatibleWith(otherType, captureScope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaf93cbb02d7851c6df3101136c9aa29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "6ab8a052a7d8ac7a830c6733e19e9b30c380dad7", "commitAfterChange": "ec64763fa4e57b4943311ee555e5ddce81854cf2", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tprivate boolean reduce() throws InferenceFailureException", "signatureAfterChange": " \tprivate boolean reduce() throws InferenceFailureException", "diff": ["-\t\tif (this.initialConstraints != null) {", "-\t\t\tfor (int i = 0; i < this.initialConstraints.length; i++) {", "-\t\t\t\tif (!this.currentBounds.reduceOneConstraint(this, this.initialConstraints[i]))", "-\t\t\t\t\treturn false;", "-\t\t\t}", "+\t\t// Caution: This can be reentered recursively even as an earlier call is munching through the constraints !", "+\t\tfor (int i = 0; this.initialConstraints != null && i < this.initialConstraints.length; i++) {", "+\t\t\tfinal ConstraintFormula currentConstraint = this.initialConstraints[i];", "+\t\t\tif (currentConstraint == null)", "+\t\t\t\tcontinue;", "+\t\t\tthis.initialConstraints[i] = null;", "+\t\t\tif (!this.currentBounds.reduceOneConstraint(this, currentConstraint))", "+\t\t\t\treturn false;"]}], "num": 16953}
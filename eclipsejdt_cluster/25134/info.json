{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82983b7c256495e83b94f2f12689be03", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "085c67fbc206b7dcfd908441e4f963eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java", "commitBeforeChange": "ddff8dde894947390c9a90bd347a6ae6239b2112", "commitAfterChange": "e1bb62a6f97249ff77a2f0164d289109644f1d09", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "signatureAfterChange": "   \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "diff": ["+\t\t\t\tAnnotation [] annotations = this.annotationsOnDimensions == null ? null : this.annotationsOnDimensions[i];", "+\t\t\t\tint annotationsLength = annotations == null ? 0 : annotations.length;", "+\t\t\t\tfor (int j = 0; j < annotationsLength; j++) {", "+\t\t\t\t\tannotations[j].traverse(visitor, scope);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c81b7bd7376e8b08c2e4eb9a5256a858", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b194948ba50d941338edfde90b53618594f5f418", "commitAfterChange": "3a5401b27a838fcf33757f0b2ef8214fd68d66ea", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 114, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["+\t\t\tannotations = typeReference.annotations != null ? typeReference.annotations[0] : null;", "+\t\t\tint annotationsEnd = annotations != null ? annotations[annotations.length - 1].declarationSourceEnd + 1 : -1;", "-\t\t\t\tint[] positions = retrieveEndOfElementTypeNamePosition(sourceStart, sourceStart + length);", "+\t\t\t\tint[] positions = retrieveEndOfElementTypeNamePosition(sourceStart < annotationsEnd ? annotationsEnd : sourceStart, sourceStart + length);", "-\t\t\t\tint[] positions = retrieveEndOfElementTypeNamePosition(sourceStart, sourceStart + length);", "+\t\t\t\tint[] positions = retrieveEndOfElementTypeNamePosition(sourceStart < annotationsEnd ? annotationsEnd : sourceStart, sourceStart + length);", "-\t\t\t\tint[] positions = retrieveEndOfElementTypeNamePosition(sourceStart, sourceStart + length);", "+\t\t\t\tint[] positions = retrieveEndOfElementTypeNamePosition(sourceStart < annotationsEnd ? annotationsEnd : sourceStart, sourceStart + length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de5ea5f8edeec18d98c18d70ec626d36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "57bd7f827fb4e26e2f4fcfb421451c18e4a1d09f", "commitAfterChange": "6eea20ade3a92e767b892a10ecaadeddc013ba12", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, int nullStatus, boolean strict)", "signatureAfterChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, int nullStatus, boolean strict)", "diff": ["-\t// additional parameter strict: if true we do not tolerate incompatibly missing annotations on type parameters (for overriding analysis)", "-\tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, int nullStatus, boolean strict) {", "+\t */", "+\tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, int nullStatus, boolean strict) {", "-\t\tif (areSameTypes(requiredType, providedType)) // for type variable identity (and as shortcut for others)", "+\t\tif (areSameTypes(requiredType, providedType, providedSubstitute)) // for type variable identity (and as shortcut for others)", "+\t\t\t\t\tTypeBinding[] providedSubstitutes = (providedSubstitute instanceof ParameterizedTypeBinding) ? ((ParameterizedTypeBinding)providedSubstitute).arguments : null;", "-\t\t\t\t\t\t\tNullAnnotationMatching status = analyse(requiredArguments[i], providedArguments[i], -1, strict);", "+\t\t\t\t\t\t\tTypeBinding providedArgSubstitute = providedSubstitutes != null ? providedSubstitutes[i] : null;", "+\t\t\t\t\t\t\tNullAnnotationMatching status = analyse(requiredArguments[i], providedArguments[i], providedArgSubstitute, -1, strict);", "-\t\t\t\t\tNullAnnotationMatching status = analyse(requiredEnclosing, providedEnclosing, -1, strict);", "+\t\t\t\t\tTypeBinding providedEnclSubstitute = providedSubstitute != null ? providedSubstitute.enclosingType() : null;", "+\t\t\t\t\tNullAnnotationMatching status = analyse(requiredEnclosing, providedEnclosing, providedEnclSubstitute, -1, strict);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f59616f5f310b7fb41a9710da0473a41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "f4bb90e126352ba58699dc135199884ab2b69a00", "commitAfterChange": "97903a14c53cc534c10e28f894e41633eed2dcf2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  protected void createProblemFor(IResource resource, String message, String problemSeverity)", "signatureAfterChange": "  protected void createProblemFor(IResource resource, IMember javaElement, String message, String problemSeverity)", "diff": ["-protected void createProblemFor(IResource resource, String message, String problemSeverity) {", "+protected void createProblemFor(IResource resource, IMember javaElement, String message, String problemSeverity) {", "+\t\tISourceRange range = javaElement == null ? null : javaElement.getNameRange();", "+\t\tint start = range == null ? 0 : range.getOffset();", "+\t\tint end = range == null ? 1 : start + range.getLength();", "-\t\t\tnew Object[] {message, new Integer(severity), new Integer(0), new Integer(1)});", "+\t\t\tnew Object[] {message, new Integer(severity), new Integer(start), new Integer(end)});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f82ef3b7597768bb330c24568b13cb91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5d2cd7f1076b45eee90e6733e80765abd1df3d6a", "commitAfterChange": "14e86a8141996732826e41cf3c8dd392bb1fd5ba", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tJavaProject initialProject,  \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet visitedProjects,  \t\tObjectVector accumulatedEntries) throws JavaModelException", "signatureAfterChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tJavaProject initialProject,  \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet visitedProjects,  \t\tObjectVector accumulatedEntries, \t\tMap preferredClasspaths, \t\tMap preferredOutputs) throws JavaModelException", "diff": ["-\t\tObjectVector accumulatedEntries) throws JavaModelException {", "+\t\tObjectVector accumulatedEntries,", "+\t\tMap preferredClasspaths,", "+\t\tMap preferredOutputs) throws JavaModelException {", "+\t\tIClasspathEntry[] preferredClasspath = preferredClasspaths != null ? (IClasspathEntry[])preferredClasspaths.get(this) : null;", "+\t\tIPath preferredOutput = preferredOutputs != null ? (IPath)preferredOutputs.get(this) : null;", "-\t\t\tgetResolvedClasspath(ignoreUnresolvedVariable, generateMarkerOnError);", "+\t\t\tpreferredClasspath != null ", "+\t\t\t\t? getResolvedClasspath(preferredClasspath, preferredOutput, ignoreUnresolvedVariable, generateMarkerOnError, null)", "+\t\t\t\t: getResolvedClasspath(ignoreUnresolvedVariable, generateMarkerOnError);", "-\t\t\t\t\t\t\t\taccumulatedEntries);", "+\t\t\t\t\t\t\t\taccumulatedEntries,", "+\t\t\t\t\t\t\t\tpreferredClasspaths,", "+\t\t\t\t\t\t\t\tpreferredOutputs);"]}], "num": 25134}
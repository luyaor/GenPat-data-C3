{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cdbc4d7642ad6b404ebc1582647ebbc8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "129a7b134f43f8fbf73bc8ece8e919f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "ea8c1e30cf973504ca98e76d7cfdb082a168ddaa", "commitAfterChange": "3bda3542f9d3046a6441c4a2aa2b2461ac8312ad", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " private boolean isProvablyDistinctTypeArgument(TypeBinding otherArgument, final ParameterizedTypeBinding paramType, final int rank)", "signatureAfterChange": " private boolean isProvablyDistinctTypeArgument(TypeBinding otherArgument, final ParameterizedTypeBinding paramType, final int rank)", "diff": ["-\t\t\tif (variable.firstBound == null) // unbound variable", "-\t\t\t\treturn false;", "-\t\t\t\tupperBound1 = variable.upperBound();", "+\t\t\t\tCaptureBinding capture = (CaptureBinding) variable;", "+\t\t\t\tlowerBound1 = capture.lowerBound;", "+\t\t\t\tif (lowerBound1 == null) {", "+\t\t\t\t\tif (capture.firstBound == null)", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\tupperBound1 = capture.firstBound;", "+\t\t\t\t}", "+\t\t\tif (variable.firstBound == null) // unbound variable", "+\t\t\t\treturn false;", "+\t\t\tif (otherVariable.isCapture()) {", "+\t\t\t\tCaptureBinding otherCapture = (CaptureBinding) otherVariable;", "+\t\t\t\tlowerBound2 = otherCapture.lowerBound;", "+\t\t\t\tif (lowerBound2 == null) {", "+\t\t\t\t\tif (otherCapture.firstBound == null)", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\tupperBound2 = otherCapture.firstBound;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "-\t\t\tif (otherVariable.isCapture()) {", "-\t\t\t\tupperBound2 = otherVariable.upperBound(); // TODO need to improve for otherBounds", "-\t\t\t\tbreak;", "-\t\t\t} ", "-//\t\t\treturn lowerBound1.isProvableDistinctSubType(upperBound2);", "-//\t\t\treturn lowerBound1.isProvableDistinctSubType(otherArgument);", "-\t\t\t//return lowerBound2.isProvableDistinctSubType(upperBound1);", "-//\t\t\treturn lowerBound2.isProvableDistinctSubType(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43848b208dfde5b022f8f93e44f39694", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "15c004baf59205e5152fa54d411388ca40bd13fc", "commitAfterChange": "c08ac19205469f61abf2720c715985b886914c58", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  protected int getFromCache(FieldBinding binding)", "signatureAfterChange": " private int getFromCache(char[] declaringClass, char[] name, char[] signature)", "diff": ["-", "-protected int getFromCache(FieldBinding binding) {", "-\treturn getFromCache(binding.declaringClass.constantPoolName(), binding.name, binding.type.signature());", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5446328a8ab75aff6a54c36a3679e48e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "cfebe74b0993aa8e5991953b9cbb508424b8c095", "commitAfterChange": "c16713f6dd450429a4303737780dffe1c893ae16", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["+\t\tfinal Object indentBodyDeclarationsCompareToAnnotationDeclarationHeaderOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_ANNOTATION_DECLARATION_HEADER);", "+\t\tif (indentBodyDeclarationsCompareToAnnotationDeclarationHeaderOption != null) {", "+\t\t\tthis.indent_body_declarations_compare_to_annotation_declaration_header = DefaultCodeFormatterConstants.TRUE.equals(indentBodyDeclarationsCompareToAnnotationDeclarationHeaderOption);", "+\t\t}", "+\t\t}", "+\t\tfinal Object insertNewLineInEmptyAnnotationDeclarationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ANNOTATION_DECLARATION);", "+\t\tif (insertNewLineInEmptyAnnotationDeclarationOption != null) {", "+\t\t\tthis.insert_new_line_in_empty_annotation_declaration = JavaCore.INSERT.equals(insertNewLineInEmptyAnnotationDeclarationOption);"]}], "num": 21623}
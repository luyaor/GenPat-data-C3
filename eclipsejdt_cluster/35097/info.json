{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8efc9e059084fe10a0d58c5e7c466806", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1388c3f3d62011f46778bc75494f2f25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "e050ce187db6229b89aa41b0ef3c79b8a57e6df7", "commitAfterChange": "91b85d56bd85dc135ae6e51c56ff47dcb64753ef", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate void setDeprecatedOptions(Map settings)", "signatureAfterChange": " \tprivate void setDeprecatedOptions(Map settings)", "diff": ["+\t\t\t}", "+\t\t}", "+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=122247", "+\t\tfinal Object insertNewLineAfterAnnotationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION);", "+\t\tif (insertNewLineAfterAnnotationOption != null) { // check if deprecated option was used", "+\t\t\tthis.insert_new_line_after_annotation_on_member = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOption);", "+\t\t\tthis.insert_new_line_after_annotation_on_parameter = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOption);", "+\t\t\tthis.insert_new_line_after_annotation_on_local_variable = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOption);", "+\t\t} else {", "+\t\t\tfinal Object insertNewLineAfterAnnotationOnMemberOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_MEMBER);", "+\t\t\tif (insertNewLineAfterAnnotationOnMemberOption != null) { // otherwhise, use the new options", "+\t\t\t\tthis.insert_new_line_after_annotation_on_member = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnMemberOption);", "+\t\t\t}", "+\t\t\tfinal Object insertNewLineAfterAnnotationOnParameterOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PARAMETER);", "+\t\t\tif (insertNewLineAfterAnnotationOnParameterOption != null) {", "+\t\t\t\tthis.insert_new_line_after_annotation_on_parameter = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnParameterOption);", "+\t\t\t}", "+\t\t\tfinal Object insertNewLineAfterAnnotationOnLocalVariableOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_LOCAL_VARIABLE);", "+\t\t\tif (insertNewLineAfterAnnotationOnLocalVariableOption != null) {", "+\t\t\t\tthis.insert_new_line_after_annotation_on_local_variable = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnLocalVariableOption);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f3894caafb56d2e23ff02daefd1c2a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "49e1eda92f1ac58df4cb0d60c255a35d2dce04ba", "commitAfterChange": "e90ef260a14686abccfc48006caf4e4749a92ca5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["+\t\tfinal Object neverIndentBlockCommentOnFirstColumnOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_NEVER_INDENT_BLOCK_COMMENTS_ON_FIRST_COLUMN);", "+\t\tif (neverIndentBlockCommentOnFirstColumnOption != null) {", "+\t\t\tthis.never_indent_block_comments_on_first_column = DefaultCodeFormatterConstants.TRUE.equals(neverIndentBlockCommentOnFirstColumnOption);", "+\t\t}", "+\t\tfinal Object neverIndentLineCommentOnFirstColumnOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_NEVER_INDENT_LINE_COMMENTS_ON_FIRST_COLUMN);", "+\t\tif (neverIndentLineCommentOnFirstColumnOption != null) {", "+\t\t\tthis.never_indent_line_comments_on_first_column = DefaultCodeFormatterConstants.TRUE.equals(neverIndentLineCommentOnFirstColumnOption);", "+\t\t}", "+\t\t}", "+\t\tfinal Object wrapBeforeBinaryOperatorOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_WRAP_BEFORE_BINARY_OPERATOR);", "+\t\tif (wrapBeforeBinaryOperatorOption != null) {", "+\t\t\tthis.wrap_before_binary_operator = DefaultCodeFormatterConstants.TRUE.equals(wrapBeforeBinaryOperatorOption);"]}], "num": 35097}
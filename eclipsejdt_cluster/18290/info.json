{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e32a4f55babd0a5705606fd45885211", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "159e724c1f982c1092ba4b6526651945", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "0afaa5a7deb1ecc0c801df158c21d5d94ed6da88", "commitAfterChange": "85928ca8987ee0fb4fd34facb571af15d1bf41fd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": "\r public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\t\t\t\t\tif (((assignConstant = expression.constant) != NotAConstant) && ((increment = assignConstant.intValue()) == (short) increment)) { // 16 bits value\r", "+\t\t\t\t\tif (((assignConstant = expression.constant) != NotAConstant) \r", "+\t\t\t\t\t\t&& (assignConstant.typeID() != T_float) // only for integral types\r", "+\t\t\t\t\t\t&& (assignConstant.typeID() != T_double)\t\t\r", "+\t\t\t\t\t\t&& ((increment = assignConstant.intValue()) == (short) increment)) { // 16 bits value\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b16109bbf07cb8318fb1b8d3590bf946", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "20bcbc906f45c5ae24b88f2c5d025c647d55b26a", "commitAfterChange": "0afaa5a7deb1ecc0c801df158c21d5d94ed6da88", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": "\r public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\t\t\t\t\tif (((assignConstant = expression.constant) != NotAConstant) && ((increment = assignConstant.intValue()) == (short) increment)) { // 16 bits value\r", "+\t\t\t\t\tif (((assignConstant = expression.constant) != NotAConstant) \r", "+\t\t\t\t\t\t&& (assignConstant.typeID() != T_float) // only for integral types\r", "+\t\t\t\t\t\t&& (assignConstant.typeID() != T_double)\r", "+\t\t\t\t\t\t&& ((increment = assignConstant.intValue()) == (short) increment)) { // 16 bits value\r"]}], "num": 18290}
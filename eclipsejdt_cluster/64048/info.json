{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca83c88eaeb2b0a31bd0fbf42747ebe4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f108cc8fcd4e4581a60672cdfefcc8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tpublic boolean isPolyExpression() throws UnsupportedOperationException", "signatureAfterChange": " \t \tpublic boolean isPolyExpression() throws UnsupportedOperationException", "diff": ["-\t\treturn this.isPolyExpression;", "+\t\tif (this.isPolyExpression) // TODO(stephan): is this still used/needed?", "+\t\t\treturn true;", "+", "+\t\t// \"... unless both operands produce primitives (or boxed primitives)\":", "+\t\tTypeBinding opType = this.valueIfTrue.resolvedType;", "+\t\tif (opType != null) {", "+\t\t\tif (opType.isBaseType() || (opType.id >= TypeIds.T_JavaLangByte && opType.id <= TypeIds.T_JavaLangBoolean))", "+\t\t\t\treturn false;", "+\t\t}", "+\t\topType = this.valueIfFalse.resolvedType;", "+\t\tif (opType != null) {", "+\t\t\tif (opType.isBaseType() || (opType.id >= TypeIds.T_JavaLangByte && opType.id <= TypeIds.T_JavaLangBoolean))", "+\t\t\t\treturn false;", "+\t\t}", "+", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21fce7d5b1d3b5d6e71c476b297038a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "566dfe9d75afc609e513171bfa949df8ee32e8da", "commitAfterChange": "14bf482e9ce4e28aba53c29fe3155a9c59b88f63", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeExpecting( \t\tBlockScope scope, \t\tTypeBinding expectedTb)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeExpecting( \t\tBlockScope scope, \t\tTypeBinding expectedType)", "diff": ["-\t\tTypeBinding expectedTb) {", "+\t\tTypeBinding expectedType) {", "-\t\tTypeBinding thisTb = this.resolveType(scope);", "-\t\tif (thisTb == null)", "-\t\t\treturn null;", "-\t\tif (!Scope.areTypesCompatible(thisTb, expectedTb)) {", "-\t\t\tscope.problemReporter().typeMismatchError(thisTb, expectedTb, this);", "+\t\tTypeBinding expressionType = this.resolveType(scope);", "+\t\tif (expressionType == null) return null;", "+\t\tif (expressionType == expectedType) return expressionType;", "+\t\t", "+\t\tif (!expressionType.isCompatibleWith(expectedType)) {", "+\t\t\tscope.problemReporter().typeMismatchError(expressionType, expectedType, this);", "-\t\treturn thisTb;", "+\t\treturn expressionType;"]}], "num": 64048}
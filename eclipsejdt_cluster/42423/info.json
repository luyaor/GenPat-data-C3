{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "01815a0774792a95196e3186181cfa8a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8b89ea3a74d03129286ecda5b07f9fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "8b0f83ab2fc2f0377aa0a160aaebc6cf11976024", "commitAfterChange": "841d4b99f7f88577aa004d23df8444d60d488b4b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic boolean checkConstructors(Parser parser)", "signatureAfterChange": " public boolean checkConstructors(Parser parser)", "diff": ["-\t */", "-\tpublic boolean checkConstructors(Parser parser) {", "-", "-\t\t//if a constructor has not the name of the type,", "-\t\t//convert it into a method with 'null' as its return type", "-\t\tboolean hasConstructor = false;", "-\t\tif (methods != null) {", "-\t\t\tfor (int i = methods.length; --i >= 0;) {", "-\t\t\t\tAbstractMethodDeclaration am;", "-\t\t\t\tif ((am = methods[i]).isConstructor()) {", "-\t\t\t\t\tif (!CharOperation.equals(am.selector, name)) {", "-\t\t\t\t\t\t// the constructor was in fact a method with no return type", "-\t\t\t\t\t\t// unless an explicit constructor call was supplied", "-\t\t\t\t\t\tConstructorDeclaration c = (ConstructorDeclaration) am;", "-\t\t\t\t\t\tif (c.constructorCall == null || c.constructorCall.isImplicitSuper()) { //changed to a method", "-\t\t\t\t\t\t\tMethodDeclaration m = parser.convertToMethodDeclaration(c, this.compilationResult);", "-\t\t\t\t\t\t\tmethods[i] = m;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tswitch (kind(this.modifiers)) {", "-\t\t\t\t\t\t\tcase TypeDeclaration.INTERFACE_DECL :", "-\t\t\t\t\t\t\t\t// report the problem and continue the parsing", "-\t\t\t\t\t\t\t\tparser.problemReporter().interfaceCannotHaveConstructors((ConstructorDeclaration) am);", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase TypeDeclaration.ANNOTATION_TYPE_DECL :", "-\t\t\t\t\t\t\t\t// report the problem and continue the parsing", "-\t\t\t\t\t\t\t\tparser.problemReporter().annotationTypeDeclarationCannotHaveConstructor((ConstructorDeclaration) am);", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\thasConstructor = true;", "+ */", "+public boolean checkConstructors(Parser parser) {", "+\t//if a constructor has not the name of the type,", "+\t//convert it into a method with 'null' as its return type", "+\tboolean hasConstructor = false;", "+\tif (this.methods != null) {", "+\t\tfor (int i = this.methods.length; --i >= 0;) {", "+\t\t\tAbstractMethodDeclaration am;", "+\t\t\tif ((am = this.methods[i]).isConstructor()) {", "+\t\t\t\tif (!CharOperation.equals(am.selector, this.name)) {", "+\t\t\t\t\t// the constructor was in fact a method with no return type", "+\t\t\t\t\t// unless an explicit constructor call was supplied", "+\t\t\t\t\tConstructorDeclaration c = (ConstructorDeclaration) am;", "+\t\t\t\t\tif (c.constructorCall == null || c.constructorCall.isImplicitSuper()) { //changed to a method", "+\t\t\t\t\t\tMethodDeclaration m = parser.convertToMethodDeclaration(c, this.compilationResult);", "+\t\t\t\t\t\tthis.methods[i] = m;", "+\t\t\t\t} else {", "+\t\t\t\t\tswitch (kind(this.modifiers)) {", "+\t\t\t\t\t\tcase TypeDeclaration.INTERFACE_DECL :", "+\t\t\t\t\t\t\t// report the problem and continue the parsing", "+\t\t\t\t\t\t\tparser.problemReporter().interfaceCannotHaveConstructors((ConstructorDeclaration) am);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TypeDeclaration.ANNOTATION_TYPE_DECL :", "+\t\t\t\t\t\t\t// report the problem and continue the parsing", "+\t\t\t\t\t\t\tparser.problemReporter().annotationTypeDeclarationCannotHaveConstructor((ConstructorDeclaration) am);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t\thasConstructor = true;", "-\t\treturn hasConstructor;", "+\t}", "+\treturn hasConstructor;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3d6ece6d2574bac06c8258e7099d7e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "c8403236a1da36770c42adade61fff44b4064b9a", "commitAfterChange": "dc8046a1f26c48f37690a73dc98185cd18d7251b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeDeclaration convert( \t\tISourceType sourceType, \t\tboolean needFieldsAndMethods, \t\tboolean needMemberTypes, \t\tCompilationResult compilationResult)", "signatureAfterChange": " \tprivate TypeDeclaration convert(ISourceType sourceType, CompilationResult compilationResult)", "diff": ["-\tprivate TypeDeclaration convert(", "-\t\tISourceType sourceType,", "-\t\tboolean needFieldsAndMethods,", "-\t\tboolean needMemberTypes,", "-\t\tCompilationResult compilationResult) {", "+\tprivate TypeDeclaration convert(ISourceType sourceType, CompilationResult compilationResult) {", "-\t\tif (needMemberTypes) {", "+\t\tif ((this.flags & MEMBER_TYPE) != 0) {", "-\t\t\t\t\t(MemberTypeDeclaration) convert(sourceMemberTypes[i],", "-\t\t\t\t\t\tneedFieldsAndMethods,", "-\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\tcompilationResult);", "+\t\t\t\t\t(MemberTypeDeclaration) convert(sourceMemberTypes[i], compilationResult);", "-\t\t/* convert fields and methods */", "-\t\tif (needFieldsAndMethods) {", "-\t\t\t/* convert fields */", "+", "+\t\t/* convert fields */", "+\t\tif ((this.flags & FIELD) != 0) {", "+\t\t}", "-\t\t\t/* convert methods - need to add default constructor if necessary */", "+\t\t/* convert methods - need to add default constructor if necessary */", "+\t\tboolean needConstructor = (this.flags & CONSTRUCTOR) != 0;", "+\t\tboolean needMethod = (this.flags & METHOD) != 0;", "+\t\tif (needConstructor || needMethod) {", "+\t\t\t", "-", "+\t", "-\t\t\tint neededCount = 0;", "-\t\t\tif (!type.isInterface()) {", "-\t\t\t\tneededCount = 1;", "+\t\t\tint extraConstructor = 0;", "+\t\t\tint methodCount = 0;", "+\t\t\tboolean isInterface = type.isInterface();", "+\t\t\tif (!isInterface) {", "+\t\t\t\textraConstructor = needConstructor ? 1 : 0;", "-\t\t\t\t\t\tneededCount = 0;", "-\t\t\t\t\t\t// Does not need the extra constructor since one constructor already exists.", "-\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tif (needConstructor) {", "+\t\t\t\t\t\t\textraConstructor = 0; // Does not need the extra constructor since one constructor already exists.", "+\t\t\t\t\t\t\tmethodCount++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (needMethod) {", "+\t\t\t\t\t\tmethodCount++;", "+\t\t\t} else {", "+\t\t\t\tmethodCount = needMethod ? sourceMethodCount : 0;", "-\t\t\ttype.methods = new AbstractMethodDeclaration[sourceMethodCount + neededCount];", "-\t\t\tif (neededCount != 0) { // add default constructor in first position", "+\t\t\ttype.methods = new AbstractMethodDeclaration[methodCount + extraConstructor];", "+\t\t\tif (extraConstructor != 0) { // add default constructor in first position", "-\t\t\tboolean isInterface = type.isInterface();", "+\t\t\tint index = 0;", "-\t\t\t\tAbstractMethodDeclaration method =convert(sourceMethods[i], compilationResult);", "-\t\t\t\tif (isInterface || method.isAbstract()) { // fix-up flag ", "-\t\t\t\t\tmethod.modifiers |= AccSemicolonBody;", "+\t\t\t\tISourceMethod sourceMethod = sourceMethods[i];", "+\t\t\t\tboolean isConstructor = sourceMethod.isConstructor();", "+\t\t\t\tif ((isConstructor && needConstructor) || (!isConstructor && needMethod)) {", "+\t\t\t\t\tAbstractMethodDeclaration method =convert(sourceMethod, compilationResult);", "+\t\t\t\t\tif (isInterface || method.isAbstract()) { // fix-up flag ", "+\t\t\t\t\t\tmethod.modifiers |= AccSemicolonBody;", "+\t\t\t\t\t}", "+\t\t\t\t\ttype.methods[extraConstructor + index++] = method;", "-\t\t\t\ttype.methods[neededCount + i] = method;", "+\t\t"]}], "num": 42423}
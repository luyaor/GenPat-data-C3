{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a7deefa3bc04706a6af1bc9d318986a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e3df1fbbeb65c6bc5135b887606d56c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java", "commitBeforeChange": "c862962851317aa4f8381f94c14dfd8552af8943", "commitAfterChange": "37843798fe45653980f2b49b68c9aaf82a2a678a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t@Override \tpublic void printMessage(Kind kind, CharSequence msg, Element e, \t\t\tAnnotationMirror a, AnnotationValue v)", "signatureAfterChange": " \t@Override \tpublic void printMessage(Kind kind, CharSequence msg, Element e, \t\t\tAnnotationMirror a, AnnotationValue v)", "diff": ["-\t\t// TODO Auto-generated method stub", "+\t\tReferenceContext referenceContext = null;", "+\t\tint startPosition = 0;", "+\t\tint endPosition = 0;", "+\t\tif (e != null) {", "+\t\t\tswitch(e.getKind()) {", "+\t\t\t\tcase ANNOTATION_TYPE :", "+\t\t\t\tcase INTERFACE :", "+\t\t\t\tcase CLASS :", "+\t\t\t\tcase ENUM :", "+\t\t\t\t\tTypeElementImpl typeElementImpl = (TypeElementImpl) e;", "+\t\t\t\t\tBinding typeBinding = typeElementImpl._binding;", "+\t\t\t\t\tif (typeBinding instanceof SourceTypeBinding) {", "+\t\t\t\t\t\tSourceTypeBinding sourceTypeBinding = (SourceTypeBinding) typeBinding;", "+\t\t\t\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) sourceTypeBinding.scope.referenceContext();", "+\t\t\t\t\t\treferenceContext = typeDeclaration;", "+\t\t\t\t\t\tstartPosition = typeDeclaration.sourceStart;", "+\t\t\t\t\t\tendPosition = typeDeclaration.sourceEnd;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase PACKAGE :", "+\t\t\t\t\t// nothing to do: there is no reference context for a package", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase CONSTRUCTOR :", "+\t\t\t\tcase METHOD :", "+\t\t\t\t\tExecutableElementImpl executableElementImpl = (ExecutableElementImpl) e;", "+\t\t\t\t\tBinding binding = executableElementImpl._binding;", "+\t\t\t\t\tif (binding instanceof MethodBinding) {", "+\t\t\t\t\t\tMethodBinding methodBinding = (MethodBinding) binding;", "+\t\t\t\t\t\tAbstractMethodDeclaration sourceMethod = methodBinding.sourceMethod();", "+\t\t\t\t\t\tif (sourceMethod != null) {", "+\t\t\t\t\t\t\treferenceContext = sourceMethod;", "+\t\t\t\t\t\t\tstartPosition = sourceMethod.sourceStart;", "+\t\t\t\t\t\t\tendPosition = sourceMethod.sourceEnd;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ENUM_CONSTANT :", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase EXCEPTION_PARAMETER :", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase FIELD :", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase INSTANCE_INIT :", "+\t\t\t\tcase STATIC_INIT :", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase LOCAL_VARIABLE :", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase PARAMETER :", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase TYPE_PARAMETER :", "+\t\t\t}", "+\t\t}", "+\t\tStringBuilder builder = new StringBuilder(msg);", "+\t\tswitch(kind) {", "+\t\t\tcase ERROR :", "+\t\t\t\tif (referenceContext != null) {", "+\t\t\t\t\tCompilationResult result = referenceContext.compilationResult();", "+\t\t\t\t\tint lineNumber = startPosition >= 0", "+\t\t\t\t\t\t\t? Util.searchLineNumber(result.getLineSeparatorPositions(), startPosition)", "+\t\t\t\t\t\t\t: 0;", "+\t\t\t\t\tint columnNumber = startPosition >= 0", "+\t\t\t\t\t\t\t? Util.searchColumnNumber(result.getLineSeparatorPositions(), lineNumber,startPosition)", "+\t\t\t\t\t\t\t: 0;", "+\t\t\t\t\tresult.record(new BatchAptProblem(", "+\t\t\t\t\t\t\tresult.fileName, ", "+\t\t\t\t\t\t\tString.valueOf(builder),", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\tnew String[0],", "+\t\t\t\t\t\t\tProblemSeverities.Error,", "+\t\t\t\t\t\t\tstartPosition,", "+\t\t\t\t\t\t\tendPosition,", "+\t\t\t\t\t\t\tlineNumber,", "+\t\t\t\t\t\t\tcolumnNumber),", "+\t\t\t\t\t\treferenceContext);", "+\t\t\t\t} else {", "+\t\t\t\t\t// TODO (olivier) need a way to find a context to report the error", "+\t\t\t\t\t_compiler.globalErrorsCount++;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase WARNING :", "+\t\t\t\tif (referenceContext != null) {", "+\t\t\t\t\tCompilationResult result = referenceContext.compilationResult();", "+\t\t\t\t\tint lineNumber = startPosition >= 0", "+\t\t\t\t\t\t\t? Util.searchLineNumber(result.getLineSeparatorPositions(), startPosition)", "+\t\t\t\t\t\t\t: 0;", "+\t\t\t\t\tint columnNumber = startPosition >= 0", "+\t\t\t\t\t\t\t? Util.searchColumnNumber(result.getLineSeparatorPositions(), lineNumber,startPosition)", "+\t\t\t\t\t\t\t: 0;", "+\t\t\t\t\tresult.record(new BatchAptProblem(", "+\t\t\t\t\t\t\tresult.fileName, ", "+\t\t\t\t\t\t\tString.valueOf(builder),", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\tnew String[0],", "+\t\t\t\t\t\t\tProblemSeverities.Warning,", "+\t\t\t\t\t\t\tstartPosition,", "+\t\t\t\t\t\t\tendPosition,", "+\t\t\t\t\t\t\tlineNumber,", "+\t\t\t\t\t\t\tcolumnNumber),", "+\t\t\t\t\t\treferenceContext);", "+\t\t\t\t} else {", "+\t\t\t\t\t// TODO (olivier) need a way to find a context to report the warning", "+\t\t\t\t\t_compiler.globalWarningsCount++;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t}", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79985f5b46a64b69bc3996c51c2f902f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java", "commitBeforeChange": "f0a012a644cdef416114ba8fc17e09c4e5af2fd2", "commitAfterChange": "1923ff35ed43b82db4ab364737f7df955eb62ef8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t@Override \tpublic void printMessage(Kind kind, CharSequence msg, Element e, \t\t\tAnnotationMirror a, AnnotationValue v)", "signatureAfterChange": " \t@Override \tpublic void printMessage(Kind kind, CharSequence msg, Element e, \t\t\tAnnotationMirror a, AnnotationValue v)", "diff": ["+\t\t//TODO: we are currently ignoring 'a' and 'v'", "+\t\tif (kind == Kind.ERROR) {", "+\t\t\t_processingEnv.setErrorRaised(true);", "+\t\t}", "+\t\tCategorizedProblem problem = createProblem(kind, msg, e);", "+\t\tif (problem != null) {", "+\t\t\tthis._compiler.addExtraProblems(problem);", "+\t\t}", "+\t}", "-\t\tCategorizedProblem problem = null;", "-\t\t\t\t_processingEnv.setErrorRaised(true);", "-\t\tif (problem != null) {", "-\t\t\tthis._compiler.addExtraProblems(problem);", "-\t\t}"]}], "num": 2315}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf2e35afebcdcfa71764128c1becb9a8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "505cc05ba61838a82fec674bd56fae38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "13012d4d345052a766efaa509c91e36e4e9c4bd7", "commitAfterChange": "0e6d159b6b5bd2cefe41360d930f2e2ea9602f91", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType,  \t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "signatureAfterChange": " TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType,  \t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "diff": ["-\t// null annotations on dimensions?", "+\t// annotations on dimensions?", "-\tint depth = binding.depth();", "-\twhile (depth > 0 && walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) { // we are dropping annotations on enclosing types.", "-\t\twalker = walker.toNextNestedType();", "-\t\tdepth--;", "+\tif (isParameterized) {", "+\t\tif (dimension != 0)", "+\t\t\tthrow new IllegalStateException();", "+\t\treturn binding;", "-\tAnnotationBinding [][] annotations = new AnnotationBinding[depth + 1][];", "-\tannotations[depth] = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "-\tif (annotations[depth] != null && annotations[depth] != Binding.NO_ANNOTATIONS)", "-\t\tbinding = createAnnotatedType(binding, annotations);", "+\tif (walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "+\t\tfinal int depth = binding.depth();", "+\t\tAnnotationBinding [][] annotations = null;", "+\t\tfor (int i = 0; i <= depth; i++) {", "+\t\t\tAnnotationBinding[] annots = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+\t\t\tif (annots != null && annots.length > 0) {", "+\t\t\t\tif (annotations == null)", "+\t\t\t\t\tannotations = new AnnotationBinding[depth + 1][];", "+\t\t\t\tannotations[i] = annots;", "+\t\t\t}", "+\t\t\twalker = walker.toNextNestedType();", "+\t\t}", "+\t\tif (annotations != null)", "+\t\t\tbinding = createAnnotatedType(binding, annotations);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dab8e009e74dc4a9a0cb78ab74cabc22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "db9994e6bbc68b36b6835d66f1e05a3b040360e2", "commitAfterChange": "01c814e6bd45b7fbd49eec3a490338a17c21d9fb", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames)", "signatureAfterChange": " ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames, TypeAnnotationWalker walker)", "diff": ["-ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames) {", "+ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames, TypeAnnotationWalker walker) {", "-\treturn getTypeFromCompoundName(compoundName, isParameterized, wasMissingType);", "+\tReferenceBinding binding = getTypeFromCompoundName(compoundName, isParameterized, wasMissingType);", "+\tif (walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "+\t\tfinal int depth = binding.depth();", "+\t\tAnnotationBinding [][] annotations = null;", "+\t\tfor (int i = 0; i <= depth; i++) {", "+\t\t\tAnnotationBinding[] annots = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+\t\t\tif (annots != null && annots.length > 0) {", "+\t\t\t\tif (annotations == null)", "+\t\t\t\t\tannotations = new AnnotationBinding[depth + 1][];", "+\t\t\t\tannotations[i] = annots;", "+\t\t\t}", "+\t\t\twalker = walker.toNextNestedType();", "+\t\t}", "+\t\tif (annotations != null)", "+\t\t\tbinding = (ReferenceBinding) createAnnotatedType(binding, annotations);", "+\t}", "+\treturn binding;", "+}"]}], "num": 2103}
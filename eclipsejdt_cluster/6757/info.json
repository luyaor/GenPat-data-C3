{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e369f4fa1f8ce11cae08069dcf62cdb0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8dc615b5953146acac5a5a300cce28e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "653b549b2ec915800fe34bbb2ab9809b71ca66a5", "commitAfterChange": "2caa59d033a9b6c8ec71aab586472ad7fe749893", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "  protected TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": "  protected TypeBinding internalResolveType(Scope scope)", "diff": ["-\tresolveAnnotations(scope);", "-", "-\t\t// do not store the computed type, keep the problem type instead", "+\t\tresolveAnnotations(scope);\t\t", "+\t} else {", "+\t\t// store the computed type only if no error, otherwise keep the problem type instead", "+\t\tthis.resolvedType = type;", "+\t\tresolveAnnotations(scope);", "+\t\treturn this.resolvedType; // pick up value that may have been changed in resolveAnnotations(..)", "-\treturn this.resolvedType = type;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d44a73c26c97743be263e3a29186db44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "42957d127056d12b428b487ce82412f212a62c68", "commitAfterChange": "3514c482526d346b3f2e6b2c4519f1ff4b227bc5", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\t\t\t\tfieldType = fieldType.capture(); // perform capture conversion if read access", "+\t\t\t\t\t\t\t\t\tfieldType = fieldType.capture(scope, this.sourceEnd); // perform capture conversion if read access", "-\t\t\t\t\t\t\t\t? fieldType.capture()", "+\t\t\t\t\t\t\t\t? fieldType.capture(scope, this.sourceEnd)"]}], "num": 6757}
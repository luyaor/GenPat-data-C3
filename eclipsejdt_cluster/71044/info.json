{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "311c653f105a7a0c9135c1cf8b27252b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "202a8d0e3536ee093ae8275c1b3002f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "9535f159c1b7b15630f4dd1b01aaafdced257c46", "commitAfterChange": "2d0022503fd1562ab523efca9b9873151e7ed3ba", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["+\t\t// nullify type parameter bindings as well as they have a backpointer to the method binding", "+\t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=81134)", "+\t\tif (typeParameters != null)", "+\t\t\tfor (int i = 0, length = typeParameters.length; i < length; i++) {", "+\t\t\t\tTypeParameter parameter = typeParameters[i];", "+\t\t\t\tparameter.binding = null;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24c69dfdc57ed2c394c70562521fb3c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "634c1488daeae83b3e903190d0e876028963ffaa", "commitAfterChange": "98ef2023c1555c55d1d5f30d49ca5e0fe4a5637e", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " protected void reportMatching(FieldDeclaration field, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(FieldDeclaration field, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["+\t\t\t\t\t\tif (node instanceof TypeDeclaration) {", "+\t\t\t\t\t\t\t// use field declaration to report match (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=88174)", "+\t\t\t\t\t\t\tAllocationExpression allocation = ((TypeDeclaration)node).allocation;", "+\t\t\t\t\t\t\tif (allocation != null && allocation.enumConstant != null) {", "+\t\t\t\t\t\t\t\tnode = field;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "492c9f71c99338ac8f828e35653e6995", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java", "commitBeforeChange": "fdd1fbb8d5c01c75ee4454ed7f24935c847d778f", "commitAfterChange": "317375dcd13ad0504224639f193a5dbda2d2b98b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " private void extractReferenceFromConstantPool(byte[] contents, ClassFileReader reader) throws ClassFormatException", "signatureAfterChange": " private void extractReferenceFromConstantPool(byte[] contents, ClassFileReader reader) throws ClassFormatException", "diff": ["+\t\t\t\t// add a type reference ", "+\t\t\t\t", "+\t\t\t\t// also add a simple reference on each segment of the qualification (see http://bugs.eclipse.org/bugs/show_bug.cgi?id=24741)", "+\t\t\t\tchar[][] qualification = CharOperation.splitOn('.', name);", "+\t\t\t\tfor (int j = 0, length = qualification.length; j < length; j++) {", "+\t\t\t\t\taddNameReference(qualification[j]);", "+\t\t\t\t}", "+\t\t\t\tbreak;"]}], "num": 71044}
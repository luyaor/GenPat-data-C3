{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3cc92f37692b3dd1c78dd086a448216b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d9d7bdd4321f59c1bfcef4e7be7b067", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "06e44af1d1177a8820136cde1fbe3146b9563e7f", "commitAfterChange": "c0452100f2ed18d65cf0dd0efb6f9fc0ffa98156", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  \tprotected void runConformTest( \t\tString[] testFiles,  \t\tString expectedSuccessOutputString,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments,  \t\tMap customOptions, \t\tICompilerRequestor clientRequestor)", "signatureAfterChange": "  \tprotected void runConformTest( \t\tString[] testFiles,  \t\tString expectedSuccessOutputString,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments,  \t\tMap customOptions, \t\tICompilerRequestor clientRequestor)", "diff": ["-", "-\t\tif (shouldFlushOutputDirectory)", "-\t\t\tUtil.flushDirectoryContent(new File(OUTPUT_DIR));", "-", "-\t\tIProblemFactory problemFactory = getProblemFactory();", "-\t\tRequestor requestor = ", "-\t\t\tnew Requestor(", "-\t\t\t\tproblemFactory, ", "-\t\t\t\tOUTPUT_DIR.endsWith(File.separator) ? OUTPUT_DIR : OUTPUT_DIR + File.separator, ", "-\t\t\t\tfalse,", "-\t\t\t\tclientRequestor,", "-\t\t\t\tfalse, /* show category */", "-\t\t\t\tfalse /* show warning token*/);", "-", "-\t\tMap options = getCompilerOptions();", "-\t\tif (customOptions != null) {", "-\t\t\toptions.putAll(customOptions);", "-\t\t}", "-\t\tCompiler batchCompiler = ", "-\t\t\tnew Compiler(", "-\t\t\t\tgetNameEnvironment(new String[]{}, classLib), ", "-\t\t\t\tgetErrorHandlingPolicy(), ", "-\t\t\t\toptions,", "-\t\t\t\trequestor, ", "-\t\t\t\tproblemFactory,", "-\t\t\t\tfalse);", "-\t\tbatchCompiler.options.produceReferenceInfo = true;", "+\t\trunConformTest(", "+\t\t  testFiles, ", "+\t\t  expectedSuccessOutputString, ", "+\t\t  classLib,", "+\t\t  shouldFlushOutputDirectory, ", "+\t\t  vmArguments, ", "+\t\t  customOptions,", "+\t\t  clientRequestor,", "+\t\t  false /* do not skip javac for this peculiar test */); ", "+\t}", "-\t\t\tbatchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together", "-\t\t} catch(RuntimeException e) {", "-\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\te.printStackTrace();", "-\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t\tthrow e;", "-\t\t}", "-\t\tif (!requestor.hasErrors) {", "-\t\t\tString sourceFile = testFiles[0];", "-", "-\t\t\t// Compute class name by removing \".java\" and replacing slashes with dots", "-\t\t\tString className = sourceFile.substring(0, sourceFile.length() - 5).replace('/', '.').replace('\\\\', '.');", "-\t\t\tif (className.endsWith(PACKAGE_INFO_NAME)) return;", "-", "-\t\t\tif (vmArguments != null) {", "-\t\t\t\tif (this.verifier != null) {", "-\t\t\t\t\tthis.verifier.shutDown();", "-\t\t\t\t}", "-\t\t\t\tthis.verifier = new TestVerifier(false);", "-\t\t\t\tthis.createdVerifier = true;", "-\t\t\t}", "-\t\t\tboolean passed = ", "-\t\t\t\tthis.verifier.verifyClassFiles(", "-\t\t\t\t\tsourceFile, ", "-\t\t\t\t\tclassName, ", "-\t\t\t\t\texpectedSuccessOutputString,", "-\t\t\t\t\tthis.classpaths, ", "-\t\t\t\t\tnull, ", "-\t\t\t\t\tvmArguments);", "-\t\t\tif (!passed) {", "-\t\t\tassertTrue(this.verifier.failureReason, // computed by verifyClassFiles(...) action", "-\t\t\t\t\tpassed);", "-\t\t\tif (vmArguments != null) {", "-\t\t\t\tif (this.verifier != null) {", "-\t\t\t\t\tthis.verifier.shutDown();", "-\t\t\t\tthis.verifier = new TestVerifier(false);", "-\t\t\t\tthis.createdVerifier = true;", "-\t\t} else {", "-\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\tSystem.out.println(Util.displayString(requestor.problemLog, INDENT, SHIFT));", "-\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tassertTrue(\"Unexpected problems: \" + requestor.problemLog, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "558d8732829df7fcf0ed979ebb1923f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "61910f9ffdfc607d31120af5ce39e6bf8d69bab0", "commitAfterChange": "3a10f90d587275b68cb248facf53e1ae26bb70b8", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tprotected void runConformTest( \t\tString[] testFiles,  \t\tString expectedSuccessOutputString,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments,  \t\tMap customOptions, \t\tICompilerRequestor clientRequestor, \t\tboolean skipJavac)", "signatureAfterChange": " \tprotected void runConformTest( \t\tString[] testFiles,  \t\tString expectedSuccessOutputString,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments,  \t\tMap customOptions, \t\tICompilerRequestor clientRequestor, \t\tboolean skipJavac)", "diff": ["+\t// WORK good candidate for elimination (8 instances)", "-\t\t// Non-javac part", "-\t\ttry {", "-\t\t\tif (shouldFlushOutputDirectory)", "-\t\t\t\tUtil.flushDirectoryContent(new File(OUTPUT_DIR));", "-\t", "-\t\t\tIProblemFactory problemFactory = getProblemFactory();", "-\t\t\tRequestor requestor = ", "-\t\t\t\tnew Requestor(", "-\t\t\t\t\tproblemFactory, ", "-\t\t\t\t\tOUTPUT_DIR.endsWith(File.separator) ? OUTPUT_DIR : OUTPUT_DIR + File.separator, ", "-\t\t\t\t\tfalse,", "-\t\t\t\t\tclientRequestor,", "-\t\t\t\t\tfalse, /* show category */", "-\t\t\t\t\tfalse /* show warning token*/);", "-\t", "-\t\t\tMap options = getCompilerOptions();", "-\t\t\tif (customOptions != null) {", "-\t\t\t\toptions.putAll(customOptions);", "-\t\t\t}", "-\t\t\tCompilerOptions compilerOptions = new CompilerOptions(options);", "-\t\t\tcompilerOptions.performMethodsFullRecovery = false;", "-\t\t\tcompilerOptions.performStatementsRecovery = false;", "-\t\t\tCompiler batchCompiler = ", "-\t\t\t\tnew Compiler(", "-\t\t\t\t\tgetNameEnvironment(new String[]{}, classLib), ", "-\t\t\t\t\tgetErrorHandlingPolicy(), ", "-\t\t\t\t\tcompilerOptions,", "-\t\t\t\t\trequestor, ", "-\t\t\t\t\tproblemFactory);", "-\t\t\tcompilerOptions.produceReferenceInfo = true;", "-\t\t\ttry {", "-\t\t\t\tbatchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together", "-\t\t\t} catch(RuntimeException e) {", "-\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\t\te.printStackTrace();", "-\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tthrow e;", "-\t\t\t}", "-\t\t\tif (!requestor.hasErrors) {", "-\t\t\t\tString sourceFile = testFiles[0];", "-\t", "-\t\t\t\t// Compute class name by removing \".java\" and replacing slashes with dots", "-\t\t\t\tString className = sourceFile.substring(0, sourceFile.length() - 5).replace('/', '.').replace('\\\\', '.');", "-\t\t\t\tif (className.endsWith(PACKAGE_INFO_NAME)) return;", "-\t", "-\t\t\t\tif (vmArguments != null) {", "-\t\t\t\t\tif (this.verifier != null) {", "-\t\t\t\t\t\tthis.verifier.shutDown();", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.verifier = new TestVerifier(false);", "-\t\t\t\t\tthis.createdVerifier = true;", "-\t\t\t\t}", "-\t\t\t\tboolean passed = ", "-\t\t\t\t\tthis.verifier.verifyClassFiles(", "-\t\t\t\t\t\tsourceFile, ", "-\t\t\t\t\t\tclassName, ", "-\t\t\t\t\t\texpectedSuccessOutputString,", "-\t\t\t\t\t\tthis.classpaths, ", "-\t\t\t\t\t\tnull, ", "-\t\t\t\t\t\tvmArguments);", "-\t\t\t\tif (!passed) {", "-\t\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tassertTrue(this.verifier.failureReason, // computed by verifyClassFiles(...) action", "-\t\t\t\t\t\tpassed);", "-\t\t\t\tif (vmArguments != null) {", "-\t\t\t\t\tif (this.verifier != null) {", "-\t\t\t\t\t\tthis.verifier.shutDown();", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.verifier = new TestVerifier(false);", "-\t\t\t\t\tthis.createdVerifier = true;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\t\tSystem.out.println(Util.displayString(requestor.problemLog, INDENT, SHIFT));", "-\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tassertTrue(\"Unexpected problems: \" + requestor.problemLog, false);", "-\t\t\t}", "-\t\t// javac part", "-\t\t} catch (AssertionFailedError e) {", "-\t\t\tthrow e;", "-\t\t} finally {", "-\t\t\tif (RUN_JAVAC && !skipJavac)", "-\t\t\t\trunJavac(testFiles, null, expectedSuccessOutputString, shouldFlushOutputDirectory);", "-\t\t\t  // PREMATURE for now, skipping javac implies skipping the compile", "-\t\t\t  //                and execution steps; yet, only cases for which the", "-\t\t\t  //                execution step was a problem have been discovered so", "-\t\t\t  //                far; may consider skipping the execution step only", "-\t\t}", "+\t\trunTest(", "+\t\t\tshouldFlushOutputDirectory, ", "+\t\t\ttestFiles,", "+\t\t\tclassLib,", "+\t\t\tcustomOptions,", "+\t\t\tfalse /* do not perform statements recovery */, ", "+\t\t\tclientRequestor,", "+\t\t\tfalse,", "+\t\t\tnull,", "+\t\t\tfalse,", "+\t\t\tvmArguments, ", "+\t\t\texpectedSuccessOutputString,", "+\t\t\tnull,", "+\t\t\t(skipJavac ? ", "+\t\t\t\t\tJavacTestOptions.SKIP : ", "+\t\t\t\t\tJavacTestOptions.DEFAULT));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d963623f23b138a60f3883efae49597", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "61910f9ffdfc607d31120af5ce39e6bf8d69bab0", "commitAfterChange": "3a10f90d587275b68cb248facf53e1ae26bb70b8", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 66, "signatureBeforeChange": "  \tprotected void runNegativeTestWithExecution( \t\t\tString[] testFiles,  \t\t\tString expectedProblemLog,  \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tString[] classLib, \t\t\tboolean shouldFlushOutputDirectory,  \t\t\tString[] vmArguments,  \t\t\tMap customOptions, \t\t\tICompilerRequestor clientRequestor)", "signatureAfterChange": " \tprotected void runNegativeTestWithExecution( \t\t\tString[] testFiles,  \t\t\tString expectedCompilerLog,  \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tString[] classLibraries, \t\t\tboolean shouldFlushOutputDirectory,  \t\t\tString[] vmArguments,  \t\t\tMap customOptions, \t\t\tICompilerRequestor clientRequestor)", "diff": ["+\t// WORK candidate for elimination (5 calls)", "-\t\t\tString expectedProblemLog, ", "+\t\t\tString expectedCompilerLog, ", "-\t\t\tString[] classLib,", "+\t\t\tString[] classLibraries,", "-", "-\t\tif (shouldFlushOutputDirectory)", "-\t\t\tUtil.flushDirectoryContent(new File(OUTPUT_DIR));", "-", "-\t\tIProblemFactory problemFactory = getProblemFactory();", "-\t\tRequestor requestor = ", "-\t\t\tnew Requestor(", "-\t\t\t\tproblemFactory, ", "-\t\t\t\tOUTPUT_DIR.endsWith(File.separator) ? OUTPUT_DIR : OUTPUT_DIR + File.separator, ", "-\t\t\t\ttrue,", "-\t\t\t\tclientRequestor,", "-\t\t\t\tfalse /*show category*/,", "-\t\t\t\tfalse /*show warning token*/);", "-", "-\t\tMap options = getCompilerOptions();", "-\t\tif (customOptions != null) {", "-\t\t\toptions.putAll(customOptions);", "-\t\t}", "-\t\tCompilerOptions compilerOptions = new CompilerOptions(options);", "-\t\tcompilerOptions.performMethodsFullRecovery = false;", "-\t\tcompilerOptions.performStatementsRecovery = false;", "-\t\tCompiler batchCompiler = ", "-\t\t\tnew Compiler(", "-\t\t\t\tgetNameEnvironment(new String[]{}, classLib), ", "-\t\t\t\tgetErrorHandlingPolicy(), ", "-\t\t\t\tcompilerOptions,", "-\t\t\t\trequestor, ", "-\t\t\t\tproblemFactory);", "-\t\tbatchCompiler.options.produceReferenceInfo = true;", "-\t\ttry {", "-\t\t\tbatchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together", "-\t\t} catch(RuntimeException e) {", "-\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\te.printStackTrace();", "-\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tthrow e;", "-\t\t}", "-\t\tassertTrue(\"Must have errors\", requestor.hasErrors);", "-\t\t", "-\t\tString computedProblemLog = Util.convertToIndependantLineDelimiter(requestor.problemLog.toString());", "-\t\tString platformIndependantExpectedLog = Util.convertToIndependantLineDelimiter(expectedProblemLog);", "-\t\tif (!platformIndependantExpectedLog.equals(computedProblemLog)) {", "-\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\tSystem.out.println(Util.displayString(computedProblemLog, INDENT, SHIFT));", "-\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tassertEquals(\"Invalid problem log \", platformIndependantExpectedLog, computedProblemLog);", "-\t\t}", "-\t\t", "-\t\tString sourceFile = testFiles[0];", "-", "-\t\t// Compute class name by removing \".java\" and replacing slashes with dots", "-\t\tString className = sourceFile.substring(0, sourceFile.length() - 5).replace('/', '.').replace('\\\\', '.');", "-\t\tif (className.endsWith(PACKAGE_INFO_NAME)) return;", "-", "-\t\tif (vmArguments != null) {", "-\t\t\tif (this.verifier != null) {", "-\t\t\t\tthis.verifier.shutDown();", "-\t\t\t}", "-\t\t\tthis.verifier = new TestVerifier(false);", "-\t\t\tthis.createdVerifier = true;", "-\t\t}", "-\t\tboolean passed = ", "-\t\t\tthis.verifier.verifyClassFiles(", "-\t\t\t\tsourceFile, ", "-\t\t\t\tclassName,", "-\t\t\t\texpectedOutputString /* expectedOutputString */,", "-\t\t\t\texpectedErrorString /* expectedErrorString */,", "-\t\t\t\tthis.classpaths, ", "-\t\t\t\tnull, ", "-\t\t\t\tvmArguments);", "-\t\tif (!passed) {", "-\t\t\tString platformIndependantExpectedSuccessOutputString = Util.convertToIndependantLineDelimiter(expectedOutputString);", "-\t\t\tString platformIndependantFailureReason = Util.convertToIndependantLineDelimiter(this.verifier.failureReason);", "-\t\t\tif (platformIndependantFailureReason.indexOf(platformIndependantExpectedSuccessOutputString) == -1) {", "-\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\t\tSystem.out.println(Util.displayString(platformIndependantFailureReason, INDENT, SHIFT));", "-\t\t\t\tassertEquals(\"Invalid runtime log \", platformIndependantExpectedSuccessOutputString, platformIndependantFailureReason);", "-\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else if (vmArguments != null) {", "-\t\t\tif (this.verifier != null) {", "-\t\t\t\tthis.verifier.shutDown();", "-\t\t\t}", "-\t\t\tthis.verifier = new TestVerifier(false);", "-\t\t\tthis.createdVerifier = true;", "-\t\t}", "+\t\trunTest(", "+\t \t\t// test directory preparation", "+\t\t\tshouldFlushOutputDirectory /* should flush output directory */,", "+\t\t\ttestFiles /* test files */,", "+\t\t\t// compiler options", "+\t\t\tclassLibraries /* class libraries */,", "+\t\t\tcustomOptions /* custom options */,", "+\t\t\tfalse /* do not perform statements recovery */, ", "+\t\t\tnull /* no custom requestor */,", "+\t\t\t// compiler results", "+\t\t\texpectedCompilerLog == null || /* expecting compiler errors */", "+\t\t\t\texpectedCompilerLog.indexOf(\"ERROR\") != -1,", "+\t\t\texpectedCompilerLog /* expected compiler log */,", "+\t\t\t// runtime options", "+\t\t\ttrue /* force execution */,", "+\t\t\tvmArguments /* vm arguments */, ", "+\t\t\t// runtime results", "+\t\t\texpectedOutputString /* expected output string */,", "+\t\t\texpectedErrorString /* expected error string */,", "+\t\t\t// javac options", "+\t\t\tJavacTestOptions.DEFAULT /* default javac test options */);", "+\t\t// WORK javac tests did not exist in the original"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3922fe33f94fbd013dc56c49b6a145d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "61910f9ffdfc607d31120af5ce39e6bf8d69bab0", "commitAfterChange": "3a10f90d587275b68cb248facf53e1ae26bb70b8", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 67, "signatureBeforeChange": "  \tprotected void runTest( \t\t\tString[] testFiles, \t\t\tboolean expectingCompilerErrors, \t\t\tString expectedCompilerLog, \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tboolean forceExecution, \t\t\tString[] classLib, \t\t\tboolean shouldFlushOutputDirectory,  \t\t\tString[] vmArguments,  \t\t\tMap customOptions, \t\t\tICompilerRequestor clientRequestor, \t\t\tboolean skipJavac)", "signatureAfterChange": "  \tprotected void runTest( \t\t\tString[] testFiles, \t\t\tboolean expectingCompilerErrors, \t\t\tString expectedCompilerLog, \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tboolean forceExecution, \t\t\tString[] classLibraries, \t\t\tboolean shouldFlushOutputDirectory,  \t\t\tString[] vmArguments,  \t\t\tMap customOptions, \t\t\tICompilerRequestor customRequestor, \t\t\tboolean skipJavac)", "diff": ["-\t\t\tString[] classLib,", "+\t\t\tString[] classLibraries,", "+\t\t\tboolean shouldFlushOutputDirectory, ", "+\t\t\tString[] vmArguments, ", "+\t\t\tMap customOptions,", "+\t\t\tICompilerRequestor customRequestor,", "+\t\t\tboolean skipJavac) {", "+\t\trunTest(", "+\t \t\t// test directory preparation", "+\t\t\tshouldFlushOutputDirectory /* should flush output directory */,", "+\t\t\ttestFiles /* test files */,", "+\t\t\t// compiler options", "+\t\t\tclassLibraries /* class libraries */,", "+\t\t\tcustomOptions /* custom options */,", "+\t\t\tfalse /* do not perform statements recovery */, ", "+\t\t\tcustomRequestor /* custom requestor */,", "+\t\t\t// compiler results", "+\t\t\texpectingCompilerErrors /* expecting compiler errors */,", "+\t\t\texpectedCompilerLog /* expected compiler log */,", "+\t\t\t// runtime options", "+\t\t\tforceExecution /* force execution */,", "+\t\t\tvmArguments /* vm arguments */, ", "+\t\t\t// runtime results", "+\t\t\texpectedOutputString /* expected output string */,", "+\t\t\texpectedErrorString /* expected error string */,", "+\t\t\t// javac options", "+\t\t\tskipJavac ? ", "+\t\t\t\tJavacTestOptions.SKIP : ", "+\t\t\t\tJavacTestOptions.DEFAULT /* javac test options */);", "+", "+\t}", "-\t\t\tboolean skipJavac) {", "-\t\t// Non-javac part", "-\t\t\tif (shouldFlushOutputDirectory)", "-\t\t\t\tUtil.flushDirectoryContent(new File(OUTPUT_DIR));", "-\t", "-\t\t\tIProblemFactory problemFactory = getProblemFactory();", "-\t\t\tRequestor requestor = ", "-\t\t\t\tnew Requestor(", "-\t\t\t\t\tproblemFactory, ", "-\t\t\t\t\tOUTPUT_DIR.endsWith(File.separator) ? OUTPUT_DIR : OUTPUT_DIR + File.separator, ", "-\t\t\t\t\tforceExecution,", "-\t\t\t\t\tclientRequestor,", "-\t\t\t\t\tfalse, /* show category */", "-\t\t\t\t\tfalse /* show warning token*/);", "-\t", "-\t\t\tMap options = getCompilerOptions();", "-\t\t\tif (customOptions != null) {", "-\t\t\t\toptions.putAll(customOptions);", "-\t\t\t}", "-\t\t\tCompilerOptions compilerOptions = new CompilerOptions(options);", "-\t\t\tcompilerOptions.performMethodsFullRecovery = false;", "-\t\t\tcompilerOptions.performStatementsRecovery = false;", "-\t\t\tCompiler batchCompiler = ", "-\t\t\t\tnew Compiler(", "-\t\t\t\t\tgetNameEnvironment(new String[]{}, classLib), ", "-\t\t\t\t\tgetErrorHandlingPolicy(), ", "-\t\t\t\t\tcompilerOptions,", "-\t\t\t\t\trequestor, ", "-\t\t\t\t\tproblemFactory);", "-\t\t\tcompilerOptions.produceReferenceInfo = true;", "-\t\t\tThrowable exception = null;", "-\t\t\ttry {", "-\t\t\t\tbatchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together", "-\t\t\t} catch(RuntimeException e){", "-\t\t\t\texception = e;", "-\t\t\t\tthrow e;", "-\t\t\t} catch(Error e) {", "-\t\t\t\texception = e;", "-\t\t\t\tthrow e;", "-\t\t\t} finally {", "-\t\t\t\tString computedProblemLog = Util.convertToIndependantLineDelimiter(requestor.problemLog.toString());", "-\t\t\t\tString platformIndependantExpectedLog = Util.convertToIndependantLineDelimiter(expectedCompilerLog);", "-\t\t\t\tif (!platformIndependantExpectedLog.equals(computedProblemLog)) {", "-\t\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\t\t\tSystem.out.println(Util.displayString(computedProblemLog, INDENT, SHIFT));", "-\t\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (exception == null) {", "-\t\t\t\t\tif (expectingCompilerErrors) {", "-\t\t\t\t\t\tassertTrue(\"Unexpected success\", requestor.hasErrors);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tassertFalse(\"Unexpected failure\", requestor.hasErrors);", "-\t\t\t\t\t}", "-\t\t\t\t\tassertEquals(\"Invalid problem log \", platformIndependantExpectedLog, computedProblemLog);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (!requestor.hasErrors || forceExecution) {", "-\t\t\t\tString sourceFile = testFiles[0];", "-\t", "-\t\t\t\t// Compute class name by removing \".java\" and replacing slashes with dots", "-\t\t\t\tString className = sourceFile.substring(0, sourceFile.length() - 5).replace('/', '.').replace('\\\\', '.');", "-\t\t\t\tif (className.endsWith(PACKAGE_INFO_NAME)) return;", "-\t", "-\t\t\t\tif (vmArguments != null) {", "-\t\t\t\t\tif (this.verifier != null) {", "-\t\t\t\t\t\tthis.verifier.shutDown();", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.verifier = new TestVerifier(false);", "-\t\t\t\t\tthis.createdVerifier = true;", "-\t\t\t\t}", "-\t\t\t\tboolean passed = ", "-\t\t\t\t\tthis.verifier.verifyClassFiles(", "-\t\t\t\t\t\tsourceFile, ", "-\t\t\t\t\t\tclassName,", "-\t\t\t\t\t\texpectedOutputString,", "-\t\t\t\t\t\texpectedErrorString,", "-\t\t\t\t\t\tthis.classpaths, ", "-\t\t\t\t\t\tnull, ", "-\t\t\t\t\t\tvmArguments);", "-\t\t\t\tif (!passed) {", "-\t\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tassertTrue(this.verifier.failureReason, // computed by verifyClassFiles(...) action", "-\t\t\t\t\t\tpassed);", "-\t\t\t\tif (vmArguments != null) {", "-\t\t\t\t\tif (this.verifier != null) {", "-\t\t\t\t\t\tthis.verifier.shutDown();", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.verifier = new TestVerifier(false);", "-\t\t\t\t\tthis.createdVerifier = true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t// javac part", "-\t\t} catch (AssertionFailedError e) {", "-\t\t\tif (RUN_JAVAC && !skipJavac)", "-\t\t\t\trunJavac(testFiles, null, expectedOutputString, shouldFlushOutputDirectory);", "-\t\t\t  // PREMATURE for now, skipping javac implies skipping the compile", "-\t\t\t  //                and execution steps; yet, only cases for which the", "-\t\t\t  //                execution step was a problem have been discovered so", "-\t\t\t  //                far; may consider skipping the execution step only"]}], "num": 8856}
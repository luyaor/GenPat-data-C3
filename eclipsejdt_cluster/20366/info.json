{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed0bf1558d191993e5e72ca0d5cf9ea9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07afc77133bc944749914c2c2a04c57b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/CompilerToolTests.java", "commitBeforeChange": "9bee1c6f3c6bf50ec7f9dbd9166f81542168adc6", "commitAfterChange": "b0afda97bc30fb703ed3d70723f4f7d089cb593f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tpublic void testCompilerOneClassWithEclipseCompiler()", "signatureAfterChange": "  \tpublic void testCompilerOneClassWithEclipseCompiler()", "diff": ["+ \t\tClassFileReader reader = null;", "+ \t\ttry {", "+\t\t\treader = ClassFileReader.read(new File(tmpFolder, \"p/X.class\"), true);", "+\t\t} catch (ClassFormatException e) {", "+\t\t\tassertTrue(\"Should not happen\", false);", "+\t\t} catch (IOException e) {", "+\t\t\tassertTrue(\"Should not happen\", false);", "+\t\t}", "+\t\tassertNotNull(\"No reader\", reader);", "+ \t\tassertEquals(\"Wrong value\", ClassFileConstants.JDK1_6, reader.getVersion());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a3375588ee7c03b9183d9df7b909d57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/CompilerToolTests.java", "commitBeforeChange": "3a1406d5ae7aa1b9a7051c35339eb7a6fe5990c7", "commitAfterChange": "9b3a87947cab397b160b1250e420f4ceac5f9d52", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void testCompilerOneClassWithEclipseCompiler2()", "signatureAfterChange": "  \tpublic void testCompilerOneClassWithEclipseCompiler2()", "diff": ["+\t\toptions.add(\"-1.5\");", "- \t\tif (!result.booleanValue()) {", "- \t\t\tSystem.err.println(\"Compilation failed: \" + stringWriter.getBuffer().toString());", "- \t \t\tassertTrue(\"Compilation failed \", false);", "- \t\t}", "+\t\tif (!result.booleanValue()) {", "+\t\t\tSystem.err.println(\"Compilation failed: \" + stringWriter.getBuffer().toString());", "+\t\t\tassertTrue(\"Compilation failed \", false);", "+\t\t}", "+\t\tFile outputFile = new File(tmpFolder, \"p/X.class\");", "+\t\tassertTrue(outputFile.exists());", "+\t\tClassFileReader reader = null;", "+\t\ttry {", "+\t\t\treader = ClassFileReader.read(outputFile);", "+\t\t} catch (ClassFormatException e) {", "+\t\t\tassertTrue(\"Should not happen\", false);", "+\t\t} catch (IOException e) {", "+\t\t\tassertTrue(\"Should not happen\", false);", "+\t\t}", "+\t\tassertNotNull(\"No reader\", reader);", "+\t\tassertEquals(\"Not a 1.5 .class file\", ClassFileConstants.JDK1_5, reader.getVersion());", "- \t\t// check the classpath location", "- \t\tassertTrue(\"Has no location CLASS_OUPUT\", forwardingJavaFileManager.hasLocation(StandardLocation.CLASS_OUTPUT));", "+\t\t// check the classpath location", "+\t\tassertTrue(\"Has no location CLASS_OUPUT\", forwardingJavaFileManager.hasLocation(StandardLocation.CLASS_OUTPUT));", "- \t\tif (!result.booleanValue()) {", "- \t\t\tSystem.err.println(\"Compilation failed: \" + stringWriter.getBuffer().toString());", "- \t \t\tassertTrue(\"Compilation failed \", false);", "- \t\t}", "+\t\tif (!result.booleanValue()) {", "+\t\tSystem.err.println(\"Compilation failed: \" + stringWriter.getBuffer().toString());", "+\t\t\tassertTrue(\"Compilation failed \", false);", "+\t\t}"]}], "num": 20366}
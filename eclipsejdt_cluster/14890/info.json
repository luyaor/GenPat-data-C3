{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "331961ec61e1e464f643dbe615a8c7fb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ef40333eb1fbd00a304f6eeb0ae3400", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "a570286b736c470e3a8d4706cda3b67517e91cfc", "commitAfterChange": "6a8cde4bbd78102c9fde9da52bc2f1bf76963958", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["-\t\tif (haveDescriptor && this.descriptor.typeVariables != Binding.NO_TYPE_VARIABLES) // already complained in kosher*", "-\t\t\treturn null;", "-\t\t", "-\t\tif (!haveDescriptor) {", "-\t\t\tif (argumentsTypeElided) {", "-\t\t\t\tif (!this.assistNode)", "-\t\t\t\t\treturn null; // FUBAR, bail out...", "-\t\t\t\t// for code assist ONLY, keep the sluice gate shut on bogus errors otherwise.", "-\t\t\t\targumentsTypeElided = false;", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tthis.arguments[i].type = new SingleTypeReference(TypeConstants.OBJECT, 0);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\tif (!haveDescriptor || this.descriptor.typeVariables != Binding.NO_TYPE_VARIABLES) // already complained in kosher*", "+\t\t\treturn this.resolvedType = null;", "-\t\t\t\t\t\t\thaveDescriptor ? this.descriptor.returnType : null, ", "+\t\t\t\t\t\t\thaveDescriptor ? this.descriptor.returnType : TypeBinding.VOID, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f373d1e46108318f088b0f7327127d00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "aba5db418de65ea21899bfdf893833cd0fc3f586", "commitAfterChange": "7aba284c4ea53048ed9ad4ccc85fef0f7294903a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tpublic void setBinaryTypes(IBinaryType[] binaryTypes)", "signatureAfterChange": " \t \tpublic void setBinaryTypes(ReferenceBinding[] binaryTypes)", "diff": ["-\tpublic void setBinaryTypes(IBinaryType[] binaryTypes) {", "-\t\tfinal int length = binaryTypes.length;", "-\t\tBinaryTypeBinding[] temp = new BinaryTypeBinding[length];", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\ttemp[i] = this.lookupEnvironment.cacheBinaryType(binaryTypes[i], null);", "-\t\t}", "-\t\t// TODO should I reset the lookup environment ?", "-\t\tthis.binaryTypeBindings = temp;", "+\tpublic void setBinaryTypes(ReferenceBinding[] binaryTypes) {", "+\t\tthis.referenceBindings = binaryTypes;"]}], "num": 14890}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e37230a2647c8b2ce2712c6f7d6aed89", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41fed8cea7c3fe3f154ca9ed589e5327", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 23, "signatureBeforeChange": "\t  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "signatureAfterChange": "\t  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "diff": ["-\t\tif ((expression.bits & AstNode.ParenthesizedMASK) != 0) {", "+\t\tif ((expression.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) != 0) {", "-\t\tif (expression instanceof ArrayAllocationExpression) {", "-\t\t\treturn convert((ArrayAllocationExpression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression) expression);", "-\t\tif (expression instanceof QualifiedAllocationExpression) {", "-\t\t\treturn convert((QualifiedAllocationExpression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression) expression);", "-\t\tif (expression instanceof AllocationExpression) {", "-\t\t\treturn convert((AllocationExpression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.AllocationExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.AllocationExpression) expression);", "-\t\tif (expression instanceof CompoundAssignment) {", "-\t\t\treturn convert((CompoundAssignment) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.CompoundAssignment) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.CompoundAssignment) expression);", "-\t\tif (expression instanceof ClassLiteralAccess) {", "-\t\t\treturn convert((ClassLiteralAccess) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess) expression);", "-\t\tif (expression instanceof FalseLiteral) {", "-\t\t\treturn convert((FalseLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.FalseLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.FalseLiteral) expression);", "-\t\tif (expression instanceof TrueLiteral) {", "-\t\t\treturn convert((TrueLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.TrueLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.TrueLiteral) expression);", "-\t\tif (expression instanceof CharLiteral) {", "-\t\t\treturn convert((CharLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.CharLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.CharLiteral) expression);", "-\t\tif (expression instanceof DoubleLiteral) {", "-\t\t\treturn convert((DoubleLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.DoubleLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.DoubleLiteral) expression);", "-\t\tif (expression instanceof FloatLiteral) {", "-\t\t\treturn convert((FloatLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.FloatLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.FloatLiteral) expression);", "-\t\tif (expression instanceof IntLiteralMinValue) {", "-\t\t\treturn convert((IntLiteralMinValue) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.IntLiteralMinValue) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.IntLiteralMinValue) expression);", "-\t\tif (expression instanceof IntLiteral) {", "-\t\t\treturn convert((IntLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.IntLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.IntLiteral) expression);", "-\t\tif (expression instanceof LongLiteralMinValue) {", "-\t\t\treturn convert((LongLiteralMinValue) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.LongLiteralMinValue) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.LongLiteralMinValue) expression);", "-\t\tif (expression instanceof LongLiteral) {", "-\t\t\treturn convert((LongLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.LongLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.LongLiteral) expression);", "-\t\t\treturn convert((ExtendedStringLiteral) expression);", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral) expression);", "-\t\tif (expression instanceof AND_AND_Expression) {", "-\t\t\treturn convert((AND_AND_Expression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression) expression);", "-\t\tif (expression instanceof OR_OR_Expression) {", "-\t\t\treturn convert((OR_OR_Expression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression) expression);", "-\t\tif (expression instanceof EqualExpression) {", "-\t\t\treturn convert((EqualExpression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.EqualExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.EqualExpression) expression);", "-\t\tif (expression instanceof BinaryExpression) {", "-\t\t\treturn convert((BinaryExpression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.BinaryExpression) expression);", "-\t\tif (expression instanceof UnaryExpression) {", "-\t\t\treturn convert((UnaryExpression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.UnaryExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.UnaryExpression) expression);", "-\t\tif (expression instanceof MessageSend) {", "-\t\t\treturn convert((MessageSend) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.MessageSend) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.MessageSend) expression);", "-\t\tif (expression instanceof Reference) {", "-\t\t\treturn convert((Reference) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.Reference) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.Reference) expression);", "-\t\tif (expression instanceof TypeReference) {", "-\t\t\treturn convert((TypeReference) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.TypeReference) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.TypeReference) expression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2ad08e5111ef1d6a06a16591d5f727c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "36f7c1e916ce794f19c8c7bfc5e63afd70aa3df0", "commitAfterChange": "43c55ec0fd64bd306ef21c4d7e4780f0acc5640d", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tsynchronized ITypeBinding resolveExpressionType(Expression expression)", "signatureAfterChange": " \tsynchronized ITypeBinding resolveExpressionType(Expression expression)", "diff": ["-\t\tswitch(expression.getNodeType()) {", "-\t\t\tcase ASTNode.CLASS_INSTANCE_CREATION : ", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode astNode = (org.eclipse.jdt.internal.compiler.ast.ASTNode) this.newAstToOldAst.get(expression);", "-\t\t\t\tif (astNode instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {", "-\t\t\t\t\t// anonymous type case", "-\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) astNode;", "-\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding(typeDeclaration.binding);", "-\t\t\t\t\tif (typeBinding == null) {", "-\t\t\t\t\t\treturn null;", "+\t\ttry {", "+\t\t\tswitch(expression.getNodeType()) {", "+\t\t\t\tcase ASTNode.CLASS_INSTANCE_CREATION : ", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode astNode = (org.eclipse.jdt.internal.compiler.ast.ASTNode) this.newAstToOldAst.get(expression);", "+\t\t\t\t\tif (astNode instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {", "+\t\t\t\t\t\t// anonymous type case", "+\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) astNode;", "+\t\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding(typeDeclaration.binding);", "+\t\t\t\t\t\tif (typeBinding != null) {", "+\t\t\t\t\t\t\treturn typeBinding;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// should be an AllocationExpression", "+\t\t\t\t\t\tAllocationExpression allocationExpression = (AllocationExpression) astNode;", "+\t\t\t\t\t\treturn this.getTypeBinding(allocationExpression.resolvedType);", "-\t\t\t\t\treturn typeBinding;", "-\t\t\t\t} else {", "-\t\t\t\t\t// should be an AllocationExpression", "-\t\t\t\t\tAllocationExpression allocationExpression = (AllocationExpression) astNode;", "-\t\t\t\t\treturn this.getTypeBinding(allocationExpression.resolvedType);", "-\t\t\t\t}", "-\t\t\tcase ASTNode.SIMPLE_NAME :", "-\t\t\tcase ASTNode.QUALIFIED_NAME :", "-\t\t\t\treturn this.resolveTypeBindingForName((Name) expression);", "-\t\t\tcase ASTNode.ARRAY_INITIALIZER :", "-\t\t\tcase ASTNode.ARRAY_CREATION :", "-\t\t\tcase ASTNode.ASSIGNMENT :\t\t\t\t", "-\t\t\tcase ASTNode.POSTFIX_EXPRESSION : ", "-\t\t\tcase ASTNode.PREFIX_EXPRESSION :", "-\t\t\tcase ASTNode.CAST_EXPRESSION :", "-\t\t\tcase ASTNode.TYPE_LITERAL :", "-\t\t\tcase ASTNode.INFIX_EXPRESSION :", "-\t\t\tcase ASTNode.INSTANCEOF_EXPRESSION :", "-\t\t\tcase ASTNode.FIELD_ACCESS :", "-\t\t\tcase ASTNode.SUPER_FIELD_ACCESS :", "-\t\t\tcase ASTNode.ARRAY_ACCESS :", "-\t\t\tcase ASTNode.METHOD_INVOCATION :", "-\t\t\tcase ASTNode.SUPER_METHOD_INVOCATION :", "-\t\t\tcase ASTNode.CONDITIONAL_EXPRESSION : ", "-\t\t\tcase ASTNode.MARKER_ANNOTATION : ", "-\t\t\tcase ASTNode.NORMAL_ANNOTATION :", "-\t\t\tcase ASTNode.SINGLE_MEMBER_ANNOTATION :", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression compilerExpression = (org.eclipse.jdt.internal.compiler.ast.Expression) this.newAstToOldAst.get(expression);", "-\t\t\t\tif (compilerExpression == null) {", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\treturn this.getTypeBinding(compilerExpression.resolvedType);", "-\t\t\tcase ASTNode.STRING_LITERAL :", "-\t\t\t\tif (this.scope == null) return null;", "-\t\t\t\treturn this.getTypeBinding(this.scope.getJavaLangString());", "-\t\t\tcase ASTNode.BOOLEAN_LITERAL :", "-\t\t\tcase ASTNode.NULL_LITERAL : ", "-\t\t\tcase ASTNode.CHARACTER_LITERAL :", "-\t\t\tcase ASTNode.NUMBER_LITERAL :", "-\t\t\t\tLiteral literal = (Literal) this.newAstToOldAst.get(expression);", "-\t\t\t\treturn this.getTypeBinding(literal.literalType(null));", "-\t\t\tcase ASTNode.THIS_EXPRESSION :", "-\t\t\t\tThisReference thisReference = (ThisReference) this.newAstToOldAst.get(expression);", "-\t\t\t\tBlockScope blockScope = (BlockScope) this.astNodesToBlockScope.get(expression);", "-\t\t\t\tif (blockScope == null) {", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\treturn this.getTypeBinding(thisReference.resolveType(blockScope));", "-\t\t\tcase ASTNode.PARENTHESIZED_EXPRESSION :", "-\t\t\t\tParenthesizedExpression parenthesizedExpression = (ParenthesizedExpression) expression;", "-\t\t\t\treturn this.resolveExpressionType(parenthesizedExpression.getExpression());", "-\t\t\tcase ASTNode.VARIABLE_DECLARATION_EXPRESSION :", "-\t\t\t\tVariableDeclarationExpression variableDeclarationExpression = (VariableDeclarationExpression) expression;", "-\t\t\t\tType type = variableDeclarationExpression.getType();", "-\t\t\t\tif (type != null) {", "-\t\t\t\t\treturn type.resolveBinding();", "-\t\t\t\t}", "-\t\t\t\treturn null;", "-\t\t\tdefault: ", "-\t\t\t\treturn null;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ASTNode.SIMPLE_NAME :", "+\t\t\t\tcase ASTNode.QUALIFIED_NAME :", "+\t\t\t\t\treturn this.resolveTypeBindingForName((Name) expression);", "+\t\t\t\tcase ASTNode.ARRAY_INITIALIZER :", "+\t\t\t\tcase ASTNode.ARRAY_CREATION :", "+\t\t\t\tcase ASTNode.ASSIGNMENT :\t\t\t\t", "+\t\t\t\tcase ASTNode.POSTFIX_EXPRESSION : ", "+\t\t\t\tcase ASTNode.PREFIX_EXPRESSION :", "+\t\t\t\tcase ASTNode.CAST_EXPRESSION :", "+\t\t\t\tcase ASTNode.TYPE_LITERAL :", "+\t\t\t\tcase ASTNode.INFIX_EXPRESSION :", "+\t\t\t\tcase ASTNode.INSTANCEOF_EXPRESSION :", "+\t\t\t\tcase ASTNode.FIELD_ACCESS :", "+\t\t\t\tcase ASTNode.SUPER_FIELD_ACCESS :", "+\t\t\t\tcase ASTNode.ARRAY_ACCESS :", "+\t\t\t\tcase ASTNode.METHOD_INVOCATION :", "+\t\t\t\tcase ASTNode.SUPER_METHOD_INVOCATION :", "+\t\t\t\tcase ASTNode.CONDITIONAL_EXPRESSION : ", "+\t\t\t\tcase ASTNode.MARKER_ANNOTATION : ", "+\t\t\t\tcase ASTNode.NORMAL_ANNOTATION :", "+\t\t\t\tcase ASTNode.SINGLE_MEMBER_ANNOTATION :", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression compilerExpression = (org.eclipse.jdt.internal.compiler.ast.Expression) this.newAstToOldAst.get(expression);", "+\t\t\t\t\tif (compilerExpression != null) {", "+\t\t\t\t\t\treturn this.getTypeBinding(compilerExpression.resolvedType);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ASTNode.STRING_LITERAL :", "+\t\t\t\t\tif (this.scope != null) {", "+\t\t\t\t\t\treturn this.getTypeBinding(this.scope.getJavaLangString());", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ASTNode.BOOLEAN_LITERAL :", "+\t\t\t\tcase ASTNode.NULL_LITERAL : ", "+\t\t\t\tcase ASTNode.CHARACTER_LITERAL :", "+\t\t\t\tcase ASTNode.NUMBER_LITERAL :", "+\t\t\t\t\tLiteral literal = (Literal) this.newAstToOldAst.get(expression);", "+\t\t\t\t\treturn this.getTypeBinding(literal.literalType(null));", "+\t\t\t\tcase ASTNode.THIS_EXPRESSION :", "+\t\t\t\t\tThisReference thisReference = (ThisReference) this.newAstToOldAst.get(expression);", "+\t\t\t\t\tBlockScope blockScope = (BlockScope) this.astNodesToBlockScope.get(expression);", "+\t\t\t\t\tif (blockScope != null) {", "+\t\t\t\t\t\treturn this.getTypeBinding(thisReference.resolveType(blockScope));", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ASTNode.PARENTHESIZED_EXPRESSION :", "+\t\t\t\t\tParenthesizedExpression parenthesizedExpression = (ParenthesizedExpression) expression;", "+\t\t\t\t\treturn this.resolveExpressionType(parenthesizedExpression.getExpression());", "+\t\t\t\tcase ASTNode.VARIABLE_DECLARATION_EXPRESSION :", "+\t\t\t\t\tVariableDeclarationExpression variableDeclarationExpression = (VariableDeclarationExpression) expression;", "+\t\t\t\t\tType type = variableDeclarationExpression.getType();", "+\t\t\t\t\tif (type != null) {", "+\t\t\t\t\t\treturn type.resolveBinding();", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t} catch (AbortCompilation e) {", "+\t\t\t// handle missing types", "+\t\treturn null;"]}], "num": 58862}
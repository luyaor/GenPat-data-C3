{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "befeaefccbe5af5419e61622366a3fbf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06e7474523ea8801b85d0b45d0695c44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "55350d5af8386833b94a470ab6a0d389ee3fc665", "commitAfterChange": "046a051c9cfc73b3b3d419bf3c1888e842c561e5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate FieldDeclaration convert(ISourceField sourceField, TypeDeclaration type, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate FieldDeclaration convert(ISourceField sourceField, TypeDeclaration type, CompilationResult compilationResult)", "diff": ["-\t\t\tif (isEnumConstant) {", "-\t\t\t\tif (childrenLength > 0) {", "-\t\t\t\t\tTypeDeclaration anonymous = new TypeDeclaration(compilationResult);", "-\t\t\t\t\tanonymous.name = TypeDeclaration.ANONYMOUS_EMPTY_NAME;", "-\t\t\t\t\tanonymous.bits |= ASTNode.AnonymousAndLocalMask;", "-\t\t\t\t\tanonymous.sourceStart = sourceField.getNameSourceEnd() + 1;", "-\t\t\t\t\tanonymous.sourceEnd = anonymous.sourceStart;", "-\t\t\t\t\tanonymous.declarationSourceStart = sourceField.getDeclarationSourceStart();", "-\t\t\t\t\tanonymous.declarationSourceEnd = sourceField.getDeclarationSourceEnd();", "-\t\t\t\t\tanonymous.bodyEnd = anonymous.declarationSourceEnd;", "-\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(anonymous);", "-\t\t\t\t\tanonymous.allocation = expression; ", "-\t\t\t\t\texpression.enumConstant = field;", "-\t\t\t\t\tfield.initialization = expression;", "-\t\t\t\t\tfor (int i = 0; i < childrenLength; i++) {", "-\t\t\t\t\t\tIJavaElement child = children[i];", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tswitch (child.getElementType()) {", "-\t\t\t\t\t\t\t\tcase IJavaElement.TYPE:", "-\t\t\t\t\t\t\t\t\tTypeDeclaration memberType = convert((SourceTypeElementInfo)((JavaElement)child).getElementInfo(), compilationResult);", "-\t\t\t\t\t\t\t\t\tif (anonymous.memberTypes == null) {", "-\t\t\t\t\t\t\t\t\t\tanonymous.memberTypes = new TypeDeclaration[] {memberType};", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tint length = anonymous.memberTypes.length;", "-\t\t\t\t\t\t\t\t\t\tSystem.arraycopy(anonymous.memberTypes, 0, anonymous.memberTypes = new TypeDeclaration[length+1], 0, length);", "-\t\t\t\t\t\t\t\t\t\tanonymous.memberTypes[length] = memberType;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\tcase IJavaElement.FIELD:", "-\t\t\t\t\t\t\t\t\tFieldDeclaration fieldDecl = convert((SourceFieldElementInfo)((JavaElement)child).getElementInfo(), anonymous, compilationResult);", "-\t\t\t\t\t\t\t\t\tif (anonymous.fields == null) {", "-\t\t\t\t\t\t\t\t\t\tanonymous.fields = new FieldDeclaration[] {fieldDecl};", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tint length = anonymous.fields.length;", "-\t\t\t\t\t\t\t\t\t\tSystem.arraycopy(anonymous.fields, 0, anonymous.fields = new FieldDeclaration[length+1], 0, length);", "-\t\t\t\t\t\t\t\t\t\tanonymous.fields[length] = fieldDecl;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\tcase IJavaElement.METHOD:", "-\t\t\t\t\t\t\t\t\tAbstractMethodDeclaration methodDecl = convert((SourceMethodElementInfo)((JavaElement)child).getElementInfo(), compilationResult);", "-\t\t\t\t\t\t\t\t\tif (anonymous.methods == null) {", "-\t\t\t\t\t\t\t\t\t\tanonymous.methods = new AbstractMethodDeclaration[] {methodDecl};", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tint length = anonymous.methods.length;", "-\t\t\t\t\t\t\t\t\t\tSystem.arraycopy(anonymous.methods, 0, anonymous.methods = new AbstractMethodDeclaration[length+1], 0, length);", "-\t\t\t\t\t\t\t\t\t\tanonymous.methods[length] = methodDecl;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\t// ignore", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif (childrenLength > 0) {", "-\t\t\t\t\tArrayInitializer initializer = new ArrayInitializer();", "-\t\t\t\t\tfield.initialization = initializer;", "-\t\t\t\t\tExpression[] expressions = new Expression[childrenLength];", "-\t\t\t\t\tinitializer.expressions = expressions;", "-\t\t\t\t\tfor (int i = 0; i < childrenLength; i++) {", "-\t\t\t\t\t\tIJavaElement localType = children[i];", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tTypeDeclaration anonymousLocalTypeDeclaration = convert((SourceTypeElementInfo)((JavaElement)localType).getElementInfo(), compilationResult);", "-\t\t\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(anonymousLocalTypeDeclaration);", "-\t\t\t\t\t\t\texpression.type = anonymousLocalTypeDeclaration.superclass;", "-\t\t\t\t\t\t\tanonymousLocalTypeDeclaration.superclass = null;", "-\t\t\t\t\t\t\tanonymousLocalTypeDeclaration.superInterfaces = null;", "-\t\t\t\t\t\t\tanonymousLocalTypeDeclaration.allocation = expression;", "-\t\t\t\t\t\t\texpressions[i] = expression;", "-\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\t// ignore", "-\t\t\t\t\t\t}", "+\t\t\tif (childrenLength > 0) {", "+\t\t\t\tArrayInitializer initializer = new ArrayInitializer();", "+\t\t\t\tfield.initialization = initializer;", "+\t\t\t\tExpression[] expressions = new Expression[childrenLength];", "+\t\t\t\tinitializer.expressions = expressions;", "+\t\t\t\tfor (int i = 0; i < childrenLength; i++) {", "+\t\t\t\t\tIJavaElement localType = children[i];", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tTypeDeclaration anonymousLocalTypeDeclaration = convert((SourceTypeElementInfo)((JavaElement)localType).getElementInfo(), compilationResult);", "+\t\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(anonymousLocalTypeDeclaration);", "+\t\t\t\t\t\texpression.type = anonymousLocalTypeDeclaration.superclass;", "+\t\t\t\t\t\tanonymousLocalTypeDeclaration.superclass = null;", "+\t\t\t\t\t\tanonymousLocalTypeDeclaration.superInterfaces = null;", "+\t\t\t\t\t\tanonymousLocalTypeDeclaration.allocation = expression;", "+\t\t\t\t\t\tanonymousLocalTypeDeclaration.modifiers &= ~AccEnum; // remove tag in case this is the init of an enum constant", "+\t\t\t\t\t\texpressions[i] = expression;", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t// ignore"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "718195d1d816e811811befd9f7c7611a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "9c622a725bd1781235642601f30ea554da5b3d83", "commitAfterChange": "03a380bfa1976c7afb0666b83988f9c0efd1b83c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate FieldDeclaration convert(ISourceField sourceField, TypeDeclaration type, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate FieldDeclaration convert(ISourceField sourceField, TypeDeclaration type, CompilationResult compilationResult)", "diff": ["-\t\t\tIJavaElement[] children = ((SourceFieldElementInfo)sourceField).getChildren();", "-\t\t\tint typesLength = children.length;", "-\t\t\tif (typesLength > 0) {", "-\t\t\t\tArrayInitializer initializer = new ArrayInitializer();", "-\t\t\t\tfield.initialization = initializer;", "-\t\t\t\tExpression[] expressions = new Expression[typesLength];", "-\t\t\t\tinitializer.expressions = expressions;", "-\t\t\t\tfor (int i = 0; i < typesLength; i++) {", "-\t\t\t\t\tIJavaElement localType = children[i];", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tTypeDeclaration anonymousLocalTypeDeclaration = convert((SourceTypeElementInfo)((JavaElement)localType).getElementInfo(),compilationResult);", "-\t\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(anonymousLocalTypeDeclaration);", "-\t\t\t\t\t\texpression.type = anonymousLocalTypeDeclaration.superclass;", "-\t\t\t\t\t\tanonymousLocalTypeDeclaration.superclass = null;", "-\t\t\t\t\t\tanonymousLocalTypeDeclaration.superInterfaces = null;", "-\t\t\t\t\t\tanonymousLocalTypeDeclaration.allocation = expression;", "-\t\t\t\t\t\texpressions[i] = expression;", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t// ignore", "+\t\t\tIJavaElement[] children = ((SourceFieldElementInfo) sourceField).getChildren();", "+\t\t\tint childrenLength = children.length;", "+\t\t\tif (Flags.isEnum(field.modifiers)) {", "+\t\t\t\tfield.modifiers &= ~Flags.AccEnum;", "+\t\t\t\tfield.type = null;", "+\t\t\t\tif (childrenLength > 0) {", "+\t\t\t\t\tTypeDeclaration anonymous = new TypeDeclaration(compilationResult);", "+\t\t\t\t\tanonymous.name = TypeDeclaration.ANONYMOUS_EMPTY_NAME;", "+\t\t\t\t\tanonymous.bits |= ASTNode.AnonymousAndLocalMask;", "+\t\t\t\t\tanonymous.sourceStart = sourceField.getNameSourceEnd() + 1;", "+\t\t\t\t\tanonymous.sourceEnd = anonymous.sourceStart;", "+\t\t\t\t\tanonymous.declarationSourceStart = sourceField.getDeclarationSourceStart();", "+\t\t\t\t\tanonymous.declarationSourceEnd = sourceField.getDeclarationSourceEnd();", "+\t\t\t\t\tanonymous.bodyEnd = anonymous.declarationSourceEnd;", "+\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(anonymous);", "+\t\t\t\t\tanonymous.allocation = expression; ", "+\t\t\t\t\texpression.enumConstant = field;", "+\t\t\t\t\tfield.initialization = expression;", "+\t\t\t\t\tfor (int i = 0; i < childrenLength; i++) {", "+\t\t\t\t\t\tIJavaElement child = children[i];", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tswitch (child.getElementType()) {", "+\t\t\t\t\t\t\t\tcase IJavaElement.TYPE:", "+\t\t\t\t\t\t\t\t\tTypeDeclaration memberType = convert((SourceTypeElementInfo)((JavaElement)child).getElementInfo(), compilationResult);", "+\t\t\t\t\t\t\t\t\tif (anonymous.memberTypes == null) {", "+\t\t\t\t\t\t\t\t\t\tanonymous.memberTypes = new TypeDeclaration[] {memberType};", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tint length = anonymous.memberTypes.length;", "+\t\t\t\t\t\t\t\t\t\tSystem.arraycopy(anonymous.memberTypes, 0, anonymous.memberTypes = new TypeDeclaration[length+1], 0, length);", "+\t\t\t\t\t\t\t\t\t\tanonymous.memberTypes[length] = memberType;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase IJavaElement.FIELD:", "+\t\t\t\t\t\t\t\t\tFieldDeclaration fieldDecl = convert((SourceFieldElementInfo)((JavaElement)child).getElementInfo(), anonymous, compilationResult);", "+\t\t\t\t\t\t\t\t\tif (anonymous.fields == null) {", "+\t\t\t\t\t\t\t\t\t\tanonymous.fields = new FieldDeclaration[] {fieldDecl};", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tint length = anonymous.fields.length;", "+\t\t\t\t\t\t\t\t\t\tSystem.arraycopy(anonymous.fields, 0, anonymous.fields = new FieldDeclaration[length+1], 0, length);", "+\t\t\t\t\t\t\t\t\t\tanonymous.fields[length] = fieldDecl;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase IJavaElement.METHOD:", "+\t\t\t\t\t\t\t\t\tAbstractMethodDeclaration methodDecl = convert((SourceMethodElementInfo)((JavaElement)child).getElementInfo(), compilationResult);", "+\t\t\t\t\t\t\t\t\tif (anonymous.methods == null) {", "+\t\t\t\t\t\t\t\t\t\tanonymous.methods = new AbstractMethodDeclaration[] {methodDecl};", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tint length = anonymous.methods.length;", "+\t\t\t\t\t\t\t\t\t\tSystem.arraycopy(anonymous.methods, 0, anonymous.methods = new AbstractMethodDeclaration[length+1], 0, length);", "+\t\t\t\t\t\t\t\t\t\tanonymous.methods[length] = methodDecl;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t// ignore", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif (childrenLength > 0) {", "+\t\t\t\t\tArrayInitializer initializer = new ArrayInitializer();", "+\t\t\t\t\tfield.initialization = initializer;", "+\t\t\t\t\tExpression[] expressions = new Expression[childrenLength];", "+\t\t\t\t\tinitializer.expressions = expressions;", "+\t\t\t\t\tfor (int i = 0; i < childrenLength; i++) {", "+\t\t\t\t\t\tIJavaElement localType = children[i];", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tTypeDeclaration anonymousLocalTypeDeclaration = convert((SourceTypeElementInfo)((JavaElement)localType).getElementInfo(), compilationResult);", "+\t\t\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(anonymousLocalTypeDeclaration);", "+\t\t\t\t\t\t\texpression.type = anonymousLocalTypeDeclaration.superclass;", "+\t\t\t\t\t\t\tanonymousLocalTypeDeclaration.superclass = null;", "+\t\t\t\t\t\t\tanonymousLocalTypeDeclaration.superInterfaces = null;", "+\t\t\t\t\t\t\tanonymousLocalTypeDeclaration.allocation = expression;", "+\t\t\t\t\t\t\texpressions[i] = expression;", "+\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t// ignore", "+\t\t\t\t\t\t}"]}], "num": 66962}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca334c5e76ef3cfaf9b21c148a83fcd1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "061149f8e96faecaecff2c0f138fc12a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void testConstructorDeclarationBug77093() throws CoreException", "signatureAfterChange": " \tpublic void testBug77093constructor() throws CoreException", "diff": ["-\tpublic void testConstructorDeclarationBug77093() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs/src/b77093/X.java\").getType(\"X\");", "-\t\tIMethod method = type.getMethod(\"X\", new String[] {\"[[QZ;\"});", "-\t\tsearch(method, DECLARATIONS, getJavaSearchScopeBugs(), resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b77093/X.java b77093.X(Z[][]) [X] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}", "+\t */", "+\tpublic void testBug77093constructor() throws CoreException {", "+\t\tICompilationUnit workingCopy = null;", "+\t\ttry {", "+\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b77093/X.java\",", "+\t\t\t\t\"package b77093;\\n\" + ", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tclass Z {\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tZ[][] z_arrays;\\n\" + ", "+\t\t\t\t\"\tX() {\\n\" + ", "+\t\t\t\t\"\t\tthis(new Z[10][]);\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tX(Z[][] arrays) {\\n\" + ", "+\t\t\t\t\"\t\tz_arrays = arrays;\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tprivate void foo(Z[] args) {\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tvoid bar() {\\n\" + ", "+\t\t\t\t\"\t\tfor (int i=0; i<z_arrays.length; i++)\\n\" + ", "+\t\t\t\t\"\t\t\tfoo(z_arrays[i]);\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\");", "+\t\t\tIType type = workingCopy.getType(\"X\");", "+\t\t\tIMethod method = type.getMethod(\"X\", new String[] {\"[[QZ;\"});", "+\t\t\t// Search for constructor declarations and references", "+\t\t\tsearch(method, ALL_OCCURRENCES);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b77093/X.java b77093.X() [this(new Z[10][])] EXACT_MATCH\\n\"+", "+\t\t\t\t\"src/b77093/X.java b77093.X(Z[][]) [X] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (workingCopy != null)", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b07c901db3646a88dbaf7ac1979fa3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void testMethodReferenceBug41018() throws CoreException", "signatureAfterChange": " \tpublic void testBug41018() throws CoreException", "diff": ["-\t */", "-\tpublic void testMethodReferenceBug41018() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs\", \"src\", \"b41018\", \"A.java\").getType(\"A\");", "-\t\tIMethod method = type.getMethod(\"methodA\", new String[] { \"QClassB.InnerInterface;\" });", "-\t//\tJavaSearchResultCollector resultCollector = new JavaSearchResultCollector();", "-\t\tsearch(", "-\t\t\tmethod, ", "-\t\t\tREFERENCES, ", "-\t\t\tgetJavaSearchScopeBugs(), ", "-\t\t\tthis.resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b41018/A.java void b41018.A.anotherMethod() [methodA(null)] EXACT_MATCH\",", "-\t\t\tthis.resultCollector);", "-\t}", "+\tpublic void testBug41018() throws CoreException {", "+\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b41018/A.java\",", "+\t\t\t\t\"package b41018;\\n\" +", "+\t\t\t\t\"public class A {\\n\" + ", "+\t\t\t\t\"\tprotected void anotherMethod() {\\n\" + ", "+\t\t\t\t\"\t\tmethodA(null);\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tprivate Object methodA(ClassB.InnerInterface arg3) {\\n\" + ", "+\t\t\t\t\"\t\treturn null;\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"class ClassB implements InterfaceB {\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"interface InterfaceB {\\n\" + ", "+\t\t\t\t\"\tinterface InnerInterface {\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\"", "+\t\t\t\t);", "+\t\t\tIType type = workingCopy.getType(\"A\");", "+\t\t\tIMethod method = type.getMethod(\"methodA\", new String[] { \"QClassB.InnerInterface;\" });", "+\t\t\tsearch(method, REFERENCES);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b41018/A.java void b41018.A.anotherMethod() [methodA(null)] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (workingCopy != null)", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t}", "+\t}"]}], "num": 26029}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a81796664bc64ee1e9da96cafbe2619", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "086d4774fbbabaddebe102c7973c6d05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodPattern.java", "commitBeforeChange": "333e183ebe56f659f1083c452edbf2ef4089fa56", "commitAfterChange": "f09e5b387a9b27a1161db6587b5598aa2acd37a0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public MethodPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] selector,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] returnQualification,  \tchar[] returnSimpleName, \tString returnSignature, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tIMethod method, \tint matchRule)", "signatureAfterChange": " public MethodPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] selector,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] returnQualification,  \tchar[] returnSimpleName, \tString returnSignature, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tIMethod method, \tint matchRule)", "diff": ["-\t", "-\t// See if we must resolve specifically for generics", "-\tif (parameterSimpleNames != null && parameterSimpleNames.length > 0) {", "-\t\tint psLength = parameterSimpleNames.length;", "-\t\ttry {", "-\t\t\t// Currently, we need to resolve for generic if one of method type argument", "-\t\t\t// equals to one of declaring type type parameter", "-\t\t\tITypeParameter[] typeParameters = this.declaringType.getTypeParameters();", "-\t\t\tif (typeParameters != null && typeParameters.length > 0) {", "-\t\t\t\tint tpLength = typeParameters.length;", "-\t\t\t\tfor (int i=0; i<psLength && !this.mustResolveGeneric; i++) {", "-\t\t\t\t\tfor (int j=0; j<tpLength && !this.mustResolveGeneric; j++) {", "-\t\t\t\t\t\tif (CharOperation.equals(parameterSimpleNames[i], typeParameters[j].getElementName().toCharArray())) {", "-\t\t\t\t\t\t\tthis.mustResolveGeneric = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "729fbf2c8bc008bb5d22d582fa4d663c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodPattern.java", "commitBeforeChange": "985d711c4d0025a5a5339070a94d4c12c56e272f", "commitAfterChange": "976958dd8f78f6a588e6f87c0884e364c261d98d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public MethodPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] selector,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] returnQualification,  \tchar[] returnSimpleName, \tString returnSignature, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tIMethod method, \tint matchRule)", "signatureAfterChange": " public MethodPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] selector,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] returnQualification,  \tchar[] returnSimpleName, \tString returnSignature, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tIMethod method, \tint matchRule)", "diff": ["+\t", "+\t// See if we must resolve specifically for generics", "+\tif (parameterSimpleNames != null && parameterSimpleNames.length > 0) {", "+\t\tint psLength = parameterSimpleNames.length;", "+\t\ttry {", "+\t\t\t// Currently, we need to resolve for generic if one of method type argument", "+\t\t\t// equals to one of declaring type type parameter", "+\t\t\tITypeParameter[] typeParameters = this.declaringType.getTypeParameters();", "+\t\t\tif (typeParameters != null && typeParameters.length > 0) {", "+\t\t\t\tint tpLength = typeParameters.length;", "+\t\t\t\tfor (int i=0; i<psLength && !this.mustResolveGeneric; i++) {", "+\t\t\t\t\tfor (int j=0; j<tpLength && !this.mustResolveGeneric; j++) {", "+\t\t\t\t\t\tif (CharOperation.equals(parameterSimpleNames[i], typeParameters[j].getElementName().toCharArray())) {", "+\t\t\t\t\t\t\tthis.mustResolveGeneric = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (JavaModelException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t}"]}], "num": 47433}
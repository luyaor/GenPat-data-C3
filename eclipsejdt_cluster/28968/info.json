{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "611c9bf4bf854c3e1c2ce3e3dd14099e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00d5c4b47615c9fd47561a64de3cd0df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void resolve(MethodScope methScope)", "signatureAfterChange": " \tpublic void resolve(MethodScope methScope)", "diff": ["-\t\t\tif (methDecl != null && (methDecl.isConstructor() || overriding) && !superRef) {", "-\t\t\t\tif (this.seeReferences[i] instanceof JavadocMessageSend) {", "-\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) this.seeReferences[i];", "-\t\t\t\t\t// if binding is valid then look if we have a reference to an overriden method/constructor", "-\t\t\t\t\tif (messageSend.binding != null && messageSend.binding.isValidBinding() && messageSend.actualReceiverType instanceof ReferenceBinding) {", "-\t\t\t\t\t\tReferenceBinding methodReceiverType = (ReferenceBinding) messageSend.actualReceiverType;", "-\t\t\t\t\t\tif ((methodReceiverType.isSuperclassOf(methDecl.binding.declaringClass) || (methodReceiverType.isInterface() && methDecl.binding.declaringClass.implementsInterface(methodReceiverType, true))) &&", "-\t\t\t\t\t\t\t\tCharOperation.equals(messageSend.selector, methDecl.selector) &&", "-\t\t\t\t\t\t\t\t(methDecl.binding.returnType.isCompatibleWith(messageSend.binding.returnType))) {", "-\t\t\t\t\t\t\tif (messageSend.arguments == null && methDecl.arguments == null) {", "-\t\t\t\t\t\t\t\tsuperRef = true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\telse if (messageSend.arguments != null && methDecl.arguments != null) {", "-\t\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParameterErasuresEqual(messageSend.binding);", "+\t\t\tif (methDecl != null && !superRef) {", "+\t\t\t\tif (!methDecl.isConstructor()) {", "+\t\t\t\t\tif (overriding && this.seeReferences[i] instanceof JavadocMessageSend) {", "+\t\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) this.seeReferences[i];", "+\t\t\t\t\t\t// if binding is valid then look if we have a reference to an overriden method/constructor", "+\t\t\t\t\t\tif (messageSend.binding != null && messageSend.binding.isValidBinding() && messageSend.actualReceiverType instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\tReferenceBinding methodReceiverType = (ReferenceBinding) messageSend.actualReceiverType;", "+\t\t\t\t\t\t\tTypeBinding superType = methDecl.binding.declaringClass.findSuperTypeOriginatingFrom(methodReceiverType);", "+\t\t\t\t\t\t\tif (superType != null && superType.original() != methDecl.binding.declaringClass && CharOperation.equals(messageSend.selector, methDecl.selector)) {", "+\t\t\t\t\t\t\t\tif (methScope.environment().methodVerifier().doesMethodOverride(methDecl.binding, messageSend.binding.original())) {", "+\t\t\t\t\t\t\t\t\tsuperRef = true;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\telse if (this.seeReferences[i] instanceof JavadocAllocationExpression) {", "+\t\t\t\t} else if (this.seeReferences[i] instanceof JavadocAllocationExpression) {", "-\t\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(allocationExpr.resolvedType)) {", "-\t\t\t\t\t\t\tif (allocationExpr.arguments == null && methDecl.arguments == null) {", "-\t\t\t\t\t\t\t\tsuperRef = true;", "+\t\t\t\t\t\tReferenceBinding allocType = (ReferenceBinding) allocationExpr.resolvedType.original();", "+\t\t\t\t\t\tReferenceBinding superType = (ReferenceBinding) methDecl.binding.declaringClass.findSuperTypeOriginatingFrom(allocType);", "+\t\t\t\t\t\tif (superType != null && superType.original() != methDecl.binding.declaringClass) {", "+\t\t\t\t\t\t\tMethodBinding superConstructor = methScope.getConstructor(superType, methDecl.binding.parameters, allocationExpr);", "+\t\t\t\t\t\t\tif (superConstructor.isValidBinding() && superConstructor.original() == allocationExpr.binding.original()) {", "+\t\t\t\t\t\t\t\tif (superConstructor.areParametersEqual(methDecl.binding)) {", "+\t\t\t\t\t\t\t\t\tsuperRef = true;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\telse if (allocationExpr.arguments != null && methDecl.arguments != null && allocationExpr.arguments.length == methDecl.arguments.length) {", "-\t\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersCompatibleWith(allocationExpr.binding.parameters);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t}\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f61c64e0c2cc837bfde1295962f86e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "diff": ["-public void generateReadSequence(BlockScope currentScope, CodeStream codeStream) {", "+public FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream) {", "+    ", "-", "+\tFieldBinding lastFieldBinding = null;", "+\tTypeBinding lastGenericCast = null;", "+\t", "-\t\t\tthis.lastFieldBinding = (FieldBinding) this.codegenBinding;", "+\t\t\tlastFieldBinding = (FieldBinding) this.codegenBinding;", "+\t\t\tlastGenericCast = this.genericCast;", "-\t\t\tif (this.lastFieldBinding.constant != NotAConstant) {", "+\t\t\tif (lastFieldBinding.constant != NotAConstant) {", "-\t\t\t\tif (this.lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "-\t\t\t\t\tif (!this.lastFieldBinding.isStatic()) {", "+\t\t\t\tif (lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "+\t\t\t\t\tif (!lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t\tif (emulationPath == null) {", "-\t\t\t\t\t\t\t\t// internal error, per construction we should have found it", "-\t\t\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, targetType, currentScope);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, targetType, currentScope);", "-\t\t\t\t\tif (!this.lastFieldBinding.isStatic()) {", "+\t\t\t\t\tif (!lastFieldBinding.isStatic()) {", "-\t\t\tthis.lastFieldBinding = null;", "-\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "+\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\tif (path == null) {", "-\t\t\t\t\t\t// emulation was not possible (should not happen per construction)", "-\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, localBinding, currentScope);", "-\t\t\t\t\t}", "+\t\t\t\t\tcodeStream.generateOuterAccess(path, this, localBinding, currentScope);", "-\t\t\tif (this.lastFieldBinding != null) {", "+\t\t\tTypeBinding nextGenericCast = this.otherGenericCasts == null ? null : this.otherGenericCasts[i];", "+\t\t\tif (lastFieldBinding != null) {", "-\t\t\t\t\tif (this.lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "-\t\t\t\t\t\tif (this.lastFieldBinding.constant != NotAConstant) {", "-\t\t\t\t\t\t\tif (this.lastFieldBinding != this.codegenBinding && !this.lastFieldBinding.isStatic()) {", "+\t\t\t\t\tif (lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "+\t\t\t\t\t\tif (lastFieldBinding.constant != NotAConstant) {", "+\t\t\t\t\t\t\tif (lastFieldBinding != this.codegenBinding && !lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t\tcodeStream.generateConstant(this.lastFieldBinding.constant, 0);", "-\t\t\t\t\t\t} else if (this.lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t\tcodeStream.getstatic(this.lastFieldBinding);", "+\t\t\t\t\t\t\tcodeStream.generateConstant(lastFieldBinding.constant, 0);", "+\t\t\t\t\t\t} else if (lastFieldBinding.isStatic()) {", "+\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t\t\t\t\tcodeStream.getfield(this.lastFieldBinding);", "+\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(this.lastFieldBinding);", "+\t\t\t\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(lastFieldBinding);", "+\t\t\t\t\tif (lastGenericCast != null) codeStream.checkcast(lastGenericCast);", "-\t\t\t\t\tif (this.codegenBinding != this.lastFieldBinding && !this.lastFieldBinding.isStatic()){", "+\t\t\t\t\tif (this.codegenBinding != lastFieldBinding && !lastFieldBinding.isStatic()){", "-\t\t\tthis.lastFieldBinding = nextField;", "-\t\t\tif (this.lastFieldBinding != null && !this.lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "-\t\t\t\tif (this.lastFieldBinding.isStatic()) {", "+\t\t\tlastFieldBinding = nextField;", "+\t\t\tlastGenericCast = nextGenericCast;", "+\t\t\tif (lastFieldBinding != null && !lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "+\t\t\t\tif (lastFieldBinding.isStatic()) {", "+\treturn lastFieldBinding;"]}], "num": 28968}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3cf808bb17445ff99f47013a40a14611", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94bed3ed3faef13cb8785067a0fe89f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "10d64116081cd3dcebc82b39ed7b738621563d86", "commitAfterChange": "ef7b17d3543c3d2642c8d7fbf12adbbfa27e7bc5", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\tpublic void generateCode(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tboolean valueRequired) {", "+\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {", "-\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (!valueRequired) {", "+\t\t\t\t\t// the resolveType cannot be double or long", "+\t\t\t\t\tcodeStream.pop();", "-\t\texpression.generateCode(", "-\t\t\tcurrentScope,", "-\t\t\tcodeStream,", "-\t\t\tvalueRequired || needRuntimeCheckcast);", "-\t\tif (needRuntimeCheckcast ", "-\t\t\t\t&& this.expression.postConversionType(currentScope) != this.resolvedType) { // no need to issue a checkcast if already done as genericCast", "+\t\texpression.generateCode(currentScope, codeStream, valueRequired || needRuntimeCheckcast);", "+\t\tif (needRuntimeCheckcast && this.expression.postConversionType(currentScope) != this.resolvedType) { // no need to issue a checkcast if already done as genericCast", "-\t\t\tif (valueRequired) {", "-\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t} else {", "-\t\t\t\tcodeStream.pop();", "-\t\t\t}", "-\t\t} else {", "-\t\t\tif (valueRequired)", "-\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t}", "+\t\tif (valueRequired) {", "+\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t} else if (needRuntimeCheckcast) {", "+\t\t\tcodeStream.pop();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6fa59a33e1980b13fcdccd2c8774a91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java", "commitBeforeChange": "6c5ff7a40e06214003233124a78f91b46a0db4e6", "commitAfterChange": "abfab6e38455079c19f7f3fadcf15c77c144ade8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, \tCodeStream codeStream, boolean valueRequired)", "diff": ["-\tpublic void generateCode(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tboolean valueRequired) {", "+\tpublic void generateCode(BlockScope currentScope, \tCodeStream codeStream, boolean valueRequired) {", "-\t\tif (initializer != null) {", "-\t\t\tinitializer.generateCode(currentScope, codeStream, valueRequired);", "+\t\tif (this.initializer != null) {", "+\t\t\tthis.initializer.generateCode(currentScope, codeStream, valueRequired);", "-\t\tint nonNullDimensionsLength = 0;", "-\t\tfor (int i = 0, max = dimensions.length; i < max; i++)", "-\t\t\tif (dimensions[i] != null) {", "-\t\t\t\tdimensions[i].generateCode(currentScope, codeStream, true);", "-\t\t\t\tnonNullDimensionsLength++;", "-\t\t\t}", "+\t\tint explicitDimCount = 0;", "+\t\tfor (int i = 0, max = this.dimensions.length; i < max; i++) {", "+\t\t\tExpression dimExpression;", "+\t\t\tif ((dimExpression = this.dimensions[i]) == null) break; // implicit dim, no further explict after this point", "+\t\t\tdimExpression.generateCode(currentScope, codeStream, true);", "+\t\t\texplicitDimCount++;", "+\t\t}", "-\t\t// Generate a sequence of bytecodes corresponding to an array allocation", "-\t\tif (this.resolvedType.dimensions() == 1) {", "+\t\t// array allocation", "+\t\tif (explicitDimCount == 1) {", "-\t\t\tcodeStream.multianewarray(this.resolvedType, nonNullDimensionsLength);", "+\t\t\tcodeStream.multianewarray(this.resolvedType, explicitDimCount);", "-", "-\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-"]}], "num": 57283}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d8d399e3c970f504f0db29b89e3e1096", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57840e3b234a33c014b0c159c6e1ec9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "c5d1291515e72a1b02e2dba658336524eb7964dc", "commitAfterChange": "5c7f45483ff98aea12080f74206c0fab992839fd", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t// if compliance 1.4 & source 1.3 => target is 1.2 if not specified", "-\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_3)){", "-\t\t\tif (didSpecifyCompliance", "-\t\t\t\t&& this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)", "-\t\t\t\t&& !didSpecifyTarget) {", "+\t\t// set default target according to compliance & sourcelevel.", "+\t\tif (!didSpecifyTarget) {", "+\t\t\tif (this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);", "+\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)) {", "+\t\t\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)) {", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f19a07cd4116e046eb4e2fddd4f4c062", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "616a41b14ead174db92c630ec6ed7f1d666a9b67", "commitAfterChange": "645b7eff21d5db2b90380f1d4478beb9fa33f107", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": " public void configure(String[] argv)", "signatureAfterChange": " public void configure(String[] argv)", "diff": ["-\t\t\t\tif (currentArg.equals(\"-proceedOnError\")) { //$NON-NLS-1$", "+\t\t\t\tif (currentArg.startsWith(\"-proceedOnError\")) { //$NON-NLS-1$", "+\t\t\t\t\tint length = currentArg.length();", "+\t\t\t\t\tif (length > 15) {", "+\t\t\t\t\t\tif (currentArg.equals(\"-proceedOnError:Fatal\")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_FatalOptionalError, CompilerOptions.ENABLED);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthrow new IllegalArgumentException(", "+\t\t\t\t\t\t\t\t\tthis.bind(\"configure.invalidWarningConfiguration\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_FatalOptionalError, CompilerOptions.DISABLED);", "+\t\t\t\t\t}"]}], "num": 66118}
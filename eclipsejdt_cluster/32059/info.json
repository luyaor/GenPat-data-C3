{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a26a71a9930147cb55dc640510b9d34", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46973a05370c34e7d0b7bfa8087e8db5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "809c21ac086d44a312f3c31c6951126c6520aeaa", "commitAfterChange": "495067f03b4b0bfec29183e25c4db2e6b2a1dc02", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tIPath projectOutputLocation, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tIPath projectOutputLocation, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError, \t\tMap reverseMap) \t\tthrows JavaModelException", "diff": ["-\t\tboolean ignoreUnresolvedEntry,", "-\t\tboolean generateMarkerOnError) // if unresolved entries are met, should it trigger initializations", "+\t\tboolean ignoreUnresolvedEntry, // if unresolved entries are met, should it trigger initializations", "+\t\tboolean generateMarkerOnError,", "+\t\tMap reverseMap) // can be null if not interested in reverse mapping", "+\t\t\t\t\t\tif (reverseMap != null) reverseMap.put(resolvedEntry.getPath(), rawEntry);", "+\t\t\t\t\t\tif (reverseMap != null) reverseMap.put(cEntry.getPath(), rawEntry);", "+\t\t\t\t\tif (reverseMap != null) reverseMap.put(rawEntry.getPath(), rawEntry);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "593616d42a8adbbe167df4464e070374", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "12bbec9151d1b613c62f44289e9e604128f21de0", "commitAfterChange": "cfad6931331ca38f2461ad24853dd9b6dfa652de", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void computePackageFragmentRoots( \t\tIClasspathEntry resolvedEntry, \t\tObjectVector accumulatedRoots,  \t\tHashSet rootIDs,  \t\tIClasspathEntry referringEntry, \t\tboolean checkExistency, \t\tboolean retrieveExportedRoots, \t\tMap rootToResolvedEntries) throws JavaModelException", "signatureAfterChange": " \tpublic void computePackageFragmentRoots( \t\tIClasspathEntry resolvedEntry, \t\tObjectVector accumulatedRoots,  \t\tHashSet rootIDs,  \t\tIClasspathEntry referringEntry, \t\tboolean checkExistency, \t\tboolean retrieveExportedRoots, \t\tMap rootToResolvedEntries) throws JavaModelException", "diff": ["-\t\t\t\t\t\t\trootToResolvedEntries == null ? resolvedEntry : ((ClasspathEntry)resolvedEntry).combineWith(referringEntry), // only combine if need to build the reverse map ", "+\t\t\t\t\t\t\trootToResolvedEntries == null ? resolvedEntry : ((ClasspathEntry)resolvedEntry).combineWith((ClasspathEntry) referringEntry), // only combine if need to build the reverse map ", "-\t\t\tif (rootToResolvedEntries != null) rootToResolvedEntries.put(root, ((ClasspathEntry)resolvedEntry).combineWith(referringEntry));", "+\t\t\tif (rootToResolvedEntries != null) rootToResolvedEntries.put(root, ((ClasspathEntry)resolvedEntry).combineWith((ClasspathEntry) referringEntry));"]}], "num": 32059}
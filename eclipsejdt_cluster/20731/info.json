{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4185275bd7b1aee6ec7d51384deb1bd2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04c2966e3e6f6445eebd908410780372", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "d3da1d109c57a90a2bd8342736abf401463d58e5", "commitAfterChange": "ca8a326624990cbfccad61d74787a54a65ea486c", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public static int validateMatchRule(String stringPattern, int matchRule)", "signatureAfterChange": " public static int validateMatchRule(String stringPattern, int matchRule)", "diff": ["+\tint starIndex = stringPattern.indexOf('*');", "+\tint questionIndex = stringPattern.indexOf('?');", "+\tif (starIndex < 0 && questionIndex < 0) {", "+\t\t// reset pattern match bit if any", "+\t\tmatchRule &= ~R_PATTERN_MATCH;", "+\t} else {", "+\t\t// force Pattern rule", "+\t\tmatchRule |= R_PATTERN_MATCH;", "+\t}", "-\t\tif ((matchRule & R_PREFIX_MATCH) != 0) {", "-\t\t\tmatchRule &= ~R_PREFIX_MATCH;", "-\t\t}", "-\t\tint starIndex = stringPattern.indexOf('*');", "-\t\tint questionIndex = stringPattern.indexOf('?');", "-\t\tif (starIndex < 0 && questionIndex < 0) {", "-\t\t\t// No need to have pattern match", "-\t\t\tmatchRule &= ~R_PATTERN_MATCH;", "-\t\t} else {", "-\t\t\t// Remove Camel Case match when there's '*' or '?' characters", "-\t\t\tif ((matchRule & R_CAMELCASE_MATCH) != 0) {", "-\t\t\t\tmatchRule &= ~R_CAMELCASE_MATCH;", "-\t\t\t}", "-\t\t}", "+\t\t// remove Camel Case and Prefix match bits if any", "+\t\tmatchRule &= ~R_CAMELCASE_MATCH;", "+\t\tmatchRule &= ~R_PREFIX_MATCH;", "+\t\tboolean uppercase = false;", "-\t\t\tchar ch = stringPattern.charAt(i++);", "+\t\t\tchar ch = stringPattern.charAt(i);", "+\t\t\t// at least one uppercase character is need in CamelCase pattern", "+\t\t\t// (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=136313)", "+\t\t\tif (!uppercase) uppercase = ScannerHelper.isUpperCase(ch);", "+\t\tvalidCamelCase = validCamelCase && uppercase;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab176a90c801661d0c159495bdfa40e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "ba64706f201921fc94a5e5ed779b077316fb0266", "commitAfterChange": "b574ad64a0e10ca20ad6529e036d6695d43be062", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r private void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\r", "+\r", "+\tboolean didSpecifyCompliance = false;\r", "+\t\t\r", "-\t\tif (currentArg.equals(\"-jck\")) { //$NON-NLS-1$\r", "-\t\t\tmode = InsideJCK;\r", "+\t\tif (currentArg.equals(\"-1.3\")) { //$NON-NLS-1$\r", "+\t\t\tif (didSpecifyCompliance) {\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateCompliance\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t}\r", "+\t\t\tdidSpecifyCompliance = true;\r", "+\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);\r", "+\t\t\tmode = Default;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.equals(\"-1.4\")) { //$NON-NLS-1$\r", "+\t\t\tif (didSpecifyCompliance) {\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateCompliance\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t}\r", "+\t\t\tdidSpecifyCompliance = true;\r", "+\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);\r", "+\t\t\tmode = Default;\r", "-\t\t\t}\r", "-\t\t\tmode = Default;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (mode == InsideJCK){\r", "-\t\t\tif (currentArg.equals(\"1.3\")) { //$NON-NLS-1$\r", "-\t\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);\r", "-\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$\r", "-\t\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);\r", "-\t\t\t} else {\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.jck\",currentArg)); //$NON-NLS-1$\r"]}], "num": 20731}
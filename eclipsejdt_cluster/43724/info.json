{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7dea5f9269b5767d4e35a91566dd1514", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "525a0e8937615acb174bc1063079ceea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "886274eeca44ac156a0ab29fb479330630b97083", "commitAfterChange": "0df073aaf80ff21c61e718b91c8d484463b96210", "methodNumberBeforeChange": 235, "methodNumberAfterChange": 237, "signatureBeforeChange": " public void javadocMissing(int sourceStart, int sourceEnd, int modifiers)", "signatureAfterChange": " public void javadocMissing(int sourceStart, int sourceEnd, int severity, int modifiers)", "diff": ["+}", "+public void javadocMissing(int sourceStart, int sourceEnd, int severity, int modifiers){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb62f17cb1d203268dd9d9a01e7a6842", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "0cc61e9905c3f603dab789f6a44abfa63094212c", "commitAfterChange": "dfe6cc33aaef3c9c6160f09ab2a92557f3d235f0", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprotected void processBeginToCompile(ICompilationUnit[] sourceUnits)", "signatureAfterChange": " \tprotected void internalBeginToCompile(ICompilationUnit[] sourceUnits, int maxUnits)", "diff": ["-\t */", "-\tprotected void processBeginToCompile(ICompilationUnit[] sourceUnits) {", "-\t\tint maxUnits = sourceUnits.length;", "-", "-\t\t// Switch the current policy and compilation result for this unit to the requested one.", "-\t\tfor (int i = 0; i < maxUnits; i++) {", "-\t\t\tCompilationUnitDeclaration parsedUnit;", "-\t\t\tCompilationResult unitResult =", "-\t\t\t\tnew CompilationResult(sourceUnits[i], i, maxUnits, this.options.maxProblemsPerUnit);", "-\t\t\ttry {", "-\t\t\t\tif (options.verbose) {", "-\t\t\t\t\tthis.out.println(", "-\t\t\t\t\t\tMessages.bind(Messages.compilation_request,", "-\t\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\t\tString.valueOf(i + 1),", "-\t\t\t\t\t\t\tString.valueOf(maxUnits),", "-\t\t\t\t\t\t\tnew String(sourceUnits[i].getFileName())", "-\t\t\t\t\t\t}));", "-\t\t\t\t}", "-\t\t\t\t// diet parsing for large collection of units", "-\t\t\t\tif (totalUnits < parseThreshold) {", "-\t\t\t\t\tparsedUnit = parser.parse(sourceUnits[i], unitResult);", "-\t\t\t\t} else {", "-\t\t\t\t\tparsedUnit = parser.dietParse(sourceUnits[i], unitResult);", "-\t\t\t\t}", "-\t\t\t\t// initial type binding creation", "-\t\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "-\t\t\t\tthis.addCompilationUnit(sourceUnits[i], parsedUnit);", "-\t\t\t\tImportReference currentPackage = parsedUnit.currentPackage;", "-\t\t\t\tif (currentPackage != null) {", "-\t\t\t\t\tunitResult.recordPackageName(currentPackage.tokens);", "-\t\t\t\t}", "-\t\t\t\t//} catch (AbortCompilationUnit e) {", "-\t\t\t\t//\trequestor.acceptResult(unitResult.tagAsAccepted());", "-\t\t\t} finally {", "-\t\t\t\tsourceUnits[i] = null; // no longer hold onto the unit", "-\t\t\t}", "-\t\t}", "-\t\t// binding resolution", "-\t\tlookupEnvironment.completeTypeBindings();", "+\t */", "+\tprotected void internalBeginToCompile(ICompilationUnit[] sourceUnits, int maxUnits) {", "+\t\t// Switch the current policy and compilation result for this unit to the requested one.", "+\t\tfor (int i = 0; i < maxUnits; i++) {", "+\t\t\tCompilationUnitDeclaration parsedUnit;", "+\t\t\tCompilationResult unitResult =", "+\t\t\t\tnew CompilationResult(sourceUnits[i], i, maxUnits, this.options.maxProblemsPerUnit);", "+\t\t\ttry {", "+\t\t\t\tif (options.verbose) {", "+\t\t\t\t\tthis.out.println(", "+\t\t\t\t\t\tMessages.bind(Messages.compilation_request,", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tString.valueOf(i + 1),", "+\t\t\t\t\t\t\tString.valueOf(maxUnits),", "+\t\t\t\t\t\t\tnew String(sourceUnits[i].getFileName())", "+\t\t\t\t\t\t}));", "+\t\t\t\t}", "+\t\t\t\t// diet parsing for large collection of units", "+\t\t\t\tif (totalUnits < parseThreshold) {", "+\t\t\t\t\tparsedUnit = parser.parse(sourceUnits[i], unitResult);", "+\t\t\t\t} else {", "+\t\t\t\t\tparsedUnit = parser.dietParse(sourceUnits[i], unitResult);", "+\t\t\t\t}", "+\t\t\t\t// initial type binding creation", "+\t\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "+\t\t\t\tthis.addCompilationUnit(sourceUnits[i], parsedUnit);", "+\t\t\t\tImportReference currentPackage = parsedUnit.currentPackage;", "+\t\t\t\tif (currentPackage != null) {", "+\t\t\t\t\tunitResult.recordPackageName(currentPackage.tokens);", "+\t\t\t\t}", "+\t\t\t\t//} catch (AbortCompilationUnit e) {", "+\t\t\t\t//\trequestor.acceptResult(unitResult.tagAsAccepted());", "+\t\t\t} finally {", "+\t\t\t\tsourceUnits[i] = null; // no longer hold onto the unit", "+\t\t\t}", "+\t\t}", "+\t\t// binding resolution", "+\t\tlookupEnvironment.completeTypeBindings();", "+\t}"]}], "num": 43724}
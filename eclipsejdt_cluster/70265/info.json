{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32114b07cb7da7fe62a4a4b33ca2e83b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00e5e503a7fe5fccda887586f5a16994", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "4e0e44e12d531b0f9a299237d2e668d6176cd234", "commitAfterChange": "2156fedddc9b679afe1f45ef1e9d318ac4df4d9a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " boolean resolvePart2(ResolutionState state)", "signatureAfterChange": " boolean resolvePart2(ResolutionState state)", "diff": ["-\t\tTypeBinding [] inferredTypes = inferElidedTypes((ParameterizedTypeBinding) this.resolvedType, this.resolvedType.enclosingType(), state.argumentTypes, state.scope);", "+\t\tTypeBinding [] inferredTypes = inferElidedTypes((ParameterizedTypeBinding) this.resolvedType, this.resolvedType.enclosingType(), this.argumentTypes, state.scope);", "-\tthis.binding = findConstructorBinding(state.scope, this, receiverType, state.argumentTypes);", "+\tthis.binding = findConstructorBinding(state.scope, this, receiverType, this.argumentTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24cb023af42982cf36cbb2ea6b1ecb03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " void updateCaches(UnresolvedReferenceBinding unresolvedType, ReferenceBinding resolvedType)", "signatureAfterChange": " void updateCaches(UnresolvedReferenceBinding unresolvedType, ReferenceBinding resolvedType)", "diff": ["-\t\t\t\tkeys[i] = resolvedType.isGenericType() ? createRawType(resolvedType, null) : resolvedType; // hashCode is based on compoundName so this works", "+\t\t\t\tkeys[i] = resolvedType.isGenericType() ? createRawType(resolvedType, resolvedType.enclosingType()) : resolvedType; // hashCode is based on compoundName so this works", "-//\tAccessRestriction accessRestriction = this.accessRestrictions.get(unresolvedType);", "-//\tif (accessRestriction != null) {", "-//\t\tthis.accessRestrictions.remove(unresolvedType);", "-//\t\tthis.accessRestrictions.put(resolvedType, accessRestriction);", "-//\t}"]}], "num": 70265}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e81bfd3bd53013803d90edc07437c4fe", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01708c07e50c3bd6fbb0827d87541e7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "2e3b506bd16c2dfca1b01615ff44e6bfc5c42dab", "commitAfterChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 41, "signatureBeforeChange": " public final void setSource(char[] sourceString)", "signatureAfterChange": " public final void setSource(char[] sourceString)", "diff": ["-\tstartPosition = -1;", "-\teofPosition = sourceLength;", "-\tinitialPosition = currentPosition = 0;", "-\tcontainsAssertKeyword = false;", "-\twithoutUnicodeBuffer = new char[sourceLength];", "+\tthis.startPosition = -1;", "+\tthis.eofPosition = sourceLength;", "+\tthis.initialPosition = this.currentPosition = 0;", "+\tthis.containsAssertKeyword = false;", "+\tthis.withoutUnicodeBuffer = new char[sourceLength]; // TODO (philippe) should only allocate when needed"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "109e0ff81b0334da5170f5d72a47bd56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java", "commitBeforeChange": "a3974de2e53f4a7f6384d82823b901bd516b0970", "commitAfterChange": "7e5be365074b33481ef62dd48f6cd0d39e341472", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic void traverse( \t\tIAbstractSyntaxTreeVisitor visitor, \t\tCompilationUnitScope scope)", "signatureAfterChange": "  \tpublic void traverse( \t\tIAbstractSyntaxTreeVisitor visitor, \t\tCompilationUnitScope unitScope)", "diff": ["-\t\tCompilationUnitScope scope) {", "+\t\tCompilationUnitScope unitScope) {", "-\t\t\tif (visitor.visit(this, scope)) {", "+\t\t\tif (visitor.visit(this, this.scope)) {", "-\t\t\t\t\tcurrentPackage.traverse(visitor, scope);", "+\t\t\t\t\tcurrentPackage.traverse(visitor, this.scope);", "-\t\t\t\t\t\timports[i].traverse(visitor, scope);", "+\t\t\t\t\t\timports[i].traverse(visitor, this.scope);", "-\t\t\t\t\t\ttypes[i].traverse(visitor, scope);", "+\t\t\t\t\t\ttypes[i].traverse(visitor, this.scope);", "-\t\t\tvisitor.endVisit(this, scope);", "+\t\t\tvisitor.endVisit(this, this.scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27c0425ef71e204dde917738f9054ef7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "9f63437bec67bc6f1450b706ffa6a59a67485b74", "commitAfterChange": "2b5868a69a1295fe1d99f9e80995ceed273132ed", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t */", "-\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {", "-\t", "-\t\tint pc = codeStream.position;", "-\t\tboolean needRuntimeCheckcast = (this.bits & GenerateCheckcast) != 0;", "-\t\tif (constant != Constant.NotAConstant) {", "-\t\t\tif (valueRequired || needRuntimeCheckcast) { // Added for: 1F1W9IG: IVJCOM:WINNT - Compiler omits casting check", "-\t\t\t\tcodeStream.generateConstant(constant, implicitConversion);", "-\t\t\t\tif (needRuntimeCheckcast) {", "-\t\t\t\t\tcodeStream.checkcast(this.resolvedType);", "-\t\t\t\tif (!valueRequired) {", "-\t\t\t\t\t// the resolveType cannot be double or long", "-\t\t\t\t\tcodeStream.pop();", "-\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t\t\treturn;", "-\t\t}", "-\t\texpression.generateCode(currentScope, codeStream, valueRequired || needRuntimeCheckcast);", "-\t\tif (needRuntimeCheckcast && this.expression.postConversionType(currentScope) != this.resolvedType.erasure()) { // no need to issue a checkcast if already done as genericCast", "-\t\t\tcodeStream.checkcast(this.resolvedType);", "-\t\t}", "-\t\tif (valueRequired) {", "-\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t} else if (needRuntimeCheckcast) {", "-\t\t\tcodeStream.pop();", "+ */", "+public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {", "+\tint pc = codeStream.position;", "+\tboolean needRuntimeCheckcast = (this.bits & ASTNode.GenerateCheckcast) != 0;", "+\tif (this.constant != Constant.NotAConstant) {", "+\t\tif (valueRequired || needRuntimeCheckcast) { // Added for: 1F1W9IG: IVJCOM:WINNT - Compiler omits casting check", "+\t\t\tcodeStream.generateConstant(this.constant, this.implicitConversion);", "+\t\t\tif (needRuntimeCheckcast) {", "+\t\t\t\tcodeStream.checkcast(this.resolvedType);", "+\t\t\t}", "+\t\t\tif (!valueRequired) {", "+\t\t\t\t// the resolveType cannot be double or long", "+\t\t\t\tcodeStream.pop();", "+\t\t\t}", "+\t\treturn;", "+\tthis.expression.generateCode(currentScope, codeStream, valueRequired || needRuntimeCheckcast);", "+\tif (needRuntimeCheckcast && this.expression.postConversionType(currentScope) != this.resolvedType.erasure()) { // no need to issue a checkcast if already done as genericCast", "+\t\tcodeStream.checkcast(this.resolvedType);", "+\t}", "+\tif (valueRequired) {", "+\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t} else if (needRuntimeCheckcast) {", "+\t\tcodeStream.pop();", "+\t}", "+\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87d71150c70da7ff40e2f8906594d891", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public TypeBinding checkFieldAccess(BlockScope scope)", "signatureAfterChange": " public TypeBinding checkFieldAccess(BlockScope scope)", "diff": ["-\tif (delegateThis == null) {", "+\tif (this.delegateThis == null) {", "-\tFieldBinding fieldBinding = (FieldBinding) binding;", "-\tbits &= ~RestrictiveFlagMASK; // clear bits", "-\tbits |= FIELD;", "+\tFieldBinding fieldBinding = (FieldBinding) this.binding;", "+\tthis.bits &= ~RestrictiveFlagMASK; // clear bits", "+\tthis.bits |= FIELD;", "-\t\t\tconstant = NotAConstant;", "+\t\t\tthis.constant = NotAConstant;", "-\tconstant = FieldReference.getConstantFor(fieldBinding, this, true, scope);", "+\tthis.constant = FieldReference.getConstantFor(fieldBinding, this, true, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a992f2997acb5049b44ecc8ec0d572c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "69622d139cf7be8059928288f19c2f5b2d55bdc5", "commitAfterChange": "bd0b42da240c9e3160dab0f23f741fededbd0813", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " public final void setSource(char[] sourceString)", "signatureAfterChange": " public final void setSource(char[] sourceString)", "diff": ["-\tstartPosition = -1;", "-\teofPosition = sourceLength;", "-\tinitialPosition = currentPosition = 0;", "-\tcontainsAssertKeyword = false;", "-\twithoutUnicodeBuffer = new char[sourceLength]; // TODO (philippe) should only allocate when needed", "+\tthis.startPosition = -1;", "+\tthis.eofPosition = sourceLength;", "+\tthis.initialPosition = this.currentPosition = 0;", "+\tthis.containsAssertKeyword = false;", "+\tthis.withoutUnicodeBuffer = new char[sourceLength]; // TODO (philippe) should only allocate when needed"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4844821ffc63ad898ee5fef7fbd1d5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public TypeBinding resolveTypeVisibility(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveTypeVisibility(BlockScope scope)", "diff": ["-\tif ((this.codegenBinding = binding = localScope.getBinding(tokens, bits & RestrictiveFlagMASK, this, (ReferenceBinding) delegateThis.type)).isValidBinding()) {", "-\t\tbits &= ~RestrictiveFlagMASK; // clear bits", "-\t\tbits |= FIELD;", "+\tif ((this.codegenBinding = this.binding = localScope.getBinding(this.tokens, this.bits & RestrictiveFlagMASK, this, (ReferenceBinding) this.delegateThis.type)).isValidBinding()) {", "+\t\tthis.bits &= ~RestrictiveFlagMASK; // clear bits", "+\t\tthis.bits |= FIELD;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c32d84129be27bc8d33c3cd5fd92ee9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "commitAfterChange": "e2ebe7e46ee7b738e4a2095867ce25f2e5cd118c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void compile(ICompilationUnit[] sourceUnits)", "signatureAfterChange": " \tpublic void compile(ICompilationUnit[] sourceUnits)", "diff": ["-\t\t\tfor (; i < totalUnits; i++) {", "+\t\t\tfor (; i < this.totalUnits; i++) {", "-\t\t\t\t\t\t\t\tString.valueOf(totalUnits),", "+\t\t\t\t\t\t\t\tString.valueOf(this.totalUnits),", "-\t\t\t\t\t\t\tString.valueOf(totalUnits),", "+\t\t\t\t\t\t\tString.valueOf(this.totalUnits),", "-\t\t\tif (totalUnits > 1) {", "+\t\t\tif (this.totalUnits > 1) {", "-\t\t\t\t\tMessages.bind(Messages.compilation_units, String.valueOf(totalUnits))); ", "+\t\t\t\t\tMessages.bind(Messages.compilation_units, String.valueOf(this.totalUnits))); ", "-\t\t\t\t\tMessages.bind(Messages.compilation_unit, String.valueOf(totalUnits))); ", "+\t\t\t\t\tMessages.bind(Messages.compilation_unit, String.valueOf(this.totalUnits))); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4365e0c9de814f88bb5e47b240c9ba8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic TypeBinding checkFieldAccess(BlockScope scope)", "signatureAfterChange": "  public TypeBinding checkFieldAccess(BlockScope scope)", "diff": ["-\t", "-\tpublic TypeBinding checkFieldAccess(BlockScope scope) {", "-\t", "-\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "-\t\t", "-\t\tbits &= ~RestrictiveFlagMASK; // clear bits", "-\t\tbits |= Binding.FIELD;", "-\t\tMethodScope methodScope = scope.methodScope();", "-\t\tboolean isStatic = fieldBinding.isStatic();", "-\t\tif (!isStatic) {", "-\t\t\t// must check for the static status....", "-\t\t\tif (methodScope.isStatic) {", "-\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, fieldBinding);", "-\t\t\t\tthis.constant = Constant.NotAConstant;", "-\t\t\t\treturn fieldBinding.type;", "-\t\t\t}", "-\t\t}", "-\t\tthis.constant = fieldBinding.constant();", "-\t", "-\t\tif (isFieldUseDeprecated(fieldBinding, scope, (this.bits & IsStrictlyAssigned) !=0))", "-\t\t\tscope.problemReporter().deprecatedField(fieldBinding, this);", "-\t", "-\t\tif ((this.bits & IsStrictlyAssigned) == 0", "-\t\t\t\t&& methodScope.enclosingSourceType() == fieldBinding.original().declaringClass", "-\t\t\t\t&& methodScope.lastVisibleFieldID >= 0", "-\t\t\t\t&& fieldBinding.id >= methodScope.lastVisibleFieldID", "-\t\t\t\t&& (!fieldBinding.isStatic() || methodScope.isStatic)) {", "-\t\t\tscope.problemReporter().forwardReference(this, 0, methodScope.enclosingSourceType());", "-\t\t\tthis.bits |= ASTNode.IgnoreNoEffectAssignCheck;", "-\t\t}", "-\t\treturn fieldBinding.type;", "-\t", "+", "+public TypeBinding checkFieldAccess(BlockScope scope) {", "+\tFieldBinding fieldBinding = (FieldBinding) this.binding;", "+\t", "+\tthis.bits &= ~ASTNode.RestrictiveFlagMASK; // clear bits", "+\tthis.bits |= Binding.FIELD;", "+\tMethodScope methodScope = scope.methodScope();", "+\tboolean isStatic = fieldBinding.isStatic();", "+\tif (!isStatic) {", "+\t\t// must check for the static status....", "+\t\tif (methodScope.isStatic) {", "+\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, fieldBinding);", "+\t\t\tthis.constant = Constant.NotAConstant;", "+\t\t\treturn fieldBinding.type;", "+\tthis.constant = fieldBinding.constant();", "+", "+\tif (isFieldUseDeprecated(fieldBinding, scope, (this.bits & ASTNode.IsStrictlyAssigned) !=0))", "+\t\tscope.problemReporter().deprecatedField(fieldBinding, this);", "+", "+\tif ((this.bits & ASTNode.IsStrictlyAssigned) == 0", "+\t\t\t&& methodScope.enclosingSourceType() == fieldBinding.original().declaringClass", "+\t\t\t&& methodScope.lastVisibleFieldID >= 0", "+\t\t\t&& fieldBinding.id >= methodScope.lastVisibleFieldID", "+\t\t\t&& (!fieldBinding.isStatic() || methodScope.isStatic)) {", "+\t\tscope.problemReporter().forwardReference(this, 0, methodScope.enclosingSourceType());", "+\t\tthis.bits |= ASTNode.IgnoreNoEffectAssignCheck;", "+\t}", "+\treturn fieldBinding.type;", "+", "+}"]}], "num": 62913}
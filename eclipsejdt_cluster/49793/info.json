{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5df59b053506eed3fc1bcef36c62d8b2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2648eba7cd992aea16dfa99ea78853ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/DeclaredTypeImpl.java", "commitBeforeChange": "fe964ab01ddcec37f8dfad2a7e0b4a4e86da2033", "commitAfterChange": "6b38a90674d8f322a6f0c632bd6a1269aa0b2341", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t@Override \tpublic TypeKind getKind()", "signatureAfterChange": "  \t@Override \tpublic TypeKind getKind()", "diff": ["-\t\tif (!binding().isValidBinding()) {", "+\t\t// Binding.isValidBinding() will return true for a parameterized or array type whose raw", "+\t\t// or member type is unresolved.  So we need to be a little more sensitive, so that we", "+\t\t// can report Zork<Quux> or Zork[] as error types.", "+\t\tReferenceBinding type = (ReferenceBinding)_binding;", "+\t\tif ((!type.isValidBinding() || ((type.tagBits & TagBits.HasMissingType) != 0))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33dd0d2f054f47281f1e90153a2e59da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/RoundEnvImpl.java", "commitBeforeChange": "99792a3ac5be202887d314558a46b5851f3a5997", "commitAfterChange": "16d1772b364d58d0dc794d5d90e7a800f55328ba", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t@Override \tpublic Set<? extends Element> getElementsAnnotatedWith(TypeElement a)", "signatureAfterChange": " \t@Override \tpublic Set<? extends Element> getElementsAnnotatedWith(TypeElement a)", "diff": ["-\t\tif (isAnnotationInherited(a)) {", "+\t\tBinding annoBinding = ((TypeElementImpl)a)._binding;", "+\t\tif (0 != (annoBinding.getAnnotationTagBits() & TagBits.AnnotationInherited)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81ad7f2be0ac9dbe4428160a1e4ef6b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "071f59f477be631666f24420ca0aab156c270c65", "commitAfterChange": "986a6d11b1b7e4db82dd5d830210e01550f74aa3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "signatureAfterChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "diff": ["+\t\tboolean contextualCheckEquality = checkEquality ^ ((flowContext.tagBits & FlowContext.INSIDE_NEGATIVE_ASSERT) != 0);", "-\t\t\t\t\t\t\t&& ((!checkEquality && rightStatus == FlowInfo.NULL) || (checkEquality && rightStatus == FlowInfo.NON_NULL))", "+\t\t\t\t\t\t\t&& ((!contextualCheckEquality && rightStatus == FlowInfo.NULL) ", "+\t\t\t\t\t\t\t\t\t|| (contextualCheckEquality && rightStatus == FlowInfo.NON_NULL))", "-\t\t\t\t\t\t\t&& ((!checkEquality && leftStatus == FlowInfo.NULL) || (checkEquality && leftStatus == FlowInfo.NON_NULL))", "+\t\t\t\t\t\t\t&& ((!contextualCheckEquality && leftStatus == FlowInfo.NULL) ", "+\t\t\t\t\t\t\t\t\t|| (contextualCheckEquality && leftStatus == FlowInfo.NON_NULL))"]}], "num": 49793}
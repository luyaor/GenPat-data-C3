{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3548dc5b8c7ae262bfe0afcae10582ab", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05fda2e02e2ebbaf50f10fc653201f63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "5cb9f8ecd53559ff3c10df42a2bc3784ca7e7125", "commitAfterChange": "3d2e4bef103f9f9069998e5bb644641fa3ffad9f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, String enclosingDeclaringTypeSignature, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, boolean isDeclaration, char[] uniqueKey, int start, int end)", "signatureAfterChange": " public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, String enclosingDeclaringTypeSignature, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, boolean isDeclaration, char[] uniqueKey, int start, int end)", "diff": ["+\tIJavaElement[] previousElement = this.elements;", "+\tint previousElementIndex = this.elementIndex;", "+\tthis.elements = JavaElement.NO_ELEMENTS;", "+\tthis.elementIndex = -1;", "+\t", "+\t", "+\tif(previousElementIndex > -1) {", "+\t\tint elementsLength = this.elementIndex + previousElementIndex + 2;", "+\t\tif(elementsLength > this.elements.length) {", "+\t\t\tSystem.arraycopy(this.elements, 0, this.elements = new IJavaElement[elementsLength * 2 + 1], 0, this.elementIndex + 1);", "+\t\t}", "+\t\tSystem.arraycopy(previousElement, 0, this.elements, this.elementIndex + 1, previousElementIndex + 1);", "+\t\tthis.elementIndex += previousElementIndex + 1;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f5f63e99cb0f9c290de1b769172a5e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "bd3a3cad1ce734989fe638578b24f55571172fd2", "commitAfterChange": "adc07cf3b793a0c93fc3ffa3b36d812e63e0ed07", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tprivate void findClassField(char[] token, TypeBinding receiverType, Scope scope)", "signatureAfterChange": "  \tprivate void findClassField(char[] token, TypeBinding receiverType, Scope scope)", "diff": ["-\t\t\t\tproposal.setSignature(", "-\t\t\t\t\t\tcreateNonGenericTypeSignature(", "-\t\t\t\t\t\t\t\tCharOperation.concatWith(JAVA_LANG, '.'),", "-\t\t\t\t\t\t\t\tCLASS));", "+\t\t\t\tchar[] signature = ", "+\t\t\t\t\tcreateNonGenericTypeSignature(", "+\t\t\t\t\t\tCharOperation.concatWith(JAVA_LANG, '.'),", "+\t\t\t\t\t\tCLASS);", "+\t\t\t\tif (this.compilerOptions.sourceLevel > ClassFileConstants.JDK1_4) {", "+\t\t\t\t\t// add type argument", "+\t\t\t\t\tchar[] typeArgument = getTypeSignature(receiverType);", "+\t\t\t\t\tint oldLength = signature.length;", "+\t\t\t\t\tint argumentLength = typeArgument.length;", "+\t\t\t\t\tint newLength = oldLength + argumentLength + 2;", "+\t\t\t\t\tSystem.arraycopy(signature, 0, signature = new char[newLength], 0, oldLength - 1);", "+\t\t\t\t\tsignature[oldLength - 1] = '<';", "+\t\t\t\t\tSystem.arraycopy(typeArgument, 0, signature, oldLength , argumentLength);", "+\t\t\t\t\tsignature[newLength - 2] = '>';", "+\t\t\t\t\tsignature[newLength - 1] = ';';", "+\t\t\t\t}", "+\t\t\t\tproposal.setSignature(signature);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8f76dc7d6ef0888d33e974b6e9a930e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultCommentMapper.java", "commitBeforeChange": "e178d64eb65916b8b54353dd9e6bcf5b085bf212", "commitAfterChange": "b43b2427c7b970b1fbbb18c36881f31743b7cd83", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tint storeLeadingComments(ASTNode node, int previousEnd)", "signatureAfterChange": " \tint storeLeadingComments(ASTNode node, int previousEnd)", "diff": ["-\t\t\t\tthis.leadingComments.put(node, new int[] { startIdx, endIdx });", "+\t\t\t\tif (++this.leadingPtr == 0) {", "+\t\t\t\t\tthis.leadingNodes = new ASTNode[STORAGE_INCREMENT];", "+\t\t\t\t\tthis.leadingIndexes = new int[STORAGE_INCREMENT][];", "+\t\t\t\t} else if (this.leadingPtr == this.leadingNodes.length) {", "+\t\t\t\t\tint newLength = (this.leadingPtr*3/2)+STORAGE_INCREMENT;", "+\t\t\t\t\tSystem.arraycopy(this.leadingNodes, 0, this.leadingNodes = new ASTNode[newLength], 0, this.leadingPtr);", "+\t\t\t\t\tSystem.arraycopy(this.leadingIndexes, 0, this.leadingIndexes = new int[newLength][], 0, this.leadingPtr);", "+\t\t\t\t}", "+\t\t\t\tthis.leadingNodes[this.leadingPtr] = node;", "+\t\t\t\tthis.leadingIndexes[this.leadingPtr] = new int[] { startIdx, endIdx };"]}], "num": 22478}
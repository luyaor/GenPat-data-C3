{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9f94ed58f8907c4f705f56ac3405d546", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e8bf08027c77233131c056f56873a94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "4f90f7005696a0951a49d2ebe0ca59ea39a6f81e", "commitAfterChange": "c6233ae2c577c6f0263643cd88cdf0be03329c72", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " public void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " public void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\t\t\tif (currentArg.equals(\"-1.7\") || currentArg.equals(\"-7\") || currentArg.equals(\"-7.0\")) { //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tdidSpecifyCompliance = true;", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_7);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\t} else if (currentArg.equals(\"1.7\") || currentArg.equals(\"7\") || currentArg.equals(\"7.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_7);", "+\t\t\t\t} else if (currentArg.equals(\"1.7\") || currentArg.equals(\"7\") || currentArg.equals(\"7.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_7);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47868dcabfa3b8e02d12d5d5f58defc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "29bba5ec8d05a9cd1832ad934d2530b41087b676", "commitAfterChange": "ca349eb1728a54f5c4569863d8f64340b099c4ce", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "  @Override protected void consumeReferenceExpression(ReferenceExpression referenceExpression)", "signatureAfterChange": "  @Override protected void consumeReferenceExpression(ReferenceExpression referenceExpression)", "diff": ["-\tif (this.patternFineGrain == 0 || (this.patternFineGrain & IJavaSearchConstants.THIS_REFERENCE) != 0) {", "+\tif (this.patternFineGrain == 0) {", "+\t} else if (referenceExpression.lhs.isThis()) {", "+\t\tif ((this.patternFineGrain & IJavaSearchConstants.THIS_REFERENCE) != 0) {", "+\t\t\tthis.patternLocator.match(referenceExpression, this.nodeSet);", "+\t\t}", "+\t} else if (referenceExpression.lhs.isSuper()) {", "+\t\tif ((this.patternFineGrain & IJavaSearchConstants.SUPER_REFERENCE) != 0) {", "+\t\t\tthis.patternLocator.match(referenceExpression, this.nodeSet);", "+\t\t}", "+\t} else if (referenceExpression.lhs instanceof QualifiedNameReference || referenceExpression.lhs instanceof QualifiedTypeReference) {", "+\t\tif ((this.patternFineGrain & IJavaSearchConstants.QUALIFIED_REFERENCE) != 0) {", "+\t\t\tthis.patternLocator.match(referenceExpression, this.nodeSet);", "+\t\t} "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56393e35263194a82831e3913ed78696", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "42a83e286ceeeb29630f8c589f53ac9c4faaa3fa", "commitAfterChange": "daca3c57fe8ee65cb418bcec5cbbb6e712e7dc06", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\t\t\t\tCompilerOptions.OPTION_ReportLocalVariableHiding,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportFieldHiding,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportConstructorParameterHidingField,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "-\t\t\t\t\t} else if (token.equals(\"syntheticAccess\")) { //$NON-NLS-1$", "+\t\t\t\t\t} else if (token.equals(\"localHiding\")) { //$NON-NLS-1$", "+\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportLocalVariableHiding,", "+\t\t\t\t\t\t\tCompilerOptions.WARNING);", "+\t\t\t\t\t} else if (token.equals(\"fieldHiding\")) { //$NON-NLS-1$", "+\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportFieldHiding,", "+\t\t\t\t\t\t\tCompilerOptions.WARNING);", "+\t\t\t\t\t} else if (token.equals(\"constrParamHidingField\")) { //$NON-NLS-1$", "+\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportConstructorParameterHidingField,", "+\t\t\t\t\t\t\tCompilerOptions.WARNING);", "+   \t\t\t\t\t} else if (token.equals(\"syntheticAccess\")) { //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "620f03f8ea4ec10ab3d74cd76396aabf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "701b9f3a2a6ad66de33a42c0675cad82bdb44626", "commitAfterChange": "ed32ce010cb6b771c8064ab8d69b715c1bc9347a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding, AccessRestriction accessRestriction)", "signatureAfterChange": " \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding, AccessRestriction accessRestriction)", "diff": ["+\t\t", "+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=305259, build the compilation unit in its own sand box.", "+\t\tfinal long savedComplianceLevel = this.options.complianceLevel;", "+\t\tfinal long savedSourceLevel = this.options.sourceLevel;", "+\t\t", "+\t\ttry {", "+\t\t\tIJavaProject project = ((SourceTypeElementInfo) sourceTypes[0]).getHandle().getJavaProject();", "+\t\t\tthis.options.complianceLevel = CompilerOptions.versionToJdkLevel(project.getOption(JavaCore.COMPILER_COMPLIANCE, true));", "+\t\t\tthis.options.sourceLevel = CompilerOptions.versionToJdkLevel(project.getOption(JavaCore.COMPILER_SOURCE, true));", "-\t\t// need to hold onto this", "-\t\tCompilationUnitDeclaration unit =", "-\t\t\tSourceTypeConverter.buildCompilationUnit(", "-\t\t\t\tsourceTypes,//sourceTypes[0] is always toplevel here", "-\t\t\t\tSourceTypeConverter.FIELD_AND_METHOD // need field and methods", "-\t\t\t\t| SourceTypeConverter.MEMBER_TYPE // need member types", "-\t\t\t\t| SourceTypeConverter.FIELD_INITIALIZATION, // need field initialization", "-\t\t\t\tthis.lookupEnvironment.problemReporter,", "-\t\t\t\tresult);", "+\t\t\t// need to hold onto this", "+\t\t\tCompilationUnitDeclaration unit =", "+\t\t\t\tSourceTypeConverter.buildCompilationUnit(", "+\t\t\t\t\t\tsourceTypes,//sourceTypes[0] is always toplevel here", "+\t\t\t\t\t\tSourceTypeConverter.FIELD_AND_METHOD // need field and methods", "+\t\t\t\t\t\t| SourceTypeConverter.MEMBER_TYPE // need member types", "+\t\t\t\t\t\t| SourceTypeConverter.FIELD_INITIALIZATION, // need field initialization", "+\t\t\t\t\t\tthis.lookupEnvironment.problemReporter,", "+\t\t\t\t\t\tresult);", "-\t\tif (unit != null) {", "-\t\t\tthis.lookupEnvironment.buildTypeBindings(unit, accessRestriction);", "-\t\t\tthis.lookupEnvironment.completeTypeBindings(unit);", "+\t\t\tif (unit != null) {", "+\t\t\t\tthis.lookupEnvironment.buildTypeBindings(unit, accessRestriction);", "+\t\t\t\tthis.lookupEnvironment.completeTypeBindings(unit);", "+\t\t\t}", "+\t\t} finally {", "+\t\t\tthis.options.complianceLevel = savedComplianceLevel;", "+\t\t\tthis.options.sourceLevel = savedSourceLevel;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fb00e625f7d2cc3a49c7b559d4f5d4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "e8c9a8ad63c042540bdf2089eae8eda8857cd19d", "commitAfterChange": "44ff943ce2a18d1de59c739946fda0722d1ad727", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": " private void handleErrorOrWarningToken(String token, boolean isEnabling, int severity)", "signatureAfterChange": " private void handleErrorOrWarningToken(String token, boolean isEnabling, int severity)", "diff": ["-\t\t\tif (token.equals(\"enumSwitch\") //$NON-NLS-1$", "-\t\t\t\t\t|| token.equals(\"incomplete-switch\")) { //$NON-NLS-1$", "+\t\t\tif (token.equals(\"enumSwitch\")) { //$NON-NLS-1$", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"enumSwitchPedantic\")) { //$NON-NLS-1$", "+\t\t\t\tif (isEnabling) {", "+\t\t\t\t\tswitch (severity) {", "+\t\t\t\t\t\tcase ProblemSeverities.Error:", "+\t\t\t\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportIncompleteEnumSwitch, severity, isEnabling);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase ProblemSeverities.Warning:", "+\t\t\t\t\t\t\tif (CompilerOptions.IGNORE.equals(this.options.get(CompilerOptions.OPTION_ReportIncompleteEnumSwitch))) {", "+\t\t\t\t\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportIncompleteEnumSwitch, severity, isEnabling);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault: // no severity update", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tthis.options.put(CompilerOptions.OPTION_ReportMissingEnumCaseDespiteDefault, ", "+\t\t\t\t\t\t\t\t isEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t} else if (token.equals(\"switchDefault\")) { //$NON-NLS-1$", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportMissingDefaultCase, severity, isEnabling);", "+\t\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8663b33316b2bfefa8220e78d57556da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/SourceIndexerRequestor.java", "commitBeforeChange": "b9b3b8c1fedf5d6daa213336839897b001a3416e", "commitAfterChange": "bdd2ddc06125eff9d34246fb7941b569e87e3115", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void enterMethod(MethodInfo methodInfo)", "signatureAfterChange": " public void enterMethod(MethodInfo methodInfo)", "diff": ["+\tint argCount = methodInfo.parameterTypes == null ? 0 : methodInfo.parameterTypes.length;", "+\tchar[] typeName = methodInfo.enclosingType != null ? methodInfo.enclosingType.name : null;", "+\tif (typeName == null || typeName.length == 0) return;", "+\tthis.indexer.addMethodDeclaration(", "+\t\t\ttypeName,", "+\t\t\tgetDeclaringQualification(methodInfo.enclosingType),", "+\t\t\tmethodInfo.name,", "+\t\t\targCount,", "+\t\t\tnull,", "+\t\t\tmethodInfo.parameterTypes,", "+\t\t\tmethodInfo.parameterNames,", "+\t\t\tmethodInfo.returnType,", "+\t\t\tmethodInfo.modifiers,", "+\t\t\tmethodInfo.declaringPackageName,", "+\t\t\tmethodInfo.declaringTypeModifiers,", "+\t\t\tmethodInfo.exceptionTypes,", "+\t\t\tgetMoreExtraFlags(methodInfo.extraFlags));"]}], "num": 44579}